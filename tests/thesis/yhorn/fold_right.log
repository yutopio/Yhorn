MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn fold_right.ml

parsed::
 let rec fold_right_1030 f_1031 xs_1032 acc_1033 =
   (match xs_1032 with
      | [] -> acc_1033
      | x_1034::xs'_1035 -> f_1031 x_1034 (fold_right_1030 f_1031 xs'_1035 acc_1033)) 
 in
 let rec make_list_1036 n_1037 = if n_1037 < 0 then
                                   []
                                 else
                                   n_1037::make_list_1036 (n_1037 - 1) 
 in
 let add_1038 x_1039 y_1040 = x_1039 + y_1040 
 in
 let main_1041 n_1042 m_1043 =
   let xs_1044 = make_list_1036 n_1042 
   in
     if fold_right_1030 add_1038 xs_1044 m_1043 >= m_1043 then
       ()
     else
       {fail} () 
 in
   ()

set_target::
 let rec fold_right_1030 f_1031 xs_1032 acc_1033 =
   (match xs_1032 with
      | [] -> acc_1033
      | x_1034::xs'_1035 -> f_1031 x_1034 (fold_right_1030 f_1031 xs'_1035 acc_1033)) 
 in
 let rec make_list_1036 n_1037 = if n_1037 < 0 then
                                   []
                                 else
                                   n_1037::make_list_1036 (n_1037 - 1) 
 in
 let add_1038 x_1039 y_1040 = x_1039 + y_1040 
 in
 let main_1041 n_1042 m_1043 =
   let xs_1044 = make_list_1036 n_1042 
   in
     if fold_right_1030 add_1038 xs_1044 m_1043 >= m_1043 then
       ()
     else
       {fail} () 
 in
 let main_1099 = let arg1_1097 = rand_int () 
                 in
                 let arg2_1098 = rand_int () 
                 in
                   main_1041 arg1_1097 arg2_1098 
 in
   ()

abst_list::
 let rec fold_right_1030 (f_1031:(int -> (int -> int))) (xs_1032:(int * (int -> int))) (acc_1033:int) =
   if fst xs_1032 = 0 then
     acc_1033
   else
     if 1 <= fst xs_1032 then
       let xs'_1035 = (fst xs_1032 - 1, fun x_1104 -> (snd xs_1032) (x_1104 + 1)) 
       in
       let x_1034 = (snd xs_1032) 0 
       in
         f_1031 x_1034 (fold_right_1030 f_1031 xs'_1035 acc_1033)
     else
       _|_ 
 in
 let rec make_list_1036 (n_1037:int) =
   if n_1037 < 0 then
     (0, fun x_1137 -> _|_)
   else
     let cons_make_list_1133 (x_1131:int) (xs_1132:(int * (int -> int))) =
       (fst xs_1132 + 1, fun i_1130 -> (if i_1130 = 0 then
                                          x_1131
                                        else
                                          (snd xs_1132) (i_1130 - 1))) 
     in
       cons_make_list_1133 n_1037 (make_list_1036 (n_1037 - 1)) 
 in
 let add_1038 (x_1039:int) (y_1040:int) = x_1039 + y_1040 
 in
 let main_1041 (n_1042:int) (m_1043:int) =
   let xs_1044 = make_list_1036 n_1042 
   in
     if fold_right_1030 add_1038 xs_1044 m_1043 >= m_1043 then
       ()
     else
       {fail} () 
 in
 let main_1099 = let arg1_1097 = rand_int () 
                 in
                 let arg2_1098 = rand_int () 
                 in
                   main_1041 arg1_1097 arg2_1098 
 in
   ()

CPS::
 let rec fold_right_1030
   (f_1031:(int -> (int -> ((int -> X) -> X)))) (xs_1032:(int * (int -> ((int -> X) -> X)))) (acc_1033:int) (k_fold_right_1215:(
   int -> X)) =
   if fst xs_1032 = 0 then
     k_fold_right_1215 acc_1033
   else
     if 1 <= fst xs_1032 then
       (snd xs_1032) 0
         (fun x_1262 ->
            fold_right_1030 f_1031
              (fst xs_1032 - 1,
              fun x_1104 -> fun k_fold_right_xs'_1248 -> (snd xs_1032) (x_1104 + 1) k_fold_right_xs'_1248) acc_1033
              (fun x_1309 -> f_1031 x_1262 x_1309 k_fold_right_1215))
     else
       _|_ 
 in
 let rec make_list_1036 (n_1037:int) (k_make_list_1345:((int * (int -> ((int -> X) -> X))) -> X)) =
   if n_1037 < 0 then
     k_make_list_1345 (0, fun x_1137 -> fun k_make_list_1357 -> _|_)
   else
     let cons_make_list_1133
       (x_1131:int) (xs_1132:(int * (int -> ((int -> X) -> X)))) (k_make_list_cons_make_list_1404:(
       (int * (int -> ((int -> X) -> X))) -> X)) =
       k_make_list_cons_make_list_1404
         (fst xs_1132 + 1,
         fun i_1130 ->
           fun k_make_list_cons_make_list_1419 ->
             (if i_1130 = 0 then
                k_make_list_cons_make_list_1419 x_1131
              else
                (snd xs_1132) (i_1130 - 1) k_make_list_cons_make_list_1419)) 
     in
       make_list_1036 (n_1037 - 1) (fun x_1482 -> cons_make_list_1133 n_1037 x_1482 k_make_list_1345) 
 in
 let add_1038 (x_1039:int) (y_1040:int) (k_add_1506:(int -> X)) = k_add_1506 (x_1039 + y_1040) 
 in
 let main_1041 (n_1042:int) (m_1043:int) (k_main_1523:(unit -> X)) =
   make_list_1036 n_1042
     (fun x_1529 ->
        fold_right_1030 add_1038 x_1529 m_1043
          (fun x_1557 -> (if x_1557 >= m_1043 then
                            k_main_1523 ()
                          else
                            {|fail|} () k_main_1523))) 
 in
   rand_int_cps () (fun x_1601 -> rand_int_cps () (fun x_1614 -> main_1041 x_1601 x_1614 (fun x_1598 -> end)))

remove_pair::
 let rec fold_right_1030
   (f_1031:(int -> (int -> ((int -> X) -> X)))) (xs1_1032:int) (xs2_1032:(
   int -> ((int -> X) -> X))) (acc_1033:int) (k_fold_right_1215:(int -> X)) =
   if xs1_1032 = 0 then
     k_fold_right_1215 acc_1033
   else
     if 1 <= xs1_1032 then
       xs2_1032 0
         (fun x_1262 ->
            fold_right_1030 f_1031 (xs1_1032 - 1)
              (fun x_1104 -> fun k_fold_right_xs'_1248 -> xs2_1032 (x_1104 + 1) k_fold_right_xs'_1248) acc_1033
              (fun x_1309 -> f_1031 x_1262 x_1309 k_fold_right_1215))
     else
       _|_ 
 in
 let rec make_list_1036 (n_1037:int) (k_make_list_1345:(int -> ((int -> ((int -> X) -> X)) -> X))) =
   if n_1037 < 0 then
     k_make_list_1345 0 (fun x_1137 -> fun k_make_list_1357 -> _|_)
   else
     let cons_make_list_1133
       (x_1131:int) (xs1_1132:int) (xs2_1132:(int -> ((int -> X) -> X))) (k_make_list_cons_make_list_1404:(
       int -> ((int -> ((int -> X) -> X)) -> X))) =
       k_make_list_cons_make_list_1404 (xs1_1132 + 1)
         (fun i_1130 ->
            fun k_make_list_cons_make_list_1419 ->
              (if i_1130 = 0 then
                 k_make_list_cons_make_list_1419 x_1131
               else
                 xs2_1132 (i_1130 - 1) k_make_list_cons_make_list_1419)) 
     in
       make_list_1036 (n_1037 - 1)
         (fun x1_1482 -> fun x2_1482 -> cons_make_list_1133 n_1037 x1_1482 x2_1482 k_make_list_1345) 
 in
 let add_1038 (x_1039:int) (y_1040:int) (k_add_1506:(int -> X)) = k_add_1506 (x_1039 + y_1040) 
 in
 let main_1041 (n_1042:int) (m_1043:int) (k_main_1523:(unit -> X)) =
   make_list_1036 n_1042
     (fun x1_1529 ->
        fun x2_1529 ->
          fold_right_1030 add_1038 x1_1529 x2_1529 m_1043
            (fun x_1557 -> (if x_1557 >= m_1043 then
                              k_main_1523 ()
                            else
                              {|fail|} () k_main_1523))) 
 in
   rand_int_cps () (fun x_1601 -> rand_int_cps () (fun x_1614 -> main_1041 x_1601 x_1614 (fun x_1598 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1676
  main_1676 -> (rand_int f_1685)
  add_1038 x_1039 y_1040 k_add_1506 -> (k_add_1506 (x_1039 + y_1040))
  br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when b_1689 ->
      (xs2_1032 0 (f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032))
  br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (not b_1689) -> _|_
  cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1404 ->
      (k_make_list_cons_make_list_1404 (xs1_1132 + 1) (f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132))
  f_1685 x_1601 -> (rand_int (f_1686 x_1601))
  f_1686 x_1601 x_1614 -> (main_1041 x_1601 x_1614 (f_1687 x_1601 x_1614))
  f_1687 x_1601 x_1614 x_1598 -> end
  f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 when (
      i_1130 = 0) -> (k_make_list_cons_make_list_1419 x_1131)
  f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 when (
      not (i_1130 = 0)) -> (xs2_1132 (i_1130 - 1) k_make_list_cons_make_list_1419)
  f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032 x_1262 ->
      (fold_right_1030 f_1031 (xs1_1032 - 1) (f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032) acc_1033
        (f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215))
  f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032 x_1104 k_fold_right_xs'_1248 ->
      (xs2_1032 (x_1104 + 1) k_fold_right_xs'_1248)
  f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215 x_1309 ->
      (f_1031 x_1262 x_1309 k_fold_right_1215)
  f_main_1683 m_1043 n_1042 k_main_1523 x1_1529 x2_1529 ->
      (fold_right_1030 add_1038 x1_1529 x2_1529 m_1043 (f_main_1684 m_1043 n_1042 x1_1529 k_main_1523))
  f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 when (x_1557 >= m_1043) -> (k_main_1523 ())
  f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 when (not (x_1557 >= m_1043)) -> (fail_1690 true k_main_1523)
  f_make_list_1680 n_1037 x_1137 k_make_list_1357 -> _|_
  f_make_list_1682 n_1037 k_make_list_1345 x1_1482 x2_1482 ->
      (cons_make_list_1133 n_1037 n_1037 x1_1482 x2_1482 k_make_list_1345)
  fail_1690 b k -> {fail} => (k ())
  fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (
      xs1_1032 = 0) -> (k_fold_right_1215 acc_1033)
  fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (
      not (xs1_1032 = 0)) -> (br_fold_right_1688 (1 <= xs1_1032) f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215)
  main_1041 n_1042 m_1043 k_main_1523 -> (make_list_1036 n_1042 (f_main_1683 m_1043 n_1042 k_main_1523))
  make_list_1036 n_1037 k_make_list_1345 when (n_1037 < 0) -> (k_make_list_1345 0 (f_make_list_1680 n_1037))
  make_list_1036 n_1037 k_make_list_1345 when (not (n_1037 < 0)) ->
      (make_list_1036 (n_1037 - 1) (f_make_list_1682 n_1037 k_make_list_1345))
Types:
  main_1676 : X
  fail_1690 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fold_right_1030 : ((int -> int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X)
  make_list_1036 : (int -> (int -> (int -> (int -> X) -> X) -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1676 ... --> 
  f_1685 ... --> 
  f_1686 ... --> 
  main_1041 ... --> 
  make_list_1036 [1/2] ... --> 
  f_main_1683 ... --> 
  fold_right_1030 [1/2] ... --> 
  f_main_1684 [2/2] ... --> 
  fail_1690 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(183)[1]
  program:
    main_1676  | true = ((Random.int 0) f_1685)
    add_1038 x_1039 y_1040 k_add_1506 | true = (k_add_1506 (x_1039 + y_1040))
    br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | b_1689 = (
    xs2_1032 0
             (f_fold_right_1677 acc_1033
                                xs1_1032
                                f_1031
                                k_fold_right_1215
                                xs2_1032))
    br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | (
    not b_1689) = bot
    cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1404 | true = (
    k_make_list_cons_make_list_1404 (xs1_1132 + 1)
                                    (f_cons_make_list_1681 n_1037
                                                           x_1131
                                                           xs1_1132
                                                           xs2_1132))
    f_1685 x_1601 | true = ((Random.int 0) (f_1686 x_1601))
    f_1686 x_1601 x_1614 | true = (main_1041 x_1601
                                             x_1614
                                             (f_1687 x_1601
                                                     x_1614))
    f_1687 x_1601 x_1614 x_1598 | true = end
    f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 | (
    i_1130 = 0) = (k_make_list_cons_make_list_1419 x_1131)
    f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 | (
    not (i_1130 = 0)) = (xs2_1132 (i_1130 - 1)
                                  k_make_list_cons_make_list_1419)
    f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032 x_1262 | true = (
    fold_right_1030
      f_1031
      (xs1_1032 - 1)
      (f_fold_right_1678 acc_1033
                         x_1262
                         xs1_1032
                         xs2_1032)
      acc_1033
      (f_fold_right_1679 acc_1033
                         x_1262
                         xs1_1032
                         f_1031
                         k_fold_right_1215))
    f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032 x_1104 k_fold_right_xs'_1248 | true = (
    xs2_1032 (x_1104 + 1)
             k_fold_right_xs'_1248)
    f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215 x_1309 | true = (
    f_1031 x_1262
           x_1309
           k_fold_right_1215)
    f_main_1683 m_1043 n_1042 k_main_1523 x1_1529 x2_1529 | true = (fold_right_1030
                                                                    add_1038
                                                                    x1_1529
                                                                    x2_1529
                                                                    m_1043
                                                                    (
                                                                    f_main_1684 m_1043
                                                                    n_1042
                                                                    x1_1529
                                                                    k_main_1523))
    f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 | (x_1557 >= m_1043) = (
    k_main_1523 ())
    f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 | (not (x_1557 >= m_1043)) = (
    fail_1690 true
              k_main_1523)
    f_make_list_1680 n_1037 x_1137 k_make_list_1357 | true = bot
    f_make_list_1682 n_1037 k_make_list_1345 x1_1482 x2_1482 | true = (
    cons_make_list_1133 n_1037
                        n_1037
                        x1_1482
                        x2_1482
                        k_make_list_1345)
    fail_1690 b k | true = (fail ())
    fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | (
    xs1_1032 = 0) = (k_fold_right_1215 acc_1033)
    fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | (
    not (xs1_1032 = 0)) = (br_fold_right_1688 (1 <= xs1_1032)
                                              f_1031
                                              xs1_1032
                                              xs2_1032
                                              acc_1033
                                              k_fold_right_1215)
    main_1041 n_1042 m_1043 k_main_1523 | true = (make_list_1036 n_1042
                                                                 (f_main_1683 m_1043
                                                                    n_1042
                                                                    k_main_1523))
    make_list_1036 n_1037 k_make_list_1345 | (n_1037 < 0) = (k_make_list_1345 0
                                                                    (f_make_list_1680 n_1037))
    make_list_1036 n_1037 k_make_list_1345 | (not (n_1037 < 0)) = (make_list_1036
                                                                    (
                                                                    n_1037 - 1)
                                                                    (
                                                                    f_make_list_1682 n_1037
                                                                    k_make_list_1345))
    main_1676:X
    add_1038:int -> int -> (int -> X) -> X
    br_fold_right_1688:bool ->
                       (int -> int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    cons_make_list_1133:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1685:int -> X
    f_1686:int -> int -> X
    f_1687:int -> int -> unit -> X
    f_cons_make_list_1681:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_fold_right_1677:int ->
                      int -> (int -> int -> (int -> X) -> X) -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_fold_right_1678:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_fold_right_1679:int -> int -> int -> (int -> int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_main_1683:int -> int -> (unit -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_main_1684:int -> int -> int -> (unit -> X) -> int -> X
    f_make_list_1680:int -> int -> (int -> X) -> X
    f_make_list_1682:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    fail_1690:bool -> (unit -> X) -> X
    fold_right_1030:(int -> int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    main_1041:int -> int -> (unit -> X) -> X
    make_list_1036:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
  inlined functions: add_1038,br_fold_right_1688,cons_make_list_1133,f_1685,f_1686,f_1687,f_cons_make_list_1681,f_fold_right_1677,f_fold_right_1678,f_fold_right_1679,f_main_1683,f_main_1684,f_make_list_1680,f_make_list_1682,main_1041
  counterexample: 0:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1685@4:0> = var2)
     [true.nop((<f_1686@7:0> = <f_1685@4:0>) && (<f_1686@7:1> = var3))
      [true.((<main_1041@9:0> = <f_1686@7:0>) && (<main_1041@9:1> = <f_1686@7:1>))
       [true.(<make_list_1036@11:0> = <main_1041@9:0>)
        [(<make_list_1036@11:0> < 0).(<<make_list_1036@11:1>@14:0> = 0)
         [true.
          ((<f_main_1683@16:0> = <main_1041@9:1>) &&
           ((<f_main_1683@16:1> = <main_1041@9:0>) && (<f_main_1683@16:3> = <<make_list_1036@11:1>@14:0>)))
          [true.((<fold_right_1030@18:1> = <f_main_1683@16:3>) && (<fold_right_1030@18:3> = <f_main_1683@16:0>))
           [(<fold_right_1030@18:1> = 0).(<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>)
            [true.
             ((<f_main_1684@23:0> = <f_main_1683@16:0>) &&
              ((<f_main_1684@23:1> = <f_main_1683@16:1>) &&
               ((<f_main_1684@23:2> = <f_main_1683@16:3>) && (<f_main_1684@23:4> = <<fold_right_1030@18:4>@21:0>))))
             [(not (<f_main_1684@23:4> >= <f_main_1684@23:0>)).(<fail_1690@26:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(184)[2]
    horn clauses:
      P[<fail_1690@26:0>](<fail_1690@26:0>:bool)|- bot
      
      P[<f_main_1684@23:4>](<f_main_1684@23:0>:int,<f_main_1684@23:1>:int,<f_main_1684@23:2>:int,<f_main_1684@23:4>:int),
      ((<f_main_1684@23:4> < <f_main_1684@23:0>) && <fail_1690@26:0>) |- P[<fail_1690@26:0>](
      <fail_1690@26:0>:bool)
      
      P[<f_main_1683@16:3>](<f_main_1684@23:0>:int,<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
      P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int)|- P[<f_main_1684@23:4>](
      <f_main_1684@23:0>:int,<f_main_1684@23:1>:int,<f_main_1684@23:2>:int,
      <f_main_1684@23:4>:int)
      
      P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
      ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
      |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                          <fold_right_1030@18:3>:int,
                                          <<fold_right_1030@18:4>@21:0>:int)
      
      P[<f_main_1683@16:3>](<fold_right_1030@18:3>:int,<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
      <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
      
      P[<main_1041@9:1>](<f_main_1683@16:1>:int,<f_main_1683@16:0>:int),
      P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<f_main_1683@16:3>:int)|- P[<f_main_1683@16:3>](
      <f_main_1683@16:0>:int,<f_main_1683@16:1>:int,<f_main_1683@16:3>:int)
      
      P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
      ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
      |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int)
      
      P[<main_1041@9:1>](<make_list_1036@11:0>:int,<main_1041@9:1>:int)|- P[<make_list_1036@11:0>](
      <make_list_1036@11:0>:int)
      
      P[<f_1686@7:1>](<main_1041@9:0>:int,<main_1041@9:1>:int)|- P[<main_1041@9:1>](
      <main_1041@9:0>:int,<main_1041@9:1>:int)
      
      P[<f_1685@4:0>](<f_1686@7:0>:int)|- P[<f_1686@7:1>](<f_1686@7:0>:int,
                                                          <f_1686@7:1>:int)
      
      |- P[<f_1685@4:0>](<f_1685@4:0>:int)
    call trees:
      <main_1676@1>
        <f_1685@4>
          <f_1686@7>
            <main_1041@9>
              <make_list_1036@11>
              </<make_list_1036@11:1>@14>
              <f_main_1683@16>
                <fold_right_1030@18>
                </<fold_right_1030@18:4>@21>
                <f_main_1684@23>
                  <fail_1690@26>
    inlined horn clauses:
      P[<fail_1690@26:0>](<fail_1690@26:0>:bool)|- bot
      
      P[<<make_list_1036@11:1>@14:0>](<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
      P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int),
      ((<f_main_1684@23:4> < <f_main_1684@23:0>) && <fail_1690@26:0>) |- P[<fail_1690@26:0>](
      <fail_1690@26:0>:bool)
      
      P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
      ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
      |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                          <fold_right_1030@18:3>:int,
                                          <<fold_right_1030@18:4>@21:0>:int)
      
      P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
      <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
      
      P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
      ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
      |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int)
      
      |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
    begin ParamSubstInfer.infer(1429)[3]
      
    end ParamSubstInfer.infer(1429)[3] (0.014998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1431)[3]
      
    end RefTypeInfer.elim_coeffs(1431)[3] (0.001000 sec.)
    begin YhornInterface.solve(1668)[3]
      begin HcSolver.solve_ub(1669)[4]
        encoded:
          P[<fail_1690@26:0>](<fail_1690@26:0>:int)|- bot
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
          P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int),
          ((<f_main_1684@23:4> < <f_main_1684@23:0>) && (<fail_1690@26:0> = 1))
          |- P[<fail_1690@26:0>](<fail_1690@26:0>:int)
          
          P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
          ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
          |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                              <fold_right_1030@18:3>:int,
                                              <<fold_right_1030@18:4>@21:0>:int)
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
          <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
          
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
          ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
          |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                             <<make_list_1036@11:1>@14:0>:int)
          
          |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
        input to Yhorn:
          P[<fail_1690@26:0>](<fail_1690@26:0>:int)|- bot
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
          P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int),
          ((<f_main_1684@23:4> < <f_main_1684@23:0>) && (<fail_1690@26:0> = 1))
          |- P[<fail_1690@26:0>](<fail_1690@26:0>:int)
          
          P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
          ((<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>) && (<fold_right_1030@18:1> = 0))
          |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                              <fold_right_1030@18:3>:int,
                                              <<fold_right_1030@18:4>@21:0>:int)
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
          <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
          
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
          ((<make_list_1036@11:0> < 0) && (<<make_list_1036@11:1>@14:0> = 0))
          |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                             <<make_list_1036@11:1>@14:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1690_sep_26_sep_0($12)) -> 1=0.
(($12-1=0) & ($13-$14<0)) & (v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0($15,$14,$13)) & (v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($16,$15)) -> v_sep_fail_1690_sep_26_sep_0($12).
(($17=0) & ($18-$19=0)) & (v_sep_fold_right_1030_sep_18_sep_3($17,$19)) -> v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0($17,$19,$18).
(0=0) & (v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($20,$17)) -> v_sep_fold_right_1030_sep_18_sep_3($17,$19).
(($21=0) & ($22<0)) & (v_sep_make_list_1036_sep_11_sep_0($22)) -> v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($22,$21).
0=0 -> v_sep_make_list_1036_sep_11_sep_0($22).


v_sep_fail_1690_sep_26_sep_0: X
v_sep_fold_right_1030_sep_18_sep_3: X
v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0: X
v_sep_make_list_1036_sep_11_sep_0: X
v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0: X
.......
v_sep_fail_1690_sep_26_sep_0: X
v_sep_fold_right_1030_sep_18_sep_3: X
v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0: X
v_sep_make_list_1036_sep_11_sep_0: X
v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0: X
....
v_sep_fail_1690_sep_26_sep_0: X
v_sep_fold_right_1030_sep_18_sep_3: X
v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0: X
v_sep_make_list_1036_sep_11_sep_0: X
v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0: X
......
v_sep_fail_1690_sep_26_sep_0: X
v_sep_fold_right_1030_sep_18_sep_3: X
v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0: X
v_sep_make_list_1036_sep_11_sep_0: X
v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0: X
.......(0=0) & (v_sep_fail_1690_sep_26_sep_0($12)) -> 1=0.
(($12-1=0) & ($13-$14<0)) & (v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0($15,$14,$13)) & (v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($16,$15)) -> v_sep_fail_1690_sep_26_sep_0($12).
(($17=0) & ($18-$19=0)) & (v_sep_fold_right_1030_sep_18_sep_3($17,$19)) -> v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0($17,$19,$18).
(0=0) & (v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($20,$17)) -> v_sep_fold_right_1030_sep_18_sep_3($17,$19).
(($21=0) & ($22<0)) & (v_sep_make_list_1036_sep_11_sep_0($22)) -> v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($22,$21).
0=0 -> v_sep_make_list_1036_sep_11_sep_0($22).

          |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
        solution:
          P[<fail_1690@26:0>]($23:bool) = false
          P[<fold_right_1030@18:3>]($38:int,$40:int) = true
          P[<<fold_right_1030@18:4>@21:0>]($26:int,$28:int,$30:int) = ($28 <= $30)
          P[<make_list_1036@11:0>]($43:int) = true
          P[<<make_list_1036@11:1>@14:0>]($33:int,$35:int) = true
        
      end HcSolver.solve_ub(1669)[4] (0.015998 sec.)
      begin HcSolver.check_validity(1829)[4]
        input:
          P[<fail_1690@26:0>](<fail_1690@26:0>:bool)|- bot
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
          P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int),
          ((<f_main_1684@23:4> < <f_main_1684@23:0>) && <fail_1690@26:0>) |- P[<fail_1690@26:0>](
          <fail_1690@26:0>:bool)
          
          P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
          ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
          |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                              <fold_right_1030@18:3>:int,
                                              <<fold_right_1030@18:4>@21:0>:int)
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
          <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
          
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
          ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
          |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                             <<make_list_1036@11:1>@14:0>:int)
          
          |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1829)[4] (0.003999 sec.)
      solution:
        P[<fail_1690@26:0>]($23:bool) = false
        P[<fold_right_1030@18:3>]($38:int,$40:int) = true
        P[<<fold_right_1030@18:4>@21:0>]($26:int,$28:int,$30:int) = ($28 <= $30)
        P[<make_list_1036@11:0>]($43:int) = true
        P[<<make_list_1036@11:1>@14:0>]($33:int,$35:int) = true
    end YhornInterface.solve(1668)[3] (0.019997 sec.)
    
  end RefTypeInfer.infer_etrs(184)[2] (0.045993 sec.)
  refinement types:
    main_1676: X
    f_1685: v1:int -> X
    f_1686: v1:int -> v2:int -> X
    main_1041: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1036: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_main_1683: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    fold_right_1030: (v1:int -> v2:int -> (v3:int -> X) -> X) ->
                     v6:int -> (v7:int -> (v8:int -> X) -> X) -> v11:int -> (v12:{v12:int | (v11 <= v12)} -> X) -> X
    f_main_1684: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    fail_1690: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    add_1038: var33:int -> var32:int -> (var31:int -> X) -> X
    br_fold_right_1688: var48:bool ->
                        (var47:int -> var46:int -> (var45:int -> X) -> X) ->
                        var42:int -> (var41:int -> (var40:int -> X) -> X) -> var37:int -> (var36:int -> X) -> X
    cons_make_list_1133: var62:int ->
                         var61:int ->
                         var60:int ->
                         (var59:int -> (var58:int -> X) -> X) ->
                         (var55:int -> (var54:int -> (var53:int -> X) -> X) -> X) -> X
    f_1687: var66:int -> var65:int -> var64:unit -> X
    f_cons_make_list_1681: var77:int ->
                           var76:int ->
                           var75:int -> (var74:int -> (var73:int -> X) -> X) -> var70:int -> (var69:int -> X) -> X
    f_fold_right_1677: var92:int ->
                       var91:int ->
                       (var90:int -> var89:int -> (var88:int -> X) -> X) ->
                       (var85:int -> X) -> (var83:int -> (var82:int -> X) -> X) -> var79:int -> X
    f_fold_right_1678: var103:int ->
                       var102:int ->
                       var101:int -> (var100:int -> (var99:int -> X) -> X) -> var96:int -> (var95:int -> X) -> X
    f_fold_right_1679: var115:int ->
                       var114:int ->
                       var113:int ->
                       (var112:int -> var111:int -> (var110:int -> X) -> X) -> (var107:int -> X) -> var105:int -> X
    f_make_list_1680: var120:int -> var119:int -> (var118:int -> X) -> X
    f_make_list_1682: var133:int ->
                      (var132:int -> (var131:int -> (var130:int -> X) -> X) -> X) ->
                      var126:int -> (var125:int -> (var124:int -> X) -> X) -> X
  abstraction types:
    main_1676: X
    f_1685: v1:int -> X
    f_1686: v1:int -> v2:int -> X
    main_1041: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1036: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_main_1683: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    fold_right_1030: (v1:int -> v2:int -> (v3:int -> X) -> X) ->
                     v6:int -> (v7:int -> (v8:int -> X) -> X) -> v11:int -> (v12:int[v12 -> (
                                                                    v11 <= v12)] -> X) -> X
    f_main_1684: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    fail_1690: v1:bool -> (v2:unit -> X) -> X
    add_1038: var33:int -> var32:int -> (var31:int -> X) -> X
    br_fold_right_1688: var48:bool ->
                        (var47:int -> var46:int -> (var45:int -> X) -> X) ->
                        var42:int -> (var41:int -> (var40:int -> X) -> X) -> var37:int -> (var36:int -> X) -> X
    cons_make_list_1133: var62:int ->
                         var61:int ->
                         var60:int ->
                         (var59:int -> (var58:int -> X) -> X) ->
                         (var55:int -> (var54:int -> (var53:int -> X) -> X) -> X) -> X
    f_1687: var66:int -> var65:int -> var64:unit -> X
    f_cons_make_list_1681: var77:int ->
                           var76:int ->
                           var75:int -> (var74:int -> (var73:int -> X) -> X) -> var70:int -> (var69:int -> X) -> X
    f_fold_right_1677: var92:int ->
                       var91:int ->
                       (var90:int -> var89:int -> (var88:int -> X) -> X) ->
                       (var85:int -> X) -> (var83:int -> (var82:int -> X) -> X) -> var79:int -> X
    f_fold_right_1678: var103:int ->
                       var102:int ->
                       var101:int -> (var100:int -> (var99:int -> X) -> X) -> var96:int -> (var95:int -> X) -> X
    f_fold_right_1679: var115:int ->
                       var114:int ->
                       var113:int ->
                       (var112:int -> var111:int -> (var110:int -> X) -> X) -> (var107:int -> X) -> var105:int -> X
    f_make_list_1680: var120:int -> var119:int -> (var118:int -> X) -> X
    f_make_list_1682: var133:int ->
                      (var132:int -> (var131:int -> (var130:int -> X) -> X) -> X) ->
                      var126:int -> (var125:int -> (var124:int -> X) -> X) -> X
  
end AbsTypeInfer.refine(183)[1] (0.052992 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1676
  main_1676 -> (rand_int f_1685)
  add_1038 x_1039 y_1040 k_add_1506 -> (k_add_1506 (x_1039 + y_1040))
  br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when b_1689 ->
      (xs2_1032 0 (f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032))
  br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (not b_1689) -> _|_
  cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1404 ->
      (k_make_list_cons_make_list_1404 (xs1_1132 + 1) (f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132))
  f_1685 x_1601 -> (rand_int (f_1686 x_1601))
  f_1686 x_1601 x_1614 -> (main_1041 x_1601 x_1614 (f_1687 x_1601 x_1614))
  f_1687 x_1601 x_1614 x_1598 -> end
  f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 when (
      i_1130 = 0) -> (k_make_list_cons_make_list_1419 x_1131)
  f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 when (
      not (i_1130 = 0)) -> (xs2_1132 (i_1130 - 1) k_make_list_cons_make_list_1419)
  f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032 x_1262 ->
      (fold_right_1030 f_1031 (xs1_1032 - 1) (f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032) acc_1033
        (f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215))
  f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032 x_1104 k_fold_right_xs'_1248 ->
      (xs2_1032 (x_1104 + 1) k_fold_right_xs'_1248)
  f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215 x_1309 ->
      (f_1031 x_1262 x_1309 k_fold_right_1215)
  f_main_1683 m_1043 n_1042 k_main_1523 x1_1529 x2_1529 ->
      (fold_right_1030 add_1038 x1_1529 x2_1529 m_1043 (f_main_1684 m_1043 n_1042 x1_1529 k_main_1523))
  f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 when (x_1557 >= m_1043) -> (k_main_1523 ())
  f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 when (not (x_1557 >= m_1043)) -> (fail_1690 true k_main_1523)
  f_make_list_1680 n_1037 x_1137 k_make_list_1357 -> _|_
  f_make_list_1682 n_1037 k_make_list_1345 x1_1482 x2_1482 ->
      (cons_make_list_1133 n_1037 n_1037 x1_1482 x2_1482 k_make_list_1345)
  fail_1690 b k -> {fail} => (k ())
  fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (
      xs1_1032 = 0) -> (k_fold_right_1215 acc_1033)
  fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (
      not (xs1_1032 = 0)) -> (br_fold_right_1688 (1 <= xs1_1032) f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215)
  main_1041 n_1042 m_1043 k_main_1523 -> (make_list_1036 n_1042 (f_main_1683 m_1043 n_1042 k_main_1523))
  make_list_1036 n_1037 k_make_list_1345 when (n_1037 < 0) -> (k_make_list_1345 0 (f_make_list_1680 n_1037))
  make_list_1036 n_1037 k_make_list_1345 when (not (n_1037 < 0)) ->
      (make_list_1036 (n_1037 - 1) (f_make_list_1682 n_1037 k_make_list_1345))
Types:
  main_1676 : X
  fail_1690 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fold_right_1030 : ((int -> int -> (int -> X) -> X) ->
                     int -> (int -> (int -> X) -> X) -> x_15:int -> (x_17:int[x_15 <= x_17] -> X) -> X)
  make_list_1036 : (int -> (int -> (int -> (int -> X) -> X) -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1676 ... --> 
  f_1685 ... --> 
  f_1686 ... --> 
  main_1041 ... --> 
  make_list_1036 [2/2] ... --> 
  make_list_1036 [1/2] ... --> 
  f_make_list_1682 ... --> 
  cons_make_list_1133 ... --> 
  f_main_1683 ... --> 
  fold_right_1030 [2/2] ... --> 
  br_fold_right_1688 [1/2] ... --> 
  f_cons_make_list_1681 [1/2] ... --> 
  f_fold_right_1677 ... --> 
  fold_right_1030 [1/2] ... --> 
  f_fold_right_1679 ... --> 
  add_1038 ... --> 
  f_main_1684 [2/2] ... --> 
  fail_1690 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(2496)[1]
  program:
    main_1676  | true = ((Random.int 0) f_1685)
    add_1038 x_1039 y_1040 k_add_1506 | true = (k_add_1506 (x_1039 + y_1040))
    br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | b_1689 = (
    xs2_1032 0
             (f_fold_right_1677 acc_1033
                                xs1_1032
                                f_1031
                                k_fold_right_1215
                                xs2_1032))
    br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | (
    not b_1689) = bot
    cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1404 | true = (
    k_make_list_cons_make_list_1404 (xs1_1132 + 1)
                                    (f_cons_make_list_1681 n_1037
                                                           x_1131
                                                           xs1_1132
                                                           xs2_1132))
    f_1685 x_1601 | true = ((Random.int 0) (f_1686 x_1601))
    f_1686 x_1601 x_1614 | true = (main_1041 x_1601
                                             x_1614
                                             (f_1687 x_1601
                                                     x_1614))
    f_1687 x_1601 x_1614 x_1598 | true = end
    f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 | (
    i_1130 = 0) = (k_make_list_cons_make_list_1419 x_1131)
    f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 | (
    not (i_1130 = 0)) = (xs2_1132 (i_1130 - 1)
                                  k_make_list_cons_make_list_1419)
    f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032 x_1262 | true = (
    fold_right_1030
      f_1031
      (xs1_1032 - 1)
      (f_fold_right_1678 acc_1033
                         x_1262
                         xs1_1032
                         xs2_1032)
      acc_1033
      (f_fold_right_1679 acc_1033
                         x_1262
                         xs1_1032
                         f_1031
                         k_fold_right_1215))
    f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032 x_1104 k_fold_right_xs'_1248 | true = (
    xs2_1032 (x_1104 + 1)
             k_fold_right_xs'_1248)
    f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215 x_1309 | true = (
    f_1031 x_1262
           x_1309
           k_fold_right_1215)
    f_main_1683 m_1043 n_1042 k_main_1523 x1_1529 x2_1529 | true = (fold_right_1030
                                                                    add_1038
                                                                    x1_1529
                                                                    x2_1529
                                                                    m_1043
                                                                    (
                                                                    f_main_1684 m_1043
                                                                    n_1042
                                                                    x1_1529
                                                                    k_main_1523))
    f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 | (x_1557 >= m_1043) = (
    k_main_1523 ())
    f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 | (not (x_1557 >= m_1043)) = (
    fail_1690 true
              k_main_1523)
    f_make_list_1680 n_1037 x_1137 k_make_list_1357 | true = bot
    f_make_list_1682 n_1037 k_make_list_1345 x1_1482 x2_1482 | true = (
    cons_make_list_1133 n_1037
                        n_1037
                        x1_1482
                        x2_1482
                        k_make_list_1345)
    fail_1690 b k | true = (fail ())
    fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | (
    xs1_1032 = 0) = (k_fold_right_1215 acc_1033)
    fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | (
    not (xs1_1032 = 0)) = (br_fold_right_1688 (1 <= xs1_1032)
                                              f_1031
                                              xs1_1032
                                              xs2_1032
                                              acc_1033
                                              k_fold_right_1215)
    main_1041 n_1042 m_1043 k_main_1523 | true = (make_list_1036 n_1042
                                                                 (f_main_1683 m_1043
                                                                    n_1042
                                                                    k_main_1523))
    make_list_1036 n_1037 k_make_list_1345 | (n_1037 < 0) = (k_make_list_1345 0
                                                                    (f_make_list_1680 n_1037))
    make_list_1036 n_1037 k_make_list_1345 | (not (n_1037 < 0)) = (make_list_1036
                                                                    (
                                                                    n_1037 - 1)
                                                                    (
                                                                    f_make_list_1682 n_1037
                                                                    k_make_list_1345))
    main_1676:X
    add_1038:int -> int -> (int -> X) -> X
    br_fold_right_1688:bool ->
                       (int -> int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    cons_make_list_1133:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1685:int -> X
    f_1686:int -> int -> X
    f_1687:int -> int -> unit -> X
    f_cons_make_list_1681:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_fold_right_1677:int ->
                      int -> (int -> int -> (int -> X) -> X) -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_fold_right_1678:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_fold_right_1679:int -> int -> int -> (int -> int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_main_1683:int -> int -> (unit -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_main_1684:int -> int -> int -> (unit -> X) -> int -> X
    f_make_list_1680:int -> int -> (int -> X) -> X
    f_make_list_1682:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    fail_1690:bool -> (unit -> X) -> X
    fold_right_1030:(int -> int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    main_1041:int -> int -> (unit -> X) -> X
    make_list_1036:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
  inlined functions: add_1038,br_fold_right_1688,cons_make_list_1133,f_1685,f_1686,f_1687,f_cons_make_list_1681,f_fold_right_1677,f_fold_right_1678,f_fold_right_1679,f_main_1683,f_main_1684,f_make_list_1680,f_make_list_1682,main_1041
  counterexample: 0:0:0:0:1:0:0:0:0:1:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1685@32:0> = var134)
     [true.nop((<f_1686@35:0> = <f_1685@32:0>) && (<f_1686@35:1> = var135))
      [true.((<main_1041@37:0> = <f_1686@35:0>) && (<main_1041@37:1> = <f_1686@35:1>))
       [true.(<make_list_1036@39:0> = <main_1041@37:0>)
        [(not (<make_list_1036@39:0> < 0)).(<make_list_1036@42:0> = (<make_list_1036@39:0> - 1))
         [(<make_list_1036@42:0> < 0).(<<make_list_1036@42:1>@45:0> = 0)
          [true.
           ((<f_make_list_1682@47:0> = <make_list_1036@39:0>) &&
            (<f_make_list_1682@47:2> = <<make_list_1036@42:1>@45:0>))
           [true.
            ((<cons_make_list_1133@49:0> = <f_make_list_1682@47:0>) &&
             ((<cons_make_list_1133@49:1> = <f_make_list_1682@47:0>) &&
              (<cons_make_list_1133@49:2> = <f_make_list_1682@47:2>)))
            [true.(<<cons_make_list_1133@49:4>@51:0> = (<cons_make_list_1133@49:2> + 1))
             [true.(<<f_make_list_1682@47:1>@53:0> = <<cons_make_list_1133@49:4>@51:0>)
              [true.(<<make_list_1036@39:1>@55:0> = <<f_make_list_1682@47:1>@53:0>)
               [true.
                ((<f_main_1683@57:0> = <main_1041@37:1>) &&
                 ((<f_main_1683@57:1> = <main_1041@37:0>) && (<f_main_1683@57:3> = <<make_list_1036@39:1>@55:0>)))
                [true.((<fold_right_1030@59:1> = <f_main_1683@57:3>) && (<fold_right_1030@59:3> = <f_main_1683@57:0>))
                 [(not (<fold_right_1030@59:1> = 0)).
                  ((<br_fold_right_1688@62:0> = (1 <= <fold_right_1030@59:1>)) &&
                   ((<br_fold_right_1688@62:2> = <fold_right_1030@59:1>) &&
                    (<br_fold_right_1688@62:4> = <fold_right_1030@59:3>)))
                  [<br_fold_right_1688@62:0>.(<<br_fold_right_1688@62:3>@65:0> = 0)
                   [true.(<<fold_right_1030@59:2>@67:0> = <<br_fold_right_1688@62:3>@65:0>)
                    [true.(<<f_main_1683@57:4>@69:0> = <<fold_right_1030@59:2>@67:0>)
                     [true.(<<<make_list_1036@39:1>@55:1>@71:0> = <<f_main_1683@57:4>@69:0>)
                      [true.(<<<f_make_list_1682@47:1>@53:1>@73:0> = <<<make_list_1036@39:1>@55:1>@71:0>)
                       [true.(<<<cons_make_list_1133@49:4>@51:1>@75:0> = <<<f_make_list_1682@47:1>@53:1>@73:0>)
                        [true.
                         ((<f_cons_make_list_1681@77:0> = <cons_make_list_1133@49:0>) &&
                          ((<f_cons_make_list_1681@77:1> = <cons_make_list_1133@49:1>) &&
                           ((<f_cons_make_list_1681@77:2> = <cons_make_list_1133@49:2>) &&
                            (<f_cons_make_list_1681@77:4> = <<<cons_make_list_1133@49:4>@51:1>@75:0>))))
                         [(<f_cons_make_list_1681@77:4> = 0).
                          (<<f_cons_make_list_1681@77:5>@80:0> = <f_cons_make_list_1681@77:1>)
                          [true.(<<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0> = <<f_cons_make_list_1681@77:5>@80:0>)
                           [true.
                            (<<<<f_make_list_1682@47:1>@53:1>@73:1>@84:0> =
                             <<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>)
                            [true.
                             (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <<<<f_make_list_1682@47:1>@53:1>@73:1>@84:0>)
                             [true.(<<<f_main_1683@57:4>@69:1>@88:0> = <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
                              [true.(<<<fold_right_1030@59:2>@67:1>@90:0> = <<<f_main_1683@57:4>@69:1>@88:0>)
                               [true.(<<<br_fold_right_1688@62:3>@65:1>@92:0> = <<<fold_right_1030@59:2>@67:1>@90:0>)
                                [true.
                                 ((<f_fold_right_1677@94:0> = <br_fold_right_1688@62:4>) &&
                                  ((<f_fold_right_1677@94:1> = <br_fold_right_1688@62:2>) &&
                                   (<f_fold_right_1677@94:5> = <<<br_fold_right_1688@62:3>@65:1>@92:0>)))
                                 [true.
                                  ((<fold_right_1030@96:1> = (<f_fold_right_1677@94:1> - 1)) &&
                                   (<fold_right_1030@96:3> = <f_fold_right_1677@94:0>))
                                  [(<fold_right_1030@96:1> = 0).
                                   (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>)
                                   [true.
                                    ((<f_fold_right_1679@101:0> = <f_fold_right_1677@94:0>) &&
                                     ((<f_fold_right_1679@101:1> = <f_fold_right_1677@94:5>) &&
                                      ((<f_fold_right_1679@101:2> = <f_fold_right_1677@94:1>) &&
                                       (<f_fold_right_1679@101:5> = <<fold_right_1030@96:4>@99:0>))))
                                    [true.
                                     ((<<f_fold_right_1679@101:3>@103:0> = <f_fold_right_1679@101:1>) &&
                                      (<<f_fold_right_1679@101:3>@103:1> = <f_fold_right_1679@101:5>))
                                     [true.
                                      ((<<f_fold_right_1677@94:2>@105:0> = <<f_fold_right_1679@101:3>@103:0>) &&
                                       (<<f_fold_right_1677@94:2>@105:1> = <<f_fold_right_1679@101:3>@103:1>))
                                      [true.
                                       ((<<br_fold_right_1688@62:1>@107:0> = <<f_fold_right_1677@94:2>@105:0>) &&
                                        (<<br_fold_right_1688@62:1>@107:1> = <<f_fold_right_1677@94:2>@105:1>))
                                       [true.
                                        ((<<fold_right_1030@59:0>@109:0> = <<br_fold_right_1688@62:1>@107:0>) &&
                                         (<<fold_right_1030@59:0>@109:1> = <<br_fold_right_1688@62:1>@107:1>))
                                        [true.
                                         ((<add_1038@111:0> = <<fold_right_1030@59:0>@109:0>) &&
                                          (<add_1038@111:1> = <<fold_right_1030@59:0>@109:1>))
                                         [true.(<<add_1038@111:2>@113:0> = (<add_1038@111:0> + <add_1038@111:1>))
                                          [true.(<<<fold_right_1030@59:0>@109:2>@115:0> = <<add_1038@111:2>@113:0>)
                                           [true.
                                            (<<<br_fold_right_1688@62:1>@107:2>@117:0> =
                                             <<<fold_right_1030@59:0>@109:2>@115:0>)
                                            [true.
                                             (<<<f_fold_right_1677@94:2>@105:2>@119:0> =
                                              <<<br_fold_right_1688@62:1>@107:2>@117:0>)
                                             [true.
                                              (<<<f_fold_right_1679@101:3>@103:2>@121:0> =
                                               <<<f_fold_right_1677@94:2>@105:2>@119:0>)
                                              [true.
                                               (<<f_fold_right_1679@101:4>@123:0> =
                                                <<<f_fold_right_1679@101:3>@103:2>@121:0>)
                                               [true.
                                                (<<f_fold_right_1677@94:3>@125:0> = <<f_fold_right_1679@101:4>@123:0>)
                                                [true.
                                                 (<<br_fold_right_1688@62:5>@127:0> = <<f_fold_right_1677@94:3>@125:0>)
                                                 [true.
                                                  (<<fold_right_1030@59:4>@129:0> = <<br_fold_right_1688@62:5>@127:0>)
                                                  [true.
                                                   ((<f_main_1684@131:0> = <f_main_1683@57:0>) &&
                                                    ((<f_main_1684@131:1> = <f_main_1683@57:1>) &&
                                                     ((<f_main_1684@131:2> = <f_main_1683@57:3>) &&
                                                      (<f_main_1684@131:4> = <<fold_right_1030@59:4>@129:0>))))
                                                   [(not (<f_main_1684@131:4> >= <f_main_1684@131:0>)).
                                                    (<fail_1690@134:0> = true)[
                                                    true.error
  begin RefTypeInfer.infer_etrs(2497)[2]
    horn clauses:
      P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
      
      P[<f_main_1684@131:4>](<f_main_1684@131:0>:int,<f_main_1684@131:1>:int,<f_main_1684@131:2>:int,<f_main_1684@131:4>:int),
      ((<f_main_1684@131:4> < <f_main_1684@131:0>) && <fail_1690@134:0>)
      |- P[<fail_1690@134:0>](<fail_1690@134:0>:bool)
      
      P[<f_main_1683@57:3>](<f_main_1684@131:0>:int,<f_main_1684@131:1>:int,<f_main_1684@131:2>:int),
      P[<<fold_right_1030@59:4>@129:0>](<f_main_1684@131:2>:int,<f_main_1684@131:0>:int,<f_main_1684@131:4>:int)|- P[<f_main_1684@131:4>](
      <f_main_1684@131:0>:int,<f_main_1684@131:1>:int,<f_main_1684@131:2>:int,
      <f_main_1684@131:4>:int)
      
      P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
      P[<<br_fold_right_1688@62:5>@127:0>]((1 <= <fold_right_1030@59:1>):bool,<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int,<<fold_right_1030@59:4>@129:0>:int),
      (<fold_right_1030@59:1> <> 0)
      |- P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,
                                           <fold_right_1030@59:3>:int,
                                           <<fold_right_1030@59:4>@129:0>:int)
      
      P[<br_fold_right_1688@62:4>](<br_fold_right_1688@62:0>:bool,<br_fold_right_1688@62:2>:int,<br_fold_right_1688@62:4>:int),
      P[<<f_fold_right_1677@94:3>@125:0>](<br_fold_right_1688@62:4>:int,<br_fold_right_1688@62:2>:int,<<br_fold_right_1688@62:5>@127:0>:int),
      <br_fold_right_1688@62:0>
      |- P[<<br_fold_right_1688@62:5>@127:0>](<br_fold_right_1688@62:0>:bool,
                                              <br_fold_right_1688@62:2>:int,
                                              <br_fold_right_1688@62:4>:int,
                                              <<br_fold_right_1688@62:5>@127:0>:int)
      
      P[<f_fold_right_1677@94:5>](<f_fold_right_1677@94:0>:int,<f_fold_right_1677@94:1>:int,<f_fold_right_1679@101:1>:int),
      P[<<f_fold_right_1679@101:4>@123:0>](<f_fold_right_1677@94:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1677@94:1>:int,<<f_fold_right_1677@94:3>@125:0>:int)|- P[<<f_fold_right_1677@94:3>@125:0>](
      <f_fold_right_1677@94:0>:int,<f_fold_right_1677@94:1>:int,<<f_fold_right_1677@94:3>@125:0>:int)
      
      P[<f_fold_right_1679@101:5>](<f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1679@101:2>:int,<<f_fold_right_1679@101:3>@103:1>:int),
      P[<<<f_fold_right_1679@101:3>@103:2>@121:0>](<f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1679@101:2>:int,<f_fold_right_1679@101:1>:int,<<f_fold_right_1679@101:3>@103:1>:int,<<f_fold_right_1679@101:4>@123:0>:int)|- P[<<f_fold_right_1679@101:4>@123:0>](
      <f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1679@101:2>:int,
      <<f_fold_right_1679@101:4>@123:0>:int)
      
      P[<f_fold_right_1677@94:5>](<f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:2>:int,<f_fold_right_1679@101:1>:int),
      P[<<<f_fold_right_1677@94:2>@105:2>@119:0>](<f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:2>:int,<<f_fold_right_1679@101:3>@103:0>:int,<<f_fold_right_1679@101:3>@103:1>:int,<<<f_fold_right_1679@101:3>@103:2>@121:0>:int)|- P[<<<f_fold_right_1679@101:3>@103:2>@121:0>](
      <f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1679@101:2>:int,
      <<f_fold_right_1679@101:3>@103:0>:int,<<f_fold_right_1679@101:3>@103:1>:int,
      <<<f_fold_right_1679@101:3>@103:2>@121:0>:int)
      
      P[<br_fold_right_1688@62:4>](true:bool,<f_fold_right_1677@94:1>:int,<f_fold_right_1677@94:0>:int),
      P[<<<br_fold_right_1688@62:1>@107:2>@117:0>](true:bool,<<f_fold_right_1677@94:2>@105:0>:int,<<f_fold_right_1677@94:2>@105:1>:int,<<<f_fold_right_1677@94:2>@105:2>@119:0>:int)|- P[<<<f_fold_right_1677@94:2>@105:2>@119:0>](
      <f_fold_right_1677@94:0>:int,<f_fold_right_1677@94:1>:int,<<f_fold_right_1677@94:2>@105:0>:int,
      <<f_fold_right_1677@94:2>@105:1>:int,<<<f_fold_right_1677@94:2>@105:2>@119:0>:int)
      
      P[<fold_right_1030@59:3>](<br_fold_right_1688@62:2>:int,<br_fold_right_1688@62:4>:int),
      P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<br_fold_right_1688@62:1>@107:0>:int,<<br_fold_right_1688@62:1>@107:1>:int,<<<br_fold_right_1688@62:1>@107:2>@117:0>:int),
      ((<br_fold_right_1688@62:2> <> 0) && (<br_fold_right_1688@62:0> = (1 <= <br_fold_right_1688@62:2>)))
      |- P[<<<br_fold_right_1688@62:1>@107:2>@117:0>](<br_fold_right_1688@62:0>:bool,
                                                      <<br_fold_right_1688@62:1>@107:0>:int,
                                                      <<br_fold_right_1688@62:1>@107:1>:int,
                                                      <<<br_fold_right_1688@62:1>@107:2>@117:0>:int)
      
      P[<f_main_1683@57:3>](<fold_right_1030@59:3>:int,<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
      P[<<add_1038@111:2>@113:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int)|- P[<<<fold_right_1030@59:0>@109:2>@115:0>](
      <<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,
      <<<fold_right_1030@59:0>@109:2>@115:0>:int)
      
      P[<add_1038@111:1>](<add_1038@111:0>:int,<add_1038@111:1>:int),
      (<<add_1038@111:2>@113:0> = (<add_1038@111:0> + <add_1038@111:1>))
      |- P[<<add_1038@111:2>@113:0>](<add_1038@111:0>:int,<add_1038@111:1>:int,
                                     <<add_1038@111:2>@113:0>:int)
      
      P[<f_main_1683@57:3>](<fold_right_1030@59:3>:int,<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
      P[<<fold_right_1030@59:0>@109:1>](<add_1038@111:0>:int,<add_1038@111:1>:int)|- P[<add_1038@111:1>](
      <add_1038@111:0>:int,<add_1038@111:1>:int)
      
      P[<fold_right_1030@59:3>](<br_fold_right_1688@62:2>:int,<br_fold_right_1688@62:4>:int),
      P[<<br_fold_right_1688@62:1>@107:1>]((1 <= <br_fold_right_1688@62:2>):bool,<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
      (<br_fold_right_1688@62:2> <> 0)
      |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                           <<fold_right_1030@59:0>@109:1>:int)
      
      P[<br_fold_right_1688@62:4>](<br_fold_right_1688@62:0>:bool,<f_fold_right_1677@94:1>:int,<f_fold_right_1677@94:0>:int),
      P[<<f_fold_right_1677@94:2>@105:1>](<f_fold_right_1677@94:0>:int,<f_fold_right_1677@94:1>:int,<<br_fold_right_1688@62:1>@107:0>:int,<<br_fold_right_1688@62:1>@107:1>:int),
      <br_fold_right_1688@62:0>
      |- P[<<br_fold_right_1688@62:1>@107:1>](<br_fold_right_1688@62:0>:bool,
                                              <<br_fold_right_1688@62:1>@107:0>:int,
                                              <<br_fold_right_1688@62:1>@107:1>:int)
      
      P[<f_fold_right_1677@94:5>](<f_fold_right_1677@94:0>:int,<f_fold_right_1677@94:1>:int,<f_fold_right_1679@101:1>:int),
      P[<<f_fold_right_1679@101:3>@103:1>](<f_fold_right_1677@94:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1677@94:1>:int,<<f_fold_right_1677@94:2>@105:0>:int,<<f_fold_right_1677@94:2>@105:1>:int)|- P[<<f_fold_right_1677@94:2>@105:1>](
      <f_fold_right_1677@94:0>:int,<f_fold_right_1677@94:1>:int,<<f_fold_right_1677@94:2>@105:0>:int,
      <<f_fold_right_1677@94:2>@105:1>:int)
      
      P[<f_fold_right_1679@101:5>](<f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1679@101:2>:int,<<f_fold_right_1679@101:3>@103:1>:int),
      (<<f_fold_right_1679@101:3>@103:0> = <f_fold_right_1679@101:1>)
      |- P[<<f_fold_right_1679@101:3>@103:1>](<f_fold_right_1679@101:0>:int,
                                              <f_fold_right_1679@101:1>:int,
                                              <f_fold_right_1679@101:2>:int,
                                              <<f_fold_right_1679@101:3>@103:0>:int,
                                              <<f_fold_right_1679@101:3>@103:1>:int)
      
      P[<f_fold_right_1677@94:5>](<f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:2>:int,<f_fold_right_1679@101:1>:int),
      P[<<fold_right_1030@96:4>@99:0>]((-1 + <f_fold_right_1679@101:2>):int,<f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:5>:int)|- P[<f_fold_right_1679@101:5>](
      <f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1679@101:2>:int,
      <f_fold_right_1679@101:5>:int)
      
      P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int),
      ((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>))
      |- P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,
                                          <fold_right_1030@96:3>:int,
                                          <<fold_right_1030@96:4>@99:0>:int)
      
      P[<f_fold_right_1677@94:5>](<fold_right_1030@96:3>:int,(1 + <fold_right_1030@96:1>):int,<f_fold_right_1677@94:5>:int)|- P[<fold_right_1030@96:3>](
      <fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int)
      
      P[<br_fold_right_1688@62:4>](true:bool,<f_fold_right_1677@94:1>:int,<f_fold_right_1677@94:0>:int),
      P[<<<br_fold_right_1688@62:3>@65:1>@92:0>](true:bool,<f_fold_right_1677@94:1>:int,0:int,<f_fold_right_1677@94:5>:int)|- P[<f_fold_right_1677@94:5>](
      <f_fold_right_1677@94:0>:int,<f_fold_right_1677@94:1>:int,<f_fold_right_1677@94:5>:int)
      
      P[<fold_right_1030@59:3>](<br_fold_right_1688@62:2>:int,<br_fold_right_1688@62:4>:int),
      P[<<<fold_right_1030@59:2>@67:1>@90:0>](<br_fold_right_1688@62:2>:int,<<br_fold_right_1688@62:3>@65:0>:int,<<<br_fold_right_1688@62:3>@65:1>@92:0>:int),
      ((<br_fold_right_1688@62:2> <> 0) && (<br_fold_right_1688@62:0> = (1 <= <br_fold_right_1688@62:2>)))
      |- P[<<<br_fold_right_1688@62:3>@65:1>@92:0>](<br_fold_right_1688@62:0>:bool,
                                                    <br_fold_right_1688@62:2>:int,
                                                    <<br_fold_right_1688@62:3>@65:0>:int,
                                                    <<<br_fold_right_1688@62:3>@65:1>@92:0>:int)
      
      P[<f_main_1683@57:3>](<fold_right_1030@59:3>:int,<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
      P[<<<f_main_1683@57:4>@69:1>@88:0>](<fold_right_1030@59:3>:int,<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
      <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)
      
      P[<main_1041@37:1>](<f_main_1683@57:1>:int,<f_main_1683@57:0>:int),
      P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<f_main_1683@57:3>:int),
      P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<f_main_1683@57:3>:int,<<f_main_1683@57:4>@69:0>:int,<<<f_main_1683@57:4>@69:1>@88:0>:int),
      P[<f_main_1683@57:3>](<f_main_1683@57:0>:int,<f_main_1683@57:1>:int,<f_main_1683@57:3>:int)|- P[<<<f_main_1683@57:4>@69:1>@88:0>](
      <f_main_1683@57:0>:int,<f_main_1683@57:1>:int,<f_main_1683@57:3>:int,
      <<f_main_1683@57:4>@69:0>:int,<<<f_main_1683@57:4>@69:1>@88:0>:int)
      
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
      P[<<f_make_list_1682@47:1>@53:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      P[<<<<f_make_list_1682@47:1>@53:1>@73:1>@84:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int),
      P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      (<make_list_1036@39:0> >= 0)
      |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                       <<make_list_1036@39:1>@55:0>:int,
                                                       <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                       <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
      
      P[<f_make_list_1682@47:2>](<f_make_list_1682@47:0>:int,<cons_make_list_1133@49:2>:int),
      P[<<cons_make_list_1133@49:4>@51:0>](<f_make_list_1682@47:0>:int,<f_make_list_1682@47:0>:int,<cons_make_list_1133@49:2>:int,<<f_make_list_1682@47:1>@53:0>:int),
      P[<<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>](<f_make_list_1682@47:0>:int,<f_make_list_1682@47:0>:int,<cons_make_list_1133@49:2>:int,<<f_make_list_1682@47:1>@53:0>:int,<<<f_make_list_1682@47:1>@53:1>@73:0>:int,<<<<f_make_list_1682@47:1>@53:1>@73:1>@84:0>:int),
      P[<<f_make_list_1682@47:1>@53:0>](<f_make_list_1682@47:0>:int,<<f_make_list_1682@47:1>@53:0>:int)|- P[<<<<f_make_list_1682@47:1>@53:1>@73:1>@84:0>](
      <f_make_list_1682@47:0>:int,<<f_make_list_1682@47:1>@53:0>:int,
      <<<f_make_list_1682@47:1>@53:1>@73:0>:int,<<<<f_make_list_1682@47:1>@53:1>@73:1>@84:0>:int)
      
      P[<cons_make_list_1133@49:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int),
      P[<<f_cons_make_list_1681@77:5>@80:0>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int,<<<cons_make_list_1133@49:4>@51:1>@75:0>:int,<<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>:int),
      P[<<cons_make_list_1133@49:4>@51:0>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int,<<cons_make_list_1133@49:4>@51:0>:int),
      (<<cons_make_list_1133@49:4>@51:0> = (1 + <cons_make_list_1133@49:2>))
      |- P[<<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>](<cons_make_list_1133@49:0>:int,
                                                            <cons_make_list_1133@49:1>:int,
                                                            <cons_make_list_1133@49:2>:int,
                                                            <<cons_make_list_1133@49:4>@51:0>:int,
                                                            <<<cons_make_list_1133@49:4>@51:1>@75:0>:int,
                                                            <<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>:int)
      
      P[<f_cons_make_list_1681@77:4>](<f_cons_make_list_1681@77:0>:int,<f_cons_make_list_1681@77:1>:int,<f_cons_make_list_1681@77:2>:int,<f_cons_make_list_1681@77:4>:int),
      ((<f_cons_make_list_1681@77:4> = 0) && (<<f_cons_make_list_1681@77:5>@80:0> = <f_cons_make_list_1681@77:1>))
      |- P[<<f_cons_make_list_1681@77:5>@80:0>](<f_cons_make_list_1681@77:0>:int,
                                                <f_cons_make_list_1681@77:1>:int,
                                                <f_cons_make_list_1681@77:2>:int,
                                                <f_cons_make_list_1681@77:4>:int,
                                                <<f_cons_make_list_1681@77:5>@80:0>:int)
      
      P[<cons_make_list_1133@49:2>](<f_cons_make_list_1681@77:0>:int,<f_cons_make_list_1681@77:1>:int,<f_cons_make_list_1681@77:2>:int),
      P[<<<cons_make_list_1133@49:4>@51:1>@75:0>](<f_cons_make_list_1681@77:0>:int,<f_cons_make_list_1681@77:1>:int,<f_cons_make_list_1681@77:2>:int,(
                                                  1 + <f_cons_make_list_1681@77:2>):int,<f_cons_make_list_1681@77:4>:int)|- P[<f_cons_make_list_1681@77:4>](
      <f_cons_make_list_1681@77:0>:int,<f_cons_make_list_1681@77:1>:int,
      <f_cons_make_list_1681@77:2>:int,<f_cons_make_list_1681@77:4>:int)
      
      P[<f_make_list_1682@47:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:2>:int),
      P[<<<f_make_list_1682@47:1>@53:1>@73:0>](<cons_make_list_1133@49:0>:int,<<cons_make_list_1133@49:4>@51:0>:int,<<<cons_make_list_1133@49:4>@51:1>@75:0>:int),
      P[<cons_make_list_1133@49:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int),
      (<cons_make_list_1133@49:0> = <cons_make_list_1133@49:1>)
      |- P[<<<cons_make_list_1133@49:4>@51:1>@75:0>](<cons_make_list_1133@49:0>:int,
                                                     <cons_make_list_1133@49:1>:int,
                                                     <cons_make_list_1133@49:2>:int,
                                                     <<cons_make_list_1133@49:4>@51:0>:int,
                                                     <<<cons_make_list_1133@49:4>@51:1>@75:0>:int)
      
      P[<make_list_1036@39:0>](<f_make_list_1682@47:0>:int),
      P[<<<make_list_1036@39:1>@55:1>@71:0>](<f_make_list_1682@47:0>:int,<<f_make_list_1682@47:1>@53:0>:int,<<<f_make_list_1682@47:1>@53:1>@73:0>:int),
      (<f_make_list_1682@47:0> >= 0)
      |- P[<<<f_make_list_1682@47:1>@53:1>@73:0>](<f_make_list_1682@47:0>:int,
                                                  <<f_make_list_1682@47:1>@53:0>:int,
                                                  <<<f_make_list_1682@47:1>@53:1>@73:0>:int)
      
      P[<main_1041@37:1>](<make_list_1036@39:0>:int,<f_main_1683@57:0>:int),
      P[<<f_main_1683@57:4>@69:0>](<f_main_1683@57:0>:int,<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
      <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
      
      P[<f_main_1683@57:3>](<f_main_1683@57:0>:int,<f_main_1683@57:1>:int,<f_main_1683@57:3>:int),
      P[<<fold_right_1030@59:2>@67:0>](<f_main_1683@57:3>:int,<<f_main_1683@57:4>@69:0>:int)|- P[<<f_main_1683@57:4>@69:0>](
      <f_main_1683@57:0>:int,<f_main_1683@57:1>:int,<f_main_1683@57:3>:int,
      <<f_main_1683@57:4>@69:0>:int)
      
      P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
      P[<<br_fold_right_1688@62:3>@65:0>]((1 <= <fold_right_1030@59:1>):bool,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int),
      (<fold_right_1030@59:1> <> 0)
      |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                          <<fold_right_1030@59:2>@67:0>:int)
      
      P[<br_fold_right_1688@62:4>](<br_fold_right_1688@62:0>:bool,<br_fold_right_1688@62:2>:int,<br_fold_right_1688@62:4>:int),
      ((<<br_fold_right_1688@62:3>@65:0> = 0) && <br_fold_right_1688@62:0>)
      |- P[<<br_fold_right_1688@62:3>@65:0>](<br_fold_right_1688@62:0>:bool,
                                             <br_fold_right_1688@62:2>:int,
                                             <<br_fold_right_1688@62:3>@65:0>:int)
      
      P[<fold_right_1030@59:3>](<br_fold_right_1688@62:2>:int,<br_fold_right_1688@62:4>:int),
      ((<br_fold_right_1688@62:2> <> 0) && (<br_fold_right_1688@62:0> = (1 <= <br_fold_right_1688@62:2>)))
      |- P[<br_fold_right_1688@62:4>](<br_fold_right_1688@62:0>:bool,
                                      <br_fold_right_1688@62:2>:int,<br_fold_right_1688@62:4>:int)
      
      P[<f_main_1683@57:3>](<fold_right_1030@59:3>:int,<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
      <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
      
      P[<main_1041@37:1>](<f_main_1683@57:1>:int,<f_main_1683@57:0>:int),
      P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<f_main_1683@57:3>:int)|- P[<f_main_1683@57:3>](
      <f_main_1683@57:0>:int,<f_main_1683@57:1>:int,<f_main_1683@57:3>:int)
      
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
      P[<<f_make_list_1682@47:1>@53:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      (<make_list_1036@39:0> >= 0)
      |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int)
      
      P[<f_make_list_1682@47:2>](<f_make_list_1682@47:0>:int,<cons_make_list_1133@49:2>:int),
      P[<<cons_make_list_1133@49:4>@51:0>](<f_make_list_1682@47:0>:int,<f_make_list_1682@47:0>:int,<cons_make_list_1133@49:2>:int,<<f_make_list_1682@47:1>@53:0>:int)|- P[<<f_make_list_1682@47:1>@53:0>](
      <f_make_list_1682@47:0>:int,<<f_make_list_1682@47:1>@53:0>:int)
      
      P[<cons_make_list_1133@49:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int),
      (<<cons_make_list_1133@49:4>@51:0> = (1 + <cons_make_list_1133@49:2>))
      |- P[<<cons_make_list_1133@49:4>@51:0>](<cons_make_list_1133@49:0>:int,
                                              <cons_make_list_1133@49:1>:int,
                                              <cons_make_list_1133@49:2>:int,
                                              <<cons_make_list_1133@49:4>@51:0>:int)
      
      P[<f_make_list_1682@47:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:2>:int),
      (<cons_make_list_1133@49:0> = <cons_make_list_1133@49:1>)
      |- P[<cons_make_list_1133@49:2>](<cons_make_list_1133@49:0>:int,
                                       <cons_make_list_1133@49:1>:int,
                                       <cons_make_list_1133@49:2>:int)
      
      P[<make_list_1036@39:0>](<f_make_list_1682@47:0>:int),
      P[<<make_list_1036@42:1>@45:0>]((-1 + <f_make_list_1682@47:0>):int,<f_make_list_1682@47:2>:int),
      (<f_make_list_1682@47:0> >= 0)
      |- P[<f_make_list_1682@47:2>](<f_make_list_1682@47:0>:int,<f_make_list_1682@47:2>:int)
      
      P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
      ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
      |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int)
      
      P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
      |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
      
      P[<main_1041@37:1>](<make_list_1036@39:0>:int,<main_1041@37:1>:int)|- P[<make_list_1036@39:0>](
      <make_list_1036@39:0>:int)
      
      P[<f_1686@35:1>](<main_1041@37:0>:int,<main_1041@37:1>:int)|- P[<main_1041@37:1>](
      <main_1041@37:0>:int,<main_1041@37:1>:int)
      
      P[<f_1685@32:0>](<f_1686@35:0>:int)|- P[<f_1686@35:1>](<f_1686@35:0>:int,
                                                             <f_1686@35:1>:int)
      
      |- P[<f_1685@32:0>](<f_1685@32:0>:int)
    call trees:
      <main_1676@29>
        <f_1685@32>
          <f_1686@35>
            <main_1041@37>
              <make_list_1036@39>
                <make_list_1036@42>
                </<make_list_1036@42:1>@45>
                <f_make_list_1682@47>
                  <cons_make_list_1133@49>
                  </<cons_make_list_1133@49:4>@51>
                </<f_make_list_1682@47:1>@53>
              </<make_list_1036@39:1>@55>
              <f_main_1683@57>
                <fold_right_1030@59>
                  <br_fold_right_1688@62>
                  </<br_fold_right_1688@62:3>@65>
                </<fold_right_1030@59:2>@67>
              </<f_main_1683@57:4>@69>
              <<<make_list_1036@39:1>@55:1>@71>
                <<<f_make_list_1682@47:1>@53:1>@73>
                  <<<cons_make_list_1133@49:4>@51:1>@75>
                    <f_cons_make_list_1681@77>
                    </<f_cons_make_list_1681@77:5>@80>
                  </<<<cons_make_list_1133@49:4>@51:1>@75:1>@82>
                </<<<f_make_list_1682@47:1>@53:1>@73:1>@84>
              </<<<make_list_1036@39:1>@55:1>@71:1>@86>
              <<<f_main_1683@57:4>@69:1>@88>
                <<<fold_right_1030@59:2>@67:1>@90>
                  <<<br_fold_right_1688@62:3>@65:1>@92>
                    <f_fold_right_1677@94>
                      <fold_right_1030@96>
                      </<fold_right_1030@96:4>@99>
                      <f_fold_right_1679@101>
                      </<f_fold_right_1679@101:3>@103>
                    </<f_fold_right_1677@94:2>@105>
                  </<br_fold_right_1688@62:1>@107>
                </<fold_right_1030@59:0>@109>
                <add_1038@111>
                </<add_1038@111:2>@113>
                <<<fold_right_1030@59:0>@109:2>@115>
                  <<<br_fold_right_1688@62:1>@107:2>@117>
                    <<<f_fold_right_1677@94:2>@105:2>@119>
                      <<<f_fold_right_1679@101:3>@103:2>@121>
                      </<f_fold_right_1679@101:4>@123>
                    </<f_fold_right_1677@94:3>@125>
                  </<br_fold_right_1688@62:5>@127>
                </<fold_right_1030@59:4>@129>
                <f_main_1684@131>
                  <fail_1690@134>
    inlined horn clauses:
      P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
      
      P[<<make_list_1036@39:1>@55:0>](<f_main_1684@131:1>:int,<f_main_1684@131:2>:int),
      P[<<fold_right_1030@59:4>@129:0>](<f_main_1684@131:2>:int,<f_main_1684@131:0>:int,<f_main_1684@131:4>:int),
      ((<f_main_1684@131:4> < <f_main_1684@131:0>) && <fail_1690@134:0>)
      |- P[<fail_1690@134:0>](<fail_1690@134:0>:bool)
      
      P[<<fold_right_1030@96:4>@99:0>]((-1 + <fold_right_1030@59:1>):int,<fold_right_1030@59:3>:int,var145:int),
      P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var144:int),
      P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
      P[<<<fold_right_1030@59:0>@109:2>@115:0>](var144:int,var145:int,<<fold_right_1030@59:4>@129:0>:int),
      (<fold_right_1030@59:1> >= 1)
      |- P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,
                                           <fold_right_1030@59:3>:int,
                                           <<fold_right_1030@59:4>@129:0>:int)
      
      P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
      P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
      (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
      |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                   <<fold_right_1030@59:0>@109:1>:int,
                                                   <<<fold_right_1030@59:0>@109:2>@115:0>:int)
      
      P[<fold_right_1030@59:3>](var149:int,var148:int),
      P[<<<fold_right_1030@59:2>@67:1>@90:0>](var149:int,0:int,<<fold_right_1030@59:0>@109:0>:int),
      P[<<fold_right_1030@96:4>@99:0>]((-1 + var149):int,var148:int,<<fold_right_1030@59:0>@109:1>:int), (
      1 <= var149)
      |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                           <<fold_right_1030@59:0>@109:1>:int)
      
      P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int),
      ((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>))
      |- P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,
                                          <fold_right_1030@96:3>:int,
                                          <<fold_right_1030@96:4>@99:0>:int)
      
      P[<fold_right_1030@59:3>]((1 + <fold_right_1030@96:1>):int,<fold_right_1030@96:3>:int),
      P[<<<fold_right_1030@59:2>@67:1>@90:0>]((1 + <fold_right_1030@96:1>):int,0:int,<f_fold_right_1677@94:5>:int),
      (<fold_right_1030@96:1> >= 0) |- P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,
                                                                 <fold_right_1030@96:3>:int)
      
      P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
      P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
      <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)
      
      P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
      P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                      -1 + <<make_list_1036@39:1>@55:0>):int),
      P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
       ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
      |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                       <<make_list_1036@39:1>@55:0>:int,
                                                       <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                       <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
      
      P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
      <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
      
      P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
      ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
      |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                          <<fold_right_1030@59:2>@67:0>:int)
      
      P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
      <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
      
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
      P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                      -1 + <<make_list_1036@39:1>@55:0>):int), (
      <make_list_1036@39:0> >= 0)
      |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int)
      
      P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
      ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
      |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int)
      
      P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
      |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
      
      |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
    begin ParamSubstInfer.infer(9803)[3]
      
    end ParamSubstInfer.infer(9803)[3] (0.068990 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(9805)[3]
      
    end RefTypeInfer.elim_coeffs(9805)[3] (0.002000 sec.)
    begin YhornInterface.solve(10424)[3]
      begin HcSolver.solve_ub(10425)[4]
        encoded:
          P[<fail_1690@134:0>](<fail_1690@134:0>:int)|- bot
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1684@131:1>:int,<f_main_1684@131:2>:int),
          P[<<fold_right_1030@59:4>@129:0>](<f_main_1684@131:2>:int,<f_main_1684@131:0>:int,<f_main_1684@131:4>:int),
          ((<f_main_1684@131:4> < <f_main_1684@131:0>) && (<fail_1690@134:0> = 1))
          |- P[<fail_1690@134:0>](<fail_1690@134:0>:int)
          
          P[<<fold_right_1030@96:4>@99:0>]((-1 + <fold_right_1030@59:1>):int,<fold_right_1030@59:3>:int,var145:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var144:int),
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
          P[<<<fold_right_1030@59:0>@109:2>@115:0>](var144:int,var145:int,<<fold_right_1030@59:4>@129:0>:int),
          (<fold_right_1030@59:1> >= 1)
          |- P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,
                                               <fold_right_1030@59:3>:int,
                                               <<fold_right_1030@59:4>@129:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
          P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
          (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
          |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                       <<fold_right_1030@59:0>@109:1>:int,
                                                       <<<fold_right_1030@59:0>@109:2>@115:0>:int)
          
          P[<fold_right_1030@59:3>](var149:int,var148:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](var149:int,0:int,<<fold_right_1030@59:0>@109:0>:int),
          P[<<fold_right_1030@96:4>@99:0>]((-1 + var149):int,var148:int,<<fold_right_1030@59:0>@109:1>:int),
          (1 <= var149)
          |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                               <<fold_right_1030@59:0>@109:1>:int)
          
          P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int),
          ((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>))
          |- P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,
                                              <fold_right_1030@96:3>:int,
                                              <<fold_right_1030@96:4>@99:0>:int)
          
          P[<fold_right_1030@59:3>]((1 + <fold_right_1030@96:1>):int,<fold_right_1030@96:3>:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>]((1 + <fold_right_1030@96:1>):int,0:int,<f_fold_right_1677@94:5>:int),
          (<fold_right_1030@96:1> >= 0)
          |- P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int)
          
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
          <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
          <<<fold_right_1030@59:2>@67:1>@90:0>:int)
          
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int),
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
           ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
          |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                           <<make_list_1036@39:1>@55:0>:int,
                                                           <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                           <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
          <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,
          <<<make_list_1036@39:1>@55:1>@71:0>:int)
          
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
          ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
          |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                              <<fold_right_1030@59:2>@67:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
          <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
          
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int), (
          <make_list_1036@39:0> >= 0)
          |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                             <<make_list_1036@39:1>@55:0>:int)
          
          P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
          ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
          |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                             <<make_list_1036@42:1>@45:0>:int)
          
          P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), (
          (1 + <make_list_1036@42:0>) >= 0) |- P[<make_list_1036@42:0>](
          <make_list_1036@42:0>:int)
          
          |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
        input to Yhorn:
          P[<fail_1690@134:0>](<fail_1690@134:0>:int)|- bot
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1684@131:1>:int,<f_main_1684@131:2>:int),
          P[<<fold_right_1030@59:4>@129:0>](<f_main_1684@131:2>:int,<f_main_1684@131:0>:int,<f_main_1684@131:4>:int),
          ((<f_main_1684@131:4> < <f_main_1684@131:0>) && (<fail_1690@134:0> = 1))
          |- P[<fail_1690@134:0>](<fail_1690@134:0>:int)
          
          P[<<fold_right_1030@96:4>@99:0>](var151:int,<fold_right_1030@59:3>:int,var145:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,var152:int,var144:int),
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
          P[<<<fold_right_1030@59:0>@109:2>@115:0>](var144:int,var145:int,<<fold_right_1030@59:4>@129:0>:int),
          (((1 + var151) = <fold_right_1030@59:1>) && ((<fold_right_1030@59:1> >= 1) && (var152 = 0)))
          |- P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,
                                               <fold_right_1030@59:3>:int,
                                               <<fold_right_1030@59:4>@129:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
          P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
          (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
          |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                       <<fold_right_1030@59:0>@109:1>:int,
                                                       <<<fold_right_1030@59:0>@109:2>@115:0>:int)
          
          P[<fold_right_1030@59:3>](var149:int,var148:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](var149:int,var153:int,<<fold_right_1030@59:0>@109:0>:int),
          P[<<fold_right_1030@96:4>@99:0>](var154:int,var148:int,<<fold_right_1030@59:0>@109:1>:int),
          (((1 + var154) = var149) && ((1 <= var149) && (var153 = 0)))
          |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                               <<fold_right_1030@59:0>@109:1>:int)
          
          P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int),
          ((<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>) && (<fold_right_1030@96:1> = 0))
          |- P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,
                                              <fold_right_1030@96:3>:int,
                                              <<fold_right_1030@96:4>@99:0>:int)
          
          P[<fold_right_1030@59:3>](var155:int,<fold_right_1030@96:3>:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](var156:int,var157:int,<f_fold_right_1677@94:5>:int),
          ((var156 = (1 + <fold_right_1030@96:1>)) &&
           ((var155 = (1 + <fold_right_1030@96:1>)) && ((<fold_right_1030@96:1> >= 0) && (var157 = 0))))
          |- P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int)
          
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
          <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
          <<<fold_right_1030@59:2>@67:1>@90:0>:int)
          
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>](var158:int,var159:int),
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          ((<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>) &&
           (((1 + var159) = <<make_list_1036@39:1>@55:0>) &&
            (((1 + var158) = <make_list_1036@39:0>) &&
             ((<make_list_1036@39:0> >= 0) && (<<<make_list_1036@39:1>@55:1>@71:0> = 0)))))
          |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                           <<make_list_1036@39:1>@55:0>:int,
                                                           <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                           <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
          <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,
          <<<make_list_1036@39:1>@55:1>@71:0>:int)
          
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
          ((<fold_right_1030@59:1> >= 1) && (<<fold_right_1030@59:2>@67:0> = 0))
          |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                              <<fold_right_1030@59:2>@67:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
          <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
          
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>](var160:int,var161:int),
          (((1 + var161) = <<make_list_1036@39:1>@55:0>) &&
           (((1 + var160) = <make_list_1036@39:0>) && (<make_list_1036@39:0> >= 0)))
          |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                             <<make_list_1036@39:1>@55:0>:int)
          
          P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
          ((<make_list_1036@42:0> < 0) && (<<make_list_1036@42:1>@45:0> = 0))
          |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                             <<make_list_1036@42:1>@45:0>:int)
          
          P[<make_list_1036@39:0>](var162:int),
          ((var162 = (1 + <make_list_1036@42:0>)) && ((1 + <make_list_1036@42:0>) >= 0))
          |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1690_sep_134_sep_0($141)) -> 1=0.
(($141-1=0) & ($142-$143<0)) & (v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0($144,$143,$142)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($145,$144)) -> v_sep_fail_1690_sep_134_sep_0($141).
(($146=0) & ($147-1>=0) & (-$147+$148+1=0)) & (v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0($149,$150,$151)) & (v_sep_fold_right_1030_sep_59_sep_3($147,$152)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($147,$146,$149)) & (v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0($148,$152,$150)) -> v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0($147,$152,$151).
($153-$154-$155=0) & (v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1($154,$155)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($156,$147)) -> v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0($154,$155,$153).
(($157=0) & (-$158+1<=0) & (-$158+$159+1=0)) & (v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0($159,$160,$155)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($158,$157,$154)) & (v_sep_fold_right_1030_sep_59_sep_3($158,$160)) -> v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1($154,$155).
(($161=0) & ($162-$163=0)) & (v_sep_fold_right_1030_sep_96_sep_3($161,$163)) -> v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0($161,$163,$162).
(($164=0) & ($161>=0) & (-$161+$165-1=0) & (-$161+$166-1=0)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($166,$164,$167)) & (v_sep_fold_right_1030_sep_59_sep_3($165,$163)) -> v_sep_fold_right_1030_sep_96_sep_3($161,$163).
(0=0) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($156,$147)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0($156,$147,$168,$169)) -> v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($147,$168,$169).
(($170=0) & ($171>=0) & (-$171+$172+1=0) & ($173-$174+1=0) & (-$171+$175=0)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($171,$174)) & (v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($172,$173)) & (v_sep_make_list_1036_sep_39_sep_0($171)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0($171,$174,$170)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0($171,$174,$170,$175).
(0=0) & (v_sep_make_list_1036_sep_39_sep_0($171)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0($174,$170)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($171,$174)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0($171,$174,$170).
(($168=0) & ($147-1>=0)) & (v_sep_fold_right_1030_sep_59_sep_3($147,$176)) -> v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0($147,$168).
(0=0) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($156,$147)) -> v_sep_fold_right_1030_sep_59_sep_3($147,$152).
(($171>=0) & (-$171+$177+1=0) & (-$174+$178+1=0)) & (v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($177,$178)) & (v_sep_make_list_1036_sep_39_sep_0($171)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($171,$174).
(($179=0) & ($180<0)) & (v_sep_make_list_1036_sep_42_sep_0($180)) -> v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($180,$179).
(($180+1>=0) & (-$180+$181-1=0)) & (v_sep_make_list_1036_sep_39_sep_0($181)) -> v_sep_make_list_1036_sep_42_sep_0($180).
0=0 -> v_sep_make_list_1036_sep_39_sep_0($171).


v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...............................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...........................Split conj [48] 0.410937
(Reconstrcut: 25 ******)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.......................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................Split conj [58] 0.473927
(Reconstrcut: 23 ****)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..............................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................Split conj [64] 0.550915
(Reconstrcut: 31 ****)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
......................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................Split conj [70] 0.617905
(Reconstrcut: 15 ***)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
......................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................Split conj [74] 0.698893
(Reconstrcut: 11 **)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...............
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.............................................Split conj [76] 0.830873
(Reconstrcut: 15 **)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.............................................Split conj [78] 1.014845
(Reconstrcut: 19 **)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.......................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.............................................Split conj [80] 1.17282
(Reconstrcut: 27 ****)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...........................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.............................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..............................................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.......................................................................(0=0) & (v_sep_fail_1690_sep_134_sep_0($141)) -> 1=0.
(($141-1=0) & ($142-$143<0)) & (v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0($144,$143,$142)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($145,$144)) -> v_sep_fail_1690_sep_134_sep_0($141).
(($146=0) & ($147-1>=0) & (-$147+$148+1=0)) & (v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0($149,$150,$151)) & (v_sep_fold_right_1030_sep_59_sep_3($147,$152)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($147,$146,$149)) & (v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0($148,$152,$150)) -> v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0($147,$152,$151).
($153-$154-$155=0) & (v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1($154,$155)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($156,$147)) -> v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0($154,$155,$153).
(($157=0) & (-$158+1<=0) & (-$158+$159+1=0)) & (v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0($159,$160,$155)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($158,$157,$154)) & (v_sep_fold_right_1030_sep_59_sep_3($158,$160)) -> v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1($154,$155).
(($161=0) & ($162-$163=0)) & (v_sep_fold_right_1030_sep_96_sep_3($161,$163)) -> v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0($161,$163,$162).
(($164=0) & ($161>=0) & (-$161+$165-1=0) & (-$161+$166-1=0)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($166,$164,$167)) & (v_sep_fold_right_1030_sep_59_sep_3($165,$163)) -> v_sep_fold_right_1030_sep_96_sep_3($161,$163).
(0=0) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($156,$147)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0($156,$147,$168,$169)) -> v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($147,$168,$169).
(($170=0) & ($171>=0) & (-$171+$172+1=0) & ($173-$174+1=0) & (-$171+$175=0)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($171,$174)) & (v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($172,$173)) & (v_sep_make_list_1036_sep_39_sep_0($171)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0($171,$174,$170)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0($171,$174,$170,$175).
(0=0) & (v_sep_make_list_1036_sep_39_sep_0($171)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0($174,$170)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($171,$174)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0($171,$174,$170).
(($168=0) & ($147-1>=0)) & (v_sep_fold_right_1030_sep_59_sep_3($147,$176)) -> v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0($147,$168).
(0=0) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($156,$147)) -> v_sep_fold_right_1030_sep_59_sep_3($147,$152).
(($171>=0) & (-$171+$177+1=0) & (-$174+$178+1=0)) & (v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($177,$178)) & (v_sep_make_list_1036_sep_39_sep_0($171)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($171,$174).
(($179=0) & ($180<0)) & (v_sep_make_list_1036_sep_42_sep_0($180)) -> v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($180,$179).
(($180+1>=0) & (-$180+$181-1=0)) & (v_sep_make_list_1036_sep_39_sep_0($181)) -> v_sep_make_list_1036_sep_42_sep_0($180).
0=0 -> v_sep_make_list_1036_sep_39_sep_0($171).

          |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
        solution:
          P[<fail_1690@134:0>]($182:bool) = false
          P[<<fold_right_1030@59:0>@109:1>]($223:int,$225:int) = true
          P[<<<fold_right_1030@59:0>@109:2>@115:0>]($197:int,$199:int,$201:int) = (($199 + $197) <= $201)
          P[<<fold_right_1030@59:2>@67:0>]($257:int,$259:int) = true
          P[<<<fold_right_1030@59:2>@67:1>@90:0>]($209:int,$211:int,$213:int) = (0 <= $213)
          P[<fold_right_1030@59:3>]($204:int,$206:int) = true
          P[<<fold_right_1030@59:4>@129:0>]($185:int,$187:int,$189:int) = ($187 <= $189)
          P[<fold_right_1030@96:3>]($228:int,$230:int) = true
          P[<<fold_right_1030@96:4>@99:0>]($216:int,$218:int,$220:int) = ($218 <= $220)
          P[<make_list_1036@39:0>]($247:int) = true
          P[<<make_list_1036@39:1>@55:0>]($192:int,$194:int) = true
          P[<<<make_list_1036@39:1>@55:1>@71:0>]($250:int,$252:int,$254:int) = true
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>]($233:int,$235:int,$237:int,$239:int) = (0 <= $239)
          P[<make_list_1036@42:0>]($262:int) = true
          P[<<make_list_1036@42:1>@45:0>]($242:int,$244:int) = true
        
      end HcSolver.solve_ub(10425)[4] (1.117830 sec.)
      begin HcSolver.check_validity(11361)[4]
        input:
          P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1684@131:1>:int,<f_main_1684@131:2>:int),
          P[<<fold_right_1030@59:4>@129:0>](<f_main_1684@131:2>:int,<f_main_1684@131:0>:int,<f_main_1684@131:4>:int),
          ((<f_main_1684@131:4> < <f_main_1684@131:0>) && <fail_1690@134:0>)
          |- P[<fail_1690@134:0>](<fail_1690@134:0>:bool)
          
          P[<<fold_right_1030@96:4>@99:0>]((-1 + <fold_right_1030@59:1>):int,<fold_right_1030@59:3>:int,var145:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var144:int),
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
          P[<<<fold_right_1030@59:0>@109:2>@115:0>](var144:int,var145:int,<<fold_right_1030@59:4>@129:0>:int),
          (<fold_right_1030@59:1> >= 1)
          |- P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,
                                               <fold_right_1030@59:3>:int,
                                               <<fold_right_1030@59:4>@129:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
          P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
          (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
          |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                       <<fold_right_1030@59:0>@109:1>:int,
                                                       <<<fold_right_1030@59:0>@109:2>@115:0>:int)
          
          P[<fold_right_1030@59:3>](var149:int,var148:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](var149:int,0:int,<<fold_right_1030@59:0>@109:0>:int),
          P[<<fold_right_1030@96:4>@99:0>]((-1 + var149):int,var148:int,<<fold_right_1030@59:0>@109:1>:int),
          (1 <= var149)
          |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                               <<fold_right_1030@59:0>@109:1>:int)
          
          P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int),
          ((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>))
          |- P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,
                                              <fold_right_1030@96:3>:int,
                                              <<fold_right_1030@96:4>@99:0>:int)
          
          P[<fold_right_1030@59:3>]((1 + <fold_right_1030@96:1>):int,<fold_right_1030@96:3>:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>]((1 + <fold_right_1030@96:1>):int,0:int,<f_fold_right_1677@94:5>:int),
          (<fold_right_1030@96:1> >= 0)
          |- P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int)
          
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
          <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
          <<<fold_right_1030@59:2>@67:1>@90:0>:int)
          
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int),
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
           ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
          |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                           <<make_list_1036@39:1>@55:0>:int,
                                                           <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                           <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
          <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,
          <<<make_list_1036@39:1>@55:1>@71:0>:int)
          
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
          ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
          |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                              <<fold_right_1030@59:2>@67:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
          <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
          
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int), (
          <make_list_1036@39:0> >= 0)
          |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                             <<make_list_1036@39:1>@55:0>:int)
          
          P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
          ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
          |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                             <<make_list_1036@42:1>@45:0>:int)
          
          P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), (
          (1 + <make_list_1036@42:0>) >= 0) |- P[<make_list_1036@42:0>](
          <make_list_1036@42:0>:int)
          
          |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(11361)[4] (0.022996 sec.)
      solution:
        P[<fail_1690@134:0>]($182:bool) = false
        P[<<fold_right_1030@59:0>@109:1>]($223:int,$225:int) = true
        P[<<<fold_right_1030@59:0>@109:2>@115:0>]($197:int,$199:int,$201:int) = (($199 + $197) <= $201)
        P[<<fold_right_1030@59:2>@67:0>]($257:int,$259:int) = true
        P[<<<fold_right_1030@59:2>@67:1>@90:0>]($209:int,$211:int,$213:int) = (0 <= $213)
        P[<fold_right_1030@59:3>]($204:int,$206:int) = true
        P[<<fold_right_1030@59:4>@129:0>]($185:int,$187:int,$189:int) = ($187 <= $189)
        P[<fold_right_1030@96:3>]($228:int,$230:int) = true
        P[<<fold_right_1030@96:4>@99:0>]($216:int,$218:int,$220:int) = ($218 <= $220)
        P[<make_list_1036@39:0>]($247:int) = true
        P[<<make_list_1036@39:1>@55:0>]($192:int,$194:int) = true
        P[<<<make_list_1036@39:1>@55:1>@71:0>]($250:int,$252:int,$254:int) = true
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>]($233:int,$235:int,$237:int,$239:int) = (0 <= $239)
        P[<make_list_1036@42:0>]($262:int) = true
        P[<<make_list_1036@42:1>@45:0>]($242:int,$244:int) = true
    end YhornInterface.solve(10424)[3] (1.142826 sec.)
    
  end RefTypeInfer.infer_etrs(2497)[2] (1.267808 sec.)
  refinement types:
    main_1676: X
    f_1685: v1:int -> X
    f_1686: v1:int -> v2:int -> X
    main_1041: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1036: v1:int -> (v2:int -> (v3:int -> (v4:{v4:int | (0 <= v4)} -> X) -> X) -> X) -> X
    make_list_1036: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_make_list_1682: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1133: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_1683: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    fold_right_1030: (v1:int -> v2:int -> (v3:{v3:int | ((v2 + v1) <= v3)} -> X) -> X) ->
                     v6:int ->
                     (v7:int -> (v8:{v8:int | (0 <= v8)} -> X) -> X) ->
                     v11:int -> (v12:{v12:int | (v11 <= v12)} -> X) -> X
    br_fold_right_1688: v1:bool ->
                        (v2:int -> v3:int -> (v4:int -> X) -> X) ->
                        v7:int -> (v8:int -> (v9:int -> X) -> X) -> v12:int -> (v13:int -> X) -> X
    f_cons_make_list_1681: v1:int -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> v8:int -> (v9:int -> X) -> X
    f_fold_right_1677: v1:int ->
                       v2:int ->
                       (v3:int -> v4:int -> (v5:int -> X) -> X) ->
                       (v8:int -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    fold_right_1030: (v1:int -> v2:int -> (v3:int -> X) -> X) ->
                     v6:int -> (v7:int -> (v8:int -> X) -> X) -> v11:int -> (v12:{v12:int | (v11 <= v12)} -> X) -> X
    f_fold_right_1679: v1:int ->
                       v2:int -> v3:int -> (v4:int -> v5:int -> (v6:int -> X) -> X) -> (v9:int -> X) -> v11:int -> X
    add_1038: v1:int -> v2:int -> (v3:int -> X) -> X
    f_main_1684: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    fail_1690: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1687: var203:int -> var202:int -> var201:unit -> X
    f_fold_right_1678: var214:int ->
                       var213:int ->
                       var212:int -> (var211:int -> (var210:int -> X) -> X) -> var207:int -> (var206:int -> X) -> X
    f_make_list_1680: var219:int -> var218:int -> (var217:int -> X) -> X
  abstraction types:
    main_1676: X
    f_1685: v1:int -> X
    f_1686: v1:int -> v2:int -> X
    main_1041: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1036: var220:int ->
                    (var221:int -> (var222:int -> (var223:int[var223 -> (
                                                              0 <= var223)] -> X) -> X) -> X) -> X
    f_make_list_1682: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1133: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_1683: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    fold_right_1030: (var228:int -> var229:int -> (var230:int[var230 -> (
                                                              (var229 + var228) <= var230)] -> X) -> X) ->
                     var233:int ->
                     (var234:int -> (var235:int[var235 -> (0 <= var235)] -> X) -> X) ->
                     var238:int -> (var239:int[var239 -> (var238 <= var239)] -> X) -> X
    br_fold_right_1688: v1:bool ->
                        (v2:int -> v3:int -> (v4:int -> X) -> X) ->
                        v7:int -> (v8:int -> (v9:int -> X) -> X) -> v12:int -> (v13:int -> X) -> X
    f_cons_make_list_1681: v1:int -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> v8:int -> (v9:int -> X) -> X
    f_fold_right_1677: v1:int ->
                       v2:int ->
                       (v3:int -> v4:int -> (v5:int -> X) -> X) ->
                       (v8:int -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    f_fold_right_1679: v1:int ->
                       v2:int -> v3:int -> (v4:int -> v5:int -> (v6:int -> X) -> X) -> (v9:int -> X) -> v11:int -> X
    add_1038: v1:int -> v2:int -> (v3:int -> X) -> X
    f_main_1684: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    fail_1690: v1:bool -> (v2:unit -> X) -> X
    f_1687: var203:int -> var202:int -> var201:unit -> X
    f_fold_right_1678: var214:int ->
                       var213:int ->
                       var212:int -> (var211:int -> (var210:int -> X) -> X) -> var207:int -> (var206:int -> X) -> X
    f_make_list_1680: var219:int -> var218:int -> (var217:int -> X) -> X
  
end AbsTypeInfer.refine(2496)[1] (1.281806 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1676
  main_1676 -> (rand_int f_1685)
  add_1038 x_1039 y_1040 k_add_1506 -> (k_add_1506 (x_1039 + y_1040))
  br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when b_1689 ->
      (xs2_1032 0 (f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032))
  br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (not b_1689) -> _|_
  cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1404 ->
      (k_make_list_cons_make_list_1404 (xs1_1132 + 1) (f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132))
  f_1685 x_1601 -> (rand_int (f_1686 x_1601))
  f_1686 x_1601 x_1614 -> (main_1041 x_1601 x_1614 (f_1687 x_1601 x_1614))
  f_1687 x_1601 x_1614 x_1598 -> end
  f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 when (
      i_1130 = 0) -> (k_make_list_cons_make_list_1419 x_1131)
  f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 when (
      not (i_1130 = 0)) -> (xs2_1132 (i_1130 - 1) k_make_list_cons_make_list_1419)
  f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032 x_1262 ->
      (fold_right_1030 f_1031 (xs1_1032 - 1) (f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032) acc_1033
        (f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215))
  f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032 x_1104 k_fold_right_xs'_1248 ->
      (xs2_1032 (x_1104 + 1) k_fold_right_xs'_1248)
  f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215 x_1309 ->
      (f_1031 x_1262 x_1309 k_fold_right_1215)
  f_main_1683 m_1043 n_1042 k_main_1523 x1_1529 x2_1529 ->
      (fold_right_1030 add_1038 x1_1529 x2_1529 m_1043 (f_main_1684 m_1043 n_1042 x1_1529 k_main_1523))
  f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 when (x_1557 >= m_1043) -> (k_main_1523 ())
  f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 when (not (x_1557 >= m_1043)) -> (fail_1690 true k_main_1523)
  f_make_list_1680 n_1037 x_1137 k_make_list_1357 -> _|_
  f_make_list_1682 n_1037 k_make_list_1345 x1_1482 x2_1482 ->
      (cons_make_list_1133 n_1037 n_1037 x1_1482 x2_1482 k_make_list_1345)
  fail_1690 b k -> {fail} => (k ())
  fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (
      xs1_1032 = 0) -> (k_fold_right_1215 acc_1033)
  fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (
      not (xs1_1032 = 0)) -> (br_fold_right_1688 (1 <= xs1_1032) f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215)
  main_1041 n_1042 m_1043 k_main_1523 -> (make_list_1036 n_1042 (f_main_1683 m_1043 n_1042 k_main_1523))
  make_list_1036 n_1037 k_make_list_1345 when (n_1037 < 0) -> (k_make_list_1345 0 (f_make_list_1680 n_1037))
  make_list_1036 n_1037 k_make_list_1345 when (not (n_1037 < 0)) ->
      (make_list_1036 (n_1037 - 1) (f_make_list_1682 n_1037 k_make_list_1345))
Types:
  main_1676 : X
  fail_1690 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fold_right_1030 : ((x_2:int -> x_3:int -> (x_5:int[x_2 <= -x_3 + x_5] -> X) -> X) ->
                     int -> (int -> (x_12:int[x_12 >= 0] -> X) -> X) -> x_15:int -> (x_17:int[x_15 <= x_17] -> X) -> X)
  make_list_1036 : (int -> (int -> (int -> (x_7:int[x_7 >= 0] -> X) -> X) -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  fold_right: ((Top -> ((Bottom list) -> (x_3:int -> {x_4:int | x_3 <= x_4}))) /\ 
               ((x_14:int -> (x_15:int -> {x_16:int | x_14 <= (-x_15) + x_16})) ->
                    (({x_13:int | x_13 >= 0} list) -> (x_9:int -> {x_10:int | x_9 <= x_10}))))
  make_list: (int -> ({x_4:int | x_4 >= 0} list))

cycles: 2
total: 1.690 sec
  abst: 0.014 sec
  mc: 0.041 sec
  refine: 1.351 sec
    exparam: 0.084 sec
