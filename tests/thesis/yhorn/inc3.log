MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn inc3.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 des_1036 x_1037 =
   (match des_1036 i_1034 with
      | _ -> ()
      | _ -> let u_1078 = {fail} 
             in
               _|_) 
 in
 let rec inc3_1038 m_1039 src_1040 i_1041 =
   if i_1041 >= m_1039 then
     ()
   else
     let u_1117 = update_1033 i_1041 m_1039 src_1040 (src_1040 i_1041 + 1) 
     in
       inc3_1038 m_1039 src_1040 (i_1041 + 1) 
 in
 let main_1042 n_1043 = if n_1043 > 0 then
                          inc3_1038 n_1043 (make_array_1030 n_1043) 0
                        else
                          () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 des_1036 x_1037 =
   (match des_1036 i_1034 with
      | _ -> ()
      | _ -> let u_1078 = {fail} 
             in
               _|_) 
 in
 let rec inc3_1038 m_1039 src_1040 i_1041 =
   if i_1041 >= m_1039 then
     ()
   else
     let u_1117 = update_1033 i_1041 m_1039 src_1040 (src_1040 i_1041 + 1) 
     in
       inc3_1038 m_1039 src_1040 (i_1041 + 1) 
 in
 let main_1042 n_1043 = if n_1043 > 0 then
                          inc3_1038 n_1043 (make_array_1030 n_1043) 0
                        else
                          () 
 in
 let main_1131 = let arg1_1130 = rand_int () 
                 in
                   main_1042 arg1_1130 
 in
   ()

copy_poly::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let update_1132 (i_1034:int) (n_1035:int) (des_1036:(int -> int)) (x_1037:int) =
   (match des_1036 i_1034 with
      | _ -> ()
      | _ -> let u_1078 = {fail} 
             in
               _|_) 
 in
 let rec inc3_1038 (m_1039:int) (src_1040:(int -> int)) (i_1041:int) =
   if i_1041 >= m_1039 then
     ()
   else
     let u_1117 = update_1132 i_1041 m_1039 src_1040 (src_1040 i_1041 + 1) 
     in
       inc3_1038 m_1039 src_1040 (i_1041 + 1) 
 in
 let main_1042 (n_1043:int) = if n_1043 > 0 then
                                inc3_1038 n_1043 (make_array_1030 n_1043) 0
                              else
                                () 
 in
 let main_1131 = let arg1_1130 = rand_int () 
                 in
                   main_1042 arg1_1130 
 in
   ()

abst_recdata::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1132 i_1034 n_1035 des_1036 x_1037 = let u_1133 = des_1036 i_1034 
                                                 in
                                                   () 
 in
 let rec inc3_1038 m_1039 src_1040 i_1041 =
   if i_1041 >= m_1039 then
     ()
   else
     let u_1117 = update_1132 i_1041 m_1039 src_1040 (src_1040 i_1041 + 1) 
     in
       inc3_1038 m_1039 src_1040 (i_1041 + 1) 
 in
 let main_1042 n_1043 = if n_1043 > 0 then
                          inc3_1038 n_1043 (make_array_1030 n_1043) 0
                        else
                          () 
 in
 let main_1131 = let arg1_1130 = rand_int () 
                 in
                   main_1042 arg1_1130 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1161:(int -> X)) =
   let k_make_array_u_1178 (x_1164:unit) = k_make_array_1161 0 
   in
   let k_make_array_u_1167 (b_1179:bool) =
     if b_1179 then
       k_make_array_u_1178 ()
     else
       {|fail|} () k_make_array_u_1178 
   in
     if 0 <= i_1032 then
       k_make_array_u_1167 (i_1032 < n_1031)
     else
       k_make_array_u_1167 false 
 in
 let update_1132
   (i_1034:int) (n_1035:int) (des_1036:(int -> ((int -> X) -> X))) (x_1037:int) (k_update_1214:(
   unit -> X)) = des_1036 i_1034 (fun x_1217 -> k_update_1214 ()) 
 in
 let rec inc3_1038 (m_1039:int) (src_1040:(int -> ((int -> X) -> X))) (i_1041:int) (k_inc3_1259:(
   unit -> X)) =
   if i_1041 >= m_1039 then
     k_inc3_1259 ()
   else
     src_1040 i_1041
       (fun x_1277 ->
          update_1132 i_1041 m_1039 src_1040 (x_1277 + 1)
            (fun x_1262 -> inc3_1038 m_1039 src_1040 (i_1041 + 1) k_inc3_1259)) 
 in
 let main_1042 (n_1043:int) (k_main_1331:(unit -> X)) =
   if n_1043 > 0 then
     inc3_1038 n_1043 (make_array_1030 n_1043) 0 k_main_1331
   else
     k_main_1331 () 
 in
   rand_int_cps () (fun x_1360 -> main_1042 x_1360 (fun x_1357 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1385
  main_1385 -> (rand_int f_1389)
  f_1389 x_1360 -> (main_1042 x_1360 (f_1390 x_1360))
  f_1390 x_1360 x_1357 -> end
  f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040 x_1277 ->
      (update_1132 i_1041 m_1039 src_1040 (x_1277 + 1) (f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040))
  f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040 x_1262 -> (inc3_1038 m_1039 src_1040 (i_1041 + 1) k_inc3_1259)
  f_update_1386 i_1034 n_1035 x_1037 k_update_1214 x_1217 -> (k_update_1214 ())
  fail_1391 b k -> {fail} => (k ())
  inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 when (i_1041 >= m_1039) -> (k_inc3_1259 ())
  inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 when (not (i_1041 >= m_1039)) ->
      (src_1040 i_1041 (f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040))
  k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 when b_1179 ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 ())
  k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 when (not b_1179) ->
      (fail_1391 true (k_make_array_u_1178 i_1032 n_1031 k_make_array_1161))
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 x_1164 -> (k_make_array_1161 0)
  main_1042 n_1043 k_main_1331 when (n_1043 > 0) -> (inc3_1038 n_1043 (make_array_1030 n_1043) 0 k_main_1331)
  main_1042 n_1043 k_main_1331 when (not (n_1043 > 0)) -> (k_main_1331 ())
  make_array_1030 n_1031 i_1032 k_make_array_1161 when (0 <= i_1032) ->
      (k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1161 when (not (0 <= i_1032)) ->
      (k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 false)
  update_1132 i_1034 n_1035 des_1036 x_1037 k_update_1214 ->
      (des_1036 i_1034 (f_update_1386 i_1034 n_1035 x_1037 k_update_1214))
Types:
  main_1385 : X
  fail_1391 : (x_1:bool[x_1] -> (unit -> X) -> X)
  inc3_1038 : (int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1385 ... --> 
  f_1389 ... --> 
  main_1042 [1/2] ... --> 
  inc3_1038 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1167 [2/2] ... --> 
  fail_1391 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(134)[1]
  program:
    main_1385  | true = ((Random.int 0) f_1389)
    f_1389 x_1360 | true = (main_1042 x_1360
                                      (f_1390 x_1360))
    f_1390 x_1360 x_1357 | true = end
    f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040 x_1277 | true = (update_1132
                                                                    i_1041
                                                                    m_1039
                                                                    src_1040
                                                                    (
                                                                    x_1277 + 1)
                                                                    (
                                                                    f_inc3_1388
                                                                    i_1041
                                                                    m_1039
                                                                    x_1277
                                                                    k_inc3_1259
                                                                    src_1040))
    f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040 x_1262 | true = (
    inc3_1038 m_1039
              src_1040
              (i_1041 + 1)
              k_inc3_1259)
    f_update_1386 i_1034 n_1035 x_1037 k_update_1214 x_1217 | true = (
    k_update_1214 ())
    fail_1391 b k | true = (fail ())
    inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 | (i_1041 >= m_1039) = (
    k_inc3_1259 ())
    inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 | (not (i_1041 >= m_1039)) = (
    src_1040 i_1041
             (f_inc3_1387 i_1041
                          m_1039
                          k_inc3_1259
                          src_1040))
    k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 | b_1179 = (
    k_make_array_u_1178 i_1032
                        n_1031
                        k_make_array_1161
                        ())
    k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 | (not b_1179) = (
    fail_1391 true
              (k_make_array_u_1178 i_1032
                                   n_1031
                                   k_make_array_1161))
    k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 x_1164 | true = (
    k_make_array_1161 0)
    main_1042 n_1043 k_main_1331 | (n_1043 > 0) = (inc3_1038 n_1043
                                                             (make_array_1030 n_1043)
                                                             0
                                                             k_main_1331)
    main_1042 n_1043 k_main_1331 | (not (n_1043 > 0)) = (k_main_1331 ())
    make_array_1030 n_1031 i_1032 k_make_array_1161 | (0 <= i_1032) = (
    k_make_array_u_1167 i_1032
                        n_1031
                        k_make_array_1161
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1161 | (not (0 <= i_1032)) = (
    k_make_array_u_1167 i_1032
                        n_1031
                        k_make_array_1161
                        false)
    update_1132 i_1034 n_1035 des_1036 x_1037 k_update_1214 | true = (
    des_1036 i_1034
             (f_update_1386 i_1034
                            n_1035
                            x_1037
                            k_update_1214))
    main_1385:X
    f_1389:int -> X
    f_1390:int -> unit -> X
    f_inc3_1387:int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_inc3_1388:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1386:int -> int -> int -> (unit -> X) -> int -> X
    fail_1391:bool -> (unit -> X) -> X
    inc3_1038:int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    k_make_array_u_1167:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1178:int -> int -> (int -> X) -> unit -> X
    main_1042:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1132:int -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
  inlined functions: f_1389,f_1390,f_inc3_1387,f_inc3_1388,f_update_1386,k_make_array_u_1167,k_make_array_u_1178,main_1042,make_array_1030,update_1132
  counterexample: 0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1389@4:0> = var2)
     [true.(<main_1042@6:0> = <f_1389@4:0>)
      [(<main_1042@6:0> > 0).((<inc3_1038@9:0> = <main_1042@6:0>) && (<inc3_1038@9:2> = 0))
       [(not (<inc3_1038@9:2> >= <inc3_1038@9:0>)).(<<inc3_1038@9:1>@12:0> = <inc3_1038@9:2>)
        [true.((<make_array_1030@14:0> = <main_1042@6:0>) && (<make_array_1030@14:1> = <<inc3_1038@9:1>@12:0>))
         [(not (0 <= <make_array_1030@14:1>)).
          ((<k_make_array_u_1167@17:0> = <make_array_1030@14:1>) &&
           ((<k_make_array_u_1167@17:1> = <make_array_1030@14:0>) && (<k_make_array_u_1167@17:3> = false)))
          [(not <k_make_array_u_1167@17:3>).(<fail_1391@20:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(135)[2]
    horn clauses:
      P[<fail_1391@20:0>](<fail_1391@20:0>:bool)|- bot
      
      P[<k_make_array_u_1167@17:3>](<k_make_array_u_1167@17:0>:int,<k_make_array_u_1167@17:1>:int,false:bool),
      <fail_1391@20:0> |- P[<fail_1391@20:0>](<fail_1391@20:0>:bool)
      
      P[<make_array_1030@14:1>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
      ((0 > <k_make_array_u_1167@17:0>) && (not <k_make_array_u_1167@17:3>))
      |- P[<k_make_array_u_1167@17:3>](<k_make_array_u_1167@17:0>:int,
                                       <k_make_array_u_1167@17:1>:int,
                                       <k_make_array_u_1167@17:3>:bool)
      
      P[<main_1042@6:0>](<make_array_1030@14:0>:int),
      P[<<inc3_1038@9:1>@12:0>](<make_array_1030@14:0>:int,<make_array_1030@14:1>:int), (
      <make_array_1030@14:0> > 0) |- P[<make_array_1030@14:1>](<make_array_1030@14:0>:int,
                                                               <make_array_1030@14:1>:int)
      
      P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int), (
      <<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
      |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
      
      P[<main_1042@6:0>](<inc3_1038@9:0>:int), ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
      |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)
      
      P[<f_1389@4:0>](<main_1042@6:0>:int)|- P[<main_1042@6:0>](<main_1042@6:0>:int)
      
      |- P[<f_1389@4:0>](<f_1389@4:0>:int)
    call trees:
      <main_1385@1>
        <f_1389@4>
          <main_1042@6>
            <inc3_1038@9>
            </<inc3_1038@9:1>@12>
            <make_array_1030@14>
              <k_make_array_u_1167@17>
                <fail_1391@20>
    inlined horn clauses:
      P[<fail_1391@20:0>](<fail_1391@20:0>:bool)|- bot
      
      P[<<inc3_1038@9:1>@12:0>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
      ((0 > <k_make_array_u_1167@17:0>) && ((<k_make_array_u_1167@17:1> > 0) && <fail_1391@20:0>))
      |- P[<fail_1391@20:0>](<fail_1391@20:0>:bool)
      
      P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int), (
      <<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
      |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
      
       ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0)) |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,
                                                                    <inc3_1038@9:2>:int)
    begin ParamSubstInfer.infer(1210)[3]
      
    end ParamSubstInfer.infer(1210)[3] (0.022997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1212)[3]
      
    end RefTypeInfer.elim_coeffs(1212)[3] (0.000000 sec.)
    begin YhornInterface.solve(1408)[3]
      begin HcSolver.solve_ub(1409)[4]
        encoded:
          P[<fail_1391@20:0>](<fail_1391@20:0>:int)|- bot
          
          P[<<inc3_1038@9:1>@12:0>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
          ((0 > <k_make_array_u_1167@17:0>) && ((<k_make_array_u_1167@17:1> > 0) && (<fail_1391@20:0> = 1)))
          |- P[<fail_1391@20:0>](<fail_1391@20:0>:int)
          
          P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int),
          (<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
          |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
          
           ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
          |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)
        input to Yhorn:
          P[<fail_1391@20:0>](<fail_1391@20:0>:int)|- bot
          
          P[<<inc3_1038@9:1>@12:0>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
          ((<k_make_array_u_1167@17:1> > 0) && ((0 > <k_make_array_u_1167@17:0>) && (<fail_1391@20:0> = 1)))
          |- P[<fail_1391@20:0>](<fail_1391@20:0>:int)
          
          P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int),
          (<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
          |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
          
           ((<inc3_1038@9:0> > 0) && (<inc3_1038@9:2> = 0))
          |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1391_sep_20_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0) & ($9>0)) & (v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0($9,$8)) -> v_sep_fail_1391_sep_20_sep_0($7).
($10-$11<0) & (v_sep_inc3_1038_sep_9_sep_2($11,$10)) -> v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0($11,$10).
($12=0) & ($11>0) -> v_sep_inc3_1038_sep_9_sep_2($11,$12).


v_sep_fail_1391_sep_20_sep_0: X
v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0: X
v_sep_inc3_1038_sep_9_sep_2: X
....
v_sep_fail_1391_sep_20_sep_0: X
v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0: X
v_sep_inc3_1038_sep_9_sep_2: X
...
v_sep_fail_1391_sep_20_sep_0: X
v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0: X
v_sep_inc3_1038_sep_9_sep_2: X
....
v_sep_fail_1391_sep_20_sep_0: X
v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0: X
v_sep_inc3_1038_sep_9_sep_2: X
....(0=0) & (v_sep_fail_1391_sep_20_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0) & ($9>0)) & (v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0($9,$8)) -> v_sep_fail_1391_sep_20_sep_0($7).
($10-$11<0) & (v_sep_inc3_1038_sep_9_sep_2($11,$10)) -> v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0($11,$10).
($12=0) & ($11>0) -> v_sep_inc3_1038_sep_9_sep_2($11,$12).

        solution:
          P[<fail_1391@20:0>]($13:bool) = false
          P[<<inc3_1038@9:1>@12:0>]($16:int,$18:int) = (0 <= $18)
          P[<inc3_1038@9:2>]($21:int,$23:int) = (0 <= $23)
        
      end HcSolver.solve_ub(1409)[4] (0.012998 sec.)
      begin HcSolver.check_validity(1543)[4]
        input:
          P[<fail_1391@20:0>](<fail_1391@20:0>:bool)|- bot
          
          P[<<inc3_1038@9:1>@12:0>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
          ((0 > <k_make_array_u_1167@17:0>) && ((<k_make_array_u_1167@17:1> > 0) && <fail_1391@20:0>))
          |- P[<fail_1391@20:0>](<fail_1391@20:0>:bool)
          
          P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int),
          (<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
          |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
          
           ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
          |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1543)[4] (0.005999 sec.)
      solution:
        P[<fail_1391@20:0>]($13:bool) = false
        P[<<inc3_1038@9:1>@12:0>]($16:int,$18:int) = (0 <= $18)
        P[<inc3_1038@9:2>]($21:int,$23:int) = (0 <= $23)
    end YhornInterface.solve(1408)[3] (0.018997 sec.)
    
  end RefTypeInfer.infer_etrs(135)[2] (0.046993 sec.)
  refinement types:
    main_1385: X
    f_1389: v1:int -> X
    main_1042: v1:int -> (v2:unit -> X) -> X
    inc3_1038: v1:int ->
               (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) -> v6:{v6:int | (0 <= v6)} -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1167: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1391: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1390: var17:int -> var16:unit -> X
    f_inc3_1387: var27:int -> var26:int -> (var25:unit -> X) -> (var23:int -> (var22:int -> X) -> X) -> var19:int -> X
    f_inc3_1388: var38:int ->
                 var37:int -> var36:int -> (var35:unit -> X) -> (var33:int -> (var32:int -> X) -> X) -> var29:unit -> X
    f_update_1386: var45:int -> var44:int -> var43:int -> (var42:unit -> X) -> var40:int -> X
    k_make_array_u_1178: var51:int -> var50:int -> (var49:int -> X) -> var47:unit -> X
    update_1132: var61:int -> var60:int -> (var59:int -> (var58:int -> X) -> X) -> var55:int -> (var54:unit -> X) -> X
  abstraction types:
    main_1385: X
    f_1389: v1:int -> X
    main_1042: v1:int -> (v2:unit -> X) -> X
    inc3_1038: v1:int ->
               (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) -> v6:int[v6 -> (
                                                                    0 <= v6)] -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1167: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1391: v1:bool -> (v2:unit -> X) -> X
    f_1390: var17:int -> var16:unit -> X
    f_inc3_1387: var27:int -> var26:int -> (var25:unit -> X) -> (var23:int -> (var22:int -> X) -> X) -> var19:int -> X
    f_inc3_1388: var38:int ->
                 var37:int -> var36:int -> (var35:unit -> X) -> (var33:int -> (var32:int -> X) -> X) -> var29:unit -> X
    f_update_1386: var45:int -> var44:int -> var43:int -> (var42:unit -> X) -> var40:int -> X
    k_make_array_u_1178: var51:int -> var50:int -> (var49:int -> X) -> var47:unit -> X
    update_1132: var61:int -> var60:int -> (var59:int -> (var58:int -> X) -> X) -> var55:int -> (var54:unit -> X) -> X
  
end AbsTypeInfer.refine(134)[1] (0.049993 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1385
  main_1385 -> (rand_int f_1389)
  f_1389 x_1360 -> (main_1042 x_1360 (f_1390 x_1360))
  f_1390 x_1360 x_1357 -> end
  f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040 x_1277 ->
      (update_1132 i_1041 m_1039 src_1040 (x_1277 + 1) (f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040))
  f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040 x_1262 -> (inc3_1038 m_1039 src_1040 (i_1041 + 1) k_inc3_1259)
  f_update_1386 i_1034 n_1035 x_1037 k_update_1214 x_1217 -> (k_update_1214 ())
  fail_1391 b k -> {fail} => (k ())
  inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 when (i_1041 >= m_1039) -> (k_inc3_1259 ())
  inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 when (not (i_1041 >= m_1039)) ->
      (src_1040 i_1041 (f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040))
  k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 when b_1179 ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 ())
  k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 when (not b_1179) ->
      (fail_1391 true (k_make_array_u_1178 i_1032 n_1031 k_make_array_1161))
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 x_1164 -> (k_make_array_1161 0)
  main_1042 n_1043 k_main_1331 when (n_1043 > 0) -> (inc3_1038 n_1043 (make_array_1030 n_1043) 0 k_main_1331)
  main_1042 n_1043 k_main_1331 when (not (n_1043 > 0)) -> (k_main_1331 ())
  make_array_1030 n_1031 i_1032 k_make_array_1161 when (0 <= i_1032) ->
      (k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1161 when (not (0 <= i_1032)) ->
      (k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 false)
  update_1132 i_1034 n_1035 des_1036 x_1037 k_update_1214 ->
      (des_1036 i_1034 (f_update_1386 i_1034 n_1035 x_1037 k_update_1214))
Types:
  main_1385 : X
  fail_1391 : (x_1:bool[x_1] -> (unit -> X) -> X)
  inc3_1038 : (int -> (x_3:int[x_3 >= 0] -> (int -> X) -> X) -> x_8:int[x_8 >= 0] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1385 ... --> 
  f_1389 ... --> 
  main_1042 [1/2] ... --> 
  inc3_1038 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1167 [2/2] ... --> 
  fail_1391 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(2199)[1]
  program:
    main_1385  | true = ((Random.int 0) f_1389)
    f_1389 x_1360 | true = (main_1042 x_1360
                                      (f_1390 x_1360))
    f_1390 x_1360 x_1357 | true = end
    f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040 x_1277 | true = (update_1132
                                                                    i_1041
                                                                    m_1039
                                                                    src_1040
                                                                    (
                                                                    x_1277 + 1)
                                                                    (
                                                                    f_inc3_1388
                                                                    i_1041
                                                                    m_1039
                                                                    x_1277
                                                                    k_inc3_1259
                                                                    src_1040))
    f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040 x_1262 | true = (
    inc3_1038 m_1039
              src_1040
              (i_1041 + 1)
              k_inc3_1259)
    f_update_1386 i_1034 n_1035 x_1037 k_update_1214 x_1217 | true = (
    k_update_1214 ())
    fail_1391 b k | true = (fail ())
    inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 | (i_1041 >= m_1039) = (
    k_inc3_1259 ())
    inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 | (not (i_1041 >= m_1039)) = (
    src_1040 i_1041
             (f_inc3_1387 i_1041
                          m_1039
                          k_inc3_1259
                          src_1040))
    k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 | b_1179 = (
    k_make_array_u_1178 i_1032
                        n_1031
                        k_make_array_1161
                        ())
    k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 | (not b_1179) = (
    fail_1391 true
              (k_make_array_u_1178 i_1032
                                   n_1031
                                   k_make_array_1161))
    k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 x_1164 | true = (
    k_make_array_1161 0)
    main_1042 n_1043 k_main_1331 | (n_1043 > 0) = (inc3_1038 n_1043
                                                             (make_array_1030 n_1043)
                                                             0
                                                             k_main_1331)
    main_1042 n_1043 k_main_1331 | (not (n_1043 > 0)) = (k_main_1331 ())
    make_array_1030 n_1031 i_1032 k_make_array_1161 | (0 <= i_1032) = (
    k_make_array_u_1167 i_1032
                        n_1031
                        k_make_array_1161
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1161 | (not (0 <= i_1032)) = (
    k_make_array_u_1167 i_1032
                        n_1031
                        k_make_array_1161
                        false)
    update_1132 i_1034 n_1035 des_1036 x_1037 k_update_1214 | true = (
    des_1036 i_1034
             (f_update_1386 i_1034
                            n_1035
                            x_1037
                            k_update_1214))
    main_1385:X
    f_1389:int -> X
    f_1390:int -> unit -> X
    f_inc3_1387:int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_inc3_1388:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1386:int -> int -> int -> (unit -> X) -> int -> X
    fail_1391:bool -> (unit -> X) -> X
    inc3_1038:int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    k_make_array_u_1167:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1178:int -> int -> (int -> X) -> unit -> X
    main_1042:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1132:int -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
  inlined functions: f_1389,f_1390,f_inc3_1387,f_inc3_1388,f_update_1386,k_make_array_u_1167,k_make_array_u_1178,main_1042,make_array_1030,update_1132
  counterexample: 0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1389@26:0> = var62)
     [true.(<main_1042@28:0> = <f_1389@26:0>)
      [(<main_1042@28:0> > 0).((<inc3_1038@31:0> = <main_1042@28:0>) && (<inc3_1038@31:2> = 0))
       [(not (<inc3_1038@31:2> >= <inc3_1038@31:0>)).(<<inc3_1038@31:1>@34:0> = <inc3_1038@31:2>)
        [true.((<make_array_1030@36:0> = <main_1042@28:0>) && (<make_array_1030@36:1> = <<inc3_1038@31:1>@34:0>))
         [(0 <= <make_array_1030@36:1>).
          ((<k_make_array_u_1167@39:0> = <make_array_1030@36:1>) &&
           ((<k_make_array_u_1167@39:1> = <make_array_1030@36:0>) &&
            (<k_make_array_u_1167@39:3> = (<make_array_1030@36:1> < <make_array_1030@36:0>))))
          [(not <k_make_array_u_1167@39:3>).(<fail_1391@42:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(2200)[2]
    horn clauses:
      P[<fail_1391@42:0>](<fail_1391@42:0>:bool)|- bot
      
      P[<k_make_array_u_1167@39:3>](<k_make_array_u_1167@39:0>:int,<k_make_array_u_1167@39:1>:int,false:bool),
      <fail_1391@42:0> |- P[<fail_1391@42:0>](<fail_1391@42:0>:bool)
      
      P[<make_array_1030@36:1>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
      ((0 <= <k_make_array_u_1167@39:0>) &&
       (<k_make_array_u_1167@39:3> = (<k_make_array_u_1167@39:0> < <k_make_array_u_1167@39:1>)))
      |- P[<k_make_array_u_1167@39:3>](<k_make_array_u_1167@39:0>:int,
                                       <k_make_array_u_1167@39:1>:int,
                                       <k_make_array_u_1167@39:3>:bool)
      
      P[<main_1042@28:0>](<make_array_1030@36:0>:int),
      P[<<inc3_1038@31:1>@34:0>](<make_array_1030@36:0>:int,<make_array_1030@36:1>:int), (
      <make_array_1030@36:0> > 0) |- P[<make_array_1030@36:1>](<make_array_1030@36:0>:int,
                                                               <make_array_1030@36:1>:int)
      
      P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
      (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
      |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
      
      P[<main_1042@28:0>](<inc3_1038@31:0>:int), ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
      |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
      
      P[<f_1389@26:0>](<main_1042@28:0>:int)|- P[<main_1042@28:0>](<main_1042@28:0>:int)
      
      |- P[<f_1389@26:0>](<f_1389@26:0>:int)
    call trees:
      <main_1385@23>
        <f_1389@26>
          <main_1042@28>
            <inc3_1038@31>
            </<inc3_1038@31:1>@34>
            <make_array_1030@36>
              <k_make_array_u_1167@39>
                <fail_1391@42>
    inlined horn clauses:
      P[<fail_1391@42:0>](<fail_1391@42:0>:bool)|- bot
      
      P[<<inc3_1038@31:1>@34:0>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
      ((0 <= <k_make_array_u_1167@39:0>) &&
       ((<k_make_array_u_1167@39:1> > 0) &&
        ((<k_make_array_u_1167@39:0> >= <k_make_array_u_1167@39:1>) && <fail_1391@42:0>)))
      |- P[<fail_1391@42:0>](<fail_1391@42:0>:bool)
      
      P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
      (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
      |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
      
       ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
      |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
    begin ParamSubstInfer.infer(3534)[3]
      
    end ParamSubstInfer.infer(3534)[3] (0.061991 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(3536)[3]
      
    end RefTypeInfer.elim_coeffs(3536)[3] (0.002000 sec.)
    begin YhornInterface.solve(3817)[3]
      begin HcSolver.solve_ub(3818)[4]
        encoded:
          P[<fail_1391@42:0>](<fail_1391@42:0>:int)|- bot
          
          P[<<inc3_1038@31:1>@34:0>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
          ((0 <= <k_make_array_u_1167@39:0>) &&
           ((<k_make_array_u_1167@39:1> > 0) &&
            ((<k_make_array_u_1167@39:0> >= <k_make_array_u_1167@39:1>) && (<fail_1391@42:0> = 1))))
          |- P[<fail_1391@42:0>](<fail_1391@42:0>:int)
          
          P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
          (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
          |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
          
           ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
          |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
        input to Yhorn:
          P[<fail_1391@42:0>](<fail_1391@42:0>:int)|- bot
          
          P[<<inc3_1038@31:1>@34:0>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
          ((<k_make_array_u_1167@39:0> >= <k_make_array_u_1167@39:1>) &&
           ((<k_make_array_u_1167@39:1> > 0) && ((0 <= <k_make_array_u_1167@39:0>) && (<fail_1391@42:0> = 1))))
          |- P[<fail_1391@42:0>](<fail_1391@42:0>:int)
          
          P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
          (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
          |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
          
           ((<inc3_1038@31:0> > 0) && (<inc3_1038@31:2> = 0))
          |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1391_sep_42_sep_0($67)) -> 1=0.
(($67-1=0) & (-$68<=0) & ($69>0) & ($68-$69>=0)) & (v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0($69,$68)) -> v_sep_fail_1391_sep_42_sep_0($67).
($70-$71<0) & (v_sep_inc3_1038_sep_31_sep_2($71,$70)) -> v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0($71,$70).
($72=0) & ($71>0) -> v_sep_inc3_1038_sep_31_sep_2($71,$72).


v_sep_fail_1391_sep_42_sep_0: X
v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0: X
v_sep_inc3_1038_sep_31_sep_2: X
....
v_sep_fail_1391_sep_42_sep_0: X
v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0: X
v_sep_inc3_1038_sep_31_sep_2: X
...
v_sep_fail_1391_sep_42_sep_0: X
v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0: X
v_sep_inc3_1038_sep_31_sep_2: X
....
v_sep_fail_1391_sep_42_sep_0: X
v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0: X
v_sep_inc3_1038_sep_31_sep_2: X
....(0=0) & (v_sep_fail_1391_sep_42_sep_0($67)) -> 1=0.
(($67-1=0) & (-$68<=0) & ($69>0) & ($68-$69>=0)) & (v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0($69,$68)) -> v_sep_fail_1391_sep_42_sep_0($67).
($70-$71<0) & (v_sep_inc3_1038_sep_31_sep_2($71,$70)) -> v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0($71,$70).
($72=0) & ($71>0) -> v_sep_inc3_1038_sep_31_sep_2($71,$72).

        solution:
          P[<fail_1391@42:0>]($73:bool) = false
          P[<<inc3_1038@31:1>@34:0>]($76:int,$78:int) = ((1 + $78) <= $76)
          P[<inc3_1038@31:2>]($81:int,$83:int) = ((1 + $83) <= $81)
        
      end HcSolver.solve_ub(3818)[4] (0.013998 sec.)
      begin HcSolver.check_validity(4018)[4]
        input:
          P[<fail_1391@42:0>](<fail_1391@42:0>:bool)|- bot
          
          P[<<inc3_1038@31:1>@34:0>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
          ((0 <= <k_make_array_u_1167@39:0>) &&
           ((<k_make_array_u_1167@39:1> > 0) &&
            ((<k_make_array_u_1167@39:0> >= <k_make_array_u_1167@39:1>) && <fail_1391@42:0>)))
          |- P[<fail_1391@42:0>](<fail_1391@42:0>:bool)
          
          P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
          (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
          |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
          
           ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
          |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(4018)[4] (0.005999 sec.)
      solution:
        P[<fail_1391@42:0>]($73:bool) = false
        P[<<inc3_1038@31:1>@34:0>]($76:int,$78:int) = ((1 + $78) <= $76)
        P[<inc3_1038@31:2>]($81:int,$83:int) = ((1 + $83) <= $81)
    end YhornInterface.solve(3817)[3] (0.019997 sec.)
    
  end RefTypeInfer.infer_etrs(2200)[2] (0.090987 sec.)
  refinement types:
    main_1385: X
    f_1389: v1:int -> X
    main_1042: v1:int -> (v2:unit -> X) -> X
    inc3_1038: v1:int ->
               (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) ->
               v6:{v6:int | ((1 + v6) <= v1)} -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1167: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1391: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1390: var77:int -> var76:unit -> X
    f_inc3_1387: var87:int -> var86:int -> (var85:unit -> X) -> (var83:int -> (var82:int -> X) -> X) -> var79:int -> X
    f_inc3_1388: var98:int ->
                 var97:int -> var96:int -> (var95:unit -> X) -> (var93:int -> (var92:int -> X) -> X) -> var89:unit -> X
    f_update_1386: var105:int -> var104:int -> var103:int -> (var102:unit -> X) -> var100:int -> X
    k_make_array_u_1178: var111:int -> var110:int -> (var109:int -> X) -> var107:unit -> X
    update_1132: var121:int ->
                 var120:int -> (var119:int -> (var118:int -> X) -> X) -> var115:int -> (var114:unit -> X) -> X
  abstraction types:
    main_1385: X
    f_1389: v1:int -> X
    main_1042: v1:int -> (v2:unit -> X) -> X
    inc3_1038: v1:int ->
               (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) ->
               v6:int[v6 -> ((1 + v6) <= v1)] -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1167: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1391: v1:bool -> (v2:unit -> X) -> X
    f_1390: var77:int -> var76:unit -> X
    f_inc3_1387: var87:int -> var86:int -> (var85:unit -> X) -> (var83:int -> (var82:int -> X) -> X) -> var79:int -> X
    f_inc3_1388: var98:int ->
                 var97:int -> var96:int -> (var95:unit -> X) -> (var93:int -> (var92:int -> X) -> X) -> var89:unit -> X
    f_update_1386: var105:int -> var104:int -> var103:int -> (var102:unit -> X) -> var100:int -> X
    k_make_array_u_1178: var111:int -> var110:int -> (var109:int -> X) -> var107:unit -> X
    update_1132: var121:int ->
                 var120:int -> (var119:int -> (var118:int -> X) -> X) -> var115:int -> (var114:unit -> X) -> X
  
end AbsTypeInfer.refine(2199)[1] (0.095986 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1385
  main_1385 -> (rand_int f_1389)
  f_1389 x_1360 -> (main_1042 x_1360 (f_1390 x_1360))
  f_1390 x_1360 x_1357 -> end
  f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040 x_1277 ->
      (update_1132 i_1041 m_1039 src_1040 (x_1277 + 1) (f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040))
  f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040 x_1262 -> (inc3_1038 m_1039 src_1040 (i_1041 + 1) k_inc3_1259)
  f_update_1386 i_1034 n_1035 x_1037 k_update_1214 x_1217 -> (k_update_1214 ())
  fail_1391 b k -> {fail} => (k ())
  inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 when (i_1041 >= m_1039) -> (k_inc3_1259 ())
  inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 when (not (i_1041 >= m_1039)) ->
      (src_1040 i_1041 (f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040))
  k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 when b_1179 ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 ())
  k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 when (not b_1179) ->
      (fail_1391 true (k_make_array_u_1178 i_1032 n_1031 k_make_array_1161))
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 x_1164 -> (k_make_array_1161 0)
  main_1042 n_1043 k_main_1331 when (n_1043 > 0) -> (inc3_1038 n_1043 (make_array_1030 n_1043) 0 k_main_1331)
  main_1042 n_1043 k_main_1331 when (not (n_1043 > 0)) -> (k_main_1331 ())
  make_array_1030 n_1031 i_1032 k_make_array_1161 when (0 <= i_1032) ->
      (k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1161 when (not (0 <= i_1032)) ->
      (k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 false)
  update_1132 i_1034 n_1035 des_1036 x_1037 k_update_1214 ->
      (des_1036 i_1034 (f_update_1386 i_1034 n_1035 x_1037 k_update_1214))
Types:
  main_1385 : X
  fail_1391 : (x_1:bool[x_1] -> (unit -> X) -> X)
  inc3_1038 : (x_1:int ->
               (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
               x_8:int[x_1 >= x_8 + 1; x_8 >= 0] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  inc3: ((x_1:int ->
              (({x_5:int | x_5 >= 0 && x_1 >= x_5 + 1} -> int) -> ({x_3:int | x_3 >= 0 && x_1 >= x_3 + 1} -> unit))) /\
         (x_7:int ->
              (({x_11:int | x_11 >= 0 && x_7 >= x_11 + 1} -> int) -> ({x_9:int | x_9 >= 0 && x_7 < x_9 + 1} -> unit))))

cycles: 2
total: 0.606 sec
  abst: 0.025 sec
  mc: 0.041 sec
  refine: 0.158 sec
    exparam: 0.085 sec
