MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn enc-zipmap.ml

parsed::
 let rec zip_1030 x_1031 y_1032 =
   if x_1031 = 0 then
     if y_1032 = 0 then
       x_1031
     else
       let u_1043 = {fail} () 
       in
         _|_
   else
     if y_1032 = 0 then
       let u_1046 = {fail} () 
       in
         _|_
     else
       1 + zip_1030 (x_1031 - 1) (y_1032 - 1) 
 in
 let rec map_1033 x_1034 = if x_1034 = 0 then
                             x_1034
                           else
                             1 + map_1033 (x_1034 - 1) 
 in
 let main_1035 n_1036 = if map_1033 (zip_1030 n_1036 n_1036) = n_1036 then
                          ()
                        else
                          {fail} () 
 in
   ()

set_target::
 let rec zip_1030 x_1031 y_1032 =
   if x_1031 = 0 then
     if y_1032 = 0 then
       x_1031
     else
       let u_1043 = {fail} () 
       in
         _|_
   else
     if y_1032 = 0 then
       let u_1046 = {fail} () 
       in
         _|_
     else
       1 + zip_1030 (x_1031 - 1) (y_1032 - 1) 
 in
 let rec map_1033 x_1034 = if x_1034 = 0 then
                             x_1034
                           else
                             1 + map_1033 (x_1034 - 1) 
 in
 let main_1035 n_1036 = if map_1033 (zip_1030 n_1036 n_1036) = n_1036 then
                          ()
                        else
                          {fail} () 
 in
 let main_1074 = let arg1_1073 = rand_int () 
                 in
                   main_1035 arg1_1073 
 in
   ()

CPS::
 let rec zip_1030 (x_1031:int) (y_1032:int) (k_zip_1102:(int -> X)) =
   if x_1031 = 0 then
     if y_1032 = 0 then
       k_zip_1102 x_1031
     else
       {|fail|} () (fun x_1105 -> _|_)
   else
     if y_1032 = 0 then
       {|fail|} () (fun x_1121 -> _|_)
     else
       zip_1030 (x_1031 - 1) (y_1032 - 1) (fun x_1134 -> k_zip_1102 (1 + x_1134)) 
 in
 let rec map_1033 (x_1034:int) (k_map_1167:(int -> X)) =
   if x_1034 = 0 then
     k_map_1167 x_1034
   else
     map_1033 (x_1034 - 1) (fun x_1171 -> k_map_1167 (1 + x_1171)) 
 in
 let main_1035 (n_1036:int) (k_main_1199:(unit -> X)) =
   zip_1030 n_1036 n_1036
     (fun x_1224 ->
        map_1033 x_1224 (fun x_1202 -> (if x_1202 = n_1036 then
                                          k_main_1199 ()
                                        else
                                          {|fail|} () k_main_1199))) 
 in
   rand_int_cps () (fun x_1241 -> main_1035 x_1241 (fun x_1238 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1266
  main_1266 -> (rand_int f_1273)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when b_1276 -> (k_zip_1102 x_1031)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when (not b_1276) -> (fail_1279 true (f_zip_1267 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when b_1278 -> (fail_1280 true (f_zip_1268 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when (not b_1278) ->
      (zip_1030 (x_1031 - 1) (y_1032 - 1) (f_zip_1269 x_1031 y_1032 k_zip_1102))
  f_1273 x_1241 -> (main_1035 x_1241 (f_1274 x_1241))
  f_1274 x_1241 x_1238 -> end
  f_main_1271 n_1036 k_main_1199 x_1224 -> (map_1033 x_1224 (f_main_1272 n_1036 x_1224 k_main_1199))
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (x_1202 = n_1036) -> (k_main_1199 ())
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (not (x_1202 = n_1036)) -> (fail_1281 true k_main_1199)
  f_map_1270 x_1034 k_map_1167 x_1171 -> (k_map_1167 (1 + x_1171))
  f_zip_1267 x_1031 y_1032 x_1105 -> _|_
  f_zip_1268 x_1031 y_1032 x_1121 -> _|_
  f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 -> (k_zip_1102 (1 + x_1134))
  fail_1279 b k -> {fail} => (k ())
  fail_1280 b k -> {fail} => (k ())
  fail_1281 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1199 -> (zip_1030 n_1036 n_1036 (f_main_1271 n_1036 k_main_1199))
  map_1033 x_1034 k_map_1167 when (x_1034 = 0) -> (k_map_1167 x_1034)
  map_1033 x_1034 k_map_1167 when (not (x_1034 = 0)) -> (map_1033 (x_1034 - 1) (f_map_1270 x_1034 k_map_1167))
  zip_1030 x_1031 y_1032 k_zip_1102 when (x_1031 = 0) -> (br_zip_1275 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
  zip_1030 x_1031 y_1032 k_zip_1102 when (not (x_1031 = 0)) -> (br_zip_1277 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
Types:
  main_1266 : X
  fail_1279 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1280 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1281 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1033 : (int -> (int -> X) -> X)
  zip_1030 : (int -> int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1266 ... --> 
  f_1273 ... --> 
  main_1035 ... --> 
  zip_1030 [2/2] ... --> 
  br_zip_1277 [1/2] ... --> 
  fail_1280 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(156)[1]
  program:
    main_1266  | true = ((Random.int 0) f_1273)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | b_1276 = (k_zip_1102 x_1031)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | (not b_1276) = (fail_1279 true
                                                                    (f_zip_1267 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | b_1278 = (fail_1280 true
                                                                    (f_zip_1268 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | (not b_1278) = (zip_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    (
                                                                    y_1032 - 1)
                                                                    (
                                                                    f_zip_1269 x_1031
                                                                    y_1032
                                                                    k_zip_1102))
    f_1273 x_1241 | true = (main_1035 x_1241
                                      (f_1274 x_1241))
    f_1274 x_1241 x_1238 | true = end
    f_main_1271 n_1036 k_main_1199 x_1224 | true = (map_1033 x_1224
                                                             (f_main_1272 n_1036
                                                                    x_1224
                                                                    k_main_1199))
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (x_1202 = n_1036) = (
    k_main_1199 ())
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (not (x_1202 = n_1036)) = (
    fail_1281 true
              k_main_1199)
    f_map_1270 x_1034 k_map_1167 x_1171 | true = (k_map_1167 (1 + x_1171))
    f_zip_1267 x_1031 y_1032 x_1105 | true = bot
    f_zip_1268 x_1031 y_1032 x_1121 | true = bot
    f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 | true = (k_zip_1102 (
                                                                    1 + x_1134))
    fail_1279 b k | true = (fail ())
    fail_1280 b k | true = (fail ())
    fail_1281 b k | true = (fail ())
    main_1035 n_1036 k_main_1199 | true = (zip_1030 n_1036
                                                    n_1036
                                                    (f_main_1271 n_1036
                                                                 k_main_1199))
    map_1033 x_1034 k_map_1167 | (x_1034 = 0) = (k_map_1167 x_1034)
    map_1033 x_1034 k_map_1167 | (not (x_1034 = 0)) = (map_1033 (x_1034 - 1)
                                                                (f_map_1270 x_1034
                                                                    k_map_1167))
    zip_1030 x_1031 y_1032 k_zip_1102 | (x_1031 = 0) = (br_zip_1275 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    zip_1030 x_1031 y_1032 k_zip_1102 | (not (x_1031 = 0)) = (br_zip_1277 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    main_1266:X
    br_zip_1275:bool -> int -> int -> (int -> X) -> X
    br_zip_1277:bool -> int -> int -> (int -> X) -> X
    f_1273:int -> X
    f_1274:int -> unit -> X
    f_main_1271:int -> (unit -> X) -> int -> X
    f_main_1272:int -> int -> (unit -> X) -> int -> X
    f_map_1270:int -> (int -> X) -> int -> X
    f_zip_1267:int -> int -> unit -> X
    f_zip_1268:int -> int -> unit -> X
    f_zip_1269:int -> int -> (int -> X) -> int -> X
    fail_1279:bool -> (unit -> X) -> X
    fail_1280:bool -> (unit -> X) -> X
    fail_1281:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    map_1033:int -> (int -> X) -> X
    zip_1030:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1275,br_zip_1277,f_1273,f_1274,f_main_1271,f_main_1272,f_map_1270,f_zip_1267,f_zip_1268,f_zip_1269,main_1035
  counterexample: 0:0:0:1:0:0
  error traces:
    [true.nop(<f_1273@4:0> = var2)
     [true.(<main_1035@6:0> = <f_1273@4:0>)
      [true.((<zip_1030@8:0> = <main_1035@6:0>) && (<zip_1030@8:1> = <main_1035@6:0>))
       [(not (<zip_1030@8:0> = 0)).
        ((<br_zip_1277@11:0> = (<zip_1030@8:1> = 0)) &&
         ((<br_zip_1277@11:1> = <zip_1030@8:0>) && (<br_zip_1277@11:2> = <zip_1030@8:1>)))
        [<br_zip_1277@11:0>.(<fail_1280@14:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(157)[2]
    horn clauses:
      P[<fail_1280@14:0>](<fail_1280@14:0>:bool)|- bot
      
      P[<br_zip_1277@11:2>](true:bool,<br_zip_1277@11:1>:int,<br_zip_1277@11:2>:int), <fail_1280@14:0>
      |- P[<fail_1280@14:0>](<fail_1280@14:0>:bool)
      
      P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,<br_zip_1277@11:2>:int),
      ((<br_zip_1277@11:1> <> 0) && (<br_zip_1277@11:0> = (<br_zip_1277@11:2> = 0)))
      |- P[<br_zip_1277@11:2>](<br_zip_1277@11:0>:bool,<br_zip_1277@11:1>:int,
                               <br_zip_1277@11:2>:int)
      
      P[<main_1035@6:0>](<zip_1030@8:1>:int), (<zip_1030@8:1> = <zip_1030@8:0>)
      |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,<zip_1030@8:1>:int)
      
      P[<f_1273@4:0>](<main_1035@6:0>:int)|- P[<main_1035@6:0>](<main_1035@6:0>:int)
      
      |- P[<f_1273@4:0>](<f_1273@4:0>:int)
    call trees:
      <main_1266@1>
        <f_1273@4>
          <main_1035@6>
            <zip_1030@8>
              <br_zip_1277@11>
                <fail_1280@14>
    inlined horn clauses:
      P[<fail_1280@14:0>](<fail_1280@14:0>:bool)|- bot
      
      P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,0:int), ((<br_zip_1277@11:1> <> 0) && <fail_1280@14:0>)
      |- P[<fail_1280@14:0>](<fail_1280@14:0>:bool)
      
       (<zip_1030@8:1> = <zip_1030@8:0>) |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,
                                                              <zip_1030@8:1>:int)
    begin ParamSubstInfer.infer(896)[3]
      
    end ParamSubstInfer.infer(896)[3] (0.005998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(898)[3]
      
    end RefTypeInfer.elim_coeffs(898)[3] (0.001000 sec.)
    begin YhornInterface.solve(998)[3]
      begin HcSolver.solve_ub(999)[4]
        encoded:
          P[<fail_1280@14:0>](<fail_1280@14:0>:int)|- bot
          
          P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,0:int), ((<br_zip_1277@11:1> <> 0) && (<fail_1280@14:0> = 1))
          |- P[<fail_1280@14:0>](<fail_1280@14:0>:int)
          
           (<zip_1030@8:1> = <zip_1030@8:0>) |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,
                                                                  <zip_1030@8:1>:int)
        input to Yhorn:
          P[<fail_1280@14:0>](<fail_1280@14:0>:int)|- bot
          
          P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,var3:int),
          ((<br_zip_1277@11:1> <> 0) && ((var3 = 0) && (<fail_1280@14:0> = 1)))
          |- P[<fail_1280@14:0>](<fail_1280@14:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1280_sep_14_sep_0($6)) -> 1=0.
(($6-1=0) & ($7=0) & ($8<>0)) & (v_sep_zip_1030_sep_8_sep_1($8,$7)) -> v_sep_fail_1280_sep_14_sep_0($6).
$9-$10=0 -> v_sep_zip_1030_sep_8_sep_1($10,$9).


v_sep_fail_1280_sep_14_sep_0: X
v_sep_zip_1030_sep_8_sep_1: X
....Split disj [11] 0.133979
Reconstrcut: 3 **)

v_sep_fail_1280_sep_14_sep_0: (X) | (X)
v_sep_zip_1030_sep_8_sep_1: X
.....
v_sep_fail_1280_sep_14_sep_0: (X) | (X)
v_sep_zip_1030_sep_8_sep_1: X
.....Split conj [13] 0.137979
(Reconstrcut: 8 **)
v_sep_fail_1280_sep_14_sep_0: (X) | (X)
v_sep_zip_1030_sep_8_sep_1: (X) & (X)
.....
v_sep_fail_1280_sep_14_sep_0: (X) | (X)
v_sep_zip_1030_sep_8_sep_1: (X) & (X)
.....
v_sep_fail_1280_sep_14_sep_0: (X) | (X)
v_sep_zip_1030_sep_8_sep_1: (X) & (X)
.....(0=0) & (v_sep_fail_1280_sep_14_sep_0($6)) -> 1=0.
(($6-1=0) & ($7=0) & ($8<>0)) & (v_sep_zip_1030_sep_8_sep_1($8,$7)) -> v_sep_fail_1280_sep_14_sep_0($6).
$9-$10=0 -> v_sep_zip_1030_sep_8_sep_1($10,$9).

           (<zip_1030@8:1> = <zip_1030@8:0>) |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,
                                                                  <zip_1030@8:1>:int)
        solution:
          P[<fail_1280@14:0>]($11:bool) = false
          P[<zip_1030@8:1>]($14:int,$16:int) = ($16 = $14)
        
      end HcSolver.solve_ub(999)[4] (0.014998 sec.)
      begin HcSolver.check_validity(1096)[4]
        input:
          P[<fail_1280@14:0>](<fail_1280@14:0>:bool)|- bot
          
          P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,0:int), ((<br_zip_1277@11:1> <> 0) && <fail_1280@14:0>)
          |- P[<fail_1280@14:0>](<fail_1280@14:0>:bool)
          
           (<zip_1030@8:1> = <zip_1030@8:0>) |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,
                                                                  <zip_1030@8:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1096)[4] (0.000000 sec.)
      solution:
        P[<fail_1280@14:0>]($11:bool) = false
        P[<zip_1030@8:1>]($14:int,$16:int) = ($16 = $14)
    end YhornInterface.solve(998)[3] (0.014998 sec.)
    
  end RefTypeInfer.infer_etrs(157)[2] (0.024996 sec.)
  refinement types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:{v2:int | (v2 = v1)} -> (v3:int -> X) -> X
    br_zip_1277: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    fail_1280: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_zip_1275: var17:bool -> var16:int -> var15:int -> (var14:int -> X) -> X
    f_1274: var20:int -> var19:unit -> X
    f_main_1271: var25:int -> (var24:unit -> X) -> var22:int -> X
    f_main_1272: var31:int -> var30:int -> (var29:unit -> X) -> var27:int -> X
    f_map_1270: var36:int -> (var35:int -> X) -> var33:int -> X
    f_zip_1267: var40:int -> var39:int -> var38:unit -> X
    f_zip_1268: var44:int -> var43:int -> var42:unit -> X
    f_zip_1269: var50:int -> var49:int -> (var48:int -> X) -> var46:int -> X
    fail_1279: var54:bool -> (var53:unit -> X) -> X
    fail_1281: var58:bool -> (var57:unit -> X) -> X
    map_1033: var62:int -> (var61:int -> X) -> X
  abstraction types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int[v2 -> (v2 = v1)] -> (v3:int -> X) -> X
    br_zip_1277: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    fail_1280: v1:bool -> (v2:unit -> X) -> X
    br_zip_1275: var17:bool -> var16:int -> var15:int -> (var14:int -> X) -> X
    f_1274: var20:int -> var19:unit -> X
    f_main_1271: var25:int -> (var24:unit -> X) -> var22:int -> X
    f_main_1272: var31:int -> var30:int -> (var29:unit -> X) -> var27:int -> X
    f_map_1270: var36:int -> (var35:int -> X) -> var33:int -> X
    f_zip_1267: var40:int -> var39:int -> var38:unit -> X
    f_zip_1268: var44:int -> var43:int -> var42:unit -> X
    f_zip_1269: var50:int -> var49:int -> (var48:int -> X) -> var46:int -> X
    fail_1279: var54:bool -> (var53:unit -> X) -> X
    fail_1281: var58:bool -> (var57:unit -> X) -> X
    map_1033: var62:int -> (var61:int -> X) -> X
  
end AbsTypeInfer.refine(156)[1] (0.028996 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1266
  main_1266 -> (rand_int f_1273)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when b_1276 -> (k_zip_1102 x_1031)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when (not b_1276) -> (fail_1279 true (f_zip_1267 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when b_1278 -> (fail_1280 true (f_zip_1268 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when (not b_1278) ->
      (zip_1030 (x_1031 - 1) (y_1032 - 1) (f_zip_1269 x_1031 y_1032 k_zip_1102))
  f_1273 x_1241 -> (main_1035 x_1241 (f_1274 x_1241))
  f_1274 x_1241 x_1238 -> end
  f_main_1271 n_1036 k_main_1199 x_1224 -> (map_1033 x_1224 (f_main_1272 n_1036 x_1224 k_main_1199))
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (x_1202 = n_1036) -> (k_main_1199 ())
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (not (x_1202 = n_1036)) -> (fail_1281 true k_main_1199)
  f_map_1270 x_1034 k_map_1167 x_1171 -> (k_map_1167 (1 + x_1171))
  f_zip_1267 x_1031 y_1032 x_1105 -> _|_
  f_zip_1268 x_1031 y_1032 x_1121 -> _|_
  f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 -> (k_zip_1102 (1 + x_1134))
  fail_1279 b k -> {fail} => (k ())
  fail_1280 b k -> {fail} => (k ())
  fail_1281 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1199 -> (zip_1030 n_1036 n_1036 (f_main_1271 n_1036 k_main_1199))
  map_1033 x_1034 k_map_1167 when (x_1034 = 0) -> (k_map_1167 x_1034)
  map_1033 x_1034 k_map_1167 when (not (x_1034 = 0)) -> (map_1033 (x_1034 - 1) (f_map_1270 x_1034 k_map_1167))
  zip_1030 x_1031 y_1032 k_zip_1102 when (x_1031 = 0) -> (br_zip_1275 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
  zip_1030 x_1031 y_1032 k_zip_1102 when (not (x_1031 = 0)) -> (br_zip_1277 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
Types:
  main_1266 : X
  fail_1279 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1280 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1281 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1033 : (int -> (int -> X) -> X)
  zip_1030 : (x_1:int -> x_2:int[x_1 = x_2] -> (int -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1266 ... --> 
  f_1273 ... --> 
  main_1035 ... --> 
  zip_1030 [1/2] ... --> 
  br_zip_1275 [1/2] ... --> 
  f_main_1271 ... --> 
  map_1033 [1/2] ... --> 
  f_main_1272 [2/2] ... --> 
  fail_1281 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(1528)[1]
  program:
    main_1266  | true = ((Random.int 0) f_1273)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | b_1276 = (k_zip_1102 x_1031)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | (not b_1276) = (fail_1279 true
                                                                    (f_zip_1267 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | b_1278 = (fail_1280 true
                                                                    (f_zip_1268 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | (not b_1278) = (zip_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    (
                                                                    y_1032 - 1)
                                                                    (
                                                                    f_zip_1269 x_1031
                                                                    y_1032
                                                                    k_zip_1102))
    f_1273 x_1241 | true = (main_1035 x_1241
                                      (f_1274 x_1241))
    f_1274 x_1241 x_1238 | true = end
    f_main_1271 n_1036 k_main_1199 x_1224 | true = (map_1033 x_1224
                                                             (f_main_1272 n_1036
                                                                    x_1224
                                                                    k_main_1199))
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (x_1202 = n_1036) = (
    k_main_1199 ())
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (not (x_1202 = n_1036)) = (
    fail_1281 true
              k_main_1199)
    f_map_1270 x_1034 k_map_1167 x_1171 | true = (k_map_1167 (1 + x_1171))
    f_zip_1267 x_1031 y_1032 x_1105 | true = bot
    f_zip_1268 x_1031 y_1032 x_1121 | true = bot
    f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 | true = (k_zip_1102 (
                                                                    1 + x_1134))
    fail_1279 b k | true = (fail ())
    fail_1280 b k | true = (fail ())
    fail_1281 b k | true = (fail ())
    main_1035 n_1036 k_main_1199 | true = (zip_1030 n_1036
                                                    n_1036
                                                    (f_main_1271 n_1036
                                                                 k_main_1199))
    map_1033 x_1034 k_map_1167 | (x_1034 = 0) = (k_map_1167 x_1034)
    map_1033 x_1034 k_map_1167 | (not (x_1034 = 0)) = (map_1033 (x_1034 - 1)
                                                                (f_map_1270 x_1034
                                                                    k_map_1167))
    zip_1030 x_1031 y_1032 k_zip_1102 | (x_1031 = 0) = (br_zip_1275 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    zip_1030 x_1031 y_1032 k_zip_1102 | (not (x_1031 = 0)) = (br_zip_1277 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    main_1266:X
    br_zip_1275:bool -> int -> int -> (int -> X) -> X
    br_zip_1277:bool -> int -> int -> (int -> X) -> X
    f_1273:int -> X
    f_1274:int -> unit -> X
    f_main_1271:int -> (unit -> X) -> int -> X
    f_main_1272:int -> int -> (unit -> X) -> int -> X
    f_map_1270:int -> (int -> X) -> int -> X
    f_zip_1267:int -> int -> unit -> X
    f_zip_1268:int -> int -> unit -> X
    f_zip_1269:int -> int -> (int -> X) -> int -> X
    fail_1279:bool -> (unit -> X) -> X
    fail_1280:bool -> (unit -> X) -> X
    fail_1281:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    map_1033:int -> (int -> X) -> X
    zip_1030:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1275,br_zip_1277,f_1273,f_1274,f_main_1271,f_main_1272,f_map_1270,f_zip_1267,f_zip_1268,f_zip_1269,main_1035
  counterexample: 0:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1273@20:0> = var63)
     [true.(<main_1035@22:0> = <f_1273@20:0>)
      [true.((<zip_1030@24:0> = <main_1035@22:0>) && (<zip_1030@24:1> = <main_1035@22:0>))
       [(<zip_1030@24:0> = 0).
        ((<br_zip_1275@27:0> = (<zip_1030@24:1> = 0)) &&
         ((<br_zip_1275@27:1> = <zip_1030@24:0>) && (<br_zip_1275@27:2> = <zip_1030@24:1>)))
        [<br_zip_1275@27:0>.(<<br_zip_1275@27:3>@30:0> = <br_zip_1275@27:1>)
         [true.(<<zip_1030@24:2>@32:0> = <<br_zip_1275@27:3>@30:0>)
          [true.((<f_main_1271@34:0> = <main_1035@22:0>) && (<f_main_1271@34:2> = <<zip_1030@24:2>@32:0>))
           [true.(<map_1033@36:0> = <f_main_1271@34:2>)
            [(<map_1033@36:0> = 0).(<<map_1033@36:1>@39:0> = <map_1033@36:0>)
             [true.
              ((<f_main_1272@41:0> = <f_main_1271@34:0>) &&
               ((<f_main_1272@41:1> = <f_main_1271@34:2>) && (<f_main_1272@41:3> = <<map_1033@36:1>@39:0>)))
              [(not (<f_main_1272@41:3> = <f_main_1272@41:0>)).(<fail_1281@44:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(1529)[2]
    horn clauses:
      P[<fail_1281@44:0>](<fail_1281@44:0>:bool)|- bot
      
      P[<f_main_1272@41:3>](<f_main_1272@41:0>:int,<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
      ((<f_main_1272@41:3> <> <f_main_1272@41:0>) && <fail_1281@44:0>) |- P[<fail_1281@44:0>](
      <fail_1281@44:0>:bool)
      
      P[<f_main_1271@34:2>](<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
      P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int)|- P[<f_main_1272@41:3>](
      <f_main_1272@41:0>:int,<f_main_1272@41:1>:int,<f_main_1272@41:3>:int)
      
      P[<map_1033@36:0>](<map_1033@36:0>:int), ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
      |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
      
      P[<f_main_1271@34:2>](<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](<map_1033@36:0>:int)
      
      P[<main_1035@22:0>](<f_main_1271@34:0>:int),
      P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<f_main_1271@34:2>:int)|- P[<f_main_1271@34:2>](
      <f_main_1271@34:0>:int,<f_main_1271@34:2>:int)
      
      P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
      P[<<br_zip_1275@27:3>@30:0>]((<zip_1030@24:1> = 0):bool,<zip_1030@24:0>:int,<zip_1030@24:1>:int,<<zip_1030@24:2>@32:0>:int),
      (<zip_1030@24:0> = 0)
      |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                   <<zip_1030@24:2>@32:0>:int)
      
      P[<br_zip_1275@27:2>](<br_zip_1275@27:0>:bool,<br_zip_1275@27:1>:int,<br_zip_1275@27:2>:int),
      ((<<br_zip_1275@27:3>@30:0> = <br_zip_1275@27:1>) && <br_zip_1275@27:0>)
      |- P[<<br_zip_1275@27:3>@30:0>](<br_zip_1275@27:0>:bool,<br_zip_1275@27:1>:int,
                                      <br_zip_1275@27:2>:int,<<br_zip_1275@27:3>@30:0>:int)
      
      P[<zip_1030@24:1>](<br_zip_1275@27:1>:int,<br_zip_1275@27:2>:int),
      ((<br_zip_1275@27:1> = 0) && (<br_zip_1275@27:0> = (<br_zip_1275@27:2> = 0)))
      |- P[<br_zip_1275@27:2>](<br_zip_1275@27:0>:bool,<br_zip_1275@27:1>:int,
                               <br_zip_1275@27:2>:int)
      
      P[<main_1035@22:0>](<zip_1030@24:1>:int), (<zip_1030@24:1> = <zip_1030@24:0>)
      |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int)
      
      P[<f_1273@20:0>](<main_1035@22:0>:int)|- P[<main_1035@22:0>](<main_1035@22:0>:int)
      
      |- P[<f_1273@20:0>](<f_1273@20:0>:int)
    call trees:
      <main_1266@17>
        <f_1273@20>
          <main_1035@22>
            <zip_1030@24>
              <br_zip_1275@27>
              </<br_zip_1275@27:3>@30>
            </<zip_1030@24:2>@32>
            <f_main_1271@34>
              <map_1033@36>
              </<map_1033@36:1>@39>
              <f_main_1272@41>
                <fail_1281@44>
    inlined horn clauses:
      P[<fail_1281@44:0>](<fail_1281@44:0>:bool)|- bot
      
      P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
      P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
      ((<f_main_1272@41:3> <> <f_main_1272@41:0>) && <fail_1281@44:0>) |- P[<fail_1281@44:0>](
      <fail_1281@44:0>:bool)
      
      P[<map_1033@36:0>](<map_1033@36:0>:int), ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
      |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
      
      P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
      <map_1033@36:0>:int)
      
      P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
      ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
      |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                   <<zip_1030@24:2>@32:0>:int)
      
       (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                 <zip_1030@24:1>:int)
    begin ParamSubstInfer.infer(3282)[3]
      
    end ParamSubstInfer.infer(3282)[3] (0.011998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(3284)[3]
      
    end RefTypeInfer.elim_coeffs(3284)[3] (0.000000 sec.)
    begin YhornInterface.solve(3565)[3]
      begin HcSolver.solve_ub(3566)[4]
        encoded:
          P[<fail_1281@44:0>](<fail_1281@44:0>:int)|- bot
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
          P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
          ((<f_main_1272@41:3> <> <f_main_1272@41:0>) && (<fail_1281@44:0> = 1))
          |- P[<fail_1281@44:0>](<fail_1281@44:0>:int)
          
          P[<map_1033@36:0>](<map_1033@36:0>:int),
          ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
          |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
          <map_1033@36:0>:int)
          
          P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
          ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
          |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                       <<zip_1030@24:2>@32:0>:int)
          
           (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                    <zip_1030@24:1>:int)
        input to Yhorn:
          P[<fail_1281@44:0>](<fail_1281@44:0>:int)|- bot
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
          P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
          ((<f_main_1272@41:3> <> <f_main_1272@41:0>) && (<fail_1281@44:0> = 1))
          |- P[<fail_1281@44:0>](<fail_1281@44:0>:int)
          
          P[<map_1033@36:0>](<map_1033@36:0>:int),
          ((<<map_1033@36:1>@39:0> = <map_1033@36:0>) && (<map_1033@36:0> = 0))
          |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
          <map_1033@36:0>:int)
          
          P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
          ((<<zip_1030@24:2>@32:0> = <zip_1030@24:0>) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:0> = 0)))
          |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                       <<zip_1030@24:2>@32:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1281_sep_44_sep_0($130)) -> 1=0.
(($130-1=0) & ($131-$132<>0)) & (v_sep_map_1033_sep_36_sep_1_sep_39_sep_0($133,$131)) & (v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0($132,$132,$133)) -> v_sep_fail_1281_sep_44_sep_0($130).
(($134=0) & (-$134+$135=0)) & (v_sep_map_1033_sep_36_sep_0($134)) -> v_sep_map_1033_sep_36_sep_1_sep_39_sep_0($134,$135).
(0=0) & (v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0($136,$136,$134)) -> v_sep_map_1033_sep_36_sep_0($134).
(($137=0) & ($138=0) & (-$137+$139=0)) & (v_sep_zip_1030_sep_24_sep_1($137,$138)) -> v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0($137,$138,$139).
-$137+$138=0 -> v_sep_zip_1030_sep_24_sep_1($137,$138).


v_sep_fail_1281_sep_44_sep_0: X
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: X
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: X
.........Split disj [20] 0.178971
Reconstrcut: 3 **)

v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: X
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: X
.......
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: X
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: X
.......Split conj [22] 0.182971
(Reconstrcut: 8 **)
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: X
.........
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: X
.......Split conj [24] 0.18697
(Reconstrcut: 14 ***)
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
.............
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
.......
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
...........
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
............
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
.............(0=0) & (v_sep_fail_1281_sep_44_sep_0($130)) -> 1=0.
(($130-1=0) & ($131-$132<>0)) & (v_sep_map_1033_sep_36_sep_1_sep_39_sep_0($133,$131)) & (v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0($132,$132,$133)) -> v_sep_fail_1281_sep_44_sep_0($130).
(($134=0) & (-$134+$135=0)) & (v_sep_map_1033_sep_36_sep_0($134)) -> v_sep_map_1033_sep_36_sep_1_sep_39_sep_0($134,$135).
(0=0) & (v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0($136,$136,$134)) -> v_sep_map_1033_sep_36_sep_0($134).
(($137=0) & ($138=0) & (-$137+$139=0)) & (v_sep_zip_1030_sep_24_sep_1($137,$138)) -> v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0($137,$138,$139).
-$137+$138=0 -> v_sep_zip_1030_sep_24_sep_1($137,$138).

           (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                    <zip_1030@24:1>:int)
        solution:
          P[<fail_1281@44:0>]($140:bool) = false
          P[<map_1033@36:0>]($155:int) = true
          P[<<map_1033@36:1>@39:0>]($143:int,$145:int) = ($145 = 0)
          P[<zip_1030@24:1>]($158:int,$160:int) = true
          P[<<zip_1030@24:2>@32:0>]($148:int,$150:int,$152:int) = ($150 = 0)
        
      end HcSolver.solve_ub(3566)[4] (0.028996 sec.)
      begin HcSolver.check_validity(3776)[4]
        input:
          P[<fail_1281@44:0>](<fail_1281@44:0>:bool)|- bot
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
          P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
          ((<f_main_1272@41:3> <> <f_main_1272@41:0>) && <fail_1281@44:0>)
          |- P[<fail_1281@44:0>](<fail_1281@44:0>:bool)
          
          P[<map_1033@36:0>](<map_1033@36:0>:int),
          ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
          |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
          <map_1033@36:0>:int)
          
          P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
          ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
          |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                       <<zip_1030@24:2>@32:0>:int)
          
           (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                    <zip_1030@24:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3776)[4] (0.001000 sec.)
      solution:
        P[<fail_1281@44:0>]($140:bool) = false
        P[<map_1033@36:0>]($155:int) = true
        P[<<map_1033@36:1>@39:0>]($143:int,$145:int) = ($145 = 0)
        P[<zip_1030@24:1>]($158:int,$160:int) = true
        P[<<zip_1030@24:2>@32:0>]($148:int,$150:int,$152:int) = ($150 = 0)
    end YhornInterface.solve(3565)[3] (0.029996 sec.)
    
  end RefTypeInfer.infer_etrs(1529)[2] (0.049993 sec.)
  refinement types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | (v2 = 0)} -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: v1:int -> (v2:{v2:int | (v2 = 0)} -> X) -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_zip_1277: var77:bool -> var76:int -> var75:int -> (var74:int -> X) -> X
    f_1274: var80:int -> var79:unit -> X
    f_map_1270: var85:int -> (var84:int -> X) -> var82:int -> X
    f_zip_1267: var89:int -> var88:int -> var87:unit -> X
    f_zip_1268: var93:int -> var92:int -> var91:unit -> X
    f_zip_1269: var99:int -> var98:int -> (var97:int -> X) -> var95:int -> X
    fail_1279: var103:bool -> (var102:unit -> X) -> X
    fail_1280: var107:bool -> (var106:unit -> X) -> X
  abstraction types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:int[v3 -> (v2 = 0)] -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: v1:int -> (v2:int[v2 -> (v2 = 0)] -> X) -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:bool -> (v2:unit -> X) -> X
    br_zip_1277: var77:bool -> var76:int -> var75:int -> (var74:int -> X) -> X
    f_1274: var80:int -> var79:unit -> X
    f_map_1270: var85:int -> (var84:int -> X) -> var82:int -> X
    f_zip_1267: var89:int -> var88:int -> var87:unit -> X
    f_zip_1268: var93:int -> var92:int -> var91:unit -> X
    f_zip_1269: var99:int -> var98:int -> (var97:int -> X) -> var95:int -> X
    fail_1279: var103:bool -> (var102:unit -> X) -> X
    fail_1280: var107:bool -> (var106:unit -> X) -> X
  
end AbsTypeInfer.refine(1528)[1] (0.051992 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1266
  main_1266 -> (rand_int f_1273)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when b_1276 -> (k_zip_1102 x_1031)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when (not b_1276) -> (fail_1279 true (f_zip_1267 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when b_1278 -> (fail_1280 true (f_zip_1268 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when (not b_1278) ->
      (zip_1030 (x_1031 - 1) (y_1032 - 1) (f_zip_1269 x_1031 y_1032 k_zip_1102))
  f_1273 x_1241 -> (main_1035 x_1241 (f_1274 x_1241))
  f_1274 x_1241 x_1238 -> end
  f_main_1271 n_1036 k_main_1199 x_1224 -> (map_1033 x_1224 (f_main_1272 n_1036 x_1224 k_main_1199))
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (x_1202 = n_1036) -> (k_main_1199 ())
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (not (x_1202 = n_1036)) -> (fail_1281 true k_main_1199)
  f_map_1270 x_1034 k_map_1167 x_1171 -> (k_map_1167 (1 + x_1171))
  f_zip_1267 x_1031 y_1032 x_1105 -> _|_
  f_zip_1268 x_1031 y_1032 x_1121 -> _|_
  f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 -> (k_zip_1102 (1 + x_1134))
  fail_1279 b k -> {fail} => (k ())
  fail_1280 b k -> {fail} => (k ())
  fail_1281 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1199 -> (zip_1030 n_1036 n_1036 (f_main_1271 n_1036 k_main_1199))
  map_1033 x_1034 k_map_1167 when (x_1034 = 0) -> (k_map_1167 x_1034)
  map_1033 x_1034 k_map_1167 when (not (x_1034 = 0)) -> (map_1033 (x_1034 - 1) (f_map_1270 x_1034 k_map_1167))
  zip_1030 x_1031 y_1032 k_zip_1102 when (x_1031 = 0) -> (br_zip_1275 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
  zip_1030 x_1031 y_1032 k_zip_1102 when (not (x_1031 = 0)) -> (br_zip_1277 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
Types:
  main_1266 : X
  fail_1279 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1280 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1281 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1033 : (int -> (x_3:int[x_3 = 0] -> X) -> X)
  zip_1030 : (x_1:int -> x_2:int[x_1 = x_2] -> (int[x_2 = 0] -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1266 ... --> 
  f_1273 ... --> 
  main_1035 ... --> 
  zip_1030 [1/2] ... --> 
  br_zip_1275 [1/2] ... --> 
  f_main_1271 ... --> 
  map_1033 [2/2] ... --> 
  map_1033 [1/2] ... --> 
  f_map_1270 ... --> 
  f_main_1272 [2/2] ... --> 
  fail_1281 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(4589)[1]
  program:
    main_1266  | true = ((Random.int 0) f_1273)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | b_1276 = (k_zip_1102 x_1031)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | (not b_1276) = (fail_1279 true
                                                                    (f_zip_1267 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | b_1278 = (fail_1280 true
                                                                    (f_zip_1268 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | (not b_1278) = (zip_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    (
                                                                    y_1032 - 1)
                                                                    (
                                                                    f_zip_1269 x_1031
                                                                    y_1032
                                                                    k_zip_1102))
    f_1273 x_1241 | true = (main_1035 x_1241
                                      (f_1274 x_1241))
    f_1274 x_1241 x_1238 | true = end
    f_main_1271 n_1036 k_main_1199 x_1224 | true = (map_1033 x_1224
                                                             (f_main_1272 n_1036
                                                                    x_1224
                                                                    k_main_1199))
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (x_1202 = n_1036) = (
    k_main_1199 ())
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (not (x_1202 = n_1036)) = (
    fail_1281 true
              k_main_1199)
    f_map_1270 x_1034 k_map_1167 x_1171 | true = (k_map_1167 (1 + x_1171))
    f_zip_1267 x_1031 y_1032 x_1105 | true = bot
    f_zip_1268 x_1031 y_1032 x_1121 | true = bot
    f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 | true = (k_zip_1102 (
                                                                    1 + x_1134))
    fail_1279 b k | true = (fail ())
    fail_1280 b k | true = (fail ())
    fail_1281 b k | true = (fail ())
    main_1035 n_1036 k_main_1199 | true = (zip_1030 n_1036
                                                    n_1036
                                                    (f_main_1271 n_1036
                                                                 k_main_1199))
    map_1033 x_1034 k_map_1167 | (x_1034 = 0) = (k_map_1167 x_1034)
    map_1033 x_1034 k_map_1167 | (not (x_1034 = 0)) = (map_1033 (x_1034 - 1)
                                                                (f_map_1270 x_1034
                                                                    k_map_1167))
    zip_1030 x_1031 y_1032 k_zip_1102 | (x_1031 = 0) = (br_zip_1275 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    zip_1030 x_1031 y_1032 k_zip_1102 | (not (x_1031 = 0)) = (br_zip_1277 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    main_1266:X
    br_zip_1275:bool -> int -> int -> (int -> X) -> X
    br_zip_1277:bool -> int -> int -> (int -> X) -> X
    f_1273:int -> X
    f_1274:int -> unit -> X
    f_main_1271:int -> (unit -> X) -> int -> X
    f_main_1272:int -> int -> (unit -> X) -> int -> X
    f_map_1270:int -> (int -> X) -> int -> X
    f_zip_1267:int -> int -> unit -> X
    f_zip_1268:int -> int -> unit -> X
    f_zip_1269:int -> int -> (int -> X) -> int -> X
    fail_1279:bool -> (unit -> X) -> X
    fail_1280:bool -> (unit -> X) -> X
    fail_1281:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    map_1033:int -> (int -> X) -> X
    zip_1030:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1275,br_zip_1277,f_1273,f_1274,f_main_1271,f_main_1272,f_map_1270,f_zip_1267,f_zip_1268,f_zip_1269,main_1035
  counterexample: 0:0:0:0:0:0:1:0:0:1:0
  error traces:
    [true.nop(<f_1273@50:0> = var108)
     [true.(<main_1035@52:0> = <f_1273@50:0>)
      [true.((<zip_1030@54:0> = <main_1035@52:0>) && (<zip_1030@54:1> = <main_1035@52:0>))
       [(<zip_1030@54:0> = 0).
        ((<br_zip_1275@57:0> = (<zip_1030@54:1> = 0)) &&
         ((<br_zip_1275@57:1> = <zip_1030@54:0>) && (<br_zip_1275@57:2> = <zip_1030@54:1>)))
        [<br_zip_1275@57:0>.(<<br_zip_1275@57:3>@60:0> = <br_zip_1275@57:1>)
         [true.(<<zip_1030@54:2>@62:0> = <<br_zip_1275@57:3>@60:0>)
          [true.((<f_main_1271@64:0> = <main_1035@52:0>) && (<f_main_1271@64:2> = <<zip_1030@54:2>@62:0>))
           [true.(<map_1033@66:0> = <f_main_1271@64:2>)
            [(not (<map_1033@66:0> = 0)).(<map_1033@69:0> = (<map_1033@66:0> - 1))
             [(<map_1033@69:0> = 0).(<<map_1033@69:1>@72:0> = <map_1033@69:0>)
              [true.((<f_map_1270@74:0> = <map_1033@66:0>) && (<f_map_1270@74:2> = <<map_1033@69:1>@72:0>))
               [true.(<<f_map_1270@74:1>@76:0> = (1 + <f_map_1270@74:2>))
                [true.(<<map_1033@66:1>@78:0> = <<f_map_1270@74:1>@76:0>)
                 [true.
                  ((<f_main_1272@80:0> = <f_main_1271@64:0>) &&
                   ((<f_main_1272@80:1> = <f_main_1271@64:2>) && (<f_main_1272@80:3> = <<map_1033@66:1>@78:0>)))
                  [(not (<f_main_1272@80:3> = <f_main_1272@80:0>)).(<fail_1281@83:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(4590)[2]
    horn clauses:
      P[<fail_1281@83:0>](<fail_1281@83:0>:bool)|- bot
      
      P[<f_main_1272@80:3>](<f_main_1272@80:0>:int,<f_main_1272@80:1>:int,<f_main_1272@80:3>:int),
      ((<f_main_1272@80:3> <> <f_main_1272@80:0>) && <fail_1281@83:0>) |- P[<fail_1281@83:0>](
      <fail_1281@83:0>:bool)
      
      P[<f_main_1271@64:2>](<f_main_1272@80:0>:int,<f_main_1272@80:1>:int),
      P[<<map_1033@66:1>@78:0>](<f_main_1272@80:1>:int,<f_main_1272@80:3>:int)|- P[<f_main_1272@80:3>](
      <f_main_1272@80:0>:int,<f_main_1272@80:1>:int,<f_main_1272@80:3>:int)
      
      P[<map_1033@66:0>](<map_1033@66:0>:int),
      P[<<f_map_1270@74:1>@76:0>](<map_1033@66:0>:int,<<map_1033@66:1>@78:0>:int), (
      <map_1033@66:0> <> 0) |- P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,
                                                         <<map_1033@66:1>@78:0>:int)
      
      P[<f_map_1270@74:2>](<f_map_1270@74:0>:int,(-1 + <<f_map_1270@74:1>@76:0>):int)|- P[<<f_map_1270@74:1>@76:0>](
      <f_map_1270@74:0>:int,<<f_map_1270@74:1>@76:0>:int)
      
      P[<map_1033@66:0>](<f_map_1270@74:0>:int),
      P[<<map_1033@69:1>@72:0>]((-1 + <f_map_1270@74:0>):int,<f_map_1270@74:2>:int), (
      <f_map_1270@74:0> <> 0) |- P[<f_map_1270@74:2>](<f_map_1270@74:0>:int,
                                                      <f_map_1270@74:2>:int)
      
      P[<map_1033@69:0>](<map_1033@69:0>:int), ((<map_1033@69:0> = 0) && (<<map_1033@69:1>@72:0> = <map_1033@69:0>))
      |- P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int)
      
      P[<map_1033@66:0>]((1 + <map_1033@69:0>):int), ((1 + <map_1033@69:0>) <> 0)
      |- P[<map_1033@69:0>](<map_1033@69:0>:int)
      
      P[<f_main_1271@64:2>](<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](<map_1033@66:0>:int)
      
      P[<main_1035@52:0>](<f_main_1271@64:0>:int),
      P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<f_main_1271@64:2>:int)|- P[<f_main_1271@64:2>](
      <f_main_1271@64:0>:int,<f_main_1271@64:2>:int)
      
      P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
      P[<<br_zip_1275@57:3>@60:0>]((<zip_1030@54:1> = 0):bool,<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int),
      (<zip_1030@54:0> = 0)
      |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                   <<zip_1030@54:2>@62:0>:int)
      
      P[<br_zip_1275@57:2>](<br_zip_1275@57:0>:bool,<br_zip_1275@57:1>:int,<br_zip_1275@57:2>:int),
      ((<<br_zip_1275@57:3>@60:0> = <br_zip_1275@57:1>) && <br_zip_1275@57:0>)
      |- P[<<br_zip_1275@57:3>@60:0>](<br_zip_1275@57:0>:bool,<br_zip_1275@57:1>:int,
                                      <br_zip_1275@57:2>:int,<<br_zip_1275@57:3>@60:0>:int)
      
      P[<zip_1030@54:1>](<br_zip_1275@57:1>:int,<br_zip_1275@57:2>:int),
      ((<br_zip_1275@57:1> = 0) && (<br_zip_1275@57:0> = (<br_zip_1275@57:2> = 0)))
      |- P[<br_zip_1275@57:2>](<br_zip_1275@57:0>:bool,<br_zip_1275@57:1>:int,
                               <br_zip_1275@57:2>:int)
      
      P[<main_1035@52:0>](<zip_1030@54:1>:int), (<zip_1030@54:1> = <zip_1030@54:0>)
      |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int)
      
      P[<f_1273@50:0>](<main_1035@52:0>:int)|- P[<main_1035@52:0>](<main_1035@52:0>:int)
      
      |- P[<f_1273@50:0>](<f_1273@50:0>:int)
    call trees:
      <main_1266@47>
        <f_1273@50>
          <main_1035@52>
            <zip_1030@54>
              <br_zip_1275@57>
              </<br_zip_1275@57:3>@60>
            </<zip_1030@54:2>@62>
            <f_main_1271@64>
              <map_1033@66>
                <map_1033@69>
                </<map_1033@69:1>@72>
                <f_map_1270@74>
                </<f_map_1270@74:1>@76>
              </<map_1033@66:1>@78>
              <f_main_1272@80>
                <fail_1281@83>
    inlined horn clauses:
      P[<fail_1281@83:0>](<fail_1281@83:0>:bool)|- bot
      
      P[<<zip_1030@54:2>@62:0>](<f_main_1272@80:0>:int,<f_main_1272@80:0>:int,<f_main_1272@80:1>:int),
      P[<<map_1033@66:1>@78:0>](<f_main_1272@80:1>:int,<f_main_1272@80:3>:int),
      ((<f_main_1272@80:3> <> <f_main_1272@80:0>) && <fail_1281@83:0>) |- P[<fail_1281@83:0>](
      <fail_1281@83:0>:bool)
      
      P[<map_1033@66:0>](<map_1033@66:0>:int),
      P[<<map_1033@69:1>@72:0>]((-1 + <map_1033@66:0>):int,(-1 + <<map_1033@66:1>@78:0>):int), (
      <map_1033@66:0> <> 0) |- P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,
                                                         <<map_1033@66:1>@78:0>:int)
      
      P[<map_1033@69:0>](<map_1033@69:0>:int), ((<map_1033@69:0> = 0) && (<<map_1033@69:1>@72:0> = <map_1033@69:0>))
      |- P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int)
      
      P[<map_1033@66:0>]((1 + <map_1033@69:0>):int), ((1 + <map_1033@69:0>) <> 0)
      |- P[<map_1033@69:0>](<map_1033@69:0>:int)
      
      P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](
      <map_1033@66:0>:int)
      
      P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
      ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
      |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                   <<zip_1030@54:2>@62:0>:int)
      
       (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                 <zip_1030@54:1>:int)
    begin ParamSubstInfer.infer(6856)[3]
      
    end ParamSubstInfer.infer(6856)[3] (0.015997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(6858)[3]
      
    end RefTypeInfer.elim_coeffs(6858)[3] (0.002000 sec.)
    begin YhornInterface.solve(7193)[3]
      begin HcSolver.solve_ub(7194)[4]
        encoded:
          P[<fail_1281@83:0>](<fail_1281@83:0>:int)|- bot
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1272@80:0>:int,<f_main_1272@80:0>:int,<f_main_1272@80:1>:int),
          P[<<map_1033@66:1>@78:0>](<f_main_1272@80:1>:int,<f_main_1272@80:3>:int),
          ((<f_main_1272@80:3> <> <f_main_1272@80:0>) && (<fail_1281@83:0> = 1))
          |- P[<fail_1281@83:0>](<fail_1281@83:0>:int)
          
          P[<map_1033@66:0>](<map_1033@66:0>:int),
          P[<<map_1033@69:1>@72:0>]((-1 + <map_1033@66:0>):int,(-1 + <<map_1033@66:1>@78:0>):int),
          (<map_1033@66:0> <> 0) |- P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,
                                                              <<map_1033@66:1>@78:0>:int)
          
          P[<map_1033@69:0>](<map_1033@69:0>:int),
          ((<map_1033@69:0> = 0) && (<<map_1033@69:1>@72:0> = <map_1033@69:0>))
          |- P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int)
          
          P[<map_1033@66:0>]((1 + <map_1033@69:0>):int), ((1 + <map_1033@69:0>) <> 0)
          |- P[<map_1033@69:0>](<map_1033@69:0>:int)
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](
          <map_1033@66:0>:int)
          
          P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
          ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
          |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                       <<zip_1030@54:2>@62:0>:int)
          
           (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                    <zip_1030@54:1>:int)
        input to Yhorn:
          P[<fail_1281@83:0>](<fail_1281@83:0>:int)|- bot
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1272@80:0>:int,<f_main_1272@80:0>:int,<f_main_1272@80:1>:int),
          P[<<map_1033@66:1>@78:0>](<f_main_1272@80:1>:int,<f_main_1272@80:3>:int),
          ((<f_main_1272@80:3> <> <f_main_1272@80:0>) && (<fail_1281@83:0> = 1))
          |- P[<fail_1281@83:0>](<fail_1281@83:0>:int)
          
          P[<map_1033@66:0>](<map_1033@66:0>:int),
          P[<<map_1033@69:1>@72:0>](var109:int,var110:int),
          (((1 + var110) = <<map_1033@66:1>@78:0>) && (((1 + var109) = <map_1033@66:0>) && (<map_1033@66:0> <> 0)))
          |- P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,<<map_1033@66:1>@78:0>:int)
          
          P[<map_1033@69:0>](<map_1033@69:0>:int),
          ((<<map_1033@69:1>@72:0> = <map_1033@69:0>) && (<map_1033@69:0> = 0))
          |- P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int)
          
          P[<map_1033@66:0>](var111:int), ((var111 = (1 + <map_1033@69:0>)) && ((1 + <map_1033@69:0>) <> 0))
          |- P[<map_1033@69:0>](<map_1033@69:0>:int)
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](
          <map_1033@66:0>:int)
          
          P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
          ((<<zip_1030@54:2>@62:0> = <zip_1030@54:0>) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:0> = 0)))
          |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                       <<zip_1030@54:2>@62:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1281_sep_83_sep_0($420)) -> 1=0.
(($420-1=0) & ($421-$422<>0)) & (v_sep_map_1033_sep_66_sep_1_sep_78_sep_0($423,$421)) & (v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0($422,$422,$423)) -> v_sep_fail_1281_sep_83_sep_0($420).
(($424<>0) & (-$424+$425+1=0) & ($426-$427+1=0)) & (v_sep_map_1033_sep_69_sep_1_sep_72_sep_0($425,$426)) & (v_sep_map_1033_sep_66_sep_0($424)) -> v_sep_map_1033_sep_66_sep_1_sep_78_sep_0($424,$427).
(($428=0) & (-$428+$429=0)) & (v_sep_map_1033_sep_69_sep_0($428)) -> v_sep_map_1033_sep_69_sep_1_sep_72_sep_0($428,$429).
(($428+1<>0) & (-$428+$430-1=0)) & (v_sep_map_1033_sep_66_sep_0($430)) -> v_sep_map_1033_sep_69_sep_0($428).
(0=0) & (v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0($431,$431,$424)) -> v_sep_map_1033_sep_66_sep_0($424).
(($432=0) & ($433=0) & (-$432+$434=0)) & (v_sep_zip_1030_sep_54_sep_1($432,$433)) -> v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0($432,$433,$434).
-$432+$433=0 -> v_sep_zip_1030_sep_54_sep_1($432,$433).


v_sep_fail_1281_sep_83_sep_0: X
v_sep_map_1033_sep_66_sep_0: X
v_sep_map_1033_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1033_sep_69_sep_0: X
v_sep_map_1033_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1030_sep_54_sep_1: X
v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0: X
...............
v_sep_fail_1281_sep_83_sep_0: X
v_sep_map_1033_sep_66_sep_0: X
v_sep_map_1033_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1033_sep_69_sep_0: X
v_sep_map_1033_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1030_sep_54_sep_1: X
v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0: X
......
v_sep_fail_1281_sep_83_sep_0: X
v_sep_map_1033_sep_66_sep_0: X
v_sep_map_1033_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1033_sep_69_sep_0: X
v_sep_map_1033_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1030_sep_54_sep_1: X
v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0: X
...........
v_sep_fail_1281_sep_83_sep_0: X
v_sep_map_1033_sep_66_sep_0: X
v_sep_map_1033_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1033_sep_69_sep_0: X
v_sep_map_1033_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1030_sep_54_sep_1: X
v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0: X
.............
v_sep_fail_1281_sep_83_sep_0: X
v_sep_map_1033_sep_66_sep_0: X
v_sep_map_1033_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1033_sep_69_sep_0: X
v_sep_map_1033_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1030_sep_54_sep_1: X
v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0: X
...............(0=0) & (v_sep_fail_1281_sep_83_sep_0($420)) -> 1=0.
(($420-1=0) & ($421-$422<>0)) & (v_sep_map_1033_sep_66_sep_1_sep_78_sep_0($423,$421)) & (v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0($422,$422,$423)) -> v_sep_fail_1281_sep_83_sep_0($420).
(($424<>0) & (-$424+$425+1=0) & ($426-$427+1=0)) & (v_sep_map_1033_sep_69_sep_1_sep_72_sep_0($425,$426)) & (v_sep_map_1033_sep_66_sep_0($424)) -> v_sep_map_1033_sep_66_sep_1_sep_78_sep_0($424,$427).
(($428=0) & (-$428+$429=0)) & (v_sep_map_1033_sep_69_sep_0($428)) -> v_sep_map_1033_sep_69_sep_1_sep_72_sep_0($428,$429).
(($428+1<>0) & (-$428+$430-1=0)) & (v_sep_map_1033_sep_66_sep_0($430)) -> v_sep_map_1033_sep_69_sep_0($428).
(0=0) & (v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0($431,$431,$424)) -> v_sep_map_1033_sep_66_sep_0($424).
(($432=0) & ($433=0) & (-$432+$434=0)) & (v_sep_zip_1030_sep_54_sep_1($432,$433)) -> v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0($432,$433,$434).
-$432+$433=0 -> v_sep_zip_1030_sep_54_sep_1($432,$433).

           (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                    <zip_1030@54:1>:int)
        solution:
          P[<fail_1281@83:0>]($435:bool) = false
          P[<map_1033@66:0>]($455:int) = ($455 <= 0)
          P[<<map_1033@66:1>@78:0>]($438:int,$440:int) = (3 <= $438)
          P[<map_1033@69:0>]($458:int) = ((1 + $458) <= 0)
          P[<<map_1033@69:1>@72:0>]($450:int,$452:int) = (1 <= (2 * $450))
          P[<zip_1030@54:1>]($461:int,$463:int) = true
          P[<<zip_1030@54:2>@62:0>]($443:int,$445:int,$447:int) = ($447 <= 0)
        
      end HcSolver.solve_ub(7194)[4] (0.032995 sec.)
      begin HcSolver.check_validity(7550)[4]
        input:
          P[<fail_1281@83:0>](<fail_1281@83:0>:bool)|- bot
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1272@80:0>:int,<f_main_1272@80:0>:int,<f_main_1272@80:1>:int),
          P[<<map_1033@66:1>@78:0>](<f_main_1272@80:1>:int,<f_main_1272@80:3>:int),
          ((<f_main_1272@80:3> <> <f_main_1272@80:0>) && <fail_1281@83:0>)
          |- P[<fail_1281@83:0>](<fail_1281@83:0>:bool)
          
          P[<map_1033@66:0>](<map_1033@66:0>:int),
          P[<<map_1033@69:1>@72:0>]((-1 + <map_1033@66:0>):int,(-1 + <<map_1033@66:1>@78:0>):int),
          (<map_1033@66:0> <> 0) |- P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,
                                                              <<map_1033@66:1>@78:0>:int)
          
          P[<map_1033@69:0>](<map_1033@69:0>:int),
          ((<map_1033@69:0> = 0) && (<<map_1033@69:1>@72:0> = <map_1033@69:0>))
          |- P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int)
          
          P[<map_1033@66:0>]((1 + <map_1033@69:0>):int), ((1 + <map_1033@69:0>) <> 0)
          |- P[<map_1033@69:0>](<map_1033@69:0>:int)
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](
          <map_1033@66:0>:int)
          
          P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
          ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
          |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                       <<zip_1030@54:2>@62:0>:int)
          
           (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                    <zip_1030@54:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(7550)[4] (0.001999 sec.)
      solution:
        P[<fail_1281@83:0>]($435:bool) = false
        P[<map_1033@66:0>]($455:int) = ($455 <= 0)
        P[<<map_1033@66:1>@78:0>]($438:int,$440:int) = (3 <= $438)
        P[<map_1033@69:0>]($458:int) = ((1 + $458) <= 0)
        P[<<map_1033@69:1>@72:0>]($450:int,$452:int) = (1 <= (2 * $450))
        P[<zip_1030@54:1>]($461:int,$463:int) = true
        P[<<zip_1030@54:2>@62:0>]($443:int,$445:int,$447:int) = ($447 <= 0)
    end YhornInterface.solve(7193)[3] (0.034994 sec.)
    
  end RefTypeInfer.infer_etrs(4590)[2] (0.060990 sec.)
  refinement types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | (v3 <= 0)} -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: v1:{v1:int | (v1 <= 0)} -> (v2:{v2:int | (3 <= v1)} -> X) -> X
    map_1033: v1:{v1:int | ((1 + v1) <= 0)} -> (v2:{v2:int | (1 <= (2 * v1))} -> X) -> X
    f_map_1270: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_zip_1277: var125:bool -> var124:int -> var123:int -> (var122:int -> X) -> X
    f_1274: var128:int -> var127:unit -> X
    f_zip_1267: var132:int -> var131:int -> var130:unit -> X
    f_zip_1268: var136:int -> var135:int -> var134:unit -> X
    f_zip_1269: var142:int -> var141:int -> (var140:int -> X) -> var138:int -> X
    fail_1279: var146:bool -> (var145:unit -> X) -> X
    fail_1280: var150:bool -> (var149:unit -> X) -> X
  abstraction types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:int[v3 -> (v3 <= 0)] -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: var151:int[var151 -> (var151 <= 0),
                         var151 -> ((1 + var151) <= 0)] ->
              (var152:int[var152 -> (3 <= var151),
                          var152 -> (1 <= (2 * var151))] -> X) -> X
    f_map_1270: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:bool -> (v2:unit -> X) -> X
    br_zip_1277: var125:bool -> var124:int -> var123:int -> (var122:int -> X) -> X
    f_1274: var128:int -> var127:unit -> X
    f_zip_1267: var132:int -> var131:int -> var130:unit -> X
    f_zip_1268: var136:int -> var135:int -> var134:unit -> X
    f_zip_1269: var142:int -> var141:int -> (var140:int -> X) -> var138:int -> X
    fail_1279: var146:bool -> (var145:unit -> X) -> X
    fail_1280: var150:bool -> (var149:unit -> X) -> X
  
end AbsTypeInfer.refine(4589)[1] (0.064990 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1266
  main_1266 -> (rand_int f_1273)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when b_1276 -> (k_zip_1102 x_1031)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when (not b_1276) -> (fail_1279 true (f_zip_1267 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when b_1278 -> (fail_1280 true (f_zip_1268 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when (not b_1278) ->
      (zip_1030 (x_1031 - 1) (y_1032 - 1) (f_zip_1269 x_1031 y_1032 k_zip_1102))
  f_1273 x_1241 -> (main_1035 x_1241 (f_1274 x_1241))
  f_1274 x_1241 x_1238 -> end
  f_main_1271 n_1036 k_main_1199 x_1224 -> (map_1033 x_1224 (f_main_1272 n_1036 x_1224 k_main_1199))
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (x_1202 = n_1036) -> (k_main_1199 ())
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (not (x_1202 = n_1036)) -> (fail_1281 true k_main_1199)
  f_map_1270 x_1034 k_map_1167 x_1171 -> (k_map_1167 (1 + x_1171))
  f_zip_1267 x_1031 y_1032 x_1105 -> _|_
  f_zip_1268 x_1031 y_1032 x_1121 -> _|_
  f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 -> (k_zip_1102 (1 + x_1134))
  fail_1279 b k -> {fail} => (k ())
  fail_1280 b k -> {fail} => (k ())
  fail_1281 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1199 -> (zip_1030 n_1036 n_1036 (f_main_1271 n_1036 k_main_1199))
  map_1033 x_1034 k_map_1167 when (x_1034 = 0) -> (k_map_1167 x_1034)
  map_1033 x_1034 k_map_1167 when (not (x_1034 = 0)) -> (map_1033 (x_1034 - 1) (f_map_1270 x_1034 k_map_1167))
  zip_1030 x_1031 y_1032 k_zip_1102 when (x_1031 = 0) -> (br_zip_1275 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
  zip_1030 x_1031 y_1032 k_zip_1102 when (not (x_1031 = 0)) -> (br_zip_1277 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
Types:
  main_1266 : X
  fail_1279 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1280 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1281 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1033 : (x_1:int[x_1 <= -1; x_1 <= 0] -> (x_3:int[2*x_1 >= 1; x_1 >= 3; x_3 = 0] -> X) -> X)
  zip_1030 : (x_1:int -> x_2:int[x_1 = x_2] -> (x_4:int[x_4 <= 0; x_2 = 0] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1266 ... --> 
  f_1273 ... --> 
  main_1035 ... --> 
  zip_1030 [2/2] ... --> 
  br_zip_1277 [2/2] ... --> 
  zip_1030 [1/2] ... --> 
  br_zip_1275 [1/2] ... --> 
  f_zip_1269 ... --> 
  f_main_1271 ... --> 
  map_1033 [1/2] ... --> 
  f_main_1272 [2/2] ... --> 
  fail_1281 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(9276)[1]
  program:
    main_1266  | true = ((Random.int 0) f_1273)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | b_1276 = (k_zip_1102 x_1031)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | (not b_1276) = (fail_1279 true
                                                                    (f_zip_1267 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | b_1278 = (fail_1280 true
                                                                    (f_zip_1268 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | (not b_1278) = (zip_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    (
                                                                    y_1032 - 1)
                                                                    (
                                                                    f_zip_1269 x_1031
                                                                    y_1032
                                                                    k_zip_1102))
    f_1273 x_1241 | true = (main_1035 x_1241
                                      (f_1274 x_1241))
    f_1274 x_1241 x_1238 | true = end
    f_main_1271 n_1036 k_main_1199 x_1224 | true = (map_1033 x_1224
                                                             (f_main_1272 n_1036
                                                                    x_1224
                                                                    k_main_1199))
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (x_1202 = n_1036) = (
    k_main_1199 ())
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (not (x_1202 = n_1036)) = (
    fail_1281 true
              k_main_1199)
    f_map_1270 x_1034 k_map_1167 x_1171 | true = (k_map_1167 (1 + x_1171))
    f_zip_1267 x_1031 y_1032 x_1105 | true = bot
    f_zip_1268 x_1031 y_1032 x_1121 | true = bot
    f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 | true = (k_zip_1102 (
                                                                    1 + x_1134))
    fail_1279 b k | true = (fail ())
    fail_1280 b k | true = (fail ())
    fail_1281 b k | true = (fail ())
    main_1035 n_1036 k_main_1199 | true = (zip_1030 n_1036
                                                    n_1036
                                                    (f_main_1271 n_1036
                                                                 k_main_1199))
    map_1033 x_1034 k_map_1167 | (x_1034 = 0) = (k_map_1167 x_1034)
    map_1033 x_1034 k_map_1167 | (not (x_1034 = 0)) = (map_1033 (x_1034 - 1)
                                                                (f_map_1270 x_1034
                                                                    k_map_1167))
    zip_1030 x_1031 y_1032 k_zip_1102 | (x_1031 = 0) = (br_zip_1275 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    zip_1030 x_1031 y_1032 k_zip_1102 | (not (x_1031 = 0)) = (br_zip_1277 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    main_1266:X
    br_zip_1275:bool -> int -> int -> (int -> X) -> X
    br_zip_1277:bool -> int -> int -> (int -> X) -> X
    f_1273:int -> X
    f_1274:int -> unit -> X
    f_main_1271:int -> (unit -> X) -> int -> X
    f_main_1272:int -> int -> (unit -> X) -> int -> X
    f_map_1270:int -> (int -> X) -> int -> X
    f_zip_1267:int -> int -> unit -> X
    f_zip_1268:int -> int -> unit -> X
    f_zip_1269:int -> int -> (int -> X) -> int -> X
    fail_1279:bool -> (unit -> X) -> X
    fail_1280:bool -> (unit -> X) -> X
    fail_1281:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    map_1033:int -> (int -> X) -> X
    zip_1030:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1275,br_zip_1277,f_1273,f_1274,f_main_1271,f_main_1272,f_map_1270,f_zip_1267,f_zip_1268,f_zip_1269,main_1035
  counterexample: 0:0:0:1:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1273@89:0> = var155)
     [true.(<main_1035@91:0> = <f_1273@89:0>)
      [true.((<zip_1030@93:0> = <main_1035@91:0>) && (<zip_1030@93:1> = <main_1035@91:0>))
       [(not (<zip_1030@93:0> = 0)).
        ((<br_zip_1277@96:0> = (<zip_1030@93:1> = 0)) &&
         ((<br_zip_1277@96:1> = <zip_1030@93:0>) && (<br_zip_1277@96:2> = <zip_1030@93:1>)))
        [(not <br_zip_1277@96:0>).
         ((<zip_1030@99:0> = (<br_zip_1277@96:1> - 1)) && (<zip_1030@99:1> = (<br_zip_1277@96:2> - 1)))
         [(<zip_1030@99:0> = 0).
          ((<br_zip_1275@102:0> = (<zip_1030@99:1> = 0)) &&
           ((<br_zip_1275@102:1> = <zip_1030@99:0>) && (<br_zip_1275@102:2> = <zip_1030@99:1>)))
          [<br_zip_1275@102:0>.(<<br_zip_1275@102:3>@105:0> = <br_zip_1275@102:1>)
           [true.(<<zip_1030@99:2>@107:0> = <<br_zip_1275@102:3>@105:0>)
            [true.
             ((<f_zip_1269@109:0> = <br_zip_1277@96:1>) &&
              ((<f_zip_1269@109:1> = <br_zip_1277@96:2>) && (<f_zip_1269@109:3> = <<zip_1030@99:2>@107:0>)))
             [true.(<<f_zip_1269@109:2>@111:0> = (1 + <f_zip_1269@109:3>))
              [true.(<<br_zip_1277@96:3>@113:0> = <<f_zip_1269@109:2>@111:0>)
               [true.(<<zip_1030@93:2>@115:0> = <<br_zip_1277@96:3>@113:0>)
                [true.((<f_main_1271@117:0> = <main_1035@91:0>) && (<f_main_1271@117:2> = <<zip_1030@93:2>@115:0>))
                 [true.(<map_1033@119:0> = <f_main_1271@117:2>)
                  [(<map_1033@119:0> = 0).(<<map_1033@119:1>@122:0> = <map_1033@119:0>)
                   [true.
                    ((<f_main_1272@124:0> = <f_main_1271@117:0>) &&
                     ((<f_main_1272@124:1> = <f_main_1271@117:2>) && (<f_main_1272@124:3> = <<map_1033@119:1>@122:0>)))
                    [(not (<f_main_1272@124:3> = <f_main_1272@124:0>)).(<fail_1281@127:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(9277)[2]
    horn clauses:
      P[<fail_1281@127:0>](<fail_1281@127:0>:bool)|- bot
      
      P[<f_main_1272@124:3>](<f_main_1272@124:0>:int,<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
      ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && <fail_1281@127:0>)
      |- P[<fail_1281@127:0>](<fail_1281@127:0>:bool)
      
      P[<f_main_1271@117:2>](<f_main_1272@124:0>:int,<f_main_1272@124:1>:int),
      P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int)|- P[<f_main_1272@124:3>](
      <f_main_1272@124:0>:int,<f_main_1272@124:1>:int,<f_main_1272@124:3>:int)
      
      P[<map_1033@119:0>](<map_1033@119:0>:int),
      ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
      |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
      
      P[<f_main_1271@117:2>](<f_main_1271@117:0>:int,<map_1033@119:0>:int)|- P[<map_1033@119:0>](<map_1033@119:0>:int)
      
      P[<main_1035@91:0>](<f_main_1271@117:0>:int),
      P[<<zip_1030@93:2>@115:0>](<f_main_1271@117:0>:int,<f_main_1271@117:0>:int,<f_main_1271@117:2>:int)|- P[<f_main_1271@117:2>](
      <f_main_1271@117:0>:int,<f_main_1271@117:2>:int)
      
      P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
      P[<<br_zip_1277@96:3>@113:0>]((<zip_1030@93:1> = 0):bool,<zip_1030@93:0>:int,<zip_1030@93:1>:int,<<zip_1030@93:2>@115:0>:int),
      (<zip_1030@93:0> <> 0)
      |- P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,
                                    <<zip_1030@93:2>@115:0>:int)
      
      P[<br_zip_1277@96:2>](<br_zip_1277@96:0>:bool,<br_zip_1277@96:1>:int,<br_zip_1277@96:2>:int),
      P[<<f_zip_1269@109:2>@111:0>](<br_zip_1277@96:1>:int,<br_zip_1277@96:2>:int,<<br_zip_1277@96:3>@113:0>:int),
      (not <br_zip_1277@96:0>)
      |- P[<<br_zip_1277@96:3>@113:0>](<br_zip_1277@96:0>:bool,<br_zip_1277@96:1>:int,
                                       <br_zip_1277@96:2>:int,<<br_zip_1277@96:3>@113:0>:int)
      
      P[<f_zip_1269@109:3>](<f_zip_1269@109:0>:int,<f_zip_1269@109:1>:int,(
                            -1 + <<f_zip_1269@109:2>@111:0>):int)|- P[<<f_zip_1269@109:2>@111:0>](
      <f_zip_1269@109:0>:int,<f_zip_1269@109:1>:int,<<f_zip_1269@109:2>@111:0>:int)
      
      P[<br_zip_1277@96:2>](false:bool,<f_zip_1269@109:0>:int,<f_zip_1269@109:1>:int),
      P[<<zip_1030@99:2>@107:0>]((-1 + <f_zip_1269@109:0>):int,(-1 + <f_zip_1269@109:1>):int,<f_zip_1269@109:3>:int)|- P[<f_zip_1269@109:3>](
      <f_zip_1269@109:0>:int,<f_zip_1269@109:1>:int,<f_zip_1269@109:3>:int)
      
      P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
      P[<<br_zip_1275@102:3>@105:0>]((<zip_1030@99:1> = 0):bool,<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int),
      (<zip_1030@99:0> = 0)
      |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                    <<zip_1030@99:2>@107:0>:int)
      
      P[<br_zip_1275@102:2>](<br_zip_1275@102:0>:bool,<br_zip_1275@102:1>:int,<br_zip_1275@102:2>:int),
      ((<<br_zip_1275@102:3>@105:0> = <br_zip_1275@102:1>) && <br_zip_1275@102:0>)
      |- P[<<br_zip_1275@102:3>@105:0>](<br_zip_1275@102:0>:bool,<br_zip_1275@102:1>:int,
                                        <br_zip_1275@102:2>:int,<<br_zip_1275@102:3>@105:0>:int)
      
      P[<zip_1030@99:1>](<br_zip_1275@102:1>:int,<br_zip_1275@102:2>:int),
      ((<br_zip_1275@102:1> = 0) && (<br_zip_1275@102:0> = (<br_zip_1275@102:2> = 0)))
      |- P[<br_zip_1275@102:2>](<br_zip_1275@102:0>:bool,<br_zip_1275@102:1>:int,
                                <br_zip_1275@102:2>:int)
      
      P[<br_zip_1277@96:2>](false:bool,(1 + <zip_1030@99:0>):int,(1 + <zip_1030@99:1>):int)|- P[<zip_1030@99:1>](
      <zip_1030@99:0>:int,<zip_1030@99:1>:int)
      
      P[<zip_1030@93:1>](<br_zip_1277@96:1>:int,<br_zip_1277@96:2>:int),
      ((<br_zip_1277@96:1> <> 0) && (<br_zip_1277@96:0> = (<br_zip_1277@96:2> = 0)))
      |- P[<br_zip_1277@96:2>](<br_zip_1277@96:0>:bool,<br_zip_1277@96:1>:int,
                               <br_zip_1277@96:2>:int)
      
      P[<main_1035@91:0>](<zip_1030@93:1>:int), (<zip_1030@93:1> = <zip_1030@93:0>)
      |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int)
      
      P[<f_1273@89:0>](<main_1035@91:0>:int)|- P[<main_1035@91:0>](<main_1035@91:0>:int)
      
      |- P[<f_1273@89:0>](<f_1273@89:0>:int)
    call trees:
      <main_1266@86>
        <f_1273@89>
          <main_1035@91>
            <zip_1030@93>
              <br_zip_1277@96>
                <zip_1030@99>
                  <br_zip_1275@102>
                  </<br_zip_1275@102:3>@105>
                </<zip_1030@99:2>@107>
                <f_zip_1269@109>
                </<f_zip_1269@109:2>@111>
              </<br_zip_1277@96:3>@113>
            </<zip_1030@93:2>@115>
            <f_main_1271@117>
              <map_1033@119>
              </<map_1033@119:1>@122>
              <f_main_1272@124>
                <fail_1281@127>
    inlined horn clauses:
      P[<fail_1281@127:0>](<fail_1281@127:0>:bool)|- bot
      
      P[<<zip_1030@93:2>@115:0>](<f_main_1272@124:0>:int,<f_main_1272@124:0>:int,<f_main_1272@124:1>:int),
      P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
      ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && <fail_1281@127:0>)
      |- P[<fail_1281@127:0>](<fail_1281@127:0>:bool)
      
      P[<map_1033@119:0>](<map_1033@119:0>:int),
      ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
      |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
      
      P[<<zip_1030@93:2>@115:0>](<f_main_1271@117:0>:int,<f_main_1271@117:0>:int,<map_1033@119:0>:int)|- P[<map_1033@119:0>](
      <map_1033@119:0>:int)
      
      P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
      P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                 -1 + <<zip_1030@93:2>@115:0>):int), (
      (<zip_1030@93:0> <> 0) && (<zip_1030@93:1> <> 0))
      |- P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,
                                    <<zip_1030@93:2>@115:0>:int)
      
      P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
      ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
      |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                    <<zip_1030@99:2>@107:0>:int)
      
      P[<zip_1030@93:1>]((1 + <zip_1030@99:0>):int,(1 + <zip_1030@99:1>):int),
      (((1 + <zip_1030@99:0>) <> 0) && ((1 + <zip_1030@99:1>) <> 0))
      |- P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int)
      
       (<zip_1030@93:1> = <zip_1030@93:0>) |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,
                                                                 <zip_1030@93:1>:int)
    begin ParamSubstInfer.infer(12397)[3]
      
    end ParamSubstInfer.infer(12397)[3] (0.072989 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(12399)[3]
      
    end RefTypeInfer.elim_coeffs(12399)[3] (0.001000 sec.)
    begin YhornInterface.solve(12822)[3]
      begin HcSolver.solve_ub(12823)[4]
        encoded:
          P[<fail_1281@127:0>](<fail_1281@127:0>:int)|- bot
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1272@124:0>:int,<f_main_1272@124:0>:int,<f_main_1272@124:1>:int),
          P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
          ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && (<fail_1281@127:0> = 1))
          |- P[<fail_1281@127:0>](<fail_1281@127:0>:int)
          
          P[<map_1033@119:0>](<map_1033@119:0>:int),
          ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
          |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1271@117:0>:int,<f_main_1271@117:0>:int,<map_1033@119:0>:int)|- P[<map_1033@119:0>](
          <map_1033@119:0>:int)
          
          P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
          P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                     -1 + <<zip_1030@93:2>@115:0>):int),
          ((<zip_1030@93:0> <> 0) && (<zip_1030@93:1> <> 0))
          |- P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,
                                        <<zip_1030@93:2>@115:0>:int)
          
          P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
          ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
          |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                        <<zip_1030@99:2>@107:0>:int)
          
          P[<zip_1030@93:1>]((1 + <zip_1030@99:0>):int,(1 + <zip_1030@99:1>):int),
          (((1 + <zip_1030@99:0>) <> 0) && ((1 + <zip_1030@99:1>) <> 0))
          |- P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int)
          
           (<zip_1030@93:1> = <zip_1030@93:0>) |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,
                                                                    <zip_1030@93:1>:int)
        input to Yhorn:
          P[<fail_1281@127:0>](<fail_1281@127:0>:int)|- bot
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1272@124:0>:int,<f_main_1272@124:0>:int,<f_main_1272@124:1>:int),
          P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
          ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && (<fail_1281@127:0> = 1))
          |- P[<fail_1281@127:0>](<fail_1281@127:0>:int)
          
          P[<map_1033@119:0>](<map_1033@119:0>:int),
          ((<<map_1033@119:1>@122:0> = <map_1033@119:0>) && (<map_1033@119:0> = 0))
          |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1271@117:0>:int,<f_main_1271@117:0>:int,<map_1033@119:0>:int)|- P[<map_1033@119:0>](
          <map_1033@119:0>:int)
          
          P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
          P[<<zip_1030@99:2>@107:0>](var156:int,var157:int,var158:int),
          (((1 + var158) = <<zip_1030@93:2>@115:0>) &&
           (((1 + var157) = <zip_1030@93:1>) &&
            (((1 + var156) = <zip_1030@93:0>) && ((<zip_1030@93:1> <> 0) && (<zip_1030@93:0> <> 0)))))
          |- P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,
                                        <<zip_1030@93:2>@115:0>:int)
          
          P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
          ((<<zip_1030@99:2>@107:0> = <zip_1030@99:0>) && ((<zip_1030@99:1> = 0) && (<zip_1030@99:0> = 0)))
          |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                        <<zip_1030@99:2>@107:0>:int)
          
          P[<zip_1030@93:1>](var159:int,var160:int),
          ((var160 = (1 + <zip_1030@99:1>)) &&
           ((var159 = (1 + <zip_1030@99:0>)) && (((1 + <zip_1030@99:1>) <> 0) && ((1 + <zip_1030@99:0>) <> 0))))
          |- P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1281_sep_127_sep_0($637)) -> 1=0.
(($637-1=0) & ($638-$639<>0)) & (v_sep_map_1033_sep_119_sep_1_sep_122_sep_0($640,$638)) & (v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0($639,$639,$640)) -> v_sep_fail_1281_sep_127_sep_0($637).
(($641=0) & (-$641+$642=0)) & (v_sep_map_1033_sep_119_sep_0($641)) -> v_sep_map_1033_sep_119_sep_1_sep_122_sep_0($641,$642).
(0=0) & (v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0($643,$643,$641)) -> v_sep_map_1033_sep_119_sep_0($641).
(($644<>0) & ($645<>0) & (-$644+$646+1=0) & (-$645+$647+1=0) & ($648-$649+1=0)) & (v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0($646,$647,$648)) & (v_sep_zip_1030_sep_93_sep_1($644,$645)) -> v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0($644,$645,$649).
(($650=0) & ($651=0) & (-$650+$652=0)) & (v_sep_zip_1030_sep_99_sep_1($650,$651)) -> v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0($650,$651,$652).
(($650+1<>0) & ($651+1<>0) & (-$650+$653-1=0) & (-$651+$654-1=0)) & (v_sep_zip_1030_sep_93_sep_1($653,$654)) -> v_sep_zip_1030_sep_99_sep_1($650,$651).
-$644+$645=0 -> v_sep_zip_1030_sep_93_sep_1($644,$645).


v_sep_fail_1281_sep_127_sep_0: X
v_sep_map_1033_sep_119_sep_0: X
v_sep_map_1033_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1030_sep_93_sep_1: X
v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1030_sep_99_sep_1: X
v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0: X
.....................
v_sep_fail_1281_sep_127_sep_0: X
v_sep_map_1033_sep_119_sep_0: X
v_sep_map_1033_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1030_sep_93_sep_1: X
v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1030_sep_99_sep_1: X
v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0: X
......
v_sep_fail_1281_sep_127_sep_0: X
v_sep_map_1033_sep_119_sep_0: X
v_sep_map_1033_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1030_sep_93_sep_1: X
v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1030_sep_99_sep_1: X
v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0: X
...............
v_sep_fail_1281_sep_127_sep_0: X
v_sep_map_1033_sep_119_sep_0: X
v_sep_map_1033_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1030_sep_93_sep_1: X
v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1030_sep_99_sep_1: X
v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0: X
.................
v_sep_fail_1281_sep_127_sep_0: X
v_sep_map_1033_sep_119_sep_0: X
v_sep_map_1033_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1030_sep_93_sep_1: X
v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1030_sep_99_sep_1: X
v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0: X
.....................(0=0) & (v_sep_fail_1281_sep_127_sep_0($637)) -> 1=0.
(($637-1=0) & ($638-$639<>0)) & (v_sep_map_1033_sep_119_sep_1_sep_122_sep_0($640,$638)) & (v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0($639,$639,$640)) -> v_sep_fail_1281_sep_127_sep_0($637).
(($641=0) & (-$641+$642=0)) & (v_sep_map_1033_sep_119_sep_0($641)) -> v_sep_map_1033_sep_119_sep_1_sep_122_sep_0($641,$642).
(0=0) & (v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0($643,$643,$641)) -> v_sep_map_1033_sep_119_sep_0($641).
(($644<>0) & ($645<>0) & (-$644+$646+1=0) & (-$645+$647+1=0) & ($648-$649+1=0)) & (v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0($646,$647,$648)) & (v_sep_zip_1030_sep_93_sep_1($644,$645)) -> v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0($644,$645,$649).
(($650=0) & ($651=0) & (-$650+$652=0)) & (v_sep_zip_1030_sep_99_sep_1($650,$651)) -> v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0($650,$651,$652).
(($650+1<>0) & ($651+1<>0) & (-$650+$653-1=0) & (-$651+$654-1=0)) & (v_sep_zip_1030_sep_93_sep_1($653,$654)) -> v_sep_zip_1030_sep_99_sep_1($650,$651).
-$644+$645=0 -> v_sep_zip_1030_sep_93_sep_1($644,$645).

           (<zip_1030@93:1> = <zip_1030@93:0>) |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,
                                                                    <zip_1030@93:1>:int)
        solution:
          P[<fail_1281@127:0>]($655:bool) = false
          P[<map_1033@119:0>]($670:int) = (1 <= $670)
          P[<<map_1033@119:1>@122:0>]($658:int,$660:int) = ((1 + $658) <= 0)
          P[<zip_1030@93:1>]($680:int,$682:int) = true
          P[<<zip_1030@93:2>@115:0>]($663:int,$665:int,$667:int) = (1 <= $667)
          P[<zip_1030@99:1>]($685:int,$687:int) = true
          P[<<zip_1030@99:2>@107:0>]($673:int,$675:int,$677:int) = (0 <= $677)
        
      end HcSolver.solve_ub(12823)[4] (0.066990 sec.)
      begin HcSolver.check_validity(13407)[4]
        input:
          P[<fail_1281@127:0>](<fail_1281@127:0>:bool)|- bot
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1272@124:0>:int,<f_main_1272@124:0>:int,<f_main_1272@124:1>:int),
          P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
          ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && <fail_1281@127:0>)
          |- P[<fail_1281@127:0>](<fail_1281@127:0>:bool)
          
          P[<map_1033@119:0>](<map_1033@119:0>:int),
          ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
          |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1271@117:0>:int,<f_main_1271@117:0>:int,<map_1033@119:0>:int)|- P[<map_1033@119:0>](
          <map_1033@119:0>:int)
          
          P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
          P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                     -1 + <<zip_1030@93:2>@115:0>):int),
          ((<zip_1030@93:0> <> 0) && (<zip_1030@93:1> <> 0))
          |- P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,
                                        <<zip_1030@93:2>@115:0>:int)
          
          P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
          ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
          |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                        <<zip_1030@99:2>@107:0>:int)
          
          P[<zip_1030@93:1>]((1 + <zip_1030@99:0>):int,(1 + <zip_1030@99:1>):int),
          (((1 + <zip_1030@99:0>) <> 0) && ((1 + <zip_1030@99:1>) <> 0))
          |- P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int)
          
           (<zip_1030@93:1> = <zip_1030@93:0>) |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,
                                                                    <zip_1030@93:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(13407)[4] (0.006999 sec.)
      solution:
        P[<fail_1281@127:0>]($655:bool) = false
        P[<map_1033@119:0>]($670:int) = (1 <= $670)
        P[<<map_1033@119:1>@122:0>]($658:int,$660:int) = ((1 + $658) <= 0)
        P[<zip_1030@93:1>]($680:int,$682:int) = true
        P[<<zip_1030@93:2>@115:0>]($663:int,$665:int,$667:int) = (1 <= $667)
        P[<zip_1030@99:1>]($685:int,$687:int) = true
        P[<<zip_1030@99:2>@107:0>]($673:int,$675:int,$677:int) = (0 <= $677)
    end YhornInterface.solve(12822)[3] (0.073989 sec.)
    
  end RefTypeInfer.infer_etrs(9277)[2] (0.160976 sec.)
  refinement types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | (1 <= v3)} -> X) -> X
    br_zip_1277: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | (0 <= v3)} -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1269: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: v1:{v1:int | (1 <= v1)} -> (v2:{v2:int | ((1 + v1) <= 0)} -> X) -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1274: var171:int -> var170:unit -> X
    f_map_1270: var176:int -> (var175:int -> X) -> var173:int -> X
    f_zip_1267: var180:int -> var179:int -> var178:unit -> X
    f_zip_1268: var184:int -> var183:int -> var182:unit -> X
    fail_1279: var188:bool -> (var187:unit -> X) -> X
    fail_1280: var192:bool -> (var191:unit -> X) -> X
  abstraction types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: var193:int -> var194:int -> (var195:int[var195 -> (1 <= var195),
                                                      var195 -> (0 <= var195)] -> X) -> X
    br_zip_1277: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1269: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: v1:int[v1 -> (1 <= v1)] -> (v2:int[v2 -> ((1 + v1) <= 0)] -> X) -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:bool -> (v2:unit -> X) -> X
    f_1274: var171:int -> var170:unit -> X
    f_map_1270: var176:int -> (var175:int -> X) -> var173:int -> X
    f_zip_1267: var180:int -> var179:int -> var178:unit -> X
    f_zip_1268: var184:int -> var183:int -> var182:unit -> X
    fail_1279: var188:bool -> (var187:unit -> X) -> X
    fail_1280: var192:bool -> (var191:unit -> X) -> X
  
end AbsTypeInfer.refine(9276)[1] (0.164975 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1266
  main_1266 -> (rand_int f_1273)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when b_1276 -> (k_zip_1102 x_1031)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when (not b_1276) -> (fail_1279 true (f_zip_1267 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when b_1278 -> (fail_1280 true (f_zip_1268 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when (not b_1278) ->
      (zip_1030 (x_1031 - 1) (y_1032 - 1) (f_zip_1269 x_1031 y_1032 k_zip_1102))
  f_1273 x_1241 -> (main_1035 x_1241 (f_1274 x_1241))
  f_1274 x_1241 x_1238 -> end
  f_main_1271 n_1036 k_main_1199 x_1224 -> (map_1033 x_1224 (f_main_1272 n_1036 x_1224 k_main_1199))
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (x_1202 = n_1036) -> (k_main_1199 ())
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (not (x_1202 = n_1036)) -> (fail_1281 true k_main_1199)
  f_map_1270 x_1034 k_map_1167 x_1171 -> (k_map_1167 (1 + x_1171))
  f_zip_1267 x_1031 y_1032 x_1105 -> _|_
  f_zip_1268 x_1031 y_1032 x_1121 -> _|_
  f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 -> (k_zip_1102 (1 + x_1134))
  fail_1279 b k -> {fail} => (k ())
  fail_1280 b k -> {fail} => (k ())
  fail_1281 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1199 -> (zip_1030 n_1036 n_1036 (f_main_1271 n_1036 k_main_1199))
  map_1033 x_1034 k_map_1167 when (x_1034 = 0) -> (k_map_1167 x_1034)
  map_1033 x_1034 k_map_1167 when (not (x_1034 = 0)) -> (map_1033 (x_1034 - 1) (f_map_1270 x_1034 k_map_1167))
  zip_1030 x_1031 y_1032 k_zip_1102 when (x_1031 = 0) -> (br_zip_1275 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
  zip_1030 x_1031 y_1032 k_zip_1102 when (not (x_1031 = 0)) -> (br_zip_1277 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
Types:
  main_1266 : X
  fail_1279 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1280 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1281 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1033 : (x_1:int[x_1 >= 1; x_1 <= -1; x_1 <= 0] -> (x_3:int[x_1 <= -1; 2*x_1 >= 1; x_1 >= 3; x_3 = 0] -> X) -> X)
  zip_1030 : (x_1:int -> x_2:int[x_1 = x_2] -> (x_4:int[x_4 >= 0; x_4 >= 1; x_4 <= 0; x_2 = 0] -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Error trace::
  main_1266 ... --> 
  f_1273 ... --> 
  main_1035 ... --> 
  zip_1030 [2/2] ... --> 
  br_zip_1277 [2/2] ... --> 
  zip_1030 [1/2] ... --> 
  br_zip_1275 [1/2] ... --> 
  f_zip_1269 ... --> 
  f_main_1271 ... --> 
  map_1033 [2/2] ... --> 
  map_1033 [1/2] ... --> 
  f_map_1270 ... --> 
  f_main_1272 [2/2] ... --> 
  fail_1281 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 0; 0; 1; 0

(4-3) Checking counter-example ... DONE!

(4-4) Discovering predicates ... 
begin AbsTypeInfer.refine(16200)[1]
  program:
    main_1266  | true = ((Random.int 0) f_1273)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | b_1276 = (k_zip_1102 x_1031)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | (not b_1276) = (fail_1279 true
                                                                    (f_zip_1267 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | b_1278 = (fail_1280 true
                                                                    (f_zip_1268 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | (not b_1278) = (zip_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    (
                                                                    y_1032 - 1)
                                                                    (
                                                                    f_zip_1269 x_1031
                                                                    y_1032
                                                                    k_zip_1102))
    f_1273 x_1241 | true = (main_1035 x_1241
                                      (f_1274 x_1241))
    f_1274 x_1241 x_1238 | true = end
    f_main_1271 n_1036 k_main_1199 x_1224 | true = (map_1033 x_1224
                                                             (f_main_1272 n_1036
                                                                    x_1224
                                                                    k_main_1199))
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (x_1202 = n_1036) = (
    k_main_1199 ())
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (not (x_1202 = n_1036)) = (
    fail_1281 true
              k_main_1199)
    f_map_1270 x_1034 k_map_1167 x_1171 | true = (k_map_1167 (1 + x_1171))
    f_zip_1267 x_1031 y_1032 x_1105 | true = bot
    f_zip_1268 x_1031 y_1032 x_1121 | true = bot
    f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 | true = (k_zip_1102 (
                                                                    1 + x_1134))
    fail_1279 b k | true = (fail ())
    fail_1280 b k | true = (fail ())
    fail_1281 b k | true = (fail ())
    main_1035 n_1036 k_main_1199 | true = (zip_1030 n_1036
                                                    n_1036
                                                    (f_main_1271 n_1036
                                                                 k_main_1199))
    map_1033 x_1034 k_map_1167 | (x_1034 = 0) = (k_map_1167 x_1034)
    map_1033 x_1034 k_map_1167 | (not (x_1034 = 0)) = (map_1033 (x_1034 - 1)
                                                                (f_map_1270 x_1034
                                                                    k_map_1167))
    zip_1030 x_1031 y_1032 k_zip_1102 | (x_1031 = 0) = (br_zip_1275 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    zip_1030 x_1031 y_1032 k_zip_1102 | (not (x_1031 = 0)) = (br_zip_1277 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    main_1266:X
    br_zip_1275:bool -> int -> int -> (int -> X) -> X
    br_zip_1277:bool -> int -> int -> (int -> X) -> X
    f_1273:int -> X
    f_1274:int -> unit -> X
    f_main_1271:int -> (unit -> X) -> int -> X
    f_main_1272:int -> int -> (unit -> X) -> int -> X
    f_map_1270:int -> (int -> X) -> int -> X
    f_zip_1267:int -> int -> unit -> X
    f_zip_1268:int -> int -> unit -> X
    f_zip_1269:int -> int -> (int -> X) -> int -> X
    fail_1279:bool -> (unit -> X) -> X
    fail_1280:bool -> (unit -> X) -> X
    fail_1281:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    map_1033:int -> (int -> X) -> X
    zip_1030:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1275,br_zip_1277,f_1273,f_1274,f_main_1271,f_main_1272,f_map_1270,f_zip_1267,f_zip_1268,f_zip_1269,main_1035
  counterexample: 0:0:0:1:1:0:0:0:0:1:0:0:1:0
  error traces:
    [true.nop(<f_1273@133:0> = var198)
     [true.(<main_1035@135:0> = <f_1273@133:0>)
      [true.((<zip_1030@137:0> = <main_1035@135:0>) && (<zip_1030@137:1> = <main_1035@135:0>))
       [(not (<zip_1030@137:0> = 0)).
        ((<br_zip_1277@140:0> = (<zip_1030@137:1> = 0)) &&
         ((<br_zip_1277@140:1> = <zip_1030@137:0>) && (<br_zip_1277@140:2> = <zip_1030@137:1>)))
        [(not <br_zip_1277@140:0>).
         ((<zip_1030@143:0> = (<br_zip_1277@140:1> - 1)) && (<zip_1030@143:1> = (<br_zip_1277@140:2> - 1)))
         [(<zip_1030@143:0> = 0).
          ((<br_zip_1275@146:0> = (<zip_1030@143:1> = 0)) &&
           ((<br_zip_1275@146:1> = <zip_1030@143:0>) && (<br_zip_1275@146:2> = <zip_1030@143:1>)))
          [<br_zip_1275@146:0>.(<<br_zip_1275@146:3>@149:0> = <br_zip_1275@146:1>)
           [true.(<<zip_1030@143:2>@151:0> = <<br_zip_1275@146:3>@149:0>)
            [true.
             ((<f_zip_1269@153:0> = <br_zip_1277@140:1>) &&
              ((<f_zip_1269@153:1> = <br_zip_1277@140:2>) && (<f_zip_1269@153:3> = <<zip_1030@143:2>@151:0>)))
             [true.(<<f_zip_1269@153:2>@155:0> = (1 + <f_zip_1269@153:3>))
              [true.(<<br_zip_1277@140:3>@157:0> = <<f_zip_1269@153:2>@155:0>)
               [true.(<<zip_1030@137:2>@159:0> = <<br_zip_1277@140:3>@157:0>)
                [true.((<f_main_1271@161:0> = <main_1035@135:0>) && (<f_main_1271@161:2> = <<zip_1030@137:2>@159:0>))
                 [true.(<map_1033@163:0> = <f_main_1271@161:2>)
                  [(not (<map_1033@163:0> = 0)).(<map_1033@166:0> = (<map_1033@163:0> - 1))
                   [(<map_1033@166:0> = 0).(<<map_1033@166:1>@169:0> = <map_1033@166:0>)
                    [true.((<f_map_1270@171:0> = <map_1033@163:0>) && (<f_map_1270@171:2> = <<map_1033@166:1>@169:0>))
                     [true.(<<f_map_1270@171:1>@173:0> = (1 + <f_map_1270@171:2>))
                      [true.(<<map_1033@163:1>@175:0> = <<f_map_1270@171:1>@173:0>)
                       [true.
                        ((<f_main_1272@177:0> = <f_main_1271@161:0>) &&
                         ((<f_main_1272@177:1> = <f_main_1271@161:2>) &&
                          (<f_main_1272@177:3> = <<map_1033@163:1>@175:0>)))
                        [(not (<f_main_1272@177:3> = <f_main_1272@177:0>)).(<fail_1281@180:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(16201)[2]
    horn clauses:
      P[<fail_1281@180:0>](<fail_1281@180:0>:bool)|- bot
      
      P[<f_main_1272@177:3>](<f_main_1272@177:0>:int,<f_main_1272@177:1>:int,<f_main_1272@177:3>:int),
      ((<f_main_1272@177:3> <> <f_main_1272@177:0>) && <fail_1281@180:0>)
      |- P[<fail_1281@180:0>](<fail_1281@180:0>:bool)
      
      P[<f_main_1271@161:2>](<f_main_1272@177:0>:int,<f_main_1272@177:1>:int),
      P[<<map_1033@163:1>@175:0>](<f_main_1272@177:1>:int,<f_main_1272@177:3>:int)|- P[<f_main_1272@177:3>](
      <f_main_1272@177:0>:int,<f_main_1272@177:1>:int,<f_main_1272@177:3>:int)
      
      P[<map_1033@163:0>](<map_1033@163:0>:int),
      P[<<f_map_1270@171:1>@173:0>](<map_1033@163:0>:int,<<map_1033@163:1>@175:0>:int), (
      <map_1033@163:0> <> 0) |- P[<<map_1033@163:1>@175:0>](<map_1033@163:0>:int,
                                                            <<map_1033@163:1>@175:0>:int)
      
      P[<f_map_1270@171:2>](<f_map_1270@171:0>:int,(-1 + <<f_map_1270@171:1>@173:0>):int)|- P[<<f_map_1270@171:1>@173:0>](
      <f_map_1270@171:0>:int,<<f_map_1270@171:1>@173:0>:int)
      
      P[<map_1033@163:0>](<f_map_1270@171:0>:int),
      P[<<map_1033@166:1>@169:0>]((-1 + <f_map_1270@171:0>):int,<f_map_1270@171:2>:int), (
      <f_map_1270@171:0> <> 0) |- P[<f_map_1270@171:2>](<f_map_1270@171:0>:int,
                                                        <f_map_1270@171:2>:int)
      
      P[<map_1033@166:0>](<map_1033@166:0>:int),
      ((<map_1033@166:0> = 0) && (<<map_1033@166:1>@169:0> = <map_1033@166:0>))
      |- P[<<map_1033@166:1>@169:0>](<map_1033@166:0>:int,<<map_1033@166:1>@169:0>:int)
      
      P[<map_1033@163:0>]((1 + <map_1033@166:0>):int), ((1 + <map_1033@166:0>) <> 0)
      |- P[<map_1033@166:0>](<map_1033@166:0>:int)
      
      P[<f_main_1271@161:2>](<f_main_1271@161:0>:int,<map_1033@163:0>:int)|- P[<map_1033@163:0>](<map_1033@163:0>:int)
      
      P[<main_1035@135:0>](<f_main_1271@161:0>:int),
      P[<<zip_1030@137:2>@159:0>](<f_main_1271@161:0>:int,<f_main_1271@161:0>:int,<f_main_1271@161:2>:int)|- P[<f_main_1271@161:2>](
      <f_main_1271@161:0>:int,<f_main_1271@161:2>:int)
      
      P[<zip_1030@137:1>](<zip_1030@137:0>:int,<zip_1030@137:1>:int),
      P[<<br_zip_1277@140:3>@157:0>]((<zip_1030@137:1> = 0):bool,<zip_1030@137:0>:int,<zip_1030@137:1>:int,<<zip_1030@137:2>@159:0>:int),
      (<zip_1030@137:0> <> 0)
      |- P[<<zip_1030@137:2>@159:0>](<zip_1030@137:0>:int,<zip_1030@137:1>:int,
                                     <<zip_1030@137:2>@159:0>:int)
      
      P[<br_zip_1277@140:2>](<br_zip_1277@140:0>:bool,<br_zip_1277@140:1>:int,<br_zip_1277@140:2>:int),
      P[<<f_zip_1269@153:2>@155:0>](<br_zip_1277@140:1>:int,<br_zip_1277@140:2>:int,<<br_zip_1277@140:3>@157:0>:int),
      (not <br_zip_1277@140:0>)
      |- P[<<br_zip_1277@140:3>@157:0>](<br_zip_1277@140:0>:bool,<br_zip_1277@140:1>:int,
                                        <br_zip_1277@140:2>:int,<<br_zip_1277@140:3>@157:0>:int)
      
      P[<f_zip_1269@153:3>](<f_zip_1269@153:0>:int,<f_zip_1269@153:1>:int,(
                            -1 + <<f_zip_1269@153:2>@155:0>):int)|- P[<<f_zip_1269@153:2>@155:0>](
      <f_zip_1269@153:0>:int,<f_zip_1269@153:1>:int,<<f_zip_1269@153:2>@155:0>:int)
      
      P[<br_zip_1277@140:2>](false:bool,<f_zip_1269@153:0>:int,<f_zip_1269@153:1>:int),
      P[<<zip_1030@143:2>@151:0>]((-1 + <f_zip_1269@153:0>):int,(-1 + <f_zip_1269@153:1>):int,<f_zip_1269@153:3>:int)|- P[<f_zip_1269@153:3>](
      <f_zip_1269@153:0>:int,<f_zip_1269@153:1>:int,<f_zip_1269@153:3>:int)
      
      P[<zip_1030@143:1>](<zip_1030@143:0>:int,<zip_1030@143:1>:int),
      P[<<br_zip_1275@146:3>@149:0>]((<zip_1030@143:1> = 0):bool,<zip_1030@143:0>:int,<zip_1030@143:1>:int,<<zip_1030@143:2>@151:0>:int),
      (<zip_1030@143:0> = 0)
      |- P[<<zip_1030@143:2>@151:0>](<zip_1030@143:0>:int,<zip_1030@143:1>:int,
                                     <<zip_1030@143:2>@151:0>:int)
      
      P[<br_zip_1275@146:2>](<br_zip_1275@146:0>:bool,<br_zip_1275@146:1>:int,<br_zip_1275@146:2>:int),
      ((<<br_zip_1275@146:3>@149:0> = <br_zip_1275@146:1>) && <br_zip_1275@146:0>)
      |- P[<<br_zip_1275@146:3>@149:0>](<br_zip_1275@146:0>:bool,<br_zip_1275@146:1>:int,
                                        <br_zip_1275@146:2>:int,<<br_zip_1275@146:3>@149:0>:int)
      
      P[<zip_1030@143:1>](<br_zip_1275@146:1>:int,<br_zip_1275@146:2>:int),
      ((<br_zip_1275@146:1> = 0) && (<br_zip_1275@146:0> = (<br_zip_1275@146:2> = 0)))
      |- P[<br_zip_1275@146:2>](<br_zip_1275@146:0>:bool,<br_zip_1275@146:1>:int,
                                <br_zip_1275@146:2>:int)
      
      P[<br_zip_1277@140:2>](false:bool,(1 + <zip_1030@143:0>):int,(1 + <zip_1030@143:1>):int)|- P[<zip_1030@143:1>](
      <zip_1030@143:0>:int,<zip_1030@143:1>:int)
      
      P[<zip_1030@137:1>](<br_zip_1277@140:1>:int,<br_zip_1277@140:2>:int),
      ((<br_zip_1277@140:1> <> 0) && (<br_zip_1277@140:0> = (<br_zip_1277@140:2> = 0)))
      |- P[<br_zip_1277@140:2>](<br_zip_1277@140:0>:bool,<br_zip_1277@140:1>:int,
                                <br_zip_1277@140:2>:int)
      
      P[<main_1035@135:0>](<zip_1030@137:1>:int), (<zip_1030@137:1> = <zip_1030@137:0>)
      |- P[<zip_1030@137:1>](<zip_1030@137:0>:int,<zip_1030@137:1>:int)
      
      P[<f_1273@133:0>](<main_1035@135:0>:int)|- P[<main_1035@135:0>](<main_1035@135:0>:int)
      
      |- P[<f_1273@133:0>](<f_1273@133:0>:int)
    call trees:
      <main_1266@130>
        <f_1273@133>
          <main_1035@135>
            <zip_1030@137>
              <br_zip_1277@140>
                <zip_1030@143>
                  <br_zip_1275@146>
                  </<br_zip_1275@146:3>@149>
                </<zip_1030@143:2>@151>
                <f_zip_1269@153>
                </<f_zip_1269@153:2>@155>
              </<br_zip_1277@140:3>@157>
            </<zip_1030@137:2>@159>
            <f_main_1271@161>
              <map_1033@163>
                <map_1033@166>
                </<map_1033@166:1>@169>
                <f_map_1270@171>
                </<f_map_1270@171:1>@173>
              </<map_1033@163:1>@175>
              <f_main_1272@177>
                <fail_1281@180>
    inlined horn clauses:
      P[<fail_1281@180:0>](<fail_1281@180:0>:bool)|- bot
      
      P[<<zip_1030@137:2>@159:0>](<f_main_1272@177:0>:int,<f_main_1272@177:0>:int,<f_main_1272@177:1>:int),
      P[<<map_1033@163:1>@175:0>](<f_main_1272@177:1>:int,<f_main_1272@177:3>:int),
      ((<f_main_1272@177:3> <> <f_main_1272@177:0>) && <fail_1281@180:0>)
      |- P[<fail_1281@180:0>](<fail_1281@180:0>:bool)
      
      P[<map_1033@163:0>](<map_1033@163:0>:int),
      P[<<map_1033@166:1>@169:0>]((-1 + <map_1033@163:0>):int,(-1 + <<map_1033@163:1>@175:0>):int),
      (<map_1033@163:0> <> 0) |- P[<<map_1033@163:1>@175:0>](<map_1033@163:0>:int,
                                                             <<map_1033@163:1>@175:0>:int)
      
      P[<map_1033@166:0>](<map_1033@166:0>:int),
      ((<map_1033@166:0> = 0) && (<<map_1033@166:1>@169:0> = <map_1033@166:0>))
      |- P[<<map_1033@166:1>@169:0>](<map_1033@166:0>:int,<<map_1033@166:1>@169:0>:int)
      
      P[<map_1033@163:0>]((1 + <map_1033@166:0>):int), ((1 + <map_1033@166:0>) <> 0)
      |- P[<map_1033@166:0>](<map_1033@166:0>:int)
      
      P[<<zip_1030@137:2>@159:0>](<f_main_1271@161:0>:int,<f_main_1271@161:0>:int,<map_1033@163:0>:int)|- P[<map_1033@163:0>](
      <map_1033@163:0>:int)
      
      P[<zip_1030@137:1>](<zip_1030@137:0>:int,<zip_1030@137:1>:int),
      P[<<zip_1030@143:2>@151:0>]((-1 + <zip_1030@137:0>):int,(-1 + <zip_1030@137:1>):int,(
                                  -1 + <<zip_1030@137:2>@159:0>):int),
      ((<zip_1030@137:0> <> 0) && (<zip_1030@137:1> <> 0))
      |- P[<<zip_1030@137:2>@159:0>](<zip_1030@137:0>:int,<zip_1030@137:1>:int,
                                     <<zip_1030@137:2>@159:0>:int)
      
      P[<zip_1030@143:1>](<zip_1030@143:0>:int,<zip_1030@143:1>:int),
      ((<zip_1030@143:0> = 0) && ((<zip_1030@143:1> = 0) && (<<zip_1030@143:2>@151:0> = <zip_1030@143:0>)))
      |- P[<<zip_1030@143:2>@151:0>](<zip_1030@143:0>:int,<zip_1030@143:1>:int,
                                     <<zip_1030@143:2>@151:0>:int)
      
      P[<zip_1030@137:1>]((1 + <zip_1030@143:0>):int,(1 + <zip_1030@143:1>):int),
      (((1 + <zip_1030@143:0>) <> 0) && ((1 + <zip_1030@143:1>) <> 0))
      |- P[<zip_1030@143:1>](<zip_1030@143:0>:int,<zip_1030@143:1>:int)
      
       (<zip_1030@137:1> = <zip_1030@137:0>) |- P[<zip_1030@137:1>](<zip_1030@137:0>:int,
                                                                    <zip_1030@137:1>:int)
    begin ParamSubstInfer.infer(19834)[3]
      
    end ParamSubstInfer.infer(19834)[3] (0.146978 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(19836)[3]
      
    end RefTypeInfer.elim_coeffs(19836)[3] (0.000000 sec.)
    begin YhornInterface.solve(20313)[3]
      begin HcSolver.solve_ub(20314)[4]
        encoded:
          P[<fail_1281@180:0>](<fail_1281@180:0>:int)|- bot
          
          P[<<zip_1030@137:2>@159:0>](<f_main_1272@177:0>:int,<f_main_1272@177:0>:int,<f_main_1272@177:1>:int),
          P[<<map_1033@163:1>@175:0>](<f_main_1272@177:1>:int,<f_main_1272@177:3>:int),
          ((<f_main_1272@177:3> <> <f_main_1272@177:0>) && (<fail_1281@180:0> = 1))
          |- P[<fail_1281@180:0>](<fail_1281@180:0>:int)
          
          P[<map_1033@163:0>](<map_1033@163:0>:int),
          P[<<map_1033@166:1>@169:0>]((-1 + <map_1033@163:0>):int,(-1 + <<map_1033@163:1>@175:0>):int),
          (<map_1033@163:0> <> 0) |- P[<<map_1033@163:1>@175:0>](<map_1033@163:0>:int,
                                                                 <<map_1033@163:1>@175:0>:int)
          
          P[<map_1033@166:0>](<map_1033@166:0>:int),
          ((<map_1033@166:0> = 0) && (<<map_1033@166:1>@169:0> = <map_1033@166:0>))
          |- P[<<map_1033@166:1>@169:0>](<map_1033@166:0>:int,<<map_1033@166:1>@169:0>:int)
          
          P[<map_1033@163:0>]((1 + <map_1033@166:0>):int), ((1 + <map_1033@166:0>) <> 0)
          |- P[<map_1033@166:0>](<map_1033@166:0>:int)
          
          P[<<zip_1030@137:2>@159:0>](<f_main_1271@161:0>:int,<f_main_1271@161:0>:int,<map_1033@163:0>:int)|- P[<map_1033@163:0>](
          <map_1033@163:0>:int)
          
          P[<zip_1030@137:1>](<zip_1030@137:0>:int,<zip_1030@137:1>:int),
          P[<<zip_1030@143:2>@151:0>]((-1 + <zip_1030@137:0>):int,(-1 + <zip_1030@137:1>):int,(
                                      -1 + <<zip_1030@137:2>@159:0>):int),
          ((<zip_1030@137:0> <> 0) && (<zip_1030@137:1> <> 0))
          |- P[<<zip_1030@137:2>@159:0>](<zip_1030@137:0>:int,<zip_1030@137:1>:int,
                                         <<zip_1030@137:2>@159:0>:int)
          
          P[<zip_1030@143:1>](<zip_1030@143:0>:int,<zip_1030@143:1>:int),
          ((<zip_1030@143:0> = 0) && ((<zip_1030@143:1> = 0) && (<<zip_1030@143:2>@151:0> = <zip_1030@143:0>)))
          |- P[<<zip_1030@143:2>@151:0>](<zip_1030@143:0>:int,<zip_1030@143:1>:int,
                                         <<zip_1030@143:2>@151:0>:int)
          
          P[<zip_1030@137:1>]((1 + <zip_1030@143:0>):int,(1 + <zip_1030@143:1>):int),
          (((1 + <zip_1030@143:0>) <> 0) && ((1 + <zip_1030@143:1>) <> 0))
          |- P[<zip_1030@143:1>](<zip_1030@143:0>:int,<zip_1030@143:1>:int)
          
           (<zip_1030@137:1> = <zip_1030@137:0>) |- P[<zip_1030@137:1>](<zip_1030@137:0>:int,
                                                                    <zip_1030@137:1>:int)
        input to Yhorn:
          P[<fail_1281@180:0>](<fail_1281@180:0>:int)|- bot
          
          P[<<zip_1030@137:2>@159:0>](<f_main_1272@177:0>:int,<f_main_1272@177:0>:int,<f_main_1272@177:1>:int),
          P[<<map_1033@163:1>@175:0>](<f_main_1272@177:1>:int,<f_main_1272@177:3>:int),
          ((<f_main_1272@177:3> <> <f_main_1272@177:0>) && (<fail_1281@180:0> = 1))
          |- P[<fail_1281@180:0>](<fail_1281@180:0>:int)
          
          P[<map_1033@163:0>](<map_1033@163:0>:int),
          P[<<map_1033@166:1>@169:0>](var199:int,var200:int),
          (((1 + var200) = <<map_1033@163:1>@175:0>) && (((1 + var199) = <map_1033@163:0>) && (<map_1033@163:0> <> 0)))
          |- P[<<map_1033@163:1>@175:0>](<map_1033@163:0>:int,<<map_1033@163:1>@175:0>:int)
          
          P[<map_1033@166:0>](<map_1033@166:0>:int),
          ((<<map_1033@166:1>@169:0> = <map_1033@166:0>) && (<map_1033@166:0> = 0))
          |- P[<<map_1033@166:1>@169:0>](<map_1033@166:0>:int,<<map_1033@166:1>@169:0>:int)
          
          P[<map_1033@163:0>](var201:int), ((var201 = (1 + <map_1033@166:0>)) && ((1 + <map_1033@166:0>) <> 0))
          |- P[<map_1033@166:0>](<map_1033@166:0>:int)
          
          P[<<zip_1030@137:2>@159:0>](<f_main_1271@161:0>:int,<f_main_1271@161:0>:int,<map_1033@163:0>:int)|- P[<map_1033@163:0>](
          <map_1033@163:0>:int)
          
          P[<zip_1030@137:1>](<zip_1030@137:0>:int,<zip_1030@137:1>:int),
          P[<<zip_1030@143:2>@151:0>](var202:int,var203:int,var204:int),
          (((1 + var204) = <<zip_1030@137:2>@159:0>) &&
           (((1 + var203) = <zip_1030@137:1>) &&
            (((1 + var202) = <zip_1030@137:0>) && ((<zip_1030@137:1> <> 0) && (<zip_1030@137:0> <> 0)))))
          |- P[<<zip_1030@137:2>@159:0>](<zip_1030@137:0>:int,<zip_1030@137:1>:int,
                                         <<zip_1030@137:2>@159:0>:int)
          
          P[<zip_1030@143:1>](<zip_1030@143:0>:int,<zip_1030@143:1>:int),
          ((<<zip_1030@143:2>@151:0> = <zip_1030@143:0>) && ((<zip_1030@143:1> = 0) && (<zip_1030@143:0> = 0)))
          |- P[<<zip_1030@143:2>@151:0>](<zip_1030@143:0>:int,<zip_1030@143:1>:int,
                                         <<zip_1030@143:2>@151:0>:int)
          
          P[<zip_1030@137:1>](var205:int,var206:int),
          ((var206 = (1 + <zip_1030@143:1>)) &&
           ((var205 = (1 + <zip_1030@143:0>)) && (((1 + <zip_1030@143:1>) <> 0) && ((1 + <zip_1030@143:0>) <> 0))))
          |- P[<zip_1030@143:1>](<zip_1030@143:0>:int,<zip_1030@143:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1281_sep_180_sep_0($1002)) -> 1=0.
(($1002-1=0) & ($1003-$1004<>0)) & (v_sep_map_1033_sep_163_sep_1_sep_175_sep_0($1005,$1003)) & (v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0($1004,$1004,$1005)) -> v_sep_fail_1281_sep_180_sep_0($1002).
(($1006<>0) & (-$1006+$1007+1=0) & ($1008-$1009+1=0)) & (v_sep_map_1033_sep_166_sep_1_sep_169_sep_0($1007,$1008)) & (v_sep_map_1033_sep_163_sep_0($1006)) -> v_sep_map_1033_sep_163_sep_1_sep_175_sep_0($1006,$1009).
(($1010=0) & (-$1010+$1011=0)) & (v_sep_map_1033_sep_166_sep_0($1010)) -> v_sep_map_1033_sep_166_sep_1_sep_169_sep_0($1010,$1011).
(($1010+1<>0) & (-$1010+$1012-1=0)) & (v_sep_map_1033_sep_163_sep_0($1012)) -> v_sep_map_1033_sep_166_sep_0($1010).
(0=0) & (v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0($1013,$1013,$1006)) -> v_sep_map_1033_sep_163_sep_0($1006).
(($1014<>0) & ($1015<>0) & (-$1014+$1016+1=0) & (-$1015+$1017+1=0) & ($1018-$1019+1=0)) & (v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0($1016,$1017,$1018)) & (v_sep_zip_1030_sep_137_sep_1($1014,$1015)) -> v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0($1014,$1015,$1019).
(($1020=0) & ($1021=0) & (-$1020+$1022=0)) & (v_sep_zip_1030_sep_143_sep_1($1020,$1021)) -> v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0($1020,$1021,$1022).
(($1020+1<>0) & ($1021+1<>0) & (-$1020+$1023-1=0) & (-$1021+$1024-1=0)) & (v_sep_zip_1030_sep_137_sep_1($1023,$1024)) -> v_sep_zip_1030_sep_143_sep_1($1020,$1021).
-$1014+$1015=0 -> v_sep_zip_1030_sep_137_sep_1($1014,$1015).


v_sep_fail_1281_sep_180_sep_0: X
v_sep_map_1033_sep_163_sep_0: X
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: X
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: X
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: X
...........................Split disj [48] 0.493924
Reconstrcut: 3 **)

v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: X
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: X
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: X
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: X
.......
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: X
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: X
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: X
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: X
.......Split conj [50] 0.503923
(Reconstrcut: 8 **)
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: X
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: X
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: X
...............
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: X
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: X
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: X
.......Split conj [53] 0.508922
(Reconstrcut: 21 ***)
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: X
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: X
...........................................
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: X
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: X
.......
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: X
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: X
...............................Split conj [63] 0.531919
(Reconstrcut: 14 ****)
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: X
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: X
...................
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: X
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: X
.......
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: X
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: X
...............................Split conj [69] 0.561913
(Reconstrcut: 25 ******)
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: X
...........................
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: X
.......
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: X
...............................Split conj [79] 0.595908
(Reconstrcut: 52 ************)
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...............................................................
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
.......
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...............................
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...............................................
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
.............................................................
v_sep_fail_1281_sep_180_sep_0: (X) | (X)
v_sep_map_1033_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1033_sep_166_sep_0: X
v_sep_map_1033_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_137_sep_1: X
v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_143_sep_1: X
v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...................................................................(0=0) & (v_sep_fail_1281_sep_180_sep_0($1002)) -> 1=0.
(($1002-1=0) & ($1003-$1004<>0)) & (v_sep_map_1033_sep_163_sep_1_sep_175_sep_0($1005,$1003)) & (v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0($1004,$1004,$1005)) -> v_sep_fail_1281_sep_180_sep_0($1002).
(($1006<>0) & (-$1006+$1007+1=0) & ($1008-$1009+1=0)) & (v_sep_map_1033_sep_166_sep_1_sep_169_sep_0($1007,$1008)) & (v_sep_map_1033_sep_163_sep_0($1006)) -> v_sep_map_1033_sep_163_sep_1_sep_175_sep_0($1006,$1009).
(($1010=0) & (-$1010+$1011=0)) & (v_sep_map_1033_sep_166_sep_0($1010)) -> v_sep_map_1033_sep_166_sep_1_sep_169_sep_0($1010,$1011).
(($1010+1<>0) & (-$1010+$1012-1=0)) & (v_sep_map_1033_sep_163_sep_0($1012)) -> v_sep_map_1033_sep_166_sep_0($1010).
(0=0) & (v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0($1013,$1013,$1006)) -> v_sep_map_1033_sep_163_sep_0($1006).
(($1014<>0) & ($1015<>0) & (-$1014+$1016+1=0) & (-$1015+$1017+1=0) & ($1018-$1019+1=0)) & (v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0($1016,$1017,$1018)) & (v_sep_zip_1030_sep_137_sep_1($1014,$1015)) -> v_sep_zip_1030_sep_137_sep_2_sep_159_sep_0($1014,$1015,$1019).
(($1020=0) & ($1021=0) & (-$1020+$1022=0)) & (v_sep_zip_1030_sep_143_sep_1($1020,$1021)) -> v_sep_zip_1030_sep_143_sep_2_sep_151_sep_0($1020,$1021,$1022).
(($1020+1<>0) & ($1021+1<>0) & (-$1020+$1023-1=0) & (-$1021+$1024-1=0)) & (v_sep_zip_1030_sep_137_sep_1($1023,$1024)) -> v_sep_zip_1030_sep_143_sep_1($1020,$1021).
-$1014+$1015=0 -> v_sep_zip_1030_sep_137_sep_1($1014,$1015).

           (<zip_1030@137:1> = <zip_1030@137:0>) |- P[<zip_1030@137:1>](<zip_1030@137:0>:int,
                                                                    <zip_1030@137:1>:int)
        solution:
          P[<fail_1281@180:0>]($1025:bool) = false
          P[<map_1033@163:0>]($1045:int) = true
          P[<<map_1033@163:1>@175:0>]($1028:int,$1030:int) = ($1030 = 1)
          P[<map_1033@166:0>]($1048:int) = true
          P[<<map_1033@166:1>@169:0>]($1040:int,$1042:int) = ($1042 = 0)
          P[<zip_1030@137:1>]($1058:int,$1060:int) = true
          P[<<zip_1030@137:2>@159:0>]($1033:int,$1035:int,$1037:int) = ((1 <= $1033) && ($1035 <= 1))
          P[<zip_1030@143:1>]($1063:int,$1065:int) = true
          P[<<zip_1030@143:2>@151:0>]($1051:int,$1053:int,$1055:int) = ((0 <= $1051) && ($1053 <= 0))
        
      end HcSolver.solve_ub(20314)[4] (0.486926 sec.)
      begin HcSolver.check_validity(21165)[4]
        input:
          P[<fail_1281@180:0>](<fail_1281@180:0>:bool)|- bot
          
          P[<<zip_1030@137:2>@159:0>](<f_main_1272@177:0>:int,<f_main_1272@177:0>:int,<f_main_1272@177:1>:int),
          P[<<map_1033@163:1>@175:0>](<f_main_1272@177:1>:int,<f_main_1272@177:3>:int),
          ((<f_main_1272@177:3> <> <f_main_1272@177:0>) && <fail_1281@180:0>)
          |- P[<fail_1281@180:0>](<fail_1281@180:0>:bool)
          
          P[<map_1033@163:0>](<map_1033@163:0>:int),
          P[<<map_1033@166:1>@169:0>]((-1 + <map_1033@163:0>):int,(-1 + <<map_1033@163:1>@175:0>):int),
          (<map_1033@163:0> <> 0) |- P[<<map_1033@163:1>@175:0>](<map_1033@163:0>:int,
                                                                 <<map_1033@163:1>@175:0>:int)
          
          P[<map_1033@166:0>](<map_1033@166:0>:int),
          ((<map_1033@166:0> = 0) && (<<map_1033@166:1>@169:0> = <map_1033@166:0>))
          |- P[<<map_1033@166:1>@169:0>](<map_1033@166:0>:int,<<map_1033@166:1>@169:0>:int)
          
          P[<map_1033@163:0>]((1 + <map_1033@166:0>):int), ((1 + <map_1033@166:0>) <> 0)
          |- P[<map_1033@166:0>](<map_1033@166:0>:int)
          
          P[<<zip_1030@137:2>@159:0>](<f_main_1271@161:0>:int,<f_main_1271@161:0>:int,<map_1033@163:0>:int)|- P[<map_1033@163:0>](
          <map_1033@163:0>:int)
          
          P[<zip_1030@137:1>](<zip_1030@137:0>:int,<zip_1030@137:1>:int),
          P[<<zip_1030@143:2>@151:0>]((-1 + <zip_1030@137:0>):int,(-1 + <zip_1030@137:1>):int,(
                                      -1 + <<zip_1030@137:2>@159:0>):int),
          ((<zip_1030@137:0> <> 0) && (<zip_1030@137:1> <> 0))
          |- P[<<zip_1030@137:2>@159:0>](<zip_1030@137:0>:int,<zip_1030@137:1>:int,
                                         <<zip_1030@137:2>@159:0>:int)
          
          P[<zip_1030@143:1>](<zip_1030@143:0>:int,<zip_1030@143:1>:int),
          ((<zip_1030@143:0> = 0) && ((<zip_1030@143:1> = 0) && (<<zip_1030@143:2>@151:0> = <zip_1030@143:0>)))
          |- P[<<zip_1030@143:2>@151:0>](<zip_1030@143:0>:int,<zip_1030@143:1>:int,
                                         <<zip_1030@143:2>@151:0>:int)
          
          P[<zip_1030@137:1>]((1 + <zip_1030@143:0>):int,(1 + <zip_1030@143:1>):int),
          (((1 + <zip_1030@143:0>) <> 0) && ((1 + <zip_1030@143:1>) <> 0))
          |- P[<zip_1030@143:1>](<zip_1030@143:0>:int,<zip_1030@143:1>:int)
          
           (<zip_1030@137:1> = <zip_1030@137:0>) |- P[<zip_1030@137:1>](<zip_1030@137:0>:int,
                                                                    <zip_1030@137:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(21165)[4] (0.003999 sec.)
      solution:
        P[<fail_1281@180:0>]($1025:bool) = false
        P[<map_1033@163:0>]($1045:int) = true
        P[<<map_1033@163:1>@175:0>]($1028:int,$1030:int) = ($1030 = 1)
        P[<map_1033@166:0>]($1048:int) = true
        P[<<map_1033@166:1>@169:0>]($1040:int,$1042:int) = ($1042 = 0)
        P[<zip_1030@137:1>]($1058:int,$1060:int) = true
        P[<<zip_1030@137:2>@159:0>]($1033:int,$1035:int,$1037:int) = ((1 <= $1033) && ($1035 <= 1))
        P[<zip_1030@143:1>]($1063:int,$1065:int) = true
        P[<<zip_1030@143:2>@151:0>]($1051:int,$1053:int,$1055:int) = ((0 <= $1051) && ($1053 <= 0))
    end YhornInterface.solve(20313)[3] (0.491925 sec.)
    
  end RefTypeInfer.infer_etrs(16201)[2] (0.655900 sec.)
  refinement types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | ((1 <= v1) && (v2 <= 1))} -> X) -> X
    br_zip_1277: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | ((0 <= v1) && (v2 <= 0))} -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1269: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: v1:int -> (v2:{v2:int | (v2 = 1)} -> X) -> X
    map_1033: v1:int -> (v2:{v2:int | (v2 = 0)} -> X) -> X
    f_map_1270: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1274: var217:int -> var216:unit -> X
    f_zip_1267: var221:int -> var220:int -> var219:unit -> X
    f_zip_1268: var225:int -> var224:int -> var223:unit -> X
    fail_1279: var229:bool -> (var228:unit -> X) -> X
    fail_1280: var233:bool -> (var232:unit -> X) -> X
  abstraction types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: var234:int ->
              var235:int ->
              (var236:int[var236 -> ((1 <= var234) && (var235 <= 1)),
                          var236 -> ((0 <= var234) && (var235 <= 0))] -> X) -> X
    br_zip_1277: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1269: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: var239:int -> (var240:int[var240 -> (var240 = 1),
                                        var240 -> (var240 = 0)] -> X) -> X
    f_map_1270: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:bool -> (v2:unit -> X) -> X
    f_1274: var217:int -> var216:unit -> X
    f_zip_1267: var221:int -> var220:int -> var219:unit -> X
    f_zip_1268: var225:int -> var224:int -> var223:unit -> X
    fail_1279: var229:bool -> (var228:unit -> X) -> X
    fail_1280: var233:bool -> (var232:unit -> X) -> X
  
end AbsTypeInfer.refine(16200)[1] (0.659900 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 0; 0; 1

Program with abstraction types (CEGAR-cycle 5)::
Main: main_1266
  main_1266 -> (rand_int f_1273)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when b_1276 -> (k_zip_1102 x_1031)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when (not b_1276) -> (fail_1279 true (f_zip_1267 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when b_1278 -> (fail_1280 true (f_zip_1268 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when (not b_1278) ->
      (zip_1030 (x_1031 - 1) (y_1032 - 1) (f_zip_1269 x_1031 y_1032 k_zip_1102))
  f_1273 x_1241 -> (main_1035 x_1241 (f_1274 x_1241))
  f_1274 x_1241 x_1238 -> end
  f_main_1271 n_1036 k_main_1199 x_1224 -> (map_1033 x_1224 (f_main_1272 n_1036 x_1224 k_main_1199))
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (x_1202 = n_1036) -> (k_main_1199 ())
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (not (x_1202 = n_1036)) -> (fail_1281 true k_main_1199)
  f_map_1270 x_1034 k_map_1167 x_1171 -> (k_map_1167 (1 + x_1171))
  f_zip_1267 x_1031 y_1032 x_1105 -> _|_
  f_zip_1268 x_1031 y_1032 x_1121 -> _|_
  f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 -> (k_zip_1102 (1 + x_1134))
  fail_1279 b k -> {fail} => (k ())
  fail_1280 b k -> {fail} => (k ())
  fail_1281 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1199 -> (zip_1030 n_1036 n_1036 (f_main_1271 n_1036 k_main_1199))
  map_1033 x_1034 k_map_1167 when (x_1034 = 0) -> (k_map_1167 x_1034)
  map_1033 x_1034 k_map_1167 when (not (x_1034 = 0)) -> (map_1033 (x_1034 - 1) (f_map_1270 x_1034 k_map_1167))
  zip_1030 x_1031 y_1032 k_zip_1102 when (x_1031 = 0) -> (br_zip_1275 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
  zip_1030 x_1031 y_1032 k_zip_1102 when (not (x_1031 = 0)) -> (br_zip_1277 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
Types:
  main_1266 : X
  fail_1279 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1280 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1281 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1033 : (x_1:int[x_1 >= 1; x_1 <= -1; x_1 <= 0] ->
              (x_3:int[x_3 = 1; x_1 <= -1; 2*x_1 >= 1; x_1 >= 3; x_3 = 0] -> X) -> X)
  zip_1030 : (x_1:int ->
              x_2:int[x_1 = x_2] ->
              (x_4:int[x_1 >= 0 && x_2 <= 0; x_1 >= 1 && x_2 <= 1; x_4 >= 0; x_4 >= 1; x_4 <= 0; x_2 = 0] -> X) -> X)
  
(5-1) Abstracting ... DONE!

(5-2) Checking HORS ... DONE!

Error trace::
  main_1266 ... --> 
  f_1273 ... --> 
  main_1035 ... --> 
  zip_1030 [2/2] ... --> 
  br_zip_1277 [2/2] ... --> 
  zip_1030 [1/2] ... --> 
  br_zip_1275 [1/2] ... --> 
  f_zip_1269 ... --> 
  f_main_1271 ... --> 
  map_1033 [2/2] ... --> 
  map_1033 [2/2] ... --> 
  map_1033 [1/2] ... --> 
  f_map_1270 ... --> 
  f_map_1270 ... --> 
  f_main_1272 [2/2] ... --> 
  fail_1281 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 1; 0; 0; 0; 1; 0

(5-3) Checking counter-example ... DONE!

(5-4) Discovering predicates ... 
begin AbsTypeInfer.refine(25378)[1]
  program:
    main_1266  | true = ((Random.int 0) f_1273)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | b_1276 = (k_zip_1102 x_1031)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | (not b_1276) = (fail_1279 true
                                                                    (f_zip_1267 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | b_1278 = (fail_1280 true
                                                                    (f_zip_1268 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | (not b_1278) = (zip_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    (
                                                                    y_1032 - 1)
                                                                    (
                                                                    f_zip_1269 x_1031
                                                                    y_1032
                                                                    k_zip_1102))
    f_1273 x_1241 | true = (main_1035 x_1241
                                      (f_1274 x_1241))
    f_1274 x_1241 x_1238 | true = end
    f_main_1271 n_1036 k_main_1199 x_1224 | true = (map_1033 x_1224
                                                             (f_main_1272 n_1036
                                                                    x_1224
                                                                    k_main_1199))
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (x_1202 = n_1036) = (
    k_main_1199 ())
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (not (x_1202 = n_1036)) = (
    fail_1281 true
              k_main_1199)
    f_map_1270 x_1034 k_map_1167 x_1171 | true = (k_map_1167 (1 + x_1171))
    f_zip_1267 x_1031 y_1032 x_1105 | true = bot
    f_zip_1268 x_1031 y_1032 x_1121 | true = bot
    f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 | true = (k_zip_1102 (
                                                                    1 + x_1134))
    fail_1279 b k | true = (fail ())
    fail_1280 b k | true = (fail ())
    fail_1281 b k | true = (fail ())
    main_1035 n_1036 k_main_1199 | true = (zip_1030 n_1036
                                                    n_1036
                                                    (f_main_1271 n_1036
                                                                 k_main_1199))
    map_1033 x_1034 k_map_1167 | (x_1034 = 0) = (k_map_1167 x_1034)
    map_1033 x_1034 k_map_1167 | (not (x_1034 = 0)) = (map_1033 (x_1034 - 1)
                                                                (f_map_1270 x_1034
                                                                    k_map_1167))
    zip_1030 x_1031 y_1032 k_zip_1102 | (x_1031 = 0) = (br_zip_1275 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    zip_1030 x_1031 y_1032 k_zip_1102 | (not (x_1031 = 0)) = (br_zip_1277 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    main_1266:X
    br_zip_1275:bool -> int -> int -> (int -> X) -> X
    br_zip_1277:bool -> int -> int -> (int -> X) -> X
    f_1273:int -> X
    f_1274:int -> unit -> X
    f_main_1271:int -> (unit -> X) -> int -> X
    f_main_1272:int -> int -> (unit -> X) -> int -> X
    f_map_1270:int -> (int -> X) -> int -> X
    f_zip_1267:int -> int -> unit -> X
    f_zip_1268:int -> int -> unit -> X
    f_zip_1269:int -> int -> (int -> X) -> int -> X
    fail_1279:bool -> (unit -> X) -> X
    fail_1280:bool -> (unit -> X) -> X
    fail_1281:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    map_1033:int -> (int -> X) -> X
    zip_1030:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1275,br_zip_1277,f_1273,f_1274,f_main_1271,f_main_1272,f_map_1270,f_zip_1267,f_zip_1268,f_zip_1269,main_1035
  counterexample: 0:0:0:1:1:0:0:0:0:1:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1273@186:0> = var243)
     [true.(<main_1035@188:0> = <f_1273@186:0>)
      [true.((<zip_1030@190:0> = <main_1035@188:0>) && (<zip_1030@190:1> = <main_1035@188:0>))
       [(not (<zip_1030@190:0> = 0)).
        ((<br_zip_1277@193:0> = (<zip_1030@190:1> = 0)) &&
         ((<br_zip_1277@193:1> = <zip_1030@190:0>) && (<br_zip_1277@193:2> = <zip_1030@190:1>)))
        [(not <br_zip_1277@193:0>).
         ((<zip_1030@196:0> = (<br_zip_1277@193:1> - 1)) && (<zip_1030@196:1> = (<br_zip_1277@193:2> - 1)))
         [(<zip_1030@196:0> = 0).
          ((<br_zip_1275@199:0> = (<zip_1030@196:1> = 0)) &&
           ((<br_zip_1275@199:1> = <zip_1030@196:0>) && (<br_zip_1275@199:2> = <zip_1030@196:1>)))
          [<br_zip_1275@199:0>.(<<br_zip_1275@199:3>@202:0> = <br_zip_1275@199:1>)
           [true.(<<zip_1030@196:2>@204:0> = <<br_zip_1275@199:3>@202:0>)
            [true.
             ((<f_zip_1269@206:0> = <br_zip_1277@193:1>) &&
              ((<f_zip_1269@206:1> = <br_zip_1277@193:2>) && (<f_zip_1269@206:3> = <<zip_1030@196:2>@204:0>)))
             [true.(<<f_zip_1269@206:2>@208:0> = (1 + <f_zip_1269@206:3>))
              [true.(<<br_zip_1277@193:3>@210:0> = <<f_zip_1269@206:2>@208:0>)
               [true.(<<zip_1030@190:2>@212:0> = <<br_zip_1277@193:3>@210:0>)
                [true.((<f_main_1271@214:0> = <main_1035@188:0>) && (<f_main_1271@214:2> = <<zip_1030@190:2>@212:0>))
                 [true.(<map_1033@216:0> = <f_main_1271@214:2>)
                  [(not (<map_1033@216:0> = 0)).(<map_1033@219:0> = (<map_1033@216:0> - 1))
                   [(not (<map_1033@219:0> = 0)).(<map_1033@222:0> = (<map_1033@219:0> - 1))
                    [(<map_1033@222:0> = 0).(<<map_1033@222:1>@225:0> = <map_1033@222:0>)
                     [true.((<f_map_1270@227:0> = <map_1033@219:0>) && (<f_map_1270@227:2> = <<map_1033@222:1>@225:0>))
                      [true.(<<f_map_1270@227:1>@229:0> = (1 + <f_map_1270@227:2>))
                       [true.(<<map_1033@219:1>@231:0> = <<f_map_1270@227:1>@229:0>)
                        [true.
                         ((<f_map_1270@233:0> = <map_1033@216:0>) && (<f_map_1270@233:2> = <<map_1033@219:1>@231:0>))
                         [true.(<<f_map_1270@233:1>@235:0> = (1 + <f_map_1270@233:2>))
                          [true.(<<map_1033@216:1>@237:0> = <<f_map_1270@233:1>@235:0>)
                           [true.
                            ((<f_main_1272@239:0> = <f_main_1271@214:0>) &&
                             ((<f_main_1272@239:1> = <f_main_1271@214:2>) &&
                              (<f_main_1272@239:3> = <<map_1033@216:1>@237:0>)))
                            [(not (<f_main_1272@239:3> = <f_main_1272@239:0>)).(<fail_1281@242:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(25379)[2]
    horn clauses:
      P[<fail_1281@242:0>](<fail_1281@242:0>:bool)|- bot
      
      P[<f_main_1272@239:3>](<f_main_1272@239:0>:int,<f_main_1272@239:1>:int,<f_main_1272@239:3>:int),
      ((<f_main_1272@239:3> <> <f_main_1272@239:0>) && <fail_1281@242:0>)
      |- P[<fail_1281@242:0>](<fail_1281@242:0>:bool)
      
      P[<f_main_1271@214:2>](<f_main_1272@239:0>:int,<f_main_1272@239:1>:int),
      P[<<map_1033@216:1>@237:0>](<f_main_1272@239:1>:int,<f_main_1272@239:3>:int)|- P[<f_main_1272@239:3>](
      <f_main_1272@239:0>:int,<f_main_1272@239:1>:int,<f_main_1272@239:3>:int)
      
      P[<map_1033@216:0>](<map_1033@216:0>:int),
      P[<<f_map_1270@233:1>@235:0>](<map_1033@216:0>:int,<<map_1033@216:1>@237:0>:int), (
      <map_1033@216:0> <> 0) |- P[<<map_1033@216:1>@237:0>](<map_1033@216:0>:int,
                                                            <<map_1033@216:1>@237:0>:int)
      
      P[<f_map_1270@233:2>](<f_map_1270@233:0>:int,(-1 + <<f_map_1270@233:1>@235:0>):int)|- P[<<f_map_1270@233:1>@235:0>](
      <f_map_1270@233:0>:int,<<f_map_1270@233:1>@235:0>:int)
      
      P[<map_1033@216:0>](<f_map_1270@233:0>:int),
      P[<<map_1033@219:1>@231:0>]((-1 + <f_map_1270@233:0>):int,<f_map_1270@233:2>:int), (
      <f_map_1270@233:0> <> 0) |- P[<f_map_1270@233:2>](<f_map_1270@233:0>:int,
                                                        <f_map_1270@233:2>:int)
      
      P[<map_1033@219:0>](<map_1033@219:0>:int),
      P[<<f_map_1270@227:1>@229:0>](<map_1033@219:0>:int,<<map_1033@219:1>@231:0>:int), (
      <map_1033@219:0> <> 0) |- P[<<map_1033@219:1>@231:0>](<map_1033@219:0>:int,
                                                            <<map_1033@219:1>@231:0>:int)
      
      P[<f_map_1270@227:2>](<f_map_1270@227:0>:int,(-1 + <<f_map_1270@227:1>@229:0>):int)|- P[<<f_map_1270@227:1>@229:0>](
      <f_map_1270@227:0>:int,<<f_map_1270@227:1>@229:0>:int)
      
      P[<map_1033@219:0>](<f_map_1270@227:0>:int),
      P[<<map_1033@222:1>@225:0>]((-1 + <f_map_1270@227:0>):int,<f_map_1270@227:2>:int), (
      <f_map_1270@227:0> <> 0) |- P[<f_map_1270@227:2>](<f_map_1270@227:0>:int,
                                                        <f_map_1270@227:2>:int)
      
      P[<map_1033@222:0>](<map_1033@222:0>:int),
      ((<map_1033@222:0> = 0) && (<<map_1033@222:1>@225:0> = <map_1033@222:0>))
      |- P[<<map_1033@222:1>@225:0>](<map_1033@222:0>:int,<<map_1033@222:1>@225:0>:int)
      
      P[<map_1033@219:0>]((1 + <map_1033@222:0>):int), ((1 + <map_1033@222:0>) <> 0)
      |- P[<map_1033@222:0>](<map_1033@222:0>:int)
      
      P[<map_1033@216:0>]((1 + <map_1033@219:0>):int), ((1 + <map_1033@219:0>) <> 0)
      |- P[<map_1033@219:0>](<map_1033@219:0>:int)
      
      P[<f_main_1271@214:2>](<f_main_1271@214:0>:int,<map_1033@216:0>:int)|- P[<map_1033@216:0>](<map_1033@216:0>:int)
      
      P[<main_1035@188:0>](<f_main_1271@214:0>:int),
      P[<<zip_1030@190:2>@212:0>](<f_main_1271@214:0>:int,<f_main_1271@214:0>:int,<f_main_1271@214:2>:int)|- P[<f_main_1271@214:2>](
      <f_main_1271@214:0>:int,<f_main_1271@214:2>:int)
      
      P[<zip_1030@190:1>](<zip_1030@190:0>:int,<zip_1030@190:1>:int),
      P[<<br_zip_1277@193:3>@210:0>]((<zip_1030@190:1> = 0):bool,<zip_1030@190:0>:int,<zip_1030@190:1>:int,<<zip_1030@190:2>@212:0>:int),
      (<zip_1030@190:0> <> 0)
      |- P[<<zip_1030@190:2>@212:0>](<zip_1030@190:0>:int,<zip_1030@190:1>:int,
                                     <<zip_1030@190:2>@212:0>:int)
      
      P[<br_zip_1277@193:2>](<br_zip_1277@193:0>:bool,<br_zip_1277@193:1>:int,<br_zip_1277@193:2>:int),
      P[<<f_zip_1269@206:2>@208:0>](<br_zip_1277@193:1>:int,<br_zip_1277@193:2>:int,<<br_zip_1277@193:3>@210:0>:int),
      (not <br_zip_1277@193:0>)
      |- P[<<br_zip_1277@193:3>@210:0>](<br_zip_1277@193:0>:bool,<br_zip_1277@193:1>:int,
                                        <br_zip_1277@193:2>:int,<<br_zip_1277@193:3>@210:0>:int)
      
      P[<f_zip_1269@206:3>](<f_zip_1269@206:0>:int,<f_zip_1269@206:1>:int,(
                            -1 + <<f_zip_1269@206:2>@208:0>):int)|- P[<<f_zip_1269@206:2>@208:0>](
      <f_zip_1269@206:0>:int,<f_zip_1269@206:1>:int,<<f_zip_1269@206:2>@208:0>:int)
      
      P[<br_zip_1277@193:2>](false:bool,<f_zip_1269@206:0>:int,<f_zip_1269@206:1>:int),
      P[<<zip_1030@196:2>@204:0>]((-1 + <f_zip_1269@206:0>):int,(-1 + <f_zip_1269@206:1>):int,<f_zip_1269@206:3>:int)|- P[<f_zip_1269@206:3>](
      <f_zip_1269@206:0>:int,<f_zip_1269@206:1>:int,<f_zip_1269@206:3>:int)
      
      P[<zip_1030@196:1>](<zip_1030@196:0>:int,<zip_1030@196:1>:int),
      P[<<br_zip_1275@199:3>@202:0>]((<zip_1030@196:1> = 0):bool,<zip_1030@196:0>:int,<zip_1030@196:1>:int,<<zip_1030@196:2>@204:0>:int),
      (<zip_1030@196:0> = 0)
      |- P[<<zip_1030@196:2>@204:0>](<zip_1030@196:0>:int,<zip_1030@196:1>:int,
                                     <<zip_1030@196:2>@204:0>:int)
      
      P[<br_zip_1275@199:2>](<br_zip_1275@199:0>:bool,<br_zip_1275@199:1>:int,<br_zip_1275@199:2>:int),
      ((<<br_zip_1275@199:3>@202:0> = <br_zip_1275@199:1>) && <br_zip_1275@199:0>)
      |- P[<<br_zip_1275@199:3>@202:0>](<br_zip_1275@199:0>:bool,<br_zip_1275@199:1>:int,
                                        <br_zip_1275@199:2>:int,<<br_zip_1275@199:3>@202:0>:int)
      
      P[<zip_1030@196:1>](<br_zip_1275@199:1>:int,<br_zip_1275@199:2>:int),
      ((<br_zip_1275@199:1> = 0) && (<br_zip_1275@199:0> = (<br_zip_1275@199:2> = 0)))
      |- P[<br_zip_1275@199:2>](<br_zip_1275@199:0>:bool,<br_zip_1275@199:1>:int,
                                <br_zip_1275@199:2>:int)
      
      P[<br_zip_1277@193:2>](false:bool,(1 + <zip_1030@196:0>):int,(1 + <zip_1030@196:1>):int)|- P[<zip_1030@196:1>](
      <zip_1030@196:0>:int,<zip_1030@196:1>:int)
      
      P[<zip_1030@190:1>](<br_zip_1277@193:1>:int,<br_zip_1277@193:2>:int),
      ((<br_zip_1277@193:1> <> 0) && (<br_zip_1277@193:0> = (<br_zip_1277@193:2> = 0)))
      |- P[<br_zip_1277@193:2>](<br_zip_1277@193:0>:bool,<br_zip_1277@193:1>:int,
                                <br_zip_1277@193:2>:int)
      
      P[<main_1035@188:0>](<zip_1030@190:1>:int), (<zip_1030@190:1> = <zip_1030@190:0>)
      |- P[<zip_1030@190:1>](<zip_1030@190:0>:int,<zip_1030@190:1>:int)
      
      P[<f_1273@186:0>](<main_1035@188:0>:int)|- P[<main_1035@188:0>](<main_1035@188:0>:int)
      
      |- P[<f_1273@186:0>](<f_1273@186:0>:int)
    call trees:
      <main_1266@183>
        <f_1273@186>
          <main_1035@188>
            <zip_1030@190>
              <br_zip_1277@193>
                <zip_1030@196>
                  <br_zip_1275@199>
                  </<br_zip_1275@199:3>@202>
                </<zip_1030@196:2>@204>
                <f_zip_1269@206>
                </<f_zip_1269@206:2>@208>
              </<br_zip_1277@193:3>@210>
            </<zip_1030@190:2>@212>
            <f_main_1271@214>
              <map_1033@216>
                <map_1033@219>
                  <map_1033@222>
                  </<map_1033@222:1>@225>
                  <f_map_1270@227>
                  </<f_map_1270@227:1>@229>
                </<map_1033@219:1>@231>
                <f_map_1270@233>
                </<f_map_1270@233:1>@235>
              </<map_1033@216:1>@237>
              <f_main_1272@239>
                <fail_1281@242>
    inlined horn clauses:
      P[<fail_1281@242:0>](<fail_1281@242:0>:bool)|- bot
      
      P[<<zip_1030@190:2>@212:0>](<f_main_1272@239:0>:int,<f_main_1272@239:0>:int,<f_main_1272@239:1>:int),
      P[<<map_1033@216:1>@237:0>](<f_main_1272@239:1>:int,<f_main_1272@239:3>:int),
      ((<f_main_1272@239:3> <> <f_main_1272@239:0>) && <fail_1281@242:0>)
      |- P[<fail_1281@242:0>](<fail_1281@242:0>:bool)
      
      P[<map_1033@216:0>](<map_1033@216:0>:int),
      P[<<map_1033@219:1>@231:0>]((-1 + <map_1033@216:0>):int,(-1 + <<map_1033@216:1>@237:0>):int),
      (<map_1033@216:0> <> 0) |- P[<<map_1033@216:1>@237:0>](<map_1033@216:0>:int,
                                                             <<map_1033@216:1>@237:0>:int)
      
      P[<map_1033@219:0>](<map_1033@219:0>:int),
      P[<<map_1033@222:1>@225:0>]((-1 + <map_1033@219:0>):int,(-1 + <<map_1033@219:1>@231:0>):int),
      (<map_1033@219:0> <> 0) |- P[<<map_1033@219:1>@231:0>](<map_1033@219:0>:int,
                                                             <<map_1033@219:1>@231:0>:int)
      
      P[<map_1033@222:0>](<map_1033@222:0>:int),
      ((<map_1033@222:0> = 0) && (<<map_1033@222:1>@225:0> = <map_1033@222:0>))
      |- P[<<map_1033@222:1>@225:0>](<map_1033@222:0>:int,<<map_1033@222:1>@225:0>:int)
      
      P[<map_1033@219:0>]((1 + <map_1033@222:0>):int), ((1 + <map_1033@222:0>) <> 0)
      |- P[<map_1033@222:0>](<map_1033@222:0>:int)
      
      P[<map_1033@216:0>]((1 + <map_1033@219:0>):int), ((1 + <map_1033@219:0>) <> 0)
      |- P[<map_1033@219:0>](<map_1033@219:0>:int)
      
      P[<<zip_1030@190:2>@212:0>](<f_main_1271@214:0>:int,<f_main_1271@214:0>:int,<map_1033@216:0>:int)|- P[<map_1033@216:0>](
      <map_1033@216:0>:int)
      
      P[<zip_1030@190:1>](<zip_1030@190:0>:int,<zip_1030@190:1>:int),
      P[<<zip_1030@196:2>@204:0>]((-1 + <zip_1030@190:0>):int,(-1 + <zip_1030@190:1>):int,(
                                  -1 + <<zip_1030@190:2>@212:0>):int),
      ((<zip_1030@190:0> <> 0) && (<zip_1030@190:1> <> 0))
      |- P[<<zip_1030@190:2>@212:0>](<zip_1030@190:0>:int,<zip_1030@190:1>:int,
                                     <<zip_1030@190:2>@212:0>:int)
      
      P[<zip_1030@196:1>](<zip_1030@196:0>:int,<zip_1030@196:1>:int),
      ((<zip_1030@196:0> = 0) && ((<zip_1030@196:1> = 0) && (<<zip_1030@196:2>@204:0> = <zip_1030@196:0>)))
      |- P[<<zip_1030@196:2>@204:0>](<zip_1030@196:0>:int,<zip_1030@196:1>:int,
                                     <<zip_1030@196:2>@204:0>:int)
      
      P[<zip_1030@190:1>]((1 + <zip_1030@196:0>):int,(1 + <zip_1030@196:1>):int),
      (((1 + <zip_1030@196:0>) <> 0) && ((1 + <zip_1030@196:1>) <> 0))
      |- P[<zip_1030@196:1>](<zip_1030@196:0>:int,<zip_1030@196:1>:int)
      
       (<zip_1030@190:1> = <zip_1030@190:0>) |- P[<zip_1030@190:1>](<zip_1030@190:0>:int,
                                                                    <zip_1030@190:1>:int)
    begin ParamSubstInfer.infer(29525)[3]
      
    end ParamSubstInfer.infer(29525)[3] (0.229965 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(29527)[3]
      
    end RefTypeInfer.elim_coeffs(29527)[3] (0.001000 sec.)
    begin YhornInterface.solve(30058)[3]
      begin HcSolver.solve_ub(30059)[4]
        encoded:
          P[<fail_1281@242:0>](<fail_1281@242:0>:int)|- bot
          
          P[<<zip_1030@190:2>@212:0>](<f_main_1272@239:0>:int,<f_main_1272@239:0>:int,<f_main_1272@239:1>:int),
          P[<<map_1033@216:1>@237:0>](<f_main_1272@239:1>:int,<f_main_1272@239:3>:int),
          ((<f_main_1272@239:3> <> <f_main_1272@239:0>) && (<fail_1281@242:0> = 1))
          |- P[<fail_1281@242:0>](<fail_1281@242:0>:int)
          
          P[<map_1033@216:0>](<map_1033@216:0>:int),
          P[<<map_1033@219:1>@231:0>]((-1 + <map_1033@216:0>):int,(-1 + <<map_1033@216:1>@237:0>):int),
          (<map_1033@216:0> <> 0) |- P[<<map_1033@216:1>@237:0>](<map_1033@216:0>:int,
                                                                 <<map_1033@216:1>@237:0>:int)
          
          P[<map_1033@219:0>](<map_1033@219:0>:int),
          P[<<map_1033@222:1>@225:0>]((-1 + <map_1033@219:0>):int,(-1 + <<map_1033@219:1>@231:0>):int),
          (<map_1033@219:0> <> 0) |- P[<<map_1033@219:1>@231:0>](<map_1033@219:0>:int,
                                                                 <<map_1033@219:1>@231:0>:int)
          
          P[<map_1033@222:0>](<map_1033@222:0>:int),
          ((<map_1033@222:0> = 0) && (<<map_1033@222:1>@225:0> = <map_1033@222:0>))
          |- P[<<map_1033@222:1>@225:0>](<map_1033@222:0>:int,<<map_1033@222:1>@225:0>:int)
          
          P[<map_1033@219:0>]((1 + <map_1033@222:0>):int), ((1 + <map_1033@222:0>) <> 0)
          |- P[<map_1033@222:0>](<map_1033@222:0>:int)
          
          P[<map_1033@216:0>]((1 + <map_1033@219:0>):int), ((1 + <map_1033@219:0>) <> 0)
          |- P[<map_1033@219:0>](<map_1033@219:0>:int)
          
          P[<<zip_1030@190:2>@212:0>](<f_main_1271@214:0>:int,<f_main_1271@214:0>:int,<map_1033@216:0>:int)|- P[<map_1033@216:0>](
          <map_1033@216:0>:int)
          
          P[<zip_1030@190:1>](<zip_1030@190:0>:int,<zip_1030@190:1>:int),
          P[<<zip_1030@196:2>@204:0>]((-1 + <zip_1030@190:0>):int,(-1 + <zip_1030@190:1>):int,(
                                      -1 + <<zip_1030@190:2>@212:0>):int),
          ((<zip_1030@190:0> <> 0) && (<zip_1030@190:1> <> 0))
          |- P[<<zip_1030@190:2>@212:0>](<zip_1030@190:0>:int,<zip_1030@190:1>:int,
                                         <<zip_1030@190:2>@212:0>:int)
          
          P[<zip_1030@196:1>](<zip_1030@196:0>:int,<zip_1030@196:1>:int),
          ((<zip_1030@196:0> = 0) && ((<zip_1030@196:1> = 0) && (<<zip_1030@196:2>@204:0> = <zip_1030@196:0>)))
          |- P[<<zip_1030@196:2>@204:0>](<zip_1030@196:0>:int,<zip_1030@196:1>:int,
                                         <<zip_1030@196:2>@204:0>:int)
          
          P[<zip_1030@190:1>]((1 + <zip_1030@196:0>):int,(1 + <zip_1030@196:1>):int),
          (((1 + <zip_1030@196:0>) <> 0) && ((1 + <zip_1030@196:1>) <> 0))
          |- P[<zip_1030@196:1>](<zip_1030@196:0>:int,<zip_1030@196:1>:int)
          
           (<zip_1030@190:1> = <zip_1030@190:0>) |- P[<zip_1030@190:1>](<zip_1030@190:0>:int,
                                                                    <zip_1030@190:1>:int)
        input to Yhorn:
          P[<fail_1281@242:0>](<fail_1281@242:0>:int)|- bot
          
          P[<<zip_1030@190:2>@212:0>](<f_main_1272@239:0>:int,<f_main_1272@239:0>:int,<f_main_1272@239:1>:int),
          P[<<map_1033@216:1>@237:0>](<f_main_1272@239:1>:int,<f_main_1272@239:3>:int),
          ((<f_main_1272@239:3> <> <f_main_1272@239:0>) && (<fail_1281@242:0> = 1))
          |- P[<fail_1281@242:0>](<fail_1281@242:0>:int)
          
          P[<map_1033@216:0>](<map_1033@216:0>:int),
          P[<<map_1033@219:1>@231:0>](var244:int,var245:int),
          (((1 + var245) = <<map_1033@216:1>@237:0>) && (((1 + var244) = <map_1033@216:0>) && (<map_1033@216:0> <> 0)))
          |- P[<<map_1033@216:1>@237:0>](<map_1033@216:0>:int,<<map_1033@216:1>@237:0>:int)
          
          P[<map_1033@219:0>](<map_1033@219:0>:int),
          P[<<map_1033@222:1>@225:0>](var246:int,var247:int),
          (((1 + var247) = <<map_1033@219:1>@231:0>) && (((1 + var246) = <map_1033@219:0>) && (<map_1033@219:0> <> 0)))
          |- P[<<map_1033@219:1>@231:0>](<map_1033@219:0>:int,<<map_1033@219:1>@231:0>:int)
          
          P[<map_1033@222:0>](<map_1033@222:0>:int),
          ((<<map_1033@222:1>@225:0> = <map_1033@222:0>) && (<map_1033@222:0> = 0))
          |- P[<<map_1033@222:1>@225:0>](<map_1033@222:0>:int,<<map_1033@222:1>@225:0>:int)
          
          P[<map_1033@219:0>](var248:int), ((var248 = (1 + <map_1033@222:0>)) && ((1 + <map_1033@222:0>) <> 0))
          |- P[<map_1033@222:0>](<map_1033@222:0>:int)
          
          P[<map_1033@216:0>](var249:int), ((var249 = (1 + <map_1033@219:0>)) && ((1 + <map_1033@219:0>) <> 0))
          |- P[<map_1033@219:0>](<map_1033@219:0>:int)
          
          P[<<zip_1030@190:2>@212:0>](<f_main_1271@214:0>:int,<f_main_1271@214:0>:int,<map_1033@216:0>:int)|- P[<map_1033@216:0>](
          <map_1033@216:0>:int)
          
          P[<zip_1030@190:1>](<zip_1030@190:0>:int,<zip_1030@190:1>:int),
          P[<<zip_1030@196:2>@204:0>](var250:int,var251:int,var252:int),
          (((1 + var252) = <<zip_1030@190:2>@212:0>) &&
           (((1 + var251) = <zip_1030@190:1>) &&
            (((1 + var250) = <zip_1030@190:0>) && ((<zip_1030@190:1> <> 0) && (<zip_1030@190:0> <> 0)))))
          |- P[<<zip_1030@190:2>@212:0>](<zip_1030@190:0>:int,<zip_1030@190:1>:int,
                                         <<zip_1030@190:2>@212:0>:int)
          
          P[<zip_1030@196:1>](<zip_1030@196:0>:int,<zip_1030@196:1>:int),
          ((<<zip_1030@196:2>@204:0> = <zip_1030@196:0>) && ((<zip_1030@196:1> = 0) && (<zip_1030@196:0> = 0)))
          |- P[<<zip_1030@196:2>@204:0>](<zip_1030@196:0>:int,<zip_1030@196:1>:int,
                                         <<zip_1030@196:2>@204:0>:int)
          
          P[<zip_1030@190:1>](var253:int,var254:int),
          ((var254 = (1 + <zip_1030@196:1>)) &&
           ((var253 = (1 + <zip_1030@196:0>)) && (((1 + <zip_1030@196:1>) <> 0) && ((1 + <zip_1030@196:0>) <> 0))))
          |- P[<zip_1030@196:1>](<zip_1030@196:0>:int,<zip_1030@196:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1281_sep_242_sep_0($3223)) -> 1=0.
(($3223-1=0) & ($3224-$3225<>0)) & (v_sep_map_1033_sep_216_sep_1_sep_237_sep_0($3226,$3224)) & (v_sep_zip_1030_sep_190_sep_2_sep_212_sep_0($3225,$3225,$3226)) -> v_sep_fail_1281_sep_242_sep_0($3223).
(($3227<>0) & (-$3227+$3228+1=0) & ($3229-$3230+1=0)) & (v_sep_map_1033_sep_219_sep_1_sep_231_sep_0($3228,$3229)) & (v_sep_map_1033_sep_216_sep_0($3227)) -> v_sep_map_1033_sep_216_sep_1_sep_237_sep_0($3227,$3230).
(($3231<>0) & (-$3231+$3232+1=0) & ($3233-$3234+1=0)) & (v_sep_map_1033_sep_222_sep_1_sep_225_sep_0($3232,$3233)) & (v_sep_map_1033_sep_219_sep_0($3231)) -> v_sep_map_1033_sep_219_sep_1_sep_231_sep_0($3231,$3234).
(($3235=0) & (-$3235+$3236=0)) & (v_sep_map_1033_sep_222_sep_0($3235)) -> v_sep_map_1033_sep_222_sep_1_sep_225_sep_0($3235,$3236).
(($3235+1<>0) & (-$3235+$3237-1=0)) & (v_sep_map_1033_sep_219_sep_0($3237)) -> v_sep_map_1033_sep_222_sep_0($3235).
(($3231+1<>0) & (-$3231+$3238-1=0)) & (v_sep_map_1033_sep_216_sep_0($3238)) -> v_sep_map_1033_sep_219_sep_0($3231).
(0=0) & (v_sep_zip_1030_sep_190_sep_2_sep_212_sep_0($3239,$3239,$3227)) -> v_sep_map_1033_sep_216_sep_0($3227).
(($3240<>0) & ($3241<>0) & (-$3240+$3242+1=0) & (-$3241+$3243+1=0) & ($3244-$3245+1=0)) & (v_sep_zip_1030_sep_196_sep_2_sep_204_sep_0($3242,$3243,$3244)) & (v_sep_zip_1030_sep_190_sep_1($3240,$3241)) -> v_sep_zip_1030_sep_190_sep_2_sep_212_sep_0($3240,$3241,$3245).
(($3246=0) & ($3247=0) & (-$3246+$3248=0)) & (v_sep_zip_1030_sep_196_sep_1($3246,$3247)) -> v_sep_zip_1030_sep_196_sep_2_sep_204_sep_0($3246,$3247,$3248).
(($3246+1<>0) & ($3247+1<>0) & (-$3246+$3249-1=0) & (-$3247+$3250-1=0)) & (v_sep_zip_1030_sep_190_sep_1($3249,$3250)) -> v_sep_zip_1030_sep_196_sep_1($3246,$3247).
-$3240+$3241=0 -> v_sep_zip_1030_sep_190_sep_1($3240,$3241).


v_sep_fail_1281_sep_242_sep_0: X
v_sep_map_1033_sep_216_sep_0: X
v_sep_map_1033_sep_216_sep_1_sep_237_sep_0: X
v_sep_map_1033_sep_219_sep_0: X
v_sep_map_1033_sep_219_sep_1_sep_231_sep_0: X
v_sep_map_1033_sep_222_sep_0: X
v_sep_map_1033_sep_222_sep_1_sep_225_sep_0: X
v_sep_zip_1030_sep_190_sep_1: X
v_sep_zip_1030_sep_190_sep_2_sep_212_sep_0: X
v_sep_zip_1030_sep_196_sep_1: X
v_sep_zip_1030_sep_196_sep_2_sep_204_sep_0: X
.................................
v_sep_fail_1281_sep_242_sep_0: X
v_sep_map_1033_sep_216_sep_0: X
v_sep_map_1033_sep_216_sep_1_sep_237_sep_0: X
v_sep_map_1033_sep_219_sep_0: X
v_sep_map_1033_sep_219_sep_1_sep_231_sep_0: X
v_sep_map_1033_sep_222_sep_0: X
v_sep_map_1033_sep_222_sep_1_sep_225_sep_0: X
v_sep_zip_1030_sep_190_sep_1: X
v_sep_zip_1030_sep_190_sep_2_sep_212_sep_0: X
v_sep_zip_1030_sep_196_sep_1: X
v_sep_zip_1030_sep_196_sep_2_sep_204_sep_0: X
......
v_sep_fail_1281_sep_242_sep_0: X
v_sep_map_1033_sep_216_sep_0: X
v_sep_map_1033_sep_216_sep_1_sep_237_sep_0: X
v_sep_map_1033_sep_219_sep_0: X
v_sep_map_1033_sep_219_sep_1_sep_231_sep_0: X
v_sep_map_1033_sep_222_sep_0: X
v_sep_map_1033_sep_222_sep_1_sep_225_sep_0: X
v_sep_zip_1030_sep_190_sep_1: X
v_sep_zip_1030_sep_190_sep_2_sep_212_sep_0: X
v_sep_zip_1030_sep_196_sep_1: X
v_sep_zip_1030_sep_196_sep_2_sep_204_sep_0: X
..................
v_sep_fail_1281_sep_242_sep_0: X
v_sep_map_1033_sep_216_sep_0: X
v_sep_map_1033_sep_216_sep_1_sep_237_sep_0: X
v_sep_map_1033_sep_219_sep_0: X
v_sep_map_1033_sep_219_sep_1_sep_231_sep_0: X
v_sep_map_1033_sep_222_sep_0: X
v_sep_map_1033_sep_222_sep_1_sep_225_sep_0: X
v_sep_zip_1030_sep_190_sep_1: X
v_sep_zip_1030_sep_190_sep_2_sep_212_sep_0: X
v_sep_zip_1030_sep_196_sep_1: X
v_sep_zip_1030_sep_196_sep_2_sep_204_sep_0: X
........................
v_sep_fail_1281_sep_242_sep_0: X
v_sep_map_1033_sep_216_sep_0: X
v_sep_map_1033_sep_216_sep_1_sep_237_sep_0: X
v_sep_map_1033_sep_219_sep_0: X
v_sep_map_1033_sep_219_sep_1_sep_231_sep_0: X
v_sep_map_1033_sep_222_sep_0: X
v_sep_map_1033_sep_222_sep_1_sep_225_sep_0: X
v_sep_zip_1030_sep_190_sep_1: X
v_sep_zip_1030_sep_190_sep_2_sep_212_sep_0: X
v_sep_zip_1030_sep_196_sep_1: X
v_sep_zip_1030_sep_196_sep_2_sep_204_sep_0: X
...............................
v_sep_fail_1281_sep_242_sep_0: X
v_sep_map_1033_sep_216_sep_0: X
v_sep_map_1033_sep_216_sep_1_sep_237_sep_0: X
v_sep_map_1033_sep_219_sep_0: X
v_sep_map_1033_sep_219_sep_1_sep_231_sep_0: X
v_sep_map_1033_sep_222_sep_0: X
v_sep_map_1033_sep_222_sep_1_sep_225_sep_0: X
v_sep_zip_1030_sep_190_sep_1: X
v_sep_zip_1030_sep_190_sep_2_sep_212_sep_0: X
v_sep_zip_1030_sep_196_sep_1: X
v_sep_zip_1030_sep_196_sep_2_sep_204_sep_0: X
.................................(0=0) & (v_sep_fail_1281_sep_242_sep_0($3223)) -> 1=0.
(($3223-1=0) & ($3224-$3225<>0)) & (v_sep_map_1033_sep_216_sep_1_sep_237_sep_0($3226,$3224)) & (v_sep_zip_1030_sep_190_sep_2_sep_212_sep_0($3225,$3225,$3226)) -> v_sep_fail_1281_sep_242_sep_0($3223).
(($3227<>0) & (-$3227+$3228+1=0) & ($3229-$3230+1=0)) & (v_sep_map_1033_sep_219_sep_1_sep_231_sep_0($3228,$3229)) & (v_sep_map_1033_sep_216_sep_0($3227)) -> v_sep_map_1033_sep_216_sep_1_sep_237_sep_0($3227,$3230).
(($3231<>0) & (-$3231+$3232+1=0) & ($3233-$3234+1=0)) & (v_sep_map_1033_sep_222_sep_1_sep_225_sep_0($3232,$3233)) & (v_sep_map_1033_sep_219_sep_0($3231)) -> v_sep_map_1033_sep_219_sep_1_sep_231_sep_0($3231,$3234).
(($3235=0) & (-$3235+$3236=0)) & (v_sep_map_1033_sep_222_sep_0($3235)) -> v_sep_map_1033_sep_222_sep_1_sep_225_sep_0($3235,$3236).
(($3235+1<>0) & (-$3235+$3237-1=0)) & (v_sep_map_1033_sep_219_sep_0($3237)) -> v_sep_map_1033_sep_222_sep_0($3235).
(($3231+1<>0) & (-$3231+$3238-1=0)) & (v_sep_map_1033_sep_216_sep_0($3238)) -> v_sep_map_1033_sep_219_sep_0($3231).
(0=0) & (v_sep_zip_1030_sep_190_sep_2_sep_212_sep_0($3239,$3239,$3227)) -> v_sep_map_1033_sep_216_sep_0($3227).
(($3240<>0) & ($3241<>0) & (-$3240+$3242+1=0) & (-$3241+$3243+1=0) & ($3244-$3245+1=0)) & (v_sep_zip_1030_sep_196_sep_2_sep_204_sep_0($3242,$3243,$3244)) & (v_sep_zip_1030_sep_190_sep_1($3240,$3241)) -> v_sep_zip_1030_sep_190_sep_2_sep_212_sep_0($3240,$3241,$3245).
(($3246=0) & ($3247=0) & (-$3246+$3248=0)) & (v_sep_zip_1030_sep_196_sep_1($3246,$3247)) -> v_sep_zip_1030_sep_196_sep_2_sep_204_sep_0($3246,$3247,$3248).
(($3246+1<>0) & ($3247+1<>0) & (-$3246+$3249-1=0) & (-$3247+$3250-1=0)) & (v_sep_zip_1030_sep_190_sep_1($3249,$3250)) -> v_sep_zip_1030_sep_196_sep_1($3246,$3247).
-$3240+$3241=0 -> v_sep_zip_1030_sep_190_sep_1($3240,$3241).

           (<zip_1030@190:1> = <zip_1030@190:0>) |- P[<zip_1030@190:1>](<zip_1030@190:0>:int,
                                                                    <zip_1030@190:1>:int)
        solution:
          P[<fail_1281@242:0>]($3251:bool) = false
          P[<map_1033@216:0>]($3271:int) = ($3271 <= 1)
          P[<<map_1033@216:1>@237:0>]($3254:int,$3256:int) = (5 <= $3254)
          P[<map_1033@219:0>]($3279:int) = ($3279 <= 0)
          P[<<map_1033@219:1>@231:0>]($3266:int,$3268:int) = (2 <= $3266)
          P[<map_1033@222:0>]($3282:int) = ((1 + $3282) <= 0)
          P[<<map_1033@222:1>@225:0>]($3274:int,$3276:int) = (1 <= (3 * $3274))
          P[<zip_1030@190:1>]($3292:int,$3294:int) = true
          P[<<zip_1030@190:2>@212:0>]($3259:int,$3261:int,$3263:int) = ($3263 <= 1)
          P[<zip_1030@196:1>]($3297:int,$3299:int) = true
          P[<<zip_1030@196:2>@204:0>]($3285:int,$3287:int,$3289:int) = ($3289 <= 0)
        
      end HcSolver.solve_ub(30059)[4] (3.027539 sec.)
      begin HcSolver.check_validity(30952)[4]
        input:
          P[<fail_1281@242:0>](<fail_1281@242:0>:bool)|- bot
          
          P[<<zip_1030@190:2>@212:0>](<f_main_1272@239:0>:int,<f_main_1272@239:0>:int,<f_main_1272@239:1>:int),
          P[<<map_1033@216:1>@237:0>](<f_main_1272@239:1>:int,<f_main_1272@239:3>:int),
          ((<f_main_1272@239:3> <> <f_main_1272@239:0>) && <fail_1281@242:0>)
          |- P[<fail_1281@242:0>](<fail_1281@242:0>:bool)
          
          P[<map_1033@216:0>](<map_1033@216:0>:int),
          P[<<map_1033@219:1>@231:0>]((-1 + <map_1033@216:0>):int,(-1 + <<map_1033@216:1>@237:0>):int),
          (<map_1033@216:0> <> 0) |- P[<<map_1033@216:1>@237:0>](<map_1033@216:0>:int,
                                                                 <<map_1033@216:1>@237:0>:int)
          
          P[<map_1033@219:0>](<map_1033@219:0>:int),
          P[<<map_1033@222:1>@225:0>]((-1 + <map_1033@219:0>):int,(-1 + <<map_1033@219:1>@231:0>):int),
          (<map_1033@219:0> <> 0) |- P[<<map_1033@219:1>@231:0>](<map_1033@219:0>:int,
                                                                 <<map_1033@219:1>@231:0>:int)
          
          P[<map_1033@222:0>](<map_1033@222:0>:int),
          ((<map_1033@222:0> = 0) && (<<map_1033@222:1>@225:0> = <map_1033@222:0>))
          |- P[<<map_1033@222:1>@225:0>](<map_1033@222:0>:int,<<map_1033@222:1>@225:0>:int)
          
          P[<map_1033@219:0>]((1 + <map_1033@222:0>):int), ((1 + <map_1033@222:0>) <> 0)
          |- P[<map_1033@222:0>](<map_1033@222:0>:int)
          
          P[<map_1033@216:0>]((1 + <map_1033@219:0>):int), ((1 + <map_1033@219:0>) <> 0)
          |- P[<map_1033@219:0>](<map_1033@219:0>:int)
          
          P[<<zip_1030@190:2>@212:0>](<f_main_1271@214:0>:int,<f_main_1271@214:0>:int,<map_1033@216:0>:int)|- P[<map_1033@216:0>](
          <map_1033@216:0>:int)
          
          P[<zip_1030@190:1>](<zip_1030@190:0>:int,<zip_1030@190:1>:int),
          P[<<zip_1030@196:2>@204:0>]((-1 + <zip_1030@190:0>):int,(-1 + <zip_1030@190:1>):int,(
                                      -1 + <<zip_1030@190:2>@212:0>):int),
          ((<zip_1030@190:0> <> 0) && (<zip_1030@190:1> <> 0))
          |- P[<<zip_1030@190:2>@212:0>](<zip_1030@190:0>:int,<zip_1030@190:1>:int,
                                         <<zip_1030@190:2>@212:0>:int)
          
          P[<zip_1030@196:1>](<zip_1030@196:0>:int,<zip_1030@196:1>:int),
          ((<zip_1030@196:0> = 0) && ((<zip_1030@196:1> = 0) && (<<zip_1030@196:2>@204:0> = <zip_1030@196:0>)))
          |- P[<<zip_1030@196:2>@204:0>](<zip_1030@196:0>:int,<zip_1030@196:1>:int,
                                         <<zip_1030@196:2>@204:0>:int)
          
          P[<zip_1030@190:1>]((1 + <zip_1030@196:0>):int,(1 + <zip_1030@196:1>):int),
          (((1 + <zip_1030@196:0>) <> 0) && ((1 + <zip_1030@196:1>) <> 0))
          |- P[<zip_1030@196:1>](<zip_1030@196:0>:int,<zip_1030@196:1>:int)
          
           (<zip_1030@190:1> = <zip_1030@190:0>) |- P[<zip_1030@190:1>](<zip_1030@190:0>:int,
                                                                    <zip_1030@190:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(30952)[4] (0.003000 sec.)
      solution:
        P[<fail_1281@242:0>]($3251:bool) = false
        P[<map_1033@216:0>]($3271:int) = ($3271 <= 1)
        P[<<map_1033@216:1>@237:0>]($3254:int,$3256:int) = (5 <= $3254)
        P[<map_1033@219:0>]($3279:int) = ($3279 <= 0)
        P[<<map_1033@219:1>@231:0>]($3266:int,$3268:int) = (2 <= $3266)
        P[<map_1033@222:0>]($3282:int) = ((1 + $3282) <= 0)
        P[<<map_1033@222:1>@225:0>]($3274:int,$3276:int) = (1 <= (3 * $3274))
        P[<zip_1030@190:1>]($3292:int,$3294:int) = true
        P[<<zip_1030@190:2>@212:0>]($3259:int,$3261:int,$3263:int) = ($3263 <= 1)
        P[<zip_1030@196:1>]($3297:int,$3299:int) = true
        P[<<zip_1030@196:2>@204:0>]($3285:int,$3287:int,$3289:int) = ($3289 <= 0)
    end YhornInterface.solve(30058)[3] (3.030539 sec.)
    
  end RefTypeInfer.infer_etrs(25379)[2] (3.279502 sec.)
  refinement types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | (v3 <= 1)} -> X) -> X
    br_zip_1277: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | (v3 <= 0)} -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1269: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: v1:{v1:int | (v1 <= 1)} -> (v2:{v2:int | (5 <= v1)} -> X) -> X
    map_1033: v1:{v1:int | (v1 <= 0)} -> (v2:{v2:int | (2 <= v1)} -> X) -> X
    map_1033: v1:{v1:int | ((1 + v1) <= 0)} -> (v2:{v2:int | (1 <= (3 * v1))} -> X) -> X
    f_map_1270: v1:int -> (v2:int -> X) -> v4:int -> X
    f_map_1270: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1274: var265:int -> var264:unit -> X
    f_zip_1267: var269:int -> var268:int -> var267:unit -> X
    f_zip_1268: var273:int -> var272:int -> var271:unit -> X
    fail_1279: var277:bool -> (var276:unit -> X) -> X
    fail_1280: var281:bool -> (var280:unit -> X) -> X
  abstraction types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: var282:int -> var283:int -> (var284:int[var284 -> (var284 <= 1),
                                                      var284 -> (var284 <= 0)] -> X) -> X
    br_zip_1277: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1269: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: var291:int[var291 -> (var291 <= 1),
                         var291 -> (var291 <= 0),
                         var291 -> ((1 + var291) <= 0)] ->
              (var292:int[var292 -> (5 <= var291),
                          var292 -> (2 <= var291),
                          var292 -> (1 <= (3 * var291))] -> X) -> X
    f_map_1270: var295:int -> (var296:int -> X) -> var298:int -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:bool -> (v2:unit -> X) -> X
    f_1274: var265:int -> var264:unit -> X
    f_zip_1267: var269:int -> var268:int -> var267:unit -> X
    f_zip_1268: var273:int -> var272:int -> var271:unit -> X
    fail_1279: var277:bool -> (var276:unit -> X) -> X
    fail_1280: var281:bool -> (var280:unit -> X) -> X
  
end AbsTypeInfer.refine(25378)[1] (3.286500 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 6)::
Main: main_1266
  main_1266 -> (rand_int f_1273)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when b_1276 -> (k_zip_1102 x_1031)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when (not b_1276) -> (fail_1279 true (f_zip_1267 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when b_1278 -> (fail_1280 true (f_zip_1268 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when (not b_1278) ->
      (zip_1030 (x_1031 - 1) (y_1032 - 1) (f_zip_1269 x_1031 y_1032 k_zip_1102))
  f_1273 x_1241 -> (main_1035 x_1241 (f_1274 x_1241))
  f_1274 x_1241 x_1238 -> end
  f_main_1271 n_1036 k_main_1199 x_1224 -> (map_1033 x_1224 (f_main_1272 n_1036 x_1224 k_main_1199))
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (x_1202 = n_1036) -> (k_main_1199 ())
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (not (x_1202 = n_1036)) -> (fail_1281 true k_main_1199)
  f_map_1270 x_1034 k_map_1167 x_1171 -> (k_map_1167 (1 + x_1171))
  f_zip_1267 x_1031 y_1032 x_1105 -> _|_
  f_zip_1268 x_1031 y_1032 x_1121 -> _|_
  f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 -> (k_zip_1102 (1 + x_1134))
  fail_1279 b k -> {fail} => (k ())
  fail_1280 b k -> {fail} => (k ())
  fail_1281 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1199 -> (zip_1030 n_1036 n_1036 (f_main_1271 n_1036 k_main_1199))
  map_1033 x_1034 k_map_1167 when (x_1034 = 0) -> (k_map_1167 x_1034)
  map_1033 x_1034 k_map_1167 when (not (x_1034 = 0)) -> (map_1033 (x_1034 - 1) (f_map_1270 x_1034 k_map_1167))
  zip_1030 x_1031 y_1032 k_zip_1102 when (x_1031 = 0) -> (br_zip_1275 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
  zip_1030 x_1031 y_1032 k_zip_1102 when (not (x_1031 = 0)) -> (br_zip_1277 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
Types:
  main_1266 : X
  fail_1279 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1280 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1281 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1033 : (x_1:int[x_1 <= 1; x_1 >= 1; x_1 <= -1; x_1 <= 0] ->
              (x_3:int[x_1 >= 2; x_1 >= 5; x_3 = 1; x_1 <= -1; 2*x_1 >= 1; x_1 >= 3; x_3 = 0] -> X) -> X)
  zip_1030 : (x_1:int ->
              x_2:int[x_1 = x_2] ->
              (x_4:int[x_4 <= 1; x_1 >= 0 && x_2 <= 0; x_1 >= 1 && x_2 <= 1; x_4 >= 0; x_4 >= 1; x_4 <= 0; x_2 = 0] -> X) -> X)
  
(6-1) Abstracting ... DONE!

(6-2) Checking HORS ... DONE!

Error trace::
  main_1266 ... --> 
  f_1273 ... --> 
  main_1035 ... --> 
  zip_1030 [2/2] ... --> 
  br_zip_1277 [2/2] ... --> 
  zip_1030 [2/2] ... --> 
  br_zip_1277 [2/2] ... --> 
  zip_1030 [1/2] ... --> 
  br_zip_1275 [1/2] ... --> 
  f_zip_1269 ... --> 
  f_zip_1269 ... --> 
  f_main_1271 ... --> 
  map_1033 [2/2] ... --> 
  map_1033 [1/2] ... --> 
  f_map_1270 ... --> 
  f_main_1272 [2/2] ... --> 
  fail_1281 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 0; 0; 1; 0

(6-3) Checking counter-example ... DONE!

(6-4) Discovering predicates ... 
begin AbsTypeInfer.refine(37207)[1]
  program:
    main_1266  | true = ((Random.int 0) f_1273)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | b_1276 = (k_zip_1102 x_1031)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | (not b_1276) = (fail_1279 true
                                                                    (f_zip_1267 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | b_1278 = (fail_1280 true
                                                                    (f_zip_1268 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | (not b_1278) = (zip_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    (
                                                                    y_1032 - 1)
                                                                    (
                                                                    f_zip_1269 x_1031
                                                                    y_1032
                                                                    k_zip_1102))
    f_1273 x_1241 | true = (main_1035 x_1241
                                      (f_1274 x_1241))
    f_1274 x_1241 x_1238 | true = end
    f_main_1271 n_1036 k_main_1199 x_1224 | true = (map_1033 x_1224
                                                             (f_main_1272 n_1036
                                                                    x_1224
                                                                    k_main_1199))
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (x_1202 = n_1036) = (
    k_main_1199 ())
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (not (x_1202 = n_1036)) = (
    fail_1281 true
              k_main_1199)
    f_map_1270 x_1034 k_map_1167 x_1171 | true = (k_map_1167 (1 + x_1171))
    f_zip_1267 x_1031 y_1032 x_1105 | true = bot
    f_zip_1268 x_1031 y_1032 x_1121 | true = bot
    f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 | true = (k_zip_1102 (
                                                                    1 + x_1134))
    fail_1279 b k | true = (fail ())
    fail_1280 b k | true = (fail ())
    fail_1281 b k | true = (fail ())
    main_1035 n_1036 k_main_1199 | true = (zip_1030 n_1036
                                                    n_1036
                                                    (f_main_1271 n_1036
                                                                 k_main_1199))
    map_1033 x_1034 k_map_1167 | (x_1034 = 0) = (k_map_1167 x_1034)
    map_1033 x_1034 k_map_1167 | (not (x_1034 = 0)) = (map_1033 (x_1034 - 1)
                                                                (f_map_1270 x_1034
                                                                    k_map_1167))
    zip_1030 x_1031 y_1032 k_zip_1102 | (x_1031 = 0) = (br_zip_1275 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    zip_1030 x_1031 y_1032 k_zip_1102 | (not (x_1031 = 0)) = (br_zip_1277 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    main_1266:X
    br_zip_1275:bool -> int -> int -> (int -> X) -> X
    br_zip_1277:bool -> int -> int -> (int -> X) -> X
    f_1273:int -> X
    f_1274:int -> unit -> X
    f_main_1271:int -> (unit -> X) -> int -> X
    f_main_1272:int -> int -> (unit -> X) -> int -> X
    f_map_1270:int -> (int -> X) -> int -> X
    f_zip_1267:int -> int -> unit -> X
    f_zip_1268:int -> int -> unit -> X
    f_zip_1269:int -> int -> (int -> X) -> int -> X
    fail_1279:bool -> (unit -> X) -> X
    fail_1280:bool -> (unit -> X) -> X
    fail_1281:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    map_1033:int -> (int -> X) -> X
    zip_1030:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1275,br_zip_1277,f_1273,f_1274,f_main_1271,f_main_1272,f_map_1270,f_zip_1267,f_zip_1268,f_zip_1269,main_1035
  counterexample: 0:0:0:1:1:1:1:0:0:0:0:0:1:0:0:1:0
  error traces:
    [true.nop(<f_1273@248:0> = var300)
     [true.(<main_1035@250:0> = <f_1273@248:0>)
      [true.((<zip_1030@252:0> = <main_1035@250:0>) && (<zip_1030@252:1> = <main_1035@250:0>))
       [(not (<zip_1030@252:0> = 0)).
        ((<br_zip_1277@255:0> = (<zip_1030@252:1> = 0)) &&
         ((<br_zip_1277@255:1> = <zip_1030@252:0>) && (<br_zip_1277@255:2> = <zip_1030@252:1>)))
        [(not <br_zip_1277@255:0>).
         ((<zip_1030@258:0> = (<br_zip_1277@255:1> - 1)) && (<zip_1030@258:1> = (<br_zip_1277@255:2> - 1)))
         [(not (<zip_1030@258:0> = 0)).
          ((<br_zip_1277@261:0> = (<zip_1030@258:1> = 0)) &&
           ((<br_zip_1277@261:1> = <zip_1030@258:0>) && (<br_zip_1277@261:2> = <zip_1030@258:1>)))
          [(not <br_zip_1277@261:0>).
           ((<zip_1030@264:0> = (<br_zip_1277@261:1> - 1)) && (<zip_1030@264:1> = (<br_zip_1277@261:2> - 1)))
           [(<zip_1030@264:0> = 0).
            ((<br_zip_1275@267:0> = (<zip_1030@264:1> = 0)) &&
             ((<br_zip_1275@267:1> = <zip_1030@264:0>) && (<br_zip_1275@267:2> = <zip_1030@264:1>)))
            [<br_zip_1275@267:0>.(<<br_zip_1275@267:3>@270:0> = <br_zip_1275@267:1>)
             [true.(<<zip_1030@264:2>@272:0> = <<br_zip_1275@267:3>@270:0>)
              [true.
               ((<f_zip_1269@274:0> = <br_zip_1277@261:1>) &&
                ((<f_zip_1269@274:1> = <br_zip_1277@261:2>) && (<f_zip_1269@274:3> = <<zip_1030@264:2>@272:0>)))
               [true.(<<f_zip_1269@274:2>@276:0> = (1 + <f_zip_1269@274:3>))
                [true.(<<br_zip_1277@261:3>@278:0> = <<f_zip_1269@274:2>@276:0>)
                 [true.(<<zip_1030@258:2>@280:0> = <<br_zip_1277@261:3>@278:0>)
                  [true.
                   ((<f_zip_1269@282:0> = <br_zip_1277@255:1>) &&
                    ((<f_zip_1269@282:1> = <br_zip_1277@255:2>) && (<f_zip_1269@282:3> = <<zip_1030@258:2>@280:0>)))
                   [true.(<<f_zip_1269@282:2>@284:0> = (1 + <f_zip_1269@282:3>))
                    [true.(<<br_zip_1277@255:3>@286:0> = <<f_zip_1269@282:2>@284:0>)
                     [true.(<<zip_1030@252:2>@288:0> = <<br_zip_1277@255:3>@286:0>)
                      [true.
                       ((<f_main_1271@290:0> = <main_1035@250:0>) && (<f_main_1271@290:2> = <<zip_1030@252:2>@288:0>))
                       [true.(<map_1033@292:0> = <f_main_1271@290:2>)
                        [(not (<map_1033@292:0> = 0)).(<map_1033@295:0> = (<map_1033@292:0> - 1))
                         [(<map_1033@295:0> = 0).(<<map_1033@295:1>@298:0> = <map_1033@295:0>)
                          [true.
                           ((<f_map_1270@300:0> = <map_1033@292:0>) && (<f_map_1270@300:2> = <<map_1033@295:1>@298:0>))
                           [true.(<<f_map_1270@300:1>@302:0> = (1 + <f_map_1270@300:2>))
                            [true.(<<map_1033@292:1>@304:0> = <<f_map_1270@300:1>@302:0>)
                             [true.
                              ((<f_main_1272@306:0> = <f_main_1271@290:0>) &&
                               ((<f_main_1272@306:1> = <f_main_1271@290:2>) &&
                                (<f_main_1272@306:3> = <<map_1033@292:1>@304:0>)))
                              [(not (<f_main_1272@306:3> = <f_main_1272@306:0>)).(<fail_1281@309:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(37208)[2]
    horn clauses:
      P[<fail_1281@309:0>](<fail_1281@309:0>:bool)|- bot
      
      P[<f_main_1272@306:3>](<f_main_1272@306:0>:int,<f_main_1272@306:1>:int,<f_main_1272@306:3>:int),
      ((<f_main_1272@306:3> <> <f_main_1272@306:0>) && <fail_1281@309:0>)
      |- P[<fail_1281@309:0>](<fail_1281@309:0>:bool)
      
      P[<f_main_1271@290:2>](<f_main_1272@306:0>:int,<f_main_1272@306:1>:int),
      P[<<map_1033@292:1>@304:0>](<f_main_1272@306:1>:int,<f_main_1272@306:3>:int)|- P[<f_main_1272@306:3>](
      <f_main_1272@306:0>:int,<f_main_1272@306:1>:int,<f_main_1272@306:3>:int)
      
      P[<map_1033@292:0>](<map_1033@292:0>:int),
      P[<<f_map_1270@300:1>@302:0>](<map_1033@292:0>:int,<<map_1033@292:1>@304:0>:int), (
      <map_1033@292:0> <> 0) |- P[<<map_1033@292:1>@304:0>](<map_1033@292:0>:int,
                                                            <<map_1033@292:1>@304:0>:int)
      
      P[<f_map_1270@300:2>](<f_map_1270@300:0>:int,(-1 + <<f_map_1270@300:1>@302:0>):int)|- P[<<f_map_1270@300:1>@302:0>](
      <f_map_1270@300:0>:int,<<f_map_1270@300:1>@302:0>:int)
      
      P[<map_1033@292:0>](<f_map_1270@300:0>:int),
      P[<<map_1033@295:1>@298:0>]((-1 + <f_map_1270@300:0>):int,<f_map_1270@300:2>:int), (
      <f_map_1270@300:0> <> 0) |- P[<f_map_1270@300:2>](<f_map_1270@300:0>:int,
                                                        <f_map_1270@300:2>:int)
      
      P[<map_1033@295:0>](<map_1033@295:0>:int),
      ((<map_1033@295:0> = 0) && (<<map_1033@295:1>@298:0> = <map_1033@295:0>))
      |- P[<<map_1033@295:1>@298:0>](<map_1033@295:0>:int,<<map_1033@295:1>@298:0>:int)
      
      P[<map_1033@292:0>]((1 + <map_1033@295:0>):int), ((1 + <map_1033@295:0>) <> 0)
      |- P[<map_1033@295:0>](<map_1033@295:0>:int)
      
      P[<f_main_1271@290:2>](<f_main_1271@290:0>:int,<map_1033@292:0>:int)|- P[<map_1033@292:0>](<map_1033@292:0>:int)
      
      P[<main_1035@250:0>](<f_main_1271@290:0>:int),
      P[<<zip_1030@252:2>@288:0>](<f_main_1271@290:0>:int,<f_main_1271@290:0>:int,<f_main_1271@290:2>:int)|- P[<f_main_1271@290:2>](
      <f_main_1271@290:0>:int,<f_main_1271@290:2>:int)
      
      P[<zip_1030@252:1>](<zip_1030@252:0>:int,<zip_1030@252:1>:int),
      P[<<br_zip_1277@255:3>@286:0>]((<zip_1030@252:1> = 0):bool,<zip_1030@252:0>:int,<zip_1030@252:1>:int,<<zip_1030@252:2>@288:0>:int),
      (<zip_1030@252:0> <> 0)
      |- P[<<zip_1030@252:2>@288:0>](<zip_1030@252:0>:int,<zip_1030@252:1>:int,
                                     <<zip_1030@252:2>@288:0>:int)
      
      P[<br_zip_1277@255:2>](<br_zip_1277@255:0>:bool,<br_zip_1277@255:1>:int,<br_zip_1277@255:2>:int),
      P[<<f_zip_1269@282:2>@284:0>](<br_zip_1277@255:1>:int,<br_zip_1277@255:2>:int,<<br_zip_1277@255:3>@286:0>:int),
      (not <br_zip_1277@255:0>)
      |- P[<<br_zip_1277@255:3>@286:0>](<br_zip_1277@255:0>:bool,<br_zip_1277@255:1>:int,
                                        <br_zip_1277@255:2>:int,<<br_zip_1277@255:3>@286:0>:int)
      
      P[<f_zip_1269@282:3>](<f_zip_1269@282:0>:int,<f_zip_1269@282:1>:int,(
                            -1 + <<f_zip_1269@282:2>@284:0>):int)|- P[<<f_zip_1269@282:2>@284:0>](
      <f_zip_1269@282:0>:int,<f_zip_1269@282:1>:int,<<f_zip_1269@282:2>@284:0>:int)
      
      P[<br_zip_1277@255:2>](false:bool,<f_zip_1269@282:0>:int,<f_zip_1269@282:1>:int),
      P[<<zip_1030@258:2>@280:0>]((-1 + <f_zip_1269@282:0>):int,(-1 + <f_zip_1269@282:1>):int,<f_zip_1269@282:3>:int)|- P[<f_zip_1269@282:3>](
      <f_zip_1269@282:0>:int,<f_zip_1269@282:1>:int,<f_zip_1269@282:3>:int)
      
      P[<zip_1030@258:1>](<zip_1030@258:0>:int,<zip_1030@258:1>:int),
      P[<<br_zip_1277@261:3>@278:0>]((<zip_1030@258:1> = 0):bool,<zip_1030@258:0>:int,<zip_1030@258:1>:int,<<zip_1030@258:2>@280:0>:int),
      (<zip_1030@258:0> <> 0)
      |- P[<<zip_1030@258:2>@280:0>](<zip_1030@258:0>:int,<zip_1030@258:1>:int,
                                     <<zip_1030@258:2>@280:0>:int)
      
      P[<br_zip_1277@261:2>](<br_zip_1277@261:0>:bool,<br_zip_1277@261:1>:int,<br_zip_1277@261:2>:int),
      P[<<f_zip_1269@274:2>@276:0>](<br_zip_1277@261:1>:int,<br_zip_1277@261:2>:int,<<br_zip_1277@261:3>@278:0>:int),
      (not <br_zip_1277@261:0>)
      |- P[<<br_zip_1277@261:3>@278:0>](<br_zip_1277@261:0>:bool,<br_zip_1277@261:1>:int,
                                        <br_zip_1277@261:2>:int,<<br_zip_1277@261:3>@278:0>:int)
      
      P[<f_zip_1269@274:3>](<f_zip_1269@274:0>:int,<f_zip_1269@274:1>:int,(
                            -1 + <<f_zip_1269@274:2>@276:0>):int)|- P[<<f_zip_1269@274:2>@276:0>](
      <f_zip_1269@274:0>:int,<f_zip_1269@274:1>:int,<<f_zip_1269@274:2>@276:0>:int)
      
      P[<br_zip_1277@261:2>](false:bool,<f_zip_1269@274:0>:int,<f_zip_1269@274:1>:int),
      P[<<zip_1030@264:2>@272:0>]((-1 + <f_zip_1269@274:0>):int,(-1 + <f_zip_1269@274:1>):int,<f_zip_1269@274:3>:int)|- P[<f_zip_1269@274:3>](
      <f_zip_1269@274:0>:int,<f_zip_1269@274:1>:int,<f_zip_1269@274:3>:int)
      
      P[<zip_1030@264:1>](<zip_1030@264:0>:int,<zip_1030@264:1>:int),
      P[<<br_zip_1275@267:3>@270:0>]((<zip_1030@264:1> = 0):bool,<zip_1030@264:0>:int,<zip_1030@264:1>:int,<<zip_1030@264:2>@272:0>:int),
      (<zip_1030@264:0> = 0)
      |- P[<<zip_1030@264:2>@272:0>](<zip_1030@264:0>:int,<zip_1030@264:1>:int,
                                     <<zip_1030@264:2>@272:0>:int)
      
      P[<br_zip_1275@267:2>](<br_zip_1275@267:0>:bool,<br_zip_1275@267:1>:int,<br_zip_1275@267:2>:int),
      ((<<br_zip_1275@267:3>@270:0> = <br_zip_1275@267:1>) && <br_zip_1275@267:0>)
      |- P[<<br_zip_1275@267:3>@270:0>](<br_zip_1275@267:0>:bool,<br_zip_1275@267:1>:int,
                                        <br_zip_1275@267:2>:int,<<br_zip_1275@267:3>@270:0>:int)
      
      P[<zip_1030@264:1>](<br_zip_1275@267:1>:int,<br_zip_1275@267:2>:int),
      ((<br_zip_1275@267:1> = 0) && (<br_zip_1275@267:0> = (<br_zip_1275@267:2> = 0)))
      |- P[<br_zip_1275@267:2>](<br_zip_1275@267:0>:bool,<br_zip_1275@267:1>:int,
                                <br_zip_1275@267:2>:int)
      
      P[<br_zip_1277@261:2>](false:bool,(1 + <zip_1030@264:0>):int,(1 + <zip_1030@264:1>):int)|- P[<zip_1030@264:1>](
      <zip_1030@264:0>:int,<zip_1030@264:1>:int)
      
      P[<zip_1030@258:1>](<br_zip_1277@261:1>:int,<br_zip_1277@261:2>:int),
      ((<br_zip_1277@261:1> <> 0) && (<br_zip_1277@261:0> = (<br_zip_1277@261:2> = 0)))
      |- P[<br_zip_1277@261:2>](<br_zip_1277@261:0>:bool,<br_zip_1277@261:1>:int,
                                <br_zip_1277@261:2>:int)
      
      P[<br_zip_1277@255:2>](false:bool,(1 + <zip_1030@258:0>):int,(1 + <zip_1030@258:1>):int)|- P[<zip_1030@258:1>](
      <zip_1030@258:0>:int,<zip_1030@258:1>:int)
      
      P[<zip_1030@252:1>](<br_zip_1277@255:1>:int,<br_zip_1277@255:2>:int),
      ((<br_zip_1277@255:1> <> 0) && (<br_zip_1277@255:0> = (<br_zip_1277@255:2> = 0)))
      |- P[<br_zip_1277@255:2>](<br_zip_1277@255:0>:bool,<br_zip_1277@255:1>:int,
                                <br_zip_1277@255:2>:int)
      
      P[<main_1035@250:0>](<zip_1030@252:1>:int), (<zip_1030@252:1> = <zip_1030@252:0>)
      |- P[<zip_1030@252:1>](<zip_1030@252:0>:int,<zip_1030@252:1>:int)
      
      P[<f_1273@248:0>](<main_1035@250:0>:int)|- P[<main_1035@250:0>](<main_1035@250:0>:int)
      
      |- P[<f_1273@248:0>](<f_1273@248:0>:int)
    call trees:
      <main_1266@245>
        <f_1273@248>
          <main_1035@250>
            <zip_1030@252>
              <br_zip_1277@255>
                <zip_1030@258>
                  <br_zip_1277@261>
                    <zip_1030@264>
                      <br_zip_1275@267>
                      </<br_zip_1275@267:3>@270>
                    </<zip_1030@264:2>@272>
                    <f_zip_1269@274>
                    </<f_zip_1269@274:2>@276>
                  </<br_zip_1277@261:3>@278>
                </<zip_1030@258:2>@280>
                <f_zip_1269@282>
                </<f_zip_1269@282:2>@284>
              </<br_zip_1277@255:3>@286>
            </<zip_1030@252:2>@288>
            <f_main_1271@290>
              <map_1033@292>
                <map_1033@295>
                </<map_1033@295:1>@298>
                <f_map_1270@300>
                </<f_map_1270@300:1>@302>
              </<map_1033@292:1>@304>
              <f_main_1272@306>
                <fail_1281@309>
    inlined horn clauses:
      P[<fail_1281@309:0>](<fail_1281@309:0>:bool)|- bot
      
      P[<<zip_1030@252:2>@288:0>](<f_main_1272@306:0>:int,<f_main_1272@306:0>:int,<f_main_1272@306:1>:int),
      P[<<map_1033@292:1>@304:0>](<f_main_1272@306:1>:int,<f_main_1272@306:3>:int),
      ((<f_main_1272@306:3> <> <f_main_1272@306:0>) && <fail_1281@309:0>)
      |- P[<fail_1281@309:0>](<fail_1281@309:0>:bool)
      
      P[<map_1033@292:0>](<map_1033@292:0>:int),
      P[<<map_1033@295:1>@298:0>]((-1 + <map_1033@292:0>):int,(-1 + <<map_1033@292:1>@304:0>):int),
      (<map_1033@292:0> <> 0) |- P[<<map_1033@292:1>@304:0>](<map_1033@292:0>:int,
                                                             <<map_1033@292:1>@304:0>:int)
      
      P[<map_1033@295:0>](<map_1033@295:0>:int),
      ((<map_1033@295:0> = 0) && (<<map_1033@295:1>@298:0> = <map_1033@295:0>))
      |- P[<<map_1033@295:1>@298:0>](<map_1033@295:0>:int,<<map_1033@295:1>@298:0>:int)
      
      P[<map_1033@292:0>]((1 + <map_1033@295:0>):int), ((1 + <map_1033@295:0>) <> 0)
      |- P[<map_1033@295:0>](<map_1033@295:0>:int)
      
      P[<<zip_1030@252:2>@288:0>](<f_main_1271@290:0>:int,<f_main_1271@290:0>:int,<map_1033@292:0>:int)|- P[<map_1033@292:0>](
      <map_1033@292:0>:int)
      
      P[<zip_1030@252:1>](<zip_1030@252:0>:int,<zip_1030@252:1>:int),
      P[<<zip_1030@258:2>@280:0>]((-1 + <zip_1030@252:0>):int,(-1 + <zip_1030@252:1>):int,(
                                  -1 + <<zip_1030@252:2>@288:0>):int),
      ((<zip_1030@252:0> <> 0) && (<zip_1030@252:1> <> 0))
      |- P[<<zip_1030@252:2>@288:0>](<zip_1030@252:0>:int,<zip_1030@252:1>:int,
                                     <<zip_1030@252:2>@288:0>:int)
      
      P[<zip_1030@258:1>](<zip_1030@258:0>:int,<zip_1030@258:1>:int),
      P[<<zip_1030@264:2>@272:0>]((-1 + <zip_1030@258:0>):int,(-1 + <zip_1030@258:1>):int,(
                                  -1 + <<zip_1030@258:2>@280:0>):int),
      ((<zip_1030@258:0> <> 0) && (<zip_1030@258:1> <> 0))
      |- P[<<zip_1030@258:2>@280:0>](<zip_1030@258:0>:int,<zip_1030@258:1>:int,
                                     <<zip_1030@258:2>@280:0>:int)
      
      P[<zip_1030@264:1>](<zip_1030@264:0>:int,<zip_1030@264:1>:int),
      ((<zip_1030@264:0> = 0) && ((<zip_1030@264:1> = 0) && (<<zip_1030@264:2>@272:0> = <zip_1030@264:0>)))
      |- P[<<zip_1030@264:2>@272:0>](<zip_1030@264:0>:int,<zip_1030@264:1>:int,
                                     <<zip_1030@264:2>@272:0>:int)
      
      P[<zip_1030@258:1>]((1 + <zip_1030@264:0>):int,(1 + <zip_1030@264:1>):int),
      (((1 + <zip_1030@264:0>) <> 0) && ((1 + <zip_1030@264:1>) <> 0))
      |- P[<zip_1030@264:1>](<zip_1030@264:0>:int,<zip_1030@264:1>:int)
      
      P[<zip_1030@252:1>]((1 + <zip_1030@258:0>):int,(1 + <zip_1030@258:1>):int),
      (((1 + <zip_1030@258:0>) <> 0) && ((1 + <zip_1030@258:1>) <> 0))
      |- P[<zip_1030@258:1>](<zip_1030@258:0>:int,<zip_1030@258:1>:int)
      
       (<zip_1030@252:1> = <zip_1030@252:0>) |- P[<zip_1030@252:1>](<zip_1030@252:0>:int,
                                                                    <zip_1030@252:1>:int)
    begin ParamSubstInfer.infer(42208)[3]
      
    end ParamSubstInfer.infer(42208)[3] (0.396940 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(42210)[3]
      
    end RefTypeInfer.elim_coeffs(42210)[3] (0.000999 sec.)
    begin YhornInterface.solve(42829)[3]
      begin HcSolver.solve_ub(42830)[4]
        encoded:
          P[<fail_1281@309:0>](<fail_1281@309:0>:int)|- bot
          
          P[<<zip_1030@252:2>@288:0>](<f_main_1272@306:0>:int,<f_main_1272@306:0>:int,<f_main_1272@306:1>:int),
          P[<<map_1033@292:1>@304:0>](<f_main_1272@306:1>:int,<f_main_1272@306:3>:int),
          ((<f_main_1272@306:3> <> <f_main_1272@306:0>) && (<fail_1281@309:0> = 1))
          |- P[<fail_1281@309:0>](<fail_1281@309:0>:int)
          
          P[<map_1033@292:0>](<map_1033@292:0>:int),
          P[<<map_1033@295:1>@298:0>]((-1 + <map_1033@292:0>):int,(-1 + <<map_1033@292:1>@304:0>):int),
          (<map_1033@292:0> <> 0) |- P[<<map_1033@292:1>@304:0>](<map_1033@292:0>:int,
                                                                 <<map_1033@292:1>@304:0>:int)
          
          P[<map_1033@295:0>](<map_1033@295:0>:int),
          ((<map_1033@295:0> = 0) && (<<map_1033@295:1>@298:0> = <map_1033@295:0>))
          |- P[<<map_1033@295:1>@298:0>](<map_1033@295:0>:int,<<map_1033@295:1>@298:0>:int)
          
          P[<map_1033@292:0>]((1 + <map_1033@295:0>):int), ((1 + <map_1033@295:0>) <> 0)
          |- P[<map_1033@295:0>](<map_1033@295:0>:int)
          
          P[<<zip_1030@252:2>@288:0>](<f_main_1271@290:0>:int,<f_main_1271@290:0>:int,<map_1033@292:0>:int)|- P[<map_1033@292:0>](
          <map_1033@292:0>:int)
          
          P[<zip_1030@252:1>](<zip_1030@252:0>:int,<zip_1030@252:1>:int),
          P[<<zip_1030@258:2>@280:0>]((-1 + <zip_1030@252:0>):int,(-1 + <zip_1030@252:1>):int,(
                                      -1 + <<zip_1030@252:2>@288:0>):int),
          ((<zip_1030@252:0> <> 0) && (<zip_1030@252:1> <> 0))
          |- P[<<zip_1030@252:2>@288:0>](<zip_1030@252:0>:int,<zip_1030@252:1>:int,
                                         <<zip_1030@252:2>@288:0>:int)
          
          P[<zip_1030@258:1>](<zip_1030@258:0>:int,<zip_1030@258:1>:int),
          P[<<zip_1030@264:2>@272:0>]((-1 + <zip_1030@258:0>):int,(-1 + <zip_1030@258:1>):int,(
                                      -1 + <<zip_1030@258:2>@280:0>):int),
          ((<zip_1030@258:0> <> 0) && (<zip_1030@258:1> <> 0))
          |- P[<<zip_1030@258:2>@280:0>](<zip_1030@258:0>:int,<zip_1030@258:1>:int,
                                         <<zip_1030@258:2>@280:0>:int)
          
          P[<zip_1030@264:1>](<zip_1030@264:0>:int,<zip_1030@264:1>:int),
          ((<zip_1030@264:0> = 0) && ((<zip_1030@264:1> = 0) && (<<zip_1030@264:2>@272:0> = <zip_1030@264:0>)))
          |- P[<<zip_1030@264:2>@272:0>](<zip_1030@264:0>:int,<zip_1030@264:1>:int,
                                         <<zip_1030@264:2>@272:0>:int)
          
          P[<zip_1030@258:1>]((1 + <zip_1030@264:0>):int,(1 + <zip_1030@264:1>):int),
          (((1 + <zip_1030@264:0>) <> 0) && ((1 + <zip_1030@264:1>) <> 0))
          |- P[<zip_1030@264:1>](<zip_1030@264:0>:int,<zip_1030@264:1>:int)
          
          P[<zip_1030@252:1>]((1 + <zip_1030@258:0>):int,(1 + <zip_1030@258:1>):int),
          (((1 + <zip_1030@258:0>) <> 0) && ((1 + <zip_1030@258:1>) <> 0))
          |- P[<zip_1030@258:1>](<zip_1030@258:0>:int,<zip_1030@258:1>:int)
          
           (<zip_1030@252:1> = <zip_1030@252:0>) |- P[<zip_1030@252:1>](<zip_1030@252:0>:int,
                                                                    <zip_1030@252:1>:int)
        input to Yhorn:
          P[<fail_1281@309:0>](<fail_1281@309:0>:int)|- bot
          
          P[<<zip_1030@252:2>@288:0>](<f_main_1272@306:0>:int,<f_main_1272@306:0>:int,<f_main_1272@306:1>:int),
          P[<<map_1033@292:1>@304:0>](<f_main_1272@306:1>:int,<f_main_1272@306:3>:int),
          ((<f_main_1272@306:3> <> <f_main_1272@306:0>) && (<fail_1281@309:0> = 1))
          |- P[<fail_1281@309:0>](<fail_1281@309:0>:int)
          
          P[<map_1033@292:0>](<map_1033@292:0>:int),
          P[<<map_1033@295:1>@298:0>](var301:int,var302:int),
          (((1 + var302) = <<map_1033@292:1>@304:0>) && (((1 + var301) = <map_1033@292:0>) && (<map_1033@292:0> <> 0)))
          |- P[<<map_1033@292:1>@304:0>](<map_1033@292:0>:int,<<map_1033@292:1>@304:0>:int)
          
          P[<map_1033@295:0>](<map_1033@295:0>:int),
          ((<<map_1033@295:1>@298:0> = <map_1033@295:0>) && (<map_1033@295:0> = 0))
          |- P[<<map_1033@295:1>@298:0>](<map_1033@295:0>:int,<<map_1033@295:1>@298:0>:int)
          
          P[<map_1033@292:0>](var303:int), ((var303 = (1 + <map_1033@295:0>)) && ((1 + <map_1033@295:0>) <> 0))
          |- P[<map_1033@295:0>](<map_1033@295:0>:int)
          
          P[<<zip_1030@252:2>@288:0>](<f_main_1271@290:0>:int,<f_main_1271@290:0>:int,<map_1033@292:0>:int)|- P[<map_1033@292:0>](
          <map_1033@292:0>:int)
          
          P[<zip_1030@252:1>](<zip_1030@252:0>:int,<zip_1030@252:1>:int),
          P[<<zip_1030@258:2>@280:0>](var304:int,var305:int,var306:int),
          (((1 + var306) = <<zip_1030@252:2>@288:0>) &&
           (((1 + var305) = <zip_1030@252:1>) &&
            (((1 + var304) = <zip_1030@252:0>) && ((<zip_1030@252:1> <> 0) && (<zip_1030@252:0> <> 0)))))
          |- P[<<zip_1030@252:2>@288:0>](<zip_1030@252:0>:int,<zip_1030@252:1>:int,
                                         <<zip_1030@252:2>@288:0>:int)
          
          P[<zip_1030@258:1>](<zip_1030@258:0>:int,<zip_1030@258:1>:int),
          P[<<zip_1030@264:2>@272:0>](var307:int,var308:int,var309:int),
          (((1 + var309) = <<zip_1030@258:2>@280:0>) &&
           (((1 + var308) = <zip_1030@258:1>) &&
            (((1 + var307) = <zip_1030@258:0>) && ((<zip_1030@258:1> <> 0) && (<zip_1030@258:0> <> 0)))))
          |- P[<<zip_1030@258:2>@280:0>](<zip_1030@258:0>:int,<zip_1030@258:1>:int,
                                         <<zip_1030@258:2>@280:0>:int)
          
          P[<zip_1030@264:1>](<zip_1030@264:0>:int,<zip_1030@264:1>:int),
          ((<<zip_1030@264:2>@272:0> = <zip_1030@264:0>) && ((<zip_1030@264:1> = 0) && (<zip_1030@264:0> = 0)))
          |- P[<<zip_1030@264:2>@272:0>](<zip_1030@264:0>:int,<zip_1030@264:1>:int,
                                         <<zip_1030@264:2>@272:0>:int)
          
          P[<zip_1030@258:1>](var310:int,var311:int),
          ((var311 = (1 + <zip_1030@264:1>)) &&
           ((var310 = (1 + <zip_1030@264:0>)) && (((1 + <zip_1030@264:1>) <> 0) && ((1 + <zip_1030@264:0>) <> 0))))
          |- P[<zip_1030@264:1>](<zip_1030@264:0>:int,<zip_1030@264:1>:int)
          
          P[<zip_1030@252:1>](var312:int,var313:int),
          ((var313 = (1 + <zip_1030@258:1>)) &&
           ((var312 = (1 + <zip_1030@258:0>)) && (((1 + <zip_1030@258:1>) <> 0) && ((1 + <zip_1030@258:0>) <> 0))))
          |- P[<zip_1030@258:1>](<zip_1030@258:0>:int,<zip_1030@258:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1281_sep_309_sep_0($3824)) -> 1=0.
(($3824-1=0) & ($3825-$3826<>0)) & (v_sep_map_1033_sep_292_sep_1_sep_304_sep_0($3827,$3825)) & (v_sep_zip_1030_sep_252_sep_2_sep_288_sep_0($3826,$3826,$3827)) -> v_sep_fail_1281_sep_309_sep_0($3824).
(($3828<>0) & (-$3828+$3829+1=0) & ($3830-$3831+1=0)) & (v_sep_map_1033_sep_295_sep_1_sep_298_sep_0($3829,$3830)) & (v_sep_map_1033_sep_292_sep_0($3828)) -> v_sep_map_1033_sep_292_sep_1_sep_304_sep_0($3828,$3831).
(($3832=0) & (-$3832+$3833=0)) & (v_sep_map_1033_sep_295_sep_0($3832)) -> v_sep_map_1033_sep_295_sep_1_sep_298_sep_0($3832,$3833).
(($3832+1<>0) & (-$3832+$3834-1=0)) & (v_sep_map_1033_sep_292_sep_0($3834)) -> v_sep_map_1033_sep_295_sep_0($3832).
(0=0) & (v_sep_zip_1030_sep_252_sep_2_sep_288_sep_0($3835,$3835,$3828)) -> v_sep_map_1033_sep_292_sep_0($3828).
(($3836<>0) & ($3837<>0) & (-$3836+$3838+1=0) & (-$3837+$3839+1=0) & ($3840-$3841+1=0)) & (v_sep_zip_1030_sep_258_sep_2_sep_280_sep_0($3838,$3839,$3840)) & (v_sep_zip_1030_sep_252_sep_1($3836,$3837)) -> v_sep_zip_1030_sep_252_sep_2_sep_288_sep_0($3836,$3837,$3841).
(($3842<>0) & ($3843<>0) & (-$3842+$3844+1=0) & (-$3843+$3845+1=0) & ($3846-$3847+1=0)) & (v_sep_zip_1030_sep_264_sep_2_sep_272_sep_0($3844,$3845,$3846)) & (v_sep_zip_1030_sep_258_sep_1($3842,$3843)) -> v_sep_zip_1030_sep_258_sep_2_sep_280_sep_0($3842,$3843,$3847).
(($3848=0) & ($3849=0) & (-$3848+$3850=0)) & (v_sep_zip_1030_sep_264_sep_1($3848,$3849)) -> v_sep_zip_1030_sep_264_sep_2_sep_272_sep_0($3848,$3849,$3850).
(($3848+1<>0) & ($3849+1<>0) & (-$3848+$3851-1=0) & (-$3849+$3852-1=0)) & (v_sep_zip_1030_sep_258_sep_1($3851,$3852)) -> v_sep_zip_1030_sep_264_sep_1($3848,$3849).
(($3842+1<>0) & ($3843+1<>0) & (-$3842+$3853-1=0) & (-$3843+$3854-1=0)) & (v_sep_zip_1030_sep_252_sep_1($3853,$3854)) -> v_sep_zip_1030_sep_258_sep_1($3842,$3843).
-$3836+$3837=0 -> v_sep_zip_1030_sep_252_sep_1($3836,$3837).


v_sep_fail_1281_sep_309_sep_0: X
v_sep_map_1033_sep_292_sep_0: X
v_sep_map_1033_sep_292_sep_1_sep_304_sep_0: X
v_sep_map_1033_sep_295_sep_0: X
v_sep_map_1033_sep_295_sep_1_sep_298_sep_0: X
v_sep_zip_1030_sep_252_sep_1: X
v_sep_zip_1030_sep_252_sep_2_sep_288_sep_0: X
v_sep_zip_1030_sep_258_sep_1: X
v_sep_zip_1030_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1030_sep_264_sep_1: X
v_sep_zip_1030_sep_264_sep_2_sep_272_sep_0: X
.......................................
v_sep_fail_1281_sep_309_sep_0: X
v_sep_map_1033_sep_292_sep_0: X
v_sep_map_1033_sep_292_sep_1_sep_304_sep_0: X
v_sep_map_1033_sep_295_sep_0: X
v_sep_map_1033_sep_295_sep_1_sep_298_sep_0: X
v_sep_zip_1030_sep_252_sep_1: X
v_sep_zip_1030_sep_252_sep_2_sep_288_sep_0: X
v_sep_zip_1030_sep_258_sep_1: X
v_sep_zip_1030_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1030_sep_264_sep_1: X
v_sep_zip_1030_sep_264_sep_2_sep_272_sep_0: X
......
v_sep_fail_1281_sep_309_sep_0: X
v_sep_map_1033_sep_292_sep_0: X
v_sep_map_1033_sep_292_sep_1_sep_304_sep_0: X
v_sep_map_1033_sep_295_sep_0: X
v_sep_map_1033_sep_295_sep_1_sep_298_sep_0: X
v_sep_zip_1030_sep_252_sep_1: X
v_sep_zip_1030_sep_252_sep_2_sep_288_sep_0: X
v_sep_zip_1030_sep_258_sep_1: X
v_sep_zip_1030_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1030_sep_264_sep_1: X
v_sep_zip_1030_sep_264_sep_2_sep_272_sep_0: X
..................
v_sep_fail_1281_sep_309_sep_0: X
v_sep_map_1033_sep_292_sep_0: X
v_sep_map_1033_sep_292_sep_1_sep_304_sep_0: X
v_sep_map_1033_sep_295_sep_0: X
v_sep_map_1033_sep_295_sep_1_sep_298_sep_0: X
v_sep_zip_1030_sep_252_sep_1: X
v_sep_zip_1030_sep_252_sep_2_sep_288_sep_0: X
v_sep_zip_1030_sep_258_sep_1: X
v_sep_zip_1030_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1030_sep_264_sep_1: X
v_sep_zip_1030_sep_264_sep_2_sep_272_sep_0: X
............................
v_sep_fail_1281_sep_309_sep_0: X
v_sep_map_1033_sep_292_sep_0: X
v_sep_map_1033_sep_292_sep_1_sep_304_sep_0: X
v_sep_map_1033_sep_295_sep_0: X
v_sep_map_1033_sep_295_sep_1_sep_298_sep_0: X
v_sep_zip_1030_sep_252_sep_1: X
v_sep_zip_1030_sep_252_sep_2_sep_288_sep_0: X
v_sep_zip_1030_sep_258_sep_1: X
v_sep_zip_1030_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1030_sep_264_sep_1: X
v_sep_zip_1030_sep_264_sep_2_sep_272_sep_0: X
...................................
v_sep_fail_1281_sep_309_sep_0: X
v_sep_map_1033_sep_292_sep_0: X
v_sep_map_1033_sep_292_sep_1_sep_304_sep_0: X
v_sep_map_1033_sep_295_sep_0: X
v_sep_map_1033_sep_295_sep_1_sep_298_sep_0: X
v_sep_zip_1030_sep_252_sep_1: X
v_sep_zip_1030_sep_252_sep_2_sep_288_sep_0: X
v_sep_zip_1030_sep_258_sep_1: X
v_sep_zip_1030_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1030_sep_264_sep_1: X
v_sep_zip_1030_sep_264_sep_2_sep_272_sep_0: X
.......................................(0=0) & (v_sep_fail_1281_sep_309_sep_0($3824)) -> 1=0.
(($3824-1=0) & ($3825-$3826<>0)) & (v_sep_map_1033_sep_292_sep_1_sep_304_sep_0($3827,$3825)) & (v_sep_zip_1030_sep_252_sep_2_sep_288_sep_0($3826,$3826,$3827)) -> v_sep_fail_1281_sep_309_sep_0($3824).
(($3828<>0) & (-$3828+$3829+1=0) & ($3830-$3831+1=0)) & (v_sep_map_1033_sep_295_sep_1_sep_298_sep_0($3829,$3830)) & (v_sep_map_1033_sep_292_sep_0($3828)) -> v_sep_map_1033_sep_292_sep_1_sep_304_sep_0($3828,$3831).
(($3832=0) & (-$3832+$3833=0)) & (v_sep_map_1033_sep_295_sep_0($3832)) -> v_sep_map_1033_sep_295_sep_1_sep_298_sep_0($3832,$3833).
(($3832+1<>0) & (-$3832+$3834-1=0)) & (v_sep_map_1033_sep_292_sep_0($3834)) -> v_sep_map_1033_sep_295_sep_0($3832).
(0=0) & (v_sep_zip_1030_sep_252_sep_2_sep_288_sep_0($3835,$3835,$3828)) -> v_sep_map_1033_sep_292_sep_0($3828).
(($3836<>0) & ($3837<>0) & (-$3836+$3838+1=0) & (-$3837+$3839+1=0) & ($3840-$3841+1=0)) & (v_sep_zip_1030_sep_258_sep_2_sep_280_sep_0($3838,$3839,$3840)) & (v_sep_zip_1030_sep_252_sep_1($3836,$3837)) -> v_sep_zip_1030_sep_252_sep_2_sep_288_sep_0($3836,$3837,$3841).
(($3842<>0) & ($3843<>0) & (-$3842+$3844+1=0) & (-$3843+$3845+1=0) & ($3846-$3847+1=0)) & (v_sep_zip_1030_sep_264_sep_2_sep_272_sep_0($3844,$3845,$3846)) & (v_sep_zip_1030_sep_258_sep_1($3842,$3843)) -> v_sep_zip_1030_sep_258_sep_2_sep_280_sep_0($3842,$3843,$3847).
(($3848=0) & ($3849=0) & (-$3848+$3850=0)) & (v_sep_zip_1030_sep_264_sep_1($3848,$3849)) -> v_sep_zip_1030_sep_264_sep_2_sep_272_sep_0($3848,$3849,$3850).
(($3848+1<>0) & ($3849+1<>0) & (-$3848+$3851-1=0) & (-$3849+$3852-1=0)) & (v_sep_zip_1030_sep_258_sep_1($3851,$3852)) -> v_sep_zip_1030_sep_264_sep_1($3848,$3849).
(($3842+1<>0) & ($3843+1<>0) & (-$3842+$3853-1=0) & (-$3843+$3854-1=0)) & (v_sep_zip_1030_sep_252_sep_1($3853,$3854)) -> v_sep_zip_1030_sep_258_sep_1($3842,$3843).
-$3836+$3837=0 -> v_sep_zip_1030_sep_252_sep_1($3836,$3837).

           (<zip_1030@252:1> = <zip_1030@252:0>) |- P[<zip_1030@252:1>](<zip_1030@252:0>:int,
                                                                    <zip_1030@252:1>:int)
        solution:
          P[<fail_1281@309:0>]($3855:bool) = false
          P[<map_1033@292:0>]($3875:int) = (2 <= $3875)
          P[<<map_1033@292:1>@304:0>]($3858:int,$3860:int) = ((1 + $3858) <= 0)
          P[<map_1033@295:0>]($3878:int) = (1 <= $3878)
          P[<<map_1033@295:1>@298:0>]($3870:int,$3872:int) = ((1 + (2 * $3870)) <= 0)
          P[<zip_1030@252:1>]($3888:int,$3890:int) = true
          P[<<zip_1030@252:2>@288:0>]($3863:int,$3865:int,$3867:int) = (2 <= $3867)
          P[<zip_1030@258:1>]($3900:int,$3902:int) = true
          P[<<zip_1030@258:2>@280:0>]($3881:int,$3883:int,$3885:int) = (1 <= $3885)
          P[<zip_1030@264:1>]($3905:int,$3907:int) = true
          P[<<zip_1030@264:2>@272:0>]($3893:int,$3895:int,$3897:int) = (0 <= $3897)
        
      end HcSolver.solve_ub(42830)[4] (46.039001 sec.)
      begin HcSolver.check_validity(43951)[4]
        input:
          P[<fail_1281@309:0>](<fail_1281@309:0>:bool)|- bot
          
          P[<<zip_1030@252:2>@288:0>](<f_main_1272@306:0>:int,<f_main_1272@306:0>:int,<f_main_1272@306:1>:int),
          P[<<map_1033@292:1>@304:0>](<f_main_1272@306:1>:int,<f_main_1272@306:3>:int),
          ((<f_main_1272@306:3> <> <f_main_1272@306:0>) && <fail_1281@309:0>)
          |- P[<fail_1281@309:0>](<fail_1281@309:0>:bool)
          
          P[<map_1033@292:0>](<map_1033@292:0>:int),
          P[<<map_1033@295:1>@298:0>]((-1 + <map_1033@292:0>):int,(-1 + <<map_1033@292:1>@304:0>):int),
          (<map_1033@292:0> <> 0) |- P[<<map_1033@292:1>@304:0>](<map_1033@292:0>:int,
                                                                 <<map_1033@292:1>@304:0>:int)
          
          P[<map_1033@295:0>](<map_1033@295:0>:int),
          ((<map_1033@295:0> = 0) && (<<map_1033@295:1>@298:0> = <map_1033@295:0>))
          |- P[<<map_1033@295:1>@298:0>](<map_1033@295:0>:int,<<map_1033@295:1>@298:0>:int)
          
          P[<map_1033@292:0>]((1 + <map_1033@295:0>):int), ((1 + <map_1033@295:0>) <> 0)
          |- P[<map_1033@295:0>](<map_1033@295:0>:int)
          
          P[<<zip_1030@252:2>@288:0>](<f_main_1271@290:0>:int,<f_main_1271@290:0>:int,<map_1033@292:0>:int)|- P[<map_1033@292:0>](
          <map_1033@292:0>:int)
          
          P[<zip_1030@252:1>](<zip_1030@252:0>:int,<zip_1030@252:1>:int),
          P[<<zip_1030@258:2>@280:0>]((-1 + <zip_1030@252:0>):int,(-1 + <zip_1030@252:1>):int,(
                                      -1 + <<zip_1030@252:2>@288:0>):int),
          ((<zip_1030@252:0> <> 0) && (<zip_1030@252:1> <> 0))
          |- P[<<zip_1030@252:2>@288:0>](<zip_1030@252:0>:int,<zip_1030@252:1>:int,
                                         <<zip_1030@252:2>@288:0>:int)
          
          P[<zip_1030@258:1>](<zip_1030@258:0>:int,<zip_1030@258:1>:int),
          P[<<zip_1030@264:2>@272:0>]((-1 + <zip_1030@258:0>):int,(-1 + <zip_1030@258:1>):int,(
                                      -1 + <<zip_1030@258:2>@280:0>):int),
          ((<zip_1030@258:0> <> 0) && (<zip_1030@258:1> <> 0))
          |- P[<<zip_1030@258:2>@280:0>](<zip_1030@258:0>:int,<zip_1030@258:1>:int,
                                         <<zip_1030@258:2>@280:0>:int)
          
          P[<zip_1030@264:1>](<zip_1030@264:0>:int,<zip_1030@264:1>:int),
          ((<zip_1030@264:0> = 0) && ((<zip_1030@264:1> = 0) && (<<zip_1030@264:2>@272:0> = <zip_1030@264:0>)))
          |- P[<<zip_1030@264:2>@272:0>](<zip_1030@264:0>:int,<zip_1030@264:1>:int,
                                         <<zip_1030@264:2>@272:0>:int)
          
          P[<zip_1030@258:1>]((1 + <zip_1030@264:0>):int,(1 + <zip_1030@264:1>):int),
          (((1 + <zip_1030@264:0>) <> 0) && ((1 + <zip_1030@264:1>) <> 0))
          |- P[<zip_1030@264:1>](<zip_1030@264:0>:int,<zip_1030@264:1>:int)
          
          P[<zip_1030@252:1>]((1 + <zip_1030@258:0>):int,(1 + <zip_1030@258:1>):int),
          (((1 + <zip_1030@258:0>) <> 0) && ((1 + <zip_1030@258:1>) <> 0))
          |- P[<zip_1030@258:1>](<zip_1030@258:0>:int,<zip_1030@258:1>:int)
          
           (<zip_1030@252:1> = <zip_1030@252:0>) |- P[<zip_1030@252:1>](<zip_1030@252:0>:int,
                                                                    <zip_1030@252:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(43951)[4] (0.006999 sec.)
      solution:
        P[<fail_1281@309:0>]($3855:bool) = false
        P[<map_1033@292:0>]($3875:int) = (2 <= $3875)
        P[<<map_1033@292:1>@304:0>]($3858:int,$3860:int) = ((1 + $3858) <= 0)
        P[<map_1033@295:0>]($3878:int) = (1 <= $3878)
        P[<<map_1033@295:1>@298:0>]($3870:int,$3872:int) = ((1 + (2 * $3870)) <= 0)
        P[<zip_1030@252:1>]($3888:int,$3890:int) = true
        P[<<zip_1030@252:2>@288:0>]($3863:int,$3865:int,$3867:int) = (2 <= $3867)
        P[<zip_1030@258:1>]($3900:int,$3902:int) = true
        P[<<zip_1030@258:2>@280:0>]($3881:int,$3883:int,$3885:int) = (1 <= $3885)
        P[<zip_1030@264:1>]($3905:int,$3907:int) = true
        P[<<zip_1030@264:2>@272:0>]($3893:int,$3895:int,$3897:int) = (0 <= $3897)
    end YhornInterface.solve(42829)[3] (46.046000 sec.)
    
  end RefTypeInfer.infer_etrs(37208)[2] (46.459937 sec.)
  refinement types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | (2 <= v3)} -> X) -> X
    br_zip_1277: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | (1 <= v3)} -> X) -> X
    br_zip_1277: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | (0 <= v3)} -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1269: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_zip_1269: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: v1:{v1:int | (2 <= v1)} -> (v2:{v2:int | ((1 + v1) <= 0)} -> X) -> X
    map_1033: v1:{v1:int | (1 <= v1)} -> (v2:{v2:int | ((1 + (2 * v1)) <= 0)} -> X) -> X
    f_map_1270: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1274: var324:int -> var323:unit -> X
    f_zip_1267: var328:int -> var327:int -> var326:unit -> X
    f_zip_1268: var332:int -> var331:int -> var330:unit -> X
    fail_1279: var336:bool -> (var335:unit -> X) -> X
    fail_1280: var340:bool -> (var339:unit -> X) -> X
  abstraction types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: var346:int ->
              var347:int ->
              (var348:int[var348 -> (2 <= var348),
                          var348 -> (1 <= var348),
                          var348 -> (0 <= var348)] -> X) -> X
    br_zip_1277: var351:bool -> var352:int -> var353:int -> (var354:int -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1269: var357:int -> var358:int -> (var359:int -> X) -> var361:int -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: var363:int[var363 -> (2 <= var363),
                         var363 -> (1 <= var363)] ->
              (var364:int[var364 -> ((1 + var363) <= 0),
                          var364 -> ((1 + (2 * var363)) <= 0)] -> X) -> X
    f_map_1270: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:bool -> (v2:unit -> X) -> X
    f_1274: var324:int -> var323:unit -> X
    f_zip_1267: var328:int -> var327:int -> var326:unit -> X
    f_zip_1268: var332:int -> var331:int -> var330:unit -> X
    fail_1279: var336:bool -> (var335:unit -> X) -> X
    fail_1280: var340:bool -> (var339:unit -> X) -> X
  
end AbsTypeInfer.refine(37207)[1] (46.464937 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 0

Program with abstraction types (CEGAR-cycle 7)::
Main: main_1266
  main_1266 -> (rand_int f_1273)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when b_1276 -> (k_zip_1102 x_1031)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when (not b_1276) -> (fail_1279 true (f_zip_1267 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when b_1278 -> (fail_1280 true (f_zip_1268 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when (not b_1278) ->
      (zip_1030 (x_1031 - 1) (y_1032 - 1) (f_zip_1269 x_1031 y_1032 k_zip_1102))
  f_1273 x_1241 -> (main_1035 x_1241 (f_1274 x_1241))
  f_1274 x_1241 x_1238 -> end
  f_main_1271 n_1036 k_main_1199 x_1224 -> (map_1033 x_1224 (f_main_1272 n_1036 x_1224 k_main_1199))
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (x_1202 = n_1036) -> (k_main_1199 ())
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (not (x_1202 = n_1036)) -> (fail_1281 true k_main_1199)
  f_map_1270 x_1034 k_map_1167 x_1171 -> (k_map_1167 (1 + x_1171))
  f_zip_1267 x_1031 y_1032 x_1105 -> _|_
  f_zip_1268 x_1031 y_1032 x_1121 -> _|_
  f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 -> (k_zip_1102 (1 + x_1134))
  fail_1279 b k -> {fail} => (k ())
  fail_1280 b k -> {fail} => (k ())
  fail_1281 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1199 -> (zip_1030 n_1036 n_1036 (f_main_1271 n_1036 k_main_1199))
  map_1033 x_1034 k_map_1167 when (x_1034 = 0) -> (k_map_1167 x_1034)
  map_1033 x_1034 k_map_1167 when (not (x_1034 = 0)) -> (map_1033 (x_1034 - 1) (f_map_1270 x_1034 k_map_1167))
  zip_1030 x_1031 y_1032 k_zip_1102 when (x_1031 = 0) -> (br_zip_1275 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
  zip_1030 x_1031 y_1032 k_zip_1102 when (not (x_1031 = 0)) -> (br_zip_1277 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
Types:
  main_1266 : X
  fail_1279 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1280 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1281 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1033 : (x_1:int[x_1 >= 2; x_1 <= 1; x_1 >= 1; x_1 <= -1; x_1 <= 0] ->
              (x_3:int[x_1 >= 2; x_1 >= 5; x_3 = 1; x_1 <= -1; 2*x_1 >= 1; x_1 >= 3; x_3 = 0] -> X) -> X)
  zip_1030 : (x_1:int ->
              x_2:int[x_1 = x_2] ->
              (x_4:int[x_4 >= 2; x_4 <= 1; x_1 >= 0 && x_2 <= 0; x_1 >= 1 && x_2 <= 1; 
                       x_4 >= 0; x_4 >= 1; x_4 <= 0; x_2 = 0] -> X) -> X)
  
(7-1) Abstracting ... DONE!

(7-2) Checking HORS ... DONE!

Error trace::
  main_1266 ... --> 
  f_1273 ... --> 
  main_1035 ... --> 
  zip_1030 [2/2] ... --> 
  br_zip_1277 [2/2] ... --> 
  zip_1030 [2/2] ... --> 
  br_zip_1277 [2/2] ... --> 
  zip_1030 [1/2] ... --> 
  br_zip_1275 [1/2] ... --> 
  f_zip_1269 ... --> 
  f_zip_1269 ... --> 
  f_main_1271 ... --> 
  map_1033 [2/2] ... --> 
  map_1033 [2/2] ... --> 
  map_1033 [1/2] ... --> 
  f_map_1270 ... --> 
  f_map_1270 ... --> 
  f_main_1272 [2/2] ... --> 
  fail_1281 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 0; 0; 0; 1; 0

(7-3) Checking counter-example ... DONE!

(7-4) Discovering predicates ... 
begin AbsTypeInfer.refine(51608)[1]
  program:
    main_1266  | true = ((Random.int 0) f_1273)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | b_1276 = (k_zip_1102 x_1031)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | (not b_1276) = (fail_1279 true
                                                                    (f_zip_1267 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | b_1278 = (fail_1280 true
                                                                    (f_zip_1268 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | (not b_1278) = (zip_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    (
                                                                    y_1032 - 1)
                                                                    (
                                                                    f_zip_1269 x_1031
                                                                    y_1032
                                                                    k_zip_1102))
    f_1273 x_1241 | true = (main_1035 x_1241
                                      (f_1274 x_1241))
    f_1274 x_1241 x_1238 | true = end
    f_main_1271 n_1036 k_main_1199 x_1224 | true = (map_1033 x_1224
                                                             (f_main_1272 n_1036
                                                                    x_1224
                                                                    k_main_1199))
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (x_1202 = n_1036) = (
    k_main_1199 ())
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (not (x_1202 = n_1036)) = (
    fail_1281 true
              k_main_1199)
    f_map_1270 x_1034 k_map_1167 x_1171 | true = (k_map_1167 (1 + x_1171))
    f_zip_1267 x_1031 y_1032 x_1105 | true = bot
    f_zip_1268 x_1031 y_1032 x_1121 | true = bot
    f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 | true = (k_zip_1102 (
                                                                    1 + x_1134))
    fail_1279 b k | true = (fail ())
    fail_1280 b k | true = (fail ())
    fail_1281 b k | true = (fail ())
    main_1035 n_1036 k_main_1199 | true = (zip_1030 n_1036
                                                    n_1036
                                                    (f_main_1271 n_1036
                                                                 k_main_1199))
    map_1033 x_1034 k_map_1167 | (x_1034 = 0) = (k_map_1167 x_1034)
    map_1033 x_1034 k_map_1167 | (not (x_1034 = 0)) = (map_1033 (x_1034 - 1)
                                                                (f_map_1270 x_1034
                                                                    k_map_1167))
    zip_1030 x_1031 y_1032 k_zip_1102 | (x_1031 = 0) = (br_zip_1275 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    zip_1030 x_1031 y_1032 k_zip_1102 | (not (x_1031 = 0)) = (br_zip_1277 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    main_1266:X
    br_zip_1275:bool -> int -> int -> (int -> X) -> X
    br_zip_1277:bool -> int -> int -> (int -> X) -> X
    f_1273:int -> X
    f_1274:int -> unit -> X
    f_main_1271:int -> (unit -> X) -> int -> X
    f_main_1272:int -> int -> (unit -> X) -> int -> X
    f_map_1270:int -> (int -> X) -> int -> X
    f_zip_1267:int -> int -> unit -> X
    f_zip_1268:int -> int -> unit -> X
    f_zip_1269:int -> int -> (int -> X) -> int -> X
    fail_1279:bool -> (unit -> X) -> X
    fail_1280:bool -> (unit -> X) -> X
    fail_1281:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    map_1033:int -> (int -> X) -> X
    zip_1030:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1275,br_zip_1277,f_1273,f_1274,f_main_1271,f_main_1272,f_map_1270,f_zip_1267,f_zip_1268,f_zip_1269,main_1035
  counterexample: 0:0:0:1:1:1:1:0:0:0:0:0:1:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1273@315:0> = var367)
     [true.(<main_1035@317:0> = <f_1273@315:0>)
      [true.((<zip_1030@319:0> = <main_1035@317:0>) && (<zip_1030@319:1> = <main_1035@317:0>))
       [(not (<zip_1030@319:0> = 0)).
        ((<br_zip_1277@322:0> = (<zip_1030@319:1> = 0)) &&
         ((<br_zip_1277@322:1> = <zip_1030@319:0>) && (<br_zip_1277@322:2> = <zip_1030@319:1>)))
        [(not <br_zip_1277@322:0>).
         ((<zip_1030@325:0> = (<br_zip_1277@322:1> - 1)) && (<zip_1030@325:1> = (<br_zip_1277@322:2> - 1)))
         [(not (<zip_1030@325:0> = 0)).
          ((<br_zip_1277@328:0> = (<zip_1030@325:1> = 0)) &&
           ((<br_zip_1277@328:1> = <zip_1030@325:0>) && (<br_zip_1277@328:2> = <zip_1030@325:1>)))
          [(not <br_zip_1277@328:0>).
           ((<zip_1030@331:0> = (<br_zip_1277@328:1> - 1)) && (<zip_1030@331:1> = (<br_zip_1277@328:2> - 1)))
           [(<zip_1030@331:0> = 0).
            ((<br_zip_1275@334:0> = (<zip_1030@331:1> = 0)) &&
             ((<br_zip_1275@334:1> = <zip_1030@331:0>) && (<br_zip_1275@334:2> = <zip_1030@331:1>)))
            [<br_zip_1275@334:0>.(<<br_zip_1275@334:3>@337:0> = <br_zip_1275@334:1>)
             [true.(<<zip_1030@331:2>@339:0> = <<br_zip_1275@334:3>@337:0>)
              [true.
               ((<f_zip_1269@341:0> = <br_zip_1277@328:1>) &&
                ((<f_zip_1269@341:1> = <br_zip_1277@328:2>) && (<f_zip_1269@341:3> = <<zip_1030@331:2>@339:0>)))
               [true.(<<f_zip_1269@341:2>@343:0> = (1 + <f_zip_1269@341:3>))
                [true.(<<br_zip_1277@328:3>@345:0> = <<f_zip_1269@341:2>@343:0>)
                 [true.(<<zip_1030@325:2>@347:0> = <<br_zip_1277@328:3>@345:0>)
                  [true.
                   ((<f_zip_1269@349:0> = <br_zip_1277@322:1>) &&
                    ((<f_zip_1269@349:1> = <br_zip_1277@322:2>) && (<f_zip_1269@349:3> = <<zip_1030@325:2>@347:0>)))
                   [true.(<<f_zip_1269@349:2>@351:0> = (1 + <f_zip_1269@349:3>))
                    [true.(<<br_zip_1277@322:3>@353:0> = <<f_zip_1269@349:2>@351:0>)
                     [true.(<<zip_1030@319:2>@355:0> = <<br_zip_1277@322:3>@353:0>)
                      [true.
                       ((<f_main_1271@357:0> = <main_1035@317:0>) && (<f_main_1271@357:2> = <<zip_1030@319:2>@355:0>))
                       [true.(<map_1033@359:0> = <f_main_1271@357:2>)
                        [(not (<map_1033@359:0> = 0)).(<map_1033@362:0> = (<map_1033@359:0> - 1))
                         [(not (<map_1033@362:0> = 0)).(<map_1033@365:0> = (<map_1033@362:0> - 1))
                          [(<map_1033@365:0> = 0).(<<map_1033@365:1>@368:0> = <map_1033@365:0>)
                           [true.
                            ((<f_map_1270@370:0> = <map_1033@362:0>) && (<f_map_1270@370:2> = <<map_1033@365:1>@368:0>))
                            [true.(<<f_map_1270@370:1>@372:0> = (1 + <f_map_1270@370:2>))
                             [true.(<<map_1033@362:1>@374:0> = <<f_map_1270@370:1>@372:0>)
                              [true.
                               ((<f_map_1270@376:0> = <map_1033@359:0>) &&
                                (<f_map_1270@376:2> = <<map_1033@362:1>@374:0>))
                               [true.(<<f_map_1270@376:1>@378:0> = (1 + <f_map_1270@376:2>))
                                [true.(<<map_1033@359:1>@380:0> = <<f_map_1270@376:1>@378:0>)
                                 [true.
                                  ((<f_main_1272@382:0> = <f_main_1271@357:0>) &&
                                   ((<f_main_1272@382:1> = <f_main_1271@357:2>) &&
                                    (<f_main_1272@382:3> = <<map_1033@359:1>@380:0>)))
                                  [(not (<f_main_1272@382:3> = <f_main_1272@382:0>)).(
                                   <fail_1281@385:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(51609)[2]
    horn clauses:
      P[<fail_1281@385:0>](<fail_1281@385:0>:bool)|- bot
      
      P[<f_main_1272@382:3>](<f_main_1272@382:0>:int,<f_main_1272@382:1>:int,<f_main_1272@382:3>:int),
      ((<f_main_1272@382:3> <> <f_main_1272@382:0>) && <fail_1281@385:0>)
      |- P[<fail_1281@385:0>](<fail_1281@385:0>:bool)
      
      P[<f_main_1271@357:2>](<f_main_1272@382:0>:int,<f_main_1272@382:1>:int),
      P[<<map_1033@359:1>@380:0>](<f_main_1272@382:1>:int,<f_main_1272@382:3>:int)|- P[<f_main_1272@382:3>](
      <f_main_1272@382:0>:int,<f_main_1272@382:1>:int,<f_main_1272@382:3>:int)
      
      P[<map_1033@359:0>](<map_1033@359:0>:int),
      P[<<f_map_1270@376:1>@378:0>](<map_1033@359:0>:int,<<map_1033@359:1>@380:0>:int), (
      <map_1033@359:0> <> 0) |- P[<<map_1033@359:1>@380:0>](<map_1033@359:0>:int,
                                                            <<map_1033@359:1>@380:0>:int)
      
      P[<f_map_1270@376:2>](<f_map_1270@376:0>:int,(-1 + <<f_map_1270@376:1>@378:0>):int)|- P[<<f_map_1270@376:1>@378:0>](
      <f_map_1270@376:0>:int,<<f_map_1270@376:1>@378:0>:int)
      
      P[<map_1033@359:0>](<f_map_1270@376:0>:int),
      P[<<map_1033@362:1>@374:0>]((-1 + <f_map_1270@376:0>):int,<f_map_1270@376:2>:int), (
      <f_map_1270@376:0> <> 0) |- P[<f_map_1270@376:2>](<f_map_1270@376:0>:int,
                                                        <f_map_1270@376:2>:int)
      
      P[<map_1033@362:0>](<map_1033@362:0>:int),
      P[<<f_map_1270@370:1>@372:0>](<map_1033@362:0>:int,<<map_1033@362:1>@374:0>:int), (
      <map_1033@362:0> <> 0) |- P[<<map_1033@362:1>@374:0>](<map_1033@362:0>:int,
                                                            <<map_1033@362:1>@374:0>:int)
      
      P[<f_map_1270@370:2>](<f_map_1270@370:0>:int,(-1 + <<f_map_1270@370:1>@372:0>):int)|- P[<<f_map_1270@370:1>@372:0>](
      <f_map_1270@370:0>:int,<<f_map_1270@370:1>@372:0>:int)
      
      P[<map_1033@362:0>](<f_map_1270@370:0>:int),
      P[<<map_1033@365:1>@368:0>]((-1 + <f_map_1270@370:0>):int,<f_map_1270@370:2>:int), (
      <f_map_1270@370:0> <> 0) |- P[<f_map_1270@370:2>](<f_map_1270@370:0>:int,
                                                        <f_map_1270@370:2>:int)
      
      P[<map_1033@365:0>](<map_1033@365:0>:int),
      ((<map_1033@365:0> = 0) && (<<map_1033@365:1>@368:0> = <map_1033@365:0>))
      |- P[<<map_1033@365:1>@368:0>](<map_1033@365:0>:int,<<map_1033@365:1>@368:0>:int)
      
      P[<map_1033@362:0>]((1 + <map_1033@365:0>):int), ((1 + <map_1033@365:0>) <> 0)
      |- P[<map_1033@365:0>](<map_1033@365:0>:int)
      
      P[<map_1033@359:0>]((1 + <map_1033@362:0>):int), ((1 + <map_1033@362:0>) <> 0)
      |- P[<map_1033@362:0>](<map_1033@362:0>:int)
      
      P[<f_main_1271@357:2>](<f_main_1271@357:0>:int,<map_1033@359:0>:int)|- P[<map_1033@359:0>](<map_1033@359:0>:int)
      
      P[<main_1035@317:0>](<f_main_1271@357:0>:int),
      P[<<zip_1030@319:2>@355:0>](<f_main_1271@357:0>:int,<f_main_1271@357:0>:int,<f_main_1271@357:2>:int)|- P[<f_main_1271@357:2>](
      <f_main_1271@357:0>:int,<f_main_1271@357:2>:int)
      
      P[<zip_1030@319:1>](<zip_1030@319:0>:int,<zip_1030@319:1>:int),
      P[<<br_zip_1277@322:3>@353:0>]((<zip_1030@319:1> = 0):bool,<zip_1030@319:0>:int,<zip_1030@319:1>:int,<<zip_1030@319:2>@355:0>:int),
      (<zip_1030@319:0> <> 0)
      |- P[<<zip_1030@319:2>@355:0>](<zip_1030@319:0>:int,<zip_1030@319:1>:int,
                                     <<zip_1030@319:2>@355:0>:int)
      
      P[<br_zip_1277@322:2>](<br_zip_1277@322:0>:bool,<br_zip_1277@322:1>:int,<br_zip_1277@322:2>:int),
      P[<<f_zip_1269@349:2>@351:0>](<br_zip_1277@322:1>:int,<br_zip_1277@322:2>:int,<<br_zip_1277@322:3>@353:0>:int),
      (not <br_zip_1277@322:0>)
      |- P[<<br_zip_1277@322:3>@353:0>](<br_zip_1277@322:0>:bool,<br_zip_1277@322:1>:int,
                                        <br_zip_1277@322:2>:int,<<br_zip_1277@322:3>@353:0>:int)
      
      P[<f_zip_1269@349:3>](<f_zip_1269@349:0>:int,<f_zip_1269@349:1>:int,(
                            -1 + <<f_zip_1269@349:2>@351:0>):int)|- P[<<f_zip_1269@349:2>@351:0>](
      <f_zip_1269@349:0>:int,<f_zip_1269@349:1>:int,<<f_zip_1269@349:2>@351:0>:int)
      
      P[<br_zip_1277@322:2>](false:bool,<f_zip_1269@349:0>:int,<f_zip_1269@349:1>:int),
      P[<<zip_1030@325:2>@347:0>]((-1 + <f_zip_1269@349:0>):int,(-1 + <f_zip_1269@349:1>):int,<f_zip_1269@349:3>:int)|- P[<f_zip_1269@349:3>](
      <f_zip_1269@349:0>:int,<f_zip_1269@349:1>:int,<f_zip_1269@349:3>:int)
      
      P[<zip_1030@325:1>](<zip_1030@325:0>:int,<zip_1030@325:1>:int),
      P[<<br_zip_1277@328:3>@345:0>]((<zip_1030@325:1> = 0):bool,<zip_1030@325:0>:int,<zip_1030@325:1>:int,<<zip_1030@325:2>@347:0>:int),
      (<zip_1030@325:0> <> 0)
      |- P[<<zip_1030@325:2>@347:0>](<zip_1030@325:0>:int,<zip_1030@325:1>:int,
                                     <<zip_1030@325:2>@347:0>:int)
      
      P[<br_zip_1277@328:2>](<br_zip_1277@328:0>:bool,<br_zip_1277@328:1>:int,<br_zip_1277@328:2>:int),
      P[<<f_zip_1269@341:2>@343:0>](<br_zip_1277@328:1>:int,<br_zip_1277@328:2>:int,<<br_zip_1277@328:3>@345:0>:int),
      (not <br_zip_1277@328:0>)
      |- P[<<br_zip_1277@328:3>@345:0>](<br_zip_1277@328:0>:bool,<br_zip_1277@328:1>:int,
                                        <br_zip_1277@328:2>:int,<<br_zip_1277@328:3>@345:0>:int)
      
      P[<f_zip_1269@341:3>](<f_zip_1269@341:0>:int,<f_zip_1269@341:1>:int,(
                            -1 + <<f_zip_1269@341:2>@343:0>):int)|- P[<<f_zip_1269@341:2>@343:0>](
      <f_zip_1269@341:0>:int,<f_zip_1269@341:1>:int,<<f_zip_1269@341:2>@343:0>:int)
      
      P[<br_zip_1277@328:2>](false:bool,<f_zip_1269@341:0>:int,<f_zip_1269@341:1>:int),
      P[<<zip_1030@331:2>@339:0>]((-1 + <f_zip_1269@341:0>):int,(-1 + <f_zip_1269@341:1>):int,<f_zip_1269@341:3>:int)|- P[<f_zip_1269@341:3>](
      <f_zip_1269@341:0>:int,<f_zip_1269@341:1>:int,<f_zip_1269@341:3>:int)
      
      P[<zip_1030@331:1>](<zip_1030@331:0>:int,<zip_1030@331:1>:int),
      P[<<br_zip_1275@334:3>@337:0>]((<zip_1030@331:1> = 0):bool,<zip_1030@331:0>:int,<zip_1030@331:1>:int,<<zip_1030@331:2>@339:0>:int),
      (<zip_1030@331:0> = 0)
      |- P[<<zip_1030@331:2>@339:0>](<zip_1030@331:0>:int,<zip_1030@331:1>:int,
                                     <<zip_1030@331:2>@339:0>:int)
      
      P[<br_zip_1275@334:2>](<br_zip_1275@334:0>:bool,<br_zip_1275@334:1>:int,<br_zip_1275@334:2>:int),
      ((<<br_zip_1275@334:3>@337:0> = <br_zip_1275@334:1>) && <br_zip_1275@334:0>)
      |- P[<<br_zip_1275@334:3>@337:0>](<br_zip_1275@334:0>:bool,<br_zip_1275@334:1>:int,
                                        <br_zip_1275@334:2>:int,<<br_zip_1275@334:3>@337:0>:int)
      
      P[<zip_1030@331:1>](<br_zip_1275@334:1>:int,<br_zip_1275@334:2>:int),
      ((<br_zip_1275@334:1> = 0) && (<br_zip_1275@334:0> = (<br_zip_1275@334:2> = 0)))
      |- P[<br_zip_1275@334:2>](<br_zip_1275@334:0>:bool,<br_zip_1275@334:1>:int,
                                <br_zip_1275@334:2>:int)
      
      P[<br_zip_1277@328:2>](false:bool,(1 + <zip_1030@331:0>):int,(1 + <zip_1030@331:1>):int)|- P[<zip_1030@331:1>](
      <zip_1030@331:0>:int,<zip_1030@331:1>:int)
      
      P[<zip_1030@325:1>](<br_zip_1277@328:1>:int,<br_zip_1277@328:2>:int),
      ((<br_zip_1277@328:1> <> 0) && (<br_zip_1277@328:0> = (<br_zip_1277@328:2> = 0)))
      |- P[<br_zip_1277@328:2>](<br_zip_1277@328:0>:bool,<br_zip_1277@328:1>:int,
                                <br_zip_1277@328:2>:int)
      
      P[<br_zip_1277@322:2>](false:bool,(1 + <zip_1030@325:0>):int,(1 + <zip_1030@325:1>):int)|- P[<zip_1030@325:1>](
      <zip_1030@325:0>:int,<zip_1030@325:1>:int)
      
      P[<zip_1030@319:1>](<br_zip_1277@322:1>:int,<br_zip_1277@322:2>:int),
      ((<br_zip_1277@322:1> <> 0) && (<br_zip_1277@322:0> = (<br_zip_1277@322:2> = 0)))
      |- P[<br_zip_1277@322:2>](<br_zip_1277@322:0>:bool,<br_zip_1277@322:1>:int,
                                <br_zip_1277@322:2>:int)
      
      P[<main_1035@317:0>](<zip_1030@319:1>:int), (<zip_1030@319:1> = <zip_1030@319:0>)
      |- P[<zip_1030@319:1>](<zip_1030@319:0>:int,<zip_1030@319:1>:int)
      
      P[<f_1273@315:0>](<main_1035@317:0>:int)|- P[<main_1035@317:0>](<main_1035@317:0>:int)
      
      |- P[<f_1273@315:0>](<f_1273@315:0>:int)
    call trees:
      <main_1266@312>
        <f_1273@315>
          <main_1035@317>
            <zip_1030@319>
              <br_zip_1277@322>
                <zip_1030@325>
                  <br_zip_1277@328>
                    <zip_1030@331>
                      <br_zip_1275@334>
                      </<br_zip_1275@334:3>@337>
                    </<zip_1030@331:2>@339>
                    <f_zip_1269@341>
                    </<f_zip_1269@341:2>@343>
                  </<br_zip_1277@328:3>@345>
                </<zip_1030@325:2>@347>
                <f_zip_1269@349>
                </<f_zip_1269@349:2>@351>
              </<br_zip_1277@322:3>@353>
            </<zip_1030@319:2>@355>
            <f_main_1271@357>
              <map_1033@359>
                <map_1033@362>
                  <map_1033@365>
                  </<map_1033@365:1>@368>
                  <f_map_1270@370>
                  </<f_map_1270@370:1>@372>
                </<map_1033@362:1>@374>
                <f_map_1270@376>
                </<f_map_1270@376:1>@378>
              </<map_1033@359:1>@380>
              <f_main_1272@382>
                <fail_1281@385>
    inlined horn clauses:
      P[<fail_1281@385:0>](<fail_1281@385:0>:bool)|- bot
      
      P[<<zip_1030@319:2>@355:0>](<f_main_1272@382:0>:int,<f_main_1272@382:0>:int,<f_main_1272@382:1>:int),
      P[<<map_1033@359:1>@380:0>](<f_main_1272@382:1>:int,<f_main_1272@382:3>:int),
      ((<f_main_1272@382:3> <> <f_main_1272@382:0>) && <fail_1281@385:0>)
      |- P[<fail_1281@385:0>](<fail_1281@385:0>:bool)
      
      P[<map_1033@359:0>](<map_1033@359:0>:int),
      P[<<map_1033@362:1>@374:0>]((-1 + <map_1033@359:0>):int,(-1 + <<map_1033@359:1>@380:0>):int),
      (<map_1033@359:0> <> 0) |- P[<<map_1033@359:1>@380:0>](<map_1033@359:0>:int,
                                                             <<map_1033@359:1>@380:0>:int)
      
      P[<map_1033@362:0>](<map_1033@362:0>:int),
      P[<<map_1033@365:1>@368:0>]((-1 + <map_1033@362:0>):int,(-1 + <<map_1033@362:1>@374:0>):int),
      (<map_1033@362:0> <> 0) |- P[<<map_1033@362:1>@374:0>](<map_1033@362:0>:int,
                                                             <<map_1033@362:1>@374:0>:int)
      
      P[<map_1033@365:0>](<map_1033@365:0>:int),
      ((<map_1033@365:0> = 0) && (<<map_1033@365:1>@368:0> = <map_1033@365:0>))
      |- P[<<map_1033@365:1>@368:0>](<map_1033@365:0>:int,<<map_1033@365:1>@368:0>:int)
      
      P[<map_1033@362:0>]((1 + <map_1033@365:0>):int), ((1 + <map_1033@365:0>) <> 0)
      |- P[<map_1033@365:0>](<map_1033@365:0>:int)
      
      P[<map_1033@359:0>]((1 + <map_1033@362:0>):int), ((1 + <map_1033@362:0>) <> 0)
      |- P[<map_1033@362:0>](<map_1033@362:0>:int)
      
      P[<<zip_1030@319:2>@355:0>](<f_main_1271@357:0>:int,<f_main_1271@357:0>:int,<map_1033@359:0>:int)|- P[<map_1033@359:0>](
      <map_1033@359:0>:int)
      
      P[<zip_1030@319:1>](<zip_1030@319:0>:int,<zip_1030@319:1>:int),
      P[<<zip_1030@325:2>@347:0>]((-1 + <zip_1030@319:0>):int,(-1 + <zip_1030@319:1>):int,(
                                  -1 + <<zip_1030@319:2>@355:0>):int),
      ((<zip_1030@319:0> <> 0) && (<zip_1030@319:1> <> 0))
      |- P[<<zip_1030@319:2>@355:0>](<zip_1030@319:0>:int,<zip_1030@319:1>:int,
                                     <<zip_1030@319:2>@355:0>:int)
      
      P[<zip_1030@325:1>](<zip_1030@325:0>:int,<zip_1030@325:1>:int),
      P[<<zip_1030@331:2>@339:0>]((-1 + <zip_1030@325:0>):int,(-1 + <zip_1030@325:1>):int,(
                                  -1 + <<zip_1030@325:2>@347:0>):int),
      ((<zip_1030@325:0> <> 0) && (<zip_1030@325:1> <> 0))
      |- P[<<zip_1030@325:2>@347:0>](<zip_1030@325:0>:int,<zip_1030@325:1>:int,
                                     <<zip_1030@325:2>@347:0>:int)
      
      P[<zip_1030@331:1>](<zip_1030@331:0>:int,<zip_1030@331:1>:int),
      ((<zip_1030@331:0> = 0) && ((<zip_1030@331:1> = 0) && (<<zip_1030@331:2>@339:0> = <zip_1030@331:0>)))
      |- P[<<zip_1030@331:2>@339:0>](<zip_1030@331:0>:int,<zip_1030@331:1>:int,
                                     <<zip_1030@331:2>@339:0>:int)
      
      P[<zip_1030@325:1>]((1 + <zip_1030@331:0>):int,(1 + <zip_1030@331:1>):int),
      (((1 + <zip_1030@331:0>) <> 0) && ((1 + <zip_1030@331:1>) <> 0))
      |- P[<zip_1030@331:1>](<zip_1030@331:0>:int,<zip_1030@331:1>:int)
      
      P[<zip_1030@319:1>]((1 + <zip_1030@325:0>):int,(1 + <zip_1030@325:1>):int),
      (((1 + <zip_1030@325:0>) <> 0) && ((1 + <zip_1030@325:1>) <> 0))
      |- P[<zip_1030@325:1>](<zip_1030@325:0>:int,<zip_1030@325:1>:int)
      
       (<zip_1030@319:1> = <zip_1030@319:0>) |- P[<zip_1030@319:1>](<zip_1030@319:0>:int,
                                                                    <zip_1030@319:1>:int)
    begin ParamSubstInfer.infer(57122)[3]
      
    end ParamSubstInfer.infer(57122)[3] (0.578912 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(57124)[3]
      
    end RefTypeInfer.elim_coeffs(57124)[3] (0.002000 sec.)
    begin YhornInterface.solve(57797)[3]
      begin HcSolver.solve_ub(57798)[4]
        encoded:
          P[<fail_1281@385:0>](<fail_1281@385:0>:int)|- bot
          
          P[<<zip_1030@319:2>@355:0>](<f_main_1272@382:0>:int,<f_main_1272@382:0>:int,<f_main_1272@382:1>:int),
          P[<<map_1033@359:1>@380:0>](<f_main_1272@382:1>:int,<f_main_1272@382:3>:int),
          ((<f_main_1272@382:3> <> <f_main_1272@382:0>) && (<fail_1281@385:0> = 1))
          |- P[<fail_1281@385:0>](<fail_1281@385:0>:int)
          
          P[<map_1033@359:0>](<map_1033@359:0>:int),
          P[<<map_1033@362:1>@374:0>]((-1 + <map_1033@359:0>):int,(-1 + <<map_1033@359:1>@380:0>):int),
          (<map_1033@359:0> <> 0) |- P[<<map_1033@359:1>@380:0>](<map_1033@359:0>:int,
                                                                 <<map_1033@359:1>@380:0>:int)
          
          P[<map_1033@362:0>](<map_1033@362:0>:int),
          P[<<map_1033@365:1>@368:0>]((-1 + <map_1033@362:0>):int,(-1 + <<map_1033@362:1>@374:0>):int),
          (<map_1033@362:0> <> 0) |- P[<<map_1033@362:1>@374:0>](<map_1033@362:0>:int,
                                                                 <<map_1033@362:1>@374:0>:int)
          
          P[<map_1033@365:0>](<map_1033@365:0>:int),
          ((<map_1033@365:0> = 0) && (<<map_1033@365:1>@368:0> = <map_1033@365:0>))
          |- P[<<map_1033@365:1>@368:0>](<map_1033@365:0>:int,<<map_1033@365:1>@368:0>:int)
          
          P[<map_1033@362:0>]((1 + <map_1033@365:0>):int), ((1 + <map_1033@365:0>) <> 0)
          |- P[<map_1033@365:0>](<map_1033@365:0>:int)
          
          P[<map_1033@359:0>]((1 + <map_1033@362:0>):int), ((1 + <map_1033@362:0>) <> 0)
          |- P[<map_1033@362:0>](<map_1033@362:0>:int)
          
          P[<<zip_1030@319:2>@355:0>](<f_main_1271@357:0>:int,<f_main_1271@357:0>:int,<map_1033@359:0>:int)|- P[<map_1033@359:0>](
          <map_1033@359:0>:int)
          
          P[<zip_1030@319:1>](<zip_1030@319:0>:int,<zip_1030@319:1>:int),
          P[<<zip_1030@325:2>@347:0>]((-1 + <zip_1030@319:0>):int,(-1 + <zip_1030@319:1>):int,(
                                      -1 + <<zip_1030@319:2>@355:0>):int),
          ((<zip_1030@319:0> <> 0) && (<zip_1030@319:1> <> 0))
          |- P[<<zip_1030@319:2>@355:0>](<zip_1030@319:0>:int,<zip_1030@319:1>:int,
                                         <<zip_1030@319:2>@355:0>:int)
          
          P[<zip_1030@325:1>](<zip_1030@325:0>:int,<zip_1030@325:1>:int),
          P[<<zip_1030@331:2>@339:0>]((-1 + <zip_1030@325:0>):int,(-1 + <zip_1030@325:1>):int,(
                                      -1 + <<zip_1030@325:2>@347:0>):int),
          ((<zip_1030@325:0> <> 0) && (<zip_1030@325:1> <> 0))
          |- P[<<zip_1030@325:2>@347:0>](<zip_1030@325:0>:int,<zip_1030@325:1>:int,
                                         <<zip_1030@325:2>@347:0>:int)
          
          P[<zip_1030@331:1>](<zip_1030@331:0>:int,<zip_1030@331:1>:int),
          ((<zip_1030@331:0> = 0) && ((<zip_1030@331:1> = 0) && (<<zip_1030@331:2>@339:0> = <zip_1030@331:0>)))
          |- P[<<zip_1030@331:2>@339:0>](<zip_1030@331:0>:int,<zip_1030@331:1>:int,
                                         <<zip_1030@331:2>@339:0>:int)
          
          P[<zip_1030@325:1>]((1 + <zip_1030@331:0>):int,(1 + <zip_1030@331:1>):int),
          (((1 + <zip_1030@331:0>) <> 0) && ((1 + <zip_1030@331:1>) <> 0))
          |- P[<zip_1030@331:1>](<zip_1030@331:0>:int,<zip_1030@331:1>:int)
          
          P[<zip_1030@319:1>]((1 + <zip_1030@325:0>):int,(1 + <zip_1030@325:1>):int),
          (((1 + <zip_1030@325:0>) <> 0) && ((1 + <zip_1030@325:1>) <> 0))
          |- P[<zip_1030@325:1>](<zip_1030@325:0>:int,<zip_1030@325:1>:int)
          
           (<zip_1030@319:1> = <zip_1030@319:0>) |- P[<zip_1030@319:1>](<zip_1030@319:0>:int,
                                                                    <zip_1030@319:1>:int)
        input to Yhorn:
          P[<fail_1281@385:0>](<fail_1281@385:0>:int)|- bot
          
          P[<<zip_1030@319:2>@355:0>](<f_main_1272@382:0>:int,<f_main_1272@382:0>:int,<f_main_1272@382:1>:int),
          P[<<map_1033@359:1>@380:0>](<f_main_1272@382:1>:int,<f_main_1272@382:3>:int),
          ((<f_main_1272@382:3> <> <f_main_1272@382:0>) && (<fail_1281@385:0> = 1))
          |- P[<fail_1281@385:0>](<fail_1281@385:0>:int)
          
          P[<map_1033@359:0>](<map_1033@359:0>:int),
          P[<<map_1033@362:1>@374:0>](var368:int,var369:int),
          (((1 + var369) = <<map_1033@359:1>@380:0>) && (((1 + var368) = <map_1033@359:0>) && (<map_1033@359:0> <> 0)))
          |- P[<<map_1033@359:1>@380:0>](<map_1033@359:0>:int,<<map_1033@359:1>@380:0>:int)
          
          P[<map_1033@362:0>](<map_1033@362:0>:int),
          P[<<map_1033@365:1>@368:0>](var370:int,var371:int),
          (((1 + var371) = <<map_1033@362:1>@374:0>) && (((1 + var370) = <map_1033@362:0>) && (<map_1033@362:0> <> 0)))
          |- P[<<map_1033@362:1>@374:0>](<map_1033@362:0>:int,<<map_1033@362:1>@374:0>:int)
          
          P[<map_1033@365:0>](<map_1033@365:0>:int),
          ((<<map_1033@365:1>@368:0> = <map_1033@365:0>) && (<map_1033@365:0> = 0))
          |- P[<<map_1033@365:1>@368:0>](<map_1033@365:0>:int,<<map_1033@365:1>@368:0>:int)
          
          P[<map_1033@362:0>](var372:int), ((var372 = (1 + <map_1033@365:0>)) && ((1 + <map_1033@365:0>) <> 0))
          |- P[<map_1033@365:0>](<map_1033@365:0>:int)
          
          P[<map_1033@359:0>](var373:int), ((var373 = (1 + <map_1033@362:0>)) && ((1 + <map_1033@362:0>) <> 0))
          |- P[<map_1033@362:0>](<map_1033@362:0>:int)
          
          P[<<zip_1030@319:2>@355:0>](<f_main_1271@357:0>:int,<f_main_1271@357:0>:int,<map_1033@359:0>:int)|- P[<map_1033@359:0>](
          <map_1033@359:0>:int)
          
          P[<zip_1030@319:1>](<zip_1030@319:0>:int,<zip_1030@319:1>:int),
          P[<<zip_1030@325:2>@347:0>](var374:int,var375:int,var376:int),
          (((1 + var376) = <<zip_1030@319:2>@355:0>) &&
           (((1 + var375) = <zip_1030@319:1>) &&
            (((1 + var374) = <zip_1030@319:0>) && ((<zip_1030@319:1> <> 0) && (<zip_1030@319:0> <> 0)))))
          |- P[<<zip_1030@319:2>@355:0>](<zip_1030@319:0>:int,<zip_1030@319:1>:int,
                                         <<zip_1030@319:2>@355:0>:int)
          
          P[<zip_1030@325:1>](<zip_1030@325:0>:int,<zip_1030@325:1>:int),
          P[<<zip_1030@331:2>@339:0>](var377:int,var378:int,var379:int),
          (((1 + var379) = <<zip_1030@325:2>@347:0>) &&
           (((1 + var378) = <zip_1030@325:1>) &&
            (((1 + var377) = <zip_1030@325:0>) && ((<zip_1030@325:1> <> 0) && (<zip_1030@325:0> <> 0)))))
          |- P[<<zip_1030@325:2>@347:0>](<zip_1030@325:0>:int,<zip_1030@325:1>:int,
                                         <<zip_1030@325:2>@347:0>:int)
          
          P[<zip_1030@331:1>](<zip_1030@331:0>:int,<zip_1030@331:1>:int),
          ((<<zip_1030@331:2>@339:0> = <zip_1030@331:0>) && ((<zip_1030@331:1> = 0) && (<zip_1030@331:0> = 0)))
          |- P[<<zip_1030@331:2>@339:0>](<zip_1030@331:0>:int,<zip_1030@331:1>:int,
                                         <<zip_1030@331:2>@339:0>:int)
          
          P[<zip_1030@325:1>](var380:int,var381:int),
          ((var381 = (1 + <zip_1030@331:1>)) &&
           ((var380 = (1 + <zip_1030@331:0>)) && (((1 + <zip_1030@331:1>) <> 0) && ((1 + <zip_1030@331:0>) <> 0))))
          |- P[<zip_1030@331:1>](<zip_1030@331:0>:int,<zip_1030@331:1>:int)
          
          P[<zip_1030@319:1>](var382:int,var383:int),
          ((var383 = (1 + <zip_1030@325:1>)) &&
           ((var382 = (1 + <zip_1030@325:0>)) && (((1 + <zip_1030@325:1>) <> 0) && ((1 + <zip_1030@325:0>) <> 0))))
          |- P[<zip_1030@325:1>](<zip_1030@325:0>:int,<zip_1030@325:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1281_sep_385_sep_0($4573)) -> 1=0.
(($4573-1=0) & ($4574-$4575<>0)) & (v_sep_map_1033_sep_359_sep_1_sep_380_sep_0($4576,$4574)) & (v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0($4575,$4575,$4576)) -> v_sep_fail_1281_sep_385_sep_0($4573).
(($4577<>0) & (-$4577+$4578+1=0) & ($4579-$4580+1=0)) & (v_sep_map_1033_sep_362_sep_1_sep_374_sep_0($4578,$4579)) & (v_sep_map_1033_sep_359_sep_0($4577)) -> v_sep_map_1033_sep_359_sep_1_sep_380_sep_0($4577,$4580).
(($4581<>0) & (-$4581+$4582+1=0) & ($4583-$4584+1=0)) & (v_sep_map_1033_sep_365_sep_1_sep_368_sep_0($4582,$4583)) & (v_sep_map_1033_sep_362_sep_0($4581)) -> v_sep_map_1033_sep_362_sep_1_sep_374_sep_0($4581,$4584).
(($4585=0) & (-$4585+$4586=0)) & (v_sep_map_1033_sep_365_sep_0($4585)) -> v_sep_map_1033_sep_365_sep_1_sep_368_sep_0($4585,$4586).
(($4585+1<>0) & (-$4585+$4587-1=0)) & (v_sep_map_1033_sep_362_sep_0($4587)) -> v_sep_map_1033_sep_365_sep_0($4585).
(($4581+1<>0) & (-$4581+$4588-1=0)) & (v_sep_map_1033_sep_359_sep_0($4588)) -> v_sep_map_1033_sep_362_sep_0($4581).
(0=0) & (v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0($4589,$4589,$4577)) -> v_sep_map_1033_sep_359_sep_0($4577).
(($4590<>0) & ($4591<>0) & (-$4590+$4592+1=0) & (-$4591+$4593+1=0) & ($4594-$4595+1=0)) & (v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0($4592,$4593,$4594)) & (v_sep_zip_1030_sep_319_sep_1($4590,$4591)) -> v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0($4590,$4591,$4595).
(($4596<>0) & ($4597<>0) & (-$4596+$4598+1=0) & (-$4597+$4599+1=0) & ($4600-$4601+1=0)) & (v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0($4598,$4599,$4600)) & (v_sep_zip_1030_sep_325_sep_1($4596,$4597)) -> v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0($4596,$4597,$4601).
(($4602=0) & ($4603=0) & (-$4602+$4604=0)) & (v_sep_zip_1030_sep_331_sep_1($4602,$4603)) -> v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0($4602,$4603,$4604).
(($4602+1<>0) & ($4603+1<>0) & (-$4602+$4605-1=0) & (-$4603+$4606-1=0)) & (v_sep_zip_1030_sep_325_sep_1($4605,$4606)) -> v_sep_zip_1030_sep_331_sep_1($4602,$4603).
(($4596+1<>0) & ($4597+1<>0) & (-$4596+$4607-1=0) & (-$4597+$4608-1=0)) & (v_sep_zip_1030_sep_319_sep_1($4607,$4608)) -> v_sep_zip_1030_sep_325_sep_1($4596,$4597).
-$4590+$4591=0 -> v_sep_zip_1030_sep_319_sep_1($4590,$4591).


v_sep_fail_1281_sep_385_sep_0: X
v_sep_map_1033_sep_359_sep_0: X
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: X
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: X
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: X
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: X
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.............................................Split disj [76] 50.97225
Reconstrcut: 3 **)

v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: X
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: X
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: X
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: X
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: X
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.......
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: X
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: X
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: X
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: X
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: X
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.......Split conj [78] 50.997246
(Reconstrcut: 8 **)
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: X
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: X
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: X
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: X
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...............
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: X
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: X
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: X
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: X
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.......Split conj [81] 51.004245
(Reconstrcut: 27 ***)
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: X
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: X
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: X
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.................................................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: X
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: X
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: X
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.......
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: X
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: X
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: X
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...............................Split conj [91] 51.03524
(Reconstrcut: 14 ****)
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: X
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: X
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...............................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: X
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: X
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.......
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: X
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: X
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...............................Split conj [100] 51.075234
(Reconstrcut: 34 ******)
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: X
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
..........................................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: X
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.......
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: X
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...............................Split conj [110] 51.122228
(Reconstrcut: 61 ************)
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
..................................................................................................................................................................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.......
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...............................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...................................................................................................................Split conj [165] 51.345193
(Reconstrcut: 46 ******)
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
..........................................................................................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.......
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...............................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: X
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...................................................................................................................Split conj [190] 51.736134
(Reconstrcut: 26 ********)
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.......................................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.......
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...............................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: X
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...................................................................................................................Split conj [204] 52.042088
(Reconstrcut: 45 **********)
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.............................................................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.......
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...............................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: X
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...................................................................................................................Split conj [231] 52.338043
(Reconstrcut: 199 ************************************)
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
............................................................................................................................................................................................................................................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
.......
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...............................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: X
...................................................................................................................Split conj [301] 52.88396
(Reconstrcut: 187 ************************************************)
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...................................................................................................................................................................................................................................................................................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
.......
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...............................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...................................................................................................................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...............................................................................................................................................................................................................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
.......................................................................................................................................................................................................................................................
v_sep_fail_1281_sep_385_sep_0: (X) | (X)
v_sep_map_1033_sep_359_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_359_sep_1_sep_380_sep_0: (X) & (X)
v_sep_map_1033_sep_362_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1033_sep_362_sep_1_sep_374_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1033_sep_365_sep_0: X
v_sep_map_1033_sep_365_sep_1_sep_368_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_319_sep_2_sep_355_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_325_sep_1: X
v_sep_zip_1030_sep_325_sep_2_sep_347_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1030_sep_331_sep_1: X
v_sep_zip_1030_sep_331_sep_2_sep_339_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...........................................................................................................................................................................................................................................................................................