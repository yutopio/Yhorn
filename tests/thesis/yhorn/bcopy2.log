MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn bcopy2.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 des_1036 x_1037 =
   (match des_1036 i_1034 with
      | _ -> ()
      | _ -> let u_1078 = {fail} 
             in
               _|_) 
 in
 let rec bcopy_aux_1038 m_1039 src_1040 des_1041 i_1042 =
   if i_1042 >= m_1039 then
     ()
   else
     let u_1134 = update_1033 i_1042 m_1039 des_1041 (src_1040 i_1042) 
     in
       bcopy_aux_1038 m_1039 src_1040 des_1041 (i_1042 + 1) 
 in
 let main_1043 n_1044 m_1045 =
   let array1_1046 = make_array_1030 n_1044 
   in
   let array2_1047 = make_array_1030 m_1045 
   in
     if n_1044 <= m_1045 && n_1044 > 0 then
       bcopy_aux_1038 n_1044 array1_1046 array2_1047 0
     else
       () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 des_1036 x_1037 =
   (match des_1036 i_1034 with
      | _ -> ()
      | _ -> let u_1078 = {fail} 
             in
               _|_) 
 in
 let rec bcopy_aux_1038 m_1039 src_1040 des_1041 i_1042 =
   if i_1042 >= m_1039 then
     ()
   else
     let u_1134 = update_1033 i_1042 m_1039 des_1041 (src_1040 i_1042) 
     in
       bcopy_aux_1038 m_1039 src_1040 des_1041 (i_1042 + 1) 
 in
 let main_1043 n_1044 m_1045 =
   let array1_1046 = make_array_1030 n_1044 
   in
   let array2_1047 = make_array_1030 m_1045 
   in
     if n_1044 <= m_1045 && n_1044 > 0 then
       bcopy_aux_1038 n_1044 array1_1046 array2_1047 0
     else
       () 
 in
 let main_1169 = let arg1_1167 = rand_int () 
                 in
                 let arg2_1168 = rand_int () 
                 in
                   main_1043 arg1_1167 arg2_1168 
 in
   ()

copy_poly::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let update_1171 (i_1034:int) (n_1035:int) (des_1036:(int -> int)) (x_1037:int) =
   (match des_1036 i_1034 with
      | _ -> ()
      | _ -> let u_1078 = {fail} 
             in
               _|_) 
 in
 let rec bcopy_aux_1170 (m_1039:int) (src_1040:(int -> int)) (des_1041:(
   int -> int)) (i_1042:int) =
   if i_1042 >= m_1039 then
     ()
   else
     let u_1134 = update_1171 i_1042 m_1039 des_1041 (src_1040 i_1042) 
     in
       bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) 
 in
 let main_1043 (n_1044:int) (m_1045:int) =
   let array1_1046 = make_array_1030 n_1044 
   in
   let array2_1047 = make_array_1030 m_1045 
   in
     if n_1044 <= m_1045 && n_1044 > 0 then
       bcopy_aux_1170 n_1044 array1_1046 array2_1047 0
     else
       () 
 in
 let main_1169 = let arg1_1167 = rand_int () 
                 in
                 let arg2_1168 = rand_int () 
                 in
                   main_1043 arg1_1167 arg2_1168 
 in
   ()

abst_recdata::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1171 i_1034 n_1035 des_1036 x_1037 = let u_1172 = des_1036 i_1034 
                                                 in
                                                   () 
 in
 let rec bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 =
   if i_1042 >= m_1039 then
     ()
   else
     let u_1134 = update_1171 i_1042 m_1039 des_1041 (src_1040 i_1042) 
     in
       bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) 
 in
 let main_1043 n_1044 m_1045 =
   let array1_1046 = make_array_1030 n_1044 
   in
   let array2_1047 = make_array_1030 m_1045 
   in
     if n_1044 <= m_1045 && n_1044 > 0 then
       bcopy_aux_1170 n_1044 array1_1046 array2_1047 0
     else
       () 
 in
 let main_1169 = let arg1_1167 = rand_int () 
                 in
                 let arg2_1168 = rand_int () 
                 in
                   main_1043 arg1_1167 arg2_1168 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1200:(int -> X)) =
   let k_make_array_u_1217 (x_1203:unit) = k_make_array_1200 0 
   in
   let k_make_array_u_1206 (b_1218:bool) =
     if b_1218 then
       k_make_array_u_1217 ()
     else
       {|fail|} () k_make_array_u_1217 
   in
     if 0 <= i_1032 then
       k_make_array_u_1206 (i_1032 < n_1031)
     else
       k_make_array_u_1206 false 
 in
 let update_1171
   (i_1034:int) (n_1035:int) (des_1036:(int -> ((int -> X) -> X))) (x_1037:int) (k_update_1253:(
   unit -> X)) = des_1036 i_1034 (fun x_1256 -> k_update_1253 ()) 
 in
 let rec bcopy_aux_1170
   (m_1039:int) (src_1040:(int -> ((int -> X) -> X))) (des_1041:(int -> ((int -> X) -> X))) (i_1042:int) (k_bcopy_aux_1313:(
   unit -> X)) =
   if i_1042 >= m_1039 then
     k_bcopy_aux_1313 ()
   else
     src_1040 i_1042
       (fun x_1345 ->
          update_1171 i_1042 m_1039 des_1041 x_1345
            (fun x_1316 -> bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1313)) 
 in
 let main_1043 (n_1044:int) (m_1045:int) (k_main_1391:(unit -> X)) =
   let k_main_1426 (b_1456:bool) =
     if b_1456 then
       bcopy_aux_1170 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1391
     else
       k_main_1391 () 
   in
     if n_1044 <= m_1045 then
       k_main_1426 (n_1044 > 0)
     else
       k_main_1426 false 
 in
   rand_int_cps () (fun x_1462 -> rand_int_cps () (fun x_1475 -> main_1043 x_1462 x_1475 (fun x_1459 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1504
  main_1504 -> (rand_int f_1508)
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (i_1042 >= m_1039) -> (k_bcopy_aux_1313 ())
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (
      not (i_1042 >= m_1039)) -> (src_1040 i_1042 (f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040))
  f_1508 x_1462 -> (rand_int (f_1509 x_1462))
  f_1509 x_1462 x_1475 -> (main_1043 x_1462 x_1475 (f_1510 x_1462 x_1475))
  f_1510 x_1462 x_1475 x_1459 -> end
  f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 ->
      (update_1171 i_1042 m_1039 des_1041 x_1345
        (f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040))
  f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 ->
      (bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1313)
  f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 -> (k_update_1253 ())
  fail_1511 b k -> {fail} => (k ())
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when b_1456 ->
      (bcopy_aux_1170 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1391)
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when (not b_1456) -> (k_main_1391 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when b_1218 ->
      (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when (not b_1218) ->
      (fail_1511 true (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200))
  k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 -> (k_make_array_1200 0)
  main_1043 n_1044 m_1045 k_main_1391 when (n_1044 <= m_1045) -> (k_main_1426 m_1045 n_1044 k_main_1391 (n_1044 > 0))
  main_1043 n_1044 m_1045 k_main_1391 when (not (n_1044 <= m_1045)) -> (k_main_1426 m_1045 n_1044 k_main_1391 false)
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (0 <= i_1032) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (not (0 <= i_1032)) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 false)
  update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 ->
      (des_1036 i_1034 (f_update_1505 i_1034 n_1035 x_1037 k_update_1253))
Types:
  main_1504 : X
  bcopy_aux_1170 : (int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  fail_1511 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1504 ... --> 
  f_1508 ... --> 
  f_1509 ... --> 
  main_1043 [1/2] ... --> 
  k_main_1426 [1/2] ... --> 
  bcopy_aux_1170 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1206 [2/2] ... --> 
  fail_1511 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(211)[1]
  program:
    main_1504  | true = ((Random.int 0) f_1508)
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    i_1042 >= m_1039) = (k_bcopy_aux_1313 ())
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    not (i_1042 >= m_1039)) = (src_1040 i_1042
                                        (f_bcopy_aux_1506 i_1042
                                                          m_1039
                                                          des_1041
                                                          k_bcopy_aux_1313
                                                          src_1040))
    f_1508 x_1462 | true = ((Random.int 0) (f_1509 x_1462))
    f_1509 x_1462 x_1475 | true = (main_1043 x_1462
                                             x_1475
                                             (f_1510 x_1462
                                                     x_1475))
    f_1510 x_1462 x_1475 x_1459 | true = end
    f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 | true = (
    update_1171
      i_1042
      m_1039
      des_1041
      x_1345
      (f_bcopy_aux_1507 i_1042
                        m_1039
                        x_1345
                        des_1041
                        k_bcopy_aux_1313
                        src_1040))
    f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 | true = (
    bcopy_aux_1170 m_1039
                   src_1040
                   des_1041
                   (i_1042 + 1)
                   k_bcopy_aux_1313)
    f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 | true = (
    k_update_1253 ())
    fail_1511 b k | true = (fail ())
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | b_1456 = (bcopy_aux_1170
                                                               n_1044
                                                               (make_array_1030 n_1044)
                                                               (make_array_1030 m_1045)
                                                               0
                                                               k_main_1391)
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | (not b_1456) = (k_main_1391 ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | b_1218 = (
    k_make_array_u_1217 i_1032
                        n_1031
                        k_make_array_1200
                        ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | (not b_1218) = (
    fail_1511 true
              (k_make_array_u_1217 i_1032
                                   n_1031
                                   k_make_array_1200))
    k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 | true = (
    k_make_array_1200 0)
    main_1043 n_1044 m_1045 k_main_1391 | (n_1044 <= m_1045) = (k_main_1426 m_1045
                                                                    n_1044
                                                                    k_main_1391
                                                                    (n_1044 > 0))
    main_1043 n_1044 m_1045 k_main_1391 | (not (n_1044 <= m_1045)) = (
    k_main_1426 m_1045
                n_1044
                k_main_1391
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (0 <= i_1032) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (not (0 <= i_1032)) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        false)
    update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 | true = (
    des_1036 i_1034
             (f_update_1505 i_1034
                            n_1035
                            x_1037
                            k_update_1253))
    main_1504:X
    bcopy_aux_1170:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1508:int -> X
    f_1509:int -> int -> X
    f_1510:int -> int -> unit -> X
    f_bcopy_aux_1506:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1507:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1505:int -> int -> int -> (unit -> X) -> int -> X
    fail_1511:bool -> (unit -> X) -> X
    k_main_1426:int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1206:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1217:int -> int -> (int -> X) -> unit -> X
    main_1043:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1171:int -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
  inlined functions: f_1508,f_1509,f_1510,f_bcopy_aux_1506,f_bcopy_aux_1507,f_update_1505,k_main_1426,k_make_array_u_1206,k_make_array_u_1217,main_1043,make_array_1030,update_1171
  counterexample: 0:0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1508@4:0> = var2)
     [true.nop((<f_1509@7:0> = <f_1508@4:0>) && (<f_1509@7:1> = var3))
      [true.((<main_1043@9:0> = <f_1509@7:0>) && (<main_1043@9:1> = <f_1509@7:1>))
       [(<main_1043@9:0> <= <main_1043@9:1>).
        ((<k_main_1426@12:0> = <main_1043@9:1>) &&
         ((<k_main_1426@12:1> = <main_1043@9:0>) && (<k_main_1426@12:3> = (<main_1043@9:0> > 0))))
        [<k_main_1426@12:3>.((<bcopy_aux_1170@15:0> = <k_main_1426@12:1>) && (<bcopy_aux_1170@15:3> = 0))
         [(not (<bcopy_aux_1170@15:3> >= <bcopy_aux_1170@15:0>)).(<<bcopy_aux_1170@15:1>@18:0> = <bcopy_aux_1170@15:3>)
          [true.
           ((<make_array_1030@20:0> = <k_main_1426@12:1>) && (<make_array_1030@20:1> = <<bcopy_aux_1170@15:1>@18:0>))
           [(not (0 <= <make_array_1030@20:1>)).
            ((<k_make_array_u_1206@23:0> = <make_array_1030@20:1>) &&
             ((<k_make_array_u_1206@23:1> = <make_array_1030@20:0>) && (<k_make_array_u_1206@23:3> = false)))
            [(not <k_make_array_u_1206@23:3>).(<fail_1511@26:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(212)[2]
    horn clauses:
      P[<fail_1511@26:0>](<fail_1511@26:0>:bool)|- bot
      
      P[<k_make_array_u_1206@23:3>](<k_make_array_u_1206@23:0>:int,<k_make_array_u_1206@23:1>:int,false:bool),
      <fail_1511@26:0> |- P[<fail_1511@26:0>](<fail_1511@26:0>:bool)
      
      P[<make_array_1030@20:1>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
      ((0 > <k_make_array_u_1206@23:0>) && (not <k_make_array_u_1206@23:3>))
      |- P[<k_make_array_u_1206@23:3>](<k_make_array_u_1206@23:0>:int,
                                       <k_make_array_u_1206@23:1>:int,
                                       <k_make_array_u_1206@23:3>:bool)
      
      P[<k_main_1426@12:3>](<k_main_1426@12:0>:int,<make_array_1030@20:0>:int,true:bool),
      P[<<bcopy_aux_1170@15:1>@18:0>](<make_array_1030@20:0>:int,<make_array_1030@20:1>:int)|- P[<make_array_1030@20:1>](
      <make_array_1030@20:0>:int,<make_array_1030@20:1>:int)
      
      P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
      (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
      |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int)
      
      P[<k_main_1426@12:3>](<k_main_1426@12:0>:int,<bcopy_aux_1170@15:0>:int,true:bool), (
      <bcopy_aux_1170@15:3> = 0) |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,
                                                             <bcopy_aux_1170@15:3>:int)
      
      P[<main_1043@9:1>](<k_main_1426@12:1>:int,<k_main_1426@12:0>:int),
      ((<k_main_1426@12:1> <= <k_main_1426@12:0>) && (<k_main_1426@12:3> = (<k_main_1426@12:1> > 0)))
      |- P[<k_main_1426@12:3>](<k_main_1426@12:0>:int,<k_main_1426@12:1>:int,
                               <k_main_1426@12:3>:bool)
      
      P[<f_1509@7:1>](<main_1043@9:0>:int,<main_1043@9:1>:int)|- P[<main_1043@9:1>](
      <main_1043@9:0>:int,<main_1043@9:1>:int)
      
      P[<f_1508@4:0>](<f_1509@7:0>:int)|- P[<f_1509@7:1>](<f_1509@7:0>:int,
                                                          <f_1509@7:1>:int)
      
      |- P[<f_1508@4:0>](<f_1508@4:0>:int)
    call trees:
      <main_1504@1>
        <f_1508@4>
          <f_1509@7>
            <main_1043@9>
              <k_main_1426@12>
                <bcopy_aux_1170@15>
                </<bcopy_aux_1170@15:1>@18>
                <make_array_1030@20>
                  <k_make_array_u_1206@23>
                    <fail_1511@26>
    inlined horn clauses:
      P[<fail_1511@26:0>](<fail_1511@26:0>:bool)|- bot
      
      P[<<bcopy_aux_1170@15:1>@18:0>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
      ((0 > <k_make_array_u_1206@23:0>) && ((<k_make_array_u_1206@23:1> > 0) && <fail_1511@26:0>))
      |- P[<fail_1511@26:0>](<fail_1511@26:0>:bool)
      
      P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
      (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
      |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int)
      
       ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
      |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)
    begin ParamSubstInfer.infer(1636)[3]
      
    end ParamSubstInfer.infer(1636)[3] (0.035994 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1638)[3]
      
    end RefTypeInfer.elim_coeffs(1638)[3] (0.000000 sec.)
    begin YhornInterface.solve(1834)[3]
      begin HcSolver.solve_ub(1835)[4]
        encoded:
          P[<fail_1511@26:0>](<fail_1511@26:0>:int)|- bot
          
          P[<<bcopy_aux_1170@15:1>@18:0>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
          ((0 > <k_make_array_u_1206@23:0>) && ((<k_make_array_u_1206@23:1> > 0) && (<fail_1511@26:0> = 1)))
          |- P[<fail_1511@26:0>](<fail_1511@26:0>:int)
          
          P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
          (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
          |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,
                                             <<bcopy_aux_1170@15:1>@18:0>:int)
          
           ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
          |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)
        input to Yhorn:
          P[<fail_1511@26:0>](<fail_1511@26:0>:int)|- bot
          
          P[<<bcopy_aux_1170@15:1>@18:0>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
          ((<k_make_array_u_1206@23:1> > 0) && ((0 > <k_make_array_u_1206@23:0>) && (<fail_1511@26:0> = 1)))
          |- P[<fail_1511@26:0>](<fail_1511@26:0>:int)
          
          P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
          (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
          |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,
                                             <<bcopy_aux_1170@15:1>@18:0>:int)
          
           ((<bcopy_aux_1170@15:0> > 0) && (<bcopy_aux_1170@15:3> = 0))
          |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1511_sep_26_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0) & ($9>0)) & (v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0($9,$8)) -> v_sep_fail_1511_sep_26_sep_0($7).
($10-$11<0) & (v_sep_bcopy_aux_1170_sep_15_sep_3($11,$10)) -> v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0($11,$10).
($12=0) & ($11>0) -> v_sep_bcopy_aux_1170_sep_15_sep_3($11,$12).


v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0: X
v_sep_bcopy_aux_1170_sep_15_sep_3: X
v_sep_fail_1511_sep_26_sep_0: X
....
v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0: X
v_sep_bcopy_aux_1170_sep_15_sep_3: X
v_sep_fail_1511_sep_26_sep_0: X
...
v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0: X
v_sep_bcopy_aux_1170_sep_15_sep_3: X
v_sep_fail_1511_sep_26_sep_0: X
....
v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0: X
v_sep_bcopy_aux_1170_sep_15_sep_3: X
v_sep_fail_1511_sep_26_sep_0: X
....(0=0) & (v_sep_fail_1511_sep_26_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0) & ($9>0)) & (v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0($9,$8)) -> v_sep_fail_1511_sep_26_sep_0($7).
($10-$11<0) & (v_sep_bcopy_aux_1170_sep_15_sep_3($11,$10)) -> v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0($11,$10).
($12=0) & ($11>0) -> v_sep_bcopy_aux_1170_sep_15_sep_3($11,$12).

        solution:
          P[<<bcopy_aux_1170@15:1>@18:0>]($16:int,$18:int) = (0 <= $18)
          P[<bcopy_aux_1170@15:3>]($21:int,$23:int) = (0 <= $23)
          P[<fail_1511@26:0>]($13:bool) = false
        
      end HcSolver.solve_ub(1835)[4] (0.015998 sec.)
      begin HcSolver.check_validity(1969)[4]
        input:
          P[<fail_1511@26:0>](<fail_1511@26:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@15:1>@18:0>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
          ((0 > <k_make_array_u_1206@23:0>) && ((<k_make_array_u_1206@23:1> > 0) && <fail_1511@26:0>))
          |- P[<fail_1511@26:0>](<fail_1511@26:0>:bool)
          
          P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
          (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
          |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,
                                             <<bcopy_aux_1170@15:1>@18:0>:int)
          
           ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
          |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1969)[4] (0.000999 sec.)
      solution:
        P[<<bcopy_aux_1170@15:1>@18:0>]($16:int,$18:int) = (0 <= $18)
        P[<bcopy_aux_1170@15:3>]($21:int,$23:int) = (0 <= $23)
        P[<fail_1511@26:0>]($13:bool) = false
    end YhornInterface.solve(1834)[3] (0.016997 sec.)
    
  end RefTypeInfer.infer_etrs(212)[2] (0.059990 sec.)
  refinement types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:{v10:int | (0 <= v10)} -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1511: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1510: var25:int -> var24:int -> var23:unit -> X
    f_bcopy_aux_1506: var39:int ->
                      var38:int ->
                      (var37:int -> (var36:int -> X) -> X) ->
                      (var33:unit -> X) -> (var31:int -> (var30:int -> X) -> X) -> var27:int -> X
    f_bcopy_aux_1507: var54:int ->
                      var53:int ->
                      var52:int ->
                      (var51:int -> (var50:int -> X) -> X) ->
                      (var47:unit -> X) -> (var45:int -> (var44:int -> X) -> X) -> var41:unit -> X
    f_update_1505: var61:int -> var60:int -> var59:int -> (var58:unit -> X) -> var56:int -> X
    k_make_array_u_1217: var67:int -> var66:int -> (var65:int -> X) -> var63:unit -> X
    update_1171: var77:int -> var76:int -> (var75:int -> (var74:int -> X) -> X) -> var71:int -> (var70:unit -> X) -> X
  abstraction types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int[v10 -> (
                                                              0 <= v10)] -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1511: v1:bool -> (v2:unit -> X) -> X
    f_1510: var25:int -> var24:int -> var23:unit -> X
    f_bcopy_aux_1506: var39:int ->
                      var38:int ->
                      (var37:int -> (var36:int -> X) -> X) ->
                      (var33:unit -> X) -> (var31:int -> (var30:int -> X) -> X) -> var27:int -> X
    f_bcopy_aux_1507: var54:int ->
                      var53:int ->
                      var52:int ->
                      (var51:int -> (var50:int -> X) -> X) ->
                      (var47:unit -> X) -> (var45:int -> (var44:int -> X) -> X) -> var41:unit -> X
    f_update_1505: var61:int -> var60:int -> var59:int -> (var58:unit -> X) -> var56:int -> X
    k_make_array_u_1217: var67:int -> var66:int -> (var65:int -> X) -> var63:unit -> X
    update_1171: var77:int -> var76:int -> (var75:int -> (var74:int -> X) -> X) -> var71:int -> (var70:unit -> X) -> X
  
end AbsTypeInfer.refine(211)[1] (0.064990 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1504
  main_1504 -> (rand_int f_1508)
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (i_1042 >= m_1039) -> (k_bcopy_aux_1313 ())
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (
      not (i_1042 >= m_1039)) -> (src_1040 i_1042 (f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040))
  f_1508 x_1462 -> (rand_int (f_1509 x_1462))
  f_1509 x_1462 x_1475 -> (main_1043 x_1462 x_1475 (f_1510 x_1462 x_1475))
  f_1510 x_1462 x_1475 x_1459 -> end
  f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 ->
      (update_1171 i_1042 m_1039 des_1041 x_1345
        (f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040))
  f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 ->
      (bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1313)
  f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 -> (k_update_1253 ())
  fail_1511 b k -> {fail} => (k ())
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when b_1456 ->
      (bcopy_aux_1170 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1391)
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when (not b_1456) -> (k_main_1391 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when b_1218 ->
      (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when (not b_1218) ->
      (fail_1511 true (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200))
  k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 -> (k_make_array_1200 0)
  main_1043 n_1044 m_1045 k_main_1391 when (n_1044 <= m_1045) -> (k_main_1426 m_1045 n_1044 k_main_1391 (n_1044 > 0))
  main_1043 n_1044 m_1045 k_main_1391 when (not (n_1044 <= m_1045)) -> (k_main_1426 m_1045 n_1044 k_main_1391 false)
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (0 <= i_1032) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (not (0 <= i_1032)) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 false)
  update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 ->
      (des_1036 i_1034 (f_update_1505 i_1034 n_1035 x_1037 k_update_1253))
Types:
  main_1504 : X
  bcopy_aux_1170 : (int ->
                    (x_3:int[x_3 >= 0] -> (int -> X) -> X) ->
                    (int -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1511 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1504 ... --> 
  f_1508 ... --> 
  f_1509 ... --> 
  main_1043 [1/2] ... --> 
  k_main_1426 [1/2] ... --> 
  bcopy_aux_1170 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1206 [2/2] ... --> 
  fail_1511 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(2668)[1]
  program:
    main_1504  | true = ((Random.int 0) f_1508)
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    i_1042 >= m_1039) = (k_bcopy_aux_1313 ())
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    not (i_1042 >= m_1039)) = (src_1040 i_1042
                                        (f_bcopy_aux_1506 i_1042
                                                          m_1039
                                                          des_1041
                                                          k_bcopy_aux_1313
                                                          src_1040))
    f_1508 x_1462 | true = ((Random.int 0) (f_1509 x_1462))
    f_1509 x_1462 x_1475 | true = (main_1043 x_1462
                                             x_1475
                                             (f_1510 x_1462
                                                     x_1475))
    f_1510 x_1462 x_1475 x_1459 | true = end
    f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 | true = (
    update_1171
      i_1042
      m_1039
      des_1041
      x_1345
      (f_bcopy_aux_1507 i_1042
                        m_1039
                        x_1345
                        des_1041
                        k_bcopy_aux_1313
                        src_1040))
    f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 | true = (
    bcopy_aux_1170 m_1039
                   src_1040
                   des_1041
                   (i_1042 + 1)
                   k_bcopy_aux_1313)
    f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 | true = (
    k_update_1253 ())
    fail_1511 b k | true = (fail ())
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | b_1456 = (bcopy_aux_1170
                                                               n_1044
                                                               (make_array_1030 n_1044)
                                                               (make_array_1030 m_1045)
                                                               0
                                                               k_main_1391)
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | (not b_1456) = (k_main_1391 ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | b_1218 = (
    k_make_array_u_1217 i_1032
                        n_1031
                        k_make_array_1200
                        ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | (not b_1218) = (
    fail_1511 true
              (k_make_array_u_1217 i_1032
                                   n_1031
                                   k_make_array_1200))
    k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 | true = (
    k_make_array_1200 0)
    main_1043 n_1044 m_1045 k_main_1391 | (n_1044 <= m_1045) = (k_main_1426 m_1045
                                                                    n_1044
                                                                    k_main_1391
                                                                    (n_1044 > 0))
    main_1043 n_1044 m_1045 k_main_1391 | (not (n_1044 <= m_1045)) = (
    k_main_1426 m_1045
                n_1044
                k_main_1391
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (0 <= i_1032) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (not (0 <= i_1032)) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        false)
    update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 | true = (
    des_1036 i_1034
             (f_update_1505 i_1034
                            n_1035
                            x_1037
                            k_update_1253))
    main_1504:X
    bcopy_aux_1170:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1508:int -> X
    f_1509:int -> int -> X
    f_1510:int -> int -> unit -> X
    f_bcopy_aux_1506:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1507:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1505:int -> int -> int -> (unit -> X) -> int -> X
    fail_1511:bool -> (unit -> X) -> X
    k_main_1426:int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1206:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1217:int -> int -> (int -> X) -> unit -> X
    main_1043:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1171:int -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
  inlined functions: f_1508,f_1509,f_1510,f_bcopy_aux_1506,f_bcopy_aux_1507,f_update_1505,k_main_1426,k_make_array_u_1206,k_make_array_u_1217,main_1043,make_array_1030,update_1171
  counterexample: 0:0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1508@32:0> = var78)
     [true.nop((<f_1509@35:0> = <f_1508@32:0>) && (<f_1509@35:1> = var79))
      [true.((<main_1043@37:0> = <f_1509@35:0>) && (<main_1043@37:1> = <f_1509@35:1>))
       [(<main_1043@37:0> <= <main_1043@37:1>).
        ((<k_main_1426@40:0> = <main_1043@37:1>) &&
         ((<k_main_1426@40:1> = <main_1043@37:0>) && (<k_main_1426@40:3> = (<main_1043@37:0> > 0))))
        [<k_main_1426@40:3>.((<bcopy_aux_1170@43:0> = <k_main_1426@40:1>) && (<bcopy_aux_1170@43:3> = 0))
         [(not (<bcopy_aux_1170@43:3> >= <bcopy_aux_1170@43:0>)).(<<bcopy_aux_1170@43:1>@46:0> = <bcopy_aux_1170@43:3>)
          [true.
           ((<make_array_1030@48:0> = <k_main_1426@40:1>) && (<make_array_1030@48:1> = <<bcopy_aux_1170@43:1>@46:0>))
           [(0 <= <make_array_1030@48:1>).
            ((<k_make_array_u_1206@51:0> = <make_array_1030@48:1>) &&
             ((<k_make_array_u_1206@51:1> = <make_array_1030@48:0>) &&
              (<k_make_array_u_1206@51:3> = (<make_array_1030@48:1> < <make_array_1030@48:0>))))
            [(not <k_make_array_u_1206@51:3>).(<fail_1511@54:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(2669)[2]
    horn clauses:
      P[<fail_1511@54:0>](<fail_1511@54:0>:bool)|- bot
      
      P[<k_make_array_u_1206@51:3>](<k_make_array_u_1206@51:0>:int,<k_make_array_u_1206@51:1>:int,false:bool),
      <fail_1511@54:0> |- P[<fail_1511@54:0>](<fail_1511@54:0>:bool)
      
      P[<make_array_1030@48:1>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
      ((0 <= <k_make_array_u_1206@51:0>) &&
       (<k_make_array_u_1206@51:3> = (<k_make_array_u_1206@51:0> < <k_make_array_u_1206@51:1>)))
      |- P[<k_make_array_u_1206@51:3>](<k_make_array_u_1206@51:0>:int,
                                       <k_make_array_u_1206@51:1>:int,
                                       <k_make_array_u_1206@51:3>:bool)
      
      P[<k_main_1426@40:3>](<k_main_1426@40:0>:int,<make_array_1030@48:0>:int,true:bool),
      P[<<bcopy_aux_1170@43:1>@46:0>](<make_array_1030@48:0>:int,<make_array_1030@48:1>:int)|- P[<make_array_1030@48:1>](
      <make_array_1030@48:0>:int,<make_array_1030@48:1>:int)
      
      P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
      (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
      |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int)
      
      P[<k_main_1426@40:3>](<k_main_1426@40:0>:int,<bcopy_aux_1170@43:0>:int,true:bool), (
      <bcopy_aux_1170@43:3> = 0) |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,
                                                             <bcopy_aux_1170@43:3>:int)
      
      P[<main_1043@37:1>](<k_main_1426@40:1>:int,<k_main_1426@40:0>:int),
      ((<k_main_1426@40:1> <= <k_main_1426@40:0>) && (<k_main_1426@40:3> = (<k_main_1426@40:1> > 0)))
      |- P[<k_main_1426@40:3>](<k_main_1426@40:0>:int,<k_main_1426@40:1>:int,
                               <k_main_1426@40:3>:bool)
      
      P[<f_1509@35:1>](<main_1043@37:0>:int,<main_1043@37:1>:int)|- P[<main_1043@37:1>](
      <main_1043@37:0>:int,<main_1043@37:1>:int)
      
      P[<f_1508@32:0>](<f_1509@35:0>:int)|- P[<f_1509@35:1>](<f_1509@35:0>:int,
                                                             <f_1509@35:1>:int)
      
      |- P[<f_1508@32:0>](<f_1508@32:0>:int)
    call trees:
      <main_1504@29>
        <f_1508@32>
          <f_1509@35>
            <main_1043@37>
              <k_main_1426@40>
                <bcopy_aux_1170@43>
                </<bcopy_aux_1170@43:1>@46>
                <make_array_1030@48>
                  <k_make_array_u_1206@51>
                    <fail_1511@54>
    inlined horn clauses:
      P[<fail_1511@54:0>](<fail_1511@54:0>:bool)|- bot
      
      P[<<bcopy_aux_1170@43:1>@46:0>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
      ((0 <= <k_make_array_u_1206@51:0>) &&
       ((<k_make_array_u_1206@51:1> > 0) &&
        ((<k_make_array_u_1206@51:0> >= <k_make_array_u_1206@51:1>) && <fail_1511@54:0>)))
      |- P[<fail_1511@54:0>](<fail_1511@54:0>:bool)
      
      P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
      (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
      |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int)
      
       ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
      |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)
    begin ParamSubstInfer.infer(4352)[3]
      
    end ParamSubstInfer.infer(4352)[3] (0.079988 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(4354)[3]
      
    end RefTypeInfer.elim_coeffs(4354)[3] (0.000000 sec.)
    begin YhornInterface.solve(4635)[3]
      begin HcSolver.solve_ub(4636)[4]
        encoded:
          P[<fail_1511@54:0>](<fail_1511@54:0>:int)|- bot
          
          P[<<bcopy_aux_1170@43:1>@46:0>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
          ((0 <= <k_make_array_u_1206@51:0>) &&
           ((<k_make_array_u_1206@51:1> > 0) &&
            ((<k_make_array_u_1206@51:0> >= <k_make_array_u_1206@51:1>) && (<fail_1511@54:0> = 1))))
          |- P[<fail_1511@54:0>](<fail_1511@54:0>:int)
          
          P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
          (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
          |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,
                                             <<bcopy_aux_1170@43:1>@46:0>:int)
          
           ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
          |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)
        input to Yhorn:
          P[<fail_1511@54:0>](<fail_1511@54:0>:int)|- bot
          
          P[<<bcopy_aux_1170@43:1>@46:0>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
          ((<k_make_array_u_1206@51:0> >= <k_make_array_u_1206@51:1>) &&
           ((<k_make_array_u_1206@51:1> > 0) && ((0 <= <k_make_array_u_1206@51:0>) && (<fail_1511@54:0> = 1))))
          |- P[<fail_1511@54:0>](<fail_1511@54:0>:int)
          
          P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
          (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
          |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,
                                             <<bcopy_aux_1170@43:1>@46:0>:int)
          
           ((<bcopy_aux_1170@43:0> > 0) && (<bcopy_aux_1170@43:3> = 0))
          |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1511_sep_54_sep_0($67)) -> 1=0.
(($67-1=0) & (-$68<=0) & ($69>0) & ($68-$69>=0)) & (v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0($69,$68)) -> v_sep_fail_1511_sep_54_sep_0($67).
($70-$71<0) & (v_sep_bcopy_aux_1170_sep_43_sep_3($71,$70)) -> v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0($71,$70).
($72=0) & ($71>0) -> v_sep_bcopy_aux_1170_sep_43_sep_3($71,$72).


v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0: X
v_sep_bcopy_aux_1170_sep_43_sep_3: X
v_sep_fail_1511_sep_54_sep_0: X
....
v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0: X
v_sep_bcopy_aux_1170_sep_43_sep_3: X
v_sep_fail_1511_sep_54_sep_0: X
...
v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0: X
v_sep_bcopy_aux_1170_sep_43_sep_3: X
v_sep_fail_1511_sep_54_sep_0: X
....
v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0: X
v_sep_bcopy_aux_1170_sep_43_sep_3: X
v_sep_fail_1511_sep_54_sep_0: X
....(0=0) & (v_sep_fail_1511_sep_54_sep_0($67)) -> 1=0.
(($67-1=0) & (-$68<=0) & ($69>0) & ($68-$69>=0)) & (v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0($69,$68)) -> v_sep_fail_1511_sep_54_sep_0($67).
($70-$71<0) & (v_sep_bcopy_aux_1170_sep_43_sep_3($71,$70)) -> v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0($71,$70).
($72=0) & ($71>0) -> v_sep_bcopy_aux_1170_sep_43_sep_3($71,$72).

        solution:
          P[<<bcopy_aux_1170@43:1>@46:0>]($76:int,$78:int) = ((1 + $78) <= $76)
          P[<bcopy_aux_1170@43:3>]($81:int,$83:int) = ((1 + $83) <= $81)
          P[<fail_1511@54:0>]($73:bool) = false
        
      end HcSolver.solve_ub(4636)[4] (0.012998 sec.)
      begin HcSolver.check_validity(4836)[4]
        input:
          P[<fail_1511@54:0>](<fail_1511@54:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@43:1>@46:0>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
          ((0 <= <k_make_array_u_1206@51:0>) &&
           ((<k_make_array_u_1206@51:1> > 0) &&
            ((<k_make_array_u_1206@51:0> >= <k_make_array_u_1206@51:1>) && <fail_1511@54:0>)))
          |- P[<fail_1511@54:0>](<fail_1511@54:0>:bool)
          
          P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
          (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
          |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,
                                             <<bcopy_aux_1170@43:1>@46:0>:int)
          
           ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
          |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(4836)[4] (0.001000 sec.)
      solution:
        P[<<bcopy_aux_1170@43:1>@46:0>]($76:int,$78:int) = ((1 + $78) <= $76)
        P[<bcopy_aux_1170@43:3>]($81:int,$83:int) = ((1 + $83) <= $81)
        P[<fail_1511@54:0>]($73:bool) = false
    end YhornInterface.solve(4635)[3] (0.013998 sec.)
    
  end RefTypeInfer.infer_etrs(2669)[2] (0.106984 sec.)
  refinement types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:{v10:int | ((1 + v10) <= v1)} -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1511: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1510: var101:int -> var100:int -> var99:unit -> X
    f_bcopy_aux_1506: var115:int ->
                      var114:int ->
                      (var113:int -> (var112:int -> X) -> X) ->
                      (var109:unit -> X) -> (var107:int -> (var106:int -> X) -> X) -> var103:int -> X
    f_bcopy_aux_1507: var130:int ->
                      var129:int ->
                      var128:int ->
                      (var127:int -> (var126:int -> X) -> X) ->
                      (var123:unit -> X) -> (var121:int -> (var120:int -> X) -> X) -> var117:unit -> X
    f_update_1505: var137:int -> var136:int -> var135:int -> (var134:unit -> X) -> var132:int -> X
    k_make_array_u_1217: var143:int -> var142:int -> (var141:int -> X) -> var139:unit -> X
    update_1171: var153:int ->
                 var152:int -> (var151:int -> (var150:int -> X) -> X) -> var147:int -> (var146:unit -> X) -> X
  abstraction types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int[v10 -> (
                                                              (1 + v10) <= v1)] -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1511: v1:bool -> (v2:unit -> X) -> X
    f_1510: var101:int -> var100:int -> var99:unit -> X
    f_bcopy_aux_1506: var115:int ->
                      var114:int ->
                      (var113:int -> (var112:int -> X) -> X) ->
                      (var109:unit -> X) -> (var107:int -> (var106:int -> X) -> X) -> var103:int -> X
    f_bcopy_aux_1507: var130:int ->
                      var129:int ->
                      var128:int ->
                      (var127:int -> (var126:int -> X) -> X) ->
                      (var123:unit -> X) -> (var121:int -> (var120:int -> X) -> X) -> var117:unit -> X
    f_update_1505: var137:int -> var136:int -> var135:int -> (var134:unit -> X) -> var132:int -> X
    k_make_array_u_1217: var143:int -> var142:int -> (var141:int -> X) -> var139:unit -> X
    update_1171: var153:int ->
                 var152:int -> (var151:int -> (var150:int -> X) -> X) -> var147:int -> (var146:unit -> X) -> X
  
end AbsTypeInfer.refine(2668)[1] (0.112983 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1504
  main_1504 -> (rand_int f_1508)
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (i_1042 >= m_1039) -> (k_bcopy_aux_1313 ())
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (
      not (i_1042 >= m_1039)) -> (src_1040 i_1042 (f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040))
  f_1508 x_1462 -> (rand_int (f_1509 x_1462))
  f_1509 x_1462 x_1475 -> (main_1043 x_1462 x_1475 (f_1510 x_1462 x_1475))
  f_1510 x_1462 x_1475 x_1459 -> end
  f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 ->
      (update_1171 i_1042 m_1039 des_1041 x_1345
        (f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040))
  f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 ->
      (bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1313)
  f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 -> (k_update_1253 ())
  fail_1511 b k -> {fail} => (k ())
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when b_1456 ->
      (bcopy_aux_1170 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1391)
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when (not b_1456) -> (k_main_1391 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when b_1218 ->
      (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when (not b_1218) ->
      (fail_1511 true (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200))
  k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 -> (k_make_array_1200 0)
  main_1043 n_1044 m_1045 k_main_1391 when (n_1044 <= m_1045) -> (k_main_1426 m_1045 n_1044 k_main_1391 (n_1044 > 0))
  main_1043 n_1044 m_1045 k_main_1391 when (not (n_1044 <= m_1045)) -> (k_main_1426 m_1045 n_1044 k_main_1391 false)
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (0 <= i_1032) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (not (0 <= i_1032)) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 false)
  update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 ->
      (des_1036 i_1034 (f_update_1505 i_1034 n_1035 x_1037 k_update_1253))
Types:
  main_1504 : X
  bcopy_aux_1170 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                    (int -> (int -> X) -> X) -> x_14:int[x_1 >= x_14 + 1; x_14 >= 0] -> (unit -> X) -> X)
  fail_1511 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1504 ... --> 
  f_1508 ... --> 
  f_1509 ... --> 
  main_1043 [1/2] ... --> 
  k_main_1426 [1/2] ... --> 
  bcopy_aux_1170 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1206 [1/2] ... --> 
  k_make_array_u_1217 ... --> 
  f_bcopy_aux_1506 ... --> 
  update_1171 ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1206 [2/2] ... --> 
  fail_1511 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(6189)[1]
  program:
    main_1504  | true = ((Random.int 0) f_1508)
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    i_1042 >= m_1039) = (k_bcopy_aux_1313 ())
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    not (i_1042 >= m_1039)) = (src_1040 i_1042
                                        (f_bcopy_aux_1506 i_1042
                                                          m_1039
                                                          des_1041
                                                          k_bcopy_aux_1313
                                                          src_1040))
    f_1508 x_1462 | true = ((Random.int 0) (f_1509 x_1462))
    f_1509 x_1462 x_1475 | true = (main_1043 x_1462
                                             x_1475
                                             (f_1510 x_1462
                                                     x_1475))
    f_1510 x_1462 x_1475 x_1459 | true = end
    f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 | true = (
    update_1171
      i_1042
      m_1039
      des_1041
      x_1345
      (f_bcopy_aux_1507 i_1042
                        m_1039
                        x_1345
                        des_1041
                        k_bcopy_aux_1313
                        src_1040))
    f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 | true = (
    bcopy_aux_1170 m_1039
                   src_1040
                   des_1041
                   (i_1042 + 1)
                   k_bcopy_aux_1313)
    f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 | true = (
    k_update_1253 ())
    fail_1511 b k | true = (fail ())
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | b_1456 = (bcopy_aux_1170
                                                               n_1044
                                                               (make_array_1030 n_1044)
                                                               (make_array_1030 m_1045)
                                                               0
                                                               k_main_1391)
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | (not b_1456) = (k_main_1391 ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | b_1218 = (
    k_make_array_u_1217 i_1032
                        n_1031
                        k_make_array_1200
                        ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | (not b_1218) = (
    fail_1511 true
              (k_make_array_u_1217 i_1032
                                   n_1031
                                   k_make_array_1200))
    k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 | true = (
    k_make_array_1200 0)
    main_1043 n_1044 m_1045 k_main_1391 | (n_1044 <= m_1045) = (k_main_1426 m_1045
                                                                    n_1044
                                                                    k_main_1391
                                                                    (n_1044 > 0))
    main_1043 n_1044 m_1045 k_main_1391 | (not (n_1044 <= m_1045)) = (
    k_main_1426 m_1045
                n_1044
                k_main_1391
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (0 <= i_1032) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (not (0 <= i_1032)) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        false)
    update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 | true = (
    des_1036 i_1034
             (f_update_1505 i_1034
                            n_1035
                            x_1037
                            k_update_1253))
    main_1504:X
    bcopy_aux_1170:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1508:int -> X
    f_1509:int -> int -> X
    f_1510:int -> int -> unit -> X
    f_bcopy_aux_1506:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1507:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1505:int -> int -> int -> (unit -> X) -> int -> X
    fail_1511:bool -> (unit -> X) -> X
    k_main_1426:int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1206:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1217:int -> int -> (int -> X) -> unit -> X
    main_1043:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1171:int -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
  inlined functions: f_1508,f_1509,f_1510,f_bcopy_aux_1506,f_bcopy_aux_1507,f_update_1505,k_main_1426,k_make_array_u_1206,k_make_array_u_1217,main_1043,make_array_1030,update_1171
  counterexample: 0:0:0:0:0:1:0:0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1508@60:0> = var154)
     [true.nop((<f_1509@63:0> = <f_1508@60:0>) && (<f_1509@63:1> = var155))
      [true.((<main_1043@65:0> = <f_1509@63:0>) && (<main_1043@65:1> = <f_1509@63:1>))
       [(<main_1043@65:0> <= <main_1043@65:1>).
        ((<k_main_1426@68:0> = <main_1043@65:1>) &&
         ((<k_main_1426@68:1> = <main_1043@65:0>) && (<k_main_1426@68:3> = (<main_1043@65:0> > 0))))
        [<k_main_1426@68:3>.((<bcopy_aux_1170@71:0> = <k_main_1426@68:1>) && (<bcopy_aux_1170@71:3> = 0))
         [(not (<bcopy_aux_1170@71:3> >= <bcopy_aux_1170@71:0>)).(<<bcopy_aux_1170@71:1>@74:0> = <bcopy_aux_1170@71:3>)
          [true.
           ((<make_array_1030@76:0> = <k_main_1426@68:1>) && (<make_array_1030@76:1> = <<bcopy_aux_1170@71:1>@74:0>))
           [(0 <= <make_array_1030@76:1>).
            ((<k_make_array_u_1206@79:0> = <make_array_1030@76:1>) &&
             ((<k_make_array_u_1206@79:1> = <make_array_1030@76:0>) &&
              (<k_make_array_u_1206@79:3> = (<make_array_1030@76:1> < <make_array_1030@76:0>))))
            [<k_make_array_u_1206@79:3>.
             ((<k_make_array_u_1217@82:0> = <k_make_array_u_1206@79:0>) &&
              ((<k_make_array_u_1217@82:1> = <k_make_array_u_1206@79:1>) && (<k_make_array_u_1217@82:3> = ())))
             [true.(<<k_make_array_u_1217@82:2>@84:0> = 0)
              [true.(<<k_make_array_u_1206@79:2>@86:0> = <<k_make_array_u_1217@82:2>@84:0>)
               [true.(<<make_array_1030@76:2>@88:0> = <<k_make_array_u_1206@79:2>@86:0>)
                [true.(<<<bcopy_aux_1170@71:1>@74:1>@90:0> = <<make_array_1030@76:2>@88:0>)
                 [true.
                  ((<f_bcopy_aux_1506@92:0> = <bcopy_aux_1170@71:3>) &&
                   ((<f_bcopy_aux_1506@92:1> = <bcopy_aux_1170@71:0>) &&
                    (<f_bcopy_aux_1506@92:5> = <<<bcopy_aux_1170@71:1>@74:1>@90:0>)))
                  [true.
                   ((<update_1171@94:0> = <f_bcopy_aux_1506@92:0>) &&
                    ((<update_1171@94:1> = <f_bcopy_aux_1506@92:1>) && (<update_1171@94:3> = <f_bcopy_aux_1506@92:5>)))
                   [true.(<<update_1171@94:2>@96:0> = <update_1171@94:0>)
                    [true.(<<f_bcopy_aux_1506@92:2>@98:0> = <<update_1171@94:2>@96:0>)
                     [true.(<<bcopy_aux_1170@71:2>@100:0> = <<f_bcopy_aux_1506@92:2>@98:0>)
                      [true.
                       ((<make_array_1030@102:0> = <k_main_1426@68:0>) &&
                        (<make_array_1030@102:1> = <<bcopy_aux_1170@71:2>@100:0>))
                       [(not (0 <= <make_array_1030@102:1>)).
                        ((<k_make_array_u_1206@105:0> = <make_array_1030@102:1>) &&
                         ((<k_make_array_u_1206@105:1> = <make_array_1030@102:0>) &&
                          (<k_make_array_u_1206@105:3> = false)))
                        [(not <k_make_array_u_1206@105:3>).(<fail_1511@108:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(6190)[2]
    horn clauses:
      P[<fail_1511@108:0>](<fail_1511@108:0>:bool)|- bot
      
      P[<k_make_array_u_1206@105:3>](<k_make_array_u_1206@105:0>:int,<k_make_array_u_1206@105:1>:int,false:bool),
      <fail_1511@108:0> |- P[<fail_1511@108:0>](<fail_1511@108:0>:bool)
      
      P[<make_array_1030@102:1>](<k_make_array_u_1206@105:1>:int,<k_make_array_u_1206@105:0>:int),
      ((0 > <k_make_array_u_1206@105:0>) && (not <k_make_array_u_1206@105:3>))
      |- P[<k_make_array_u_1206@105:3>](<k_make_array_u_1206@105:0>:int,
                                        <k_make_array_u_1206@105:1>:int,
                                        <k_make_array_u_1206@105:3>:bool)
      
      P[<k_main_1426@68:3>](<make_array_1030@102:0>:int,<bcopy_aux_1170@71:0>:int,true:bool),
      P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,<make_array_1030@102:1>:int)|- P[<make_array_1030@102:1>](
      <make_array_1030@102:0>:int,<make_array_1030@102:1>:int)
      
      P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
      P[<<f_bcopy_aux_1506@92:2>@98:0>](<<bcopy_aux_1170@71:1>@74:0>:int,<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
      (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
      |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int)
      
      P[<f_bcopy_aux_1506@92:5>](<f_bcopy_aux_1506@92:0>:int,<f_bcopy_aux_1506@92:1>:int,<update_1171@94:3>:int),
      P[<<update_1171@94:2>@96:0>](<f_bcopy_aux_1506@92:0>:int,<f_bcopy_aux_1506@92:1>:int,<<f_bcopy_aux_1506@92:2>@98:0>:int)|- P[<<f_bcopy_aux_1506@92:2>@98:0>](
      <f_bcopy_aux_1506@92:0>:int,<f_bcopy_aux_1506@92:1>:int,<<f_bcopy_aux_1506@92:2>@98:0>:int)
      
      P[<update_1171@94:3>](<update_1171@94:0>:int,<update_1171@94:1>:int,<update_1171@94:3>:int),
      (<<update_1171@94:2>@96:0> = <update_1171@94:0>)
      |- P[<<update_1171@94:2>@96:0>](<update_1171@94:0>:int,<update_1171@94:1>:int,
                                      <<update_1171@94:2>@96:0>:int)
      
      P[<f_bcopy_aux_1506@92:5>](<update_1171@94:0>:int,<update_1171@94:1>:int,<update_1171@94:3>:int)|- P[<update_1171@94:3>](
      <update_1171@94:0>:int,<update_1171@94:1>:int,<update_1171@94:3>:int)
      
      P[<bcopy_aux_1170@71:3>](<f_bcopy_aux_1506@92:1>:int,<f_bcopy_aux_1506@92:0>:int),
      P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<f_bcopy_aux_1506@92:1>:int,<f_bcopy_aux_1506@92:0>:int,<f_bcopy_aux_1506@92:5>:int),
      (<f_bcopy_aux_1506@92:0> < <f_bcopy_aux_1506@92:1>)
      |- P[<f_bcopy_aux_1506@92:5>](<f_bcopy_aux_1506@92:0>:int,<f_bcopy_aux_1506@92:1>:int,
                                    <f_bcopy_aux_1506@92:5>:int)
      
      P[<k_main_1426@68:3>](<k_main_1426@68:0>:int,<bcopy_aux_1170@71:0>:int,true:bool),
      P[<<make_array_1030@76:2>@88:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int,<<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)|- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](
      <bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int,<<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
      
      P[<make_array_1030@76:1>](<make_array_1030@76:0>:int,<make_array_1030@76:1>:int),
      P[<<k_make_array_u_1206@79:2>@86:0>](<make_array_1030@76:1>:int,<make_array_1030@76:0>:int,<<make_array_1030@76:2>@88:0>:int),
      (0 <= <make_array_1030@76:1>)
      |- P[<<make_array_1030@76:2>@88:0>](<make_array_1030@76:0>:int,
                                          <make_array_1030@76:1>:int,
                                          <<make_array_1030@76:2>@88:0>:int)
      
      P[<k_make_array_u_1206@79:3>](<k_make_array_u_1206@79:0>:int,<k_make_array_u_1206@79:1>:int,true:bool),
      P[<<k_make_array_u_1217@82:2>@84:0>](<k_make_array_u_1206@79:0>:int,<k_make_array_u_1206@79:1>:int,<<k_make_array_u_1206@79:2>@86:0>:int)|- P[<<k_make_array_u_1206@79:2>@86:0>](
      <k_make_array_u_1206@79:0>:int,<k_make_array_u_1206@79:1>:int,<<k_make_array_u_1206@79:2>@86:0>:int)
      
      P[<k_make_array_u_1217@82:3>](<k_make_array_u_1217@82:0>:int,<k_make_array_u_1217@82:1>:int,<k_make_array_u_1217@82:3>:unit),
      (<<k_make_array_u_1217@82:2>@84:0> = 0)
      |- P[<<k_make_array_u_1217@82:2>@84:0>](<k_make_array_u_1217@82:0>:int,
                                              <k_make_array_u_1217@82:1>:int,
                                              <<k_make_array_u_1217@82:2>@84:0>:int)
      
      P[<k_make_array_u_1206@79:3>](<k_make_array_u_1217@82:0>:int,<k_make_array_u_1217@82:1>:int,true:bool)|- P[<k_make_array_u_1217@82:3>](
      <k_make_array_u_1217@82:0>:int,<k_make_array_u_1217@82:1>:int,<k_make_array_u_1217@82:3>:unit)
      
      P[<make_array_1030@76:1>](<k_make_array_u_1206@79:1>:int,<k_make_array_u_1206@79:0>:int),
      ((0 <= <k_make_array_u_1206@79:0>) &&
       (<k_make_array_u_1206@79:3> = (<k_make_array_u_1206@79:0> < <k_make_array_u_1206@79:1>)))
      |- P[<k_make_array_u_1206@79:3>](<k_make_array_u_1206@79:0>:int,
                                       <k_make_array_u_1206@79:1>:int,
                                       <k_make_array_u_1206@79:3>:bool)
      
      P[<k_main_1426@68:3>](<k_main_1426@68:0>:int,<make_array_1030@76:0>:int,true:bool),
      P[<<bcopy_aux_1170@71:1>@74:0>](<make_array_1030@76:0>:int,<make_array_1030@76:1>:int)|- P[<make_array_1030@76:1>](
      <make_array_1030@76:0>:int,<make_array_1030@76:1>:int)
      
      P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
      (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
      |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int)
      
      P[<k_main_1426@68:3>](<k_main_1426@68:0>:int,<bcopy_aux_1170@71:0>:int,true:bool), (
      <bcopy_aux_1170@71:3> = 0) |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,
                                                             <bcopy_aux_1170@71:3>:int)
      
      P[<main_1043@65:1>](<k_main_1426@68:1>:int,<k_main_1426@68:0>:int),
      ((<k_main_1426@68:1> <= <k_main_1426@68:0>) && (<k_main_1426@68:3> = (<k_main_1426@68:1> > 0)))
      |- P[<k_main_1426@68:3>](<k_main_1426@68:0>:int,<k_main_1426@68:1>:int,
                               <k_main_1426@68:3>:bool)
      
      P[<f_1509@63:1>](<main_1043@65:0>:int,<main_1043@65:1>:int)|- P[<main_1043@65:1>](
      <main_1043@65:0>:int,<main_1043@65:1>:int)
      
      P[<f_1508@60:0>](<f_1509@63:0>:int)|- P[<f_1509@63:1>](<f_1509@63:0>:int,
                                                             <f_1509@63:1>:int)
      
      |- P[<f_1508@60:0>](<f_1508@60:0>:int)
    call trees:
      <main_1504@57>
        <f_1508@60>
          <f_1509@63>
            <main_1043@65>
              <k_main_1426@68>
                <bcopy_aux_1170@71>
                </<bcopy_aux_1170@71:1>@74>
                <make_array_1030@76>
                  <k_make_array_u_1206@79>
                    <k_make_array_u_1217@82>
                    </<k_make_array_u_1217@82:2>@84>
                  </<k_make_array_u_1206@79:2>@86>
                </<make_array_1030@76:2>@88>
                <<<bcopy_aux_1170@71:1>@74:1>@90>
                  <f_bcopy_aux_1506@92>
                    <update_1171@94>
                    </<update_1171@94:2>@96>
                  </<f_bcopy_aux_1506@92:2>@98>
                </<bcopy_aux_1170@71:2>@100>
                <make_array_1030@102>
                  <k_make_array_u_1206@105>
                    <fail_1511@108>
    inlined horn clauses:
      P[<fail_1511@108:0>](<fail_1511@108:0>:bool)|- bot
      
      P[<<bcopy_aux_1170@71:2>@100:0>](var158:int,<k_make_array_u_1206@105:0>:int),
      ((0 > <k_make_array_u_1206@105:0>) && ((var158 > 0) && <fail_1511@108:0>))
      |- P[<fail_1511@108:0>](<fail_1511@108:0>:bool)
      
      P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var159:int),
      P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
      (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)
      |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int)
      
      P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
      ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
       ((0 <= <<bcopy_aux_1170@71:1>@74:0>) &&
        ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>))))
      |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                <<bcopy_aux_1170@71:1>@74:0>:int,
                                                <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
      
      P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
      (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
      |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int)
      
       ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
      |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
    begin ParamSubstInfer.infer(10105)[3]
      
    end ParamSubstInfer.infer(10105)[3] (0.207968 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(10107)[3]
      
    end RefTypeInfer.elim_coeffs(10107)[3] (0.000999 sec.)
    begin YhornInterface.solve(10503)[3]
      begin HcSolver.solve_ub(10504)[4]
        encoded:
          P[<fail_1511@108:0>](<fail_1511@108:0>:int)|- bot
          
          P[<<bcopy_aux_1170@71:2>@100:0>](var158:int,<k_make_array_u_1206@105:0>:int),
          ((0 > <k_make_array_u_1206@105:0>) && ((var158 > 0) && (<fail_1511@108:0> = 1)))
          |- P[<fail_1511@108:0>](<fail_1511@108:0>:int)
          
          P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var159:int),
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
          (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,
                                              <<bcopy_aux_1170@71:2>@100:0>:int)
          
          P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
           ((0 <= <<bcopy_aux_1170@71:1>@74:0>) &&
            ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>))))
          |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                    <<bcopy_aux_1170@71:1>@74:0>:int,
                                                    <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
          
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                             <<bcopy_aux_1170@71:1>@74:0>:int)
          
           ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
          |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
        input to Yhorn:
          P[<fail_1511@108:0>](<fail_1511@108:0>:int)|- bot
          
          P[<<bcopy_aux_1170@71:2>@100:0>](var158:int,<k_make_array_u_1206@105:0>:int),
          ((var158 > 0) && ((0 > <k_make_array_u_1206@105:0>) && (<fail_1511@108:0> = 1)))
          |- P[<fail_1511@108:0>](<fail_1511@108:0>:int)
          
          P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var159:int),
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
          (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,
                                              <<bcopy_aux_1170@71:2>@100:0>:int)
          
          P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) &&
           ((<bcopy_aux_1170@71:0> > 0) &&
            ((0 <= <<bcopy_aux_1170@71:1>@74:0>) && (<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0))))
          |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                    <<bcopy_aux_1170@71:1>@74:0>:int,
                                                    <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
          
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                             <<bcopy_aux_1170@71:1>@74:0>:int)
          
           ((<bcopy_aux_1170@71:0> > 0) && (<bcopy_aux_1170@71:3> = 0))
          |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1511_sep_108_sep_0($134)) -> 1=0.
(($134-1=0) & (-$135>0) & ($136>0)) & (v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0($136,$135)) -> v_sep_fail_1511_sep_108_sep_0($134).
($137-$138<0) & (v_sep_bcopy_aux_1170_sep_71_sep_3($138,$137)) & (v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0($138,$137,$139)) -> v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0($138,$137).
(($140=0) & (-$141<=0) & ($138>0) & (-$138+$141<0)) & (v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0($138,$141)) -> v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0($138,$141,$140).
(-$138+$141<0) & (v_sep_bcopy_aux_1170_sep_71_sep_3($138,$141)) -> v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0($138,$141).
($142=0) & ($138>0) -> v_sep_bcopy_aux_1170_sep_71_sep_3($138,$142).


v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_3: X
v_sep_fail_1511_sep_108_sep_0: X
.......
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_3: X
v_sep_fail_1511_sep_108_sep_0: X
...
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_3: X
v_sep_fail_1511_sep_108_sep_0: X
.....
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_3: X
v_sep_fail_1511_sep_108_sep_0: X
......
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_3: X
v_sep_fail_1511_sep_108_sep_0: X
.......(0=0) & (v_sep_fail_1511_sep_108_sep_0($134)) -> 1=0.
(($134-1=0) & (-$135>0) & ($136>0)) & (v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0($136,$135)) -> v_sep_fail_1511_sep_108_sep_0($134).
($137-$138<0) & (v_sep_bcopy_aux_1170_sep_71_sep_3($138,$137)) & (v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0($138,$137,$139)) -> v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0($138,$137).
(($140=0) & (-$141<=0) & ($138>0) & (-$138+$141<0)) & (v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0($138,$141)) -> v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0($138,$141,$140).
(-$138+$141<0) & (v_sep_bcopy_aux_1170_sep_71_sep_3($138,$141)) -> v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0($138,$141).
($142=0) & ($138>0) -> v_sep_bcopy_aux_1170_sep_71_sep_3($138,$142).

        solution:
          P[<<bcopy_aux_1170@71:1>@74:0>]($163:int,$165:int) = true
          P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>]($156:int,$158:int,$160:int) = (0 <= $158)
          P[<<bcopy_aux_1170@71:2>@100:0>]($146:int,$148:int) = (0 <= $148)
          P[<bcopy_aux_1170@71:3>]($151:int,$153:int) = true
          P[<fail_1511@108:0>]($143:bool) = false
        
      end HcSolver.solve_ub(10504)[4] (0.023997 sec.)
      begin HcSolver.check_validity(10788)[4]
        input:
          P[<fail_1511@108:0>](<fail_1511@108:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@71:2>@100:0>](var158:int,<k_make_array_u_1206@105:0>:int),
          ((0 > <k_make_array_u_1206@105:0>) && ((var158 > 0) && <fail_1511@108:0>))
          |- P[<fail_1511@108:0>](<fail_1511@108:0>:bool)
          
          P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var159:int),
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
          (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,
                                              <<bcopy_aux_1170@71:2>@100:0>:int)
          
          P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
           ((0 <= <<bcopy_aux_1170@71:1>@74:0>) &&
            ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>))))
          |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                    <<bcopy_aux_1170@71:1>@74:0>:int,
                                                    <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
          
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                             <<bcopy_aux_1170@71:1>@74:0>:int)
          
           ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
          |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(10788)[4] (0.003999 sec.)
      solution:
        P[<<bcopy_aux_1170@71:1>@74:0>]($163:int,$165:int) = true
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>]($156:int,$158:int,$160:int) = (0 <= $158)
        P[<<bcopy_aux_1170@71:2>@100:0>]($146:int,$148:int) = (0 <= $148)
        P[<bcopy_aux_1170@71:3>]($151:int,$153:int) = true
        P[<fail_1511@108:0>]($143:bool) = false
    end YhornInterface.solve(10503)[3] (0.027996 sec.)
    
  end RefTypeInfer.infer_etrs(6190)[2] (0.258960 sec.)
  refinement types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:int -> (v3:{v3:int | (0 <= v2)} -> X) -> X) ->
                    (v6:{v6:int | (0 <= v6)} -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1217: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1506: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1171: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> (v8:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1511: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1510: var189:int -> var188:int -> var187:unit -> X
    f_bcopy_aux_1507: var204:int ->
                      var203:int ->
                      var202:int ->
                      (var201:int -> (var200:int -> X) -> X) ->
                      (var197:unit -> X) -> (var195:int -> (var194:int -> X) -> X) -> var191:unit -> X
    f_update_1505: var211:int -> var210:int -> var209:int -> (var208:unit -> X) -> var206:int -> X
  abstraction types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:int -> (v3:int[v3 -> (0 <= v2)] -> X) -> X) ->
                    (v6:int[v6 -> (0 <= v6)] -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: var212:int -> var213:int -> (var214:int -> X) -> X
    k_make_array_u_1206: var217:int -> var218:int -> (var219:int -> X) -> var221:bool -> X
    k_make_array_u_1217: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1506: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1171: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> (v8:unit -> X) -> X
    fail_1511: v1:bool -> (v2:unit -> X) -> X
    f_1510: var189:int -> var188:int -> var187:unit -> X
    f_bcopy_aux_1507: var204:int ->
                      var203:int ->
                      var202:int ->
                      (var201:int -> (var200:int -> X) -> X) ->
                      (var197:unit -> X) -> (var195:int -> (var194:int -> X) -> X) -> var191:unit -> X
    f_update_1505: var211:int -> var210:int -> var209:int -> (var208:unit -> X) -> var206:int -> X
  
end AbsTypeInfer.refine(6189)[1] (0.262959 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1504
  main_1504 -> (rand_int f_1508)
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (i_1042 >= m_1039) -> (k_bcopy_aux_1313 ())
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (
      not (i_1042 >= m_1039)) -> (src_1040 i_1042 (f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040))
  f_1508 x_1462 -> (rand_int (f_1509 x_1462))
  f_1509 x_1462 x_1475 -> (main_1043 x_1462 x_1475 (f_1510 x_1462 x_1475))
  f_1510 x_1462 x_1475 x_1459 -> end
  f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 ->
      (update_1171 i_1042 m_1039 des_1041 x_1345
        (f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040))
  f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 ->
      (bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1313)
  f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 -> (k_update_1253 ())
  fail_1511 b k -> {fail} => (k ())
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when b_1456 ->
      (bcopy_aux_1170 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1391)
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when (not b_1456) -> (k_main_1391 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when b_1218 ->
      (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when (not b_1218) ->
      (fail_1511 true (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200))
  k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 -> (k_make_array_1200 0)
  main_1043 n_1044 m_1045 k_main_1391 when (n_1044 <= m_1045) -> (k_main_1426 m_1045 n_1044 k_main_1391 (n_1044 > 0))
  main_1043 n_1044 m_1045 k_main_1391 when (not (n_1044 <= m_1045)) -> (k_main_1426 m_1045 n_1044 k_main_1391 false)
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (0 <= i_1032) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (not (0 <= i_1032)) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 false)
  update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 ->
      (des_1036 i_1034 (f_update_1505 i_1034 n_1035 x_1037 k_update_1253))
Types:
  main_1504 : X
  bcopy_aux_1170 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int[x_3 >= 0] -> X) -> X) ->
                    (x_9:int[x_9 >= 0] -> (int -> X) -> X) -> x_14:int[x_1 >= x_14 + 1; x_14 >= 0] -> (unit -> X) -> X)
  fail_1511 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1504 ... --> 
  f_1508 ... --> 
  f_1509 ... --> 
  main_1043 [1/2] ... --> 
  k_main_1426 [1/2] ... --> 
  bcopy_aux_1170 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1206 [1/2] ... --> 
  k_make_array_u_1217 ... --> 
  f_bcopy_aux_1506 ... --> 
  update_1171 ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1206 [2/2] ... --> 
  fail_1511 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(13246)[1]
  program:
    main_1504  | true = ((Random.int 0) f_1508)
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    i_1042 >= m_1039) = (k_bcopy_aux_1313 ())
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    not (i_1042 >= m_1039)) = (src_1040 i_1042
                                        (f_bcopy_aux_1506 i_1042
                                                          m_1039
                                                          des_1041
                                                          k_bcopy_aux_1313
                                                          src_1040))
    f_1508 x_1462 | true = ((Random.int 0) (f_1509 x_1462))
    f_1509 x_1462 x_1475 | true = (main_1043 x_1462
                                             x_1475
                                             (f_1510 x_1462
                                                     x_1475))
    f_1510 x_1462 x_1475 x_1459 | true = end
    f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 | true = (
    update_1171
      i_1042
      m_1039
      des_1041
      x_1345
      (f_bcopy_aux_1507 i_1042
                        m_1039
                        x_1345
                        des_1041
                        k_bcopy_aux_1313
                        src_1040))
    f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 | true = (
    bcopy_aux_1170 m_1039
                   src_1040
                   des_1041
                   (i_1042 + 1)
                   k_bcopy_aux_1313)
    f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 | true = (
    k_update_1253 ())
    fail_1511 b k | true = (fail ())
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | b_1456 = (bcopy_aux_1170
                                                               n_1044
                                                               (make_array_1030 n_1044)
                                                               (make_array_1030 m_1045)
                                                               0
                                                               k_main_1391)
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | (not b_1456) = (k_main_1391 ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | b_1218 = (
    k_make_array_u_1217 i_1032
                        n_1031
                        k_make_array_1200
                        ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | (not b_1218) = (
    fail_1511 true
              (k_make_array_u_1217 i_1032
                                   n_1031
                                   k_make_array_1200))
    k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 | true = (
    k_make_array_1200 0)
    main_1043 n_1044 m_1045 k_main_1391 | (n_1044 <= m_1045) = (k_main_1426 m_1045
                                                                    n_1044
                                                                    k_main_1391
                                                                    (n_1044 > 0))
    main_1043 n_1044 m_1045 k_main_1391 | (not (n_1044 <= m_1045)) = (
    k_main_1426 m_1045
                n_1044
                k_main_1391
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (0 <= i_1032) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (not (0 <= i_1032)) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        false)
    update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 | true = (
    des_1036 i_1034
             (f_update_1505 i_1034
                            n_1035
                            x_1037
                            k_update_1253))
    main_1504:X
    bcopy_aux_1170:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1508:int -> X
    f_1509:int -> int -> X
    f_1510:int -> int -> unit -> X
    f_bcopy_aux_1506:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1507:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1505:int -> int -> int -> (unit -> X) -> int -> X
    fail_1511:bool -> (unit -> X) -> X
    k_main_1426:int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1206:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1217:int -> int -> (int -> X) -> unit -> X
    main_1043:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1171:int -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
  inlined functions: f_1508,f_1509,f_1510,f_bcopy_aux_1506,f_bcopy_aux_1507,f_update_1505,k_main_1426,k_make_array_u_1206,k_make_array_u_1217,main_1043,make_array_1030,update_1171
  counterexample: 0:0:0:0:0:1:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1508@114:0> = var223)
     [true.nop((<f_1509@117:0> = <f_1508@114:0>) && (<f_1509@117:1> = var224))
      [true.((<main_1043@119:0> = <f_1509@117:0>) && (<main_1043@119:1> = <f_1509@117:1>))
       [(<main_1043@119:0> <= <main_1043@119:1>).
        ((<k_main_1426@122:0> = <main_1043@119:1>) &&
         ((<k_main_1426@122:1> = <main_1043@119:0>) && (<k_main_1426@122:3> = (<main_1043@119:0> > 0))))
        [<k_main_1426@122:3>.((<bcopy_aux_1170@125:0> = <k_main_1426@122:1>) && (<bcopy_aux_1170@125:3> = 0))
         [(not (<bcopy_aux_1170@125:3> >= <bcopy_aux_1170@125:0>)).
          (<<bcopy_aux_1170@125:1>@128:0> = <bcopy_aux_1170@125:3>)
          [true.
           ((<make_array_1030@130:0> = <k_main_1426@122:1>) &&
            (<make_array_1030@130:1> = <<bcopy_aux_1170@125:1>@128:0>))
           [(0 <= <make_array_1030@130:1>).
            ((<k_make_array_u_1206@133:0> = <make_array_1030@130:1>) &&
             ((<k_make_array_u_1206@133:1> = <make_array_1030@130:0>) &&
              (<k_make_array_u_1206@133:3> = (<make_array_1030@130:1> < <make_array_1030@130:0>))))
            [<k_make_array_u_1206@133:3>.
             ((<k_make_array_u_1217@136:0> = <k_make_array_u_1206@133:0>) &&
              ((<k_make_array_u_1217@136:1> = <k_make_array_u_1206@133:1>) && (<k_make_array_u_1217@136:3> = ())))
             [true.(<<k_make_array_u_1217@136:2>@138:0> = 0)
              [true.(<<k_make_array_u_1206@133:2>@140:0> = <<k_make_array_u_1217@136:2>@138:0>)
               [true.(<<make_array_1030@130:2>@142:0> = <<k_make_array_u_1206@133:2>@140:0>)
                [true.(<<<bcopy_aux_1170@125:1>@128:1>@144:0> = <<make_array_1030@130:2>@142:0>)
                 [true.
                  ((<f_bcopy_aux_1506@146:0> = <bcopy_aux_1170@125:3>) &&
                   ((<f_bcopy_aux_1506@146:1> = <bcopy_aux_1170@125:0>) &&
                    (<f_bcopy_aux_1506@146:5> = <<<bcopy_aux_1170@125:1>@128:1>@144:0>)))
                  [true.
                   ((<update_1171@148:0> = <f_bcopy_aux_1506@146:0>) &&
                    ((<update_1171@148:1> = <f_bcopy_aux_1506@146:1>) &&
                     (<update_1171@148:3> = <f_bcopy_aux_1506@146:5>)))
                   [true.(<<update_1171@148:2>@150:0> = <update_1171@148:0>)
                    [true.(<<f_bcopy_aux_1506@146:2>@152:0> = <<update_1171@148:2>@150:0>)
                     [true.(<<bcopy_aux_1170@125:2>@154:0> = <<f_bcopy_aux_1506@146:2>@152:0>)
                      [true.
                       ((<make_array_1030@156:0> = <k_main_1426@122:0>) &&
                        (<make_array_1030@156:1> = <<bcopy_aux_1170@125:2>@154:0>))
                       [(0 <= <make_array_1030@156:1>).
                        ((<k_make_array_u_1206@159:0> = <make_array_1030@156:1>) &&
                         ((<k_make_array_u_1206@159:1> = <make_array_1030@156:0>) &&
                          (<k_make_array_u_1206@159:3> = (<make_array_1030@156:1> < <make_array_1030@156:0>))))
                        [(not <k_make_array_u_1206@159:3>).(<fail_1511@162:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(13247)[2]
    horn clauses:
      P[<fail_1511@162:0>](<fail_1511@162:0>:bool)|- bot
      
      P[<k_make_array_u_1206@159:3>](<k_make_array_u_1206@159:0>:int,<k_make_array_u_1206@159:1>:int,false:bool),
      <fail_1511@162:0> |- P[<fail_1511@162:0>](<fail_1511@162:0>:bool)
      
      P[<make_array_1030@156:1>](<k_make_array_u_1206@159:1>:int,<k_make_array_u_1206@159:0>:int),
      ((0 <= <k_make_array_u_1206@159:0>) &&
       (<k_make_array_u_1206@159:3> = (<k_make_array_u_1206@159:0> < <k_make_array_u_1206@159:1>)))
      |- P[<k_make_array_u_1206@159:3>](<k_make_array_u_1206@159:0>:int,
                                        <k_make_array_u_1206@159:1>:int,
                                        <k_make_array_u_1206@159:3>:bool)
      
      P[<k_main_1426@122:3>](<make_array_1030@156:0>:int,<bcopy_aux_1170@125:0>:int,true:bool),
      P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,<make_array_1030@156:1>:int)|- P[<make_array_1030@156:1>](
      <make_array_1030@156:0>:int,<make_array_1030@156:1>:int)
      
      P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
      P[<<f_bcopy_aux_1506@146:2>@152:0>](<<bcopy_aux_1170@125:1>@128:0>:int,<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
      (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
      |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                           <<bcopy_aux_1170@125:2>@154:0>:int)
      
      P[<f_bcopy_aux_1506@146:5>](<f_bcopy_aux_1506@146:0>:int,<f_bcopy_aux_1506@146:1>:int,<update_1171@148:3>:int),
      P[<<update_1171@148:2>@150:0>](<f_bcopy_aux_1506@146:0>:int,<f_bcopy_aux_1506@146:1>:int,<<f_bcopy_aux_1506@146:2>@152:0>:int)|- P[<<f_bcopy_aux_1506@146:2>@152:0>](
      <f_bcopy_aux_1506@146:0>:int,<f_bcopy_aux_1506@146:1>:int,<<f_bcopy_aux_1506@146:2>@152:0>:int)
      
      P[<update_1171@148:3>](<update_1171@148:0>:int,<update_1171@148:1>:int,<update_1171@148:3>:int),
      (<<update_1171@148:2>@150:0> = <update_1171@148:0>)
      |- P[<<update_1171@148:2>@150:0>](<update_1171@148:0>:int,<update_1171@148:1>:int,
                                        <<update_1171@148:2>@150:0>:int)
      
      P[<f_bcopy_aux_1506@146:5>](<update_1171@148:0>:int,<update_1171@148:1>:int,<update_1171@148:3>:int)|- P[<update_1171@148:3>](
      <update_1171@148:0>:int,<update_1171@148:1>:int,<update_1171@148:3>:int)
      
      P[<bcopy_aux_1170@125:3>](<f_bcopy_aux_1506@146:1>:int,<f_bcopy_aux_1506@146:0>:int),
      P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<f_bcopy_aux_1506@146:1>:int,<f_bcopy_aux_1506@146:0>:int,<f_bcopy_aux_1506@146:5>:int),
      (<f_bcopy_aux_1506@146:0> < <f_bcopy_aux_1506@146:1>)
      |- P[<f_bcopy_aux_1506@146:5>](<f_bcopy_aux_1506@146:0>:int,<f_bcopy_aux_1506@146:1>:int,
                                     <f_bcopy_aux_1506@146:5>:int)
      
      P[<k_main_1426@122:3>](<k_main_1426@122:0>:int,<bcopy_aux_1170@125:0>:int,true:bool),
      P[<<make_array_1030@130:2>@142:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int,<<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)|- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](
      <bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int,<<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
      
      P[<make_array_1030@130:1>](<make_array_1030@130:0>:int,<make_array_1030@130:1>:int),
      P[<<k_make_array_u_1206@133:2>@140:0>](<make_array_1030@130:1>:int,<make_array_1030@130:0>:int,<<make_array_1030@130:2>@142:0>:int),
      (0 <= <make_array_1030@130:1>)
      |- P[<<make_array_1030@130:2>@142:0>](<make_array_1030@130:0>:int,
                                            <make_array_1030@130:1>:int,
                                            <<make_array_1030@130:2>@142:0>:int)
      
      P[<k_make_array_u_1206@133:3>](<k_make_array_u_1206@133:0>:int,<k_make_array_u_1206@133:1>:int,true:bool),
      P[<<k_make_array_u_1217@136:2>@138:0>](<k_make_array_u_1206@133:0>:int,<k_make_array_u_1206@133:1>:int,<<k_make_array_u_1206@133:2>@140:0>:int)|- P[<<k_make_array_u_1206@133:2>@140:0>](
      <k_make_array_u_1206@133:0>:int,<k_make_array_u_1206@133:1>:int,
      <<k_make_array_u_1206@133:2>@140:0>:int)
      
      P[<k_make_array_u_1217@136:3>](<k_make_array_u_1217@136:0>:int,<k_make_array_u_1217@136:1>:int,<k_make_array_u_1217@136:3>:unit),
      (<<k_make_array_u_1217@136:2>@138:0> = 0)
      |- P[<<k_make_array_u_1217@136:2>@138:0>](<k_make_array_u_1217@136:0>:int,
                                                <k_make_array_u_1217@136:1>:int,
                                                <<k_make_array_u_1217@136:2>@138:0>:int)
      
      P[<k_make_array_u_1206@133:3>](<k_make_array_u_1217@136:0>:int,<k_make_array_u_1217@136:1>:int,true:bool)|- P[<k_make_array_u_1217@136:3>](
      <k_make_array_u_1217@136:0>:int,<k_make_array_u_1217@136:1>:int,
      <k_make_array_u_1217@136:3>:unit)
      
      P[<make_array_1030@130:1>](<k_make_array_u_1206@133:1>:int,<k_make_array_u_1206@133:0>:int),
      ((0 <= <k_make_array_u_1206@133:0>) &&
       (<k_make_array_u_1206@133:3> = (<k_make_array_u_1206@133:0> < <k_make_array_u_1206@133:1>)))
      |- P[<k_make_array_u_1206@133:3>](<k_make_array_u_1206@133:0>:int,
                                        <k_make_array_u_1206@133:1>:int,
                                        <k_make_array_u_1206@133:3>:bool)
      
      P[<k_main_1426@122:3>](<k_main_1426@122:0>:int,<make_array_1030@130:0>:int,true:bool),
      P[<<bcopy_aux_1170@125:1>@128:0>](<make_array_1030@130:0>:int,<make_array_1030@130:1>:int)|- P[<make_array_1030@130:1>](
      <make_array_1030@130:0>:int,<make_array_1030@130:1>:int)
      
      P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
      (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
      |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                           <<bcopy_aux_1170@125:1>@128:0>:int)
      
      P[<k_main_1426@122:3>](<k_main_1426@122:0>:int,<bcopy_aux_1170@125:0>:int,true:bool),
      (<bcopy_aux_1170@125:3> = 0) |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,
                                                                <bcopy_aux_1170@125:3>:int)
      
      P[<main_1043@119:1>](<k_main_1426@122:1>:int,<k_main_1426@122:0>:int),
      ((<k_main_1426@122:1> <= <k_main_1426@122:0>) && (<k_main_1426@122:3> = (<k_main_1426@122:1> > 0)))
      |- P[<k_main_1426@122:3>](<k_main_1426@122:0>:int,<k_main_1426@122:1>:int,
                                <k_main_1426@122:3>:bool)
      
      P[<f_1509@117:1>](<main_1043@119:0>:int,<main_1043@119:1>:int)|- P[<main_1043@119:1>](
      <main_1043@119:0>:int,<main_1043@119:1>:int)
      
      P[<f_1508@114:0>](<f_1509@117:0>:int)|- P[<f_1509@117:1>](<f_1509@117:0>:int,
                                                                <f_1509@117:1>:int)
      
      |- P[<f_1508@114:0>](<f_1508@114:0>:int)
    call trees:
      <main_1504@111>
        <f_1508@114>
          <f_1509@117>
            <main_1043@119>
              <k_main_1426@122>
                <bcopy_aux_1170@125>
                </<bcopy_aux_1170@125:1>@128>
                <make_array_1030@130>
                  <k_make_array_u_1206@133>
                    <k_make_array_u_1217@136>
                    </<k_make_array_u_1217@136:2>@138>
                  </<k_make_array_u_1206@133:2>@140>
                </<make_array_1030@130:2>@142>
                <<<bcopy_aux_1170@125:1>@128:1>@144>
                  <f_bcopy_aux_1506@146>
                    <update_1171@148>
                    </<update_1171@148:2>@150>
                  </<f_bcopy_aux_1506@146:2>@152>
                </<bcopy_aux_1170@125:2>@154>
                <make_array_1030@156>
                  <k_make_array_u_1206@159>
                    <fail_1511@162>
    inlined horn clauses:
      P[<fail_1511@162:0>](<fail_1511@162:0>:bool)|- bot
      
      P[<<bcopy_aux_1170@125:2>@154:0>](var227:int,<k_make_array_u_1206@159:0>:int),
      ((0 <= <k_make_array_u_1206@159:0>) &&
       ((var227 > 0) && ((var227 < (1 + <k_make_array_u_1206@159:0>)) && <fail_1511@162:0>)))
      |- P[<fail_1511@162:0>](<fail_1511@162:0>:bool)
      
      P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int,var228:int),
      P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
      (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)
      |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                           <<bcopy_aux_1170@125:2>@154:0>:int)
      
      P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
      ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
       ((0 <= <<bcopy_aux_1170@125:1>@128:0>) &&
        ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>))))
      |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                   <<bcopy_aux_1170@125:1>@128:0>:int,
                                                   <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
      
      P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
      (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
      |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                           <<bcopy_aux_1170@125:1>@128:0>:int)
      
       ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
      |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
    begin ParamSubstInfer.infer(17478)[3]
      
    end ParamSubstInfer.infer(17478)[3] (0.366944 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(17480)[3]
      
    end RefTypeInfer.elim_coeffs(17480)[3] (0.001000 sec.)
    begin YhornInterface.solve(17989)[3]
      begin HcSolver.solve_ub(17990)[4]
        encoded:
          P[<fail_1511@162:0>](<fail_1511@162:0>:int)|- bot
          
          P[<<bcopy_aux_1170@125:2>@154:0>](var227:int,<k_make_array_u_1206@159:0>:int),
          ((0 <= <k_make_array_u_1206@159:0>) &&
           ((var227 > 0) && ((var227 < (1 + <k_make_array_u_1206@159:0>)) && (<fail_1511@162:0> = 1))))
          |- P[<fail_1511@162:0>](<fail_1511@162:0>:int)
          
          P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int,var228:int),
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
          (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:2>@154:0>:int)
          
          P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
           ((0 <= <<bcopy_aux_1170@125:1>@128:0>) &&
            ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>))))
          |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                       <<bcopy_aux_1170@125:1>@128:0>:int,
                                                       <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
          
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:1>@128:0>:int)
          
           ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
          |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
        input to Yhorn:
          P[<fail_1511@162:0>](<fail_1511@162:0>:int)|- bot
          
          P[<<bcopy_aux_1170@125:2>@154:0>](var227:int,<k_make_array_u_1206@159:0>:int),
          ((var227 < (1 + <k_make_array_u_1206@159:0>)) &&
           ((var227 > 0) && ((0 <= <k_make_array_u_1206@159:0>) && (<fail_1511@162:0> = 1))))
          |- P[<fail_1511@162:0>](<fail_1511@162:0>:int)
          
          P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int,var228:int),
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
          (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:2>@154:0>:int)
          
          P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) &&
           ((<bcopy_aux_1170@125:0> > 0) &&
            ((0 <= <<bcopy_aux_1170@125:1>@128:0>) && (<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0))))
          |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                       <<bcopy_aux_1170@125:1>@128:0>:int,
                                                       <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
          
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:1>@128:0>:int)
          
           ((<bcopy_aux_1170@125:0> > 0) && (<bcopy_aux_1170@125:3> = 0))
          |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1511_sep_162_sep_0($240)) -> 1=0.
(($240-1=0) & (-$241<=0) & ($242>0) & (-$241+$242-1<0)) & (v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0($242,$241)) -> v_sep_fail_1511_sep_162_sep_0($240).
($243-$244<0) & (v_sep_bcopy_aux_1170_sep_125_sep_3($244,$243)) & (v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0($244,$243,$245)) -> v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0($244,$243).
(($246=0) & (-$247<=0) & ($244>0) & (-$244+$247<0)) & (v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0($244,$247)) -> v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0($244,$247,$246).
(-$244+$247<0) & (v_sep_bcopy_aux_1170_sep_125_sep_3($244,$247)) -> v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0($244,$247).
($248=0) & ($244>0) -> v_sep_bcopy_aux_1170_sep_125_sep_3($244,$248).


v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_3: X
v_sep_fail_1511_sep_162_sep_0: X
.......
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_3: X
v_sep_fail_1511_sep_162_sep_0: X
...
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_3: X
v_sep_fail_1511_sep_162_sep_0: X
.....
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_3: X
v_sep_fail_1511_sep_162_sep_0: X
......
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_3: X
v_sep_fail_1511_sep_162_sep_0: X
.......(0=0) & (v_sep_fail_1511_sep_162_sep_0($240)) -> 1=0.
(($240-1=0) & (-$241<=0) & ($242>0) & (-$241+$242-1<0)) & (v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0($242,$241)) -> v_sep_fail_1511_sep_162_sep_0($240).
($243-$244<0) & (v_sep_bcopy_aux_1170_sep_125_sep_3($244,$243)) & (v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0($244,$243,$245)) -> v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0($244,$243).
(($246=0) & (-$247<=0) & ($244>0) & (-$244+$247<0)) & (v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0($244,$247)) -> v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0($244,$247,$246).
(-$244+$247<0) & (v_sep_bcopy_aux_1170_sep_125_sep_3($244,$247)) -> v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0($244,$247).
($248=0) & ($244>0) -> v_sep_bcopy_aux_1170_sep_125_sep_3($244,$248).

        solution:
          P[<<bcopy_aux_1170@125:1>@128:0>]($269:int,$271:int) = ((1 + $271) <= $269)
          P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>]($262:int,$264:int,$266:int) = ((1 + $264) <= $262)
          P[<<bcopy_aux_1170@125:2>@154:0>]($252:int,$254:int) = ((1 + $254) <= $252)
          P[<bcopy_aux_1170@125:3>]($257:int,$259:int) = ((1 + $259) <= $257)
          P[<fail_1511@162:0>]($249:bool) = false
        
      end HcSolver.solve_ub(17990)[4] (0.021996 sec.)
      begin HcSolver.check_validity(18368)[4]
        input:
          P[<fail_1511@162:0>](<fail_1511@162:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@125:2>@154:0>](var227:int,<k_make_array_u_1206@159:0>:int),
          ((0 <= <k_make_array_u_1206@159:0>) &&
           ((var227 > 0) && ((var227 < (1 + <k_make_array_u_1206@159:0>)) && <fail_1511@162:0>)))
          |- P[<fail_1511@162:0>](<fail_1511@162:0>:bool)
          
          P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int,var228:int),
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
          (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:2>@154:0>:int)
          
          P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
           ((0 <= <<bcopy_aux_1170@125:1>@128:0>) &&
            ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>))))
          |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                       <<bcopy_aux_1170@125:1>@128:0>:int,
                                                       <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
          
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:1>@128:0>:int)
          
           ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
          |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(18368)[4] (0.003000 sec.)
      solution:
        P[<<bcopy_aux_1170@125:1>@128:0>]($269:int,$271:int) = ((1 + $271) <= $269)
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>]($262:int,$264:int,$266:int) = ((1 + $264) <= $262)
        P[<<bcopy_aux_1170@125:2>@154:0>]($252:int,$254:int) = ((1 + $254) <= $252)
        P[<bcopy_aux_1170@125:3>]($257:int,$259:int) = ((1 + $259) <= $257)
        P[<fail_1511@162:0>]($249:bool) = false
    end YhornInterface.solve(17989)[3] (0.024996 sec.)
    
  end RefTypeInfer.infer_etrs(13247)[2] (0.422936 sec.)
  refinement types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:{v3:int | ((1 + v2) <= v1)} -> X) -> X) ->
                    (v6:{v6:int | ((1 + v6) <= v1)} -> (v7:int -> X) -> X) ->
                    v10:{v10:int | ((1 + v10) <= v1)} -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1217: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1506: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1171: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> (v8:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1511: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1510: var258:int -> var257:int -> var256:unit -> X
    f_bcopy_aux_1507: var273:int ->
                      var272:int ->
                      var271:int ->
                      (var270:int -> (var269:int -> X) -> X) ->
                      (var266:unit -> X) -> (var264:int -> (var263:int -> X) -> X) -> var260:unit -> X
    f_update_1505: var280:int -> var279:int -> var278:int -> (var277:unit -> X) -> var275:int -> X
  abstraction types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int[v3 -> (
                                                               (1 + v2) <= v1)] -> X) -> X) ->
                    (v6:int[v6 -> ((1 + v6) <= v1)] -> (v7:int -> X) -> X) ->
                    v10:int[v10 -> ((1 + v10) <= v1)] -> (v11:unit -> X) -> X
    make_array_1030: var281:int -> var282:int -> (var283:int -> X) -> X
    k_make_array_u_1206: var286:int -> var287:int -> (var288:int -> X) -> var290:bool -> X
    k_make_array_u_1217: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1506: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1171: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> (v8:unit -> X) -> X
    fail_1511: v1:bool -> (v2:unit -> X) -> X
    f_1510: var258:int -> var257:int -> var256:unit -> X
    f_bcopy_aux_1507: var273:int ->
                      var272:int ->
                      var271:int ->
                      (var270:int -> (var269:int -> X) -> X) ->
                      (var266:unit -> X) -> (var264:int -> (var263:int -> X) -> X) -> var260:unit -> X
    f_update_1505: var280:int -> var279:int -> var278:int -> (var277:unit -> X) -> var275:int -> X
  
end AbsTypeInfer.refine(13246)[1] (0.430934 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1504
  main_1504 -> (rand_int f_1508)
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (i_1042 >= m_1039) -> (k_bcopy_aux_1313 ())
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (
      not (i_1042 >= m_1039)) -> (src_1040 i_1042 (f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040))
  f_1508 x_1462 -> (rand_int (f_1509 x_1462))
  f_1509 x_1462 x_1475 -> (main_1043 x_1462 x_1475 (f_1510 x_1462 x_1475))
  f_1510 x_1462 x_1475 x_1459 -> end
  f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 ->
      (update_1171 i_1042 m_1039 des_1041 x_1345
        (f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040))
  f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 ->
      (bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1313)
  f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 -> (k_update_1253 ())
  fail_1511 b k -> {fail} => (k ())
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when b_1456 ->
      (bcopy_aux_1170 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1391)
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when (not b_1456) -> (k_main_1391 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when b_1218 ->
      (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when (not b_1218) ->
      (fail_1511 true (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200))
  k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 -> (k_make_array_1200 0)
  main_1043 n_1044 m_1045 k_main_1391 when (n_1044 <= m_1045) -> (k_main_1426 m_1045 n_1044 k_main_1391 (n_1044 > 0))
  main_1043 n_1044 m_1045 k_main_1391 when (not (n_1044 <= m_1045)) -> (k_main_1426 m_1045 n_1044 k_main_1391 false)
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (0 <= i_1032) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (not (0 <= i_1032)) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 false)
  update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 ->
      (des_1036 i_1034 (f_update_1505 i_1034 n_1035 x_1037 k_update_1253))
Types:
  main_1504 : X
  bcopy_aux_1170 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int[x_1 >= x_3 + 1; x_3 >= 0] -> X) -> X) ->
                    (x_9:int[x_1 >= x_9 + 1; x_9 >= 0] -> (int -> X) -> X) ->
                    x_14:int[x_1 >= x_14 + 1; x_14 >= 0] -> (unit -> X) -> X)
  fail_1511 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  bcopy_aux: ((x_1:int ->
                   (({x_8:int | x_8 >= 0 && x_1 >= x_8 + 1} -> int) ->
                        (({x_6:int | x_6 >= 0 && x_1 >= x_6 + 1} -> int) ->
                             ({x_4:int | x_4 >= 0 && x_1 >= x_4 + 1} -> unit)))) /\
              (x_10:int ->
                   (({x_17:int | x_17 >= 0 && x_10 >= x_17 + 1} -> int) ->
                        (({x_15:int | x_15 >= 0 && x_10 >= x_15 + 1} -> int) ->
                             ({x_13:int | x_13 >= 0 && x_10 < x_13 + 1} -> unit)))))

cycles: 4
total: 2.269 sec
  abst: 0.131 sec
  mc: 0.065 sec
  refine: 0.916 sec
    exparam: 0.691 sec
