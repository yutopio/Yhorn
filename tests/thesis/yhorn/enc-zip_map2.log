MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn enc-zip_map2.ml

parsed::
 let rec loop_1030 x_1031 = loop_1030 x_1031 
 in
 let rec zip_1032 x_1033 y_1034 =
   if x_1033 = 0 then
     if y_1034 = 0 then
       x_1033
     else
       let u_1047 = {fail} () 
       in
         _|_
   else
     if y_1034 = 0 then
       let u_1050 = {fail} () 
       in
         _|_
     else
       1 + zip_1032 (x_1033 - 1) (y_1034 - 1) 
 in
 let rec map_1035 x_1036 = if x_1036 = 0 then
                             x_1036
                           else
                             1 + map_1035 (x_1036 - 1) 
 in
 let main_1037 n_1038 = if map_1035 (zip_1032 n_1038 n_1038) = n_1038 then
                          ()
                        else
                          {fail} () 
 in
   ()

set_target::
 let rec loop_1030 x_1031 = loop_1030 x_1031 
 in
 let rec zip_1032 x_1033 y_1034 =
   if x_1033 = 0 then
     if y_1034 = 0 then
       x_1033
     else
       let u_1047 = {fail} () 
       in
         _|_
   else
     if y_1034 = 0 then
       let u_1050 = {fail} () 
       in
         _|_
     else
       1 + zip_1032 (x_1033 - 1) (y_1034 - 1) 
 in
 let rec map_1035 x_1036 = if x_1036 = 0 then
                             x_1036
                           else
                             1 + map_1035 (x_1036 - 1) 
 in
 let main_1037 n_1038 = if map_1035 (zip_1032 n_1038 n_1038) = n_1038 then
                          ()
                        else
                          {fail} () 
 in
 let main_1078 = let arg1_1077 = rand_int () 
                 in
                   main_1037 arg1_1077 
 in
   ()

copy_poly::
 let rec loop_1030 (x_1031:unit) = loop_1030 x_1031 
 in
 let rec zip_1032 (x_1033:int) (y_1034:int) =
   if x_1033 = 0 then
     if y_1034 = 0 then
       x_1033
     else
       let u_1047 = {fail} () 
       in
         _|_
   else
     if y_1034 = 0 then
       let u_1050 = {fail} () 
       in
         _|_
     else
       1 + zip_1032 (x_1033 - 1) (y_1034 - 1) 
 in
 let rec map_1035 (x_1036:int) = if x_1036 = 0 then
                                   x_1036
                                 else
                                   1 + map_1035 (x_1036 - 1) 
 in
 let main_1037 (n_1038:int) = if map_1035 (zip_1032 n_1038 n_1038) = n_1038 then
                                ()
                              else
                                {fail} () 
 in
 let main_1078 = let arg1_1077 = rand_int () 
                 in
                   main_1037 arg1_1077 
 in
   ()

CPS::
 let rec loop_1030 (x_1031:unit) (k_loop_1103:(unit -> X)) = loop_1030 x_1031 k_loop_1103 
 in
 let rec zip_1032 (x_1033:int) (y_1034:int) (k_zip_1130:(int -> X)) =
   if x_1033 = 0 then
     if y_1034 = 0 then
       k_zip_1130 x_1033
     else
       {|fail|} () (fun x_1133 -> _|_)
   else
     if y_1034 = 0 then
       {|fail|} () (fun x_1149 -> _|_)
     else
       zip_1032 (x_1033 - 1) (y_1034 - 1) (fun x_1162 -> k_zip_1130 (1 + x_1162)) 
 in
 let rec map_1035 (x_1036:int) (k_map_1195:(int -> X)) =
   if x_1036 = 0 then
     k_map_1195 x_1036
   else
     map_1035 (x_1036 - 1) (fun x_1199 -> k_map_1195 (1 + x_1199)) 
 in
 let main_1037 (n_1038:int) (k_main_1227:(unit -> X)) =
   zip_1032 n_1038 n_1038
     (fun x_1252 ->
        map_1035 x_1252 (fun x_1230 -> (if x_1230 = n_1038 then
                                          k_main_1227 ()
                                        else
                                          {|fail|} () k_main_1227))) 
 in
   rand_int_cps () (fun x_1269 -> main_1037 x_1269 (fun x_1266 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1294
  main_1294 -> (rand_int f_1301)
  br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 when b_1304 -> (k_zip_1130 x_1033)
  br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 when (not b_1304) -> (fail_1307 true (f_zip_1295 x_1033 y_1034))
  br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 when b_1306 -> (fail_1308 true (f_zip_1296 x_1033 y_1034))
  br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 when (not b_1306) ->
      (zip_1032 (x_1033 - 1) (y_1034 - 1) (f_zip_1297 x_1033 y_1034 k_zip_1130))
  f_1301 x_1269 -> (main_1037 x_1269 (f_1302 x_1269))
  f_1302 x_1269 x_1266 -> end
  f_main_1299 n_1038 k_main_1227 x_1252 -> (map_1035 x_1252 (f_main_1300 n_1038 x_1252 k_main_1227))
  f_main_1300 n_1038 x_1252 k_main_1227 x_1230 when (x_1230 = n_1038) -> (k_main_1227 ())
  f_main_1300 n_1038 x_1252 k_main_1227 x_1230 when (not (x_1230 = n_1038)) -> (fail_1309 true k_main_1227)
  f_map_1298 x_1036 k_map_1195 x_1199 -> (k_map_1195 (1 + x_1199))
  f_zip_1295 x_1033 y_1034 x_1133 -> _|_
  f_zip_1296 x_1033 y_1034 x_1149 -> _|_
  f_zip_1297 x_1033 y_1034 k_zip_1130 x_1162 -> (k_zip_1130 (1 + x_1162))
  fail_1307 b k -> {fail} => (k ())
  fail_1308 b k -> {fail} => (k ())
  fail_1309 b k -> {fail} => (k ())
  loop_1030 x_1031 k_loop_1103 -> (loop_1030 x_1031 k_loop_1103)
  main_1037 n_1038 k_main_1227 -> (zip_1032 n_1038 n_1038 (f_main_1299 n_1038 k_main_1227))
  map_1035 x_1036 k_map_1195 when (x_1036 = 0) -> (k_map_1195 x_1036)
  map_1035 x_1036 k_map_1195 when (not (x_1036 = 0)) -> (map_1035 (x_1036 - 1) (f_map_1298 x_1036 k_map_1195))
  zip_1032 x_1033 y_1034 k_zip_1130 when (x_1033 = 0) -> (br_zip_1303 (y_1034 = 0) x_1033 y_1034 k_zip_1130)
  zip_1032 x_1033 y_1034 k_zip_1130 when (not (x_1033 = 0)) -> (br_zip_1305 (y_1034 = 0) x_1033 y_1034 k_zip_1130)
Types:
  main_1294 : X
  fail_1307 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1308 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1309 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1035 : (int -> (int -> X) -> X)
  zip_1032 : (int -> int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1294 ... --> 
  f_1301 ... --> 
  main_1037 ... --> 
  zip_1032 [2/2] ... --> 
  br_zip_1305 [1/2] ... --> 
  fail_1308 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(156)[1]
  program:
    main_1294  | true = ((Random.int 0) f_1301)
    br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 | b_1304 = (k_zip_1130 x_1033)
    br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 | (not b_1304) = (fail_1307 true
                                                                    (f_zip_1295 x_1033
                                                                    y_1034))
    br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 | b_1306 = (fail_1308 true
                                                                    (f_zip_1296 x_1033
                                                                    y_1034))
    br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 | (not b_1306) = (zip_1032
                                                                    (
                                                                    x_1033 - 1)
                                                                    (
                                                                    y_1034 - 1)
                                                                    (
                                                                    f_zip_1297 x_1033
                                                                    y_1034
                                                                    k_zip_1130))
    f_1301 x_1269 | true = (main_1037 x_1269
                                      (f_1302 x_1269))
    f_1302 x_1269 x_1266 | true = end
    f_main_1299 n_1038 k_main_1227 x_1252 | true = (map_1035 x_1252
                                                             (f_main_1300 n_1038
                                                                    x_1252
                                                                    k_main_1227))
    f_main_1300 n_1038 x_1252 k_main_1227 x_1230 | (x_1230 = n_1038) = (
    k_main_1227 ())
    f_main_1300 n_1038 x_1252 k_main_1227 x_1230 | (not (x_1230 = n_1038)) = (
    fail_1309 true
              k_main_1227)
    f_map_1298 x_1036 k_map_1195 x_1199 | true = (k_map_1195 (1 + x_1199))
    f_zip_1295 x_1033 y_1034 x_1133 | true = bot
    f_zip_1296 x_1033 y_1034 x_1149 | true = bot
    f_zip_1297 x_1033 y_1034 k_zip_1130 x_1162 | true = (k_zip_1130 (
                                                                    1 + x_1162))
    fail_1307 b k | true = (fail ())
    fail_1308 b k | true = (fail ())
    fail_1309 b k | true = (fail ())
    loop_1030 x_1031 k_loop_1103 | true = (loop_1030 x_1031
                                                     k_loop_1103)
    main_1037 n_1038 k_main_1227 | true = (zip_1032 n_1038
                                                    n_1038
                                                    (f_main_1299 n_1038
                                                                 k_main_1227))
    map_1035 x_1036 k_map_1195 | (x_1036 = 0) = (k_map_1195 x_1036)
    map_1035 x_1036 k_map_1195 | (not (x_1036 = 0)) = (map_1035 (x_1036 - 1)
                                                                (f_map_1298 x_1036
                                                                    k_map_1195))
    zip_1032 x_1033 y_1034 k_zip_1130 | (x_1033 = 0) = (br_zip_1303 (
                                                                    y_1034 = 0)
                                                                    x_1033
                                                                    y_1034
                                                                    k_zip_1130)
    zip_1032 x_1033 y_1034 k_zip_1130 | (not (x_1033 = 0)) = (br_zip_1305 (
                                                                    y_1034 = 0)
                                                                    x_1033
                                                                    y_1034
                                                                    k_zip_1130)
    main_1294:X
    br_zip_1303:bool -> int -> int -> (int -> X) -> X
    br_zip_1305:bool -> int -> int -> (int -> X) -> X
    f_1301:int -> X
    f_1302:int -> unit -> X
    f_main_1299:int -> (unit -> X) -> int -> X
    f_main_1300:int -> int -> (unit -> X) -> int -> X
    f_map_1298:int -> (int -> X) -> int -> X
    f_zip_1295:int -> int -> unit -> X
    f_zip_1296:int -> int -> unit -> X
    f_zip_1297:int -> int -> (int -> X) -> int -> X
    fail_1307:bool -> (unit -> X) -> X
    fail_1308:bool -> (unit -> X) -> X
    fail_1309:bool -> (unit -> X) -> X
    loop_1030:unit -> (unit -> X) -> X
    main_1037:int -> (unit -> X) -> X
    map_1035:int -> (int -> X) -> X
    zip_1032:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1303,br_zip_1305,f_1301,f_1302,f_main_1299,f_main_1300,f_map_1298,f_zip_1295,f_zip_1296,f_zip_1297,loop_1030,main_1037
  counterexample: 0:0:0:1:0:0
  error traces:
    [true.nop(<f_1301@4:0> = var2)
     [true.(<main_1037@6:0> = <f_1301@4:0>)
      [true.((<zip_1032@8:0> = <main_1037@6:0>) && (<zip_1032@8:1> = <main_1037@6:0>))
       [(not (<zip_1032@8:0> = 0)).
        ((<br_zip_1305@11:0> = (<zip_1032@8:1> = 0)) &&
         ((<br_zip_1305@11:1> = <zip_1032@8:0>) && (<br_zip_1305@11:2> = <zip_1032@8:1>)))
        [<br_zip_1305@11:0>.(<fail_1308@14:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(157)[2]
    horn clauses:
      P[<fail_1308@14:0>](<fail_1308@14:0>:bool)|- bot
      
      P[<br_zip_1305@11:2>](true:bool,<br_zip_1305@11:1>:int,<br_zip_1305@11:2>:int), <fail_1308@14:0>
      |- P[<fail_1308@14:0>](<fail_1308@14:0>:bool)
      
      P[<zip_1032@8:1>](<br_zip_1305@11:1>:int,<br_zip_1305@11:2>:int),
      ((<br_zip_1305@11:1> <> 0) && (<br_zip_1305@11:0> = (<br_zip_1305@11:2> = 0)))
      |- P[<br_zip_1305@11:2>](<br_zip_1305@11:0>:bool,<br_zip_1305@11:1>:int,
                               <br_zip_1305@11:2>:int)
      
      P[<main_1037@6:0>](<zip_1032@8:1>:int), (<zip_1032@8:1> = <zip_1032@8:0>)
      |- P[<zip_1032@8:1>](<zip_1032@8:0>:int,<zip_1032@8:1>:int)
      
      P[<f_1301@4:0>](<main_1037@6:0>:int)|- P[<main_1037@6:0>](<main_1037@6:0>:int)
      
      |- P[<f_1301@4:0>](<f_1301@4:0>:int)
    call trees:
      <main_1294@1>
        <f_1301@4>
          <main_1037@6>
            <zip_1032@8>
              <br_zip_1305@11>
                <fail_1308@14>
    inlined horn clauses:
      P[<fail_1308@14:0>](<fail_1308@14:0>:bool)|- bot
      
      P[<zip_1032@8:1>](<br_zip_1305@11:1>:int,0:int), ((<br_zip_1305@11:1> <> 0) && <fail_1308@14:0>)
      |- P[<fail_1308@14:0>](<fail_1308@14:0>:bool)
      
       (<zip_1032@8:1> = <zip_1032@8:0>) |- P[<zip_1032@8:1>](<zip_1032@8:0>:int,
                                                              <zip_1032@8:1>:int)
    begin ParamSubstInfer.infer(896)[3]
      
    end ParamSubstInfer.infer(896)[3] (0.005999 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(898)[3]
      
    end RefTypeInfer.elim_coeffs(898)[3] (0.000000 sec.)
    begin YhornInterface.solve(998)[3]
      begin HcSolver.solve_ub(999)[4]
        encoded:
          P[<fail_1308@14:0>](<fail_1308@14:0>:int)|- bot
          
          P[<zip_1032@8:1>](<br_zip_1305@11:1>:int,0:int), ((<br_zip_1305@11:1> <> 0) && (<fail_1308@14:0> = 1))
          |- P[<fail_1308@14:0>](<fail_1308@14:0>:int)
          
           (<zip_1032@8:1> = <zip_1032@8:0>) |- P[<zip_1032@8:1>](<zip_1032@8:0>:int,
                                                                  <zip_1032@8:1>:int)
        input to Yhorn:
          P[<fail_1308@14:0>](<fail_1308@14:0>:int)|- bot
          
          P[<zip_1032@8:1>](<br_zip_1305@11:1>:int,var3:int),
          ((<br_zip_1305@11:1> <> 0) && ((var3 = 0) && (<fail_1308@14:0> = 1)))
          |- P[<fail_1308@14:0>](<fail_1308@14:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1308_sep_14_sep_0($6)) -> 1=0.
(($6-1=0) & ($7=0) & ($8<>0)) & (v_sep_zip_1032_sep_8_sep_1($8,$7)) -> v_sep_fail_1308_sep_14_sep_0($6).
$9-$10=0 -> v_sep_zip_1032_sep_8_sep_1($10,$9).


v_sep_fail_1308_sep_14_sep_0: X
v_sep_zip_1032_sep_8_sep_1: X
....Split disj [11] 0.126979
Reconstrcut: 3 **)

v_sep_fail_1308_sep_14_sep_0: (X) | (X)
v_sep_zip_1032_sep_8_sep_1: X
.....
v_sep_fail_1308_sep_14_sep_0: (X) | (X)
v_sep_zip_1032_sep_8_sep_1: X
.....Split conj [13] 0.130979
(Reconstrcut: 8 **)
v_sep_fail_1308_sep_14_sep_0: (X) | (X)
v_sep_zip_1032_sep_8_sep_1: (X) & (X)
.....
v_sep_fail_1308_sep_14_sep_0: (X) | (X)
v_sep_zip_1032_sep_8_sep_1: (X) & (X)
.....
v_sep_fail_1308_sep_14_sep_0: (X) | (X)
v_sep_zip_1032_sep_8_sep_1: (X) & (X)
.....(0=0) & (v_sep_fail_1308_sep_14_sep_0($6)) -> 1=0.
(($6-1=0) & ($7=0) & ($8<>0)) & (v_sep_zip_1032_sep_8_sep_1($8,$7)) -> v_sep_fail_1308_sep_14_sep_0($6).
$9-$10=0 -> v_sep_zip_1032_sep_8_sep_1($10,$9).

           (<zip_1032@8:1> = <zip_1032@8:0>) |- P[<zip_1032@8:1>](<zip_1032@8:0>:int,
                                                                  <zip_1032@8:1>:int)
        solution:
          P[<fail_1308@14:0>]($11:bool) = false
          P[<zip_1032@8:1>]($14:int,$16:int) = ($16 = $14)
        
      end HcSolver.solve_ub(999)[4] (0.013998 sec.)
      begin HcSolver.check_validity(1096)[4]
        input:
          P[<fail_1308@14:0>](<fail_1308@14:0>:bool)|- bot
          
          P[<zip_1032@8:1>](<br_zip_1305@11:1>:int,0:int), ((<br_zip_1305@11:1> <> 0) && <fail_1308@14:0>)
          |- P[<fail_1308@14:0>](<fail_1308@14:0>:bool)
          
           (<zip_1032@8:1> = <zip_1032@8:0>) |- P[<zip_1032@8:1>](<zip_1032@8:0>:int,
                                                                  <zip_1032@8:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1096)[4] (0.000000 sec.)
      solution:
        P[<fail_1308@14:0>]($11:bool) = false
        P[<zip_1032@8:1>]($14:int,$16:int) = ($16 = $14)
    end YhornInterface.solve(998)[3] (0.013998 sec.)
    
  end RefTypeInfer.infer_etrs(157)[2] (0.023997 sec.)
  refinement types:
    main_1294: X
    f_1301: v1:int -> X
    main_1037: v1:int -> (v2:unit -> X) -> X
    zip_1032: v1:int -> v2:{v2:int | (v2 = v1)} -> (v3:int -> X) -> X
    br_zip_1305: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    fail_1308: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_zip_1303: var17:bool -> var16:int -> var15:int -> (var14:int -> X) -> X
    f_1302: var20:int -> var19:unit -> X
    f_main_1299: var25:int -> (var24:unit -> X) -> var22:int -> X
    f_main_1300: var31:int -> var30:int -> (var29:unit -> X) -> var27:int -> X
    f_map_1298: var36:int -> (var35:int -> X) -> var33:int -> X
    f_zip_1295: var40:int -> var39:int -> var38:unit -> X
    f_zip_1296: var44:int -> var43:int -> var42:unit -> X
    f_zip_1297: var50:int -> var49:int -> (var48:int -> X) -> var46:int -> X
    fail_1307: var54:bool -> (var53:unit -> X) -> X
    fail_1309: var58:bool -> (var57:unit -> X) -> X
    loop_1030: var62:unit -> (var61:unit -> X) -> X
    map_1035: var66:int -> (var65:int -> X) -> X
  abstraction types:
    main_1294: X
    f_1301: v1:int -> X
    main_1037: v1:int -> (v2:unit -> X) -> X
    zip_1032: v1:int -> v2:int[v2 -> (v2 = v1)] -> (v3:int -> X) -> X
    br_zip_1305: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    fail_1308: v1:bool -> (v2:unit -> X) -> X
    br_zip_1303: var17:bool -> var16:int -> var15:int -> (var14:int -> X) -> X
    f_1302: var20:int -> var19:unit -> X
    f_main_1299: var25:int -> (var24:unit -> X) -> var22:int -> X
    f_main_1300: var31:int -> var30:int -> (var29:unit -> X) -> var27:int -> X
    f_map_1298: var36:int -> (var35:int -> X) -> var33:int -> X
    f_zip_1295: var40:int -> var39:int -> var38:unit -> X
    f_zip_1296: var44:int -> var43:int -> var42:unit -> X
    f_zip_1297: var50:int -> var49:int -> (var48:int -> X) -> var46:int -> X
    fail_1307: var54:bool -> (var53:unit -> X) -> X
    fail_1309: var58:bool -> (var57:unit -> X) -> X
    loop_1030: var62:unit -> (var61:unit -> X) -> X
    map_1035: var66:int -> (var65:int -> X) -> X
  
end AbsTypeInfer.refine(156)[1] (0.028996 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1294
  main_1294 -> (rand_int f_1301)
  br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 when b_1304 -> (k_zip_1130 x_1033)
  br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 when (not b_1304) -> (fail_1307 true (f_zip_1295 x_1033 y_1034))
  br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 when b_1306 -> (fail_1308 true (f_zip_1296 x_1033 y_1034))
  br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 when (not b_1306) ->
      (zip_1032 (x_1033 - 1) (y_1034 - 1) (f_zip_1297 x_1033 y_1034 k_zip_1130))
  f_1301 x_1269 -> (main_1037 x_1269 (f_1302 x_1269))
  f_1302 x_1269 x_1266 -> end
  f_main_1299 n_1038 k_main_1227 x_1252 -> (map_1035 x_1252 (f_main_1300 n_1038 x_1252 k_main_1227))
  f_main_1300 n_1038 x_1252 k_main_1227 x_1230 when (x_1230 = n_1038) -> (k_main_1227 ())
  f_main_1300 n_1038 x_1252 k_main_1227 x_1230 when (not (x_1230 = n_1038)) -> (fail_1309 true k_main_1227)
  f_map_1298 x_1036 k_map_1195 x_1199 -> (k_map_1195 (1 + x_1199))
  f_zip_1295 x_1033 y_1034 x_1133 -> _|_
  f_zip_1296 x_1033 y_1034 x_1149 -> _|_
  f_zip_1297 x_1033 y_1034 k_zip_1130 x_1162 -> (k_zip_1130 (1 + x_1162))
  fail_1307 b k -> {fail} => (k ())
  fail_1308 b k -> {fail} => (k ())
  fail_1309 b k -> {fail} => (k ())
  loop_1030 x_1031 k_loop_1103 -> (loop_1030 x_1031 k_loop_1103)
  main_1037 n_1038 k_main_1227 -> (zip_1032 n_1038 n_1038 (f_main_1299 n_1038 k_main_1227))
  map_1035 x_1036 k_map_1195 when (x_1036 = 0) -> (k_map_1195 x_1036)
  map_1035 x_1036 k_map_1195 when (not (x_1036 = 0)) -> (map_1035 (x_1036 - 1) (f_map_1298 x_1036 k_map_1195))
  zip_1032 x_1033 y_1034 k_zip_1130 when (x_1033 = 0) -> (br_zip_1303 (y_1034 = 0) x_1033 y_1034 k_zip_1130)
  zip_1032 x_1033 y_1034 k_zip_1130 when (not (x_1033 = 0)) -> (br_zip_1305 (y_1034 = 0) x_1033 y_1034 k_zip_1130)
Types:
  main_1294 : X
  fail_1307 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1308 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1309 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1035 : (int -> (int -> X) -> X)
  zip_1032 : (x_1:int -> x_2:int[x_1 = x_2] -> (int -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1294 ... --> 
  f_1301 ... --> 
  main_1037 ... --> 
  zip_1032 [1/2] ... --> 
  br_zip_1303 [1/2] ... --> 
  f_main_1299 ... --> 
  map_1035 [1/2] ... --> 
  f_main_1300 [2/2] ... --> 
  fail_1309 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(1528)[1]
  program:
    main_1294  | true = ((Random.int 0) f_1301)
    br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 | b_1304 = (k_zip_1130 x_1033)
    br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 | (not b_1304) = (fail_1307 true
                                                                    (f_zip_1295 x_1033
                                                                    y_1034))
    br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 | b_1306 = (fail_1308 true
                                                                    (f_zip_1296 x_1033
                                                                    y_1034))
    br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 | (not b_1306) = (zip_1032
                                                                    (
                                                                    x_1033 - 1)
                                                                    (
                                                                    y_1034 - 1)
                                                                    (
                                                                    f_zip_1297 x_1033
                                                                    y_1034
                                                                    k_zip_1130))
    f_1301 x_1269 | true = (main_1037 x_1269
                                      (f_1302 x_1269))
    f_1302 x_1269 x_1266 | true = end
    f_main_1299 n_1038 k_main_1227 x_1252 | true = (map_1035 x_1252
                                                             (f_main_1300 n_1038
                                                                    x_1252
                                                                    k_main_1227))
    f_main_1300 n_1038 x_1252 k_main_1227 x_1230 | (x_1230 = n_1038) = (
    k_main_1227 ())
    f_main_1300 n_1038 x_1252 k_main_1227 x_1230 | (not (x_1230 = n_1038)) = (
    fail_1309 true
              k_main_1227)
    f_map_1298 x_1036 k_map_1195 x_1199 | true = (k_map_1195 (1 + x_1199))
    f_zip_1295 x_1033 y_1034 x_1133 | true = bot
    f_zip_1296 x_1033 y_1034 x_1149 | true = bot
    f_zip_1297 x_1033 y_1034 k_zip_1130 x_1162 | true = (k_zip_1130 (
                                                                    1 + x_1162))
    fail_1307 b k | true = (fail ())
    fail_1308 b k | true = (fail ())
    fail_1309 b k | true = (fail ())
    loop_1030 x_1031 k_loop_1103 | true = (loop_1030 x_1031
                                                     k_loop_1103)
    main_1037 n_1038 k_main_1227 | true = (zip_1032 n_1038
                                                    n_1038
                                                    (f_main_1299 n_1038
                                                                 k_main_1227))
    map_1035 x_1036 k_map_1195 | (x_1036 = 0) = (k_map_1195 x_1036)
    map_1035 x_1036 k_map_1195 | (not (x_1036 = 0)) = (map_1035 (x_1036 - 1)
                                                                (f_map_1298 x_1036
                                                                    k_map_1195))
    zip_1032 x_1033 y_1034 k_zip_1130 | (x_1033 = 0) = (br_zip_1303 (
                                                                    y_1034 = 0)
                                                                    x_1033
                                                                    y_1034
                                                                    k_zip_1130)
    zip_1032 x_1033 y_1034 k_zip_1130 | (not (x_1033 = 0)) = (br_zip_1305 (
                                                                    y_1034 = 0)
                                                                    x_1033
                                                                    y_1034
                                                                    k_zip_1130)
    main_1294:X
    br_zip_1303:bool -> int -> int -> (int -> X) -> X
    br_zip_1305:bool -> int -> int -> (int -> X) -> X
    f_1301:int -> X
    f_1302:int -> unit -> X
    f_main_1299:int -> (unit -> X) -> int -> X
    f_main_1300:int -> int -> (unit -> X) -> int -> X
    f_map_1298:int -> (int -> X) -> int -> X
    f_zip_1295:int -> int -> unit -> X
    f_zip_1296:int -> int -> unit -> X
    f_zip_1297:int -> int -> (int -> X) -> int -> X
    fail_1307:bool -> (unit -> X) -> X
    fail_1308:bool -> (unit -> X) -> X
    fail_1309:bool -> (unit -> X) -> X
    loop_1030:unit -> (unit -> X) -> X
    main_1037:int -> (unit -> X) -> X
    map_1035:int -> (int -> X) -> X
    zip_1032:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1303,br_zip_1305,f_1301,f_1302,f_main_1299,f_main_1300,f_map_1298,f_zip_1295,f_zip_1296,f_zip_1297,loop_1030,main_1037
  counterexample: 0:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1301@20:0> = var67)
     [true.(<main_1037@22:0> = <f_1301@20:0>)
      [true.((<zip_1032@24:0> = <main_1037@22:0>) && (<zip_1032@24:1> = <main_1037@22:0>))
       [(<zip_1032@24:0> = 0).
        ((<br_zip_1303@27:0> = (<zip_1032@24:1> = 0)) &&
         ((<br_zip_1303@27:1> = <zip_1032@24:0>) && (<br_zip_1303@27:2> = <zip_1032@24:1>)))
        [<br_zip_1303@27:0>.(<<br_zip_1303@27:3>@30:0> = <br_zip_1303@27:1>)
         [true.(<<zip_1032@24:2>@32:0> = <<br_zip_1303@27:3>@30:0>)
          [true.((<f_main_1299@34:0> = <main_1037@22:0>) && (<f_main_1299@34:2> = <<zip_1032@24:2>@32:0>))
           [true.(<map_1035@36:0> = <f_main_1299@34:2>)
            [(<map_1035@36:0> = 0).(<<map_1035@36:1>@39:0> = <map_1035@36:0>)
             [true.
              ((<f_main_1300@41:0> = <f_main_1299@34:0>) &&
               ((<f_main_1300@41:1> = <f_main_1299@34:2>) && (<f_main_1300@41:3> = <<map_1035@36:1>@39:0>)))
              [(not (<f_main_1300@41:3> = <f_main_1300@41:0>)).(<fail_1309@44:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(1529)[2]
    horn clauses:
      P[<fail_1309@44:0>](<fail_1309@44:0>:bool)|- bot
      
      P[<f_main_1300@41:3>](<f_main_1300@41:0>:int,<f_main_1300@41:1>:int,<f_main_1300@41:3>:int),
      ((<f_main_1300@41:3> <> <f_main_1300@41:0>) && <fail_1309@44:0>) |- P[<fail_1309@44:0>](
      <fail_1309@44:0>:bool)
      
      P[<f_main_1299@34:2>](<f_main_1300@41:0>:int,<f_main_1300@41:1>:int),
      P[<<map_1035@36:1>@39:0>](<f_main_1300@41:1>:int,<f_main_1300@41:3>:int)|- P[<f_main_1300@41:3>](
      <f_main_1300@41:0>:int,<f_main_1300@41:1>:int,<f_main_1300@41:3>:int)
      
      P[<map_1035@36:0>](<map_1035@36:0>:int), ((<map_1035@36:0> = 0) && (<<map_1035@36:1>@39:0> = <map_1035@36:0>))
      |- P[<<map_1035@36:1>@39:0>](<map_1035@36:0>:int,<<map_1035@36:1>@39:0>:int)
      
      P[<f_main_1299@34:2>](<f_main_1299@34:0>:int,<map_1035@36:0>:int)|- P[<map_1035@36:0>](<map_1035@36:0>:int)
      
      P[<main_1037@22:0>](<f_main_1299@34:0>:int),
      P[<<zip_1032@24:2>@32:0>](<f_main_1299@34:0>:int,<f_main_1299@34:0>:int,<f_main_1299@34:2>:int)|- P[<f_main_1299@34:2>](
      <f_main_1299@34:0>:int,<f_main_1299@34:2>:int)
      
      P[<zip_1032@24:1>](<zip_1032@24:0>:int,<zip_1032@24:1>:int),
      P[<<br_zip_1303@27:3>@30:0>]((<zip_1032@24:1> = 0):bool,<zip_1032@24:0>:int,<zip_1032@24:1>:int,<<zip_1032@24:2>@32:0>:int),
      (<zip_1032@24:0> = 0)
      |- P[<<zip_1032@24:2>@32:0>](<zip_1032@24:0>:int,<zip_1032@24:1>:int,
                                   <<zip_1032@24:2>@32:0>:int)
      
      P[<br_zip_1303@27:2>](<br_zip_1303@27:0>:bool,<br_zip_1303@27:1>:int,<br_zip_1303@27:2>:int),
      ((<<br_zip_1303@27:3>@30:0> = <br_zip_1303@27:1>) && <br_zip_1303@27:0>)
      |- P[<<br_zip_1303@27:3>@30:0>](<br_zip_1303@27:0>:bool,<br_zip_1303@27:1>:int,
                                      <br_zip_1303@27:2>:int,<<br_zip_1303@27:3>@30:0>:int)
      
      P[<zip_1032@24:1>](<br_zip_1303@27:1>:int,<br_zip_1303@27:2>:int),
      ((<br_zip_1303@27:1> = 0) && (<br_zip_1303@27:0> = (<br_zip_1303@27:2> = 0)))
      |- P[<br_zip_1303@27:2>](<br_zip_1303@27:0>:bool,<br_zip_1303@27:1>:int,
                               <br_zip_1303@27:2>:int)
      
      P[<main_1037@22:0>](<zip_1032@24:1>:int), (<zip_1032@24:1> = <zip_1032@24:0>)
      |- P[<zip_1032@24:1>](<zip_1032@24:0>:int,<zip_1032@24:1>:int)
      
      P[<f_1301@20:0>](<main_1037@22:0>:int)|- P[<main_1037@22:0>](<main_1037@22:0>:int)
      
      |- P[<f_1301@20:0>](<f_1301@20:0>:int)
    call trees:
      <main_1294@17>
        <f_1301@20>
          <main_1037@22>
            <zip_1032@24>
              <br_zip_1303@27>
              </<br_zip_1303@27:3>@30>
            </<zip_1032@24:2>@32>
            <f_main_1299@34>
              <map_1035@36>
              </<map_1035@36:1>@39>
              <f_main_1300@41>
                <fail_1309@44>
    inlined horn clauses:
      P[<fail_1309@44:0>](<fail_1309@44:0>:bool)|- bot
      
      P[<<zip_1032@24:2>@32:0>](<f_main_1300@41:0>:int,<f_main_1300@41:0>:int,<f_main_1300@41:1>:int),
      P[<<map_1035@36:1>@39:0>](<f_main_1300@41:1>:int,<f_main_1300@41:3>:int),
      ((<f_main_1300@41:3> <> <f_main_1300@41:0>) && <fail_1309@44:0>) |- P[<fail_1309@44:0>](
      <fail_1309@44:0>:bool)
      
      P[<map_1035@36:0>](<map_1035@36:0>:int), ((<map_1035@36:0> = 0) && (<<map_1035@36:1>@39:0> = <map_1035@36:0>))
      |- P[<<map_1035@36:1>@39:0>](<map_1035@36:0>:int,<<map_1035@36:1>@39:0>:int)
      
      P[<<zip_1032@24:2>@32:0>](<f_main_1299@34:0>:int,<f_main_1299@34:0>:int,<map_1035@36:0>:int)|- P[<map_1035@36:0>](
      <map_1035@36:0>:int)
      
      P[<zip_1032@24:1>](<zip_1032@24:0>:int,<zip_1032@24:1>:int),
      ((<zip_1032@24:0> = 0) && ((<zip_1032@24:1> = 0) && (<<zip_1032@24:2>@32:0> = <zip_1032@24:0>)))
      |- P[<<zip_1032@24:2>@32:0>](<zip_1032@24:0>:int,<zip_1032@24:1>:int,
                                   <<zip_1032@24:2>@32:0>:int)
      
       (<zip_1032@24:1> = <zip_1032@24:0>) |- P[<zip_1032@24:1>](<zip_1032@24:0>:int,
                                                                 <zip_1032@24:1>:int)
    begin ParamSubstInfer.infer(3282)[3]
      
    end ParamSubstInfer.infer(3282)[3] (0.013997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(3284)[3]
      
    end RefTypeInfer.elim_coeffs(3284)[3] (0.000000 sec.)
    begin YhornInterface.solve(3565)[3]
      begin HcSolver.solve_ub(3566)[4]
        encoded:
          P[<fail_1309@44:0>](<fail_1309@44:0>:int)|- bot
          
          P[<<zip_1032@24:2>@32:0>](<f_main_1300@41:0>:int,<f_main_1300@41:0>:int,<f_main_1300@41:1>:int),
          P[<<map_1035@36:1>@39:0>](<f_main_1300@41:1>:int,<f_main_1300@41:3>:int),
          ((<f_main_1300@41:3> <> <f_main_1300@41:0>) && (<fail_1309@44:0> = 1))
          |- P[<fail_1309@44:0>](<fail_1309@44:0>:int)
          
          P[<map_1035@36:0>](<map_1035@36:0>:int),
          ((<map_1035@36:0> = 0) && (<<map_1035@36:1>@39:0> = <map_1035@36:0>))
          |- P[<<map_1035@36:1>@39:0>](<map_1035@36:0>:int,<<map_1035@36:1>@39:0>:int)
          
          P[<<zip_1032@24:2>@32:0>](<f_main_1299@34:0>:int,<f_main_1299@34:0>:int,<map_1035@36:0>:int)|- P[<map_1035@36:0>](
          <map_1035@36:0>:int)
          
          P[<zip_1032@24:1>](<zip_1032@24:0>:int,<zip_1032@24:1>:int),
          ((<zip_1032@24:0> = 0) && ((<zip_1032@24:1> = 0) && (<<zip_1032@24:2>@32:0> = <zip_1032@24:0>)))
          |- P[<<zip_1032@24:2>@32:0>](<zip_1032@24:0>:int,<zip_1032@24:1>:int,
                                       <<zip_1032@24:2>@32:0>:int)
          
           (<zip_1032@24:1> = <zip_1032@24:0>) |- P[<zip_1032@24:1>](<zip_1032@24:0>:int,
                                                                    <zip_1032@24:1>:int)
        input to Yhorn:
          P[<fail_1309@44:0>](<fail_1309@44:0>:int)|- bot
          
          P[<<zip_1032@24:2>@32:0>](<f_main_1300@41:0>:int,<f_main_1300@41:0>:int,<f_main_1300@41:1>:int),
          P[<<map_1035@36:1>@39:0>](<f_main_1300@41:1>:int,<f_main_1300@41:3>:int),
          ((<f_main_1300@41:3> <> <f_main_1300@41:0>) && (<fail_1309@44:0> = 1))
          |- P[<fail_1309@44:0>](<fail_1309@44:0>:int)
          
          P[<map_1035@36:0>](<map_1035@36:0>:int),
          ((<<map_1035@36:1>@39:0> = <map_1035@36:0>) && (<map_1035@36:0> = 0))
          |- P[<<map_1035@36:1>@39:0>](<map_1035@36:0>:int,<<map_1035@36:1>@39:0>:int)
          
          P[<<zip_1032@24:2>@32:0>](<f_main_1299@34:0>:int,<f_main_1299@34:0>:int,<map_1035@36:0>:int)|- P[<map_1035@36:0>](
          <map_1035@36:0>:int)
          
          P[<zip_1032@24:1>](<zip_1032@24:0>:int,<zip_1032@24:1>:int),
          ((<<zip_1032@24:2>@32:0> = <zip_1032@24:0>) && ((<zip_1032@24:1> = 0) && (<zip_1032@24:0> = 0)))
          |- P[<<zip_1032@24:2>@32:0>](<zip_1032@24:0>:int,<zip_1032@24:1>:int,
                                       <<zip_1032@24:2>@32:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1309_sep_44_sep_0($130)) -> 1=0.
(($130-1=0) & ($131-$132<>0)) & (v_sep_map_1035_sep_36_sep_1_sep_39_sep_0($133,$131)) & (v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0($132,$132,$133)) -> v_sep_fail_1309_sep_44_sep_0($130).
(($134=0) & (-$134+$135=0)) & (v_sep_map_1035_sep_36_sep_0($134)) -> v_sep_map_1035_sep_36_sep_1_sep_39_sep_0($134,$135).
(0=0) & (v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0($136,$136,$134)) -> v_sep_map_1035_sep_36_sep_0($134).
(($137=0) & ($138=0) & (-$137+$139=0)) & (v_sep_zip_1032_sep_24_sep_1($137,$138)) -> v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0($137,$138,$139).
-$137+$138=0 -> v_sep_zip_1032_sep_24_sep_1($137,$138).


v_sep_fail_1309_sep_44_sep_0: X
v_sep_map_1035_sep_36_sep_0: X
v_sep_map_1035_sep_36_sep_1_sep_39_sep_0: X
v_sep_zip_1032_sep_24_sep_1: X
v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0: X
.........Split disj [20] 0.170973
Reconstrcut: 3 **)

v_sep_fail_1309_sep_44_sep_0: (X) | (X)
v_sep_map_1035_sep_36_sep_0: X
v_sep_map_1035_sep_36_sep_1_sep_39_sep_0: X
v_sep_zip_1032_sep_24_sep_1: X
v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0: X
.......
v_sep_fail_1309_sep_44_sep_0: (X) | (X)
v_sep_map_1035_sep_36_sep_0: X
v_sep_map_1035_sep_36_sep_1_sep_39_sep_0: X
v_sep_zip_1032_sep_24_sep_1: X
v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0: X
.......Split conj [22] 0.173972
(Reconstrcut: 8 **)
v_sep_fail_1309_sep_44_sep_0: (X) | (X)
v_sep_map_1035_sep_36_sep_0: X
v_sep_map_1035_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1032_sep_24_sep_1: X
v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0: X
.........
v_sep_fail_1309_sep_44_sep_0: (X) | (X)
v_sep_map_1035_sep_36_sep_0: X
v_sep_map_1035_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1032_sep_24_sep_1: X
v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0: X
.......Split conj [24] 0.177972
(Reconstrcut: 14 ***)
v_sep_fail_1309_sep_44_sep_0: (X) | (X)
v_sep_map_1035_sep_36_sep_0: X
v_sep_map_1035_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1032_sep_24_sep_1: X
v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
.............
v_sep_fail_1309_sep_44_sep_0: (X) | (X)
v_sep_map_1035_sep_36_sep_0: X
v_sep_map_1035_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1032_sep_24_sep_1: X
v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
.......
v_sep_fail_1309_sep_44_sep_0: (X) | (X)
v_sep_map_1035_sep_36_sep_0: X
v_sep_map_1035_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1032_sep_24_sep_1: X
v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
...........
v_sep_fail_1309_sep_44_sep_0: (X) | (X)
v_sep_map_1035_sep_36_sep_0: X
v_sep_map_1035_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1032_sep_24_sep_1: X
v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
............
v_sep_fail_1309_sep_44_sep_0: (X) | (X)
v_sep_map_1035_sep_36_sep_0: X
v_sep_map_1035_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1032_sep_24_sep_1: X
v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
.............(0=0) & (v_sep_fail_1309_sep_44_sep_0($130)) -> 1=0.
(($130-1=0) & ($131-$132<>0)) & (v_sep_map_1035_sep_36_sep_1_sep_39_sep_0($133,$131)) & (v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0($132,$132,$133)) -> v_sep_fail_1309_sep_44_sep_0($130).
(($134=0) & (-$134+$135=0)) & (v_sep_map_1035_sep_36_sep_0($134)) -> v_sep_map_1035_sep_36_sep_1_sep_39_sep_0($134,$135).
(0=0) & (v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0($136,$136,$134)) -> v_sep_map_1035_sep_36_sep_0($134).
(($137=0) & ($138=0) & (-$137+$139=0)) & (v_sep_zip_1032_sep_24_sep_1($137,$138)) -> v_sep_zip_1032_sep_24_sep_2_sep_32_sep_0($137,$138,$139).
-$137+$138=0 -> v_sep_zip_1032_sep_24_sep_1($137,$138).

           (<zip_1032@24:1> = <zip_1032@24:0>) |- P[<zip_1032@24:1>](<zip_1032@24:0>:int,
                                                                    <zip_1032@24:1>:int)
        solution:
          P[<fail_1309@44:0>]($140:bool) = false
          P[<map_1035@36:0>]($155:int) = true
          P[<<map_1035@36:1>@39:0>]($143:int,$145:int) = ($145 = 0)
          P[<zip_1032@24:1>]($158:int,$160:int) = true
          P[<<zip_1032@24:2>@32:0>]($148:int,$150:int,$152:int) = ((0 <= $150) && ($148 <= 0))
        
      end HcSolver.solve_ub(3566)[4] (0.026996 sec.)
      begin HcSolver.check_validity(3785)[4]
        input:
          P[<fail_1309@44:0>](<fail_1309@44:0>:bool)|- bot
          
          P[<<zip_1032@24:2>@32:0>](<f_main_1300@41:0>:int,<f_main_1300@41:0>:int,<f_main_1300@41:1>:int),
          P[<<map_1035@36:1>@39:0>](<f_main_1300@41:1>:int,<f_main_1300@41:3>:int),
          ((<f_main_1300@41:3> <> <f_main_1300@41:0>) && <fail_1309@44:0>)
          |- P[<fail_1309@44:0>](<fail_1309@44:0>:bool)
          
          P[<map_1035@36:0>](<map_1035@36:0>:int),
          ((<map_1035@36:0> = 0) && (<<map_1035@36:1>@39:0> = <map_1035@36:0>))
          |- P[<<map_1035@36:1>@39:0>](<map_1035@36:0>:int,<<map_1035@36:1>@39:0>:int)
          
          P[<<zip_1032@24:2>@32:0>](<f_main_1299@34:0>:int,<f_main_1299@34:0>:int,<map_1035@36:0>:int)|- P[<map_1035@36:0>](
          <map_1035@36:0>:int)
          
          P[<zip_1032@24:1>](<zip_1032@24:0>:int,<zip_1032@24:1>:int),
          ((<zip_1032@24:0> = 0) && ((<zip_1032@24:1> = 0) && (<<zip_1032@24:2>@32:0> = <zip_1032@24:0>)))
          |- P[<<zip_1032@24:2>@32:0>](<zip_1032@24:0>:int,<zip_1032@24:1>:int,
                                       <<zip_1032@24:2>@32:0>:int)
          
           (<zip_1032@24:1> = <zip_1032@24:0>) |- P[<zip_1032@24:1>](<zip_1032@24:0>:int,
                                                                    <zip_1032@24:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3785)[4] (0.001000 sec.)
      solution:
        P[<fail_1309@44:0>]($140:bool) = false
        P[<map_1035@36:0>]($155:int) = true
        P[<<map_1035@36:1>@39:0>]($143:int,$145:int) = ($145 = 0)
        P[<zip_1032@24:1>]($158:int,$160:int) = true
        P[<<zip_1032@24:2>@32:0>]($148:int,$150:int,$152:int) = ((0 <= $150) && ($148 <= 0))
    end YhornInterface.solve(3565)[3] (0.027996 sec.)
    
  end RefTypeInfer.infer_etrs(1529)[2] (0.049992 sec.)
  refinement types:
    main_1294: X
    f_1301: v1:int -> X
    main_1037: v1:int -> (v2:unit -> X) -> X
    zip_1032: v1:int -> v2:int -> (v3:{v3:int | ((0 <= v2) && (v1 <= 0))} -> X) -> X
    br_zip_1303: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_main_1299: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1035: v1:int -> (v2:{v2:int | (v2 = 0)} -> X) -> X
    f_main_1300: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1309: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_zip_1305: var81:bool -> var80:int -> var79:int -> (var78:int -> X) -> X
    f_1302: var84:int -> var83:unit -> X
    f_map_1298: var89:int -> (var88:int -> X) -> var86:int -> X
    f_zip_1295: var93:int -> var92:int -> var91:unit -> X
    f_zip_1296: var97:int -> var96:int -> var95:unit -> X
    f_zip_1297: var103:int -> var102:int -> (var101:int -> X) -> var99:int -> X
    fail_1307: var107:bool -> (var106:unit -> X) -> X
    fail_1308: var111:bool -> (var110:unit -> X) -> X
    loop_1030: var115:unit -> (var114:unit -> X) -> X
  abstraction types:
    main_1294: X
    f_1301: v1:int -> X
    main_1037: v1:int -> (v2:unit -> X) -> X
    zip_1032: v1:int -> v2:int -> (v3:int[v3 -> ((0 <= v2) && (v1 <= 0))] -> X) -> X
    br_zip_1303: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_main_1299: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1035: v1:int -> (v2:int[v2 -> (v2 = 0)] -> X) -> X
    f_main_1300: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1309: v1:bool -> (v2:unit -> X) -> X
    br_zip_1305: var81:bool -> var80:int -> var79:int -> (var78:int -> X) -> X
    f_1302: var84:int -> var83:unit -> X
    f_map_1298: var89:int -> (var88:int -> X) -> var86:int -> X
    f_zip_1295: var93:int -> var92:int -> var91:unit -> X
    f_zip_1296: var97:int -> var96:int -> var95:unit -> X
    f_zip_1297: var103:int -> var102:int -> (var101:int -> X) -> var99:int -> X
    fail_1307: var107:bool -> (var106:unit -> X) -> X
    fail_1308: var111:bool -> (var110:unit -> X) -> X
    loop_1030: var115:unit -> (var114:unit -> X) -> X
  
end AbsTypeInfer.refine(1528)[1] (0.051992 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1294
  main_1294 -> (rand_int f_1301)
  br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 when b_1304 -> (k_zip_1130 x_1033)
  br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 when (not b_1304) -> (fail_1307 true (f_zip_1295 x_1033 y_1034))
  br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 when b_1306 -> (fail_1308 true (f_zip_1296 x_1033 y_1034))
  br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 when (not b_1306) ->
      (zip_1032 (x_1033 - 1) (y_1034 - 1) (f_zip_1297 x_1033 y_1034 k_zip_1130))
  f_1301 x_1269 -> (main_1037 x_1269 (f_1302 x_1269))
  f_1302 x_1269 x_1266 -> end
  f_main_1299 n_1038 k_main_1227 x_1252 -> (map_1035 x_1252 (f_main_1300 n_1038 x_1252 k_main_1227))
  f_main_1300 n_1038 x_1252 k_main_1227 x_1230 when (x_1230 = n_1038) -> (k_main_1227 ())
  f_main_1300 n_1038 x_1252 k_main_1227 x_1230 when (not (x_1230 = n_1038)) -> (fail_1309 true k_main_1227)
  f_map_1298 x_1036 k_map_1195 x_1199 -> (k_map_1195 (1 + x_1199))
  f_zip_1295 x_1033 y_1034 x_1133 -> _|_
  f_zip_1296 x_1033 y_1034 x_1149 -> _|_
  f_zip_1297 x_1033 y_1034 k_zip_1130 x_1162 -> (k_zip_1130 (1 + x_1162))
  fail_1307 b k -> {fail} => (k ())
  fail_1308 b k -> {fail} => (k ())
  fail_1309 b k -> {fail} => (k ())
  loop_1030 x_1031 k_loop_1103 -> (loop_1030 x_1031 k_loop_1103)
  main_1037 n_1038 k_main_1227 -> (zip_1032 n_1038 n_1038 (f_main_1299 n_1038 k_main_1227))
  map_1035 x_1036 k_map_1195 when (x_1036 = 0) -> (k_map_1195 x_1036)
  map_1035 x_1036 k_map_1195 when (not (x_1036 = 0)) -> (map_1035 (x_1036 - 1) (f_map_1298 x_1036 k_map_1195))
  zip_1032 x_1033 y_1034 k_zip_1130 when (x_1033 = 0) -> (br_zip_1303 (y_1034 = 0) x_1033 y_1034 k_zip_1130)
  zip_1032 x_1033 y_1034 k_zip_1130 when (not (x_1033 = 0)) -> (br_zip_1305 (y_1034 = 0) x_1033 y_1034 k_zip_1130)
Types:
  main_1294 : X
  fail_1307 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1308 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1309 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1035 : (int -> (x_3:int[x_3 = 0] -> X) -> X)
  zip_1032 : (x_1:int -> x_2:int[x_1 = x_2] -> (int[x_2 >= 0 && x_1 <= 0] -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1294 ... --> 
  f_1301 ... --> 
  main_1037 ... --> 
  zip_1032 [1/2] ... --> 
  br_zip_1303 [1/2] ... --> 
  f_main_1299 ... --> 
  map_1035 [2/2] ... --> 
  map_1035 [1/2] ... --> 
  f_map_1298 ... --> 
  f_main_1300 [2/2] ... --> 
  fail_1309 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(4717)[1]
  program:
    main_1294  | true = ((Random.int 0) f_1301)
    br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 | b_1304 = (k_zip_1130 x_1033)
    br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 | (not b_1304) = (fail_1307 true
                                                                    (f_zip_1295 x_1033
                                                                    y_1034))
    br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 | b_1306 = (fail_1308 true
                                                                    (f_zip_1296 x_1033
                                                                    y_1034))
    br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 | (not b_1306) = (zip_1032
                                                                    (
                                                                    x_1033 - 1)
                                                                    (
                                                                    y_1034 - 1)
                                                                    (
                                                                    f_zip_1297 x_1033
                                                                    y_1034
                                                                    k_zip_1130))
    f_1301 x_1269 | true = (main_1037 x_1269
                                      (f_1302 x_1269))
    f_1302 x_1269 x_1266 | true = end
    f_main_1299 n_1038 k_main_1227 x_1252 | true = (map_1035 x_1252
                                                             (f_main_1300 n_1038
                                                                    x_1252
                                                                    k_main_1227))
    f_main_1300 n_1038 x_1252 k_main_1227 x_1230 | (x_1230 = n_1038) = (
    k_main_1227 ())
    f_main_1300 n_1038 x_1252 k_main_1227 x_1230 | (not (x_1230 = n_1038)) = (
    fail_1309 true
              k_main_1227)
    f_map_1298 x_1036 k_map_1195 x_1199 | true = (k_map_1195 (1 + x_1199))
    f_zip_1295 x_1033 y_1034 x_1133 | true = bot
    f_zip_1296 x_1033 y_1034 x_1149 | true = bot
    f_zip_1297 x_1033 y_1034 k_zip_1130 x_1162 | true = (k_zip_1130 (
                                                                    1 + x_1162))
    fail_1307 b k | true = (fail ())
    fail_1308 b k | true = (fail ())
    fail_1309 b k | true = (fail ())
    loop_1030 x_1031 k_loop_1103 | true = (loop_1030 x_1031
                                                     k_loop_1103)
    main_1037 n_1038 k_main_1227 | true = (zip_1032 n_1038
                                                    n_1038
                                                    (f_main_1299 n_1038
                                                                 k_main_1227))
    map_1035 x_1036 k_map_1195 | (x_1036 = 0) = (k_map_1195 x_1036)
    map_1035 x_1036 k_map_1195 | (not (x_1036 = 0)) = (map_1035 (x_1036 - 1)
                                                                (f_map_1298 x_1036
                                                                    k_map_1195))
    zip_1032 x_1033 y_1034 k_zip_1130 | (x_1033 = 0) = (br_zip_1303 (
                                                                    y_1034 = 0)
                                                                    x_1033
                                                                    y_1034
                                                                    k_zip_1130)
    zip_1032 x_1033 y_1034 k_zip_1130 | (not (x_1033 = 0)) = (br_zip_1305 (
                                                                    y_1034 = 0)
                                                                    x_1033
                                                                    y_1034
                                                                    k_zip_1130)
    main_1294:X
    br_zip_1303:bool -> int -> int -> (int -> X) -> X
    br_zip_1305:bool -> int -> int -> (int -> X) -> X
    f_1301:int -> X
    f_1302:int -> unit -> X
    f_main_1299:int -> (unit -> X) -> int -> X
    f_main_1300:int -> int -> (unit -> X) -> int -> X
    f_map_1298:int -> (int -> X) -> int -> X
    f_zip_1295:int -> int -> unit -> X
    f_zip_1296:int -> int -> unit -> X
    f_zip_1297:int -> int -> (int -> X) -> int -> X
    fail_1307:bool -> (unit -> X) -> X
    fail_1308:bool -> (unit -> X) -> X
    fail_1309:bool -> (unit -> X) -> X
    loop_1030:unit -> (unit -> X) -> X
    main_1037:int -> (unit -> X) -> X
    map_1035:int -> (int -> X) -> X
    zip_1032:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1303,br_zip_1305,f_1301,f_1302,f_main_1299,f_main_1300,f_map_1298,f_zip_1295,f_zip_1296,f_zip_1297,loop_1030,main_1037
  counterexample: 0:0:0:0:0:0:1:0:0:1:0
  error traces:
    [true.nop(<f_1301@50:0> = var116)
     [true.(<main_1037@52:0> = <f_1301@50:0>)
      [true.((<zip_1032@54:0> = <main_1037@52:0>) && (<zip_1032@54:1> = <main_1037@52:0>))
       [(<zip_1032@54:0> = 0).
        ((<br_zip_1303@57:0> = (<zip_1032@54:1> = 0)) &&
         ((<br_zip_1303@57:1> = <zip_1032@54:0>) && (<br_zip_1303@57:2> = <zip_1032@54:1>)))
        [<br_zip_1303@57:0>.(<<br_zip_1303@57:3>@60:0> = <br_zip_1303@57:1>)
         [true.(<<zip_1032@54:2>@62:0> = <<br_zip_1303@57:3>@60:0>)
          [true.((<f_main_1299@64:0> = <main_1037@52:0>) && (<f_main_1299@64:2> = <<zip_1032@54:2>@62:0>))
           [true.(<map_1035@66:0> = <f_main_1299@64:2>)
            [(not (<map_1035@66:0> = 0)).(<map_1035@69:0> = (<map_1035@66:0> - 1))
             [(<map_1035@69:0> = 0).(<<map_1035@69:1>@72:0> = <map_1035@69:0>)
              [true.((<f_map_1298@74:0> = <map_1035@66:0>) && (<f_map_1298@74:2> = <<map_1035@69:1>@72:0>))
               [true.(<<f_map_1298@74:1>@76:0> = (1 + <f_map_1298@74:2>))
                [true.(<<map_1035@66:1>@78:0> = <<f_map_1298@74:1>@76:0>)
                 [true.
                  ((<f_main_1300@80:0> = <f_main_1299@64:0>) &&
                   ((<f_main_1300@80:1> = <f_main_1299@64:2>) && (<f_main_1300@80:3> = <<map_1035@66:1>@78:0>)))
                  [(not (<f_main_1300@80:3> = <f_main_1300@80:0>)).(<fail_1309@83:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(4718)[2]
    horn clauses:
      P[<fail_1309@83:0>](<fail_1309@83:0>:bool)|- bot
      
      P[<f_main_1300@80:3>](<f_main_1300@80:0>:int,<f_main_1300@80:1>:int,<f_main_1300@80:3>:int),
      ((<f_main_1300@80:3> <> <f_main_1300@80:0>) && <fail_1309@83:0>) |- P[<fail_1309@83:0>](
      <fail_1309@83:0>:bool)
      
      P[<f_main_1299@64:2>](<f_main_1300@80:0>:int,<f_main_1300@80:1>:int),
      P[<<map_1035@66:1>@78:0>](<f_main_1300@80:1>:int,<f_main_1300@80:3>:int)|- P[<f_main_1300@80:3>](
      <f_main_1300@80:0>:int,<f_main_1300@80:1>:int,<f_main_1300@80:3>:int)
      
      P[<map_1035@66:0>](<map_1035@66:0>:int),
      P[<<f_map_1298@74:1>@76:0>](<map_1035@66:0>:int,<<map_1035@66:1>@78:0>:int), (
      <map_1035@66:0> <> 0) |- P[<<map_1035@66:1>@78:0>](<map_1035@66:0>:int,
                                                         <<map_1035@66:1>@78:0>:int)
      
      P[<f_map_1298@74:2>](<f_map_1298@74:0>:int,(-1 + <<f_map_1298@74:1>@76:0>):int)|- P[<<f_map_1298@74:1>@76:0>](
      <f_map_1298@74:0>:int,<<f_map_1298@74:1>@76:0>:int)
      
      P[<map_1035@66:0>](<f_map_1298@74:0>:int),
      P[<<map_1035@69:1>@72:0>]((-1 + <f_map_1298@74:0>):int,<f_map_1298@74:2>:int), (
      <f_map_1298@74:0> <> 0) |- P[<f_map_1298@74:2>](<f_map_1298@74:0>:int,
                                                      <f_map_1298@74:2>:int)
      
      P[<map_1035@69:0>](<map_1035@69:0>:int), ((<map_1035@69:0> = 0) && (<<map_1035@69:1>@72:0> = <map_1035@69:0>))
      |- P[<<map_1035@69:1>@72:0>](<map_1035@69:0>:int,<<map_1035@69:1>@72:0>:int)
      
      P[<map_1035@66:0>]((1 + <map_1035@69:0>):int), ((1 + <map_1035@69:0>) <> 0)
      |- P[<map_1035@69:0>](<map_1035@69:0>:int)
      
      P[<f_main_1299@64:2>](<f_main_1299@64:0>:int,<map_1035@66:0>:int)|- P[<map_1035@66:0>](<map_1035@66:0>:int)
      
      P[<main_1037@52:0>](<f_main_1299@64:0>:int),
      P[<<zip_1032@54:2>@62:0>](<f_main_1299@64:0>:int,<f_main_1299@64:0>:int,<f_main_1299@64:2>:int)|- P[<f_main_1299@64:2>](
      <f_main_1299@64:0>:int,<f_main_1299@64:2>:int)
      
      P[<zip_1032@54:1>](<zip_1032@54:0>:int,<zip_1032@54:1>:int),
      P[<<br_zip_1303@57:3>@60:0>]((<zip_1032@54:1> = 0):bool,<zip_1032@54:0>:int,<zip_1032@54:1>:int,<<zip_1032@54:2>@62:0>:int),
      (<zip_1032@54:0> = 0)
      |- P[<<zip_1032@54:2>@62:0>](<zip_1032@54:0>:int,<zip_1032@54:1>:int,
                                   <<zip_1032@54:2>@62:0>:int)
      
      P[<br_zip_1303@57:2>](<br_zip_1303@57:0>:bool,<br_zip_1303@57:1>:int,<br_zip_1303@57:2>:int),
      ((<<br_zip_1303@57:3>@60:0> = <br_zip_1303@57:1>) && <br_zip_1303@57:0>)
      |- P[<<br_zip_1303@57:3>@60:0>](<br_zip_1303@57:0>:bool,<br_zip_1303@57:1>:int,
                                      <br_zip_1303@57:2>:int,<<br_zip_1303@57:3>@60:0>:int)
      
      P[<zip_1032@54:1>](<br_zip_1303@57:1>:int,<br_zip_1303@57:2>:int),
      ((<br_zip_1303@57:1> = 0) && (<br_zip_1303@57:0> = (<br_zip_1303@57:2> = 0)))
      |- P[<br_zip_1303@57:2>](<br_zip_1303@57:0>:bool,<br_zip_1303@57:1>:int,
                               <br_zip_1303@57:2>:int)
      
      P[<main_1037@52:0>](<zip_1032@54:1>:int), (<zip_1032@54:1> = <zip_1032@54:0>)
      |- P[<zip_1032@54:1>](<zip_1032@54:0>:int,<zip_1032@54:1>:int)
      
      P[<f_1301@50:0>](<main_1037@52:0>:int)|- P[<main_1037@52:0>](<main_1037@52:0>:int)
      
      |- P[<f_1301@50:0>](<f_1301@50:0>:int)
    call trees:
      <main_1294@47>
        <f_1301@50>
          <main_1037@52>
            <zip_1032@54>
              <br_zip_1303@57>
              </<br_zip_1303@57:3>@60>
            </<zip_1032@54:2>@62>
            <f_main_1299@64>
              <map_1035@66>
                <map_1035@69>
                </<map_1035@69:1>@72>
                <f_map_1298@74>
                </<f_map_1298@74:1>@76>
              </<map_1035@66:1>@78>
              <f_main_1300@80>
                <fail_1309@83>
    inlined horn clauses:
      P[<fail_1309@83:0>](<fail_1309@83:0>:bool)|- bot
      
      P[<<zip_1032@54:2>@62:0>](<f_main_1300@80:0>:int,<f_main_1300@80:0>:int,<f_main_1300@80:1>:int),
      P[<<map_1035@66:1>@78:0>](<f_main_1300@80:1>:int,<f_main_1300@80:3>:int),
      ((<f_main_1300@80:3> <> <f_main_1300@80:0>) && <fail_1309@83:0>) |- P[<fail_1309@83:0>](
      <fail_1309@83:0>:bool)
      
      P[<map_1035@66:0>](<map_1035@66:0>:int),
      P[<<map_1035@69:1>@72:0>]((-1 + <map_1035@66:0>):int,(-1 + <<map_1035@66:1>@78:0>):int), (
      <map_1035@66:0> <> 0) |- P[<<map_1035@66:1>@78:0>](<map_1035@66:0>:int,
                                                         <<map_1035@66:1>@78:0>:int)
      
      P[<map_1035@69:0>](<map_1035@69:0>:int), ((<map_1035@69:0> = 0) && (<<map_1035@69:1>@72:0> = <map_1035@69:0>))
      |- P[<<map_1035@69:1>@72:0>](<map_1035@69:0>:int,<<map_1035@69:1>@72:0>:int)
      
      P[<map_1035@66:0>]((1 + <map_1035@69:0>):int), ((1 + <map_1035@69:0>) <> 0)
      |- P[<map_1035@69:0>](<map_1035@69:0>:int)
      
      P[<<zip_1032@54:2>@62:0>](<f_main_1299@64:0>:int,<f_main_1299@64:0>:int,<map_1035@66:0>:int)|- P[<map_1035@66:0>](
      <map_1035@66:0>:int)
      
      P[<zip_1032@54:1>](<zip_1032@54:0>:int,<zip_1032@54:1>:int),
      ((<zip_1032@54:0> = 0) && ((<zip_1032@54:1> = 0) && (<<zip_1032@54:2>@62:0> = <zip_1032@54:0>)))
      |- P[<<zip_1032@54:2>@62:0>](<zip_1032@54:0>:int,<zip_1032@54:1>:int,
                                   <<zip_1032@54:2>@62:0>:int)
      
       (<zip_1032@54:1> = <zip_1032@54:0>) |- P[<zip_1032@54:1>](<zip_1032@54:0>:int,
                                                                 <zip_1032@54:1>:int)
    begin ParamSubstInfer.infer(6984)[3]
      
    end ParamSubstInfer.infer(6984)[3] (0.026997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(6986)[3]
      
    end RefTypeInfer.elim_coeffs(6986)[3] (0.001000 sec.)
    begin YhornInterface.solve(7321)[3]
      begin HcSolver.solve_ub(7322)[4]
        encoded:
          P[<fail_1309@83:0>](<fail_1309@83:0>:int)|- bot
          
          P[<<zip_1032@54:2>@62:0>](<f_main_1300@80:0>:int,<f_main_1300@80:0>:int,<f_main_1300@80:1>:int),
          P[<<map_1035@66:1>@78:0>](<f_main_1300@80:1>:int,<f_main_1300@80:3>:int),
          ((<f_main_1300@80:3> <> <f_main_1300@80:0>) && (<fail_1309@83:0> = 1))
          |- P[<fail_1309@83:0>](<fail_1309@83:0>:int)
          
          P[<map_1035@66:0>](<map_1035@66:0>:int),
          P[<<map_1035@69:1>@72:0>]((-1 + <map_1035@66:0>):int,(-1 + <<map_1035@66:1>@78:0>):int),
          (<map_1035@66:0> <> 0) |- P[<<map_1035@66:1>@78:0>](<map_1035@66:0>:int,
                                                              <<map_1035@66:1>@78:0>:int)
          
          P[<map_1035@69:0>](<map_1035@69:0>:int),
          ((<map_1035@69:0> = 0) && (<<map_1035@69:1>@72:0> = <map_1035@69:0>))
          |- P[<<map_1035@69:1>@72:0>](<map_1035@69:0>:int,<<map_1035@69:1>@72:0>:int)
          
          P[<map_1035@66:0>]((1 + <map_1035@69:0>):int), ((1 + <map_1035@69:0>) <> 0)
          |- P[<map_1035@69:0>](<map_1035@69:0>:int)
          
          P[<<zip_1032@54:2>@62:0>](<f_main_1299@64:0>:int,<f_main_1299@64:0>:int,<map_1035@66:0>:int)|- P[<map_1035@66:0>](
          <map_1035@66:0>:int)
          
          P[<zip_1032@54:1>](<zip_1032@54:0>:int,<zip_1032@54:1>:int),
          ((<zip_1032@54:0> = 0) && ((<zip_1032@54:1> = 0) && (<<zip_1032@54:2>@62:0> = <zip_1032@54:0>)))
          |- P[<<zip_1032@54:2>@62:0>](<zip_1032@54:0>:int,<zip_1032@54:1>:int,
                                       <<zip_1032@54:2>@62:0>:int)
          
           (<zip_1032@54:1> = <zip_1032@54:0>) |- P[<zip_1032@54:1>](<zip_1032@54:0>:int,
                                                                    <zip_1032@54:1>:int)
        input to Yhorn:
          P[<fail_1309@83:0>](<fail_1309@83:0>:int)|- bot
          
          P[<<zip_1032@54:2>@62:0>](<f_main_1300@80:0>:int,<f_main_1300@80:0>:int,<f_main_1300@80:1>:int),
          P[<<map_1035@66:1>@78:0>](<f_main_1300@80:1>:int,<f_main_1300@80:3>:int),
          ((<f_main_1300@80:3> <> <f_main_1300@80:0>) && (<fail_1309@83:0> = 1))
          |- P[<fail_1309@83:0>](<fail_1309@83:0>:int)
          
          P[<map_1035@66:0>](<map_1035@66:0>:int),
          P[<<map_1035@69:1>@72:0>](var117:int,var118:int),
          (((1 + var118) = <<map_1035@66:1>@78:0>) && (((1 + var117) = <map_1035@66:0>) && (<map_1035@66:0> <> 0)))
          |- P[<<map_1035@66:1>@78:0>](<map_1035@66:0>:int,<<map_1035@66:1>@78:0>:int)
          
          P[<map_1035@69:0>](<map_1035@69:0>:int),
          ((<<map_1035@69:1>@72:0> = <map_1035@69:0>) && (<map_1035@69:0> = 0))
          |- P[<<map_1035@69:1>@72:0>](<map_1035@69:0>:int,<<map_1035@69:1>@72:0>:int)
          
          P[<map_1035@66:0>](var119:int), ((var119 = (1 + <map_1035@69:0>)) && ((1 + <map_1035@69:0>) <> 0))
          |- P[<map_1035@69:0>](<map_1035@69:0>:int)
          
          P[<<zip_1032@54:2>@62:0>](<f_main_1299@64:0>:int,<f_main_1299@64:0>:int,<map_1035@66:0>:int)|- P[<map_1035@66:0>](
          <map_1035@66:0>:int)
          
          P[<zip_1032@54:1>](<zip_1032@54:0>:int,<zip_1032@54:1>:int),
          ((<<zip_1032@54:2>@62:0> = <zip_1032@54:0>) && ((<zip_1032@54:1> = 0) && (<zip_1032@54:0> = 0)))
          |- P[<<zip_1032@54:2>@62:0>](<zip_1032@54:0>:int,<zip_1032@54:1>:int,
                                       <<zip_1032@54:2>@62:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1309_sep_83_sep_0($420)) -> 1=0.
(($420-1=0) & ($421-$422<>0)) & (v_sep_map_1035_sep_66_sep_1_sep_78_sep_0($423,$421)) & (v_sep_zip_1032_sep_54_sep_2_sep_62_sep_0($422,$422,$423)) -> v_sep_fail_1309_sep_83_sep_0($420).
(($424<>0) & (-$424+$425+1=0) & ($426-$427+1=0)) & (v_sep_map_1035_sep_69_sep_1_sep_72_sep_0($425,$426)) & (v_sep_map_1035_sep_66_sep_0($424)) -> v_sep_map_1035_sep_66_sep_1_sep_78_sep_0($424,$427).
(($428=0) & (-$428+$429=0)) & (v_sep_map_1035_sep_69_sep_0($428)) -> v_sep_map_1035_sep_69_sep_1_sep_72_sep_0($428,$429).
(($428+1<>0) & (-$428+$430-1=0)) & (v_sep_map_1035_sep_66_sep_0($430)) -> v_sep_map_1035_sep_69_sep_0($428).
(0=0) & (v_sep_zip_1032_sep_54_sep_2_sep_62_sep_0($431,$431,$424)) -> v_sep_map_1035_sep_66_sep_0($424).
(($432=0) & ($433=0) & (-$432+$434=0)) & (v_sep_zip_1032_sep_54_sep_1($432,$433)) -> v_sep_zip_1032_sep_54_sep_2_sep_62_sep_0($432,$433,$434).
-$432+$433=0 -> v_sep_zip_1032_sep_54_sep_1($432,$433).


v_sep_fail_1309_sep_83_sep_0: X
v_sep_map_1035_sep_66_sep_0: X
v_sep_map_1035_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1035_sep_69_sep_0: X
v_sep_map_1035_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1032_sep_54_sep_1: X
v_sep_zip_1032_sep_54_sep_2_sep_62_sep_0: X
...............
v_sep_fail_1309_sep_83_sep_0: X
v_sep_map_1035_sep_66_sep_0: X
v_sep_map_1035_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1035_sep_69_sep_0: X
v_sep_map_1035_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1032_sep_54_sep_1: X
v_sep_zip_1032_sep_54_sep_2_sep_62_sep_0: X
......
v_sep_fail_1309_sep_83_sep_0: X
v_sep_map_1035_sep_66_sep_0: X
v_sep_map_1035_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1035_sep_69_sep_0: X
v_sep_map_1035_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1032_sep_54_sep_1: X
v_sep_zip_1032_sep_54_sep_2_sep_62_sep_0: X
...........
v_sep_fail_1309_sep_83_sep_0: X
v_sep_map_1035_sep_66_sep_0: X
v_sep_map_1035_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1035_sep_69_sep_0: X
v_sep_map_1035_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1032_sep_54_sep_1: X
v_sep_zip_1032_sep_54_sep_2_sep_62_sep_0: X
.............
v_sep_fail_1309_sep_83_sep_0: X
v_sep_map_1035_sep_66_sep_0: X
v_sep_map_1035_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1035_sep_69_sep_0: X
v_sep_map_1035_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1032_sep_54_sep_1: X
v_sep_zip_1032_sep_54_sep_2_sep_62_sep_0: X
...............(0=0) & (v_sep_fail_1309_sep_83_sep_0($420)) -> 1=0.
(($420-1=0) & ($421-$422<>0)) & (v_sep_map_1035_sep_66_sep_1_sep_78_sep_0($423,$421)) & (v_sep_zip_1032_sep_54_sep_2_sep_62_sep_0($422,$422,$423)) -> v_sep_fail_1309_sep_83_sep_0($420).
(($424<>0) & (-$424+$425+1=0) & ($426-$427+1=0)) & (v_sep_map_1035_sep_69_sep_1_sep_72_sep_0($425,$426)) & (v_sep_map_1035_sep_66_sep_0($424)) -> v_sep_map_1035_sep_66_sep_1_sep_78_sep_0($424,$427).
(($428=0) & (-$428+$429=0)) & (v_sep_map_1035_sep_69_sep_0($428)) -> v_sep_map_1035_sep_69_sep_1_sep_72_sep_0($428,$429).
(($428+1<>0) & (-$428+$430-1=0)) & (v_sep_map_1035_sep_66_sep_0($430)) -> v_sep_map_1035_sep_69_sep_0($428).
(0=0) & (v_sep_zip_1032_sep_54_sep_2_sep_62_sep_0($431,$431,$424)) -> v_sep_map_1035_sep_66_sep_0($424).
(($432=0) & ($433=0) & (-$432+$434=0)) & (v_sep_zip_1032_sep_54_sep_1($432,$433)) -> v_sep_zip_1032_sep_54_sep_2_sep_62_sep_0($432,$433,$434).
-$432+$433=0 -> v_sep_zip_1032_sep_54_sep_1($432,$433).

           (<zip_1032@54:1> = <zip_1032@54:0>) |- P[<zip_1032@54:1>](<zip_1032@54:0>:int,
                                                                    <zip_1032@54:1>:int)
        solution:
          P[<fail_1309@83:0>]($435:bool) = false
          P[<map_1035@66:0>]($455:int) = ($455 <= 0)
          P[<<map_1035@66:1>@78:0>]($438:int,$440:int) = (3 <= $438)
          P[<map_1035@69:0>]($458:int) = ((1 + $458) <= 0)
          P[<<map_1035@69:1>@72:0>]($450:int,$452:int) = (1 <= (2 * $450))
          P[<zip_1032@54:1>]($461:int,$463:int) = true
          P[<<zip_1032@54:2>@62:0>]($443:int,$445:int,$447:int) = ($447 <= 0)
        
      end HcSolver.solve_ub(7322)[4] (0.032995 sec.)
      begin HcSolver.check_validity(7678)[4]
        input:
          P[<fail_1309@83:0>](<fail_1309@83:0>:bool)|- bot
          
          P[<<zip_1032@54:2>@62:0>](<f_main_1300@80:0>:int,<f_main_1300@80:0>:int,<f_main_1300@80:1>:int),
          P[<<map_1035@66:1>@78:0>](<f_main_1300@80:1>:int,<f_main_1300@80:3>:int),
          ((<f_main_1300@80:3> <> <f_main_1300@80:0>) && <fail_1309@83:0>)
          |- P[<fail_1309@83:0>](<fail_1309@83:0>:bool)
          
          P[<map_1035@66:0>](<map_1035@66:0>:int),
          P[<<map_1035@69:1>@72:0>]((-1 + <map_1035@66:0>):int,(-1 + <<map_1035@66:1>@78:0>):int),
          (<map_1035@66:0> <> 0) |- P[<<map_1035@66:1>@78:0>](<map_1035@66:0>:int,
                                                              <<map_1035@66:1>@78:0>:int)
          
          P[<map_1035@69:0>](<map_1035@69:0>:int),
          ((<map_1035@69:0> = 0) && (<<map_1035@69:1>@72:0> = <map_1035@69:0>))
          |- P[<<map_1035@69:1>@72:0>](<map_1035@69:0>:int,<<map_1035@69:1>@72:0>:int)
          
          P[<map_1035@66:0>]((1 + <map_1035@69:0>):int), ((1 + <map_1035@69:0>) <> 0)
          |- P[<map_1035@69:0>](<map_1035@69:0>:int)
          
          P[<<zip_1032@54:2>@62:0>](<f_main_1299@64:0>:int,<f_main_1299@64:0>:int,<map_1035@66:0>:int)|- P[<map_1035@66:0>](
          <map_1035@66:0>:int)
          
          P[<zip_1032@54:1>](<zip_1032@54:0>:int,<zip_1032@54:1>:int),
          ((<zip_1032@54:0> = 0) && ((<zip_1032@54:1> = 0) && (<<zip_1032@54:2>@62:0> = <zip_1032@54:0>)))
          |- P[<<zip_1032@54:2>@62:0>](<zip_1032@54:0>:int,<zip_1032@54:1>:int,
                                       <<zip_1032@54:2>@62:0>:int)
          
           (<zip_1032@54:1> = <zip_1032@54:0>) |- P[<zip_1032@54:1>](<zip_1032@54:0>:int,
                                                                    <zip_1032@54:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(7678)[4] (0.002000 sec.)
      solution:
        P[<fail_1309@83:0>]($435:bool) = false
        P[<map_1035@66:0>]($455:int) = ($455 <= 0)
        P[<<map_1035@66:1>@78:0>]($438:int,$440:int) = (3 <= $438)
        P[<map_1035@69:0>]($458:int) = ((1 + $458) <= 0)
        P[<<map_1035@69:1>@72:0>]($450:int,$452:int) = (1 <= (2 * $450))
        P[<zip_1032@54:1>]($461:int,$463:int) = true
        P[<<zip_1032@54:2>@62:0>]($443:int,$445:int,$447:int) = ($447 <= 0)
    end YhornInterface.solve(7321)[3] (0.034995 sec.)
    
  end RefTypeInfer.infer_etrs(4718)[2] (0.069991 sec.)
  refinement types:
    main_1294: X
    f_1301: v1:int -> X
    main_1037: v1:int -> (v2:unit -> X) -> X
    zip_1032: v1:int -> v2:int -> (v3:{v3:int | (v3 <= 0)} -> X) -> X
    br_zip_1303: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_main_1299: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1035: v1:{v1:int | (v1 <= 0)} -> (v2:{v2:int | (3 <= v1)} -> X) -> X
    map_1035: v1:{v1:int | ((1 + v1) <= 0)} -> (v2:{v2:int | (1 <= (2 * v1))} -> X) -> X
    f_map_1298: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1300: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1309: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_zip_1305: var133:bool -> var132:int -> var131:int -> (var130:int -> X) -> X
    f_1302: var136:int -> var135:unit -> X
    f_zip_1295: var140:int -> var139:int -> var138:unit -> X
    f_zip_1296: var144:int -> var143:int -> var142:unit -> X
    f_zip_1297: var150:int -> var149:int -> (var148:int -> X) -> var146:int -> X
    fail_1307: var154:bool -> (var153:unit -> X) -> X
    fail_1308: var158:bool -> (var157:unit -> X) -> X
    loop_1030: var162:unit -> (var161:unit -> X) -> X
  abstraction types:
    main_1294: X
    f_1301: v1:int -> X
    main_1037: v1:int -> (v2:unit -> X) -> X
    zip_1032: v1:int -> v2:int -> (v3:int[v3 -> (v3 <= 0)] -> X) -> X
    br_zip_1303: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_main_1299: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1035: var163:int[var163 -> (var163 <= 0),
                         var163 -> ((1 + var163) <= 0)] ->
              (var164:int[var164 -> (3 <= var163),
                          var164 -> (1 <= (2 * var163))] -> X) -> X
    f_map_1298: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1300: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1309: v1:bool -> (v2:unit -> X) -> X
    br_zip_1305: var133:bool -> var132:int -> var131:int -> (var130:int -> X) -> X
    f_1302: var136:int -> var135:unit -> X
    f_zip_1295: var140:int -> var139:int -> var138:unit -> X
    f_zip_1296: var144:int -> var143:int -> var142:unit -> X
    f_zip_1297: var150:int -> var149:int -> (var148:int -> X) -> var146:int -> X
    fail_1307: var154:bool -> (var153:unit -> X) -> X
    fail_1308: var158:bool -> (var157:unit -> X) -> X
    loop_1030: var162:unit -> (var161:unit -> X) -> X
  
end AbsTypeInfer.refine(4717)[1] (0.073989 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1294
  main_1294 -> (rand_int f_1301)
  br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 when b_1304 -> (k_zip_1130 x_1033)
  br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 when (not b_1304) -> (fail_1307 true (f_zip_1295 x_1033 y_1034))
  br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 when b_1306 -> (fail_1308 true (f_zip_1296 x_1033 y_1034))
  br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 when (not b_1306) ->
      (zip_1032 (x_1033 - 1) (y_1034 - 1) (f_zip_1297 x_1033 y_1034 k_zip_1130))
  f_1301 x_1269 -> (main_1037 x_1269 (f_1302 x_1269))
  f_1302 x_1269 x_1266 -> end
  f_main_1299 n_1038 k_main_1227 x_1252 -> (map_1035 x_1252 (f_main_1300 n_1038 x_1252 k_main_1227))
  f_main_1300 n_1038 x_1252 k_main_1227 x_1230 when (x_1230 = n_1038) -> (k_main_1227 ())
  f_main_1300 n_1038 x_1252 k_main_1227 x_1230 when (not (x_1230 = n_1038)) -> (fail_1309 true k_main_1227)
  f_map_1298 x_1036 k_map_1195 x_1199 -> (k_map_1195 (1 + x_1199))
  f_zip_1295 x_1033 y_1034 x_1133 -> _|_
  f_zip_1296 x_1033 y_1034 x_1149 -> _|_
  f_zip_1297 x_1033 y_1034 k_zip_1130 x_1162 -> (k_zip_1130 (1 + x_1162))
  fail_1307 b k -> {fail} => (k ())
  fail_1308 b k -> {fail} => (k ())
  fail_1309 b k -> {fail} => (k ())
  loop_1030 x_1031 k_loop_1103 -> (loop_1030 x_1031 k_loop_1103)
  main_1037 n_1038 k_main_1227 -> (zip_1032 n_1038 n_1038 (f_main_1299 n_1038 k_main_1227))
  map_1035 x_1036 k_map_1195 when (x_1036 = 0) -> (k_map_1195 x_1036)
  map_1035 x_1036 k_map_1195 when (not (x_1036 = 0)) -> (map_1035 (x_1036 - 1) (f_map_1298 x_1036 k_map_1195))
  zip_1032 x_1033 y_1034 k_zip_1130 when (x_1033 = 0) -> (br_zip_1303 (y_1034 = 0) x_1033 y_1034 k_zip_1130)
  zip_1032 x_1033 y_1034 k_zip_1130 when (not (x_1033 = 0)) -> (br_zip_1305 (y_1034 = 0) x_1033 y_1034 k_zip_1130)
Types:
  main_1294 : X
  fail_1307 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1308 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1309 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1035 : (x_1:int[x_1 <= -1; x_1 <= 0] -> (x_3:int[2*x_1 >= 1; x_1 >= 3; x_3 = 0] -> X) -> X)
  zip_1032 : (x_1:int -> x_2:int[x_1 = x_2] -> (x_4:int[x_4 <= 0; x_2 >= 0 && x_1 <= 0] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1294 ... --> 
  f_1301 ... --> 
  main_1037 ... --> 
  zip_1032 [2/2] ... --> 
  br_zip_1305 [2/2] ... --> 
  zip_1032 [1/2] ... --> 
  br_zip_1303 [1/2] ... --> 
  f_zip_1297 ... --> 
  f_main_1299 ... --> 
  map_1035 [1/2] ... --> 
  f_main_1300 [2/2] ... --> 
  fail_1309 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(9509)[1]
  program:
    main_1294  | true = ((Random.int 0) f_1301)
    br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 | b_1304 = (k_zip_1130 x_1033)
    br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 | (not b_1304) = (fail_1307 true
                                                                    (f_zip_1295 x_1033
                                                                    y_1034))
    br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 | b_1306 = (fail_1308 true
                                                                    (f_zip_1296 x_1033
                                                                    y_1034))
    br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 | (not b_1306) = (zip_1032
                                                                    (
                                                                    x_1033 - 1)
                                                                    (
                                                                    y_1034 - 1)
                                                                    (
                                                                    f_zip_1297 x_1033
                                                                    y_1034
                                                                    k_zip_1130))
    f_1301 x_1269 | true = (main_1037 x_1269
                                      (f_1302 x_1269))
    f_1302 x_1269 x_1266 | true = end
    f_main_1299 n_1038 k_main_1227 x_1252 | true = (map_1035 x_1252
                                                             (f_main_1300 n_1038
                                                                    x_1252
                                                                    k_main_1227))
    f_main_1300 n_1038 x_1252 k_main_1227 x_1230 | (x_1230 = n_1038) = (
    k_main_1227 ())
    f_main_1300 n_1038 x_1252 k_main_1227 x_1230 | (not (x_1230 = n_1038)) = (
    fail_1309 true
              k_main_1227)
    f_map_1298 x_1036 k_map_1195 x_1199 | true = (k_map_1195 (1 + x_1199))
    f_zip_1295 x_1033 y_1034 x_1133 | true = bot
    f_zip_1296 x_1033 y_1034 x_1149 | true = bot
    f_zip_1297 x_1033 y_1034 k_zip_1130 x_1162 | true = (k_zip_1130 (
                                                                    1 + x_1162))
    fail_1307 b k | true = (fail ())
    fail_1308 b k | true = (fail ())
    fail_1309 b k | true = (fail ())
    loop_1030 x_1031 k_loop_1103 | true = (loop_1030 x_1031
                                                     k_loop_1103)
    main_1037 n_1038 k_main_1227 | true = (zip_1032 n_1038
                                                    n_1038
                                                    (f_main_1299 n_1038
                                                                 k_main_1227))
    map_1035 x_1036 k_map_1195 | (x_1036 = 0) = (k_map_1195 x_1036)
    map_1035 x_1036 k_map_1195 | (not (x_1036 = 0)) = (map_1035 (x_1036 - 1)
                                                                (f_map_1298 x_1036
                                                                    k_map_1195))
    zip_1032 x_1033 y_1034 k_zip_1130 | (x_1033 = 0) = (br_zip_1303 (
                                                                    y_1034 = 0)
                                                                    x_1033
                                                                    y_1034
                                                                    k_zip_1130)
    zip_1032 x_1033 y_1034 k_zip_1130 | (not (x_1033 = 0)) = (br_zip_1305 (
                                                                    y_1034 = 0)
                                                                    x_1033
                                                                    y_1034
                                                                    k_zip_1130)
    main_1294:X
    br_zip_1303:bool -> int -> int -> (int -> X) -> X
    br_zip_1305:bool -> int -> int -> (int -> X) -> X
    f_1301:int -> X
    f_1302:int -> unit -> X
    f_main_1299:int -> (unit -> X) -> int -> X
    f_main_1300:int -> int -> (unit -> X) -> int -> X
    f_map_1298:int -> (int -> X) -> int -> X
    f_zip_1295:int -> int -> unit -> X
    f_zip_1296:int -> int -> unit -> X
    f_zip_1297:int -> int -> (int -> X) -> int -> X
    fail_1307:bool -> (unit -> X) -> X
    fail_1308:bool -> (unit -> X) -> X
    fail_1309:bool -> (unit -> X) -> X
    loop_1030:unit -> (unit -> X) -> X
    main_1037:int -> (unit -> X) -> X
    map_1035:int -> (int -> X) -> X
    zip_1032:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1303,br_zip_1305,f_1301,f_1302,f_main_1299,f_main_1300,f_map_1298,f_zip_1295,f_zip_1296,f_zip_1297,loop_1030,main_1037
  counterexample: 0:0:0:1:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1301@89:0> = var167)
     [true.(<main_1037@91:0> = <f_1301@89:0>)
      [true.((<zip_1032@93:0> = <main_1037@91:0>) && (<zip_1032@93:1> = <main_1037@91:0>))
       [(not (<zip_1032@93:0> = 0)).
        ((<br_zip_1305@96:0> = (<zip_1032@93:1> = 0)) &&
         ((<br_zip_1305@96:1> = <zip_1032@93:0>) && (<br_zip_1305@96:2> = <zip_1032@93:1>)))
        [(not <br_zip_1305@96:0>).
         ((<zip_1032@99:0> = (<br_zip_1305@96:1> - 1)) && (<zip_1032@99:1> = (<br_zip_1305@96:2> - 1)))
         [(<zip_1032@99:0> = 0).
          ((<br_zip_1303@102:0> = (<zip_1032@99:1> = 0)) &&
           ((<br_zip_1303@102:1> = <zip_1032@99:0>) && (<br_zip_1303@102:2> = <zip_1032@99:1>)))
          [<br_zip_1303@102:0>.(<<br_zip_1303@102:3>@105:0> = <br_zip_1303@102:1>)
           [true.(<<zip_1032@99:2>@107:0> = <<br_zip_1303@102:3>@105:0>)
            [true.
             ((<f_zip_1297@109:0> = <br_zip_1305@96:1>) &&
              ((<f_zip_1297@109:1> = <br_zip_1305@96:2>) && (<f_zip_1297@109:3> = <<zip_1032@99:2>@107:0>)))
             [true.(<<f_zip_1297@109:2>@111:0> = (1 + <f_zip_1297@109:3>))
              [true.(<<br_zip_1305@96:3>@113:0> = <<f_zip_1297@109:2>@111:0>)
               [true.(<<zip_1032@93:2>@115:0> = <<br_zip_1305@96:3>@113:0>)
                [true.((<f_main_1299@117:0> = <main_1037@91:0>) && (<f_main_1299@117:2> = <<zip_1032@93:2>@115:0>))
                 [true.(<map_1035@119:0> = <f_main_1299@117:2>)
                  [(<map_1035@119:0> = 0).(<<map_1035@119:1>@122:0> = <map_1035@119:0>)
                   [true.
                    ((<f_main_1300@124:0> = <f_main_1299@117:0>) &&
                     ((<f_main_1300@124:1> = <f_main_1299@117:2>) && (<f_main_1300@124:3> = <<map_1035@119:1>@122:0>)))
                    [(not (<f_main_1300@124:3> = <f_main_1300@124:0>)).(<fail_1309@127:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(9510)[2]
    horn clauses:
      P[<fail_1309@127:0>](<fail_1309@127:0>:bool)|- bot
      
      P[<f_main_1300@124:3>](<f_main_1300@124:0>:int,<f_main_1300@124:1>:int,<f_main_1300@124:3>:int),
      ((<f_main_1300@124:3> <> <f_main_1300@124:0>) && <fail_1309@127:0>)
      |- P[<fail_1309@127:0>](<fail_1309@127:0>:bool)
      
      P[<f_main_1299@117:2>](<f_main_1300@124:0>:int,<f_main_1300@124:1>:int),
      P[<<map_1035@119:1>@122:0>](<f_main_1300@124:1>:int,<f_main_1300@124:3>:int)|- P[<f_main_1300@124:3>](
      <f_main_1300@124:0>:int,<f_main_1300@124:1>:int,<f_main_1300@124:3>:int)
      
      P[<map_1035@119:0>](<map_1035@119:0>:int),
      ((<map_1035@119:0> = 0) && (<<map_1035@119:1>@122:0> = <map_1035@119:0>))
      |- P[<<map_1035@119:1>@122:0>](<map_1035@119:0>:int,<<map_1035@119:1>@122:0>:int)
      
      P[<f_main_1299@117:2>](<f_main_1299@117:0>:int,<map_1035@119:0>:int)|- P[<map_1035@119:0>](<map_1035@119:0>:int)
      
      P[<main_1037@91:0>](<f_main_1299@117:0>:int),
      P[<<zip_1032@93:2>@115:0>](<f_main_1299@117:0>:int,<f_main_1299@117:0>:int,<f_main_1299@117:2>:int)|- P[<f_main_1299@117:2>](
      <f_main_1299@117:0>:int,<f_main_1299@117:2>:int)
      
      P[<zip_1032@93:1>](<zip_1032@93:0>:int,<zip_1032@93:1>:int),
      P[<<br_zip_1305@96:3>@113:0>]((<zip_1032@93:1> = 0):bool,<zip_1032@93:0>:int,<zip_1032@93:1>:int,<<zip_1032@93:2>@115:0>:int),
      (<zip_1032@93:0> <> 0)
      |- P[<<zip_1032@93:2>@115:0>](<zip_1032@93:0>:int,<zip_1032@93:1>:int,
                                    <<zip_1032@93:2>@115:0>:int)
      
      P[<br_zip_1305@96:2>](<br_zip_1305@96:0>:bool,<br_zip_1305@96:1>:int,<br_zip_1305@96:2>:int),
      P[<<f_zip_1297@109:2>@111:0>](<br_zip_1305@96:1>:int,<br_zip_1305@96:2>:int,<<br_zip_1305@96:3>@113:0>:int),
      (not <br_zip_1305@96:0>)
      |- P[<<br_zip_1305@96:3>@113:0>](<br_zip_1305@96:0>:bool,<br_zip_1305@96:1>:int,
                                       <br_zip_1305@96:2>:int,<<br_zip_1305@96:3>@113:0>:int)
      
      P[<f_zip_1297@109:3>](<f_zip_1297@109:0>:int,<f_zip_1297@109:1>:int,(
                            -1 + <<f_zip_1297@109:2>@111:0>):int)|- P[<<f_zip_1297@109:2>@111:0>](
      <f_zip_1297@109:0>:int,<f_zip_1297@109:1>:int,<<f_zip_1297@109:2>@111:0>:int)
      
      P[<br_zip_1305@96:2>](false:bool,<f_zip_1297@109:0>:int,<f_zip_1297@109:1>:int),
      P[<<zip_1032@99:2>@107:0>]((-1 + <f_zip_1297@109:0>):int,(-1 + <f_zip_1297@109:1>):int,<f_zip_1297@109:3>:int)|- P[<f_zip_1297@109:3>](
      <f_zip_1297@109:0>:int,<f_zip_1297@109:1>:int,<f_zip_1297@109:3>:int)
      
      P[<zip_1032@99:1>](<zip_1032@99:0>:int,<zip_1032@99:1>:int),
      P[<<br_zip_1303@102:3>@105:0>]((<zip_1032@99:1> = 0):bool,<zip_1032@99:0>:int,<zip_1032@99:1>:int,<<zip_1032@99:2>@107:0>:int),
      (<zip_1032@99:0> = 0)
      |- P[<<zip_1032@99:2>@107:0>](<zip_1032@99:0>:int,<zip_1032@99:1>:int,
                                    <<zip_1032@99:2>@107:0>:int)
      
      P[<br_zip_1303@102:2>](<br_zip_1303@102:0>:bool,<br_zip_1303@102:1>:int,<br_zip_1303@102:2>:int),
      ((<<br_zip_1303@102:3>@105:0> = <br_zip_1303@102:1>) && <br_zip_1303@102:0>)
      |- P[<<br_zip_1303@102:3>@105:0>](<br_zip_1303@102:0>:bool,<br_zip_1303@102:1>:int,
                                        <br_zip_1303@102:2>:int,<<br_zip_1303@102:3>@105:0>:int)
      
      P[<zip_1032@99:1>](<br_zip_1303@102:1>:int,<br_zip_1303@102:2>:int),
      ((<br_zip_1303@102:1> = 0) && (<br_zip_1303@102:0> = (<br_zip_1303@102:2> = 0)))
      |- P[<br_zip_1303@102:2>](<br_zip_1303@102:0>:bool,<br_zip_1303@102:1>:int,
                                <br_zip_1303@102:2>:int)
      
      P[<br_zip_1305@96:2>](false:bool,(1 + <zip_1032@99:0>):int,(1 + <zip_1032@99:1>):int)|- P[<zip_1032@99:1>](
      <zip_1032@99:0>:int,<zip_1032@99:1>:int)
      
      P[<zip_1032@93:1>](<br_zip_1305@96:1>:int,<br_zip_1305@96:2>:int),
      ((<br_zip_1305@96:1> <> 0) && (<br_zip_1305@96:0> = (<br_zip_1305@96:2> = 0)))
      |- P[<br_zip_1305@96:2>](<br_zip_1305@96:0>:bool,<br_zip_1305@96:1>:int,
                               <br_zip_1305@96:2>:int)
      
      P[<main_1037@91:0>](<zip_1032@93:1>:int), (<zip_1032@93:1> = <zip_1032@93:0>)
      |- P[<zip_1032@93:1>](<zip_1032@93:0>:int,<zip_1032@93:1>:int)
      
      P[<f_1301@89:0>](<main_1037@91:0>:int)|- P[<main_1037@91:0>](<main_1037@91:0>:int)
      
      |- P[<f_1301@89:0>](<f_1301@89:0>:int)
    call trees:
      <main_1294@86>
        <f_1301@89>
          <main_1037@91>
            <zip_1032@93>
              <br_zip_1305@96>
                <zip_1032@99>
                  <br_zip_1303@102>
                  </<br_zip_1303@102:3>@105>
                </<zip_1032@99:2>@107>
                <f_zip_1297@109>
                </<f_zip_1297@109:2>@111>
              </<br_zip_1305@96:3>@113>
            </<zip_1032@93:2>@115>
            <f_main_1299@117>
              <map_1035@119>
              </<map_1035@119:1>@122>
              <f_main_1300@124>
                <fail_1309@127>
    inlined horn clauses:
      P[<fail_1309@127:0>](<fail_1309@127:0>:bool)|- bot
      
      P[<<zip_1032@93:2>@115:0>](<f_main_1300@124:0>:int,<f_main_1300@124:0>:int,<f_main_1300@124:1>:int),
      P[<<map_1035@119:1>@122:0>](<f_main_1300@124:1>:int,<f_main_1300@124:3>:int),
      ((<f_main_1300@124:3> <> <f_main_1300@124:0>) && <fail_1309@127:0>)
      |- P[<fail_1309@127:0>](<fail_1309@127:0>:bool)
      
      P[<map_1035@119:0>](<map_1035@119:0>:int),
      ((<map_1035@119:0> = 0) && (<<map_1035@119:1>@122:0> = <map_1035@119:0>))
      |- P[<<map_1035@119:1>@122:0>](<map_1035@119:0>:int,<<map_1035@119:1>@122:0>:int)
      
      P[<<zip_1032@93:2>@115:0>](<f_main_1299@117:0>:int,<f_main_1299@117:0>:int,<map_1035@119:0>:int)|- P[<map_1035@119:0>](
      <map_1035@119:0>:int)
      
      P[<zip_1032@93:1>](<zip_1032@93:0>:int,<zip_1032@93:1>:int),
      P[<<zip_1032@99:2>@107:0>]((-1 + <zip_1032@93:0>):int,(-1 + <zip_1032@93:1>):int,(
                                 -1 + <<zip_1032@93:2>@115:0>):int), (
      (<zip_1032@93:0> <> 0) && (<zip_1032@93:1> <> 0))
      |- P[<<zip_1032@93:2>@115:0>](<zip_1032@93:0>:int,<zip_1032@93:1>:int,
                                    <<zip_1032@93:2>@115:0>:int)
      
      P[<zip_1032@99:1>](<zip_1032@99:0>:int,<zip_1032@99:1>:int),
      ((<zip_1032@99:0> = 0) && ((<zip_1032@99:1> = 0) && (<<zip_1032@99:2>@107:0> = <zip_1032@99:0>)))
      |- P[<<zip_1032@99:2>@107:0>](<zip_1032@99:0>:int,<zip_1032@99:1>:int,
                                    <<zip_1032@99:2>@107:0>:int)
      
      P[<zip_1032@93:1>]((1 + <zip_1032@99:0>):int,(1 + <zip_1032@99:1>):int),
      (((1 + <zip_1032@99:0>) <> 0) && ((1 + <zip_1032@99:1>) <> 0))
      |- P[<zip_1032@99:1>](<zip_1032@99:0>:int,<zip_1032@99:1>:int)
      
       (<zip_1032@93:1> = <zip_1032@93:0>) |- P[<zip_1032@93:1>](<zip_1032@93:0>:int,
                                                                 <zip_1032@93:1>:int)
    begin ParamSubstInfer.infer(12630)[3]
      
    end ParamSubstInfer.infer(12630)[3] (0.068989 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(12632)[3]
      
    end RefTypeInfer.elim_coeffs(12632)[3] (0.001999 sec.)
    begin YhornInterface.solve(13055)[3]
      begin HcSolver.solve_ub(13056)[4]
        encoded:
          P[<fail_1309@127:0>](<fail_1309@127:0>:int)|- bot
          
          P[<<zip_1032@93:2>@115:0>](<f_main_1300@124:0>:int,<f_main_1300@124:0>:int,<f_main_1300@124:1>:int),
          P[<<map_1035@119:1>@122:0>](<f_main_1300@124:1>:int,<f_main_1300@124:3>:int),
          ((<f_main_1300@124:3> <> <f_main_1300@124:0>) && (<fail_1309@127:0> = 1))
          |- P[<fail_1309@127:0>](<fail_1309@127:0>:int)
          
          P[<map_1035@119:0>](<map_1035@119:0>:int),
          ((<map_1035@119:0> = 0) && (<<map_1035@119:1>@122:0> = <map_1035@119:0>))
          |- P[<<map_1035@119:1>@122:0>](<map_1035@119:0>:int,<<map_1035@119:1>@122:0>:int)
          
          P[<<zip_1032@93:2>@115:0>](<f_main_1299@117:0>:int,<f_main_1299@117:0>:int,<map_1035@119:0>:int)|- P[<map_1035@119:0>](
          <map_1035@119:0>:int)
          
          P[<zip_1032@93:1>](<zip_1032@93:0>:int,<zip_1032@93:1>:int),
          P[<<zip_1032@99:2>@107:0>]((-1 + <zip_1032@93:0>):int,(-1 + <zip_1032@93:1>):int,(
                                     -1 + <<zip_1032@93:2>@115:0>):int),
          ((<zip_1032@93:0> <> 0) && (<zip_1032@93:1> <> 0))
          |- P[<<zip_1032@93:2>@115:0>](<zip_1032@93:0>:int,<zip_1032@93:1>:int,
                                        <<zip_1032@93:2>@115:0>:int)
          
          P[<zip_1032@99:1>](<zip_1032@99:0>:int,<zip_1032@99:1>:int),
          ((<zip_1032@99:0> = 0) && ((<zip_1032@99:1> = 0) && (<<zip_1032@99:2>@107:0> = <zip_1032@99:0>)))
          |- P[<<zip_1032@99:2>@107:0>](<zip_1032@99:0>:int,<zip_1032@99:1>:int,
                                        <<zip_1032@99:2>@107:0>:int)
          
          P[<zip_1032@93:1>]((1 + <zip_1032@99:0>):int,(1 + <zip_1032@99:1>):int),
          (((1 + <zip_1032@99:0>) <> 0) && ((1 + <zip_1032@99:1>) <> 0))
          |- P[<zip_1032@99:1>](<zip_1032@99:0>:int,<zip_1032@99:1>:int)
          
           (<zip_1032@93:1> = <zip_1032@93:0>) |- P[<zip_1032@93:1>](<zip_1032@93:0>:int,
                                                                    <zip_1032@93:1>:int)
        input to Yhorn:
          P[<fail_1309@127:0>](<fail_1309@127:0>:int)|- bot
          
          P[<<zip_1032@93:2>@115:0>](<f_main_1300@124:0>:int,<f_main_1300@124:0>:int,<f_main_1300@124:1>:int),
          P[<<map_1035@119:1>@122:0>](<f_main_1300@124:1>:int,<f_main_1300@124:3>:int),
          ((<f_main_1300@124:3> <> <f_main_1300@124:0>) && (<fail_1309@127:0> = 1))
          |- P[<fail_1309@127:0>](<fail_1309@127:0>:int)
          
          P[<map_1035@119:0>](<map_1035@119:0>:int),
          ((<<map_1035@119:1>@122:0> = <map_1035@119:0>) && (<map_1035@119:0> = 0))
          |- P[<<map_1035@119:1>@122:0>](<map_1035@119:0>:int,<<map_1035@119:1>@122:0>:int)
          
          P[<<zip_1032@93:2>@115:0>](<f_main_1299@117:0>:int,<f_main_1299@117:0>:int,<map_1035@119:0>:int)|- P[<map_1035@119:0>](
          <map_1035@119:0>:int)
          
          P[<zip_1032@93:1>](<zip_1032@93:0>:int,<zip_1032@93:1>:int),
          P[<<zip_1032@99:2>@107:0>](var168:int,var169:int,var170:int),
          (((1 + var170) = <<zip_1032@93:2>@115:0>) &&
           (((1 + var169) = <zip_1032@93:1>) &&
            (((1 + var168) = <zip_1032@93:0>) && ((<zip_1032@93:1> <> 0) && (<zip_1032@93:0> <> 0)))))
          |- P[<<zip_1032@93:2>@115:0>](<zip_1032@93:0>:int,<zip_1032@93:1>:int,
                                        <<zip_1032@93:2>@115:0>:int)
          
          P[<zip_1032@99:1>](<zip_1032@99:0>:int,<zip_1032@99:1>:int),
          ((<<zip_1032@99:2>@107:0> = <zip_1032@99:0>) && ((<zip_1032@99:1> = 0) && (<zip_1032@99:0> = 0)))
          |- P[<<zip_1032@99:2>@107:0>](<zip_1032@99:0>:int,<zip_1032@99:1>:int,
                                        <<zip_1032@99:2>@107:0>:int)
          
          P[<zip_1032@93:1>](var171:int,var172:int),
          ((var172 = (1 + <zip_1032@99:1>)) &&
           ((var171 = (1 + <zip_1032@99:0>)) && (((1 + <zip_1032@99:1>) <> 0) && ((1 + <zip_1032@99:0>) <> 0))))
          |- P[<zip_1032@99:1>](<zip_1032@99:0>:int,<zip_1032@99:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1309_sep_127_sep_0($637)) -> 1=0.
(($637-1=0) & ($638-$639<>0)) & (v_sep_map_1035_sep_119_sep_1_sep_122_sep_0($640,$638)) & (v_sep_zip_1032_sep_93_sep_2_sep_115_sep_0($639,$639,$640)) -> v_sep_fail_1309_sep_127_sep_0($637).
(($641=0) & (-$641+$642=0)) & (v_sep_map_1035_sep_119_sep_0($641)) -> v_sep_map_1035_sep_119_sep_1_sep_122_sep_0($641,$642).
(0=0) & (v_sep_zip_1032_sep_93_sep_2_sep_115_sep_0($643,$643,$641)) -> v_sep_map_1035_sep_119_sep_0($641).
(($644<>0) & ($645<>0) & (-$644+$646+1=0) & (-$645+$647+1=0) & ($648-$649+1=0)) & (v_sep_zip_1032_sep_99_sep_2_sep_107_sep_0($646,$647,$648)) & (v_sep_zip_1032_sep_93_sep_1($644,$645)) -> v_sep_zip_1032_sep_93_sep_2_sep_115_sep_0($644,$645,$649).
(($650=0) & ($651=0) & (-$650+$652=0)) & (v_sep_zip_1032_sep_99_sep_1($650,$651)) -> v_sep_zip_1032_sep_99_sep_2_sep_107_sep_0($650,$651,$652).
(($650+1<>0) & ($651+1<>0) & (-$650+$653-1=0) & (-$651+$654-1=0)) & (v_sep_zip_1032_sep_93_sep_1($653,$654)) -> v_sep_zip_1032_sep_99_sep_1($650,$651).
-$644+$645=0 -> v_sep_zip_1032_sep_93_sep_1($644,$645).


v_sep_fail_1309_sep_127_sep_0: X
v_sep_map_1035_sep_119_sep_0: X
v_sep_map_1035_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1032_sep_93_sep_1: X
v_sep_zip_1032_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1032_sep_99_sep_1: X
v_sep_zip_1032_sep_99_sep_2_sep_107_sep_0: X
.....................
v_sep_fail_1309_sep_127_sep_0: X
v_sep_map_1035_sep_119_sep_0: X
v_sep_map_1035_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1032_sep_93_sep_1: X
v_sep_zip_1032_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1032_sep_99_sep_1: X
v_sep_zip_1032_sep_99_sep_2_sep_107_sep_0: X
......
v_sep_fail_1309_sep_127_sep_0: X
v_sep_map_1035_sep_119_sep_0: X
v_sep_map_1035_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1032_sep_93_sep_1: X
v_sep_zip_1032_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1032_sep_99_sep_1: X
v_sep_zip_1032_sep_99_sep_2_sep_107_sep_0: X
...............
v_sep_fail_1309_sep_127_sep_0: X
v_sep_map_1035_sep_119_sep_0: X
v_sep_map_1035_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1032_sep_93_sep_1: X
v_sep_zip_1032_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1032_sep_99_sep_1: X
v_sep_zip_1032_sep_99_sep_2_sep_107_sep_0: X
.................
v_sep_fail_1309_sep_127_sep_0: X
v_sep_map_1035_sep_119_sep_0: X
v_sep_map_1035_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1032_sep_93_sep_1: X
v_sep_zip_1032_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1032_sep_99_sep_1: X
v_sep_zip_1032_sep_99_sep_2_sep_107_sep_0: X
.....................(0=0) & (v_sep_fail_1309_sep_127_sep_0($637)) -> 1=0.
(($637-1=0) & ($638-$639<>0)) & (v_sep_map_1035_sep_119_sep_1_sep_122_sep_0($640,$638)) & (v_sep_zip_1032_sep_93_sep_2_sep_115_sep_0($639,$639,$640)) -> v_sep_fail_1309_sep_127_sep_0($637).
(($641=0) & (-$641+$642=0)) & (v_sep_map_1035_sep_119_sep_0($641)) -> v_sep_map_1035_sep_119_sep_1_sep_122_sep_0($641,$642).
(0=0) & (v_sep_zip_1032_sep_93_sep_2_sep_115_sep_0($643,$643,$641)) -> v_sep_map_1035_sep_119_sep_0($641).
(($644<>0) & ($645<>0) & (-$644+$646+1=0) & (-$645+$647+1=0) & ($648-$649+1=0)) & (v_sep_zip_1032_sep_99_sep_2_sep_107_sep_0($646,$647,$648)) & (v_sep_zip_1032_sep_93_sep_1($644,$645)) -> v_sep_zip_1032_sep_93_sep_2_sep_115_sep_0($644,$645,$649).
(($650=0) & ($651=0) & (-$650+$652=0)) & (v_sep_zip_1032_sep_99_sep_1($650,$651)) -> v_sep_zip_1032_sep_99_sep_2_sep_107_sep_0($650,$651,$652).
(($650+1<>0) & ($651+1<>0) & (-$650+$653-1=0) & (-$651+$654-1=0)) & (v_sep_zip_1032_sep_93_sep_1($653,$654)) -> v_sep_zip_1032_sep_99_sep_1($650,$651).
-$644+$645=0 -> v_sep_zip_1032_sep_93_sep_1($644,$645).

           (<zip_1032@93:1> = <zip_1032@93:0>) |- P[<zip_1032@93:1>](<zip_1032@93:0>:int,
                                                                    <zip_1032@93:1>:int)
        solution:
          P[<fail_1309@127:0>]($655:bool) = false
          P[<map_1035@119:0>]($670:int) = (1 <= $670)
          P[<<map_1035@119:1>@122:0>]($658:int,$660:int) = ((1 + $658) <= 0)
          P[<zip_1032@93:1>]($680:int,$682:int) = true
          P[<<zip_1032@93:2>@115:0>]($663:int,$665:int,$667:int) = (1 <= $667)
          P[<zip_1032@99:1>]($685:int,$687:int) = true
          P[<<zip_1032@99:2>@107:0>]($673:int,$675:int,$677:int) = (0 <= $677)
        
      end HcSolver.solve_ub(13056)[4] (0.067990 sec.)
      begin HcSolver.check_validity(13640)[4]
        input:
          P[<fail_1309@127:0>](<fail_1309@127:0>:bool)|- bot
          
          P[<<zip_1032@93:2>@115:0>](<f_main_1300@124:0>:int,<f_main_1300@124:0>:int,<f_main_1300@124:1>:int),
          P[<<map_1035@119:1>@122:0>](<f_main_1300@124:1>:int,<f_main_1300@124:3>:int),
          ((<f_main_1300@124:3> <> <f_main_1300@124:0>) && <fail_1309@127:0>)
          |- P[<fail_1309@127:0>](<fail_1309@127:0>:bool)
          
          P[<map_1035@119:0>](<map_1035@119:0>:int),
          ((<map_1035@119:0> = 0) && (<<map_1035@119:1>@122:0> = <map_1035@119:0>))
          |- P[<<map_1035@119:1>@122:0>](<map_1035@119:0>:int,<<map_1035@119:1>@122:0>:int)
          
          P[<<zip_1032@93:2>@115:0>](<f_main_1299@117:0>:int,<f_main_1299@117:0>:int,<map_1035@119:0>:int)|- P[<map_1035@119:0>](
          <map_1035@119:0>:int)
          
          P[<zip_1032@93:1>](<zip_1032@93:0>:int,<zip_1032@93:1>:int),
          P[<<zip_1032@99:2>@107:0>]((-1 + <zip_1032@93:0>):int,(-1 + <zip_1032@93:1>):int,(
                                     -1 + <<zip_1032@93:2>@115:0>):int),
          ((<zip_1032@93:0> <> 0) && (<zip_1032@93:1> <> 0))
          |- P[<<zip_1032@93:2>@115:0>](<zip_1032@93:0>:int,<zip_1032@93:1>:int,
                                        <<zip_1032@93:2>@115:0>:int)
          
          P[<zip_1032@99:1>](<zip_1032@99:0>:int,<zip_1032@99:1>:int),
          ((<zip_1032@99:0> = 0) && ((<zip_1032@99:1> = 0) && (<<zip_1032@99:2>@107:0> = <zip_1032@99:0>)))
          |- P[<<zip_1032@99:2>@107:0>](<zip_1032@99:0>:int,<zip_1032@99:1>:int,
                                        <<zip_1032@99:2>@107:0>:int)
          
          P[<zip_1032@93:1>]((1 + <zip_1032@99:0>):int,(1 + <zip_1032@99:1>):int),
          (((1 + <zip_1032@99:0>) <> 0) && ((1 + <zip_1032@99:1>) <> 0))
          |- P[<zip_1032@99:1>](<zip_1032@99:0>:int,<zip_1032@99:1>:int)
          
           (<zip_1032@93:1> = <zip_1032@93:0>) |- P[<zip_1032@93:1>](<zip_1032@93:0>:int,
                                                                    <zip_1032@93:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(13640)[4] (0.004999 sec.)
      solution:
        P[<fail_1309@127:0>]($655:bool) = false
        P[<map_1035@119:0>]($670:int) = (1 <= $670)
        P[<<map_1035@119:1>@122:0>]($658:int,$660:int) = ((1 + $658) <= 0)
        P[<zip_1032@93:1>]($680:int,$682:int) = true
        P[<<zip_1032@93:2>@115:0>]($663:int,$665:int,$667:int) = (1 <= $667)
        P[<zip_1032@99:1>]($685:int,$687:int) = true
        P[<<zip_1032@99:2>@107:0>]($673:int,$675:int,$677:int) = (0 <= $677)
    end YhornInterface.solve(13055)[3] (0.072989 sec.)
    
  end RefTypeInfer.infer_etrs(9510)[2] (0.153976 sec.)
  refinement types:
    main_1294: X
    f_1301: v1:int -> X
    main_1037: v1:int -> (v2:unit -> X) -> X
    zip_1032: v1:int -> v2:int -> (v3:{v3:int | (1 <= v3)} -> X) -> X
    br_zip_1305: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    zip_1032: v1:int -> v2:int -> (v3:{v3:int | (0 <= v3)} -> X) -> X
    br_zip_1303: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1297: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1299: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1035: v1:{v1:int | (1 <= v1)} -> (v2:{v2:int | ((1 + v1) <= 0)} -> X) -> X
    f_main_1300: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1309: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1302: var183:int -> var182:unit -> X
    f_map_1298: var188:int -> (var187:int -> X) -> var185:int -> X
    f_zip_1295: var192:int -> var191:int -> var190:unit -> X
    f_zip_1296: var196:int -> var195:int -> var194:unit -> X
    fail_1307: var200:bool -> (var199:unit -> X) -> X
    fail_1308: var204:bool -> (var203:unit -> X) -> X
    loop_1030: var208:unit -> (var207:unit -> X) -> X
  abstraction types:
    main_1294: X
    f_1301: v1:int -> X
    main_1037: v1:int -> (v2:unit -> X) -> X
    zip_1032: var209:int -> var210:int -> (var211:int[var211 -> (1 <= var211),
                                                      var211 -> (0 <= var211)] -> X) -> X
    br_zip_1305: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    br_zip_1303: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1297: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1299: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1035: v1:int[v1 -> (1 <= v1)] -> (v2:int[v2 -> ((1 + v1) <= 0)] -> X) -> X
    f_main_1300: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1309: v1:bool -> (v2:unit -> X) -> X
    f_1302: var183:int -> var182:unit -> X
    f_map_1298: var188:int -> (var187:int -> X) -> var185:int -> X
    f_zip_1295: var192:int -> var191:int -> var190:unit -> X
    f_zip_1296: var196:int -> var195:int -> var194:unit -> X
    fail_1307: var200:bool -> (var199:unit -> X) -> X
    fail_1308: var204:bool -> (var203:unit -> X) -> X
    loop_1030: var208:unit -> (var207:unit -> X) -> X
  
end AbsTypeInfer.refine(9509)[1] (0.156976 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1294
  main_1294 -> (rand_int f_1301)
  br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 when b_1304 -> (k_zip_1130 x_1033)
  br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 when (not b_1304) -> (fail_1307 true (f_zip_1295 x_1033 y_1034))
  br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 when b_1306 -> (fail_1308 true (f_zip_1296 x_1033 y_1034))
  br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 when (not b_1306) ->
      (zip_1032 (x_1033 - 1) (y_1034 - 1) (f_zip_1297 x_1033 y_1034 k_zip_1130))
  f_1301 x_1269 -> (main_1037 x_1269 (f_1302 x_1269))
  f_1302 x_1269 x_1266 -> end
  f_main_1299 n_1038 k_main_1227 x_1252 -> (map_1035 x_1252 (f_main_1300 n_1038 x_1252 k_main_1227))
  f_main_1300 n_1038 x_1252 k_main_1227 x_1230 when (x_1230 = n_1038) -> (k_main_1227 ())
  f_main_1300 n_1038 x_1252 k_main_1227 x_1230 when (not (x_1230 = n_1038)) -> (fail_1309 true k_main_1227)
  f_map_1298 x_1036 k_map_1195 x_1199 -> (k_map_1195 (1 + x_1199))
  f_zip_1295 x_1033 y_1034 x_1133 -> _|_
  f_zip_1296 x_1033 y_1034 x_1149 -> _|_
  f_zip_1297 x_1033 y_1034 k_zip_1130 x_1162 -> (k_zip_1130 (1 + x_1162))
  fail_1307 b k -> {fail} => (k ())
  fail_1308 b k -> {fail} => (k ())
  fail_1309 b k -> {fail} => (k ())
  loop_1030 x_1031 k_loop_1103 -> (loop_1030 x_1031 k_loop_1103)
  main_1037 n_1038 k_main_1227 -> (zip_1032 n_1038 n_1038 (f_main_1299 n_1038 k_main_1227))
  map_1035 x_1036 k_map_1195 when (x_1036 = 0) -> (k_map_1195 x_1036)
  map_1035 x_1036 k_map_1195 when (not (x_1036 = 0)) -> (map_1035 (x_1036 - 1) (f_map_1298 x_1036 k_map_1195))
  zip_1032 x_1033 y_1034 k_zip_1130 when (x_1033 = 0) -> (br_zip_1303 (y_1034 = 0) x_1033 y_1034 k_zip_1130)
  zip_1032 x_1033 y_1034 k_zip_1130 when (not (x_1033 = 0)) -> (br_zip_1305 (y_1034 = 0) x_1033 y_1034 k_zip_1130)
Types:
  main_1294 : X
  fail_1307 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1308 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1309 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1035 : (x_1:int[x_1 >= 1; x_1 <= -1; x_1 <= 0] -> (x_3:int[x_1 <= -1; 2*x_1 >= 1; x_1 >= 3; x_3 = 0] -> X) -> X)
  zip_1032 : (x_1:int -> x_2:int[x_1 = x_2] -> (x_4:int[x_4 >= 0; x_4 >= 1; x_4 <= 0; x_2 >= 0 && x_1 <= 0] -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Error trace::
  main_1294 ... --> 
  f_1301 ... --> 
  main_1037 ... --> 
  zip_1032 [2/2] ... --> 
  br_zip_1305 [2/2] ... --> 
  zip_1032 [1/2] ... --> 
  br_zip_1303 [1/2] ... --> 
  f_zip_1297 ... --> 
  f_main_1299 ... --> 
  map_1035 [2/2] ... --> 
  map_1035 [1/2] ... --> 
  f_map_1298 ... --> 
  f_main_1300 [2/2] ... --> 
  fail_1309 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 0; 0; 1; 0

(4-3) Checking counter-example ... DONE!

(4-4) Discovering predicates ... 
begin AbsTypeInfer.refine(16547)[1]
  program:
    main_1294  | true = ((Random.int 0) f_1301)
    br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 | b_1304 = (k_zip_1130 x_1033)
    br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 | (not b_1304) = (fail_1307 true
                                                                    (f_zip_1295 x_1033
                                                                    y_1034))
    br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 | b_1306 = (fail_1308 true
                                                                    (f_zip_1296 x_1033
                                                                    y_1034))
    br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 | (not b_1306) = (zip_1032
                                                                    (
                                                                    x_1033 - 1)
                                                                    (
                                                                    y_1034 - 1)
                                                                    (
                                                                    f_zip_1297 x_1033
                                                                    y_1034
                                                                    k_zip_1130))
    f_1301 x_1269 | true = (main_1037 x_1269
                                      (f_1302 x_1269))
    f_1302 x_1269 x_1266 | true = end
    f_main_1299 n_1038 k_main_1227 x_1252 | true = (map_1035 x_1252
                                                             (f_main_1300 n_1038
                                                                    x_1252
                                                                    k_main_1227))
    f_main_1300 n_1038 x_1252 k_main_1227 x_1230 | (x_1230 = n_1038) = (
    k_main_1227 ())
    f_main_1300 n_1038 x_1252 k_main_1227 x_1230 | (not (x_1230 = n_1038)) = (
    fail_1309 true
              k_main_1227)
    f_map_1298 x_1036 k_map_1195 x_1199 | true = (k_map_1195 (1 + x_1199))
    f_zip_1295 x_1033 y_1034 x_1133 | true = bot
    f_zip_1296 x_1033 y_1034 x_1149 | true = bot
    f_zip_1297 x_1033 y_1034 k_zip_1130 x_1162 | true = (k_zip_1130 (
                                                                    1 + x_1162))
    fail_1307 b k | true = (fail ())
    fail_1308 b k | true = (fail ())
    fail_1309 b k | true = (fail ())
    loop_1030 x_1031 k_loop_1103 | true = (loop_1030 x_1031
                                                     k_loop_1103)
    main_1037 n_1038 k_main_1227 | true = (zip_1032 n_1038
                                                    n_1038
                                                    (f_main_1299 n_1038
                                                                 k_main_1227))
    map_1035 x_1036 k_map_1195 | (x_1036 = 0) = (k_map_1195 x_1036)
    map_1035 x_1036 k_map_1195 | (not (x_1036 = 0)) = (map_1035 (x_1036 - 1)
                                                                (f_map_1298 x_1036
                                                                    k_map_1195))
    zip_1032 x_1033 y_1034 k_zip_1130 | (x_1033 = 0) = (br_zip_1303 (
                                                                    y_1034 = 0)
                                                                    x_1033
                                                                    y_1034
                                                                    k_zip_1130)
    zip_1032 x_1033 y_1034 k_zip_1130 | (not (x_1033 = 0)) = (br_zip_1305 (
                                                                    y_1034 = 0)
                                                                    x_1033
                                                                    y_1034
                                                                    k_zip_1130)
    main_1294:X
    br_zip_1303:bool -> int -> int -> (int -> X) -> X
    br_zip_1305:bool -> int -> int -> (int -> X) -> X
    f_1301:int -> X
    f_1302:int -> unit -> X
    f_main_1299:int -> (unit -> X) -> int -> X
    f_main_1300:int -> int -> (unit -> X) -> int -> X
    f_map_1298:int -> (int -> X) -> int -> X
    f_zip_1295:int -> int -> unit -> X
    f_zip_1296:int -> int -> unit -> X
    f_zip_1297:int -> int -> (int -> X) -> int -> X
    fail_1307:bool -> (unit -> X) -> X
    fail_1308:bool -> (unit -> X) -> X
    fail_1309:bool -> (unit -> X) -> X
    loop_1030:unit -> (unit -> X) -> X
    main_1037:int -> (unit -> X) -> X
    map_1035:int -> (int -> X) -> X
    zip_1032:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1303,br_zip_1305,f_1301,f_1302,f_main_1299,f_main_1300,f_map_1298,f_zip_1295,f_zip_1296,f_zip_1297,loop_1030,main_1037
  counterexample: 0:0:0:1:1:0:0:0:0:1:0:0:1:0
  error traces:
    [true.nop(<f_1301@133:0> = var214)
     [true.(<main_1037@135:0> = <f_1301@133:0>)
      [true.((<zip_1032@137:0> = <main_1037@135:0>) && (<zip_1032@137:1> = <main_1037@135:0>))
       [(not (<zip_1032@137:0> = 0)).
        ((<br_zip_1305@140:0> = (<zip_1032@137:1> = 0)) &&
         ((<br_zip_1305@140:1> = <zip_1032@137:0>) && (<br_zip_1305@140:2> = <zip_1032@137:1>)))
        [(not <br_zip_1305@140:0>).
         ((<zip_1032@143:0> = (<br_zip_1305@140:1> - 1)) && (<zip_1032@143:1> = (<br_zip_1305@140:2> - 1)))
         [(<zip_1032@143:0> = 0).
          ((<br_zip_1303@146:0> = (<zip_1032@143:1> = 0)) &&
           ((<br_zip_1303@146:1> = <zip_1032@143:0>) && (<br_zip_1303@146:2> = <zip_1032@143:1>)))
          [<br_zip_1303@146:0>.(<<br_zip_1303@146:3>@149:0> = <br_zip_1303@146:1>)
           [true.(<<zip_1032@143:2>@151:0> = <<br_zip_1303@146:3>@149:0>)
            [true.
             ((<f_zip_1297@153:0> = <br_zip_1305@140:1>) &&
              ((<f_zip_1297@153:1> = <br_zip_1305@140:2>) && (<f_zip_1297@153:3> = <<zip_1032@143:2>@151:0>)))
             [true.(<<f_zip_1297@153:2>@155:0> = (1 + <f_zip_1297@153:3>))
              [true.(<<br_zip_1305@140:3>@157:0> = <<f_zip_1297@153:2>@155:0>)
               [true.(<<zip_1032@137:2>@159:0> = <<br_zip_1305@140:3>@157:0>)
                [true.((<f_main_1299@161:0> = <main_1037@135:0>) && (<f_main_1299@161:2> = <<zip_1032@137:2>@159:0>))
                 [true.(<map_1035@163:0> = <f_main_1299@161:2>)
                  [(not (<map_1035@163:0> = 0)).(<map_1035@166:0> = (<map_1035@163:0> - 1))
                   [(<map_1035@166:0> = 0).(<<map_1035@166:1>@169:0> = <map_1035@166:0>)
                    [true.((<f_map_1298@171:0> = <map_1035@163:0>) && (<f_map_1298@171:2> = <<map_1035@166:1>@169:0>))
                     [true.(<<f_map_1298@171:1>@173:0> = (1 + <f_map_1298@171:2>))
                      [true.(<<map_1035@163:1>@175:0> = <<f_map_1298@171:1>@173:0>)
                       [true.
                        ((<f_main_1300@177:0> = <f_main_1299@161:0>) &&
                         ((<f_main_1300@177:1> = <f_main_1299@161:2>) &&
                          (<f_main_1300@177:3> = <<map_1035@163:1>@175:0>)))
                        [(not (<f_main_1300@177:3> = <f_main_1300@177:0>)).(<fail_1309@180:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(16548)[2]
    horn clauses:
      P[<fail_1309@180:0>](<fail_1309@180:0>:bool)|- bot
      
      P[<f_main_1300@177:3>](<f_main_1300@177:0>:int,<f_main_1300@177:1>:int,<f_main_1300@177:3>:int),
      ((<f_main_1300@177:3> <> <f_main_1300@177:0>) && <fail_1309@180:0>)
      |- P[<fail_1309@180:0>](<fail_1309@180:0>:bool)
      
      P[<f_main_1299@161:2>](<f_main_1300@177:0>:int,<f_main_1300@177:1>:int),
      P[<<map_1035@163:1>@175:0>](<f_main_1300@177:1>:int,<f_main_1300@177:3>:int)|- P[<f_main_1300@177:3>](
      <f_main_1300@177:0>:int,<f_main_1300@177:1>:int,<f_main_1300@177:3>:int)
      
      P[<map_1035@163:0>](<map_1035@163:0>:int),
      P[<<f_map_1298@171:1>@173:0>](<map_1035@163:0>:int,<<map_1035@163:1>@175:0>:int), (
      <map_1035@163:0> <> 0) |- P[<<map_1035@163:1>@175:0>](<map_1035@163:0>:int,
                                                            <<map_1035@163:1>@175:0>:int)
      
      P[<f_map_1298@171:2>](<f_map_1298@171:0>:int,(-1 + <<f_map_1298@171:1>@173:0>):int)|- P[<<f_map_1298@171:1>@173:0>](
      <f_map_1298@171:0>:int,<<f_map_1298@171:1>@173:0>:int)
      
      P[<map_1035@163:0>](<f_map_1298@171:0>:int),
      P[<<map_1035@166:1>@169:0>]((-1 + <f_map_1298@171:0>):int,<f_map_1298@171:2>:int), (
      <f_map_1298@171:0> <> 0) |- P[<f_map_1298@171:2>](<f_map_1298@171:0>:int,
                                                        <f_map_1298@171:2>:int)
      
      P[<map_1035@166:0>](<map_1035@166:0>:int),
      ((<map_1035@166:0> = 0) && (<<map_1035@166:1>@169:0> = <map_1035@166:0>))
      |- P[<<map_1035@166:1>@169:0>](<map_1035@166:0>:int,<<map_1035@166:1>@169:0>:int)
      
      P[<map_1035@163:0>]((1 + <map_1035@166:0>):int), ((1 + <map_1035@166:0>) <> 0)
      |- P[<map_1035@166:0>](<map_1035@166:0>:int)
      
      P[<f_main_1299@161:2>](<f_main_1299@161:0>:int,<map_1035@163:0>:int)|- P[<map_1035@163:0>](<map_1035@163:0>:int)
      
      P[<main_1037@135:0>](<f_main_1299@161:0>:int),
      P[<<zip_1032@137:2>@159:0>](<f_main_1299@161:0>:int,<f_main_1299@161:0>:int,<f_main_1299@161:2>:int)|- P[<f_main_1299@161:2>](
      <f_main_1299@161:0>:int,<f_main_1299@161:2>:int)
      
      P[<zip_1032@137:1>](<zip_1032@137:0>:int,<zip_1032@137:1>:int),
      P[<<br_zip_1305@140:3>@157:0>]((<zip_1032@137:1> = 0):bool,<zip_1032@137:0>:int,<zip_1032@137:1>:int,<<zip_1032@137:2>@159:0>:int),
      (<zip_1032@137:0> <> 0)
      |- P[<<zip_1032@137:2>@159:0>](<zip_1032@137:0>:int,<zip_1032@137:1>:int,
                                     <<zip_1032@137:2>@159:0>:int)
      
      P[<br_zip_1305@140:2>](<br_zip_1305@140:0>:bool,<br_zip_1305@140:1>:int,<br_zip_1305@140:2>:int),
      P[<<f_zip_1297@153:2>@155:0>](<br_zip_1305@140:1>:int,<br_zip_1305@140:2>:int,<<br_zip_1305@140:3>@157:0>:int),
      (not <br_zip_1305@140:0>)
      |- P[<<br_zip_1305@140:3>@157:0>](<br_zip_1305@140:0>:bool,<br_zip_1305@140:1>:int,
                                        <br_zip_1305@140:2>:int,<<br_zip_1305@140:3>@157:0>:int)
      
      P[<f_zip_1297@153:3>](<f_zip_1297@153:0>:int,<f_zip_1297@153:1>:int,(
                            -1 + <<f_zip_1297@153:2>@155:0>):int)|- P[<<f_zip_1297@153:2>@155:0>](
      <f_zip_1297@153:0>:int,<f_zip_1297@153:1>:int,<<f_zip_1297@153:2>@155:0>:int)
      
      P[<br_zip_1305@140:2>](false:bool,<f_zip_1297@153:0>:int,<f_zip_1297@153:1>:int),
      P[<<zip_1032@143:2>@151:0>]((-1 + <f_zip_1297@153:0>):int,(-1 + <f_zip_1297@153:1>):int,<f_zip_1297@153:3>:int)|- P[<f_zip_1297@153:3>](
      <f_zip_1297@153:0>:int,<f_zip_1297@153:1>:int,<f_zip_1297@153:3>:int)
      
      P[<zip_1032@143:1>](<zip_1032@143:0>:int,<zip_1032@143:1>:int),
      P[<<br_zip_1303@146:3>@149:0>]((<zip_1032@143:1> = 0):bool,<zip_1032@143:0>:int,<zip_1032@143:1>:int,<<zip_1032@143:2>@151:0>:int),
      (<zip_1032@143:0> = 0)
      |- P[<<zip_1032@143:2>@151:0>](<zip_1032@143:0>:int,<zip_1032@143:1>:int,
                                     <<zip_1032@143:2>@151:0>:int)
      
      P[<br_zip_1303@146:2>](<br_zip_1303@146:0>:bool,<br_zip_1303@146:1>:int,<br_zip_1303@146:2>:int),
      ((<<br_zip_1303@146:3>@149:0> = <br_zip_1303@146:1>) && <br_zip_1303@146:0>)
      |- P[<<br_zip_1303@146:3>@149:0>](<br_zip_1303@146:0>:bool,<br_zip_1303@146:1>:int,
                                        <br_zip_1303@146:2>:int,<<br_zip_1303@146:3>@149:0>:int)
      
      P[<zip_1032@143:1>](<br_zip_1303@146:1>:int,<br_zip_1303@146:2>:int),
      ((<br_zip_1303@146:1> = 0) && (<br_zip_1303@146:0> = (<br_zip_1303@146:2> = 0)))
      |- P[<br_zip_1303@146:2>](<br_zip_1303@146:0>:bool,<br_zip_1303@146:1>:int,
                                <br_zip_1303@146:2>:int)
      
      P[<br_zip_1305@140:2>](false:bool,(1 + <zip_1032@143:0>):int,(1 + <zip_1032@143:1>):int)|- P[<zip_1032@143:1>](
      <zip_1032@143:0>:int,<zip_1032@143:1>:int)
      
      P[<zip_1032@137:1>](<br_zip_1305@140:1>:int,<br_zip_1305@140:2>:int),
      ((<br_zip_1305@140:1> <> 0) && (<br_zip_1305@140:0> = (<br_zip_1305@140:2> = 0)))
      |- P[<br_zip_1305@140:2>](<br_zip_1305@140:0>:bool,<br_zip_1305@140:1>:int,
                                <br_zip_1305@140:2>:int)
      
      P[<main_1037@135:0>](<zip_1032@137:1>:int), (<zip_1032@137:1> = <zip_1032@137:0>)
      |- P[<zip_1032@137:1>](<zip_1032@137:0>:int,<zip_1032@137:1>:int)
      
      P[<f_1301@133:0>](<main_1037@135:0>:int)|- P[<main_1037@135:0>](<main_1037@135:0>:int)
      
      |- P[<f_1301@133:0>](<f_1301@133:0>:int)
    call trees:
      <main_1294@130>
        <f_1301@133>
          <main_1037@135>
            <zip_1032@137>
              <br_zip_1305@140>
                <zip_1032@143>
                  <br_zip_1303@146>
                  </<br_zip_1303@146:3>@149>
                </<zip_1032@143:2>@151>
                <f_zip_1297@153>
                </<f_zip_1297@153:2>@155>
              </<br_zip_1305@140:3>@157>
            </<zip_1032@137:2>@159>
            <f_main_1299@161>
              <map_1035@163>
                <map_1035@166>
                </<map_1035@166:1>@169>
                <f_map_1298@171>
                </<f_map_1298@171:1>@173>
              </<map_1035@163:1>@175>
              <f_main_1300@177>
                <fail_1309@180>
    inlined horn clauses:
      P[<fail_1309@180:0>](<fail_1309@180:0>:bool)|- bot
      
      P[<<zip_1032@137:2>@159:0>](<f_main_1300@177:0>:int,<f_main_1300@177:0>:int,<f_main_1300@177:1>:int),
      P[<<map_1035@163:1>@175:0>](<f_main_1300@177:1>:int,<f_main_1300@177:3>:int),
      ((<f_main_1300@177:3> <> <f_main_1300@177:0>) && <fail_1309@180:0>)
      |- P[<fail_1309@180:0>](<fail_1309@180:0>:bool)
      
      P[<map_1035@163:0>](<map_1035@163:0>:int),
      P[<<map_1035@166:1>@169:0>]((-1 + <map_1035@163:0>):int,(-1 + <<map_1035@163:1>@175:0>):int),
      (<map_1035@163:0> <> 0) |- P[<<map_1035@163:1>@175:0>](<map_1035@163:0>:int,
                                                             <<map_1035@163:1>@175:0>:int)
      
      P[<map_1035@166:0>](<map_1035@166:0>:int),
      ((<map_1035@166:0> = 0) && (<<map_1035@166:1>@169:0> = <map_1035@166:0>))
      |- P[<<map_1035@166:1>@169:0>](<map_1035@166:0>:int,<<map_1035@166:1>@169:0>:int)
      
      P[<map_1035@163:0>]((1 + <map_1035@166:0>):int), ((1 + <map_1035@166:0>) <> 0)
      |- P[<map_1035@166:0>](<map_1035@166:0>:int)
      
      P[<<zip_1032@137:2>@159:0>](<f_main_1299@161:0>:int,<f_main_1299@161:0>:int,<map_1035@163:0>:int)|- P[<map_1035@163:0>](
      <map_1035@163:0>:int)
      
      P[<zip_1032@137:1>](<zip_1032@137:0>:int,<zip_1032@137:1>:int),
      P[<<zip_1032@143:2>@151:0>]((-1 + <zip_1032@137:0>):int,(-1 + <zip_1032@137:1>):int,(
                                  -1 + <<zip_1032@137:2>@159:0>):int),
      ((<zip_1032@137:0> <> 0) && (<zip_1032@137:1> <> 0))
      |- P[<<zip_1032@137:2>@159:0>](<zip_1032@137:0>:int,<zip_1032@137:1>:int,
                                     <<zip_1032@137:2>@159:0>:int)
      
      P[<zip_1032@143:1>](<zip_1032@143:0>:int,<zip_1032@143:1>:int),
      ((<zip_1032@143:0> = 0) && ((<zip_1032@143:1> = 0) && (<<zip_1032@143:2>@151:0> = <zip_1032@143:0>)))
      |- P[<<zip_1032@143:2>@151:0>](<zip_1032@143:0>:int,<zip_1032@143:1>:int,
                                     <<zip_1032@143:2>@151:0>:int)
      
      P[<zip_1032@137:1>]((1 + <zip_1032@143:0>):int,(1 + <zip_1032@143:1>):int),
      (((1 + <zip_1032@143:0>) <> 0) && ((1 + <zip_1032@143:1>) <> 0))
      |- P[<zip_1032@143:1>](<zip_1032@143:0>:int,<zip_1032@143:1>:int)
      
       (<zip_1032@137:1> = <zip_1032@137:0>) |- P[<zip_1032@137:1>](<zip_1032@137:0>:int,
                                                                    <zip_1032@137:1>:int)
    begin ParamSubstInfer.infer(20181)[3]
      
    end ParamSubstInfer.infer(20181)[3] (0.152977 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(20183)[3]
      
    end RefTypeInfer.elim_coeffs(20183)[3] (0.001000 sec.)
    begin YhornInterface.solve(20660)[3]
      begin HcSolver.solve_ub(20661)[4]
        encoded:
          P[<fail_1309@180:0>](<fail_1309@180:0>:int)|- bot
          
          P[<<zip_1032@137:2>@159:0>](<f_main_1300@177:0>:int,<f_main_1300@177:0>:int,<f_main_1300@177:1>:int),
          P[<<map_1035@163:1>@175:0>](<f_main_1300@177:1>:int,<f_main_1300@177:3>:int),
          ((<f_main_1300@177:3> <> <f_main_1300@177:0>) && (<fail_1309@180:0> = 1))
          |- P[<fail_1309@180:0>](<fail_1309@180:0>:int)
          
          P[<map_1035@163:0>](<map_1035@163:0>:int),
          P[<<map_1035@166:1>@169:0>]((-1 + <map_1035@163:0>):int,(-1 + <<map_1035@163:1>@175:0>):int),
          (<map_1035@163:0> <> 0) |- P[<<map_1035@163:1>@175:0>](<map_1035@163:0>:int,
                                                                 <<map_1035@163:1>@175:0>:int)
          
          P[<map_1035@166:0>](<map_1035@166:0>:int),
          ((<map_1035@166:0> = 0) && (<<map_1035@166:1>@169:0> = <map_1035@166:0>))
          |- P[<<map_1035@166:1>@169:0>](<map_1035@166:0>:int,<<map_1035@166:1>@169:0>:int)
          
          P[<map_1035@163:0>]((1 + <map_1035@166:0>):int), ((1 + <map_1035@166:0>) <> 0)
          |- P[<map_1035@166:0>](<map_1035@166:0>:int)
          
          P[<<zip_1032@137:2>@159:0>](<f_main_1299@161:0>:int,<f_main_1299@161:0>:int,<map_1035@163:0>:int)|- P[<map_1035@163:0>](
          <map_1035@163:0>:int)
          
          P[<zip_1032@137:1>](<zip_1032@137:0>:int,<zip_1032@137:1>:int),
          P[<<zip_1032@143:2>@151:0>]((-1 + <zip_1032@137:0>):int,(-1 + <zip_1032@137:1>):int,(
                                      -1 + <<zip_1032@137:2>@159:0>):int),
          ((<zip_1032@137:0> <> 0) && (<zip_1032@137:1> <> 0))
          |- P[<<zip_1032@137:2>@159:0>](<zip_1032@137:0>:int,<zip_1032@137:1>:int,
                                         <<zip_1032@137:2>@159:0>:int)
          
          P[<zip_1032@143:1>](<zip_1032@143:0>:int,<zip_1032@143:1>:int),
          ((<zip_1032@143:0> = 0) && ((<zip_1032@143:1> = 0) && (<<zip_1032@143:2>@151:0> = <zip_1032@143:0>)))
          |- P[<<zip_1032@143:2>@151:0>](<zip_1032@143:0>:int,<zip_1032@143:1>:int,
                                         <<zip_1032@143:2>@151:0>:int)
          
          P[<zip_1032@137:1>]((1 + <zip_1032@143:0>):int,(1 + <zip_1032@143:1>):int),
          (((1 + <zip_1032@143:0>) <> 0) && ((1 + <zip_1032@143:1>) <> 0))
          |- P[<zip_1032@143:1>](<zip_1032@143:0>:int,<zip_1032@143:1>:int)
          
           (<zip_1032@137:1> = <zip_1032@137:0>) |- P[<zip_1032@137:1>](<zip_1032@137:0>:int,
                                                                    <zip_1032@137:1>:int)
        input to Yhorn:
          P[<fail_1309@180:0>](<fail_1309@180:0>:int)|- bot
          
          P[<<zip_1032@137:2>@159:0>](<f_main_1300@177:0>:int,<f_main_1300@177:0>:int,<f_main_1300@177:1>:int),
          P[<<map_1035@163:1>@175:0>](<f_main_1300@177:1>:int,<f_main_1300@177:3>:int),
          ((<f_main_1300@177:3> <> <f_main_1300@177:0>) && (<fail_1309@180:0> = 1))
          |- P[<fail_1309@180:0>](<fail_1309@180:0>:int)
          
          P[<map_1035@163:0>](<map_1035@163:0>:int),
          P[<<map_1035@166:1>@169:0>](var215:int,var216:int),
          (((1 + var216) = <<map_1035@163:1>@175:0>) && (((1 + var215) = <map_1035@163:0>) && (<map_1035@163:0> <> 0)))
          |- P[<<map_1035@163:1>@175:0>](<map_1035@163:0>:int,<<map_1035@163:1>@175:0>:int)
          
          P[<map_1035@166:0>](<map_1035@166:0>:int),
          ((<<map_1035@166:1>@169:0> = <map_1035@166:0>) && (<map_1035@166:0> = 0))
          |- P[<<map_1035@166:1>@169:0>](<map_1035@166:0>:int,<<map_1035@166:1>@169:0>:int)
          
          P[<map_1035@163:0>](var217:int), ((var217 = (1 + <map_1035@166:0>)) && ((1 + <map_1035@166:0>) <> 0))
          |- P[<map_1035@166:0>](<map_1035@166:0>:int)
          
          P[<<zip_1032@137:2>@159:0>](<f_main_1299@161:0>:int,<f_main_1299@161:0>:int,<map_1035@163:0>:int)|- P[<map_1035@163:0>](
          <map_1035@163:0>:int)
          
          P[<zip_1032@137:1>](<zip_1032@137:0>:int,<zip_1032@137:1>:int),
          P[<<zip_1032@143:2>@151:0>](var218:int,var219:int,var220:int),
          (((1 + var220) = <<zip_1032@137:2>@159:0>) &&
           (((1 + var219) = <zip_1032@137:1>) &&
            (((1 + var218) = <zip_1032@137:0>) && ((<zip_1032@137:1> <> 0) && (<zip_1032@137:0> <> 0)))))
          |- P[<<zip_1032@137:2>@159:0>](<zip_1032@137:0>:int,<zip_1032@137:1>:int,
                                         <<zip_1032@137:2>@159:0>:int)
          
          P[<zip_1032@143:1>](<zip_1032@143:0>:int,<zip_1032@143:1>:int),
          ((<<zip_1032@143:2>@151:0> = <zip_1032@143:0>) && ((<zip_1032@143:1> = 0) && (<zip_1032@143:0> = 0)))
          |- P[<<zip_1032@143:2>@151:0>](<zip_1032@143:0>:int,<zip_1032@143:1>:int,
                                         <<zip_1032@143:2>@151:0>:int)
          
          P[<zip_1032@137:1>](var221:int,var222:int),
          ((var222 = (1 + <zip_1032@143:1>)) &&
           ((var221 = (1 + <zip_1032@143:0>)) && (((1 + <zip_1032@143:1>) <> 0) && ((1 + <zip_1032@143:0>) <> 0))))
          |- P[<zip_1032@143:1>](<zip_1032@143:0>:int,<zip_1032@143:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1309_sep_180_sep_0($1002)) -> 1=0.
(($1002-1=0) & ($1003-$1004<>0)) & (v_sep_map_1035_sep_163_sep_1_sep_175_sep_0($1005,$1003)) & (v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0($1004,$1004,$1005)) -> v_sep_fail_1309_sep_180_sep_0($1002).
(($1006<>0) & (-$1006+$1007+1=0) & ($1008-$1009+1=0)) & (v_sep_map_1035_sep_166_sep_1_sep_169_sep_0($1007,$1008)) & (v_sep_map_1035_sep_163_sep_0($1006)) -> v_sep_map_1035_sep_163_sep_1_sep_175_sep_0($1006,$1009).
(($1010=0) & (-$1010+$1011=0)) & (v_sep_map_1035_sep_166_sep_0($1010)) -> v_sep_map_1035_sep_166_sep_1_sep_169_sep_0($1010,$1011).
(($1010+1<>0) & (-$1010+$1012-1=0)) & (v_sep_map_1035_sep_163_sep_0($1012)) -> v_sep_map_1035_sep_166_sep_0($1010).
(0=0) & (v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0($1013,$1013,$1006)) -> v_sep_map_1035_sep_163_sep_0($1006).
(($1014<>0) & ($1015<>0) & (-$1014+$1016+1=0) & (-$1015+$1017+1=0) & ($1018-$1019+1=0)) & (v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0($1016,$1017,$1018)) & (v_sep_zip_1032_sep_137_sep_1($1014,$1015)) -> v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0($1014,$1015,$1019).
(($1020=0) & ($1021=0) & (-$1020+$1022=0)) & (v_sep_zip_1032_sep_143_sep_1($1020,$1021)) -> v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0($1020,$1021,$1022).
(($1020+1<>0) & ($1021+1<>0) & (-$1020+$1023-1=0) & (-$1021+$1024-1=0)) & (v_sep_zip_1032_sep_137_sep_1($1023,$1024)) -> v_sep_zip_1032_sep_143_sep_1($1020,$1021).
-$1014+$1015=0 -> v_sep_zip_1032_sep_137_sep_1($1014,$1015).


v_sep_fail_1309_sep_180_sep_0: X
v_sep_map_1035_sep_163_sep_0: X
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: X
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: X
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: X
...........................Split disj [48] 0.480926
Reconstrcut: 3 **)

v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: X
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: X
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: X
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: X
.......
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: X
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: X
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: X
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: X
.......Split conj [50] 0.483925
(Reconstrcut: 8 **)
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: X
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: X
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: X
...............
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: X
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: X
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: X
.......Split conj [53] 0.488924
(Reconstrcut: 21 ***)
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: X
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: X
...........................................
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: X
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: X
.......
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: X
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: X
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: X
...............................Split conj [63] 0.511921
(Reconstrcut: 14 ****)
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: X
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: X
...................
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: X
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: X
.......
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: X
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: X
...............................Split conj [69] 0.539917
(Reconstrcut: 25 ******)
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: X
...........................
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: X
.......
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: X
...............................Split conj [79] 0.569912
(Reconstrcut: 52 ************)
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...............................................................
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
.......
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...............................
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...............................................
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
.............................................................
v_sep_fail_1309_sep_180_sep_0: (X) | (X)
v_sep_map_1035_sep_163_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_163_sep_1_sep_175_sep_0: (X) & (X)
v_sep_map_1035_sep_166_sep_0: X
v_sep_map_1035_sep_166_sep_1_sep_169_sep_0: (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_137_sep_1: X
v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_143_sep_1: X
v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...................................................................(0=0) & (v_sep_fail_1309_sep_180_sep_0($1002)) -> 1=0.
(($1002-1=0) & ($1003-$1004<>0)) & (v_sep_map_1035_sep_163_sep_1_sep_175_sep_0($1005,$1003)) & (v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0($1004,$1004,$1005)) -> v_sep_fail_1309_sep_180_sep_0($1002).
(($1006<>0) & (-$1006+$1007+1=0) & ($1008-$1009+1=0)) & (v_sep_map_1035_sep_166_sep_1_sep_169_sep_0($1007,$1008)) & (v_sep_map_1035_sep_163_sep_0($1006)) -> v_sep_map_1035_sep_163_sep_1_sep_175_sep_0($1006,$1009).
(($1010=0) & (-$1010+$1011=0)) & (v_sep_map_1035_sep_166_sep_0($1010)) -> v_sep_map_1035_sep_166_sep_1_sep_169_sep_0($1010,$1011).
(($1010+1<>0) & (-$1010+$1012-1=0)) & (v_sep_map_1035_sep_163_sep_0($1012)) -> v_sep_map_1035_sep_166_sep_0($1010).
(0=0) & (v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0($1013,$1013,$1006)) -> v_sep_map_1035_sep_163_sep_0($1006).
(($1014<>0) & ($1015<>0) & (-$1014+$1016+1=0) & (-$1015+$1017+1=0) & ($1018-$1019+1=0)) & (v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0($1016,$1017,$1018)) & (v_sep_zip_1032_sep_137_sep_1($1014,$1015)) -> v_sep_zip_1032_sep_137_sep_2_sep_159_sep_0($1014,$1015,$1019).
(($1020=0) & ($1021=0) & (-$1020+$1022=0)) & (v_sep_zip_1032_sep_143_sep_1($1020,$1021)) -> v_sep_zip_1032_sep_143_sep_2_sep_151_sep_0($1020,$1021,$1022).
(($1020+1<>0) & ($1021+1<>0) & (-$1020+$1023-1=0) & (-$1021+$1024-1=0)) & (v_sep_zip_1032_sep_137_sep_1($1023,$1024)) -> v_sep_zip_1032_sep_143_sep_1($1020,$1021).
-$1014+$1015=0 -> v_sep_zip_1032_sep_137_sep_1($1014,$1015).

           (<zip_1032@137:1> = <zip_1032@137:0>) |- P[<zip_1032@137:1>](<zip_1032@137:0>:int,
                                                                    <zip_1032@137:1>:int)
        solution:
          P[<fail_1309@180:0>]($1025:bool) = false
          P[<map_1035@163:0>]($1045:int) = true
          P[<<map_1035@163:1>@175:0>]($1028:int,$1030:int) = (($1028 <= $1030) && ($1030 <= 1))
          P[<map_1035@166:0>]($1048:int) = true
          P[<<map_1035@166:1>@169:0>]($1040:int,$1042:int) = (($1042 <= 0) && ($1040 <= $1042))
          P[<zip_1032@137:1>]($1058:int,$1060:int) = true
          P[<<zip_1032@137:2>@159:0>]($1033:int,$1035:int,$1037:int) = ((1 <= $1033) && ($1033 <= $1037))
          P[<zip_1032@143:1>]($1063:int,$1065:int) = true
          P[<<zip_1032@143:2>@151:0>]($1051:int,$1053:int,$1055:int) =
          ((0 <= $1055) && ((0 <= $1051) && ($1051 <= $1055)))
        
      end HcSolver.solve_ub(20661)[4] (0.455931 sec.)
      begin HcSolver.check_validity(21595)[4]
        input:
          P[<fail_1309@180:0>](<fail_1309@180:0>:bool)|- bot
          
          P[<<zip_1032@137:2>@159:0>](<f_main_1300@177:0>:int,<f_main_1300@177:0>:int,<f_main_1300@177:1>:int),
          P[<<map_1035@163:1>@175:0>](<f_main_1300@177:1>:int,<f_main_1300@177:3>:int),
          ((<f_main_1300@177:3> <> <f_main_1300@177:0>) && <fail_1309@180:0>)
          |- P[<fail_1309@180:0>](<fail_1309@180:0>:bool)
          
          P[<map_1035@163:0>](<map_1035@163:0>:int),
          P[<<map_1035@166:1>@169:0>]((-1 + <map_1035@163:0>):int,(-1 + <<map_1035@163:1>@175:0>):int),
          (<map_1035@163:0> <> 0) |- P[<<map_1035@163:1>@175:0>](<map_1035@163:0>:int,
                                                                 <<map_1035@163:1>@175:0>:int)
          
          P[<map_1035@166:0>](<map_1035@166:0>:int),
          ((<map_1035@166:0> = 0) && (<<map_1035@166:1>@169:0> = <map_1035@166:0>))
          |- P[<<map_1035@166:1>@169:0>](<map_1035@166:0>:int,<<map_1035@166:1>@169:0>:int)
          
          P[<map_1035@163:0>]((1 + <map_1035@166:0>):int), ((1 + <map_1035@166:0>) <> 0)
          |- P[<map_1035@166:0>](<map_1035@166:0>:int)
          
          P[<<zip_1032@137:2>@159:0>](<f_main_1299@161:0>:int,<f_main_1299@161:0>:int,<map_1035@163:0>:int)|- P[<map_1035@163:0>](
          <map_1035@163:0>:int)
          
          P[<zip_1032@137:1>](<zip_1032@137:0>:int,<zip_1032@137:1>:int),
          P[<<zip_1032@143:2>@151:0>]((-1 + <zip_1032@137:0>):int,(-1 + <zip_1032@137:1>):int,(
                                      -1 + <<zip_1032@137:2>@159:0>):int),
          ((<zip_1032@137:0> <> 0) && (<zip_1032@137:1> <> 0))
          |- P[<<zip_1032@137:2>@159:0>](<zip_1032@137:0>:int,<zip_1032@137:1>:int,
                                         <<zip_1032@137:2>@159:0>:int)
          
          P[<zip_1032@143:1>](<zip_1032@143:0>:int,<zip_1032@143:1>:int),
          ((<zip_1032@143:0> = 0) && ((<zip_1032@143:1> = 0) && (<<zip_1032@143:2>@151:0> = <zip_1032@143:0>)))
          |- P[<<zip_1032@143:2>@151:0>](<zip_1032@143:0>:int,<zip_1032@143:1>:int,
                                         <<zip_1032@143:2>@151:0>:int)
          
          P[<zip_1032@137:1>]((1 + <zip_1032@143:0>):int,(1 + <zip_1032@143:1>):int),
          (((1 + <zip_1032@143:0>) <> 0) && ((1 + <zip_1032@143:1>) <> 0))
          |- P[<zip_1032@143:1>](<zip_1032@143:0>:int,<zip_1032@143:1>:int)
          
           (<zip_1032@137:1> = <zip_1032@137:0>) |- P[<zip_1032@137:1>](<zip_1032@137:0>:int,
                                                                    <zip_1032@137:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(21595)[4] (0.006999 sec.)
      solution:
        P[<fail_1309@180:0>]($1025:bool) = false
        P[<map_1035@163:0>]($1045:int) = true
        P[<<map_1035@163:1>@175:0>]($1028:int,$1030:int) = (($1028 <= $1030) && ($1030 <= 1))
        P[<map_1035@166:0>]($1048:int) = true
        P[<<map_1035@166:1>@169:0>]($1040:int,$1042:int) = (($1042 <= 0) && ($1040 <= $1042))
        P[<zip_1032@137:1>]($1058:int,$1060:int) = true
        P[<<zip_1032@137:2>@159:0>]($1033:int,$1035:int,$1037:int) = ((1 <= $1033) && ($1033 <= $1037))
        P[<zip_1032@143:1>]($1063:int,$1065:int) = true
        P[<<zip_1032@143:2>@151:0>]($1051:int,$1053:int,$1055:int) =
        ((0 <= $1055) && ((0 <= $1051) && ($1051 <= $1055)))
    end YhornInterface.solve(20660)[3] (0.462930 sec.)
    
  end RefTypeInfer.infer_etrs(16548)[2] (0.628904 sec.)
  refinement types:
    main_1294: X
    f_1301: v1:int -> X
    main_1037: v1:int -> (v2:unit -> X) -> X
    zip_1032: v1:int -> v2:int -> (v3:{v3:int | ((1 <= v1) && (v1 <= v3))} -> X) -> X
    br_zip_1305: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    zip_1032: v1:int -> v2:int -> (v3:{v3:int | ((0 <= v3) && ((0 <= v1) && (v1 <= v3)))} -> X) -> X
    br_zip_1303: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1297: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1299: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1035: v1:int -> (v2:{v2:int | ((v1 <= v2) && (v2 <= 1))} -> X) -> X
    map_1035: v1:int -> (v2:{v2:int | ((v2 <= 0) && (v1 <= v2))} -> X) -> X
    f_map_1298: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1300: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1309: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1302: var233:int -> var232:unit -> X
    f_zip_1295: var237:int -> var236:int -> var235:unit -> X
    f_zip_1296: var241:int -> var240:int -> var239:unit -> X
    fail_1307: var245:bool -> (var244:unit -> X) -> X
    fail_1308: var249:bool -> (var248:unit -> X) -> X
    loop_1030: var253:unit -> (var252:unit -> X) -> X
  abstraction types:
    main_1294: X
    f_1301: v1:int -> X
    main_1037: v1:int -> (v2:unit -> X) -> X
    zip_1032: var254:int ->
              var255:int ->
              (var256:int[var256 -> ((1 <= var254) && (var254 <= var256)),
                          var256 -> ((0 <= var256) && ((0 <= var254) && (var254 <= var256)))] -> X) -> X
    br_zip_1305: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    br_zip_1303: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1297: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1299: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1035: var259:int ->
              (var260:int[var260 -> ((var259 <= var260) && (var260 <= 1)),
                          var260 -> ((var260 <= 0) && (var259 <= var260))] -> X) -> X
    f_map_1298: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1300: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1309: v1:bool -> (v2:unit -> X) -> X
    f_1302: var233:int -> var232:unit -> X
    f_zip_1295: var237:int -> var236:int -> var235:unit -> X
    f_zip_1296: var241:int -> var240:int -> var239:unit -> X
    fail_1307: var245:bool -> (var244:unit -> X) -> X
    fail_1308: var249:bool -> (var248:unit -> X) -> X
    loop_1030: var253:unit -> (var252:unit -> X) -> X
  
end AbsTypeInfer.refine(16547)[1] (0.631904 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 0; 0; 1

Program with abstraction types (CEGAR-cycle 5)::
Main: main_1294
  main_1294 -> (rand_int f_1301)
  br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 when b_1304 -> (k_zip_1130 x_1033)
  br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 when (not b_1304) -> (fail_1307 true (f_zip_1295 x_1033 y_1034))
  br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 when b_1306 -> (fail_1308 true (f_zip_1296 x_1033 y_1034))
  br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 when (not b_1306) ->
      (zip_1032 (x_1033 - 1) (y_1034 - 1) (f_zip_1297 x_1033 y_1034 k_zip_1130))
  f_1301 x_1269 -> (main_1037 x_1269 (f_1302 x_1269))
  f_1302 x_1269 x_1266 -> end
  f_main_1299 n_1038 k_main_1227 x_1252 -> (map_1035 x_1252 (f_main_1300 n_1038 x_1252 k_main_1227))
  f_main_1300 n_1038 x_1252 k_main_1227 x_1230 when (x_1230 = n_1038) -> (k_main_1227 ())
  f_main_1300 n_1038 x_1252 k_main_1227 x_1230 when (not (x_1230 = n_1038)) -> (fail_1309 true k_main_1227)
  f_map_1298 x_1036 k_map_1195 x_1199 -> (k_map_1195 (1 + x_1199))
  f_zip_1295 x_1033 y_1034 x_1133 -> _|_
  f_zip_1296 x_1033 y_1034 x_1149 -> _|_
  f_zip_1297 x_1033 y_1034 k_zip_1130 x_1162 -> (k_zip_1130 (1 + x_1162))
  fail_1307 b k -> {fail} => (k ())
  fail_1308 b k -> {fail} => (k ())
  fail_1309 b k -> {fail} => (k ())
  loop_1030 x_1031 k_loop_1103 -> (loop_1030 x_1031 k_loop_1103)
  main_1037 n_1038 k_main_1227 -> (zip_1032 n_1038 n_1038 (f_main_1299 n_1038 k_main_1227))
  map_1035 x_1036 k_map_1195 when (x_1036 = 0) -> (k_map_1195 x_1036)
  map_1035 x_1036 k_map_1195 when (not (x_1036 = 0)) -> (map_1035 (x_1036 - 1) (f_map_1298 x_1036 k_map_1195))
  zip_1032 x_1033 y_1034 k_zip_1130 when (x_1033 = 0) -> (br_zip_1303 (y_1034 = 0) x_1033 y_1034 k_zip_1130)
  zip_1032 x_1033 y_1034 k_zip_1130 when (not (x_1033 = 0)) -> (br_zip_1305 (y_1034 = 0) x_1033 y_1034 k_zip_1130)
Types:
  main_1294 : X
  fail_1307 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1308 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1309 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1035 : (x_1:int[x_1 >= 1; x_1 <= -1; x_1 <= 0] ->
              (x_3:int[x_3 <= 0 && x_1 <= x_3; x_1 <= x_3 && x_3 <= 1; x_1 <= -1; 2*x_1 >= 1; x_1 >= 3; x_3 = 0] -> X) -> X)
  zip_1032 : (x_1:int ->
              x_2:int[x_1 = x_2] ->
              (x_4:int[x_4 >= 0 && x_1 >= 0 && x_1 <= x_4; x_1 >= 1 && x_1 <= x_4; 
                       x_4 >= 0; x_4 >= 1; x_4 <= 0; x_2 >= 0 && x_1 <= 0] -> X) -> X)
  
(5-1) Abstracting ... DONE!

(5-2) Checking HORS ... DONE!

Error trace::
  main_1294 ... --> 
  f_1301 ... --> 
  main_1037 ... --> 
  zip_1032 [2/2] ... --> 
  br_zip_1305 [2/2] ... --> 
  zip_1032 [1/2] ... --> 
  br_zip_1303 [1/2] ... --> 
  f_zip_1297 ... --> 
  f_main_1299 ... --> 
  map_1035 [2/2] ... --> 
  map_1035 [2/2] ... --> 
  map_1035 [1/2] ... --> 
  f_map_1298 ... --> 
  f_map_1298 ... --> 
  f_main_1300 [2/2] ... --> 
  fail_1309 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 1; 0; 0; 0; 1; 0

(5-3) Checking counter-example ... DONE!

(5-4) Discovering predicates ... 
begin AbsTypeInfer.refine(37013)[1]
  program:
    main_1294  | true = ((Random.int 0) f_1301)
    br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 | b_1304 = (k_zip_1130 x_1033)
    br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 | (not b_1304) = (fail_1307 true
                                                                    (f_zip_1295 x_1033
                                                                    y_1034))
    br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 | b_1306 = (fail_1308 true
                                                                    (f_zip_1296 x_1033
                                                                    y_1034))
    br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 | (not b_1306) = (zip_1032
                                                                    (
                                                                    x_1033 - 1)
                                                                    (
                                                                    y_1034 - 1)
                                                                    (
                                                                    f_zip_1297 x_1033
                                                                    y_1034
                                                                    k_zip_1130))
    f_1301 x_1269 | true = (main_1037 x_1269
                                      (f_1302 x_1269))
    f_1302 x_1269 x_1266 | true = end
    f_main_1299 n_1038 k_main_1227 x_1252 | true = (map_1035 x_1252
                                                             (f_main_1300 n_1038
                                                                    x_1252
                                                                    k_main_1227))
    f_main_1300 n_1038 x_1252 k_main_1227 x_1230 | (x_1230 = n_1038) = (
    k_main_1227 ())
    f_main_1300 n_1038 x_1252 k_main_1227 x_1230 | (not (x_1230 = n_1038)) = (
    fail_1309 true
              k_main_1227)
    f_map_1298 x_1036 k_map_1195 x_1199 | true = (k_map_1195 (1 + x_1199))
    f_zip_1295 x_1033 y_1034 x_1133 | true = bot
    f_zip_1296 x_1033 y_1034 x_1149 | true = bot
    f_zip_1297 x_1033 y_1034 k_zip_1130 x_1162 | true = (k_zip_1130 (
                                                                    1 + x_1162))
    fail_1307 b k | true = (fail ())
    fail_1308 b k | true = (fail ())
    fail_1309 b k | true = (fail ())
    loop_1030 x_1031 k_loop_1103 | true = (loop_1030 x_1031
                                                     k_loop_1103)
    main_1037 n_1038 k_main_1227 | true = (zip_1032 n_1038
                                                    n_1038
                                                    (f_main_1299 n_1038
                                                                 k_main_1227))
    map_1035 x_1036 k_map_1195 | (x_1036 = 0) = (k_map_1195 x_1036)
    map_1035 x_1036 k_map_1195 | (not (x_1036 = 0)) = (map_1035 (x_1036 - 1)
                                                                (f_map_1298 x_1036
                                                                    k_map_1195))
    zip_1032 x_1033 y_1034 k_zip_1130 | (x_1033 = 0) = (br_zip_1303 (
                                                                    y_1034 = 0)
                                                                    x_1033
                                                                    y_1034
                                                                    k_zip_1130)
    zip_1032 x_1033 y_1034 k_zip_1130 | (not (x_1033 = 0)) = (br_zip_1305 (
                                                                    y_1034 = 0)
                                                                    x_1033
                                                                    y_1034
                                                                    k_zip_1130)
    main_1294:X
    br_zip_1303:bool -> int -> int -> (int -> X) -> X
    br_zip_1305:bool -> int -> int -> (int -> X) -> X
    f_1301:int -> X
    f_1302:int -> unit -> X
    f_main_1299:int -> (unit -> X) -> int -> X
    f_main_1300:int -> int -> (unit -> X) -> int -> X
    f_map_1298:int -> (int -> X) -> int -> X
    f_zip_1295:int -> int -> unit -> X
    f_zip_1296:int -> int -> unit -> X
    f_zip_1297:int -> int -> (int -> X) -> int -> X
    fail_1307:bool -> (unit -> X) -> X
    fail_1308:bool -> (unit -> X) -> X
    fail_1309:bool -> (unit -> X) -> X
    loop_1030:unit -> (unit -> X) -> X
    main_1037:int -> (unit -> X) -> X
    map_1035:int -> (int -> X) -> X
    zip_1032:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1303,br_zip_1305,f_1301,f_1302,f_main_1299,f_main_1300,f_map_1298,f_zip_1295,f_zip_1296,f_zip_1297,loop_1030,main_1037
  counterexample: 0:0:0:1:1:0:0:0:0:1:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1301@186:0> = var263)
     [true.(<main_1037@188:0> = <f_1301@186:0>)
      [true.((<zip_1032@190:0> = <main_1037@188:0>) && (<zip_1032@190:1> = <main_1037@188:0>))
       [(not (<zip_1032@190:0> = 0)).
        ((<br_zip_1305@193:0> = (<zip_1032@190:1> = 0)) &&
         ((<br_zip_1305@193:1> = <zip_1032@190:0>) && (<br_zip_1305@193:2> = <zip_1032@190:1>)))
        [(not <br_zip_1305@193:0>).
         ((<zip_1032@196:0> = (<br_zip_1305@193:1> - 1)) && (<zip_1032@196:1> = (<br_zip_1305@193:2> - 1)))
         [(<zip_1032@196:0> = 0).
          ((<br_zip_1303@199:0> = (<zip_1032@196:1> = 0)) &&
           ((<br_zip_1303@199:1> = <zip_1032@196:0>) && (<br_zip_1303@199:2> = <zip_1032@196:1>)))
          [<br_zip_1303@199:0>.(<<br_zip_1303@199:3>@202:0> = <br_zip_1303@199:1>)
           [true.(<<zip_1032@196:2>@204:0> = <<br_zip_1303@199:3>@202:0>)
            [true.
             ((<f_zip_1297@206:0> = <br_zip_1305@193:1>) &&
              ((<f_zip_1297@206:1> = <br_zip_1305@193:2>) && (<f_zip_1297@206:3> = <<zip_1032@196:2>@204:0>)))
             [true.(<<f_zip_1297@206:2>@208:0> = (1 + <f_zip_1297@206:3>))
              [true.(<<br_zip_1305@193:3>@210:0> = <<f_zip_1297@206:2>@208:0>)
               [true.(<<zip_1032@190:2>@212:0> = <<br_zip_1305@193:3>@210:0>)
                [true.((<f_main_1299@214:0> = <main_1037@188:0>) && (<f_main_1299@214:2> = <<zip_1032@190:2>@212:0>))
                 [true.(<map_1035@216:0> = <f_main_1299@214:2>)
                  [(not (<map_1035@216:0> = 0)).(<map_1035@219:0> = (<map_1035@216:0> - 1))
                   [(not (<map_1035@219:0> = 0)).(<map_1035@222:0> = (<map_1035@219:0> - 1))
                    [(<map_1035@222:0> = 0).(<<map_1035@222:1>@225:0> = <map_1035@222:0>)
                     [true.((<f_map_1298@227:0> = <map_1035@219:0>) && (<f_map_1298@227:2> = <<map_1035@222:1>@225:0>))
                      [true.(<<f_map_1298@227:1>@229:0> = (1 + <f_map_1298@227:2>))
                       [true.(<<map_1035@219:1>@231:0> = <<f_map_1298@227:1>@229:0>)
                        [true.
                         ((<f_map_1298@233:0> = <map_1035@216:0>) && (<f_map_1298@233:2> = <<map_1035@219:1>@231:0>))
                         [true.(<<f_map_1298@233:1>@235:0> = (1 + <f_map_1298@233:2>))
                          [true.(<<map_1035@216:1>@237:0> = <<f_map_1298@233:1>@235:0>)
                           [true.
                            ((<f_main_1300@239:0> = <f_main_1299@214:0>) &&
                             ((<f_main_1300@239:1> = <f_main_1299@214:2>) &&
                              (<f_main_1300@239:3> = <<map_1035@216:1>@237:0>)))
                            [(not (<f_main_1300@239:3> = <f_main_1300@239:0>)).(<fail_1309@242:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(37014)[2]
    horn clauses:
      P[<fail_1309@242:0>](<fail_1309@242:0>:bool)|- bot
      
      P[<f_main_1300@239:3>](<f_main_1300@239:0>:int,<f_main_1300@239:1>:int,<f_main_1300@239:3>:int),
      ((<f_main_1300@239:3> <> <f_main_1300@239:0>) && <fail_1309@242:0>)
      |- P[<fail_1309@242:0>](<fail_1309@242:0>:bool)
      
      P[<f_main_1299@214:2>](<f_main_1300@239:0>:int,<f_main_1300@239:1>:int),
      P[<<map_1035@216:1>@237:0>](<f_main_1300@239:1>:int,<f_main_1300@239:3>:int)|- P[<f_main_1300@239:3>](
      <f_main_1300@239:0>:int,<f_main_1300@239:1>:int,<f_main_1300@239:3>:int)
      
      P[<map_1035@216:0>](<map_1035@216:0>:int),
      P[<<f_map_1298@233:1>@235:0>](<map_1035@216:0>:int,<<map_1035@216:1>@237:0>:int), (
      <map_1035@216:0> <> 0) |- P[<<map_1035@216:1>@237:0>](<map_1035@216:0>:int,
                                                            <<map_1035@216:1>@237:0>:int)
      
      P[<f_map_1298@233:2>](<f_map_1298@233:0>:int,(-1 + <<f_map_1298@233:1>@235:0>):int)|- P[<<f_map_1298@233:1>@235:0>](
      <f_map_1298@233:0>:int,<<f_map_1298@233:1>@235:0>:int)
      
      P[<map_1035@216:0>](<f_map_1298@233:0>:int),
      P[<<map_1035@219:1>@231:0>]((-1 + <f_map_1298@233:0>):int,<f_map_1298@233:2>:int), (
      <f_map_1298@233:0> <> 0) |- P[<f_map_1298@233:2>](<f_map_1298@233:0>:int,
                                                        <f_map_1298@233:2>:int)
      
      P[<map_1035@219:0>](<map_1035@219:0>:int),
      P[<<f_map_1298@227:1>@229:0>](<map_1035@219:0>:int,<<map_1035@219:1>@231:0>:int), (
      <map_1035@219:0> <> 0) |- P[<<map_1035@219:1>@231:0>](<map_1035@219:0>:int,
                                                            <<map_1035@219:1>@231:0>:int)
      
      P[<f_map_1298@227:2>](<f_map_1298@227:0>:int,(-1 + <<f_map_1298@227:1>@229:0>):int)|- P[<<f_map_1298@227:1>@229:0>](
      <f_map_1298@227:0>:int,<<f_map_1298@227:1>@229:0>:int)
      
      P[<map_1035@219:0>](<f_map_1298@227:0>:int),
      P[<<map_1035@222:1>@225:0>]((-1 + <f_map_1298@227:0>):int,<f_map_1298@227:2>:int), (
      <f_map_1298@227:0> <> 0) |- P[<f_map_1298@227:2>](<f_map_1298@227:0>:int,
                                                        <f_map_1298@227:2>:int)
      
      P[<map_1035@222:0>](<map_1035@222:0>:int),
      ((<map_1035@222:0> = 0) && (<<map_1035@222:1>@225:0> = <map_1035@222:0>))
      |- P[<<map_1035@222:1>@225:0>](<map_1035@222:0>:int,<<map_1035@222:1>@225:0>:int)
      
      P[<map_1035@219:0>]((1 + <map_1035@222:0>):int), ((1 + <map_1035@222:0>) <> 0)
      |- P[<map_1035@222:0>](<map_1035@222:0>:int)
      
      P[<map_1035@216:0>]((1 + <map_1035@219:0>):int), ((1 + <map_1035@219:0>) <> 0)
      |- P[<map_1035@219:0>](<map_1035@219:0>:int)
      
      P[<f_main_1299@214:2>](<f_main_1299@214:0>:int,<map_1035@216:0>:int)|- P[<map_1035@216:0>](<map_1035@216:0>:int)
      
      P[<main_1037@188:0>](<f_main_1299@214:0>:int),
      P[<<zip_1032@190:2>@212:0>](<f_main_1299@214:0>:int,<f_main_1299@214:0>:int,<f_main_1299@214:2>:int)|- P[<f_main_1299@214:2>](
      <f_main_1299@214:0>:int,<f_main_1299@214:2>:int)
      
      P[<zip_1032@190:1>](<zip_1032@190:0>:int,<zip_1032@190:1>:int),
      P[<<br_zip_1305@193:3>@210:0>]((<zip_1032@190:1> = 0):bool,<zip_1032@190:0>:int,<zip_1032@190:1>:int,<<zip_1032@190:2>@212:0>:int),
      (<zip_1032@190:0> <> 0)
      |- P[<<zip_1032@190:2>@212:0>](<zip_1032@190:0>:int,<zip_1032@190:1>:int,
                                     <<zip_1032@190:2>@212:0>:int)
      
      P[<br_zip_1305@193:2>](<br_zip_1305@193:0>:bool,<br_zip_1305@193:1>:int,<br_zip_1305@193:2>:int),
      P[<<f_zip_1297@206:2>@208:0>](<br_zip_1305@193:1>:int,<br_zip_1305@193:2>:int,<<br_zip_1305@193:3>@210:0>:int),
      (not <br_zip_1305@193:0>)
      |- P[<<br_zip_1305@193:3>@210:0>](<br_zip_1305@193:0>:bool,<br_zip_1305@193:1>:int,
                                        <br_zip_1305@193:2>:int,<<br_zip_1305@193:3>@210:0>:int)
      
      P[<f_zip_1297@206:3>](<f_zip_1297@206:0>:int,<f_zip_1297@206:1>:int,(
                            -1 + <<f_zip_1297@206:2>@208:0>):int)|- P[<<f_zip_1297@206:2>@208:0>](
      <f_zip_1297@206:0>:int,<f_zip_1297@206:1>:int,<<f_zip_1297@206:2>@208:0>:int)
      
      P[<br_zip_1305@193:2>](false:bool,<f_zip_1297@206:0>:int,<f_zip_1297@206:1>:int),
      P[<<zip_1032@196:2>@204:0>]((-1 + <f_zip_1297@206:0>):int,(-1 + <f_zip_1297@206:1>):int,<f_zip_1297@206:3>:int)|- P[<f_zip_1297@206:3>](
      <f_zip_1297@206:0>:int,<f_zip_1297@206:1>:int,<f_zip_1297@206:3>:int)
      
      P[<zip_1032@196:1>](<zip_1032@196:0>:int,<zip_1032@196:1>:int),
      P[<<br_zip_1303@199:3>@202:0>]((<zip_1032@196:1> = 0):bool,<zip_1032@196:0>:int,<zip_1032@196:1>:int,<<zip_1032@196:2>@204:0>:int),
      (<zip_1032@196:0> = 0)
      |- P[<<zip_1032@196:2>@204:0>](<zip_1032@196:0>:int,<zip_1032@196:1>:int,
                                     <<zip_1032@196:2>@204:0>:int)
      
      P[<br_zip_1303@199:2>](<br_zip_1303@199:0>:bool,<br_zip_1303@199:1>:int,<br_zip_1303@199:2>:int),
      ((<<br_zip_1303@199:3>@202:0> = <br_zip_1303@199:1>) && <br_zip_1303@199:0>)
      |- P[<<br_zip_1303@199:3>@202:0>](<br_zip_1303@199:0>:bool,<br_zip_1303@199:1>:int,
                                        <br_zip_1303@199:2>:int,<<br_zip_1303@199:3>@202:0>:int)
      
      P[<zip_1032@196:1>](<br_zip_1303@199:1>:int,<br_zip_1303@199:2>:int),
      ((<br_zip_1303@199:1> = 0) && (<br_zip_1303@199:0> = (<br_zip_1303@199:2> = 0)))
      |- P[<br_zip_1303@199:2>](<br_zip_1303@199:0>:bool,<br_zip_1303@199:1>:int,
                                <br_zip_1303@199:2>:int)
      
      P[<br_zip_1305@193:2>](false:bool,(1 + <zip_1032@196:0>):int,(1 + <zip_1032@196:1>):int)|- P[<zip_1032@196:1>](
      <zip_1032@196:0>:int,<zip_1032@196:1>:int)
      
      P[<zip_1032@190:1>](<br_zip_1305@193:1>:int,<br_zip_1305@193:2>:int),
      ((<br_zip_1305@193:1> <> 0) && (<br_zip_1305@193:0> = (<br_zip_1305@193:2> = 0)))
      |- P[<br_zip_1305@193:2>](<br_zip_1305@193:0>:bool,<br_zip_1305@193:1>:int,
                                <br_zip_1305@193:2>:int)
      
      P[<main_1037@188:0>](<zip_1032@190:1>:int), (<zip_1032@190:1> = <zip_1032@190:0>)
      |- P[<zip_1032@190:1>](<zip_1032@190:0>:int,<zip_1032@190:1>:int)
      
      P[<f_1301@186:0>](<main_1037@188:0>:int)|- P[<main_1037@188:0>](<main_1037@188:0>:int)
      
      |- P[<f_1301@186:0>](<f_1301@186:0>:int)
    call trees:
      <main_1294@183>
        <f_1301@186>
          <main_1037@188>
            <zip_1032@190>
              <br_zip_1305@193>
                <zip_1032@196>
                  <br_zip_1303@199>
                  </<br_zip_1303@199:3>@202>
                </<zip_1032@196:2>@204>
                <f_zip_1297@206>
                </<f_zip_1297@206:2>@208>
              </<br_zip_1305@193:3>@210>
            </<zip_1032@190:2>@212>
            <f_main_1299@214>
              <map_1035@216>
                <map_1035@219>
                  <map_1035@222>
                  </<map_1035@222:1>@225>
                  <f_map_1298@227>
                  </<f_map_1298@227:1>@229>
                </<map_1035@219:1>@231>
                <f_map_1298@233>
                </<f_map_1298@233:1>@235>
              </<map_1035@216:1>@237>
              <f_main_1300@239>
                <fail_1309@242>
    inlined horn clauses:
      P[<fail_1309@242:0>](<fail_1309@242:0>:bool)|- bot
      
      P[<<zip_1032@190:2>@212:0>](<f_main_1300@239:0>:int,<f_main_1300@239:0>:int,<f_main_1300@239:1>:int),
      P[<<map_1035@216:1>@237:0>](<f_main_1300@239:1>:int,<f_main_1300@239:3>:int),
      ((<f_main_1300@239:3> <> <f_main_1300@239:0>) && <fail_1309@242:0>)
      |- P[<fail_1309@242:0>](<fail_1309@242:0>:bool)
      
      P[<map_1035@216:0>](<map_1035@216:0>:int),
      P[<<map_1035@219:1>@231:0>]((-1 + <map_1035@216:0>):int,(-1 + <<map_1035@216:1>@237:0>):int),
      (<map_1035@216:0> <> 0) |- P[<<map_1035@216:1>@237:0>](<map_1035@216:0>:int,
                                                             <<map_1035@216:1>@237:0>:int)
      
      P[<map_1035@219:0>](<map_1035@219:0>:int),
      P[<<map_1035@222:1>@225:0>]((-1 + <map_1035@219:0>):int,(-1 + <<map_1035@219:1>@231:0>):int),
      (<map_1035@219:0> <> 0) |- P[<<map_1035@219:1>@231:0>](<map_1035@219:0>:int,
                                                             <<map_1035@219:1>@231:0>:int)
      
      P[<map_1035@222:0>](<map_1035@222:0>:int),
      ((<map_1035@222:0> = 0) && (<<map_1035@222:1>@225:0> = <map_1035@222:0>))
      |- P[<<map_1035@222:1>@225:0>](<map_1035@222:0>:int,<<map_1035@222:1>@225:0>:int)
      
      P[<map_1035@219:0>]((1 + <map_1035@222:0>):int), ((1 + <map_1035@222:0>) <> 0)
      |- P[<map_1035@222:0>](<map_1035@222:0>:int)
      
      P[<map_1035@216:0>]((1 + <map_1035@219:0>):int), ((1 + <map_1035@219:0>) <> 0)
      |- P[<map_1035@219:0>](<map_1035@219:0>:int)
      
      P[<<zip_1032@190:2>@212:0>](<f_main_1299@214:0>:int,<f_main_1299@214:0>:int,<map_1035@216:0>:int)|- P[<map_1035@216:0>](
      <map_1035@216:0>:int)
      
      P[<zip_1032@190:1>](<zip_1032@190:0>:int,<zip_1032@190:1>:int),
      P[<<zip_1032@196:2>@204:0>]((-1 + <zip_1032@190:0>):int,(-1 + <zip_1032@190:1>):int,(
                                  -1 + <<zip_1032@190:2>@212:0>):int),
      ((<zip_1032@190:0> <> 0) && (<zip_1032@190:1> <> 0))
      |- P[<<zip_1032@190:2>@212:0>](<zip_1032@190:0>:int,<zip_1032@190:1>:int,
                                     <<zip_1032@190:2>@212:0>:int)
      
      P[<zip_1032@196:1>](<zip_1032@196:0>:int,<zip_1032@196:1>:int),
      ((<zip_1032@196:0> = 0) && ((<zip_1032@196:1> = 0) && (<<zip_1032@196:2>@204:0> = <zip_1032@196:0>)))
      |- P[<<zip_1032@196:2>@204:0>](<zip_1032@196:0>:int,<zip_1032@196:1>:int,
                                     <<zip_1032@196:2>@204:0>:int)
      
      P[<zip_1032@190:1>]((1 + <zip_1032@196:0>):int,(1 + <zip_1032@196:1>):int),
      (((1 + <zip_1032@196:0>) <> 0) && ((1 + <zip_1032@196:1>) <> 0))
      |- P[<zip_1032@196:1>](<zip_1032@196:0>:int,<zip_1032@196:1>:int)
      
       (<zip_1032@190:1> = <zip_1032@190:0>) |- P[<zip_1032@190:1>](<zip_1032@190:0>:int,
                                                                    <zip_1032@190:1>:int)
    begin ParamSubstInfer.infer(41160)[3]
      
    end ParamSubstInfer.infer(41160)[3] (1.522769 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(41162)[3]
      
    end RefTypeInfer.elim_coeffs(41162)[3] (0.001999 sec.)
    begin YhornInterface.solve(41693)[3]
      begin HcSolver.solve_ub(41694)[4]
        encoded:
          P[<fail_1309@242:0>](<fail_1309@242:0>:int)|- bot
          
          P[<<zip_1032@190:2>@212:0>](<f_main_1300@239:0>:int,<f_main_1300@239:0>:int,<f_main_1300@239:1>:int),
          P[<<map_1035@216:1>@237:0>](<f_main_1300@239:1>:int,<f_main_1300@239:3>:int),
          ((<f_main_1300@239:3> <> <f_main_1300@239:0>) && (<fail_1309@242:0> = 1))
          |- P[<fail_1309@242:0>](<fail_1309@242:0>:int)
          
          P[<map_1035@216:0>](<map_1035@216:0>:int),
          P[<<map_1035@219:1>@231:0>]((-1 + <map_1035@216:0>):int,(-1 + <<map_1035@216:1>@237:0>):int),
          (<map_1035@216:0> <> 0) |- P[<<map_1035@216:1>@237:0>](<map_1035@216:0>:int,
                                                                 <<map_1035@216:1>@237:0>:int)
          
          P[<map_1035@219:0>](<map_1035@219:0>:int),
          P[<<map_1035@222:1>@225:0>]((-1 + <map_1035@219:0>):int,(-1 + <<map_1035@219:1>@231:0>):int),
          (<map_1035@219:0> <> 0) |- P[<<map_1035@219:1>@231:0>](<map_1035@219:0>:int,
                                                                 <<map_1035@219:1>@231:0>:int)
          
          P[<map_1035@222:0>](<map_1035@222:0>:int),
          ((<map_1035@222:0> = 0) && (<<map_1035@222:1>@225:0> = <map_1035@222:0>))
          |- P[<<map_1035@222:1>@225:0>](<map_1035@222:0>:int,<<map_1035@222:1>@225:0>:int)
          
          P[<map_1035@219:0>]((1 + <map_1035@222:0>):int), ((1 + <map_1035@222:0>) <> 0)
          |- P[<map_1035@222:0>](<map_1035@222:0>:int)
          
          P[<map_1035@216:0>]((1 + <map_1035@219:0>):int), ((1 + <map_1035@219:0>) <> 0)
          |- P[<map_1035@219:0>](<map_1035@219:0>:int)
          
          P[<<zip_1032@190:2>@212:0>](<f_main_1299@214:0>:int,<f_main_1299@214:0>:int,<map_1035@216:0>:int)|- P[<map_1035@216:0>](
          <map_1035@216:0>:int)
          
          P[<zip_1032@190:1>](<zip_1032@190:0>:int,<zip_1032@190:1>:int),
          P[<<zip_1032@196:2>@204:0>]((-1 + <zip_1032@190:0>):int,(-1 + <zip_1032@190:1>):int,(
                                      -1 + <<zip_1032@190:2>@212:0>):int),
          ((<zip_1032@190:0> <> 0) && (<zip_1032@190:1> <> 0))
          |- P[<<zip_1032@190:2>@212:0>](<zip_1032@190:0>:int,<zip_1032@190:1>:int,
                                         <<zip_1032@190:2>@212:0>:int)
          
          P[<zip_1032@196:1>](<zip_1032@196:0>:int,<zip_1032@196:1>:int),
          ((<zip_1032@196:0> = 0) && ((<zip_1032@196:1> = 0) && (<<zip_1032@196:2>@204:0> = <zip_1032@196:0>)))
          |- P[<<zip_1032@196:2>@204:0>](<zip_1032@196:0>:int,<zip_1032@196:1>:int,
                                         <<zip_1032@196:2>@204:0>:int)
          
          P[<zip_1032@190:1>]((1 + <zip_1032@196:0>):int,(1 + <zip_1032@196:1>):int),
          (((1 + <zip_1032@196:0>) <> 0) && ((1 + <zip_1032@196:1>) <> 0))
          |- P[<zip_1032@196:1>](<zip_1032@196:0>:int,<zip_1032@196:1>:int)
          
           (<zip_1032@190:1> = <zip_1032@190:0>) |- P[<zip_1032@190:1>](<zip_1032@190:0>:int,
                                                                    <zip_1032@190:1>:int)
        input to Yhorn:
          P[<fail_1309@242:0>](<fail_1309@242:0>:int)|- bot
          
          P[<<zip_1032@190:2>@212:0>](<f_main_1300@239:0>:int,<f_main_1300@239:0>:int,<f_main_1300@239:1>:int),
          P[<<map_1035@216:1>@237:0>](<f_main_1300@239:1>:int,<f_main_1300@239:3>:int),
          ((<f_main_1300@239:3> <> <f_main_1300@239:0>) && (<fail_1309@242:0> = 1))
          |- P[<fail_1309@242:0>](<fail_1309@242:0>:int)
          
          P[<map_1035@216:0>](<map_1035@216:0>:int),
          P[<<map_1035@219:1>@231:0>](var264:int,var265:int),
          (((1 + var265) = <<map_1035@216:1>@237:0>) && (((1 + var264) = <map_1035@216:0>) && (<map_1035@216:0> <> 0)))
          |- P[<<map_1035@216:1>@237:0>](<map_1035@216:0>:int,<<map_1035@216:1>@237:0>:int)
          
          P[<map_1035@219:0>](<map_1035@219:0>:int),
          P[<<map_1035@222:1>@225:0>](var266:int,var267:int),
          (((1 + var267) = <<map_1035@219:1>@231:0>) && (((1 + var266) = <map_1035@219:0>) && (<map_1035@219:0> <> 0)))
          |- P[<<map_1035@219:1>@231:0>](<map_1035@219:0>:int,<<map_1035@219:1>@231:0>:int)
          
          P[<map_1035@222:0>](<map_1035@222:0>:int),
          ((<<map_1035@222:1>@225:0> = <map_1035@222:0>) && (<map_1035@222:0> = 0))
          |- P[<<map_1035@222:1>@225:0>](<map_1035@222:0>:int,<<map_1035@222:1>@225:0>:int)
          
          P[<map_1035@219:0>](var268:int), ((var268 = (1 + <map_1035@222:0>)) && ((1 + <map_1035@222:0>) <> 0))
          |- P[<map_1035@222:0>](<map_1035@222:0>:int)
          
          P[<map_1035@216:0>](var269:int), ((var269 = (1 + <map_1035@219:0>)) && ((1 + <map_1035@219:0>) <> 0))
          |- P[<map_1035@219:0>](<map_1035@219:0>:int)
          
          P[<<zip_1032@190:2>@212:0>](<f_main_1299@214:0>:int,<f_main_1299@214:0>:int,<map_1035@216:0>:int)|- P[<map_1035@216:0>](
          <map_1035@216:0>:int)
          
          P[<zip_1032@190:1>](<zip_1032@190:0>:int,<zip_1032@190:1>:int),
          P[<<zip_1032@196:2>@204:0>](var270:int,var271:int,var272:int),
          (((1 + var272) = <<zip_1032@190:2>@212:0>) &&
           (((1 + var271) = <zip_1032@190:1>) &&
            (((1 + var270) = <zip_1032@190:0>) && ((<zip_1032@190:1> <> 0) && (<zip_1032@190:0> <> 0)))))
          |- P[<<zip_1032@190:2>@212:0>](<zip_1032@190:0>:int,<zip_1032@190:1>:int,
                                         <<zip_1032@190:2>@212:0>:int)
          
          P[<zip_1032@196:1>](<zip_1032@196:0>:int,<zip_1032@196:1>:int),
          ((<<zip_1032@196:2>@204:0> = <zip_1032@196:0>) && ((<zip_1032@196:1> = 0) && (<zip_1032@196:0> = 0)))
          |- P[<<zip_1032@196:2>@204:0>](<zip_1032@196:0>:int,<zip_1032@196:1>:int,
                                         <<zip_1032@196:2>@204:0>:int)
          
          P[<zip_1032@190:1>](var273:int,var274:int),
          ((var274 = (1 + <zip_1032@196:1>)) &&
           ((var273 = (1 + <zip_1032@196:0>)) && (((1 + <zip_1032@196:1>) <> 0) && ((1 + <zip_1032@196:0>) <> 0))))
          |- P[<zip_1032@196:1>](<zip_1032@196:0>:int,<zip_1032@196:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1309_sep_242_sep_0($3223)) -> 1=0.
(($3223-1=0) & ($3224-$3225<>0)) & (v_sep_map_1035_sep_216_sep_1_sep_237_sep_0($3226,$3224)) & (v_sep_zip_1032_sep_190_sep_2_sep_212_sep_0($3225,$3225,$3226)) -> v_sep_fail_1309_sep_242_sep_0($3223).
(($3227<>0) & (-$3227+$3228+1=0) & ($3229-$3230+1=0)) & (v_sep_map_1035_sep_219_sep_1_sep_231_sep_0($3228,$3229)) & (v_sep_map_1035_sep_216_sep_0($3227)) -> v_sep_map_1035_sep_216_sep_1_sep_237_sep_0($3227,$3230).
(($3231<>0) & (-$3231+$3232+1=0) & ($3233-$3234+1=0)) & (v_sep_map_1035_sep_222_sep_1_sep_225_sep_0($3232,$3233)) & (v_sep_map_1035_sep_219_sep_0($3231)) -> v_sep_map_1035_sep_219_sep_1_sep_231_sep_0($3231,$3234).
(($3235=0) & (-$3235+$3236=0)) & (v_sep_map_1035_sep_222_sep_0($3235)) -> v_sep_map_1035_sep_222_sep_1_sep_225_sep_0($3235,$3236).
(($3235+1<>0) & (-$3235+$3237-1=0)) & (v_sep_map_1035_sep_219_sep_0($3237)) -> v_sep_map_1035_sep_222_sep_0($3235).
(($3231+1<>0) & (-$3231+$3238-1=0)) & (v_sep_map_1035_sep_216_sep_0($3238)) -> v_sep_map_1035_sep_219_sep_0($3231).
(0=0) & (v_sep_zip_1032_sep_190_sep_2_sep_212_sep_0($3239,$3239,$3227)) -> v_sep_map_1035_sep_216_sep_0($3227).
(($3240<>0) & ($3241<>0) & (-$3240+$3242+1=0) & (-$3241+$3243+1=0) & ($3244-$3245+1=0)) & (v_sep_zip_1032_sep_196_sep_2_sep_204_sep_0($3242,$3243,$3244)) & (v_sep_zip_1032_sep_190_sep_1($3240,$3241)) -> v_sep_zip_1032_sep_190_sep_2_sep_212_sep_0($3240,$3241,$3245).
(($3246=0) & ($3247=0) & (-$3246+$3248=0)) & (v_sep_zip_1032_sep_196_sep_1($3246,$3247)) -> v_sep_zip_1032_sep_196_sep_2_sep_204_sep_0($3246,$3247,$3248).
(($3246+1<>0) & ($3247+1<>0) & (-$3246+$3249-1=0) & (-$3247+$3250-1=0)) & (v_sep_zip_1032_sep_190_sep_1($3249,$3250)) -> v_sep_zip_1032_sep_196_sep_1($3246,$3247).
-$3240+$3241=0 -> v_sep_zip_1032_sep_190_sep_1($3240,$3241).


v_sep_fail_1309_sep_242_sep_0: X
v_sep_map_1035_sep_216_sep_0: X
v_sep_map_1035_sep_216_sep_1_sep_237_sep_0: X
v_sep_map_1035_sep_219_sep_0: X
v_sep_map_1035_sep_219_sep_1_sep_231_sep_0: X
v_sep_map_1035_sep_222_sep_0: X
v_sep_map_1035_sep_222_sep_1_sep_225_sep_0: X
v_sep_zip_1032_sep_190_sep_1: X
v_sep_zip_1032_sep_190_sep_2_sep_212_sep_0: X
v_sep_zip_1032_sep_196_sep_1: X
v_sep_zip_1032_sep_196_sep_2_sep_204_sep_0: X
.................................
v_sep_fail_1309_sep_242_sep_0: X
v_sep_map_1035_sep_216_sep_0: X
v_sep_map_1035_sep_216_sep_1_sep_237_sep_0: X
v_sep_map_1035_sep_219_sep_0: X
v_sep_map_1035_sep_219_sep_1_sep_231_sep_0: X
v_sep_map_1035_sep_222_sep_0: X
v_sep_map_1035_sep_222_sep_1_sep_225_sep_0: X
v_sep_zip_1032_sep_190_sep_1: X
v_sep_zip_1032_sep_190_sep_2_sep_212_sep_0: X
v_sep_zip_1032_sep_196_sep_1: X
v_sep_zip_1032_sep_196_sep_2_sep_204_sep_0: X
......
v_sep_fail_1309_sep_242_sep_0: X
v_sep_map_1035_sep_216_sep_0: X
v_sep_map_1035_sep_216_sep_1_sep_237_sep_0: X
v_sep_map_1035_sep_219_sep_0: X
v_sep_map_1035_sep_219_sep_1_sep_231_sep_0: X
v_sep_map_1035_sep_222_sep_0: X
v_sep_map_1035_sep_222_sep_1_sep_225_sep_0: X
v_sep_zip_1032_sep_190_sep_1: X
v_sep_zip_1032_sep_190_sep_2_sep_212_sep_0: X
v_sep_zip_1032_sep_196_sep_1: X
v_sep_zip_1032_sep_196_sep_2_sep_204_sep_0: X
..................
v_sep_fail_1309_sep_242_sep_0: X
v_sep_map_1035_sep_216_sep_0: X
v_sep_map_1035_sep_216_sep_1_sep_237_sep_0: X
v_sep_map_1035_sep_219_sep_0: X
v_sep_map_1035_sep_219_sep_1_sep_231_sep_0: X
v_sep_map_1035_sep_222_sep_0: X
v_sep_map_1035_sep_222_sep_1_sep_225_sep_0: X
v_sep_zip_1032_sep_190_sep_1: X
v_sep_zip_1032_sep_190_sep_2_sep_212_sep_0: X
v_sep_zip_1032_sep_196_sep_1: X
v_sep_zip_1032_sep_196_sep_2_sep_204_sep_0: X
........................
v_sep_fail_1309_sep_242_sep_0: X
v_sep_map_1035_sep_216_sep_0: X
v_sep_map_1035_sep_216_sep_1_sep_237_sep_0: X
v_sep_map_1035_sep_219_sep_0: X
v_sep_map_1035_sep_219_sep_1_sep_231_sep_0: X
v_sep_map_1035_sep_222_sep_0: X
v_sep_map_1035_sep_222_sep_1_sep_225_sep_0: X
v_sep_zip_1032_sep_190_sep_1: X
v_sep_zip_1032_sep_190_sep_2_sep_212_sep_0: X
v_sep_zip_1032_sep_196_sep_1: X
v_sep_zip_1032_sep_196_sep_2_sep_204_sep_0: X
...............................
v_sep_fail_1309_sep_242_sep_0: X
v_sep_map_1035_sep_216_sep_0: X
v_sep_map_1035_sep_216_sep_1_sep_237_sep_0: X
v_sep_map_1035_sep_219_sep_0: X
v_sep_map_1035_sep_219_sep_1_sep_231_sep_0: X
v_sep_map_1035_sep_222_sep_0: X
v_sep_map_1035_sep_222_sep_1_sep_225_sep_0: X
v_sep_zip_1032_sep_190_sep_1: X
v_sep_zip_1032_sep_190_sep_2_sep_212_sep_0: X
v_sep_zip_1032_sep_196_sep_1: X
v_sep_zip_1032_sep_196_sep_2_sep_204_sep_0: X
.................................(0=0) & (v_sep_fail_1309_sep_242_sep_0($3223)) -> 1=0.
(($3223-1=0) & ($3224-$3225<>0)) & (v_sep_map_1035_sep_216_sep_1_sep_237_sep_0($3226,$3224)) & (v_sep_zip_1032_sep_190_sep_2_sep_212_sep_0($3225,$3225,$3226)) -> v_sep_fail_1309_sep_242_sep_0($3223).
(($3227<>0) & (-$3227+$3228+1=0) & ($3229-$3230+1=0)) & (v_sep_map_1035_sep_219_sep_1_sep_231_sep_0($3228,$3229)) & (v_sep_map_1035_sep_216_sep_0($3227)) -> v_sep_map_1035_sep_216_sep_1_sep_237_sep_0($3227,$3230).
(($3231<>0) & (-$3231+$3232+1=0) & ($3233-$3234+1=0)) & (v_sep_map_1035_sep_222_sep_1_sep_225_sep_0($3232,$3233)) & (v_sep_map_1035_sep_219_sep_0($3231)) -> v_sep_map_1035_sep_219_sep_1_sep_231_sep_0($3231,$3234).
(($3235=0) & (-$3235+$3236=0)) & (v_sep_map_1035_sep_222_sep_0($3235)) -> v_sep_map_1035_sep_222_sep_1_sep_225_sep_0($3235,$3236).
(($3235+1<>0) & (-$3235+$3237-1=0)) & (v_sep_map_1035_sep_219_sep_0($3237)) -> v_sep_map_1035_sep_222_sep_0($3235).
(($3231+1<>0) & (-$3231+$3238-1=0)) & (v_sep_map_1035_sep_216_sep_0($3238)) -> v_sep_map_1035_sep_219_sep_0($3231).
(0=0) & (v_sep_zip_1032_sep_190_sep_2_sep_212_sep_0($3239,$3239,$3227)) -> v_sep_map_1035_sep_216_sep_0($3227).
(($3240<>0) & ($3241<>0) & (-$3240+$3242+1=0) & (-$3241+$3243+1=0) & ($3244-$3245+1=0)) & (v_sep_zip_1032_sep_196_sep_2_sep_204_sep_0($3242,$3243,$3244)) & (v_sep_zip_1032_sep_190_sep_1($3240,$3241)) -> v_sep_zip_1032_sep_190_sep_2_sep_212_sep_0($3240,$3241,$3245).
(($3246=0) & ($3247=0) & (-$3246+$3248=0)) & (v_sep_zip_1032_sep_196_sep_1($3246,$3247)) -> v_sep_zip_1032_sep_196_sep_2_sep_204_sep_0($3246,$3247,$3248).
(($3246+1<>0) & ($3247+1<>0) & (-$3246+$3249-1=0) & (-$3247+$3250-1=0)) & (v_sep_zip_1032_sep_190_sep_1($3249,$3250)) -> v_sep_zip_1032_sep_196_sep_1($3246,$3247).
-$3240+$3241=0 -> v_sep_zip_1032_sep_190_sep_1($3240,$3241).

           (<zip_1032@190:1> = <zip_1032@190:0>) |- P[<zip_1032@190:1>](<zip_1032@190:0>:int,
                                                                    <zip_1032@190:1>:int)
        solution:
          P[<fail_1309@242:0>]($3251:bool) = false
          P[<map_1035@216:0>]($3271:int) = ($3271 <= 1)
          P[<<map_1035@216:1>@237:0>]($3254:int,$3256:int) = (5 <= $3254)
          P[<map_1035@219:0>]($3279:int) = ($3279 <= 0)
          P[<<map_1035@219:1>@231:0>]($3266:int,$3268:int) = (2 <= $3266)
          P[<map_1035@222:0>]($3282:int) = ((1 + $3282) <= 0)
          P[<<map_1035@222:1>@225:0>]($3274:int,$3276:int) = (1 <= (3 * $3274))
          P[<zip_1032@190:1>]($3292:int,$3294:int) = true
          P[<<zip_1032@190:2>@212:0>]($3259:int,$3261:int,$3263:int) = ($3263 <= 1)
          P[<zip_1032@196:1>]($3297:int,$3299:int) = true
          P[<<zip_1032@196:2>@204:0>]($3285:int,$3287:int,$3289:int) = ($3289 <= 0)
        
      end HcSolver.solve_ub(41694)[4] (2.668595 sec.)
      begin HcSolver.check_validity(42587)[4]
        input:
          P[<fail_1309@242:0>](<fail_1309@242:0>:bool)|- bot
          
          P[<<zip_1032@190:2>@212:0>](<f_main_1300@239:0>:int,<f_main_1300@239:0>:int,<f_main_1300@239:1>:int),
          P[<<map_1035@216:1>@237:0>](<f_main_1300@239:1>:int,<f_main_1300@239:3>:int),
          ((<f_main_1300@239:3> <> <f_main_1300@239:0>) && <fail_1309@242:0>)
          |- P[<fail_1309@242:0>](<fail_1309@242:0>:bool)
          
          P[<map_1035@216:0>](<map_1035@216:0>:int),
          P[<<map_1035@219:1>@231:0>]((-1 + <map_1035@216:0>):int,(-1 + <<map_1035@216:1>@237:0>):int),
          (<map_1035@216:0> <> 0) |- P[<<map_1035@216:1>@237:0>](<map_1035@216:0>:int,
                                                                 <<map_1035@216:1>@237:0>:int)
          
          P[<map_1035@219:0>](<map_1035@219:0>:int),
          P[<<map_1035@222:1>@225:0>]((-1 + <map_1035@219:0>):int,(-1 + <<map_1035@219:1>@231:0>):int),
          (<map_1035@219:0> <> 0) |- P[<<map_1035@219:1>@231:0>](<map_1035@219:0>:int,
                                                                 <<map_1035@219:1>@231:0>:int)
          
          P[<map_1035@222:0>](<map_1035@222:0>:int),
          ((<map_1035@222:0> = 0) && (<<map_1035@222:1>@225:0> = <map_1035@222:0>))
          |- P[<<map_1035@222:1>@225:0>](<map_1035@222:0>:int,<<map_1035@222:1>@225:0>:int)
          
          P[<map_1035@219:0>]((1 + <map_1035@222:0>):int), ((1 + <map_1035@222:0>) <> 0)
          |- P[<map_1035@222:0>](<map_1035@222:0>:int)
          
          P[<map_1035@216:0>]((1 + <map_1035@219:0>):int), ((1 + <map_1035@219:0>) <> 0)
          |- P[<map_1035@219:0>](<map_1035@219:0>:int)
          
          P[<<zip_1032@190:2>@212:0>](<f_main_1299@214:0>:int,<f_main_1299@214:0>:int,<map_1035@216:0>:int)|- P[<map_1035@216:0>](
          <map_1035@216:0>:int)
          
          P[<zip_1032@190:1>](<zip_1032@190:0>:int,<zip_1032@190:1>:int),
          P[<<zip_1032@196:2>@204:0>]((-1 + <zip_1032@190:0>):int,(-1 + <zip_1032@190:1>):int,(
                                      -1 + <<zip_1032@190:2>@212:0>):int),
          ((<zip_1032@190:0> <> 0) && (<zip_1032@190:1> <> 0))
          |- P[<<zip_1032@190:2>@212:0>](<zip_1032@190:0>:int,<zip_1032@190:1>:int,
                                         <<zip_1032@190:2>@212:0>:int)
          
          P[<zip_1032@196:1>](<zip_1032@196:0>:int,<zip_1032@196:1>:int),
          ((<zip_1032@196:0> = 0) && ((<zip_1032@196:1> = 0) && (<<zip_1032@196:2>@204:0> = <zip_1032@196:0>)))
          |- P[<<zip_1032@196:2>@204:0>](<zip_1032@196:0>:int,<zip_1032@196:1>:int,
                                         <<zip_1032@196:2>@204:0>:int)
          
          P[<zip_1032@190:1>]((1 + <zip_1032@196:0>):int,(1 + <zip_1032@196:1>):int),
          (((1 + <zip_1032@196:0>) <> 0) && ((1 + <zip_1032@196:1>) <> 0))
          |- P[<zip_1032@196:1>](<zip_1032@196:0>:int,<zip_1032@196:1>:int)
          
           (<zip_1032@190:1> = <zip_1032@190:0>) |- P[<zip_1032@190:1>](<zip_1032@190:0>:int,
                                                                    <zip_1032@190:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(42587)[4] (0.003999 sec.)
      solution:
        P[<fail_1309@242:0>]($3251:bool) = false
        P[<map_1035@216:0>]($3271:int) = ($3271 <= 1)
        P[<<map_1035@216:1>@237:0>]($3254:int,$3256:int) = (5 <= $3254)
        P[<map_1035@219:0>]($3279:int) = ($3279 <= 0)
        P[<<map_1035@219:1>@231:0>]($3266:int,$3268:int) = (2 <= $3266)
        P[<map_1035@222:0>]($3282:int) = ((1 + $3282) <= 0)
        P[<<map_1035@222:1>@225:0>]($3274:int,$3276:int) = (1 <= (3 * $3274))
        P[<zip_1032@190:1>]($3292:int,$3294:int) = true
        P[<<zip_1032@190:2>@212:0>]($3259:int,$3261:int,$3263:int) = ($3263 <= 1)
        P[<zip_1032@196:1>]($3297:int,$3299:int) = true
        P[<<zip_1032@196:2>@204:0>]($3285:int,$3287:int,$3289:int) = ($3289 <= 0)
    end YhornInterface.solve(41693)[3] (2.672594 sec.)
    
  end RefTypeInfer.infer_etrs(37014)[2] (4.217359 sec.)
  refinement types:
    main_1294: X
    f_1301: v1:int -> X
    main_1037: v1:int -> (v2:unit -> X) -> X
    zip_1032: v1:int -> v2:int -> (v3:{v3:int | (v3 <= 1)} -> X) -> X
    br_zip_1305: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    zip_1032: v1:int -> v2:int -> (v3:{v3:int | (v3 <= 0)} -> X) -> X
    br_zip_1303: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1297: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1299: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1035: v1:{v1:int | (v1 <= 1)} -> (v2:{v2:int | (5 <= v1)} -> X) -> X
    map_1035: v1:{v1:int | (v1 <= 0)} -> (v2:{v2:int | (2 <= v1)} -> X) -> X
    map_1035: v1:{v1:int | ((1 + v1) <= 0)} -> (v2:{v2:int | (1 <= (3 * v1))} -> X) -> X
    f_map_1298: v1:int -> (v2:int -> X) -> v4:int -> X
    f_map_1298: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1300: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1309: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1302: var285:int -> var284:unit -> X
    f_zip_1295: var289:int -> var288:int -> var287:unit -> X
    f_zip_1296: var293:int -> var292:int -> var291:unit -> X
    fail_1307: var297:bool -> (var296:unit -> X) -> X
    fail_1308: var301:bool -> (var300:unit -> X) -> X
    loop_1030: var305:unit -> (var304:unit -> X) -> X
  abstraction types:
    main_1294: X
    f_1301: v1:int -> X
    main_1037: v1:int -> (v2:unit -> X) -> X
    zip_1032: var306:int -> var307:int -> (var308:int[var308 -> (var308 <= 1),
                                                      var308 -> (var308 <= 0)] -> X) -> X
    br_zip_1305: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    br_zip_1303: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1297: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1299: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1035: var315:int[var315 -> (var315 <= 1),
                         var315 -> (var315 <= 0),
                         var315 -> ((1 + var315) <= 0)] ->
              (var316:int[var316 -> (5 <= var315),
                          var316 -> (2 <= var315),
                          var316 -> (1 <= (3 * var315))] -> X) -> X
    f_map_1298: var319:int -> (var320:int -> X) -> var322:int -> X
    f_main_1300: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1309: v1:bool -> (v2:unit -> X) -> X
    f_1302: var285:int -> var284:unit -> X
    f_zip_1295: var289:int -> var288:int -> var287:unit -> X
    f_zip_1296: var293:int -> var292:int -> var291:unit -> X
    fail_1307: var297:bool -> (var296:unit -> X) -> X
    fail_1308: var301:bool -> (var300:unit -> X) -> X
    loop_1030: var305:unit -> (var304:unit -> X) -> X
  
end AbsTypeInfer.refine(37013)[1] (4.250354 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 6)::
Main: main_1294
  main_1294 -> (rand_int f_1301)
  br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 when b_1304 -> (k_zip_1130 x_1033)
  br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 when (not b_1304) -> (fail_1307 true (f_zip_1295 x_1033 y_1034))
  br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 when b_1306 -> (fail_1308 true (f_zip_1296 x_1033 y_1034))
  br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 when (not b_1306) ->
      (zip_1032 (x_1033 - 1) (y_1034 - 1) (f_zip_1297 x_1033 y_1034 k_zip_1130))
  f_1301 x_1269 -> (main_1037 x_1269 (f_1302 x_1269))
  f_1302 x_1269 x_1266 -> end
  f_main_1299 n_1038 k_main_1227 x_1252 -> (map_1035 x_1252 (f_main_1300 n_1038 x_1252 k_main_1227))
  f_main_1300 n_1038 x_1252 k_main_1227 x_1230 when (x_1230 = n_1038) -> (k_main_1227 ())
  f_main_1300 n_1038 x_1252 k_main_1227 x_1230 when (not (x_1230 = n_1038)) -> (fail_1309 true k_main_1227)
  f_map_1298 x_1036 k_map_1195 x_1199 -> (k_map_1195 (1 + x_1199))
  f_zip_1295 x_1033 y_1034 x_1133 -> _|_
  f_zip_1296 x_1033 y_1034 x_1149 -> _|_
  f_zip_1297 x_1033 y_1034 k_zip_1130 x_1162 -> (k_zip_1130 (1 + x_1162))
  fail_1307 b k -> {fail} => (k ())
  fail_1308 b k -> {fail} => (k ())
  fail_1309 b k -> {fail} => (k ())
  loop_1030 x_1031 k_loop_1103 -> (loop_1030 x_1031 k_loop_1103)
  main_1037 n_1038 k_main_1227 -> (zip_1032 n_1038 n_1038 (f_main_1299 n_1038 k_main_1227))
  map_1035 x_1036 k_map_1195 when (x_1036 = 0) -> (k_map_1195 x_1036)
  map_1035 x_1036 k_map_1195 when (not (x_1036 = 0)) -> (map_1035 (x_1036 - 1) (f_map_1298 x_1036 k_map_1195))
  zip_1032 x_1033 y_1034 k_zip_1130 when (x_1033 = 0) -> (br_zip_1303 (y_1034 = 0) x_1033 y_1034 k_zip_1130)
  zip_1032 x_1033 y_1034 k_zip_1130 when (not (x_1033 = 0)) -> (br_zip_1305 (y_1034 = 0) x_1033 y_1034 k_zip_1130)
Types:
  main_1294 : X
  fail_1307 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1308 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1309 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1035 : (x_1:int[x_1 <= 1; x_1 >= 1; x_1 <= -1; x_1 <= 0] ->
              (x_3:int[x_1 >= 2; x_1 >= 5; x_3 <= 0 && x_1 <= x_3; x_1 <= x_3 && x_3 <= 1; 
                       x_1 <= -1; 2*x_1 >= 1; x_1 >= 3; x_3 = 0] -> X) -> X)
  zip_1032 : (x_1:int ->
              x_2:int[x_1 = x_2] ->
              (x_4:int[x_4 <= 1; x_4 >= 0 && x_1 >= 0 && x_1 <= x_4; 
                       x_1 >= 1 && x_1 <= x_4; x_4 >= 0; x_4 >= 1; x_4 <= 0; 
                       x_2 >= 0 && x_1 <= 0] -> X) -> X)
  
(6-1) Abstracting ... DONE!

(6-2) Checking HORS ... DONE!

Error trace::
  main_1294 ... --> 
  f_1301 ... --> 
  main_1037 ... --> 
  zip_1032 [2/2] ... --> 
  br_zip_1305 [2/2] ... --> 
  zip_1032 [2/2] ... --> 
  br_zip_1305 [2/2] ... --> 
  zip_1032 [1/2] ... --> 
  br_zip_1303 [1/2] ... --> 
  f_zip_1297 ... --> 
  f_zip_1297 ... --> 
  f_main_1299 ... --> 
  map_1035 [2/2] ... --> 
  map_1035 [2/2] ... --> 
  map_1035 [1/2] ... --> 
  f_map_1298 ... --> 
  f_map_1298 ... --> 
  f_main_1300 [2/2] ... --> 
  fail_1309 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 0; 0; 0; 1; 0

(6-3) Checking counter-example ... DONE!

(6-4) Discovering predicates ... 
begin AbsTypeInfer.refine(68138)[1]
  program:
    main_1294  | true = ((Random.int 0) f_1301)
    br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 | b_1304 = (k_zip_1130 x_1033)
    br_zip_1303 b_1304 x_1033 y_1034 k_zip_1130 | (not b_1304) = (fail_1307 true
                                                                    (f_zip_1295 x_1033
                                                                    y_1034))
    br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 | b_1306 = (fail_1308 true
                                                                    (f_zip_1296 x_1033
                                                                    y_1034))
    br_zip_1305 b_1306 x_1033 y_1034 k_zip_1130 | (not b_1306) = (zip_1032
                                                                    (
                                                                    x_1033 - 1)
                                                                    (
                                                                    y_1034 - 1)
                                                                    (
                                                                    f_zip_1297 x_1033
                                                                    y_1034
                                                                    k_zip_1130))
    f_1301 x_1269 | true = (main_1037 x_1269
                                      (f_1302 x_1269))
    f_1302 x_1269 x_1266 | true = end
    f_main_1299 n_1038 k_main_1227 x_1252 | true = (map_1035 x_1252
                                                             (f_main_1300 n_1038
                                                                    x_1252
                                                                    k_main_1227))
    f_main_1300 n_1038 x_1252 k_main_1227 x_1230 | (x_1230 = n_1038) = (
    k_main_1227 ())
    f_main_1300 n_1038 x_1252 k_main_1227 x_1230 | (not (x_1230 = n_1038)) = (
    fail_1309 true
              k_main_1227)
    f_map_1298 x_1036 k_map_1195 x_1199 | true = (k_map_1195 (1 + x_1199))
    f_zip_1295 x_1033 y_1034 x_1133 | true = bot
    f_zip_1296 x_1033 y_1034 x_1149 | true = bot
    f_zip_1297 x_1033 y_1034 k_zip_1130 x_1162 | true = (k_zip_1130 (
                                                                    1 + x_1162))
    fail_1307 b k | true = (fail ())
    fail_1308 b k | true = (fail ())
    fail_1309 b k | true = (fail ())
    loop_1030 x_1031 k_loop_1103 | true = (loop_1030 x_1031
                                                     k_loop_1103)
    main_1037 n_1038 k_main_1227 | true = (zip_1032 n_1038
                                                    n_1038
                                                    (f_main_1299 n_1038
                                                                 k_main_1227))
    map_1035 x_1036 k_map_1195 | (x_1036 = 0) = (k_map_1195 x_1036)
    map_1035 x_1036 k_map_1195 | (not (x_1036 = 0)) = (map_1035 (x_1036 - 1)
                                                                (f_map_1298 x_1036
                                                                    k_map_1195))
    zip_1032 x_1033 y_1034 k_zip_1130 | (x_1033 = 0) = (br_zip_1303 (
                                                                    y_1034 = 0)
                                                                    x_1033
                                                                    y_1034
                                                                    k_zip_1130)
    zip_1032 x_1033 y_1034 k_zip_1130 | (not (x_1033 = 0)) = (br_zip_1305 (
                                                                    y_1034 = 0)
                                                                    x_1033
                                                                    y_1034
                                                                    k_zip_1130)
    main_1294:X
    br_zip_1303:bool -> int -> int -> (int -> X) -> X
    br_zip_1305:bool -> int -> int -> (int -> X) -> X
    f_1301:int -> X
    f_1302:int -> unit -> X
    f_main_1299:int -> (unit -> X) -> int -> X
    f_main_1300:int -> int -> (unit -> X) -> int -> X
    f_map_1298:int -> (int -> X) -> int -> X
    f_zip_1295:int -> int -> unit -> X
    f_zip_1296:int -> int -> unit -> X
    f_zip_1297:int -> int -> (int -> X) -> int -> X
    fail_1307:bool -> (unit -> X) -> X
    fail_1308:bool -> (unit -> X) -> X
    fail_1309:bool -> (unit -> X) -> X
    loop_1030:unit -> (unit -> X) -> X
    main_1037:int -> (unit -> X) -> X
    map_1035:int -> (int -> X) -> X
    zip_1032:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1303,br_zip_1305,f_1301,f_1302,f_main_1299,f_main_1300,f_map_1298,f_zip_1295,f_zip_1296,f_zip_1297,loop_1030,main_1037
  counterexample: 0:0:0:1:1:1:1:0:0:0:0:0:1:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1301@248:0> = var324)
     [true.(<main_1037@250:0> = <f_1301@248:0>)
      [true.((<zip_1032@252:0> = <main_1037@250:0>) && (<zip_1032@252:1> = <main_1037@250:0>))
       [(not (<zip_1032@252:0> = 0)).
        ((<br_zip_1305@255:0> = (<zip_1032@252:1> = 0)) &&
         ((<br_zip_1305@255:1> = <zip_1032@252:0>) && (<br_zip_1305@255:2> = <zip_1032@252:1>)))
        [(not <br_zip_1305@255:0>).
         ((<zip_1032@258:0> = (<br_zip_1305@255:1> - 1)) && (<zip_1032@258:1> = (<br_zip_1305@255:2> - 1)))
         [(not (<zip_1032@258:0> = 0)).
          ((<br_zip_1305@261:0> = (<zip_1032@258:1> = 0)) &&
           ((<br_zip_1305@261:1> = <zip_1032@258:0>) && (<br_zip_1305@261:2> = <zip_1032@258:1>)))
          [(not <br_zip_1305@261:0>).
           ((<zip_1032@264:0> = (<br_zip_1305@261:1> - 1)) && (<zip_1032@264:1> = (<br_zip_1305@261:2> - 1)))
           [(<zip_1032@264:0> = 0).
            ((<br_zip_1303@267:0> = (<zip_1032@264:1> = 0)) &&
             ((<br_zip_1303@267:1> = <zip_1032@264:0>) && (<br_zip_1303@267:2> = <zip_1032@264:1>)))
            [<br_zip_1303@267:0>.(<<br_zip_1303@267:3>@270:0> = <br_zip_1303@267:1>)
             [true.(<<zip_1032@264:2>@272:0> = <<br_zip_1303@267:3>@270:0>)
              [true.
               ((<f_zip_1297@274:0> = <br_zip_1305@261:1>) &&
                ((<f_zip_1297@274:1> = <br_zip_1305@261:2>) && (<f_zip_1297@274:3> = <<zip_1032@264:2>@272:0>)))
               [true.(<<f_zip_1297@274:2>@276:0> = (1 + <f_zip_1297@274:3>))
                [true.(<<br_zip_1305@261:3>@278:0> = <<f_zip_1297@274:2>@276:0>)
                 [true.(<<zip_1032@258:2>@280:0> = <<br_zip_1305@261:3>@278:0>)
                  [true.
                   ((<f_zip_1297@282:0> = <br_zip_1305@255:1>) &&
                    ((<f_zip_1297@282:1> = <br_zip_1305@255:2>) && (<f_zip_1297@282:3> = <<zip_1032@258:2>@280:0>)))
                   [true.(<<f_zip_1297@282:2>@284:0> = (1 + <f_zip_1297@282:3>))
                    [true.(<<br_zip_1305@255:3>@286:0> = <<f_zip_1297@282:2>@284:0>)
                     [true.(<<zip_1032@252:2>@288:0> = <<br_zip_1305@255:3>@286:0>)
                      [true.
                       ((<f_main_1299@290:0> = <main_1037@250:0>) && (<f_main_1299@290:2> = <<zip_1032@252:2>@288:0>))
                       [true.(<map_1035@292:0> = <f_main_1299@290:2>)
                        [(not (<map_1035@292:0> = 0)).(<map_1035@295:0> = (<map_1035@292:0> - 1))
                         [(not (<map_1035@295:0> = 0)).(<map_1035@298:0> = (<map_1035@295:0> - 1))
                          [(<map_1035@298:0> = 0).(<<map_1035@298:1>@301:0> = <map_1035@298:0>)
                           [true.
                            ((<f_map_1298@303:0> = <map_1035@295:0>) && (<f_map_1298@303:2> = <<map_1035@298:1>@301:0>))
                            [true.(<<f_map_1298@303:1>@305:0> = (1 + <f_map_1298@303:2>))
                             [true.(<<map_1035@295:1>@307:0> = <<f_map_1298@303:1>@305:0>)
                              [true.
                               ((<f_map_1298@309:0> = <map_1035@292:0>) &&
                                (<f_map_1298@309:2> = <<map_1035@295:1>@307:0>))
                               [true.(<<f_map_1298@309:1>@311:0> = (1 + <f_map_1298@309:2>))
                                [true.(<<map_1035@292:1>@313:0> = <<f_map_1298@309:1>@311:0>)
                                 [true.
                                  ((<f_main_1300@315:0> = <f_main_1299@290:0>) &&
                                   ((<f_main_1300@315:1> = <f_main_1299@290:2>) &&
                                    (<f_main_1300@315:3> = <<map_1035@292:1>@313:0>)))
                                  [(not (<f_main_1300@315:3> = <f_main_1300@315:0>)).(
                                   <fail_1309@318:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(68139)[2]
    horn clauses:
      P[<fail_1309@318:0>](<fail_1309@318:0>:bool)|- bot
      
      P[<f_main_1300@315:3>](<f_main_1300@315:0>:int,<f_main_1300@315:1>:int,<f_main_1300@315:3>:int),
      ((<f_main_1300@315:3> <> <f_main_1300@315:0>) && <fail_1309@318:0>)
      |- P[<fail_1309@318:0>](<fail_1309@318:0>:bool)
      
      P[<f_main_1299@290:2>](<f_main_1300@315:0>:int,<f_main_1300@315:1>:int),
      P[<<map_1035@292:1>@313:0>](<f_main_1300@315:1>:int,<f_main_1300@315:3>:int)|- P[<f_main_1300@315:3>](
      <f_main_1300@315:0>:int,<f_main_1300@315:1>:int,<f_main_1300@315:3>:int)
      
      P[<map_1035@292:0>](<map_1035@292:0>:int),
      P[<<f_map_1298@309:1>@311:0>](<map_1035@292:0>:int,<<map_1035@292:1>@313:0>:int), (
      <map_1035@292:0> <> 0) |- P[<<map_1035@292:1>@313:0>](<map_1035@292:0>:int,
                                                            <<map_1035@292:1>@313:0>:int)
      
      P[<f_map_1298@309:2>](<f_map_1298@309:0>:int,(-1 + <<f_map_1298@309:1>@311:0>):int)|- P[<<f_map_1298@309:1>@311:0>](
      <f_map_1298@309:0>:int,<<f_map_1298@309:1>@311:0>:int)
      
      P[<map_1035@292:0>](<f_map_1298@309:0>:int),
      P[<<map_1035@295:1>@307:0>]((-1 + <f_map_1298@309:0>):int,<f_map_1298@309:2>:int), (
      <f_map_1298@309:0> <> 0) |- P[<f_map_1298@309:2>](<f_map_1298@309:0>:int,
                                                        <f_map_1298@309:2>:int)
      
      P[<map_1035@295:0>](<map_1035@295:0>:int),
      P[<<f_map_1298@303:1>@305:0>](<map_1035@295:0>:int,<<map_1035@295:1>@307:0>:int), (
      <map_1035@295:0> <> 0) |- P[<<map_1035@295:1>@307:0>](<map_1035@295:0>:int,
                                                            <<map_1035@295:1>@307:0>:int)
      
      P[<f_map_1298@303:2>](<f_map_1298@303:0>:int,(-1 + <<f_map_1298@303:1>@305:0>):int)|- P[<<f_map_1298@303:1>@305:0>](
      <f_map_1298@303:0>:int,<<f_map_1298@303:1>@305:0>:int)
      
      P[<map_1035@295:0>](<f_map_1298@303:0>:int),
      P[<<map_1035@298:1>@301:0>]((-1 + <f_map_1298@303:0>):int,<f_map_1298@303:2>:int), (
      <f_map_1298@303:0> <> 0) |- P[<f_map_1298@303:2>](<f_map_1298@303:0>:int,
                                                        <f_map_1298@303:2>:int)
      
      P[<map_1035@298:0>](<map_1035@298:0>:int),
      ((<map_1035@298:0> = 0) && (<<map_1035@298:1>@301:0> = <map_1035@298:0>))
      |- P[<<map_1035@298:1>@301:0>](<map_1035@298:0>:int,<<map_1035@298:1>@301:0>:int)
      
      P[<map_1035@295:0>]((1 + <map_1035@298:0>):int), ((1 + <map_1035@298:0>) <> 0)
      |- P[<map_1035@298:0>](<map_1035@298:0>:int)
      
      P[<map_1035@292:0>]((1 + <map_1035@295:0>):int), ((1 + <map_1035@295:0>) <> 0)
      |- P[<map_1035@295:0>](<map_1035@295:0>:int)
      
      P[<f_main_1299@290:2>](<f_main_1299@290:0>:int,<map_1035@292:0>:int)|- P[<map_1035@292:0>](<map_1035@292:0>:int)
      
      P[<main_1037@250:0>](<f_main_1299@290:0>:int),
      P[<<zip_1032@252:2>@288:0>](<f_main_1299@290:0>:int,<f_main_1299@290:0>:int,<f_main_1299@290:2>:int)|- P[<f_main_1299@290:2>](
      <f_main_1299@290:0>:int,<f_main_1299@290:2>:int)
      
      P[<zip_1032@252:1>](<zip_1032@252:0>:int,<zip_1032@252:1>:int),
      P[<<br_zip_1305@255:3>@286:0>]((<zip_1032@252:1> = 0):bool,<zip_1032@252:0>:int,<zip_1032@252:1>:int,<<zip_1032@252:2>@288:0>:int),
      (<zip_1032@252:0> <> 0)
      |- P[<<zip_1032@252:2>@288:0>](<zip_1032@252:0>:int,<zip_1032@252:1>:int,
                                     <<zip_1032@252:2>@288:0>:int)
      
      P[<br_zip_1305@255:2>](<br_zip_1305@255:0>:bool,<br_zip_1305@255:1>:int,<br_zip_1305@255:2>:int),
      P[<<f_zip_1297@282:2>@284:0>](<br_zip_1305@255:1>:int,<br_zip_1305@255:2>:int,<<br_zip_1305@255:3>@286:0>:int),
      (not <br_zip_1305@255:0>)
      |- P[<<br_zip_1305@255:3>@286:0>](<br_zip_1305@255:0>:bool,<br_zip_1305@255:1>:int,
                                        <br_zip_1305@255:2>:int,<<br_zip_1305@255:3>@286:0>:int)
      
      P[<f_zip_1297@282:3>](<f_zip_1297@282:0>:int,<f_zip_1297@282:1>:int,(
                            -1 + <<f_zip_1297@282:2>@284:0>):int)|- P[<<f_zip_1297@282:2>@284:0>](
      <f_zip_1297@282:0>:int,<f_zip_1297@282:1>:int,<<f_zip_1297@282:2>@284:0>:int)
      
      P[<br_zip_1305@255:2>](false:bool,<f_zip_1297@282:0>:int,<f_zip_1297@282:1>:int),
      P[<<zip_1032@258:2>@280:0>]((-1 + <f_zip_1297@282:0>):int,(-1 + <f_zip_1297@282:1>):int,<f_zip_1297@282:3>:int)|- P[<f_zip_1297@282:3>](
      <f_zip_1297@282:0>:int,<f_zip_1297@282:1>:int,<f_zip_1297@282:3>:int)
      
      P[<zip_1032@258:1>](<zip_1032@258:0>:int,<zip_1032@258:1>:int),
      P[<<br_zip_1305@261:3>@278:0>]((<zip_1032@258:1> = 0):bool,<zip_1032@258:0>:int,<zip_1032@258:1>:int,<<zip_1032@258:2>@280:0>:int),
      (<zip_1032@258:0> <> 0)
      |- P[<<zip_1032@258:2>@280:0>](<zip_1032@258:0>:int,<zip_1032@258:1>:int,
                                     <<zip_1032@258:2>@280:0>:int)
      
      P[<br_zip_1305@261:2>](<br_zip_1305@261:0>:bool,<br_zip_1305@261:1>:int,<br_zip_1305@261:2>:int),
      P[<<f_zip_1297@274:2>@276:0>](<br_zip_1305@261:1>:int,<br_zip_1305@261:2>:int,<<br_zip_1305@261:3>@278:0>:int),
      (not <br_zip_1305@261:0>)
      |- P[<<br_zip_1305@261:3>@278:0>](<br_zip_1305@261:0>:bool,<br_zip_1305@261:1>:int,
                                        <br_zip_1305@261:2>:int,<<br_zip_1305@261:3>@278:0>:int)
      
      P[<f_zip_1297@274:3>](<f_zip_1297@274:0>:int,<f_zip_1297@274:1>:int,(
                            -1 + <<f_zip_1297@274:2>@276:0>):int)|- P[<<f_zip_1297@274:2>@276:0>](
      <f_zip_1297@274:0>:int,<f_zip_1297@274:1>:int,<<f_zip_1297@274:2>@276:0>:int)
      
      P[<br_zip_1305@261:2>](false:bool,<f_zip_1297@274:0>:int,<f_zip_1297@274:1>:int),
      P[<<zip_1032@264:2>@272:0>]((-1 + <f_zip_1297@274:0>):int,(-1 + <f_zip_1297@274:1>):int,<f_zip_1297@274:3>:int)|- P[<f_zip_1297@274:3>](
      <f_zip_1297@274:0>:int,<f_zip_1297@274:1>:int,<f_zip_1297@274:3>:int)
      
      P[<zip_1032@264:1>](<zip_1032@264:0>:int,<zip_1032@264:1>:int),
      P[<<br_zip_1303@267:3>@270:0>]((<zip_1032@264:1> = 0):bool,<zip_1032@264:0>:int,<zip_1032@264:1>:int,<<zip_1032@264:2>@272:0>:int),
      (<zip_1032@264:0> = 0)
      |- P[<<zip_1032@264:2>@272:0>](<zip_1032@264:0>:int,<zip_1032@264:1>:int,
                                     <<zip_1032@264:2>@272:0>:int)
      
      P[<br_zip_1303@267:2>](<br_zip_1303@267:0>:bool,<br_zip_1303@267:1>:int,<br_zip_1303@267:2>:int),
      ((<<br_zip_1303@267:3>@270:0> = <br_zip_1303@267:1>) && <br_zip_1303@267:0>)
      |- P[<<br_zip_1303@267:3>@270:0>](<br_zip_1303@267:0>:bool,<br_zip_1303@267:1>:int,
                                        <br_zip_1303@267:2>:int,<<br_zip_1303@267:3>@270:0>:int)
      
      P[<zip_1032@264:1>](<br_zip_1303@267:1>:int,<br_zip_1303@267:2>:int),
      ((<br_zip_1303@267:1> = 0) && (<br_zip_1303@267:0> = (<br_zip_1303@267:2> = 0)))
      |- P[<br_zip_1303@267:2>](<br_zip_1303@267:0>:bool,<br_zip_1303@267:1>:int,
                                <br_zip_1303@267:2>:int)
      
      P[<br_zip_1305@261:2>](false:bool,(1 + <zip_1032@264:0>):int,(1 + <zip_1032@264:1>):int)|- P[<zip_1032@264:1>](
      <zip_1032@264:0>:int,<zip_1032@264:1>:int)
      
      P[<zip_1032@258:1>](<br_zip_1305@261:1>:int,<br_zip_1305@261:2>:int),
      ((<br_zip_1305@261:1> <> 0) && (<br_zip_1305@261:0> = (<br_zip_1305@261:2> = 0)))
      |- P[<br_zip_1305@261:2>](<br_zip_1305@261:0>:bool,<br_zip_1305@261:1>:int,
                                <br_zip_1305@261:2>:int)
      
      P[<br_zip_1305@255:2>](false:bool,(1 + <zip_1032@258:0>):int,(1 + <zip_1032@258:1>):int)|- P[<zip_1032@258:1>](
      <zip_1032@258:0>:int,<zip_1032@258:1>:int)
      
      P[<zip_1032@252:1>](<br_zip_1305@255:1>:int,<br_zip_1305@255:2>:int),
      ((<br_zip_1305@255:1> <> 0) && (<br_zip_1305@255:0> = (<br_zip_1305@255:2> = 0)))
      |- P[<br_zip_1305@255:2>](<br_zip_1305@255:0>:bool,<br_zip_1305@255:1>:int,
                                <br_zip_1305@255:2>:int)
      
      P[<main_1037@250:0>](<zip_1032@252:1>:int), (<zip_1032@252:1> = <zip_1032@252:0>)
      |- P[<zip_1032@252:1>](<zip_1032@252:0>:int,<zip_1032@252:1>:int)
      
      P[<f_1301@248:0>](<main_1037@250:0>:int)|- P[<main_1037@250:0>](<main_1037@250:0>:int)
      
      |- P[<f_1301@248:0>](<f_1301@248:0>:int)
    call trees:
      <main_1294@245>
        <f_1301@248>
          <main_1037@250>
            <zip_1032@252>
              <br_zip_1305@255>
                <zip_1032@258>
                  <br_zip_1305@261>
                    <zip_1032@264>
                      <br_zip_1303@267>
                      </<br_zip_1303@267:3>@270>
                    </<zip_1032@264:2>@272>
                    <f_zip_1297@274>
                    </<f_zip_1297@274:2>@276>
                  </<br_zip_1305@261:3>@278>
                </<zip_1032@258:2>@280>
                <f_zip_1297@282>
                </<f_zip_1297@282:2>@284>
              </<br_zip_1305@255:3>@286>
            </<zip_1032@252:2>@288>
            <f_main_1299@290>
              <map_1035@292>
                <map_1035@295>
                  <map_1035@298>
                  </<map_1035@298:1>@301>
                  <f_map_1298@303>
                  </<f_map_1298@303:1>@305>
                </<map_1035@295:1>@307>
                <f_map_1298@309>
                </<f_map_1298@309:1>@311>
              </<map_1035@292:1>@313>
              <f_main_1300@315>
                <fail_1309@318>
    inlined horn clauses:
      P[<fail_1309@318:0>](<fail_1309@318:0>:bool)|- bot
      
      P[<<zip_1032@252:2>@288:0>](<f_main_1300@315:0>:int,<f_main_1300@315:0>:int,<f_main_1300@315:1>:int),
      P[<<map_1035@292:1>@313:0>](<f_main_1300@315:1>:int,<f_main_1300@315:3>:int),
      ((<f_main_1300@315:3> <> <f_main_1300@315:0>) && <fail_1309@318:0>)
      |- P[<fail_1309@318:0>](<fail_1309@318:0>:bool)
      
      P[<map_1035@292:0>](<map_1035@292:0>:int),
      P[<<map_1035@295:1>@307:0>]((-1 + <map_1035@292:0>):int,(-1 + <<map_1035@292:1>@313:0>):int),
      (<map_1035@292:0> <> 0) |- P[<<map_1035@292:1>@313:0>](<map_1035@292:0>:int,
                                                             <<map_1035@292:1>@313:0>:int)
      
      P[<map_1035@295:0>](<map_1035@295:0>:int),
      P[<<map_1035@298:1>@301:0>]((-1 + <map_1035@295:0>):int,(-1 + <<map_1035@295:1>@307:0>):int),
      (<map_1035@295:0> <> 0) |- P[<<map_1035@295:1>@307:0>](<map_1035@295:0>:int,
                                                             <<map_1035@295:1>@307:0>:int)
      
      P[<map_1035@298:0>](<map_1035@298:0>:int),
      ((<map_1035@298:0> = 0) && (<<map_1035@298:1>@301:0> = <map_1035@298:0>))
      |- P[<<map_1035@298:1>@301:0>](<map_1035@298:0>:int,<<map_1035@298:1>@301:0>:int)
      
      P[<map_1035@295:0>]((1 + <map_1035@298:0>):int), ((1 + <map_1035@298:0>) <> 0)
      |- P[<map_1035@298:0>](<map_1035@298:0>:int)
      
      P[<map_1035@292:0>]((1 + <map_1035@295:0>):int), ((1 + <map_1035@295:0>) <> 0)
      |- P[<map_1035@295:0>](<map_1035@295:0>:int)
      
      P[<<zip_1032@252:2>@288:0>](<f_main_1299@290:0>:int,<f_main_1299@290:0>:int,<map_1035@292:0>:int)|- P[<map_1035@292:0>](
      <map_1035@292:0>:int)
      
      P[<zip_1032@252:1>](<zip_1032@252:0>:int,<zip_1032@252:1>:int),
      P[<<zip_1032@258:2>@280:0>]((-1 + <zip_1032@252:0>):int,(-1 + <zip_1032@252:1>):int,(
                                  -1 + <<zip_1032@252:2>@288:0>):int),
      ((<zip_1032@252:0> <> 0) && (<zip_1032@252:1> <> 0))
      |- P[<<zip_1032@252:2>@288:0>](<zip_1032@252:0>:int,<zip_1032@252:1>:int,
                                     <<zip_1032@252:2>@288:0>:int)
      
      P[<zip_1032@258:1>](<zip_1032@258:0>:int,<zip_1032@258:1>:int),
      P[<<zip_1032@264:2>@272:0>]((-1 + <zip_1032@258:0>):int,(-1 + <zip_1032@258:1>):int,(
                                  -1 + <<zip_1032@258:2>@280:0>):int),
      ((<zip_1032@258:0> <> 0) && (<zip_1032@258:1> <> 0))
      |- P[<<zip_1032@258:2>@280:0>](<zip_1032@258:0>:int,<zip_1032@258:1>:int,
                                     <<zip_1032@258:2>@280:0>:int)
      
      P[<zip_1032@264:1>](<zip_1032@264:0>:int,<zip_1032@264:1>:int),
      ((<zip_1032@264:0> = 0) && ((<zip_1032@264:1> = 0) && (<<zip_1032@264:2>@272:0> = <zip_1032@264:0>)))
      |- P[<<zip_1032@264:2>@272:0>](<zip_1032@264:0>:int,<zip_1032@264:1>:int,
                                     <<zip_1032@264:2>@272:0>:int)
      
      P[<zip_1032@258:1>]((1 + <zip_1032@264:0>):int,(1 + <zip_1032@264:1>):int),
      (((1 + <zip_1032@264:0>) <> 0) && ((1 + <zip_1032@264:1>) <> 0))
      |- P[<zip_1032@264:1>](<zip_1032@264:0>:int,<zip_1032@264:1>:int)
      
      P[<zip_1032@252:1>]((1 + <zip_1032@258:0>):int,(1 + <zip_1032@258:1>):int),
      (((1 + <zip_1032@258:0>) <> 0) && ((1 + <zip_1032@258:1>) <> 0))
      |- P[<zip_1032@258:1>](<zip_1032@258:0>:int,<zip_1032@258:1>:int)
      
       (<zip_1032@252:1> = <zip_1032@252:0>) |- P[<zip_1032@252:1>](<zip_1032@252:0>:int,
                                                                    <zip_1032@252:1>:int)
    begin ParamSubstInfer.infer(73652)[3]
      
    end ParamSubstInfer.infer(73652)[3] (2.816572 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(73654)[3]
      
    end RefTypeInfer.elim_coeffs(73654)[3] (0.002000 sec.)
    begin YhornInterface.solve(74327)[3]
      begin HcSolver.solve_ub(74328)[4]
        encoded:
          P[<fail_1309@318:0>](<fail_1309@318:0>:int)|- bot
          
          P[<<zip_1032@252:2>@288:0>](<f_main_1300@315:0>:int,<f_main_1300@315:0>:int,<f_main_1300@315:1>:int),
          P[<<map_1035@292:1>@313:0>](<f_main_1300@315:1>:int,<f_main_1300@315:3>:int),
          ((<f_main_1300@315:3> <> <f_main_1300@315:0>) && (<fail_1309@318:0> = 1))
          |- P[<fail_1309@318:0>](<fail_1309@318:0>:int)
          
          P[<map_1035@292:0>](<map_1035@292:0>:int),
          P[<<map_1035@295:1>@307:0>]((-1 + <map_1035@292:0>):int,(-1 + <<map_1035@292:1>@313:0>):int),
          (<map_1035@292:0> <> 0) |- P[<<map_1035@292:1>@313:0>](<map_1035@292:0>:int,
                                                                 <<map_1035@292:1>@313:0>:int)
          
          P[<map_1035@295:0>](<map_1035@295:0>:int),
          P[<<map_1035@298:1>@301:0>]((-1 + <map_1035@295:0>):int,(-1 + <<map_1035@295:1>@307:0>):int),
          (<map_1035@295:0> <> 0) |- P[<<map_1035@295:1>@307:0>](<map_1035@295:0>:int,
                                                                 <<map_1035@295:1>@307:0>:int)
          
          P[<map_1035@298:0>](<map_1035@298:0>:int),
          ((<map_1035@298:0> = 0) && (<<map_1035@298:1>@301:0> = <map_1035@298:0>))
          |- P[<<map_1035@298:1>@301:0>](<map_1035@298:0>:int,<<map_1035@298:1>@301:0>:int)
          
          P[<map_1035@295:0>]((1 + <map_1035@298:0>):int), ((1 + <map_1035@298:0>) <> 0)
          |- P[<map_1035@298:0>](<map_1035@298:0>:int)
          
          P[<map_1035@292:0>]((1 + <map_1035@295:0>):int), ((1 + <map_1035@295:0>) <> 0)
          |- P[<map_1035@295:0>](<map_1035@295:0>:int)
          
          P[<<zip_1032@252:2>@288:0>](<f_main_1299@290:0>:int,<f_main_1299@290:0>:int,<map_1035@292:0>:int)|- P[<map_1035@292:0>](
          <map_1035@292:0>:int)
          
          P[<zip_1032@252:1>](<zip_1032@252:0>:int,<zip_1032@252:1>:int),
          P[<<zip_1032@258:2>@280:0>]((-1 + <zip_1032@252:0>):int,(-1 + <zip_1032@252:1>):int,(
                                      -1 + <<zip_1032@252:2>@288:0>):int),
          ((<zip_1032@252:0> <> 0) && (<zip_1032@252:1> <> 0))
          |- P[<<zip_1032@252:2>@288:0>](<zip_1032@252:0>:int,<zip_1032@252:1>:int,
                                         <<zip_1032@252:2>@288:0>:int)
          
          P[<zip_1032@258:1>](<zip_1032@258:0>:int,<zip_1032@258:1>:int),
          P[<<zip_1032@264:2>@272:0>]((-1 + <zip_1032@258:0>):int,(-1 + <zip_1032@258:1>):int,(
                                      -1 + <<zip_1032@258:2>@280:0>):int),
          ((<zip_1032@258:0> <> 0) && (<zip_1032@258:1> <> 0))
          |- P[<<zip_1032@258:2>@280:0>](<zip_1032@258:0>:int,<zip_1032@258:1>:int,
                                         <<zip_1032@258:2>@280:0>:int)
          
          P[<zip_1032@264:1>](<zip_1032@264:0>:int,<zip_1032@264:1>:int),
          ((<zip_1032@264:0> = 0) && ((<zip_1032@264:1> = 0) && (<<zip_1032@264:2>@272:0> = <zip_1032@264:0>)))
          |- P[<<zip_1032@264:2>@272:0>](<zip_1032@264:0>:int,<zip_1032@264:1>:int,
                                         <<zip_1032@264:2>@272:0>:int)
          
          P[<zip_1032@258:1>]((1 + <zip_1032@264:0>):int,(1 + <zip_1032@264:1>):int),
          (((1 + <zip_1032@264:0>) <> 0) && ((1 + <zip_1032@264:1>) <> 0))
          |- P[<zip_1032@264:1>](<zip_1032@264:0>:int,<zip_1032@264:1>:int)
          
          P[<zip_1032@252:1>]((1 + <zip_1032@258:0>):int,(1 + <zip_1032@258:1>):int),
          (((1 + <zip_1032@258:0>) <> 0) && ((1 + <zip_1032@258:1>) <> 0))
          |- P[<zip_1032@258:1>](<zip_1032@258:0>:int,<zip_1032@258:1>:int)
          
           (<zip_1032@252:1> = <zip_1032@252:0>) |- P[<zip_1032@252:1>](<zip_1032@252:0>:int,
                                                                    <zip_1032@252:1>:int)
        input to Yhorn:
          P[<fail_1309@318:0>](<fail_1309@318:0>:int)|- bot
          
          P[<<zip_1032@252:2>@288:0>](<f_main_1300@315:0>:int,<f_main_1300@315:0>:int,<f_main_1300@315:1>:int),
          P[<<map_1035@292:1>@313:0>](<f_main_1300@315:1>:int,<f_main_1300@315:3>:int),
          ((<f_main_1300@315:3> <> <f_main_1300@315:0>) && (<fail_1309@318:0> = 1))
          |- P[<fail_1309@318:0>](<fail_1309@318:0>:int)
          
          P[<map_1035@292:0>](<map_1035@292:0>:int),
          P[<<map_1035@295:1>@307:0>](var325:int,var326:int),
          (((1 + var326) = <<map_1035@292:1>@313:0>) && (((1 + var325) = <map_1035@292:0>) && (<map_1035@292:0> <> 0)))
          |- P[<<map_1035@292:1>@313:0>](<map_1035@292:0>:int,<<map_1035@292:1>@313:0>:int)
          
          P[<map_1035@295:0>](<map_1035@295:0>:int),
          P[<<map_1035@298:1>@301:0>](var327:int,var328:int),
          (((1 + var328) = <<map_1035@295:1>@307:0>) && (((1 + var327) = <map_1035@295:0>) && (<map_1035@295:0> <> 0)))
          |- P[<<map_1035@295:1>@307:0>](<map_1035@295:0>:int,<<map_1035@295:1>@307:0>:int)
          
          P[<map_1035@298:0>](<map_1035@298:0>:int),
          ((<<map_1035@298:1>@301:0> = <map_1035@298:0>) && (<map_1035@298:0> = 0))
          |- P[<<map_1035@298:1>@301:0>](<map_1035@298:0>:int,<<map_1035@298:1>@301:0>:int)
          
          P[<map_1035@295:0>](var329:int), ((var329 = (1 + <map_1035@298:0>)) && ((1 + <map_1035@298:0>) <> 0))
          |- P[<map_1035@298:0>](<map_1035@298:0>:int)
          
          P[<map_1035@292:0>](var330:int), ((var330 = (1 + <map_1035@295:0>)) && ((1 + <map_1035@295:0>) <> 0))
          |- P[<map_1035@295:0>](<map_1035@295:0>:int)
          
          P[<<zip_1032@252:2>@288:0>](<f_main_1299@290:0>:int,<f_main_1299@290:0>:int,<map_1035@292:0>:int)|- P[<map_1035@292:0>](
          <map_1035@292:0>:int)
          
          P[<zip_1032@252:1>](<zip_1032@252:0>:int,<zip_1032@252:1>:int),
          P[<<zip_1032@258:2>@280:0>](var331:int,var332:int,var333:int),
          (((1 + var333) = <<zip_1032@252:2>@288:0>) &&
           (((1 + var332) = <zip_1032@252:1>) &&
            (((1 + var331) = <zip_1032@252:0>) && ((<zip_1032@252:1> <> 0) && (<zip_1032@252:0> <> 0)))))
          |- P[<<zip_1032@252:2>@288:0>](<zip_1032@252:0>:int,<zip_1032@252:1>:int,
                                         <<zip_1032@252:2>@288:0>:int)
          
          P[<zip_1032@258:1>](<zip_1032@258:0>:int,<zip_1032@258:1>:int),
          P[<<zip_1032@264:2>@272:0>](var334:int,var335:int,var336:int),
          (((1 + var336) = <<zip_1032@258:2>@280:0>) &&
           (((1 + var335) = <zip_1032@258:1>) &&
            (((1 + var334) = <zip_1032@258:0>) && ((<zip_1032@258:1> <> 0) && (<zip_1032@258:0> <> 0)))))
          |- P[<<zip_1032@258:2>@280:0>](<zip_1032@258:0>:int,<zip_1032@258:1>:int,
                                         <<zip_1032@258:2>@280:0>:int)
          
          P[<zip_1032@264:1>](<zip_1032@264:0>:int,<zip_1032@264:1>:int),
          ((<<zip_1032@264:2>@272:0> = <zip_1032@264:0>) && ((<zip_1032@264:1> = 0) && (<zip_1032@264:0> = 0)))
          |- P[<<zip_1032@264:2>@272:0>](<zip_1032@264:0>:int,<zip_1032@264:1>:int,
                                         <<zip_1032@264:2>@272:0>:int)
          
          P[<zip_1032@258:1>](var337:int,var338:int),
          ((var338 = (1 + <zip_1032@264:1>)) &&
           ((var337 = (1 + <zip_1032@264:0>)) && (((1 + <zip_1032@264:1>) <> 0) && ((1 + <zip_1032@264:0>) <> 0))))
          |- P[<zip_1032@264:1>](<zip_1032@264:0>:int,<zip_1032@264:1>:int)
          
          P[<zip_1032@252:1>](var339:int,var340:int),
          ((var340 = (1 + <zip_1032@258:1>)) &&
           ((var339 = (1 + <zip_1032@258:0>)) && (((1 + <zip_1032@258:1>) <> 0) && ((1 + <zip_1032@258:0>) <> 0))))
          |- P[<zip_1032@258:1>](<zip_1032@258:0>:int,<zip_1032@258:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1309_sep_318_sep_0($3829)) -> 1=0.
(($3829-1=0) & ($3830-$3831<>0)) & (v_sep_map_1035_sep_292_sep_1_sep_313_sep_0($3832,$3830)) & (v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0($3831,$3831,$3832)) -> v_sep_fail_1309_sep_318_sep_0($3829).
(($3833<>0) & (-$3833+$3834+1=0) & ($3835-$3836+1=0)) & (v_sep_map_1035_sep_295_sep_1_sep_307_sep_0($3834,$3835)) & (v_sep_map_1035_sep_292_sep_0($3833)) -> v_sep_map_1035_sep_292_sep_1_sep_313_sep_0($3833,$3836).
(($3837<>0) & (-$3837+$3838+1=0) & ($3839-$3840+1=0)) & (v_sep_map_1035_sep_298_sep_1_sep_301_sep_0($3838,$3839)) & (v_sep_map_1035_sep_295_sep_0($3837)) -> v_sep_map_1035_sep_295_sep_1_sep_307_sep_0($3837,$3840).
(($3841=0) & (-$3841+$3842=0)) & (v_sep_map_1035_sep_298_sep_0($3841)) -> v_sep_map_1035_sep_298_sep_1_sep_301_sep_0($3841,$3842).
(($3841+1<>0) & (-$3841+$3843-1=0)) & (v_sep_map_1035_sep_295_sep_0($3843)) -> v_sep_map_1035_sep_298_sep_0($3841).
(($3837+1<>0) & (-$3837+$3844-1=0)) & (v_sep_map_1035_sep_292_sep_0($3844)) -> v_sep_map_1035_sep_295_sep_0($3837).
(0=0) & (v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0($3845,$3845,$3833)) -> v_sep_map_1035_sep_292_sep_0($3833).
(($3846<>0) & ($3847<>0) & (-$3846+$3848+1=0) & (-$3847+$3849+1=0) & ($3850-$3851+1=0)) & (v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0($3848,$3849,$3850)) & (v_sep_zip_1032_sep_252_sep_1($3846,$3847)) -> v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0($3846,$3847,$3851).
(($3852<>0) & ($3853<>0) & (-$3852+$3854+1=0) & (-$3853+$3855+1=0) & ($3856-$3857+1=0)) & (v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0($3854,$3855,$3856)) & (v_sep_zip_1032_sep_258_sep_1($3852,$3853)) -> v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0($3852,$3853,$3857).
(($3858=0) & ($3859=0) & (-$3858+$3860=0)) & (v_sep_zip_1032_sep_264_sep_1($3858,$3859)) -> v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0($3858,$3859,$3860).
(($3858+1<>0) & ($3859+1<>0) & (-$3858+$3861-1=0) & (-$3859+$3862-1=0)) & (v_sep_zip_1032_sep_258_sep_1($3861,$3862)) -> v_sep_zip_1032_sep_264_sep_1($3858,$3859).
(($3852+1<>0) & ($3853+1<>0) & (-$3852+$3863-1=0) & (-$3853+$3864-1=0)) & (v_sep_zip_1032_sep_252_sep_1($3863,$3864)) -> v_sep_zip_1032_sep_258_sep_1($3852,$3853).
-$3846+$3847=0 -> v_sep_zip_1032_sep_252_sep_1($3846,$3847).


v_sep_fail_1309_sep_318_sep_0: X
v_sep_map_1035_sep_292_sep_0: X
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: X
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: X
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: X
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.............................................Split disj [76] 5.084226
Reconstrcut: 3 **)

v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: X
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: X
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: X
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: X
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.......
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: X
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: X
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: X
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: X
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.......Split conj [78] 5.088225
(Reconstrcut: 8 **)
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: X
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: X
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: X
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...............
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: X
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: X
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: X
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.......Split conj [81] 5.094224
(Reconstrcut: 27 ***)
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: X
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: X
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.................................................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: X
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: X
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.......
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: X
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: X
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...............................Split conj [91] 5.12022
(Reconstrcut: 14 ****)
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: X
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...............................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: X
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.......
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: X
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...............................Split conj [100] 5.154215
(Reconstrcut: 34 ******)
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
..........................................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.......
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: X
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...............................Split conj [110] 5.18821
(Reconstrcut: 61 ************)
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
..................................................................................................................................................................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.......
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...............................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...................................................................................................................Split conj [165] 5.318191
(Reconstrcut: 46 ******)
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
..........................................................................................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.......
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...............................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: X
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...................................................................................................................Split conj [190] 5.622145
(Reconstrcut: 26 ********)
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.......................................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.......
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...............................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: X
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...................................................................................................................Split conj [204] 5.904101
(Reconstrcut: 45 **********)
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.............................................................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.......
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...............................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: X
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...................................................................................................................Split conj [231] 6.184059
(Reconstrcut: 199 ************************************)
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
............................................................................................................................................................................................................................................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
.......
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...............................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: X
...................................................................................................................Split conj [301] 6.712978
(Reconstrcut: 187 ************************************************)
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...................................................................................................................................................................................................................................................................................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
.......
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...............................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...................................................................................................................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...............................................................................................................................................................................................................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
.......................................................................................................................................................................................................................................................
v_sep_fail_1309_sep_318_sep_0: (X) | (X)
v_sep_map_1035_sep_292_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_292_sep_1_sep_313_sep_0: (X) & (X)
v_sep_map_1035_sep_295_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_map_1035_sep_295_sep_1_sep_307_sep_0: (X) & (X) & (X) & (X)
v_sep_map_1035_sep_298_sep_0: X
v_sep_map_1035_sep_298_sep_1_sep_301_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_252_sep_2_sep_288_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_258_sep_1: X
v_sep_zip_1032_sep_258_sep_2_sep_280_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_zip_1032_sep_264_sep_1: X
v_sep_zip_1032_sep_264_sep_2_sep_272_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
...........................................................................................................................................................................................................................................................................................