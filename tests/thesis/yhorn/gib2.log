MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn gib2.ml

parsed::
 let rec gib_1030 a_1031 b_1032 n_1033 =
   if n_1033 = 0 then
     a_1031
   else
     if n_1033 = 1 then
       b_1032
     else
       gib_1030 a_1031 b_1032 (n_1033 - 1) + gib_1030 a_1031 b_1032 (n_1033 - 2) 
 in
 let main_1034 n_1035 a_1036 b_1037 =
   if a_1036 >= 0 && b_1037 >= 0 then
     if gib_1030 a_1036 b_1037 n_1035 >= 0 then
       ()
     else
       {fail} ()
   else
     () 
 in
   ()

set_target::
 let rec gib_1030 a_1031 b_1032 n_1033 =
   if n_1033 = 0 then
     a_1031
   else
     if n_1033 = 1 then
       b_1032
     else
       gib_1030 a_1031 b_1032 (n_1033 - 1) + gib_1030 a_1031 b_1032 (n_1033 - 2) 
 in
 let main_1034 n_1035 a_1036 b_1037 =
   if a_1036 >= 0 && b_1037 >= 0 then
     if gib_1030 a_1036 b_1037 n_1035 >= 0 then
       ()
     else
       {fail} ()
   else
     () 
 in
 let main_1091 =
   let arg1_1088 = rand_int () 
   in
   let arg2_1089 = rand_int () 
   in
   let arg3_1090 = rand_int () 
   in
     main_1034 arg1_1088 arg2_1089 arg3_1090 
 in
   ()

CPS::
 let rec gib_1030 (a_1031:int) (b_1032:int) (n_1033:int) (k_gib_1122:(
   int -> X)) =
   if n_1033 = 0 then
     k_gib_1122 a_1031
   else
     if n_1033 = 1 then
       k_gib_1122 b_1032
     else
       gib_1030 a_1031 b_1032 (n_1033 - 1)
         (fun x_1125 -> gib_1030 a_1031 b_1032 (n_1033 - 2) (fun x_1126 -> k_gib_1122 (x_1125 + x_1126))) 
 in
 let main_1034 (n_1035:int) (a_1036:int) (b_1037:int) (k_main_1178:(unit -> X)) =
   let k_main_1181 (b_1213:bool) =
     if b_1213 then
       gib_1030 a_1036 b_1037 n_1035
         (fun x_1185 -> (if x_1185 >= 0 then
                           k_main_1178 ()
                         else
                           {|fail|} () k_main_1178))
     else
       k_main_1178 () 
   in
     if a_1036 >= 0 then
       k_main_1181 (b_1037 >= 0)
     else
       k_main_1181 false 
 in
   rand_int_cps ()
     (fun x_1219 ->
        rand_int_cps ()
          (fun x_1232 -> rand_int_cps () (fun x_1245 -> main_1034 x_1219 x_1232 x_1245 (fun x_1216 -> end))))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1278
  main_1278 -> (rand_int f_1282)
  br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 when b_1287 -> (k_gib_1122 b_1032)
  br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 when (not b_1287) ->
      (gib_1030 a_1031 b_1032 (n_1033 - 1) (f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122))
  f_1282 x_1219 -> (rand_int (f_1283 x_1219))
  f_1283 x_1219 x_1232 -> (rand_int (f_1284 x_1219 x_1232))
  f_1284 x_1219 x_1232 x_1245 -> (main_1034 x_1219 x_1232 x_1245 (f_1285 x_1219 x_1232 x_1245))
  f_1285 x_1219 x_1232 x_1245 x_1216 -> end
  f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122 x_1125 ->
      (gib_1030 a_1031 b_1032 (n_1033 - 2) (f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122))
  f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122 x_1126 -> (k_gib_1122 (x_1125 + x_1126))
  f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 when (x_1185 >= 0) -> (k_main_1178 ())
  f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 when (not (x_1185 >= 0)) -> (fail_1288 true k_main_1178)
  fail_1288 b k -> {fail} => (k ())
  gib_1030 a_1031 b_1032 n_1033 k_gib_1122 when (n_1033 = 0) -> (k_gib_1122 a_1031)
  gib_1030 a_1031 b_1032 n_1033 k_gib_1122 when (not (n_1033 = 0)) ->
      (br_gib_1286 (n_1033 = 1) a_1031 b_1032 n_1033 k_gib_1122)
  k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 when b_1213 ->
      (gib_1030 a_1036 b_1037 n_1035 (f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178))
  k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 when (not b_1213) -> (k_main_1178 ())
  main_1034 n_1035 a_1036 b_1037 k_main_1178 when (a_1036 >= 0) ->
      (k_main_1181 a_1036 b_1037 n_1035 k_main_1178 (b_1037 >= 0))
  main_1034 n_1035 a_1036 b_1037 k_main_1178 when (not (a_1036 >= 0)) ->
      (k_main_1181 a_1036 b_1037 n_1035 k_main_1178 false)
Types:
  main_1278 : X
  fail_1288 : (x_1:bool[x_1] -> (unit -> X) -> X)
  gib_1030 : (int -> int -> int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1278 ... --> 
  f_1282 ... --> 
  f_1283 ... --> 
  f_1284 ... --> 
  main_1034 [1/2] ... --> 
  k_main_1181 [1/2] ... --> 
  gib_1030 [2/2] ... --> 
  br_gib_1286 [1/2] ... --> 
  f_k_main_1281 [2/2] ... --> 
  fail_1288 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(171)[1]
  program:
    main_1278  | true = ((Random.int 0) f_1282)
    br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 | b_1287 = (k_gib_1122 b_1032)
    br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 | (not b_1287) = (
    gib_1030 a_1031
             b_1032
             (n_1033 - 1)
             (f_gib_1279 a_1031
                         b_1032
                         n_1033
                         k_gib_1122))
    f_1282 x_1219 | true = ((Random.int 0) (f_1283 x_1219))
    f_1283 x_1219 x_1232 | true = ((Random.int 0) (f_1284 x_1219
                                                          x_1232))
    f_1284 x_1219 x_1232 x_1245 | true = (main_1034 x_1219
                                                    x_1232
                                                    x_1245
                                                    (f_1285 x_1219
                                                            x_1232
                                                            x_1245))
    f_1285 x_1219 x_1232 x_1245 x_1216 | true = end
    f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122 x_1125 | true = (gib_1030
                                                                  a_1031
                                                                  b_1032
                                                                  (n_1033 - 2)
                                                                  (f_gib_1280 a_1031
                                                                    b_1032
                                                                    n_1033
                                                                    x_1125
                                                                    k_gib_1122))
    f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122 x_1126 | true = (
    k_gib_1122 (x_1125 + x_1126))
    f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 | (x_1185 >= 0) = (
    k_main_1178 ())
    f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 | (not (
                                                                    x_1185 >= 0)) = (
    fail_1288 true
              k_main_1178)
    fail_1288 b k | true = (fail ())
    gib_1030 a_1031 b_1032 n_1033 k_gib_1122 | (n_1033 = 0) = (k_gib_1122 a_1031)
    gib_1030 a_1031 b_1032 n_1033 k_gib_1122 | (not (n_1033 = 0)) = (
    br_gib_1286 (n_1033 = 1)
                a_1031
                b_1032
                n_1033
                k_gib_1122)
    k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 | b_1213 = (gib_1030
                                                                    a_1036
                                                                    b_1037
                                                                    n_1035
                                                                    (
                                                                    f_k_main_1281
                                                                    a_1036
                                                                    b_1037
                                                                    b_1213
                                                                    n_1035
                                                                    k_main_1178))
    k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 | (not b_1213) = (
    k_main_1178 ())
    main_1034 n_1035 a_1036 b_1037 k_main_1178 | (a_1036 >= 0) = (k_main_1181
                                                                    a_1036
                                                                    b_1037
                                                                    n_1035
                                                                    k_main_1178
                                                                    (
                                                                    b_1037 >= 0))
    main_1034 n_1035 a_1036 b_1037 k_main_1178 | (not (a_1036 >= 0)) = (
    k_main_1181 a_1036
                b_1037
                n_1035
                k_main_1178
                false)
    main_1278:X
    br_gib_1286:bool -> int -> int -> int -> (int -> X) -> X
    f_1282:int -> X
    f_1283:int -> int -> X
    f_1284:int -> int -> int -> X
    f_1285:int -> int -> int -> unit -> X
    f_gib_1279:int -> int -> int -> (int -> X) -> int -> X
    f_gib_1280:int -> int -> int -> int -> (int -> X) -> int -> X
    f_k_main_1281:int -> int -> bool -> int -> (unit -> X) -> int -> X
    fail_1288:bool -> (unit -> X) -> X
    gib_1030:int -> int -> int -> (int -> X) -> X
    k_main_1181:int -> int -> int -> (unit -> X) -> bool -> X
    main_1034:int -> int -> int -> (unit -> X) -> X
  inlined functions: br_gib_1286,f_1282,f_1283,f_1284,f_1285,f_gib_1279,f_gib_1280,f_k_main_1281,k_main_1181,main_1034
  counterexample: 0:0:0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1282@4:0> = var2)
     [true.nop((<f_1283@7:0> = <f_1282@4:0>) && (<f_1283@7:1> = var3))
      [true.nop((<f_1284@10:0> = <f_1283@7:0>) && ((<f_1284@10:1> = <f_1283@7:1>) && (<f_1284@10:2> = var4)))
       [true.
        ((<main_1034@12:0> = <f_1284@10:0>) &&
         ((<main_1034@12:1> = <f_1284@10:1>) && (<main_1034@12:2> = <f_1284@10:2>)))
        [(<main_1034@12:1> >= 0).
         ((<k_main_1181@15:0> = <main_1034@12:1>) &&
          ((<k_main_1181@15:1> = <main_1034@12:2>) &&
           ((<k_main_1181@15:2> = <main_1034@12:0>) && (<k_main_1181@15:4> = (<main_1034@12:2> >= 0)))))
         [<k_main_1181@15:4>.
          ((<gib_1030@18:0> = <k_main_1181@15:0>) &&
           ((<gib_1030@18:1> = <k_main_1181@15:1>) && (<gib_1030@18:2> = <k_main_1181@15:2>)))
          [(not (<gib_1030@18:2> = 0)).
           ((<br_gib_1286@21:0> = (<gib_1030@18:2> = 1)) &&
            ((<br_gib_1286@21:1> = <gib_1030@18:0>) &&
             ((<br_gib_1286@21:2> = <gib_1030@18:1>) && (<br_gib_1286@21:3> = <gib_1030@18:2>))))
           [<br_gib_1286@21:0>.(<<br_gib_1286@21:4>@24:0> = <br_gib_1286@21:2>)
            [true.(<<gib_1030@18:3>@26:0> = <<br_gib_1286@21:4>@24:0>)
             [true.
              ((<f_k_main_1281@28:0> = <k_main_1181@15:0>) &&
               ((<f_k_main_1281@28:1> = <k_main_1181@15:1>) &&
                ((<f_k_main_1281@28:2> = <k_main_1181@15:4>) &&
                 ((<f_k_main_1281@28:3> = <k_main_1181@15:2>) && (<f_k_main_1281@28:5> = <<gib_1030@18:3>@26:0>)))))
              [(not (<f_k_main_1281@28:5> >= 0)).(<fail_1288@31:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(172)[2]
    horn clauses:
      P[<fail_1288@31:0>](<fail_1288@31:0>:bool)|- bot
      
      P[<f_k_main_1281@28:5>](<f_k_main_1281@28:0>:int,<f_k_main_1281@28:1>:int,<f_k_main_1281@28:2>:bool,<f_k_main_1281@28:3>:int,<f_k_main_1281@28:5>:int),
      ((<f_k_main_1281@28:5> < 0) && <fail_1288@31:0>) |- P[<fail_1288@31:0>](
      <fail_1288@31:0>:bool)
      
      P[<k_main_1181@15:4>](<f_k_main_1281@28:0>:int,<f_k_main_1281@28:1>:int,<f_k_main_1281@28:3>:int,<f_k_main_1281@28:2>:bool),
      P[<<gib_1030@18:3>@26:0>](<f_k_main_1281@28:0>:int,<f_k_main_1281@28:1>:int,<f_k_main_1281@28:3>:int,<f_k_main_1281@28:5>:int),
      <f_k_main_1281@28:2>
      |- P[<f_k_main_1281@28:5>](<f_k_main_1281@28:0>:int,<f_k_main_1281@28:1>:int,
                                 <f_k_main_1281@28:2>:bool,<f_k_main_1281@28:3>:int,
                                 <f_k_main_1281@28:5>:int)
      
      P[<gib_1030@18:2>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,<gib_1030@18:2>:int),
      P[<<br_gib_1286@21:4>@24:0>]((<gib_1030@18:2> = 1):bool,<gib_1030@18:0>:int,<gib_1030@18:1>:int,<gib_1030@18:2>:int,<<gib_1030@18:3>@26:0>:int),
      (<gib_1030@18:2> <> 0)
      |- P[<<gib_1030@18:3>@26:0>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,
                                   <gib_1030@18:2>:int,<<gib_1030@18:3>@26:0>:int)
      
      P[<br_gib_1286@21:3>](<br_gib_1286@21:0>:bool,<br_gib_1286@21:1>:int,<br_gib_1286@21:2>:int,<br_gib_1286@21:3>:int),
      ((<<br_gib_1286@21:4>@24:0> = <br_gib_1286@21:2>) && <br_gib_1286@21:0>)
      |- P[<<br_gib_1286@21:4>@24:0>](<br_gib_1286@21:0>:bool,<br_gib_1286@21:1>:int,
                                      <br_gib_1286@21:2>:int,<br_gib_1286@21:3>:int,
                                      <<br_gib_1286@21:4>@24:0>:int)
      
      P[<gib_1030@18:2>](<br_gib_1286@21:1>:int,<br_gib_1286@21:2>:int,<br_gib_1286@21:3>:int),
      ((<br_gib_1286@21:3> <> 0) && (<br_gib_1286@21:0> = (<br_gib_1286@21:3> = 1)))
      |- P[<br_gib_1286@21:3>](<br_gib_1286@21:0>:bool,<br_gib_1286@21:1>:int,
                               <br_gib_1286@21:2>:int,<br_gib_1286@21:3>:int)
      
      P[<k_main_1181@15:4>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,<gib_1030@18:2>:int,true:bool)|- P[<gib_1030@18:2>](
      <gib_1030@18:0>:int,<gib_1030@18:1>:int,<gib_1030@18:2>:int)
      
      P[<main_1034@12:2>](<k_main_1181@15:2>:int,<k_main_1181@15:0>:int,<k_main_1181@15:1>:int),
      ((<k_main_1181@15:0> >= 0) && (<k_main_1181@15:4> = (<k_main_1181@15:1> >= 0)))
      |- P[<k_main_1181@15:4>](<k_main_1181@15:0>:int,<k_main_1181@15:1>:int,
                               <k_main_1181@15:2>:int,<k_main_1181@15:4>:bool)
      
      P[<f_1284@10:2>](<main_1034@12:0>:int,<main_1034@12:1>:int,<main_1034@12:2>:int)|- P[<main_1034@12:2>](
      <main_1034@12:0>:int,<main_1034@12:1>:int,<main_1034@12:2>:int)
      
      P[<f_1283@7:1>](<f_1284@10:0>:int,<f_1284@10:1>:int)|- P[<f_1284@10:2>](
      <f_1284@10:0>:int,<f_1284@10:1>:int,<f_1284@10:2>:int)
      
      P[<f_1282@4:0>](<f_1283@7:0>:int)|- P[<f_1283@7:1>](<f_1283@7:0>:int,
                                                          <f_1283@7:1>:int)
      
      |- P[<f_1282@4:0>](<f_1282@4:0>:int)
    call trees:
      <main_1278@1>
        <f_1282@4>
          <f_1283@7>
            <f_1284@10>
              <main_1034@12>
                <k_main_1181@15>
                  <gib_1030@18>
                    <br_gib_1286@21>
                    </<br_gib_1286@21:4>@24>
                  </<gib_1030@18:3>@26>
                  <f_k_main_1281@28>
                    <fail_1288@31>
    inlined horn clauses:
      P[<fail_1288@31:0>](<fail_1288@31:0>:bool)|- bot
      
      P[<<gib_1030@18:3>@26:0>](<f_k_main_1281@28:0>:int,<f_k_main_1281@28:1>:int,<f_k_main_1281@28:3>:int,<f_k_main_1281@28:5>:int),
      ((<f_k_main_1281@28:1> >= 0) && ((<f_k_main_1281@28:0> >= 0) && ((<f_k_main_1281@28:5> < 0) && <fail_1288@31:0>)))
      |- P[<fail_1288@31:0>](<fail_1288@31:0>:bool)
      
      P[<gib_1030@18:2>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,<gib_1030@18:2>:int),
      ((<gib_1030@18:2> = 1) && (<<gib_1030@18:3>@26:0> = <gib_1030@18:1>))
      |- P[<<gib_1030@18:3>@26:0>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,
                                   <gib_1030@18:2>:int,<<gib_1030@18:3>@26:0>:int)
      
       ((<gib_1030@18:0> >= 0) && (<gib_1030@18:1> >= 0))
      |- P[<gib_1030@18:2>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,<gib_1030@18:2>:int)
    begin ParamSubstInfer.infer(2329)[3]
      
    end ParamSubstInfer.infer(2329)[3] (0.018997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(2331)[3]
      
    end RefTypeInfer.elim_coeffs(2331)[3] (0.000000 sec.)
    begin YhornInterface.solve(2634)[3]
      begin HcSolver.solve_ub(2635)[4]
        encoded:
          P[<fail_1288@31:0>](<fail_1288@31:0>:int)|- bot
          
          P[<<gib_1030@18:3>@26:0>](<f_k_main_1281@28:0>:int,<f_k_main_1281@28:1>:int,<f_k_main_1281@28:3>:int,<f_k_main_1281@28:5>:int),
          ((<f_k_main_1281@28:1> >= 0) &&
           ((<f_k_main_1281@28:0> >= 0) && ((<f_k_main_1281@28:5> < 0) && (<fail_1288@31:0> = 1))))
          |- P[<fail_1288@31:0>](<fail_1288@31:0>:int)
          
          P[<gib_1030@18:2>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,<gib_1030@18:2>:int),
          ((<gib_1030@18:2> = 1) && (<<gib_1030@18:3>@26:0> = <gib_1030@18:1>))
          |- P[<<gib_1030@18:3>@26:0>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,
                                       <gib_1030@18:2>:int,<<gib_1030@18:3>@26:0>:int)
          
           ((<gib_1030@18:0> >= 0) && (<gib_1030@18:1> >= 0))
          |- P[<gib_1030@18:2>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,
                                <gib_1030@18:2>:int)
        input to Yhorn:
          P[<fail_1288@31:0>](<fail_1288@31:0>:int)|- bot
          
          P[<<gib_1030@18:3>@26:0>](<f_k_main_1281@28:0>:int,<f_k_main_1281@28:1>:int,<f_k_main_1281@28:3>:int,<f_k_main_1281@28:5>:int),
          ((<f_k_main_1281@28:5> < 0) &&
           ((<f_k_main_1281@28:0> >= 0) && ((<f_k_main_1281@28:1> >= 0) && (<fail_1288@31:0> = 1))))
          |- P[<fail_1288@31:0>](<fail_1288@31:0>:int)
          
          P[<gib_1030@18:2>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,<gib_1030@18:2>:int),
          ((<<gib_1030@18:3>@26:0> = <gib_1030@18:1>) && (<gib_1030@18:2> = 1))
          |- P[<<gib_1030@18:3>@26:0>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,
                                       <gib_1030@18:2>:int,<<gib_1030@18:3>@26:0>:int)
          
           ((<gib_1030@18:1> >= 0) && (<gib_1030@18:0> >= 0))
          |- P[<gib_1030@18:2>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,
                                <gib_1030@18:2>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1288_sep_31_sep_0($10)) -> 1=0.
(($10-1=0) & ($11>=0) & ($12>=0) & ($13<0)) & (v_sep_gib_1030_sep_18_sep_3_sep_26_sep_0($12,$11,$14,$13)) -> v_sep_fail_1288_sep_31_sep_0($10).
(($15-1=0) & ($16-$17=0)) & (v_sep_gib_1030_sep_18_sep_2($18,$17,$15)) -> v_sep_gib_1030_sep_18_sep_3_sep_26_sep_0($18,$17,$15,$16).
($18>=0) & ($17>=0) -> v_sep_gib_1030_sep_18_sep_2($18,$17,$15).


v_sep_fail_1288_sep_31_sep_0: X
v_sep_gib_1030_sep_18_sep_2: X
v_sep_gib_1030_sep_18_sep_3_sep_26_sep_0: X
....
v_sep_fail_1288_sep_31_sep_0: X
v_sep_gib_1030_sep_18_sep_2: X
v_sep_gib_1030_sep_18_sep_3_sep_26_sep_0: X
...
v_sep_fail_1288_sep_31_sep_0: X
v_sep_gib_1030_sep_18_sep_2: X
v_sep_gib_1030_sep_18_sep_3_sep_26_sep_0: X
....
v_sep_fail_1288_sep_31_sep_0: X
v_sep_gib_1030_sep_18_sep_2: X
v_sep_gib_1030_sep_18_sep_3_sep_26_sep_0: X
....(0=0) & (v_sep_fail_1288_sep_31_sep_0($10)) -> 1=0.
(($10-1=0) & ($11>=0) & ($12>=0) & ($13<0)) & (v_sep_gib_1030_sep_18_sep_3_sep_26_sep_0($12,$11,$14,$13)) -> v_sep_fail_1288_sep_31_sep_0($10).
(($15-1=0) & ($16-$17=0)) & (v_sep_gib_1030_sep_18_sep_2($18,$17,$15)) -> v_sep_gib_1030_sep_18_sep_3_sep_26_sep_0($18,$17,$15,$16).
($18>=0) & ($17>=0) -> v_sep_gib_1030_sep_18_sep_2($18,$17,$15).

        solution:
          P[<fail_1288@31:0>]($19:bool) = false
          P[<gib_1030@18:2>]($31:int,$33:int,$35:int) = true
          P[<<gib_1030@18:3>@26:0>]($22:int,$24:int,$26:int,$28:int) = ($24 <= $28)
        
      end HcSolver.solve_ub(2635)[4] (0.016998 sec.)
      begin HcSolver.check_validity(2847)[4]
        input:
          P[<fail_1288@31:0>](<fail_1288@31:0>:bool)|- bot
          
          P[<<gib_1030@18:3>@26:0>](<f_k_main_1281@28:0>:int,<f_k_main_1281@28:1>:int,<f_k_main_1281@28:3>:int,<f_k_main_1281@28:5>:int),
          ((<f_k_main_1281@28:1> >= 0) &&
           ((<f_k_main_1281@28:0> >= 0) && ((<f_k_main_1281@28:5> < 0) && <fail_1288@31:0>)))
          |- P[<fail_1288@31:0>](<fail_1288@31:0>:bool)
          
          P[<gib_1030@18:2>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,<gib_1030@18:2>:int),
          ((<gib_1030@18:2> = 1) && (<<gib_1030@18:3>@26:0> = <gib_1030@18:1>))
          |- P[<<gib_1030@18:3>@26:0>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,
                                       <gib_1030@18:2>:int,<<gib_1030@18:3>@26:0>:int)
          
           ((<gib_1030@18:0> >= 0) && (<gib_1030@18:1> >= 0))
          |- P[<gib_1030@18:2>](<gib_1030@18:0>:int,<gib_1030@18:1>:int,
                                <gib_1030@18:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(2847)[4] (0.003999 sec.)
      solution:
        P[<fail_1288@31:0>]($19:bool) = false
        P[<gib_1030@18:2>]($31:int,$33:int,$35:int) = true
        P[<<gib_1030@18:3>@26:0>]($22:int,$24:int,$26:int,$28:int) = ($24 <= $28)
    end YhornInterface.solve(2634)[3] (0.020997 sec.)
    
  end RefTypeInfer.infer_etrs(172)[2] (0.052992 sec.)
  refinement types:
    main_1278: X
    f_1282: v1:int -> X
    f_1283: v1:int -> v2:int -> X
    f_1284: v1:int -> v2:int -> v3:int -> X
    main_1034: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1181: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    gib_1030: v1:int -> v2:int -> v3:int -> (v4:{v4:int | (v2 <= v4)} -> X) -> X
    br_gib_1286: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> X
    f_k_main_1281: v1:int -> v2:int -> v3:bool -> v4:int -> (v5:unit -> X) -> v7:int -> X
    fail_1288: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1285: var17:int -> var16:int -> var15:int -> var14:unit -> X
    f_gib_1279: var24:int -> var23:int -> var22:int -> (var21:int -> X) -> var19:int -> X
    f_gib_1280: var32:int -> var31:int -> var30:int -> var29:int -> (var28:int -> X) -> var26:int -> X
  abstraction types:
    main_1278: X
    f_1282: v1:int -> X
    f_1283: v1:int -> v2:int -> X
    f_1284: v1:int -> v2:int -> v3:int -> X
    main_1034: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1181: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    gib_1030: v1:int -> v2:int -> v3:int -> (v4:int[v4 -> (v2 <= v4)] -> X) -> X
    br_gib_1286: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> X
    f_k_main_1281: v1:int -> v2:int -> v3:bool -> v4:int -> (v5:unit -> X) -> v7:int -> X
    fail_1288: v1:bool -> (v2:unit -> X) -> X
    f_1285: var17:int -> var16:int -> var15:int -> var14:unit -> X
    f_gib_1279: var24:int -> var23:int -> var22:int -> (var21:int -> X) -> var19:int -> X
    f_gib_1280: var32:int -> var31:int -> var30:int -> var29:int -> (var28:int -> X) -> var26:int -> X
  
end AbsTypeInfer.refine(171)[1] (0.055991 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1278
  main_1278 -> (rand_int f_1282)
  br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 when b_1287 -> (k_gib_1122 b_1032)
  br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 when (not b_1287) ->
      (gib_1030 a_1031 b_1032 (n_1033 - 1) (f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122))
  f_1282 x_1219 -> (rand_int (f_1283 x_1219))
  f_1283 x_1219 x_1232 -> (rand_int (f_1284 x_1219 x_1232))
  f_1284 x_1219 x_1232 x_1245 -> (main_1034 x_1219 x_1232 x_1245 (f_1285 x_1219 x_1232 x_1245))
  f_1285 x_1219 x_1232 x_1245 x_1216 -> end
  f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122 x_1125 ->
      (gib_1030 a_1031 b_1032 (n_1033 - 2) (f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122))
  f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122 x_1126 -> (k_gib_1122 (x_1125 + x_1126))
  f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 when (x_1185 >= 0) -> (k_main_1178 ())
  f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 when (not (x_1185 >= 0)) -> (fail_1288 true k_main_1178)
  fail_1288 b k -> {fail} => (k ())
  gib_1030 a_1031 b_1032 n_1033 k_gib_1122 when (n_1033 = 0) -> (k_gib_1122 a_1031)
  gib_1030 a_1031 b_1032 n_1033 k_gib_1122 when (not (n_1033 = 0)) ->
      (br_gib_1286 (n_1033 = 1) a_1031 b_1032 n_1033 k_gib_1122)
  k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 when b_1213 ->
      (gib_1030 a_1036 b_1037 n_1035 (f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178))
  k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 when (not b_1213) -> (k_main_1178 ())
  main_1034 n_1035 a_1036 b_1037 k_main_1178 when (a_1036 >= 0) ->
      (k_main_1181 a_1036 b_1037 n_1035 k_main_1178 (b_1037 >= 0))
  main_1034 n_1035 a_1036 b_1037 k_main_1178 when (not (a_1036 >= 0)) ->
      (k_main_1181 a_1036 b_1037 n_1035 k_main_1178 false)
Types:
  main_1278 : X
  fail_1288 : (x_1:bool[x_1] -> (unit -> X) -> X)
  gib_1030 : (int -> x_2:int -> int -> (x_5:int[x_2 <= x_5] -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1278 ... --> 
  f_1282 ... --> 
  f_1283 ... --> 
  f_1284 ... --> 
  main_1034 [1/2] ... --> 
  k_main_1181 [1/2] ... --> 
  gib_1030 [1/2] ... --> 
  f_k_main_1281 [2/2] ... --> 
  fail_1288 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(3538)[1]
  program:
    main_1278  | true = ((Random.int 0) f_1282)
    br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 | b_1287 = (k_gib_1122 b_1032)
    br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 | (not b_1287) = (
    gib_1030 a_1031
             b_1032
             (n_1033 - 1)
             (f_gib_1279 a_1031
                         b_1032
                         n_1033
                         k_gib_1122))
    f_1282 x_1219 | true = ((Random.int 0) (f_1283 x_1219))
    f_1283 x_1219 x_1232 | true = ((Random.int 0) (f_1284 x_1219
                                                          x_1232))
    f_1284 x_1219 x_1232 x_1245 | true = (main_1034 x_1219
                                                    x_1232
                                                    x_1245
                                                    (f_1285 x_1219
                                                            x_1232
                                                            x_1245))
    f_1285 x_1219 x_1232 x_1245 x_1216 | true = end
    f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122 x_1125 | true = (gib_1030
                                                                  a_1031
                                                                  b_1032
                                                                  (n_1033 - 2)
                                                                  (f_gib_1280 a_1031
                                                                    b_1032
                                                                    n_1033
                                                                    x_1125
                                                                    k_gib_1122))
    f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122 x_1126 | true = (
    k_gib_1122 (x_1125 + x_1126))
    f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 | (x_1185 >= 0) = (
    k_main_1178 ())
    f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 | (not (
                                                                    x_1185 >= 0)) = (
    fail_1288 true
              k_main_1178)
    fail_1288 b k | true = (fail ())
    gib_1030 a_1031 b_1032 n_1033 k_gib_1122 | (n_1033 = 0) = (k_gib_1122 a_1031)
    gib_1030 a_1031 b_1032 n_1033 k_gib_1122 | (not (n_1033 = 0)) = (
    br_gib_1286 (n_1033 = 1)
                a_1031
                b_1032
                n_1033
                k_gib_1122)
    k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 | b_1213 = (gib_1030
                                                                    a_1036
                                                                    b_1037
                                                                    n_1035
                                                                    (
                                                                    f_k_main_1281
                                                                    a_1036
                                                                    b_1037
                                                                    b_1213
                                                                    n_1035
                                                                    k_main_1178))
    k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 | (not b_1213) = (
    k_main_1178 ())
    main_1034 n_1035 a_1036 b_1037 k_main_1178 | (a_1036 >= 0) = (k_main_1181
                                                                    a_1036
                                                                    b_1037
                                                                    n_1035
                                                                    k_main_1178
                                                                    (
                                                                    b_1037 >= 0))
    main_1034 n_1035 a_1036 b_1037 k_main_1178 | (not (a_1036 >= 0)) = (
    k_main_1181 a_1036
                b_1037
                n_1035
                k_main_1178
                false)
    main_1278:X
    br_gib_1286:bool -> int -> int -> int -> (int -> X) -> X
    f_1282:int -> X
    f_1283:int -> int -> X
    f_1284:int -> int -> int -> X
    f_1285:int -> int -> int -> unit -> X
    f_gib_1279:int -> int -> int -> (int -> X) -> int -> X
    f_gib_1280:int -> int -> int -> int -> (int -> X) -> int -> X
    f_k_main_1281:int -> int -> bool -> int -> (unit -> X) -> int -> X
    fail_1288:bool -> (unit -> X) -> X
    gib_1030:int -> int -> int -> (int -> X) -> X
    k_main_1181:int -> int -> int -> (unit -> X) -> bool -> X
    main_1034:int -> int -> int -> (unit -> X) -> X
  inlined functions: br_gib_1286,f_1282,f_1283,f_1284,f_1285,f_gib_1279,f_gib_1280,f_k_main_1281,k_main_1181,main_1034
  counterexample: 0:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1282@37:0> = var33)
     [true.nop((<f_1283@40:0> = <f_1282@37:0>) && (<f_1283@40:1> = var34))
      [true.nop((<f_1284@43:0> = <f_1283@40:0>) && ((<f_1284@43:1> = <f_1283@40:1>) && (<f_1284@43:2> = var35)))
       [true.
        ((<main_1034@45:0> = <f_1284@43:0>) &&
         ((<main_1034@45:1> = <f_1284@43:1>) && (<main_1034@45:2> = <f_1284@43:2>)))
        [(<main_1034@45:1> >= 0).
         ((<k_main_1181@48:0> = <main_1034@45:1>) &&
          ((<k_main_1181@48:1> = <main_1034@45:2>) &&
           ((<k_main_1181@48:2> = <main_1034@45:0>) && (<k_main_1181@48:4> = (<main_1034@45:2> >= 0)))))
         [<k_main_1181@48:4>.
          ((<gib_1030@51:0> = <k_main_1181@48:0>) &&
           ((<gib_1030@51:1> = <k_main_1181@48:1>) && (<gib_1030@51:2> = <k_main_1181@48:2>)))
          [(<gib_1030@51:2> = 0).(<<gib_1030@51:3>@54:0> = <gib_1030@51:0>)
           [true.
            ((<f_k_main_1281@56:0> = <k_main_1181@48:0>) &&
             ((<f_k_main_1281@56:1> = <k_main_1181@48:1>) &&
              ((<f_k_main_1281@56:2> = <k_main_1181@48:4>) &&
               ((<f_k_main_1281@56:3> = <k_main_1181@48:2>) && (<f_k_main_1281@56:5> = <<gib_1030@51:3>@54:0>)))))
            [(not (<f_k_main_1281@56:5> >= 0)).(<fail_1288@59:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(3539)[2]
    horn clauses:
      P[<fail_1288@59:0>](<fail_1288@59:0>:bool)|- bot
      
      P[<f_k_main_1281@56:5>](<f_k_main_1281@56:0>:int,<f_k_main_1281@56:1>:int,<f_k_main_1281@56:2>:bool,<f_k_main_1281@56:3>:int,<f_k_main_1281@56:5>:int),
      ((<f_k_main_1281@56:5> < 0) && <fail_1288@59:0>) |- P[<fail_1288@59:0>](
      <fail_1288@59:0>:bool)
      
      P[<k_main_1181@48:4>](<f_k_main_1281@56:0>:int,<f_k_main_1281@56:1>:int,<f_k_main_1281@56:3>:int,<f_k_main_1281@56:2>:bool),
      P[<<gib_1030@51:3>@54:0>](<f_k_main_1281@56:0>:int,<f_k_main_1281@56:1>:int,<f_k_main_1281@56:3>:int,<f_k_main_1281@56:5>:int),
      <f_k_main_1281@56:2>
      |- P[<f_k_main_1281@56:5>](<f_k_main_1281@56:0>:int,<f_k_main_1281@56:1>:int,
                                 <f_k_main_1281@56:2>:bool,<f_k_main_1281@56:3>:int,
                                 <f_k_main_1281@56:5>:int)
      
      P[<gib_1030@51:2>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,<gib_1030@51:2>:int),
      ((<gib_1030@51:2> = 0) && (<<gib_1030@51:3>@54:0> = <gib_1030@51:0>))
      |- P[<<gib_1030@51:3>@54:0>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,
                                   <gib_1030@51:2>:int,<<gib_1030@51:3>@54:0>:int)
      
      P[<k_main_1181@48:4>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,<gib_1030@51:2>:int,true:bool)|- P[<gib_1030@51:2>](
      <gib_1030@51:0>:int,<gib_1030@51:1>:int,<gib_1030@51:2>:int)
      
      P[<main_1034@45:2>](<k_main_1181@48:2>:int,<k_main_1181@48:0>:int,<k_main_1181@48:1>:int),
      ((<k_main_1181@48:0> >= 0) && (<k_main_1181@48:4> = (<k_main_1181@48:1> >= 0)))
      |- P[<k_main_1181@48:4>](<k_main_1181@48:0>:int,<k_main_1181@48:1>:int,
                               <k_main_1181@48:2>:int,<k_main_1181@48:4>:bool)
      
      P[<f_1284@43:2>](<main_1034@45:0>:int,<main_1034@45:1>:int,<main_1034@45:2>:int)|- P[<main_1034@45:2>](
      <main_1034@45:0>:int,<main_1034@45:1>:int,<main_1034@45:2>:int)
      
      P[<f_1283@40:1>](<f_1284@43:0>:int,<f_1284@43:1>:int)|- P[<f_1284@43:2>](
      <f_1284@43:0>:int,<f_1284@43:1>:int,<f_1284@43:2>:int)
      
      P[<f_1282@37:0>](<f_1283@40:0>:int)|- P[<f_1283@40:1>](<f_1283@40:0>:int,
                                                             <f_1283@40:1>:int)
      
      |- P[<f_1282@37:0>](<f_1282@37:0>:int)
    call trees:
      <main_1278@34>
        <f_1282@37>
          <f_1283@40>
            <f_1284@43>
              <main_1034@45>
                <k_main_1181@48>
                  <gib_1030@51>
                  </<gib_1030@51:3>@54>
                  <f_k_main_1281@56>
                    <fail_1288@59>
    inlined horn clauses:
      P[<fail_1288@59:0>](<fail_1288@59:0>:bool)|- bot
      
      P[<<gib_1030@51:3>@54:0>](<f_k_main_1281@56:0>:int,<f_k_main_1281@56:1>:int,<f_k_main_1281@56:3>:int,<f_k_main_1281@56:5>:int),
      ((<f_k_main_1281@56:1> >= 0) && ((<f_k_main_1281@56:0> >= 0) && ((<f_k_main_1281@56:5> < 0) && <fail_1288@59:0>)))
      |- P[<fail_1288@59:0>](<fail_1288@59:0>:bool)
      
      P[<gib_1030@51:2>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,<gib_1030@51:2>:int),
      ((<gib_1030@51:2> = 0) && (<<gib_1030@51:3>@54:0> = <gib_1030@51:0>))
      |- P[<<gib_1030@51:3>@54:0>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,
                                   <gib_1030@51:2>:int,<<gib_1030@51:3>@54:0>:int)
      
       ((<gib_1030@51:0> >= 0) && (<gib_1030@51:1> >= 0))
      |- P[<gib_1030@51:2>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,<gib_1030@51:2>:int)
    begin ParamSubstInfer.infer(5141)[3]
      
    end ParamSubstInfer.infer(5141)[3] (0.043994 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(5143)[3]
      
    end RefTypeInfer.elim_coeffs(5143)[3] (0.002000 sec.)
    begin YhornInterface.solve(5438)[3]
      begin HcSolver.solve_ub(5439)[4]
        encoded:
          P[<fail_1288@59:0>](<fail_1288@59:0>:int)|- bot
          
          P[<<gib_1030@51:3>@54:0>](<f_k_main_1281@56:0>:int,<f_k_main_1281@56:1>:int,<f_k_main_1281@56:3>:int,<f_k_main_1281@56:5>:int),
          ((<f_k_main_1281@56:1> >= 0) &&
           ((<f_k_main_1281@56:0> >= 0) && ((<f_k_main_1281@56:5> < 0) && (<fail_1288@59:0> = 1))))
          |- P[<fail_1288@59:0>](<fail_1288@59:0>:int)
          
          P[<gib_1030@51:2>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,<gib_1030@51:2>:int),
          ((<gib_1030@51:2> = 0) && (<<gib_1030@51:3>@54:0> = <gib_1030@51:0>))
          |- P[<<gib_1030@51:3>@54:0>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,
                                       <gib_1030@51:2>:int,<<gib_1030@51:3>@54:0>:int)
          
           ((<gib_1030@51:0> >= 0) && (<gib_1030@51:1> >= 0))
          |- P[<gib_1030@51:2>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,
                                <gib_1030@51:2>:int)
        input to Yhorn:
          P[<fail_1288@59:0>](<fail_1288@59:0>:int)|- bot
          
          P[<<gib_1030@51:3>@54:0>](<f_k_main_1281@56:0>:int,<f_k_main_1281@56:1>:int,<f_k_main_1281@56:3>:int,<f_k_main_1281@56:5>:int),
          ((<f_k_main_1281@56:5> < 0) &&
           ((<f_k_main_1281@56:0> >= 0) && ((<f_k_main_1281@56:1> >= 0) && (<fail_1288@59:0> = 1))))
          |- P[<fail_1288@59:0>](<fail_1288@59:0>:int)
          
          P[<gib_1030@51:2>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,<gib_1030@51:2>:int),
          ((<<gib_1030@51:3>@54:0> = <gib_1030@51:0>) && (<gib_1030@51:2> = 0))
          |- P[<<gib_1030@51:3>@54:0>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,
                                       <gib_1030@51:2>:int,<<gib_1030@51:3>@54:0>:int)
          
           ((<gib_1030@51:1> >= 0) && (<gib_1030@51:0> >= 0))
          |- P[<gib_1030@51:2>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,
                                <gib_1030@51:2>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1288_sep_59_sep_0($95)) -> 1=0.
(($95-1=0) & ($96>=0) & ($97>=0) & ($98<0)) & (v_sep_gib_1030_sep_51_sep_3_sep_54_sep_0($97,$96,$99,$98)) -> v_sep_fail_1288_sep_59_sep_0($95).
(($100=0) & ($101-$102=0)) & (v_sep_gib_1030_sep_51_sep_2($102,$103,$100)) -> v_sep_gib_1030_sep_51_sep_3_sep_54_sep_0($102,$103,$100,$101).
($102>=0) & ($103>=0) -> v_sep_gib_1030_sep_51_sep_2($102,$103,$100).


v_sep_fail_1288_sep_59_sep_0: X
v_sep_gib_1030_sep_51_sep_2: X
v_sep_gib_1030_sep_51_sep_3_sep_54_sep_0: X
....
v_sep_fail_1288_sep_59_sep_0: X
v_sep_gib_1030_sep_51_sep_2: X
v_sep_gib_1030_sep_51_sep_3_sep_54_sep_0: X
...
v_sep_fail_1288_sep_59_sep_0: X
v_sep_gib_1030_sep_51_sep_2: X
v_sep_gib_1030_sep_51_sep_3_sep_54_sep_0: X
....
v_sep_fail_1288_sep_59_sep_0: X
v_sep_gib_1030_sep_51_sep_2: X
v_sep_gib_1030_sep_51_sep_3_sep_54_sep_0: X
....(0=0) & (v_sep_fail_1288_sep_59_sep_0($95)) -> 1=0.
(($95-1=0) & ($96>=0) & ($97>=0) & ($98<0)) & (v_sep_gib_1030_sep_51_sep_3_sep_54_sep_0($97,$96,$99,$98)) -> v_sep_fail_1288_sep_59_sep_0($95).
(($100=0) & ($101-$102=0)) & (v_sep_gib_1030_sep_51_sep_2($102,$103,$100)) -> v_sep_gib_1030_sep_51_sep_3_sep_54_sep_0($102,$103,$100,$101).
($102>=0) & ($103>=0) -> v_sep_gib_1030_sep_51_sep_2($102,$103,$100).

        solution:
          P[<fail_1288@59:0>]($104:bool) = false
          P[<gib_1030@51:2>]($116:int,$118:int,$120:int) = true
          P[<<gib_1030@51:3>@54:0>]($107:int,$109:int,$111:int,$113:int) = ($107 <= $113)
        
      end HcSolver.solve_ub(5439)[4] (0.012998 sec.)
      begin HcSolver.check_validity(5644)[4]
        input:
          P[<fail_1288@59:0>](<fail_1288@59:0>:bool)|- bot
          
          P[<<gib_1030@51:3>@54:0>](<f_k_main_1281@56:0>:int,<f_k_main_1281@56:1>:int,<f_k_main_1281@56:3>:int,<f_k_main_1281@56:5>:int),
          ((<f_k_main_1281@56:1> >= 0) &&
           ((<f_k_main_1281@56:0> >= 0) && ((<f_k_main_1281@56:5> < 0) && <fail_1288@59:0>)))
          |- P[<fail_1288@59:0>](<fail_1288@59:0>:bool)
          
          P[<gib_1030@51:2>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,<gib_1030@51:2>:int),
          ((<gib_1030@51:2> = 0) && (<<gib_1030@51:3>@54:0> = <gib_1030@51:0>))
          |- P[<<gib_1030@51:3>@54:0>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,
                                       <gib_1030@51:2>:int,<<gib_1030@51:3>@54:0>:int)
          
           ((<gib_1030@51:0> >= 0) && (<gib_1030@51:1> >= 0))
          |- P[<gib_1030@51:2>](<gib_1030@51:0>:int,<gib_1030@51:1>:int,
                                <gib_1030@51:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(5644)[4] (0.000999 sec.)
      solution:
        P[<fail_1288@59:0>]($104:bool) = false
        P[<gib_1030@51:2>]($116:int,$118:int,$120:int) = true
        P[<<gib_1030@51:3>@54:0>]($107:int,$109:int,$111:int,$113:int) = ($107 <= $113)
    end YhornInterface.solve(5438)[3] (0.013997 sec.)
    
  end RefTypeInfer.infer_etrs(3539)[2] (0.066990 sec.)
  refinement types:
    main_1278: X
    f_1282: v1:int -> X
    f_1283: v1:int -> v2:int -> X
    f_1284: v1:int -> v2:int -> v3:int -> X
    main_1034: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1181: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    gib_1030: v1:int -> v2:int -> v3:int -> (v4:{v4:int | (v1 <= v4)} -> X) -> X
    f_k_main_1281: v1:int -> v2:int -> v3:bool -> v4:int -> (v5:unit -> X) -> v7:int -> X
    fail_1288: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_gib_1286: var50:bool -> var49:int -> var48:int -> var47:int -> (var46:int -> X) -> X
    f_1285: var55:int -> var54:int -> var53:int -> var52:unit -> X
    f_gib_1279: var62:int -> var61:int -> var60:int -> (var59:int -> X) -> var57:int -> X
    f_gib_1280: var70:int -> var69:int -> var68:int -> var67:int -> (var66:int -> X) -> var64:int -> X
  abstraction types:
    main_1278: X
    f_1282: v1:int -> X
    f_1283: v1:int -> v2:int -> X
    f_1284: v1:int -> v2:int -> v3:int -> X
    main_1034: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1181: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    gib_1030: v1:int -> v2:int -> v3:int -> (v4:int[v4 -> (v1 <= v4)] -> X) -> X
    f_k_main_1281: v1:int -> v2:int -> v3:bool -> v4:int -> (v5:unit -> X) -> v7:int -> X
    fail_1288: v1:bool -> (v2:unit -> X) -> X
    br_gib_1286: var50:bool -> var49:int -> var48:int -> var47:int -> (var46:int -> X) -> X
    f_1285: var55:int -> var54:int -> var53:int -> var52:unit -> X
    f_gib_1279: var62:int -> var61:int -> var60:int -> (var59:int -> X) -> var57:int -> X
    f_gib_1280: var70:int -> var69:int -> var68:int -> var67:int -> (var66:int -> X) -> var64:int -> X
  
end AbsTypeInfer.refine(3538)[1] (0.069990 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1278
  main_1278 -> (rand_int f_1282)
  br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 when b_1287 -> (k_gib_1122 b_1032)
  br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 when (not b_1287) ->
      (gib_1030 a_1031 b_1032 (n_1033 - 1) (f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122))
  f_1282 x_1219 -> (rand_int (f_1283 x_1219))
  f_1283 x_1219 x_1232 -> (rand_int (f_1284 x_1219 x_1232))
  f_1284 x_1219 x_1232 x_1245 -> (main_1034 x_1219 x_1232 x_1245 (f_1285 x_1219 x_1232 x_1245))
  f_1285 x_1219 x_1232 x_1245 x_1216 -> end
  f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122 x_1125 ->
      (gib_1030 a_1031 b_1032 (n_1033 - 2) (f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122))
  f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122 x_1126 -> (k_gib_1122 (x_1125 + x_1126))
  f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 when (x_1185 >= 0) -> (k_main_1178 ())
  f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 when (not (x_1185 >= 0)) -> (fail_1288 true k_main_1178)
  fail_1288 b k -> {fail} => (k ())
  gib_1030 a_1031 b_1032 n_1033 k_gib_1122 when (n_1033 = 0) -> (k_gib_1122 a_1031)
  gib_1030 a_1031 b_1032 n_1033 k_gib_1122 when (not (n_1033 = 0)) ->
      (br_gib_1286 (n_1033 = 1) a_1031 b_1032 n_1033 k_gib_1122)
  k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 when b_1213 ->
      (gib_1030 a_1036 b_1037 n_1035 (f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178))
  k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 when (not b_1213) -> (k_main_1178 ())
  main_1034 n_1035 a_1036 b_1037 k_main_1178 when (a_1036 >= 0) ->
      (k_main_1181 a_1036 b_1037 n_1035 k_main_1178 (b_1037 >= 0))
  main_1034 n_1035 a_1036 b_1037 k_main_1178 when (not (a_1036 >= 0)) ->
      (k_main_1181 a_1036 b_1037 n_1035 k_main_1178 false)
Types:
  main_1278 : X
  fail_1288 : (x_1:bool[x_1] -> (unit -> X) -> X)
  gib_1030 : (x_1:int -> x_2:int -> int -> (x_5:int[x_1 <= x_5; x_2 <= x_5] -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1278 ... --> 
  f_1282 ... --> 
  f_1283 ... --> 
  f_1284 ... --> 
  main_1034 [1/2] ... --> 
  k_main_1181 [1/2] ... --> 
  gib_1030 [2/2] ... --> 
  br_gib_1286 [2/2] ... --> 
  gib_1030 [2/2] ... --> 
  br_gib_1286 [1/2] ... --> 
  f_gib_1279 ... --> 
  gib_1030 [2/2] ... --> 
  br_gib_1286 [1/2] ... --> 
  f_gib_1280 ... --> 
  f_k_main_1281 [2/2] ... --> 
  fail_1288 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 1; 1; 0; 0; 1; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(7013)[1]
  program:
    main_1278  | true = ((Random.int 0) f_1282)
    br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 | b_1287 = (k_gib_1122 b_1032)
    br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 | (not b_1287) = (
    gib_1030 a_1031
             b_1032
             (n_1033 - 1)
             (f_gib_1279 a_1031
                         b_1032
                         n_1033
                         k_gib_1122))
    f_1282 x_1219 | true = ((Random.int 0) (f_1283 x_1219))
    f_1283 x_1219 x_1232 | true = ((Random.int 0) (f_1284 x_1219
                                                          x_1232))
    f_1284 x_1219 x_1232 x_1245 | true = (main_1034 x_1219
                                                    x_1232
                                                    x_1245
                                                    (f_1285 x_1219
                                                            x_1232
                                                            x_1245))
    f_1285 x_1219 x_1232 x_1245 x_1216 | true = end
    f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122 x_1125 | true = (gib_1030
                                                                  a_1031
                                                                  b_1032
                                                                  (n_1033 - 2)
                                                                  (f_gib_1280 a_1031
                                                                    b_1032
                                                                    n_1033
                                                                    x_1125
                                                                    k_gib_1122))
    f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122 x_1126 | true = (
    k_gib_1122 (x_1125 + x_1126))
    f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 | (x_1185 >= 0) = (
    k_main_1178 ())
    f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 | (not (
                                                                    x_1185 >= 0)) = (
    fail_1288 true
              k_main_1178)
    fail_1288 b k | true = (fail ())
    gib_1030 a_1031 b_1032 n_1033 k_gib_1122 | (n_1033 = 0) = (k_gib_1122 a_1031)
    gib_1030 a_1031 b_1032 n_1033 k_gib_1122 | (not (n_1033 = 0)) = (
    br_gib_1286 (n_1033 = 1)
                a_1031
                b_1032
                n_1033
                k_gib_1122)
    k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 | b_1213 = (gib_1030
                                                                    a_1036
                                                                    b_1037
                                                                    n_1035
                                                                    (
                                                                    f_k_main_1281
                                                                    a_1036
                                                                    b_1037
                                                                    b_1213
                                                                    n_1035
                                                                    k_main_1178))
    k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 | (not b_1213) = (
    k_main_1178 ())
    main_1034 n_1035 a_1036 b_1037 k_main_1178 | (a_1036 >= 0) = (k_main_1181
                                                                    a_1036
                                                                    b_1037
                                                                    n_1035
                                                                    k_main_1178
                                                                    (
                                                                    b_1037 >= 0))
    main_1034 n_1035 a_1036 b_1037 k_main_1178 | (not (a_1036 >= 0)) = (
    k_main_1181 a_1036
                b_1037
                n_1035
                k_main_1178
                false)
    main_1278:X
    br_gib_1286:bool -> int -> int -> int -> (int -> X) -> X
    f_1282:int -> X
    f_1283:int -> int -> X
    f_1284:int -> int -> int -> X
    f_1285:int -> int -> int -> unit -> X
    f_gib_1279:int -> int -> int -> (int -> X) -> int -> X
    f_gib_1280:int -> int -> int -> int -> (int -> X) -> int -> X
    f_k_main_1281:int -> int -> bool -> int -> (unit -> X) -> int -> X
    fail_1288:bool -> (unit -> X) -> X
    gib_1030:int -> int -> int -> (int -> X) -> X
    k_main_1181:int -> int -> int -> (unit -> X) -> bool -> X
    main_1034:int -> int -> int -> (unit -> X) -> X
  inlined functions: br_gib_1286,f_1282,f_1283,f_1284,f_1285,f_gib_1279,f_gib_1280,f_k_main_1281,k_main_1181,main_1034
  counterexample: 0:0:0:0:0:0:1:1:1:0:0:1:0:0:1:0
  error traces:
    [true.nop(<f_1282@65:0> = var71)
     [true.nop((<f_1283@68:0> = <f_1282@65:0>) && (<f_1283@68:1> = var72))
      [true.nop((<f_1284@71:0> = <f_1283@68:0>) && ((<f_1284@71:1> = <f_1283@68:1>) && (<f_1284@71:2> = var73)))
       [true.
        ((<main_1034@73:0> = <f_1284@71:0>) &&
         ((<main_1034@73:1> = <f_1284@71:1>) && (<main_1034@73:2> = <f_1284@71:2>)))
        [(<main_1034@73:1> >= 0).
         ((<k_main_1181@76:0> = <main_1034@73:1>) &&
          ((<k_main_1181@76:1> = <main_1034@73:2>) &&
           ((<k_main_1181@76:2> = <main_1034@73:0>) && (<k_main_1181@76:4> = (<main_1034@73:2> >= 0)))))
         [<k_main_1181@76:4>.
          ((<gib_1030@79:0> = <k_main_1181@76:0>) &&
           ((<gib_1030@79:1> = <k_main_1181@76:1>) && (<gib_1030@79:2> = <k_main_1181@76:2>)))
          [(not (<gib_1030@79:2> = 0)).
           ((<br_gib_1286@82:0> = (<gib_1030@79:2> = 1)) &&
            ((<br_gib_1286@82:1> = <gib_1030@79:0>) &&
             ((<br_gib_1286@82:2> = <gib_1030@79:1>) && (<br_gib_1286@82:3> = <gib_1030@79:2>))))
           [(not <br_gib_1286@82:0>).
            ((<gib_1030@85:0> = <br_gib_1286@82:1>) &&
             ((<gib_1030@85:1> = <br_gib_1286@82:2>) && (<gib_1030@85:2> = (<br_gib_1286@82:3> - 1))))
            [(not (<gib_1030@85:2> = 0)).
             ((<br_gib_1286@88:0> = (<gib_1030@85:2> = 1)) &&
              ((<br_gib_1286@88:1> = <gib_1030@85:0>) &&
               ((<br_gib_1286@88:2> = <gib_1030@85:1>) && (<br_gib_1286@88:3> = <gib_1030@85:2>))))
             [<br_gib_1286@88:0>.(<<br_gib_1286@88:4>@91:0> = <br_gib_1286@88:2>)
              [true.(<<gib_1030@85:3>@93:0> = <<br_gib_1286@88:4>@91:0>)
               [true.
                ((<f_gib_1279@95:0> = <br_gib_1286@82:1>) &&
                 ((<f_gib_1279@95:1> = <br_gib_1286@82:2>) &&
                  ((<f_gib_1279@95:2> = <br_gib_1286@82:3>) && (<f_gib_1279@95:4> = <<gib_1030@85:3>@93:0>))))
                [true.
                 ((<gib_1030@97:0> = <f_gib_1279@95:0>) &&
                  ((<gib_1030@97:1> = <f_gib_1279@95:1>) && (<gib_1030@97:2> = (<f_gib_1279@95:2> - 2))))
                 [(not (<gib_1030@97:2> = 0)).
                  ((<br_gib_1286@100:0> = (<gib_1030@97:2> = 1)) &&
                   ((<br_gib_1286@100:1> = <gib_1030@97:0>) &&
                    ((<br_gib_1286@100:2> = <gib_1030@97:1>) && (<br_gib_1286@100:3> = <gib_1030@97:2>))))
                  [<br_gib_1286@100:0>.(<<br_gib_1286@100:4>@103:0> = <br_gib_1286@100:2>)
                   [true.(<<gib_1030@97:3>@105:0> = <<br_gib_1286@100:4>@103:0>)
                    [true.
                     ((<f_gib_1280@107:0> = <f_gib_1279@95:0>) &&
                      ((<f_gib_1280@107:1> = <f_gib_1279@95:1>) &&
                       ((<f_gib_1280@107:2> = <f_gib_1279@95:2>) &&
                        ((<f_gib_1280@107:3> = <f_gib_1279@95:4>) && (<f_gib_1280@107:5> = <<gib_1030@97:3>@105:0>)))))
                     [true.(<<f_gib_1280@107:4>@109:0> = (<f_gib_1280@107:3> + <f_gib_1280@107:5>))
                      [true.(<<f_gib_1279@95:3>@111:0> = <<f_gib_1280@107:4>@109:0>)
                       [true.(<<br_gib_1286@82:4>@113:0> = <<f_gib_1279@95:3>@111:0>)
                        [true.(<<gib_1030@79:3>@115:0> = <<br_gib_1286@82:4>@113:0>)
                         [true.
                          ((<f_k_main_1281@117:0> = <k_main_1181@76:0>) &&
                           ((<f_k_main_1281@117:1> = <k_main_1181@76:1>) &&
                            ((<f_k_main_1281@117:2> = <k_main_1181@76:4>) &&
                             ((<f_k_main_1281@117:3> = <k_main_1181@76:2>) &&
                              (<f_k_main_1281@117:5> = <<gib_1030@79:3>@115:0>)))))
                          [(not (<f_k_main_1281@117:5> >= 0)).(<fail_1288@120:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(7014)[2]
    horn clauses:
      P[<fail_1288@120:0>](<fail_1288@120:0>:bool)|- bot
      
      P[<f_k_main_1281@117:5>](<f_k_main_1281@117:0>:int,<f_k_main_1281@117:1>:int,<f_k_main_1281@117:2>:bool,<f_k_main_1281@117:3>:int,<f_k_main_1281@117:5>:int),
      ((<f_k_main_1281@117:5> < 0) && <fail_1288@120:0>) |- P[<fail_1288@120:0>](
      <fail_1288@120:0>:bool)
      
      P[<k_main_1181@76:4>](<f_k_main_1281@117:0>:int,<f_k_main_1281@117:1>:int,<f_k_main_1281@117:3>:int,<f_k_main_1281@117:2>:bool),
      P[<<gib_1030@79:3>@115:0>](<f_k_main_1281@117:0>:int,<f_k_main_1281@117:1>:int,<f_k_main_1281@117:3>:int,<f_k_main_1281@117:5>:int),
      <f_k_main_1281@117:2>
      |- P[<f_k_main_1281@117:5>](<f_k_main_1281@117:0>:int,<f_k_main_1281@117:1>:int,
                                  <f_k_main_1281@117:2>:bool,<f_k_main_1281@117:3>:int,
                                  <f_k_main_1281@117:5>:int)
      
      P[<gib_1030@79:2>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,<gib_1030@79:2>:int),
      P[<<br_gib_1286@82:4>@113:0>]((<gib_1030@79:2> = 1):bool,<gib_1030@79:0>:int,<gib_1030@79:1>:int,<gib_1030@79:2>:int,<<gib_1030@79:3>@115:0>:int),
      (<gib_1030@79:2> <> 0)
      |- P[<<gib_1030@79:3>@115:0>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,
                                    <gib_1030@79:2>:int,<<gib_1030@79:3>@115:0>:int)
      
      P[<br_gib_1286@82:3>](<br_gib_1286@82:0>:bool,<br_gib_1286@82:1>:int,<br_gib_1286@82:2>:int,<br_gib_1286@82:3>:int),
      P[<<f_gib_1279@95:3>@111:0>](<br_gib_1286@82:1>:int,<br_gib_1286@82:2>:int,<br_gib_1286@82:3>:int,<<br_gib_1286@82:4>@113:0>:int),
      (not <br_gib_1286@82:0>)
      |- P[<<br_gib_1286@82:4>@113:0>](<br_gib_1286@82:0>:bool,<br_gib_1286@82:1>:int,
                                       <br_gib_1286@82:2>:int,<br_gib_1286@82:3>:int,
                                       <<br_gib_1286@82:4>@113:0>:int)
      
      P[<f_gib_1279@95:4>](<f_gib_1279@95:0>:int,<f_gib_1279@95:1>:int,<f_gib_1279@95:2>:int,<f_gib_1280@107:3>:int),
      P[<<f_gib_1280@107:4>@109:0>](<f_gib_1279@95:0>:int,<f_gib_1279@95:1>:int,<f_gib_1279@95:2>:int,<f_gib_1280@107:3>:int,<<f_gib_1279@95:3>@111:0>:int)|- P[<<f_gib_1279@95:3>@111:0>](
      <f_gib_1279@95:0>:int,<f_gib_1279@95:1>:int,<f_gib_1279@95:2>:int,
      <<f_gib_1279@95:3>@111:0>:int)
      
      P[<f_gib_1280@107:5>](<f_gib_1280@107:0>:int,<f_gib_1280@107:1>:int,<f_gib_1280@107:2>:int,<f_gib_1280@107:3>:int,(
                            <<f_gib_1280@107:4>@109:0> + (-1 * <f_gib_1280@107:3>)):int)|- P[<<f_gib_1280@107:4>@109:0>](
      <f_gib_1280@107:0>:int,<f_gib_1280@107:1>:int,<f_gib_1280@107:2>:int,
      <f_gib_1280@107:3>:int,<<f_gib_1280@107:4>@109:0>:int)
      
      P[<f_gib_1279@95:4>](<f_gib_1280@107:0>:int,<f_gib_1280@107:1>:int,<f_gib_1280@107:2>:int,<f_gib_1280@107:3>:int),
      P[<<gib_1030@97:3>@105:0>](<f_gib_1280@107:0>:int,<f_gib_1280@107:1>:int,(
                                 -2 + <f_gib_1280@107:2>):int,<f_gib_1280@107:5>:int)|- P[<f_gib_1280@107:5>](
      <f_gib_1280@107:0>:int,<f_gib_1280@107:1>:int,<f_gib_1280@107:2>:int,
      <f_gib_1280@107:3>:int,<f_gib_1280@107:5>:int)
      
      P[<gib_1030@97:2>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,<gib_1030@97:2>:int),
      P[<<br_gib_1286@100:4>@103:0>]((<gib_1030@97:2> = 1):bool,<gib_1030@97:0>:int,<gib_1030@97:1>:int,<gib_1030@97:2>:int,<<gib_1030@97:3>@105:0>:int),
      (<gib_1030@97:2> <> 0)
      |- P[<<gib_1030@97:3>@105:0>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,
                                    <gib_1030@97:2>:int,<<gib_1030@97:3>@105:0>:int)
      
      P[<br_gib_1286@100:3>](<br_gib_1286@100:0>:bool,<br_gib_1286@100:1>:int,<br_gib_1286@100:2>:int,<br_gib_1286@100:3>:int),
      ((<<br_gib_1286@100:4>@103:0> = <br_gib_1286@100:2>) && <br_gib_1286@100:0>)
      |- P[<<br_gib_1286@100:4>@103:0>](<br_gib_1286@100:0>:bool,<br_gib_1286@100:1>:int,
                                        <br_gib_1286@100:2>:int,<br_gib_1286@100:3>:int,
                                        <<br_gib_1286@100:4>@103:0>:int)
      
      P[<gib_1030@97:2>](<br_gib_1286@100:1>:int,<br_gib_1286@100:2>:int,<br_gib_1286@100:3>:int),
      ((<br_gib_1286@100:3> <> 0) && (<br_gib_1286@100:0> = (<br_gib_1286@100:3> = 1)))
      |- P[<br_gib_1286@100:3>](<br_gib_1286@100:0>:bool,<br_gib_1286@100:1>:int,
                                <br_gib_1286@100:2>:int,<br_gib_1286@100:3>:int)
      
      P[<f_gib_1279@95:4>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,(2 + <gib_1030@97:2>):int,<f_gib_1279@95:4>:int)|- P[<gib_1030@97:2>](
      <gib_1030@97:0>:int,<gib_1030@97:1>:int,<gib_1030@97:2>:int)
      
      P[<br_gib_1286@82:3>](false:bool,<f_gib_1279@95:0>:int,<f_gib_1279@95:1>:int,<f_gib_1279@95:2>:int),
      P[<<gib_1030@85:3>@93:0>](<f_gib_1279@95:0>:int,<f_gib_1279@95:1>:int,(
                                -1 + <f_gib_1279@95:2>):int,<f_gib_1279@95:4>:int)|- P[<f_gib_1279@95:4>](
      <f_gib_1279@95:0>:int,<f_gib_1279@95:1>:int,<f_gib_1279@95:2>:int,
      <f_gib_1279@95:4>:int)
      
      P[<gib_1030@85:2>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,<gib_1030@85:2>:int),
      P[<<br_gib_1286@88:4>@91:0>]((<gib_1030@85:2> = 1):bool,<gib_1030@85:0>:int,<gib_1030@85:1>:int,<gib_1030@85:2>:int,<<gib_1030@85:3>@93:0>:int),
      (<gib_1030@85:2> <> 0)
      |- P[<<gib_1030@85:3>@93:0>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,
                                   <gib_1030@85:2>:int,<<gib_1030@85:3>@93:0>:int)
      
      P[<br_gib_1286@88:3>](<br_gib_1286@88:0>:bool,<br_gib_1286@88:1>:int,<br_gib_1286@88:2>:int,<br_gib_1286@88:3>:int),
      ((<<br_gib_1286@88:4>@91:0> = <br_gib_1286@88:2>) && <br_gib_1286@88:0>)
      |- P[<<br_gib_1286@88:4>@91:0>](<br_gib_1286@88:0>:bool,<br_gib_1286@88:1>:int,
                                      <br_gib_1286@88:2>:int,<br_gib_1286@88:3>:int,
                                      <<br_gib_1286@88:4>@91:0>:int)
      
      P[<gib_1030@85:2>](<br_gib_1286@88:1>:int,<br_gib_1286@88:2>:int,<br_gib_1286@88:3>:int),
      ((<br_gib_1286@88:3> <> 0) && (<br_gib_1286@88:0> = (<br_gib_1286@88:3> = 1)))
      |- P[<br_gib_1286@88:3>](<br_gib_1286@88:0>:bool,<br_gib_1286@88:1>:int,
                               <br_gib_1286@88:2>:int,<br_gib_1286@88:3>:int)
      
      P[<br_gib_1286@82:3>](false:bool,<gib_1030@85:0>:int,<gib_1030@85:1>:int,(
                            1 + <gib_1030@85:2>):int)|- P[<gib_1030@85:2>](
      <gib_1030@85:0>:int,<gib_1030@85:1>:int,<gib_1030@85:2>:int)
      
      P[<gib_1030@79:2>](<br_gib_1286@82:1>:int,<br_gib_1286@82:2>:int,<br_gib_1286@82:3>:int),
      ((<br_gib_1286@82:3> <> 0) && (<br_gib_1286@82:0> = (<br_gib_1286@82:3> = 1)))
      |- P[<br_gib_1286@82:3>](<br_gib_1286@82:0>:bool,<br_gib_1286@82:1>:int,
                               <br_gib_1286@82:2>:int,<br_gib_1286@82:3>:int)
      
      P[<k_main_1181@76:4>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,<gib_1030@79:2>:int,true:bool)|- P[<gib_1030@79:2>](
      <gib_1030@79:0>:int,<gib_1030@79:1>:int,<gib_1030@79:2>:int)
      
      P[<main_1034@73:2>](<k_main_1181@76:2>:int,<k_main_1181@76:0>:int,<k_main_1181@76:1>:int),
      ((<k_main_1181@76:0> >= 0) && (<k_main_1181@76:4> = (<k_main_1181@76:1> >= 0)))
      |- P[<k_main_1181@76:4>](<k_main_1181@76:0>:int,<k_main_1181@76:1>:int,
                               <k_main_1181@76:2>:int,<k_main_1181@76:4>:bool)
      
      P[<f_1284@71:2>](<main_1034@73:0>:int,<main_1034@73:1>:int,<main_1034@73:2>:int)|- P[<main_1034@73:2>](
      <main_1034@73:0>:int,<main_1034@73:1>:int,<main_1034@73:2>:int)
      
      P[<f_1283@68:1>](<f_1284@71:0>:int,<f_1284@71:1>:int)|- P[<f_1284@71:2>](
      <f_1284@71:0>:int,<f_1284@71:1>:int,<f_1284@71:2>:int)
      
      P[<f_1282@65:0>](<f_1283@68:0>:int)|- P[<f_1283@68:1>](<f_1283@68:0>:int,
                                                             <f_1283@68:1>:int)
      
      |- P[<f_1282@65:0>](<f_1282@65:0>:int)
    call trees:
      <main_1278@62>
        <f_1282@65>
          <f_1283@68>
            <f_1284@71>
              <main_1034@73>
                <k_main_1181@76>
                  <gib_1030@79>
                    <br_gib_1286@82>
                      <gib_1030@85>
                        <br_gib_1286@88>
                        </<br_gib_1286@88:4>@91>
                      </<gib_1030@85:3>@93>
                      <f_gib_1279@95>
                        <gib_1030@97>
                          <br_gib_1286@100>
                          </<br_gib_1286@100:4>@103>
                        </<gib_1030@97:3>@105>
                        <f_gib_1280@107>
                        </<f_gib_1280@107:4>@109>
                      </<f_gib_1279@95:3>@111>
                    </<br_gib_1286@82:4>@113>
                  </<gib_1030@79:3>@115>
                  <f_k_main_1281@117>
                    <fail_1288@120>
    inlined horn clauses:
      P[<fail_1288@120:0>](<fail_1288@120:0>:bool)|- bot
      
      P[<<gib_1030@79:3>@115:0>](<f_k_main_1281@117:0>:int,<f_k_main_1281@117:1>:int,<f_k_main_1281@117:3>:int,<f_k_main_1281@117:5>:int),
      ((<f_k_main_1281@117:1> >= 0) &&
       ((<f_k_main_1281@117:0> >= 0) && ((<f_k_main_1281@117:5> < 0) && <fail_1288@120:0>)))
      |- P[<fail_1288@120:0>](<fail_1288@120:0>:bool)
      
      P[<gib_1030@79:2>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,<gib_1030@79:2>:int),
      P[<<gib_1030@85:3>@93:0>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,(
                                -1 + <gib_1030@79:2>):int,var75:int),
      P[<<gib_1030@97:3>@105:0>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,(
                                 -2 + <gib_1030@79:2>):int,(<<gib_1030@79:3>@115:0> + (-1 * var75)):int),
      ((<gib_1030@79:2> <> 0) && (<gib_1030@79:2> <> 1))
      |- P[<<gib_1030@79:3>@115:0>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,
                                    <gib_1030@79:2>:int,<<gib_1030@79:3>@115:0>:int)
      
      P[<gib_1030@97:2>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,<gib_1030@97:2>:int),
      ((<gib_1030@97:2> = 1) && (<<gib_1030@97:3>@105:0> = <gib_1030@97:1>))
      |- P[<<gib_1030@97:3>@105:0>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,
                                    <gib_1030@97:2>:int,<<gib_1030@97:3>@105:0>:int)
      
      P[<gib_1030@79:2>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,(2 + <gib_1030@97:2>):int),
      P[<<gib_1030@85:3>@93:0>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,(
                                1 + <gib_1030@97:2>):int,<f_gib_1279@95:4>:int),
      (((2 + <gib_1030@97:2>) <> 0) && ((1 + <gib_1030@97:2>) <> 0))
      |- P[<gib_1030@97:2>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,<gib_1030@97:2>:int)
      
      P[<gib_1030@85:2>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,<gib_1030@85:2>:int),
      ((<gib_1030@85:2> = 1) && (<<gib_1030@85:3>@93:0> = <gib_1030@85:1>))
      |- P[<<gib_1030@85:3>@93:0>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,
                                   <gib_1030@85:2>:int,<<gib_1030@85:3>@93:0>:int)
      
      P[<gib_1030@79:2>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,(1 + <gib_1030@85:2>):int),
      (((1 + <gib_1030@85:2>) <> 0) && (<gib_1030@85:2> <> 0))
      |- P[<gib_1030@85:2>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,<gib_1030@85:2>:int)
      
       ((<gib_1030@79:0> >= 0) && (<gib_1030@79:1> >= 0))
      |- P[<gib_1030@79:2>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,<gib_1030@79:2>:int)
    begin ParamSubstInfer.infer(11738)[3]
      
    end ParamSubstInfer.infer(11738)[3] (0.239964 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(11740)[3]
      
    end RefTypeInfer.elim_coeffs(11740)[3] (0.001000 sec.)
    begin YhornInterface.solve(12339)[3]
      begin HcSolver.solve_ub(12340)[4]
        encoded:
          P[<fail_1288@120:0>](<fail_1288@120:0>:int)|- bot
          
          P[<<gib_1030@79:3>@115:0>](<f_k_main_1281@117:0>:int,<f_k_main_1281@117:1>:int,<f_k_main_1281@117:3>:int,<f_k_main_1281@117:5>:int),
          ((<f_k_main_1281@117:1> >= 0) &&
           ((<f_k_main_1281@117:0> >= 0) && ((<f_k_main_1281@117:5> < 0) && (<fail_1288@120:0> = 1))))
          |- P[<fail_1288@120:0>](<fail_1288@120:0>:int)
          
          P[<gib_1030@79:2>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,<gib_1030@79:2>:int),
          P[<<gib_1030@85:3>@93:0>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,(
                                    -1 + <gib_1030@79:2>):int,var75:int),
          P[<<gib_1030@97:3>@105:0>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,(
                                     -2 + <gib_1030@79:2>):int,(<<gib_1030@79:3>@115:0> + (-1 * var75)):int),
          ((<gib_1030@79:2> <> 0) && (<gib_1030@79:2> <> 1))
          |- P[<<gib_1030@79:3>@115:0>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,
                                        <gib_1030@79:2>:int,<<gib_1030@79:3>@115:0>:int)
          
          P[<gib_1030@97:2>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,<gib_1030@97:2>:int),
          ((<gib_1030@97:2> = 1) && (<<gib_1030@97:3>@105:0> = <gib_1030@97:1>))
          |- P[<<gib_1030@97:3>@105:0>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,
                                        <gib_1030@97:2>:int,<<gib_1030@97:3>@105:0>:int)
          
          P[<gib_1030@79:2>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,(
                             2 + <gib_1030@97:2>):int),
          P[<<gib_1030@85:3>@93:0>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,(
                                    1 + <gib_1030@97:2>):int,<f_gib_1279@95:4>:int),
          (((2 + <gib_1030@97:2>) <> 0) && ((1 + <gib_1030@97:2>) <> 0))
          |- P[<gib_1030@97:2>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,
                                <gib_1030@97:2>:int)
          
          P[<gib_1030@85:2>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,<gib_1030@85:2>:int),
          ((<gib_1030@85:2> = 1) && (<<gib_1030@85:3>@93:0> = <gib_1030@85:1>))
          |- P[<<gib_1030@85:3>@93:0>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,
                                       <gib_1030@85:2>:int,<<gib_1030@85:3>@93:0>:int)
          
          P[<gib_1030@79:2>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,(
                             1 + <gib_1030@85:2>):int), (((1 + <gib_1030@85:2>) <> 0) && (<gib_1030@85:2> <> 0))
          |- P[<gib_1030@85:2>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,
                                <gib_1030@85:2>:int)
          
           ((<gib_1030@79:0> >= 0) && (<gib_1030@79:1> >= 0))
          |- P[<gib_1030@79:2>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,
                                <gib_1030@79:2>:int)
        input to Yhorn:
          P[<fail_1288@120:0>](<fail_1288@120:0>:int)|- bot
          
          P[<<gib_1030@79:3>@115:0>](<f_k_main_1281@117:0>:int,<f_k_main_1281@117:1>:int,<f_k_main_1281@117:3>:int,<f_k_main_1281@117:5>:int),
          ((<f_k_main_1281@117:5> < 0) &&
           ((<f_k_main_1281@117:0> >= 0) && ((<f_k_main_1281@117:1> >= 0) && (<fail_1288@120:0> = 1))))
          |- P[<fail_1288@120:0>](<fail_1288@120:0>:int)
          
          P[<gib_1030@79:2>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,<gib_1030@79:2>:int),
          P[<<gib_1030@85:3>@93:0>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,var76:int,var75:int),
          P[<<gib_1030@97:3>@105:0>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,var77:int,var78:int),
          (((var78 + var75) = <<gib_1030@79:3>@115:0>) &&
           (((2 + var77) = <gib_1030@79:2>) &&
            (((1 + var76) = <gib_1030@79:2>) && ((<gib_1030@79:2> <> 1) && (<gib_1030@79:2> <> 0)))))
          |- P[<<gib_1030@79:3>@115:0>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,
                                        <gib_1030@79:2>:int,<<gib_1030@79:3>@115:0>:int)
          
          P[<gib_1030@97:2>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,<gib_1030@97:2>:int),
          ((<<gib_1030@97:3>@105:0> = <gib_1030@97:1>) && (<gib_1030@97:2> = 1))
          |- P[<<gib_1030@97:3>@105:0>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,
                                        <gib_1030@97:2>:int,<<gib_1030@97:3>@105:0>:int)
          
          P[<gib_1030@79:2>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,var79:int),
          P[<<gib_1030@85:3>@93:0>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,var80:int,<f_gib_1279@95:4>:int),
          ((var80 = (1 + <gib_1030@97:2>)) &&
           ((var79 = (2 + <gib_1030@97:2>)) && (((1 + <gib_1030@97:2>) <> 0) && ((2 + <gib_1030@97:2>) <> 0))))
          |- P[<gib_1030@97:2>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,
                                <gib_1030@97:2>:int)
          
          P[<gib_1030@85:2>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,<gib_1030@85:2>:int),
          ((<<gib_1030@85:3>@93:0> = <gib_1030@85:1>) && (<gib_1030@85:2> = 1))
          |- P[<<gib_1030@85:3>@93:0>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,
                                       <gib_1030@85:2>:int,<<gib_1030@85:3>@93:0>:int)
          
          P[<gib_1030@79:2>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,var81:int),
          ((var81 = (1 + <gib_1030@85:2>)) && ((<gib_1030@85:2> <> 0) && ((1 + <gib_1030@85:2>) <> 0)))
          |- P[<gib_1030@85:2>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,
                                <gib_1030@85:2>:int)
          
           ((<gib_1030@79:1> >= 0) && (<gib_1030@79:0> >= 0))
          |- P[<gib_1030@79:2>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,
                                <gib_1030@79:2>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1288_sep_120_sep_0($196)) -> 1=0.
(($196-1=0) & ($197>=0) & ($198>=0) & ($199<0)) & (v_sep_gib_1030_sep_79_sep_3_sep_115_sep_0($198,$197,$200,$199)) -> v_sep_fail_1288_sep_120_sep_0($196).
(($201<>0) & ($201-1<>0) & (-$201+$202+1=0) & (-$201+$203+2=0) & ($204+$205-$206=0)) & (v_sep_gib_1030_sep_97_sep_3_sep_105_sep_0($207,$208,$203,$204)) & (v_sep_gib_1030_sep_85_sep_3_sep_93_sep_0($207,$208,$202,$205)) & (v_sep_gib_1030_sep_79_sep_2($207,$208,$201)) -> v_sep_gib_1030_sep_79_sep_3_sep_115_sep_0($207,$208,$201,$206).
(($209-1=0) & ($210-$211=0)) & (v_sep_gib_1030_sep_97_sep_2($212,$211,$209)) -> v_sep_gib_1030_sep_97_sep_3_sep_105_sep_0($212,$211,$209,$210).
(($209+2<>0) & ($209+1<>0) & (-$209+$213-2=0) & (-$209+$214-1=0)) & (v_sep_gib_1030_sep_85_sep_3_sep_93_sep_0($212,$211,$214,$215)) & (v_sep_gib_1030_sep_79_sep_2($212,$211,$213)) -> v_sep_gib_1030_sep_97_sep_2($212,$211,$209).
(($216-1=0) & ($217-$218=0)) & (v_sep_gib_1030_sep_85_sep_2($219,$218,$216)) -> v_sep_gib_1030_sep_85_sep_3_sep_93_sep_0($219,$218,$216,$217).
(($216+1<>0) & ($216<>0) & (-$216+$220-1=0)) & (v_sep_gib_1030_sep_79_sep_2($219,$218,$220)) -> v_sep_gib_1030_sep_85_sep_2($219,$218,$216).
($207>=0) & ($208>=0) -> v_sep_gib_1030_sep_79_sep_2($207,$208,$201).


v_sep_fail_1288_sep_120_sep_0: X
v_sep_gib_1030_sep_79_sep_2: X
v_sep_gib_1030_sep_79_sep_3_sep_115_sep_0: X
v_sep_gib_1030_sep_85_sep_2: X
v_sep_gib_1030_sep_85_sep_3_sep_93_sep_0: X
v_sep_gib_1030_sep_97_sep_2: X
v_sep_gib_1030_sep_97_sep_3_sep_105_sep_0: X
.............................
v_sep_fail_1288_sep_120_sep_0: X
v_sep_gib_1030_sep_79_sep_2: X
v_sep_gib_1030_sep_79_sep_3_sep_115_sep_0: X
v_sep_gib_1030_sep_85_sep_2: X
v_sep_gib_1030_sep_85_sep_3_sep_93_sep_0: X
v_sep_gib_1030_sep_97_sep_2: X
v_sep_gib_1030_sep_97_sep_3_sep_105_sep_0: X
...
v_sep_fail_1288_sep_120_sep_0: X
v_sep_gib_1030_sep_79_sep_2: X
v_sep_gib_1030_sep_79_sep_3_sep_115_sep_0: X
v_sep_gib_1030_sep_85_sep_2: X
v_sep_gib_1030_sep_85_sep_3_sep_93_sep_0: X
v_sep_gib_1030_sep_97_sep_2: X
v_sep_gib_1030_sep_97_sep_3_sep_105_sep_0: X
...............
v_sep_fail_1288_sep_120_sep_0: X
v_sep_gib_1030_sep_79_sep_2: X
v_sep_gib_1030_sep_79_sep_3_sep_115_sep_0: X
v_sep_gib_1030_sep_85_sep_2: X
v_sep_gib_1030_sep_85_sep_3_sep_93_sep_0: X
v_sep_gib_1030_sep_97_sep_2: X
v_sep_gib_1030_sep_97_sep_3_sep_105_sep_0: X
.................
v_sep_fail_1288_sep_120_sep_0: X
v_sep_gib_1030_sep_79_sep_2: X
v_sep_gib_1030_sep_79_sep_3_sep_115_sep_0: X
v_sep_gib_1030_sep_85_sep_2: X
v_sep_gib_1030_sep_85_sep_3_sep_93_sep_0: X
v_sep_gib_1030_sep_97_sep_2: X
v_sep_gib_1030_sep_97_sep_3_sep_105_sep_0: X
.............................(0=0) & (v_sep_fail_1288_sep_120_sep_0($196)) -> 1=0.
(($196-1=0) & ($197>=0) & ($198>=0) & ($199<0)) & (v_sep_gib_1030_sep_79_sep_3_sep_115_sep_0($198,$197,$200,$199)) -> v_sep_fail_1288_sep_120_sep_0($196).
(($201<>0) & ($201-1<>0) & (-$201+$202+1=0) & (-$201+$203+2=0) & ($204+$205-$206=0)) & (v_sep_gib_1030_sep_97_sep_3_sep_105_sep_0($207,$208,$203,$204)) & (v_sep_gib_1030_sep_85_sep_3_sep_93_sep_0($207,$208,$202,$205)) & (v_sep_gib_1030_sep_79_sep_2($207,$208,$201)) -> v_sep_gib_1030_sep_79_sep_3_sep_115_sep_0($207,$208,$201,$206).
(($209-1=0) & ($210-$211=0)) & (v_sep_gib_1030_sep_97_sep_2($212,$211,$209)) -> v_sep_gib_1030_sep_97_sep_3_sep_105_sep_0($212,$211,$209,$210).
(($209+2<>0) & ($209+1<>0) & (-$209+$213-2=0) & (-$209+$214-1=0)) & (v_sep_gib_1030_sep_85_sep_3_sep_93_sep_0($212,$211,$214,$215)) & (v_sep_gib_1030_sep_79_sep_2($212,$211,$213)) -> v_sep_gib_1030_sep_97_sep_2($212,$211,$209).
(($216-1=0) & ($217-$218=0)) & (v_sep_gib_1030_sep_85_sep_2($219,$218,$216)) -> v_sep_gib_1030_sep_85_sep_3_sep_93_sep_0($219,$218,$216,$217).
(($216+1<>0) & ($216<>0) & (-$216+$220-1=0)) & (v_sep_gib_1030_sep_79_sep_2($219,$218,$220)) -> v_sep_gib_1030_sep_85_sep_2($219,$218,$216).
($207>=0) & ($208>=0) -> v_sep_gib_1030_sep_79_sep_2($207,$208,$201).

        solution:
          P[<fail_1288@120:0>]($221:bool) = false
          P[<gib_1030@79:2>]($251:int,$253:int,$255:int) = true
          P[<<gib_1030@79:3>@115:0>]($224:int,$226:int,$228:int,$230:int) = false
          P[<gib_1030@85:2>]($265:int,$267:int,$269:int) = true
          P[<<gib_1030@85:3>@93:0>]($242:int,$244:int,$246:int,$248:int) = ($246 <= 1)
          P[<gib_1030@97:2>]($258:int,$260:int,$262:int) = ($262 <= 0)
          P[<<gib_1030@97:3>@105:0>]($233:int,$235:int,$237:int,$239:int) = (2 <= $237)
        
      end HcSolver.solve_ub(12340)[4] (0.098985 sec.)
      begin HcSolver.check_validity(13091)[4]
        input:
          P[<fail_1288@120:0>](<fail_1288@120:0>:bool)|- bot
          
          P[<<gib_1030@79:3>@115:0>](<f_k_main_1281@117:0>:int,<f_k_main_1281@117:1>:int,<f_k_main_1281@117:3>:int,<f_k_main_1281@117:5>:int),
          ((<f_k_main_1281@117:1> >= 0) &&
           ((<f_k_main_1281@117:0> >= 0) && ((<f_k_main_1281@117:5> < 0) && <fail_1288@120:0>)))
          |- P[<fail_1288@120:0>](<fail_1288@120:0>:bool)
          
          P[<gib_1030@79:2>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,<gib_1030@79:2>:int),
          P[<<gib_1030@85:3>@93:0>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,(
                                    -1 + <gib_1030@79:2>):int,var75:int),
          P[<<gib_1030@97:3>@105:0>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,(
                                     -2 + <gib_1030@79:2>):int,(<<gib_1030@79:3>@115:0> + (-1 * var75)):int),
          ((<gib_1030@79:2> <> 0) && (<gib_1030@79:2> <> 1))
          |- P[<<gib_1030@79:3>@115:0>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,
                                        <gib_1030@79:2>:int,<<gib_1030@79:3>@115:0>:int)
          
          P[<gib_1030@97:2>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,<gib_1030@97:2>:int),
          ((<gib_1030@97:2> = 1) && (<<gib_1030@97:3>@105:0> = <gib_1030@97:1>))
          |- P[<<gib_1030@97:3>@105:0>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,
                                        <gib_1030@97:2>:int,<<gib_1030@97:3>@105:0>:int)
          
          P[<gib_1030@79:2>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,(
                             2 + <gib_1030@97:2>):int),
          P[<<gib_1030@85:3>@93:0>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,(
                                    1 + <gib_1030@97:2>):int,<f_gib_1279@95:4>:int),
          (((2 + <gib_1030@97:2>) <> 0) && ((1 + <gib_1030@97:2>) <> 0))
          |- P[<gib_1030@97:2>](<gib_1030@97:0>:int,<gib_1030@97:1>:int,
                                <gib_1030@97:2>:int)
          
          P[<gib_1030@85:2>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,<gib_1030@85:2>:int),
          ((<gib_1030@85:2> = 1) && (<<gib_1030@85:3>@93:0> = <gib_1030@85:1>))
          |- P[<<gib_1030@85:3>@93:0>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,
                                       <gib_1030@85:2>:int,<<gib_1030@85:3>@93:0>:int)
          
          P[<gib_1030@79:2>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,(
                             1 + <gib_1030@85:2>):int), (((1 + <gib_1030@85:2>) <> 0) && (<gib_1030@85:2> <> 0))
          |- P[<gib_1030@85:2>](<gib_1030@85:0>:int,<gib_1030@85:1>:int,
                                <gib_1030@85:2>:int)
          
           ((<gib_1030@79:0> >= 0) && (<gib_1030@79:1> >= 0))
          |- P[<gib_1030@79:2>](<gib_1030@79:0>:int,<gib_1030@79:1>:int,
                                <gib_1030@79:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(13091)[4] (0.004999 sec.)
      solution:
        P[<fail_1288@120:0>]($221:bool) = false
        P[<gib_1030@79:2>]($251:int,$253:int,$255:int) = true
        P[<<gib_1030@79:3>@115:0>]($224:int,$226:int,$228:int,$230:int) = false
        P[<gib_1030@85:2>]($265:int,$267:int,$269:int) = true
        P[<<gib_1030@85:3>@93:0>]($242:int,$244:int,$246:int,$248:int) = ($246 <= 1)
        P[<gib_1030@97:2>]($258:int,$260:int,$262:int) = ($262 <= 0)
        P[<<gib_1030@97:3>@105:0>]($233:int,$235:int,$237:int,$239:int) = (2 <= $237)
    end YhornInterface.solve(12339)[3] (0.104984 sec.)
    
  end RefTypeInfer.infer_etrs(7014)[2] (0.371944 sec.)
  refinement types:
    main_1278: X
    f_1282: v1:int -> X
    f_1283: v1:int -> v2:int -> X
    f_1284: v1:int -> v2:int -> v3:int -> X
    main_1034: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1181: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    gib_1030: v1:int -> v2:int -> v3:int -> (v4:{v4:int | false} -> X) -> X
    br_gib_1286: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> X
    gib_1030: v1:int -> v2:int -> v3:int -> (v4:{v4:int | (v3 <= 1)} -> X) -> X
    br_gib_1286: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> X
    f_gib_1279: v1:int -> v2:int -> v3:int -> (v4:int -> X) -> v6:int -> X
    gib_1030: v1:int -> v2:int -> v3:{v3:int | (v3 <= 0)} -> (v4:{v4:int | (2 <= v3)} -> X) -> X
    br_gib_1286: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> X
    f_gib_1280: v1:int -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> v7:int -> X
    f_k_main_1281: v1:int -> v2:int -> v3:bool -> v4:int -> (v5:unit -> X) -> v7:int -> X
    fail_1288: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1285: var94:int -> var93:int -> var92:int -> var91:unit -> X
  abstraction types:
    main_1278: X
    f_1282: v1:int -> X
    f_1283: v1:int -> v2:int -> X
    f_1284: v1:int -> v2:int -> v3:int -> X
    main_1034: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1181: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    gib_1030: var101:int ->
              var102:int ->
              var103:int[var103 -> (var103 <= 0)] ->
              (var104:int[var104 -> (var103 <= 1),
                          var104 -> (2 <= var103)] -> X) -> X
    br_gib_1286: var114:bool -> var115:int -> var116:int -> var117:int -> (var118:int -> X) -> X
    f_gib_1279: v1:int -> v2:int -> v3:int -> (v4:int -> X) -> v6:int -> X
    f_gib_1280: v1:int -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> v7:int -> X
    f_k_main_1281: v1:int -> v2:int -> v3:bool -> v4:int -> (v5:unit -> X) -> v7:int -> X
    fail_1288: v1:bool -> (v2:unit -> X) -> X
    f_1285: var94:int -> var93:int -> var92:int -> var91:unit -> X
  
end AbsTypeInfer.refine(7013)[1] (0.376943 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1; 1; 1; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1278
  main_1278 -> (rand_int f_1282)
  br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 when b_1287 -> (k_gib_1122 b_1032)
  br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 when (not b_1287) ->
      (gib_1030 a_1031 b_1032 (n_1033 - 1) (f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122))
  f_1282 x_1219 -> (rand_int (f_1283 x_1219))
  f_1283 x_1219 x_1232 -> (rand_int (f_1284 x_1219 x_1232))
  f_1284 x_1219 x_1232 x_1245 -> (main_1034 x_1219 x_1232 x_1245 (f_1285 x_1219 x_1232 x_1245))
  f_1285 x_1219 x_1232 x_1245 x_1216 -> end
  f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122 x_1125 ->
      (gib_1030 a_1031 b_1032 (n_1033 - 2) (f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122))
  f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122 x_1126 -> (k_gib_1122 (x_1125 + x_1126))
  f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 when (x_1185 >= 0) -> (k_main_1178 ())
  f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 when (not (x_1185 >= 0)) -> (fail_1288 true k_main_1178)
  fail_1288 b k -> {fail} => (k ())
  gib_1030 a_1031 b_1032 n_1033 k_gib_1122 when (n_1033 = 0) -> (k_gib_1122 a_1031)
  gib_1030 a_1031 b_1032 n_1033 k_gib_1122 when (not (n_1033 = 0)) ->
      (br_gib_1286 (n_1033 = 1) a_1031 b_1032 n_1033 k_gib_1122)
  k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 when b_1213 ->
      (gib_1030 a_1036 b_1037 n_1035 (f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178))
  k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 when (not b_1213) -> (k_main_1178 ())
  main_1034 n_1035 a_1036 b_1037 k_main_1178 when (a_1036 >= 0) ->
      (k_main_1181 a_1036 b_1037 n_1035 k_main_1178 (b_1037 >= 0))
  main_1034 n_1035 a_1036 b_1037 k_main_1178 when (not (a_1036 >= 0)) ->
      (k_main_1181 a_1036 b_1037 n_1035 k_main_1178 false)
Types:
  main_1278 : X
  fail_1288 : (x_1:bool[x_1] -> (unit -> X) -> X)
  gib_1030 : (x_1:int ->
              x_2:int -> x_3:int[x_3 <= 0] -> (x_5:int[x_3 >= 2; x_3 <= 1; x_1 <= x_5; x_2 <= x_5] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1278 ... --> 
  f_1282 ... --> 
  f_1283 ... --> 
  f_1284 ... --> 
  main_1034 [1/2] ... --> 
  k_main_1181 [1/2] ... --> 
  gib_1030 [2/2] ... --> 
  br_gib_1286 [2/2] ... --> 
  gib_1030 [1/2] ... --> 
  f_gib_1279 ... --> 
  gib_1030 [1/2] ... --> 
  f_gib_1280 ... --> 
  f_k_main_1281 [2/2] ... --> 
  fail_1288 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(15373)[1]
  program:
    main_1278  | true = ((Random.int 0) f_1282)
    br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 | b_1287 = (k_gib_1122 b_1032)
    br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 | (not b_1287) = (
    gib_1030 a_1031
             b_1032
             (n_1033 - 1)
             (f_gib_1279 a_1031
                         b_1032
                         n_1033
                         k_gib_1122))
    f_1282 x_1219 | true = ((Random.int 0) (f_1283 x_1219))
    f_1283 x_1219 x_1232 | true = ((Random.int 0) (f_1284 x_1219
                                                          x_1232))
    f_1284 x_1219 x_1232 x_1245 | true = (main_1034 x_1219
                                                    x_1232
                                                    x_1245
                                                    (f_1285 x_1219
                                                            x_1232
                                                            x_1245))
    f_1285 x_1219 x_1232 x_1245 x_1216 | true = end
    f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122 x_1125 | true = (gib_1030
                                                                  a_1031
                                                                  b_1032
                                                                  (n_1033 - 2)
                                                                  (f_gib_1280 a_1031
                                                                    b_1032
                                                                    n_1033
                                                                    x_1125
                                                                    k_gib_1122))
    f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122 x_1126 | true = (
    k_gib_1122 (x_1125 + x_1126))
    f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 | (x_1185 >= 0) = (
    k_main_1178 ())
    f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 | (not (
                                                                    x_1185 >= 0)) = (
    fail_1288 true
              k_main_1178)
    fail_1288 b k | true = (fail ())
    gib_1030 a_1031 b_1032 n_1033 k_gib_1122 | (n_1033 = 0) = (k_gib_1122 a_1031)
    gib_1030 a_1031 b_1032 n_1033 k_gib_1122 | (not (n_1033 = 0)) = (
    br_gib_1286 (n_1033 = 1)
                a_1031
                b_1032
                n_1033
                k_gib_1122)
    k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 | b_1213 = (gib_1030
                                                                    a_1036
                                                                    b_1037
                                                                    n_1035
                                                                    (
                                                                    f_k_main_1281
                                                                    a_1036
                                                                    b_1037
                                                                    b_1213
                                                                    n_1035
                                                                    k_main_1178))
    k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 | (not b_1213) = (
    k_main_1178 ())
    main_1034 n_1035 a_1036 b_1037 k_main_1178 | (a_1036 >= 0) = (k_main_1181
                                                                    a_1036
                                                                    b_1037
                                                                    n_1035
                                                                    k_main_1178
                                                                    (
                                                                    b_1037 >= 0))
    main_1034 n_1035 a_1036 b_1037 k_main_1178 | (not (a_1036 >= 0)) = (
    k_main_1181 a_1036
                b_1037
                n_1035
                k_main_1178
                false)
    main_1278:X
    br_gib_1286:bool -> int -> int -> int -> (int -> X) -> X
    f_1282:int -> X
    f_1283:int -> int -> X
    f_1284:int -> int -> int -> X
    f_1285:int -> int -> int -> unit -> X
    f_gib_1279:int -> int -> int -> (int -> X) -> int -> X
    f_gib_1280:int -> int -> int -> int -> (int -> X) -> int -> X
    f_k_main_1281:int -> int -> bool -> int -> (unit -> X) -> int -> X
    fail_1288:bool -> (unit -> X) -> X
    gib_1030:int -> int -> int -> (int -> X) -> X
    k_main_1181:int -> int -> int -> (unit -> X) -> bool -> X
    main_1034:int -> int -> int -> (unit -> X) -> X
  inlined functions: br_gib_1286,f_1282,f_1283,f_1284,f_1285,f_gib_1279,f_gib_1280,f_k_main_1281,k_main_1181,main_1034
  counterexample: 0:0:0:0:0:0:1:1:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1282@126:0> = var121)
     [true.nop((<f_1283@129:0> = <f_1282@126:0>) && (<f_1283@129:1> = var122))
      [true.nop((<f_1284@132:0> = <f_1283@129:0>) && ((<f_1284@132:1> = <f_1283@129:1>) && (<f_1284@132:2> = var123)))
       [true.
        ((<main_1034@134:0> = <f_1284@132:0>) &&
         ((<main_1034@134:1> = <f_1284@132:1>) && (<main_1034@134:2> = <f_1284@132:2>)))
        [(<main_1034@134:1> >= 0).
         ((<k_main_1181@137:0> = <main_1034@134:1>) &&
          ((<k_main_1181@137:1> = <main_1034@134:2>) &&
           ((<k_main_1181@137:2> = <main_1034@134:0>) && (<k_main_1181@137:4> = (<main_1034@134:2> >= 0)))))
         [<k_main_1181@137:4>.
          ((<gib_1030@140:0> = <k_main_1181@137:0>) &&
           ((<gib_1030@140:1> = <k_main_1181@137:1>) && (<gib_1030@140:2> = <k_main_1181@137:2>)))
          [(not (<gib_1030@140:2> = 0)).
           ((<br_gib_1286@143:0> = (<gib_1030@140:2> = 1)) &&
            ((<br_gib_1286@143:1> = <gib_1030@140:0>) &&
             ((<br_gib_1286@143:2> = <gib_1030@140:1>) && (<br_gib_1286@143:3> = <gib_1030@140:2>))))
           [(not <br_gib_1286@143:0>).
            ((<gib_1030@146:0> = <br_gib_1286@143:1>) &&
             ((<gib_1030@146:1> = <br_gib_1286@143:2>) && (<gib_1030@146:2> = (<br_gib_1286@143:3> - 1))))
            [(<gib_1030@146:2> = 0).(<<gib_1030@146:3>@149:0> = <gib_1030@146:0>)
             [true.
              ((<f_gib_1279@151:0> = <br_gib_1286@143:1>) &&
               ((<f_gib_1279@151:1> = <br_gib_1286@143:2>) &&
                ((<f_gib_1279@151:2> = <br_gib_1286@143:3>) && (<f_gib_1279@151:4> = <<gib_1030@146:3>@149:0>))))
              [true.
               ((<gib_1030@153:0> = <f_gib_1279@151:0>) &&
                ((<gib_1030@153:1> = <f_gib_1279@151:1>) && (<gib_1030@153:2> = (<f_gib_1279@151:2> - 2))))
               [(<gib_1030@153:2> = 0).(<<gib_1030@153:3>@156:0> = <gib_1030@153:0>)
                [true.
                 ((<f_gib_1280@158:0> = <f_gib_1279@151:0>) &&
                  ((<f_gib_1280@158:1> = <f_gib_1279@151:1>) &&
                   ((<f_gib_1280@158:2> = <f_gib_1279@151:2>) &&
                    ((<f_gib_1280@158:3> = <f_gib_1279@151:4>) && (<f_gib_1280@158:5> = <<gib_1030@153:3>@156:0>)))))
                 [true.(<<f_gib_1280@158:4>@160:0> = (<f_gib_1280@158:3> + <f_gib_1280@158:5>))
                  [true.(<<f_gib_1279@151:3>@162:0> = <<f_gib_1280@158:4>@160:0>)
                   [true.(<<br_gib_1286@143:4>@164:0> = <<f_gib_1279@151:3>@162:0>)
                    [true.(<<gib_1030@140:3>@166:0> = <<br_gib_1286@143:4>@164:0>)
                     [true.
                      ((<f_k_main_1281@168:0> = <k_main_1181@137:0>) &&
                       ((<f_k_main_1281@168:1> = <k_main_1181@137:1>) &&
                        ((<f_k_main_1281@168:2> = <k_main_1181@137:4>) &&
                         ((<f_k_main_1281@168:3> = <k_main_1181@137:2>) &&
                          (<f_k_main_1281@168:5> = <<gib_1030@140:3>@166:0>)))))
                      [(not (<f_k_main_1281@168:5> >= 0)).(<fail_1288@171:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(15374)[2]
    horn clauses:
      P[<fail_1288@171:0>](<fail_1288@171:0>:bool)|- bot
      
      P[<f_k_main_1281@168:5>](<f_k_main_1281@168:0>:int,<f_k_main_1281@168:1>:int,<f_k_main_1281@168:2>:bool,<f_k_main_1281@168:3>:int,<f_k_main_1281@168:5>:int),
      ((<f_k_main_1281@168:5> < 0) && <fail_1288@171:0>) |- P[<fail_1288@171:0>](
      <fail_1288@171:0>:bool)
      
      P[<k_main_1181@137:4>](<f_k_main_1281@168:0>:int,<f_k_main_1281@168:1>:int,<f_k_main_1281@168:3>:int,<f_k_main_1281@168:2>:bool),
      P[<<gib_1030@140:3>@166:0>](<f_k_main_1281@168:0>:int,<f_k_main_1281@168:1>:int,<f_k_main_1281@168:3>:int,<f_k_main_1281@168:5>:int),
      <f_k_main_1281@168:2>
      |- P[<f_k_main_1281@168:5>](<f_k_main_1281@168:0>:int,<f_k_main_1281@168:1>:int,
                                  <f_k_main_1281@168:2>:bool,<f_k_main_1281@168:3>:int,
                                  <f_k_main_1281@168:5>:int)
      
      P[<gib_1030@140:2>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,<gib_1030@140:2>:int),
      P[<<br_gib_1286@143:4>@164:0>]((<gib_1030@140:2> = 1):bool,<gib_1030@140:0>:int,<gib_1030@140:1>:int,<gib_1030@140:2>:int,<<gib_1030@140:3>@166:0>:int),
      (<gib_1030@140:2> <> 0)
      |- P[<<gib_1030@140:3>@166:0>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,
                                     <gib_1030@140:2>:int,<<gib_1030@140:3>@166:0>:int)
      
      P[<br_gib_1286@143:3>](<br_gib_1286@143:0>:bool,<br_gib_1286@143:1>:int,<br_gib_1286@143:2>:int,<br_gib_1286@143:3>:int),
      P[<<f_gib_1279@151:3>@162:0>](<br_gib_1286@143:1>:int,<br_gib_1286@143:2>:int,<br_gib_1286@143:3>:int,<<br_gib_1286@143:4>@164:0>:int),
      (not <br_gib_1286@143:0>)
      |- P[<<br_gib_1286@143:4>@164:0>](<br_gib_1286@143:0>:bool,<br_gib_1286@143:1>:int,
                                        <br_gib_1286@143:2>:int,<br_gib_1286@143:3>:int,
                                        <<br_gib_1286@143:4>@164:0>:int)
      
      P[<f_gib_1279@151:4>](<f_gib_1279@151:0>:int,<f_gib_1279@151:1>:int,<f_gib_1279@151:2>:int,<f_gib_1280@158:3>:int),
      P[<<f_gib_1280@158:4>@160:0>](<f_gib_1279@151:0>:int,<f_gib_1279@151:1>:int,<f_gib_1279@151:2>:int,<f_gib_1280@158:3>:int,<<f_gib_1279@151:3>@162:0>:int)|- P[<<f_gib_1279@151:3>@162:0>](
      <f_gib_1279@151:0>:int,<f_gib_1279@151:1>:int,<f_gib_1279@151:2>:int,
      <<f_gib_1279@151:3>@162:0>:int)
      
      P[<f_gib_1280@158:5>](<f_gib_1280@158:0>:int,<f_gib_1280@158:1>:int,<f_gib_1280@158:2>:int,<f_gib_1280@158:3>:int,(
                            <<f_gib_1280@158:4>@160:0> + (-1 * <f_gib_1280@158:3>)):int)|- P[<<f_gib_1280@158:4>@160:0>](
      <f_gib_1280@158:0>:int,<f_gib_1280@158:1>:int,<f_gib_1280@158:2>:int,
      <f_gib_1280@158:3>:int,<<f_gib_1280@158:4>@160:0>:int)
      
      P[<f_gib_1279@151:4>](<f_gib_1280@158:0>:int,<f_gib_1280@158:1>:int,<f_gib_1280@158:2>:int,<f_gib_1280@158:3>:int),
      P[<<gib_1030@153:3>@156:0>](<f_gib_1280@158:0>:int,<f_gib_1280@158:1>:int,(
                                  -2 + <f_gib_1280@158:2>):int,<f_gib_1280@158:5>:int)|- P[<f_gib_1280@158:5>](
      <f_gib_1280@158:0>:int,<f_gib_1280@158:1>:int,<f_gib_1280@158:2>:int,
      <f_gib_1280@158:3>:int,<f_gib_1280@158:5>:int)
      
      P[<gib_1030@153:2>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,<gib_1030@153:2>:int),
      ((<gib_1030@153:2> = 0) && (<<gib_1030@153:3>@156:0> = <gib_1030@153:0>))
      |- P[<<gib_1030@153:3>@156:0>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,
                                     <gib_1030@153:2>:int,<<gib_1030@153:3>@156:0>:int)
      
      P[<f_gib_1279@151:4>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,(
                            2 + <gib_1030@153:2>):int,<f_gib_1279@151:4>:int)|- P[<gib_1030@153:2>](
      <gib_1030@153:0>:int,<gib_1030@153:1>:int,<gib_1030@153:2>:int)
      
      P[<br_gib_1286@143:3>](false:bool,<f_gib_1279@151:0>:int,<f_gib_1279@151:1>:int,<f_gib_1279@151:2>:int),
      P[<<gib_1030@146:3>@149:0>](<f_gib_1279@151:0>:int,<f_gib_1279@151:1>:int,(
                                  -1 + <f_gib_1279@151:2>):int,<f_gib_1279@151:4>:int)|- P[<f_gib_1279@151:4>](
      <f_gib_1279@151:0>:int,<f_gib_1279@151:1>:int,<f_gib_1279@151:2>:int,
      <f_gib_1279@151:4>:int)
      
      P[<gib_1030@146:2>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,<gib_1030@146:2>:int),
      ((<gib_1030@146:2> = 0) && (<<gib_1030@146:3>@149:0> = <gib_1030@146:0>))
      |- P[<<gib_1030@146:3>@149:0>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,
                                     <gib_1030@146:2>:int,<<gib_1030@146:3>@149:0>:int)
      
      P[<br_gib_1286@143:3>](false:bool,<gib_1030@146:0>:int,<gib_1030@146:1>:int,(
                             1 + <gib_1030@146:2>):int)|- P[<gib_1030@146:2>](
      <gib_1030@146:0>:int,<gib_1030@146:1>:int,<gib_1030@146:2>:int)
      
      P[<gib_1030@140:2>](<br_gib_1286@143:1>:int,<br_gib_1286@143:2>:int,<br_gib_1286@143:3>:int),
      ((<br_gib_1286@143:3> <> 0) && (<br_gib_1286@143:0> = (<br_gib_1286@143:3> = 1)))
      |- P[<br_gib_1286@143:3>](<br_gib_1286@143:0>:bool,<br_gib_1286@143:1>:int,
                                <br_gib_1286@143:2>:int,<br_gib_1286@143:3>:int)
      
      P[<k_main_1181@137:4>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,<gib_1030@140:2>:int,true:bool)|- P[<gib_1030@140:2>](
      <gib_1030@140:0>:int,<gib_1030@140:1>:int,<gib_1030@140:2>:int)
      
      P[<main_1034@134:2>](<k_main_1181@137:2>:int,<k_main_1181@137:0>:int,<k_main_1181@137:1>:int),
      ((<k_main_1181@137:0> >= 0) && (<k_main_1181@137:4> = (<k_main_1181@137:1> >= 0)))
      |- P[<k_main_1181@137:4>](<k_main_1181@137:0>:int,<k_main_1181@137:1>:int,
                                <k_main_1181@137:2>:int,<k_main_1181@137:4>:bool)
      
      P[<f_1284@132:2>](<main_1034@134:0>:int,<main_1034@134:1>:int,<main_1034@134:2>:int)|- P[<main_1034@134:2>](
      <main_1034@134:0>:int,<main_1034@134:1>:int,<main_1034@134:2>:int)
      
      P[<f_1283@129:1>](<f_1284@132:0>:int,<f_1284@132:1>:int)|- P[<f_1284@132:2>](
      <f_1284@132:0>:int,<f_1284@132:1>:int,<f_1284@132:2>:int)
      
      P[<f_1282@126:0>](<f_1283@129:0>:int)|- P[<f_1283@129:1>](<f_1283@129:0>:int,
                                                                <f_1283@129:1>:int)
      
      |- P[<f_1282@126:0>](<f_1282@126:0>:int)
    call trees:
      <main_1278@123>
        <f_1282@126>
          <f_1283@129>
            <f_1284@132>
              <main_1034@134>
                <k_main_1181@137>
                  <gib_1030@140>
                    <br_gib_1286@143>
                      <gib_1030@146>
                      </<gib_1030@146:3>@149>
                      <f_gib_1279@151>
                        <gib_1030@153>
                        </<gib_1030@153:3>@156>
                        <f_gib_1280@158>
                        </<f_gib_1280@158:4>@160>
                      </<f_gib_1279@151:3>@162>
                    </<br_gib_1286@143:4>@164>
                  </<gib_1030@140:3>@166>
                  <f_k_main_1281@168>
                    <fail_1288@171>
    inlined horn clauses:
      P[<fail_1288@171:0>](<fail_1288@171:0>:bool)|- bot
      
      P[<<gib_1030@140:3>@166:0>](<f_k_main_1281@168:0>:int,<f_k_main_1281@168:1>:int,<f_k_main_1281@168:3>:int,<f_k_main_1281@168:5>:int),
      ((<f_k_main_1281@168:1> >= 0) &&
       ((<f_k_main_1281@168:0> >= 0) && ((<f_k_main_1281@168:5> < 0) && <fail_1288@171:0>)))
      |- P[<fail_1288@171:0>](<fail_1288@171:0>:bool)
      
      P[<gib_1030@140:2>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,<gib_1030@140:2>:int),
      P[<<gib_1030@146:3>@149:0>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,(
                                  -1 + <gib_1030@140:2>):int,var125:int),
      P[<<gib_1030@153:3>@156:0>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,(
                                  -2 + <gib_1030@140:2>):int,(<<gib_1030@140:3>@166:0> + (-1 * var125)):int),
      ((<gib_1030@140:2> <> 0) && (<gib_1030@140:2> <> 1))
      |- P[<<gib_1030@140:3>@166:0>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,
                                     <gib_1030@140:2>:int,<<gib_1030@140:3>@166:0>:int)
      
      P[<gib_1030@153:2>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,<gib_1030@153:2>:int),
      ((<gib_1030@153:2> = 0) && (<<gib_1030@153:3>@156:0> = <gib_1030@153:0>))
      |- P[<<gib_1030@153:3>@156:0>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,
                                     <gib_1030@153:2>:int,<<gib_1030@153:3>@156:0>:int)
      
      P[<gib_1030@140:2>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,(
                          2 + <gib_1030@153:2>):int),
      P[<<gib_1030@146:3>@149:0>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,(
                                  1 + <gib_1030@153:2>):int,<f_gib_1279@151:4>:int),
      (((2 + <gib_1030@153:2>) <> 0) && ((1 + <gib_1030@153:2>) <> 0))
      |- P[<gib_1030@153:2>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,
                             <gib_1030@153:2>:int)
      
      P[<gib_1030@146:2>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,<gib_1030@146:2>:int),
      ((<gib_1030@146:2> = 0) && (<<gib_1030@146:3>@149:0> = <gib_1030@146:0>))
      |- P[<<gib_1030@146:3>@149:0>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,
                                     <gib_1030@146:2>:int,<<gib_1030@146:3>@149:0>:int)
      
      P[<gib_1030@140:2>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,(
                          1 + <gib_1030@146:2>):int), (((1 + <gib_1030@146:2>) <> 0) && (<gib_1030@146:2> <> 0))
      |- P[<gib_1030@146:2>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,
                             <gib_1030@146:2>:int)
      
       ((<gib_1030@140:0> >= 0) && (<gib_1030@140:1> >= 0))
      |- P[<gib_1030@140:2>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,
                             <gib_1030@140:2>:int)
    begin ParamSubstInfer.infer(18988)[3]
      
    end ParamSubstInfer.infer(18988)[3] (0.320951 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(18990)[3]
      
    end RefTypeInfer.elim_coeffs(18990)[3] (0.003999 sec.)
    begin YhornInterface.solve(19573)[3]
      begin HcSolver.solve_ub(19574)[4]
        encoded:
          P[<fail_1288@171:0>](<fail_1288@171:0>:int)|- bot
          
          P[<<gib_1030@140:3>@166:0>](<f_k_main_1281@168:0>:int,<f_k_main_1281@168:1>:int,<f_k_main_1281@168:3>:int,<f_k_main_1281@168:5>:int),
          ((<f_k_main_1281@168:1> >= 0) &&
           ((<f_k_main_1281@168:0> >= 0) && ((<f_k_main_1281@168:5> < 0) && (<fail_1288@171:0> = 1))))
          |- P[<fail_1288@171:0>](<fail_1288@171:0>:int)
          
          P[<gib_1030@140:2>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,<gib_1030@140:2>:int),
          P[<<gib_1030@146:3>@149:0>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,(
                                      -1 + <gib_1030@140:2>):int,var125:int),
          P[<<gib_1030@153:3>@156:0>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,(
                                      -2 + <gib_1030@140:2>):int,(<<gib_1030@140:3>@166:0> + (-1 * var125)):int),
          ((<gib_1030@140:2> <> 0) && (<gib_1030@140:2> <> 1))
          |- P[<<gib_1030@140:3>@166:0>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,
                                         <gib_1030@140:2>:int,<<gib_1030@140:3>@166:0>:int)
          
          P[<gib_1030@153:2>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,<gib_1030@153:2>:int),
          ((<gib_1030@153:2> = 0) && (<<gib_1030@153:3>@156:0> = <gib_1030@153:0>))
          |- P[<<gib_1030@153:3>@156:0>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,
                                         <gib_1030@153:2>:int,<<gib_1030@153:3>@156:0>:int)
          
          P[<gib_1030@140:2>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,(
                              2 + <gib_1030@153:2>):int),
          P[<<gib_1030@146:3>@149:0>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,(
                                      1 + <gib_1030@153:2>):int,<f_gib_1279@151:4>:int),
          (((2 + <gib_1030@153:2>) <> 0) && ((1 + <gib_1030@153:2>) <> 0))
          |- P[<gib_1030@153:2>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,
                                 <gib_1030@153:2>:int)
          
          P[<gib_1030@146:2>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,<gib_1030@146:2>:int),
          ((<gib_1030@146:2> = 0) && (<<gib_1030@146:3>@149:0> = <gib_1030@146:0>))
          |- P[<<gib_1030@146:3>@149:0>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,
                                         <gib_1030@146:2>:int,<<gib_1030@146:3>@149:0>:int)
          
          P[<gib_1030@140:2>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,(
                              1 + <gib_1030@146:2>):int), (((1 + <gib_1030@146:2>) <> 0) && (<gib_1030@146:2> <> 0))
          |- P[<gib_1030@146:2>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,
                                 <gib_1030@146:2>:int)
          
           ((<gib_1030@140:0> >= 0) && (<gib_1030@140:1> >= 0))
          |- P[<gib_1030@140:2>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,
                                 <gib_1030@140:2>:int)
        input to Yhorn:
          P[<fail_1288@171:0>](<fail_1288@171:0>:int)|- bot
          
          P[<<gib_1030@140:3>@166:0>](<f_k_main_1281@168:0>:int,<f_k_main_1281@168:1>:int,<f_k_main_1281@168:3>:int,<f_k_main_1281@168:5>:int),
          ((<f_k_main_1281@168:5> < 0) &&
           ((<f_k_main_1281@168:0> >= 0) && ((<f_k_main_1281@168:1> >= 0) && (<fail_1288@171:0> = 1))))
          |- P[<fail_1288@171:0>](<fail_1288@171:0>:int)
          
          P[<gib_1030@140:2>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,<gib_1030@140:2>:int),
          P[<<gib_1030@146:3>@149:0>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,var126:int,var125:int),
          P[<<gib_1030@153:3>@156:0>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,var127:int,var128:int),
          (((var128 + var125) = <<gib_1030@140:3>@166:0>) &&
           (((2 + var127) = <gib_1030@140:2>) &&
            (((1 + var126) = <gib_1030@140:2>) && ((<gib_1030@140:2> <> 1) && (<gib_1030@140:2> <> 0)))))
          |- P[<<gib_1030@140:3>@166:0>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,
                                         <gib_1030@140:2>:int,<<gib_1030@140:3>@166:0>:int)
          
          P[<gib_1030@153:2>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,<gib_1030@153:2>:int),
          ((<<gib_1030@153:3>@156:0> = <gib_1030@153:0>) && (<gib_1030@153:2> = 0))
          |- P[<<gib_1030@153:3>@156:0>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,
                                         <gib_1030@153:2>:int,<<gib_1030@153:3>@156:0>:int)
          
          P[<gib_1030@140:2>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,var129:int),
          P[<<gib_1030@146:3>@149:0>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,var130:int,<f_gib_1279@151:4>:int),
          ((var130 = (1 + <gib_1030@153:2>)) &&
           ((var129 = (2 + <gib_1030@153:2>)) && (((1 + <gib_1030@153:2>) <> 0) && ((2 + <gib_1030@153:2>) <> 0))))
          |- P[<gib_1030@153:2>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,
                                 <gib_1030@153:2>:int)
          
          P[<gib_1030@146:2>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,<gib_1030@146:2>:int),
          ((<<gib_1030@146:3>@149:0> = <gib_1030@146:0>) && (<gib_1030@146:2> = 0))
          |- P[<<gib_1030@146:3>@149:0>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,
                                         <gib_1030@146:2>:int,<<gib_1030@146:3>@149:0>:int)
          
          P[<gib_1030@140:2>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,var131:int),
          ((var131 = (1 + <gib_1030@146:2>)) && ((<gib_1030@146:2> <> 0) && ((1 + <gib_1030@146:2>) <> 0)))
          |- P[<gib_1030@146:2>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,
                                 <gib_1030@146:2>:int)
          
           ((<gib_1030@140:1> >= 0) && (<gib_1030@140:0> >= 0))
          |- P[<gib_1030@140:2>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,
                                 <gib_1030@140:2>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1288_sep_171_sep_0($606)) -> 1=0.
(($606-1=0) & ($607>=0) & ($608>=0) & ($609<0)) & (v_sep_gib_1030_sep_140_sep_3_sep_166_sep_0($608,$607,$610,$609)) -> v_sep_fail_1288_sep_171_sep_0($606).
(($611<>0) & ($611-1<>0) & (-$611+$612+1=0) & (-$611+$613+2=0) & ($614+$615-$616=0)) & (v_sep_gib_1030_sep_153_sep_3_sep_156_sep_0($617,$618,$613,$614)) & (v_sep_gib_1030_sep_146_sep_3_sep_149_sep_0($617,$618,$612,$615)) & (v_sep_gib_1030_sep_140_sep_2($617,$618,$611)) -> v_sep_gib_1030_sep_140_sep_3_sep_166_sep_0($617,$618,$611,$616).
(($619=0) & ($620-$621=0)) & (v_sep_gib_1030_sep_153_sep_2($621,$622,$619)) -> v_sep_gib_1030_sep_153_sep_3_sep_156_sep_0($621,$622,$619,$620).
(($619+2<>0) & ($619+1<>0) & (-$619+$623-2=0) & (-$619+$624-1=0)) & (v_sep_gib_1030_sep_146_sep_3_sep_149_sep_0($621,$622,$624,$625)) & (v_sep_gib_1030_sep_140_sep_2($621,$622,$623)) -> v_sep_gib_1030_sep_153_sep_2($621,$622,$619).
(($626=0) & ($627-$628=0)) & (v_sep_gib_1030_sep_146_sep_2($628,$629,$626)) -> v_sep_gib_1030_sep_146_sep_3_sep_149_sep_0($628,$629,$626,$627).
(($626+1<>0) & ($626<>0) & (-$626+$630-1=0)) & (v_sep_gib_1030_sep_140_sep_2($628,$629,$630)) -> v_sep_gib_1030_sep_146_sep_2($628,$629,$626).
($617>=0) & ($618>=0) -> v_sep_gib_1030_sep_140_sep_2($617,$618,$611).


v_sep_fail_1288_sep_171_sep_0: X
v_sep_gib_1030_sep_140_sep_2: X
v_sep_gib_1030_sep_140_sep_3_sep_166_sep_0: X
v_sep_gib_1030_sep_146_sep_2: X
v_sep_gib_1030_sep_146_sep_3_sep_149_sep_0: X
v_sep_gib_1030_sep_153_sep_2: X
v_sep_gib_1030_sep_153_sep_3_sep_156_sep_0: X
.............................
v_sep_fail_1288_sep_171_sep_0: X
v_sep_gib_1030_sep_140_sep_2: X
v_sep_gib_1030_sep_140_sep_3_sep_166_sep_0: X
v_sep_gib_1030_sep_146_sep_2: X
v_sep_gib_1030_sep_146_sep_3_sep_149_sep_0: X
v_sep_gib_1030_sep_153_sep_2: X
v_sep_gib_1030_sep_153_sep_3_sep_156_sep_0: X
...
v_sep_fail_1288_sep_171_sep_0: X
v_sep_gib_1030_sep_140_sep_2: X
v_sep_gib_1030_sep_140_sep_3_sep_166_sep_0: X
v_sep_gib_1030_sep_146_sep_2: X
v_sep_gib_1030_sep_146_sep_3_sep_149_sep_0: X
v_sep_gib_1030_sep_153_sep_2: X
v_sep_gib_1030_sep_153_sep_3_sep_156_sep_0: X
...............
v_sep_fail_1288_sep_171_sep_0: X
v_sep_gib_1030_sep_140_sep_2: X
v_sep_gib_1030_sep_140_sep_3_sep_166_sep_0: X
v_sep_gib_1030_sep_146_sep_2: X
v_sep_gib_1030_sep_146_sep_3_sep_149_sep_0: X
v_sep_gib_1030_sep_153_sep_2: X
v_sep_gib_1030_sep_153_sep_3_sep_156_sep_0: X
.................
v_sep_fail_1288_sep_171_sep_0: X
v_sep_gib_1030_sep_140_sep_2: X
v_sep_gib_1030_sep_140_sep_3_sep_166_sep_0: X
v_sep_gib_1030_sep_146_sep_2: X
v_sep_gib_1030_sep_146_sep_3_sep_149_sep_0: X
v_sep_gib_1030_sep_153_sep_2: X
v_sep_gib_1030_sep_153_sep_3_sep_156_sep_0: X
.............................(0=0) & (v_sep_fail_1288_sep_171_sep_0($606)) -> 1=0.
(($606-1=0) & ($607>=0) & ($608>=0) & ($609<0)) & (v_sep_gib_1030_sep_140_sep_3_sep_166_sep_0($608,$607,$610,$609)) -> v_sep_fail_1288_sep_171_sep_0($606).
(($611<>0) & ($611-1<>0) & (-$611+$612+1=0) & (-$611+$613+2=0) & ($614+$615-$616=0)) & (v_sep_gib_1030_sep_153_sep_3_sep_156_sep_0($617,$618,$613,$614)) & (v_sep_gib_1030_sep_146_sep_3_sep_149_sep_0($617,$618,$612,$615)) & (v_sep_gib_1030_sep_140_sep_2($617,$618,$611)) -> v_sep_gib_1030_sep_140_sep_3_sep_166_sep_0($617,$618,$611,$616).
(($619=0) & ($620-$621=0)) & (v_sep_gib_1030_sep_153_sep_2($621,$622,$619)) -> v_sep_gib_1030_sep_153_sep_3_sep_156_sep_0($621,$622,$619,$620).
(($619+2<>0) & ($619+1<>0) & (-$619+$623-2=0) & (-$619+$624-1=0)) & (v_sep_gib_1030_sep_146_sep_3_sep_149_sep_0($621,$622,$624,$625)) & (v_sep_gib_1030_sep_140_sep_2($621,$622,$623)) -> v_sep_gib_1030_sep_153_sep_2($621,$622,$619).
(($626=0) & ($627-$628=0)) & (v_sep_gib_1030_sep_146_sep_2($628,$629,$626)) -> v_sep_gib_1030_sep_146_sep_3_sep_149_sep_0($628,$629,$626,$627).
(($626+1<>0) & ($626<>0) & (-$626+$630-1=0)) & (v_sep_gib_1030_sep_140_sep_2($628,$629,$630)) -> v_sep_gib_1030_sep_146_sep_2($628,$629,$626).
($617>=0) & ($618>=0) -> v_sep_gib_1030_sep_140_sep_2($617,$618,$611).

        solution:
          P[<fail_1288@171:0>]($631:bool) = false
          P[<gib_1030@140:2>]($661:int,$663:int,$665:int) = true
          P[<<gib_1030@140:3>@166:0>]($634:int,$636:int,$638:int,$640:int) = false
          P[<gib_1030@146:2>]($675:int,$677:int,$679:int) = true
          P[<<gib_1030@146:3>@149:0>]($652:int,$654:int,$656:int,$658:int) = ($656 <= 0)
          P[<gib_1030@153:2>]($668:int,$670:int,$672:int) = ((1 + $672) <= 0)
          P[<<gib_1030@153:3>@156:0>]($643:int,$645:int,$647:int,$649:int) = (1 <= $647)
        
      end HcSolver.solve_ub(19574)[4] (0.107984 sec.)
      begin HcSolver.check_validity(20311)[4]
        input:
          P[<fail_1288@171:0>](<fail_1288@171:0>:bool)|- bot
          
          P[<<gib_1030@140:3>@166:0>](<f_k_main_1281@168:0>:int,<f_k_main_1281@168:1>:int,<f_k_main_1281@168:3>:int,<f_k_main_1281@168:5>:int),
          ((<f_k_main_1281@168:1> >= 0) &&
           ((<f_k_main_1281@168:0> >= 0) && ((<f_k_main_1281@168:5> < 0) && <fail_1288@171:0>)))
          |- P[<fail_1288@171:0>](<fail_1288@171:0>:bool)
          
          P[<gib_1030@140:2>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,<gib_1030@140:2>:int),
          P[<<gib_1030@146:3>@149:0>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,(
                                      -1 + <gib_1030@140:2>):int,var125:int),
          P[<<gib_1030@153:3>@156:0>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,(
                                      -2 + <gib_1030@140:2>):int,(<<gib_1030@140:3>@166:0> + (-1 * var125)):int),
          ((<gib_1030@140:2> <> 0) && (<gib_1030@140:2> <> 1))
          |- P[<<gib_1030@140:3>@166:0>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,
                                         <gib_1030@140:2>:int,<<gib_1030@140:3>@166:0>:int)
          
          P[<gib_1030@153:2>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,<gib_1030@153:2>:int),
          ((<gib_1030@153:2> = 0) && (<<gib_1030@153:3>@156:0> = <gib_1030@153:0>))
          |- P[<<gib_1030@153:3>@156:0>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,
                                         <gib_1030@153:2>:int,<<gib_1030@153:3>@156:0>:int)
          
          P[<gib_1030@140:2>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,(
                              2 + <gib_1030@153:2>):int),
          P[<<gib_1030@146:3>@149:0>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,(
                                      1 + <gib_1030@153:2>):int,<f_gib_1279@151:4>:int),
          (((2 + <gib_1030@153:2>) <> 0) && ((1 + <gib_1030@153:2>) <> 0))
          |- P[<gib_1030@153:2>](<gib_1030@153:0>:int,<gib_1030@153:1>:int,
                                 <gib_1030@153:2>:int)
          
          P[<gib_1030@146:2>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,<gib_1030@146:2>:int),
          ((<gib_1030@146:2> = 0) && (<<gib_1030@146:3>@149:0> = <gib_1030@146:0>))
          |- P[<<gib_1030@146:3>@149:0>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,
                                         <gib_1030@146:2>:int,<<gib_1030@146:3>@149:0>:int)
          
          P[<gib_1030@140:2>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,(
                              1 + <gib_1030@146:2>):int), (((1 + <gib_1030@146:2>) <> 0) && (<gib_1030@146:2> <> 0))
          |- P[<gib_1030@146:2>](<gib_1030@146:0>:int,<gib_1030@146:1>:int,
                                 <gib_1030@146:2>:int)
          
           ((<gib_1030@140:0> >= 0) && (<gib_1030@140:1> >= 0))
          |- P[<gib_1030@140:2>](<gib_1030@140:0>:int,<gib_1030@140:1>:int,
                                 <gib_1030@140:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(20311)[4] (0.003999 sec.)
      solution:
        P[<fail_1288@171:0>]($631:bool) = false
        P[<gib_1030@140:2>]($661:int,$663:int,$665:int) = true
        P[<<gib_1030@140:3>@166:0>]($634:int,$636:int,$638:int,$640:int) = false
        P[<gib_1030@146:2>]($675:int,$677:int,$679:int) = true
        P[<<gib_1030@146:3>@149:0>]($652:int,$654:int,$656:int,$658:int) = ($656 <= 0)
        P[<gib_1030@153:2>]($668:int,$670:int,$672:int) = ((1 + $672) <= 0)
        P[<<gib_1030@153:3>@156:0>]($643:int,$645:int,$647:int,$649:int) = (1 <= $647)
    end YhornInterface.solve(19573)[3] (0.112983 sec.)
    
  end RefTypeInfer.infer_etrs(15374)[2] (0.463930 sec.)
  refinement types:
    main_1278: X
    f_1282: v1:int -> X
    f_1283: v1:int -> v2:int -> X
    f_1284: v1:int -> v2:int -> v3:int -> X
    main_1034: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1181: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    gib_1030: v1:int -> v2:int -> v3:int -> (v4:{v4:int | false} -> X) -> X
    br_gib_1286: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> X
    gib_1030: v1:int -> v2:int -> v3:int -> (v4:{v4:int | (v3 <= 0)} -> X) -> X
    f_gib_1279: v1:int -> v2:int -> v3:int -> (v4:int -> X) -> v6:int -> X
    gib_1030: v1:int -> v2:int -> v3:{v3:int | ((1 + v3) <= 0)} -> (v4:{v4:int | (1 <= v3)} -> X) -> X
    f_gib_1280: v1:int -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> v7:int -> X
    f_k_main_1281: v1:int -> v2:int -> v3:bool -> v4:int -> (v5:unit -> X) -> v7:int -> X
    fail_1288: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1285: var144:int -> var143:int -> var142:int -> var141:unit -> X
  abstraction types:
    main_1278: X
    f_1282: v1:int -> X
    f_1283: v1:int -> v2:int -> X
    f_1284: v1:int -> v2:int -> v3:int -> X
    main_1034: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1181: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    gib_1030: var151:int ->
              var152:int ->
              var153:int[var153 -> ((1 + var153) <= 0)] ->
              (var154:int[var154 -> (var153 <= 0),
                          var154 -> (1 <= var153)] -> X) -> X
    br_gib_1286: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> X
    f_gib_1279: v1:int -> v2:int -> v3:int -> (v4:int -> X) -> v6:int -> X
    f_gib_1280: v1:int -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> v7:int -> X
    f_k_main_1281: v1:int -> v2:int -> v3:bool -> v4:int -> (v5:unit -> X) -> v7:int -> X
    fail_1288: v1:bool -> (v2:unit -> X) -> X
    f_1285: var144:int -> var143:int -> var142:int -> var141:unit -> X
  
end AbsTypeInfer.refine(15373)[1] (0.468928 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1; 1; 0

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1278
  main_1278 -> (rand_int f_1282)
  br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 when b_1287 -> (k_gib_1122 b_1032)
  br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 when (not b_1287) ->
      (gib_1030 a_1031 b_1032 (n_1033 - 1) (f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122))
  f_1282 x_1219 -> (rand_int (f_1283 x_1219))
  f_1283 x_1219 x_1232 -> (rand_int (f_1284 x_1219 x_1232))
  f_1284 x_1219 x_1232 x_1245 -> (main_1034 x_1219 x_1232 x_1245 (f_1285 x_1219 x_1232 x_1245))
  f_1285 x_1219 x_1232 x_1245 x_1216 -> end
  f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122 x_1125 ->
      (gib_1030 a_1031 b_1032 (n_1033 - 2) (f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122))
  f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122 x_1126 -> (k_gib_1122 (x_1125 + x_1126))
  f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 when (x_1185 >= 0) -> (k_main_1178 ())
  f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 when (not (x_1185 >= 0)) -> (fail_1288 true k_main_1178)
  fail_1288 b k -> {fail} => (k ())
  gib_1030 a_1031 b_1032 n_1033 k_gib_1122 when (n_1033 = 0) -> (k_gib_1122 a_1031)
  gib_1030 a_1031 b_1032 n_1033 k_gib_1122 when (not (n_1033 = 0)) ->
      (br_gib_1286 (n_1033 = 1) a_1031 b_1032 n_1033 k_gib_1122)
  k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 when b_1213 ->
      (gib_1030 a_1036 b_1037 n_1035 (f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178))
  k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 when (not b_1213) -> (k_main_1178 ())
  main_1034 n_1035 a_1036 b_1037 k_main_1178 when (a_1036 >= 0) ->
      (k_main_1181 a_1036 b_1037 n_1035 k_main_1178 (b_1037 >= 0))
  main_1034 n_1035 a_1036 b_1037 k_main_1178 when (not (a_1036 >= 0)) ->
      (k_main_1181 a_1036 b_1037 n_1035 k_main_1178 false)
Types:
  main_1278 : X
  fail_1288 : (x_1:bool[x_1] -> (unit -> X) -> X)
  gib_1030 : (x_1:int ->
              x_2:int ->
              x_3:int[x_3 <= -1; x_3 <= 0] ->
              (x_5:int[x_3 >= 1; x_3 <= 0; x_3 >= 2; x_3 <= 1; x_1 <= x_5; x_2 <= x_5] -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Error trace::
  main_1278 ... --> 
  f_1282 ... --> 
  f_1283 ... --> 
  f_1284 ... --> 
  main_1034 [1/2] ... --> 
  k_main_1181 [1/2] ... --> 
  gib_1030 [2/2] ... --> 
  br_gib_1286 [2/2] ... --> 
  gib_1030 [2/2] ... --> 
  br_gib_1286 [1/2] ... --> 
  f_gib_1279 ... --> 
  gib_1030 [1/2] ... --> 
  f_gib_1280 ... --> 
  f_k_main_1281 [2/2] ... --> 
  fail_1288 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 1; 1; 0; 0; 0; 0; 1; 0

(4-3) Checking counter-example ... DONE!

(4-4) Discovering predicates ... 
begin AbsTypeInfer.refine(24107)[1]
  program:
    main_1278  | true = ((Random.int 0) f_1282)
    br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 | b_1287 = (k_gib_1122 b_1032)
    br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 | (not b_1287) = (
    gib_1030 a_1031
             b_1032
             (n_1033 - 1)
             (f_gib_1279 a_1031
                         b_1032
                         n_1033
                         k_gib_1122))
    f_1282 x_1219 | true = ((Random.int 0) (f_1283 x_1219))
    f_1283 x_1219 x_1232 | true = ((Random.int 0) (f_1284 x_1219
                                                          x_1232))
    f_1284 x_1219 x_1232 x_1245 | true = (main_1034 x_1219
                                                    x_1232
                                                    x_1245
                                                    (f_1285 x_1219
                                                            x_1232
                                                            x_1245))
    f_1285 x_1219 x_1232 x_1245 x_1216 | true = end
    f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122 x_1125 | true = (gib_1030
                                                                  a_1031
                                                                  b_1032
                                                                  (n_1033 - 2)
                                                                  (f_gib_1280 a_1031
                                                                    b_1032
                                                                    n_1033
                                                                    x_1125
                                                                    k_gib_1122))
    f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122 x_1126 | true = (
    k_gib_1122 (x_1125 + x_1126))
    f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 | (x_1185 >= 0) = (
    k_main_1178 ())
    f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 | (not (
                                                                    x_1185 >= 0)) = (
    fail_1288 true
              k_main_1178)
    fail_1288 b k | true = (fail ())
    gib_1030 a_1031 b_1032 n_1033 k_gib_1122 | (n_1033 = 0) = (k_gib_1122 a_1031)
    gib_1030 a_1031 b_1032 n_1033 k_gib_1122 | (not (n_1033 = 0)) = (
    br_gib_1286 (n_1033 = 1)
                a_1031
                b_1032
                n_1033
                k_gib_1122)
    k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 | b_1213 = (gib_1030
                                                                    a_1036
                                                                    b_1037
                                                                    n_1035
                                                                    (
                                                                    f_k_main_1281
                                                                    a_1036
                                                                    b_1037
                                                                    b_1213
                                                                    n_1035
                                                                    k_main_1178))
    k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 | (not b_1213) = (
    k_main_1178 ())
    main_1034 n_1035 a_1036 b_1037 k_main_1178 | (a_1036 >= 0) = (k_main_1181
                                                                    a_1036
                                                                    b_1037
                                                                    n_1035
                                                                    k_main_1178
                                                                    (
                                                                    b_1037 >= 0))
    main_1034 n_1035 a_1036 b_1037 k_main_1178 | (not (a_1036 >= 0)) = (
    k_main_1181 a_1036
                b_1037
                n_1035
                k_main_1178
                false)
    main_1278:X
    br_gib_1286:bool -> int -> int -> int -> (int -> X) -> X
    f_1282:int -> X
    f_1283:int -> int -> X
    f_1284:int -> int -> int -> X
    f_1285:int -> int -> int -> unit -> X
    f_gib_1279:int -> int -> int -> (int -> X) -> int -> X
    f_gib_1280:int -> int -> int -> int -> (int -> X) -> int -> X
    f_k_main_1281:int -> int -> bool -> int -> (unit -> X) -> int -> X
    fail_1288:bool -> (unit -> X) -> X
    gib_1030:int -> int -> int -> (int -> X) -> X
    k_main_1181:int -> int -> int -> (unit -> X) -> bool -> X
    main_1034:int -> int -> int -> (unit -> X) -> X
  inlined functions: br_gib_1286,f_1282,f_1283,f_1284,f_1285,f_gib_1279,f_gib_1280,f_k_main_1281,k_main_1181,main_1034
  counterexample: 0:0:0:0:0:0:1:1:1:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1282@177:0> = var157)
     [true.nop((<f_1283@180:0> = <f_1282@177:0>) && (<f_1283@180:1> = var158))
      [true.nop((<f_1284@183:0> = <f_1283@180:0>) && ((<f_1284@183:1> = <f_1283@180:1>) && (<f_1284@183:2> = var159)))
       [true.
        ((<main_1034@185:0> = <f_1284@183:0>) &&
         ((<main_1034@185:1> = <f_1284@183:1>) && (<main_1034@185:2> = <f_1284@183:2>)))
        [(<main_1034@185:1> >= 0).
         ((<k_main_1181@188:0> = <main_1034@185:1>) &&
          ((<k_main_1181@188:1> = <main_1034@185:2>) &&
           ((<k_main_1181@188:2> = <main_1034@185:0>) && (<k_main_1181@188:4> = (<main_1034@185:2> >= 0)))))
         [<k_main_1181@188:4>.
          ((<gib_1030@191:0> = <k_main_1181@188:0>) &&
           ((<gib_1030@191:1> = <k_main_1181@188:1>) && (<gib_1030@191:2> = <k_main_1181@188:2>)))
          [(not (<gib_1030@191:2> = 0)).
           ((<br_gib_1286@194:0> = (<gib_1030@191:2> = 1)) &&
            ((<br_gib_1286@194:1> = <gib_1030@191:0>) &&
             ((<br_gib_1286@194:2> = <gib_1030@191:1>) && (<br_gib_1286@194:3> = <gib_1030@191:2>))))
           [(not <br_gib_1286@194:0>).
            ((<gib_1030@197:0> = <br_gib_1286@194:1>) &&
             ((<gib_1030@197:1> = <br_gib_1286@194:2>) && (<gib_1030@197:2> = (<br_gib_1286@194:3> - 1))))
            [(not (<gib_1030@197:2> = 0)).
             ((<br_gib_1286@200:0> = (<gib_1030@197:2> = 1)) &&
              ((<br_gib_1286@200:1> = <gib_1030@197:0>) &&
               ((<br_gib_1286@200:2> = <gib_1030@197:1>) && (<br_gib_1286@200:3> = <gib_1030@197:2>))))
             [<br_gib_1286@200:0>.(<<br_gib_1286@200:4>@203:0> = <br_gib_1286@200:2>)
              [true.(<<gib_1030@197:3>@205:0> = <<br_gib_1286@200:4>@203:0>)
               [true.
                ((<f_gib_1279@207:0> = <br_gib_1286@194:1>) &&
                 ((<f_gib_1279@207:1> = <br_gib_1286@194:2>) &&
                  ((<f_gib_1279@207:2> = <br_gib_1286@194:3>) && (<f_gib_1279@207:4> = <<gib_1030@197:3>@205:0>))))
                [true.
                 ((<gib_1030@209:0> = <f_gib_1279@207:0>) &&
                  ((<gib_1030@209:1> = <f_gib_1279@207:1>) && (<gib_1030@209:2> = (<f_gib_1279@207:2> - 2))))
                 [(<gib_1030@209:2> = 0).(<<gib_1030@209:3>@212:0> = <gib_1030@209:0>)
                  [true.
                   ((<f_gib_1280@214:0> = <f_gib_1279@207:0>) &&
                    ((<f_gib_1280@214:1> = <f_gib_1279@207:1>) &&
                     ((<f_gib_1280@214:2> = <f_gib_1279@207:2>) &&
                      ((<f_gib_1280@214:3> = <f_gib_1279@207:4>) && (<f_gib_1280@214:5> = <<gib_1030@209:3>@212:0>)))))
                   [true.(<<f_gib_1280@214:4>@216:0> = (<f_gib_1280@214:3> + <f_gib_1280@214:5>))
                    [true.(<<f_gib_1279@207:3>@218:0> = <<f_gib_1280@214:4>@216:0>)
                     [true.(<<br_gib_1286@194:4>@220:0> = <<f_gib_1279@207:3>@218:0>)
                      [true.(<<gib_1030@191:3>@222:0> = <<br_gib_1286@194:4>@220:0>)
                       [true.
                        ((<f_k_main_1281@224:0> = <k_main_1181@188:0>) &&
                         ((<f_k_main_1281@224:1> = <k_main_1181@188:1>) &&
                          ((<f_k_main_1281@224:2> = <k_main_1181@188:4>) &&
                           ((<f_k_main_1281@224:3> = <k_main_1181@188:2>) &&
                            (<f_k_main_1281@224:5> = <<gib_1030@191:3>@222:0>)))))
                        [(not (<f_k_main_1281@224:5> >= 0)).(<fail_1288@227:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(24108)[2]
    horn clauses:
      P[<fail_1288@227:0>](<fail_1288@227:0>:bool)|- bot
      
      P[<f_k_main_1281@224:5>](<f_k_main_1281@224:0>:int,<f_k_main_1281@224:1>:int,<f_k_main_1281@224:2>:bool,<f_k_main_1281@224:3>:int,<f_k_main_1281@224:5>:int),
      ((<f_k_main_1281@224:5> < 0) && <fail_1288@227:0>) |- P[<fail_1288@227:0>](
      <fail_1288@227:0>:bool)
      
      P[<k_main_1181@188:4>](<f_k_main_1281@224:0>:int,<f_k_main_1281@224:1>:int,<f_k_main_1281@224:3>:int,<f_k_main_1281@224:2>:bool),
      P[<<gib_1030@191:3>@222:0>](<f_k_main_1281@224:0>:int,<f_k_main_1281@224:1>:int,<f_k_main_1281@224:3>:int,<f_k_main_1281@224:5>:int),
      <f_k_main_1281@224:2>
      |- P[<f_k_main_1281@224:5>](<f_k_main_1281@224:0>:int,<f_k_main_1281@224:1>:int,
                                  <f_k_main_1281@224:2>:bool,<f_k_main_1281@224:3>:int,
                                  <f_k_main_1281@224:5>:int)
      
      P[<gib_1030@191:2>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,<gib_1030@191:2>:int),
      P[<<br_gib_1286@194:4>@220:0>]((<gib_1030@191:2> = 1):bool,<gib_1030@191:0>:int,<gib_1030@191:1>:int,<gib_1030@191:2>:int,<<gib_1030@191:3>@222:0>:int),
      (<gib_1030@191:2> <> 0)
      |- P[<<gib_1030@191:3>@222:0>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,
                                     <gib_1030@191:2>:int,<<gib_1030@191:3>@222:0>:int)
      
      P[<br_gib_1286@194:3>](<br_gib_1286@194:0>:bool,<br_gib_1286@194:1>:int,<br_gib_1286@194:2>:int,<br_gib_1286@194:3>:int),
      P[<<f_gib_1279@207:3>@218:0>](<br_gib_1286@194:1>:int,<br_gib_1286@194:2>:int,<br_gib_1286@194:3>:int,<<br_gib_1286@194:4>@220:0>:int),
      (not <br_gib_1286@194:0>)
      |- P[<<br_gib_1286@194:4>@220:0>](<br_gib_1286@194:0>:bool,<br_gib_1286@194:1>:int,
                                        <br_gib_1286@194:2>:int,<br_gib_1286@194:3>:int,
                                        <<br_gib_1286@194:4>@220:0>:int)
      
      P[<f_gib_1279@207:4>](<f_gib_1279@207:0>:int,<f_gib_1279@207:1>:int,<f_gib_1279@207:2>:int,<f_gib_1280@214:3>:int),
      P[<<f_gib_1280@214:4>@216:0>](<f_gib_1279@207:0>:int,<f_gib_1279@207:1>:int,<f_gib_1279@207:2>:int,<f_gib_1280@214:3>:int,<<f_gib_1279@207:3>@218:0>:int)|- P[<<f_gib_1279@207:3>@218:0>](
      <f_gib_1279@207:0>:int,<f_gib_1279@207:1>:int,<f_gib_1279@207:2>:int,
      <<f_gib_1279@207:3>@218:0>:int)
      
      P[<f_gib_1280@214:5>](<f_gib_1280@214:0>:int,<f_gib_1280@214:1>:int,<f_gib_1280@214:2>:int,<f_gib_1280@214:3>:int,(
                            <<f_gib_1280@214:4>@216:0> + (-1 * <f_gib_1280@214:3>)):int)|- P[<<f_gib_1280@214:4>@216:0>](
      <f_gib_1280@214:0>:int,<f_gib_1280@214:1>:int,<f_gib_1280@214:2>:int,
      <f_gib_1280@214:3>:int,<<f_gib_1280@214:4>@216:0>:int)
      
      P[<f_gib_1279@207:4>](<f_gib_1280@214:0>:int,<f_gib_1280@214:1>:int,<f_gib_1280@214:2>:int,<f_gib_1280@214:3>:int),
      P[<<gib_1030@209:3>@212:0>](<f_gib_1280@214:0>:int,<f_gib_1280@214:1>:int,(
                                  -2 + <f_gib_1280@214:2>):int,<f_gib_1280@214:5>:int)|- P[<f_gib_1280@214:5>](
      <f_gib_1280@214:0>:int,<f_gib_1280@214:1>:int,<f_gib_1280@214:2>:int,
      <f_gib_1280@214:3>:int,<f_gib_1280@214:5>:int)
      
      P[<gib_1030@209:2>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,<gib_1030@209:2>:int),
      ((<gib_1030@209:2> = 0) && (<<gib_1030@209:3>@212:0> = <gib_1030@209:0>))
      |- P[<<gib_1030@209:3>@212:0>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,
                                     <gib_1030@209:2>:int,<<gib_1030@209:3>@212:0>:int)
      
      P[<f_gib_1279@207:4>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,(
                            2 + <gib_1030@209:2>):int,<f_gib_1279@207:4>:int)|- P[<gib_1030@209:2>](
      <gib_1030@209:0>:int,<gib_1030@209:1>:int,<gib_1030@209:2>:int)
      
      P[<br_gib_1286@194:3>](false:bool,<f_gib_1279@207:0>:int,<f_gib_1279@207:1>:int,<f_gib_1279@207:2>:int),
      P[<<gib_1030@197:3>@205:0>](<f_gib_1279@207:0>:int,<f_gib_1279@207:1>:int,(
                                  -1 + <f_gib_1279@207:2>):int,<f_gib_1279@207:4>:int)|- P[<f_gib_1279@207:4>](
      <f_gib_1279@207:0>:int,<f_gib_1279@207:1>:int,<f_gib_1279@207:2>:int,
      <f_gib_1279@207:4>:int)
      
      P[<gib_1030@197:2>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,<gib_1030@197:2>:int),
      P[<<br_gib_1286@200:4>@203:0>]((<gib_1030@197:2> = 1):bool,<gib_1030@197:0>:int,<gib_1030@197:1>:int,<gib_1030@197:2>:int,<<gib_1030@197:3>@205:0>:int),
      (<gib_1030@197:2> <> 0)
      |- P[<<gib_1030@197:3>@205:0>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,
                                     <gib_1030@197:2>:int,<<gib_1030@197:3>@205:0>:int)
      
      P[<br_gib_1286@200:3>](<br_gib_1286@200:0>:bool,<br_gib_1286@200:1>:int,<br_gib_1286@200:2>:int,<br_gib_1286@200:3>:int),
      ((<<br_gib_1286@200:4>@203:0> = <br_gib_1286@200:2>) && <br_gib_1286@200:0>)
      |- P[<<br_gib_1286@200:4>@203:0>](<br_gib_1286@200:0>:bool,<br_gib_1286@200:1>:int,
                                        <br_gib_1286@200:2>:int,<br_gib_1286@200:3>:int,
                                        <<br_gib_1286@200:4>@203:0>:int)
      
      P[<gib_1030@197:2>](<br_gib_1286@200:1>:int,<br_gib_1286@200:2>:int,<br_gib_1286@200:3>:int),
      ((<br_gib_1286@200:3> <> 0) && (<br_gib_1286@200:0> = (<br_gib_1286@200:3> = 1)))
      |- P[<br_gib_1286@200:3>](<br_gib_1286@200:0>:bool,<br_gib_1286@200:1>:int,
                                <br_gib_1286@200:2>:int,<br_gib_1286@200:3>:int)
      
      P[<br_gib_1286@194:3>](false:bool,<gib_1030@197:0>:int,<gib_1030@197:1>:int,(
                             1 + <gib_1030@197:2>):int)|- P[<gib_1030@197:2>](
      <gib_1030@197:0>:int,<gib_1030@197:1>:int,<gib_1030@197:2>:int)
      
      P[<gib_1030@191:2>](<br_gib_1286@194:1>:int,<br_gib_1286@194:2>:int,<br_gib_1286@194:3>:int),
      ((<br_gib_1286@194:3> <> 0) && (<br_gib_1286@194:0> = (<br_gib_1286@194:3> = 1)))
      |- P[<br_gib_1286@194:3>](<br_gib_1286@194:0>:bool,<br_gib_1286@194:1>:int,
                                <br_gib_1286@194:2>:int,<br_gib_1286@194:3>:int)
      
      P[<k_main_1181@188:4>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,<gib_1030@191:2>:int,true:bool)|- P[<gib_1030@191:2>](
      <gib_1030@191:0>:int,<gib_1030@191:1>:int,<gib_1030@191:2>:int)
      
      P[<main_1034@185:2>](<k_main_1181@188:2>:int,<k_main_1181@188:0>:int,<k_main_1181@188:1>:int),
      ((<k_main_1181@188:0> >= 0) && (<k_main_1181@188:4> = (<k_main_1181@188:1> >= 0)))
      |- P[<k_main_1181@188:4>](<k_main_1181@188:0>:int,<k_main_1181@188:1>:int,
                                <k_main_1181@188:2>:int,<k_main_1181@188:4>:bool)
      
      P[<f_1284@183:2>](<main_1034@185:0>:int,<main_1034@185:1>:int,<main_1034@185:2>:int)|- P[<main_1034@185:2>](
      <main_1034@185:0>:int,<main_1034@185:1>:int,<main_1034@185:2>:int)
      
      P[<f_1283@180:1>](<f_1284@183:0>:int,<f_1284@183:1>:int)|- P[<f_1284@183:2>](
      <f_1284@183:0>:int,<f_1284@183:1>:int,<f_1284@183:2>:int)
      
      P[<f_1282@177:0>](<f_1283@180:0>:int)|- P[<f_1283@180:1>](<f_1283@180:0>:int,
                                                                <f_1283@180:1>:int)
      
      |- P[<f_1282@177:0>](<f_1282@177:0>:int)
    call trees:
      <main_1278@174>
        <f_1282@177>
          <f_1283@180>
            <f_1284@183>
              <main_1034@185>
                <k_main_1181@188>
                  <gib_1030@191>
                    <br_gib_1286@194>
                      <gib_1030@197>
                        <br_gib_1286@200>
                        </<br_gib_1286@200:4>@203>
                      </<gib_1030@197:3>@205>
                      <f_gib_1279@207>
                        <gib_1030@209>
                        </<gib_1030@209:3>@212>
                        <f_gib_1280@214>
                        </<f_gib_1280@214:4>@216>
                      </<f_gib_1279@207:3>@218>
                    </<br_gib_1286@194:4>@220>
                  </<gib_1030@191:3>@222>
                  <f_k_main_1281@224>
                    <fail_1288@227>
    inlined horn clauses:
      P[<fail_1288@227:0>](<fail_1288@227:0>:bool)|- bot
      
      P[<<gib_1030@191:3>@222:0>](<f_k_main_1281@224:0>:int,<f_k_main_1281@224:1>:int,<f_k_main_1281@224:3>:int,<f_k_main_1281@224:5>:int),
      ((<f_k_main_1281@224:1> >= 0) &&
       ((<f_k_main_1281@224:0> >= 0) && ((<f_k_main_1281@224:5> < 0) && <fail_1288@227:0>)))
      |- P[<fail_1288@227:0>](<fail_1288@227:0>:bool)
      
      P[<gib_1030@191:2>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,<gib_1030@191:2>:int),
      P[<<gib_1030@197:3>@205:0>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,(
                                  -1 + <gib_1030@191:2>):int,var161:int),
      P[<<gib_1030@209:3>@212:0>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,(
                                  -2 + <gib_1030@191:2>):int,(<<gib_1030@191:3>@222:0> + (-1 * var161)):int),
      ((<gib_1030@191:2> <> 0) && (<gib_1030@191:2> <> 1))
      |- P[<<gib_1030@191:3>@222:0>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,
                                     <gib_1030@191:2>:int,<<gib_1030@191:3>@222:0>:int)
      
      P[<gib_1030@209:2>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,<gib_1030@209:2>:int),
      ((<gib_1030@209:2> = 0) && (<<gib_1030@209:3>@212:0> = <gib_1030@209:0>))
      |- P[<<gib_1030@209:3>@212:0>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,
                                     <gib_1030@209:2>:int,<<gib_1030@209:3>@212:0>:int)
      
      P[<gib_1030@191:2>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,(
                          2 + <gib_1030@209:2>):int),
      P[<<gib_1030@197:3>@205:0>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,(
                                  1 + <gib_1030@209:2>):int,<f_gib_1279@207:4>:int),
      (((2 + <gib_1030@209:2>) <> 0) && ((1 + <gib_1030@209:2>) <> 0))
      |- P[<gib_1030@209:2>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,
                             <gib_1030@209:2>:int)
      
      P[<gib_1030@197:2>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,<gib_1030@197:2>:int),
      ((<gib_1030@197:2> = 1) && (<<gib_1030@197:3>@205:0> = <gib_1030@197:1>))
      |- P[<<gib_1030@197:3>@205:0>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,
                                     <gib_1030@197:2>:int,<<gib_1030@197:3>@205:0>:int)
      
      P[<gib_1030@191:2>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,(
                          1 + <gib_1030@197:2>):int), (((1 + <gib_1030@197:2>) <> 0) && (<gib_1030@197:2> <> 0))
      |- P[<gib_1030@197:2>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,
                             <gib_1030@197:2>:int)
      
       ((<gib_1030@191:0> >= 0) && (<gib_1030@191:1> >= 0))
      |- P[<gib_1030@191:2>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,
                             <gib_1030@191:2>:int)
    begin ParamSubstInfer.infer(28277)[3]
      
    end ParamSubstInfer.infer(28277)[3] (0.615907 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(28279)[3]
      
    end RefTypeInfer.elim_coeffs(28279)[3] (0.002999 sec.)
    begin YhornInterface.solve(28870)[3]
      begin HcSolver.solve_ub(28871)[4]
        encoded:
          P[<fail_1288@227:0>](<fail_1288@227:0>:int)|- bot
          
          P[<<gib_1030@191:3>@222:0>](<f_k_main_1281@224:0>:int,<f_k_main_1281@224:1>:int,<f_k_main_1281@224:3>:int,<f_k_main_1281@224:5>:int),
          ((<f_k_main_1281@224:1> >= 0) &&
           ((<f_k_main_1281@224:0> >= 0) && ((<f_k_main_1281@224:5> < 0) && (<fail_1288@227:0> = 1))))
          |- P[<fail_1288@227:0>](<fail_1288@227:0>:int)
          
          P[<gib_1030@191:2>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,<gib_1030@191:2>:int),
          P[<<gib_1030@197:3>@205:0>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,(
                                      -1 + <gib_1030@191:2>):int,var161:int),
          P[<<gib_1030@209:3>@212:0>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,(
                                      -2 + <gib_1030@191:2>):int,(<<gib_1030@191:3>@222:0> + (-1 * var161)):int),
          ((<gib_1030@191:2> <> 0) && (<gib_1030@191:2> <> 1))
          |- P[<<gib_1030@191:3>@222:0>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,
                                         <gib_1030@191:2>:int,<<gib_1030@191:3>@222:0>:int)
          
          P[<gib_1030@209:2>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,<gib_1030@209:2>:int),
          ((<gib_1030@209:2> = 0) && (<<gib_1030@209:3>@212:0> = <gib_1030@209:0>))
          |- P[<<gib_1030@209:3>@212:0>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,
                                         <gib_1030@209:2>:int,<<gib_1030@209:3>@212:0>:int)
          
          P[<gib_1030@191:2>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,(
                              2 + <gib_1030@209:2>):int),
          P[<<gib_1030@197:3>@205:0>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,(
                                      1 + <gib_1030@209:2>):int,<f_gib_1279@207:4>:int),
          (((2 + <gib_1030@209:2>) <> 0) && ((1 + <gib_1030@209:2>) <> 0))
          |- P[<gib_1030@209:2>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,
                                 <gib_1030@209:2>:int)
          
          P[<gib_1030@197:2>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,<gib_1030@197:2>:int),
          ((<gib_1030@197:2> = 1) && (<<gib_1030@197:3>@205:0> = <gib_1030@197:1>))
          |- P[<<gib_1030@197:3>@205:0>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,
                                         <gib_1030@197:2>:int,<<gib_1030@197:3>@205:0>:int)
          
          P[<gib_1030@191:2>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,(
                              1 + <gib_1030@197:2>):int), (((1 + <gib_1030@197:2>) <> 0) && (<gib_1030@197:2> <> 0))
          |- P[<gib_1030@197:2>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,
                                 <gib_1030@197:2>:int)
          
           ((<gib_1030@191:0> >= 0) && (<gib_1030@191:1> >= 0))
          |- P[<gib_1030@191:2>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,
                                 <gib_1030@191:2>:int)
        input to Yhorn:
          P[<fail_1288@227:0>](<fail_1288@227:0>:int)|- bot
          
          P[<<gib_1030@191:3>@222:0>](<f_k_main_1281@224:0>:int,<f_k_main_1281@224:1>:int,<f_k_main_1281@224:3>:int,<f_k_main_1281@224:5>:int),
          ((<f_k_main_1281@224:5> < 0) &&
           ((<f_k_main_1281@224:0> >= 0) && ((<f_k_main_1281@224:1> >= 0) && (<fail_1288@227:0> = 1))))
          |- P[<fail_1288@227:0>](<fail_1288@227:0>:int)
          
          P[<gib_1030@191:2>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,<gib_1030@191:2>:int),
          P[<<gib_1030@197:3>@205:0>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,var162:int,var161:int),
          P[<<gib_1030@209:3>@212:0>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,var163:int,var164:int),
          (((var164 + var161) = <<gib_1030@191:3>@222:0>) &&
           (((2 + var163) = <gib_1030@191:2>) &&
            (((1 + var162) = <gib_1030@191:2>) && ((<gib_1030@191:2> <> 1) && (<gib_1030@191:2> <> 0)))))
          |- P[<<gib_1030@191:3>@222:0>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,
                                         <gib_1030@191:2>:int,<<gib_1030@191:3>@222:0>:int)
          
          P[<gib_1030@209:2>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,<gib_1030@209:2>:int),
          ((<<gib_1030@209:3>@212:0> = <gib_1030@209:0>) && (<gib_1030@209:2> = 0))
          |- P[<<gib_1030@209:3>@212:0>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,
                                         <gib_1030@209:2>:int,<<gib_1030@209:3>@212:0>:int)
          
          P[<gib_1030@191:2>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,var165:int),
          P[<<gib_1030@197:3>@205:0>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,var166:int,<f_gib_1279@207:4>:int),
          ((var166 = (1 + <gib_1030@209:2>)) &&
           ((var165 = (2 + <gib_1030@209:2>)) && (((1 + <gib_1030@209:2>) <> 0) && ((2 + <gib_1030@209:2>) <> 0))))
          |- P[<gib_1030@209:2>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,
                                 <gib_1030@209:2>:int)
          
          P[<gib_1030@197:2>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,<gib_1030@197:2>:int),
          ((<<gib_1030@197:3>@205:0> = <gib_1030@197:1>) && (<gib_1030@197:2> = 1))
          |- P[<<gib_1030@197:3>@205:0>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,
                                         <gib_1030@197:2>:int,<<gib_1030@197:3>@205:0>:int)
          
          P[<gib_1030@191:2>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,var167:int),
          ((var167 = (1 + <gib_1030@197:2>)) && ((<gib_1030@197:2> <> 0) && ((1 + <gib_1030@197:2>) <> 0)))
          |- P[<gib_1030@197:2>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,
                                 <gib_1030@197:2>:int)
          
           ((<gib_1030@191:1> >= 0) && (<gib_1030@191:0> >= 0))
          |- P[<gib_1030@191:2>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,
                                 <gib_1030@191:2>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1288_sep_227_sep_0($1016)) -> 1=0.
(($1016-1=0) & ($1017>=0) & ($1018>=0) & ($1019<0)) & (v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0($1018,$1017,$1020,$1019)) -> v_sep_fail_1288_sep_227_sep_0($1016).
(($1021<>0) & ($1021-1<>0) & (-$1021+$1022+1=0) & (-$1021+$1023+2=0) & ($1024+$1025-$1026=0)) & (v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0($1027,$1028,$1023,$1024)) & (v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0($1027,$1028,$1022,$1025)) & (v_sep_gib_1030_sep_191_sep_2($1027,$1028,$1021)) -> v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0($1027,$1028,$1021,$1026).
(($1029=0) & ($1030-$1031=0)) & (v_sep_gib_1030_sep_209_sep_2($1031,$1032,$1029)) -> v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0($1031,$1032,$1029,$1030).
(($1029+2<>0) & ($1029+1<>0) & (-$1029+$1033-2=0) & (-$1029+$1034-1=0)) & (v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0($1031,$1032,$1034,$1035)) & (v_sep_gib_1030_sep_191_sep_2($1031,$1032,$1033)) -> v_sep_gib_1030_sep_209_sep_2($1031,$1032,$1029).
(($1036-1=0) & ($1037-$1038=0)) & (v_sep_gib_1030_sep_197_sep_2($1039,$1038,$1036)) -> v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0($1039,$1038,$1036,$1037).
(($1036+1<>0) & ($1036<>0) & (-$1036+$1040-1=0)) & (v_sep_gib_1030_sep_191_sep_2($1039,$1038,$1040)) -> v_sep_gib_1030_sep_197_sep_2($1039,$1038,$1036).
($1027>=0) & ($1028>=0) -> v_sep_gib_1030_sep_191_sep_2($1027,$1028,$1021).


v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: X
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: X
.............................
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: X
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: X
...
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: X
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: X
...............
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: X
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: X
.................
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: X
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: X
.............................Split conj [42] 0.932857
(Reconstrcut: 10 ****)
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: X
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: (X) & (X) & (X) & (X)
...................
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: X
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: (X) & (X) & (X) & (X)
...
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: X
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: (X) & (X) & (X) & (X)
...............
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: X
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: (X) & (X) & (X) & (X)
....................
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: X
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: (X) & (X) & (X) & (X)
................................Split conj [48] 1.271806
(Reconstrcut: 23 ********)
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: (X) & (X) & (X) & (X)
...................................
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: (X) & (X) & (X) & (X)
...
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: (X) & (X) & (X) & (X)
...............
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: (X) & (X) & (X) & (X)
.......................
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: (X) & (X) & (X) & (X)
...................................
v_sep_fail_1288_sep_227_sep_0: X
v_sep_gib_1030_sep_191_sep_2: X
v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0: X
v_sep_gib_1030_sep_197_sep_2: X
v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_gib_1030_sep_209_sep_2: X
v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0: (X) & (X) & (X) & (X)
.......................................(0=0) & (v_sep_fail_1288_sep_227_sep_0($1016)) -> 1=0.
(($1016-1=0) & ($1017>=0) & ($1018>=0) & ($1019<0)) & (v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0($1018,$1017,$1020,$1019)) -> v_sep_fail_1288_sep_227_sep_0($1016).
(($1021<>0) & ($1021-1<>0) & (-$1021+$1022+1=0) & (-$1021+$1023+2=0) & ($1024+$1025-$1026=0)) & (v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0($1027,$1028,$1023,$1024)) & (v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0($1027,$1028,$1022,$1025)) & (v_sep_gib_1030_sep_191_sep_2($1027,$1028,$1021)) -> v_sep_gib_1030_sep_191_sep_3_sep_222_sep_0($1027,$1028,$1021,$1026).
(($1029=0) & ($1030-$1031=0)) & (v_sep_gib_1030_sep_209_sep_2($1031,$1032,$1029)) -> v_sep_gib_1030_sep_209_sep_3_sep_212_sep_0($1031,$1032,$1029,$1030).
(($1029+2<>0) & ($1029+1<>0) & (-$1029+$1033-2=0) & (-$1029+$1034-1=0)) & (v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0($1031,$1032,$1034,$1035)) & (v_sep_gib_1030_sep_191_sep_2($1031,$1032,$1033)) -> v_sep_gib_1030_sep_209_sep_2($1031,$1032,$1029).
(($1036-1=0) & ($1037-$1038=0)) & (v_sep_gib_1030_sep_197_sep_2($1039,$1038,$1036)) -> v_sep_gib_1030_sep_197_sep_3_sep_205_sep_0($1039,$1038,$1036,$1037).
(($1036+1<>0) & ($1036<>0) & (-$1036+$1040-1=0)) & (v_sep_gib_1030_sep_191_sep_2($1039,$1038,$1040)) -> v_sep_gib_1030_sep_197_sep_2($1039,$1038,$1036).
($1027>=0) & ($1028>=0) -> v_sep_gib_1030_sep_191_sep_2($1027,$1028,$1021).

        solution:
          P[<fail_1288@227:0>]($1041:bool) = false
          P[<gib_1030@191:2>]($1071:int,$1073:int,$1075:int) = true
          P[<<gib_1030@191:3>@222:0>]($1044:int,$1046:int,$1048:int,$1050:int) = (($1046 + $1044) <= $1050)
          P[<gib_1030@197:2>]($1085:int,$1087:int,$1089:int) = true
          P[<<gib_1030@197:3>@205:0>]($1062:int,$1064:int,$1066:int,$1068:int) = ($1064 <= $1068)
          P[<gib_1030@209:2>]($1078:int,$1080:int,$1082:int) = true
          P[<<gib_1030@209:3>@212:0>]($1053:int,$1055:int,$1057:int,$1059:int) = ($1053 <= $1059)
        
      end HcSolver.solve_ub(28871)[4] (0.716891 sec.)
      begin HcSolver.check_validity(29679)[4]
        input:
          P[<fail_1288@227:0>](<fail_1288@227:0>:bool)|- bot
          
          P[<<gib_1030@191:3>@222:0>](<f_k_main_1281@224:0>:int,<f_k_main_1281@224:1>:int,<f_k_main_1281@224:3>:int,<f_k_main_1281@224:5>:int),
          ((<f_k_main_1281@224:1> >= 0) &&
           ((<f_k_main_1281@224:0> >= 0) && ((<f_k_main_1281@224:5> < 0) && <fail_1288@227:0>)))
          |- P[<fail_1288@227:0>](<fail_1288@227:0>:bool)
          
          P[<gib_1030@191:2>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,<gib_1030@191:2>:int),
          P[<<gib_1030@197:3>@205:0>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,(
                                      -1 + <gib_1030@191:2>):int,var161:int),
          P[<<gib_1030@209:3>@212:0>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,(
                                      -2 + <gib_1030@191:2>):int,(<<gib_1030@191:3>@222:0> + (-1 * var161)):int),
          ((<gib_1030@191:2> <> 0) && (<gib_1030@191:2> <> 1))
          |- P[<<gib_1030@191:3>@222:0>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,
                                         <gib_1030@191:2>:int,<<gib_1030@191:3>@222:0>:int)
          
          P[<gib_1030@209:2>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,<gib_1030@209:2>:int),
          ((<gib_1030@209:2> = 0) && (<<gib_1030@209:3>@212:0> = <gib_1030@209:0>))
          |- P[<<gib_1030@209:3>@212:0>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,
                                         <gib_1030@209:2>:int,<<gib_1030@209:3>@212:0>:int)
          
          P[<gib_1030@191:2>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,(
                              2 + <gib_1030@209:2>):int),
          P[<<gib_1030@197:3>@205:0>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,(
                                      1 + <gib_1030@209:2>):int,<f_gib_1279@207:4>:int),
          (((2 + <gib_1030@209:2>) <> 0) && ((1 + <gib_1030@209:2>) <> 0))
          |- P[<gib_1030@209:2>](<gib_1030@209:0>:int,<gib_1030@209:1>:int,
                                 <gib_1030@209:2>:int)
          
          P[<gib_1030@197:2>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,<gib_1030@197:2>:int),
          ((<gib_1030@197:2> = 1) && (<<gib_1030@197:3>@205:0> = <gib_1030@197:1>))
          |- P[<<gib_1030@197:3>@205:0>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,
                                         <gib_1030@197:2>:int,<<gib_1030@197:3>@205:0>:int)
          
          P[<gib_1030@191:2>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,(
                              1 + <gib_1030@197:2>):int), (((1 + <gib_1030@197:2>) <> 0) && (<gib_1030@197:2> <> 0))
          |- P[<gib_1030@197:2>](<gib_1030@197:0>:int,<gib_1030@197:1>:int,
                                 <gib_1030@197:2>:int)
          
           ((<gib_1030@191:0> >= 0) && (<gib_1030@191:1> >= 0))
          |- P[<gib_1030@191:2>](<gib_1030@191:0>:int,<gib_1030@191:1>:int,
                                 <gib_1030@191:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(29679)[4] (0.008999 sec.)
      solution:
        P[<fail_1288@227:0>]($1041:bool) = false
        P[<gib_1030@191:2>]($1071:int,$1073:int,$1075:int) = true
        P[<<gib_1030@191:3>@222:0>]($1044:int,$1046:int,$1048:int,$1050:int) = (($1046 + $1044) <= $1050)
        P[<gib_1030@197:2>]($1085:int,$1087:int,$1089:int) = true
        P[<<gib_1030@197:3>@205:0>]($1062:int,$1064:int,$1066:int,$1068:int) = ($1064 <= $1068)
        P[<gib_1030@209:2>]($1078:int,$1080:int,$1082:int) = true
        P[<<gib_1030@209:3>@212:0>]($1053:int,$1055:int,$1057:int,$1059:int) = ($1053 <= $1059)
    end YhornInterface.solve(28870)[3] (0.726890 sec.)
    
  end RefTypeInfer.infer_etrs(24108)[2] (1.368793 sec.)
  refinement types:
    main_1278: X
    f_1282: v1:int -> X
    f_1283: v1:int -> v2:int -> X
    f_1284: v1:int -> v2:int -> v3:int -> X
    main_1034: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1181: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    gib_1030: v1:int -> v2:int -> v3:int -> (v4:{v4:int | ((v2 + v1) <= v4)} -> X) -> X
    br_gib_1286: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> X
    gib_1030: v1:int -> v2:int -> v3:int -> (v4:{v4:int | (v2 <= v4)} -> X) -> X
    br_gib_1286: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> X
    f_gib_1279: v1:int -> v2:int -> v3:int -> (v4:int -> X) -> v6:int -> X
    gib_1030: v1:int -> v2:int -> v3:int -> (v4:{v4:int | (v1 <= v4)} -> X) -> X
    f_gib_1280: v1:int -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> v7:int -> X
    f_k_main_1281: v1:int -> v2:int -> v3:bool -> v4:int -> (v5:unit -> X) -> v7:int -> X
    fail_1288: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1285: var180:int -> var179:int -> var178:int -> var177:unit -> X
  abstraction types:
    main_1278: X
    f_1282: v1:int -> X
    f_1283: v1:int -> v2:int -> X
    f_1284: v1:int -> v2:int -> v3:int -> X
    main_1034: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1181: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    gib_1030: var187:int ->
              var188:int ->
              var189:int ->
              (var190:int[var190 -> ((var188 + var187) <= var190),
                          var190 -> (var188 <= var190),
                          var190 -> (var187 <= var190)] -> X) -> X
    br_gib_1286: var193:bool -> var194:int -> var195:int -> var196:int -> (var197:int -> X) -> X
    f_gib_1279: v1:int -> v2:int -> v3:int -> (v4:int -> X) -> v6:int -> X
    f_gib_1280: v1:int -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> v7:int -> X
    f_k_main_1281: v1:int -> v2:int -> v3:bool -> v4:int -> (v5:unit -> X) -> v7:int -> X
    fail_1288: v1:bool -> (v2:unit -> X) -> X
    f_1285: var180:int -> var179:int -> var178:int -> var177:unit -> X
  
end AbsTypeInfer.refine(24107)[1] (1.374791 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1; 1; 1; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 5)::
Main: main_1278
  main_1278 -> (rand_int f_1282)
  br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 when b_1287 -> (k_gib_1122 b_1032)
  br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 when (not b_1287) ->
      (gib_1030 a_1031 b_1032 (n_1033 - 1) (f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122))
  f_1282 x_1219 -> (rand_int (f_1283 x_1219))
  f_1283 x_1219 x_1232 -> (rand_int (f_1284 x_1219 x_1232))
  f_1284 x_1219 x_1232 x_1245 -> (main_1034 x_1219 x_1232 x_1245 (f_1285 x_1219 x_1232 x_1245))
  f_1285 x_1219 x_1232 x_1245 x_1216 -> end
  f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122 x_1125 ->
      (gib_1030 a_1031 b_1032 (n_1033 - 2) (f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122))
  f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122 x_1126 -> (k_gib_1122 (x_1125 + x_1126))
  f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 when (x_1185 >= 0) -> (k_main_1178 ())
  f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 when (not (x_1185 >= 0)) -> (fail_1288 true k_main_1178)
  fail_1288 b k -> {fail} => (k ())
  gib_1030 a_1031 b_1032 n_1033 k_gib_1122 when (n_1033 = 0) -> (k_gib_1122 a_1031)
  gib_1030 a_1031 b_1032 n_1033 k_gib_1122 when (not (n_1033 = 0)) ->
      (br_gib_1286 (n_1033 = 1) a_1031 b_1032 n_1033 k_gib_1122)
  k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 when b_1213 ->
      (gib_1030 a_1036 b_1037 n_1035 (f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178))
  k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 when (not b_1213) -> (k_main_1178 ())
  main_1034 n_1035 a_1036 b_1037 k_main_1178 when (a_1036 >= 0) ->
      (k_main_1181 a_1036 b_1037 n_1035 k_main_1178 (b_1037 >= 0))
  main_1034 n_1035 a_1036 b_1037 k_main_1178 when (not (a_1036 >= 0)) ->
      (k_main_1181 a_1036 b_1037 n_1035 k_main_1178 false)
Types:
  main_1278 : X
  fail_1288 : (x_1:bool[x_1] -> (unit -> X) -> X)
  gib_1030 : (x_1:int ->
              x_2:int ->
              x_3:int[x_3 <= -1; x_3 <= 0] ->
              (x_5:int[x_1 <= -x_2 + x_5; x_3 >= 1; x_3 <= 0; x_3 >= 2; x_3 <= 1; x_1 <= x_5; x_2 <= x_5] -> X) -> X)
  
(5-1) Abstracting ... DONE!

(5-2) Checking HORS ... DONE!

Error trace::
  main_1278 ... --> 
  f_1282 ... --> 
  f_1283 ... --> 
  f_1284 ... --> 
  main_1034 [1/2] ... --> 
  k_main_1181 [1/2] ... --> 
  gib_1030 [2/2] ... --> 
  br_gib_1286 [2/2] ... --> 
  gib_1030 [2/2] ... --> 
  br_gib_1286 [2/2] ... --> 
  gib_1030 [2/2] ... --> 
  br_gib_1286 [1/2] ... --> 
  f_gib_1279 ... --> 
  gib_1030 [1/2] ... --> 
  f_gib_1280 ... --> 
  f_gib_1279 ... --> 
  gib_1030 [2/2] ... --> 
  br_gib_1286 [2/2] ... --> 
  gib_1030 [2/2] ... --> 
  br_gib_1286 [1/2] ... --> 
  f_gib_1279 ... --> 
  gib_1030 [1/2] ... --> 
  f_gib_1280 ... --> 
  f_gib_1280 ... --> 
  f_k_main_1281 [2/2] ... --> 
  fail_1288 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 1; 1; 0; 0; 0; 0; 0; 1; 0

(5-3) Checking counter-example ... DONE!

(5-4) Discovering predicates ... 
begin AbsTypeInfer.refine(36259)[1]
  program:
    main_1278  | true = ((Random.int 0) f_1282)
    br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 | b_1287 = (k_gib_1122 b_1032)
    br_gib_1286 b_1287 a_1031 b_1032 n_1033 k_gib_1122 | (not b_1287) = (
    gib_1030 a_1031
             b_1032
             (n_1033 - 1)
             (f_gib_1279 a_1031
                         b_1032
                         n_1033
                         k_gib_1122))
    f_1282 x_1219 | true = ((Random.int 0) (f_1283 x_1219))
    f_1283 x_1219 x_1232 | true = ((Random.int 0) (f_1284 x_1219
                                                          x_1232))
    f_1284 x_1219 x_1232 x_1245 | true = (main_1034 x_1219
                                                    x_1232
                                                    x_1245
                                                    (f_1285 x_1219
                                                            x_1232
                                                            x_1245))
    f_1285 x_1219 x_1232 x_1245 x_1216 | true = end
    f_gib_1279 a_1031 b_1032 n_1033 k_gib_1122 x_1125 | true = (gib_1030
                                                                  a_1031
                                                                  b_1032
                                                                  (n_1033 - 2)
                                                                  (f_gib_1280 a_1031
                                                                    b_1032
                                                                    n_1033
                                                                    x_1125
                                                                    k_gib_1122))
    f_gib_1280 a_1031 b_1032 n_1033 x_1125 k_gib_1122 x_1126 | true = (
    k_gib_1122 (x_1125 + x_1126))
    f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 | (x_1185 >= 0) = (
    k_main_1178 ())
    f_k_main_1281 a_1036 b_1037 b_1213 n_1035 k_main_1178 x_1185 | (not (
                                                                    x_1185 >= 0)) = (
    fail_1288 true
              k_main_1178)
    fail_1288 b k | true = (fail ())
    gib_1030 a_1031 b_1032 n_1033 k_gib_1122 | (n_1033 = 0) = (k_gib_1122 a_1031)
    gib_1030 a_1031 b_1032 n_1033 k_gib_1122 | (not (n_1033 = 0)) = (
    br_gib_1286 (n_1033 = 1)
                a_1031
                b_1032
                n_1033
                k_gib_1122)
    k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 | b_1213 = (gib_1030
                                                                    a_1036
                                                                    b_1037
                                                                    n_1035
                                                                    (
                                                                    f_k_main_1281
                                                                    a_1036
                                                                    b_1037
                                                                    b_1213
                                                                    n_1035
                                                                    k_main_1178))
    k_main_1181 a_1036 b_1037 n_1035 k_main_1178 b_1213 | (not b_1213) = (
    k_main_1178 ())
    main_1034 n_1035 a_1036 b_1037 k_main_1178 | (a_1036 >= 0) = (k_main_1181
                                                                    a_1036
                                                                    b_1037
                                                                    n_1035
                                                                    k_main_1178
                                                                    (
                                                                    b_1037 >= 0))
    main_1034 n_1035 a_1036 b_1037 k_main_1178 | (not (a_1036 >= 0)) = (
    k_main_1181 a_1036
                b_1037
                n_1035
                k_main_1178
                false)
    main_1278:X
    br_gib_1286:bool -> int -> int -> int -> (int -> X) -> X
    f_1282:int -> X
    f_1283:int -> int -> X
    f_1284:int -> int -> int -> X
    f_1285:int -> int -> int -> unit -> X
    f_gib_1279:int -> int -> int -> (int -> X) -> int -> X
    f_gib_1280:int -> int -> int -> int -> (int -> X) -> int -> X
    f_k_main_1281:int -> int -> bool -> int -> (unit -> X) -> int -> X
    fail_1288:bool -> (unit -> X) -> X
    gib_1030:int -> int -> int -> (int -> X) -> X
    k_main_1181:int -> int -> int -> (unit -> X) -> bool -> X
    main_1034:int -> int -> int -> (unit -> X) -> X
  inlined functions: br_gib_1286,f_1282,f_1283,f_1284,f_1285,f_gib_1279,f_gib_1280,f_k_main_1281,k_main_1181,main_1034
  counterexample: 0:0:0:0:0:0:1:1:1:1:1:0:0:0:0:0:1:1:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1282@233:0> = var200)
     [true.nop((<f_1283@236:0> = <f_1282@233:0>) && (<f_1283@236:1> = var201))
      [true.nop((<f_1284@239:0> = <f_1283@236:0>) && ((<f_1284@239:1> = <f_1283@236:1>) && (<f_1284@239:2> = var202)))
       [true.
        ((<main_1034@241:0> = <f_1284@239:0>) &&
         ((<main_1034@241:1> = <f_1284@239:1>) && (<main_1034@241:2> = <f_1284@239:2>)))
        [(<main_1034@241:1> >= 0).
         ((<k_main_1181@244:0> = <main_1034@241:1>) &&
          ((<k_main_1181@244:1> = <main_1034@241:2>) &&
           ((<k_main_1181@244:2> = <main_1034@241:0>) && (<k_main_1181@244:4> = (<main_1034@241:2> >= 0)))))
         [<k_main_1181@244:4>.
          ((<gib_1030@247:0> = <k_main_1181@244:0>) &&
           ((<gib_1030@247:1> = <k_main_1181@244:1>) && (<gib_1030@247:2> = <k_main_1181@244:2>)))
          [(not (<gib_1030@247:2> = 0)).
           ((<br_gib_1286@250:0> = (<gib_1030@247:2> = 1)) &&
            ((<br_gib_1286@250:1> = <gib_1030@247:0>) &&
             ((<br_gib_1286@250:2> = <gib_1030@247:1>) && (<br_gib_1286@250:3> = <gib_1030@247:2>))))
           [(not <br_gib_1286@250:0>).
            ((<gib_1030@253:0> = <br_gib_1286@250:1>) &&
             ((<gib_1030@253:1> = <br_gib_1286@250:2>) && (<gib_1030@253:2> = (<br_gib_1286@250:3> - 1))))
            [(not (<gib_1030@253:2> = 0)).
             ((<br_gib_1286@256:0> = (<gib_1030@253:2> = 1)) &&
              ((<br_gib_1286@256:1> = <gib_1030@253:0>) &&
               ((<br_gib_1286@256:2> = <gib_1030@253:1>) && (<br_gib_1286@256:3> = <gib_1030@253:2>))))
             [(not <br_gib_1286@256:0>).
              ((<gib_1030@259:0> = <br_gib_1286@256:1>) &&
               ((<gib_1030@259:1> = <br_gib_1286@256:2>) && (<gib_1030@259:2> = (<br_gib_1286@256:3> - 1))))
              [(not (<gib_1030@259:2> = 0)).
               ((<br_gib_1286@262:0> = (<gib_1030@259:2> = 1)) &&
                ((<br_gib_1286@262:1> = <gib_1030@259:0>) &&
                 ((<br_gib_1286@262:2> = <gib_1030@259:1>) && (<br_gib_1286@262:3> = <gib_1030@259:2>))))
               [<br_gib_1286@262:0>.(<<br_gib_1286@262:4>@265:0> = <br_gib_1286@262:2>)
                [true.(<<gib_1030@259:3>@267:0> = <<br_gib_1286@262:4>@265:0>)
                 [true.
                  ((<f_gib_1279@269:0> = <br_gib_1286@256:1>) &&
                   ((<f_gib_1279@269:1> = <br_gib_1286@256:2>) &&
                    ((<f_gib_1279@269:2> = <br_gib_1286@256:3>) && (<f_gib_1279@269:4> = <<gib_1030@259:3>@267:0>))))
                  [true.
                   ((<gib_1030@271:0> = <f_gib_1279@269:0>) &&
                    ((<gib_1030@271:1> = <f_gib_1279@269:1>) && (<gib_1030@271:2> = (<f_gib_1279@269:2> - 2))))
                   [(<gib_1030@271:2> = 0).(<<gib_1030@271:3>@274:0> = <gib_1030@271:0>)
                    [true.
                     ((<f_gib_1280@276:0> = <f_gib_1279@269:0>) &&
                      ((<f_gib_1280@276:1> = <f_gib_1279@269:1>) &&
                       ((<f_gib_1280@276:2> = <f_gib_1279@269:2>) &&
                        ((<f_gib_1280@276:3> = <f_gib_1279@269:4>) && (<f_gib_1280@276:5> = <<gib_1030@271:3>@274:0>)))))
                     [true.(<<f_gib_1280@276:4>@278:0> = (<f_gib_1280@276:3> + <f_gib_1280@276:5>))
                      [true.(<<f_gib_1279@269:3>@280:0> = <<f_gib_1280@276:4>@278:0>)
                       [true.(<<br_gib_1286@256:4>@282:0> = <<f_gib_1279@269:3>@280:0>)
                        [true.(<<gib_1030@253:3>@284:0> = <<br_gib_1286@256:4>@282:0>)
                         [true.
                          ((<f_gib_1279@286:0> = <br_gib_1286@250:1>) &&
                           ((<f_gib_1279@286:1> = <br_gib_1286@250:2>) &&
                            ((<f_gib_1279@286:2> = <br_gib_1286@250:3>) &&
                             (<f_gib_1279@286:4> = <<gib_1030@253:3>@284:0>))))
                          [true.
                           ((<gib_1030@288:0> = <f_gib_1279@286:0>) &&
                            ((<gib_1030@288:1> = <f_gib_1279@286:1>) && (<gib_1030@288:2> = (<f_gib_1279@286:2> - 2))))
                           [(not (<gib_1030@288:2> = 0)).
                            ((<br_gib_1286@291:0> = (<gib_1030@288:2> = 1)) &&
                             ((<br_gib_1286@291:1> = <gib_1030@288:0>) &&
                              ((<br_gib_1286@291:2> = <gib_1030@288:1>) && (<br_gib_1286@291:3> = <gib_1030@288:2>))))
                            [(not <br_gib_1286@291:0>).
                             ((<gib_1030@294:0> = <br_gib_1286@291:1>) &&
                              ((<gib_1030@294:1> = <br_gib_1286@291:2>) &&
                               (<gib_1030@294:2> = (<br_gib_1286@291:3> - 1))))
                             [(not (<gib_1030@294:2> = 0)).
                              ((<br_gib_1286@297:0> = (<gib_1030@294:2> = 1)) &&
                               ((<br_gib_1286@297:1> = <gib_1030@294:0>) &&
                                ((<br_gib_1286@297:2> = <gib_1030@294:1>) && (<br_gib_1286@297:3> = <gib_1030@294:2>))))
                              [<br_gib_1286@297:0>.(<<br_gib_1286@297:4>@300:0> = <br_gib_1286@297:2>)
                               [true.(<<gib_1030@294:3>@302:0> = <<br_gib_1286@297:4>@300:0>)
                                [true.
                                 ((<f_gib_1279@304:0> = <br_gib_1286@291:1>) &&
                                  ((<f_gib_1279@304:1> = <br_gib_1286@291:2>) &&
                                   ((<f_gib_1279@304:2> = <br_gib_1286@291:3>) &&
                                    (<f_gib_1279@304:4> = <<gib_1030@294:3>@302:0>))))
                                 [true.
                                  ((<gib_1030@306:0> = <f_gib_1279@304:0>) &&
                                   ((<gib_1030@306:1> = <f_gib_1279@304:1>) &&
                                    (<gib_1030@306:2> = (<f_gib_1279@304:2> - 2))))
                                  [(<gib_1030@306:2> = 0).(<<gib_1030@306:3>@309:0> = <gib_1030@306:0>)
                                   [true.
                                    ((<f_gib_1280@311:0> = <f_gib_1279@304:0>) &&
                                     ((<f_gib_1280@311:1> = <f_gib_1279@304:1>) &&
                                      ((<f_gib_1280@311:2> = <f_gib_1279@304:2>) &&
                                       ((<f_gib_1280@311:3> = <f_gib_1279@304:4>) &&
                                        (<f_gib_1280@311:5> = <<gib_1030@306:3>@309:0>)))))
                                    [true.(<<f_gib_1280@311:4>@313:0> = (<f_gib_1280@311:3> + <f_gib_1280@311:5>))
                                     [true.(<<f_gib_1279@304:3>@315:0> = <<f_gib_1280@311:4>@313:0>)
                                      [true.(<<br_gib_1286@291:4>@317:0> = <<f_gib_1279@304:3>@315:0>)
                                       [true.(<<gib_1030@288:3>@319:0> = <<br_gib_1286@291:4>@317:0>)
                                        [true.
                                         ((<f_gib_1280@321:0> = <f_gib_1279@286:0>) &&
                                          ((<f_gib_1280@321:1> = <f_gib_1279@286:1>) &&
                                           ((<f_gib_1280@321:2> = <f_gib_1279@286:2>) &&
                                            ((<f_gib_1280@321:3> = <f_gib_1279@286:4>) &&
                                             (<f_gib_1280@321:5> = <<gib_1030@288:3>@319:0>)))))
                                         [true.(<<f_gib_1280@321:4>@323:0> = (<f_gib_1280@321:3> + <f_gib_1280@321:5>))
                                          [true.(<<f_gib_1279@286:3>@325:0> = <<f_gib_1280@321:4>@323:0>)
                                           [true.(<<br_gib_1286@250:4>@327:0> = <<f_gib_1279@286:3>@325:0>)
                                            [true.(<<gib_1030@247:3>@329:0> = <<br_gib_1286@250:4>@327:0>)
                                             [true.
                                              ((<f_k_main_1281@331:0> = <k_main_1181@244:0>) &&
                                               ((<f_k_main_1281@331:1> = <k_main_1181@244:1>) &&
                                                ((<f_k_main_1281@331:2> = <k_main_1181@244:4>) &&
                                                 ((<f_k_main_1281@331:3> = <k_main_1181@244:2>) &&
                                                  (<f_k_main_1281@331:5> = <<gib_1030@247:3>@329:0>)))))
                                              [(not (<f_k_main_1281@331:5> >= 0)).(<fail_1288@334:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(36260)[2]
    horn clauses:
      P[<fail_1288@334:0>](<fail_1288@334:0>:bool)|- bot
      
      P[<f_k_main_1281@331:5>](<f_k_main_1281@331:0>:int,<f_k_main_1281@331:1>:int,<f_k_main_1281@331:2>:bool,<f_k_main_1281@331:3>:int,<f_k_main_1281@331:5>:int),
      ((<f_k_main_1281@331:5> < 0) && <fail_1288@334:0>) |- P[<fail_1288@334:0>](
      <fail_1288@334:0>:bool)
      
      P[<k_main_1181@244:4>](<f_k_main_1281@331:0>:int,<f_k_main_1281@331:1>:int,<f_k_main_1281@331:3>:int,<f_k_main_1281@331:2>:bool),
      P[<<gib_1030@247:3>@329:0>](<f_k_main_1281@331:0>:int,<f_k_main_1281@331:1>:int,<f_k_main_1281@331:3>:int,<f_k_main_1281@331:5>:int),
      <f_k_main_1281@331:2>
      |- P[<f_k_main_1281@331:5>](<f_k_main_1281@331:0>:int,<f_k_main_1281@331:1>:int,
                                  <f_k_main_1281@331:2>:bool,<f_k_main_1281@331:3>:int,
                                  <f_k_main_1281@331:5>:int)
      
      P[<gib_1030@247:2>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,<gib_1030@247:2>:int),
      P[<<br_gib_1286@250:4>@327:0>]((<gib_1030@247:2> = 1):bool,<gib_1030@247:0>:int,<gib_1030@247:1>:int,<gib_1030@247:2>:int,<<gib_1030@247:3>@329:0>:int),
      (<gib_1030@247:2> <> 0)
      |- P[<<gib_1030@247:3>@329:0>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,
                                     <gib_1030@247:2>:int,<<gib_1030@247:3>@329:0>:int)
      
      P[<br_gib_1286@250:3>](<br_gib_1286@250:0>:bool,<br_gib_1286@250:1>:int,<br_gib_1286@250:2>:int,<br_gib_1286@250:3>:int),
      P[<<f_gib_1279@286:3>@325:0>](<br_gib_1286@250:1>:int,<br_gib_1286@250:2>:int,<br_gib_1286@250:3>:int,<<br_gib_1286@250:4>@327:0>:int),
      (not <br_gib_1286@250:0>)
      |- P[<<br_gib_1286@250:4>@327:0>](<br_gib_1286@250:0>:bool,<br_gib_1286@250:1>:int,
                                        <br_gib_1286@250:2>:int,<br_gib_1286@250:3>:int,
                                        <<br_gib_1286@250:4>@327:0>:int)
      
      P[<f_gib_1279@286:4>](<f_gib_1279@286:0>:int,<f_gib_1279@286:1>:int,<f_gib_1279@286:2>:int,<f_gib_1280@321:3>:int),
      P[<<f_gib_1280@321:4>@323:0>](<f_gib_1279@286:0>:int,<f_gib_1279@286:1>:int,<f_gib_1279@286:2>:int,<f_gib_1280@321:3>:int,<<f_gib_1279@286:3>@325:0>:int)|- P[<<f_gib_1279@286:3>@325:0>](
      <f_gib_1279@286:0>:int,<f_gib_1279@286:1>:int,<f_gib_1279@286:2>:int,
      <<f_gib_1279@286:3>@325:0>:int)
      
      P[<f_gib_1280@321:5>](<f_gib_1280@321:0>:int,<f_gib_1280@321:1>:int,<f_gib_1280@321:2>:int,<f_gib_1280@321:3>:int,(
                            <<f_gib_1280@321:4>@323:0> + (-1 * <f_gib_1280@321:3>)):int)|- P[<<f_gib_1280@321:4>@323:0>](
      <f_gib_1280@321:0>:int,<f_gib_1280@321:1>:int,<f_gib_1280@321:2>:int,
      <f_gib_1280@321:3>:int,<<f_gib_1280@321:4>@323:0>:int)
      
      P[<f_gib_1279@286:4>](<f_gib_1280@321:0>:int,<f_gib_1280@321:1>:int,<f_gib_1280@321:2>:int,<f_gib_1280@321:3>:int),
      P[<<gib_1030@288:3>@319:0>](<f_gib_1280@321:0>:int,<f_gib_1280@321:1>:int,(
                                  -2 + <f_gib_1280@321:2>):int,<f_gib_1280@321:5>:int)|- P[<f_gib_1280@321:5>](
      <f_gib_1280@321:0>:int,<f_gib_1280@321:1>:int,<f_gib_1280@321:2>:int,
      <f_gib_1280@321:3>:int,<f_gib_1280@321:5>:int)
      
      P[<gib_1030@288:2>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,<gib_1030@288:2>:int),
      P[<<br_gib_1286@291:4>@317:0>]((<gib_1030@288:2> = 1):bool,<gib_1030@288:0>:int,<gib_1030@288:1>:int,<gib_1030@288:2>:int,<<gib_1030@288:3>@319:0>:int),
      (<gib_1030@288:2> <> 0)
      |- P[<<gib_1030@288:3>@319:0>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,
                                     <gib_1030@288:2>:int,<<gib_1030@288:3>@319:0>:int)
      
      P[<br_gib_1286@291:3>](<br_gib_1286@291:0>:bool,<br_gib_1286@291:1>:int,<br_gib_1286@291:2>:int,<br_gib_1286@291:3>:int),
      P[<<f_gib_1279@304:3>@315:0>](<br_gib_1286@291:1>:int,<br_gib_1286@291:2>:int,<br_gib_1286@291:3>:int,<<br_gib_1286@291:4>@317:0>:int),
      (not <br_gib_1286@291:0>)
      |- P[<<br_gib_1286@291:4>@317:0>](<br_gib_1286@291:0>:bool,<br_gib_1286@291:1>:int,
                                        <br_gib_1286@291:2>:int,<br_gib_1286@291:3>:int,
                                        <<br_gib_1286@291:4>@317:0>:int)
      
      P[<f_gib_1279@304:4>](<f_gib_1279@304:0>:int,<f_gib_1279@304:1>:int,<f_gib_1279@304:2>:int,<f_gib_1280@311:3>:int),
      P[<<f_gib_1280@311:4>@313:0>](<f_gib_1279@304:0>:int,<f_gib_1279@304:1>:int,<f_gib_1279@304:2>:int,<f_gib_1280@311:3>:int,<<f_gib_1279@304:3>@315:0>:int)|- P[<<f_gib_1279@304:3>@315:0>](
      <f_gib_1279@304:0>:int,<f_gib_1279@304:1>:int,<f_gib_1279@304:2>:int,
      <<f_gib_1279@304:3>@315:0>:int)
      
      P[<f_gib_1280@311:5>](<f_gib_1280@311:0>:int,<f_gib_1280@311:1>:int,<f_gib_1280@311:2>:int,<f_gib_1280@311:3>:int,(
                            <<f_gib_1280@311:4>@313:0> + (-1 * <f_gib_1280@311:3>)):int)|- P[<<f_gib_1280@311:4>@313:0>](
      <f_gib_1280@311:0>:int,<f_gib_1280@311:1>:int,<f_gib_1280@311:2>:int,
      <f_gib_1280@311:3>:int,<<f_gib_1280@311:4>@313:0>:int)
      
      P[<f_gib_1279@304:4>](<f_gib_1280@311:0>:int,<f_gib_1280@311:1>:int,<f_gib_1280@311:2>:int,<f_gib_1280@311:3>:int),
      P[<<gib_1030@306:3>@309:0>](<f_gib_1280@311:0>:int,<f_gib_1280@311:1>:int,(
                                  -2 + <f_gib_1280@311:2>):int,<f_gib_1280@311:5>:int)|- P[<f_gib_1280@311:5>](
      <f_gib_1280@311:0>:int,<f_gib_1280@311:1>:int,<f_gib_1280@311:2>:int,
      <f_gib_1280@311:3>:int,<f_gib_1280@311:5>:int)
      
      P[<gib_1030@306:2>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,<gib_1030@306:2>:int),
      ((<gib_1030@306:2> = 0) && (<<gib_1030@306:3>@309:0> = <gib_1030@306:0>))
      |- P[<<gib_1030@306:3>@309:0>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,
                                     <gib_1030@306:2>:int,<<gib_1030@306:3>@309:0>:int)
      
      P[<f_gib_1279@304:4>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,(
                            2 + <gib_1030@306:2>):int,<f_gib_1279@304:4>:int)|- P[<gib_1030@306:2>](
      <gib_1030@306:0>:int,<gib_1030@306:1>:int,<gib_1030@306:2>:int)
      
      P[<br_gib_1286@291:3>](false:bool,<f_gib_1279@304:0>:int,<f_gib_1279@304:1>:int,<f_gib_1279@304:2>:int),
      P[<<gib_1030@294:3>@302:0>](<f_gib_1279@304:0>:int,<f_gib_1279@304:1>:int,(
                                  -1 + <f_gib_1279@304:2>):int,<f_gib_1279@304:4>:int)|- P[<f_gib_1279@304:4>](
      <f_gib_1279@304:0>:int,<f_gib_1279@304:1>:int,<f_gib_1279@304:2>:int,
      <f_gib_1279@304:4>:int)
      
      P[<gib_1030@294:2>](<gib_1030@294:0>:int,<gib_1030@294:1>:int,<gib_1030@294:2>:int),
      P[<<br_gib_1286@297:4>@300:0>]((<gib_1030@294:2> = 1):bool,<gib_1030@294:0>:int,<gib_1030@294:1>:int,<gib_1030@294:2>:int,<<gib_1030@294:3>@302:0>:int),
      (<gib_1030@294:2> <> 0)
      |- P[<<gib_1030@294:3>@302:0>](<gib_1030@294:0>:int,<gib_1030@294:1>:int,
                                     <gib_1030@294:2>:int,<<gib_1030@294:3>@302:0>:int)
      
      P[<br_gib_1286@297:3>](<br_gib_1286@297:0>:bool,<br_gib_1286@297:1>:int,<br_gib_1286@297:2>:int,<br_gib_1286@297:3>:int),
      ((<<br_gib_1286@297:4>@300:0> = <br_gib_1286@297:2>) && <br_gib_1286@297:0>)
      |- P[<<br_gib_1286@297:4>@300:0>](<br_gib_1286@297:0>:bool,<br_gib_1286@297:1>:int,
                                        <br_gib_1286@297:2>:int,<br_gib_1286@297:3>:int,
                                        <<br_gib_1286@297:4>@300:0>:int)
      
      P[<gib_1030@294:2>](<br_gib_1286@297:1>:int,<br_gib_1286@297:2>:int,<br_gib_1286@297:3>:int),
      ((<br_gib_1286@297:3> <> 0) && (<br_gib_1286@297:0> = (<br_gib_1286@297:3> = 1)))
      |- P[<br_gib_1286@297:3>](<br_gib_1286@297:0>:bool,<br_gib_1286@297:1>:int,
                                <br_gib_1286@297:2>:int,<br_gib_1286@297:3>:int)
      
      P[<br_gib_1286@291:3>](false:bool,<gib_1030@294:0>:int,<gib_1030@294:1>:int,(
                             1 + <gib_1030@294:2>):int)|- P[<gib_1030@294:2>](
      <gib_1030@294:0>:int,<gib_1030@294:1>:int,<gib_1030@294:2>:int)
      
      P[<gib_1030@288:2>](<br_gib_1286@291:1>:int,<br_gib_1286@291:2>:int,<br_gib_1286@291:3>:int),
      ((<br_gib_1286@291:3> <> 0) && (<br_gib_1286@291:0> = (<br_gib_1286@291:3> = 1)))
      |- P[<br_gib_1286@291:3>](<br_gib_1286@291:0>:bool,<br_gib_1286@291:1>:int,
                                <br_gib_1286@291:2>:int,<br_gib_1286@291:3>:int)
      
      P[<f_gib_1279@286:4>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,(
                            2 + <gib_1030@288:2>):int,<f_gib_1279@286:4>:int)|- P[<gib_1030@288:2>](
      <gib_1030@288:0>:int,<gib_1030@288:1>:int,<gib_1030@288:2>:int)
      
      P[<br_gib_1286@250:3>](false:bool,<f_gib_1279@286:0>:int,<f_gib_1279@286:1>:int,<f_gib_1279@286:2>:int),
      P[<<gib_1030@253:3>@284:0>](<f_gib_1279@286:0>:int,<f_gib_1279@286:1>:int,(
                                  -1 + <f_gib_1279@286:2>):int,<f_gib_1279@286:4>:int)|- P[<f_gib_1279@286:4>](
      <f_gib_1279@286:0>:int,<f_gib_1279@286:1>:int,<f_gib_1279@286:2>:int,
      <f_gib_1279@286:4>:int)
      
      P[<gib_1030@253:2>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,<gib_1030@253:2>:int),
      P[<<br_gib_1286@256:4>@282:0>]((<gib_1030@253:2> = 1):bool,<gib_1030@253:0>:int,<gib_1030@253:1>:int,<gib_1030@253:2>:int,<<gib_1030@253:3>@284:0>:int),
      (<gib_1030@253:2> <> 0)
      |- P[<<gib_1030@253:3>@284:0>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,
                                     <gib_1030@253:2>:int,<<gib_1030@253:3>@284:0>:int)
      
      P[<br_gib_1286@256:3>](<br_gib_1286@256:0>:bool,<br_gib_1286@256:1>:int,<br_gib_1286@256:2>:int,<br_gib_1286@256:3>:int),
      P[<<f_gib_1279@269:3>@280:0>](<br_gib_1286@256:1>:int,<br_gib_1286@256:2>:int,<br_gib_1286@256:3>:int,<<br_gib_1286@256:4>@282:0>:int),
      (not <br_gib_1286@256:0>)
      |- P[<<br_gib_1286@256:4>@282:0>](<br_gib_1286@256:0>:bool,<br_gib_1286@256:1>:int,
                                        <br_gib_1286@256:2>:int,<br_gib_1286@256:3>:int,
                                        <<br_gib_1286@256:4>@282:0>:int)
      
      P[<f_gib_1279@269:4>](<f_gib_1279@269:0>:int,<f_gib_1279@269:1>:int,<f_gib_1279@269:2>:int,<f_gib_1280@276:3>:int),
      P[<<f_gib_1280@276:4>@278:0>](<f_gib_1279@269:0>:int,<f_gib_1279@269:1>:int,<f_gib_1279@269:2>:int,<f_gib_1280@276:3>:int,<<f_gib_1279@269:3>@280:0>:int)|- P[<<f_gib_1279@269:3>@280:0>](
      <f_gib_1279@269:0>:int,<f_gib_1279@269:1>:int,<f_gib_1279@269:2>:int,
      <<f_gib_1279@269:3>@280:0>:int)
      
      P[<f_gib_1280@276:5>](<f_gib_1280@276:0>:int,<f_gib_1280@276:1>:int,<f_gib_1280@276:2>:int,<f_gib_1280@276:3>:int,(
                            <<f_gib_1280@276:4>@278:0> + (-1 * <f_gib_1280@276:3>)):int)|- P[<<f_gib_1280@276:4>@278:0>](
      <f_gib_1280@276:0>:int,<f_gib_1280@276:1>:int,<f_gib_1280@276:2>:int,
      <f_gib_1280@276:3>:int,<<f_gib_1280@276:4>@278:0>:int)
      
      P[<f_gib_1279@269:4>](<f_gib_1280@276:0>:int,<f_gib_1280@276:1>:int,<f_gib_1280@276:2>:int,<f_gib_1280@276:3>:int),
      P[<<gib_1030@271:3>@274:0>](<f_gib_1280@276:0>:int,<f_gib_1280@276:1>:int,(
                                  -2 + <f_gib_1280@276:2>):int,<f_gib_1280@276:5>:int)|- P[<f_gib_1280@276:5>](
      <f_gib_1280@276:0>:int,<f_gib_1280@276:1>:int,<f_gib_1280@276:2>:int,
      <f_gib_1280@276:3>:int,<f_gib_1280@276:5>:int)
      
      P[<gib_1030@271:2>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,<gib_1030@271:2>:int),
      ((<gib_1030@271:2> = 0) && (<<gib_1030@271:3>@274:0> = <gib_1030@271:0>))
      |- P[<<gib_1030@271:3>@274:0>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,
                                     <gib_1030@271:2>:int,<<gib_1030@271:3>@274:0>:int)
      
      P[<f_gib_1279@269:4>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,(
                            2 + <gib_1030@271:2>):int,<f_gib_1279@269:4>:int)|- P[<gib_1030@271:2>](
      <gib_1030@271:0>:int,<gib_1030@271:1>:int,<gib_1030@271:2>:int)
      
      P[<br_gib_1286@256:3>](false:bool,<f_gib_1279@269:0>:int,<f_gib_1279@269:1>:int,<f_gib_1279@269:2>:int),
      P[<<gib_1030@259:3>@267:0>](<f_gib_1279@269:0>:int,<f_gib_1279@269:1>:int,(
                                  -1 + <f_gib_1279@269:2>):int,<f_gib_1279@269:4>:int)|- P[<f_gib_1279@269:4>](
      <f_gib_1279@269:0>:int,<f_gib_1279@269:1>:int,<f_gib_1279@269:2>:int,
      <f_gib_1279@269:4>:int)
      
      P[<gib_1030@259:2>](<gib_1030@259:0>:int,<gib_1030@259:1>:int,<gib_1030@259:2>:int),
      P[<<br_gib_1286@262:4>@265:0>]((<gib_1030@259:2> = 1):bool,<gib_1030@259:0>:int,<gib_1030@259:1>:int,<gib_1030@259:2>:int,<<gib_1030@259:3>@267:0>:int),
      (<gib_1030@259:2> <> 0)
      |- P[<<gib_1030@259:3>@267:0>](<gib_1030@259:0>:int,<gib_1030@259:1>:int,
                                     <gib_1030@259:2>:int,<<gib_1030@259:3>@267:0>:int)
      
      P[<br_gib_1286@262:3>](<br_gib_1286@262:0>:bool,<br_gib_1286@262:1>:int,<br_gib_1286@262:2>:int,<br_gib_1286@262:3>:int),
      ((<<br_gib_1286@262:4>@265:0> = <br_gib_1286@262:2>) && <br_gib_1286@262:0>)
      |- P[<<br_gib_1286@262:4>@265:0>](<br_gib_1286@262:0>:bool,<br_gib_1286@262:1>:int,
                                        <br_gib_1286@262:2>:int,<br_gib_1286@262:3>:int,
                                        <<br_gib_1286@262:4>@265:0>:int)
      
      P[<gib_1030@259:2>](<br_gib_1286@262:1>:int,<br_gib_1286@262:2>:int,<br_gib_1286@262:3>:int),
      ((<br_gib_1286@262:3> <> 0) && (<br_gib_1286@262:0> = (<br_gib_1286@262:3> = 1)))
      |- P[<br_gib_1286@262:3>](<br_gib_1286@262:0>:bool,<br_gib_1286@262:1>:int,
                                <br_gib_1286@262:2>:int,<br_gib_1286@262:3>:int)
      
      P[<br_gib_1286@256:3>](false:bool,<gib_1030@259:0>:int,<gib_1030@259:1>:int,(
                             1 + <gib_1030@259:2>):int)|- P[<gib_1030@259:2>](
      <gib_1030@259:0>:int,<gib_1030@259:1>:int,<gib_1030@259:2>:int)
      
      P[<gib_1030@253:2>](<br_gib_1286@256:1>:int,<br_gib_1286@256:2>:int,<br_gib_1286@256:3>:int),
      ((<br_gib_1286@256:3> <> 0) && (<br_gib_1286@256:0> = (<br_gib_1286@256:3> = 1)))
      |- P[<br_gib_1286@256:3>](<br_gib_1286@256:0>:bool,<br_gib_1286@256:1>:int,
                                <br_gib_1286@256:2>:int,<br_gib_1286@256:3>:int)
      
      P[<br_gib_1286@250:3>](false:bool,<gib_1030@253:0>:int,<gib_1030@253:1>:int,(
                             1 + <gib_1030@253:2>):int)|- P[<gib_1030@253:2>](
      <gib_1030@253:0>:int,<gib_1030@253:1>:int,<gib_1030@253:2>:int)
      
      P[<gib_1030@247:2>](<br_gib_1286@250:1>:int,<br_gib_1286@250:2>:int,<br_gib_1286@250:3>:int),
      ((<br_gib_1286@250:3> <> 0) && (<br_gib_1286@250:0> = (<br_gib_1286@250:3> = 1)))
      |- P[<br_gib_1286@250:3>](<br_gib_1286@250:0>:bool,<br_gib_1286@250:1>:int,
                                <br_gib_1286@250:2>:int,<br_gib_1286@250:3>:int)
      
      P[<k_main_1181@244:4>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,<gib_1030@247:2>:int,true:bool)|- P[<gib_1030@247:2>](
      <gib_1030@247:0>:int,<gib_1030@247:1>:int,<gib_1030@247:2>:int)
      
      P[<main_1034@241:2>](<k_main_1181@244:2>:int,<k_main_1181@244:0>:int,<k_main_1181@244:1>:int),
      ((<k_main_1181@244:0> >= 0) && (<k_main_1181@244:4> = (<k_main_1181@244:1> >= 0)))
      |- P[<k_main_1181@244:4>](<k_main_1181@244:0>:int,<k_main_1181@244:1>:int,
                                <k_main_1181@244:2>:int,<k_main_1181@244:4>:bool)
      
      P[<f_1284@239:2>](<main_1034@241:0>:int,<main_1034@241:1>:int,<main_1034@241:2>:int)|- P[<main_1034@241:2>](
      <main_1034@241:0>:int,<main_1034@241:1>:int,<main_1034@241:2>:int)
      
      P[<f_1283@236:1>](<f_1284@239:0>:int,<f_1284@239:1>:int)|- P[<f_1284@239:2>](
      <f_1284@239:0>:int,<f_1284@239:1>:int,<f_1284@239:2>:int)
      
      P[<f_1282@233:0>](<f_1283@236:0>:int)|- P[<f_1283@236:1>](<f_1283@236:0>:int,
                                                                <f_1283@236:1>:int)
      
      |- P[<f_1282@233:0>](<f_1282@233:0>:int)
    call trees:
      <main_1278@230>
        <f_1282@233>
          <f_1283@236>
            <f_1284@239>
              <main_1034@241>
                <k_main_1181@244>
                  <gib_1030@247>
                    <br_gib_1286@250>
                      <gib_1030@253>
                        <br_gib_1286@256>
                          <gib_1030@259>
                            <br_gib_1286@262>
                            </<br_gib_1286@262:4>@265>
                          </<gib_1030@259:3>@267>
                          <f_gib_1279@269>
                            <gib_1030@271>
                            </<gib_1030@271:3>@274>
                            <f_gib_1280@276>
                            </<f_gib_1280@276:4>@278>
                          </<f_gib_1279@269:3>@280>
                        </<br_gib_1286@256:4>@282>
                      </<gib_1030@253:3>@284>
                      <f_gib_1279@286>
                        <gib_1030@288>
                          <br_gib_1286@291>
                            <gib_1030@294>
                              <br_gib_1286@297>
                              </<br_gib_1286@297:4>@300>
                            </<gib_1030@294:3>@302>
                            <f_gib_1279@304>
                              <gib_1030@306>
                              </<gib_1030@306:3>@309>
                              <f_gib_1280@311>
                              </<f_gib_1280@311:4>@313>
                            </<f_gib_1279@304:3>@315>
                          </<br_gib_1286@291:4>@317>
                        </<gib_1030@288:3>@319>
                        <f_gib_1280@321>
                        </<f_gib_1280@321:4>@323>
                      </<f_gib_1279@286:3>@325>
                    </<br_gib_1286@250:4>@327>
                  </<gib_1030@247:3>@329>
                  <f_k_main_1281@331>
                    <fail_1288@334>
    inlined horn clauses:
      P[<fail_1288@334:0>](<fail_1288@334:0>:bool)|- bot
      
      P[<<gib_1030@247:3>@329:0>](<f_k_main_1281@331:0>:int,<f_k_main_1281@331:1>:int,<f_k_main_1281@331:3>:int,<f_k_main_1281@331:5>:int),
      ((<f_k_main_1281@331:1> >= 0) &&
       ((<f_k_main_1281@331:0> >= 0) && ((<f_k_main_1281@331:5> < 0) && <fail_1288@334:0>)))
      |- P[<fail_1288@334:0>](<fail_1288@334:0>:bool)
      
      P[<gib_1030@247:2>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,<gib_1030@247:2>:int),
      P[<<gib_1030@253:3>@284:0>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,(
                                  -1 + <gib_1030@247:2>):int,var206:int),
      P[<<gib_1030@288:3>@319:0>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,(
                                  -2 + <gib_1030@247:2>):int,(<<gib_1030@247:3>@329:0> + (-1 * var206)):int),
      ((<gib_1030@247:2> <> 0) && (<gib_1030@247:2> <> 1))
      |- P[<<gib_1030@247:3>@329:0>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,
                                     <gib_1030@247:2>:int,<<gib_1030@247:3>@329:0>:int)
      
      P[<gib_1030@288:2>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,<gib_1030@288:2>:int),
      P[<<gib_1030@294:3>@302:0>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,(
                                  -1 + <gib_1030@288:2>):int,var207:int),
      P[<<gib_1030@306:3>@309:0>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,(
                                  -2 + <gib_1030@288:2>):int,(<<gib_1030@288:3>@319:0> + (-1 * var207)):int),
      ((<gib_1030@288:2> <> 0) && (<gib_1030@288:2> <> 1))
      |- P[<<gib_1030@288:3>@319:0>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,
                                     <gib_1030@288:2>:int,<<gib_1030@288:3>@319:0>:int)
      
      P[<gib_1030@306:2>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,<gib_1030@306:2>:int),
      ((<gib_1030@306:2> = 0) && (<<gib_1030@306:3>@309:0> = <gib_1030@306:0>))
      |- P[<<gib_1030@306:3>@309:0>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,
                                     <gib_1030@306:2>:int,<<gib_1030@306:3>@309:0>:int)
      
      P[<gib_1030@288:2>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,(
                          2 + <gib_1030@306:2>):int),
      P[<<gib_1030@294:3>@302:0>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,(
                                  1 + <gib_1030@306:2>):int,<f_gib_1279@304:4>:int),
      (((2 + <gib_1030@306:2>) <> 0) && ((1 + <gib_1030@306:2>) <> 0))
      |- P[<gib_1030@306:2>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,
                             <gib_1030@306:2>:int)
      
      P[<gib_1030@294:2>](<gib_1030@294:0>:int,<gib_1030@294:1>:int,<gib_1030@294:2>:int),
      ((<gib_1030@294:2> = 1) && (<<gib_1030@294:3>@302:0> = <gib_1030@294:1>))
      |- P[<<gib_1030@294:3>@302:0>](<gib_1030@294:0>:int,<gib_1030@294:1>:int,
                                     <gib_1030@294:2>:int,<<gib_1030@294:3>@302:0>:int)
      
      P[<gib_1030@288:2>](<gib_1030@294:0>:int,<gib_1030@294:1>:int,(
                          1 + <gib_1030@294:2>):int), (((1 + <gib_1030@294:2>) <> 0) && (<gib_1030@294:2> <> 0))
      |- P[<gib_1030@294:2>](<gib_1030@294:0>:int,<gib_1030@294:1>:int,
                             <gib_1030@294:2>:int)
      
      P[<gib_1030@247:2>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,(
                          2 + <gib_1030@288:2>):int),
      P[<<gib_1030@253:3>@284:0>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,(
                                  1 + <gib_1030@288:2>):int,<f_gib_1279@286:4>:int),
      (((2 + <gib_1030@288:2>) <> 0) && ((1 + <gib_1030@288:2>) <> 0))
      |- P[<gib_1030@288:2>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,
                             <gib_1030@288:2>:int)
      
      P[<gib_1030@253:2>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,<gib_1030@253:2>:int),
      P[<<gib_1030@259:3>@267:0>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,(
                                  -1 + <gib_1030@253:2>):int,var208:int),
      P[<<gib_1030@271:3>@274:0>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,(
                                  -2 + <gib_1030@253:2>):int,(<<gib_1030@253:3>@284:0> + (-1 * var208)):int),
      ((<gib_1030@253:2> <> 0) && (<gib_1030@253:2> <> 1))
      |- P[<<gib_1030@253:3>@284:0>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,
                                     <gib_1030@253:2>:int,<<gib_1030@253:3>@284:0>:int)
      
      P[<gib_1030@271:2>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,<gib_1030@271:2>:int),
      ((<gib_1030@271:2> = 0) && (<<gib_1030@271:3>@274:0> = <gib_1030@271:0>))
      |- P[<<gib_1030@271:3>@274:0>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,
                                     <gib_1030@271:2>:int,<<gib_1030@271:3>@274:0>:int)
      
      P[<gib_1030@253:2>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,(
                          2 + <gib_1030@271:2>):int),
      P[<<gib_1030@259:3>@267:0>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,(
                                  1 + <gib_1030@271:2>):int,<f_gib_1279@269:4>:int),
      (((2 + <gib_1030@271:2>) <> 0) && ((1 + <gib_1030@271:2>) <> 0))
      |- P[<gib_1030@271:2>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,
                             <gib_1030@271:2>:int)
      
      P[<gib_1030@259:2>](<gib_1030@259:0>:int,<gib_1030@259:1>:int,<gib_1030@259:2>:int),
      ((<gib_1030@259:2> = 1) && (<<gib_1030@259:3>@267:0> = <gib_1030@259:1>))
      |- P[<<gib_1030@259:3>@267:0>](<gib_1030@259:0>:int,<gib_1030@259:1>:int,
                                     <gib_1030@259:2>:int,<<gib_1030@259:3>@267:0>:int)
      
      P[<gib_1030@253:2>](<gib_1030@259:0>:int,<gib_1030@259:1>:int,(
                          1 + <gib_1030@259:2>):int), (((1 + <gib_1030@259:2>) <> 0) && (<gib_1030@259:2> <> 0))
      |- P[<gib_1030@259:2>](<gib_1030@259:0>:int,<gib_1030@259:1>:int,
                             <gib_1030@259:2>:int)
      
      P[<gib_1030@247:2>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,(
                          1 + <gib_1030@253:2>):int), (((1 + <gib_1030@253:2>) <> 0) && (<gib_1030@253:2> <> 0))
      |- P[<gib_1030@253:2>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,
                             <gib_1030@253:2>:int)
      
       ((<gib_1030@247:0> >= 0) && (<gib_1030@247:1> >= 0))
      |- P[<gib_1030@247:2>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,
                             <gib_1030@247:2>:int)
    begin ParamSubstInfer.infer(45008)[3]
      
    end ParamSubstInfer.infer(45008)[3] (1.517770 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(45010)[3]
      
    end RefTypeInfer.elim_coeffs(45010)[3] (0.003999 sec.)
    begin YhornInterface.solve(46185)[3]
      begin HcSolver.solve_ub(46186)[4]
        encoded:
          P[<fail_1288@334:0>](<fail_1288@334:0>:int)|- bot
          
          P[<<gib_1030@247:3>@329:0>](<f_k_main_1281@331:0>:int,<f_k_main_1281@331:1>:int,<f_k_main_1281@331:3>:int,<f_k_main_1281@331:5>:int),
          ((<f_k_main_1281@331:1> >= 0) &&
           ((<f_k_main_1281@331:0> >= 0) && ((<f_k_main_1281@331:5> < 0) && (<fail_1288@334:0> = 1))))
          |- P[<fail_1288@334:0>](<fail_1288@334:0>:int)
          
          P[<gib_1030@247:2>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,<gib_1030@247:2>:int),
          P[<<gib_1030@253:3>@284:0>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,(
                                      -1 + <gib_1030@247:2>):int,var206:int),
          P[<<gib_1030@288:3>@319:0>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,(
                                      -2 + <gib_1030@247:2>):int,(<<gib_1030@247:3>@329:0> + (-1 * var206)):int),
          ((<gib_1030@247:2> <> 0) && (<gib_1030@247:2> <> 1))
          |- P[<<gib_1030@247:3>@329:0>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,
                                         <gib_1030@247:2>:int,<<gib_1030@247:3>@329:0>:int)
          
          P[<gib_1030@288:2>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,<gib_1030@288:2>:int),
          P[<<gib_1030@294:3>@302:0>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,(
                                      -1 + <gib_1030@288:2>):int,var207:int),
          P[<<gib_1030@306:3>@309:0>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,(
                                      -2 + <gib_1030@288:2>):int,(<<gib_1030@288:3>@319:0> + (-1 * var207)):int),
          ((<gib_1030@288:2> <> 0) && (<gib_1030@288:2> <> 1))
          |- P[<<gib_1030@288:3>@319:0>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,
                                         <gib_1030@288:2>:int,<<gib_1030@288:3>@319:0>:int)
          
          P[<gib_1030@306:2>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,<gib_1030@306:2>:int),
          ((<gib_1030@306:2> = 0) && (<<gib_1030@306:3>@309:0> = <gib_1030@306:0>))
          |- P[<<gib_1030@306:3>@309:0>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,
                                         <gib_1030@306:2>:int,<<gib_1030@306:3>@309:0>:int)
          
          P[<gib_1030@288:2>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,(
                              2 + <gib_1030@306:2>):int),
          P[<<gib_1030@294:3>@302:0>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,(
                                      1 + <gib_1030@306:2>):int,<f_gib_1279@304:4>:int),
          (((2 + <gib_1030@306:2>) <> 0) && ((1 + <gib_1030@306:2>) <> 0))
          |- P[<gib_1030@306:2>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,
                                 <gib_1030@306:2>:int)
          
          P[<gib_1030@294:2>](<gib_1030@294:0>:int,<gib_1030@294:1>:int,<gib_1030@294:2>:int),
          ((<gib_1030@294:2> = 1) && (<<gib_1030@294:3>@302:0> = <gib_1030@294:1>))
          |- P[<<gib_1030@294:3>@302:0>](<gib_1030@294:0>:int,<gib_1030@294:1>:int,
                                         <gib_1030@294:2>:int,<<gib_1030@294:3>@302:0>:int)
          
          P[<gib_1030@288:2>](<gib_1030@294:0>:int,<gib_1030@294:1>:int,(
                              1 + <gib_1030@294:2>):int), (((1 + <gib_1030@294:2>) <> 0) && (<gib_1030@294:2> <> 0))
          |- P[<gib_1030@294:2>](<gib_1030@294:0>:int,<gib_1030@294:1>:int,
                                 <gib_1030@294:2>:int)
          
          P[<gib_1030@247:2>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,(
                              2 + <gib_1030@288:2>):int),
          P[<<gib_1030@253:3>@284:0>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,(
                                      1 + <gib_1030@288:2>):int,<f_gib_1279@286:4>:int),
          (((2 + <gib_1030@288:2>) <> 0) && ((1 + <gib_1030@288:2>) <> 0))
          |- P[<gib_1030@288:2>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,
                                 <gib_1030@288:2>:int)
          
          P[<gib_1030@253:2>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,<gib_1030@253:2>:int),
          P[<<gib_1030@259:3>@267:0>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,(
                                      -1 + <gib_1030@253:2>):int,var208:int),
          P[<<gib_1030@271:3>@274:0>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,(
                                      -2 + <gib_1030@253:2>):int,(<<gib_1030@253:3>@284:0> + (-1 * var208)):int),
          ((<gib_1030@253:2> <> 0) && (<gib_1030@253:2> <> 1))
          |- P[<<gib_1030@253:3>@284:0>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,
                                         <gib_1030@253:2>:int,<<gib_1030@253:3>@284:0>:int)
          
          P[<gib_1030@271:2>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,<gib_1030@271:2>:int),
          ((<gib_1030@271:2> = 0) && (<<gib_1030@271:3>@274:0> = <gib_1030@271:0>))
          |- P[<<gib_1030@271:3>@274:0>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,
                                         <gib_1030@271:2>:int,<<gib_1030@271:3>@274:0>:int)
          
          P[<gib_1030@253:2>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,(
                              2 + <gib_1030@271:2>):int),
          P[<<gib_1030@259:3>@267:0>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,(
                                      1 + <gib_1030@271:2>):int,<f_gib_1279@269:4>:int),
          (((2 + <gib_1030@271:2>) <> 0) && ((1 + <gib_1030@271:2>) <> 0))
          |- P[<gib_1030@271:2>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,
                                 <gib_1030@271:2>:int)
          
          P[<gib_1030@259:2>](<gib_1030@259:0>:int,<gib_1030@259:1>:int,<gib_1030@259:2>:int),
          ((<gib_1030@259:2> = 1) && (<<gib_1030@259:3>@267:0> = <gib_1030@259:1>))
          |- P[<<gib_1030@259:3>@267:0>](<gib_1030@259:0>:int,<gib_1030@259:1>:int,
                                         <gib_1030@259:2>:int,<<gib_1030@259:3>@267:0>:int)
          
          P[<gib_1030@253:2>](<gib_1030@259:0>:int,<gib_1030@259:1>:int,(
                              1 + <gib_1030@259:2>):int), (((1 + <gib_1030@259:2>) <> 0) && (<gib_1030@259:2> <> 0))
          |- P[<gib_1030@259:2>](<gib_1030@259:0>:int,<gib_1030@259:1>:int,
                                 <gib_1030@259:2>:int)
          
          P[<gib_1030@247:2>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,(
                              1 + <gib_1030@253:2>):int), (((1 + <gib_1030@253:2>) <> 0) && (<gib_1030@253:2> <> 0))
          |- P[<gib_1030@253:2>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,
                                 <gib_1030@253:2>:int)
          
           ((<gib_1030@247:0> >= 0) && (<gib_1030@247:1> >= 0))
          |- P[<gib_1030@247:2>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,
                                 <gib_1030@247:2>:int)
        input to Yhorn:
          P[<fail_1288@334:0>](<fail_1288@334:0>:int)|- bot
          
          P[<<gib_1030@247:3>@329:0>](<f_k_main_1281@331:0>:int,<f_k_main_1281@331:1>:int,<f_k_main_1281@331:3>:int,<f_k_main_1281@331:5>:int),
          ((<f_k_main_1281@331:5> < 0) &&
           ((<f_k_main_1281@331:0> >= 0) && ((<f_k_main_1281@331:1> >= 0) && (<fail_1288@334:0> = 1))))
          |- P[<fail_1288@334:0>](<fail_1288@334:0>:int)
          
          P[<gib_1030@247:2>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,<gib_1030@247:2>:int),
          P[<<gib_1030@253:3>@284:0>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,var209:int,var206:int),
          P[<<gib_1030@288:3>@319:0>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,var210:int,var211:int),
          (((var211 + var206) = <<gib_1030@247:3>@329:0>) &&
           (((2 + var210) = <gib_1030@247:2>) &&
            (((1 + var209) = <gib_1030@247:2>) && ((<gib_1030@247:2> <> 1) && (<gib_1030@247:2> <> 0)))))
          |- P[<<gib_1030@247:3>@329:0>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,
                                         <gib_1030@247:2>:int,<<gib_1030@247:3>@329:0>:int)
          
          P[<gib_1030@288:2>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,<gib_1030@288:2>:int),
          P[<<gib_1030@294:3>@302:0>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,var212:int,var207:int),
          P[<<gib_1030@306:3>@309:0>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,var213:int,var214:int),
          (((var214 + var207) = <<gib_1030@288:3>@319:0>) &&
           (((2 + var213) = <gib_1030@288:2>) &&
            (((1 + var212) = <gib_1030@288:2>) && ((<gib_1030@288:2> <> 1) && (<gib_1030@288:2> <> 0)))))
          |- P[<<gib_1030@288:3>@319:0>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,
                                         <gib_1030@288:2>:int,<<gib_1030@288:3>@319:0>:int)
          
          P[<gib_1030@306:2>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,<gib_1030@306:2>:int),
          ((<<gib_1030@306:3>@309:0> = <gib_1030@306:0>) && (<gib_1030@306:2> = 0))
          |- P[<<gib_1030@306:3>@309:0>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,
                                         <gib_1030@306:2>:int,<<gib_1030@306:3>@309:0>:int)
          
          P[<gib_1030@288:2>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,var215:int),
          P[<<gib_1030@294:3>@302:0>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,var216:int,<f_gib_1279@304:4>:int),
          ((var216 = (1 + <gib_1030@306:2>)) &&
           ((var215 = (2 + <gib_1030@306:2>)) && (((1 + <gib_1030@306:2>) <> 0) && ((2 + <gib_1030@306:2>) <> 0))))
          |- P[<gib_1030@306:2>](<gib_1030@306:0>:int,<gib_1030@306:1>:int,
                                 <gib_1030@306:2>:int)
          
          P[<gib_1030@294:2>](<gib_1030@294:0>:int,<gib_1030@294:1>:int,<gib_1030@294:2>:int),
          ((<<gib_1030@294:3>@302:0> = <gib_1030@294:1>) && (<gib_1030@294:2> = 1))
          |- P[<<gib_1030@294:3>@302:0>](<gib_1030@294:0>:int,<gib_1030@294:1>:int,
                                         <gib_1030@294:2>:int,<<gib_1030@294:3>@302:0>:int)
          
          P[<gib_1030@288:2>](<gib_1030@294:0>:int,<gib_1030@294:1>:int,var217:int),
          ((var217 = (1 + <gib_1030@294:2>)) && ((<gib_1030@294:2> <> 0) && ((1 + <gib_1030@294:2>) <> 0)))
          |- P[<gib_1030@294:2>](<gib_1030@294:0>:int,<gib_1030@294:1>:int,
                                 <gib_1030@294:2>:int)
          
          P[<gib_1030@247:2>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,var218:int),
          P[<<gib_1030@253:3>@284:0>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,var219:int,<f_gib_1279@286:4>:int),
          ((var219 = (1 + <gib_1030@288:2>)) &&
           ((var218 = (2 + <gib_1030@288:2>)) && (((1 + <gib_1030@288:2>) <> 0) && ((2 + <gib_1030@288:2>) <> 0))))
          |- P[<gib_1030@288:2>](<gib_1030@288:0>:int,<gib_1030@288:1>:int,
                                 <gib_1030@288:2>:int)
          
          P[<gib_1030@253:2>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,<gib_1030@253:2>:int),
          P[<<gib_1030@259:3>@267:0>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,var220:int,var208:int),
          P[<<gib_1030@271:3>@274:0>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,var221:int,var222:int),
          (((var222 + var208) = <<gib_1030@253:3>@284:0>) &&
           (((2 + var221) = <gib_1030@253:2>) &&
            (((1 + var220) = <gib_1030@253:2>) && ((<gib_1030@253:2> <> 1) && (<gib_1030@253:2> <> 0)))))
          |- P[<<gib_1030@253:3>@284:0>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,
                                         <gib_1030@253:2>:int,<<gib_1030@253:3>@284:0>:int)
          
          P[<gib_1030@271:2>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,<gib_1030@271:2>:int),
          ((<<gib_1030@271:3>@274:0> = <gib_1030@271:0>) && (<gib_1030@271:2> = 0))
          |- P[<<gib_1030@271:3>@274:0>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,
                                         <gib_1030@271:2>:int,<<gib_1030@271:3>@274:0>:int)
          
          P[<gib_1030@253:2>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,var223:int),
          P[<<gib_1030@259:3>@267:0>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,var224:int,<f_gib_1279@269:4>:int),
          ((var224 = (1 + <gib_1030@271:2>)) &&
           ((var223 = (2 + <gib_1030@271:2>)) && (((1 + <gib_1030@271:2>) <> 0) && ((2 + <gib_1030@271:2>) <> 0))))
          |- P[<gib_1030@271:2>](<gib_1030@271:0>:int,<gib_1030@271:1>:int,
                                 <gib_1030@271:2>:int)
          
          P[<gib_1030@259:2>](<gib_1030@259:0>:int,<gib_1030@259:1>:int,<gib_1030@259:2>:int),
          ((<<gib_1030@259:3>@267:0> = <gib_1030@259:1>) && (<gib_1030@259:2> = 1))
          |- P[<<gib_1030@259:3>@267:0>](<gib_1030@259:0>:int,<gib_1030@259:1>:int,
                                         <gib_1030@259:2>:int,<<gib_1030@259:3>@267:0>:int)
          
          P[<gib_1030@253:2>](<gib_1030@259:0>:int,<gib_1030@259:1>:int,var225:int),
          ((var225 = (1 + <gib_1030@259:2>)) && ((<gib_1030@259:2> <> 0) && ((1 + <gib_1030@259:2>) <> 0)))
          |- P[<gib_1030@259:2>](<gib_1030@259:0>:int,<gib_1030@259:1>:int,
                                 <gib_1030@259:2>:int)
          
          P[<gib_1030@247:2>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,var226:int),
          ((var226 = (1 + <gib_1030@253:2>)) && ((<gib_1030@253:2> <> 0) && ((1 + <gib_1030@253:2>) <> 0)))
          |- P[<gib_1030@253:2>](<gib_1030@253:0>:int,<gib_1030@253:1>:int,
                                 <gib_1030@253:2>:int)
          
           ((<gib_1030@247:1> >= 0) && (<gib_1030@247:0> >= 0))
          |- P[<gib_1030@247:2>](<gib_1030@247:0>:int,<gib_1030@247:1>:int,
                                 <gib_1030@247:2>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1288_sep_334_sep_0($3281)) -> 1=0.
(($3281-1=0) & ($3282>=0) & ($3283>=0) & ($3284<0)) & (v_sep_gib_1030_sep_247_sep_3_sep_329_sep_0($3283,$3282,$3285,$3284)) -> v_sep_fail_1288_sep_334_sep_0($3281).
(($3286<>0) & ($3286-1<>0) & (-$3286+$3287+1=0) & (-$3286+$3288+2=0) & ($3289+$3290-$3291=0)) & (v_sep_gib_1030_sep_288_sep_3_sep_319_sep_0($3292,$3293,$3288,$3289)) & (v_sep_gib_1030_sep_253_sep_3_sep_284_sep_0($3292,$3293,$3287,$3290)) & (v_sep_gib_1030_sep_247_sep_2($3292,$3293,$3286)) -> v_sep_gib_1030_sep_247_sep_3_sep_329_sep_0($3292,$3293,$3286,$3291).
(($3294<>0) & ($3294-1<>0) & (-$3294+$3295+1=0) & (-$3294+$3296+2=0) & ($3297+$3298-$3299=0)) & (v_sep_gib_1030_sep_306_sep_3_sep_309_sep_0($3300,$3301,$3296,$3297)) & (v_sep_gib_1030_sep_294_sep_3_sep_302_sep_0($3300,$3301,$3295,$3298)) & (v_sep_gib_1030_sep_288_sep_2($3300,$3301,$3294)) -> v_sep_gib_1030_sep_288_sep_3_sep_319_sep_0($3300,$3301,$3294,$3299).
(($3302=0) & ($3303-$3304=0)) & (v_sep_gib_1030_sep_306_sep_2($3304,$3305,$3302)) -> v_sep_gib_1030_sep_306_sep_3_sep_309_sep_0($3304,$3305,$3302,$3303).
(($3302+2<>0) & ($3302+1<>0) & (-$3302+$3306-2=0) & (-$3302+$3307-1=0)) & (v_sep_gib_1030_sep_294_sep_3_sep_302_sep_0($3304,$3305,$3307,$3308)) & (v_sep_gib_1030_sep_288_sep_2($3304,$3305,$3306)) -> v_sep_gib_1030_sep_306_sep_2($3304,$3305,$3302).
(($3309-1=0) & ($3310-$3311=0)) & (v_sep_gib_1030_sep_294_sep_2($3312,$3311,$3309)) -> v_sep_gib_1030_sep_294_sep_3_sep_302_sep_0($3312,$3311,$3309,$3310).
(($3309+1<>0) & ($3309<>0) & (-$3309+$3313-1=0)) & (v_sep_gib_1030_sep_288_sep_2($3312,$3311,$3313)) -> v_sep_gib_1030_sep_294_sep_2($3312,$3311,$3309).
(($3294+2<>0) & ($3294+1<>0) & (-$3294+$3314-2=0) & (-$3294+$3315-1=0)) & (v_sep_gib_1030_sep_253_sep_3_sep_284_sep_0($3300,$3301,$3315,$3316)) & (v_sep_gib_1030_sep_247_sep_2($3300,$3301,$3314)) -> v_sep_gib_1030_sep_288_sep_2($3300,$3301,$3294).
(($3317<>0) & ($3317-1<>0) & (-$3317+$3318+1=0) & (-$3317+$3319+2=0) & ($3320+$3321-$3322=0)) & (v_sep_gib_1030_sep_271_sep_3_sep_274_sep_0($3323,$3324,$3319,$3320)) & (v_sep_gib_1030_sep_259_sep_3_sep_267_sep_0($3323,$3324,$3318,$3321)) & (v_sep_gib_1030_sep_253_sep_2($3323,$3324,$3317)) -> v_sep_gib_1030_sep_253_sep_3_sep_284_sep_0($3323,$3324,$3317,$3322).
(($3325=0) & ($3326-$3327=0)) & (v_sep_gib_1030_sep_271_sep_2($3327,$3328,$3325)) -> v_sep_gib_1030_sep_271_sep_3_sep_274_sep_0($3327,$3328,$3325,$3326).
(($3325+2<>0) & ($3325+1<>0) & (-$3325+$3329-2=0) & (-$3325+$3330-1=0)) & (v_sep_gib_1030_sep_259_sep_3_sep_267_sep_0($3327,$3328,$3330,$3331)) & (v_sep_gib_1030_sep_253_sep_2($3327,$3328,$3329)) -> v_sep_gib_1030_sep_271_sep_2($3327,$3328,$3325).
(($3332-1=0) & ($3333-$3334=0)) & (v_sep_gib_1030_sep_259_sep_2($3335,$3334,$3332)) -> v_sep_gib_1030_sep_259_sep_3_sep_267_sep_0($3335,$3334,$3332,$3333).
(($3332+1<>0) & ($3332<>0) & (-$3332+$3336-1=0)) & (v_sep_gib_1030_sep_253_sep_2($3335,$3334,$3336)) -> v_sep_gib_1030_sep_259_sep_2($3335,$3334,$3332).
(($3317+1<>0) & ($3317<>0) & (-$3317+$3337-1=0)) & (v_sep_gib_1030_sep_247_sep_2($3323,$3324,$3337)) -> v_sep_gib_1030_sep_253_sep_2($3323,$3324,$3317).
($3292>=0) & ($3293>=0) -> v_sep_gib_1030_sep_247_sep_2($3292,$3293,$3286).


v_sep_fail_1288_sep_334_sep_0: X
v_sep_gib_1030_sep_247_sep_2: X
v_sep_gib_1030_sep_247_sep_3_sep_329_sep_0: X
v_sep_gib_1030_sep_253_sep_2: X
v_sep_gib_1030_sep_253_sep_3_sep_284_sep_0: X
v_sep_gib_1030_sep_259_sep_2: X
v_sep_gib_1030_sep_259_sep_3_sep_267_sep_0: X
v_sep_gib_1030_sep_271_sep_2: X
v_sep_gib_1030_sep_271_sep_3_sep_274_sep_0: X
v_sep_gib_1030_sep_288_sep_2: X
v_sep_gib_1030_sep_288_sep_3_sep_319_sep_0: X
v_sep_gib_1030_sep_294_sep_2: X
v_sep_gib_1030_sep_294_sep_3_sep_302_sep_0: X
v_sep_gib_1030_sep_306_sep_2: X
v_sep_gib_1030_sep_306_sep_3_sep_309_sep_0: X
...............................................................................
v_sep_fail_1288_sep_334_sep_0: X
v_sep_gib_1030_sep_247_sep_2: X
v_sep_gib_1030_sep_247_sep_3_sep_329_sep_0: X
v_sep_gib_1030_sep_253_sep_2: X
v_sep_gib_1030_sep_253_sep_3_sep_284_sep_0: X
v_sep_gib_1030_sep_259_sep_2: X
v_sep_gib_1030_sep_259_sep_3_sep_267_sep_0: X
v_sep_gib_1030_sep_271_sep_2: X
v_sep_gib_1030_sep_271_sep_3_sep_274_sep_0: X
v_sep_gib_1030_sep_288_sep_2: X
v_sep_gib_1030_sep_288_sep_3_sep_319_sep_0: X
v_sep_gib_1030_sep_294_sep_2: X
v_sep_gib_1030_sep_294_sep_3_sep_302_sep_0: X
v_sep_gib_1030_sep_306_sep_2: X
v_sep_gib_1030_sep_306_sep_3_sep_309_sep_0: X
...
v_sep_fail_1288_sep_334_sep_0: X
v_sep_gib_1030_sep_247_sep_2: X
v_sep_gib_1030_sep_247_sep_3_sep_329_sep_0: X
v_sep_gib_1030_sep_253_sep_2: X
v_sep_gib_1030_sep_253_sep_3_sep_284_sep_0: X
v_sep_gib_1030_sep_259_sep_2: X
v_sep_gib_1030_sep_259_sep_3_sep_267_sep_0: X
v_sep_gib_1030_sep_271_sep_2: X
v_sep_gib_1030_sep_271_sep_3_sep_274_sep_0: X
v_sep_gib_1030_sep_288_sep_2: X
v_sep_gib_1030_sep_288_sep_3_sep_319_sep_0: X
v_sep_gib_1030_sep_294_sep_2: X
v_sep_gib_1030_sep_294_sep_3_sep_302_sep_0: X
v_sep_gib_1030_sep_306_sep_2: X
v_sep_gib_1030_sep_306_sep_3_sep_309_sep_0: X
...............
v_sep_fail_1288_sep_334_sep_0: X
v_sep_gib_1030_sep_247_sep_2: X
v_sep_gib_1030_sep_247_sep_3_sep_329_sep_0: X
v_sep_gib_1030_sep_253_sep_2: X
v_sep_gib_1030_sep_253_sep_3_sep_284_sep_0: X
v_sep_gib_1030_sep_259_sep_2: X
v_sep_gib_1030_sep_259_sep_3_sep_267_sep_0: X
v_sep_gib_1030_sep_271_sep_2: X
v_sep_gib_1030_sep_271_sep_3_sep_274_sep_0: X
v_sep_gib_1030_sep_288_sep_2: X
v_sep_gib_1030_sep_288_sep_3_sep_319_sep_0: X
v_sep_gib_1030_sep_294_sep_2: X
v_sep_gib_1030_sep_294_sep_3_sep_302_sep_0: X
v_sep_gib_1030_sep_306_sep_2: X
v_sep_gib_1030_sep_306_sep_3_sep_309_sep_0: X
.......................................
v_sep_fail_1288_sep_334_sep_0: X
v_sep_gib_1030_sep_247_sep_2: X
v_sep_gib_1030_sep_247_sep_3_sep_329_sep_0: X
v_sep_gib_1030_sep_253_sep_2: X
v_sep_gib_1030_sep_253_sep_3_sep_284_sep_0: X
v_sep_gib_1030_sep_259_sep_2: X
v_sep_gib_1030_sep_259_sep_3_sep_267_sep_0: X
v_sep_gib_1030_sep_271_sep_2: X
v_sep_gib_1030_sep_271_sep_3_sep_274_sep_0: X
v_sep_gib_1030_sep_288_sep_2: X
v_sep_gib_1030_sep_288_sep_3_sep_319_sep_0: X
v_sep_gib_1030_sep_294_sep_2: X
v_sep_gib_1030_sep_294_sep_3_sep_302_sep_0: X
v_sep_gib_1030_sep_306_sep_2: X
v_sep_gib_1030_sep_306_sep_3_sep_309_sep_0: X
.......................................................
v_sep_fail_1288_sep_334_sep_0: X
v_sep_gib_1030_sep_247_sep_2: X
v_sep_gib_1030_sep_247_sep_3_sep_329_sep_0: X
v_sep_gib_1030_sep_253_sep_2: X
v_sep_gib_1030_sep_253_sep_3_sep_284_sep_0: X
v_sep_gib_1030_sep_259_sep_2: X
v_sep_gib_1030_sep_259_sep_3_sep_267_sep_0: X
v_sep_gib_1030_sep_271_sep_2: X
v_sep_gib_1030_sep_271_sep_3_sep_274_sep_0: X
v_sep_gib_1030_sep_288_sep_2: X
v_sep_gib_1030_sep_288_sep_3_sep_319_sep_0: X
v_sep_gib_1030_sep_294_sep_2: X
v_sep_gib_1030_sep_294_sep_3_sep_302_sep_0: X
v_sep_gib_1030_sep_306_sep_2: X
v_sep_gib_1030_sep_306_sep_3_sep_309_sep_0: X
....................................................................
        
      end HcSolver.solve_ub(46186)[4] (7.700830 sec.)
      
    end YhornInterface.solve(46185)[3] (7.700830 sec.)
    
  end RefTypeInfer.infer_etrs(36260)[2] (9.275591 sec.)
  