MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn sum3.ml

parsed::
 let rec sum_1030 n_1031 = if n_1031 <= 0 then
                             0
                           else
                             n_1031 + sum_1030 (n_1031 - 1) 
 in
 let main_1032 n_1033 = if (3 * n_1033) - 3 <= sum_1030 n_1033 then
                          ()
                        else
                          {fail} () 
 in
   ()

set_target::
 let rec sum_1030 n_1031 = if n_1031 <= 0 then
                             0
                           else
                             n_1031 + sum_1030 (n_1031 - 1) 
 in
 let main_1032 n_1033 = if (3 * n_1033) - 3 <= sum_1030 n_1033 then
                          ()
                        else
                          {fail} () 
 in
 let main_1052 = let arg1_1051 = rand_int () 
                 in
                   main_1032 arg1_1051 
 in
   ()

CPS::
 let rec sum_1030 (n_1031:int) (k_sum_1077:(int -> X)) =
   if n_1031 <= 0 then
     k_sum_1077 0
   else
     sum_1030 (n_1031 - 1) (fun x_1081 -> k_sum_1077 (n_1031 + x_1081)) 
 in
 let main_1032 (n_1033:int) (k_main_1109:(unit -> X)) =
   sum_1030 n_1033 (fun x_1113 -> (if (3 * n_1033) - 3 <= x_1113 then
                                     k_main_1109 ()
                                   else
                                     {|fail|} () k_main_1109)) 
 in
   rand_int_cps () (fun x_1140 -> main_1032 x_1140 (fun x_1137 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1165
  main_1165 -> (rand_int f_1168)
  f_1168 x_1140 -> (main_1032 x_1140 (f_1169 x_1140))
  f_1169 x_1140 x_1137 -> end
  f_main_1167 n_1033 k_main_1109 x_1113 when (((3 * n_1033) - 3) <= x_1113) -> (k_main_1109 ())
  f_main_1167 n_1033 k_main_1109 x_1113 when (not (((3 * n_1033) - 3) <= x_1113)) -> (fail_1170 true k_main_1109)
  f_sum_1166 n_1031 k_sum_1077 x_1081 -> (k_sum_1077 (n_1031 + x_1081))
  fail_1170 b k -> {fail} => (k ())
  main_1032 n_1033 k_main_1109 -> (sum_1030 n_1033 (f_main_1167 n_1033 k_main_1109))
  sum_1030 n_1031 k_sum_1077 when (n_1031 <= 0) -> (k_sum_1077 0)
  sum_1030 n_1031 k_sum_1077 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1166 n_1031 k_sum_1077))
Types:
  main_1165 : X
  fail_1170 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1165 ... --> 
  f_1168 ... --> 
  main_1032 ... --> 
  sum_1030 [1/2] ... --> 
  f_main_1167 [2/2] ... --> 
  fail_1170 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(96)[1]
  program:
    main_1165  | true = ((Random.int 0) f_1168)
    f_1168 x_1140 | true = (main_1032 x_1140
                                      (f_1169 x_1140))
    f_1169 x_1140 x_1137 | true = end
    f_main_1167 n_1033 k_main_1109 x_1113 | (((3 * n_1033) - 3) <= x_1113) = (
    k_main_1109 ())
    f_main_1167 n_1033 k_main_1109 x_1113 | (not (((3 * n_1033) - 3) <= x_1113)) = (
    fail_1170 true
              k_main_1109)
    f_sum_1166 n_1031 k_sum_1077 x_1081 | true = (k_sum_1077 (n_1031 + x_1081))
    fail_1170 b k | true = (fail ())
    main_1032 n_1033 k_main_1109 | true = (sum_1030 n_1033
                                                    (f_main_1167 n_1033
                                                                 k_main_1109))
    sum_1030 n_1031 k_sum_1077 | (n_1031 <= 0) = (k_sum_1077 0)
    sum_1030 n_1031 k_sum_1077 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1166 n_1031
                                                                    k_sum_1077))
    main_1165:X
    f_1168:int -> X
    f_1169:int -> unit -> X
    f_main_1167:int -> (unit -> X) -> int -> X
    f_sum_1166:int -> (int -> X) -> int -> X
    fail_1170:bool -> (unit -> X) -> X
    main_1032:int -> (unit -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: f_1168,f_1169,f_main_1167,f_sum_1166,main_1032
  counterexample: 0:0:0:0:1:0
  error traces:
    [true.nop(<f_1168@4:0> = var2)
     [true.(<main_1032@6:0> = <f_1168@4:0>)
      [true.(<sum_1030@8:0> = <main_1032@6:0>)
       [(<sum_1030@8:0> <= 0).(<<sum_1030@8:1>@11:0> = 0)
        [true.((<f_main_1167@13:0> = <main_1032@6:0>) && (<f_main_1167@13:2> = <<sum_1030@8:1>@11:0>))
         [(not (((3 * <f_main_1167@13:0>) - 3) <= <f_main_1167@13:2>)).(<fail_1170@16:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(97)[2]
    horn clauses:
      P[<fail_1170@16:0>](<fail_1170@16:0>:bool)|- bot
      
      P[<f_main_1167@13:2>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
      (((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) && <fail_1170@16:0>)
      |- P[<fail_1170@16:0>](<fail_1170@16:0>:bool)
      
      P[<main_1032@6:0>](<f_main_1167@13:0>:int),
      P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int)|- P[<f_main_1167@13:2>](
      <f_main_1167@13:0>:int,<f_main_1167@13:2>:int)
      
      P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
      |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
      
      P[<main_1032@6:0>](<sum_1030@8:0>:int)|- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
      
      P[<f_1168@4:0>](<main_1032@6:0>:int)|- P[<main_1032@6:0>](<main_1032@6:0>:int)
      
      |- P[<f_1168@4:0>](<f_1168@4:0>:int)
    call trees:
      <main_1165@1>
        <f_1168@4>
          <main_1032@6>
            <sum_1030@8>
            </<sum_1030@8:1>@11>
            <f_main_1167@13>
              <fail_1170@16>
    inlined horn clauses:
      P[<fail_1170@16:0>](<fail_1170@16:0>:bool)|- bot
      
      P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
      (((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) && <fail_1170@16:0>)
      |- P[<fail_1170@16:0>](<fail_1170@16:0>:bool)
      
      P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
      |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
      
      |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
    begin ParamSubstInfer.infer(952)[3]
      
    end ParamSubstInfer.infer(952)[3] (0.015998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(954)[3]
      
    end RefTypeInfer.elim_coeffs(954)[3] (0.000000 sec.)
    begin YhornInterface.solve(1123)[3]
      begin HcSolver.solve_ub(1124)[4]
        encoded:
          P[<fail_1170@16:0>](<fail_1170@16:0>:int)|- bot
          
          P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
          (((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) && (<fail_1170@16:0> = 1))
          |- P[<fail_1170@16:0>](<fail_1170@16:0>:int)
          
          P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
          |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
          
          |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
        input to Yhorn:
          P[<fail_1170@16:0>](<fail_1170@16:0>:int)|- bot
          
          P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
          (((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) && (<fail_1170@16:0> = 1))
          |- P[<fail_1170@16:0>](<fail_1170@16:0>:int)
          
          P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<sum_1030@8:0> <= 0) && (<<sum_1030@8:1>@11:0> = 0))
          |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1170_sep_16_sep_0($6)) -> 1=0.
(($6-1=0) & (3$7-$8-3>0)) & (v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0($7,$8)) -> v_sep_fail_1170_sep_16_sep_0($6).
(($9=0) & ($10<=0)) & (v_sep_sum_1030_sep_8_sep_0($10)) -> v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0($10,$9).
0=0 -> v_sep_sum_1030_sep_8_sep_0($10).


v_sep_fail_1170_sep_16_sep_0: X
v_sep_sum_1030_sep_8_sep_0: X
v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0: X
....
v_sep_fail_1170_sep_16_sep_0: X
v_sep_sum_1030_sep_8_sep_0: X
v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0: X
...
v_sep_fail_1170_sep_16_sep_0: X
v_sep_sum_1030_sep_8_sep_0: X
v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0: X
....
v_sep_fail_1170_sep_16_sep_0: X
v_sep_sum_1030_sep_8_sep_0: X
v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0: X
....(0=0) & (v_sep_fail_1170_sep_16_sep_0($6)) -> 1=0.
(($6-1=0) & (3$7-$8-3>0)) & (v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0($7,$8)) -> v_sep_fail_1170_sep_16_sep_0($6).
(($9=0) & ($10<=0)) & (v_sep_sum_1030_sep_8_sep_0($10)) -> v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0($10,$9).
0=0 -> v_sep_sum_1030_sep_8_sep_0($10).

          |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
        solution:
          P[<fail_1170@16:0>]($11:bool) = false
          P[<sum_1030@8:0>]($19:int) = true
          P[<<sum_1030@8:1>@11:0>]($14:int,$16:int) = ((3 * $14) <= $16)
        
      end HcSolver.solve_ub(1124)[4] (0.011998 sec.)
      begin HcSolver.check_validity(1240)[4]
        input:
          P[<fail_1170@16:0>](<fail_1170@16:0>:bool)|- bot
          
          P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
          (((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) && <fail_1170@16:0>)
          |- P[<fail_1170@16:0>](<fail_1170@16:0>:bool)
          
          P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
          |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
          
          |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1240)[4] (0.005999 sec.)
      solution:
        P[<fail_1170@16:0>]($11:bool) = false
        P[<sum_1030@8:0>]($19:int) = true
        P[<<sum_1030@8:1>@11:0>]($14:int,$16:int) = ((3 * $14) <= $16)
    end YhornInterface.solve(1123)[3] (0.017997 sec.)
    
  end RefTypeInfer.infer_etrs(97)[2] (0.037995 sec.)
  refinement types:
    main_1165: X
    f_1168: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | ((3 * v1) <= v2)} -> X) -> X
    f_main_1167: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1170: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1169: var11:int -> var10:unit -> X
    f_sum_1166: var16:int -> (var15:int -> X) -> var13:int -> X
  abstraction types:
    main_1165: X
    f_1168: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    sum_1030: v1:int -> (v2:int[v2 -> ((3 * v1) <= v2)] -> X) -> X
    f_main_1167: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1170: v1:bool -> (v2:unit -> X) -> X
    f_1169: var11:int -> var10:unit -> X
    f_sum_1166: var16:int -> (var15:int -> X) -> var13:int -> X
  
end AbsTypeInfer.refine(96)[1] (0.039995 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1165
  main_1165 -> (rand_int f_1168)
  f_1168 x_1140 -> (main_1032 x_1140 (f_1169 x_1140))
  f_1169 x_1140 x_1137 -> end
  f_main_1167 n_1033 k_main_1109 x_1113 when (((3 * n_1033) - 3) <= x_1113) -> (k_main_1109 ())
  f_main_1167 n_1033 k_main_1109 x_1113 when (not (((3 * n_1033) - 3) <= x_1113)) -> (fail_1170 true k_main_1109)
  f_sum_1166 n_1031 k_sum_1077 x_1081 -> (k_sum_1077 (n_1031 + x_1081))
  fail_1170 b k -> {fail} => (k ())
  main_1032 n_1033 k_main_1109 -> (sum_1030 n_1033 (f_main_1167 n_1033 k_main_1109))
  sum_1030 n_1031 k_sum_1077 when (n_1031 <= 0) -> (k_sum_1077 0)
  sum_1030 n_1031 k_sum_1077 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1166 n_1031 k_sum_1077))
Types:
  main_1165 : X
  fail_1170 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (x_1:int -> (x_3:int[3*x_1 <= x_3] -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1165 ... --> 
  f_1168 ... --> 
  main_1032 ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sum_1166 ... --> 
  f_main_1167 [2/2] ... --> 
  fail_1170 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(1683)[1]
  program:
    main_1165  | true = ((Random.int 0) f_1168)
    f_1168 x_1140 | true = (main_1032 x_1140
                                      (f_1169 x_1140))
    f_1169 x_1140 x_1137 | true = end
    f_main_1167 n_1033 k_main_1109 x_1113 | (((3 * n_1033) - 3) <= x_1113) = (
    k_main_1109 ())
    f_main_1167 n_1033 k_main_1109 x_1113 | (not (((3 * n_1033) - 3) <= x_1113)) = (
    fail_1170 true
              k_main_1109)
    f_sum_1166 n_1031 k_sum_1077 x_1081 | true = (k_sum_1077 (n_1031 + x_1081))
    fail_1170 b k | true = (fail ())
    main_1032 n_1033 k_main_1109 | true = (sum_1030 n_1033
                                                    (f_main_1167 n_1033
                                                                 k_main_1109))
    sum_1030 n_1031 k_sum_1077 | (n_1031 <= 0) = (k_sum_1077 0)
    sum_1030 n_1031 k_sum_1077 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1166 n_1031
                                                                    k_sum_1077))
    main_1165:X
    f_1168:int -> X
    f_1169:int -> unit -> X
    f_main_1167:int -> (unit -> X) -> int -> X
    f_sum_1166:int -> (int -> X) -> int -> X
    fail_1170:bool -> (unit -> X) -> X
    main_1032:int -> (unit -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: f_1168,f_1169,f_main_1167,f_sum_1166,main_1032
  counterexample: 0:0:0:1:0:0:1:0
  error traces:
    [true.nop(<f_1168@22:0> = var17)
     [true.(<main_1032@24:0> = <f_1168@22:0>)
      [true.(<sum_1030@26:0> = <main_1032@24:0>)
       [(not (<sum_1030@26:0> <= 0)).(<sum_1030@29:0> = (<sum_1030@26:0> - 1))
        [(<sum_1030@29:0> <= 0).(<<sum_1030@29:1>@32:0> = 0)
         [true.((<f_sum_1166@34:0> = <sum_1030@26:0>) && (<f_sum_1166@34:2> = <<sum_1030@29:1>@32:0>))
          [true.(<<f_sum_1166@34:1>@36:0> = (<f_sum_1166@34:0> + <f_sum_1166@34:2>))
           [true.(<<sum_1030@26:1>@38:0> = <<f_sum_1166@34:1>@36:0>)
            [true.((<f_main_1167@40:0> = <main_1032@24:0>) && (<f_main_1167@40:2> = <<sum_1030@26:1>@38:0>))
             [(not (((3 * <f_main_1167@40:0>) - 3) <= <f_main_1167@40:2>)).(<fail_1170@43:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(1684)[2]
    horn clauses:
      P[<fail_1170@43:0>](<fail_1170@43:0>:bool)|- bot
      
      P[<f_main_1167@40:2>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int),
      (((3 * <f_main_1167@40:0>) > (3 + <f_main_1167@40:2>)) && <fail_1170@43:0>)
      |- P[<fail_1170@43:0>](<fail_1170@43:0>:bool)
      
      P[<main_1032@24:0>](<f_main_1167@40:0>:int),
      P[<<sum_1030@26:1>@38:0>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int)|- P[<f_main_1167@40:2>](
      <f_main_1167@40:0>:int,<f_main_1167@40:2>:int)
      
      P[<sum_1030@26:0>](<sum_1030@26:0>:int),
      P[<<f_sum_1166@34:1>@36:0>](<sum_1030@26:0>:int,<<sum_1030@26:1>@38:0>:int), (
      <sum_1030@26:0> > 0) |- P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,
                                                        <<sum_1030@26:1>@38:0>:int)
      
      P[<f_sum_1166@34:2>](<f_sum_1166@34:0>:int,(<<f_sum_1166@34:1>@36:0> + (-1 * <f_sum_1166@34:0>)):int)|- P[<<f_sum_1166@34:1>@36:0>](
      <f_sum_1166@34:0>:int,<<f_sum_1166@34:1>@36:0>:int)
      
      P[<sum_1030@26:0>](<f_sum_1166@34:0>:int),
      P[<<sum_1030@29:1>@32:0>]((-1 + <f_sum_1166@34:0>):int,<f_sum_1166@34:2>:int), (
      <f_sum_1166@34:0> > 0) |- P[<f_sum_1166@34:2>](<f_sum_1166@34:0>:int,
                                                     <f_sum_1166@34:2>:int)
      
      P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
      |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
      
      P[<sum_1030@26:0>]((1 + <sum_1030@29:0>):int), ((1 + <sum_1030@29:0>) > 0)
      |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
      
      P[<main_1032@24:0>](<sum_1030@26:0>:int)|- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
      
      P[<f_1168@22:0>](<main_1032@24:0>:int)|- P[<main_1032@24:0>](<main_1032@24:0>:int)
      
      |- P[<f_1168@22:0>](<f_1168@22:0>:int)
    call trees:
      <main_1165@19>
        <f_1168@22>
          <main_1032@24>
            <sum_1030@26>
              <sum_1030@29>
              </<sum_1030@29:1>@32>
              <f_sum_1166@34>
              </<f_sum_1166@34:1>@36>
            </<sum_1030@26:1>@38>
            <f_main_1167@40>
              <fail_1170@43>
    inlined horn clauses:
      P[<fail_1170@43:0>](<fail_1170@43:0>:bool)|- bot
      
      P[<<sum_1030@26:1>@38:0>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int),
      (((3 * <f_main_1167@40:0>) > (3 + <f_main_1167@40:2>)) && <fail_1170@43:0>)
      |- P[<fail_1170@43:0>](<fail_1170@43:0>:bool)
      
      P[<sum_1030@26:0>](<sum_1030@26:0>:int),
      P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
      (<sum_1030@26:0> > 0) |- P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,
                                                         <<sum_1030@26:1>@38:0>:int)
      
      P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
      |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
      
      P[<sum_1030@26:0>]((1 + <sum_1030@29:0>):int), ((1 + <sum_1030@29:0>) > 0)
      |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
      
      |- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
    begin ParamSubstInfer.infer(3052)[3]
      
    end ParamSubstInfer.infer(3052)[3] (0.037994 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(3054)[3]
      
    end RefTypeInfer.elim_coeffs(3054)[3] (0.001000 sec.)
    begin YhornInterface.solve(3277)[3]
      begin HcSolver.solve_ub(3278)[4]
        encoded:
          P[<fail_1170@43:0>](<fail_1170@43:0>:int)|- bot
          
          P[<<sum_1030@26:1>@38:0>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int),
          (((3 * <f_main_1167@40:0>) > (3 + <f_main_1167@40:2>)) && (<fail_1170@43:0> = 1))
          |- P[<fail_1170@43:0>](<fail_1170@43:0>:int)
          
          P[<sum_1030@26:0>](<sum_1030@26:0>:int),
          P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
          (<sum_1030@26:0> > 0) |- P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,
                                                             <<sum_1030@26:1>@38:0>:int)
          
          P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
          |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
          
          P[<sum_1030@26:0>]((1 + <sum_1030@29:0>):int), ((1 + <sum_1030@29:0>) > 0)
          |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
          
          |- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
        input to Yhorn:
          P[<fail_1170@43:0>](<fail_1170@43:0>:int)|- bot
          
          P[<<sum_1030@26:1>@38:0>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int),
          (((3 * <f_main_1167@40:0>) > (3 + <f_main_1167@40:2>)) && (<fail_1170@43:0> = 1))
          |- P[<fail_1170@43:0>](<fail_1170@43:0>:int)
          
          P[<sum_1030@26:0>](<sum_1030@26:0>:int),
          P[<<sum_1030@29:1>@32:0>](var18:int,var19:int),
          (((var19 + <sum_1030@26:0>) = <<sum_1030@26:1>@38:0>) &&
           (((1 + var18) = <sum_1030@26:0>) && (<sum_1030@26:0> > 0)))
          |- P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,<<sum_1030@26:1>@38:0>:int)
          
          P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<sum_1030@29:0> <= 0) && (<<sum_1030@29:1>@32:0> = 0))
          |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
          
          P[<sum_1030@26:0>](var20:int), ((var20 = (1 + <sum_1030@29:0>)) && ((1 + <sum_1030@29:0>) > 0))
          |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1170_sep_43_sep_0($67)) -> 1=0.
(($67-1=0) & (3$68-$69-3>0)) & (v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0($68,$69)) -> v_sep_fail_1170_sep_43_sep_0($67).
(($70>0) & (-$70+$71+1=0) & ($70+$72-$73=0)) & (v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0($71,$72)) & (v_sep_sum_1030_sep_26_sep_0($70)) -> v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0($70,$73).
(($74=0) & ($75<=0)) & (v_sep_sum_1030_sep_29_sep_0($75)) -> v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0($75,$74).
(($75+1>0) & (-$75+$76-1=0)) & (v_sep_sum_1030_sep_26_sep_0($76)) -> v_sep_sum_1030_sep_29_sep_0($75).
0=0 -> v_sep_sum_1030_sep_26_sep_0($70).


v_sep_fail_1170_sep_43_sep_0: X
v_sep_sum_1030_sep_26_sep_0: X
v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0: X
v_sep_sum_1030_sep_29_sep_0: X
v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0: X
.......
v_sep_fail_1170_sep_43_sep_0: X
v_sep_sum_1030_sep_26_sep_0: X
v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0: X
v_sep_sum_1030_sep_29_sep_0: X
v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0: X
...
v_sep_fail_1170_sep_43_sep_0: X
v_sep_sum_1030_sep_26_sep_0: X
v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0: X
v_sep_sum_1030_sep_29_sep_0: X
v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0: X
.....
v_sep_fail_1170_sep_43_sep_0: X
v_sep_sum_1030_sep_26_sep_0: X
v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0: X
v_sep_sum_1030_sep_29_sep_0: X
v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0: X
......
v_sep_fail_1170_sep_43_sep_0: X
v_sep_sum_1030_sep_26_sep_0: X
v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0: X
v_sep_sum_1030_sep_29_sep_0: X
v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0: X
.......(0=0) & (v_sep_fail_1170_sep_43_sep_0($67)) -> 1=0.
(($67-1=0) & (3$68-$69-3>0)) & (v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0($68,$69)) -> v_sep_fail_1170_sep_43_sep_0($67).
(($70>0) & (-$70+$71+1=0) & ($70+$72-$73=0)) & (v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0($71,$72)) & (v_sep_sum_1030_sep_26_sep_0($70)) -> v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0($70,$73).
(($74=0) & ($75<=0)) & (v_sep_sum_1030_sep_29_sep_0($75)) -> v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0($75,$74).
(($75+1>0) & (-$75+$76-1=0)) & (v_sep_sum_1030_sep_26_sep_0($76)) -> v_sep_sum_1030_sep_29_sep_0($75).
0=0 -> v_sep_sum_1030_sep_26_sep_0($70).

          |- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
        solution:
          P[<fail_1170@43:0>]($77:bool) = false
          P[<sum_1030@26:0>]($90:int) = true
          P[<<sum_1030@26:1>@38:0>]($80:int,$82:int) = ((3 * $80) <= (2 + $82))
          P[<sum_1030@29:0>]($93:int) = true
          P[<<sum_1030@29:1>@32:0>]($85:int,$87:int) = ((2 * $85) <= $87)
        
      end HcSolver.solve_ub(3278)[4] (0.020997 sec.)
      begin HcSolver.check_validity(3548)[4]
        input:
          P[<fail_1170@43:0>](<fail_1170@43:0>:bool)|- bot
          
          P[<<sum_1030@26:1>@38:0>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int),
          (((3 * <f_main_1167@40:0>) > (3 + <f_main_1167@40:2>)) && <fail_1170@43:0>)
          |- P[<fail_1170@43:0>](<fail_1170@43:0>:bool)
          
          P[<sum_1030@26:0>](<sum_1030@26:0>:int),
          P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
          (<sum_1030@26:0> > 0) |- P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,
                                                             <<sum_1030@26:1>@38:0>:int)
          
          P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
          |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
          
          P[<sum_1030@26:0>]((1 + <sum_1030@29:0>):int), ((1 + <sum_1030@29:0>) > 0)
          |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
          
          |- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3548)[4] (0.007999 sec.)
      solution:
        P[<fail_1170@43:0>]($77:bool) = false
        P[<sum_1030@26:0>]($90:int) = true
        P[<<sum_1030@26:1>@38:0>]($80:int,$82:int) = ((3 * $80) <= (2 + $82))
        P[<sum_1030@29:0>]($93:int) = true
        P[<<sum_1030@29:1>@32:0>]($85:int,$87:int) = ((2 * $85) <= $87)
    end YhornInterface.solve(3277)[3] (0.028996 sec.)
    
  end RefTypeInfer.infer_etrs(1684)[2] (0.074988 sec.)
  refinement types:
    main_1165: X
    f_1168: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | ((3 * v1) <= (2 + v2))} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | ((2 * v1) <= v2)} -> X) -> X
    f_sum_1166: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1167: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1170: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1169: var29:int -> var28:unit -> X
  abstraction types:
    main_1165: X
    f_1168: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    sum_1030: var30:int -> (var31:int[var31 -> ((3 * var30) <= (2 + var31)),
                                      var31 -> ((2 * var30) <= var31)] -> X) -> X
    f_sum_1166: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1167: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1170: v1:bool -> (v2:unit -> X) -> X
    f_1169: var29:int -> var28:unit -> X
  
end AbsTypeInfer.refine(1683)[1] (0.076988 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1165
  main_1165 -> (rand_int f_1168)
  f_1168 x_1140 -> (main_1032 x_1140 (f_1169 x_1140))
  f_1169 x_1140 x_1137 -> end
  f_main_1167 n_1033 k_main_1109 x_1113 when (((3 * n_1033) - 3) <= x_1113) -> (k_main_1109 ())
  f_main_1167 n_1033 k_main_1109 x_1113 when (not (((3 * n_1033) - 3) <= x_1113)) -> (fail_1170 true k_main_1109)
  f_sum_1166 n_1031 k_sum_1077 x_1081 -> (k_sum_1077 (n_1031 + x_1081))
  fail_1170 b k -> {fail} => (k ())
  main_1032 n_1033 k_main_1109 -> (sum_1030 n_1033 (f_main_1167 n_1033 k_main_1109))
  sum_1030 n_1031 k_sum_1077 when (n_1031 <= 0) -> (k_sum_1077 0)
  sum_1030 n_1031 k_sum_1077 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1166 n_1031 k_sum_1077))
Types:
  main_1165 : X
  fail_1170 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (x_1:int -> (x_3:int[2*x_1 <= x_3; 3*x_1 <= x_3 + 2; 3*x_1 <= x_3] -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1165 ... --> 
  f_1168 ... --> 
  main_1032 ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sum_1166 ... --> 
  f_sum_1166 ... --> 
  f_main_1167 [2/2] ... --> 
  fail_1170 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 0; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(4683)[1]
  program:
    main_1165  | true = ((Random.int 0) f_1168)
    f_1168 x_1140 | true = (main_1032 x_1140
                                      (f_1169 x_1140))
    f_1169 x_1140 x_1137 | true = end
    f_main_1167 n_1033 k_main_1109 x_1113 | (((3 * n_1033) - 3) <= x_1113) = (
    k_main_1109 ())
    f_main_1167 n_1033 k_main_1109 x_1113 | (not (((3 * n_1033) - 3) <= x_1113)) = (
    fail_1170 true
              k_main_1109)
    f_sum_1166 n_1031 k_sum_1077 x_1081 | true = (k_sum_1077 (n_1031 + x_1081))
    fail_1170 b k | true = (fail ())
    main_1032 n_1033 k_main_1109 | true = (sum_1030 n_1033
                                                    (f_main_1167 n_1033
                                                                 k_main_1109))
    sum_1030 n_1031 k_sum_1077 | (n_1031 <= 0) = (k_sum_1077 0)
    sum_1030 n_1031 k_sum_1077 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1166 n_1031
                                                                    k_sum_1077))
    main_1165:X
    f_1168:int -> X
    f_1169:int -> unit -> X
    f_main_1167:int -> (unit -> X) -> int -> X
    f_sum_1166:int -> (int -> X) -> int -> X
    fail_1170:bool -> (unit -> X) -> X
    main_1032:int -> (unit -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: f_1168,f_1169,f_main_1167,f_sum_1166,main_1032
  counterexample: 0:0:0:1:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1168@49:0> = var34)
     [true.(<main_1032@51:0> = <f_1168@49:0>)
      [true.(<sum_1030@53:0> = <main_1032@51:0>)
       [(not (<sum_1030@53:0> <= 0)).(<sum_1030@56:0> = (<sum_1030@53:0> - 1))
        [(not (<sum_1030@56:0> <= 0)).(<sum_1030@59:0> = (<sum_1030@56:0> - 1))
         [(<sum_1030@59:0> <= 0).(<<sum_1030@59:1>@62:0> = 0)
          [true.((<f_sum_1166@64:0> = <sum_1030@56:0>) && (<f_sum_1166@64:2> = <<sum_1030@59:1>@62:0>))
           [true.(<<f_sum_1166@64:1>@66:0> = (<f_sum_1166@64:0> + <f_sum_1166@64:2>))
            [true.(<<sum_1030@56:1>@68:0> = <<f_sum_1166@64:1>@66:0>)
             [true.((<f_sum_1166@70:0> = <sum_1030@53:0>) && (<f_sum_1166@70:2> = <<sum_1030@56:1>@68:0>))
              [true.(<<f_sum_1166@70:1>@72:0> = (<f_sum_1166@70:0> + <f_sum_1166@70:2>))
               [true.(<<sum_1030@53:1>@74:0> = <<f_sum_1166@70:1>@72:0>)
                [true.((<f_main_1167@76:0> = <main_1032@51:0>) && (<f_main_1167@76:2> = <<sum_1030@53:1>@74:0>))
                 [(not (((3 * <f_main_1167@76:0>) - 3) <= <f_main_1167@76:2>)).(<fail_1170@79:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(4684)[2]
    horn clauses:
      P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
      
      P[<f_main_1167@76:2>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int),
      (((3 * <f_main_1167@76:0>) > (3 + <f_main_1167@76:2>)) && <fail_1170@79:0>)
      |- P[<fail_1170@79:0>](<fail_1170@79:0>:bool)
      
      P[<main_1032@51:0>](<f_main_1167@76:0>:int),
      P[<<sum_1030@53:1>@74:0>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int)|- P[<f_main_1167@76:2>](
      <f_main_1167@76:0>:int,<f_main_1167@76:2>:int)
      
      P[<sum_1030@53:0>](<sum_1030@53:0>:int),
      P[<<f_sum_1166@70:1>@72:0>](<sum_1030@53:0>:int,<<sum_1030@53:1>@74:0>:int), (
      <sum_1030@53:0> > 0) |- P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,
                                                        <<sum_1030@53:1>@74:0>:int)
      
      P[<f_sum_1166@70:2>](<f_sum_1166@70:0>:int,(<<f_sum_1166@70:1>@72:0> + (-1 * <f_sum_1166@70:0>)):int)|- P[<<f_sum_1166@70:1>@72:0>](
      <f_sum_1166@70:0>:int,<<f_sum_1166@70:1>@72:0>:int)
      
      P[<sum_1030@53:0>](<f_sum_1166@70:0>:int),
      P[<<sum_1030@56:1>@68:0>]((-1 + <f_sum_1166@70:0>):int,<f_sum_1166@70:2>:int), (
      <f_sum_1166@70:0> > 0) |- P[<f_sum_1166@70:2>](<f_sum_1166@70:0>:int,
                                                     <f_sum_1166@70:2>:int)
      
      P[<sum_1030@56:0>](<sum_1030@56:0>:int),
      P[<<f_sum_1166@64:1>@66:0>](<sum_1030@56:0>:int,<<sum_1030@56:1>@68:0>:int), (
      <sum_1030@56:0> > 0) |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,
                                                        <<sum_1030@56:1>@68:0>:int)
      
      P[<f_sum_1166@64:2>](<f_sum_1166@64:0>:int,(<<f_sum_1166@64:1>@66:0> + (-1 * <f_sum_1166@64:0>)):int)|- P[<<f_sum_1166@64:1>@66:0>](
      <f_sum_1166@64:0>:int,<<f_sum_1166@64:1>@66:0>:int)
      
      P[<sum_1030@56:0>](<f_sum_1166@64:0>:int),
      P[<<sum_1030@59:1>@62:0>]((-1 + <f_sum_1166@64:0>):int,<f_sum_1166@64:2>:int), (
      <f_sum_1166@64:0> > 0) |- P[<f_sum_1166@64:2>](<f_sum_1166@64:0>:int,
                                                     <f_sum_1166@64:2>:int)
      
      P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
      |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
      
      P[<sum_1030@56:0>]((1 + <sum_1030@59:0>):int), ((1 + <sum_1030@59:0>) > 0)
      |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
      
      P[<sum_1030@53:0>]((1 + <sum_1030@56:0>):int), ((1 + <sum_1030@56:0>) > 0)
      |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
      
      P[<main_1032@51:0>](<sum_1030@53:0>:int)|- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
      
      P[<f_1168@49:0>](<main_1032@51:0>:int)|- P[<main_1032@51:0>](<main_1032@51:0>:int)
      
      |- P[<f_1168@49:0>](<f_1168@49:0>:int)
    call trees:
      <main_1165@46>
        <f_1168@49>
          <main_1032@51>
            <sum_1030@53>
              <sum_1030@56>
                <sum_1030@59>
                </<sum_1030@59:1>@62>
                <f_sum_1166@64>
                </<f_sum_1166@64:1>@66>
              </<sum_1030@56:1>@68>
              <f_sum_1166@70>
              </<f_sum_1166@70:1>@72>
            </<sum_1030@53:1>@74>
            <f_main_1167@76>
              <fail_1170@79>
    inlined horn clauses:
      P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
      
      P[<<sum_1030@53:1>@74:0>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int),
      (((3 * <f_main_1167@76:0>) > (3 + <f_main_1167@76:2>)) && <fail_1170@79:0>)
      |- P[<fail_1170@79:0>](<fail_1170@79:0>:bool)
      
      P[<sum_1030@53:0>](<sum_1030@53:0>:int),
      P[<<sum_1030@56:1>@68:0>]((-1 + <sum_1030@53:0>):int,(<<sum_1030@53:1>@74:0> + (-1 * <sum_1030@53:0>)):int),
      (<sum_1030@53:0> > 0) |- P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,
                                                         <<sum_1030@53:1>@74:0>:int)
      
      P[<sum_1030@56:0>](<sum_1030@56:0>:int),
      P[<<sum_1030@59:1>@62:0>]((-1 + <sum_1030@56:0>):int,(<<sum_1030@56:1>@68:0> + (-1 * <sum_1030@56:0>)):int),
      (<sum_1030@56:0> > 0) |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,
                                                         <<sum_1030@56:1>@68:0>:int)
      
      P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
      |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
      
      P[<sum_1030@56:0>]((1 + <sum_1030@59:0>):int), ((1 + <sum_1030@59:0>) > 0)
      |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
      
      P[<sum_1030@53:0>]((1 + <sum_1030@56:0>):int), ((1 + <sum_1030@56:0>) > 0)
      |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
      
      |- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
    begin ParamSubstInfer.infer(6565)[3]
      
    end ParamSubstInfer.infer(6565)[3] (0.210968 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(6567)[3]
      
    end RefTypeInfer.elim_coeffs(6567)[3] (0.001000 sec.)
    begin YhornInterface.solve(6844)[3]
      begin HcSolver.solve_ub(6845)[4]
        encoded:
          P[<fail_1170@79:0>](<fail_1170@79:0>:int)|- bot
          
          P[<<sum_1030@53:1>@74:0>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int),
          (((3 * <f_main_1167@76:0>) > (3 + <f_main_1167@76:2>)) && (<fail_1170@79:0> = 1))
          |- P[<fail_1170@79:0>](<fail_1170@79:0>:int)
          
          P[<sum_1030@53:0>](<sum_1030@53:0>:int),
          P[<<sum_1030@56:1>@68:0>]((-1 + <sum_1030@53:0>):int,(<<sum_1030@53:1>@74:0> + (-1 * <sum_1030@53:0>)):int),
          (<sum_1030@53:0> > 0) |- P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,
                                                             <<sum_1030@53:1>@74:0>:int)
          
          P[<sum_1030@56:0>](<sum_1030@56:0>:int),
          P[<<sum_1030@59:1>@62:0>]((-1 + <sum_1030@56:0>):int,(<<sum_1030@56:1>@68:0> + (-1 * <sum_1030@56:0>)):int),
          (<sum_1030@56:0> > 0) |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,
                                                             <<sum_1030@56:1>@68:0>:int)
          
          P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
          |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
          
          P[<sum_1030@56:0>]((1 + <sum_1030@59:0>):int), ((1 + <sum_1030@59:0>) > 0)
          |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
          
          P[<sum_1030@53:0>]((1 + <sum_1030@56:0>):int), ((1 + <sum_1030@56:0>) > 0)
          |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
          
          |- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
        input to Yhorn:
          P[<fail_1170@79:0>](<fail_1170@79:0>:int)|- bot
          
          P[<<sum_1030@53:1>@74:0>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int),
          (((3 * <f_main_1167@76:0>) > (3 + <f_main_1167@76:2>)) && (<fail_1170@79:0> = 1))
          |- P[<fail_1170@79:0>](<fail_1170@79:0>:int)
          
          P[<sum_1030@53:0>](<sum_1030@53:0>:int),
          P[<<sum_1030@56:1>@68:0>](var35:int,var36:int),
          (((var36 + <sum_1030@53:0>) = <<sum_1030@53:1>@74:0>) &&
           (((1 + var35) = <sum_1030@53:0>) && (<sum_1030@53:0> > 0)))
          |- P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,<<sum_1030@53:1>@74:0>:int)
          
          P[<sum_1030@56:0>](<sum_1030@56:0>:int),
          P[<<sum_1030@59:1>@62:0>](var37:int,var38:int),
          (((var38 + <sum_1030@56:0>) = <<sum_1030@56:1>@68:0>) &&
           (((1 + var37) = <sum_1030@56:0>) && (<sum_1030@56:0> > 0)))
          |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,<<sum_1030@56:1>@68:0>:int)
          
          P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<sum_1030@59:0> <= 0) && (<<sum_1030@59:1>@62:0> = 0))
          |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
          
          P[<sum_1030@56:0>](var39:int), ((var39 = (1 + <sum_1030@59:0>)) && ((1 + <sum_1030@59:0>) > 0))
          |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
          
          P[<sum_1030@53:0>](var40:int), ((var40 = (1 + <sum_1030@56:0>)) && ((1 + <sum_1030@56:0>) > 0))
          |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1170_sep_79_sep_0($182)) -> 1=0.
(($182-1=0) & (3$183-$184-3>0)) & (v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0($183,$184)) -> v_sep_fail_1170_sep_79_sep_0($182).
(($185>0) & (-$185+$186+1=0) & ($185+$187-$188=0)) & (v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0($186,$187)) & (v_sep_sum_1030_sep_53_sep_0($185)) -> v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0($185,$188).
(($189>0) & (-$189+$190+1=0) & ($189+$191-$192=0)) & (v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0($190,$191)) & (v_sep_sum_1030_sep_56_sep_0($189)) -> v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0($189,$192).
(($193=0) & ($194<=0)) & (v_sep_sum_1030_sep_59_sep_0($194)) -> v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0($194,$193).
(($194+1>0) & (-$194+$195-1=0)) & (v_sep_sum_1030_sep_56_sep_0($195)) -> v_sep_sum_1030_sep_59_sep_0($194).
(($189+1>0) & (-$189+$196-1=0)) & (v_sep_sum_1030_sep_53_sep_0($196)) -> v_sep_sum_1030_sep_56_sep_0($189).
0=0 -> v_sep_sum_1030_sep_53_sep_0($185).


v_sep_fail_1170_sep_79_sep_0: X
v_sep_sum_1030_sep_53_sep_0: X
v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0: X
v_sep_sum_1030_sep_56_sep_0: X
v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
..........
v_sep_fail_1170_sep_79_sep_0: X
v_sep_sum_1030_sep_53_sep_0: X
v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0: X
v_sep_sum_1030_sep_56_sep_0: X
v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
...
v_sep_fail_1170_sep_79_sep_0: X
v_sep_sum_1030_sep_53_sep_0: X
v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0: X
v_sep_sum_1030_sep_56_sep_0: X
v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
.....
v_sep_fail_1170_sep_79_sep_0: X
v_sep_sum_1030_sep_53_sep_0: X
v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0: X
v_sep_sum_1030_sep_56_sep_0: X
v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
.......
v_sep_fail_1170_sep_79_sep_0: X
v_sep_sum_1030_sep_53_sep_0: X
v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0: X
v_sep_sum_1030_sep_56_sep_0: X
v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
.........
v_sep_fail_1170_sep_79_sep_0: X
v_sep_sum_1030_sep_53_sep_0: X
v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0: X
v_sep_sum_1030_sep_56_sep_0: X
v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
..........(0=0) & (v_sep_fail_1170_sep_79_sep_0($182)) -> 1=0.
(($182-1=0) & (3$183-$184-3>0)) & (v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0($183,$184)) -> v_sep_fail_1170_sep_79_sep_0($182).
(($185>0) & (-$185+$186+1=0) & ($185+$187-$188=0)) & (v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0($186,$187)) & (v_sep_sum_1030_sep_53_sep_0($185)) -> v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0($185,$188).
(($189>0) & (-$189+$190+1=0) & ($189+$191-$192=0)) & (v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0($190,$191)) & (v_sep_sum_1030_sep_56_sep_0($189)) -> v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0($189,$192).
(($193=0) & ($194<=0)) & (v_sep_sum_1030_sep_59_sep_0($194)) -> v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0($194,$193).
(($194+1>0) & (-$194+$195-1=0)) & (v_sep_sum_1030_sep_56_sep_0($195)) -> v_sep_sum_1030_sep_59_sep_0($194).
(($189+1>0) & (-$189+$196-1=0)) & (v_sep_sum_1030_sep_53_sep_0($196)) -> v_sep_sum_1030_sep_56_sep_0($189).
0=0 -> v_sep_sum_1030_sep_53_sep_0($185).

          |- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
        solution:
          P[<fail_1170@79:0>]($197:bool) = false
          P[<sum_1030@53:0>]($210:int) = true
          P[<<sum_1030@53:1>@74:0>]($200:int,$202:int) = ((3 * $200) <= (3 + $202))
          P[<sum_1030@56:0>]($218:int) = true
          P[<<sum_1030@56:1>@68:0>]($205:int,$207:int) = ((2 * $205) <= (1 + $207))
          P[<sum_1030@59:0>]($221:int) = true
          P[<<sum_1030@59:1>@62:0>]($213:int,$215:int) = ($213 <= $215)
        
      end HcSolver.solve_ub(6845)[4] (0.035994 sec.)
      begin HcSolver.check_validity(7269)[4]
        input:
          P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
          
          P[<<sum_1030@53:1>@74:0>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int),
          (((3 * <f_main_1167@76:0>) > (3 + <f_main_1167@76:2>)) && <fail_1170@79:0>)
          |- P[<fail_1170@79:0>](<fail_1170@79:0>:bool)
          
          P[<sum_1030@53:0>](<sum_1030@53:0>:int),
          P[<<sum_1030@56:1>@68:0>]((-1 + <sum_1030@53:0>):int,(<<sum_1030@53:1>@74:0> + (-1 * <sum_1030@53:0>)):int),
          (<sum_1030@53:0> > 0) |- P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,
                                                             <<sum_1030@53:1>@74:0>:int)
          
          P[<sum_1030@56:0>](<sum_1030@56:0>:int),
          P[<<sum_1030@59:1>@62:0>]((-1 + <sum_1030@56:0>):int,(<<sum_1030@56:1>@68:0> + (-1 * <sum_1030@56:0>)):int),
          (<sum_1030@56:0> > 0) |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,
                                                             <<sum_1030@56:1>@68:0>:int)
          
          P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
          |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
          
          P[<sum_1030@56:0>]((1 + <sum_1030@59:0>):int), ((1 + <sum_1030@59:0>) > 0)
          |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
          
          P[<sum_1030@53:0>]((1 + <sum_1030@56:0>):int), ((1 + <sum_1030@56:0>) > 0)
          |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
          
          |- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(7269)[4] (0.005000 sec.)
      solution:
        P[<fail_1170@79:0>]($197:bool) = false
        P[<sum_1030@53:0>]($210:int) = true
        P[<<sum_1030@53:1>@74:0>]($200:int,$202:int) = ((3 * $200) <= (3 + $202))
        P[<sum_1030@56:0>]($218:int) = true
        P[<<sum_1030@56:1>@68:0>]($205:int,$207:int) = ((2 * $205) <= (1 + $207))
        P[<sum_1030@59:0>]($221:int) = true
        P[<<sum_1030@59:1>@62:0>]($213:int,$215:int) = ($213 <= $215)
    end YhornInterface.solve(6844)[3] (0.040994 sec.)
    
  end RefTypeInfer.infer_etrs(4684)[2] (0.267960 sec.)
  refinement types:
    main_1165: X
    f_1168: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | ((3 * v1) <= (3 + v2))} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | ((2 * v1) <= (1 + v2))} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (v1 <= v2)} -> X) -> X
    f_sum_1166: v1:int -> (v2:int -> X) -> v4:int -> X
    f_sum_1166: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1167: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1170: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1169: var49:int -> var48:unit -> X
  abstraction types:
    main_1165: X
    f_1168: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    sum_1030: var54:int ->
              (var55:int[var55 -> ((3 * var54) <= (3 + var55)),
                         var55 -> ((2 * var54) <= (1 + var55)),
                         var55 -> (var54 <= var55)] -> X) -> X
    f_sum_1166: var58:int -> (var59:int -> X) -> var61:int -> X
    f_main_1167: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1170: v1:bool -> (v2:unit -> X) -> X
    f_1169: var49:int -> var48:unit -> X
  
end AbsTypeInfer.refine(4683)[1] (0.273958 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1165
  main_1165 -> (rand_int f_1168)
  f_1168 x_1140 -> (main_1032 x_1140 (f_1169 x_1140))
  f_1169 x_1140 x_1137 -> end
  f_main_1167 n_1033 k_main_1109 x_1113 when (((3 * n_1033) - 3) <= x_1113) -> (k_main_1109 ())
  f_main_1167 n_1033 k_main_1109 x_1113 when (not (((3 * n_1033) - 3) <= x_1113)) -> (fail_1170 true k_main_1109)
  f_sum_1166 n_1031 k_sum_1077 x_1081 -> (k_sum_1077 (n_1031 + x_1081))
  fail_1170 b k -> {fail} => (k ())
  main_1032 n_1033 k_main_1109 -> (sum_1030 n_1033 (f_main_1167 n_1033 k_main_1109))
  sum_1030 n_1031 k_sum_1077 when (n_1031 <= 0) -> (k_sum_1077 0)
  sum_1030 n_1031 k_sum_1077 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1166 n_1031 k_sum_1077))
Types:
  main_1165 : X
  fail_1170 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (x_1:int ->
              (x_3:int[x_1 <= x_3; 2*x_1 <= x_3 + 1; 3*x_1 <= x_3 + 3; 2*x_1 <= x_3; 3*x_1 <= x_3 + 2; 3*x_1 <= x_3] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  sum: ((x_1:int -> {x_2:int | 3 * x_1 <= x_2 + 3}) /\ 
        (x_3:int ->
             ({x_4:int | (2 * x_3 <= x_4 + 1 && 2 * x_3 <= x_4) && x_3 <= x_4} \/ 
              {x_5:int | ((2 * x_3 <= x_5 + 1 && 3 * x_3 <= x_5) && 2 * x_3 > x_5) && x_3 <= x_5} \/ 
              {x_6:int | ((2 * x_3 <= x_6 + 1 && 3 * x_3 > x_6) && 2 * x_3 > x_6) && x_3 <= x_6})))

cycles: 3
total: 2.281 sec
  abst: 0.085 sec
  mc: 0.189 sec
  refine: 0.447 sec
    exparam: 0.265 sec
@74:0>](var54:int), ((var54 = (1 + <sum_1030@77:0>)) && ((1 + <sum_1030@77:0>) > 0))
          |- P[<sum_1030@77:0>](<sum_1030@77:0>:int)
          
          P[<sum_1030@71:0>](var55:int), ((var55 = (1 + <sum_1030@74:0>)) && ((1 + <sum_1030@74:0>) > 0))
          |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1170_sep_97_sep_0($238)) -> 1=0.
(($238-1=0) & (3$239-$240-3>0)) & (v_sep_sum_1030_sep_71_sep_1_sep_92_sep_0($239,$240)) -> v_sep_fail_1170_sep_97_sep_0($238).
(($241>0) & (-$241+$242+1=0) & ($241+$243-$244=0)) & (v_sep_sum_1030_sep_74_sep_1_sep_86_sep_0($242,$243)) & (v_sep_sum_1030_sep_71_sep_0($241)) -> v_sep_sum_1030_sep_71_sep_1_sep_92_sep_0($241,$244).
(($245>0) & (-$245+$246+1=0) & ($245+$247-$248=0)) & (v_sep_sum_1030_sep_77_sep_1_sep_80_sep_0($246,$247)) & (v_sep_sum_1030_sep_74_sep_0($245)) -> v_sep_sum_1030_sep_74_sep_1_sep_86_sep_0($245,$248).
(($249=0) & ($250<=0)) & (v_sep_sum_1030_sep_77_sep_0($250)) -> v_sep_sum_1030_sep_77_sep_1_sep_80_sep_0($250,$249).
(($250+1>0) & (-$250+$251-1=0)) & (v_sep_sum_1030_sep_74_sep_0($251)) -> v_sep_sum_1030_sep_77_sep_0($250).
(($245+1>0) & (-$245+$252-1=0)) & (v_sep_sum_1030_sep_71_sep_0($252)) -> v_sep_sum_1030_sep_74_sep_0($245).
0=0 -> v_sep_sum_1030_sep_71_sep_0($241).


v_sep_fail_1170_sep_97_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_92_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_86_sep_0: X
v_sep_sum_1030_sep_77_sep_0: X
v_sep_sum_1030_sep_77_sep_1_sep_80_sep_0: X
..........
v_sep_fail_1170_sep_97_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_92_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_86_sep_0: X
v_sep_sum_1030_sep_77_sep_0: X
v_sep_sum_1030_sep_77_sep_1_sep_80_sep_0: X
...
v_sep_fail_1170_sep_97_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_92_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_86_sep_0: X
v_sep_sum_1030_sep_77_sep_0: X
v_sep_sum_1030_sep_77_sep_1_sep_80_sep_0: X
.....
v_sep_fail_1170_sep_97_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_92_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_86_sep_0: X
v_sep_sum_1030_sep_77_sep_0: X
v_sep_sum_1030_sep_77_sep_1_sep_80_sep_0: X
.......
v_sep_fail_1170_sep_97_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_92_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_86_sep_0: X
v_sep_sum_1030_sep_77_sep_0: X
v_sep_sum_1030_sep_77_sep_1_sep_80_sep_0: X
.........
v_sep_fail_1170_sep_97_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_92_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_86_sep_0: X
v_sep_sum_1030_sep_77_sep_0: X
v_sep_sum_1030_sep_77_sep_1_sep_80_sep_0: X
..........(0=0) & (v_sep_fail_1170_sep_97_sep_0($238)) -> 1=0.
(($238-1=0) & (3$239-$240-3>0)) & (v_sep_sum_1030_sep_71_sep_1_sep_92_sep_0($239,$240)) -> v_sep_fail_1170_sep_97_sep_0($238).
(($241>0) & (-$241+$242+1=0) & ($241+$243-$244=0)) & (v_sep_sum_1030_sep_74_sep_1_sep_86_sep_0($242,$243)) & (v_sep_sum_1030_sep_71_sep_0($241)) -> v_sep_sum_1030_sep_71_sep_1_sep_92_sep_0($241,$244).
(($245>0) & (-$245+$246+1=0) & ($245+$247-$248=0)) & (v_sep_sum_1030_sep_77_sep_1_sep_80_sep_0($246,$247)) & (v_sep_sum_1030_sep_74_sep_0($245)) -> v_sep_sum_1030_sep_74_sep_1_sep_86_sep_0($245,$248).
(($249=0) & ($250<=0)) & (v_sep_sum_1030_sep_77_sep_0($250)) -> v_sep_sum_1030_sep_77_sep_1_sep_80_sep_0($250,$249).
(($250+1>0) & (-$250+$251-1=0)) & (v_sep_sum_1030_sep_74_sep_0($251)) -> v_sep_sum_1030_sep_77_sep_0($250).
(($245+1>0) & (-$245+$252-1=0)) & (v_sep_sum_1030_sep_71_sep_0($252)) -> v_sep_sum_1030_sep_74_sep_0($245).
0=0 -> v_sep_sum_1030_sep_71_sep_0($241).

          |- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
        solution:
          P[<fail_1170@97:0>]($253:bool) = false
          P[<sum_1030@71:0>]($266:int) = true
          P[<<sum_1030@71:1>@92:0>]($256:int,$258:int) = ((3 * $256) <= (3 + $258))
          P[<sum_1030@74:0>]($274:int) = true
          P[<<sum_1030@74:1>@86:0>]($261:int,$263:int) = ((2 * $261) <= (1 + $263))
          P[<sum_1030@77:0>]($277:int) = true
          P[<<sum_1030@77:1>@80:0>]($269:int,$271:int) = ($269 <= $271)
        
      end HcSolver.solve_ub(8914)[4] (0.031995 sec.)
      begin HcSolver.check_validity(9338)[4]
        input:
          P[<fail_1170@97:0>](<fail_1170@97:0>:bool)|- bot
          
          P[<<sum_1030@71:1>@92:0>](<f_main_1167@94:0>:int,<f_main_1167@94:2>:int),
          (((3 * <f_main_1167@94:0>) > (3 + <f_main_1167@94:2>)) && <fail_1170@97:0>)
          |- P[<fail_1170@97:0>](<fail_1170@97:0>:bool)
          
          P[<sum_1030@71:0>](<sum_1030@71:0>:int),
          P[<<sum_1030@74:1>@86:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@92:0> + (-1 * <sum_1030@71:0>)):int),
          (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@92:0>](<sum_1030@71:0>:int,
                                                             <<sum_1030@71:1>@92:0>:int)
          
          P[<sum_1030@74:0>](<sum_1030@74:0>:int),
          P[<<sum_1030@77:1>@80:0>]((-1 + <sum_1030@74:0>):int,(<<sum_1030@74:1>@86:0> + (-1 * <sum_1030@74:0>)):int),
          (<sum_1030@74:0> > 0) |- P[<<sum_1030@74:1>@86:0>](<sum_1030@74:0>:int,
                                                             <<sum_1030@74:1>@86:0>:int)
          
          P[<sum_1030@77:0>](<sum_1030@77:0>:int), ((<<sum_1030@77:1>@80:0> = 0) && (<sum_1030@77:0> <= 0))
          |- P[<<sum_1030@77:1>@80:0>](<sum_1030@77:0>:int,<<sum_1030@77:1>@80:0>:int)
          
          P[<sum_1030@74:0>]((1 + <sum_1030@77:0>):int), ((1 + <sum_1030@77:0>) > 0)
          |- P[<sum_1030@77:0>](<sum_1030@77:0>:int)
          
          P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
          |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
          
          |- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(9338)[4] (0.003999 sec.)
      solution:
        P[<fail_1170@97:0>]($253:bool) = false
        P[<sum_1030@71:0>]($266:int) = true
        P[<<sum_1030@71:1>@92:0>]($256:int,$258:int) = ((3 * $256) <= (3 + $258))
        P[<sum_1030@74:0>]($274:int) = true
        P[<<sum_1030@74:1>@86:0>]($261:int,$263:int) = ((2 * $261) <= (1 + $263))
        P[<sum_1030@77:0>]($277:int) = true
        P[<<sum_1030@77:1>@80:0>]($269:int,$271:int) = ($269 <= $271)
    end YhornInterface.solve(8913)[3] (0.035994 sec.)
    
  end RefTypeInfer.infer_etrs(6753)[2] (0.254960 sec.)
  refinement types:
    main_1165: X
    f_1168: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | ((3 * v1) <= (3 + v2))} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | ((2 * v1) <= (1 + v2))} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (v1 <= v2)} -> X) -> X
    f_sum_1166: v1:int -> (v2:int -> X) -> v4:int -> X
    f_sum_1166: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1167: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1170: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1169: var64:int -> var63:unit -> X
  abstraction types:
    main_1165: X
    f_1168: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    sum_1030: var69:int ->
              (var70:int[var70 -> ((3 * var69) <= (3 + var70)),
                         var70 -> ((2 * var69) <= (1 + var70)),
                         var70 -> (var69 <= var70)] -> X) -> X
    f_sum_1166: var73:int -> (var74:int -> X) -> var76:int -> X
    f_main_1167: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1170: v1:bool -> (v2:unit -> X) -> X
    f_1169: var64:int -> var63:unit -> X
  
end AbsTypeInfer.refine(6752)[1] (0.261960 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1165
  main_1165 -> (rand_int f_1168)
  f_1168 x_1140 -> (main_1032 x_1140 (f_1169 x_1140))
  f_1169 x_1140 x_1137 -> end
  f_main_1167 n_1033 k_main_1109 x_1113 when (((3 * n_1033) - 3) <= x_1113) -> (k_main_1109 ())
  f_main_1167 n_1033 k_main_1109 x_1113 when (not (((3 * n_1033) - 3) <= x_1113)) -> (fail_1170 true k_main_1109)
  f_sum_1166 n_1031 k_sum_1077 x_1081 -> (k_sum_1077 (n_1031 + x_1081))
  fail_1170 b k -> {fail} => (k ())
  main_1032 n_1033 k_main_1109 -> (sum_1030 n_1033 (f_main_1167 n_1033 k_main_1109))
  sum_1030 n_1031 k_sum_1077 when (n_1031 <= 0) -> (k_sum_1077 0)
  sum_1030 n_1031 k_sum_1077 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1166 n_1031 k_sum_1077))
Types:
  main_1165 : X
  fail_1170 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (x_1:int ->
              (x_3:int[x_1 <= x_3; 2*x_1 <= x_3 + 1; 3*x_1 <= x_3 + 3; 2*x_1 <= x_3; 3*x_1 <= x_3 + 2; 3*x_1 <= x_3] -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  sum: ((x_1:int -> {x_2:int | 3 * x_1 <= x_2 + 3}) /\ 
        (x_3:int ->
             ({x_4:int | (2 * x_3 <= x_4 + 1 && 2 * x_3 <= x_4) && x_3 <= x_4} \/ 
              {x_5:int | ((2 * x_3 <= x_5 + 1 && 3 * x_3 <= x_5) && 2 * x_3 > x_5) && x_3 <= x_5} \/ 
              {x_6:int | ((2 * x_3 <= x_6 + 1 && 3 * x_3 > x_6) && 2 * x_3 > x_6) && x_3 <= x_6})))

cycles: 4
total: 2.462 sec
  abst: 0.089 sec
  mc: 0.213 sec
  refine: 0.640 sec
    exparam: 0.438 sec
