MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn array_max.ml

parsed::
 let make_array_1030 n_1031 i_1032 =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     i_1032 
 in
 let rec array_max_1033 n_1034 i_1035 a_1036 =
   if i_1035 >= n_1034 then
     0
   else
     let x_1037 = a_1036 i_1035 
     in
     let y_1038 = array_max_1033 n_1034 (i_1035 + 1) a_1036 
     in
       if x_1037 > y_1038 then
         x_1037
       else
         y_1038 
 in
 let rec check_1039 n_1040 i_1041 max_1042 a_1043 =
   if i_1041 >= n_1040 then
     ()
   else
     let u_1126 = if a_1043 i_1041 <= max_1042 then
                    ()
                  else
                    {fail} () 
     in
       check_1039 n_1040 (i_1041 + 1) max_1042 a_1043 
 in
 let main_1044 n_1045 =
   let array_1046 = make_array_1030 n_1045 
   in
   let max_1047 = array_max_1033 n_1045 0 array_1046 
   in
     check_1039 n_1045 0 max_1047 array_1046 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     i_1032 
 in
 let rec array_max_1033 n_1034 i_1035 a_1036 =
   if i_1035 >= n_1034 then
     0
   else
     let x_1037 = a_1036 i_1035 
     in
     let y_1038 = array_max_1033 n_1034 (i_1035 + 1) a_1036 
     in
       if x_1037 > y_1038 then
         x_1037
       else
         y_1038 
 in
 let rec check_1039 n_1040 i_1041 max_1042 a_1043 =
   if i_1041 >= n_1040 then
     ()
   else
     let u_1126 = if a_1043 i_1041 <= max_1042 then
                    ()
                  else
                    {fail} () 
     in
       check_1039 n_1040 (i_1041 + 1) max_1042 a_1043 
 in
 let main_1044 n_1045 =
   let array_1046 = make_array_1030 n_1045 
   in
   let max_1047 = array_max_1033 n_1045 0 array_1046 
   in
     check_1039 n_1045 0 max_1047 array_1046 
 in
 let main_1147 = let arg1_1146 = rand_int () 
                 in
                   main_1044 arg1_1146 
 in
   ()

copy_poly::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     i_1032 
 in
 let rec array_max_1033 (n_1034:int) (i_1035:int) (a_1036:(int -> int)) =
   if i_1035 >= n_1034 then
     0
   else
     let x_1037 = a_1036 i_1035 
     in
     let y_1038 = array_max_1033 n_1034 (i_1035 + 1) a_1036 
     in
       if x_1037 > y_1038 then
         x_1037
       else
         y_1038 
 in
 let rec check_1148 (n_1040:int) (i_1041:int) (max_1042:int) (a_1043:(
   int -> int)) =
   if i_1041 >= n_1040 then
     ()
   else
     let u_1126 = if a_1043 i_1041 <= max_1042 then
                    ()
                  else
                    {fail} () 
     in
       check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 
 in
 let main_1044 (n_1045:int) =
   let array_1046 = make_array_1030 n_1045 
   in
   let max_1047 = array_max_1033 n_1045 0 array_1046 
   in
     check_1148 n_1045 0 max_1047 array_1046 
 in
 let main_1147 = let arg1_1146 = rand_int () 
                 in
                   main_1044 arg1_1146 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1176:(int -> X)) =
   let k_make_array_u_1193 (x_1179:unit) = k_make_array_1176 i_1032 
   in
   let k_make_array_u_1182 (b_1194:bool) =
     if b_1194 then
       k_make_array_u_1193 ()
     else
       {|fail|} () k_make_array_u_1193 
   in
     if 0 <= i_1032 then
       k_make_array_u_1182 (i_1032 < n_1031)
     else
       k_make_array_u_1182 false 
 in
 let rec array_max_1033 (n_1034:int) (i_1035:int) (a_1036:(int -> ((int -> X) -> X))) (k_array_max_1226:(
   int -> X)) =
   if i_1035 >= n_1034 then
     k_array_max_1226 0
   else
     a_1036 i_1035
       (fun x_1229 ->
          array_max_1033 n_1034 (i_1035 + 1) a_1036
            (fun x_1242 -> (if x_1229 > x_1242 then
                              k_array_max_1226 x_1229
                            else
                              k_array_max_1226 x_1242))) 
 in
 let rec check_1148
   (n_1040:int) (i_1041:int) (max_1042:int) (a_1043:(int -> ((int -> X) -> X))) (k_check_1309:(
   unit -> X)) =
   if i_1041 >= n_1040 then
     k_check_1309 ()
   else
     let k_check_u_1336 (x_1312:unit) = check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 k_check_1309 
     in
       a_1043 i_1041 (fun x_1315 -> (if x_1315 <= max_1042 then
                                       k_check_u_1336 ()
                                     else
                                       {|fail|} () k_check_u_1336)) 
 in
 let main_1044 (n_1045:int) (k_main_1380:(unit -> X)) =
   array_max_1033 n_1045 0 (make_array_1030 n_1045)
     (fun x_1399 -> check_1148 n_1045 0 x_1399 (make_array_1030 n_1045) k_main_1380) 
 in
   rand_int_cps () (fun x_1454 -> main_1044 x_1454 (fun x_1451 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1479
  main_1479 -> (rand_int f_1484)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (i_1035 >= n_1034) -> (k_array_max_1226 0)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (not (i_1035 >= n_1034)) ->
      (a_1036 i_1035 (f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226))
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (i_1041 >= n_1040) -> (k_check_1309 ())
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (not (i_1041 >= n_1040)) ->
      (a_1043 i_1041 (f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_1484 x_1454 -> (main_1044 x_1454 (f_1485 x_1454))
  f_1485 x_1454 x_1451 -> end
  f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 ->
      (array_max_1033 n_1034 (i_1035 + 1) a_1036 (f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226))
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (x_1229 > x_1242) -> (k_array_max_1226 x_1229)
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (
      not (x_1229 > x_1242)) -> (k_array_max_1226 x_1242)
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      x_1315 <= max_1042) -> (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 ())
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      not (x_1315 <= max_1042)) -> (fail_1487 true (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_main_1483 n_1045 k_main_1380 x_1399 -> (check_1148 n_1045 0 x_1399 (make_array_1030 n_1045) k_main_1380)
  fail_1486 b k -> {fail} => (k ())
  fail_1487 b k -> {fail} => (k ())
  k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 ->
      (check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 k_check_1309)
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when b_1194 ->
      (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 ())
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when (not b_1194) ->
      (fail_1486 true (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176))
  k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 -> (k_make_array_1176 i_1032)
  main_1044 n_1045 k_main_1380 -> (array_max_1033 n_1045 0 (make_array_1030 n_1045) (f_main_1483 n_1045 k_main_1380))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (0 <= i_1032) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (not (0 <= i_1032)) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 false)
Types:
  main_1479 : X
  array_max_1033 : (int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X)
  check_1148 : (int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> X)
  fail_1486 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1487 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_array_1030 : (int -> int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1479 ... --> 
  f_1484 ... --> 
  main_1044 ... --> 
  array_max_1033 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1182 [2/2] ... --> 
  fail_1486 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(213)[1]
  program:
    main_1479  | true = ((Random.int 0) f_1484)
    array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 | (i_1035 >= n_1034) = (
    k_array_max_1226 0)
    array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 | (not (i_1035 >= n_1034)) = (
    a_1036 i_1035
           (f_array_max_1480 i_1035
                             n_1034
                             a_1036
                             k_array_max_1226))
    check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 | (i_1041 >= n_1040) = (
    k_check_1309 ())
    check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 | (not (i_1041 >= n_1040)) = (
    a_1043 i_1041
           (f_check_1482 i_1041
                         max_1042
                         n_1040
                         a_1043
                         k_check_1309))
    f_1484 x_1454 | true = (main_1044 x_1454
                                      (f_1485 x_1454))
    f_1485 x_1454 x_1451 | true = end
    f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 | true = (
    array_max_1033 n_1034
                   (i_1035 + 1)
                   a_1036
                   (f_array_max_1481 i_1035
                                     n_1034
                                     x_1229
                                     k_array_max_1226))
    f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 | (
    x_1229 > x_1242) = (k_array_max_1226 x_1229)
    f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 | (
    not (x_1229 > x_1242)) = (k_array_max_1226 x_1242)
    f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 | (
    x_1315 <= max_1042) = (k_check_u_1336 i_1041
                                          max_1042
                                          n_1040
                                          a_1043
                                          k_check_1309
                                          ())
    f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 | (
    not (x_1315 <= max_1042)) = (fail_1487 true
                                           (k_check_u_1336 i_1041
                                                           max_1042
                                                           n_1040
                                                           a_1043
                                                           k_check_1309))
    f_main_1483 n_1045 k_main_1380 x_1399 | true = (check_1148 n_1045
                                                               0
                                                               x_1399
                                                               (make_array_1030 n_1045)
                                                               k_main_1380)
    fail_1486 b k | true = (fail ())
    fail_1487 b k | true = (fail ())
    k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 | true = (
    check_1148 n_1040
               (i_1041 + 1)
               max_1042
               a_1043
               k_check_1309)
    k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 | b_1194 = (
    k_make_array_u_1193 i_1032
                        n_1031
                        k_make_array_1176
                        ())
    k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 | (not b_1194) = (
    fail_1486 true
              (k_make_array_u_1193 i_1032
                                   n_1031
                                   k_make_array_1176))
    k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 | true = (
    k_make_array_1176 i_1032)
    main_1044 n_1045 k_main_1380 | true = (array_max_1033
                                             n_1045
                                             0
                                             (make_array_1030 n_1045)
                                             (f_main_1483 n_1045
                                                          k_main_1380))
    make_array_1030 n_1031 i_1032 k_make_array_1176 | (0 <= i_1032) = (
    k_make_array_u_1182 i_1032
                        n_1031
                        k_make_array_1176
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1176 | (not (0 <= i_1032)) = (
    k_make_array_u_1182 i_1032
                        n_1031
                        k_make_array_1176
                        false)
    main_1479:X
    array_max_1033:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    check_1148:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> X
    f_1484:int -> X
    f_1485:int -> unit -> X
    f_array_max_1480:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_array_max_1481:int -> int -> int -> (int -> X) -> int -> X
    f_check_1482:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> int -> X
    f_main_1483:int -> (unit -> X) -> int -> X
    fail_1486:bool -> (unit -> X) -> X
    fail_1487:bool -> (unit -> X) -> X
    k_check_u_1336:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> unit -> X
    k_make_array_u_1182:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1193:int -> int -> (int -> X) -> unit -> X
    main_1044:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1484,f_1485,f_array_max_1480,f_array_max_1481,f_check_1482,f_main_1483,k_check_u_1336,k_make_array_u_1182,k_make_array_u_1193,main_1044
  counterexample: 0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1484@4:0> = var2)
     [true.(<main_1044@6:0> = <f_1484@4:0>)
      [true.((<array_max_1033@8:0> = <main_1044@6:0>) && (<array_max_1033@8:1> = 0))
       [(not (<array_max_1033@8:1> >= <array_max_1033@8:0>)).(<<array_max_1033@8:2>@11:0> = <array_max_1033@8:1>)
        [true.((<make_array_1030@13:0> = <main_1044@6:0>) && (<make_array_1030@13:1> = <<array_max_1033@8:2>@11:0>))
         [(not (0 <= <make_array_1030@13:1>)).
          ((<k_make_array_u_1182@16:0> = <make_array_1030@13:1>) &&
           ((<k_make_array_u_1182@16:1> = <make_array_1030@13:0>) && (<k_make_array_u_1182@16:3> = false)))
          [(not <k_make_array_u_1182@16:3>).(<fail_1486@19:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(214)[2]
    horn clauses:
      P[<fail_1486@19:0>](<fail_1486@19:0>:bool)|- bot
      
      P[<k_make_array_u_1182@16:3>](<k_make_array_u_1182@16:0>:int,<k_make_array_u_1182@16:1>:int,false:bool),
      <fail_1486@19:0> |- P[<fail_1486@19:0>](<fail_1486@19:0>:bool)
      
      P[<make_array_1030@13:1>](<k_make_array_u_1182@16:1>:int,<k_make_array_u_1182@16:0>:int),
      ((0 > <k_make_array_u_1182@16:0>) && (not <k_make_array_u_1182@16:3>))
      |- P[<k_make_array_u_1182@16:3>](<k_make_array_u_1182@16:0>:int,
                                       <k_make_array_u_1182@16:1>:int,
                                       <k_make_array_u_1182@16:3>:bool)
      
      P[<main_1044@6:0>](<make_array_1030@13:0>:int),
      P[<<array_max_1033@8:2>@11:0>](<make_array_1030@13:0>:int,0:int,<make_array_1030@13:1>:int)|- P[<make_array_1030@13:1>](
      <make_array_1030@13:0>:int,<make_array_1030@13:1>:int)
      
      P[<array_max_1033@8:1>](<array_max_1033@8:0>:int,<array_max_1033@8:1>:int),
      ((<array_max_1033@8:1> < <array_max_1033@8:0>) && (<<array_max_1033@8:2>@11:0> = <array_max_1033@8:1>))
      |- P[<<array_max_1033@8:2>@11:0>](<array_max_1033@8:0>:int,<array_max_1033@8:1>:int,
                                        <<array_max_1033@8:2>@11:0>:int)
      
      P[<main_1044@6:0>](<array_max_1033@8:0>:int), (<array_max_1033@8:1> = 0)
      |- P[<array_max_1033@8:1>](<array_max_1033@8:0>:int,<array_max_1033@8:1>:int)
      
      P[<f_1484@4:0>](<main_1044@6:0>:int)|- P[<main_1044@6:0>](<main_1044@6:0>:int)
      
      |- P[<f_1484@4:0>](<f_1484@4:0>:int)
    call trees:
      <main_1479@1>
        <f_1484@4>
          <main_1044@6>
            <array_max_1033@8>
            </<array_max_1033@8:2>@11>
            <make_array_1030@13>
              <k_make_array_u_1182@16>
                <fail_1486@19>
    inlined horn clauses:
      P[<fail_1486@19:0>](<fail_1486@19:0>:bool)|- bot
      
      P[<make_array_1030@13:1>](<k_make_array_u_1182@16:1>:int,<k_make_array_u_1182@16:0>:int),
      ((0 > <k_make_array_u_1182@16:0>) && <fail_1486@19:0>) |- P[<fail_1486@19:0>](
      <fail_1486@19:0>:bool)
      
      P[<<array_max_1033@8:2>@11:0>](<make_array_1030@13:0>:int,0:int,<make_array_1030@13:1>:int)|- P[<make_array_1030@13:1>](
      <make_array_1030@13:0>:int,<make_array_1030@13:1>:int)
      
      P[<array_max_1033@8:1>](<array_max_1033@8:0>:int,<array_max_1033@8:1>:int),
      ((<array_max_1033@8:1> < <array_max_1033@8:0>) && (<<array_max_1033@8:2>@11:0> = <array_max_1033@8:1>))
      |- P[<<array_max_1033@8:2>@11:0>](<array_max_1033@8:0>:int,<array_max_1033@8:1>:int,
                                        <<array_max_1033@8:2>@11:0>:int)
      
       (<array_max_1033@8:1> = 0) |- P[<array_max_1033@8:1>](<array_max_1033@8:0>:int,
                                                             <array_max_1033@8:1>:int)
    begin ParamSubstInfer.infer(1262)[3]
      
    end ParamSubstInfer.infer(1262)[3] (0.028995 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1264)[3]
      
    end RefTypeInfer.elim_coeffs(1264)[3] (0.000000 sec.)
    begin YhornInterface.solve(1462)[3]
      begin HcSolver.solve_ub(1463)[4]
        encoded:
          P[<fail_1486@19:0>](<fail_1486@19:0>:int)|- bot
          
          P[<make_array_1030@13:1>](<k_make_array_u_1182@16:1>:int,<k_make_array_u_1182@16:0>:int),
          ((0 > <k_make_array_u_1182@16:0>) && (<fail_1486@19:0> = 1)) |- P[<fail_1486@19:0>](
          <fail_1486@19:0>:int)
          
          P[<<array_max_1033@8:2>@11:0>](<make_array_1030@13:0>:int,0:int,<make_array_1030@13:1>:int)|- P[<make_array_1030@13:1>](
          <make_array_1030@13:0>:int,<make_array_1030@13:1>:int)
          
          P[<array_max_1033@8:1>](<array_max_1033@8:0>:int,<array_max_1033@8:1>:int),
          ((<array_max_1033@8:1> < <array_max_1033@8:0>) && (<<array_max_1033@8:2>@11:0> = <array_max_1033@8:1>))
          |- P[<<array_max_1033@8:2>@11:0>](<array_max_1033@8:0>:int,
                                            <array_max_1033@8:1>:int,
                                            <<array_max_1033@8:2>@11:0>:int)
          
           (<array_max_1033@8:1> = 0) |- P[<array_max_1033@8:1>](<array_max_1033@8:0>:int,
                                                                 <array_max_1033@8:1>:int)
        input to Yhorn:
          P[<fail_1486@19:0>](<fail_1486@19:0>:int)|- bot
          
          P[<make_array_1030@13:1>](<k_make_array_u_1182@16:1>:int,<k_make_array_u_1182@16:0>:int),
          ((0 > <k_make_array_u_1182@16:0>) && (<fail_1486@19:0> = 1)) |- P[<fail_1486@19:0>](
          <fail_1486@19:0>:int)
          
          P[<<array_max_1033@8:2>@11:0>](<make_array_1030@13:0>:int,var3:int,<make_array_1030@13:1>:int), (
          var3 = 0) |- P[<make_array_1030@13:1>](<make_array_1030@13:0>:int,
                                                 <make_array_1030@13:1>:int)
          
          P[<array_max_1033@8:1>](<array_max_1033@8:0>:int,<array_max_1033@8:1>:int),
          ((<<array_max_1033@8:2>@11:0> = <array_max_1033@8:1>) && (<array_max_1033@8:1> < <array_max_1033@8:0>))
          |- P[<<array_max_1033@8:2>@11:0>](<array_max_1033@8:0>:int,
                                            <array_max_1033@8:1>:int,
                                            <<array_max_1033@8:2>@11:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1486_sep_19_sep_0($10)) -> 1=0.
(($10-1=0) & (-$11>0)) & (v_sep_make_array_1030_sep_13_sep_1($12,$11)) -> v_sep_fail_1486_sep_19_sep_0($10).
($13=0) & (v_sep_array_max_1033_sep_8_sep_2_sep_11_sep_0($14,$13,$15)) -> v_sep_make_array_1030_sep_13_sep_1($14,$15).
(($16-$17<0) & (-$16+$18=0)) & (v_sep_array_max_1033_sep_8_sep_1($17,$16)) -> v_sep_array_max_1033_sep_8_sep_2_sep_11_sep_0($17,$16,$18).
$16=0 -> v_sep_array_max_1033_sep_8_sep_1($17,$16).


v_sep_array_max_1033_sep_8_sep_1: X
v_sep_array_max_1033_sep_8_sep_2_sep_11_sep_0: X
v_sep_fail_1486_sep_19_sep_0: X
v_sep_make_array_1030_sep_13_sep_1: X
.....
v_sep_array_max_1033_sep_8_sep_1: X
v_sep_array_max_1033_sep_8_sep_2_sep_11_sep_0: X
v_sep_fail_1486_sep_19_sep_0: X
v_sep_make_array_1030_sep_13_sep_1: X
...
v_sep_array_max_1033_sep_8_sep_1: X
v_sep_array_max_1033_sep_8_sep_2_sep_11_sep_0: X
v_sep_fail_1486_sep_19_sep_0: X
v_sep_make_array_1030_sep_13_sep_1: X
....
v_sep_array_max_1033_sep_8_sep_1: X
v_sep_array_max_1033_sep_8_sep_2_sep_11_sep_0: X
v_sep_fail_1486_sep_19_sep_0: X
v_sep_make_array_1030_sep_13_sep_1: X
.....
v_sep_array_max_1033_sep_8_sep_1: X
v_sep_array_max_1033_sep_8_sep_2_sep_11_sep_0: X
v_sep_fail_1486_sep_19_sep_0: X
v_sep_make_array_1030_sep_13_sep_1: X
.....(0=0) & (v_sep_fail_1486_sep_19_sep_0($10)) -> 1=0.
(($10-1=0) & (-$11>0)) & (v_sep_make_array_1030_sep_13_sep_1($12,$11)) -> v_sep_fail_1486_sep_19_sep_0($10).
($13=0) & (v_sep_array_max_1033_sep_8_sep_2_sep_11_sep_0($14,$13,$15)) -> v_sep_make_array_1030_sep_13_sep_1($14,$15).
(($16-$17<0) & (-$16+$18=0)) & (v_sep_array_max_1033_sep_8_sep_1($17,$16)) -> v_sep_array_max_1033_sep_8_sep_2_sep_11_sep_0($17,$16,$18).
$16=0 -> v_sep_array_max_1033_sep_8_sep_1($17,$16).

           (<array_max_1033@8:1> = 0) |- P[<array_max_1033@8:1>](<array_max_1033@8:0>:int,
                                                                 <array_max_1033@8:1>:int)
        solution:
          P[<array_max_1033@8:1>]($34:int,$36:int) = true
          P[<<array_max_1033@8:2>@11:0>]($27:int,$29:int,$31:int) = ($29 <= $31)
          P[<fail_1486@19:0>]($19:bool) = false
          P[<make_array_1030@13:1>]($22:int,$24:int) = (0 <= $24)
        
      end HcSolver.solve_ub(1463)[4] (0.014998 sec.)
      begin HcSolver.check_validity(1602)[4]
        input:
          P[<fail_1486@19:0>](<fail_1486@19:0>:bool)|- bot
          
          P[<make_array_1030@13:1>](<k_make_array_u_1182@16:1>:int,<k_make_array_u_1182@16:0>:int),
          ((0 > <k_make_array_u_1182@16:0>) && <fail_1486@19:0>) |- P[<fail_1486@19:0>](
          <fail_1486@19:0>:bool)
          
          P[<<array_max_1033@8:2>@11:0>](<make_array_1030@13:0>:int,0:int,<make_array_1030@13:1>:int)|- P[<make_array_1030@13:1>](
          <make_array_1030@13:0>:int,<make_array_1030@13:1>:int)
          
          P[<array_max_1033@8:1>](<array_max_1033@8:0>:int,<array_max_1033@8:1>:int),
          ((<array_max_1033@8:1> < <array_max_1033@8:0>) && (<<array_max_1033@8:2>@11:0> = <array_max_1033@8:1>))
          |- P[<<array_max_1033@8:2>@11:0>](<array_max_1033@8:0>:int,
                                            <array_max_1033@8:1>:int,
                                            <<array_max_1033@8:2>@11:0>:int)
          
           (<array_max_1033@8:1> = 0) |- P[<array_max_1033@8:1>](<array_max_1033@8:0>:int,
                                                                 <array_max_1033@8:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1602)[4] (0.000000 sec.)
      solution:
        P[<array_max_1033@8:1>]($34:int,$36:int) = true
        P[<<array_max_1033@8:2>@11:0>]($27:int,$29:int,$31:int) = ($29 <= $31)
        P[<fail_1486@19:0>]($19:bool) = false
        P[<make_array_1030@13:1>]($22:int,$24:int) = (0 <= $24)
    end YhornInterface.solve(1462)[3] (0.015998 sec.)
    
  end RefTypeInfer.infer_etrs(214)[2] (0.049992 sec.)
  refinement types:
    main_1479: X
    f_1484: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    array_max_1033: v1:int -> v2:int -> (v3:{v3:int | (v2 <= v3)} -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    make_array_1030: v1:int -> v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X
    k_make_array_u_1182: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1486: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    check_1148: var25:int -> var24:int -> var23:int -> (var22:int -> (var21:int -> X) -> X) -> (var18:unit -> X) -> X
    f_1485: var28:int -> var27:unit -> X
    f_array_max_1480: var38:int ->
                      var37:int -> (var36:int -> (var35:int -> X) -> X) -> (var32:int -> X) -> var30:int -> X
    f_array_max_1481: var45:int -> var44:int -> var43:int -> (var42:int -> X) -> var40:int -> X
    f_check_1482: var56:int ->
                  var55:int -> var54:int -> (var53:int -> (var52:int -> X) -> X) -> (var49:unit -> X) -> var47:int -> X
    f_main_1483: var61:int -> (var60:unit -> X) -> var58:int -> X
    fail_1487: var65:bool -> (var64:unit -> X) -> X
    k_check_u_1336: var76:int ->
                    var75:int ->
                    var74:int -> (var73:int -> (var72:int -> X) -> X) -> (var69:unit -> X) -> var67:unit -> X
    k_make_array_u_1193: var82:int -> var81:int -> (var80:int -> X) -> var78:unit -> X
  abstraction types:
    main_1479: X
    f_1484: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    array_max_1033: v1:int -> v2:int -> (v3:int[v3 -> (v2 <= v3)] -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    make_array_1030: v1:int -> v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X
    k_make_array_u_1182: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1486: v1:bool -> (v2:unit -> X) -> X
    check_1148: var25:int -> var24:int -> var23:int -> (var22:int -> (var21:int -> X) -> X) -> (var18:unit -> X) -> X
    f_1485: var28:int -> var27:unit -> X
    f_array_max_1480: var38:int ->
                      var37:int -> (var36:int -> (var35:int -> X) -> X) -> (var32:int -> X) -> var30:int -> X
    f_array_max_1481: var45:int -> var44:int -> var43:int -> (var42:int -> X) -> var40:int -> X
    f_check_1482: var56:int ->
                  var55:int -> var54:int -> (var53:int -> (var52:int -> X) -> X) -> (var49:unit -> X) -> var47:int -> X
    f_main_1483: var61:int -> (var60:unit -> X) -> var58:int -> X
    fail_1487: var65:bool -> (var64:unit -> X) -> X
    k_check_u_1336: var76:int ->
                    var75:int ->
                    var74:int -> (var73:int -> (var72:int -> X) -> X) -> (var69:unit -> X) -> var67:unit -> X
    k_make_array_u_1193: var82:int -> var81:int -> (var80:int -> X) -> var78:unit -> X
  
end AbsTypeInfer.refine(213)[1] (0.054991 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1479
  main_1479 -> (rand_int f_1484)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (i_1035 >= n_1034) -> (k_array_max_1226 0)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (not (i_1035 >= n_1034)) ->
      (a_1036 i_1035 (f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226))
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (i_1041 >= n_1040) -> (k_check_1309 ())
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (not (i_1041 >= n_1040)) ->
      (a_1043 i_1041 (f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_1484 x_1454 -> (main_1044 x_1454 (f_1485 x_1454))
  f_1485 x_1454 x_1451 -> end
  f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 ->
      (array_max_1033 n_1034 (i_1035 + 1) a_1036 (f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226))
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (x_1229 > x_1242) -> (k_array_max_1226 x_1229)
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (
      not (x_1229 > x_1242)) -> (k_array_max_1226 x_1242)
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      x_1315 <= max_1042) -> (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 ())
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      not (x_1315 <= max_1042)) -> (fail_1487 true (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_main_1483 n_1045 k_main_1380 x_1399 -> (check_1148 n_1045 0 x_1399 (make_array_1030 n_1045) k_main_1380)
  fail_1486 b k -> {fail} => (k ())
  fail_1487 b k -> {fail} => (k ())
  k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 ->
      (check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 k_check_1309)
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when b_1194 ->
      (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 ())
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when (not b_1194) ->
      (fail_1486 true (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176))
  k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 -> (k_make_array_1176 i_1032)
  main_1044 n_1045 k_main_1380 -> (array_max_1033 n_1045 0 (make_array_1030 n_1045) (f_main_1483 n_1045 k_main_1380))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (0 <= i_1032) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (not (0 <= i_1032)) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 false)
Types:
  main_1479 : X
  array_max_1033 : (int -> x_2:int -> (x_4:int[x_2 <= x_4] -> (int -> X) -> X) -> (int -> X) -> X)
  check_1148 : (int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> X)
  fail_1486 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1487 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_array_1030 : (int -> x_2:int[x_2 >= 0] -> (int -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1479 ... --> 
  f_1484 ... --> 
  main_1044 ... --> 
  array_max_1033 [1/2] ... --> 
  f_main_1483 ... --> 
  check_1148 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1182 [2/2] ... --> 
  fail_1486 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 1; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(2301)[1]
  program:
    main_1479  | true = ((Random.int 0) f_1484)
    array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 | (i_1035 >= n_1034) = (
    k_array_max_1226 0)
    array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 | (not (i_1035 >= n_1034)) = (
    a_1036 i_1035
           (f_array_max_1480 i_1035
                             n_1034
                             a_1036
                             k_array_max_1226))
    check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 | (i_1041 >= n_1040) = (
    k_check_1309 ())
    check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 | (not (i_1041 >= n_1040)) = (
    a_1043 i_1041
           (f_check_1482 i_1041
                         max_1042
                         n_1040
                         a_1043
                         k_check_1309))
    f_1484 x_1454 | true = (main_1044 x_1454
                                      (f_1485 x_1454))
    f_1485 x_1454 x_1451 | true = end
    f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 | true = (
    array_max_1033 n_1034
                   (i_1035 + 1)
                   a_1036
                   (f_array_max_1481 i_1035
                                     n_1034
                                     x_1229
                                     k_array_max_1226))
    f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 | (
    x_1229 > x_1242) = (k_array_max_1226 x_1229)
    f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 | (
    not (x_1229 > x_1242)) = (k_array_max_1226 x_1242)
    f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 | (
    x_1315 <= max_1042) = (k_check_u_1336 i_1041
                                          max_1042
                                          n_1040
                                          a_1043
                                          k_check_1309
                                          ())
    f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 | (
    not (x_1315 <= max_1042)) = (fail_1487 true
                                           (k_check_u_1336 i_1041
                                                           max_1042
                                                           n_1040
                                                           a_1043
                                                           k_check_1309))
    f_main_1483 n_1045 k_main_1380 x_1399 | true = (check_1148 n_1045
                                                               0
                                                               x_1399
                                                               (make_array_1030 n_1045)
                                                               k_main_1380)
    fail_1486 b k | true = (fail ())
    fail_1487 b k | true = (fail ())
    k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 | true = (
    check_1148 n_1040
               (i_1041 + 1)
               max_1042
               a_1043
               k_check_1309)
    k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 | b_1194 = (
    k_make_array_u_1193 i_1032
                        n_1031
                        k_make_array_1176
                        ())
    k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 | (not b_1194) = (
    fail_1486 true
              (k_make_array_u_1193 i_1032
                                   n_1031
                                   k_make_array_1176))
    k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 | true = (
    k_make_array_1176 i_1032)
    main_1044 n_1045 k_main_1380 | true = (array_max_1033
                                             n_1045
                                             0
                                             (make_array_1030 n_1045)
                                             (f_main_1483 n_1045
                                                          k_main_1380))
    make_array_1030 n_1031 i_1032 k_make_array_1176 | (0 <= i_1032) = (
    k_make_array_u_1182 i_1032
                        n_1031
                        k_make_array_1176
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1176 | (not (0 <= i_1032)) = (
    k_make_array_u_1182 i_1032
                        n_1031
                        k_make_array_1176
                        false)
    main_1479:X
    array_max_1033:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    check_1148:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> X
    f_1484:int -> X
    f_1485:int -> unit -> X
    f_array_max_1480:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_array_max_1481:int -> int -> int -> (int -> X) -> int -> X
    f_check_1482:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> int -> X
    f_main_1483:int -> (unit -> X) -> int -> X
    fail_1486:bool -> (unit -> X) -> X
    fail_1487:bool -> (unit -> X) -> X
    k_check_u_1336:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> unit -> X
    k_make_array_u_1182:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1193:int -> int -> (int -> X) -> unit -> X
    main_1044:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1484,f_1485,f_array_max_1480,f_array_max_1481,f_check_1482,f_main_1483,k_check_u_1336,k_make_array_u_1182,k_make_array_u_1193,main_1044
  counterexample: 0:0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1484@25:0> = var83)
     [true.(<main_1044@27:0> = <f_1484@25:0>)
      [true.((<array_max_1033@29:0> = <main_1044@27:0>) && (<array_max_1033@29:1> = 0))
       [(<array_max_1033@29:1> >= <array_max_1033@29:0>).(<<array_max_1033@29:3>@32:0> = 0)
        [true.((<f_main_1483@34:0> = <main_1044@27:0>) && (<f_main_1483@34:2> = <<array_max_1033@29:3>@32:0>))
         [true.
          ((<check_1148@36:0> = <f_main_1483@34:0>) &&
           ((<check_1148@36:1> = 0) && (<check_1148@36:2> = <f_main_1483@34:2>)))
          [(not (<check_1148@36:1> >= <check_1148@36:0>)).(<<check_1148@36:3>@39:0> = <check_1148@36:1>)
           [true.((<make_array_1030@41:0> = <f_main_1483@34:0>) && (<make_array_1030@41:1> = <<check_1148@36:3>@39:0>))
            [(not (0 <= <make_array_1030@41:1>)).
             ((<k_make_array_u_1182@44:0> = <make_array_1030@41:1>) &&
              ((<k_make_array_u_1182@44:1> = <make_array_1030@41:0>) && (<k_make_array_u_1182@44:3> = false)))
             [(not <k_make_array_u_1182@44:3>).(<fail_1486@47:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(2302)[2]
    horn clauses:
      P[<fail_1486@47:0>](<fail_1486@47:0>:bool)|- bot
      
      P[<k_make_array_u_1182@44:3>](<k_make_array_u_1182@44:0>:int,<k_make_array_u_1182@44:1>:int,false:bool),
      <fail_1486@47:0> |- P[<fail_1486@47:0>](<fail_1486@47:0>:bool)
      
      P[<make_array_1030@41:1>](<k_make_array_u_1182@44:1>:int,<k_make_array_u_1182@44:0>:int),
      ((0 > <k_make_array_u_1182@44:0>) && (not <k_make_array_u_1182@44:3>))
      |- P[<k_make_array_u_1182@44:3>](<k_make_array_u_1182@44:0>:int,
                                       <k_make_array_u_1182@44:1>:int,
                                       <k_make_array_u_1182@44:3>:bool)
      
      P[<f_main_1483@34:2>](<make_array_1030@41:0>:int,<check_1148@36:2>:int),
      P[<<check_1148@36:3>@39:0>](<make_array_1030@41:0>:int,0:int,<check_1148@36:2>:int,<make_array_1030@41:1>:int)|- P[<make_array_1030@41:1>](
      <make_array_1030@41:0>:int,<make_array_1030@41:1>:int)
      
      P[<check_1148@36:2>](<check_1148@36:0>:int,<check_1148@36:1>:int,<check_1148@36:2>:int),
      ((<check_1148@36:1> < <check_1148@36:0>) && (<<check_1148@36:3>@39:0> = <check_1148@36:1>))
      |- P[<<check_1148@36:3>@39:0>](<check_1148@36:0>:int,<check_1148@36:1>:int,
                                     <check_1148@36:2>:int,<<check_1148@36:3>@39:0>:int)
      
      P[<f_main_1483@34:2>](<check_1148@36:0>:int,<check_1148@36:2>:int), (
      <check_1148@36:1> = 0) |- P[<check_1148@36:2>](<check_1148@36:0>:int,
                                                     <check_1148@36:1>:int,
                                                     <check_1148@36:2>:int)
      
      P[<main_1044@27:0>](<f_main_1483@34:0>:int),
      P[<<array_max_1033@29:3>@32:0>](<f_main_1483@34:0>:int,0:int,<f_main_1483@34:2>:int)|- P[<f_main_1483@34:2>](
      <f_main_1483@34:0>:int,<f_main_1483@34:2>:int)
      
      P[<array_max_1033@29:1>](<array_max_1033@29:0>:int,<array_max_1033@29:1>:int),
      ((<<array_max_1033@29:3>@32:0> = 0) && (<array_max_1033@29:1> >= <array_max_1033@29:0>))
      |- P[<<array_max_1033@29:3>@32:0>](<array_max_1033@29:0>:int,<array_max_1033@29:1>:int,
                                         <<array_max_1033@29:3>@32:0>:int)
      
      P[<main_1044@27:0>](<array_max_1033@29:0>:int), (<array_max_1033@29:1> = 0)
      |- P[<array_max_1033@29:1>](<array_max_1033@29:0>:int,<array_max_1033@29:1>:int)
      
      P[<f_1484@25:0>](<main_1044@27:0>:int)|- P[<main_1044@27:0>](<main_1044@27:0>:int)
      
      |- P[<f_1484@25:0>](<f_1484@25:0>:int)
    call trees:
      <main_1479@22>
        <f_1484@25>
          <main_1044@27>
            <array_max_1033@29>
            </<array_max_1033@29:3>@32>
            <f_main_1483@34>
              <check_1148@36>
              </<check_1148@36:3>@39>
              <make_array_1030@41>
                <k_make_array_u_1182@44>
                  <fail_1486@47>
    inlined horn clauses:
      P[<fail_1486@47:0>](<fail_1486@47:0>:bool)|- bot
      
      P[<make_array_1030@41:1>](<k_make_array_u_1182@44:1>:int,<k_make_array_u_1182@44:0>:int),
      ((0 > <k_make_array_u_1182@44:0>) && <fail_1486@47:0>) |- P[<fail_1486@47:0>](
      <fail_1486@47:0>:bool)
      
      P[<<array_max_1033@29:3>@32:0>](<make_array_1030@41:0>:int,0:int,<check_1148@36:2>:int),
      P[<<check_1148@36:3>@39:0>](<make_array_1030@41:0>:int,0:int,<check_1148@36:2>:int,<make_array_1030@41:1>:int)|- P[<make_array_1030@41:1>](
      <make_array_1030@41:0>:int,<make_array_1030@41:1>:int)
      
      P[<check_1148@36:2>](<check_1148@36:0>:int,<check_1148@36:1>:int,<check_1148@36:2>:int),
      ((<check_1148@36:1> < <check_1148@36:0>) && (<<check_1148@36:3>@39:0> = <check_1148@36:1>))
      |- P[<<check_1148@36:3>@39:0>](<check_1148@36:0>:int,<check_1148@36:1>:int,
                                     <check_1148@36:2>:int,<<check_1148@36:3>@39:0>:int)
      
      P[<<array_max_1033@29:3>@32:0>](<check_1148@36:0>:int,0:int,<check_1148@36:2>:int), (
      <check_1148@36:1> = 0) |- P[<check_1148@36:2>](<check_1148@36:0>:int,
                                                     <check_1148@36:1>:int,
                                                     <check_1148@36:2>:int)
      
      P[<array_max_1033@29:1>](<array_max_1033@29:0>:int,<array_max_1033@29:1>:int),
      ((<<array_max_1033@29:3>@32:0> = 0) && (<array_max_1033@29:1> >= <array_max_1033@29:0>))
      |- P[<<array_max_1033@29:3>@32:0>](<array_max_1033@29:0>:int,<array_max_1033@29:1>:int,
                                         <<array_max_1033@29:3>@32:0>:int)
      
       (<array_max_1033@29:1> = 0) |- P[<array_max_1033@29:1>](<array_max_1033@29:0>:int,
                                                               <array_max_1033@29:1>:int)
    begin ParamSubstInfer.infer(3778)[3]
      
    end ParamSubstInfer.infer(3778)[3] (0.045993 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(3780)[3]
      
    end RefTypeInfer.elim_coeffs(3780)[3] (0.000000 sec.)
    begin YhornInterface.solve(4066)[3]
      begin HcSolver.solve_ub(4067)[4]
        encoded:
          P[<fail_1486@47:0>](<fail_1486@47:0>:int)|- bot
          
          P[<make_array_1030@41:1>](<k_make_array_u_1182@44:1>:int,<k_make_array_u_1182@44:0>:int),
          ((0 > <k_make_array_u_1182@44:0>) && (<fail_1486@47:0> = 1)) |- P[<fail_1486@47:0>](
          <fail_1486@47:0>:int)
          
          P[<<array_max_1033@29:3>@32:0>](<make_array_1030@41:0>:int,0:int,<check_1148@36:2>:int),
          P[<<check_1148@36:3>@39:0>](<make_array_1030@41:0>:int,0:int,<check_1148@36:2>:int,<make_array_1030@41:1>:int)|- P[<make_array_1030@41:1>](
          <make_array_1030@41:0>:int,<make_array_1030@41:1>:int)
          
          P[<check_1148@36:2>](<check_1148@36:0>:int,<check_1148@36:1>:int,<check_1148@36:2>:int),
          ((<check_1148@36:1> < <check_1148@36:0>) && (<<check_1148@36:3>@39:0> = <check_1148@36:1>))
          |- P[<<check_1148@36:3>@39:0>](<check_1148@36:0>:int,<check_1148@36:1>:int,
                                         <check_1148@36:2>:int,<<check_1148@36:3>@39:0>:int)
          
          P[<<array_max_1033@29:3>@32:0>](<check_1148@36:0>:int,0:int,<check_1148@36:2>:int), (
          <check_1148@36:1> = 0)
          |- P[<check_1148@36:2>](<check_1148@36:0>:int,<check_1148@36:1>:int,
                                  <check_1148@36:2>:int)
          
          P[<array_max_1033@29:1>](<array_max_1033@29:0>:int,<array_max_1033@29:1>:int),
          ((<<array_max_1033@29:3>@32:0> = 0) && (<array_max_1033@29:1> >= <array_max_1033@29:0>))
          |- P[<<array_max_1033@29:3>@32:0>](<array_max_1033@29:0>:int,
                                             <array_max_1033@29:1>:int,
                                             <<array_max_1033@29:3>@32:0>:int)
          
           (<array_max_1033@29:1> = 0) |- P[<array_max_1033@29:1>](<array_max_1033@29:0>:int,
                                                                   <array_max_1033@29:1>:int)
        input to Yhorn:
          P[<fail_1486@47:0>](<fail_1486@47:0>:int)|- bot
          
          P[<make_array_1030@41:1>](<k_make_array_u_1182@44:1>:int,<k_make_array_u_1182@44:0>:int),
          ((0 > <k_make_array_u_1182@44:0>) && (<fail_1486@47:0> = 1)) |- P[<fail_1486@47:0>](
          <fail_1486@47:0>:int)
          
          P[<<array_max_1033@29:3>@32:0>](<make_array_1030@41:0>:int,var84:int,<check_1148@36:2>:int),
          P[<<check_1148@36:3>@39:0>](<make_array_1030@41:0>:int,var85:int,<check_1148@36:2>:int,<make_array_1030@41:1>:int),
          ((var85 = 0) && (var84 = 0))
          |- P[<make_array_1030@41:1>](<make_array_1030@41:0>:int,<make_array_1030@41:1>:int)
          
          P[<check_1148@36:2>](<check_1148@36:0>:int,<check_1148@36:1>:int,<check_1148@36:2>:int),
          ((<<check_1148@36:3>@39:0> = <check_1148@36:1>) && (<check_1148@36:1> < <check_1148@36:0>))
          |- P[<<check_1148@36:3>@39:0>](<check_1148@36:0>:int,<check_1148@36:1>:int,
                                         <check_1148@36:2>:int,<<check_1148@36:3>@39:0>:int)
          
          P[<<array_max_1033@29:3>@32:0>](<check_1148@36:0>:int,var86:int,<check_1148@36:2>:int),
          ((var86 = 0) && (<check_1148@36:1> = 0))
          |- P[<check_1148@36:2>](<check_1148@36:0>:int,<check_1148@36:1>:int,
                                  <check_1148@36:2>:int)
          
          P[<array_max_1033@29:1>](<array_max_1033@29:0>:int,<array_max_1033@29:1>:int),
          ((<array_max_1033@29:1> >= <array_max_1033@29:0>) && (<<array_max_1033@29:3>@32:0> = 0))
          |- P[<<array_max_1033@29:3>@32:0>](<array_max_1033@29:0>:int,
                                             <array_max_1033@29:1>:int,
                                             <<array_max_1033@29:3>@32:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1486_sep_47_sep_0($103)) -> 1=0.
(($103-1=0) & (-$104>0)) & (v_sep_make_array_1030_sep_41_sep_1($105,$104)) -> v_sep_fail_1486_sep_47_sep_0($103).
(($106=0) & ($107=0)) & (v_sep_check_1148_sep_36_sep_3_sep_39_sep_0($108,$107,$109,$110)) & (v_sep_array_max_1033_sep_29_sep_3_sep_32_sep_0($108,$106,$109)) -> v_sep_make_array_1030_sep_41_sep_1($108,$110).
(($111-$112<0) & (-$111+$113=0)) & (v_sep_check_1148_sep_36_sep_2($112,$111,$109)) -> v_sep_check_1148_sep_36_sep_3_sep_39_sep_0($112,$111,$109,$113).
(($111=0) & ($114=0)) & (v_sep_array_max_1033_sep_29_sep_3_sep_32_sep_0($112,$114,$109)) -> v_sep_check_1148_sep_36_sep_2($112,$111,$109).
(($115=0) & ($116-$117>=0)) & (v_sep_array_max_1033_sep_29_sep_1($117,$116)) -> v_sep_array_max_1033_sep_29_sep_3_sep_32_sep_0($117,$116,$115).
$116=0 -> v_sep_array_max_1033_sep_29_sep_1($117,$116).


v_sep_array_max_1033_sep_29_sep_1: X
v_sep_array_max_1033_sep_29_sep_3_sep_32_sep_0: X
v_sep_check_1148_sep_36_sep_2: X
v_sep_check_1148_sep_36_sep_3_sep_39_sep_0: X
v_sep_fail_1486_sep_47_sep_0: X
v_sep_make_array_1030_sep_41_sep_1: X
........
v_sep_array_max_1033_sep_29_sep_1: X
v_sep_array_max_1033_sep_29_sep_3_sep_32_sep_0: X
v_sep_check_1148_sep_36_sep_2: X
v_sep_check_1148_sep_36_sep_3_sep_39_sep_0: X
v_sep_fail_1486_sep_47_sep_0: X
v_sep_make_array_1030_sep_41_sep_1: X
...
v_sep_array_max_1033_sep_29_sep_1: X
v_sep_array_max_1033_sep_29_sep_3_sep_32_sep_0: X
v_sep_check_1148_sep_36_sep_2: X
v_sep_check_1148_sep_36_sep_3_sep_39_sep_0: X
v_sep_fail_1486_sep_47_sep_0: X
v_sep_make_array_1030_sep_41_sep_1: X
.....
v_sep_array_max_1033_sep_29_sep_1: X
v_sep_array_max_1033_sep_29_sep_3_sep_32_sep_0: X
v_sep_check_1148_sep_36_sep_2: X
v_sep_check_1148_sep_36_sep_3_sep_39_sep_0: X
v_sep_fail_1486_sep_47_sep_0: X
v_sep_make_array_1030_sep_41_sep_1: X
.......
v_sep_array_max_1033_sep_29_sep_1: X
v_sep_array_max_1033_sep_29_sep_3_sep_32_sep_0: X
v_sep_check_1148_sep_36_sep_2: X
v_sep_check_1148_sep_36_sep_3_sep_39_sep_0: X
v_sep_fail_1486_sep_47_sep_0: X
v_sep_make_array_1030_sep_41_sep_1: X
........(0=0) & (v_sep_fail_1486_sep_47_sep_0($103)) -> 1=0.
(($103-1=0) & (-$104>0)) & (v_sep_make_array_1030_sep_41_sep_1($105,$104)) -> v_sep_fail_1486_sep_47_sep_0($103).
(($106=0) & ($107=0)) & (v_sep_check_1148_sep_36_sep_3_sep_39_sep_0($108,$107,$109,$110)) & (v_sep_array_max_1033_sep_29_sep_3_sep_32_sep_0($108,$106,$109)) -> v_sep_make_array_1030_sep_41_sep_1($108,$110).
(($111-$112<0) & (-$111+$113=0)) & (v_sep_check_1148_sep_36_sep_2($112,$111,$109)) -> v_sep_check_1148_sep_36_sep_3_sep_39_sep_0($112,$111,$109,$113).
(($111=0) & ($114=0)) & (v_sep_array_max_1033_sep_29_sep_3_sep_32_sep_0($112,$114,$109)) -> v_sep_check_1148_sep_36_sep_2($112,$111,$109).
(($115=0) & ($116-$117>=0)) & (v_sep_array_max_1033_sep_29_sep_1($117,$116)) -> v_sep_array_max_1033_sep_29_sep_3_sep_32_sep_0($117,$116,$115).
$116=0 -> v_sep_array_max_1033_sep_29_sep_1($117,$116).

           (<array_max_1033@29:1> = 0) |- P[<array_max_1033@29:1>](<array_max_1033@29:0>:int,
                                                                   <array_max_1033@29:1>:int)
        solution:
          P[<array_max_1033@29:1>]($149:int,$151:int) = true
          P[<<array_max_1033@29:3>@32:0>]($135:int,$137:int,$139:int) = true
          P[<check_1148@36:2>]($142:int,$144:int,$146:int) = true
          P[<<check_1148@36:3>@39:0>]($126:int,$128:int,$130:int,$132:int) = ($128 <= $132)
          P[<fail_1486@47:0>]($118:bool) = false
          P[<make_array_1030@41:1>]($121:int,$123:int) = (0 <= $123)
        
      end HcSolver.solve_ub(4067)[4] (0.015997 sec.)
      begin HcSolver.check_validity(4281)[4]
        input:
          P[<fail_1486@47:0>](<fail_1486@47:0>:bool)|- bot
          
          P[<make_array_1030@41:1>](<k_make_array_u_1182@44:1>:int,<k_make_array_u_1182@44:0>:int),
          ((0 > <k_make_array_u_1182@44:0>) && <fail_1486@47:0>) |- P[<fail_1486@47:0>](
          <fail_1486@47:0>:bool)
          
          P[<<array_max_1033@29:3>@32:0>](<make_array_1030@41:0>:int,0:int,<check_1148@36:2>:int),
          P[<<check_1148@36:3>@39:0>](<make_array_1030@41:0>:int,0:int,<check_1148@36:2>:int,<make_array_1030@41:1>:int)|- P[<make_array_1030@41:1>](
          <make_array_1030@41:0>:int,<make_array_1030@41:1>:int)
          
          P[<check_1148@36:2>](<check_1148@36:0>:int,<check_1148@36:1>:int,<check_1148@36:2>:int),
          ((<check_1148@36:1> < <check_1148@36:0>) && (<<check_1148@36:3>@39:0> = <check_1148@36:1>))
          |- P[<<check_1148@36:3>@39:0>](<check_1148@36:0>:int,<check_1148@36:1>:int,
                                         <check_1148@36:2>:int,<<check_1148@36:3>@39:0>:int)
          
          P[<<array_max_1033@29:3>@32:0>](<check_1148@36:0>:int,0:int,<check_1148@36:2>:int), (
          <check_1148@36:1> = 0)
          |- P[<check_1148@36:2>](<check_1148@36:0>:int,<check_1148@36:1>:int,
                                  <check_1148@36:2>:int)
          
          P[<array_max_1033@29:1>](<array_max_1033@29:0>:int,<array_max_1033@29:1>:int),
          ((<<array_max_1033@29:3>@32:0> = 0) && (<array_max_1033@29:1> >= <array_max_1033@29:0>))
          |- P[<<array_max_1033@29:3>@32:0>](<array_max_1033@29:0>:int,
                                             <array_max_1033@29:1>:int,
                                             <<array_max_1033@29:3>@32:0>:int)
          
           (<array_max_1033@29:1> = 0) |- P[<array_max_1033@29:1>](<array_max_1033@29:0>:int,
                                                                   <array_max_1033@29:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(4281)[4] (0.004000 sec.)
      solution:
        P[<array_max_1033@29:1>]($149:int,$151:int) = true
        P[<<array_max_1033@29:3>@32:0>]($135:int,$137:int,$139:int) = true
        P[<check_1148@36:2>]($142:int,$144:int,$146:int) = true
        P[<<check_1148@36:3>@39:0>]($126:int,$128:int,$130:int,$132:int) = ($128 <= $132)
        P[<fail_1486@47:0>]($118:bool) = false
        P[<make_array_1030@41:1>]($121:int,$123:int) = (0 <= $123)
    end YhornInterface.solve(4066)[3] (0.019997 sec.)
    
  end RefTypeInfer.infer_etrs(2302)[2] (0.075989 sec.)
  refinement types:
    main_1479: X
    f_1484: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    array_max_1033: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    f_main_1483: v1:int -> (v2:unit -> X) -> v4:int -> X
    check_1148: v1:int -> v2:int -> v3:int -> (v4:{v4:int | (v2 <= v4)} -> (v5:int -> X) -> X) -> (v8:unit -> X) -> X
    make_array_1030: v1:int -> v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X
    k_make_array_u_1182: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1486: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1485: var107:int -> var106:unit -> X
    f_array_max_1480: var117:int ->
                      var116:int -> (var115:int -> (var114:int -> X) -> X) -> (var111:int -> X) -> var109:int -> X
    f_array_max_1481: var124:int -> var123:int -> var122:int -> (var121:int -> X) -> var119:int -> X
    f_check_1482: var135:int ->
                  var134:int ->
                  var133:int -> (var132:int -> (var131:int -> X) -> X) -> (var128:unit -> X) -> var126:int -> X
    fail_1487: var139:bool -> (var138:unit -> X) -> X
    k_check_u_1336: var150:int ->
                    var149:int ->
                    var148:int -> (var147:int -> (var146:int -> X) -> X) -> (var143:unit -> X) -> var141:unit -> X
    k_make_array_u_1193: var156:int -> var155:int -> (var154:int -> X) -> var152:unit -> X
  abstraction types:
    main_1479: X
    f_1484: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    array_max_1033: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    f_main_1483: v1:int -> (v2:unit -> X) -> v4:int -> X
    check_1148: v1:int -> v2:int -> v3:int -> (v4:int[v4 -> (v2 <= v4)] -> (v5:int -> X) -> X) -> (v8:unit -> X) -> X
    make_array_1030: v1:int -> v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X
    k_make_array_u_1182: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1486: v1:bool -> (v2:unit -> X) -> X
    f_1485: var107:int -> var106:unit -> X
    f_array_max_1480: var117:int ->
                      var116:int -> (var115:int -> (var114:int -> X) -> X) -> (var111:int -> X) -> var109:int -> X
    f_array_max_1481: var124:int -> var123:int -> var122:int -> (var121:int -> X) -> var119:int -> X
    f_check_1482: var135:int ->
                  var134:int ->
                  var133:int -> (var132:int -> (var131:int -> X) -> X) -> (var128:unit -> X) -> var126:int -> X
    fail_1487: var139:bool -> (var138:unit -> X) -> X
    k_check_u_1336: var150:int ->
                    var149:int ->
                    var148:int -> (var147:int -> (var146:int -> X) -> X) -> (var143:unit -> X) -> var141:unit -> X
    k_make_array_u_1193: var156:int -> var155:int -> (var154:int -> X) -> var152:unit -> X
  
end AbsTypeInfer.refine(2301)[1] (0.080987 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1479
  main_1479 -> (rand_int f_1484)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (i_1035 >= n_1034) -> (k_array_max_1226 0)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (not (i_1035 >= n_1034)) ->
      (a_1036 i_1035 (f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226))
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (i_1041 >= n_1040) -> (k_check_1309 ())
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (not (i_1041 >= n_1040)) ->
      (a_1043 i_1041 (f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_1484 x_1454 -> (main_1044 x_1454 (f_1485 x_1454))
  f_1485 x_1454 x_1451 -> end
  f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 ->
      (array_max_1033 n_1034 (i_1035 + 1) a_1036 (f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226))
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (x_1229 > x_1242) -> (k_array_max_1226 x_1229)
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (
      not (x_1229 > x_1242)) -> (k_array_max_1226 x_1242)
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      x_1315 <= max_1042) -> (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 ())
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      not (x_1315 <= max_1042)) -> (fail_1487 true (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_main_1483 n_1045 k_main_1380 x_1399 -> (check_1148 n_1045 0 x_1399 (make_array_1030 n_1045) k_main_1380)
  fail_1486 b k -> {fail} => (k ())
  fail_1487 b k -> {fail} => (k ())
  k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 ->
      (check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 k_check_1309)
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when b_1194 ->
      (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 ())
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when (not b_1194) ->
      (fail_1486 true (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176))
  k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 -> (k_make_array_1176 i_1032)
  main_1044 n_1045 k_main_1380 -> (array_max_1033 n_1045 0 (make_array_1030 n_1045) (f_main_1483 n_1045 k_main_1380))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (0 <= i_1032) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (not (0 <= i_1032)) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 false)
Types:
  main_1479 : X
  array_max_1033 : (int -> x_2:int -> (x_4:int[x_2 <= x_4] -> (int -> X) -> X) -> (int -> X) -> X)
  check_1148 : (int -> x_2:int -> int -> (x_5:int[x_2 <= x_5] -> (int -> X) -> X) -> (unit -> X) -> X)
  fail_1486 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1487 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_array_1030 : (int -> x_2:int[x_2 >= 0] -> (int -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1479 ... --> 
  f_1484 ... --> 
  main_1044 ... --> 
  array_max_1033 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1182 [2/2] ... --> 
  fail_1486 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(5263)[1]
  program:
    main_1479  | true = ((Random.int 0) f_1484)
    array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 | (i_1035 >= n_1034) = (
    k_array_max_1226 0)
    array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 | (not (i_1035 >= n_1034)) = (
    a_1036 i_1035
           (f_array_max_1480 i_1035
                             n_1034
                             a_1036
                             k_array_max_1226))
    check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 | (i_1041 >= n_1040) = (
    k_check_1309 ())
    check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 | (not (i_1041 >= n_1040)) = (
    a_1043 i_1041
           (f_check_1482 i_1041
                         max_1042
                         n_1040
                         a_1043
                         k_check_1309))
    f_1484 x_1454 | true = (main_1044 x_1454
                                      (f_1485 x_1454))
    f_1485 x_1454 x_1451 | true = end
    f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 | true = (
    array_max_1033 n_1034
                   (i_1035 + 1)
                   a_1036
                   (f_array_max_1481 i_1035
                                     n_1034
                                     x_1229
                                     k_array_max_1226))
    f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 | (
    x_1229 > x_1242) = (k_array_max_1226 x_1229)
    f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 | (
    not (x_1229 > x_1242)) = (k_array_max_1226 x_1242)
    f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 | (
    x_1315 <= max_1042) = (k_check_u_1336 i_1041
                                          max_1042
                                          n_1040
                                          a_1043
                                          k_check_1309
                                          ())
    f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 | (
    not (x_1315 <= max_1042)) = (fail_1487 true
                                           (k_check_u_1336 i_1041
                                                           max_1042
                                                           n_1040
                                                           a_1043
                                                           k_check_1309))
    f_main_1483 n_1045 k_main_1380 x_1399 | true = (check_1148 n_1045
                                                               0
                                                               x_1399
                                                               (make_array_1030 n_1045)
                                                               k_main_1380)
    fail_1486 b k | true = (fail ())
    fail_1487 b k | true = (fail ())
    k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 | true = (
    check_1148 n_1040
               (i_1041 + 1)
               max_1042
               a_1043
               k_check_1309)
    k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 | b_1194 = (
    k_make_array_u_1193 i_1032
                        n_1031
                        k_make_array_1176
                        ())
    k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 | (not b_1194) = (
    fail_1486 true
              (k_make_array_u_1193 i_1032
                                   n_1031
                                   k_make_array_1176))
    k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 | true = (
    k_make_array_1176 i_1032)
    main_1044 n_1045 k_main_1380 | true = (array_max_1033
                                             n_1045
                                             0
                                             (make_array_1030 n_1045)
                                             (f_main_1483 n_1045
                                                          k_main_1380))
    make_array_1030 n_1031 i_1032 k_make_array_1176 | (0 <= i_1032) = (
    k_make_array_u_1182 i_1032
                        n_1031
                        k_make_array_1176
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1176 | (not (0 <= i_1032)) = (
    k_make_array_u_1182 i_1032
                        n_1031
                        k_make_array_1176
                        false)
    main_1479:X
    array_max_1033:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    check_1148:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> X
    f_1484:int -> X
    f_1485:int -> unit -> X
    f_array_max_1480:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_array_max_1481:int -> int -> int -> (int -> X) -> int -> X
    f_check_1482:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> int -> X
    f_main_1483:int -> (unit -> X) -> int -> X
    fail_1486:bool -> (unit -> X) -> X
    fail_1487:bool -> (unit -> X) -> X
    k_check_u_1336:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> unit -> X
    k_make_array_u_1182:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1193:int -> int -> (int -> X) -> unit -> X
    main_1044:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1484,f_1485,f_array_max_1480,f_array_max_1481,f_check_1482,f_main_1483,k_check_u_1336,k_make_array_u_1182,k_make_array_u_1193,main_1044
  counterexample: 0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1484@53:0> = var157)
     [true.(<main_1044@55:0> = <f_1484@53:0>)
      [true.((<array_max_1033@57:0> = <main_1044@55:0>) && (<array_max_1033@57:1> = 0))
       [(not (<array_max_1033@57:1> >= <array_max_1033@57:0>)).(<<array_max_1033@57:2>@60:0> = <array_max_1033@57:1>)
        [true.((<make_array_1030@62:0> = <main_1044@55:0>) && (<make_array_1030@62:1> = <<array_max_1033@57:2>@60:0>))
         [(0 <= <make_array_1030@62:1>).
          ((<k_make_array_u_1182@65:0> = <make_array_1030@62:1>) &&
           ((<k_make_array_u_1182@65:1> = <make_array_1030@62:0>) &&
            (<k_make_array_u_1182@65:3> = (<make_array_1030@62:1> < <make_array_1030@62:0>))))
          [(not <k_make_array_u_1182@65:3>).(<fail_1486@68:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(5264)[2]
    horn clauses:
      P[<fail_1486@68:0>](<fail_1486@68:0>:bool)|- bot
      
      P[<k_make_array_u_1182@65:3>](<k_make_array_u_1182@65:0>:int,<k_make_array_u_1182@65:1>:int,false:bool),
      <fail_1486@68:0> |- P[<fail_1486@68:0>](<fail_1486@68:0>:bool)
      
      P[<make_array_1030@62:1>](<k_make_array_u_1182@65:1>:int,<k_make_array_u_1182@65:0>:int),
      ((0 <= <k_make_array_u_1182@65:0>) &&
       (<k_make_array_u_1182@65:3> = (<k_make_array_u_1182@65:0> < <k_make_array_u_1182@65:1>)))
      |- P[<k_make_array_u_1182@65:3>](<k_make_array_u_1182@65:0>:int,
                                       <k_make_array_u_1182@65:1>:int,
                                       <k_make_array_u_1182@65:3>:bool)
      
      P[<main_1044@55:0>](<make_array_1030@62:0>:int),
      P[<<array_max_1033@57:2>@60:0>](<make_array_1030@62:0>:int,0:int,<make_array_1030@62:1>:int)|- P[<make_array_1030@62:1>](
      <make_array_1030@62:0>:int,<make_array_1030@62:1>:int)
      
      P[<array_max_1033@57:1>](<array_max_1033@57:0>:int,<array_max_1033@57:1>:int),
      ((<array_max_1033@57:1> < <array_max_1033@57:0>) && (<<array_max_1033@57:2>@60:0> = <array_max_1033@57:1>))
      |- P[<<array_max_1033@57:2>@60:0>](<array_max_1033@57:0>:int,<array_max_1033@57:1>:int,
                                         <<array_max_1033@57:2>@60:0>:int)
      
      P[<main_1044@55:0>](<array_max_1033@57:0>:int), (<array_max_1033@57:1> = 0)
      |- P[<array_max_1033@57:1>](<array_max_1033@57:0>:int,<array_max_1033@57:1>:int)
      
      P[<f_1484@53:0>](<main_1044@55:0>:int)|- P[<main_1044@55:0>](<main_1044@55:0>:int)
      
      |- P[<f_1484@53:0>](<f_1484@53:0>:int)
    call trees:
      <main_1479@50>
        <f_1484@53>
          <main_1044@55>
            <array_max_1033@57>
            </<array_max_1033@57:2>@60>
            <make_array_1030@62>
              <k_make_array_u_1182@65>
                <fail_1486@68>
    inlined horn clauses:
      P[<fail_1486@68:0>](<fail_1486@68:0>:bool)|- bot
      
      P[<make_array_1030@62:1>](<k_make_array_u_1182@65:1>:int,<k_make_array_u_1182@65:0>:int),
      ((0 <= <k_make_array_u_1182@65:0>) &&
       ((<k_make_array_u_1182@65:0> >= <k_make_array_u_1182@65:1>) && <fail_1486@68:0>))
      |- P[<fail_1486@68:0>](<fail_1486@68:0>:bool)
      
      P[<<array_max_1033@57:2>@60:0>](<make_array_1030@62:0>:int,0:int,<make_array_1030@62:1>:int)|- P[<make_array_1030@62:1>](
      <make_array_1030@62:0>:int,<make_array_1030@62:1>:int)
      
      P[<array_max_1033@57:1>](<array_max_1033@57:0>:int,<array_max_1033@57:1>:int),
      ((<array_max_1033@57:1> < <array_max_1033@57:0>) && (<<array_max_1033@57:2>@60:0> = <array_max_1033@57:1>))
      |- P[<<array_max_1033@57:2>@60:0>](<array_max_1033@57:0>:int,<array_max_1033@57:1>:int,
                                         <<array_max_1033@57:2>@60:0>:int)
      
       (<array_max_1033@57:1> = 0) |- P[<array_max_1033@57:1>](<array_max_1033@57:0>:int,
                                                               <array_max_1033@57:1>:int)
    begin ParamSubstInfer.infer(6530)[3]
      
    end ParamSubstInfer.infer(6530)[3] (0.082987 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(6532)[3]
      
    end RefTypeInfer.elim_coeffs(6532)[3] (0.000000 sec.)
    begin YhornInterface.solve(6797)[3]
      begin HcSolver.solve_ub(6798)[4]
        encoded:
          P[<fail_1486@68:0>](<fail_1486@68:0>:int)|- bot
          
          P[<make_array_1030@62:1>](<k_make_array_u_1182@65:1>:int,<k_make_array_u_1182@65:0>:int),
          ((0 <= <k_make_array_u_1182@65:0>) &&
           ((<k_make_array_u_1182@65:0> >= <k_make_array_u_1182@65:1>) && (<fail_1486@68:0> = 1)))
          |- P[<fail_1486@68:0>](<fail_1486@68:0>:int)
          
          P[<<array_max_1033@57:2>@60:0>](<make_array_1030@62:0>:int,0:int,<make_array_1030@62:1>:int)|- P[<make_array_1030@62:1>](
          <make_array_1030@62:0>:int,<make_array_1030@62:1>:int)
          
          P[<array_max_1033@57:1>](<array_max_1033@57:0>:int,<array_max_1033@57:1>:int),
          ((<array_max_1033@57:1> < <array_max_1033@57:0>) && (<<array_max_1033@57:2>@60:0> = <array_max_1033@57:1>))
          |- P[<<array_max_1033@57:2>@60:0>](<array_max_1033@57:0>:int,
                                             <array_max_1033@57:1>:int,
                                             <<array_max_1033@57:2>@60:0>:int)
          
           (<array_max_1033@57:1> = 0) |- P[<array_max_1033@57:1>](<array_max_1033@57:0>:int,
                                                                   <array_max_1033@57:1>:int)
        input to Yhorn:
          P[<fail_1486@68:0>](<fail_1486@68:0>:int)|- bot
          
          P[<make_array_1030@62:1>](<k_make_array_u_1182@65:1>:int,<k_make_array_u_1182@65:0>:int),
          ((<k_make_array_u_1182@65:0> >= <k_make_array_u_1182@65:1>) &&
           ((0 <= <k_make_array_u_1182@65:0>) && (<fail_1486@68:0> = 1))) |- P[<fail_1486@68:0>](
          <fail_1486@68:0>:int)
          
          P[<<array_max_1033@57:2>@60:0>](<make_array_1030@62:0>:int,var158:int,<make_array_1030@62:1>:int),
          (var158 = 0) |- P[<make_array_1030@62:1>](<make_array_1030@62:0>:int,
                                                    <make_array_1030@62:1>:int)
          
          P[<array_max_1033@57:1>](<array_max_1033@57:0>:int,<array_max_1033@57:1>:int),
          ((<<array_max_1033@57:2>@60:0> = <array_max_1033@57:1>) && (<array_max_1033@57:1> < <array_max_1033@57:0>))
          |- P[<<array_max_1033@57:2>@60:0>](<array_max_1033@57:0>:int,
                                             <array_max_1033@57:1>:int,
                                             <<array_max_1033@57:2>@60:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1486_sep_68_sep_0($240)) -> 1=0.
(($240-1=0) & (-$241<=0) & ($241-$242>=0)) & (v_sep_make_array_1030_sep_62_sep_1($242,$241)) -> v_sep_fail_1486_sep_68_sep_0($240).
($243=0) & (v_sep_array_max_1033_sep_57_sep_2_sep_60_sep_0($244,$243,$245)) -> v_sep_make_array_1030_sep_62_sep_1($244,$245).
(($246-$247<0) & (-$246+$248=0)) & (v_sep_array_max_1033_sep_57_sep_1($247,$246)) -> v_sep_array_max_1033_sep_57_sep_2_sep_60_sep_0($247,$246,$248).
$246=0 -> v_sep_array_max_1033_sep_57_sep_1($247,$246).


v_sep_array_max_1033_sep_57_sep_1: X
v_sep_array_max_1033_sep_57_sep_2_sep_60_sep_0: X
v_sep_fail_1486_sep_68_sep_0: X
v_sep_make_array_1030_sep_62_sep_1: X
.....
v_sep_array_max_1033_sep_57_sep_1: X
v_sep_array_max_1033_sep_57_sep_2_sep_60_sep_0: X
v_sep_fail_1486_sep_68_sep_0: X
v_sep_make_array_1030_sep_62_sep_1: X
...
v_sep_array_max_1033_sep_57_sep_1: X
v_sep_array_max_1033_sep_57_sep_2_sep_60_sep_0: X
v_sep_fail_1486_sep_68_sep_0: X
v_sep_make_array_1030_sep_62_sep_1: X
....
v_sep_array_max_1033_sep_57_sep_1: X
v_sep_array_max_1033_sep_57_sep_2_sep_60_sep_0: X
v_sep_fail_1486_sep_68_sep_0: X
v_sep_make_array_1030_sep_62_sep_1: X
.....
v_sep_array_max_1033_sep_57_sep_1: X
v_sep_array_max_1033_sep_57_sep_2_sep_60_sep_0: X
v_sep_fail_1486_sep_68_sep_0: X
v_sep_make_array_1030_sep_62_sep_1: X
.....(0=0) & (v_sep_fail_1486_sep_68_sep_0($240)) -> 1=0.
(($240-1=0) & (-$241<=0) & ($241-$242>=0)) & (v_sep_make_array_1030_sep_62_sep_1($242,$241)) -> v_sep_fail_1486_sep_68_sep_0($240).
($243=0) & (v_sep_array_max_1033_sep_57_sep_2_sep_60_sep_0($244,$243,$245)) -> v_sep_make_array_1030_sep_62_sep_1($244,$245).
(($246-$247<0) & (-$246+$248=0)) & (v_sep_array_max_1033_sep_57_sep_1($247,$246)) -> v_sep_array_max_1033_sep_57_sep_2_sep_60_sep_0($247,$246,$248).
$246=0 -> v_sep_array_max_1033_sep_57_sep_1($247,$246).

           (<array_max_1033@57:1> = 0) |- P[<array_max_1033@57:1>](<array_max_1033@57:0>:int,
                                                                   <array_max_1033@57:1>:int)
        solution:
          P[<array_max_1033@57:1>]($264:int,$266:int) = true
          P[<<array_max_1033@57:2>@60:0>]($257:int,$259:int,$261:int) = ((1 + $261) <= $257)
          P[<fail_1486@68:0>]($249:bool) = false
          P[<make_array_1030@62:1>]($252:int,$254:int) = ((1 + $254) <= $252)
        
      end HcSolver.solve_ub(6798)[4] (0.015998 sec.)
      begin HcSolver.check_validity(6987)[4]
        input:
          P[<fail_1486@68:0>](<fail_1486@68:0>:bool)|- bot
          
          P[<make_array_1030@62:1>](<k_make_array_u_1182@65:1>:int,<k_make_array_u_1182@65:0>:int),
          ((0 <= <k_make_array_u_1182@65:0>) &&
           ((<k_make_array_u_1182@65:0> >= <k_make_array_u_1182@65:1>) && <fail_1486@68:0>))
          |- P[<fail_1486@68:0>](<fail_1486@68:0>:bool)
          
          P[<<array_max_1033@57:2>@60:0>](<make_array_1030@62:0>:int,0:int,<make_array_1030@62:1>:int)|- P[<make_array_1030@62:1>](
          <make_array_1030@62:0>:int,<make_array_1030@62:1>:int)
          
          P[<array_max_1033@57:1>](<array_max_1033@57:0>:int,<array_max_1033@57:1>:int),
          ((<array_max_1033@57:1> < <array_max_1033@57:0>) && (<<array_max_1033@57:2>@60:0> = <array_max_1033@57:1>))
          |- P[<<array_max_1033@57:2>@60:0>](<array_max_1033@57:0>:int,
                                             <array_max_1033@57:1>:int,
                                             <<array_max_1033@57:2>@60:0>:int)
          
           (<array_max_1033@57:1> = 0) |- P[<array_max_1033@57:1>](<array_max_1033@57:0>:int,
                                                                   <array_max_1033@57:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(6987)[4] (0.005999 sec.)
      solution:
        P[<array_max_1033@57:1>]($264:int,$266:int) = true
        P[<<array_max_1033@57:2>@60:0>]($257:int,$259:int,$261:int) = ((1 + $261) <= $257)
        P[<fail_1486@68:0>]($249:bool) = false
        P[<make_array_1030@62:1>]($252:int,$254:int) = ((1 + $254) <= $252)
    end YhornInterface.solve(6797)[3] (0.021997 sec.)
    
  end RefTypeInfer.infer_etrs(5264)[2] (0.112983 sec.)
  refinement types:
    main_1479: X
    f_1484: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    array_max_1033: v1:int -> v2:int -> (v3:{v3:int | ((1 + v3) <= v1)} -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    make_array_1030: v1:int -> v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X
    k_make_array_u_1182: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1486: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    check_1148: var180:int ->
                var179:int -> var178:int -> (var177:int -> (var176:int -> X) -> X) -> (var173:unit -> X) -> X
    f_1485: var183:int -> var182:unit -> X
    f_array_max_1480: var193:int ->
                      var192:int -> (var191:int -> (var190:int -> X) -> X) -> (var187:int -> X) -> var185:int -> X
    f_array_max_1481: var200:int -> var199:int -> var198:int -> (var197:int -> X) -> var195:int -> X
    f_check_1482: var211:int ->
                  var210:int ->
                  var209:int -> (var208:int -> (var207:int -> X) -> X) -> (var204:unit -> X) -> var202:int -> X
    f_main_1483: var216:int -> (var215:unit -> X) -> var213:int -> X
    fail_1487: var220:bool -> (var219:unit -> X) -> X
    k_check_u_1336: var231:int ->
                    var230:int ->
                    var229:int -> (var228:int -> (var227:int -> X) -> X) -> (var224:unit -> X) -> var222:unit -> X
    k_make_array_u_1193: var237:int -> var236:int -> (var235:int -> X) -> var233:unit -> X
  abstraction types:
    main_1479: X
    f_1484: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    array_max_1033: v1:int -> v2:int -> (v3:int[v3 -> ((1 + v3) <= v1)] -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    make_array_1030: v1:int -> v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X
    k_make_array_u_1182: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1486: v1:bool -> (v2:unit -> X) -> X
    check_1148: var180:int ->
                var179:int -> var178:int -> (var177:int -> (var176:int -> X) -> X) -> (var173:unit -> X) -> X
    f_1485: var183:int -> var182:unit -> X
    f_array_max_1480: var193:int ->
                      var192:int -> (var191:int -> (var190:int -> X) -> X) -> (var187:int -> X) -> var185:int -> X
    f_array_max_1481: var200:int -> var199:int -> var198:int -> (var197:int -> X) -> var195:int -> X
    f_check_1482: var211:int ->
                  var210:int ->
                  var209:int -> (var208:int -> (var207:int -> X) -> X) -> (var204:unit -> X) -> var202:int -> X
    f_main_1483: var216:int -> (var215:unit -> X) -> var213:int -> X
    fail_1487: var220:bool -> (var219:unit -> X) -> X
    k_check_u_1336: var231:int ->
                    var230:int ->
                    var229:int -> (var228:int -> (var227:int -> X) -> X) -> (var224:unit -> X) -> var222:unit -> X
    k_make_array_u_1193: var237:int -> var236:int -> (var235:int -> X) -> var233:unit -> X
  
end AbsTypeInfer.refine(5263)[1] (0.116983 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1479
  main_1479 -> (rand_int f_1484)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (i_1035 >= n_1034) -> (k_array_max_1226 0)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (not (i_1035 >= n_1034)) ->
      (a_1036 i_1035 (f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226))
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (i_1041 >= n_1040) -> (k_check_1309 ())
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (not (i_1041 >= n_1040)) ->
      (a_1043 i_1041 (f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_1484 x_1454 -> (main_1044 x_1454 (f_1485 x_1454))
  f_1485 x_1454 x_1451 -> end
  f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 ->
      (array_max_1033 n_1034 (i_1035 + 1) a_1036 (f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226))
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (x_1229 > x_1242) -> (k_array_max_1226 x_1229)
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (
      not (x_1229 > x_1242)) -> (k_array_max_1226 x_1242)
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      x_1315 <= max_1042) -> (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 ())
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      not (x_1315 <= max_1042)) -> (fail_1487 true (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_main_1483 n_1045 k_main_1380 x_1399 -> (check_1148 n_1045 0 x_1399 (make_array_1030 n_1045) k_main_1380)
  fail_1486 b k -> {fail} => (k ())
  fail_1487 b k -> {fail} => (k ())
  k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 ->
      (check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 k_check_1309)
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when b_1194 ->
      (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 ())
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when (not b_1194) ->
      (fail_1486 true (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176))
  k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 -> (k_make_array_1176 i_1032)
  main_1044 n_1045 k_main_1380 -> (array_max_1033 n_1045 0 (make_array_1030 n_1045) (f_main_1483 n_1045 k_main_1380))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (0 <= i_1032) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (not (0 <= i_1032)) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 false)
Types:
  main_1479 : X
  array_max_1033 : (x_1:int -> x_2:int -> (x_4:int[x_1 >= x_4 + 1; x_2 <= x_4] -> (int -> X) -> X) -> (int -> X) -> X)
  check_1148 : (int -> x_2:int -> int -> (x_5:int[x_2 <= x_5] -> (int -> X) -> X) -> (unit -> X) -> X)
  fail_1486 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1487 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_array_1030 : (x_1:int -> x_2:int[x_1 >= x_2 + 1; x_2 >= 0] -> (int -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1479 ... --> 
  f_1484 ... --> 
  main_1044 ... --> 
  array_max_1033 [1/2] ... --> 
  f_main_1483 ... --> 
  check_1148 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1182 [1/2] ... --> 
  k_make_array_u_1193 ... --> 
  f_check_1482 [2/2] ... --> 
  fail_1487 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(8153)[1]
  program:
    main_1479  | true = ((Random.int 0) f_1484)
    array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 | (i_1035 >= n_1034) = (
    k_array_max_1226 0)
    array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 | (not (i_1035 >= n_1034)) = (
    a_1036 i_1035
           (f_array_max_1480 i_1035
                             n_1034
                             a_1036
                             k_array_max_1226))
    check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 | (i_1041 >= n_1040) = (
    k_check_1309 ())
    check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 | (not (i_1041 >= n_1040)) = (
    a_1043 i_1041
           (f_check_1482 i_1041
                         max_1042
                         n_1040
                         a_1043
                         k_check_1309))
    f_1484 x_1454 | true = (main_1044 x_1454
                                      (f_1485 x_1454))
    f_1485 x_1454 x_1451 | true = end
    f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 | true = (
    array_max_1033 n_1034
                   (i_1035 + 1)
                   a_1036
                   (f_array_max_1481 i_1035
                                     n_1034
                                     x_1229
                                     k_array_max_1226))
    f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 | (
    x_1229 > x_1242) = (k_array_max_1226 x_1229)
    f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 | (
    not (x_1229 > x_1242)) = (k_array_max_1226 x_1242)
    f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 | (
    x_1315 <= max_1042) = (k_check_u_1336 i_1041
                                          max_1042
                                          n_1040
                                          a_1043
                                          k_check_1309
                                          ())
    f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 | (
    not (x_1315 <= max_1042)) = (fail_1487 true
                                           (k_check_u_1336 i_1041
                                                           max_1042
                                                           n_1040
                                                           a_1043
                                                           k_check_1309))
    f_main_1483 n_1045 k_main_1380 x_1399 | true = (check_1148 n_1045
                                                               0
                                                               x_1399
                                                               (make_array_1030 n_1045)
                                                               k_main_1380)
    fail_1486 b k | true = (fail ())
    fail_1487 b k | true = (fail ())
    k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 | true = (
    check_1148 n_1040
               (i_1041 + 1)
               max_1042
               a_1043
               k_check_1309)
    k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 | b_1194 = (
    k_make_array_u_1193 i_1032
                        n_1031
                        k_make_array_1176
                        ())
    k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 | (not b_1194) = (
    fail_1486 true
              (k_make_array_u_1193 i_1032
                                   n_1031
                                   k_make_array_1176))
    k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 | true = (
    k_make_array_1176 i_1032)
    main_1044 n_1045 k_main_1380 | true = (array_max_1033
                                             n_1045
                                             0
                                             (make_array_1030 n_1045)
                                             (f_main_1483 n_1045
                                                          k_main_1380))
    make_array_1030 n_1031 i_1032 k_make_array_1176 | (0 <= i_1032) = (
    k_make_array_u_1182 i_1032
                        n_1031
                        k_make_array_1176
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1176 | (not (0 <= i_1032)) = (
    k_make_array_u_1182 i_1032
                        n_1031
                        k_make_array_1176
                        false)
    main_1479:X
    array_max_1033:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    check_1148:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> X
    f_1484:int -> X
    f_1485:int -> unit -> X
    f_array_max_1480:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_array_max_1481:int -> int -> int -> (int -> X) -> int -> X
    f_check_1482:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> int -> X
    f_main_1483:int -> (unit -> X) -> int -> X
    fail_1486:bool -> (unit -> X) -> X
    fail_1487:bool -> (unit -> X) -> X
    k_check_u_1336:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> unit -> X
    k_make_array_u_1182:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1193:int -> int -> (int -> X) -> unit -> X
    main_1044:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1484,f_1485,f_array_max_1480,f_array_max_1481,f_check_1482,f_main_1483,k_check_u_1336,k_make_array_u_1182,k_make_array_u_1193,main_1044
  counterexample: 0:0:0:0:0:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1484@74:0> = var238)
     [true.(<main_1044@76:0> = <f_1484@74:0>)
      [true.((<array_max_1033@78:0> = <main_1044@76:0>) && (<array_max_1033@78:1> = 0))
       [(<array_max_1033@78:1> >= <array_max_1033@78:0>).(<<array_max_1033@78:3>@81:0> = 0)
        [true.((<f_main_1483@83:0> = <main_1044@76:0>) && (<f_main_1483@83:2> = <<array_max_1033@78:3>@81:0>))
         [true.
          ((<check_1148@85:0> = <f_main_1483@83:0>) &&
           ((<check_1148@85:1> = 0) && (<check_1148@85:2> = <f_main_1483@83:2>)))
          [(not (<check_1148@85:1> >= <check_1148@85:0>)).(<<check_1148@85:3>@88:0> = <check_1148@85:1>)
           [true.((<make_array_1030@90:0> = <f_main_1483@83:0>) && (<make_array_1030@90:1> = <<check_1148@85:3>@88:0>))
            [(0 <= <make_array_1030@90:1>).
             ((<k_make_array_u_1182@93:0> = <make_array_1030@90:1>) &&
              ((<k_make_array_u_1182@93:1> = <make_array_1030@90:0>) &&
               (<k_make_array_u_1182@93:3> = (<make_array_1030@90:1> < <make_array_1030@90:0>))))
             [<k_make_array_u_1182@93:3>.
              ((<k_make_array_u_1193@96:0> = <k_make_array_u_1182@93:0>) &&
               ((<k_make_array_u_1193@96:1> = <k_make_array_u_1182@93:1>) && (<k_make_array_u_1193@96:3> = ())))
              [true.(<<k_make_array_u_1193@96:2>@98:0> = <k_make_array_u_1193@96:0>)
               [true.(<<k_make_array_u_1182@93:2>@100:0> = <<k_make_array_u_1193@96:2>@98:0>)
                [true.(<<make_array_1030@90:2>@102:0> = <<k_make_array_u_1182@93:2>@100:0>)
                 [true.(<<<check_1148@85:3>@88:1>@104:0> = <<make_array_1030@90:2>@102:0>)
                  [true.
                   ((<f_check_1482@106:0> = <check_1148@85:1>) &&
                    ((<f_check_1482@106:1> = <check_1148@85:2>) &&
                     ((<f_check_1482@106:2> = <check_1148@85:0>) &&
                      (<f_check_1482@106:5> = <<<check_1148@85:3>@88:1>@104:0>))))
                   [(not (<f_check_1482@106:5> <= <f_check_1482@106:1>)).(<fail_1487@109:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(8154)[2]
    horn clauses:
      P[<fail_1487@109:0>](<fail_1487@109:0>:bool)|- bot
      
      P[<f_check_1482@106:5>](<f_check_1482@106:0>:int,<f_check_1482@106:1>:int,<f_check_1482@106:2>:int,<f_check_1482@106:5>:int),
      ((<f_check_1482@106:5> > <f_check_1482@106:1>) && <fail_1487@109:0>)
      |- P[<fail_1487@109:0>](<fail_1487@109:0>:bool)
      
      P[<check_1148@85:2>](<f_check_1482@106:2>:int,<f_check_1482@106:0>:int,<f_check_1482@106:1>:int),
      P[<<<check_1148@85:3>@88:1>@104:0>](<f_check_1482@106:2>:int,<f_check_1482@106:0>:int,<f_check_1482@106:1>:int,<f_check_1482@106:0>:int,<f_check_1482@106:5>:int),
      (<f_check_1482@106:0> < <f_check_1482@106:2>)
      |- P[<f_check_1482@106:5>](<f_check_1482@106:0>:int,<f_check_1482@106:1>:int,
                                 <f_check_1482@106:2>:int,<f_check_1482@106:5>:int)
      
      P[<f_main_1483@83:2>](<check_1148@85:0>:int,<check_1148@85:2>:int),
      P[<<make_array_1030@90:2>@102:0>](<check_1148@85:0>:int,<<check_1148@85:3>@88:0>:int,<<<check_1148@85:3>@88:1>@104:0>:int),
      P[<check_1148@85:2>](<check_1148@85:0>:int,<check_1148@85:1>:int,<check_1148@85:2>:int), (
      <check_1148@85:1> = 0)
      |- P[<<<check_1148@85:3>@88:1>@104:0>](<check_1148@85:0>:int,<check_1148@85:1>:int,
                                             <check_1148@85:2>:int,<<check_1148@85:3>@88:0>:int,
                                             <<<check_1148@85:3>@88:1>@104:0>:int)
      
      P[<make_array_1030@90:1>](<make_array_1030@90:0>:int,<make_array_1030@90:1>:int),
      P[<<k_make_array_u_1182@93:2>@100:0>](<make_array_1030@90:1>:int,<make_array_1030@90:0>:int,<<make_array_1030@90:2>@102:0>:int),
      (0 <= <make_array_1030@90:1>)
      |- P[<<make_array_1030@90:2>@102:0>](<make_array_1030@90:0>:int,
                                           <make_array_1030@90:1>:int,
                                           <<make_array_1030@90:2>@102:0>:int)
      
      P[<k_make_array_u_1182@93:3>](<k_make_array_u_1182@93:0>:int,<k_make_array_u_1182@93:1>:int,true:bool),
      P[<<k_make_array_u_1193@96:2>@98:0>](<k_make_array_u_1182@93:0>:int,<k_make_array_u_1182@93:1>:int,<<k_make_array_u_1182@93:2>@100:0>:int)|- P[<<k_make_array_u_1182@93:2>@100:0>](
      <k_make_array_u_1182@93:0>:int,<k_make_array_u_1182@93:1>:int,<<k_make_array_u_1182@93:2>@100:0>:int)
      
      P[<k_make_array_u_1193@96:3>](<k_make_array_u_1193@96:0>:int,<k_make_array_u_1193@96:1>:int,<k_make_array_u_1193@96:3>:unit),
      (<<k_make_array_u_1193@96:2>@98:0> = <k_make_array_u_1193@96:0>)
      |- P[<<k_make_array_u_1193@96:2>@98:0>](<k_make_array_u_1193@96:0>:int,
                                              <k_make_array_u_1193@96:1>:int,
                                              <<k_make_array_u_1193@96:2>@98:0>:int)
      
      P[<k_make_array_u_1182@93:3>](<k_make_array_u_1193@96:0>:int,<k_make_array_u_1193@96:1>:int,true:bool)|- P[<k_make_array_u_1193@96:3>](
      <k_make_array_u_1193@96:0>:int,<k_make_array_u_1193@96:1>:int,<k_make_array_u_1193@96:3>:unit)
      
      P[<make_array_1030@90:1>](<k_make_array_u_1182@93:1>:int,<k_make_array_u_1182@93:0>:int),
      ((0 <= <k_make_array_u_1182@93:0>) &&
       (<k_make_array_u_1182@93:3> = (<k_make_array_u_1182@93:0> < <k_make_array_u_1182@93:1>)))
      |- P[<k_make_array_u_1182@93:3>](<k_make_array_u_1182@93:0>:int,
                                       <k_make_array_u_1182@93:1>:int,
                                       <k_make_array_u_1182@93:3>:bool)
      
      P[<f_main_1483@83:2>](<make_array_1030@90:0>:int,<check_1148@85:2>:int),
      P[<<check_1148@85:3>@88:0>](<make_array_1030@90:0>:int,0:int,<check_1148@85:2>:int,<make_array_1030@90:1>:int)|- P[<make_array_1030@90:1>](
      <make_array_1030@90:0>:int,<make_array_1030@90:1>:int)
      
      P[<check_1148@85:2>](<check_1148@85:0>:int,<check_1148@85:1>:int,<check_1148@85:2>:int),
      ((<check_1148@85:1> < <check_1148@85:0>) && (<<check_1148@85:3>@88:0> = <check_1148@85:1>))
      |- P[<<check_1148@85:3>@88:0>](<check_1148@85:0>:int,<check_1148@85:1>:int,
                                     <check_1148@85:2>:int,<<check_1148@85:3>@88:0>:int)
      
      P[<f_main_1483@83:2>](<check_1148@85:0>:int,<check_1148@85:2>:int), (
      <check_1148@85:1> = 0) |- P[<check_1148@85:2>](<check_1148@85:0>:int,
                                                     <check_1148@85:1>:int,
                                                     <check_1148@85:2>:int)
      
      P[<main_1044@76:0>](<f_main_1483@83:0>:int),
      P[<<array_max_1033@78:3>@81:0>](<f_main_1483@83:0>:int,0:int,<f_main_1483@83:2>:int)|- P[<f_main_1483@83:2>](
      <f_main_1483@83:0>:int,<f_main_1483@83:2>:int)
      
      P[<array_max_1033@78:1>](<array_max_1033@78:0>:int,<array_max_1033@78:1>:int),
      ((<<array_max_1033@78:3>@81:0> = 0) && (<array_max_1033@78:1> >= <array_max_1033@78:0>))
      |- P[<<array_max_1033@78:3>@81:0>](<array_max_1033@78:0>:int,<array_max_1033@78:1>:int,
                                         <<array_max_1033@78:3>@81:0>:int)
      
      P[<main_1044@76:0>](<array_max_1033@78:0>:int), (<array_max_1033@78:1> = 0)
      |- P[<array_max_1033@78:1>](<array_max_1033@78:0>:int,<array_max_1033@78:1>:int)
      
      P[<f_1484@74:0>](<main_1044@76:0>:int)|- P[<main_1044@76:0>](<main_1044@76:0>:int)
      
      |- P[<f_1484@74:0>](<f_1484@74:0>:int)
    call trees:
      <main_1479@71>
        <f_1484@74>
          <main_1044@76>
            <array_max_1033@78>
            </<array_max_1033@78:3>@81>
            <f_main_1483@83>
              <check_1148@85>
              </<check_1148@85:3>@88>
              <make_array_1030@90>
                <k_make_array_u_1182@93>
                  <k_make_array_u_1193@96>
                  </<k_make_array_u_1193@96:2>@98>
                </<k_make_array_u_1182@93:2>@100>
              </<make_array_1030@90:2>@102>
              <<<check_1148@85:3>@88:1>@104>
                <f_check_1482@106>
                  <fail_1487@109>
    inlined horn clauses:
      P[<fail_1487@109:0>](<fail_1487@109:0>:bool)|- bot
      
      P[<check_1148@85:2>](<f_check_1482@106:2>:int,<f_check_1482@106:0>:int,<f_check_1482@106:1>:int),
      P[<<<check_1148@85:3>@88:1>@104:0>](<f_check_1482@106:2>:int,<f_check_1482@106:0>:int,<f_check_1482@106:1>:int,<f_check_1482@106:0>:int,<f_check_1482@106:5>:int),
      ((<f_check_1482@106:5> > <f_check_1482@106:1>) &&
       ((<f_check_1482@106:0> < <f_check_1482@106:2>) && <fail_1487@109:0>))
      |- P[<fail_1487@109:0>](<fail_1487@109:0>:bool)
      
      P[<<array_max_1033@78:3>@81:0>](<check_1148@85:0>:int,0:int,<check_1148@85:2>:int),
      P[<<make_array_1030@90:2>@102:0>](<check_1148@85:0>:int,<<check_1148@85:3>@88:0>:int,<<<check_1148@85:3>@88:1>@104:0>:int),
      P[<check_1148@85:2>](<check_1148@85:0>:int,<check_1148@85:1>:int,<check_1148@85:2>:int), (
      <check_1148@85:1> = 0)
      |- P[<<<check_1148@85:3>@88:1>@104:0>](<check_1148@85:0>:int,<check_1148@85:1>:int,
                                             <check_1148@85:2>:int,<<check_1148@85:3>@88:0>:int,
                                             <<<check_1148@85:3>@88:1>@104:0>:int)
      
      P[<make_array_1030@90:1>](<make_array_1030@90:0>:int,<make_array_1030@90:1>:int),
      ((0 <= <make_array_1030@90:1>) &&
       ((<make_array_1030@90:1> < <make_array_1030@90:0>) && (<<make_array_1030@90:2>@102:0> = <make_array_1030@90:1>)))
      |- P[<<make_array_1030@90:2>@102:0>](<make_array_1030@90:0>:int,
                                           <make_array_1030@90:1>:int,
                                           <<make_array_1030@90:2>@102:0>:int)
      
      P[<<array_max_1033@78:3>@81:0>](<make_array_1030@90:0>:int,0:int,<check_1148@85:2>:int),
      P[<<check_1148@85:3>@88:0>](<make_array_1030@90:0>:int,0:int,<check_1148@85:2>:int,<make_array_1030@90:1>:int)|- P[<make_array_1030@90:1>](
      <make_array_1030@90:0>:int,<make_array_1030@90:1>:int)
      
      P[<check_1148@85:2>](<check_1148@85:0>:int,<check_1148@85:1>:int,<check_1148@85:2>:int),
      ((<check_1148@85:1> < <check_1148@85:0>) && (<<check_1148@85:3>@88:0> = <check_1148@85:1>))
      |- P[<<check_1148@85:3>@88:0>](<check_1148@85:0>:int,<check_1148@85:1>:int,
                                     <check_1148@85:2>:int,<<check_1148@85:3>@88:0>:int)
      
      P[<<array_max_1033@78:3>@81:0>](<check_1148@85:0>:int,0:int,<check_1148@85:2>:int), (
      <check_1148@85:1> = 0) |- P[<check_1148@85:2>](<check_1148@85:0>:int,
                                                     <check_1148@85:1>:int,
                                                     <check_1148@85:2>:int)
      
      P[<array_max_1033@78:1>](<array_max_1033@78:0>:int,<array_max_1033@78:1>:int),
      ((<<array_max_1033@78:3>@81:0> = 0) && (<array_max_1033@78:1> >= <array_max_1033@78:0>))
      |- P[<<array_max_1033@78:3>@81:0>](<array_max_1033@78:0>:int,<array_max_1033@78:1>:int,
                                         <<array_max_1033@78:3>@81:0>:int)
      
       (<array_max_1033@78:1> = 0) |- P[<array_max_1033@78:1>](<array_max_1033@78:0>:int,
                                                               <array_max_1033@78:1>:int)
    begin ParamSubstInfer.infer(11061)[3]
      
    end ParamSubstInfer.infer(11061)[3] (0.125980 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(11063)[3]
      
    end RefTypeInfer.elim_coeffs(11063)[3] (0.002000 sec.)
    begin YhornInterface.solve(11602)[3]
      begin HcSolver.solve_ub(11603)[4]
        encoded:
          P[<fail_1487@109:0>](<fail_1487@109:0>:int)|- bot
          
          P[<check_1148@85:2>](<f_check_1482@106:2>:int,<f_check_1482@106:0>:int,<f_check_1482@106:1>:int),
          P[<<<check_1148@85:3>@88:1>@104:0>](<f_check_1482@106:2>:int,<f_check_1482@106:0>:int,<f_check_1482@106:1>:int,<f_check_1482@106:0>:int,<f_check_1482@106:5>:int),
          ((<f_check_1482@106:5> > <f_check_1482@106:1>) &&
           ((<f_check_1482@106:0> < <f_check_1482@106:2>) && (<fail_1487@109:0> = 1)))
          |- P[<fail_1487@109:0>](<fail_1487@109:0>:int)
          
          P[<<array_max_1033@78:3>@81:0>](<check_1148@85:0>:int,0:int,<check_1148@85:2>:int),
          P[<<make_array_1030@90:2>@102:0>](<check_1148@85:0>:int,<<check_1148@85:3>@88:0>:int,<<<check_1148@85:3>@88:1>@104:0>:int),
          P[<check_1148@85:2>](<check_1148@85:0>:int,<check_1148@85:1>:int,<check_1148@85:2>:int),
          (<check_1148@85:1> = 0)
          |- P[<<<check_1148@85:3>@88:1>@104:0>](<check_1148@85:0>:int,
                                                 <check_1148@85:1>:int,
                                                 <check_1148@85:2>:int,
                                                 <<check_1148@85:3>@88:0>:int,
                                                 <<<check_1148@85:3>@88:1>@104:0>:int)
          
          P[<make_array_1030@90:1>](<make_array_1030@90:0>:int,<make_array_1030@90:1>:int),
          ((0 <= <make_array_1030@90:1>) &&
           ((<make_array_1030@90:1> < <make_array_1030@90:0>) &&
            (<<make_array_1030@90:2>@102:0> = <make_array_1030@90:1>)))
          |- P[<<make_array_1030@90:2>@102:0>](<make_array_1030@90:0>:int,
                                               <make_array_1030@90:1>:int,
                                               <<make_array_1030@90:2>@102:0>:int)
          
          P[<<array_max_1033@78:3>@81:0>](<make_array_1030@90:0>:int,0:int,<check_1148@85:2>:int),
          P[<<check_1148@85:3>@88:0>](<make_array_1030@90:0>:int,0:int,<check_1148@85:2>:int,<make_array_1030@90:1>:int)|- P[<make_array_1030@90:1>](
          <make_array_1030@90:0>:int,<make_array_1030@90:1>:int)
          
          P[<check_1148@85:2>](<check_1148@85:0>:int,<check_1148@85:1>:int,<check_1148@85:2>:int),
          ((<check_1148@85:1> < <check_1148@85:0>) && (<<check_1148@85:3>@88:0> = <check_1148@85:1>))
          |- P[<<check_1148@85:3>@88:0>](<check_1148@85:0>:int,<check_1148@85:1>:int,
                                         <check_1148@85:2>:int,<<check_1148@85:3>@88:0>:int)
          
          P[<<array_max_1033@78:3>@81:0>](<check_1148@85:0>:int,0:int,<check_1148@85:2>:int), (
          <check_1148@85:1> = 0)
          |- P[<check_1148@85:2>](<check_1148@85:0>:int,<check_1148@85:1>:int,
                                  <check_1148@85:2>:int)
          
          P[<array_max_1033@78:1>](<array_max_1033@78:0>:int,<array_max_1033@78:1>:int),
          ((<<array_max_1033@78:3>@81:0> = 0) && (<array_max_1033@78:1> >= <array_max_1033@78:0>))
          |- P[<<array_max_1033@78:3>@81:0>](<array_max_1033@78:0>:int,
                                             <array_max_1033@78:1>:int,
                                             <<array_max_1033@78:3>@81:0>:int)
          
           (<array_max_1033@78:1> = 0) |- P[<array_max_1033@78:1>](<array_max_1033@78:0>:int,
                                                                   <array_max_1033@78:1>:int)
        input to Yhorn:
          P[<fail_1487@109:0>](<fail_1487@109:0>:int)|- bot
          
          P[<check_1148@85:2>](<f_check_1482@106:2>:int,<f_check_1482@106:0>:int,<f_check_1482@106:1>:int),
          P[<<<check_1148@85:3>@88:1>@104:0>](<f_check_1482@106:2>:int,<f_check_1482@106:0>:int,<f_check_1482@106:1>:int,<f_check_1482@106:0>:int,<f_check_1482@106:5>:int),
          ((<f_check_1482@106:0> < <f_check_1482@106:2>) &&
           ((<f_check_1482@106:5> > <f_check_1482@106:1>) && (<fail_1487@109:0> = 1)))
          |- P[<fail_1487@109:0>](<fail_1487@109:0>:int)
          
          P[<<array_max_1033@78:3>@81:0>](<check_1148@85:0>:int,var239:int,<check_1148@85:2>:int),
          P[<<make_array_1030@90:2>@102:0>](<check_1148@85:0>:int,<<check_1148@85:3>@88:0>:int,<<<check_1148@85:3>@88:1>@104:0>:int),
          P[<check_1148@85:2>](<check_1148@85:0>:int,<check_1148@85:1>:int,<check_1148@85:2>:int),
          ((var239 = 0) && (<check_1148@85:1> = 0))
          |- P[<<<check_1148@85:3>@88:1>@104:0>](<check_1148@85:0>:int,
                                                 <check_1148@85:1>:int,
                                                 <check_1148@85:2>:int,
                                                 <<check_1148@85:3>@88:0>:int,
                                                 <<<check_1148@85:3>@88:1>@104:0>:int)
          
          P[<make_array_1030@90:1>](<make_array_1030@90:0>:int,<make_array_1030@90:1>:int),
          ((<<make_array_1030@90:2>@102:0> = <make_array_1030@90:1>) &&
           ((<make_array_1030@90:1> < <make_array_1030@90:0>) && (0 <= <make_array_1030@90:1>)))
          |- P[<<make_array_1030@90:2>@102:0>](<make_array_1030@90:0>:int,
                                               <make_array_1030@90:1>:int,
                                               <<make_array_1030@90:2>@102:0>:int)
          
          P[<<array_max_1033@78:3>@81:0>](<make_array_1030@90:0>:int,var240:int,<check_1148@85:2>:int),
          P[<<check_1148@85:3>@88:0>](<make_array_1030@90:0>:int,var241:int,<check_1148@85:2>:int,<make_array_1030@90:1>:int),
          ((var241 = 0) && (var240 = 0))
          |- P[<make_array_1030@90:1>](<make_array_1030@90:0>:int,<make_array_1030@90:1>:int)
          
          P[<check_1148@85:2>](<check_1148@85:0>:int,<check_1148@85:1>:int,<check_1148@85:2>:int),
          ((<<check_1148@85:3>@88:0> = <check_1148@85:1>) && (<check_1148@85:1> < <check_1148@85:0>))
          |- P[<<check_1148@85:3>@88:0>](<check_1148@85:0>:int,<check_1148@85:1>:int,
                                         <check_1148@85:2>:int,<<check_1148@85:3>@88:0>:int)
          
          P[<<array_max_1033@78:3>@81:0>](<check_1148@85:0>:int,var242:int,<check_1148@85:2>:int),
          ((var242 = 0) && (<check_1148@85:1> = 0))
          |- P[<check_1148@85:2>](<check_1148@85:0>:int,<check_1148@85:1>:int,
                                  <check_1148@85:2>:int)
          
          P[<array_max_1033@78:1>](<array_max_1033@78:0>:int,<array_max_1033@78:1>:int),
          ((<array_max_1033@78:1> >= <array_max_1033@78:0>) && (<<array_max_1033@78:3>@81:0> = 0))
          |- P[<<array_max_1033@78:3>@81:0>](<array_max_1033@78:0>:int,
                                             <array_max_1033@78:1>:int,
                                             <<array_max_1033@78:3>@81:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1487_sep_109_sep_0($343)) -> 1=0.
(($343-1=0) & ($344-$345>0) & ($346-$347<0)) & (v_sep_check_1148_sep_85_sep_3_sep_88_sep_1_sep_104_sep_0($347,$346,$345,$346,$344)) & (v_sep_check_1148_sep_85_sep_2($347,$346,$345)) -> v_sep_fail_1487_sep_109_sep_0($343).
(($348=0) & ($349=0)) & (v_sep_check_1148_sep_85_sep_2($350,$348,$351)) & (v_sep_make_array_1030_sep_90_sep_2_sep_102_sep_0($350,$352,$353)) & (v_sep_array_max_1033_sep_78_sep_3_sep_81_sep_0($350,$349,$351)) -> v_sep_check_1148_sep_85_sep_3_sep_88_sep_1_sep_104_sep_0($350,$348,$351,$352,$353).
((-$354<=0) & ($354-$355<0) & (-$354+$356=0)) & (v_sep_make_array_1030_sep_90_sep_1($355,$354)) -> v_sep_make_array_1030_sep_90_sep_2_sep_102_sep_0($355,$354,$356).
(($357=0) & ($358=0)) & (v_sep_check_1148_sep_85_sep_3_sep_88_sep_0($355,$358,$351,$354)) & (v_sep_array_max_1033_sep_78_sep_3_sep_81_sep_0($355,$357,$351)) -> v_sep_make_array_1030_sep_90_sep_1($355,$354).
(($348-$350<0) & (-$348+$352=0)) & (v_sep_check_1148_sep_85_sep_2($350,$348,$351)) -> v_sep_check_1148_sep_85_sep_3_sep_88_sep_0($350,$348,$351,$352).
(($348=0) & ($359=0)) & (v_sep_array_max_1033_sep_78_sep_3_sep_81_sep_0($350,$359,$351)) -> v_sep_check_1148_sep_85_sep_2($350,$348,$351).
(($360=0) & ($361-$362>=0)) & (v_sep_array_max_1033_sep_78_sep_1($362,$361)) -> v_sep_array_max_1033_sep_78_sep_3_sep_81_sep_0($362,$361,$360).
$361=0 -> v_sep_array_max_1033_sep_78_sep_1($362,$361).


v_sep_array_max_1033_sep_78_sep_1: X
v_sep_array_max_1033_sep_78_sep_3_sep_81_sep_0: X
v_sep_check_1148_sep_85_sep_2: X
v_sep_check_1148_sep_85_sep_3_sep_88_sep_0: X
v_sep_check_1148_sep_85_sep_3_sep_88_sep_1_sep_104_sep_0: X
v_sep_fail_1487_sep_109_sep_0: X
v_sep_make_array_1030_sep_90_sep_1: X
v_sep_make_array_1030_sep_90_sep_2_sep_102_sep_0: X
.............
v_sep_array_max_1033_sep_78_sep_1: X
v_sep_array_max_1033_sep_78_sep_3_sep_81_sep_0: X
v_sep_check_1148_sep_85_sep_2: X
v_sep_check_1148_sep_85_sep_3_sep_88_sep_0: X
v_sep_check_1148_sep_85_sep_3_sep_88_sep_1_sep_104_sep_0: X
v_sep_fail_1487_sep_109_sep_0: X
v_sep_make_array_1030_sep_90_sep_1: X
v_sep_make_array_1030_sep_90_sep_2_sep_102_sep_0: X
....
v_sep_array_max_1033_sep_78_sep_1: X
v_sep_array_max_1033_sep_78_sep_3_sep_81_sep_0: X
v_sep_check_1148_sep_85_sep_2: X
v_sep_check_1148_sep_85_sep_3_sep_88_sep_0: X
v_sep_check_1148_sep_85_sep_3_sep_88_sep_1_sep_104_sep_0: X
v_sep_fail_1487_sep_109_sep_0: X
v_sep_make_array_1030_sep_90_sep_1: X
v_sep_make_array_1030_sep_90_sep_2_sep_102_sep_0: X
........
v_sep_array_max_1033_sep_78_sep_1: X
v_sep_array_max_1033_sep_78_sep_3_sep_81_sep_0: X
v_sep_check_1148_sep_85_sep_2: X
v_sep_check_1148_sep_85_sep_3_sep_88_sep_0: X
v_sep_check_1148_sep_85_sep_3_sep_88_sep_1_sep_104_sep_0: X
v_sep_fail_1487_sep_109_sep_0: X
v_sep_make_array_1030_sep_90_sep_1: X
v_sep_make_array_1030_sep_90_sep_2_sep_102_sep_0: X
..........
v_sep_array_max_1033_sep_78_sep_1: X
v_sep_array_max_1033_sep_78_sep_3_sep_81_sep_0: X
v_sep_check_1148_sep_85_sep_2: X
v_sep_check_1148_sep_85_sep_3_sep_88_sep_0: X
v_sep_check_1148_sep_85_sep_3_sep_88_sep_1_sep_104_sep_0: X
v_sep_fail_1487_sep_109_sep_0: X
v_sep_make_array_1030_sep_90_sep_1: X
v_sep_make_array_1030_sep_90_sep_2_sep_102_sep_0: X
............
v_sep_array_max_1033_sep_78_sep_1: X
v_sep_array_max_1033_sep_78_sep_3_sep_81_sep_0: X
v_sep_check_1148_sep_85_sep_2: X
v_sep_check_1148_sep_85_sep_3_sep_88_sep_0: X
v_sep_check_1148_sep_85_sep_3_sep_88_sep_1_sep_104_sep_0: X
v_sep_fail_1487_sep_109_sep_0: X
v_sep_make_array_1030_sep_90_sep_1: X
v_sep_make_array_1030_sep_90_sep_2_sep_102_sep_0: X
.............(0=0) & (v_sep_fail_1487_sep_109_sep_0($343)) -> 1=0.
(($343-1=0) & ($344-$345>0) & ($346-$347<0)) & (v_sep_check_1148_sep_85_sep_3_sep_88_sep_1_sep_104_sep_0($347,$346,$345,$346,$344)) & (v_sep_check_1148_sep_85_sep_2($347,$346,$345)) -> v_sep_fail_1487_sep_109_sep_0($343).
(($348=0) & ($349=0)) & (v_sep_check_1148_sep_85_sep_2($350,$348,$351)) & (v_sep_make_array_1030_sep_90_sep_2_sep_102_sep_0($350,$352,$353)) & (v_sep_array_max_1033_sep_78_sep_3_sep_81_sep_0($350,$349,$351)) -> v_sep_check_1148_sep_85_sep_3_sep_88_sep_1_sep_104_sep_0($350,$348,$351,$352,$353).
((-$354<=0) & ($354-$355<0) & (-$354+$356=0)) & (v_sep_make_array_1030_sep_90_sep_1($355,$354)) -> v_sep_make_array_1030_sep_90_sep_2_sep_102_sep_0($355,$354,$356).
(($357=0) & ($358=0)) & (v_sep_check_1148_sep_85_sep_3_sep_88_sep_0($355,$358,$351,$354)) & (v_sep_array_max_1033_sep_78_sep_3_sep_81_sep_0($355,$357,$351)) -> v_sep_make_array_1030_sep_90_sep_1($355,$354).
(($348-$350<0) & (-$348+$352=0)) & (v_sep_check_1148_sep_85_sep_2($350,$348,$351)) -> v_sep_check_1148_sep_85_sep_3_sep_88_sep_0($350,$348,$351,$352).
(($348=0) & ($359=0)) & (v_sep_array_max_1033_sep_78_sep_3_sep_81_sep_0($350,$359,$351)) -> v_sep_check_1148_sep_85_sep_2($350,$348,$351).
(($360=0) & ($361-$362>=0)) & (v_sep_array_max_1033_sep_78_sep_1($362,$361)) -> v_sep_array_max_1033_sep_78_sep_3_sep_81_sep_0($362,$361,$360).
$361=0 -> v_sep_array_max_1033_sep_78_sep_1($362,$361).

           (<array_max_1033@78:1> = 0) |- P[<array_max_1033@78:1>](<array_max_1033@78:0>:int,
                                                                   <array_max_1033@78:1>:int)
        solution:
          P[<array_max_1033@78:1>]($412:int,$414:int) = ($414 <= 0)
          P[<<array_max_1033@78:3>@81:0>]($391:int,$393:int,$395:int) = ($391 <= 0)
          P[<check_1148@85:2>]($377:int,$379:int,$381:int) = ($377 <= 0)
          P[<<check_1148@85:3>@88:0>]($403:int,$405:int,$407:int,$409:int) = ($403 <= 0)
          P[<<<check_1148@85:3>@88:1>@104:0>]($366:int,$368:int,$370:int,$372:int,$374:int) =
          ((4 * $366) <= (5 * $368))
          P[<fail_1487@109:0>]($363:bool) = false
          P[<make_array_1030@90:1>]($398:int,$400:int) = ($398 <= 0)
          P[<<make_array_1030@90:2>@102:0>]($384:int,$386:int,$388:int) = ($384 <= 0)
        
      end HcSolver.solve_ub(11603)[4] (0.023997 sec.)
      begin HcSolver.check_validity(12009)[4]
        input:
          P[<fail_1487@109:0>](<fail_1487@109:0>:bool)|- bot
          
          P[<check_1148@85:2>](<f_check_1482@106:2>:int,<f_check_1482@106:0>:int,<f_check_1482@106:1>:int),
          P[<<<check_1148@85:3>@88:1>@104:0>](<f_check_1482@106:2>:int,<f_check_1482@106:0>:int,<f_check_1482@106:1>:int,<f_check_1482@106:0>:int,<f_check_1482@106:5>:int),
          ((<f_check_1482@106:5> > <f_check_1482@106:1>) &&
           ((<f_check_1482@106:0> < <f_check_1482@106:2>) && <fail_1487@109:0>))
          |- P[<fail_1487@109:0>](<fail_1487@109:0>:bool)
          
          P[<<array_max_1033@78:3>@81:0>](<check_1148@85:0>:int,0:int,<check_1148@85:2>:int),
          P[<<make_array_1030@90:2>@102:0>](<check_1148@85:0>:int,<<check_1148@85:3>@88:0>:int,<<<check_1148@85:3>@88:1>@104:0>:int),
          P[<check_1148@85:2>](<check_1148@85:0>:int,<check_1148@85:1>:int,<check_1148@85:2>:int),
          (<check_1148@85:1> = 0)
          |- P[<<<check_1148@85:3>@88:1>@104:0>](<check_1148@85:0>:int,
                                                 <check_1148@85:1>:int,
                                                 <check_1148@85:2>:int,
                                                 <<check_1148@85:3>@88:0>:int,
                                                 <<<check_1148@85:3>@88:1>@104:0>:int)
          
          P[<make_array_1030@90:1>](<make_array_1030@90:0>:int,<make_array_1030@90:1>:int),
          ((0 <= <make_array_1030@90:1>) &&
           ((<make_array_1030@90:1> < <make_array_1030@90:0>) &&
            (<<make_array_1030@90:2>@102:0> = <make_array_1030@90:1>)))
          |- P[<<make_array_1030@90:2>@102:0>](<make_array_1030@90:0>:int,
                                               <make_array_1030@90:1>:int,
                                               <<make_array_1030@90:2>@102:0>:int)
          
          P[<<array_max_1033@78:3>@81:0>](<make_array_1030@90:0>:int,0:int,<check_1148@85:2>:int),
          P[<<check_1148@85:3>@88:0>](<make_array_1030@90:0>:int,0:int,<check_1148@85:2>:int,<make_array_1030@90:1>:int)|- P[<make_array_1030@90:1>](
          <make_array_1030@90:0>:int,<make_array_1030@90:1>:int)
          
          P[<check_1148@85:2>](<check_1148@85:0>:int,<check_1148@85:1>:int,<check_1148@85:2>:int),
          ((<check_1148@85:1> < <check_1148@85:0>) && (<<check_1148@85:3>@88:0> = <check_1148@85:1>))
          |- P[<<check_1148@85:3>@88:0>](<check_1148@85:0>:int,<check_1148@85:1>:int,
                                         <check_1148@85:2>:int,<<check_1148@85:3>@88:0>:int)
          
          P[<<array_max_1033@78:3>@81:0>](<check_1148@85:0>:int,0:int,<check_1148@85:2>:int), (
          <check_1148@85:1> = 0)
          |- P[<check_1148@85:2>](<check_1148@85:0>:int,<check_1148@85:1>:int,
                                  <check_1148@85:2>:int)
          
          P[<array_max_1033@78:1>](<array_max_1033@78:0>:int,<array_max_1033@78:1>:int),
          ((<<array_max_1033@78:3>@81:0> = 0) && (<array_max_1033@78:1> >= <array_max_1033@78:0>))
          |- P[<<array_max_1033@78:3>@81:0>](<array_max_1033@78:0>:int,
                                             <array_max_1033@78:1>:int,
                                             <<array_max_1033@78:3>@81:0>:int)
          
           (<array_max_1033@78:1> = 0) |- P[<array_max_1033@78:1>](<array_max_1033@78:0>:int,
                                                                   <array_max_1033@78:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(12009)[4] (0.013997 sec.)
      solution:
        P[<array_max_1033@78:1>]($412:int,$414:int) = ($414 <= 0)
        P[<<array_max_1033@78:3>@81:0>]($391:int,$393:int,$395:int) = ($391 <= 0)
        P[<check_1148@85:2>]($377:int,$379:int,$381:int) = ($377 <= 0)
        P[<<check_1148@85:3>@88:0>]($403:int,$405:int,$407:int,$409:int) = ($403 <= 0)
        P[<<<check_1148@85:3>@88:1>@104:0>]($366:int,$368:int,$370:int,$372:int,$374:int) = ((4 * $366) <= (5 * $368))
        P[<fail_1487@109:0>]($363:bool) = false
        P[<make_array_1030@90:1>]($398:int,$400:int) = ($398 <= 0)
        P[<<make_array_1030@90:2>@102:0>]($384:int,$386:int,$388:int) = ($384 <= 0)
    end YhornInterface.solve(11602)[3] (0.037994 sec.)
    
  end RefTypeInfer.infer_etrs(8154)[2] (0.184971 sec.)
  refinement types:
    main_1479: X
    f_1484: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    array_max_1033: v1:int ->
                    v2:{v2:int | (v2 <= 0)} -> (v3:int -> (v4:int -> X) -> X) -> (v7:{v7:int | (v1 <= 0)} -> X) -> X
    f_main_1483: v1:int -> (v2:unit -> X) -> v4:int -> X
    check_1148: v1:int ->
                v2:int ->
                v3:{v3:int | (v1 <= 0)} ->
                (v4:{v4:int | (v1 <= 0)} -> (v5:{v5:int | ((4 * v1) <= (5 * v2))} -> X) -> X) -> (v8:unit -> X) -> X
    make_array_1030: v1:int -> v2:{v2:int | (v1 <= 0)} -> (v3:{v3:int | (v1 <= 0)} -> X) -> X
    k_make_array_u_1182: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1193: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_check_1482: v1:int -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> (v8:unit -> X) -> v10:int -> X
    fail_1487: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1485: var263:int -> var262:unit -> X
    f_array_max_1480: var273:int ->
                      var272:int -> (var271:int -> (var270:int -> X) -> X) -> (var267:int -> X) -> var265:int -> X
    f_array_max_1481: var280:int -> var279:int -> var278:int -> (var277:int -> X) -> var275:int -> X
    fail_1486: var284:bool -> (var283:unit -> X) -> X
    k_check_u_1336: var295:int ->
                    var294:int ->
                    var293:int -> (var292:int -> (var291:int -> X) -> X) -> (var288:unit -> X) -> var286:unit -> X
  abstraction types:
    main_1479: X
    f_1484: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    array_max_1033: v1:int ->
                    v2:int[v2 -> (v2 <= 0)] -> (v3:int -> (v4:int -> X) -> X) -> (v7:int[v7 -> (
                                                                    v1 <= 0)] -> X) -> X
    f_main_1483: v1:int -> (v2:unit -> X) -> v4:int -> X
    check_1148: v1:int ->
                v2:int ->
                v3:int[v3 -> (v1 <= 0)] ->
                (v4:int[v4 -> (v1 <= 0)] -> (v5:int[v5 -> ((4 * v1) <= (5 * v2))] -> X) -> X) -> (v8:unit -> X) -> X
    make_array_1030: v1:int -> v2:int[v2 -> (v1 <= 0)] -> (v3:int[v3 -> (
                                                                  v1 <= 0)] -> X) -> X
    k_make_array_u_1182: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1193: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_check_1482: v1:int -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> (v8:unit -> X) -> v10:int -> X
    fail_1487: v1:bool -> (v2:unit -> X) -> X
    f_1485: var263:int -> var262:unit -> X
    f_array_max_1480: var273:int ->
                      var272:int -> (var271:int -> (var270:int -> X) -> X) -> (var267:int -> X) -> var265:int -> X
    f_array_max_1481: var280:int -> var279:int -> var278:int -> (var277:int -> X) -> var275:int -> X
    fail_1486: var284:bool -> (var283:unit -> X) -> X
    k_check_u_1336: var295:int ->
                    var294:int ->
                    var293:int -> (var292:int -> (var291:int -> X) -> X) -> (var288:unit -> X) -> var286:unit -> X
  
end AbsTypeInfer.refine(8153)[1] (0.189970 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1479
  main_1479 -> (rand_int f_1484)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (i_1035 >= n_1034) -> (k_array_max_1226 0)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (not (i_1035 >= n_1034)) ->
      (a_1036 i_1035 (f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226))
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (i_1041 >= n_1040) -> (k_check_1309 ())
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (not (i_1041 >= n_1040)) ->
      (a_1043 i_1041 (f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_1484 x_1454 -> (main_1044 x_1454 (f_1485 x_1454))
  f_1485 x_1454 x_1451 -> end
  f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 ->
      (array_max_1033 n_1034 (i_1035 + 1) a_1036 (f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226))
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (x_1229 > x_1242) -> (k_array_max_1226 x_1229)
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (
      not (x_1229 > x_1242)) -> (k_array_max_1226 x_1242)
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      x_1315 <= max_1042) -> (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 ())
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      not (x_1315 <= max_1042)) -> (fail_1487 true (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_main_1483 n_1045 k_main_1380 x_1399 -> (check_1148 n_1045 0 x_1399 (make_array_1030 n_1045) k_main_1380)
  fail_1486 b k -> {fail} => (k ())
  fail_1487 b k -> {fail} => (k ())
  k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 ->
      (check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 k_check_1309)
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when b_1194 ->
      (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 ())
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when (not b_1194) ->
      (fail_1486 true (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176))
  k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 -> (k_make_array_1176 i_1032)
  main_1044 n_1045 k_main_1380 -> (array_max_1033 n_1045 0 (make_array_1030 n_1045) (f_main_1483 n_1045 k_main_1380))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (0 <= i_1032) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (not (0 <= i_1032)) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 false)
Types:
  main_1479 : X
  array_max_1033 : (x_1:int ->
                    x_2:int[x_2 <= 0] ->
                    (x_4:int[x_1 >= x_4 + 1; x_2 <= x_4] -> (int -> X) -> X) -> (int[x_1 <= 0] -> X) -> X)
  check_1148 : (x_1:int ->
                x_2:int ->
                int[x_1 <= 0] -> (x_5:int[x_1 <= 0; x_2 <= x_5] -> (int[4*x_1 <= 5*x_2] -> X) -> X) -> (unit -> X) -> X)
  fail_1486 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1487 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_array_1030 : (x_1:int -> x_2:int[x_1 <= 0; x_1 >= x_2 + 1; x_2 >= 0] -> (int[x_1 <= 0] -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Error trace::
  main_1479 ... --> 
  f_1484 ... --> 
  main_1044 ... --> 
  array_max_1033 [1/2] ... --> 
  f_main_1483 ... --> 
  check_1148 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1182 [2/2] ... --> 
  fail_1486 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 0; 1; 0

(4-3) Checking counter-example ... DONE!

(4-4) Discovering predicates ... 
begin AbsTypeInfer.refine(16114)[1]
  program:
    main_1479  | true = ((Random.int 0) f_1484)
    array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 | (i_1035 >= n_1034) = (
    k_array_max_1226 0)
    array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 | (not (i_1035 >= n_1034)) = (
    a_1036 i_1035
           (f_array_max_1480 i_1035
                             n_1034
                             a_1036
                             k_array_max_1226))
    check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 | (i_1041 >= n_1040) = (
    k_check_1309 ())
    check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 | (not (i_1041 >= n_1040)) = (
    a_1043 i_1041
           (f_check_1482 i_1041
                         max_1042
                         n_1040
                         a_1043
                         k_check_1309))
    f_1484 x_1454 | true = (main_1044 x_1454
                                      (f_1485 x_1454))
    f_1485 x_1454 x_1451 | true = end
    f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 | true = (
    array_max_1033 n_1034
                   (i_1035 + 1)
                   a_1036
                   (f_array_max_1481 i_1035
                                     n_1034
                                     x_1229
                                     k_array_max_1226))
    f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 | (
    x_1229 > x_1242) = (k_array_max_1226 x_1229)
    f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 | (
    not (x_1229 > x_1242)) = (k_array_max_1226 x_1242)
    f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 | (
    x_1315 <= max_1042) = (k_check_u_1336 i_1041
                                          max_1042
                                          n_1040
                                          a_1043
                                          k_check_1309
                                          ())
    f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 | (
    not (x_1315 <= max_1042)) = (fail_1487 true
                                           (k_check_u_1336 i_1041
                                                           max_1042
                                                           n_1040
                                                           a_1043
                                                           k_check_1309))
    f_main_1483 n_1045 k_main_1380 x_1399 | true = (check_1148 n_1045
                                                               0
                                                               x_1399
                                                               (make_array_1030 n_1045)
                                                               k_main_1380)
    fail_1486 b k | true = (fail ())
    fail_1487 b k | true = (fail ())
    k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 | true = (
    check_1148 n_1040
               (i_1041 + 1)
               max_1042
               a_1043
               k_check_1309)
    k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 | b_1194 = (
    k_make_array_u_1193 i_1032
                        n_1031
                        k_make_array_1176
                        ())
    k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 | (not b_1194) = (
    fail_1486 true
              (k_make_array_u_1193 i_1032
                                   n_1031
                                   k_make_array_1176))
    k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 | true = (
    k_make_array_1176 i_1032)
    main_1044 n_1045 k_main_1380 | true = (array_max_1033
                                             n_1045
                                             0
                                             (make_array_1030 n_1045)
                                             (f_main_1483 n_1045
                                                          k_main_1380))
    make_array_1030 n_1031 i_1032 k_make_array_1176 | (0 <= i_1032) = (
    k_make_array_u_1182 i_1032
                        n_1031
                        k_make_array_1176
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1176 | (not (0 <= i_1032)) = (
    k_make_array_u_1182 i_1032
                        n_1031
                        k_make_array_1176
                        false)
    main_1479:X
    array_max_1033:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    check_1148:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> X
    f_1484:int -> X
    f_1485:int -> unit -> X
    f_array_max_1480:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_array_max_1481:int -> int -> int -> (int -> X) -> int -> X
    f_check_1482:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> int -> X
    f_main_1483:int -> (unit -> X) -> int -> X
    fail_1486:bool -> (unit -> X) -> X
    fail_1487:bool -> (unit -> X) -> X
    k_check_u_1336:int -> int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> unit -> X
    k_make_array_u_1182:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1193:int -> int -> (int -> X) -> unit -> X
    main_1044:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1484,f_1485,f_array_max_1480,f_array_max_1481,f_check_1482,f_main_1483,k_check_u_1336,k_make_array_u_1182,k_make_array_u_1193,main_1044
  counterexample: 0:0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1484@115:0> = var296)
     [true.(<main_1044@117:0> = <f_1484@115:0>)
      [true.((<array_max_1033@119:0> = <main_1044@117:0>) && (<array_max_1033@119:1> = 0))
       [(<array_max_1033@119:1> >= <array_max_1033@119:0>).(<<array_max_1033@119:3>@122:0> = 0)
        [true.((<f_main_1483@124:0> = <main_1044@117:0>) && (<f_main_1483@124:2> = <<array_max_1033@119:3>@122:0>))
         [true.
          ((<check_1148@126:0> = <f_main_1483@124:0>) &&
           ((<check_1148@126:1> = 0) && (<check_1148@126:2> = <f_main_1483@124:2>)))
          [(not (<check_1148@126:1> >= <check_1148@126:0>)).(<<check_1148@126:3>@129:0> = <check_1148@126:1>)
           [true.
            ((<make_array_1030@131:0> = <f_main_1483@124:0>) && (<make_array_1030@131:1> = <<check_1148@126:3>@129:0>))
            [(0 <= <make_array_1030@131:1>).
             ((<k_make_array_u_1182@134:0> = <make_array_1030@131:1>) &&
              ((<k_make_array_u_1182@134:1> = <make_array_1030@131:0>) &&
               (<k_make_array_u_1182@134:3> = (<make_array_1030@131:1> < <make_array_1030@131:0>))))
             [(not <k_make_array_u_1182@134:3>).(<fail_1486@137:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(16115)[2]
    horn clauses:
      P[<fail_1486@137:0>](<fail_1486@137:0>:bool)|- bot
      
      P[<k_make_array_u_1182@134:3>](<k_make_array_u_1182@134:0>:int,<k_make_array_u_1182@134:1>:int,false:bool),
      <fail_1486@137:0> |- P[<fail_1486@137:0>](<fail_1486@137:0>:bool)
      
      P[<make_array_1030@131:1>](<k_make_array_u_1182@134:1>:int,<k_make_array_u_1182@134:0>:int),
      ((0 <= <k_make_array_u_1182@134:0>) &&
       (<k_make_array_u_1182@134:3> = (<k_make_array_u_1182@134:0> < <k_make_array_u_1182@134:1>)))
      |- P[<k_make_array_u_1182@134:3>](<k_make_array_u_1182@134:0>:int,
                                        <k_make_array_u_1182@134:1>:int,
                                        <k_make_array_u_1182@134:3>:bool)
      
      P[<f_main_1483@124:2>](<make_array_1030@131:0>:int,<check_1148@126:2>:int),
      P[<<check_1148@126:3>@129:0>](<make_array_1030@131:0>:int,0:int,<check_1148@126:2>:int,<make_array_1030@131:1>:int)|- P[<make_array_1030@131:1>](
      <make_array_1030@131:0>:int,<make_array_1030@131:1>:int)
      
      P[<check_1148@126:2>](<check_1148@126:0>:int,<check_1148@126:1>:int,<check_1148@126:2>:int),
      ((<check_1148@126:1> < <check_1148@126:0>) && (<<check_1148@126:3>@129:0> = <check_1148@126:1>))
      |- P[<<check_1148@126:3>@129:0>](<check_1148@126:0>:int,<check_1148@126:1>:int,
                                       <check_1148@126:2>:int,<<check_1148@126:3>@129:0>:int)
      
      P[<f_main_1483@124:2>](<check_1148@126:0>:int,<check_1148@126:2>:int), (
      <check_1148@126:1> = 0)
      |- P[<check_1148@126:2>](<check_1148@126:0>:int,<check_1148@126:1>:int,
                               <check_1148@126:2>:int)
      
      P[<main_1044@117:0>](<f_main_1483@124:0>:int),
      P[<<array_max_1033@119:3>@122:0>](<f_main_1483@124:0>:int,0:int,<f_main_1483@124:2>:int)|- P[<f_main_1483@124:2>](
      <f_main_1483@124:0>:int,<f_main_1483@124:2>:int)
      
      P[<array_max_1033@119:1>](<array_max_1033@119:0>:int,<array_max_1033@119:1>:int),
      ((<<array_max_1033@119:3>@122:0> = 0) && (<array_max_1033@119:1> >= <array_max_1033@119:0>))
      |- P[<<array_max_1033@119:3>@122:0>](<array_max_1033@119:0>:int,
                                           <array_max_1033@119:1>:int,
                                           <<array_max_1033@119:3>@122:0>:int)
      
      P[<main_1044@117:0>](<array_max_1033@119:0>:int), (<array_max_1033@119:1> = 0)
      |- P[<array_max_1033@119:1>](<array_max_1033@119:0>:int,<array_max_1033@119:1>:int)
      
      P[<f_1484@115:0>](<main_1044@117:0>:int)|- P[<main_1044@117:0>](<main_1044@117:0>:int)
      
      |- P[<f_1484@115:0>](<f_1484@115:0>:int)
    call trees:
      <main_1479@112>
        <f_1484@115>
          <main_1044@117>
            <array_max_1033@119>
            </<array_max_1033@119:3>@122>
            <f_main_1483@124>
              <check_1148@126>
              </<check_1148@126:3>@129>
              <make_array_1030@131>
                <k_make_array_u_1182@134>
                  <fail_1486@137>
    inlined horn clauses:
      P[<fail_1486@137:0>](<fail_1486@137:0>:bool)|- bot
      
      P[<make_array_1030@131:1>](<k_make_array_u_1182@134:1>:int,<k_make_array_u_1182@134:0>:int),
      ((0 <= <k_make_array_u_1182@134:0>) &&
       ((<k_make_array_u_1182@134:0> >= <k_make_array_u_1182@134:1>) && <fail_1486@137:0>))
      |- P[<fail_1486@137:0>](<fail_1486@137:0>:bool)
      
      P[<<array_max_1033@119:3>@122:0>](<make_array_1030@131:0>:int,0:int,<check_1148@126:2>:int),
      P[<<check_1148@126:3>@129:0>](<make_array_1030@131:0>:int,0:int,<check_1148@126:2>:int,<make_array_1030@131:1>:int)|- P[<make_array_1030@131:1>](
      <make_array_1030@131:0>:int,<make_array_1030@131:1>:int)
      
      P[<check_1148@126:2>](<check_1148@126:0>:int,<check_1148@126:1>:int,<check_1148@126:2>:int),
      ((<check_1148@126:1> < <check_1148@126:0>) && (<<check_1148@126:3>@129:0> = <check_1148@126:1>))
      |- P[<<check_1148@126:3>@129:0>](<check_1148@126:0>:int,<check_1148@126:1>:int,
                                       <check_1148@126:2>:int,<<check_1148@126:3>@129:0>:int)
      
      P[<<array_max_1033@119:3>@122:0>](<check_1148@126:0>:int,0:int,<check_1148@126:2>:int), (
      <check_1148@126:1> = 0)
      |- P[<check_1148@126:2>](<check_1148@126:0>:int,<check_1148@126:1>:int,
                               <check_1148@126:2>:int)
      
      P[<array_max_1033@119:1>](<array_max_1033@119:0>:int,<array_max_1033@119:1>:int),
      ((<<array_max_1033@119:3>@122:0> = 0) && (<array_max_1033@119:1> >= <array_max_1033@119:0>))
      |- P[<<array_max_1033@119:3>@122:0>](<array_max_1033@119:0>:int,
                                           <array_max_1033@119:1>:int,
                                           <<array_max_1033@119:3>@122:0>:int)
      
       (<array_max_1033@119:1> = 0) |- P[<array_max_1033@119:1>](<array_max_1033@119:0>:int,
                                                                 <array_max_1033@119:1>:int)
    begin ParamSubstInfer.infer(17809)[3]
      
    end ParamSubstInfer.infer(17809)[3] (0.549917 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(17811)[3]
      
    end RefTypeInfer.elim_coeffs(17811)[3] (0.002000 sec.)
    begin YhornInterface.solve(18164)[3]
      begin HcSolver.solve_ub(18165)[4]
        encoded:
          P[<fail_1486@137:0>](<fail_1486@137:0>:int)|- bot
          
          P[<make_array_1030@131:1>](<k_make_array_u_1182@134:1>:int,<k_make_array_u_1182@134:0>:int),
          ((0 <= <k_make_array_u_1182@134:0>) &&
           ((<k_make_array_u_1182@134:0> >= <k_make_array_u_1182@134:1>) && (<fail_1486@137:0> = 1)))
          |- P[<fail_1486@137:0>](<fail_1486@137:0>:int)
          
          P[<<array_max_1033@119:3>@122:0>](<make_array_1030@131:0>:int,0:int,<check_1148@126:2>:int),
          P[<<check_1148@126:3>@129:0>](<make_array_1030@131:0>:int,0:int,<check_1148@126:2>:int,<make_array_1030@131:1>:int)|- P[<make_array_1030@131:1>](
          <make_array_1030@131:0>:int,<make_array_1030@131:1>:int)
          
          P[<check_1148@126:2>](<check_1148@126:0>:int,<check_1148@126:1>:int,<check_1148@126:2>:int),
          ((<check_1148@126:1> < <check_1148@126:0>) && (<<check_1148@126:3>@129:0> = <check_1148@126:1>))
          |- P[<<check_1148@126:3>@129:0>](<check_1148@126:0>:int,<check_1148@126:1>:int,
                                           <check_1148@126:2>:int,<<check_1148@126:3>@129:0>:int)
          
          P[<<array_max_1033@119:3>@122:0>](<check_1148@126:0>:int,0:int,<check_1148@126:2>:int),
          (<check_1148@126:1> = 0)
          |- P[<check_1148@126:2>](<check_1148@126:0>:int,<check_1148@126:1>:int,
                                   <check_1148@126:2>:int)
          
          P[<array_max_1033@119:1>](<array_max_1033@119:0>:int,<array_max_1033@119:1>:int),
          ((<<array_max_1033@119:3>@122:0> = 0) && (<array_max_1033@119:1> >= <array_max_1033@119:0>))
          |- P[<<array_max_1033@119:3>@122:0>](<array_max_1033@119:0>:int,
                                               <array_max_1033@119:1>:int,
                                               <<array_max_1033@119:3>@122:0>:int)
          
           (<array_max_1033@119:1> = 0)
          |- P[<array_max_1033@119:1>](<array_max_1033@119:0>:int,<array_max_1033@119:1>:int)
        input to Yhorn:
          P[<fail_1486@137:0>](<fail_1486@137:0>:int)|- bot
          
          P[<make_array_1030@131:1>](<k_make_array_u_1182@134:1>:int,<k_make_array_u_1182@134:0>:int),
          ((<k_make_array_u_1182@134:0> >= <k_make_array_u_1182@134:1>) &&
           ((0 <= <k_make_array_u_1182@134:0>) && (<fail_1486@137:0> = 1)))
          |- P[<fail_1486@137:0>](<fail_1486@137:0>:int)
          
          P[<<array_max_1033@119:3>@122:0>](<make_array_1030@131:0>:int,var297:int,<check_1148@126:2>:int),
          P[<<check_1148@126:3>@129:0>](<make_array_1030@131:0>:int,var298:int,<check_1148@126:2>:int,<make_array_1030@131:1>:int),
          ((var298 = 0) && (var297 = 0))
          |- P[<make_array_1030@131:1>](<make_array_1030@131:0>:int,<make_array_1030@131:1>:int)
          
          P[<check_1148@126:2>](<check_1148@126:0>:int,<check_1148@126:1>:int,<check_1148@126:2>:int),
          ((<<check_1148@126:3>@129:0> = <check_1148@126:1>) && (<check_1148@126:1> < <check_1148@126:0>))
          |- P[<<check_1148@126:3>@129:0>](<check_1148@126:0>:int,<check_1148@126:1>:int,
                                           <check_1148@126:2>:int,<<check_1148@126:3>@129:0>:int)
          
          P[<<array_max_1033@119:3>@122:0>](<check_1148@126:0>:int,var299:int,<check_1148@126:2>:int),
          ((var299 = 0) && (<check_1148@126:1> = 0))
          |- P[<check_1148@126:2>](<check_1148@126:0>:int,<check_1148@126:1>:int,
                                   <check_1148@126:2>:int)
          
          P[<array_max_1033@119:1>](<array_max_1033@119:0>:int,<array_max_1033@119:1>:int),
          ((<array_max_1033@119:1> >= <array_max_1033@119:0>) && (<<array_max_1033@119:3>@122:0> = 0))
          |- P[<<array_max_1033@119:3>@122:0>](<array_max_1033@119:0>:int,
                                               <array_max_1033@119:1>:int,
                                               <<array_max_1033@119:3>@122:0>:int)
          
           (<array_max_1033@119:1> = 0)
          |- P[<array_max_1033@119:1>](<array_max_1033@119:0>:int,<array_max_1033@119:1>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1486_sep_137_sep_0($569)) -> 1=0.
(($569-1=0) & (-$570<=0) & ($570-$571>=0)) & (v_sep_make_array_1030_sep_131_sep_1($571,$570)) -> v_sep_fail_1486_sep_137_sep_0($569).
(($572=0) & ($573=0)) & (v_sep_check_1148_sep_126_sep_3_sep_129_sep_0($574,$573,$575,$576)) & (v_sep_array_max_1033_sep_119_sep_3_sep_122_sep_0($574,$572,$575)) -> v_sep_make_array_1030_sep_131_sep_1($574,$576).
(($577-$578<0) & (-$577+$579=0)) & (v_sep_check_1148_sep_126_sep_2($578,$577,$575)) -> v_sep_check_1148_sep_126_sep_3_sep_129_sep_0($578,$577,$575,$579).
(($577=0) & ($580=0)) & (v_sep_array_max_1033_sep_119_sep_3_sep_122_sep_0($578,$580,$575)) -> v_sep_check_1148_sep_126_sep_2($578,$577,$575).
(($581=0) & ($582-$583>=0)) & (v_sep_array_max_1033_sep_119_sep_1($583,$582)) -> v_sep_array_max_1033_sep_119_sep_3_sep_122_sep_0($583,$582,$581).
$582=0 -> v_sep_array_max_1033_sep_119_sep_1($583,$582).


v_sep_array_max_1033_sep_119_sep_1: X
v_sep_array_max_1033_sep_119_sep_3_sep_122_sep_0: X
v_sep_check_1148_sep_126_sep_2: X
v_sep_check_1148_sep_126_sep_3_sep_129_sep_0: X
v_sep_fail_1486_sep_137_sep_0: X
v_sep_make_array_1030_sep_131_sep_1: X
........
v_sep_array_max_1033_sep_119_sep_1: X
v_sep_array_max_1033_sep_119_sep_3_sep_122_sep_0: X
v_sep_check_1148_sep_126_sep_2: X
v_sep_check_1148_sep_126_sep_3_sep_129_sep_0: X
v_sep_fail_1486_sep_137_sep_0: X
v_sep_make_array_1030_sep_131_sep_1: X
...
v_sep_array_max_1033_sep_119_sep_1: X
v_sep_array_max_1033_sep_119_sep_3_sep_122_sep_0: X
v_sep_check_1148_sep_126_sep_2: X
v_sep_check_1148_sep_126_sep_3_sep_129_sep_0: X
v_sep_fail_1486_sep_137_sep_0: X
v_sep_make_array_1030_sep_131_sep_1: X
.....
v_sep_array_max_1033_sep_119_sep_1: X
v_sep_array_max_1033_sep_119_sep_3_sep_122_sep_0: X
v_sep_check_1148_sep_126_sep_2: X
v_sep_check_1148_sep_126_sep_3_sep_129_sep_0: X
v_sep_fail_1486_sep_137_sep_0: X
v_sep_make_array_1030_sep_131_sep_1: X
.......
v_sep_array_max_1033_sep_119_sep_1: X
v_sep_array_max_1033_sep_119_sep_3_sep_122_sep_0: X
v_sep_check_1148_sep_126_sep_2: X
v_sep_check_1148_sep_126_sep_3_sep_129_sep_0: X
v_sep_fail_1486_sep_137_sep_0: X
v_sep_make_array_1030_sep_131_sep_1: X
........(0=0) & (v_sep_fail_1486_sep_137_sep_0($569)) -> 1=0.
(($569-1=0) & (-$570<=0) & ($570-$571>=0)) & (v_sep_make_array_1030_sep_131_sep_1($571,$570)) -> v_sep_fail_1486_sep_137_sep_0($569).
(($572=0) & ($573=0)) & (v_sep_check_1148_sep_126_sep_3_sep_129_sep_0($574,$573,$575,$576)) & (v_sep_array_max_1033_sep_119_sep_3_sep_122_sep_0($574,$572,$575)) -> v_sep_make_array_1030_sep_131_sep_1($574,$576).
(($577-$578<0) & (-$577+$579=0)) & (v_sep_check_1148_sep_126_sep_2($578,$577,$575)) -> v_sep_check_1148_sep_126_sep_3_sep_129_sep_0($578,$577,$575,$579).
(($577=0) & ($580=0)) & (v_sep_array_max_1033_sep_119_sep_3_sep_122_sep_0($578,$580,$575)) -> v_sep_check_1148_sep_126_sep_2($578,$577,$575).
(($581=0) & ($582-$583>=0)) & (v_sep_array_max_1033_sep_119_sep_1($583,$582)) -> v_sep_array_max_1033_sep_119_sep_3_sep_122_sep_0($583,$582,$581).
$582=0 -> v_sep_array_max_1033_sep_119_sep_1($583,$582).

        solution:
          P[<array_max_1033@119:1>]($615:int,$617:int) = ($617 <= 0)
          P[<<array_max_1033@119:3>@122:0>]($601:int,$603:int,$605:int) = ($601 <= 0)
          P[<check_1148@126:2>]($608:int,$610:int,$612:int) = ($608 <= 0)
          P[<<check_1148@126:3>@129:0>]($592:int,$594:int,$596:int,$598:int) = ((2 + (2 * $594)) <= $592)
          P[<fail_1486@137:0>]($584:bool) = false
          P[<make_array_1030@131:1>]($587:int,$589:int) = false
        
      end HcSolver.solve_ub(18165)[4] (0.023996 sec.)
      begin HcSolver.check_validity(18429)[4]
        input:
          P[<fail_1486@137:0>](<fail_1486@137:0>:bool)|- bot
          
          P[<make_array_1030@131:1>](<k_make_array_u_1182@134:1>:int,<k_make_array_u_1182@134:0>:int),
          ((0 <= <k_make_array_u_1182@134:0>) &&
           ((<k_make_array_u_1182@134:0> >= <k_make_array_u_1182@134:1>) && <fail_1486@137:0>))
          |- P[<fail_1486@137:0>](<fail_1486@137:0>:bool)
          
          P[<<array_max_1033@119:3>@122:0>](<make_array_1030@131:0>:int,0:int,<check_1148@126:2>:int),
          P[<<check_1148@126:3>@129:0>](<make_array_1030@131:0>:int,0:int,<check_1148@126:2>:int,<make_array_1030@131:1>:int)|- P[<make_array_1030@131:1>](
          <make_array_1030@131:0>:int,<make_array_1030@131:1>:int)
          
          P[<check_1148@126:2>](<check_1148@126:0>:int,<check_1148@126:1>:int,<check_1148@126:2>:int),
          ((<check_1148@126:1> < <check_1148@126:0>) && (<<check_1148@126:3>@129:0> = <check_1148@126:1>))
          |- P[<<check_1148@126:3>@129:0>](<check_1148@126:0>:int,<check_1148@126:1>:int,
                                           <check_1148@126:2>:int,<<check_1148@126:3>@129:0>:int)
          
          P[<<array_max_1033@119:3>@122:0>](<check_1148@126:0>:int,0:int,<check_1148@126:2>:int),
          (<check_1148@126:1> = 0)
          |- P[<check_1148@126:2>](<check_1148@126:0>:int,<check_1148@126:1>:int,
                                   <check_1148@126:2>:int)
          
          P[<array_max_1033@119:1>](<array_max_1033@119:0>:int,<array_max_1033@119:1>:int),
          ((<<array_max_1033@119:3>@122:0> = 0) && (<array_max_1033@119:1> >= <array_max_1033@119:0>))
          |- P[<<array_max_1033@119:3>@122:0>](<array_max_1033@119:0>:int,
                                               <array_max_1033@119:1>:int,
                                               <<array_max_1033@119:3>@122:0>:int)
          
           (<array_max_1033@119:1> = 0)
          |- P[<array_max_1033@119:1>](<array_max_1033@119:0>:int,<array_max_1033@119:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(18429)[4] (0.005999 sec.)
      solution:
        P[<array_max_1033@119:1>]($615:int,$617:int) = ($617 <= 0)
        P[<<array_max_1033@119:3>@122:0>]($601:int,$603:int,$605:int) = ($601 <= 0)
        P[<check_1148@126:2>]($608:int,$610:int,$612:int) = ($608 <= 0)
        P[<<check_1148@126:3>@129:0>]($592:int,$594:int,$596:int,$598:int) = ((2 + (2 * $594)) <= $592)
        P[<fail_1486@137:0>]($584:bool) = false
        P[<make_array_1030@131:1>]($587:int,$589:int) = false
    end YhornInterface.solve(18164)[3] (0.030995 sec.)
    
  end RefTypeInfer.infer_etrs(16115)[2] (0.593910 sec.)
  refinement types:
    main_1479: X
    f_1484: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    array_max_1033: v1:int ->
                    v2:{v2:int | (v2 <= 0)} -> (v3:int -> (v4:int -> X) -> X) -> (v7:{v7:int | (v1 <= 0)} -> X) -> X
    f_main_1483: v1:int -> (v2:unit -> X) -> v4:int -> X
    check_1148: v1:int ->
                v2:int ->
                v3:{v3:int | (v1 <= 0)} ->
                (v4:{v4:int | ((2 + (2 * v2)) <= v1)} -> (v5:int -> X) -> X) -> (v8:unit -> X) -> X
    make_array_1030: v1:int -> v2:{v2:int | false} -> (v3:int -> X) -> X
    k_make_array_u_1182: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1486: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1485: var320:int -> var319:unit -> X
    f_array_max_1480: var330:int ->
                      var329:int -> (var328:int -> (var327:int -> X) -> X) -> (var324:int -> X) -> var322:int -> X
    f_array_max_1481: var337:int -> var336:int -> var335:int -> (var334:int -> X) -> var332:int -> X
    f_check_1482: var348:int ->
                  var347:int ->
                  var346:int -> (var345:int -> (var344:int -> X) -> X) -> (var341:unit -> X) -> var339:int -> X
    fail_1487: var352:bool -> (var351:unit -> X) -> X
    k_check_u_1336: var363:int ->
                    var362:int ->
                    var361:int -> (var360:int -> (var359:int -> X) -> X) -> (var356:unit -> X) -> var354:unit -> X
    k_make_array_u_1193: var369:int -> var368:int -> (var367:int -> X) -> var365:unit -> X
  abstraction types:
    main_1479: X
    f_1484: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    array_max_1033: v1:int ->
                    v2:int[v2 -> (v2 <= 0)] -> (v3:int -> (v4:int -> X) -> X) -> (v7:int[v7 -> (
                                                                    v1 <= 0)] -> X) -> X
    f_main_1483: v1:int -> (v2:unit -> X) -> v4:int -> X
    check_1148: v1:int ->
                v2:int ->
                v3:int[v3 -> (v1 <= 0)] ->
                (v4:int[v4 -> ((2 + (2 * v2)) <= v1)] -> (v5:int -> X) -> X) -> (v8:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1182: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1486: v1:bool -> (v2:unit -> X) -> X
    f_1485: var320:int -> var319:unit -> X
    f_array_max_1480: var330:int ->
                      var329:int -> (var328:int -> (var327:int -> X) -> X) -> (var324:int -> X) -> var322:int -> X
    f_array_max_1481: var337:int -> var336:int -> var335:int -> (var334:int -> X) -> var332:int -> X
    f_check_1482: var348:int ->
                  var347:int ->
                  var346:int -> (var345:int -> (var344:int -> X) -> X) -> (var341:unit -> X) -> var339:int -> X
    fail_1487: var352:bool -> (var351:unit -> X) -> X
    k_check_u_1336: var363:int ->
                    var362:int ->
                    var361:int -> (var360:int -> (var359:int -> X) -> X) -> (var356:unit -> X) -> var354:unit -> X
    k_make_array_u_1193: var369:int -> var368:int -> (var367:int -> X) -> var365:unit -> X
  
end AbsTypeInfer.refine(16114)[1] (0.598909 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 5)::
Main: main_1479
  main_1479 -> (rand_int f_1484)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (i_1035 >= n_1034) -> (k_array_max_1226 0)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (not (i_1035 >= n_1034)) ->
      (a_1036 i_1035 (f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226))
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (i_1041 >= n_1040) -> (k_check_1309 ())
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (not (i_1041 >= n_1040)) ->
      (a_1043 i_1041 (f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_1484 x_1454 -> (main_1044 x_1454 (f_1485 x_1454))
  f_1485 x_1454 x_1451 -> end
  f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 ->
      (array_max_1033 n_1034 (i_1035 + 1) a_1036 (f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226))
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (x_1229 > x_1242) -> (k_array_max_1226 x_1229)
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (
      not (x_1229 > x_1242)) -> (k_array_max_1226 x_1242)
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      x_1315 <= max_1042) -> (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 ())
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      not (x_1315 <= max_1042)) -> (fail_1487 true (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_main_1483 n_1045 k_main_1380 x_1399 -> (check_1148 n_1045 0 x_1399 (make_array_1030 n_1045) k_main_1380)
  fail_1486 b k -> {fail} => (k ())
  fail_1487 b k -> {fail} => (k ())
  k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 ->
      (check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 k_check_1309)
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when b_1194 ->
      (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 ())
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when (not b_1194) ->
      (fail_1486 true (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176))
  k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 -> (k_make_array_1176 i_1032)
  main_1044 n_1045 k_main_1380 -> (array_max_1033 n_1045 0 (make_array_1030 n_1045) (f_main_1483 n_1045 k_main_1380))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (0 <= i_1032) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (not (0 <= i_1032)) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 false)
Types:
  main_1479 : X
  array_max_1033 : (x_1:int ->
                    x_2:int[x_2 <= 0] ->
                    (x_4:int[x_1 >= x_4 + 1; x_2 <= x_4] -> (int -> X) -> X) -> (int[x_1 <= 0] -> X) -> X)
  check_1148 : (x_1:int ->
                x_2:int ->
                int[x_1 <= 0] ->
                (x_5:int[x_1 >= 2*x_2 + 2; x_1 <= 0; x_2 <= x_5] -> (int[4*x_1 <= 5*x_2] -> X) -> X) ->
                (unit -> X) -> X)
  fail_1486 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1487 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_array_1030 : (x_1:int -> x_2:int[x_1 <= 0; x_1 >= x_2 + 1; x_2 >= 0] -> (int[x_1 <= 0] -> X) -> X)
  
(5-1) Abstracting ... DONE!

(5-2) Checking HORS ... DONE!

Filter option enabled.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 6)::
Main: main_1479
  main_1479 -> (rand_int f_1484)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (i_1035 >= n_1034) -> (k_array_max_1226 0)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (not (i_1035 >= n_1034)) ->
      (a_1036 i_1035 (f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226))
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (i_1041 >= n_1040) -> (k_check_1309 ())
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (not (i_1041 >= n_1040)) ->
      (a_1043 i_1041 (f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_1484 x_1454 -> (main_1044 x_1454 (f_1485 x_1454))
  f_1485 x_1454 x_1451 -> end
  f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 ->
      (array_max_1033 n_1034 (i_1035 + 1) a_1036 (f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226))
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (x_1229 > x_1242) -> (k_array_max_1226 x_1229)
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (
      not (x_1229 > x_1242)) -> (k_array_max_1226 x_1242)
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      x_1315 <= max_1042) -> (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 ())
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      not (x_1315 <= max_1042)) -> (fail_1487 true (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_main_1483 n_1045 k_main_1380 x_1399 -> (check_1148 n_1045 0 x_1399 (make_array_1030 n_1045) k_main_1380)
  fail_1486 b k -> {fail} => (k ())
  fail_1487 b k -> {fail} => (k ())
  k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 ->
      (check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 k_check_1309)
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when b_1194 ->
      (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 ())
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when (not b_1194) ->
      (fail_1486 true (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176))
  k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 -> (k_make_array_1176 i_1032)
  main_1044 n_1045 k_main_1380 -> (array_max_1033 n_1045 0 (make_array_1030 n_1045) (f_main_1483 n_1045 k_main_1380))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (0 <= i_1032) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (not (0 <= i_1032)) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 false)
Types:
  main_1479 : X
  array_max_1033 : (x_1:int ->
                    x_2:int[x_2 <= 0] ->
                    (x_4:int[x_1 >= x_4 + 1; x_2 <= x_4] -> (int -> X) -> X) -> (int[x_1 <= 0] -> X) -> X)
  check_1148 : (x_1:int ->
                x_2:int ->
                int[x_1 <= 0] ->
                (x_5:int[x_1 >= 2*x_2 + 2; x_1 <= 0; x_2 <= x_5] -> (int[4*x_1 <= 5*x_2] -> X) -> X) ->
                (unit -> X) -> X)
  fail_1486 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1487 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_array_1030 : (x_1:int -> x_2:int[x_1 <= 0; x_1 >= x_2 + 1; x_2 >= 0] -> (int[x_1 <= 0] -> X) -> X)
  
(6-1) Abstracting ... DONE!

(6-2) Checking HORS ... DONE!

Negative-predicate option enabled.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 7)::
Main: main_1479
  main_1479 -> (rand_int f_1484)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (i_1035 >= n_1034) -> (k_array_max_1226 0)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (not (i_1035 >= n_1034)) ->
      (a_1036 i_1035 (f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226))
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (i_1041 >= n_1040) -> (k_check_1309 ())
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (not (i_1041 >= n_1040)) ->
      (a_1043 i_1041 (f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_1484 x_1454 -> (main_1044 x_1454 (f_1485 x_1454))
  f_1485 x_1454 x_1451 -> end
  f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 ->
      (array_max_1033 n_1034 (i_1035 + 1) a_1036 (f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226))
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (x_1229 > x_1242) -> (k_array_max_1226 x_1229)
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (
      not (x_1229 > x_1242)) -> (k_array_max_1226 x_1242)
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      x_1315 <= max_1042) -> (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 ())
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      not (x_1315 <= max_1042)) -> (fail_1487 true (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_main_1483 n_1045 k_main_1380 x_1399 -> (check_1148 n_1045 0 x_1399 (make_array_1030 n_1045) k_main_1380)
  fail_1486 b k -> {fail} => (k ())
  fail_1487 b k -> {fail} => (k ())
  k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 ->
      (check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 k_check_1309)
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when b_1194 ->
      (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 ())
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when (not b_1194) ->
      (fail_1486 true (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176))
  k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 -> (k_make_array_1176 i_1032)
  main_1044 n_1045 k_main_1380 -> (array_max_1033 n_1045 0 (make_array_1030 n_1045) (f_main_1483 n_1045 k_main_1380))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (0 <= i_1032) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (not (0 <= i_1032)) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 false)
Types:
  main_1479 : X
  array_max_1033 : (x_1:int ->
                    x_2:int[x_2 <= 0] ->
                    (x_4:int[x_1 >= x_4 + 1; x_2 <= x_4] -> (int -> X) -> X) -> (int[x_1 <= 0] -> X) -> X)
  check_1148 : (x_1:int ->
                x_2:int ->
                int[x_1 <= 0] ->
                (x_5:int[x_1 >= 2*x_2 + 2; x_1 <= 0; x_2 <= x_5] -> (int[4*x_1 <= 5*x_2] -> X) -> X) ->
                (unit -> X) -> X)
  fail_1486 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1487 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_array_1030 : (x_1:int -> x_2:int[x_1 <= 0; x_1 >= x_2 + 1; x_2 >= 0] -> (int[x_1 <= 0] -> X) -> X)
  
(7-1) Abstracting ... DONE!

(7-2) Checking HORS ... DONE!

Set wp_max_num to 4.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 8)::
Main: main_1479
  main_1479 -> (rand_int f_1484)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (i_1035 >= n_1034) -> (k_array_max_1226 0)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (not (i_1035 >= n_1034)) ->
      (a_1036 i_1035 (f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226))
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (i_1041 >= n_1040) -> (k_check_1309 ())
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (not (i_1041 >= n_1040)) ->
      (a_1043 i_1041 (f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_1484 x_1454 -> (main_1044 x_1454 (f_1485 x_1454))
  f_1485 x_1454 x_1451 -> end
  f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 ->
      (array_max_1033 n_1034 (i_1035 + 1) a_1036 (f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226))
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (x_1229 > x_1242) -> (k_array_max_1226 x_1229)
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (
      not (x_1229 > x_1242)) -> (k_array_max_1226 x_1242)
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      x_1315 <= max_1042) -> (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 ())
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      not (x_1315 <= max_1042)) -> (fail_1487 true (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_main_1483 n_1045 k_main_1380 x_1399 -> (check_1148 n_1045 0 x_1399 (make_array_1030 n_1045) k_main_1380)
  fail_1486 b k -> {fail} => (k ())
  fail_1487 b k -> {fail} => (k ())
  k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 ->
      (check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 k_check_1309)
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when b_1194 ->
      (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 ())
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when (not b_1194) ->
      (fail_1486 true (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176))
  k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 -> (k_make_array_1176 i_1032)
  main_1044 n_1045 k_main_1380 -> (array_max_1033 n_1045 0 (make_array_1030 n_1045) (f_main_1483 n_1045 k_main_1380))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (0 <= i_1032) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (not (0 <= i_1032)) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 false)
Types:
  main_1479 : X
  array_max_1033 : (x_1:int ->
                    x_2:int[x_2 <= 0] ->
                    (x_4:int[x_1 >= x_4 + 1; x_2 <= x_4] -> (int -> X) -> X) -> (int[x_1 <= 0] -> X) -> X)
  check_1148 : (x_1:int ->
                x_2:int ->
                int[x_1 <= 0] ->
                (x_5:int[x_1 >= 2*x_2 + 2; x_1 <= 0; x_2 <= x_5] -> (int[4*x_1 <= 5*x_2] -> X) -> X) ->
                (unit -> X) -> X)
  fail_1486 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1487 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_array_1030 : (x_1:int -> x_2:int[x_1 <= 0; x_1 >= x_2 + 1; x_2 >= 0] -> (int[x_1 <= 0] -> X) -> X)
  
(8-1) Abstracting ... DONE!

(8-2) Checking HORS ... DONE!

Set wp_max_num to 5.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 9)::
Main: main_1479
  main_1479 -> (rand_int f_1484)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (i_1035 >= n_1034) -> (k_array_max_1226 0)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (not (i_1035 >= n_1034)) ->
      (a_1036 i_1035 (f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226))
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (i_1041 >= n_1040) -> (k_check_1309 ())
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (not (i_1041 >= n_1040)) ->
      (a_1043 i_1041 (f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_1484 x_1454 -> (main_1044 x_1454 (f_1485 x_1454))
  f_1485 x_1454 x_1451 -> end
  f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 ->
      (array_max_1033 n_1034 (i_1035 + 1) a_1036 (f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226))
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (x_1229 > x_1242) -> (k_array_max_1226 x_1229)
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (
      not (x_1229 > x_1242)) -> (k_array_max_1226 x_1242)
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      x_1315 <= max_1042) -> (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 ())
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      not (x_1315 <= max_1042)) -> (fail_1487 true (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_main_1483 n_1045 k_main_1380 x_1399 -> (check_1148 n_1045 0 x_1399 (make_array_1030 n_1045) k_main_1380)
  fail_1486 b k -> {fail} => (k ())
  fail_1487 b k -> {fail} => (k ())
  k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 ->
      (check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 k_check_1309)
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when b_1194 ->
      (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 ())
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when (not b_1194) ->
      (fail_1486 true (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176))
  k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 -> (k_make_array_1176 i_1032)
  main_1044 n_1045 k_main_1380 -> (array_max_1033 n_1045 0 (make_array_1030 n_1045) (f_main_1483 n_1045 k_main_1380))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (0 <= i_1032) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (not (0 <= i_1032)) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 false)
Types:
  main_1479 : X
  array_max_1033 : (x_1:int ->
                    x_2:int[x_2 <= 0] ->
                    (x_4:int[x_1 >= x_4 + 1; x_2 <= x_4] -> (int -> X) -> X) -> (int[x_1 <= 0] -> X) -> X)
  check_1148 : (x_1:int ->
                x_2:int ->
                int[x_1 <= 0] ->
                (x_5:int[x_1 >= 2*x_2 + 2; x_1 <= 0; x_2 <= x_5] -> (int[4*x_1 <= 5*x_2] -> X) -> X) ->
                (unit -> X) -> X)
  fail_1486 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1487 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_array_1030 : (x_1:int -> x_2:int[x_1 <= 0; x_1 >= x_2 + 1; x_2 >= 0] -> (int[x_1 <= 0] -> X) -> X)
  
(9-1) Abstracting ... DONE!

(9-2) Checking HORS ... DONE!

Set wp_max_num to 6.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 10)::
Main: main_1479
  main_1479 -> (rand_int f_1484)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (i_1035 >= n_1034) -> (k_array_max_1226 0)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (not (i_1035 >= n_1034)) ->
      (a_1036 i_1035 (f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226))
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (i_1041 >= n_1040) -> (k_check_1309 ())
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (not (i_1041 >= n_1040)) ->
      (a_1043 i_1041 (f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_1484 x_1454 -> (main_1044 x_1454 (f_1485 x_1454))
  f_1485 x_1454 x_1451 -> end
  f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 ->
      (array_max_1033 n_1034 (i_1035 + 1) a_1036 (f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226))
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (x_1229 > x_1242) -> (k_array_max_1226 x_1229)
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (
      not (x_1229 > x_1242)) -> (k_array_max_1226 x_1242)
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      x_1315 <= max_1042) -> (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 ())
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      not (x_1315 <= max_1042)) -> (fail_1487 true (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_main_1483 n_1045 k_main_1380 x_1399 -> (check_1148 n_1045 0 x_1399 (make_array_1030 n_1045) k_main_1380)
  fail_1486 b k -> {fail} => (k ())
  fail_1487 b k -> {fail} => (k ())
  k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 ->
      (check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 k_check_1309)
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when b_1194 ->
      (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 ())
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when (not b_1194) ->
      (fail_1486 true (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176))
  k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 -> (k_make_array_1176 i_1032)
  main_1044 n_1045 k_main_1380 -> (array_max_1033 n_1045 0 (make_array_1030 n_1045) (f_main_1483 n_1045 k_main_1380))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (0 <= i_1032) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (not (0 <= i_1032)) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 false)
Types:
  main_1479 : X
  array_max_1033 : (x_1:int ->
                    x_2:int[x_2 <= 0] ->
                    (x_4:int[x_1 >= x_4 + 1; x_2 <= x_4] -> (int -> X) -> X) -> (int[x_1 <= 0] -> X) -> X)
  check_1148 : (x_1:int ->
                x_2:int ->
                int[x_1 <= 0] ->
                (x_5:int[x_1 >= 2*x_2 + 2; x_1 <= 0; x_2 <= x_5] -> (int[4*x_1 <= 5*x_2] -> X) -> X) ->
                (unit -> X) -> X)
  fail_1486 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1487 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_array_1030 : (x_1:int -> x_2:int[x_1 <= 0; x_1 >= x_2 + 1; x_2 >= 0] -> (int[x_1 <= 0] -> X) -> X)
  
(10-1) Abstracting ... DONE!

(10-2) Checking HORS ... DONE!

Set wp_max_num to 7.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 11)::
Main: main_1479
  main_1479 -> (rand_int f_1484)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (i_1035 >= n_1034) -> (k_array_max_1226 0)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (not (i_1035 >= n_1034)) ->
      (a_1036 i_1035 (f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226))
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (i_1041 >= n_1040) -> (k_check_1309 ())
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (not (i_1041 >= n_1040)) ->
      (a_1043 i_1041 (f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_1484 x_1454 -> (main_1044 x_1454 (f_1485 x_1454))
  f_1485 x_1454 x_1451 -> end
  f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 ->
      (array_max_1033 n_1034 (i_1035 + 1) a_1036 (f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226))
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (x_1229 > x_1242) -> (k_array_max_1226 x_1229)
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (
      not (x_1229 > x_1242)) -> (k_array_max_1226 x_1242)
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      x_1315 <= max_1042) -> (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 ())
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      not (x_1315 <= max_1042)) -> (fail_1487 true (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_main_1483 n_1045 k_main_1380 x_1399 -> (check_1148 n_1045 0 x_1399 (make_array_1030 n_1045) k_main_1380)
  fail_1486 b k -> {fail} => (k ())
  fail_1487 b k -> {fail} => (k ())
  k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 ->
      (check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 k_check_1309)
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when b_1194 ->
      (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 ())
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when (not b_1194) ->
      (fail_1486 true (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176))
  k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 -> (k_make_array_1176 i_1032)
  main_1044 n_1045 k_main_1380 -> (array_max_1033 n_1045 0 (make_array_1030 n_1045) (f_main_1483 n_1045 k_main_1380))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (0 <= i_1032) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (not (0 <= i_1032)) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 false)
Types:
  main_1479 : X
  array_max_1033 : (x_1:int ->
                    x_2:int[x_2 <= 0] ->
                    (x_4:int[x_1 >= x_4 + 1; x_2 <= x_4] -> (int -> X) -> X) -> (int[x_1 <= 0] -> X) -> X)
  check_1148 : (x_1:int ->
                x_2:int ->
                int[x_1 <= 0] ->
                (x_5:int[x_1 >= 2*x_2 + 2; x_1 <= 0; x_2 <= x_5] -> (int[4*x_1 <= 5*x_2] -> X) -> X) ->
                (unit -> X) -> X)
  fail_1486 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1487 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_array_1030 : (x_1:int -> x_2:int[x_1 <= 0; x_1 >= x_2 + 1; x_2 >= 0] -> (int[x_1 <= 0] -> X) -> X)
  
(11-1) Abstracting ... DONE!

(11-2) Checking HORS ... DONE!

Set wp_max_num to 8.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 12)::
Main: main_1479
  main_1479 -> (rand_int f_1484)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (i_1035 >= n_1034) -> (k_array_max_1226 0)
  array_max_1033 n_1034 i_1035 a_1036 k_array_max_1226 when (not (i_1035 >= n_1034)) ->
      (a_1036 i_1035 (f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226))
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (i_1041 >= n_1040) -> (k_check_1309 ())
  check_1148 n_1040 i_1041 max_1042 a_1043 k_check_1309 when (not (i_1041 >= n_1040)) ->
      (a_1043 i_1041 (f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_1484 x_1454 -> (main_1044 x_1454 (f_1485 x_1454))
  f_1485 x_1454 x_1451 -> end
  f_array_max_1480 i_1035 n_1034 a_1036 k_array_max_1226 x_1229 ->
      (array_max_1033 n_1034 (i_1035 + 1) a_1036 (f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226))
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (x_1229 > x_1242) -> (k_array_max_1226 x_1229)
  f_array_max_1481 i_1035 n_1034 x_1229 k_array_max_1226 x_1242 when (
      not (x_1229 > x_1242)) -> (k_array_max_1226 x_1242)
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      x_1315 <= max_1042) -> (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 ())
  f_check_1482 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1315 when (
      not (x_1315 <= max_1042)) -> (fail_1487 true (k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309))
  f_main_1483 n_1045 k_main_1380 x_1399 -> (check_1148 n_1045 0 x_1399 (make_array_1030 n_1045) k_main_1380)
  fail_1486 b k -> {fail} => (k ())
  fail_1487 b k -> {fail} => (k ())
  k_check_u_1336 i_1041 max_1042 n_1040 a_1043 k_check_1309 x_1312 ->
      (check_1148 n_1040 (i_1041 + 1) max_1042 a_1043 k_check_1309)
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when b_1194 ->
      (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 ())
  k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 b_1194 when (not b_1194) ->
      (fail_1486 true (k_make_array_u_1193 i_1032 n_1031 k_make_array_1176))
  k_make_array_u_1193 i_1032 n_1031 k_make_array_1176 x_1179 -> (k_make_array_1176 i_1032)
  main_1044 n_1045 k_main_1380 -> (array_max_1033 n_1045 0 (make_array_1030 n_1045) (f_main_1483 n_1045 k_main_1380))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (0 <= i_1032) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1176 when (not (0 <= i_1032)) ->
      (k_make_array_u_1182 i_1032 n_1031 k_make_array_1176 false)
Types:
  main_1479 : X
  array_max_1033 : (x_1:int ->
                    x_2:int[x_2 <= 0] ->
                    (x_4:int[x_1 >= x_4 + 1; x_2 <= x_4] -> (int -> X) -> X) -> (int[x_1 <= 0] -> X) -> X)
  check_1148 : (x_1:int ->
                x_2:int ->
                int[x_1 <= 0] ->
                (x_5:int[x_1 >= 2*x_2 + 2; x_1 <= 0; x_2 <= x_5] -> (int[4*x_1 <= 5*x_2] -> X) -> X) ->
                (unit -> X) -> X)
  fail_1486 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1487 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_array_1030 : (x_1:int -> x_2:int[x_1 <= 0; x_1 >= x_2 + 1; x_2 >= 0] -> (int[x_1 <= 0] -> X) -> X)
  
(12-1) Abstracting ... DONE!

(12-2) Checking HORS ... DONE!

Error trace::
  main_1479 ... --> 
  f_1484 ... --> 
  main_1044 ... --> 
  array_max_1033 [1/2] ... --> 
  f_main_1483 ... --> 
  check_1148 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1182 [2/2] ... --> 
  fail_1486 ... --> fail -->
  ERROR!

Verification failed (new error path not found)
