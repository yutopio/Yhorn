MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn mc91_95.ml

parsed::
 let rec m_1030 x_1031 = if x_1031 > 100 then
                           x_1031 - 10
                         else
                           m_1030 (m_1030 (x_1031 + 11)) 
 in
 let main_1032 n_1033 = if n_1033 <= 95 then
                          if m_1030 n_1033 = 91 then
                            ()
                          else
                            {fail} ()
                        else
                          () 
 in
   ()

set_target::
 let rec m_1030 x_1031 = if x_1031 > 100 then
                           x_1031 - 10
                         else
                           m_1030 (m_1030 (x_1031 + 11)) 
 in
 let main_1032 n_1033 = if n_1033 <= 95 then
                          if m_1030 n_1033 = 91 then
                            ()
                          else
                            {fail} ()
                        else
                          () 
 in
 let main_1051 = let arg1_1050 = rand_int () 
                 in
                   main_1032 arg1_1050 
 in
   ()

CPS::
 let rec m_1030 (x_1031:int) (k_m_1076:(int -> X)) =
   if x_1031 > 100 then
     k_m_1076 (x_1031 - 10)
   else
     m_1030 (x_1031 + 11) (fun x_1096 -> m_1030 x_1096 k_m_1076) 
 in
 let main_1032 (n_1033:int) (k_main_1114:(unit -> X)) =
   if n_1033 <= 95 then
     m_1030 n_1033 (fun x_1117 -> (if x_1117 = 91 then
                                     k_main_1114 ()
                                   else
                                     {|fail|} () k_main_1114))
   else
     k_main_1114 () 
 in
   rand_int_cps () (fun x_1149 -> main_1032 x_1149 (fun x_1146 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1174
  main_1174 -> (rand_int f_1177)
  f_1177 x_1149 -> (main_1032 x_1149 (f_1178 x_1149))
  f_1178 x_1149 x_1146 -> end
  f_m_1175 x_1031 k_m_1076 x_1096 -> (m_1030 x_1096 k_m_1076)
  f_main_1176 n_1033 k_main_1114 x_1117 when (x_1117 = 91) -> (k_main_1114 ())
  f_main_1176 n_1033 k_main_1114 x_1117 when (not (x_1117 = 91)) -> (fail_1179 true k_main_1114)
  fail_1179 b k -> {fail} => (k ())
  m_1030 x_1031 k_m_1076 when (x_1031 > 100) -> (k_m_1076 (x_1031 - 10))
  m_1030 x_1031 k_m_1076 when (not (x_1031 > 100)) -> (m_1030 (x_1031 + 11) (f_m_1175 x_1031 k_m_1076))
  main_1032 n_1033 k_main_1114 when (n_1033 <= 95) -> (m_1030 n_1033 (f_main_1176 n_1033 k_main_1114))
  main_1032 n_1033 k_main_1114 when (not (n_1033 <= 95)) -> (k_main_1114 ())
Types:
  main_1174 : X
  fail_1179 : (x_1:bool[x_1] -> (unit -> X) -> X)
  m_1030 : (int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1174 ... --> 
  f_1177 ... --> 
  main_1032 [1/2] ... --> 
  m_1030 [1/2] ... --> 
  f_main_1176 [2/2] ... --> 
  fail_1179 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(107)[1]
  program:
    main_1174  | true = ((Random.int 0) f_1177)
    f_1177 x_1149 | true = (main_1032 x_1149
                                      (f_1178 x_1149))
    f_1178 x_1149 x_1146 | true = end
    f_m_1175 x_1031 k_m_1076 x_1096 | true = (m_1030 x_1096
                                                     k_m_1076)
    f_main_1176 n_1033 k_main_1114 x_1117 | (x_1117 = 91) = (k_main_1114 ())
    f_main_1176 n_1033 k_main_1114 x_1117 | (not (x_1117 = 91)) = (fail_1179 true
                                                                    k_main_1114)
    fail_1179 b k | true = (fail ())
    m_1030 x_1031 k_m_1076 | (x_1031 > 100) = (k_m_1076 (x_1031 - 10))
    m_1030 x_1031 k_m_1076 | (not (x_1031 > 100)) = (m_1030 (x_1031 + 11)
                                                            (f_m_1175 x_1031
                                                                    k_m_1076))
    main_1032 n_1033 k_main_1114 | (n_1033 <= 95) = (m_1030 n_1033
                                                            (f_main_1176 n_1033
                                                                    k_main_1114))
    main_1032 n_1033 k_main_1114 | (not (n_1033 <= 95)) = (k_main_1114 ())
    main_1174:X
    f_1177:int -> X
    f_1178:int -> unit -> X
    f_m_1175:int -> (int -> X) -> int -> X
    f_main_1176:int -> (unit -> X) -> int -> X
    fail_1179:bool -> (unit -> X) -> X
    m_1030:int -> (int -> X) -> X
    main_1032:int -> (unit -> X) -> X
  inlined functions: f_1177,f_1178,f_m_1175,f_main_1176,main_1032
  counterexample: 0:0:0:0:1:0
  error traces:
    [true.nop(<f_1177@4:0> = var2)
     [true.(<main_1032@6:0> = <f_1177@4:0>)
      [(<main_1032@6:0> <= 95).(<m_1030@9:0> = <main_1032@6:0>)
       [(<m_1030@9:0> > 100).(<<m_1030@9:1>@12:0> = (<m_1030@9:0> - 10))
        [true.((<f_main_1176@14:0> = <main_1032@6:0>) && (<f_main_1176@14:2> = <<m_1030@9:1>@12:0>))
         [(not (<f_main_1176@14:2> = 91)).(<fail_1179@17:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(108)[2]
    horn clauses:
      P[<fail_1179@17:0>](<fail_1179@17:0>:bool)|- bot
      
      P[<f_main_1176@14:2>](<f_main_1176@14:0>:int,<f_main_1176@14:2>:int),
      ((<f_main_1176@14:2> <> 91) && <fail_1179@17:0>) |- P[<fail_1179@17:0>](
      <fail_1179@17:0>:bool)
      
      P[<main_1032@6:0>](<f_main_1176@14:0>:int),
      P[<<m_1030@9:1>@12:0>](<f_main_1176@14:0>:int,<f_main_1176@14:2>:int), (
      <f_main_1176@14:0> <= 95) |- P[<f_main_1176@14:2>](<f_main_1176@14:0>:int,
                                                         <f_main_1176@14:2>:int)
      
      P[<m_1030@9:0>](<m_1030@9:0>:int), ((<m_1030@9:0> > 100) && ((10 + <<m_1030@9:1>@12:0>) = <m_1030@9:0>))
      |- P[<<m_1030@9:1>@12:0>](<m_1030@9:0>:int,<<m_1030@9:1>@12:0>:int)
      
      P[<main_1032@6:0>](<m_1030@9:0>:int), (<m_1030@9:0> <= 95) |- P[<m_1030@9:0>](<m_1030@9:0>:int)
      
      P[<f_1177@4:0>](<main_1032@6:0>:int)|- P[<main_1032@6:0>](<main_1032@6:0>:int)
      
      |- P[<f_1177@4:0>](<f_1177@4:0>:int)
    call trees:
      <main_1174@1>
        <f_1177@4>
          <main_1032@6>
            <m_1030@9>
            </<m_1030@9:1>@12>
            <f_main_1176@14>
              <fail_1179@17>
    inlined horn clauses:
      P[<fail_1179@17:0>](<fail_1179@17:0>:bool)|- bot
      
      P[<<m_1030@9:1>@12:0>](<f_main_1176@14:0>:int,<f_main_1176@14:2>:int),
      ((<f_main_1176@14:2> <> 91) && ((<f_main_1176@14:0> <= 95) && <fail_1179@17:0>))
      |- P[<fail_1179@17:0>](<fail_1179@17:0>:bool)
      
      P[<m_1030@9:0>](<m_1030@9:0>:int), ((<m_1030@9:0> > 100) && ((10 + <<m_1030@9:1>@12:0>) = <m_1030@9:0>))
      |- P[<<m_1030@9:1>@12:0>](<m_1030@9:0>:int,<<m_1030@9:1>@12:0>:int)
      
       (<m_1030@9:0> <= 95) |- P[<m_1030@9:0>](<m_1030@9:0>:int)
    begin ParamSubstInfer.infer(1295)[3]
      
    end ParamSubstInfer.infer(1295)[3] (0.011999 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1297)[3]
      
    end RefTypeInfer.elim_coeffs(1297)[3] (0.001000 sec.)
    begin YhornInterface.solve(1577)[3]
      begin HcSolver.solve_ub(1578)[4]
        encoded:
          P[<fail_1179@17:0>](<fail_1179@17:0>:int)|- bot
          
          P[<<m_1030@9:1>@12:0>](<f_main_1176@14:0>:int,<f_main_1176@14:2>:int),
          ((<f_main_1176@14:2> <> 91) && ((<f_main_1176@14:0> <= 95) && (<fail_1179@17:0> = 1)))
          |- P[<fail_1179@17:0>](<fail_1179@17:0>:int)
          
          P[<m_1030@9:0>](<m_1030@9:0>:int), ((<m_1030@9:0> > 100) && ((10 + <<m_1030@9:1>@12:0>) = <m_1030@9:0>))
          |- P[<<m_1030@9:1>@12:0>](<m_1030@9:0>:int,<<m_1030@9:1>@12:0>:int)
          
           (<m_1030@9:0> <= 95) |- P[<m_1030@9:0>](<m_1030@9:0>:int)
        input to Yhorn:
          P[<fail_1179@17:0>](<fail_1179@17:0>:int)|- bot
          
          P[<<m_1030@9:1>@12:0>](<f_main_1176@14:0>:int,<f_main_1176@14:2>:int),
          ((<f_main_1176@14:0> <= 95) && ((<f_main_1176@14:2> <> 91) && (<fail_1179@17:0> = 1)))
          |- P[<fail_1179@17:0>](<fail_1179@17:0>:int)
          
          P[<m_1030@9:0>](<m_1030@9:0>:int), (((10 + <<m_1030@9:1>@12:0>) = <m_1030@9:0>) && (<m_1030@9:0> > 100))
          |- P[<<m_1030@9:1>@12:0>](<m_1030@9:0>:int,<<m_1030@9:1>@12:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1179_sep_17_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-91<>0) & ($8-95<=0)) & (v_sep_m_1030_sep_9_sep_1_sep_12_sep_0($8,$7)) -> v_sep_fail_1179_sep_17_sep_0($6).
(($9-100>0) & (-$9+$10+10=0)) & (v_sep_m_1030_sep_9_sep_0($9)) -> v_sep_m_1030_sep_9_sep_1_sep_12_sep_0($9,$10).
$9-95<=0 -> v_sep_m_1030_sep_9_sep_0($9).


v_sep_fail_1179_sep_17_sep_0: X
v_sep_m_1030_sep_9_sep_0: X
v_sep_m_1030_sep_9_sep_1_sep_12_sep_0: X
.....
v_sep_fail_1179_sep_17_sep_0: X
v_sep_m_1030_sep_9_sep_0: X
v_sep_m_1030_sep_9_sep_1_sep_12_sep_0: X
....
v_sep_fail_1179_sep_17_sep_0: X
v_sep_m_1030_sep_9_sep_0: X
v_sep_m_1030_sep_9_sep_1_sep_12_sep_0: X
.....
v_sep_fail_1179_sep_17_sep_0: X
v_sep_m_1030_sep_9_sep_0: X
v_sep_m_1030_sep_9_sep_1_sep_12_sep_0: X
.....(0=0) & (v_sep_fail_1179_sep_17_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-91<>0) & ($8-95<=0)) & (v_sep_m_1030_sep_9_sep_1_sep_12_sep_0($8,$7)) -> v_sep_fail_1179_sep_17_sep_0($6).
(($9-100>0) & (-$9+$10+10=0)) & (v_sep_m_1030_sep_9_sep_0($9)) -> v_sep_m_1030_sep_9_sep_1_sep_12_sep_0($9,$10).
$9-95<=0 -> v_sep_m_1030_sep_9_sep_0($9).

           (<m_1030@9:0> <= 95) |- P[<m_1030@9:0>](<m_1030@9:0>:int)
        solution:
          P[<fail_1179@17:0>]($11:bool) = false
          P[<m_1030@9:0>]($19:int) = ($19 <= 95)
          P[<<m_1030@9:1>@12:0>]($14:int,$16:int) = false
        
      end HcSolver.solve_ub(1578)[4] (0.014998 sec.)
      begin HcSolver.check_validity(1776)[4]
        input:
          P[<fail_1179@17:0>](<fail_1179@17:0>:bool)|- bot
          
          P[<<m_1030@9:1>@12:0>](<f_main_1176@14:0>:int,<f_main_1176@14:2>:int),
          ((<f_main_1176@14:2> <> 91) && ((<f_main_1176@14:0> <= 95) && <fail_1179@17:0>))
          |- P[<fail_1179@17:0>](<fail_1179@17:0>:bool)
          
          P[<m_1030@9:0>](<m_1030@9:0>:int), ((<m_1030@9:0> > 100) && ((10 + <<m_1030@9:1>@12:0>) = <m_1030@9:0>))
          |- P[<<m_1030@9:1>@12:0>](<m_1030@9:0>:int,<<m_1030@9:1>@12:0>:int)
          
           (<m_1030@9:0> <= 95) |- P[<m_1030@9:0>](<m_1030@9:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1776)[4] (0.001000 sec.)
      solution:
        P[<fail_1179@17:0>]($11:bool) = false
        P[<m_1030@9:0>]($19:int) = ($19 <= 95)
        P[<<m_1030@9:1>@12:0>]($14:int,$16:int) = false
    end YhornInterface.solve(1577)[3] (0.015998 sec.)
    
  end RefTypeInfer.infer_etrs(108)[2] (0.035996 sec.)
  refinement types:
    main_1174: X
    f_1177: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    m_1030: v1:{v1:int | (v1 <= 95)} -> (v2:{v2:int | false} -> X) -> X
    f_main_1176: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1179: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1178: var11:int -> var10:unit -> X
    f_m_1175: var16:int -> (var15:int -> X) -> var13:int -> X
  abstraction types:
    main_1174: X
    f_1177: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    m_1030: v1:int[v1 -> (v1 <= 95)] -> (v2:int -> X) -> X
    f_main_1176: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1179: v1:bool -> (v2:unit -> X) -> X
    f_1178: var11:int -> var10:unit -> X
    f_m_1175: var16:int -> (var15:int -> X) -> var13:int -> X
  
end AbsTypeInfer.refine(107)[1] (0.038995 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1174
  main_1174 -> (rand_int f_1177)
  f_1177 x_1149 -> (main_1032 x_1149 (f_1178 x_1149))
  f_1178 x_1149 x_1146 -> end
  f_m_1175 x_1031 k_m_1076 x_1096 -> (m_1030 x_1096 k_m_1076)
  f_main_1176 n_1033 k_main_1114 x_1117 when (x_1117 = 91) -> (k_main_1114 ())
  f_main_1176 n_1033 k_main_1114 x_1117 when (not (x_1117 = 91)) -> (fail_1179 true k_main_1114)
  fail_1179 b k -> {fail} => (k ())
  m_1030 x_1031 k_m_1076 when (x_1031 > 100) -> (k_m_1076 (x_1031 - 10))
  m_1030 x_1031 k_m_1076 when (not (x_1031 > 100)) -> (m_1030 (x_1031 + 11) (f_m_1175 x_1031 k_m_1076))
  main_1032 n_1033 k_main_1114 when (n_1033 <= 95) -> (m_1030 n_1033 (f_main_1176 n_1033 k_main_1114))
  main_1032 n_1033 k_main_1114 when (not (n_1033 <= 95)) -> (k_main_1114 ())
Types:
  main_1174 : X
  fail_1179 : (x_1:bool[x_1] -> (unit -> X) -> X)
  m_1030 : (x_1:int[x_1 <= 95] -> (int -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1174 ... --> 
  f_1177 ... --> 
  main_1032 [1/2] ... --> 
  m_1030 [2/2] ... --> 
  m_1030 [1/2] ... --> 
  f_m_1175 ... --> 
  m_1030 [1/2] ... --> 
  f_main_1176 [2/2] ... --> 
  fail_1179 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(2228)[1]
  program:
    main_1174  | true = ((Random.int 0) f_1177)
    f_1177 x_1149 | true = (main_1032 x_1149
                                      (f_1178 x_1149))
    f_1178 x_1149 x_1146 | true = end
    f_m_1175 x_1031 k_m_1076 x_1096 | true = (m_1030 x_1096
                                                     k_m_1076)
    f_main_1176 n_1033 k_main_1114 x_1117 | (x_1117 = 91) = (k_main_1114 ())
    f_main_1176 n_1033 k_main_1114 x_1117 | (not (x_1117 = 91)) = (fail_1179 true
                                                                    k_main_1114)
    fail_1179 b k | true = (fail ())
    m_1030 x_1031 k_m_1076 | (x_1031 > 100) = (k_m_1076 (x_1031 - 10))
    m_1030 x_1031 k_m_1076 | (not (x_1031 > 100)) = (m_1030 (x_1031 + 11)
                                                            (f_m_1175 x_1031
                                                                    k_m_1076))
    main_1032 n_1033 k_main_1114 | (n_1033 <= 95) = (m_1030 n_1033
                                                            (f_main_1176 n_1033
                                                                    k_main_1114))
    main_1032 n_1033 k_main_1114 | (not (n_1033 <= 95)) = (k_main_1114 ())
    main_1174:X
    f_1177:int -> X
    f_1178:int -> unit -> X
    f_m_1175:int -> (int -> X) -> int -> X
    f_main_1176:int -> (unit -> X) -> int -> X
    fail_1179:bool -> (unit -> X) -> X
    m_1030:int -> (int -> X) -> X
    main_1032:int -> (unit -> X) -> X
  inlined functions: f_1177,f_1178,f_m_1175,f_main_1176,main_1032
  counterexample: 0:0:0:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1177@23:0> = var17)
     [true.(<main_1032@25:0> = <f_1177@23:0>)
      [(<main_1032@25:0> <= 95).(<m_1030@28:0> = <main_1032@25:0>)
       [(not (<m_1030@28:0> > 100)).(<m_1030@31:0> = (<m_1030@28:0> + 11))
        [(<m_1030@31:0> > 100).(<<m_1030@31:1>@34:0> = (<m_1030@31:0> - 10))
         [true.((<f_m_1175@36:0> = <m_1030@28:0>) && (<f_m_1175@36:2> = <<m_1030@31:1>@34:0>))
          [true.(<m_1030@38:0> = <f_m_1175@36:2>)
           [(<m_1030@38:0> > 100).(<<m_1030@38:1>@41:0> = (<m_1030@38:0> - 10))
            [true.(<<f_m_1175@36:1>@43:0> = <<m_1030@38:1>@41:0>)
             [true.(<<m_1030@28:1>@45:0> = <<f_m_1175@36:1>@43:0>)
              [true.((<f_main_1176@47:0> = <main_1032@25:0>) && (<f_main_1176@47:2> = <<m_1030@28:1>@45:0>))
               [(not (<f_main_1176@47:2> = 91)).(<fail_1179@50:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(2229)[2]
    horn clauses:
      P[<fail_1179@50:0>](<fail_1179@50:0>:bool)|- bot
      
      P[<f_main_1176@47:2>](<f_main_1176@47:0>:int,<f_main_1176@47:2>:int),
      ((<f_main_1176@47:2> <> 91) && <fail_1179@50:0>) |- P[<fail_1179@50:0>](
      <fail_1179@50:0>:bool)
      
      P[<main_1032@25:0>](<f_main_1176@47:0>:int),
      P[<<m_1030@28:1>@45:0>](<f_main_1176@47:0>:int,<f_main_1176@47:2>:int), (
      <f_main_1176@47:0> <= 95) |- P[<f_main_1176@47:2>](<f_main_1176@47:0>:int,
                                                         <f_main_1176@47:2>:int)
      
      P[<m_1030@28:0>](<m_1030@28:0>:int),
      P[<<f_m_1175@36:1>@43:0>](<m_1030@28:0>:int,<<m_1030@28:1>@45:0>:int), (
      <m_1030@28:0> <= 100) |- P[<<m_1030@28:1>@45:0>](<m_1030@28:0>:int,
                                                       <<m_1030@28:1>@45:0>:int)
      
      P[<f_m_1175@36:2>](<f_m_1175@36:0>:int,<m_1030@38:0>:int),
      P[<<m_1030@38:1>@41:0>](<m_1030@38:0>:int,<<f_m_1175@36:1>@43:0>:int)|- P[<<f_m_1175@36:1>@43:0>](
      <f_m_1175@36:0>:int,<<f_m_1175@36:1>@43:0>:int)
      
      P[<m_1030@38:0>](<m_1030@38:0>:int), ((<m_1030@38:0> > 100) && ((10 + <<m_1030@38:1>@41:0>) = <m_1030@38:0>))
      |- P[<<m_1030@38:1>@41:0>](<m_1030@38:0>:int,<<m_1030@38:1>@41:0>:int)
      
      P[<f_m_1175@36:2>](<f_m_1175@36:0>:int,<m_1030@38:0>:int)|- P[<m_1030@38:0>](<m_1030@38:0>:int)
      
      P[<m_1030@28:0>](<f_m_1175@36:0>:int),
      P[<<m_1030@31:1>@34:0>]((11 + <f_m_1175@36:0>):int,<f_m_1175@36:2>:int), (
      <f_m_1175@36:0> <= 100) |- P[<f_m_1175@36:2>](<f_m_1175@36:0>:int,
                                                    <f_m_1175@36:2>:int)
      
      P[<m_1030@31:0>](<m_1030@31:0>:int), ((<m_1030@31:0> > 100) && ((10 + <<m_1030@31:1>@34:0>) = <m_1030@31:0>))
      |- P[<<m_1030@31:1>@34:0>](<m_1030@31:0>:int,<<m_1030@31:1>@34:0>:int)
      
      P[<m_1030@28:0>]((-11 + <m_1030@31:0>):int), (<m_1030@31:0> <= 111) |- P[<m_1030@31:0>](<m_1030@31:0>:int)
      
      P[<main_1032@25:0>](<m_1030@28:0>:int), (<m_1030@28:0> <= 95) |- P[<m_1030@28:0>](<m_1030@28:0>:int)
      
      P[<f_1177@23:0>](<main_1032@25:0>:int)|- P[<main_1032@25:0>](<main_1032@25:0>:int)
      
      |- P[<f_1177@23:0>](<f_1177@23:0>:int)
    call trees:
      <main_1174@20>
        <f_1177@23>
          <main_1032@25>
            <m_1030@28>
              <m_1030@31>
              </<m_1030@31:1>@34>
              <f_m_1175@36>
                <m_1030@38>
                </<m_1030@38:1>@41>
              </<f_m_1175@36:1>@43>
            </<m_1030@28:1>@45>
            <f_main_1176@47>
              <fail_1179@50>
    inlined horn clauses:
      P[<fail_1179@50:0>](<fail_1179@50:0>:bool)|- bot
      
      P[<<m_1030@28:1>@45:0>](<f_main_1176@47:0>:int,<f_main_1176@47:2>:int),
      ((<f_main_1176@47:2> <> 91) && ((<f_main_1176@47:0> <= 95) && <fail_1179@50:0>))
      |- P[<fail_1179@50:0>](<fail_1179@50:0>:bool)
      
      P[<m_1030@28:0>](<m_1030@28:0>:int),
      P[<<m_1030@31:1>@34:0>]((11 + <m_1030@28:0>):int,var18:int),
      P[<<m_1030@38:1>@41:0>](var18:int,<<m_1030@28:1>@45:0>:int), (<m_1030@28:0> <= 100)
      |- P[<<m_1030@28:1>@45:0>](<m_1030@28:0>:int,<<m_1030@28:1>@45:0>:int)
      
      P[<m_1030@38:0>](<m_1030@38:0>:int), ((<m_1030@38:0> > 100) && ((10 + <<m_1030@38:1>@41:0>) = <m_1030@38:0>))
      |- P[<<m_1030@38:1>@41:0>](<m_1030@38:0>:int,<<m_1030@38:1>@41:0>:int)
      
      P[<m_1030@28:0>](<f_m_1175@36:0>:int),
      P[<<m_1030@31:1>@34:0>]((11 + <f_m_1175@36:0>):int,<m_1030@38:0>:int), (
      <f_m_1175@36:0> <= 100) |- P[<m_1030@38:0>](<m_1030@38:0>:int)
      
      P[<m_1030@31:0>](<m_1030@31:0>:int), ((<m_1030@31:0> > 100) && ((10 + <<m_1030@31:1>@34:0>) = <m_1030@31:0>))
      |- P[<<m_1030@31:1>@34:0>](<m_1030@31:0>:int,<<m_1030@31:1>@34:0>:int)
      
      P[<m_1030@28:0>]((-11 + <m_1030@31:0>):int), (<m_1030@31:0> <= 111) |- P[<m_1030@31:0>](<m_1030@31:0>:int)
      
       (<m_1030@28:0> <= 95) |- P[<m_1030@28:0>](<m_1030@28:0>:int)
    begin ParamSubstInfer.infer(4446)[3]
      
    end ParamSubstInfer.infer(4446)[3] (0.044994 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(4448)[3]
      
    end RefTypeInfer.elim_coeffs(4448)[3] (0.002000 sec.)
    begin YhornInterface.solve(4910)[3]
      begin HcSolver.solve_ub(4911)[4]
        encoded:
          P[<fail_1179@50:0>](<fail_1179@50:0>:int)|- bot
          
          P[<<m_1030@28:1>@45:0>](<f_main_1176@47:0>:int,<f_main_1176@47:2>:int),
          ((<f_main_1176@47:2> <> 91) && ((<f_main_1176@47:0> <= 95) && (<fail_1179@50:0> = 1)))
          |- P[<fail_1179@50:0>](<fail_1179@50:0>:int)
          
          P[<m_1030@28:0>](<m_1030@28:0>:int),
          P[<<m_1030@31:1>@34:0>]((11 + <m_1030@28:0>):int,var18:int),
          P[<<m_1030@38:1>@41:0>](var18:int,<<m_1030@28:1>@45:0>:int), (
          <m_1030@28:0> <= 100) |- P[<<m_1030@28:1>@45:0>](<m_1030@28:0>:int,
                                                           <<m_1030@28:1>@45:0>:int)
          
          P[<m_1030@38:0>](<m_1030@38:0>:int), ((<m_1030@38:0> > 100) && ((10 + <<m_1030@38:1>@41:0>) = <m_1030@38:0>))
          |- P[<<m_1030@38:1>@41:0>](<m_1030@38:0>:int,<<m_1030@38:1>@41:0>:int)
          
          P[<m_1030@28:0>](<f_m_1175@36:0>:int),
          P[<<m_1030@31:1>@34:0>]((11 + <f_m_1175@36:0>):int,<m_1030@38:0>:int), (
          <f_m_1175@36:0> <= 100) |- P[<m_1030@38:0>](<m_1030@38:0>:int)
          
          P[<m_1030@31:0>](<m_1030@31:0>:int), ((<m_1030@31:0> > 100) && ((10 + <<m_1030@31:1>@34:0>) = <m_1030@31:0>))
          |- P[<<m_1030@31:1>@34:0>](<m_1030@31:0>:int,<<m_1030@31:1>@34:0>:int)
          
          P[<m_1030@28:0>]((-11 + <m_1030@31:0>):int), (<m_1030@31:0> <= 111) |- P[<m_1030@31:0>](<m_1030@31:0>:int)
          
           (<m_1030@28:0> <= 95) |- P[<m_1030@28:0>](<m_1030@28:0>:int)
        input to Yhorn:
          P[<fail_1179@50:0>](<fail_1179@50:0>:int)|- bot
          
          P[<<m_1030@28:1>@45:0>](<f_main_1176@47:0>:int,<f_main_1176@47:2>:int),
          ((<f_main_1176@47:0> <= 95) && ((<f_main_1176@47:2> <> 91) && (<fail_1179@50:0> = 1)))
          |- P[<fail_1179@50:0>](<fail_1179@50:0>:int)
          
          P[<m_1030@28:0>](<m_1030@28:0>:int),
          P[<<m_1030@31:1>@34:0>](var19:int,var18:int),
          P[<<m_1030@38:1>@41:0>](var18:int,<<m_1030@28:1>@45:0>:int),
          ((var19 = (11 + <m_1030@28:0>)) && (<m_1030@28:0> <= 100))
          |- P[<<m_1030@28:1>@45:0>](<m_1030@28:0>:int,<<m_1030@28:1>@45:0>:int)
          
          P[<m_1030@38:0>](<m_1030@38:0>:int), (((10 + <<m_1030@38:1>@41:0>) = <m_1030@38:0>) && (<m_1030@38:0> > 100))
          |- P[<<m_1030@38:1>@41:0>](<m_1030@38:0>:int,<<m_1030@38:1>@41:0>:int)
          
          P[<m_1030@28:0>](<f_m_1175@36:0>:int),
          P[<<m_1030@31:1>@34:0>](var20:int,<m_1030@38:0>:int),
          ((var20 = (11 + <f_m_1175@36:0>)) && (<f_m_1175@36:0> <= 100)) |- P[<m_1030@38:0>](
          <m_1030@38:0>:int)
          
          P[<m_1030@31:0>](<m_1030@31:0>:int), (((10 + <<m_1030@31:1>@34:0>) = <m_1030@31:0>) && (<m_1030@31:0> > 100))
          |- P[<<m_1030@31:1>@34:0>](<m_1030@31:0>:int,<<m_1030@31:1>@34:0>:int)
          
          P[<m_1030@28:0>](var21:int), (((11 + var21) = <m_1030@31:0>) && (<m_1030@31:0> <= 111))
          |- P[<m_1030@31:0>](<m_1030@31:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1179_sep_50_sep_0($91)) -> 1=0.
(($91-1=0) & ($92-91<>0) & ($93-95<=0)) & (v_sep_m_1030_sep_28_sep_1_sep_45_sep_0($93,$92)) -> v_sep_fail_1179_sep_50_sep_0($91).
(($94-100<=0) & (-$94+$95-11=0)) & (v_sep_m_1030_sep_38_sep_1_sep_41_sep_0($96,$97)) & (v_sep_m_1030_sep_31_sep_1_sep_34_sep_0($95,$96)) & (v_sep_m_1030_sep_28_sep_0($94)) -> v_sep_m_1030_sep_28_sep_1_sep_45_sep_0($94,$97).
(($98-100>0) & (-$98+$99+10=0)) & (v_sep_m_1030_sep_38_sep_0($98)) -> v_sep_m_1030_sep_38_sep_1_sep_41_sep_0($98,$99).
(($100-100<=0) & (-$100+$101-11=0)) & (v_sep_m_1030_sep_31_sep_1_sep_34_sep_0($101,$98)) & (v_sep_m_1030_sep_28_sep_0($100)) -> v_sep_m_1030_sep_38_sep_0($98).
(($102-100>0) & (-$102+$103+10=0)) & (v_sep_m_1030_sep_31_sep_0($102)) -> v_sep_m_1030_sep_31_sep_1_sep_34_sep_0($102,$103).
(($102-111<=0) & (-$102+$104+11=0)) & (v_sep_m_1030_sep_28_sep_0($104)) -> v_sep_m_1030_sep_31_sep_0($102).
$94-95<=0 -> v_sep_m_1030_sep_28_sep_0($94).


v_sep_fail_1179_sep_50_sep_0: X
v_sep_m_1030_sep_28_sep_0: X
v_sep_m_1030_sep_28_sep_1_sep_45_sep_0: X
v_sep_m_1030_sep_31_sep_0: X
v_sep_m_1030_sep_31_sep_1_sep_34_sep_0: X
v_sep_m_1030_sep_38_sep_0: X
v_sep_m_1030_sep_38_sep_1_sep_41_sep_0: X
............
v_sep_fail_1179_sep_50_sep_0: X
v_sep_m_1030_sep_28_sep_0: X
v_sep_m_1030_sep_28_sep_1_sep_45_sep_0: X
v_sep_m_1030_sep_31_sep_0: X
v_sep_m_1030_sep_31_sep_1_sep_34_sep_0: X
v_sep_m_1030_sep_38_sep_0: X
v_sep_m_1030_sep_38_sep_1_sep_41_sep_0: X
....
v_sep_fail_1179_sep_50_sep_0: X
v_sep_m_1030_sep_28_sep_0: X
v_sep_m_1030_sep_28_sep_1_sep_45_sep_0: X
v_sep_m_1030_sep_31_sep_0: X
v_sep_m_1030_sep_31_sep_1_sep_34_sep_0: X
v_sep_m_1030_sep_38_sep_0: X
v_sep_m_1030_sep_38_sep_1_sep_41_sep_0: X
.......
v_sep_fail_1179_sep_50_sep_0: X
v_sep_m_1030_sep_28_sep_0: X
v_sep_m_1030_sep_28_sep_1_sep_45_sep_0: X
v_sep_m_1030_sep_31_sep_0: X
v_sep_m_1030_sep_31_sep_1_sep_34_sep_0: X
v_sep_m_1030_sep_38_sep_0: X
v_sep_m_1030_sep_38_sep_1_sep_41_sep_0: X
.........
v_sep_fail_1179_sep_50_sep_0: X
v_sep_m_1030_sep_28_sep_0: X
v_sep_m_1030_sep_28_sep_1_sep_45_sep_0: X
v_sep_m_1030_sep_31_sep_0: X
v_sep_m_1030_sep_31_sep_1_sep_34_sep_0: X
v_sep_m_1030_sep_38_sep_0: X
v_sep_m_1030_sep_38_sep_1_sep_41_sep_0: X
............(0=0) & (v_sep_fail_1179_sep_50_sep_0($91)) -> 1=0.
(($91-1=0) & ($92-91<>0) & ($93-95<=0)) & (v_sep_m_1030_sep_28_sep_1_sep_45_sep_0($93,$92)) -> v_sep_fail_1179_sep_50_sep_0($91).
(($94-100<=0) & (-$94+$95-11=0)) & (v_sep_m_1030_sep_38_sep_1_sep_41_sep_0($96,$97)) & (v_sep_m_1030_sep_31_sep_1_sep_34_sep_0($95,$96)) & (v_sep_m_1030_sep_28_sep_0($94)) -> v_sep_m_1030_sep_28_sep_1_sep_45_sep_0($94,$97).
(($98-100>0) & (-$98+$99+10=0)) & (v_sep_m_1030_sep_38_sep_0($98)) -> v_sep_m_1030_sep_38_sep_1_sep_41_sep_0($98,$99).
(($100-100<=0) & (-$100+$101-11=0)) & (v_sep_m_1030_sep_31_sep_1_sep_34_sep_0($101,$98)) & (v_sep_m_1030_sep_28_sep_0($100)) -> v_sep_m_1030_sep_38_sep_0($98).
(($102-100>0) & (-$102+$103+10=0)) & (v_sep_m_1030_sep_31_sep_0($102)) -> v_sep_m_1030_sep_31_sep_1_sep_34_sep_0($102,$103).
(($102-111<=0) & (-$102+$104+11=0)) & (v_sep_m_1030_sep_28_sep_0($104)) -> v_sep_m_1030_sep_31_sep_0($102).
$94-95<=0 -> v_sep_m_1030_sep_28_sep_0($94).

           (<m_1030@28:0> <= 95) |- P[<m_1030@28:0>](<m_1030@28:0>:int)
        solution:
          P[<fail_1179@50:0>]($105:bool) = false
          P[<m_1030@28:0>]($123:int) = ($123 <= 95)
          P[<<m_1030@28:1>@45:0>]($108:int,$110:int) = false
          P[<m_1030@31:0>]($129:int) = ($129 <= 106)
          P[<<m_1030@31:1>@34:0>]($118:int,$120:int) = ((2 * $120) <= (86 + $118))
          P[<m_1030@38:0>]($126:int) = ($126 <= 96)
          P[<<m_1030@38:1>@41:0>]($113:int,$115:int) = (106 <= $113)
        
      end HcSolver.solve_ub(4911)[4] (0.037994 sec.)
      begin HcSolver.check_validity(5346)[4]
        input:
          P[<fail_1179@50:0>](<fail_1179@50:0>:bool)|- bot
          
          P[<<m_1030@28:1>@45:0>](<f_main_1176@47:0>:int,<f_main_1176@47:2>:int),
          ((<f_main_1176@47:2> <> 91) && ((<f_main_1176@47:0> <= 95) && <fail_1179@50:0>))
          |- P[<fail_1179@50:0>](<fail_1179@50:0>:bool)
          
          P[<m_1030@28:0>](<m_1030@28:0>:int),
          P[<<m_1030@31:1>@34:0>]((11 + <m_1030@28:0>):int,var18:int),
          P[<<m_1030@38:1>@41:0>](var18:int,<<m_1030@28:1>@45:0>:int), (
          <m_1030@28:0> <= 100) |- P[<<m_1030@28:1>@45:0>](<m_1030@28:0>:int,
                                                           <<m_1030@28:1>@45:0>:int)
          
          P[<m_1030@38:0>](<m_1030@38:0>:int), ((<m_1030@38:0> > 100) && ((10 + <<m_1030@38:1>@41:0>) = <m_1030@38:0>))
          |- P[<<m_1030@38:1>@41:0>](<m_1030@38:0>:int,<<m_1030@38:1>@41:0>:int)
          
          P[<m_1030@28:0>](<f_m_1175@36:0>:int),
          P[<<m_1030@31:1>@34:0>]((11 + <f_m_1175@36:0>):int,<m_1030@38:0>:int), (
          <f_m_1175@36:0> <= 100) |- P[<m_1030@38:0>](<m_1030@38:0>:int)
          
          P[<m_1030@31:0>](<m_1030@31:0>:int), ((<m_1030@31:0> > 100) && ((10 + <<m_1030@31:1>@34:0>) = <m_1030@31:0>))
          |- P[<<m_1030@31:1>@34:0>](<m_1030@31:0>:int,<<m_1030@31:1>@34:0>:int)
          
          P[<m_1030@28:0>]((-11 + <m_1030@31:0>):int), (<m_1030@31:0> <= 111) |- P[<m_1030@31:0>](<m_1030@31:0>:int)
          
           (<m_1030@28:0> <= 95) |- P[<m_1030@28:0>](<m_1030@28:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(5346)[4] (0.008999 sec.)
      solution:
        P[<fail_1179@50:0>]($105:bool) = false
        P[<m_1030@28:0>]($123:int) = ($123 <= 95)
        P[<<m_1030@28:1>@45:0>]($108:int,$110:int) = false
        P[<m_1030@31:0>]($129:int) = ($129 <= 106)
        P[<<m_1030@31:1>@34:0>]($118:int,$120:int) = ((2 * $120) <= (86 + $118))
        P[<m_1030@38:0>]($126:int) = ($126 <= 96)
        P[<<m_1030@38:1>@41:0>]($113:int,$115:int) = (106 <= $113)
    end YhornInterface.solve(4910)[3] (0.046993 sec.)
    
  end RefTypeInfer.infer_etrs(2229)[2] (0.104985 sec.)
  refinement types:
    main_1174: X
    f_1177: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    m_1030: v1:{v1:int | (v1 <= 95)} -> (v2:{v2:int | false} -> X) -> X
    m_1030: v1:{v1:int | (v1 <= 106)} -> (v2:{v2:int | ((2 * v2) <= (86 + v1))} -> X) -> X
    f_m_1175: v1:int -> (v2:int -> X) -> v4:int -> X
    m_1030: v1:{v1:int | (v1 <= 96)} -> (v2:{v2:int | (106 <= v1)} -> X) -> X
    f_main_1176: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1179: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1178: var30:int -> var29:unit -> X
  abstraction types:
    main_1174: X
    f_1177: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    m_1030: var35:int[var35 -> (var35 <= 95),
                      var35 -> (var35 <= 106),
                      var35 -> (var35 <= 96)] ->
            (var36:int[var36 -> ((2 * var36) <= (86 + var35)),
                       var36 -> (106 <= var35)] -> X) -> X
    f_m_1175: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1176: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1179: v1:bool -> (v2:unit -> X) -> X
    f_1178: var30:int -> var29:unit -> X
  
end AbsTypeInfer.refine(2228)[1] (0.107984 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 0

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1174
  main_1174 -> (rand_int f_1177)
  f_1177 x_1149 -> (main_1032 x_1149 (f_1178 x_1149))
  f_1178 x_1149 x_1146 -> end
  f_m_1175 x_1031 k_m_1076 x_1096 -> (m_1030 x_1096 k_m_1076)
  f_main_1176 n_1033 k_main_1114 x_1117 when (x_1117 = 91) -> (k_main_1114 ())
  f_main_1176 n_1033 k_main_1114 x_1117 when (not (x_1117 = 91)) -> (fail_1179 true k_main_1114)
  fail_1179 b k -> {fail} => (k ())
  m_1030 x_1031 k_m_1076 when (x_1031 > 100) -> (k_m_1076 (x_1031 - 10))
  m_1030 x_1031 k_m_1076 when (not (x_1031 > 100)) -> (m_1030 (x_1031 + 11) (f_m_1175 x_1031 k_m_1076))
  main_1032 n_1033 k_main_1114 when (n_1033 <= 95) -> (m_1030 n_1033 (f_main_1176 n_1033 k_main_1114))
  main_1032 n_1033 k_main_1114 when (not (n_1033 <= 95)) -> (k_main_1114 ())
Types:
  main_1174 : X
  fail_1179 : (x_1:bool[x_1] -> (unit -> X) -> X)
  m_1030 : (x_1:int[x_1 <= 96; x_1 <= 106; x_1 <= 95] -> (x_3:int[x_1 >= 106; x_1 >= 2*x_3 - 86] -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... Restart TRecS (param: 1000 -> 2000)
Restart TRecS (param: 2000 -> 4000)
DONE!

Error trace::
  main_1174 ... --> 
  f_1177 ... --> 
  main_1032 [1/2] ... --> 
  m_1030 [2/2] ... --> 
  m_1030 [1/2] ... --> 
  f_m_1175 ... --> 
  m_1030 [2/2] ... --> 
  m_1030 [1/2] ... --> 
  f_m_1175 ... --> 
  m_1030 [2/2] ... --> 
  m_1030 [2/2] ... --> 
  m_1030 [1/2] ... --> 
  f_m_1175 ... --> 
  m_1030 [1/2] ... --> 
  f_m_1175 ... --> 
  m_1030 [1/2] ... --> 
  f_main_1176 [2/2] ... --> 
  fail_1179 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 1; 0; 0; 1; 1; 0; 0; 0; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(10059)[1]
  program:
    main_1174  | true = ((Random.int 0) f_1177)
    f_1177 x_1149 | true = (main_1032 x_1149
                                      (f_1178 x_1149))
    f_1178 x_1149 x_1146 | true = end
    f_m_1175 x_1031 k_m_1076 x_1096 | true = (m_1030 x_1096
                                                     k_m_1076)
    f_main_1176 n_1033 k_main_1114 x_1117 | (x_1117 = 91) = (k_main_1114 ())
    f_main_1176 n_1033 k_main_1114 x_1117 | (not (x_1117 = 91)) = (fail_1179 true
                                                                    k_main_1114)
    fail_1179 b k | true = (fail ())
    m_1030 x_1031 k_m_1076 | (x_1031 > 100) = (k_m_1076 (x_1031 - 10))
    m_1030 x_1031 k_m_1076 | (not (x_1031 > 100)) = (m_1030 (x_1031 + 11)
                                                            (f_m_1175 x_1031
                                                                    k_m_1076))
    main_1032 n_1033 k_main_1114 | (n_1033 <= 95) = (m_1030 n_1033
                                                            (f_main_1176 n_1033
                                                                    k_main_1114))
    main_1032 n_1033 k_main_1114 | (not (n_1033 <= 95)) = (k_main_1114 ())
    main_1174:X
    f_1177:int -> X
    f_1178:int -> unit -> X
    f_m_1175:int -> (int -> X) -> int -> X
    f_main_1176:int -> (unit -> X) -> int -> X
    fail_1179:bool -> (unit -> X) -> X
    m_1030:int -> (int -> X) -> X
    main_1032:int -> (unit -> X) -> X
  inlined functions: f_1177,f_1178,f_m_1175,f_main_1176,main_1032
  counterexample: 0:0:0:1:0:0:1:0:0:1:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1177@56:0> = var39)
     [true.(<main_1032@58:0> = <f_1177@56:0>)
      [(<main_1032@58:0> <= 95).(<m_1030@61:0> = <main_1032@58:0>)
       [(not (<m_1030@61:0> > 100)).(<m_1030@64:0> = (<m_1030@61:0> + 11))
        [(<m_1030@64:0> > 100).(<<m_1030@64:1>@67:0> = (<m_1030@64:0> - 10))
         [true.((<f_m_1175@69:0> = <m_1030@61:0>) && (<f_m_1175@69:2> = <<m_1030@64:1>@67:0>))
          [true.(<m_1030@71:0> = <f_m_1175@69:2>)
           [(not (<m_1030@71:0> > 100)).(<m_1030@74:0> = (<m_1030@71:0> + 11))
            [(<m_1030@74:0> > 100).(<<m_1030@74:1>@77:0> = (<m_1030@74:0> - 10))
             [true.((<f_m_1175@79:0> = <m_1030@71:0>) && (<f_m_1175@79:2> = <<m_1030@74:1>@77:0>))
              [true.(<m_1030@81:0> = <f_m_1175@79:2>)
               [(not (<m_1030@81:0> > 100)).(<m_1030@84:0> = (<m_1030@81:0> + 11))
                [(not (<m_1030@84:0> > 100)).(<m_1030@87:0> = (<m_1030@84:0> + 11))
                 [(<m_1030@87:0> > 100).(<<m_1030@87:1>@90:0> = (<m_1030@87:0> - 10))
                  [true.((<f_m_1175@92:0> = <m_1030@84:0>) && (<f_m_1175@92:2> = <<m_1030@87:1>@90:0>))
                   [true.(<m_1030@94:0> = <f_m_1175@92:2>)
                    [(<m_1030@94:0> > 100).(<<m_1030@94:1>@97:0> = (<m_1030@94:0> - 10))
                     [true.(<<f_m_1175@92:1>@99:0> = <<m_1030@94:1>@97:0>)
                      [true.(<<m_1030@84:1>@101:0> = <<f_m_1175@92:1>@99:0>)
                       [true.((<f_m_1175@103:0> = <m_1030@81:0>) && (<f_m_1175@103:2> = <<m_1030@84:1>@101:0>))
                        [true.(<m_1030@105:0> = <f_m_1175@103:2>)
                         [(<m_1030@105:0> > 100).(<<m_1030@105:1>@108:0> = (<m_1030@105:0> - 10))
                          [true.(<<f_m_1175@103:1>@110:0> = <<m_1030@105:1>@108:0>)
                           [true.(<<m_1030@81:1>@112:0> = <<f_m_1175@103:1>@110:0>)
                            [true.(<<f_m_1175@79:1>@114:0> = <<m_1030@81:1>@112:0>)
                             [true.(<<m_1030@71:1>@116:0> = <<f_m_1175@79:1>@114:0>)
                              [true.(<<f_m_1175@69:1>@118:0> = <<m_1030@71:1>@116:0>)
                               [true.(<<m_1030@61:1>@120:0> = <<f_m_1175@69:1>@118:0>)
                                [true.
                                 ((<f_main_1176@122:0> = <main_1032@58:0>) &&
                                  (<f_main_1176@122:2> = <<m_1030@61:1>@120:0>))
                                 [(not (<f_main_1176@122:2> = 91)).(<fail_1179@125:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(10060)[2]
    horn clauses:
      P[<fail_1179@125:0>](<fail_1179@125:0>:bool)|- bot
      
      P[<f_main_1176@122:2>](<f_main_1176@122:0>:int,<f_main_1176@122:2>:int),
      ((<f_main_1176@122:2> <> 91) && <fail_1179@125:0>) |- P[<fail_1179@125:0>](
      <fail_1179@125:0>:bool)
      
      P[<main_1032@58:0>](<f_main_1176@122:0>:int),
      P[<<m_1030@61:1>@120:0>](<f_main_1176@122:0>:int,<f_main_1176@122:2>:int), (
      <f_main_1176@122:0> <= 95) |- P[<f_main_1176@122:2>](<f_main_1176@122:0>:int,
                                                           <f_main_1176@122:2>:int)
      
      P[<m_1030@61:0>](<m_1030@61:0>:int),
      P[<<f_m_1175@69:1>@118:0>](<m_1030@61:0>:int,<<m_1030@61:1>@120:0>:int), (
      <m_1030@61:0> <= 100) |- P[<<m_1030@61:1>@120:0>](<m_1030@61:0>:int,
                                                        <<m_1030@61:1>@120:0>:int)
      
      P[<f_m_1175@69:2>](<f_m_1175@69:0>:int,<m_1030@71:0>:int),
      P[<<m_1030@71:1>@116:0>](<m_1030@71:0>:int,<<f_m_1175@69:1>@118:0>:int)|- P[<<f_m_1175@69:1>@118:0>](
      <f_m_1175@69:0>:int,<<f_m_1175@69:1>@118:0>:int)
      
      P[<m_1030@71:0>](<m_1030@71:0>:int),
      P[<<f_m_1175@79:1>@114:0>](<m_1030@71:0>:int,<<m_1030@71:1>@116:0>:int), (
      <m_1030@71:0> <= 100) |- P[<<m_1030@71:1>@116:0>](<m_1030@71:0>:int,
                                                        <<m_1030@71:1>@116:0>:int)
      
      P[<f_m_1175@79:2>](<f_m_1175@79:0>:int,<m_1030@81:0>:int),
      P[<<m_1030@81:1>@112:0>](<m_1030@81:0>:int,<<f_m_1175@79:1>@114:0>:int)|- P[<<f_m_1175@79:1>@114:0>](
      <f_m_1175@79:0>:int,<<f_m_1175@79:1>@114:0>:int)
      
      P[<m_1030@81:0>](<m_1030@81:0>:int),
      P[<<f_m_1175@103:1>@110:0>](<m_1030@81:0>:int,<<m_1030@81:1>@112:0>:int), (
      <m_1030@81:0> <= 100) |- P[<<m_1030@81:1>@112:0>](<m_1030@81:0>:int,
                                                        <<m_1030@81:1>@112:0>:int)
      
      P[<f_m_1175@103:2>](<f_m_1175@103:0>:int,<m_1030@105:0>:int),
      P[<<m_1030@105:1>@108:0>](<m_1030@105:0>:int,<<f_m_1175@103:1>@110:0>:int)|- P[<<f_m_1175@103:1>@110:0>](
      <f_m_1175@103:0>:int,<<f_m_1175@103:1>@110:0>:int)
      
      P[<m_1030@105:0>](<m_1030@105:0>:int),
      ((<m_1030@105:0> > 100) && ((10 + <<m_1030@105:1>@108:0>) = <m_1030@105:0>))
      |- P[<<m_1030@105:1>@108:0>](<m_1030@105:0>:int,<<m_1030@105:1>@108:0>:int)
      
      P[<f_m_1175@103:2>](<f_m_1175@103:0>:int,<m_1030@105:0>:int)|- P[<m_1030@105:0>](<m_1030@105:0>:int)
      
      P[<m_1030@81:0>](<f_m_1175@103:0>:int),
      P[<<m_1030@84:1>@101:0>]((11 + <f_m_1175@103:0>):int,<f_m_1175@103:2>:int), (
      <f_m_1175@103:0> <= 100) |- P[<f_m_1175@103:2>](<f_m_1175@103:0>:int,
                                                      <f_m_1175@103:2>:int)
      
      P[<m_1030@84:0>](<m_1030@84:0>:int),
      P[<<f_m_1175@92:1>@99:0>](<m_1030@84:0>:int,<<m_1030@84:1>@101:0>:int), (
      <m_1030@84:0> <= 100) |- P[<<m_1030@84:1>@101:0>](<m_1030@84:0>:int,
                                                        <<m_1030@84:1>@101:0>:int)
      
      P[<f_m_1175@92:2>](<f_m_1175@92:0>:int,<m_1030@94:0>:int),
      P[<<m_1030@94:1>@97:0>](<m_1030@94:0>:int,<<f_m_1175@92:1>@99:0>:int)|- P[<<f_m_1175@92:1>@99:0>](
      <f_m_1175@92:0>:int,<<f_m_1175@92:1>@99:0>:int)
      
      P[<m_1030@94:0>](<m_1030@94:0>:int), ((<m_1030@94:0> > 100) && ((10 + <<m_1030@94:1>@97:0>) = <m_1030@94:0>))
      |- P[<<m_1030@94:1>@97:0>](<m_1030@94:0>:int,<<m_1030@94:1>@97:0>:int)
      
      P[<f_m_1175@92:2>](<f_m_1175@92:0>:int,<m_1030@94:0>:int)|- P[<m_1030@94:0>](<m_1030@94:0>:int)
      
      P[<m_1030@84:0>](<f_m_1175@92:0>:int),
      P[<<m_1030@87:1>@90:0>]((11 + <f_m_1175@92:0>):int,<f_m_1175@92:2>:int), (
      <f_m_1175@92:0> <= 100) |- P[<f_m_1175@92:2>](<f_m_1175@92:0>:int,
                                                    <f_m_1175@92:2>:int)
      
      P[<m_1030@87:0>](<m_1030@87:0>:int), ((<m_1030@87:0> > 100) && ((10 + <<m_1030@87:1>@90:0>) = <m_1030@87:0>))
      |- P[<<m_1030@87:1>@90:0>](<m_1030@87:0>:int,<<m_1030@87:1>@90:0>:int)
      
      P[<m_1030@84:0>]((-11 + <m_1030@87:0>):int), (<m_1030@87:0> <= 111) |- P[<m_1030@87:0>](<m_1030@87:0>:int)
      
      P[<m_1030@81:0>]((-11 + <m_1030@84:0>):int), (<m_1030@84:0> <= 111) |- P[<m_1030@84:0>](<m_1030@84:0>:int)
      
      P[<f_m_1175@79:2>](<f_m_1175@79:0>:int,<m_1030@81:0>:int)|- P[<m_1030@81:0>](<m_1030@81:0>:int)
      
      P[<m_1030@71:0>](<f_m_1175@79:0>:int),
      P[<<m_1030@74:1>@77:0>]((11 + <f_m_1175@79:0>):int,<f_m_1175@79:2>:int), (
      <f_m_1175@79:0> <= 100) |- P[<f_m_1175@79:2>](<f_m_1175@79:0>:int,
                                                    <f_m_1175@79:2>:int)
      
      P[<m_1030@74:0>](<m_1030@74:0>:int), ((<m_1030@74:0> > 100) && ((10 + <<m_1030@74:1>@77:0>) = <m_1030@74:0>))
      |- P[<<m_1030@74:1>@77:0>](<m_1030@74:0>:int,<<m_1030@74:1>@77:0>:int)
      
      P[<m_1030@71:0>]((-11 + <m_1030@74:0>):int), (<m_1030@74:0> <= 111) |- P[<m_1030@74:0>](<m_1030@74:0>:int)
      
      P[<f_m_1175@69:2>](<f_m_1175@69:0>:int,<m_1030@71:0>:int)|- P[<m_1030@71:0>](<m_1030@71:0>:int)
      
      P[<m_1030@61:0>](<f_m_1175@69:0>:int),
      P[<<m_1030@64:1>@67:0>]((11 + <f_m_1175@69:0>):int,<f_m_1175@69:2>:int), (
      <f_m_1175@69:0> <= 100) |- P[<f_m_1175@69:2>](<f_m_1175@69:0>:int,
                                                    <f_m_1175@69:2>:int)
      
      P[<m_1030@64:0>](<m_1030@64:0>:int), ((<m_1030@64:0> > 100) && ((10 + <<m_1030@64:1>@67:0>) = <m_1030@64:0>))
      |- P[<<m_1030@64:1>@67:0>](<m_1030@64:0>:int,<<m_1030@64:1>@67:0>:int)
      
      P[<m_1030@61:0>]((-11 + <m_1030@64:0>):int), (<m_1030@64:0> <= 111) |- P[<m_1030@64:0>](<m_1030@64:0>:int)
      
      P[<main_1032@58:0>](<m_1030@61:0>:int), (<m_1030@61:0> <= 95) |- P[<m_1030@61:0>](<m_1030@61:0>:int)
      
      P[<f_1177@56:0>](<main_1032@58:0>:int)|- P[<main_1032@58:0>](<main_1032@58:0>:int)
      
      |- P[<f_1177@56:0>](<f_1177@56:0>:int)
    call trees:
      <main_1174@53>
        <f_1177@56>
          <main_1032@58>
            <m_1030@61>
              <m_1030@64>
              </<m_1030@64:1>@67>
              <f_m_1175@69>
                <m_1030@71>
                  <m_1030@74>
                  </<m_1030@74:1>@77>
                  <f_m_1175@79>
                    <m_1030@81>
                      <m_1030@84>
                        <m_1030@87>
                        </<m_1030@87:1>@90>
                        <f_m_1175@92>
                          <m_1030@94>
                          </<m_1030@94:1>@97>
                        </<f_m_1175@92:1>@99>
                      </<m_1030@84:1>@101>
                      <f_m_1175@103>
                        <m_1030@105>
                        </<m_1030@105:1>@108>
                      </<f_m_1175@103:1>@110>
                    </<m_1030@81:1>@112>
                  </<f_m_1175@79:1>@114>
                </<m_1030@71:1>@116>
              </<f_m_1175@69:1>@118>
            </<m_1030@61:1>@120>
            <f_main_1176@122>
              <fail_1179@125>
    inlined horn clauses:
      P[<fail_1179@125:0>](<fail_1179@125:0>:bool)|- bot
      
      P[<<m_1030@61:1>@120:0>](<f_main_1176@122:0>:int,<f_main_1176@122:2>:int),
      ((<f_main_1176@122:2> <> 91) && ((<f_main_1176@122:0> <= 95) && <fail_1179@125:0>))
      |- P[<fail_1179@125:0>](<fail_1179@125:0>:bool)
      
      P[<m_1030@61:0>](<m_1030@61:0>:int),
      P[<<m_1030@64:1>@67:0>]((11 + <m_1030@61:0>):int,var40:int),
      P[<<m_1030@71:1>@116:0>](var40:int,<<m_1030@61:1>@120:0>:int), (
      <m_1030@61:0> <= 100) |- P[<<m_1030@61:1>@120:0>](<m_1030@61:0>:int,
                                                        <<m_1030@61:1>@120:0>:int)
      
      P[<m_1030@71:0>](<m_1030@71:0>:int),
      P[<<m_1030@74:1>@77:0>]((11 + <m_1030@71:0>):int,var41:int),
      P[<<m_1030@81:1>@112:0>](var41:int,<<m_1030@71:1>@116:0>:int), (
      <m_1030@71:0> <= 100) |- P[<<m_1030@71:1>@116:0>](<m_1030@71:0>:int,
                                                        <<m_1030@71:1>@116:0>:int)
      
      P[<m_1030@81:0>](<m_1030@81:0>:int),
      P[<<m_1030@84:1>@101:0>]((11 + <m_1030@81:0>):int,var42:int),
      P[<<m_1030@105:1>@108:0>](var42:int,<<m_1030@81:1>@112:0>:int), (
      <m_1030@81:0> <= 100) |- P[<<m_1030@81:1>@112:0>](<m_1030@81:0>:int,
                                                        <<m_1030@81:1>@112:0>:int)
      
      P[<m_1030@105:0>](<m_1030@105:0>:int),
      ((<m_1030@105:0> > 100) && ((10 + <<m_1030@105:1>@108:0>) = <m_1030@105:0>))
      |- P[<<m_1030@105:1>@108:0>](<m_1030@105:0>:int,<<m_1030@105:1>@108:0>:int)
      
      P[<m_1030@81:0>](<f_m_1175@103:0>:int),
      P[<<m_1030@84:1>@101:0>]((11 + <f_m_1175@103:0>):int,<m_1030@105:0>:int), (
      <f_m_1175@103:0> <= 100) |- P[<m_1030@105:0>](<m_1030@105:0>:int)
      
      P[<m_1030@84:0>](<m_1030@84:0>:int),
      P[<<m_1030@87:1>@90:0>]((11 + <m_1030@84:0>):int,var43:int),
      P[<<m_1030@94:1>@97:0>](var43:int,<<m_1030@84:1>@101:0>:int), (
      <m_1030@84:0> <= 100) |- P[<<m_1030@84:1>@101:0>](<m_1030@84:0>:int,
                                                        <<m_1030@84:1>@101:0>:int)
      
      P[<m_1030@94:0>](<m_1030@94:0>:int), ((<m_1030@94:0> > 100) && ((10 + <<m_1030@94:1>@97:0>) = <m_1030@94:0>))
      |- P[<<m_1030@94:1>@97:0>](<m_1030@94:0>:int,<<m_1030@94:1>@97:0>:int)
      
      P[<m_1030@84:0>](<f_m_1175@92:0>:int),
      P[<<m_1030@87:1>@90:0>]((11 + <f_m_1175@92:0>):int,<m_1030@94:0>:int), (
      <f_m_1175@92:0> <= 100) |- P[<m_1030@94:0>](<m_1030@94:0>:int)
      
      P[<m_1030@87:0>](<m_1030@87:0>:int), ((<m_1030@87:0> > 100) && ((10 + <<m_1030@87:1>@90:0>) = <m_1030@87:0>))
      |- P[<<m_1030@87:1>@90:0>](<m_1030@87:0>:int,<<m_1030@87:1>@90:0>:int)
      
      P[<m_1030@84:0>]((-11 + <m_1030@87:0>):int), (<m_1030@87:0> <= 111) |- P[<m_1030@87:0>](<m_1030@87:0>:int)
      
      P[<m_1030@81:0>]((-11 + <m_1030@84:0>):int), (<m_1030@84:0> <= 111) |- P[<m_1030@84:0>](<m_1030@84:0>:int)
      
      P[<m_1030@71:0>](<f_m_1175@79:0>:int),
      P[<<m_1030@74:1>@77:0>]((11 + <f_m_1175@79:0>):int,<m_1030@81:0>:int), (
      <f_m_1175@79:0> <= 100) |- P[<m_1030@81:0>](<m_1030@81:0>:int)
      
      P[<m_1030@74:0>](<m_1030@74:0>:int), ((<m_1030@74:0> > 100) && ((10 + <<m_1030@74:1>@77:0>) = <m_1030@74:0>))
      |- P[<<m_1030@74:1>@77:0>](<m_1030@74:0>:int,<<m_1030@74:1>@77:0>:int)
      
      P[<m_1030@71:0>]((-11 + <m_1030@74:0>):int), (<m_1030@74:0> <= 111) |- P[<m_1030@74:0>](<m_1030@74:0>:int)
      
      P[<m_1030@61:0>](<f_m_1175@69:0>:int),
      P[<<m_1030@64:1>@67:0>]((11 + <f_m_1175@69:0>):int,<m_1030@71:0>:int), (
      <f_m_1175@69:0> <= 100) |- P[<m_1030@71:0>](<m_1030@71:0>:int)
      
      P[<m_1030@64:0>](<m_1030@64:0>:int), ((<m_1030@64:0> > 100) && ((10 + <<m_1030@64:1>@67:0>) = <m_1030@64:0>))
      |- P[<<m_1030@64:1>@67:0>](<m_1030@64:0>:int,<<m_1030@64:1>@67:0>:int)
      
      P[<m_1030@61:0>]((-11 + <m_1030@64:0>):int), (<m_1030@64:0> <= 111) |- P[<m_1030@64:0>](<m_1030@64:0>:int)
      
       (<m_1030@61:0> <= 95) |- P[<m_1030@61:0>](<m_1030@61:0>:int)
    begin ParamSubstInfer.infer(15367)[3]
      
    end ParamSubstInfer.infer(15367)[3] (1.291803 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(15369)[3]
      
    end RefTypeInfer.elim_coeffs(15369)[3] (0.004000 sec.)
    begin YhornInterface.solve(16377)[3]
      begin HcSolver.solve_ub(16378)[4]
        encoded:
          P[<fail_1179@125:0>](<fail_1179@125:0>:int)|- bot
          
          P[<<m_1030@61:1>@120:0>](<f_main_1176@122:0>:int,<f_main_1176@122:2>:int),
          ((<f_main_1176@122:2> <> 91) && ((<f_main_1176@122:0> <= 95) && (<fail_1179@125:0> = 1)))
          |- P[<fail_1179@125:0>](<fail_1179@125:0>:int)
          
          P[<m_1030@61:0>](<m_1030@61:0>:int),
          P[<<m_1030@64:1>@67:0>]((11 + <m_1030@61:0>):int,var40:int),
          P[<<m_1030@71:1>@116:0>](var40:int,<<m_1030@61:1>@120:0>:int), (
          <m_1030@61:0> <= 100) |- P[<<m_1030@61:1>@120:0>](<m_1030@61:0>:int,
                                                            <<m_1030@61:1>@120:0>:int)
          
          P[<m_1030@71:0>](<m_1030@71:0>:int),
          P[<<m_1030@74:1>@77:0>]((11 + <m_1030@71:0>):int,var41:int),
          P[<<m_1030@81:1>@112:0>](var41:int,<<m_1030@71:1>@116:0>:int), (
          <m_1030@71:0> <= 100) |- P[<<m_1030@71:1>@116:0>](<m_1030@71:0>:int,
                                                            <<m_1030@71:1>@116:0>:int)
          
          P[<m_1030@81:0>](<m_1030@81:0>:int),
          P[<<m_1030@84:1>@101:0>]((11 + <m_1030@81:0>):int,var42:int),
          P[<<m_1030@105:1>@108:0>](var42:int,<<m_1030@81:1>@112:0>:int), (
          <m_1030@81:0> <= 100) |- P[<<m_1030@81:1>@112:0>](<m_1030@81:0>:int,
                                                            <<m_1030@81:1>@112:0>:int)
          
          P[<m_1030@105:0>](<m_1030@105:0>:int),
          ((<m_1030@105:0> > 100) && ((10 + <<m_1030@105:1>@108:0>) = <m_1030@105:0>))
          |- P[<<m_1030@105:1>@108:0>](<m_1030@105:0>:int,<<m_1030@105:1>@108:0>:int)
          
          P[<m_1030@81:0>](<f_m_1175@103:0>:int),
          P[<<m_1030@84:1>@101:0>]((11 + <f_m_1175@103:0>):int,<m_1030@105:0>:int), (
          <f_m_1175@103:0> <= 100) |- P[<m_1030@105:0>](<m_1030@105:0>:int)
          
          P[<m_1030@84:0>](<m_1030@84:0>:int),
          P[<<m_1030@87:1>@90:0>]((11 + <m_1030@84:0>):int,var43:int),
          P[<<m_1030@94:1>@97:0>](var43:int,<<m_1030@84:1>@101:0>:int), (
          <m_1030@84:0> <= 100) |- P[<<m_1030@84:1>@101:0>](<m_1030@84:0>:int,
                                                            <<m_1030@84:1>@101:0>:int)
          
          P[<m_1030@94:0>](<m_1030@94:0>:int), ((<m_1030@94:0> > 100) && ((10 + <<m_1030@94:1>@97:0>) = <m_1030@94:0>))
          |- P[<<m_1030@94:1>@97:0>](<m_1030@94:0>:int,<<m_1030@94:1>@97:0>:int)
          
          P[<m_1030@84:0>](<f_m_1175@92:0>:int),
          P[<<m_1030@87:1>@90:0>]((11 + <f_m_1175@92:0>):int,<m_1030@94:0>:int), (
          <f_m_1175@92:0> <= 100) |- P[<m_1030@94:0>](<m_1030@94:0>:int)
          
          P[<m_1030@87:0>](<m_1030@87:0>:int), ((<m_1030@87:0> > 100) && ((10 + <<m_1030@87:1>@90:0>) = <m_1030@87:0>))
          |- P[<<m_1030@87:1>@90:0>](<m_1030@87:0>:int,<<m_1030@87:1>@90:0>:int)
          
          P[<m_1030@84:0>]((-11 + <m_1030@87:0>):int), (<m_1030@87:0> <= 111) |- P[<m_1030@87:0>](<m_1030@87:0>:int)
          
          P[<m_1030@81:0>]((-11 + <m_1030@84:0>):int), (<m_1030@84:0> <= 111) |- P[<m_1030@84:0>](<m_1030@84:0>:int)
          
          P[<m_1030@71:0>](<f_m_1175@79:0>:int),
          P[<<m_1030@74:1>@77:0>]((11 + <f_m_1175@79:0>):int,<m_1030@81:0>:int), (
          <f_m_1175@79:0> <= 100) |- P[<m_1030@81:0>](<m_1030@81:0>:int)
          
          P[<m_1030@74:0>](<m_1030@74:0>:int), ((<m_1030@74:0> > 100) && ((10 + <<m_1030@74:1>@77:0>) = <m_1030@74:0>))
          |- P[<<m_1030@74:1>@77:0>](<m_1030@74:0>:int,<<m_1030@74:1>@77:0>:int)
          
          P[<m_1030@71:0>]((-11 + <m_1030@74:0>):int), (<m_1030@74:0> <= 111) |- P[<m_1030@74:0>](<m_1030@74:0>:int)
          
          P[<m_1030@61:0>](<f_m_1175@69:0>:int),
          P[<<m_1030@64:1>@67:0>]((11 + <f_m_1175@69:0>):int,<m_1030@71:0>:int), (
          <f_m_1175@69:0> <= 100) |- P[<m_1030@71:0>](<m_1030@71:0>:int)
          
          P[<m_1030@64:0>](<m_1030@64:0>:int), ((<m_1030@64:0> > 100) && ((10 + <<m_1030@64:1>@67:0>) = <m_1030@64:0>))
          |- P[<<m_1030@64:1>@67:0>](<m_1030@64:0>:int,<<m_1030@64:1>@67:0>:int)
          
          P[<m_1030@61:0>]((-11 + <m_1030@64:0>):int), (<m_1030@64:0> <= 111) |- P[<m_1030@64:0>](<m_1030@64:0>:int)
          
           (<m_1030@61:0> <= 95) |- P[<m_1030@61:0>](<m_1030@61:0>:int)
        input to Yhorn:
          P[<fail_1179@125:0>](<fail_1179@125:0>:int)|- bot
          
          P[<<m_1030@61:1>@120:0>](<f_main_1176@122:0>:int,<f_main_1176@122:2>:int),
          ((<f_main_1176@122:0> <= 95) && ((<f_main_1176@122:2> <> 91) && (<fail_1179@125:0> = 1)))
          |- P[<fail_1179@125:0>](<fail_1179@125:0>:int)
          
          P[<m_1030@61:0>](<m_1030@61:0>:int),
          P[<<m_1030@64:1>@67:0>](var44:int,var40:int),
          P[<<m_1030@71:1>@116:0>](var40:int,<<m_1030@61:1>@120:0>:int),
          ((var44 = (11 + <m_1030@61:0>)) && (<m_1030@61:0> <= 100))
          |- P[<<m_1030@61:1>@120:0>](<m_1030@61:0>:int,<<m_1030@61:1>@120:0>:int)
          
          P[<m_1030@71:0>](<m_1030@71:0>:int),
          P[<<m_1030@74:1>@77:0>](var45:int,var41:int),
          P[<<m_1030@81:1>@112:0>](var41:int,<<m_1030@71:1>@116:0>:int),
          ((var45 = (11 + <m_1030@71:0>)) && (<m_1030@71:0> <= 100))
          |- P[<<m_1030@71:1>@116:0>](<m_1030@71:0>:int,<<m_1030@71:1>@116:0>:int)
          
          P[<m_1030@81:0>](<m_1030@81:0>:int),
          P[<<m_1030@84:1>@101:0>](var46:int,var42:int),
          P[<<m_1030@105:1>@108:0>](var42:int,<<m_1030@81:1>@112:0>:int),
          ((var46 = (11 + <m_1030@81:0>)) && (<m_1030@81:0> <= 100))
          |- P[<<m_1030@81:1>@112:0>](<m_1030@81:0>:int,<<m_1030@81:1>@112:0>:int)
          
          P[<m_1030@105:0>](<m_1030@105:0>:int),
          (((10 + <<m_1030@105:1>@108:0>) = <m_1030@105:0>) && (<m_1030@105:0> > 100))
          |- P[<<m_1030@105:1>@108:0>](<m_1030@105:0>:int,<<m_1030@105:1>@108:0>:int)
          
          P[<m_1030@81:0>](<f_m_1175@103:0>:int),
          P[<<m_1030@84:1>@101:0>](var47:int,<m_1030@105:0>:int),
          ((var47 = (11 + <f_m_1175@103:0>)) && (<f_m_1175@103:0> <= 100)) |- P[<m_1030@105:0>](
          <m_1030@105:0>:int)
          
          P[<m_1030@84:0>](<m_1030@84:0>:int),
          P[<<m_1030@87:1>@90:0>](var48:int,var43:int),
          P[<<m_1030@94:1>@97:0>](var43:int,<<m_1030@84:1>@101:0>:int),
          ((var48 = (11 + <m_1030@84:0>)) && (<m_1030@84:0> <= 100))
          |- P[<<m_1030@84:1>@101:0>](<m_1030@84:0>:int,<<m_1030@84:1>@101:0>:int)
          
          P[<m_1030@94:0>](<m_1030@94:0>:int), (((10 + <<m_1030@94:1>@97:0>) = <m_1030@94:0>) && (<m_1030@94:0> > 100))
          |- P[<<m_1030@94:1>@97:0>](<m_1030@94:0>:int,<<m_1030@94:1>@97:0>:int)
          
          P[<m_1030@84:0>](<f_m_1175@92:0>:int),
          P[<<m_1030@87:1>@90:0>](var49:int,<m_1030@94:0>:int),
          ((var49 = (11 + <f_m_1175@92:0>)) && (<f_m_1175@92:0> <= 100)) |- P[<m_1030@94:0>](
          <m_1030@94:0>:int)
          
          P[<m_1030@87:0>](<m_1030@87:0>:int), (((10 + <<m_1030@87:1>@90:0>) = <m_1030@87:0>) && (<m_1030@87:0> > 100))
          |- P[<<m_1030@87:1>@90:0>](<m_1030@87:0>:int,<<m_1030@87:1>@90:0>:int)
          
          P[<m_1030@84:0>](var50:int), (((11 + var50) = <m_1030@87:0>) && (<m_1030@87:0> <= 111))
          |- P[<m_1030@87:0>](<m_1030@87:0>:int)
          
          P[<m_1030@81:0>](var51:int), (((11 + var51) = <m_1030@84:0>) && (<m_1030@84:0> <= 111))
          |- P[<m_1030@84:0>](<m_1030@84:0>:int)
          
          P[<m_1030@71:0>](<f_m_1175@79:0>:int),
          P[<<m_1030@74:1>@77:0>](var52:int,<m_1030@81:0>:int),
          ((var52 = (11 + <f_m_1175@79:0>)) && (<f_m_1175@79:0> <= 100)) |- P[<m_1030@81:0>](
          <m_1030@81:0>:int)
          
          P[<m_1030@74:0>](<m_1030@74:0>:int), (((10 + <<m_1030@74:1>@77:0>) = <m_1030@74:0>) && (<m_1030@74:0> > 100))
          |- P[<<m_1030@74:1>@77:0>](<m_1030@74:0>:int,<<m_1030@74:1>@77:0>:int)
          
          P[<m_1030@71:0>](var53:int), (((11 + var53) = <m_1030@74:0>) && (<m_1030@74:0> <= 111))
          |- P[<m_1030@74:0>](<m_1030@74:0>:int)
          
          P[<m_1030@61:0>](<f_m_1175@69:0>:int),
          P[<<m_1030@64:1>@67:0>](var54:int,<m_1030@71:0>:int),
          ((var54 = (11 + <f_m_1175@69:0>)) && (<f_m_1175@69:0> <= 100)) |- P[<m_1030@71:0>](
          <m_1030@71:0>:int)
          
          P[<m_1030@64:0>](<m_1030@64:0>:int), (((10 + <<m_1030@64:1>@67:0>) = <m_1030@64:0>) && (<m_1030@64:0> > 100))
          |- P[<<m_1030@64:1>@67:0>](<m_1030@64:0>:int,<<m_1030@64:1>@67:0>:int)
          
          P[<m_1030@61:0>](var55:int), (((11 + var55) = <m_1030@64:0>) && (<m_1030@64:0> <= 111))
          |- P[<m_1030@64:0>](<m_1030@64:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1179_sep_125_sep_0($277)) -> 1=0.
(($277-1=0) & ($278-91<>0) & ($279-95<=0)) & (v_sep_m_1030_sep_61_sep_1_sep_120_sep_0($279,$278)) -> v_sep_fail_1179_sep_125_sep_0($277).
(($280-100<=0) & (-$280+$281-11=0)) & (v_sep_m_1030_sep_71_sep_1_sep_116_sep_0($282,$283)) & (v_sep_m_1030_sep_64_sep_1_sep_67_sep_0($281,$282)) & (v_sep_m_1030_sep_61_sep_0($280)) -> v_sep_m_1030_sep_61_sep_1_sep_120_sep_0($280,$283).
(($284-100<=0) & (-$284+$285-11=0)) & (v_sep_m_1030_sep_81_sep_1_sep_112_sep_0($286,$287)) & (v_sep_m_1030_sep_74_sep_1_sep_77_sep_0($285,$286)) & (v_sep_m_1030_sep_71_sep_0($284)) -> v_sep_m_1030_sep_71_sep_1_sep_116_sep_0($284,$287).
(($288-100<=0) & (-$288+$289-11=0)) & (v_sep_m_1030_sep_105_sep_1_sep_108_sep_0($290,$291)) & (v_sep_m_1030_sep_84_sep_1_sep_101_sep_0($289,$290)) & (v_sep_m_1030_sep_81_sep_0($288)) -> v_sep_m_1030_sep_81_sep_1_sep_112_sep_0($288,$291).
(($292-100>0) & (-$292+$293+10=0)) & (v_sep_m_1030_sep_105_sep_0($292)) -> v_sep_m_1030_sep_105_sep_1_sep_108_sep_0($292,$293).
(($294-100<=0) & (-$294+$295-11=0)) & (v_sep_m_1030_sep_84_sep_1_sep_101_sep_0($295,$292)) & (v_sep_m_1030_sep_81_sep_0($294)) -> v_sep_m_1030_sep_105_sep_0($292).
(($296-100<=0) & (-$296+$297-11=0)) & (v_sep_m_1030_sep_94_sep_1_sep_97_sep_0($298,$299)) & (v_sep_m_1030_sep_87_sep_1_sep_90_sep_0($297,$298)) & (v_sep_m_1030_sep_84_sep_0($296)) -> v_sep_m_1030_sep_84_sep_1_sep_101_sep_0($296,$299).
(($300-100>0) & (-$300+$301+10=0)) & (v_sep_m_1030_sep_94_sep_0($300)) -> v_sep_m_1030_sep_94_sep_1_sep_97_sep_0($300,$301).
(($302-100<=0) & (-$302+$303-11=0)) & (v_sep_m_1030_sep_87_sep_1_sep_90_sep_0($303,$300)) & (v_sep_m_1030_sep_84_sep_0($302)) -> v_sep_m_1030_sep_94_sep_0($300).
(($304-100>0) & (-$304+$305+10=0)) & (v_sep_m_1030_sep_87_sep_0($304)) -> v_sep_m_1030_sep_87_sep_1_sep_90_sep_0($304,$305).
(($304-111<=0) & (-$304+$306+11=0)) & (v_sep_m_1030_sep_84_sep_0($306)) -> v_sep_m_1030_sep_87_sep_0($304).
(($296-111<=0) & (-$296+$307+11=0)) & (v_sep_m_1030_sep_81_sep_0($307)) -> v_sep_m_1030_sep_84_sep_0($296).
(($308-100<=0) & (-$308+$309-11=0)) & (v_sep_m_1030_sep_74_sep_1_sep_77_sep_0($309,$288)) & (v_sep_m_1030_sep_71_sep_0($308)) -> v_sep_m_1030_sep_81_sep_0($288).
(($310-100>0) & (-$310+$311+10=0)) & (v_sep_m_1030_sep_74_sep_0($310)) -> v_sep_m_1030_sep_74_sep_1_sep_77_sep_0($310,$311).
(($310-111<=0) & (-$310+$312+11=0)) & (v_sep_m_1030_sep_71_sep_0($312)) -> v_sep_m_1030_sep_74_sep_0($310).
(($313-100<=0) & (-$313+$314-11=0)) & (v_sep_m_1030_sep_64_sep_1_sep_67_sep_0($314,$284)) & (v_sep_m_1030_sep_61_sep_0($313)) -> v_sep_m_1030_sep_71_sep_0($284).
(($315-100>0) & (-$315+$316+10=0)) & (v_sep_m_1030_sep_64_sep_0($315)) -> v_sep_m_1030_sep_64_sep_1_sep_67_sep_0($315,$316).
(($315-111<=0) & (-$315+$317+11=0)) & (v_sep_m_1030_sep_61_sep_0($317)) -> v_sep_m_1030_sep_64_sep_0($315).
$280-95<=0 -> v_sep_m_1030_sep_61_sep_0($280).


v_sep_fail_1179_sep_125_sep_0: X
v_sep_m_1030_sep_105_sep_0: X
v_sep_m_1030_sep_105_sep_1_sep_108_sep_0: X
v_sep_m_1030_sep_61_sep_0: X
v_sep_m_1030_sep_61_sep_1_sep_120_sep_0: X
v_sep_m_1030_sep_64_sep_0: X
v_sep_m_1030_sep_64_sep_1_sep_67_sep_0: X
v_sep_m_1030_sep_71_sep_0: X
v_sep_m_1030_sep_71_sep_1_sep_116_sep_0: X
v_sep_m_1030_sep_74_sep_0: X
v_sep_m_1030_sep_74_sep_1_sep_77_sep_0: X
v_sep_m_1030_sep_81_sep_0: X
v_sep_m_1030_sep_81_sep_1_sep_112_sep_0: X
v_sep_m_1030_sep_84_sep_0: X
v_sep_m_1030_sep_84_sep_1_sep_101_sep_0: X
v_sep_m_1030_sep_87_sep_0: X
v_sep_m_1030_sep_87_sep_1_sep_90_sep_0: X
v_sep_m_1030_sep_94_sep_0: X
v_sep_m_1030_sep_94_sep_1_sep_97_sep_0: X
.................................
v_sep_fail_1179_sep_125_sep_0: X
v_sep_m_1030_sep_105_sep_0: X
v_sep_m_1030_sep_105_sep_1_sep_108_sep_0: X
v_sep_m_1030_sep_61_sep_0: X
v_sep_m_1030_sep_61_sep_1_sep_120_sep_0: X
v_sep_m_1030_sep_64_sep_0: X
v_sep_m_1030_sep_64_sep_1_sep_67_sep_0: X
v_sep_m_1030_sep_71_sep_0: X
v_sep_m_1030_sep_71_sep_1_sep_116_sep_0: X
v_sep_m_1030_sep_74_sep_0: X
v_sep_m_1030_sep_74_sep_1_sep_77_sep_0: X
v_sep_m_1030_sep_81_sep_0: X
v_sep_m_1030_sep_81_sep_1_sep_112_sep_0: X
v_sep_m_1030_sep_84_sep_0: X
v_sep_m_1030_sep_84_sep_1_sep_101_sep_0: X
v_sep_m_1030_sep_87_sep_0: X
v_sep_m_1030_sep_87_sep_1_sep_90_sep_0: X
v_sep_m_1030_sep_94_sep_0: X
v_sep_m_1030_sep_94_sep_1_sep_97_sep_0: X
....
v_sep_fail_1179_sep_125_sep_0: X
v_sep_m_1030_sep_105_sep_0: X
v_sep_m_1030_sep_105_sep_1_sep_108_sep_0: X
v_sep_m_1030_sep_61_sep_0: X
v_sep_m_1030_sep_61_sep_1_sep_120_sep_0: X
v_sep_m_1030_sep_64_sep_0: X
v_sep_m_1030_sep_64_sep_1_sep_67_sep_0: X
v_sep_m_1030_sep_71_sep_0: X
v_sep_m_1030_sep_71_sep_1_sep_116_sep_0: X
v_sep_m_1030_sep_74_sep_0: X
v_sep_m_1030_sep_74_sep_1_sep_77_sep_0: X
v_sep_m_1030_sep_81_sep_0: X
v_sep_m_1030_sep_81_sep_1_sep_112_sep_0: X
v_sep_m_1030_sep_84_sep_0: X
v_sep_m_1030_sep_84_sep_1_sep_101_sep_0: X
v_sep_m_1030_sep_87_sep_0: X
v_sep_m_1030_sep_87_sep_1_sep_90_sep_0: X
v_sep_m_1030_sep_94_sep_0: X
v_sep_m_1030_sep_94_sep_1_sep_97_sep_0: X
.......
v_sep_fail_1179_sep_125_sep_0: X
v_sep_m_1030_sep_105_sep_0: X
v_sep_m_1030_sep_105_sep_1_sep_108_sep_0: X
v_sep_m_1030_sep_61_sep_0: X
v_sep_m_1030_sep_61_sep_1_sep_120_sep_0: X
v_sep_m_1030_sep_64_sep_0: X
v_sep_m_1030_sep_64_sep_1_sep_67_sep_0: X
v_sep_m_1030_sep_71_sep_0: X
v_sep_m_1030_sep_71_sep_1_sep_116_sep_0: X
v_sep_m_1030_sep_74_sep_0: X
v_sep_m_1030_sep_74_sep_1_sep_77_sep_0: X
v_sep_m_1030_sep_81_sep_0: X
v_sep_m_1030_sep_81_sep_1_sep_112_sep_0: X
v_sep_m_1030_sep_84_sep_0: X
v_sep_m_1030_sep_84_sep_1_sep_101_sep_0: X
v_sep_m_1030_sep_87_sep_0: X
v_sep_m_1030_sep_87_sep_1_sep_90_sep_0: X
v_sep_m_1030_sep_94_sep_0: X
v_sep_m_1030_sep_94_sep_1_sep_97_sep_0: X
...........
v_sep_fail_1179_sep_125_sep_0: X
v_sep_m_1030_sep_105_sep_0: X
v_sep_m_1030_sep_105_sep_1_sep_108_sep_0: X
v_sep_m_1030_sep_61_sep_0: X
v_sep_m_1030_sep_61_sep_1_sep_120_sep_0: X
v_sep_m_1030_sep_64_sep_0: X
v_sep_m_1030_sep_64_sep_1_sep_67_sep_0: X
v_sep_m_1030_sep_71_sep_0: X
v_sep_m_1030_sep_71_sep_1_sep_116_sep_0: X
v_sep_m_1030_sep_74_sep_0: X
v_sep_m_1030_sep_74_sep_1_sep_77_sep_0: X
v_sep_m_1030_sep_81_sep_0: X
v_sep_m_1030_sep_81_sep_1_sep_112_sep_0: X
v_sep_m_1030_sep_84_sep_0: X
v_sep_m_1030_sep_84_sep_1_sep_101_sep_0: X
v_sep_m_1030_sep_87_sep_0: X
v_sep_m_1030_sep_87_sep_1_sep_90_sep_0: X
v_sep_m_1030_sep_94_sep_0: X
v_sep_m_1030_sep_94_sep_1_sep_97_sep_0: X
..................
v_sep_fail_1179_sep_125_sep_0: X
v_sep_m_1030_sep_105_sep_0: X
v_sep_m_1030_sep_105_sep_1_sep_108_sep_0: X
v_sep_m_1030_sep_61_sep_0: X
v_sep_m_1030_sep_61_sep_1_sep_120_sep_0: X
v_sep_m_1030_sep_64_sep_0: X
v_sep_m_1030_sep_64_sep_1_sep_67_sep_0: X
v_sep_m_1030_sep_71_sep_0: X
v_sep_m_1030_sep_71_sep_1_sep_116_sep_0: X
v_sep_m_1030_sep_74_sep_0: X
v_sep_m_1030_sep_74_sep_1_sep_77_sep_0: X
v_sep_m_1030_sep_81_sep_0: X
v_sep_m_1030_sep_81_sep_1_sep_112_sep_0: X
v_sep_m_1030_sep_84_sep_0: X
v_sep_m_1030_sep_84_sep_1_sep_101_sep_0: X
v_sep_m_1030_sep_87_sep_0: X
v_sep_m_1030_sep_87_sep_1_sep_90_sep_0: X
v_sep_m_1030_sep_94_sep_0: X
v_sep_m_1030_sep_94_sep_1_sep_97_sep_0: X
.........................
v_sep_fail_1179_sep_125_sep_0: X
v_sep_m_1030_sep_105_sep_0: X
v_sep_m_1030_sep_105_sep_1_sep_108_sep_0: X
v_sep_m_1030_sep_61_sep_0: X
v_sep_m_1030_sep_61_sep_1_sep_120_sep_0: X
v_sep_m_1030_sep_64_sep_0: X
v_sep_m_1030_sep_64_sep_1_sep_67_sep_0: X
v_sep_m_1030_sep_71_sep_0: X
v_sep_m_1030_sep_71_sep_1_sep_116_sep_0: X
v_sep_m_1030_sep_74_sep_0: X
v_sep_m_1030_sep_74_sep_1_sep_77_sep_0: X
v_sep_m_1030_sep_81_sep_0: X
v_sep_m_1030_sep_81_sep_1_sep_112_sep_0: X
v_sep_m_1030_sep_84_sep_0: X
v_sep_m_1030_sep_84_sep_1_sep_101_sep_0: X
v_sep_m_1030_sep_87_sep_0: X
v_sep_m_1030_sep_87_sep_1_sep_90_sep_0: X
v_sep_m_1030_sep_94_sep_0: X
v_sep_m_1030_sep_94_sep_1_sep_97_sep_0: X
..............................
v_sep_fail_1179_sep_125_sep_0: X
v_sep_m_1030_sep_105_sep_0: X
v_sep_m_1030_sep_105_sep_1_sep_108_sep_0: X
v_sep_m_1030_sep_61_sep_0: X
v_sep_m_1030_sep_61_sep_1_sep_120_sep_0: X
v_sep_m_1030_sep_64_sep_0: X
v_sep_m_1030_sep_64_sep_1_sep_67_sep_0: X
v_sep_m_1030_sep_71_sep_0: X
v_sep_m_1030_sep_71_sep_1_sep_116_sep_0: X
v_sep_m_1030_sep_74_sep_0: X
v_sep_m_1030_sep_74_sep_1_sep_77_sep_0: X
v_sep_m_1030_sep_81_sep_0: X
v_sep_m_1030_sep_81_sep_1_sep_112_sep_0: X
v_sep_m_1030_sep_84_sep_0: X
v_sep_m_1030_sep_84_sep_1_sep_101_sep_0: X
v_sep_m_1030_sep_87_sep_0: X
v_sep_m_1030_sep_87_sep_1_sep_90_sep_0: X
v_sep_m_1030_sep_94_sep_0: X
v_sep_m_1030_sep_94_sep_1_sep_97_sep_0: X
.................................(0=0) & (v_sep_fail_1179_sep_125_sep_0($277)) -> 1=0.
(($277-1=0) & ($278-91<>0) & ($279-95<=0)) & (v_sep_m_1030_sep_61_sep_1_sep_120_sep_0($279,$278)) -> v_sep_fail_1179_sep_125_sep_0($277).
(($280-100<=0) & (-$280+$281-11=0)) & (v_sep_m_1030_sep_71_sep_1_sep_116_sep_0($282,$283)) & (v_sep_m_1030_sep_64_sep_1_sep_67_sep_0($281,$282)) & (v_sep_m_1030_sep_61_sep_0($280)) -> v_sep_m_1030_sep_61_sep_1_sep_120_sep_0($280,$283).
(($284-100<=0) & (-$284+$285-11=0)) & (v_sep_m_1030_sep_81_sep_1_sep_112_sep_0($286,$287)) & (v_sep_m_1030_sep_74_sep_1_sep_77_sep_0($285,$286)) & (v_sep_m_1030_sep_71_sep_0($284)) -> v_sep_m_1030_sep_71_sep_1_sep_116_sep_0($284,$287).
(($288-100<=0) & (-$288+$289-11=0)) & (v_sep_m_1030_sep_105_sep_1_sep_108_sep_0($290,$291)) & (v_sep_m_1030_sep_84_sep_1_sep_101_sep_0($289,$290)) & (v_sep_m_1030_sep_81_sep_0($288)) -> v_sep_m_1030_sep_81_sep_1_sep_112_sep_0($288,$291).
(($292-100>0) & (-$292+$293+10=0)) & (v_sep_m_1030_sep_105_sep_0($292)) -> v_sep_m_1030_sep_105_sep_1_sep_108_sep_0($292,$293).
(($294-100<=0) & (-$294+$295-11=0)) & (v_sep_m_1030_sep_84_sep_1_sep_101_sep_0($295,$292)) & (v_sep_m_1030_sep_81_sep_0($294)) -> v_sep_m_1030_sep_105_sep_0($292).
(($296-100<=0) & (-$296+$297-11=0)) & (v_sep_m_1030_sep_94_sep_1_sep_97_sep_0($298,$299)) & (v_sep_m_1030_sep_87_sep_1_sep_90_sep_0($297,$298)) & (v_sep_m_1030_sep_84_sep_0($296)) -> v_sep_m_1030_sep_84_sep_1_sep_101_sep_0($296,$299).
(($300-100>0) & (-$300+$301+10=0)) & (v_sep_m_1030_sep_94_sep_0($300)) -> v_sep_m_1030_sep_94_sep_1_sep_97_sep_0($300,$301).
(($302-100<=0) & (-$302+$303-11=0)) & (v_sep_m_1030_sep_87_sep_1_sep_90_sep_0($303,$300)) & (v_sep_m_1030_sep_84_sep_0($302)) -> v_sep_m_1030_sep_94_sep_0($300).
(($304-100>0) & (-$304+$305+10=0)) & (v_sep_m_1030_sep_87_sep_0($304)) -> v_sep_m_1030_sep_87_sep_1_sep_90_sep_0($304,$305).
(($304-111<=0) & (-$304+$306+11=0)) & (v_sep_m_1030_sep_84_sep_0($306)) -> v_sep_m_1030_sep_87_sep_0($304).
(($296-111<=0) & (-$296+$307+11=0)) & (v_sep_m_1030_sep_81_sep_0($307)) -> v_sep_m_1030_sep_84_sep_0($296).
(($308-100<=0) & (-$308+$309-11=0)) & (v_sep_m_1030_sep_74_sep_1_sep_77_sep_0($309,$288)) & (v_sep_m_1030_sep_71_sep_0($308)) -> v_sep_m_1030_sep_81_sep_0($288).
(($310-100>0) & (-$310+$311+10=0)) & (v_sep_m_1030_sep_74_sep_0($310)) -> v_sep_m_1030_sep_74_sep_1_sep_77_sep_0($310,$311).
(($310-111<=0) & (-$310+$312+11=0)) & (v_sep_m_1030_sep_71_sep_0($312)) -> v_sep_m_1030_sep_74_sep_0($310).
(($313-100<=0) & (-$313+$314-11=0)) & (v_sep_m_1030_sep_64_sep_1_sep_67_sep_0($314,$284)) & (v_sep_m_1030_sep_61_sep_0($313)) -> v_sep_m_1030_sep_71_sep_0($284).
(($315-100>0) & (-$315+$316+10=0)) & (v_sep_m_1030_sep_64_sep_0($315)) -> v_sep_m_1030_sep_64_sep_1_sep_67_sep_0($315,$316).
(($315-111<=0) & (-$315+$317+11=0)) & (v_sep_m_1030_sep_61_sep_0($317)) -> v_sep_m_1030_sep_64_sep_0($315).
$280-95<=0 -> v_sep_m_1030_sep_61_sep_0($280).

           (<m_1030@61:0> <= 95) |- P[<m_1030@61:0>](<m_1030@61:0>:int)
        solution:
          P[<fail_1179@125:0>]($318:bool) = false
          P[<m_1030@105:0>]($365:int) = ($365 <= 91)
          P[<<m_1030@105:1>@108:0>]($352:int,$354:int) = (111 <= $352)
          P[<m_1030@61:0>]($336:int) = true
          P[<<m_1030@61:1>@120:0>]($321:int,$323:int) = false
          P[<m_1030@64:0>]($390:int) = true
          P[<<m_1030@64:1>@67:0>]($331:int,$333:int) = true
          P[<m_1030@71:0>]($349:int) = true
          P[<<m_1030@71:1>@116:0>]($326:int,$328:int) = false
          P[<m_1030@74:0>]($387:int) = true
          P[<<m_1030@74:1>@77:0>]($344:int,$346:int) = true
          P[<m_1030@81:0>]($362:int) = true
          P[<<m_1030@81:1>@112:0>]($339:int,$341:int) = false
          P[<m_1030@84:0>]($378:int) = true
          P[<<m_1030@84:1>@101:0>]($357:int,$359:int) = ($359 <= 91)
          P[<m_1030@87:0>]($384:int) = ($384 <= 111)
          P[<<m_1030@87:1>@90:0>]($373:int,$375:int) = ($375 <= 101)
          P[<m_1030@94:0>]($381:int) = ($381 <= 101)
          P[<<m_1030@94:1>@97:0>]($368:int,$370:int) = ((2 * $370) <= (81 + $368))
        
      end HcSolver.solve_ub(16378)[4] (0.199969 sec.)
      begin HcSolver.check_validity(17501)[4]
        input:
          P[<fail_1179@125:0>](<fail_1179@125:0>:bool)|- bot
          
          P[<<m_1030@61:1>@120:0>](<f_main_1176@122:0>:int,<f_main_1176@122:2>:int),
          ((<f_main_1176@122:2> <> 91) && ((<f_main_1176@122:0> <= 95) && <fail_1179@125:0>))
          |- P[<fail_1179@125:0>](<fail_1179@125:0>:bool)
          
          P[<m_1030@61:0>](<m_1030@61:0>:int),
          P[<<m_1030@64:1>@67:0>]((11 + <m_1030@61:0>):int,var40:int),
          P[<<m_1030@71:1>@116:0>](var40:int,<<m_1030@61:1>@120:0>:int), (
          <m_1030@61:0> <= 100) |- P[<<m_1030@61:1>@120:0>](<m_1030@61:0>:int,
                                                            <<m_1030@61:1>@120:0>:int)
          
          P[<m_1030@71:0>](<m_1030@71:0>:int),
          P[<<m_1030@74:1>@77:0>]((11 + <m_1030@71:0>):int,var41:int),
          P[<<m_1030@81:1>@112:0>](var41:int,<<m_1030@71:1>@116:0>:int), (
          <m_1030@71:0> <= 100) |- P[<<m_1030@71:1>@116:0>](<m_1030@71:0>:int,
                                                            <<m_1030@71:1>@116:0>:int)
          
          P[<m_1030@81:0>](<m_1030@81:0>:int),
          P[<<m_1030@84:1>@101:0>]((11 + <m_1030@81:0>):int,var42:int),
          P[<<m_1030@105:1>@108:0>](var42:int,<<m_1030@81:1>@112:0>:int), (
          <m_1030@81:0> <= 100) |- P[<<m_1030@81:1>@112:0>](<m_1030@81:0>:int,
                                                            <<m_1030@81:1>@112:0>:int)
          
          P[<m_1030@105:0>](<m_1030@105:0>:int),
          ((<m_1030@105:0> > 100) && ((10 + <<m_1030@105:1>@108:0>) = <m_1030@105:0>))
          |- P[<<m_1030@105:1>@108:0>](<m_1030@105:0>:int,<<m_1030@105:1>@108:0>:int)
          
          P[<m_1030@81:0>](<f_m_1175@103:0>:int),
          P[<<m_1030@84:1>@101:0>]((11 + <f_m_1175@103:0>):int,<m_1030@105:0>:int), (
          <f_m_1175@103:0> <= 100) |- P[<m_1030@105:0>](<m_1030@105:0>:int)
          
          P[<m_1030@84:0>](<m_1030@84:0>:int),
          P[<<m_1030@87:1>@90:0>]((11 + <m_1030@84:0>):int,var43:int),
          P[<<m_1030@94:1>@97:0>](var43:int,<<m_1030@84:1>@101:0>:int), (
          <m_1030@84:0> <= 100) |- P[<<m_1030@84:1>@101:0>](<m_1030@84:0>:int,
                                                            <<m_1030@84:1>@101:0>:int)
          
          P[<m_1030@94:0>](<m_1030@94:0>:int), ((<m_1030@94:0> > 100) && ((10 + <<m_1030@94:1>@97:0>) = <m_1030@94:0>))
          |- P[<<m_1030@94:1>@97:0>](<m_1030@94:0>:int,<<m_1030@94:1>@97:0>:int)
          
          P[<m_1030@84:0>](<f_m_1175@92:0>:int),
          P[<<m_1030@87:1>@90:0>]((11 + <f_m_1175@92:0>):int,<m_1030@94:0>:int), (
          <f_m_1175@92:0> <= 100) |- P[<m_1030@94:0>](<m_1030@94:0>:int)
          
          P[<m_1030@87:0>](<m_1030@87:0>:int), ((<m_1030@87:0> > 100) && ((10 + <<m_1030@87:1>@90:0>) = <m_1030@87:0>))
          |- P[<<m_1030@87:1>@90:0>](<m_1030@87:0>:int,<<m_1030@87:1>@90:0>:int)
          
          P[<m_1030@84:0>]((-11 + <m_1030@87:0>):int), (<m_1030@87:0> <= 111) |- P[<m_1030@87:0>](<m_1030@87:0>:int)
          
          P[<m_1030@81:0>]((-11 + <m_1030@84:0>):int), (<m_1030@84:0> <= 111) |- P[<m_1030@84:0>](<m_1030@84:0>:int)
          
          P[<m_1030@71:0>](<f_m_1175@79:0>:int),
          P[<<m_1030@74:1>@77:0>]((11 + <f_m_1175@79:0>):int,<m_1030@81:0>:int), (
          <f_m_1175@79:0> <= 100) |- P[<m_1030@81:0>](<m_1030@81:0>:int)
          
          P[<m_1030@74:0>](<m_1030@74:0>:int), ((<m_1030@74:0> > 100) && ((10 + <<m_1030@74:1>@77:0>) = <m_1030@74:0>))
          |- P[<<m_1030@74:1>@77:0>](<m_1030@74:0>:int,<<m_1030@74:1>@77:0>:int)
          
          P[<m_1030@71:0>]((-11 + <m_1030@74:0>):int), (<m_1030@74:0> <= 111) |- P[<m_1030@74:0>](<m_1030@74:0>:int)
          
          P[<m_1030@61:0>](<f_m_1175@69:0>:int),
          P[<<m_1030@64:1>@67:0>]((11 + <f_m_1175@69:0>):int,<m_1030@71:0>:int), (
          <f_m_1175@69:0> <= 100) |- P[<m_1030@71:0>](<m_1030@71:0>:int)
          
          P[<m_1030@64:0>](<m_1030@64:0>:int), ((<m_1030@64:0> > 100) && ((10 + <<m_1030@64:1>@67:0>) = <m_1030@64:0>))
          |- P[<<m_1030@64:1>@67:0>](<m_1030@64:0>:int,<<m_1030@64:1>@67:0>:int)
          
          P[<m_1030@61:0>]((-11 + <m_1030@64:0>):int), (<m_1030@64:0> <= 111) |- P[<m_1030@64:0>](<m_1030@64:0>:int)
          
           (<m_1030@61:0> <= 95) |- P[<m_1030@61:0>](<m_1030@61:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(17501)[4] (0.008999 sec.)
      solution:
        P[<fail_1179@125:0>]($318:bool) = false
        P[<m_1030@105:0>]($365:int) = ($365 <= 91)
        P[<<m_1030@105:1>@108:0>]($352:int,$354:int) = (111 <= $352)
        P[<m_1030@61:0>]($336:int) = true
        P[<<m_1030@61:1>@120:0>]($321:int,$323:int) = false
        P[<m_1030@64:0>]($390:int) = true
        P[<<m_1030@64:1>@67:0>]($331:int,$333:int) = true
        P[<m_1030@71:0>]($349:int) = true
        P[<<m_1030@71:1>@116:0>]($326:int,$328:int) = false
        P[<m_1030@74:0>]($387:int) = true
        P[<<m_1030@74:1>@77:0>]($344:int,$346:int) = true
        P[<m_1030@81:0>]($362:int) = true
        P[<<m_1030@81:1>@112:0>]($339:int,$341:int) = false
        P[<m_1030@84:0>]($378:int) = true
        P[<<m_1030@84:1>@101:0>]($357:int,$359:int) = ($359 <= 91)
        P[<m_1030@87:0>]($384:int) = ($384 <= 111)
        P[<<m_1030@87:1>@90:0>]($373:int,$375:int) = ($375 <= 101)
        P[<m_1030@94:0>]($381:int) = ($381 <= 101)
        P[<<m_1030@94:1>@97:0>]($368:int,$370:int) = ((2 * $370) <= (81 + $368))
    end YhornInterface.solve(16377)[3] (0.209968 sec.)
    
  end RefTypeInfer.infer_etrs(10060)[2] (1.533766 sec.)
  refinement types:
    main_1174: X
    f_1177: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    m_1030: v1:int -> (v2:{v2:int | false} -> X) -> X
    m_1030: v1:int -> (v2:int -> X) -> X
    f_m_1175: v1:int -> (v2:int -> X) -> v4:int -> X
    m_1030: v1:int -> (v2:{v2:int | false} -> X) -> X
    m_1030: v1:int -> (v2:int -> X) -> X
    f_m_1175: v1:int -> (v2:int -> X) -> v4:int -> X
    m_1030: v1:int -> (v2:{v2:int | false} -> X) -> X
    m_1030: v1:int -> (v2:{v2:int | (v2 <= 91)} -> X) -> X
    m_1030: v1:{v1:int | (v1 <= 111)} -> (v2:{v2:int | (v2 <= 101)} -> X) -> X
    f_m_1175: v1:int -> (v2:int -> X) -> v4:int -> X
    m_1030: v1:{v1:int | (v1 <= 101)} -> (v2:{v2:int | ((2 * v2) <= (81 + v1))} -> X) -> X
    f_m_1175: v1:int -> (v2:int -> X) -> v4:int -> X
    m_1030: v1:{v1:int | (v1 <= 91)} -> (v2:{v2:int | (111 <= v1)} -> X) -> X
    f_main_1176: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1179: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1178: var64:int -> var63:unit -> X
  abstraction types:
    main_1174: X
    f_1177: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    m_1030: var93:int[var93 -> (var93 <= 111),
                      var93 -> (var93 <= 101),
                      var93 -> (var93 <= 91)] ->
            (var94:int[var94 -> (var94 <= 91),
                       var94 -> (var94 <= 101),
                       var94 -> ((2 * var94) <= (81 + var93)),
                       var94 -> (111 <= var93)] -> X) -> X
    f_m_1175: var107:int -> (var108:int -> X) -> var110:int -> X
    f_main_1176: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1179: v1:bool -> (v2:unit -> X) -> X
    f_1178: var64:int -> var63:unit -> X
  
end AbsTypeInfer.refine(10059)[1] (1.545764 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 1; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1174
  main_1174 -> (rand_int f_1177)
  f_1177 x_1149 -> (main_1032 x_1149 (f_1178 x_1149))
  f_1178 x_1149 x_1146 -> end
  f_m_1175 x_1031 k_m_1076 x_1096 -> (m_1030 x_1096 k_m_1076)
  f_main_1176 n_1033 k_main_1114 x_1117 when (x_1117 = 91) -> (k_main_1114 ())
  f_main_1176 n_1033 k_main_1114 x_1117 when (not (x_1117 = 91)) -> (fail_1179 true k_main_1114)
  fail_1179 b k -> {fail} => (k ())
  m_1030 x_1031 k_m_1076 when (x_1031 > 100) -> (k_m_1076 (x_1031 - 10))
  m_1030 x_1031 k_m_1076 when (not (x_1031 > 100)) -> (m_1030 (x_1031 + 11) (f_m_1175 x_1031 k_m_1076))
  main_1032 n_1033 k_main_1114 when (n_1033 <= 95) -> (m_1030 n_1033 (f_main_1176 n_1033 k_main_1114))
  main_1032 n_1033 k_main_1114 when (not (n_1033 <= 95)) -> (k_main_1114 ())
Types:
  main_1174 : X
  fail_1179 : (x_1:bool[x_1] -> (unit -> X) -> X)
  m_1030 : (x_1:int[x_1 <= 91; x_1 <= 101; x_1 <= 111; x_1 <= 96; x_1 <= 106; x_1 <= 95] ->
            (x_3:int[x_1 >= 111; x_1 >= 2*x_3 - 81; x_3 <= 101; x_3 <= 91; x_1 >= 106; x_1 >= 2*x_3 - 86] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... Restart TRecS (param: 4000 -> 8000)
