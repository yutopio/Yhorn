MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn harmonic.ml

parsed::
 let rec div_1030 x_1031 y_1032 =
   let u_1049 = if y_1032 <> 0 then
                  ()
                else
                  {fail} () 
   in
     if x_1031 < y_1032 then
       0
     else
       1 + div_1030 (x_1031 - y_1032) y_1032 
 in
 let rec fold_left_1033 f_1034 acc_1035 xs_1036 =
   (match xs_1036 with
      | [] -> acc_1035
      | x_1037::xs'_1038 -> fold_left_1033 f_1034 (f_1034 acc_1035 x_1037) xs'_1038) 
 in
 let rec range_1039 i_1040 j_1041 =
   if i_1040 > j_1041 then
     []
   else
     let is_1042 = range_1039 (i_1040 + 1) j_1041 
     in
       i_1040::is_1042 
 in
 let harmonic_1043 n_1044 =
   let ds_1045 = range_1039 1 n_1044 
   in
     fold_left_1033 (fun s_1046 -> fun k_1047 -> s_1046 + div_1030 10000 k_1047) 0 ds_1045 
 in
   ()

set_target::
 let rec div_1030 x_1031 y_1032 =
   let u_1049 = if y_1032 <> 0 then
                  ()
                else
                  {fail} () 
   in
     if x_1031 < y_1032 then
       0
     else
       1 + div_1030 (x_1031 - y_1032) y_1032 
 in
 let rec fold_left_1033 f_1034 acc_1035 xs_1036 =
   (match xs_1036 with
      | [] -> acc_1035
      | x_1037::xs'_1038 -> fold_left_1033 f_1034 (f_1034 acc_1035 x_1037) xs'_1038) 
 in
 let rec range_1039 i_1040 j_1041 =
   if i_1040 > j_1041 then
     []
   else
     let is_1042 = range_1039 (i_1040 + 1) j_1041 
     in
       i_1040::is_1042 
 in
 let harmonic_1043 n_1044 =
   let ds_1045 = range_1039 1 n_1044 
   in
     fold_left_1033 (fun s_1046 -> fun k_1047 -> s_1046 + div_1030 10000 k_1047) 0 ds_1045 
 in
 let main_1115 = let arg1_1114 = rand_int () 
                 in
                   harmonic_1043 arg1_1114 
 in
   ()

abst_list::
 let rec div_1030 (x_1031:int) (y_1032:int) =
   let u_1049 = if y_1032 <> 0 then
                  ()
                else
                  {fail} () 
   in
     if x_1031 < y_1032 then
       0
     else
       1 + div_1030 (x_1031 - y_1032) y_1032 
 in
 let rec fold_left_1033 (f_1034:(int -> (int -> int))) (acc_1035:int) (xs_1036:(
   int * (int -> int))) =
   if fst xs_1036 = 0 then
     acc_1035
   else
     if 1 <= fst xs_1036 then
       let xs'_1038 = (fst xs_1036 - 1, fun x_1120 -> (snd xs_1036) (x_1120 + 1)) 
       in
       let x_1037 = (snd xs_1036) 0 
       in
         fold_left_1033 f_1034 (f_1034 acc_1035 x_1037) xs'_1038
     else
       _|_ 
 in
 let rec range_1039 (i_1040:int) (j_1041:int) =
   if i_1040 > j_1041 then
     (0, fun x_1161 -> _|_)
   else
     let is_1042 = range_1039 (i_1040 + 1) j_1041 
     in
     let cons_range_1157 (x_1155:int) (xs_1156:(int * (int -> int))) =
       (fst xs_1156 + 1, fun i_1154 -> (if i_1154 = 0 then
                                          x_1155
                                        else
                                          (snd xs_1156) (i_1154 - 1))) 
     in
       cons_range_1157 i_1040 is_1042 
 in
 let harmonic_1043 (n_1044:int) =
   let ds_1045 = range_1039 1 n_1044 
   in
     fold_left_1033 (fun s_1046 -> fun k_1047 -> s_1046 + div_1030 10000 k_1047) 0 ds_1045 
 in
 let main_1115 = let arg1_1114 = rand_int () 
                 in
                   harmonic_1043 arg1_1114 
 in
   ()

CPS::
 let rec div_1030 (x_1031:int) (y_1032:int) (k_div_1208:(int -> X)) =
   let k_div_u_1221 (x_1211:unit) =
     if x_1031 < y_1032 then
       k_div_1208 0
     else
       div_1030 (x_1031 - y_1032) y_1032 (fun x_1226 -> k_div_1208 (1 + x_1226)) 
   in
     if y_1032 <> 0 then
       k_div_u_1221 ()
     else
       {|fail|} () k_div_u_1221 
 in
 let rec fold_left_1033
   (f_1034:(int -> (int -> ((int -> X) -> X)))) (acc_1035:int) (xs_1036:(
   int * (int -> ((int -> X) -> X)))) (k_fold_left_1289:(int -> X)) =
   if fst xs_1036 = 0 then
     k_fold_left_1289 acc_1035
   else
     if 1 <= fst xs_1036 then
       (snd xs_1036) 0
         (fun x_1336 ->
            f_1034 acc_1035 x_1336
              (fun x_1390 ->
                 fold_left_1033 f_1034 x_1390
                   (fst xs_1036 - 1,
                   fun x_1120 -> fun k_fold_left_xs'_1322 -> (snd xs_1036) (x_1120 + 1) k_fold_left_xs'_1322)
                   k_fold_left_1289))
     else
       _|_ 
 in
 let rec range_1039 (i_1040:int) (j_1041:int) (k_range_1445:((int * (int -> ((int -> X) -> X))) -> X)) =
   if i_1040 > j_1041 then
     k_range_1445 (0, fun x_1161 -> fun k_range_1457 -> _|_)
   else
     range_1039 (i_1040 + 1) j_1041
       (fun x_1469 ->
          (let cons_range_1157
             (x_1155:int) (xs_1156:(int * (int -> ((int -> X) -> X)))) (k_range_cons_range_1539:(
             (int * (int -> ((int -> X) -> X))) -> X)) =
             k_range_cons_range_1539
               (fst xs_1156 + 1,
               fun i_1154 ->
                 fun k_range_cons_range_1554 ->
                   (if i_1154 = 0 then
                      k_range_cons_range_1554 x_1155
                    else
                      (snd xs_1156) (i_1154 - 1) k_range_cons_range_1554)) 
           in
             cons_range_1157 i_1040 x_1469 k_range_1445)) 
 in
 let harmonic_1043 (n_1044:int) (k_harmonic_1622:(int -> X)) =
   range_1039 1 n_1044
     (fun x_1628 ->
        fold_left_1033
          (fun s_1046 ->
             fun k_1047 ->
               fun k_harmonic_1668 -> div_1030 10000 k_1047 (fun x_1672 -> k_harmonic_1668 (s_1046 + x_1672))) 0 x_1628
          k_harmonic_1622) 
 in
   rand_int_cps () (fun x_1705 -> harmonic_1043 x_1705 (fun x_1702 -> end))

remove_pair::
 let rec div_1030 (x_1031:int) (y_1032:int) (k_div_1208:(int -> X)) =
   let k_div_u_1221 (x_1211:unit) =
     if x_1031 < y_1032 then
       k_div_1208 0
     else
       div_1030 (x_1031 - y_1032) y_1032 (fun x_1226 -> k_div_1208 (1 + x_1226)) 
   in
     if y_1032 <> 0 then
       k_div_u_1221 ()
     else
       {|fail|} () k_div_u_1221 
 in
 let rec fold_left_1033
   (f_1034:(int -> (int -> ((int -> X) -> X)))) (acc_1035:int) (xs1_1036:int) (xs2_1036:(
   int -> ((int -> X) -> X))) (k_fold_left_1289:(int -> X)) =
   if xs1_1036 = 0 then
     k_fold_left_1289 acc_1035
   else
     if 1 <= xs1_1036 then
       xs2_1036 0
         (fun x_1336 ->
            f_1034 acc_1035 x_1336
              (fun x_1390 ->
                 fold_left_1033 f_1034 x_1390 (xs1_1036 - 1)
                   (fun x_1120 -> fun k_fold_left_xs'_1322 -> xs2_1036 (x_1120 + 1) k_fold_left_xs'_1322)
                   k_fold_left_1289))
     else
       _|_ 
 in
 let rec range_1039 (i_1040:int) (j_1041:int) (k_range_1445:(int -> ((int -> ((int -> X) -> X)) -> X))) =
   if i_1040 > j_1041 then
     k_range_1445 0 (fun x_1161 -> fun k_range_1457 -> _|_)
   else
     range_1039 (i_1040 + 1) j_1041
       (fun x1_1469 ->
          fun x2_1469 ->
            (let cons_range_1157
               (x_1155:int) (xs1_1156:int) (xs2_1156:(int -> ((int -> X) -> X))) (k_range_cons_range_1539:(
               int -> ((int -> ((int -> X) -> X)) -> X))) =
               k_range_cons_range_1539 (xs1_1156 + 1)
                 (fun i_1154 ->
                    fun k_range_cons_range_1554 ->
                      (if i_1154 = 0 then
                         k_range_cons_range_1554 x_1155
                       else
                         xs2_1156 (i_1154 - 1) k_range_cons_range_1554)) 
             in
               cons_range_1157 i_1040 x1_1469 x2_1469 k_range_1445)) 
 in
 let harmonic_1043 (n_1044:int) (k_harmonic_1622:(int -> X)) =
   range_1039 1 n_1044
     (fun x1_1628 ->
        fun x2_1628 ->
          fold_left_1033
            (fun s_1046 ->
               fun k_1047 ->
                 fun k_harmonic_1668 -> div_1030 10000 k_1047 (fun x_1672 -> k_harmonic_1668 (s_1046 + x_1672))) 0
            x1_1628 x2_1628 k_harmonic_1622) 
 in
   rand_int_cps () (fun x_1705 -> harmonic_1043 x_1705 (fun x_1702 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1771
  main_1771 -> (rand_int f_1782)
  br_fold_left_1784 b_1785 f_1034 acc_1035 xs1_1036 xs2_1036 k_fold_left_1289 when b_1785 ->
      (xs2_1036 0 (f_fold_left_1773 acc_1035 xs1_1036 f_1034 k_fold_left_1289 xs2_1036))
  br_fold_left_1784 b_1785 f_1034 acc_1035 xs1_1036 xs2_1036 k_fold_left_1289 when (not b_1785) -> _|_
  cons_range_1157 i_1040 j_1041 x1_1469 x_1155 xs1_1156 xs2_1156 k_range_cons_range_1539 ->
      (k_range_cons_range_1539 (xs1_1156 + 1) (f_cons_range_1778 i_1040 j_1041 x1_1469 x_1155 xs1_1156 xs2_1156))
  div_1030 x_1031 y_1032 k_div_1208 when (not (y_1032 = 0)) -> (k_div_u_1221 x_1031 y_1032 k_div_1208 ())
  div_1030 x_1031 y_1032 k_div_1208 when (not (not (y_1032 = 0))) ->
      (fail_1786 true (k_div_u_1221 x_1031 y_1032 k_div_1208))
  f_1782 x_1705 -> (harmonic_1043 x_1705 (f_1783 x_1705))
  f_1783 x_1705 x_1702 -> end
  f_cons_range_1778 i_1040 j_1041 x1_1469 x_1155 xs1_1156 xs2_1156 i_1154 k_range_cons_range_1554 when (
      i_1154 = 0) -> (k_range_cons_range_1554 x_1155)
  f_cons_range_1778 i_1040 j_1041 x1_1469 x_1155 xs1_1156 xs2_1156 i_1154 k_range_cons_range_1554 when (
      not (i_1154 = 0)) -> (xs2_1156 (i_1154 - 1) k_range_cons_range_1554)
  f_fold_left_1773 acc_1035 xs1_1036 f_1034 k_fold_left_1289 xs2_1036 x_1336 ->
      (f_1034 acc_1035 x_1336 (f_fold_left_1774 acc_1035 x_1336 xs1_1036 f_1034 k_fold_left_1289 xs2_1036))
  f_fold_left_1774 acc_1035 x_1336 xs1_1036 f_1034 k_fold_left_1289 xs2_1036 x_1390 ->
      (fold_left_1033 f_1034 x_1390 (xs1_1036 - 1) (f_fold_left_1775 acc_1035 x_1336 x_1390 xs1_1036 xs2_1036)
        k_fold_left_1289)
  f_fold_left_1775 acc_1035 x_1336 x_1390 xs1_1036 xs2_1036 x_1120 k_fold_left_xs'_1322 ->
      (xs2_1036 (x_1120 + 1) k_fold_left_xs'_1322)
  f_harmonic_1779 n_1044 k_harmonic_1622 x1_1628 x2_1628 ->
      (fold_left_1033 (f_harmonic_1780 n_1044 x1_1628) 0 x1_1628 x2_1628 k_harmonic_1622)
  f_harmonic_1780 n_1044 x1_1628 s_1046 k_1047 k_harmonic_1668 ->
      (div_1030 10000 k_1047 (f_harmonic_1781 k_1047 n_1044 s_1046 x1_1628 k_harmonic_1668))
  f_harmonic_1781 k_1047 n_1044 s_1046 x1_1628 k_harmonic_1668 x_1672 -> (k_harmonic_1668 (s_1046 + x_1672))
  f_k_div_u_1772 x_1031 x_1211 y_1032 k_div_1208 x_1226 -> (k_div_1208 (1 + x_1226))
  f_range_1776 i_1040 j_1041 x_1161 k_range_1457 -> _|_
  f_range_1777 i_1040 j_1041 k_range_1445 x1_1469 x2_1469 ->
      (cons_range_1157 i_1040 j_1041 x1_1469 i_1040 x1_1469 x2_1469 k_range_1445)
  fail_1786 b k -> {fail} => (k ())
  fold_left_1033 f_1034 acc_1035 xs1_1036 xs2_1036 k_fold_left_1289 when (xs1_1036 = 0) -> (k_fold_left_1289 acc_1035)
  fold_left_1033 f_1034 acc_1035 xs1_1036 xs2_1036 k_fold_left_1289 when (
      not (xs1_1036 = 0)) -> (br_fold_left_1784 (1 <= xs1_1036) f_1034 acc_1035 xs1_1036 xs2_1036 k_fold_left_1289)
  harmonic_1043 n_1044 k_harmonic_1622 -> (range_1039 1 n_1044 (f_harmonic_1779 n_1044 k_harmonic_1622))
  k_div_u_1221 x_1031 y_1032 k_div_1208 x_1211 when (x_1031 < y_1032) -> (k_div_1208 0)
  k_div_u_1221 x_1031 y_1032 k_div_1208 x_1211 when (not (x_1031 < y_1032)) ->
      (div_1030 (x_1031 - y_1032) y_1032 (f_k_div_u_1772 x_1031 x_1211 y_1032 k_div_1208))
  range_1039 i_1040 j_1041 k_range_1445 when (i_1040 > j_1041) -> (k_range_1445 0 (f_range_1776 i_1040 j_1041))
  range_1039 i_1040 j_1041 k_range_1445 when (not (i_1040 > j_1041)) ->
      (range_1039 (i_1040 + 1) j_1041 (f_range_1777 i_1040 j_1041 k_range_1445))
Types:
  main_1771 : X
  div_1030 : (int -> int -> (int -> X) -> X)
  fail_1786 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fold_left_1033 : ((int -> int -> (int -> X) -> X) -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X)
  range_1039 : (int -> int -> (int -> (int -> (int -> X) -> X) -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1771 ... --> 
  f_1782 ... --> 
  harmonic_1043 ... --> 
  range_1039 [2/2] ... --> 
  range_1039 [1/2] ... --> 
  f_range_1777 ... --> 
  cons_range_1157 ... --> 
  f_harmonic_1779 ... --> 
  fold_left_1033 [2/2] ... --> 
  br_fold_left_1784 [1/2] ... --> 
  f_cons_range_1778 [1/2] ... --> 
  f_fold_left_1773 ... --> 
  f_harmonic_1780 ... --> 
  div_1030 [2/2] ... --> 
  fail_1786 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(288)[1]
  program:
    main_1771  | true = ((Random.int 0) f_1782)
    br_fold_left_1784 b_1785 f_1034 acc_1035 xs1_1036 xs2_1036 k_fold_left_1289 | b_1785 = (
    xs2_1036 0
             (f_fold_left_1773 acc_1035
                               xs1_1036
                               f_1034
                               k_fold_left_1289
                               xs2_1036))
    br_fold_left_1784 b_1785 f_1034 acc_1035 xs1_1036 xs2_1036 k_fold_left_1289 | (
    not b_1785) = bot
    cons_range_1157 i_1040 j_1041 x1_1469 x_1155 xs1_1156 xs2_1156 k_range_cons_range_1539 | true = (
    k_range_cons_range_1539 (xs1_1156 + 1)
                            (f_cons_range_1778 i_1040
                                               j_1041
                                               x1_1469
                                               x_1155
                                               xs1_1156
                                               xs2_1156))
    div_1030 x_1031 y_1032 k_div_1208 | (not (y_1032 = 0)) = (k_div_u_1221 x_1031
                                                                    y_1032
                                                                    k_div_1208
                                                                    ())
    div_1030 x_1031 y_1032 k_div_1208 | (not (not (y_1032 = 0))) = (fail_1786
                                                                    true
                                                                    (
                                                                    k_div_u_1221 x_1031
                                                                    y_1032
                                                                    k_div_1208))
    f_1782 x_1705 | true = (harmonic_1043 x_1705
                                          (f_1783 x_1705))
    f_1783 x_1705 x_1702 | true = end
    f_cons_range_1778 i_1040 j_1041 x1_1469 x_1155 xs1_1156 xs2_1156 i_1154 k_range_cons_range_1554 | (
    i_1154 = 0) = (k_range_cons_range_1554 x_1155)
    f_cons_range_1778 i_1040 j_1041 x1_1469 x_1155 xs1_1156 xs2_1156 i_1154 k_range_cons_range_1554 | (
    not (i_1154 = 0)) = (xs2_1156 (i_1154 - 1)
                                  k_range_cons_range_1554)
    f_fold_left_1773 acc_1035 xs1_1036 f_1034 k_fold_left_1289 xs2_1036 x_1336 | true = (
    f_1034 acc_1035
           x_1336
           (f_fold_left_1774 acc_1035
                             x_1336
                             xs1_1036
                             f_1034
                             k_fold_left_1289
                             xs2_1036))
    f_fold_left_1774 acc_1035 x_1336 xs1_1036 f_1034 k_fold_left_1289 xs2_1036 x_1390 | true = (
    fold_left_1033
      f_1034
      x_1390
      (xs1_1036 - 1)
      (f_fold_left_1775 acc_1035
                        x_1336
                        x_1390
                        xs1_1036
                        xs2_1036)
      k_fold_left_1289)
    f_fold_left_1775 acc_1035 x_1336 x_1390 xs1_1036 xs2_1036 x_1120 k_fold_left_xs'_1322 | true = (
    xs2_1036 (x_1120 + 1)
             k_fold_left_xs'_1322)
    f_harmonic_1779 n_1044 k_harmonic_1622 x1_1628 x2_1628 | true = (
    fold_left_1033 (f_harmonic_1780 n_1044
                                    x1_1628)
                   0
                   x1_1628
                   x2_1628
                   k_harmonic_1622)
    f_harmonic_1780 n_1044 x1_1628 s_1046 k_1047 k_harmonic_1668 | true = (
    div_1030 10000
             k_1047
             (f_harmonic_1781 k_1047
                              n_1044
                              s_1046
                              x1_1628
                              k_harmonic_1668))
    f_harmonic_1781 k_1047 n_1044 s_1046 x1_1628 k_harmonic_1668 x_1672 | true = (
    k_harmonic_1668 (s_1046 + x_1672))
    f_k_div_u_1772 x_1031 x_1211 y_1032 k_div_1208 x_1226 | true = (k_div_1208 (
                                                                    1 + x_1226))
    f_range_1776 i_1040 j_1041 x_1161 k_range_1457 | true = bot
    f_range_1777 i_1040 j_1041 k_range_1445 x1_1469 x2_1469 | true = (
    cons_range_1157 i_1040
                    j_1041
                    x1_1469
                    i_1040
                    x1_1469
                    x2_1469
                    k_range_1445)
    fail_1786 b k | true = (fail ())
    fold_left_1033 f_1034 acc_1035 xs1_1036 xs2_1036 k_fold_left_1289 | (
    xs1_1036 = 0) = (k_fold_left_1289 acc_1035)
    fold_left_1033 f_1034 acc_1035 xs1_1036 xs2_1036 k_fold_left_1289 | (
    not (xs1_1036 = 0)) = (br_fold_left_1784 (1 <= xs1_1036)
                                             f_1034
                                             acc_1035
                                             xs1_1036
                                             xs2_1036
                                             k_fold_left_1289)
    harmonic_1043 n_1044 k_harmonic_1622 | true = (range_1039 1
                                                              n_1044
                                                              (f_harmonic_1779 n_1044
                                                                    k_harmonic_1622))
    k_div_u_1221 x_1031 y_1032 k_div_1208 x_1211 | (x_1031 < y_1032) = (
    k_div_1208 0)
    k_div_u_1221 x_1031 y_1032 k_div_1208 x_1211 | (not (x_1031 < y_1032)) = (
    div_1030 (x_1031 - y_1032)
             y_1032
             (f_k_div_u_1772 x_1031
                             x_1211
                             y_1032
                             k_div_1208))
    range_1039 i_1040 j_1041 k_range_1445 | (i_1040 > j_1041) = (k_range_1445 0
                                                                    (f_range_1776 i_1040
                                                                    j_1041))
    range_1039 i_1040 j_1041 k_range_1445 | (not (i_1040 > j_1041)) = (
    range_1039 (i_1040 + 1)
               j_1041
               (f_range_1777 i_1040
                             j_1041
                             k_range_1445))
    main_1771:X
    br_fold_left_1784:bool ->
                      (int -> int -> (int -> X) -> X) -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    cons_range_1157:int ->
                    int -> int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    div_1030:int -> int -> (int -> X) -> X
    f_1782:int -> X
    f_1783:int -> int -> X
    f_cons_range_1778:int -> int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_fold_left_1773:int ->
                     int -> (int -> int -> (int -> X) -> X) -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_fold_left_1774:int ->
                     int ->
                     int -> (int -> int -> (int -> X) -> X) -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_fold_left_1775:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_harmonic_1779:int -> (int -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_harmonic_1780:int -> int -> int -> int -> (int -> X) -> X
    f_harmonic_1781:int -> int -> int -> int -> (int -> X) -> int -> X
    f_k_div_u_1772:int -> unit -> int -> (int -> X) -> int -> X
    f_range_1776:int -> int -> int -> (int -> X) -> X
    f_range_1777:int -> int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    fail_1786:bool -> (unit -> X) -> X
    fold_left_1033:(int -> int -> (int -> X) -> X) -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    harmonic_1043:int -> (int -> X) -> X
    k_div_u_1221:int -> int -> (int -> X) -> unit -> X
    range_1039:int -> int -> (int -> (int -> (int -> X) -> X) -> X) -> X
  inlined functions: br_fold_left_1784,cons_range_1157,f_1782,f_1783,f_cons_range_1778,f_fold_left_1773,f_fold_left_1774,f_fold_left_1775,f_harmonic_1779,f_harmonic_1780,f_harmonic_1781,f_k_div_u_1772,f_range_1776,f_range_1777,harmonic_1043,k_div_u_1221
  counterexample: 0:0:0:1:0:0:0:0:1:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1782@4:0> = var2)
     [true.(<harmonic_1043@6:0> = <f_1782@4:0>)
      [true.((<range_1039@8:0> = 1) && (<range_1039@8:1> = <harmonic_1043@6:0>))
       [(not (<range_1039@8:0> > <range_1039@8:1>)).
        ((<range_1039@11:0> = (<range_1039@8:0> + 1)) && (<range_1039@11:1> = <range_1039@8:1>))
        [(<range_1039@11:0> > <range_1039@11:1>).(<<range_1039@11:2>@14:0> = 0)
         [true.
          ((<f_range_1777@16:0> = <range_1039@8:0>) &&
           ((<f_range_1777@16:1> = <range_1039@8:1>) && (<f_range_1777@16:3> = <<range_1039@11:2>@14:0>)))
          [true.
           ((<cons_range_1157@18:0> = <f_range_1777@16:0>) &&
            ((<cons_range_1157@18:1> = <f_range_1777@16:1>) &&
             ((<cons_range_1157@18:2> = <f_range_1777@16:3>) &&
              ((<cons_range_1157@18:3> = <f_range_1777@16:0>) && (<cons_range_1157@18:4> = <f_range_1777@16:3>)))))
           [true.(<<cons_range_1157@18:6>@20:0> = (<cons_range_1157@18:4> + 1))
            [true.(<<f_range_1777@16:2>@22:0> = <<cons_range_1157@18:6>@20:0>)
             [true.(<<range_1039@8:2>@24:0> = <<f_range_1777@16:2>@22:0>)
              [true.
               ((<f_harmonic_1779@26:0> = <harmonic_1043@6:0>) && (<f_harmonic_1779@26:2> = <<range_1039@8:2>@24:0>))
               [true.((<fold_left_1033@28:1> = 0) && (<fold_left_1033@28:2> = <f_harmonic_1779@26:2>))
                [(not (<fold_left_1033@28:2> = 0)).
                 ((<br_fold_left_1784@31:0> = (1 <= <fold_left_1033@28:2>)) &&
                  ((<br_fold_left_1784@31:2> = <fold_left_1033@28:1>) &&
                   (<br_fold_left_1784@31:3> = <fold_left_1033@28:2>)))
                 [<br_fold_left_1784@31:0>.(<<br_fold_left_1784@31:4>@34:0> = 0)
                  [true.(<<fold_left_1033@28:3>@36:0> = <<br_fold_left_1784@31:4>@34:0>)
                   [true.(<<f_harmonic_1779@26:3>@38:0> = <<fold_left_1033@28:3>@36:0>)
                    [true.(<<<range_1039@8:2>@24:1>@40:0> = <<f_harmonic_1779@26:3>@38:0>)
                     [true.(<<<f_range_1777@16:2>@22:1>@42:0> = <<<range_1039@8:2>@24:1>@40:0>)
                      [true.(<<<cons_range_1157@18:6>@20:1>@44:0> = <<<f_range_1777@16:2>@22:1>@42:0>)
                       [true.
                        ((<f_cons_range_1778@46:0> = <cons_range_1157@18:0>) &&
                         ((<f_cons_range_1778@46:1> = <cons_range_1157@18:1>) &&
                          ((<f_cons_range_1778@46:2> = <cons_range_1157@18:2>) &&
                           ((<f_cons_range_1778@46:3> = <cons_range_1157@18:3>) &&
                            ((<f_cons_range_1778@46:4> = <cons_range_1157@18:4>) &&
                             (<f_cons_range_1778@46:6> = <<<cons_range_1157@18:6>@20:1>@44:0>))))))
                        [(<f_cons_range_1778@46:6> = 0).(<<f_cons_range_1778@46:7>@49:0> = <f_cons_range_1778@46:3>)
                         [true.(<<<<cons_range_1157@18:6>@20:1>@44:1>@51:0> = <<f_cons_range_1778@46:7>@49:0>)
                          [true.
                           (<<<<f_range_1777@16:2>@22:1>@42:1>@53:0> = <<<<cons_range_1157@18:6>@20:1>@44:1>@51:0>)
                           [true.(<<<<range_1039@8:2>@24:1>@40:1>@55:0> = <<<<f_range_1777@16:2>@22:1>@42:1>@53:0>)
                            [true.(<<<f_harmonic_1779@26:3>@38:1>@57:0> = <<<<range_1039@8:2>@24:1>@40:1>@55:0>)
                             [true.(<<<fold_left_1033@28:3>@36:1>@59:0> = <<<f_harmonic_1779@26:3>@38:1>@57:0>)
                              [true.(<<<br_fold_left_1784@31:4>@34:1>@61:0> = <<<fold_left_1033@28:3>@36:1>@59:0>)
                               [true.
                                ((<f_fold_left_1773@63:0> = <br_fold_left_1784@31:2>) &&
                                 ((<f_fold_left_1773@63:1> = <br_fold_left_1784@31:3>) &&
                                  (<f_fold_left_1773@63:5> = <<<br_fold_left_1784@31:4>@34:1>@61:0>)))
                                [true.
                                 ((<<f_fold_left_1773@63:2>@65:0> = <f_fold_left_1773@63:0>) &&
                                  (<<f_fold_left_1773@63:2>@65:1> = <f_fold_left_1773@63:5>))
                                 [true.
                                  ((<<br_fold_left_1784@31:1>@67:0> = <<f_fold_left_1773@63:2>@65:0>) &&
                                   (<<br_fold_left_1784@31:1>@67:1> = <<f_fold_left_1773@63:2>@65:1>))
                                  [true.
                                   ((<<fold_left_1033@28:0>@69:0> = <<br_fold_left_1784@31:1>@67:0>) &&
                                    (<<fold_left_1033@28:0>@69:1> = <<br_fold_left_1784@31:1>@67:1>))
                                   [true.
                                    ((<f_harmonic_1780@71:0> = <f_harmonic_1779@26:0>) &&
                                     ((<f_harmonic_1780@71:1> = <f_harmonic_1779@26:2>) &&
                                      ((<f_harmonic_1780@71:2> = <<fold_left_1033@28:0>@69:0>) &&
                                       (<f_harmonic_1780@71:3> = <<fold_left_1033@28:0>@69:1>))))
                                    [true.((<div_1030@73:0> = 10000) && (<div_1030@73:1> = <f_harmonic_1780@71:3>))
                                     [(not (not (<div_1030@73:1> = 0))).(<fail_1786@76:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(289)[2]
    horn clauses:
      P[<fail_1786@76:0>](<fail_1786@76:0>:bool)|- bot
      
      P[<div_1030@73:1>](<div_1030@73:0>:int,0:int), <fail_1786@76:0> |- P[<fail_1786@76:0>](<fail_1786@76:0>:bool)
      
      P[<f_harmonic_1780@71:3>](<f_harmonic_1780@71:0>:int,<f_harmonic_1780@71:1>:int,<f_harmonic_1780@71:2>:int,<div_1030@73:1>:int),
      (<div_1030@73:0> = 10000) |- P[<div_1030@73:1>](<div_1030@73:0>:int,
                                                      <div_1030@73:1>:int)
      
      P[<f_harmonic_1779@26:2>](<f_harmonic_1780@71:0>:int,<f_harmonic_1780@71:1>:int),
      P[<<fold_left_1033@28:0>@69:1>](<f_harmonic_1780@71:2>:int,<f_harmonic_1780@71:3>:int)|- P[<f_harmonic_1780@71:3>](
      <f_harmonic_1780@71:0>:int,<f_harmonic_1780@71:1>:int,<f_harmonic_1780@71:2>:int,
      <f_harmonic_1780@71:3>:int)
      
      P[<fold_left_1033@28:2>](<br_fold_left_1784@31:2>:int,<br_fold_left_1784@31:3>:int),
      P[<<br_fold_left_1784@31:1>@67:1>]((1 <= <br_fold_left_1784@31:3>):bool,<<fold_left_1033@28:0>@69:0>:int,<<fold_left_1033@28:0>@69:1>:int),
      (<br_fold_left_1784@31:3> <> 0)
      |- P[<<fold_left_1033@28:0>@69:1>](<<fold_left_1033@28:0>@69:0>:int,
                                         <<fold_left_1033@28:0>@69:1>:int)
      
      P[<br_fold_left_1784@31:3>](<br_fold_left_1784@31:0>:bool,<f_fold_left_1773@63:0>:int,<f_fold_left_1773@63:1>:int),
      P[<<f_fold_left_1773@63:2>@65:1>](<f_fold_left_1773@63:0>:int,<f_fold_left_1773@63:1>:int,<<br_fold_left_1784@31:1>@67:0>:int,<<br_fold_left_1784@31:1>@67:1>:int),
      <br_fold_left_1784@31:0>
      |- P[<<br_fold_left_1784@31:1>@67:1>](<br_fold_left_1784@31:0>:bool,
                                            <<br_fold_left_1784@31:1>@67:0>:int,
                                            <<br_fold_left_1784@31:1>@67:1>:int)
      
      P[<f_fold_left_1773@63:5>](<f_fold_left_1773@63:0>:int,<f_fold_left_1773@63:1>:int,<<f_fold_left_1773@63:2>@65:1>:int),
      (<<f_fold_left_1773@63:2>@65:0> = <f_fold_left_1773@63:0>)
      |- P[<<f_fold_left_1773@63:2>@65:1>](<f_fold_left_1773@63:0>:int,
                                           <f_fold_left_1773@63:1>:int,
                                           <<f_fold_left_1773@63:2>@65:0>:int,
                                           <<f_fold_left_1773@63:2>@65:1>:int)
      
      P[<br_fold_left_1784@31:3>](true:bool,<f_fold_left_1773@63:0>:int,<f_fold_left_1773@63:1>:int),
      P[<<<br_fold_left_1784@31:4>@34:1>@61:0>](true:bool,<f_fold_left_1773@63:0>:int,<f_fold_left_1773@63:1>:int,0:int,<f_fold_left_1773@63:5>:int)|- P[<f_fold_left_1773@63:5>](
      <f_fold_left_1773@63:0>:int,<f_fold_left_1773@63:1>:int,<f_fold_left_1773@63:5>:int)
      
      P[<fold_left_1033@28:2>](<br_fold_left_1784@31:2>:int,<br_fold_left_1784@31:3>:int),
      P[<<<fold_left_1033@28:3>@36:1>@59:0>](<br_fold_left_1784@31:2>:int,<br_fold_left_1784@31:3>:int,<<br_fold_left_1784@31:4>@34:0>:int,<<<br_fold_left_1784@31:4>@34:1>@61:0>:int),
      P[<br_fold_left_1784@31:3>](<br_fold_left_1784@31:0>:bool,<br_fold_left_1784@31:2>:int,<br_fold_left_1784@31:3>:int),
      ((<br_fold_left_1784@31:3> <> 0) && (<br_fold_left_1784@31:0> = (1 <= <br_fold_left_1784@31:3>)))
      |- P[<<<br_fold_left_1784@31:4>@34:1>@61:0>](<br_fold_left_1784@31:0>:bool,
                                                   <br_fold_left_1784@31:2>:int,
                                                   <br_fold_left_1784@31:3>:int,
                                                   <<br_fold_left_1784@31:4>@34:0>:int,
                                                   <<<br_fold_left_1784@31:4>@34:1>@61:0>:int)
      
      P[<f_harmonic_1779@26:2>](<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int),
      P[<<<f_harmonic_1779@26:3>@38:1>@57:0>](<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int,<<fold_left_1033@28:3>@36:0>:int,<<<fold_left_1033@28:3>@36:1>@59:0>:int),
      P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,<fold_left_1033@28:2>:int), (
      <fold_left_1033@28:1> = 0)
      |- P[<<<fold_left_1033@28:3>@36:1>@59:0>](<fold_left_1033@28:1>:int,
                                                <fold_left_1033@28:2>:int,
                                                <<fold_left_1033@28:3>@36:0>:int,
                                                <<<fold_left_1033@28:3>@36:1>@59:0>:int)
      
      P[<harmonic_1043@6:0>](<f_harmonic_1779@26:0>:int),
      P[<<range_1039@8:2>@24:0>](1:int,<f_harmonic_1779@26:0>:int,<f_harmonic_1779@26:2>:int),
      P[<<<<range_1039@8:2>@24:1>@40:1>@55:0>](1:int,<f_harmonic_1779@26:0>:int,<f_harmonic_1779@26:2>:int,<<f_harmonic_1779@26:3>@38:0>:int,<<<f_harmonic_1779@26:3>@38:1>@57:0>:int),
      P[<f_harmonic_1779@26:2>](<f_harmonic_1779@26:0>:int,<f_harmonic_1779@26:2>:int)|- P[<<<f_harmonic_1779@26:3>@38:1>@57:0>](
      <f_harmonic_1779@26:0>:int,<f_harmonic_1779@26:2>:int,<<f_harmonic_1779@26:3>@38:0>:int,
      <<<f_harmonic_1779@26:3>@38:1>@57:0>:int)
      
      P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int),
      P[<<f_range_1777@16:2>@22:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int),
      P[<<<<f_range_1777@16:2>@22:1>@42:1>@53:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int,<<<range_1039@8:2>@24:1>@40:0>:int,<<<<range_1039@8:2>@24:1>@40:1>@55:0>:int),
      P[<<range_1039@8:2>@24:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int),
      (<range_1039@8:0> <= <range_1039@8:1>)
      |- P[<<<<range_1039@8:2>@24:1>@40:1>@55:0>](<range_1039@8:0>:int,
                                                  <range_1039@8:1>:int,
                                                  <<range_1039@8:2>@24:0>:int,
                                                  <<<range_1039@8:2>@24:1>@40:0>:int,
                                                  <<<<range_1039@8:2>@24:1>@40:1>@55:0>:int)
      
      P[<f_range_1777@16:3>](<f_range_1777@16:0>:int,<f_range_1777@16:1>:int,<cons_range_1157@18:2>:int),
      P[<<cons_range_1157@18:6>@20:0>](<f_range_1777@16:0>:int,<f_range_1777@16:1>:int,<cons_range_1157@18:2>:int,<f_range_1777@16:0>:int,<cons_range_1157@18:2>:int,<<f_range_1777@16:2>@22:0>:int),
      P[<<<<cons_range_1157@18:6>@20:1>@44:1>@51:0>](<f_range_1777@16:0>:int,<f_range_1777@16:1>:int,<cons_range_1157@18:2>:int,<f_range_1777@16:0>:int,<cons_range_1157@18:2>:int,<<f_range_1777@16:2>@22:0>:int,<<<f_range_1777@16:2>@22:1>@42:0>:int,<<<<f_range_1777@16:2>@22:1>@42:1>@53:0>:int),
      P[<<f_range_1777@16:2>@22:0>](<f_range_1777@16:0>:int,<f_range_1777@16:1>:int,<<f_range_1777@16:2>@22:0>:int)|- P[<<<<f_range_1777@16:2>@22:1>@42:1>@53:0>](
      <f_range_1777@16:0>:int,<f_range_1777@16:1>:int,<<f_range_1777@16:2>@22:0>:int,
      <<<f_range_1777@16:2>@22:1>@42:0>:int,<<<<f_range_1777@16:2>@22:1>@42:1>@53:0>:int)
      
      P[<cons_range_1157@18:4>](<cons_range_1157@18:0>:int,<cons_range_1157@18:1>:int,<cons_range_1157@18:2>:int,<cons_range_1157@18:3>:int,<cons_range_1157@18:4>:int),
      P[<<f_cons_range_1778@46:7>@49:0>](<cons_range_1157@18:0>:int,<cons_range_1157@18:1>:int,<cons_range_1157@18:2>:int,<cons_range_1157@18:3>:int,<cons_range_1157@18:4>:int,<<<cons_range_1157@18:6>@20:1>@44:0>:int,<<<<cons_range_1157@18:6>@20:1>@44:1>@51:0>:int),
      P[<<cons_range_1157@18:6>@20:0>](<cons_range_1157@18:0>:int,<cons_range_1157@18:1>:int,<cons_range_1157@18:2>:int,<cons_range_1157@18:3>:int,<cons_range_1157@18:4>:int,<<cons_range_1157@18:6>@20:0>:int),
      (<<cons_range_1157@18:6>@20:0> = (1 + <cons_range_1157@18:4>))
      |- P[<<<<cons_range_1157@18:6>@20:1>@44:1>@51:0>](<cons_range_1157@18:0>:int,
                                                        <cons_range_1157@18:1>:int,
                                                        <cons_range_1157@18:2>:int,
                                                        <cons_range_1157@18:3>:int,
                                                        <cons_range_1157@18:4>:int,
                                                        <<cons_range_1157@18:6>@20:0>:int,
                                                        <<<cons_range_1157@18:6>@20:1>@44:0>:int,
                                                        <<<<cons_range_1157@18:6>@20:1>@44:1>@51:0>:int)
      
      P[<f_cons_range_1778@46:6>](<f_cons_range_1778@46:0>:int,<f_cons_range_1778@46:1>:int,<f_cons_range_1778@46:2>:int,<f_cons_range_1778@46:3>:int,<f_cons_range_1778@46:4>:int,<f_cons_range_1778@46:6>:int),
      ((<f_cons_range_1778@46:6> = 0) && (<<f_cons_range_1778@46:7>@49:0> = <f_cons_range_1778@46:3>))
      |- P[<<f_cons_range_1778@46:7>@49:0>](<f_cons_range_1778@46:0>:int,
                                            <f_cons_range_1778@46:1>:int,
                                            <f_cons_range_1778@46:2>:int,
                                            <f_cons_range_1778@46:3>:int,
                                            <f_cons_range_1778@46:4>:int,
                                            <f_cons_range_1778@46:6>:int,
                                            <<f_cons_range_1778@46:7>@49:0>:int)
      
      P[<cons_range_1157@18:4>](<f_cons_range_1778@46:0>:int,<f_cons_range_1778@46:1>:int,<f_cons_range_1778@46:2>:int,<f_cons_range_1778@46:3>:int,<f_cons_range_1778@46:4>:int),
      P[<<<cons_range_1157@18:6>@20:1>@44:0>](<f_cons_range_1778@46:0>:int,<f_cons_range_1778@46:1>:int,<f_cons_range_1778@46:2>:int,<f_cons_range_1778@46:3>:int,<f_cons_range_1778@46:4>:int,(
                                              1 + <f_cons_range_1778@46:4>):int,<f_cons_range_1778@46:6>:int)|- P[<f_cons_range_1778@46:6>](
      <f_cons_range_1778@46:0>:int,<f_cons_range_1778@46:1>:int,<f_cons_range_1778@46:2>:int,
      <f_cons_range_1778@46:3>:int,<f_cons_range_1778@46:4>:int,<f_cons_range_1778@46:6>:int)
      
      P[<f_range_1777@16:3>](<cons_range_1157@18:0>:int,<cons_range_1157@18:1>:int,<cons_range_1157@18:2>:int),
      P[<<<f_range_1777@16:2>@22:1>@42:0>](<cons_range_1157@18:0>:int,<cons_range_1157@18:1>:int,<<cons_range_1157@18:6>@20:0>:int,<<<cons_range_1157@18:6>@20:1>@44:0>:int),
      P[<cons_range_1157@18:4>](<cons_range_1157@18:0>:int,<cons_range_1157@18:1>:int,<cons_range_1157@18:2>:int,<cons_range_1157@18:3>:int,<cons_range_1157@18:4>:int),
      ((<cons_range_1157@18:2> = <cons_range_1157@18:4>) && (<cons_range_1157@18:0> = <cons_range_1157@18:3>))
      |- P[<<<cons_range_1157@18:6>@20:1>@44:0>](<cons_range_1157@18:0>:int,
                                                 <cons_range_1157@18:1>:int,
                                                 <cons_range_1157@18:2>:int,
                                                 <cons_range_1157@18:3>:int,
                                                 <cons_range_1157@18:4>:int,
                                                 <<cons_range_1157@18:6>@20:0>:int,
                                                 <<<cons_range_1157@18:6>@20:1>@44:0>:int)
      
      P[<range_1039@8:1>](<f_range_1777@16:0>:int,<f_range_1777@16:1>:int),
      P[<<<range_1039@8:2>@24:1>@40:0>](<f_range_1777@16:0>:int,<f_range_1777@16:1>:int,<<f_range_1777@16:2>@22:0>:int,<<<f_range_1777@16:2>@22:1>@42:0>:int),
      (<f_range_1777@16:0> <= <f_range_1777@16:1>)
      |- P[<<<f_range_1777@16:2>@22:1>@42:0>](<f_range_1777@16:0>:int,
                                              <f_range_1777@16:1>:int,
                                              <<f_range_1777@16:2>@22:0>:int,
                                              <<<f_range_1777@16:2>@22:1>@42:0>:int)
      
      P[<harmonic_1043@6:0>](<range_1039@8:1>:int),
      P[<<f_harmonic_1779@26:3>@38:0>](<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int,<<<range_1039@8:2>@24:1>@40:0>:int),
      P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int), (
      <range_1039@8:0> = 1)
      |- P[<<<range_1039@8:2>@24:1>@40:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,
                                           <<range_1039@8:2>@24:0>:int,
                                           <<<range_1039@8:2>@24:1>@40:0>:int)
      
      P[<f_harmonic_1779@26:2>](<f_harmonic_1779@26:0>:int,<f_harmonic_1779@26:2>:int),
      P[<<fold_left_1033@28:3>@36:0>](0:int,<f_harmonic_1779@26:2>:int,<<f_harmonic_1779@26:3>@38:0>:int)|- P[<<f_harmonic_1779@26:3>@38:0>](
      <f_harmonic_1779@26:0>:int,<f_harmonic_1779@26:2>:int,<<f_harmonic_1779@26:3>@38:0>:int)
      
      P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,<fold_left_1033@28:2>:int),
      P[<<br_fold_left_1784@31:4>@34:0>]((1 <= <fold_left_1033@28:2>):bool,<fold_left_1033@28:1>:int,<fold_left_1033@28:2>:int,<<fold_left_1033@28:3>@36:0>:int),
      (<fold_left_1033@28:2> <> 0)
      |- P[<<fold_left_1033@28:3>@36:0>](<fold_left_1033@28:1>:int,<fold_left_1033@28:2>:int,
                                         <<fold_left_1033@28:3>@36:0>:int)
      
      P[<br_fold_left_1784@31:3>](<br_fold_left_1784@31:0>:bool,<br_fold_left_1784@31:2>:int,<br_fold_left_1784@31:3>:int),
      ((<<br_fold_left_1784@31:4>@34:0> = 0) && <br_fold_left_1784@31:0>)
      |- P[<<br_fold_left_1784@31:4>@34:0>](<br_fold_left_1784@31:0>:bool,
                                            <br_fold_left_1784@31:2>:int,
                                            <br_fold_left_1784@31:3>:int,
                                            <<br_fold_left_1784@31:4>@34:0>:int)
      
      P[<fold_left_1033@28:2>](<br_fold_left_1784@31:2>:int,<br_fold_left_1784@31:3>:int),
      ((<br_fold_left_1784@31:3> <> 0) && (<br_fold_left_1784@31:0> = (1 <= <br_fold_left_1784@31:3>)))
      |- P[<br_fold_left_1784@31:3>](<br_fold_left_1784@31:0>:bool,<br_fold_left_1784@31:2>:int,
                                     <br_fold_left_1784@31:3>:int)
      
      P[<f_harmonic_1779@26:2>](<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int), (
      <fold_left_1033@28:1> = 0) |- P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,
                                                             <fold_left_1033@28:2>:int)
      
      P[<harmonic_1043@6:0>](<f_harmonic_1779@26:0>:int),
      P[<<range_1039@8:2>@24:0>](1:int,<f_harmonic_1779@26:0>:int,<f_harmonic_1779@26:2>:int)|- P[<f_harmonic_1779@26:2>](
      <f_harmonic_1779@26:0>:int,<f_harmonic_1779@26:2>:int)
      
      P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int),
      P[<<f_range_1777@16:2>@22:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int),
      (<range_1039@8:0> <= <range_1039@8:1>)
      |- P[<<range_1039@8:2>@24:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,
                                    <<range_1039@8:2>@24:0>:int)
      
      P[<f_range_1777@16:3>](<f_range_1777@16:0>:int,<f_range_1777@16:1>:int,<cons_range_1157@18:2>:int),
      P[<<cons_range_1157@18:6>@20:0>](<f_range_1777@16:0>:int,<f_range_1777@16:1>:int,<cons_range_1157@18:2>:int,<f_range_1777@16:0>:int,<cons_range_1157@18:2>:int,<<f_range_1777@16:2>@22:0>:int)|- P[<<f_range_1777@16:2>@22:0>](
      <f_range_1777@16:0>:int,<f_range_1777@16:1>:int,<<f_range_1777@16:2>@22:0>:int)
      
      P[<cons_range_1157@18:4>](<cons_range_1157@18:0>:int,<cons_range_1157@18:1>:int,<cons_range_1157@18:2>:int,<cons_range_1157@18:3>:int,<cons_range_1157@18:4>:int),
      (<<cons_range_1157@18:6>@20:0> = (1 + <cons_range_1157@18:4>))
      |- P[<<cons_range_1157@18:6>@20:0>](<cons_range_1157@18:0>:int,
                                          <cons_range_1157@18:1>:int,
                                          <cons_range_1157@18:2>:int,
                                          <cons_range_1157@18:3>:int,
                                          <cons_range_1157@18:4>:int,
                                          <<cons_range_1157@18:6>@20:0>:int)
      
      P[<f_range_1777@16:3>](<cons_range_1157@18:0>:int,<cons_range_1157@18:1>:int,<cons_range_1157@18:4>:int),
      ((<cons_range_1157@18:4> = <cons_range_1157@18:2>) && (<cons_range_1157@18:0> = <cons_range_1157@18:3>))
      |- P[<cons_range_1157@18:4>](<cons_range_1157@18:0>:int,<cons_range_1157@18:1>:int,
                                   <cons_range_1157@18:2>:int,<cons_range_1157@18:3>:int,
                                   <cons_range_1157@18:4>:int)
      
      P[<range_1039@8:1>](<f_range_1777@16:0>:int,<f_range_1777@16:1>:int),
      P[<<range_1039@11:2>@14:0>]((1 + <f_range_1777@16:0>):int,<f_range_1777@16:1>:int,<f_range_1777@16:3>:int),
      (<f_range_1777@16:0> <= <f_range_1777@16:1>)
      |- P[<f_range_1777@16:3>](<f_range_1777@16:0>:int,<f_range_1777@16:1>:int,
                                <f_range_1777@16:3>:int)
      
      P[<range_1039@11:1>](<range_1039@11:0>:int,<range_1039@11:1>:int),
      ((<<range_1039@11:2>@14:0> = 0) && (<range_1039@11:0> > <range_1039@11:1>))
      |- P[<<range_1039@11:2>@14:0>](<range_1039@11:0>:int,<range_1039@11:1>:int,
                                     <<range_1039@11:2>@14:0>:int)
      
      P[<range_1039@8:1>]((-1 + <range_1039@11:0>):int,<range_1039@11:1>:int),
      (<range_1039@11:0> <= (1 + <range_1039@11:1>))
      |- P[<range_1039@11:1>](<range_1039@11:0>:int,<range_1039@11:1>:int)
      
      P[<harmonic_1043@6:0>](<range_1039@8:1>:int), (<range_1039@8:0> = 1)
      |- P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int)
      
      P[<f_1782@4:0>](<harmonic_1043@6:0>:int)|- P[<harmonic_1043@6:0>](<harmonic_1043@6:0>:int)
      
      |- P[<f_1782@4:0>](<f_1782@4:0>:int)
    call trees:
      <main_1771@1>
        <f_1782@4>
          <harmonic_1043@6>
            <range_1039@8>
              <range_1039@11>
              </<range_1039@11:2>@14>
              <f_range_1777@16>
                <cons_range_1157@18>
                </<cons_range_1157@18:6>@20>
              </<f_range_1777@16:2>@22>
            </<range_1039@8:2>@24>
            <f_harmonic_1779@26>
              <fold_left_1033@28>
                <br_fold_left_1784@31>
                </<br_fold_left_1784@31:4>@34>
              </<fold_left_1033@28:3>@36>
            </<f_harmonic_1779@26:3>@38>
            <<<range_1039@8:2>@24:1>@40>
              <<<f_range_1777@16:2>@22:1>@42>
                <<<cons_range_1157@18:6>@20:1>@44>
                  <f_cons_range_1778@46>
                  </<f_cons_range_1778@46:7>@49>
                </<<<cons_range_1157@18:6>@20:1>@44:1>@51>
              </<<<f_range_1777@16:2>@22:1>@42:1>@53>
            </<<<range_1039@8:2>@24:1>@40:1>@55>
            <<<f_harmonic_1779@26:3>@38:1>@57>
              <<<fold_left_1033@28:3>@36:1>@59>
                <<<br_fold_left_1784@31:4>@34:1>@61>
                  <f_fold_left_1773@63>
                  </<f_fold_left_1773@63:2>@65>
                </<br_fold_left_1784@31:1>@67>
              </<fold_left_1033@28:0>@69>
              <f_harmonic_1780@71>
                <div_1030@73>
                  <fail_1786@76>
    inlined horn clauses:
      P[<fail_1786@76:0>](<fail_1786@76:0>:bool)|- bot
      
      P[<div_1030@73:1>](<div_1030@73:0>:int,0:int), <fail_1786@76:0> |- P[<fail_1786@76:0>](<fail_1786@76:0>:bool)
      
      P[<<range_1039@8:2>@24:0>](1:int,<f_harmonic_1780@71:0>:int,<f_harmonic_1780@71:1>:int),
      P[<<fold_left_1033@28:0>@69:1>](<f_harmonic_1780@71:2>:int,<div_1030@73:1>:int), (
      <div_1030@73:0> = 10000) |- P[<div_1030@73:1>](<div_1030@73:0>:int,
                                                     <div_1030@73:1>:int)
      
      P[<<<fold_left_1033@28:3>@36:1>@59:0>](<<fold_left_1033@28:0>@69:0>:int,var3:int,0:int,<<fold_left_1033@28:0>@69:1>:int),
      P[<fold_left_1033@28:2>](<<fold_left_1033@28:0>@69:0>:int,var3:int), (
      1 <= var3) |- P[<<fold_left_1033@28:0>@69:1>](<<fold_left_1033@28:0>@69:0>:int,
                                                    <<fold_left_1033@28:0>@69:1>:int)
      
      P[<<<<range_1039@8:2>@24:1>@40:1>@55:0>](1:int,<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int,<<fold_left_1033@28:3>@36:0>:int,<<<fold_left_1033@28:3>@36:1>@59:0>:int),
      P[<<range_1039@8:2>@24:0>](1:int,<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int),
      P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,<fold_left_1033@28:2>:int), (
      <fold_left_1033@28:1> = 0)
      |- P[<<<fold_left_1033@28:3>@36:1>@59:0>](<fold_left_1033@28:1>:int,
                                                <fold_left_1033@28:2>:int,
                                                <<fold_left_1033@28:3>@36:0>:int,
                                                <<<fold_left_1033@28:3>@36:1>@59:0>:int)
      
      P[<<<range_1039@8:2>@24:1>@40:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int,<<<range_1039@8:2>@24:1>@40:0>:int),
      P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int),
      P[<<range_1039@11:2>@14:0>]((1 + <range_1039@8:0>):int,<range_1039@8:1>:int,(
                                  -1 + <<range_1039@8:2>@24:0>):int),
      P[<<range_1039@8:2>@24:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int),
      ((<<<range_1039@8:2>@24:1>@40:0> = 0) &&
       ((<range_1039@8:0> <= <range_1039@8:1>) && (<<<<range_1039@8:2>@24:1>@40:1>@55:0> = <range_1039@8:0>)))
      |- P[<<<<range_1039@8:2>@24:1>@40:1>@55:0>](<range_1039@8:0>:int,
                                                  <range_1039@8:1>:int,
                                                  <<range_1039@8:2>@24:0>:int,
                                                  <<<range_1039@8:2>@24:1>@40:0>:int,
                                                  <<<<range_1039@8:2>@24:1>@40:1>@55:0>:int)
      
      P[<<range_1039@8:2>@24:0>](1:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int),
      P[<<fold_left_1033@28:3>@36:0>](0:int,<<range_1039@8:2>@24:0>:int,<<<range_1039@8:2>@24:1>@40:0>:int),
      P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int), (
      <range_1039@8:0> = 1)
      |- P[<<<range_1039@8:2>@24:1>@40:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,
                                           <<range_1039@8:2>@24:0>:int,
                                           <<<range_1039@8:2>@24:1>@40:0>:int)
      
      P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,<fold_left_1033@28:2>:int),
      ((<<fold_left_1033@28:3>@36:0> = 0) && (<fold_left_1033@28:2> >= 1))
      |- P[<<fold_left_1033@28:3>@36:0>](<fold_left_1033@28:1>:int,<fold_left_1033@28:2>:int,
                                         <<fold_left_1033@28:3>@36:0>:int)
      
      P[<<range_1039@8:2>@24:0>](1:int,<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int),
      (<fold_left_1033@28:1> = 0) |- P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,
                                                              <fold_left_1033@28:2>:int)
      
      P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int),
      P[<<range_1039@11:2>@14:0>]((1 + <range_1039@8:0>):int,<range_1039@8:1>:int,(
                                  -1 + <<range_1039@8:2>@24:0>):int), (
      <range_1039@8:0> <= <range_1039@8:1>)
      |- P[<<range_1039@8:2>@24:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,
                                    <<range_1039@8:2>@24:0>:int)
      
      P[<range_1039@11:1>](<range_1039@11:0>:int,<range_1039@11:1>:int),
      ((<<range_1039@11:2>@14:0> = 0) && (<range_1039@11:0> > <range_1039@11:1>))
      |- P[<<range_1039@11:2>@14:0>](<range_1039@11:0>:int,<range_1039@11:1>:int,
                                     <<range_1039@11:2>@14:0>:int)
      
      P[<range_1039@8:1>]((-1 + <range_1039@11:0>):int,<range_1039@11:1>:int),
      (<range_1039@11:0> <= (1 + <range_1039@11:1>))
      |- P[<range_1039@11:1>](<range_1039@11:0>:int,<range_1039@11:1>:int)
      
       (<range_1039@8:0> = 1) |- P[<range_1039@8:1>](<range_1039@8:0>:int,
                                                     <range_1039@8:1>:int)
    begin ParamSubstInfer.infer(7021)[3]
      
    end ParamSubstInfer.infer(7021)[3] (0.051992 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(7023)[3]
      
    end RefTypeInfer.elim_coeffs(7023)[3] (0.002000 sec.)
    begin YhornInterface.solve(7547)[3]
      begin HcSolver.solve_ub(7548)[4]
        encoded:
          P[<fail_1786@76:0>](<fail_1786@76:0>:int)|- bot
          
          P[<div_1030@73:1>](<div_1030@73:0>:int,0:int), (<fail_1786@76:0> = 1)
          |- P[<fail_1786@76:0>](<fail_1786@76:0>:int)
          
          P[<<range_1039@8:2>@24:0>](1:int,<f_harmonic_1780@71:0>:int,<f_harmonic_1780@71:1>:int),
          P[<<fold_left_1033@28:0>@69:1>](<f_harmonic_1780@71:2>:int,<div_1030@73:1>:int), (
          <div_1030@73:0> = 10000) |- P[<div_1030@73:1>](<div_1030@73:0>:int,
                                                         <div_1030@73:1>:int)
          
          P[<<<fold_left_1033@28:3>@36:1>@59:0>](<<fold_left_1033@28:0>@69:0>:int,var3:int,0:int,<<fold_left_1033@28:0>@69:1>:int),
          P[<fold_left_1033@28:2>](<<fold_left_1033@28:0>@69:0>:int,var3:int), (
          1 <= var3)
          |- P[<<fold_left_1033@28:0>@69:1>](<<fold_left_1033@28:0>@69:0>:int,
                                             <<fold_left_1033@28:0>@69:1>:int)
          
          P[<<<<range_1039@8:2>@24:1>@40:1>@55:0>](1:int,<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int,<<fold_left_1033@28:3>@36:0>:int,<<<fold_left_1033@28:3>@36:1>@59:0>:int),
          P[<<range_1039@8:2>@24:0>](1:int,<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int),
          P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,<fold_left_1033@28:2>:int), (
          <fold_left_1033@28:1> = 0)
          |- P[<<<fold_left_1033@28:3>@36:1>@59:0>](<fold_left_1033@28:1>:int,
                                                    <fold_left_1033@28:2>:int,
                                                    <<fold_left_1033@28:3>@36:0>:int,
                                                    <<<fold_left_1033@28:3>@36:1>@59:0>:int)
          
          P[<<<range_1039@8:2>@24:1>@40:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int,<<<range_1039@8:2>@24:1>@40:0>:int),
          P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int),
          P[<<range_1039@11:2>@14:0>]((1 + <range_1039@8:0>):int,<range_1039@8:1>:int,(
                                      -1 + <<range_1039@8:2>@24:0>):int),
          P[<<range_1039@8:2>@24:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int),
          ((<<<range_1039@8:2>@24:1>@40:0> = 0) &&
           ((<range_1039@8:0> <= <range_1039@8:1>) && (<<<<range_1039@8:2>@24:1>@40:1>@55:0> = <range_1039@8:0>)))
          |- P[<<<<range_1039@8:2>@24:1>@40:1>@55:0>](<range_1039@8:0>:int,
                                                      <range_1039@8:1>:int,
                                                      <<range_1039@8:2>@24:0>:int,
                                                      <<<range_1039@8:2>@24:1>@40:0>:int,
                                                      <<<<range_1039@8:2>@24:1>@40:1>@55:0>:int)
          
          P[<<range_1039@8:2>@24:0>](1:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int),
          P[<<fold_left_1033@28:3>@36:0>](0:int,<<range_1039@8:2>@24:0>:int,<<<range_1039@8:2>@24:1>@40:0>:int),
          P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int), (
          <range_1039@8:0> = 1)
          |- P[<<<range_1039@8:2>@24:1>@40:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,
                                               <<range_1039@8:2>@24:0>:int,
                                               <<<range_1039@8:2>@24:1>@40:0>:int)
          
          P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,<fold_left_1033@28:2>:int),
          ((<<fold_left_1033@28:3>@36:0> = 0) && (<fold_left_1033@28:2> >= 1))
          |- P[<<fold_left_1033@28:3>@36:0>](<fold_left_1033@28:1>:int,
                                             <fold_left_1033@28:2>:int,
                                             <<fold_left_1033@28:3>@36:0>:int)
          
          P[<<range_1039@8:2>@24:0>](1:int,<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int),
          (<fold_left_1033@28:1> = 0) |- P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,
                                                                  <fold_left_1033@28:2>:int)
          
          P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int),
          P[<<range_1039@11:2>@14:0>]((1 + <range_1039@8:0>):int,<range_1039@8:1>:int,(
                                      -1 + <<range_1039@8:2>@24:0>):int), (
          <range_1039@8:0> <= <range_1039@8:1>)
          |- P[<<range_1039@8:2>@24:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,
                                        <<range_1039@8:2>@24:0>:int)
          
          P[<range_1039@11:1>](<range_1039@11:0>:int,<range_1039@11:1>:int),
          ((<<range_1039@11:2>@14:0> = 0) && (<range_1039@11:0> > <range_1039@11:1>))
          |- P[<<range_1039@11:2>@14:0>](<range_1039@11:0>:int,<range_1039@11:1>:int,
                                         <<range_1039@11:2>@14:0>:int)
          
          P[<range_1039@8:1>]((-1 + <range_1039@11:0>):int,<range_1039@11:1>:int),
          (<range_1039@11:0> <= (1 + <range_1039@11:1>))
          |- P[<range_1039@11:1>](<range_1039@11:0>:int,<range_1039@11:1>:int)
          
           (<range_1039@8:0> = 1) |- P[<range_1039@8:1>](<range_1039@8:0>:int,
                                                         <range_1039@8:1>:int)
        input to Yhorn:
          P[<fail_1786@76:0>](<fail_1786@76:0>:int)|- bot
          
          P[<div_1030@73:1>](<div_1030@73:0>:int,var4:int), ((var4 = 0) && (<fail_1786@76:0> = 1))
          |- P[<fail_1786@76:0>](<fail_1786@76:0>:int)
          
          P[<<range_1039@8:2>@24:0>](var5:int,<f_harmonic_1780@71:0>:int,<f_harmonic_1780@71:1>:int),
          P[<<fold_left_1033@28:0>@69:1>](<f_harmonic_1780@71:2>:int,<div_1030@73:1>:int),
          ((var5 = 1) && (<div_1030@73:0> = 10000)) |- P[<div_1030@73:1>](
          <div_1030@73:0>:int,<div_1030@73:1>:int)
          
          P[<<<fold_left_1033@28:3>@36:1>@59:0>](<<fold_left_1033@28:0>@69:0>:int,var3:int,var6:int,<<fold_left_1033@28:0>@69:1>:int),
          P[<fold_left_1033@28:2>](<<fold_left_1033@28:0>@69:0>:int,var3:int), (
          (1 <= var3) && (var6 = 0))
          |- P[<<fold_left_1033@28:0>@69:1>](<<fold_left_1033@28:0>@69:0>:int,
                                             <<fold_left_1033@28:0>@69:1>:int)
          
          P[<<<<range_1039@8:2>@24:1>@40:1>@55:0>](var7:int,<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int,<<fold_left_1033@28:3>@36:0>:int,<<<fold_left_1033@28:3>@36:1>@59:0>:int),
          P[<<range_1039@8:2>@24:0>](var8:int,<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int),
          P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,<fold_left_1033@28:2>:int),
          ((var8 = 1) && ((var7 = 1) && (<fold_left_1033@28:1> = 0)))
          |- P[<<<fold_left_1033@28:3>@36:1>@59:0>](<fold_left_1033@28:1>:int,
                                                    <fold_left_1033@28:2>:int,
                                                    <<fold_left_1033@28:3>@36:0>:int,
                                                    <<<fold_left_1033@28:3>@36:1>@59:0>:int)
          
          P[<<<range_1039@8:2>@24:1>@40:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int,<<<range_1039@8:2>@24:1>@40:0>:int),
          P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int),
          P[<<range_1039@11:2>@14:0>](var9:int,<range_1039@8:1>:int,var10:int),
          P[<<range_1039@8:2>@24:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int),
          ((<<<<range_1039@8:2>@24:1>@40:1>@55:0> = <range_1039@8:0>) &&
           (((1 + var10) = <<range_1039@8:2>@24:0>) &&
            ((var9 = (1 + <range_1039@8:0>)) &&
             ((<range_1039@8:0> <= <range_1039@8:1>) && (<<<range_1039@8:2>@24:1>@40:0> = 0)))))
          |- P[<<<<range_1039@8:2>@24:1>@40:1>@55:0>](<range_1039@8:0>:int,
                                                      <range_1039@8:1>:int,
                                                      <<range_1039@8:2>@24:0>:int,
                                                      <<<range_1039@8:2>@24:1>@40:0>:int,
                                                      <<<<range_1039@8:2>@24:1>@40:1>@55:0>:int)
          
          P[<<range_1039@8:2>@24:0>](var11:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int),
          P[<<fold_left_1033@28:3>@36:0>](var12:int,<<range_1039@8:2>@24:0>:int,<<<range_1039@8:2>@24:1>@40:0>:int),
          P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int),
          ((var12 = 0) && ((var11 = 1) && (<range_1039@8:0> = 1)))
          |- P[<<<range_1039@8:2>@24:1>@40:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,
                                               <<range_1039@8:2>@24:0>:int,
                                               <<<range_1039@8:2>@24:1>@40:0>:int)
          
          P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,<fold_left_1033@28:2>:int),
          ((<fold_left_1033@28:2> >= 1) && (<<fold_left_1033@28:3>@36:0> = 0))
          |- P[<<fold_left_1033@28:3>@36:0>](<fold_left_1033@28:1>:int,
                                             <fold_left_1033@28:2>:int,
                                             <<fold_left_1033@28:3>@36:0>:int)
          
          P[<<range_1039@8:2>@24:0>](var13:int,<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int),
          ((var13 = 1) && (<fold_left_1033@28:1> = 0))
          |- P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,<fold_left_1033@28:2>:int)
          
          P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int),
          P[<<range_1039@11:2>@14:0>](var14:int,<range_1039@8:1>:int,var15:int),
          (((1 + var15) = <<range_1039@8:2>@24:0>) &&
           ((var14 = (1 + <range_1039@8:0>)) && (<range_1039@8:0> <= <range_1039@8:1>)))
          |- P[<<range_1039@8:2>@24:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,
                                        <<range_1039@8:2>@24:0>:int)
          
          P[<range_1039@11:1>](<range_1039@11:0>:int,<range_1039@11:1>:int),
          ((<range_1039@11:0> > <range_1039@11:1>) && (<<range_1039@11:2>@14:0> = 0))
          |- P[<<range_1039@11:2>@14:0>](<range_1039@11:0>:int,<range_1039@11:1>:int,
                                         <<range_1039@11:2>@14:0>:int)
          
          P[<range_1039@8:1>](var16:int,<range_1039@11:1>:int),
          (((1 + var16) = <range_1039@11:0>) && (<range_1039@11:0> <= (1 + <range_1039@11:1>)))
          |- P[<range_1039@11:1>](<range_1039@11:0>:int,<range_1039@11:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1786_sep_76_sep_0($36)) -> 1=0.
(($36-1=0) & ($37=0)) & (v_sep_div_1030_sep_73_sep_1($38,$37)) -> v_sep_fail_1786_sep_76_sep_0($36).
(($38-10000=0) & ($39-1=0)) & (v_sep_fold_left_1033_sep_28_sep_0_sep_69_sep_1($40,$41)) & (v_sep_range_1039_sep_8_sep_2_sep_24_sep_0($39,$42,$43)) -> v_sep_div_1030_sep_73_sep_1($38,$41).
(($44=0) & (-$45+1<=0)) & (v_sep_fold_left_1033_sep_28_sep_2($46,$45)) & (v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_1_sep_59_sep_0($46,$45,$44,$47)) -> v_sep_fold_left_1033_sep_28_sep_0_sep_69_sep_1($46,$47).
(($48=0) & ($49-1=0) & ($50-1=0)) & (v_sep_fold_left_1033_sep_28_sep_2($48,$51)) & (v_sep_range_1039_sep_8_sep_2_sep_24_sep_0($50,$52,$51)) & (v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0($49,$52,$51,$53,$54)) -> v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_1_sep_59_sep_0($48,$51,$53,$54).
(($55=0) & ($56-$57<=0) & (-$56+$58-1=0) & ($59-$60+1=0) & (-$56+$61=0)) & (v_sep_range_1039_sep_8_sep_2_sep_24_sep_0($56,$57,$60)) & (v_sep_range_1039_sep_11_sep_2_sep_14_sep_0($58,$57,$59)) & (v_sep_range_1039_sep_8_sep_1($56,$57)) & (v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_0($56,$57,$60,$55)) -> v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0($56,$57,$60,$55,$61).
(($56-1=0) & ($62-1=0) & ($63=0)) & (v_sep_range_1039_sep_8_sep_1($56,$57)) & (v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_0($63,$60,$55)) & (v_sep_range_1039_sep_8_sep_2_sep_24_sep_0($62,$57,$60)) -> v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_0($56,$57,$60,$55).
(($53=0) & ($51-1>=0)) & (v_sep_fold_left_1033_sep_28_sep_2($48,$51)) -> v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_0($48,$51,$53).
(($48=0) & ($64-1=0)) & (v_sep_range_1039_sep_8_sep_2_sep_24_sep_0($64,$52,$51)) -> v_sep_fold_left_1033_sep_28_sep_2($48,$51).
(($56-$57<=0) & (-$56+$65-1=0) & (-$60+$66+1=0)) & (v_sep_range_1039_sep_11_sep_2_sep_14_sep_0($65,$57,$66)) & (v_sep_range_1039_sep_8_sep_1($56,$57)) -> v_sep_range_1039_sep_8_sep_2_sep_24_sep_0($56,$57,$60).
(($67=0) & ($68-$69>0)) & (v_sep_range_1039_sep_11_sep_1($68,$69)) -> v_sep_range_1039_sep_11_sep_2_sep_14_sep_0($68,$69,$67).
(($68-$69-1<=0) & (-$68+$70+1=0)) & (v_sep_range_1039_sep_8_sep_1($70,$69)) -> v_sep_range_1039_sep_11_sep_1($68,$69).
$56-1=0 -> v_sep_range_1039_sep_8_sep_1($56,$57).


v_sep_div_1030_sep_73_sep_1: X
v_sep_fail_1786_sep_76_sep_0: X
v_sep_fold_left_1033_sep_28_sep_0_sep_69_sep_1: X
v_sep_fold_left_1033_sep_28_sep_2: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_0: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_1_sep_59_sep_0: X
v_sep_range_1039_sep_11_sep_1: X
v_sep_range_1039_sep_11_sep_2_sep_14_sep_0: X
v_sep_range_1039_sep_8_sep_1: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
.......................
v_sep_div_1030_sep_73_sep_1: X
v_sep_fail_1786_sep_76_sep_0: X
v_sep_fold_left_1033_sep_28_sep_0_sep_69_sep_1: X
v_sep_fold_left_1033_sep_28_sep_2: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_0: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_1_sep_59_sep_0: X
v_sep_range_1039_sep_11_sep_1: X
v_sep_range_1039_sep_11_sep_2_sep_14_sep_0: X
v_sep_range_1039_sep_8_sep_1: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
...
v_sep_div_1030_sep_73_sep_1: X
v_sep_fail_1786_sep_76_sep_0: X
v_sep_fold_left_1033_sep_28_sep_0_sep_69_sep_1: X
v_sep_fold_left_1033_sep_28_sep_2: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_0: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_1_sep_59_sep_0: X
v_sep_range_1039_sep_11_sep_1: X
v_sep_range_1039_sep_11_sep_2_sep_14_sep_0: X
v_sep_range_1039_sep_8_sep_1: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
.....
v_sep_div_1030_sep_73_sep_1: X
v_sep_fail_1786_sep_76_sep_0: X
v_sep_fold_left_1033_sep_28_sep_0_sep_69_sep_1: X
v_sep_fold_left_1033_sep_28_sep_2: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_0: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_1_sep_59_sep_0: X
v_sep_range_1039_sep_11_sep_1: X
v_sep_range_1039_sep_11_sep_2_sep_14_sep_0: X
v_sep_range_1039_sep_8_sep_1: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
.........
v_sep_div_1030_sep_73_sep_1: X
v_sep_fail_1786_sep_76_sep_0: X
v_sep_fold_left_1033_sep_28_sep_0_sep_69_sep_1: X
v_sep_fold_left_1033_sep_28_sep_2: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_0: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_1_sep_59_sep_0: X
v_sep_range_1039_sep_11_sep_1: X
v_sep_range_1039_sep_11_sep_2_sep_14_sep_0: X
v_sep_range_1039_sep_8_sep_1: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
..............
v_sep_div_1030_sep_73_sep_1: X
v_sep_fail_1786_sep_76_sep_0: X
v_sep_fold_left_1033_sep_28_sep_0_sep_69_sep_1: X
v_sep_fold_left_1033_sep_28_sep_2: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_0: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_1_sep_59_sep_0: X
v_sep_range_1039_sep_11_sep_1: X
v_sep_range_1039_sep_11_sep_2_sep_14_sep_0: X
v_sep_range_1039_sep_8_sep_1: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
...................
v_sep_div_1030_sep_73_sep_1: X
v_sep_fail_1786_sep_76_sep_0: X
v_sep_fold_left_1033_sep_28_sep_0_sep_69_sep_1: X
v_sep_fold_left_1033_sep_28_sep_2: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_0: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_1_sep_59_sep_0: X
v_sep_range_1039_sep_11_sep_1: X
v_sep_range_1039_sep_11_sep_2_sep_14_sep_0: X
v_sep_range_1039_sep_8_sep_1: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
......................
v_sep_div_1030_sep_73_sep_1: X
v_sep_fail_1786_sep_76_sep_0: X
v_sep_fold_left_1033_sep_28_sep_0_sep_69_sep_1: X
v_sep_fold_left_1033_sep_28_sep_2: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_0: X
v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_1_sep_59_sep_0: X
v_sep_range_1039_sep_11_sep_1: X
v_sep_range_1039_sep_11_sep_2_sep_14_sep_0: X
v_sep_range_1039_sep_8_sep_1: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_0: X
v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
.......................(0=0) & (v_sep_fail_1786_sep_76_sep_0($36)) -> 1=0.
(($36-1=0) & ($37=0)) & (v_sep_div_1030_sep_73_sep_1($38,$37)) -> v_sep_fail_1786_sep_76_sep_0($36).
(($38-10000=0) & ($39-1=0)) & (v_sep_fold_left_1033_sep_28_sep_0_sep_69_sep_1($40,$41)) & (v_sep_range_1039_sep_8_sep_2_sep_24_sep_0($39,$42,$43)) -> v_sep_div_1030_sep_73_sep_1($38,$41).
(($44=0) & (-$45+1<=0)) & (v_sep_fold_left_1033_sep_28_sep_2($46,$45)) & (v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_1_sep_59_sep_0($46,$45,$44,$47)) -> v_sep_fold_left_1033_sep_28_sep_0_sep_69_sep_1($46,$47).
(($48=0) & ($49-1=0) & ($50-1=0)) & (v_sep_fold_left_1033_sep_28_sep_2($48,$51)) & (v_sep_range_1039_sep_8_sep_2_sep_24_sep_0($50,$52,$51)) & (v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0($49,$52,$51,$53,$54)) -> v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_1_sep_59_sep_0($48,$51,$53,$54).
(($55=0) & ($56-$57<=0) & (-$56+$58-1=0) & ($59-$60+1=0) & (-$56+$61=0)) & (v_sep_range_1039_sep_8_sep_2_sep_24_sep_0($56,$57,$60)) & (v_sep_range_1039_sep_11_sep_2_sep_14_sep_0($58,$57,$59)) & (v_sep_range_1039_sep_8_sep_1($56,$57)) & (v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_0($56,$57,$60,$55)) -> v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0($56,$57,$60,$55,$61).
(($56-1=0) & ($62-1=0) & ($63=0)) & (v_sep_range_1039_sep_8_sep_1($56,$57)) & (v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_0($63,$60,$55)) & (v_sep_range_1039_sep_8_sep_2_sep_24_sep_0($62,$57,$60)) -> v_sep_range_1039_sep_8_sep_2_sep_24_sep_1_sep_40_sep_0($56,$57,$60,$55).
(($53=0) & ($51-1>=0)) & (v_sep_fold_left_1033_sep_28_sep_2($48,$51)) -> v_sep_fold_left_1033_sep_28_sep_3_sep_36_sep_0($48,$51,$53).
(($48=0) & ($64-1=0)) & (v_sep_range_1039_sep_8_sep_2_sep_24_sep_0($64,$52,$51)) -> v_sep_fold_left_1033_sep_28_sep_2($48,$51).
(($56-$57<=0) & (-$56+$65-1=0) & (-$60+$66+1=0)) & (v_sep_range_1039_sep_11_sep_2_sep_14_sep_0($65,$57,$66)) & (v_sep_range_1039_sep_8_sep_1($56,$57)) -> v_sep_range_1039_sep_8_sep_2_sep_24_sep_0($56,$57,$60).
(($67=0) & ($68-$69>0)) & (v_sep_range_1039_sep_11_sep_1($68,$69)) -> v_sep_range_1039_sep_11_sep_2_sep_14_sep_0($68,$69,$67).
(($68-$69-1<=0) & (-$68+$70+1=0)) & (v_sep_range_1039_sep_8_sep_1($70,$69)) -> v_sep_range_1039_sep_11_sep_1($68,$69).
$56-1=0 -> v_sep_range_1039_sep_8_sep_1($56,$57).

           (<range_1039@8:0> = 1) |- P[<range_1039@8:1>](<range_1039@8:0>:int,
                                                         <range_1039@8:1>:int)
        solution:
          P[<div_1030@73:1>]($74:int,$76:int) = (1 <= $76)
          P[<fail_1786@76:0>]($71:bool) = false
          P[<<fold_left_1033@28:0>@69:1>]($79:int,$81:int) = (1 <= $81)
          P[<fold_left_1033@28:2>]($91:int,$93:int) = true
          P[<<fold_left_1033@28:3>@36:0>]($137:int,$139:int,$141:int) = true
          P[<<<fold_left_1033@28:3>@36:1>@59:0>]($96:int,$98:int,$100:int,$102:int) = (1 <= $102)
          P[<range_1039@11:1>]($144:int,$146:int) = true
          P[<<range_1039@11:2>@14:0>]($116:int,$118:int,$120:int) = true
          P[<range_1039@8:1>]($123:int,$125:int) = true
          P[<<range_1039@8:2>@24:0>]($84:int,$86:int,$88:int) = true
          P[<<<range_1039@8:2>@24:1>@40:0>]($128:int,$130:int,$132:int,$134:int) = (1 <= $128)
          P[<<<<range_1039@8:2>@24:1>@40:1>@55:0>]($105:int,$107:int,$109:int,$111:int,$113:int) = (1 <= $113)
        
      end HcSolver.solve_ub(7548)[4] (0.093985 sec.)
      begin HcSolver.check_validity(8280)[4]
        input:
          P[<fail_1786@76:0>](<fail_1786@76:0>:bool)|- bot
          
          P[<div_1030@73:1>](<div_1030@73:0>:int,0:int), <fail_1786@76:0> |- P[<fail_1786@76:0>](<fail_1786@76:0>:bool)
          
          P[<<range_1039@8:2>@24:0>](1:int,<f_harmonic_1780@71:0>:int,<f_harmonic_1780@71:1>:int),
          P[<<fold_left_1033@28:0>@69:1>](<f_harmonic_1780@71:2>:int,<div_1030@73:1>:int), (
          <div_1030@73:0> = 10000) |- P[<div_1030@73:1>](<div_1030@73:0>:int,
                                                         <div_1030@73:1>:int)
          
          P[<<<fold_left_1033@28:3>@36:1>@59:0>](<<fold_left_1033@28:0>@69:0>:int,var3:int,0:int,<<fold_left_1033@28:0>@69:1>:int),
          P[<fold_left_1033@28:2>](<<fold_left_1033@28:0>@69:0>:int,var3:int), (
          1 <= var3)
          |- P[<<fold_left_1033@28:0>@69:1>](<<fold_left_1033@28:0>@69:0>:int,
                                             <<fold_left_1033@28:0>@69:1>:int)
          
          P[<<<<range_1039@8:2>@24:1>@40:1>@55:0>](1:int,<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int,<<fold_left_1033@28:3>@36:0>:int,<<<fold_left_1033@28:3>@36:1>@59:0>:int),
          P[<<range_1039@8:2>@24:0>](1:int,<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int),
          P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,<fold_left_1033@28:2>:int), (
          <fold_left_1033@28:1> = 0)
          |- P[<<<fold_left_1033@28:3>@36:1>@59:0>](<fold_left_1033@28:1>:int,
                                                    <fold_left_1033@28:2>:int,
                                                    <<fold_left_1033@28:3>@36:0>:int,
                                                    <<<fold_left_1033@28:3>@36:1>@59:0>:int)
          
          P[<<<range_1039@8:2>@24:1>@40:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int,<<<range_1039@8:2>@24:1>@40:0>:int),
          P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int),
          P[<<range_1039@11:2>@14:0>]((1 + <range_1039@8:0>):int,<range_1039@8:1>:int,(
                                      -1 + <<range_1039@8:2>@24:0>):int),
          P[<<range_1039@8:2>@24:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int),
          ((<<<range_1039@8:2>@24:1>@40:0> = 0) &&
           ((<range_1039@8:0> <= <range_1039@8:1>) && (<<<<range_1039@8:2>@24:1>@40:1>@55:0> = <range_1039@8:0>)))
          |- P[<<<<range_1039@8:2>@24:1>@40:1>@55:0>](<range_1039@8:0>:int,
                                                      <range_1039@8:1>:int,
                                                      <<range_1039@8:2>@24:0>:int,
                                                      <<<range_1039@8:2>@24:1>@40:0>:int,
                                                      <<<<range_1039@8:2>@24:1>@40:1>@55:0>:int)
          
          P[<<range_1039@8:2>@24:0>](1:int,<range_1039@8:1>:int,<<range_1039@8:2>@24:0>:int),
          P[<<fold_left_1033@28:3>@36:0>](0:int,<<range_1039@8:2>@24:0>:int,<<<range_1039@8:2>@24:1>@40:0>:int),
          P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int), (
          <range_1039@8:0> = 1)
          |- P[<<<range_1039@8:2>@24:1>@40:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,
                                               <<range_1039@8:2>@24:0>:int,
                                               <<<range_1039@8:2>@24:1>@40:0>:int)
          
          P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,<fold_left_1033@28:2>:int),
          ((<<fold_left_1033@28:3>@36:0> = 0) && (<fold_left_1033@28:2> >= 1))
          |- P[<<fold_left_1033@28:3>@36:0>](<fold_left_1033@28:1>:int,
                                             <fold_left_1033@28:2>:int,
                                             <<fold_left_1033@28:3>@36:0>:int)
          
          P[<<range_1039@8:2>@24:0>](1:int,<f_harmonic_1779@26:0>:int,<fold_left_1033@28:2>:int),
          (<fold_left_1033@28:1> = 0) |- P[<fold_left_1033@28:2>](<fold_left_1033@28:1>:int,
                                                                  <fold_left_1033@28:2>:int)
          
          P[<range_1039@8:1>](<range_1039@8:0>:int,<range_1039@8:1>:int),
          P[<<range_1039@11:2>@14:0>]((1 + <range_1039@8:0>):int,<range_1039@8:1>:int,(
                                      -1 + <<range_1039@8:2>@24:0>):int), (
          <range_1039@8:0> <= <range_1039@8:1>)
          |- P[<<range_1039@8:2>@24:0>](<range_1039@8:0>:int,<range_1039@8:1>:int,
                                        <<range_1039@8:2>@24:0>:int)
          
          P[<range_1039@11:1>](<range_1039@11:0>:int,<range_1039@11:1>:int),
          ((<<range_1039@11:2>@14:0> = 0) && (<range_1039@11:0> > <range_1039@11:1>))
          |- P[<<range_1039@11:2>@14:0>](<range_1039@11:0>:int,<range_1039@11:1>:int,
                                         <<range_1039@11:2>@14:0>:int)
          
          P[<range_1039@8:1>]((-1 + <range_1039@11:0>):int,<range_1039@11:1>:int),
          (<range_1039@11:0> <= (1 + <range_1039@11:1>))
          |- P[<range_1039@11:1>](<range_1039@11:0>:int,<range_1039@11:1>:int)
          
           (<range_1039@8:0> = 1) |- P[<range_1039@8:1>](<range_1039@8:0>:int,
                                                         <range_1039@8:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(8280)[4] (0.009999 sec.)
      solution:
        P[<div_1030@73:1>]($74:int,$76:int) = (1 <= $76)
        P[<fail_1786@76:0>]($71:bool) = false
        P[<<fold_left_1033@28:0>@69:1>]($79:int,$81:int) = (1 <= $81)
        P[<fold_left_1033@28:2>]($91:int,$93:int) = true
        P[<<fold_left_1033@28:3>@36:0>]($137:int,$139:int,$141:int) = true
        P[<<<fold_left_1033@28:3>@36:1>@59:0>]($96:int,$98:int,$100:int,$102:int) = (1 <= $102)
        P[<range_1039@11:1>]($144:int,$146:int) = true
        P[<<range_1039@11:2>@14:0>]($116:int,$118:int,$120:int) = true
        P[<range_1039@8:1>]($123:int,$125:int) = true
        P[<<range_1039@8:2>@24:0>]($84:int,$86:int,$88:int) = true
        P[<<<range_1039@8:2>@24:1>@40:0>]($128:int,$130:int,$132:int,$134:int) = (1 <= $128)
        P[<<<<range_1039@8:2>@24:1>@40:1>@55:0>]($105:int,$107:int,$109:int,$111:int,$113:int) = (1 <= $113)
    end YhornInterface.solve(7547)[3] (0.103984 sec.)
    
  end RefTypeInfer.infer_etrs(289)[2] (0.211968 sec.)
  refinement types:
    main_1771: X
    f_1782: v1:int -> X
    harmonic_1043: v1:int -> (v2:int -> X) -> X
    range_1039: v1:int ->
                v2:int -> (v3:int -> (v4:{v4:int | (1 <= v1)} -> (v5:{v5:int | (1 <= v5)} -> X) -> X) -> X) -> X
    range_1039: v1:int -> v2:int -> (v3:int -> (v4:int -> (v5:int -> X) -> X) -> X) -> X
    f_range_1777: v1:int ->
                  v2:int ->
                  (v3:int -> (v4:int -> (v5:int -> X) -> X) -> X) -> v9:int -> (v10:int -> (v11:int -> X) -> X) -> X
    cons_range_1157: v1:int ->
                     v2:int ->
                     v3:int ->
                     v4:int ->
                     v5:int ->
                     (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> (v12:int -> X) -> X) -> X) -> X
    f_harmonic_1779: v1:int -> (v2:int -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    fold_left_1033: (v1:int -> v2:{v2:int | (1 <= v2)} -> (v3:int -> X) -> X) ->
                    v6:int -> v7:int -> (v8:int -> (v9:{v9:int | (1 <= v9)} -> X) -> X) -> (v12:int -> X) -> X
    br_fold_left_1784: v1:bool ->
                       (v2:int -> v3:int -> (v4:int -> X) -> X) ->
                       v7:int -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> (v13:int -> X) -> X
    f_cons_range_1778: v1:int ->
                       v2:int ->
                       v3:int -> v4:int -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> v10:int -> (v11:int -> X) -> X
    f_fold_left_1773: v1:int ->
                      v2:int ->
                      (v3:int -> v4:int -> (v5:int -> X) -> X) ->
                      (v8:int -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    f_harmonic_1780: v1:int -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> X
    div_1030: v1:int -> v2:{v2:int | (1 <= v2)} -> (v3:int -> X) -> X
    fail_1786: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1783: var61:int -> var60:int -> X
    f_fold_left_1774: var77:int ->
                      var76:int ->
                      var75:int ->
                      (var74:int -> var73:int -> (var72:int -> X) -> X) ->
                      (var69:int -> X) -> (var67:int -> (var66:int -> X) -> X) -> var63:int -> X
    f_fold_left_1775: var89:int ->
                      var88:int ->
                      var87:int ->
                      var86:int -> (var85:int -> (var84:int -> X) -> X) -> var81:int -> (var80:int -> X) -> X
    f_harmonic_1781: var97:int -> var96:int -> var95:int -> var94:int -> (var93:int -> X) -> var91:int -> X
    f_k_div_u_1772: var104:int -> var103:unit -> var102:int -> (var101:int -> X) -> var99:int -> X
    f_range_1776: var110:int -> var109:int -> var108:int -> (var107:int -> X) -> X
    k_div_u_1221: var116:int -> var115:int -> (var114:int -> X) -> var112:unit -> X
  abstraction types:
    main_1771: X
    f_1782: v1:int -> X
    harmonic_1043: v1:int -> (v2:int -> X) -> X
    range_1039: var117:int ->
                var118:int ->
                (var119:int ->
                 (var120:int[var120 -> (1 <= var117)] -> (var121:int[var121 -> (
                                                                    1 <= var121)] -> X) -> X) -> X) -> X
    f_range_1777: v1:int ->
                  v2:int ->
                  (v3:int -> (v4:int -> (v5:int -> X) -> X) -> X) -> v9:int -> (v10:int -> (v11:int -> X) -> X) -> X
    cons_range_1157: v1:int ->
                     v2:int ->
                     v3:int ->
                     v4:int ->
                     v5:int ->
                     (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> (v12:int -> X) -> X) -> X) -> X
    f_harmonic_1779: v1:int -> (v2:int -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    fold_left_1033: (v1:int -> v2:int[v2 -> (1 <= v2)] -> (v3:int -> X) -> X) ->
                    v6:int -> v7:int -> (v8:int -> (v9:int[v9 -> (1 <= v9)] -> X) -> X) -> (v12:int -> X) -> X
    br_fold_left_1784: v1:bool ->
                       (v2:int -> v3:int -> (v4:int -> X) -> X) ->
                       v7:int -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> (v13:int -> X) -> X
    f_cons_range_1778: v1:int ->
                       v2:int ->
                       v3:int -> v4:int -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> v10:int -> (v11:int -> X) -> X
    f_fold_left_1773: v1:int ->
                      v2:int ->
                      (v3:int -> v4:int -> (v5:int -> X) -> X) ->
                      (v8:int -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    f_harmonic_1780: v1:int -> v2:int -> v3:int -> v4:int -> (v5:int -> X) -> X
    div_1030: v1:int -> v2:int[v2 -> (1 <= v2)] -> (v3:int -> X) -> X
    fail_1786: v1:bool -> (v2:unit -> X) -> X
    f_1783: var61:int -> var60:int -> X
    f_fold_left_1774: var77:int ->
                      var76:int ->
                      var75:int ->
                      (var74:int -> var73:int -> (var72:int -> X) -> X) ->
                      (var69:int -> X) -> (var67:int -> (var66:int -> X) -> X) -> var63:int -> X
    f_fold_left_1775: var89:int ->
                      var88:int ->
                      var87:int ->
                      var86:int -> (var85:int -> (var84:int -> X) -> X) -> var81:int -> (var80:int -> X) -> X
    f_harmonic_1781: var97:int -> var96:int -> var95:int -> var94:int -> (var93:int -> X) -> var91:int -> X
    f_k_div_u_1772: var104:int -> var103:unit -> var102:int -> (var101:int -> X) -> var99:int -> X
    f_range_1776: var110:int -> var109:int -> var108:int -> (var107:int -> X) -> X
    k_div_u_1221: var116:int -> var115:int -> (var114:int -> X) -> var112:unit -> X
  
end AbsTypeInfer.refine(288)[1] (0.236964 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 0; 0; 1; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1771
  main_1771 -> (rand_int f_1782)
  br_fold_left_1784 b_1785 f_1034 acc_1035 xs1_1036 xs2_1036 k_fold_left_1289 when b_1785 ->
      (xs2_1036 0 (f_fold_left_1773 acc_1035 xs1_1036 f_1034 k_fold_left_1289 xs2_1036))
  br_fold_left_1784 b_1785 f_1034 acc_1035 xs1_1036 xs2_1036 k_fold_left_1289 when (not b_1785) -> _|_
  cons_range_1157 i_1040 j_1041 x1_1469 x_1155 xs1_1156 xs2_1156 k_range_cons_range_1539 ->
      (k_range_cons_range_1539 (xs1_1156 + 1) (f_cons_range_1778 i_1040 j_1041 x1_1469 x_1155 xs1_1156 xs2_1156))
  div_1030 x_1031 y_1032 k_div_1208 when (not (y_1032 = 0)) -> (k_div_u_1221 x_1031 y_1032 k_div_1208 ())
  div_1030 x_1031 y_1032 k_div_1208 when (not (not (y_1032 = 0))) ->
      (fail_1786 true (k_div_u_1221 x_1031 y_1032 k_div_1208))
  f_1782 x_1705 -> (harmonic_1043 x_1705 (f_1783 x_1705))
  f_1783 x_1705 x_1702 -> end
  f_cons_range_1778 i_1040 j_1041 x1_1469 x_1155 xs1_1156 xs2_1156 i_1154 k_range_cons_range_1554 when (
      i_1154 = 0) -> (k_range_cons_range_1554 x_1155)
  f_cons_range_1778 i_1040 j_1041 x1_1469 x_1155 xs1_1156 xs2_1156 i_1154 k_range_cons_range_1554 when (
      not (i_1154 = 0)) -> (xs2_1156 (i_1154 - 1) k_range_cons_range_1554)
  f_fold_left_1773 acc_1035 xs1_1036 f_1034 k_fold_left_1289 xs2_1036 x_1336 ->
      (f_1034 acc_1035 x_1336 (f_fold_left_1774 acc_1035 x_1336 xs1_1036 f_1034 k_fold_left_1289 xs2_1036))
  f_fold_left_1774 acc_1035 x_1336 xs1_1036 f_1034 k_fold_left_1289 xs2_1036 x_1390 ->
      (fold_left_1033 f_1034 x_1390 (xs1_1036 - 1) (f_fold_left_1775 acc_1035 x_1336 x_1390 xs1_1036 xs2_1036)
        k_fold_left_1289)
  f_fold_left_1775 acc_1035 x_1336 x_1390 xs1_1036 xs2_1036 x_1120 k_fold_left_xs'_1322 ->
      (xs2_1036 (x_1120 + 1) k_fold_left_xs'_1322)
  f_harmonic_1779 n_1044 k_harmonic_1622 x1_1628 x2_1628 ->
      (fold_left_1033 (f_harmonic_1780 n_1044 x1_1628) 0 x1_1628 x2_1628 k_harmonic_1622)
  f_harmonic_1780 n_1044 x1_1628 s_1046 k_1047 k_harmonic_1668 ->
      (div_1030 10000 k_1047 (f_harmonic_1781 k_1047 n_1044 s_1046 x1_1628 k_harmonic_1668))
  f_harmonic_1781 k_1047 n_1044 s_1046 x1_1628 k_harmonic_1668 x_1672 -> (k_harmonic_1668 (s_1046 + x_1672))
  f_k_div_u_1772 x_1031 x_1211 y_1032 k_div_1208 x_1226 -> (k_div_1208 (1 + x_1226))
  f_range_1776 i_1040 j_1041 x_1161 k_range_1457 -> _|_
  f_range_1777 i_1040 j_1041 k_range_1445 x1_1469 x2_1469 ->
      (cons_range_1157 i_1040 j_1041 x1_1469 i_1040 x1_1469 x2_1469 k_range_1445)
  fail_1786 b k -> {fail} => (k ())
  fold_left_1033 f_1034 acc_1035 xs1_1036 xs2_1036 k_fold_left_1289 when (xs1_1036 = 0) -> (k_fold_left_1289 acc_1035)
  fold_left_1033 f_1034 acc_1035 xs1_1036 xs2_1036 k_fold_left_1289 when (
      not (xs1_1036 = 0)) -> (br_fold_left_1784 (1 <= xs1_1036) f_1034 acc_1035 xs1_1036 xs2_1036 k_fold_left_1289)
  harmonic_1043 n_1044 k_harmonic_1622 -> (range_1039 1 n_1044 (f_harmonic_1779 n_1044 k_harmonic_1622))
  k_div_u_1221 x_1031 y_1032 k_div_1208 x_1211 when (x_1031 < y_1032) -> (k_div_1208 0)
  k_div_u_1221 x_1031 y_1032 k_div_1208 x_1211 when (not (x_1031 < y_1032)) ->
      (div_1030 (x_1031 - y_1032) y_1032 (f_k_div_u_1772 x_1031 x_1211 y_1032 k_div_1208))
  range_1039 i_1040 j_1041 k_range_1445 when (i_1040 > j_1041) -> (k_range_1445 0 (f_range_1776 i_1040 j_1041))
  range_1039 i_1040 j_1041 k_range_1445 when (not (i_1040 > j_1041)) ->
      (range_1039 (i_1040 + 1) j_1041 (f_range_1777 i_1040 j_1041 k_range_1445))
Types:
  main_1771 : X
  div_1030 : (int -> x_2:int[x_2 >= 1] -> (int -> X) -> X)
  fail_1786 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fold_left_1033 : ((int -> x_3:int[x_3 >= 1] -> (int -> X) -> X) ->
                    int -> int -> (int -> (x_13:int[x_13 >= 1] -> X) -> X) -> (int -> X) -> X)
  range_1039 : (x_1:int -> int -> (int -> (int[x_1 >= 1] -> (x_8:int[x_8 >= 1] -> X) -> X) -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  div: (int -> ({x_2:int | x_2 >= 1} -> int))
  fold_left: ((Top -> (int -> ((Bottom list) -> int))) /\ 
              ((int -> ({x_15:int | x_15 >= 1} -> int)) -> (int -> (({x_13:int | x_13 >= 1} list) -> int))))
  range: (x_1:int -> (int -> ([x_4:x_1 >= 1] {x_5:int | x_5 >= 1} list)))

cycles: 1
total: 0.574 sec
  abst: 0.022 sec
  mc: 0.029 sec
  refine: 0.242 sec
    exparam: 0.052 sec
