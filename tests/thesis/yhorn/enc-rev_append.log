MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn enc-rev_append.ml

parsed::
 let rec append_1030 x_1031 y_1032 = if x_1031 = 0 then
                                       y_1032
                                     else
                                       1 + append_1030 (x_1031 - 1) y_1032 
 in
 let rec rev_1033 n_1034 = if n_1034 = 0 then
                             0
                           else
                             append_1030 (rev_1033 (n_1034 - 1)) 1 
 in
 let main_1035 n_1036 m_1037 =
   let u_1074 = if rev_1033 n_1036 = n_1036 then
                  ()
                else
                  {fail} () 
   in
     if append_1030 n_1036 m_1037 = n_1036 + m_1037 then
       ()
     else
       {fail} () 
 in
   ()

set_target::
 let rec append_1030 x_1031 y_1032 = if x_1031 = 0 then
                                       y_1032
                                     else
                                       1 + append_1030 (x_1031 - 1) y_1032 
 in
 let rec rev_1033 n_1034 = if n_1034 = 0 then
                             0
                           else
                             append_1030 (rev_1033 (n_1034 - 1)) 1 
 in
 let main_1035 n_1036 m_1037 =
   let u_1074 = if rev_1033 n_1036 = n_1036 then
                  ()
                else
                  {fail} () 
   in
     if append_1030 n_1036 m_1037 = n_1036 + m_1037 then
       ()
     else
       {fail} () 
 in
 let main_1077 = let arg1_1075 = rand_int () 
                 in
                 let arg2_1076 = rand_int () 
                 in
                   main_1035 arg1_1075 arg2_1076 
 in
   ()

CPS::
 let rec append_1030 (x_1031:int) (y_1032:int) (k_append_1105:(int -> X)) =
   if x_1031 = 0 then
     k_append_1105 y_1032
   else
     append_1030 (x_1031 - 1) y_1032 (fun x_1109 -> k_append_1105 (1 + x_1109)) 
 in
 let rec rev_1033 (n_1034:int) (k_rev_1138:(int -> X)) =
   if n_1034 = 0 then
     k_rev_1138 0
   else
     rev_1033 (n_1034 - 1) (fun x_1163 -> append_1030 x_1163 1 k_rev_1138) 
 in
 let main_1035 (n_1036:int) (m_1037:int) (k_main_1191:(unit -> X)) =
   let k_main_u_1218 (x_1194:unit) =
     append_1030 n_1036 m_1037
       (fun x_1222 -> (if x_1222 = n_1036 + m_1037 then
                         k_main_1191 ()
                       else
                         {|fail|} () k_main_1191)) 
   in
     rev_1033 n_1036 (fun x_1197 -> (if x_1197 = n_1036 then
                                       k_main_u_1218 ()
                                     else
                                       {|fail|} () k_main_u_1218)) 
 in
   rand_int_cps () (fun x_1251 -> rand_int_cps () (fun x_1264 -> main_1035 x_1251 x_1264 (fun x_1248 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1293
  main_1293 -> (rand_int f_1298)
  append_1030 x_1031 y_1032 k_append_1105 when (x_1031 = 0) -> (k_append_1105 y_1032)
  append_1030 x_1031 y_1032 k_append_1105 when (not (x_1031 = 0)) ->
      (append_1030 (x_1031 - 1) y_1032 (f_append_1294 x_1031 y_1032 k_append_1105))
  f_1298 x_1251 -> (rand_int (f_1299 x_1251))
  f_1299 x_1251 x_1264 -> (main_1035 x_1251 x_1264 (f_1300 x_1251 x_1264))
  f_1300 x_1251 x_1264 x_1248 -> end
  f_append_1294 x_1031 y_1032 k_append_1105 x_1109 -> (k_append_1105 (1 + x_1109))
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (x_1222 = (n_1036 + m_1037)) -> (k_main_1191 ())
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (not (x_1222 = (n_1036 + m_1037))) ->
      (fail_1301 true k_main_1191)
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (x_1197 = n_1036) -> (k_main_u_1218 m_1037 n_1036 k_main_1191 ())
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (not (x_1197 = n_1036)) ->
      (fail_1302 true (k_main_u_1218 m_1037 n_1036 k_main_1191))
  f_rev_1295 n_1034 k_rev_1138 x_1163 -> (append_1030 x_1163 1 k_rev_1138)
  fail_1301 b k -> {fail} => (k ())
  fail_1302 b k -> {fail} => (k ())
  k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 ->
      (append_1030 n_1036 m_1037 (f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191))
  main_1035 n_1036 m_1037 k_main_1191 -> (rev_1033 n_1036 (f_main_1297 m_1037 n_1036 k_main_1191))
  rev_1033 n_1034 k_rev_1138 when (n_1034 = 0) -> (k_rev_1138 0)
  rev_1033 n_1034 k_rev_1138 when (not (n_1034 = 0)) -> (rev_1033 (n_1034 - 1) (f_rev_1295 n_1034 k_rev_1138))
Types:
  main_1293 : X
  append_1030 : (int -> int -> (int -> X) -> X)
  fail_1301 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1302 : (x_1:bool[x_1] -> (unit -> X) -> X)
  rev_1033 : (int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1293 ... --> 
  f_1298 ... --> 
  f_1299 ... --> 
  main_1035 ... --> 
  rev_1033 [1/2] ... --> 
  f_main_1297 [2/2] ... --> 
  fail_1302 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(180)[1]
  program:
    main_1293  | true = ((Random.int 0) f_1298)
    append_1030 x_1031 y_1032 k_append_1105 | (x_1031 = 0) = (k_append_1105 y_1032)
    append_1030 x_1031 y_1032 k_append_1105 | (not (x_1031 = 0)) = (append_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    y_1032
                                                                    (
                                                                    f_append_1294 x_1031
                                                                    y_1032
                                                                    k_append_1105))
    f_1298 x_1251 | true = ((Random.int 0) (f_1299 x_1251))
    f_1299 x_1251 x_1264 | true = (main_1035 x_1251
                                             x_1264
                                             (f_1300 x_1251
                                                     x_1264))
    f_1300 x_1251 x_1264 x_1248 | true = end
    f_append_1294 x_1031 y_1032 k_append_1105 x_1109 | true = (k_append_1105 (
                                                                    1 + x_1109))
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (x_1222 = (n_1036 + m_1037)) = (
    k_main_1191 ())
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (not (x_1222 = (n_1036 + m_1037))) = (
    fail_1301 true
              k_main_1191)
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (x_1197 = n_1036) = (
    k_main_u_1218 m_1037
                  n_1036
                  k_main_1191
                  ())
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (not (x_1197 = n_1036)) = (
    fail_1302 true
              (k_main_u_1218 m_1037
                             n_1036
                             k_main_1191))
    f_rev_1295 n_1034 k_rev_1138 x_1163 | true = (append_1030 x_1163
                                                              1
                                                              k_rev_1138)
    fail_1301 b k | true = (fail ())
    fail_1302 b k | true = (fail ())
    k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 | true = (append_1030
                                                               n_1036
                                                               m_1037
                                                               (f_k_main_u_1296 m_1037
                                                                    n_1036
                                                                    x_1194
                                                                    k_main_1191))
    main_1035 n_1036 m_1037 k_main_1191 | true = (rev_1033 n_1036
                                                           (f_main_1297 m_1037
                                                                    n_1036
                                                                    k_main_1191))
    rev_1033 n_1034 k_rev_1138 | (n_1034 = 0) = (k_rev_1138 0)
    rev_1033 n_1034 k_rev_1138 | (not (n_1034 = 0)) = (rev_1033 (n_1034 - 1)
                                                                (f_rev_1295 n_1034
                                                                    k_rev_1138))
    main_1293:X
    append_1030:int -> int -> (int -> X) -> X
    f_1298:int -> X
    f_1299:int -> int -> X
    f_1300:int -> int -> unit -> X
    f_append_1294:int -> int -> (int -> X) -> int -> X
    f_k_main_u_1296:int -> int -> unit -> (unit -> X) -> int -> X
    f_main_1297:int -> int -> (unit -> X) -> int -> X
    f_rev_1295:int -> (int -> X) -> int -> X
    fail_1301:bool -> (unit -> X) -> X
    fail_1302:bool -> (unit -> X) -> X
    k_main_u_1218:int -> int -> (unit -> X) -> unit -> X
    main_1035:int -> int -> (unit -> X) -> X
    rev_1033:int -> (int -> X) -> X
  inlined functions: f_1298,f_1299,f_1300,f_append_1294,f_k_main_u_1296,f_main_1297,f_rev_1295,k_main_u_1218,main_1035
  counterexample: 0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1298@4:0> = var2)
     [true.nop((<f_1299@7:0> = <f_1298@4:0>) && (<f_1299@7:1> = var3))
      [true.((<main_1035@9:0> = <f_1299@7:0>) && (<main_1035@9:1> = <f_1299@7:1>))
       [true.(<rev_1033@11:0> = <main_1035@9:0>)
        [(<rev_1033@11:0> = 0).(<<rev_1033@11:1>@14:0> = 0)
         [true.
          ((<f_main_1297@16:0> = <main_1035@9:1>) &&
           ((<f_main_1297@16:1> = <main_1035@9:0>) && (<f_main_1297@16:3> = <<rev_1033@11:1>@14:0>)))
          [(not (<f_main_1297@16:3> = <f_main_1297@16:1>)).(<fail_1302@19:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(181)[2]
    horn clauses:
      P[<fail_1302@19:0>](<fail_1302@19:0>:bool)|- bot
      
      P[<f_main_1297@16:3>](<f_main_1297@16:0>:int,<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
      ((<f_main_1297@16:3> <> <f_main_1297@16:1>) && <fail_1302@19:0>) |- P[<fail_1302@19:0>](
      <fail_1302@19:0>:bool)
      
      P[<main_1035@9:1>](<f_main_1297@16:1>:int,<f_main_1297@16:0>:int),
      P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int)|- P[<f_main_1297@16:3>](
      <f_main_1297@16:0>:int,<f_main_1297@16:1>:int,<f_main_1297@16:3>:int)
      
      P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
      |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
      
      P[<main_1035@9:1>](<rev_1033@11:0>:int,<main_1035@9:1>:int)|- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
      
      P[<f_1299@7:1>](<main_1035@9:0>:int,<main_1035@9:1>:int)|- P[<main_1035@9:1>](
      <main_1035@9:0>:int,<main_1035@9:1>:int)
      
      P[<f_1298@4:0>](<f_1299@7:0>:int)|- P[<f_1299@7:1>](<f_1299@7:0>:int,
                                                          <f_1299@7:1>:int)
      
      |- P[<f_1298@4:0>](<f_1298@4:0>:int)
    call trees:
      <main_1293@1>
        <f_1298@4>
          <f_1299@7>
            <main_1035@9>
              <rev_1033@11>
              </<rev_1033@11:1>@14>
              <f_main_1297@16>
                <fail_1302@19>
    inlined horn clauses:
      P[<fail_1302@19:0>](<fail_1302@19:0>:bool)|- bot
      
      P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
      ((<f_main_1297@16:3> <> <f_main_1297@16:1>) && <fail_1302@19:0>) |- P[<fail_1302@19:0>](
      <fail_1302@19:0>:bool)
      
      P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
      |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
      
      |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
    begin ParamSubstInfer.infer(1005)[3]
      
    end ParamSubstInfer.infer(1005)[3] (0.012998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1007)[3]
      
    end RefTypeInfer.elim_coeffs(1007)[3] (0.001000 sec.)
    begin YhornInterface.solve(1154)[3]
      begin HcSolver.solve_ub(1155)[4]
        encoded:
          P[<fail_1302@19:0>](<fail_1302@19:0>:int)|- bot
          
          P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
          ((<f_main_1297@16:3> <> <f_main_1297@16:1>) && (<fail_1302@19:0> = 1))
          |- P[<fail_1302@19:0>](<fail_1302@19:0>:int)
          
          P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
          |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
          
          |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
        input to Yhorn:
          P[<fail_1302@19:0>](<fail_1302@19:0>:int)|- bot
          
          P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
          ((<f_main_1297@16:3> <> <f_main_1297@16:1>) && (<fail_1302@19:0> = 1))
          |- P[<fail_1302@19:0>](<fail_1302@19:0>:int)
          
          P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<<rev_1033@11:1>@14:0> = 0) && (<rev_1033@11:0> = 0))
          |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1302_sep_19_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-$8<>0)) & (v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0($8,$7)) -> v_sep_fail_1302_sep_19_sep_0($6).
(($9=0) & ($10=0)) & (v_sep_rev_1033_sep_11_sep_0($9)) -> v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0($9,$10).
0=0 -> v_sep_rev_1033_sep_11_sep_0($9).


v_sep_fail_1302_sep_19_sep_0: X
v_sep_rev_1033_sep_11_sep_0: X
v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0: X
.....Split disj [14] 0.252961
Reconstrcut: 3 **)

v_sep_fail_1302_sep_19_sep_0: (X) | (X)
v_sep_rev_1033_sep_11_sep_0: X
v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0: X
.....
v_sep_fail_1302_sep_19_sep_0: (X) | (X)
v_sep_rev_1033_sep_11_sep_0: X
v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0: X
.....Split conj [16] 0.25696
(Reconstrcut: 8 **)
v_sep_fail_1302_sep_19_sep_0: (X) | (X)
v_sep_rev_1033_sep_11_sep_0: X
v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0: (X) & (X)
.......
v_sep_fail_1302_sep_19_sep_0: (X) | (X)
v_sep_rev_1033_sep_11_sep_0: X
v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0: (X) & (X)
.....
v_sep_fail_1302_sep_19_sep_0: (X) | (X)
v_sep_rev_1033_sep_11_sep_0: X
v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0: (X) & (X)
.......
v_sep_fail_1302_sep_19_sep_0: (X) | (X)
v_sep_rev_1033_sep_11_sep_0: X
v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0: (X) & (X)
.......(0=0) & (v_sep_fail_1302_sep_19_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-$8<>0)) & (v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0($8,$7)) -> v_sep_fail_1302_sep_19_sep_0($6).
(($9=0) & ($10=0)) & (v_sep_rev_1033_sep_11_sep_0($9)) -> v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0($9,$10).
0=0 -> v_sep_rev_1033_sep_11_sep_0($9).

          |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
        solution:
          P[<fail_1302@19:0>]($11:bool) = false
          P[<rev_1033@11:0>]($19:int) = true
          P[<<rev_1033@11:1>@14:0>]($14:int,$16:int) = ($14 = $16)
        
      end HcSolver.solve_ub(1155)[4] (0.020996 sec.)
      begin HcSolver.check_validity(1266)[4]
        input:
          P[<fail_1302@19:0>](<fail_1302@19:0>:bool)|- bot
          
          P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
          ((<f_main_1297@16:3> <> <f_main_1297@16:1>) && <fail_1302@19:0>)
          |- P[<fail_1302@19:0>](<fail_1302@19:0>:bool)
          
          P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
          |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
          
          |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1266)[4] (0.002000 sec.)
      solution:
        P[<fail_1302@19:0>]($11:bool) = false
        P[<rev_1033@11:0>]($19:int) = true
        P[<<rev_1033@11:1>@14:0>]($14:int,$16:int) = ($14 = $16)
    end YhornInterface.solve(1154)[3] (0.022996 sec.)
    
  end RefTypeInfer.infer_etrs(181)[2] (0.041993 sec.)
  refinement types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:{v2:int | (v1 = v2)} -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1302: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    append_1030: var14:int -> var13:int -> (var12:int -> X) -> X
    f_1300: var18:int -> var17:int -> var16:unit -> X
    f_append_1294: var24:int -> var23:int -> (var22:int -> X) -> var20:int -> X
    f_k_main_u_1296: var31:int -> var30:int -> var29:unit -> (var28:unit -> X) -> var26:int -> X
    f_rev_1295: var36:int -> (var35:int -> X) -> var33:int -> X
    fail_1301: var40:bool -> (var39:unit -> X) -> X
    k_main_u_1218: var46:int -> var45:int -> (var44:unit -> X) -> var42:unit -> X
  abstraction types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:int[v2 -> (v1 = v2)] -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1302: v1:bool -> (v2:unit -> X) -> X
    append_1030: var14:int -> var13:int -> (var12:int -> X) -> X
    f_1300: var18:int -> var17:int -> var16:unit -> X
    f_append_1294: var24:int -> var23:int -> (var22:int -> X) -> var20:int -> X
    f_k_main_u_1296: var31:int -> var30:int -> var29:unit -> (var28:unit -> X) -> var26:int -> X
    f_rev_1295: var36:int -> (var35:int -> X) -> var33:int -> X
    fail_1301: var40:bool -> (var39:unit -> X) -> X
    k_main_u_1218: var46:int -> var45:int -> (var44:unit -> X) -> var42:unit -> X
  
end AbsTypeInfer.refine(180)[1] (0.051992 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1293
  main_1293 -> (rand_int f_1298)
  append_1030 x_1031 y_1032 k_append_1105 when (x_1031 = 0) -> (k_append_1105 y_1032)
  append_1030 x_1031 y_1032 k_append_1105 when (not (x_1031 = 0)) ->
      (append_1030 (x_1031 - 1) y_1032 (f_append_1294 x_1031 y_1032 k_append_1105))
  f_1298 x_1251 -> (rand_int (f_1299 x_1251))
  f_1299 x_1251 x_1264 -> (main_1035 x_1251 x_1264 (f_1300 x_1251 x_1264))
  f_1300 x_1251 x_1264 x_1248 -> end
  f_append_1294 x_1031 y_1032 k_append_1105 x_1109 -> (k_append_1105 (1 + x_1109))
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (x_1222 = (n_1036 + m_1037)) -> (k_main_1191 ())
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (not (x_1222 = (n_1036 + m_1037))) ->
      (fail_1301 true k_main_1191)
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (x_1197 = n_1036) -> (k_main_u_1218 m_1037 n_1036 k_main_1191 ())
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (not (x_1197 = n_1036)) ->
      (fail_1302 true (k_main_u_1218 m_1037 n_1036 k_main_1191))
  f_rev_1295 n_1034 k_rev_1138 x_1163 -> (append_1030 x_1163 1 k_rev_1138)
  fail_1301 b k -> {fail} => (k ())
  fail_1302 b k -> {fail} => (k ())
  k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 ->
      (append_1030 n_1036 m_1037 (f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191))
  main_1035 n_1036 m_1037 k_main_1191 -> (rev_1033 n_1036 (f_main_1297 m_1037 n_1036 k_main_1191))
  rev_1033 n_1034 k_rev_1138 when (n_1034 = 0) -> (k_rev_1138 0)
  rev_1033 n_1034 k_rev_1138 when (not (n_1034 = 0)) -> (rev_1033 (n_1034 - 1) (f_rev_1295 n_1034 k_rev_1138))
Types:
  main_1293 : X
  append_1030 : (int -> int -> (int -> X) -> X)
  fail_1301 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1302 : (x_1:bool[x_1] -> (unit -> X) -> X)
  rev_1033 : (x_1:int -> (x_3:int[x_1 = x_3] -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1293 ... --> 
  f_1298 ... --> 
  f_1299 ... --> 
  main_1035 ... --> 
  rev_1033 [2/2] ... --> 
  rev_1033 [1/2] ... --> 
  f_rev_1295 ... --> 
  append_1030 [1/2] ... --> 
  f_main_1297 [2/2] ... --> 
  fail_1302 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(1796)[1]
  program:
    main_1293  | true = ((Random.int 0) f_1298)
    append_1030 x_1031 y_1032 k_append_1105 | (x_1031 = 0) = (k_append_1105 y_1032)
    append_1030 x_1031 y_1032 k_append_1105 | (not (x_1031 = 0)) = (append_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    y_1032
                                                                    (
                                                                    f_append_1294 x_1031
                                                                    y_1032
                                                                    k_append_1105))
    f_1298 x_1251 | true = ((Random.int 0) (f_1299 x_1251))
    f_1299 x_1251 x_1264 | true = (main_1035 x_1251
                                             x_1264
                                             (f_1300 x_1251
                                                     x_1264))
    f_1300 x_1251 x_1264 x_1248 | true = end
    f_append_1294 x_1031 y_1032 k_append_1105 x_1109 | true = (k_append_1105 (
                                                                    1 + x_1109))
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (x_1222 = (n_1036 + m_1037)) = (
    k_main_1191 ())
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (not (x_1222 = (n_1036 + m_1037))) = (
    fail_1301 true
              k_main_1191)
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (x_1197 = n_1036) = (
    k_main_u_1218 m_1037
                  n_1036
                  k_main_1191
                  ())
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (not (x_1197 = n_1036)) = (
    fail_1302 true
              (k_main_u_1218 m_1037
                             n_1036
                             k_main_1191))
    f_rev_1295 n_1034 k_rev_1138 x_1163 | true = (append_1030 x_1163
                                                              1
                                                              k_rev_1138)
    fail_1301 b k | true = (fail ())
    fail_1302 b k | true = (fail ())
    k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 | true = (append_1030
                                                               n_1036
                                                               m_1037
                                                               (f_k_main_u_1296 m_1037
                                                                    n_1036
                                                                    x_1194
                                                                    k_main_1191))
    main_1035 n_1036 m_1037 k_main_1191 | true = (rev_1033 n_1036
                                                           (f_main_1297 m_1037
                                                                    n_1036
                                                                    k_main_1191))
    rev_1033 n_1034 k_rev_1138 | (n_1034 = 0) = (k_rev_1138 0)
    rev_1033 n_1034 k_rev_1138 | (not (n_1034 = 0)) = (rev_1033 (n_1034 - 1)
                                                                (f_rev_1295 n_1034
                                                                    k_rev_1138))
    main_1293:X
    append_1030:int -> int -> (int -> X) -> X
    f_1298:int -> X
    f_1299:int -> int -> X
    f_1300:int -> int -> unit -> X
    f_append_1294:int -> int -> (int -> X) -> int -> X
    f_k_main_u_1296:int -> int -> unit -> (unit -> X) -> int -> X
    f_main_1297:int -> int -> (unit -> X) -> int -> X
    f_rev_1295:int -> (int -> X) -> int -> X
    fail_1301:bool -> (unit -> X) -> X
    fail_1302:bool -> (unit -> X) -> X
    k_main_u_1218:int -> int -> (unit -> X) -> unit -> X
    main_1035:int -> int -> (unit -> X) -> X
    rev_1033:int -> (int -> X) -> X
  inlined functions: f_1298,f_1299,f_1300,f_append_1294,f_k_main_u_1296,f_main_1297,f_rev_1295,k_main_u_1218,main_1035
  counterexample: 0:0:0:0:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1298@25:0> = var47)
     [true.nop((<f_1299@28:0> = <f_1298@25:0>) && (<f_1299@28:1> = var48))
      [true.((<main_1035@30:0> = <f_1299@28:0>) && (<main_1035@30:1> = <f_1299@28:1>))
       [true.(<rev_1033@32:0> = <main_1035@30:0>)
        [(not (<rev_1033@32:0> = 0)).(<rev_1033@35:0> = (<rev_1033@32:0> - 1))
         [(<rev_1033@35:0> = 0).(<<rev_1033@35:1>@38:0> = 0)
          [true.((<f_rev_1295@40:0> = <rev_1033@32:0>) && (<f_rev_1295@40:2> = <<rev_1033@35:1>@38:0>))
           [true.((<append_1030@42:0> = <f_rev_1295@40:2>) && (<append_1030@42:1> = 1))
            [(<append_1030@42:0> = 0).(<<append_1030@42:2>@45:0> = <append_1030@42:1>)
             [true.(<<f_rev_1295@40:1>@47:0> = <<append_1030@42:2>@45:0>)
              [true.(<<rev_1033@32:1>@49:0> = <<f_rev_1295@40:1>@47:0>)
               [true.
                ((<f_main_1297@51:0> = <main_1035@30:1>) &&
                 ((<f_main_1297@51:1> = <main_1035@30:0>) && (<f_main_1297@51:3> = <<rev_1033@32:1>@49:0>)))
                [(not (<f_main_1297@51:3> = <f_main_1297@51:1>)).(<fail_1302@54:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(1797)[2]
    horn clauses:
      P[<fail_1302@54:0>](<fail_1302@54:0>:bool)|- bot
      
      P[<f_main_1297@51:3>](<f_main_1297@51:0>:int,<f_main_1297@51:1>:int,<f_main_1297@51:3>:int),
      ((<f_main_1297@51:3> <> <f_main_1297@51:1>) && <fail_1302@54:0>) |- P[<fail_1302@54:0>](
      <fail_1302@54:0>:bool)
      
      P[<main_1035@30:1>](<f_main_1297@51:1>:int,<f_main_1297@51:0>:int),
      P[<<rev_1033@32:1>@49:0>](<f_main_1297@51:1>:int,<f_main_1297@51:3>:int)|- P[<f_main_1297@51:3>](
      <f_main_1297@51:0>:int,<f_main_1297@51:1>:int,<f_main_1297@51:3>:int)
      
      P[<rev_1033@32:0>](<rev_1033@32:0>:int),
      P[<<f_rev_1295@40:1>@47:0>](<rev_1033@32:0>:int,<<rev_1033@32:1>@49:0>:int), (
      <rev_1033@32:0> <> 0) |- P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,
                                                         <<rev_1033@32:1>@49:0>:int)
      
      P[<f_rev_1295@40:2>](<f_rev_1295@40:0>:int,<append_1030@42:0>:int),
      P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,1:int,<<f_rev_1295@40:1>@47:0>:int)|- P[<<f_rev_1295@40:1>@47:0>](
      <f_rev_1295@40:0>:int,<<f_rev_1295@40:1>@47:0>:int)
      
      P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
      ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
      |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                      <<append_1030@42:2>@45:0>:int)
      
      P[<f_rev_1295@40:2>](<f_rev_1295@40:0>:int,<append_1030@42:0>:int), (
      <append_1030@42:1> = 1) |- P[<append_1030@42:1>](<append_1030@42:0>:int,
                                                       <append_1030@42:1>:int)
      
      P[<rev_1033@32:0>](<f_rev_1295@40:0>:int),
      P[<<rev_1033@35:1>@38:0>]((-1 + <f_rev_1295@40:0>):int,<f_rev_1295@40:2>:int), (
      <f_rev_1295@40:0> <> 0) |- P[<f_rev_1295@40:2>](<f_rev_1295@40:0>:int,
                                                      <f_rev_1295@40:2>:int)
      
      P[<rev_1033@35:0>](<rev_1033@35:0>:int), ((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0))
      |- P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int)
      
      P[<rev_1033@32:0>]((1 + <rev_1033@35:0>):int), ((1 + <rev_1033@35:0>) <> 0)
      |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
      
      P[<main_1035@30:1>](<rev_1033@32:0>:int,<main_1035@30:1>:int)|- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
      
      P[<f_1299@28:1>](<main_1035@30:0>:int,<main_1035@30:1>:int)|- P[<main_1035@30:1>](
      <main_1035@30:0>:int,<main_1035@30:1>:int)
      
      P[<f_1298@25:0>](<f_1299@28:0>:int)|- P[<f_1299@28:1>](<f_1299@28:0>:int,
                                                             <f_1299@28:1>:int)
      
      |- P[<f_1298@25:0>](<f_1298@25:0>:int)
    call trees:
      <main_1293@22>
        <f_1298@25>
          <f_1299@28>
            <main_1035@30>
              <rev_1033@32>
                <rev_1033@35>
                </<rev_1033@35:1>@38>
                <f_rev_1295@40>
                  <append_1030@42>
                  </<append_1030@42:2>@45>
                </<f_rev_1295@40:1>@47>
              </<rev_1033@32:1>@49>
              <f_main_1297@51>
                <fail_1302@54>
    inlined horn clauses:
      P[<fail_1302@54:0>](<fail_1302@54:0>:bool)|- bot
      
      P[<<rev_1033@32:1>@49:0>](<f_main_1297@51:1>:int,<f_main_1297@51:3>:int),
      ((<f_main_1297@51:3> <> <f_main_1297@51:1>) && <fail_1302@54:0>) |- P[<fail_1302@54:0>](
      <fail_1302@54:0>:bool)
      
      P[<rev_1033@32:0>](<rev_1033@32:0>:int),
      P[<<rev_1033@35:1>@38:0>]((-1 + <rev_1033@32:0>):int,var49:int),
      P[<<append_1030@42:2>@45:0>](var49:int,1:int,<<rev_1033@32:1>@49:0>:int), (
      <rev_1033@32:0> <> 0) |- P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,
                                                         <<rev_1033@32:1>@49:0>:int)
      
      P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
      ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
      |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                      <<append_1030@42:2>@45:0>:int)
      
      P[<rev_1033@32:0>](<f_rev_1295@40:0>:int),
      P[<<rev_1033@35:1>@38:0>]((-1 + <f_rev_1295@40:0>):int,<append_1030@42:0>:int),
      ((<append_1030@42:1> = 1) && (<f_rev_1295@40:0> <> 0))
      |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
      
      P[<rev_1033@35:0>](<rev_1033@35:0>:int), ((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0))
      |- P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int)
      
      P[<rev_1033@32:0>]((1 + <rev_1033@35:0>):int), ((1 + <rev_1033@35:0>) <> 0)
      |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
      
      |- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
    begin ParamSubstInfer.infer(3567)[3]
      
    end ParamSubstInfer.infer(3567)[3] (0.025996 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(3569)[3]
      
    end RefTypeInfer.elim_coeffs(3569)[3] (0.002000 sec.)
    begin YhornInterface.solve(3892)[3]
      begin HcSolver.solve_ub(3893)[4]
        encoded:
          P[<fail_1302@54:0>](<fail_1302@54:0>:int)|- bot
          
          P[<<rev_1033@32:1>@49:0>](<f_main_1297@51:1>:int,<f_main_1297@51:3>:int),
          ((<f_main_1297@51:3> <> <f_main_1297@51:1>) && (<fail_1302@54:0> = 1))
          |- P[<fail_1302@54:0>](<fail_1302@54:0>:int)
          
          P[<rev_1033@32:0>](<rev_1033@32:0>:int),
          P[<<rev_1033@35:1>@38:0>]((-1 + <rev_1033@32:0>):int,var49:int),
          P[<<append_1030@42:2>@45:0>](var49:int,1:int,<<rev_1033@32:1>@49:0>:int), (
          <rev_1033@32:0> <> 0) |- P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,
                                                             <<rev_1033@32:1>@49:0>:int)
          
          P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
          ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
          |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                          <<append_1030@42:2>@45:0>:int)
          
          P[<rev_1033@32:0>](<f_rev_1295@40:0>:int),
          P[<<rev_1033@35:1>@38:0>]((-1 + <f_rev_1295@40:0>):int,<append_1030@42:0>:int),
          ((<append_1030@42:1> = 1) && (<f_rev_1295@40:0> <> 0))
          |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
          
          P[<rev_1033@35:0>](<rev_1033@35:0>:int), ((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0))
          |- P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int)
          
          P[<rev_1033@32:0>]((1 + <rev_1033@35:0>):int), ((1 + <rev_1033@35:0>) <> 0)
          |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
          
          |- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
        input to Yhorn:
          P[<fail_1302@54:0>](<fail_1302@54:0>:int)|- bot
          
          P[<<rev_1033@32:1>@49:0>](<f_main_1297@51:1>:int,<f_main_1297@51:3>:int),
          ((<f_main_1297@51:3> <> <f_main_1297@51:1>) && (<fail_1302@54:0> = 1))
          |- P[<fail_1302@54:0>](<fail_1302@54:0>:int)
          
          P[<rev_1033@32:0>](<rev_1033@32:0>:int),
          P[<<rev_1033@35:1>@38:0>](var50:int,var49:int),
          P[<<append_1030@42:2>@45:0>](var49:int,var51:int,<<rev_1033@32:1>@49:0>:int),
          (((1 + var50) = <rev_1033@32:0>) && ((<rev_1033@32:0> <> 0) && (var51 = 1)))
          |- P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,<<rev_1033@32:1>@49:0>:int)
          
          P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
          ((<<append_1030@42:2>@45:0> = <append_1030@42:1>) && (<append_1030@42:0> = 0))
          |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                          <<append_1030@42:2>@45:0>:int)
          
          P[<rev_1033@32:0>](<f_rev_1295@40:0>:int),
          P[<<rev_1033@35:1>@38:0>](var52:int,<append_1030@42:0>:int),
          (((1 + var52) = <f_rev_1295@40:0>) && ((<f_rev_1295@40:0> <> 0) && (<append_1030@42:1> = 1)))
          |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
          
          P[<rev_1033@35:0>](<rev_1033@35:0>:int), ((<<rev_1033@35:1>@38:0> = 0) && (<rev_1033@35:0> = 0))
          |- P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int)
          
          P[<rev_1033@32:0>](var53:int), ((var53 = (1 + <rev_1033@35:0>)) && ((1 + <rev_1033@35:0>) <> 0))
          |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1302_sep_54_sep_0($147)) -> 1=0.
(($147-1=0) & ($148-$149<>0)) & (v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0($149,$148)) -> v_sep_fail_1302_sep_54_sep_0($147).
(($150-1=0) & ($151<>0) & (-$151+$152+1=0)) & (v_sep_append_1030_sep_42_sep_2_sep_45_sep_0($153,$150,$154)) & (v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0($152,$153)) & (v_sep_rev_1033_sep_32_sep_0($151)) -> v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0($151,$154).
(($155=0) & ($156-$157=0)) & (v_sep_append_1030_sep_42_sep_1($155,$157)) -> v_sep_append_1030_sep_42_sep_2_sep_45_sep_0($155,$157,$156).
(($157-1=0) & ($158<>0) & (-$158+$159+1=0)) & (v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0($159,$155)) & (v_sep_rev_1033_sep_32_sep_0($158)) -> v_sep_append_1030_sep_42_sep_1($155,$157).
(($160=0) & ($161=0)) & (v_sep_rev_1033_sep_35_sep_0($160)) -> v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0($160,$161).
(($160+1<>0) & (-$160+$162-1=0)) & (v_sep_rev_1033_sep_32_sep_0($162)) -> v_sep_rev_1033_sep_35_sep_0($160).
0=0 -> v_sep_rev_1033_sep_32_sep_0($151).


v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: X
v_sep_fail_1302_sep_54_sep_0: X
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: X
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
..................Split disj [32] 0.332949
Reconstrcut: 3 **)

v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: X
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: X
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.....
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: X
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: X
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.....Split conj [34] 0.338948
(Reconstrcut: 8 **)
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: X
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.................
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: X
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.....
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: X
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.................Split conj [37] 0.353946
(Reconstrcut: 14 ****)
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.....................
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.....
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.................Split conj [43] 0.367944
(Reconstrcut: 25 ******)
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
...............................
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
.....
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
.................
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
.........................
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
...............................
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
.................................(0=0) & (v_sep_fail_1302_sep_54_sep_0($147)) -> 1=0.
(($147-1=0) & ($148-$149<>0)) & (v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0($149,$148)) -> v_sep_fail_1302_sep_54_sep_0($147).
(($150-1=0) & ($151<>0) & (-$151+$152+1=0)) & (v_sep_append_1030_sep_42_sep_2_sep_45_sep_0($153,$150,$154)) & (v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0($152,$153)) & (v_sep_rev_1033_sep_32_sep_0($151)) -> v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0($151,$154).
(($155=0) & ($156-$157=0)) & (v_sep_append_1030_sep_42_sep_1($155,$157)) -> v_sep_append_1030_sep_42_sep_2_sep_45_sep_0($155,$157,$156).
(($157-1=0) & ($158<>0) & (-$158+$159+1=0)) & (v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0($159,$155)) & (v_sep_rev_1033_sep_32_sep_0($158)) -> v_sep_append_1030_sep_42_sep_1($155,$157).
(($160=0) & ($161=0)) & (v_sep_rev_1033_sep_35_sep_0($160)) -> v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0($160,$161).
(($160+1<>0) & (-$160+$162-1=0)) & (v_sep_rev_1033_sep_32_sep_0($162)) -> v_sep_rev_1033_sep_35_sep_0($160).
0=0 -> v_sep_rev_1033_sep_32_sep_0($151).

          |- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
        solution:
          P[<append_1030@42:1>]($186:int,$188:int) = true
          P[<<append_1030@42:2>@45:0>]($171:int,$173:int,$175:int) = ($173 = $175)
          P[<fail_1302@54:0>]($163:bool) = false
          P[<rev_1033@32:0>]($183:int) = true
          P[<<rev_1033@32:1>@49:0>]($166:int,$168:int) = ($166 = $168)
          P[<rev_1033@35:0>]($191:int) = true
          P[<<rev_1033@35:1>@38:0>]($178:int,$180:int) = ($178 = 0)
        
      end HcSolver.solve_ub(3893)[4] (0.132980 sec.)
      begin HcSolver.check_validity(4309)[4]
        input:
          P[<fail_1302@54:0>](<fail_1302@54:0>:bool)|- bot
          
          P[<<rev_1033@32:1>@49:0>](<f_main_1297@51:1>:int,<f_main_1297@51:3>:int),
          ((<f_main_1297@51:3> <> <f_main_1297@51:1>) && <fail_1302@54:0>)
          |- P[<fail_1302@54:0>](<fail_1302@54:0>:bool)
          
          P[<rev_1033@32:0>](<rev_1033@32:0>:int),
          P[<<rev_1033@35:1>@38:0>]((-1 + <rev_1033@32:0>):int,var49:int),
          P[<<append_1030@42:2>@45:0>](var49:int,1:int,<<rev_1033@32:1>@49:0>:int), (
          <rev_1033@32:0> <> 0) |- P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,
                                                             <<rev_1033@32:1>@49:0>:int)
          
          P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
          ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
          |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                          <<append_1030@42:2>@45:0>:int)
          
          P[<rev_1033@32:0>](<f_rev_1295@40:0>:int),
          P[<<rev_1033@35:1>@38:0>]((-1 + <f_rev_1295@40:0>):int,<append_1030@42:0>:int),
          ((<append_1030@42:1> = 1) && (<f_rev_1295@40:0> <> 0))
          |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
          
          P[<rev_1033@35:0>](<rev_1033@35:0>:int), ((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0))
          |- P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int)
          
          P[<rev_1033@32:0>]((1 + <rev_1033@35:0>):int), ((1 + <rev_1033@35:0>) <> 0)
          |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
          
          |- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(4309)[4] (0.003999 sec.)
      solution:
        P[<append_1030@42:1>]($186:int,$188:int) = true
        P[<<append_1030@42:2>@45:0>]($171:int,$173:int,$175:int) = ($173 = $175)
        P[<fail_1302@54:0>]($163:bool) = false
        P[<rev_1033@32:0>]($183:int) = true
        P[<<rev_1033@32:1>@49:0>]($166:int,$168:int) = ($166 = $168)
        P[<rev_1033@35:0>]($191:int) = true
        P[<<rev_1033@35:1>@38:0>]($178:int,$180:int) = ($178 = 0)
    end YhornInterface.solve(3892)[3] (0.137979 sec.)
    
  end RefTypeInfer.infer_etrs(1797)[2] (0.174973 sec.)
  refinement types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:{v2:int | (v1 = v2)} -> X) -> X
    rev_1033: v1:int -> (v2:{v2:int | (v1 = 0)} -> X) -> X
    f_rev_1295: v1:int -> (v2:int -> X) -> v4:int -> X
    append_1030: v1:int -> v2:int -> (v3:{v3:int | (v2 = v3)} -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1302: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1300: var63:int -> var62:int -> var61:unit -> X
    f_append_1294: var69:int -> var68:int -> (var67:int -> X) -> var65:int -> X
    f_k_main_u_1296: var76:int -> var75:int -> var74:unit -> (var73:unit -> X) -> var71:int -> X
    fail_1301: var80:bool -> (var79:unit -> X) -> X
    k_main_u_1218: var86:int -> var85:int -> (var84:unit -> X) -> var82:unit -> X
  abstraction types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: var87:int -> (var88:int[var88 -> (var87 = var88),
                                      var88 -> (var87 = 0)] -> X) -> X
    f_rev_1295: v1:int -> (v2:int -> X) -> v4:int -> X
    append_1030: v1:int -> v2:int -> (v3:int[v3 -> (v2 = v3)] -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1302: v1:bool -> (v2:unit -> X) -> X
    f_1300: var63:int -> var62:int -> var61:unit -> X
    f_append_1294: var69:int -> var68:int -> (var67:int -> X) -> var65:int -> X
    f_k_main_u_1296: var76:int -> var75:int -> var74:unit -> (var73:unit -> X) -> var71:int -> X
    fail_1301: var80:bool -> (var79:unit -> X) -> X
    k_main_u_1218: var86:int -> var85:int -> (var84:unit -> X) -> var82:unit -> X
  
end AbsTypeInfer.refine(1796)[1] (0.176973 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1293
  main_1293 -> (rand_int f_1298)
  append_1030 x_1031 y_1032 k_append_1105 when (x_1031 = 0) -> (k_append_1105 y_1032)
  append_1030 x_1031 y_1032 k_append_1105 when (not (x_1031 = 0)) ->
      (append_1030 (x_1031 - 1) y_1032 (f_append_1294 x_1031 y_1032 k_append_1105))
  f_1298 x_1251 -> (rand_int (f_1299 x_1251))
  f_1299 x_1251 x_1264 -> (main_1035 x_1251 x_1264 (f_1300 x_1251 x_1264))
  f_1300 x_1251 x_1264 x_1248 -> end
  f_append_1294 x_1031 y_1032 k_append_1105 x_1109 -> (k_append_1105 (1 + x_1109))
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (x_1222 = (n_1036 + m_1037)) -> (k_main_1191 ())
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (not (x_1222 = (n_1036 + m_1037))) ->
      (fail_1301 true k_main_1191)
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (x_1197 = n_1036) -> (k_main_u_1218 m_1037 n_1036 k_main_1191 ())
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (not (x_1197 = n_1036)) ->
      (fail_1302 true (k_main_u_1218 m_1037 n_1036 k_main_1191))
  f_rev_1295 n_1034 k_rev_1138 x_1163 -> (append_1030 x_1163 1 k_rev_1138)
  fail_1301 b k -> {fail} => (k ())
  fail_1302 b k -> {fail} => (k ())
  k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 ->
      (append_1030 n_1036 m_1037 (f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191))
  main_1035 n_1036 m_1037 k_main_1191 -> (rev_1033 n_1036 (f_main_1297 m_1037 n_1036 k_main_1191))
  rev_1033 n_1034 k_rev_1138 when (n_1034 = 0) -> (k_rev_1138 0)
  rev_1033 n_1034 k_rev_1138 when (not (n_1034 = 0)) -> (rev_1033 (n_1034 - 1) (f_rev_1295 n_1034 k_rev_1138))
Types:
  main_1293 : X
  append_1030 : (int -> x_2:int -> (x_4:int[x_2 = x_4] -> X) -> X)
  fail_1301 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1302 : (x_1:bool[x_1] -> (unit -> X) -> X)
  rev_1033 : (x_1:int -> (x_3:int[x_1 = 0; x_1 = x_3] -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1293 ... --> 
  f_1298 ... --> 
  f_1299 ... --> 
  main_1035 ... --> 
  rev_1033 [2/2] ... --> 
  rev_1033 [1/2] ... --> 
  f_rev_1295 ... --> 
  append_1030 [1/2] ... --> 
  f_main_1297 [1/2] ... --> 
  k_main_u_1218 ... --> 
  append_1030 [1/2] ... --> 
  f_k_main_u_1296 [2/2] ... --> 
  fail_1301 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(5607)[1]
  program:
    main_1293  | true = ((Random.int 0) f_1298)
    append_1030 x_1031 y_1032 k_append_1105 | (x_1031 = 0) = (k_append_1105 y_1032)
    append_1030 x_1031 y_1032 k_append_1105 | (not (x_1031 = 0)) = (append_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    y_1032
                                                                    (
                                                                    f_append_1294 x_1031
                                                                    y_1032
                                                                    k_append_1105))
    f_1298 x_1251 | true = ((Random.int 0) (f_1299 x_1251))
    f_1299 x_1251 x_1264 | true = (main_1035 x_1251
                                             x_1264
                                             (f_1300 x_1251
                                                     x_1264))
    f_1300 x_1251 x_1264 x_1248 | true = end
    f_append_1294 x_1031 y_1032 k_append_1105 x_1109 | true = (k_append_1105 (
                                                                    1 + x_1109))
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (x_1222 = (n_1036 + m_1037)) = (
    k_main_1191 ())
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (not (x_1222 = (n_1036 + m_1037))) = (
    fail_1301 true
              k_main_1191)
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (x_1197 = n_1036) = (
    k_main_u_1218 m_1037
                  n_1036
                  k_main_1191
                  ())
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (not (x_1197 = n_1036)) = (
    fail_1302 true
              (k_main_u_1218 m_1037
                             n_1036
                             k_main_1191))
    f_rev_1295 n_1034 k_rev_1138 x_1163 | true = (append_1030 x_1163
                                                              1
                                                              k_rev_1138)
    fail_1301 b k | true = (fail ())
    fail_1302 b k | true = (fail ())
    k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 | true = (append_1030
                                                               n_1036
                                                               m_1037
                                                               (f_k_main_u_1296 m_1037
                                                                    n_1036
                                                                    x_1194
                                                                    k_main_1191))
    main_1035 n_1036 m_1037 k_main_1191 | true = (rev_1033 n_1036
                                                           (f_main_1297 m_1037
                                                                    n_1036
                                                                    k_main_1191))
    rev_1033 n_1034 k_rev_1138 | (n_1034 = 0) = (k_rev_1138 0)
    rev_1033 n_1034 k_rev_1138 | (not (n_1034 = 0)) = (rev_1033 (n_1034 - 1)
                                                                (f_rev_1295 n_1034
                                                                    k_rev_1138))
    main_1293:X
    append_1030:int -> int -> (int -> X) -> X
    f_1298:int -> X
    f_1299:int -> int -> X
    f_1300:int -> int -> unit -> X
    f_append_1294:int -> int -> (int -> X) -> int -> X
    f_k_main_u_1296:int -> int -> unit -> (unit -> X) -> int -> X
    f_main_1297:int -> int -> (unit -> X) -> int -> X
    f_rev_1295:int -> (int -> X) -> int -> X
    fail_1301:bool -> (unit -> X) -> X
    fail_1302:bool -> (unit -> X) -> X
    k_main_u_1218:int -> int -> (unit -> X) -> unit -> X
    main_1035:int -> int -> (unit -> X) -> X
    rev_1033:int -> (int -> X) -> X
  inlined functions: f_1298,f_1299,f_1300,f_append_1294,f_k_main_u_1296,f_main_1297,f_rev_1295,k_main_u_1218,main_1035
  counterexample: 0:0:0:0:1:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1298@60:0> = var91)
     [true.nop((<f_1299@63:0> = <f_1298@60:0>) && (<f_1299@63:1> = var92))
      [true.((<main_1035@65:0> = <f_1299@63:0>) && (<main_1035@65:1> = <f_1299@63:1>))
       [true.(<rev_1033@67:0> = <main_1035@65:0>)
        [(not (<rev_1033@67:0> = 0)).(<rev_1033@70:0> = (<rev_1033@67:0> - 1))
         [(<rev_1033@70:0> = 0).(<<rev_1033@70:1>@73:0> = 0)
          [true.((<f_rev_1295@75:0> = <rev_1033@67:0>) && (<f_rev_1295@75:2> = <<rev_1033@70:1>@73:0>))
           [true.((<append_1030@77:0> = <f_rev_1295@75:2>) && (<append_1030@77:1> = 1))
            [(<append_1030@77:0> = 0).(<<append_1030@77:2>@80:0> = <append_1030@77:1>)
             [true.(<<f_rev_1295@75:1>@82:0> = <<append_1030@77:2>@80:0>)
              [true.(<<rev_1033@67:1>@84:0> = <<f_rev_1295@75:1>@82:0>)
               [true.
                ((<f_main_1297@86:0> = <main_1035@65:1>) &&
                 ((<f_main_1297@86:1> = <main_1035@65:0>) && (<f_main_1297@86:3> = <<rev_1033@67:1>@84:0>)))
                [(<f_main_1297@86:3> = <f_main_1297@86:1>).
                 ((<k_main_u_1218@89:0> = <f_main_1297@86:0>) &&
                  ((<k_main_u_1218@89:1> = <f_main_1297@86:1>) && (<k_main_u_1218@89:3> = ())))
                 [true.((<append_1030@91:0> = <k_main_u_1218@89:1>) && (<append_1030@91:1> = <k_main_u_1218@89:0>))
                  [(<append_1030@91:0> = 0).(<<append_1030@91:2>@94:0> = <append_1030@91:1>)
                   [true.
                    ((<f_k_main_u_1296@96:0> = <k_main_u_1218@89:0>) &&
                     ((<f_k_main_u_1296@96:1> = <k_main_u_1218@89:1>) &&
                      ((<f_k_main_u_1296@96:2> = <k_main_u_1218@89:3>) &&
                       (<f_k_main_u_1296@96:4> = <<append_1030@91:2>@94:0>))))
                    [(not (<f_k_main_u_1296@96:4> = (<f_k_main_u_1296@96:1> + <f_k_main_u_1296@96:0>))).
                     (<fail_1301@99:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(5608)[2]
    horn clauses:
      P[<fail_1301@99:0>](<fail_1301@99:0>:bool)|- bot
      
      P[<f_k_main_u_1296@96:4>](<f_k_main_u_1296@96:0>:int,<f_k_main_u_1296@96:1>:int,<f_k_main_u_1296@96:2>:unit,<f_k_main_u_1296@96:4>:int),
      ((<f_k_main_u_1296@96:4> <> (<f_k_main_u_1296@96:1> + <f_k_main_u_1296@96:0>)) && <fail_1301@99:0>)
      |- P[<fail_1301@99:0>](<fail_1301@99:0>:bool)
      
      P[<k_main_u_1218@89:3>](<f_k_main_u_1296@96:0>:int,<f_k_main_u_1296@96:1>:int,<k_main_u_1218@89:3>:unit),
      P[<<append_1030@91:2>@94:0>](<f_k_main_u_1296@96:1>:int,<f_k_main_u_1296@96:0>:int,<f_k_main_u_1296@96:4>:int)|- P[<f_k_main_u_1296@96:4>](
      <f_k_main_u_1296@96:0>:int,<f_k_main_u_1296@96:1>:int,<f_k_main_u_1296@96:2>:unit,
      <f_k_main_u_1296@96:4>:int)
      
      P[<append_1030@91:1>](<append_1030@91:0>:int,<append_1030@91:1>:int),
      ((<append_1030@91:0> = 0) && (<<append_1030@91:2>@94:0> = <append_1030@91:1>))
      |- P[<<append_1030@91:2>@94:0>](<append_1030@91:0>:int,<append_1030@91:1>:int,
                                      <<append_1030@91:2>@94:0>:int)
      
      P[<k_main_u_1218@89:3>](<append_1030@91:1>:int,<append_1030@91:0>:int,<k_main_u_1218@89:3>:unit)|- P[<append_1030@91:1>](
      <append_1030@91:0>:int,<append_1030@91:1>:int)
      
      P[<f_main_1297@86:3>](<k_main_u_1218@89:0>:int,<k_main_u_1218@89:1>:int,<k_main_u_1218@89:1>:int)|- P[<k_main_u_1218@89:3>](
      <k_main_u_1218@89:0>:int,<k_main_u_1218@89:1>:int,<k_main_u_1218@89:3>:unit)
      
      P[<main_1035@65:1>](<f_main_1297@86:1>:int,<f_main_1297@86:0>:int),
      P[<<rev_1033@67:1>@84:0>](<f_main_1297@86:1>:int,<f_main_1297@86:3>:int)|- P[<f_main_1297@86:3>](
      <f_main_1297@86:0>:int,<f_main_1297@86:1>:int,<f_main_1297@86:3>:int)
      
      P[<rev_1033@67:0>](<rev_1033@67:0>:int),
      P[<<f_rev_1295@75:1>@82:0>](<rev_1033@67:0>:int,<<rev_1033@67:1>@84:0>:int), (
      <rev_1033@67:0> <> 0) |- P[<<rev_1033@67:1>@84:0>](<rev_1033@67:0>:int,
                                                         <<rev_1033@67:1>@84:0>:int)
      
      P[<f_rev_1295@75:2>](<f_rev_1295@75:0>:int,<append_1030@77:0>:int),
      P[<<append_1030@77:2>@80:0>](<append_1030@77:0>:int,1:int,<<f_rev_1295@75:1>@82:0>:int)|- P[<<f_rev_1295@75:1>@82:0>](
      <f_rev_1295@75:0>:int,<<f_rev_1295@75:1>@82:0>:int)
      
      P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
      ((<append_1030@77:0> = 0) && (<<append_1030@77:2>@80:0> = <append_1030@77:1>))
      |- P[<<append_1030@77:2>@80:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                      <<append_1030@77:2>@80:0>:int)
      
      P[<f_rev_1295@75:2>](<f_rev_1295@75:0>:int,<append_1030@77:0>:int), (
      <append_1030@77:1> = 1) |- P[<append_1030@77:1>](<append_1030@77:0>:int,
                                                       <append_1030@77:1>:int)
      
      P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
      P[<<rev_1033@70:1>@73:0>]((-1 + <f_rev_1295@75:0>):int,<f_rev_1295@75:2>:int), (
      <f_rev_1295@75:0> <> 0) |- P[<f_rev_1295@75:2>](<f_rev_1295@75:0>:int,
                                                      <f_rev_1295@75:2>:int)
      
      P[<rev_1033@70:0>](<rev_1033@70:0>:int), ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
      |- P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int)
      
      P[<rev_1033@67:0>]((1 + <rev_1033@70:0>):int), ((1 + <rev_1033@70:0>) <> 0)
      |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
      
      P[<main_1035@65:1>](<rev_1033@67:0>:int,<main_1035@65:1>:int)|- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
      
      P[<f_1299@63:1>](<main_1035@65:0>:int,<main_1035@65:1>:int)|- P[<main_1035@65:1>](
      <main_1035@65:0>:int,<main_1035@65:1>:int)
      
      P[<f_1298@60:0>](<f_1299@63:0>:int)|- P[<f_1299@63:1>](<f_1299@63:0>:int,
                                                             <f_1299@63:1>:int)
      
      |- P[<f_1298@60:0>](<f_1298@60:0>:int)
    call trees:
      <main_1293@57>
        <f_1298@60>
          <f_1299@63>
            <main_1035@65>
              <rev_1033@67>
                <rev_1033@70>
                </<rev_1033@70:1>@73>
                <f_rev_1295@75>
                  <append_1030@77>
                  </<append_1030@77:2>@80>
                </<f_rev_1295@75:1>@82>
              </<rev_1033@67:1>@84>
              <f_main_1297@86>
                <k_main_u_1218@89>
                  <append_1030@91>
                  </<append_1030@91:2>@94>
                  <f_k_main_u_1296@96>
                    <fail_1301@99>
    inlined horn clauses:
      P[<fail_1301@99:0>](<fail_1301@99:0>:bool)|- bot
      
      P[<<rev_1033@67:1>@84:0>](<f_k_main_u_1296@96:1>:int,<f_k_main_u_1296@96:1>:int),
      P[<<append_1030@91:2>@94:0>](<f_k_main_u_1296@96:1>:int,<f_k_main_u_1296@96:0>:int,<f_k_main_u_1296@96:4>:int),
      ((<f_k_main_u_1296@96:4> <> (<f_k_main_u_1296@96:1> + <f_k_main_u_1296@96:0>)) && <fail_1301@99:0>)
      |- P[<fail_1301@99:0>](<fail_1301@99:0>:bool)
      
      P[<append_1030@91:1>](<append_1030@91:0>:int,<append_1030@91:1>:int),
      ((<append_1030@91:0> = 0) && (<<append_1030@91:2>@94:0> = <append_1030@91:1>))
      |- P[<<append_1030@91:2>@94:0>](<append_1030@91:0>:int,<append_1030@91:1>:int,
                                      <<append_1030@91:2>@94:0>:int)
      
      P[<<rev_1033@67:1>@84:0>](<append_1030@91:0>:int,<append_1030@91:0>:int)|- P[<append_1030@91:1>](
      <append_1030@91:0>:int,<append_1030@91:1>:int)
      
      P[<rev_1033@67:0>](<rev_1033@67:0>:int),
      P[<<rev_1033@70:1>@73:0>]((-1 + <rev_1033@67:0>):int,var93:int),
      P[<<append_1030@77:2>@80:0>](var93:int,1:int,<<rev_1033@67:1>@84:0>:int), (
      <rev_1033@67:0> <> 0) |- P[<<rev_1033@67:1>@84:0>](<rev_1033@67:0>:int,
                                                         <<rev_1033@67:1>@84:0>:int)
      
      P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
      ((<append_1030@77:0> = 0) && (<<append_1030@77:2>@80:0> = <append_1030@77:1>))
      |- P[<<append_1030@77:2>@80:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                      <<append_1030@77:2>@80:0>:int)
      
      P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
      P[<<rev_1033@70:1>@73:0>]((-1 + <f_rev_1295@75:0>):int,<append_1030@77:0>:int),
      ((<append_1030@77:1> = 1) && (<f_rev_1295@75:0> <> 0))
      |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
      
      P[<rev_1033@70:0>](<rev_1033@70:0>:int), ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
      |- P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int)
      
      P[<rev_1033@67:0>]((1 + <rev_1033@70:0>):int), ((1 + <rev_1033@70:0>) <> 0)
      |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
      
      |- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
    begin ParamSubstInfer.infer(7880)[3]
      
    end ParamSubstInfer.infer(7880)[3] (0.065990 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(7882)[3]
      
    end RefTypeInfer.elim_coeffs(7882)[3] (0.001999 sec.)
    begin YhornInterface.solve(8301)[3]
      begin HcSolver.solve_ub(8302)[4]
        encoded:
          P[<fail_1301@99:0>](<fail_1301@99:0>:int)|- bot
          
          P[<<rev_1033@67:1>@84:0>](<f_k_main_u_1296@96:1>:int,<f_k_main_u_1296@96:1>:int),
          P[<<append_1030@91:2>@94:0>](<f_k_main_u_1296@96:1>:int,<f_k_main_u_1296@96:0>:int,<f_k_main_u_1296@96:4>:int),
          ((<f_k_main_u_1296@96:4> <> (<f_k_main_u_1296@96:1> + <f_k_main_u_1296@96:0>)) && (<fail_1301@99:0> = 1))
          |- P[<fail_1301@99:0>](<fail_1301@99:0>:int)
          
          P[<append_1030@91:1>](<append_1030@91:0>:int,<append_1030@91:1>:int),
          ((<append_1030@91:0> = 0) && (<<append_1030@91:2>@94:0> = <append_1030@91:1>))
          |- P[<<append_1030@91:2>@94:0>](<append_1030@91:0>:int,<append_1030@91:1>:int,
                                          <<append_1030@91:2>@94:0>:int)
          
          P[<<rev_1033@67:1>@84:0>](<append_1030@91:0>:int,<append_1030@91:0>:int)|- P[<append_1030@91:1>](
          <append_1030@91:0>:int,<append_1030@91:1>:int)
          
          P[<rev_1033@67:0>](<rev_1033@67:0>:int),
          P[<<rev_1033@70:1>@73:0>]((-1 + <rev_1033@67:0>):int,var93:int),
          P[<<append_1030@77:2>@80:0>](var93:int,1:int,<<rev_1033@67:1>@84:0>:int), (
          <rev_1033@67:0> <> 0) |- P[<<rev_1033@67:1>@84:0>](<rev_1033@67:0>:int,
                                                             <<rev_1033@67:1>@84:0>:int)
          
          P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
          ((<append_1030@77:0> = 0) && (<<append_1030@77:2>@80:0> = <append_1030@77:1>))
          |- P[<<append_1030@77:2>@80:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                          <<append_1030@77:2>@80:0>:int)
          
          P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
          P[<<rev_1033@70:1>@73:0>]((-1 + <f_rev_1295@75:0>):int,<append_1030@77:0>:int),
          ((<append_1030@77:1> = 1) && (<f_rev_1295@75:0> <> 0))
          |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
          
          P[<rev_1033@70:0>](<rev_1033@70:0>:int), ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
          |- P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int)
          
          P[<rev_1033@67:0>]((1 + <rev_1033@70:0>):int), ((1 + <rev_1033@70:0>) <> 0)
          |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
          
          |- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
        input to Yhorn:
          P[<fail_1301@99:0>](<fail_1301@99:0>:int)|- bot
          
          P[<<rev_1033@67:1>@84:0>](<f_k_main_u_1296@96:1>:int,<f_k_main_u_1296@96:1>:int),
          P[<<append_1030@91:2>@94:0>](<f_k_main_u_1296@96:1>:int,<f_k_main_u_1296@96:0>:int,<f_k_main_u_1296@96:4>:int),
          ((<f_k_main_u_1296@96:4> <> (<f_k_main_u_1296@96:1> + <f_k_main_u_1296@96:0>)) && (<fail_1301@99:0> = 1))
          |- P[<fail_1301@99:0>](<fail_1301@99:0>:int)
          
          P[<append_1030@91:1>](<append_1030@91:0>:int,<append_1030@91:1>:int),
          ((<<append_1030@91:2>@94:0> = <append_1030@91:1>) && (<append_1030@91:0> = 0))
          |- P[<<append_1030@91:2>@94:0>](<append_1030@91:0>:int,<append_1030@91:1>:int,
                                          <<append_1030@91:2>@94:0>:int)
          
          P[<<rev_1033@67:1>@84:0>](<append_1030@91:0>:int,<append_1030@91:0>:int)|- P[<append_1030@91:1>](
          <append_1030@91:0>:int,<append_1030@91:1>:int)
          
          P[<rev_1033@67:0>](<rev_1033@67:0>:int),
          P[<<rev_1033@70:1>@73:0>](var94:int,var93:int),
          P[<<append_1030@77:2>@80:0>](var93:int,var95:int,<<rev_1033@67:1>@84:0>:int),
          (((1 + var94) = <rev_1033@67:0>) && ((<rev_1033@67:0> <> 0) && (var95 = 1)))
          |- P[<<rev_1033@67:1>@84:0>](<rev_1033@67:0>:int,<<rev_1033@67:1>@84:0>:int)
          
          P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
          ((<<append_1030@77:2>@80:0> = <append_1030@77:1>) && (<append_1030@77:0> = 0))
          |- P[<<append_1030@77:2>@80:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                          <<append_1030@77:2>@80:0>:int)
          
          P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
          P[<<rev_1033@70:1>@73:0>](var96:int,<append_1030@77:0>:int),
          (((1 + var96) = <f_rev_1295@75:0>) && ((<f_rev_1295@75:0> <> 0) && (<append_1030@77:1> = 1)))
          |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
          
          P[<rev_1033@70:0>](<rev_1033@70:0>:int), ((<<rev_1033@70:1>@73:0> = 0) && (<rev_1033@70:0> = 0))
          |- P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int)
          
          P[<rev_1033@67:0>](var97:int), ((var97 = (1 + <rev_1033@70:0>)) && ((1 + <rev_1033@70:0>) <> 0))
          |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1301_sep_99_sep_0($834)) -> 1=0.
(($834-1=0) & ($835-$836-$837<>0)) & (v_sep_append_1030_sep_91_sep_2_sep_94_sep_0($836,$837,$835)) & (v_sep_rev_1033_sep_67_sep_1_sep_84_sep_0($836,$836)) -> v_sep_fail_1301_sep_99_sep_0($834).
(($838=0) & ($839-$840=0)) & (v_sep_append_1030_sep_91_sep_1($838,$840)) -> v_sep_append_1030_sep_91_sep_2_sep_94_sep_0($838,$840,$839).
(0=0) & (v_sep_rev_1033_sep_67_sep_1_sep_84_sep_0($838,$838)) -> v_sep_append_1030_sep_91_sep_1($838,$840).
(($841-1=0) & ($842<>0) & (-$842+$843+1=0)) & (v_sep_append_1030_sep_77_sep_2_sep_80_sep_0($844,$841,$845)) & (v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0($843,$844)) & (v_sep_rev_1033_sep_67_sep_0($842)) -> v_sep_rev_1033_sep_67_sep_1_sep_84_sep_0($842,$845).
(($846=0) & ($847-$848=0)) & (v_sep_append_1030_sep_77_sep_1($846,$848)) -> v_sep_append_1030_sep_77_sep_2_sep_80_sep_0($846,$848,$847).
(($848-1=0) & ($849<>0) & (-$849+$850+1=0)) & (v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0($850,$846)) & (v_sep_rev_1033_sep_67_sep_0($849)) -> v_sep_append_1030_sep_77_sep_1($846,$848).
(($851=0) & ($852=0)) & (v_sep_rev_1033_sep_70_sep_0($851)) -> v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0($851,$852).
(($851+1<>0) & (-$851+$853-1=0)) & (v_sep_rev_1033_sep_67_sep_0($853)) -> v_sep_rev_1033_sep_70_sep_0($851).
0=0 -> v_sep_rev_1033_sep_67_sep_0($842).


v_sep_append_1030_sep_77_sep_1: X
v_sep_append_1030_sep_77_sep_2_sep_80_sep_0: X
v_sep_append_1030_sep_91_sep_1: X
v_sep_append_1030_sep_91_sep_2_sep_94_sep_0: X
v_sep_fail_1301_sep_99_sep_0: X
v_sep_rev_1033_sep_67_sep_0: X
v_sep_rev_1033_sep_67_sep_1_sep_84_sep_0: X
v_sep_rev_1033_sep_70_sep_0: X
v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0: X
......................
v_sep_append_1030_sep_77_sep_1: X
v_sep_append_1030_sep_77_sep_2_sep_80_sep_0: X
v_sep_append_1030_sep_91_sep_1: X
v_sep_append_1030_sep_91_sep_2_sep_94_sep_0: X
v_sep_fail_1301_sep_99_sep_0: X
v_sep_rev_1033_sep_67_sep_0: X
v_sep_rev_1033_sep_67_sep_1_sep_84_sep_0: X
v_sep_rev_1033_sep_70_sep_0: X
v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0: X
......
v_sep_append_1030_sep_77_sep_1: X
v_sep_append_1030_sep_77_sep_2_sep_80_sep_0: X
v_sep_append_1030_sep_91_sep_1: X
v_sep_append_1030_sep_91_sep_2_sep_94_sep_0: X
v_sep_fail_1301_sep_99_sep_0: X
v_sep_rev_1033_sep_67_sep_0: X
v_sep_rev_1033_sep_67_sep_1_sep_84_sep_0: X
v_sep_rev_1033_sep_70_sep_0: X
v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0: X
.............
v_sep_append_1030_sep_77_sep_1: X
v_sep_append_1030_sep_77_sep_2_sep_80_sep_0: X
v_sep_append_1030_sep_91_sep_1: X
v_sep_append_1030_sep_91_sep_2_sep_94_sep_0: X
v_sep_fail_1301_sep_99_sep_0: X
v_sep_rev_1033_sep_67_sep_0: X
v_sep_rev_1033_sep_67_sep_1_sep_84_sep_0: X
v_sep_rev_1033_sep_70_sep_0: X
v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0: X
................
v_sep_append_1030_sep_77_sep_1: X
v_sep_append_1030_sep_77_sep_2_sep_80_sep_0: X
v_sep_append_1030_sep_91_sep_1: X
v_sep_append_1030_sep_91_sep_2_sep_94_sep_0: X
v_sep_fail_1301_sep_99_sep_0: X
v_sep_rev_1033_sep_67_sep_0: X
v_sep_rev_1033_sep_67_sep_1_sep_84_sep_0: X
v_sep_rev_1033_sep_70_sep_0: X
v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0: X
......................(0=0) & (v_sep_fail_1301_sep_99_sep_0($834)) -> 1=0.
(($834-1=0) & ($835-$836-$837<>0)) & (v_sep_append_1030_sep_91_sep_2_sep_94_sep_0($836,$837,$835)) & (v_sep_rev_1033_sep_67_sep_1_sep_84_sep_0($836,$836)) -> v_sep_fail_1301_sep_99_sep_0($834).
(($838=0) & ($839-$840=0)) & (v_sep_append_1030_sep_91_sep_1($838,$840)) -> v_sep_append_1030_sep_91_sep_2_sep_94_sep_0($838,$840,$839).
(0=0) & (v_sep_rev_1033_sep_67_sep_1_sep_84_sep_0($838,$838)) -> v_sep_append_1030_sep_91_sep_1($838,$840).
(($841-1=0) & ($842<>0) & (-$842+$843+1=0)) & (v_sep_append_1030_sep_77_sep_2_sep_80_sep_0($844,$841,$845)) & (v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0($843,$844)) & (v_sep_rev_1033_sep_67_sep_0($842)) -> v_sep_rev_1033_sep_67_sep_1_sep_84_sep_0($842,$845).
(($846=0) & ($847-$848=0)) & (v_sep_append_1030_sep_77_sep_1($846,$848)) -> v_sep_append_1030_sep_77_sep_2_sep_80_sep_0($846,$848,$847).
(($848-1=0) & ($849<>0) & (-$849+$850+1=0)) & (v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0($850,$846)) & (v_sep_rev_1033_sep_67_sep_0($849)) -> v_sep_append_1030_sep_77_sep_1($846,$848).
(($851=0) & ($852=0)) & (v_sep_rev_1033_sep_70_sep_0($851)) -> v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0($851,$852).
(($851+1<>0) & (-$851+$853-1=0)) & (v_sep_rev_1033_sep_67_sep_0($853)) -> v_sep_rev_1033_sep_70_sep_0($851).
0=0 -> v_sep_rev_1033_sep_67_sep_0($842).

          |- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
        solution:
          P[<append_1030@77:1>]($889:int,$891:int) = true
          P[<<append_1030@77:2>@80:0>]($874:int,$876:int,$878:int) = ($876 <= $878)
          P[<append_1030@91:1>]($869:int,$871:int) = (1 <= $869)
          P[<<append_1030@91:2>@94:0>]($857:int,$859:int,$861:int) = ((1 + $857) <= 0)
          P[<fail_1301@99:0>]($854:bool) = false
          P[<rev_1033@67:0>]($886:int) = true
          P[<<rev_1033@67:1>@84:0>]($864:int,$866:int) = (1 <= $866)
          P[<rev_1033@70:0>]($894:int) = true
          P[<<rev_1033@70:1>@73:0>]($881:int,$883:int) = true
        
      end HcSolver.solve_ub(8302)[4] (0.071989 sec.)
      begin HcSolver.check_validity(8724)[4]
        input:
          P[<fail_1301@99:0>](<fail_1301@99:0>:bool)|- bot
          
          P[<<rev_1033@67:1>@84:0>](<f_k_main_u_1296@96:1>:int,<f_k_main_u_1296@96:1>:int),
          P[<<append_1030@91:2>@94:0>](<f_k_main_u_1296@96:1>:int,<f_k_main_u_1296@96:0>:int,<f_k_main_u_1296@96:4>:int),
          ((<f_k_main_u_1296@96:4> <> (<f_k_main_u_1296@96:1> + <f_k_main_u_1296@96:0>)) && <fail_1301@99:0>)
          |- P[<fail_1301@99:0>](<fail_1301@99:0>:bool)
          
          P[<append_1030@91:1>](<append_1030@91:0>:int,<append_1030@91:1>:int),
          ((<append_1030@91:0> = 0) && (<<append_1030@91:2>@94:0> = <append_1030@91:1>))
          |- P[<<append_1030@91:2>@94:0>](<append_1030@91:0>:int,<append_1030@91:1>:int,
                                          <<append_1030@91:2>@94:0>:int)
          
          P[<<rev_1033@67:1>@84:0>](<append_1030@91:0>:int,<append_1030@91:0>:int)|- P[<append_1030@91:1>](
          <append_1030@91:0>:int,<append_1030@91:1>:int)
          
          P[<rev_1033@67:0>](<rev_1033@67:0>:int),
          P[<<rev_1033@70:1>@73:0>]((-1 + <rev_1033@67:0>):int,var93:int),
          P[<<append_1030@77:2>@80:0>](var93:int,1:int,<<rev_1033@67:1>@84:0>:int), (
          <rev_1033@67:0> <> 0) |- P[<<rev_1033@67:1>@84:0>](<rev_1033@67:0>:int,
                                                             <<rev_1033@67:1>@84:0>:int)
          
          P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
          ((<append_1030@77:0> = 0) && (<<append_1030@77:2>@80:0> = <append_1030@77:1>))
          |- P[<<append_1030@77:2>@80:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                          <<append_1030@77:2>@80:0>:int)
          
          P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
          P[<<rev_1033@70:1>@73:0>]((-1 + <f_rev_1295@75:0>):int,<append_1030@77:0>:int),
          ((<append_1030@77:1> = 1) && (<f_rev_1295@75:0> <> 0))
          |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
          
          P[<rev_1033@70:0>](<rev_1033@70:0>:int), ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
          |- P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int)
          
          P[<rev_1033@67:0>]((1 + <rev_1033@70:0>):int), ((1 + <rev_1033@70:0>) <> 0)
          |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
          
          |- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(8724)[4] (0.004000 sec.)
      solution:
        P[<append_1030@77:1>]($889:int,$891:int) = true
        P[<<append_1030@77:2>@80:0>]($874:int,$876:int,$878:int) = ($876 <= $878)
        P[<append_1030@91:1>]($869:int,$871:int) = (1 <= $869)
        P[<<append_1030@91:2>@94:0>]($857:int,$859:int,$861:int) = ((1 + $857) <= 0)
        P[<fail_1301@99:0>]($854:bool) = false
        P[<rev_1033@67:0>]($886:int) = true
        P[<<rev_1033@67:1>@84:0>]($864:int,$866:int) = (1 <= $866)
        P[<rev_1033@70:0>]($894:int) = true
        P[<<rev_1033@70:1>@73:0>]($881:int,$883:int) = true
    end YhornInterface.solve(8301)[3] (0.076989 sec.)
    
  end RefTypeInfer.infer_etrs(5608)[2] (0.163975 sec.)
  refinement types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:{v2:int | (1 <= v2)} -> X) -> X
    rev_1033: v1:int -> (v2:int -> X) -> X
    f_rev_1295: v1:int -> (v2:int -> X) -> v4:int -> X
    append_1030: v1:int -> v2:int -> (v3:{v3:int | (v2 <= v3)} -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    k_main_u_1218: v1:int -> v2:int -> (v3:unit -> X) -> v5:unit -> X
    append_1030: v1:int -> v2:{v2:int | (1 <= v1)} -> (v3:{v3:int | ((1 + v1) <= 0)} -> X) -> X
    f_k_main_u_1296: v1:int -> v2:int -> v3:unit -> (v4:unit -> X) -> v6:int -> X
    fail_1301: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1300: var111:int -> var110:int -> var109:unit -> X
    f_append_1294: var117:int -> var116:int -> (var115:int -> X) -> var113:int -> X
    fail_1302: var121:bool -> (var120:unit -> X) -> X
  abstraction types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: var122:int -> (var123:int[var123 -> (1 <= var123)] -> X) -> X
    f_rev_1295: v1:int -> (v2:int -> X) -> v4:int -> X
    append_1030: var126:int ->
                 var127:int[var127 -> (1 <= var126)] ->
                 (var128:int[var128 -> (var127 <= var128),
                             var128 -> ((1 + var126) <= 0)] -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    k_main_u_1218: v1:int -> v2:int -> (v3:unit -> X) -> v5:unit -> X
    f_k_main_u_1296: v1:int -> v2:int -> v3:unit -> (v4:unit -> X) -> v6:int -> X
    fail_1301: v1:bool -> (v2:unit -> X) -> X
    f_1300: var111:int -> var110:int -> var109:unit -> X
    f_append_1294: var117:int -> var116:int -> (var115:int -> X) -> var113:int -> X
    fail_1302: var121:bool -> (var120:unit -> X) -> X
  
end AbsTypeInfer.refine(5607)[1] (0.168974 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1293
  main_1293 -> (rand_int f_1298)
  append_1030 x_1031 y_1032 k_append_1105 when (x_1031 = 0) -> (k_append_1105 y_1032)
  append_1030 x_1031 y_1032 k_append_1105 when (not (x_1031 = 0)) ->
      (append_1030 (x_1031 - 1) y_1032 (f_append_1294 x_1031 y_1032 k_append_1105))
  f_1298 x_1251 -> (rand_int (f_1299 x_1251))
  f_1299 x_1251 x_1264 -> (main_1035 x_1251 x_1264 (f_1300 x_1251 x_1264))
  f_1300 x_1251 x_1264 x_1248 -> end
  f_append_1294 x_1031 y_1032 k_append_1105 x_1109 -> (k_append_1105 (1 + x_1109))
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (x_1222 = (n_1036 + m_1037)) -> (k_main_1191 ())
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (not (x_1222 = (n_1036 + m_1037))) ->
      (fail_1301 true k_main_1191)
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (x_1197 = n_1036) -> (k_main_u_1218 m_1037 n_1036 k_main_1191 ())
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (not (x_1197 = n_1036)) ->
      (fail_1302 true (k_main_u_1218 m_1037 n_1036 k_main_1191))
  f_rev_1295 n_1034 k_rev_1138 x_1163 -> (append_1030 x_1163 1 k_rev_1138)
  fail_1301 b k -> {fail} => (k ())
  fail_1302 b k -> {fail} => (k ())
  k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 ->
      (append_1030 n_1036 m_1037 (f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191))
  main_1035 n_1036 m_1037 k_main_1191 -> (rev_1033 n_1036 (f_main_1297 m_1037 n_1036 k_main_1191))
  rev_1033 n_1034 k_rev_1138 when (n_1034 = 0) -> (k_rev_1138 0)
  rev_1033 n_1034 k_rev_1138 when (not (n_1034 = 0)) -> (rev_1033 (n_1034 - 1) (f_rev_1295 n_1034 k_rev_1138))
Types:
  main_1293 : X
  append_1030 : (x_1:int -> x_2:int[x_1 >= 1] -> (x_4:int[x_1 <= -1; x_2 <= x_4; x_2 = x_4] -> X) -> X)
  fail_1301 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1302 : (x_1:bool[x_1] -> (unit -> X) -> X)
  rev_1033 : (x_1:int -> (x_3:int[x_3 >= 1; x_1 = 0; x_1 = x_3] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1293 ... --> 
  f_1298 ... --> 
  f_1299 ... --> 
  main_1035 ... --> 
  rev_1033 [1/2] ... --> 
  f_main_1297 [1/2] ... --> 
  k_main_u_1218 ... --> 
  append_1030 [2/2] ... --> 
  append_1030 [2/2] ... --> 
  append_1030 [2/2] ... --> 
  append_1030 [1/2] ... --> 
  f_append_1294 ... --> 
  f_append_1294 ... --> 
  f_append_1294 ... --> 
  f_k_main_u_1296 [2/2] ... --> 
  fail_1301 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(12377)[1]
  program:
    main_1293  | true = ((Random.int 0) f_1298)
    append_1030 x_1031 y_1032 k_append_1105 | (x_1031 = 0) = (k_append_1105 y_1032)
    append_1030 x_1031 y_1032 k_append_1105 | (not (x_1031 = 0)) = (append_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    y_1032
                                                                    (
                                                                    f_append_1294 x_1031
                                                                    y_1032
                                                                    k_append_1105))
    f_1298 x_1251 | true = ((Random.int 0) (f_1299 x_1251))
    f_1299 x_1251 x_1264 | true = (main_1035 x_1251
                                             x_1264
                                             (f_1300 x_1251
                                                     x_1264))
    f_1300 x_1251 x_1264 x_1248 | true = end
    f_append_1294 x_1031 y_1032 k_append_1105 x_1109 | true = (k_append_1105 (
                                                                    1 + x_1109))
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (x_1222 = (n_1036 + m_1037)) = (
    k_main_1191 ())
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (not (x_1222 = (n_1036 + m_1037))) = (
    fail_1301 true
              k_main_1191)
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (x_1197 = n_1036) = (
    k_main_u_1218 m_1037
                  n_1036
                  k_main_1191
                  ())
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (not (x_1197 = n_1036)) = (
    fail_1302 true
              (k_main_u_1218 m_1037
                             n_1036
                             k_main_1191))
    f_rev_1295 n_1034 k_rev_1138 x_1163 | true = (append_1030 x_1163
                                                              1
                                                              k_rev_1138)
    fail_1301 b k | true = (fail ())
    fail_1302 b k | true = (fail ())
    k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 | true = (append_1030
                                                               n_1036
                                                               m_1037
                                                               (f_k_main_u_1296 m_1037
                                                                    n_1036
                                                                    x_1194
                                                                    k_main_1191))
    main_1035 n_1036 m_1037 k_main_1191 | true = (rev_1033 n_1036
                                                           (f_main_1297 m_1037
                                                                    n_1036
                                                                    k_main_1191))
    rev_1033 n_1034 k_rev_1138 | (n_1034 = 0) = (k_rev_1138 0)
    rev_1033 n_1034 k_rev_1138 | (not (n_1034 = 0)) = (rev_1033 (n_1034 - 1)
                                                                (f_rev_1295 n_1034
                                                                    k_rev_1138))
    main_1293:X
    append_1030:int -> int -> (int -> X) -> X
    f_1298:int -> X
    f_1299:int -> int -> X
    f_1300:int -> int -> unit -> X
    f_append_1294:int -> int -> (int -> X) -> int -> X
    f_k_main_u_1296:int -> int -> unit -> (unit -> X) -> int -> X
    f_main_1297:int -> int -> (unit -> X) -> int -> X
    f_rev_1295:int -> (int -> X) -> int -> X
    fail_1301:bool -> (unit -> X) -> X
    fail_1302:bool -> (unit -> X) -> X
    k_main_u_1218:int -> int -> (unit -> X) -> unit -> X
    main_1035:int -> int -> (unit -> X) -> X
    rev_1033:int -> (int -> X) -> X
  inlined functions: f_1298,f_1299,f_1300,f_append_1294,f_k_main_u_1296,f_main_1297,f_rev_1295,k_main_u_1218,main_1035
  counterexample: 0:0:0:0:0:0:0:1:1:1:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1298@105:0> = var131)
     [true.nop((<f_1299@108:0> = <f_1298@105:0>) && (<f_1299@108:1> = var132))
      [true.((<main_1035@110:0> = <f_1299@108:0>) && (<main_1035@110:1> = <f_1299@108:1>))
       [true.(<rev_1033@112:0> = <main_1035@110:0>)
        [(<rev_1033@112:0> = 0).(<<rev_1033@112:1>@115:0> = 0)
         [true.
          ((<f_main_1297@117:0> = <main_1035@110:1>) &&
           ((<f_main_1297@117:1> = <main_1035@110:0>) && (<f_main_1297@117:3> = <<rev_1033@112:1>@115:0>)))
          [(<f_main_1297@117:3> = <f_main_1297@117:1>).
           ((<k_main_u_1218@120:0> = <f_main_1297@117:0>) &&
            ((<k_main_u_1218@120:1> = <f_main_1297@117:1>) && (<k_main_u_1218@120:3> = ())))
           [true.((<append_1030@122:0> = <k_main_u_1218@120:1>) && (<append_1030@122:1> = <k_main_u_1218@120:0>))
            [(not (<append_1030@122:0> = 0)).
             ((<append_1030@125:0> = (<append_1030@122:0> - 1)) && (<append_1030@125:1> = <append_1030@122:1>))
             [(not (<append_1030@125:0> = 0)).
              ((<append_1030@128:0> = (<append_1030@125:0> - 1)) && (<append_1030@128:1> = <append_1030@125:1>))
              [(not (<append_1030@128:0> = 0)).
               ((<append_1030@131:0> = (<append_1030@128:0> - 1)) && (<append_1030@131:1> = <append_1030@128:1>))
               [(<append_1030@131:0> = 0).(<<append_1030@131:2>@134:0> = <append_1030@131:1>)
                [true.
                 ((<f_append_1294@136:0> = <append_1030@128:0>) &&
                  ((<f_append_1294@136:1> = <append_1030@128:1>) &&
                   (<f_append_1294@136:3> = <<append_1030@131:2>@134:0>)))
                 [true.(<<f_append_1294@136:2>@138:0> = (1 + <f_append_1294@136:3>))
                  [true.(<<append_1030@128:2>@140:0> = <<f_append_1294@136:2>@138:0>)
                   [true.
                    ((<f_append_1294@142:0> = <append_1030@125:0>) &&
                     ((<f_append_1294@142:1> = <append_1030@125:1>) &&
                      (<f_append_1294@142:3> = <<append_1030@128:2>@140:0>)))
                    [true.(<<f_append_1294@142:2>@144:0> = (1 + <f_append_1294@142:3>))
                     [true.(<<append_1030@125:2>@146:0> = <<f_append_1294@142:2>@144:0>)
                      [true.
                       ((<f_append_1294@148:0> = <append_1030@122:0>) &&
                        ((<f_append_1294@148:1> = <append_1030@122:1>) &&
                         (<f_append_1294@148:3> = <<append_1030@125:2>@146:0>)))
                       [true.(<<f_append_1294@148:2>@150:0> = (1 + <f_append_1294@148:3>))
                        [true.(<<append_1030@122:2>@152:0> = <<f_append_1294@148:2>@150:0>)
                         [true.
                          ((<f_k_main_u_1296@154:0> = <k_main_u_1218@120:0>) &&
                           ((<f_k_main_u_1296@154:1> = <k_main_u_1218@120:1>) &&
                            ((<f_k_main_u_1296@154:2> = <k_main_u_1218@120:3>) &&
                             (<f_k_main_u_1296@154:4> = <<append_1030@122:2>@152:0>))))
                          [(not (<f_k_main_u_1296@154:4> = (<f_k_main_u_1296@154:1> + <f_k_main_u_1296@154:0>))).
                           (<fail_1301@157:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(12378)[2]
    horn clauses:
      P[<fail_1301@157:0>](<fail_1301@157:0>:bool)|- bot
      
      P[<f_k_main_u_1296@154:4>](<f_k_main_u_1296@154:0>:int,<f_k_main_u_1296@154:1>:int,<f_k_main_u_1296@154:2>:unit,<f_k_main_u_1296@154:4>:int),
      ((<f_k_main_u_1296@154:4> <> (<f_k_main_u_1296@154:1> + <f_k_main_u_1296@154:0>)) && <fail_1301@157:0>)
      |- P[<fail_1301@157:0>](<fail_1301@157:0>:bool)
      
      P[<k_main_u_1218@120:3>](<f_k_main_u_1296@154:0>:int,<f_k_main_u_1296@154:1>:int,<k_main_u_1218@120:3>:unit),
      P[<<append_1030@122:2>@152:0>](<f_k_main_u_1296@154:1>:int,<f_k_main_u_1296@154:0>:int,<f_k_main_u_1296@154:4>:int)|- P[<f_k_main_u_1296@154:4>](
      <f_k_main_u_1296@154:0>:int,<f_k_main_u_1296@154:1>:int,<f_k_main_u_1296@154:2>:unit,
      <f_k_main_u_1296@154:4>:int)
      
      P[<append_1030@122:1>](<append_1030@122:0>:int,<append_1030@122:1>:int),
      P[<<f_append_1294@148:2>@150:0>](<append_1030@122:0>:int,<append_1030@122:1>:int,<<append_1030@122:2>@152:0>:int),
      (<append_1030@122:0> <> 0)
      |- P[<<append_1030@122:2>@152:0>](<append_1030@122:0>:int,<append_1030@122:1>:int,
                                        <<append_1030@122:2>@152:0>:int)
      
      P[<f_append_1294@148:3>](<f_append_1294@148:0>:int,<f_append_1294@148:1>:int,(
                               -1 + <<f_append_1294@148:2>@150:0>):int)|- P[<<f_append_1294@148:2>@150:0>](
      <f_append_1294@148:0>:int,<f_append_1294@148:1>:int,<<f_append_1294@148:2>@150:0>:int)
      
      P[<append_1030@122:1>](<f_append_1294@148:0>:int,<f_append_1294@148:1>:int),
      P[<<append_1030@125:2>@146:0>]((-1 + <f_append_1294@148:0>):int,<f_append_1294@148:1>:int,<f_append_1294@148:3>:int),
      (<f_append_1294@148:0> <> 0)
      |- P[<f_append_1294@148:3>](<f_append_1294@148:0>:int,<f_append_1294@148:1>:int,
                                  <f_append_1294@148:3>:int)
      
      P[<append_1030@125:1>](<append_1030@125:0>:int,<append_1030@125:1>:int),
      P[<<f_append_1294@142:2>@144:0>](<append_1030@125:0>:int,<append_1030@125:1>:int,<<append_1030@125:2>@146:0>:int),
      (<append_1030@125:0> <> 0)
      |- P[<<append_1030@125:2>@146:0>](<append_1030@125:0>:int,<append_1030@125:1>:int,
                                        <<append_1030@125:2>@146:0>:int)
      
      P[<f_append_1294@142:3>](<f_append_1294@142:0>:int,<f_append_1294@142:1>:int,(
                               -1 + <<f_append_1294@142:2>@144:0>):int)|- P[<<f_append_1294@142:2>@144:0>](
      <f_append_1294@142:0>:int,<f_append_1294@142:1>:int,<<f_append_1294@142:2>@144:0>:int)
      
      P[<append_1030@125:1>](<f_append_1294@142:0>:int,<f_append_1294@142:1>:int),
      P[<<append_1030@128:2>@140:0>]((-1 + <f_append_1294@142:0>):int,<f_append_1294@142:1>:int,<f_append_1294@142:3>:int),
      (<f_append_1294@142:0> <> 0)
      |- P[<f_append_1294@142:3>](<f_append_1294@142:0>:int,<f_append_1294@142:1>:int,
                                  <f_append_1294@142:3>:int)
      
      P[<append_1030@128:1>](<append_1030@128:0>:int,<append_1030@128:1>:int),
      P[<<f_append_1294@136:2>@138:0>](<append_1030@128:0>:int,<append_1030@128:1>:int,<<append_1030@128:2>@140:0>:int),
      (<append_1030@128:0> <> 0)
      |- P[<<append_1030@128:2>@140:0>](<append_1030@128:0>:int,<append_1030@128:1>:int,
                                        <<append_1030@128:2>@140:0>:int)
      
      P[<f_append_1294@136:3>](<f_append_1294@136:0>:int,<f_append_1294@136:1>:int,(
                               -1 + <<f_append_1294@136:2>@138:0>):int)|- P[<<f_append_1294@136:2>@138:0>](
      <f_append_1294@136:0>:int,<f_append_1294@136:1>:int,<<f_append_1294@136:2>@138:0>:int)
      
      P[<append_1030@128:1>](<f_append_1294@136:0>:int,<f_append_1294@136:1>:int),
      P[<<append_1030@131:2>@134:0>]((-1 + <f_append_1294@136:0>):int,<f_append_1294@136:1>:int,<f_append_1294@136:3>:int),
      (<f_append_1294@136:0> <> 0)
      |- P[<f_append_1294@136:3>](<f_append_1294@136:0>:int,<f_append_1294@136:1>:int,
                                  <f_append_1294@136:3>:int)
      
      P[<append_1030@131:1>](<append_1030@131:0>:int,<append_1030@131:1>:int),
      ((<append_1030@131:0> = 0) && (<<append_1030@131:2>@134:0> = <append_1030@131:1>))
      |- P[<<append_1030@131:2>@134:0>](<append_1030@131:0>:int,<append_1030@131:1>:int,
                                        <<append_1030@131:2>@134:0>:int)
      
      P[<append_1030@128:1>]((1 + <append_1030@131:0>):int,<append_1030@131:1>:int), (
      (1 + <append_1030@131:0>) <> 0) |- P[<append_1030@131:1>](<append_1030@131:0>:int,
                                                                <append_1030@131:1>:int)
      
      P[<append_1030@125:1>]((1 + <append_1030@128:0>):int,<append_1030@128:1>:int), (
      (1 + <append_1030@128:0>) <> 0) |- P[<append_1030@128:1>](<append_1030@128:0>:int,
                                                                <append_1030@128:1>:int)
      
      P[<append_1030@122:1>]((1 + <append_1030@125:0>):int,<append_1030@125:1>:int), (
      (1 + <append_1030@125:0>) <> 0) |- P[<append_1030@125:1>](<append_1030@125:0>:int,
                                                                <append_1030@125:1>:int)
      
      P[<k_main_u_1218@120:3>](<append_1030@122:1>:int,<append_1030@122:0>:int,<k_main_u_1218@120:3>:unit)|- P[<append_1030@122:1>](
      <append_1030@122:0>:int,<append_1030@122:1>:int)
      
      P[<f_main_1297@117:3>](<k_main_u_1218@120:0>:int,<k_main_u_1218@120:1>:int,<k_main_u_1218@120:1>:int)|- P[<k_main_u_1218@120:3>](
      <k_main_u_1218@120:0>:int,<k_main_u_1218@120:1>:int,<k_main_u_1218@120:3>:unit)
      
      P[<main_1035@110:1>](<f_main_1297@117:1>:int,<f_main_1297@117:0>:int),
      P[<<rev_1033@112:1>@115:0>](<f_main_1297@117:1>:int,<f_main_1297@117:3>:int)|- P[<f_main_1297@117:3>](
      <f_main_1297@117:0>:int,<f_main_1297@117:1>:int,<f_main_1297@117:3>:int)
      
      P[<rev_1033@112:0>](<rev_1033@112:0>:int), ((<rev_1033@112:0> = 0) && (<<rev_1033@112:1>@115:0> = 0))
      |- P[<<rev_1033@112:1>@115:0>](<rev_1033@112:0>:int,<<rev_1033@112:1>@115:0>:int)
      
      P[<main_1035@110:1>](<rev_1033@112:0>:int,<main_1035@110:1>:int)|- P[<rev_1033@112:0>](<rev_1033@112:0>:int)
      
      P[<f_1299@108:1>](<main_1035@110:0>:int,<main_1035@110:1>:int)|- P[<main_1035@110:1>](
      <main_1035@110:0>:int,<main_1035@110:1>:int)
      
      P[<f_1298@105:0>](<f_1299@108:0>:int)|- P[<f_1299@108:1>](<f_1299@108:0>:int,
                                                                <f_1299@108:1>:int)
      
      |- P[<f_1298@105:0>](<f_1298@105:0>:int)
    call trees:
      <main_1293@102>
        <f_1298@105>
          <f_1299@108>
            <main_1035@110>
              <rev_1033@112>
              </<rev_1033@112:1>@115>
              <f_main_1297@117>
                <k_main_u_1218@120>
                  <append_1030@122>
                    <append_1030@125>
                      <append_1030@128>
                        <append_1030@131>
                        </<append_1030@131:2>@134>
                        <f_append_1294@136>
                        </<f_append_1294@136:2>@138>
                      </<append_1030@128:2>@140>
                      <f_append_1294@142>
                      </<f_append_1294@142:2>@144>
                    </<append_1030@125:2>@146>
                    <f_append_1294@148>
                    </<f_append_1294@148:2>@150>
                  </<append_1030@122:2>@152>
                  <f_k_main_u_1296@154>
                    <fail_1301@157>
    inlined horn clauses:
      P[<fail_1301@157:0>](<fail_1301@157:0>:bool)|- bot
      
      P[<<rev_1033@112:1>@115:0>](<f_k_main_u_1296@154:1>:int,<f_k_main_u_1296@154:1>:int),
      P[<<append_1030@122:2>@152:0>](<f_k_main_u_1296@154:1>:int,<f_k_main_u_1296@154:0>:int,<f_k_main_u_1296@154:4>:int),
      ((<f_k_main_u_1296@154:4> <> (<f_k_main_u_1296@154:1> + <f_k_main_u_1296@154:0>)) && <fail_1301@157:0>)
      |- P[<fail_1301@157:0>](<fail_1301@157:0>:bool)
      
      P[<append_1030@122:1>](<append_1030@122:0>:int,<append_1030@122:1>:int),
      P[<<append_1030@125:2>@146:0>]((-1 + <append_1030@122:0>):int,<append_1030@122:1>:int,(
                                     -1 + <<append_1030@122:2>@152:0>):int), (
      <append_1030@122:0> <> 0)
      |- P[<<append_1030@122:2>@152:0>](<append_1030@122:0>:int,<append_1030@122:1>:int,
                                        <<append_1030@122:2>@152:0>:int)
      
      P[<append_1030@125:1>](<append_1030@125:0>:int,<append_1030@125:1>:int),
      P[<<append_1030@128:2>@140:0>]((-1 + <append_1030@125:0>):int,<append_1030@125:1>:int,(
                                     -1 + <<append_1030@125:2>@146:0>):int), (
      <append_1030@125:0> <> 0)
      |- P[<<append_1030@125:2>@146:0>](<append_1030@125:0>:int,<append_1030@125:1>:int,
                                        <<append_1030@125:2>@146:0>:int)
      
      P[<append_1030@128:1>](<append_1030@128:0>:int,<append_1030@128:1>:int),
      P[<<append_1030@131:2>@134:0>]((-1 + <append_1030@128:0>):int,<append_1030@128:1>:int,(
                                     -1 + <<append_1030@128:2>@140:0>):int), (
      <append_1030@128:0> <> 0)
      |- P[<<append_1030@128:2>@140:0>](<append_1030@128:0>:int,<append_1030@128:1>:int,
                                        <<append_1030@128:2>@140:0>:int)
      
      P[<append_1030@131:1>](<append_1030@131:0>:int,<append_1030@131:1>:int),
      ((<append_1030@131:0> = 0) && (<<append_1030@131:2>@134:0> = <append_1030@131:1>))
      |- P[<<append_1030@131:2>@134:0>](<append_1030@131:0>:int,<append_1030@131:1>:int,
                                        <<append_1030@131:2>@134:0>:int)
      
      P[<append_1030@128:1>]((1 + <append_1030@131:0>):int,<append_1030@131:1>:int), (
      (1 + <append_1030@131:0>) <> 0) |- P[<append_1030@131:1>](<append_1030@131:0>:int,
                                                                <append_1030@131:1>:int)
      
      P[<append_1030@125:1>]((1 + <append_1030@128:0>):int,<append_1030@128:1>:int), (
      (1 + <append_1030@128:0>) <> 0) |- P[<append_1030@128:1>](<append_1030@128:0>:int,
                                                                <append_1030@128:1>:int)
      
      P[<append_1030@122:1>]((1 + <append_1030@125:0>):int,<append_1030@125:1>:int), (
      (1 + <append_1030@125:0>) <> 0) |- P[<append_1030@125:1>](<append_1030@125:0>:int,
                                                                <append_1030@125:1>:int)
      
      P[<<rev_1033@112:1>@115:0>](<append_1030@122:0>:int,<append_1030@122:0>:int)|- P[<append_1030@122:1>](
      <append_1030@122:0>:int,<append_1030@122:1>:int)
      
      P[<rev_1033@112:0>](<rev_1033@112:0>:int), ((<rev_1033@112:0> = 0) && (<<rev_1033@112:1>@115:0> = 0))
      |- P[<<rev_1033@112:1>@115:0>](<rev_1033@112:0>:int,<<rev_1033@112:1>@115:0>:int)
      
      |- P[<rev_1033@112:0>](<rev_1033@112:0>:int)
    begin ParamSubstInfer.infer(15255)[3]
      
    end ParamSubstInfer.infer(15255)[3] (0.393940 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(15257)[3]
      
    end RefTypeInfer.elim_coeffs(15257)[3] (0.000000 sec.)
    begin YhornInterface.solve(15662)[3]
      begin HcSolver.solve_ub(15663)[4]
        encoded:
          P[<fail_1301@157:0>](<fail_1301@157:0>:int)|- bot
          
          P[<<rev_1033@112:1>@115:0>](<f_k_main_u_1296@154:1>:int,<f_k_main_u_1296@154:1>:int),
          P[<<append_1030@122:2>@152:0>](<f_k_main_u_1296@154:1>:int,<f_k_main_u_1296@154:0>:int,<f_k_main_u_1296@154:4>:int),
          ((<f_k_main_u_1296@154:4> <> (<f_k_main_u_1296@154:1> + <f_k_main_u_1296@154:0>)) && (<fail_1301@157:0> = 1))
          |- P[<fail_1301@157:0>](<fail_1301@157:0>:int)
          
          P[<append_1030@122:1>](<append_1030@122:0>:int,<append_1030@122:1>:int),
          P[<<append_1030@125:2>@146:0>]((-1 + <append_1030@122:0>):int,<append_1030@122:1>:int,(
                                         -1 + <<append_1030@122:2>@152:0>):int), (
          <append_1030@122:0> <> 0)
          |- P[<<append_1030@122:2>@152:0>](<append_1030@122:0>:int,<append_1030@122:1>:int,
                                            <<append_1030@122:2>@152:0>:int)
          
          P[<append_1030@125:1>](<append_1030@125:0>:int,<append_1030@125:1>:int),
          P[<<append_1030@128:2>@140:0>]((-1 + <append_1030@125:0>):int,<append_1030@125:1>:int,(
                                         -1 + <<append_1030@125:2>@146:0>):int), (
          <append_1030@125:0> <> 0)
          |- P[<<append_1030@125:2>@146:0>](<append_1030@125:0>:int,<append_1030@125:1>:int,
                                            <<append_1030@125:2>@146:0>:int)
          
          P[<append_1030@128:1>](<append_1030@128:0>:int,<append_1030@128:1>:int),
          P[<<append_1030@131:2>@134:0>]((-1 + <append_1030@128:0>):int,<append_1030@128:1>:int,(
                                         -1 + <<append_1030@128:2>@140:0>):int), (
          <append_1030@128:0> <> 0)
          |- P[<<append_1030@128:2>@140:0>](<append_1030@128:0>:int,<append_1030@128:1>:int,
                                            <<append_1030@128:2>@140:0>:int)
          
          P[<append_1030@131:1>](<append_1030@131:0>:int,<append_1030@131:1>:int),
          ((<append_1030@131:0> = 0) && (<<append_1030@131:2>@134:0> = <append_1030@131:1>))
          |- P[<<append_1030@131:2>@134:0>](<append_1030@131:0>:int,<append_1030@131:1>:int,
                                            <<append_1030@131:2>@134:0>:int)
          
          P[<append_1030@128:1>]((1 + <append_1030@131:0>):int,<append_1030@131:1>:int),
          ((1 + <append_1030@131:0>) <> 0) |- P[<append_1030@131:1>](
          <append_1030@131:0>:int,<append_1030@131:1>:int)
          
          P[<append_1030@125:1>]((1 + <append_1030@128:0>):int,<append_1030@128:1>:int),
          ((1 + <append_1030@128:0>) <> 0) |- P[<append_1030@128:1>](
          <append_1030@128:0>:int,<append_1030@128:1>:int)
          
          P[<append_1030@122:1>]((1 + <append_1030@125:0>):int,<append_1030@125:1>:int),
          ((1 + <append_1030@125:0>) <> 0) |- P[<append_1030@125:1>](
          <append_1030@125:0>:int,<append_1030@125:1>:int)
          
          P[<<rev_1033@112:1>@115:0>](<append_1030@122:0>:int,<append_1030@122:0>:int)|- P[<append_1030@122:1>](
          <append_1030@122:0>:int,<append_1030@122:1>:int)
          
          P[<rev_1033@112:0>](<rev_1033@112:0>:int), ((<rev_1033@112:0> = 0) && (<<rev_1033@112:1>@115:0> = 0))
          |- P[<<rev_1033@112:1>@115:0>](<rev_1033@112:0>:int,<<rev_1033@112:1>@115:0>:int)
          
          |- P[<rev_1033@112:0>](<rev_1033@112:0>:int)
        input to Yhorn:
          P[<fail_1301@157:0>](<fail_1301@157:0>:int)|- bot
          
          P[<<rev_1033@112:1>@115:0>](<f_k_main_u_1296@154:1>:int,<f_k_main_u_1296@154:1>:int),
          P[<<append_1030@122:2>@152:0>](<f_k_main_u_1296@154:1>:int,<f_k_main_u_1296@154:0>:int,<f_k_main_u_1296@154:4>:int),
          ((<f_k_main_u_1296@154:4> <> (<f_k_main_u_1296@154:1> + <f_k_main_u_1296@154:0>)) && (<fail_1301@157:0> = 1))
          |- P[<fail_1301@157:0>](<fail_1301@157:0>:int)
          
          P[<append_1030@122:1>](<append_1030@122:0>:int,<append_1030@122:1>:int),
          P[<<append_1030@125:2>@146:0>](var133:int,<append_1030@122:1>:int,var134:int),
          (((1 + var134) = <<append_1030@122:2>@152:0>) &&
           (((1 + var133) = <append_1030@122:0>) && (<append_1030@122:0> <> 0)))
          |- P[<<append_1030@122:2>@152:0>](<append_1030@122:0>:int,<append_1030@122:1>:int,
                                            <<append_1030@122:2>@152:0>:int)
          
          P[<append_1030@125:1>](<append_1030@125:0>:int,<append_1030@125:1>:int),
          P[<<append_1030@128:2>@140:0>](var135:int,<append_1030@125:1>:int,var136:int),
          (((1 + var136) = <<append_1030@125:2>@146:0>) &&
           (((1 + var135) = <append_1030@125:0>) && (<append_1030@125:0> <> 0)))
          |- P[<<append_1030@125:2>@146:0>](<append_1030@125:0>:int,<append_1030@125:1>:int,
                                            <<append_1030@125:2>@146:0>:int)
          
          P[<append_1030@128:1>](<append_1030@128:0>:int,<append_1030@128:1>:int),
          P[<<append_1030@131:2>@134:0>](var137:int,<append_1030@128:1>:int,var138:int),
          (((1 + var138) = <<append_1030@128:2>@140:0>) &&
           (((1 + var137) = <append_1030@128:0>) && (<append_1030@128:0> <> 0)))
          |- P[<<append_1030@128:2>@140:0>](<append_1030@128:0>:int,<append_1030@128:1>:int,
                                            <<append_1030@128:2>@140:0>:int)
          
          P[<append_1030@131:1>](<append_1030@131:0>:int,<append_1030@131:1>:int),
          ((<<append_1030@131:2>@134:0> = <append_1030@131:1>) && (<append_1030@131:0> = 0))
          |- P[<<append_1030@131:2>@134:0>](<append_1030@131:0>:int,<append_1030@131:1>:int,
                                            <<append_1030@131:2>@134:0>:int)
          
          P[<append_1030@128:1>](var139:int,<append_1030@131:1>:int),
          ((var139 = (1 + <append_1030@131:0>)) && ((1 + <append_1030@131:0>) <> 0))
          |- P[<append_1030@131:1>](<append_1030@131:0>:int,<append_1030@131:1>:int)
          
          P[<append_1030@125:1>](var140:int,<append_1030@128:1>:int),
          ((var140 = (1 + <append_1030@128:0>)) && ((1 + <append_1030@128:0>) <> 0))
          |- P[<append_1030@128:1>](<append_1030@128:0>:int,<append_1030@128:1>:int)
          
          P[<append_1030@122:1>](var141:int,<append_1030@125:1>:int),
          ((var141 = (1 + <append_1030@125:0>)) && ((1 + <append_1030@125:0>) <> 0))
          |- P[<append_1030@125:1>](<append_1030@125:0>:int,<append_1030@125:1>:int)
          
          P[<<rev_1033@112:1>@115:0>](<append_1030@122:0>:int,<append_1030@122:0>:int)|- P[<append_1030@122:1>](
          <append_1030@122:0>:int,<append_1030@122:1>:int)
          
          P[<rev_1033@112:0>](<rev_1033@112:0>:int), ((<<rev_1033@112:1>@115:0> = 0) && (<rev_1033@112:0> = 0))
          |- P[<<rev_1033@112:1>@115:0>](<rev_1033@112:0>:int,<<rev_1033@112:1>@115:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1301_sep_157_sep_0($1106)) -> 1=0.
(($1106-1=0) & ($1107-$1108-$1109<>0)) & (v_sep_append_1030_sep_122_sep_2_sep_152_sep_0($1108,$1109,$1107)) & (v_sep_rev_1033_sep_112_sep_1_sep_115_sep_0($1108,$1108)) -> v_sep_fail_1301_sep_157_sep_0($1106).
(($1110<>0) & (-$1110+$1111+1=0) & ($1112-$1113+1=0)) & (v_sep_append_1030_sep_125_sep_2_sep_146_sep_0($1111,$1114,$1112)) & (v_sep_append_1030_sep_122_sep_1($1110,$1114)) -> v_sep_append_1030_sep_122_sep_2_sep_152_sep_0($1110,$1114,$1113).
(($1115<>0) & (-$1115+$1116+1=0) & ($1117-$1118+1=0)) & (v_sep_append_1030_sep_128_sep_2_sep_140_sep_0($1116,$1119,$1117)) & (v_sep_append_1030_sep_125_sep_1($1115,$1119)) -> v_sep_append_1030_sep_125_sep_2_sep_146_sep_0($1115,$1119,$1118).
(($1120<>0) & (-$1120+$1121+1=0) & ($1122-$1123+1=0)) & (v_sep_append_1030_sep_131_sep_2_sep_134_sep_0($1121,$1124,$1122)) & (v_sep_append_1030_sep_128_sep_1($1120,$1124)) -> v_sep_append_1030_sep_128_sep_2_sep_140_sep_0($1120,$1124,$1123).
(($1125=0) & ($1126-$1127=0)) & (v_sep_append_1030_sep_131_sep_1($1125,$1127)) -> v_sep_append_1030_sep_131_sep_2_sep_134_sep_0($1125,$1127,$1126).
(($1125+1<>0) & (-$1125+$1128-1=0)) & (v_sep_append_1030_sep_128_sep_1($1128,$1127)) -> v_sep_append_1030_sep_131_sep_1($1125,$1127).
(($1120+1<>0) & (-$1120+$1129-1=0)) & (v_sep_append_1030_sep_125_sep_1($1129,$1124)) -> v_sep_append_1030_sep_128_sep_1($1120,$1124).
(($1115+1<>0) & (-$1115+$1130-1=0)) & (v_sep_append_1030_sep_122_sep_1($1130,$1119)) -> v_sep_append_1030_sep_125_sep_1($1115,$1119).
(0=0) & (v_sep_rev_1033_sep_112_sep_1_sep_115_sep_0($1110,$1110)) -> v_sep_append_1030_sep_122_sep_1($1110,$1114).
(($1131=0) & ($1132=0)) & (v_sep_rev_1033_sep_112_sep_0($1131)) -> v_sep_rev_1033_sep_112_sep_1_sep_115_sep_0($1131,$1132).
0=0 -> v_sep_rev_1033_sep_112_sep_0($1131).


v_sep_append_1030_sep_122_sep_1: X
v_sep_append_1030_sep_122_sep_2_sep_152_sep_0: X
v_sep_append_1030_sep_125_sep_1: X
v_sep_append_1030_sep_125_sep_2_sep_146_sep_0: X
v_sep_append_1030_sep_128_sep_1: X
v_sep_append_1030_sep_128_sep_2_sep_140_sep_0: X
v_sep_append_1030_sep_131_sep_1: X
v_sep_append_1030_sep_131_sep_2_sep_134_sep_0: X
v_sep_fail_1301_sep_157_sep_0: X
v_sep_rev_1033_sep_112_sep_0: X
v_sep_rev_1033_sep_112_sep_1_sep_115_sep_0: X
...........................
v_sep_append_1030_sep_122_sep_1: X
v_sep_append_1030_sep_122_sep_2_sep_152_sep_0: X
v_sep_append_1030_sep_125_sep_1: X
v_sep_append_1030_sep_125_sep_2_sep_146_sep_0: X
v_sep_append_1030_sep_128_sep_1: X
v_sep_append_1030_sep_128_sep_2_sep_140_sep_0: X
v_sep_append_1030_sep_131_sep_1: X
v_sep_append_1030_sep_131_sep_2_sep_134_sep_0: X
v_sep_fail_1301_sep_157_sep_0: X
v_sep_rev_1033_sep_112_sep_0: X
v_sep_rev_1033_sep_112_sep_1_sep_115_sep_0: X
......
v_sep_append_1030_sep_122_sep_1: X
v_sep_append_1030_sep_122_sep_2_sep_152_sep_0: X
v_sep_append_1030_sep_125_sep_1: X
v_sep_append_1030_sep_125_sep_2_sep_146_sep_0: X
v_sep_append_1030_sep_128_sep_1: X
v_sep_append_1030_sep_128_sep_2_sep_140_sep_0: X
v_sep_append_1030_sep_131_sep_1: X
v_sep_append_1030_sep_131_sep_2_sep_134_sep_0: X
v_sep_fail_1301_sep_157_sep_0: X
v_sep_rev_1033_sep_112_sep_0: X
v_sep_rev_1033_sep_112_sep_1_sep_115_sep_0: X
...........
v_sep_append_1030_sep_122_sep_1: X
v_sep_append_1030_sep_122_sep_2_sep_152_sep_0: X
v_sep_append_1030_sep_125_sep_1: X
v_sep_append_1030_sep_125_sep_2_sep_146_sep_0: X
v_sep_append_1030_sep_128_sep_1: X
v_sep_append_1030_sep_128_sep_2_sep_140_sep_0: X
v_sep_append_1030_sep_131_sep_1: X
v_sep_append_1030_sep_131_sep_2_sep_134_sep_0: X
v_sep_fail_1301_sep_157_sep_0: X
v_sep_rev_1033_sep_112_sep_0: X
v_sep_rev_1033_sep_112_sep_1_sep_115_sep_0: X
................
v_sep_append_1030_sep_122_sep_1: X
v_sep_append_1030_sep_122_sep_2_sep_152_sep_0: X
v_sep_append_1030_sep_125_sep_1: X
v_sep_append_1030_sep_125_sep_2_sep_146_sep_0: X
v_sep_append_1030_sep_128_sep_1: X
v_sep_append_1030_sep_128_sep_2_sep_140_sep_0: X
v_sep_append_1030_sep_131_sep_1: X
v_sep_append_1030_sep_131_sep_2_sep_134_sep_0: X
v_sep_fail_1301_sep_157_sep_0: X
v_sep_rev_1033_sep_112_sep_0: X
v_sep_rev_1033_sep_112_sep_1_sep_115_sep_0: X
......................
v_sep_append_1030_sep_122_sep_1: X
v_sep_append_1030_sep_122_sep_2_sep_152_sep_0: X
v_sep_append_1030_sep_125_sep_1: X
v_sep_append_1030_sep_125_sep_2_sep_146_sep_0: X
v_sep_append_1030_sep_128_sep_1: X
v_sep_append_1030_sep_128_sep_2_sep_140_sep_0: X
v_sep_append_1030_sep_131_sep_1: X
v_sep_append_1030_sep_131_sep_2_sep_134_sep_0: X
v_sep_fail_1301_sep_157_sep_0: X
v_sep_rev_1033_sep_112_sep_0: X
v_sep_rev_1033_sep_112_sep_1_sep_115_sep_0: X
.........................
v_sep_append_1030_sep_122_sep_1: X
v_sep_append_1030_sep_122_sep_2_sep_152_sep_0: X
v_sep_append_1030_sep_125_sep_1: X
v_sep_append_1030_sep_125_sep_2_sep_146_sep_0: X
v_sep_append_1030_sep_128_sep_1: X
v_sep_append_1030_sep_128_sep_2_sep_140_sep_0: X
v_sep_append_1030_sep_131_sep_1: X
v_sep_append_1030_sep_131_sep_2_sep_134_sep_0: X
v_sep_fail_1301_sep_157_sep_0: X
v_sep_rev_1033_sep_112_sep_0: X
v_sep_rev_1033_sep_112_sep_1_sep_115_sep_0: X
...........................(0=0) & (v_sep_fail_1301_sep_157_sep_0($1106)) -> 1=0.
(($1106-1=0) & ($1107-$1108-$1109<>0)) & (v_sep_append_1030_sep_122_sep_2_sep_152_sep_0($1108,$1109,$1107)) & (v_sep_rev_1033_sep_112_sep_1_sep_115_sep_0($1108,$1108)) -> v_sep_fail_1301_sep_157_sep_0($1106).
(($1110<>0) & (-$1110+$1111+1=0) & ($1112-$1113+1=0)) & (v_sep_append_1030_sep_125_sep_2_sep_146_sep_0($1111,$1114,$1112)) & (v_sep_append_1030_sep_122_sep_1($1110,$1114)) -> v_sep_append_1030_sep_122_sep_2_sep_152_sep_0($1110,$1114,$1113).
(($1115<>0) & (-$1115+$1116+1=0) & ($1117-$1118+1=0)) & (v_sep_append_1030_sep_128_sep_2_sep_140_sep_0($1116,$1119,$1117)) & (v_sep_append_1030_sep_125_sep_1($1115,$1119)) -> v_sep_append_1030_sep_125_sep_2_sep_146_sep_0($1115,$1119,$1118).
(($1120<>0) & (-$1120+$1121+1=0) & ($1122-$1123+1=0)) & (v_sep_append_1030_sep_131_sep_2_sep_134_sep_0($1121,$1124,$1122)) & (v_sep_append_1030_sep_128_sep_1($1120,$1124)) -> v_sep_append_1030_sep_128_sep_2_sep_140_sep_0($1120,$1124,$1123).
(($1125=0) & ($1126-$1127=0)) & (v_sep_append_1030_sep_131_sep_1($1125,$1127)) -> v_sep_append_1030_sep_131_sep_2_sep_134_sep_0($1125,$1127,$1126).
(($1125+1<>0) & (-$1125+$1128-1=0)) & (v_sep_append_1030_sep_128_sep_1($1128,$1127)) -> v_sep_append_1030_sep_131_sep_1($1125,$1127).
(($1120+1<>0) & (-$1120+$1129-1=0)) & (v_sep_append_1030_sep_125_sep_1($1129,$1124)) -> v_sep_append_1030_sep_128_sep_1($1120,$1124).
(($1115+1<>0) & (-$1115+$1130-1=0)) & (v_sep_append_1030_sep_122_sep_1($1130,$1119)) -> v_sep_append_1030_sep_125_sep_1($1115,$1119).
(0=0) & (v_sep_rev_1033_sep_112_sep_1_sep_115_sep_0($1110,$1110)) -> v_sep_append_1030_sep_122_sep_1($1110,$1114).
(($1131=0) & ($1132=0)) & (v_sep_rev_1033_sep_112_sep_0($1131)) -> v_sep_rev_1033_sep_112_sep_1_sep_115_sep_0($1131,$1132).
0=0 -> v_sep_rev_1033_sep_112_sep_0($1131).

          |- P[<rev_1033@112:0>](<rev_1033@112:0>:int)
        solution:
          P[<append_1030@122:1>]($1155:int,$1157:int) = ($1155 <= 0)
          P[<<append_1030@122:2>@152:0>]($1136:int,$1138:int,$1140:int) = (15 <= $1136)
          P[<append_1030@125:1>]($1167:int,$1169:int) = ((1 + $1167) <= 0)
          P[<<append_1030@125:2>@146:0>]($1148:int,$1150:int,$1152:int) = (13 <= (2 * $1148))
          P[<append_1030@128:1>]($1179:int,$1181:int) = ((2 + $1179) <= 0)
          P[<<append_1030@128:2>@140:0>]($1160:int,$1162:int,$1164:int) = (3 <= $1160)
          P[<append_1030@131:1>]($1184:int,$1186:int) = ((3 + $1184) <= 0)
          P[<<append_1030@131:2>@134:0>]($1172:int,$1174:int,$1176:int) = (3 <= (4 * $1172))
          P[<fail_1301@157:0>]($1133:bool) = false
          P[<rev_1033@112:0>]($1189:int) = true
          P[<<rev_1033@112:1>@115:0>]($1143:int,$1145:int) = ($1143 <= 0)
        
      end HcSolver.solve_ub(15663)[4] (0.525920 sec.)
      begin HcSolver.check_validity(16294)[4]
        input:
          P[<fail_1301@157:0>](<fail_1301@157:0>:bool)|- bot
          
          P[<<rev_1033@112:1>@115:0>](<f_k_main_u_1296@154:1>:int,<f_k_main_u_1296@154:1>:int),
          P[<<append_1030@122:2>@152:0>](<f_k_main_u_1296@154:1>:int,<f_k_main_u_1296@154:0>:int,<f_k_main_u_1296@154:4>:int),
          ((<f_k_main_u_1296@154:4> <> (<f_k_main_u_1296@154:1> + <f_k_main_u_1296@154:0>)) && <fail_1301@157:0>)
          |- P[<fail_1301@157:0>](<fail_1301@157:0>:bool)
          
          P[<append_1030@122:1>](<append_1030@122:0>:int,<append_1030@122:1>:int),
          P[<<append_1030@125:2>@146:0>]((-1 + <append_1030@122:0>):int,<append_1030@122:1>:int,(
                                         -1 + <<append_1030@122:2>@152:0>):int), (
          <append_1030@122:0> <> 0)
          |- P[<<append_1030@122:2>@152:0>](<append_1030@122:0>:int,<append_1030@122:1>:int,
                                            <<append_1030@122:2>@152:0>:int)
          
          P[<append_1030@125:1>](<append_1030@125:0>:int,<append_1030@125:1>:int),
          P[<<append_1030@128:2>@140:0>]((-1 + <append_1030@125:0>):int,<append_1030@125:1>:int,(
                                         -1 + <<append_1030@125:2>@146:0>):int), (
          <append_1030@125:0> <> 0)
          |- P[<<append_1030@125:2>@146:0>](<append_1030@125:0>:int,<append_1030@125:1>:int,
                                            <<append_1030@125:2>@146:0>:int)
          
          P[<append_1030@128:1>](<append_1030@128:0>:int,<append_1030@128:1>:int),
          P[<<append_1030@131:2>@134:0>]((-1 + <append_1030@128:0>):int,<append_1030@128:1>:int,(
                                         -1 + <<append_1030@128:2>@140:0>):int), (
          <append_1030@128:0> <> 0)
          |- P[<<append_1030@128:2>@140:0>](<append_1030@128:0>:int,<append_1030@128:1>:int,
                                            <<append_1030@128:2>@140:0>:int)
          
          P[<append_1030@131:1>](<append_1030@131:0>:int,<append_1030@131:1>:int),
          ((<append_1030@131:0> = 0) && (<<append_1030@131:2>@134:0> = <append_1030@131:1>))
          |- P[<<append_1030@131:2>@134:0>](<append_1030@131:0>:int,<append_1030@131:1>:int,
                                            <<append_1030@131:2>@134:0>:int)
          
          P[<append_1030@128:1>]((1 + <append_1030@131:0>):int,<append_1030@131:1>:int),
          ((1 + <append_1030@131:0>) <> 0) |- P[<append_1030@131:1>](
          <append_1030@131:0>:int,<append_1030@131:1>:int)
          
          P[<append_1030@125:1>]((1 + <append_1030@128:0>):int,<append_1030@128:1>:int),
          ((1 + <append_1030@128:0>) <> 0) |- P[<append_1030@128:1>](
          <append_1030@128:0>:int,<append_1030@128:1>:int)
          
          P[<append_1030@122:1>]((1 + <append_1030@125:0>):int,<append_1030@125:1>:int),
          ((1 + <append_1030@125:0>) <> 0) |- P[<append_1030@125:1>](
          <append_1030@125:0>:int,<append_1030@125:1>:int)
          
          P[<<rev_1033@112:1>@115:0>](<append_1030@122:0>:int,<append_1030@122:0>:int)|- P[<append_1030@122:1>](
          <append_1030@122:0>:int,<append_1030@122:1>:int)
          
          P[<rev_1033@112:0>](<rev_1033@112:0>:int), ((<rev_1033@112:0> = 0) && (<<rev_1033@112:1>@115:0> = 0))
          |- P[<<rev_1033@112:1>@115:0>](<rev_1033@112:0>:int,<<rev_1033@112:1>@115:0>:int)
          
          |- P[<rev_1033@112:0>](<rev_1033@112:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(16294)[4] (0.005999 sec.)
      solution:
        P[<append_1030@122:1>]($1155:int,$1157:int) = ($1155 <= 0)
        P[<<append_1030@122:2>@152:0>]($1136:int,$1138:int,$1140:int) = (15 <= $1136)
        P[<append_1030@125:1>]($1167:int,$1169:int) = ((1 + $1167) <= 0)
        P[<<append_1030@125:2>@146:0>]($1148:int,$1150:int,$1152:int) = (13 <= (2 * $1148))
        P[<append_1030@128:1>]($1179:int,$1181:int) = ((2 + $1179) <= 0)
        P[<<append_1030@128:2>@140:0>]($1160:int,$1162:int,$1164:int) = (3 <= $1160)
        P[<append_1030@131:1>]($1184:int,$1186:int) = ((3 + $1184) <= 0)
        P[<<append_1030@131:2>@134:0>]($1172:int,$1174:int,$1176:int) = (3 <= (4 * $1172))
        P[<fail_1301@157:0>]($1133:bool) = false
        P[<rev_1033@112:0>]($1189:int) = true
        P[<<rev_1033@112:1>@115:0>]($1143:int,$1145:int) = ($1143 <= 0)
    end YhornInterface.solve(15662)[3] (0.532919 sec.)
    
  end RefTypeInfer.infer_etrs(12378)[2] (0.942857 sec.)
  refinement types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:{v2:int | (v1 <= 0)} -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    k_main_u_1218: v1:int -> v2:int -> (v3:unit -> X) -> v5:unit -> X
    append_1030: v1:int -> v2:{v2:int | (v1 <= 0)} -> (v3:{v3:int | (15 <= v1)} -> X) -> X
    append_1030: v1:int -> v2:{v2:int | ((1 + v1) <= 0)} -> (v3:{v3:int | (13 <= (2 * v1))} -> X) -> X
    append_1030: v1:int -> v2:{v2:int | ((2 + v1) <= 0)} -> (v3:{v3:int | (3 <= v1)} -> X) -> X
    append_1030: v1:int -> v2:{v2:int | ((3 + v1) <= 0)} -> (v3:{v3:int | (3 <= (4 * v1))} -> X) -> X
    f_append_1294: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_append_1294: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_append_1294: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_k_main_u_1296: v1:int -> v2:int -> v3:unit -> (v4:unit -> X) -> v6:int -> X
    fail_1301: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1300: var155:int -> var154:int -> var153:unit -> X
    f_rev_1295: var160:int -> (var159:int -> X) -> var157:int -> X
    fail_1302: var164:bool -> (var163:unit -> X) -> X
  abstraction types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:int[v2 -> (v1 <= 0)] -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    k_main_u_1218: v1:int -> v2:int -> (v3:unit -> X) -> v5:unit -> X
    append_1030: var175:int ->
                 var176:int[var176 -> (var175 <= 0),
                            var176 -> ((1 + var175) <= 0),
                            var176 -> ((2 + var175) <= 0),
                            var176 -> ((3 + var175) <= 0)] ->
                 (var177:int[var177 -> (15 <= var175),
                             var177 -> (13 <= (2 * var175)),
                             var177 -> (3 <= var175),
                             var177 -> (3 <= (4 * var175))] -> X) -> X
    f_append_1294: var186:int -> var187:int -> (var188:int -> X) -> var190:int -> X
    f_k_main_u_1296: v1:int -> v2:int -> v3:unit -> (v4:unit -> X) -> v6:int -> X
    fail_1301: v1:bool -> (v2:unit -> X) -> X
    f_1300: var155:int -> var154:int -> var153:unit -> X
    f_rev_1295: var160:int -> (var159:int -> X) -> var157:int -> X
    fail_1302: var164:bool -> (var163:unit -> X) -> X
  
end AbsTypeInfer.refine(12377)[1] (0.948856 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1293
  main_1293 -> (rand_int f_1298)
  append_1030 x_1031 y_1032 k_append_1105 when (x_1031 = 0) -> (k_append_1105 y_1032)
  append_1030 x_1031 y_1032 k_append_1105 when (not (x_1031 = 0)) ->
      (append_1030 (x_1031 - 1) y_1032 (f_append_1294 x_1031 y_1032 k_append_1105))
  f_1298 x_1251 -> (rand_int (f_1299 x_1251))
  f_1299 x_1251 x_1264 -> (main_1035 x_1251 x_1264 (f_1300 x_1251 x_1264))
  f_1300 x_1251 x_1264 x_1248 -> end
  f_append_1294 x_1031 y_1032 k_append_1105 x_1109 -> (k_append_1105 (1 + x_1109))
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (x_1222 = (n_1036 + m_1037)) -> (k_main_1191 ())
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (not (x_1222 = (n_1036 + m_1037))) ->
      (fail_1301 true k_main_1191)
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (x_1197 = n_1036) -> (k_main_u_1218 m_1037 n_1036 k_main_1191 ())
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (not (x_1197 = n_1036)) ->
      (fail_1302 true (k_main_u_1218 m_1037 n_1036 k_main_1191))
  f_rev_1295 n_1034 k_rev_1138 x_1163 -> (append_1030 x_1163 1 k_rev_1138)
  fail_1301 b k -> {fail} => (k ())
  fail_1302 b k -> {fail} => (k ())
  k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 ->
      (append_1030 n_1036 m_1037 (f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191))
  main_1035 n_1036 m_1037 k_main_1191 -> (rev_1033 n_1036 (f_main_1297 m_1037 n_1036 k_main_1191))
  rev_1033 n_1034 k_rev_1138 when (n_1034 = 0) -> (k_rev_1138 0)
  rev_1033 n_1034 k_rev_1138 when (not (n_1034 = 0)) -> (rev_1033 (n_1034 - 1) (f_rev_1295 n_1034 k_rev_1138))
Types:
  main_1293 : X
  append_1030 : (x_1:int ->
                 x_2:int[x_1 <= -3; x_1 <= -2; x_1 <= -1; x_1 <= 0; x_1 >= 1] ->
                 (x_4:int[4*x_1 >= 3; x_1 >= 3; 2*x_1 >= 13; x_1 >= 15; x_1 <= -1; x_2 <= x_4; x_2 = x_4] -> X) -> X)
  fail_1301 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1302 : (x_1:bool[x_1] -> (unit -> X) -> X)
  rev_1033 : (x_1:int -> (x_3:int[x_1 <= 0; x_3 >= 1; x_1 = 0; x_1 = x_3] -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Error trace::
  main_1293 ... --> 
  f_1298 ... --> 
  f_1299 ... --> 
  main_1035 ... --> 
  rev_1033 [2/2] ... --> 
  rev_1033 [1/2] ... --> 
  f_rev_1295 ... --> 
  append_1030 [1/2] ... --> 
  f_main_1297 [1/2] ... --> 
  k_main_u_1218 ... --> 
  append_1030 [2/2] ... --> 
  append_1030 [2/2] ... --> 
  append_1030 [1/2] ... --> 
  f_append_1294 ... --> 
  f_append_1294 ... --> 
  f_k_main_u_1296 [2/2] ... --> 
  fail_1301 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 1; 0; 0; 0; 1; 0

(4-3) Checking counter-example ... DONE!

(4-4) Discovering predicates ... 
begin AbsTypeInfer.refine(32956)[1]
  program:
    main_1293  | true = ((Random.int 0) f_1298)
    append_1030 x_1031 y_1032 k_append_1105 | (x_1031 = 0) = (k_append_1105 y_1032)
    append_1030 x_1031 y_1032 k_append_1105 | (not (x_1031 = 0)) = (append_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    y_1032
                                                                    (
                                                                    f_append_1294 x_1031
                                                                    y_1032
                                                                    k_append_1105))
    f_1298 x_1251 | true = ((Random.int 0) (f_1299 x_1251))
    f_1299 x_1251 x_1264 | true = (main_1035 x_1251
                                             x_1264
                                             (f_1300 x_1251
                                                     x_1264))
    f_1300 x_1251 x_1264 x_1248 | true = end
    f_append_1294 x_1031 y_1032 k_append_1105 x_1109 | true = (k_append_1105 (
                                                                    1 + x_1109))
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (x_1222 = (n_1036 + m_1037)) = (
    k_main_1191 ())
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (not (x_1222 = (n_1036 + m_1037))) = (
    fail_1301 true
              k_main_1191)
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (x_1197 = n_1036) = (
    k_main_u_1218 m_1037
                  n_1036
                  k_main_1191
                  ())
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (not (x_1197 = n_1036)) = (
    fail_1302 true
              (k_main_u_1218 m_1037
                             n_1036
                             k_main_1191))
    f_rev_1295 n_1034 k_rev_1138 x_1163 | true = (append_1030 x_1163
                                                              1
                                                              k_rev_1138)
    fail_1301 b k | true = (fail ())
    fail_1302 b k | true = (fail ())
    k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 | true = (append_1030
                                                               n_1036
                                                               m_1037
                                                               (f_k_main_u_1296 m_1037
                                                                    n_1036
                                                                    x_1194
                                                                    k_main_1191))
    main_1035 n_1036 m_1037 k_main_1191 | true = (rev_1033 n_1036
                                                           (f_main_1297 m_1037
                                                                    n_1036
                                                                    k_main_1191))
    rev_1033 n_1034 k_rev_1138 | (n_1034 = 0) = (k_rev_1138 0)
    rev_1033 n_1034 k_rev_1138 | (not (n_1034 = 0)) = (rev_1033 (n_1034 - 1)
                                                                (f_rev_1295 n_1034
                                                                    k_rev_1138))
    main_1293:X
    append_1030:int -> int -> (int -> X) -> X
    f_1298:int -> X
    f_1299:int -> int -> X
    f_1300:int -> int -> unit -> X
    f_append_1294:int -> int -> (int -> X) -> int -> X
    f_k_main_u_1296:int -> int -> unit -> (unit -> X) -> int -> X
    f_main_1297:int -> int -> (unit -> X) -> int -> X
    f_rev_1295:int -> (int -> X) -> int -> X
    fail_1301:bool -> (unit -> X) -> X
    fail_1302:bool -> (unit -> X) -> X
    k_main_u_1218:int -> int -> (unit -> X) -> unit -> X
    main_1035:int -> int -> (unit -> X) -> X
    rev_1033:int -> (int -> X) -> X
  inlined functions: f_1298,f_1299,f_1300,f_append_1294,f_k_main_u_1296,f_main_1297,f_rev_1295,k_main_u_1218,main_1035
  counterexample: 0:0:0:0:1:0:0:0:0:0:1:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1298@163:0> = var192)
     [true.nop((<f_1299@166:0> = <f_1298@163:0>) && (<f_1299@166:1> = var193))
      [true.((<main_1035@168:0> = <f_1299@166:0>) && (<main_1035@168:1> = <f_1299@166:1>))
       [true.(<rev_1033@170:0> = <main_1035@168:0>)
        [(not (<rev_1033@170:0> = 0)).(<rev_1033@173:0> = (<rev_1033@170:0> - 1))
         [(<rev_1033@173:0> = 0).(<<rev_1033@173:1>@176:0> = 0)
          [true.((<f_rev_1295@178:0> = <rev_1033@170:0>) && (<f_rev_1295@178:2> = <<rev_1033@173:1>@176:0>))
           [true.((<append_1030@180:0> = <f_rev_1295@178:2>) && (<append_1030@180:1> = 1))
            [(<append_1030@180:0> = 0).(<<append_1030@180:2>@183:0> = <append_1030@180:1>)
             [true.(<<f_rev_1295@178:1>@185:0> = <<append_1030@180:2>@183:0>)
              [true.(<<rev_1033@170:1>@187:0> = <<f_rev_1295@178:1>@185:0>)
               [true.
                ((<f_main_1297@189:0> = <main_1035@168:1>) &&
                 ((<f_main_1297@189:1> = <main_1035@168:0>) && (<f_main_1297@189:3> = <<rev_1033@170:1>@187:0>)))
                [(<f_main_1297@189:3> = <f_main_1297@189:1>).
                 ((<k_main_u_1218@192:0> = <f_main_1297@189:0>) &&
                  ((<k_main_u_1218@192:1> = <f_main_1297@189:1>) && (<k_main_u_1218@192:3> = ())))
                 [true.((<append_1030@194:0> = <k_main_u_1218@192:1>) && (<append_1030@194:1> = <k_main_u_1218@192:0>))
                  [(not (<append_1030@194:0> = 0)).
                   ((<append_1030@197:0> = (<append_1030@194:0> - 1)) && (<append_1030@197:1> = <append_1030@194:1>))
                   [(not (<append_1030@197:0> = 0)).
                    ((<append_1030@200:0> = (<append_1030@197:0> - 1)) && (<append_1030@200:1> = <append_1030@197:1>))
                    [(<append_1030@200:0> = 0).(<<append_1030@200:2>@203:0> = <append_1030@200:1>)
                     [true.
                      ((<f_append_1294@205:0> = <append_1030@197:0>) &&
                       ((<f_append_1294@205:1> = <append_1030@197:1>) &&
                        (<f_append_1294@205:3> = <<append_1030@200:2>@203:0>)))
                      [true.(<<f_append_1294@205:2>@207:0> = (1 + <f_append_1294@205:3>))
                       [true.(<<append_1030@197:2>@209:0> = <<f_append_1294@205:2>@207:0>)
                        [true.
                         ((<f_append_1294@211:0> = <append_1030@194:0>) &&
                          ((<f_append_1294@211:1> = <append_1030@194:1>) &&
                           (<f_append_1294@211:3> = <<append_1030@197:2>@209:0>)))
                         [true.(<<f_append_1294@211:2>@213:0> = (1 + <f_append_1294@211:3>))
                          [true.(<<append_1030@194:2>@215:0> = <<f_append_1294@211:2>@213:0>)
                           [true.
                            ((<f_k_main_u_1296@217:0> = <k_main_u_1218@192:0>) &&
                             ((<f_k_main_u_1296@217:1> = <k_main_u_1218@192:1>) &&
                              ((<f_k_main_u_1296@217:2> = <k_main_u_1218@192:3>) &&
                               (<f_k_main_u_1296@217:4> = <<append_1030@194:2>@215:0>))))
                            [(not (<f_k_main_u_1296@217:4> = (<f_k_main_u_1296@217:1> + <f_k_main_u_1296@217:0>))).
                             (<fail_1301@220:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(32957)[2]
    horn clauses:
      P[<fail_1301@220:0>](<fail_1301@220:0>:bool)|- bot
      
      P[<f_k_main_u_1296@217:4>](<f_k_main_u_1296@217:0>:int,<f_k_main_u_1296@217:1>:int,<f_k_main_u_1296@217:2>:unit,<f_k_main_u_1296@217:4>:int),
      ((<f_k_main_u_1296@217:4> <> (<f_k_main_u_1296@217:1> + <f_k_main_u_1296@217:0>)) && <fail_1301@220:0>)
      |- P[<fail_1301@220:0>](<fail_1301@220:0>:bool)
      
      P[<k_main_u_1218@192:3>](<f_k_main_u_1296@217:0>:int,<f_k_main_u_1296@217:1>:int,<k_main_u_1218@192:3>:unit),
      P[<<append_1030@194:2>@215:0>](<f_k_main_u_1296@217:1>:int,<f_k_main_u_1296@217:0>:int,<f_k_main_u_1296@217:4>:int)|- P[<f_k_main_u_1296@217:4>](
      <f_k_main_u_1296@217:0>:int,<f_k_main_u_1296@217:1>:int,<f_k_main_u_1296@217:2>:unit,
      <f_k_main_u_1296@217:4>:int)
      
      P[<append_1030@194:1>](<append_1030@194:0>:int,<append_1030@194:1>:int),
      P[<<f_append_1294@211:2>@213:0>](<append_1030@194:0>:int,<append_1030@194:1>:int,<<append_1030@194:2>@215:0>:int),
      (<append_1030@194:0> <> 0)
      |- P[<<append_1030@194:2>@215:0>](<append_1030@194:0>:int,<append_1030@194:1>:int,
                                        <<append_1030@194:2>@215:0>:int)
      
      P[<f_append_1294@211:3>](<f_append_1294@211:0>:int,<f_append_1294@211:1>:int,(
                               -1 + <<f_append_1294@211:2>@213:0>):int)|- P[<<f_append_1294@211:2>@213:0>](
      <f_append_1294@211:0>:int,<f_append_1294@211:1>:int,<<f_append_1294@211:2>@213:0>:int)
      
      P[<append_1030@194:1>](<f_append_1294@211:0>:int,<f_append_1294@211:1>:int),
      P[<<append_1030@197:2>@209:0>]((-1 + <f_append_1294@211:0>):int,<f_append_1294@211:1>:int,<f_append_1294@211:3>:int),
      (<f_append_1294@211:0> <> 0)
      |- P[<f_append_1294@211:3>](<f_append_1294@211:0>:int,<f_append_1294@211:1>:int,
                                  <f_append_1294@211:3>:int)
      
      P[<append_1030@197:1>](<append_1030@197:0>:int,<append_1030@197:1>:int),
      P[<<f_append_1294@205:2>@207:0>](<append_1030@197:0>:int,<append_1030@197:1>:int,<<append_1030@197:2>@209:0>:int),
      (<append_1030@197:0> <> 0)
      |- P[<<append_1030@197:2>@209:0>](<append_1030@197:0>:int,<append_1030@197:1>:int,
                                        <<append_1030@197:2>@209:0>:int)
      
      P[<f_append_1294@205:3>](<f_append_1294@205:0>:int,<f_append_1294@205:1>:int,(
                               -1 + <<f_append_1294@205:2>@207:0>):int)|- P[<<f_append_1294@205:2>@207:0>](
      <f_append_1294@205:0>:int,<f_append_1294@205:1>:int,<<f_append_1294@205:2>@207:0>:int)
      
      P[<append_1030@197:1>](<f_append_1294@205:0>:int,<f_append_1294@205:1>:int),
      P[<<append_1030@200:2>@203:0>]((-1 + <f_append_1294@205:0>):int,<f_append_1294@205:1>:int,<f_append_1294@205:3>:int),
      (<f_append_1294@205:0> <> 0)
      |- P[<f_append_1294@205:3>](<f_append_1294@205:0>:int,<f_append_1294@205:1>:int,
                                  <f_append_1294@205:3>:int)
      
      P[<append_1030@200:1>](<append_1030@200:0>:int,<append_1030@200:1>:int),
      ((<append_1030@200:0> = 0) && (<<append_1030@200:2>@203:0> = <append_1030@200:1>))
      |- P[<<append_1030@200:2>@203:0>](<append_1030@200:0>:int,<append_1030@200:1>:int,
                                        <<append_1030@200:2>@203:0>:int)
      
      P[<append_1030@197:1>]((1 + <append_1030@200:0>):int,<append_1030@200:1>:int), (
      (1 + <append_1030@200:0>) <> 0) |- P[<append_1030@200:1>](<append_1030@200:0>:int,
                                                                <append_1030@200:1>:int)
      
      P[<append_1030@194:1>]((1 + <append_1030@197:0>):int,<append_1030@197:1>:int), (
      (1 + <append_1030@197:0>) <> 0) |- P[<append_1030@197:1>](<append_1030@197:0>:int,
                                                                <append_1030@197:1>:int)
      
      P[<k_main_u_1218@192:3>](<append_1030@194:1>:int,<append_1030@194:0>:int,<k_main_u_1218@192:3>:unit)|- P[<append_1030@194:1>](
      <append_1030@194:0>:int,<append_1030@194:1>:int)
      
      P[<f_main_1297@189:3>](<k_main_u_1218@192:0>:int,<k_main_u_1218@192:1>:int,<k_main_u_1218@192:1>:int)|- P[<k_main_u_1218@192:3>](
      <k_main_u_1218@192:0>:int,<k_main_u_1218@192:1>:int,<k_main_u_1218@192:3>:unit)
      
      P[<main_1035@168:1>](<f_main_1297@189:1>:int,<f_main_1297@189:0>:int),
      P[<<rev_1033@170:1>@187:0>](<f_main_1297@189:1>:int,<f_main_1297@189:3>:int)|- P[<f_main_1297@189:3>](
      <f_main_1297@189:0>:int,<f_main_1297@189:1>:int,<f_main_1297@189:3>:int)
      
      P[<rev_1033@170:0>](<rev_1033@170:0>:int),
      P[<<f_rev_1295@178:1>@185:0>](<rev_1033@170:0>:int,<<rev_1033@170:1>@187:0>:int), (
      <rev_1033@170:0> <> 0) |- P[<<rev_1033@170:1>@187:0>](<rev_1033@170:0>:int,
                                                            <<rev_1033@170:1>@187:0>:int)
      
      P[<f_rev_1295@178:2>](<f_rev_1295@178:0>:int,<append_1030@180:0>:int),
      P[<<append_1030@180:2>@183:0>](<append_1030@180:0>:int,1:int,<<f_rev_1295@178:1>@185:0>:int)|- P[<<f_rev_1295@178:1>@185:0>](
      <f_rev_1295@178:0>:int,<<f_rev_1295@178:1>@185:0>:int)
      
      P[<append_1030@180:1>](<append_1030@180:0>:int,<append_1030@180:1>:int),
      ((<append_1030@180:0> = 0) && (<<append_1030@180:2>@183:0> = <append_1030@180:1>))
      |- P[<<append_1030@180:2>@183:0>](<append_1030@180:0>:int,<append_1030@180:1>:int,
                                        <<append_1030@180:2>@183:0>:int)
      
      P[<f_rev_1295@178:2>](<f_rev_1295@178:0>:int,<append_1030@180:0>:int), (
      <append_1030@180:1> = 1) |- P[<append_1030@180:1>](<append_1030@180:0>:int,
                                                         <append_1030@180:1>:int)
      
      P[<rev_1033@170:0>](<f_rev_1295@178:0>:int),
      P[<<rev_1033@173:1>@176:0>]((-1 + <f_rev_1295@178:0>):int,<f_rev_1295@178:2>:int), (
      <f_rev_1295@178:0> <> 0) |- P[<f_rev_1295@178:2>](<f_rev_1295@178:0>:int,
                                                        <f_rev_1295@178:2>:int)
      
      P[<rev_1033@173:0>](<rev_1033@173:0>:int), ((<rev_1033@173:0> = 0) && (<<rev_1033@173:1>@176:0> = 0))
      |- P[<<rev_1033@173:1>@176:0>](<rev_1033@173:0>:int,<<rev_1033@173:1>@176:0>:int)
      
      P[<rev_1033@170:0>]((1 + <rev_1033@173:0>):int), ((1 + <rev_1033@173:0>) <> 0)
      |- P[<rev_1033@173:0>](<rev_1033@173:0>:int)
      
      P[<main_1035@168:1>](<rev_1033@170:0>:int,<main_1035@168:1>:int)|- P[<rev_1033@170:0>](<rev_1033@170:0>:int)
      
      P[<f_1299@166:1>](<main_1035@168:0>:int,<main_1035@168:1>:int)|- P[<main_1035@168:1>](
      <main_1035@168:0>:int,<main_1035@168:1>:int)
      
      P[<f_1298@163:0>](<f_1299@166:0>:int)|- P[<f_1299@166:1>](<f_1299@166:0>:int,
                                                                <f_1299@166:1>:int)
      
      |- P[<f_1298@163:0>](<f_1298@163:0>:int)
    call trees:
      <main_1293@160>
        <f_1298@163>
          <f_1299@166>
            <main_1035@168>
              <rev_1033@170>
                <rev_1033@173>
                </<rev_1033@173:1>@176>
                <f_rev_1295@178>
                  <append_1030@180>
                  </<append_1030@180:2>@183>
                </<f_rev_1295@178:1>@185>
              </<rev_1033@170:1>@187>
              <f_main_1297@189>
                <k_main_u_1218@192>
                  <append_1030@194>
                    <append_1030@197>
                      <append_1030@200>
                      </<append_1030@200:2>@203>
                      <f_append_1294@205>
                      </<f_append_1294@205:2>@207>
                    </<append_1030@197:2>@209>
                    <f_append_1294@211>
                    </<f_append_1294@211:2>@213>
                  </<append_1030@194:2>@215>
                  <f_k_main_u_1296@217>
                    <fail_1301@220>
    inlined horn clauses:
      P[<fail_1301@220:0>](<fail_1301@220:0>:bool)|- bot
      
      P[<<rev_1033@170:1>@187:0>](<f_k_main_u_1296@217:1>:int,<f_k_main_u_1296@217:1>:int),
      P[<<append_1030@194:2>@215:0>](<f_k_main_u_1296@217:1>:int,<f_k_main_u_1296@217:0>:int,<f_k_main_u_1296@217:4>:int),
      ((<f_k_main_u_1296@217:4> <> (<f_k_main_u_1296@217:1> + <f_k_main_u_1296@217:0>)) && <fail_1301@220:0>)
      |- P[<fail_1301@220:0>](<fail_1301@220:0>:bool)
      
      P[<append_1030@194:1>](<append_1030@194:0>:int,<append_1030@194:1>:int),
      P[<<append_1030@197:2>@209:0>]((-1 + <append_1030@194:0>):int,<append_1030@194:1>:int,(
                                     -1 + <<append_1030@194:2>@215:0>):int), (
      <append_1030@194:0> <> 0)
      |- P[<<append_1030@194:2>@215:0>](<append_1030@194:0>:int,<append_1030@194:1>:int,
                                        <<append_1030@194:2>@215:0>:int)
      
      P[<append_1030@197:1>](<append_1030@197:0>:int,<append_1030@197:1>:int),
      P[<<append_1030@200:2>@203:0>]((-1 + <append_1030@197:0>):int,<append_1030@197:1>:int,(
                                     -1 + <<append_1030@197:2>@209:0>):int), (
      <append_1030@197:0> <> 0)
      |- P[<<append_1030@197:2>@209:0>](<append_1030@197:0>:int,<append_1030@197:1>:int,
                                        <<append_1030@197:2>@209:0>:int)
      
      P[<append_1030@200:1>](<append_1030@200:0>:int,<append_1030@200:1>:int),
      ((<append_1030@200:0> = 0) && (<<append_1030@200:2>@203:0> = <append_1030@200:1>))
      |- P[<<append_1030@200:2>@203:0>](<append_1030@200:0>:int,<append_1030@200:1>:int,
                                        <<append_1030@200:2>@203:0>:int)
      
      P[<append_1030@197:1>]((1 + <append_1030@200:0>):int,<append_1030@200:1>:int), (
      (1 + <append_1030@200:0>) <> 0) |- P[<append_1030@200:1>](<append_1030@200:0>:int,
                                                                <append_1030@200:1>:int)
      
      P[<append_1030@194:1>]((1 + <append_1030@197:0>):int,<append_1030@197:1>:int), (
      (1 + <append_1030@197:0>) <> 0) |- P[<append_1030@197:1>](<append_1030@197:0>:int,
                                                                <append_1030@197:1>:int)
      
      P[<<rev_1033@170:1>@187:0>](<append_1030@194:0>:int,<append_1030@194:0>:int)|- P[<append_1030@194:1>](
      <append_1030@194:0>:int,<append_1030@194:1>:int)
      
      P[<rev_1033@170:0>](<rev_1033@170:0>:int),
      P[<<rev_1033@173:1>@176:0>]((-1 + <rev_1033@170:0>):int,var194:int),
      P[<<append_1030@180:2>@183:0>](var194:int,1:int,<<rev_1033@170:1>@187:0>:int), (
      <rev_1033@170:0> <> 0) |- P[<<rev_1033@170:1>@187:0>](<rev_1033@170:0>:int,
                                                            <<rev_1033@170:1>@187:0>:int)
      
      P[<append_1030@180:1>](<append_1030@180:0>:int,<append_1030@180:1>:int),
      ((<append_1030@180:0> = 0) && (<<append_1030@180:2>@183:0> = <append_1030@180:1>))
      |- P[<<append_1030@180:2>@183:0>](<append_1030@180:0>:int,<append_1030@180:1>:int,
                                        <<append_1030@180:2>@183:0>:int)
      
      P[<rev_1033@170:0>](<f_rev_1295@178:0>:int),
      P[<<rev_1033@173:1>@176:0>]((-1 + <f_rev_1295@178:0>):int,<append_1030@180:0>:int),
      ((<append_1030@180:1> = 1) && (<f_rev_1295@178:0> <> 0))
      |- P[<append_1030@180:1>](<append_1030@180:0>:int,<append_1030@180:1>:int)
      
      P[<rev_1033@173:0>](<rev_1033@173:0>:int), ((<rev_1033@173:0> = 0) && (<<rev_1033@173:1>@176:0> = 0))
      |- P[<<rev_1033@173:1>@176:0>](<rev_1033@173:0>:int,<<rev_1033@173:1>@176:0>:int)
      
      P[<rev_1033@170:0>]((1 + <rev_1033@173:0>):int), ((1 + <rev_1033@173:0>) <> 0)
      |- P[<rev_1033@173:0>](<rev_1033@173:0>:int)
      
      |- P[<rev_1033@170:0>](<rev_1033@170:0>:int)
    begin ParamSubstInfer.infer(36263)[3]
      
    end ParamSubstInfer.infer(36263)[3] (2.500619 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(36265)[3]
      
    end RefTypeInfer.elim_coeffs(36265)[3] (0.002999 sec.)
    begin YhornInterface.solve(36792)[3]
      begin HcSolver.solve_ub(36793)[4]
        encoded:
          P[<fail_1301@220:0>](<fail_1301@220:0>:int)|- bot
          
          P[<<rev_1033@170:1>@187:0>](<f_k_main_u_1296@217:1>:int,<f_k_main_u_1296@217:1>:int),
          P[<<append_1030@194:2>@215:0>](<f_k_main_u_1296@217:1>:int,<f_k_main_u_1296@217:0>:int,<f_k_main_u_1296@217:4>:int),
          ((<f_k_main_u_1296@217:4> <> (<f_k_main_u_1296@217:1> + <f_k_main_u_1296@217:0>)) && (<fail_1301@220:0> = 1))
          |- P[<fail_1301@220:0>](<fail_1301@220:0>:int)
          
          P[<append_1030@194:1>](<append_1030@194:0>:int,<append_1030@194:1>:int),
          P[<<append_1030@197:2>@209:0>]((-1 + <append_1030@194:0>):int,<append_1030@194:1>:int,(
                                         -1 + <<append_1030@194:2>@215:0>):int), (
          <append_1030@194:0> <> 0)
          |- P[<<append_1030@194:2>@215:0>](<append_1030@194:0>:int,<append_1030@194:1>:int,
                                            <<append_1030@194:2>@215:0>:int)
          
          P[<append_1030@197:1>](<append_1030@197:0>:int,<append_1030@197:1>:int),
          P[<<append_1030@200:2>@203:0>]((-1 + <append_1030@197:0>):int,<append_1030@197:1>:int,(
                                         -1 + <<append_1030@197:2>@209:0>):int), (
          <append_1030@197:0> <> 0)
          |- P[<<append_1030@197:2>@209:0>](<append_1030@197:0>:int,<append_1030@197:1>:int,
                                            <<append_1030@197:2>@209:0>:int)
          
          P[<append_1030@200:1>](<append_1030@200:0>:int,<append_1030@200:1>:int),
          ((<append_1030@200:0> = 0) && (<<append_1030@200:2>@203:0> = <append_1030@200:1>))
          |- P[<<append_1030@200:2>@203:0>](<append_1030@200:0>:int,<append_1030@200:1>:int,
                                            <<append_1030@200:2>@203:0>:int)
          
          P[<append_1030@197:1>]((1 + <append_1030@200:0>):int,<append_1030@200:1>:int),
          ((1 + <append_1030@200:0>) <> 0) |- P[<append_1030@200:1>](
          <append_1030@200:0>:int,<append_1030@200:1>:int)
          
          P[<append_1030@194:1>]((1 + <append_1030@197:0>):int,<append_1030@197:1>:int),
          ((1 + <append_1030@197:0>) <> 0) |- P[<append_1030@197:1>](
          <append_1030@197:0>:int,<append_1030@197:1>:int)
          
          P[<<rev_1033@170:1>@187:0>](<append_1030@194:0>:int,<append_1030@194:0>:int)|- P[<append_1030@194:1>](
          <append_1030@194:0>:int,<append_1030@194:1>:int)
          
          P[<rev_1033@170:0>](<rev_1033@170:0>:int),
          P[<<rev_1033@173:1>@176:0>]((-1 + <rev_1033@170:0>):int,var194:int),
          P[<<append_1030@180:2>@183:0>](var194:int,1:int,<<rev_1033@170:1>@187:0>:int), (
          <rev_1033@170:0> <> 0) |- P[<<rev_1033@170:1>@187:0>](<rev_1033@170:0>:int,
                                                                <<rev_1033@170:1>@187:0>:int)
          
          P[<append_1030@180:1>](<append_1030@180:0>:int,<append_1030@180:1>:int),
          ((<append_1030@180:0> = 0) && (<<append_1030@180:2>@183:0> = <append_1030@180:1>))
          |- P[<<append_1030@180:2>@183:0>](<append_1030@180:0>:int,<append_1030@180:1>:int,
                                            <<append_1030@180:2>@183:0>:int)
          
          P[<rev_1033@170:0>](<f_rev_1295@178:0>:int),
          P[<<rev_1033@173:1>@176:0>]((-1 + <f_rev_1295@178:0>):int,<append_1030@180:0>:int),
          ((<append_1030@180:1> = 1) && (<f_rev_1295@178:0> <> 0))
          |- P[<append_1030@180:1>](<append_1030@180:0>:int,<append_1030@180:1>:int)
          
          P[<rev_1033@173:0>](<rev_1033@173:0>:int), ((<rev_1033@173:0> = 0) && (<<rev_1033@173:1>@176:0> = 0))
          |- P[<<rev_1033@173:1>@176:0>](<rev_1033@173:0>:int,<<rev_1033@173:1>@176:0>:int)
          
          P[<rev_1033@170:0>]((1 + <rev_1033@173:0>):int), ((1 + <rev_1033@173:0>) <> 0)
          |- P[<rev_1033@173:0>](<rev_1033@173:0>:int)
          
          |- P[<rev_1033@170:0>](<rev_1033@170:0>:int)
        input to Yhorn:
          P[<fail_1301@220:0>](<fail_1301@220:0>:int)|- bot
          
          P[<<rev_1033@170:1>@187:0>](<f_k_main_u_1296@217:1>:int,<f_k_main_u_1296@217:1>:int),
          P[<<append_1030@194:2>@215:0>](<f_k_main_u_1296@217:1>:int,<f_k_main_u_1296@217:0>:int,<f_k_main_u_1296@217:4>:int),
          ((<f_k_main_u_1296@217:4> <> (<f_k_main_u_1296@217:1> + <f_k_main_u_1296@217:0>)) && (<fail_1301@220:0> = 1))
          |- P[<fail_1301@220:0>](<fail_1301@220:0>:int)
          
          P[<append_1030@194:1>](<append_1030@194:0>:int,<append_1030@194:1>:int),
          P[<<append_1030@197:2>@209:0>](var195:int,<append_1030@194:1>:int,var196:int),
          (((1 + var196) = <<append_1030@194:2>@215:0>) &&
           (((1 + var195) = <append_1030@194:0>) && (<append_1030@194:0> <> 0)))
          |- P[<<append_1030@194:2>@215:0>](<append_1030@194:0>:int,<append_1030@194:1>:int,
                                            <<append_1030@194:2>@215:0>:int)
          
          P[<append_1030@197:1>](<append_1030@197:0>:int,<append_1030@197:1>:int),
          P[<<append_1030@200:2>@203:0>](var197:int,<append_1030@197:1>:int,var198:int),
          (((1 + var198) = <<append_1030@197:2>@209:0>) &&
           (((1 + var197) = <append_1030@197:0>) && (<append_1030@197:0> <> 0)))
          |- P[<<append_1030@197:2>@209:0>](<append_1030@197:0>:int,<append_1030@197:1>:int,
                                            <<append_1030@197:2>@209:0>:int)
          
          P[<append_1030@200:1>](<append_1030@200:0>:int,<append_1030@200:1>:int),
          ((<<append_1030@200:2>@203:0> = <append_1030@200:1>) && (<append_1030@200:0> = 0))
          |- P[<<append_1030@200:2>@203:0>](<append_1030@200:0>:int,<append_1030@200:1>:int,
                                            <<append_1030@200:2>@203:0>:int)
          
          P[<append_1030@197:1>](var199:int,<append_1030@200:1>:int),
          ((var199 = (1 + <append_1030@200:0>)) && ((1 + <append_1030@200:0>) <> 0))
          |- P[<append_1030@200:1>](<append_1030@200:0>:int,<append_1030@200:1>:int)
          
          P[<append_1030@194:1>](var200:int,<append_1030@197:1>:int),
          ((var200 = (1 + <append_1030@197:0>)) && ((1 + <append_1030@197:0>) <> 0))
          |- P[<append_1030@197:1>](<append_1030@197:0>:int,<append_1030@197:1>:int)
          
          P[<<rev_1033@170:1>@187:0>](<append_1030@194:0>:int,<append_1030@194:0>:int)|- P[<append_1030@194:1>](
          <append_1030@194:0>:int,<append_1030@194:1>:int)
          
          P[<rev_1033@170:0>](<rev_1033@170:0>:int),
          P[<<rev_1033@173:1>@176:0>](var201:int,var194:int),
          P[<<append_1030@180:2>@183:0>](var194:int,var202:int,<<rev_1033@170:1>@187:0>:int),
          (((1 + var201) = <rev_1033@170:0>) && ((<rev_1033@170:0> <> 0) && (var202 = 1)))
          |- P[<<rev_1033@170:1>@187:0>](<rev_1033@170:0>:int,<<rev_1033@170:1>@187:0>:int)
          
          P[<append_1030@180:1>](<append_1030@180:0>:int,<append_1030@180:1>:int),
          ((<<append_1030@180:2>@183:0> = <append_1030@180:1>) && (<append_1030@180:0> = 0))
          |- P[<<append_1030@180:2>@183:0>](<append_1030@180:0>:int,<append_1030@180:1>:int,
                                            <<append_1030@180:2>@183:0>:int)
          
          P[<rev_1033@170:0>](<f_rev_1295@178:0>:int),
          P[<<rev_1033@173:1>@176:0>](var203:int,<append_1030@180:0>:int),
          (((1 + var203) = <f_rev_1295@178:0>) && ((<f_rev_1295@178:0> <> 0) && (<append_1030@180:1> = 1)))
          |- P[<append_1030@180:1>](<append_1030@180:0>:int,<append_1030@180:1>:int)
          
          P[<rev_1033@173:0>](<rev_1033@173:0>:int), ((<<rev_1033@173:1>@176:0> = 0) && (<rev_1033@173:0> = 0))
          |- P[<<rev_1033@173:1>@176:0>](<rev_1033@173:0>:int,<<rev_1033@173:1>@176:0>:int)
          
          P[<rev_1033@170:0>](var204:int), ((var204 = (1 + <rev_1033@173:0>)) && ((1 + <rev_1033@173:0>) <> 0))
          |- P[<rev_1033@173:0>](<rev_1033@173:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1301_sep_220_sep_0($1564)) -> 1=0.
(($1564-1=0) & ($1565-$1566-$1567<>0)) & (v_sep_append_1030_sep_194_sep_2_sep_215_sep_0($1566,$1567,$1565)) & (v_sep_rev_1033_sep_170_sep_1_sep_187_sep_0($1566,$1566)) -> v_sep_fail_1301_sep_220_sep_0($1564).
(($1568<>0) & (-$1568+$1569+1=0) & ($1570-$1571+1=0)) & (v_sep_append_1030_sep_197_sep_2_sep_209_sep_0($1569,$1572,$1570)) & (v_sep_append_1030_sep_194_sep_1($1568,$1572)) -> v_sep_append_1030_sep_194_sep_2_sep_215_sep_0($1568,$1572,$1571).
(($1573<>0) & (-$1573+$1574+1=0) & ($1575-$1576+1=0)) & (v_sep_append_1030_sep_200_sep_2_sep_203_sep_0($1574,$1577,$1575)) & (v_sep_append_1030_sep_197_sep_1($1573,$1577)) -> v_sep_append_1030_sep_197_sep_2_sep_209_sep_0($1573,$1577,$1576).
(($1578=0) & ($1579-$1580=0)) & (v_sep_append_1030_sep_200_sep_1($1578,$1580)) -> v_sep_append_1030_sep_200_sep_2_sep_203_sep_0($1578,$1580,$1579).
(($1578+1<>0) & (-$1578+$1581-1=0)) & (v_sep_append_1030_sep_197_sep_1($1581,$1580)) -> v_sep_append_1030_sep_200_sep_1($1578,$1580).
(($1573+1<>0) & (-$1573+$1582-1=0)) & (v_sep_append_1030_sep_194_sep_1($1582,$1577)) -> v_sep_append_1030_sep_197_sep_1($1573,$1577).
(0=0) & (v_sep_rev_1033_sep_170_sep_1_sep_187_sep_0($1568,$1568)) -> v_sep_append_1030_sep_194_sep_1($1568,$1572).
(($1583-1=0) & ($1584<>0) & (-$1584+$1585+1=0)) & (v_sep_append_1030_sep_180_sep_2_sep_183_sep_0($1586,$1583,$1587)) & (v_sep_rev_1033_sep_173_sep_1_sep_176_sep_0($1585,$1586)) & (v_sep_rev_1033_sep_170_sep_0($1584)) -> v_sep_rev_1033_sep_170_sep_1_sep_187_sep_0($1584,$1587).
(($1588=0) & ($1589-$1590=0)) & (v_sep_append_1030_sep_180_sep_1($1588,$1590)) -> v_sep_append_1030_sep_180_sep_2_sep_183_sep_0($1588,$1590,$1589).
(($1590-1=0) & ($1591<>0) & (-$1591+$1592+1=0)) & (v_sep_rev_1033_sep_173_sep_1_sep_176_sep_0($1592,$1588)) & (v_sep_rev_1033_sep_170_sep_0($1591)) -> v_sep_append_1030_sep_180_sep_1($1588,$1590).
(($1593=0) & ($1594=0)) & (v_sep_rev_1033_sep_173_sep_0($1593)) -> v_sep_rev_1033_sep_173_sep_1_sep_176_sep_0($1593,$1594).
(($1593+1<>0) & (-$1593+$1595-1=0)) & (v_sep_rev_1033_sep_170_sep_0($1595)) -> v_sep_rev_1033_sep_173_sep_0($1593).
0=0 -> v_sep_rev_1033_sep_170_sep_0($1584).


v_sep_append_1030_sep_180_sep_1: X
v_sep_append_1030_sep_180_sep_2_sep_183_sep_0: X
v_sep_append_1030_sep_194_sep_1: X
v_sep_append_1030_sep_194_sep_2_sep_215_sep_0: X
v_sep_append_1030_sep_197_sep_1: X
v_sep_append_1030_sep_197_sep_2_sep_209_sep_0: X
v_sep_append_1030_sep_200_sep_1: X
v_sep_append_1030_sep_200_sep_2_sep_203_sep_0: X
v_sep_fail_1301_sep_220_sep_0: X
v_sep_rev_1033_sep_170_sep_0: X
v_sep_rev_1033_sep_170_sep_1_sep_187_sep_0: X
v_sep_rev_1033_sep_173_sep_0: X
v_sep_rev_1033_sep_173_sep_1_sep_176_sep_0: X
..................................
v_sep_append_1030_sep_180_sep_1: X
v_sep_append_1030_sep_180_sep_2_sep_183_sep_0: X
v_sep_append_1030_sep_194_sep_1: X
v_sep_append_1030_sep_194_sep_2_sep_215_sep_0: X
v_sep_append_1030_sep_197_sep_1: X
v_sep_append_1030_sep_197_sep_2_sep_209_sep_0: X
v_sep_append_1030_sep_200_sep_1: X
v_sep_append_1030_sep_200_sep_2_sep_203_sep_0: X
v_sep_fail_1301_sep_220_sep_0: X
v_sep_rev_1033_sep_170_sep_0: X
v_sep_rev_1033_sep_170_sep_1_sep_187_sep_0: X
v_sep_rev_1033_sep_173_sep_0: X
v_sep_rev_1033_sep_173_sep_1_sep_176_sep_0: X
......
v_sep_append_1030_sep_180_sep_1: X
v_sep_append_1030_sep_180_sep_2_sep_183_sep_0: X
v_sep_append_1030_sep_194_sep_1: X
v_sep_append_1030_sep_194_sep_2_sep_215_sep_0: X
v_sep_append_1030_sep_197_sep_1: X
v_sep_append_1030_sep_197_sep_2_sep_209_sep_0: X
v_sep_append_1030_sep_200_sep_1: X
v_sep_append_1030_sep_200_sep_2_sep_203_sep_0: X
v_sep_fail_1301_sep_220_sep_0: X
v_sep_rev_1033_sep_170_sep_0: X
v_sep_rev_1033_sep_170_sep_1_sep_187_sep_0: X
v_sep_rev_1033_sep_173_sep_0: X
v_sep_rev_1033_sep_173_sep_1_sep_176_sep_0: X
................
v_sep_append_1030_sep_180_sep_1: X
v_sep_append_1030_sep_180_sep_2_sep_183_sep_0: X
v_sep_append_1030_sep_194_sep_1: X
v_sep_append_1030_sep_194_sep_2_sep_215_sep_0: X
v_sep_append_1030_sep_197_sep_1: X
v_sep_append_1030_sep_197_sep_2_sep_209_sep_0: X
v_sep_append_1030_sep_200_sep_1: X
v_sep_append_1030_sep_200_sep_2_sep_203_sep_0: X
v_sep_fail_1301_sep_220_sep_0: X
v_sep_rev_1033_sep_170_sep_0: X
v_sep_rev_1033_sep_170_sep_1_sep_187_sep_0: X
v_sep_rev_1033_sep_173_sep_0: X
v_sep_rev_1033_sep_173_sep_1_sep_176_sep_0: X
.......................
v_sep_append_1030_sep_180_sep_1: X
v_sep_append_1030_sep_180_sep_2_sep_183_sep_0: X
v_sep_append_1030_sep_194_sep_1: X
v_sep_append_1030_sep_194_sep_2_sep_215_sep_0: X
v_sep_append_1030_sep_197_sep_1: X
v_sep_append_1030_sep_197_sep_2_sep_209_sep_0: X
v_sep_append_1030_sep_200_sep_1: X
v_sep_append_1030_sep_200_sep_2_sep_203_sep_0: X
v_sep_fail_1301_sep_220_sep_0: X
v_sep_rev_1033_sep_170_sep_0: X
v_sep_rev_1033_sep_170_sep_1_sep_187_sep_0: X
v_sep_rev_1033_sep_173_sep_0: X
v_sep_rev_1033_sep_173_sep_1_sep_176_sep_0: X
................................
v_sep_append_1030_sep_180_sep_1: X
v_sep_append_1030_sep_180_sep_2_sep_183_sep_0: X
v_sep_append_1030_sep_194_sep_1: X
v_sep_append_1030_sep_194_sep_2_sep_215_sep_0: X
v_sep_append_1030_sep_197_sep_1: X
v_sep_append_1030_sep_197_sep_2_sep_209_sep_0: X
v_sep_append_1030_sep_200_sep_1: X
v_sep_append_1030_sep_200_sep_2_sep_203_sep_0: X
v_sep_fail_1301_sep_220_sep_0: X
v_sep_rev_1033_sep_170_sep_0: X
v_sep_rev_1033_sep_170_sep_1_sep_187_sep_0: X
v_sep_rev_1033_sep_173_sep_0: X
v_sep_rev_1033_sep_173_sep_1_sep_176_sep_0: X
..................................(0=0) & (v_sep_fail_1301_sep_220_sep_0($1564)) -> 1=0.
(($1564-1=0) & ($1565-$1566-$1567<>0)) & (v_sep_append_1030_sep_194_sep_2_sep_215_sep_0($1566,$1567,$1565)) & (v_sep_rev_1033_sep_170_sep_1_sep_187_sep_0($1566,$1566)) -> v_sep_fail_1301_sep_220_sep_0($1564).
(($1568<>0) & (-$1568+$1569+1=0) & ($1570-$1571+1=0)) & (v_sep_append_1030_sep_197_sep_2_sep_209_sep_0($1569,$1572,$1570)) & (v_sep_append_1030_sep_194_sep_1($1568,$1572)) -> v_sep_append_1030_sep_194_sep_2_sep_215_sep_0($1568,$1572,$1571).
(($1573<>0) & (-$1573+$1574+1=0) & ($1575-$1576+1=0)) & (v_sep_append_1030_sep_200_sep_2_sep_203_sep_0($1574,$1577,$1575)) & (v_sep_append_1030_sep_197_sep_1($1573,$1577)) -> v_sep_append_1030_sep_197_sep_2_sep_209_sep_0($1573,$1577,$1576).
(($1578=0) & ($1579-$1580=0)) & (v_sep_append_1030_sep_200_sep_1($1578,$1580)) -> v_sep_append_1030_sep_200_sep_2_sep_203_sep_0($1578,$1580,$1579).
(($1578+1<>0) & (-$1578+$1581-1=0)) & (v_sep_append_1030_sep_197_sep_1($1581,$1580)) -> v_sep_append_1030_sep_200_sep_1($1578,$1580).
(($1573+1<>0) & (-$1573+$1582-1=0)) & (v_sep_append_1030_sep_194_sep_1($1582,$1577)) -> v_sep_append_1030_sep_197_sep_1($1573,$1577).
(0=0) & (v_sep_rev_1033_sep_170_sep_1_sep_187_sep_0($1568,$1568)) -> v_sep_append_1030_sep_194_sep_1($1568,$1572).
(($1583-1=0) & ($1584<>0) & (-$1584+$1585+1=0)) & (v_sep_append_1030_sep_180_sep_2_sep_183_sep_0($1586,$1583,$1587)) & (v_sep_rev_1033_sep_173_sep_1_sep_176_sep_0($1585,$1586)) & (v_sep_rev_1033_sep_170_sep_0($1584)) -> v_sep_rev_1033_sep_170_sep_1_sep_187_sep_0($1584,$1587).
(($1588=0) & ($1589-$1590=0)) & (v_sep_append_1030_sep_180_sep_1($1588,$1590)) -> v_sep_append_1030_sep_180_sep_2_sep_183_sep_0($1588,$1590,$1589).
(($1590-1=0) & ($1591<>0) & (-$1591+$1592+1=0)) & (v_sep_rev_1033_sep_173_sep_1_sep_176_sep_0($1592,$1588)) & (v_sep_rev_1033_sep_170_sep_0($1591)) -> v_sep_append_1030_sep_180_sep_1($1588,$1590).
(($1593=0) & ($1594=0)) & (v_sep_rev_1033_sep_173_sep_0($1593)) -> v_sep_rev_1033_sep_173_sep_1_sep_176_sep_0($1593,$1594).
(($1593+1<>0) & (-$1593+$1595-1=0)) & (v_sep_rev_1033_sep_170_sep_0($1595)) -> v_sep_rev_1033_sep_173_sep_0($1593).
0=0 -> v_sep_rev_1033_sep_170_sep_0($1584).

          |- P[<rev_1033@170:0>](<rev_1033@170:0>:int)
        solution:
          P[<append_1030@180:1>]($1655:int,$1657:int) = true
          P[<<append_1030@180:2>@183:0>]($1640:int,$1642:int,$1644:int) = ($1644 <= $1642)
          P[<append_1030@194:1>]($1618:int,$1620:int) = ($1618 <= 1)
          P[<<append_1030@194:2>@215:0>]($1599:int,$1601:int,$1603:int) = (5 <= $1599)
          P[<append_1030@197:1>]($1630:int,$1632:int) = ($1630 <= 0)
          P[<<append_1030@197:2>@209:0>]($1611:int,$1613:int,$1615:int) = (2 <= $1611)
          P[<append_1030@200:1>]($1635:int,$1637:int) = ((1 + $1635) <= 0)
          P[<<append_1030@200:2>@203:0>]($1623:int,$1625:int,$1627:int) = (1 <= (3 * $1623))
          P[<fail_1301@220:0>]($1596:bool) = false
          P[<rev_1033@170:0>]($1652:int) = true
          P[<<rev_1033@170:1>@187:0>]($1606:int,$1608:int) = ($1608 <= 1)
          P[<rev_1033@173:0>]($1660:int) = true
          P[<<rev_1033@173:1>@176:0>]($1647:int,$1649:int) = true
        
      end HcSolver.solve_ub(36793)[4] (1.685744 sec.)
      begin HcSolver.check_validity(37524)[4]
        input:
          P[<fail_1301@220:0>](<fail_1301@220:0>:bool)|- bot
          
          P[<<rev_1033@170:1>@187:0>](<f_k_main_u_1296@217:1>:int,<f_k_main_u_1296@217:1>:int),
          P[<<append_1030@194:2>@215:0>](<f_k_main_u_1296@217:1>:int,<f_k_main_u_1296@217:0>:int,<f_k_main_u_1296@217:4>:int),
          ((<f_k_main_u_1296@217:4> <> (<f_k_main_u_1296@217:1> + <f_k_main_u_1296@217:0>)) && <fail_1301@220:0>)
          |- P[<fail_1301@220:0>](<fail_1301@220:0>:bool)
          
          P[<append_1030@194:1>](<append_1030@194:0>:int,<append_1030@194:1>:int),
          P[<<append_1030@197:2>@209:0>]((-1 + <append_1030@194:0>):int,<append_1030@194:1>:int,(
                                         -1 + <<append_1030@194:2>@215:0>):int), (
          <append_1030@194:0> <> 0)
          |- P[<<append_1030@194:2>@215:0>](<append_1030@194:0>:int,<append_1030@194:1>:int,
                                            <<append_1030@194:2>@215:0>:int)
          
          P[<append_1030@197:1>](<append_1030@197:0>:int,<append_1030@197:1>:int),
          P[<<append_1030@200:2>@203:0>]((-1 + <append_1030@197:0>):int,<append_1030@197:1>:int,(
                                         -1 + <<append_1030@197:2>@209:0>):int), (
          <append_1030@197:0> <> 0)
          |- P[<<append_1030@197:2>@209:0>](<append_1030@197:0>:int,<append_1030@197:1>:int,
                                            <<append_1030@197:2>@209:0>:int)
          
          P[<append_1030@200:1>](<append_1030@200:0>:int,<append_1030@200:1>:int),
          ((<append_1030@200:0> = 0) && (<<append_1030@200:2>@203:0> = <append_1030@200:1>))
          |- P[<<append_1030@200:2>@203:0>](<append_1030@200:0>:int,<append_1030@200:1>:int,
                                            <<append_1030@200:2>@203:0>:int)
          
          P[<append_1030@197:1>]((1 + <append_1030@200:0>):int,<append_1030@200:1>:int),
          ((1 + <append_1030@200:0>) <> 0) |- P[<append_1030@200:1>](
          <append_1030@200:0>:int,<append_1030@200:1>:int)
          
          P[<append_1030@194:1>]((1 + <append_1030@197:0>):int,<append_1030@197:1>:int),
          ((1 + <append_1030@197:0>) <> 0) |- P[<append_1030@197:1>](
          <append_1030@197:0>:int,<append_1030@197:1>:int)
          
          P[<<rev_1033@170:1>@187:0>](<append_1030@194:0>:int,<append_1030@194:0>:int)|- P[<append_1030@194:1>](
          <append_1030@194:0>:int,<append_1030@194:1>:int)
          
          P[<rev_1033@170:0>](<rev_1033@170:0>:int),
          P[<<rev_1033@173:1>@176:0>]((-1 + <rev_1033@170:0>):int,var194:int),
          P[<<append_1030@180:2>@183:0>](var194:int,1:int,<<rev_1033@170:1>@187:0>:int), (
          <rev_1033@170:0> <> 0) |- P[<<rev_1033@170:1>@187:0>](<rev_1033@170:0>:int,
                                                                <<rev_1033@170:1>@187:0>:int)
          
          P[<append_1030@180:1>](<append_1030@180:0>:int,<append_1030@180:1>:int),
          ((<append_1030@180:0> = 0) && (<<append_1030@180:2>@183:0> = <append_1030@180:1>))
          |- P[<<append_1030@180:2>@183:0>](<append_1030@180:0>:int,<append_1030@180:1>:int,
                                            <<append_1030@180:2>@183:0>:int)
          
          P[<rev_1033@170:0>](<f_rev_1295@178:0>:int),
          P[<<rev_1033@173:1>@176:0>]((-1 + <f_rev_1295@178:0>):int,<append_1030@180:0>:int),
          ((<append_1030@180:1> = 1) && (<f_rev_1295@178:0> <> 0))
          |- P[<append_1030@180:1>](<append_1030@180:0>:int,<append_1030@180:1>:int)
          
          P[<rev_1033@173:0>](<rev_1033@173:0>:int), ((<rev_1033@173:0> = 0) && (<<rev_1033@173:1>@176:0> = 0))
          |- P[<<rev_1033@173:1>@176:0>](<rev_1033@173:0>:int,<<rev_1033@173:1>@176:0>:int)
          
          P[<rev_1033@170:0>]((1 + <rev_1033@173:0>):int), ((1 + <rev_1033@173:0>) <> 0)
          |- P[<rev_1033@173:0>](<rev_1033@173:0>:int)
          
          |- P[<rev_1033@170:0>](<rev_1033@170:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(37524)[4] (0.005999 sec.)
      solution:
        P[<append_1030@180:1>]($1655:int,$1657:int) = true
        P[<<append_1030@180:2>@183:0>]($1640:int,$1642:int,$1644:int) = ($1644 <= $1642)
        P[<append_1030@194:1>]($1618:int,$1620:int) = ($1618 <= 1)
        P[<<append_1030@194:2>@215:0>]($1599:int,$1601:int,$1603:int) = (5 <= $1599)
        P[<append_1030@197:1>]($1630:int,$1632:int) = ($1630 <= 0)
        P[<<append_1030@197:2>@209:0>]($1611:int,$1613:int,$1615:int) = (2 <= $1611)
        P[<append_1030@200:1>]($1635:int,$1637:int) = ((1 + $1635) <= 0)
        P[<<append_1030@200:2>@203:0>]($1623:int,$1625:int,$1627:int) = (1 <= (3 * $1623))
        P[<fail_1301@220:0>]($1596:bool) = false
        P[<rev_1033@170:0>]($1652:int) = true
        P[<<rev_1033@170:1>@187:0>]($1606:int,$1608:int) = ($1608 <= 1)
        P[<rev_1033@173:0>]($1660:int) = true
        P[<<rev_1033@173:1>@176:0>]($1647:int,$1649:int) = true
    end YhornInterface.solve(36792)[3] (1.692743 sec.)
    
  end RefTypeInfer.infer_etrs(32957)[2] (4.223357 sec.)
  refinement types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:{v2:int | (v2 <= 1)} -> X) -> X
    rev_1033: v1:int -> (v2:int -> X) -> X
    f_rev_1295: v1:int -> (v2:int -> X) -> v4:int -> X
    append_1030: v1:int -> v2:int -> (v3:{v3:int | (v3 <= v2)} -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    k_main_u_1218: v1:int -> v2:int -> (v3:unit -> X) -> v5:unit -> X
    append_1030: v1:int -> v2:{v2:int | (v1 <= 1)} -> (v3:{v3:int | (5 <= v1)} -> X) -> X
    append_1030: v1:int -> v2:{v2:int | (v1 <= 0)} -> (v3:{v3:int | (2 <= v1)} -> X) -> X
    append_1030: v1:int -> v2:{v2:int | ((1 + v1) <= 0)} -> (v3:{v3:int | (1 <= (3 * v1))} -> X) -> X
    f_append_1294: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_append_1294: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_k_main_u_1296: v1:int -> v2:int -> v3:unit -> (v4:unit -> X) -> v6:int -> X
    fail_1301: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1300: var218:int -> var217:int -> var216:unit -> X
    fail_1302: var222:bool -> (var221:unit -> X) -> X
  abstraction types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: var223:int -> (var224:int[var224 -> (var224 <= 1)] -> X) -> X
    f_rev_1295: v1:int -> (v2:int -> X) -> v4:int -> X
    append_1030: var237:int ->
                 var238:int[var238 -> (var237 <= 1),
                            var238 -> (var237 <= 0),
                            var238 -> ((1 + var237) <= 0)] ->
                 (var239:int[var239 -> (var239 <= var238),
                             var239 -> (5 <= var237),
                             var239 -> (2 <= var237),
                             var239 -> (1 <= (3 * var237))] -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    k_main_u_1218: v1:int -> v2:int -> (v3:unit -> X) -> v5:unit -> X
    f_append_1294: var242:int -> var243:int -> (var244:int -> X) -> var246:int -> X
    f_k_main_u_1296: v1:int -> v2:int -> v3:unit -> (v4:unit -> X) -> v6:int -> X
    fail_1301: v1:bool -> (v2:unit -> X) -> X
    f_1300: var218:int -> var217:int -> var216:unit -> X
    fail_1302: var222:bool -> (var221:unit -> X) -> X
  
end AbsTypeInfer.refine(32956)[1] (4.260352 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 5)::
Main: main_1293
  main_1293 -> (rand_int f_1298)
  append_1030 x_1031 y_1032 k_append_1105 when (x_1031 = 0) -> (k_append_1105 y_1032)
  append_1030 x_1031 y_1032 k_append_1105 when (not (x_1031 = 0)) ->
      (append_1030 (x_1031 - 1) y_1032 (f_append_1294 x_1031 y_1032 k_append_1105))
  f_1298 x_1251 -> (rand_int (f_1299 x_1251))
  f_1299 x_1251 x_1264 -> (main_1035 x_1251 x_1264 (f_1300 x_1251 x_1264))
  f_1300 x_1251 x_1264 x_1248 -> end
  f_append_1294 x_1031 y_1032 k_append_1105 x_1109 -> (k_append_1105 (1 + x_1109))
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (x_1222 = (n_1036 + m_1037)) -> (k_main_1191 ())
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (not (x_1222 = (n_1036 + m_1037))) ->
      (fail_1301 true k_main_1191)
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (x_1197 = n_1036) -> (k_main_u_1218 m_1037 n_1036 k_main_1191 ())
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (not (x_1197 = n_1036)) ->
      (fail_1302 true (k_main_u_1218 m_1037 n_1036 k_main_1191))
  f_rev_1295 n_1034 k_rev_1138 x_1163 -> (append_1030 x_1163 1 k_rev_1138)
  fail_1301 b k -> {fail} => (k ())
  fail_1302 b k -> {fail} => (k ())
  k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 ->
      (append_1030 n_1036 m_1037 (f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191))
  main_1035 n_1036 m_1037 k_main_1191 -> (rev_1033 n_1036 (f_main_1297 m_1037 n_1036 k_main_1191))
  rev_1033 n_1034 k_rev_1138 when (n_1034 = 0) -> (k_rev_1138 0)
  rev_1033 n_1034 k_rev_1138 when (not (n_1034 = 0)) -> (rev_1033 (n_1034 - 1) (f_rev_1295 n_1034 k_rev_1138))
Types:
  main_1293 : X
  append_1030 : (x_1:int ->
                 x_2:int[x_1 <= 1; x_1 <= -3; x_1 <= -2; x_1 <= -1; x_1 <= 0; x_1 >= 1] ->
                 (x_4:int[x_1 >= 2; x_1 >= 5; x_2 >= x_4; 4*x_1 >= 3; 
                          x_1 >= 3; 2*x_1 >= 13; x_1 >= 15; x_1 <= -1; 
                          x_2 <= x_4; x_2 = x_4] -> X) -> X)
  fail_1301 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1302 : (x_1:bool[x_1] -> (unit -> X) -> X)
  rev_1033 : (x_1:int -> (x_3:int[x_3 <= 1; x_1 <= 0; x_3 >= 1; x_1 = 0; x_1 = x_3] -> X) -> X)
  
(5-1) Abstracting ... DONE!

(5-2) Checking HORS ... DONE!

Error trace::
  main_1293 ... --> 
  f_1298 ... --> 
  f_1299 ... --> 
  main_1035 ... --> 
  rev_1033 [2/2] ... --> 
  rev_1033 [1/2] ... --> 
  f_rev_1295 ... --> 
  append_1030 [1/2] ... --> 
  f_main_1297 [1/2] ... --> 
  k_main_u_1218 ... --> 
  append_1030 [2/2] ... --> 
  append_1030 [1/2] ... --> 
  f_append_1294 ... --> 
  f_k_main_u_1296 [2/2] ... --> 
  fail_1301 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0; 0; 1; 0

(5-3) Checking counter-example ... DONE!

(5-4) Discovering predicates ... 
begin AbsTypeInfer.refine(72351)[1]
  program:
    main_1293  | true = ((Random.int 0) f_1298)
    append_1030 x_1031 y_1032 k_append_1105 | (x_1031 = 0) = (k_append_1105 y_1032)
    append_1030 x_1031 y_1032 k_append_1105 | (not (x_1031 = 0)) = (append_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    y_1032
                                                                    (
                                                                    f_append_1294 x_1031
                                                                    y_1032
                                                                    k_append_1105))
    f_1298 x_1251 | true = ((Random.int 0) (f_1299 x_1251))
    f_1299 x_1251 x_1264 | true = (main_1035 x_1251
                                             x_1264
                                             (f_1300 x_1251
                                                     x_1264))
    f_1300 x_1251 x_1264 x_1248 | true = end
    f_append_1294 x_1031 y_1032 k_append_1105 x_1109 | true = (k_append_1105 (
                                                                    1 + x_1109))
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (x_1222 = (n_1036 + m_1037)) = (
    k_main_1191 ())
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (not (x_1222 = (n_1036 + m_1037))) = (
    fail_1301 true
              k_main_1191)
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (x_1197 = n_1036) = (
    k_main_u_1218 m_1037
                  n_1036
                  k_main_1191
                  ())
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (not (x_1197 = n_1036)) = (
    fail_1302 true
              (k_main_u_1218 m_1037
                             n_1036
                             k_main_1191))
    f_rev_1295 n_1034 k_rev_1138 x_1163 | true = (append_1030 x_1163
                                                              1
                                                              k_rev_1138)
    fail_1301 b k | true = (fail ())
    fail_1302 b k | true = (fail ())
    k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 | true = (append_1030
                                                               n_1036
                                                               m_1037
                                                               (f_k_main_u_1296 m_1037
                                                                    n_1036
                                                                    x_1194
                                                                    k_main_1191))
    main_1035 n_1036 m_1037 k_main_1191 | true = (rev_1033 n_1036
                                                           (f_main_1297 m_1037
                                                                    n_1036
                                                                    k_main_1191))
    rev_1033 n_1034 k_rev_1138 | (n_1034 = 0) = (k_rev_1138 0)
    rev_1033 n_1034 k_rev_1138 | (not (n_1034 = 0)) = (rev_1033 (n_1034 - 1)
                                                                (f_rev_1295 n_1034
                                                                    k_rev_1138))
    main_1293:X
    append_1030:int -> int -> (int -> X) -> X
    f_1298:int -> X
    f_1299:int -> int -> X
    f_1300:int -> int -> unit -> X
    f_append_1294:int -> int -> (int -> X) -> int -> X
    f_k_main_u_1296:int -> int -> unit -> (unit -> X) -> int -> X
    f_main_1297:int -> int -> (unit -> X) -> int -> X
    f_rev_1295:int -> (int -> X) -> int -> X
    fail_1301:bool -> (unit -> X) -> X
    fail_1302:bool -> (unit -> X) -> X
    k_main_u_1218:int -> int -> (unit -> X) -> unit -> X
    main_1035:int -> int -> (unit -> X) -> X
    rev_1033:int -> (int -> X) -> X
  inlined functions: f_1298,f_1299,f_1300,f_append_1294,f_k_main_u_1296,f_main_1297,f_rev_1295,k_main_u_1218,main_1035
  counterexample: 0:0:0:0:1:0:0:0:0:0:1:0:0:1:0
  error traces:
    [true.nop(<f_1298@226:0> = var248)
     [true.nop((<f_1299@229:0> = <f_1298@226:0>) && (<f_1299@229:1> = var249))
      [true.((<main_1035@231:0> = <f_1299@229:0>) && (<main_1035@231:1> = <f_1299@229:1>))
       [true.(<rev_1033@233:0> = <main_1035@231:0>)
        [(not (<rev_1033@233:0> = 0)).(<rev_1033@236:0> = (<rev_1033@233:0> - 1))
         [(<rev_1033@236:0> = 0).(<<rev_1033@236:1>@239:0> = 0)
          [true.((<f_rev_1295@241:0> = <rev_1033@233:0>) && (<f_rev_1295@241:2> = <<rev_1033@236:1>@239:0>))
           [true.((<append_1030@243:0> = <f_rev_1295@241:2>) && (<append_1030@243:1> = 1))
            [(<append_1030@243:0> = 0).(<<append_1030@243:2>@246:0> = <append_1030@243:1>)
             [true.(<<f_rev_1295@241:1>@248:0> = <<append_1030@243:2>@246:0>)
              [true.(<<rev_1033@233:1>@250:0> = <<f_rev_1295@241:1>@248:0>)
               [true.
                ((<f_main_1297@252:0> = <main_1035@231:1>) &&
                 ((<f_main_1297@252:1> = <main_1035@231:0>) && (<f_main_1297@252:3> = <<rev_1033@233:1>@250:0>)))
                [(<f_main_1297@252:3> = <f_main_1297@252:1>).
                 ((<k_main_u_1218@255:0> = <f_main_1297@252:0>) &&
                  ((<k_main_u_1218@255:1> = <f_main_1297@252:1>) && (<k_main_u_1218@255:3> = ())))
                 [true.((<append_1030@257:0> = <k_main_u_1218@255:1>) && (<append_1030@257:1> = <k_main_u_1218@255:0>))
                  [(not (<append_1030@257:0> = 0)).
                   ((<append_1030@260:0> = (<append_1030@257:0> - 1)) && (<append_1030@260:1> = <append_1030@257:1>))
                   [(<append_1030@260:0> = 0).(<<append_1030@260:2>@263:0> = <append_1030@260:1>)
                    [true.
                     ((<f_append_1294@265:0> = <append_1030@257:0>) &&
                      ((<f_append_1294@265:1> = <append_1030@257:1>) &&
                       (<f_append_1294@265:3> = <<append_1030@260:2>@263:0>)))
                     [true.(<<f_append_1294@265:2>@267:0> = (1 + <f_append_1294@265:3>))
                      [true.(<<append_1030@257:2>@269:0> = <<f_append_1294@265:2>@267:0>)
                       [true.
                        ((<f_k_main_u_1296@271:0> = <k_main_u_1218@255:0>) &&
                         ((<f_k_main_u_1296@271:1> = <k_main_u_1218@255:1>) &&
                          ((<f_k_main_u_1296@271:2> = <k_main_u_1218@255:3>) &&
                           (<f_k_main_u_1296@271:4> = <<append_1030@257:2>@269:0>))))
                        [(not (<f_k_main_u_1296@271:4> = (<f_k_main_u_1296@271:1> + <f_k_main_u_1296@271:0>))).
                         (<fail_1301@274:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(72352)[2]
    horn clauses:
      P[<fail_1301@274:0>](<fail_1301@274:0>:bool)|- bot
      
      P[<f_k_main_u_1296@271:4>](<f_k_main_u_1296@271:0>:int,<f_k_main_u_1296@271:1>:int,<f_k_main_u_1296@271:2>:unit,<f_k_main_u_1296@271:4>:int),
      ((<f_k_main_u_1296@271:4> <> (<f_k_main_u_1296@271:1> + <f_k_main_u_1296@271:0>)) && <fail_1301@274:0>)
      |- P[<fail_1301@274:0>](<fail_1301@274:0>:bool)
      
      P[<k_main_u_1218@255:3>](<f_k_main_u_1296@271:0>:int,<f_k_main_u_1296@271:1>:int,<k_main_u_1218@255:3>:unit),
      P[<<append_1030@257:2>@269:0>](<f_k_main_u_1296@271:1>:int,<f_k_main_u_1296@271:0>:int,<f_k_main_u_1296@271:4>:int)|- P[<f_k_main_u_1296@271:4>](
      <f_k_main_u_1296@271:0>:int,<f_k_main_u_1296@271:1>:int,<f_k_main_u_1296@271:2>:unit,
      <f_k_main_u_1296@271:4>:int)
      
      P[<append_1030@257:1>](<append_1030@257:0>:int,<append_1030@257:1>:int),
      P[<<f_append_1294@265:2>@267:0>](<append_1030@257:0>:int,<append_1030@257:1>:int,<<append_1030@257:2>@269:0>:int),
      (<append_1030@257:0> <> 0)
      |- P[<<append_1030@257:2>@269:0>](<append_1030@257:0>:int,<append_1030@257:1>:int,
                                        <<append_1030@257:2>@269:0>:int)
      
      P[<f_append_1294@265:3>](<f_append_1294@265:0>:int,<f_append_1294@265:1>:int,(
                               -1 + <<f_append_1294@265:2>@267:0>):int)|- P[<<f_append_1294@265:2>@267:0>](
      <f_append_1294@265:0>:int,<f_append_1294@265:1>:int,<<f_append_1294@265:2>@267:0>:int)
      
      P[<append_1030@257:1>](<f_append_1294@265:0>:int,<f_append_1294@265:1>:int),
      P[<<append_1030@260:2>@263:0>]((-1 + <f_append_1294@265:0>):int,<f_append_1294@265:1>:int,<f_append_1294@265:3>:int),
      (<f_append_1294@265:0> <> 0)
      |- P[<f_append_1294@265:3>](<f_append_1294@265:0>:int,<f_append_1294@265:1>:int,
                                  <f_append_1294@265:3>:int)
      
      P[<append_1030@260:1>](<append_1030@260:0>:int,<append_1030@260:1>:int),
      ((<append_1030@260:0> = 0) && (<<append_1030@260:2>@263:0> = <append_1030@260:1>))
      |- P[<<append_1030@260:2>@263:0>](<append_1030@260:0>:int,<append_1030@260:1>:int,
                                        <<append_1030@260:2>@263:0>:int)
      
      P[<append_1030@257:1>]((1 + <append_1030@260:0>):int,<append_1030@260:1>:int), (
      (1 + <append_1030@260:0>) <> 0) |- P[<append_1030@260:1>](<append_1030@260:0>:int,
                                                                <append_1030@260:1>:int)
      
      P[<k_main_u_1218@255:3>](<append_1030@257:1>:int,<append_1030@257:0>:int,<k_main_u_1218@255:3>:unit)|- P[<append_1030@257:1>](
      <append_1030@257:0>:int,<append_1030@257:1>:int)
      
      P[<f_main_1297@252:3>](<k_main_u_1218@255:0>:int,<k_main_u_1218@255:1>:int,<k_main_u_1218@255:1>:int)|- P[<k_main_u_1218@255:3>](
      <k_main_u_1218@255:0>:int,<k_main_u_1218@255:1>:int,<k_main_u_1218@255:3>:unit)
      
      P[<main_1035@231:1>](<f_main_1297@252:1>:int,<f_main_1297@252:0>:int),
      P[<<rev_1033@233:1>@250:0>](<f_main_1297@252:1>:int,<f_main_1297@252:3>:int)|- P[<f_main_1297@252:3>](
      <f_main_1297@252:0>:int,<f_main_1297@252:1>:int,<f_main_1297@252:3>:int)
      
      P[<rev_1033@233:0>](<rev_1033@233:0>:int),
      P[<<f_rev_1295@241:1>@248:0>](<rev_1033@233:0>:int,<<rev_1033@233:1>@250:0>:int), (
      <rev_1033@233:0> <> 0) |- P[<<rev_1033@233:1>@250:0>](<rev_1033@233:0>:int,
                                                            <<rev_1033@233:1>@250:0>:int)
      
      P[<f_rev_1295@241:2>](<f_rev_1295@241:0>:int,<append_1030@243:0>:int),
      P[<<append_1030@243:2>@246:0>](<append_1030@243:0>:int,1:int,<<f_rev_1295@241:1>@248:0>:int)|- P[<<f_rev_1295@241:1>@248:0>](
      <f_rev_1295@241:0>:int,<<f_rev_1295@241:1>@248:0>:int)
      
      P[<append_1030@243:1>](<append_1030@243:0>:int,<append_1030@243:1>:int),
      ((<append_1030@243:0> = 0) && (<<append_1030@243:2>@246:0> = <append_1030@243:1>))
      |- P[<<append_1030@243:2>@246:0>](<append_1030@243:0>:int,<append_1030@243:1>:int,
                                        <<append_1030@243:2>@246:0>:int)
      
      P[<f_rev_1295@241:2>](<f_rev_1295@241:0>:int,<append_1030@243:0>:int), (
      <append_1030@243:1> = 1) |- P[<append_1030@243:1>](<append_1030@243:0>:int,
                                                         <append_1030@243:1>:int)
      
      P[<rev_1033@233:0>](<f_rev_1295@241:0>:int),
      P[<<rev_1033@236:1>@239:0>]((-1 + <f_rev_1295@241:0>):int,<f_rev_1295@241:2>:int), (
      <f_rev_1295@241:0> <> 0) |- P[<f_rev_1295@241:2>](<f_rev_1295@241:0>:int,
                                                        <f_rev_1295@241:2>:int)
      
      P[<rev_1033@236:0>](<rev_1033@236:0>:int), ((<rev_1033@236:0> = 0) && (<<rev_1033@236:1>@239:0> = 0))
      |- P[<<rev_1033@236:1>@239:0>](<rev_1033@236:0>:int,<<rev_1033@236:1>@239:0>:int)
      
      P[<rev_1033@233:0>]((1 + <rev_1033@236:0>):int), ((1 + <rev_1033@236:0>) <> 0)
      |- P[<rev_1033@236:0>](<rev_1033@236:0>:int)
      
      P[<main_1035@231:1>](<rev_1033@233:0>:int,<main_1035@231:1>:int)|- P[<rev_1033@233:0>](<rev_1033@233:0>:int)
      
      P[<f_1299@229:1>](<main_1035@231:0>:int,<main_1035@231:1>:int)|- P[<main_1035@231:1>](
      <main_1035@231:0>:int,<main_1035@231:1>:int)
      
      P[<f_1298@226:0>](<f_1299@229:0>:int)|- P[<f_1299@229:1>](<f_1299@229:0>:int,
                                                                <f_1299@229:1>:int)
      
      |- P[<f_1298@226:0>](<f_1298@226:0>:int)
    call trees:
      <main_1293@223>
        <f_1298@226>
          <f_1299@229>
            <main_1035@231>
              <rev_1033@233>
                <rev_1033@236>
                </<rev_1033@236:1>@239>
                <f_rev_1295@241>
                  <append_1030@243>
                  </<append_1030@243:2>@246>
                </<f_rev_1295@241:1>@248>
              </<rev_1033@233:1>@250>
              <f_main_1297@252>
                <k_main_u_1218@255>
                  <append_1030@257>
                    <append_1030@260>
                    </<append_1030@260:2>@263>
                    <f_append_1294@265>
                    </<f_append_1294@265:2>@267>
                  </<append_1030@257:2>@269>
                  <f_k_main_u_1296@271>
                    <fail_1301@274>
    inlined horn clauses:
      P[<fail_1301@274:0>](<fail_1301@274:0>:bool)|- bot
      
      P[<<rev_1033@233:1>@250:0>](<f_k_main_u_1296@271:1>:int,<f_k_main_u_1296@271:1>:int),
      P[<<append_1030@257:2>@269:0>](<f_k_main_u_1296@271:1>:int,<f_k_main_u_1296@271:0>:int,<f_k_main_u_1296@271:4>:int),
      ((<f_k_main_u_1296@271:4> <> (<f_k_main_u_1296@271:1> + <f_k_main_u_1296@271:0>)) && <fail_1301@274:0>)
      |- P[<fail_1301@274:0>](<fail_1301@274:0>:bool)
      
      P[<append_1030@257:1>](<append_1030@257:0>:int,<append_1030@257:1>:int),
      P[<<append_1030@260:2>@263:0>]((-1 + <append_1030@257:0>):int,<append_1030@257:1>:int,(
                                     -1 + <<append_1030@257:2>@269:0>):int), (
      <append_1030@257:0> <> 0)
      |- P[<<append_1030@257:2>@269:0>](<append_1030@257:0>:int,<append_1030@257:1>:int,
                                        <<append_1030@257:2>@269:0>:int)
      
      P[<append_1030@260:1>](<append_1030@260:0>:int,<append_1030@260:1>:int),
      ((<append_1030@260:0> = 0) && (<<append_1030@260:2>@263:0> = <append_1030@260:1>))
      |- P[<<append_1030@260:2>@263:0>](<append_1030@260:0>:int,<append_1030@260:1>:int,
                                        <<append_1030@260:2>@263:0>:int)
      
      P[<append_1030@257:1>]((1 + <append_1030@260:0>):int,<append_1030@260:1>:int), (
      (1 + <append_1030@260:0>) <> 0) |- P[<append_1030@260:1>](<append_1030@260:0>:int,
                                                                <append_1030@260:1>:int)
      
      P[<<rev_1033@233:1>@250:0>](<append_1030@257:0>:int,<append_1030@257:0>:int)|- P[<append_1030@257:1>](
      <append_1030@257:0>:int,<append_1030@257:1>:int)
      
      P[<rev_1033@233:0>](<rev_1033@233:0>:int),
      P[<<rev_1033@236:1>@239:0>]((-1 + <rev_1033@233:0>):int,var250:int),
      P[<<append_1030@243:2>@246:0>](var250:int,1:int,<<rev_1033@233:1>@250:0>:int), (
      <rev_1033@233:0> <> 0) |- P[<<rev_1033@233:1>@250:0>](<rev_1033@233:0>:int,
                                                            <<rev_1033@233:1>@250:0>:int)
      
      P[<append_1030@243:1>](<append_1030@243:0>:int,<append_1030@243:1>:int),
      ((<append_1030@243:0> = 0) && (<<append_1030@243:2>@246:0> = <append_1030@243:1>))
      |- P[<<append_1030@243:2>@246:0>](<append_1030@243:0>:int,<append_1030@243:1>:int,
                                        <<append_1030@243:2>@246:0>:int)
      
      P[<rev_1033@233:0>](<f_rev_1295@241:0>:int),
      P[<<rev_1033@236:1>@239:0>]((-1 + <f_rev_1295@241:0>):int,<append_1030@243:0>:int),
      ((<append_1030@243:1> = 1) && (<f_rev_1295@241:0> <> 0))
      |- P[<append_1030@243:1>](<append_1030@243:0>:int,<append_1030@243:1>:int)
      
      P[<rev_1033@236:0>](<rev_1033@236:0>:int), ((<rev_1033@236:0> = 0) && (<<rev_1033@236:1>@239:0> = 0))
      |- P[<<rev_1033@236:1>@239:0>](<rev_1033@236:0>:int,<<rev_1033@236:1>@239:0>:int)
      
      P[<rev_1033@233:0>]((1 + <rev_1033@236:0>):int), ((1 + <rev_1033@236:0>) <> 0)
      |- P[<rev_1033@236:0>](<rev_1033@236:0>:int)
      
      |- P[<rev_1033@233:0>](<rev_1033@233:0>:int)
    begin ParamSubstInfer.infer(75141)[3]
      
    end ParamSubstInfer.infer(75141)[3] (5.667139 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(75143)[3]
      
    end RefTypeInfer.elim_coeffs(75143)[3] (0.001000 sec.)
    begin YhornInterface.solve(75616)[3]
      begin HcSolver.solve_ub(75617)[4]
        encoded:
          P[<fail_1301@274:0>](<fail_1301@274:0>:int)|- bot
          
          P[<<rev_1033@233:1>@250:0>](<f_k_main_u_1296@271:1>:int,<f_k_main_u_1296@271:1>:int),
          P[<<append_1030@257:2>@269:0>](<f_k_main_u_1296@271:1>:int,<f_k_main_u_1296@271:0>:int,<f_k_main_u_1296@271:4>:int),
          ((<f_k_main_u_1296@271:4> <> (<f_k_main_u_1296@271:1> + <f_k_main_u_1296@271:0>)) && (<fail_1301@274:0> = 1))
          |- P[<fail_1301@274:0>](<fail_1301@274:0>:int)
          
          P[<append_1030@257:1>](<append_1030@257:0>:int,<append_1030@257:1>:int),
          P[<<append_1030@260:2>@263:0>]((-1 + <append_1030@257:0>):int,<append_1030@257:1>:int,(
                                         -1 + <<append_1030@257:2>@269:0>):int), (
          <append_1030@257:0> <> 0)
          |- P[<<append_1030@257:2>@269:0>](<append_1030@257:0>:int,<append_1030@257:1>:int,
                                            <<append_1030@257:2>@269:0>:int)
          
          P[<append_1030@260:1>](<append_1030@260:0>:int,<append_1030@260:1>:int),
          ((<append_1030@260:0> = 0) && (<<append_1030@260:2>@263:0> = <append_1030@260:1>))
          |- P[<<append_1030@260:2>@263:0>](<append_1030@260:0>:int,<append_1030@260:1>:int,
                                            <<append_1030@260:2>@263:0>:int)
          
          P[<append_1030@257:1>]((1 + <append_1030@260:0>):int,<append_1030@260:1>:int),
          ((1 + <append_1030@260:0>) <> 0) |- P[<append_1030@260:1>](
          <append_1030@260:0>:int,<append_1030@260:1>:int)
          
          P[<<rev_1033@233:1>@250:0>](<append_1030@257:0>:int,<append_1030@257:0>:int)|- P[<append_1030@257:1>](
          <append_1030@257:0>:int,<append_1030@257:1>:int)
          
          P[<rev_1033@233:0>](<rev_1033@233:0>:int),
          P[<<rev_1033@236:1>@239:0>]((-1 + <rev_1033@233:0>):int,var250:int),
          P[<<append_1030@243:2>@246:0>](var250:int,1:int,<<rev_1033@233:1>@250:0>:int), (
          <rev_1033@233:0> <> 0) |- P[<<rev_1033@233:1>@250:0>](<rev_1033@233:0>:int,
                                                                <<rev_1033@233:1>@250:0>:int)
          
          P[<append_1030@243:1>](<append_1030@243:0>:int,<append_1030@243:1>:int),
          ((<append_1030@243:0> = 0) && (<<append_1030@243:2>@246:0> = <append_1030@243:1>))
          |- P[<<append_1030@243:2>@246:0>](<append_1030@243:0>:int,<append_1030@243:1>:int,
                                            <<append_1030@243:2>@246:0>:int)
          
          P[<rev_1033@233:0>](<f_rev_1295@241:0>:int),
          P[<<rev_1033@236:1>@239:0>]((-1 + <f_rev_1295@241:0>):int,<append_1030@243:0>:int),
          ((<append_1030@243:1> = 1) && (<f_rev_1295@241:0> <> 0))
          |- P[<append_1030@243:1>](<append_1030@243:0>:int,<append_1030@243:1>:int)
          
          P[<rev_1033@236:0>](<rev_1033@236:0>:int), ((<rev_1033@236:0> = 0) && (<<rev_1033@236:1>@239:0> = 0))
          |- P[<<rev_1033@236:1>@239:0>](<rev_1033@236:0>:int,<<rev_1033@236:1>@239:0>:int)
          
          P[<rev_1033@233:0>]((1 + <rev_1033@236:0>):int), ((1 + <rev_1033@236:0>) <> 0)
          |- P[<rev_1033@236:0>](<rev_1033@236:0>:int)
          
          |- P[<rev_1033@233:0>](<rev_1033@233:0>:int)
        input to Yhorn:
          P[<fail_1301@274:0>](<fail_1301@274:0>:int)|- bot
          
          P[<<rev_1033@233:1>@250:0>](<f_k_main_u_1296@271:1>:int,<f_k_main_u_1296@271:1>:int),
          P[<<append_1030@257:2>@269:0>](<f_k_main_u_1296@271:1>:int,<f_k_main_u_1296@271:0>:int,<f_k_main_u_1296@271:4>:int),
          ((<f_k_main_u_1296@271:4> <> (<f_k_main_u_1296@271:1> + <f_k_main_u_1296@271:0>)) && (<fail_1301@274:0> = 1))
          |- P[<fail_1301@274:0>](<fail_1301@274:0>:int)
          
          P[<append_1030@257:1>](<append_1030@257:0>:int,<append_1030@257:1>:int),
          P[<<append_1030@260:2>@263:0>](var251:int,<append_1030@257:1>:int,var252:int),
          (((1 + var252) = <<append_1030@257:2>@269:0>) &&
           (((1 + var251) = <append_1030@257:0>) && (<append_1030@257:0> <> 0)))
          |- P[<<append_1030@257:2>@269:0>](<append_1030@257:0>:int,<append_1030@257:1>:int,
                                            <<append_1030@257:2>@269:0>:int)
          
          P[<append_1030@260:1>](<append_1030@260:0>:int,<append_1030@260:1>:int),
          ((<<append_1030@260:2>@263:0> = <append_1030@260:1>) && (<append_1030@260:0> = 0))
          |- P[<<append_1030@260:2>@263:0>](<append_1030@260:0>:int,<append_1030@260:1>:int,
                                            <<append_1030@260:2>@263:0>:int)
          
          P[<append_1030@257:1>](var253:int,<append_1030@260:1>:int),
          ((var253 = (1 + <append_1030@260:0>)) && ((1 + <append_1030@260:0>) <> 0))
          |- P[<append_1030@260:1>](<append_1030@260:0>:int,<append_1030@260:1>:int)
          
          P[<<rev_1033@233:1>@250:0>](<append_1030@257:0>:int,<append_1030@257:0>:int)|- P[<append_1030@257:1>](
          <append_1030@257:0>:int,<append_1030@257:1>:int)
          
          P[<rev_1033@233:0>](<rev_1033@233:0>:int),
          P[<<rev_1033@236:1>@239:0>](var254:int,var250:int),
          P[<<append_1030@243:2>@246:0>](var250:int,var255:int,<<rev_1033@233:1>@250:0>:int),
          (((1 + var254) = <rev_1033@233:0>) && ((<rev_1033@233:0> <> 0) && (var255 = 1)))
          |- P[<<rev_1033@233:1>@250:0>](<rev_1033@233:0>:int,<<rev_1033@233:1>@250:0>:int)
          
          P[<append_1030@243:1>](<append_1030@243:0>:int,<append_1030@243:1>:int),
          ((<<append_1030@243:2>@246:0> = <append_1030@243:1>) && (<append_1030@243:0> = 0))
          |- P[<<append_1030@243:2>@246:0>](<append_1030@243:0>:int,<append_1030@243:1>:int,
                                            <<append_1030@243:2>@246:0>:int)
          
          P[<rev_1033@233:0>](<f_rev_1295@241:0>:int),
          P[<<rev_1033@236:1>@239:0>](var256:int,<append_1030@243:0>:int),
          (((1 + var256) = <f_rev_1295@241:0>) && ((<f_rev_1295@241:0> <> 0) && (<append_1030@243:1> = 1)))
          |- P[<append_1030@243:1>](<append_1030@243:0>:int,<append_1030@243:1>:int)
          
          P[<rev_1033@236:0>](<rev_1033@236:0>:int), ((<<rev_1033@236:1>@239:0> = 0) && (<rev_1033@236:0> = 0))
          |- P[<<rev_1033@236:1>@239:0>](<rev_1033@236:0>:int,<<rev_1033@236:1>@239:0>:int)
          
          P[<rev_1033@233:0>](var257:int), ((var257 = (1 + <rev_1033@236:0>)) && ((1 + <rev_1033@236:0>) <> 0))
          |- P[<rev_1033@236:0>](<rev_1033@236:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1301_sep_274_sep_0($2045)) -> 1=0.
(($2045-1=0) & ($2046-$2047-$2048<>0)) & (v_sep_append_1030_sep_257_sep_2_sep_269_sep_0($2047,$2048,$2046)) & (v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0($2047,$2047)) -> v_sep_fail_1301_sep_274_sep_0($2045).
(($2049<>0) & (-$2049+$2050+1=0) & ($2051-$2052+1=0)) & (v_sep_append_1030_sep_260_sep_2_sep_263_sep_0($2050,$2053,$2051)) & (v_sep_append_1030_sep_257_sep_1($2049,$2053)) -> v_sep_append_1030_sep_257_sep_2_sep_269_sep_0($2049,$2053,$2052).
(($2054=0) & ($2055-$2056=0)) & (v_sep_append_1030_sep_260_sep_1($2054,$2056)) -> v_sep_append_1030_sep_260_sep_2_sep_263_sep_0($2054,$2056,$2055).
(($2054+1<>0) & (-$2054+$2057-1=0)) & (v_sep_append_1030_sep_257_sep_1($2057,$2056)) -> v_sep_append_1030_sep_260_sep_1($2054,$2056).
(0=0) & (v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0($2049,$2049)) -> v_sep_append_1030_sep_257_sep_1($2049,$2053).
(($2058-1=0) & ($2059<>0) & (-$2059+$2060+1=0)) & (v_sep_append_1030_sep_243_sep_2_sep_246_sep_0($2061,$2058,$2062)) & (v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0($2060,$2061)) & (v_sep_rev_1033_sep_233_sep_0($2059)) -> v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0($2059,$2062).
(($2063=0) & ($2064-$2065=0)) & (v_sep_append_1030_sep_243_sep_1($2063,$2065)) -> v_sep_append_1030_sep_243_sep_2_sep_246_sep_0($2063,$2065,$2064).
(($2065-1=0) & ($2066<>0) & (-$2066+$2067+1=0)) & (v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0($2067,$2063)) & (v_sep_rev_1033_sep_233_sep_0($2066)) -> v_sep_append_1030_sep_243_sep_1($2063,$2065).
(($2068=0) & ($2069=0)) & (v_sep_rev_1033_sep_236_sep_0($2068)) -> v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0($2068,$2069).
(($2068+1<>0) & (-$2068+$2070-1=0)) & (v_sep_rev_1033_sep_233_sep_0($2070)) -> v_sep_rev_1033_sep_236_sep_0($2068).
0=0 -> v_sep_rev_1033_sep_233_sep_0($2059).


v_sep_append_1030_sep_243_sep_1: X
v_sep_append_1030_sep_243_sep_2_sep_246_sep_0: X
v_sep_append_1030_sep_257_sep_1: X
v_sep_append_1030_sep_257_sep_2_sep_269_sep_0: X
v_sep_append_1030_sep_260_sep_1: X
v_sep_append_1030_sep_260_sep_2_sep_263_sep_0: X
v_sep_fail_1301_sep_274_sep_0: X
v_sep_rev_1033_sep_233_sep_0: X
v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0: X
v_sep_rev_1033_sep_236_sep_0: X
v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0: X
............................Split disj [48] 7.114918
Reconstrcut: 3 **)

v_sep_append_1030_sep_243_sep_1: X
v_sep_append_1030_sep_243_sep_2_sep_246_sep_0: X
v_sep_append_1030_sep_257_sep_1: X
v_sep_append_1030_sep_257_sep_2_sep_269_sep_0: X
v_sep_append_1030_sep_260_sep_1: X
v_sep_append_1030_sep_260_sep_2_sep_263_sep_0: X
v_sep_fail_1301_sep_274_sep_0: (X) | (X)
v_sep_rev_1033_sep_233_sep_0: X
v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0: X
v_sep_rev_1033_sep_236_sep_0: X
v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0: X
.......
v_sep_append_1030_sep_243_sep_1: X
v_sep_append_1030_sep_243_sep_2_sep_246_sep_0: X
v_sep_append_1030_sep_257_sep_1: X
v_sep_append_1030_sep_257_sep_2_sep_269_sep_0: X
v_sep_append_1030_sep_260_sep_1: X
v_sep_append_1030_sep_260_sep_2_sep_263_sep_0: X
v_sep_fail_1301_sep_274_sep_0: (X) | (X)
v_sep_rev_1033_sep_233_sep_0: X
v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0: X
v_sep_rev_1033_sep_236_sep_0: X
v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0: X
.......Split conj [50] 7.127915
(Reconstrcut: 8 **)
v_sep_append_1030_sep_243_sep_1: X
v_sep_append_1030_sep_243_sep_2_sep_246_sep_0: X
v_sep_append_1030_sep_257_sep_1: X
v_sep_append_1030_sep_257_sep_2_sep_269_sep_0: (X) & (X)
v_sep_append_1030_sep_260_sep_1: X
v_sep_append_1030_sep_260_sep_2_sep_263_sep_0: X
v_sep_fail_1301_sep_274_sep_0: (X) | (X)
v_sep_rev_1033_sep_233_sep_0: X
v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0: X
v_sep_rev_1033_sep_236_sep_0: X
v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0: X
...............
v_sep_append_1030_sep_243_sep_1: X
v_sep_append_1030_sep_243_sep_2_sep_246_sep_0: X
v_sep_append_1030_sep_257_sep_1: X
v_sep_append_1030_sep_257_sep_2_sep_269_sep_0: (X) & (X)
v_sep_append_1030_sep_260_sep_1: X
v_sep_append_1030_sep_260_sep_2_sep_263_sep_0: X
v_sep_fail_1301_sep_274_sep_0: (X) | (X)
v_sep_rev_1033_sep_233_sep_0: X
v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0: X
v_sep_rev_1033_sep_236_sep_0: X
v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0: X
.......
v_sep_append_1030_sep_243_sep_1: X
v_sep_append_1030_sep_243_sep_2_sep_246_sep_0: X
v_sep_append_1030_sep_257_sep_1: X
v_sep_append_1030_sep_257_sep_2_sep_269_sep_0: (X) & (X)
v_sep_append_1030_sep_260_sep_1: X
v_sep_append_1030_sep_260_sep_2_sep_263_sep_0: X
v_sep_fail_1301_sep_274_sep_0: (X) | (X)
v_sep_rev_1033_sep_233_sep_0: X
v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0: X
v_sep_rev_1033_sep_236_sep_0: X
v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0: X
.....................Split conj [53] 7.144913
(Reconstrcut: 21 ***)
v_sep_append_1030_sep_243_sep_1: X
v_sep_append_1030_sep_243_sep_2_sep_246_sep_0: X
v_sep_append_1030_sep_257_sep_1: X
v_sep_append_1030_sep_257_sep_2_sep_269_sep_0: (X) & (X)
v_sep_append_1030_sep_260_sep_1: X
v_sep_append_1030_sep_260_sep_2_sep_263_sep_0: X
v_sep_fail_1301_sep_274_sep_0: (X) | (X)
v_sep_rev_1033_sep_233_sep_0: X
v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_236_sep_0: X
v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0: X
.....................................
v_sep_append_1030_sep_243_sep_1: X
v_sep_append_1030_sep_243_sep_2_sep_246_sep_0: X
v_sep_append_1030_sep_257_sep_1: X
v_sep_append_1030_sep_257_sep_2_sep_269_sep_0: (X) & (X)
v_sep_append_1030_sep_260_sep_1: X
v_sep_append_1030_sep_260_sep_2_sep_263_sep_0: X
v_sep_fail_1301_sep_274_sep_0: (X) | (X)
v_sep_rev_1033_sep_233_sep_0: X
v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_236_sep_0: X
v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0: X
.......
v_sep_append_1030_sep_243_sep_1: X
v_sep_append_1030_sep_243_sep_2_sep_246_sep_0: X
v_sep_append_1030_sep_257_sep_1: X
v_sep_append_1030_sep_257_sep_2_sep_269_sep_0: (X) & (X)
v_sep_append_1030_sep_260_sep_1: X
v_sep_append_1030_sep_260_sep_2_sep_263_sep_0: X
v_sep_fail_1301_sep_274_sep_0: (X) | (X)
v_sep_rev_1033_sep_233_sep_0: X
v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_236_sep_0: X
v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0: X
...........................Split conj [59] 7.169909
(Reconstrcut: 14 ****)
v_sep_append_1030_sep_243_sep_1: X
v_sep_append_1030_sep_243_sep_2_sep_246_sep_0: X
v_sep_append_1030_sep_257_sep_1: X
v_sep_append_1030_sep_257_sep_2_sep_269_sep_0: (X) & (X)
v_sep_append_1030_sep_260_sep_1: X
v_sep_append_1030_sep_260_sep_2_sep_263_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_274_sep_0: (X) | (X)
v_sep_rev_1033_sep_233_sep_0: X
v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_236_sep_0: X
v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0: X
...................
v_sep_append_1030_sep_243_sep_1: X
v_sep_append_1030_sep_243_sep_2_sep_246_sep_0: X
v_sep_append_1030_sep_257_sep_1: X
v_sep_append_1030_sep_257_sep_2_sep_269_sep_0: (X) & (X)
v_sep_append_1030_sep_260_sep_1: X
v_sep_append_1030_sep_260_sep_2_sep_263_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_274_sep_0: (X) | (X)
v_sep_rev_1033_sep_233_sep_0: X
v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_236_sep_0: X
v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0: X
.......
v_sep_append_1030_sep_243_sep_1: X
v_sep_append_1030_sep_243_sep_2_sep_246_sep_0: X
v_sep_append_1030_sep_257_sep_1: X
v_sep_append_1030_sep_257_sep_2_sep_269_sep_0: (X) & (X)
v_sep_append_1030_sep_260_sep_1: X
v_sep_append_1030_sep_260_sep_2_sep_263_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_274_sep_0: (X) | (X)
v_sep_rev_1033_sep_233_sep_0: X
v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_236_sep_0: X
v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0: X
...........................
v_sep_append_1030_sep_243_sep_1: X
v_sep_append_1030_sep_243_sep_2_sep_246_sep_0: X
v_sep_append_1030_sep_257_sep_1: X
v_sep_append_1030_sep_257_sep_2_sep_269_sep_0: (X) & (X)
v_sep_append_1030_sep_260_sep_1: X
v_sep_append_1030_sep_260_sep_2_sep_263_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_274_sep_0: (X) | (X)
v_sep_rev_1033_sep_233_sep_0: X
v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_236_sep_0: X
v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0: X
..................................
v_sep_append_1030_sep_243_sep_1: X
v_sep_append_1030_sep_243_sep_2_sep_246_sep_0: X
v_sep_append_1030_sep_257_sep_1: X
v_sep_append_1030_sep_257_sep_2_sep_269_sep_0: (X) & (X)
v_sep_append_1030_sep_260_sep_1: X
v_sep_append_1030_sep_260_sep_2_sep_263_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_274_sep_0: (X) | (X)
v_sep_rev_1033_sep_233_sep_0: X
v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_236_sep_0: X
v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0: X
................................................(0=0) & (v_sep_fail_1301_sep_274_sep_0($2045)) -> 1=0.
(($2045-1=0) & ($2046-$2047-$2048<>0)) & (v_sep_append_1030_sep_257_sep_2_sep_269_sep_0($2047,$2048,$2046)) & (v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0($2047,$2047)) -> v_sep_fail_1301_sep_274_sep_0($2045).
(($2049<>0) & (-$2049+$2050+1=0) & ($2051-$2052+1=0)) & (v_sep_append_1030_sep_260_sep_2_sep_263_sep_0($2050,$2053,$2051)) & (v_sep_append_1030_sep_257_sep_1($2049,$2053)) -> v_sep_append_1030_sep_257_sep_2_sep_269_sep_0($2049,$2053,$2052).
(($2054=0) & ($2055-$2056=0)) & (v_sep_append_1030_sep_260_sep_1($2054,$2056)) -> v_sep_append_1030_sep_260_sep_2_sep_263_sep_0($2054,$2056,$2055).
(($2054+1<>0) & (-$2054+$2057-1=0)) & (v_sep_append_1030_sep_257_sep_1($2057,$2056)) -> v_sep_append_1030_sep_260_sep_1($2054,$2056).
(0=0) & (v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0($2049,$2049)) -> v_sep_append_1030_sep_257_sep_1($2049,$2053).
(($2058-1=0) & ($2059<>0) & (-$2059+$2060+1=0)) & (v_sep_append_1030_sep_243_sep_2_sep_246_sep_0($2061,$2058,$2062)) & (v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0($2060,$2061)) & (v_sep_rev_1033_sep_233_sep_0($2059)) -> v_sep_rev_1033_sep_233_sep_1_sep_250_sep_0($2059,$2062).
(($2063=0) & ($2064-$2065=0)) & (v_sep_append_1030_sep_243_sep_1($2063,$2065)) -> v_sep_append_1030_sep_243_sep_2_sep_246_sep_0($2063,$2065,$2064).
(($2065-1=0) & ($2066<>0) & (-$2066+$2067+1=0)) & (v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0($2067,$2063)) & (v_sep_rev_1033_sep_233_sep_0($2066)) -> v_sep_append_1030_sep_243_sep_1($2063,$2065).
(($2068=0) & ($2069=0)) & (v_sep_rev_1033_sep_236_sep_0($2068)) -> v_sep_rev_1033_sep_236_sep_1_sep_239_sep_0($2068,$2069).
(($2068+1<>0) & (-$2068+$2070-1=0)) & (v_sep_rev_1033_sep_233_sep_0($2070)) -> v_sep_rev_1033_sep_236_sep_0($2068).
0=0 -> v_sep_rev_1033_sep_233_sep_0($2059).

          |- P[<rev_1033@233:0>](<rev_1033@233:0>:int)
        solution:
          P[<append_1030@243:1>]($2118:int,$2120:int) = true
          P[<<append_1030@243:2>@246:0>]($2103:int,$2105:int,$2107:int) = ($2105 <= $2107)
          P[<append_1030@257:1>]($2093:int,$2095:int) = (1 <= $2093)
          P[<<append_1030@257:2>@269:0>]($2074:int,$2076:int,$2078:int) =
          ((($2076 + (2 * $2074)) <= (1 + $2078)) && ((2 * $2078) <= (1 + ((2 * $2076) + $2074))))
          P[<append_1030@260:1>]($2098:int,$2100:int) = (0 <= $2098)
          P[<<append_1030@260:2>@263:0>]($2086:int,$2088:int,$2090:int) =
          (($2090 <= $2088) && (($2088 + (3 * $2086)) <= $2090))
          P[<fail_1301@274:0>]($2071:bool) = false
          P[<rev_1033@233:0>]($2115:int) = true
          P[<<rev_1033@233:1>@250:0>]($2081:int,$2083:int) = (1 <= $2083)
          P[<rev_1033@236:0>]($2123:int) = true
          P[<<rev_1033@236:1>@239:0>]($2110:int,$2112:int) = true
        
      end HcSolver.solve_ub(75617)[4] (0.284957 sec.)
      begin HcSolver.check_validity(76282)[4]
        input:
          P[<fail_1301@274:0>](<fail_1301@274:0>:bool)|- bot
          
          P[<<rev_1033@233:1>@250:0>](<f_k_main_u_1296@271:1>:int,<f_k_main_u_1296@271:1>:int),
          P[<<append_1030@257:2>@269:0>](<f_k_main_u_1296@271:1>:int,<f_k_main_u_1296@271:0>:int,<f_k_main_u_1296@271:4>:int),
          ((<f_k_main_u_1296@271:4> <> (<f_k_main_u_1296@271:1> + <f_k_main_u_1296@271:0>)) && <fail_1301@274:0>)
          |- P[<fail_1301@274:0>](<fail_1301@274:0>:bool)
          
          P[<append_1030@257:1>](<append_1030@257:0>:int,<append_1030@257:1>:int),
          P[<<append_1030@260:2>@263:0>]((-1 + <append_1030@257:0>):int,<append_1030@257:1>:int,(
                                         -1 + <<append_1030@257:2>@269:0>):int), (
          <append_1030@257:0> <> 0)
          |- P[<<append_1030@257:2>@269:0>](<append_1030@257:0>:int,<append_1030@257:1>:int,
                                            <<append_1030@257:2>@269:0>:int)
          
          P[<append_1030@260:1>](<append_1030@260:0>:int,<append_1030@260:1>:int),
          ((<append_1030@260:0> = 0) && (<<append_1030@260:2>@263:0> = <append_1030@260:1>))
          |- P[<<append_1030@260:2>@263:0>](<append_1030@260:0>:int,<append_1030@260:1>:int,
                                            <<append_1030@260:2>@263:0>:int)
          
          P[<append_1030@257:1>]((1 + <append_1030@260:0>):int,<append_1030@260:1>:int),
          ((1 + <append_1030@260:0>) <> 0) |- P[<append_1030@260:1>](
          <append_1030@260:0>:int,<append_1030@260:1>:int)
          
          P[<<rev_1033@233:1>@250:0>](<append_1030@257:0>:int,<append_1030@257:0>:int)|- P[<append_1030@257:1>](
          <append_1030@257:0>:int,<append_1030@257:1>:int)
          
          P[<rev_1033@233:0>](<rev_1033@233:0>:int),
          P[<<rev_1033@236:1>@239:0>]((-1 + <rev_1033@233:0>):int,var250:int),
          P[<<append_1030@243:2>@246:0>](var250:int,1:int,<<rev_1033@233:1>@250:0>:int), (
          <rev_1033@233:0> <> 0) |- P[<<rev_1033@233:1>@250:0>](<rev_1033@233:0>:int,
                                                                <<rev_1033@233:1>@250:0>:int)
          
          P[<append_1030@243:1>](<append_1030@243:0>:int,<append_1030@243:1>:int),
          ((<append_1030@243:0> = 0) && (<<append_1030@243:2>@246:0> = <append_1030@243:1>))
          |- P[<<append_1030@243:2>@246:0>](<append_1030@243:0>:int,<append_1030@243:1>:int,
                                            <<append_1030@243:2>@246:0>:int)
          
          P[<rev_1033@233:0>](<f_rev_1295@241:0>:int),
          P[<<rev_1033@236:1>@239:0>]((-1 + <f_rev_1295@241:0>):int,<append_1030@243:0>:int),
          ((<append_1030@243:1> = 1) && (<f_rev_1295@241:0> <> 0))
          |- P[<append_1030@243:1>](<append_1030@243:0>:int,<append_1030@243:1>:int)
          
          P[<rev_1033@236:0>](<rev_1033@236:0>:int), ((<rev_1033@236:0> = 0) && (<<rev_1033@236:1>@239:0> = 0))
          |- P[<<rev_1033@236:1>@239:0>](<rev_1033@236:0>:int,<<rev_1033@236:1>@239:0>:int)
          
          P[<rev_1033@233:0>]((1 + <rev_1033@236:0>):int), ((1 + <rev_1033@236:0>) <> 0)
          |- P[<rev_1033@236:0>](<rev_1033@236:0>:int)
          
          |- P[<rev_1033@233:0>](<rev_1033@233:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(76282)[4] (0.017997 sec.)
      solution:
        P[<append_1030@243:1>]($2118:int,$2120:int) = true
        P[<<append_1030@243:2>@246:0>]($2103:int,$2105:int,$2107:int) = ($2105 <= $2107)
        P[<append_1030@257:1>]($2093:int,$2095:int) = (1 <= $2093)
        P[<<append_1030@257:2>@269:0>]($2074:int,$2076:int,$2078:int) =
        ((($2076 + (2 * $2074)) <= (1 + $2078)) && ((2 * $2078) <= (1 + ((2 * $2076) + $2074))))
        P[<append_1030@260:1>]($2098:int,$2100:int) = (0 <= $2098)
        P[<<append_1030@260:2>@263:0>]($2086:int,$2088:int,$2090:int) =
        (($2090 <= $2088) && (($2088 + (3 * $2086)) <= $2090))
        P[<fail_1301@274:0>]($2071:bool) = false
        P[<rev_1033@233:0>]($2115:int) = true
        P[<<rev_1033@233:1>@250:0>]($2081:int,$2083:int) = (1 <= $2083)
        P[<rev_1033@236:0>]($2123:int) = true
        P[<<rev_1033@236:1>@239:0>]($2110:int,$2112:int) = true
    end YhornInterface.solve(75616)[3] (0.303954 sec.)
    
  end RefTypeInfer.infer_etrs(72352)[2] (5.986091 sec.)
  refinement types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:{v2:int | (1 <= v2)} -> X) -> X
    rev_1033: v1:int -> (v2:int -> X) -> X
    f_rev_1295: v1:int -> (v2:int -> X) -> v4:int -> X
    append_1030: v1:int -> v2:int -> (v3:{v3:int | (v2 <= v3)} -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    k_main_u_1218: v1:int -> v2:int -> (v3:unit -> X) -> v5:unit -> X
    append_1030: v1:int ->
                 v2:{v2:int | (1 <= v1)} ->
                 (v3:{v3:int | (((v2 + (2 * v1)) <= (1 + v3)) && ((2 * v3) <= (1 + ((2 * v2) + v1))))} -> X) -> X
    append_1030: v1:int -> v2:{v2:int | (0 <= v1)} -> (v3:{v3:int | ((v3 <= v2) && ((v2 + (3 * v1)) <= v3))} -> X) -> X
    f_append_1294: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_k_main_u_1296: v1:int -> v2:int -> v3:unit -> (v4:unit -> X) -> v6:int -> X
    fail_1301: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1300: var271:int -> var270:int -> var269:unit -> X
    fail_1302: var275:bool -> (var274:unit -> X) -> X
  abstraction types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: var276:int -> (var277:int[var277 -> (1 <= var277)] -> X) -> X
    f_rev_1295: v1:int -> (v2:int -> X) -> v4:int -> X
    append_1030: var285:int ->
                 var286:int[var286 -> (1 <= var285),
                            var286 -> (0 <= var285)] ->
                 (var287:int[var287 -> (var286 <= var287),
                             var287 -> (((var286 + (2 * var285)) <= (1 + var287)) &&
                                        ((2 * var287) <= (1 + ((2 * var286) + var285)))),
                             var287 -> ((var287 <= var286) && ((var286 + (3 * var285)) <= var287))] -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    k_main_u_1218: v1:int -> v2:int -> (v3:unit -> X) -> v5:unit -> X
    f_append_1294: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_k_main_u_1296: v1:int -> v2:int -> v3:unit -> (v4:unit -> X) -> v6:int -> X
    fail_1301: v1:bool -> (v2:unit -> X) -> X
    f_1300: var271:int -> var270:int -> var269:unit -> X
    fail_1302: var275:bool -> (var274:unit -> X) -> X
  
end AbsTypeInfer.refine(72351)[1] (6.002088 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0; 0; 1

Program with abstraction types (CEGAR-cycle 6)::
Main: main_1293
  main_1293 -> (rand_int f_1298)
  append_1030 x_1031 y_1032 k_append_1105 when (x_1031 = 0) -> (k_append_1105 y_1032)
  append_1030 x_1031 y_1032 k_append_1105 when (not (x_1031 = 0)) ->
      (append_1030 (x_1031 - 1) y_1032 (f_append_1294 x_1031 y_1032 k_append_1105))
  f_1298 x_1251 -> (rand_int (f_1299 x_1251))
  f_1299 x_1251 x_1264 -> (main_1035 x_1251 x_1264 (f_1300 x_1251 x_1264))
  f_1300 x_1251 x_1264 x_1248 -> end
  f_append_1294 x_1031 y_1032 k_append_1105 x_1109 -> (k_append_1105 (1 + x_1109))
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (x_1222 = (n_1036 + m_1037)) -> (k_main_1191 ())
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (not (x_1222 = (n_1036 + m_1037))) ->
      (fail_1301 true k_main_1191)
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (x_1197 = n_1036) -> (k_main_u_1218 m_1037 n_1036 k_main_1191 ())
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (not (x_1197 = n_1036)) ->
      (fail_1302 true (k_main_u_1218 m_1037 n_1036 k_main_1191))
  f_rev_1295 n_1034 k_rev_1138 x_1163 -> (append_1030 x_1163 1 k_rev_1138)
  fail_1301 b k -> {fail} => (k ())
  fail_1302 b k -> {fail} => (k ())
  k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 ->
      (append_1030 n_1036 m_1037 (f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191))
  main_1035 n_1036 m_1037 k_main_1191 -> (rev_1033 n_1036 (f_main_1297 m_1037 n_1036 k_main_1191))
  rev_1033 n_1034 k_rev_1138 when (n_1034 = 0) -> (k_rev_1138 0)
  rev_1033 n_1034 k_rev_1138 when (not (n_1034 = 0)) -> (rev_1033 (n_1034 - 1) (f_rev_1295 n_1034 k_rev_1138))
Types:
  main_1293 : X
  append_1030 : (x_1:int ->
                 x_2:int[x_1 >= 0; x_1 <= 1; x_1 <= -3; x_1 <= -2; x_1 <= -1; x_1 <= 0; x_1 >= 1] ->
                 (x_4:int[x_2 >= x_4 && 3*x_1 <= -x_2 + x_4; 2*x_1 <= -x_2 + x_4 + 1 && x_1 >= -2*x_2 + 2*x_4 - 1; 
                          x_1 >= 2; x_1 >= 5; x_2 >= x_4; 4*x_1 >= 3; 
                          x_1 >= 3; 2*x_1 >= 13; x_1 >= 15; x_1 <= -1; 
                          x_2 <= x_4; x_2 = x_4] -> X) -> X)
  fail_1301 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1302 : (x_1:bool[x_1] -> (unit -> X) -> X)
  rev_1033 : (x_1:int -> (x_3:int[x_3 <= 1; x_1 <= 0; x_3 >= 1; x_1 = 0; x_1 = x_3] -> X) -> X)
  
(6-1) Abstracting ... DONE!

(6-2) Checking HORS ... DONE!

Error trace::
  main_1293 ... --> 
  f_1298 ... --> 
  f_1299 ... --> 
  main_1035 ... --> 
  rev_1033 [2/2] ... --> 
  rev_1033 [2/2] ... --> 
  rev_1033 [1/2] ... --> 
  f_rev_1295 ... --> 
  append_1030 [1/2] ... --> 
  f_rev_1295 ... --> 
  append_1030 [2/2] ... --> 
  append_1030 [1/2] ... --> 
  f_append_1294 ... --> 
  f_main_1297 [1/2] ... --> 
  k_main_u_1218 ... --> 
  append_1030 [2/2] ... --> 
  append_1030 [2/2] ... --> 
  append_1030 [1/2] ... --> 
  f_append_1294 ... --> 
  f_append_1294 ... --> 
  f_k_main_u_1296 [2/2] ... --> 
  fail_1301 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 1; 0; 0; 0; 1; 0

(6-3) Checking counter-example ... DONE!

(6-4) Discovering predicates ... 
begin AbsTypeInfer.refine(187166)[1]
  program:
    main_1293  | true = ((Random.int 0) f_1298)
    append_1030 x_1031 y_1032 k_append_1105 | (x_1031 = 0) = (k_append_1105 y_1032)
    append_1030 x_1031 y_1032 k_append_1105 | (not (x_1031 = 0)) = (append_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    y_1032
                                                                    (
                                                                    f_append_1294 x_1031
                                                                    y_1032
                                                                    k_append_1105))
    f_1298 x_1251 | true = ((Random.int 0) (f_1299 x_1251))
    f_1299 x_1251 x_1264 | true = (main_1035 x_1251
                                             x_1264
                                             (f_1300 x_1251
                                                     x_1264))
    f_1300 x_1251 x_1264 x_1248 | true = end
    f_append_1294 x_1031 y_1032 k_append_1105 x_1109 | true = (k_append_1105 (
                                                                    1 + x_1109))
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (x_1222 = (n_1036 + m_1037)) = (
    k_main_1191 ())
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (not (x_1222 = (n_1036 + m_1037))) = (
    fail_1301 true
              k_main_1191)
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (x_1197 = n_1036) = (
    k_main_u_1218 m_1037
                  n_1036
                  k_main_1191
                  ())
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (not (x_1197 = n_1036)) = (
    fail_1302 true
              (k_main_u_1218 m_1037
                             n_1036
                             k_main_1191))
    f_rev_1295 n_1034 k_rev_1138 x_1163 | true = (append_1030 x_1163
                                                              1
                                                              k_rev_1138)
    fail_1301 b k | true = (fail ())
    fail_1302 b k | true = (fail ())
    k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 | true = (append_1030
                                                               n_1036
                                                               m_1037
                                                               (f_k_main_u_1296 m_1037
                                                                    n_1036
                                                                    x_1194
                                                                    k_main_1191))
    main_1035 n_1036 m_1037 k_main_1191 | true = (rev_1033 n_1036
                                                           (f_main_1297 m_1037
                                                                    n_1036
                                                                    k_main_1191))
    rev_1033 n_1034 k_rev_1138 | (n_1034 = 0) = (k_rev_1138 0)
    rev_1033 n_1034 k_rev_1138 | (not (n_1034 = 0)) = (rev_1033 (n_1034 - 1)
                                                                (f_rev_1295 n_1034
                                                                    k_rev_1138))
    main_1293:X
    append_1030:int -> int -> (int -> X) -> X
    f_1298:int -> X
    f_1299:int -> int -> X
    f_1300:int -> int -> unit -> X
    f_append_1294:int -> int -> (int -> X) -> int -> X
    f_k_main_u_1296:int -> int -> unit -> (unit -> X) -> int -> X
    f_main_1297:int -> int -> (unit -> X) -> int -> X
    f_rev_1295:int -> (int -> X) -> int -> X
    fail_1301:bool -> (unit -> X) -> X
    fail_1302:bool -> (unit -> X) -> X
    k_main_u_1218:int -> int -> (unit -> X) -> unit -> X
    main_1035:int -> int -> (unit -> X) -> X
    rev_1033:int -> (int -> X) -> X
  inlined functions: f_1298,f_1299,f_1300,f_append_1294,f_k_main_u_1296,f_main_1297,f_rev_1295,k_main_u_1218,main_1035
  counterexample: 0:0:0:0:1:1:0:0:0:0:1:0:0:0:0:1:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1298@280:0> = var290)
     [true.nop((<f_1299@283:0> = <f_1298@280:0>) && (<f_1299@283:1> = var291))
      [true.((<main_1035@285:0> = <f_1299@283:0>) && (<main_1035@285:1> = <f_1299@283:1>))
       [true.(<rev_1033@287:0> = <main_1035@285:0>)
        [(not (<rev_1033@287:0> = 0)).(<rev_1033@290:0> = (<rev_1033@287:0> - 1))
         [(not (<rev_1033@290:0> = 0)).(<rev_1033@293:0> = (<rev_1033@290:0> - 1))
          [(<rev_1033@293:0> = 0).(<<rev_1033@293:1>@296:0> = 0)
           [true.((<f_rev_1295@298:0> = <rev_1033@290:0>) && (<f_rev_1295@298:2> = <<rev_1033@293:1>@296:0>))
            [true.((<append_1030@300:0> = <f_rev_1295@298:2>) && (<append_1030@300:1> = 1))
             [(<append_1030@300:0> = 0).(<<append_1030@300:2>@303:0> = <append_1030@300:1>)
              [true.(<<f_rev_1295@298:1>@305:0> = <<append_1030@300:2>@303:0>)
               [true.(<<rev_1033@290:1>@307:0> = <<f_rev_1295@298:1>@305:0>)
                [true.((<f_rev_1295@309:0> = <rev_1033@287:0>) && (<f_rev_1295@309:2> = <<rev_1033@290:1>@307:0>))
                 [true.((<append_1030@311:0> = <f_rev_1295@309:2>) && (<append_1030@311:1> = 1))
                  [(not (<append_1030@311:0> = 0)).
                   ((<append_1030@314:0> = (<append_1030@311:0> - 1)) && (<append_1030@314:1> = <append_1030@311:1>))
                   [(<append_1030@314:0> = 0).(<<append_1030@314:2>@317:0> = <append_1030@314:1>)
                    [true.
                     ((<f_append_1294@319:0> = <append_1030@311:0>) &&
                      ((<f_append_1294@319:1> = <append_1030@311:1>) &&
                       (<f_append_1294@319:3> = <<append_1030@314:2>@317:0>)))
                     [true.(<<f_append_1294@319:2>@321:0> = (1 + <f_append_1294@319:3>))
                      [true.(<<append_1030@311:2>@323:0> = <<f_append_1294@319:2>@321:0>)
                       [true.(<<f_rev_1295@309:1>@325:0> = <<append_1030@311:2>@323:0>)
                        [true.(<<rev_1033@287:1>@327:0> = <<f_rev_1295@309:1>@325:0>)
                         [true.
                          ((<f_main_1297@329:0> = <main_1035@285:1>) &&
                           ((<f_main_1297@329:1> = <main_1035@285:0>) &&
                            (<f_main_1297@329:3> = <<rev_1033@287:1>@327:0>)))
                          [(<f_main_1297@329:3> = <f_main_1297@329:1>).
                           ((<k_main_u_1218@332:0> = <f_main_1297@329:0>) &&
                            ((<k_main_u_1218@332:1> = <f_main_1297@329:1>) && (<k_main_u_1218@332:3> = ())))
                           [true.
                            ((<append_1030@334:0> = <k_main_u_1218@332:1>) &&
                             (<append_1030@334:1> = <k_main_u_1218@332:0>))
                            [(not (<append_1030@334:0> = 0)).
                             ((<append_1030@337:0> = (<append_1030@334:0> - 1)) &&
                              (<append_1030@337:1> = <append_1030@334:1>))
                             [(not (<append_1030@337:0> = 0)).
                              ((<append_1030@340:0> = (<append_1030@337:0> - 1)) &&
                               (<append_1030@340:1> = <append_1030@337:1>))
                              [(<append_1030@340:0> = 0).(<<append_1030@340:2>@343:0> = <append_1030@340:1>)
                               [true.
                                ((<f_append_1294@345:0> = <append_1030@337:0>) &&
                                 ((<f_append_1294@345:1> = <append_1030@337:1>) &&
                                  (<f_append_1294@345:3> = <<append_1030@340:2>@343:0>)))
                                [true.(<<f_append_1294@345:2>@347:0> = (1 + <f_append_1294@345:3>))
                                 [true.(<<append_1030@337:2>@349:0> = <<f_append_1294@345:2>@347:0>)
                                  [true.
                                   ((<f_append_1294@351:0> = <append_1030@334:0>) &&
                                    ((<f_append_1294@351:1> = <append_1030@334:1>) &&
                                     (<f_append_1294@351:3> = <<append_1030@337:2>@349:0>)))
                                   [true.(<<f_append_1294@351:2>@353:0> = (1 + <f_append_1294@351:3>))
                                    [true.(<<append_1030@334:2>@355:0> = <<f_append_1294@351:2>@353:0>)
                                     [true.
                                      ((<f_k_main_u_1296@357:0> = <k_main_u_1218@332:0>) &&
                                       ((<f_k_main_u_1296@357:1> = <k_main_u_1218@332:1>) &&
                                        ((<f_k_main_u_1296@357:2> = <k_main_u_1218@332:3>) &&
                                         (<f_k_main_u_1296@357:4> = <<append_1030@334:2>@355:0>))))
                                      [(not
                                          (<f_k_main_u_1296@357:4> =
                                           (<f_k_main_u_1296@357:1> + <f_k_main_u_1296@357:0>))).
                                       (<fail_1301@360:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(187167)[2]
    horn clauses:
      P[<fail_1301@360:0>](<fail_1301@360:0>:bool)|- bot
      
      P[<f_k_main_u_1296@357:4>](<f_k_main_u_1296@357:0>:int,<f_k_main_u_1296@357:1>:int,<f_k_main_u_1296@357:2>:unit,<f_k_main_u_1296@357:4>:int),
      ((<f_k_main_u_1296@357:4> <> (<f_k_main_u_1296@357:1> + <f_k_main_u_1296@357:0>)) && <fail_1301@360:0>)
      |- P[<fail_1301@360:0>](<fail_1301@360:0>:bool)
      
      P[<k_main_u_1218@332:3>](<f_k_main_u_1296@357:0>:int,<f_k_main_u_1296@357:1>:int,<k_main_u_1218@332:3>:unit),
      P[<<append_1030@334:2>@355:0>](<f_k_main_u_1296@357:1>:int,<f_k_main_u_1296@357:0>:int,<f_k_main_u_1296@357:4>:int)|- P[<f_k_main_u_1296@357:4>](
      <f_k_main_u_1296@357:0>:int,<f_k_main_u_1296@357:1>:int,<f_k_main_u_1296@357:2>:unit,
      <f_k_main_u_1296@357:4>:int)
      
      P[<append_1030@334:1>](<append_1030@334:0>:int,<append_1030@334:1>:int),
      P[<<f_append_1294@351:2>@353:0>](<append_1030@334:0>:int,<append_1030@334:1>:int,<<append_1030@334:2>@355:0>:int),
      (<append_1030@334:0> <> 0)
      |- P[<<append_1030@334:2>@355:0>](<append_1030@334:0>:int,<append_1030@334:1>:int,
                                        <<append_1030@334:2>@355:0>:int)
      
      P[<f_append_1294@351:3>](<f_append_1294@351:0>:int,<f_append_1294@351:1>:int,(
                               -1 + <<f_append_1294@351:2>@353:0>):int)|- P[<<f_append_1294@351:2>@353:0>](
      <f_append_1294@351:0>:int,<f_append_1294@351:1>:int,<<f_append_1294@351:2>@353:0>:int)
      
      P[<append_1030@334:1>](<f_append_1294@351:0>:int,<f_append_1294@351:1>:int),
      P[<<append_1030@337:2>@349:0>]((-1 + <f_append_1294@351:0>):int,<f_append_1294@351:1>:int,<f_append_1294@351:3>:int),
      (<f_append_1294@351:0> <> 0)
      |- P[<f_append_1294@351:3>](<f_append_1294@351:0>:int,<f_append_1294@351:1>:int,
                                  <f_append_1294@351:3>:int)
      
      P[<append_1030@337:1>](<append_1030@337:0>:int,<append_1030@337:1>:int),
      P[<<f_append_1294@345:2>@347:0>](<append_1030@337:0>:int,<append_1030@337:1>:int,<<append_1030@337:2>@349:0>:int),
      (<append_1030@337:0> <> 0)
      |- P[<<append_1030@337:2>@349:0>](<append_1030@337:0>:int,<append_1030@337:1>:int,
                                        <<append_1030@337:2>@349:0>:int)
      
      P[<f_append_1294@345:3>](<f_append_1294@345:0>:int,<f_append_1294@345:1>:int,(
                               -1 + <<f_append_1294@345:2>@347:0>):int)|- P[<<f_append_1294@345:2>@347:0>](
      <f_append_1294@345:0>:int,<f_append_1294@345:1>:int,<<f_append_1294@345:2>@347:0>:int)
      
      P[<append_1030@337:1>](<f_append_1294@345:0>:int,<f_append_1294@345:1>:int),
      P[<<append_1030@340:2>@343:0>]((-1 + <f_append_1294@345:0>):int,<f_append_1294@345:1>:int,<f_append_1294@345:3>:int),
      (<f_append_1294@345:0> <> 0)
      |- P[<f_append_1294@345:3>](<f_append_1294@345:0>:int,<f_append_1294@345:1>:int,
                                  <f_append_1294@345:3>:int)
      
      P[<append_1030@340:1>](<append_1030@340:0>:int,<append_1030@340:1>:int),
      ((<append_1030@340:0> = 0) && (<<append_1030@340:2>@343:0> = <append_1030@340:1>))
      |- P[<<append_1030@340:2>@343:0>](<append_1030@340:0>:int,<append_1030@340:1>:int,
                                        <<append_1030@340:2>@343:0>:int)
      
      P[<append_1030@337:1>]((1 + <append_1030@340:0>):int,<append_1030@340:1>:int), (
      (1 + <append_1030@340:0>) <> 0) |- P[<append_1030@340:1>](<append_1030@340:0>:int,
                                                                <append_1030@340:1>:int)
      
      P[<append_1030@334:1>]((1 + <append_1030@337:0>):int,<append_1030@337:1>:int), (
      (1 + <append_1030@337:0>) <> 0) |- P[<append_1030@337:1>](<append_1030@337:0>:int,
                                                                <append_1030@337:1>:int)
      
      P[<k_main_u_1218@332:3>](<append_1030@334:1>:int,<append_1030@334:0>:int,<k_main_u_1218@332:3>:unit)|- P[<append_1030@334:1>](
      <append_1030@334:0>:int,<append_1030@334:1>:int)
      
      P[<f_main_1297@329:3>](<k_main_u_1218@332:0>:int,<k_main_u_1218@332:1>:int,<k_main_u_1218@332:1>:int)|- P[<k_main_u_1218@332:3>](
      <k_main_u_1218@332:0>:int,<k_main_u_1218@332:1>:int,<k_main_u_1218@332:3>:unit)
      
      P[<main_1035@285:1>](<f_main_1297@329:1>:int,<f_main_1297@329:0>:int),
      P[<<rev_1033@287:1>@327:0>](<f_main_1297@329:1>:int,<f_main_1297@329:3>:int)|- P[<f_main_1297@329:3>](
      <f_main_1297@329:0>:int,<f_main_1297@329:1>:int,<f_main_1297@329:3>:int)
      
      P[<rev_1033@287:0>](<rev_1033@287:0>:int),
      P[<<f_rev_1295@309:1>@325:0>](<rev_1033@287:0>:int,<<rev_1033@287:1>@327:0>:int), (
      <rev_1033@287:0> <> 0) |- P[<<rev_1033@287:1>@327:0>](<rev_1033@287:0>:int,
                                                            <<rev_1033@287:1>@327:0>:int)
      
      P[<f_rev_1295@309:2>](<f_rev_1295@309:0>:int,<append_1030@311:0>:int),
      P[<<append_1030@311:2>@323:0>](<append_1030@311:0>:int,1:int,<<f_rev_1295@309:1>@325:0>:int)|- P[<<f_rev_1295@309:1>@325:0>](
      <f_rev_1295@309:0>:int,<<f_rev_1295@309:1>@325:0>:int)
      
      P[<append_1030@311:1>](<append_1030@311:0>:int,<append_1030@311:1>:int),
      P[<<f_append_1294@319:2>@321:0>](<append_1030@311:0>:int,<append_1030@311:1>:int,<<append_1030@311:2>@323:0>:int),
      (<append_1030@311:0> <> 0)
      |- P[<<append_1030@311:2>@323:0>](<append_1030@311:0>:int,<append_1030@311:1>:int,
                                        <<append_1030@311:2>@323:0>:int)
      
      P[<f_append_1294@319:3>](<f_append_1294@319:0>:int,<f_append_1294@319:1>:int,(
                               -1 + <<f_append_1294@319:2>@321:0>):int)|- P[<<f_append_1294@319:2>@321:0>](
      <f_append_1294@319:0>:int,<f_append_1294@319:1>:int,<<f_append_1294@319:2>@321:0>:int)
      
      P[<append_1030@311:1>](<f_append_1294@319:0>:int,<f_append_1294@319:1>:int),
      P[<<append_1030@314:2>@317:0>]((-1 + <f_append_1294@319:0>):int,<f_append_1294@319:1>:int,<f_append_1294@319:3>:int),
      (<f_append_1294@319:0> <> 0)
      |- P[<f_append_1294@319:3>](<f_append_1294@319:0>:int,<f_append_1294@319:1>:int,
                                  <f_append_1294@319:3>:int)
      
      P[<append_1030@314:1>](<append_1030@314:0>:int,<append_1030@314:1>:int),
      ((<append_1030@314:0> = 0) && (<<append_1030@314:2>@317:0> = <append_1030@314:1>))
      |- P[<<append_1030@314:2>@317:0>](<append_1030@314:0>:int,<append_1030@314:1>:int,
                                        <<append_1030@314:2>@317:0>:int)
      
      P[<append_1030@311:1>]((1 + <append_1030@314:0>):int,<append_1030@314:1>:int), (
      (1 + <append_1030@314:0>) <> 0) |- P[<append_1030@314:1>](<append_1030@314:0>:int,
                                                                <append_1030@314:1>:int)
      
      P[<f_rev_1295@309:2>](<f_rev_1295@309:0>:int,<append_1030@311:0>:int), (
      <append_1030@311:1> = 1) |- P[<append_1030@311:1>](<append_1030@311:0>:int,
                                                         <append_1030@311:1>:int)
      
      P[<rev_1033@287:0>](<f_rev_1295@309:0>:int),
      P[<<rev_1033@290:1>@307:0>]((-1 + <f_rev_1295@309:0>):int,<f_rev_1295@309:2>:int), (
      <f_rev_1295@309:0> <> 0) |- P[<f_rev_1295@309:2>](<f_rev_1295@309:0>:int,
                                                        <f_rev_1295@309:2>:int)
      
      P[<rev_1033@290:0>](<rev_1033@290:0>:int),
      P[<<f_rev_1295@298:1>@305:0>](<rev_1033@290:0>:int,<<rev_1033@290:1>@307:0>:int), (
      <rev_1033@290:0> <> 0) |- P[<<rev_1033@290:1>@307:0>](<rev_1033@290:0>:int,
                                                            <<rev_1033@290:1>@307:0>:int)
      
      P[<f_rev_1295@298:2>](<f_rev_1295@298:0>:int,<append_1030@300:0>:int),
      P[<<append_1030@300:2>@303:0>](<append_1030@300:0>:int,1:int,<<f_rev_1295@298:1>@305:0>:int)|- P[<<f_rev_1295@298:1>@305:0>](
      <f_rev_1295@298:0>:int,<<f_rev_1295@298:1>@305:0>:int)
      
      P[<append_1030@300:1>](<append_1030@300:0>:int,<append_1030@300:1>:int),
      ((<append_1030@300:0> = 0) && (<<append_1030@300:2>@303:0> = <append_1030@300:1>))
      |- P[<<append_1030@300:2>@303:0>](<append_1030@300:0>:int,<append_1030@300:1>:int,
                                        <<append_1030@300:2>@303:0>:int)
      
      P[<f_rev_1295@298:2>](<f_rev_1295@298:0>:int,<append_1030@300:0>:int), (
      <append_1030@300:1> = 1) |- P[<append_1030@300:1>](<append_1030@300:0>:int,
                                                         <append_1030@300:1>:int)
      
      P[<rev_1033@290:0>](<f_rev_1295@298:0>:int),
      P[<<rev_1033@293:1>@296:0>]((-1 + <f_rev_1295@298:0>):int,<f_rev_1295@298:2>:int), (
      <f_rev_1295@298:0> <> 0) |- P[<f_rev_1295@298:2>](<f_rev_1295@298:0>:int,
                                                        <f_rev_1295@298:2>:int)
      
      P[<rev_1033@293:0>](<rev_1033@293:0>:int), ((<rev_1033@293:0> = 0) && (<<rev_1033@293:1>@296:0> = 0))
      |- P[<<rev_1033@293:1>@296:0>](<rev_1033@293:0>:int,<<rev_1033@293:1>@296:0>:int)
      
      P[<rev_1033@290:0>]((1 + <rev_1033@293:0>):int), ((1 + <rev_1033@293:0>) <> 0)
      |- P[<rev_1033@293:0>](<rev_1033@293:0>:int)
      
      P[<rev_1033@287:0>]((1 + <rev_1033@290:0>):int), ((1 + <rev_1033@290:0>) <> 0)
      |- P[<rev_1033@290:0>](<rev_1033@290:0>:int)
      
      P[<main_1035@285:1>](<rev_1033@287:0>:int,<main_1035@285:1>:int)|- P[<rev_1033@287:0>](<rev_1033@287:0>:int)
      
      P[<f_1299@283:1>](<main_1035@285:0>:int,<main_1035@285:1>:int)|- P[<main_1035@285:1>](
      <main_1035@285:0>:int,<main_1035@285:1>:int)
      
      P[<f_1298@280:0>](<f_1299@283:0>:int)|- P[<f_1299@283:1>](<f_1299@283:0>:int,
                                                                <f_1299@283:1>:int)
      
      |- P[<f_1298@280:0>](<f_1298@280:0>:int)
    call trees:
      <main_1293@277>
        <f_1298@280>
          <f_1299@283>
            <main_1035@285>
              <rev_1033@287>
                <rev_1033@290>
                  <rev_1033@293>
                  </<rev_1033@293:1>@296>
                  <f_rev_1295@298>
                    <append_1030@300>
                    </<append_1030@300:2>@303>
                  </<f_rev_1295@298:1>@305>
                </<rev_1033@290:1>@307>
                <f_rev_1295@309>
                  <append_1030@311>
                    <append_1030@314>
                    </<append_1030@314:2>@317>
                    <f_append_1294@319>
                    </<f_append_1294@319:2>@321>
                  </<append_1030@311:2>@323>
                </<f_rev_1295@309:1>@325>
              </<rev_1033@287:1>@327>
              <f_main_1297@329>
                <k_main_u_1218@332>
                  <append_1030@334>
                    <append_1030@337>
                      <append_1030@340>
                      </<append_1030@340:2>@343>
                      <f_append_1294@345>
                      </<f_append_1294@345:2>@347>
                    </<append_1030@337:2>@349>
                    <f_append_1294@351>
                    </<f_append_1294@351:2>@353>
                  </<append_1030@334:2>@355>
                  <f_k_main_u_1296@357>
                    <fail_1301@360>
    inlined horn clauses:
      P[<fail_1301@360:0>](<fail_1301@360:0>:bool)|- bot
      
      P[<<rev_1033@287:1>@327:0>](<f_k_main_u_1296@357:1>:int,<f_k_main_u_1296@357:1>:int),
      P[<<append_1030@334:2>@355:0>](<f_k_main_u_1296@357:1>:int,<f_k_main_u_1296@357:0>:int,<f_k_main_u_1296@357:4>:int),
      ((<f_k_main_u_1296@357:4> <> (<f_k_main_u_1296@357:1> + <f_k_main_u_1296@357:0>)) && <fail_1301@360:0>)
      |- P[<fail_1301@360:0>](<fail_1301@360:0>:bool)
      
      P[<append_1030@334:1>](<append_1030@334:0>:int,<append_1030@334:1>:int),
      P[<<append_1030@337:2>@349:0>]((-1 + <append_1030@334:0>):int,<append_1030@334:1>:int,(
                                     -1 + <<append_1030@334:2>@355:0>):int), (
      <append_1030@334:0> <> 0)
      |- P[<<append_1030@334:2>@355:0>](<append_1030@334:0>:int,<append_1030@334:1>:int,
                                        <<append_1030@334:2>@355:0>:int)
      
      P[<append_1030@337:1>](<append_1030@337:0>:int,<append_1030@337:1>:int),
      P[<<append_1030@340:2>@343:0>]((-1 + <append_1030@337:0>):int,<append_1030@337:1>:int,(
                                     -1 + <<append_1030@337:2>@349:0>):int), (
      <append_1030@337:0> <> 0)
      |- P[<<append_1030@337:2>@349:0>](<append_1030@337:0>:int,<append_1030@337:1>:int,
                                        <<append_1030@337:2>@349:0>:int)
      
      P[<append_1030@340:1>](<append_1030@340:0>:int,<append_1030@340:1>:int),
      ((<append_1030@340:0> = 0) && (<<append_1030@340:2>@343:0> = <append_1030@340:1>))
      |- P[<<append_1030@340:2>@343:0>](<append_1030@340:0>:int,<append_1030@340:1>:int,
                                        <<append_1030@340:2>@343:0>:int)
      
      P[<append_1030@337:1>]((1 + <append_1030@340:0>):int,<append_1030@340:1>:int), (
      (1 + <append_1030@340:0>) <> 0) |- P[<append_1030@340:1>](<append_1030@340:0>:int,
                                                                <append_1030@340:1>:int)
      
      P[<append_1030@334:1>]((1 + <append_1030@337:0>):int,<append_1030@337:1>:int), (
      (1 + <append_1030@337:0>) <> 0) |- P[<append_1030@337:1>](<append_1030@337:0>:int,
                                                                <append_1030@337:1>:int)
      
      P[<<rev_1033@287:1>@327:0>](<append_1030@334:0>:int,<append_1030@334:0>:int)|- P[<append_1030@334:1>](
      <append_1030@334:0>:int,<append_1030@334:1>:int)
      
      P[<rev_1033@287:0>](<rev_1033@287:0>:int),
      P[<<rev_1033@290:1>@307:0>]((-1 + <rev_1033@287:0>):int,var292:int),
      P[<<append_1030@311:2>@323:0>](var292:int,1:int,<<rev_1033@287:1>@327:0>:int), (
      <rev_1033@287:0> <> 0) |- P[<<rev_1033@287:1>@327:0>](<rev_1033@287:0>:int,
                                                            <<rev_1033@287:1>@327:0>:int)
      
      P[<append_1030@311:1>](<append_1030@311:0>:int,<append_1030@311:1>:int),
      P[<<append_1030@314:2>@317:0>]((-1 + <append_1030@311:0>):int,<append_1030@311:1>:int,(
                                     -1 + <<append_1030@311:2>@323:0>):int), (
      <append_1030@311:0> <> 0)
      |- P[<<append_1030@311:2>@323:0>](<append_1030@311:0>:int,<append_1030@311:1>:int,
                                        <<append_1030@311:2>@323:0>:int)
      
      P[<append_1030@314:1>](<append_1030@314:0>:int,<append_1030@314:1>:int),
      ((<append_1030@314:0> = 0) && (<<append_1030@314:2>@317:0> = <append_1030@314:1>))
      |- P[<<append_1030@314:2>@317:0>](<append_1030@314:0>:int,<append_1030@314:1>:int,
                                        <<append_1030@314:2>@317:0>:int)
      
      P[<append_1030@311:1>]((1 + <append_1030@314:0>):int,<append_1030@314:1>:int), (
      (1 + <append_1030@314:0>) <> 0) |- P[<append_1030@314:1>](<append_1030@314:0>:int,
                                                                <append_1030@314:1>:int)
      
      P[<rev_1033@287:0>](<f_rev_1295@309:0>:int),
      P[<<rev_1033@290:1>@307:0>]((-1 + <f_rev_1295@309:0>):int,<append_1030@311:0>:int),
      ((<append_1030@311:1> = 1) && (<f_rev_1295@309:0> <> 0))
      |- P[<append_1030@311:1>](<append_1030@311:0>:int,<append_1030@311:1>:int)
      
      P[<rev_1033@290:0>](<rev_1033@290:0>:int),
      P[<<rev_1033@293:1>@296:0>]((-1 + <rev_1033@290:0>):int,var293:int),
      P[<<append_1030@300:2>@303:0>](var293:int,1:int,<<rev_1033@290:1>@307:0>:int), (
      <rev_1033@290:0> <> 0) |- P[<<rev_1033@290:1>@307:0>](<rev_1033@290:0>:int,
                                                            <<rev_1033@290:1>@307:0>:int)
      
      P[<append_1030@300:1>](<append_1030@300:0>:int,<append_1030@300:1>:int),
      ((<append_1030@300:0> = 0) && (<<append_1030@300:2>@303:0> = <append_1030@300:1>))
      |- P[<<append_1030@300:2>@303:0>](<append_1030@300:0>:int,<append_1030@300:1>:int,
                                        <<append_1030@300:2>@303:0>:int)
      
      P[<rev_1033@290:0>](<f_rev_1295@298:0>:int),
      P[<<rev_1033@293:1>@296:0>]((-1 + <f_rev_1295@298:0>):int,<append_1030@300:0>:int),
      ((<append_1030@300:1> = 1) && (<f_rev_1295@298:0> <> 0))
      |- P[<append_1030@300:1>](<append_1030@300:0>:int,<append_1030@300:1>:int)
      
      P[<rev_1033@293:0>](<rev_1033@293:0>:int), ((<rev_1033@293:0> = 0) && (<<rev_1033@293:1>@296:0> = 0))
      |- P[<<rev_1033@293:1>@296:0>](<rev_1033@293:0>:int,<<rev_1033@293:1>@296:0>:int)
      
      P[<rev_1033@290:0>]((1 + <rev_1033@293:0>):int), ((1 + <rev_1033@293:0>) <> 0)
      |- P[<rev_1033@293:0>](<rev_1033@293:0>:int)
      
      P[<rev_1033@287:0>]((1 + <rev_1033@290:0>):int), ((1 + <rev_1033@290:0>) <> 0)
      |- P[<rev_1033@290:0>](<rev_1033@290:0>:int)
      
      |- P[<rev_1033@287:0>](<rev_1033@287:0>:int)
    begin ParamSubstInfer.infer(191936)[3]
      
    end ParamSubstInfer.infer(191936)[3] (32.926994 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(191938)[3]
      
    end RefTypeInfer.elim_coeffs(191938)[3] (0.003999 sec.)
    begin YhornInterface.solve(192695)[3]
      begin HcSolver.solve_ub(192696)[4]
        encoded:
          P[<fail_1301@360:0>](<fail_1301@360:0>:int)|- bot
          
          P[<<rev_1033@287:1>@327:0>](<f_k_main_u_1296@357:1>:int,<f_k_main_u_1296@357:1>:int),
          P[<<append_1030@334:2>@355:0>](<f_k_main_u_1296@357:1>:int,<f_k_main_u_1296@357:0>:int,<f_k_main_u_1296@357:4>:int),
          ((<f_k_main_u_1296@357:4> <> (<f_k_main_u_1296@357:1> + <f_k_main_u_1296@357:0>)) && (<fail_1301@360:0> = 1))
          |- P[<fail_1301@360:0>](<fail_1301@360:0>:int)
          
          P[<append_1030@334:1>](<append_1030@334:0>:int,<append_1030@334:1>:int),
          P[<<append_1030@337:2>@349:0>]((-1 + <append_1030@334:0>):int,<append_1030@334:1>:int,(
                                         -1 + <<append_1030@334:2>@355:0>):int), (
          <append_1030@334:0> <> 0)
          |- P[<<append_1030@334:2>@355:0>](<append_1030@334:0>:int,<append_1030@334:1>:int,
                                            <<append_1030@334:2>@355:0>:int)
          
          P[<append_1030@337:1>](<append_1030@337:0>:int,<append_1030@337:1>:int),
          P[<<append_1030@340:2>@343:0>]((-1 + <append_1030@337:0>):int,<append_1030@337:1>:int,(
                                         -1 + <<append_1030@337:2>@349:0>):int), (
          <append_1030@337:0> <> 0)
          |- P[<<append_1030@337:2>@349:0>](<append_1030@337:0>:int,<append_1030@337:1>:int,
                                            <<append_1030@337:2>@349:0>:int)
          
          P[<append_1030@340:1>](<append_1030@340:0>:int,<append_1030@340:1>:int),
          ((<append_1030@340:0> = 0) && (<<append_1030@340:2>@343:0> = <append_1030@340:1>))
          |- P[<<append_1030@340:2>@343:0>](<append_1030@340:0>:int,<append_1030@340:1>:int,
                                            <<append_1030@340:2>@343:0>:int)
          
          P[<append_1030@337:1>]((1 + <append_1030@340:0>):int,<append_1030@340:1>:int),
          ((1 + <append_1030@340:0>) <> 0) |- P[<append_1030@340:1>](
          <append_1030@340:0>:int,<append_1030@340:1>:int)
          
          P[<append_1030@334:1>]((1 + <append_1030@337:0>):int,<append_1030@337:1>:int),
          ((1 + <append_1030@337:0>) <> 0) |- P[<append_1030@337:1>](
          <append_1030@337:0>:int,<append_1030@337:1>:int)
          
          P[<<rev_1033@287:1>@327:0>](<append_1030@334:0>:int,<append_1030@334:0>:int)|- P[<append_1030@334:1>](
          <append_1030@334:0>:int,<append_1030@334:1>:int)
          
          P[<rev_1033@287:0>](<rev_1033@287:0>:int),
          P[<<rev_1033@290:1>@307:0>]((-1 + <rev_1033@287:0>):int,var292:int),
          P[<<append_1030@311:2>@323:0>](var292:int,1:int,<<rev_1033@287:1>@327:0>:int), (
          <rev_1033@287:0> <> 0) |- P[<<rev_1033@287:1>@327:0>](<rev_1033@287:0>:int,
                                                                <<rev_1033@287:1>@327:0>:int)
          
          P[<append_1030@311:1>](<append_1030@311:0>:int,<append_1030@311:1>:int),
          P[<<append_1030@314:2>@317:0>]((-1 + <append_1030@311:0>):int,<append_1030@311:1>:int,(
                                         -1 + <<append_1030@311:2>@323:0>):int), (
          <append_1030@311:0> <> 0)
          |- P[<<append_1030@311:2>@323:0>](<append_1030@311:0>:int,<append_1030@311:1>:int,
                                            <<append_1030@311:2>@323:0>:int)
          
          P[<append_1030@314:1>](<append_1030@314:0>:int,<append_1030@314:1>:int),
          ((<append_1030@314:0> = 0) && (<<append_1030@314:2>@317:0> = <append_1030@314:1>))
          |- P[<<append_1030@314:2>@317:0>](<append_1030@314:0>:int,<append_1030@314:1>:int,
                                            <<append_1030@314:2>@317:0>:int)
          
          P[<append_1030@311:1>]((1 + <append_1030@314:0>):int,<append_1030@314:1>:int),
          ((1 + <append_1030@314:0>) <> 0) |- P[<append_1030@314:1>](
          <append_1030@314:0>:int,<append_1030@314:1>:int)
          
          P[<rev_1033@287:0>](<f_rev_1295@309:0>:int),
          P[<<rev_1033@290:1>@307:0>]((-1 + <f_rev_1295@309:0>):int,<append_1030@311:0>:int),
          ((<append_1030@311:1> = 1) && (<f_rev_1295@309:0> <> 0))
          |- P[<append_1030@311:1>](<append_1030@311:0>:int,<append_1030@311:1>:int)
          
          P[<rev_1033@290:0>](<rev_1033@290:0>:int),
          P[<<rev_1033@293:1>@296:0>]((-1 + <rev_1033@290:0>):int,var293:int),
          P[<<append_1030@300:2>@303:0>](var293:int,1:int,<<rev_1033@290:1>@307:0>:int), (
          <rev_1033@290:0> <> 0) |- P[<<rev_1033@290:1>@307:0>](<rev_1033@290:0>:int,
                                                                <<rev_1033@290:1>@307:0>:int)
          
          P[<append_1030@300:1>](<append_1030@300:0>:int,<append_1030@300:1>:int),
          ((<append_1030@300:0> = 0) && (<<append_1030@300:2>@303:0> = <append_1030@300:1>))
          |- P[<<append_1030@300:2>@303:0>](<append_1030@300:0>:int,<append_1030@300:1>:int,
                                            <<append_1030@300:2>@303:0>:int)
          
          P[<rev_1033@290:0>](<f_rev_1295@298:0>:int),
          P[<<rev_1033@293:1>@296:0>]((-1 + <f_rev_1295@298:0>):int,<append_1030@300:0>:int),
          ((<append_1030@300:1> = 1) && (<f_rev_1295@298:0> <> 0))
          |- P[<append_1030@300:1>](<append_1030@300:0>:int,<append_1030@300:1>:int)
          
          P[<rev_1033@293:0>](<rev_1033@293:0>:int), ((<rev_1033@293:0> = 0) && (<<rev_1033@293:1>@296:0> = 0))
          |- P[<<rev_1033@293:1>@296:0>](<rev_1033@293:0>:int,<<rev_1033@293:1>@296:0>:int)
          
          P[<rev_1033@290:0>]((1 + <rev_1033@293:0>):int), ((1 + <rev_1033@293:0>) <> 0)
          |- P[<rev_1033@293:0>](<rev_1033@293:0>:int)
          
          P[<rev_1033@287:0>]((1 + <rev_1033@290:0>):int), ((1 + <rev_1033@290:0>) <> 0)
          |- P[<rev_1033@290:0>](<rev_1033@290:0>:int)
          
          |- P[<rev_1033@287:0>](<rev_1033@287:0>:int)
        input to Yhorn:
          P[<fail_1301@360:0>](<fail_1301@360:0>:int)|- bot
          
          P[<<rev_1033@287:1>@327:0>](<f_k_main_u_1296@357:1>:int,<f_k_main_u_1296@357:1>:int),
          P[<<append_1030@334:2>@355:0>](<f_k_main_u_1296@357:1>:int,<f_k_main_u_1296@357:0>:int,<f_k_main_u_1296@357:4>:int),
          ((<f_k_main_u_1296@357:4> <> (<f_k_main_u_1296@357:1> + <f_k_main_u_1296@357:0>)) && (<fail_1301@360:0> = 1))
          |- P[<fail_1301@360:0>](<fail_1301@360:0>:int)
          
          P[<append_1030@334:1>](<append_1030@334:0>:int,<append_1030@334:1>:int),
          P[<<append_1030@337:2>@349:0>](var294:int,<append_1030@334:1>:int,var295:int),
          (((1 + var295) = <<append_1030@334:2>@355:0>) &&
           (((1 + var294) = <append_1030@334:0>) && (<append_1030@334:0> <> 0)))
          |- P[<<append_1030@334:2>@355:0>](<append_1030@334:0>:int,<append_1030@334:1>:int,
                                            <<append_1030@334:2>@355:0>:int)
          
          P[<append_1030@337:1>](<append_1030@337:0>:int,<append_1030@337:1>:int),
          P[<<append_1030@340:2>@343:0>](var296:int,<append_1030@337:1>:int,var297:int),
          (((1 + var297) = <<append_1030@337:2>@349:0>) &&
           (((1 + var296) = <append_1030@337:0>) && (<append_1030@337:0> <> 0)))
          |- P[<<append_1030@337:2>@349:0>](<append_1030@337:0>:int,<append_1030@337:1>:int,
                                            <<append_1030@337:2>@349:0>:int)
          
          P[<append_1030@340:1>](<append_1030@340:0>:int,<append_1030@340:1>:int),
          ((<<append_1030@340:2>@343:0> = <append_1030@340:1>) && (<append_1030@340:0> = 0))
          |- P[<<append_1030@340:2>@343:0>](<append_1030@340:0>:int,<append_1030@340:1>:int,
                                            <<append_1030@340:2>@343:0>:int)
          
          P[<append_1030@337:1>](var298:int,<append_1030@340:1>:int),
          ((var298 = (1 + <append_1030@340:0>)) && ((1 + <append_1030@340:0>) <> 0))
          |- P[<append_1030@340:1>](<append_1030@340:0>:int,<append_1030@340:1>:int)
          
          P[<append_1030@334:1>](var299:int,<append_1030@337:1>:int),
          ((var299 = (1 + <append_1030@337:0>)) && ((1 + <append_1030@337:0>) <> 0))
          |- P[<append_1030@337:1>](<append_1030@337:0>:int,<append_1030@337:1>:int)
          
          P[<<rev_1033@287:1>@327:0>](<append_1030@334:0>:int,<append_1030@334:0>:int)|- P[<append_1030@334:1>](
          <append_1030@334:0>:int,<append_1030@334:1>:int)
          
          P[<rev_1033@287:0>](<rev_1033@287:0>:int),
          P[<<rev_1033@290:1>@307:0>](var300:int,var292:int),
          P[<<append_1030@311:2>@323:0>](var292:int,var301:int,<<rev_1033@287:1>@327:0>:int),
          (((1 + var300) = <rev_1033@287:0>) && ((<rev_1033@287:0> <> 0) && (var301 = 1)))
          |- P[<<rev_1033@287:1>@327:0>](<rev_1033@287:0>:int,<<rev_1033@287:1>@327:0>:int)
          
          P[<append_1030@311:1>](<append_1030@311:0>:int,<append_1030@311:1>:int),
          P[<<append_1030@314:2>@317:0>](var302:int,<append_1030@311:1>:int,var303:int),
          (((1 + var303) = <<append_1030@311:2>@323:0>) &&
           (((1 + var302) = <append_1030@311:0>) && (<append_1030@311:0> <> 0)))
          |- P[<<append_1030@311:2>@323:0>](<append_1030@311:0>:int,<append_1030@311:1>:int,
                                            <<append_1030@311:2>@323:0>:int)
          
          P[<append_1030@314:1>](<append_1030@314:0>:int,<append_1030@314:1>:int),
          ((<<append_1030@314:2>@317:0> = <append_1030@314:1>) && (<append_1030@314:0> = 0))
          |- P[<<append_1030@314:2>@317:0>](<append_1030@314:0>:int,<append_1030@314:1>:int,
                                            <<append_1030@314:2>@317:0>:int)
          
          P[<append_1030@311:1>](var304:int,<append_1030@314:1>:int),
          ((var304 = (1 + <append_1030@314:0>)) && ((1 + <append_1030@314:0>) <> 0))
          |- P[<append_1030@314:1>](<append_1030@314:0>:int,<append_1030@314:1>:int)
          
          P[<rev_1033@287:0>](<f_rev_1295@309:0>:int),
          P[<<rev_1033@290:1>@307:0>](var305:int,<append_1030@311:0>:int),
          (((1 + var305) = <f_rev_1295@309:0>) && ((<f_rev_1295@309:0> <> 0) && (<append_1030@311:1> = 1)))
          |- P[<append_1030@311:1>](<append_1030@311:0>:int,<append_1030@311:1>:int)
          
          P[<rev_1033@290:0>](<rev_1033@290:0>:int),
          P[<<rev_1033@293:1>@296:0>](var306:int,var293:int),
          P[<<append_1030@300:2>@303:0>](var293:int,var307:int,<<rev_1033@290:1>@307:0>:int),
          (((1 + var306) = <rev_1033@290:0>) && ((<rev_1033@290:0> <> 0) && (var307 = 1)))
          |- P[<<rev_1033@290:1>@307:0>](<rev_1033@290:0>:int,<<rev_1033@290:1>@307:0>:int)
          
          P[<append_1030@300:1>](<append_1030@300:0>:int,<append_1030@300:1>:int),
          ((<<append_1030@300:2>@303:0> = <append_1030@300:1>) && (<append_1030@300:0> = 0))
          |- P[<<append_1030@300:2>@303:0>](<append_1030@300:0>:int,<append_1030@300:1>:int,
                                            <<append_1030@300:2>@303:0>:int)
          
          P[<rev_1033@290:0>](<f_rev_1295@298:0>:int),
          P[<<rev_1033@293:1>@296:0>](var308:int,<append_1030@300:0>:int),
          (((1 + var308) = <f_rev_1295@298:0>) && ((<f_rev_1295@298:0> <> 0) && (<append_1030@300:1> = 1)))
          |- P[<append_1030@300:1>](<append_1030@300:0>:int,<append_1030@300:1>:int)
          
          P[<rev_1033@293:0>](<rev_1033@293:0>:int), ((<<rev_1033@293:1>@296:0> = 0) && (<rev_1033@293:0> = 0))
          |- P[<<rev_1033@293:1>@296:0>](<rev_1033@293:0>:int,<<rev_1033@293:1>@296:0>:int)
          
          P[<rev_1033@290:0>](var309:int), ((var309 = (1 + <rev_1033@293:0>)) && ((1 + <rev_1033@293:0>) <> 0))
          |- P[<rev_1033@293:0>](<rev_1033@293:0>:int)
          
          P[<rev_1033@287:0>](var310:int), ((var310 = (1 + <rev_1033@290:0>)) && ((1 + <rev_1033@290:0>) <> 0))
          |- P[<rev_1033@290:0>](<rev_1033@290:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1301_sep_360_sep_0($2891)) -> 1=0.
(($2891-1=0) & ($2892-$2893-$2894<>0)) & (v_sep_append_1030_sep_334_sep_2_sep_355_sep_0($2893,$2894,$2892)) & (v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0($2893,$2893)) -> v_sep_fail_1301_sep_360_sep_0($2891).
(($2895<>0) & (-$2895+$2896+1=0) & ($2897-$2898+1=0)) & (v_sep_append_1030_sep_337_sep_2_sep_349_sep_0($2896,$2899,$2897)) & (v_sep_append_1030_sep_334_sep_1($2895,$2899)) -> v_sep_append_1030_sep_334_sep_2_sep_355_sep_0($2895,$2899,$2898).
(($2900<>0) & (-$2900+$2901+1=0) & ($2902-$2903+1=0)) & (v_sep_append_1030_sep_340_sep_2_sep_343_sep_0($2901,$2904,$2902)) & (v_sep_append_1030_sep_337_sep_1($2900,$2904)) -> v_sep_append_1030_sep_337_sep_2_sep_349_sep_0($2900,$2904,$2903).
(($2905=0) & ($2906-$2907=0)) & (v_sep_append_1030_sep_340_sep_1($2905,$2907)) -> v_sep_append_1030_sep_340_sep_2_sep_343_sep_0($2905,$2907,$2906).
(($2905+1<>0) & (-$2905+$2908-1=0)) & (v_sep_append_1030_sep_337_sep_1($2908,$2907)) -> v_sep_append_1030_sep_340_sep_1($2905,$2907).
(($2900+1<>0) & (-$2900+$2909-1=0)) & (v_sep_append_1030_sep_334_sep_1($2909,$2904)) -> v_sep_append_1030_sep_337_sep_1($2900,$2904).
(0=0) & (v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0($2895,$2895)) -> v_sep_append_1030_sep_334_sep_1($2895,$2899).
(($2910-1=0) & ($2911<>0) & (-$2911+$2912+1=0)) & (v_sep_append_1030_sep_311_sep_2_sep_323_sep_0($2913,$2910,$2914)) & (v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0($2912,$2913)) & (v_sep_rev_1033_sep_287_sep_0($2911)) -> v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0($2911,$2914).
(($2915<>0) & (-$2915+$2916+1=0) & ($2917-$2918+1=0)) & (v_sep_append_1030_sep_314_sep_2_sep_317_sep_0($2916,$2919,$2917)) & (v_sep_append_1030_sep_311_sep_1($2915,$2919)) -> v_sep_append_1030_sep_311_sep_2_sep_323_sep_0($2915,$2919,$2918).
(($2920=0) & ($2921-$2922=0)) & (v_sep_append_1030_sep_314_sep_1($2920,$2922)) -> v_sep_append_1030_sep_314_sep_2_sep_317_sep_0($2920,$2922,$2921).
(($2920+1<>0) & (-$2920+$2923-1=0)) & (v_sep_append_1030_sep_311_sep_1($2923,$2922)) -> v_sep_append_1030_sep_314_sep_1($2920,$2922).
(($2919-1=0) & ($2924<>0) & (-$2924+$2925+1=0)) & (v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0($2925,$2915)) & (v_sep_rev_1033_sep_287_sep_0($2924)) -> v_sep_append_1030_sep_311_sep_1($2915,$2919).
(($2926-1=0) & ($2927<>0) & (-$2927+$2928+1=0)) & (v_sep_append_1030_sep_300_sep_2_sep_303_sep_0($2929,$2926,$2930)) & (v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0($2928,$2929)) & (v_sep_rev_1033_sep_290_sep_0($2927)) -> v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0($2927,$2930).
(($2931=0) & ($2932-$2933=0)) & (v_sep_append_1030_sep_300_sep_1($2931,$2933)) -> v_sep_append_1030_sep_300_sep_2_sep_303_sep_0($2931,$2933,$2932).
(($2933-1=0) & ($2934<>0) & (-$2934+$2935+1=0)) & (v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0($2935,$2931)) & (v_sep_rev_1033_sep_290_sep_0($2934)) -> v_sep_append_1030_sep_300_sep_1($2931,$2933).
(($2936=0) & ($2937=0)) & (v_sep_rev_1033_sep_293_sep_0($2936)) -> v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0($2936,$2937).
(($2936+1<>0) & (-$2936+$2938-1=0)) & (v_sep_rev_1033_sep_290_sep_0($2938)) -> v_sep_rev_1033_sep_293_sep_0($2936).
(($2927+1<>0) & (-$2927+$2939-1=0)) & (v_sep_rev_1033_sep_287_sep_0($2939)) -> v_sep_rev_1033_sep_290_sep_0($2927).
0=0 -> v_sep_rev_1033_sep_287_sep_0($2911).


v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: X
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: X
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: X
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: X
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: X
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
.....................................................Split disj [86] 21.947663
Reconstrcut: 3 **)

v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: X
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: X
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: X
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: X
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
.......
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: X
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: X
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: X
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: X
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
.......Split conj [88] 21.956661
(Reconstrcut: 8 **)
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: X
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: X
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: X
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
...............
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: X
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: X
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: X
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
.......
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: X
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: X
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: X
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
.....................Split conj [91] 21.978658
(Reconstrcut: 27 ***)
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: X
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: X
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
...........................................
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: X
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: X
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
.......
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: X
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: X
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
...........................Split conj [97] 22.005653
(Reconstrcut: 14 ****)
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: X
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
...............................
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: X
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
.......
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: X
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
...........................
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: X
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
......................................................Split conj [106] 22.086641
(Reconstrcut: 34 ******)
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
..........................................
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
.......
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
...........................
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
.........................................................Split conj [116] 22.216622
(Reconstrcut: 46 ******)
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
..............................................................................
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
.......
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
...........................
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: X
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
.........................................................Split conj [131] 22.436588
(Reconstrcut: 26 ********)
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
.......................................
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
.......
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
...........................
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
.........................................................
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
....................................................................................................
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
................................................................................................................
v_sep_append_1030_sep_300_sep_1: X
v_sep_append_1030_sep_300_sep_2_sep_303_sep_0: X
v_sep_append_1030_sep_311_sep_1: X
v_sep_append_1030_sep_311_sep_2_sep_323_sep_0: X
v_sep_append_1030_sep_314_sep_1: X
v_sep_append_1030_sep_314_sep_2_sep_317_sep_0: X
v_sep_append_1030_sep_334_sep_1: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_append_1030_sep_334_sep_2_sep_355_sep_0: (X) & (X)
v_sep_append_1030_sep_337_sep_1: X
v_sep_append_1030_sep_337_sep_2_sep_349_sep_0: (X) & (X) & (X) & (X)
v_sep_append_1030_sep_340_sep_1: X
v_sep_append_1030_sep_340_sep_2_sep_343_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_360_sep_0: (X) | (X)
v_sep_rev_1033_sep_287_sep_0: X
v_sep_rev_1033_sep_287_sep_1_sep_327_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_rev_1033_sep_290_sep_0: X
v_sep_rev_1033_sep_290_sep_1_sep_307_sep_0: X
v_sep_rev_1033_sep_293_sep_0: X
v_sep_rev_1033_sep_293_sep_1_sep_296_sep_0: X
............................................................................................................................