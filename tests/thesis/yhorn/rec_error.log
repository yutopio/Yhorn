MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn rec_error.ml

parsed::
 let rec f_1030 g_1031 x_1032 =
   if g_1031 x_1032 >= 3 then
     let u_1045 = {fail} () 
     in
       _|_
   else
     f_1030 (f_1030 g_1031) (g_1031 x_1032) 
 in
 let succ_1033 x_1034 = x_1034 + 1 
 in
 let main_1035 = f_1030 succ_1033 0 
 in
   ()

set_target::
 let rec f_1030 g_1031 x_1032 =
   if g_1031 x_1032 >= 3 then
     let u_1045 = {fail} () 
     in
       _|_
   else
     f_1030 (f_1030 g_1031) (g_1031 x_1032) 
 in
 let succ_1033 x_1034 = x_1034 + 1 
 in
 let main_1035 = f_1030 succ_1033 0 
 in
 let main_1064 = main_1035 
 in
   ()

CPS::
 let rec f_1030 (g_1031:(int -> ((int -> X) -> X))) (x_1032:int) (k_f_1104:(
   int -> X)) =
   g_1031 x_1032
     (fun x_1107 ->
        (if x_1107 >= 3 then
           {|fail|} () (fun x_1121 -> _|_)
         else
           g_1031 x_1032 (fun x_1164 -> f_1030 (f_1030 g_1031) x_1164 k_f_1104))) 
 in
 let succ_1033 (x_1034:int) (k_succ_1182:(int -> X)) = k_succ_1182 (x_1034 + 1) 
 in
   f_1030 succ_1033 0 (fun x_1185 -> end)

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1204
  main_1204 -> (f_1030 succ_1033 0 f_1208)
  f_1030 g_1031 x_1032 k_f_1104 -> (g_1031 x_1032 (f_f_1205 x_1032 g_1031 k_f_1104))
  f_1208 x_1185 -> end
  f_f_1205 x_1032 g_1031 k_f_1104 x_1107 when (x_1107 >= 3) -> (fail_1209 true (f_f_1206 x_1032 x_1107))
  f_f_1205 x_1032 g_1031 k_f_1104 x_1107 when (not (x_1107 >= 3)) ->
      (g_1031 x_1032 (f_f_1207 x_1032 x_1107 g_1031 k_f_1104))
  f_f_1206 x_1032 x_1107 x_1121 -> _|_
  f_f_1207 x_1032 x_1107 g_1031 k_f_1104 x_1164 -> (f_1030 (f_1030 g_1031) x_1164 k_f_1104)
  fail_1209 b k -> {fail} => (k ())
  succ_1033 x_1034 k_succ_1182 -> (k_succ_1182 (x_1034 + 1))
Types:
  main_1204 : X
  f_1030 : ((int -> (int -> X) -> X) -> int -> (int -> X) -> X)
  fail_1209 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1204 ... --> 
  f_1030 ... --> 
  succ_1033 ... --> 
  f_f_1205 [1/2] ... --> 
  fail_1209 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(52)[1]
  program:
    main_1204  | true = (f_1030 succ_1033
                                0
                                f_1208)
    f_1030 g_1031 x_1032 k_f_1104 | true = (g_1031 x_1032
                                                   (f_f_1205 x_1032
                                                             g_1031
                                                             k_f_1104))
    f_1208 x_1185 | true = end
    f_f_1205 x_1032 g_1031 k_f_1104 x_1107 | (x_1107 >= 3) = (fail_1209 true
                                                                    (f_f_1206 x_1032
                                                                    x_1107))
    f_f_1205 x_1032 g_1031 k_f_1104 x_1107 | (not (x_1107 >= 3)) = (g_1031
                                                                    x_1032
                                                                    (
                                                                    f_f_1207 x_1032
                                                                    x_1107
                                                                    g_1031
                                                                    k_f_1104))
    f_f_1206 x_1032 x_1107 x_1121 | true = bot
    f_f_1207 x_1032 x_1107 g_1031 k_f_1104 x_1164 | true = (f_1030 (f_1030 g_1031)
                                                                   x_1164
                                                                   k_f_1104)
    fail_1209 b k | true = (fail ())
    succ_1033 x_1034 k_succ_1182 | true = (k_succ_1182 (x_1034 + 1))
    main_1204:X
    f_1030:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_1208:int -> X
    f_f_1205:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_f_1206:int -> int -> unit -> X
    f_f_1207:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    fail_1209:bool -> (unit -> X) -> X
    succ_1033:int -> (int -> X) -> X
  inlined functions: f_1208,f_f_1205,f_f_1206,f_f_1207,succ_1033
  counterexample: 0:0:0:0:0
  error traces:
    [true.(<f_1030@3:1> = 0)
     [true.(<<f_1030@3:0>@5:0> = <f_1030@3:1>)
      [true.(<succ_1033@7:0> = <<f_1030@3:0>@5:0>)
       [true.(<<succ_1033@7:1>@9:0> = (<succ_1033@7:0> + 1))
        [true.(<<<f_1030@3:0>@5:1>@11:0> = <<succ_1033@7:1>@9:0>)
         [true.((<f_f_1205@13:0> = <f_1030@3:1>) && (<f_f_1205@13:3> = <<<f_1030@3:0>@5:1>@11:0>))
          [(<f_f_1205@13:3> >= 3).(<fail_1209@16:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(53)[2]
    horn clauses:
      P[<fail_1209@16:0>](<fail_1209@16:0>:bool)|- bot
      
      P[<f_f_1205@13:3>](<f_f_1205@13:0>:int,<f_f_1205@13:3>:int), ((<f_f_1205@13:3> >= 3) && <fail_1209@16:0>)
      |- P[<fail_1209@16:0>](<fail_1209@16:0>:bool)
      
      P[<f_1030@3:1>](<f_f_1205@13:0>:int),
      P[<<<f_1030@3:0>@5:1>@11:0>](<f_f_1205@13:0>:int,<f_f_1205@13:3>:int)|- P[<f_f_1205@13:3>](
      <f_f_1205@13:0>:int,<f_f_1205@13:3>:int)
      
      P[<<succ_1033@7:1>@9:0>](<<f_1030@3:0>@5:0>:int,<<<f_1030@3:0>@5:1>@11:0>:int)|- P[<<<f_1030@3:0>@5:1>@11:0>](
      <<f_1030@3:0>@5:0>:int,<<<f_1030@3:0>@5:1>@11:0>:int)
      
      P[<succ_1033@7:0>](<succ_1033@7:0>:int), (<<succ_1033@7:1>@9:0> = (1 + <succ_1033@7:0>))
      |- P[<<succ_1033@7:1>@9:0>](<succ_1033@7:0>:int,<<succ_1033@7:1>@9:0>:int)
      
      P[<<f_1030@3:0>@5:0>](<succ_1033@7:0>:int)|- P[<succ_1033@7:0>](<succ_1033@7:0>:int)
      
      P[<f_1030@3:1>](<<f_1030@3:0>@5:0>:int)|- P[<<f_1030@3:0>@5:0>](<<f_1030@3:0>@5:0>:int)
      
       (<f_1030@3:1> = 0) |- P[<f_1030@3:1>](<f_1030@3:1>:int)
    call trees:
      <main_1204@1>
        <f_1030@3>
        </<f_1030@3:0>@5>
        <succ_1033@7>
        </<succ_1033@7:1>@9>
        <<<f_1030@3:0>@5:1>@11>
          <f_f_1205@13>
            <fail_1209@16>
    inlined horn clauses:
      P[<fail_1209@16:0>](<fail_1209@16:0>:bool)|- bot
      
      P[<f_1030@3:1>](<f_f_1205@13:0>:int),
      P[<<<f_1030@3:0>@5:1>@11:0>](<f_f_1205@13:0>:int,<f_f_1205@13:3>:int),
      ((<f_f_1205@13:3> >= 3) && <fail_1209@16:0>) |- P[<fail_1209@16:0>](
      <fail_1209@16:0>:bool)
      
      P[<<f_1030@3:0>@5:0>](<<f_1030@3:0>@5:0>:int), (<<<f_1030@3:0>@5:1>@11:0> = (1 + <<f_1030@3:0>@5:0>))
      |- P[<<<f_1030@3:0>@5:1>@11:0>](<<f_1030@3:0>@5:0>:int,<<<f_1030@3:0>@5:1>@11:0>:int)
      
      P[<f_1030@3:1>](<<f_1030@3:0>@5:0>:int)|- P[<<f_1030@3:0>@5:0>](<<f_1030@3:0>@5:0>:int)
      
       (<f_1030@3:1> = 0) |- P[<f_1030@3:1>](<f_1030@3:1>:int)
    begin ParamSubstInfer.infer(908)[3]
      
    end ParamSubstInfer.infer(908)[3] (0.004999 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(910)[3]
      
    end RefTypeInfer.elim_coeffs(910)[3] (0.000000 sec.)
    begin YhornInterface.solve(1072)[3]
      begin HcSolver.solve_ub(1073)[4]
        encoded:
          P[<fail_1209@16:0>](<fail_1209@16:0>:int)|- bot
          
          P[<f_1030@3:1>](<f_f_1205@13:0>:int),
          P[<<<f_1030@3:0>@5:1>@11:0>](<f_f_1205@13:0>:int,<f_f_1205@13:3>:int),
          ((<f_f_1205@13:3> >= 3) && (<fail_1209@16:0> = 1)) |- P[<fail_1209@16:0>](
          <fail_1209@16:0>:int)
          
          P[<<f_1030@3:0>@5:0>](<<f_1030@3:0>@5:0>:int), (<<<f_1030@3:0>@5:1>@11:0> = (1 + <<f_1030@3:0>@5:0>))
          |- P[<<<f_1030@3:0>@5:1>@11:0>](<<f_1030@3:0>@5:0>:int,<<<f_1030@3:0>@5:1>@11:0>:int)
          
          P[<f_1030@3:1>](<<f_1030@3:0>@5:0>:int)|- P[<<f_1030@3:0>@5:0>](<<f_1030@3:0>@5:0>:int)
          
           (<f_1030@3:1> = 0) |- P[<f_1030@3:1>](<f_1030@3:1>:int)
        input to Yhorn:
          P[<fail_1209@16:0>](<fail_1209@16:0>:int)|- bot
          
          P[<f_1030@3:1>](<f_f_1205@13:0>:int),
          P[<<<f_1030@3:0>@5:1>@11:0>](<f_f_1205@13:0>:int,<f_f_1205@13:3>:int),
          ((<f_f_1205@13:3> >= 3) && (<fail_1209@16:0> = 1)) |- P[<fail_1209@16:0>](
          <fail_1209@16:0>:int)
          
          P[<<f_1030@3:0>@5:0>](<<f_1030@3:0>@5:0>:int), (<<<f_1030@3:0>@5:1>@11:0> = (1 + <<f_1030@3:0>@5:0>))
          |- P[<<<f_1030@3:0>@5:1>@11:0>](<<f_1030@3:0>@5:0>:int,<<<f_1030@3:0>@5:1>@11:0>:int)
          
          P[<f_1030@3:1>](<<f_1030@3:0>@5:0>:int)|- P[<<f_1030@3:0>@5:0>](<<f_1030@3:0>@5:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1209_sep_16_sep_0($7)) -> 1=0.
(($7-1=0) & ($8-3>=0)) & (v_sep_f_1030_sep_3_sep_0_sep_5_sep_1_sep_11_sep_0($9,$8)) & (v_sep_f_1030_sep_3_sep_1($9)) -> v_sep_fail_1209_sep_16_sep_0($7).
($10-$11-1=0) & (v_sep_f_1030_sep_3_sep_0_sep_5_sep_0($11)) -> v_sep_f_1030_sep_3_sep_0_sep_5_sep_1_sep_11_sep_0($11,$10).
(0=0) & (v_sep_f_1030_sep_3_sep_1($11)) -> v_sep_f_1030_sep_3_sep_0_sep_5_sep_0($11).
$12=0 -> v_sep_f_1030_sep_3_sep_1($12).


v_sep_f_1030_sep_3_sep_0_sep_5_sep_0: X
v_sep_f_1030_sep_3_sep_0_sep_5_sep_1_sep_11_sep_0: X
v_sep_f_1030_sep_3_sep_1: X
v_sep_fail_1209_sep_16_sep_0: X
......
v_sep_f_1030_sep_3_sep_0_sep_5_sep_0: X
v_sep_f_1030_sep_3_sep_0_sep_5_sep_1_sep_11_sep_0: X
v_sep_f_1030_sep_3_sep_1: X
v_sep_fail_1209_sep_16_sep_0: X
....
v_sep_f_1030_sep_3_sep_0_sep_5_sep_0: X
v_sep_f_1030_sep_3_sep_0_sep_5_sep_1_sep_11_sep_0: X
v_sep_f_1030_sep_3_sep_1: X
v_sep_fail_1209_sep_16_sep_0: X
.....
v_sep_f_1030_sep_3_sep_0_sep_5_sep_0: X
v_sep_f_1030_sep_3_sep_0_sep_5_sep_1_sep_11_sep_0: X
v_sep_f_1030_sep_3_sep_1: X
v_sep_fail_1209_sep_16_sep_0: X
......(0=0) & (v_sep_fail_1209_sep_16_sep_0($7)) -> 1=0.
(($7-1=0) & ($8-3>=0)) & (v_sep_f_1030_sep_3_sep_0_sep_5_sep_1_sep_11_sep_0($9,$8)) & (v_sep_f_1030_sep_3_sep_1($9)) -> v_sep_fail_1209_sep_16_sep_0($7).
($10-$11-1=0) & (v_sep_f_1030_sep_3_sep_0_sep_5_sep_0($11)) -> v_sep_f_1030_sep_3_sep_0_sep_5_sep_1_sep_11_sep_0($11,$10).
(0=0) & (v_sep_f_1030_sep_3_sep_1($11)) -> v_sep_f_1030_sep_3_sep_0_sep_5_sep_0($11).
$12=0 -> v_sep_f_1030_sep_3_sep_1($12).

           (<f_1030@3:1> = 0) |- P[<f_1030@3:1>](<f_1030@3:1>:int)
        solution:
          P[<<f_1030@3:0>@5:0>]($24:int) = ($24 <= 0)
          P[<<<f_1030@3:0>@5:1>@11:0>]($16:int,$18:int) = ((2 * $18) <= (2 + $16))
          P[<f_1030@3:1>]($21:int) = ($21 <= 0)
          P[<fail_1209@16:0>]($13:bool) = false
        
      end HcSolver.solve_ub(1073)[4] (0.012998 sec.)
      begin HcSolver.check_validity(1185)[4]
        input:
          P[<fail_1209@16:0>](<fail_1209@16:0>:bool)|- bot
          
          P[<f_1030@3:1>](<f_f_1205@13:0>:int),
          P[<<<f_1030@3:0>@5:1>@11:0>](<f_f_1205@13:0>:int,<f_f_1205@13:3>:int),
          ((<f_f_1205@13:3> >= 3) && <fail_1209@16:0>) |- P[<fail_1209@16:0>](
          <fail_1209@16:0>:bool)
          
          P[<<f_1030@3:0>@5:0>](<<f_1030@3:0>@5:0>:int), (<<<f_1030@3:0>@5:1>@11:0> = (1 + <<f_1030@3:0>@5:0>))
          |- P[<<<f_1030@3:0>@5:1>@11:0>](<<f_1030@3:0>@5:0>:int,<<<f_1030@3:0>@5:1>@11:0>:int)
          
          P[<f_1030@3:1>](<<f_1030@3:0>@5:0>:int)|- P[<<f_1030@3:0>@5:0>](<<f_1030@3:0>@5:0>:int)
          
           (<f_1030@3:1> = 0) |- P[<f_1030@3:1>](<f_1030@3:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1185)[4] (0.009999 sec.)
      solution:
        P[<<f_1030@3:0>@5:0>]($24:int) = ($24 <= 0)
        P[<<<f_1030@3:0>@5:1>@11:0>]($16:int,$18:int) = ((2 * $18) <= (2 + $16))
        P[<f_1030@3:1>]($21:int) = ($21 <= 0)
        P[<fail_1209@16:0>]($13:bool) = false
    end YhornInterface.solve(1072)[3] (0.022997 sec.)
    
  end RefTypeInfer.infer_etrs(53)[2] (0.034995 sec.)
  refinement types:
    main_1204: X
    f_1030: (v1:{v1:int | (v1 <= 0)} -> (v2:{v2:int | ((2 * v2) <= (2 + v1))} -> X) -> X) ->
            v5:{v5:int | (v5 <= 0)} -> (v6:int -> X) -> X
    succ_1033: v1:int -> (v2:int -> X) -> X
    f_f_1205: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    fail_1209: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1208: var13:int -> X
    f_f_1206: var17:int -> var16:int -> var15:unit -> X
    f_f_1207: var27:int -> var26:int -> (var25:int -> (var24:int -> X) -> X) -> (var21:int -> X) -> var19:int -> X
  abstraction types:
    main_1204: X
    f_1030: (v1:int[v1 -> (v1 <= 0)] -> (v2:int[v2 -> ((2 * v2) <= (2 + v1))] -> X) -> X) ->
            v5:int[v5 -> (v5 <= 0)] -> (v6:int -> X) -> X
    succ_1033: v1:int -> (v2:int -> X) -> X
    f_f_1205: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    fail_1209: v1:bool -> (v2:unit -> X) -> X
    f_1208: var13:int -> X
    f_f_1206: var17:int -> var16:int -> var15:unit -> X
    f_f_1207: var27:int -> var26:int -> (var25:int -> (var24:int -> X) -> X) -> (var21:int -> X) -> var19:int -> X
  
end AbsTypeInfer.refine(52)[1] (0.036994 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1204
  main_1204 -> (f_1030 succ_1033 0 f_1208)
  f_1030 g_1031 x_1032 k_f_1104 -> (g_1031 x_1032 (f_f_1205 x_1032 g_1031 k_f_1104))
  f_1208 x_1185 -> end
  f_f_1205 x_1032 g_1031 k_f_1104 x_1107 when (x_1107 >= 3) -> (fail_1209 true (f_f_1206 x_1032 x_1107))
  f_f_1205 x_1032 g_1031 k_f_1104 x_1107 when (not (x_1107 >= 3)) ->
      (g_1031 x_1032 (f_f_1207 x_1032 x_1107 g_1031 k_f_1104))
  f_f_1206 x_1032 x_1107 x_1121 -> _|_
  f_f_1207 x_1032 x_1107 g_1031 k_f_1104 x_1164 -> (f_1030 (f_1030 g_1031) x_1164 k_f_1104)
  fail_1209 b k -> {fail} => (k ())
  succ_1033 x_1034 k_succ_1182 -> (k_succ_1182 (x_1034 + 1))
Types:
  main_1204 : X
  f_1030 : ((x_2:int[x_2 <= 0] -> (x_4:int[x_2 >= 2*x_4 - 2] -> X) -> X) -> x_7:int[x_7 <= 0] -> (int -> X) -> X)
  fail_1209 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1204 ... --> 
  f_1030 ... --> 
  succ_1033 ... --> 
  f_f_1205 [2/2] ... --> 
  succ_1033 ... --> 
  f_f_1207 ... --> 
  f_1030 ... --> 
  f_1030 ... --> 
  succ_1033 ... --> 
  f_f_1205 [1/2] ... --> 
  fail_1209 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(2230)[1]
  program:
    main_1204  | true = (f_1030 succ_1033
                                0
                                f_1208)
    f_1030 g_1031 x_1032 k_f_1104 | true = (g_1031 x_1032
                                                   (f_f_1205 x_1032
                                                             g_1031
                                                             k_f_1104))
    f_1208 x_1185 | true = end
    f_f_1205 x_1032 g_1031 k_f_1104 x_1107 | (x_1107 >= 3) = (fail_1209 true
                                                                    (f_f_1206 x_1032
                                                                    x_1107))
    f_f_1205 x_1032 g_1031 k_f_1104 x_1107 | (not (x_1107 >= 3)) = (g_1031
                                                                    x_1032
                                                                    (
                                                                    f_f_1207 x_1032
                                                                    x_1107
                                                                    g_1031
                                                                    k_f_1104))
    f_f_1206 x_1032 x_1107 x_1121 | true = bot
    f_f_1207 x_1032 x_1107 g_1031 k_f_1104 x_1164 | true = (f_1030 (f_1030 g_1031)
                                                                   x_1164
                                                                   k_f_1104)
    fail_1209 b k | true = (fail ())
    succ_1033 x_1034 k_succ_1182 | true = (k_succ_1182 (x_1034 + 1))
    main_1204:X
    f_1030:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_1208:int -> X
    f_f_1205:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_f_1206:int -> int -> unit -> X
    f_f_1207:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    fail_1209:bool -> (unit -> X) -> X
    succ_1033:int -> (int -> X) -> X
  inlined functions: f_1208,f_f_1205,f_f_1206,f_f_1207,succ_1033
  counterexample: 0:0:0:1:0:0:0:0:0:0:0
  error traces:
    [true.(<f_1030@21:1> = 0)
     [true.(<<f_1030@21:0>@23:0> = <f_1030@21:1>)
      [true.(<succ_1033@25:0> = <<f_1030@21:0>@23:0>)
       [true.(<<succ_1033@25:1>@27:0> = (<succ_1033@25:0> + 1))
        [true.(<<<f_1030@21:0>@23:1>@29:0> = <<succ_1033@25:1>@27:0>)
         [true.((<f_f_1205@31:0> = <f_1030@21:1>) && (<f_f_1205@31:3> = <<<f_1030@21:0>@23:1>@29:0>))
          [(not (<f_f_1205@31:3> >= 3)).(<<f_f_1205@31:1>@34:0> = <f_f_1205@31:0>)
           [true.(<<f_1030@21:0>@36:0> = <<f_f_1205@31:1>@34:0>)
            [true.(<succ_1033@38:0> = <<f_1030@21:0>@36:0>)
             [true.(<<succ_1033@38:1>@40:0> = (<succ_1033@38:0> + 1))
              [true.(<<<f_1030@21:0>@36:1>@42:0> = <<succ_1033@38:1>@40:0>)
               [true.(<<<f_f_1205@31:1>@34:1>@44:0> = <<<f_1030@21:0>@36:1>@42:0>)
                [true.
                 ((<f_f_1207@46:0> = <f_f_1205@31:0>) &&
                  ((<f_f_1207@46:1> = <f_f_1205@31:3>) && (<f_f_1207@46:4> = <<<f_f_1205@31:1>@34:1>@44:0>)))
                 [true.(<f_1030@48:1> = <f_f_1207@46:4>)
                  [true.(<<f_1030@48:0>@50:0> = <f_1030@48:1>)
                   [true.(<f_1030@52:1> = <<f_1030@48:0>@50:0>)
                    [true.(<<f_1030@52:0>@54:0> = <f_1030@52:1>)
                     [true.(<<f_f_1207@46:2>@56:0> = <<f_1030@52:0>@54:0>)
                      [true.(<<f_f_1205@31:1>@58:0> = <<f_f_1207@46:2>@56:0>)
                       [true.(<<f_1030@21:0>@60:0> = <<f_f_1205@31:1>@58:0>)
                        [true.(<succ_1033@62:0> = <<f_1030@21:0>@60:0>)
                         [true.(<<succ_1033@62:1>@64:0> = (<succ_1033@62:0> + 1))
                          [true.(<<<f_1030@21:0>@60:1>@66:0> = <<succ_1033@62:1>@64:0>)
                           [true.(<<<f_f_1205@31:1>@58:1>@68:0> = <<<f_1030@21:0>@60:1>@66:0>)
                            [true.(<<<f_f_1207@46:2>@56:1>@70:0> = <<<f_f_1205@31:1>@58:1>@68:0>)
                             [true.(<<<f_1030@52:0>@54:1>@72:0> = <<<f_f_1207@46:2>@56:1>@70:0>)
                              [true.
                               ((<f_f_1205@74:0> = <f_1030@52:1>) && (<f_f_1205@74:3> = <<<f_1030@52:0>@54:1>@72:0>))
                               [(<f_f_1205@74:3> >= 3).(<fail_1209@77:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(2231)[2]
    horn clauses:
      P[<fail_1209@77:0>](<fail_1209@77:0>:bool)|- bot
      
      P[<f_f_1205@74:3>](<f_f_1205@74:0>:int,<f_f_1205@74:3>:int), ((<f_f_1205@74:3> >= 3) && <fail_1209@77:0>)
      |- P[<fail_1209@77:0>](<fail_1209@77:0>:bool)
      
      P[<f_1030@52:1>](<f_f_1205@74:0>:int),
      P[<<<f_1030@52:0>@54:1>@72:0>](<f_f_1205@74:0>:int,<f_f_1205@74:3>:int)|- P[<f_f_1205@74:3>](
      <f_f_1205@74:0>:int,<f_f_1205@74:3>:int)
      
      P[<f_f_1207@46:4>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int,<f_1030@48:1>:int),
      P[<<<f_f_1207@46:2>@56:1>@70:0>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int,<<f_1030@52:0>@54:0>:int,<<<f_1030@52:0>@54:1>@72:0>:int)|- P[<<<f_1030@52:0>@54:1>@72:0>](
      <<f_1030@52:0>@54:0>:int,<<<f_1030@52:0>@54:1>@72:0>:int)
      
      P[<f_f_1205@31:3>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int),
      P[<<<f_f_1205@31:1>@58:1>@68:0>](<f_f_1207@46:0>:int,<<f_f_1207@46:2>@56:0>:int,<<<f_f_1207@46:2>@56:1>@70:0>:int),
      (<f_f_1207@46:1> < 3)
      |- P[<<<f_f_1207@46:2>@56:1>@70:0>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int,
                                          <<f_f_1207@46:2>@56:0>:int,
                                          <<<f_f_1207@46:2>@56:1>@70:0>:int)
      
      P[<f_1030@21:1>](<f_f_1205@31:0>:int),
      P[<<<f_1030@21:0>@60:1>@66:0>](<<f_f_1205@31:1>@58:0>:int,<<<f_f_1205@31:1>@58:1>@68:0>:int)|- P[<<<f_f_1205@31:1>@58:1>@68:0>](
      <f_f_1205@31:0>:int,<<f_f_1205@31:1>@58:0>:int,<<<f_f_1205@31:1>@58:1>@68:0>:int)
      
      P[<<succ_1033@62:1>@64:0>](<<f_1030@21:0>@60:0>:int,<<<f_1030@21:0>@60:1>@66:0>:int)|- P[<<<f_1030@21:0>@60:1>@66:0>](
      <<f_1030@21:0>@60:0>:int,<<<f_1030@21:0>@60:1>@66:0>:int)
      
      P[<succ_1033@62:0>](<succ_1033@62:0>:int), (<<succ_1033@62:1>@64:0> = (1 + <succ_1033@62:0>))
      |- P[<<succ_1033@62:1>@64:0>](<succ_1033@62:0>:int,<<succ_1033@62:1>@64:0>:int)
      
      P[<<f_1030@21:0>@60:0>](<succ_1033@62:0>:int)|- P[<succ_1033@62:0>](<succ_1033@62:0>:int)
      
      P[<f_1030@21:1>](<<f_1030@21:0>@23:0>:int),
      P[<<f_f_1205@31:1>@58:0>](<<f_1030@21:0>@23:0>:int,<<f_1030@21:0>@60:0>:int)|- P[<<f_1030@21:0>@60:0>](
      <<f_1030@21:0>@60:0>:int)
      
      P[<f_f_1205@31:3>](<f_f_1205@31:0>:int,<f_f_1207@46:1>:int),
      P[<<f_f_1207@46:2>@56:0>](<f_f_1205@31:0>:int,<f_f_1207@46:1>:int,<<f_f_1205@31:1>@58:0>:int),
      (<f_f_1207@46:1> < 3) |- P[<<f_f_1205@31:1>@58:0>](<f_f_1205@31:0>:int,
                                                         <<f_f_1205@31:1>@58:0>:int)
      
      P[<f_f_1207@46:4>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int,<f_1030@48:1>:int),
      P[<<f_1030@52:0>@54:0>](<<f_f_1207@46:2>@56:0>:int)|- P[<<f_f_1207@46:2>@56:0>](
      <f_f_1207@46:0>:int,<f_f_1207@46:1>:int,<<f_f_1207@46:2>@56:0>:int)
      
      P[<f_1030@52:1>](<<f_1030@52:0>@54:0>:int)|- P[<<f_1030@52:0>@54:0>](<<f_1030@52:0>@54:0>:int)
      
      P[<f_f_1207@46:4>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int,<f_1030@48:1>:int),
      P[<<f_1030@48:0>@50:0>](<f_1030@52:1>:int)|- P[<f_1030@52:1>](<f_1030@52:1>:int)
      
      P[<f_1030@48:1>](<<f_1030@48:0>@50:0>:int)|- P[<<f_1030@48:0>@50:0>](<<f_1030@48:0>@50:0>:int)
      
      P[<f_f_1207@46:4>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int,<f_1030@48:1>:int)|- P[<f_1030@48:1>](
      <f_1030@48:1>:int)
      
      P[<f_f_1205@31:3>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int),
      P[<<<f_f_1205@31:1>@34:1>@44:0>](<f_f_1207@46:0>:int,<f_f_1207@46:0>:int,<f_f_1207@46:4>:int),
      (<f_f_1207@46:1> < 3) |- P[<f_f_1207@46:4>](<f_f_1207@46:0>:int,
                                                  <f_f_1207@46:1>:int,
                                                  <f_f_1207@46:4>:int)
      
      P[<f_1030@21:1>](<f_f_1205@31:0>:int),
      P[<<<f_1030@21:0>@36:1>@42:0>](<<f_f_1205@31:1>@34:0>:int,<<<f_f_1205@31:1>@34:1>@44:0>:int)|- P[<<<f_f_1205@31:1>@34:1>@44:0>](
      <f_f_1205@31:0>:int,<<f_f_1205@31:1>@34:0>:int,<<<f_f_1205@31:1>@34:1>@44:0>:int)
      
      P[<<succ_1033@38:1>@40:0>](<<f_1030@21:0>@36:0>:int,<<<f_1030@21:0>@36:1>@42:0>:int)|- P[<<<f_1030@21:0>@36:1>@42:0>](
      <<f_1030@21:0>@36:0>:int,<<<f_1030@21:0>@36:1>@42:0>:int)
      
      P[<succ_1033@38:0>](<succ_1033@38:0>:int), (<<succ_1033@38:1>@40:0> = (1 + <succ_1033@38:0>))
      |- P[<<succ_1033@38:1>@40:0>](<succ_1033@38:0>:int,<<succ_1033@38:1>@40:0>:int)
      
      P[<<f_1030@21:0>@36:0>](<succ_1033@38:0>:int)|- P[<succ_1033@38:0>](<succ_1033@38:0>:int)
      
      P[<f_1030@21:1>](<<f_1030@21:0>@23:0>:int),
      P[<<f_f_1205@31:1>@34:0>](<<f_1030@21:0>@23:0>:int,<<f_1030@21:0>@36:0>:int)|- P[<<f_1030@21:0>@36:0>](
      <<f_1030@21:0>@36:0>:int)
      
      P[<f_f_1205@31:3>](<f_f_1205@31:0>:int,<f_f_1205@31:3>:int),
      ((<f_f_1205@31:3> < 3) && (<<f_f_1205@31:1>@34:0> = <f_f_1205@31:0>))
      |- P[<<f_f_1205@31:1>@34:0>](<f_f_1205@31:0>:int,<<f_f_1205@31:1>@34:0>:int)
      
      P[<f_1030@21:1>](<f_f_1205@31:0>:int),
      P[<<<f_1030@21:0>@23:1>@29:0>](<f_f_1205@31:0>:int,<f_f_1205@31:3>:int)|- P[<f_f_1205@31:3>](
      <f_f_1205@31:0>:int,<f_f_1205@31:3>:int)
      
      P[<<succ_1033@25:1>@27:0>](<<f_1030@21:0>@23:0>:int,<<<f_1030@21:0>@23:1>@29:0>:int)|- P[<<<f_1030@21:0>@23:1>@29:0>](
      <<f_1030@21:0>@23:0>:int,<<<f_1030@21:0>@23:1>@29:0>:int)
      
      P[<succ_1033@25:0>](<succ_1033@25:0>:int), (<<succ_1033@25:1>@27:0> = (1 + <succ_1033@25:0>))
      |- P[<<succ_1033@25:1>@27:0>](<succ_1033@25:0>:int,<<succ_1033@25:1>@27:0>:int)
      
      P[<<f_1030@21:0>@23:0>](<succ_1033@25:0>:int)|- P[<succ_1033@25:0>](<succ_1033@25:0>:int)
      
      P[<f_1030@21:1>](<<f_1030@21:0>@23:0>:int)|- P[<<f_1030@21:0>@23:0>](<<f_1030@21:0>@23:0>:int)
      
       (<f_1030@21:1> = 0) |- P[<f_1030@21:1>](<f_1030@21:1>:int)
    call trees:
      <main_1204@19>
        <f_1030@21>
        </<f_1030@21:0>@23>
        <succ_1033@25>
        </<succ_1033@25:1>@27>
        <<<f_1030@21:0>@23:1>@29>
          <f_f_1205@31>
          </<f_f_1205@31:1>@34>
        </<f_1030@21:0>@36>
        <succ_1033@38>
        </<succ_1033@38:1>@40>
        <<<f_1030@21:0>@36:1>@42>
          <<<f_f_1205@31:1>@34:1>@44>
            <f_f_1207@46>
              <f_1030@48>
              </<f_1030@48:0>@50>
              <f_1030@52>
              </<f_1030@52:0>@54>
            </<f_f_1207@46:2>@56>
          </<f_f_1205@31:1>@58>
        </<f_1030@21:0>@60>
        <succ_1033@62>
        </<succ_1033@62:1>@64>
        <<<f_1030@21:0>@60:1>@66>
          <<<f_f_1205@31:1>@58:1>@68>
            <<<f_f_1207@46:2>@56:1>@70>
              <<<f_1030@52:0>@54:1>@72>
                <f_f_1205@74>
                  <fail_1209@77>
    inlined horn clauses:
      P[<fail_1209@77:0>](<fail_1209@77:0>:bool)|- bot
      
      P[<f_1030@52:1>](<f_f_1205@74:0>:int),
      P[<<<f_1030@52:0>@54:1>@72:0>](<f_f_1205@74:0>:int,<f_f_1205@74:3>:int),
      ((<f_f_1205@74:3> >= 3) && <fail_1209@77:0>) |- P[<fail_1209@77:0>](
      <fail_1209@77:0>:bool)
      
      P[<<<f_1030@21:0>@36:1>@42:0>](<f_f_1207@46:0>:int,<f_1030@48:1>:int),
      P[<<<f_1030@21:0>@23:1>@29:0>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int),
      P[<f_1030@21:1>](<f_f_1207@46:0>:int),
      P[<<<f_1030@21:0>@60:1>@66:0>](<<f_1030@52:0>@54:0>:int,<<<f_1030@52:0>@54:1>@72:0>:int), (
      <f_f_1207@46:1> < 3) |- P[<<<f_1030@52:0>@54:1>@72:0>](<<f_1030@52:0>@54:0>:int,
                                                             <<<f_1030@52:0>@54:1>@72:0>:int)
      
      P[<<f_1030@21:0>@60:0>](<<f_1030@21:0>@60:0>:int), (<<<f_1030@21:0>@60:1>@66:0> = (1 + <<f_1030@21:0>@60:0>))
      |- P[<<<f_1030@21:0>@60:1>@66:0>](<<f_1030@21:0>@60:0>:int,<<<f_1030@21:0>@60:1>@66:0>:int)
      
      P[<<<f_1030@21:0>@23:1>@29:0>](<<f_1030@21:0>@23:0>:int,var30:int),
      P[<f_1030@21:1>](<<f_1030@21:0>@23:0>:int),
      P[<<<f_1030@21:0>@36:1>@42:0>](<<f_1030@21:0>@23:0>:int,var29:int),
      P[<<f_1030@52:0>@54:0>](<<f_1030@21:0>@60:0>:int), (var30 < 3)
      |- P[<<f_1030@21:0>@60:0>](<<f_1030@21:0>@60:0>:int)
      
      P[<f_1030@52:1>](<<f_1030@52:0>@54:0>:int)|- P[<<f_1030@52:0>@54:0>](<<f_1030@52:0>@54:0>:int)
      
      P[<<<f_1030@21:0>@23:1>@29:0>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int),
      P[<f_1030@21:1>](<f_f_1207@46:0>:int),
      P[<<<f_1030@21:0>@36:1>@42:0>](<f_f_1207@46:0>:int,<f_1030@48:1>:int),
      P[<<f_1030@48:0>@50:0>](<f_1030@52:1>:int), (<f_f_1207@46:1> < 3) |- P[<f_1030@52:1>](
      <f_1030@52:1>:int)
      
      P[<f_1030@48:1>](<<f_1030@48:0>@50:0>:int)|- P[<<f_1030@48:0>@50:0>](<<f_1030@48:0>@50:0>:int)
      
      P[<<<f_1030@21:0>@23:1>@29:0>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int),
      P[<f_1030@21:1>](<f_f_1207@46:0>:int),
      P[<<<f_1030@21:0>@36:1>@42:0>](<f_f_1207@46:0>:int,<f_1030@48:1>:int), (
      <f_f_1207@46:1> < 3) |- P[<f_1030@48:1>](<f_1030@48:1>:int)
      
      P[<<f_1030@21:0>@36:0>](<<f_1030@21:0>@36:0>:int), (<<<f_1030@21:0>@36:1>@42:0> = (1 + <<f_1030@21:0>@36:0>))
      |- P[<<<f_1030@21:0>@36:1>@42:0>](<<f_1030@21:0>@36:0>:int,<<<f_1030@21:0>@36:1>@42:0>:int)
      
      P[<f_1030@21:1>](<<f_1030@21:0>@36:0>:int),
      P[<<<f_1030@21:0>@23:1>@29:0>](<<f_1030@21:0>@36:0>:int,var31:int), (
      var31 < 3) |- P[<<f_1030@21:0>@36:0>](<<f_1030@21:0>@36:0>:int)
      
      P[<<f_1030@21:0>@23:0>](<<f_1030@21:0>@23:0>:int), (<<<f_1030@21:0>@23:1>@29:0> = (1 + <<f_1030@21:0>@23:0>))
      |- P[<<<f_1030@21:0>@23:1>@29:0>](<<f_1030@21:0>@23:0>:int,<<<f_1030@21:0>@23:1>@29:0>:int)
      
      P[<f_1030@21:1>](<<f_1030@21:0>@23:0>:int)|- P[<<f_1030@21:0>@23:0>](<<f_1030@21:0>@23:0>:int)
      
       (<f_1030@21:1> = 0) |- P[<f_1030@21:1>](<f_1030@21:1>:int)
    begin ParamSubstInfer.infer(5042)[3]
      
    end ParamSubstInfer.infer(5042)[3] (0.127980 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(5044)[3]
      
    end RefTypeInfer.elim_coeffs(5044)[3] (0.002000 sec.)
    begin YhornInterface.solve(5455)[3]
      begin HcSolver.solve_ub(5456)[4]
        encoded:
          P[<fail_1209@77:0>](<fail_1209@77:0>:int)|- bot
          
          P[<f_1030@52:1>](<f_f_1205@74:0>:int),
          P[<<<f_1030@52:0>@54:1>@72:0>](<f_f_1205@74:0>:int,<f_f_1205@74:3>:int),
          ((<f_f_1205@74:3> >= 3) && (<fail_1209@77:0> = 1)) |- P[<fail_1209@77:0>](
          <fail_1209@77:0>:int)
          
          P[<<<f_1030@21:0>@36:1>@42:0>](<f_f_1207@46:0>:int,<f_1030@48:1>:int),
          P[<<<f_1030@21:0>@23:1>@29:0>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int),
          P[<f_1030@21:1>](<f_f_1207@46:0>:int),
          P[<<<f_1030@21:0>@60:1>@66:0>](<<f_1030@52:0>@54:0>:int,<<<f_1030@52:0>@54:1>@72:0>:int),
          (<f_f_1207@46:1> < 3)
          |- P[<<<f_1030@52:0>@54:1>@72:0>](<<f_1030@52:0>@54:0>:int,
                                            <<<f_1030@52:0>@54:1>@72:0>:int)
          
          P[<<f_1030@21:0>@60:0>](<<f_1030@21:0>@60:0>:int), (<<<f_1030@21:0>@60:1>@66:0> = (1 + <<f_1030@21:0>@60:0>))
          |- P[<<<f_1030@21:0>@60:1>@66:0>](<<f_1030@21:0>@60:0>:int,
                                            <<<f_1030@21:0>@60:1>@66:0>:int)
          
          P[<<<f_1030@21:0>@23:1>@29:0>](<<f_1030@21:0>@23:0>:int,var30:int),
          P[<f_1030@21:1>](<<f_1030@21:0>@23:0>:int),
          P[<<<f_1030@21:0>@36:1>@42:0>](<<f_1030@21:0>@23:0>:int,var29:int),
          P[<<f_1030@52:0>@54:0>](<<f_1030@21:0>@60:0>:int), (var30 < 3)
          |- P[<<f_1030@21:0>@60:0>](<<f_1030@21:0>@60:0>:int)
          
          P[<f_1030@52:1>](<<f_1030@52:0>@54:0>:int)|- P[<<f_1030@52:0>@54:0>](<<f_1030@52:0>@54:0>:int)
          
          P[<<<f_1030@21:0>@23:1>@29:0>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int),
          P[<f_1030@21:1>](<f_f_1207@46:0>:int),
          P[<<<f_1030@21:0>@36:1>@42:0>](<f_f_1207@46:0>:int,<f_1030@48:1>:int),
          P[<<f_1030@48:0>@50:0>](<f_1030@52:1>:int), (<f_f_1207@46:1> < 3) |- P[<f_1030@52:1>](
          <f_1030@52:1>:int)
          
          P[<f_1030@48:1>](<<f_1030@48:0>@50:0>:int)|- P[<<f_1030@48:0>@50:0>](<<f_1030@48:0>@50:0>:int)
          
          P[<<<f_1030@21:0>@23:1>@29:0>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int),
          P[<f_1030@21:1>](<f_f_1207@46:0>:int),
          P[<<<f_1030@21:0>@36:1>@42:0>](<f_f_1207@46:0>:int,<f_1030@48:1>:int), (
          <f_f_1207@46:1> < 3) |- P[<f_1030@48:1>](<f_1030@48:1>:int)
          
          P[<<f_1030@21:0>@36:0>](<<f_1030@21:0>@36:0>:int), (<<<f_1030@21:0>@36:1>@42:0> = (1 + <<f_1030@21:0>@36:0>))
          |- P[<<<f_1030@21:0>@36:1>@42:0>](<<f_1030@21:0>@36:0>:int,
                                            <<<f_1030@21:0>@36:1>@42:0>:int)
          
          P[<f_1030@21:1>](<<f_1030@21:0>@36:0>:int),
          P[<<<f_1030@21:0>@23:1>@29:0>](<<f_1030@21:0>@36:0>:int,var31:int), (
          var31 < 3) |- P[<<f_1030@21:0>@36:0>](<<f_1030@21:0>@36:0>:int)
          
          P[<<f_1030@21:0>@23:0>](<<f_1030@21:0>@23:0>:int), (<<<f_1030@21:0>@23:1>@29:0> = (1 + <<f_1030@21:0>@23:0>))
          |- P[<<<f_1030@21:0>@23:1>@29:0>](<<f_1030@21:0>@23:0>:int,
                                            <<<f_1030@21:0>@23:1>@29:0>:int)
          
          P[<f_1030@21:1>](<<f_1030@21:0>@23:0>:int)|- P[<<f_1030@21:0>@23:0>](<<f_1030@21:0>@23:0>:int)
          
           (<f_1030@21:1> = 0) |- P[<f_1030@21:1>](<f_1030@21:1>:int)
        input to Yhorn:
          P[<fail_1209@77:0>](<fail_1209@77:0>:int)|- bot
          
          P[<f_1030@52:1>](<f_f_1205@74:0>:int),
          P[<<<f_1030@52:0>@54:1>@72:0>](<f_f_1205@74:0>:int,<f_f_1205@74:3>:int),
          ((<f_f_1205@74:3> >= 3) && (<fail_1209@77:0> = 1)) |- P[<fail_1209@77:0>](
          <fail_1209@77:0>:int)
          
          P[<<<f_1030@21:0>@36:1>@42:0>](<f_f_1207@46:0>:int,<f_1030@48:1>:int),
          P[<<<f_1030@21:0>@23:1>@29:0>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int),
          P[<f_1030@21:1>](<f_f_1207@46:0>:int),
          P[<<<f_1030@21:0>@60:1>@66:0>](<<f_1030@52:0>@54:0>:int,<<<f_1030@52:0>@54:1>@72:0>:int),
          (<f_f_1207@46:1> < 3)
          |- P[<<<f_1030@52:0>@54:1>@72:0>](<<f_1030@52:0>@54:0>:int,
                                            <<<f_1030@52:0>@54:1>@72:0>:int)
          
          P[<<f_1030@21:0>@60:0>](<<f_1030@21:0>@60:0>:int), (<<<f_1030@21:0>@60:1>@66:0> = (1 + <<f_1030@21:0>@60:0>))
          |- P[<<<f_1030@21:0>@60:1>@66:0>](<<f_1030@21:0>@60:0>:int,
                                            <<<f_1030@21:0>@60:1>@66:0>:int)
          
          P[<<<f_1030@21:0>@23:1>@29:0>](<<f_1030@21:0>@23:0>:int,var30:int),
          P[<f_1030@21:1>](<<f_1030@21:0>@23:0>:int),
          P[<<<f_1030@21:0>@36:1>@42:0>](<<f_1030@21:0>@23:0>:int,var29:int),
          P[<<f_1030@52:0>@54:0>](<<f_1030@21:0>@60:0>:int), (var30 < 3)
          |- P[<<f_1030@21:0>@60:0>](<<f_1030@21:0>@60:0>:int)
          
          P[<f_1030@52:1>](<<f_1030@52:0>@54:0>:int)|- P[<<f_1030@52:0>@54:0>](<<f_1030@52:0>@54:0>:int)
          
          P[<<<f_1030@21:0>@23:1>@29:0>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int),
          P[<f_1030@21:1>](<f_f_1207@46:0>:int),
          P[<<<f_1030@21:0>@36:1>@42:0>](<f_f_1207@46:0>:int,<f_1030@48:1>:int),
          P[<<f_1030@48:0>@50:0>](<f_1030@52:1>:int), (<f_f_1207@46:1> < 3) |- P[<f_1030@52:1>](
          <f_1030@52:1>:int)
          
          P[<f_1030@48:1>](<<f_1030@48:0>@50:0>:int)|- P[<<f_1030@48:0>@50:0>](<<f_1030@48:0>@50:0>:int)
          
          P[<<<f_1030@21:0>@23:1>@29:0>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int),
          P[<f_1030@21:1>](<f_f_1207@46:0>:int),
          P[<<<f_1030@21:0>@36:1>@42:0>](<f_f_1207@46:0>:int,<f_1030@48:1>:int), (
          <f_f_1207@46:1> < 3) |- P[<f_1030@48:1>](<f_1030@48:1>:int)
          
          P[<<f_1030@21:0>@36:0>](<<f_1030@21:0>@36:0>:int), (<<<f_1030@21:0>@36:1>@42:0> = (1 + <<f_1030@21:0>@36:0>))
          |- P[<<<f_1030@21:0>@36:1>@42:0>](<<f_1030@21:0>@36:0>:int,
                                            <<<f_1030@21:0>@36:1>@42:0>:int)
          
          P[<f_1030@21:1>](<<f_1030@21:0>@36:0>:int),
          P[<<<f_1030@21:0>@23:1>@29:0>](<<f_1030@21:0>@36:0>:int,var31:int), (
          var31 < 3) |- P[<<f_1030@21:0>@36:0>](<<f_1030@21:0>@36:0>:int)
          
          P[<<f_1030@21:0>@23:0>](<<f_1030@21:0>@23:0>:int), (<<<f_1030@21:0>@23:1>@29:0> = (1 + <<f_1030@21:0>@23:0>))
          |- P[<<<f_1030@21:0>@23:1>@29:0>](<<f_1030@21:0>@23:0>:int,
                                            <<<f_1030@21:0>@23:1>@29:0>:int)
          
          P[<f_1030@21:1>](<<f_1030@21:0>@23:0>:int)|- P[<<f_1030@21:0>@23:0>](<<f_1030@21:0>@23:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1209_sep_77_sep_0($85)) -> 1=0.
(($85-1=0) & ($86-3>=0)) & (v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0($87,$86)) & (v_sep_f_1030_sep_52_sep_1($87)) -> v_sep_fail_1209_sep_77_sep_0($85).
($88-3<0) & (v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0($89,$90)) & (v_sep_f_1030_sep_21_sep_1($91)) & (v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0($91,$88)) & (v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0($91,$92)) -> v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0($89,$90).
($93-$94-1=0) & (v_sep_f_1030_sep_21_sep_0_sep_60_sep_0($94)) -> v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0($94,$93).
($95-3<0) & (v_sep_f_1030_sep_52_sep_0_sep_54_sep_0($94)) & (v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0($96,$97)) & (v_sep_f_1030_sep_21_sep_1($96)) & (v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0($96,$95)) -> v_sep_f_1030_sep_21_sep_0_sep_60_sep_0($94).
(0=0) & (v_sep_f_1030_sep_52_sep_1($89)) -> v_sep_f_1030_sep_52_sep_0_sep_54_sep_0($89).
($88-3<0) & (v_sep_f_1030_sep_48_sep_0_sep_50_sep_0($98)) & (v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0($91,$92)) & (v_sep_f_1030_sep_21_sep_1($91)) & (v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0($91,$88)) -> v_sep_f_1030_sep_52_sep_1($98).
(0=0) & (v_sep_f_1030_sep_48_sep_1($99)) -> v_sep_f_1030_sep_48_sep_0_sep_50_sep_0($99).
($88-3<0) & (v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0($91,$92)) & (v_sep_f_1030_sep_21_sep_1($91)) & (v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0($91,$88)) -> v_sep_f_1030_sep_48_sep_1($92).
($100-$101-1=0) & (v_sep_f_1030_sep_21_sep_0_sep_36_sep_0($101)) -> v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0($101,$100).
($102-3<0) & (v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0($101,$102)) & (v_sep_f_1030_sep_21_sep_1($101)) -> v_sep_f_1030_sep_21_sep_0_sep_36_sep_0($101).
(-$96+$103-1=0) & (v_sep_f_1030_sep_21_sep_0_sep_23_sep_0($96)) -> v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0($96,$103).
(0=0) & (v_sep_f_1030_sep_21_sep_1($96)) -> v_sep_f_1030_sep_21_sep_0_sep_23_sep_0($96).
$104=0 -> v_sep_f_1030_sep_21_sep_1($104).


v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: X
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_fail_1209_sep_77_sep_0: X
...........................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: X
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_fail_1209_sep_77_sep_0: X
....
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: X
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_fail_1209_sep_77_sep_0: X
............
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: X
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_fail_1209_sep_77_sep_0: X
................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: X
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_fail_1209_sep_77_sep_0: X
..........................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: X
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_fail_1209_sep_77_sep_0: X
...........................Split conj [42] 0.316951
(Reconstrcut: 13 **)
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: X
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
......................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: X
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
....
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: X
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
............
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: X
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: X
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
..........................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: X
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
...........................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: X
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
...............................Split conj [44] 0.394939
(Reconstrcut: 29 *******)
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
...............................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
....
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
............
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
..........................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
...........................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
...............................Split conj [56] 0.456929
(Reconstrcut: 25 ******)
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
...................................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
....
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
............
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
.................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
...........................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
...............................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
...................................Split conj [66] 0.524919
(Reconstrcut: 21 *****)
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
...............................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
....
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
............
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
..................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
............................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
..................................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
......................................
v_sep_f_1030_sep_21_sep_0_sep_23_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_36_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0: (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_21_sep_0_sep_60_sep_0: X
v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0: X
v_sep_f_1030_sep_21_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_f_1030_sep_48_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_48_sep_1: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0: X
v_sep_f_1030_sep_52_sep_1: (X) & (X)
v_sep_fail_1209_sep_77_sep_0: X
........................................(0=0) & (v_sep_fail_1209_sep_77_sep_0($85)) -> 1=0.
(($85-1=0) & ($86-3>=0)) & (v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0($87,$86)) & (v_sep_f_1030_sep_52_sep_1($87)) -> v_sep_fail_1209_sep_77_sep_0($85).
($88-3<0) & (v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0($89,$90)) & (v_sep_f_1030_sep_21_sep_1($91)) & (v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0($91,$88)) & (v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0($91,$92)) -> v_sep_f_1030_sep_52_sep_0_sep_54_sep_1_sep_72_sep_0($89,$90).
($93-$94-1=0) & (v_sep_f_1030_sep_21_sep_0_sep_60_sep_0($94)) -> v_sep_f_1030_sep_21_sep_0_sep_60_sep_1_sep_66_sep_0($94,$93).
($95-3<0) & (v_sep_f_1030_sep_52_sep_0_sep_54_sep_0($94)) & (v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0($96,$97)) & (v_sep_f_1030_sep_21_sep_1($96)) & (v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0($96,$95)) -> v_sep_f_1030_sep_21_sep_0_sep_60_sep_0($94).
(0=0) & (v_sep_f_1030_sep_52_sep_1($89)) -> v_sep_f_1030_sep_52_sep_0_sep_54_sep_0($89).
($88-3<0) & (v_sep_f_1030_sep_48_sep_0_sep_50_sep_0($98)) & (v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0($91,$92)) & (v_sep_f_1030_sep_21_sep_1($91)) & (v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0($91,$88)) -> v_sep_f_1030_sep_52_sep_1($98).
(0=0) & (v_sep_f_1030_sep_48_sep_1($99)) -> v_sep_f_1030_sep_48_sep_0_sep_50_sep_0($99).
($88-3<0) & (v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0($91,$92)) & (v_sep_f_1030_sep_21_sep_1($91)) & (v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0($91,$88)) -> v_sep_f_1030_sep_48_sep_1($92).
($100-$101-1=0) & (v_sep_f_1030_sep_21_sep_0_sep_36_sep_0($101)) -> v_sep_f_1030_sep_21_sep_0_sep_36_sep_1_sep_42_sep_0($101,$100).
($102-3<0) & (v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0($101,$102)) & (v_sep_f_1030_sep_21_sep_1($101)) -> v_sep_f_1030_sep_21_sep_0_sep_36_sep_0($101).
(-$96+$103-1=0) & (v_sep_f_1030_sep_21_sep_0_sep_23_sep_0($96)) -> v_sep_f_1030_sep_21_sep_0_sep_23_sep_1_sep_29_sep_0($96,$103).
(0=0) & (v_sep_f_1030_sep_21_sep_1($96)) -> v_sep_f_1030_sep_21_sep_0_sep_23_sep_0($96).
$104=0 -> v_sep_f_1030_sep_21_sep_1($104).

           (<f_1030@21:1> = 0) |- P[<f_1030@21:1>](<f_1030@21:1>:int)
        solution:
          P[<<f_1030@21:0>@23:0>]($149:int) = true
          P[<<<f_1030@21:0>@23:1>@29:0>]($124:int,$126:int) = true
          P[<<f_1030@21:0>@36:0>]($146:int) = true
          P[<<<f_1030@21:0>@36:1>@42:0>]($129:int,$131:int) = ($131 <= (1 + $129))
          P[<<f_1030@21:0>@60:0>]($134:int) = ($134 <= 1)
          P[<<<f_1030@21:0>@60:1>@66:0>]($116:int,$118:int) = ((2 * $118) <= (3 + $116))
          P[<f_1030@21:1>]($121:int) = ($121 <= 0)
          P[<<f_1030@48:0>@50:0>]($140:int) = ($140 <= 1)
          P[<f_1030@48:1>]($143:int) = ($143 <= 1)
          P[<<f_1030@52:0>@54:0>]($137:int) = ($137 <= 1)
          P[<<<f_1030@52:0>@54:1>@72:0>]($108:int,$110:int) = ((2 * $110) <= (3 + $108))
          P[<f_1030@52:1>]($113:int) = ($113 <= 1)
          P[<fail_1209@77:0>]($105:bool) = false
        
      end HcSolver.solve_ub(5456)[4] (0.358945 sec.)
      begin HcSolver.check_validity(5805)[4]
        input:
          P[<fail_1209@77:0>](<fail_1209@77:0>:bool)|- bot
          
          P[<f_1030@52:1>](<f_f_1205@74:0>:int),
          P[<<<f_1030@52:0>@54:1>@72:0>](<f_f_1205@74:0>:int,<f_f_1205@74:3>:int),
          ((<f_f_1205@74:3> >= 3) && <fail_1209@77:0>) |- P[<fail_1209@77:0>](
          <fail_1209@77:0>:bool)
          
          P[<<<f_1030@21:0>@36:1>@42:0>](<f_f_1207@46:0>:int,<f_1030@48:1>:int),
          P[<<<f_1030@21:0>@23:1>@29:0>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int),
          P[<f_1030@21:1>](<f_f_1207@46:0>:int),
          P[<<<f_1030@21:0>@60:1>@66:0>](<<f_1030@52:0>@54:0>:int,<<<f_1030@52:0>@54:1>@72:0>:int),
          (<f_f_1207@46:1> < 3)
          |- P[<<<f_1030@52:0>@54:1>@72:0>](<<f_1030@52:0>@54:0>:int,
                                            <<<f_1030@52:0>@54:1>@72:0>:int)
          
          P[<<f_1030@21:0>@60:0>](<<f_1030@21:0>@60:0>:int), (<<<f_1030@21:0>@60:1>@66:0> = (1 + <<f_1030@21:0>@60:0>))
          |- P[<<<f_1030@21:0>@60:1>@66:0>](<<f_1030@21:0>@60:0>:int,
                                            <<<f_1030@21:0>@60:1>@66:0>:int)
          
          P[<<<f_1030@21:0>@23:1>@29:0>](<<f_1030@21:0>@23:0>:int,var30:int),
          P[<f_1030@21:1>](<<f_1030@21:0>@23:0>:int),
          P[<<<f_1030@21:0>@36:1>@42:0>](<<f_1030@21:0>@23:0>:int,var29:int),
          P[<<f_1030@52:0>@54:0>](<<f_1030@21:0>@60:0>:int), (var30 < 3)
          |- P[<<f_1030@21:0>@60:0>](<<f_1030@21:0>@60:0>:int)
          
          P[<f_1030@52:1>](<<f_1030@52:0>@54:0>:int)|- P[<<f_1030@52:0>@54:0>](<<f_1030@52:0>@54:0>:int)
          
          P[<<<f_1030@21:0>@23:1>@29:0>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int),
          P[<f_1030@21:1>](<f_f_1207@46:0>:int),
          P[<<<f_1030@21:0>@36:1>@42:0>](<f_f_1207@46:0>:int,<f_1030@48:1>:int),
          P[<<f_1030@48:0>@50:0>](<f_1030@52:1>:int), (<f_f_1207@46:1> < 3) |- P[<f_1030@52:1>](
          <f_1030@52:1>:int)
          
          P[<f_1030@48:1>](<<f_1030@48:0>@50:0>:int)|- P[<<f_1030@48:0>@50:0>](<<f_1030@48:0>@50:0>:int)
          
          P[<<<f_1030@21:0>@23:1>@29:0>](<f_f_1207@46:0>:int,<f_f_1207@46:1>:int),
          P[<f_1030@21:1>](<f_f_1207@46:0>:int),
          P[<<<f_1030@21:0>@36:1>@42:0>](<f_f_1207@46:0>:int,<f_1030@48:1>:int), (
          <f_f_1207@46:1> < 3) |- P[<f_1030@48:1>](<f_1030@48:1>:int)
          
          P[<<f_1030@21:0>@36:0>](<<f_1030@21:0>@36:0>:int), (<<<f_1030@21:0>@36:1>@42:0> = (1 + <<f_1030@21:0>@36:0>))
          |- P[<<<f_1030@21:0>@36:1>@42:0>](<<f_1030@21:0>@36:0>:int,
                                            <<<f_1030@21:0>@36:1>@42:0>:int)
          
          P[<f_1030@21:1>](<<f_1030@21:0>@36:0>:int),
          P[<<<f_1030@21:0>@23:1>@29:0>](<<f_1030@21:0>@36:0>:int,var31:int), (
          var31 < 3) |- P[<<f_1030@21:0>@36:0>](<<f_1030@21:0>@36:0>:int)
          
          P[<<f_1030@21:0>@23:0>](<<f_1030@21:0>@23:0>:int), (<<<f_1030@21:0>@23:1>@29:0> = (1 + <<f_1030@21:0>@23:0>))
          |- P[<<<f_1030@21:0>@23:1>@29:0>](<<f_1030@21:0>@23:0>:int,
                                            <<<f_1030@21:0>@23:1>@29:0>:int)
          
          P[<f_1030@21:1>](<<f_1030@21:0>@23:0>:int)|- P[<<f_1030@21:0>@23:0>](<<f_1030@21:0>@23:0>:int)
          
           (<f_1030@21:1> = 0) |- P[<f_1030@21:1>](<f_1030@21:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(5805)[4] (0.013998 sec.)
      solution:
        P[<<f_1030@21:0>@23:0>]($149:int) = true
        P[<<<f_1030@21:0>@23:1>@29:0>]($124:int,$126:int) = true
        P[<<f_1030@21:0>@36:0>]($146:int) = true
        P[<<<f_1030@21:0>@36:1>@42:0>]($129:int,$131:int) = ($131 <= (1 + $129))
        P[<<f_1030@21:0>@60:0>]($134:int) = ($134 <= 1)
        P[<<<f_1030@21:0>@60:1>@66:0>]($116:int,$118:int) = ((2 * $118) <= (3 + $116))
        P[<f_1030@21:1>]($121:int) = ($121 <= 0)
        P[<<f_1030@48:0>@50:0>]($140:int) = ($140 <= 1)
        P[<f_1030@48:1>]($143:int) = ($143 <= 1)
        P[<<f_1030@52:0>@54:0>]($137:int) = ($137 <= 1)
        P[<<<f_1030@52:0>@54:1>@72:0>]($108:int,$110:int) = ((2 * $110) <= (3 + $108))
        P[<f_1030@52:1>]($113:int) = ($113 <= 1)
        P[<fail_1209@77:0>]($105:bool) = false
    end YhornInterface.solve(5455)[3] (0.372943 sec.)
    
  end RefTypeInfer.infer_etrs(2231)[2] (0.523920 sec.)
  refinement types:
    main_1204: X
    f_1030: (v1:int -> (v2:int -> X) -> X /\
             v5:int -> (v6:{v6:int | (v6 <= (1 + v5))} -> X) -> X /\
             v9:{v9:int | (v9 <= 1)} -> (v10:{v10:int | ((2 * v10) <= (3 + v9))} -> X) -> X) ->
            v13:{v13:int | (v13 <= 0)} -> (v14:int -> X) -> X
    succ_1033: v1:int -> (v2:int -> X) -> X
    f_f_1205: v1:int ->
              (v2:int -> (v3:int -> X) -> X /\
               v6:int -> (v7:int -> X) -> X) -> (v10:int -> X) -> v12:int -> X
    succ_1033: v1:int -> (v2:int -> X) -> X
    f_f_1207: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> v9:int -> X
    f_1030: (v1:{v1:int | (v1 <= 1)} -> (v2:int -> X) -> X) -> v5:{v5:int | (v5 <= 1)} -> (v6:int -> X) -> X
    f_1030: (v1:{v1:int | (v1 <= 1)} -> (v2:{v2:int | ((2 * v2) <= (3 + v1))} -> X) -> X) ->
            v5:{v5:int | (v5 <= 1)} -> (v6:int -> X) -> X
    succ_1033: v1:int -> (v2:int -> X) -> X
    f_f_1205: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    fail_1209: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1208: var53:int -> X
    f_f_1206: var57:int -> var56:int -> var55:unit -> X
  abstraction types:
    main_1204: X
    f_1030: (var78:int[var78 -> (var78 <= 1)] ->
             (var79:int[var79 -> (var79 <= (1 + var78)),
                        var79 -> ((2 * var79) <= (3 + var78))] -> X) -> X) ->
            var82:int[var82 -> (var82 <= 0),
                      var82 -> (var82 <= 1)] -> (var83:int -> X) -> X
    succ_1033: var90:int -> (var91:int -> X) -> X
    f_f_1205: var94:int -> (var95:int -> (var96:int -> X) -> X) -> (var99:int -> X) -> var101:int -> X
    f_f_1207: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> v9:int -> X
    fail_1209: v1:bool -> (v2:unit -> X) -> X
    f_1208: var53:int -> X
    f_f_1206: var57:int -> var56:int -> var55:unit -> X
  
end AbsTypeInfer.refine(2230)[1] (0.525920 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1204
  main_1204 -> (f_1030 succ_1033 0 f_1208)
  f_1030 g_1031 x_1032 k_f_1104 -> (g_1031 x_1032 (f_f_1205 x_1032 g_1031 k_f_1104))
  f_1208 x_1185 -> end
  f_f_1205 x_1032 g_1031 k_f_1104 x_1107 when (x_1107 >= 3) -> (fail_1209 true (f_f_1206 x_1032 x_1107))
  f_f_1205 x_1032 g_1031 k_f_1104 x_1107 when (not (x_1107 >= 3)) ->
      (g_1031 x_1032 (f_f_1207 x_1032 x_1107 g_1031 k_f_1104))
  f_f_1206 x_1032 x_1107 x_1121 -> _|_
  f_f_1207 x_1032 x_1107 g_1031 k_f_1104 x_1164 -> (f_1030 (f_1030 g_1031) x_1164 k_f_1104)
  fail_1209 b k -> {fail} => (k ())
  succ_1033 x_1034 k_succ_1182 -> (k_succ_1182 (x_1034 + 1))
Types:
  main_1204 : X
  f_1030 : ((x_2:int[x_2 <= 1; x_2 <= 0] -> (x_4:int[x_2 >= 2*x_4 - 3; x_2 >= x_4 - 1; x_2 >= 2*x_4 - 2] -> X) -> X) ->
            x_7:int[x_7 <= 1; x_7 <= 0] -> (int -> X) -> X)
  fail_1209 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ..DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1204 ... --> 
  f_1030 ... --> 
  succ_1033 ... --> 
  f_f_1205 [2/2] ... --> 
  succ_1033 ... --> 
  f_f_1207 ... --> 
  f_1030 ... --> 
  f_1030 ... --> 
  succ_1033 ... --> 
  f_f_1205 [2/2] ... --> 
  succ_1033 ... --> 
  f_f_1207 ... --> 
  f_1030 ... --> 
  f_1030 ... --> 
  succ_1033 ... --> 
  f_f_1205 [1/2] ... --> 
  fail_1209 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0

(2-3) Checking counter-example ... begin Cvc3Interface.solve(13053)[1]
  CVC3 input: PUSH;;CHECKSAT (TRUE AND (((((0 + 1) + 1) + 1) >= 3) AND (TRUE AND (TRUE AND (TRUE AND (TRUE AND (TRUE AND ((NOT (((0 + 1) + 1) >= 3)) AND (TRUE AND (TRUE AND (TRUE AND (TRUE AND (TRUE AND ((NOT ((0 + 1) >= 3)) AND (TRUE AND (TRUE AND TRUE))))))))))))))));COUNTERMODEL;POP;
  CVC3 output: CVC> Satisfiable.
  CVC3 output: Current scope level is 9.
  CVC3 output:  Did not find concrete model for any vars
  CVC3 output: CVC> 
  end Cvc3Interface.solve(13053)[1] (0.004999 sec.)
DONE!

Unsafe!

Error trace:
  f <fun> 0 ->
    succ 0 ->
    if false then ... ->
    succ 0 ->
    f <fun> 1 ->
      f <fun> 1 ->
        succ 1 ->
        if false then ... ->
        succ 1 ->
        f <fun> 2 ->
          f <fun> 2 ->
            succ 2 ->
            if true then ... ->
            FAIL!

cycles: 2
total: 3.202 sec
  abst: 0.172 sec
  mc: 0.168 sec
  refine: 0.577 sec
    exparam: 0.120 sec
c
