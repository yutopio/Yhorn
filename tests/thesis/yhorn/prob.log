MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn prob.ml

parsed::
 let rec f_1030 x_1031 y_1032 =
   if x_1031 < 100 then
     if x_1031 < 50 then
       f_1030 (x_1031 + 1) y_1032
     else
       f_1030 (x_1031 + 1) (y_1032 + 1)
   else
     y_1032 
 in
 let main_1033 = if f_1030 0 50 <> 100 then
                   ()
                 else
                   {fail} () 
 in
   ()

set_target::
 let rec f_1030 x_1031 y_1032 =
   if x_1031 < 100 then
     if x_1031 < 50 then
       f_1030 (x_1031 + 1) y_1032
     else
       f_1030 (x_1031 + 1) (y_1032 + 1)
   else
     y_1032 
 in
 let main_1033 = if f_1030 0 50 <> 100 then
                   ()
                 else
                   {fail} () 
 in
   main_1033

CPS::
 let rec f_1030 (x_1031:int) (y_1032:int) (k_f_1085:(int -> X)) =
   if x_1031 < 100 then
     if x_1031 < 50 then
       f_1030 (x_1031 + 1) y_1032 k_f_1085
     else
       f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085
   else
     k_f_1085 y_1032 
 in
 let k_main_1146 (x_1118:unit) = end 
 in
   f_1030 0 50 (fun x_1124 -> (if x_1124 <> 100 then
                                 k_main_1146 ()
                               else
                                 {|fail|} () k_main_1146))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (int -> int -> (int -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1149 ... --> 
  f_1030 [2/2] ... --> 
  f_1150 [2/2] ... --> 
  fail_1153 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(92)[1]
  program:
    main_1149  | true = (f_1030 0
                                50
                                f_1150)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | b_1152 = (f_1030 (x_1031 + 1)
                                                               y_1032
                                                               k_f_1085)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | (not b_1152) = (f_1030 (
                                                                    x_1031 + 1)
                                                                    (y_1032 + 1)
                                                                    k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (x_1031 < 100) = (br_f_1151 (x_1031 < 50)
                                                                x_1031
                                                                y_1032
                                                                k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (not (x_1031 < 100)) = (k_f_1085 y_1032)
    f_1150 x_1124 | (not (x_1124 = 100)) = (k_main_1146 ())
    f_1150 x_1124 | (not (not (x_1124 = 100))) = (fail_1153 true
                                                            k_main_1146)
    fail_1153 b k | true = (fail ())
    k_main_1146 x_1118 | true = end
    main_1149:X
    br_f_1151:bool -> int -> int -> (int -> X) -> X
    f_1030:int -> int -> (int -> X) -> X
    f_1150:int -> X
    fail_1153:bool -> (unit -> X) -> X
    k_main_1146:unit -> X
  inlined functions: br_f_1151,f_1150,k_main_1146
  counterexample: 0:1:1:0
  error traces:
    [true.((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
     [(not (<f_1030@3:0> < 100)).(<<f_1030@3:2>@6:0> = <f_1030@3:1>)
      [true.(<f_1150@8:0> = <<f_1030@3:2>@6:0>)[(not (not (<f_1150@8:0> = 100))).(<fail_1153@11:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(93)[2]
    horn clauses:
      P[<fail_1153@11:0>](<fail_1153@11:0>:bool)|- bot
      
      P[<f_1150@8:0>](100:int), <fail_1153@11:0> |- P[<fail_1153@11:0>](<fail_1153@11:0>:bool)
      
      P[<<f_1030@3:2>@6:0>](0:int,50:int,<f_1150@8:0>:int)|- P[<f_1150@8:0>](<f_1150@8:0>:int)
      
      P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
      ((<f_1030@3:0> >= 100) && (<<f_1030@3:2>@6:0> = <f_1030@3:1>))
      |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int)
      
       ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
    call trees:
      <main_1149@1>
        <f_1030@3>
        </<f_1030@3:2>@6>
        <f_1150@8>
          <fail_1153@11>
    inlined horn clauses:
      P[<fail_1153@11:0>](<fail_1153@11:0>:bool)|- bot
      
      P[<<f_1030@3:2>@6:0>](0:int,50:int,100:int), <fail_1153@11:0> |- P[<fail_1153@11:0>](<fail_1153@11:0>:bool)
      
      P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
      ((<f_1030@3:0> >= 100) && (<<f_1030@3:2>@6:0> = <f_1030@3:1>))
      |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int)
      
       ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
    begin ParamSubstInfer.infer(917)[3]
      
    end ParamSubstInfer.infer(917)[3] (0.010998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(919)[3]
      
    end RefTypeInfer.elim_coeffs(919)[3] (0.000000 sec.)
    begin YhornInterface.solve(1094)[3]
      begin HcSolver.solve_ub(1095)[4]
        encoded:
          P[<fail_1153@11:0>](<fail_1153@11:0>:int)|- bot
          
          P[<<f_1030@3:2>@6:0>](0:int,50:int,100:int), (<fail_1153@11:0> = 1)
          |- P[<fail_1153@11:0>](<fail_1153@11:0>:int)
          
          P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
          ((<f_1030@3:0> >= 100) && (<<f_1030@3:2>@6:0> = <f_1030@3:1>))
          |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,
                                   <<f_1030@3:2>@6:0>:int)
          
           ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
        input to Yhorn:
          P[<fail_1153@11:0>](<fail_1153@11:0>:int)|- bot
          
          P[<<f_1030@3:2>@6:0>](var2:int,var3:int,var4:int),
          ((var4 = 100) && ((var3 = 50) && ((var2 = 0) && (<fail_1153@11:0> = 1))))
          |- P[<fail_1153@11:0>](<fail_1153@11:0>:int)
          
          P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
          ((<<f_1030@3:2>@6:0> = <f_1030@3:1>) && (<f_1030@3:0> >= 100))
          |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,
                                   <<f_1030@3:2>@6:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1153_sep_11_sep_0($8)) -> 1=0.
(($8-1=0) & ($9=0) & ($10-50=0) & ($11-100=0)) & (v_sep_f_1030_sep_3_sep_2_sep_6_sep_0($9,$10,$11)) -> v_sep_fail_1153_sep_11_sep_0($8).
(($12-100>=0) & ($13-$14=0)) & (v_sep_f_1030_sep_3_sep_1($12,$14)) -> v_sep_f_1030_sep_3_sep_2_sep_6_sep_0($12,$14,$13).
($12=0) & ($14-50=0) -> v_sep_f_1030_sep_3_sep_1($12,$14).


v_sep_f_1030_sep_3_sep_1: X
v_sep_f_1030_sep_3_sep_2_sep_6_sep_0: X
v_sep_fail_1153_sep_11_sep_0: X
....
v_sep_f_1030_sep_3_sep_1: X
v_sep_f_1030_sep_3_sep_2_sep_6_sep_0: X
v_sep_fail_1153_sep_11_sep_0: X
...
v_sep_f_1030_sep_3_sep_1: X
v_sep_f_1030_sep_3_sep_2_sep_6_sep_0: X
v_sep_fail_1153_sep_11_sep_0: X
....
v_sep_f_1030_sep_3_sep_1: X
v_sep_f_1030_sep_3_sep_2_sep_6_sep_0: X
v_sep_fail_1153_sep_11_sep_0: X
....(0=0) & (v_sep_fail_1153_sep_11_sep_0($8)) -> 1=0.
(($8-1=0) & ($9=0) & ($10-50=0) & ($11-100=0)) & (v_sep_f_1030_sep_3_sep_2_sep_6_sep_0($9,$10,$11)) -> v_sep_fail_1153_sep_11_sep_0($8).
(($12-100>=0) & ($13-$14=0)) & (v_sep_f_1030_sep_3_sep_1($12,$14)) -> v_sep_f_1030_sep_3_sep_2_sep_6_sep_0($12,$14,$13).
($12=0) & ($14-50=0) -> v_sep_f_1030_sep_3_sep_1($12,$14).

           ((<f_1030@3:1> = 50) && (<f_1030@3:0> = 0)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
        solution:
          P[<f_1030@3:1>]($25:int,$27:int) = ($27 <= 50)
          P[<<f_1030@3:2>@6:0>]($18:int,$20:int,$22:int) = ($22 <= 50)
          P[<fail_1153@11:0>]($15:bool) = false
        
      end HcSolver.solve_ub(1095)[4] (0.021997 sec.)
      begin HcSolver.check_validity(1274)[4]
        input:
          P[<fail_1153@11:0>](<fail_1153@11:0>:bool)|- bot
          
          P[<<f_1030@3:2>@6:0>](0:int,50:int,100:int), <fail_1153@11:0> |- P[<fail_1153@11:0>](<fail_1153@11:0>:bool)
          
          P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
          ((<f_1030@3:0> >= 100) && (<<f_1030@3:2>@6:0> = <f_1030@3:1>))
          |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,
                                   <<f_1030@3:2>@6:0>:int)
          
           ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1274)[4] (0.001000 sec.)
      solution:
        P[<f_1030@3:1>]($25:int,$27:int) = ($27 <= 50)
        P[<<f_1030@3:2>@6:0>]($18:int,$20:int,$22:int) = ($22 <= 50)
        P[<fail_1153@11:0>]($15:bool) = false
    end YhornInterface.solve(1094)[3] (0.023996 sec.)
    
  end RefTypeInfer.infer_etrs(93)[2] (0.040993 sec.)
  refinement types:
    main_1149: X
    f_1030: v1:int -> v2:{v2:int | (v2 <= 50)} -> (v3:{v3:int | (v3 <= 50)} -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_f_1151: var12:bool -> var11:int -> var10:int -> (var9:int -> X) -> X
    k_main_1146: var14:unit -> X
  abstraction types:
    main_1149: X
    f_1030: v1:int -> v2:int[v2 -> (v2 <= 50)] -> (v3:int[v3 -> (v3 <= 50)] -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:bool -> (v2:unit -> X) -> X
    br_f_1151: var12:bool -> var11:int -> var10:int -> (var9:int -> X) -> X
    k_main_1146: var14:unit -> X
  
end AbsTypeInfer.refine(92)[1] (0.042993 sec.)
DONE!

Prefix of spurious counter-example::
0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (int -> x_2:int[x_2 <= 50] -> (x_4:int[x_4 <= 50] -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1149 ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [2/2] ... --> 
  f_1030 [2/2] ... --> 
  f_1150 [2/2] ... --> 
  fail_1153 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 1; 1; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(1972)[1]
  program:
    main_1149  | true = (f_1030 0
                                50
                                f_1150)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | b_1152 = (f_1030 (x_1031 + 1)
                                                               y_1032
                                                               k_f_1085)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | (not b_1152) = (f_1030 (
                                                                    x_1031 + 1)
                                                                    (y_1032 + 1)
                                                                    k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (x_1031 < 100) = (br_f_1151 (x_1031 < 50)
                                                                x_1031
                                                                y_1032
                                                                k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (not (x_1031 < 100)) = (k_f_1085 y_1032)
    f_1150 x_1124 | (not (x_1124 = 100)) = (k_main_1146 ())
    f_1150 x_1124 | (not (not (x_1124 = 100))) = (fail_1153 true
                                                            k_main_1146)
    fail_1153 b k | true = (fail ())
    k_main_1146 x_1118 | true = end
    main_1149:X
    br_f_1151:bool -> int -> int -> (int -> X) -> X
    f_1030:int -> int -> (int -> X) -> X
    f_1150:int -> X
    fail_1153:bool -> (unit -> X) -> X
    k_main_1146:unit -> X
  inlined functions: br_f_1151,f_1150,k_main_1146
  counterexample: 0:0:1:1:1:0
  error traces:
    [true.((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
     [(<f_1030@16:0> < 100).
      ((<br_f_1151@19:0> = (<f_1030@16:0> < 50)) &&
       ((<br_f_1151@19:1> = <f_1030@16:0>) && (<br_f_1151@19:2> = <f_1030@16:1>)))
      [(not <br_f_1151@19:0>).((<f_1030@22:0> = (<br_f_1151@19:1> + 1)) && (<f_1030@22:1> = (<br_f_1151@19:2> + 1)))
       [(not (<f_1030@22:0> < 100)).(<<f_1030@22:2>@25:0> = <f_1030@22:1>)
        [true.(<<br_f_1151@19:3>@27:0> = <<f_1030@22:2>@25:0>)
         [true.(<<f_1030@16:2>@29:0> = <<br_f_1151@19:3>@27:0>)
          [true.(<f_1150@31:0> = <<f_1030@16:2>@29:0>)
           [(not (not (<f_1150@31:0> = 100))).(<fail_1153@34:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(1973)[2]
    horn clauses:
      P[<fail_1153@34:0>](<fail_1153@34:0>:bool)|- bot
      
      P[<f_1150@31:0>](100:int), <fail_1153@34:0> |- P[<fail_1153@34:0>](<fail_1153@34:0>:bool)
      
      P[<<f_1030@16:2>@29:0>](0:int,50:int,<f_1150@31:0>:int)|- P[<f_1150@31:0>](<f_1150@31:0>:int)
      
      P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int),
      P[<<br_f_1151@19:3>@27:0>]((<f_1030@16:0> < 50):bool,<f_1030@16:0>:int,<f_1030@16:1>:int,<<f_1030@16:2>@29:0>:int),
      (<f_1030@16:0> < 100) |- P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,
                                                       <f_1030@16:1>:int,
                                                       <<f_1030@16:2>@29:0>:int)
      
      P[<br_f_1151@19:2>](<br_f_1151@19:0>:bool,<br_f_1151@19:1>:int,<br_f_1151@19:2>:int),
      P[<<f_1030@22:2>@25:0>]((1 + <br_f_1151@19:1>):int,(1 + <br_f_1151@19:2>):int,<<br_f_1151@19:3>@27:0>:int),
      (not <br_f_1151@19:0>)
      |- P[<<br_f_1151@19:3>@27:0>](<br_f_1151@19:0>:bool,<br_f_1151@19:1>:int,
                                    <br_f_1151@19:2>:int,<<br_f_1151@19:3>@27:0>:int)
      
      P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int),
      ((<f_1030@22:0> >= 100) && (<<f_1030@22:2>@25:0> = <f_1030@22:1>))
      |- P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,
                                 <<f_1030@22:2>@25:0>:int)
      
      P[<br_f_1151@19:2>](false:bool,(-1 + <f_1030@22:0>):int,(-1 + <f_1030@22:1>):int)|- P[<f_1030@22:1>](
      <f_1030@22:0>:int,<f_1030@22:1>:int)
      
      P[<f_1030@16:1>](<br_f_1151@19:1>:int,<br_f_1151@19:2>:int),
      ((<br_f_1151@19:1> < 100) && (<br_f_1151@19:0> = (<br_f_1151@19:1> < 50)))
      |- P[<br_f_1151@19:2>](<br_f_1151@19:0>:bool,<br_f_1151@19:1>:int,
                             <br_f_1151@19:2>:int)
      
       ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
    call trees:
      <main_1149@14>
        <f_1030@16>
          <br_f_1151@19>
            <f_1030@22>
            </<f_1030@22:2>@25>
          </<br_f_1151@19:3>@27>
        </<f_1030@16:2>@29>
        <f_1150@31>
          <fail_1153@34>
    inlined horn clauses:
      P[<fail_1153@34:0>](<fail_1153@34:0>:bool)|- bot
      
      P[<<f_1030@16:2>@29:0>](0:int,50:int,100:int), <fail_1153@34:0> |- P[<fail_1153@34:0>](<fail_1153@34:0>:bool)
      
      P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int),
      P[<<f_1030@22:2>@25:0>]((1 + <f_1030@16:0>):int,(1 + <f_1030@16:1>):int,<<f_1030@16:2>@29:0>:int),
      ((<f_1030@16:0> < 100) && (<f_1030@16:0> >= 50))
      |- P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,<f_1030@16:1>:int,
                                 <<f_1030@16:2>@29:0>:int)
      
      P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int),
      ((<f_1030@22:0> >= 100) && (<<f_1030@22:2>@25:0> = <f_1030@22:1>))
      |- P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,
                                 <<f_1030@22:2>@25:0>:int)
      
      P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,(-1 + <f_1030@22:1>):int),
      ((<f_1030@22:0> < 101) && (<f_1030@22:0> >= 51)) |- P[<f_1030@22:1>](
      <f_1030@22:0>:int,<f_1030@22:1>:int)
      
       ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
    begin ParamSubstInfer.infer(4015)[3]
      
    end ParamSubstInfer.infer(4015)[3] (0.053992 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(4017)[3]
      
    end RefTypeInfer.elim_coeffs(4017)[3] (0.001000 sec.)
    begin YhornInterface.solve(4358)[3]
      begin HcSolver.solve_ub(4359)[4]
        encoded:
          P[<fail_1153@34:0>](<fail_1153@34:0>:int)|- bot
          
          P[<<f_1030@16:2>@29:0>](0:int,50:int,100:int), (<fail_1153@34:0> = 1)
          |- P[<fail_1153@34:0>](<fail_1153@34:0>:int)
          
          P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int),
          P[<<f_1030@22:2>@25:0>]((1 + <f_1030@16:0>):int,(1 + <f_1030@16:1>):int,<<f_1030@16:2>@29:0>:int),
          ((<f_1030@16:0> < 100) && (<f_1030@16:0> >= 50))
          |- P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,<f_1030@16:1>:int,
                                     <<f_1030@16:2>@29:0>:int)
          
          P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int),
          ((<f_1030@22:0> >= 100) && (<<f_1030@22:2>@25:0> = <f_1030@22:1>))
          |- P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,
                                     <<f_1030@22:2>@25:0>:int)
          
          P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,(-1 + <f_1030@22:1>):int),
          ((<f_1030@22:0> < 101) && (<f_1030@22:0> >= 51)) |- P[<f_1030@22:1>](
          <f_1030@22:0>:int,<f_1030@22:1>:int)
          
           ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
        input to Yhorn:
          P[<fail_1153@34:0>](<fail_1153@34:0>:int)|- bot
          
          P[<<f_1030@16:2>@29:0>](var15:int,var16:int,var17:int),
          ((var17 = 100) && ((var16 = 50) && ((var15 = 0) && (<fail_1153@34:0> = 1))))
          |- P[<fail_1153@34:0>](<fail_1153@34:0>:int)
          
          P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int),
          P[<<f_1030@22:2>@25:0>](var18:int,var19:int,<<f_1030@16:2>@29:0>:int),
          ((var19 = (1 + <f_1030@16:1>)) &&
           ((var18 = (1 + <f_1030@16:0>)) && ((<f_1030@16:0> >= 50) && (<f_1030@16:0> < 100))))
          |- P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,<f_1030@16:1>:int,
                                     <<f_1030@16:2>@29:0>:int)
          
          P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int),
          ((<<f_1030@22:2>@25:0> = <f_1030@22:1>) && (<f_1030@22:0> >= 100))
          |- P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,
                                     <<f_1030@22:2>@25:0>:int)
          
          P[<f_1030@16:1>](var20:int,var21:int),
          (((1 + var21) = <f_1030@22:1>) &&
           (((1 + var20) = <f_1030@22:0>) && ((<f_1030@22:0> >= 51) && (<f_1030@22:0> < 101))))
          |- P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1153_sep_34_sep_0($104)) -> 1=0.
(($104-1=0) & ($105=0) & ($106-50=0) & ($107-100=0)) & (v_sep_f_1030_sep_16_sep_2_sep_29_sep_0($105,$106,$107)) -> v_sep_fail_1153_sep_34_sep_0($104).
(($108-100<0) & ($108-50>=0) & (-$108+$109-1=0) & ($110-$111-1=0)) & (v_sep_f_1030_sep_22_sep_2_sep_25_sep_0($109,$110,$112)) & (v_sep_f_1030_sep_16_sep_1($108,$111)) -> v_sep_f_1030_sep_16_sep_2_sep_29_sep_0($108,$111,$112).
(($113-100>=0) & ($114-$115=0)) & (v_sep_f_1030_sep_22_sep_1($113,$115)) -> v_sep_f_1030_sep_22_sep_2_sep_25_sep_0($113,$115,$114).
(($113-101<0) & ($113-51>=0) & (-$113+$116+1=0) & (-$115+$117+1=0)) & (v_sep_f_1030_sep_16_sep_1($116,$117)) -> v_sep_f_1030_sep_22_sep_1($113,$115).
($108=0) & ($111-50=0) -> v_sep_f_1030_sep_16_sep_1($108,$111).


v_sep_f_1030_sep_16_sep_1: X
v_sep_f_1030_sep_16_sep_2_sep_29_sep_0: X
v_sep_f_1030_sep_22_sep_1: X
v_sep_f_1030_sep_22_sep_2_sep_25_sep_0: X
v_sep_fail_1153_sep_34_sep_0: X
.......
v_sep_f_1030_sep_16_sep_1: X
v_sep_f_1030_sep_16_sep_2_sep_29_sep_0: X
v_sep_f_1030_sep_22_sep_1: X
v_sep_f_1030_sep_22_sep_2_sep_25_sep_0: X
v_sep_fail_1153_sep_34_sep_0: X
...
v_sep_f_1030_sep_16_sep_1: X
v_sep_f_1030_sep_16_sep_2_sep_29_sep_0: X
v_sep_f_1030_sep_22_sep_1: X
v_sep_f_1030_sep_22_sep_2_sep_25_sep_0: X
v_sep_fail_1153_sep_34_sep_0: X
.....
v_sep_f_1030_sep_16_sep_1: X
v_sep_f_1030_sep_16_sep_2_sep_29_sep_0: X
v_sep_f_1030_sep_22_sep_1: X
v_sep_f_1030_sep_22_sep_2_sep_25_sep_0: X
v_sep_fail_1153_sep_34_sep_0: X
......
v_sep_f_1030_sep_16_sep_1: X
v_sep_f_1030_sep_16_sep_2_sep_29_sep_0: X
v_sep_f_1030_sep_22_sep_1: X
v_sep_f_1030_sep_22_sep_2_sep_25_sep_0: X
v_sep_fail_1153_sep_34_sep_0: X
.......(0=0) & (v_sep_fail_1153_sep_34_sep_0($104)) -> 1=0.
(($104-1=0) & ($105=0) & ($106-50=0) & ($107-100=0)) & (v_sep_f_1030_sep_16_sep_2_sep_29_sep_0($105,$106,$107)) -> v_sep_fail_1153_sep_34_sep_0($104).
(($108-100<0) & ($108-50>=0) & (-$108+$109-1=0) & ($110-$111-1=0)) & (v_sep_f_1030_sep_22_sep_2_sep_25_sep_0($109,$110,$112)) & (v_sep_f_1030_sep_16_sep_1($108,$111)) -> v_sep_f_1030_sep_16_sep_2_sep_29_sep_0($108,$111,$112).
(($113-100>=0) & ($114-$115=0)) & (v_sep_f_1030_sep_22_sep_1($113,$115)) -> v_sep_f_1030_sep_22_sep_2_sep_25_sep_0($113,$115,$114).
(($113-101<0) & ($113-51>=0) & (-$113+$116+1=0) & (-$115+$117+1=0)) & (v_sep_f_1030_sep_16_sep_1($116,$117)) -> v_sep_f_1030_sep_22_sep_1($113,$115).
($108=0) & ($111-50=0) -> v_sep_f_1030_sep_16_sep_1($108,$111).

           ((<f_1030@16:1> = 50) && (<f_1030@16:0> = 0)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
        solution:
          P[<f_1030@16:1>]($135:int,$137:int) = ($135 <= 0)
          P[<<f_1030@16:2>@29:0>]($121:int,$123:int,$125:int) = ((99 + $121) <= 0)
          P[<f_1030@22:1>]($140:int,$142:int) = ($140 <= 1)
          P[<<f_1030@22:2>@25:0>]($128:int,$130:int,$132:int) = false
          P[<fail_1153@34:0>]($118:bool) = false
        
      end HcSolver.solve_ub(4359)[4] (0.032995 sec.)
      begin HcSolver.check_validity(4871)[4]
        input:
          P[<fail_1153@34:0>](<fail_1153@34:0>:bool)|- bot
          
          P[<<f_1030@16:2>@29:0>](0:int,50:int,100:int), <fail_1153@34:0> |- P[<fail_1153@34:0>](<fail_1153@34:0>:bool)
          
          P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int),
          P[<<f_1030@22:2>@25:0>]((1 + <f_1030@16:0>):int,(1 + <f_1030@16:1>):int,<<f_1030@16:2>@29:0>:int),
          ((<f_1030@16:0> < 100) && (<f_1030@16:0> >= 50))
          |- P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,<f_1030@16:1>:int,
                                     <<f_1030@16:2>@29:0>:int)
          
          P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int),
          ((<f_1030@22:0> >= 100) && (<<f_1030@22:2>@25:0> = <f_1030@22:1>))
          |- P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,
                                     <<f_1030@22:2>@25:0>:int)
          
          P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,(-1 + <f_1030@22:1>):int),
          ((<f_1030@22:0> < 101) && (<f_1030@22:0> >= 51)) |- P[<f_1030@22:1>](
          <f_1030@22:0>:int,<f_1030@22:1>:int)
          
           ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(4871)[4] (0.002999 sec.)
      solution:
        P[<f_1030@16:1>]($135:int,$137:int) = ($135 <= 0)
        P[<<f_1030@16:2>@29:0>]($121:int,$123:int,$125:int) = ((99 + $121) <= 0)
        P[<f_1030@22:1>]($140:int,$142:int) = ($140 <= 1)
        P[<<f_1030@22:2>@25:0>]($128:int,$130:int,$132:int) = false
        P[<fail_1153@34:0>]($118:bool) = false
    end YhornInterface.solve(4358)[3] (0.035994 sec.)
    
  end RefTypeInfer.infer_etrs(1973)[2] (0.097985 sec.)
  refinement types:
    main_1149: X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 0)} -> (v3:{v3:int | ((99 + v1) <= 0)} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 1)} -> (v3:{v3:int | false} -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    k_main_1146: var25:unit -> X
  abstraction types:
    main_1149: X
    f_1030: var26:int ->
            var27:int[var27 -> (var26 <= 0),
                      var27 -> (var26 <= 1)] -> (var28:int[var28 -> (
                                                           (99 + var26) <= 0)] -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:bool -> (v2:unit -> X) -> X
    k_main_1146: var25:unit -> X
  
end AbsTypeInfer.refine(1972)[1] (0.100985 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int -> x_2:int[x_1 <= 1; x_1 <= 0; x_2 <= 50] -> (x_4:int[x_1 <= -99; x_4 <= 50] -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1149 ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [2/2] ... --> 
  f_1030 [2/2] ... --> 
  f_1150 [2/2] ... --> 
  fail_1153 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 1; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(6085)[1]
  program:
    main_1149  | true = (f_1030 0
                                50
                                f_1150)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | b_1152 = (f_1030 (x_1031 + 1)
                                                               y_1032
                                                               k_f_1085)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | (not b_1152) = (f_1030 (
                                                                    x_1031 + 1)
                                                                    (y_1032 + 1)
                                                                    k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (x_1031 < 100) = (br_f_1151 (x_1031 < 50)
                                                                x_1031
                                                                y_1032
                                                                k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (not (x_1031 < 100)) = (k_f_1085 y_1032)
    f_1150 x_1124 | (not (x_1124 = 100)) = (k_main_1146 ())
    f_1150 x_1124 | (not (not (x_1124 = 100))) = (fail_1153 true
                                                            k_main_1146)
    fail_1153 b k | true = (fail ())
    k_main_1146 x_1118 | true = end
    main_1149:X
    br_f_1151:bool -> int -> int -> (int -> X) -> X
    f_1030:int -> int -> (int -> X) -> X
    f_1150:int -> X
    fail_1153:bool -> (unit -> X) -> X
    k_main_1146:unit -> X
  inlined functions: br_f_1151,f_1150,k_main_1146
  counterexample: 0:0:0:0:0:0:1:1:1:0
  error traces:
    [true.((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
     [(<f_1030@39:0> < 100).
      ((<br_f_1151@42:0> = (<f_1030@39:0> < 50)) &&
       ((<br_f_1151@42:1> = <f_1030@39:0>) && (<br_f_1151@42:2> = <f_1030@39:1>)))
      [<br_f_1151@42:0>.((<f_1030@45:0> = (<br_f_1151@42:1> + 1)) && (<f_1030@45:1> = <br_f_1151@42:2>))
       [(<f_1030@45:0> < 100).
        ((<br_f_1151@48:0> = (<f_1030@45:0> < 50)) &&
         ((<br_f_1151@48:1> = <f_1030@45:0>) && (<br_f_1151@48:2> = <f_1030@45:1>)))
        [<br_f_1151@48:0>.((<f_1030@51:0> = (<br_f_1151@48:1> + 1)) && (<f_1030@51:1> = <br_f_1151@48:2>))
         [(<f_1030@51:0> < 100).
          ((<br_f_1151@54:0> = (<f_1030@51:0> < 50)) &&
           ((<br_f_1151@54:1> = <f_1030@51:0>) && (<br_f_1151@54:2> = <f_1030@51:1>)))
          [(not <br_f_1151@54:0>).
           ((<f_1030@57:0> = (<br_f_1151@54:1> + 1)) && (<f_1030@57:1> = (<br_f_1151@54:2> + 1)))
           [(not (<f_1030@57:0> < 100)).(<<f_1030@57:2>@60:0> = <f_1030@57:1>)
            [true.(<<br_f_1151@54:3>@62:0> = <<f_1030@57:2>@60:0>)
             [true.(<<f_1030@51:2>@64:0> = <<br_f_1151@54:3>@62:0>)
              [true.(<<br_f_1151@48:3>@66:0> = <<f_1030@51:2>@64:0>)
               [true.(<<f_1030@45:2>@68:0> = <<br_f_1151@48:3>@66:0>)
                [true.(<<br_f_1151@42:3>@70:0> = <<f_1030@45:2>@68:0>)
                 [true.(<<f_1030@39:2>@72:0> = <<br_f_1151@42:3>@70:0>)
                  [true.(<f_1150@74:0> = <<f_1030@39:2>@72:0>)
                   [(not (not (<f_1150@74:0> = 100))).(<fail_1153@77:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(6086)[2]
    horn clauses:
      P[<fail_1153@77:0>](<fail_1153@77:0>:bool)|- bot
      
      P[<f_1150@74:0>](100:int), <fail_1153@77:0> |- P[<fail_1153@77:0>](<fail_1153@77:0>:bool)
      
      P[<<f_1030@39:2>@72:0>](0:int,50:int,<f_1150@74:0>:int)|- P[<f_1150@74:0>](<f_1150@74:0>:int)
      
      P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int),
      P[<<br_f_1151@42:3>@70:0>]((<f_1030@39:0> < 50):bool,<f_1030@39:0>:int,<f_1030@39:1>:int,<<f_1030@39:2>@72:0>:int),
      (<f_1030@39:0> < 100) |- P[<<f_1030@39:2>@72:0>](<f_1030@39:0>:int,
                                                       <f_1030@39:1>:int,
                                                       <<f_1030@39:2>@72:0>:int)
      
      P[<br_f_1151@42:2>](<br_f_1151@42:0>:bool,<br_f_1151@42:1>:int,<br_f_1151@42:2>:int),
      P[<<f_1030@45:2>@68:0>]((1 + <br_f_1151@42:1>):int,<br_f_1151@42:2>:int,<<br_f_1151@42:3>@70:0>:int),
      <br_f_1151@42:0>
      |- P[<<br_f_1151@42:3>@70:0>](<br_f_1151@42:0>:bool,<br_f_1151@42:1>:int,
                                    <br_f_1151@42:2>:int,<<br_f_1151@42:3>@70:0>:int)
      
      P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int),
      P[<<br_f_1151@48:3>@66:0>]((<f_1030@45:0> < 50):bool,<f_1030@45:0>:int,<f_1030@45:1>:int,<<f_1030@45:2>@68:0>:int),
      (<f_1030@45:0> < 100) |- P[<<f_1030@45:2>@68:0>](<f_1030@45:0>:int,
                                                       <f_1030@45:1>:int,
                                                       <<f_1030@45:2>@68:0>:int)
      
      P[<br_f_1151@48:2>](<br_f_1151@48:0>:bool,<br_f_1151@48:1>:int,<br_f_1151@48:2>:int),
      P[<<f_1030@51:2>@64:0>]((1 + <br_f_1151@48:1>):int,<br_f_1151@48:2>:int,<<br_f_1151@48:3>@66:0>:int),
      <br_f_1151@48:0>
      |- P[<<br_f_1151@48:3>@66:0>](<br_f_1151@48:0>:bool,<br_f_1151@48:1>:int,
                                    <br_f_1151@48:2>:int,<<br_f_1151@48:3>@66:0>:int)
      
      P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int),
      P[<<br_f_1151@54:3>@62:0>]((<f_1030@51:0> < 50):bool,<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@64:0>:int),
      (<f_1030@51:0> < 100) |- P[<<f_1030@51:2>@64:0>](<f_1030@51:0>:int,
                                                       <f_1030@51:1>:int,
                                                       <<f_1030@51:2>@64:0>:int)
      
      P[<br_f_1151@54:2>](<br_f_1151@54:0>:bool,<br_f_1151@54:1>:int,<br_f_1151@54:2>:int),
      P[<<f_1030@57:2>@60:0>]((1 + <br_f_1151@54:1>):int,(1 + <br_f_1151@54:2>):int,<<br_f_1151@54:3>@62:0>:int),
      (not <br_f_1151@54:0>)
      |- P[<<br_f_1151@54:3>@62:0>](<br_f_1151@54:0>:bool,<br_f_1151@54:1>:int,
                                    <br_f_1151@54:2>:int,<<br_f_1151@54:3>@62:0>:int)
      
      P[<f_1030@57:1>](<f_1030@57:0>:int,<f_1030@57:1>:int),
      ((<f_1030@57:0> >= 100) && (<<f_1030@57:2>@60:0> = <f_1030@57:1>))
      |- P[<<f_1030@57:2>@60:0>](<f_1030@57:0>:int,<f_1030@57:1>:int,
                                 <<f_1030@57:2>@60:0>:int)
      
      P[<br_f_1151@54:2>](false:bool,(-1 + <f_1030@57:0>):int,(-1 + <f_1030@57:1>):int)|- P[<f_1030@57:1>](
      <f_1030@57:0>:int,<f_1030@57:1>:int)
      
      P[<f_1030@51:1>](<br_f_1151@54:1>:int,<br_f_1151@54:2>:int),
      ((<br_f_1151@54:1> < 100) && (<br_f_1151@54:0> = (<br_f_1151@54:1> < 50)))
      |- P[<br_f_1151@54:2>](<br_f_1151@54:0>:bool,<br_f_1151@54:1>:int,
                             <br_f_1151@54:2>:int)
      
      P[<br_f_1151@48:2>](true:bool,(-1 + <f_1030@51:0>):int,<f_1030@51:1>:int)|- P[<f_1030@51:1>](
      <f_1030@51:0>:int,<f_1030@51:1>:int)
      
      P[<f_1030@45:1>](<br_f_1151@48:1>:int,<br_f_1151@48:2>:int),
      ((<br_f_1151@48:1> < 100) && (<br_f_1151@48:0> = (<br_f_1151@48:1> < 50)))
      |- P[<br_f_1151@48:2>](<br_f_1151@48:0>:bool,<br_f_1151@48:1>:int,
                             <br_f_1151@48:2>:int)
      
      P[<br_f_1151@42:2>](true:bool,(-1 + <f_1030@45:0>):int,<f_1030@45:1>:int)|- P[<f_1030@45:1>](
      <f_1030@45:0>:int,<f_1030@45:1>:int)
      
      P[<f_1030@39:1>](<br_f_1151@42:1>:int,<br_f_1151@42:2>:int),
      ((<br_f_1151@42:1> < 100) && (<br_f_1151@42:0> = (<br_f_1151@42:1> < 50)))
      |- P[<br_f_1151@42:2>](<br_f_1151@42:0>:bool,<br_f_1151@42:1>:int,
                             <br_f_1151@42:2>:int)
      
       ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
    call trees:
      <main_1149@37>
        <f_1030@39>
          <br_f_1151@42>
            <f_1030@45>
              <br_f_1151@48>
                <f_1030@51>
                  <br_f_1151@54>
                    <f_1030@57>
                    </<f_1030@57:2>@60>
                  </<br_f_1151@54:3>@62>
                </<f_1030@51:2>@64>
              </<br_f_1151@48:3>@66>
            </<f_1030@45:2>@68>
          </<br_f_1151@42:3>@70>
        </<f_1030@39:2>@72>
        <f_1150@74>
          <fail_1153@77>
    inlined horn clauses:
      P[<fail_1153@77:0>](<fail_1153@77:0>:bool)|- bot
      
      P[<<f_1030@39:2>@72:0>](0:int,50:int,100:int), <fail_1153@77:0> |- P[<fail_1153@77:0>](<fail_1153@77:0>:bool)
      
      P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int),
      P[<<f_1030@45:2>@68:0>]((1 + <f_1030@39:0>):int,<f_1030@39:1>:int,<<f_1030@39:2>@72:0>:int), (
      <f_1030@39:0> < 50) |- P[<<f_1030@39:2>@72:0>](<f_1030@39:0>:int,
                                                     <f_1030@39:1>:int,
                                                     <<f_1030@39:2>@72:0>:int)
      
      P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int),
      P[<<f_1030@51:2>@64:0>]((1 + <f_1030@45:0>):int,<f_1030@45:1>:int,<<f_1030@45:2>@68:0>:int), (
      <f_1030@45:0> < 50) |- P[<<f_1030@45:2>@68:0>](<f_1030@45:0>:int,
                                                     <f_1030@45:1>:int,
                                                     <<f_1030@45:2>@68:0>:int)
      
      P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int),
      P[<<f_1030@57:2>@60:0>]((1 + <f_1030@51:0>):int,(1 + <f_1030@51:1>):int,<<f_1030@51:2>@64:0>:int),
      ((<f_1030@51:0> < 100) && (<f_1030@51:0> >= 50))
      |- P[<<f_1030@51:2>@64:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,
                                 <<f_1030@51:2>@64:0>:int)
      
      P[<f_1030@57:1>](<f_1030@57:0>:int,<f_1030@57:1>:int),
      ((<f_1030@57:0> >= 100) && (<<f_1030@57:2>@60:0> = <f_1030@57:1>))
      |- P[<<f_1030@57:2>@60:0>](<f_1030@57:0>:int,<f_1030@57:1>:int,
                                 <<f_1030@57:2>@60:0>:int)
      
      P[<f_1030@51:1>]((-1 + <f_1030@57:0>):int,(-1 + <f_1030@57:1>):int),
      ((<f_1030@57:0> < 101) && (<f_1030@57:0> >= 51)) |- P[<f_1030@57:1>](
      <f_1030@57:0>:int,<f_1030@57:1>:int)
      
      P[<f_1030@45:1>]((-1 + <f_1030@51:0>):int,<f_1030@51:1>:int), (
      <f_1030@51:0> < 51) |- P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int)
      
      P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
      <f_1030@45:0> < 51) |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
      
       ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
    begin ParamSubstInfer.infer(9790)[3]
      
    end ParamSubstInfer.infer(9790)[3] (0.129981 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(9792)[3]
      
    end RefTypeInfer.elim_coeffs(9792)[3] (0.002000 sec.)
    begin YhornInterface.solve(10249)[3]
      begin HcSolver.solve_ub(10250)[4]
        encoded:
          P[<fail_1153@77:0>](<fail_1153@77:0>:int)|- bot
          
          P[<<f_1030@39:2>@72:0>](0:int,50:int,100:int), (<fail_1153@77:0> = 1)
          |- P[<fail_1153@77:0>](<fail_1153@77:0>:int)
          
          P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int),
          P[<<f_1030@45:2>@68:0>]((1 + <f_1030@39:0>):int,<f_1030@39:1>:int,<<f_1030@39:2>@72:0>:int),
          (<f_1030@39:0> < 50) |- P[<<f_1030@39:2>@72:0>](<f_1030@39:0>:int,
                                                          <f_1030@39:1>:int,
                                                          <<f_1030@39:2>@72:0>:int)
          
          P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int),
          P[<<f_1030@51:2>@64:0>]((1 + <f_1030@45:0>):int,<f_1030@45:1>:int,<<f_1030@45:2>@68:0>:int),
          (<f_1030@45:0> < 50) |- P[<<f_1030@45:2>@68:0>](<f_1030@45:0>:int,
                                                          <f_1030@45:1>:int,
                                                          <<f_1030@45:2>@68:0>:int)
          
          P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int),
          P[<<f_1030@57:2>@60:0>]((1 + <f_1030@51:0>):int,(1 + <f_1030@51:1>):int,<<f_1030@51:2>@64:0>:int),
          ((<f_1030@51:0> < 100) && (<f_1030@51:0> >= 50))
          |- P[<<f_1030@51:2>@64:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,
                                     <<f_1030@51:2>@64:0>:int)
          
          P[<f_1030@57:1>](<f_1030@57:0>:int,<f_1030@57:1>:int),
          ((<f_1030@57:0> >= 100) && (<<f_1030@57:2>@60:0> = <f_1030@57:1>))
          |- P[<<f_1030@57:2>@60:0>](<f_1030@57:0>:int,<f_1030@57:1>:int,
                                     <<f_1030@57:2>@60:0>:int)
          
          P[<f_1030@51:1>]((-1 + <f_1030@57:0>):int,(-1 + <f_1030@57:1>):int),
          ((<f_1030@57:0> < 101) && (<f_1030@57:0> >= 51)) |- P[<f_1030@57:1>](
          <f_1030@57:0>:int,<f_1030@57:1>:int)
          
          P[<f_1030@45:1>]((-1 + <f_1030@51:0>):int,<f_1030@51:1>:int), (
          <f_1030@51:0> < 51) |- P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int)
          
          P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
          <f_1030@45:0> < 51) |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
          
           ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
        input to Yhorn:
          P[<fail_1153@77:0>](<fail_1153@77:0>:int)|- bot
          
          P[<<f_1030@39:2>@72:0>](var31:int,var32:int,var33:int),
          ((var33 = 100) && ((var32 = 50) && ((var31 = 0) && (<fail_1153@77:0> = 1))))
          |- P[<fail_1153@77:0>](<fail_1153@77:0>:int)
          
          P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int),
          P[<<f_1030@45:2>@68:0>](var34:int,<f_1030@39:1>:int,<<f_1030@39:2>@72:0>:int),
          ((var34 = (1 + <f_1030@39:0>)) && (<f_1030@39:0> < 50))
          |- P[<<f_1030@39:2>@72:0>](<f_1030@39:0>:int,<f_1030@39:1>:int,
                                     <<f_1030@39:2>@72:0>:int)
          
          P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int),
          P[<<f_1030@51:2>@64:0>](var35:int,<f_1030@45:1>:int,<<f_1030@45:2>@68:0>:int),
          ((var35 = (1 + <f_1030@45:0>)) && (<f_1030@45:0> < 50))
          |- P[<<f_1030@45:2>@68:0>](<f_1030@45:0>:int,<f_1030@45:1>:int,
                                     <<f_1030@45:2>@68:0>:int)
          
          P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int),
          P[<<f_1030@57:2>@60:0>](var36:int,var37:int,<<f_1030@51:2>@64:0>:int),
          ((var37 = (1 + <f_1030@51:1>)) &&
           ((var36 = (1 + <f_1030@51:0>)) && ((<f_1030@51:0> >= 50) && (<f_1030@51:0> < 100))))
          |- P[<<f_1030@51:2>@64:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,
                                     <<f_1030@51:2>@64:0>:int)
          
          P[<f_1030@57:1>](<f_1030@57:0>:int,<f_1030@57:1>:int),
          ((<<f_1030@57:2>@60:0> = <f_1030@57:1>) && (<f_1030@57:0> >= 100))
          |- P[<<f_1030@57:2>@60:0>](<f_1030@57:0>:int,<f_1030@57:1>:int,
                                     <<f_1030@57:2>@60:0>:int)
          
          P[<f_1030@51:1>](var38:int,var39:int),
          (((1 + var39) = <f_1030@57:1>) &&
           (((1 + var38) = <f_1030@57:0>) && ((<f_1030@57:0> >= 51) && (<f_1030@57:0> < 101))))
          |- P[<f_1030@57:1>](<f_1030@57:0>:int,<f_1030@57:1>:int)
          
          P[<f_1030@45:1>](var40:int,<f_1030@51:1>:int), (((1 + var40) = <f_1030@51:0>) && (<f_1030@51:0> < 51))
          |- P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int)
          
          P[<f_1030@39:1>](var41:int,<f_1030@45:1>:int), (((1 + var41) = <f_1030@45:0>) && (<f_1030@45:0> < 51))
          |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1153_sep_77_sep_0($283)) -> 1=0.
(($283-1=0) & ($284=0) & ($285-50=0) & ($286-100=0)) & (v_sep_f_1030_sep_39_sep_2_sep_72_sep_0($284,$285,$286)) -> v_sep_fail_1153_sep_77_sep_0($283).
(($287-50<0) & (-$287+$288-1=0)) & (v_sep_f_1030_sep_45_sep_2_sep_68_sep_0($288,$289,$290)) & (v_sep_f_1030_sep_39_sep_1($287,$289)) -> v_sep_f_1030_sep_39_sep_2_sep_72_sep_0($287,$289,$290).
(($291-50<0) & (-$291+$292-1=0)) & (v_sep_f_1030_sep_51_sep_2_sep_64_sep_0($292,$293,$294)) & (v_sep_f_1030_sep_45_sep_1($291,$293)) -> v_sep_f_1030_sep_45_sep_2_sep_68_sep_0($291,$293,$294).
(($295-100<0) & ($295-50>=0) & (-$295+$296-1=0) & ($297-$298-1=0)) & (v_sep_f_1030_sep_57_sep_2_sep_60_sep_0($296,$297,$299)) & (v_sep_f_1030_sep_51_sep_1($295,$298)) -> v_sep_f_1030_sep_51_sep_2_sep_64_sep_0($295,$298,$299).
(($300-100>=0) & ($301-$302=0)) & (v_sep_f_1030_sep_57_sep_1($300,$302)) -> v_sep_f_1030_sep_57_sep_2_sep_60_sep_0($300,$302,$301).
(($300-101<0) & ($300-51>=0) & (-$300+$303+1=0) & (-$302+$304+1=0)) & (v_sep_f_1030_sep_51_sep_1($303,$304)) -> v_sep_f_1030_sep_57_sep_1($300,$302).
(($295-51<0) & (-$295+$305+1=0)) & (v_sep_f_1030_sep_45_sep_1($305,$298)) -> v_sep_f_1030_sep_51_sep_1($295,$298).
(($291-51<0) & (-$291+$306+1=0)) & (v_sep_f_1030_sep_39_sep_1($306,$293)) -> v_sep_f_1030_sep_45_sep_1($291,$293).
($287=0) & ($289-50=0) -> v_sep_f_1030_sep_39_sep_1($287,$289).


v_sep_f_1030_sep_39_sep_1: X
v_sep_f_1030_sep_39_sep_2_sep_72_sep_0: X
v_sep_f_1030_sep_45_sep_1: X
v_sep_f_1030_sep_45_sep_2_sep_68_sep_0: X
v_sep_f_1030_sep_51_sep_1: X
v_sep_f_1030_sep_51_sep_2_sep_64_sep_0: X
v_sep_f_1030_sep_57_sep_1: X
v_sep_f_1030_sep_57_sep_2_sep_60_sep_0: X
v_sep_fail_1153_sep_77_sep_0: X
.............
v_sep_f_1030_sep_39_sep_1: X
v_sep_f_1030_sep_39_sep_2_sep_72_sep_0: X
v_sep_f_1030_sep_45_sep_1: X
v_sep_f_1030_sep_45_sep_2_sep_68_sep_0: X
v_sep_f_1030_sep_51_sep_1: X
v_sep_f_1030_sep_51_sep_2_sep_64_sep_0: X
v_sep_f_1030_sep_57_sep_1: X
v_sep_f_1030_sep_57_sep_2_sep_60_sep_0: X
v_sep_fail_1153_sep_77_sep_0: X
...
v_sep_f_1030_sep_39_sep_1: X
v_sep_f_1030_sep_39_sep_2_sep_72_sep_0: X
v_sep_f_1030_sep_45_sep_1: X
v_sep_f_1030_sep_45_sep_2_sep_68_sep_0: X
v_sep_f_1030_sep_51_sep_1: X
v_sep_f_1030_sep_51_sep_2_sep_64_sep_0: X
v_sep_f_1030_sep_57_sep_1: X
v_sep_f_1030_sep_57_sep_2_sep_60_sep_0: X
v_sep_fail_1153_sep_77_sep_0: X
.....
v_sep_f_1030_sep_39_sep_1: X
v_sep_f_1030_sep_39_sep_2_sep_72_sep_0: X
v_sep_f_1030_sep_45_sep_1: X
v_sep_f_1030_sep_45_sep_2_sep_68_sep_0: X
v_sep_f_1030_sep_51_sep_1: X
v_sep_f_1030_sep_51_sep_2_sep_64_sep_0: X
v_sep_f_1030_sep_57_sep_1: X
v_sep_f_1030_sep_57_sep_2_sep_60_sep_0: X
v_sep_fail_1153_sep_77_sep_0: X
.......
v_sep_f_1030_sep_39_sep_1: X
v_sep_f_1030_sep_39_sep_2_sep_72_sep_0: X
v_sep_f_1030_sep_45_sep_1: X
v_sep_f_1030_sep_45_sep_2_sep_68_sep_0: X
v_sep_f_1030_sep_51_sep_1: X
v_sep_f_1030_sep_51_sep_2_sep_64_sep_0: X
v_sep_f_1030_sep_57_sep_1: X
v_sep_f_1030_sep_57_sep_2_sep_60_sep_0: X
v_sep_fail_1153_sep_77_sep_0: X
..........
v_sep_f_1030_sep_39_sep_1: X
v_sep_f_1030_sep_39_sep_2_sep_72_sep_0: X
v_sep_f_1030_sep_45_sep_1: X
v_sep_f_1030_sep_45_sep_2_sep_68_sep_0: X
v_sep_f_1030_sep_51_sep_1: X
v_sep_f_1030_sep_51_sep_2_sep_64_sep_0: X
v_sep_f_1030_sep_57_sep_1: X
v_sep_f_1030_sep_57_sep_2_sep_60_sep_0: X
v_sep_fail_1153_sep_77_sep_0: X
............
v_sep_f_1030_sep_39_sep_1: X
v_sep_f_1030_sep_39_sep_2_sep_72_sep_0: X
v_sep_f_1030_sep_45_sep_1: X
v_sep_f_1030_sep_45_sep_2_sep_68_sep_0: X
v_sep_f_1030_sep_51_sep_1: X
v_sep_f_1030_sep_51_sep_2_sep_64_sep_0: X
v_sep_f_1030_sep_57_sep_1: X
v_sep_f_1030_sep_57_sep_2_sep_60_sep_0: X
v_sep_fail_1153_sep_77_sep_0: X
.............(0=0) & (v_sep_fail_1153_sep_77_sep_0($283)) -> 1=0.
(($283-1=0) & ($284=0) & ($285-50=0) & ($286-100=0)) & (v_sep_f_1030_sep_39_sep_2_sep_72_sep_0($284,$285,$286)) -> v_sep_fail_1153_sep_77_sep_0($283).
(($287-50<0) & (-$287+$288-1=0)) & (v_sep_f_1030_sep_45_sep_2_sep_68_sep_0($288,$289,$290)) & (v_sep_f_1030_sep_39_sep_1($287,$289)) -> v_sep_f_1030_sep_39_sep_2_sep_72_sep_0($287,$289,$290).
(($291-50<0) & (-$291+$292-1=0)) & (v_sep_f_1030_sep_51_sep_2_sep_64_sep_0($292,$293,$294)) & (v_sep_f_1030_sep_45_sep_1($291,$293)) -> v_sep_f_1030_sep_45_sep_2_sep_68_sep_0($291,$293,$294).
(($295-100<0) & ($295-50>=0) & (-$295+$296-1=0) & ($297-$298-1=0)) & (v_sep_f_1030_sep_57_sep_2_sep_60_sep_0($296,$297,$299)) & (v_sep_f_1030_sep_51_sep_1($295,$298)) -> v_sep_f_1030_sep_51_sep_2_sep_64_sep_0($295,$298,$299).
(($300-100>=0) & ($301-$302=0)) & (v_sep_f_1030_sep_57_sep_1($300,$302)) -> v_sep_f_1030_sep_57_sep_2_sep_60_sep_0($300,$302,$301).
(($300-101<0) & ($300-51>=0) & (-$300+$303+1=0) & (-$302+$304+1=0)) & (v_sep_f_1030_sep_51_sep_1($303,$304)) -> v_sep_f_1030_sep_57_sep_1($300,$302).
(($295-51<0) & (-$295+$305+1=0)) & (v_sep_f_1030_sep_45_sep_1($305,$298)) -> v_sep_f_1030_sep_51_sep_1($295,$298).
(($291-51<0) & (-$291+$306+1=0)) & (v_sep_f_1030_sep_39_sep_1($306,$293)) -> v_sep_f_1030_sep_45_sep_1($291,$293).
($287=0) & ($289-50=0) -> v_sep_f_1030_sep_39_sep_1($287,$289).

           ((<f_1030@39:1> = 50) && (<f_1030@39:0> = 0)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
        solution:
          P[<f_1030@39:1>]($324:int,$326:int) = true
          P[<<f_1030@39:2>@72:0>]($310:int,$312:int,$314:int) = false
          P[<f_1030@45:1>]($336:int,$338:int) = true
          P[<<f_1030@45:2>@68:0>]($317:int,$319:int,$321:int) = false
          P[<f_1030@51:1>]($348:int,$350:int) = ($348 <= 50)
          P[<<f_1030@51:2>@64:0>]($329:int,$331:int,$333:int) = false
          P[<f_1030@57:1>]($353:int,$355:int) = ($353 <= 51)
          P[<<f_1030@57:2>@60:0>]($341:int,$343:int,$345:int) = (149 <= $341)
          P[<fail_1153@77:0>]($307:bool) = false
        
      end HcSolver.solve_ub(10250)[4] (0.050992 sec.)
      begin HcSolver.check_validity(10975)[4]
        input:
          P[<fail_1153@77:0>](<fail_1153@77:0>:bool)|- bot
          
          P[<<f_1030@39:2>@72:0>](0:int,50:int,100:int), <fail_1153@77:0> |- P[<fail_1153@77:0>](<fail_1153@77:0>:bool)
          
          P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int),
          P[<<f_1030@45:2>@68:0>]((1 + <f_1030@39:0>):int,<f_1030@39:1>:int,<<f_1030@39:2>@72:0>:int),
          (<f_1030@39:0> < 50) |- P[<<f_1030@39:2>@72:0>](<f_1030@39:0>:int,
                                                          <f_1030@39:1>:int,
                                                          <<f_1030@39:2>@72:0>:int)
          
          P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int),
          P[<<f_1030@51:2>@64:0>]((1 + <f_1030@45:0>):int,<f_1030@45:1>:int,<<f_1030@45:2>@68:0>:int),
          (<f_1030@45:0> < 50) |- P[<<f_1030@45:2>@68:0>](<f_1030@45:0>:int,
                                                          <f_1030@45:1>:int,
                                                          <<f_1030@45:2>@68:0>:int)
          
          P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int),
          P[<<f_1030@57:2>@60:0>]((1 + <f_1030@51:0>):int,(1 + <f_1030@51:1>):int,<<f_1030@51:2>@64:0>:int),
          ((<f_1030@51:0> < 100) && (<f_1030@51:0> >= 50))
          |- P[<<f_1030@51:2>@64:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,
                                     <<f_1030@51:2>@64:0>:int)
          
          P[<f_1030@57:1>](<f_1030@57:0>:int,<f_1030@57:1>:int),
          ((<f_1030@57:0> >= 100) && (<<f_1030@57:2>@60:0> = <f_1030@57:1>))
          |- P[<<f_1030@57:2>@60:0>](<f_1030@57:0>:int,<f_1030@57:1>:int,
                                     <<f_1030@57:2>@60:0>:int)
          
          P[<f_1030@51:1>]((-1 + <f_1030@57:0>):int,(-1 + <f_1030@57:1>):int),
          ((<f_1030@57:0> < 101) && (<f_1030@57:0> >= 51)) |- P[<f_1030@57:1>](
          <f_1030@57:0>:int,<f_1030@57:1>:int)
          
          P[<f_1030@45:1>]((-1 + <f_1030@51:0>):int,<f_1030@51:1>:int), (
          <f_1030@51:0> < 51) |- P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int)
          
          P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
          <f_1030@45:0> < 51) |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
          
           ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(10975)[4] (0.003000 sec.)
      solution:
        P[<f_1030@39:1>]($324:int,$326:int) = true
        P[<<f_1030@39:2>@72:0>]($310:int,$312:int,$314:int) = false
        P[<f_1030@45:1>]($336:int,$338:int) = true
        P[<<f_1030@45:2>@68:0>]($317:int,$319:int,$321:int) = false
        P[<f_1030@51:1>]($348:int,$350:int) = ($348 <= 50)
        P[<<f_1030@51:2>@64:0>]($329:int,$331:int,$333:int) = false
        P[<f_1030@57:1>]($353:int,$355:int) = ($353 <= 51)
        P[<<f_1030@57:2>@60:0>]($341:int,$343:int,$345:int) = (149 <= $341)
        P[<fail_1153@77:0>]($307:bool) = false
    end YhornInterface.solve(10249)[3] (0.054992 sec.)
    
  end RefTypeInfer.infer_etrs(6086)[2] (0.214968 sec.)
  refinement types:
    main_1149: X
    f_1030: v1:int -> v2:int -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:int -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 50)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 51)} -> (v3:{v3:int | (149 <= v1)} -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    k_main_1146: var45:unit -> X
  abstraction types:
    main_1149: X
    f_1030: var56:int ->
            var57:int[var57 -> (var56 <= 50),
                      var57 -> (var56 <= 51)] -> (var58:int[var58 -> (
                                                            149 <= var56)] -> X) -> X
    br_f_1151: var67:bool -> var68:int -> var69:int -> (var70:int -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:bool -> (v2:unit -> X) -> X
    k_main_1146: var45:unit -> X
  
end AbsTypeInfer.refine(6085)[1] (0.216968 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int ->
            x_2:int[x_1 <= 51; x_1 <= 50; x_1 <= 1; x_1 <= 0; x_2 <= 50] ->
            (x_4:int[x_1 >= 149; x_1 <= -99; x_4 <= 50] -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1149 ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [2/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [2/2] ... --> 
  f_1030 [2/2] ... --> 
  f_1150 [2/2] ... --> 
  fail_1153 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0; 1; 1; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(13588)[1]
  program:
    main_1149  | true = (f_1030 0
                                50
                                f_1150)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | b_1152 = (f_1030 (x_1031 + 1)
                                                               y_1032
                                                               k_f_1085)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | (not b_1152) = (f_1030 (
                                                                    x_1031 + 1)
                                                                    (y_1032 + 1)
                                                                    k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (x_1031 < 100) = (br_f_1151 (x_1031 < 50)
                                                                x_1031
                                                                y_1032
                                                                k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (not (x_1031 < 100)) = (k_f_1085 y_1032)
    f_1150 x_1124 | (not (x_1124 = 100)) = (k_main_1146 ())
    f_1150 x_1124 | (not (not (x_1124 = 100))) = (fail_1153 true
                                                            k_main_1146)
    fail_1153 b k | true = (fail ())
    k_main_1146 x_1118 | true = end
    main_1149:X
    br_f_1151:bool -> int -> int -> (int -> X) -> X
    f_1030:int -> int -> (int -> X) -> X
    f_1150:int -> X
    fail_1153:bool -> (unit -> X) -> X
    k_main_1146:unit -> X
  inlined functions: br_f_1151,f_1150,k_main_1146
  counterexample: 0:0:0:0:0:0:1:0:1:1:1:0
  error traces:
    [true.((<f_1030@82:0> = 0) && (<f_1030@82:1> = 50))
     [(<f_1030@82:0> < 100).
      ((<br_f_1151@85:0> = (<f_1030@82:0> < 50)) &&
       ((<br_f_1151@85:1> = <f_1030@82:0>) && (<br_f_1151@85:2> = <f_1030@82:1>)))
      [<br_f_1151@85:0>.((<f_1030@88:0> = (<br_f_1151@85:1> + 1)) && (<f_1030@88:1> = <br_f_1151@85:2>))
       [(<f_1030@88:0> < 100).
        ((<br_f_1151@91:0> = (<f_1030@88:0> < 50)) &&
         ((<br_f_1151@91:1> = <f_1030@88:0>) && (<br_f_1151@91:2> = <f_1030@88:1>)))
        [<br_f_1151@91:0>.((<f_1030@94:0> = (<br_f_1151@91:1> + 1)) && (<f_1030@94:1> = <br_f_1151@91:2>))
         [(<f_1030@94:0> < 100).
          ((<br_f_1151@97:0> = (<f_1030@94:0> < 50)) &&
           ((<br_f_1151@97:1> = <f_1030@94:0>) && (<br_f_1151@97:2> = <f_1030@94:1>)))
          [(not <br_f_1151@97:0>).
           ((<f_1030@100:0> = (<br_f_1151@97:1> + 1)) && (<f_1030@100:1> = (<br_f_1151@97:2> + 1)))
           [(<f_1030@100:0> < 100).
            ((<br_f_1151@103:0> = (<f_1030@100:0> < 50)) &&
             ((<br_f_1151@103:1> = <f_1030@100:0>) && (<br_f_1151@103:2> = <f_1030@100:1>)))
            [(not <br_f_1151@103:0>).
             ((<f_1030@106:0> = (<br_f_1151@103:1> + 1)) && (<f_1030@106:1> = (<br_f_1151@103:2> + 1)))
             [(not (<f_1030@106:0> < 100)).(<<f_1030@106:2>@109:0> = <f_1030@106:1>)
              [true.(<<br_f_1151@103:3>@111:0> = <<f_1030@106:2>@109:0>)
               [true.(<<f_1030@100:2>@113:0> = <<br_f_1151@103:3>@111:0>)
                [true.(<<br_f_1151@97:3>@115:0> = <<f_1030@100:2>@113:0>)
                 [true.(<<f_1030@94:2>@117:0> = <<br_f_1151@97:3>@115:0>)
                  [true.(<<br_f_1151@91:3>@119:0> = <<f_1030@94:2>@117:0>)
                   [true.(<<f_1030@88:2>@121:0> = <<br_f_1151@91:3>@119:0>)
                    [true.(<<br_f_1151@85:3>@123:0> = <<f_1030@88:2>@121:0>)
                     [true.(<<f_1030@82:2>@125:0> = <<br_f_1151@85:3>@123:0>)
                      [true.(<f_1150@127:0> = <<f_1030@82:2>@125:0>)
                       [(not (not (<f_1150@127:0> = 100))).(<fail_1153@130:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(13589)[2]
    horn clauses:
      P[<fail_1153@130:0>](<fail_1153@130:0>:bool)|- bot
      
      P[<f_1150@127:0>](100:int), <fail_1153@130:0> |- P[<fail_1153@130:0>](<fail_1153@130:0>:bool)
      
      P[<<f_1030@82:2>@125:0>](0:int,50:int,<f_1150@127:0>:int)|- P[<f_1150@127:0>](<f_1150@127:0>:int)
      
      P[<f_1030@82:1>](<f_1030@82:0>:int,<f_1030@82:1>:int),
      P[<<br_f_1151@85:3>@123:0>]((<f_1030@82:0> < 50):bool,<f_1030@82:0>:int,<f_1030@82:1>:int,<<f_1030@82:2>@125:0>:int),
      (<f_1030@82:0> < 100) |- P[<<f_1030@82:2>@125:0>](<f_1030@82:0>:int,
                                                        <f_1030@82:1>:int,
                                                        <<f_1030@82:2>@125:0>:int)
      
      P[<br_f_1151@85:2>](<br_f_1151@85:0>:bool,<br_f_1151@85:1>:int,<br_f_1151@85:2>:int),
      P[<<f_1030@88:2>@121:0>]((1 + <br_f_1151@85:1>):int,<br_f_1151@85:2>:int,<<br_f_1151@85:3>@123:0>:int),
      <br_f_1151@85:0>
      |- P[<<br_f_1151@85:3>@123:0>](<br_f_1151@85:0>:bool,<br_f_1151@85:1>:int,
                                     <br_f_1151@85:2>:int,<<br_f_1151@85:3>@123:0>:int)
      
      P[<f_1030@88:1>](<f_1030@88:0>:int,<f_1030@88:1>:int),
      P[<<br_f_1151@91:3>@119:0>]((<f_1030@88:0> < 50):bool,<f_1030@88:0>:int,<f_1030@88:1>:int,<<f_1030@88:2>@121:0>:int),
      (<f_1030@88:0> < 100) |- P[<<f_1030@88:2>@121:0>](<f_1030@88:0>:int,
                                                        <f_1030@88:1>:int,
                                                        <<f_1030@88:2>@121:0>:int)
      
      P[<br_f_1151@91:2>](<br_f_1151@91:0>:bool,<br_f_1151@91:1>:int,<br_f_1151@91:2>:int),
      P[<<f_1030@94:2>@117:0>]((1 + <br_f_1151@91:1>):int,<br_f_1151@91:2>:int,<<br_f_1151@91:3>@119:0>:int),
      <br_f_1151@91:0>
      |- P[<<br_f_1151@91:3>@119:0>](<br_f_1151@91:0>:bool,<br_f_1151@91:1>:int,
                                     <br_f_1151@91:2>:int,<<br_f_1151@91:3>@119:0>:int)
      
      P[<f_1030@94:1>](<f_1030@94:0>:int,<f_1030@94:1>:int),
      P[<<br_f_1151@97:3>@115:0>]((<f_1030@94:0> < 50):bool,<f_1030@94:0>:int,<f_1030@94:1>:int,<<f_1030@94:2>@117:0>:int),
      (<f_1030@94:0> < 100) |- P[<<f_1030@94:2>@117:0>](<f_1030@94:0>:int,
                                                        <f_1030@94:1>:int,
                                                        <<f_1030@94:2>@117:0>:int)
      
      P[<br_f_1151@97:2>](<br_f_1151@97:0>:bool,<br_f_1151@97:1>:int,<br_f_1151@97:2>:int),
      P[<<f_1030@100:2>@113:0>]((1 + <br_f_1151@97:1>):int,(1 + <br_f_1151@97:2>):int,<<br_f_1151@97:3>@115:0>:int),
      (not <br_f_1151@97:0>)
      |- P[<<br_f_1151@97:3>@115:0>](<br_f_1151@97:0>:bool,<br_f_1151@97:1>:int,
                                     <br_f_1151@97:2>:int,<<br_f_1151@97:3>@115:0>:int)
      
      P[<f_1030@100:1>](<f_1030@100:0>:int,<f_1030@100:1>:int),
      P[<<br_f_1151@103:3>@111:0>]((<f_1030@100:0> < 50):bool,<f_1030@100:0>:int,<f_1030@100:1>:int,<<f_1030@100:2>@113:0>:int),
      (<f_1030@100:0> < 100)
      |- P[<<f_1030@100:2>@113:0>](<f_1030@100:0>:int,<f_1030@100:1>:int,
                                   <<f_1030@100:2>@113:0>:int)
      
      P[<br_f_1151@103:2>](<br_f_1151@103:0>:bool,<br_f_1151@103:1>:int,<br_f_1151@103:2>:int),
      P[<<f_1030@106:2>@109:0>]((1 + <br_f_1151@103:1>):int,(1 + <br_f_1151@103:2>):int,<<br_f_1151@103:3>@111:0>:int),
      (not <br_f_1151@103:0>)
      |- P[<<br_f_1151@103:3>@111:0>](<br_f_1151@103:0>:bool,<br_f_1151@103:1>:int,
                                      <br_f_1151@103:2>:int,<<br_f_1151@103:3>@111:0>:int)
      
      P[<f_1030@106:1>](<f_1030@106:0>:int,<f_1030@106:1>:int),
      ((<f_1030@106:0> >= 100) && (<<f_1030@106:2>@109:0> = <f_1030@106:1>))
      |- P[<<f_1030@106:2>@109:0>](<f_1030@106:0>:int,<f_1030@106:1>:int,
                                   <<f_1030@106:2>@109:0>:int)
      
      P[<br_f_1151@103:2>](false:bool,(-1 + <f_1030@106:0>):int,(-1 + <f_1030@106:1>):int)|- P[<f_1030@106:1>](
      <f_1030@106:0>:int,<f_1030@106:1>:int)
      
      P[<f_1030@100:1>](<br_f_1151@103:1>:int,<br_f_1151@103:2>:int),
      ((<br_f_1151@103:1> < 100) && (<br_f_1151@103:0> = (<br_f_1151@103:1> < 50)))
      |- P[<br_f_1151@103:2>](<br_f_1151@103:0>:bool,<br_f_1151@103:1>:int,
                              <br_f_1151@103:2>:int)
      
      P[<br_f_1151@97:2>](false:bool,(-1 + <f_1030@100:0>):int,(-1 + <f_1030@100:1>):int)|- P[<f_1030@100:1>](
      <f_1030@100:0>:int,<f_1030@100:1>:int)
      
      P[<f_1030@94:1>](<br_f_1151@97:1>:int,<br_f_1151@97:2>:int),
      ((<br_f_1151@97:1> < 100) && (<br_f_1151@97:0> = (<br_f_1151@97:1> < 50)))
      |- P[<br_f_1151@97:2>](<br_f_1151@97:0>:bool,<br_f_1151@97:1>:int,
                             <br_f_1151@97:2>:int)
      
      P[<br_f_1151@91:2>](true:bool,(-1 + <f_1030@94:0>):int,<f_1030@94:1>:int)|- P[<f_1030@94:1>](
      <f_1030@94:0>:int,<f_1030@94:1>:int)
      
      P[<f_1030@88:1>](<br_f_1151@91:1>:int,<br_f_1151@91:2>:int),
      ((<br_f_1151@91:1> < 100) && (<br_f_1151@91:0> = (<br_f_1151@91:1> < 50)))
      |- P[<br_f_1151@91:2>](<br_f_1151@91:0>:bool,<br_f_1151@91:1>:int,
                             <br_f_1151@91:2>:int)
      
      P[<br_f_1151@85:2>](true:bool,(-1 + <f_1030@88:0>):int,<f_1030@88:1>:int)|- P[<f_1030@88:1>](
      <f_1030@88:0>:int,<f_1030@88:1>:int)
      
      P[<f_1030@82:1>](<br_f_1151@85:1>:int,<br_f_1151@85:2>:int),
      ((<br_f_1151@85:1> < 100) && (<br_f_1151@85:0> = (<br_f_1151@85:1> < 50)))
      |- P[<br_f_1151@85:2>](<br_f_1151@85:0>:bool,<br_f_1151@85:1>:int,
                             <br_f_1151@85:2>:int)
      
       ((<f_1030@82:0> = 0) && (<f_1030@82:1> = 50)) |- P[<f_1030@82:1>](<f_1030@82:0>:int,
                                                                    <f_1030@82:1>:int)
    call trees:
      <main_1149@80>
        <f_1030@82>
          <br_f_1151@85>
            <f_1030@88>
              <br_f_1151@91>
                <f_1030@94>
                  <br_f_1151@97>
                    <f_1030@100>
                      <br_f_1151@103>
                        <f_1030@106>
                        </<f_1030@106:2>@109>
                      </<br_f_1151@103:3>@111>
                    </<f_1030@100:2>@113>
                  </<br_f_1151@97:3>@115>
                </<f_1030@94:2>@117>
              </<br_f_1151@91:3>@119>
            </<f_1030@88:2>@121>
          </<br_f_1151@85:3>@123>
        </<f_1030@82:2>@125>
        <f_1150@127>
          <fail_1153@130>
    inlined horn clauses:
      P[<fail_1153@130:0>](<fail_1153@130:0>:bool)|- bot
      
      P[<<f_1030@82:2>@125:0>](0:int,50:int,100:int), <fail_1153@130:0> |- P[<fail_1153@130:0>](<fail_1153@130:0>:bool)
      
      P[<f_1030@82:1>](<f_1030@82:0>:int,<f_1030@82:1>:int),
      P[<<f_1030@88:2>@121:0>]((1 + <f_1030@82:0>):int,<f_1030@82:1>:int,<<f_1030@82:2>@125:0>:int),
      (<f_1030@82:0> < 50) |- P[<<f_1030@82:2>@125:0>](<f_1030@82:0>:int,
                                                       <f_1030@82:1>:int,
                                                       <<f_1030@82:2>@125:0>:int)
      
      P[<f_1030@88:1>](<f_1030@88:0>:int,<f_1030@88:1>:int),
      P[<<f_1030@94:2>@117:0>]((1 + <f_1030@88:0>):int,<f_1030@88:1>:int,<<f_1030@88:2>@121:0>:int),
      (<f_1030@88:0> < 50) |- P[<<f_1030@88:2>@121:0>](<f_1030@88:0>:int,
                                                       <f_1030@88:1>:int,
                                                       <<f_1030@88:2>@121:0>:int)
      
      P[<f_1030@94:1>](<f_1030@94:0>:int,<f_1030@94:1>:int),
      P[<<f_1030@100:2>@113:0>]((1 + <f_1030@94:0>):int,(1 + <f_1030@94:1>):int,<<f_1030@94:2>@117:0>:int),
      ((<f_1030@94:0> < 100) && (<f_1030@94:0> >= 50))
      |- P[<<f_1030@94:2>@117:0>](<f_1030@94:0>:int,<f_1030@94:1>:int,
                                  <<f_1030@94:2>@117:0>:int)
      
      P[<f_1030@100:1>](<f_1030@100:0>:int,<f_1030@100:1>:int),
      P[<<f_1030@106:2>@109:0>]((1 + <f_1030@100:0>):int,(1 + <f_1030@100:1>):int,<<f_1030@100:2>@113:0>:int),
      ((<f_1030@100:0> < 100) && (<f_1030@100:0> >= 50))
      |- P[<<f_1030@100:2>@113:0>](<f_1030@100:0>:int,<f_1030@100:1>:int,
                                   <<f_1030@100:2>@113:0>:int)
      
      P[<f_1030@106:1>](<f_1030@106:0>:int,<f_1030@106:1>:int),
      ((<f_1030@106:0> >= 100) && (<<f_1030@106:2>@109:0> = <f_1030@106:1>))
      |- P[<<f_1030@106:2>@109:0>](<f_1030@106:0>:int,<f_1030@106:1>:int,
                                   <<f_1030@106:2>@109:0>:int)
      
      P[<f_1030@100:1>]((-1 + <f_1030@106:0>):int,(-1 + <f_1030@106:1>):int),
      ((<f_1030@106:0> < 101) && (<f_1030@106:0> >= 51)) |- P[<f_1030@106:1>](
      <f_1030@106:0>:int,<f_1030@106:1>:int)
      
      P[<f_1030@94:1>]((-1 + <f_1030@100:0>):int,(-1 + <f_1030@100:1>):int),
      ((<f_1030@100:0> < 101) && (<f_1030@100:0> >= 51)) |- P[<f_1030@100:1>](
      <f_1030@100:0>:int,<f_1030@100:1>:int)
      
      P[<f_1030@88:1>]((-1 + <f_1030@94:0>):int,<f_1030@94:1>:int), (
      <f_1030@94:0> < 51) |- P[<f_1030@94:1>](<f_1030@94:0>:int,<f_1030@94:1>:int)
      
      P[<f_1030@82:1>]((-1 + <f_1030@88:0>):int,<f_1030@88:1>:int), (
      <f_1030@88:0> < 51) |- P[<f_1030@88:1>](<f_1030@88:0>:int,<f_1030@88:1>:int)
      
       ((<f_1030@82:0> = 0) && (<f_1030@82:1> = 50)) |- P[<f_1030@82:1>](<f_1030@82:0>:int,
                                                                    <f_1030@82:1>:int)
    begin ParamSubstInfer.infer(18511)[3]
      
    end ParamSubstInfer.infer(18511)[3] (0.358945 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(18513)[3]
      
    end RefTypeInfer.elim_coeffs(18513)[3] (0.001999 sec.)
    begin YhornInterface.solve(19136)[3]
      begin HcSolver.solve_ub(19137)[4]
        encoded:
          P[<fail_1153@130:0>](<fail_1153@130:0>:int)|- bot
          
          P[<<f_1030@82:2>@125:0>](0:int,50:int,100:int), (<fail_1153@130:0> = 1)
          |- P[<fail_1153@130:0>](<fail_1153@130:0>:int)
          
          P[<f_1030@82:1>](<f_1030@82:0>:int,<f_1030@82:1>:int),
          P[<<f_1030@88:2>@121:0>]((1 + <f_1030@82:0>):int,<f_1030@82:1>:int,<<f_1030@82:2>@125:0>:int),
          (<f_1030@82:0> < 50)
          |- P[<<f_1030@82:2>@125:0>](<f_1030@82:0>:int,<f_1030@82:1>:int,
                                      <<f_1030@82:2>@125:0>:int)
          
          P[<f_1030@88:1>](<f_1030@88:0>:int,<f_1030@88:1>:int),
          P[<<f_1030@94:2>@117:0>]((1 + <f_1030@88:0>):int,<f_1030@88:1>:int,<<f_1030@88:2>@121:0>:int),
          (<f_1030@88:0> < 50)
          |- P[<<f_1030@88:2>@121:0>](<f_1030@88:0>:int,<f_1030@88:1>:int,
                                      <<f_1030@88:2>@121:0>:int)
          
          P[<f_1030@94:1>](<f_1030@94:0>:int,<f_1030@94:1>:int),
          P[<<f_1030@100:2>@113:0>]((1 + <f_1030@94:0>):int,(1 + <f_1030@94:1>):int,<<f_1030@94:2>@117:0>:int),
          ((<f_1030@94:0> < 100) && (<f_1030@94:0> >= 50))
          |- P[<<f_1030@94:2>@117:0>](<f_1030@94:0>:int,<f_1030@94:1>:int,
                                      <<f_1030@94:2>@117:0>:int)
          
          P[<f_1030@100:1>](<f_1030@100:0>:int,<f_1030@100:1>:int),
          P[<<f_1030@106:2>@109:0>]((1 + <f_1030@100:0>):int,(1 + <f_1030@100:1>):int,<<f_1030@100:2>@113:0>:int),
          ((<f_1030@100:0> < 100) && (<f_1030@100:0> >= 50))
          |- P[<<f_1030@100:2>@113:0>](<f_1030@100:0>:int,<f_1030@100:1>:int,
                                       <<f_1030@100:2>@113:0>:int)
          
          P[<f_1030@106:1>](<f_1030@106:0>:int,<f_1030@106:1>:int),
          ((<f_1030@106:0> >= 100) && (<<f_1030@106:2>@109:0> = <f_1030@106:1>))
          |- P[<<f_1030@106:2>@109:0>](<f_1030@106:0>:int,<f_1030@106:1>:int,
                                       <<f_1030@106:2>@109:0>:int)
          
          P[<f_1030@100:1>]((-1 + <f_1030@106:0>):int,(-1 + <f_1030@106:1>):int),
          ((<f_1030@106:0> < 101) && (<f_1030@106:0> >= 51))
          |- P[<f_1030@106:1>](<f_1030@106:0>:int,<f_1030@106:1>:int)
          
          P[<f_1030@94:1>]((-1 + <f_1030@100:0>):int,(-1 + <f_1030@100:1>):int),
          ((<f_1030@100:0> < 101) && (<f_1030@100:0> >= 51))
          |- P[<f_1030@100:1>](<f_1030@100:0>:int,<f_1030@100:1>:int)
          
          P[<f_1030@88:1>]((-1 + <f_1030@94:0>):int,<f_1030@94:1>:int), (
          <f_1030@94:0> < 51) |- P[<f_1030@94:1>](<f_1030@94:0>:int,<f_1030@94:1>:int)
          
          P[<f_1030@82:1>]((-1 + <f_1030@88:0>):int,<f_1030@88:1>:int), (
          <f_1030@88:0> < 51) |- P[<f_1030@88:1>](<f_1030@88:0>:int,<f_1030@88:1>:int)
          
           ((<f_1030@82:0> = 0) && (<f_1030@82:1> = 50)) |- P[<f_1030@82:1>](<f_1030@82:0>:int,
                                                                    <f_1030@82:1>:int)
        input to Yhorn:
          P[<fail_1153@130:0>](<fail_1153@130:0>:int)|- bot
          
          P[<<f_1030@82:2>@125:0>](var73:int,var74:int,var75:int),
          ((var75 = 100) && ((var74 = 50) && ((var73 = 0) && (<fail_1153@130:0> = 1))))
          |- P[<fail_1153@130:0>](<fail_1153@130:0>:int)
          
          P[<f_1030@82:1>](<f_1030@82:0>:int,<f_1030@82:1>:int),
          P[<<f_1030@88:2>@121:0>](var76:int,<f_1030@82:1>:int,<<f_1030@82:2>@125:0>:int),
          ((var76 = (1 + <f_1030@82:0>)) && (<f_1030@82:0> < 50))
          |- P[<<f_1030@82:2>@125:0>](<f_1030@82:0>:int,<f_1030@82:1>:int,
                                      <<f_1030@82:2>@125:0>:int)
          
          P[<f_1030@88:1>](<f_1030@88:0>:int,<f_1030@88:1>:int),
          P[<<f_1030@94:2>@117:0>](var77:int,<f_1030@88:1>:int,<<f_1030@88:2>@121:0>:int),
          ((var77 = (1 + <f_1030@88:0>)) && (<f_1030@88:0> < 50))
          |- P[<<f_1030@88:2>@121:0>](<f_1030@88:0>:int,<f_1030@88:1>:int,
                                      <<f_1030@88:2>@121:0>:int)
          
          P[<f_1030@94:1>](<f_1030@94:0>:int,<f_1030@94:1>:int),
          P[<<f_1030@100:2>@113:0>](var78:int,var79:int,<<f_1030@94:2>@117:0>:int),
          ((var79 = (1 + <f_1030@94:1>)) &&
           ((var78 = (1 + <f_1030@94:0>)) && ((<f_1030@94:0> >= 50) && (<f_1030@94:0> < 100))))
          |- P[<<f_1030@94:2>@117:0>](<f_1030@94:0>:int,<f_1030@94:1>:int,
                                      <<f_1030@94:2>@117:0>:int)
          
          P[<f_1030@100:1>](<f_1030@100:0>:int,<f_1030@100:1>:int),
          P[<<f_1030@106:2>@109:0>](var80:int,var81:int,<<f_1030@100:2>@113:0>:int),
          ((var81 = (1 + <f_1030@100:1>)) &&
           ((var80 = (1 + <f_1030@100:0>)) && ((<f_1030@100:0> >= 50) && (<f_1030@100:0> < 100))))
          |- P[<<f_1030@100:2>@113:0>](<f_1030@100:0>:int,<f_1030@100:1>:int,
                                       <<f_1030@100:2>@113:0>:int)
          
          P[<f_1030@106:1>](<f_1030@106:0>:int,<f_1030@106:1>:int),
          ((<<f_1030@106:2>@109:0> = <f_1030@106:1>) && (<f_1030@106:0> >= 100))
          |- P[<<f_1030@106:2>@109:0>](<f_1030@106:0>:int,<f_1030@106:1>:int,
                                       <<f_1030@106:2>@109:0>:int)
          
          P[<f_1030@100:1>](var82:int,var83:int),
          (((1 + var83) = <f_1030@106:1>) &&
           (((1 + var82) = <f_1030@106:0>) && ((<f_1030@106:0> >= 51) && (<f_1030@106:0> < 101))))
          |- P[<f_1030@106:1>](<f_1030@106:0>:int,<f_1030@106:1>:int)
          
          P[<f_1030@94:1>](var84:int,var85:int),
          (((1 + var85) = <f_1030@100:1>) &&
           (((1 + var84) = <f_1030@100:0>) && ((<f_1030@100:0> >= 51) && (<f_1030@100:0> < 101))))
          |- P[<f_1030@100:1>](<f_1030@100:0>:int,<f_1030@100:1>:int)
          
          P[<f_1030@88:1>](var86:int,<f_1030@94:1>:int), (((1 + var86) = <f_1030@94:0>) && (<f_1030@94:0> < 51))
          |- P[<f_1030@94:1>](<f_1030@94:0>:int,<f_1030@94:1>:int)
          
          P[<f_1030@82:1>](var87:int,<f_1030@88:1>:int), (((1 + var87) = <f_1030@88:0>) && (<f_1030@88:0> < 51))
          |- P[<f_1030@88:1>](<f_1030@88:0>:int,<f_1030@88:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1153_sep_130_sep_0($589)) -> 1=0.
(($589-1=0) & ($590=0) & ($591-50=0) & ($592-100=0)) & (v_sep_f_1030_sep_82_sep_2_sep_125_sep_0($590,$591,$592)) -> v_sep_fail_1153_sep_130_sep_0($589).
(($593-50<0) & (-$593+$594-1=0)) & (v_sep_f_1030_sep_88_sep_2_sep_121_sep_0($594,$595,$596)) & (v_sep_f_1030_sep_82_sep_1($593,$595)) -> v_sep_f_1030_sep_82_sep_2_sep_125_sep_0($593,$595,$596).
(($597-50<0) & (-$597+$598-1=0)) & (v_sep_f_1030_sep_94_sep_2_sep_117_sep_0($598,$599,$600)) & (v_sep_f_1030_sep_88_sep_1($597,$599)) -> v_sep_f_1030_sep_88_sep_2_sep_121_sep_0($597,$599,$600).
(($601-100<0) & ($601-50>=0) & (-$601+$602-1=0) & ($603-$604-1=0)) & (v_sep_f_1030_sep_100_sep_2_sep_113_sep_0($602,$603,$605)) & (v_sep_f_1030_sep_94_sep_1($601,$604)) -> v_sep_f_1030_sep_94_sep_2_sep_117_sep_0($601,$604,$605).
(($606-100<0) & ($606-50>=0) & (-$606+$607-1=0) & ($608-$609-1=0)) & (v_sep_f_1030_sep_106_sep_2_sep_109_sep_0($607,$608,$610)) & (v_sep_f_1030_sep_100_sep_1($606,$609)) -> v_sep_f_1030_sep_100_sep_2_sep_113_sep_0($606,$609,$610).
(($611-100>=0) & ($612-$613=0)) & (v_sep_f_1030_sep_106_sep_1($611,$613)) -> v_sep_f_1030_sep_106_sep_2_sep_109_sep_0($611,$613,$612).
(($611-101<0) & ($611-51>=0) & (-$611+$614+1=0) & (-$613+$615+1=0)) & (v_sep_f_1030_sep_100_sep_1($614,$615)) -> v_sep_f_1030_sep_106_sep_1($611,$613).
(($606-101<0) & ($606-51>=0) & (-$606+$616+1=0) & (-$609+$617+1=0)) & (v_sep_f_1030_sep_94_sep_1($616,$617)) -> v_sep_f_1030_sep_100_sep_1($606,$609).
(($601-51<0) & (-$601+$618+1=0)) & (v_sep_f_1030_sep_88_sep_1($618,$604)) -> v_sep_f_1030_sep_94_sep_1($601,$604).
(($597-51<0) & (-$597+$619+1=0)) & (v_sep_f_1030_sep_82_sep_1($619,$599)) -> v_sep_f_1030_sep_88_sep_1($597,$599).
($593=0) & ($595-50=0) -> v_sep_f_1030_sep_82_sep_1($593,$595).


v_sep_f_1030_sep_100_sep_1: X
v_sep_f_1030_sep_100_sep_2_sep_113_sep_0: X
v_sep_f_1030_sep_106_sep_1: X
v_sep_f_1030_sep_106_sep_2_sep_109_sep_0: X
v_sep_f_1030_sep_82_sep_1: X
v_sep_f_1030_sep_82_sep_2_sep_125_sep_0: X
v_sep_f_1030_sep_88_sep_1: X
v_sep_f_1030_sep_88_sep_2_sep_121_sep_0: X
v_sep_f_1030_sep_94_sep_1: X
v_sep_f_1030_sep_94_sep_2_sep_117_sep_0: X
v_sep_fail_1153_sep_130_sep_0: X
................
v_sep_f_1030_sep_100_sep_1: X
v_sep_f_1030_sep_100_sep_2_sep_113_sep_0: X
v_sep_f_1030_sep_106_sep_1: X
v_sep_f_1030_sep_106_sep_2_sep_109_sep_0: X
v_sep_f_1030_sep_82_sep_1: X
v_sep_f_1030_sep_82_sep_2_sep_125_sep_0: X
v_sep_f_1030_sep_88_sep_1: X
v_sep_f_1030_sep_88_sep_2_sep_121_sep_0: X
v_sep_f_1030_sep_94_sep_1: X
v_sep_f_1030_sep_94_sep_2_sep_117_sep_0: X
v_sep_fail_1153_sep_130_sep_0: X
...
v_sep_f_1030_sep_100_sep_1: X
v_sep_f_1030_sep_100_sep_2_sep_113_sep_0: X
v_sep_f_1030_sep_106_sep_1: X
v_sep_f_1030_sep_106_sep_2_sep_109_sep_0: X
v_sep_f_1030_sep_82_sep_1: X
v_sep_f_1030_sep_82_sep_2_sep_125_sep_0: X
v_sep_f_1030_sep_88_sep_1: X
v_sep_f_1030_sep_88_sep_2_sep_121_sep_0: X
v_sep_f_1030_sep_94_sep_1: X
v_sep_f_1030_sep_94_sep_2_sep_117_sep_0: X
v_sep_fail_1153_sep_130_sep_0: X
.....
v_sep_f_1030_sep_100_sep_1: X
v_sep_f_1030_sep_100_sep_2_sep_113_sep_0: X
v_sep_f_1030_sep_106_sep_1: X
v_sep_f_1030_sep_106_sep_2_sep_109_sep_0: X
v_sep_f_1030_sep_82_sep_1: X
v_sep_f_1030_sep_82_sep_2_sep_125_sep_0: X
v_sep_f_1030_sep_88_sep_1: X
v_sep_f_1030_sep_88_sep_2_sep_121_sep_0: X
v_sep_f_1030_sep_94_sep_1: X
v_sep_f_1030_sep_94_sep_2_sep_117_sep_0: X
v_sep_fail_1153_sep_130_sep_0: X
.......
v_sep_f_1030_sep_100_sep_1: X
v_sep_f_1030_sep_100_sep_2_sep_113_sep_0: X
v_sep_f_1030_sep_106_sep_1: X
v_sep_f_1030_sep_106_sep_2_sep_109_sep_0: X
v_sep_f_1030_sep_82_sep_1: X
v_sep_f_1030_sep_82_sep_2_sep_125_sep_0: X
v_sep_f_1030_sep_88_sep_1: X
v_sep_f_1030_sep_88_sep_2_sep_121_sep_0: X
v_sep_f_1030_sep_94_sep_1: X
v_sep_f_1030_sep_94_sep_2_sep_117_sep_0: X
v_sep_fail_1153_sep_130_sep_0: X
..........
v_sep_f_1030_sep_100_sep_1: X
v_sep_f_1030_sep_100_sep_2_sep_113_sep_0: X
v_sep_f_1030_sep_106_sep_1: X
v_sep_f_1030_sep_106_sep_2_sep_109_sep_0: X
v_sep_f_1030_sep_82_sep_1: X
v_sep_f_1030_sep_82_sep_2_sep_125_sep_0: X
v_sep_f_1030_sep_88_sep_1: X
v_sep_f_1030_sep_88_sep_2_sep_121_sep_0: X
v_sep_f_1030_sep_94_sep_1: X
v_sep_f_1030_sep_94_sep_2_sep_117_sep_0: X
v_sep_fail_1153_sep_130_sep_0: X
.............
v_sep_f_1030_sep_100_sep_1: X
v_sep_f_1030_sep_100_sep_2_sep_113_sep_0: X
v_sep_f_1030_sep_106_sep_1: X
v_sep_f_1030_sep_106_sep_2_sep_109_sep_0: X
v_sep_f_1030_sep_82_sep_1: X
v_sep_f_1030_sep_82_sep_2_sep_125_sep_0: X
v_sep_f_1030_sep_88_sep_1: X
v_sep_f_1030_sep_88_sep_2_sep_121_sep_0: X
v_sep_f_1030_sep_94_sep_1: X
v_sep_f_1030_sep_94_sep_2_sep_117_sep_0: X
v_sep_fail_1153_sep_130_sep_0: X
...............
v_sep_f_1030_sep_100_sep_1: X
v_sep_f_1030_sep_100_sep_2_sep_113_sep_0: X
v_sep_f_1030_sep_106_sep_1: X
v_sep_f_1030_sep_106_sep_2_sep_109_sep_0: X
v_sep_f_1030_sep_82_sep_1: X
v_sep_f_1030_sep_82_sep_2_sep_125_sep_0: X
v_sep_f_1030_sep_88_sep_1: X
v_sep_f_1030_sep_88_sep_2_sep_121_sep_0: X
v_sep_f_1030_sep_94_sep_1: X
v_sep_f_1030_sep_94_sep_2_sep_117_sep_0: X
v_sep_fail_1153_sep_130_sep_0: X
................(0=0) & (v_sep_fail_1153_sep_130_sep_0($589)) -> 1=0.
(($589-1=0) & ($590=0) & ($591-50=0) & ($592-100=0)) & (v_sep_f_1030_sep_82_sep_2_sep_125_sep_0($590,$591,$592)) -> v_sep_fail_1153_sep_130_sep_0($589).
(($593-50<0) & (-$593+$594-1=0)) & (v_sep_f_1030_sep_88_sep_2_sep_121_sep_0($594,$595,$596)) & (v_sep_f_1030_sep_82_sep_1($593,$595)) -> v_sep_f_1030_sep_82_sep_2_sep_125_sep_0($593,$595,$596).
(($597-50<0) & (-$597+$598-1=0)) & (v_sep_f_1030_sep_94_sep_2_sep_117_sep_0($598,$599,$600)) & (v_sep_f_1030_sep_88_sep_1($597,$599)) -> v_sep_f_1030_sep_88_sep_2_sep_121_sep_0($597,$599,$600).
(($601-100<0) & ($601-50>=0) & (-$601+$602-1=0) & ($603-$604-1=0)) & (v_sep_f_1030_sep_100_sep_2_sep_113_sep_0($602,$603,$605)) & (v_sep_f_1030_sep_94_sep_1($601,$604)) -> v_sep_f_1030_sep_94_sep_2_sep_117_sep_0($601,$604,$605).
(($606-100<0) & ($606-50>=0) & (-$606+$607-1=0) & ($608-$609-1=0)) & (v_sep_f_1030_sep_106_sep_2_sep_109_sep_0($607,$608,$610)) & (v_sep_f_1030_sep_100_sep_1($606,$609)) -> v_sep_f_1030_sep_100_sep_2_sep_113_sep_0($606,$609,$610).
(($611-100>=0) & ($612-$613=0)) & (v_sep_f_1030_sep_106_sep_1($611,$613)) -> v_sep_f_1030_sep_106_sep_2_sep_109_sep_0($611,$613,$612).
(($611-101<0) & ($611-51>=0) & (-$611+$614+1=0) & (-$613+$615+1=0)) & (v_sep_f_1030_sep_100_sep_1($614,$615)) -> v_sep_f_1030_sep_106_sep_1($611,$613).
(($606-101<0) & ($606-51>=0) & (-$606+$616+1=0) & (-$609+$617+1=0)) & (v_sep_f_1030_sep_94_sep_1($616,$617)) -> v_sep_f_1030_sep_100_sep_1($606,$609).
(($601-51<0) & (-$601+$618+1=0)) & (v_sep_f_1030_sep_88_sep_1($618,$604)) -> v_sep_f_1030_sep_94_sep_1($601,$604).
(($597-51<0) & (-$597+$619+1=0)) & (v_sep_f_1030_sep_82_sep_1($619,$599)) -> v_sep_f_1030_sep_88_sep_1($597,$599).
($593=0) & ($595-50=0) -> v_sep_f_1030_sep_82_sep_1($593,$595).

           ((<f_1030@82:1> = 50) && (<f_1030@82:0> = 0)) |- P[<f_1030@82:1>](<f_1030@82:0>:int,
                                                                    <f_1030@82:1>:int)
        solution:
          P[<f_1030@100:1>]($673:int,$675:int) = true
          P[<<f_1030@100:2>@113:0>]($654:int,$656:int,$658:int) = true
          P[<f_1030@106:1>]($678:int,$680:int) = true
          P[<<f_1030@106:2>@109:0>]($666:int,$668:int,$670:int) = true
          P[<f_1030@82:1>]($637:int,$639:int) = true
          P[<<f_1030@82:2>@125:0>]($623:int,$625:int,$627:int) = (48 <= $623)
          P[<f_1030@88:1>]($649:int,$651:int) = true
          P[<<f_1030@88:2>@121:0>]($630:int,$632:int,$634:int) = (49 <= $630)
          P[<f_1030@94:1>]($661:int,$663:int) = true
          P[<<f_1030@94:2>@117:0>]($642:int,$644:int,$646:int) = (50 <= $642)
          P[<fail_1153@130:0>]($620:bool) = false
        
      end HcSolver.solve_ub(19137)[4] (0.082988 sec.)
      begin HcSolver.check_validity(20194)[4]
        input:
          P[<fail_1153@130:0>](<fail_1153@130:0>:bool)|- bot
          
          P[<<f_1030@82:2>@125:0>](0:int,50:int,100:int), <fail_1153@130:0>
          |- P[<fail_1153@130:0>](<fail_1153@130:0>:bool)
          
          P[<f_1030@82:1>](<f_1030@82:0>:int,<f_1030@82:1>:int),
          P[<<f_1030@88:2>@121:0>]((1 + <f_1030@82:0>):int,<f_1030@82:1>:int,<<f_1030@82:2>@125:0>:int),
          (<f_1030@82:0> < 50)
          |- P[<<f_1030@82:2>@125:0>](<f_1030@82:0>:int,<f_1030@82:1>:int,
                                      <<f_1030@82:2>@125:0>:int)
          
          P[<f_1030@88:1>](<f_1030@88:0>:int,<f_1030@88:1>:int),
          P[<<f_1030@94:2>@117:0>]((1 + <f_1030@88:0>):int,<f_1030@88:1>:int,<<f_1030@88:2>@121:0>:int),
          (<f_1030@88:0> < 50)
          |- P[<<f_1030@88:2>@121:0>](<f_1030@88:0>:int,<f_1030@88:1>:int,
                                      <<f_1030@88:2>@121:0>:int)
          
          P[<f_1030@94:1>](<f_1030@94:0>:int,<f_1030@94:1>:int),
          P[<<f_1030@100:2>@113:0>]((1 + <f_1030@94:0>):int,(1 + <f_1030@94:1>):int,<<f_1030@94:2>@117:0>:int),
          ((<f_1030@94:0> < 100) && (<f_1030@94:0> >= 50))
          |- P[<<f_1030@94:2>@117:0>](<f_1030@94:0>:int,<f_1030@94:1>:int,
                                      <<f_1030@94:2>@117:0>:int)
          
          P[<f_1030@100:1>](<f_1030@100:0>:int,<f_1030@100:1>:int),
          P[<<f_1030@106:2>@109:0>]((1 + <f_1030@100:0>):int,(1 + <f_1030@100:1>):int,<<f_1030@100:2>@113:0>:int),
          ((<f_1030@100:0> < 100) && (<f_1030@100:0> >= 50))
          |- P[<<f_1030@100:2>@113:0>](<f_1030@100:0>:int,<f_1030@100:1>:int,
                                       <<f_1030@100:2>@113:0>:int)
          
          P[<f_1030@106:1>](<f_1030@106:0>:int,<f_1030@106:1>:int),
          ((<f_1030@106:0> >= 100) && (<<f_1030@106:2>@109:0> = <f_1030@106:1>))
          |- P[<<f_1030@106:2>@109:0>](<f_1030@106:0>:int,<f_1030@106:1>:int,
                                       <<f_1030@106:2>@109:0>:int)
          
          P[<f_1030@100:1>]((-1 + <f_1030@106:0>):int,(-1 + <f_1030@106:1>):int),
          ((<f_1030@106:0> < 101) && (<f_1030@106:0> >= 51))
          |- P[<f_1030@106:1>](<f_1030@106:0>:int,<f_1030@106:1>:int)
          
          P[<f_1030@94:1>]((-1 + <f_1030@100:0>):int,(-1 + <f_1030@100:1>):int),
          ((<f_1030@100:0> < 101) && (<f_1030@100:0> >= 51))
          |- P[<f_1030@100:1>](<f_1030@100:0>:int,<f_1030@100:1>:int)
          
          P[<f_1030@88:1>]((-1 + <f_1030@94:0>):int,<f_1030@94:1>:int), (
          <f_1030@94:0> < 51) |- P[<f_1030@94:1>](<f_1030@94:0>:int,<f_1030@94:1>:int)
          
          P[<f_1030@82:1>]((-1 + <f_1030@88:0>):int,<f_1030@88:1>:int), (
          <f_1030@88:0> < 51) |- P[<f_1030@88:1>](<f_1030@88:0>:int,<f_1030@88:1>:int)
          
           ((<f_1030@82:0> = 0) && (<f_1030@82:1> = 50)) |- P[<f_1030@82:1>](<f_1030@82:0>:int,
                                                                    <f_1030@82:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(20194)[4] (0.007999 sec.)
      solution:
        P[<f_1030@100:1>]($673:int,$675:int) = true
        P[<<f_1030@100:2>@113:0>]($654:int,$656:int,$658:int) = true
        P[<f_1030@106:1>]($678:int,$680:int) = true
        P[<<f_1030@106:2>@109:0>]($666:int,$668:int,$670:int) = true
        P[<f_1030@82:1>]($637:int,$639:int) = true
        P[<<f_1030@82:2>@125:0>]($623:int,$625:int,$627:int) = (48 <= $623)
        P[<f_1030@88:1>]($649:int,$651:int) = true
        P[<<f_1030@88:2>@121:0>]($630:int,$632:int,$634:int) = (49 <= $630)
        P[<f_1030@94:1>]($661:int,$663:int) = true
        P[<<f_1030@94:2>@117:0>]($642:int,$644:int,$646:int) = (50 <= $642)
        P[<fail_1153@130:0>]($620:bool) = false
    end YhornInterface.solve(19136)[3] (0.091987 sec.)
    
  end RefTypeInfer.infer_etrs(13589)[2] (0.480927 sec.)
  refinement types:
    main_1149: X
    f_1030: v1:int -> v2:int -> (v3:{v3:int | (48 <= v1)} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:int -> (v3:{v3:int | (49 <= v1)} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:int -> (v3:{v3:int | (50 <= v1)} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    k_main_1146: var91:unit -> X
  abstraction types:
    main_1149: X
    f_1030: var107:int ->
            var108:int ->
            (var109:int[var109 -> (48 <= var107),
                        var109 -> (49 <= var107),
                        var109 -> (50 <= var107)] -> X) -> X
    br_f_1151: var124:bool -> var125:int -> var126:int -> (var127:int -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:bool -> (v2:unit -> X) -> X
    k_main_1146: var91:unit -> X
  
end AbsTypeInfer.refine(13588)[1] (0.489925 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int ->
            x_2:int[x_1 <= 51; x_1 <= 50; x_1 <= 1; x_1 <= 0; x_2 <= 50] ->
            (x_4:int[x_1 >= 50; x_1 >= 49; x_1 >= 48; x_1 >= 149; x_1 <= -99; x_4 <= 50] -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Filter option enabled.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 5)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int ->
            x_2:int[x_1 <= 51; x_1 <= 50; x_1 <= 1; x_1 <= 0; x_2 <= 50] ->
            (x_4:int[x_1 >= 50; x_1 >= 49; x_1 >= 48; x_1 >= 149; x_1 <= -99; x_4 <= 50] -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(5-1) Abstracting ... DONE!

(5-2) Checking HORS ... DONE!

Negative-predicate option enabled.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 6)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int ->
            x_2:int[x_1 <= 51; x_1 <= 50; x_1 <= 1; x_1 <= 0; x_2 <= 50] ->
            (x_4:int[x_1 >= 50; x_1 >= 49; x_1 >= 48; x_1 >= 149; x_1 <= -99; x_4 <= 50] -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(6-1) Abstracting ... DONE!

(6-2) Checking HORS ... DONE!

Set wp_max_num to 4.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 7)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int ->
            x_2:int[x_1 <= 51; x_1 <= 50; x_1 <= 1; x_1 <= 0; x_2 <= 50] ->
            (x_4:int[x_1 >= 50; x_1 >= 49; x_1 >= 48; x_1 >= 149; x_1 <= -99; x_4 <= 50] -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(7-1) Abstracting ... DONE!

(7-2) Checking HORS ... DONE!

Set wp_max_num to 5.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 8)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int ->
            x_2:int[x_1 <= 51; x_1 <= 50; x_1 <= 1; x_1 <= 0; x_2 <= 50] ->
            (x_4:int[x_1 >= 50; x_1 >= 49; x_1 >= 48; x_1 >= 149; x_1 <= -99; x_4 <= 50] -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(8-1) Abstracting ... DONE!

(8-2) Checking HORS ... DONE!

Set wp_max_num to 6.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 9)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int ->
            x_2:int[x_1 <= 51; x_1 <= 50; x_1 <= 1; x_1 <= 0; x_2 <= 50] ->
            (x_4:int[x_1 >= 50; x_1 >= 49; x_1 >= 48; x_1 >= 149; x_1 <= -99; x_4 <= 50] -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(9-1) Abstracting ... DONE!

(9-2) Checking HORS ... DONE!

Set wp_max_num to 7.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 10)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int ->
            x_2:int[x_1 <= 51; x_1 <= 50; x_1 <= 1; x_1 <= 0; x_2 <= 50] ->
            (x_4:int[x_1 >= 50; x_1 >= 49; x_1 >= 48; x_1 >= 149; x_1 <= -99; x_4 <= 50] -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(10-1) Abstracting ... DONE!

(10-2) Checking HORS ... DONE!

Set wp_max_num to 8.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 11)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int ->
            x_2:int[x_1 <= 51; x_1 <= 50; x_1 <= 1; x_1 <= 0; x_2 <= 50] ->
            (x_4:int[x_1 >= 50; x_1 >= 49; x_1 >= 48; x_1 >= 149; x_1 <= -99; x_4 <= 50] -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(11-1) Abstracting ... DONE!

(11-2) Checking HORS ... DONE!

Error trace::
  main_1149 ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [2/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [2/2] ... --> 
  f_1030 [2/2] ... --> 
  f_1150 [2/2] ... --> 
  fail_1153 ... --> fail -->
  ERROR!

Verification failed (new error path not found)
