MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn sigma_sum.ml

parsed::
 let rec sum_1030 n_1031 = if n_1031 <= 0 then
                             0
                           else
                             n_1031 + sum_1030 (n_1031 - 1) 
 in
 let rec sigma_1032 f_1033 n_1034 = if n_1034 <= 0 then
                                      0
                                    else
                                      f_1033 n_1034 + sigma_1032 f_1033 (n_1034 - 1) 
 in
 let main_1035 n_1036 = if sigma_1032 sum_1030 n_1036 >= n_1036 then
                          ()
                        else
                          {fail} () 
 in
   ()

set_target::
 let rec sum_1030 n_1031 = if n_1031 <= 0 then
                             0
                           else
                             n_1031 + sum_1030 (n_1031 - 1) 
 in
 let rec sigma_1032 f_1033 n_1034 = if n_1034 <= 0 then
                                      0
                                    else
                                      f_1033 n_1034 + sigma_1032 f_1033 (n_1034 - 1) 
 in
 let main_1035 n_1036 = if sigma_1032 sum_1030 n_1036 >= n_1036 then
                          ()
                        else
                          {fail} () 
 in
 let main_1073 = let arg1_1072 = rand_int () 
                 in
                   main_1035 arg1_1072 
 in
   ()

CPS::
 let rec sum_1030 (n_1031:int) (k_sum_1098:(int -> X)) =
   if n_1031 <= 0 then
     k_sum_1098 0
   else
     sum_1030 (n_1031 - 1) (fun x_1102 -> k_sum_1098 (n_1031 + x_1102)) 
 in
 let rec sigma_1032 (f_1033:(int -> ((int -> X) -> X))) (n_1034:int) (k_sigma_1145:(
   int -> X)) =
   if n_1034 <= 0 then
     k_sigma_1145 0
   else
     f_1033 n_1034 (fun x_1148 -> sigma_1032 f_1033 (n_1034 - 1) (fun x_1149 -> k_sigma_1145 (x_1148 + x_1149))) 
 in
 let main_1035 (n_1036:int) (k_main_1194:(unit -> X)) =
   sigma_1032 sum_1030 n_1036
     (fun x_1197 -> (if x_1197 >= n_1036 then
                       k_main_1194 ()
                     else
                       {|fail|} () k_main_1194)) 
 in
   rand_int_cps () (fun x_1232 -> main_1035 x_1232 (fun x_1229 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1257
  main_1257 -> (rand_int f_1262)
  f_1262 x_1232 -> (main_1035 x_1232 (f_1263 x_1232))
  f_1263 x_1232 x_1229 -> end
  f_main_1261 n_1036 k_main_1194 x_1197 when (x_1197 >= n_1036) -> (k_main_1194 ())
  f_main_1261 n_1036 k_main_1194 x_1197 when (not (x_1197 >= n_1036)) -> (fail_1264 true k_main_1194)
  f_sigma_1259 n_1034 f_1033 k_sigma_1145 x_1148 ->
      (sigma_1032 f_1033 (n_1034 - 1) (f_sigma_1260 n_1034 x_1148 k_sigma_1145))
  f_sigma_1260 n_1034 x_1148 k_sigma_1145 x_1149 -> (k_sigma_1145 (x_1148 + x_1149))
  f_sum_1258 n_1031 k_sum_1098 x_1102 -> (k_sum_1098 (n_1031 + x_1102))
  fail_1264 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1194 -> (sigma_1032 sum_1030 n_1036 (f_main_1261 n_1036 k_main_1194))
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (n_1034 <= 0) -> (k_sigma_1145 0)
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (not (n_1034 <= 0)) ->
      (f_1033 n_1034 (f_sigma_1259 n_1034 f_1033 k_sigma_1145))
  sum_1030 n_1031 k_sum_1098 when (n_1031 <= 0) -> (k_sum_1098 0)
  sum_1030 n_1031 k_sum_1098 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1258 n_1031 k_sum_1098))
Types:
  main_1257 : X
  fail_1264 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sigma_1032 : ((int -> (int -> X) -> X) -> int -> (int -> X) -> X)
  sum_1030 : (int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1257 ... --> 
  f_1262 ... --> 
  main_1035 ... --> 
  sigma_1032 [1/2] ... --> 
  f_main_1261 [2/2] ... --> 
  fail_1264 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(126)[1]
  program:
    main_1257  | true = ((Random.int 0) f_1262)
    f_1262 x_1232 | true = (main_1035 x_1232
                                      (f_1263 x_1232))
    f_1263 x_1232 x_1229 | true = end
    f_main_1261 n_1036 k_main_1194 x_1197 | (x_1197 >= n_1036) = (k_main_1194 ())
    f_main_1261 n_1036 k_main_1194 x_1197 | (not (x_1197 >= n_1036)) = (
    fail_1264 true
              k_main_1194)
    f_sigma_1259 n_1034 f_1033 k_sigma_1145 x_1148 | true = (sigma_1032
                                                               f_1033
                                                               (n_1034 - 1)
                                                               (f_sigma_1260 n_1034
                                                                    x_1148
                                                                    k_sigma_1145))
    f_sigma_1260 n_1034 x_1148 k_sigma_1145 x_1149 | true = (k_sigma_1145 (
                                                                    x_1148 + x_1149))
    f_sum_1258 n_1031 k_sum_1098 x_1102 | true = (k_sum_1098 (n_1031 + x_1102))
    fail_1264 b k | true = (fail ())
    main_1035 n_1036 k_main_1194 | true = (sigma_1032 sum_1030
                                                      n_1036
                                                      (f_main_1261 n_1036
                                                                   k_main_1194))
    sigma_1032 f_1033 n_1034 k_sigma_1145 | (n_1034 <= 0) = (k_sigma_1145 0)
    sigma_1032 f_1033 n_1034 k_sigma_1145 | (not (n_1034 <= 0)) = (f_1033
                                                                    n_1034
                                                                    (
                                                                    f_sigma_1259 n_1034
                                                                    f_1033
                                                                    k_sigma_1145))
    sum_1030 n_1031 k_sum_1098 | (n_1031 <= 0) = (k_sum_1098 0)
    sum_1030 n_1031 k_sum_1098 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1258 n_1031
                                                                    k_sum_1098))
    main_1257:X
    f_1262:int -> X
    f_1263:int -> unit -> X
    f_main_1261:int -> (unit -> X) -> int -> X
    f_sigma_1259:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_sigma_1260:int -> int -> (int -> X) -> int -> X
    f_sum_1258:int -> (int -> X) -> int -> X
    fail_1264:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    sigma_1032:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: f_1262,f_1263,f_main_1261,f_sigma_1259,f_sigma_1260,f_sum_1258,main_1035
  counterexample: 0:0:0:0:1:0
  error traces:
    [true.nop(<f_1262@4:0> = var2)
     [true.(<main_1035@6:0> = <f_1262@4:0>)
      [true.(<sigma_1032@8:1> = <main_1035@6:0>)
       [(<sigma_1032@8:1> <= 0).(<<sigma_1032@8:2>@11:0> = 0)
        [true.((<f_main_1261@13:0> = <main_1035@6:0>) && (<f_main_1261@13:2> = <<sigma_1032@8:2>@11:0>))
         [(not (<f_main_1261@13:2> >= <f_main_1261@13:0>)).(<fail_1264@16:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(127)[2]
    horn clauses:
      P[<fail_1264@16:0>](<fail_1264@16:0>:bool)|- bot
      
      P[<f_main_1261@13:2>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
      ((<f_main_1261@13:2> < <f_main_1261@13:0>) && <fail_1264@16:0>) |- P[<fail_1264@16:0>](
      <fail_1264@16:0>:bool)
      
      P[<main_1035@6:0>](<f_main_1261@13:0>:int),
      P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int)|- P[<f_main_1261@13:2>](
      <f_main_1261@13:0>:int,<f_main_1261@13:2>:int)
      
      P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
      |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
      
      P[<main_1035@6:0>](<sigma_1032@8:1>:int)|- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
      
      P[<f_1262@4:0>](<main_1035@6:0>:int)|- P[<main_1035@6:0>](<main_1035@6:0>:int)
      
      |- P[<f_1262@4:0>](<f_1262@4:0>:int)
    call trees:
      <main_1257@1>
        <f_1262@4>
          <main_1035@6>
            <sigma_1032@8>
            </<sigma_1032@8:2>@11>
            <f_main_1261@13>
              <fail_1264@16>
    inlined horn clauses:
      P[<fail_1264@16:0>](<fail_1264@16:0>:bool)|- bot
      
      P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
      ((<f_main_1261@13:2> < <f_main_1261@13:0>) && <fail_1264@16:0>) |- P[<fail_1264@16:0>](
      <fail_1264@16:0>:bool)
      
      P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
      |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
      
      |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
    begin ParamSubstInfer.infer(926)[3]
      
    end ParamSubstInfer.infer(926)[3] (0.016998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(928)[3]
      
    end RefTypeInfer.elim_coeffs(928)[3] (0.000000 sec.)
    begin YhornInterface.solve(1083)[3]
      begin HcSolver.solve_ub(1084)[4]
        encoded:
          P[<fail_1264@16:0>](<fail_1264@16:0>:int)|- bot
          
          P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
          ((<f_main_1261@13:2> < <f_main_1261@13:0>) && (<fail_1264@16:0> = 1))
          |- P[<fail_1264@16:0>](<fail_1264@16:0>:int)
          
          P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
          |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
          
          |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
        input to Yhorn:
          P[<fail_1264@16:0>](<fail_1264@16:0>:int)|- bot
          
          P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
          ((<f_main_1261@13:2> < <f_main_1261@13:0>) && (<fail_1264@16:0> = 1))
          |- P[<fail_1264@16:0>](<fail_1264@16:0>:int)
          
          P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<sigma_1032@8:1> <= 0) && (<<sigma_1032@8:2>@11:0> = 0))
          |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1264_sep_16_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-$8<0)) & (v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0($8,$7)) -> v_sep_fail_1264_sep_16_sep_0($6).
(($9=0) & ($10<=0)) & (v_sep_sigma_1032_sep_8_sep_1($10)) -> v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0($10,$9).
0=0 -> v_sep_sigma_1032_sep_8_sep_1($10).


v_sep_fail_1264_sep_16_sep_0: X
v_sep_sigma_1032_sep_8_sep_1: X
v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0: X
....
v_sep_fail_1264_sep_16_sep_0: X
v_sep_sigma_1032_sep_8_sep_1: X
v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0: X
...
v_sep_fail_1264_sep_16_sep_0: X
v_sep_sigma_1032_sep_8_sep_1: X
v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0: X
....
v_sep_fail_1264_sep_16_sep_0: X
v_sep_sigma_1032_sep_8_sep_1: X
v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0: X
....(0=0) & (v_sep_fail_1264_sep_16_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-$8<0)) & (v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0($8,$7)) -> v_sep_fail_1264_sep_16_sep_0($6).
(($9=0) & ($10<=0)) & (v_sep_sigma_1032_sep_8_sep_1($10)) -> v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0($10,$9).
0=0 -> v_sep_sigma_1032_sep_8_sep_1($10).

          |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
        solution:
          P[<fail_1264@16:0>]($11:bool) = false
          P[<sigma_1032@8:1>]($19:int) = true
          P[<<sigma_1032@8:2>@11:0>]($14:int,$16:int) = ($14 <= $16)
        
      end HcSolver.solve_ub(1084)[4] (0.012998 sec.)
      begin HcSolver.check_validity(1190)[4]
        input:
          P[<fail_1264@16:0>](<fail_1264@16:0>:bool)|- bot
          
          P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
          ((<f_main_1261@13:2> < <f_main_1261@13:0>) && <fail_1264@16:0>) |- P[<fail_1264@16:0>](
          <fail_1264@16:0>:bool)
          
          P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
          |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
          
          |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1190)[4] (0.002000 sec.)
      solution:
        P[<fail_1264@16:0>]($11:bool) = false
        P[<sigma_1032@8:1>]($19:int) = true
        P[<<sigma_1032@8:2>@11:0>]($14:int,$16:int) = ($14 <= $16)
    end YhornInterface.solve(1083)[3] (0.014998 sec.)
    
  end RefTypeInfer.infer_etrs(127)[2] (0.033996 sec.)
  refinement types:
    main_1257: X
    f_1262: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    sigma_1032: (v1:int -> (v2:int -> X) -> X) -> v5:int -> (v6:{v6:int | (v5 <= v6)} -> X) -> X
    f_main_1261: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1264: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1263: var15:int -> var14:unit -> X
    f_sigma_1259: var24:int -> (var23:int -> (var22:int -> X) -> X) -> (var19:int -> X) -> var17:int -> X
    f_sigma_1260: var30:int -> var29:int -> (var28:int -> X) -> var26:int -> X
    f_sum_1258: var35:int -> (var34:int -> X) -> var32:int -> X
    sum_1030: var39:int -> (var38:int -> X) -> X
  abstraction types:
    main_1257: X
    f_1262: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    sigma_1032: (v1:int -> (v2:int -> X) -> X) -> v5:int -> (v6:int[v6 -> (
                                                                    v5 <= v6)] -> X) -> X
    f_main_1261: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1264: v1:bool -> (v2:unit -> X) -> X
    f_1263: var15:int -> var14:unit -> X
    f_sigma_1259: var24:int -> (var23:int -> (var22:int -> X) -> X) -> (var19:int -> X) -> var17:int -> X
    f_sigma_1260: var30:int -> var29:int -> (var28:int -> X) -> var26:int -> X
    f_sum_1258: var35:int -> (var34:int -> X) -> var32:int -> X
    sum_1030: var39:int -> (var38:int -> X) -> X
  
end AbsTypeInfer.refine(126)[1] (0.036995 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1257
  main_1257 -> (rand_int f_1262)
  f_1262 x_1232 -> (main_1035 x_1232 (f_1263 x_1232))
  f_1263 x_1232 x_1229 -> end
  f_main_1261 n_1036 k_main_1194 x_1197 when (x_1197 >= n_1036) -> (k_main_1194 ())
  f_main_1261 n_1036 k_main_1194 x_1197 when (not (x_1197 >= n_1036)) -> (fail_1264 true k_main_1194)
  f_sigma_1259 n_1034 f_1033 k_sigma_1145 x_1148 ->
      (sigma_1032 f_1033 (n_1034 - 1) (f_sigma_1260 n_1034 x_1148 k_sigma_1145))
  f_sigma_1260 n_1034 x_1148 k_sigma_1145 x_1149 -> (k_sigma_1145 (x_1148 + x_1149))
  f_sum_1258 n_1031 k_sum_1098 x_1102 -> (k_sum_1098 (n_1031 + x_1102))
  fail_1264 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1194 -> (sigma_1032 sum_1030 n_1036 (f_main_1261 n_1036 k_main_1194))
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (n_1034 <= 0) -> (k_sigma_1145 0)
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (not (n_1034 <= 0)) ->
      (f_1033 n_1034 (f_sigma_1259 n_1034 f_1033 k_sigma_1145))
  sum_1030 n_1031 k_sum_1098 when (n_1031 <= 0) -> (k_sum_1098 0)
  sum_1030 n_1031 k_sum_1098 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1258 n_1031 k_sum_1098))
Types:
  main_1257 : X
  fail_1264 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sigma_1032 : ((int -> (int -> X) -> X) -> x_7:int -> (x_9:int[x_7 <= x_9] -> X) -> X)
  sum_1030 : (int -> (int -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1257 ... --> 
  f_1262 ... --> 
  main_1035 ... --> 
  sigma_1032 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sigma_1259 ... --> 
  sigma_1032 [1/2] ... --> 
  f_sigma_1260 ... --> 
  f_main_1261 [2/2] ... --> 
  fail_1264 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(1641)[1]
  program:
    main_1257  | true = ((Random.int 0) f_1262)
    f_1262 x_1232 | true = (main_1035 x_1232
                                      (f_1263 x_1232))
    f_1263 x_1232 x_1229 | true = end
    f_main_1261 n_1036 k_main_1194 x_1197 | (x_1197 >= n_1036) = (k_main_1194 ())
    f_main_1261 n_1036 k_main_1194 x_1197 | (not (x_1197 >= n_1036)) = (
    fail_1264 true
              k_main_1194)
    f_sigma_1259 n_1034 f_1033 k_sigma_1145 x_1148 | true = (sigma_1032
                                                               f_1033
                                                               (n_1034 - 1)
                                                               (f_sigma_1260 n_1034
                                                                    x_1148
                                                                    k_sigma_1145))
    f_sigma_1260 n_1034 x_1148 k_sigma_1145 x_1149 | true = (k_sigma_1145 (
                                                                    x_1148 + x_1149))
    f_sum_1258 n_1031 k_sum_1098 x_1102 | true = (k_sum_1098 (n_1031 + x_1102))
    fail_1264 b k | true = (fail ())
    main_1035 n_1036 k_main_1194 | true = (sigma_1032 sum_1030
                                                      n_1036
                                                      (f_main_1261 n_1036
                                                                   k_main_1194))
    sigma_1032 f_1033 n_1034 k_sigma_1145 | (n_1034 <= 0) = (k_sigma_1145 0)
    sigma_1032 f_1033 n_1034 k_sigma_1145 | (not (n_1034 <= 0)) = (f_1033
                                                                    n_1034
                                                                    (
                                                                    f_sigma_1259 n_1034
                                                                    f_1033
                                                                    k_sigma_1145))
    sum_1030 n_1031 k_sum_1098 | (n_1031 <= 0) = (k_sum_1098 0)
    sum_1030 n_1031 k_sum_1098 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1258 n_1031
                                                                    k_sum_1098))
    main_1257:X
    f_1262:int -> X
    f_1263:int -> unit -> X
    f_main_1261:int -> (unit -> X) -> int -> X
    f_sigma_1259:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_sigma_1260:int -> int -> (int -> X) -> int -> X
    f_sum_1258:int -> (int -> X) -> int -> X
    fail_1264:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    sigma_1032:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: f_1262,f_1263,f_main_1261,f_sigma_1259,f_sigma_1260,f_sum_1258,main_1035
  counterexample: 0:0:0:1:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1262@22:0> = var40)
     [true.(<main_1035@24:0> = <f_1262@22:0>)
      [true.(<sigma_1032@26:1> = <main_1035@24:0>)
       [(not (<sigma_1032@26:1> <= 0)).(<<sigma_1032@26:0>@29:0> = <sigma_1032@26:1>)
        [true.(<sum_1030@31:0> = <<sigma_1032@26:0>@29:0>)
         [(<sum_1030@31:0> <= 0).(<<sum_1030@31:1>@34:0> = 0)
          [true.(<<<sigma_1032@26:0>@29:1>@36:0> = <<sum_1030@31:1>@34:0>)
           [true.((<f_sigma_1259@38:0> = <sigma_1032@26:1>) && (<f_sigma_1259@38:3> = <<<sigma_1032@26:0>@29:1>@36:0>))
            [true.(<sigma_1032@40:1> = (<f_sigma_1259@38:0> - 1))
             [(<sigma_1032@40:1> <= 0).(<<sigma_1032@40:2>@43:0> = 0)
              [true.
               ((<f_sigma_1260@45:0> = <f_sigma_1259@38:0>) &&
                ((<f_sigma_1260@45:1> = <f_sigma_1259@38:3>) && (<f_sigma_1260@45:3> = <<sigma_1032@40:2>@43:0>)))
               [true.(<<f_sigma_1260@45:2>@47:0> = (<f_sigma_1260@45:1> + <f_sigma_1260@45:3>))
                [true.(<<f_sigma_1259@38:2>@49:0> = <<f_sigma_1260@45:2>@47:0>)
                 [true.(<<sigma_1032@26:2>@51:0> = <<f_sigma_1259@38:2>@49:0>)
                  [true.((<f_main_1261@53:0> = <main_1035@24:0>) && (<f_main_1261@53:2> = <<sigma_1032@26:2>@51:0>))
                   [(not (<f_main_1261@53:2> >= <f_main_1261@53:0>)).(<fail_1264@56:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(1642)[2]
    horn clauses:
      P[<fail_1264@56:0>](<fail_1264@56:0>:bool)|- bot
      
      P[<f_main_1261@53:2>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int),
      ((<f_main_1261@53:2> < <f_main_1261@53:0>) && <fail_1264@56:0>) |- P[<fail_1264@56:0>](
      <fail_1264@56:0>:bool)
      
      P[<main_1035@24:0>](<f_main_1261@53:0>:int),
      P[<<sigma_1032@26:2>@51:0>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int)|- P[<f_main_1261@53:2>](
      <f_main_1261@53:0>:int,<f_main_1261@53:2>:int)
      
      P[<sigma_1032@26:1>](<sigma_1032@26:1>:int),
      P[<<f_sigma_1259@38:2>@49:0>](<sigma_1032@26:1>:int,<<sigma_1032@26:2>@51:0>:int), (
      <sigma_1032@26:1> > 0) |- P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,
                                                            <<sigma_1032@26:2>@51:0>:int)
      
      P[<f_sigma_1259@38:3>](<f_sigma_1259@38:0>:int,<f_sigma_1260@45:1>:int),
      P[<<f_sigma_1260@45:2>@47:0>](<f_sigma_1259@38:0>:int,<f_sigma_1260@45:1>:int,<<f_sigma_1259@38:2>@49:0>:int)|- P[<<f_sigma_1259@38:2>@49:0>](
      <f_sigma_1259@38:0>:int,<<f_sigma_1259@38:2>@49:0>:int)
      
      P[<f_sigma_1260@45:3>](<f_sigma_1260@45:0>:int,<f_sigma_1260@45:1>:int,(
                             <<f_sigma_1260@45:2>@47:0> + (-1 * <f_sigma_1260@45:1>)):int)|- P[<<f_sigma_1260@45:2>@47:0>](
      <f_sigma_1260@45:0>:int,<f_sigma_1260@45:1>:int,<<f_sigma_1260@45:2>@47:0>:int)
      
      P[<f_sigma_1259@38:3>](<f_sigma_1260@45:0>:int,<f_sigma_1260@45:1>:int),
      P[<<sigma_1032@40:2>@43:0>]((-1 + <f_sigma_1260@45:0>):int,<f_sigma_1260@45:3>:int)|- P[<f_sigma_1260@45:3>](
      <f_sigma_1260@45:0>:int,<f_sigma_1260@45:1>:int,<f_sigma_1260@45:3>:int)
      
      P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), ((<<sigma_1032@40:2>@43:0> = 0) && (<sigma_1032@40:1> <= 0))
      |- P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int)
      
      P[<f_sigma_1259@38:3>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int)|- P[<sigma_1032@40:1>](
      <sigma_1032@40:1>:int)
      
      P[<sigma_1032@26:1>](<f_sigma_1259@38:0>:int),
      P[<<<sigma_1032@26:0>@29:1>@36:0>](<f_sigma_1259@38:0>:int,<f_sigma_1259@38:3>:int), (
      <f_sigma_1259@38:0> > 0) |- P[<f_sigma_1259@38:3>](<f_sigma_1259@38:0>:int,
                                                         <f_sigma_1259@38:3>:int)
      
      P[<main_1035@24:0>](<sigma_1032@26:1>:int),
      P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
      <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
      
      P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
      |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
      
      P[<main_1035@24:0>](<sigma_1032@26:1>:int),
      P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](
      <sum_1030@31:0>:int)
      
      P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
      |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      
      P[<main_1035@24:0>](<sigma_1032@26:1>:int)|- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
      
      P[<f_1262@22:0>](<main_1035@24:0>:int)|- P[<main_1035@24:0>](<main_1035@24:0>:int)
      
      |- P[<f_1262@22:0>](<f_1262@22:0>:int)
    call trees:
      <main_1257@19>
        <f_1262@22>
          <main_1035@24>
            <sigma_1032@26>
            </<sigma_1032@26:0>@29>
            <sum_1030@31>
            </<sum_1030@31:1>@34>
            <<<sigma_1032@26:0>@29:1>@36>
              <f_sigma_1259@38>
                <sigma_1032@40>
                </<sigma_1032@40:2>@43>
                <f_sigma_1260@45>
                </<f_sigma_1260@45:2>@47>
              </<f_sigma_1259@38:2>@49>
            </<sigma_1032@26:2>@51>
            <f_main_1261@53>
              <fail_1264@56>
    inlined horn clauses:
      P[<fail_1264@56:0>](<fail_1264@56:0>:bool)|- bot
      
      P[<<sigma_1032@26:2>@51:0>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int),
      ((<f_main_1261@53:2> < <f_main_1261@53:0>) && <fail_1264@56:0>) |- P[<fail_1264@56:0>](
      <fail_1264@56:0>:bool)
      
      P[<sigma_1032@26:1>](<sigma_1032@26:1>:int),
      P[<<<sigma_1032@26:0>@29:1>@36:0>](<sigma_1032@26:1>:int,var41:int),
      P[<<sigma_1032@40:2>@43:0>]((-1 + <sigma_1032@26:1>):int,(<<sigma_1032@26:2>@51:0> + (-1 * var41)):int),
      (<sigma_1032@26:1> > 0) |- P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,
                                                             <<sigma_1032@26:2>@51:0>:int)
      
      P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), ((<<sigma_1032@40:2>@43:0> = 0) && (<sigma_1032@40:1> <= 0))
      |- P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int)
      
      P[<sigma_1032@26:1>]((1 + <sigma_1032@40:1>):int),
      P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
      ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
      
      P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
      <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
      
      P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
      |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
      
      P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
      
      P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
      |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      
      |- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
    begin ParamSubstInfer.infer(3436)[3]
      
    end ParamSubstInfer.infer(3436)[3] (0.032995 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(3438)[3]
      
    end RefTypeInfer.elim_coeffs(3438)[3] (0.000000 sec.)
    begin YhornInterface.solve(3761)[3]
      begin HcSolver.solve_ub(3762)[4]
        encoded:
          P[<fail_1264@56:0>](<fail_1264@56:0>:int)|- bot
          
          P[<<sigma_1032@26:2>@51:0>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int),
          ((<f_main_1261@53:2> < <f_main_1261@53:0>) && (<fail_1264@56:0> = 1))
          |- P[<fail_1264@56:0>](<fail_1264@56:0>:int)
          
          P[<sigma_1032@26:1>](<sigma_1032@26:1>:int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>](<sigma_1032@26:1>:int,var41:int),
          P[<<sigma_1032@40:2>@43:0>]((-1 + <sigma_1032@26:1>):int,(<<sigma_1032@26:2>@51:0> + (-1 * var41)):int),
          (<sigma_1032@26:1> > 0) |- P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,
                                                                 <<sigma_1032@26:2>@51:0>:int)
          
          P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), ((<<sigma_1032@40:2>@43:0> = 0) && (<sigma_1032@40:1> <= 0))
          |- P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int)
          
          P[<sigma_1032@26:1>]((1 + <sigma_1032@40:1>):int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
          ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
          
          P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
          <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
          
          P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
          |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
          
          P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
          
          P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
          |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
          
          |- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
        input to Yhorn:
          P[<fail_1264@56:0>](<fail_1264@56:0>:int)|- bot
          
          P[<<sigma_1032@26:2>@51:0>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int),
          ((<f_main_1261@53:2> < <f_main_1261@53:0>) && (<fail_1264@56:0> = 1))
          |- P[<fail_1264@56:0>](<fail_1264@56:0>:int)
          
          P[<sigma_1032@26:1>](<sigma_1032@26:1>:int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>](<sigma_1032@26:1>:int,var41:int),
          P[<<sigma_1032@40:2>@43:0>](var42:int,var43:int),
          (((var43 + var41) = <<sigma_1032@26:2>@51:0>) &&
           (((1 + var42) = <sigma_1032@26:1>) && (<sigma_1032@26:1> > 0)))
          |- P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,<<sigma_1032@26:2>@51:0>:int)
          
          P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), ((<sigma_1032@40:1> <= 0) && (<<sigma_1032@40:2>@43:0> = 0))
          |- P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int)
          
          P[<sigma_1032@26:1>](var44:int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>](var45:int,<f_sigma_1259@38:3>:int),
          ((var45 = (1 + <sigma_1032@40:1>)) && ((var44 = (1 + <sigma_1032@40:1>)) && ((1 + <sigma_1032@40:1>) > 0)))
          |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
          
          P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
          <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
          
          P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<sum_1030@31:0> <= 0) && (<<sum_1030@31:1>@34:0> = 0))
          |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
          
          P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
          
          P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
          |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1264_sep_56_sep_0($74)) -> 1=0.
(($74-1=0) & ($75-$76<0)) & (v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0($76,$75)) -> v_sep_fail_1264_sep_56_sep_0($74).
(($77>0) & (-$77+$78+1=0) & ($79+$80-$81=0)) & (v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0($78,$79)) & (v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0($77,$80)) & (v_sep_sigma_1032_sep_26_sep_1($77)) -> v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0($77,$81).
(($82=0) & ($83<=0)) & (v_sep_sigma_1032_sep_40_sep_1($83)) -> v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0($83,$82).
(($83+1>0) & (-$83+$84-1=0) & (-$83+$85-1=0)) & (v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0($85,$86)) & (v_sep_sigma_1032_sep_26_sep_1($84)) -> v_sep_sigma_1032_sep_40_sep_1($83).
(0=0) & (v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0($87,$88)) -> v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0($87,$88).
(($89=0) & ($90<=0)) & (v_sep_sum_1030_sep_31_sep_0($90)) -> v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0($90,$89).
(0=0) & (v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0($90)) -> v_sep_sum_1030_sep_31_sep_0($90).
($87>0) & (v_sep_sigma_1032_sep_26_sep_1($87)) -> v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0($87).
0=0 -> v_sep_sigma_1032_sep_26_sep_1($77).


v_sep_fail_1264_sep_56_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0: X
v_sep_sigma_1032_sep_26_sep_1: X
v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0: X
v_sep_sigma_1032_sep_40_sep_1: X
v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0: X
v_sep_sum_1030_sep_31_sep_0: X
v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0: X
.............
v_sep_fail_1264_sep_56_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0: X
v_sep_sigma_1032_sep_26_sep_1: X
v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0: X
v_sep_sigma_1032_sep_40_sep_1: X
v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0: X
v_sep_sum_1030_sep_31_sep_0: X
v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0: X
...
v_sep_fail_1264_sep_56_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0: X
v_sep_sigma_1032_sep_26_sep_1: X
v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0: X
v_sep_sigma_1032_sep_40_sep_1: X
v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0: X
v_sep_sum_1030_sep_31_sep_0: X
v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0: X
......
v_sep_fail_1264_sep_56_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0: X
v_sep_sigma_1032_sep_26_sep_1: X
v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0: X
v_sep_sigma_1032_sep_40_sep_1: X
v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0: X
v_sep_sum_1030_sep_31_sep_0: X
v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0: X
........
v_sep_fail_1264_sep_56_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0: X
v_sep_sigma_1032_sep_26_sep_1: X
v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0: X
v_sep_sigma_1032_sep_40_sep_1: X
v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0: X
v_sep_sum_1030_sep_31_sep_0: X
v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0: X
...........
v_sep_fail_1264_sep_56_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0: X
v_sep_sigma_1032_sep_26_sep_1: X
v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0: X
v_sep_sigma_1032_sep_40_sep_1: X
v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0: X
v_sep_sum_1030_sep_31_sep_0: X
v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0: X
............
v_sep_fail_1264_sep_56_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0: X
v_sep_sigma_1032_sep_26_sep_1: X
v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0: X
v_sep_sigma_1032_sep_40_sep_1: X
v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0: X
v_sep_sum_1030_sep_31_sep_0: X
v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0: X
.............(0=0) & (v_sep_fail_1264_sep_56_sep_0($74)) -> 1=0.
(($74-1=0) & ($75-$76<0)) & (v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0($76,$75)) -> v_sep_fail_1264_sep_56_sep_0($74).
(($77>0) & (-$77+$78+1=0) & ($79+$80-$81=0)) & (v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0($78,$79)) & (v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0($77,$80)) & (v_sep_sigma_1032_sep_26_sep_1($77)) -> v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0($77,$81).
(($82=0) & ($83<=0)) & (v_sep_sigma_1032_sep_40_sep_1($83)) -> v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0($83,$82).
(($83+1>0) & (-$83+$84-1=0) & (-$83+$85-1=0)) & (v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0($85,$86)) & (v_sep_sigma_1032_sep_26_sep_1($84)) -> v_sep_sigma_1032_sep_40_sep_1($83).
(0=0) & (v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0($87,$88)) -> v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0($87,$88).
(($89=0) & ($90<=0)) & (v_sep_sum_1030_sep_31_sep_0($90)) -> v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0($90,$89).
(0=0) & (v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0($90)) -> v_sep_sum_1030_sep_31_sep_0($90).
($87>0) & (v_sep_sigma_1032_sep_26_sep_1($87)) -> v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0($87).
0=0 -> v_sep_sigma_1032_sep_26_sep_1($77).

          |- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
        solution:
          P[<fail_1264@56:0>]($91:bool) = false
          P[<<sigma_1032@26:0>@29:0>]($123:int) = (1 <= $123)
          P[<<<sigma_1032@26:0>@29:1>@36:0>]($104:int,$106:int) = false
          P[<sigma_1032@26:1>]($109:int) = true
          P[<<sigma_1032@26:2>@51:0>]($94:int,$96:int) = false
          P[<sigma_1032@40:1>]($112:int) = false
          P[<<sigma_1032@40:2>@43:0>]($99:int,$101:int) = false
          P[<sum_1030@31:0>]($120:int) = (1 <= $120)
          P[<<sum_1030@31:1>@34:0>]($115:int,$117:int) = false
        
      end HcSolver.solve_ub(3762)[4] (0.038994 sec.)
      begin HcSolver.check_validity(4143)[4]
        input:
          P[<fail_1264@56:0>](<fail_1264@56:0>:bool)|- bot
          
          P[<<sigma_1032@26:2>@51:0>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int),
          ((<f_main_1261@53:2> < <f_main_1261@53:0>) && <fail_1264@56:0>) |- P[<fail_1264@56:0>](
          <fail_1264@56:0>:bool)
          
          P[<sigma_1032@26:1>](<sigma_1032@26:1>:int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>](<sigma_1032@26:1>:int,var41:int),
          P[<<sigma_1032@40:2>@43:0>]((-1 + <sigma_1032@26:1>):int,(<<sigma_1032@26:2>@51:0> + (-1 * var41)):int),
          (<sigma_1032@26:1> > 0) |- P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,
                                                                 <<sigma_1032@26:2>@51:0>:int)
          
          P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), ((<<sigma_1032@40:2>@43:0> = 0) && (<sigma_1032@40:1> <= 0))
          |- P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int)
          
          P[<sigma_1032@26:1>]((1 + <sigma_1032@40:1>):int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
          ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
          
          P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
          <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
          
          P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
          |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
          
          P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
          
          P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
          |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
          
          |- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(4143)[4] (0.003000 sec.)
      solution:
        P[<fail_1264@56:0>]($91:bool) = false
        P[<<sigma_1032@26:0>@29:0>]($123:int) = (1 <= $123)
        P[<<<sigma_1032@26:0>@29:1>@36:0>]($104:int,$106:int) = false
        P[<sigma_1032@26:1>]($109:int) = true
        P[<<sigma_1032@26:2>@51:0>]($94:int,$96:int) = false
        P[<sigma_1032@40:1>]($112:int) = false
        P[<<sigma_1032@40:2>@43:0>]($99:int,$101:int) = false
        P[<sum_1030@31:0>]($120:int) = (1 <= $120)
        P[<<sum_1030@31:1>@34:0>]($115:int,$117:int) = false
    end YhornInterface.solve(3761)[3] (0.041994 sec.)
    
  end RefTypeInfer.infer_etrs(1642)[2] (0.084987 sec.)
  refinement types:
    main_1257: X
    f_1262: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    sigma_1032: (v1:{v1:int | (1 <= v1)} -> (v2:{v2:int | false} -> X) -> X) ->
                v5:int -> (v6:{v6:int | false} -> X) -> X
    sum_1030: v1:{v1:int | (1 <= v1)} -> (v2:{v2:int | false} -> X) -> X
    f_sigma_1259: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    sigma_1032: (v1:int -> (v2:int -> X) -> X) -> v5:{v5:int | false} -> (v6:{v6:int | false} -> X) -> X
    f_sigma_1260: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1261: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1264: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1263: var62:int -> var61:unit -> X
    f_sum_1258: var67:int -> (var66:int -> X) -> var64:int -> X
  abstraction types:
    main_1257: X
    f_1262: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    sigma_1032: (var68:int[var68 -> (1 <= var68)] -> (var69:int -> X) -> X) -> var72:int -> (var73:int -> X) -> X
    sum_1030: v1:int[v1 -> (1 <= v1)] -> (v2:int -> X) -> X
    f_sigma_1259: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    f_sigma_1260: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1261: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1264: v1:bool -> (v2:unit -> X) -> X
    f_1263: var62:int -> var61:unit -> X
    f_sum_1258: var67:int -> (var66:int -> X) -> var64:int -> X
  
end AbsTypeInfer.refine(1641)[1] (0.087987 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1257
  main_1257 -> (rand_int f_1262)
  f_1262 x_1232 -> (main_1035 x_1232 (f_1263 x_1232))
  f_1263 x_1232 x_1229 -> end
  f_main_1261 n_1036 k_main_1194 x_1197 when (x_1197 >= n_1036) -> (k_main_1194 ())
  f_main_1261 n_1036 k_main_1194 x_1197 when (not (x_1197 >= n_1036)) -> (fail_1264 true k_main_1194)
  f_sigma_1259 n_1034 f_1033 k_sigma_1145 x_1148 ->
      (sigma_1032 f_1033 (n_1034 - 1) (f_sigma_1260 n_1034 x_1148 k_sigma_1145))
  f_sigma_1260 n_1034 x_1148 k_sigma_1145 x_1149 -> (k_sigma_1145 (x_1148 + x_1149))
  f_sum_1258 n_1031 k_sum_1098 x_1102 -> (k_sum_1098 (n_1031 + x_1102))
  fail_1264 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1194 -> (sigma_1032 sum_1030 n_1036 (f_main_1261 n_1036 k_main_1194))
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (n_1034 <= 0) -> (k_sigma_1145 0)
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (not (n_1034 <= 0)) ->
      (f_1033 n_1034 (f_sigma_1259 n_1034 f_1033 k_sigma_1145))
  sum_1030 n_1031 k_sum_1098 when (n_1031 <= 0) -> (k_sum_1098 0)
  sum_1030 n_1031 k_sum_1098 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1258 n_1031 k_sum_1098))
Types:
  main_1257 : X
  fail_1264 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sigma_1032 : ((x_2:int[x_2 >= 1] -> (int -> X) -> X) -> x_7:int -> (x_9:int[x_7 <= x_9] -> X) -> X)
  sum_1030 : (x_1:int[x_1 >= 1] -> (int -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1257 ... --> 
  f_1262 ... --> 
  main_1035 ... --> 
  sigma_1032 [2/2] ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sum_1258 ... --> 
  f_sigma_1259 ... --> 
  sigma_1032 [1/2] ... --> 
  f_sigma_1260 ... --> 
  f_main_1261 [2/2] ... --> 
  fail_1264 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 0; 0; 0; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(5023)[1]
  program:
    main_1257  | true = ((Random.int 0) f_1262)
    f_1262 x_1232 | true = (main_1035 x_1232
                                      (f_1263 x_1232))
    f_1263 x_1232 x_1229 | true = end
    f_main_1261 n_1036 k_main_1194 x_1197 | (x_1197 >= n_1036) = (k_main_1194 ())
    f_main_1261 n_1036 k_main_1194 x_1197 | (not (x_1197 >= n_1036)) = (
    fail_1264 true
              k_main_1194)
    f_sigma_1259 n_1034 f_1033 k_sigma_1145 x_1148 | true = (sigma_1032
                                                               f_1033
                                                               (n_1034 - 1)
                                                               (f_sigma_1260 n_1034
                                                                    x_1148
                                                                    k_sigma_1145))
    f_sigma_1260 n_1034 x_1148 k_sigma_1145 x_1149 | true = (k_sigma_1145 (
                                                                    x_1148 + x_1149))
    f_sum_1258 n_1031 k_sum_1098 x_1102 | true = (k_sum_1098 (n_1031 + x_1102))
    fail_1264 b k | true = (fail ())
    main_1035 n_1036 k_main_1194 | true = (sigma_1032 sum_1030
                                                      n_1036
                                                      (f_main_1261 n_1036
                                                                   k_main_1194))
    sigma_1032 f_1033 n_1034 k_sigma_1145 | (n_1034 <= 0) = (k_sigma_1145 0)
    sigma_1032 f_1033 n_1034 k_sigma_1145 | (not (n_1034 <= 0)) = (f_1033
                                                                    n_1034
                                                                    (
                                                                    f_sigma_1259 n_1034
                                                                    f_1033
                                                                    k_sigma_1145))
    sum_1030 n_1031 k_sum_1098 | (n_1031 <= 0) = (k_sum_1098 0)
    sum_1030 n_1031 k_sum_1098 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1258 n_1031
                                                                    k_sum_1098))
    main_1257:X
    f_1262:int -> X
    f_1263:int -> unit -> X
    f_main_1261:int -> (unit -> X) -> int -> X
    f_sigma_1259:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_sigma_1260:int -> int -> (int -> X) -> int -> X
    f_sum_1258:int -> (int -> X) -> int -> X
    fail_1264:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    sigma_1032:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: f_1262,f_1263,f_main_1261,f_sigma_1259,f_sigma_1260,f_sum_1258,main_1035
  counterexample: 0:0:0:1:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1262@62:0> = var76)
     [true.(<main_1035@64:0> = <f_1262@62:0>)
      [true.(<sigma_1032@66:1> = <main_1035@64:0>)
       [(not (<sigma_1032@66:1> <= 0)).(<<sigma_1032@66:0>@69:0> = <sigma_1032@66:1>)
        [true.(<sum_1030@71:0> = <<sigma_1032@66:0>@69:0>)
         [(not (<sum_1030@71:0> <= 0)).(<sum_1030@74:0> = (<sum_1030@71:0> - 1))
          [(<sum_1030@74:0> <= 0).(<<sum_1030@74:1>@77:0> = 0)
           [true.((<f_sum_1258@79:0> = <sum_1030@71:0>) && (<f_sum_1258@79:2> = <<sum_1030@74:1>@77:0>))
            [true.(<<f_sum_1258@79:1>@81:0> = (<f_sum_1258@79:0> + <f_sum_1258@79:2>))
             [true.(<<sum_1030@71:1>@83:0> = <<f_sum_1258@79:1>@81:0>)
              [true.(<<<sigma_1032@66:0>@69:1>@85:0> = <<sum_1030@71:1>@83:0>)
               [true.
                ((<f_sigma_1259@87:0> = <sigma_1032@66:1>) && (<f_sigma_1259@87:3> = <<<sigma_1032@66:0>@69:1>@85:0>))
                [true.(<sigma_1032@89:1> = (<f_sigma_1259@87:0> - 1))
                 [(<sigma_1032@89:1> <= 0).(<<sigma_1032@89:2>@92:0> = 0)
                  [true.
                   ((<f_sigma_1260@94:0> = <f_sigma_1259@87:0>) &&
                    ((<f_sigma_1260@94:1> = <f_sigma_1259@87:3>) && (<f_sigma_1260@94:3> = <<sigma_1032@89:2>@92:0>)))
                   [true.(<<f_sigma_1260@94:2>@96:0> = (<f_sigma_1260@94:1> + <f_sigma_1260@94:3>))
                    [true.(<<f_sigma_1259@87:2>@98:0> = <<f_sigma_1260@94:2>@96:0>)
                     [true.(<<sigma_1032@66:2>@100:0> = <<f_sigma_1259@87:2>@98:0>)
                      [true.
                       ((<f_main_1261@102:0> = <main_1035@64:0>) && (<f_main_1261@102:2> = <<sigma_1032@66:2>@100:0>))
                       [(not (<f_main_1261@102:2> >= <f_main_1261@102:0>)).(<fail_1264@105:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(5024)[2]
    horn clauses:
      P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
      
      P[<f_main_1261@102:2>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int),
      ((<f_main_1261@102:2> < <f_main_1261@102:0>) && <fail_1264@105:0>)
      |- P[<fail_1264@105:0>](<fail_1264@105:0>:bool)
      
      P[<main_1035@64:0>](<f_main_1261@102:0>:int),
      P[<<sigma_1032@66:2>@100:0>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int)|- P[<f_main_1261@102:2>](
      <f_main_1261@102:0>:int,<f_main_1261@102:2>:int)
      
      P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
      P[<<f_sigma_1259@87:2>@98:0>](<sigma_1032@66:1>:int,<<sigma_1032@66:2>@100:0>:int), (
      <sigma_1032@66:1> > 0) |- P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,
                                                             <<sigma_1032@66:2>@100:0>:int)
      
      P[<f_sigma_1259@87:3>](<f_sigma_1259@87:0>:int,<f_sigma_1260@94:1>:int),
      P[<<f_sigma_1260@94:2>@96:0>](<f_sigma_1259@87:0>:int,<f_sigma_1260@94:1>:int,<<f_sigma_1259@87:2>@98:0>:int)|- P[<<f_sigma_1259@87:2>@98:0>](
      <f_sigma_1259@87:0>:int,<<f_sigma_1259@87:2>@98:0>:int)
      
      P[<f_sigma_1260@94:3>](<f_sigma_1260@94:0>:int,<f_sigma_1260@94:1>:int,(
                             <<f_sigma_1260@94:2>@96:0> + (-1 * <f_sigma_1260@94:1>)):int)|- P[<<f_sigma_1260@94:2>@96:0>](
      <f_sigma_1260@94:0>:int,<f_sigma_1260@94:1>:int,<<f_sigma_1260@94:2>@96:0>:int)
      
      P[<f_sigma_1259@87:3>](<f_sigma_1260@94:0>:int,<f_sigma_1260@94:1>:int),
      P[<<sigma_1032@89:2>@92:0>]((-1 + <f_sigma_1260@94:0>):int,<f_sigma_1260@94:3>:int)|- P[<f_sigma_1260@94:3>](
      <f_sigma_1260@94:0>:int,<f_sigma_1260@94:1>:int,<f_sigma_1260@94:3>:int)
      
      P[<sigma_1032@89:1>](<sigma_1032@89:1>:int), ((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> <= 0))
      |- P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int)
      
      P[<f_sigma_1259@87:3>]((1 + <sigma_1032@89:1>):int,<f_sigma_1259@87:3>:int)|- P[<sigma_1032@89:1>](
      <sigma_1032@89:1>:int)
      
      P[<sigma_1032@66:1>](<f_sigma_1259@87:0>:int),
      P[<<<sigma_1032@66:0>@69:1>@85:0>](<f_sigma_1259@87:0>:int,<f_sigma_1259@87:3>:int), (
      <f_sigma_1259@87:0> > 0) |- P[<f_sigma_1259@87:3>](<f_sigma_1259@87:0>:int,
                                                         <f_sigma_1259@87:3>:int)
      
      P[<main_1035@64:0>](<sigma_1032@66:1>:int),
      P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
      <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
      
      P[<sum_1030@71:0>](<sum_1030@71:0>:int),
      P[<<f_sum_1258@79:1>@81:0>](<sum_1030@71:0>:int,<<sum_1030@71:1>@83:0>:int), (
      <sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                        <<sum_1030@71:1>@83:0>:int)
      
      P[<f_sum_1258@79:2>](<f_sum_1258@79:0>:int,(<<f_sum_1258@79:1>@81:0> + (-1 * <f_sum_1258@79:0>)):int)|- P[<<f_sum_1258@79:1>@81:0>](
      <f_sum_1258@79:0>:int,<<f_sum_1258@79:1>@81:0>:int)
      
      P[<sum_1030@71:0>](<f_sum_1258@79:0>:int),
      P[<<sum_1030@74:1>@77:0>]((-1 + <f_sum_1258@79:0>):int,<f_sum_1258@79:2>:int), (
      <f_sum_1258@79:0> > 0) |- P[<f_sum_1258@79:2>](<f_sum_1258@79:0>:int,
                                                     <f_sum_1258@79:2>:int)
      
      P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
      |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
      
      P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
      |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
      
      P[<main_1035@64:0>](<sigma_1032@66:1>:int),
      P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](
      <sum_1030@71:0>:int)
      
      P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
      |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
      
      P[<main_1035@64:0>](<sigma_1032@66:1>:int)|- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
      
      P[<f_1262@62:0>](<main_1035@64:0>:int)|- P[<main_1035@64:0>](<main_1035@64:0>:int)
      
      |- P[<f_1262@62:0>](<f_1262@62:0>:int)
    call trees:
      <main_1257@59>
        <f_1262@62>
          <main_1035@64>
            <sigma_1032@66>
            </<sigma_1032@66:0>@69>
            <sum_1030@71>
              <sum_1030@74>
              </<sum_1030@74:1>@77>
              <f_sum_1258@79>
              </<f_sum_1258@79:1>@81>
            </<sum_1030@71:1>@83>
            <<<sigma_1032@66:0>@69:1>@85>
              <f_sigma_1259@87>
                <sigma_1032@89>
                </<sigma_1032@89:2>@92>
                <f_sigma_1260@94>
                </<f_sigma_1260@94:2>@96>
              </<f_sigma_1259@87:2>@98>
            </<sigma_1032@66:2>@100>
            <f_main_1261@102>
              <fail_1264@105>
    inlined horn clauses:
      P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
      
      P[<<sigma_1032@66:2>@100:0>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int),
      ((<f_main_1261@102:2> < <f_main_1261@102:0>) && <fail_1264@105:0>)
      |- P[<fail_1264@105:0>](<fail_1264@105:0>:bool)
      
      P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
      P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var77:int),
      P[<<sigma_1032@89:2>@92:0>]((-1 + <sigma_1032@66:1>):int,(<<sigma_1032@66:2>@100:0> + (-1 * var77)):int),
      (<sigma_1032@66:1> > 0) |- P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,
                                                              <<sigma_1032@66:2>@100:0>:int)
      
      P[<sigma_1032@89:1>](<sigma_1032@89:1>:int), ((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> <= 0))
      |- P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int)
      
      P[<sigma_1032@66:1>]((1 + <sigma_1032@89:1>):int),
      P[<<<sigma_1032@66:0>@69:1>@85:0>]((1 + <sigma_1032@89:1>):int,<f_sigma_1259@87:3>:int),
      ((1 + <sigma_1032@89:1>) > 0) |- P[<sigma_1032@89:1>](<sigma_1032@89:1>:int)
      
      P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
      <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
      
      P[<sum_1030@71:0>](<sum_1030@71:0>:int),
      P[<<sum_1030@74:1>@77:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@83:0> + (-1 * <sum_1030@71:0>)):int),
      (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                         <<sum_1030@71:1>@83:0>:int)
      
      P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
      |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
      
      P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
      |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
      
      P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
      
      P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
      |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
      
      |- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
    begin ParamSubstInfer.infer(7331)[3]
      
    end ParamSubstInfer.infer(7331)[3] (0.073989 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(7333)[3]
      
    end RefTypeInfer.elim_coeffs(7333)[3] (0.000999 sec.)
    begin YhornInterface.solve(7710)[3]
      begin HcSolver.solve_ub(7711)[4]
        encoded:
          P[<fail_1264@105:0>](<fail_1264@105:0>:int)|- bot
          
          P[<<sigma_1032@66:2>@100:0>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int),
          ((<f_main_1261@102:2> < <f_main_1261@102:0>) && (<fail_1264@105:0> = 1))
          |- P[<fail_1264@105:0>](<fail_1264@105:0>:int)
          
          P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var77:int),
          P[<<sigma_1032@89:2>@92:0>]((-1 + <sigma_1032@66:1>):int,(<<sigma_1032@66:2>@100:0> + (-1 * var77)):int),
          (<sigma_1032@66:1> > 0) |- P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,
                                                                  <<sigma_1032@66:2>@100:0>:int)
          
          P[<sigma_1032@89:1>](<sigma_1032@89:1>:int), ((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> <= 0))
          |- P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int)
          
          P[<sigma_1032@66:1>]((1 + <sigma_1032@89:1>):int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>]((1 + <sigma_1032@89:1>):int,<f_sigma_1259@87:3>:int),
          ((1 + <sigma_1032@89:1>) > 0) |- P[<sigma_1032@89:1>](<sigma_1032@89:1>:int)
          
          P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
          <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
          
          P[<sum_1030@71:0>](<sum_1030@71:0>:int),
          P[<<sum_1030@74:1>@77:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@83:0> + (-1 * <sum_1030@71:0>)):int),
          (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                             <<sum_1030@71:1>@83:0>:int)
          
          P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
          |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
          
          P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
          |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
          
          P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
          
          P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
          |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
          
          |- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
        input to Yhorn:
          P[<fail_1264@105:0>](<fail_1264@105:0>:int)|- bot
          
          P[<<sigma_1032@66:2>@100:0>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int),
          ((<f_main_1261@102:2> < <f_main_1261@102:0>) && (<fail_1264@105:0> = 1))
          |- P[<fail_1264@105:0>](<fail_1264@105:0>:int)
          
          P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var77:int),
          P[<<sigma_1032@89:2>@92:0>](var78:int,var79:int),
          (((var79 + var77) = <<sigma_1032@66:2>@100:0>) &&
           (((1 + var78) = <sigma_1032@66:1>) && (<sigma_1032@66:1> > 0)))
          |- P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,<<sigma_1032@66:2>@100:0>:int)
          
          P[<sigma_1032@89:1>](<sigma_1032@89:1>:int), ((<sigma_1032@89:1> <= 0) && (<<sigma_1032@89:2>@92:0> = 0))
          |- P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int)
          
          P[<sigma_1032@66:1>](var80:int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>](var81:int,<f_sigma_1259@87:3>:int),
          ((var81 = (1 + <sigma_1032@89:1>)) && ((var80 = (1 + <sigma_1032@89:1>)) && ((1 + <sigma_1032@89:1>) > 0)))
          |- P[<sigma_1032@89:1>](<sigma_1032@89:1>:int)
          
          P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
          <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
          
          P[<sum_1030@71:0>](<sum_1030@71:0>:int),
          P[<<sum_1030@74:1>@77:0>](var82:int,var83:int),
          (((var83 + <sum_1030@71:0>) = <<sum_1030@71:1>@83:0>) &&
           (((1 + var82) = <sum_1030@71:0>) && (<sum_1030@71:0> > 0)))
          |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,<<sum_1030@71:1>@83:0>:int)
          
          P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<sum_1030@74:0> <= 0) && (<<sum_1030@74:1>@77:0> = 0))
          |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
          
          P[<sum_1030@71:0>](var84:int), ((var84 = (1 + <sum_1030@74:0>)) && ((1 + <sum_1030@74:0>) > 0))
          |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
          
          P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
          
          P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
          |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1264_sep_105_sep_0($296)) -> 1=0.
(($296-1=0) & ($297-$298<0)) & (v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0($298,$297)) -> v_sep_fail_1264_sep_105_sep_0($296).
(($299>0) & (-$299+$300+1=0) & ($301+$302-$303=0)) & (v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0($300,$301)) & (v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0($299,$302)) & (v_sep_sigma_1032_sep_66_sep_1($299)) -> v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0($299,$303).
(($304=0) & ($305<=0)) & (v_sep_sigma_1032_sep_89_sep_1($305)) -> v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0($305,$304).
(($305+1>0) & (-$305+$306-1=0) & (-$305+$307-1=0)) & (v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0($307,$308)) & (v_sep_sigma_1032_sep_66_sep_1($306)) -> v_sep_sigma_1032_sep_89_sep_1($305).
(0=0) & (v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0($309,$310)) -> v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0($309,$310).
(($311>0) & (-$311+$312+1=0) & ($311+$313-$314=0)) & (v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0($312,$313)) & (v_sep_sum_1030_sep_71_sep_0($311)) -> v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0($311,$314).
(($315=0) & ($316<=0)) & (v_sep_sum_1030_sep_74_sep_0($316)) -> v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0($316,$315).
(($316+1>0) & (-$316+$317-1=0)) & (v_sep_sum_1030_sep_71_sep_0($317)) -> v_sep_sum_1030_sep_74_sep_0($316).
(0=0) & (v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0($311)) -> v_sep_sum_1030_sep_71_sep_0($311).
($309>0) & (v_sep_sigma_1032_sep_66_sep_1($309)) -> v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0($309).
0=0 -> v_sep_sigma_1032_sep_66_sep_1($299).


v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: X
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
................
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: X
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: X
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
......
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: X
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
........
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: X
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
............Split conj [36] 0.368943
(Reconstrcut: 11 **)
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...........
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
......
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
........
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
............
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...............Split conj [38] 0.396938
(Reconstrcut: 25 ***)
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
.................
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
......
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
........
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
............
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...............Split conj [42] 0.432933
(Reconstrcut: 15 **)
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...............
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
......
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
........
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
............
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...............
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...................Split conj [44] 0.469927
(Reconstrcut: 19 **)
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
.................
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
...
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
......
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
........
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
............
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
...............
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
...................
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
....................(0=0) & (v_sep_fail_1264_sep_105_sep_0($296)) -> 1=0.
(($296-1=0) & ($297-$298<0)) & (v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0($298,$297)) -> v_sep_fail_1264_sep_105_sep_0($296).
(($299>0) & (-$299+$300+1=0) & ($301+$302-$303=0)) & (v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0($300,$301)) & (v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0($299,$302)) & (v_sep_sigma_1032_sep_66_sep_1($299)) -> v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0($299,$303).
(($304=0) & ($305<=0)) & (v_sep_sigma_1032_sep_89_sep_1($305)) -> v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0($305,$304).
(($305+1>0) & (-$305+$306-1=0) & (-$305+$307-1=0)) & (v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0($307,$308)) & (v_sep_sigma_1032_sep_66_sep_1($306)) -> v_sep_sigma_1032_sep_89_sep_1($305).
(0=0) & (v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0($309,$310)) -> v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0($309,$310).
(($311>0) & (-$311+$312+1=0) & ($311+$313-$314=0)) & (v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0($312,$313)) & (v_sep_sum_1030_sep_71_sep_0($311)) -> v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0($311,$314).
(($315=0) & ($316<=0)) & (v_sep_sum_1030_sep_74_sep_0($316)) -> v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0($316,$315).
(($316+1>0) & (-$316+$317-1=0)) & (v_sep_sum_1030_sep_71_sep_0($317)) -> v_sep_sum_1030_sep_74_sep_0($316).
(0=0) & (v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0($311)) -> v_sep_sum_1030_sep_71_sep_0($311).
($309>0) & (v_sep_sigma_1032_sep_66_sep_1($309)) -> v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0($309).
0=0 -> v_sep_sigma_1032_sep_66_sep_1($299).

          |- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
        solution:
          P[<fail_1264@105:0>]($318:bool) = false
          P[<<sigma_1032@66:0>@69:0>]($358:int) = true
          P[<<<sigma_1032@66:0>@69:1>@85:0>]($331:int,$333:int) = ($331 <= $333)
          P[<sigma_1032@66:1>]($336:int) = true
          P[<<sigma_1032@66:2>@100:0>]($321:int,$323:int) = ($321 <= $323)
          P[<sigma_1032@89:1>]($339:int) = true
          P[<<sigma_1032@89:2>@92:0>]($326:int,$328:int) = (0 <= $328)
          P[<sum_1030@71:0>]($352:int) = true
          P[<<sum_1030@71:1>@83:0>]($342:int,$344:int) = ($342 <= $344)
          P[<sum_1030@74:0>]($355:int) = true
          P[<<sum_1030@74:1>@77:0>]($347:int,$349:int) = (0 <= $349)
        
      end HcSolver.solve_ub(7711)[4] (0.186972 sec.)
      begin HcSolver.check_validity(8265)[4]
        input:
          P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
          
          P[<<sigma_1032@66:2>@100:0>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int),
          ((<f_main_1261@102:2> < <f_main_1261@102:0>) && <fail_1264@105:0>)
          |- P[<fail_1264@105:0>](<fail_1264@105:0>:bool)
          
          P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var77:int),
          P[<<sigma_1032@89:2>@92:0>]((-1 + <sigma_1032@66:1>):int,(<<sigma_1032@66:2>@100:0> + (-1 * var77)):int),
          (<sigma_1032@66:1> > 0) |- P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,
                                                                  <<sigma_1032@66:2>@100:0>:int)
          
          P[<sigma_1032@89:1>](<sigma_1032@89:1>:int), ((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> <= 0))
          |- P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int)
          
          P[<sigma_1032@66:1>]((1 + <sigma_1032@89:1>):int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>]((1 + <sigma_1032@89:1>):int,<f_sigma_1259@87:3>:int),
          ((1 + <sigma_1032@89:1>) > 0) |- P[<sigma_1032@89:1>](<sigma_1032@89:1>:int)
          
          P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
          <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
          
          P[<sum_1030@71:0>](<sum_1030@71:0>:int),
          P[<<sum_1030@74:1>@77:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@83:0> + (-1 * <sum_1030@71:0>)):int),
          (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                             <<sum_1030@71:1>@83:0>:int)
          
          P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
          |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
          
          P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
          |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
          
          P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
          
          P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
          |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
          
          |- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(8265)[4] (0.008999 sec.)
      solution:
        P[<fail_1264@105:0>]($318:bool) = false
        P[<<sigma_1032@66:0>@69:0>]($358:int) = true
        P[<<<sigma_1032@66:0>@69:1>@85:0>]($331:int,$333:int) = ($331 <= $333)
        P[<sigma_1032@66:1>]($336:int) = true
        P[<<sigma_1032@66:2>@100:0>]($321:int,$323:int) = ($321 <= $323)
        P[<sigma_1032@89:1>]($339:int) = true
        P[<<sigma_1032@89:2>@92:0>]($326:int,$328:int) = (0 <= $328)
        P[<sum_1030@71:0>]($352:int) = true
        P[<<sum_1030@71:1>@83:0>]($342:int,$344:int) = ($342 <= $344)
        P[<sum_1030@74:0>]($355:int) = true
        P[<<sum_1030@74:1>@77:0>]($347:int,$349:int) = (0 <= $349)
    end YhornInterface.solve(7710)[3] (0.196970 sec.)
    
  end RefTypeInfer.infer_etrs(5024)[2] (0.284956 sec.)
  refinement types:
    main_1257: X
    f_1262: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    sigma_1032: (v1:int -> (v2:{v2:int | (v1 <= v2)} -> X) -> X) -> v5:int -> (v6:{v6:int | (v5 <= v6)} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (v1 <= v2)} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (0 <= v2)} -> X) -> X
    f_sum_1258: v1:int -> (v2:int -> X) -> v4:int -> X
    f_sigma_1259: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    sigma_1032: (v1:int -> (v2:int -> X) -> X) -> v5:int -> (v6:{v6:int | (0 <= v6)} -> X) -> X
    f_sigma_1260: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1261: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1264: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1263: var101:int -> var100:unit -> X
  abstraction types:
    main_1257: X
    f_1262: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    sigma_1032: (var102:int -> (var103:int[var103 -> (var102 <= var103)] -> X) -> X) ->
                var106:int -> (var107:int[var107 -> (var106 <= var107),
                                          var107 -> (0 <= var107)] -> X) -> X
    sum_1030: var110:int -> (var111:int[var111 -> (var110 <= var111),
                                        var111 -> (0 <= var111)] -> X) -> X
    f_sum_1258: v1:int -> (v2:int -> X) -> v4:int -> X
    f_sigma_1259: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    f_sigma_1260: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1261: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1264: v1:bool -> (v2:unit -> X) -> X
    f_1263: var101:int -> var100:unit -> X
  
end AbsTypeInfer.refine(5023)[1] (0.289956 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1257
  main_1257 -> (rand_int f_1262)
  f_1262 x_1232 -> (main_1035 x_1232 (f_1263 x_1232))
  f_1263 x_1232 x_1229 -> end
  f_main_1261 n_1036 k_main_1194 x_1197 when (x_1197 >= n_1036) -> (k_main_1194 ())
  f_main_1261 n_1036 k_main_1194 x_1197 when (not (x_1197 >= n_1036)) -> (fail_1264 true k_main_1194)
  f_sigma_1259 n_1034 f_1033 k_sigma_1145 x_1148 ->
      (sigma_1032 f_1033 (n_1034 - 1) (f_sigma_1260 n_1034 x_1148 k_sigma_1145))
  f_sigma_1260 n_1034 x_1148 k_sigma_1145 x_1149 -> (k_sigma_1145 (x_1148 + x_1149))
  f_sum_1258 n_1031 k_sum_1098 x_1102 -> (k_sum_1098 (n_1031 + x_1102))
  fail_1264 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1194 -> (sigma_1032 sum_1030 n_1036 (f_main_1261 n_1036 k_main_1194))
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (n_1034 <= 0) -> (k_sigma_1145 0)
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (not (n_1034 <= 0)) ->
      (f_1033 n_1034 (f_sigma_1259 n_1034 f_1033 k_sigma_1145))
  sum_1030 n_1031 k_sum_1098 when (n_1031 <= 0) -> (k_sum_1098 0)
  sum_1030 n_1031 k_sum_1098 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1258 n_1031 k_sum_1098))
Types:
  main_1257 : X
  fail_1264 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sigma_1032 : ((x_2:int[x_2 >= 1] -> (x_4:int[x_2 <= x_4] -> X) -> X) ->
                x_7:int -> (x_9:int[x_9 >= 0; x_7 <= x_9] -> X) -> X)
  sum_1030 : (x_1:int[x_1 >= 1] -> (x_3:int[x_3 >= 0; x_1 <= x_3] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  sigma: (((x_4:{x_4:int | x_4 >= 1} -> {x_5:int | x_4 <= x_5}) -> (x_2:int -> {x_3:int | x_2 <= x_3})) /\ 
          ((x_9:{x_9:int | x_9 >= 1} -> {x_10:int | x_9 <= x_10}) -> (int -> {x_8:int | x_8 >= 0})))
  sum: ((x_1:{x_1:int | x_1 >= 1} -> {x_2:int | x_1 <= x_2}) /\ ({x_3:int | x_3 >= 1} -> {x_4:int | x_4 >= 0}) /\ 
        ({x_5:int | x_5 < 1} -> {x_6:int | x_6 >= 0}))

cycles: 3
total: 0.890 sec
  abst: 0.027 sec
  mc: 0.044 sec
  refine: 0.431 sec
    exparam: 0.124 sec
