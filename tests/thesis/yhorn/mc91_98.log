MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn mc91_98.ml

parsed::
 let rec m_1030 x_1031 = if x_1031 > 100 then
                           x_1031 - 10
                         else
                           m_1030 (m_1030 (x_1031 + 11)) 
 in
 let main_1032 n_1033 = if n_1033 <= 98 then
                          if m_1030 n_1033 = 91 then
                            ()
                          else
                            {fail} ()
                        else
                          () 
 in
   ()

set_target::
 let rec m_1030 x_1031 = if x_1031 > 100 then
                           x_1031 - 10
                         else
                           m_1030 (m_1030 (x_1031 + 11)) 
 in
 let main_1032 n_1033 = if n_1033 <= 98 then
                          if m_1030 n_1033 = 91 then
                            ()
                          else
                            {fail} ()
                        else
                          () 
 in
 let main_1051 = let arg1_1050 = rand_int () 
                 in
                   main_1032 arg1_1050 
 in
   ()

CPS::
 let rec m_1030 (x_1031:int) (k_m_1076:(int -> X)) =
   if x_1031 > 100 then
     k_m_1076 (x_1031 - 10)
   else
     m_1030 (x_1031 + 11) (fun x_1096 -> m_1030 x_1096 k_m_1076) 
 in
 let main_1032 (n_1033:int) (k_main_1114:(unit -> X)) =
   if n_1033 <= 98 then
     m_1030 n_1033 (fun x_1117 -> (if x_1117 = 91 then
                                     k_main_1114 ()
                                   else
                                     {|fail|} () k_main_1114))
   else
     k_main_1114 () 
 in
   rand_int_cps () (fun x_1149 -> main_1032 x_1149 (fun x_1146 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1174
  main_1174 -> (rand_int f_1177)
  f_1177 x_1149 -> (main_1032 x_1149 (f_1178 x_1149))
  f_1178 x_1149 x_1146 -> end
  f_m_1175 x_1031 k_m_1076 x_1096 -> (m_1030 x_1096 k_m_1076)
  f_main_1176 n_1033 k_main_1114 x_1117 when (x_1117 = 91) -> (k_main_1114 ())
  f_main_1176 n_1033 k_main_1114 x_1117 when (not (x_1117 = 91)) -> (fail_1179 true k_main_1114)
  fail_1179 b k -> {fail} => (k ())
  m_1030 x_1031 k_m_1076 when (x_1031 > 100) -> (k_m_1076 (x_1031 - 10))
  m_1030 x_1031 k_m_1076 when (not (x_1031 > 100)) -> (m_1030 (x_1031 + 11) (f_m_1175 x_1031 k_m_1076))
  main_1032 n_1033 k_main_1114 when (n_1033 <= 98) -> (m_1030 n_1033 (f_main_1176 n_1033 k_main_1114))
  main_1032 n_1033 k_main_1114 when (not (n_1033 <= 98)) -> (k_main_1114 ())
Types:
  main_1174 : X
  fail_1179 : (x_1:bool[x_1] -> (unit -> X) -> X)
  m_1030 : (int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1174 ... --> 
  f_1177 ... --> 
  main_1032 [1/2] ... --> 
  m_1030 [1/2] ... --> 
  f_main_1176 [2/2] ... --> 
  fail_1179 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(107)[1]
  program:
    main_1174  | true = ((Random.int 0) f_1177)
    f_1177 x_1149 | true = (main_1032 x_1149
                                      (f_1178 x_1149))
    f_1178 x_1149 x_1146 | true = end
    f_m_1175 x_1031 k_m_1076 x_1096 | true = (m_1030 x_1096
                                                     k_m_1076)
    f_main_1176 n_1033 k_main_1114 x_1117 | (x_1117 = 91) = (k_main_1114 ())
    f_main_1176 n_1033 k_main_1114 x_1117 | (not (x_1117 = 91)) = (fail_1179 true
                                                                    k_main_1114)
    fail_1179 b k | true = (fail ())
    m_1030 x_1031 k_m_1076 | (x_1031 > 100) = (k_m_1076 (x_1031 - 10))
    m_1030 x_1031 k_m_1076 | (not (x_1031 > 100)) = (m_1030 (x_1031 + 11)
                                                            (f_m_1175 x_1031
                                                                    k_m_1076))
    main_1032 n_1033 k_main_1114 | (n_1033 <= 98) = (m_1030 n_1033
                                                            (f_main_1176 n_1033
                                                                    k_main_1114))
    main_1032 n_1033 k_main_1114 | (not (n_1033 <= 98)) = (k_main_1114 ())
    main_1174:X
    f_1177:int -> X
    f_1178:int -> unit -> X
    f_m_1175:int -> (int -> X) -> int -> X
    f_main_1176:int -> (unit -> X) -> int -> X
    fail_1179:bool -> (unit -> X) -> X
    m_1030:int -> (int -> X) -> X
    main_1032:int -> (unit -> X) -> X
  inlined functions: f_1177,f_1178,f_m_1175,f_main_1176,main_1032
  counterexample: 0:0:0:0:1:0
  error traces:
    [true.nop(<f_1177@4:0> = var2)
     [true.(<main_1032@6:0> = <f_1177@4:0>)
      [(<main_1032@6:0> <= 98).(<m_1030@9:0> = <main_1032@6:0>)
       [(<m_1030@9:0> > 100).(<<m_1030@9:1>@12:0> = (<m_1030@9:0> - 10))
        [true.((<f_main_1176@14:0> = <main_1032@6:0>) && (<f_main_1176@14:2> = <<m_1030@9:1>@12:0>))
         [(not (<f_main_1176@14:2> = 91)).(<fail_1179@17:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(108)[2]
    horn clauses:
      P[<fail_1179@17:0>](<fail_1179@17:0>:bool)|- bot
      
      P[<f_main_1176@14:2>](<f_main_1176@14:0>:int,<f_main_1176@14:2>:int),
      ((<f_main_1176@14:2> <> 91) && <fail_1179@17:0>) |- P[<fail_1179@17:0>](
      <fail_1179@17:0>:bool)
      
      P[<main_1032@6:0>](<f_main_1176@14:0>:int),
      P[<<m_1030@9:1>@12:0>](<f_main_1176@14:0>:int,<f_main_1176@14:2>:int), (
      <f_main_1176@14:0> <= 98) |- P[<f_main_1176@14:2>](<f_main_1176@14:0>:int,
                                                         <f_main_1176@14:2>:int)
      
      P[<m_1030@9:0>](<m_1030@9:0>:int), ((<m_1030@9:0> > 100) && ((10 + <<m_1030@9:1>@12:0>) = <m_1030@9:0>))
      |- P[<<m_1030@9:1>@12:0>](<m_1030@9:0>:int,<<m_1030@9:1>@12:0>:int)
      
      P[<main_1032@6:0>](<m_1030@9:0>:int), (<m_1030@9:0> <= 98) |- P[<m_1030@9:0>](<m_1030@9:0>:int)
      
      P[<f_1177@4:0>](<main_1032@6:0>:int)|- P[<main_1032@6:0>](<main_1032@6:0>:int)
      
      |- P[<f_1177@4:0>](<f_1177@4:0>:int)
    call trees:
      <main_1174@1>
        <f_1177@4>
          <main_1032@6>
            <m_1030@9>
            </<m_1030@9:1>@12>
            <f_main_1176@14>
              <fail_1179@17>
    inlined horn clauses:
      P[<fail_1179@17:0>](<fail_1179@17:0>:bool)|- bot
      
      P[<<m_1030@9:1>@12:0>](<f_main_1176@14:0>:int,<f_main_1176@14:2>:int),
      ((<f_main_1176@14:2> <> 91) && ((<f_main_1176@14:0> <= 98) && <fail_1179@17:0>))
      |- P[<fail_1179@17:0>](<fail_1179@17:0>:bool)
      
      P[<m_1030@9:0>](<m_1030@9:0>:int), ((<m_1030@9:0> > 100) && ((10 + <<m_1030@9:1>@12:0>) = <m_1030@9:0>))
      |- P[<<m_1030@9:1>@12:0>](<m_1030@9:0>:int,<<m_1030@9:1>@12:0>:int)
      
       (<m_1030@9:0> <= 98) |- P[<m_1030@9:0>](<m_1030@9:0>:int)
    begin ParamSubstInfer.infer(1295)[3]
      
    end ParamSubstInfer.infer(1295)[3] (0.018997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1297)[3]
      
    end RefTypeInfer.elim_coeffs(1297)[3] (0.000000 sec.)
    begin YhornInterface.solve(1577)[3]
      begin HcSolver.solve_ub(1578)[4]
        encoded:
          P[<fail_1179@17:0>](<fail_1179@17:0>:int)|- bot
          
          P[<<m_1030@9:1>@12:0>](<f_main_1176@14:0>:int,<f_main_1176@14:2>:int),
          ((<f_main_1176@14:2> <> 91) && ((<f_main_1176@14:0> <= 98) && (<fail_1179@17:0> = 1)))
          |- P[<fail_1179@17:0>](<fail_1179@17:0>:int)
          
          P[<m_1030@9:0>](<m_1030@9:0>:int), ((<m_1030@9:0> > 100) && ((10 + <<m_1030@9:1>@12:0>) = <m_1030@9:0>))
          |- P[<<m_1030@9:1>@12:0>](<m_1030@9:0>:int,<<m_1030@9:1>@12:0>:int)
          
           (<m_1030@9:0> <= 98) |- P[<m_1030@9:0>](<m_1030@9:0>:int)
        input to Yhorn:
          P[<fail_1179@17:0>](<fail_1179@17:0>:int)|- bot
          
          P[<<m_1030@9:1>@12:0>](<f_main_1176@14:0>:int,<f_main_1176@14:2>:int),
          ((<f_main_1176@14:0> <= 98) && ((<f_main_1176@14:2> <> 91) && (<fail_1179@17:0> = 1)))
          |- P[<fail_1179@17:0>](<fail_1179@17:0>:int)
          
          P[<m_1030@9:0>](<m_1030@9:0>:int), (((10 + <<m_1030@9:1>@12:0>) = <m_1030@9:0>) && (<m_1030@9:0> > 100))
          |- P[<<m_1030@9:1>@12:0>](<m_1030@9:0>:int,<<m_1030@9:1>@12:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1179_sep_17_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-91<>0) & ($8-98<=0)) & (v_sep_m_1030_sep_9_sep_1_sep_12_sep_0($8,$7)) -> v_sep_fail_1179_sep_17_sep_0($6).
(($9-100>0) & (-$9+$10+10=0)) & (v_sep_m_1030_sep_9_sep_0($9)) -> v_sep_m_1030_sep_9_sep_1_sep_12_sep_0($9,$10).
$9-98<=0 -> v_sep_m_1030_sep_9_sep_0($9).


v_sep_fail_1179_sep_17_sep_0: X
v_sep_m_1030_sep_9_sep_0: X
v_sep_m_1030_sep_9_sep_1_sep_12_sep_0: X
.....
v_sep_fail_1179_sep_17_sep_0: X
v_sep_m_1030_sep_9_sep_0: X
v_sep_m_1030_sep_9_sep_1_sep_12_sep_0: X
....
v_sep_fail_1179_sep_17_sep_0: X
v_sep_m_1030_sep_9_sep_0: X
v_sep_m_1030_sep_9_sep_1_sep_12_sep_0: X
.....
v_sep_fail_1179_sep_17_sep_0: X
v_sep_m_1030_sep_9_sep_0: X
v_sep_m_1030_sep_9_sep_1_sep_12_sep_0: X
.....(0=0) & (v_sep_fail_1179_sep_17_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-91<>0) & ($8-98<=0)) & (v_sep_m_1030_sep_9_sep_1_sep_12_sep_0($8,$7)) -> v_sep_fail_1179_sep_17_sep_0($6).
(($9-100>0) & (-$9+$10+10=0)) & (v_sep_m_1030_sep_9_sep_0($9)) -> v_sep_m_1030_sep_9_sep_1_sep_12_sep_0($9,$10).
$9-98<=0 -> v_sep_m_1030_sep_9_sep_0($9).

           (<m_1030@9:0> <= 98) |- P[<m_1030@9:0>](<m_1030@9:0>:int)
        solution:
          P[<fail_1179@17:0>]($11:bool) = false
          P[<m_1030@9:0>]($19:int) = ($19 <= 98)
          P[<<m_1030@9:1>@12:0>]($14:int,$16:int) = false
        
      end HcSolver.solve_ub(1578)[4] (0.016997 sec.)
      begin HcSolver.check_validity(1776)[4]
        input:
          P[<fail_1179@17:0>](<fail_1179@17:0>:bool)|- bot
          
          P[<<m_1030@9:1>@12:0>](<f_main_1176@14:0>:int,<f_main_1176@14:2>:int),
          ((<f_main_1176@14:2> <> 91) && ((<f_main_1176@14:0> <= 98) && <fail_1179@17:0>))
          |- P[<fail_1179@17:0>](<fail_1179@17:0>:bool)
          
          P[<m_1030@9:0>](<m_1030@9:0>:int), ((<m_1030@9:0> > 100) && ((10 + <<m_1030@9:1>@12:0>) = <m_1030@9:0>))
          |- P[<<m_1030@9:1>@12:0>](<m_1030@9:0>:int,<<m_1030@9:1>@12:0>:int)
          
           (<m_1030@9:0> <= 98) |- P[<m_1030@9:0>](<m_1030@9:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1776)[4] (0.002000 sec.)
      solution:
        P[<fail_1179@17:0>]($11:bool) = false
        P[<m_1030@9:0>]($19:int) = ($19 <= 98)
        P[<<m_1030@9:1>@12:0>]($14:int,$16:int) = false
    end YhornInterface.solve(1577)[3] (0.018997 sec.)
    
  end RefTypeInfer.infer_etrs(108)[2] (0.043993 sec.)
  refinement types:
    main_1174: X
    f_1177: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    m_1030: v1:{v1:int | (v1 <= 98)} -> (v2:{v2:int | false} -> X) -> X
    f_main_1176: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1179: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1178: var11:int -> var10:unit -> X
    f_m_1175: var16:int -> (var15:int -> X) -> var13:int -> X
  abstraction types:
    main_1174: X
    f_1177: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    m_1030: v1:int[v1 -> (v1 <= 98)] -> (v2:int -> X) -> X
    f_main_1176: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1179: v1:bool -> (v2:unit -> X) -> X
    f_1178: var11:int -> var10:unit -> X
    f_m_1175: var16:int -> (var15:int -> X) -> var13:int -> X
  
end AbsTypeInfer.refine(107)[1] (0.046993 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1174
  main_1174 -> (rand_int f_1177)
  f_1177 x_1149 -> (main_1032 x_1149 (f_1178 x_1149))
  f_1178 x_1149 x_1146 -> end
  f_m_1175 x_1031 k_m_1076 x_1096 -> (m_1030 x_1096 k_m_1076)
  f_main_1176 n_1033 k_main_1114 x_1117 when (x_1117 = 91) -> (k_main_1114 ())
  f_main_1176 n_1033 k_main_1114 x_1117 when (not (x_1117 = 91)) -> (fail_1179 true k_main_1114)
  fail_1179 b k -> {fail} => (k ())
  m_1030 x_1031 k_m_1076 when (x_1031 > 100) -> (k_m_1076 (x_1031 - 10))
  m_1030 x_1031 k_m_1076 when (not (x_1031 > 100)) -> (m_1030 (x_1031 + 11) (f_m_1175 x_1031 k_m_1076))
  main_1032 n_1033 k_main_1114 when (n_1033 <= 98) -> (m_1030 n_1033 (f_main_1176 n_1033 k_main_1114))
  main_1032 n_1033 k_main_1114 when (not (n_1033 <= 98)) -> (k_main_1114 ())
Types:
  main_1174 : X
  fail_1179 : (x_1:bool[x_1] -> (unit -> X) -> X)
  m_1030 : (x_1:int[x_1 <= 98] -> (int -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1174 ... --> 
  f_1177 ... --> 
  main_1032 [1/2] ... --> 
  m_1030 [2/2] ... --> 
  m_1030 [1/2] ... --> 
  f_m_1175 ... --> 
  m_1030 [1/2] ... --> 
  f_main_1176 [2/2] ... --> 
  fail_1179 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(2228)[1]
  program:
    main_1174  | true = ((Random.int 0) f_1177)
    f_1177 x_1149 | true = (main_1032 x_1149
                                      (f_1178 x_1149))
    f_1178 x_1149 x_1146 | true = end
    f_m_1175 x_1031 k_m_1076 x_1096 | true = (m_1030 x_1096
                                                     k_m_1076)
    f_main_1176 n_1033 k_main_1114 x_1117 | (x_1117 = 91) = (k_main_1114 ())
    f_main_1176 n_1033 k_main_1114 x_1117 | (not (x_1117 = 91)) = (fail_1179 true
                                                                    k_main_1114)
    fail_1179 b k | true = (fail ())
    m_1030 x_1031 k_m_1076 | (x_1031 > 100) = (k_m_1076 (x_1031 - 10))
    m_1030 x_1031 k_m_1076 | (not (x_1031 > 100)) = (m_1030 (x_1031 + 11)
                                                            (f_m_1175 x_1031
                                                                    k_m_1076))
    main_1032 n_1033 k_main_1114 | (n_1033 <= 98) = (m_1030 n_1033
                                                            (f_main_1176 n_1033
                                                                    k_main_1114))
    main_1032 n_1033 k_main_1114 | (not (n_1033 <= 98)) = (k_main_1114 ())
    main_1174:X
    f_1177:int -> X
    f_1178:int -> unit -> X
    f_m_1175:int -> (int -> X) -> int -> X
    f_main_1176:int -> (unit -> X) -> int -> X
    fail_1179:bool -> (unit -> X) -> X
    m_1030:int -> (int -> X) -> X
    main_1032:int -> (unit -> X) -> X
  inlined functions: f_1177,f_1178,f_m_1175,f_main_1176,main_1032
  counterexample: 0:0:0:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1177@23:0> = var17)
     [true.(<main_1032@25:0> = <f_1177@23:0>)
      [(<main_1032@25:0> <= 98).(<m_1030@28:0> = <main_1032@25:0>)
       [(not (<m_1030@28:0> > 100)).(<m_1030@31:0> = (<m_1030@28:0> + 11))
        [(<m_1030@31:0> > 100).(<<m_1030@31:1>@34:0> = (<m_1030@31:0> - 10))
         [true.((<f_m_1175@36:0> = <m_1030@28:0>) && (<f_m_1175@36:2> = <<m_1030@31:1>@34:0>))
          [true.(<m_1030@38:0> = <f_m_1175@36:2>)
           [(<m_1030@38:0> > 100).(<<m_1030@38:1>@41:0> = (<m_1030@38:0> - 10))
            [true.(<<f_m_1175@36:1>@43:0> = <<m_1030@38:1>@41:0>)
             [true.(<<m_1030@28:1>@45:0> = <<f_m_1175@36:1>@43:0>)
              [true.((<f_main_1176@47:0> = <main_1032@25:0>) && (<f_main_1176@47:2> = <<m_1030@28:1>@45:0>))
               [(not (<f_main_1176@47:2> = 91)).(<fail_1179@50:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(2229)[2]
    horn clauses:
      P[<fail_1179@50:0>](<fail_1179@50:0>:bool)|- bot
      
      P[<f_main_1176@47:2>](<f_main_1176@47:0>:int,<f_main_1176@47:2>:int),
      ((<f_main_1176@47:2> <> 91) && <fail_1179@50:0>) |- P[<fail_1179@50:0>](
      <fail_1179@50:0>:bool)
      
      P[<main_1032@25:0>](<f_main_1176@47:0>:int),
      P[<<m_1030@28:1>@45:0>](<f_main_1176@47:0>:int,<f_main_1176@47:2>:int), (
      <f_main_1176@47:0> <= 98) |- P[<f_main_1176@47:2>](<f_main_1176@47:0>:int,
                                                         <f_main_1176@47:2>:int)
      
      P[<m_1030@28:0>](<m_1030@28:0>:int),
      P[<<f_m_1175@36:1>@43:0>](<m_1030@28:0>:int,<<m_1030@28:1>@45:0>:int), (
      <m_1030@28:0> <= 100) |- P[<<m_1030@28:1>@45:0>](<m_1030@28:0>:int,
                                                       <<m_1030@28:1>@45:0>:int)
      
      P[<f_m_1175@36:2>](<f_m_1175@36:0>:int,<m_1030@38:0>:int),
      P[<<m_1030@38:1>@41:0>](<m_1030@38:0>:int,<<f_m_1175@36:1>@43:0>:int)|- P[<<f_m_1175@36:1>@43:0>](
      <f_m_1175@36:0>:int,<<f_m_1175@36:1>@43:0>:int)
      
      P[<m_1030@38:0>](<m_1030@38:0>:int), ((<m_1030@38:0> > 100) && ((10 + <<m_1030@38:1>@41:0>) = <m_1030@38:0>))
      |- P[<<m_1030@38:1>@41:0>](<m_1030@38:0>:int,<<m_1030@38:1>@41:0>:int)
      
      P[<f_m_1175@36:2>](<f_m_1175@36:0>:int,<m_1030@38:0>:int)|- P[<m_1030@38:0>](<m_1030@38:0>:int)
      
      P[<m_1030@28:0>](<f_m_1175@36:0>:int),
      P[<<m_1030@31:1>@34:0>]((11 + <f_m_1175@36:0>):int,<f_m_1175@36:2>:int), (
      <f_m_1175@36:0> <= 100) |- P[<f_m_1175@36:2>](<f_m_1175@36:0>:int,
                                                    <f_m_1175@36:2>:int)
      
      P[<m_1030@31:0>](<m_1030@31:0>:int), ((<m_1030@31:0> > 100) && ((10 + <<m_1030@31:1>@34:0>) = <m_1030@31:0>))
      |- P[<<m_1030@31:1>@34:0>](<m_1030@31:0>:int,<<m_1030@31:1>@34:0>:int)
      
      P[<m_1030@28:0>]((-11 + <m_1030@31:0>):int), (<m_1030@31:0> <= 111) |- P[<m_1030@31:0>](<m_1030@31:0>:int)
      
      P[<main_1032@25:0>](<m_1030@28:0>:int), (<m_1030@28:0> <= 98) |- P[<m_1030@28:0>](<m_1030@28:0>:int)
      
      P[<f_1177@23:0>](<main_1032@25:0>:int)|- P[<main_1032@25:0>](<main_1032@25:0>:int)
      
      |- P[<f_1177@23:0>](<f_1177@23:0>:int)
    call trees:
      <main_1174@20>
        <f_1177@23>
          <main_1032@25>
            <m_1030@28>
              <m_1030@31>
              </<m_1030@31:1>@34>
              <f_m_1175@36>
                <m_1030@38>
                </<m_1030@38:1>@41>
              </<f_m_1175@36:1>@43>
            </<m_1030@28:1>@45>
            <f_main_1176@47>
              <fail_1179@50>
    inlined horn clauses:
      P[<fail_1179@50:0>](<fail_1179@50:0>:bool)|- bot
      
      P[<<m_1030@28:1>@45:0>](<f_main_1176@47:0>:int,<f_main_1176@47:2>:int),
      ((<f_main_1176@47:2> <> 91) && ((<f_main_1176@47:0> <= 98) && <fail_1179@50:0>))
      |- P[<fail_1179@50:0>](<fail_1179@50:0>:bool)
      
      P[<m_1030@28:0>](<m_1030@28:0>:int),
      P[<<m_1030@31:1>@34:0>]((11 + <m_1030@28:0>):int,var18:int),
      P[<<m_1030@38:1>@41:0>](var18:int,<<m_1030@28:1>@45:0>:int), (<m_1030@28:0> <= 100)
      |- P[<<m_1030@28:1>@45:0>](<m_1030@28:0>:int,<<m_1030@28:1>@45:0>:int)
      
      P[<m_1030@38:0>](<m_1030@38:0>:int), ((<m_1030@38:0> > 100) && ((10 + <<m_1030@38:1>@41:0>) = <m_1030@38:0>))
      |- P[<<m_1030@38:1>@41:0>](<m_1030@38:0>:int,<<m_1030@38:1>@41:0>:int)
      
      P[<m_1030@28:0>](<f_m_1175@36:0>:int),
      P[<<m_1030@31:1>@34:0>]((11 + <f_m_1175@36:0>):int,<m_1030@38:0>:int), (
      <f_m_1175@36:0> <= 100) |- P[<m_1030@38:0>](<m_1030@38:0>:int)
      
      P[<m_1030@31:0>](<m_1030@31:0>:int), ((<m_1030@31:0> > 100) && ((10 + <<m_1030@31:1>@34:0>) = <m_1030@31:0>))
      |- P[<<m_1030@31:1>@34:0>](<m_1030@31:0>:int,<<m_1030@31:1>@34:0>:int)
      
      P[<m_1030@28:0>]((-11 + <m_1030@31:0>):int), (<m_1030@31:0> <= 111) |- P[<m_1030@31:0>](<m_1030@31:0>:int)
      
       (<m_1030@28:0> <= 98) |- P[<m_1030@28:0>](<m_1030@28:0>:int)
    begin ParamSubstInfer.infer(4446)[3]
      
    end ParamSubstInfer.infer(4446)[3] (0.049992 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(4448)[3]
      
    end RefTypeInfer.elim_coeffs(4448)[3] (0.003999 sec.)
    begin YhornInterface.solve(4910)[3]
      begin HcSolver.solve_ub(4911)[4]
        encoded:
          P[<fail_1179@50:0>](<fail_1179@50:0>:int)|- bot
          
          P[<<m_1030@28:1>@45:0>](<f_main_1176@47:0>:int,<f_main_1176@47:2>:int),
          ((<f_main_1176@47:2> <> 91) && ((<f_main_1176@47:0> <= 98) && (<fail_1179@50:0> = 1)))
          |- P[<fail_1179@50:0>](<fail_1179@50:0>:int)
          
          P[<m_1030@28:0>](<m_1030@28:0>:int),
          P[<<m_1030@31:1>@34:0>]((11 + <m_1030@28:0>):int,var18:int),
          P[<<m_1030@38:1>@41:0>](var18:int,<<m_1030@28:1>@45:0>:int), (
          <m_1030@28:0> <= 100) |- P[<<m_1030@28:1>@45:0>](<m_1030@28:0>:int,
                                                           <<m_1030@28:1>@45:0>:int)
          
          P[<m_1030@38:0>](<m_1030@38:0>:int), ((<m_1030@38:0> > 100) && ((10 + <<m_1030@38:1>@41:0>) = <m_1030@38:0>))
          |- P[<<m_1030@38:1>@41:0>](<m_1030@38:0>:int,<<m_1030@38:1>@41:0>:int)
          
          P[<m_1030@28:0>](<f_m_1175@36:0>:int),
          P[<<m_1030@31:1>@34:0>]((11 + <f_m_1175@36:0>):int,<m_1030@38:0>:int), (
          <f_m_1175@36:0> <= 100) |- P[<m_1030@38:0>](<m_1030@38:0>:int)
          
          P[<m_1030@31:0>](<m_1030@31:0>:int), ((<m_1030@31:0> > 100) && ((10 + <<m_1030@31:1>@34:0>) = <m_1030@31:0>))
          |- P[<<m_1030@31:1>@34:0>](<m_1030@31:0>:int,<<m_1030@31:1>@34:0>:int)
          
          P[<m_1030@28:0>]((-11 + <m_1030@31:0>):int), (<m_1030@31:0> <= 111) |- P[<m_1030@31:0>](<m_1030@31:0>:int)
          
           (<m_1030@28:0> <= 98) |- P[<m_1030@28:0>](<m_1030@28:0>:int)
        input to Yhorn:
          P[<fail_1179@50:0>](<fail_1179@50:0>:int)|- bot
          
          P[<<m_1030@28:1>@45:0>](<f_main_1176@47:0>:int,<f_main_1176@47:2>:int),
          ((<f_main_1176@47:0> <= 98) && ((<f_main_1176@47:2> <> 91) && (<fail_1179@50:0> = 1)))
          |- P[<fail_1179@50:0>](<fail_1179@50:0>:int)
          
          P[<m_1030@28:0>](<m_1030@28:0>:int),
          P[<<m_1030@31:1>@34:0>](var19:int,var18:int),
          P[<<m_1030@38:1>@41:0>](var18:int,<<m_1030@28:1>@45:0>:int),
          ((var19 = (11 + <m_1030@28:0>)) && (<m_1030@28:0> <= 100))
          |- P[<<m_1030@28:1>@45:0>](<m_1030@28:0>:int,<<m_1030@28:1>@45:0>:int)
          
          P[<m_1030@38:0>](<m_1030@38:0>:int), (((10 + <<m_1030@38:1>@41:0>) = <m_1030@38:0>) && (<m_1030@38:0> > 100))
          |- P[<<m_1030@38:1>@41:0>](<m_1030@38:0>:int,<<m_1030@38:1>@41:0>:int)
          
          P[<m_1030@28:0>](<f_m_1175@36:0>:int),
          P[<<m_1030@31:1>@34:0>](var20:int,<m_1030@38:0>:int),
          ((var20 = (11 + <f_m_1175@36:0>)) && (<f_m_1175@36:0> <= 100)) |- P[<m_1030@38:0>](
          <m_1030@38:0>:int)
          
          P[<m_1030@31:0>](<m_1030@31:0>:int), (((10 + <<m_1030@31:1>@34:0>) = <m_1030@31:0>) && (<m_1030@31:0> > 100))
          |- P[<<m_1030@31:1>@34:0>](<m_1030@31:0>:int,<<m_1030@31:1>@34:0>:int)
          
          P[<m_1030@28:0>](var21:int), (((11 + var21) = <m_1030@31:0>) && (<m_1030@31:0> <= 111))
          |- P[<m_1030@31:0>](<m_1030@31:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1179_sep_50_sep_0($91)) -> 1=0.
(($91-1=0) & ($92-91<>0) & ($93-98<=0)) & (v_sep_m_1030_sep_28_sep_1_sep_45_sep_0($93,$92)) -> v_sep_fail_1179_sep_50_sep_0($91).
(($94-100<=0) & (-$94+$95-11=0)) & (v_sep_m_1030_sep_38_sep_1_sep_41_sep_0($96,$97)) & (v_sep_m_1030_sep_31_sep_1_sep_34_sep_0($95,$96)) & (v_sep_m_1030_sep_28_sep_0($94)) -> v_sep_m_1030_sep_28_sep_1_sep_45_sep_0($94,$97).
(($98-100>0) & (-$98+$99+10=0)) & (v_sep_m_1030_sep_38_sep_0($98)) -> v_sep_m_1030_sep_38_sep_1_sep_41_sep_0($98,$99).
(($100-100<=0) & (-$100+$101-11=0)) & (v_sep_m_1030_sep_31_sep_1_sep_34_sep_0($101,$98)) & (v_sep_m_1030_sep_28_sep_0($100)) -> v_sep_m_1030_sep_38_sep_0($98).
(($102-100>0) & (-$102+$103+10=0)) & (v_sep_m_1030_sep_31_sep_0($102)) -> v_sep_m_1030_sep_31_sep_1_sep_34_sep_0($102,$103).
(($102-111<=0) & (-$102+$104+11=0)) & (v_sep_m_1030_sep_28_sep_0($104)) -> v_sep_m_1030_sep_31_sep_0($102).
$94-98<=0 -> v_sep_m_1030_sep_28_sep_0($94).


v_sep_fail_1179_sep_50_sep_0: X
v_sep_m_1030_sep_28_sep_0: X
v_sep_m_1030_sep_28_sep_1_sep_45_sep_0: X
v_sep_m_1030_sep_31_sep_0: X
v_sep_m_1030_sep_31_sep_1_sep_34_sep_0: X
v_sep_m_1030_sep_38_sep_0: X
v_sep_m_1030_sep_38_sep_1_sep_41_sep_0: X
............
v_sep_fail_1179_sep_50_sep_0: X
v_sep_m_1030_sep_28_sep_0: X
v_sep_m_1030_sep_28_sep_1_sep_45_sep_0: X
v_sep_m_1030_sep_31_sep_0: X
v_sep_m_1030_sep_31_sep_1_sep_34_sep_0: X
v_sep_m_1030_sep_38_sep_0: X
v_sep_m_1030_sep_38_sep_1_sep_41_sep_0: X
....
v_sep_fail_1179_sep_50_sep_0: X
v_sep_m_1030_sep_28_sep_0: X
v_sep_m_1030_sep_28_sep_1_sep_45_sep_0: X
v_sep_m_1030_sep_31_sep_0: X
v_sep_m_1030_sep_31_sep_1_sep_34_sep_0: X
v_sep_m_1030_sep_38_sep_0: X
v_sep_m_1030_sep_38_sep_1_sep_41_sep_0: X
.......
v_sep_fail_1179_sep_50_sep_0: X
v_sep_m_1030_sep_28_sep_0: X
v_sep_m_1030_sep_28_sep_1_sep_45_sep_0: X
v_sep_m_1030_sep_31_sep_0: X
v_sep_m_1030_sep_31_sep_1_sep_34_sep_0: X
v_sep_m_1030_sep_38_sep_0: X
v_sep_m_1030_sep_38_sep_1_sep_41_sep_0: X
.........
v_sep_fail_1179_sep_50_sep_0: X
v_sep_m_1030_sep_28_sep_0: X
v_sep_m_1030_sep_28_sep_1_sep_45_sep_0: X
v_sep_m_1030_sep_31_sep_0: X
v_sep_m_1030_sep_31_sep_1_sep_34_sep_0: X
v_sep_m_1030_sep_38_sep_0: X
v_sep_m_1030_sep_38_sep_1_sep_41_sep_0: X
............(0=0) & (v_sep_fail_1179_sep_50_sep_0($91)) -> 1=0.
(($91-1=0) & ($92-91<>0) & ($93-98<=0)) & (v_sep_m_1030_sep_28_sep_1_sep_45_sep_0($93,$92)) -> v_sep_fail_1179_sep_50_sep_0($91).
(($94-100<=0) & (-$94+$95-11=0)) & (v_sep_m_1030_sep_38_sep_1_sep_41_sep_0($96,$97)) & (v_sep_m_1030_sep_31_sep_1_sep_34_sep_0($95,$96)) & (v_sep_m_1030_sep_28_sep_0($94)) -> v_sep_m_1030_sep_28_sep_1_sep_45_sep_0($94,$97).
(($98-100>0) & (-$98+$99+10=0)) & (v_sep_m_1030_sep_38_sep_0($98)) -> v_sep_m_1030_sep_38_sep_1_sep_41_sep_0($98,$99).
(($100-100<=0) & (-$100+$101-11=0)) & (v_sep_m_1030_sep_31_sep_1_sep_34_sep_0($101,$98)) & (v_sep_m_1030_sep_28_sep_0($100)) -> v_sep_m_1030_sep_38_sep_0($98).
(($102-100>0) & (-$102+$103+10=0)) & (v_sep_m_1030_sep_31_sep_0($102)) -> v_sep_m_1030_sep_31_sep_1_sep_34_sep_0($102,$103).
(($102-111<=0) & (-$102+$104+11=0)) & (v_sep_m_1030_sep_28_sep_0($104)) -> v_sep_m_1030_sep_31_sep_0($102).
$94-98<=0 -> v_sep_m_1030_sep_28_sep_0($94).

           (<m_1030@28:0> <= 98) |- P[<m_1030@28:0>](<m_1030@28:0>:int)
        solution:
          P[<fail_1179@50:0>]($105:bool) = false
          P[<m_1030@28:0>]($123:int) = ($123 <= 98)
          P[<<m_1030@28:1>@45:0>]($108:int,$110:int) = false
          P[<m_1030@31:0>]($129:int) = ($129 <= 109)
          P[<<m_1030@31:1>@34:0>]($118:int,$120:int) = ((2 * $120) <= (89 + $118))
          P[<m_1030@38:0>]($126:int) = ($126 <= 99)
          P[<<m_1030@38:1>@41:0>]($113:int,$115:int) = (103 <= $113)
        
      end HcSolver.solve_ub(4911)[4] (0.032995 sec.)
      begin HcSolver.check_validity(5346)[4]
        input:
          P[<fail_1179@50:0>](<fail_1179@50:0>:bool)|- bot
          
          P[<<m_1030@28:1>@45:0>](<f_main_1176@47:0>:int,<f_main_1176@47:2>:int),
          ((<f_main_1176@47:2> <> 91) && ((<f_main_1176@47:0> <= 98) && <fail_1179@50:0>))
          |- P[<fail_1179@50:0>](<fail_1179@50:0>:bool)
          
          P[<m_1030@28:0>](<m_1030@28:0>:int),
          P[<<m_1030@31:1>@34:0>]((11 + <m_1030@28:0>):int,var18:int),
          P[<<m_1030@38:1>@41:0>](var18:int,<<m_1030@28:1>@45:0>:int), (
          <m_1030@28:0> <= 100) |- P[<<m_1030@28:1>@45:0>](<m_1030@28:0>:int,
                                                           <<m_1030@28:1>@45:0>:int)
          
          P[<m_1030@38:0>](<m_1030@38:0>:int), ((<m_1030@38:0> > 100) && ((10 + <<m_1030@38:1>@41:0>) = <m_1030@38:0>))
          |- P[<<m_1030@38:1>@41:0>](<m_1030@38:0>:int,<<m_1030@38:1>@41:0>:int)
          
          P[<m_1030@28:0>](<f_m_1175@36:0>:int),
          P[<<m_1030@31:1>@34:0>]((11 + <f_m_1175@36:0>):int,<m_1030@38:0>:int), (
          <f_m_1175@36:0> <= 100) |- P[<m_1030@38:0>](<m_1030@38:0>:int)
          
          P[<m_1030@31:0>](<m_1030@31:0>:int), ((<m_1030@31:0> > 100) && ((10 + <<m_1030@31:1>@34:0>) = <m_1030@31:0>))
          |- P[<<m_1030@31:1>@34:0>](<m_1030@31:0>:int,<<m_1030@31:1>@34:0>:int)
          
          P[<m_1030@28:0>]((-11 + <m_1030@31:0>):int), (<m_1030@31:0> <= 111) |- P[<m_1030@31:0>](<m_1030@31:0>:int)
          
           (<m_1030@28:0> <= 98) |- P[<m_1030@28:0>](<m_1030@28:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(5346)[4] (0.009999 sec.)
      solution:
        P[<fail_1179@50:0>]($105:bool) = false
        P[<m_1030@28:0>]($123:int) = ($123 <= 98)
        P[<<m_1030@28:1>@45:0>]($108:int,$110:int) = false
        P[<m_1030@31:0>]($129:int) = ($129 <= 109)
        P[<<m_1030@31:1>@34:0>]($118:int,$120:int) = ((2 * $120) <= (89 + $118))
        P[<m_1030@38:0>]($126:int) = ($126 <= 99)
        P[<<m_1030@38:1>@41:0>]($113:int,$115:int) = (103 <= $113)
    end YhornInterface.solve(4910)[3] (0.042994 sec.)
    
  end RefTypeInfer.infer_etrs(2229)[2] (0.107984 sec.)
  refinement types:
    main_1174: X
    f_1177: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    m_1030: v1:{v1:int | (v1 <= 98)} -> (v2:{v2:int | false} -> X) -> X
    m_1030: v1:{v1:int | (v1 <= 109)} -> (v2:{v2:int | ((2 * v2) <= (89 + v1))} -> X) -> X
    f_m_1175: v1:int -> (v2:int -> X) -> v4:int -> X
    m_1030: v1:{v1:int | (v1 <= 99)} -> (v2:{v2:int | (103 <= v1)} -> X) -> X
    f_main_1176: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1179: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1178: var30:int -> var29:unit -> X
  abstraction types:
    main_1174: X
    f_1177: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    m_1030: var35:int[var35 -> (var35 <= 98),
                      var35 -> (var35 <= 109),
                      var35 -> (var35 <= 99)] ->
            (var36:int[var36 -> ((2 * var36) <= (89 + var35)),
                       var36 -> (103 <= var35)] -> X) -> X
    f_m_1175: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1176: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1179: v1:bool -> (v2:unit -> X) -> X
    f_1178: var30:int -> var29:unit -> X
  
end AbsTypeInfer.refine(2228)[1] (0.110982 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 0

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1174
  main_1174 -> (rand_int f_1177)
  f_1177 x_1149 -> (main_1032 x_1149 (f_1178 x_1149))
  f_1178 x_1149 x_1146 -> end
  f_m_1175 x_1031 k_m_1076 x_1096 -> (m_1030 x_1096 k_m_1076)
  f_main_1176 n_1033 k_main_1114 x_1117 when (x_1117 = 91) -> (k_main_1114 ())
  f_main_1176 n_1033 k_main_1114 x_1117 when (not (x_1117 = 91)) -> (fail_1179 true k_main_1114)
  fail_1179 b k -> {fail} => (k ())
  m_1030 x_1031 k_m_1076 when (x_1031 > 100) -> (k_m_1076 (x_1031 - 10))
  m_1030 x_1031 k_m_1076 when (not (x_1031 > 100)) -> (m_1030 (x_1031 + 11) (f_m_1175 x_1031 k_m_1076))
  main_1032 n_1033 k_main_1114 when (n_1033 <= 98) -> (m_1030 n_1033 (f_main_1176 n_1033 k_main_1114))
  main_1032 n_1033 k_main_1114 when (not (n_1033 <= 98)) -> (k_main_1114 ())
Types:
  main_1174 : X
  fail_1179 : (x_1:bool[x_1] -> (unit -> X) -> X)
  m_1030 : (x_1:int[x_1 <= 99; x_1 <= 109; x_1 <= 98] -> (x_3:int[x_1 >= 103; x_1 >= 2*x_3 - 89] -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... Restart TRecS (param: 1000 -> 2000)
Restart TRecS (param: 2000 -> 4000)
Restart TRecS (param: 4000 -> 8000)
DONE!

Error trace::
  main_1174 ... --> 
  f_1177 ... --> 
  main_1032 [1/2] ... --> 
  m_1030 [2/2] ... --> 
  m_1030 [1/2] ... --> 
  f_m_1175 ... --> 
  m_1030 [2/2] ... --> 
  m_1030 [1/2] ... --> 
  f_m_1175 ... --> 
  m_1030 [1/2] ... --> 
  f_main_1176 [2/2] ... --> 
  fail_1179 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 1; 0; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(10044)[1]
  program:
    main_1174  | true = ((Random.int 0) f_1177)
    f_1177 x_1149 | true = (main_1032 x_1149
                                      (f_1178 x_1149))
    f_1178 x_1149 x_1146 | true = end
    f_m_1175 x_1031 k_m_1076 x_1096 | true = (m_1030 x_1096
                                                     k_m_1076)
    f_main_1176 n_1033 k_main_1114 x_1117 | (x_1117 = 91) = (k_main_1114 ())
    f_main_1176 n_1033 k_main_1114 x_1117 | (not (x_1117 = 91)) = (fail_1179 true
                                                                    k_main_1114)
    fail_1179 b k | true = (fail ())
    m_1030 x_1031 k_m_1076 | (x_1031 > 100) = (k_m_1076 (x_1031 - 10))
    m_1030 x_1031 k_m_1076 | (not (x_1031 > 100)) = (m_1030 (x_1031 + 11)
                                                            (f_m_1175 x_1031
                                                                    k_m_1076))
    main_1032 n_1033 k_main_1114 | (n_1033 <= 98) = (m_1030 n_1033
                                                            (f_main_1176 n_1033
                                                                    k_main_1114))
    main_1032 n_1033 k_main_1114 | (not (n_1033 <= 98)) = (k_main_1114 ())
    main_1174:X
    f_1177:int -> X
    f_1178:int -> unit -> X
    f_m_1175:int -> (int -> X) -> int -> X
    f_main_1176:int -> (unit -> X) -> int -> X
    fail_1179:bool -> (unit -> X) -> X
    m_1030:int -> (int -> X) -> X
    main_1032:int -> (unit -> X) -> X
  inlined functions: f_1177,f_1178,f_m_1175,f_main_1176,main_1032
  counterexample: 0:0:0:1:0:0:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1177@56:0> = var39)
     [true.(<main_1032@58:0> = <f_1177@56:0>)
      [(<main_1032@58:0> <= 98).(<m_1030@61:0> = <main_1032@58:0>)
       [(not (<m_1030@61:0> > 100)).(<m_1030@64:0> = (<m_1030@61:0> + 11))
        [(<m_1030@64:0> > 100).(<<m_1030@64:1>@67:0> = (<m_1030@64:0> - 10))
         [true.((<f_m_1175@69:0> = <m_1030@61:0>) && (<f_m_1175@69:2> = <<m_1030@64:1>@67:0>))
          [true.(<m_1030@71:0> = <f_m_1175@69:2>)
           [(not (<m_1030@71:0> > 100)).(<m_1030@74:0> = (<m_1030@71:0> + 11))
            [(<m_1030@74:0> > 100).(<<m_1030@74:1>@77:0> = (<m_1030@74:0> - 10))
             [true.((<f_m_1175@79:0> = <m_1030@71:0>) && (<f_m_1175@79:2> = <<m_1030@74:1>@77:0>))
              [true.(<m_1030@81:0> = <f_m_1175@79:2>)
               [(<m_1030@81:0> > 100).(<<m_1030@81:1>@84:0> = (<m_1030@81:0> - 10))
                [true.(<<f_m_1175@79:1>@86:0> = <<m_1030@81:1>@84:0>)
                 [true.(<<m_1030@71:1>@88:0> = <<f_m_1175@79:1>@86:0>)
                  [true.(<<f_m_1175@69:1>@90:0> = <<m_1030@71:1>@88:0>)
                   [true.(<<m_1030@61:1>@92:0> = <<f_m_1175@69:1>@90:0>)
                    [true.((<f_main_1176@94:0> = <main_1032@58:0>) && (<f_main_1176@94:2> = <<m_1030@61:1>@92:0>))
                     [(not (<f_main_1176@94:2> = 91)).(<fail_1179@97:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(10045)[2]
    horn clauses:
      P[<fail_1179@97:0>](<fail_1179@97:0>:bool)|- bot
      
      P[<f_main_1176@94:2>](<f_main_1176@94:0>:int,<f_main_1176@94:2>:int),
      ((<f_main_1176@94:2> <> 91) && <fail_1179@97:0>) |- P[<fail_1179@97:0>](
      <fail_1179@97:0>:bool)
      
      P[<main_1032@58:0>](<f_main_1176@94:0>:int),
      P[<<m_1030@61:1>@92:0>](<f_main_1176@94:0>:int,<f_main_1176@94:2>:int), (
      <f_main_1176@94:0> <= 98) |- P[<f_main_1176@94:2>](<f_main_1176@94:0>:int,
                                                         <f_main_1176@94:2>:int)
      
      P[<m_1030@61:0>](<m_1030@61:0>:int),
      P[<<f_m_1175@69:1>@90:0>](<m_1030@61:0>:int,<<m_1030@61:1>@92:0>:int), (
      <m_1030@61:0> <= 100) |- P[<<m_1030@61:1>@92:0>](<m_1030@61:0>:int,
                                                       <<m_1030@61:1>@92:0>:int)
      
      P[<f_m_1175@69:2>](<f_m_1175@69:0>:int,<m_1030@71:0>:int),
      P[<<m_1030@71:1>@88:0>](<m_1030@71:0>:int,<<f_m_1175@69:1>@90:0>:int)|- P[<<f_m_1175@69:1>@90:0>](
      <f_m_1175@69:0>:int,<<f_m_1175@69:1>@90:0>:int)
      
      P[<m_1030@71:0>](<m_1030@71:0>:int),
      P[<<f_m_1175@79:1>@86:0>](<m_1030@71:0>:int,<<m_1030@71:1>@88:0>:int), (
      <m_1030@71:0> <= 100) |- P[<<m_1030@71:1>@88:0>](<m_1030@71:0>:int,
                                                       <<m_1030@71:1>@88:0>:int)
      
      P[<f_m_1175@79:2>](<f_m_1175@79:0>:int,<m_1030@81:0>:int),
      P[<<m_1030@81:1>@84:0>](<m_1030@81:0>:int,<<f_m_1175@79:1>@86:0>:int)|- P[<<f_m_1175@79:1>@86:0>](
      <f_m_1175@79:0>:int,<<f_m_1175@79:1>@86:0>:int)
      
      P[<m_1030@81:0>](<m_1030@81:0>:int), ((<m_1030@81:0> > 100) && ((10 + <<m_1030@81:1>@84:0>) = <m_1030@81:0>))
      |- P[<<m_1030@81:1>@84:0>](<m_1030@81:0>:int,<<m_1030@81:1>@84:0>:int)
      
      P[<f_m_1175@79:2>](<f_m_1175@79:0>:int,<m_1030@81:0>:int)|- P[<m_1030@81:0>](<m_1030@81:0>:int)
      
      P[<m_1030@71:0>](<f_m_1175@79:0>:int),
      P[<<m_1030@74:1>@77:0>]((11 + <f_m_1175@79:0>):int,<f_m_1175@79:2>:int), (
      <f_m_1175@79:0> <= 100) |- P[<f_m_1175@79:2>](<f_m_1175@79:0>:int,
                                                    <f_m_1175@79:2>:int)
      
      P[<m_1030@74:0>](<m_1030@74:0>:int), ((<m_1030@74:0> > 100) && ((10 + <<m_1030@74:1>@77:0>) = <m_1030@74:0>))
      |- P[<<m_1030@74:1>@77:0>](<m_1030@74:0>:int,<<m_1030@74:1>@77:0>:int)
      
      P[<m_1030@71:0>]((-11 + <m_1030@74:0>):int), (<m_1030@74:0> <= 111) |- P[<m_1030@74:0>](<m_1030@74:0>:int)
      
      P[<f_m_1175@69:2>](<f_m_1175@69:0>:int,<m_1030@71:0>:int)|- P[<m_1030@71:0>](<m_1030@71:0>:int)
      
      P[<m_1030@61:0>](<f_m_1175@69:0>:int),
      P[<<m_1030@64:1>@67:0>]((11 + <f_m_1175@69:0>):int,<f_m_1175@69:2>:int), (
      <f_m_1175@69:0> <= 100) |- P[<f_m_1175@69:2>](<f_m_1175@69:0>:int,
                                                    <f_m_1175@69:2>:int)
      
      P[<m_1030@64:0>](<m_1030@64:0>:int), ((<m_1030@64:0> > 100) && ((10 + <<m_1030@64:1>@67:0>) = <m_1030@64:0>))
      |- P[<<m_1030@64:1>@67:0>](<m_1030@64:0>:int,<<m_1030@64:1>@67:0>:int)
      
      P[<m_1030@61:0>]((-11 + <m_1030@64:0>):int), (<m_1030@64:0> <= 111) |- P[<m_1030@64:0>](<m_1030@64:0>:int)
      
      P[<main_1032@58:0>](<m_1030@61:0>:int), (<m_1030@61:0> <= 98) |- P[<m_1030@61:0>](<m_1030@61:0>:int)
      
      P[<f_1177@56:0>](<main_1032@58:0>:int)|- P[<main_1032@58:0>](<main_1032@58:0>:int)
      
      |- P[<f_1177@56:0>](<f_1177@56:0>:int)
    call trees:
      <main_1174@53>
        <f_1177@56>
          <main_1032@58>
            <m_1030@61>
              <m_1030@64>
              </<m_1030@64:1>@67>
              <f_m_1175@69>
                <m_1030@71>
                  <m_1030@74>
                  </<m_1030@74:1>@77>
                  <f_m_1175@79>
                    <m_1030@81>
                    </<m_1030@81:1>@84>
                  </<f_m_1175@79:1>@86>
                </<m_1030@71:1>@88>
              </<f_m_1175@69:1>@90>
            </<m_1030@61:1>@92>
            <f_main_1176@94>
              <fail_1179@97>
    inlined horn clauses:
      P[<fail_1179@97:0>](<fail_1179@97:0>:bool)|- bot
      
      P[<<m_1030@61:1>@92:0>](<f_main_1176@94:0>:int,<f_main_1176@94:2>:int),
      ((<f_main_1176@94:2> <> 91) && ((<f_main_1176@94:0> <= 98) && <fail_1179@97:0>))
      |- P[<fail_1179@97:0>](<fail_1179@97:0>:bool)
      
      P[<m_1030@61:0>](<m_1030@61:0>:int),
      P[<<m_1030@64:1>@67:0>]((11 + <m_1030@61:0>):int,var40:int),
      P[<<m_1030@71:1>@88:0>](var40:int,<<m_1030@61:1>@92:0>:int), (<m_1030@61:0> <= 100)
      |- P[<<m_1030@61:1>@92:0>](<m_1030@61:0>:int,<<m_1030@61:1>@92:0>:int)
      
      P[<m_1030@71:0>](<m_1030@71:0>:int),
      P[<<m_1030@74:1>@77:0>]((11 + <m_1030@71:0>):int,var41:int),
      P[<<m_1030@81:1>@84:0>](var41:int,<<m_1030@71:1>@88:0>:int), (<m_1030@71:0> <= 100)
      |- P[<<m_1030@71:1>@88:0>](<m_1030@71:0>:int,<<m_1030@71:1>@88:0>:int)
      
      P[<m_1030@81:0>](<m_1030@81:0>:int), ((<m_1030@81:0> > 100) && ((10 + <<m_1030@81:1>@84:0>) = <m_1030@81:0>))
      |- P[<<m_1030@81:1>@84:0>](<m_1030@81:0>:int,<<m_1030@81:1>@84:0>:int)
      
      P[<m_1030@71:0>](<f_m_1175@79:0>:int),
      P[<<m_1030@74:1>@77:0>]((11 + <f_m_1175@79:0>):int,<m_1030@81:0>:int), (
      <f_m_1175@79:0> <= 100) |- P[<m_1030@81:0>](<m_1030@81:0>:int)
      
      P[<m_1030@74:0>](<m_1030@74:0>:int), ((<m_1030@74:0> > 100) && ((10 + <<m_1030@74:1>@77:0>) = <m_1030@74:0>))
      |- P[<<m_1030@74:1>@77:0>](<m_1030@74:0>:int,<<m_1030@74:1>@77:0>:int)
      
      P[<m_1030@71:0>]((-11 + <m_1030@74:0>):int), (<m_1030@74:0> <= 111) |- P[<m_1030@74:0>](<m_1030@74:0>:int)
      
      P[<m_1030@61:0>](<f_m_1175@69:0>:int),
      P[<<m_1030@64:1>@67:0>]((11 + <f_m_1175@69:0>):int,<m_1030@71:0>:int), (
      <f_m_1175@69:0> <= 100) |- P[<m_1030@71:0>](<m_1030@71:0>:int)
      
      P[<m_1030@64:0>](<m_1030@64:0>:int), ((<m_1030@64:0> > 100) && ((10 + <<m_1030@64:1>@67:0>) = <m_1030@64:0>))
      |- P[<<m_1030@64:1>@67:0>](<m_1030@64:0>:int,<<m_1030@64:1>@67:0>:int)
      
      P[<m_1030@61:0>]((-11 + <m_1030@64:0>):int), (<m_1030@64:0> <= 111) |- P[<m_1030@64:0>](<m_1030@64:0>:int)
      
       (<m_1030@61:0> <= 98) |- P[<m_1030@61:0>](<m_1030@61:0>:int)
    begin ParamSubstInfer.infer(13292)[3]
      
    end ParamSubstInfer.infer(13292)[3] (1.196818 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(13294)[3]
      
    end RefTypeInfer.elim_coeffs(13294)[3] (0.003000 sec.)
    begin YhornInterface.solve(13938)[3]
      begin HcSolver.solve_ub(13939)[4]
        encoded:
          P[<fail_1179@97:0>](<fail_1179@97:0>:int)|- bot
          
          P[<<m_1030@61:1>@92:0>](<f_main_1176@94:0>:int,<f_main_1176@94:2>:int),
          ((<f_main_1176@94:2> <> 91) && ((<f_main_1176@94:0> <= 98) && (<fail_1179@97:0> = 1)))
          |- P[<fail_1179@97:0>](<fail_1179@97:0>:int)
          
          P[<m_1030@61:0>](<m_1030@61:0>:int),
          P[<<m_1030@64:1>@67:0>]((11 + <m_1030@61:0>):int,var40:int),
          P[<<m_1030@71:1>@88:0>](var40:int,<<m_1030@61:1>@92:0>:int), (
          <m_1030@61:0> <= 100) |- P[<<m_1030@61:1>@92:0>](<m_1030@61:0>:int,
                                                           <<m_1030@61:1>@92:0>:int)
          
          P[<m_1030@71:0>](<m_1030@71:0>:int),
          P[<<m_1030@74:1>@77:0>]((11 + <m_1030@71:0>):int,var41:int),
          P[<<m_1030@81:1>@84:0>](var41:int,<<m_1030@71:1>@88:0>:int), (
          <m_1030@71:0> <= 100) |- P[<<m_1030@71:1>@88:0>](<m_1030@71:0>:int,
                                                           <<m_1030@71:1>@88:0>:int)
          
          P[<m_1030@81:0>](<m_1030@81:0>:int), ((<m_1030@81:0> > 100) && ((10 + <<m_1030@81:1>@84:0>) = <m_1030@81:0>))
          |- P[<<m_1030@81:1>@84:0>](<m_1030@81:0>:int,<<m_1030@81:1>@84:0>:int)
          
          P[<m_1030@71:0>](<f_m_1175@79:0>:int),
          P[<<m_1030@74:1>@77:0>]((11 + <f_m_1175@79:0>):int,<m_1030@81:0>:int), (
          <f_m_1175@79:0> <= 100) |- P[<m_1030@81:0>](<m_1030@81:0>:int)
          
          P[<m_1030@74:0>](<m_1030@74:0>:int), ((<m_1030@74:0> > 100) && ((10 + <<m_1030@74:1>@77:0>) = <m_1030@74:0>))
          |- P[<<m_1030@74:1>@77:0>](<m_1030@74:0>:int,<<m_1030@74:1>@77:0>:int)
          
          P[<m_1030@71:0>]((-11 + <m_1030@74:0>):int), (<m_1030@74:0> <= 111) |- P[<m_1030@74:0>](<m_1030@74:0>:int)
          
          P[<m_1030@61:0>](<f_m_1175@69:0>:int),
          P[<<m_1030@64:1>@67:0>]((11 + <f_m_1175@69:0>):int,<m_1030@71:0>:int), (
          <f_m_1175@69:0> <= 100) |- P[<m_1030@71:0>](<m_1030@71:0>:int)
          
          P[<m_1030@64:0>](<m_1030@64:0>:int), ((<m_1030@64:0> > 100) && ((10 + <<m_1030@64:1>@67:0>) = <m_1030@64:0>))
          |- P[<<m_1030@64:1>@67:0>](<m_1030@64:0>:int,<<m_1030@64:1>@67:0>:int)
          
          P[<m_1030@61:0>]((-11 + <m_1030@64:0>):int), (<m_1030@64:0> <= 111) |- P[<m_1030@64:0>](<m_1030@64:0>:int)
          
           (<m_1030@61:0> <= 98) |- P[<m_1030@61:0>](<m_1030@61:0>:int)
        input to Yhorn:
          P[<fail_1179@97:0>](<fail_1179@97:0>:int)|- bot
          
          P[<<m_1030@61:1>@92:0>](<f_main_1176@94:0>:int,<f_main_1176@94:2>:int),
          ((<f_main_1176@94:0> <= 98) && ((<f_main_1176@94:2> <> 91) && (<fail_1179@97:0> = 1)))
          |- P[<fail_1179@97:0>](<fail_1179@97:0>:int)
          
          P[<m_1030@61:0>](<m_1030@61:0>:int),
          P[<<m_1030@64:1>@67:0>](var42:int,var40:int),
          P[<<m_1030@71:1>@88:0>](var40:int,<<m_1030@61:1>@92:0>:int),
          ((var42 = (11 + <m_1030@61:0>)) && (<m_1030@61:0> <= 100))
          |- P[<<m_1030@61:1>@92:0>](<m_1030@61:0>:int,<<m_1030@61:1>@92:0>:int)
          
          P[<m_1030@71:0>](<m_1030@71:0>:int),
          P[<<m_1030@74:1>@77:0>](var43:int,var41:int),
          P[<<m_1030@81:1>@84:0>](var41:int,<<m_1030@71:1>@88:0>:int),
          ((var43 = (11 + <m_1030@71:0>)) && (<m_1030@71:0> <= 100))
          |- P[<<m_1030@71:1>@88:0>](<m_1030@71:0>:int,<<m_1030@71:1>@88:0>:int)
          
          P[<m_1030@81:0>](<m_1030@81:0>:int), (((10 + <<m_1030@81:1>@84:0>) = <m_1030@81:0>) && (<m_1030@81:0> > 100))
          |- P[<<m_1030@81:1>@84:0>](<m_1030@81:0>:int,<<m_1030@81:1>@84:0>:int)
          
          P[<m_1030@71:0>](<f_m_1175@79:0>:int),
          P[<<m_1030@74:1>@77:0>](var44:int,<m_1030@81:0>:int),
          ((var44 = (11 + <f_m_1175@79:0>)) && (<f_m_1175@79:0> <= 100)) |- P[<m_1030@81:0>](
          <m_1030@81:0>:int)
          
          P[<m_1030@74:0>](<m_1030@74:0>:int), (((10 + <<m_1030@74:1>@77:0>) = <m_1030@74:0>) && (<m_1030@74:0> > 100))
          |- P[<<m_1030@74:1>@77:0>](<m_1030@74:0>:int,<<m_1030@74:1>@77:0>:int)
          
          P[<m_1030@71:0>](var45:int), (((11 + var45) = <m_1030@74:0>) && (<m_1030@74:0> <= 111))
          |- P[<m_1030@74:0>](<m_1030@74:0>:int)
          
          P[<m_1030@61:0>](<f_m_1175@69:0>:int),
          P[<<m_1030@64:1>@67:0>](var46:int,<m_1030@71:0>:int),
          ((var46 = (11 + <f_m_1175@69:0>)) && (<f_m_1175@69:0> <= 100)) |- P[<m_1030@71:0>](
          <m_1030@71:0>:int)
          
          P[<m_1030@64:0>](<m_1030@64:0>:int), (((10 + <<m_1030@64:1>@67:0>) = <m_1030@64:0>) && (<m_1030@64:0> > 100))
          |- P[<<m_1030@64:1>@67:0>](<m_1030@64:0>:int,<<m_1030@64:1>@67:0>:int)
          
          P[<m_1030@61:0>](var47:int), (((11 + var47) = <m_1030@64:0>) && (<m_1030@64:0> <= 111))
          |- P[<m_1030@64:0>](<m_1030@64:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1179_sep_97_sep_0($259)) -> 1=0.
(($259-1=0) & ($260-91<>0) & ($261-98<=0)) & (v_sep_m_1030_sep_61_sep_1_sep_92_sep_0($261,$260)) -> v_sep_fail_1179_sep_97_sep_0($259).
(($262-100<=0) & (-$262+$263-11=0)) & (v_sep_m_1030_sep_71_sep_1_sep_88_sep_0($264,$265)) & (v_sep_m_1030_sep_64_sep_1_sep_67_sep_0($263,$264)) & (v_sep_m_1030_sep_61_sep_0($262)) -> v_sep_m_1030_sep_61_sep_1_sep_92_sep_0($262,$265).
(($266-100<=0) & (-$266+$267-11=0)) & (v_sep_m_1030_sep_81_sep_1_sep_84_sep_0($268,$269)) & (v_sep_m_1030_sep_74_sep_1_sep_77_sep_0($267,$268)) & (v_sep_m_1030_sep_71_sep_0($266)) -> v_sep_m_1030_sep_71_sep_1_sep_88_sep_0($266,$269).
(($270-100>0) & (-$270+$271+10=0)) & (v_sep_m_1030_sep_81_sep_0($270)) -> v_sep_m_1030_sep_81_sep_1_sep_84_sep_0($270,$271).
(($272-100<=0) & (-$272+$273-11=0)) & (v_sep_m_1030_sep_74_sep_1_sep_77_sep_0($273,$270)) & (v_sep_m_1030_sep_71_sep_0($272)) -> v_sep_m_1030_sep_81_sep_0($270).
(($274-100>0) & (-$274+$275+10=0)) & (v_sep_m_1030_sep_74_sep_0($274)) -> v_sep_m_1030_sep_74_sep_1_sep_77_sep_0($274,$275).
(($274-111<=0) & (-$274+$276+11=0)) & (v_sep_m_1030_sep_71_sep_0($276)) -> v_sep_m_1030_sep_74_sep_0($274).
(($277-100<=0) & (-$277+$278-11=0)) & (v_sep_m_1030_sep_64_sep_1_sep_67_sep_0($278,$266)) & (v_sep_m_1030_sep_61_sep_0($277)) -> v_sep_m_1030_sep_71_sep_0($266).
(($279-100>0) & (-$279+$280+10=0)) & (v_sep_m_1030_sep_64_sep_0($279)) -> v_sep_m_1030_sep_64_sep_1_sep_67_sep_0($279,$280).
(($279-111<=0) & (-$279+$281+11=0)) & (v_sep_m_1030_sep_61_sep_0($281)) -> v_sep_m_1030_sep_64_sep_0($279).
$262-98<=0 -> v_sep_m_1030_sep_61_sep_0($262).


v_sep_fail_1179_sep_97_sep_0: X
v_sep_m_1030_sep_61_sep_0: X
v_sep_m_1030_sep_61_sep_1_sep_92_sep_0: X
v_sep_m_1030_sep_64_sep_0: X
v_sep_m_1030_sep_64_sep_1_sep_67_sep_0: X
v_sep_m_1030_sep_71_sep_0: X
v_sep_m_1030_sep_71_sep_1_sep_88_sep_0: X
v_sep_m_1030_sep_74_sep_0: X
v_sep_m_1030_sep_74_sep_1_sep_77_sep_0: X
v_sep_m_1030_sep_81_sep_0: X
v_sep_m_1030_sep_81_sep_1_sep_84_sep_0: X
...................
v_sep_fail_1179_sep_97_sep_0: X
v_sep_m_1030_sep_61_sep_0: X
v_sep_m_1030_sep_61_sep_1_sep_92_sep_0: X
v_sep_m_1030_sep_64_sep_0: X
v_sep_m_1030_sep_64_sep_1_sep_67_sep_0: X
v_sep_m_1030_sep_71_sep_0: X
v_sep_m_1030_sep_71_sep_1_sep_88_sep_0: X
v_sep_m_1030_sep_74_sep_0: X
v_sep_m_1030_sep_74_sep_1_sep_77_sep_0: X
v_sep_m_1030_sep_81_sep_0: X
v_sep_m_1030_sep_81_sep_1_sep_84_sep_0: X
....
v_sep_fail_1179_sep_97_sep_0: X
v_sep_m_1030_sep_61_sep_0: X
v_sep_m_1030_sep_61_sep_1_sep_92_sep_0: X
v_sep_m_1030_sep_64_sep_0: X
v_sep_m_1030_sep_64_sep_1_sep_67_sep_0: X
v_sep_m_1030_sep_71_sep_0: X
v_sep_m_1030_sep_71_sep_1_sep_88_sep_0: X
v_sep_m_1030_sep_74_sep_0: X
v_sep_m_1030_sep_74_sep_1_sep_77_sep_0: X
v_sep_m_1030_sep_81_sep_0: X
v_sep_m_1030_sep_81_sep_1_sep_84_sep_0: X
.......
v_sep_fail_1179_sep_97_sep_0: X
v_sep_m_1030_sep_61_sep_0: X
v_sep_m_1030_sep_61_sep_1_sep_92_sep_0: X
v_sep_m_1030_sep_64_sep_0: X
v_sep_m_1030_sep_64_sep_1_sep_67_sep_0: X
v_sep_m_1030_sep_71_sep_0: X
v_sep_m_1030_sep_71_sep_1_sep_88_sep_0: X
v_sep_m_1030_sep_74_sep_0: X
v_sep_m_1030_sep_74_sep_1_sep_77_sep_0: X
v_sep_m_1030_sep_81_sep_0: X
v_sep_m_1030_sep_81_sep_1_sep_84_sep_0: X
...........
v_sep_fail_1179_sep_97_sep_0: X
v_sep_m_1030_sep_61_sep_0: X
v_sep_m_1030_sep_61_sep_1_sep_92_sep_0: X
v_sep_m_1030_sep_64_sep_0: X
v_sep_m_1030_sep_64_sep_1_sep_67_sep_0: X
v_sep_m_1030_sep_71_sep_0: X
v_sep_m_1030_sep_71_sep_1_sep_88_sep_0: X
v_sep_m_1030_sep_74_sep_0: X
v_sep_m_1030_sep_74_sep_1_sep_77_sep_0: X
v_sep_m_1030_sep_81_sep_0: X
v_sep_m_1030_sep_81_sep_1_sep_84_sep_0: X
................
v_sep_fail_1179_sep_97_sep_0: X
v_sep_m_1030_sep_61_sep_0: X
v_sep_m_1030_sep_61_sep_1_sep_92_sep_0: X
v_sep_m_1030_sep_64_sep_0: X
v_sep_m_1030_sep_64_sep_1_sep_67_sep_0: X
v_sep_m_1030_sep_71_sep_0: X
v_sep_m_1030_sep_71_sep_1_sep_88_sep_0: X
v_sep_m_1030_sep_74_sep_0: X
v_sep_m_1030_sep_74_sep_1_sep_77_sep_0: X
v_sep_m_1030_sep_81_sep_0: X
v_sep_m_1030_sep_81_sep_1_sep_84_sep_0: X
...................(0=0) & (v_sep_fail_1179_sep_97_sep_0($259)) -> 1=0.
(($259-1=0) & ($260-91<>0) & ($261-98<=0)) & (v_sep_m_1030_sep_61_sep_1_sep_92_sep_0($261,$260)) -> v_sep_fail_1179_sep_97_sep_0($259).
(($262-100<=0) & (-$262+$263-11=0)) & (v_sep_m_1030_sep_71_sep_1_sep_88_sep_0($264,$265)) & (v_sep_m_1030_sep_64_sep_1_sep_67_sep_0($263,$264)) & (v_sep_m_1030_sep_61_sep_0($262)) -> v_sep_m_1030_sep_61_sep_1_sep_92_sep_0($262,$265).
(($266-100<=0) & (-$266+$267-11=0)) & (v_sep_m_1030_sep_81_sep_1_sep_84_sep_0($268,$269)) & (v_sep_m_1030_sep_74_sep_1_sep_77_sep_0($267,$268)) & (v_sep_m_1030_sep_71_sep_0($266)) -> v_sep_m_1030_sep_71_sep_1_sep_88_sep_0($266,$269).
(($270-100>0) & (-$270+$271+10=0)) & (v_sep_m_1030_sep_81_sep_0($270)) -> v_sep_m_1030_sep_81_sep_1_sep_84_sep_0($270,$271).
(($272-100<=0) & (-$272+$273-11=0)) & (v_sep_m_1030_sep_74_sep_1_sep_77_sep_0($273,$270)) & (v_sep_m_1030_sep_71_sep_0($272)) -> v_sep_m_1030_sep_81_sep_0($270).
(($274-100>0) & (-$274+$275+10=0)) & (v_sep_m_1030_sep_74_sep_0($274)) -> v_sep_m_1030_sep_74_sep_1_sep_77_sep_0($274,$275).
(($274-111<=0) & (-$274+$276+11=0)) & (v_sep_m_1030_sep_71_sep_0($276)) -> v_sep_m_1030_sep_74_sep_0($274).
(($277-100<=0) & (-$277+$278-11=0)) & (v_sep_m_1030_sep_64_sep_1_sep_67_sep_0($278,$266)) & (v_sep_m_1030_sep_61_sep_0($277)) -> v_sep_m_1030_sep_71_sep_0($266).
(($279-100>0) & (-$279+$280+10=0)) & (v_sep_m_1030_sep_64_sep_0($279)) -> v_sep_m_1030_sep_64_sep_1_sep_67_sep_0($279,$280).
(($279-111<=0) & (-$279+$281+11=0)) & (v_sep_m_1030_sep_61_sep_0($281)) -> v_sep_m_1030_sep_64_sep_0($279).
$262-98<=0 -> v_sep_m_1030_sep_61_sep_0($262).

           (<m_1030@61:0> <= 98) |- P[<m_1030@61:0>](<m_1030@61:0>:int)
        solution:
          P[<fail_1179@97:0>]($282:bool) = false
          P[<m_1030@61:0>]($300:int) = ($300 <= 98)
          P[<<m_1030@61:1>@92:0>]($285:int,$287:int) = false
          P[<m_1030@64:0>]($322:int) = ($322 <= 109)
          P[<<m_1030@64:1>@67:0>]($295:int,$297:int) = ((2 * $297) <= (89 + $295))
          P[<m_1030@71:0>]($313:int) = ($313 <= 99)
          P[<<m_1030@71:1>@88:0>]($290:int,$292:int) = (104 <= $290)
          P[<m_1030@74:0>]($319:int) = ($319 <= 110)
          P[<<m_1030@74:1>@77:0>]($308:int,$310:int) = ((3 * $310) <= (80 + (2 * $308)))
          P[<m_1030@81:0>]($316:int) = ((3 * $316) <= 301)
          P[<<m_1030@81:1>@84:0>]($303:int,$305:int) = (305 <= (3 * $303))
        
      end HcSolver.solve_ub(13939)[4] (0.066989 sec.)
      begin HcSolver.check_validity(14611)[4]
        input:
          P[<fail_1179@97:0>](<fail_1179@97:0>:bool)|- bot
          
          P[<<m_1030@61:1>@92:0>](<f_main_1176@94:0>:int,<f_main_1176@94:2>:int),
          ((<f_main_1176@94:2> <> 91) && ((<f_main_1176@94:0> <= 98) && <fail_1179@97:0>))
          |- P[<fail_1179@97:0>](<fail_1179@97:0>:bool)
          
          P[<m_1030@61:0>](<m_1030@61:0>:int),
          P[<<m_1030@64:1>@67:0>]((11 + <m_1030@61:0>):int,var40:int),
          P[<<m_1030@71:1>@88:0>](var40:int,<<m_1030@61:1>@92:0>:int), (
          <m_1030@61:0> <= 100) |- P[<<m_1030@61:1>@92:0>](<m_1030@61:0>:int,
                                                           <<m_1030@61:1>@92:0>:int)
          
          P[<m_1030@71:0>](<m_1030@71:0>:int),
          P[<<m_1030@74:1>@77:0>]((11 + <m_1030@71:0>):int,var41:int),
          P[<<m_1030@81:1>@84:0>](var41:int,<<m_1030@71:1>@88:0>:int), (
          <m_1030@71:0> <= 100) |- P[<<m_1030@71:1>@88:0>](<m_1030@71:0>:int,
                                                           <<m_1030@71:1>@88:0>:int)
          
          P[<m_1030@81:0>](<m_1030@81:0>:int), ((<m_1030@81:0> > 100) && ((10 + <<m_1030@81:1>@84:0>) = <m_1030@81:0>))
          |- P[<<m_1030@81:1>@84:0>](<m_1030@81:0>:int,<<m_1030@81:1>@84:0>:int)
          
          P[<m_1030@71:0>](<f_m_1175@79:0>:int),
          P[<<m_1030@74:1>@77:0>]((11 + <f_m_1175@79:0>):int,<m_1030@81:0>:int), (
          <f_m_1175@79:0> <= 100) |- P[<m_1030@81:0>](<m_1030@81:0>:int)
          
          P[<m_1030@74:0>](<m_1030@74:0>:int), ((<m_1030@74:0> > 100) && ((10 + <<m_1030@74:1>@77:0>) = <m_1030@74:0>))
          |- P[<<m_1030@74:1>@77:0>](<m_1030@74:0>:int,<<m_1030@74:1>@77:0>:int)
          
          P[<m_1030@71:0>]((-11 + <m_1030@74:0>):int), (<m_1030@74:0> <= 111) |- P[<m_1030@74:0>](<m_1030@74:0>:int)
          
          P[<m_1030@61:0>](<f_m_1175@69:0>:int),
          P[<<m_1030@64:1>@67:0>]((11 + <f_m_1175@69:0>):int,<m_1030@71:0>:int), (
          <f_m_1175@69:0> <= 100) |- P[<m_1030@71:0>](<m_1030@71:0>:int)
          
          P[<m_1030@64:0>](<m_1030@64:0>:int), ((<m_1030@64:0> > 100) && ((10 + <<m_1030@64:1>@67:0>) = <m_1030@64:0>))
          |- P[<<m_1030@64:1>@67:0>](<m_1030@64:0>:int,<<m_1030@64:1>@67:0>:int)
          
          P[<m_1030@61:0>]((-11 + <m_1030@64:0>):int), (<m_1030@64:0> <= 111) |- P[<m_1030@64:0>](<m_1030@64:0>:int)
          
           (<m_1030@61:0> <= 98) |- P[<m_1030@61:0>](<m_1030@61:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(14611)[4] (0.011999 sec.)
      solution:
        P[<fail_1179@97:0>]($282:bool) = false
        P[<m_1030@61:0>]($300:int) = ($300 <= 98)
        P[<<m_1030@61:1>@92:0>]($285:int,$287:int) = false
        P[<m_1030@64:0>]($322:int) = ($322 <= 109)
        P[<<m_1030@64:1>@67:0>]($295:int,$297:int) = ((2 * $297) <= (89 + $295))
        P[<m_1030@71:0>]($313:int) = ($313 <= 99)
        P[<<m_1030@71:1>@88:0>]($290:int,$292:int) = (104 <= $290)
        P[<m_1030@74:0>]($319:int) = ($319 <= 110)
        P[<<m_1030@74:1>@77:0>]($308:int,$310:int) = ((3 * $310) <= (80 + (2 * $308)))
        P[<m_1030@81:0>]($316:int) = ((3 * $316) <= 301)
        P[<<m_1030@81:1>@84:0>]($303:int,$305:int) = (305 <= (3 * $303))
    end YhornInterface.solve(13938)[3] (0.078988 sec.)
    
  end RefTypeInfer.infer_etrs(10045)[2] (1.298802 sec.)
  refinement types:
    main_1174: X
    f_1177: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    m_1030: v1:{v1:int | (v1 <= 98)} -> (v2:{v2:int | false} -> X) -> X
    m_1030: v1:{v1:int | (v1 <= 109)} -> (v2:{v2:int | ((2 * v2) <= (89 + v1))} -> X) -> X
    f_m_1175: v1:int -> (v2:int -> X) -> v4:int -> X
    m_1030: v1:{v1:int | (v1 <= 99)} -> (v2:{v2:int | (104 <= v1)} -> X) -> X
    m_1030: v1:{v1:int | (v1 <= 110)} -> (v2:{v2:int | ((3 * v2) <= (80 + (2 * v1)))} -> X) -> X
    f_m_1175: v1:int -> (v2:int -> X) -> v4:int -> X
    m_1030: v1:{v1:int | ((3 * v1) <= 301)} -> (v2:{v2:int | (305 <= (3 * v1))} -> X) -> X
    f_main_1176: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1179: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1178: var56:int -> var55:unit -> X
  abstraction types:
    main_1174: X
    f_1177: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    m_1030: var69:int[var69 -> (var69 <= 98),
                      var69 -> (var69 <= 109),
                      var69 -> (var69 <= 99),
                      var69 -> (var69 <= 110),
                      var69 -> ((3 * var69) <= 301)] ->
            (var70:int[var70 -> ((2 * var70) <= (89 + var69)),
                       var70 -> (104 <= var69),
                       var70 -> ((3 * var70) <= (80 + (2 * var69))),
                       var70 -> (305 <= (3 * var69))] -> X) -> X
    f_m_1175: var73:int -> (var74:int -> X) -> var76:int -> X
    f_main_1176: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1179: v1:bool -> (v2:unit -> X) -> X
    f_1178: var56:int -> var55:unit -> X
  
end AbsTypeInfer.refine(10044)[1] (1.299802 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 1; 0; 0; 0

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1174
  main_1174 -> (rand_int f_1177)
  f_1177 x_1149 -> (main_1032 x_1149 (f_1178 x_1149))
  f_1178 x_1149 x_1146 -> end
  f_m_1175 x_1031 k_m_1076 x_1096 -> (m_1030 x_1096 k_m_1076)
  f_main_1176 n_1033 k_main_1114 x_1117 when (x_1117 = 91) -> (k_main_1114 ())
  f_main_1176 n_1033 k_main_1114 x_1117 when (not (x_1117 = 91)) -> (fail_1179 true k_main_1114)
  fail_1179 b k -> {fail} => (k ())
  m_1030 x_1031 k_m_1076 when (x_1031 > 100) -> (k_m_1076 (x_1031 - 10))
  m_1030 x_1031 k_m_1076 when (not (x_1031 > 100)) -> (m_1030 (x_1031 + 11) (f_m_1175 x_1031 k_m_1076))
  main_1032 n_1033 k_main_1114 when (n_1033 <= 98) -> (m_1030 n_1033 (f_main_1176 n_1033 k_main_1114))
  main_1032 n_1033 k_main_1114 when (not (n_1033 <= 98)) -> (k_main_1114 ())
Types:
  main_1174 : X
  fail_1179 : (x_1:bool[x_1] -> (unit -> X) -> X)
  m_1030 : (x_1:int[3*x_1 <= 301; x_1 <= 110; x_1 <= 99; x_1 <= 109; x_1 <= 98] ->
            (x_3:int[3*x_1 >= 305; 2*x_1 >= 3*x_3 - 80; x_1 >= 104; x_1 >= 103; x_1 >= 2*x_3 - 89] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... 