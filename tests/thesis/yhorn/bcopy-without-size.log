MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn bcopy-without-size.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 des_1034 i_1035 x_1036 = (match des_1034 i_1035 with
                                             | _ -> ()
                                             | _ -> let u_1065 = {fail} 
                                                    in
                                                      _|_) 
 in
 let rec bcopy_aux_1037 m_1038 src_1039 des_1040 i_1041 =
   if i_1041 >= m_1038 then
     ()
   else
     let u_1120 = update_1033 des_1040 i_1041 (src_1039 i_1041) 
     in
       bcopy_aux_1037 m_1038 src_1039 des_1040 (i_1041 + 1) 
 in
 let main_1042 n_1043 m_1044 =
   let array1_1045 = make_array_1030 n_1043 
   in
   let array2_1046 = make_array_1030 m_1044 
   in
     if n_1043 <= m_1044 then
       bcopy_aux_1037 n_1043 array1_1045 array2_1046 0
     else
       () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 des_1034 i_1035 x_1036 = (match des_1034 i_1035 with
                                             | _ -> ()
                                             | _ -> let u_1065 = {fail} 
                                                    in
                                                      _|_) 
 in
 let rec bcopy_aux_1037 m_1038 src_1039 des_1040 i_1041 =
   if i_1041 >= m_1038 then
     ()
   else
     let u_1120 = update_1033 des_1040 i_1041 (src_1039 i_1041) 
     in
       bcopy_aux_1037 m_1038 src_1039 des_1040 (i_1041 + 1) 
 in
 let main_1042 n_1043 m_1044 =
   let array1_1045 = make_array_1030 n_1043 
   in
   let array2_1046 = make_array_1030 m_1044 
   in
     if n_1043 <= m_1044 then
       bcopy_aux_1037 n_1043 array1_1045 array2_1046 0
     else
       () 
 in
 let main_1151 = let arg1_1149 = rand_int () 
                 in
                 let arg2_1150 = rand_int () 
                 in
                   main_1042 arg1_1149 arg2_1150 
 in
   ()

copy_poly::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let update_1153 (des_1034:(int -> int)) (i_1035:int) (x_1036:int) =
   (match des_1034 i_1035 with
      | _ -> ()
      | _ -> let u_1065 = {fail} 
             in
               _|_) 
 in
 let rec bcopy_aux_1152 (m_1038:int) (src_1039:(int -> int)) (des_1040:(
   int -> int)) (i_1041:int) =
   if i_1041 >= m_1038 then
     ()
   else
     let u_1120 = update_1153 des_1040 i_1041 (src_1039 i_1041) 
     in
       bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) 
 in
 let main_1042 (n_1043:int) (m_1044:int) =
   let array1_1045 = make_array_1030 n_1043 
   in
   let array2_1046 = make_array_1030 m_1044 
   in
     if n_1043 <= m_1044 then
       bcopy_aux_1152 n_1043 array1_1045 array2_1046 0
     else
       () 
 in
 let main_1151 = let arg1_1149 = rand_int () 
                 in
                 let arg2_1150 = rand_int () 
                 in
                   main_1042 arg1_1149 arg2_1150 
 in
   ()

abst_recdata::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1153 des_1034 i_1035 x_1036 = let u_1154 = des_1034 i_1035 
                                          in
                                            () 
 in
 let rec bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 =
   if i_1041 >= m_1038 then
     ()
   else
     let u_1120 = update_1153 des_1040 i_1041 (src_1039 i_1041) 
     in
       bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) 
 in
 let main_1042 n_1043 m_1044 =
   let array1_1045 = make_array_1030 n_1043 
   in
   let array2_1046 = make_array_1030 m_1044 
   in
     if n_1043 <= m_1044 then
       bcopy_aux_1152 n_1043 array1_1045 array2_1046 0
     else
       () 
 in
 let main_1151 = let arg1_1149 = rand_int () 
                 in
                 let arg2_1150 = rand_int () 
                 in
                   main_1042 arg1_1149 arg2_1150 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1182:(int -> X)) =
   let k_make_array_u_1199 (x_1185:unit) = k_make_array_1182 0 
   in
   let k_make_array_u_1188 (b_1200:bool) =
     if b_1200 then
       k_make_array_u_1199 ()
     else
       {|fail|} () k_make_array_u_1199 
   in
     if 0 <= i_1032 then
       k_make_array_u_1188 (i_1032 < n_1031)
     else
       k_make_array_u_1188 false 
 in
 let update_1153 (des_1034:(int -> ((int -> X) -> X))) (i_1035:int) (x_1036:int) (k_update_1232:(
   unit -> X)) = des_1034 i_1035 (fun x_1235 -> k_update_1232 ()) 
 in
 let rec bcopy_aux_1152
   (m_1038:int) (src_1039:(int -> ((int -> X) -> X))) (des_1040:(int -> ((int -> X) -> X))) (i_1041:int) (k_bcopy_aux_1292:(
   unit -> X)) =
   if i_1041 >= m_1038 then
     k_bcopy_aux_1292 ()
   else
     src_1039 i_1041
       (fun x_1323 ->
          update_1153 des_1040 i_1041 x_1323
            (fun x_1295 -> bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) k_bcopy_aux_1292)) 
 in
 let main_1042 (n_1043:int) (m_1044:int) (k_main_1369:(unit -> X)) =
   if n_1043 <= m_1044 then
     bcopy_aux_1152 n_1043 (make_array_1030 n_1043) (make_array_1030 m_1044) 0 k_main_1369
   else
     k_main_1369 () 
 in
   rand_int_cps () (fun x_1436 -> rand_int_cps () (fun x_1449 -> main_1042 x_1436 x_1449 (fun x_1433 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1478
  main_1478 -> (rand_int f_1482)
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (i_1041 >= m_1038) -> (k_bcopy_aux_1292 ())
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (
      not (i_1041 >= m_1038)) -> (src_1039 i_1041 (f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039))
  f_1482 x_1436 -> (rand_int (f_1483 x_1436))
  f_1483 x_1436 x_1449 -> (main_1042 x_1436 x_1449 (f_1484 x_1436 x_1449))
  f_1484 x_1436 x_1449 x_1433 -> end
  f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 ->
      (update_1153 des_1040 i_1041 x_1323 (f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039))
  f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 ->
      (bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) k_bcopy_aux_1292)
  f_update_1479 i_1035 x_1036 k_update_1232 x_1235 -> (k_update_1232 ())
  fail_1485 b k -> {fail} => (k ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when b_1200 ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when (not b_1200) ->
      (fail_1485 true (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182))
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 -> (k_make_array_1182 0)
  main_1042 n_1043 m_1044 k_main_1369 when (n_1043 <= m_1044) ->
      (bcopy_aux_1152 n_1043 (make_array_1030 n_1043) (make_array_1030 m_1044) 0 k_main_1369)
  main_1042 n_1043 m_1044 k_main_1369 when (not (n_1043 <= m_1044)) -> (k_main_1369 ())
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (0 <= i_1032) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (not (0 <= i_1032)) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 false)
  update_1153 des_1034 i_1035 x_1036 k_update_1232 -> (des_1034 i_1035 (f_update_1479 i_1035 x_1036 k_update_1232))
Types:
  main_1478 : X
  bcopy_aux_1152 : (int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  fail_1485 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1478 ... --> 
  f_1482 ... --> 
  f_1483 ... --> 
  main_1042 [1/2] ... --> 
  bcopy_aux_1152 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1188 [2/2] ... --> 
  fail_1485 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(186)[1]
  program:
    main_1478  | true = ((Random.int 0) f_1482)
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    i_1041 >= m_1038) = (k_bcopy_aux_1292 ())
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    not (i_1041 >= m_1038)) = (src_1039 i_1041
                                        (f_bcopy_aux_1480 i_1041
                                                          m_1038
                                                          des_1040
                                                          k_bcopy_aux_1292
                                                          src_1039))
    f_1482 x_1436 | true = ((Random.int 0) (f_1483 x_1436))
    f_1483 x_1436 x_1449 | true = (main_1042 x_1436
                                             x_1449
                                             (f_1484 x_1436
                                                     x_1449))
    f_1484 x_1436 x_1449 x_1433 | true = end
    f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 | true = (
    update_1153 des_1040
                i_1041
                x_1323
                (f_bcopy_aux_1481 i_1041
                                  m_1038
                                  x_1323
                                  des_1040
                                  k_bcopy_aux_1292
                                  src_1039))
    f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 | true = (
    bcopy_aux_1152 m_1038
                   src_1039
                   des_1040
                   (i_1041 + 1)
                   k_bcopy_aux_1292)
    f_update_1479 i_1035 x_1036 k_update_1232 x_1235 | true = (k_update_1232 ())
    fail_1485 b k | true = (fail ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | b_1200 = (
    k_make_array_u_1199 i_1032
                        n_1031
                        k_make_array_1182
                        ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | (not b_1200) = (
    fail_1485 true
              (k_make_array_u_1199 i_1032
                                   n_1031
                                   k_make_array_1182))
    k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 | true = (
    k_make_array_1182 0)
    main_1042 n_1043 m_1044 k_main_1369 | (n_1043 <= m_1044) = (bcopy_aux_1152
                                                                  n_1043
                                                                  (make_array_1030 n_1043)
                                                                  (make_array_1030 m_1044)
                                                                  0
                                                                  k_main_1369)
    main_1042 n_1043 m_1044 k_main_1369 | (not (n_1043 <= m_1044)) = (
    k_main_1369 ())
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (0 <= i_1032) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (not (0 <= i_1032)) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        false)
    update_1153 des_1034 i_1035 x_1036 k_update_1232 | true = (des_1034
                                                                 i_1035
                                                                 (f_update_1479 i_1035
                                                                    x_1036
                                                                    k_update_1232))
    main_1478:X
    bcopy_aux_1152:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1482:int -> X
    f_1483:int -> int -> X
    f_1484:int -> int -> unit -> X
    f_bcopy_aux_1480:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1481:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1479:int -> int -> (unit -> X) -> int -> X
    fail_1485:bool -> (unit -> X) -> X
    k_make_array_u_1188:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1199:int -> int -> (int -> X) -> unit -> X
    main_1042:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1153:(int -> (int -> X) -> X) -> int -> int -> (unit -> X) -> X
  inlined functions: f_1482,f_1483,f_1484,f_bcopy_aux_1480,f_bcopy_aux_1481,f_update_1479,k_make_array_u_1188,k_make_array_u_1199,main_1042,make_array_1030,update_1153
  counterexample: 0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1482@4:0> = var2)
     [true.nop((<f_1483@7:0> = <f_1482@4:0>) && (<f_1483@7:1> = var3))
      [true.((<main_1042@9:0> = <f_1483@7:0>) && (<main_1042@9:1> = <f_1483@7:1>))
       [(<main_1042@9:0> <= <main_1042@9:1>).((<bcopy_aux_1152@12:0> = <main_1042@9:0>) && (<bcopy_aux_1152@12:3> = 0))
        [(not (<bcopy_aux_1152@12:3> >= <bcopy_aux_1152@12:0>)).(<<bcopy_aux_1152@12:1>@15:0> = <bcopy_aux_1152@12:3>)
         [true.((<make_array_1030@17:0> = <main_1042@9:0>) && (<make_array_1030@17:1> = <<bcopy_aux_1152@12:1>@15:0>))
          [(not (0 <= <make_array_1030@17:1>)).
           ((<k_make_array_u_1188@20:0> = <make_array_1030@17:1>) &&
            ((<k_make_array_u_1188@20:1> = <make_array_1030@17:0>) && (<k_make_array_u_1188@20:3> = false)))
           [(not <k_make_array_u_1188@20:3>).(<fail_1485@23:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(187)[2]
    horn clauses:
      P[<fail_1485@23:0>](<fail_1485@23:0>:bool)|- bot
      
      P[<k_make_array_u_1188@20:3>](<k_make_array_u_1188@20:0>:int,<k_make_array_u_1188@20:1>:int,false:bool),
      <fail_1485@23:0> |- P[<fail_1485@23:0>](<fail_1485@23:0>:bool)
      
      P[<make_array_1030@17:1>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
      ((0 > <k_make_array_u_1188@20:0>) && (not <k_make_array_u_1188@20:3>))
      |- P[<k_make_array_u_1188@20:3>](<k_make_array_u_1188@20:0>:int,
                                       <k_make_array_u_1188@20:1>:int,
                                       <k_make_array_u_1188@20:3>:bool)
      
      P[<main_1042@9:1>](<make_array_1030@17:0>:int,<main_1042@9:1>:int),
      P[<<bcopy_aux_1152@12:1>@15:0>](<make_array_1030@17:0>:int,<make_array_1030@17:1>:int),
      (<make_array_1030@17:0> <= <main_1042@9:1>)
      |- P[<make_array_1030@17:1>](<make_array_1030@17:0>:int,<make_array_1030@17:1>:int)
      
      P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
      (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
      |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int)
      
      P[<main_1042@9:1>](<bcopy_aux_1152@12:0>:int,<main_1042@9:1>:int),
      ((<bcopy_aux_1152@12:3> = 0) && (<bcopy_aux_1152@12:0> <= <main_1042@9:1>))
      |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<bcopy_aux_1152@12:3>:int)
      
      P[<f_1483@7:1>](<main_1042@9:0>:int,<main_1042@9:1>:int)|- P[<main_1042@9:1>](
      <main_1042@9:0>:int,<main_1042@9:1>:int)
      
      P[<f_1482@4:0>](<f_1483@7:0>:int)|- P[<f_1483@7:1>](<f_1483@7:0>:int,
                                                          <f_1483@7:1>:int)
      
      |- P[<f_1482@4:0>](<f_1482@4:0>:int)
    call trees:
      <main_1478@1>
        <f_1482@4>
          <f_1483@7>
            <main_1042@9>
              <bcopy_aux_1152@12>
              </<bcopy_aux_1152@12:1>@15>
              <make_array_1030@17>
                <k_make_array_u_1188@20>
                  <fail_1485@23>
    inlined horn clauses:
      P[<fail_1485@23:0>](<fail_1485@23:0>:bool)|- bot
      
      P[<<bcopy_aux_1152@12:1>@15:0>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
      ((0 > <k_make_array_u_1188@20:0>) && <fail_1485@23:0>) |- P[<fail_1485@23:0>](
      <fail_1485@23:0>:bool)
      
      P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
      (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
      |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int)
      
       (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                               <bcopy_aux_1152@12:3>:int)
    begin ParamSubstInfer.infer(1207)[3]
      
    end ParamSubstInfer.infer(1207)[3] (0.028995 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1209)[3]
      
    end RefTypeInfer.elim_coeffs(1209)[3] (0.001000 sec.)
    begin YhornInterface.solve(1334)[3]
      begin HcSolver.solve_ub(1335)[4]
        encoded:
          P[<fail_1485@23:0>](<fail_1485@23:0>:int)|- bot
          
          P[<<bcopy_aux_1152@12:1>@15:0>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
          ((0 > <k_make_array_u_1188@20:0>) && (<fail_1485@23:0> = 1)) |- P[<fail_1485@23:0>](
          <fail_1485@23:0>:int)
          
          P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
          (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
          |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,
                                             <<bcopy_aux_1152@12:1>@15:0>:int)
          
           (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                                   <bcopy_aux_1152@12:3>:int)
        input to Yhorn:
          P[<fail_1485@23:0>](<fail_1485@23:0>:int)|- bot
          
          P[<<bcopy_aux_1152@12:1>@15:0>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
          ((0 > <k_make_array_u_1188@20:0>) && (<fail_1485@23:0> = 1)) |- P[<fail_1485@23:0>](
          <fail_1485@23:0>:int)
          
          P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
          (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
          |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,
                                             <<bcopy_aux_1152@12:1>@15:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1485_sep_23_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0)) & (v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0($9,$8)) -> v_sep_fail_1485_sep_23_sep_0($7).
($10-$11<0) & (v_sep_bcopy_aux_1152_sep_12_sep_3($11,$10)) -> v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0($11,$10).
$12=0 -> v_sep_bcopy_aux_1152_sep_12_sep_3($11,$12).


v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0: X
v_sep_bcopy_aux_1152_sep_12_sep_3: X
v_sep_fail_1485_sep_23_sep_0: X
....
v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0: X
v_sep_bcopy_aux_1152_sep_12_sep_3: X
v_sep_fail_1485_sep_23_sep_0: X
...
v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0: X
v_sep_bcopy_aux_1152_sep_12_sep_3: X
v_sep_fail_1485_sep_23_sep_0: X
....
v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0: X
v_sep_bcopy_aux_1152_sep_12_sep_3: X
v_sep_fail_1485_sep_23_sep_0: X
....(0=0) & (v_sep_fail_1485_sep_23_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0)) & (v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0($9,$8)) -> v_sep_fail_1485_sep_23_sep_0($7).
($10-$11<0) & (v_sep_bcopy_aux_1152_sep_12_sep_3($11,$10)) -> v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0($11,$10).
$12=0 -> v_sep_bcopy_aux_1152_sep_12_sep_3($11,$12).

           (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                                   <bcopy_aux_1152@12:3>:int)
        solution:
          P[<<bcopy_aux_1152@12:1>@15:0>]($16:int,$18:int) = (0 <= $18)
          P[<bcopy_aux_1152@12:3>]($21:int,$23:int) = (0 <= $23)
          P[<fail_1485@23:0>]($13:bool) = false
        
      end HcSolver.solve_ub(1335)[4] (0.010999 sec.)
      begin HcSolver.check_validity(1419)[4]
        input:
          P[<fail_1485@23:0>](<fail_1485@23:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@12:1>@15:0>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
          ((0 > <k_make_array_u_1188@20:0>) && <fail_1485@23:0>) |- P[<fail_1485@23:0>](
          <fail_1485@23:0>:bool)
          
          P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
          (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
          |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,
                                             <<bcopy_aux_1152@12:1>@15:0>:int)
          
           (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                                   <bcopy_aux_1152@12:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1419)[4] (0.006999 sec.)
      solution:
        P[<<bcopy_aux_1152@12:1>@15:0>]($16:int,$18:int) = (0 <= $18)
        P[<bcopy_aux_1152@12:3>]($21:int,$23:int) = (0 <= $23)
        P[<fail_1485@23:0>]($13:bool) = false
    end YhornInterface.solve(1334)[3] (0.017998 sec.)
    
  end RefTypeInfer.infer_etrs(187)[2] (0.053992 sec.)
  refinement types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:{v10:int | (0 <= v10)} -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1485: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1484: var23:int -> var22:int -> var21:unit -> X
    f_bcopy_aux_1480: var37:int ->
                      var36:int ->
                      (var35:int -> (var34:int -> X) -> X) ->
                      (var31:unit -> X) -> (var29:int -> (var28:int -> X) -> X) -> var25:int -> X
    f_bcopy_aux_1481: var52:int ->
                      var51:int ->
                      var50:int ->
                      (var49:int -> (var48:int -> X) -> X) ->
                      (var45:unit -> X) -> (var43:int -> (var42:int -> X) -> X) -> var39:unit -> X
    f_update_1479: var58:int -> var57:int -> (var56:unit -> X) -> var54:int -> X
    k_make_array_u_1199: var64:int -> var63:int -> (var62:int -> X) -> var60:unit -> X
    update_1153: (var73:int -> (var72:int -> X) -> X) -> var69:int -> var68:int -> (var67:unit -> X) -> X
  abstraction types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int[v10 -> (
                                                              0 <= v10)] -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1485: v1:bool -> (v2:unit -> X) -> X
    f_1484: var23:int -> var22:int -> var21:unit -> X
    f_bcopy_aux_1480: var37:int ->
                      var36:int ->
                      (var35:int -> (var34:int -> X) -> X) ->
                      (var31:unit -> X) -> (var29:int -> (var28:int -> X) -> X) -> var25:int -> X
    f_bcopy_aux_1481: var52:int ->
                      var51:int ->
                      var50:int ->
                      (var49:int -> (var48:int -> X) -> X) ->
                      (var45:unit -> X) -> (var43:int -> (var42:int -> X) -> X) -> var39:unit -> X
    f_update_1479: var58:int -> var57:int -> (var56:unit -> X) -> var54:int -> X
    k_make_array_u_1199: var64:int -> var63:int -> (var62:int -> X) -> var60:unit -> X
    update_1153: (var73:int -> (var72:int -> X) -> X) -> var69:int -> var68:int -> (var67:unit -> X) -> X
  
end AbsTypeInfer.refine(186)[1] (0.056990 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1478
  main_1478 -> (rand_int f_1482)
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (i_1041 >= m_1038) -> (k_bcopy_aux_1292 ())
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (
      not (i_1041 >= m_1038)) -> (src_1039 i_1041 (f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039))
  f_1482 x_1436 -> (rand_int (f_1483 x_1436))
  f_1483 x_1436 x_1449 -> (main_1042 x_1436 x_1449 (f_1484 x_1436 x_1449))
  f_1484 x_1436 x_1449 x_1433 -> end
  f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 ->
      (update_1153 des_1040 i_1041 x_1323 (f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039))
  f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 ->
      (bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) k_bcopy_aux_1292)
  f_update_1479 i_1035 x_1036 k_update_1232 x_1235 -> (k_update_1232 ())
  fail_1485 b k -> {fail} => (k ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when b_1200 ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when (not b_1200) ->
      (fail_1485 true (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182))
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 -> (k_make_array_1182 0)
  main_1042 n_1043 m_1044 k_main_1369 when (n_1043 <= m_1044) ->
      (bcopy_aux_1152 n_1043 (make_array_1030 n_1043) (make_array_1030 m_1044) 0 k_main_1369)
  main_1042 n_1043 m_1044 k_main_1369 when (not (n_1043 <= m_1044)) -> (k_main_1369 ())
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (0 <= i_1032) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (not (0 <= i_1032)) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 false)
  update_1153 des_1034 i_1035 x_1036 k_update_1232 -> (des_1034 i_1035 (f_update_1479 i_1035 x_1036 k_update_1232))
Types:
  main_1478 : X
  bcopy_aux_1152 : (int ->
                    (x_3:int[x_3 >= 0] -> (int -> X) -> X) ->
                    (int -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1485 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1478 ... --> 
  f_1482 ... --> 
  f_1483 ... --> 
  main_1042 [1/2] ... --> 
  bcopy_aux_1152 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1188 [2/2] ... --> 
  fail_1485 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(2044)[1]
  program:
    main_1478  | true = ((Random.int 0) f_1482)
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    i_1041 >= m_1038) = (k_bcopy_aux_1292 ())
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    not (i_1041 >= m_1038)) = (src_1039 i_1041
                                        (f_bcopy_aux_1480 i_1041
                                                          m_1038
                                                          des_1040
                                                          k_bcopy_aux_1292
                                                          src_1039))
    f_1482 x_1436 | true = ((Random.int 0) (f_1483 x_1436))
    f_1483 x_1436 x_1449 | true = (main_1042 x_1436
                                             x_1449
                                             (f_1484 x_1436
                                                     x_1449))
    f_1484 x_1436 x_1449 x_1433 | true = end
    f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 | true = (
    update_1153 des_1040
                i_1041
                x_1323
                (f_bcopy_aux_1481 i_1041
                                  m_1038
                                  x_1323
                                  des_1040
                                  k_bcopy_aux_1292
                                  src_1039))
    f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 | true = (
    bcopy_aux_1152 m_1038
                   src_1039
                   des_1040
                   (i_1041 + 1)
                   k_bcopy_aux_1292)
    f_update_1479 i_1035 x_1036 k_update_1232 x_1235 | true = (k_update_1232 ())
    fail_1485 b k | true = (fail ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | b_1200 = (
    k_make_array_u_1199 i_1032
                        n_1031
                        k_make_array_1182
                        ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | (not b_1200) = (
    fail_1485 true
              (k_make_array_u_1199 i_1032
                                   n_1031
                                   k_make_array_1182))
    k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 | true = (
    k_make_array_1182 0)
    main_1042 n_1043 m_1044 k_main_1369 | (n_1043 <= m_1044) = (bcopy_aux_1152
                                                                  n_1043
                                                                  (make_array_1030 n_1043)
                                                                  (make_array_1030 m_1044)
                                                                  0
                                                                  k_main_1369)
    main_1042 n_1043 m_1044 k_main_1369 | (not (n_1043 <= m_1044)) = (
    k_main_1369 ())
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (0 <= i_1032) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (not (0 <= i_1032)) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        false)
    update_1153 des_1034 i_1035 x_1036 k_update_1232 | true = (des_1034
                                                                 i_1035
                                                                 (f_update_1479 i_1035
                                                                    x_1036
                                                                    k_update_1232))
    main_1478:X
    bcopy_aux_1152:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1482:int -> X
    f_1483:int -> int -> X
    f_1484:int -> int -> unit -> X
    f_bcopy_aux_1480:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1481:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1479:int -> int -> (unit -> X) -> int -> X
    fail_1485:bool -> (unit -> X) -> X
    k_make_array_u_1188:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1199:int -> int -> (int -> X) -> unit -> X
    main_1042:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1153:(int -> (int -> X) -> X) -> int -> int -> (unit -> X) -> X
  inlined functions: f_1482,f_1483,f_1484,f_bcopy_aux_1480,f_bcopy_aux_1481,f_update_1479,k_make_array_u_1188,k_make_array_u_1199,main_1042,make_array_1030,update_1153
  counterexample: 0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1482@29:0> = var74)
     [true.nop((<f_1483@32:0> = <f_1482@29:0>) && (<f_1483@32:1> = var75))
      [true.((<main_1042@34:0> = <f_1483@32:0>) && (<main_1042@34:1> = <f_1483@32:1>))
       [(<main_1042@34:0> <= <main_1042@34:1>).
        ((<bcopy_aux_1152@37:0> = <main_1042@34:0>) && (<bcopy_aux_1152@37:3> = 0))
        [(not (<bcopy_aux_1152@37:3> >= <bcopy_aux_1152@37:0>)).(<<bcopy_aux_1152@37:1>@40:0> = <bcopy_aux_1152@37:3>)
         [true.((<make_array_1030@42:0> = <main_1042@34:0>) && (<make_array_1030@42:1> = <<bcopy_aux_1152@37:1>@40:0>))
          [(0 <= <make_array_1030@42:1>).
           ((<k_make_array_u_1188@45:0> = <make_array_1030@42:1>) &&
            ((<k_make_array_u_1188@45:1> = <make_array_1030@42:0>) &&
             (<k_make_array_u_1188@45:3> = (<make_array_1030@42:1> < <make_array_1030@42:0>))))
           [(not <k_make_array_u_1188@45:3>).(<fail_1485@48:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(2045)[2]
    horn clauses:
      P[<fail_1485@48:0>](<fail_1485@48:0>:bool)|- bot
      
      P[<k_make_array_u_1188@45:3>](<k_make_array_u_1188@45:0>:int,<k_make_array_u_1188@45:1>:int,false:bool),
      <fail_1485@48:0> |- P[<fail_1485@48:0>](<fail_1485@48:0>:bool)
      
      P[<make_array_1030@42:1>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
      ((0 <= <k_make_array_u_1188@45:0>) &&
       (<k_make_array_u_1188@45:3> = (<k_make_array_u_1188@45:0> < <k_make_array_u_1188@45:1>)))
      |- P[<k_make_array_u_1188@45:3>](<k_make_array_u_1188@45:0>:int,
                                       <k_make_array_u_1188@45:1>:int,
                                       <k_make_array_u_1188@45:3>:bool)
      
      P[<main_1042@34:1>](<make_array_1030@42:0>:int,<main_1042@34:1>:int),
      P[<<bcopy_aux_1152@37:1>@40:0>](<make_array_1030@42:0>:int,<make_array_1030@42:1>:int),
      (<make_array_1030@42:0> <= <main_1042@34:1>)
      |- P[<make_array_1030@42:1>](<make_array_1030@42:0>:int,<make_array_1030@42:1>:int)
      
      P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
      (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
      |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int)
      
      P[<main_1042@34:1>](<bcopy_aux_1152@37:0>:int,<main_1042@34:1>:int),
      ((<bcopy_aux_1152@37:3> = 0) && (<bcopy_aux_1152@37:0> <= <main_1042@34:1>))
      |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<bcopy_aux_1152@37:3>:int)
      
      P[<f_1483@32:1>](<main_1042@34:0>:int,<main_1042@34:1>:int)|- P[<main_1042@34:1>](
      <main_1042@34:0>:int,<main_1042@34:1>:int)
      
      P[<f_1482@29:0>](<f_1483@32:0>:int)|- P[<f_1483@32:1>](<f_1483@32:0>:int,
                                                             <f_1483@32:1>:int)
      
      |- P[<f_1482@29:0>](<f_1482@29:0>:int)
    call trees:
      <main_1478@26>
        <f_1482@29>
          <f_1483@32>
            <main_1042@34>
              <bcopy_aux_1152@37>
              </<bcopy_aux_1152@37:1>@40>
              <make_array_1030@42>
                <k_make_array_u_1188@45>
                  <fail_1485@48>
    inlined horn clauses:
      P[<fail_1485@48:0>](<fail_1485@48:0>:bool)|- bot
      
      P[<<bcopy_aux_1152@37:1>@40:0>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
      ((0 <= <k_make_array_u_1188@45:0>) &&
       ((<k_make_array_u_1188@45:0> >= <k_make_array_u_1188@45:1>) && <fail_1485@48:0>))
      |- P[<fail_1485@48:0>](<fail_1485@48:0>:bool)
      
      P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
      (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
      |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int)
      
       (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                               <bcopy_aux_1152@37:3>:int)
    begin ParamSubstInfer.infer(3283)[3]
      
    end ParamSubstInfer.infer(3283)[3] (0.064991 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(3285)[3]
      
    end RefTypeInfer.elim_coeffs(3285)[3] (0.001000 sec.)
    begin YhornInterface.solve(3477)[3]
      begin HcSolver.solve_ub(3478)[4]
        encoded:
          P[<fail_1485@48:0>](<fail_1485@48:0>:int)|- bot
          
          P[<<bcopy_aux_1152@37:1>@40:0>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
          ((0 <= <k_make_array_u_1188@45:0>) &&
           ((<k_make_array_u_1188@45:0> >= <k_make_array_u_1188@45:1>) && (<fail_1485@48:0> = 1)))
          |- P[<fail_1485@48:0>](<fail_1485@48:0>:int)
          
          P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
          (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
          |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,
                                             <<bcopy_aux_1152@37:1>@40:0>:int)
          
           (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                                   <bcopy_aux_1152@37:3>:int)
        input to Yhorn:
          P[<fail_1485@48:0>](<fail_1485@48:0>:int)|- bot
          
          P[<<bcopy_aux_1152@37:1>@40:0>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
          ((<k_make_array_u_1188@45:0> >= <k_make_array_u_1188@45:1>) &&
           ((0 <= <k_make_array_u_1188@45:0>) && (<fail_1485@48:0> = 1))) |- P[<fail_1485@48:0>](
          <fail_1485@48:0>:int)
          
          P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
          (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
          |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,
                                             <<bcopy_aux_1152@37:1>@40:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1485_sep_48_sep_0($61)) -> 1=0.
(($61-1=0) & (-$62<=0) & ($62-$63>=0)) & (v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0($63,$62)) -> v_sep_fail_1485_sep_48_sep_0($61).
($64-$65<0) & (v_sep_bcopy_aux_1152_sep_37_sep_3($65,$64)) -> v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0($65,$64).
$66=0 -> v_sep_bcopy_aux_1152_sep_37_sep_3($65,$66).


v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0: X
v_sep_bcopy_aux_1152_sep_37_sep_3: X
v_sep_fail_1485_sep_48_sep_0: X
....
v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0: X
v_sep_bcopy_aux_1152_sep_37_sep_3: X
v_sep_fail_1485_sep_48_sep_0: X
...
v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0: X
v_sep_bcopy_aux_1152_sep_37_sep_3: X
v_sep_fail_1485_sep_48_sep_0: X
....
v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0: X
v_sep_bcopy_aux_1152_sep_37_sep_3: X
v_sep_fail_1485_sep_48_sep_0: X
....(0=0) & (v_sep_fail_1485_sep_48_sep_0($61)) -> 1=0.
(($61-1=0) & (-$62<=0) & ($62-$63>=0)) & (v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0($63,$62)) -> v_sep_fail_1485_sep_48_sep_0($61).
($64-$65<0) & (v_sep_bcopy_aux_1152_sep_37_sep_3($65,$64)) -> v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0($65,$64).
$66=0 -> v_sep_bcopy_aux_1152_sep_37_sep_3($65,$66).

           (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                                   <bcopy_aux_1152@37:3>:int)
        solution:
          P[<<bcopy_aux_1152@37:1>@40:0>]($70:int,$72:int) = ((1 + $72) <= $70)
          P[<bcopy_aux_1152@37:3>]($75:int,$77:int) = true
          P[<fail_1485@48:0>]($67:bool) = false
        
      end HcSolver.solve_ub(3478)[4] (0.010998 sec.)
      begin HcSolver.check_validity(3610)[4]
        input:
          P[<fail_1485@48:0>](<fail_1485@48:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@37:1>@40:0>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
          ((0 <= <k_make_array_u_1188@45:0>) &&
           ((<k_make_array_u_1188@45:0> >= <k_make_array_u_1188@45:1>) && <fail_1485@48:0>))
          |- P[<fail_1485@48:0>](<fail_1485@48:0>:bool)
          
          P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
          (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
          |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,
                                             <<bcopy_aux_1152@37:1>@40:0>:int)
          
           (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                                   <bcopy_aux_1152@37:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3610)[4] (0.005999 sec.)
      solution:
        P[<<bcopy_aux_1152@37:1>@40:0>]($70:int,$72:int) = ((1 + $72) <= $70)
        P[<bcopy_aux_1152@37:3>]($75:int,$77:int) = true
        P[<fail_1485@48:0>]($67:bool) = false
    end YhornInterface.solve(3477)[3] (0.016997 sec.)
    
  end RefTypeInfer.infer_etrs(2045)[2] (0.087987 sec.)
  refinement types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1485: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1484: var95:int -> var94:int -> var93:unit -> X
    f_bcopy_aux_1480: var109:int ->
                      var108:int ->
                      (var107:int -> (var106:int -> X) -> X) ->
                      (var103:unit -> X) -> (var101:int -> (var100:int -> X) -> X) -> var97:int -> X
    f_bcopy_aux_1481: var124:int ->
                      var123:int ->
                      var122:int ->
                      (var121:int -> (var120:int -> X) -> X) ->
                      (var117:unit -> X) -> (var115:int -> (var114:int -> X) -> X) -> var111:unit -> X
    f_update_1479: var130:int -> var129:int -> (var128:unit -> X) -> var126:int -> X
    k_make_array_u_1199: var136:int -> var135:int -> (var134:int -> X) -> var132:unit -> X
    update_1153: (var145:int -> (var144:int -> X) -> X) -> var141:int -> var140:int -> (var139:unit -> X) -> X
  abstraction types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1485: v1:bool -> (v2:unit -> X) -> X
    f_1484: var95:int -> var94:int -> var93:unit -> X
    f_bcopy_aux_1480: var109:int ->
                      var108:int ->
                      (var107:int -> (var106:int -> X) -> X) ->
                      (var103:unit -> X) -> (var101:int -> (var100:int -> X) -> X) -> var97:int -> X
    f_bcopy_aux_1481: var124:int ->
                      var123:int ->
                      var122:int ->
                      (var121:int -> (var120:int -> X) -> X) ->
                      (var117:unit -> X) -> (var115:int -> (var114:int -> X) -> X) -> var111:unit -> X
    f_update_1479: var130:int -> var129:int -> (var128:unit -> X) -> var126:int -> X
    k_make_array_u_1199: var136:int -> var135:int -> (var134:int -> X) -> var132:unit -> X
    update_1153: (var145:int -> (var144:int -> X) -> X) -> var141:int -> var140:int -> (var139:unit -> X) -> X
  
end AbsTypeInfer.refine(2044)[1] (0.091987 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1478
  main_1478 -> (rand_int f_1482)
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (i_1041 >= m_1038) -> (k_bcopy_aux_1292 ())
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (
      not (i_1041 >= m_1038)) -> (src_1039 i_1041 (f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039))
  f_1482 x_1436 -> (rand_int (f_1483 x_1436))
  f_1483 x_1436 x_1449 -> (main_1042 x_1436 x_1449 (f_1484 x_1436 x_1449))
  f_1484 x_1436 x_1449 x_1433 -> end
  f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 ->
      (update_1153 des_1040 i_1041 x_1323 (f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039))
  f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 ->
      (bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) k_bcopy_aux_1292)
  f_update_1479 i_1035 x_1036 k_update_1232 x_1235 -> (k_update_1232 ())
  fail_1485 b k -> {fail} => (k ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when b_1200 ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when (not b_1200) ->
      (fail_1485 true (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182))
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 -> (k_make_array_1182 0)
  main_1042 n_1043 m_1044 k_main_1369 when (n_1043 <= m_1044) ->
      (bcopy_aux_1152 n_1043 (make_array_1030 n_1043) (make_array_1030 m_1044) 0 k_main_1369)
  main_1042 n_1043 m_1044 k_main_1369 when (not (n_1043 <= m_1044)) -> (k_main_1369 ())
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (0 <= i_1032) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (not (0 <= i_1032)) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 false)
  update_1153 des_1034 i_1035 x_1036 k_update_1232 -> (des_1034 i_1035 (f_update_1479 i_1035 x_1036 k_update_1232))
Types:
  main_1478 : X
  bcopy_aux_1152 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                    (int -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1485 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1478 ... --> 
  f_1482 ... --> 
  f_1483 ... --> 
  main_1042 [1/2] ... --> 
  bcopy_aux_1152 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1188 [1/2] ... --> 
  k_make_array_u_1199 ... --> 
  f_bcopy_aux_1480 ... --> 
  update_1153 ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1188 [2/2] ... --> 
  fail_1485 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(4465)[1]
  program:
    main_1478  | true = ((Random.int 0) f_1482)
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    i_1041 >= m_1038) = (k_bcopy_aux_1292 ())
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    not (i_1041 >= m_1038)) = (src_1039 i_1041
                                        (f_bcopy_aux_1480 i_1041
                                                          m_1038
                                                          des_1040
                                                          k_bcopy_aux_1292
                                                          src_1039))
    f_1482 x_1436 | true = ((Random.int 0) (f_1483 x_1436))
    f_1483 x_1436 x_1449 | true = (main_1042 x_1436
                                             x_1449
                                             (f_1484 x_1436
                                                     x_1449))
    f_1484 x_1436 x_1449 x_1433 | true = end
    f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 | true = (
    update_1153 des_1040
                i_1041
                x_1323
                (f_bcopy_aux_1481 i_1041
                                  m_1038
                                  x_1323
                                  des_1040
                                  k_bcopy_aux_1292
                                  src_1039))
    f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 | true = (
    bcopy_aux_1152 m_1038
                   src_1039
                   des_1040
                   (i_1041 + 1)
                   k_bcopy_aux_1292)
    f_update_1479 i_1035 x_1036 k_update_1232 x_1235 | true = (k_update_1232 ())
    fail_1485 b k | true = (fail ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | b_1200 = (
    k_make_array_u_1199 i_1032
                        n_1031
                        k_make_array_1182
                        ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | (not b_1200) = (
    fail_1485 true
              (k_make_array_u_1199 i_1032
                                   n_1031
                                   k_make_array_1182))
    k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 | true = (
    k_make_array_1182 0)
    main_1042 n_1043 m_1044 k_main_1369 | (n_1043 <= m_1044) = (bcopy_aux_1152
                                                                  n_1043
                                                                  (make_array_1030 n_1043)
                                                                  (make_array_1030 m_1044)
                                                                  0
                                                                  k_main_1369)
    main_1042 n_1043 m_1044 k_main_1369 | (not (n_1043 <= m_1044)) = (
    k_main_1369 ())
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (0 <= i_1032) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (not (0 <= i_1032)) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        false)
    update_1153 des_1034 i_1035 x_1036 k_update_1232 | true = (des_1034
                                                                 i_1035
                                                                 (f_update_1479 i_1035
                                                                    x_1036
                                                                    k_update_1232))
    main_1478:X
    bcopy_aux_1152:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1482:int -> X
    f_1483:int -> int -> X
    f_1484:int -> int -> unit -> X
    f_bcopy_aux_1480:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1481:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1479:int -> int -> (unit -> X) -> int -> X
    fail_1485:bool -> (unit -> X) -> X
    k_make_array_u_1188:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1199:int -> int -> (int -> X) -> unit -> X
    main_1042:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1153:(int -> (int -> X) -> X) -> int -> int -> (unit -> X) -> X
  inlined functions: f_1482,f_1483,f_1484,f_bcopy_aux_1480,f_bcopy_aux_1481,f_update_1479,k_make_array_u_1188,k_make_array_u_1199,main_1042,make_array_1030,update_1153
  counterexample: 0:0:0:0:1:0:0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1482@54:0> = var146)
     [true.nop((<f_1483@57:0> = <f_1482@54:0>) && (<f_1483@57:1> = var147))
      [true.((<main_1042@59:0> = <f_1483@57:0>) && (<main_1042@59:1> = <f_1483@57:1>))
       [(<main_1042@59:0> <= <main_1042@59:1>).
        ((<bcopy_aux_1152@62:0> = <main_1042@59:0>) && (<bcopy_aux_1152@62:3> = 0))
        [(not (<bcopy_aux_1152@62:3> >= <bcopy_aux_1152@62:0>)).(<<bcopy_aux_1152@62:1>@65:0> = <bcopy_aux_1152@62:3>)
         [true.((<make_array_1030@67:0> = <main_1042@59:0>) && (<make_array_1030@67:1> = <<bcopy_aux_1152@62:1>@65:0>))
          [(0 <= <make_array_1030@67:1>).
           ((<k_make_array_u_1188@70:0> = <make_array_1030@67:1>) &&
            ((<k_make_array_u_1188@70:1> = <make_array_1030@67:0>) &&
             (<k_make_array_u_1188@70:3> = (<make_array_1030@67:1> < <make_array_1030@67:0>))))
           [<k_make_array_u_1188@70:3>.
            ((<k_make_array_u_1199@73:0> = <k_make_array_u_1188@70:0>) &&
             ((<k_make_array_u_1199@73:1> = <k_make_array_u_1188@70:1>) && (<k_make_array_u_1199@73:3> = ())))
            [true.(<<k_make_array_u_1199@73:2>@75:0> = 0)
             [true.(<<k_make_array_u_1188@70:2>@77:0> = <<k_make_array_u_1199@73:2>@75:0>)
              [true.(<<make_array_1030@67:2>@79:0> = <<k_make_array_u_1188@70:2>@77:0>)
               [true.(<<<bcopy_aux_1152@62:1>@65:1>@81:0> = <<make_array_1030@67:2>@79:0>)
                [true.
                 ((<f_bcopy_aux_1480@83:0> = <bcopy_aux_1152@62:3>) &&
                  ((<f_bcopy_aux_1480@83:1> = <bcopy_aux_1152@62:0>) &&
                   (<f_bcopy_aux_1480@83:5> = <<<bcopy_aux_1152@62:1>@65:1>@81:0>)))
                 [true.
                  ((<update_1153@85:1> = <f_bcopy_aux_1480@83:0>) && (<update_1153@85:2> = <f_bcopy_aux_1480@83:5>))
                  [true.(<<update_1153@85:0>@87:0> = <update_1153@85:1>)
                   [true.(<<f_bcopy_aux_1480@83:2>@89:0> = <<update_1153@85:0>@87:0>)
                    [true.(<<bcopy_aux_1152@62:2>@91:0> = <<f_bcopy_aux_1480@83:2>@89:0>)
                     [true.
                      ((<make_array_1030@93:0> = <main_1042@59:1>) &&
                       (<make_array_1030@93:1> = <<bcopy_aux_1152@62:2>@91:0>))
                      [(not (0 <= <make_array_1030@93:1>)).
                       ((<k_make_array_u_1188@96:0> = <make_array_1030@93:1>) &&
                        ((<k_make_array_u_1188@96:1> = <make_array_1030@93:0>) && (<k_make_array_u_1188@96:3> = false)))
                       [(not <k_make_array_u_1188@96:3>).(<fail_1485@99:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(4466)[2]
    horn clauses:
      P[<fail_1485@99:0>](<fail_1485@99:0>:bool)|- bot
      
      P[<k_make_array_u_1188@96:3>](<k_make_array_u_1188@96:0>:int,<k_make_array_u_1188@96:1>:int,false:bool),
      <fail_1485@99:0> |- P[<fail_1485@99:0>](<fail_1485@99:0>:bool)
      
      P[<make_array_1030@93:1>](<k_make_array_u_1188@96:1>:int,<k_make_array_u_1188@96:0>:int),
      ((0 > <k_make_array_u_1188@96:0>) && (not <k_make_array_u_1188@96:3>))
      |- P[<k_make_array_u_1188@96:3>](<k_make_array_u_1188@96:0>:int,
                                       <k_make_array_u_1188@96:1>:int,
                                       <k_make_array_u_1188@96:3>:bool)
      
      P[<main_1042@59:1>](<bcopy_aux_1152@62:0>:int,<make_array_1030@93:0>:int),
      P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,<make_array_1030@93:1>:int),
      (<bcopy_aux_1152@62:0> <= <make_array_1030@93:0>)
      |- P[<make_array_1030@93:1>](<make_array_1030@93:0>:int,<make_array_1030@93:1>:int)
      
      P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
      P[<<f_bcopy_aux_1480@83:2>@89:0>](<<bcopy_aux_1152@62:1>@65:0>:int,<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:2>@91:0>:int),
      (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
      |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:2>@91:0>:int)
      
      P[<f_bcopy_aux_1480@83:5>](<f_bcopy_aux_1480@83:0>:int,<f_bcopy_aux_1480@83:1>:int,<update_1153@85:2>:int),
      P[<<update_1153@85:0>@87:0>](<<f_bcopy_aux_1480@83:2>@89:0>:int)|- P[<<f_bcopy_aux_1480@83:2>@89:0>](
      <f_bcopy_aux_1480@83:0>:int,<f_bcopy_aux_1480@83:1>:int,<<f_bcopy_aux_1480@83:2>@89:0>:int)
      
      P[<update_1153@85:2>](<<update_1153@85:0>@87:0>:int,<update_1153@85:2>:int)|- P[<<update_1153@85:0>@87:0>](
      <<update_1153@85:0>@87:0>:int)
      
      P[<f_bcopy_aux_1480@83:5>](<update_1153@85:1>:int,<f_bcopy_aux_1480@83:1>:int,<update_1153@85:2>:int)|- P[<update_1153@85:2>](
      <update_1153@85:1>:int,<update_1153@85:2>:int)
      
      P[<bcopy_aux_1152@62:3>](<f_bcopy_aux_1480@83:1>:int,<f_bcopy_aux_1480@83:0>:int),
      P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<f_bcopy_aux_1480@83:1>:int,<f_bcopy_aux_1480@83:0>:int,<f_bcopy_aux_1480@83:5>:int),
      (<f_bcopy_aux_1480@83:0> < <f_bcopy_aux_1480@83:1>)
      |- P[<f_bcopy_aux_1480@83:5>](<f_bcopy_aux_1480@83:0>:int,<f_bcopy_aux_1480@83:1>:int,
                                    <f_bcopy_aux_1480@83:5>:int)
      
      P[<main_1042@59:1>](<bcopy_aux_1152@62:0>:int,<main_1042@59:1>:int),
      P[<<make_array_1030@67:2>@79:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,<<<bcopy_aux_1152@62:1>@65:1>@81:0>:int),
      (<bcopy_aux_1152@62:0> <= <main_1042@59:1>)
      |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                <<bcopy_aux_1152@62:1>@65:0>:int,
                                                <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
      
      P[<make_array_1030@67:1>](<make_array_1030@67:0>:int,<make_array_1030@67:1>:int),
      P[<<k_make_array_u_1188@70:2>@77:0>](<make_array_1030@67:1>:int,<make_array_1030@67:0>:int,<<make_array_1030@67:2>@79:0>:int),
      (0 <= <make_array_1030@67:1>)
      |- P[<<make_array_1030@67:2>@79:0>](<make_array_1030@67:0>:int,
                                          <make_array_1030@67:1>:int,
                                          <<make_array_1030@67:2>@79:0>:int)
      
      P[<k_make_array_u_1188@70:3>](<k_make_array_u_1188@70:0>:int,<k_make_array_u_1188@70:1>:int,true:bool),
      P[<<k_make_array_u_1199@73:2>@75:0>](<k_make_array_u_1188@70:0>:int,<k_make_array_u_1188@70:1>:int,<<k_make_array_u_1188@70:2>@77:0>:int)|- P[<<k_make_array_u_1188@70:2>@77:0>](
      <k_make_array_u_1188@70:0>:int,<k_make_array_u_1188@70:1>:int,<<k_make_array_u_1188@70:2>@77:0>:int)
      
      P[<k_make_array_u_1199@73:3>](<k_make_array_u_1199@73:0>:int,<k_make_array_u_1199@73:1>:int,<k_make_array_u_1199@73:3>:unit),
      (<<k_make_array_u_1199@73:2>@75:0> = 0)
      |- P[<<k_make_array_u_1199@73:2>@75:0>](<k_make_array_u_1199@73:0>:int,
                                              <k_make_array_u_1199@73:1>:int,
                                              <<k_make_array_u_1199@73:2>@75:0>:int)
      
      P[<k_make_array_u_1188@70:3>](<k_make_array_u_1199@73:0>:int,<k_make_array_u_1199@73:1>:int,true:bool)|- P[<k_make_array_u_1199@73:3>](
      <k_make_array_u_1199@73:0>:int,<k_make_array_u_1199@73:1>:int,<k_make_array_u_1199@73:3>:unit)
      
      P[<make_array_1030@67:1>](<k_make_array_u_1188@70:1>:int,<k_make_array_u_1188@70:0>:int),
      ((0 <= <k_make_array_u_1188@70:0>) &&
       (<k_make_array_u_1188@70:3> = (<k_make_array_u_1188@70:0> < <k_make_array_u_1188@70:1>)))
      |- P[<k_make_array_u_1188@70:3>](<k_make_array_u_1188@70:0>:int,
                                       <k_make_array_u_1188@70:1>:int,
                                       <k_make_array_u_1188@70:3>:bool)
      
      P[<main_1042@59:1>](<make_array_1030@67:0>:int,<main_1042@59:1>:int),
      P[<<bcopy_aux_1152@62:1>@65:0>](<make_array_1030@67:0>:int,<make_array_1030@67:1>:int),
      (<make_array_1030@67:0> <= <main_1042@59:1>)
      |- P[<make_array_1030@67:1>](<make_array_1030@67:0>:int,<make_array_1030@67:1>:int)
      
      P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
      (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
      |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int)
      
      P[<main_1042@59:1>](<bcopy_aux_1152@62:0>:int,<main_1042@59:1>:int),
      ((<bcopy_aux_1152@62:3> = 0) && (<bcopy_aux_1152@62:0> <= <main_1042@59:1>))
      |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int)
      
      P[<f_1483@57:1>](<main_1042@59:0>:int,<main_1042@59:1>:int)|- P[<main_1042@59:1>](
      <main_1042@59:0>:int,<main_1042@59:1>:int)
      
      P[<f_1482@54:0>](<f_1483@57:0>:int)|- P[<f_1483@57:1>](<f_1483@57:0>:int,
                                                             <f_1483@57:1>:int)
      
      |- P[<f_1482@54:0>](<f_1482@54:0>:int)
    call trees:
      <main_1478@51>
        <f_1482@54>
          <f_1483@57>
            <main_1042@59>
              <bcopy_aux_1152@62>
              </<bcopy_aux_1152@62:1>@65>
              <make_array_1030@67>
                <k_make_array_u_1188@70>
                  <k_make_array_u_1199@73>
                  </<k_make_array_u_1199@73:2>@75>
                </<k_make_array_u_1188@70:2>@77>
              </<make_array_1030@67:2>@79>
              <<<bcopy_aux_1152@62:1>@65:1>@81>
                <f_bcopy_aux_1480@83>
                  <update_1153@85>
                  </<update_1153@85:0>@87>
                </<f_bcopy_aux_1480@83:2>@89>
              </<bcopy_aux_1152@62:2>@91>
              <make_array_1030@93>
                <k_make_array_u_1188@96>
                  <fail_1485@99>
    inlined horn clauses:
      P[<fail_1485@99:0>](<fail_1485@99:0>:bool)|- bot
      
      P[<<bcopy_aux_1152@62:2>@91:0>](var152:int,<k_make_array_u_1188@96:0>:int),
      ((0 > <k_make_array_u_1188@96:0>) && <fail_1485@99:0>) |- P[<fail_1485@99:0>](
      <fail_1485@99:0>:bool)
      
      P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,var153:int),
      P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
      P[<bcopy_aux_1152@62:3>](var155:int,<<bcopy_aux_1152@62:2>@91:0>:int),
      P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var155:int,<<bcopy_aux_1152@62:2>@91:0>:int,var154:int),
      ((<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>) && (<<bcopy_aux_1152@62:2>@91:0> < var155))
      |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:2>@91:0>:int)
      
      P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
      ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
       ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
      |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                <<bcopy_aux_1152@62:1>@65:0>:int,
                                                <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
      
      P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
      (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
      |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int)
      
       (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                               <bcopy_aux_1152@62:3>:int)
    begin ParamSubstInfer.infer(7733)[3]
      
    end ParamSubstInfer.infer(7733)[3] (0.120982 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(7735)[3]
      
    end RefTypeInfer.elim_coeffs(7735)[3] (0.002000 sec.)
    begin YhornInterface.solve(8117)[3]
      begin HcSolver.solve_ub(8118)[4]
        encoded:
          P[<fail_1485@99:0>](<fail_1485@99:0>:int)|- bot
          
          P[<<bcopy_aux_1152@62:2>@91:0>](var152:int,<k_make_array_u_1188@96:0>:int),
          ((0 > <k_make_array_u_1188@96:0>) && (<fail_1485@99:0> = 1)) |- P[<fail_1485@99:0>](
          <fail_1485@99:0>:int)
          
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,var153:int),
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          P[<bcopy_aux_1152@62:3>](var155:int,<<bcopy_aux_1152@62:2>@91:0>:int),
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var155:int,<<bcopy_aux_1152@62:2>@91:0>:int,var154:int),
          ((<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>) && (<<bcopy_aux_1152@62:2>@91:0> < var155))
          |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:2>@91:0>:int)
          
          P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
          |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                    <<bcopy_aux_1152@62:1>@65:0>:int,
                                                    <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
          
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
          |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:1>@65:0>:int)
          
           (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                   <bcopy_aux_1152@62:3>:int)
        input to Yhorn:
          P[<fail_1485@99:0>](<fail_1485@99:0>:int)|- bot
          
          P[<<bcopy_aux_1152@62:2>@91:0>](var152:int,<k_make_array_u_1188@96:0>:int),
          ((0 > <k_make_array_u_1188@96:0>) && (<fail_1485@99:0> = 1)) |- P[<fail_1485@99:0>](
          <fail_1485@99:0>:int)
          
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,var153:int),
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          P[<bcopy_aux_1152@62:3>](var155:int,<<bcopy_aux_1152@62:2>@91:0>:int),
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var155:int,<<bcopy_aux_1152@62:2>@91:0>:int,var154:int),
          ((<<bcopy_aux_1152@62:2>@91:0> < var155) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
          |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:2>@91:0>:int)
          
          P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          ((<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>) &&
           ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0)))
          |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                    <<bcopy_aux_1152@62:1>@65:0>:int,
                                                    <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
          
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
          |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:1>@65:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1485_sep_99_sep_0($124)) -> 1=0.
(($124-1=0) & (-$125>0)) & (v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0($126,$125)) -> v_sep_fail_1485_sep_99_sep_0($124).
(($127-$128<0) & ($129-$130<0)) & (v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($130,$129,$131)) & (v_sep_bcopy_aux_1152_sep_62_sep_3($130,$129)) & (v_sep_bcopy_aux_1152_sep_62_sep_3($128,$127)) & (v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($128,$127,$132)) -> v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0($128,$129).
(($133=0) & (-$127<=0) & ($127-$128<0)) & (v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0($128,$127)) -> v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($128,$127,$133).
($127-$128<0) & (v_sep_bcopy_aux_1152_sep_62_sep_3($128,$127)) -> v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0($128,$127).
$134=0 -> v_sep_bcopy_aux_1152_sep_62_sep_3($128,$134).


v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
.........Extend [18]0.325949
Reconstrcut: 4

v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
...Extend [18]0.326949
Reconstrcut: 7

v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
.......Split conj [18] 0.329949
(Reconstrcut: 7 **)
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
.........
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
...
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
.......
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
.........
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
..........(0=0) & (v_sep_fail_1485_sep_99_sep_0($124)) -> 1=0.
(($124-1=0) & (-$125>0)) & (v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0($126,$125)) -> v_sep_fail_1485_sep_99_sep_0($124).
(($127-$128<0) & ($129-$130<0)) & (v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($130,$129,$131)) & (v_sep_bcopy_aux_1152_sep_62_sep_3($130,$129)) & (v_sep_bcopy_aux_1152_sep_62_sep_3($128,$127)) & (v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($128,$127,$132)) -> v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0($128,$129).
(($133=0) & (-$127<=0) & ($127-$128<0)) & (v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0($128,$127)) -> v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($128,$127,$133).
($127-$128<0) & (v_sep_bcopy_aux_1152_sep_62_sep_3($128,$127)) -> v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0($128,$127).
$134=0 -> v_sep_bcopy_aux_1152_sep_62_sep_3($128,$134).

           (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                   <bcopy_aux_1152@62:3>:int)
        solution:
          P[<<bcopy_aux_1152@62:1>@65:0>]($155:int,$157:int) = true
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>]($143:int,$145:int,$147:int) = (0 <= $145)
          P[<<bcopy_aux_1152@62:2>@91:0>]($138:int,$140:int) = (0 <= $140)
          P[<bcopy_aux_1152@62:3>]($150:int,$152:int) = true
          P[<fail_1485@99:0>]($135:bool) = false
        
      end HcSolver.solve_ub(8118)[4] (0.028995 sec.)
      begin HcSolver.check_validity(8348)[4]
        input:
          P[<fail_1485@99:0>](<fail_1485@99:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@62:2>@91:0>](var152:int,<k_make_array_u_1188@96:0>:int),
          ((0 > <k_make_array_u_1188@96:0>) && <fail_1485@99:0>) |- P[<fail_1485@99:0>](
          <fail_1485@99:0>:bool)
          
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,var153:int),
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          P[<bcopy_aux_1152@62:3>](var155:int,<<bcopy_aux_1152@62:2>@91:0>:int),
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var155:int,<<bcopy_aux_1152@62:2>@91:0>:int,var154:int),
          ((<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>) && (<<bcopy_aux_1152@62:2>@91:0> < var155))
          |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:2>@91:0>:int)
          
          P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
          |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                    <<bcopy_aux_1152@62:1>@65:0>:int,
                                                    <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
          
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
          |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:1>@65:0>:int)
          
           (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                   <bcopy_aux_1152@62:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(8348)[4] (0.004000 sec.)
      solution:
        P[<<bcopy_aux_1152@62:1>@65:0>]($155:int,$157:int) = true
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>]($143:int,$145:int,$147:int) = (0 <= $145)
        P[<<bcopy_aux_1152@62:2>@91:0>]($138:int,$140:int) = (0 <= $140)
        P[<bcopy_aux_1152@62:3>]($150:int,$152:int) = true
        P[<fail_1485@99:0>]($135:bool) = false
    end YhornInterface.solve(8117)[3] (0.032995 sec.)
    
  end RefTypeInfer.infer_etrs(4466)[2] (0.174974 sec.)
  refinement types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:int -> (v3:{v3:int | (0 <= v2)} -> X) -> X) ->
                    (v6:{v6:int | (0 <= v6)} -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1199: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1480: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1153: (v1:int -> (v2:int -> X) -> X) -> v5:int -> v6:int -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1485: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1484: var183:int -> var182:int -> var181:unit -> X
    f_bcopy_aux_1481: var198:int ->
                      var197:int ->
                      var196:int ->
                      (var195:int -> (var194:int -> X) -> X) ->
                      (var191:unit -> X) -> (var189:int -> (var188:int -> X) -> X) -> var185:unit -> X
    f_update_1479: var204:int -> var203:int -> (var202:unit -> X) -> var200:int -> X
  abstraction types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:int -> (v3:int[v3 -> (0 <= v2)] -> X) -> X) ->
                    (v6:int[v6 -> (0 <= v6)] -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: var205:int -> var206:int -> (var207:int -> X) -> X
    k_make_array_u_1188: var210:int -> var211:int -> (var212:int -> X) -> var214:bool -> X
    k_make_array_u_1199: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1480: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1153: (v1:int -> (v2:int -> X) -> X) -> v5:int -> v6:int -> (v7:unit -> X) -> X
    fail_1485: v1:bool -> (v2:unit -> X) -> X
    f_1484: var183:int -> var182:int -> var181:unit -> X
    f_bcopy_aux_1481: var198:int ->
                      var197:int ->
                      var196:int ->
                      (var195:int -> (var194:int -> X) -> X) ->
                      (var191:unit -> X) -> (var189:int -> (var188:int -> X) -> X) -> var185:unit -> X
    f_update_1479: var204:int -> var203:int -> (var202:unit -> X) -> var200:int -> X
  
end AbsTypeInfer.refine(4465)[1] (0.177973 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1478
  main_1478 -> (rand_int f_1482)
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (i_1041 >= m_1038) -> (k_bcopy_aux_1292 ())
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (
      not (i_1041 >= m_1038)) -> (src_1039 i_1041 (f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039))
  f_1482 x_1436 -> (rand_int (f_1483 x_1436))
  f_1483 x_1436 x_1449 -> (main_1042 x_1436 x_1449 (f_1484 x_1436 x_1449))
  f_1484 x_1436 x_1449 x_1433 -> end
  f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 ->
      (update_1153 des_1040 i_1041 x_1323 (f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039))
  f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 ->
      (bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) k_bcopy_aux_1292)
  f_update_1479 i_1035 x_1036 k_update_1232 x_1235 -> (k_update_1232 ())
  fail_1485 b k -> {fail} => (k ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when b_1200 ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when (not b_1200) ->
      (fail_1485 true (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182))
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 -> (k_make_array_1182 0)
  main_1042 n_1043 m_1044 k_main_1369 when (n_1043 <= m_1044) ->
      (bcopy_aux_1152 n_1043 (make_array_1030 n_1043) (make_array_1030 m_1044) 0 k_main_1369)
  main_1042 n_1043 m_1044 k_main_1369 when (not (n_1043 <= m_1044)) -> (k_main_1369 ())
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (0 <= i_1032) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (not (0 <= i_1032)) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 false)
  update_1153 des_1034 i_1035 x_1036 k_update_1232 -> (des_1034 i_1035 (f_update_1479 i_1035 x_1036 k_update_1232))
Types:
  main_1478 : X
  bcopy_aux_1152 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int[x_3 >= 0] -> X) -> X) ->
                    (x_9:int[x_9 >= 0] -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1485 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1478 ... --> 
  f_1482 ... --> 
  f_1483 ... --> 
  main_1042 [1/2] ... --> 
  bcopy_aux_1152 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1188 [1/2] ... --> 
  k_make_array_u_1199 ... --> 
  f_bcopy_aux_1480 ... --> 
  update_1153 ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1188 [2/2] ... --> 
  fail_1485 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(10044)[1]
  program:
    main_1478  | true = ((Random.int 0) f_1482)
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    i_1041 >= m_1038) = (k_bcopy_aux_1292 ())
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    not (i_1041 >= m_1038)) = (src_1039 i_1041
                                        (f_bcopy_aux_1480 i_1041
                                                          m_1038
                                                          des_1040
                                                          k_bcopy_aux_1292
                                                          src_1039))
    f_1482 x_1436 | true = ((Random.int 0) (f_1483 x_1436))
    f_1483 x_1436 x_1449 | true = (main_1042 x_1436
                                             x_1449
                                             (f_1484 x_1436
                                                     x_1449))
    f_1484 x_1436 x_1449 x_1433 | true = end
    f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 | true = (
    update_1153 des_1040
                i_1041
                x_1323
                (f_bcopy_aux_1481 i_1041
                                  m_1038
                                  x_1323
                                  des_1040
                                  k_bcopy_aux_1292
                                  src_1039))
    f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 | true = (
    bcopy_aux_1152 m_1038
                   src_1039
                   des_1040
                   (i_1041 + 1)
                   k_bcopy_aux_1292)
    f_update_1479 i_1035 x_1036 k_update_1232 x_1235 | true = (k_update_1232 ())
    fail_1485 b k | true = (fail ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | b_1200 = (
    k_make_array_u_1199 i_1032
                        n_1031
                        k_make_array_1182
                        ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | (not b_1200) = (
    fail_1485 true
              (k_make_array_u_1199 i_1032
                                   n_1031
                                   k_make_array_1182))
    k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 | true = (
    k_make_array_1182 0)
    main_1042 n_1043 m_1044 k_main_1369 | (n_1043 <= m_1044) = (bcopy_aux_1152
                                                                  n_1043
                                                                  (make_array_1030 n_1043)
                                                                  (make_array_1030 m_1044)
                                                                  0
                                                                  k_main_1369)
    main_1042 n_1043 m_1044 k_main_1369 | (not (n_1043 <= m_1044)) = (
    k_main_1369 ())
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (0 <= i_1032) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (not (0 <= i_1032)) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        false)
    update_1153 des_1034 i_1035 x_1036 k_update_1232 | true = (des_1034
                                                                 i_1035
                                                                 (f_update_1479 i_1035
                                                                    x_1036
                                                                    k_update_1232))
    main_1478:X
    bcopy_aux_1152:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1482:int -> X
    f_1483:int -> int -> X
    f_1484:int -> int -> unit -> X
    f_bcopy_aux_1480:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1481:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1479:int -> int -> (unit -> X) -> int -> X
    fail_1485:bool -> (unit -> X) -> X
    k_make_array_u_1188:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1199:int -> int -> (int -> X) -> unit -> X
    main_1042:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1153:(int -> (int -> X) -> X) -> int -> int -> (unit -> X) -> X
  inlined functions: f_1482,f_1483,f_1484,f_bcopy_aux_1480,f_bcopy_aux_1481,f_update_1479,k_make_array_u_1188,k_make_array_u_1199,main_1042,make_array_1030,update_1153
  counterexample: 0:0:0:0:1:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1482@105:0> = var216)
     [true.nop((<f_1483@108:0> = <f_1482@105:0>) && (<f_1483@108:1> = var217))
      [true.((<main_1042@110:0> = <f_1483@108:0>) && (<main_1042@110:1> = <f_1483@108:1>))
       [(<main_1042@110:0> <= <main_1042@110:1>).
        ((<bcopy_aux_1152@113:0> = <main_1042@110:0>) && (<bcopy_aux_1152@113:3> = 0))
        [(not (<bcopy_aux_1152@113:3> >= <bcopy_aux_1152@113:0>)).
         (<<bcopy_aux_1152@113:1>@116:0> = <bcopy_aux_1152@113:3>)
         [true.
          ((<make_array_1030@118:0> = <main_1042@110:0>) && (<make_array_1030@118:1> = <<bcopy_aux_1152@113:1>@116:0>))
          [(0 <= <make_array_1030@118:1>).
           ((<k_make_array_u_1188@121:0> = <make_array_1030@118:1>) &&
            ((<k_make_array_u_1188@121:1> = <make_array_1030@118:0>) &&
             (<k_make_array_u_1188@121:3> = (<make_array_1030@118:1> < <make_array_1030@118:0>))))
           [<k_make_array_u_1188@121:3>.
            ((<k_make_array_u_1199@124:0> = <k_make_array_u_1188@121:0>) &&
             ((<k_make_array_u_1199@124:1> = <k_make_array_u_1188@121:1>) && (<k_make_array_u_1199@124:3> = ())))
            [true.(<<k_make_array_u_1199@124:2>@126:0> = 0)
             [true.(<<k_make_array_u_1188@121:2>@128:0> = <<k_make_array_u_1199@124:2>@126:0>)
              [true.(<<make_array_1030@118:2>@130:0> = <<k_make_array_u_1188@121:2>@128:0>)
               [true.(<<<bcopy_aux_1152@113:1>@116:1>@132:0> = <<make_array_1030@118:2>@130:0>)
                [true.
                 ((<f_bcopy_aux_1480@134:0> = <bcopy_aux_1152@113:3>) &&
                  ((<f_bcopy_aux_1480@134:1> = <bcopy_aux_1152@113:0>) &&
                   (<f_bcopy_aux_1480@134:5> = <<<bcopy_aux_1152@113:1>@116:1>@132:0>)))
                 [true.
                  ((<update_1153@136:1> = <f_bcopy_aux_1480@134:0>) && (<update_1153@136:2> = <f_bcopy_aux_1480@134:5>))
                  [true.(<<update_1153@136:0>@138:0> = <update_1153@136:1>)
                   [true.(<<f_bcopy_aux_1480@134:2>@140:0> = <<update_1153@136:0>@138:0>)
                    [true.(<<bcopy_aux_1152@113:2>@142:0> = <<f_bcopy_aux_1480@134:2>@140:0>)
                     [true.
                      ((<make_array_1030@144:0> = <main_1042@110:1>) &&
                       (<make_array_1030@144:1> = <<bcopy_aux_1152@113:2>@142:0>))
                      [(0 <= <make_array_1030@144:1>).
                       ((<k_make_array_u_1188@147:0> = <make_array_1030@144:1>) &&
                        ((<k_make_array_u_1188@147:1> = <make_array_1030@144:0>) &&
                         (<k_make_array_u_1188@147:3> = (<make_array_1030@144:1> < <make_array_1030@144:0>))))
                       [(not <k_make_array_u_1188@147:3>).(<fail_1485@150:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(10045)[2]
    horn clauses:
      P[<fail_1485@150:0>](<fail_1485@150:0>:bool)|- bot
      
      P[<k_make_array_u_1188@147:3>](<k_make_array_u_1188@147:0>:int,<k_make_array_u_1188@147:1>:int,false:bool),
      <fail_1485@150:0> |- P[<fail_1485@150:0>](<fail_1485@150:0>:bool)
      
      P[<make_array_1030@144:1>](<k_make_array_u_1188@147:1>:int,<k_make_array_u_1188@147:0>:int),
      ((0 <= <k_make_array_u_1188@147:0>) &&
       (<k_make_array_u_1188@147:3> = (<k_make_array_u_1188@147:0> < <k_make_array_u_1188@147:1>)))
      |- P[<k_make_array_u_1188@147:3>](<k_make_array_u_1188@147:0>:int,
                                        <k_make_array_u_1188@147:1>:int,
                                        <k_make_array_u_1188@147:3>:bool)
      
      P[<main_1042@110:1>](<bcopy_aux_1152@113:0>:int,<make_array_1030@144:0>:int),
      P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,<make_array_1030@144:1>:int),
      (<bcopy_aux_1152@113:0> <= <make_array_1030@144:0>)
      |- P[<make_array_1030@144:1>](<make_array_1030@144:0>:int,<make_array_1030@144:1>:int)
      
      P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
      P[<<f_bcopy_aux_1480@134:2>@140:0>](<<bcopy_aux_1152@113:1>@116:0>:int,<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:2>@142:0>:int),
      (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
      |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                           <<bcopy_aux_1152@113:2>@142:0>:int)
      
      P[<f_bcopy_aux_1480@134:5>](<f_bcopy_aux_1480@134:0>:int,<f_bcopy_aux_1480@134:1>:int,<update_1153@136:2>:int),
      P[<<update_1153@136:0>@138:0>](<<f_bcopy_aux_1480@134:2>@140:0>:int)|- P[<<f_bcopy_aux_1480@134:2>@140:0>](
      <f_bcopy_aux_1480@134:0>:int,<f_bcopy_aux_1480@134:1>:int,<<f_bcopy_aux_1480@134:2>@140:0>:int)
      
      P[<update_1153@136:2>](<<update_1153@136:0>@138:0>:int,<update_1153@136:2>:int)|- P[<<update_1153@136:0>@138:0>](
      <<update_1153@136:0>@138:0>:int)
      
      P[<f_bcopy_aux_1480@134:5>](<update_1153@136:1>:int,<f_bcopy_aux_1480@134:1>:int,<update_1153@136:2>:int)|- P[<update_1153@136:2>](
      <update_1153@136:1>:int,<update_1153@136:2>:int)
      
      P[<bcopy_aux_1152@113:3>](<f_bcopy_aux_1480@134:1>:int,<f_bcopy_aux_1480@134:0>:int),
      P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<f_bcopy_aux_1480@134:1>:int,<f_bcopy_aux_1480@134:0>:int,<f_bcopy_aux_1480@134:5>:int),
      (<f_bcopy_aux_1480@134:0> < <f_bcopy_aux_1480@134:1>)
      |- P[<f_bcopy_aux_1480@134:5>](<f_bcopy_aux_1480@134:0>:int,<f_bcopy_aux_1480@134:1>:int,
                                     <f_bcopy_aux_1480@134:5>:int)
      
      P[<main_1042@110:1>](<bcopy_aux_1152@113:0>:int,<main_1042@110:1>:int),
      P[<<make_array_1030@118:2>@130:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,<<<bcopy_aux_1152@113:1>@116:1>@132:0>:int),
      (<bcopy_aux_1152@113:0> <= <main_1042@110:1>)
      |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                   <<bcopy_aux_1152@113:1>@116:0>:int,
                                                   <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
      
      P[<make_array_1030@118:1>](<make_array_1030@118:0>:int,<make_array_1030@118:1>:int),
      P[<<k_make_array_u_1188@121:2>@128:0>](<make_array_1030@118:1>:int,<make_array_1030@118:0>:int,<<make_array_1030@118:2>@130:0>:int),
      (0 <= <make_array_1030@118:1>)
      |- P[<<make_array_1030@118:2>@130:0>](<make_array_1030@118:0>:int,
                                            <make_array_1030@118:1>:int,
                                            <<make_array_1030@118:2>@130:0>:int)
      
      P[<k_make_array_u_1188@121:3>](<k_make_array_u_1188@121:0>:int,<k_make_array_u_1188@121:1>:int,true:bool),
      P[<<k_make_array_u_1199@124:2>@126:0>](<k_make_array_u_1188@121:0>:int,<k_make_array_u_1188@121:1>:int,<<k_make_array_u_1188@121:2>@128:0>:int)|- P[<<k_make_array_u_1188@121:2>@128:0>](
      <k_make_array_u_1188@121:0>:int,<k_make_array_u_1188@121:1>:int,
      <<k_make_array_u_1188@121:2>@128:0>:int)
      
      P[<k_make_array_u_1199@124:3>](<k_make_array_u_1199@124:0>:int,<k_make_array_u_1199@124:1>:int,<k_make_array_u_1199@124:3>:unit),
      (<<k_make_array_u_1199@124:2>@126:0> = 0)
      |- P[<<k_make_array_u_1199@124:2>@126:0>](<k_make_array_u_1199@124:0>:int,
                                                <k_make_array_u_1199@124:1>:int,
                                                <<k_make_array_u_1199@124:2>@126:0>:int)
      
      P[<k_make_array_u_1188@121:3>](<k_make_array_u_1199@124:0>:int,<k_make_array_u_1199@124:1>:int,true:bool)|- P[<k_make_array_u_1199@124:3>](
      <k_make_array_u_1199@124:0>:int,<k_make_array_u_1199@124:1>:int,
      <k_make_array_u_1199@124:3>:unit)
      
      P[<make_array_1030@118:1>](<k_make_array_u_1188@121:1>:int,<k_make_array_u_1188@121:0>:int),
      ((0 <= <k_make_array_u_1188@121:0>) &&
       (<k_make_array_u_1188@121:3> = (<k_make_array_u_1188@121:0> < <k_make_array_u_1188@121:1>)))
      |- P[<k_make_array_u_1188@121:3>](<k_make_array_u_1188@121:0>:int,
                                        <k_make_array_u_1188@121:1>:int,
                                        <k_make_array_u_1188@121:3>:bool)
      
      P[<main_1042@110:1>](<make_array_1030@118:0>:int,<main_1042@110:1>:int),
      P[<<bcopy_aux_1152@113:1>@116:0>](<make_array_1030@118:0>:int,<make_array_1030@118:1>:int),
      (<make_array_1030@118:0> <= <main_1042@110:1>)
      |- P[<make_array_1030@118:1>](<make_array_1030@118:0>:int,<make_array_1030@118:1>:int)
      
      P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
      (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
      |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                           <<bcopy_aux_1152@113:1>@116:0>:int)
      
      P[<main_1042@110:1>](<bcopy_aux_1152@113:0>:int,<main_1042@110:1>:int),
      ((<bcopy_aux_1152@113:3> = 0) && (<bcopy_aux_1152@113:0> <= <main_1042@110:1>))
      |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
      
      P[<f_1483@108:1>](<main_1042@110:0>:int,<main_1042@110:1>:int)|- P[<main_1042@110:1>](
      <main_1042@110:0>:int,<main_1042@110:1>:int)
      
      P[<f_1482@105:0>](<f_1483@108:0>:int)|- P[<f_1483@108:1>](<f_1483@108:0>:int,
                                                                <f_1483@108:1>:int)
      
      |- P[<f_1482@105:0>](<f_1482@105:0>:int)
    call trees:
      <main_1478@102>
        <f_1482@105>
          <f_1483@108>
            <main_1042@110>
              <bcopy_aux_1152@113>
              </<bcopy_aux_1152@113:1>@116>
              <make_array_1030@118>
                <k_make_array_u_1188@121>
                  <k_make_array_u_1199@124>
                  </<k_make_array_u_1199@124:2>@126>
                </<k_make_array_u_1188@121:2>@128>
              </<make_array_1030@118:2>@130>
              <<<bcopy_aux_1152@113:1>@116:1>@132>
                <f_bcopy_aux_1480@134>
                  <update_1153@136>
                  </<update_1153@136:0>@138>
                </<f_bcopy_aux_1480@134:2>@140>
              </<bcopy_aux_1152@113:2>@142>
              <make_array_1030@144>
                <k_make_array_u_1188@147>
                  <fail_1485@150>
    inlined horn clauses:
      P[<fail_1485@150:0>](<fail_1485@150:0>:bool)|- bot
      
      P[<<bcopy_aux_1152@113:2>@142:0>](var222:int,<k_make_array_u_1188@147:0>:int),
      ((0 <= <k_make_array_u_1188@147:0>) && ((var222 < (1 + <k_make_array_u_1188@147:0>)) && <fail_1485@150:0>))
      |- P[<fail_1485@150:0>](<fail_1485@150:0>:bool)
      
      P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var223:int),
      P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
      P[<bcopy_aux_1152@113:3>](var225:int,<<bcopy_aux_1152@113:2>@142:0>:int),
      P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var225:int,<<bcopy_aux_1152@113:2>@142:0>:int,var224:int),
      ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var225))
      |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                           <<bcopy_aux_1152@113:2>@142:0>:int)
      
      P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
      ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
       ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
      |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                   <<bcopy_aux_1152@113:1>@116:0>:int,
                                                   <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
      
      P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
      (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
      |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                           <<bcopy_aux_1152@113:1>@116:0>:int)
      
       (<bcopy_aux_1152@113:3> = 0) |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,
                                                                 <bcopy_aux_1152@113:3>:int)
    begin ParamSubstInfer.infer(13583)[3]
      
    end ParamSubstInfer.infer(13583)[3] (0.222966 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(13585)[3]
      
    end RefTypeInfer.elim_coeffs(13585)[3] (0.001000 sec.)
    begin YhornInterface.solve(14056)[3]
      begin HcSolver.solve_ub(14057)[4]
        encoded:
          P[<fail_1485@150:0>](<fail_1485@150:0>:int)|- bot
          
          P[<<bcopy_aux_1152@113:2>@142:0>](var222:int,<k_make_array_u_1188@147:0>:int),
          ((0 <= <k_make_array_u_1188@147:0>) &&
           ((var222 < (1 + <k_make_array_u_1188@147:0>)) && (<fail_1485@150:0> = 1)))
          |- P[<fail_1485@150:0>](<fail_1485@150:0>:int)
          
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var223:int),
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          P[<bcopy_aux_1152@113:3>](var225:int,<<bcopy_aux_1152@113:2>@142:0>:int),
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var225:int,<<bcopy_aux_1152@113:2>@142:0>:int,var224:int),
          ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var225))
          |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:2>@142:0>:int)
          
          P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
           ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
          |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                       <<bcopy_aux_1152@113:1>@116:0>:int,
                                                       <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
          
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
          |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:1>@116:0>:int)
          
           (<bcopy_aux_1152@113:3> = 0)
          |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
        input to Yhorn:
          P[<fail_1485@150:0>](<fail_1485@150:0>:int)|- bot
          
          P[<<bcopy_aux_1152@113:2>@142:0>](var222:int,<k_make_array_u_1188@147:0>:int),
          ((var222 < (1 + <k_make_array_u_1188@147:0>)) &&
           ((0 <= <k_make_array_u_1188@147:0>) && (<fail_1485@150:0> = 1)))
          |- P[<fail_1485@150:0>](<fail_1485@150:0>:int)
          
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var223:int),
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          P[<bcopy_aux_1152@113:3>](var225:int,<<bcopy_aux_1152@113:2>@142:0>:int),
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var225:int,<<bcopy_aux_1152@113:2>@142:0>:int,var224:int),
          ((<<bcopy_aux_1152@113:2>@142:0> < var225) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
          |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:2>@142:0>:int)
          
          P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) &&
           ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0)))
          |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                       <<bcopy_aux_1152@113:1>@116:0>:int,
                                                       <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
          
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
          |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:1>@116:0>:int)
          
           (<bcopy_aux_1152@113:3> = 0)
          |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1485_sep_150_sep_0($269)) -> 1=0.
(($269-1=0) & (-$270<=0) & (-$270+$271-1<0)) & (v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0($271,$270)) -> v_sep_fail_1485_sep_150_sep_0($269).
(($272-$273<0) & ($274-$275<0)) & (v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0($275,$274,$276)) & (v_sep_bcopy_aux_1152_sep_113_sep_3($275,$274)) & (v_sep_bcopy_aux_1152_sep_113_sep_3($273,$272)) & (v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0($273,$272,$277)) -> v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0($273,$274).
(($278=0) & (-$272<=0) & ($272-$273<0)) & (v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0($273,$272)) -> v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0($273,$272,$278).
($272-$273<0) & (v_sep_bcopy_aux_1152_sep_113_sep_3($273,$272)) -> v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0($273,$272).
$279=0 -> v_sep_bcopy_aux_1152_sep_113_sep_3($273,$279).


v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
.........Extend [18]0.411936
Reconstrcut: 4

v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
...Extend [18]0.413936
Reconstrcut: 7

v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
.......Split conj [18] 0.414936
(Reconstrcut: 7 **)
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
.........
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
...
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
.......
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
.........
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
..........(0=0) & (v_sep_fail_1485_sep_150_sep_0($269)) -> 1=0.
(($269-1=0) & (-$270<=0) & (-$270+$271-1<0)) & (v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0($271,$270)) -> v_sep_fail_1485_sep_150_sep_0($269).
(($272-$273<0) & ($274-$275<0)) & (v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0($275,$274,$276)) & (v_sep_bcopy_aux_1152_sep_113_sep_3($275,$274)) & (v_sep_bcopy_aux_1152_sep_113_sep_3($273,$272)) & (v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0($273,$272,$277)) -> v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0($273,$274).
(($278=0) & (-$272<=0) & ($272-$273<0)) & (v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0($273,$272)) -> v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0($273,$272,$278).
($272-$273<0) & (v_sep_bcopy_aux_1152_sep_113_sep_3($273,$272)) -> v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0($273,$272).
$279=0 -> v_sep_bcopy_aux_1152_sep_113_sep_3($273,$279).

        solution:
          P[<<bcopy_aux_1152@113:1>@116:0>]($300:int,$302:int) = ($302 <= 0)
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>]($288:int,$290:int,$292:int) =
          ((2 <= ($290 + (2 * $288))) && ($290 <= 0))
          P[<<bcopy_aux_1152@113:2>@142:0>]($283:int,$285:int) = ((1 + $285) <= $283)
          P[<bcopy_aux_1152@113:3>]($295:int,$297:int) = ($297 <= 0)
          P[<fail_1485@150:0>]($280:bool) = false
        
      end HcSolver.solve_ub(14057)[4] (0.026996 sec.)
      begin HcSolver.check_validity(14364)[4]
        input:
          P[<fail_1485@150:0>](<fail_1485@150:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@113:2>@142:0>](var222:int,<k_make_array_u_1188@147:0>:int),
          ((0 <= <k_make_array_u_1188@147:0>) && ((var222 < (1 + <k_make_array_u_1188@147:0>)) && <fail_1485@150:0>))
          |- P[<fail_1485@150:0>](<fail_1485@150:0>:bool)
          
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var223:int),
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          P[<bcopy_aux_1152@113:3>](var225:int,<<bcopy_aux_1152@113:2>@142:0>:int),
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var225:int,<<bcopy_aux_1152@113:2>@142:0>:int,var224:int),
          ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var225))
          |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:2>@142:0>:int)
          
          P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
           ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
          |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                       <<bcopy_aux_1152@113:1>@116:0>:int,
                                                       <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
          
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
          |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:1>@116:0>:int)
          
           (<bcopy_aux_1152@113:3> = 0)
          |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(14364)[4] (0.008998 sec.)
      solution:
        P[<<bcopy_aux_1152@113:1>@116:0>]($300:int,$302:int) = ($302 <= 0)
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>]($288:int,$290:int,$292:int) =
        ((2 <= ($290 + (2 * $288))) && ($290 <= 0))
        P[<<bcopy_aux_1152@113:2>@142:0>]($283:int,$285:int) = ((1 + $285) <= $283)
        P[<bcopy_aux_1152@113:3>]($295:int,$297:int) = ($297 <= 0)
        P[<fail_1485@150:0>]($280:bool) = false
    end YhornInterface.solve(14056)[3] (0.035994 sec.)
    
  end RefTypeInfer.infer_etrs(10045)[2] (0.274958 sec.)
  refinement types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:{v2:int | (v2 <= 0)} -> (v3:{v3:int | ((2 <= (v2 + (2 * v1))) && (v2 <= 0))} -> X) -> X) ->
                    (v6:{v6:int | ((1 + v6) <= v1)} -> (v7:int -> X) -> X) ->
                    v10:{v10:int | (v10 <= 0)} -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1199: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1480: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1153: (v1:int -> (v2:int -> X) -> X) -> v5:int -> v6:int -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1485: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1484: var253:int -> var252:int -> var251:unit -> X
    f_bcopy_aux_1481: var268:int ->
                      var267:int ->
                      var266:int ->
                      (var265:int -> (var264:int -> X) -> X) ->
                      (var261:unit -> X) -> (var259:int -> (var258:int -> X) -> X) -> var255:unit -> X
    f_update_1479: var274:int -> var273:int -> (var272:unit -> X) -> var270:int -> X
  abstraction types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:int[v2 -> (v2 <= 0)] -> (v3:int[v3 -> ((2 <= (v2 + (2 * v1))) && (v2 <= 0))] -> X) -> X) ->
                    (v6:int[v6 -> ((1 + v6) <= v1)] -> (v7:int -> X) -> X) ->
                    v10:int[v10 -> (v10 <= 0)] -> (v11:unit -> X) -> X
    make_array_1030: var275:int -> var276:int -> (var277:int -> X) -> X
    k_make_array_u_1188: var280:int -> var281:int -> (var282:int -> X) -> var284:bool -> X
    k_make_array_u_1199: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1480: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1153: (v1:int -> (v2:int -> X) -> X) -> v5:int -> v6:int -> (v7:unit -> X) -> X
    fail_1485: v1:bool -> (v2:unit -> X) -> X
    f_1484: var253:int -> var252:int -> var251:unit -> X
    f_bcopy_aux_1481: var268:int ->
                      var267:int ->
                      var266:int ->
                      (var265:int -> (var264:int -> X) -> X) ->
                      (var261:unit -> X) -> (var259:int -> (var258:int -> X) -> X) -> var255:unit -> X
    f_update_1479: var274:int -> var273:int -> (var272:unit -> X) -> var270:int -> X
  
end AbsTypeInfer.refine(10044)[1] (0.280957 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1478
  main_1478 -> (rand_int f_1482)
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (i_1041 >= m_1038) -> (k_bcopy_aux_1292 ())
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (
      not (i_1041 >= m_1038)) -> (src_1039 i_1041 (f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039))
  f_1482 x_1436 -> (rand_int (f_1483 x_1436))
  f_1483 x_1436 x_1449 -> (main_1042 x_1436 x_1449 (f_1484 x_1436 x_1449))
  f_1484 x_1436 x_1449 x_1433 -> end
  f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 ->
      (update_1153 des_1040 i_1041 x_1323 (f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039))
  f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 ->
      (bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) k_bcopy_aux_1292)
  f_update_1479 i_1035 x_1036 k_update_1232 x_1235 -> (k_update_1232 ())
  fail_1485 b k -> {fail} => (k ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when b_1200 ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when (not b_1200) ->
      (fail_1485 true (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182))
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 -> (k_make_array_1182 0)
  main_1042 n_1043 m_1044 k_main_1369 when (n_1043 <= m_1044) ->
      (bcopy_aux_1152 n_1043 (make_array_1030 n_1043) (make_array_1030 m_1044) 0 k_main_1369)
  main_1042 n_1043 m_1044 k_main_1369 when (not (n_1043 <= m_1044)) -> (k_main_1369 ())
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (0 <= i_1032) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (not (0 <= i_1032)) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 false)
  update_1153 des_1034 i_1035 x_1036 k_update_1232 -> (des_1034 i_1035 (f_update_1479 i_1035 x_1036 k_update_1232))
Types:
  main_1478 : X
  bcopy_aux_1152 : (x_1:int ->
                    (x_3:int[x_3 <= 0; x_1 >= x_3 + 1; x_3 >= 0] ->
                     (int[2*x_1 >= -x_3 + 2 && x_3 <= 0; x_3 >= 0] -> X) -> X) ->
                    (x_9:int[x_1 >= x_9 + 1; x_9 >= 0] -> (int -> X) -> X) ->
                    x_14:int[x_14 <= 0; x_14 >= 0] -> (unit -> X) -> X)
  fail_1485 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  bcopy_aux: ((x_1:int ->
                   (((x_8:{x_8:int | x_8 >= 0 && x_8 <= 0} -> {x_9:int | 2 * x_1 >= (-x_8) + 2 && x_8 <= 0}) /\ 
                     (x_10:{x_10:int | (x_1 >= x_10 + 1 && x_10 >= 0) && x_10 > 0} ->
                          ({x_11:int | 2 * x_1 >= (-x_10) + 2 && x_10 <= 0} \/ 
                           {x_12:int | x_10 >= 0 && not (2 * x_1 >= (-x_10) + 2 && x_10 <= 0)}))) ->
                        (({x_6:int | x_6 >= 0 && x_1 >= x_6 + 1} -> int) -> ({x_4:int | x_4 >= 0 && x_4 > 0} -> unit)))) /\
              (x_13:int ->
                   (((x_20:{x_20:int | (x_13 >= x_20 + 1 && x_20 >= 0) && x_20 <= 0} ->
                          {x_21:int | 2 * x_13 >= (-x_20) + 2 && x_20 <= 0}) /\
                     (x_22:{x_22:int | (x_13 >= x_22 + 1 && x_22 >= 0) && x_22 > 0} ->
                          ({x_23:int | 2 * x_13 >= (-x_22) + 2 && x_22 <= 0} \/ 
                           {x_24:int | x_22 >= 0 && not (2 * x_13 >= (-x_22) + 2 && x_22 <= 0)}))) ->
                        (({x_18:int | x_18 >= 0 && x_13 >= x_18 + 1} -> int) ->
                             ({x_16:int | x_16 >= 0 && x_16 <= 0} -> unit)))))

cycles: 4
total: 4.090 sec
  abst: 0.212 sec
  mc: 0.149 sec
  refine: 0.639 sec
    exparam: 0.438 sec
