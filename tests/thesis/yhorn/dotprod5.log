MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn dotprod5.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 a_1036 x_1037 =
   let u_1097 = a_1036 i_1034 
   in
   let a_1038 j_1039 = if i_1034 = j_1039 then
                         x_1037
                       else
                         a_1036 j_1039 
   in
     a_1038 
 in
 let rec bcopy_aux_1040 m_1041 src_1042 des_1043 i_1044 =
   if i_1044 >= m_1041 then
     ()
   else
     bcopy_aux_1040 m_1041 src_1042 (update_1033 i_1044 m_1041 des_1043 (src_1042 i_1044)) (i_1044 + 1) 
 in
 let main_1045 n_1046 m_1047 i_1048 =
   let array1_1049 = make_array_1030 n_1046 
   in
   let array2_1050 = make_array_1030 m_1047 
   in
     if i_1048 = 0 && n_1046 <= m_1047 then
       bcopy_aux_1040 n_1046 array1_1049 array2_1050 i_1048
     else
       () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 a_1036 x_1037 =
   let u_1097 = a_1036 i_1034 
   in
   let a_1038 j_1039 = if i_1034 = j_1039 then
                         x_1037
                       else
                         a_1036 j_1039 
   in
     a_1038 
 in
 let rec bcopy_aux_1040 m_1041 src_1042 des_1043 i_1044 =
   if i_1044 >= m_1041 then
     ()
   else
     bcopy_aux_1040 m_1041 src_1042 (update_1033 i_1044 m_1041 des_1043 (src_1042 i_1044)) (i_1044 + 1) 
 in
 let main_1045 n_1046 m_1047 i_1048 =
   let array1_1049 = make_array_1030 n_1046 
   in
   let array2_1050 = make_array_1030 m_1047 
   in
     if i_1048 = 0 && n_1046 <= m_1047 then
       bcopy_aux_1040 n_1046 array1_1049 array2_1050 i_1048
     else
       () 
 in
 let main_1196 =
   let arg1_1193 = rand_int () 
   in
   let arg2_1194 = rand_int () 
   in
   let arg3_1195 = rand_int () 
   in
     main_1045 arg1_1193 arg2_1194 arg3_1195 
 in
   ()

copy_poly::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let update_1198 (i_1034:int) (n_1035:int) (a_1036:(int -> int)) (x_1037:int) =
   let u_1097 = a_1036 i_1034 
   in
   let a_1038 (j_1039:int) = if i_1034 = j_1039 then
                               x_1037
                             else
                               a_1036 j_1039 
   in
     a_1038 
 in
 let rec bcopy_aux_1197 (m_1041:int) (src_1042:(int -> int)) (des_1043:(
   int -> int)) (i_1044:int) =
   if i_1044 >= m_1041 then
     ()
   else
     bcopy_aux_1197 m_1041 src_1042 (update_1198 i_1044 m_1041 des_1043 (src_1042 i_1044)) (i_1044 + 1) 
 in
 let main_1045 (n_1046:int) (m_1047:int) (i_1048:int) =
   let array1_1049 = make_array_1030 n_1046 
   in
   let array2_1050 = make_array_1030 m_1047 
   in
     if i_1048 = 0 && n_1046 <= m_1047 then
       bcopy_aux_1197 n_1046 array1_1049 array2_1050 i_1048
     else
       () 
 in
 let main_1196 =
   let arg1_1193 = rand_int () 
   in
   let arg2_1194 = rand_int () 
   in
   let arg3_1195 = rand_int () 
   in
     main_1045 arg1_1193 arg2_1194 arg3_1195 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1226:(int -> X)) =
   let k_make_array_u_1243 (x_1229:unit) = k_make_array_1226 0 
   in
   let k_make_array_u_1232 (b_1244:bool) =
     if b_1244 then
       k_make_array_u_1243 ()
     else
       {|fail|} () k_make_array_u_1243 
   in
     if 0 <= i_1032 then
       k_make_array_u_1232 (i_1032 < n_1031)
     else
       k_make_array_u_1232 false 
 in
 let update_1198
   (i_1034:int) (n_1035:int) (a_1036:(int -> ((int -> X) -> X))) (x_1037:int) (k_update_1291:(
   (int -> ((int -> X) -> X)) -> X)) =
   a_1036 i_1034
     (fun x_1297 ->
        k_update_1291
          (let a_1038 (j_1039:int) (k_update_a_1312:(int -> X)) =
             if i_1034 = j_1039 then
               k_update_a_1312 x_1037
             else
               a_1036 j_1039 k_update_a_1312 
           in
             a_1038)) 
 in
 let rec bcopy_aux_1197
   (m_1041:int) (src_1042:(int -> ((int -> X) -> X))) (des_1043:(int -> ((int -> X) -> X))) (i_1044:int) (k_bcopy_aux_1376:(
   unit -> X)) =
   if i_1044 >= m_1041 then
     k_bcopy_aux_1376 ()
   else
     src_1042 i_1044
       (fun x_1429 ->
          update_1198 i_1044 m_1041 des_1043 x_1429
            (fun x_1446 -> bcopy_aux_1197 m_1041 src_1042 x_1446 (i_1044 + 1) k_bcopy_aux_1376)) 
 in
 let main_1045 (n_1046:int) (m_1047:int) (i_1048:int) (k_main_1477:(unit -> X)) =
   let k_main_1512 (b_1542:bool) =
     if b_1542 then
       bcopy_aux_1197 n_1046 (make_array_1030 n_1046) (make_array_1030 m_1047) i_1048 k_main_1477
     else
       k_main_1477 () 
   in
     if i_1048 = 0 then
       k_main_1512 (n_1046 <= m_1047)
     else
       k_main_1512 false 
 in
   rand_int_cps ()
     (fun x_1548 ->
        rand_int_cps ()
          (fun x_1561 -> rand_int_cps () (fun x_1574 -> main_1045 x_1548 x_1561 x_1574 (fun x_1545 -> end))))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1607
  main_1607 -> (rand_int f_1611)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (i_1034 = j_1039) -> (k_update_a_1312 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (
      not (i_1034 = j_1039)) -> (a_1036 j_1039 k_update_a_1312)
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (i_1044 >= m_1041) -> (k_bcopy_aux_1376 ())
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (
      not (i_1044 >= m_1041)) -> (src_1042 i_1044 (f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042))
  f_1611 x_1548 -> (rand_int (f_1612 x_1548))
  f_1612 x_1548 x_1561 -> (rand_int (f_1613 x_1548 x_1561))
  f_1613 x_1548 x_1561 x_1574 -> (main_1045 x_1548 x_1561 x_1574 (f_1614 x_1548 x_1561 x_1574))
  f_1614 x_1548 x_1561 x_1574 x_1545 -> end
  f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 ->
      (update_1198 i_1044 m_1041 des_1043 x_1429 (f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042))
  f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 ->
      (bcopy_aux_1197 m_1041 src_1042 x_1446 (i_1044 + 1) k_bcopy_aux_1376)
  f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 ->
      (k_update_1291 (a_1038 i_1034 n_1035 x_1037 x_1297 a_1036))
  fail_1615 b k -> {fail} => (k ())
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when b_1542 ->
      (bcopy_aux_1197 n_1046 (make_array_1030 n_1046) (make_array_1030 m_1047) i_1048 k_main_1477)
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when (not b_1542) -> (k_main_1477 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when b_1244 ->
      (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when (not b_1244) ->
      (fail_1615 true (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226))
  k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 -> (k_make_array_1226 0)
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (i_1048 = 0) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 (n_1046 <= m_1047))
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (not (i_1048 = 0)) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 false)
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (0 <= i_1032) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (not (0 <= i_1032)) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 false)
  update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 ->
      (a_1036 i_1034 (f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291))
Types:
  main_1607 : X
  bcopy_aux_1197 : (int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  fail_1615 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1607 ... --> 
  f_1611 ... --> 
  f_1612 ... --> 
  f_1613 ... --> 
  main_1045 [1/2] ... --> 
  k_main_1512 [1/2] ... --> 
  bcopy_aux_1197 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1232 [2/2] ... --> 
  fail_1615 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(237)[1]
  program:
    main_1607  | true = ((Random.int 0) f_1611)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    i_1034 = j_1039) = (k_update_a_1312 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    not (i_1034 = j_1039)) = (a_1036 j_1039
                                     k_update_a_1312)
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    i_1044 >= m_1041) = (k_bcopy_aux_1376 ())
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    not (i_1044 >= m_1041)) = (src_1042 i_1044
                                        (f_bcopy_aux_1609 i_1044
                                                          m_1041
                                                          des_1043
                                                          k_bcopy_aux_1376
                                                          src_1042))
    f_1611 x_1548 | true = ((Random.int 0) (f_1612 x_1548))
    f_1612 x_1548 x_1561 | true = ((Random.int 0) (f_1613 x_1548
                                                          x_1561))
    f_1613 x_1548 x_1561 x_1574 | true = (main_1045 x_1548
                                                    x_1561
                                                    x_1574
                                                    (f_1614 x_1548
                                                            x_1561
                                                            x_1574))
    f_1614 x_1548 x_1561 x_1574 x_1545 | true = end
    f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 | true = (
    update_1198 i_1044
                m_1041
                des_1043
                x_1429
                (f_bcopy_aux_1610 i_1044
                                  m_1041
                                  x_1429
                                  k_bcopy_aux_1376
                                  src_1042))
    f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 | true = (
    bcopy_aux_1197 m_1041
                   src_1042
                   x_1446
                   (i_1044 + 1)
                   k_bcopy_aux_1376)
    f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 | true = (
    k_update_1291 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1297
                          a_1036))
    fail_1615 b k | true = (fail ())
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | b_1542 = (bcopy_aux_1197
                                                                    n_1046
                                                                    (
                                                                    make_array_1030 n_1046)
                                                                    (
                                                                    make_array_1030 m_1047)
                                                                    i_1048
                                                                    k_main_1477)
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | (not b_1542) = (
    k_main_1477 ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | b_1244 = (
    k_make_array_u_1243 i_1032
                        n_1031
                        k_make_array_1226
                        ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | (not b_1244) = (
    fail_1615 true
              (k_make_array_u_1243 i_1032
                                   n_1031
                                   k_make_array_1226))
    k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 | true = (
    k_make_array_1226 0)
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (i_1048 = 0) = (k_main_1512
                                                                   i_1048
                                                                   m_1047
                                                                   n_1046
                                                                   k_main_1477
                                                                   (n_1046 <= m_1047))
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (not (i_1048 = 0)) = (
    k_main_1512 i_1048
                m_1047
                n_1046
                k_main_1477
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (0 <= i_1032) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (not (0 <= i_1032)) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        false)
    update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 | true = (a_1036
                                                                    i_1034
                                                                    (
                                                                    f_update_1608
                                                                    i_1034
                                                                    n_1035
                                                                    x_1037
                                                                    a_1036
                                                                    k_update_1291))
    main_1607:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    bcopy_aux_1197:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1611:int -> X
    f_1612:int -> int -> X
    f_1613:int -> int -> int -> X
    f_1614:int -> int -> int -> unit -> X
    f_bcopy_aux_1609:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1610:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> X
    f_update_1608:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1615:bool -> (unit -> X) -> X
    k_main_1512:int -> int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1232:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1243:int -> int -> (int -> X) -> unit -> X
    main_1045:int -> int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1198:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1611,f_1612,f_1613,f_1614,f_bcopy_aux_1609,f_bcopy_aux_1610,f_update_1608,k_main_1512,k_make_array_u_1232,k_make_array_u_1243,main_1045,make_array_1030,update_1198
  counterexample: 0:0:0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1611@4:0> = var2)
     [true.nop((<f_1612@7:0> = <f_1611@4:0>) && (<f_1612@7:1> = var3))
      [true.nop((<f_1613@10:0> = <f_1612@7:0>) && ((<f_1613@10:1> = <f_1612@7:1>) && (<f_1613@10:2> = var4)))
       [true.
        ((<main_1045@12:0> = <f_1613@10:0>) &&
         ((<main_1045@12:1> = <f_1613@10:1>) && (<main_1045@12:2> = <f_1613@10:2>)))
        [(<main_1045@12:2> = 0).
         ((<k_main_1512@15:0> = <main_1045@12:2>) &&
          ((<k_main_1512@15:1> = <main_1045@12:1>) &&
           ((<k_main_1512@15:2> = <main_1045@12:0>) && (<k_main_1512@15:4> = (<main_1045@12:0> <= <main_1045@12:1>)))))
         [<k_main_1512@15:4>.
          ((<bcopy_aux_1197@18:0> = <k_main_1512@15:2>) && (<bcopy_aux_1197@18:3> = <k_main_1512@15:0>))
          [(not (<bcopy_aux_1197@18:3> >= <bcopy_aux_1197@18:0>)).
           (<<bcopy_aux_1197@18:1>@21:0> = <bcopy_aux_1197@18:3>)
           [true.
            ((<make_array_1030@23:0> = <k_main_1512@15:2>) && (<make_array_1030@23:1> = <<bcopy_aux_1197@18:1>@21:0>))
            [(not (0 <= <make_array_1030@23:1>)).
             ((<k_make_array_u_1232@26:0> = <make_array_1030@23:1>) &&
              ((<k_make_array_u_1232@26:1> = <make_array_1030@23:0>) && (<k_make_array_u_1232@26:3> = false)))
             [(not <k_make_array_u_1232@26:3>).(<fail_1615@29:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(238)[2]
    horn clauses:
      P[<fail_1615@29:0>](<fail_1615@29:0>:bool)|- bot
      
      P[<k_make_array_u_1232@26:3>](<k_make_array_u_1232@26:0>:int,<k_make_array_u_1232@26:1>:int,false:bool),
      <fail_1615@29:0> |- P[<fail_1615@29:0>](<fail_1615@29:0>:bool)
      
      P[<make_array_1030@23:1>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
      ((0 > <k_make_array_u_1232@26:0>) && (not <k_make_array_u_1232@26:3>))
      |- P[<k_make_array_u_1232@26:3>](<k_make_array_u_1232@26:0>:int,
                                       <k_make_array_u_1232@26:1>:int,
                                       <k_make_array_u_1232@26:3>:bool)
      
      P[<k_main_1512@15:4>](<bcopy_aux_1197@18:3>:int,<k_main_1512@15:1>:int,<make_array_1030@23:0>:int,true:bool),
      P[<<bcopy_aux_1197@18:1>@21:0>](<make_array_1030@23:0>:int,<make_array_1030@23:1>:int)|- P[<make_array_1030@23:1>](
      <make_array_1030@23:0>:int,<make_array_1030@23:1>:int)
      
      P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
      (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
      |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int)
      
      P[<k_main_1512@15:4>](<bcopy_aux_1197@18:3>:int,<k_main_1512@15:1>:int,<bcopy_aux_1197@18:0>:int,true:bool)|- P[<bcopy_aux_1197@18:3>](
      <bcopy_aux_1197@18:0>:int,<bcopy_aux_1197@18:3>:int)
      
      P[<main_1045@12:2>](<k_main_1512@15:2>:int,<k_main_1512@15:1>:int,<k_main_1512@15:0>:int),
      ((<k_main_1512@15:0> = 0) && (<k_main_1512@15:4> = (<k_main_1512@15:2> <= <k_main_1512@15:1>)))
      |- P[<k_main_1512@15:4>](<k_main_1512@15:0>:int,<k_main_1512@15:1>:int,
                               <k_main_1512@15:2>:int,<k_main_1512@15:4>:bool)
      
      P[<f_1613@10:2>](<main_1045@12:0>:int,<main_1045@12:1>:int,<main_1045@12:2>:int)|- P[<main_1045@12:2>](
      <main_1045@12:0>:int,<main_1045@12:1>:int,<main_1045@12:2>:int)
      
      P[<f_1612@7:1>](<f_1613@10:0>:int,<f_1613@10:1>:int)|- P[<f_1613@10:2>](
      <f_1613@10:0>:int,<f_1613@10:1>:int,<f_1613@10:2>:int)
      
      P[<f_1611@4:0>](<f_1612@7:0>:int)|- P[<f_1612@7:1>](<f_1612@7:0>:int,
                                                          <f_1612@7:1>:int)
      
      |- P[<f_1611@4:0>](<f_1611@4:0>:int)
    call trees:
      <main_1607@1>
        <f_1611@4>
          <f_1612@7>
            <f_1613@10>
              <main_1045@12>
                <k_main_1512@15>
                  <bcopy_aux_1197@18>
                  </<bcopy_aux_1197@18:1>@21>
                  <make_array_1030@23>
                    <k_make_array_u_1232@26>
                      <fail_1615@29>
    inlined horn clauses:
      P[<fail_1615@29:0>](<fail_1615@29:0>:bool)|- bot
      
      P[<<bcopy_aux_1197@18:1>@21:0>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
      ((0 > <k_make_array_u_1232@26:0>) && <fail_1615@29:0>) |- P[<fail_1615@29:0>](
      <fail_1615@29:0>:bool)
      
      P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
      (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
      |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int)
      
       (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                               <bcopy_aux_1197@18:3>:int)
    begin ParamSubstInfer.infer(1446)[3]
      
    end ParamSubstInfer.infer(1446)[3] (0.036995 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1448)[3]
      
    end RefTypeInfer.elim_coeffs(1448)[3] (0.000000 sec.)
    begin YhornInterface.solve(1573)[3]
      begin HcSolver.solve_ub(1574)[4]
        encoded:
          P[<fail_1615@29:0>](<fail_1615@29:0>:int)|- bot
          
          P[<<bcopy_aux_1197@18:1>@21:0>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
          ((0 > <k_make_array_u_1232@26:0>) && (<fail_1615@29:0> = 1)) |- P[<fail_1615@29:0>](
          <fail_1615@29:0>:int)
          
          P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
          (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
          |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,
                                             <<bcopy_aux_1197@18:1>@21:0>:int)
          
           (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                                   <bcopy_aux_1197@18:3>:int)
        input to Yhorn:
          P[<fail_1615@29:0>](<fail_1615@29:0>:int)|- bot
          
          P[<<bcopy_aux_1197@18:1>@21:0>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
          ((0 > <k_make_array_u_1232@26:0>) && (<fail_1615@29:0> = 1)) |- P[<fail_1615@29:0>](
          <fail_1615@29:0>:int)
          
          P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
          (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
          |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,
                                             <<bcopy_aux_1197@18:1>@21:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1615_sep_29_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0)) & (v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0($9,$8)) -> v_sep_fail_1615_sep_29_sep_0($7).
($10-$11<0) & (v_sep_bcopy_aux_1197_sep_18_sep_3($11,$10)) -> v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0($11,$10).
$12=0 -> v_sep_bcopy_aux_1197_sep_18_sep_3($11,$12).


v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0: X
v_sep_bcopy_aux_1197_sep_18_sep_3: X
v_sep_fail_1615_sep_29_sep_0: X
....
v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0: X
v_sep_bcopy_aux_1197_sep_18_sep_3: X
v_sep_fail_1615_sep_29_sep_0: X
...
v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0: X
v_sep_bcopy_aux_1197_sep_18_sep_3: X
v_sep_fail_1615_sep_29_sep_0: X
....
v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0: X
v_sep_bcopy_aux_1197_sep_18_sep_3: X
v_sep_fail_1615_sep_29_sep_0: X
....(0=0) & (v_sep_fail_1615_sep_29_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0)) & (v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0($9,$8)) -> v_sep_fail_1615_sep_29_sep_0($7).
($10-$11<0) & (v_sep_bcopy_aux_1197_sep_18_sep_3($11,$10)) -> v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0($11,$10).
$12=0 -> v_sep_bcopy_aux_1197_sep_18_sep_3($11,$12).

           (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                                   <bcopy_aux_1197@18:3>:int)
        solution:
          P[<<bcopy_aux_1197@18:1>@21:0>]($16:int,$18:int) = (0 <= $18)
          P[<bcopy_aux_1197@18:3>]($21:int,$23:int) = (0 <= $23)
          P[<fail_1615@29:0>]($13:bool) = false
        
      end HcSolver.solve_ub(1574)[4] (0.010998 sec.)
      begin HcSolver.check_validity(1658)[4]
        input:
          P[<fail_1615@29:0>](<fail_1615@29:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@18:1>@21:0>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
          ((0 > <k_make_array_u_1232@26:0>) && <fail_1615@29:0>) |- P[<fail_1615@29:0>](
          <fail_1615@29:0>:bool)
          
          P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
          (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
          |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,
                                             <<bcopy_aux_1197@18:1>@21:0>:int)
          
           (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                                   <bcopy_aux_1197@18:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1658)[4] (0.002000 sec.)
      solution:
        P[<<bcopy_aux_1197@18:1>@21:0>]($16:int,$18:int) = (0 <= $18)
        P[<bcopy_aux_1197@18:3>]($21:int,$23:int) = (0 <= $23)
        P[<fail_1615@29:0>]($13:bool) = false
    end YhornInterface.solve(1573)[3] (0.012998 sec.)
    
  end RefTypeInfer.infer_etrs(238)[2] (0.053992 sec.)
  refinement types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:{v10:int | (0 <= v10)} -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1615: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var34:int ->
            var33:int ->
            var32:int -> var31:int -> (var30:int -> (var29:int -> X) -> X) -> var26:int -> (var25:int -> X) -> X
    f_1614: var39:int -> var38:int -> var37:int -> var36:unit -> X
    f_bcopy_aux_1609: var53:int ->
                      var52:int ->
                      (var51:int -> (var50:int -> X) -> X) ->
                      (var47:unit -> X) -> (var45:int -> (var44:int -> X) -> X) -> var41:int -> X
    f_bcopy_aux_1610: var67:int ->
                      var66:int ->
                      var65:int ->
                      (var64:unit -> X) ->
                      (var62:int -> (var61:int -> X) -> X) -> (var58:int -> (var57:int -> X) -> X) -> X
    f_update_1608: var81:int ->
                   var80:int ->
                   var79:int ->
                   (var78:int -> (var77:int -> X) -> X) ->
                   ((var74:int -> (var73:int -> X) -> X) -> X) -> var69:int -> X
    k_make_array_u_1243: var87:int -> var86:int -> (var85:int -> X) -> var83:unit -> X
    update_1198: var100:int ->
                 var99:int ->
                 (var98:int -> (var97:int -> X) -> X) -> var94:int -> ((var93:int -> (var92:int -> X) -> X) -> X) -> X
  abstraction types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int[v10 -> (
                                                              0 <= v10)] -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1615: v1:bool -> (v2:unit -> X) -> X
    a_1038: var34:int ->
            var33:int ->
            var32:int -> var31:int -> (var30:int -> (var29:int -> X) -> X) -> var26:int -> (var25:int -> X) -> X
    f_1614: var39:int -> var38:int -> var37:int -> var36:unit -> X
    f_bcopy_aux_1609: var53:int ->
                      var52:int ->
                      (var51:int -> (var50:int -> X) -> X) ->
                      (var47:unit -> X) -> (var45:int -> (var44:int -> X) -> X) -> var41:int -> X
    f_bcopy_aux_1610: var67:int ->
                      var66:int ->
                      var65:int ->
                      (var64:unit -> X) ->
                      (var62:int -> (var61:int -> X) -> X) -> (var58:int -> (var57:int -> X) -> X) -> X
    f_update_1608: var81:int ->
                   var80:int ->
                   var79:int ->
                   (var78:int -> (var77:int -> X) -> X) ->
                   ((var74:int -> (var73:int -> X) -> X) -> X) -> var69:int -> X
    k_make_array_u_1243: var87:int -> var86:int -> (var85:int -> X) -> var83:unit -> X
    update_1198: var100:int ->
                 var99:int ->
                 (var98:int -> (var97:int -> X) -> X) -> var94:int -> ((var93:int -> (var92:int -> X) -> X) -> X) -> X
  
end AbsTypeInfer.refine(237)[1] (0.059991 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1607
  main_1607 -> (rand_int f_1611)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (i_1034 = j_1039) -> (k_update_a_1312 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (
      not (i_1034 = j_1039)) -> (a_1036 j_1039 k_update_a_1312)
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (i_1044 >= m_1041) -> (k_bcopy_aux_1376 ())
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (
      not (i_1044 >= m_1041)) -> (src_1042 i_1044 (f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042))
  f_1611 x_1548 -> (rand_int (f_1612 x_1548))
  f_1612 x_1548 x_1561 -> (rand_int (f_1613 x_1548 x_1561))
  f_1613 x_1548 x_1561 x_1574 -> (main_1045 x_1548 x_1561 x_1574 (f_1614 x_1548 x_1561 x_1574))
  f_1614 x_1548 x_1561 x_1574 x_1545 -> end
  f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 ->
      (update_1198 i_1044 m_1041 des_1043 x_1429 (f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042))
  f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 ->
      (bcopy_aux_1197 m_1041 src_1042 x_1446 (i_1044 + 1) k_bcopy_aux_1376)
  f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 ->
      (k_update_1291 (a_1038 i_1034 n_1035 x_1037 x_1297 a_1036))
  fail_1615 b k -> {fail} => (k ())
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when b_1542 ->
      (bcopy_aux_1197 n_1046 (make_array_1030 n_1046) (make_array_1030 m_1047) i_1048 k_main_1477)
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when (not b_1542) -> (k_main_1477 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when b_1244 ->
      (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when (not b_1244) ->
      (fail_1615 true (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226))
  k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 -> (k_make_array_1226 0)
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (i_1048 = 0) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 (n_1046 <= m_1047))
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (not (i_1048 = 0)) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 false)
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (0 <= i_1032) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (not (0 <= i_1032)) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 false)
  update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 ->
      (a_1036 i_1034 (f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291))
Types:
  main_1607 : X
  bcopy_aux_1197 : (int ->
                    (x_3:int[x_3 >= 0] -> (int -> X) -> X) ->
                    (int -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1615 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1607 ... --> 
  f_1611 ... --> 
  f_1612 ... --> 
  f_1613 ... --> 
  main_1045 [1/2] ... --> 
  k_main_1512 [1/2] ... --> 
  bcopy_aux_1197 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1232 [2/2] ... --> 
  fail_1615 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(2359)[1]
  program:
    main_1607  | true = ((Random.int 0) f_1611)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    i_1034 = j_1039) = (k_update_a_1312 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    not (i_1034 = j_1039)) = (a_1036 j_1039
                                     k_update_a_1312)
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    i_1044 >= m_1041) = (k_bcopy_aux_1376 ())
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    not (i_1044 >= m_1041)) = (src_1042 i_1044
                                        (f_bcopy_aux_1609 i_1044
                                                          m_1041
                                                          des_1043
                                                          k_bcopy_aux_1376
                                                          src_1042))
    f_1611 x_1548 | true = ((Random.int 0) (f_1612 x_1548))
    f_1612 x_1548 x_1561 | true = ((Random.int 0) (f_1613 x_1548
                                                          x_1561))
    f_1613 x_1548 x_1561 x_1574 | true = (main_1045 x_1548
                                                    x_1561
                                                    x_1574
                                                    (f_1614 x_1548
                                                            x_1561
                                                            x_1574))
    f_1614 x_1548 x_1561 x_1574 x_1545 | true = end
    f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 | true = (
    update_1198 i_1044
                m_1041
                des_1043
                x_1429
                (f_bcopy_aux_1610 i_1044
                                  m_1041
                                  x_1429
                                  k_bcopy_aux_1376
                                  src_1042))
    f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 | true = (
    bcopy_aux_1197 m_1041
                   src_1042
                   x_1446
                   (i_1044 + 1)
                   k_bcopy_aux_1376)
    f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 | true = (
    k_update_1291 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1297
                          a_1036))
    fail_1615 b k | true = (fail ())
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | b_1542 = (bcopy_aux_1197
                                                                    n_1046
                                                                    (
                                                                    make_array_1030 n_1046)
                                                                    (
                                                                    make_array_1030 m_1047)
                                                                    i_1048
                                                                    k_main_1477)
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | (not b_1542) = (
    k_main_1477 ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | b_1244 = (
    k_make_array_u_1243 i_1032
                        n_1031
                        k_make_array_1226
                        ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | (not b_1244) = (
    fail_1615 true
              (k_make_array_u_1243 i_1032
                                   n_1031
                                   k_make_array_1226))
    k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 | true = (
    k_make_array_1226 0)
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (i_1048 = 0) = (k_main_1512
                                                                   i_1048
                                                                   m_1047
                                                                   n_1046
                                                                   k_main_1477
                                                                   (n_1046 <= m_1047))
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (not (i_1048 = 0)) = (
    k_main_1512 i_1048
                m_1047
                n_1046
                k_main_1477
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (0 <= i_1032) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (not (0 <= i_1032)) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        false)
    update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 | true = (a_1036
                                                                    i_1034
                                                                    (
                                                                    f_update_1608
                                                                    i_1034
                                                                    n_1035
                                                                    x_1037
                                                                    a_1036
                                                                    k_update_1291))
    main_1607:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    bcopy_aux_1197:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1611:int -> X
    f_1612:int -> int -> X
    f_1613:int -> int -> int -> X
    f_1614:int -> int -> int -> unit -> X
    f_bcopy_aux_1609:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1610:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> X
    f_update_1608:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1615:bool -> (unit -> X) -> X
    k_main_1512:int -> int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1232:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1243:int -> int -> (int -> X) -> unit -> X
    main_1045:int -> int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1198:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1611,f_1612,f_1613,f_1614,f_bcopy_aux_1609,f_bcopy_aux_1610,f_update_1608,k_main_1512,k_make_array_u_1232,k_make_array_u_1243,main_1045,make_array_1030,update_1198
  counterexample: 0:0:0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1611@35:0> = var101)
     [true.nop((<f_1612@38:0> = <f_1611@35:0>) && (<f_1612@38:1> = var102))
      [true.nop((<f_1613@41:0> = <f_1612@38:0>) && ((<f_1613@41:1> = <f_1612@38:1>) && (<f_1613@41:2> = var103)))
       [true.
        ((<main_1045@43:0> = <f_1613@41:0>) &&
         ((<main_1045@43:1> = <f_1613@41:1>) && (<main_1045@43:2> = <f_1613@41:2>)))
        [(<main_1045@43:2> = 0).
         ((<k_main_1512@46:0> = <main_1045@43:2>) &&
          ((<k_main_1512@46:1> = <main_1045@43:1>) &&
           ((<k_main_1512@46:2> = <main_1045@43:0>) && (<k_main_1512@46:4> = (<main_1045@43:0> <= <main_1045@43:1>)))))
         [<k_main_1512@46:4>.
          ((<bcopy_aux_1197@49:0> = <k_main_1512@46:2>) && (<bcopy_aux_1197@49:3> = <k_main_1512@46:0>))
          [(not (<bcopy_aux_1197@49:3> >= <bcopy_aux_1197@49:0>)).
           (<<bcopy_aux_1197@49:1>@52:0> = <bcopy_aux_1197@49:3>)
           [true.
            ((<make_array_1030@54:0> = <k_main_1512@46:2>) && (<make_array_1030@54:1> = <<bcopy_aux_1197@49:1>@52:0>))
            [(0 <= <make_array_1030@54:1>).
             ((<k_make_array_u_1232@57:0> = <make_array_1030@54:1>) &&
              ((<k_make_array_u_1232@57:1> = <make_array_1030@54:0>) &&
               (<k_make_array_u_1232@57:3> = (<make_array_1030@54:1> < <make_array_1030@54:0>))))
             [(not <k_make_array_u_1232@57:3>).(<fail_1615@60:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(2360)[2]
    horn clauses:
      P[<fail_1615@60:0>](<fail_1615@60:0>:bool)|- bot
      
      P[<k_make_array_u_1232@57:3>](<k_make_array_u_1232@57:0>:int,<k_make_array_u_1232@57:1>:int,false:bool),
      <fail_1615@60:0> |- P[<fail_1615@60:0>](<fail_1615@60:0>:bool)
      
      P[<make_array_1030@54:1>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
      ((0 <= <k_make_array_u_1232@57:0>) &&
       (<k_make_array_u_1232@57:3> = (<k_make_array_u_1232@57:0> < <k_make_array_u_1232@57:1>)))
      |- P[<k_make_array_u_1232@57:3>](<k_make_array_u_1232@57:0>:int,
                                       <k_make_array_u_1232@57:1>:int,
                                       <k_make_array_u_1232@57:3>:bool)
      
      P[<k_main_1512@46:4>](<bcopy_aux_1197@49:3>:int,<k_main_1512@46:1>:int,<make_array_1030@54:0>:int,true:bool),
      P[<<bcopy_aux_1197@49:1>@52:0>](<make_array_1030@54:0>:int,<make_array_1030@54:1>:int)|- P[<make_array_1030@54:1>](
      <make_array_1030@54:0>:int,<make_array_1030@54:1>:int)
      
      P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
      (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
      |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int)
      
      P[<k_main_1512@46:4>](<bcopy_aux_1197@49:3>:int,<k_main_1512@46:1>:int,<bcopy_aux_1197@49:0>:int,true:bool)|- P[<bcopy_aux_1197@49:3>](
      <bcopy_aux_1197@49:0>:int,<bcopy_aux_1197@49:3>:int)
      
      P[<main_1045@43:2>](<k_main_1512@46:2>:int,<k_main_1512@46:1>:int,<k_main_1512@46:0>:int),
      ((<k_main_1512@46:0> = 0) && (<k_main_1512@46:4> = (<k_main_1512@46:2> <= <k_main_1512@46:1>)))
      |- P[<k_main_1512@46:4>](<k_main_1512@46:0>:int,<k_main_1512@46:1>:int,
                               <k_main_1512@46:2>:int,<k_main_1512@46:4>:bool)
      
      P[<f_1613@41:2>](<main_1045@43:0>:int,<main_1045@43:1>:int,<main_1045@43:2>:int)|- P[<main_1045@43:2>](
      <main_1045@43:0>:int,<main_1045@43:1>:int,<main_1045@43:2>:int)
      
      P[<f_1612@38:1>](<f_1613@41:0>:int,<f_1613@41:1>:int)|- P[<f_1613@41:2>](
      <f_1613@41:0>:int,<f_1613@41:1>:int,<f_1613@41:2>:int)
      
      P[<f_1611@35:0>](<f_1612@38:0>:int)|- P[<f_1612@38:1>](<f_1612@38:0>:int,
                                                             <f_1612@38:1>:int)
      
      |- P[<f_1611@35:0>](<f_1611@35:0>:int)
    call trees:
      <main_1607@32>
        <f_1611@35>
          <f_1612@38>
            <f_1613@41>
              <main_1045@43>
                <k_main_1512@46>
                  <bcopy_aux_1197@49>
                  </<bcopy_aux_1197@49:1>@52>
                  <make_array_1030@54>
                    <k_make_array_u_1232@57>
                      <fail_1615@60>
    inlined horn clauses:
      P[<fail_1615@60:0>](<fail_1615@60:0>:bool)|- bot
      
      P[<<bcopy_aux_1197@49:1>@52:0>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
      ((0 <= <k_make_array_u_1232@57:0>) &&
       ((<k_make_array_u_1232@57:0> >= <k_make_array_u_1232@57:1>) && <fail_1615@60:0>))
      |- P[<fail_1615@60:0>](<fail_1615@60:0>:bool)
      
      P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
      (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
      |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int)
      
       (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                               <bcopy_aux_1197@49:3>:int)
    begin ParamSubstInfer.infer(3786)[3]
      
    end ParamSubstInfer.infer(3786)[3] (0.076989 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(3788)[3]
      
    end RefTypeInfer.elim_coeffs(3788)[3] (0.000000 sec.)
    begin YhornInterface.solve(3980)[3]
      begin HcSolver.solve_ub(3981)[4]
        encoded:
          P[<fail_1615@60:0>](<fail_1615@60:0>:int)|- bot
          
          P[<<bcopy_aux_1197@49:1>@52:0>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
          ((0 <= <k_make_array_u_1232@57:0>) &&
           ((<k_make_array_u_1232@57:0> >= <k_make_array_u_1232@57:1>) && (<fail_1615@60:0> = 1)))
          |- P[<fail_1615@60:0>](<fail_1615@60:0>:int)
          
          P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
          (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
          |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,
                                             <<bcopy_aux_1197@49:1>@52:0>:int)
          
           (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                                   <bcopy_aux_1197@49:3>:int)
        input to Yhorn:
          P[<fail_1615@60:0>](<fail_1615@60:0>:int)|- bot
          
          P[<<bcopy_aux_1197@49:1>@52:0>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
          ((<k_make_array_u_1232@57:0> >= <k_make_array_u_1232@57:1>) &&
           ((0 <= <k_make_array_u_1232@57:0>) && (<fail_1615@60:0> = 1))) |- P[<fail_1615@60:0>](
          <fail_1615@60:0>:int)
          
          P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
          (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
          |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,
                                             <<bcopy_aux_1197@49:1>@52:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1615_sep_60_sep_0($61)) -> 1=0.
(($61-1=0) & (-$62<=0) & ($62-$63>=0)) & (v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0($63,$62)) -> v_sep_fail_1615_sep_60_sep_0($61).
($64-$65<0) & (v_sep_bcopy_aux_1197_sep_49_sep_3($65,$64)) -> v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0($65,$64).
$66=0 -> v_sep_bcopy_aux_1197_sep_49_sep_3($65,$66).


v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0: X
v_sep_bcopy_aux_1197_sep_49_sep_3: X
v_sep_fail_1615_sep_60_sep_0: X
....
v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0: X
v_sep_bcopy_aux_1197_sep_49_sep_3: X
v_sep_fail_1615_sep_60_sep_0: X
...
v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0: X
v_sep_bcopy_aux_1197_sep_49_sep_3: X
v_sep_fail_1615_sep_60_sep_0: X
....
v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0: X
v_sep_bcopy_aux_1197_sep_49_sep_3: X
v_sep_fail_1615_sep_60_sep_0: X
....(0=0) & (v_sep_fail_1615_sep_60_sep_0($61)) -> 1=0.
(($61-1=0) & (-$62<=0) & ($62-$63>=0)) & (v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0($63,$62)) -> v_sep_fail_1615_sep_60_sep_0($61).
($64-$65<0) & (v_sep_bcopy_aux_1197_sep_49_sep_3($65,$64)) -> v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0($65,$64).
$66=0 -> v_sep_bcopy_aux_1197_sep_49_sep_3($65,$66).

           (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                                   <bcopy_aux_1197@49:3>:int)
        solution:
          P[<<bcopy_aux_1197@49:1>@52:0>]($70:int,$72:int) = ((1 + $72) <= $70)
          P[<bcopy_aux_1197@49:3>]($75:int,$77:int) = true
          P[<fail_1615@60:0>]($67:bool) = false
        
      end HcSolver.solve_ub(3981)[4] (0.009998 sec.)
      begin HcSolver.check_validity(4113)[4]
        input:
          P[<fail_1615@60:0>](<fail_1615@60:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@49:1>@52:0>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
          ((0 <= <k_make_array_u_1232@57:0>) &&
           ((<k_make_array_u_1232@57:0> >= <k_make_array_u_1232@57:1>) && <fail_1615@60:0>))
          |- P[<fail_1615@60:0>](<fail_1615@60:0>:bool)
          
          P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
          (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
          |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,
                                             <<bcopy_aux_1197@49:1>@52:0>:int)
          
           (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                                   <bcopy_aux_1197@49:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(4113)[4] (0.001000 sec.)
      solution:
        P[<<bcopy_aux_1197@49:1>@52:0>]($70:int,$72:int) = ((1 + $72) <= $70)
        P[<bcopy_aux_1197@49:3>]($75:int,$77:int) = true
        P[<fail_1615@60:0>]($67:bool) = false
    end YhornInterface.solve(3980)[3] (0.010998 sec.)
    
  end RefTypeInfer.infer_etrs(2360)[2] (0.096986 sec.)
  refinement types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1615: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var133:int ->
            var132:int ->
            var131:int -> var130:int -> (var129:int -> (var128:int -> X) -> X) -> var125:int -> (var124:int -> X) -> X
    f_1614: var138:int -> var137:int -> var136:int -> var135:unit -> X
    f_bcopy_aux_1609: var152:int ->
                      var151:int ->
                      (var150:int -> (var149:int -> X) -> X) ->
                      (var146:unit -> X) -> (var144:int -> (var143:int -> X) -> X) -> var140:int -> X
    f_bcopy_aux_1610: var166:int ->
                      var165:int ->
                      var164:int ->
                      (var163:unit -> X) ->
                      (var161:int -> (var160:int -> X) -> X) -> (var157:int -> (var156:int -> X) -> X) -> X
    f_update_1608: var180:int ->
                   var179:int ->
                   var178:int ->
                   (var177:int -> (var176:int -> X) -> X) ->
                   ((var173:int -> (var172:int -> X) -> X) -> X) -> var168:int -> X
    k_make_array_u_1243: var186:int -> var185:int -> (var184:int -> X) -> var182:unit -> X
    update_1198: var199:int ->
                 var198:int ->
                 (var197:int -> (var196:int -> X) -> X) ->
                 var193:int -> ((var192:int -> (var191:int -> X) -> X) -> X) -> X
  abstraction types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1615: v1:bool -> (v2:unit -> X) -> X
    a_1038: var133:int ->
            var132:int ->
            var131:int -> var130:int -> (var129:int -> (var128:int -> X) -> X) -> var125:int -> (var124:int -> X) -> X
    f_1614: var138:int -> var137:int -> var136:int -> var135:unit -> X
    f_bcopy_aux_1609: var152:int ->
                      var151:int ->
                      (var150:int -> (var149:int -> X) -> X) ->
                      (var146:unit -> X) -> (var144:int -> (var143:int -> X) -> X) -> var140:int -> X
    f_bcopy_aux_1610: var166:int ->
                      var165:int ->
                      var164:int ->
                      (var163:unit -> X) ->
                      (var161:int -> (var160:int -> X) -> X) -> (var157:int -> (var156:int -> X) -> X) -> X
    f_update_1608: var180:int ->
                   var179:int ->
                   var178:int ->
                   (var177:int -> (var176:int -> X) -> X) ->
                   ((var173:int -> (var172:int -> X) -> X) -> X) -> var168:int -> X
    k_make_array_u_1243: var186:int -> var185:int -> (var184:int -> X) -> var182:unit -> X
    update_1198: var199:int ->
                 var198:int ->
                 (var197:int -> (var196:int -> X) -> X) ->
                 var193:int -> ((var192:int -> (var191:int -> X) -> X) -> X) -> X
  
end AbsTypeInfer.refine(2359)[1] (0.102985 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1607
  main_1607 -> (rand_int f_1611)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (i_1034 = j_1039) -> (k_update_a_1312 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (
      not (i_1034 = j_1039)) -> (a_1036 j_1039 k_update_a_1312)
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (i_1044 >= m_1041) -> (k_bcopy_aux_1376 ())
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (
      not (i_1044 >= m_1041)) -> (src_1042 i_1044 (f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042))
  f_1611 x_1548 -> (rand_int (f_1612 x_1548))
  f_1612 x_1548 x_1561 -> (rand_int (f_1613 x_1548 x_1561))
  f_1613 x_1548 x_1561 x_1574 -> (main_1045 x_1548 x_1561 x_1574 (f_1614 x_1548 x_1561 x_1574))
  f_1614 x_1548 x_1561 x_1574 x_1545 -> end
  f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 ->
      (update_1198 i_1044 m_1041 des_1043 x_1429 (f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042))
  f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 ->
      (bcopy_aux_1197 m_1041 src_1042 x_1446 (i_1044 + 1) k_bcopy_aux_1376)
  f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 ->
      (k_update_1291 (a_1038 i_1034 n_1035 x_1037 x_1297 a_1036))
  fail_1615 b k -> {fail} => (k ())
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when b_1542 ->
      (bcopy_aux_1197 n_1046 (make_array_1030 n_1046) (make_array_1030 m_1047) i_1048 k_main_1477)
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when (not b_1542) -> (k_main_1477 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when b_1244 ->
      (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when (not b_1244) ->
      (fail_1615 true (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226))
  k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 -> (k_make_array_1226 0)
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (i_1048 = 0) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 (n_1046 <= m_1047))
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (not (i_1048 = 0)) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 false)
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (0 <= i_1032) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (not (0 <= i_1032)) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 false)
  update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 ->
      (a_1036 i_1034 (f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291))
Types:
  main_1607 : X
  bcopy_aux_1197 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                    (int -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1615 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1607 ... --> 
  f_1611 ... --> 
  f_1612 ... --> 
  f_1613 ... --> 
  main_1045 [1/2] ... --> 
  k_main_1512 [1/2] ... --> 
  bcopy_aux_1197 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1232 [1/2] ... --> 
  k_make_array_u_1243 ... --> 
  f_bcopy_aux_1609 ... --> 
  update_1198 ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1232 [2/2] ... --> 
  fail_1615 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(5044)[1]
  program:
    main_1607  | true = ((Random.int 0) f_1611)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    i_1034 = j_1039) = (k_update_a_1312 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    not (i_1034 = j_1039)) = (a_1036 j_1039
                                     k_update_a_1312)
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    i_1044 >= m_1041) = (k_bcopy_aux_1376 ())
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    not (i_1044 >= m_1041)) = (src_1042 i_1044
                                        (f_bcopy_aux_1609 i_1044
                                                          m_1041
                                                          des_1043
                                                          k_bcopy_aux_1376
                                                          src_1042))
    f_1611 x_1548 | true = ((Random.int 0) (f_1612 x_1548))
    f_1612 x_1548 x_1561 | true = ((Random.int 0) (f_1613 x_1548
                                                          x_1561))
    f_1613 x_1548 x_1561 x_1574 | true = (main_1045 x_1548
                                                    x_1561
                                                    x_1574
                                                    (f_1614 x_1548
                                                            x_1561
                                                            x_1574))
    f_1614 x_1548 x_1561 x_1574 x_1545 | true = end
    f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 | true = (
    update_1198 i_1044
                m_1041
                des_1043
                x_1429
                (f_bcopy_aux_1610 i_1044
                                  m_1041
                                  x_1429
                                  k_bcopy_aux_1376
                                  src_1042))
    f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 | true = (
    bcopy_aux_1197 m_1041
                   src_1042
                   x_1446
                   (i_1044 + 1)
                   k_bcopy_aux_1376)
    f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 | true = (
    k_update_1291 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1297
                          a_1036))
    fail_1615 b k | true = (fail ())
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | b_1542 = (bcopy_aux_1197
                                                                    n_1046
                                                                    (
                                                                    make_array_1030 n_1046)
                                                                    (
                                                                    make_array_1030 m_1047)
                                                                    i_1048
                                                                    k_main_1477)
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | (not b_1542) = (
    k_main_1477 ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | b_1244 = (
    k_make_array_u_1243 i_1032
                        n_1031
                        k_make_array_1226
                        ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | (not b_1244) = (
    fail_1615 true
              (k_make_array_u_1243 i_1032
                                   n_1031
                                   k_make_array_1226))
    k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 | true = (
    k_make_array_1226 0)
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (i_1048 = 0) = (k_main_1512
                                                                   i_1048
                                                                   m_1047
                                                                   n_1046
                                                                   k_main_1477
                                                                   (n_1046 <= m_1047))
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (not (i_1048 = 0)) = (
    k_main_1512 i_1048
                m_1047
                n_1046
                k_main_1477
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (0 <= i_1032) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (not (0 <= i_1032)) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        false)
    update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 | true = (a_1036
                                                                    i_1034
                                                                    (
                                                                    f_update_1608
                                                                    i_1034
                                                                    n_1035
                                                                    x_1037
                                                                    a_1036
                                                                    k_update_1291))
    main_1607:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    bcopy_aux_1197:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1611:int -> X
    f_1612:int -> int -> X
    f_1613:int -> int -> int -> X
    f_1614:int -> int -> int -> unit -> X
    f_bcopy_aux_1609:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1610:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> X
    f_update_1608:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1615:bool -> (unit -> X) -> X
    k_main_1512:int -> int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1232:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1243:int -> int -> (int -> X) -> unit -> X
    main_1045:int -> int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1198:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1611,f_1612,f_1613,f_1614,f_bcopy_aux_1609,f_bcopy_aux_1610,f_update_1608,k_main_1512,k_make_array_u_1232,k_make_array_u_1243,main_1045,make_array_1030,update_1198
  counterexample: 0:0:0:0:0:0:1:0:0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1611@66:0> = var200)
     [true.nop((<f_1612@69:0> = <f_1611@66:0>) && (<f_1612@69:1> = var201))
      [true.nop((<f_1613@72:0> = <f_1612@69:0>) && ((<f_1613@72:1> = <f_1612@69:1>) && (<f_1613@72:2> = var202)))
       [true.
        ((<main_1045@74:0> = <f_1613@72:0>) &&
         ((<main_1045@74:1> = <f_1613@72:1>) && (<main_1045@74:2> = <f_1613@72:2>)))
        [(<main_1045@74:2> = 0).
         ((<k_main_1512@77:0> = <main_1045@74:2>) &&
          ((<k_main_1512@77:1> = <main_1045@74:1>) &&
           ((<k_main_1512@77:2> = <main_1045@74:0>) && (<k_main_1512@77:4> = (<main_1045@74:0> <= <main_1045@74:1>)))))
         [<k_main_1512@77:4>.
          ((<bcopy_aux_1197@80:0> = <k_main_1512@77:2>) && (<bcopy_aux_1197@80:3> = <k_main_1512@77:0>))
          [(not (<bcopy_aux_1197@80:3> >= <bcopy_aux_1197@80:0>)).
           (<<bcopy_aux_1197@80:1>@83:0> = <bcopy_aux_1197@80:3>)
           [true.
            ((<make_array_1030@85:0> = <k_main_1512@77:2>) && (<make_array_1030@85:1> = <<bcopy_aux_1197@80:1>@83:0>))
            [(0 <= <make_array_1030@85:1>).
             ((<k_make_array_u_1232@88:0> = <make_array_1030@85:1>) &&
              ((<k_make_array_u_1232@88:1> = <make_array_1030@85:0>) &&
               (<k_make_array_u_1232@88:3> = (<make_array_1030@85:1> < <make_array_1030@85:0>))))
             [<k_make_array_u_1232@88:3>.
              ((<k_make_array_u_1243@91:0> = <k_make_array_u_1232@88:0>) &&
               ((<k_make_array_u_1243@91:1> = <k_make_array_u_1232@88:1>) && (<k_make_array_u_1243@91:3> = ())))
              [true.(<<k_make_array_u_1243@91:2>@93:0> = 0)
               [true.(<<k_make_array_u_1232@88:2>@95:0> = <<k_make_array_u_1243@91:2>@93:0>)
                [true.(<<make_array_1030@85:2>@97:0> = <<k_make_array_u_1232@88:2>@95:0>)
                 [true.(<<<bcopy_aux_1197@80:1>@83:1>@99:0> = <<make_array_1030@85:2>@97:0>)
                  [true.
                   ((<f_bcopy_aux_1609@101:0> = <bcopy_aux_1197@80:3>) &&
                    ((<f_bcopy_aux_1609@101:1> = <bcopy_aux_1197@80:0>) &&
                     (<f_bcopy_aux_1609@101:5> = <<<bcopy_aux_1197@80:1>@83:1>@99:0>)))
                   [true.
                    ((<update_1198@103:0> = <f_bcopy_aux_1609@101:0>) &&
                     ((<update_1198@103:1> = <f_bcopy_aux_1609@101:1>) &&
                      (<update_1198@103:3> = <f_bcopy_aux_1609@101:5>)))
                    [true.(<<update_1198@103:2>@105:0> = <update_1198@103:0>)
                     [true.(<<f_bcopy_aux_1609@101:2>@107:0> = <<update_1198@103:2>@105:0>)
                      [true.(<<bcopy_aux_1197@80:2>@109:0> = <<f_bcopy_aux_1609@101:2>@107:0>)
                       [true.
                        ((<make_array_1030@111:0> = <k_main_1512@77:1>) &&
                         (<make_array_1030@111:1> = <<bcopy_aux_1197@80:2>@109:0>))
                        [(not (0 <= <make_array_1030@111:1>)).
                         ((<k_make_array_u_1232@114:0> = <make_array_1030@111:1>) &&
                          ((<k_make_array_u_1232@114:1> = <make_array_1030@111:0>) &&
                           (<k_make_array_u_1232@114:3> = false)))
                         [(not <k_make_array_u_1232@114:3>).(<fail_1615@117:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(5045)[2]
    horn clauses:
      P[<fail_1615@117:0>](<fail_1615@117:0>:bool)|- bot
      
      P[<k_make_array_u_1232@114:3>](<k_make_array_u_1232@114:0>:int,<k_make_array_u_1232@114:1>:int,false:bool),
      <fail_1615@117:0> |- P[<fail_1615@117:0>](<fail_1615@117:0>:bool)
      
      P[<make_array_1030@111:1>](<k_make_array_u_1232@114:1>:int,<k_make_array_u_1232@114:0>:int),
      ((0 > <k_make_array_u_1232@114:0>) && (not <k_make_array_u_1232@114:3>))
      |- P[<k_make_array_u_1232@114:3>](<k_make_array_u_1232@114:0>:int,
                                        <k_make_array_u_1232@114:1>:int,
                                        <k_make_array_u_1232@114:3>:bool)
      
      P[<k_main_1512@77:4>](<bcopy_aux_1197@80:3>:int,<make_array_1030@111:0>:int,<bcopy_aux_1197@80:0>:int,true:bool),
      P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,<make_array_1030@111:1>:int)|- P[<make_array_1030@111:1>](
      <make_array_1030@111:0>:int,<make_array_1030@111:1>:int)
      
      P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
      P[<<f_bcopy_aux_1609@101:2>@107:0>](<<bcopy_aux_1197@80:1>@83:0>:int,<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
      (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
      |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int)
      
      P[<f_bcopy_aux_1609@101:5>](<f_bcopy_aux_1609@101:0>:int,<f_bcopy_aux_1609@101:1>:int,<update_1198@103:3>:int),
      P[<<update_1198@103:2>@105:0>](<f_bcopy_aux_1609@101:0>:int,<f_bcopy_aux_1609@101:1>:int,<<f_bcopy_aux_1609@101:2>@107:0>:int)|- P[<<f_bcopy_aux_1609@101:2>@107:0>](
      <f_bcopy_aux_1609@101:0>:int,<f_bcopy_aux_1609@101:1>:int,<<f_bcopy_aux_1609@101:2>@107:0>:int)
      
      P[<update_1198@103:3>](<update_1198@103:0>:int,<update_1198@103:1>:int,<update_1198@103:3>:int),
      (<<update_1198@103:2>@105:0> = <update_1198@103:0>)
      |- P[<<update_1198@103:2>@105:0>](<update_1198@103:0>:int,<update_1198@103:1>:int,
                                        <<update_1198@103:2>@105:0>:int)
      
      P[<f_bcopy_aux_1609@101:5>](<update_1198@103:0>:int,<update_1198@103:1>:int,<update_1198@103:3>:int)|- P[<update_1198@103:3>](
      <update_1198@103:0>:int,<update_1198@103:1>:int,<update_1198@103:3>:int)
      
      P[<bcopy_aux_1197@80:3>](<f_bcopy_aux_1609@101:1>:int,<f_bcopy_aux_1609@101:0>:int),
      P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<f_bcopy_aux_1609@101:1>:int,<f_bcopy_aux_1609@101:0>:int,<f_bcopy_aux_1609@101:5>:int),
      (<f_bcopy_aux_1609@101:0> < <f_bcopy_aux_1609@101:1>)
      |- P[<f_bcopy_aux_1609@101:5>](<f_bcopy_aux_1609@101:0>:int,<f_bcopy_aux_1609@101:1>:int,
                                     <f_bcopy_aux_1609@101:5>:int)
      
      P[<k_main_1512@77:4>](<bcopy_aux_1197@80:3>:int,<k_main_1512@77:1>:int,<bcopy_aux_1197@80:0>:int,true:bool),
      P[<<make_array_1030@85:2>@97:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int,<<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)|- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](
      <bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int,<<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
      
      P[<make_array_1030@85:1>](<make_array_1030@85:0>:int,<make_array_1030@85:1>:int),
      P[<<k_make_array_u_1232@88:2>@95:0>](<make_array_1030@85:1>:int,<make_array_1030@85:0>:int,<<make_array_1030@85:2>@97:0>:int),
      (0 <= <make_array_1030@85:1>)
      |- P[<<make_array_1030@85:2>@97:0>](<make_array_1030@85:0>:int,
                                          <make_array_1030@85:1>:int,
                                          <<make_array_1030@85:2>@97:0>:int)
      
      P[<k_make_array_u_1232@88:3>](<k_make_array_u_1232@88:0>:int,<k_make_array_u_1232@88:1>:int,true:bool),
      P[<<k_make_array_u_1243@91:2>@93:0>](<k_make_array_u_1232@88:0>:int,<k_make_array_u_1232@88:1>:int,<<k_make_array_u_1232@88:2>@95:0>:int)|- P[<<k_make_array_u_1232@88:2>@95:0>](
      <k_make_array_u_1232@88:0>:int,<k_make_array_u_1232@88:1>:int,<<k_make_array_u_1232@88:2>@95:0>:int)
      
      P[<k_make_array_u_1243@91:3>](<k_make_array_u_1243@91:0>:int,<k_make_array_u_1243@91:1>:int,<k_make_array_u_1243@91:3>:unit),
      (<<k_make_array_u_1243@91:2>@93:0> = 0)
      |- P[<<k_make_array_u_1243@91:2>@93:0>](<k_make_array_u_1243@91:0>:int,
                                              <k_make_array_u_1243@91:1>:int,
                                              <<k_make_array_u_1243@91:2>@93:0>:int)
      
      P[<k_make_array_u_1232@88:3>](<k_make_array_u_1243@91:0>:int,<k_make_array_u_1243@91:1>:int,true:bool)|- P[<k_make_array_u_1243@91:3>](
      <k_make_array_u_1243@91:0>:int,<k_make_array_u_1243@91:1>:int,<k_make_array_u_1243@91:3>:unit)
      
      P[<make_array_1030@85:1>](<k_make_array_u_1232@88:1>:int,<k_make_array_u_1232@88:0>:int),
      ((0 <= <k_make_array_u_1232@88:0>) &&
       (<k_make_array_u_1232@88:3> = (<k_make_array_u_1232@88:0> < <k_make_array_u_1232@88:1>)))
      |- P[<k_make_array_u_1232@88:3>](<k_make_array_u_1232@88:0>:int,
                                       <k_make_array_u_1232@88:1>:int,
                                       <k_make_array_u_1232@88:3>:bool)
      
      P[<k_main_1512@77:4>](<bcopy_aux_1197@80:3>:int,<k_main_1512@77:1>:int,<make_array_1030@85:0>:int,true:bool),
      P[<<bcopy_aux_1197@80:1>@83:0>](<make_array_1030@85:0>:int,<make_array_1030@85:1>:int)|- P[<make_array_1030@85:1>](
      <make_array_1030@85:0>:int,<make_array_1030@85:1>:int)
      
      P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
      (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
      |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int)
      
      P[<k_main_1512@77:4>](<bcopy_aux_1197@80:3>:int,<k_main_1512@77:1>:int,<bcopy_aux_1197@80:0>:int,true:bool)|- P[<bcopy_aux_1197@80:3>](
      <bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int)
      
      P[<main_1045@74:2>](<k_main_1512@77:2>:int,<k_main_1512@77:1>:int,<k_main_1512@77:0>:int),
      ((<k_main_1512@77:0> = 0) && (<k_main_1512@77:4> = (<k_main_1512@77:2> <= <k_main_1512@77:1>)))
      |- P[<k_main_1512@77:4>](<k_main_1512@77:0>:int,<k_main_1512@77:1>:int,
                               <k_main_1512@77:2>:int,<k_main_1512@77:4>:bool)
      
      P[<f_1613@72:2>](<main_1045@74:0>:int,<main_1045@74:1>:int,<main_1045@74:2>:int)|- P[<main_1045@74:2>](
      <main_1045@74:0>:int,<main_1045@74:1>:int,<main_1045@74:2>:int)
      
      P[<f_1612@69:1>](<f_1613@72:0>:int,<f_1613@72:1>:int)|- P[<f_1613@72:2>](
      <f_1613@72:0>:int,<f_1613@72:1>:int,<f_1613@72:2>:int)
      
      P[<f_1611@66:0>](<f_1612@69:0>:int)|- P[<f_1612@69:1>](<f_1612@69:0>:int,
                                                             <f_1612@69:1>:int)
      
      |- P[<f_1611@66:0>](<f_1611@66:0>:int)
    call trees:
      <main_1607@63>
        <f_1611@66>
          <f_1612@69>
            <f_1613@72>
              <main_1045@74>
                <k_main_1512@77>
                  <bcopy_aux_1197@80>
                  </<bcopy_aux_1197@80:1>@83>
                  <make_array_1030@85>
                    <k_make_array_u_1232@88>
                      <k_make_array_u_1243@91>
                      </<k_make_array_u_1243@91:2>@93>
                    </<k_make_array_u_1232@88:2>@95>
                  </<make_array_1030@85:2>@97>
                  <<<bcopy_aux_1197@80:1>@83:1>@99>
                    <f_bcopy_aux_1609@101>
                      <update_1198@103>
                      </<update_1198@103:2>@105>
                    </<f_bcopy_aux_1609@101:2>@107>
                  </<bcopy_aux_1197@80:2>@109>
                  <make_array_1030@111>
                    <k_make_array_u_1232@114>
                      <fail_1615@117>
    inlined horn clauses:
      P[<fail_1615@117:0>](<fail_1615@117:0>:bool)|- bot
      
      P[<<bcopy_aux_1197@80:2>@109:0>](var205:int,<k_make_array_u_1232@114:0>:int),
      ((0 > <k_make_array_u_1232@114:0>) && <fail_1615@117:0>) |- P[<fail_1615@117:0>](
      <fail_1615@117:0>:bool)
      
      P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var206:int),
      P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
      (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>)
      |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int)
      
      P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
      ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
       ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (0 <= <<bcopy_aux_1197@80:1>@83:0>)))
      |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                <<bcopy_aux_1197@80:1>@83:0>:int,
                                                <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
      
      P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
      (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
      |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int)
      
       (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                               <bcopy_aux_1197@80:3>:int)
    begin ParamSubstInfer.infer(8373)[3]
      
    end ParamSubstInfer.infer(8373)[3] (0.135979 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(8375)[3]
      
    end RefTypeInfer.elim_coeffs(8375)[3] (0.000000 sec.)
    begin YhornInterface.solve(8640)[3]
      begin HcSolver.solve_ub(8641)[4]
        encoded:
          P[<fail_1615@117:0>](<fail_1615@117:0>:int)|- bot
          
          P[<<bcopy_aux_1197@80:2>@109:0>](var205:int,<k_make_array_u_1232@114:0>:int),
          ((0 > <k_make_array_u_1232@114:0>) && (<fail_1615@117:0> = 1)) |- P[<fail_1615@117:0>](
          <fail_1615@117:0>:int)
          
          P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var206:int),
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
          (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,
                                              <<bcopy_aux_1197@80:2>@109:0>:int)
          
          P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
           ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (0 <= <<bcopy_aux_1197@80:1>@83:0>)))
          |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                    <<bcopy_aux_1197@80:1>@83:0>:int,
                                                    <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
          
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                             <<bcopy_aux_1197@80:1>@83:0>:int)
          
           (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                   <bcopy_aux_1197@80:3>:int)
        input to Yhorn:
          P[<fail_1615@117:0>](<fail_1615@117:0>:int)|- bot
          
          P[<<bcopy_aux_1197@80:2>@109:0>](var205:int,<k_make_array_u_1232@114:0>:int),
          ((0 > <k_make_array_u_1232@114:0>) && (<fail_1615@117:0> = 1)) |- P[<fail_1615@117:0>](
          <fail_1615@117:0>:int)
          
          P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var206:int),
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
          (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,
                                              <<bcopy_aux_1197@80:2>@109:0>:int)
          
          P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          ((0 <= <<bcopy_aux_1197@80:1>@83:0>) &&
           ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0)))
          |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                    <<bcopy_aux_1197@80:1>@83:0>:int,
                                                    <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
          
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                             <<bcopy_aux_1197@80:1>@83:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1615_sep_117_sep_0($122)) -> 1=0.
(($122-1=0) & (-$123>0)) & (v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0($124,$123)) -> v_sep_fail_1615_sep_117_sep_0($122).
($125-$126<0) & (v_sep_bcopy_aux_1197_sep_80_sep_3($126,$125)) & (v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0($126,$125,$127)) -> v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0($126,$125).
(($128=0) & (-$126+$129<0) & (-$129<=0)) & (v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0($126,$129)) -> v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0($126,$129,$128).
(-$126+$129<0) & (v_sep_bcopy_aux_1197_sep_80_sep_3($126,$129)) -> v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0($126,$129).
$130=0 -> v_sep_bcopy_aux_1197_sep_80_sep_3($126,$130).


v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_3: X
v_sep_fail_1615_sep_117_sep_0: X
.......
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_3: X
v_sep_fail_1615_sep_117_sep_0: X
...
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_3: X
v_sep_fail_1615_sep_117_sep_0: X
.....
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_3: X
v_sep_fail_1615_sep_117_sep_0: X
......
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_3: X
v_sep_fail_1615_sep_117_sep_0: X
.......(0=0) & (v_sep_fail_1615_sep_117_sep_0($122)) -> 1=0.
(($122-1=0) & (-$123>0)) & (v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0($124,$123)) -> v_sep_fail_1615_sep_117_sep_0($122).
($125-$126<0) & (v_sep_bcopy_aux_1197_sep_80_sep_3($126,$125)) & (v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0($126,$125,$127)) -> v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0($126,$125).
(($128=0) & (-$126+$129<0) & (-$129<=0)) & (v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0($126,$129)) -> v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0($126,$129,$128).
(-$126+$129<0) & (v_sep_bcopy_aux_1197_sep_80_sep_3($126,$129)) -> v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0($126,$129).
$130=0 -> v_sep_bcopy_aux_1197_sep_80_sep_3($126,$130).

           (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                   <bcopy_aux_1197@80:3>:int)
        solution:
          P[<<bcopy_aux_1197@80:1>@83:0>]($151:int,$153:int) = true
          P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>]($144:int,$146:int,$148:int) = (0 <= $146)
          P[<<bcopy_aux_1197@80:2>@109:0>]($134:int,$136:int) = (0 <= $136)
          P[<bcopy_aux_1197@80:3>]($139:int,$141:int) = true
          P[<fail_1615@117:0>]($131:bool) = false
        
      end HcSolver.solve_ub(8641)[4] (0.018997 sec.)
      begin HcSolver.check_validity(8826)[4]
        input:
          P[<fail_1615@117:0>](<fail_1615@117:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@80:2>@109:0>](var205:int,<k_make_array_u_1232@114:0>:int),
          ((0 > <k_make_array_u_1232@114:0>) && <fail_1615@117:0>) |- P[<fail_1615@117:0>](
          <fail_1615@117:0>:bool)
          
          P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var206:int),
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
          (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,
                                              <<bcopy_aux_1197@80:2>@109:0>:int)
          
          P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
           ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (0 <= <<bcopy_aux_1197@80:1>@83:0>)))
          |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                    <<bcopy_aux_1197@80:1>@83:0>:int,
                                                    <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
          
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                             <<bcopy_aux_1197@80:1>@83:0>:int)
          
           (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                   <bcopy_aux_1197@80:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(8826)[4] (0.002000 sec.)
      solution:
        P[<<bcopy_aux_1197@80:1>@83:0>]($151:int,$153:int) = true
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>]($144:int,$146:int,$148:int) = (0 <= $146)
        P[<<bcopy_aux_1197@80:2>@109:0>]($134:int,$136:int) = (0 <= $136)
        P[<bcopy_aux_1197@80:3>]($139:int,$141:int) = true
        P[<fail_1615@117:0>]($131:bool) = false
    end YhornInterface.solve(8640)[3] (0.020997 sec.)
    
  end RefTypeInfer.infer_etrs(5045)[2] (0.178973 sec.)
  refinement types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:int -> (v3:{v3:int | (0 <= v2)} -> X) -> X) ->
                    (v6:{v6:int | (0 <= v6)} -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1243: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1609: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1198: v1:int ->
                 v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> ((v8:int -> (v9:int -> X) -> X) -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1615: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var247:int ->
            var246:int ->
            var245:int -> var244:int -> (var243:int -> (var242:int -> X) -> X) -> var239:int -> (var238:int -> X) -> X
    f_1614: var252:int -> var251:int -> var250:int -> var249:unit -> X
    f_bcopy_aux_1610: var266:int ->
                      var265:int ->
                      var264:int ->
                      (var263:unit -> X) ->
                      (var261:int -> (var260:int -> X) -> X) -> (var257:int -> (var256:int -> X) -> X) -> X
    f_update_1608: var280:int ->
                   var279:int ->
                   var278:int ->
                   (var277:int -> (var276:int -> X) -> X) ->
                   ((var273:int -> (var272:int -> X) -> X) -> X) -> var268:int -> X
  abstraction types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:int -> (v3:int[v3 -> (0 <= v2)] -> X) -> X) ->
                    (v6:int[v6 -> (0 <= v6)] -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: var281:int -> var282:int -> (var283:int -> X) -> X
    k_make_array_u_1232: var286:int -> var287:int -> (var288:int -> X) -> var290:bool -> X
    k_make_array_u_1243: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1609: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1198: v1:int ->
                 v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> ((v8:int -> (v9:int -> X) -> X) -> X) -> X
    fail_1615: v1:bool -> (v2:unit -> X) -> X
    a_1038: var247:int ->
            var246:int ->
            var245:int -> var244:int -> (var243:int -> (var242:int -> X) -> X) -> var239:int -> (var238:int -> X) -> X
    f_1614: var252:int -> var251:int -> var250:int -> var249:unit -> X
    f_bcopy_aux_1610: var266:int ->
                      var265:int ->
                      var264:int ->
                      (var263:unit -> X) ->
                      (var261:int -> (var260:int -> X) -> X) -> (var257:int -> (var256:int -> X) -> X) -> X
    f_update_1608: var280:int ->
                   var279:int ->
                   var278:int ->
                   (var277:int -> (var276:int -> X) -> X) ->
                   ((var273:int -> (var272:int -> X) -> X) -> X) -> var268:int -> X
  
end AbsTypeInfer.refine(5044)[1] (0.183971 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1607
  main_1607 -> (rand_int f_1611)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (i_1034 = j_1039) -> (k_update_a_1312 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (
      not (i_1034 = j_1039)) -> (a_1036 j_1039 k_update_a_1312)
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (i_1044 >= m_1041) -> (k_bcopy_aux_1376 ())
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (
      not (i_1044 >= m_1041)) -> (src_1042 i_1044 (f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042))
  f_1611 x_1548 -> (rand_int (f_1612 x_1548))
  f_1612 x_1548 x_1561 -> (rand_int (f_1613 x_1548 x_1561))
  f_1613 x_1548 x_1561 x_1574 -> (main_1045 x_1548 x_1561 x_1574 (f_1614 x_1548 x_1561 x_1574))
  f_1614 x_1548 x_1561 x_1574 x_1545 -> end
  f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 ->
      (update_1198 i_1044 m_1041 des_1043 x_1429 (f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042))
  f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 ->
      (bcopy_aux_1197 m_1041 src_1042 x_1446 (i_1044 + 1) k_bcopy_aux_1376)
  f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 ->
      (k_update_1291 (a_1038 i_1034 n_1035 x_1037 x_1297 a_1036))
  fail_1615 b k -> {fail} => (k ())
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when b_1542 ->
      (bcopy_aux_1197 n_1046 (make_array_1030 n_1046) (make_array_1030 m_1047) i_1048 k_main_1477)
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when (not b_1542) -> (k_main_1477 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when b_1244 ->
      (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when (not b_1244) ->
      (fail_1615 true (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226))
  k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 -> (k_make_array_1226 0)
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (i_1048 = 0) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 (n_1046 <= m_1047))
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (not (i_1048 = 0)) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 false)
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (0 <= i_1032) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (not (0 <= i_1032)) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 false)
  update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 ->
      (a_1036 i_1034 (f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291))
Types:
  main_1607 : X
  bcopy_aux_1197 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int[x_3 >= 0] -> X) -> X) ->
                    (x_9:int[x_9 >= 0] -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1615 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1607 ... --> 
  f_1611 ... --> 
  f_1612 ... --> 
  f_1613 ... --> 
  main_1045 [1/2] ... --> 
  k_main_1512 [1/2] ... --> 
  bcopy_aux_1197 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1232 [1/2] ... --> 
  k_make_array_u_1243 ... --> 
  f_bcopy_aux_1609 ... --> 
  update_1198 ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1232 [2/2] ... --> 
  fail_1615 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(10677)[1]
  program:
    main_1607  | true = ((Random.int 0) f_1611)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    i_1034 = j_1039) = (k_update_a_1312 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    not (i_1034 = j_1039)) = (a_1036 j_1039
                                     k_update_a_1312)
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    i_1044 >= m_1041) = (k_bcopy_aux_1376 ())
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    not (i_1044 >= m_1041)) = (src_1042 i_1044
                                        (f_bcopy_aux_1609 i_1044
                                                          m_1041
                                                          des_1043
                                                          k_bcopy_aux_1376
                                                          src_1042))
    f_1611 x_1548 | true = ((Random.int 0) (f_1612 x_1548))
    f_1612 x_1548 x_1561 | true = ((Random.int 0) (f_1613 x_1548
                                                          x_1561))
    f_1613 x_1548 x_1561 x_1574 | true = (main_1045 x_1548
                                                    x_1561
                                                    x_1574
                                                    (f_1614 x_1548
                                                            x_1561
                                                            x_1574))
    f_1614 x_1548 x_1561 x_1574 x_1545 | true = end
    f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 | true = (
    update_1198 i_1044
                m_1041
                des_1043
                x_1429
                (f_bcopy_aux_1610 i_1044
                                  m_1041
                                  x_1429
                                  k_bcopy_aux_1376
                                  src_1042))
    f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 | true = (
    bcopy_aux_1197 m_1041
                   src_1042
                   x_1446
                   (i_1044 + 1)
                   k_bcopy_aux_1376)
    f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 | true = (
    k_update_1291 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1297
                          a_1036))
    fail_1615 b k | true = (fail ())
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | b_1542 = (bcopy_aux_1197
                                                                    n_1046
                                                                    (
                                                                    make_array_1030 n_1046)
                                                                    (
                                                                    make_array_1030 m_1047)
                                                                    i_1048
                                                                    k_main_1477)
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | (not b_1542) = (
    k_main_1477 ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | b_1244 = (
    k_make_array_u_1243 i_1032
                        n_1031
                        k_make_array_1226
                        ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | (not b_1244) = (
    fail_1615 true
              (k_make_array_u_1243 i_1032
                                   n_1031
                                   k_make_array_1226))
    k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 | true = (
    k_make_array_1226 0)
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (i_1048 = 0) = (k_main_1512
                                                                   i_1048
                                                                   m_1047
                                                                   n_1046
                                                                   k_main_1477
                                                                   (n_1046 <= m_1047))
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (not (i_1048 = 0)) = (
    k_main_1512 i_1048
                m_1047
                n_1046
                k_main_1477
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (0 <= i_1032) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (not (0 <= i_1032)) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        false)
    update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 | true = (a_1036
                                                                    i_1034
                                                                    (
                                                                    f_update_1608
                                                                    i_1034
                                                                    n_1035
                                                                    x_1037
                                                                    a_1036
                                                                    k_update_1291))
    main_1607:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    bcopy_aux_1197:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1611:int -> X
    f_1612:int -> int -> X
    f_1613:int -> int -> int -> X
    f_1614:int -> int -> int -> unit -> X
    f_bcopy_aux_1609:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1610:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> X
    f_update_1608:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1615:bool -> (unit -> X) -> X
    k_main_1512:int -> int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1232:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1243:int -> int -> (int -> X) -> unit -> X
    main_1045:int -> int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1198:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1611,f_1612,f_1613,f_1614,f_bcopy_aux_1609,f_bcopy_aux_1610,f_update_1608,k_main_1512,k_make_array_u_1232,k_make_array_u_1243,main_1045,make_array_1030,update_1198
  counterexample: 0:0:0:0:0:0:1:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1611@123:0> = var292)
     [true.nop((<f_1612@126:0> = <f_1611@123:0>) && (<f_1612@126:1> = var293))
      [true.nop((<f_1613@129:0> = <f_1612@126:0>) && ((<f_1613@129:1> = <f_1612@126:1>) && (<f_1613@129:2> = var294)))
       [true.
        ((<main_1045@131:0> = <f_1613@129:0>) &&
         ((<main_1045@131:1> = <f_1613@129:1>) && (<main_1045@131:2> = <f_1613@129:2>)))
        [(<main_1045@131:2> = 0).
         ((<k_main_1512@134:0> = <main_1045@131:2>) &&
          ((<k_main_1512@134:1> = <main_1045@131:1>) &&
           ((<k_main_1512@134:2> = <main_1045@131:0>) &&
            (<k_main_1512@134:4> = (<main_1045@131:0> <= <main_1045@131:1>)))))
         [<k_main_1512@134:4>.
          ((<bcopy_aux_1197@137:0> = <k_main_1512@134:2>) && (<bcopy_aux_1197@137:3> = <k_main_1512@134:0>))
          [(not (<bcopy_aux_1197@137:3> >= <bcopy_aux_1197@137:0>)).
           (<<bcopy_aux_1197@137:1>@140:0> = <bcopy_aux_1197@137:3>)
           [true.
            ((<make_array_1030@142:0> = <k_main_1512@134:2>) &&
             (<make_array_1030@142:1> = <<bcopy_aux_1197@137:1>@140:0>))
            [(0 <= <make_array_1030@142:1>).
             ((<k_make_array_u_1232@145:0> = <make_array_1030@142:1>) &&
              ((<k_make_array_u_1232@145:1> = <make_array_1030@142:0>) &&
               (<k_make_array_u_1232@145:3> = (<make_array_1030@142:1> < <make_array_1030@142:0>))))
             [<k_make_array_u_1232@145:3>.
              ((<k_make_array_u_1243@148:0> = <k_make_array_u_1232@145:0>) &&
               ((<k_make_array_u_1243@148:1> = <k_make_array_u_1232@145:1>) && (<k_make_array_u_1243@148:3> = ())))
              [true.(<<k_make_array_u_1243@148:2>@150:0> = 0)
               [true.(<<k_make_array_u_1232@145:2>@152:0> = <<k_make_array_u_1243@148:2>@150:0>)
                [true.(<<make_array_1030@142:2>@154:0> = <<k_make_array_u_1232@145:2>@152:0>)
                 [true.(<<<bcopy_aux_1197@137:1>@140:1>@156:0> = <<make_array_1030@142:2>@154:0>)
                  [true.
                   ((<f_bcopy_aux_1609@158:0> = <bcopy_aux_1197@137:3>) &&
                    ((<f_bcopy_aux_1609@158:1> = <bcopy_aux_1197@137:0>) &&
                     (<f_bcopy_aux_1609@158:5> = <<<bcopy_aux_1197@137:1>@140:1>@156:0>)))
                   [true.
                    ((<update_1198@160:0> = <f_bcopy_aux_1609@158:0>) &&
                     ((<update_1198@160:1> = <f_bcopy_aux_1609@158:1>) &&
                      (<update_1198@160:3> = <f_bcopy_aux_1609@158:5>)))
                    [true.(<<update_1198@160:2>@162:0> = <update_1198@160:0>)
                     [true.(<<f_bcopy_aux_1609@158:2>@164:0> = <<update_1198@160:2>@162:0>)
                      [true.(<<bcopy_aux_1197@137:2>@166:0> = <<f_bcopy_aux_1609@158:2>@164:0>)
                       [true.
                        ((<make_array_1030@168:0> = <k_main_1512@134:1>) &&
                         (<make_array_1030@168:1> = <<bcopy_aux_1197@137:2>@166:0>))
                        [(0 <= <make_array_1030@168:1>).
                         ((<k_make_array_u_1232@171:0> = <make_array_1030@168:1>) &&
                          ((<k_make_array_u_1232@171:1> = <make_array_1030@168:0>) &&
                           (<k_make_array_u_1232@171:3> = (<make_array_1030@168:1> < <make_array_1030@168:0>))))
                         [(not <k_make_array_u_1232@171:3>).(<fail_1615@174:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(10678)[2]
    horn clauses:
      P[<fail_1615@174:0>](<fail_1615@174:0>:bool)|- bot
      
      P[<k_make_array_u_1232@171:3>](<k_make_array_u_1232@171:0>:int,<k_make_array_u_1232@171:1>:int,false:bool),
      <fail_1615@174:0> |- P[<fail_1615@174:0>](<fail_1615@174:0>:bool)
      
      P[<make_array_1030@168:1>](<k_make_array_u_1232@171:1>:int,<k_make_array_u_1232@171:0>:int),
      ((0 <= <k_make_array_u_1232@171:0>) &&
       (<k_make_array_u_1232@171:3> = (<k_make_array_u_1232@171:0> < <k_make_array_u_1232@171:1>)))
      |- P[<k_make_array_u_1232@171:3>](<k_make_array_u_1232@171:0>:int,
                                        <k_make_array_u_1232@171:1>:int,
                                        <k_make_array_u_1232@171:3>:bool)
      
      P[<k_main_1512@134:4>](<bcopy_aux_1197@137:3>:int,<make_array_1030@168:0>:int,<bcopy_aux_1197@137:0>:int,true:bool),
      P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,<make_array_1030@168:1>:int)|- P[<make_array_1030@168:1>](
      <make_array_1030@168:0>:int,<make_array_1030@168:1>:int)
      
      P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
      P[<<f_bcopy_aux_1609@158:2>@164:0>](<<bcopy_aux_1197@137:1>@140:0>:int,<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
      (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
      |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                           <<bcopy_aux_1197@137:2>@166:0>:int)
      
      P[<f_bcopy_aux_1609@158:5>](<f_bcopy_aux_1609@158:0>:int,<f_bcopy_aux_1609@158:1>:int,<update_1198@160:3>:int),
      P[<<update_1198@160:2>@162:0>](<f_bcopy_aux_1609@158:0>:int,<f_bcopy_aux_1609@158:1>:int,<<f_bcopy_aux_1609@158:2>@164:0>:int)|- P[<<f_bcopy_aux_1609@158:2>@164:0>](
      <f_bcopy_aux_1609@158:0>:int,<f_bcopy_aux_1609@158:1>:int,<<f_bcopy_aux_1609@158:2>@164:0>:int)
      
      P[<update_1198@160:3>](<update_1198@160:0>:int,<update_1198@160:1>:int,<update_1198@160:3>:int),
      (<<update_1198@160:2>@162:0> = <update_1198@160:0>)
      |- P[<<update_1198@160:2>@162:0>](<update_1198@160:0>:int,<update_1198@160:1>:int,
                                        <<update_1198@160:2>@162:0>:int)
      
      P[<f_bcopy_aux_1609@158:5>](<update_1198@160:0>:int,<update_1198@160:1>:int,<update_1198@160:3>:int)|- P[<update_1198@160:3>](
      <update_1198@160:0>:int,<update_1198@160:1>:int,<update_1198@160:3>:int)
      
      P[<bcopy_aux_1197@137:3>](<f_bcopy_aux_1609@158:1>:int,<f_bcopy_aux_1609@158:0>:int),
      P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<f_bcopy_aux_1609@158:1>:int,<f_bcopy_aux_1609@158:0>:int,<f_bcopy_aux_1609@158:5>:int),
      (<f_bcopy_aux_1609@158:0> < <f_bcopy_aux_1609@158:1>)
      |- P[<f_bcopy_aux_1609@158:5>](<f_bcopy_aux_1609@158:0>:int,<f_bcopy_aux_1609@158:1>:int,
                                     <f_bcopy_aux_1609@158:5>:int)
      
      P[<k_main_1512@134:4>](<bcopy_aux_1197@137:3>:int,<k_main_1512@134:1>:int,<bcopy_aux_1197@137:0>:int,true:bool),
      P[<<make_array_1030@142:2>@154:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int,<<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)|- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](
      <bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int,<<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
      
      P[<make_array_1030@142:1>](<make_array_1030@142:0>:int,<make_array_1030@142:1>:int),
      P[<<k_make_array_u_1232@145:2>@152:0>](<make_array_1030@142:1>:int,<make_array_1030@142:0>:int,<<make_array_1030@142:2>@154:0>:int),
      (0 <= <make_array_1030@142:1>)
      |- P[<<make_array_1030@142:2>@154:0>](<make_array_1030@142:0>:int,
                                            <make_array_1030@142:1>:int,
                                            <<make_array_1030@142:2>@154:0>:int)
      
      P[<k_make_array_u_1232@145:3>](<k_make_array_u_1232@145:0>:int,<k_make_array_u_1232@145:1>:int,true:bool),
      P[<<k_make_array_u_1243@148:2>@150:0>](<k_make_array_u_1232@145:0>:int,<k_make_array_u_1232@145:1>:int,<<k_make_array_u_1232@145:2>@152:0>:int)|- P[<<k_make_array_u_1232@145:2>@152:0>](
      <k_make_array_u_1232@145:0>:int,<k_make_array_u_1232@145:1>:int,
      <<k_make_array_u_1232@145:2>@152:0>:int)
      
      P[<k_make_array_u_1243@148:3>](<k_make_array_u_1243@148:0>:int,<k_make_array_u_1243@148:1>:int,<k_make_array_u_1243@148:3>:unit),
      (<<k_make_array_u_1243@148:2>@150:0> = 0)
      |- P[<<k_make_array_u_1243@148:2>@150:0>](<k_make_array_u_1243@148:0>:int,
                                                <k_make_array_u_1243@148:1>:int,
                                                <<k_make_array_u_1243@148:2>@150:0>:int)
      
      P[<k_make_array_u_1232@145:3>](<k_make_array_u_1243@148:0>:int,<k_make_array_u_1243@148:1>:int,true:bool)|- P[<k_make_array_u_1243@148:3>](
      <k_make_array_u_1243@148:0>:int,<k_make_array_u_1243@148:1>:int,
      <k_make_array_u_1243@148:3>:unit)
      
      P[<make_array_1030@142:1>](<k_make_array_u_1232@145:1>:int,<k_make_array_u_1232@145:0>:int),
      ((0 <= <k_make_array_u_1232@145:0>) &&
       (<k_make_array_u_1232@145:3> = (<k_make_array_u_1232@145:0> < <k_make_array_u_1232@145:1>)))
      |- P[<k_make_array_u_1232@145:3>](<k_make_array_u_1232@145:0>:int,
                                        <k_make_array_u_1232@145:1>:int,
                                        <k_make_array_u_1232@145:3>:bool)
      
      P[<k_main_1512@134:4>](<bcopy_aux_1197@137:3>:int,<k_main_1512@134:1>:int,<make_array_1030@142:0>:int,true:bool),
      P[<<bcopy_aux_1197@137:1>@140:0>](<make_array_1030@142:0>:int,<make_array_1030@142:1>:int)|- P[<make_array_1030@142:1>](
      <make_array_1030@142:0>:int,<make_array_1030@142:1>:int)
      
      P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
      (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
      |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                           <<bcopy_aux_1197@137:1>@140:0>:int)
      
      P[<k_main_1512@134:4>](<bcopy_aux_1197@137:3>:int,<k_main_1512@134:1>:int,<bcopy_aux_1197@137:0>:int,true:bool)|- P[<bcopy_aux_1197@137:3>](
      <bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
      
      P[<main_1045@131:2>](<k_main_1512@134:2>:int,<k_main_1512@134:1>:int,<k_main_1512@134:0>:int),
      ((<k_main_1512@134:0> = 0) && (<k_main_1512@134:4> = (<k_main_1512@134:2> <= <k_main_1512@134:1>)))
      |- P[<k_main_1512@134:4>](<k_main_1512@134:0>:int,<k_main_1512@134:1>:int,
                                <k_main_1512@134:2>:int,<k_main_1512@134:4>:bool)
      
      P[<f_1613@129:2>](<main_1045@131:0>:int,<main_1045@131:1>:int,<main_1045@131:2>:int)|- P[<main_1045@131:2>](
      <main_1045@131:0>:int,<main_1045@131:1>:int,<main_1045@131:2>:int)
      
      P[<f_1612@126:1>](<f_1613@129:0>:int,<f_1613@129:1>:int)|- P[<f_1613@129:2>](
      <f_1613@129:0>:int,<f_1613@129:1>:int,<f_1613@129:2>:int)
      
      P[<f_1611@123:0>](<f_1612@126:0>:int)|- P[<f_1612@126:1>](<f_1612@126:0>:int,
                                                                <f_1612@126:1>:int)
      
      |- P[<f_1611@123:0>](<f_1611@123:0>:int)
    call trees:
      <main_1607@120>
        <f_1611@123>
          <f_1612@126>
            <f_1613@129>
              <main_1045@131>
                <k_main_1512@134>
                  <bcopy_aux_1197@137>
                  </<bcopy_aux_1197@137:1>@140>
                  <make_array_1030@142>
                    <k_make_array_u_1232@145>
                      <k_make_array_u_1243@148>
                      </<k_make_array_u_1243@148:2>@150>
                    </<k_make_array_u_1232@145:2>@152>
                  </<make_array_1030@142:2>@154>
                  <<<bcopy_aux_1197@137:1>@140:1>@156>
                    <f_bcopy_aux_1609@158>
                      <update_1198@160>
                      </<update_1198@160:2>@162>
                    </<f_bcopy_aux_1609@158:2>@164>
                  </<bcopy_aux_1197@137:2>@166>
                  <make_array_1030@168>
                    <k_make_array_u_1232@171>
                      <fail_1615@174>
    inlined horn clauses:
      P[<fail_1615@174:0>](<fail_1615@174:0>:bool)|- bot
      
      P[<<bcopy_aux_1197@137:2>@166:0>](var297:int,<k_make_array_u_1232@171:0>:int),
      ((0 <= <k_make_array_u_1232@171:0>) && ((var297 < (1 + <k_make_array_u_1232@171:0>)) && <fail_1615@174:0>))
      |- P[<fail_1615@174:0>](<fail_1615@174:0>:bool)
      
      P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int,var298:int),
      P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
      (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>)
      |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                           <<bcopy_aux_1197@137:2>@166:0>:int)
      
      P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
      ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
       ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (0 <= <<bcopy_aux_1197@137:1>@140:0>)))
      |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                   <<bcopy_aux_1197@137:1>@140:0>:int,
                                                   <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
      
      P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
      (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
      |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                           <<bcopy_aux_1197@137:1>@140:0>:int)
      
       (<bcopy_aux_1197@137:3> = 0) |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,
                                                                 <bcopy_aux_1197@137:3>:int)
    begin ParamSubstInfer.infer(14277)[3]
      
    end ParamSubstInfer.infer(14277)[3] (0.272959 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(14279)[3]
      
    end RefTypeInfer.elim_coeffs(14279)[3] (0.001000 sec.)
    begin YhornInterface.solve(14633)[3]
      begin HcSolver.solve_ub(14634)[4]
        encoded:
          P[<fail_1615@174:0>](<fail_1615@174:0>:int)|- bot
          
          P[<<bcopy_aux_1197@137:2>@166:0>](var297:int,<k_make_array_u_1232@171:0>:int),
          ((0 <= <k_make_array_u_1232@171:0>) &&
           ((var297 < (1 + <k_make_array_u_1232@171:0>)) && (<fail_1615@174:0> = 1)))
          |- P[<fail_1615@174:0>](<fail_1615@174:0>:int)
          
          P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int,var298:int),
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
          (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:2>@166:0>:int)
          
          P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
           ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (0 <= <<bcopy_aux_1197@137:1>@140:0>)))
          |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                       <<bcopy_aux_1197@137:1>@140:0>:int,
                                                       <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
          
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:1>@140:0>:int)
          
           (<bcopy_aux_1197@137:3> = 0)
          |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
        input to Yhorn:
          P[<fail_1615@174:0>](<fail_1615@174:0>:int)|- bot
          
          P[<<bcopy_aux_1197@137:2>@166:0>](var297:int,<k_make_array_u_1232@171:0>:int),
          ((var297 < (1 + <k_make_array_u_1232@171:0>)) &&
           ((0 <= <k_make_array_u_1232@171:0>) && (<fail_1615@174:0> = 1)))
          |- P[<fail_1615@174:0>](<fail_1615@174:0>:int)
          
          P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int,var298:int),
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
          (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:2>@166:0>:int)
          
          P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          ((0 <= <<bcopy_aux_1197@137:1>@140:0>) &&
           ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0)))
          |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                       <<bcopy_aux_1197@137:1>@140:0>:int,
                                                       <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
          
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:1>@140:0>:int)
          
           (<bcopy_aux_1197@137:3> = 0)
          |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1615_sep_174_sep_0($217)) -> 1=0.
(($217-1=0) & (-$218<=0) & (-$218+$219-1<0)) & (v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0($219,$218)) -> v_sep_fail_1615_sep_174_sep_0($217).
($220-$221<0) & (v_sep_bcopy_aux_1197_sep_137_sep_3($221,$220)) & (v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0($221,$220,$222)) -> v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0($221,$220).
(($223=0) & (-$221+$224<0) & (-$224<=0)) & (v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0($221,$224)) -> v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0($221,$224,$223).
(-$221+$224<0) & (v_sep_bcopy_aux_1197_sep_137_sep_3($221,$224)) -> v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0($221,$224).
$225=0 -> v_sep_bcopy_aux_1197_sep_137_sep_3($221,$225).


v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_3: X
v_sep_fail_1615_sep_174_sep_0: X
.......
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_3: X
v_sep_fail_1615_sep_174_sep_0: X
...
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_3: X
v_sep_fail_1615_sep_174_sep_0: X
.....
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_3: X
v_sep_fail_1615_sep_174_sep_0: X
......
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_3: X
v_sep_fail_1615_sep_174_sep_0: X
.......(0=0) & (v_sep_fail_1615_sep_174_sep_0($217)) -> 1=0.
(($217-1=0) & (-$218<=0) & (-$218+$219-1<0)) & (v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0($219,$218)) -> v_sep_fail_1615_sep_174_sep_0($217).
($220-$221<0) & (v_sep_bcopy_aux_1197_sep_137_sep_3($221,$220)) & (v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0($221,$220,$222)) -> v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0($221,$220).
(($223=0) & (-$221+$224<0) & (-$224<=0)) & (v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0($221,$224)) -> v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0($221,$224,$223).
(-$221+$224<0) & (v_sep_bcopy_aux_1197_sep_137_sep_3($221,$224)) -> v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0($221,$224).
$225=0 -> v_sep_bcopy_aux_1197_sep_137_sep_3($221,$225).

        solution:
          P[<<bcopy_aux_1197@137:1>@140:0>]($246:int,$248:int) = true
          P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>]($239:int,$241:int,$243:int) = true
          P[<<bcopy_aux_1197@137:2>@166:0>]($229:int,$231:int) = ((1 + $231) <= $229)
          P[<bcopy_aux_1197@137:3>]($234:int,$236:int) = true
          P[<fail_1615@174:0>]($226:bool) = false
        
      end HcSolver.solve_ub(14634)[4] (0.017997 sec.)
      begin HcSolver.check_validity(14883)[4]
        input:
          P[<fail_1615@174:0>](<fail_1615@174:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@137:2>@166:0>](var297:int,<k_make_array_u_1232@171:0>:int),
          ((0 <= <k_make_array_u_1232@171:0>) && ((var297 < (1 + <k_make_array_u_1232@171:0>)) && <fail_1615@174:0>))
          |- P[<fail_1615@174:0>](<fail_1615@174:0>:bool)
          
          P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int,var298:int),
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
          (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:2>@166:0>:int)
          
          P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
           ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (0 <= <<bcopy_aux_1197@137:1>@140:0>)))
          |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                       <<bcopy_aux_1197@137:1>@140:0>:int,
                                                       <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
          
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:1>@140:0>:int)
          
           (<bcopy_aux_1197@137:3> = 0)
          |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(14883)[4] (0.002000 sec.)
      solution:
        P[<<bcopy_aux_1197@137:1>@140:0>]($246:int,$248:int) = true
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>]($239:int,$241:int,$243:int) = true
        P[<<bcopy_aux_1197@137:2>@166:0>]($229:int,$231:int) = ((1 + $231) <= $229)
        P[<bcopy_aux_1197@137:3>]($234:int,$236:int) = true
        P[<fail_1615@174:0>]($226:bool) = false
    end YhornInterface.solve(14633)[3] (0.019997 sec.)
    
  end RefTypeInfer.infer_etrs(10678)[2] (0.317952 sec.)
  refinement types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:int -> (v3:int -> X) -> X) ->
                    (v6:{v6:int | ((1 + v6) <= v1)} -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1243: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1609: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1198: v1:int ->
                 v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> ((v8:int -> (v9:int -> X) -> X) -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1615: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var339:int ->
            var338:int ->
            var337:int -> var336:int -> (var335:int -> (var334:int -> X) -> X) -> var331:int -> (var330:int -> X) -> X
    f_1614: var344:int -> var343:int -> var342:int -> var341:unit -> X
    f_bcopy_aux_1610: var358:int ->
                      var357:int ->
                      var356:int ->
                      (var355:unit -> X) ->
                      (var353:int -> (var352:int -> X) -> X) -> (var349:int -> (var348:int -> X) -> X) -> X
    f_update_1608: var372:int ->
                   var371:int ->
                   var370:int ->
                   (var369:int -> (var368:int -> X) -> X) ->
                   ((var365:int -> (var364:int -> X) -> X) -> X) -> var360:int -> X
  abstraction types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:int -> (v3:int -> X) -> X) ->
                    (v6:int[v6 -> ((1 + v6) <= v1)] -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: var373:int -> var374:int -> (var375:int -> X) -> X
    k_make_array_u_1232: var378:int -> var379:int -> (var380:int -> X) -> var382:bool -> X
    k_make_array_u_1243: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1609: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1198: v1:int ->
                 v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> ((v8:int -> (v9:int -> X) -> X) -> X) -> X
    fail_1615: v1:bool -> (v2:unit -> X) -> X
    a_1038: var339:int ->
            var338:int ->
            var337:int -> var336:int -> (var335:int -> (var334:int -> X) -> X) -> var331:int -> (var330:int -> X) -> X
    f_1614: var344:int -> var343:int -> var342:int -> var341:unit -> X
    f_bcopy_aux_1610: var358:int ->
                      var357:int ->
                      var356:int ->
                      (var355:unit -> X) ->
                      (var353:int -> (var352:int -> X) -> X) -> (var349:int -> (var348:int -> X) -> X) -> X
    f_update_1608: var372:int ->
                   var371:int ->
                   var370:int ->
                   (var369:int -> (var368:int -> X) -> X) ->
                   ((var365:int -> (var364:int -> X) -> X) -> X) -> var360:int -> X
  
end AbsTypeInfer.refine(10677)[1] (0.325951 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1607
  main_1607 -> (rand_int f_1611)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (i_1034 = j_1039) -> (k_update_a_1312 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (
      not (i_1034 = j_1039)) -> (a_1036 j_1039 k_update_a_1312)
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (i_1044 >= m_1041) -> (k_bcopy_aux_1376 ())
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (
      not (i_1044 >= m_1041)) -> (src_1042 i_1044 (f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042))
  f_1611 x_1548 -> (rand_int (f_1612 x_1548))
  f_1612 x_1548 x_1561 -> (rand_int (f_1613 x_1548 x_1561))
  f_1613 x_1548 x_1561 x_1574 -> (main_1045 x_1548 x_1561 x_1574 (f_1614 x_1548 x_1561 x_1574))
  f_1614 x_1548 x_1561 x_1574 x_1545 -> end
  f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 ->
      (update_1198 i_1044 m_1041 des_1043 x_1429 (f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042))
  f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 ->
      (bcopy_aux_1197 m_1041 src_1042 x_1446 (i_1044 + 1) k_bcopy_aux_1376)
  f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 ->
      (k_update_1291 (a_1038 i_1034 n_1035 x_1037 x_1297 a_1036))
  fail_1615 b k -> {fail} => (k ())
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when b_1542 ->
      (bcopy_aux_1197 n_1046 (make_array_1030 n_1046) (make_array_1030 m_1047) i_1048 k_main_1477)
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when (not b_1542) -> (k_main_1477 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when b_1244 ->
      (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when (not b_1244) ->
      (fail_1615 true (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226))
  k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 -> (k_make_array_1226 0)
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (i_1048 = 0) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 (n_1046 <= m_1047))
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (not (i_1048 = 0)) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 false)
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (0 <= i_1032) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (not (0 <= i_1032)) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 false)
  update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 ->
      (a_1036 i_1034 (f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291))
Types:
  main_1607 : X
  bcopy_aux_1197 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int[x_3 >= 0] -> X) -> X) ->
                    (x_9:int[x_1 >= x_9 + 1; x_9 >= 0] -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1615 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  bcopy_aux: (x_1:int ->
                  (({x_8:int | x_8 >= 0 && x_1 >= x_8 + 1} -> int) ->
                       (({x_6:int | x_6 >= 0 && x_1 >= x_6 + 1} -> int) -> ({x_4:int | x_4 >= 0} -> unit))))

cycles: 4
total: 1.369 sec
  abst: 0.064 sec
  mc: 0.058 sec
  refine: 0.700 sec
    exparam: 0.523 sec
