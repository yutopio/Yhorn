MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn recursive.ml

parsed::
 let rec f_1030 g_1031 x_1032 = if x_1032 >= 0 then
                                  g_1031 x_1032
                                else
                                  f_1030 (f_1030 g_1031) (g_1031 x_1032) 
 in
 let succ_1033 x_1034 = x_1034 + 1 
 in
 let main_1035 n_1036 = if f_1030 succ_1033 n_1036 >= 0 then
                          ()
                        else
                          {fail} () 
 in
   ()

set_target::
 let rec f_1030 g_1031 x_1032 = if x_1032 >= 0 then
                                  g_1031 x_1032
                                else
                                  f_1030 (f_1030 g_1031) (g_1031 x_1032) 
 in
 let succ_1033 x_1034 = x_1034 + 1 
 in
 let main_1035 n_1036 = if f_1030 succ_1033 n_1036 >= 0 then
                          ()
                        else
                          {fail} () 
 in
 let main_1069 = let arg1_1068 = rand_int () 
                 in
                   main_1035 arg1_1068 
 in
   ()

CPS::
 let rec f_1030 (g_1031:(int -> ((int -> X) -> X))) (x_1032:int) (k_f_1109:(
   int -> X)) =
   if x_1032 >= 0 then
     g_1031 x_1032 k_f_1109
   else
     g_1031 x_1032 (fun x_1153 -> f_1030 (f_1030 g_1031) x_1153 k_f_1109) 
 in
 let succ_1033 (x_1034:int) (k_succ_1171:(int -> X)) = k_succ_1171 (x_1034 + 1) 
 in
 let main_1035 (n_1036:int) (k_main_1185:(unit -> X)) =
   f_1030 succ_1033 n_1036 (fun x_1188 -> (if x_1188 >= 0 then
                                             k_main_1185 ()
                                           else
                                             {|fail|} () k_main_1185)) 
 in
   rand_int_cps () (fun x_1223 -> main_1035 x_1223 (fun x_1220 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1248
  main_1248 -> (rand_int f_1251)
  f_1030 g_1031 x_1032 k_f_1109 when (x_1032 >= 0) -> (g_1031 x_1032 k_f_1109)
  f_1030 g_1031 x_1032 k_f_1109 when (not (x_1032 >= 0)) -> (g_1031 x_1032 (f_f_1249 x_1032 g_1031 k_f_1109))
  f_1251 x_1223 -> (main_1035 x_1223 (f_1252 x_1223))
  f_1252 x_1223 x_1220 -> end
  f_f_1249 x_1032 g_1031 k_f_1109 x_1153 -> (f_1030 (f_1030 g_1031) x_1153 k_f_1109)
  f_main_1250 n_1036 k_main_1185 x_1188 when (x_1188 >= 0) -> (k_main_1185 ())
  f_main_1250 n_1036 k_main_1185 x_1188 when (not (x_1188 >= 0)) -> (fail_1253 true k_main_1185)
  fail_1253 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1185 -> (f_1030 succ_1033 n_1036 (f_main_1250 n_1036 k_main_1185))
  succ_1033 x_1034 k_succ_1171 -> (k_succ_1171 (x_1034 + 1))
Types:
  main_1248 : X
  f_1030 : ((int -> (int -> X) -> X) -> int -> (int -> X) -> X)
  fail_1253 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1248 ... --> 
  f_1251 ... --> 
  main_1035 ... --> 
  f_1030 [1/2] ... --> 
  succ_1033 ... --> 
  f_main_1250 [2/2] ... --> 
  fail_1253 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(98)[1]
  program:
    main_1248  | true = ((Random.int 0) f_1251)
    f_1030 g_1031 x_1032 k_f_1109 | (x_1032 >= 0) = (g_1031 x_1032
                                                            k_f_1109)
    f_1030 g_1031 x_1032 k_f_1109 | (not (x_1032 >= 0)) = (g_1031 x_1032
                                                                  (f_f_1249 x_1032
                                                                    g_1031
                                                                    k_f_1109))
    f_1251 x_1223 | true = (main_1035 x_1223
                                      (f_1252 x_1223))
    f_1252 x_1223 x_1220 | true = end
    f_f_1249 x_1032 g_1031 k_f_1109 x_1153 | true = (f_1030 (f_1030 g_1031)
                                                            x_1153
                                                            k_f_1109)
    f_main_1250 n_1036 k_main_1185 x_1188 | (x_1188 >= 0) = (k_main_1185 ())
    f_main_1250 n_1036 k_main_1185 x_1188 | (not (x_1188 >= 0)) = (fail_1253 true
                                                                    k_main_1185)
    fail_1253 b k | true = (fail ())
    main_1035 n_1036 k_main_1185 | true = (f_1030 succ_1033
                                                  n_1036
                                                  (f_main_1250 n_1036
                                                               k_main_1185))
    succ_1033 x_1034 k_succ_1171 | true = (k_succ_1171 (x_1034 + 1))
    main_1248:X
    f_1030:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_1251:int -> X
    f_1252:int -> unit -> X
    f_f_1249:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_main_1250:int -> (unit -> X) -> int -> X
    fail_1253:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    succ_1033:int -> (int -> X) -> X
  inlined functions: f_1251,f_1252,f_f_1249,f_main_1250,main_1035,succ_1033
  counterexample: 0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1251@4:0> = var2)
     [true.(<main_1035@6:0> = <f_1251@4:0>)
      [true.(<f_1030@8:1> = <main_1035@6:0>)
       [(<f_1030@8:1> >= 0).(<<f_1030@8:0>@11:0> = <f_1030@8:1>)
        [true.(<succ_1033@13:0> = <<f_1030@8:0>@11:0>)
         [true.(<<succ_1033@13:1>@15:0> = (<succ_1033@13:0> + 1))
          [true.(<<<f_1030@8:0>@11:1>@17:0> = <<succ_1033@13:1>@15:0>)
           [true.(<<f_1030@8:2>@19:0> = <<<f_1030@8:0>@11:1>@17:0>)
            [true.((<f_main_1250@21:0> = <main_1035@6:0>) && (<f_main_1250@21:2> = <<f_1030@8:2>@19:0>))
             [(not (<f_main_1250@21:2> >= 0)).(<fail_1253@24:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(99)[2]
    horn clauses:
      P[<fail_1253@24:0>](<fail_1253@24:0>:bool)|- bot
      
      P[<f_main_1250@21:2>](<f_main_1250@21:0>:int,<f_main_1250@21:2>:int),
      ((<f_main_1250@21:2> < 0) && <fail_1253@24:0>) |- P[<fail_1253@24:0>](
      <fail_1253@24:0>:bool)
      
      P[<main_1035@6:0>](<f_main_1250@21:0>:int),
      P[<<f_1030@8:2>@19:0>](<f_main_1250@21:0>:int,<f_main_1250@21:2>:int)|- P[<f_main_1250@21:2>](
      <f_main_1250@21:0>:int,<f_main_1250@21:2>:int)
      
      P[<f_1030@8:1>](<f_1030@8:1>:int),
      P[<<<f_1030@8:0>@11:1>@17:0>](<f_1030@8:1>:int,<<f_1030@8:2>@19:0>:int), (
      <f_1030@8:1> >= 0) |- P[<<f_1030@8:2>@19:0>](<f_1030@8:1>:int,<<f_1030@8:2>@19:0>:int)
      
      P[<main_1035@6:0>](<f_1030@8:1>:int),
      P[<<succ_1033@13:1>@15:0>](<<f_1030@8:0>@11:0>:int,<<<f_1030@8:0>@11:1>@17:0>:int)|- P[<<<f_1030@8:0>@11:1>@17:0>](
      <<f_1030@8:0>@11:0>:int,<<<f_1030@8:0>@11:1>@17:0>:int)
      
      P[<succ_1033@13:0>](<succ_1033@13:0>:int), (<<succ_1033@13:1>@15:0> = (1 + <succ_1033@13:0>))
      |- P[<<succ_1033@13:1>@15:0>](<succ_1033@13:0>:int,<<succ_1033@13:1>@15:0>:int)
      
      P[<main_1035@6:0>](<f_1030@8:1>:int),
      P[<<f_1030@8:0>@11:0>](<succ_1033@13:0>:int)|- P[<succ_1033@13:0>](
      <succ_1033@13:0>:int)
      
      P[<f_1030@8:1>](<<f_1030@8:0>@11:0>:int), (<<f_1030@8:0>@11:0> >= 0)
      |- P[<<f_1030@8:0>@11:0>](<<f_1030@8:0>@11:0>:int)
      
      P[<main_1035@6:0>](<f_1030@8:1>:int)|- P[<f_1030@8:1>](<f_1030@8:1>:int)
      
      P[<f_1251@4:0>](<main_1035@6:0>:int)|- P[<main_1035@6:0>](<main_1035@6:0>:int)
      
      |- P[<f_1251@4:0>](<f_1251@4:0>:int)
    call trees:
      <main_1248@1>
        <f_1251@4>
          <main_1035@6>
            <f_1030@8>
            </<f_1030@8:0>@11>
            <succ_1033@13>
            </<succ_1033@13:1>@15>
            <<<f_1030@8:0>@11:1>@17>
            </<f_1030@8:2>@19>
            <f_main_1250@21>
              <fail_1253@24>
    inlined horn clauses:
      P[<fail_1253@24:0>](<fail_1253@24:0>:bool)|- bot
      
      P[<<f_1030@8:2>@19:0>](<f_main_1250@21:0>:int,<f_main_1250@21:2>:int),
      ((<f_main_1250@21:2> < 0) && <fail_1253@24:0>) |- P[<fail_1253@24:0>](
      <fail_1253@24:0>:bool)
      
      P[<f_1030@8:1>](<f_1030@8:1>:int),
      P[<<<f_1030@8:0>@11:1>@17:0>](<f_1030@8:1>:int,<<f_1030@8:2>@19:0>:int), (
      <f_1030@8:1> >= 0) |- P[<<f_1030@8:2>@19:0>](<f_1030@8:1>:int,<<f_1030@8:2>@19:0>:int)
      
      P[<<f_1030@8:0>@11:0>](<<f_1030@8:0>@11:0>:int), (<<<f_1030@8:0>@11:1>@17:0> = (1 + <<f_1030@8:0>@11:0>))
      |- P[<<<f_1030@8:0>@11:1>@17:0>](<<f_1030@8:0>@11:0>:int,<<<f_1030@8:0>@11:1>@17:0>:int)
      
      P[<f_1030@8:1>](<<f_1030@8:0>@11:0>:int), (<<f_1030@8:0>@11:0> >= 0)
      |- P[<<f_1030@8:0>@11:0>](<<f_1030@8:0>@11:0>:int)
      
      |- P[<f_1030@8:1>](<f_1030@8:1>:int)
    begin ParamSubstInfer.infer(1104)[3]
      
    end ParamSubstInfer.infer(1104)[3] (0.009998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1106)[3]
      
    end RefTypeInfer.elim_coeffs(1106)[3] (0.000000 sec.)
    begin YhornInterface.solve(1279)[3]
      begin HcSolver.solve_ub(1280)[4]
        encoded:
          P[<fail_1253@24:0>](<fail_1253@24:0>:int)|- bot
          
          P[<<f_1030@8:2>@19:0>](<f_main_1250@21:0>:int,<f_main_1250@21:2>:int),
          ((<f_main_1250@21:2> < 0) && (<fail_1253@24:0> = 1)) |- P[<fail_1253@24:0>](
          <fail_1253@24:0>:int)
          
          P[<f_1030@8:1>](<f_1030@8:1>:int),
          P[<<<f_1030@8:0>@11:1>@17:0>](<f_1030@8:1>:int,<<f_1030@8:2>@19:0>:int), (
          <f_1030@8:1> >= 0) |- P[<<f_1030@8:2>@19:0>](<f_1030@8:1>:int,
                                                       <<f_1030@8:2>@19:0>:int)
          
          P[<<f_1030@8:0>@11:0>](<<f_1030@8:0>@11:0>:int), (<<<f_1030@8:0>@11:1>@17:0> = (1 + <<f_1030@8:0>@11:0>))
          |- P[<<<f_1030@8:0>@11:1>@17:0>](<<f_1030@8:0>@11:0>:int,<<<f_1030@8:0>@11:1>@17:0>:int)
          
          P[<f_1030@8:1>](<<f_1030@8:0>@11:0>:int), (<<f_1030@8:0>@11:0> >= 0)
          |- P[<<f_1030@8:0>@11:0>](<<f_1030@8:0>@11:0>:int)
          
          |- P[<f_1030@8:1>](<f_1030@8:1>:int)
        input to Yhorn:
          P[<fail_1253@24:0>](<fail_1253@24:0>:int)|- bot
          
          P[<<f_1030@8:2>@19:0>](<f_main_1250@21:0>:int,<f_main_1250@21:2>:int),
          ((<f_main_1250@21:2> < 0) && (<fail_1253@24:0> = 1)) |- P[<fail_1253@24:0>](
          <fail_1253@24:0>:int)
          
          P[<f_1030@8:1>](<f_1030@8:1>:int),
          P[<<<f_1030@8:0>@11:1>@17:0>](<f_1030@8:1>:int,<<f_1030@8:2>@19:0>:int), (
          <f_1030@8:1> >= 0) |- P[<<f_1030@8:2>@19:0>](<f_1030@8:1>:int,
                                                       <<f_1030@8:2>@19:0>:int)
          
          P[<<f_1030@8:0>@11:0>](<<f_1030@8:0>@11:0>:int), (<<<f_1030@8:0>@11:1>@17:0> = (1 + <<f_1030@8:0>@11:0>))
          |- P[<<<f_1030@8:0>@11:1>@17:0>](<<f_1030@8:0>@11:0>:int,<<<f_1030@8:0>@11:1>@17:0>:int)
          
          P[<f_1030@8:1>](<<f_1030@8:0>@11:0>:int), (<<f_1030@8:0>@11:0> >= 0)
          |- P[<<f_1030@8:0>@11:0>](<<f_1030@8:0>@11:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1253_sep_24_sep_0($8)) -> 1=0.
(($8-1=0) & ($9<0)) & (v_sep_f_1030_sep_8_sep_2_sep_19_sep_0($10,$9)) -> v_sep_fail_1253_sep_24_sep_0($8).
($11>=0) & (v_sep_f_1030_sep_8_sep_0_sep_11_sep_1_sep_17_sep_0($11,$12)) & (v_sep_f_1030_sep_8_sep_1($11)) -> v_sep_f_1030_sep_8_sep_2_sep_19_sep_0($11,$12).
($13-$14-1=0) & (v_sep_f_1030_sep_8_sep_0_sep_11_sep_0($14)) -> v_sep_f_1030_sep_8_sep_0_sep_11_sep_1_sep_17_sep_0($14,$13).
($14>=0) & (v_sep_f_1030_sep_8_sep_1($14)) -> v_sep_f_1030_sep_8_sep_0_sep_11_sep_0($14).
0=0 -> v_sep_f_1030_sep_8_sep_1($11).


v_sep_f_1030_sep_8_sep_0_sep_11_sep_0: X
v_sep_f_1030_sep_8_sep_0_sep_11_sep_1_sep_17_sep_0: X
v_sep_f_1030_sep_8_sep_1: X
v_sep_f_1030_sep_8_sep_2_sep_19_sep_0: X
v_sep_fail_1253_sep_24_sep_0: X
.......
v_sep_f_1030_sep_8_sep_0_sep_11_sep_0: X
v_sep_f_1030_sep_8_sep_0_sep_11_sep_1_sep_17_sep_0: X
v_sep_f_1030_sep_8_sep_1: X
v_sep_f_1030_sep_8_sep_2_sep_19_sep_0: X
v_sep_fail_1253_sep_24_sep_0: X
...
v_sep_f_1030_sep_8_sep_0_sep_11_sep_0: X
v_sep_f_1030_sep_8_sep_0_sep_11_sep_1_sep_17_sep_0: X
v_sep_f_1030_sep_8_sep_1: X
v_sep_f_1030_sep_8_sep_2_sep_19_sep_0: X
v_sep_fail_1253_sep_24_sep_0: X
.....
v_sep_f_1030_sep_8_sep_0_sep_11_sep_0: X
v_sep_f_1030_sep_8_sep_0_sep_11_sep_1_sep_17_sep_0: X
v_sep_f_1030_sep_8_sep_1: X
v_sep_f_1030_sep_8_sep_2_sep_19_sep_0: X
v_sep_fail_1253_sep_24_sep_0: X
......
v_sep_f_1030_sep_8_sep_0_sep_11_sep_0: X
v_sep_f_1030_sep_8_sep_0_sep_11_sep_1_sep_17_sep_0: X
v_sep_f_1030_sep_8_sep_1: X
v_sep_f_1030_sep_8_sep_2_sep_19_sep_0: X
v_sep_fail_1253_sep_24_sep_0: X
.......(0=0) & (v_sep_fail_1253_sep_24_sep_0($8)) -> 1=0.
(($8-1=0) & ($9<0)) & (v_sep_f_1030_sep_8_sep_2_sep_19_sep_0($10,$9)) -> v_sep_fail_1253_sep_24_sep_0($8).
($11>=0) & (v_sep_f_1030_sep_8_sep_0_sep_11_sep_1_sep_17_sep_0($11,$12)) & (v_sep_f_1030_sep_8_sep_1($11)) -> v_sep_f_1030_sep_8_sep_2_sep_19_sep_0($11,$12).
($13-$14-1=0) & (v_sep_f_1030_sep_8_sep_0_sep_11_sep_0($14)) -> v_sep_f_1030_sep_8_sep_0_sep_11_sep_1_sep_17_sep_0($14,$13).
($14>=0) & (v_sep_f_1030_sep_8_sep_1($14)) -> v_sep_f_1030_sep_8_sep_0_sep_11_sep_0($14).
0=0 -> v_sep_f_1030_sep_8_sep_1($11).

          |- P[<f_1030@8:1>](<f_1030@8:1>:int)
        solution:
          P[<<f_1030@8:0>@11:0>]($31:int) = true
          P[<<<f_1030@8:0>@11:1>@17:0>]($23:int,$25:int) = ((1 + $23) <= $25)
          P[<f_1030@8:1>]($28:int) = true
          P[<<f_1030@8:2>@19:0>]($18:int,$20:int) = (1 <= $20)
          P[<fail_1253@24:0>]($15:bool) = false
        
      end HcSolver.solve_ub(1280)[4] (0.017997 sec.)
      begin HcSolver.check_validity(1396)[4]
        input:
          P[<fail_1253@24:0>](<fail_1253@24:0>:bool)|- bot
          
          P[<<f_1030@8:2>@19:0>](<f_main_1250@21:0>:int,<f_main_1250@21:2>:int),
          ((<f_main_1250@21:2> < 0) && <fail_1253@24:0>) |- P[<fail_1253@24:0>](
          <fail_1253@24:0>:bool)
          
          P[<f_1030@8:1>](<f_1030@8:1>:int),
          P[<<<f_1030@8:0>@11:1>@17:0>](<f_1030@8:1>:int,<<f_1030@8:2>@19:0>:int), (
          <f_1030@8:1> >= 0) |- P[<<f_1030@8:2>@19:0>](<f_1030@8:1>:int,
                                                       <<f_1030@8:2>@19:0>:int)
          
          P[<<f_1030@8:0>@11:0>](<<f_1030@8:0>@11:0>:int), (<<<f_1030@8:0>@11:1>@17:0> = (1 + <<f_1030@8:0>@11:0>))
          |- P[<<<f_1030@8:0>@11:1>@17:0>](<<f_1030@8:0>@11:0>:int,<<<f_1030@8:0>@11:1>@17:0>:int)
          
          P[<f_1030@8:1>](<<f_1030@8:0>@11:0>:int), (<<f_1030@8:0>@11:0> >= 0)
          |- P[<<f_1030@8:0>@11:0>](<<f_1030@8:0>@11:0>:int)
          
          |- P[<f_1030@8:1>](<f_1030@8:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1396)[4] (0.001999 sec.)
      solution:
        P[<<f_1030@8:0>@11:0>]($31:int) = true
        P[<<<f_1030@8:0>@11:1>@17:0>]($23:int,$25:int) = ((1 + $23) <= $25)
        P[<f_1030@8:1>]($28:int) = true
        P[<<f_1030@8:2>@19:0>]($18:int,$20:int) = (1 <= $20)
        P[<fail_1253@24:0>]($15:bool) = false
    end YhornInterface.solve(1279)[3] (0.019996 sec.)
    
  end RefTypeInfer.infer_etrs(99)[2] (0.035994 sec.)
  refinement types:
    main_1248: X
    f_1251: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    f_1030: (v1:int -> (v2:{v2:int | ((1 + v1) <= v2)} -> X) -> X) -> v5:int -> (v6:{v6:int | (1 <= v6)} -> X) -> X
    succ_1033: v1:int -> (v2:int -> X) -> X
    f_main_1250: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1253: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1252: var11:int -> var10:unit -> X
    f_f_1249: var20:int -> (var19:int -> (var18:int -> X) -> X) -> (var15:int -> X) -> var13:int -> X
  abstraction types:
    main_1248: X
    f_1251: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    f_1030: (v1:int -> (v2:int[v2 -> ((1 + v1) <= v2)] -> X) -> X) -> v5:int -> (v6:int[v6 -> (
                                                                    1 <= v6)] -> X) -> X
    succ_1033: v1:int -> (v2:int -> X) -> X
    f_main_1250: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1253: v1:bool -> (v2:unit -> X) -> X
    f_1252: var11:int -> var10:unit -> X
    f_f_1249: var20:int -> (var19:int -> (var18:int -> X) -> X) -> (var15:int -> X) -> var13:int -> X
  
end AbsTypeInfer.refine(98)[1] (0.039993 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1248
  main_1248 -> (rand_int f_1251)
  f_1030 g_1031 x_1032 k_f_1109 when (x_1032 >= 0) -> (g_1031 x_1032 k_f_1109)
  f_1030 g_1031 x_1032 k_f_1109 when (not (x_1032 >= 0)) -> (g_1031 x_1032 (f_f_1249 x_1032 g_1031 k_f_1109))
  f_1251 x_1223 -> (main_1035 x_1223 (f_1252 x_1223))
  f_1252 x_1223 x_1220 -> end
  f_f_1249 x_1032 g_1031 k_f_1109 x_1153 -> (f_1030 (f_1030 g_1031) x_1153 k_f_1109)
  f_main_1250 n_1036 k_main_1185 x_1188 when (x_1188 >= 0) -> (k_main_1185 ())
  f_main_1250 n_1036 k_main_1185 x_1188 when (not (x_1188 >= 0)) -> (fail_1253 true k_main_1185)
  fail_1253 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1185 -> (f_1030 succ_1033 n_1036 (f_main_1250 n_1036 k_main_1185))
  succ_1033 x_1034 k_succ_1171 -> (k_succ_1171 (x_1034 + 1))
Types:
  main_1248 : X
  f_1030 : ((x_2:int -> (x_4:int[x_2 <= x_4 - 1] -> X) -> X) -> int -> (x_9:int[x_9 >= 1] -> X) -> X)
  fail_1253 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1248 ... --> 
  f_1251 ... --> 
  main_1035 ... --> 
  f_1030 [2/2] ... --> 
  succ_1033 ... --> 
  f_f_1249 ... --> 
  f_1030 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  succ_1033 ... --> 
  f_main_1250 [2/2] ... --> 
  fail_1253 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(2144)[1]
  program:
    main_1248  | true = ((Random.int 0) f_1251)
    f_1030 g_1031 x_1032 k_f_1109 | (x_1032 >= 0) = (g_1031 x_1032
                                                            k_f_1109)
    f_1030 g_1031 x_1032 k_f_1109 | (not (x_1032 >= 0)) = (g_1031 x_1032
                                                                  (f_f_1249 x_1032
                                                                    g_1031
                                                                    k_f_1109))
    f_1251 x_1223 | true = (main_1035 x_1223
                                      (f_1252 x_1223))
    f_1252 x_1223 x_1220 | true = end
    f_f_1249 x_1032 g_1031 k_f_1109 x_1153 | true = (f_1030 (f_1030 g_1031)
                                                            x_1153
                                                            k_f_1109)
    f_main_1250 n_1036 k_main_1185 x_1188 | (x_1188 >= 0) = (k_main_1185 ())
    f_main_1250 n_1036 k_main_1185 x_1188 | (not (x_1188 >= 0)) = (fail_1253 true
                                                                    k_main_1185)
    fail_1253 b k | true = (fail ())
    main_1035 n_1036 k_main_1185 | true = (f_1030 succ_1033
                                                  n_1036
                                                  (f_main_1250 n_1036
                                                               k_main_1185))
    succ_1033 x_1034 k_succ_1171 | true = (k_succ_1171 (x_1034 + 1))
    main_1248:X
    f_1030:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_1251:int -> X
    f_1252:int -> unit -> X
    f_f_1249:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_main_1250:int -> (unit -> X) -> int -> X
    fail_1253:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    succ_1033:int -> (int -> X) -> X
  inlined functions: f_1251,f_1252,f_f_1249,f_main_1250,main_1035,succ_1033
  counterexample: 0:0:0:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1251@30:0> = var21)
     [true.(<main_1035@32:0> = <f_1251@30:0>)
      [true.(<f_1030@34:1> = <main_1035@32:0>)
       [(not (<f_1030@34:1> >= 0)).(<<f_1030@34:0>@37:0> = <f_1030@34:1>)
        [true.(<succ_1033@39:0> = <<f_1030@34:0>@37:0>)
         [true.(<<succ_1033@39:1>@41:0> = (<succ_1033@39:0> + 1))
          [true.(<<<f_1030@34:0>@37:1>@43:0> = <<succ_1033@39:1>@41:0>)
           [true.((<f_f_1249@45:0> = <f_1030@34:1>) && (<f_f_1249@45:3> = <<<f_1030@34:0>@37:1>@43:0>))
            [true.(<f_1030@47:1> = <f_f_1249@45:3>)
             [(<f_1030@47:1> >= 0).(<<f_1030@47:0>@50:0> = <f_1030@47:1>)
              [true.(<f_1030@52:1> = <<f_1030@47:0>@50:0>)
               [(<f_1030@52:1> >= 0).(<<f_1030@52:0>@55:0> = <f_1030@52:1>)
                [true.(<<f_f_1249@45:1>@57:0> = <<f_1030@52:0>@55:0>)
                 [true.(<<f_1030@34:0>@59:0> = <<f_f_1249@45:1>@57:0>)
                  [true.(<succ_1033@61:0> = <<f_1030@34:0>@59:0>)
                   [true.(<<succ_1033@61:1>@63:0> = (<succ_1033@61:0> + 1))
                    [true.(<<<f_1030@34:0>@59:1>@65:0> = <<succ_1033@61:1>@63:0>)
                     [true.(<<<f_f_1249@45:1>@57:1>@67:0> = <<<f_1030@34:0>@59:1>@65:0>)
                      [true.(<<<f_1030@52:0>@55:1>@69:0> = <<<f_f_1249@45:1>@57:1>@67:0>)
                       [true.(<<f_1030@52:2>@71:0> = <<<f_1030@52:0>@55:1>@69:0>)
                        [true.(<<<f_1030@47:0>@50:1>@73:0> = <<f_1030@52:2>@71:0>)
                         [true.(<<f_1030@47:2>@75:0> = <<<f_1030@47:0>@50:1>@73:0>)
                          [true.(<<f_f_1249@45:2>@77:0> = <<f_1030@47:2>@75:0>)
                           [true.(<<f_1030@34:2>@79:0> = <<f_f_1249@45:2>@77:0>)
                            [true.
                             ((<f_main_1250@81:0> = <main_1035@32:0>) && (<f_main_1250@81:2> = <<f_1030@34:2>@79:0>))
                             [(not (<f_main_1250@81:2> >= 0)).(<fail_1253@84:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(2145)[2]
    horn clauses:
      P[<fail_1253@84:0>](<fail_1253@84:0>:bool)|- bot
      
      P[<f_main_1250@81:2>](<f_main_1250@81:0>:int,<f_main_1250@81:2>:int),
      ((<f_main_1250@81:2> < 0) && <fail_1253@84:0>) |- P[<fail_1253@84:0>](
      <fail_1253@84:0>:bool)
      
      P[<main_1035@32:0>](<f_main_1250@81:0>:int),
      P[<<f_1030@34:2>@79:0>](<f_main_1250@81:0>:int,<f_main_1250@81:2>:int)|- P[<f_main_1250@81:2>](
      <f_main_1250@81:0>:int,<f_main_1250@81:2>:int)
      
      P[<f_1030@34:1>](<f_1030@34:1>:int),
      P[<<f_f_1249@45:2>@77:0>](<f_1030@34:1>:int,<<f_1030@34:2>@79:0>:int), (
      <f_1030@34:1> < 0) |- P[<<f_1030@34:2>@79:0>](<f_1030@34:1>:int,
                                                    <<f_1030@34:2>@79:0>:int)
      
      P[<f_f_1249@45:3>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
      P[<<f_1030@47:2>@75:0>](<f_1030@47:1>:int,<<f_f_1249@45:2>@77:0>:int)|- P[<<f_f_1249@45:2>@77:0>](
      <f_f_1249@45:0>:int,<<f_f_1249@45:2>@77:0>:int)
      
      P[<f_1030@47:1>](<f_1030@47:1>:int),
      P[<<<f_1030@47:0>@50:1>@73:0>](<f_1030@47:1>:int,<<f_1030@47:2>@75:0>:int), (
      <f_1030@47:1> >= 0) |- P[<<f_1030@47:2>@75:0>](<f_1030@47:1>:int,
                                                     <<f_1030@47:2>@75:0>:int)
      
      P[<f_f_1249@45:3>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
      P[<<f_1030@52:2>@71:0>](<<f_1030@47:0>@50:0>:int,<<<f_1030@47:0>@50:1>@73:0>:int)|- P[<<<f_1030@47:0>@50:1>@73:0>](
      <<f_1030@47:0>@50:0>:int,<<<f_1030@47:0>@50:1>@73:0>:int)
      
      P[<f_1030@52:1>](<f_1030@52:1>:int),
      P[<<<f_1030@52:0>@55:1>@69:0>](<f_1030@52:1>:int,<<f_1030@52:2>@71:0>:int), (
      <f_1030@52:1> >= 0) |- P[<<f_1030@52:2>@71:0>](<f_1030@52:1>:int,
                                                     <<f_1030@52:2>@71:0>:int)
      
      P[<f_f_1249@45:3>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
      P[<<<f_f_1249@45:1>@57:1>@67:0>](<f_f_1249@45:0>:int,<<f_1030@52:0>@55:0>:int,<<<f_1030@52:0>@55:1>@69:0>:int)|- P[<<<f_1030@52:0>@55:1>@69:0>](
      <<f_1030@52:0>@55:0>:int,<<<f_1030@52:0>@55:1>@69:0>:int)
      
      P[<f_1030@34:1>](<f_f_1249@45:0>:int),
      P[<<<f_1030@34:0>@59:1>@65:0>](<<f_f_1249@45:1>@57:0>:int,<<<f_f_1249@45:1>@57:1>@67:0>:int),
      (<f_f_1249@45:0> < 0)
      |- P[<<<f_f_1249@45:1>@57:1>@67:0>](<f_f_1249@45:0>:int,<<f_f_1249@45:1>@57:0>:int,
                                          <<<f_f_1249@45:1>@57:1>@67:0>:int)
      
      P[<main_1035@32:0>](<f_1030@34:1>:int),
      P[<<succ_1033@61:1>@63:0>](<<f_1030@34:0>@59:0>:int,<<<f_1030@34:0>@59:1>@65:0>:int)|- P[<<<f_1030@34:0>@59:1>@65:0>](
      <<f_1030@34:0>@59:0>:int,<<<f_1030@34:0>@59:1>@65:0>:int)
      
      P[<succ_1033@61:0>](<succ_1033@61:0>:int), (<<succ_1033@61:1>@63:0> = (1 + <succ_1033@61:0>))
      |- P[<<succ_1033@61:1>@63:0>](<succ_1033@61:0>:int,<<succ_1033@61:1>@63:0>:int)
      
      P[<main_1035@32:0>](<f_1030@34:1>:int),
      P[<<f_1030@34:0>@59:0>](<succ_1033@61:0>:int)|- P[<succ_1033@61:0>](
      <succ_1033@61:0>:int)
      
      P[<f_1030@34:1>](<<f_1030@34:0>@37:0>:int),
      P[<<f_f_1249@45:1>@57:0>](<<f_1030@34:0>@37:0>:int,<<f_1030@34:0>@59:0>:int), (
      <<f_1030@34:0>@37:0> < 0) |- P[<<f_1030@34:0>@59:0>](<<f_1030@34:0>@59:0>:int)
      
      P[<f_f_1249@45:3>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
      P[<<f_1030@52:0>@55:0>](<<f_f_1249@45:1>@57:0>:int)|- P[<<f_f_1249@45:1>@57:0>](
      <f_f_1249@45:0>:int,<<f_f_1249@45:1>@57:0>:int)
      
      P[<f_1030@52:1>](<<f_1030@52:0>@55:0>:int), (<<f_1030@52:0>@55:0> >= 0)
      |- P[<<f_1030@52:0>@55:0>](<<f_1030@52:0>@55:0>:int)
      
      P[<f_f_1249@45:3>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
      P[<<f_1030@47:0>@50:0>](<f_1030@52:1>:int)|- P[<f_1030@52:1>](<f_1030@52:1>:int)
      
      P[<f_1030@47:1>](<<f_1030@47:0>@50:0>:int), (<<f_1030@47:0>@50:0> >= 0)
      |- P[<<f_1030@47:0>@50:0>](<<f_1030@47:0>@50:0>:int)
      
      P[<f_f_1249@45:3>](<f_f_1249@45:0>:int,<f_1030@47:1>:int)|- P[<f_1030@47:1>](<f_1030@47:1>:int)
      
      P[<f_1030@34:1>](<f_f_1249@45:0>:int),
      P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_f_1249@45:3>:int), (
      <f_f_1249@45:0> < 0) |- P[<f_f_1249@45:3>](<f_f_1249@45:0>:int,
                                                 <f_f_1249@45:3>:int)
      
      P[<main_1035@32:0>](<f_1030@34:1>:int),
      P[<<succ_1033@39:1>@41:0>](<<f_1030@34:0>@37:0>:int,<<<f_1030@34:0>@37:1>@43:0>:int)|- P[<<<f_1030@34:0>@37:1>@43:0>](
      <<f_1030@34:0>@37:0>:int,<<<f_1030@34:0>@37:1>@43:0>:int)
      
      P[<succ_1033@39:0>](<succ_1033@39:0>:int), (<<succ_1033@39:1>@41:0> = (1 + <succ_1033@39:0>))
      |- P[<<succ_1033@39:1>@41:0>](<succ_1033@39:0>:int,<<succ_1033@39:1>@41:0>:int)
      
      P[<main_1035@32:0>](<f_1030@34:1>:int),
      P[<<f_1030@34:0>@37:0>](<succ_1033@39:0>:int)|- P[<succ_1033@39:0>](
      <succ_1033@39:0>:int)
      
      P[<f_1030@34:1>](<<f_1030@34:0>@37:0>:int), (<<f_1030@34:0>@37:0> < 0)
      |- P[<<f_1030@34:0>@37:0>](<<f_1030@34:0>@37:0>:int)
      
      P[<main_1035@32:0>](<f_1030@34:1>:int)|- P[<f_1030@34:1>](<f_1030@34:1>:int)
      
      P[<f_1251@30:0>](<main_1035@32:0>:int)|- P[<main_1035@32:0>](<main_1035@32:0>:int)
      
      |- P[<f_1251@30:0>](<f_1251@30:0>:int)
    call trees:
      <main_1248@27>
        <f_1251@30>
          <main_1035@32>
            <f_1030@34>
            </<f_1030@34:0>@37>
            <succ_1033@39>
            </<succ_1033@39:1>@41>
            <<<f_1030@34:0>@37:1>@43>
              <f_f_1249@45>
                <f_1030@47>
                </<f_1030@47:0>@50>
                <f_1030@52>
                </<f_1030@52:0>@55>
              </<f_f_1249@45:1>@57>
            </<f_1030@34:0>@59>
            <succ_1033@61>
            </<succ_1033@61:1>@63>
            <<<f_1030@34:0>@59:1>@65>
              <<<f_f_1249@45:1>@57:1>@67>
                <<<f_1030@52:0>@55:1>@69>
                </<f_1030@52:2>@71>
                <<<f_1030@47:0>@50:1>@73>
                </<f_1030@47:2>@75>
              </<f_f_1249@45:2>@77>
            </<f_1030@34:2>@79>
            <f_main_1250@81>
              <fail_1253@84>
    inlined horn clauses:
      P[<fail_1253@84:0>](<fail_1253@84:0>:bool)|- bot
      
      P[<<f_1030@34:2>@79:0>](<f_main_1250@81:0>:int,<f_main_1250@81:2>:int),
      ((<f_main_1250@81:2> < 0) && <fail_1253@84:0>) |- P[<fail_1253@84:0>](
      <fail_1253@84:0>:bool)
      
      P[<f_1030@34:1>](<f_1030@34:1>:int),
      P[<<<f_1030@34:0>@37:1>@43:0>](<f_1030@34:1>:int,var22:int),
      P[<<f_1030@47:2>@75:0>](var22:int,<<f_1030@34:2>@79:0>:int), (<f_1030@34:1> < 0)
      |- P[<<f_1030@34:2>@79:0>](<f_1030@34:1>:int,<<f_1030@34:2>@79:0>:int)
      
      P[<f_1030@47:1>](<f_1030@47:1>:int),
      P[<<<f_1030@47:0>@50:1>@73:0>](<f_1030@47:1>:int,<<f_1030@47:2>@75:0>:int), (
      <f_1030@47:1> >= 0) |- P[<<f_1030@47:2>@75:0>](<f_1030@47:1>:int,
                                                     <<f_1030@47:2>@75:0>:int)
      
      P[<f_1030@34:1>](<f_f_1249@45:0>:int),
      P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
      P[<<f_1030@52:2>@71:0>](<<f_1030@47:0>@50:0>:int,<<<f_1030@47:0>@50:1>@73:0>:int), (
      <f_f_1249@45:0> < 0) |- P[<<<f_1030@47:0>@50:1>@73:0>](<<f_1030@47:0>@50:0>:int,
                                                             <<<f_1030@47:0>@50:1>@73:0>:int)
      
      P[<f_1030@52:1>](<f_1030@52:1>:int),
      P[<<<f_1030@52:0>@55:1>@69:0>](<f_1030@52:1>:int,<<f_1030@52:2>@71:0>:int), (
      <f_1030@52:1> >= 0) |- P[<<f_1030@52:2>@71:0>](<f_1030@52:1>:int,
                                                     <<f_1030@52:2>@71:0>:int)
      
      P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
      P[<f_1030@34:1>](<f_f_1249@45:0>:int),
      P[<<<f_1030@34:0>@59:1>@65:0>](<<f_1030@52:0>@55:0>:int,<<<f_1030@52:0>@55:1>@69:0>:int), (
      <f_f_1249@45:0> < 0) |- P[<<<f_1030@52:0>@55:1>@69:0>](<<f_1030@52:0>@55:0>:int,
                                                             <<<f_1030@52:0>@55:1>@69:0>:int)
      
      P[<<f_1030@34:0>@59:0>](<<f_1030@34:0>@59:0>:int), (<<<f_1030@34:0>@59:1>@65:0> = (1 + <<f_1030@34:0>@59:0>))
      |- P[<<<f_1030@34:0>@59:1>@65:0>](<<f_1030@34:0>@59:0>:int,<<<f_1030@34:0>@59:1>@65:0>:int)
      
      P[<f_1030@34:1>](<<f_1030@34:0>@37:0>:int),
      P[<<<f_1030@34:0>@37:1>@43:0>](<<f_1030@34:0>@37:0>:int,var23:int),
      P[<<f_1030@52:0>@55:0>](<<f_1030@34:0>@59:0>:int), (<<f_1030@34:0>@37:0> < 0)
      |- P[<<f_1030@34:0>@59:0>](<<f_1030@34:0>@59:0>:int)
      
      P[<f_1030@52:1>](<<f_1030@52:0>@55:0>:int), (<<f_1030@52:0>@55:0> >= 0)
      |- P[<<f_1030@52:0>@55:0>](<<f_1030@52:0>@55:0>:int)
      
      P[<f_1030@34:1>](<f_f_1249@45:0>:int),
      P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
      P[<<f_1030@47:0>@50:0>](<f_1030@52:1>:int), (<f_f_1249@45:0> < 0) |- P[<f_1030@52:1>](
      <f_1030@52:1>:int)
      
      P[<f_1030@47:1>](<<f_1030@47:0>@50:0>:int), (<<f_1030@47:0>@50:0> >= 0)
      |- P[<<f_1030@47:0>@50:0>](<<f_1030@47:0>@50:0>:int)
      
      P[<f_1030@34:1>](<f_f_1249@45:0>:int),
      P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int), (
      <f_f_1249@45:0> < 0) |- P[<f_1030@47:1>](<f_1030@47:1>:int)
      
      P[<<f_1030@34:0>@37:0>](<<f_1030@34:0>@37:0>:int), (<<<f_1030@34:0>@37:1>@43:0> = (1 + <<f_1030@34:0>@37:0>))
      |- P[<<<f_1030@34:0>@37:1>@43:0>](<<f_1030@34:0>@37:0>:int,<<<f_1030@34:0>@37:1>@43:0>:int)
      
      P[<f_1030@34:1>](<<f_1030@34:0>@37:0>:int), (<<f_1030@34:0>@37:0> < 0)
      |- P[<<f_1030@34:0>@37:0>](<<f_1030@34:0>@37:0>:int)
      
      |- P[<f_1030@34:1>](<f_1030@34:1>:int)
    begin ParamSubstInfer.infer(4572)[3]
      
    end ParamSubstInfer.infer(4572)[3] (0.056990 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(4574)[3]
      
    end RefTypeInfer.elim_coeffs(4574)[3] (0.001000 sec.)
    begin YhornInterface.solve(5005)[3]
      begin HcSolver.solve_ub(5006)[4]
        encoded:
          P[<fail_1253@84:0>](<fail_1253@84:0>:int)|- bot
          
          P[<<f_1030@34:2>@79:0>](<f_main_1250@81:0>:int,<f_main_1250@81:2>:int),
          ((<f_main_1250@81:2> < 0) && (<fail_1253@84:0> = 1)) |- P[<fail_1253@84:0>](
          <fail_1253@84:0>:int)
          
          P[<f_1030@34:1>](<f_1030@34:1>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_1030@34:1>:int,var22:int),
          P[<<f_1030@47:2>@75:0>](var22:int,<<f_1030@34:2>@79:0>:int), (
          <f_1030@34:1> < 0) |- P[<<f_1030@34:2>@79:0>](<f_1030@34:1>:int,
                                                        <<f_1030@34:2>@79:0>:int)
          
          P[<f_1030@47:1>](<f_1030@47:1>:int),
          P[<<<f_1030@47:0>@50:1>@73:0>](<f_1030@47:1>:int,<<f_1030@47:2>@75:0>:int), (
          <f_1030@47:1> >= 0) |- P[<<f_1030@47:2>@75:0>](<f_1030@47:1>:int,
                                                         <<f_1030@47:2>@75:0>:int)
          
          P[<f_1030@34:1>](<f_f_1249@45:0>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
          P[<<f_1030@52:2>@71:0>](<<f_1030@47:0>@50:0>:int,<<<f_1030@47:0>@50:1>@73:0>:int), (
          <f_f_1249@45:0> < 0)
          |- P[<<<f_1030@47:0>@50:1>@73:0>](<<f_1030@47:0>@50:0>:int,
                                            <<<f_1030@47:0>@50:1>@73:0>:int)
          
          P[<f_1030@52:1>](<f_1030@52:1>:int),
          P[<<<f_1030@52:0>@55:1>@69:0>](<f_1030@52:1>:int,<<f_1030@52:2>@71:0>:int), (
          <f_1030@52:1> >= 0) |- P[<<f_1030@52:2>@71:0>](<f_1030@52:1>:int,
                                                         <<f_1030@52:2>@71:0>:int)
          
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
          P[<f_1030@34:1>](<f_f_1249@45:0>:int),
          P[<<<f_1030@34:0>@59:1>@65:0>](<<f_1030@52:0>@55:0>:int,<<<f_1030@52:0>@55:1>@69:0>:int),
          (<f_f_1249@45:0> < 0)
          |- P[<<<f_1030@52:0>@55:1>@69:0>](<<f_1030@52:0>@55:0>:int,
                                            <<<f_1030@52:0>@55:1>@69:0>:int)
          
          P[<<f_1030@34:0>@59:0>](<<f_1030@34:0>@59:0>:int), (<<<f_1030@34:0>@59:1>@65:0> = (1 + <<f_1030@34:0>@59:0>))
          |- P[<<<f_1030@34:0>@59:1>@65:0>](<<f_1030@34:0>@59:0>:int,
                                            <<<f_1030@34:0>@59:1>@65:0>:int)
          
          P[<f_1030@34:1>](<<f_1030@34:0>@37:0>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<<f_1030@34:0>@37:0>:int,var23:int),
          P[<<f_1030@52:0>@55:0>](<<f_1030@34:0>@59:0>:int), (<<f_1030@34:0>@37:0> < 0)
          |- P[<<f_1030@34:0>@59:0>](<<f_1030@34:0>@59:0>:int)
          
          P[<f_1030@52:1>](<<f_1030@52:0>@55:0>:int), (<<f_1030@52:0>@55:0> >= 0)
          |- P[<<f_1030@52:0>@55:0>](<<f_1030@52:0>@55:0>:int)
          
          P[<f_1030@34:1>](<f_f_1249@45:0>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
          P[<<f_1030@47:0>@50:0>](<f_1030@52:1>:int), (<f_f_1249@45:0> < 0) |- P[<f_1030@52:1>](
          <f_1030@52:1>:int)
          
          P[<f_1030@47:1>](<<f_1030@47:0>@50:0>:int), (<<f_1030@47:0>@50:0> >= 0)
          |- P[<<f_1030@47:0>@50:0>](<<f_1030@47:0>@50:0>:int)
          
          P[<f_1030@34:1>](<f_f_1249@45:0>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int), (
          <f_f_1249@45:0> < 0) |- P[<f_1030@47:1>](<f_1030@47:1>:int)
          
          P[<<f_1030@34:0>@37:0>](<<f_1030@34:0>@37:0>:int), (<<<f_1030@34:0>@37:1>@43:0> = (1 + <<f_1030@34:0>@37:0>))
          |- P[<<<f_1030@34:0>@37:1>@43:0>](<<f_1030@34:0>@37:0>:int,
                                            <<<f_1030@34:0>@37:1>@43:0>:int)
          
          P[<f_1030@34:1>](<<f_1030@34:0>@37:0>:int), (<<f_1030@34:0>@37:0> < 0)
          |- P[<<f_1030@34:0>@37:0>](<<f_1030@34:0>@37:0>:int)
          
          |- P[<f_1030@34:1>](<f_1030@34:1>:int)
        input to Yhorn:
          P[<fail_1253@84:0>](<fail_1253@84:0>:int)|- bot
          
          P[<<f_1030@34:2>@79:0>](<f_main_1250@81:0>:int,<f_main_1250@81:2>:int),
          ((<f_main_1250@81:2> < 0) && (<fail_1253@84:0> = 1)) |- P[<fail_1253@84:0>](
          <fail_1253@84:0>:int)
          
          P[<f_1030@34:1>](<f_1030@34:1>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_1030@34:1>:int,var22:int),
          P[<<f_1030@47:2>@75:0>](var22:int,<<f_1030@34:2>@79:0>:int), (
          <f_1030@34:1> < 0) |- P[<<f_1030@34:2>@79:0>](<f_1030@34:1>:int,
                                                        <<f_1030@34:2>@79:0>:int)
          
          P[<f_1030@47:1>](<f_1030@47:1>:int),
          P[<<<f_1030@47:0>@50:1>@73:0>](<f_1030@47:1>:int,<<f_1030@47:2>@75:0>:int), (
          <f_1030@47:1> >= 0) |- P[<<f_1030@47:2>@75:0>](<f_1030@47:1>:int,
                                                         <<f_1030@47:2>@75:0>:int)
          
          P[<f_1030@34:1>](<f_f_1249@45:0>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
          P[<<f_1030@52:2>@71:0>](<<f_1030@47:0>@50:0>:int,<<<f_1030@47:0>@50:1>@73:0>:int), (
          <f_f_1249@45:0> < 0)
          |- P[<<<f_1030@47:0>@50:1>@73:0>](<<f_1030@47:0>@50:0>:int,
                                            <<<f_1030@47:0>@50:1>@73:0>:int)
          
          P[<f_1030@52:1>](<f_1030@52:1>:int),
          P[<<<f_1030@52:0>@55:1>@69:0>](<f_1030@52:1>:int,<<f_1030@52:2>@71:0>:int), (
          <f_1030@52:1> >= 0) |- P[<<f_1030@52:2>@71:0>](<f_1030@52:1>:int,
                                                         <<f_1030@52:2>@71:0>:int)
          
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
          P[<f_1030@34:1>](<f_f_1249@45:0>:int),
          P[<<<f_1030@34:0>@59:1>@65:0>](<<f_1030@52:0>@55:0>:int,<<<f_1030@52:0>@55:1>@69:0>:int),
          (<f_f_1249@45:0> < 0)
          |- P[<<<f_1030@52:0>@55:1>@69:0>](<<f_1030@52:0>@55:0>:int,
                                            <<<f_1030@52:0>@55:1>@69:0>:int)
          
          P[<<f_1030@34:0>@59:0>](<<f_1030@34:0>@59:0>:int), (<<<f_1030@34:0>@59:1>@65:0> = (1 + <<f_1030@34:0>@59:0>))
          |- P[<<<f_1030@34:0>@59:1>@65:0>](<<f_1030@34:0>@59:0>:int,
                                            <<<f_1030@34:0>@59:1>@65:0>:int)
          
          P[<f_1030@34:1>](<<f_1030@34:0>@37:0>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<<f_1030@34:0>@37:0>:int,var23:int),
          P[<<f_1030@52:0>@55:0>](<<f_1030@34:0>@59:0>:int), (<<f_1030@34:0>@37:0> < 0)
          |- P[<<f_1030@34:0>@59:0>](<<f_1030@34:0>@59:0>:int)
          
          P[<f_1030@52:1>](<<f_1030@52:0>@55:0>:int), (<<f_1030@52:0>@55:0> >= 0)
          |- P[<<f_1030@52:0>@55:0>](<<f_1030@52:0>@55:0>:int)
          
          P[<f_1030@34:1>](<f_f_1249@45:0>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
          P[<<f_1030@47:0>@50:0>](<f_1030@52:1>:int), (<f_f_1249@45:0> < 0) |- P[<f_1030@52:1>](
          <f_1030@52:1>:int)
          
          P[<f_1030@47:1>](<<f_1030@47:0>@50:0>:int), (<<f_1030@47:0>@50:0> >= 0)
          |- P[<<f_1030@47:0>@50:0>](<<f_1030@47:0>@50:0>:int)
          
          P[<f_1030@34:1>](<f_f_1249@45:0>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int), (
          <f_f_1249@45:0> < 0) |- P[<f_1030@47:1>](<f_1030@47:1>:int)
          
          P[<<f_1030@34:0>@37:0>](<<f_1030@34:0>@37:0>:int), (<<<f_1030@34:0>@37:1>@43:0> = (1 + <<f_1030@34:0>@37:0>))
          |- P[<<<f_1030@34:0>@37:1>@43:0>](<<f_1030@34:0>@37:0>:int,
                                            <<<f_1030@34:0>@37:1>@43:0>:int)
          
          P[<f_1030@34:1>](<<f_1030@34:0>@37:0>:int), (<<f_1030@34:0>@37:0> < 0)
          |- P[<<f_1030@34:0>@37:0>](<<f_1030@34:0>@37:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1253_sep_84_sep_0($99)) -> 1=0.
(($99-1=0) & ($100<0)) & (v_sep_f_1030_sep_34_sep_2_sep_79_sep_0($101,$100)) -> v_sep_fail_1253_sep_84_sep_0($99).
($102<0) & (v_sep_f_1030_sep_47_sep_2_sep_75_sep_0($103,$104)) & (v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0($102,$103)) & (v_sep_f_1030_sep_34_sep_1($102)) -> v_sep_f_1030_sep_34_sep_2_sep_79_sep_0($102,$104).
($105>=0) & (v_sep_f_1030_sep_47_sep_0_sep_50_sep_1_sep_73_sep_0($105,$106)) & (v_sep_f_1030_sep_47_sep_1($105)) -> v_sep_f_1030_sep_47_sep_2_sep_75_sep_0($105,$106).
($107<0) & (v_sep_f_1030_sep_52_sep_2_sep_71_sep_0($108,$109)) & (v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0($107,$105)) & (v_sep_f_1030_sep_34_sep_1($107)) -> v_sep_f_1030_sep_47_sep_0_sep_50_sep_1_sep_73_sep_0($108,$109).
($110>=0) & (v_sep_f_1030_sep_52_sep_0_sep_55_sep_1_sep_69_sep_0($110,$111)) & (v_sep_f_1030_sep_52_sep_1($110)) -> v_sep_f_1030_sep_52_sep_2_sep_71_sep_0($110,$111).
($107<0) & (v_sep_f_1030_sep_34_sep_0_sep_59_sep_1_sep_65_sep_0($112,$113)) & (v_sep_f_1030_sep_34_sep_1($107)) & (v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0($107,$105)) -> v_sep_f_1030_sep_52_sep_0_sep_55_sep_1_sep_69_sep_0($112,$113).
($114-$115-1=0) & (v_sep_f_1030_sep_34_sep_0_sep_59_sep_0($115)) -> v_sep_f_1030_sep_34_sep_0_sep_59_sep_1_sep_65_sep_0($115,$114).
($116<0) & (v_sep_f_1030_sep_52_sep_0_sep_55_sep_0($115)) & (v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0($116,$117)) & (v_sep_f_1030_sep_34_sep_1($116)) -> v_sep_f_1030_sep_34_sep_0_sep_59_sep_0($115).
($112>=0) & (v_sep_f_1030_sep_52_sep_1($112)) -> v_sep_f_1030_sep_52_sep_0_sep_55_sep_0($112).
($107<0) & (v_sep_f_1030_sep_47_sep_0_sep_50_sep_0($110)) & (v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0($107,$105)) & (v_sep_f_1030_sep_34_sep_1($107)) -> v_sep_f_1030_sep_52_sep_1($110).
($108>=0) & (v_sep_f_1030_sep_47_sep_1($108)) -> v_sep_f_1030_sep_47_sep_0_sep_50_sep_0($108).
($107<0) & (v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0($107,$105)) & (v_sep_f_1030_sep_34_sep_1($107)) -> v_sep_f_1030_sep_47_sep_1($105).
(-$116+$118-1=0) & (v_sep_f_1030_sep_34_sep_0_sep_37_sep_0($116)) -> v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0($116,$118).
($116<0) & (v_sep_f_1030_sep_34_sep_1($116)) -> v_sep_f_1030_sep_34_sep_0_sep_37_sep_0($116).
0=0 -> v_sep_f_1030_sep_34_sep_1($102).


v_sep_f_1030_sep_34_sep_0_sep_37_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_1_sep_65_sep_0: X
v_sep_f_1030_sep_34_sep_1: X
v_sep_f_1030_sep_34_sep_2_sep_79_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_1_sep_73_sep_0: X
v_sep_f_1030_sep_47_sep_1: X
v_sep_f_1030_sep_47_sep_2_sep_75_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_1_sep_69_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_f_1030_sep_52_sep_2_sep_71_sep_0: X
v_sep_fail_1253_sep_84_sep_0: X
.............................
v_sep_f_1030_sep_34_sep_0_sep_37_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_1_sep_65_sep_0: X
v_sep_f_1030_sep_34_sep_1: X
v_sep_f_1030_sep_34_sep_2_sep_79_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_1_sep_73_sep_0: X
v_sep_f_1030_sep_47_sep_1: X
v_sep_f_1030_sep_47_sep_2_sep_75_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_1_sep_69_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_f_1030_sep_52_sep_2_sep_71_sep_0: X
v_sep_fail_1253_sep_84_sep_0: X
...
v_sep_f_1030_sep_34_sep_0_sep_37_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_1_sep_65_sep_0: X
v_sep_f_1030_sep_34_sep_1: X
v_sep_f_1030_sep_34_sep_2_sep_79_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_1_sep_73_sep_0: X
v_sep_f_1030_sep_47_sep_1: X
v_sep_f_1030_sep_47_sep_2_sep_75_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_1_sep_69_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_f_1030_sep_52_sep_2_sep_71_sep_0: X
v_sep_fail_1253_sep_84_sep_0: X
......
v_sep_f_1030_sep_34_sep_0_sep_37_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_1_sep_65_sep_0: X
v_sep_f_1030_sep_34_sep_1: X
v_sep_f_1030_sep_34_sep_2_sep_79_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_1_sep_73_sep_0: X
v_sep_f_1030_sep_47_sep_1: X
v_sep_f_1030_sep_47_sep_2_sep_75_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_1_sep_69_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_f_1030_sep_52_sep_2_sep_71_sep_0: X
v_sep_fail_1253_sep_84_sep_0: X
.........
v_sep_f_1030_sep_34_sep_0_sep_37_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_1_sep_65_sep_0: X
v_sep_f_1030_sep_34_sep_1: X
v_sep_f_1030_sep_34_sep_2_sep_79_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_1_sep_73_sep_0: X
v_sep_f_1030_sep_47_sep_1: X
v_sep_f_1030_sep_47_sep_2_sep_75_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_1_sep_69_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_f_1030_sep_52_sep_2_sep_71_sep_0: X
v_sep_fail_1253_sep_84_sep_0: X
...............
v_sep_f_1030_sep_34_sep_0_sep_37_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_1_sep_65_sep_0: X
v_sep_f_1030_sep_34_sep_1: X
v_sep_f_1030_sep_34_sep_2_sep_79_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_1_sep_73_sep_0: X
v_sep_f_1030_sep_47_sep_1: X
v_sep_f_1030_sep_47_sep_2_sep_75_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_1_sep_69_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_f_1030_sep_52_sep_2_sep_71_sep_0: X
v_sep_fail_1253_sep_84_sep_0: X
.................
v_sep_f_1030_sep_34_sep_0_sep_37_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_1_sep_65_sep_0: X
v_sep_f_1030_sep_34_sep_1: X
v_sep_f_1030_sep_34_sep_2_sep_79_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_1_sep_73_sep_0: X
v_sep_f_1030_sep_47_sep_1: X
v_sep_f_1030_sep_47_sep_2_sep_75_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_1_sep_69_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_f_1030_sep_52_sep_2_sep_71_sep_0: X
v_sep_fail_1253_sep_84_sep_0: X
.......................
v_sep_f_1030_sep_34_sep_0_sep_37_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_1_sep_65_sep_0: X
v_sep_f_1030_sep_34_sep_1: X
v_sep_f_1030_sep_34_sep_2_sep_79_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_1_sep_73_sep_0: X
v_sep_f_1030_sep_47_sep_1: X
v_sep_f_1030_sep_47_sep_2_sep_75_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_1_sep_69_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_f_1030_sep_52_sep_2_sep_71_sep_0: X
v_sep_fail_1253_sep_84_sep_0: X
.........................
v_sep_f_1030_sep_34_sep_0_sep_37_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_1_sep_65_sep_0: X
v_sep_f_1030_sep_34_sep_1: X
v_sep_f_1030_sep_34_sep_2_sep_79_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_1_sep_73_sep_0: X
v_sep_f_1030_sep_47_sep_1: X
v_sep_f_1030_sep_47_sep_2_sep_75_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_1_sep_69_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_f_1030_sep_52_sep_2_sep_71_sep_0: X
v_sep_fail_1253_sep_84_sep_0: X
............................
v_sep_f_1030_sep_34_sep_0_sep_37_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_0: X
v_sep_f_1030_sep_34_sep_0_sep_59_sep_1_sep_65_sep_0: X
v_sep_f_1030_sep_34_sep_1: X
v_sep_f_1030_sep_34_sep_2_sep_79_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_0: X
v_sep_f_1030_sep_47_sep_0_sep_50_sep_1_sep_73_sep_0: X
v_sep_f_1030_sep_47_sep_1: X
v_sep_f_1030_sep_47_sep_2_sep_75_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_0: X
v_sep_f_1030_sep_52_sep_0_sep_55_sep_1_sep_69_sep_0: X
v_sep_f_1030_sep_52_sep_1: X
v_sep_f_1030_sep_52_sep_2_sep_71_sep_0: X
v_sep_fail_1253_sep_84_sep_0: X
.............................(0=0) & (v_sep_fail_1253_sep_84_sep_0($99)) -> 1=0.
(($99-1=0) & ($100<0)) & (v_sep_f_1030_sep_34_sep_2_sep_79_sep_0($101,$100)) -> v_sep_fail_1253_sep_84_sep_0($99).
($102<0) & (v_sep_f_1030_sep_47_sep_2_sep_75_sep_0($103,$104)) & (v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0($102,$103)) & (v_sep_f_1030_sep_34_sep_1($102)) -> v_sep_f_1030_sep_34_sep_2_sep_79_sep_0($102,$104).
($105>=0) & (v_sep_f_1030_sep_47_sep_0_sep_50_sep_1_sep_73_sep_0($105,$106)) & (v_sep_f_1030_sep_47_sep_1($105)) -> v_sep_f_1030_sep_47_sep_2_sep_75_sep_0($105,$106).
($107<0) & (v_sep_f_1030_sep_52_sep_2_sep_71_sep_0($108,$109)) & (v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0($107,$105)) & (v_sep_f_1030_sep_34_sep_1($107)) -> v_sep_f_1030_sep_47_sep_0_sep_50_sep_1_sep_73_sep_0($108,$109).
($110>=0) & (v_sep_f_1030_sep_52_sep_0_sep_55_sep_1_sep_69_sep_0($110,$111)) & (v_sep_f_1030_sep_52_sep_1($110)) -> v_sep_f_1030_sep_52_sep_2_sep_71_sep_0($110,$111).
($107<0) & (v_sep_f_1030_sep_34_sep_0_sep_59_sep_1_sep_65_sep_0($112,$113)) & (v_sep_f_1030_sep_34_sep_1($107)) & (v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0($107,$105)) -> v_sep_f_1030_sep_52_sep_0_sep_55_sep_1_sep_69_sep_0($112,$113).
($114-$115-1=0) & (v_sep_f_1030_sep_34_sep_0_sep_59_sep_0($115)) -> v_sep_f_1030_sep_34_sep_0_sep_59_sep_1_sep_65_sep_0($115,$114).
($116<0) & (v_sep_f_1030_sep_52_sep_0_sep_55_sep_0($115)) & (v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0($116,$117)) & (v_sep_f_1030_sep_34_sep_1($116)) -> v_sep_f_1030_sep_34_sep_0_sep_59_sep_0($115).
($112>=0) & (v_sep_f_1030_sep_52_sep_1($112)) -> v_sep_f_1030_sep_52_sep_0_sep_55_sep_0($112).
($107<0) & (v_sep_f_1030_sep_47_sep_0_sep_50_sep_0($110)) & (v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0($107,$105)) & (v_sep_f_1030_sep_34_sep_1($107)) -> v_sep_f_1030_sep_52_sep_1($110).
($108>=0) & (v_sep_f_1030_sep_47_sep_1($108)) -> v_sep_f_1030_sep_47_sep_0_sep_50_sep_0($108).
($107<0) & (v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0($107,$105)) & (v_sep_f_1030_sep_34_sep_1($107)) -> v_sep_f_1030_sep_47_sep_1($105).
(-$116+$118-1=0) & (v_sep_f_1030_sep_34_sep_0_sep_37_sep_0($116)) -> v_sep_f_1030_sep_34_sep_0_sep_37_sep_1_sep_43_sep_0($116,$118).
($116<0) & (v_sep_f_1030_sep_34_sep_1($116)) -> v_sep_f_1030_sep_34_sep_0_sep_37_sep_0($116).
0=0 -> v_sep_f_1030_sep_34_sep_1($102).

          |- P[<f_1030@34:1>](<f_1030@34:1>:int)
        solution:
          P[<<f_1030@34:0>@37:0>]($175:int) = true
          P[<<<f_1030@34:0>@37:1>@43:0>]($132:int,$134:int) = true
          P[<<f_1030@34:0>@59:0>]($166:int) = true
          P[<<<f_1030@34:0>@59:1>@65:0>]($161:int,$163:int) = ((1 + $161) <= $163)
          P[<f_1030@34:1>]($137:int) = true
          P[<<f_1030@34:2>@79:0>]($122:int,$124:int) = (1 <= $124)
          P[<<f_1030@47:0>@50:0>]($172:int) = true
          P[<<<f_1030@47:0>@50:1>@73:0>]($140:int,$142:int) = (1 <= $142)
          P[<f_1030@47:1>]($145:int) = true
          P[<<f_1030@47:2>@75:0>]($127:int,$129:int) = (1 <= $129)
          P[<<f_1030@52:0>@55:0>]($169:int) = true
          P[<<<f_1030@52:0>@55:1>@69:0>]($153:int,$155:int) = ((1 + $153) <= $155)
          P[<f_1030@52:1>]($158:int) = true
          P[<<f_1030@52:2>@71:0>]($148:int,$150:int) = (1 <= $150)
          P[<fail_1253@84:0>]($119:bool) = false
        
      end HcSolver.solve_ub(5006)[4] (0.082988 sec.)
      begin HcSolver.check_validity(5279)[4]
        input:
          P[<fail_1253@84:0>](<fail_1253@84:0>:bool)|- bot
          
          P[<<f_1030@34:2>@79:0>](<f_main_1250@81:0>:int,<f_main_1250@81:2>:int),
          ((<f_main_1250@81:2> < 0) && <fail_1253@84:0>) |- P[<fail_1253@84:0>](
          <fail_1253@84:0>:bool)
          
          P[<f_1030@34:1>](<f_1030@34:1>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_1030@34:1>:int,var22:int),
          P[<<f_1030@47:2>@75:0>](var22:int,<<f_1030@34:2>@79:0>:int), (
          <f_1030@34:1> < 0) |- P[<<f_1030@34:2>@79:0>](<f_1030@34:1>:int,
                                                        <<f_1030@34:2>@79:0>:int)
          
          P[<f_1030@47:1>](<f_1030@47:1>:int),
          P[<<<f_1030@47:0>@50:1>@73:0>](<f_1030@47:1>:int,<<f_1030@47:2>@75:0>:int), (
          <f_1030@47:1> >= 0) |- P[<<f_1030@47:2>@75:0>](<f_1030@47:1>:int,
                                                         <<f_1030@47:2>@75:0>:int)
          
          P[<f_1030@34:1>](<f_f_1249@45:0>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
          P[<<f_1030@52:2>@71:0>](<<f_1030@47:0>@50:0>:int,<<<f_1030@47:0>@50:1>@73:0>:int), (
          <f_f_1249@45:0> < 0)
          |- P[<<<f_1030@47:0>@50:1>@73:0>](<<f_1030@47:0>@50:0>:int,
                                            <<<f_1030@47:0>@50:1>@73:0>:int)
          
          P[<f_1030@52:1>](<f_1030@52:1>:int),
          P[<<<f_1030@52:0>@55:1>@69:0>](<f_1030@52:1>:int,<<f_1030@52:2>@71:0>:int), (
          <f_1030@52:1> >= 0) |- P[<<f_1030@52:2>@71:0>](<f_1030@52:1>:int,
                                                         <<f_1030@52:2>@71:0>:int)
          
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
          P[<f_1030@34:1>](<f_f_1249@45:0>:int),
          P[<<<f_1030@34:0>@59:1>@65:0>](<<f_1030@52:0>@55:0>:int,<<<f_1030@52:0>@55:1>@69:0>:int),
          (<f_f_1249@45:0> < 0)
          |- P[<<<f_1030@52:0>@55:1>@69:0>](<<f_1030@52:0>@55:0>:int,
                                            <<<f_1030@52:0>@55:1>@69:0>:int)
          
          P[<<f_1030@34:0>@59:0>](<<f_1030@34:0>@59:0>:int), (<<<f_1030@34:0>@59:1>@65:0> = (1 + <<f_1030@34:0>@59:0>))
          |- P[<<<f_1030@34:0>@59:1>@65:0>](<<f_1030@34:0>@59:0>:int,
                                            <<<f_1030@34:0>@59:1>@65:0>:int)
          
          P[<f_1030@34:1>](<<f_1030@34:0>@37:0>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<<f_1030@34:0>@37:0>:int,var23:int),
          P[<<f_1030@52:0>@55:0>](<<f_1030@34:0>@59:0>:int), (<<f_1030@34:0>@37:0> < 0)
          |- P[<<f_1030@34:0>@59:0>](<<f_1030@34:0>@59:0>:int)
          
          P[<f_1030@52:1>](<<f_1030@52:0>@55:0>:int), (<<f_1030@52:0>@55:0> >= 0)
          |- P[<<f_1030@52:0>@55:0>](<<f_1030@52:0>@55:0>:int)
          
          P[<f_1030@34:1>](<f_f_1249@45:0>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int),
          P[<<f_1030@47:0>@50:0>](<f_1030@52:1>:int), (<f_f_1249@45:0> < 0) |- P[<f_1030@52:1>](
          <f_1030@52:1>:int)
          
          P[<f_1030@47:1>](<<f_1030@47:0>@50:0>:int), (<<f_1030@47:0>@50:0> >= 0)
          |- P[<<f_1030@47:0>@50:0>](<<f_1030@47:0>@50:0>:int)
          
          P[<f_1030@34:1>](<f_f_1249@45:0>:int),
          P[<<<f_1030@34:0>@37:1>@43:0>](<f_f_1249@45:0>:int,<f_1030@47:1>:int), (
          <f_f_1249@45:0> < 0) |- P[<f_1030@47:1>](<f_1030@47:1>:int)
          
          P[<<f_1030@34:0>@37:0>](<<f_1030@34:0>@37:0>:int), (<<<f_1030@34:0>@37:1>@43:0> = (1 + <<f_1030@34:0>@37:0>))
          |- P[<<<f_1030@34:0>@37:1>@43:0>](<<f_1030@34:0>@37:0>:int,
                                            <<<f_1030@34:0>@37:1>@43:0>:int)
          
          P[<f_1030@34:1>](<<f_1030@34:0>@37:0>:int), (<<f_1030@34:0>@37:0> < 0)
          |- P[<<f_1030@34:0>@37:0>](<<f_1030@34:0>@37:0>:int)
          
          |- P[<f_1030@34:1>](<f_1030@34:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(5279)[4] (0.008998 sec.)
      solution:
        P[<<f_1030@34:0>@37:0>]($175:int) = true
        P[<<<f_1030@34:0>@37:1>@43:0>]($132:int,$134:int) = true
        P[<<f_1030@34:0>@59:0>]($166:int) = true
        P[<<<f_1030@34:0>@59:1>@65:0>]($161:int,$163:int) = ((1 + $161) <= $163)
        P[<f_1030@34:1>]($137:int) = true
        P[<<f_1030@34:2>@79:0>]($122:int,$124:int) = (1 <= $124)
        P[<<f_1030@47:0>@50:0>]($172:int) = true
        P[<<<f_1030@47:0>@50:1>@73:0>]($140:int,$142:int) = (1 <= $142)
        P[<f_1030@47:1>]($145:int) = true
        P[<<f_1030@47:2>@75:0>]($127:int,$129:int) = (1 <= $129)
        P[<<f_1030@52:0>@55:0>]($169:int) = true
        P[<<<f_1030@52:0>@55:1>@69:0>]($153:int,$155:int) = ((1 + $153) <= $155)
        P[<f_1030@52:1>]($158:int) = true
        P[<<f_1030@52:2>@71:0>]($148:int,$150:int) = (1 <= $150)
        P[<fail_1253@84:0>]($119:bool) = false
    end YhornInterface.solve(5005)[3] (0.092986 sec.)
    
  end RefTypeInfer.infer_etrs(2145)[2] (0.169974 sec.)
  refinement types:
    main_1248: X
    f_1251: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    f_1030: (v1:int -> (v2:int -> X) -> X /\
             v5:int -> (v6:{v6:int | ((1 + v5) <= v6)} -> X) -> X) -> 
            v9:int -> (v10:{v10:int | (1 <= v10)} -> X) -> X
    succ_1033: v1:int -> (v2:int -> X) -> X
    f_f_1249: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    f_1030: (v1:int -> (v2:{v2:int | (1 <= v2)} -> X) -> X) -> v5:int -> (v6:{v6:int | (1 <= v6)} -> X) -> X
    f_1030: (v1:int -> (v2:{v2:int | ((1 + v1) <= v2)} -> X) -> X) -> v5:int -> (v6:{v6:int | (1 <= v6)} -> X) -> X
    succ_1033: v1:int -> (v2:int -> X) -> X
    f_main_1250: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1253: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1252: var32:int -> var31:unit -> X
  abstraction types:
    main_1248: X
    f_1251: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    f_1030: (var45:int -> (var46:int[var46 -> (1 <= var46),
                                     var46 -> ((1 + var45) <= var46)] -> X) -> X) ->
            var49:int -> (var50:int[var50 -> (1 <= var50)] -> X) -> X
    succ_1033: var53:int -> (var54:int -> X) -> X
    f_f_1249: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    f_main_1250: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1253: v1:bool -> (v2:unit -> X) -> X
    f_1252: var32:int -> var31:unit -> X
  
end AbsTypeInfer.refine(2144)[1] (0.173973 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1248
  main_1248 -> (rand_int f_1251)
  f_1030 g_1031 x_1032 k_f_1109 when (x_1032 >= 0) -> (g_1031 x_1032 k_f_1109)
  f_1030 g_1031 x_1032 k_f_1109 when (not (x_1032 >= 0)) -> (g_1031 x_1032 (f_f_1249 x_1032 g_1031 k_f_1109))
  f_1251 x_1223 -> (main_1035 x_1223 (f_1252 x_1223))
  f_1252 x_1223 x_1220 -> end
  f_f_1249 x_1032 g_1031 k_f_1109 x_1153 -> (f_1030 (f_1030 g_1031) x_1153 k_f_1109)
  f_main_1250 n_1036 k_main_1185 x_1188 when (x_1188 >= 0) -> (k_main_1185 ())
  f_main_1250 n_1036 k_main_1185 x_1188 when (not (x_1188 >= 0)) -> (fail_1253 true k_main_1185)
  fail_1253 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1185 -> (f_1030 succ_1033 n_1036 (f_main_1250 n_1036 k_main_1185))
  succ_1033 x_1034 k_succ_1171 -> (k_succ_1171 (x_1034 + 1))
Types:
  main_1248 : X
  f_1030 : ((x_2:int -> (x_4:int[x_4 >= 1; x_2 <= x_4 - 1] -> X) -> X) -> int -> (x_9:int[x_9 >= 1] -> X) -> X)
  fail_1253 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  f: (((int -> Bottom) -> (int -> Bottom)) /\ ((int -> {x_8:int | x_8 >= 1}) -> (int -> {x_6:int | x_6 >= 1})) /\ 
      ((x_12:int -> ({x_13:int | x_13 >= 1} \/ {x_14:int | x_12 <= x_14 - 1 && x_14 < 1})) ->
           (int -> {x_11:int | x_11 >= 1})) /\
      ((x_18:int -> ({x_19:int | x_18 <= x_19 - 1 && x_19 >= 1} \/ {x_20:int | x_18 > x_20 - 1 && x_20 >= 1})) ->
           (int -> {x_17:int | x_17 >= 1})) /\
      ((x_24:int -> ({x_25:int | x_24 <= x_25 - 1 && x_25 >= 1} \/ {x_26:int | x_24 <= x_26 - 1 && x_26 < 1})) ->
           (int -> {x_23:int | x_23 >= 1})))

cycles: 2
total: 0.514 sec
  abst: 0.012 sec
  mc: 0.042 sec
  refine: 0.239 sec
    exparam: 0.067 sec
