MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn inc.ml

parsed::
 let rec ar_1030 i_1031 = 0 
 in
 let update_1032 a_1033 i_1034 x_1035 j_1036 = if j_1036 = i_1034 then
                                                 x_1035
                                               else
                                                 a_1033 j_1036 
 in
 let rec g_1037 e_1038 a_1039 j_1040 =
   if j_1040 < e_1038 then
     let u_1108 = if 0 <= j_1040 && j_1040 < e_1038 then
                    ()
                  else
                    {fail} () 
     in
       g_1037 e_1038 (update_1032 a_1039 j_1040 (a_1039 j_1040 + 1)) (j_1040 + 1)
   else
     () 
 in
 let main_1041 n_1042 = g_1037 n_1042 ar_1030 0 
 in
   ()

set_target::
 let rec ar_1030 i_1031 = 0 
 in
 let update_1032 a_1033 i_1034 x_1035 j_1036 = if j_1036 = i_1034 then
                                                 x_1035
                                               else
                                                 a_1033 j_1036 
 in
 let rec g_1037 e_1038 a_1039 j_1040 =
   if j_1040 < e_1038 then
     let u_1108 = if 0 <= j_1040 && j_1040 < e_1038 then
                    ()
                  else
                    {fail} () 
     in
       g_1037 e_1038 (update_1032 a_1039 j_1040 (a_1039 j_1040 + 1)) (j_1040 + 1)
   else
     () 
 in
 let main_1041 n_1042 = g_1037 n_1042 ar_1030 0 
 in
 let main_1118 = let arg1_1117 = rand_int () 
                 in
                   main_1041 arg1_1117 
 in
   ()

copy_poly::
 let rec ar_1120 (i_1031:int) = 0 
 in
 let update_1119 (a_1033:(int -> int)) (i_1034:int) (x_1035:int) (j_1036:int) =
   if j_1036 = i_1034 then
     x_1035
   else
     a_1033 j_1036 
 in
 let rec g_1037 (e_1038:int) (a_1039:(int -> int)) (j_1040:int) =
   if j_1040 < e_1038 then
     let u_1108 = if 0 <= j_1040 && j_1040 < e_1038 then
                    ()
                  else
                    {fail} () 
     in
       g_1037 e_1038 (update_1119 a_1039 j_1040 (a_1039 j_1040 + 1)) (j_1040 + 1)
   else
     () 
 in
 let main_1041 (n_1042:int) = g_1037 n_1042 ar_1120 0 
 in
 let main_1118 = let arg1_1117 = rand_int () 
                 in
                   main_1041 arg1_1117 
 in
   ()

CPS::
 let rec ar_1120 (i_1031:int) (k_ar_1145:(int -> X)) = k_ar_1145 0 
 in
 let update_1119
   (a_1033:(int -> ((int -> X) -> X))) (i_1034:int) (x_1035:int) (j_1036:int) (k_update_1180:(
   int -> X)) = if j_1036 = i_1034 then
                  k_update_1180 x_1035
                else
                  a_1033 j_1036 k_update_1180 
 in
 let rec g_1037 (e_1038:int) (a_1039:(int -> ((int -> X) -> X))) (j_1040:int) (k_g_1226:(
   unit -> X)) =
   if j_1040 < e_1038 then
     let k_g_u_1243 (x_1229:unit) =
       a_1039 j_1040 (fun x_1267 -> g_1037 e_1038 (update_1119 a_1039 j_1040 (x_1267 + 1)) (j_1040 + 1) k_g_1226) 
     in
     let k_g_u_1232 (b_1244:bool) = if b_1244 then
                                      k_g_u_1243 ()
                                    else
                                      {|fail|} () k_g_u_1243 
     in
       if 0 <= j_1040 then
         k_g_u_1232 (j_1040 < e_1038)
       else
         k_g_u_1232 false
   else
     k_g_1226 () 
 in
 let main_1041 (n_1042:int) (k_main_1331:(unit -> X)) = g_1037 n_1042 ar_1120 0 k_main_1331 
 in
   rand_int_cps () (fun x_1355 -> main_1041 x_1355 (fun x_1352 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1380
  main_1380 -> (rand_int f_1382)
  ar_1120 i_1031 k_ar_1145 -> (k_ar_1145 0)
  br_g_1384 b_1385 e_1038 a_1039 j_1040 k_g_1226 when b_1385 ->
      (k_g_u_1232 e_1038 j_1040 a_1039 k_g_1226 (j_1040 < e_1038))
  br_g_1384 b_1385 e_1038 a_1039 j_1040 k_g_1226 when (not b_1385) -> (k_g_u_1232 e_1038 j_1040 a_1039 k_g_1226 false)
  f_1382 x_1355 -> (main_1041 x_1355 (f_1383 x_1355))
  f_1383 x_1355 x_1352 -> end
  f_k_g_u_1381 e_1038 j_1040 x_1229 a_1039 k_g_1226 x_1267 ->
      (g_1037 e_1038 (update_1119 a_1039 j_1040 (x_1267 + 1)) (j_1040 + 1) k_g_1226)
  fail_1386 b k -> {fail} => (k ())
  g_1037 e_1038 a_1039 j_1040 k_g_1226 when (j_1040 < e_1038) ->
      (br_g_1384 (0 <= j_1040) e_1038 a_1039 j_1040 k_g_1226)
  g_1037 e_1038 a_1039 j_1040 k_g_1226 when (not (j_1040 < e_1038)) -> (k_g_1226 ())
  k_g_u_1232 e_1038 j_1040 a_1039 k_g_1226 b_1244 when b_1244 -> (k_g_u_1243 e_1038 j_1040 a_1039 k_g_1226 ())
  k_g_u_1232 e_1038 j_1040 a_1039 k_g_1226 b_1244 when (not b_1244) ->
      (fail_1386 true (k_g_u_1243 e_1038 j_1040 a_1039 k_g_1226))
  k_g_u_1243 e_1038 j_1040 a_1039 k_g_1226 x_1229 ->
      (a_1039 j_1040 (f_k_g_u_1381 e_1038 j_1040 x_1229 a_1039 k_g_1226))
  main_1041 n_1042 k_main_1331 -> (g_1037 n_1042 ar_1120 0 k_main_1331)
  update_1119 a_1033 i_1034 x_1035 j_1036 k_update_1180 when (j_1036 = i_1034) -> (k_update_1180 x_1035)
  update_1119 a_1033 i_1034 x_1035 j_1036 k_update_1180 when (not (j_1036 = i_1034)) -> (a_1033 j_1036 k_update_1180)
Types:
  main_1380 : X
  fail_1386 : (x_1:bool[x_1] -> (unit -> X) -> X)
  g_1037 : (int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1380 ... --> 
  f_1382 ... --> 
  main_1041 ... --> 
  g_1037 [1/2] ... --> 
  br_g_1384 [2/2] ... --> 
  k_g_u_1232 [2/2] ... --> 
  fail_1386 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(150)[1]
  program:
    main_1380  | true = ((Random.int 0) f_1382)
    ar_1120 i_1031 k_ar_1145 | true = (k_ar_1145 0)
    br_g_1384 b_1385 e_1038 a_1039 j_1040 k_g_1226 | b_1385 = (k_g_u_1232
                                                                 e_1038
                                                                 j_1040
                                                                 a_1039
                                                                 k_g_1226
                                                                 (j_1040 < e_1038))
    br_g_1384 b_1385 e_1038 a_1039 j_1040 k_g_1226 | (not b_1385) = (
    k_g_u_1232 e_1038
               j_1040
               a_1039
               k_g_1226
               false)
    f_1382 x_1355 | true = (main_1041 x_1355
                                      (f_1383 x_1355))
    f_1383 x_1355 x_1352 | true = end
    f_k_g_u_1381 e_1038 j_1040 x_1229 a_1039 k_g_1226 x_1267 | true = (
    g_1037 e_1038
           (update_1119 a_1039
                        j_1040
                        (x_1267 + 1))
           (j_1040 + 1)
           k_g_1226)
    fail_1386 b k | true = (fail ())
    g_1037 e_1038 a_1039 j_1040 k_g_1226 | (j_1040 < e_1038) = (br_g_1384 (
                                                                    0 <= j_1040)
                                                                    e_1038
                                                                    a_1039
                                                                    j_1040
                                                                    k_g_1226)
    g_1037 e_1038 a_1039 j_1040 k_g_1226 | (not (j_1040 < e_1038)) = (
    k_g_1226 ())
    k_g_u_1232 e_1038 j_1040 a_1039 k_g_1226 b_1244 | b_1244 = (k_g_u_1243 e_1038
                                                                    j_1040
                                                                    a_1039
                                                                    k_g_1226
                                                                    ())
    k_g_u_1232 e_1038 j_1040 a_1039 k_g_1226 b_1244 | (not b_1244) = (
    fail_1386 true
              (k_g_u_1243 e_1038
                          j_1040
                          a_1039
                          k_g_1226))
    k_g_u_1243 e_1038 j_1040 a_1039 k_g_1226 x_1229 | true = (a_1039
                                                                j_1040
                                                                (f_k_g_u_1381 e_1038
                                                                    j_1040
                                                                    x_1229
                                                                    a_1039
                                                                    k_g_1226))
    main_1041 n_1042 k_main_1331 | true = (g_1037 n_1042
                                                  ar_1120
                                                  0
                                                  k_main_1331)
    update_1119 a_1033 i_1034 x_1035 j_1036 k_update_1180 | (j_1036 = i_1034) = (
    k_update_1180 x_1035)
    update_1119 a_1033 i_1034 x_1035 j_1036 k_update_1180 | (not (j_1036 = i_1034)) = (
    a_1033 j_1036
           k_update_1180)
    main_1380:X
    ar_1120:int -> (int -> X) -> X
    br_g_1384:bool -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1382:int -> X
    f_1383:int -> unit -> X
    f_k_g_u_1381:int -> int -> unit -> (int -> (int -> X) -> X) -> (unit -> X) -> int -> X
    fail_1386:bool -> (unit -> X) -> X
    g_1037:int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    k_g_u_1232:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> bool -> X
    k_g_u_1243:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> unit -> X
    main_1041:int -> (unit -> X) -> X
    update_1119:(int -> (int -> X) -> X) -> int -> int -> int -> (int -> X) -> X
  inlined functions: ar_1120,br_g_1384,f_1382,f_1383,f_k_g_u_1381,k_g_u_1232,k_g_u_1243,main_1041,update_1119
  counterexample: 0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1382@4:0> = var2)
     [true.(<main_1041@6:0> = <f_1382@4:0>)
      [true.((<g_1037@8:0> = <main_1041@6:0>) && (<g_1037@8:2> = 0))
       [(<g_1037@8:2> < <g_1037@8:0>).
        ((<br_g_1384@11:0> = (0 <= <g_1037@8:2>)) &&
         ((<br_g_1384@11:1> = <g_1037@8:0>) && (<br_g_1384@11:3> = <g_1037@8:2>)))
        [(not <br_g_1384@11:0>).
         ((<k_g_u_1232@14:0> = <br_g_1384@11:1>) &&
          ((<k_g_u_1232@14:1> = <br_g_1384@11:3>) && (<k_g_u_1232@14:4> = false)))
         [(not <k_g_u_1232@14:4>).(<fail_1386@17:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(151)[2]
    horn clauses:
      P[<fail_1386@17:0>](<fail_1386@17:0>:bool)|- bot
      
      P[<k_g_u_1232@14:4>](<k_g_u_1232@14:0>:int,<k_g_u_1232@14:1>:int,false:bool), <fail_1386@17:0>
      |- P[<fail_1386@17:0>](<fail_1386@17:0>:bool)
      
      P[<br_g_1384@11:3>](false:bool,<k_g_u_1232@14:0>:int,<k_g_u_1232@14:1>:int), (
      not <k_g_u_1232@14:4>)
      |- P[<k_g_u_1232@14:4>](<k_g_u_1232@14:0>:int,<k_g_u_1232@14:1>:int,
                              <k_g_u_1232@14:4>:bool)
      
      P[<g_1037@8:2>](<br_g_1384@11:1>:int,<br_g_1384@11:3>:int),
      ((<br_g_1384@11:3> < <br_g_1384@11:1>) && (<br_g_1384@11:0> = (0 <= <br_g_1384@11:3>)))
      |- P[<br_g_1384@11:3>](<br_g_1384@11:0>:bool,<br_g_1384@11:1>:int,
                             <br_g_1384@11:3>:int)
      
      P[<main_1041@6:0>](<g_1037@8:0>:int), (<g_1037@8:2> = 0) |- P[<g_1037@8:2>](<g_1037@8:0>:int,
                                                                    <g_1037@8:2>:int)
      
      P[<f_1382@4:0>](<main_1041@6:0>:int)|- P[<main_1041@6:0>](<main_1041@6:0>:int)
      
      |- P[<f_1382@4:0>](<f_1382@4:0>:int)
    call trees:
      <main_1380@1>
        <f_1382@4>
          <main_1041@6>
            <g_1037@8>
              <br_g_1384@11>
                <k_g_u_1232@14>
                  <fail_1386@17>
    inlined horn clauses:
      P[<fail_1386@17:0>](<fail_1386@17:0>:bool)|- bot
      
      P[<g_1037@8:2>](<k_g_u_1232@14:0>:int,<k_g_u_1232@14:1>:int),
      ((<k_g_u_1232@14:1> < <k_g_u_1232@14:0>) && ((0 > <k_g_u_1232@14:1>) && <fail_1386@17:0>))
      |- P[<fail_1386@17:0>](<fail_1386@17:0>:bool)
      
       (<g_1037@8:2> = 0) |- P[<g_1037@8:2>](<g_1037@8:0>:int,<g_1037@8:2>:int)
    begin ParamSubstInfer.infer(1187)[3]
      
    end ParamSubstInfer.infer(1187)[3] (0.021997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1189)[3]
      
    end RefTypeInfer.elim_coeffs(1189)[3] (0.002000 sec.)
    begin YhornInterface.solve(1348)[3]
      begin HcSolver.solve_ub(1349)[4]
        encoded:
          P[<fail_1386@17:0>](<fail_1386@17:0>:int)|- bot
          
          P[<g_1037@8:2>](<k_g_u_1232@14:0>:int,<k_g_u_1232@14:1>:int),
          ((<k_g_u_1232@14:1> < <k_g_u_1232@14:0>) && ((0 > <k_g_u_1232@14:1>) && (<fail_1386@17:0> = 1)))
          |- P[<fail_1386@17:0>](<fail_1386@17:0>:int)
          
           (<g_1037@8:2> = 0) |- P[<g_1037@8:2>](<g_1037@8:0>:int,<g_1037@8:2>:int)
        input to Yhorn:
          P[<fail_1386@17:0>](<fail_1386@17:0>:int)|- bot
          
          P[<g_1037@8:2>](<k_g_u_1232@14:0>:int,<k_g_u_1232@14:1>:int),
          ((0 > <k_g_u_1232@14:1>) && ((<k_g_u_1232@14:1> < <k_g_u_1232@14:0>) && (<fail_1386@17:0> = 1)))
          |- P[<fail_1386@17:0>](<fail_1386@17:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1386_sep_17_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-$8<0) & (-$7>0)) & (v_sep_g_1037_sep_8_sep_2($8,$7)) -> v_sep_fail_1386_sep_17_sep_0($6).
$9=0 -> v_sep_g_1037_sep_8_sep_2($10,$9).


v_sep_fail_1386_sep_17_sep_0: X
v_sep_g_1037_sep_8_sep_2: X
...
v_sep_fail_1386_sep_17_sep_0: X
v_sep_g_1037_sep_8_sep_2: X
...
v_sep_fail_1386_sep_17_sep_0: X
v_sep_g_1037_sep_8_sep_2: X
...(0=0) & (v_sep_fail_1386_sep_17_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-$8<0) & (-$7>0)) & (v_sep_g_1037_sep_8_sep_2($8,$7)) -> v_sep_fail_1386_sep_17_sep_0($6).
$9=0 -> v_sep_g_1037_sep_8_sep_2($10,$9).

           (<g_1037@8:2> = 0) |- P[<g_1037@8:2>](<g_1037@8:0>:int,<g_1037@8:2>:int)
        solution:
          P[<fail_1386@17:0>]($11:bool) = false
          P[<g_1037@8:2>]($14:int,$16:int) = (0 <= $16)
        
      end HcSolver.solve_ub(1349)[4] (0.007999 sec.)
      begin HcSolver.check_validity(1457)[4]
        input:
          P[<fail_1386@17:0>](<fail_1386@17:0>:bool)|- bot
          
          P[<g_1037@8:2>](<k_g_u_1232@14:0>:int,<k_g_u_1232@14:1>:int),
          ((<k_g_u_1232@14:1> < <k_g_u_1232@14:0>) && ((0 > <k_g_u_1232@14:1>) && <fail_1386@17:0>))
          |- P[<fail_1386@17:0>](<fail_1386@17:0>:bool)
          
           (<g_1037@8:2> = 0) |- P[<g_1037@8:2>](<g_1037@8:0>:int,<g_1037@8:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1457)[4] (0.006999 sec.)
      solution:
        P[<fail_1386@17:0>]($11:bool) = false
        P[<g_1037@8:2>]($14:int,$16:int) = (0 <= $16)
    end YhornInterface.solve(1348)[3] (0.014998 sec.)
    
  end RefTypeInfer.infer_etrs(151)[2] (0.044993 sec.)
  refinement types:
    main_1380: X
    f_1382: v1:int -> X
    main_1041: v1:int -> (v2:unit -> X) -> X
    g_1037: v1:int -> (v2:int -> (v3:int -> X) -> X) -> v6:{v6:int | (0 <= v6)} -> (v7:unit -> X) -> X
    br_g_1384: v1:bool -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> (v8:unit -> X) -> X
    k_g_u_1232: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> (v7:unit -> X) -> v9:bool -> X
    fail_1386: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    ar_1120: var28:int -> (var27:int -> X) -> X
    f_1383: var31:int -> var30:unit -> X
    f_k_g_u_1381: var42:int ->
                  var41:int ->
                  var40:unit -> (var39:int -> (var38:int -> X) -> X) -> (var35:unit -> X) -> var33:int -> X
    k_g_u_1243: var52:int -> var51:int -> (var50:int -> (var49:int -> X) -> X) -> (var46:unit -> X) -> var44:unit -> X
    update_1119: (var62:int -> (var61:int -> X) -> X) -> var58:int -> var57:int -> var56:int -> (var55:int -> X) -> X
  abstraction types:
    main_1380: X
    f_1382: v1:int -> X
    main_1041: v1:int -> (v2:unit -> X) -> X
    g_1037: v1:int -> (v2:int -> (v3:int -> X) -> X) -> v6:int[v6 -> (
                                                               0 <= v6)] -> (v7:unit -> X) -> X
    br_g_1384: v1:bool -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> (v8:unit -> X) -> X
    k_g_u_1232: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> (v7:unit -> X) -> v9:bool -> X
    fail_1386: v1:bool -> (v2:unit -> X) -> X
    ar_1120: var28:int -> (var27:int -> X) -> X
    f_1383: var31:int -> var30:unit -> X
    f_k_g_u_1381: var42:int ->
                  var41:int ->
                  var40:unit -> (var39:int -> (var38:int -> X) -> X) -> (var35:unit -> X) -> var33:int -> X
    k_g_u_1243: var52:int -> var51:int -> (var50:int -> (var49:int -> X) -> X) -> (var46:unit -> X) -> var44:unit -> X
    update_1119: (var62:int -> (var61:int -> X) -> X) -> var58:int -> var57:int -> var56:int -> (var55:int -> X) -> X
  
end AbsTypeInfer.refine(150)[1] (0.048993 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1380
  main_1380 -> (rand_int f_1382)
  ar_1120 i_1031 k_ar_1145 -> (k_ar_1145 0)
  br_g_1384 b_1385 e_1038 a_1039 j_1040 k_g_1226 when b_1385 ->
      (k_g_u_1232 e_1038 j_1040 a_1039 k_g_1226 (j_1040 < e_1038))
  br_g_1384 b_1385 e_1038 a_1039 j_1040 k_g_1226 when (not b_1385) -> (k_g_u_1232 e_1038 j_1040 a_1039 k_g_1226 false)
  f_1382 x_1355 -> (main_1041 x_1355 (f_1383 x_1355))
  f_1383 x_1355 x_1352 -> end
  f_k_g_u_1381 e_1038 j_1040 x_1229 a_1039 k_g_1226 x_1267 ->
      (g_1037 e_1038 (update_1119 a_1039 j_1040 (x_1267 + 1)) (j_1040 + 1) k_g_1226)
  fail_1386 b k -> {fail} => (k ())
  g_1037 e_1038 a_1039 j_1040 k_g_1226 when (j_1040 < e_1038) ->
      (br_g_1384 (0 <= j_1040) e_1038 a_1039 j_1040 k_g_1226)
  g_1037 e_1038 a_1039 j_1040 k_g_1226 when (not (j_1040 < e_1038)) -> (k_g_1226 ())
  k_g_u_1232 e_1038 j_1040 a_1039 k_g_1226 b_1244 when b_1244 -> (k_g_u_1243 e_1038 j_1040 a_1039 k_g_1226 ())
  k_g_u_1232 e_1038 j_1040 a_1039 k_g_1226 b_1244 when (not b_1244) ->
      (fail_1386 true (k_g_u_1243 e_1038 j_1040 a_1039 k_g_1226))
  k_g_u_1243 e_1038 j_1040 a_1039 k_g_1226 x_1229 ->
      (a_1039 j_1040 (f_k_g_u_1381 e_1038 j_1040 x_1229 a_1039 k_g_1226))
  main_1041 n_1042 k_main_1331 -> (g_1037 n_1042 ar_1120 0 k_main_1331)
  update_1119 a_1033 i_1034 x_1035 j_1036 k_update_1180 when (j_1036 = i_1034) -> (k_update_1180 x_1035)
  update_1119 a_1033 i_1034 x_1035 j_1036 k_update_1180 when (not (j_1036 = i_1034)) -> (a_1033 j_1036 k_update_1180)
Types:
  main_1380 : X
  fail_1386 : (x_1:bool[x_1] -> (unit -> X) -> X)
  g_1037 : (int -> (int -> (int -> X) -> X) -> x_8:int[x_8 >= 0] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  g: (int -> ((int -> int) -> ({x_3:int | x_3 >= 0} -> unit)))

cycles: 1
total: 0.315 sec
  abst: 0.009 sec
  mc: 0.024 sec
  refine: 0.056 sec
    exparam: 0.022 sec
