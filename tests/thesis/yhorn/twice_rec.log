MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn twice_rec.ml

parsed::
 let twice_1030 f_1031 x_1032 = f_1031 (f_1031 x_1032) 
 in
 let rec g_1033 x_1034 = if x_1034 <= 0 then
                           1
                         else
                           2 + g_1033 (x_1034 - 1) 
 in
 let main_1035 n_1036 = if twice_1030 g_1033 n_1036 = 0 then
                          ()
                        else
                          {fail} () 
 in
   ()

set_target::
 let twice_1030 f_1031 x_1032 = f_1031 (f_1031 x_1032) 
 in
 let rec g_1033 x_1034 = if x_1034 <= 0 then
                           1
                         else
                           2 + g_1033 (x_1034 - 1) 
 in
 let main_1035 n_1036 = if twice_1030 g_1033 n_1036 = 0 then
                          ()
                        else
                          {fail} () 
 in
 let main_1064 = let arg1_1063 = rand_int () 
                 in
                   main_1035 arg1_1063 
 in
   ()

copy_poly::
 let twice_1065 (f_1031:(int -> int)) (x_1032:int) = f_1031 (f_1031 x_1032) 
 in
 let rec g_1033 (x_1034:int) = if x_1034 <= 0 then
                                 1
                               else
                                 2 + g_1033 (x_1034 - 1) 
 in
 let main_1035 (n_1036:int) = if twice_1065 g_1033 n_1036 = 0 then
                                ()
                              else
                                {fail} () 
 in
 let main_1064 = let arg1_1063 = rand_int () 
                 in
                   main_1035 arg1_1063 
 in
   ()

CPS::
 let twice_1065 (f_1031:(int -> ((int -> X) -> X))) (x_1032:int) (k_twice_1105:(
   int -> X)) = f_1031 x_1032 (fun x_1125 -> f_1031 x_1125 k_twice_1105) 
 in
 let rec g_1033 (x_1034:int) (k_g_1139:(int -> X)) =
   if x_1034 <= 0 then
     k_g_1139 1
   else
     g_1033 (x_1034 - 1) (fun x_1143 -> k_g_1139 (2 + x_1143)) 
 in
 let main_1035 (n_1036:int) (k_main_1171:(unit -> X)) =
   twice_1065 g_1033 n_1036 (fun x_1174 -> (if x_1174 = 0 then
                                              k_main_1171 ()
                                            else
                                              {|fail|} () k_main_1171)) 
 in
   rand_int_cps () (fun x_1209 -> main_1035 x_1209 (fun x_1206 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1234
  main_1234 -> (rand_int f_1238)
  f_1238 x_1209 -> (main_1035 x_1209 (f_1239 x_1209))
  f_1239 x_1209 x_1206 -> end
  f_g_1236 x_1034 k_g_1139 x_1143 -> (k_g_1139 (2 + x_1143))
  f_main_1237 n_1036 k_main_1171 x_1174 when (x_1174 = 0) -> (k_main_1171 ())
  f_main_1237 n_1036 k_main_1171 x_1174 when (not (x_1174 = 0)) -> (fail_1240 true k_main_1171)
  f_twice_1235 x_1032 f_1031 k_twice_1105 x_1125 -> (f_1031 x_1125 k_twice_1105)
  fail_1240 b k -> {fail} => (k ())
  g_1033 x_1034 k_g_1139 when (x_1034 <= 0) -> (k_g_1139 1)
  g_1033 x_1034 k_g_1139 when (not (x_1034 <= 0)) -> (g_1033 (x_1034 - 1) (f_g_1236 x_1034 k_g_1139))
  main_1035 n_1036 k_main_1171 -> (twice_1065 g_1033 n_1036 (f_main_1237 n_1036 k_main_1171))
  twice_1065 f_1031 x_1032 k_twice_1105 -> (f_1031 x_1032 (f_twice_1235 x_1032 f_1031 k_twice_1105))
Types:
  main_1234 : X
  fail_1240 : (x_1:bool[x_1] -> (unit -> X) -> X)
  g_1033 : (int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1234 ... --> 
  f_1238 ... --> 
  main_1035 ... --> 
  twice_1065 ... --> 
  g_1033 [1/2] ... --> 
  f_twice_1235 ... --> 
  g_1033 [1/2] ... --> 
  f_main_1237 [2/2] ... --> 
  fail_1240 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(104)[1]
  program:
    main_1234  | true = ((Random.int 0) f_1238)
    f_1238 x_1209 | true = (main_1035 x_1209
                                      (f_1239 x_1209))
    f_1239 x_1209 x_1206 | true = end
    f_g_1236 x_1034 k_g_1139 x_1143 | true = (k_g_1139 (2 + x_1143))
    f_main_1237 n_1036 k_main_1171 x_1174 | (x_1174 = 0) = (k_main_1171 ())
    f_main_1237 n_1036 k_main_1171 x_1174 | (not (x_1174 = 0)) = (fail_1240 true
                                                                    k_main_1171)
    f_twice_1235 x_1032 f_1031 k_twice_1105 x_1125 | true = (f_1031 x_1125
                                                                    k_twice_1105)
    fail_1240 b k | true = (fail ())
    g_1033 x_1034 k_g_1139 | (x_1034 <= 0) = (k_g_1139 1)
    g_1033 x_1034 k_g_1139 | (not (x_1034 <= 0)) = (g_1033 (x_1034 - 1)
                                                           (f_g_1236 x_1034
                                                                    k_g_1139))
    main_1035 n_1036 k_main_1171 | true = (twice_1065 g_1033
                                                      n_1036
                                                      (f_main_1237 n_1036
                                                                   k_main_1171))
    twice_1065 f_1031 x_1032 k_twice_1105 | true = (f_1031 x_1032
                                                           (f_twice_1235 x_1032
                                                                    f_1031
                                                                    k_twice_1105))
    main_1234:X
    f_1238:int -> X
    f_1239:int -> unit -> X
    f_g_1236:int -> (int -> X) -> int -> X
    f_main_1237:int -> (unit -> X) -> int -> X
    f_twice_1235:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    fail_1240:bool -> (unit -> X) -> X
    g_1033:int -> (int -> X) -> X
    main_1035:int -> (unit -> X) -> X
    twice_1065:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
  inlined functions: f_1238,f_1239,f_g_1236,f_main_1237,f_twice_1235,main_1035,twice_1065
  counterexample: 0:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1238@4:0> = var2)
     [true.(<main_1035@6:0> = <f_1238@4:0>)
      [true.(<twice_1065@8:1> = <main_1035@6:0>)
       [true.(<<twice_1065@8:0>@10:0> = <twice_1065@8:1>)
        [true.(<g_1033@12:0> = <<twice_1065@8:0>@10:0>)
         [(<g_1033@12:0> <= 0).(<<g_1033@12:1>@15:0> = 1)
          [true.(<<<twice_1065@8:0>@10:1>@17:0> = <<g_1033@12:1>@15:0>)
           [true.((<f_twice_1235@19:0> = <twice_1065@8:1>) && (<f_twice_1235@19:3> = <<<twice_1065@8:0>@10:1>@17:0>))
            [true.(<<f_twice_1235@19:1>@21:0> = <f_twice_1235@19:3>)
             [true.(<<twice_1065@8:0>@23:0> = <<f_twice_1235@19:1>@21:0>)
              [true.(<g_1033@25:0> = <<twice_1065@8:0>@23:0>)
               [(<g_1033@25:0> <= 0).(<<g_1033@25:1>@28:0> = 1)
                [true.(<<<twice_1065@8:0>@23:1>@30:0> = <<g_1033@25:1>@28:0>)
                 [true.(<<<f_twice_1235@19:1>@21:1>@32:0> = <<<twice_1065@8:0>@23:1>@30:0>)
                  [true.(<<f_twice_1235@19:2>@34:0> = <<<f_twice_1235@19:1>@21:1>@32:0>)
                   [true.(<<twice_1065@8:2>@36:0> = <<f_twice_1235@19:2>@34:0>)
                    [true.((<f_main_1237@38:0> = <main_1035@6:0>) && (<f_main_1237@38:2> = <<twice_1065@8:2>@36:0>))
                     [(not (<f_main_1237@38:2> = 0)).(<fail_1240@41:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(105)[2]
    horn clauses:
      P[<fail_1240@41:0>](<fail_1240@41:0>:bool)|- bot
      
      P[<f_main_1237@38:2>](<f_main_1237@38:0>:int,<f_main_1237@38:2>:int),
      ((<f_main_1237@38:2> <> 0) && <fail_1240@41:0>) |- P[<fail_1240@41:0>](
      <fail_1240@41:0>:bool)
      
      P[<main_1035@6:0>](<f_main_1237@38:0>:int),
      P[<<twice_1065@8:2>@36:0>](<f_main_1237@38:0>:int,<f_main_1237@38:2>:int)|- P[<f_main_1237@38:2>](
      <f_main_1237@38:0>:int,<f_main_1237@38:2>:int)
      
      P[<twice_1065@8:1>](<twice_1065@8:1>:int),
      P[<<f_twice_1235@19:2>@34:0>](<twice_1065@8:1>:int,<<twice_1065@8:2>@36:0>:int)|- P[<<twice_1065@8:2>@36:0>](
      <twice_1065@8:1>:int,<<twice_1065@8:2>@36:0>:int)
      
      P[<f_twice_1235@19:3>](<f_twice_1235@19:0>:int,<<f_twice_1235@19:1>@21:0>:int),
      P[<<<f_twice_1235@19:1>@21:1>@32:0>](<f_twice_1235@19:0>:int,<<f_twice_1235@19:1>@21:0>:int,<<f_twice_1235@19:2>@34:0>:int)|- P[<<f_twice_1235@19:2>@34:0>](
      <f_twice_1235@19:0>:int,<<f_twice_1235@19:2>@34:0>:int)
      
      P[<twice_1065@8:1>](<f_twice_1235@19:0>:int),
      P[<<<twice_1065@8:0>@23:1>@30:0>](<<f_twice_1235@19:1>@21:0>:int,<<<f_twice_1235@19:1>@21:1>@32:0>:int)|- P[<<<f_twice_1235@19:1>@21:1>@32:0>](
      <f_twice_1235@19:0>:int,<<f_twice_1235@19:1>@21:0>:int,<<<f_twice_1235@19:1>@21:1>@32:0>:int)
      
      P[<main_1035@6:0>](<twice_1065@8:1>:int),
      P[<<g_1033@25:1>@28:0>](<<twice_1065@8:0>@23:0>:int,<<<twice_1065@8:0>@23:1>@30:0>:int)|- P[<<<twice_1065@8:0>@23:1>@30:0>](
      <<twice_1065@8:0>@23:0>:int,<<<twice_1065@8:0>@23:1>@30:0>:int)
      
      P[<g_1033@25:0>](<g_1033@25:0>:int), ((<<g_1033@25:1>@28:0> = 1) && (<g_1033@25:0> <= 0))
      |- P[<<g_1033@25:1>@28:0>](<g_1033@25:0>:int,<<g_1033@25:1>@28:0>:int)
      
      P[<main_1035@6:0>](<twice_1065@8:1>:int),
      P[<<twice_1065@8:0>@23:0>](<g_1033@25:0>:int)|- P[<g_1033@25:0>](
      <g_1033@25:0>:int)
      
      P[<twice_1065@8:1>](<<twice_1065@8:0>@10:0>:int),
      P[<<f_twice_1235@19:1>@21:0>](<<twice_1065@8:0>@10:0>:int,<<twice_1065@8:0>@23:0>:int)|- P[<<twice_1065@8:0>@23:0>](
      <<twice_1065@8:0>@23:0>:int)
      
      P[<f_twice_1235@19:3>](<f_twice_1235@19:0>:int,<<f_twice_1235@19:1>@21:0>:int)|- P[<<f_twice_1235@19:1>@21:0>](
      <f_twice_1235@19:0>:int,<<f_twice_1235@19:1>@21:0>:int)
      
      P[<twice_1065@8:1>](<f_twice_1235@19:0>:int),
      P[<<<twice_1065@8:0>@10:1>@17:0>](<f_twice_1235@19:0>:int,<f_twice_1235@19:3>:int)|- P[<f_twice_1235@19:3>](
      <f_twice_1235@19:0>:int,<f_twice_1235@19:3>:int)
      
      P[<main_1035@6:0>](<twice_1065@8:1>:int),
      P[<<g_1033@12:1>@15:0>](<<twice_1065@8:0>@10:0>:int,<<<twice_1065@8:0>@10:1>@17:0>:int)|- P[<<<twice_1065@8:0>@10:1>@17:0>](
      <<twice_1065@8:0>@10:0>:int,<<<twice_1065@8:0>@10:1>@17:0>:int)
      
      P[<g_1033@12:0>](<g_1033@12:0>:int), ((<<g_1033@12:1>@15:0> = 1) && (<g_1033@12:0> <= 0))
      |- P[<<g_1033@12:1>@15:0>](<g_1033@12:0>:int,<<g_1033@12:1>@15:0>:int)
      
      P[<main_1035@6:0>](<twice_1065@8:1>:int),
      P[<<twice_1065@8:0>@10:0>](<g_1033@12:0>:int)|- P[<g_1033@12:0>](
      <g_1033@12:0>:int)
      
      P[<twice_1065@8:1>](<<twice_1065@8:0>@10:0>:int)|- P[<<twice_1065@8:0>@10:0>](<<twice_1065@8:0>@10:0>:int)
      
      P[<main_1035@6:0>](<twice_1065@8:1>:int)|- P[<twice_1065@8:1>](<twice_1065@8:1>:int)
      
      P[<f_1238@4:0>](<main_1035@6:0>:int)|- P[<main_1035@6:0>](<main_1035@6:0>:int)
      
      |- P[<f_1238@4:0>](<f_1238@4:0>:int)
    call trees:
      <main_1234@1>
        <f_1238@4>
          <main_1035@6>
            <twice_1065@8>
            </<twice_1065@8:0>@10>
            <g_1033@12>
            </<g_1033@12:1>@15>
            <<<twice_1065@8:0>@10:1>@17>
              <f_twice_1235@19>
              </<f_twice_1235@19:1>@21>
            </<twice_1065@8:0>@23>
            <g_1033@25>
            </<g_1033@25:1>@28>
            <<<twice_1065@8:0>@23:1>@30>
              <<<f_twice_1235@19:1>@21:1>@32>
              </<f_twice_1235@19:2>@34>
            </<twice_1065@8:2>@36>
            <f_main_1237@38>
              <fail_1240@41>
    inlined horn clauses:
      P[<fail_1240@41:0>](<fail_1240@41:0>:bool)|- bot
      
      P[<<g_1033@12:1>@15:0>](<f_main_1237@38:0>:int,var5:int),
      P[<<g_1033@25:1>@28:0>](var5:int,<f_main_1237@38:2>:int), ((<f_main_1237@38:2> <> 0) && <fail_1240@41:0>)
      |- P[<fail_1240@41:0>](<fail_1240@41:0>:bool)
      
      P[<g_1033@25:0>](<g_1033@25:0>:int), ((<<g_1033@25:1>@28:0> = 1) && (<g_1033@25:0> <= 0))
      |- P[<<g_1033@25:1>@28:0>](<g_1033@25:0>:int,<<g_1033@25:1>@28:0>:int)
      
      P[<<g_1033@12:1>@15:0>](var6:int,<g_1033@25:0>:int)|- P[<g_1033@25:0>](<g_1033@25:0>:int)
      
      P[<g_1033@12:0>](<g_1033@12:0>:int), ((<<g_1033@12:1>@15:0> = 1) && (<g_1033@12:0> <= 0))
      |- P[<<g_1033@12:1>@15:0>](<g_1033@12:0>:int,<<g_1033@12:1>@15:0>:int)
      
      |- P[<g_1033@12:0>](<g_1033@12:0>:int)
    begin ParamSubstInfer.infer(1774)[3]
      
    end ParamSubstInfer.infer(1774)[3] (0.013998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1776)[3]
      
    end RefTypeInfer.elim_coeffs(1776)[3] (0.001000 sec.)
    begin YhornInterface.solve(2003)[3]
      begin HcSolver.solve_ub(2004)[4]
        encoded:
          P[<fail_1240@41:0>](<fail_1240@41:0>:int)|- bot
          
          P[<<g_1033@12:1>@15:0>](<f_main_1237@38:0>:int,var5:int),
          P[<<g_1033@25:1>@28:0>](var5:int,<f_main_1237@38:2>:int),
          ((<f_main_1237@38:2> <> 0) && (<fail_1240@41:0> = 1)) |- P[<fail_1240@41:0>](
          <fail_1240@41:0>:int)
          
          P[<g_1033@25:0>](<g_1033@25:0>:int), ((<<g_1033@25:1>@28:0> = 1) && (<g_1033@25:0> <= 0))
          |- P[<<g_1033@25:1>@28:0>](<g_1033@25:0>:int,<<g_1033@25:1>@28:0>:int)
          
          P[<<g_1033@12:1>@15:0>](var6:int,<g_1033@25:0>:int)|- P[<g_1033@25:0>](<g_1033@25:0>:int)
          
          P[<g_1033@12:0>](<g_1033@12:0>:int), ((<<g_1033@12:1>@15:0> = 1) && (<g_1033@12:0> <= 0))
          |- P[<<g_1033@12:1>@15:0>](<g_1033@12:0>:int,<<g_1033@12:1>@15:0>:int)
          
          |- P[<g_1033@12:0>](<g_1033@12:0>:int)
        input to Yhorn:
          P[<fail_1240@41:0>](<fail_1240@41:0>:int)|- bot
          
          P[<<g_1033@12:1>@15:0>](<f_main_1237@38:0>:int,var5:int),
          P[<<g_1033@25:1>@28:0>](var5:int,<f_main_1237@38:2>:int),
          ((<f_main_1237@38:2> <> 0) && (<fail_1240@41:0> = 1)) |- P[<fail_1240@41:0>](
          <fail_1240@41:0>:int)
          
          P[<g_1033@25:0>](<g_1033@25:0>:int), ((<g_1033@25:0> <= 0) && (<<g_1033@25:1>@28:0> = 1))
          |- P[<<g_1033@25:1>@28:0>](<g_1033@25:0>:int,<<g_1033@25:1>@28:0>:int)
          
          P[<<g_1033@12:1>@15:0>](var6:int,<g_1033@25:0>:int)|- P[<g_1033@25:0>](<g_1033@25:0>:int)
          
          P[<g_1033@12:0>](<g_1033@12:0>:int), ((<g_1033@12:0> <= 0) && (<<g_1033@12:1>@15:0> = 1))
          |- P[<<g_1033@12:1>@15:0>](<g_1033@12:0>:int,<<g_1033@12:1>@15:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1240_sep_41_sep_0($10)) -> 1=0.
(($10-1=0) & ($11<>0)) & (v_sep_g_1033_sep_25_sep_1_sep_28_sep_0($12,$11)) & (v_sep_g_1033_sep_12_sep_1_sep_15_sep_0($13,$12)) -> v_sep_fail_1240_sep_41_sep_0($10).
(($14-1=0) & ($15<=0)) & (v_sep_g_1033_sep_25_sep_0($15)) -> v_sep_g_1033_sep_25_sep_1_sep_28_sep_0($15,$14).
(0=0) & (v_sep_g_1033_sep_12_sep_1_sep_15_sep_0($16,$15)) -> v_sep_g_1033_sep_25_sep_0($15).
(($17-1=0) & ($18<=0)) & (v_sep_g_1033_sep_12_sep_0($18)) -> v_sep_g_1033_sep_12_sep_1_sep_15_sep_0($18,$17).
0=0 -> v_sep_g_1033_sep_12_sep_0($18).


v_sep_fail_1240_sep_41_sep_0: X
v_sep_g_1033_sep_12_sep_0: X
v_sep_g_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_g_1033_sep_25_sep_0: X
v_sep_g_1033_sep_25_sep_1_sep_28_sep_0: X
.........
v_sep_fail_1240_sep_41_sep_0: X
v_sep_g_1033_sep_12_sep_0: X
v_sep_g_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_g_1033_sep_25_sep_0: X
v_sep_g_1033_sep_25_sep_1_sep_28_sep_0: X
......
v_sep_fail_1240_sep_41_sep_0: X
v_sep_g_1033_sep_12_sep_0: X
v_sep_g_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_g_1033_sep_25_sep_0: X
v_sep_g_1033_sep_25_sep_1_sep_28_sep_0: X
........
v_sep_fail_1240_sep_41_sep_0: X
v_sep_g_1033_sep_12_sep_0: X
v_sep_g_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_g_1033_sep_25_sep_0: X
v_sep_g_1033_sep_25_sep_1_sep_28_sep_0: X
.........(0=0) & (v_sep_fail_1240_sep_41_sep_0($10)) -> 1=0.
(($10-1=0) & ($11<>0)) & (v_sep_g_1033_sep_25_sep_1_sep_28_sep_0($12,$11)) & (v_sep_g_1033_sep_12_sep_1_sep_15_sep_0($13,$12)) -> v_sep_fail_1240_sep_41_sep_0($10).
(($14-1=0) & ($15<=0)) & (v_sep_g_1033_sep_25_sep_0($15)) -> v_sep_g_1033_sep_25_sep_1_sep_28_sep_0($15,$14).
(0=0) & (v_sep_g_1033_sep_12_sep_1_sep_15_sep_0($16,$15)) -> v_sep_g_1033_sep_25_sep_0($15).
(($17-1=0) & ($18<=0)) & (v_sep_g_1033_sep_12_sep_0($18)) -> v_sep_g_1033_sep_12_sep_1_sep_15_sep_0($18,$17).
0=0 -> v_sep_g_1033_sep_12_sep_0($18).

          |- P[<g_1033@12:0>](<g_1033@12:0>:int)
        solution:
          P[<fail_1240@41:0>]($19:bool) = false
          P[<g_1033@12:0>]($35:int) = true
          P[<<g_1033@12:1>@15:0>]($27:int,$29:int) = (1 <= $29)
          P[<g_1033@25:0>]($32:int) = (1 <= $32)
          P[<<g_1033@25:1>@28:0>]($22:int,$24:int) = ((1 + $22) <= 0)
        
      end HcSolver.solve_ub(2004)[4] (0.023996 sec.)
      begin HcSolver.check_validity(2162)[4]
        input:
          P[<fail_1240@41:0>](<fail_1240@41:0>:bool)|- bot
          
          P[<<g_1033@12:1>@15:0>](<f_main_1237@38:0>:int,var5:int),
          P[<<g_1033@25:1>@28:0>](var5:int,<f_main_1237@38:2>:int), (
          (<f_main_1237@38:2> <> 0) && <fail_1240@41:0>) |- P[<fail_1240@41:0>](
          <fail_1240@41:0>:bool)
          
          P[<g_1033@25:0>](<g_1033@25:0>:int), ((<<g_1033@25:1>@28:0> = 1) && (<g_1033@25:0> <= 0))
          |- P[<<g_1033@25:1>@28:0>](<g_1033@25:0>:int,<<g_1033@25:1>@28:0>:int)
          
          P[<<g_1033@12:1>@15:0>](var6:int,<g_1033@25:0>:int)|- P[<g_1033@25:0>](<g_1033@25:0>:int)
          
          P[<g_1033@12:0>](<g_1033@12:0>:int), ((<<g_1033@12:1>@15:0> = 1) && (<g_1033@12:0> <= 0))
          |- P[<<g_1033@12:1>@15:0>](<g_1033@12:0>:int,<<g_1033@12:1>@15:0>:int)
          
          |- P[<g_1033@12:0>](<g_1033@12:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(2162)[4] (0.001000 sec.)
      solution:
        P[<fail_1240@41:0>]($19:bool) = false
        P[<g_1033@12:0>]($35:int) = true
        P[<<g_1033@12:1>@15:0>]($27:int,$29:int) = (1 <= $29)
        P[<g_1033@25:0>]($32:int) = (1 <= $32)
        P[<<g_1033@25:1>@28:0>]($22:int,$24:int) = ((1 + $22) <= 0)
    end YhornInterface.solve(2003)[3] (0.024996 sec.)
    
  end RefTypeInfer.infer_etrs(105)[2] (0.048992 sec.)
  refinement types:
    main_1234: X
    f_1238: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    twice_1065: (v1:int -> (v2:int -> X) -> X /\
                 v5:int -> (v6:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    g_1033: v1:int -> (v2:{v2:int | (1 <= v2)} -> X) -> X
    f_twice_1235: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    g_1033: v1:{v1:int | (1 <= v1)} -> (v2:{v2:int | ((1 + v1) <= 0)} -> X) -> X
    f_main_1237: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1240: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1239: var15:int -> var14:unit -> X
    f_g_1236: var20:int -> (var19:int -> X) -> var17:int -> X
  abstraction types:
    main_1234: X
    f_1238: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    twice_1065: (var21:int -> (var22:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    g_1033: var25:int[var25 -> (1 <= var25)] ->
            (var26:int[var26 -> (1 <= var26),
                       var26 -> ((1 + var25) <= 0)] -> X) -> X
    f_twice_1235: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    f_main_1237: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1240: v1:bool -> (v2:unit -> X) -> X
    f_1239: var15:int -> var14:unit -> X
    f_g_1236: var20:int -> (var19:int -> X) -> var17:int -> X
  
end AbsTypeInfer.refine(104)[1] (0.051992 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1234
  main_1234 -> (rand_int f_1238)
  f_1238 x_1209 -> (main_1035 x_1209 (f_1239 x_1209))
  f_1239 x_1209 x_1206 -> end
  f_g_1236 x_1034 k_g_1139 x_1143 -> (k_g_1139 (2 + x_1143))
  f_main_1237 n_1036 k_main_1171 x_1174 when (x_1174 = 0) -> (k_main_1171 ())
  f_main_1237 n_1036 k_main_1171 x_1174 when (not (x_1174 = 0)) -> (fail_1240 true k_main_1171)
  f_twice_1235 x_1032 f_1031 k_twice_1105 x_1125 -> (f_1031 x_1125 k_twice_1105)
  fail_1240 b k -> {fail} => (k ())
  g_1033 x_1034 k_g_1139 when (x_1034 <= 0) -> (k_g_1139 1)
  g_1033 x_1034 k_g_1139 when (not (x_1034 <= 0)) -> (g_1033 (x_1034 - 1) (f_g_1236 x_1034 k_g_1139))
  main_1035 n_1036 k_main_1171 -> (twice_1065 g_1033 n_1036 (f_main_1237 n_1036 k_main_1171))
  twice_1065 f_1031 x_1032 k_twice_1105 -> (f_1031 x_1032 (f_twice_1235 x_1032 f_1031 k_twice_1105))
Types:
  main_1234 : X
  fail_1240 : (x_1:bool[x_1] -> (unit -> X) -> X)
  g_1033 : (x_1:int[x_1 >= 1] -> (x_3:int[x_1 <= -1; x_3 >= 1] -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1234 ... --> 
  f_1238 ... --> 
  main_1035 ... --> 
  twice_1065 ... --> 
  g_1033 [2/2] ... --> 
  g_1033 [2/2] ... --> 
  g_1033 [1/2] ... --> 
  f_g_1236 ... --> 
  f_g_1236 ... --> 
  f_twice_1235 ... --> 
  g_1033 [2/2] ... --> 
  g_1033 [2/2] ... --> 
  g_1033 [1/2] ... --> 
  f_g_1236 ... --> 
  f_g_1236 ... --> 
  f_main_1237 [2/2] ... --> 
  fail_1240 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 1; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(2954)[1]
  program:
    main_1234  | true = ((Random.int 0) f_1238)
    f_1238 x_1209 | true = (main_1035 x_1209
                                      (f_1239 x_1209))
    f_1239 x_1209 x_1206 | true = end
    f_g_1236 x_1034 k_g_1139 x_1143 | true = (k_g_1139 (2 + x_1143))
    f_main_1237 n_1036 k_main_1171 x_1174 | (x_1174 = 0) = (k_main_1171 ())
    f_main_1237 n_1036 k_main_1171 x_1174 | (not (x_1174 = 0)) = (fail_1240 true
                                                                    k_main_1171)
    f_twice_1235 x_1032 f_1031 k_twice_1105 x_1125 | true = (f_1031 x_1125
                                                                    k_twice_1105)
    fail_1240 b k | true = (fail ())
    g_1033 x_1034 k_g_1139 | (x_1034 <= 0) = (k_g_1139 1)
    g_1033 x_1034 k_g_1139 | (not (x_1034 <= 0)) = (g_1033 (x_1034 - 1)
                                                           (f_g_1236 x_1034
                                                                    k_g_1139))
    main_1035 n_1036 k_main_1171 | true = (twice_1065 g_1033
                                                      n_1036
                                                      (f_main_1237 n_1036
                                                                   k_main_1171))
    twice_1065 f_1031 x_1032 k_twice_1105 | true = (f_1031 x_1032
                                                           (f_twice_1235 x_1032
                                                                    f_1031
                                                                    k_twice_1105))
    main_1234:X
    f_1238:int -> X
    f_1239:int -> unit -> X
    f_g_1236:int -> (int -> X) -> int -> X
    f_main_1237:int -> (unit -> X) -> int -> X
    f_twice_1235:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    fail_1240:bool -> (unit -> X) -> X
    g_1033:int -> (int -> X) -> X
    main_1035:int -> (unit -> X) -> X
    twice_1065:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
  inlined functions: f_1238,f_1239,f_g_1236,f_main_1237,f_twice_1235,main_1035,twice_1065
  counterexample: 0:0:0:0:1:1:0:0:0:0:1:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1238@47:0> = var29)
     [true.(<main_1035@49:0> = <f_1238@47:0>)
      [true.(<twice_1065@51:1> = <main_1035@49:0>)
       [true.(<<twice_1065@51:0>@53:0> = <twice_1065@51:1>)
        [true.(<g_1033@55:0> = <<twice_1065@51:0>@53:0>)
         [(not (<g_1033@55:0> <= 0)).(<g_1033@58:0> = (<g_1033@55:0> - 1))
          [(not (<g_1033@58:0> <= 0)).(<g_1033@61:0> = (<g_1033@58:0> - 1))
           [(<g_1033@61:0> <= 0).(<<g_1033@61:1>@64:0> = 1)
            [true.((<f_g_1236@66:0> = <g_1033@58:0>) && (<f_g_1236@66:2> = <<g_1033@61:1>@64:0>))
             [true.(<<f_g_1236@66:1>@68:0> = (2 + <f_g_1236@66:2>))
              [true.(<<g_1033@58:1>@70:0> = <<f_g_1236@66:1>@68:0>)
               [true.((<f_g_1236@72:0> = <g_1033@55:0>) && (<f_g_1236@72:2> = <<g_1033@58:1>@70:0>))
                [true.(<<f_g_1236@72:1>@74:0> = (2 + <f_g_1236@72:2>))
                 [true.(<<g_1033@55:1>@76:0> = <<f_g_1236@72:1>@74:0>)
                  [true.(<<<twice_1065@51:0>@53:1>@78:0> = <<g_1033@55:1>@76:0>)
                   [true.
                    ((<f_twice_1235@80:0> = <twice_1065@51:1>) &&
                     (<f_twice_1235@80:3> = <<<twice_1065@51:0>@53:1>@78:0>))
                    [true.(<<f_twice_1235@80:1>@82:0> = <f_twice_1235@80:3>)
                     [true.(<<twice_1065@51:0>@84:0> = <<f_twice_1235@80:1>@82:0>)
                      [true.(<g_1033@86:0> = <<twice_1065@51:0>@84:0>)
                       [(not (<g_1033@86:0> <= 0)).(<g_1033@89:0> = (<g_1033@86:0> - 1))
                        [(not (<g_1033@89:0> <= 0)).(<g_1033@92:0> = (<g_1033@89:0> - 1))
                         [(<g_1033@92:0> <= 0).(<<g_1033@92:1>@95:0> = 1)
                          [true.((<f_g_1236@97:0> = <g_1033@89:0>) && (<f_g_1236@97:2> = <<g_1033@92:1>@95:0>))
                           [true.(<<f_g_1236@97:1>@99:0> = (2 + <f_g_1236@97:2>))
                            [true.(<<g_1033@89:1>@101:0> = <<f_g_1236@97:1>@99:0>)
                             [true.((<f_g_1236@103:0> = <g_1033@86:0>) && (<f_g_1236@103:2> = <<g_1033@89:1>@101:0>))
                              [true.(<<f_g_1236@103:1>@105:0> = (2 + <f_g_1236@103:2>))
                               [true.(<<g_1033@86:1>@107:0> = <<f_g_1236@103:1>@105:0>)
                                [true.(<<<twice_1065@51:0>@84:1>@109:0> = <<g_1033@86:1>@107:0>)
                                 [true.(<<<f_twice_1235@80:1>@82:1>@111:0> = <<<twice_1065@51:0>@84:1>@109:0>)
                                  [true.(<<f_twice_1235@80:2>@113:0> = <<<f_twice_1235@80:1>@82:1>@111:0>)
                                   [true.(<<twice_1065@51:2>@115:0> = <<f_twice_1235@80:2>@113:0>)
                                    [true.
                                     ((<f_main_1237@117:0> = <main_1035@49:0>) &&
                                      (<f_main_1237@117:2> = <<twice_1065@51:2>@115:0>))
                                     [(not (<f_main_1237@117:2> = 0)).(<fail_1240@120:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(2955)[2]
    horn clauses:
      P[<fail_1240@120:0>](<fail_1240@120:0>:bool)|- bot
      
      P[<f_main_1237@117:2>](<f_main_1237@117:0>:int,<f_main_1237@117:2>:int),
      ((<f_main_1237@117:2> <> 0) && <fail_1240@120:0>) |- P[<fail_1240@120:0>](
      <fail_1240@120:0>:bool)
      
      P[<main_1035@49:0>](<f_main_1237@117:0>:int),
      P[<<twice_1065@51:2>@115:0>](<f_main_1237@117:0>:int,<f_main_1237@117:2>:int)|- P[<f_main_1237@117:2>](
      <f_main_1237@117:0>:int,<f_main_1237@117:2>:int)
      
      P[<twice_1065@51:1>](<twice_1065@51:1>:int),
      P[<<f_twice_1235@80:2>@113:0>](<twice_1065@51:1>:int,<<twice_1065@51:2>@115:0>:int)|- P[<<twice_1065@51:2>@115:0>](
      <twice_1065@51:1>:int,<<twice_1065@51:2>@115:0>:int)
      
      P[<f_twice_1235@80:3>](<f_twice_1235@80:0>:int,<<f_twice_1235@80:1>@82:0>:int),
      P[<<<f_twice_1235@80:1>@82:1>@111:0>](<f_twice_1235@80:0>:int,<<f_twice_1235@80:1>@82:0>:int,<<f_twice_1235@80:2>@113:0>:int)|- P[<<f_twice_1235@80:2>@113:0>](
      <f_twice_1235@80:0>:int,<<f_twice_1235@80:2>@113:0>:int)
      
      P[<twice_1065@51:1>](<f_twice_1235@80:0>:int),
      P[<<<twice_1065@51:0>@84:1>@109:0>](<<f_twice_1235@80:1>@82:0>:int,<<<f_twice_1235@80:1>@82:1>@111:0>:int)|- P[<<<f_twice_1235@80:1>@82:1>@111:0>](
      <f_twice_1235@80:0>:int,<<f_twice_1235@80:1>@82:0>:int,<<<f_twice_1235@80:1>@82:1>@111:0>:int)
      
      P[<main_1035@49:0>](<twice_1065@51:1>:int),
      P[<<g_1033@86:1>@107:0>](<<twice_1065@51:0>@84:0>:int,<<<twice_1065@51:0>@84:1>@109:0>:int)|- P[<<<twice_1065@51:0>@84:1>@109:0>](
      <<twice_1065@51:0>@84:0>:int,<<<twice_1065@51:0>@84:1>@109:0>:int)
      
      P[<g_1033@86:0>](<g_1033@86:0>:int),
      P[<<f_g_1236@103:1>@105:0>](<g_1033@86:0>:int,<<g_1033@86:1>@107:0>:int), (
      <g_1033@86:0> > 0) |- P[<<g_1033@86:1>@107:0>](<g_1033@86:0>:int,
                                                     <<g_1033@86:1>@107:0>:int)
      
      P[<f_g_1236@103:2>](<f_g_1236@103:0>:int,(-2 + <<f_g_1236@103:1>@105:0>):int)|- P[<<f_g_1236@103:1>@105:0>](
      <f_g_1236@103:0>:int,<<f_g_1236@103:1>@105:0>:int)
      
      P[<g_1033@86:0>](<f_g_1236@103:0>:int),
      P[<<g_1033@89:1>@101:0>]((-1 + <f_g_1236@103:0>):int,<f_g_1236@103:2>:int), (
      <f_g_1236@103:0> > 0) |- P[<f_g_1236@103:2>](<f_g_1236@103:0>:int,
                                                   <f_g_1236@103:2>:int)
      
      P[<g_1033@89:0>](<g_1033@89:0>:int),
      P[<<f_g_1236@97:1>@99:0>](<g_1033@89:0>:int,<<g_1033@89:1>@101:0>:int), (
      <g_1033@89:0> > 0) |- P[<<g_1033@89:1>@101:0>](<g_1033@89:0>:int,
                                                     <<g_1033@89:1>@101:0>:int)
      
      P[<f_g_1236@97:2>](<f_g_1236@97:0>:int,(-2 + <<f_g_1236@97:1>@99:0>):int)|- P[<<f_g_1236@97:1>@99:0>](
      <f_g_1236@97:0>:int,<<f_g_1236@97:1>@99:0>:int)
      
      P[<g_1033@89:0>](<f_g_1236@97:0>:int),
      P[<<g_1033@92:1>@95:0>]((-1 + <f_g_1236@97:0>):int,<f_g_1236@97:2>:int), (
      <f_g_1236@97:0> > 0) |- P[<f_g_1236@97:2>](<f_g_1236@97:0>:int,
                                                 <f_g_1236@97:2>:int)
      
      P[<g_1033@92:0>](<g_1033@92:0>:int), ((<<g_1033@92:1>@95:0> = 1) && (<g_1033@92:0> <= 0))
      |- P[<<g_1033@92:1>@95:0>](<g_1033@92:0>:int,<<g_1033@92:1>@95:0>:int)
      
      P[<g_1033@89:0>]((1 + <g_1033@92:0>):int), ((1 + <g_1033@92:0>) > 0) |- P[<g_1033@92:0>](<g_1033@92:0>:int)
      
      P[<g_1033@86:0>]((1 + <g_1033@89:0>):int), ((1 + <g_1033@89:0>) > 0) |- P[<g_1033@89:0>](<g_1033@89:0>:int)
      
      P[<main_1035@49:0>](<twice_1065@51:1>:int),
      P[<<twice_1065@51:0>@84:0>](<g_1033@86:0>:int)|- P[<g_1033@86:0>](
      <g_1033@86:0>:int)
      
      P[<twice_1065@51:1>](<<twice_1065@51:0>@53:0>:int),
      P[<<f_twice_1235@80:1>@82:0>](<<twice_1065@51:0>@53:0>:int,<<twice_1065@51:0>@84:0>:int)|- P[<<twice_1065@51:0>@84:0>](
      <<twice_1065@51:0>@84:0>:int)
      
      P[<f_twice_1235@80:3>](<f_twice_1235@80:0>:int,<<f_twice_1235@80:1>@82:0>:int)|- P[<<f_twice_1235@80:1>@82:0>](
      <f_twice_1235@80:0>:int,<<f_twice_1235@80:1>@82:0>:int)
      
      P[<twice_1065@51:1>](<f_twice_1235@80:0>:int),
      P[<<<twice_1065@51:0>@53:1>@78:0>](<f_twice_1235@80:0>:int,<f_twice_1235@80:3>:int)|- P[<f_twice_1235@80:3>](
      <f_twice_1235@80:0>:int,<f_twice_1235@80:3>:int)
      
      P[<main_1035@49:0>](<twice_1065@51:1>:int),
      P[<<g_1033@55:1>@76:0>](<<twice_1065@51:0>@53:0>:int,<<<twice_1065@51:0>@53:1>@78:0>:int)|- P[<<<twice_1065@51:0>@53:1>@78:0>](
      <<twice_1065@51:0>@53:0>:int,<<<twice_1065@51:0>@53:1>@78:0>:int)
      
      P[<g_1033@55:0>](<g_1033@55:0>:int),
      P[<<f_g_1236@72:1>@74:0>](<g_1033@55:0>:int,<<g_1033@55:1>@76:0>:int), (
      <g_1033@55:0> > 0) |- P[<<g_1033@55:1>@76:0>](<g_1033@55:0>:int,
                                                    <<g_1033@55:1>@76:0>:int)
      
      P[<f_g_1236@72:2>](<f_g_1236@72:0>:int,(-2 + <<f_g_1236@72:1>@74:0>):int)|- P[<<f_g_1236@72:1>@74:0>](
      <f_g_1236@72:0>:int,<<f_g_1236@72:1>@74:0>:int)
      
      P[<g_1033@55:0>](<f_g_1236@72:0>:int),
      P[<<g_1033@58:1>@70:0>]((-1 + <f_g_1236@72:0>):int,<f_g_1236@72:2>:int), (
      <f_g_1236@72:0> > 0) |- P[<f_g_1236@72:2>](<f_g_1236@72:0>:int,
                                                 <f_g_1236@72:2>:int)
      
      P[<g_1033@58:0>](<g_1033@58:0>:int),
      P[<<f_g_1236@66:1>@68:0>](<g_1033@58:0>:int,<<g_1033@58:1>@70:0>:int), (
      <g_1033@58:0> > 0) |- P[<<g_1033@58:1>@70:0>](<g_1033@58:0>:int,
                                                    <<g_1033@58:1>@70:0>:int)
      
      P[<f_g_1236@66:2>](<f_g_1236@66:0>:int,(-2 + <<f_g_1236@66:1>@68:0>):int)|- P[<<f_g_1236@66:1>@68:0>](
      <f_g_1236@66:0>:int,<<f_g_1236@66:1>@68:0>:int)
      
      P[<g_1033@58:0>](<f_g_1236@66:0>:int),
      P[<<g_1033@61:1>@64:0>]((-1 + <f_g_1236@66:0>):int,<f_g_1236@66:2>:int), (
      <f_g_1236@66:0> > 0) |- P[<f_g_1236@66:2>](<f_g_1236@66:0>:int,
                                                 <f_g_1236@66:2>:int)
      
      P[<g_1033@61:0>](<g_1033@61:0>:int), ((<<g_1033@61:1>@64:0> = 1) && (<g_1033@61:0> <= 0))
      |- P[<<g_1033@61:1>@64:0>](<g_1033@61:0>:int,<<g_1033@61:1>@64:0>:int)
      
      P[<g_1033@58:0>]((1 + <g_1033@61:0>):int), ((1 + <g_1033@61:0>) > 0) |- P[<g_1033@61:0>](<g_1033@61:0>:int)
      
      P[<g_1033@55:0>]((1 + <g_1033@58:0>):int), ((1 + <g_1033@58:0>) > 0) |- P[<g_1033@58:0>](<g_1033@58:0>:int)
      
      P[<main_1035@49:0>](<twice_1065@51:1>:int),
      P[<<twice_1065@51:0>@53:0>](<g_1033@55:0>:int)|- P[<g_1033@55:0>](
      <g_1033@55:0>:int)
      
      P[<twice_1065@51:1>](<<twice_1065@51:0>@53:0>:int)|- P[<<twice_1065@51:0>@53:0>](<<twice_1065@51:0>@53:0>:int)
      
      P[<main_1035@49:0>](<twice_1065@51:1>:int)|- P[<twice_1065@51:1>](<twice_1065@51:1>:int)
      
      P[<f_1238@47:0>](<main_1035@49:0>:int)|- P[<main_1035@49:0>](<main_1035@49:0>:int)
      
      |- P[<f_1238@47:0>](<f_1238@47:0>:int)
    call trees:
      <main_1234@44>
        <f_1238@47>
          <main_1035@49>
            <twice_1065@51>
            </<twice_1065@51:0>@53>
            <g_1033@55>
              <g_1033@58>
                <g_1033@61>
                </<g_1033@61:1>@64>
                <f_g_1236@66>
                </<f_g_1236@66:1>@68>
              </<g_1033@58:1>@70>
              <f_g_1236@72>
              </<f_g_1236@72:1>@74>
            </<g_1033@55:1>@76>
            <<<twice_1065@51:0>@53:1>@78>
              <f_twice_1235@80>
              </<f_twice_1235@80:1>@82>
            </<twice_1065@51:0>@84>
            <g_1033@86>
              <g_1033@89>
                <g_1033@92>
                </<g_1033@92:1>@95>
                <f_g_1236@97>
                </<f_g_1236@97:1>@99>
              </<g_1033@89:1>@101>
              <f_g_1236@103>
              </<f_g_1236@103:1>@105>
            </<g_1033@86:1>@107>
            <<<twice_1065@51:0>@84:1>@109>
              <<<f_twice_1235@80:1>@82:1>@111>
              </<f_twice_1235@80:2>@113>
            </<twice_1065@51:2>@115>
            <f_main_1237@117>
              <fail_1240@120>
    inlined horn clauses:
      P[<fail_1240@120:0>](<fail_1240@120:0>:bool)|- bot
      
      P[<<g_1033@55:1>@76:0>](<f_main_1237@117:0>:int,var32:int),
      P[<<g_1033@86:1>@107:0>](var32:int,<f_main_1237@117:2>:int), ((<f_main_1237@117:2> <> 0) && <fail_1240@120:0>)
      |- P[<fail_1240@120:0>](<fail_1240@120:0>:bool)
      
      P[<g_1033@86:0>](<g_1033@86:0>:int),
      P[<<g_1033@89:1>@101:0>]((-1 + <g_1033@86:0>):int,(-2 + <<g_1033@86:1>@107:0>):int), (
      <g_1033@86:0> > 0) |- P[<<g_1033@86:1>@107:0>](<g_1033@86:0>:int,
                                                     <<g_1033@86:1>@107:0>:int)
      
      P[<g_1033@89:0>](<g_1033@89:0>:int),
      P[<<g_1033@92:1>@95:0>]((-1 + <g_1033@89:0>):int,(-2 + <<g_1033@89:1>@101:0>):int), (
      <g_1033@89:0> > 0) |- P[<<g_1033@89:1>@101:0>](<g_1033@89:0>:int,
                                                     <<g_1033@89:1>@101:0>:int)
      
      P[<g_1033@92:0>](<g_1033@92:0>:int), ((<<g_1033@92:1>@95:0> = 1) && (<g_1033@92:0> <= 0))
      |- P[<<g_1033@92:1>@95:0>](<g_1033@92:0>:int,<<g_1033@92:1>@95:0>:int)
      
      P[<g_1033@89:0>]((1 + <g_1033@92:0>):int), ((1 + <g_1033@92:0>) > 0) |- P[<g_1033@92:0>](<g_1033@92:0>:int)
      
      P[<g_1033@86:0>]((1 + <g_1033@89:0>):int), ((1 + <g_1033@89:0>) > 0) |- P[<g_1033@89:0>](<g_1033@89:0>:int)
      
      P[<<g_1033@55:1>@76:0>](var33:int,<g_1033@86:0>:int)|- P[<g_1033@86:0>](<g_1033@86:0>:int)
      
      P[<g_1033@55:0>](<g_1033@55:0>:int),
      P[<<g_1033@58:1>@70:0>]((-1 + <g_1033@55:0>):int,(-2 + <<g_1033@55:1>@76:0>):int), (
      <g_1033@55:0> > 0) |- P[<<g_1033@55:1>@76:0>](<g_1033@55:0>:int,
                                                    <<g_1033@55:1>@76:0>:int)
      
      P[<g_1033@58:0>](<g_1033@58:0>:int),
      P[<<g_1033@61:1>@64:0>]((-1 + <g_1033@58:0>):int,(-2 + <<g_1033@58:1>@70:0>):int), (
      <g_1033@58:0> > 0) |- P[<<g_1033@58:1>@70:0>](<g_1033@58:0>:int,
                                                    <<g_1033@58:1>@70:0>:int)
      
      P[<g_1033@61:0>](<g_1033@61:0>:int), ((<<g_1033@61:1>@64:0> = 1) && (<g_1033@61:0> <= 0))
      |- P[<<g_1033@61:1>@64:0>](<g_1033@61:0>:int,<<g_1033@61:1>@64:0>:int)
      
      P[<g_1033@58:0>]((1 + <g_1033@61:0>):int), ((1 + <g_1033@61:0>) > 0) |- P[<g_1033@61:0>](<g_1033@61:0>:int)
      
      P[<g_1033@55:0>]((1 + <g_1033@58:0>):int), ((1 + <g_1033@58:0>) > 0) |- P[<g_1033@58:0>](<g_1033@58:0>:int)
      
      |- P[<g_1033@55:0>](<g_1033@55:0>:int)
    begin ParamSubstInfer.infer(6676)[3]
      
    end ParamSubstInfer.infer(6676)[3] (0.072989 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(6678)[3]
      
    end RefTypeInfer.elim_coeffs(6678)[3] (0.002000 sec.)
    begin YhornInterface.solve(7121)[3]
      begin HcSolver.solve_ub(7122)[4]
        encoded:
          P[<fail_1240@120:0>](<fail_1240@120:0>:int)|- bot
          
          P[<<g_1033@55:1>@76:0>](<f_main_1237@117:0>:int,var32:int),
          P[<<g_1033@86:1>@107:0>](var32:int,<f_main_1237@117:2>:int),
          ((<f_main_1237@117:2> <> 0) && (<fail_1240@120:0> = 1)) |- P[<fail_1240@120:0>](
          <fail_1240@120:0>:int)
          
          P[<g_1033@86:0>](<g_1033@86:0>:int),
          P[<<g_1033@89:1>@101:0>]((-1 + <g_1033@86:0>):int,(-2 + <<g_1033@86:1>@107:0>):int), (
          <g_1033@86:0> > 0) |- P[<<g_1033@86:1>@107:0>](<g_1033@86:0>:int,
                                                         <<g_1033@86:1>@107:0>:int)
          
          P[<g_1033@89:0>](<g_1033@89:0>:int),
          P[<<g_1033@92:1>@95:0>]((-1 + <g_1033@89:0>):int,(-2 + <<g_1033@89:1>@101:0>):int), (
          <g_1033@89:0> > 0) |- P[<<g_1033@89:1>@101:0>](<g_1033@89:0>:int,
                                                         <<g_1033@89:1>@101:0>:int)
          
          P[<g_1033@92:0>](<g_1033@92:0>:int), ((<<g_1033@92:1>@95:0> = 1) && (<g_1033@92:0> <= 0))
          |- P[<<g_1033@92:1>@95:0>](<g_1033@92:0>:int,<<g_1033@92:1>@95:0>:int)
          
          P[<g_1033@89:0>]((1 + <g_1033@92:0>):int), ((1 + <g_1033@92:0>) > 0) |- P[<g_1033@92:0>](<g_1033@92:0>:int)
          
          P[<g_1033@86:0>]((1 + <g_1033@89:0>):int), ((1 + <g_1033@89:0>) > 0) |- P[<g_1033@89:0>](<g_1033@89:0>:int)
          
          P[<<g_1033@55:1>@76:0>](var33:int,<g_1033@86:0>:int)|- P[<g_1033@86:0>](<g_1033@86:0>:int)
          
          P[<g_1033@55:0>](<g_1033@55:0>:int),
          P[<<g_1033@58:1>@70:0>]((-1 + <g_1033@55:0>):int,(-2 + <<g_1033@55:1>@76:0>):int), (
          <g_1033@55:0> > 0) |- P[<<g_1033@55:1>@76:0>](<g_1033@55:0>:int,
                                                        <<g_1033@55:1>@76:0>:int)
          
          P[<g_1033@58:0>](<g_1033@58:0>:int),
          P[<<g_1033@61:1>@64:0>]((-1 + <g_1033@58:0>):int,(-2 + <<g_1033@58:1>@70:0>):int), (
          <g_1033@58:0> > 0) |- P[<<g_1033@58:1>@70:0>](<g_1033@58:0>:int,
                                                        <<g_1033@58:1>@70:0>:int)
          
          P[<g_1033@61:0>](<g_1033@61:0>:int), ((<<g_1033@61:1>@64:0> = 1) && (<g_1033@61:0> <= 0))
          |- P[<<g_1033@61:1>@64:0>](<g_1033@61:0>:int,<<g_1033@61:1>@64:0>:int)
          
          P[<g_1033@58:0>]((1 + <g_1033@61:0>):int), ((1 + <g_1033@61:0>) > 0) |- P[<g_1033@61:0>](<g_1033@61:0>:int)
          
          P[<g_1033@55:0>]((1 + <g_1033@58:0>):int), ((1 + <g_1033@58:0>) > 0) |- P[<g_1033@58:0>](<g_1033@58:0>:int)
          
          |- P[<g_1033@55:0>](<g_1033@55:0>:int)
        input to Yhorn:
          P[<fail_1240@120:0>](<fail_1240@120:0>:int)|- bot
          
          P[<<g_1033@55:1>@76:0>](<f_main_1237@117:0>:int,var32:int),
          P[<<g_1033@86:1>@107:0>](var32:int,<f_main_1237@117:2>:int),
          ((<f_main_1237@117:2> <> 0) && (<fail_1240@120:0> = 1)) |- P[<fail_1240@120:0>](
          <fail_1240@120:0>:int)
          
          P[<g_1033@86:0>](<g_1033@86:0>:int),
          P[<<g_1033@89:1>@101:0>](var34:int,var35:int),
          (((2 + var35) = <<g_1033@86:1>@107:0>) && (((1 + var34) = <g_1033@86:0>) && (<g_1033@86:0> > 0)))
          |- P[<<g_1033@86:1>@107:0>](<g_1033@86:0>:int,<<g_1033@86:1>@107:0>:int)
          
          P[<g_1033@89:0>](<g_1033@89:0>:int),
          P[<<g_1033@92:1>@95:0>](var36:int,var37:int),
          (((2 + var37) = <<g_1033@89:1>@101:0>) && (((1 + var36) = <g_1033@89:0>) && (<g_1033@89:0> > 0)))
          |- P[<<g_1033@89:1>@101:0>](<g_1033@89:0>:int,<<g_1033@89:1>@101:0>:int)
          
          P[<g_1033@92:0>](<g_1033@92:0>:int), ((<g_1033@92:0> <= 0) && (<<g_1033@92:1>@95:0> = 1))
          |- P[<<g_1033@92:1>@95:0>](<g_1033@92:0>:int,<<g_1033@92:1>@95:0>:int)
          
          P[<g_1033@89:0>](var38:int), ((var38 = (1 + <g_1033@92:0>)) && ((1 + <g_1033@92:0>) > 0))
          |- P[<g_1033@92:0>](<g_1033@92:0>:int)
          
          P[<g_1033@86:0>](var39:int), ((var39 = (1 + <g_1033@89:0>)) && ((1 + <g_1033@89:0>) > 0))
          |- P[<g_1033@89:0>](<g_1033@89:0>:int)
          
          P[<<g_1033@55:1>@76:0>](var33:int,<g_1033@86:0>:int)|- P[<g_1033@86:0>](<g_1033@86:0>:int)
          
          P[<g_1033@55:0>](<g_1033@55:0>:int),
          P[<<g_1033@58:1>@70:0>](var40:int,var41:int),
          (((2 + var41) = <<g_1033@55:1>@76:0>) && (((1 + var40) = <g_1033@55:0>) && (<g_1033@55:0> > 0)))
          |- P[<<g_1033@55:1>@76:0>](<g_1033@55:0>:int,<<g_1033@55:1>@76:0>:int)
          
          P[<g_1033@58:0>](<g_1033@58:0>:int),
          P[<<g_1033@61:1>@64:0>](var42:int,var43:int),
          (((2 + var43) = <<g_1033@58:1>@70:0>) && (((1 + var42) = <g_1033@58:0>) && (<g_1033@58:0> > 0)))
          |- P[<<g_1033@58:1>@70:0>](<g_1033@58:0>:int,<<g_1033@58:1>@70:0>:int)
          
          P[<g_1033@61:0>](<g_1033@61:0>:int), ((<g_1033@61:0> <= 0) && (<<g_1033@61:1>@64:0> = 1))
          |- P[<<g_1033@61:1>@64:0>](<g_1033@61:0>:int,<<g_1033@61:1>@64:0>:int)
          
          P[<g_1033@58:0>](var44:int), ((var44 = (1 + <g_1033@61:0>)) && ((1 + <g_1033@61:0>) > 0))
          |- P[<g_1033@61:0>](<g_1033@61:0>:int)
          
          P[<g_1033@55:0>](var45:int), ((var45 = (1 + <g_1033@58:0>)) && ((1 + <g_1033@58:0>) > 0))
          |- P[<g_1033@58:0>](<g_1033@58:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1240_sep_120_sep_0($132)) -> 1=0.
(($132-1=0) & ($133<>0)) & (v_sep_g_1033_sep_86_sep_1_sep_107_sep_0($134,$133)) & (v_sep_g_1033_sep_55_sep_1_sep_76_sep_0($135,$134)) -> v_sep_fail_1240_sep_120_sep_0($132).
(($136>0) & (-$136+$137+1=0) & ($138-$139+2=0)) & (v_sep_g_1033_sep_89_sep_1_sep_101_sep_0($137,$138)) & (v_sep_g_1033_sep_86_sep_0($136)) -> v_sep_g_1033_sep_86_sep_1_sep_107_sep_0($136,$139).
(($140>0) & (-$140+$141+1=0) & ($142-$143+2=0)) & (v_sep_g_1033_sep_92_sep_1_sep_95_sep_0($141,$142)) & (v_sep_g_1033_sep_89_sep_0($140)) -> v_sep_g_1033_sep_89_sep_1_sep_101_sep_0($140,$143).
(($144-1=0) & ($145<=0)) & (v_sep_g_1033_sep_92_sep_0($145)) -> v_sep_g_1033_sep_92_sep_1_sep_95_sep_0($145,$144).
(($145+1>0) & (-$145+$146-1=0)) & (v_sep_g_1033_sep_89_sep_0($146)) -> v_sep_g_1033_sep_92_sep_0($145).
(($140+1>0) & (-$140+$147-1=0)) & (v_sep_g_1033_sep_86_sep_0($147)) -> v_sep_g_1033_sep_89_sep_0($140).
(0=0) & (v_sep_g_1033_sep_55_sep_1_sep_76_sep_0($148,$136)) -> v_sep_g_1033_sep_86_sep_0($136).
(($149>0) & (-$149+$150+1=0) & ($151-$152+2=0)) & (v_sep_g_1033_sep_58_sep_1_sep_70_sep_0($150,$151)) & (v_sep_g_1033_sep_55_sep_0($149)) -> v_sep_g_1033_sep_55_sep_1_sep_76_sep_0($149,$152).
(($153>0) & (-$153+$154+1=0) & ($155-$156+2=0)) & (v_sep_g_1033_sep_61_sep_1_sep_64_sep_0($154,$155)) & (v_sep_g_1033_sep_58_sep_0($153)) -> v_sep_g_1033_sep_58_sep_1_sep_70_sep_0($153,$156).
(($157-1=0) & ($158<=0)) & (v_sep_g_1033_sep_61_sep_0($158)) -> v_sep_g_1033_sep_61_sep_1_sep_64_sep_0($158,$157).
(($158+1>0) & (-$158+$159-1=0)) & (v_sep_g_1033_sep_58_sep_0($159)) -> v_sep_g_1033_sep_61_sep_0($158).
(($153+1>0) & (-$153+$160-1=0)) & (v_sep_g_1033_sep_55_sep_0($160)) -> v_sep_g_1033_sep_58_sep_0($153).
0=0 -> v_sep_g_1033_sep_55_sep_0($149).


v_sep_fail_1240_sep_120_sep_0: X
v_sep_g_1033_sep_55_sep_0: X
v_sep_g_1033_sep_55_sep_1_sep_76_sep_0: X
v_sep_g_1033_sep_58_sep_0: X
v_sep_g_1033_sep_58_sep_1_sep_70_sep_0: X
v_sep_g_1033_sep_61_sep_0: X
v_sep_g_1033_sep_61_sep_1_sep_64_sep_0: X
v_sep_g_1033_sep_86_sep_0: X
v_sep_g_1033_sep_86_sep_1_sep_107_sep_0: X
v_sep_g_1033_sep_89_sep_0: X
v_sep_g_1033_sep_89_sep_1_sep_101_sep_0: X
v_sep_g_1033_sep_92_sep_0: X
v_sep_g_1033_sep_92_sep_1_sep_95_sep_0: X
.....................
v_sep_fail_1240_sep_120_sep_0: X
v_sep_g_1033_sep_55_sep_0: X
v_sep_g_1033_sep_55_sep_1_sep_76_sep_0: X
v_sep_g_1033_sep_58_sep_0: X
v_sep_g_1033_sep_58_sep_1_sep_70_sep_0: X
v_sep_g_1033_sep_61_sep_0: X
v_sep_g_1033_sep_61_sep_1_sep_64_sep_0: X
v_sep_g_1033_sep_86_sep_0: X
v_sep_g_1033_sep_86_sep_1_sep_107_sep_0: X
v_sep_g_1033_sep_89_sep_0: X
v_sep_g_1033_sep_89_sep_1_sep_101_sep_0: X
v_sep_g_1033_sep_92_sep_0: X
v_sep_g_1033_sep_92_sep_1_sep_95_sep_0: X
......
v_sep_fail_1240_sep_120_sep_0: X
v_sep_g_1033_sep_55_sep_0: X
v_sep_g_1033_sep_55_sep_1_sep_76_sep_0: X
v_sep_g_1033_sep_58_sep_0: X
v_sep_g_1033_sep_58_sep_1_sep_70_sep_0: X
v_sep_g_1033_sep_61_sep_0: X
v_sep_g_1033_sep_61_sep_1_sep_64_sep_0: X
v_sep_g_1033_sep_86_sep_0: X
v_sep_g_1033_sep_86_sep_1_sep_107_sep_0: X
v_sep_g_1033_sep_89_sep_0: X
v_sep_g_1033_sep_89_sep_1_sep_101_sep_0: X
v_sep_g_1033_sep_92_sep_0: X
v_sep_g_1033_sep_92_sep_1_sep_95_sep_0: X
..........
v_sep_fail_1240_sep_120_sep_0: X
v_sep_g_1033_sep_55_sep_0: X
v_sep_g_1033_sep_55_sep_1_sep_76_sep_0: X
v_sep_g_1033_sep_58_sep_0: X
v_sep_g_1033_sep_58_sep_1_sep_70_sep_0: X
v_sep_g_1033_sep_61_sep_0: X
v_sep_g_1033_sep_61_sep_1_sep_64_sep_0: X
v_sep_g_1033_sep_86_sep_0: X
v_sep_g_1033_sep_86_sep_1_sep_107_sep_0: X
v_sep_g_1033_sep_89_sep_0: X
v_sep_g_1033_sep_89_sep_1_sep_101_sep_0: X
v_sep_g_1033_sep_92_sep_0: X
v_sep_g_1033_sep_92_sep_1_sep_95_sep_0: X
...............
v_sep_fail_1240_sep_120_sep_0: X
v_sep_g_1033_sep_55_sep_0: X
v_sep_g_1033_sep_55_sep_1_sep_76_sep_0: X
v_sep_g_1033_sep_58_sep_0: X
v_sep_g_1033_sep_58_sep_1_sep_70_sep_0: X
v_sep_g_1033_sep_61_sep_0: X
v_sep_g_1033_sep_61_sep_1_sep_64_sep_0: X
v_sep_g_1033_sep_86_sep_0: X
v_sep_g_1033_sep_86_sep_1_sep_107_sep_0: X
v_sep_g_1033_sep_89_sep_0: X
v_sep_g_1033_sep_89_sep_1_sep_101_sep_0: X
v_sep_g_1033_sep_92_sep_0: X
v_sep_g_1033_sep_92_sep_1_sep_95_sep_0: X
...................
v_sep_fail_1240_sep_120_sep_0: X
v_sep_g_1033_sep_55_sep_0: X
v_sep_g_1033_sep_55_sep_1_sep_76_sep_0: X
v_sep_g_1033_sep_58_sep_0: X
v_sep_g_1033_sep_58_sep_1_sep_70_sep_0: X
v_sep_g_1033_sep_61_sep_0: X
v_sep_g_1033_sep_61_sep_1_sep_64_sep_0: X
v_sep_g_1033_sep_86_sep_0: X
v_sep_g_1033_sep_86_sep_1_sep_107_sep_0: X
v_sep_g_1033_sep_89_sep_0: X
v_sep_g_1033_sep_89_sep_1_sep_101_sep_0: X
v_sep_g_1033_sep_92_sep_0: X
v_sep_g_1033_sep_92_sep_1_sep_95_sep_0: X
.....................(0=0) & (v_sep_fail_1240_sep_120_sep_0($132)) -> 1=0.
(($132-1=0) & ($133<>0)) & (v_sep_g_1033_sep_86_sep_1_sep_107_sep_0($134,$133)) & (v_sep_g_1033_sep_55_sep_1_sep_76_sep_0($135,$134)) -> v_sep_fail_1240_sep_120_sep_0($132).
(($136>0) & (-$136+$137+1=0) & ($138-$139+2=0)) & (v_sep_g_1033_sep_89_sep_1_sep_101_sep_0($137,$138)) & (v_sep_g_1033_sep_86_sep_0($136)) -> v_sep_g_1033_sep_86_sep_1_sep_107_sep_0($136,$139).
(($140>0) & (-$140+$141+1=0) & ($142-$143+2=0)) & (v_sep_g_1033_sep_92_sep_1_sep_95_sep_0($141,$142)) & (v_sep_g_1033_sep_89_sep_0($140)) -> v_sep_g_1033_sep_89_sep_1_sep_101_sep_0($140,$143).
(($144-1=0) & ($145<=0)) & (v_sep_g_1033_sep_92_sep_0($145)) -> v_sep_g_1033_sep_92_sep_1_sep_95_sep_0($145,$144).
(($145+1>0) & (-$145+$146-1=0)) & (v_sep_g_1033_sep_89_sep_0($146)) -> v_sep_g_1033_sep_92_sep_0($145).
(($140+1>0) & (-$140+$147-1=0)) & (v_sep_g_1033_sep_86_sep_0($147)) -> v_sep_g_1033_sep_89_sep_0($140).
(0=0) & (v_sep_g_1033_sep_55_sep_1_sep_76_sep_0($148,$136)) -> v_sep_g_1033_sep_86_sep_0($136).
(($149>0) & (-$149+$150+1=0) & ($151-$152+2=0)) & (v_sep_g_1033_sep_58_sep_1_sep_70_sep_0($150,$151)) & (v_sep_g_1033_sep_55_sep_0($149)) -> v_sep_g_1033_sep_55_sep_1_sep_76_sep_0($149,$152).
(($153>0) & (-$153+$154+1=0) & ($155-$156+2=0)) & (v_sep_g_1033_sep_61_sep_1_sep_64_sep_0($154,$155)) & (v_sep_g_1033_sep_58_sep_0($153)) -> v_sep_g_1033_sep_58_sep_1_sep_70_sep_0($153,$156).
(($157-1=0) & ($158<=0)) & (v_sep_g_1033_sep_61_sep_0($158)) -> v_sep_g_1033_sep_61_sep_1_sep_64_sep_0($158,$157).
(($158+1>0) & (-$158+$159-1=0)) & (v_sep_g_1033_sep_58_sep_0($159)) -> v_sep_g_1033_sep_61_sep_0($158).
(($153+1>0) & (-$153+$160-1=0)) & (v_sep_g_1033_sep_55_sep_0($160)) -> v_sep_g_1033_sep_58_sep_0($153).
0=0 -> v_sep_g_1033_sep_55_sep_0($149).

          |- P[<g_1033@55:0>](<g_1033@55:0>:int)
        solution:
          P[<fail_1240@120:0>]($161:bool) = false
          P[<g_1033@55:0>]($198:int) = true
          P[<<g_1033@55:1>@76:0>]($169:int,$171:int) = (5 <= $171)
          P[<g_1033@58:0>]($206:int) = true
          P[<<g_1033@58:1>@70:0>]($193:int,$195:int) = (3 <= $195)
          P[<g_1033@61:0>]($209:int) = true
          P[<<g_1033@61:1>@64:0>]($201:int,$203:int) = (1 <= $203)
          P[<g_1033@86:0>]($179:int) = (5 <= $179)
          P[<<g_1033@86:1>@107:0>]($164:int,$166:int) = ((7 + $164) <= 0)
          P[<g_1033@89:0>]($187:int) = (4 <= $187)
          P[<<g_1033@89:1>@101:0>]($174:int,$176:int) = ((2 + $174) <= 0)
          P[<g_1033@92:0>]($190:int) = (3 <= $190)
          P[<<g_1033@92:1>@95:0>]($182:int,$184:int) = ((1 + $182) <= 0)
        
      end HcSolver.solve_ub(7122)[4] (0.079988 sec.)
      begin HcSolver.check_validity(7896)[4]
        input:
          P[<fail_1240@120:0>](<fail_1240@120:0>:bool)|- bot
          
          P[<<g_1033@55:1>@76:0>](<f_main_1237@117:0>:int,var32:int),
          P[<<g_1033@86:1>@107:0>](var32:int,<f_main_1237@117:2>:int),
          ((<f_main_1237@117:2> <> 0) && <fail_1240@120:0>) |- P[<fail_1240@120:0>](
          <fail_1240@120:0>:bool)
          
          P[<g_1033@86:0>](<g_1033@86:0>:int),
          P[<<g_1033@89:1>@101:0>]((-1 + <g_1033@86:0>):int,(-2 + <<g_1033@86:1>@107:0>):int), (
          <g_1033@86:0> > 0) |- P[<<g_1033@86:1>@107:0>](<g_1033@86:0>:int,
                                                         <<g_1033@86:1>@107:0>:int)
          
          P[<g_1033@89:0>](<g_1033@89:0>:int),
          P[<<g_1033@92:1>@95:0>]((-1 + <g_1033@89:0>):int,(-2 + <<g_1033@89:1>@101:0>):int), (
          <g_1033@89:0> > 0) |- P[<<g_1033@89:1>@101:0>](<g_1033@89:0>:int,
                                                         <<g_1033@89:1>@101:0>:int)
          
          P[<g_1033@92:0>](<g_1033@92:0>:int), ((<<g_1033@92:1>@95:0> = 1) && (<g_1033@92:0> <= 0))
          |- P[<<g_1033@92:1>@95:0>](<g_1033@92:0>:int,<<g_1033@92:1>@95:0>:int)
          
          P[<g_1033@89:0>]((1 + <g_1033@92:0>):int), ((1 + <g_1033@92:0>) > 0) |- P[<g_1033@92:0>](<g_1033@92:0>:int)
          
          P[<g_1033@86:0>]((1 + <g_1033@89:0>):int), ((1 + <g_1033@89:0>) > 0) |- P[<g_1033@89:0>](<g_1033@89:0>:int)
          
          P[<<g_1033@55:1>@76:0>](var33:int,<g_1033@86:0>:int)|- P[<g_1033@86:0>](<g_1033@86:0>:int)
          
          P[<g_1033@55:0>](<g_1033@55:0>:int),
          P[<<g_1033@58:1>@70:0>]((-1 + <g_1033@55:0>):int,(-2 + <<g_1033@55:1>@76:0>):int), (
          <g_1033@55:0> > 0) |- P[<<g_1033@55:1>@76:0>](<g_1033@55:0>:int,
                                                        <<g_1033@55:1>@76:0>:int)
          
          P[<g_1033@58:0>](<g_1033@58:0>:int),
          P[<<g_1033@61:1>@64:0>]((-1 + <g_1033@58:0>):int,(-2 + <<g_1033@58:1>@70:0>):int), (
          <g_1033@58:0> > 0) |- P[<<g_1033@58:1>@70:0>](<g_1033@58:0>:int,
                                                        <<g_1033@58:1>@70:0>:int)
          
          P[<g_1033@61:0>](<g_1033@61:0>:int), ((<<g_1033@61:1>@64:0> = 1) && (<g_1033@61:0> <= 0))
          |- P[<<g_1033@61:1>@64:0>](<g_1033@61:0>:int,<<g_1033@61:1>@64:0>:int)
          
          P[<g_1033@58:0>]((1 + <g_1033@61:0>):int), ((1 + <g_1033@61:0>) > 0) |- P[<g_1033@61:0>](<g_1033@61:0>:int)
          
          P[<g_1033@55:0>]((1 + <g_1033@58:0>):int), ((1 + <g_1033@58:0>) > 0) |- P[<g_1033@58:0>](<g_1033@58:0>:int)
          
          |- P[<g_1033@55:0>](<g_1033@55:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(7896)[4] (0.011998 sec.)
      solution:
        P[<fail_1240@120:0>]($161:bool) = false
        P[<g_1033@55:0>]($198:int) = true
        P[<<g_1033@55:1>@76:0>]($169:int,$171:int) = (5 <= $171)
        P[<g_1033@58:0>]($206:int) = true
        P[<<g_1033@58:1>@70:0>]($193:int,$195:int) = (3 <= $195)
        P[<g_1033@61:0>]($209:int) = true
        P[<<g_1033@61:1>@64:0>]($201:int,$203:int) = (1 <= $203)
        P[<g_1033@86:0>]($179:int) = (5 <= $179)
        P[<<g_1033@86:1>@107:0>]($164:int,$166:int) = ((7 + $164) <= 0)
        P[<g_1033@89:0>]($187:int) = (4 <= $187)
        P[<<g_1033@89:1>@101:0>]($174:int,$176:int) = ((2 + $174) <= 0)
        P[<g_1033@92:0>]($190:int) = (3 <= $190)
        P[<<g_1033@92:1>@95:0>]($182:int,$184:int) = ((1 + $182) <= 0)
    end YhornInterface.solve(7121)[3] (0.091986 sec.)
    
  end RefTypeInfer.infer_etrs(2955)[2] (0.190971 sec.)
  refinement types:
    main_1234: X
    f_1238: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    twice_1065: (v1:int -> (v2:int -> X) -> X /\
                 v5:int -> (v6:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    g_1033: v1:int -> (v2:{v2:int | (5 <= v2)} -> X) -> X
    g_1033: v1:int -> (v2:{v2:int | (3 <= v2)} -> X) -> X
    g_1033: v1:int -> (v2:{v2:int | (1 <= v2)} -> X) -> X
    f_g_1236: v1:int -> (v2:int -> X) -> v4:int -> X
    f_g_1236: v1:int -> (v2:int -> X) -> v4:int -> X
    f_twice_1235: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    g_1033: v1:{v1:int | (5 <= v1)} -> (v2:{v2:int | ((7 + v1) <= 0)} -> X) -> X
    g_1033: v1:{v1:int | (4 <= v1)} -> (v2:{v2:int | ((2 + v1) <= 0)} -> X) -> X
    g_1033: v1:{v1:int | (3 <= v1)} -> (v2:{v2:int | ((1 + v1) <= 0)} -> X) -> X
    f_g_1236: v1:int -> (v2:int -> X) -> v4:int -> X
    f_g_1236: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1237: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1240: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1239: var54:int -> var53:unit -> X
  abstraction types:
    main_1234: X
    f_1238: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    twice_1065: (var55:int -> (var56:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    g_1033: var75:int[var75 -> (5 <= var75),
                      var75 -> (4 <= var75),
                      var75 -> (3 <= var75)] ->
            (var76:int[var76 -> (5 <= var76),
                       var76 -> (3 <= var76),
                       var76 -> (1 <= var76),
                       var76 -> ((7 + var75) <= 0),
                       var76 -> ((2 + var75) <= 0),
                       var76 -> ((1 + var75) <= 0)] -> X) -> X
    f_g_1236: var89:int -> (var90:int -> X) -> var92:int -> X
    f_twice_1235: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    f_main_1237: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1240: v1:bool -> (v2:unit -> X) -> X
    f_1239: var54:int -> var53:unit -> X
  
end AbsTypeInfer.refine(2954)[1] (0.196970 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 1; 0

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1234
  main_1234 -> (rand_int f_1238)
  f_1238 x_1209 -> (main_1035 x_1209 (f_1239 x_1209))
  f_1239 x_1209 x_1206 -> end
  f_g_1236 x_1034 k_g_1139 x_1143 -> (k_g_1139 (2 + x_1143))
  f_main_1237 n_1036 k_main_1171 x_1174 when (x_1174 = 0) -> (k_main_1171 ())
  f_main_1237 n_1036 k_main_1171 x_1174 when (not (x_1174 = 0)) -> (fail_1240 true k_main_1171)
  f_twice_1235 x_1032 f_1031 k_twice_1105 x_1125 -> (f_1031 x_1125 k_twice_1105)
  fail_1240 b k -> {fail} => (k ())
  g_1033 x_1034 k_g_1139 when (x_1034 <= 0) -> (k_g_1139 1)
  g_1033 x_1034 k_g_1139 when (not (x_1034 <= 0)) -> (g_1033 (x_1034 - 1) (f_g_1236 x_1034 k_g_1139))
  main_1035 n_1036 k_main_1171 -> (twice_1065 g_1033 n_1036 (f_main_1237 n_1036 k_main_1171))
  twice_1065 f_1031 x_1032 k_twice_1105 -> (f_1031 x_1032 (f_twice_1235 x_1032 f_1031 k_twice_1105))
Types:
  main_1234 : X
  fail_1240 : (x_1:bool[x_1] -> (unit -> X) -> X)
  g_1033 : (x_1:int[x_1 >= 3; x_1 >= 4; x_1 >= 5; x_1 >= 1] ->
            (x_3:int[x_1 <= -2; x_1 <= -7; x_3 >= 3; x_3 >= 5; x_1 <= -1; x_3 >= 1] -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1234 ... --> 
  f_1238 ... --> 
  main_1035 ... --> 
  twice_1065 ... --> 
  g_1033 [1/2] ... --> 
  f_twice_1235 ... --> 
  g_1033 [2/2] ... --> 
  g_1033 [2/2] ... --> 
  g_1033 [2/2] ... --> 
  g_1033 [2/2] ... --> 
  g_1033 [1/2] ... --> 
  f_g_1236 ... --> 
  f_g_1236 ... --> 
  f_g_1236 ... --> 
  f_g_1236 ... --> 
  f_main_1237 [2/2] ... --> 
  fail_1240 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 1; 1; 1; 0; 0; 0; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(11647)[1]
  program:
    main_1234  | true = ((Random.int 0) f_1238)
    f_1238 x_1209 | true = (main_1035 x_1209
                                      (f_1239 x_1209))
    f_1239 x_1209 x_1206 | true = end
    f_g_1236 x_1034 k_g_1139 x_1143 | true = (k_g_1139 (2 + x_1143))
    f_main_1237 n_1036 k_main_1171 x_1174 | (x_1174 = 0) = (k_main_1171 ())
    f_main_1237 n_1036 k_main_1171 x_1174 | (not (x_1174 = 0)) = (fail_1240 true
                                                                    k_main_1171)
    f_twice_1235 x_1032 f_1031 k_twice_1105 x_1125 | true = (f_1031 x_1125
                                                                    k_twice_1105)
    fail_1240 b k | true = (fail ())
    g_1033 x_1034 k_g_1139 | (x_1034 <= 0) = (k_g_1139 1)
    g_1033 x_1034 k_g_1139 | (not (x_1034 <= 0)) = (g_1033 (x_1034 - 1)
                                                           (f_g_1236 x_1034
                                                                    k_g_1139))
    main_1035 n_1036 k_main_1171 | true = (twice_1065 g_1033
                                                      n_1036
                                                      (f_main_1237 n_1036
                                                                   k_main_1171))
    twice_1065 f_1031 x_1032 k_twice_1105 | true = (f_1031 x_1032
                                                           (f_twice_1235 x_1032
                                                                    f_1031
                                                                    k_twice_1105))
    main_1234:X
    f_1238:int -> X
    f_1239:int -> unit -> X
    f_g_1236:int -> (int -> X) -> int -> X
    f_main_1237:int -> (unit -> X) -> int -> X
    f_twice_1235:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    fail_1240:bool -> (unit -> X) -> X
    g_1033:int -> (int -> X) -> X
    main_1035:int -> (unit -> X) -> X
    twice_1065:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
  inlined functions: f_1238,f_1239,f_g_1236,f_main_1237,f_twice_1235,main_1035,twice_1065
  counterexample: 0:0:0:0:0:0:1:1:1:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1238@126:0> = var94)
     [true.(<main_1035@128:0> = <f_1238@126:0>)
      [true.(<twice_1065@130:1> = <main_1035@128:0>)
       [true.(<<twice_1065@130:0>@132:0> = <twice_1065@130:1>)
        [true.(<g_1033@134:0> = <<twice_1065@130:0>@132:0>)
         [(<g_1033@134:0> <= 0).(<<g_1033@134:1>@137:0> = 1)
          [true.(<<<twice_1065@130:0>@132:1>@139:0> = <<g_1033@134:1>@137:0>)
           [true.
            ((<f_twice_1235@141:0> = <twice_1065@130:1>) && (<f_twice_1235@141:3> = <<<twice_1065@130:0>@132:1>@139:0>))
            [true.(<<f_twice_1235@141:1>@143:0> = <f_twice_1235@141:3>)
             [true.(<<twice_1065@130:0>@145:0> = <<f_twice_1235@141:1>@143:0>)
              [true.(<g_1033@147:0> = <<twice_1065@130:0>@145:0>)
               [(not (<g_1033@147:0> <= 0)).(<g_1033@150:0> = (<g_1033@147:0> - 1))
                [(not (<g_1033@150:0> <= 0)).(<g_1033@153:0> = (<g_1033@150:0> - 1))
                 [(not (<g_1033@153:0> <= 0)).(<g_1033@156:0> = (<g_1033@153:0> - 1))
                  [(not (<g_1033@156:0> <= 0)).(<g_1033@159:0> = (<g_1033@156:0> - 1))
                   [(<g_1033@159:0> <= 0).(<<g_1033@159:1>@162:0> = 1)
                    [true.((<f_g_1236@164:0> = <g_1033@156:0>) && (<f_g_1236@164:2> = <<g_1033@159:1>@162:0>))
                     [true.(<<f_g_1236@164:1>@166:0> = (2 + <f_g_1236@164:2>))
                      [true.(<<g_1033@156:1>@168:0> = <<f_g_1236@164:1>@166:0>)
                       [true.((<f_g_1236@170:0> = <g_1033@153:0>) && (<f_g_1236@170:2> = <<g_1033@156:1>@168:0>))
                        [true.(<<f_g_1236@170:1>@172:0> = (2 + <f_g_1236@170:2>))
                         [true.(<<g_1033@153:1>@174:0> = <<f_g_1236@170:1>@172:0>)
                          [true.((<f_g_1236@176:0> = <g_1033@150:0>) && (<f_g_1236@176:2> = <<g_1033@153:1>@174:0>))
                           [true.(<<f_g_1236@176:1>@178:0> = (2 + <f_g_1236@176:2>))
                            [true.(<<g_1033@150:1>@180:0> = <<f_g_1236@176:1>@178:0>)
                             [true.((<f_g_1236@182:0> = <g_1033@147:0>) && (<f_g_1236@182:2> = <<g_1033@150:1>@180:0>))
                              [true.(<<f_g_1236@182:1>@184:0> = (2 + <f_g_1236@182:2>))
                               [true.(<<g_1033@147:1>@186:0> = <<f_g_1236@182:1>@184:0>)
                                [true.(<<<twice_1065@130:0>@145:1>@188:0> = <<g_1033@147:1>@186:0>)
                                 [true.(<<<f_twice_1235@141:1>@143:1>@190:0> = <<<twice_1065@130:0>@145:1>@188:0>)
                                  [true.(<<f_twice_1235@141:2>@192:0> = <<<f_twice_1235@141:1>@143:1>@190:0>)
                                   [true.(<<twice_1065@130:2>@194:0> = <<f_twice_1235@141:2>@192:0>)
                                    [true.
                                     ((<f_main_1237@196:0> = <main_1035@128:0>) &&
                                      (<f_main_1237@196:2> = <<twice_1065@130:2>@194:0>))
                                     [(not (<f_main_1237@196:2> = 0)).(<fail_1240@199:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(11648)[2]
    horn clauses:
      P[<fail_1240@199:0>](<fail_1240@199:0>:bool)|- bot
      
      P[<f_main_1237@196:2>](<f_main_1237@196:0>:int,<f_main_1237@196:2>:int),
      ((<f_main_1237@196:2> <> 0) && <fail_1240@199:0>) |- P[<fail_1240@199:0>](
      <fail_1240@199:0>:bool)
      
      P[<main_1035@128:0>](<f_main_1237@196:0>:int),
      P[<<twice_1065@130:2>@194:0>](<f_main_1237@196:0>:int,<f_main_1237@196:2>:int)|- P[<f_main_1237@196:2>](
      <f_main_1237@196:0>:int,<f_main_1237@196:2>:int)
      
      P[<twice_1065@130:1>](<twice_1065@130:1>:int),
      P[<<f_twice_1235@141:2>@192:0>](<twice_1065@130:1>:int,<<twice_1065@130:2>@194:0>:int)|- P[<<twice_1065@130:2>@194:0>](
      <twice_1065@130:1>:int,<<twice_1065@130:2>@194:0>:int)
      
      P[<f_twice_1235@141:3>](<f_twice_1235@141:0>:int,<<f_twice_1235@141:1>@143:0>:int),
      P[<<<f_twice_1235@141:1>@143:1>@190:0>](<f_twice_1235@141:0>:int,<<f_twice_1235@141:1>@143:0>:int,<<f_twice_1235@141:2>@192:0>:int)|- P[<<f_twice_1235@141:2>@192:0>](
      <f_twice_1235@141:0>:int,<<f_twice_1235@141:2>@192:0>:int)
      
      P[<twice_1065@130:1>](<f_twice_1235@141:0>:int),
      P[<<<twice_1065@130:0>@145:1>@188:0>](<<f_twice_1235@141:1>@143:0>:int,<<<f_twice_1235@141:1>@143:1>@190:0>:int)|- P[<<<f_twice_1235@141:1>@143:1>@190:0>](
      <f_twice_1235@141:0>:int,<<f_twice_1235@141:1>@143:0>:int,<<<f_twice_1235@141:1>@143:1>@190:0>:int)
      
      P[<main_1035@128:0>](<twice_1065@130:1>:int),
      P[<<g_1033@147:1>@186:0>](<<twice_1065@130:0>@145:0>:int,<<<twice_1065@130:0>@145:1>@188:0>:int)|- P[<<<twice_1065@130:0>@145:1>@188:0>](
      <<twice_1065@130:0>@145:0>:int,<<<twice_1065@130:0>@145:1>@188:0>:int)
      
      P[<g_1033@147:0>](<g_1033@147:0>:int),
      P[<<f_g_1236@182:1>@184:0>](<g_1033@147:0>:int,<<g_1033@147:1>@186:0>:int), (
      <g_1033@147:0> > 0) |- P[<<g_1033@147:1>@186:0>](<g_1033@147:0>:int,
                                                       <<g_1033@147:1>@186:0>:int)
      
      P[<f_g_1236@182:2>](<f_g_1236@182:0>:int,(-2 + <<f_g_1236@182:1>@184:0>):int)|- P[<<f_g_1236@182:1>@184:0>](
      <f_g_1236@182:0>:int,<<f_g_1236@182:1>@184:0>:int)
      
      P[<g_1033@147:0>](<f_g_1236@182:0>:int),
      P[<<g_1033@150:1>@180:0>]((-1 + <f_g_1236@182:0>):int,<f_g_1236@182:2>:int), (
      <f_g_1236@182:0> > 0) |- P[<f_g_1236@182:2>](<f_g_1236@182:0>:int,
                                                   <f_g_1236@182:2>:int)
      
      P[<g_1033@150:0>](<g_1033@150:0>:int),
      P[<<f_g_1236@176:1>@178:0>](<g_1033@150:0>:int,<<g_1033@150:1>@180:0>:int), (
      <g_1033@150:0> > 0) |- P[<<g_1033@150:1>@180:0>](<g_1033@150:0>:int,
                                                       <<g_1033@150:1>@180:0>:int)
      
      P[<f_g_1236@176:2>](<f_g_1236@176:0>:int,(-2 + <<f_g_1236@176:1>@178:0>):int)|- P[<<f_g_1236@176:1>@178:0>](
      <f_g_1236@176:0>:int,<<f_g_1236@176:1>@178:0>:int)
      
      P[<g_1033@150:0>](<f_g_1236@176:0>:int),
      P[<<g_1033@153:1>@174:0>]((-1 + <f_g_1236@176:0>):int,<f_g_1236@176:2>:int), (
      <f_g_1236@176:0> > 0) |- P[<f_g_1236@176:2>](<f_g_1236@176:0>:int,
                                                   <f_g_1236@176:2>:int)
      
      P[<g_1033@153:0>](<g_1033@153:0>:int),
      P[<<f_g_1236@170:1>@172:0>](<g_1033@153:0>:int,<<g_1033@153:1>@174:0>:int), (
      <g_1033@153:0> > 0) |- P[<<g_1033@153:1>@174:0>](<g_1033@153:0>:int,
                                                       <<g_1033@153:1>@174:0>:int)
      
      P[<f_g_1236@170:2>](<f_g_1236@170:0>:int,(-2 + <<f_g_1236@170:1>@172:0>):int)|- P[<<f_g_1236@170:1>@172:0>](
      <f_g_1236@170:0>:int,<<f_g_1236@170:1>@172:0>:int)
      
      P[<g_1033@153:0>](<f_g_1236@170:0>:int),
      P[<<g_1033@156:1>@168:0>]((-1 + <f_g_1236@170:0>):int,<f_g_1236@170:2>:int), (
      <f_g_1236@170:0> > 0) |- P[<f_g_1236@170:2>](<f_g_1236@170:0>:int,
                                                   <f_g_1236@170:2>:int)
      
      P[<g_1033@156:0>](<g_1033@156:0>:int),
      P[<<f_g_1236@164:1>@166:0>](<g_1033@156:0>:int,<<g_1033@156:1>@168:0>:int), (
      <g_1033@156:0> > 0) |- P[<<g_1033@156:1>@168:0>](<g_1033@156:0>:int,
                                                       <<g_1033@156:1>@168:0>:int)
      
      P[<f_g_1236@164:2>](<f_g_1236@164:0>:int,(-2 + <<f_g_1236@164:1>@166:0>):int)|- P[<<f_g_1236@164:1>@166:0>](
      <f_g_1236@164:0>:int,<<f_g_1236@164:1>@166:0>:int)
      
      P[<g_1033@156:0>](<f_g_1236@164:0>:int),
      P[<<g_1033@159:1>@162:0>]((-1 + <f_g_1236@164:0>):int,<f_g_1236@164:2>:int), (
      <f_g_1236@164:0> > 0) |- P[<f_g_1236@164:2>](<f_g_1236@164:0>:int,
                                                   <f_g_1236@164:2>:int)
      
      P[<g_1033@159:0>](<g_1033@159:0>:int), ((<<g_1033@159:1>@162:0> = 1) && (<g_1033@159:0> <= 0))
      |- P[<<g_1033@159:1>@162:0>](<g_1033@159:0>:int,<<g_1033@159:1>@162:0>:int)
      
      P[<g_1033@156:0>]((1 + <g_1033@159:0>):int), ((1 + <g_1033@159:0>) > 0) |- P[<g_1033@159:0>](<g_1033@159:0>:int)
      
      P[<g_1033@153:0>]((1 + <g_1033@156:0>):int), ((1 + <g_1033@156:0>) > 0) |- P[<g_1033@156:0>](<g_1033@156:0>:int)
      
      P[<g_1033@150:0>]((1 + <g_1033@153:0>):int), ((1 + <g_1033@153:0>) > 0) |- P[<g_1033@153:0>](<g_1033@153:0>:int)
      
      P[<g_1033@147:0>]((1 + <g_1033@150:0>):int), ((1 + <g_1033@150:0>) > 0) |- P[<g_1033@150:0>](<g_1033@150:0>:int)
      
      P[<main_1035@128:0>](<twice_1065@130:1>:int),
      P[<<twice_1065@130:0>@145:0>](<g_1033@147:0>:int)|- P[<g_1033@147:0>](
      <g_1033@147:0>:int)
      
      P[<twice_1065@130:1>](<<twice_1065@130:0>@132:0>:int),
      P[<<f_twice_1235@141:1>@143:0>](<<twice_1065@130:0>@132:0>:int,<<twice_1065@130:0>@145:0>:int)|- P[<<twice_1065@130:0>@145:0>](
      <<twice_1065@130:0>@145:0>:int)
      
      P[<f_twice_1235@141:3>](<f_twice_1235@141:0>:int,<<f_twice_1235@141:1>@143:0>:int)|- P[<<f_twice_1235@141:1>@143:0>](
      <f_twice_1235@141:0>:int,<<f_twice_1235@141:1>@143:0>:int)
      
      P[<twice_1065@130:1>](<f_twice_1235@141:0>:int),
      P[<<<twice_1065@130:0>@132:1>@139:0>](<f_twice_1235@141:0>:int,<f_twice_1235@141:3>:int)|- P[<f_twice_1235@141:3>](
      <f_twice_1235@141:0>:int,<f_twice_1235@141:3>:int)
      
      P[<main_1035@128:0>](<twice_1065@130:1>:int),
      P[<<g_1033@134:1>@137:0>](<<twice_1065@130:0>@132:0>:int,<<<twice_1065@130:0>@132:1>@139:0>:int)|- P[<<<twice_1065@130:0>@132:1>@139:0>](
      <<twice_1065@130:0>@132:0>:int,<<<twice_1065@130:0>@132:1>@139:0>:int)
      
      P[<g_1033@134:0>](<g_1033@134:0>:int), ((<<g_1033@134:1>@137:0> = 1) && (<g_1033@134:0> <= 0))
      |- P[<<g_1033@134:1>@137:0>](<g_1033@134:0>:int,<<g_1033@134:1>@137:0>:int)
      
      P[<main_1035@128:0>](<twice_1065@130:1>:int),
      P[<<twice_1065@130:0>@132:0>](<g_1033@134:0>:int)|- P[<g_1033@134:0>](
      <g_1033@134:0>:int)
      
      P[<twice_1065@130:1>](<<twice_1065@130:0>@132:0>:int)|- P[<<twice_1065@130:0>@132:0>](
      <<twice_1065@130:0>@132:0>:int)
      
      P[<main_1035@128:0>](<twice_1065@130:1>:int)|- P[<twice_1065@130:1>](<twice_1065@130:1>:int)
      
      P[<f_1238@126:0>](<main_1035@128:0>:int)|- P[<main_1035@128:0>](<main_1035@128:0>:int)
      
      |- P[<f_1238@126:0>](<f_1238@126:0>:int)
    call trees:
      <main_1234@123>
        <f_1238@126>
          <main_1035@128>
            <twice_1065@130>
            </<twice_1065@130:0>@132>
            <g_1033@134>
            </<g_1033@134:1>@137>
            <<<twice_1065@130:0>@132:1>@139>
              <f_twice_1235@141>
              </<f_twice_1235@141:1>@143>
            </<twice_1065@130:0>@145>
            <g_1033@147>
              <g_1033@150>
                <g_1033@153>
                  <g_1033@156>
                    <g_1033@159>
                    </<g_1033@159:1>@162>
                    <f_g_1236@164>
                    </<f_g_1236@164:1>@166>
                  </<g_1033@156:1>@168>
                  <f_g_1236@170>
                  </<f_g_1236@170:1>@172>
                </<g_1033@153:1>@174>
                <f_g_1236@176>
                </<f_g_1236@176:1>@178>
              </<g_1033@150:1>@180>
              <f_g_1236@182>
              </<f_g_1236@182:1>@184>
            </<g_1033@147:1>@186>
            <<<twice_1065@130:0>@145:1>@188>
              <<<f_twice_1235@141:1>@143:1>@190>
              </<f_twice_1235@141:2>@192>
            </<twice_1065@130:2>@194>
            <f_main_1237@196>
              <fail_1240@199>
    inlined horn clauses:
      P[<fail_1240@199:0>](<fail_1240@199:0>:bool)|- bot
      
      P[<<g_1033@134:1>@137:0>](<f_main_1237@196:0>:int,var97:int),
      P[<<g_1033@147:1>@186:0>](var97:int,<f_main_1237@196:2>:int), (
      (<f_main_1237@196:2> <> 0) && <fail_1240@199:0>) |- P[<fail_1240@199:0>](
      <fail_1240@199:0>:bool)
      
      P[<g_1033@147:0>](<g_1033@147:0>:int),
      P[<<g_1033@150:1>@180:0>]((-1 + <g_1033@147:0>):int,(-2 + <<g_1033@147:1>@186:0>):int), (
      <g_1033@147:0> > 0) |- P[<<g_1033@147:1>@186:0>](<g_1033@147:0>:int,
                                                       <<g_1033@147:1>@186:0>:int)
      
      P[<g_1033@150:0>](<g_1033@150:0>:int),
      P[<<g_1033@153:1>@174:0>]((-1 + <g_1033@150:0>):int,(-2 + <<g_1033@150:1>@180:0>):int), (
      <g_1033@150:0> > 0) |- P[<<g_1033@150:1>@180:0>](<g_1033@150:0>:int,
                                                       <<g_1033@150:1>@180:0>:int)
      
      P[<g_1033@153:0>](<g_1033@153:0>:int),
      P[<<g_1033@156:1>@168:0>]((-1 + <g_1033@153:0>):int,(-2 + <<g_1033@153:1>@174:0>):int), (
      <g_1033@153:0> > 0) |- P[<<g_1033@153:1>@174:0>](<g_1033@153:0>:int,
                                                       <<g_1033@153:1>@174:0>:int)
      
      P[<g_1033@156:0>](<g_1033@156:0>:int),
      P[<<g_1033@159:1>@162:0>]((-1 + <g_1033@156:0>):int,(-2 + <<g_1033@156:1>@168:0>):int), (
      <g_1033@156:0> > 0) |- P[<<g_1033@156:1>@168:0>](<g_1033@156:0>:int,
                                                       <<g_1033@156:1>@168:0>:int)
      
      P[<g_1033@159:0>](<g_1033@159:0>:int), ((<<g_1033@159:1>@162:0> = 1) && (<g_1033@159:0> <= 0))
      |- P[<<g_1033@159:1>@162:0>](<g_1033@159:0>:int,<<g_1033@159:1>@162:0>:int)
      
      P[<g_1033@156:0>]((1 + <g_1033@159:0>):int), ((1 + <g_1033@159:0>) > 0) |- P[<g_1033@159:0>](<g_1033@159:0>:int)
      
      P[<g_1033@153:0>]((1 + <g_1033@156:0>):int), ((1 + <g_1033@156:0>) > 0) |- P[<g_1033@156:0>](<g_1033@156:0>:int)
      
      P[<g_1033@150:0>]((1 + <g_1033@153:0>):int), ((1 + <g_1033@153:0>) > 0) |- P[<g_1033@153:0>](<g_1033@153:0>:int)
      
      P[<g_1033@147:0>]((1 + <g_1033@150:0>):int), ((1 + <g_1033@150:0>) > 0) |- P[<g_1033@150:0>](<g_1033@150:0>:int)
      
      P[<<g_1033@134:1>@137:0>](var98:int,<g_1033@147:0>:int)|- P[<g_1033@147:0>](<g_1033@147:0>:int)
      
      P[<g_1033@134:0>](<g_1033@134:0>:int), ((<<g_1033@134:1>@137:0> = 1) && (<g_1033@134:0> <= 0))
      |- P[<<g_1033@134:1>@137:0>](<g_1033@134:0>:int,<<g_1033@134:1>@137:0>:int)
      
      |- P[<g_1033@134:0>](<g_1033@134:0>:int)
    begin ParamSubstInfer.infer(15369)[3]
      
    end ParamSubstInfer.infer(15369)[3] (0.357946 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(15371)[3]
      
    end RefTypeInfer.elim_coeffs(15371)[3] (0.000000 sec.)
    begin YhornInterface.solve(15814)[3]
      begin HcSolver.solve_ub(15815)[4]
        encoded:
          P[<fail_1240@199:0>](<fail_1240@199:0>:int)|- bot
          
          P[<<g_1033@134:1>@137:0>](<f_main_1237@196:0>:int,var97:int),
          P[<<g_1033@147:1>@186:0>](var97:int,<f_main_1237@196:2>:int),
          ((<f_main_1237@196:2> <> 0) && (<fail_1240@199:0> = 1)) |- P[<fail_1240@199:0>](
          <fail_1240@199:0>:int)
          
          P[<g_1033@147:0>](<g_1033@147:0>:int),
          P[<<g_1033@150:1>@180:0>]((-1 + <g_1033@147:0>):int,(-2 + <<g_1033@147:1>@186:0>):int), (
          <g_1033@147:0> > 0) |- P[<<g_1033@147:1>@186:0>](<g_1033@147:0>:int,
                                                           <<g_1033@147:1>@186:0>:int)
          
          P[<g_1033@150:0>](<g_1033@150:0>:int),
          P[<<g_1033@153:1>@174:0>]((-1 + <g_1033@150:0>):int,(-2 + <<g_1033@150:1>@180:0>):int), (
          <g_1033@150:0> > 0) |- P[<<g_1033@150:1>@180:0>](<g_1033@150:0>:int,
                                                           <<g_1033@150:1>@180:0>:int)
          
          P[<g_1033@153:0>](<g_1033@153:0>:int),
          P[<<g_1033@156:1>@168:0>]((-1 + <g_1033@153:0>):int,(-2 + <<g_1033@153:1>@174:0>):int), (
          <g_1033@153:0> > 0) |- P[<<g_1033@153:1>@174:0>](<g_1033@153:0>:int,
                                                           <<g_1033@153:1>@174:0>:int)
          
          P[<g_1033@156:0>](<g_1033@156:0>:int),
          P[<<g_1033@159:1>@162:0>]((-1 + <g_1033@156:0>):int,(-2 + <<g_1033@156:1>@168:0>):int), (
          <g_1033@156:0> > 0) |- P[<<g_1033@156:1>@168:0>](<g_1033@156:0>:int,
                                                           <<g_1033@156:1>@168:0>:int)
          
          P[<g_1033@159:0>](<g_1033@159:0>:int), ((<<g_1033@159:1>@162:0> = 1) && (<g_1033@159:0> <= 0))
          |- P[<<g_1033@159:1>@162:0>](<g_1033@159:0>:int,<<g_1033@159:1>@162:0>:int)
          
          P[<g_1033@156:0>]((1 + <g_1033@159:0>):int), ((1 + <g_1033@159:0>) > 0)
          |- P[<g_1033@159:0>](<g_1033@159:0>:int)
          
          P[<g_1033@153:0>]((1 + <g_1033@156:0>):int), ((1 + <g_1033@156:0>) > 0)
          |- P[<g_1033@156:0>](<g_1033@156:0>:int)
          
          P[<g_1033@150:0>]((1 + <g_1033@153:0>):int), ((1 + <g_1033@153:0>) > 0)
          |- P[<g_1033@153:0>](<g_1033@153:0>:int)
          
          P[<g_1033@147:0>]((1 + <g_1033@150:0>):int), ((1 + <g_1033@150:0>) > 0)
          |- P[<g_1033@150:0>](<g_1033@150:0>:int)
          
          P[<<g_1033@134:1>@137:0>](var98:int,<g_1033@147:0>:int)|- P[<g_1033@147:0>](<g_1033@147:0>:int)
          
          P[<g_1033@134:0>](<g_1033@134:0>:int), ((<<g_1033@134:1>@137:0> = 1) && (<g_1033@134:0> <= 0))
          |- P[<<g_1033@134:1>@137:0>](<g_1033@134:0>:int,<<g_1033@134:1>@137:0>:int)
          
          |- P[<g_1033@134:0>](<g_1033@134:0>:int)
        input to Yhorn:
          P[<fail_1240@199:0>](<fail_1240@199:0>:int)|- bot
          
          P[<<g_1033@134:1>@137:0>](<f_main_1237@196:0>:int,var97:int),
          P[<<g_1033@147:1>@186:0>](var97:int,<f_main_1237@196:2>:int),
          ((<f_main_1237@196:2> <> 0) && (<fail_1240@199:0> = 1)) |- P[<fail_1240@199:0>](
          <fail_1240@199:0>:int)
          
          P[<g_1033@147:0>](<g_1033@147:0>:int),
          P[<<g_1033@150:1>@180:0>](var99:int,var100:int),
          (((2 + var100) = <<g_1033@147:1>@186:0>) && (((1 + var99) = <g_1033@147:0>) && (<g_1033@147:0> > 0)))
          |- P[<<g_1033@147:1>@186:0>](<g_1033@147:0>:int,<<g_1033@147:1>@186:0>:int)
          
          P[<g_1033@150:0>](<g_1033@150:0>:int),
          P[<<g_1033@153:1>@174:0>](var101:int,var102:int),
          (((2 + var102) = <<g_1033@150:1>@180:0>) && (((1 + var101) = <g_1033@150:0>) && (<g_1033@150:0> > 0)))
          |- P[<<g_1033@150:1>@180:0>](<g_1033@150:0>:int,<<g_1033@150:1>@180:0>:int)
          
          P[<g_1033@153:0>](<g_1033@153:0>:int),
          P[<<g_1033@156:1>@168:0>](var103:int,var104:int),
          (((2 + var104) = <<g_1033@153:1>@174:0>) && (((1 + var103) = <g_1033@153:0>) && (<g_1033@153:0> > 0)))
          |- P[<<g_1033@153:1>@174:0>](<g_1033@153:0>:int,<<g_1033@153:1>@174:0>:int)
          
          P[<g_1033@156:0>](<g_1033@156:0>:int),
          P[<<g_1033@159:1>@162:0>](var105:int,var106:int),
          (((2 + var106) = <<g_1033@156:1>@168:0>) && (((1 + var105) = <g_1033@156:0>) && (<g_1033@156:0> > 0)))
          |- P[<<g_1033@156:1>@168:0>](<g_1033@156:0>:int,<<g_1033@156:1>@168:0>:int)
          
          P[<g_1033@159:0>](<g_1033@159:0>:int), ((<g_1033@159:0> <= 0) && (<<g_1033@159:1>@162:0> = 1))
          |- P[<<g_1033@159:1>@162:0>](<g_1033@159:0>:int,<<g_1033@159:1>@162:0>:int)
          
          P[<g_1033@156:0>](var107:int), ((var107 = (1 + <g_1033@159:0>)) && ((1 + <g_1033@159:0>) > 0))
          |- P[<g_1033@159:0>](<g_1033@159:0>:int)
          
          P[<g_1033@153:0>](var108:int), ((var108 = (1 + <g_1033@156:0>)) && ((1 + <g_1033@156:0>) > 0))
          |- P[<g_1033@156:0>](<g_1033@156:0>:int)
          
          P[<g_1033@150:0>](var109:int), ((var109 = (1 + <g_1033@153:0>)) && ((1 + <g_1033@153:0>) > 0))
          |- P[<g_1033@153:0>](<g_1033@153:0>:int)
          
          P[<g_1033@147:0>](var110:int), ((var110 = (1 + <g_1033@150:0>)) && ((1 + <g_1033@150:0>) > 0))
          |- P[<g_1033@150:0>](<g_1033@150:0>:int)
          
          P[<<g_1033@134:1>@137:0>](var98:int,<g_1033@147:0>:int)|- P[<g_1033@147:0>](<g_1033@147:0>:int)
          
          P[<g_1033@134:0>](<g_1033@134:0>:int), ((<g_1033@134:0> <= 0) && (<<g_1033@134:1>@137:0> = 1))
          |- P[<<g_1033@134:1>@137:0>](<g_1033@134:0>:int,<<g_1033@134:1>@137:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1240_sep_199_sep_0($462)) -> 1=0.
(($462-1=0) & ($463<>0)) & (v_sep_g_1033_sep_147_sep_1_sep_186_sep_0($464,$463)) & (v_sep_g_1033_sep_134_sep_1_sep_137_sep_0($465,$464)) -> v_sep_fail_1240_sep_199_sep_0($462).
(($466>0) & (-$466+$467+1=0) & ($468-$469+2=0)) & (v_sep_g_1033_sep_150_sep_1_sep_180_sep_0($467,$468)) & (v_sep_g_1033_sep_147_sep_0($466)) -> v_sep_g_1033_sep_147_sep_1_sep_186_sep_0($466,$469).
(($470>0) & (-$470+$471+1=0) & ($472-$473+2=0)) & (v_sep_g_1033_sep_153_sep_1_sep_174_sep_0($471,$472)) & (v_sep_g_1033_sep_150_sep_0($470)) -> v_sep_g_1033_sep_150_sep_1_sep_180_sep_0($470,$473).
(($474>0) & (-$474+$475+1=0) & ($476-$477+2=0)) & (v_sep_g_1033_sep_156_sep_1_sep_168_sep_0($475,$476)) & (v_sep_g_1033_sep_153_sep_0($474)) -> v_sep_g_1033_sep_153_sep_1_sep_174_sep_0($474,$477).
(($478>0) & (-$478+$479+1=0) & ($480-$481+2=0)) & (v_sep_g_1033_sep_159_sep_1_sep_162_sep_0($479,$480)) & (v_sep_g_1033_sep_156_sep_0($478)) -> v_sep_g_1033_sep_156_sep_1_sep_168_sep_0($478,$481).
(($482-1=0) & ($483<=0)) & (v_sep_g_1033_sep_159_sep_0($483)) -> v_sep_g_1033_sep_159_sep_1_sep_162_sep_0($483,$482).
(($483+1>0) & (-$483+$484-1=0)) & (v_sep_g_1033_sep_156_sep_0($484)) -> v_sep_g_1033_sep_159_sep_0($483).
(($478+1>0) & (-$478+$485-1=0)) & (v_sep_g_1033_sep_153_sep_0($485)) -> v_sep_g_1033_sep_156_sep_0($478).
(($474+1>0) & (-$474+$486-1=0)) & (v_sep_g_1033_sep_150_sep_0($486)) -> v_sep_g_1033_sep_153_sep_0($474).
(($470+1>0) & (-$470+$487-1=0)) & (v_sep_g_1033_sep_147_sep_0($487)) -> v_sep_g_1033_sep_150_sep_0($470).
(0=0) & (v_sep_g_1033_sep_134_sep_1_sep_137_sep_0($488,$466)) -> v_sep_g_1033_sep_147_sep_0($466).
(($489-1=0) & ($490<=0)) & (v_sep_g_1033_sep_134_sep_0($490)) -> v_sep_g_1033_sep_134_sep_1_sep_137_sep_0($490,$489).
0=0 -> v_sep_g_1033_sep_134_sep_0($490).


v_sep_fail_1240_sep_199_sep_0: X
v_sep_g_1033_sep_134_sep_0: X
v_sep_g_1033_sep_134_sep_1_sep_137_sep_0: X
v_sep_g_1033_sep_147_sep_0: X
v_sep_g_1033_sep_147_sep_1_sep_186_sep_0: X
v_sep_g_1033_sep_150_sep_0: X
v_sep_g_1033_sep_150_sep_1_sep_180_sep_0: X
v_sep_g_1033_sep_153_sep_0: X
v_sep_g_1033_sep_153_sep_1_sep_174_sep_0: X
v_sep_g_1033_sep_156_sep_0: X
v_sep_g_1033_sep_156_sep_1_sep_168_sep_0: X
v_sep_g_1033_sep_159_sep_0: X
v_sep_g_1033_sep_159_sep_1_sep_162_sep_0: X
.....................
v_sep_fail_1240_sep_199_sep_0: X
v_sep_g_1033_sep_134_sep_0: X
v_sep_g_1033_sep_134_sep_1_sep_137_sep_0: X
v_sep_g_1033_sep_147_sep_0: X
v_sep_g_1033_sep_147_sep_1_sep_186_sep_0: X
v_sep_g_1033_sep_150_sep_0: X
v_sep_g_1033_sep_150_sep_1_sep_180_sep_0: X
v_sep_g_1033_sep_153_sep_0: X
v_sep_g_1033_sep_153_sep_1_sep_174_sep_0: X
v_sep_g_1033_sep_156_sep_0: X
v_sep_g_1033_sep_156_sep_1_sep_168_sep_0: X
v_sep_g_1033_sep_159_sep_0: X
v_sep_g_1033_sep_159_sep_1_sep_162_sep_0: X
......
v_sep_fail_1240_sep_199_sep_0: X
v_sep_g_1033_sep_134_sep_0: X
v_sep_g_1033_sep_134_sep_1_sep_137_sep_0: X
v_sep_g_1033_sep_147_sep_0: X
v_sep_g_1033_sep_147_sep_1_sep_186_sep_0: X
v_sep_g_1033_sep_150_sep_0: X
v_sep_g_1033_sep_150_sep_1_sep_180_sep_0: X
v_sep_g_1033_sep_153_sep_0: X
v_sep_g_1033_sep_153_sep_1_sep_174_sep_0: X
v_sep_g_1033_sep_156_sep_0: X
v_sep_g_1033_sep_156_sep_1_sep_168_sep_0: X
v_sep_g_1033_sep_159_sep_0: X
v_sep_g_1033_sep_159_sep_1_sep_162_sep_0: X
.........
v_sep_fail_1240_sep_199_sep_0: X
v_sep_g_1033_sep_134_sep_0: X
v_sep_g_1033_sep_134_sep_1_sep_137_sep_0: X
v_sep_g_1033_sep_147_sep_0: X
v_sep_g_1033_sep_147_sep_1_sep_186_sep_0: X
v_sep_g_1033_sep_150_sep_0: X
v_sep_g_1033_sep_150_sep_1_sep_180_sep_0: X
v_sep_g_1033_sep_153_sep_0: X
v_sep_g_1033_sep_153_sep_1_sep_174_sep_0: X
v_sep_g_1033_sep_156_sep_0: X
v_sep_g_1033_sep_156_sep_1_sep_168_sep_0: X
v_sep_g_1033_sep_159_sep_0: X
v_sep_g_1033_sep_159_sep_1_sep_162_sep_0: X
............
v_sep_fail_1240_sep_199_sep_0: X
v_sep_g_1033_sep_134_sep_0: X
v_sep_g_1033_sep_134_sep_1_sep_137_sep_0: X
v_sep_g_1033_sep_147_sep_0: X
v_sep_g_1033_sep_147_sep_1_sep_186_sep_0: X
v_sep_g_1033_sep_150_sep_0: X
v_sep_g_1033_sep_150_sep_1_sep_180_sep_0: X
v_sep_g_1033_sep_153_sep_0: X
v_sep_g_1033_sep_153_sep_1_sep_174_sep_0: X
v_sep_g_1033_sep_156_sep_0: X
v_sep_g_1033_sep_156_sep_1_sep_168_sep_0: X
v_sep_g_1033_sep_159_sep_0: X
v_sep_g_1033_sep_159_sep_1_sep_162_sep_0: X
...............
v_sep_fail_1240_sep_199_sep_0: X
v_sep_g_1033_sep_134_sep_0: X
v_sep_g_1033_sep_134_sep_1_sep_137_sep_0: X
v_sep_g_1033_sep_147_sep_0: X
v_sep_g_1033_sep_147_sep_1_sep_186_sep_0: X
v_sep_g_1033_sep_150_sep_0: X
v_sep_g_1033_sep_150_sep_1_sep_180_sep_0: X
v_sep_g_1033_sep_153_sep_0: X
v_sep_g_1033_sep_153_sep_1_sep_174_sep_0: X
v_sep_g_1033_sep_156_sep_0: X
v_sep_g_1033_sep_156_sep_1_sep_168_sep_0: X
v_sep_g_1033_sep_159_sep_0: X
v_sep_g_1033_sep_159_sep_1_sep_162_sep_0: X
..................
v_sep_fail_1240_sep_199_sep_0: X
v_sep_g_1033_sep_134_sep_0: X
v_sep_g_1033_sep_134_sep_1_sep_137_sep_0: X
v_sep_g_1033_sep_147_sep_0: X
v_sep_g_1033_sep_147_sep_1_sep_186_sep_0: X
v_sep_g_1033_sep_150_sep_0: X
v_sep_g_1033_sep_150_sep_1_sep_180_sep_0: X
v_sep_g_1033_sep_153_sep_0: X
v_sep_g_1033_sep_153_sep_1_sep_174_sep_0: X
v_sep_g_1033_sep_156_sep_0: X
v_sep_g_1033_sep_156_sep_1_sep_168_sep_0: X
v_sep_g_1033_sep_159_sep_0: X
v_sep_g_1033_sep_159_sep_1_sep_162_sep_0: X
....................
v_sep_fail_1240_sep_199_sep_0: X
v_sep_g_1033_sep_134_sep_0: X
v_sep_g_1033_sep_134_sep_1_sep_137_sep_0: X
v_sep_g_1033_sep_147_sep_0: X
v_sep_g_1033_sep_147_sep_1_sep_186_sep_0: X
v_sep_g_1033_sep_150_sep_0: X
v_sep_g_1033_sep_150_sep_1_sep_180_sep_0: X
v_sep_g_1033_sep_153_sep_0: X
v_sep_g_1033_sep_153_sep_1_sep_174_sep_0: X
v_sep_g_1033_sep_156_sep_0: X
v_sep_g_1033_sep_156_sep_1_sep_168_sep_0: X
v_sep_g_1033_sep_159_sep_0: X
v_sep_g_1033_sep_159_sep_1_sep_162_sep_0: X
.....................(0=0) & (v_sep_fail_1240_sep_199_sep_0($462)) -> 1=0.
(($462-1=0) & ($463<>0)) & (v_sep_g_1033_sep_147_sep_1_sep_186_sep_0($464,$463)) & (v_sep_g_1033_sep_134_sep_1_sep_137_sep_0($465,$464)) -> v_sep_fail_1240_sep_199_sep_0($462).
(($466>0) & (-$466+$467+1=0) & ($468-$469+2=0)) & (v_sep_g_1033_sep_150_sep_1_sep_180_sep_0($467,$468)) & (v_sep_g_1033_sep_147_sep_0($466)) -> v_sep_g_1033_sep_147_sep_1_sep_186_sep_0($466,$469).
(($470>0) & (-$470+$471+1=0) & ($472-$473+2=0)) & (v_sep_g_1033_sep_153_sep_1_sep_174_sep_0($471,$472)) & (v_sep_g_1033_sep_150_sep_0($470)) -> v_sep_g_1033_sep_150_sep_1_sep_180_sep_0($470,$473).
(($474>0) & (-$474+$475+1=0) & ($476-$477+2=0)) & (v_sep_g_1033_sep_156_sep_1_sep_168_sep_0($475,$476)) & (v_sep_g_1033_sep_153_sep_0($474)) -> v_sep_g_1033_sep_153_sep_1_sep_174_sep_0($474,$477).
(($478>0) & (-$478+$479+1=0) & ($480-$481+2=0)) & (v_sep_g_1033_sep_159_sep_1_sep_162_sep_0($479,$480)) & (v_sep_g_1033_sep_156_sep_0($478)) -> v_sep_g_1033_sep_156_sep_1_sep_168_sep_0($478,$481).
(($482-1=0) & ($483<=0)) & (v_sep_g_1033_sep_159_sep_0($483)) -> v_sep_g_1033_sep_159_sep_1_sep_162_sep_0($483,$482).
(($483+1>0) & (-$483+$484-1=0)) & (v_sep_g_1033_sep_156_sep_0($484)) -> v_sep_g_1033_sep_159_sep_0($483).
(($478+1>0) & (-$478+$485-1=0)) & (v_sep_g_1033_sep_153_sep_0($485)) -> v_sep_g_1033_sep_156_sep_0($478).
(($474+1>0) & (-$474+$486-1=0)) & (v_sep_g_1033_sep_150_sep_0($486)) -> v_sep_g_1033_sep_153_sep_0($474).
(($470+1>0) & (-$470+$487-1=0)) & (v_sep_g_1033_sep_147_sep_0($487)) -> v_sep_g_1033_sep_150_sep_0($470).
(0=0) & (v_sep_g_1033_sep_134_sep_1_sep_137_sep_0($488,$466)) -> v_sep_g_1033_sep_147_sep_0($466).
(($489-1=0) & ($490<=0)) & (v_sep_g_1033_sep_134_sep_0($490)) -> v_sep_g_1033_sep_134_sep_1_sep_137_sep_0($490,$489).
0=0 -> v_sep_g_1033_sep_134_sep_0($490).

          |- P[<g_1033@134:0>](<g_1033@134:0>:int)
        solution:
          P[<fail_1240@199:0>]($491:bool) = false
          P[<g_1033@134:0>]($539:int) = true
          P[<<g_1033@134:1>@137:0>]($499:int,$501:int) = ($501 <= 1)
          P[<g_1033@147:0>]($509:int) = ($509 <= 1)
          P[<<g_1033@147:1>@186:0>]($494:int,$496:int) = (13 <= $494)
          P[<g_1033@150:0>]($517:int) = ($517 <= 0)
          P[<<g_1033@150:1>@180:0>]($504:int,$506:int) = false
          P[<g_1033@153:0>]($525:int) = ((1 + $525) <= 0)
          P[<<g_1033@153:1>@174:0>]($512:int,$514:int) = (11 <= $512)
          P[<g_1033@156:0>]($533:int) = ((2 + $533) <= 0)
          P[<<g_1033@156:1>@168:0>]($520:int,$522:int) = (4 <= $520)
          P[<g_1033@159:0>]($536:int) = false
          P[<<g_1033@159:1>@162:0>]($528:int,$530:int) = false
        
      end HcSolver.solve_ub(15815)[4] (0.096985 sec.)
      begin HcSolver.check_validity(16586)[4]
        input:
          P[<fail_1240@199:0>](<fail_1240@199:0>:bool)|- bot
          
          P[<<g_1033@134:1>@137:0>](<f_main_1237@196:0>:int,var97:int),
          P[<<g_1033@147:1>@186:0>](var97:int,<f_main_1237@196:2>:int),
          ((<f_main_1237@196:2> <> 0) && <fail_1240@199:0>) |- P[<fail_1240@199:0>](
          <fail_1240@199:0>:bool)
          
          P[<g_1033@147:0>](<g_1033@147:0>:int),
          P[<<g_1033@150:1>@180:0>]((-1 + <g_1033@147:0>):int,(-2 + <<g_1033@147:1>@186:0>):int), (
          <g_1033@147:0> > 0) |- P[<<g_1033@147:1>@186:0>](<g_1033@147:0>:int,
                                                           <<g_1033@147:1>@186:0>:int)
          
          P[<g_1033@150:0>](<g_1033@150:0>:int),
          P[<<g_1033@153:1>@174:0>]((-1 + <g_1033@150:0>):int,(-2 + <<g_1033@150:1>@180:0>):int), (
          <g_1033@150:0> > 0) |- P[<<g_1033@150:1>@180:0>](<g_1033@150:0>:int,
                                                           <<g_1033@150:1>@180:0>:int)
          
          P[<g_1033@153:0>](<g_1033@153:0>:int),
          P[<<g_1033@156:1>@168:0>]((-1 + <g_1033@153:0>):int,(-2 + <<g_1033@153:1>@174:0>):int), (
          <g_1033@153:0> > 0) |- P[<<g_1033@153:1>@174:0>](<g_1033@153:0>:int,
                                                           <<g_1033@153:1>@174:0>:int)
          
          P[<g_1033@156:0>](<g_1033@156:0>:int),
          P[<<g_1033@159:1>@162:0>]((-1 + <g_1033@156:0>):int,(-2 + <<g_1033@156:1>@168:0>):int), (
          <g_1033@156:0> > 0) |- P[<<g_1033@156:1>@168:0>](<g_1033@156:0>:int,
                                                           <<g_1033@156:1>@168:0>:int)
          
          P[<g_1033@159:0>](<g_1033@159:0>:int), ((<<g_1033@159:1>@162:0> = 1) && (<g_1033@159:0> <= 0))
          |- P[<<g_1033@159:1>@162:0>](<g_1033@159:0>:int,<<g_1033@159:1>@162:0>:int)
          
          P[<g_1033@156:0>]((1 + <g_1033@159:0>):int), ((1 + <g_1033@159:0>) > 0)
          |- P[<g_1033@159:0>](<g_1033@159:0>:int)
          
          P[<g_1033@153:0>]((1 + <g_1033@156:0>):int), ((1 + <g_1033@156:0>) > 0)
          |- P[<g_1033@156:0>](<g_1033@156:0>:int)
          
          P[<g_1033@150:0>]((1 + <g_1033@153:0>):int), ((1 + <g_1033@153:0>) > 0)
          |- P[<g_1033@153:0>](<g_1033@153:0>:int)
          
          P[<g_1033@147:0>]((1 + <g_1033@150:0>):int), ((1 + <g_1033@150:0>) > 0)
          |- P[<g_1033@150:0>](<g_1033@150:0>:int)
          
          P[<<g_1033@134:1>@137:0>](var98:int,<g_1033@147:0>:int)|- P[<g_1033@147:0>](<g_1033@147:0>:int)
          
          P[<g_1033@134:0>](<g_1033@134:0>:int), ((<<g_1033@134:1>@137:0> = 1) && (<g_1033@134:0> <= 0))
          |- P[<<g_1033@134:1>@137:0>](<g_1033@134:0>:int,<<g_1033@134:1>@137:0>:int)
          
          |- P[<g_1033@134:0>](<g_1033@134:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(16586)[4] (0.004000 sec.)
      solution:
        P[<fail_1240@199:0>]($491:bool) = false
        P[<g_1033@134:0>]($539:int) = true
        P[<<g_1033@134:1>@137:0>]($499:int,$501:int) = ($501 <= 1)
        P[<g_1033@147:0>]($509:int) = ($509 <= 1)
        P[<<g_1033@147:1>@186:0>]($494:int,$496:int) = (13 <= $494)
        P[<g_1033@150:0>]($517:int) = ($517 <= 0)
        P[<<g_1033@150:1>@180:0>]($504:int,$506:int) = false
        P[<g_1033@153:0>]($525:int) = ((1 + $525) <= 0)
        P[<<g_1033@153:1>@174:0>]($512:int,$514:int) = (11 <= $512)
        P[<g_1033@156:0>]($533:int) = ((2 + $533) <= 0)
        P[<<g_1033@156:1>@168:0>]($520:int,$522:int) = (4 <= $520)
        P[<g_1033@159:0>]($536:int) = false
        P[<<g_1033@159:1>@162:0>]($528:int,$530:int) = false
    end YhornInterface.solve(15814)[3] (0.101985 sec.)
    
  end RefTypeInfer.infer_etrs(11648)[2] (0.483927 sec.)
  refinement types:
    main_1234: X
    f_1238: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    twice_1065: (v1:int -> (v2:int -> X) -> X /\
                 v5:int -> (v6:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    g_1033: v1:int -> (v2:{v2:int | (v2 <= 1)} -> X) -> X
    f_twice_1235: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    g_1033: v1:{v1:int | (v1 <= 1)} -> (v2:{v2:int | (13 <= v1)} -> X) -> X
    g_1033: v1:{v1:int | (v1 <= 0)} -> (v2:{v2:int | false} -> X) -> X
    g_1033: v1:{v1:int | ((1 + v1) <= 0)} -> (v2:{v2:int | (11 <= v1)} -> X) -> X
    g_1033: v1:{v1:int | ((2 + v1) <= 0)} -> (v2:{v2:int | (4 <= v1)} -> X) -> X
    g_1033: v1:{v1:int | false} -> (v2:{v2:int | false} -> X) -> X
    f_g_1236: v1:int -> (v2:int -> X) -> v4:int -> X
    f_g_1236: v1:int -> (v2:int -> X) -> v4:int -> X
    f_g_1236: v1:int -> (v2:int -> X) -> v4:int -> X
    f_g_1236: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1237: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1240: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1239: var119:int -> var118:unit -> X
  abstraction types:
    main_1234: X
    f_1238: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    twice_1065: (var120:int -> (var121:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    g_1033: var140:int[var140 -> (var140 <= 1),
                       var140 -> (var140 <= 0),
                       var140 -> ((1 + var140) <= 0),
                       var140 -> ((2 + var140) <= 0)] ->
            (var141:int[var141 -> (var141 <= 1),
                        var141 -> (13 <= var140),
                        var141 -> (11 <= var140),
                        var141 -> (4 <= var140)] -> X) -> X
    f_twice_1235: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    f_g_1236: var154:int -> (var155:int -> X) -> var157:int -> X
    f_main_1237: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1240: v1:bool -> (v2:unit -> X) -> X
    f_1239: var119:int -> var118:unit -> X
  
end AbsTypeInfer.refine(11647)[1] (0.491926 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1234
  main_1234 -> (rand_int f_1238)
  f_1238 x_1209 -> (main_1035 x_1209 (f_1239 x_1209))
  f_1239 x_1209 x_1206 -> end
  f_g_1236 x_1034 k_g_1139 x_1143 -> (k_g_1139 (2 + x_1143))
  f_main_1237 n_1036 k_main_1171 x_1174 when (x_1174 = 0) -> (k_main_1171 ())
  f_main_1237 n_1036 k_main_1171 x_1174 when (not (x_1174 = 0)) -> (fail_1240 true k_main_1171)
  f_twice_1235 x_1032 f_1031 k_twice_1105 x_1125 -> (f_1031 x_1125 k_twice_1105)
  fail_1240 b k -> {fail} => (k ())
  g_1033 x_1034 k_g_1139 when (x_1034 <= 0) -> (k_g_1139 1)
  g_1033 x_1034 k_g_1139 when (not (x_1034 <= 0)) -> (g_1033 (x_1034 - 1) (f_g_1236 x_1034 k_g_1139))
  main_1035 n_1036 k_main_1171 -> (twice_1065 g_1033 n_1036 (f_main_1237 n_1036 k_main_1171))
  twice_1065 f_1031 x_1032 k_twice_1105 -> (f_1031 x_1032 (f_twice_1235 x_1032 f_1031 k_twice_1105))
Types:
  main_1234 : X
  fail_1240 : (x_1:bool[x_1] -> (unit -> X) -> X)
  g_1033 : (x_1:int[x_1 <= -2; x_1 <= -1; x_1 <= 0; x_1 <= 1; x_1 >= 3; x_1 >= 4; x_1 >= 5; x_1 >= 1] ->
            (x_3:int[x_1 >= 4; x_1 >= 11; x_1 >= 13; x_3 <= 1; x_1 <= -2; 
                     x_1 <= -7; x_3 >= 3; x_3 >= 5; x_1 <= -1; x_3 >= 1] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1234 ... --> 
  f_1238 ... --> 
  main_1035 ... --> 
  twice_1065 ... --> 
  g_1033 [1/2] ... --> 
  f_twice_1235 ... --> 
  g_1033 [2/2] ... --> 
  g_1033 [1/2] ... --> 
  f_g_1236 ... --> 
  f_main_1237 [2/2] ... --> 
  fail_1240 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0; 0; 1; 0

(3-3) Checking counter-example ... begin Cvc3Interface.solve(25422)[1]
  CVC3 input: PUSH;cnt821_v_sep_r_3669:INT;CHECKSAT (TRUE AND ((NOT ((2 + 1) = 0)) AND (TRUE AND (((1 - 1) <= 0) AND ((NOT (1 <= 0)) AND (TRUE AND ((cnt821_v_sep_r_3669 <= 0) AND (TRUE AND (TRUE AND (TRUE AND TRUE))))))))));COUNTERMODEL;POP;
  CVC3 output: CVC> Satisfiable.
  CVC3 output: Current scope level is 9.
  CVC3 output: %Satisfiable  Variable Assignment: % 
  CVC3 output: ASSERT (cnt821_v_sep_r_3669 = 0);
  CVC3 output: CVC> 
  v_sep_r_3669 = 0
  end Cvc3Interface.solve(25422)[1] (0.004999 sec.)
DONE!

Unsafe!

Input for main:
  0
Error trace:
  main 0 ->
    twice <fun> 0 ->
      g 0 ->
        if true then ... ->
      g 1 ->
        if false then ... ->
        g 0 ->
          if true then ... ->
    if false then ... ->
    FAIL!

cycles: 3
total: 3.057 sec
  abst: 0.151 sec
  mc: 0.712 sec
  refine: 0.890 sec
    exparam: 0.445 sec
