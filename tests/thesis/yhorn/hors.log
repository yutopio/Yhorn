MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn hors.ml

parsed::
 let c_1030 q_1031 = () 
 in
 let b_1032 x_1033 q_1034 = x_1033 1 
 in
 let a_1035 x_1036 y_1037 q_1038 =
   if q_1038 = 0 then
     let u_1073 = x_1036 0 
     in
       y_1037 0
   else
     let u_1074 = {fail} () 
     in
       _|_ 
 in
 let rec f_1039 n_1040 x_1041 q_1042 =
   if n_1040 <= 0 then
     x_1041 q_1042
   else
     a_1035 x_1041 (f_1039 (n_1040 - 1) (b_1032 x_1041)) q_1042 
 in
 let s_1043 n_1044 q_1045 = f_1039 n_1044 c_1030 q_1045 
 in
 let main_1046 n_1047 = s_1043 n_1047 0 
 in
   ()

set_target::
 let c_1030 q_1031 = () 
 in
 let b_1032 x_1033 q_1034 = x_1033 1 
 in
 let a_1035 x_1036 y_1037 q_1038 =
   if q_1038 = 0 then
     let u_1073 = x_1036 0 
     in
       y_1037 0
   else
     let u_1074 = {fail} () 
     in
       _|_ 
 in
 let rec f_1039 n_1040 x_1041 q_1042 =
   if n_1040 <= 0 then
     x_1041 q_1042
   else
     a_1035 x_1041 (f_1039 (n_1040 - 1) (b_1032 x_1041)) q_1042 
 in
 let s_1043 n_1044 q_1045 = f_1039 n_1044 c_1030 q_1045 
 in
 let main_1046 n_1047 = s_1043 n_1047 0 
 in
 let main_1135 = let arg1_1134 = rand_int () 
                 in
                   main_1046 arg1_1134 
 in
   ()

copy_poly::
 let c_1139 (q_1031:int) = () 
 in
 let b_1138 (x_1033:(int -> unit)) (q_1034:int) = x_1033 1 
 in
 let a_1137 (x_1036:(int -> unit)) (y_1037:(int -> unit)) (q_1038:int) =
   if q_1038 = 0 then
     let u_1073 = x_1036 0 
     in
       y_1037 0
   else
     let u_1074 = {fail} () 
     in
       _|_ 
 in
 let rec f_1136 (n_1040:int) (x_1041:(int -> unit)) (q_1042:int) =
   if n_1040 <= 0 then
     x_1041 q_1042
   else
     a_1137 x_1041 (f_1136 (n_1040 - 1) (b_1138 x_1041)) q_1042 
 in
 let s_1043 (n_1044:int) (q_1045:int) = f_1136 n_1044 c_1139 q_1045 
 in
 let main_1046 (n_1047:int) = s_1043 n_1047 0 
 in
 let main_1135 = let arg1_1134 = rand_int () 
                 in
                   main_1046 arg1_1134 
 in
   ()

CPS::
 let c_1139 (q_1031:int) (k_c_1164:(unit -> X)) = k_c_1164 () 
 in
 let b_1138 (x_1033:(int -> ((unit -> X) -> X))) (q_1034:int) (k_b_1193:(unit -> X)) = x_1033 1 k_b_1193 
 in
 let a_1137
   (x_1036:(int -> ((unit -> X) -> X))) (y_1037:(int -> ((unit -> X) -> X))) (q_1038:int) (k_a_1247:(
   unit -> X)) = if q_1038 = 0 then
                   x_1036 0 (fun x_1250 -> y_1037 0 k_a_1247)
                 else
                   {|fail|} () (fun x_1273 -> _|_) 
 in
 let rec f_1136 (n_1040:int) (x_1041:(int -> ((unit -> X) -> X))) (q_1042:int) (k_f_1318:(
   unit -> X)) =
   if n_1040 <= 0 then
     x_1041 q_1042 k_f_1318
   else
     a_1137 x_1041 (f_1136 (n_1040 - 1) (b_1138 x_1041)) q_1042 k_f_1318 
 in
 let s_1043 (n_1044:int) (q_1045:int) (k_s_1388:(unit -> X)) = f_1136 n_1044 c_1139 q_1045 k_s_1388 
 in
 let main_1046 (n_1047:int) (k_main_1420:(unit -> X)) = s_1043 n_1047 0 k_main_1420 
 in
   rand_int_cps () (fun x_1437 -> main_1046 x_1437 (fun x_1434 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1462
  main_1462 -> (rand_int f_1465)
  a_1137 x_1036 y_1037 q_1038 k_a_1247 when (q_1038 = 0) -> (x_1036 0 (f_a_1463 q_1038 k_a_1247 y_1037))
  a_1137 x_1036 y_1037 q_1038 k_a_1247 when (not (q_1038 = 0)) -> (fail_1467 true (f_a_1464 q_1038))
  b_1138 x_1033 q_1034 k_b_1193 -> (x_1033 1 k_b_1193)
  c_1139 q_1031 k_c_1164 -> (k_c_1164 ())
  f_1136 n_1040 x_1041 q_1042 k_f_1318 when (n_1040 <= 0) -> (x_1041 q_1042 k_f_1318)
  f_1136 n_1040 x_1041 q_1042 k_f_1318 when (not (n_1040 <= 0)) ->
      (a_1137 x_1041 (f_1136 (n_1040 - 1) (b_1138 x_1041)) q_1042 k_f_1318)
  f_1465 x_1437 -> (main_1046 x_1437 (f_1466 x_1437))
  f_1466 x_1437 x_1434 -> end
  f_a_1463 q_1038 k_a_1247 y_1037 x_1250 -> (y_1037 0 k_a_1247)
  f_a_1464 q_1038 x_1273 -> _|_
  fail_1467 b k -> {fail} => (k ())
  main_1046 n_1047 k_main_1420 -> (s_1043 n_1047 0 k_main_1420)
  s_1043 n_1044 q_1045 k_s_1388 -> (f_1136 n_1044 c_1139 q_1045 k_s_1388)
Types:
  main_1462 : X
  f_1136 : (int -> (int -> (unit -> X) -> X) -> int -> (unit -> X) -> X)
  fail_1467 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1462 ... --> 
  f_1465 ... --> 
  main_1046 ... --> 
  s_1043 ... --> 
  f_1136 [2/2] ... --> 
  a_1137 [2/2] ... --> 
  fail_1467 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(96)[1]
  program:
    main_1462  | true = ((Random.int 0) f_1465)
    a_1137 x_1036 y_1037 q_1038 k_a_1247 | (q_1038 = 0) = (x_1036 0
                                                                  (f_a_1463 q_1038
                                                                    k_a_1247
                                                                    y_1037))
    a_1137 x_1036 y_1037 q_1038 k_a_1247 | (not (q_1038 = 0)) = (fail_1467 true
                                                                    (f_a_1464 q_1038))
    b_1138 x_1033 q_1034 k_b_1193 | true = (x_1033 1
                                                   k_b_1193)
    c_1139 q_1031 k_c_1164 | true = (k_c_1164 ())
    f_1136 n_1040 x_1041 q_1042 k_f_1318 | (n_1040 <= 0) = (x_1041 q_1042
                                                                   k_f_1318)
    f_1136 n_1040 x_1041 q_1042 k_f_1318 | (not (n_1040 <= 0)) = (a_1137
                                                                    x_1041
                                                                    (
                                                                    f_1136 (
                                                                    n_1040 - 1)
                                                                    (b_1138 x_1041))
                                                                    q_1042
                                                                    k_f_1318)
    f_1465 x_1437 | true = (main_1046 x_1437
                                      (f_1466 x_1437))
    f_1466 x_1437 x_1434 | true = end
    f_a_1463 q_1038 k_a_1247 y_1037 x_1250 | true = (y_1037 0
                                                            k_a_1247)
    f_a_1464 q_1038 x_1273 | true = bot
    fail_1467 b k | true = (fail ())
    main_1046 n_1047 k_main_1420 | true = (s_1043 n_1047
                                                  0
                                                  k_main_1420)
    s_1043 n_1044 q_1045 k_s_1388 | true = (f_1136 n_1044
                                                   c_1139
                                                   q_1045
                                                   k_s_1388)
    main_1462:X
    a_1137:(int -> (unit -> X) -> X) -> (int -> (unit -> X) -> X) -> int -> (unit -> X) -> X
    b_1138:(int -> (unit -> X) -> X) -> int -> (unit -> X) -> X
    c_1139:int -> (unit -> X) -> X
    f_1136:int -> (int -> (unit -> X) -> X) -> int -> (unit -> X) -> X
    f_1465:int -> X
    f_1466:int -> unit -> X
    f_a_1463:int -> (unit -> X) -> (int -> (unit -> X) -> X) -> unit -> X
    f_a_1464:int -> unit -> X
    fail_1467:bool -> (unit -> X) -> X
    main_1046:int -> (unit -> X) -> X
    s_1043:int -> int -> (unit -> X) -> X
  inlined functions: a_1137,b_1138,c_1139,f_1465,f_1466,f_a_1463,f_a_1464,main_1046,s_1043
  counterexample: 0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1465@4:0> = var2)
     [true.(<main_1046@6:0> = <f_1465@4:0>)
      [true.((<s_1043@8:0> = <main_1046@6:0>) && (<s_1043@8:1> = 0))
       [true.((<f_1136@10:0> = <s_1043@8:0>) && (<f_1136@10:2> = <s_1043@8:1>))
        [(not (<f_1136@10:0> <= 0)).(<a_1137@13:2> = <f_1136@10:2>)
         [(not (<a_1137@13:2> = 0)).(<fail_1467@16:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(97)[2]
    horn clauses:
      P[<fail_1467@16:0>](<fail_1467@16:0>:bool)|- bot
      
      P[<a_1137@13:2>](<a_1137@13:2>:int), ((<a_1137@13:2> <> 0) && <fail_1467@16:0>)
      |- P[<fail_1467@16:0>](<fail_1467@16:0>:bool)
      
      P[<f_1136@10:2>](<f_1136@10:0>:int,<a_1137@13:2>:int), (<f_1136@10:0> > 0) |- P[<a_1137@13:2>](<a_1137@13:2>:int)
      
      P[<s_1043@8:1>](<f_1136@10:0>:int,<f_1136@10:2>:int)|- P[<f_1136@10:2>](<f_1136@10:0>:int,
                                                                    <f_1136@10:2>:int)
      
      P[<main_1046@6:0>](<s_1043@8:0>:int), (<s_1043@8:1> = 0) |- P[<s_1043@8:1>](<s_1043@8:0>:int,
                                                                    <s_1043@8:1>:int)
      
      P[<f_1465@4:0>](<main_1046@6:0>:int)|- P[<main_1046@6:0>](<main_1046@6:0>:int)
      
      |- P[<f_1465@4:0>](<f_1465@4:0>:int)
    call trees:
      <main_1462@1>
        <f_1465@4>
          <main_1046@6>
            <s_1043@8>
              <f_1136@10>
                <a_1137@13>
                  <fail_1467@16>
    inlined horn clauses:
      P[<fail_1467@16:0>](<fail_1467@16:0>:bool)|- bot
      
      P[<f_1136@10:2>](var3:int,<a_1137@13:2>:int), ((<a_1137@13:2> <> 0) && ((var3 > 0) && <fail_1467@16:0>))
      |- P[<fail_1467@16:0>](<fail_1467@16:0>:bool)
      
       (<f_1136@10:2> = 0) |- P[<f_1136@10:2>](<f_1136@10:0>:int,<f_1136@10:2>:int)
    begin ParamSubstInfer.infer(829)[3]
      
    end ParamSubstInfer.infer(829)[3] (0.011998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(831)[3]
      
    end RefTypeInfer.elim_coeffs(831)[3] (0.000000 sec.)
    begin YhornInterface.solve(972)[3]
      begin HcSolver.solve_ub(973)[4]
        encoded:
          P[<fail_1467@16:0>](<fail_1467@16:0>:int)|- bot
          
          P[<f_1136@10:2>](var3:int,<a_1137@13:2>:int),
          ((<a_1137@13:2> <> 0) && ((var3 > 0) && (<fail_1467@16:0> = 1))) |- P[<fail_1467@16:0>](
          <fail_1467@16:0>:int)
          
           (<f_1136@10:2> = 0) |- P[<f_1136@10:2>](<f_1136@10:0>:int,
                                                   <f_1136@10:2>:int)
        input to Yhorn:
          P[<fail_1467@16:0>](<fail_1467@16:0>:int)|- bot
          
          P[<f_1136@10:2>](var3:int,<a_1137@13:2>:int),
          ((var3 > 0) && ((<a_1137@13:2> <> 0) && (<fail_1467@16:0> = 1))) |- P[<fail_1467@16:0>](
          <fail_1467@16:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1467_sep_16_sep_0($6)) -> 1=0.
(($6-1=0) & ($7<>0) & ($8>0)) & (v_sep_f_1136_sep_10_sep_2($8,$7)) -> v_sep_fail_1467_sep_16_sep_0($6).
$9=0 -> v_sep_f_1136_sep_10_sep_2($10,$9).


v_sep_f_1136_sep_10_sep_2: X
v_sep_fail_1467_sep_16_sep_0: X
....Split disj [11] 0.231964
Reconstrcut: 3 **)

v_sep_f_1136_sep_10_sep_2: X
v_sep_fail_1467_sep_16_sep_0: (X) | (X)
.....
v_sep_f_1136_sep_10_sep_2: X
v_sep_fail_1467_sep_16_sep_0: (X) | (X)
.....Split conj [13] 0.237963
(Reconstrcut: 8 **)
v_sep_f_1136_sep_10_sep_2: (X) & (X)
v_sep_fail_1467_sep_16_sep_0: (X) | (X)
.....
v_sep_f_1136_sep_10_sep_2: (X) & (X)
v_sep_fail_1467_sep_16_sep_0: (X) | (X)
.....
v_sep_f_1136_sep_10_sep_2: (X) & (X)
v_sep_fail_1467_sep_16_sep_0: (X) | (X)
.....(0=0) & (v_sep_fail_1467_sep_16_sep_0($6)) -> 1=0.
(($6-1=0) & ($7<>0) & ($8>0)) & (v_sep_f_1136_sep_10_sep_2($8,$7)) -> v_sep_fail_1467_sep_16_sep_0($6).
$9=0 -> v_sep_f_1136_sep_10_sep_2($10,$9).

           (<f_1136@10:2> = 0) |- P[<f_1136@10:2>](<f_1136@10:0>:int,
                                                   <f_1136@10:2>:int)
        solution:
          P[<f_1136@10:2>]($14:int,$16:int) = ($16 = 0)
          P[<fail_1467@16:0>]($11:bool) = false
        
      end HcSolver.solve_ub(973)[4] (0.018997 sec.)
      begin HcSolver.check_validity(1074)[4]
        input:
          P[<fail_1467@16:0>](<fail_1467@16:0>:bool)|- bot
          
          P[<f_1136@10:2>](var3:int,<a_1137@13:2>:int), ((<a_1137@13:2> <> 0) && ((var3 > 0) && <fail_1467@16:0>))
          |- P[<fail_1467@16:0>](<fail_1467@16:0>:bool)
          
           (<f_1136@10:2> = 0) |- P[<f_1136@10:2>](<f_1136@10:0>:int,
                                                   <f_1136@10:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1074)[4] (0.008999 sec.)
      solution:
        P[<f_1136@10:2>]($14:int,$16:int) = ($16 = 0)
        P[<fail_1467@16:0>]($11:bool) = false
    end YhornInterface.solve(972)[3] (0.027996 sec.)
    
  end RefTypeInfer.infer_etrs(97)[2] (0.045993 sec.)
  refinement types:
    main_1462: X
    f_1465: v1:int -> X
    main_1046: v1:int -> (v2:unit -> X) -> X
    s_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    f_1136: v1:int -> (v2:int -> (v3:unit -> X) -> X) -> v6:{v6:int | (v6 = 0)} -> (v7:unit -> X) -> X
    a_1137: (v1:int -> (v2:unit -> X) -> X) -> (v5:int -> (v6:unit -> X) -> X) -> v9:int -> (v10:unit -> X) -> X
    fail_1467: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    b_1138: (var33:int -> (var32:unit -> X) -> X) -> var29:int -> (var28:unit -> X) -> X
    c_1139: var37:int -> (var36:unit -> X) -> X
    f_1466: var40:int -> var39:unit -> X
    f_a_1463: var49:int -> (var48:unit -> X) -> (var46:int -> (var45:unit -> X) -> X) -> var42:unit -> X
    f_a_1464: var52:int -> var51:unit -> X
  abstraction types:
    main_1462: X
    f_1465: v1:int -> X
    main_1046: v1:int -> (v2:unit -> X) -> X
    s_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    f_1136: v1:int -> (v2:int -> (v3:unit -> X) -> X) -> v6:int[v6 -> (
                                                                v6 = 0)] -> (v7:unit -> X) -> X
    a_1137: (v1:int -> (v2:unit -> X) -> X) -> (v5:int -> (v6:unit -> X) -> X) -> v9:int -> (v10:unit -> X) -> X
    fail_1467: v1:bool -> (v2:unit -> X) -> X
    b_1138: (var33:int -> (var32:unit -> X) -> X) -> var29:int -> (var28:unit -> X) -> X
    c_1139: var37:int -> (var36:unit -> X) -> X
    f_1466: var40:int -> var39:unit -> X
    f_a_1463: var49:int -> (var48:unit -> X) -> (var46:int -> (var45:unit -> X) -> X) -> var42:unit -> X
    f_a_1464: var52:int -> var51:unit -> X
  
end AbsTypeInfer.refine(96)[1] (0.049992 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1462
  main_1462 -> (rand_int f_1465)
  a_1137 x_1036 y_1037 q_1038 k_a_1247 when (q_1038 = 0) -> (x_1036 0 (f_a_1463 q_1038 k_a_1247 y_1037))
  a_1137 x_1036 y_1037 q_1038 k_a_1247 when (not (q_1038 = 0)) -> (fail_1467 true (f_a_1464 q_1038))
  b_1138 x_1033 q_1034 k_b_1193 -> (x_1033 1 k_b_1193)
  c_1139 q_1031 k_c_1164 -> (k_c_1164 ())
  f_1136 n_1040 x_1041 q_1042 k_f_1318 when (n_1040 <= 0) -> (x_1041 q_1042 k_f_1318)
  f_1136 n_1040 x_1041 q_1042 k_f_1318 when (not (n_1040 <= 0)) ->
      (a_1137 x_1041 (f_1136 (n_1040 - 1) (b_1138 x_1041)) q_1042 k_f_1318)
  f_1465 x_1437 -> (main_1046 x_1437 (f_1466 x_1437))
  f_1466 x_1437 x_1434 -> end
  f_a_1463 q_1038 k_a_1247 y_1037 x_1250 -> (y_1037 0 k_a_1247)
  f_a_1464 q_1038 x_1273 -> _|_
  fail_1467 b k -> {fail} => (k ())
  main_1046 n_1047 k_main_1420 -> (s_1043 n_1047 0 k_main_1420)
  s_1043 n_1044 q_1045 k_s_1388 -> (f_1136 n_1044 c_1139 q_1045 k_s_1388)
Types:
  main_1462 : X
  f_1136 : (int -> (int -> (unit -> X) -> X) -> x_8:int[x_8 = 0] -> (unit -> X) -> X)
  fail_1467 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  f: (int -> ((int -> unit) -> ({0} -> unit)))

cycles: 1
total: 0.256 sec
  abst: 0.004 sec
  mc: 0.007 sec
  refine: 0.056 sec
    exparam: 0.012 sec
