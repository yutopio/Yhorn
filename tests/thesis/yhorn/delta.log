MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn delta.ml

parsed::
 let rec sum_1030 n_1031 = if n_1031 <= 0 then
                             0
                           else
                             n_1031 + sum_1030 (n_1031 - 1) 
 in
 let delta_1032 f_1033 n_1034 = f_1033 n_1034 - f_1033 (n_1034 - 1) 
 in
 let main_1035 n_1036 = if delta_1032 sum_1030 n_1036 >= 0 then
                          ()
                        else
                          {fail} () 
 in
   ()

set_target::
 let rec sum_1030 n_1031 = if n_1031 <= 0 then
                             0
                           else
                             n_1031 + sum_1030 (n_1031 - 1) 
 in
 let delta_1032 f_1033 n_1034 = f_1033 n_1034 - f_1033 (n_1034 - 1) 
 in
 let main_1035 n_1036 = if delta_1032 sum_1030 n_1036 >= 0 then
                          ()
                        else
                          {fail} () 
 in
 let main_1068 = let arg1_1067 = rand_int () 
                 in
                   main_1035 arg1_1067 
 in
   ()

CPS::
 let rec sum_1030 (n_1031:int) (k_sum_1093:(int -> X)) =
   if n_1031 <= 0 then
     k_sum_1093 0
   else
     sum_1030 (n_1031 - 1) (fun x_1097 -> k_sum_1093 (n_1031 + x_1097)) 
 in
 let delta_1032 (f_1033:(int -> ((int -> X) -> X))) (n_1034:int) (k_delta_1140:(
   int -> X)) = f_1033 n_1034 (fun x_1143 -> f_1033 (n_1034 - 1) (fun x_1144 -> k_delta_1140 (x_1143 - x_1144))) 
 in
 let main_1035 (n_1036:int) (k_main_1178:(unit -> X)) =
   delta_1032 sum_1030 n_1036 (fun x_1181 -> (if x_1181 >= 0 then
                                                k_main_1178 ()
                                              else
                                                {|fail|} () k_main_1178)) 
 in
   rand_int_cps () (fun x_1216 -> main_1035 x_1216 (fun x_1213 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1241
  main_1241 -> (rand_int f_1246)
  delta_1032 f_1033 n_1034 k_delta_1140 -> (f_1033 n_1034 (f_delta_1243 n_1034 f_1033 k_delta_1140))
  f_1246 x_1216 -> (main_1035 x_1216 (f_1247 x_1216))
  f_1247 x_1216 x_1213 -> end
  f_delta_1243 n_1034 f_1033 k_delta_1140 x_1143 -> (f_1033 (n_1034 - 1) (f_delta_1244 n_1034 x_1143 k_delta_1140))
  f_delta_1244 n_1034 x_1143 k_delta_1140 x_1144 -> (k_delta_1140 (x_1143 - x_1144))
  f_main_1245 n_1036 k_main_1178 x_1181 when (x_1181 >= 0) -> (k_main_1178 ())
  f_main_1245 n_1036 k_main_1178 x_1181 when (not (x_1181 >= 0)) -> (fail_1248 true k_main_1178)
  f_sum_1242 n_1031 k_sum_1093 x_1097 -> (k_sum_1093 (n_1031 + x_1097))
  fail_1248 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1178 -> (delta_1032 sum_1030 n_1036 (f_main_1245 n_1036 k_main_1178))
  sum_1030 n_1031 k_sum_1093 when (n_1031 <= 0) -> (k_sum_1093 0)
  sum_1030 n_1031 k_sum_1093 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1242 n_1031 k_sum_1093))
Types:
  main_1241 : X
  fail_1248 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1241 ... --> 
  f_1246 ... --> 
  main_1035 ... --> 
  delta_1032 ... --> 
  sum_1030 [1/2] ... --> 
  f_delta_1243 ... --> 
  sum_1030 [1/2] ... --> 
  f_delta_1244 ... --> 
  f_main_1245 [2/2] ... --> 
  fail_1248 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(125)[1]
  program:
    main_1241  | true = ((Random.int 0) f_1246)
    delta_1032 f_1033 n_1034 k_delta_1140 | true = (f_1033 n_1034
                                                           (f_delta_1243 n_1034
                                                                    f_1033
                                                                    k_delta_1140))
    f_1246 x_1216 | true = (main_1035 x_1216
                                      (f_1247 x_1216))
    f_1247 x_1216 x_1213 | true = end
    f_delta_1243 n_1034 f_1033 k_delta_1140 x_1143 | true = (f_1033
                                                               (n_1034 - 1)
                                                               (f_delta_1244 n_1034
                                                                    x_1143
                                                                    k_delta_1140))
    f_delta_1244 n_1034 x_1143 k_delta_1140 x_1144 | true = (k_delta_1140 (
                                                                    x_1143 - x_1144))
    f_main_1245 n_1036 k_main_1178 x_1181 | (x_1181 >= 0) = (k_main_1178 ())
    f_main_1245 n_1036 k_main_1178 x_1181 | (not (x_1181 >= 0)) = (fail_1248 true
                                                                    k_main_1178)
    f_sum_1242 n_1031 k_sum_1093 x_1097 | true = (k_sum_1093 (n_1031 + x_1097))
    fail_1248 b k | true = (fail ())
    main_1035 n_1036 k_main_1178 | true = (delta_1032 sum_1030
                                                      n_1036
                                                      (f_main_1245 n_1036
                                                                   k_main_1178))
    sum_1030 n_1031 k_sum_1093 | (n_1031 <= 0) = (k_sum_1093 0)
    sum_1030 n_1031 k_sum_1093 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1242 n_1031
                                                                    k_sum_1093))
    main_1241:X
    delta_1032:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_1246:int -> X
    f_1247:int -> unit -> X
    f_delta_1243:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_delta_1244:int -> int -> (int -> X) -> int -> X
    f_main_1245:int -> (unit -> X) -> int -> X
    f_sum_1242:int -> (int -> X) -> int -> X
    fail_1248:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: delta_1032,f_1246,f_1247,f_delta_1243,f_delta_1244,f_main_1245,f_sum_1242,main_1035
  counterexample: 0:0:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1246@4:0> = var2)
     [true.(<main_1035@6:0> = <f_1246@4:0>)
      [true.(<delta_1032@8:1> = <main_1035@6:0>)
       [true.(<<delta_1032@8:0>@10:0> = <delta_1032@8:1>)
        [true.(<sum_1030@12:0> = <<delta_1032@8:0>@10:0>)
         [(<sum_1030@12:0> <= 0).(<<sum_1030@12:1>@15:0> = 0)
          [true.(<<<delta_1032@8:0>@10:1>@17:0> = <<sum_1030@12:1>@15:0>)
           [true.((<f_delta_1243@19:0> = <delta_1032@8:1>) && (<f_delta_1243@19:3> = <<<delta_1032@8:0>@10:1>@17:0>))
            [true.(<<f_delta_1243@19:1>@21:0> = (<f_delta_1243@19:0> - 1))
             [true.(<<delta_1032@8:0>@23:0> = <<f_delta_1243@19:1>@21:0>)
              [true.(<sum_1030@25:0> = <<delta_1032@8:0>@23:0>)
               [(<sum_1030@25:0> <= 0).(<<sum_1030@25:1>@28:0> = 0)
                [true.(<<<delta_1032@8:0>@23:1>@30:0> = <<sum_1030@25:1>@28:0>)
                 [true.(<<<f_delta_1243@19:1>@21:1>@32:0> = <<<delta_1032@8:0>@23:1>@30:0>)
                  [true.
                   ((<f_delta_1244@34:0> = <f_delta_1243@19:0>) &&
                    ((<f_delta_1244@34:1> = <f_delta_1243@19:3>) &&
                     (<f_delta_1244@34:3> = <<<f_delta_1243@19:1>@21:1>@32:0>)))
                   [true.(<<f_delta_1244@34:2>@36:0> = (<f_delta_1244@34:1> - <f_delta_1244@34:3>))
                    [true.(<<f_delta_1243@19:2>@38:0> = <<f_delta_1244@34:2>@36:0>)
                     [true.(<<delta_1032@8:2>@40:0> = <<f_delta_1243@19:2>@38:0>)
                      [true.((<f_main_1245@42:0> = <main_1035@6:0>) && (<f_main_1245@42:2> = <<delta_1032@8:2>@40:0>))
                       [(not (<f_main_1245@42:2> >= 0)).(<fail_1248@45:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(126)[2]
    horn clauses:
      P[<fail_1248@45:0>](<fail_1248@45:0>:bool)|- bot
      
      P[<f_main_1245@42:2>](<f_main_1245@42:0>:int,<f_main_1245@42:2>:int),
      ((<f_main_1245@42:2> < 0) && <fail_1248@45:0>) |- P[<fail_1248@45:0>](
      <fail_1248@45:0>:bool)
      
      P[<main_1035@6:0>](<f_main_1245@42:0>:int),
      P[<<delta_1032@8:2>@40:0>](<f_main_1245@42:0>:int,<f_main_1245@42:2>:int)|- P[<f_main_1245@42:2>](
      <f_main_1245@42:0>:int,<f_main_1245@42:2>:int)
      
      P[<delta_1032@8:1>](<delta_1032@8:1>:int),
      P[<<f_delta_1243@19:2>@38:0>](<delta_1032@8:1>:int,<<delta_1032@8:2>@40:0>:int)|- P[<<delta_1032@8:2>@40:0>](
      <delta_1032@8:1>:int,<<delta_1032@8:2>@40:0>:int)
      
      P[<f_delta_1243@19:3>](<f_delta_1243@19:0>:int,<f_delta_1244@34:1>:int),
      P[<<f_delta_1244@34:2>@36:0>](<f_delta_1243@19:0>:int,<f_delta_1244@34:1>:int,<<f_delta_1243@19:2>@38:0>:int)|- P[<<f_delta_1243@19:2>@38:0>](
      <f_delta_1243@19:0>:int,<<f_delta_1243@19:2>@38:0>:int)
      
      P[<f_delta_1244@34:3>](<f_delta_1244@34:0>:int,<f_delta_1244@34:1>:int,(
                             (-1 * <<f_delta_1244@34:2>@36:0>) + <f_delta_1244@34:1>):int)|- P[<<f_delta_1244@34:2>@36:0>](
      <f_delta_1244@34:0>:int,<f_delta_1244@34:1>:int,<<f_delta_1244@34:2>@36:0>:int)
      
      P[<f_delta_1243@19:3>](<f_delta_1244@34:0>:int,<f_delta_1244@34:1>:int),
      P[<<<f_delta_1243@19:1>@21:1>@32:0>](<f_delta_1244@34:0>:int,(-1 + <f_delta_1244@34:0>):int,<f_delta_1244@34:3>:int)|- P[<f_delta_1244@34:3>](
      <f_delta_1244@34:0>:int,<f_delta_1244@34:1>:int,<f_delta_1244@34:3>:int)
      
      P[<delta_1032@8:1>](<f_delta_1243@19:0>:int),
      P[<<<delta_1032@8:0>@23:1>@30:0>](<<f_delta_1243@19:1>@21:0>:int,<<<f_delta_1243@19:1>@21:1>@32:0>:int)|- P[<<<f_delta_1243@19:1>@21:1>@32:0>](
      <f_delta_1243@19:0>:int,<<f_delta_1243@19:1>@21:0>:int,<<<f_delta_1243@19:1>@21:1>@32:0>:int)
      
      P[<main_1035@6:0>](<delta_1032@8:1>:int),
      P[<<sum_1030@25:1>@28:0>](<<delta_1032@8:0>@23:0>:int,<<<delta_1032@8:0>@23:1>@30:0>:int)|- P[<<<delta_1032@8:0>@23:1>@30:0>](
      <<delta_1032@8:0>@23:0>:int,<<<delta_1032@8:0>@23:1>@30:0>:int)
      
      P[<sum_1030@25:0>](<sum_1030@25:0>:int), ((<<sum_1030@25:1>@28:0> = 0) && (<sum_1030@25:0> <= 0))
      |- P[<<sum_1030@25:1>@28:0>](<sum_1030@25:0>:int,<<sum_1030@25:1>@28:0>:int)
      
      P[<main_1035@6:0>](<delta_1032@8:1>:int),
      P[<<delta_1032@8:0>@23:0>](<sum_1030@25:0>:int)|- P[<sum_1030@25:0>](
      <sum_1030@25:0>:int)
      
      P[<delta_1032@8:1>](<<delta_1032@8:0>@10:0>:int),
      P[<<f_delta_1243@19:1>@21:0>](<<delta_1032@8:0>@10:0>:int,<<delta_1032@8:0>@23:0>:int)|- P[<<delta_1032@8:0>@23:0>](
      <<delta_1032@8:0>@23:0>:int)
      
      P[<f_delta_1243@19:3>](<f_delta_1243@19:0>:int,<f_delta_1243@19:3>:int),
      ((1 + <<f_delta_1243@19:1>@21:0>) = <f_delta_1243@19:0>)
      |- P[<<f_delta_1243@19:1>@21:0>](<f_delta_1243@19:0>:int,<<f_delta_1243@19:1>@21:0>:int)
      
      P[<delta_1032@8:1>](<f_delta_1243@19:0>:int),
      P[<<<delta_1032@8:0>@10:1>@17:0>](<f_delta_1243@19:0>:int,<f_delta_1243@19:3>:int)|- P[<f_delta_1243@19:3>](
      <f_delta_1243@19:0>:int,<f_delta_1243@19:3>:int)
      
      P[<main_1035@6:0>](<delta_1032@8:1>:int),
      P[<<sum_1030@12:1>@15:0>](<<delta_1032@8:0>@10:0>:int,<<<delta_1032@8:0>@10:1>@17:0>:int)|- P[<<<delta_1032@8:0>@10:1>@17:0>](
      <<delta_1032@8:0>@10:0>:int,<<<delta_1032@8:0>@10:1>@17:0>:int)
      
      P[<sum_1030@12:0>](<sum_1030@12:0>:int), ((<<sum_1030@12:1>@15:0> = 0) && (<sum_1030@12:0> <= 0))
      |- P[<<sum_1030@12:1>@15:0>](<sum_1030@12:0>:int,<<sum_1030@12:1>@15:0>:int)
      
      P[<main_1035@6:0>](<delta_1032@8:1>:int),
      P[<<delta_1032@8:0>@10:0>](<sum_1030@12:0>:int)|- P[<sum_1030@12:0>](
      <sum_1030@12:0>:int)
      
      P[<delta_1032@8:1>](<<delta_1032@8:0>@10:0>:int)|- P[<<delta_1032@8:0>@10:0>](<<delta_1032@8:0>@10:0>:int)
      
      P[<main_1035@6:0>](<delta_1032@8:1>:int)|- P[<delta_1032@8:1>](<delta_1032@8:1>:int)
      
      P[<f_1246@4:0>](<main_1035@6:0>:int)|- P[<main_1035@6:0>](<main_1035@6:0>:int)
      
      |- P[<f_1246@4:0>](<f_1246@4:0>:int)
    call trees:
      <main_1241@1>
        <f_1246@4>
          <main_1035@6>
            <delta_1032@8>
            </<delta_1032@8:0>@10>
            <sum_1030@12>
            </<sum_1030@12:1>@15>
            <<<delta_1032@8:0>@10:1>@17>
              <f_delta_1243@19>
              </<f_delta_1243@19:1>@21>
            </<delta_1032@8:0>@23>
            <sum_1030@25>
            </<sum_1030@25:1>@28>
            <<<delta_1032@8:0>@23:1>@30>
              <<<f_delta_1243@19:1>@21:1>@32>
                <f_delta_1244@34>
                </<f_delta_1244@34:2>@36>
              </<f_delta_1243@19:2>@38>
            </<delta_1032@8:2>@40>
            <f_main_1245@42>
              <fail_1248@45>
    inlined horn clauses:
      P[<fail_1248@45:0>](<fail_1248@45:0>:bool)|- bot
      
      P[<<sum_1030@12:1>@15:0>](<f_main_1245@42:0>:int,var6:int),
      P[<<sum_1030@25:1>@28:0>]((-1 + <f_main_1245@42:0>):int,((-1 * <f_main_1245@42:2>) + var6):int),
      ((<f_main_1245@42:2> < 0) && <fail_1248@45:0>) |- P[<fail_1248@45:0>](
      <fail_1248@45:0>:bool)
      
      P[<sum_1030@25:0>](<sum_1030@25:0>:int), ((<<sum_1030@25:1>@28:0> = 0) && (<sum_1030@25:0> <= 0))
      |- P[<<sum_1030@25:1>@28:0>](<sum_1030@25:0>:int,<<sum_1030@25:1>@28:0>:int)
      
      P[<<sum_1030@12:1>@15:0>]((1 + <sum_1030@25:0>):int,var7:int)|- P[<sum_1030@25:0>](<sum_1030@25:0>:int)
      
      P[<sum_1030@12:0>](<sum_1030@12:0>:int), ((<<sum_1030@12:1>@15:0> = 0) && (<sum_1030@12:0> <= 0))
      |- P[<<sum_1030@12:1>@15:0>](<sum_1030@12:0>:int,<<sum_1030@12:1>@15:0>:int)
      
      |- P[<sum_1030@12:0>](<sum_1030@12:0>:int)
    begin ParamSubstInfer.infer(1953)[3]
      
    end ParamSubstInfer.infer(1953)[3] (0.013998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1955)[3]
      
    end RefTypeInfer.elim_coeffs(1955)[3] (0.000000 sec.)
    begin YhornInterface.solve(2166)[3]
      begin HcSolver.solve_ub(2167)[4]
        encoded:
          P[<fail_1248@45:0>](<fail_1248@45:0>:int)|- bot
          
          P[<<sum_1030@12:1>@15:0>](<f_main_1245@42:0>:int,var6:int),
          P[<<sum_1030@25:1>@28:0>]((-1 + <f_main_1245@42:0>):int,((-1 * <f_main_1245@42:2>) + var6):int),
          ((<f_main_1245@42:2> < 0) && (<fail_1248@45:0> = 1)) |- P[<fail_1248@45:0>](
          <fail_1248@45:0>:int)
          
          P[<sum_1030@25:0>](<sum_1030@25:0>:int), ((<<sum_1030@25:1>@28:0> = 0) && (<sum_1030@25:0> <= 0))
          |- P[<<sum_1030@25:1>@28:0>](<sum_1030@25:0>:int,<<sum_1030@25:1>@28:0>:int)
          
          P[<<sum_1030@12:1>@15:0>]((1 + <sum_1030@25:0>):int,var7:int)|- P[<sum_1030@25:0>](<sum_1030@25:0>:int)
          
          P[<sum_1030@12:0>](<sum_1030@12:0>:int), ((<<sum_1030@12:1>@15:0> = 0) && (<sum_1030@12:0> <= 0))
          |- P[<<sum_1030@12:1>@15:0>](<sum_1030@12:0>:int,<<sum_1030@12:1>@15:0>:int)
          
          |- P[<sum_1030@12:0>](<sum_1030@12:0>:int)
        input to Yhorn:
          P[<fail_1248@45:0>](<fail_1248@45:0>:int)|- bot
          
          P[<<sum_1030@12:1>@15:0>](<f_main_1245@42:0>:int,var6:int),
          P[<<sum_1030@25:1>@28:0>](var8:int,var9:int),
          ((var6 < var9) && (((1 + var8) = <f_main_1245@42:0>) && (<fail_1248@45:0> = 1)))
          |- P[<fail_1248@45:0>](<fail_1248@45:0>:int)
          
          P[<sum_1030@25:0>](<sum_1030@25:0>:int), ((<sum_1030@25:0> <= 0) && (<<sum_1030@25:1>@28:0> = 0))
          |- P[<<sum_1030@25:1>@28:0>](<sum_1030@25:0>:int,<<sum_1030@25:1>@28:0>:int)
          
          P[<<sum_1030@12:1>@15:0>](var10:int,var7:int), (var10 = (1 + <sum_1030@25:0>))
          |- P[<sum_1030@25:0>](<sum_1030@25:0>:int)
          
          P[<sum_1030@12:0>](<sum_1030@12:0>:int), ((<sum_1030@12:0> <= 0) && (<<sum_1030@12:1>@15:0> = 0))
          |- P[<<sum_1030@12:1>@15:0>](<sum_1030@12:0>:int,<<sum_1030@12:1>@15:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1248_sep_45_sep_0($12)) -> 1=0.
(($12-1=0) & ($13-$14+1=0) & ($15-$16<0)) & (v_sep_sum_1030_sep_25_sep_1_sep_28_sep_0($13,$16)) & (v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0($14,$15)) -> v_sep_fail_1248_sep_45_sep_0($12).
(($17=0) & ($18<=0)) & (v_sep_sum_1030_sep_25_sep_0($18)) -> v_sep_sum_1030_sep_25_sep_1_sep_28_sep_0($18,$17).
(-$18+$19-1=0) & (v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0($19,$20)) -> v_sep_sum_1030_sep_25_sep_0($18).
(($21=0) & ($22<=0)) & (v_sep_sum_1030_sep_12_sep_0($22)) -> v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0($22,$21).
0=0 -> v_sep_sum_1030_sep_12_sep_0($22).


v_sep_fail_1248_sep_45_sep_0: X
v_sep_sum_1030_sep_12_sep_0: X
v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0: X
v_sep_sum_1030_sep_25_sep_0: X
v_sep_sum_1030_sep_25_sep_1_sep_28_sep_0: X
.......
v_sep_fail_1248_sep_45_sep_0: X
v_sep_sum_1030_sep_12_sep_0: X
v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0: X
v_sep_sum_1030_sep_25_sep_0: X
v_sep_sum_1030_sep_25_sep_1_sep_28_sep_0: X
....
v_sep_fail_1248_sep_45_sep_0: X
v_sep_sum_1030_sep_12_sep_0: X
v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0: X
v_sep_sum_1030_sep_25_sep_0: X
v_sep_sum_1030_sep_25_sep_1_sep_28_sep_0: X
......
v_sep_fail_1248_sep_45_sep_0: X
v_sep_sum_1030_sep_12_sep_0: X
v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0: X
v_sep_sum_1030_sep_25_sep_0: X
v_sep_sum_1030_sep_25_sep_1_sep_28_sep_0: X
.......Split conj [18] 0.141978
(Reconstrcut: 9 **)
v_sep_fail_1248_sep_45_sep_0: X
v_sep_sum_1030_sep_12_sep_0: X
v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0: (X) & (X)
v_sep_sum_1030_sep_25_sep_0: X
v_sep_sum_1030_sep_25_sep_1_sep_28_sep_0: X
........
v_sep_fail_1248_sep_45_sep_0: X
v_sep_sum_1030_sep_12_sep_0: X
v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0: (X) & (X)
v_sep_sum_1030_sep_25_sep_0: X
v_sep_sum_1030_sep_25_sep_1_sep_28_sep_0: X
....
v_sep_fail_1248_sep_45_sep_0: X
v_sep_sum_1030_sep_12_sep_0: X
v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0: (X) & (X)
v_sep_sum_1030_sep_25_sep_0: X
v_sep_sum_1030_sep_25_sep_1_sep_28_sep_0: X
......
v_sep_fail_1248_sep_45_sep_0: X
v_sep_sum_1030_sep_12_sep_0: X
v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0: (X) & (X)
v_sep_sum_1030_sep_25_sep_0: X
v_sep_sum_1030_sep_25_sep_1_sep_28_sep_0: X
.......
v_sep_fail_1248_sep_45_sep_0: X
v_sep_sum_1030_sep_12_sep_0: X
v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0: (X) & (X)
v_sep_sum_1030_sep_25_sep_0: X
v_sep_sum_1030_sep_25_sep_1_sep_28_sep_0: X
........(0=0) & (v_sep_fail_1248_sep_45_sep_0($12)) -> 1=0.
(($12-1=0) & ($13-$14+1=0) & ($15-$16<0)) & (v_sep_sum_1030_sep_25_sep_1_sep_28_sep_0($13,$16)) & (v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0($14,$15)) -> v_sep_fail_1248_sep_45_sep_0($12).
(($17=0) & ($18<=0)) & (v_sep_sum_1030_sep_25_sep_0($18)) -> v_sep_sum_1030_sep_25_sep_1_sep_28_sep_0($18,$17).
(-$18+$19-1=0) & (v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0($19,$20)) -> v_sep_sum_1030_sep_25_sep_0($18).
(($21=0) & ($22<=0)) & (v_sep_sum_1030_sep_12_sep_0($22)) -> v_sep_sum_1030_sep_12_sep_1_sep_15_sep_0($22,$21).
0=0 -> v_sep_sum_1030_sep_12_sep_0($22).

          |- P[<sum_1030@12:0>](<sum_1030@12:0>:int)
        solution:
          P[<fail_1248@45:0>]($23:bool) = false
          P[<sum_1030@12:0>]($39:int) = true
          P[<<sum_1030@12:1>@15:0>]($31:int,$33:int) = (0 <= $33)
          P[<sum_1030@25:0>]($36:int) = true
          P[<<sum_1030@25:1>@28:0>]($26:int,$28:int) = ($28 <= 0)
        
      end HcSolver.solve_ub(2167)[4] (0.021996 sec.)
      begin HcSolver.check_validity(2488)[4]
        input:
          P[<fail_1248@45:0>](<fail_1248@45:0>:bool)|- bot
          
          P[<<sum_1030@12:1>@15:0>](<f_main_1245@42:0>:int,var6:int),
          P[<<sum_1030@25:1>@28:0>]((-1 + <f_main_1245@42:0>):int,((-1 * <f_main_1245@42:2>) + var6):int),
          ((<f_main_1245@42:2> < 0) && <fail_1248@45:0>) |- P[<fail_1248@45:0>](
          <fail_1248@45:0>:bool)
          
          P[<sum_1030@25:0>](<sum_1030@25:0>:int), ((<<sum_1030@25:1>@28:0> = 0) && (<sum_1030@25:0> <= 0))
          |- P[<<sum_1030@25:1>@28:0>](<sum_1030@25:0>:int,<<sum_1030@25:1>@28:0>:int)
          
          P[<<sum_1030@12:1>@15:0>]((1 + <sum_1030@25:0>):int,var7:int)|- P[<sum_1030@25:0>](<sum_1030@25:0>:int)
          
          P[<sum_1030@12:0>](<sum_1030@12:0>:int), ((<<sum_1030@12:1>@15:0> = 0) && (<sum_1030@12:0> <= 0))
          |- P[<<sum_1030@12:1>@15:0>](<sum_1030@12:0>:int,<<sum_1030@12:1>@15:0>:int)
          
          |- P[<sum_1030@12:0>](<sum_1030@12:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(2488)[4] (0.004000 sec.)
      solution:
        P[<fail_1248@45:0>]($23:bool) = false
        P[<sum_1030@12:0>]($39:int) = true
        P[<<sum_1030@12:1>@15:0>]($31:int,$33:int) = (0 <= $33)
        P[<sum_1030@25:0>]($36:int) = true
        P[<<sum_1030@25:1>@28:0>]($26:int,$28:int) = ($28 <= 0)
    end YhornInterface.solve(2166)[3] (0.025996 sec.)
    
  end RefTypeInfer.infer_etrs(126)[2] (0.042994 sec.)
  refinement types:
    main_1241: X
    f_1246: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    delta_1032: (v1:int -> (v2:int -> X) -> X /\
                 v5:int -> (v6:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (0 <= v2)} -> X) -> X
    f_delta_1243: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    sum_1030: v1:int -> (v2:{v2:int | (v2 <= 0)} -> X) -> X
    f_delta_1244: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1245: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1248: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1247: var19:int -> var18:unit -> X
    f_sum_1242: var24:int -> (var23:int -> X) -> var21:int -> X
  abstraction types:
    main_1241: X
    f_1246: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    delta_1032: (var25:int -> (var26:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    sum_1030: var29:int -> (var30:int[var30 -> (0 <= var30),
                                      var30 -> (var30 <= 0)] -> X) -> X
    f_delta_1243: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    f_delta_1244: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1245: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1248: v1:bool -> (v2:unit -> X) -> X
    f_1247: var19:int -> var18:unit -> X
    f_sum_1242: var24:int -> (var23:int -> X) -> var21:int -> X
  
end AbsTypeInfer.refine(125)[1] (0.045993 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1241
  main_1241 -> (rand_int f_1246)
  delta_1032 f_1033 n_1034 k_delta_1140 -> (f_1033 n_1034 (f_delta_1243 n_1034 f_1033 k_delta_1140))
  f_1246 x_1216 -> (main_1035 x_1216 (f_1247 x_1216))
  f_1247 x_1216 x_1213 -> end
  f_delta_1243 n_1034 f_1033 k_delta_1140 x_1143 -> (f_1033 (n_1034 - 1) (f_delta_1244 n_1034 x_1143 k_delta_1140))
  f_delta_1244 n_1034 x_1143 k_delta_1140 x_1144 -> (k_delta_1140 (x_1143 - x_1144))
  f_main_1245 n_1036 k_main_1178 x_1181 when (x_1181 >= 0) -> (k_main_1178 ())
  f_main_1245 n_1036 k_main_1178 x_1181 when (not (x_1181 >= 0)) -> (fail_1248 true k_main_1178)
  f_sum_1242 n_1031 k_sum_1093 x_1097 -> (k_sum_1093 (n_1031 + x_1097))
  fail_1248 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1178 -> (delta_1032 sum_1030 n_1036 (f_main_1245 n_1036 k_main_1178))
  sum_1030 n_1031 k_sum_1093 when (n_1031 <= 0) -> (k_sum_1093 0)
  sum_1030 n_1031 k_sum_1093 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1242 n_1031 k_sum_1093))
Types:
  main_1241 : X
  fail_1248 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (int -> (x_3:int[x_3 <= 0; x_3 >= 0] -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1241 ... --> 
  f_1246 ... --> 
  main_1035 ... --> 
  delta_1032 ... --> 
  sum_1030 [1/2] ... --> 
  f_delta_1243 ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sum_1242 ... --> 
  f_delta_1244 ... --> 
  f_main_1245 [2/2] ... --> 
  fail_1248 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(3415)[1]
  program:
    main_1241  | true = ((Random.int 0) f_1246)
    delta_1032 f_1033 n_1034 k_delta_1140 | true = (f_1033 n_1034
                                                           (f_delta_1243 n_1034
                                                                    f_1033
                                                                    k_delta_1140))
    f_1246 x_1216 | true = (main_1035 x_1216
                                      (f_1247 x_1216))
    f_1247 x_1216 x_1213 | true = end
    f_delta_1243 n_1034 f_1033 k_delta_1140 x_1143 | true = (f_1033
                                                               (n_1034 - 1)
                                                               (f_delta_1244 n_1034
                                                                    x_1143
                                                                    k_delta_1140))
    f_delta_1244 n_1034 x_1143 k_delta_1140 x_1144 | true = (k_delta_1140 (
                                                                    x_1143 - x_1144))
    f_main_1245 n_1036 k_main_1178 x_1181 | (x_1181 >= 0) = (k_main_1178 ())
    f_main_1245 n_1036 k_main_1178 x_1181 | (not (x_1181 >= 0)) = (fail_1248 true
                                                                    k_main_1178)
    f_sum_1242 n_1031 k_sum_1093 x_1097 | true = (k_sum_1093 (n_1031 + x_1097))
    fail_1248 b k | true = (fail ())
    main_1035 n_1036 k_main_1178 | true = (delta_1032 sum_1030
                                                      n_1036
                                                      (f_main_1245 n_1036
                                                                   k_main_1178))
    sum_1030 n_1031 k_sum_1093 | (n_1031 <= 0) = (k_sum_1093 0)
    sum_1030 n_1031 k_sum_1093 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1242 n_1031
                                                                    k_sum_1093))
    main_1241:X
    delta_1032:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_1246:int -> X
    f_1247:int -> unit -> X
    f_delta_1243:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_delta_1244:int -> int -> (int -> X) -> int -> X
    f_main_1245:int -> (unit -> X) -> int -> X
    f_sum_1242:int -> (int -> X) -> int -> X
    fail_1248:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: delta_1032,f_1246,f_1247,f_delta_1243,f_delta_1244,f_main_1245,f_sum_1242,main_1035
  counterexample: 0:0:0:0:0:0:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1246@51:0> = var33)
     [true.(<main_1035@53:0> = <f_1246@51:0>)
      [true.(<delta_1032@55:1> = <main_1035@53:0>)
       [true.(<<delta_1032@55:0>@57:0> = <delta_1032@55:1>)
        [true.(<sum_1030@59:0> = <<delta_1032@55:0>@57:0>)
         [(<sum_1030@59:0> <= 0).(<<sum_1030@59:1>@62:0> = 0)
          [true.(<<<delta_1032@55:0>@57:1>@64:0> = <<sum_1030@59:1>@62:0>)
           [true.((<f_delta_1243@66:0> = <delta_1032@55:1>) && (<f_delta_1243@66:3> = <<<delta_1032@55:0>@57:1>@64:0>))
            [true.(<<f_delta_1243@66:1>@68:0> = (<f_delta_1243@66:0> - 1))
             [true.(<<delta_1032@55:0>@70:0> = <<f_delta_1243@66:1>@68:0>)
              [true.(<sum_1030@72:0> = <<delta_1032@55:0>@70:0>)
               [(not (<sum_1030@72:0> <= 0)).(<sum_1030@75:0> = (<sum_1030@72:0> - 1))
                [(<sum_1030@75:0> <= 0).(<<sum_1030@75:1>@78:0> = 0)
                 [true.((<f_sum_1242@80:0> = <sum_1030@72:0>) && (<f_sum_1242@80:2> = <<sum_1030@75:1>@78:0>))
                  [true.(<<f_sum_1242@80:1>@82:0> = (<f_sum_1242@80:0> + <f_sum_1242@80:2>))
                   [true.(<<sum_1030@72:1>@84:0> = <<f_sum_1242@80:1>@82:0>)
                    [true.(<<<delta_1032@55:0>@70:1>@86:0> = <<sum_1030@72:1>@84:0>)
                     [true.(<<<f_delta_1243@66:1>@68:1>@88:0> = <<<delta_1032@55:0>@70:1>@86:0>)
                      [true.
                       ((<f_delta_1244@90:0> = <f_delta_1243@66:0>) &&
                        ((<f_delta_1244@90:1> = <f_delta_1243@66:3>) &&
                         (<f_delta_1244@90:3> = <<<f_delta_1243@66:1>@68:1>@88:0>)))
                       [true.(<<f_delta_1244@90:2>@92:0> = (<f_delta_1244@90:1> - <f_delta_1244@90:3>))
                        [true.(<<f_delta_1243@66:2>@94:0> = <<f_delta_1244@90:2>@92:0>)
                         [true.(<<delta_1032@55:2>@96:0> = <<f_delta_1243@66:2>@94:0>)
                          [true.
                           ((<f_main_1245@98:0> = <main_1035@53:0>) && (<f_main_1245@98:2> = <<delta_1032@55:2>@96:0>))
                           [(not (<f_main_1245@98:2> >= 0)).(<fail_1248@101:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(3416)[2]
    horn clauses:
      P[<fail_1248@101:0>](<fail_1248@101:0>:bool)|- bot
      
      P[<f_main_1245@98:2>](<f_main_1245@98:0>:int,<f_main_1245@98:2>:int),
      ((<f_main_1245@98:2> < 0) && <fail_1248@101:0>) |- P[<fail_1248@101:0>](
      <fail_1248@101:0>:bool)
      
      P[<main_1035@53:0>](<f_main_1245@98:0>:int),
      P[<<delta_1032@55:2>@96:0>](<f_main_1245@98:0>:int,<f_main_1245@98:2>:int)|- P[<f_main_1245@98:2>](
      <f_main_1245@98:0>:int,<f_main_1245@98:2>:int)
      
      P[<delta_1032@55:1>](<delta_1032@55:1>:int),
      P[<<f_delta_1243@66:2>@94:0>](<delta_1032@55:1>:int,<<delta_1032@55:2>@96:0>:int)|- P[<<delta_1032@55:2>@96:0>](
      <delta_1032@55:1>:int,<<delta_1032@55:2>@96:0>:int)
      
      P[<f_delta_1243@66:3>](<f_delta_1243@66:0>:int,<f_delta_1244@90:1>:int),
      P[<<f_delta_1244@90:2>@92:0>](<f_delta_1243@66:0>:int,<f_delta_1244@90:1>:int,<<f_delta_1243@66:2>@94:0>:int)|- P[<<f_delta_1243@66:2>@94:0>](
      <f_delta_1243@66:0>:int,<<f_delta_1243@66:2>@94:0>:int)
      
      P[<f_delta_1244@90:3>](<f_delta_1244@90:0>:int,<f_delta_1244@90:1>:int,(
                             (-1 * <<f_delta_1244@90:2>@92:0>) + <f_delta_1244@90:1>):int)|- P[<<f_delta_1244@90:2>@92:0>](
      <f_delta_1244@90:0>:int,<f_delta_1244@90:1>:int,<<f_delta_1244@90:2>@92:0>:int)
      
      P[<f_delta_1243@66:3>](<f_delta_1244@90:0>:int,<f_delta_1244@90:1>:int),
      P[<<<f_delta_1243@66:1>@68:1>@88:0>](<f_delta_1244@90:0>:int,(-1 + <f_delta_1244@90:0>):int,<f_delta_1244@90:3>:int)|- P[<f_delta_1244@90:3>](
      <f_delta_1244@90:0>:int,<f_delta_1244@90:1>:int,<f_delta_1244@90:3>:int)
      
      P[<delta_1032@55:1>](<f_delta_1243@66:0>:int),
      P[<<<delta_1032@55:0>@70:1>@86:0>](<<f_delta_1243@66:1>@68:0>:int,<<<f_delta_1243@66:1>@68:1>@88:0>:int)|- P[<<<f_delta_1243@66:1>@68:1>@88:0>](
      <f_delta_1243@66:0>:int,<<f_delta_1243@66:1>@68:0>:int,<<<f_delta_1243@66:1>@68:1>@88:0>:int)
      
      P[<main_1035@53:0>](<delta_1032@55:1>:int),
      P[<<sum_1030@72:1>@84:0>](<<delta_1032@55:0>@70:0>:int,<<<delta_1032@55:0>@70:1>@86:0>:int)|- P[<<<delta_1032@55:0>@70:1>@86:0>](
      <<delta_1032@55:0>@70:0>:int,<<<delta_1032@55:0>@70:1>@86:0>:int)
      
      P[<sum_1030@72:0>](<sum_1030@72:0>:int),
      P[<<f_sum_1242@80:1>@82:0>](<sum_1030@72:0>:int,<<sum_1030@72:1>@84:0>:int), (
      <sum_1030@72:0> > 0) |- P[<<sum_1030@72:1>@84:0>](<sum_1030@72:0>:int,
                                                        <<sum_1030@72:1>@84:0>:int)
      
      P[<f_sum_1242@80:2>](<f_sum_1242@80:0>:int,(<<f_sum_1242@80:1>@82:0> + (-1 * <f_sum_1242@80:0>)):int)|- P[<<f_sum_1242@80:1>@82:0>](
      <f_sum_1242@80:0>:int,<<f_sum_1242@80:1>@82:0>:int)
      
      P[<sum_1030@72:0>](<f_sum_1242@80:0>:int),
      P[<<sum_1030@75:1>@78:0>]((-1 + <f_sum_1242@80:0>):int,<f_sum_1242@80:2>:int), (
      <f_sum_1242@80:0> > 0) |- P[<f_sum_1242@80:2>](<f_sum_1242@80:0>:int,
                                                     <f_sum_1242@80:2>:int)
      
      P[<sum_1030@75:0>](<sum_1030@75:0>:int), ((<<sum_1030@75:1>@78:0> = 0) && (<sum_1030@75:0> <= 0))
      |- P[<<sum_1030@75:1>@78:0>](<sum_1030@75:0>:int,<<sum_1030@75:1>@78:0>:int)
      
      P[<sum_1030@72:0>]((1 + <sum_1030@75:0>):int), ((1 + <sum_1030@75:0>) > 0)
      |- P[<sum_1030@75:0>](<sum_1030@75:0>:int)
      
      P[<main_1035@53:0>](<delta_1032@55:1>:int),
      P[<<delta_1032@55:0>@70:0>](<sum_1030@72:0>:int)|- P[<sum_1030@72:0>](
      <sum_1030@72:0>:int)
      
      P[<delta_1032@55:1>](<<delta_1032@55:0>@57:0>:int),
      P[<<f_delta_1243@66:1>@68:0>](<<delta_1032@55:0>@57:0>:int,<<delta_1032@55:0>@70:0>:int)|- P[<<delta_1032@55:0>@70:0>](
      <<delta_1032@55:0>@70:0>:int)
      
      P[<f_delta_1243@66:3>](<f_delta_1243@66:0>:int,<f_delta_1243@66:3>:int),
      ((1 + <<f_delta_1243@66:1>@68:0>) = <f_delta_1243@66:0>)
      |- P[<<f_delta_1243@66:1>@68:0>](<f_delta_1243@66:0>:int,<<f_delta_1243@66:1>@68:0>:int)
      
      P[<delta_1032@55:1>](<f_delta_1243@66:0>:int),
      P[<<<delta_1032@55:0>@57:1>@64:0>](<f_delta_1243@66:0>:int,<f_delta_1243@66:3>:int)|- P[<f_delta_1243@66:3>](
      <f_delta_1243@66:0>:int,<f_delta_1243@66:3>:int)
      
      P[<main_1035@53:0>](<delta_1032@55:1>:int),
      P[<<sum_1030@59:1>@62:0>](<<delta_1032@55:0>@57:0>:int,<<<delta_1032@55:0>@57:1>@64:0>:int)|- P[<<<delta_1032@55:0>@57:1>@64:0>](
      <<delta_1032@55:0>@57:0>:int,<<<delta_1032@55:0>@57:1>@64:0>:int)
      
      P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
      |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
      
      P[<main_1035@53:0>](<delta_1032@55:1>:int),
      P[<<delta_1032@55:0>@57:0>](<sum_1030@59:0>:int)|- P[<sum_1030@59:0>](
      <sum_1030@59:0>:int)
      
      P[<delta_1032@55:1>](<<delta_1032@55:0>@57:0>:int)|- P[<<delta_1032@55:0>@57:0>](<<delta_1032@55:0>@57:0>:int)
      
      P[<main_1035@53:0>](<delta_1032@55:1>:int)|- P[<delta_1032@55:1>](<delta_1032@55:1>:int)
      
      P[<f_1246@51:0>](<main_1035@53:0>:int)|- P[<main_1035@53:0>](<main_1035@53:0>:int)
      
      |- P[<f_1246@51:0>](<f_1246@51:0>:int)
    call trees:
      <main_1241@48>
        <f_1246@51>
          <main_1035@53>
            <delta_1032@55>
            </<delta_1032@55:0>@57>
            <sum_1030@59>
            </<sum_1030@59:1>@62>
            <<<delta_1032@55:0>@57:1>@64>
              <f_delta_1243@66>
              </<f_delta_1243@66:1>@68>
            </<delta_1032@55:0>@70>
            <sum_1030@72>
              <sum_1030@75>
              </<sum_1030@75:1>@78>
              <f_sum_1242@80>
              </<f_sum_1242@80:1>@82>
            </<sum_1030@72:1>@84>
            <<<delta_1032@55:0>@70:1>@86>
              <<<f_delta_1243@66:1>@68:1>@88>
                <f_delta_1244@90>
                </<f_delta_1244@90:2>@92>
              </<f_delta_1243@66:2>@94>
            </<delta_1032@55:2>@96>
            <f_main_1245@98>
              <fail_1248@101>
    inlined horn clauses:
      P[<fail_1248@101:0>](<fail_1248@101:0>:bool)|- bot
      
      P[<<sum_1030@59:1>@62:0>](<f_main_1245@98:0>:int,var37:int),
      P[<<sum_1030@72:1>@84:0>]((-1 + <f_main_1245@98:0>):int,((-1 * <f_main_1245@98:2>) + var37):int),
      ((<f_main_1245@98:2> < 0) && <fail_1248@101:0>) |- P[<fail_1248@101:0>](
      <fail_1248@101:0>:bool)
      
      P[<sum_1030@72:0>](<sum_1030@72:0>:int),
      P[<<sum_1030@75:1>@78:0>]((-1 + <sum_1030@72:0>):int,(<<sum_1030@72:1>@84:0> + (-1 * <sum_1030@72:0>)):int),
      (<sum_1030@72:0> > 0) |- P[<<sum_1030@72:1>@84:0>](<sum_1030@72:0>:int,
                                                         <<sum_1030@72:1>@84:0>:int)
      
      P[<sum_1030@75:0>](<sum_1030@75:0>:int), ((<<sum_1030@75:1>@78:0> = 0) && (<sum_1030@75:0> <= 0))
      |- P[<<sum_1030@75:1>@78:0>](<sum_1030@75:0>:int,<<sum_1030@75:1>@78:0>:int)
      
      P[<sum_1030@72:0>]((1 + <sum_1030@75:0>):int), ((1 + <sum_1030@75:0>) > 0)
      |- P[<sum_1030@75:0>](<sum_1030@75:0>:int)
      
      P[<<sum_1030@59:1>@62:0>]((1 + <sum_1030@72:0>):int,var38:int)|- P[<sum_1030@72:0>](<sum_1030@72:0>:int)
      
      P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
      |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
      
      |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
    begin ParamSubstInfer.infer(5756)[3]
      
    end ParamSubstInfer.infer(5756)[3] (0.085987 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(5758)[3]
      
    end RefTypeInfer.elim_coeffs(5758)[3] (0.001000 sec.)
    begin YhornInterface.solve(6023)[3]
      begin HcSolver.solve_ub(6024)[4]
        encoded:
          P[<fail_1248@101:0>](<fail_1248@101:0>:int)|- bot
          
          P[<<sum_1030@59:1>@62:0>](<f_main_1245@98:0>:int,var37:int),
          P[<<sum_1030@72:1>@84:0>]((-1 + <f_main_1245@98:0>):int,((-1 * <f_main_1245@98:2>) + var37):int),
          ((<f_main_1245@98:2> < 0) && (<fail_1248@101:0> = 1)) |- P[<fail_1248@101:0>](
          <fail_1248@101:0>:int)
          
          P[<sum_1030@72:0>](<sum_1030@72:0>:int),
          P[<<sum_1030@75:1>@78:0>]((-1 + <sum_1030@72:0>):int,(<<sum_1030@72:1>@84:0> + (-1 * <sum_1030@72:0>)):int),
          (<sum_1030@72:0> > 0) |- P[<<sum_1030@72:1>@84:0>](<sum_1030@72:0>:int,
                                                             <<sum_1030@72:1>@84:0>:int)
          
          P[<sum_1030@75:0>](<sum_1030@75:0>:int), ((<<sum_1030@75:1>@78:0> = 0) && (<sum_1030@75:0> <= 0))
          |- P[<<sum_1030@75:1>@78:0>](<sum_1030@75:0>:int,<<sum_1030@75:1>@78:0>:int)
          
          P[<sum_1030@72:0>]((1 + <sum_1030@75:0>):int), ((1 + <sum_1030@75:0>) > 0)
          |- P[<sum_1030@75:0>](<sum_1030@75:0>:int)
          
          P[<<sum_1030@59:1>@62:0>]((1 + <sum_1030@72:0>):int,var38:int)|- P[<sum_1030@72:0>](<sum_1030@72:0>:int)
          
          P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
          |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
          
          |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
        input to Yhorn:
          P[<fail_1248@101:0>](<fail_1248@101:0>:int)|- bot
          
          P[<<sum_1030@59:1>@62:0>](<f_main_1245@98:0>:int,var37:int),
          P[<<sum_1030@72:1>@84:0>](var39:int,var40:int),
          ((var37 < var40) && (((1 + var39) = <f_main_1245@98:0>) && (<fail_1248@101:0> = 1)))
          |- P[<fail_1248@101:0>](<fail_1248@101:0>:int)
          
          P[<sum_1030@72:0>](<sum_1030@72:0>:int),
          P[<<sum_1030@75:1>@78:0>](var41:int,var42:int),
          (((var42 + <sum_1030@72:0>) = <<sum_1030@72:1>@84:0>) &&
           (((1 + var41) = <sum_1030@72:0>) && (<sum_1030@72:0> > 0)))
          |- P[<<sum_1030@72:1>@84:0>](<sum_1030@72:0>:int,<<sum_1030@72:1>@84:0>:int)
          
          P[<sum_1030@75:0>](<sum_1030@75:0>:int), ((<sum_1030@75:0> <= 0) && (<<sum_1030@75:1>@78:0> = 0))
          |- P[<<sum_1030@75:1>@78:0>](<sum_1030@75:0>:int,<<sum_1030@75:1>@78:0>:int)
          
          P[<sum_1030@72:0>](var43:int), ((var43 = (1 + <sum_1030@75:0>)) && ((1 + <sum_1030@75:0>) > 0))
          |- P[<sum_1030@75:0>](<sum_1030@75:0>:int)
          
          P[<<sum_1030@59:1>@62:0>](var44:int,var38:int), (var44 = (1 + <sum_1030@72:0>))
          |- P[<sum_1030@72:0>](<sum_1030@72:0>:int)
          
          P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<sum_1030@59:0> <= 0) && (<<sum_1030@59:1>@62:0> = 0))
          |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1248_sep_101_sep_0($202)) -> 1=0.
(($202-1=0) & ($203-$204+1=0) & ($205-$206<0)) & (v_sep_sum_1030_sep_72_sep_1_sep_84_sep_0($203,$206)) & (v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0($204,$205)) -> v_sep_fail_1248_sep_101_sep_0($202).
(($207>0) & (-$207+$208+1=0) & ($207+$209-$210=0)) & (v_sep_sum_1030_sep_75_sep_1_sep_78_sep_0($208,$209)) & (v_sep_sum_1030_sep_72_sep_0($207)) -> v_sep_sum_1030_sep_72_sep_1_sep_84_sep_0($207,$210).
(($211=0) & ($212<=0)) & (v_sep_sum_1030_sep_75_sep_0($212)) -> v_sep_sum_1030_sep_75_sep_1_sep_78_sep_0($212,$211).
(($212+1>0) & (-$212+$213-1=0)) & (v_sep_sum_1030_sep_72_sep_0($213)) -> v_sep_sum_1030_sep_75_sep_0($212).
(-$207+$214-1=0) & (v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0($214,$215)) -> v_sep_sum_1030_sep_72_sep_0($207).
(($216=0) & ($217<=0)) & (v_sep_sum_1030_sep_59_sep_0($217)) -> v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0($217,$216).
0=0 -> v_sep_sum_1030_sep_59_sep_0($217).


v_sep_fail_1248_sep_101_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
v_sep_sum_1030_sep_72_sep_0: X
v_sep_sum_1030_sep_72_sep_1_sep_84_sep_0: X
v_sep_sum_1030_sep_75_sep_0: X
v_sep_sum_1030_sep_75_sep_1_sep_78_sep_0: X
..........
v_sep_fail_1248_sep_101_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
v_sep_sum_1030_sep_72_sep_0: X
v_sep_sum_1030_sep_72_sep_1_sep_84_sep_0: X
v_sep_sum_1030_sep_75_sep_0: X
v_sep_sum_1030_sep_75_sep_1_sep_78_sep_0: X
....
v_sep_fail_1248_sep_101_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
v_sep_sum_1030_sep_72_sep_0: X
v_sep_sum_1030_sep_72_sep_1_sep_84_sep_0: X
v_sep_sum_1030_sep_75_sep_0: X
v_sep_sum_1030_sep_75_sep_1_sep_78_sep_0: X
.......
v_sep_fail_1248_sep_101_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
v_sep_sum_1030_sep_72_sep_0: X
v_sep_sum_1030_sep_72_sep_1_sep_84_sep_0: X
v_sep_sum_1030_sep_75_sep_0: X
v_sep_sum_1030_sep_75_sep_1_sep_78_sep_0: X
.........
v_sep_fail_1248_sep_101_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
v_sep_sum_1030_sep_72_sep_0: X
v_sep_sum_1030_sep_72_sep_1_sep_84_sep_0: X
v_sep_sum_1030_sep_75_sep_0: X
v_sep_sum_1030_sep_75_sep_1_sep_78_sep_0: X
..........(0=0) & (v_sep_fail_1248_sep_101_sep_0($202)) -> 1=0.
(($202-1=0) & ($203-$204+1=0) & ($205-$206<0)) & (v_sep_sum_1030_sep_72_sep_1_sep_84_sep_0($203,$206)) & (v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0($204,$205)) -> v_sep_fail_1248_sep_101_sep_0($202).
(($207>0) & (-$207+$208+1=0) & ($207+$209-$210=0)) & (v_sep_sum_1030_sep_75_sep_1_sep_78_sep_0($208,$209)) & (v_sep_sum_1030_sep_72_sep_0($207)) -> v_sep_sum_1030_sep_72_sep_1_sep_84_sep_0($207,$210).
(($211=0) & ($212<=0)) & (v_sep_sum_1030_sep_75_sep_0($212)) -> v_sep_sum_1030_sep_75_sep_1_sep_78_sep_0($212,$211).
(($212+1>0) & (-$212+$213-1=0)) & (v_sep_sum_1030_sep_72_sep_0($213)) -> v_sep_sum_1030_sep_75_sep_0($212).
(-$207+$214-1=0) & (v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0($214,$215)) -> v_sep_sum_1030_sep_72_sep_0($207).
(($216=0) & ($217<=0)) & (v_sep_sum_1030_sep_59_sep_0($217)) -> v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0($217,$216).
0=0 -> v_sep_sum_1030_sep_59_sep_0($217).

          |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
        solution:
          P[<fail_1248@101:0>]($218:bool) = false
          P[<sum_1030@59:0>]($242:int) = true
          P[<<sum_1030@59:1>@62:0>]($226:int,$228:int) = ($226 <= 0)
          P[<sum_1030@72:0>]($236:int) = ((1 + $236) <= 0)
          P[<<sum_1030@72:1>@84:0>]($221:int,$223:int) = (5 <= $221)
          P[<sum_1030@75:0>]($239:int) = false
          P[<<sum_1030@75:1>@78:0>]($231:int,$233:int) = false
        
      end HcSolver.solve_ub(6024)[4] (0.023997 sec.)
      begin HcSolver.check_validity(6495)[4]
        input:
          P[<fail_1248@101:0>](<fail_1248@101:0>:bool)|- bot
          
          P[<<sum_1030@59:1>@62:0>](<f_main_1245@98:0>:int,var37:int),
          P[<<sum_1030@72:1>@84:0>]((-1 + <f_main_1245@98:0>):int,((-1 * <f_main_1245@98:2>) + var37):int),
          ((<f_main_1245@98:2> < 0) && <fail_1248@101:0>) |- P[<fail_1248@101:0>](
          <fail_1248@101:0>:bool)
          
          P[<sum_1030@72:0>](<sum_1030@72:0>:int),
          P[<<sum_1030@75:1>@78:0>]((-1 + <sum_1030@72:0>):int,(<<sum_1030@72:1>@84:0> + (-1 * <sum_1030@72:0>)):int),
          (<sum_1030@72:0> > 0) |- P[<<sum_1030@72:1>@84:0>](<sum_1030@72:0>:int,
                                                             <<sum_1030@72:1>@84:0>:int)
          
          P[<sum_1030@75:0>](<sum_1030@75:0>:int), ((<<sum_1030@75:1>@78:0> = 0) && (<sum_1030@75:0> <= 0))
          |- P[<<sum_1030@75:1>@78:0>](<sum_1030@75:0>:int,<<sum_1030@75:1>@78:0>:int)
          
          P[<sum_1030@72:0>]((1 + <sum_1030@75:0>):int), ((1 + <sum_1030@75:0>) > 0)
          |- P[<sum_1030@75:0>](<sum_1030@75:0>:int)
          
          P[<<sum_1030@59:1>@62:0>]((1 + <sum_1030@72:0>):int,var38:int)|- P[<sum_1030@72:0>](<sum_1030@72:0>:int)
          
          P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
          |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
          
          |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(6495)[4] (0.001999 sec.)
      solution:
        P[<fail_1248@101:0>]($218:bool) = false
        P[<sum_1030@59:0>]($242:int) = true
        P[<<sum_1030@59:1>@62:0>]($226:int,$228:int) = ($226 <= 0)
        P[<sum_1030@72:0>]($236:int) = ((1 + $236) <= 0)
        P[<<sum_1030@72:1>@84:0>]($221:int,$223:int) = (5 <= $221)
        P[<sum_1030@75:0>]($239:int) = false
        P[<<sum_1030@75:1>@78:0>]($231:int,$233:int) = false
    end YhornInterface.solve(6023)[3] (0.025996 sec.)
    
  end RefTypeInfer.infer_etrs(3416)[2] (0.124981 sec.)
  refinement types:
    main_1241: X
    f_1246: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    delta_1032: (v1:int -> (v2:int -> X) -> X /\
                 v5:int -> (v6:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (v1 <= 0)} -> X) -> X
    f_delta_1243: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    sum_1030: v1:{v1:int | ((1 + v1) <= 0)} -> (v2:{v2:int | (5 <= v1)} -> X) -> X
    sum_1030: v1:{v1:int | false} -> (v2:{v2:int | false} -> X) -> X
    f_sum_1242: v1:int -> (v2:int -> X) -> v4:int -> X
    f_delta_1244: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1245: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1248: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1247: var53:int -> var52:unit -> X
  abstraction types:
    main_1241: X
    f_1246: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    delta_1032: (var54:int -> (var55:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    sum_1030: var62:int[var62 -> ((1 + var62) <= 0)] ->
              (var63:int[var63 -> (var62 <= 0),
                         var63 -> (5 <= var62)] -> X) -> X
    f_delta_1243: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    f_sum_1242: v1:int -> (v2:int -> X) -> v4:int -> X
    f_delta_1244: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1245: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1248: v1:bool -> (v2:unit -> X) -> X
    f_1247: var53:int -> var52:unit -> X
  
end AbsTypeInfer.refine(3415)[1] (0.127981 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1241
  main_1241 -> (rand_int f_1246)
  delta_1032 f_1033 n_1034 k_delta_1140 -> (f_1033 n_1034 (f_delta_1243 n_1034 f_1033 k_delta_1140))
  f_1246 x_1216 -> (main_1035 x_1216 (f_1247 x_1216))
  f_1247 x_1216 x_1213 -> end
  f_delta_1243 n_1034 f_1033 k_delta_1140 x_1143 -> (f_1033 (n_1034 - 1) (f_delta_1244 n_1034 x_1143 k_delta_1140))
  f_delta_1244 n_1034 x_1143 k_delta_1140 x_1144 -> (k_delta_1140 (x_1143 - x_1144))
  f_main_1245 n_1036 k_main_1178 x_1181 when (x_1181 >= 0) -> (k_main_1178 ())
  f_main_1245 n_1036 k_main_1178 x_1181 when (not (x_1181 >= 0)) -> (fail_1248 true k_main_1178)
  f_sum_1242 n_1031 k_sum_1093 x_1097 -> (k_sum_1093 (n_1031 + x_1097))
  fail_1248 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1178 -> (delta_1032 sum_1030 n_1036 (f_main_1245 n_1036 k_main_1178))
  sum_1030 n_1031 k_sum_1093 when (n_1031 <= 0) -> (k_sum_1093 0)
  sum_1030 n_1031 k_sum_1093 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1242 n_1031 k_sum_1093))
Types:
  main_1241 : X
  fail_1248 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (x_1:int[x_1 <= -1] -> (x_3:int[x_1 >= 5; x_1 <= 0; x_3 <= 0; x_3 >= 0] -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1241 ... --> 
  f_1246 ... --> 
  main_1035 ... --> 
  delta_1032 ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sum_1242 ... --> 
  f_delta_1243 ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sum_1242 ... --> 
  f_delta_1244 ... --> 
  f_main_1245 [2/2] ... --> 
  fail_1248 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 1; 0; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(8047)[1]
  program:
    main_1241  | true = ((Random.int 0) f_1246)
    delta_1032 f_1033 n_1034 k_delta_1140 | true = (f_1033 n_1034
                                                           (f_delta_1243 n_1034
                                                                    f_1033
                                                                    k_delta_1140))
    f_1246 x_1216 | true = (main_1035 x_1216
                                      (f_1247 x_1216))
    f_1247 x_1216 x_1213 | true = end
    f_delta_1243 n_1034 f_1033 k_delta_1140 x_1143 | true = (f_1033
                                                               (n_1034 - 1)
                                                               (f_delta_1244 n_1034
                                                                    x_1143
                                                                    k_delta_1140))
    f_delta_1244 n_1034 x_1143 k_delta_1140 x_1144 | true = (k_delta_1140 (
                                                                    x_1143 - x_1144))
    f_main_1245 n_1036 k_main_1178 x_1181 | (x_1181 >= 0) = (k_main_1178 ())
    f_main_1245 n_1036 k_main_1178 x_1181 | (not (x_1181 >= 0)) = (fail_1248 true
                                                                    k_main_1178)
    f_sum_1242 n_1031 k_sum_1093 x_1097 | true = (k_sum_1093 (n_1031 + x_1097))
    fail_1248 b k | true = (fail ())
    main_1035 n_1036 k_main_1178 | true = (delta_1032 sum_1030
                                                      n_1036
                                                      (f_main_1245 n_1036
                                                                   k_main_1178))
    sum_1030 n_1031 k_sum_1093 | (n_1031 <= 0) = (k_sum_1093 0)
    sum_1030 n_1031 k_sum_1093 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1242 n_1031
                                                                    k_sum_1093))
    main_1241:X
    delta_1032:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_1246:int -> X
    f_1247:int -> unit -> X
    f_delta_1243:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_delta_1244:int -> int -> (int -> X) -> int -> X
    f_main_1245:int -> (unit -> X) -> int -> X
    f_sum_1242:int -> (int -> X) -> int -> X
    fail_1248:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: delta_1032,f_1246,f_1247,f_delta_1243,f_delta_1244,f_main_1245,f_sum_1242,main_1035
  counterexample: 0:0:0:0:1:0:0:0:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1246@107:0> = var66)
     [true.(<main_1035@109:0> = <f_1246@107:0>)
      [true.(<delta_1032@111:1> = <main_1035@109:0>)
       [true.(<<delta_1032@111:0>@113:0> = <delta_1032@111:1>)
        [true.(<sum_1030@115:0> = <<delta_1032@111:0>@113:0>)
         [(not (<sum_1030@115:0> <= 0)).(<sum_1030@118:0> = (<sum_1030@115:0> - 1))
          [(<sum_1030@118:0> <= 0).(<<sum_1030@118:1>@121:0> = 0)
           [true.((<f_sum_1242@123:0> = <sum_1030@115:0>) && (<f_sum_1242@123:2> = <<sum_1030@118:1>@121:0>))
            [true.(<<f_sum_1242@123:1>@125:0> = (<f_sum_1242@123:0> + <f_sum_1242@123:2>))
             [true.(<<sum_1030@115:1>@127:0> = <<f_sum_1242@123:1>@125:0>)
              [true.(<<<delta_1032@111:0>@113:1>@129:0> = <<sum_1030@115:1>@127:0>)
               [true.
                ((<f_delta_1243@131:0> = <delta_1032@111:1>) &&
                 (<f_delta_1243@131:3> = <<<delta_1032@111:0>@113:1>@129:0>))
                [true.(<<f_delta_1243@131:1>@133:0> = (<f_delta_1243@131:0> - 1))
                 [true.(<<delta_1032@111:0>@135:0> = <<f_delta_1243@131:1>@133:0>)
                  [true.(<sum_1030@137:0> = <<delta_1032@111:0>@135:0>)
                   [(not (<sum_1030@137:0> <= 0)).(<sum_1030@140:0> = (<sum_1030@137:0> - 1))
                    [(<sum_1030@140:0> <= 0).(<<sum_1030@140:1>@143:0> = 0)
                     [true.((<f_sum_1242@145:0> = <sum_1030@137:0>) && (<f_sum_1242@145:2> = <<sum_1030@140:1>@143:0>))
                      [true.(<<f_sum_1242@145:1>@147:0> = (<f_sum_1242@145:0> + <f_sum_1242@145:2>))
                       [true.(<<sum_1030@137:1>@149:0> = <<f_sum_1242@145:1>@147:0>)
                        [true.(<<<delta_1032@111:0>@135:1>@151:0> = <<sum_1030@137:1>@149:0>)
                         [true.(<<<f_delta_1243@131:1>@133:1>@153:0> = <<<delta_1032@111:0>@135:1>@151:0>)
                          [true.
                           ((<f_delta_1244@155:0> = <f_delta_1243@131:0>) &&
                            ((<f_delta_1244@155:1> = <f_delta_1243@131:3>) &&
                             (<f_delta_1244@155:3> = <<<f_delta_1243@131:1>@133:1>@153:0>)))
                           [true.(<<f_delta_1244@155:2>@157:0> = (<f_delta_1244@155:1> - <f_delta_1244@155:3>))
                            [true.(<<f_delta_1243@131:2>@159:0> = <<f_delta_1244@155:2>@157:0>)
                             [true.(<<delta_1032@111:2>@161:0> = <<f_delta_1243@131:2>@159:0>)
                              [true.
                               ((<f_main_1245@163:0> = <main_1035@109:0>) &&
                                (<f_main_1245@163:2> = <<delta_1032@111:2>@161:0>))
                               [(not (<f_main_1245@163:2> >= 0)).(<fail_1248@166:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(8048)[2]
    horn clauses:
      P[<fail_1248@166:0>](<fail_1248@166:0>:bool)|- bot
      
      P[<f_main_1245@163:2>](<f_main_1245@163:0>:int,<f_main_1245@163:2>:int),
      ((<f_main_1245@163:2> < 0) && <fail_1248@166:0>) |- P[<fail_1248@166:0>](
      <fail_1248@166:0>:bool)
      
      P[<main_1035@109:0>](<f_main_1245@163:0>:int),
      P[<<delta_1032@111:2>@161:0>](<f_main_1245@163:0>:int,<f_main_1245@163:2>:int)|- P[<f_main_1245@163:2>](
      <f_main_1245@163:0>:int,<f_main_1245@163:2>:int)
      
      P[<delta_1032@111:1>](<delta_1032@111:1>:int),
      P[<<f_delta_1243@131:2>@159:0>](<delta_1032@111:1>:int,<<delta_1032@111:2>@161:0>:int)|- P[<<delta_1032@111:2>@161:0>](
      <delta_1032@111:1>:int,<<delta_1032@111:2>@161:0>:int)
      
      P[<f_delta_1243@131:3>](<f_delta_1243@131:0>:int,<f_delta_1244@155:1>:int),
      P[<<f_delta_1244@155:2>@157:0>](<f_delta_1243@131:0>:int,<f_delta_1244@155:1>:int,<<f_delta_1243@131:2>@159:0>:int)|- P[<<f_delta_1243@131:2>@159:0>](
      <f_delta_1243@131:0>:int,<<f_delta_1243@131:2>@159:0>:int)
      
      P[<f_delta_1244@155:3>](<f_delta_1244@155:0>:int,<f_delta_1244@155:1>:int,(
                              (-1 * <<f_delta_1244@155:2>@157:0>) + <f_delta_1244@155:1>):int)|- P[<<f_delta_1244@155:2>@157:0>](
      <f_delta_1244@155:0>:int,<f_delta_1244@155:1>:int,<<f_delta_1244@155:2>@157:0>:int)
      
      P[<f_delta_1243@131:3>](<f_delta_1244@155:0>:int,<f_delta_1244@155:1>:int),
      P[<<<f_delta_1243@131:1>@133:1>@153:0>](<f_delta_1244@155:0>:int,(
                                              -1 + <f_delta_1244@155:0>):int,<f_delta_1244@155:3>:int)|- P[<f_delta_1244@155:3>](
      <f_delta_1244@155:0>:int,<f_delta_1244@155:1>:int,<f_delta_1244@155:3>:int)
      
      P[<delta_1032@111:1>](<f_delta_1243@131:0>:int),
      P[<<<delta_1032@111:0>@135:1>@151:0>](<<f_delta_1243@131:1>@133:0>:int,<<<f_delta_1243@131:1>@133:1>@153:0>:int)|- P[<<<f_delta_1243@131:1>@133:1>@153:0>](
      <f_delta_1243@131:0>:int,<<f_delta_1243@131:1>@133:0>:int,<<<f_delta_1243@131:1>@133:1>@153:0>:int)
      
      P[<main_1035@109:0>](<delta_1032@111:1>:int),
      P[<<sum_1030@137:1>@149:0>](<<delta_1032@111:0>@135:0>:int,<<<delta_1032@111:0>@135:1>@151:0>:int)|- P[<<<delta_1032@111:0>@135:1>@151:0>](
      <<delta_1032@111:0>@135:0>:int,<<<delta_1032@111:0>@135:1>@151:0>:int)
      
      P[<sum_1030@137:0>](<sum_1030@137:0>:int),
      P[<<f_sum_1242@145:1>@147:0>](<sum_1030@137:0>:int,<<sum_1030@137:1>@149:0>:int), (
      <sum_1030@137:0> > 0) |- P[<<sum_1030@137:1>@149:0>](<sum_1030@137:0>:int,
                                                           <<sum_1030@137:1>@149:0>:int)
      
      P[<f_sum_1242@145:2>](<f_sum_1242@145:0>:int,(<<f_sum_1242@145:1>@147:0> + (-1 * <f_sum_1242@145:0>)):int)|- P[<<f_sum_1242@145:1>@147:0>](
      <f_sum_1242@145:0>:int,<<f_sum_1242@145:1>@147:0>:int)
      
      P[<sum_1030@137:0>](<f_sum_1242@145:0>:int),
      P[<<sum_1030@140:1>@143:0>]((-1 + <f_sum_1242@145:0>):int,<f_sum_1242@145:2>:int), (
      <f_sum_1242@145:0> > 0) |- P[<f_sum_1242@145:2>](<f_sum_1242@145:0>:int,
                                                       <f_sum_1242@145:2>:int)
      
      P[<sum_1030@140:0>](<sum_1030@140:0>:int), ((<<sum_1030@140:1>@143:0> = 0) && (<sum_1030@140:0> <= 0))
      |- P[<<sum_1030@140:1>@143:0>](<sum_1030@140:0>:int,<<sum_1030@140:1>@143:0>:int)
      
      P[<sum_1030@137:0>]((1 + <sum_1030@140:0>):int), ((1 + <sum_1030@140:0>) > 0)
      |- P[<sum_1030@140:0>](<sum_1030@140:0>:int)
      
      P[<main_1035@109:0>](<delta_1032@111:1>:int),
      P[<<delta_1032@111:0>@135:0>](<sum_1030@137:0>:int)|- P[<sum_1030@137:0>](
      <sum_1030@137:0>:int)
      
      P[<delta_1032@111:1>](<<delta_1032@111:0>@113:0>:int),
      P[<<f_delta_1243@131:1>@133:0>](<<delta_1032@111:0>@113:0>:int,<<delta_1032@111:0>@135:0>:int)|- P[<<delta_1032@111:0>@135:0>](
      <<delta_1032@111:0>@135:0>:int)
      
      P[<f_delta_1243@131:3>](<f_delta_1243@131:0>:int,<f_delta_1243@131:3>:int),
      ((1 + <<f_delta_1243@131:1>@133:0>) = <f_delta_1243@131:0>)
      |- P[<<f_delta_1243@131:1>@133:0>](<f_delta_1243@131:0>:int,<<f_delta_1243@131:1>@133:0>:int)
      
      P[<delta_1032@111:1>](<f_delta_1243@131:0>:int),
      P[<<<delta_1032@111:0>@113:1>@129:0>](<f_delta_1243@131:0>:int,<f_delta_1243@131:3>:int)|- P[<f_delta_1243@131:3>](
      <f_delta_1243@131:0>:int,<f_delta_1243@131:3>:int)
      
      P[<main_1035@109:0>](<delta_1032@111:1>:int),
      P[<<sum_1030@115:1>@127:0>](<<delta_1032@111:0>@113:0>:int,<<<delta_1032@111:0>@113:1>@129:0>:int)|- P[<<<delta_1032@111:0>@113:1>@129:0>](
      <<delta_1032@111:0>@113:0>:int,<<<delta_1032@111:0>@113:1>@129:0>:int)
      
      P[<sum_1030@115:0>](<sum_1030@115:0>:int),
      P[<<f_sum_1242@123:1>@125:0>](<sum_1030@115:0>:int,<<sum_1030@115:1>@127:0>:int), (
      <sum_1030@115:0> > 0) |- P[<<sum_1030@115:1>@127:0>](<sum_1030@115:0>:int,
                                                           <<sum_1030@115:1>@127:0>:int)
      
      P[<f_sum_1242@123:2>](<f_sum_1242@123:0>:int,(<<f_sum_1242@123:1>@125:0> + (-1 * <f_sum_1242@123:0>)):int)|- P[<<f_sum_1242@123:1>@125:0>](
      <f_sum_1242@123:0>:int,<<f_sum_1242@123:1>@125:0>:int)
      
      P[<sum_1030@115:0>](<f_sum_1242@123:0>:int),
      P[<<sum_1030@118:1>@121:0>]((-1 + <f_sum_1242@123:0>):int,<f_sum_1242@123:2>:int), (
      <f_sum_1242@123:0> > 0) |- P[<f_sum_1242@123:2>](<f_sum_1242@123:0>:int,
                                                       <f_sum_1242@123:2>:int)
      
      P[<sum_1030@118:0>](<sum_1030@118:0>:int), ((<<sum_1030@118:1>@121:0> = 0) && (<sum_1030@118:0> <= 0))
      |- P[<<sum_1030@118:1>@121:0>](<sum_1030@118:0>:int,<<sum_1030@118:1>@121:0>:int)
      
      P[<sum_1030@115:0>]((1 + <sum_1030@118:0>):int), ((1 + <sum_1030@118:0>) > 0)
      |- P[<sum_1030@118:0>](<sum_1030@118:0>:int)
      
      P[<main_1035@109:0>](<delta_1032@111:1>:int),
      P[<<delta_1032@111:0>@113:0>](<sum_1030@115:0>:int)|- P[<sum_1030@115:0>](
      <sum_1030@115:0>:int)
      
      P[<delta_1032@111:1>](<<delta_1032@111:0>@113:0>:int)|- P[<<delta_1032@111:0>@113:0>](
      <<delta_1032@111:0>@113:0>:int)
      
      P[<main_1035@109:0>](<delta_1032@111:1>:int)|- P[<delta_1032@111:1>](<delta_1032@111:1>:int)
      
      P[<f_1246@107:0>](<main_1035@109:0>:int)|- P[<main_1035@109:0>](<main_1035@109:0>:int)
      
      |- P[<f_1246@107:0>](<f_1246@107:0>:int)
    call trees:
      <main_1241@104>
        <f_1246@107>
          <main_1035@109>
            <delta_1032@111>
            </<delta_1032@111:0>@113>
            <sum_1030@115>
              <sum_1030@118>
              </<sum_1030@118:1>@121>
              <f_sum_1242@123>
              </<f_sum_1242@123:1>@125>
            </<sum_1030@115:1>@127>
            <<<delta_1032@111:0>@113:1>@129>
              <f_delta_1243@131>
              </<f_delta_1243@131:1>@133>
            </<delta_1032@111:0>@135>
            <sum_1030@137>
              <sum_1030@140>
              </<sum_1030@140:1>@143>
              <f_sum_1242@145>
              </<f_sum_1242@145:1>@147>
            </<sum_1030@137:1>@149>
            <<<delta_1032@111:0>@135:1>@151>
              <<<f_delta_1243@131:1>@133:1>@153>
                <f_delta_1244@155>
                </<f_delta_1244@155:2>@157>
              </<f_delta_1243@131:2>@159>
            </<delta_1032@111:2>@161>
            <f_main_1245@163>
              <fail_1248@166>
    inlined horn clauses:
      P[<fail_1248@166:0>](<fail_1248@166:0>:bool)|- bot
      
      P[<<sum_1030@115:1>@127:0>](<f_main_1245@163:0>:int,var70:int),
      P[<<sum_1030@137:1>@149:0>]((-1 + <f_main_1245@163:0>):int,((-1 * <f_main_1245@163:2>) + var70):int),
      ((<f_main_1245@163:2> < 0) && <fail_1248@166:0>) |- P[<fail_1248@166:0>](
      <fail_1248@166:0>:bool)
      
      P[<sum_1030@137:0>](<sum_1030@137:0>:int),
      P[<<sum_1030@140:1>@143:0>]((-1 + <sum_1030@137:0>):int,(<<sum_1030@137:1>@149:0> + (-1 * <sum_1030@137:0>)):int),
      (<sum_1030@137:0> > 0) |- P[<<sum_1030@137:1>@149:0>](<sum_1030@137:0>:int,
                                                            <<sum_1030@137:1>@149:0>:int)
      
      P[<sum_1030@140:0>](<sum_1030@140:0>:int), ((<<sum_1030@140:1>@143:0> = 0) && (<sum_1030@140:0> <= 0))
      |- P[<<sum_1030@140:1>@143:0>](<sum_1030@140:0>:int,<<sum_1030@140:1>@143:0>:int)
      
      P[<sum_1030@137:0>]((1 + <sum_1030@140:0>):int), ((1 + <sum_1030@140:0>) > 0)
      |- P[<sum_1030@140:0>](<sum_1030@140:0>:int)
      
      P[<<sum_1030@115:1>@127:0>]((1 + <sum_1030@137:0>):int,var71:int)|- P[<sum_1030@137:0>](<sum_1030@137:0>:int)
      
      P[<sum_1030@115:0>](<sum_1030@115:0>:int),
      P[<<sum_1030@118:1>@121:0>]((-1 + <sum_1030@115:0>):int,(<<sum_1030@115:1>@127:0> + (-1 * <sum_1030@115:0>)):int),
      (<sum_1030@115:0> > 0) |- P[<<sum_1030@115:1>@127:0>](<sum_1030@115:0>:int,
                                                            <<sum_1030@115:1>@127:0>:int)
      
      P[<sum_1030@118:0>](<sum_1030@118:0>:int), ((<<sum_1030@118:1>@121:0> = 0) && (<sum_1030@118:0> <= 0))
      |- P[<<sum_1030@118:1>@121:0>](<sum_1030@118:0>:int,<<sum_1030@118:1>@121:0>:int)
      
      P[<sum_1030@115:0>]((1 + <sum_1030@118:0>):int), ((1 + <sum_1030@118:0>) > 0)
      |- P[<sum_1030@118:0>](<sum_1030@118:0>:int)
      
      |- P[<sum_1030@115:0>](<sum_1030@115:0>:int)
    begin ParamSubstInfer.infer(10901)[3]
      
    end ParamSubstInfer.infer(10901)[3] (0.230965 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(10903)[3]
      
    end RefTypeInfer.elim_coeffs(10903)[3] (0.002999 sec.)
    begin YhornInterface.solve(11222)[3]
      begin HcSolver.solve_ub(11223)[4]
        encoded:
          P[<fail_1248@166:0>](<fail_1248@166:0>:int)|- bot
          
          P[<<sum_1030@115:1>@127:0>](<f_main_1245@163:0>:int,var70:int),
          P[<<sum_1030@137:1>@149:0>]((-1 + <f_main_1245@163:0>):int,(
                                      (-1 * <f_main_1245@163:2>) + var70):int),
          ((<f_main_1245@163:2> < 0) && (<fail_1248@166:0> = 1)) |- P[<fail_1248@166:0>](
          <fail_1248@166:0>:int)
          
          P[<sum_1030@137:0>](<sum_1030@137:0>:int),
          P[<<sum_1030@140:1>@143:0>]((-1 + <sum_1030@137:0>):int,(<<sum_1030@137:1>@149:0> + (-1 * <sum_1030@137:0>)):int),
          (<sum_1030@137:0> > 0) |- P[<<sum_1030@137:1>@149:0>](<sum_1030@137:0>:int,
                                                                <<sum_1030@137:1>@149:0>:int)
          
          P[<sum_1030@140:0>](<sum_1030@140:0>:int), ((<<sum_1030@140:1>@143:0> = 0) && (<sum_1030@140:0> <= 0))
          |- P[<<sum_1030@140:1>@143:0>](<sum_1030@140:0>:int,<<sum_1030@140:1>@143:0>:int)
          
          P[<sum_1030@137:0>]((1 + <sum_1030@140:0>):int), ((1 + <sum_1030@140:0>) > 0)
          |- P[<sum_1030@140:0>](<sum_1030@140:0>:int)
          
          P[<<sum_1030@115:1>@127:0>]((1 + <sum_1030@137:0>):int,var71:int)|- P[<sum_1030@137:0>](<sum_1030@137:0>:int)
          
          P[<sum_1030@115:0>](<sum_1030@115:0>:int),
          P[<<sum_1030@118:1>@121:0>]((-1 + <sum_1030@115:0>):int,(<<sum_1030@115:1>@127:0> + (-1 * <sum_1030@115:0>)):int),
          (<sum_1030@115:0> > 0) |- P[<<sum_1030@115:1>@127:0>](<sum_1030@115:0>:int,
                                                                <<sum_1030@115:1>@127:0>:int)
          
          P[<sum_1030@118:0>](<sum_1030@118:0>:int), ((<<sum_1030@118:1>@121:0> = 0) && (<sum_1030@118:0> <= 0))
          |- P[<<sum_1030@118:1>@121:0>](<sum_1030@118:0>:int,<<sum_1030@118:1>@121:0>:int)
          
          P[<sum_1030@115:0>]((1 + <sum_1030@118:0>):int), ((1 + <sum_1030@118:0>) > 0)
          |- P[<sum_1030@118:0>](<sum_1030@118:0>:int)
          
          |- P[<sum_1030@115:0>](<sum_1030@115:0>:int)
        input to Yhorn:
          P[<fail_1248@166:0>](<fail_1248@166:0>:int)|- bot
          
          P[<<sum_1030@115:1>@127:0>](<f_main_1245@163:0>:int,var70:int),
          P[<<sum_1030@137:1>@149:0>](var72:int,var73:int),
          ((var70 < var73) && (((1 + var72) = <f_main_1245@163:0>) && (<fail_1248@166:0> = 1)))
          |- P[<fail_1248@166:0>](<fail_1248@166:0>:int)
          
          P[<sum_1030@137:0>](<sum_1030@137:0>:int),
          P[<<sum_1030@140:1>@143:0>](var74:int,var75:int),
          (((var75 + <sum_1030@137:0>) = <<sum_1030@137:1>@149:0>) &&
           (((1 + var74) = <sum_1030@137:0>) && (<sum_1030@137:0> > 0)))
          |- P[<<sum_1030@137:1>@149:0>](<sum_1030@137:0>:int,<<sum_1030@137:1>@149:0>:int)
          
          P[<sum_1030@140:0>](<sum_1030@140:0>:int), ((<sum_1030@140:0> <= 0) && (<<sum_1030@140:1>@143:0> = 0))
          |- P[<<sum_1030@140:1>@143:0>](<sum_1030@140:0>:int,<<sum_1030@140:1>@143:0>:int)
          
          P[<sum_1030@137:0>](var76:int), ((var76 = (1 + <sum_1030@140:0>)) && ((1 + <sum_1030@140:0>) > 0))
          |- P[<sum_1030@140:0>](<sum_1030@140:0>:int)
          
          P[<<sum_1030@115:1>@127:0>](var77:int,var71:int), (var77 = (1 + <sum_1030@137:0>))
          |- P[<sum_1030@137:0>](<sum_1030@137:0>:int)
          
          P[<sum_1030@115:0>](<sum_1030@115:0>:int),
          P[<<sum_1030@118:1>@121:0>](var78:int,var79:int),
          (((var79 + <sum_1030@115:0>) = <<sum_1030@115:1>@127:0>) &&
           (((1 + var78) = <sum_1030@115:0>) && (<sum_1030@115:0> > 0)))
          |- P[<<sum_1030@115:1>@127:0>](<sum_1030@115:0>:int,<<sum_1030@115:1>@127:0>:int)
          
          P[<sum_1030@118:0>](<sum_1030@118:0>:int), ((<sum_1030@118:0> <= 0) && (<<sum_1030@118:1>@121:0> = 0))
          |- P[<<sum_1030@118:1>@121:0>](<sum_1030@118:0>:int,<<sum_1030@118:1>@121:0>:int)
          
          P[<sum_1030@115:0>](var80:int), ((var80 = (1 + <sum_1030@118:0>)) && ((1 + <sum_1030@118:0>) > 0))
          |- P[<sum_1030@118:0>](<sum_1030@118:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1248_sep_166_sep_0($369)) -> 1=0.
(($369-1=0) & ($370-$371+1=0) & ($372-$373<0)) & (v_sep_sum_1030_sep_137_sep_1_sep_149_sep_0($370,$373)) & (v_sep_sum_1030_sep_115_sep_1_sep_127_sep_0($371,$372)) -> v_sep_fail_1248_sep_166_sep_0($369).
(($374>0) & (-$374+$375+1=0) & ($374+$376-$377=0)) & (v_sep_sum_1030_sep_140_sep_1_sep_143_sep_0($375,$376)) & (v_sep_sum_1030_sep_137_sep_0($374)) -> v_sep_sum_1030_sep_137_sep_1_sep_149_sep_0($374,$377).
(($378=0) & ($379<=0)) & (v_sep_sum_1030_sep_140_sep_0($379)) -> v_sep_sum_1030_sep_140_sep_1_sep_143_sep_0($379,$378).
(($379+1>0) & (-$379+$380-1=0)) & (v_sep_sum_1030_sep_137_sep_0($380)) -> v_sep_sum_1030_sep_140_sep_0($379).
(-$374+$381-1=0) & (v_sep_sum_1030_sep_115_sep_1_sep_127_sep_0($381,$382)) -> v_sep_sum_1030_sep_137_sep_0($374).
(($383>0) & (-$383+$384+1=0) & ($383+$385-$386=0)) & (v_sep_sum_1030_sep_118_sep_1_sep_121_sep_0($384,$385)) & (v_sep_sum_1030_sep_115_sep_0($383)) -> v_sep_sum_1030_sep_115_sep_1_sep_127_sep_0($383,$386).
(($387=0) & ($388<=0)) & (v_sep_sum_1030_sep_118_sep_0($388)) -> v_sep_sum_1030_sep_118_sep_1_sep_121_sep_0($388,$387).
(($388+1>0) & (-$388+$389-1=0)) & (v_sep_sum_1030_sep_115_sep_0($389)) -> v_sep_sum_1030_sep_118_sep_0($388).
0=0 -> v_sep_sum_1030_sep_115_sep_0($383).


v_sep_fail_1248_sep_166_sep_0: X
v_sep_sum_1030_sep_115_sep_0: X
v_sep_sum_1030_sep_115_sep_1_sep_127_sep_0: X
v_sep_sum_1030_sep_118_sep_0: X
v_sep_sum_1030_sep_118_sep_1_sep_121_sep_0: X
v_sep_sum_1030_sep_137_sep_0: X
v_sep_sum_1030_sep_137_sep_1_sep_149_sep_0: X
v_sep_sum_1030_sep_140_sep_0: X
v_sep_sum_1030_sep_140_sep_1_sep_143_sep_0: X
.............
v_sep_fail_1248_sep_166_sep_0: X
v_sep_sum_1030_sep_115_sep_0: X
v_sep_sum_1030_sep_115_sep_1_sep_127_sep_0: X
v_sep_sum_1030_sep_118_sep_0: X
v_sep_sum_1030_sep_118_sep_1_sep_121_sep_0: X
v_sep_sum_1030_sep_137_sep_0: X
v_sep_sum_1030_sep_137_sep_1_sep_149_sep_0: X
v_sep_sum_1030_sep_140_sep_0: X
v_sep_sum_1030_sep_140_sep_1_sep_143_sep_0: X
....
v_sep_fail_1248_sep_166_sep_0: X
v_sep_sum_1030_sep_115_sep_0: X
v_sep_sum_1030_sep_115_sep_1_sep_127_sep_0: X
v_sep_sum_1030_sep_118_sep_0: X
v_sep_sum_1030_sep_118_sep_1_sep_121_sep_0: X
v_sep_sum_1030_sep_137_sep_0: X
v_sep_sum_1030_sep_137_sep_1_sep_149_sep_0: X
v_sep_sum_1030_sep_140_sep_0: X
v_sep_sum_1030_sep_140_sep_1_sep_143_sep_0: X
........
v_sep_fail_1248_sep_166_sep_0: X
v_sep_sum_1030_sep_115_sep_0: X
v_sep_sum_1030_sep_115_sep_1_sep_127_sep_0: X
v_sep_sum_1030_sep_118_sep_0: X
v_sep_sum_1030_sep_118_sep_1_sep_121_sep_0: X
v_sep_sum_1030_sep_137_sep_0: X
v_sep_sum_1030_sep_137_sep_1_sep_149_sep_0: X
v_sep_sum_1030_sep_140_sep_0: X
v_sep_sum_1030_sep_140_sep_1_sep_143_sep_0: X
...........
v_sep_fail_1248_sep_166_sep_0: X
v_sep_sum_1030_sep_115_sep_0: X
v_sep_sum_1030_sep_115_sep_1_sep_127_sep_0: X
v_sep_sum_1030_sep_118_sep_0: X
v_sep_sum_1030_sep_118_sep_1_sep_121_sep_0: X
v_sep_sum_1030_sep_137_sep_0: X
v_sep_sum_1030_sep_137_sep_1_sep_149_sep_0: X
v_sep_sum_1030_sep_140_sep_0: X
v_sep_sum_1030_sep_140_sep_1_sep_143_sep_0: X
.............(0=0) & (v_sep_fail_1248_sep_166_sep_0($369)) -> 1=0.
(($369-1=0) & ($370-$371+1=0) & ($372-$373<0)) & (v_sep_sum_1030_sep_137_sep_1_sep_149_sep_0($370,$373)) & (v_sep_sum_1030_sep_115_sep_1_sep_127_sep_0($371,$372)) -> v_sep_fail_1248_sep_166_sep_0($369).
(($374>0) & (-$374+$375+1=0) & ($374+$376-$377=0)) & (v_sep_sum_1030_sep_140_sep_1_sep_143_sep_0($375,$376)) & (v_sep_sum_1030_sep_137_sep_0($374)) -> v_sep_sum_1030_sep_137_sep_1_sep_149_sep_0($374,$377).
(($378=0) & ($379<=0)) & (v_sep_sum_1030_sep_140_sep_0($379)) -> v_sep_sum_1030_sep_140_sep_1_sep_143_sep_0($379,$378).
(($379+1>0) & (-$379+$380-1=0)) & (v_sep_sum_1030_sep_137_sep_0($380)) -> v_sep_sum_1030_sep_140_sep_0($379).
(-$374+$381-1=0) & (v_sep_sum_1030_sep_115_sep_1_sep_127_sep_0($381,$382)) -> v_sep_sum_1030_sep_137_sep_0($374).
(($383>0) & (-$383+$384+1=0) & ($383+$385-$386=0)) & (v_sep_sum_1030_sep_118_sep_1_sep_121_sep_0($384,$385)) & (v_sep_sum_1030_sep_115_sep_0($383)) -> v_sep_sum_1030_sep_115_sep_1_sep_127_sep_0($383,$386).
(($387=0) & ($388<=0)) & (v_sep_sum_1030_sep_118_sep_0($388)) -> v_sep_sum_1030_sep_118_sep_1_sep_121_sep_0($388,$387).
(($388+1>0) & (-$388+$389-1=0)) & (v_sep_sum_1030_sep_115_sep_0($389)) -> v_sep_sum_1030_sep_118_sep_0($388).
0=0 -> v_sep_sum_1030_sep_115_sep_0($383).

          |- P[<sum_1030@115:0>](<sum_1030@115:0>:int)
        solution:
          P[<fail_1248@166:0>]($390:bool) = false
          P[<sum_1030@115:0>]($419:int) = true
          P[<<sum_1030@115:1>@127:0>]($398:int,$400:int) = ($398 <= 1)
          P[<sum_1030@118:0>]($422:int) = true
          P[<<sum_1030@118:1>@121:0>]($414:int,$416:int) = ($414 <= 0)
          P[<sum_1030@137:0>]($408:int) = ($408 <= 0)
          P[<<sum_1030@137:1>@149:0>]($393:int,$395:int) = (3 <= $393)
          P[<sum_1030@140:0>]($411:int) = false
          P[<<sum_1030@140:1>@143:0>]($403:int,$405:int) = false
        
      end HcSolver.solve_ub(11223)[4] (0.042994 sec.)
      begin HcSolver.check_validity(11846)[4]
        input:
          P[<fail_1248@166:0>](<fail_1248@166:0>:bool)|- bot
          
          P[<<sum_1030@115:1>@127:0>](<f_main_1245@163:0>:int,var70:int),
          P[<<sum_1030@137:1>@149:0>]((-1 + <f_main_1245@163:0>):int,(
                                      (-1 * <f_main_1245@163:2>) + var70):int),
          ((<f_main_1245@163:2> < 0) && <fail_1248@166:0>) |- P[<fail_1248@166:0>](
          <fail_1248@166:0>:bool)
          
          P[<sum_1030@137:0>](<sum_1030@137:0>:int),
          P[<<sum_1030@140:1>@143:0>]((-1 + <sum_1030@137:0>):int,(<<sum_1030@137:1>@149:0> + (-1 * <sum_1030@137:0>)):int),
          (<sum_1030@137:0> > 0) |- P[<<sum_1030@137:1>@149:0>](<sum_1030@137:0>:int,
                                                                <<sum_1030@137:1>@149:0>:int)
          
          P[<sum_1030@140:0>](<sum_1030@140:0>:int), ((<<sum_1030@140:1>@143:0> = 0) && (<sum_1030@140:0> <= 0))
          |- P[<<sum_1030@140:1>@143:0>](<sum_1030@140:0>:int,<<sum_1030@140:1>@143:0>:int)
          
          P[<sum_1030@137:0>]((1 + <sum_1030@140:0>):int), ((1 + <sum_1030@140:0>) > 0)
          |- P[<sum_1030@140:0>](<sum_1030@140:0>:int)
          
          P[<<sum_1030@115:1>@127:0>]((1 + <sum_1030@137:0>):int,var71:int)|- P[<sum_1030@137:0>](<sum_1030@137:0>:int)
          
          P[<sum_1030@115:0>](<sum_1030@115:0>:int),
          P[<<sum_1030@118:1>@121:0>]((-1 + <sum_1030@115:0>):int,(<<sum_1030@115:1>@127:0> + (-1 * <sum_1030@115:0>)):int),
          (<sum_1030@115:0> > 0) |- P[<<sum_1030@115:1>@127:0>](<sum_1030@115:0>:int,
                                                                <<sum_1030@115:1>@127:0>:int)
          
          P[<sum_1030@118:0>](<sum_1030@118:0>:int), ((<<sum_1030@118:1>@121:0> = 0) && (<sum_1030@118:0> <= 0))
          |- P[<<sum_1030@118:1>@121:0>](<sum_1030@118:0>:int,<<sum_1030@118:1>@121:0>:int)
          
          P[<sum_1030@115:0>]((1 + <sum_1030@118:0>):int), ((1 + <sum_1030@118:0>) > 0)
          |- P[<sum_1030@118:0>](<sum_1030@118:0>:int)
          
          |- P[<sum_1030@115:0>](<sum_1030@115:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(11846)[4] (0.002000 sec.)
      solution:
        P[<fail_1248@166:0>]($390:bool) = false
        P[<sum_1030@115:0>]($419:int) = true
        P[<<sum_1030@115:1>@127:0>]($398:int,$400:int) = ($398 <= 1)
        P[<sum_1030@118:0>]($422:int) = true
        P[<<sum_1030@118:1>@121:0>]($414:int,$416:int) = ($414 <= 0)
        P[<sum_1030@137:0>]($408:int) = ($408 <= 0)
        P[<<sum_1030@137:1>@149:0>]($393:int,$395:int) = (3 <= $393)
        P[<sum_1030@140:0>]($411:int) = false
        P[<<sum_1030@140:1>@143:0>]($403:int,$405:int) = false
    end YhornInterface.solve(11222)[3] (0.045993 sec.)
    
  end RefTypeInfer.infer_etrs(8048)[2] (0.295955 sec.)
  refinement types:
    main_1241: X
    f_1246: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    delta_1032: (v1:int -> (v2:int -> X) -> X /\
                 v5:int -> (v6:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (v1 <= 1)} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (v1 <= 0)} -> X) -> X
    f_sum_1242: v1:int -> (v2:int -> X) -> v4:int -> X
    f_delta_1243: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    sum_1030: v1:{v1:int | (v1 <= 0)} -> (v2:{v2:int | (3 <= v1)} -> X) -> X
    sum_1030: v1:{v1:int | false} -> (v2:{v2:int | false} -> X) -> X
    f_sum_1242: v1:int -> (v2:int -> X) -> v4:int -> X
    f_delta_1244: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1245: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1248: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1247: var89:int -> var88:unit -> X
  abstraction types:
    main_1241: X
    f_1246: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    delta_1032: (var90:int -> (var91:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    sum_1030: var102:int[var102 -> (var102 <= 0)] ->
              (var103:int[var103 -> (var102 <= 1),
                          var103 -> (var102 <= 0),
                          var103 -> (3 <= var102)] -> X) -> X
    f_sum_1242: var106:int -> (var107:int -> X) -> var109:int -> X
    f_delta_1243: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    f_delta_1244: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1245: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1248: v1:bool -> (v2:unit -> X) -> X
    f_1247: var89:int -> var88:unit -> X
  
end AbsTypeInfer.refine(8047)[1] (0.299954 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1241
  main_1241 -> (rand_int f_1246)
  delta_1032 f_1033 n_1034 k_delta_1140 -> (f_1033 n_1034 (f_delta_1243 n_1034 f_1033 k_delta_1140))
  f_1246 x_1216 -> (main_1035 x_1216 (f_1247 x_1216))
  f_1247 x_1216 x_1213 -> end
  f_delta_1243 n_1034 f_1033 k_delta_1140 x_1143 -> (f_1033 (n_1034 - 1) (f_delta_1244 n_1034 x_1143 k_delta_1140))
  f_delta_1244 n_1034 x_1143 k_delta_1140 x_1144 -> (k_delta_1140 (x_1143 - x_1144))
  f_main_1245 n_1036 k_main_1178 x_1181 when (x_1181 >= 0) -> (k_main_1178 ())
  f_main_1245 n_1036 k_main_1178 x_1181 when (not (x_1181 >= 0)) -> (fail_1248 true k_main_1178)
  f_sum_1242 n_1031 k_sum_1093 x_1097 -> (k_sum_1093 (n_1031 + x_1097))
  fail_1248 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1178 -> (delta_1032 sum_1030 n_1036 (f_main_1245 n_1036 k_main_1178))
  sum_1030 n_1031 k_sum_1093 when (n_1031 <= 0) -> (k_sum_1093 0)
  sum_1030 n_1031 k_sum_1093 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1242 n_1031 k_sum_1093))
Types:
  main_1241 : X
  fail_1248 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (x_1:int[x_1 <= 0; x_1 <= -1] ->
              (x_3:int[x_1 >= 3; x_1 <= 1; x_1 >= 5; x_1 <= 0; x_3 <= 0; x_3 >= 0] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1241 ... --> 
  f_1246 ... --> 
  main_1035 ... --> 
  delta_1032 ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sum_1242 ... --> 
  f_sum_1242 ... --> 
  f_delta_1243 ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sum_1242 ... --> 
  f_delta_1244 ... --> 
  f_main_1245 [2/2] ... --> 
  fail_1248 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(15052)[1]
  program:
    main_1241  | true = ((Random.int 0) f_1246)
    delta_1032 f_1033 n_1034 k_delta_1140 | true = (f_1033 n_1034
                                                           (f_delta_1243 n_1034
                                                                    f_1033
                                                                    k_delta_1140))
    f_1246 x_1216 | true = (main_1035 x_1216
                                      (f_1247 x_1216))
    f_1247 x_1216 x_1213 | true = end
    f_delta_1243 n_1034 f_1033 k_delta_1140 x_1143 | true = (f_1033
                                                               (n_1034 - 1)
                                                               (f_delta_1244 n_1034
                                                                    x_1143
                                                                    k_delta_1140))
    f_delta_1244 n_1034 x_1143 k_delta_1140 x_1144 | true = (k_delta_1140 (
                                                                    x_1143 - x_1144))
    f_main_1245 n_1036 k_main_1178 x_1181 | (x_1181 >= 0) = (k_main_1178 ())
    f_main_1245 n_1036 k_main_1178 x_1181 | (not (x_1181 >= 0)) = (fail_1248 true
                                                                    k_main_1178)
    f_sum_1242 n_1031 k_sum_1093 x_1097 | true = (k_sum_1093 (n_1031 + x_1097))
    fail_1248 b k | true = (fail ())
    main_1035 n_1036 k_main_1178 | true = (delta_1032 sum_1030
                                                      n_1036
                                                      (f_main_1245 n_1036
                                                                   k_main_1178))
    sum_1030 n_1031 k_sum_1093 | (n_1031 <= 0) = (k_sum_1093 0)
    sum_1030 n_1031 k_sum_1093 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1242 n_1031
                                                                    k_sum_1093))
    main_1241:X
    delta_1032:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_1246:int -> X
    f_1247:int -> unit -> X
    f_delta_1243:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_delta_1244:int -> int -> (int -> X) -> int -> X
    f_main_1245:int -> (unit -> X) -> int -> X
    f_sum_1242:int -> (int -> X) -> int -> X
    fail_1248:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: delta_1032,f_1246,f_1247,f_delta_1243,f_delta_1244,f_main_1245,f_sum_1242,main_1035
  counterexample: 0:0:0:0:1:1:0:0:0:0:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1246@172:0> = var111)
     [true.(<main_1035@174:0> = <f_1246@172:0>)
      [true.(<delta_1032@176:1> = <main_1035@174:0>)
       [true.(<<delta_1032@176:0>@178:0> = <delta_1032@176:1>)
        [true.(<sum_1030@180:0> = <<delta_1032@176:0>@178:0>)
         [(not (<sum_1030@180:0> <= 0)).(<sum_1030@183:0> = (<sum_1030@180:0> - 1))
          [(not (<sum_1030@183:0> <= 0)).(<sum_1030@186:0> = (<sum_1030@183:0> - 1))
           [(<sum_1030@186:0> <= 0).(<<sum_1030@186:1>@189:0> = 0)
            [true.((<f_sum_1242@191:0> = <sum_1030@183:0>) && (<f_sum_1242@191:2> = <<sum_1030@186:1>@189:0>))
             [true.(<<f_sum_1242@191:1>@193:0> = (<f_sum_1242@191:0> + <f_sum_1242@191:2>))
              [true.(<<sum_1030@183:1>@195:0> = <<f_sum_1242@191:1>@193:0>)
               [true.((<f_sum_1242@197:0> = <sum_1030@180:0>) && (<f_sum_1242@197:2> = <<sum_1030@183:1>@195:0>))
                [true.(<<f_sum_1242@197:1>@199:0> = (<f_sum_1242@197:0> + <f_sum_1242@197:2>))
                 [true.(<<sum_1030@180:1>@201:0> = <<f_sum_1242@197:1>@199:0>)
                  [true.(<<<delta_1032@176:0>@178:1>@203:0> = <<sum_1030@180:1>@201:0>)
                   [true.
                    ((<f_delta_1243@205:0> = <delta_1032@176:1>) &&
                     (<f_delta_1243@205:3> = <<<delta_1032@176:0>@178:1>@203:0>))
                    [true.(<<f_delta_1243@205:1>@207:0> = (<f_delta_1243@205:0> - 1))
                     [true.(<<delta_1032@176:0>@209:0> = <<f_delta_1243@205:1>@207:0>)
                      [true.(<sum_1030@211:0> = <<delta_1032@176:0>@209:0>)
                       [(not (<sum_1030@211:0> <= 0)).(<sum_1030@214:0> = (<sum_1030@211:0> - 1))
                        [(<sum_1030@214:0> <= 0).(<<sum_1030@214:1>@217:0> = 0)
                         [true.
                          ((<f_sum_1242@219:0> = <sum_1030@211:0>) && (<f_sum_1242@219:2> = <<sum_1030@214:1>@217:0>))
                          [true.(<<f_sum_1242@219:1>@221:0> = (<f_sum_1242@219:0> + <f_sum_1242@219:2>))
                           [true.(<<sum_1030@211:1>@223:0> = <<f_sum_1242@219:1>@221:0>)
                            [true.(<<<delta_1032@176:0>@209:1>@225:0> = <<sum_1030@211:1>@223:0>)
                             [true.(<<<f_delta_1243@205:1>@207:1>@227:0> = <<<delta_1032@176:0>@209:1>@225:0>)
                              [true.
                               ((<f_delta_1244@229:0> = <f_delta_1243@205:0>) &&
                                ((<f_delta_1244@229:1> = <f_delta_1243@205:3>) &&
                                 (<f_delta_1244@229:3> = <<<f_delta_1243@205:1>@207:1>@227:0>)))
                               [true.(<<f_delta_1244@229:2>@231:0> = (<f_delta_1244@229:1> - <f_delta_1244@229:3>))
                                [true.(<<f_delta_1243@205:2>@233:0> = <<f_delta_1244@229:2>@231:0>)
                                 [true.(<<delta_1032@176:2>@235:0> = <<f_delta_1243@205:2>@233:0>)
                                  [true.
                                   ((<f_main_1245@237:0> = <main_1035@174:0>) &&
                                    (<f_main_1245@237:2> = <<delta_1032@176:2>@235:0>))
                                   [(not (<f_main_1245@237:2> >= 0)).(<fail_1248@240:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(15053)[2]
    horn clauses:
      P[<fail_1248@240:0>](<fail_1248@240:0>:bool)|- bot
      
      P[<f_main_1245@237:2>](<f_main_1245@237:0>:int,<f_main_1245@237:2>:int),
      ((<f_main_1245@237:2> < 0) && <fail_1248@240:0>) |- P[<fail_1248@240:0>](
      <fail_1248@240:0>:bool)
      
      P[<main_1035@174:0>](<f_main_1245@237:0>:int),
      P[<<delta_1032@176:2>@235:0>](<f_main_1245@237:0>:int,<f_main_1245@237:2>:int)|- P[<f_main_1245@237:2>](
      <f_main_1245@237:0>:int,<f_main_1245@237:2>:int)
      
      P[<delta_1032@176:1>](<delta_1032@176:1>:int),
      P[<<f_delta_1243@205:2>@233:0>](<delta_1032@176:1>:int,<<delta_1032@176:2>@235:0>:int)|- P[<<delta_1032@176:2>@235:0>](
      <delta_1032@176:1>:int,<<delta_1032@176:2>@235:0>:int)
      
      P[<f_delta_1243@205:3>](<f_delta_1243@205:0>:int,<f_delta_1244@229:1>:int),
      P[<<f_delta_1244@229:2>@231:0>](<f_delta_1243@205:0>:int,<f_delta_1244@229:1>:int,<<f_delta_1243@205:2>@233:0>:int)|- P[<<f_delta_1243@205:2>@233:0>](
      <f_delta_1243@205:0>:int,<<f_delta_1243@205:2>@233:0>:int)
      
      P[<f_delta_1244@229:3>](<f_delta_1244@229:0>:int,<f_delta_1244@229:1>:int,(
                              (-1 * <<f_delta_1244@229:2>@231:0>) + <f_delta_1244@229:1>):int)|- P[<<f_delta_1244@229:2>@231:0>](
      <f_delta_1244@229:0>:int,<f_delta_1244@229:1>:int,<<f_delta_1244@229:2>@231:0>:int)
      
      P[<f_delta_1243@205:3>](<f_delta_1244@229:0>:int,<f_delta_1244@229:1>:int),
      P[<<<f_delta_1243@205:1>@207:1>@227:0>](<f_delta_1244@229:0>:int,(
                                              -1 + <f_delta_1244@229:0>):int,<f_delta_1244@229:3>:int)|- P[<f_delta_1244@229:3>](
      <f_delta_1244@229:0>:int,<f_delta_1244@229:1>:int,<f_delta_1244@229:3>:int)
      
      P[<delta_1032@176:1>](<f_delta_1243@205:0>:int),
      P[<<<delta_1032@176:0>@209:1>@225:0>](<<f_delta_1243@205:1>@207:0>:int,<<<f_delta_1243@205:1>@207:1>@227:0>:int)|- P[<<<f_delta_1243@205:1>@207:1>@227:0>](
      <f_delta_1243@205:0>:int,<<f_delta_1243@205:1>@207:0>:int,<<<f_delta_1243@205:1>@207:1>@227:0>:int)
      
      P[<main_1035@174:0>](<delta_1032@176:1>:int),
      P[<<sum_1030@211:1>@223:0>](<<delta_1032@176:0>@209:0>:int,<<<delta_1032@176:0>@209:1>@225:0>:int)|- P[<<<delta_1032@176:0>@209:1>@225:0>](
      <<delta_1032@176:0>@209:0>:int,<<<delta_1032@176:0>@209:1>@225:0>:int)
      
      P[<sum_1030@211:0>](<sum_1030@211:0>:int),
      P[<<f_sum_1242@219:1>@221:0>](<sum_1030@211:0>:int,<<sum_1030@211:1>@223:0>:int), (
      <sum_1030@211:0> > 0) |- P[<<sum_1030@211:1>@223:0>](<sum_1030@211:0>:int,
                                                           <<sum_1030@211:1>@223:0>:int)
      
      P[<f_sum_1242@219:2>](<f_sum_1242@219:0>:int,(<<f_sum_1242@219:1>@221:0> + (-1 * <f_sum_1242@219:0>)):int)|- P[<<f_sum_1242@219:1>@221:0>](
      <f_sum_1242@219:0>:int,<<f_sum_1242@219:1>@221:0>:int)
      
      P[<sum_1030@211:0>](<f_sum_1242@219:0>:int),
      P[<<sum_1030@214:1>@217:0>]((-1 + <f_sum_1242@219:0>):int,<f_sum_1242@219:2>:int), (
      <f_sum_1242@219:0> > 0) |- P[<f_sum_1242@219:2>](<f_sum_1242@219:0>:int,
                                                       <f_sum_1242@219:2>:int)
      
      P[<sum_1030@214:0>](<sum_1030@214:0>:int), ((<<sum_1030@214:1>@217:0> = 0) && (<sum_1030@214:0> <= 0))
      |- P[<<sum_1030@214:1>@217:0>](<sum_1030@214:0>:int,<<sum_1030@214:1>@217:0>:int)
      
      P[<sum_1030@211:0>]((1 + <sum_1030@214:0>):int), ((1 + <sum_1030@214:0>) > 0)
      |- P[<sum_1030@214:0>](<sum_1030@214:0>:int)
      
      P[<main_1035@174:0>](<delta_1032@176:1>:int),
      P[<<delta_1032@176:0>@209:0>](<sum_1030@211:0>:int)|- P[<sum_1030@211:0>](
      <sum_1030@211:0>:int)
      
      P[<delta_1032@176:1>](<<delta_1032@176:0>@178:0>:int),
      P[<<f_delta_1243@205:1>@207:0>](<<delta_1032@176:0>@178:0>:int,<<delta_1032@176:0>@209:0>:int)|- P[<<delta_1032@176:0>@209:0>](
      <<delta_1032@176:0>@209:0>:int)
      
      P[<f_delta_1243@205:3>](<f_delta_1243@205:0>:int,<f_delta_1243@205:3>:int),
      ((1 + <<f_delta_1243@205:1>@207:0>) = <f_delta_1243@205:0>)
      |- P[<<f_delta_1243@205:1>@207:0>](<f_delta_1243@205:0>:int,<<f_delta_1243@205:1>@207:0>:int)
      
      P[<delta_1032@176:1>](<f_delta_1243@205:0>:int),
      P[<<<delta_1032@176:0>@178:1>@203:0>](<f_delta_1243@205:0>:int,<f_delta_1243@205:3>:int)|- P[<f_delta_1243@205:3>](
      <f_delta_1243@205:0>:int,<f_delta_1243@205:3>:int)
      
      P[<main_1035@174:0>](<delta_1032@176:1>:int),
      P[<<sum_1030@180:1>@201:0>](<<delta_1032@176:0>@178:0>:int,<<<delta_1032@176:0>@178:1>@203:0>:int)|- P[<<<delta_1032@176:0>@178:1>@203:0>](
      <<delta_1032@176:0>@178:0>:int,<<<delta_1032@176:0>@178:1>@203:0>:int)
      
      P[<sum_1030@180:0>](<sum_1030@180:0>:int),
      P[<<f_sum_1242@197:1>@199:0>](<sum_1030@180:0>:int,<<sum_1030@180:1>@201:0>:int), (
      <sum_1030@180:0> > 0) |- P[<<sum_1030@180:1>@201:0>](<sum_1030@180:0>:int,
                                                           <<sum_1030@180:1>@201:0>:int)
      
      P[<f_sum_1242@197:2>](<f_sum_1242@197:0>:int,(<<f_sum_1242@197:1>@199:0> + (-1 * <f_sum_1242@197:0>)):int)|- P[<<f_sum_1242@197:1>@199:0>](
      <f_sum_1242@197:0>:int,<<f_sum_1242@197:1>@199:0>:int)
      
      P[<sum_1030@180:0>](<f_sum_1242@197:0>:int),
      P[<<sum_1030@183:1>@195:0>]((-1 + <f_sum_1242@197:0>):int,<f_sum_1242@197:2>:int), (
      <f_sum_1242@197:0> > 0) |- P[<f_sum_1242@197:2>](<f_sum_1242@197:0>:int,
                                                       <f_sum_1242@197:2>:int)
      
      P[<sum_1030@183:0>](<sum_1030@183:0>:int),
      P[<<f_sum_1242@191:1>@193:0>](<sum_1030@183:0>:int,<<sum_1030@183:1>@195:0>:int), (
      <sum_1030@183:0> > 0) |- P[<<sum_1030@183:1>@195:0>](<sum_1030@183:0>:int,
                                                           <<sum_1030@183:1>@195:0>:int)
      
      P[<f_sum_1242@191:2>](<f_sum_1242@191:0>:int,(<<f_sum_1242@191:1>@193:0> + (-1 * <f_sum_1242@191:0>)):int)|- P[<<f_sum_1242@191:1>@193:0>](
      <f_sum_1242@191:0>:int,<<f_sum_1242@191:1>@193:0>:int)
      
      P[<sum_1030@183:0>](<f_sum_1242@191:0>:int),
      P[<<sum_1030@186:1>@189:0>]((-1 + <f_sum_1242@191:0>):int,<f_sum_1242@191:2>:int), (
      <f_sum_1242@191:0> > 0) |- P[<f_sum_1242@191:2>](<f_sum_1242@191:0>:int,
                                                       <f_sum_1242@191:2>:int)
      
      P[<sum_1030@186:0>](<sum_1030@186:0>:int), ((<<sum_1030@186:1>@189:0> = 0) && (<sum_1030@186:0> <= 0))
      |- P[<<sum_1030@186:1>@189:0>](<sum_1030@186:0>:int,<<sum_1030@186:1>@189:0>:int)
      
      P[<sum_1030@183:0>]((1 + <sum_1030@186:0>):int), ((1 + <sum_1030@186:0>) > 0)
      |- P[<sum_1030@186:0>](<sum_1030@186:0>:int)
      
      P[<sum_1030@180:0>]((1 + <sum_1030@183:0>):int), ((1 + <sum_1030@183:0>) > 0)
      |- P[<sum_1030@183:0>](<sum_1030@183:0>:int)
      
      P[<main_1035@174:0>](<delta_1032@176:1>:int),
      P[<<delta_1032@176:0>@178:0>](<sum_1030@180:0>:int)|- P[<sum_1030@180:0>](
      <sum_1030@180:0>:int)
      
      P[<delta_1032@176:1>](<<delta_1032@176:0>@178:0>:int)|- P[<<delta_1032@176:0>@178:0>](
      <<delta_1032@176:0>@178:0>:int)
      
      P[<main_1035@174:0>](<delta_1032@176:1>:int)|- P[<delta_1032@176:1>](<delta_1032@176:1>:int)
      
      P[<f_1246@172:0>](<main_1035@174:0>:int)|- P[<main_1035@174:0>](<main_1035@174:0>:int)
      
      |- P[<f_1246@172:0>](<f_1246@172:0>:int)
    call trees:
      <main_1241@169>
        <f_1246@172>
          <main_1035@174>
            <delta_1032@176>
            </<delta_1032@176:0>@178>
            <sum_1030@180>
              <sum_1030@183>
                <sum_1030@186>
                </<sum_1030@186:1>@189>
                <f_sum_1242@191>
                </<f_sum_1242@191:1>@193>
              </<sum_1030@183:1>@195>
              <f_sum_1242@197>
              </<f_sum_1242@197:1>@199>
            </<sum_1030@180:1>@201>
            <<<delta_1032@176:0>@178:1>@203>
              <f_delta_1243@205>
              </<f_delta_1243@205:1>@207>
            </<delta_1032@176:0>@209>
            <sum_1030@211>
              <sum_1030@214>
              </<sum_1030@214:1>@217>
              <f_sum_1242@219>
              </<f_sum_1242@219:1>@221>
            </<sum_1030@211:1>@223>
            <<<delta_1032@176:0>@209:1>@225>
              <<<f_delta_1243@205:1>@207:1>@227>
                <f_delta_1244@229>
                </<f_delta_1244@229:2>@231>
              </<f_delta_1243@205:2>@233>
            </<delta_1032@176:2>@235>
            <f_main_1245@237>
              <fail_1248@240>
    inlined horn clauses:
      P[<fail_1248@240:0>](<fail_1248@240:0>:bool)|- bot
      
      P[<<sum_1030@180:1>@201:0>](<f_main_1245@237:0>:int,var115:int),
      P[<<sum_1030@211:1>@223:0>]((-1 + <f_main_1245@237:0>):int,((-1 * <f_main_1245@237:2>) + var115):int),
      ((<f_main_1245@237:2> < 0) && <fail_1248@240:0>) |- P[<fail_1248@240:0>](
      <fail_1248@240:0>:bool)
      
      P[<sum_1030@211:0>](<sum_1030@211:0>:int),
      P[<<sum_1030@214:1>@217:0>]((-1 + <sum_1030@211:0>):int,(<<sum_1030@211:1>@223:0> + (-1 * <sum_1030@211:0>)):int),
      (<sum_1030@211:0> > 0) |- P[<<sum_1030@211:1>@223:0>](<sum_1030@211:0>:int,
                                                            <<sum_1030@211:1>@223:0>:int)
      
      P[<sum_1030@214:0>](<sum_1030@214:0>:int), ((<<sum_1030@214:1>@217:0> = 0) && (<sum_1030@214:0> <= 0))
      |- P[<<sum_1030@214:1>@217:0>](<sum_1030@214:0>:int,<<sum_1030@214:1>@217:0>:int)
      
      P[<sum_1030@211:0>]((1 + <sum_1030@214:0>):int), ((1 + <sum_1030@214:0>) > 0)
      |- P[<sum_1030@214:0>](<sum_1030@214:0>:int)
      
      P[<<sum_1030@180:1>@201:0>]((1 + <sum_1030@211:0>):int,var116:int)|- P[<sum_1030@211:0>](<sum_1030@211:0>:int)
      
      P[<sum_1030@180:0>](<sum_1030@180:0>:int),
      P[<<sum_1030@183:1>@195:0>]((-1 + <sum_1030@180:0>):int,(<<sum_1030@180:1>@201:0> + (-1 * <sum_1030@180:0>)):int),
      (<sum_1030@180:0> > 0) |- P[<<sum_1030@180:1>@201:0>](<sum_1030@180:0>:int,
                                                            <<sum_1030@180:1>@201:0>:int)
      
      P[<sum_1030@183:0>](<sum_1030@183:0>:int),
      P[<<sum_1030@186:1>@189:0>]((-1 + <sum_1030@183:0>):int,(<<sum_1030@183:1>@195:0> + (-1 * <sum_1030@183:0>)):int),
      (<sum_1030@183:0> > 0) |- P[<<sum_1030@183:1>@195:0>](<sum_1030@183:0>:int,
                                                            <<sum_1030@183:1>@195:0>:int)
      
      P[<sum_1030@186:0>](<sum_1030@186:0>:int), ((<<sum_1030@186:1>@189:0> = 0) && (<sum_1030@186:0> <= 0))
      |- P[<<sum_1030@186:1>@189:0>](<sum_1030@186:0>:int,<<sum_1030@186:1>@189:0>:int)
      
      P[<sum_1030@183:0>]((1 + <sum_1030@186:0>):int), ((1 + <sum_1030@186:0>) > 0)
      |- P[<sum_1030@186:0>](<sum_1030@186:0>:int)
      
      P[<sum_1030@180:0>]((1 + <sum_1030@183:0>):int), ((1 + <sum_1030@183:0>) > 0)
      |- P[<sum_1030@183:0>](<sum_1030@183:0>:int)
      
      |- P[<sum_1030@180:0>](<sum_1030@180:0>:int)
    begin ParamSubstInfer.infer(18419)[3]
      
    end ParamSubstInfer.infer(18419)[3] (0.575913 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(18421)[3]
      
    end RefTypeInfer.elim_coeffs(18421)[3] (0.003000 sec.)
    begin YhornInterface.solve(18794)[3]
      begin HcSolver.solve_ub(18795)[4]
        encoded:
          P[<fail_1248@240:0>](<fail_1248@240:0>:int)|- bot
          
          P[<<sum_1030@180:1>@201:0>](<f_main_1245@237:0>:int,var115:int),
          P[<<sum_1030@211:1>@223:0>]((-1 + <f_main_1245@237:0>):int,(
                                      (-1 * <f_main_1245@237:2>) + var115):int),
          ((<f_main_1245@237:2> < 0) && (<fail_1248@240:0> = 1)) |- P[<fail_1248@240:0>](
          <fail_1248@240:0>:int)
          
          P[<sum_1030@211:0>](<sum_1030@211:0>:int),
          P[<<sum_1030@214:1>@217:0>]((-1 + <sum_1030@211:0>):int,(<<sum_1030@211:1>@223:0> + (-1 * <sum_1030@211:0>)):int),
          (<sum_1030@211:0> > 0) |- P[<<sum_1030@211:1>@223:0>](<sum_1030@211:0>:int,
                                                                <<sum_1030@211:1>@223:0>:int)
          
          P[<sum_1030@214:0>](<sum_1030@214:0>:int), ((<<sum_1030@214:1>@217:0> = 0) && (<sum_1030@214:0> <= 0))
          |- P[<<sum_1030@214:1>@217:0>](<sum_1030@214:0>:int,<<sum_1030@214:1>@217:0>:int)
          
          P[<sum_1030@211:0>]((1 + <sum_1030@214:0>):int), ((1 + <sum_1030@214:0>) > 0)
          |- P[<sum_1030@214:0>](<sum_1030@214:0>:int)
          
          P[<<sum_1030@180:1>@201:0>]((1 + <sum_1030@211:0>):int,var116:int)|- P[<sum_1030@211:0>](
          <sum_1030@211:0>:int)
          
          P[<sum_1030@180:0>](<sum_1030@180:0>:int),
          P[<<sum_1030@183:1>@195:0>]((-1 + <sum_1030@180:0>):int,(<<sum_1030@180:1>@201:0> + (-1 * <sum_1030@180:0>)):int),
          (<sum_1030@180:0> > 0) |- P[<<sum_1030@180:1>@201:0>](<sum_1030@180:0>:int,
                                                                <<sum_1030@180:1>@201:0>:int)
          
          P[<sum_1030@183:0>](<sum_1030@183:0>:int),
          P[<<sum_1030@186:1>@189:0>]((-1 + <sum_1030@183:0>):int,(<<sum_1030@183:1>@195:0> + (-1 * <sum_1030@183:0>)):int),
          (<sum_1030@183:0> > 0) |- P[<<sum_1030@183:1>@195:0>](<sum_1030@183:0>:int,
                                                                <<sum_1030@183:1>@195:0>:int)
          
          P[<sum_1030@186:0>](<sum_1030@186:0>:int), ((<<sum_1030@186:1>@189:0> = 0) && (<sum_1030@186:0> <= 0))
          |- P[<<sum_1030@186:1>@189:0>](<sum_1030@186:0>:int,<<sum_1030@186:1>@189:0>:int)
          
          P[<sum_1030@183:0>]((1 + <sum_1030@186:0>):int), ((1 + <sum_1030@186:0>) > 0)
          |- P[<sum_1030@186:0>](<sum_1030@186:0>:int)
          
          P[<sum_1030@180:0>]((1 + <sum_1030@183:0>):int), ((1 + <sum_1030@183:0>) > 0)
          |- P[<sum_1030@183:0>](<sum_1030@183:0>:int)
          
          |- P[<sum_1030@180:0>](<sum_1030@180:0>:int)
        input to Yhorn:
          P[<fail_1248@240:0>](<fail_1248@240:0>:int)|- bot
          
          P[<<sum_1030@180:1>@201:0>](<f_main_1245@237:0>:int,var115:int),
          P[<<sum_1030@211:1>@223:0>](var117:int,var118:int),
          ((var115 < var118) && (((1 + var117) = <f_main_1245@237:0>) && (<fail_1248@240:0> = 1)))
          |- P[<fail_1248@240:0>](<fail_1248@240:0>:int)
          
          P[<sum_1030@211:0>](<sum_1030@211:0>:int),
          P[<<sum_1030@214:1>@217:0>](var119:int,var120:int),
          (((var120 + <sum_1030@211:0>) = <<sum_1030@211:1>@223:0>) &&
           (((1 + var119) = <sum_1030@211:0>) && (<sum_1030@211:0> > 0)))
          |- P[<<sum_1030@211:1>@223:0>](<sum_1030@211:0>:int,<<sum_1030@211:1>@223:0>:int)
          
          P[<sum_1030@214:0>](<sum_1030@214:0>:int), ((<sum_1030@214:0> <= 0) && (<<sum_1030@214:1>@217:0> = 0))
          |- P[<<sum_1030@214:1>@217:0>](<sum_1030@214:0>:int,<<sum_1030@214:1>@217:0>:int)
          
          P[<sum_1030@211:0>](var121:int), ((var121 = (1 + <sum_1030@214:0>)) && ((1 + <sum_1030@214:0>) > 0))
          |- P[<sum_1030@214:0>](<sum_1030@214:0>:int)
          
          P[<<sum_1030@180:1>@201:0>](var122:int,var116:int), (var122 = (1 + <sum_1030@211:0>))
          |- P[<sum_1030@211:0>](<sum_1030@211:0>:int)
          
          P[<sum_1030@180:0>](<sum_1030@180:0>:int),
          P[<<sum_1030@183:1>@195:0>](var123:int,var124:int),
          (((var124 + <sum_1030@180:0>) = <<sum_1030@180:1>@201:0>) &&
           (((1 + var123) = <sum_1030@180:0>) && (<sum_1030@180:0> > 0)))
          |- P[<<sum_1030@180:1>@201:0>](<sum_1030@180:0>:int,<<sum_1030@180:1>@201:0>:int)
          
          P[<sum_1030@183:0>](<sum_1030@183:0>:int),
          P[<<sum_1030@186:1>@189:0>](var125:int,var126:int),
          (((var126 + <sum_1030@183:0>) = <<sum_1030@183:1>@195:0>) &&
           (((1 + var125) = <sum_1030@183:0>) && (<sum_1030@183:0> > 0)))
          |- P[<<sum_1030@183:1>@195:0>](<sum_1030@183:0>:int,<<sum_1030@183:1>@195:0>:int)
          
          P[<sum_1030@186:0>](<sum_1030@186:0>:int), ((<sum_1030@186:0> <= 0) && (<<sum_1030@186:1>@189:0> = 0))
          |- P[<<sum_1030@186:1>@189:0>](<sum_1030@186:0>:int,<<sum_1030@186:1>@189:0>:int)
          
          P[<sum_1030@183:0>](var127:int), ((var127 = (1 + <sum_1030@186:0>)) && ((1 + <sum_1030@186:0>) > 0))
          |- P[<sum_1030@186:0>](<sum_1030@186:0>:int)
          
          P[<sum_1030@180:0>](var128:int), ((var128 = (1 + <sum_1030@183:0>)) && ((1 + <sum_1030@183:0>) > 0))
          |- P[<sum_1030@183:0>](<sum_1030@183:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1248_sep_240_sep_0($580)) -> 1=0.
(($580-1=0) & ($581-$582+1=0) & ($583-$584<0)) & (v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0($581,$584)) & (v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0($582,$583)) -> v_sep_fail_1248_sep_240_sep_0($580).
(($585>0) & (-$585+$586+1=0) & ($585+$587-$588=0)) & (v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0($586,$587)) & (v_sep_sum_1030_sep_211_sep_0($585)) -> v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0($585,$588).
(($589=0) & ($590<=0)) & (v_sep_sum_1030_sep_214_sep_0($590)) -> v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0($590,$589).
(($590+1>0) & (-$590+$591-1=0)) & (v_sep_sum_1030_sep_211_sep_0($591)) -> v_sep_sum_1030_sep_214_sep_0($590).
(-$585+$592-1=0) & (v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0($592,$593)) -> v_sep_sum_1030_sep_211_sep_0($585).
(($594>0) & (-$594+$595+1=0) & ($594+$596-$597=0)) & (v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0($595,$596)) & (v_sep_sum_1030_sep_180_sep_0($594)) -> v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0($594,$597).
(($598>0) & (-$598+$599+1=0) & ($598+$600-$601=0)) & (v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0($599,$600)) & (v_sep_sum_1030_sep_183_sep_0($598)) -> v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0($598,$601).
(($602=0) & ($603<=0)) & (v_sep_sum_1030_sep_186_sep_0($603)) -> v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0($603,$602).
(($603+1>0) & (-$603+$604-1=0)) & (v_sep_sum_1030_sep_183_sep_0($604)) -> v_sep_sum_1030_sep_186_sep_0($603).
(($598+1>0) & (-$598+$605-1=0)) & (v_sep_sum_1030_sep_180_sep_0($605)) -> v_sep_sum_1030_sep_183_sep_0($598).
0=0 -> v_sep_sum_1030_sep_180_sep_0($594).


v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: X
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: X
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
................
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: X
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: X
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
....
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: X
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: X
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
........
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: X
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: X
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
............Split conj [36] 0.459929
(Reconstrcut: 13 **)
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: X
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
.............
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: X
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
....
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: X
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
........
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: X
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
............
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: X
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
.................Split conj [38] 0.498923
(Reconstrcut: 11 **)
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
..........
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
....
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
........
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
............
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
.................Split conj [40] 0.536917
(Reconstrcut: 15 **)
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
..............
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
....
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
........
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
............
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: X
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
.................Split conj [42] 0.561913
(Reconstrcut: 21 ***)
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
......................
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
....
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
........
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
............
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
.................
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: X
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
.....................Split conj [46] 0.591909
(Reconstrcut: 33 ****)
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
.........................
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
....
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
........
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
............
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
.................
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: X
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
.....................Split conj [52] 0.633903
(Reconstrcut: 27 ***)
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
.........................
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
....
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
........
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
............
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
.................
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
.....................
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
........................
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
..........................
v_sep_fail_1248_sep_240_sep_0: X
v_sep_sum_1030_sep_180_sep_0: (X) & (X) & (X) & (X)
v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_183_sep_0: X
v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_186_sep_0: X
v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0: (X) & (X) & (X)
v_sep_sum_1030_sep_211_sep_0: (X) & (X)
v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0: X
v_sep_sum_1030_sep_214_sep_0: X
v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0: X
...........................(0=0) & (v_sep_fail_1248_sep_240_sep_0($580)) -> 1=0.
(($580-1=0) & ($581-$582+1=0) & ($583-$584<0)) & (v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0($581,$584)) & (v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0($582,$583)) -> v_sep_fail_1248_sep_240_sep_0($580).
(($585>0) & (-$585+$586+1=0) & ($585+$587-$588=0)) & (v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0($586,$587)) & (v_sep_sum_1030_sep_211_sep_0($585)) -> v_sep_sum_1030_sep_211_sep_1_sep_223_sep_0($585,$588).
(($589=0) & ($590<=0)) & (v_sep_sum_1030_sep_214_sep_0($590)) -> v_sep_sum_1030_sep_214_sep_1_sep_217_sep_0($590,$589).
(($590+1>0) & (-$590+$591-1=0)) & (v_sep_sum_1030_sep_211_sep_0($591)) -> v_sep_sum_1030_sep_214_sep_0($590).
(-$585+$592-1=0) & (v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0($592,$593)) -> v_sep_sum_1030_sep_211_sep_0($585).
(($594>0) & (-$594+$595+1=0) & ($594+$596-$597=0)) & (v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0($595,$596)) & (v_sep_sum_1030_sep_180_sep_0($594)) -> v_sep_sum_1030_sep_180_sep_1_sep_201_sep_0($594,$597).
(($598>0) & (-$598+$599+1=0) & ($598+$600-$601=0)) & (v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0($599,$600)) & (v_sep_sum_1030_sep_183_sep_0($598)) -> v_sep_sum_1030_sep_183_sep_1_sep_195_sep_0($598,$601).
(($602=0) & ($603<=0)) & (v_sep_sum_1030_sep_186_sep_0($603)) -> v_sep_sum_1030_sep_186_sep_1_sep_189_sep_0($603,$602).
(($603+1>0) & (-$603+$604-1=0)) & (v_sep_sum_1030_sep_183_sep_0($604)) -> v_sep_sum_1030_sep_186_sep_0($603).
(($598+1>0) & (-$598+$605-1=0)) & (v_sep_sum_1030_sep_180_sep_0($605)) -> v_sep_sum_1030_sep_183_sep_0($598).
0=0 -> v_sep_sum_1030_sep_180_sep_0($594).

          |- P[<sum_1030@180:0>](<sum_1030@180:0>:int)
        solution:
          P[<fail_1248@240:0>]($606:bool) = false
          P[<sum_1030@180:0>]($635:int) = true
          P[<<sum_1030@180:1>@201:0>]($614:int,$616:int) = (1 <= $616)
          P[<sum_1030@183:0>]($643:int) = true
          P[<<sum_1030@183:1>@195:0>]($630:int,$632:int) = ($630 <= $632)
          P[<sum_1030@186:0>]($646:int) = true
          P[<<sum_1030@186:1>@189:0>]($638:int,$640:int) = (0 <= $640)
          P[<sum_1030@211:0>]($624:int) = true
          P[<<sum_1030@211:1>@223:0>]($609:int,$611:int) = ($611 <= 1)
          P[<sum_1030@214:0>]($627:int) = true
          P[<<sum_1030@214:1>@217:0>]($619:int,$621:int) = (($621 + $619) <= 0)
        
      end HcSolver.solve_ub(18795)[4] (0.297954 sec.)
      begin HcSolver.check_validity(19603)[4]
        input:
          P[<fail_1248@240:0>](<fail_1248@240:0>:bool)|- bot
          
          P[<<sum_1030@180:1>@201:0>](<f_main_1245@237:0>:int,var115:int),
          P[<<sum_1030@211:1>@223:0>]((-1 + <f_main_1245@237:0>):int,(
                                      (-1 * <f_main_1245@237:2>) + var115):int),
          ((<f_main_1245@237:2> < 0) && <fail_1248@240:0>) |- P[<fail_1248@240:0>](
          <fail_1248@240:0>:bool)
          
          P[<sum_1030@211:0>](<sum_1030@211:0>:int),
          P[<<sum_1030@214:1>@217:0>]((-1 + <sum_1030@211:0>):int,(<<sum_1030@211:1>@223:0> + (-1 * <sum_1030@211:0>)):int),
          (<sum_1030@211:0> > 0) |- P[<<sum_1030@211:1>@223:0>](<sum_1030@211:0>:int,
                                                                <<sum_1030@211:1>@223:0>:int)
          
          P[<sum_1030@214:0>](<sum_1030@214:0>:int), ((<<sum_1030@214:1>@217:0> = 0) && (<sum_1030@214:0> <= 0))
          |- P[<<sum_1030@214:1>@217:0>](<sum_1030@214:0>:int,<<sum_1030@214:1>@217:0>:int)
          
          P[<sum_1030@211:0>]((1 + <sum_1030@214:0>):int), ((1 + <sum_1030@214:0>) > 0)
          |- P[<sum_1030@214:0>](<sum_1030@214:0>:int)
          
          P[<<sum_1030@180:1>@201:0>]((1 + <sum_1030@211:0>):int,var116:int)|- P[<sum_1030@211:0>](
          <sum_1030@211:0>:int)
          
          P[<sum_1030@180:0>](<sum_1030@180:0>:int),
          P[<<sum_1030@183:1>@195:0>]((-1 + <sum_1030@180:0>):int,(<<sum_1030@180:1>@201:0> + (-1 * <sum_1030@180:0>)):int),
          (<sum_1030@180:0> > 0) |- P[<<sum_1030@180:1>@201:0>](<sum_1030@180:0>:int,
                                                                <<sum_1030@180:1>@201:0>:int)
          
          P[<sum_1030@183:0>](<sum_1030@183:0>:int),
          P[<<sum_1030@186:1>@189:0>]((-1 + <sum_1030@183:0>):int,(<<sum_1030@183:1>@195:0> + (-1 * <sum_1030@183:0>)):int),
          (<sum_1030@183:0> > 0) |- P[<<sum_1030@183:1>@195:0>](<sum_1030@183:0>:int,
                                                                <<sum_1030@183:1>@195:0>:int)
          
          P[<sum_1030@186:0>](<sum_1030@186:0>:int), ((<<sum_1030@186:1>@189:0> = 0) && (<sum_1030@186:0> <= 0))
          |- P[<<sum_1030@186:1>@189:0>](<sum_1030@186:0>:int,<<sum_1030@186:1>@189:0>:int)
          
          P[<sum_1030@183:0>]((1 + <sum_1030@186:0>):int), ((1 + <sum_1030@186:0>) > 0)
          |- P[<sum_1030@186:0>](<sum_1030@186:0>:int)
          
          P[<sum_1030@180:0>]((1 + <sum_1030@183:0>):int), ((1 + <sum_1030@183:0>) > 0)
          |- P[<sum_1030@183:0>](<sum_1030@183:0>:int)
          
          |- P[<sum_1030@180:0>](<sum_1030@180:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(19603)[4] (0.007999 sec.)
      solution:
        P[<fail_1248@240:0>]($606:bool) = false
        P[<sum_1030@180:0>]($635:int) = true
        P[<<sum_1030@180:1>@201:0>]($614:int,$616:int) = (1 <= $616)
        P[<sum_1030@183:0>]($643:int) = true
        P[<<sum_1030@183:1>@195:0>]($630:int,$632:int) = ($630 <= $632)
        P[<sum_1030@186:0>]($646:int) = true
        P[<<sum_1030@186:1>@189:0>]($638:int,$640:int) = (0 <= $640)
        P[<sum_1030@211:0>]($624:int) = true
        P[<<sum_1030@211:1>@223:0>]($609:int,$611:int) = ($611 <= 1)
        P[<sum_1030@214:0>]($627:int) = true
        P[<<sum_1030@214:1>@217:0>]($619:int,$621:int) = (($621 + $619) <= 0)
    end YhornInterface.solve(18794)[3] (0.305953 sec.)
    
  end RefTypeInfer.infer_etrs(15053)[2] (0.910862 sec.)
  refinement types:
    main_1241: X
    f_1246: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    delta_1032: (v1:int -> (v2:int -> X) -> X /\
                 v5:int -> (v6:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (1 <= v2)} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (v1 <= v2)} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (0 <= v2)} -> X) -> X
    f_sum_1242: v1:int -> (v2:int -> X) -> v4:int -> X
    f_sum_1242: v1:int -> (v2:int -> X) -> v4:int -> X
    f_delta_1243: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    sum_1030: v1:int -> (v2:{v2:int | (v2 <= 1)} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | ((v2 + v1) <= 0)} -> X) -> X
    f_sum_1242: v1:int -> (v2:int -> X) -> v4:int -> X
    f_delta_1244: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1245: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1248: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1247: var137:int -> var136:unit -> X
  abstraction types:
    main_1241: X
    f_1246: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    delta_1032: (var138:int -> (var139:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    sum_1030: var154:int ->
              (var155:int[var155 -> (1 <= var155),
                          var155 -> (var154 <= var155),
                          var155 -> (0 <= var155),
                          var155 -> (var155 <= 1),
                          var155 -> ((var155 + var154) <= 0)] -> X) -> X
    f_sum_1242: var163:int -> (var164:int -> X) -> var166:int -> X
    f_delta_1243: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    f_delta_1244: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1245: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1248: v1:bool -> (v2:unit -> X) -> X
    f_1247: var137:int -> var136:unit -> X
  
end AbsTypeInfer.refine(15052)[1] (0.924860 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1241
  main_1241 -> (rand_int f_1246)
  delta_1032 f_1033 n_1034 k_delta_1140 -> (f_1033 n_1034 (f_delta_1243 n_1034 f_1033 k_delta_1140))
  f_1246 x_1216 -> (main_1035 x_1216 (f_1247 x_1216))
  f_1247 x_1216 x_1213 -> end
  f_delta_1243 n_1034 f_1033 k_delta_1140 x_1143 -> (f_1033 (n_1034 - 1) (f_delta_1244 n_1034 x_1143 k_delta_1140))
  f_delta_1244 n_1034 x_1143 k_delta_1140 x_1144 -> (k_delta_1140 (x_1143 - x_1144))
  f_main_1245 n_1036 k_main_1178 x_1181 when (x_1181 >= 0) -> (k_main_1178 ())
  f_main_1245 n_1036 k_main_1178 x_1181 when (not (x_1181 >= 0)) -> (fail_1248 true k_main_1178)
  f_sum_1242 n_1031 k_sum_1093 x_1097 -> (k_sum_1093 (n_1031 + x_1097))
  fail_1248 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1178 -> (delta_1032 sum_1030 n_1036 (f_main_1245 n_1036 k_main_1178))
  sum_1030 n_1031 k_sum_1093 when (n_1031 <= 0) -> (k_sum_1093 0)
  sum_1030 n_1031 k_sum_1093 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1242 n_1031 k_sum_1093))
Types:
  main_1241 : X
  fail_1248 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (x_1:int[x_1 <= 0; x_1 <= -1] ->
              (x_3:int[x_1 <= -x_3; x_3 <= 1; x_1 <= x_3; x_3 >= 1; x_1 >= 3; 
                       x_1 <= 1; x_1 >= 5; x_1 <= 0; x_3 <= 0; x_3 >= 0] -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Error trace::
  main_1241 ... --> 
  f_1246 ... --> 
  main_1035 ... --> 
  delta_1032 ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sum_1242 ... --> 
  f_sum_1242 ... --> 
  f_delta_1243 ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sum_1242 ... --> 
  f_sum_1242 ... --> 
  f_delta_1244 ... --> 
  f_main_1245 [2/2] ... --> 
  fail_1248 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 0

(4-3) Checking counter-example ... DONE!

(4-4) Discovering predicates ... 
begin AbsTypeInfer.refine(58823)[1]
  program:
    main_1241  | true = ((Random.int 0) f_1246)
    delta_1032 f_1033 n_1034 k_delta_1140 | true = (f_1033 n_1034
                                                           (f_delta_1243 n_1034
                                                                    f_1033
                                                                    k_delta_1140))
    f_1246 x_1216 | true = (main_1035 x_1216
                                      (f_1247 x_1216))
    f_1247 x_1216 x_1213 | true = end
    f_delta_1243 n_1034 f_1033 k_delta_1140 x_1143 | true = (f_1033
                                                               (n_1034 - 1)
                                                               (f_delta_1244 n_1034
                                                                    x_1143
                                                                    k_delta_1140))
    f_delta_1244 n_1034 x_1143 k_delta_1140 x_1144 | true = (k_delta_1140 (
                                                                    x_1143 - x_1144))
    f_main_1245 n_1036 k_main_1178 x_1181 | (x_1181 >= 0) = (k_main_1178 ())
    f_main_1245 n_1036 k_main_1178 x_1181 | (not (x_1181 >= 0)) = (fail_1248 true
                                                                    k_main_1178)
    f_sum_1242 n_1031 k_sum_1093 x_1097 | true = (k_sum_1093 (n_1031 + x_1097))
    fail_1248 b k | true = (fail ())
    main_1035 n_1036 k_main_1178 | true = (delta_1032 sum_1030
                                                      n_1036
                                                      (f_main_1245 n_1036
                                                                   k_main_1178))
    sum_1030 n_1031 k_sum_1093 | (n_1031 <= 0) = (k_sum_1093 0)
    sum_1030 n_1031 k_sum_1093 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1242 n_1031
                                                                    k_sum_1093))
    main_1241:X
    delta_1032:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_1246:int -> X
    f_1247:int -> unit -> X
    f_delta_1243:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_delta_1244:int -> int -> (int -> X) -> int -> X
    f_main_1245:int -> (unit -> X) -> int -> X
    f_sum_1242:int -> (int -> X) -> int -> X
    fail_1248:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: delta_1032,f_1246,f_1247,f_delta_1243,f_delta_1244,f_main_1245,f_sum_1242,main_1035
  counterexample: 0:0:0:0:1:1:0:0:0:0:1:1:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1246@246:0> = var168)
     [true.(<main_1035@248:0> = <f_1246@246:0>)
      [true.(<delta_1032@250:1> = <main_1035@248:0>)
       [true.(<<delta_1032@250:0>@252:0> = <delta_1032@250:1>)
        [true.(<sum_1030@254:0> = <<delta_1032@250:0>@252:0>)
         [(not (<sum_1030@254:0> <= 0)).(<sum_1030@257:0> = (<sum_1030@254:0> - 1))
          [(not (<sum_1030@257:0> <= 0)).(<sum_1030@260:0> = (<sum_1030@257:0> - 1))
           [(<sum_1030@260:0> <= 0).(<<sum_1030@260:1>@263:0> = 0)
            [true.((<f_sum_1242@265:0> = <sum_1030@257:0>) && (<f_sum_1242@265:2> = <<sum_1030@260:1>@263:0>))
             [true.(<<f_sum_1242@265:1>@267:0> = (<f_sum_1242@265:0> + <f_sum_1242@265:2>))
              [true.(<<sum_1030@257:1>@269:0> = <<f_sum_1242@265:1>@267:0>)
               [true.((<f_sum_1242@271:0> = <sum_1030@254:0>) && (<f_sum_1242@271:2> = <<sum_1030@257:1>@269:0>))
                [true.(<<f_sum_1242@271:1>@273:0> = (<f_sum_1242@271:0> + <f_sum_1242@271:2>))
                 [true.(<<sum_1030@254:1>@275:0> = <<f_sum_1242@271:1>@273:0>)
                  [true.(<<<delta_1032@250:0>@252:1>@277:0> = <<sum_1030@254:1>@275:0>)
                   [true.
                    ((<f_delta_1243@279:0> = <delta_1032@250:1>) &&
                     (<f_delta_1243@279:3> = <<<delta_1032@250:0>@252:1>@277:0>))
                    [true.(<<f_delta_1243@279:1>@281:0> = (<f_delta_1243@279:0> - 1))
                     [true.(<<delta_1032@250:0>@283:0> = <<f_delta_1243@279:1>@281:0>)
                      [true.(<sum_1030@285:0> = <<delta_1032@250:0>@283:0>)
                       [(not (<sum_1030@285:0> <= 0)).(<sum_1030@288:0> = (<sum_1030@285:0> - 1))
                        [(not (<sum_1030@288:0> <= 0)).(<sum_1030@291:0> = (<sum_1030@288:0> - 1))
                         [(<sum_1030@291:0> <= 0).(<<sum_1030@291:1>@294:0> = 0)
                          [true.
                           ((<f_sum_1242@296:0> = <sum_1030@288:0>) && (<f_sum_1242@296:2> = <<sum_1030@291:1>@294:0>))
                           [true.(<<f_sum_1242@296:1>@298:0> = (<f_sum_1242@296:0> + <f_sum_1242@296:2>))
                            [true.(<<sum_1030@288:1>@300:0> = <<f_sum_1242@296:1>@298:0>)
                             [true.
                              ((<f_sum_1242@302:0> = <sum_1030@285:0>) &&
                               (<f_sum_1242@302:2> = <<sum_1030@288:1>@300:0>))
                              [true.(<<f_sum_1242@302:1>@304:0> = (<f_sum_1242@302:0> + <f_sum_1242@302:2>))
                               [true.(<<sum_1030@285:1>@306:0> = <<f_sum_1242@302:1>@304:0>)
                                [true.(<<<delta_1032@250:0>@283:1>@308:0> = <<sum_1030@285:1>@306:0>)
                                 [true.(<<<f_delta_1243@279:1>@281:1>@310:0> = <<<delta_1032@250:0>@283:1>@308:0>)
                                  [true.
                                   ((<f_delta_1244@312:0> = <f_delta_1243@279:0>) &&
                                    ((<f_delta_1244@312:1> = <f_delta_1243@279:3>) &&
                                     (<f_delta_1244@312:3> = <<<f_delta_1243@279:1>@281:1>@310:0>)))
                                   [true.(<<f_delta_1244@312:2>@314:0> = (<f_delta_1244@312:1> - <f_delta_1244@312:3>))
                                    [true.(<<f_delta_1243@279:2>@316:0> = <<f_delta_1244@312:2>@314:0>)
                                     [true.(<<delta_1032@250:2>@318:0> = <<f_delta_1243@279:2>@316:0>)
                                      [true.
                                       ((<f_main_1245@320:0> = <main_1035@248:0>) &&
                                        (<f_main_1245@320:2> = <<delta_1032@250:2>@318:0>))
                                       [(not (<f_main_1245@320:2> >= 0)).(<fail_1248@323:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(58824)[2]
    horn clauses:
      P[<fail_1248@323:0>](<fail_1248@323:0>:bool)|- bot
      
      P[<f_main_1245@320:2>](<f_main_1245@320:0>:int,<f_main_1245@320:2>:int),
      ((<f_main_1245@320:2> < 0) && <fail_1248@323:0>) |- P[<fail_1248@323:0>](
      <fail_1248@323:0>:bool)
      
      P[<main_1035@248:0>](<f_main_1245@320:0>:int),
      P[<<delta_1032@250:2>@318:0>](<f_main_1245@320:0>:int,<f_main_1245@320:2>:int)|- P[<f_main_1245@320:2>](
      <f_main_1245@320:0>:int,<f_main_1245@320:2>:int)
      
      P[<delta_1032@250:1>](<delta_1032@250:1>:int),
      P[<<f_delta_1243@279:2>@316:0>](<delta_1032@250:1>:int,<<delta_1032@250:2>@318:0>:int)|- P[<<delta_1032@250:2>@318:0>](
      <delta_1032@250:1>:int,<<delta_1032@250:2>@318:0>:int)
      
      P[<f_delta_1243@279:3>](<f_delta_1243@279:0>:int,<f_delta_1244@312:1>:int),
      P[<<f_delta_1244@312:2>@314:0>](<f_delta_1243@279:0>:int,<f_delta_1244@312:1>:int,<<f_delta_1243@279:2>@316:0>:int)|- P[<<f_delta_1243@279:2>@316:0>](
      <f_delta_1243@279:0>:int,<<f_delta_1243@279:2>@316:0>:int)
      
      P[<f_delta_1244@312:3>](<f_delta_1244@312:0>:int,<f_delta_1244@312:1>:int,(
                              (-1 * <<f_delta_1244@312:2>@314:0>) + <f_delta_1244@312:1>):int)|- P[<<f_delta_1244@312:2>@314:0>](
      <f_delta_1244@312:0>:int,<f_delta_1244@312:1>:int,<<f_delta_1244@312:2>@314:0>:int)
      
      P[<f_delta_1243@279:3>](<f_delta_1244@312:0>:int,<f_delta_1244@312:1>:int),
      P[<<<f_delta_1243@279:1>@281:1>@310:0>](<f_delta_1244@312:0>:int,(
                                              -1 + <f_delta_1244@312:0>):int,<f_delta_1244@312:3>:int)|- P[<f_delta_1244@312:3>](
      <f_delta_1244@312:0>:int,<f_delta_1244@312:1>:int,<f_delta_1244@312:3>:int)
      
      P[<delta_1032@250:1>](<f_delta_1243@279:0>:int),
      P[<<<delta_1032@250:0>@283:1>@308:0>](<<f_delta_1243@279:1>@281:0>:int,<<<f_delta_1243@279:1>@281:1>@310:0>:int)|- P[<<<f_delta_1243@279:1>@281:1>@310:0>](
      <f_delta_1243@279:0>:int,<<f_delta_1243@279:1>@281:0>:int,<<<f_delta_1243@279:1>@281:1>@310:0>:int)
      
      P[<main_1035@248:0>](<delta_1032@250:1>:int),
      P[<<sum_1030@285:1>@306:0>](<<delta_1032@250:0>@283:0>:int,<<<delta_1032@250:0>@283:1>@308:0>:int)|- P[<<<delta_1032@250:0>@283:1>@308:0>](
      <<delta_1032@250:0>@283:0>:int,<<<delta_1032@250:0>@283:1>@308:0>:int)
      
      P[<sum_1030@285:0>](<sum_1030@285:0>:int),
      P[<<f_sum_1242@302:1>@304:0>](<sum_1030@285:0>:int,<<sum_1030@285:1>@306:0>:int), (
      <sum_1030@285:0> > 0) |- P[<<sum_1030@285:1>@306:0>](<sum_1030@285:0>:int,
                                                           <<sum_1030@285:1>@306:0>:int)
      
      P[<f_sum_1242@302:2>](<f_sum_1242@302:0>:int,(<<f_sum_1242@302:1>@304:0> + (-1 * <f_sum_1242@302:0>)):int)|- P[<<f_sum_1242@302:1>@304:0>](
      <f_sum_1242@302:0>:int,<<f_sum_1242@302:1>@304:0>:int)
      
      P[<sum_1030@285:0>](<f_sum_1242@302:0>:int),
      P[<<sum_1030@288:1>@300:0>]((-1 + <f_sum_1242@302:0>):int,<f_sum_1242@302:2>:int), (
      <f_sum_1242@302:0> > 0) |- P[<f_sum_1242@302:2>](<f_sum_1242@302:0>:int,
                                                       <f_sum_1242@302:2>:int)
      
      P[<sum_1030@288:0>](<sum_1030@288:0>:int),
      P[<<f_sum_1242@296:1>@298:0>](<sum_1030@288:0>:int,<<sum_1030@288:1>@300:0>:int), (
      <sum_1030@288:0> > 0) |- P[<<sum_1030@288:1>@300:0>](<sum_1030@288:0>:int,
                                                           <<sum_1030@288:1>@300:0>:int)
      
      P[<f_sum_1242@296:2>](<f_sum_1242@296:0>:int,(<<f_sum_1242@296:1>@298:0> + (-1 * <f_sum_1242@296:0>)):int)|- P[<<f_sum_1242@296:1>@298:0>](
      <f_sum_1242@296:0>:int,<<f_sum_1242@296:1>@298:0>:int)
      
      P[<sum_1030@288:0>](<f_sum_1242@296:0>:int),
      P[<<sum_1030@291:1>@294:0>]((-1 + <f_sum_1242@296:0>):int,<f_sum_1242@296:2>:int), (
      <f_sum_1242@296:0> > 0) |- P[<f_sum_1242@296:2>](<f_sum_1242@296:0>:int,
                                                       <f_sum_1242@296:2>:int)
      
      P[<sum_1030@291:0>](<sum_1030@291:0>:int), ((<<sum_1030@291:1>@294:0> = 0) && (<sum_1030@291:0> <= 0))
      |- P[<<sum_1030@291:1>@294:0>](<sum_1030@291:0>:int,<<sum_1030@291:1>@294:0>:int)
      
      P[<sum_1030@288:0>]((1 + <sum_1030@291:0>):int), ((1 + <sum_1030@291:0>) > 0)
      |- P[<sum_1030@291:0>](<sum_1030@291:0>:int)
      
      P[<sum_1030@285:0>]((1 + <sum_1030@288:0>):int), ((1 + <sum_1030@288:0>) > 0)
      |- P[<sum_1030@288:0>](<sum_1030@288:0>:int)
      
      P[<main_1035@248:0>](<delta_1032@250:1>:int),
      P[<<delta_1032@250:0>@283:0>](<sum_1030@285:0>:int)|- P[<sum_1030@285:0>](
      <sum_1030@285:0>:int)
      
      P[<delta_1032@250:1>](<<delta_1032@250:0>@252:0>:int),
      P[<<f_delta_1243@279:1>@281:0>](<<delta_1032@250:0>@252:0>:int,<<delta_1032@250:0>@283:0>:int)|- P[<<delta_1032@250:0>@283:0>](
      <<delta_1032@250:0>@283:0>:int)
      
      P[<f_delta_1243@279:3>](<f_delta_1243@279:0>:int,<f_delta_1243@279:3>:int),
      ((1 + <<f_delta_1243@279:1>@281:0>) = <f_delta_1243@279:0>)
      |- P[<<f_delta_1243@279:1>@281:0>](<f_delta_1243@279:0>:int,<<f_delta_1243@279:1>@281:0>:int)
      
      P[<delta_1032@250:1>](<f_delta_1243@279:0>:int),
      P[<<<delta_1032@250:0>@252:1>@277:0>](<f_delta_1243@279:0>:int,<f_delta_1243@279:3>:int)|- P[<f_delta_1243@279:3>](
      <f_delta_1243@279:0>:int,<f_delta_1243@279:3>:int)
      
      P[<main_1035@248:0>](<delta_1032@250:1>:int),
      P[<<sum_1030@254:1>@275:0>](<<delta_1032@250:0>@252:0>:int,<<<delta_1032@250:0>@252:1>@277:0>:int)|- P[<<<delta_1032@250:0>@252:1>@277:0>](
      <<delta_1032@250:0>@252:0>:int,<<<delta_1032@250:0>@252:1>@277:0>:int)
      
      P[<sum_1030@254:0>](<sum_1030@254:0>:int),
      P[<<f_sum_1242@271:1>@273:0>](<sum_1030@254:0>:int,<<sum_1030@254:1>@275:0>:int), (
      <sum_1030@254:0> > 0) |- P[<<sum_1030@254:1>@275:0>](<sum_1030@254:0>:int,
                                                           <<sum_1030@254:1>@275:0>:int)
      
      P[<f_sum_1242@271:2>](<f_sum_1242@271:0>:int,(<<f_sum_1242@271:1>@273:0> + (-1 * <f_sum_1242@271:0>)):int)|- P[<<f_sum_1242@271:1>@273:0>](
      <f_sum_1242@271:0>:int,<<f_sum_1242@271:1>@273:0>:int)
      
      P[<sum_1030@254:0>](<f_sum_1242@271:0>:int),
      P[<<sum_1030@257:1>@269:0>]((-1 + <f_sum_1242@271:0>):int,<f_sum_1242@271:2>:int), (
      <f_sum_1242@271:0> > 0) |- P[<f_sum_1242@271:2>](<f_sum_1242@271:0>:int,
                                                       <f_sum_1242@271:2>:int)
      
      P[<sum_1030@257:0>](<sum_1030@257:0>:int),
      P[<<f_sum_1242@265:1>@267:0>](<sum_1030@257:0>:int,<<sum_1030@257:1>@269:0>:int), (
      <sum_1030@257:0> > 0) |- P[<<sum_1030@257:1>@269:0>](<sum_1030@257:0>:int,
                                                           <<sum_1030@257:1>@269:0>:int)
      
      P[<f_sum_1242@265:2>](<f_sum_1242@265:0>:int,(<<f_sum_1242@265:1>@267:0> + (-1 * <f_sum_1242@265:0>)):int)|- P[<<f_sum_1242@265:1>@267:0>](
      <f_sum_1242@265:0>:int,<<f_sum_1242@265:1>@267:0>:int)
      
      P[<sum_1030@257:0>](<f_sum_1242@265:0>:int),
      P[<<sum_1030@260:1>@263:0>]((-1 + <f_sum_1242@265:0>):int,<f_sum_1242@265:2>:int), (
      <f_sum_1242@265:0> > 0) |- P[<f_sum_1242@265:2>](<f_sum_1242@265:0>:int,
                                                       <f_sum_1242@265:2>:int)
      
      P[<sum_1030@260:0>](<sum_1030@260:0>:int), ((<<sum_1030@260:1>@263:0> = 0) && (<sum_1030@260:0> <= 0))
      |- P[<<sum_1030@260:1>@263:0>](<sum_1030@260:0>:int,<<sum_1030@260:1>@263:0>:int)
      
      P[<sum_1030@257:0>]((1 + <sum_1030@260:0>):int), ((1 + <sum_1030@260:0>) > 0)
      |- P[<sum_1030@260:0>](<sum_1030@260:0>:int)
      
      P[<sum_1030@254:0>]((1 + <sum_1030@257:0>):int), ((1 + <sum_1030@257:0>) > 0)
      |- P[<sum_1030@257:0>](<sum_1030@257:0>:int)
      
      P[<main_1035@248:0>](<delta_1032@250:1>:int),
      P[<<delta_1032@250:0>@252:0>](<sum_1030@254:0>:int)|- P[<sum_1030@254:0>](
      <sum_1030@254:0>:int)
      
      P[<delta_1032@250:1>](<<delta_1032@250:0>@252:0>:int)|- P[<<delta_1032@250:0>@252:0>](
      <<delta_1032@250:0>@252:0>:int)
      
      P[<main_1035@248:0>](<delta_1032@250:1>:int)|- P[<delta_1032@250:1>](<delta_1032@250:1>:int)
      
      P[<f_1246@246:0>](<main_1035@248:0>:int)|- P[<main_1035@248:0>](<main_1035@248:0>:int)
      
      |- P[<f_1246@246:0>](<f_1246@246:0>:int)
    call trees:
      <main_1241@243>
        <f_1246@246>
          <main_1035@248>
            <delta_1032@250>
            </<delta_1032@250:0>@252>
            <sum_1030@254>
              <sum_1030@257>
                <sum_1030@260>
                </<sum_1030@260:1>@263>
                <f_sum_1242@265>
                </<f_sum_1242@265:1>@267>
              </<sum_1030@257:1>@269>
              <f_sum_1242@271>
              </<f_sum_1242@271:1>@273>
            </<sum_1030@254:1>@275>
            <<<delta_1032@250:0>@252:1>@277>
              <f_delta_1243@279>
              </<f_delta_1243@279:1>@281>
            </<delta_1032@250:0>@283>
            <sum_1030@285>
              <sum_1030@288>
                <sum_1030@291>
                </<sum_1030@291:1>@294>
                <f_sum_1242@296>
                </<f_sum_1242@296:1>@298>
              </<sum_1030@288:1>@300>
              <f_sum_1242@302>
              </<f_sum_1242@302:1>@304>
            </<sum_1030@285:1>@306>
            <<<delta_1032@250:0>@283:1>@308>
              <<<f_delta_1243@279:1>@281:1>@310>
                <f_delta_1244@312>
                </<f_delta_1244@312:2>@314>
              </<f_delta_1243@279:2>@316>
            </<delta_1032@250:2>@318>
            <f_main_1245@320>
              <fail_1248@323>
    inlined horn clauses:
      P[<fail_1248@323:0>](<fail_1248@323:0>:bool)|- bot
      
      P[<<sum_1030@254:1>@275:0>](<f_main_1245@320:0>:int,var172:int),
      P[<<sum_1030@285:1>@306:0>]((-1 + <f_main_1245@320:0>):int,((-1 * <f_main_1245@320:2>) + var172):int),
      ((<f_main_1245@320:2> < 0) && <fail_1248@323:0>) |- P[<fail_1248@323:0>](
      <fail_1248@323:0>:bool)
      
      P[<sum_1030@285:0>](<sum_1030@285:0>:int),
      P[<<sum_1030@288:1>@300:0>]((-1 + <sum_1030@285:0>):int,(<<sum_1030@285:1>@306:0> + (-1 * <sum_1030@285:0>)):int),
      (<sum_1030@285:0> > 0) |- P[<<sum_1030@285:1>@306:0>](<sum_1030@285:0>:int,
                                                            <<sum_1030@285:1>@306:0>:int)
      
      P[<sum_1030@288:0>](<sum_1030@288:0>:int),
      P[<<sum_1030@291:1>@294:0>]((-1 + <sum_1030@288:0>):int,(<<sum_1030@288:1>@300:0> + (-1 * <sum_1030@288:0>)):int),
      (<sum_1030@288:0> > 0) |- P[<<sum_1030@288:1>@300:0>](<sum_1030@288:0>:int,
                                                            <<sum_1030@288:1>@300:0>:int)
      
      P[<sum_1030@291:0>](<sum_1030@291:0>:int), ((<<sum_1030@291:1>@294:0> = 0) && (<sum_1030@291:0> <= 0))
      |- P[<<sum_1030@291:1>@294:0>](<sum_1030@291:0>:int,<<sum_1030@291:1>@294:0>:int)
      
      P[<sum_1030@288:0>]((1 + <sum_1030@291:0>):int), ((1 + <sum_1030@291:0>) > 0)
      |- P[<sum_1030@291:0>](<sum_1030@291:0>:int)
      
      P[<sum_1030@285:0>]((1 + <sum_1030@288:0>):int), ((1 + <sum_1030@288:0>) > 0)
      |- P[<sum_1030@288:0>](<sum_1030@288:0>:int)
      
      P[<<sum_1030@254:1>@275:0>]((1 + <sum_1030@285:0>):int,var173:int)|- P[<sum_1030@285:0>](<sum_1030@285:0>:int)
      
      P[<sum_1030@254:0>](<sum_1030@254:0>:int),
      P[<<sum_1030@257:1>@269:0>]((-1 + <sum_1030@254:0>):int,(<<sum_1030@254:1>@275:0> + (-1 * <sum_1030@254:0>)):int),
      (<sum_1030@254:0> > 0) |- P[<<sum_1030@254:1>@275:0>](<sum_1030@254:0>:int,
                                                            <<sum_1030@254:1>@275:0>:int)
      
      P[<sum_1030@257:0>](<sum_1030@257:0>:int),
      P[<<sum_1030@260:1>@263:0>]((-1 + <sum_1030@257:0>):int,(<<sum_1030@257:1>@269:0> + (-1 * <sum_1030@257:0>)):int),
      (<sum_1030@257:0> > 0) |- P[<<sum_1030@257:1>@269:0>](<sum_1030@257:0>:int,
                                                            <<sum_1030@257:1>@269:0>:int)
      
      P[<sum_1030@260:0>](<sum_1030@260:0>:int), ((<<sum_1030@260:1>@263:0> = 0) && (<sum_1030@260:0> <= 0))
      |- P[<<sum_1030@260:1>@263:0>](<sum_1030@260:0>:int,<<sum_1030@260:1>@263:0>:int)
      
      P[<sum_1030@257:0>]((1 + <sum_1030@260:0>):int), ((1 + <sum_1030@260:0>) > 0)
      |- P[<sum_1030@260:0>](<sum_1030@260:0>:int)
      
      P[<sum_1030@254:0>]((1 + <sum_1030@257:0>):int), ((1 + <sum_1030@257:0>) > 0)
      |- P[<sum_1030@257:0>](<sum_1030@257:0>:int)
      
      |- P[<sum_1030@254:0>](<sum_1030@254:0>:int)
    begin ParamSubstInfer.infer(62703)[3]
      
    end ParamSubstInfer.infer(62703)[3] (9.944488 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(62705)[3]
      
    end RefTypeInfer.elim_coeffs(62705)[3] (0.000000 sec.)
    begin YhornInterface.solve(63132)[3]
      begin HcSolver.solve_ub(63133)[4]
        encoded:
          P[<fail_1248@323:0>](<fail_1248@323:0>:int)|- bot
          
          P[<<sum_1030@254:1>@275:0>](<f_main_1245@320:0>:int,var172:int),
          P[<<sum_1030@285:1>@306:0>]((-1 + <f_main_1245@320:0>):int,(
                                      (-1 * <f_main_1245@320:2>) + var172):int),
          ((<f_main_1245@320:2> < 0) && (<fail_1248@323:0> = 1)) |- P[<fail_1248@323:0>](
          <fail_1248@323:0>:int)
          
          P[<sum_1030@285:0>](<sum_1030@285:0>:int),
          P[<<sum_1030@288:1>@300:0>]((-1 + <sum_1030@285:0>):int,(<<sum_1030@285:1>@306:0> + (-1 * <sum_1030@285:0>)):int),
          (<sum_1030@285:0> > 0) |- P[<<sum_1030@285:1>@306:0>](<sum_1030@285:0>:int,
                                                                <<sum_1030@285:1>@306:0>:int)
          
          P[<sum_1030@288:0>](<sum_1030@288:0>:int),
          P[<<sum_1030@291:1>@294:0>]((-1 + <sum_1030@288:0>):int,(<<sum_1030@288:1>@300:0> + (-1 * <sum_1030@288:0>)):int),
          (<sum_1030@288:0> > 0) |- P[<<sum_1030@288:1>@300:0>](<sum_1030@288:0>:int,
                                                                <<sum_1030@288:1>@300:0>:int)
          
          P[<sum_1030@291:0>](<sum_1030@291:0>:int), ((<<sum_1030@291:1>@294:0> = 0) && (<sum_1030@291:0> <= 0))
          |- P[<<sum_1030@291:1>@294:0>](<sum_1030@291:0>:int,<<sum_1030@291:1>@294:0>:int)
          
          P[<sum_1030@288:0>]((1 + <sum_1030@291:0>):int), ((1 + <sum_1030@291:0>) > 0)
          |- P[<sum_1030@291:0>](<sum_1030@291:0>:int)
          
          P[<sum_1030@285:0>]((1 + <sum_1030@288:0>):int), ((1 + <sum_1030@288:0>) > 0)
          |- P[<sum_1030@288:0>](<sum_1030@288:0>:int)
          
          P[<<sum_1030@254:1>@275:0>]((1 + <sum_1030@285:0>):int,var173:int)|- P[<sum_1030@285:0>](
          <sum_1030@285:0>:int)
          
          P[<sum_1030@254:0>](<sum_1030@254:0>:int),
          P[<<sum_1030@257:1>@269:0>]((-1 + <sum_1030@254:0>):int,(<<sum_1030@254:1>@275:0> + (-1 * <sum_1030@254:0>)):int),
          (<sum_1030@254:0> > 0) |- P[<<sum_1030@254:1>@275:0>](<sum_1030@254:0>:int,
                                                                <<sum_1030@254:1>@275:0>:int)
          
          P[<sum_1030@257:0>](<sum_1030@257:0>:int),
          P[<<sum_1030@260:1>@263:0>]((-1 + <sum_1030@257:0>):int,(<<sum_1030@257:1>@269:0> + (-1 * <sum_1030@257:0>)):int),
          (<sum_1030@257:0> > 0) |- P[<<sum_1030@257:1>@269:0>](<sum_1030@257:0>:int,
                                                                <<sum_1030@257:1>@269:0>:int)
          
          P[<sum_1030@260:0>](<sum_1030@260:0>:int), ((<<sum_1030@260:1>@263:0> = 0) && (<sum_1030@260:0> <= 0))
          |- P[<<sum_1030@260:1>@263:0>](<sum_1030@260:0>:int,<<sum_1030@260:1>@263:0>:int)
          
          P[<sum_1030@257:0>]((1 + <sum_1030@260:0>):int), ((1 + <sum_1030@260:0>) > 0)
          |- P[<sum_1030@260:0>](<sum_1030@260:0>:int)
          
          P[<sum_1030@254:0>]((1 + <sum_1030@257:0>):int), ((1 + <sum_1030@257:0>) > 0)
          |- P[<sum_1030@257:0>](<sum_1030@257:0>:int)
          
          |- P[<sum_1030@254:0>](<sum_1030@254:0>:int)
        input to Yhorn:
          P[<fail_1248@323:0>](<fail_1248@323:0>:int)|- bot
          
          P[<<sum_1030@254:1>@275:0>](<f_main_1245@320:0>:int,var172:int),
          P[<<sum_1030@285:1>@306:0>](var174:int,var175:int),
          ((var172 < var175) && (((1 + var174) = <f_main_1245@320:0>) && (<fail_1248@323:0> = 1)))
          |- P[<fail_1248@323:0>](<fail_1248@323:0>:int)
          
          P[<sum_1030@285:0>](<sum_1030@285:0>:int),
          P[<<sum_1030@288:1>@300:0>](var176:int,var177:int),
          (((var177 + <sum_1030@285:0>) = <<sum_1030@285:1>@306:0>) &&
           (((1 + var176) = <sum_1030@285:0>) && (<sum_1030@285:0> > 0)))
          |- P[<<sum_1030@285:1>@306:0>](<sum_1030@285:0>:int,<<sum_1030@285:1>@306:0>:int)
          
          P[<sum_1030@288:0>](<sum_1030@288:0>:int),
          P[<<sum_1030@291:1>@294:0>](var178:int,var179:int),
          (((var179 + <sum_1030@288:0>) = <<sum_1030@288:1>@300:0>) &&
           (((1 + var178) = <sum_1030@288:0>) && (<sum_1030@288:0> > 0)))
          |- P[<<sum_1030@288:1>@300:0>](<sum_1030@288:0>:int,<<sum_1030@288:1>@300:0>:int)
          
          P[<sum_1030@291:0>](<sum_1030@291:0>:int), ((<sum_1030@291:0> <= 0) && (<<sum_1030@291:1>@294:0> = 0))
          |- P[<<sum_1030@291:1>@294:0>](<sum_1030@291:0>:int,<<sum_1030@291:1>@294:0>:int)
          
          P[<sum_1030@288:0>](var180:int), ((var180 = (1 + <sum_1030@291:0>)) && ((1 + <sum_1030@291:0>) > 0))
          |- P[<sum_1030@291:0>](<sum_1030@291:0>:int)
          
          P[<sum_1030@285:0>](var181:int), ((var181 = (1 + <sum_1030@288:0>)) && ((1 + <sum_1030@288:0>) > 0))
          |- P[<sum_1030@288:0>](<sum_1030@288:0>:int)
          
          P[<<sum_1030@254:1>@275:0>](var182:int,var173:int), (var182 = (1 + <sum_1030@285:0>))
          |- P[<sum_1030@285:0>](<sum_1030@285:0>:int)
          
          P[<sum_1030@254:0>](<sum_1030@254:0>:int),
          P[<<sum_1030@257:1>@269:0>](var183:int,var184:int),
          (((var184 + <sum_1030@254:0>) = <<sum_1030@254:1>@275:0>) &&
           (((1 + var183) = <sum_1030@254:0>) && (<sum_1030@254:0> > 0)))
          |- P[<<sum_1030@254:1>@275:0>](<sum_1030@254:0>:int,<<sum_1030@254:1>@275:0>:int)
          
          P[<sum_1030@257:0>](<sum_1030@257:0>:int),
          P[<<sum_1030@260:1>@263:0>](var185:int,var186:int),
          (((var186 + <sum_1030@257:0>) = <<sum_1030@257:1>@269:0>) &&
           (((1 + var185) = <sum_1030@257:0>) && (<sum_1030@257:0> > 0)))
          |- P[<<sum_1030@257:1>@269:0>](<sum_1030@257:0>:int,<<sum_1030@257:1>@269:0>:int)
          
          P[<sum_1030@260:0>](<sum_1030@260:0>:int), ((<sum_1030@260:0> <= 0) && (<<sum_1030@260:1>@263:0> = 0))
          |- P[<<sum_1030@260:1>@263:0>](<sum_1030@260:0>:int,<<sum_1030@260:1>@263:0>:int)
          
          P[<sum_1030@257:0>](var187:int), ((var187 = (1 + <sum_1030@260:0>)) && ((1 + <sum_1030@260:0>) > 0))
          |- P[<sum_1030@260:0>](<sum_1030@260:0>:int)
          
          P[<sum_1030@254:0>](var188:int), ((var188 = (1 + <sum_1030@257:0>)) && ((1 + <sum_1030@257:0>) > 0))
          |- P[<sum_1030@257:0>](<sum_1030@257:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1248_sep_323_sep_0($2544)) -> 1=0.
(($2544-1=0) & ($2545-$2546+1=0) & ($2547-$2548<0)) & (v_sep_sum_1030_sep_285_sep_1_sep_306_sep_0($2545,$2548)) & (v_sep_sum_1030_sep_254_sep_1_sep_275_sep_0($2546,$2547)) -> v_sep_fail_1248_sep_323_sep_0($2544).
(($2549>0) & (-$2549+$2550+1=0) & ($2549+$2551-$2552=0)) & (v_sep_sum_1030_sep_288_sep_1_sep_300_sep_0($2550,$2551)) & (v_sep_sum_1030_sep_285_sep_0($2549)) -> v_sep_sum_1030_sep_285_sep_1_sep_306_sep_0($2549,$2552).
(($2553>0) & (-$2553+$2554+1=0) & ($2553+$2555-$2556=0)) & (v_sep_sum_1030_sep_291_sep_1_sep_294_sep_0($2554,$2555)) & (v_sep_sum_1030_sep_288_sep_0($2553)) -> v_sep_sum_1030_sep_288_sep_1_sep_300_sep_0($2553,$2556).
(($2557=0) & ($2558<=0)) & (v_sep_sum_1030_sep_291_sep_0($2558)) -> v_sep_sum_1030_sep_291_sep_1_sep_294_sep_0($2558,$2557).
(($2558+1>0) & (-$2558+$2559-1=0)) & (v_sep_sum_1030_sep_288_sep_0($2559)) -> v_sep_sum_1030_sep_291_sep_0($2558).
(($2553+1>0) & (-$2553+$2560-1=0)) & (v_sep_sum_1030_sep_285_sep_0($2560)) -> v_sep_sum_1030_sep_288_sep_0($2553).
(-$2549+$2561-1=0) & (v_sep_sum_1030_sep_254_sep_1_sep_275_sep_0($2561,$2562)) -> v_sep_sum_1030_sep_285_sep_0($2549).
(($2563>0) & (-$2563+$2564+1=0) & ($2563+$2565-$2566=0)) & (v_sep_sum_1030_sep_257_sep_1_sep_269_sep_0($2564,$2565)) & (v_sep_sum_1030_sep_254_sep_0($2563)) -> v_sep_sum_1030_sep_254_sep_1_sep_275_sep_0($2563,$2566).
(($2567>0) & (-$2567+$2568+1=0) & ($2567+$2569-$2570=0)) & (v_sep_sum_1030_sep_260_sep_1_sep_263_sep_0($2568,$2569)) & (v_sep_sum_1030_sep_257_sep_0($2567)) -> v_sep_sum_1030_sep_257_sep_1_sep_269_sep_0($2567,$2570).
(($2571=0) & ($2572<=0)) & (v_sep_sum_1030_sep_260_sep_0($2572)) -> v_sep_sum_1030_sep_260_sep_1_sep_263_sep_0($2572,$2571).
(($2572+1>0) & (-$2572+$2573-1=0)) & (v_sep_sum_1030_sep_257_sep_0($2573)) -> v_sep_sum_1030_sep_260_sep_0($2572).
(($2567+1>0) & (-$2567+$2574-1=0)) & (v_sep_sum_1030_sep_254_sep_0($2574)) -> v_sep_sum_1030_sep_257_sep_0($2567).
0=0 -> v_sep_sum_1030_sep_254_sep_0($2563).


v_sep_fail_1248_sep_323_sep_0: X
v_sep_sum_1030_sep_254_sep_0: X
v_sep_sum_1030_sep_254_sep_1_sep_275_sep_0: X
v_sep_sum_1030_sep_257_sep_0: X
v_sep_sum_1030_sep_257_sep_1_sep_269_sep_0: X
v_sep_sum_1030_sep_260_sep_0: X
v_sep_sum_1030_sep_260_sep_1_sep_263_sep_0: X
v_sep_sum_1030_sep_285_sep_0: X
v_sep_sum_1030_sep_285_sep_1_sep_306_sep_0: X
v_sep_sum_1030_sep_288_sep_0: X
v_sep_sum_1030_sep_288_sep_1_sep_300_sep_0: X
v_sep_sum_1030_sep_291_sep_0: X
v_sep_sum_1030_sep_291_sep_1_sep_294_sep_0: X
...................
v_sep_fail_1248_sep_323_sep_0: X
v_sep_sum_1030_sep_254_sep_0: X
v_sep_sum_1030_sep_254_sep_1_sep_275_sep_0: X
v_sep_sum_1030_sep_257_sep_0: X
v_sep_sum_1030_sep_257_sep_1_sep_269_sep_0: X
v_sep_sum_1030_sep_260_sep_0: X
v_sep_sum_1030_sep_260_sep_1_sep_263_sep_0: X
v_sep_sum_1030_sep_285_sep_0: X
v_sep_sum_1030_sep_285_sep_1_sep_306_sep_0: X
v_sep_sum_1030_sep_288_sep_0: X
v_sep_sum_1030_sep_288_sep_1_sep_300_sep_0: X
v_sep_sum_1030_sep_291_sep_0: X
v_sep_sum_1030_sep_291_sep_1_sep_294_sep_0: X
....
v_sep_fail_1248_sep_323_sep_0: X
v_sep_sum_1030_sep_254_sep_0: X
v_sep_sum_1030_sep_254_sep_1_sep_275_sep_0: X
v_sep_sum_1030_sep_257_sep_0: X
v_sep_sum_1030_sep_257_sep_1_sep_269_sep_0: X
v_sep_sum_1030_sep_260_sep_0: X
v_sep_sum_1030_sep_260_sep_1_sep_263_sep_0: X
v_sep_sum_1030_sep_285_sep_0: X
v_sep_sum_1030_sep_285_sep_1_sep_306_sep_0: X
v_sep_sum_1030_sep_288_sep_0: X
v_sep_sum_1030_sep_288_sep_1_sep_300_sep_0: X
v_sep_sum_1030_sep_291_sep_0: X
v_sep_sum_1030_sep_291_sep_1_sep_294_sep_0: X
........
v_sep_fail_1248_sep_323_sep_0: X
v_sep_sum_1030_sep_254_sep_0: X
v_sep_sum_1030_sep_254_sep_1_sep_275_sep_0: X
v_sep_sum_1030_sep_257_sep_0: X
v_sep_sum_1030_sep_257_sep_1_sep_269_sep_0: X
v_sep_sum_1030_sep_260_sep_0: X
v_sep_sum_1030_sep_260_sep_1_sep_263_sep_0: X
v_sep_sum_1030_sep_285_sep_0: X
v_sep_sum_1030_sep_285_sep_1_sep_306_sep_0: X
v_sep_sum_1030_sep_288_sep_0: X
v_sep_sum_1030_sep_288_sep_1_sep_300_sep_0: X
v_sep_sum_1030_sep_291_sep_0: X
v_sep_sum_1030_sep_291_sep_1_sep_294_sep_0: X
.............
v_sep_fail_1248_sep_323_sep_0: X
v_sep_sum_1030_sep_254_sep_0: X
v_sep_sum_1030_sep_254_sep_1_sep_275_sep_0: X
v_sep_sum_1030_sep_257_sep_0: X
v_sep_sum_1030_sep_257_sep_1_sep_269_sep_0: X
v_sep_sum_1030_sep_260_sep_0: X
v_sep_sum_1030_sep_260_sep_1_sep_263_sep_0: X
v_sep_sum_1030_sep_285_sep_0: X
v_sep_sum_1030_sep_285_sep_1_sep_306_sep_0: X
v_sep_sum_1030_sep_288_sep_0: X
v_sep_sum_1030_sep_288_sep_1_sep_300_sep_0: X
v_sep_sum_1030_sep_291_sep_0: X
v_sep_sum_1030_sep_291_sep_1_sep_294_sep_0: X
.................
v_sep_fail_1248_sep_323_sep_0: X
v_sep_sum_1030_sep_254_sep_0: X
v_sep_sum_1030_sep_254_sep_1_sep_275_sep_0: X
v_sep_sum_1030_sep_257_sep_0: X
v_sep_sum_1030_sep_257_sep_1_sep_269_sep_0: X
v_sep_sum_1030_sep_260_sep_0: X
v_sep_sum_1030_sep_260_sep_1_sep_263_sep_0: X
v_sep_sum_1030_sep_285_sep_0: X
v_sep_sum_1030_sep_285_sep_1_sep_306_sep_0: X
v_sep_sum_1030_sep_288_sep_0: X
v_sep_sum_1030_sep_288_sep_1_sep_300_sep_0: X
v_sep_sum_1030_sep_291_sep_0: X
v_sep_sum_1030_sep_291_sep_1_sep_294_sep_0: X
...................(0=0) & (v_sep_fail_1248_sep_323_sep_0($2544)) -> 1=0.
(($2544-1=0) & ($2545-$2546+1=0) & ($2547-$2548<0)) & (v_sep_sum_1030_sep_285_sep_1_sep_306_sep_0($2545,$2548)) & (v_sep_sum_1030_sep_254_sep_1_sep_275_sep_0($2546,$2547)) -> v_sep_fail_1248_sep_323_sep_0($2544).
(($2549>0) & (-$2549+$2550+1=0) & ($2549+$2551-$2552=0)) & (v_sep_sum_1030_sep_288_sep_1_sep_300_sep_0($2550,$2551)) & (v_sep_sum_1030_sep_285_sep_0($2549)) -> v_sep_sum_1030_sep_285_sep_1_sep_306_sep_0($2549,$2552).
(($2553>0) & (-$2553+$2554+1=0) & ($2553+$2555-$2556=0)) & (v_sep_sum_1030_sep_291_sep_1_sep_294_sep_0($2554,$2555)) & (v_sep_sum_1030_sep_288_sep_0($2553)) -> v_sep_sum_1030_sep_288_sep_1_sep_300_sep_0($2553,$2556).
(($2557=0) & ($2558<=0)) & (v_sep_sum_1030_sep_291_sep_0($2558)) -> v_sep_sum_1030_sep_291_sep_1_sep_294_sep_0($2558,$2557).
(($2558+1>0) & (-$2558+$2559-1=0)) & (v_sep_sum_1030_sep_288_sep_0($2559)) -> v_sep_sum_1030_sep_291_sep_0($2558).
(($2553+1>0) & (-$2553+$2560-1=0)) & (v_sep_sum_1030_sep_285_sep_0($2560)) -> v_sep_sum_1030_sep_288_sep_0($2553).
(-$2549+$2561-1=0) & (v_sep_sum_1030_sep_254_sep_1_sep_275_sep_0($2561,$2562)) -> v_sep_sum_1030_sep_285_sep_0($2549).
(($2563>0) & (-$2563+$2564+1=0) & ($2563+$2565-$2566=0)) & (v_sep_sum_1030_sep_257_sep_1_sep_269_sep_0($2564,$2565)) & (v_sep_sum_1030_sep_254_sep_0($2563)) -> v_sep_sum_1030_sep_254_sep_1_sep_275_sep_0($2563,$2566).
(($2567>0) & (-$2567+$2568+1=0) & ($2567+$2569-$2570=0)) & (v_sep_sum_1030_sep_260_sep_1_sep_263_sep_0($2568,$2569)) & (v_sep_sum_1030_sep_257_sep_0($2567)) -> v_sep_sum_1030_sep_257_sep_1_sep_269_sep_0($2567,$2570).
(($2571=0) & ($2572<=0)) & (v_sep_sum_1030_sep_260_sep_0($2572)) -> v_sep_sum_1030_sep_260_sep_1_sep_263_sep_0($2572,$2571).
(($2572+1>0) & (-$2572+$2573-1=0)) & (v_sep_sum_1030_sep_257_sep_0($2573)) -> v_sep_sum_1030_sep_260_sep_0($2572).
(($2567+1>0) & (-$2567+$2574-1=0)) & (v_sep_sum_1030_sep_254_sep_0($2574)) -> v_sep_sum_1030_sep_257_sep_0($2567).
0=0 -> v_sep_sum_1030_sep_254_sep_0($2563).

          |- P[<sum_1030@254:0>](<sum_1030@254:0>:int)
        solution:
          P[<fail_1248@323:0>]($2575:bool) = false
          P[<sum_1030@254:0>]($2612:int) = true
          P[<<sum_1030@254:1>@275:0>]($2583:int,$2585:int) = ($2583 <= 2)
          P[<sum_1030@257:0>]($2620:int) = true
          P[<<sum_1030@257:1>@269:0>]($2607:int,$2609:int) = ($2607 <= 1)
          P[<sum_1030@260:0>]($2623:int) = true
          P[<<sum_1030@260:1>@263:0>]($2615:int,$2617:int) = ($2615 <= 0)
          P[<sum_1030@285:0>]($2593:int) = ($2593 <= 1)
          P[<<sum_1030@285:1>@306:0>]($2578:int,$2580:int) = (5 <= $2578)
          P[<sum_1030@288:0>]($2601:int) = ($2601 <= 0)
          P[<<sum_1030@288:1>@300:0>]($2588:int,$2590:int) = (2 <= $2588)
          P[<sum_1030@291:0>]($2604:int) = (1 <= (3 * $2604))
          P[<<sum_1030@291:1>@294:0>]($2596:int,$2598:int) = (1 <= (3 * $2596))
        
      end HcSolver.solve_ub(63133)[4] (0.128980 sec.)
      begin HcSolver.check_validity(64068)[4]
        input:
          P[<fail_1248@323:0>](<fail_1248@323:0>:bool)|- bot
          
          P[<<sum_1030@254:1>@275:0>](<f_main_1245@320:0>:int,var172:int),
          P[<<sum_1030@285:1>@306:0>]((-1 + <f_main_1245@320:0>):int,(
                                      (-1 * <f_main_1245@320:2>) + var172):int),
          ((<f_main_1245@320:2> < 0) && <fail_1248@323:0>) |- P[<fail_1248@323:0>](
          <fail_1248@323:0>:bool)
          
          P[<sum_1030@285:0>](<sum_1030@285:0>:int),
          P[<<sum_1030@288:1>@300:0>]((-1 + <sum_1030@285:0>):int,(<<sum_1030@285:1>@306:0> + (-1 * <sum_1030@285:0>)):int),
          (<sum_1030@285:0> > 0) |- P[<<sum_1030@285:1>@306:0>](<sum_1030@285:0>:int,
                                                                <<sum_1030@285:1>@306:0>:int)
          
          P[<sum_1030@288:0>](<sum_1030@288:0>:int),
          P[<<sum_1030@291:1>@294:0>]((-1 + <sum_1030@288:0>):int,(<<sum_1030@288:1>@300:0> + (-1 * <sum_1030@288:0>)):int),
          (<sum_1030@288:0> > 0) |- P[<<sum_1030@288:1>@300:0>](<sum_1030@288:0>:int,
                                                                <<sum_1030@288:1>@300:0>:int)
          
          P[<sum_1030@291:0>](<sum_1030@291:0>:int), ((<<sum_1030@291:1>@294:0> = 0) && (<sum_1030@291:0> <= 0))
          |- P[<<sum_1030@291:1>@294:0>](<sum_1030@291:0>:int,<<sum_1030@291:1>@294:0>:int)
          
          P[<sum_1030@288:0>]((1 + <sum_1030@291:0>):int), ((1 + <sum_1030@291:0>) > 0)
          |- P[<sum_1030@291:0>](<sum_1030@291:0>:int)
          
          P[<sum_1030@285:0>]((1 + <sum_1030@288:0>):int), ((1 + <sum_1030@288:0>) > 0)
          |- P[<sum_1030@288:0>](<sum_1030@288:0>:int)
          
          P[<<sum_1030@254:1>@275:0>]((1 + <sum_1030@285:0>):int,var173:int)|- P[<sum_1030@285:0>](
          <sum_1030@285:0>:int)
          
          P[<sum_1030@254:0>](<sum_1030@254:0>:int),
          P[<<sum_1030@257:1>@269:0>]((-1 + <sum_1030@254:0>):int,(<<sum_1030@254:1>@275:0> + (-1 * <sum_1030@254:0>)):int),
          (<sum_1030@254:0> > 0) |- P[<<sum_1030@254:1>@275:0>](<sum_1030@254:0>:int,
                                                                <<sum_1030@254:1>@275:0>:int)
          
          P[<sum_1030@257:0>](<sum_1030@257:0>:int),
          P[<<sum_1030@260:1>@263:0>]((-1 + <sum_1030@257:0>):int,(<<sum_1030@257:1>@269:0> + (-1 * <sum_1030@257:0>)):int),
          (<sum_1030@257:0> > 0) |- P[<<sum_1030@257:1>@269:0>](<sum_1030@257:0>:int,
                                                                <<sum_1030@257:1>@269:0>:int)
          
          P[<sum_1030@260:0>](<sum_1030@260:0>:int), ((<<sum_1030@260:1>@263:0> = 0) && (<sum_1030@260:0> <= 0))
          |- P[<<sum_1030@260:1>@263:0>](<sum_1030@260:0>:int,<<sum_1030@260:1>@263:0>:int)
          
          P[<sum_1030@257:0>]((1 + <sum_1030@260:0>):int), ((1 + <sum_1030@260:0>) > 0)
          |- P[<sum_1030@260:0>](<sum_1030@260:0>:int)
          
          P[<sum_1030@254:0>]((1 + <sum_1030@257:0>):int), ((1 + <sum_1030@257:0>) > 0)
          |- P[<sum_1030@257:0>](<sum_1030@257:0>:int)
          
          |- P[<sum_1030@254:0>](<sum_1030@254:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(64068)[4] (0.004000 sec.)
      solution:
        P[<fail_1248@323:0>]($2575:bool) = false
        P[<sum_1030@254:0>]($2612:int) = true
        P[<<sum_1030@254:1>@275:0>]($2583:int,$2585:int) = ($2583 <= 2)
        P[<sum_1030@257:0>]($2620:int) = true
        P[<<sum_1030@257:1>@269:0>]($2607:int,$2609:int) = ($2607 <= 1)
        P[<sum_1030@260:0>]($2623:int) = true
        P[<<sum_1030@260:1>@263:0>]($2615:int,$2617:int) = ($2615 <= 0)
        P[<sum_1030@285:0>]($2593:int) = ($2593 <= 1)
        P[<<sum_1030@285:1>@306:0>]($2578:int,$2580:int) = (5 <= $2578)
        P[<sum_1030@288:0>]($2601:int) = ($2601 <= 0)
        P[<<sum_1030@288:1>@300:0>]($2588:int,$2590:int) = (2 <= $2588)
        P[<sum_1030@291:0>]($2604:int) = (1 <= (3 * $2604))
        P[<<sum_1030@291:1>@294:0>]($2596:int,$2598:int) = (1 <= (3 * $2596))
    end YhornInterface.solve(63132)[3] (0.133979 sec.)
    
  end RefTypeInfer.infer_etrs(58824)[2] (10.093465 sec.)
  refinement types:
    main_1241: X
    f_1246: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    delta_1032: (v1:int -> (v2:int -> X) -> X /\
                 v5:int -> (v6:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (v1 <= 2)} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (v1 <= 1)} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (v1 <= 0)} -> X) -> X
    f_sum_1242: v1:int -> (v2:int -> X) -> v4:int -> X
    f_sum_1242: v1:int -> (v2:int -> X) -> v4:int -> X
    f_delta_1243: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    sum_1030: v1:{v1:int | (v1 <= 1)} -> (v2:{v2:int | (5 <= v1)} -> X) -> X
    sum_1030: v1:{v1:int | (v1 <= 0)} -> (v2:{v2:int | (2 <= v1)} -> X) -> X
    sum_1030: v1:{v1:int | (1 <= (3 * v1))} -> (v2:{v2:int | (1 <= (3 * v1))} -> X) -> X
    f_sum_1242: v1:int -> (v2:int -> X) -> v4:int -> X
    f_sum_1242: v1:int -> (v2:int -> X) -> v4:int -> X
    f_delta_1244: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1245: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1248: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1247: var197:int -> var196:unit -> X
  abstraction types:
    main_1241: X
    f_1246: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    delta_1032: (var198:int -> (var199:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    sum_1030: var218:int[var218 -> (var218 <= 1),
                         var218 -> (var218 <= 0),
                         var218 -> (1 <= (3 * var218))] ->
              (var219:int[var219 -> (var218 <= 2),
                          var219 -> (var218 <= 1),
                          var219 -> (var218 <= 0),
                          var219 -> (5 <= var218),
                          var219 -> (2 <= var218),
                          var219 -> (1 <= (3 * var218))] -> X) -> X
    f_sum_1242: var232:int -> (var233:int -> X) -> var235:int -> X
    f_delta_1243: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    f_delta_1244: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1245: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1248: v1:bool -> (v2:unit -> X) -> X
    f_1247: var197:int -> var196:unit -> X
  
end AbsTypeInfer.refine(58823)[1] (10.102464 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 1; 0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 5)::
Main: main_1241
  main_1241 -> (rand_int f_1246)
  delta_1032 f_1033 n_1034 k_delta_1140 -> (f_1033 n_1034 (f_delta_1243 n_1034 f_1033 k_delta_1140))
  f_1246 x_1216 -> (main_1035 x_1216 (f_1247 x_1216))
  f_1247 x_1216 x_1213 -> end
  f_delta_1243 n_1034 f_1033 k_delta_1140 x_1143 -> (f_1033 (n_1034 - 1) (f_delta_1244 n_1034 x_1143 k_delta_1140))
  f_delta_1244 n_1034 x_1143 k_delta_1140 x_1144 -> (k_delta_1140 (x_1143 - x_1144))
  f_main_1245 n_1036 k_main_1178 x_1181 when (x_1181 >= 0) -> (k_main_1178 ())
  f_main_1245 n_1036 k_main_1178 x_1181 when (not (x_1181 >= 0)) -> (fail_1248 true k_main_1178)
  f_sum_1242 n_1031 k_sum_1093 x_1097 -> (k_sum_1093 (n_1031 + x_1097))
  fail_1248 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1178 -> (delta_1032 sum_1030 n_1036 (f_main_1245 n_1036 k_main_1178))
  sum_1030 n_1031 k_sum_1093 when (n_1031 <= 0) -> (k_sum_1093 0)
  sum_1030 n_1031 k_sum_1093 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1242 n_1031 k_sum_1093))
Types:
  main_1241 : X
  fail_1248 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (x_1:int[3*x_1 >= 1; x_1 <= 1; x_1 <= 0; x_1 <= -1] ->
              (x_3:int[3*x_1 >= 1; x_1 >= 2; x_1 <= 2; x_1 <= -x_3; x_3 <= 1; 
                       x_1 <= x_3; x_3 >= 1; x_1 >= 3; x_1 <= 1; x_1 >= 5; 
                       x_1 <= 0; x_3 <= 0; x_3 >= 0] -> X) -> X)
  
(5-1) Abstracting ... DONE!

(5-2) Checking HORS ... 