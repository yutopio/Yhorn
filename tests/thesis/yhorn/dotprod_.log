MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -yhorn dotprod_.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let rec dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 =
   if i_1037 >= n_1034 then
     sum_1038
   else
     let u_1129 = dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + v1_1035 i_1037) + v2_1036 i_1037) 
     in
       dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + v1_1035 i_1037) + v2_1036 i_1037) 
 in
 let main_1039 n_1040 m_1041 z_1042 =
   let v1_1043 = make_array_1030 n_1040 
   in
   let v2_1044 = make_array_1030 n_1040 
   in
     if z_1042 = 0 then
       let u_1166 = dotprod_1033 n_1040 v1_1043 v2_1044 z_1042 z_1042 
       in
         ()
     else
       () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let rec dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 =
   if i_1037 >= n_1034 then
     sum_1038
   else
     let u_1129 = dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + v1_1035 i_1037) + v2_1036 i_1037) 
     in
       dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + v1_1035 i_1037) + v2_1036 i_1037) 
 in
 let main_1039 n_1040 m_1041 z_1042 =
   let v1_1043 = make_array_1030 n_1040 
   in
   let v2_1044 = make_array_1030 n_1040 
   in
     if z_1042 = 0 then
       let u_1166 = dotprod_1033 n_1040 v1_1043 v2_1044 z_1042 z_1042 
       in
         ()
     else
       () 
 in
 let main_1170 =
   let arg1_1167 = rand_int () 
   in
   let arg2_1168 = () 
   in
   let arg3_1169 = rand_int () 
   in
     main_1039 arg1_1167 arg2_1168 arg3_1169 
 in
   ()

copy_poly::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let rec dotprod_1033 (n_1034:int) (v1_1035:(int -> int)) (v2_1036:(int -> int)) (i_1037:int) (sum_1038:int) =
   if i_1037 >= n_1034 then
     sum_1038
   else
     let u_1129 = dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + v1_1035 i_1037) + v2_1036 i_1037) 
     in
       dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + v1_1035 i_1037) + v2_1036 i_1037) 
 in
 let main_1039 (n_1040:int) (m_1041:unit) (z_1042:int) =
   let v1_1043 = make_array_1030 n_1040 
   in
   let v2_1044 = make_array_1030 n_1040 
   in
     if z_1042 = 0 then
       let u_1166 = dotprod_1033 n_1040 v1_1043 v2_1044 z_1042 z_1042 
       in
         ()
     else
       () 
 in
 let main_1170 =
   let arg1_1167 = rand_int () 
   in
   let arg2_1168 = () 
   in
   let arg3_1169 = rand_int () 
   in
     main_1039 arg1_1167 arg2_1168 arg3_1169 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1198:(int -> X)) =
   let k_make_array_u_1215 (x_1201:unit) = k_make_array_1198 0 
   in
   let k_make_array_u_1204 (b_1216:bool) =
     if b_1216 then
       k_make_array_u_1215 ()
     else
       {|fail|} () k_make_array_u_1215 
   in
     if 0 <= i_1032 then
       k_make_array_u_1204 (i_1032 < n_1031)
     else
       k_make_array_u_1204 false 
 in
 let rec dotprod_1033
   (n_1034:int) (v1_1035:(int -> ((int -> X) -> X))) (v2_1036:(int -> ((int -> X) -> X))) (i_1037:int) (sum_1038:int) (k_dotprod_1266:(
   int -> X)) =
   if i_1037 >= n_1034 then
     k_dotprod_1266 sum_1038
   else
     v1_1035 i_1037
       (fun x_1296 ->
          v2_1036 i_1037
            (fun x_1292 ->
               dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1296) + x_1292)
                 (fun x_1269 ->
                    v1_1035 i_1037
                      (fun x_1350 ->
                         v2_1036 i_1037
                           (fun x_1346 ->
                              dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) (
                                (sum_1038 + x_1350) + x_1346) k_dotprod_1266))))) 
 in
 let main_1039 (n_1040:int) (m_1041:unit) (z_1042:int) (k_main_1401:(
   unit -> X)) =
   if z_1042 = 0 then
     dotprod_1033 n_1040 (make_array_1030 n_1040) (make_array_1030 n_1040) z_1042 z_1042 (fun x_1436 -> k_main_1401 ())
   else
     k_main_1401 () 
 in
   rand_int_cps () (fun x_1472 -> rand_int_cps () (fun x_1488 -> main_1039 x_1472 () x_1488 (fun x_1469 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1518
  main_1518 -> (rand_int f_1525)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      i_1037 >= n_1034) -> (k_dotprod_1266 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036))
  f_1525 x_1472 -> (rand_int (f_1526 x_1472))
  f_1526 x_1472 x_1488 -> (main_1039 x_1472 () x_1488 (f_1527 x_1472 x_1488))
  f_1527 x_1472 x_1488 x_1469 -> end
  f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 ->
      (v2_1036 i_1037 (f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1296) + x_1292)
        (f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 ->
      (v1_1035 i_1037 (f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 ->
      (v2_1036 i_1037
        (f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1350) + x_1346) k_dotprod_1266)
  f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 -> (k_main_1401 ())
  fail_1528 b k -> {fail} => (k ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when b_1216 ->
      (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when (not b_1216) ->
      (fail_1528 true (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198))
  k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 -> (k_make_array_1198 0)
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (z_1042 = 0) ->
      (dotprod_1033 n_1040 (make_array_1030 n_1040) (make_array_1030 n_1040) z_1042 z_1042
        (f_main_1524 m_1041 n_1040 z_1042 k_main_1401))
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (not (z_1042 = 0)) -> (k_main_1401 ())
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (0 <= i_1032) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (not (0 <= i_1032)) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 false)
Types:
  main_1518 : X
  dotprod_1033 : (int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X)
  fail_1528 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1518 ... --> 
  f_1525 ... --> 
  f_1526 ... --> 
  main_1039 [1/2] ... --> 
  dotprod_1033 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1204 [2/2] ... --> 
  fail_1528 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(181)[1]
  program:
    main_1518  | true = ((Random.int 0) f_1525)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    i_1037 >= n_1034) = (k_dotprod_1266 sum_1038)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    not (i_1037 >= n_1034)) = (v1_1035 i_1037
                                       (f_dotprod_1519 i_1037
                                                       n_1034
                                                       sum_1038
                                                       k_dotprod_1266
                                                       v1_1035
                                                       v2_1036))
    f_1525 x_1472 | true = ((Random.int 0) (f_1526 x_1472))
    f_1526 x_1472 x_1488 | true = (main_1039 x_1472
                                             ()
                                             x_1488
                                             (f_1527 x_1472
                                                     x_1488))
    f_1527 x_1472 x_1488 x_1469 | true = end
    f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 | true = (
    v2_1036 i_1037
            (f_dotprod_1520 i_1037
                            n_1034
                            sum_1038
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 | true = (
    dotprod_1033
      n_1034
      v1_1035
      v2_1036
      (i_1037 + 1)
      ((sum_1038 + x_1296) + x_1292)
      (f_dotprod_1521 i_1037
                      n_1034
                      sum_1038
                      x_1292
                      x_1296
                      k_dotprod_1266
                      v1_1035
                      v2_1036))
    f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 | true = (
    v1_1035 i_1037
            (f_dotprod_1522 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 | true = (
    v2_1036 i_1037
            (f_dotprod_1523 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            x_1350
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 | true = (
    dotprod_1033 n_1034
                 v1_1035
                 v2_1036
                 (i_1037 + 1)
                 ((sum_1038 + x_1350) + x_1346)
                 k_dotprod_1266)
    f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 | true = (k_main_1401 ())
    fail_1528 b k | true = (fail ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | b_1216 = (
    k_make_array_u_1215 i_1032
                        n_1031
                        k_make_array_1198
                        ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | (not b_1216) = (
    fail_1528 true
              (k_make_array_u_1215 i_1032
                                   n_1031
                                   k_make_array_1198))
    k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 | true = (
    k_make_array_1198 0)
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (z_1042 = 0) = (dotprod_1033
                                                                   n_1040
                                                                   (make_array_1030 n_1040)
                                                                   (make_array_1030 n_1040)
                                                                   z_1042
                                                                   z_1042
                                                                   (f_main_1524 m_1041
                                                                    n_1040
                                                                    z_1042
                                                                    k_main_1401))
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (not (z_1042 = 0)) = (
    k_main_1401 ())
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (0 <= i_1032) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (not (0 <= i_1032)) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        false)
    main_1518:X
    dotprod_1033:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1525:int -> X
    f_1526:int -> int -> X
    f_1527:int -> int -> unit -> X
    f_dotprod_1519:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1520:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1521:int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1522:int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1523:int ->
                   int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1524:unit -> int -> int -> (unit -> X) -> int -> X
    fail_1528:bool -> (unit -> X) -> X
    k_make_array_u_1204:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1215:int -> int -> (int -> X) -> unit -> X
    main_1039:int -> unit -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1525,f_1526,f_1527,f_dotprod_1519,f_dotprod_1520,f_dotprod_1521,f_dotprod_1522,f_dotprod_1523,f_main_1524,k_make_array_u_1204,k_make_array_u_1215,main_1039,make_array_1030
  counterexample: 0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1525@4:0> = var2)
     [true.nop((<f_1526@7:0> = <f_1525@4:0>) && (<f_1526@7:1> = var3))
      [true.((<main_1039@9:0> = <f_1526@7:0>) && ((<main_1039@9:1> = ()) && (<main_1039@9:2> = <f_1526@7:1>)))
       [(<main_1039@9:2> = 0).
        ((<dotprod_1033@12:0> = <main_1039@9:0>) &&
         ((<dotprod_1033@12:3> = <main_1039@9:2>) && (<dotprod_1033@12:4> = <main_1039@9:2>)))
        [(not (<dotprod_1033@12:3> >= <dotprod_1033@12:0>)).(<<dotprod_1033@12:1>@15:0> = <dotprod_1033@12:3>)
         [true.((<make_array_1030@17:0> = <main_1039@9:0>) && (<make_array_1030@17:1> = <<dotprod_1033@12:1>@15:0>))
          [(not (0 <= <make_array_1030@17:1>)).
           ((<k_make_array_u_1204@20:0> = <make_array_1030@17:1>) &&
            ((<k_make_array_u_1204@20:1> = <make_array_1030@17:0>) && (<k_make_array_u_1204@20:3> = false)))
           [(not <k_make_array_u_1204@20:3>).(<fail_1528@23:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(182)[2]
    horn clauses:
      P[<fail_1528@23:0>](<fail_1528@23:0>:bool)|- bot
      
      P[<k_make_array_u_1204@20:3>](<k_make_array_u_1204@20:0>:int,<k_make_array_u_1204@20:1>:int,false:bool),
      <fail_1528@23:0> |- P[<fail_1528@23:0>](<fail_1528@23:0>:bool)
      
      P[<make_array_1030@17:1>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
      ((0 > <k_make_array_u_1204@20:0>) && (not <k_make_array_u_1204@20:3>))
      |- P[<k_make_array_u_1204@20:3>](<k_make_array_u_1204@20:0>:int,
                                       <k_make_array_u_1204@20:1>:int,
                                       <k_make_array_u_1204@20:3>:bool)
      
      P[<main_1039@9:2>](<make_array_1030@17:0>:int,<main_1039@9:1>:unit,0:int),
      P[<<dotprod_1033@12:1>@15:0>](<make_array_1030@17:0>:int,<make_array_1030@17:1>:int)|- P[<make_array_1030@17:1>](
      <make_array_1030@17:0>:int,<make_array_1030@17:1>:int)
      
      P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
      (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
      |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
      
      P[<main_1039@9:2>](<dotprod_1033@12:0>:int,<main_1039@9:1>:unit,<dotprod_1033@12:4>:int),
      ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
      |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                <dotprod_1033@12:4>:int)
      
      P[<f_1526@7:1>](<main_1039@9:0>:int,<main_1039@9:2>:int)|- P[<main_1039@9:2>](
      <main_1039@9:0>:int,<main_1039@9:1>:unit,<main_1039@9:2>:int)
      
      P[<f_1525@4:0>](<f_1526@7:0>:int)|- P[<f_1526@7:1>](<f_1526@7:0>:int,
                                                          <f_1526@7:1>:int)
      
      |- P[<f_1525@4:0>](<f_1525@4:0>:int)
    call trees:
      <main_1518@1>
        <f_1525@4>
          <f_1526@7>
            <main_1039@9>
              <dotprod_1033@12>
              </<dotprod_1033@12:1>@15>
              <make_array_1030@17>
                <k_make_array_u_1204@20>
                  <fail_1528@23>
    inlined horn clauses:
      P[<fail_1528@23:0>](<fail_1528@23:0>:bool)|- bot
      
      P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
      ((0 > <k_make_array_u_1204@20:0>) && <fail_1528@23:0>) |- P[<fail_1528@23:0>](
      <fail_1528@23:0>:bool)
      
      P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
      (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
      |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
      
       ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
      |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                <dotprod_1033@12:4>:int)
    begin ParamSubstInfer.infer(1189)[3]
      
    end ParamSubstInfer.infer(1189)[3] (0.022996 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1191)[3]
      
    end RefTypeInfer.elim_coeffs(1191)[3] (0.001000 sec.)
    begin YhornInterface.solve(1350)[3]
      begin HcSolver.solve_ub(1351)[4]
        encoded:
          P[<fail_1528@23:0>](<fail_1528@23:0>:int)|- bot
          
          P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
          ((0 > <k_make_array_u_1204@20:0>) && (<fail_1528@23:0> = 1)) |- P[<fail_1528@23:0>](
          <fail_1528@23:0>:int)
          
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
          (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
          |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
          
           ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
          |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                    <dotprod_1033@12:4>:int)
        input to Yhorn:
          P[<fail_1528@23:0>](<fail_1528@23:0>:int)|- bot
          
          P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
          ((0 > <k_make_array_u_1204@20:0>) && (<fail_1528@23:0> = 1)) |- P[<fail_1528@23:0>](
          <fail_1528@23:0>:int)
          
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
          (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
          |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
          
           ((<dotprod_1033@12:4> = <dotprod_1033@12:3>) && (<dotprod_1033@12:4> = 0))
          |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                    <dotprod_1033@12:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1528_sep_23_sep_0($8)) -> 1=0.
(($8-1=0) & (-$9>0)) & (v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0($10,$9)) -> v_sep_fail_1528_sep_23_sep_0($8).
($11-$12<0) & (v_sep_dotprod_1033_sep_12_sep_4($12,$11,$13)) -> v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0($12,$11).
($13=0) & ($13-$14=0) -> v_sep_dotprod_1033_sep_12_sep_4($12,$14,$13).


v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_dotprod_1033_sep_12_sep_4: X
v_sep_fail_1528_sep_23_sep_0: X
....
v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_dotprod_1033_sep_12_sep_4: X
v_sep_fail_1528_sep_23_sep_0: X
...
v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_dotprod_1033_sep_12_sep_4: X
v_sep_fail_1528_sep_23_sep_0: X
....
v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_dotprod_1033_sep_12_sep_4: X
v_sep_fail_1528_sep_23_sep_0: X
....(0=0) & (v_sep_fail_1528_sep_23_sep_0($8)) -> 1=0.
(($8-1=0) & (-$9>0)) & (v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0($10,$9)) -> v_sep_fail_1528_sep_23_sep_0($8).
($11-$12<0) & (v_sep_dotprod_1033_sep_12_sep_4($12,$11,$13)) -> v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0($12,$11).
($13=0) & ($13-$14=0) -> v_sep_dotprod_1033_sep_12_sep_4($12,$14,$13).

        solution:
          P[<<dotprod_1033@12:1>@15:0>]($18:int,$20:int) = (0 <= $20)
          P[<dotprod_1033@12:4>]($23:int,$25:int,$27:int) = (0 <= $25)
          P[<fail_1528@23:0>]($15:bool) = false
        
      end HcSolver.solve_ub(1351)[4] (0.012998 sec.)
      begin HcSolver.check_validity(1461)[4]
        input:
          P[<fail_1528@23:0>](<fail_1528@23:0>:bool)|- bot
          
          P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
          ((0 > <k_make_array_u_1204@20:0>) && <fail_1528@23:0>) |- P[<fail_1528@23:0>](
          <fail_1528@23:0>:bool)
          
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
          (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
          |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
          
           ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
          |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                    <dotprod_1033@12:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(1461)[4] (0.001000 sec.)
      solution:
        P[<<dotprod_1033@12:1>@15:0>]($18:int,$20:int) = (0 <= $20)
        P[<dotprod_1033@12:4>]($23:int,$25:int,$27:int) = (0 <= $25)
        P[<fail_1528@23:0>]($15:bool) = false
    end YhornInterface.solve(1350)[3] (0.013998 sec.)
    
  end RefTypeInfer.infer_etrs(182)[2] (0.044992 sec.)
  refinement types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:{v11:int | (0 <= v10)} -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1528: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1527: var23:int -> var22:int -> var21:unit -> X
    f_dotprod_1519: var38:int ->
                    var37:int ->
                    var36:int ->
                    (var35:int -> X) ->
                    (var33:int -> (var32:int -> X) -> X) -> (var29:int -> (var28:int -> X) -> X) -> var25:int -> X
    f_dotprod_1520: var54:int ->
                    var53:int ->
                    var52:int ->
                    var51:int ->
                    (var50:int -> X) ->
                    (var48:int -> (var47:int -> X) -> X) -> (var44:int -> (var43:int -> X) -> X) -> var40:int -> X
    f_dotprod_1521: var71:int ->
                    var70:int ->
                    var69:int ->
                    var68:int ->
                    var67:int ->
                    (var66:int -> X) ->
                    (var64:int -> (var63:int -> X) -> X) -> (var60:int -> (var59:int -> X) -> X) -> var56:int -> X
    f_dotprod_1522: var89:int ->
                    var88:int ->
                    var87:int ->
                    var86:int ->
                    var85:int ->
                    var84:int ->
                    (var83:int -> X) ->
                    (var81:int -> (var80:int -> X) -> X) -> (var77:int -> (var76:int -> X) -> X) -> var73:int -> X
    f_dotprod_1523: var108:int ->
                    var107:int ->
                    var106:int ->
                    var105:int ->
                    var104:int ->
                    var103:int ->
                    var102:int ->
                    (var101:int -> X) ->
                    (var99:int -> (var98:int -> X) -> X) -> (var95:int -> (var94:int -> X) -> X) -> var91:int -> X
    f_main_1524: var115:unit -> var114:int -> var113:int -> (var112:unit -> X) -> var110:int -> X
    k_make_array_u_1215: var121:int -> var120:int -> (var119:int -> X) -> var117:unit -> X
  abstraction types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:int[v11 -> (
                                                                    0 <= v10)] -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1528: v1:bool -> (v2:unit -> X) -> X
    f_1527: var23:int -> var22:int -> var21:unit -> X
    f_dotprod_1519: var38:int ->
                    var37:int ->
                    var36:int ->
                    (var35:int -> X) ->
                    (var33:int -> (var32:int -> X) -> X) -> (var29:int -> (var28:int -> X) -> X) -> var25:int -> X
    f_dotprod_1520: var54:int ->
                    var53:int ->
                    var52:int ->
                    var51:int ->
                    (var50:int -> X) ->
                    (var48:int -> (var47:int -> X) -> X) -> (var44:int -> (var43:int -> X) -> X) -> var40:int -> X
    f_dotprod_1521: var71:int ->
                    var70:int ->
                    var69:int ->
                    var68:int ->
                    var67:int ->
                    (var66:int -> X) ->
                    (var64:int -> (var63:int -> X) -> X) -> (var60:int -> (var59:int -> X) -> X) -> var56:int -> X
    f_dotprod_1522: var89:int ->
                    var88:int ->
                    var87:int ->
                    var86:int ->
                    var85:int ->
                    var84:int ->
                    (var83:int -> X) ->
                    (var81:int -> (var80:int -> X) -> X) -> (var77:int -> (var76:int -> X) -> X) -> var73:int -> X
    f_dotprod_1523: var108:int ->
                    var107:int ->
                    var106:int ->
                    var105:int ->
                    var104:int ->
                    var103:int ->
                    var102:int ->
                    (var101:int -> X) ->
                    (var99:int -> (var98:int -> X) -> X) -> (var95:int -> (var94:int -> X) -> X) -> var91:int -> X
    f_main_1524: var115:unit -> var114:int -> var113:int -> (var112:unit -> X) -> var110:int -> X
    k_make_array_u_1215: var121:int -> var120:int -> (var119:int -> X) -> var117:unit -> X
  
end AbsTypeInfer.refine(181)[1] (0.049992 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1518
  main_1518 -> (rand_int f_1525)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      i_1037 >= n_1034) -> (k_dotprod_1266 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036))
  f_1525 x_1472 -> (rand_int (f_1526 x_1472))
  f_1526 x_1472 x_1488 -> (main_1039 x_1472 () x_1488 (f_1527 x_1472 x_1488))
  f_1527 x_1472 x_1488 x_1469 -> end
  f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 ->
      (v2_1036 i_1037 (f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1296) + x_1292)
        (f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 ->
      (v1_1035 i_1037 (f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 ->
      (v2_1036 i_1037
        (f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1350) + x_1346) k_dotprod_1266)
  f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 -> (k_main_1401 ())
  fail_1528 b k -> {fail} => (k ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when b_1216 ->
      (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when (not b_1216) ->
      (fail_1528 true (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198))
  k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 -> (k_make_array_1198 0)
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (z_1042 = 0) ->
      (dotprod_1033 n_1040 (make_array_1030 n_1040) (make_array_1030 n_1040) z_1042 z_1042
        (f_main_1524 m_1041 n_1040 z_1042 k_main_1401))
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (not (z_1042 = 0)) -> (k_main_1401 ())
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (0 <= i_1032) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (not (0 <= i_1032)) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 false)
Types:
  main_1518 : X
  dotprod_1033 : (int ->
                  (x_3:int[x_3 >= 0] -> (int -> X) -> X) ->
                  (int -> (int -> X) -> X) -> x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1528 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1518 ... --> 
  f_1525 ... --> 
  f_1526 ... --> 
  main_1039 [1/2] ... --> 
  dotprod_1033 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1204 [2/2] ... --> 
  fail_1528 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(2242)[1]
  program:
    main_1518  | true = ((Random.int 0) f_1525)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    i_1037 >= n_1034) = (k_dotprod_1266 sum_1038)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    not (i_1037 >= n_1034)) = (v1_1035 i_1037
                                       (f_dotprod_1519 i_1037
                                                       n_1034
                                                       sum_1038
                                                       k_dotprod_1266
                                                       v1_1035
                                                       v2_1036))
    f_1525 x_1472 | true = ((Random.int 0) (f_1526 x_1472))
    f_1526 x_1472 x_1488 | true = (main_1039 x_1472
                                             ()
                                             x_1488
                                             (f_1527 x_1472
                                                     x_1488))
    f_1527 x_1472 x_1488 x_1469 | true = end
    f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 | true = (
    v2_1036 i_1037
            (f_dotprod_1520 i_1037
                            n_1034
                            sum_1038
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 | true = (
    dotprod_1033
      n_1034
      v1_1035
      v2_1036
      (i_1037 + 1)
      ((sum_1038 + x_1296) + x_1292)
      (f_dotprod_1521 i_1037
                      n_1034
                      sum_1038
                      x_1292
                      x_1296
                      k_dotprod_1266
                      v1_1035
                      v2_1036))
    f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 | true = (
    v1_1035 i_1037
            (f_dotprod_1522 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 | true = (
    v2_1036 i_1037
            (f_dotprod_1523 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            x_1350
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 | true = (
    dotprod_1033 n_1034
                 v1_1035
                 v2_1036
                 (i_1037 + 1)
                 ((sum_1038 + x_1350) + x_1346)
                 k_dotprod_1266)
    f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 | true = (k_main_1401 ())
    fail_1528 b k | true = (fail ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | b_1216 = (
    k_make_array_u_1215 i_1032
                        n_1031
                        k_make_array_1198
                        ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | (not b_1216) = (
    fail_1528 true
              (k_make_array_u_1215 i_1032
                                   n_1031
                                   k_make_array_1198))
    k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 | true = (
    k_make_array_1198 0)
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (z_1042 = 0) = (dotprod_1033
                                                                   n_1040
                                                                   (make_array_1030 n_1040)
                                                                   (make_array_1030 n_1040)
                                                                   z_1042
                                                                   z_1042
                                                                   (f_main_1524 m_1041
                                                                    n_1040
                                                                    z_1042
                                                                    k_main_1401))
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (not (z_1042 = 0)) = (
    k_main_1401 ())
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (0 <= i_1032) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (not (0 <= i_1032)) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        false)
    main_1518:X
    dotprod_1033:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1525:int -> X
    f_1526:int -> int -> X
    f_1527:int -> int -> unit -> X
    f_dotprod_1519:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1520:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1521:int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1522:int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1523:int ->
                   int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1524:unit -> int -> int -> (unit -> X) -> int -> X
    fail_1528:bool -> (unit -> X) -> X
    k_make_array_u_1204:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1215:int -> int -> (int -> X) -> unit -> X
    main_1039:int -> unit -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1525,f_1526,f_1527,f_dotprod_1519,f_dotprod_1520,f_dotprod_1521,f_dotprod_1522,f_dotprod_1523,f_main_1524,k_make_array_u_1204,k_make_array_u_1215,main_1039,make_array_1030
  counterexample: 0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1525@29:0> = var122)
     [true.nop((<f_1526@32:0> = <f_1525@29:0>) && (<f_1526@32:1> = var123))
      [true.((<main_1039@34:0> = <f_1526@32:0>) && ((<main_1039@34:1> = ()) && (<main_1039@34:2> = <f_1526@32:1>)))
       [(<main_1039@34:2> = 0).
        ((<dotprod_1033@37:0> = <main_1039@34:0>) &&
         ((<dotprod_1033@37:3> = <main_1039@34:2>) && (<dotprod_1033@37:4> = <main_1039@34:2>)))
        [(not (<dotprod_1033@37:3> >= <dotprod_1033@37:0>)).(<<dotprod_1033@37:1>@40:0> = <dotprod_1033@37:3>)
         [true.((<make_array_1030@42:0> = <main_1039@34:0>) && (<make_array_1030@42:1> = <<dotprod_1033@37:1>@40:0>))
          [(0 <= <make_array_1030@42:1>).
           ((<k_make_array_u_1204@45:0> = <make_array_1030@42:1>) &&
            ((<k_make_array_u_1204@45:1> = <make_array_1030@42:0>) &&
             (<k_make_array_u_1204@45:3> = (<make_array_1030@42:1> < <make_array_1030@42:0>))))
           [(not <k_make_array_u_1204@45:3>).(<fail_1528@48:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(2243)[2]
    horn clauses:
      P[<fail_1528@48:0>](<fail_1528@48:0>:bool)|- bot
      
      P[<k_make_array_u_1204@45:3>](<k_make_array_u_1204@45:0>:int,<k_make_array_u_1204@45:1>:int,false:bool),
      <fail_1528@48:0> |- P[<fail_1528@48:0>](<fail_1528@48:0>:bool)
      
      P[<make_array_1030@42:1>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
      ((0 <= <k_make_array_u_1204@45:0>) &&
       (<k_make_array_u_1204@45:3> = (<k_make_array_u_1204@45:0> < <k_make_array_u_1204@45:1>)))
      |- P[<k_make_array_u_1204@45:3>](<k_make_array_u_1204@45:0>:int,
                                       <k_make_array_u_1204@45:1>:int,
                                       <k_make_array_u_1204@45:3>:bool)
      
      P[<main_1039@34:2>](<make_array_1030@42:0>:int,<main_1039@34:1>:unit,0:int),
      P[<<dotprod_1033@37:1>@40:0>](<make_array_1030@42:0>:int,<make_array_1030@42:1>:int)|- P[<make_array_1030@42:1>](
      <make_array_1030@42:0>:int,<make_array_1030@42:1>:int)
      
      P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
      (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
      |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
      
      P[<main_1039@34:2>](<dotprod_1033@37:0>:int,<main_1039@34:1>:unit,<dotprod_1033@37:4>:int),
      ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
      |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                <dotprod_1033@37:4>:int)
      
      P[<f_1526@32:1>](<main_1039@34:0>:int,<main_1039@34:2>:int)|- P[<main_1039@34:2>](
      <main_1039@34:0>:int,<main_1039@34:1>:unit,<main_1039@34:2>:int)
      
      P[<f_1525@29:0>](<f_1526@32:0>:int)|- P[<f_1526@32:1>](<f_1526@32:0>:int,
                                                             <f_1526@32:1>:int)
      
      |- P[<f_1525@29:0>](<f_1525@29:0>:int)
    call trees:
      <main_1518@26>
        <f_1525@29>
          <f_1526@32>
            <main_1039@34>
              <dotprod_1033@37>
              </<dotprod_1033@37:1>@40>
              <make_array_1030@42>
                <k_make_array_u_1204@45>
                  <fail_1528@48>
    inlined horn clauses:
      P[<fail_1528@48:0>](<fail_1528@48:0>:bool)|- bot
      
      P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
      ((0 <= <k_make_array_u_1204@45:0>) &&
       ((<k_make_array_u_1204@45:0> >= <k_make_array_u_1204@45:1>) && <fail_1528@48:0>))
      |- P[<fail_1528@48:0>](<fail_1528@48:0>:bool)
      
      P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
      (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
      |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
      
       ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
      |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                <dotprod_1033@37:4>:int)
    begin ParamSubstInfer.infer(3468)[3]
      
    end ParamSubstInfer.infer(3468)[3] (0.081988 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(3470)[3]
      
    end RefTypeInfer.elim_coeffs(3470)[3] (0.001000 sec.)
    begin YhornInterface.solve(3696)[3]
      begin HcSolver.solve_ub(3697)[4]
        encoded:
          P[<fail_1528@48:0>](<fail_1528@48:0>:int)|- bot
          
          P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
          ((0 <= <k_make_array_u_1204@45:0>) &&
           ((<k_make_array_u_1204@45:0> >= <k_make_array_u_1204@45:1>) && (<fail_1528@48:0> = 1)))
          |- P[<fail_1528@48:0>](<fail_1528@48:0>:int)
          
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
          (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
          |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
          
           ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
          |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                    <dotprod_1033@37:4>:int)
        input to Yhorn:
          P[<fail_1528@48:0>](<fail_1528@48:0>:int)|- bot
          
          P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
          ((<k_make_array_u_1204@45:0> >= <k_make_array_u_1204@45:1>) &&
           ((0 <= <k_make_array_u_1204@45:0>) && (<fail_1528@48:0> = 1))) |- P[<fail_1528@48:0>](
          <fail_1528@48:0>:int)
          
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
          (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
          |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
          
           ((<dotprod_1033@37:4> = <dotprod_1033@37:3>) && (<dotprod_1033@37:4> = 0))
          |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                    <dotprod_1033@37:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1528_sep_48_sep_0($71)) -> 1=0.
(($71-1=0) & (-$72<=0) & ($72-$73>=0)) & (v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0($73,$72)) -> v_sep_fail_1528_sep_48_sep_0($71).
($74-$75<0) & (v_sep_dotprod_1033_sep_37_sep_4($75,$74,$76)) -> v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0($75,$74).
($76=0) & ($76-$77=0) -> v_sep_dotprod_1033_sep_37_sep_4($75,$77,$76).


v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0: X
v_sep_dotprod_1033_sep_37_sep_4: X
v_sep_fail_1528_sep_48_sep_0: X
....
v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0: X
v_sep_dotprod_1033_sep_37_sep_4: X
v_sep_fail_1528_sep_48_sep_0: X
...
v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0: X
v_sep_dotprod_1033_sep_37_sep_4: X
v_sep_fail_1528_sep_48_sep_0: X
....
v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0: X
v_sep_dotprod_1033_sep_37_sep_4: X
v_sep_fail_1528_sep_48_sep_0: X
....(0=0) & (v_sep_fail_1528_sep_48_sep_0($71)) -> 1=0.
(($71-1=0) & (-$72<=0) & ($72-$73>=0)) & (v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0($73,$72)) -> v_sep_fail_1528_sep_48_sep_0($71).
($74-$75<0) & (v_sep_dotprod_1033_sep_37_sep_4($75,$74,$76)) -> v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0($75,$74).
($76=0) & ($76-$77=0) -> v_sep_dotprod_1033_sep_37_sep_4($75,$77,$76).

        solution:
          P[<<dotprod_1033@37:1>@40:0>]($81:int,$83:int) = ((1 + $83) <= $81)
          P[<dotprod_1033@37:4>]($86:int,$88:int,$90:int) = true
          P[<fail_1528@48:0>]($78:bool) = false
        
      end HcSolver.solve_ub(3697)[4] (0.010998 sec.)
      begin HcSolver.check_validity(3855)[4]
        input:
          P[<fail_1528@48:0>](<fail_1528@48:0>:bool)|- bot
          
          P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
          ((0 <= <k_make_array_u_1204@45:0>) &&
           ((<k_make_array_u_1204@45:0> >= <k_make_array_u_1204@45:1>) && <fail_1528@48:0>))
          |- P[<fail_1528@48:0>](<fail_1528@48:0>:bool)
          
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
          (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
          |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
          
           ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
          |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                    <dotprod_1033@37:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3855)[4] (0.002000 sec.)
      solution:
        P[<<dotprod_1033@37:1>@40:0>]($81:int,$83:int) = ((1 + $83) <= $81)
        P[<dotprod_1033@37:4>]($86:int,$88:int,$90:int) = true
        P[<fail_1528@48:0>]($78:bool) = false
    end YhornInterface.solve(3696)[3] (0.012998 sec.)
    
  end RefTypeInfer.infer_etrs(2243)[2] (0.103985 sec.)
  refinement types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1528: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1527: var143:int -> var142:int -> var141:unit -> X
    f_dotprod_1519: var158:int ->
                    var157:int ->
                    var156:int ->
                    (var155:int -> X) ->
                    (var153:int -> (var152:int -> X) -> X) -> (var149:int -> (var148:int -> X) -> X) -> var145:int -> X
    f_dotprod_1520: var174:int ->
                    var173:int ->
                    var172:int ->
                    var171:int ->
                    (var170:int -> X) ->
                    (var168:int -> (var167:int -> X) -> X) -> (var164:int -> (var163:int -> X) -> X) -> var160:int -> X
    f_dotprod_1521: var191:int ->
                    var190:int ->
                    var189:int ->
                    var188:int ->
                    var187:int ->
                    (var186:int -> X) ->
                    (var184:int -> (var183:int -> X) -> X) -> (var180:int -> (var179:int -> X) -> X) -> var176:int -> X
    f_dotprod_1522: var209:int ->
                    var208:int ->
                    var207:int ->
                    var206:int ->
                    var205:int ->
                    var204:int ->
                    (var203:int -> X) ->
                    (var201:int -> (var200:int -> X) -> X) -> (var197:int -> (var196:int -> X) -> X) -> var193:int -> X
    f_dotprod_1523: var228:int ->
                    var227:int ->
                    var226:int ->
                    var225:int ->
                    var224:int ->
                    var223:int ->
                    var222:int ->
                    (var221:int -> X) ->
                    (var219:int -> (var218:int -> X) -> X) -> (var215:int -> (var214:int -> X) -> X) -> var211:int -> X
    f_main_1524: var235:unit -> var234:int -> var233:int -> (var232:unit -> X) -> var230:int -> X
    k_make_array_u_1215: var241:int -> var240:int -> (var239:int -> X) -> var237:unit -> X
  abstraction types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1528: v1:bool -> (v2:unit -> X) -> X
    f_1527: var143:int -> var142:int -> var141:unit -> X
    f_dotprod_1519: var158:int ->
                    var157:int ->
                    var156:int ->
                    (var155:int -> X) ->
                    (var153:int -> (var152:int -> X) -> X) -> (var149:int -> (var148:int -> X) -> X) -> var145:int -> X
    f_dotprod_1520: var174:int ->
                    var173:int ->
                    var172:int ->
                    var171:int ->
                    (var170:int -> X) ->
                    (var168:int -> (var167:int -> X) -> X) -> (var164:int -> (var163:int -> X) -> X) -> var160:int -> X
    f_dotprod_1521: var191:int ->
                    var190:int ->
                    var189:int ->
                    var188:int ->
                    var187:int ->
                    (var186:int -> X) ->
                    (var184:int -> (var183:int -> X) -> X) -> (var180:int -> (var179:int -> X) -> X) -> var176:int -> X
    f_dotprod_1522: var209:int ->
                    var208:int ->
                    var207:int ->
                    var206:int ->
                    var205:int ->
                    var204:int ->
                    (var203:int -> X) ->
                    (var201:int -> (var200:int -> X) -> X) -> (var197:int -> (var196:int -> X) -> X) -> var193:int -> X
    f_dotprod_1523: var228:int ->
                    var227:int ->
                    var226:int ->
                    var225:int ->
                    var224:int ->
                    var223:int ->
                    var222:int ->
                    (var221:int -> X) ->
                    (var219:int -> (var218:int -> X) -> X) -> (var215:int -> (var214:int -> X) -> X) -> var211:int -> X
    f_main_1524: var235:unit -> var234:int -> var233:int -> (var232:unit -> X) -> var230:int -> X
    k_make_array_u_1215: var241:int -> var240:int -> (var239:int -> X) -> var237:unit -> X
  
end AbsTypeInfer.refine(2242)[1] (0.111983 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1518
  main_1518 -> (rand_int f_1525)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      i_1037 >= n_1034) -> (k_dotprod_1266 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036))
  f_1525 x_1472 -> (rand_int (f_1526 x_1472))
  f_1526 x_1472 x_1488 -> (main_1039 x_1472 () x_1488 (f_1527 x_1472 x_1488))
  f_1527 x_1472 x_1488 x_1469 -> end
  f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 ->
      (v2_1036 i_1037 (f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1296) + x_1292)
        (f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 ->
      (v1_1035 i_1037 (f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 ->
      (v2_1036 i_1037
        (f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1350) + x_1346) k_dotprod_1266)
  f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 -> (k_main_1401 ())
  fail_1528 b k -> {fail} => (k ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when b_1216 ->
      (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when (not b_1216) ->
      (fail_1528 true (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198))
  k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 -> (k_make_array_1198 0)
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (z_1042 = 0) ->
      (dotprod_1033 n_1040 (make_array_1030 n_1040) (make_array_1030 n_1040) z_1042 z_1042
        (f_main_1524 m_1041 n_1040 z_1042 k_main_1401))
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (not (z_1042 = 0)) -> (k_main_1401 ())
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (0 <= i_1032) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (not (0 <= i_1032)) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 false)
Types:
  main_1518 : X
  dotprod_1033 : (x_1:int ->
                  (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                  (int -> (int -> X) -> X) -> x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1528 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1518 ... --> 
  f_1525 ... --> 
  f_1526 ... --> 
  main_1039 [1/2] ... --> 
  dotprod_1033 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1204 [1/2] ... --> 
  k_make_array_u_1215 ... --> 
  f_dotprod_1519 ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1204 [2/2] ... --> 
  fail_1528 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(5026)[1]
  program:
    main_1518  | true = ((Random.int 0) f_1525)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    i_1037 >= n_1034) = (k_dotprod_1266 sum_1038)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    not (i_1037 >= n_1034)) = (v1_1035 i_1037
                                       (f_dotprod_1519 i_1037
                                                       n_1034
                                                       sum_1038
                                                       k_dotprod_1266
                                                       v1_1035
                                                       v2_1036))
    f_1525 x_1472 | true = ((Random.int 0) (f_1526 x_1472))
    f_1526 x_1472 x_1488 | true = (main_1039 x_1472
                                             ()
                                             x_1488
                                             (f_1527 x_1472
                                                     x_1488))
    f_1527 x_1472 x_1488 x_1469 | true = end
    f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 | true = (
    v2_1036 i_1037
            (f_dotprod_1520 i_1037
                            n_1034
                            sum_1038
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 | true = (
    dotprod_1033
      n_1034
      v1_1035
      v2_1036
      (i_1037 + 1)
      ((sum_1038 + x_1296) + x_1292)
      (f_dotprod_1521 i_1037
                      n_1034
                      sum_1038
                      x_1292
                      x_1296
                      k_dotprod_1266
                      v1_1035
                      v2_1036))
    f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 | true = (
    v1_1035 i_1037
            (f_dotprod_1522 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 | true = (
    v2_1036 i_1037
            (f_dotprod_1523 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            x_1350
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 | true = (
    dotprod_1033 n_1034
                 v1_1035
                 v2_1036
                 (i_1037 + 1)
                 ((sum_1038 + x_1350) + x_1346)
                 k_dotprod_1266)
    f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 | true = (k_main_1401 ())
    fail_1528 b k | true = (fail ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | b_1216 = (
    k_make_array_u_1215 i_1032
                        n_1031
                        k_make_array_1198
                        ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | (not b_1216) = (
    fail_1528 true
              (k_make_array_u_1215 i_1032
                                   n_1031
                                   k_make_array_1198))
    k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 | true = (
    k_make_array_1198 0)
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (z_1042 = 0) = (dotprod_1033
                                                                   n_1040
                                                                   (make_array_1030 n_1040)
                                                                   (make_array_1030 n_1040)
                                                                   z_1042
                                                                   z_1042
                                                                   (f_main_1524 m_1041
                                                                    n_1040
                                                                    z_1042
                                                                    k_main_1401))
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (not (z_1042 = 0)) = (
    k_main_1401 ())
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (0 <= i_1032) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (not (0 <= i_1032)) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        false)
    main_1518:X
    dotprod_1033:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1525:int -> X
    f_1526:int -> int -> X
    f_1527:int -> int -> unit -> X
    f_dotprod_1519:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1520:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1521:int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1522:int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1523:int ->
                   int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1524:unit -> int -> int -> (unit -> X) -> int -> X
    fail_1528:bool -> (unit -> X) -> X
    k_make_array_u_1204:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1215:int -> int -> (int -> X) -> unit -> X
    main_1039:int -> unit -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1525,f_1526,f_1527,f_dotprod_1519,f_dotprod_1520,f_dotprod_1521,f_dotprod_1522,f_dotprod_1523,f_main_1524,k_make_array_u_1204,k_make_array_u_1215,main_1039,make_array_1030
  counterexample: 0:0:0:0:1:0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1525@54:0> = var242)
     [true.nop((<f_1526@57:0> = <f_1525@54:0>) && (<f_1526@57:1> = var243))
      [true.((<main_1039@59:0> = <f_1526@57:0>) && ((<main_1039@59:1> = ()) && (<main_1039@59:2> = <f_1526@57:1>)))
       [(<main_1039@59:2> = 0).
        ((<dotprod_1033@62:0> = <main_1039@59:0>) &&
         ((<dotprod_1033@62:3> = <main_1039@59:2>) && (<dotprod_1033@62:4> = <main_1039@59:2>)))
        [(not (<dotprod_1033@62:3> >= <dotprod_1033@62:0>)).(<<dotprod_1033@62:1>@65:0> = <dotprod_1033@62:3>)
         [true.((<make_array_1030@67:0> = <main_1039@59:0>) && (<make_array_1030@67:1> = <<dotprod_1033@62:1>@65:0>))
          [(0 <= <make_array_1030@67:1>).
           ((<k_make_array_u_1204@70:0> = <make_array_1030@67:1>) &&
            ((<k_make_array_u_1204@70:1> = <make_array_1030@67:0>) &&
             (<k_make_array_u_1204@70:3> = (<make_array_1030@67:1> < <make_array_1030@67:0>))))
           [<k_make_array_u_1204@70:3>.
            ((<k_make_array_u_1215@73:0> = <k_make_array_u_1204@70:0>) &&
             ((<k_make_array_u_1215@73:1> = <k_make_array_u_1204@70:1>) && (<k_make_array_u_1215@73:3> = ())))
            [true.(<<k_make_array_u_1215@73:2>@75:0> = 0)
             [true.(<<k_make_array_u_1204@70:2>@77:0> = <<k_make_array_u_1215@73:2>@75:0>)
              [true.(<<make_array_1030@67:2>@79:0> = <<k_make_array_u_1204@70:2>@77:0>)
               [true.(<<<dotprod_1033@62:1>@65:1>@81:0> = <<make_array_1030@67:2>@79:0>)
                [true.
                 ((<f_dotprod_1519@83:0> = <dotprod_1033@62:3>) &&
                  ((<f_dotprod_1519@83:1> = <dotprod_1033@62:0>) &&
                   ((<f_dotprod_1519@83:2> = <dotprod_1033@62:4>) &&
                    (<f_dotprod_1519@83:6> = <<<dotprod_1033@62:1>@65:1>@81:0>))))
                 [true.(<<f_dotprod_1519@83:5>@85:0> = <f_dotprod_1519@83:0>)
                  [true.(<<dotprod_1033@62:2>@87:0> = <<f_dotprod_1519@83:5>@85:0>)
                   [true.
                    ((<make_array_1030@89:0> = <main_1039@59:0>) &&
                     (<make_array_1030@89:1> = <<dotprod_1033@62:2>@87:0>))
                    [(not (0 <= <make_array_1030@89:1>)).
                     ((<k_make_array_u_1204@92:0> = <make_array_1030@89:1>) &&
                      ((<k_make_array_u_1204@92:1> = <make_array_1030@89:0>) && (<k_make_array_u_1204@92:3> = false)))
                     [(not <k_make_array_u_1204@92:3>).(<fail_1528@95:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(5027)[2]
    horn clauses:
      P[<fail_1528@95:0>](<fail_1528@95:0>:bool)|- bot
      
      P[<k_make_array_u_1204@92:3>](<k_make_array_u_1204@92:0>:int,<k_make_array_u_1204@92:1>:int,false:bool),
      <fail_1528@95:0> |- P[<fail_1528@95:0>](<fail_1528@95:0>:bool)
      
      P[<make_array_1030@89:1>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
      ((0 > <k_make_array_u_1204@92:0>) && (not <k_make_array_u_1204@92:3>))
      |- P[<k_make_array_u_1204@92:3>](<k_make_array_u_1204@92:0>:int,
                                       <k_make_array_u_1204@92:1>:int,
                                       <k_make_array_u_1204@92:3>:bool)
      
      P[<main_1039@59:2>](<make_array_1030@89:0>:int,<main_1039@59:1>:unit,0:int),
      P[<<dotprod_1033@62:2>@87:0>](<make_array_1030@89:0>:int,<make_array_1030@89:1>:int)|- P[<make_array_1030@89:1>](
      <make_array_1030@89:0>:int,<make_array_1030@89:1>:int)
      
      P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<f_dotprod_1519@83:2>:int),
      P[<<f_dotprod_1519@83:5>@85:0>](<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:0>:int,<f_dotprod_1519@83:2>:int,<<dotprod_1033@62:2>@87:0>:int),
      (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
      |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
      
      P[<f_dotprod_1519@83:6>](<f_dotprod_1519@83:0>:int,<f_dotprod_1519@83:1>:int,<f_dotprod_1519@83:2>:int,<f_dotprod_1519@83:6>:int),
      (<<f_dotprod_1519@83:5>@85:0> = <f_dotprod_1519@83:0>)
      |- P[<<f_dotprod_1519@83:5>@85:0>](<f_dotprod_1519@83:0>:int,<f_dotprod_1519@83:1>:int,
                                         <f_dotprod_1519@83:2>:int,<<f_dotprod_1519@83:5>@85:0>:int)
      
      P[<dotprod_1033@62:4>](<f_dotprod_1519@83:1>:int,<f_dotprod_1519@83:0>:int,<f_dotprod_1519@83:2>:int),
      P[<<<dotprod_1033@62:1>@65:1>@81:0>](<f_dotprod_1519@83:1>:int,<f_dotprod_1519@83:0>:int,<f_dotprod_1519@83:6>:int),
      (<f_dotprod_1519@83:0> < <f_dotprod_1519@83:1>)
      |- P[<f_dotprod_1519@83:6>](<f_dotprod_1519@83:0>:int,<f_dotprod_1519@83:1>:int,
                                  <f_dotprod_1519@83:2>:int,<f_dotprod_1519@83:6>:int)
      
      P[<main_1039@59:2>](<dotprod_1033@62:0>:int,<main_1039@59:1>:unit,0:int),
      P[<<make_array_1030@67:2>@79:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int)|- P[<<<dotprod_1033@62:1>@65:1>@81:0>](
      <dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int)
      
      P[<make_array_1030@67:1>](<make_array_1030@67:0>:int,<make_array_1030@67:1>:int),
      P[<<k_make_array_u_1204@70:2>@77:0>](<make_array_1030@67:1>:int,<make_array_1030@67:0>:int,<<make_array_1030@67:2>@79:0>:int),
      (0 <= <make_array_1030@67:1>)
      |- P[<<make_array_1030@67:2>@79:0>](<make_array_1030@67:0>:int,
                                          <make_array_1030@67:1>:int,
                                          <<make_array_1030@67:2>@79:0>:int)
      
      P[<k_make_array_u_1204@70:3>](<k_make_array_u_1204@70:0>:int,<k_make_array_u_1204@70:1>:int,true:bool),
      P[<<k_make_array_u_1215@73:2>@75:0>](<k_make_array_u_1204@70:0>:int,<k_make_array_u_1204@70:1>:int,<<k_make_array_u_1204@70:2>@77:0>:int)|- P[<<k_make_array_u_1204@70:2>@77:0>](
      <k_make_array_u_1204@70:0>:int,<k_make_array_u_1204@70:1>:int,<<k_make_array_u_1204@70:2>@77:0>:int)
      
      P[<k_make_array_u_1215@73:3>](<k_make_array_u_1215@73:0>:int,<k_make_array_u_1215@73:1>:int,<k_make_array_u_1215@73:3>:unit),
      (<<k_make_array_u_1215@73:2>@75:0> = 0)
      |- P[<<k_make_array_u_1215@73:2>@75:0>](<k_make_array_u_1215@73:0>:int,
                                              <k_make_array_u_1215@73:1>:int,
                                              <<k_make_array_u_1215@73:2>@75:0>:int)
      
      P[<k_make_array_u_1204@70:3>](<k_make_array_u_1215@73:0>:int,<k_make_array_u_1215@73:1>:int,true:bool)|- P[<k_make_array_u_1215@73:3>](
      <k_make_array_u_1215@73:0>:int,<k_make_array_u_1215@73:1>:int,<k_make_array_u_1215@73:3>:unit)
      
      P[<make_array_1030@67:1>](<k_make_array_u_1204@70:1>:int,<k_make_array_u_1204@70:0>:int),
      ((0 <= <k_make_array_u_1204@70:0>) &&
       (<k_make_array_u_1204@70:3> = (<k_make_array_u_1204@70:0> < <k_make_array_u_1204@70:1>)))
      |- P[<k_make_array_u_1204@70:3>](<k_make_array_u_1204@70:0>:int,
                                       <k_make_array_u_1204@70:1>:int,
                                       <k_make_array_u_1204@70:3>:bool)
      
      P[<main_1039@59:2>](<make_array_1030@67:0>:int,<main_1039@59:1>:unit,0:int),
      P[<<dotprod_1033@62:1>@65:0>](<make_array_1030@67:0>:int,<make_array_1030@67:1>:int)|- P[<make_array_1030@67:1>](
      <make_array_1030@67:0>:int,<make_array_1030@67:1>:int)
      
      P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
      (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
      |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
      
      P[<main_1039@59:2>](<dotprod_1033@62:0>:int,<main_1039@59:1>:unit,<dotprod_1033@62:4>:int),
      ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
      |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                <dotprod_1033@62:4>:int)
      
      P[<f_1526@57:1>](<main_1039@59:0>:int,<main_1039@59:2>:int)|- P[<main_1039@59:2>](
      <main_1039@59:0>:int,<main_1039@59:1>:unit,<main_1039@59:2>:int)
      
      P[<f_1525@54:0>](<f_1526@57:0>:int)|- P[<f_1526@57:1>](<f_1526@57:0>:int,
                                                             <f_1526@57:1>:int)
      
      |- P[<f_1525@54:0>](<f_1525@54:0>:int)
    call trees:
      <main_1518@51>
        <f_1525@54>
          <f_1526@57>
            <main_1039@59>
              <dotprod_1033@62>
              </<dotprod_1033@62:1>@65>
              <make_array_1030@67>
                <k_make_array_u_1204@70>
                  <k_make_array_u_1215@73>
                  </<k_make_array_u_1215@73:2>@75>
                </<k_make_array_u_1204@70:2>@77>
              </<make_array_1030@67:2>@79>
              <<<dotprod_1033@62:1>@65:1>@81>
                <f_dotprod_1519@83>
                </<f_dotprod_1519@83:5>@85>
              </<dotprod_1033@62:2>@87>
              <make_array_1030@89>
                <k_make_array_u_1204@92>
                  <fail_1528@95>
    inlined horn clauses:
      P[<fail_1528@95:0>](<fail_1528@95:0>:bool)|- bot
      
      P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
      ((0 > <k_make_array_u_1204@92:0>) && <fail_1528@95:0>) |- P[<fail_1528@95:0>](
      <fail_1528@95:0>:bool)
      
      P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
      P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var244:int),
      (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
      |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
      
      P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
      ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
       ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
      |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                              <<dotprod_1033@62:1>@65:0>:int,
                                              <<<dotprod_1033@62:1>@65:1>@81:0>:int)
      
      P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
      (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
      |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
      
       ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
      |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                <dotprod_1033@62:4>:int)
    begin ParamSubstInfer.infer(7638)[3]
      
    end ParamSubstInfer.infer(7638)[3] (0.163975 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(7640)[3]
      
    end RefTypeInfer.elim_coeffs(7640)[3] (0.001000 sec.)
    begin YhornInterface.solve(7939)[3]
      begin HcSolver.solve_ub(7940)[4]
        encoded:
          P[<fail_1528@95:0>](<fail_1528@95:0>:int)|- bot
          
          P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
          ((0 > <k_make_array_u_1204@92:0>) && (<fail_1528@95:0> = 1)) |- P[<fail_1528@95:0>](
          <fail_1528@95:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var244:int),
          (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
          
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
          ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
          |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                  <<dotprod_1033@62:1>@65:0>:int,
                                                  <<<dotprod_1033@62:1>@65:1>@81:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
          (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
          
           ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
          |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                    <dotprod_1033@62:4>:int)
        input to Yhorn:
          P[<fail_1528@95:0>](<fail_1528@95:0>:int)|- bot
          
          P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
          ((0 > <k_make_array_u_1204@92:0>) && (<fail_1528@95:0> = 1)) |- P[<fail_1528@95:0>](
          <fail_1528@95:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var244:int),
          (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
          
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
          ((<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>) &&
           ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<<dotprod_1033@62:1>@65:1>@81:0> = 0)))
          |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                  <<dotprod_1033@62:1>@65:0>:int,
                                                  <<<dotprod_1033@62:1>@65:1>@81:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
          (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
          
           ((<dotprod_1033@62:4> = <dotprod_1033@62:3>) && (<dotprod_1033@62:4> = 0))
          |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                    <dotprod_1033@62:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1528_sep_95_sep_0($142)) -> 1=0.
(($142-1=0) & (-$143>0)) & (v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0($144,$143)) -> v_sep_fail_1528_sep_95_sep_0($142).
($145-$146<0) & (v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($146,$145,$147)) & (v_sep_dotprod_1033_sep_62_sep_4($146,$145,$148)) -> v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0($146,$145).
(($149=0) & (-$150<=0) & (-$146+$150<0)) & (v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0($146,$150)) -> v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($146,$150,$149).
(-$146+$150<0) & (v_sep_dotprod_1033_sep_62_sep_4($146,$150,$151)) -> v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0($146,$150).
($151=0) & ($151-$152=0) -> v_sep_dotprod_1033_sep_62_sep_4($146,$152,$151).


v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1528_sep_95_sep_0: X
.......
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1528_sep_95_sep_0: X
...
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1528_sep_95_sep_0: X
.....
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1528_sep_95_sep_0: X
......
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1528_sep_95_sep_0: X
.......(0=0) & (v_sep_fail_1528_sep_95_sep_0($142)) -> 1=0.
(($142-1=0) & (-$143>0)) & (v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0($144,$143)) -> v_sep_fail_1528_sep_95_sep_0($142).
($145-$146<0) & (v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($146,$145,$147)) & (v_sep_dotprod_1033_sep_62_sep_4($146,$145,$148)) -> v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0($146,$145).
(($149=0) & (-$150<=0) & (-$146+$150<0)) & (v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0($146,$150)) -> v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($146,$150,$149).
(-$146+$150<0) & (v_sep_dotprod_1033_sep_62_sep_4($146,$150,$151)) -> v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0($146,$150).
($151=0) & ($151-$152=0) -> v_sep_dotprod_1033_sep_62_sep_4($146,$152,$151).

        solution:
          P[<<dotprod_1033@62:1>@65:0>]($175:int,$177:int) = true
          P[<<<dotprod_1033@62:1>@65:1>@81:0>]($161:int,$163:int,$165:int) = (0 <= $163)
          P[<<dotprod_1033@62:2>@87:0>]($156:int,$158:int) = (0 <= $158)
          P[<dotprod_1033@62:4>]($168:int,$170:int,$172:int) = true
          P[<fail_1528@95:0>]($153:bool) = false
        
      end HcSolver.solve_ub(7940)[4] (0.014997 sec.)
      begin HcSolver.check_validity(8151)[4]
        input:
          P[<fail_1528@95:0>](<fail_1528@95:0>:bool)|- bot
          
          P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
          ((0 > <k_make_array_u_1204@92:0>) && <fail_1528@95:0>) |- P[<fail_1528@95:0>](
          <fail_1528@95:0>:bool)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var244:int),
          (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
          
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
          ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
          |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                  <<dotprod_1033@62:1>@65:0>:int,
                                                  <<<dotprod_1033@62:1>@65:1>@81:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
          (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
          
           ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
          |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                    <dotprod_1033@62:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(8151)[4] (0.004000 sec.)
      solution:
        P[<<dotprod_1033@62:1>@65:0>]($175:int,$177:int) = true
        P[<<<dotprod_1033@62:1>@65:1>@81:0>]($161:int,$163:int,$165:int) = (0 <= $163)
        P[<<dotprod_1033@62:2>@87:0>]($156:int,$158:int) = (0 <= $158)
        P[<dotprod_1033@62:4>]($168:int,$170:int,$172:int) = true
        P[<fail_1528@95:0>]($153:bool) = false
    end YhornInterface.solve(7939)[3] (0.018997 sec.)
    
  end RefTypeInfer.infer_etrs(5027)[2] (0.203969 sec.)
  refinement types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int -> (v3:{v3:int | (0 <= v2)} -> X) -> X) ->
                  (v6:{v6:int | (0 <= v6)} -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1215: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1519: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1528: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1527: var268:int -> var267:int -> var266:unit -> X
    f_dotprod_1520: var284:int ->
                    var283:int ->
                    var282:int ->
                    var281:int ->
                    (var280:int -> X) ->
                    (var278:int -> (var277:int -> X) -> X) -> (var274:int -> (var273:int -> X) -> X) -> var270:int -> X
    f_dotprod_1521: var301:int ->
                    var300:int ->
                    var299:int ->
                    var298:int ->
                    var297:int ->
                    (var296:int -> X) ->
                    (var294:int -> (var293:int -> X) -> X) -> (var290:int -> (var289:int -> X) -> X) -> var286:int -> X
    f_dotprod_1522: var319:int ->
                    var318:int ->
                    var317:int ->
                    var316:int ->
                    var315:int ->
                    var314:int ->
                    (var313:int -> X) ->
                    (var311:int -> (var310:int -> X) -> X) -> (var307:int -> (var306:int -> X) -> X) -> var303:int -> X
    f_dotprod_1523: var338:int ->
                    var337:int ->
                    var336:int ->
                    var335:int ->
                    var334:int ->
                    var333:int ->
                    var332:int ->
                    (var331:int -> X) ->
                    (var329:int -> (var328:int -> X) -> X) -> (var325:int -> (var324:int -> X) -> X) -> var321:int -> X
    f_main_1524: var345:unit -> var344:int -> var343:int -> (var342:unit -> X) -> var340:int -> X
  abstraction types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int -> (v3:int[v3 -> (0 <= v2)] -> X) -> X) ->
                  (v6:int[v6 -> (0 <= v6)] -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: var346:int -> var347:int -> (var348:int -> X) -> X
    k_make_array_u_1204: var351:int -> var352:int -> (var353:int -> X) -> var355:bool -> X
    k_make_array_u_1215: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1519: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    fail_1528: v1:bool -> (v2:unit -> X) -> X
    f_1527: var268:int -> var267:int -> var266:unit -> X
    f_dotprod_1520: var284:int ->
                    var283:int ->
                    var282:int ->
                    var281:int ->
                    (var280:int -> X) ->
                    (var278:int -> (var277:int -> X) -> X) -> (var274:int -> (var273:int -> X) -> X) -> var270:int -> X
    f_dotprod_1521: var301:int ->
                    var300:int ->
                    var299:int ->
                    var298:int ->
                    var297:int ->
                    (var296:int -> X) ->
                    (var294:int -> (var293:int -> X) -> X) -> (var290:int -> (var289:int -> X) -> X) -> var286:int -> X
    f_dotprod_1522: var319:int ->
                    var318:int ->
                    var317:int ->
                    var316:int ->
                    var315:int ->
                    var314:int ->
                    (var313:int -> X) ->
                    (var311:int -> (var310:int -> X) -> X) -> (var307:int -> (var306:int -> X) -> X) -> var303:int -> X
    f_dotprod_1523: var338:int ->
                    var337:int ->
                    var336:int ->
                    var335:int ->
                    var334:int ->
                    var333:int ->
                    var332:int ->
                    (var331:int -> X) ->
                    (var329:int -> (var328:int -> X) -> X) -> (var325:int -> (var324:int -> X) -> X) -> var321:int -> X
    f_main_1524: var345:unit -> var344:int -> var343:int -> (var342:unit -> X) -> var340:int -> X
  
end AbsTypeInfer.refine(5026)[1] (0.210967 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1518
  main_1518 -> (rand_int f_1525)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      i_1037 >= n_1034) -> (k_dotprod_1266 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036))
  f_1525 x_1472 -> (rand_int (f_1526 x_1472))
  f_1526 x_1472 x_1488 -> (main_1039 x_1472 () x_1488 (f_1527 x_1472 x_1488))
  f_1527 x_1472 x_1488 x_1469 -> end
  f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 ->
      (v2_1036 i_1037 (f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1296) + x_1292)
        (f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 ->
      (v1_1035 i_1037 (f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 ->
      (v2_1036 i_1037
        (f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1350) + x_1346) k_dotprod_1266)
  f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 -> (k_main_1401 ())
  fail_1528 b k -> {fail} => (k ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when b_1216 ->
      (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when (not b_1216) ->
      (fail_1528 true (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198))
  k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 -> (k_make_array_1198 0)
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (z_1042 = 0) ->
      (dotprod_1033 n_1040 (make_array_1030 n_1040) (make_array_1030 n_1040) z_1042 z_1042
        (f_main_1524 m_1041 n_1040 z_1042 k_main_1401))
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (not (z_1042 = 0)) -> (k_main_1401 ())
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (0 <= i_1032) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (not (0 <= i_1032)) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 false)
Types:
  main_1518 : X
  dotprod_1033 : (x_1:int ->
                  (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int[x_3 >= 0] -> X) -> X) ->
                  (x_9:int[x_9 >= 0] -> (int -> X) -> X) -> x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1528 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1518 ... --> 
  f_1525 ... --> 
  f_1526 ... --> 
  main_1039 [1/2] ... --> 
  dotprod_1033 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1204 [1/2] ... --> 
  k_make_array_u_1215 ... --> 
  f_dotprod_1519 ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1204 [2/2] ... --> 
  fail_1528 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(10985)[1]
  program:
    main_1518  | true = ((Random.int 0) f_1525)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    i_1037 >= n_1034) = (k_dotprod_1266 sum_1038)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    not (i_1037 >= n_1034)) = (v1_1035 i_1037
                                       (f_dotprod_1519 i_1037
                                                       n_1034
                                                       sum_1038
                                                       k_dotprod_1266
                                                       v1_1035
                                                       v2_1036))
    f_1525 x_1472 | true = ((Random.int 0) (f_1526 x_1472))
    f_1526 x_1472 x_1488 | true = (main_1039 x_1472
                                             ()
                                             x_1488
                                             (f_1527 x_1472
                                                     x_1488))
    f_1527 x_1472 x_1488 x_1469 | true = end
    f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 | true = (
    v2_1036 i_1037
            (f_dotprod_1520 i_1037
                            n_1034
                            sum_1038
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 | true = (
    dotprod_1033
      n_1034
      v1_1035
      v2_1036
      (i_1037 + 1)
      ((sum_1038 + x_1296) + x_1292)
      (f_dotprod_1521 i_1037
                      n_1034
                      sum_1038
                      x_1292
                      x_1296
                      k_dotprod_1266
                      v1_1035
                      v2_1036))
    f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 | true = (
    v1_1035 i_1037
            (f_dotprod_1522 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 | true = (
    v2_1036 i_1037
            (f_dotprod_1523 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            x_1350
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 | true = (
    dotprod_1033 n_1034
                 v1_1035
                 v2_1036
                 (i_1037 + 1)
                 ((sum_1038 + x_1350) + x_1346)
                 k_dotprod_1266)
    f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 | true = (k_main_1401 ())
    fail_1528 b k | true = (fail ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | b_1216 = (
    k_make_array_u_1215 i_1032
                        n_1031
                        k_make_array_1198
                        ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | (not b_1216) = (
    fail_1528 true
              (k_make_array_u_1215 i_1032
                                   n_1031
                                   k_make_array_1198))
    k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 | true = (
    k_make_array_1198 0)
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (z_1042 = 0) = (dotprod_1033
                                                                   n_1040
                                                                   (make_array_1030 n_1040)
                                                                   (make_array_1030 n_1040)
                                                                   z_1042
                                                                   z_1042
                                                                   (f_main_1524 m_1041
                                                                    n_1040
                                                                    z_1042
                                                                    k_main_1401))
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (not (z_1042 = 0)) = (
    k_main_1401 ())
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (0 <= i_1032) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (not (0 <= i_1032)) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        false)
    main_1518:X
    dotprod_1033:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1525:int -> X
    f_1526:int -> int -> X
    f_1527:int -> int -> unit -> X
    f_dotprod_1519:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1520:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1521:int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1522:int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1523:int ->
                   int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1524:unit -> int -> int -> (unit -> X) -> int -> X
    fail_1528:bool -> (unit -> X) -> X
    k_make_array_u_1204:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1215:int -> int -> (int -> X) -> unit -> X
    main_1039:int -> unit -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1525,f_1526,f_1527,f_dotprod_1519,f_dotprod_1520,f_dotprod_1521,f_dotprod_1522,f_dotprod_1523,f_main_1524,k_make_array_u_1204,k_make_array_u_1215,main_1039,make_array_1030
  counterexample: 0:0:0:0:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1525@101:0> = var357)
     [true.nop((<f_1526@104:0> = <f_1525@101:0>) && (<f_1526@104:1> = var358))
      [true.
       ((<main_1039@106:0> = <f_1526@104:0>) && ((<main_1039@106:1> = ()) && (<main_1039@106:2> = <f_1526@104:1>)))
       [(<main_1039@106:2> = 0).
        ((<dotprod_1033@109:0> = <main_1039@106:0>) &&
         ((<dotprod_1033@109:3> = <main_1039@106:2>) && (<dotprod_1033@109:4> = <main_1039@106:2>)))
        [(not (<dotprod_1033@109:3> >= <dotprod_1033@109:0>)).(<<dotprod_1033@109:1>@112:0> = <dotprod_1033@109:3>)
         [true.
          ((<make_array_1030@114:0> = <main_1039@106:0>) && (<make_array_1030@114:1> = <<dotprod_1033@109:1>@112:0>))
          [(0 <= <make_array_1030@114:1>).
           ((<k_make_array_u_1204@117:0> = <make_array_1030@114:1>) &&
            ((<k_make_array_u_1204@117:1> = <make_array_1030@114:0>) &&
             (<k_make_array_u_1204@117:3> = (<make_array_1030@114:1> < <make_array_1030@114:0>))))
           [<k_make_array_u_1204@117:3>.
            ((<k_make_array_u_1215@120:0> = <k_make_array_u_1204@117:0>) &&
             ((<k_make_array_u_1215@120:1> = <k_make_array_u_1204@117:1>) && (<k_make_array_u_1215@120:3> = ())))
            [true.(<<k_make_array_u_1215@120:2>@122:0> = 0)
             [true.(<<k_make_array_u_1204@117:2>@124:0> = <<k_make_array_u_1215@120:2>@122:0>)
              [true.(<<make_array_1030@114:2>@126:0> = <<k_make_array_u_1204@117:2>@124:0>)
               [true.(<<<dotprod_1033@109:1>@112:1>@128:0> = <<make_array_1030@114:2>@126:0>)
                [true.
                 ((<f_dotprod_1519@130:0> = <dotprod_1033@109:3>) &&
                  ((<f_dotprod_1519@130:1> = <dotprod_1033@109:0>) &&
                   ((<f_dotprod_1519@130:2> = <dotprod_1033@109:4>) &&
                    (<f_dotprod_1519@130:6> = <<<dotprod_1033@109:1>@112:1>@128:0>))))
                 [true.(<<f_dotprod_1519@130:5>@132:0> = <f_dotprod_1519@130:0>)
                  [true.(<<dotprod_1033@109:2>@134:0> = <<f_dotprod_1519@130:5>@132:0>)
                   [true.
                    ((<make_array_1030@136:0> = <main_1039@106:0>) &&
                     (<make_array_1030@136:1> = <<dotprod_1033@109:2>@134:0>))
                    [(0 <= <make_array_1030@136:1>).
                     ((<k_make_array_u_1204@139:0> = <make_array_1030@136:1>) &&
                      ((<k_make_array_u_1204@139:1> = <make_array_1030@136:0>) &&
                       (<k_make_array_u_1204@139:3> = (<make_array_1030@136:1> < <make_array_1030@136:0>))))
                     [(not <k_make_array_u_1204@139:3>).(<fail_1528@142:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(10986)[2]
    horn clauses:
      P[<fail_1528@142:0>](<fail_1528@142:0>:bool)|- bot
      
      P[<k_make_array_u_1204@139:3>](<k_make_array_u_1204@139:0>:int,<k_make_array_u_1204@139:1>:int,false:bool),
      <fail_1528@142:0> |- P[<fail_1528@142:0>](<fail_1528@142:0>:bool)
      
      P[<make_array_1030@136:1>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
      ((0 <= <k_make_array_u_1204@139:0>) &&
       (<k_make_array_u_1204@139:3> = (<k_make_array_u_1204@139:0> < <k_make_array_u_1204@139:1>)))
      |- P[<k_make_array_u_1204@139:3>](<k_make_array_u_1204@139:0>:int,
                                        <k_make_array_u_1204@139:1>:int,
                                        <k_make_array_u_1204@139:3>:bool)
      
      P[<main_1039@106:2>](<make_array_1030@136:0>:int,<main_1039@106:1>:unit,0:int),
      P[<<dotprod_1033@109:2>@134:0>](<make_array_1030@136:0>:int,<make_array_1030@136:1>:int)|- P[<make_array_1030@136:1>](
      <make_array_1030@136:0>:int,<make_array_1030@136:1>:int)
      
      P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<f_dotprod_1519@130:2>:int),
      P[<<f_dotprod_1519@130:5>@132:0>](<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:0>:int,<f_dotprod_1519@130:2>:int,<<dotprod_1033@109:2>@134:0>:int),
      (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
      |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int)
      
      P[<f_dotprod_1519@130:6>](<f_dotprod_1519@130:0>:int,<f_dotprod_1519@130:1>:int,<f_dotprod_1519@130:2>:int,<f_dotprod_1519@130:6>:int),
      (<<f_dotprod_1519@130:5>@132:0> = <f_dotprod_1519@130:0>)
      |- P[<<f_dotprod_1519@130:5>@132:0>](<f_dotprod_1519@130:0>:int,
                                           <f_dotprod_1519@130:1>:int,
                                           <f_dotprod_1519@130:2>:int,
                                           <<f_dotprod_1519@130:5>@132:0>:int)
      
      P[<dotprod_1033@109:4>](<f_dotprod_1519@130:1>:int,<f_dotprod_1519@130:0>:int,<f_dotprod_1519@130:2>:int),
      P[<<<dotprod_1033@109:1>@112:1>@128:0>](<f_dotprod_1519@130:1>:int,<f_dotprod_1519@130:0>:int,<f_dotprod_1519@130:6>:int),
      (<f_dotprod_1519@130:0> < <f_dotprod_1519@130:1>)
      |- P[<f_dotprod_1519@130:6>](<f_dotprod_1519@130:0>:int,<f_dotprod_1519@130:1>:int,
                                   <f_dotprod_1519@130:2>:int,<f_dotprod_1519@130:6>:int)
      
      P[<main_1039@106:2>](<dotprod_1033@109:0>:int,<main_1039@106:1>:unit,0:int),
      P[<<make_array_1030@114:2>@126:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int)|- P[<<<dotprod_1033@109:1>@112:1>@128:0>](
      <dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int)
      
      P[<make_array_1030@114:1>](<make_array_1030@114:0>:int,<make_array_1030@114:1>:int),
      P[<<k_make_array_u_1204@117:2>@124:0>](<make_array_1030@114:1>:int,<make_array_1030@114:0>:int,<<make_array_1030@114:2>@126:0>:int),
      (0 <= <make_array_1030@114:1>)
      |- P[<<make_array_1030@114:2>@126:0>](<make_array_1030@114:0>:int,
                                            <make_array_1030@114:1>:int,
                                            <<make_array_1030@114:2>@126:0>:int)
      
      P[<k_make_array_u_1204@117:3>](<k_make_array_u_1204@117:0>:int,<k_make_array_u_1204@117:1>:int,true:bool),
      P[<<k_make_array_u_1215@120:2>@122:0>](<k_make_array_u_1204@117:0>:int,<k_make_array_u_1204@117:1>:int,<<k_make_array_u_1204@117:2>@124:0>:int)|- P[<<k_make_array_u_1204@117:2>@124:0>](
      <k_make_array_u_1204@117:0>:int,<k_make_array_u_1204@117:1>:int,
      <<k_make_array_u_1204@117:2>@124:0>:int)
      
      P[<k_make_array_u_1215@120:3>](<k_make_array_u_1215@120:0>:int,<k_make_array_u_1215@120:1>:int,<k_make_array_u_1215@120:3>:unit),
      (<<k_make_array_u_1215@120:2>@122:0> = 0)
      |- P[<<k_make_array_u_1215@120:2>@122:0>](<k_make_array_u_1215@120:0>:int,
                                                <k_make_array_u_1215@120:1>:int,
                                                <<k_make_array_u_1215@120:2>@122:0>:int)
      
      P[<k_make_array_u_1204@117:3>](<k_make_array_u_1215@120:0>:int,<k_make_array_u_1215@120:1>:int,true:bool)|- P[<k_make_array_u_1215@120:3>](
      <k_make_array_u_1215@120:0>:int,<k_make_array_u_1215@120:1>:int,
      <k_make_array_u_1215@120:3>:unit)
      
      P[<make_array_1030@114:1>](<k_make_array_u_1204@117:1>:int,<k_make_array_u_1204@117:0>:int),
      ((0 <= <k_make_array_u_1204@117:0>) &&
       (<k_make_array_u_1204@117:3> = (<k_make_array_u_1204@117:0> < <k_make_array_u_1204@117:1>)))
      |- P[<k_make_array_u_1204@117:3>](<k_make_array_u_1204@117:0>:int,
                                        <k_make_array_u_1204@117:1>:int,
                                        <k_make_array_u_1204@117:3>:bool)
      
      P[<main_1039@106:2>](<make_array_1030@114:0>:int,<main_1039@106:1>:unit,0:int),
      P[<<dotprod_1033@109:1>@112:0>](<make_array_1030@114:0>:int,<make_array_1030@114:1>:int)|- P[<make_array_1030@114:1>](
      <make_array_1030@114:0>:int,<make_array_1030@114:1>:int)
      
      P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
      (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
      |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
      
      P[<main_1039@106:2>](<dotprod_1033@109:0>:int,<main_1039@106:1>:unit,<dotprod_1033@109:4>:int),
      ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
      |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                 <dotprod_1033@109:4>:int)
      
      P[<f_1526@104:1>](<main_1039@106:0>:int,<main_1039@106:2>:int)|- P[<main_1039@106:2>](
      <main_1039@106:0>:int,<main_1039@106:1>:unit,<main_1039@106:2>:int)
      
      P[<f_1525@101:0>](<f_1526@104:0>:int)|- P[<f_1526@104:1>](<f_1526@104:0>:int,
                                                                <f_1526@104:1>:int)
      
      |- P[<f_1525@101:0>](<f_1525@101:0>:int)
    call trees:
      <main_1518@98>
        <f_1525@101>
          <f_1526@104>
            <main_1039@106>
              <dotprod_1033@109>
              </<dotprod_1033@109:1>@112>
              <make_array_1030@114>
                <k_make_array_u_1204@117>
                  <k_make_array_u_1215@120>
                  </<k_make_array_u_1215@120:2>@122>
                </<k_make_array_u_1204@117:2>@124>
              </<make_array_1030@114:2>@126>
              <<<dotprod_1033@109:1>@112:1>@128>
                <f_dotprod_1519@130>
                </<f_dotprod_1519@130:5>@132>
              </<dotprod_1033@109:2>@134>
              <make_array_1030@136>
                <k_make_array_u_1204@139>
                  <fail_1528@142>
    inlined horn clauses:
      P[<fail_1528@142:0>](<fail_1528@142:0>:bool)|- bot
      
      P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
      ((0 <= <k_make_array_u_1204@139:0>) &&
       ((<k_make_array_u_1204@139:0> >= <k_make_array_u_1204@139:1>) && <fail_1528@142:0>))
      |- P[<fail_1528@142:0>](<fail_1528@142:0>:bool)
      
      P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1519@130:2>:int),
      P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var359:int),
      (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
      |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int)
      
      P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
      ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
       ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
      |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                 <<dotprod_1033@109:1>@112:0>:int,
                                                 <<<dotprod_1033@109:1>@112:1>@128:0>:int)
      
      P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
      (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
      |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
      
       ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
      |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                 <dotprod_1033@109:4>:int)
    begin ParamSubstInfer.infer(13815)[3]
      
    end ParamSubstInfer.infer(13815)[3] (0.471928 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(13817)[3]
      
    end RefTypeInfer.elim_coeffs(13817)[3] (0.001000 sec.)
    begin YhornInterface.solve(14183)[3]
      begin HcSolver.solve_ub(14184)[4]
        encoded:
          P[<fail_1528@142:0>](<fail_1528@142:0>:int)|- bot
          
          P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
          ((0 <= <k_make_array_u_1204@139:0>) &&
           ((<k_make_array_u_1204@139:0> >= <k_make_array_u_1204@139:1>) && (<fail_1528@142:0> = 1)))
          |- P[<fail_1528@142:0>](<fail_1528@142:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1519@130:2>:int),
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var359:int),
          (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:2>@134:0>:int)
          
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
          ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
           ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
          |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                     <<dotprod_1033@109:1>@112:0>:int,
                                                     <<<dotprod_1033@109:1>@112:1>@128:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
          (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:1>@112:0>:int)
          
           ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
          |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                     <dotprod_1033@109:4>:int)
        input to Yhorn:
          P[<fail_1528@142:0>](<fail_1528@142:0>:int)|- bot
          
          P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
          ((<k_make_array_u_1204@139:0> >= <k_make_array_u_1204@139:1>) &&
           ((0 <= <k_make_array_u_1204@139:0>) && (<fail_1528@142:0> = 1)))
          |- P[<fail_1528@142:0>](<fail_1528@142:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1519@130:2>:int),
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var359:int),
          (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:2>@134:0>:int)
          
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
          ((<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>) &&
           ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<<dotprod_1033@109:1>@112:1>@128:0> = 0)))
          |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                     <<dotprod_1033@109:1>@112:0>:int,
                                                     <<<dotprod_1033@109:1>@112:1>@128:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
          (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:1>@112:0>:int)
          
           ((<dotprod_1033@109:4> = <dotprod_1033@109:3>) && (<dotprod_1033@109:4> = 0))
          |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                     <dotprod_1033@109:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1528_sep_142_sep_0($251)) -> 1=0.
(($251-1=0) & (-$252<=0) & ($252-$253>=0)) & (v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0($253,$252)) -> v_sep_fail_1528_sep_142_sep_0($251).
($254-$255<0) & (v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0($255,$254,$256)) & (v_sep_dotprod_1033_sep_109_sep_4($255,$254,$257)) -> v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0($255,$254).
(($258=0) & (-$259<=0) & (-$255+$259<0)) & (v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0($255,$259)) -> v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0($255,$259,$258).
(-$255+$259<0) & (v_sep_dotprod_1033_sep_109_sep_4($255,$259,$260)) -> v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0($255,$259).
($260=0) & ($260-$261=0) -> v_sep_dotprod_1033_sep_109_sep_4($255,$261,$260).


v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1528_sep_142_sep_0: X
.......
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1528_sep_142_sep_0: X
...
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1528_sep_142_sep_0: X
.....
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1528_sep_142_sep_0: X
......
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1528_sep_142_sep_0: X
.......(0=0) & (v_sep_fail_1528_sep_142_sep_0($251)) -> 1=0.
(($251-1=0) & (-$252<=0) & ($252-$253>=0)) & (v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0($253,$252)) -> v_sep_fail_1528_sep_142_sep_0($251).
($254-$255<0) & (v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0($255,$254,$256)) & (v_sep_dotprod_1033_sep_109_sep_4($255,$254,$257)) -> v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0($255,$254).
(($258=0) & (-$259<=0) & (-$255+$259<0)) & (v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0($255,$259)) -> v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0($255,$259,$258).
(-$255+$259<0) & (v_sep_dotprod_1033_sep_109_sep_4($255,$259,$260)) -> v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0($255,$259).
($260=0) & ($260-$261=0) -> v_sep_dotprod_1033_sep_109_sep_4($255,$261,$260).

        solution:
          P[<<dotprod_1033@109:1>@112:0>]($284:int,$286:int) = true
          P[<<<dotprod_1033@109:1>@112:1>@128:0>]($270:int,$272:int,$274:int) = true
          P[<<dotprod_1033@109:2>@134:0>]($265:int,$267:int) = ((1 + $267) <= $265)
          P[<dotprod_1033@109:4>]($277:int,$279:int,$281:int) = true
          P[<fail_1528@142:0>]($262:bool) = false
        
      end HcSolver.solve_ub(14184)[4] (0.018997 sec.)
      begin HcSolver.check_validity(14443)[4]
        input:
          P[<fail_1528@142:0>](<fail_1528@142:0>:bool)|- bot
          
          P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
          ((0 <= <k_make_array_u_1204@139:0>) &&
           ((<k_make_array_u_1204@139:0> >= <k_make_array_u_1204@139:1>) && <fail_1528@142:0>))
          |- P[<fail_1528@142:0>](<fail_1528@142:0>:bool)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1519@130:2>:int),
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var359:int),
          (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:2>@134:0>:int)
          
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
          ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
           ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
          |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                     <<dotprod_1033@109:1>@112:0>:int,
                                                     <<<dotprod_1033@109:1>@112:1>@128:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
          (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:1>@112:0>:int)
          
           ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
          |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                     <dotprod_1033@109:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(14443)[4] (0.001999 sec.)
      solution:
        P[<<dotprod_1033@109:1>@112:0>]($284:int,$286:int) = true
        P[<<<dotprod_1033@109:1>@112:1>@128:0>]($270:int,$272:int,$274:int) = true
        P[<<dotprod_1033@109:2>@134:0>]($265:int,$267:int) = ((1 + $267) <= $265)
        P[<dotprod_1033@109:4>]($277:int,$279:int,$281:int) = true
        P[<fail_1528@142:0>]($262:bool) = false
    end YhornInterface.solve(14183)[3] (0.021996 sec.)
    
  end RefTypeInfer.infer_etrs(10986)[2] (0.511921 sec.)
  refinement types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int -> (v3:int -> X) -> X) ->
                  (v6:{v6:int | ((1 + v6) <= v1)} -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1215: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1519: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1528: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1527: var383:int -> var382:int -> var381:unit -> X
    f_dotprod_1520: var399:int ->
                    var398:int ->
                    var397:int ->
                    var396:int ->
                    (var395:int -> X) ->
                    (var393:int -> (var392:int -> X) -> X) -> (var389:int -> (var388:int -> X) -> X) -> var385:int -> X
    f_dotprod_1521: var416:int ->
                    var415:int ->
                    var414:int ->
                    var413:int ->
                    var412:int ->
                    (var411:int -> X) ->
                    (var409:int -> (var408:int -> X) -> X) -> (var405:int -> (var404:int -> X) -> X) -> var401:int -> X
    f_dotprod_1522: var434:int ->
                    var433:int ->
                    var432:int ->
                    var431:int ->
                    var430:int ->
                    var429:int ->
                    (var428:int -> X) ->
                    (var426:int -> (var425:int -> X) -> X) -> (var422:int -> (var421:int -> X) -> X) -> var418:int -> X
    f_dotprod_1523: var453:int ->
                    var452:int ->
                    var451:int ->
                    var450:int ->
                    var449:int ->
                    var448:int ->
                    var447:int ->
                    (var446:int -> X) ->
                    (var444:int -> (var443:int -> X) -> X) -> (var440:int -> (var439:int -> X) -> X) -> var436:int -> X
    f_main_1524: var460:unit -> var459:int -> var458:int -> (var457:unit -> X) -> var455:int -> X
  abstraction types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int -> (v3:int -> X) -> X) ->
                  (v6:int[v6 -> ((1 + v6) <= v1)] -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: var461:int -> var462:int -> (var463:int -> X) -> X
    k_make_array_u_1204: var466:int -> var467:int -> (var468:int -> X) -> var470:bool -> X
    k_make_array_u_1215: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1519: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    fail_1528: v1:bool -> (v2:unit -> X) -> X
    f_1527: var383:int -> var382:int -> var381:unit -> X
    f_dotprod_1520: var399:int ->
                    var398:int ->
                    var397:int ->
                    var396:int ->
                    (var395:int -> X) ->
                    (var393:int -> (var392:int -> X) -> X) -> (var389:int -> (var388:int -> X) -> X) -> var385:int -> X
    f_dotprod_1521: var416:int ->
                    var415:int ->
                    var414:int ->
                    var413:int ->
                    var412:int ->
                    (var411:int -> X) ->
                    (var409:int -> (var408:int -> X) -> X) -> (var405:int -> (var404:int -> X) -> X) -> var401:int -> X
    f_dotprod_1522: var434:int ->
                    var433:int ->
                    var432:int ->
                    var431:int ->
                    var430:int ->
                    var429:int ->
                    (var428:int -> X) ->
                    (var426:int -> (var425:int -> X) -> X) -> (var422:int -> (var421:int -> X) -> X) -> var418:int -> X
    f_dotprod_1523: var453:int ->
                    var452:int ->
                    var451:int ->
                    var450:int ->
                    var449:int ->
                    var448:int ->
                    var447:int ->
                    (var446:int -> X) ->
                    (var444:int -> (var443:int -> X) -> X) -> (var440:int -> (var439:int -> X) -> X) -> var436:int -> X
    f_main_1524: var460:unit -> var459:int -> var458:int -> (var457:unit -> X) -> var455:int -> X
  
end AbsTypeInfer.refine(10985)[1] (0.519921 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1518
  main_1518 -> (rand_int f_1525)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      i_1037 >= n_1034) -> (k_dotprod_1266 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036))
  f_1525 x_1472 -> (rand_int (f_1526 x_1472))
  f_1526 x_1472 x_1488 -> (main_1039 x_1472 () x_1488 (f_1527 x_1472 x_1488))
  f_1527 x_1472 x_1488 x_1469 -> end
  f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 ->
      (v2_1036 i_1037 (f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1296) + x_1292)
        (f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 ->
      (v1_1035 i_1037 (f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 ->
      (v2_1036 i_1037
        (f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1350) + x_1346) k_dotprod_1266)
  f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 -> (k_main_1401 ())
  fail_1528 b k -> {fail} => (k ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when b_1216 ->
      (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when (not b_1216) ->
      (fail_1528 true (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198))
  k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 -> (k_make_array_1198 0)
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (z_1042 = 0) ->
      (dotprod_1033 n_1040 (make_array_1030 n_1040) (make_array_1030 n_1040) z_1042 z_1042
        (f_main_1524 m_1041 n_1040 z_1042 k_main_1401))
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (not (z_1042 = 0)) -> (k_main_1401 ())
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (0 <= i_1032) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (not (0 <= i_1032)) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 false)
Types:
  main_1518 : X
  dotprod_1033 : (x_1:int ->
                  (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int[x_3 >= 0] -> X) -> X) ->
                  (x_9:int[x_1 >= x_9 + 1; x_9 >= 0] -> (int -> X) -> X) ->
                  x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1528 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  dotprod: (x_1:int ->
                (({x_9:int | x_9 >= 0 && x_1 >= x_9 + 1} -> int) ->
                     (({x_7:int | x_7 >= 0 && x_1 >= x_7 + 1} -> int) -> (x_4:int -> ({x_5:int | x_4 >= 0} -> int)))))

cycles: 4
total: 1.933 sec
  abst: 0.097 sec
  mc: 0.073 sec
  refine: 0.923 sec
    exparam: 0.741 sec
