MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi inc4.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 des_1036 x_1037 =
   let u_1097 = des_1036 i_1034 
   in
   let a_1038 j_1039 = if i_1034 = j_1039 then
                         x_1037
                       else
                         des_1036 i_1034 
   in
     a_1038 
 in
 let rec inc3_1040 m_1041 a_1042 i_1043 =
   if i_1043 >= m_1041 then
     ()
   else
     let a_1044 = update_1033 i_1043 m_1041 a_1042 (a_1042 i_1043 + 1) 
     in
       inc3_1040 m_1041 a_1044 (i_1043 + 1) 
 in
 let main_1045 n_1046 i_1047 =
   if i_1047 = 0 && n_1046 > 0 then
     inc3_1040 n_1046 (make_array_1030 n_1046) i_1047
   else
     () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 des_1036 x_1037 =
   let u_1097 = des_1036 i_1034 
   in
   let a_1038 j_1039 = if i_1034 = j_1039 then
                         x_1037
                       else
                         des_1036 i_1034 
   in
     a_1038 
 in
 let rec inc3_1040 m_1041 a_1042 i_1043 =
   if i_1043 >= m_1041 then
     ()
   else
     let a_1044 = update_1033 i_1043 m_1041 a_1042 (a_1042 i_1043 + 1) 
     in
       inc3_1040 m_1041 a_1044 (i_1043 + 1) 
 in
 let main_1045 n_1046 i_1047 =
   if i_1047 = 0 && n_1046 > 0 then
     inc3_1040 n_1046 (make_array_1030 n_1046) i_1047
   else
     () 
 in
 let main_1163 = let arg1_1161 = rand_int () 
                 in
                 let arg2_1162 = rand_int () 
                 in
                   main_1045 arg1_1161 arg2_1162 
 in
   ()

copy_poly::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let update_1164 (i_1034:int) (n_1035:int) (des_1036:(int -> int)) (x_1037:int) =
   let u_1097 = des_1036 i_1034 
   in
   let a_1038 (j_1039:int) = if i_1034 = j_1039 then
                               x_1037
                             else
                               des_1036 i_1034 
   in
     a_1038 
 in
 let rec inc3_1040 (m_1041:int) (a_1042:(int -> int)) (i_1043:int) =
   if i_1043 >= m_1041 then
     ()
   else
     let a_1044 = update_1164 i_1043 m_1041 a_1042 (a_1042 i_1043 + 1) 
     in
       inc3_1040 m_1041 a_1044 (i_1043 + 1) 
 in
 let main_1045 (n_1046:int) (i_1047:int) =
   if i_1047 = 0 && n_1046 > 0 then
     inc3_1040 n_1046 (make_array_1030 n_1046) i_1047
   else
     () 
 in
 let main_1163 = let arg1_1161 = rand_int () 
                 in
                 let arg2_1162 = rand_int () 
                 in
                   main_1045 arg1_1161 arg2_1162 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1192:(int -> X)) =
   let k_make_array_u_1209 (x_1195:unit) = k_make_array_1192 0 
   in
   let k_make_array_u_1198 (b_1210:bool) =
     if b_1210 then
       k_make_array_u_1209 ()
     else
       {|fail|} () k_make_array_u_1209 
   in
     if 0 <= i_1032 then
       k_make_array_u_1198 (i_1032 < n_1031)
     else
       k_make_array_u_1198 false 
 in
 let update_1164
   (i_1034:int) (n_1035:int) (des_1036:(int -> ((int -> X) -> X))) (x_1037:int) (k_update_1257:(
   (int -> ((int -> X) -> X)) -> X)) =
   des_1036 i_1034
     (fun x_1263 ->
        k_update_1257
          (let a_1038 (j_1039:int) (k_update_a_1278:(int -> X)) =
             if i_1034 = j_1039 then
               k_update_a_1278 x_1037
             else
               des_1036 i_1034 k_update_a_1278 
           in
             a_1038)) 
 in
 let rec inc3_1040 (m_1041:int) (a_1042:(int -> ((int -> X) -> X))) (i_1043:int) (k_inc3_1327:(
   unit -> X)) =
   if i_1043 >= m_1041 then
     k_inc3_1327 ()
   else
     a_1042 i_1043
       (fun x_1357 ->
          update_1164 i_1043 m_1041 a_1042 (x_1357 + 1)
            (fun x_1333 -> inc3_1040 m_1041 x_1333 (i_1043 + 1) k_inc3_1327)) 
 in
 let main_1045 (n_1046:int) (i_1047:int) (k_main_1420:(unit -> X)) =
   let k_main_1423 (b_1447:bool) =
     if b_1447 then
       inc3_1040 n_1046 (make_array_1030 n_1046) i_1047 k_main_1420
     else
       k_main_1420 () 
   in
     if i_1047 = 0 then
       k_main_1423 (n_1046 > 0)
     else
       k_main_1423 false 
 in
   rand_int_cps () (fun x_1453 -> rand_int_cps () (fun x_1466 -> main_1045 x_1453 x_1466 (fun x_1450 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1495
  main_1495 -> (rand_int f_1499)
  a_1038 i_1034 n_1035 x_1037 x_1263 des_1036 j_1039 k_update_a_1278 when (i_1034 = j_1039) -> (k_update_a_1278 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1263 des_1036 j_1039 k_update_a_1278 when (
      not (i_1034 = j_1039)) -> (des_1036 i_1034 k_update_a_1278)
  f_1499 x_1453 -> (rand_int (f_1500 x_1453))
  f_1500 x_1453 x_1466 -> (main_1045 x_1453 x_1466 (f_1501 x_1453 x_1466))
  f_1501 x_1453 x_1466 x_1450 -> end
  f_inc3_1497 i_1043 m_1041 a_1042 k_inc3_1327 x_1357 ->
      (update_1164 i_1043 m_1041 a_1042 (x_1357 + 1) (f_inc3_1498 i_1043 m_1041 x_1357 k_inc3_1327))
  f_inc3_1498 i_1043 m_1041 x_1357 k_inc3_1327 x_1333 -> (inc3_1040 m_1041 x_1333 (i_1043 + 1) k_inc3_1327)
  f_update_1496 i_1034 n_1035 x_1037 des_1036 k_update_1257 x_1263 ->
      (k_update_1257 (a_1038 i_1034 n_1035 x_1037 x_1263 des_1036))
  fail_1502 b k -> {fail} => (k ())
  inc3_1040 m_1041 a_1042 i_1043 k_inc3_1327 when (i_1043 >= m_1041) -> (k_inc3_1327 ())
  inc3_1040 m_1041 a_1042 i_1043 k_inc3_1327 when (not (i_1043 >= m_1041)) ->
      (a_1042 i_1043 (f_inc3_1497 i_1043 m_1041 a_1042 k_inc3_1327))
  k_main_1423 i_1047 n_1046 k_main_1420 b_1447 when b_1447 ->
      (inc3_1040 n_1046 (make_array_1030 n_1046) i_1047 k_main_1420)
  k_main_1423 i_1047 n_1046 k_main_1420 b_1447 when (not b_1447) -> (k_main_1420 ())
  k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 b_1210 when b_1210 ->
      (k_make_array_u_1209 i_1032 n_1031 k_make_array_1192 ())
  k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 b_1210 when (not b_1210) ->
      (fail_1502 true (k_make_array_u_1209 i_1032 n_1031 k_make_array_1192))
  k_make_array_u_1209 i_1032 n_1031 k_make_array_1192 x_1195 -> (k_make_array_1192 0)
  main_1045 n_1046 i_1047 k_main_1420 when (i_1047 = 0) -> (k_main_1423 i_1047 n_1046 k_main_1420 (n_1046 > 0))
  main_1045 n_1046 i_1047 k_main_1420 when (not (i_1047 = 0)) -> (k_main_1423 i_1047 n_1046 k_main_1420 false)
  make_array_1030 n_1031 i_1032 k_make_array_1192 when (0 <= i_1032) ->
      (k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1192 when (not (0 <= i_1032)) ->
      (k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 false)
  update_1164 i_1034 n_1035 des_1036 x_1037 k_update_1257 ->
      (des_1036 i_1034 (f_update_1496 i_1034 n_1035 x_1037 des_1036 k_update_1257))
Types:
  main_1495 : X
  fail_1502 : (x_1:bool[x_1] -> (unit -> X) -> X)
  inc3_1040 : (int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1495 ... --> 
  f_1499 ... --> 
  f_1500 ... --> 
  main_1045 [1/2] ... --> 
  k_main_1423 [1/2] ... --> 
  inc3_1040 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1198 [2/2] ... --> 
  fail_1502 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(185)[1]
  program:
    main_1495  | true = ((Random.int 0) f_1499)
    a_1038 i_1034 n_1035 x_1037 x_1263 des_1036 j_1039 k_update_a_1278 | (
    i_1034 = j_1039) = (k_update_a_1278 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1263 des_1036 j_1039 k_update_a_1278 | (
    not (i_1034 = j_1039)) = (des_1036 i_1034
                                       k_update_a_1278)
    f_1499 x_1453 | true = ((Random.int 0) (f_1500 x_1453))
    f_1500 x_1453 x_1466 | true = (main_1045 x_1453
                                             x_1466
                                             (f_1501 x_1453
                                                     x_1466))
    f_1501 x_1453 x_1466 x_1450 | true = end
    f_inc3_1497 i_1043 m_1041 a_1042 k_inc3_1327 x_1357 | true = (update_1164
                                                                    i_1043
                                                                    m_1041
                                                                    a_1042
                                                                    (
                                                                    x_1357 + 1)
                                                                    (
                                                                    f_inc3_1498 i_1043
                                                                    m_1041
                                                                    x_1357
                                                                    k_inc3_1327))
    f_inc3_1498 i_1043 m_1041 x_1357 k_inc3_1327 x_1333 | true = (inc3_1040 m_1041
                                                                    x_1333
                                                                    (i_1043 + 1)
                                                                    k_inc3_1327)
    f_update_1496 i_1034 n_1035 x_1037 des_1036 k_update_1257 x_1263 | true = (
    k_update_1257 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1263
                          des_1036))
    fail_1502 b k | true = (fail ())
    inc3_1040 m_1041 a_1042 i_1043 k_inc3_1327 | (i_1043 >= m_1041) = (
    k_inc3_1327 ())
    inc3_1040 m_1041 a_1042 i_1043 k_inc3_1327 | (not (i_1043 >= m_1041)) = (
    a_1042 i_1043
           (f_inc3_1497 i_1043
                        m_1041
                        a_1042
                        k_inc3_1327))
    k_main_1423 i_1047 n_1046 k_main_1420 b_1447 | b_1447 = (inc3_1040
                                                               n_1046
                                                               (make_array_1030 n_1046)
                                                               i_1047
                                                               k_main_1420)
    k_main_1423 i_1047 n_1046 k_main_1420 b_1447 | (not b_1447) = (k_main_1420 ())
    k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 b_1210 | b_1210 = (
    k_make_array_u_1209 i_1032
                        n_1031
                        k_make_array_1192
                        ())
    k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 b_1210 | (not b_1210) = (
    fail_1502 true
              (k_make_array_u_1209 i_1032
                                   n_1031
                                   k_make_array_1192))
    k_make_array_u_1209 i_1032 n_1031 k_make_array_1192 x_1195 | true = (
    k_make_array_1192 0)
    main_1045 n_1046 i_1047 k_main_1420 | (i_1047 = 0) = (k_main_1423 i_1047
                                                                    n_1046
                                                                    k_main_1420
                                                                    (n_1046 > 0))
    main_1045 n_1046 i_1047 k_main_1420 | (not (i_1047 = 0)) = (k_main_1423 i_1047
                                                                    n_1046
                                                                    k_main_1420
                                                                    false)
    make_array_1030 n_1031 i_1032 k_make_array_1192 | (0 <= i_1032) = (
    k_make_array_u_1198 i_1032
                        n_1031
                        k_make_array_1192
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1192 | (not (0 <= i_1032)) = (
    k_make_array_u_1198 i_1032
                        n_1031
                        k_make_array_1192
                        false)
    update_1164 i_1034 n_1035 des_1036 x_1037 k_update_1257 | true = (
    des_1036 i_1034
             (f_update_1496 i_1034
                            n_1035
                            x_1037
                            des_1036
                            k_update_1257))
    main_1495:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_1499:int -> X
    f_1500:int -> int -> X
    f_1501:int -> int -> unit -> X
    f_inc3_1497:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> int -> X
    f_inc3_1498:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> X
    f_update_1496:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1502:bool -> (unit -> X) -> X
    inc3_1040:int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    k_main_1423:int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1198:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1209:int -> int -> (int -> X) -> unit -> X
    main_1045:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1164:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1499,f_1500,f_1501,f_inc3_1497,f_inc3_1498,f_update_1496,k_main_1423,k_make_array_u_1198,k_make_array_u_1209,main_1045,make_array_1030,update_1164
  counterexample: 0:0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1499@4:0> = var2)
     [true.nop((<f_1500@7:0> = <f_1499@4:0>) && (<f_1500@7:1> = var3))
      [true.((<main_1045@9:0> = <f_1500@7:0>) && (<main_1045@9:1> = <f_1500@7:1>))
       [(<main_1045@9:1> = 0).
        ((<k_main_1423@12:0> = <main_1045@9:1>) &&
         ((<k_main_1423@12:1> = <main_1045@9:0>) && (<k_main_1423@12:3> = (<main_1045@9:0> > 0))))
        [<k_main_1423@12:3>.((<inc3_1040@15:0> = <k_main_1423@12:1>) && (<inc3_1040@15:2> = <k_main_1423@12:0>))
         [(not (<inc3_1040@15:2> >= <inc3_1040@15:0>)).(<<inc3_1040@15:1>@18:0> = <inc3_1040@15:2>)
          [true.((<make_array_1030@20:0> = <k_main_1423@12:1>) && (<make_array_1030@20:1> = <<inc3_1040@15:1>@18:0>))
           [(not (0 <= <make_array_1030@20:1>)).
            ((<k_make_array_u_1198@23:0> = <make_array_1030@20:1>) &&
             ((<k_make_array_u_1198@23:1> = <make_array_1030@20:0>) && (<k_make_array_u_1198@23:3> = false)))
            [(not <k_make_array_u_1198@23:3>).(<fail_1502@26:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(186)[2]
    horn clauses:
      P[<fail_1502@26:0>](<fail_1502@26:0>:bool)|- bot
      
      P[<k_make_array_u_1198@23:3>](<k_make_array_u_1198@23:0>:int,<k_make_array_u_1198@23:1>:int,false:bool),
      <fail_1502@26:0> |- P[<fail_1502@26:0>](<fail_1502@26:0>:bool)
      
      P[<make_array_1030@20:1>](<k_make_array_u_1198@23:1>:int,<k_make_array_u_1198@23:0>:int),
      ((0 > <k_make_array_u_1198@23:0>) && (not <k_make_array_u_1198@23:3>))
      |- P[<k_make_array_u_1198@23:3>](<k_make_array_u_1198@23:0>:int,
                                       <k_make_array_u_1198@23:1>:int,
                                       <k_make_array_u_1198@23:3>:bool)
      
      P[<k_main_1423@12:3>](<inc3_1040@15:2>:int,<make_array_1030@20:0>:int,true:bool),
      P[<<inc3_1040@15:1>@18:0>](<make_array_1030@20:0>:int,<make_array_1030@20:1>:int)|- P[<make_array_1030@20:1>](
      <make_array_1030@20:0>:int,<make_array_1030@20:1>:int)
      
      P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int),
      (<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>)
      |- P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int)
      
      P[<k_main_1423@12:3>](<inc3_1040@15:2>:int,<inc3_1040@15:0>:int,true:bool)|- P[<inc3_1040@15:2>](
      <inc3_1040@15:0>:int,<inc3_1040@15:2>:int)
      
      P[<main_1045@9:1>](<k_main_1423@12:1>:int,<k_main_1423@12:0>:int),
      ((<k_main_1423@12:0> = 0) && (<k_main_1423@12:3> = (<k_main_1423@12:1> > 0)))
      |- P[<k_main_1423@12:3>](<k_main_1423@12:0>:int,<k_main_1423@12:1>:int,
                               <k_main_1423@12:3>:bool)
      
      P[<f_1500@7:1>](<main_1045@9:0>:int,<main_1045@9:1>:int)|- P[<main_1045@9:1>](
      <main_1045@9:0>:int,<main_1045@9:1>:int)
      
      P[<f_1499@4:0>](<f_1500@7:0>:int)|- P[<f_1500@7:1>](<f_1500@7:0>:int,
                                                          <f_1500@7:1>:int)
      
      |- P[<f_1499@4:0>](<f_1499@4:0>:int)
    call trees:
      <main_1495@1>
        <f_1499@4>
          <f_1500@7>
            <main_1045@9>
              <k_main_1423@12>
                <inc3_1040@15>
                </<inc3_1040@15:1>@18>
                <make_array_1030@20>
                  <k_make_array_u_1198@23>
                    <fail_1502@26>
    inlined horn clauses:
      P[<fail_1502@26:0>](<fail_1502@26:0>:bool)|- bot
      
      P[<<inc3_1040@15:1>@18:0>](<k_make_array_u_1198@23:1>:int,<k_make_array_u_1198@23:0>:int),
      ((0 > <k_make_array_u_1198@23:0>) && ((<k_make_array_u_1198@23:1> > 0) && <fail_1502@26:0>))
      |- P[<fail_1502@26:0>](<fail_1502@26:0>:bool)
      
      P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int),
      (<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>)
      |- P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int)
      
       ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
      |- P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int)
    begin ParamSubstInfer.infer(1455)[3]
      
    end ParamSubstInfer.infer(1455)[3] (0.027996 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1457)[3]
      
    end RefTypeInfer.elim_coeffs(1457)[3] (0.001000 sec.)
    begin GenHcSolver.solve(1653)[3]
      Horn clauses:
        P[<fail_1502@26:0>](<fail_1502@26:0>:bool)|- bot
        
        P[<<inc3_1040@15:1>@18:0>](<k_make_array_u_1198@23:1>:int,<k_make_array_u_1198@23:0>:int),
        ((0 > <k_make_array_u_1198@23:0>) && ((<k_make_array_u_1198@23:1> > 0) && <fail_1502@26:0>))
        |- P[<fail_1502@26:0>](<fail_1502@26:0>:bool)
        
        P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int),
        (<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>)
        |- P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int)
        
         ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
        |- P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int)
      lower bounds:
        P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int) =
        ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
        P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int) =
        ((<<inc3_1040@15:1>@18:0> = 0) && ((<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>) && (<inc3_1040@15:0> > 0)))
        P[<fail_1502@26:0>](<fail_1502@26:0>:bool) = false
      upper bounds:
        P[<fail_1502@26:0>](var5:bool) = true
      begin GenHcSolver.classify_pids(2834)[4]
        output:
          [<fail_1502@26:0>]
      end GenHcSolver.classify_pids(2834)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2837)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2838)[5]
          begin InterpProver.interpolate_fresh(2839)[6]
            begin InterpProver.interpolate_log(2840)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2841)[8]
                begin InterpProver.interpolate_simplify(2842)[9]
                  begin InterpProver.interpolate_quick(2855)[10]
                    
                  end InterpProver.interpolate_quick(2855)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2859)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2859)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2842)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2841)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2840)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2839)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2838)[5] (0.000000 sec.)
        output:
          P[<fail_1502@26:0>](<fail_1502@26:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2837)[4] (0.000000 sec.)
      Horn clauses:
        P[<<inc3_1040@15:1>@18:0>](<k_make_array_u_1198@23:1>:int,<k_make_array_u_1198@23:0>:int),
        ((<k_make_array_u_1198@23:1> > 0) && (0 > <k_make_array_u_1198@23:0>)) |- bot
        
        P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int),
        (<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>)
        |- P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int)
        
         ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
        |- P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int)
      lower bounds:
        P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int) =
        ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
        P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int) =
        ((<<inc3_1040@15:1>@18:0> = 0) && ((<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>) && (<inc3_1040@15:0> > 0)))
      upper bounds:
        P[<<inc3_1040@15:1>@18:0>](var6:int,var7:int) = ((var6 <= 0) || (0 <= var7))
      begin GenHcSolver.classify_pids(4357)[4]
        output:
          [<<inc3_1040@15:1>@18:0>]
      end GenHcSolver.classify_pids(4357)[4] (0.000000 sec.)
      lb:((<<inc3_1040@15:1>@18:0> = 0) && ((<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>) && (<inc3_1040@15:0> > 0)))
      nub:(not ((<inc3_1040@15:0> <= 0) || (0 <= <<inc3_1040@15:1>@18:0>)))
      begin ApronInterface.convex_hull_interpolate(4360)[4]
        lb:((<<inc3_1040@15:1>@18:0> = 0) && ((<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>) && (<inc3_1040@15:0> > 0)))
        nub:(not ((<inc3_1040@15:0> <= 0) || (0 <= <<inc3_1040@15:1>@18:0>)))
        lb':((<<inc3_1040@15:1>@18:0> = 0) && ((<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>) && (<inc3_1040@15:0> > 0)))
        nub':(not ((<inc3_1040@15:0> <= 0) || (0 <= <<inc3_1040@15:1>@18:0>)))
        begin InterpProver.interpolate(4361)[5]
          begin InterpProver.interpolate_fresh(4362)[6]
            begin InterpProver.interpolate_log(4363)[7]
              input1: ((<<inc3_1040@15:1>@18:0> = 0) &&
                       ((<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>) && (<inc3_1040@15:0> > 0)))
              input2: (not ((<inc3_1040@15:0> <= 0) || (0 <= <<inc3_1040@15:1>@18:0>)))
              begin InterpProver.interpolate_check(4364)[8]
                begin InterpProver.interpolate_simplify(4365)[9]
                  begin InterpProver.interpolate_quick(4440)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(4449)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(4450)[12]
                        begin CsisatInterface.interpolate_csisat_log(4451)[13]
                          input1: (0 = v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0 & 1 <= v_sep_inc3_1040_sep_15_sep_0 & (1 + v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0) <= v_sep_inc3_1040_sep_15_sep_0)
                          input2: (1 <= v_sep_inc3_1040_sep_15_sep_0 & (1 + v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(4452)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(4452)[14] (0.000000 sec.)
                          output: -2*v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(4451)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(4450)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(4449)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(4440)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(4365)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(4364)[8] (0.001999 sec.)
              output: (0 <= <<inc3_1040@15:1>@18:0>)
            end InterpProver.interpolate_log(4363)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(4362)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(4361)[5] (0.001999 sec.)
        output:
          P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int) = (0 <= <<inc3_1040@15:1>@18:0>)
      end ApronInterface.convex_hull_interpolate(4360)[4] (0.001999 sec.)
      Horn clauses:
        P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int),
        ((<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>) && (0 > <<inc3_1040@15:1>@18:0>)) |- bot
        
         ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
        |- P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int)
      lower bounds:
        P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int) =
        ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
      upper bounds:
        P[<inc3_1040@15:2>](var8:int,var9:int) = ((var9 >= var8) || (0 <= var9))
      begin GenHcSolver.classify_pids(5379)[4]
        output:
          [<inc3_1040@15:2>]
      end GenHcSolver.classify_pids(5379)[4] (0.000000 sec.)
      lb:((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
      nub:(not ((<inc3_1040@15:2> >= <inc3_1040@15:0>) || (0 <= <inc3_1040@15:2>)))
      begin ApronInterface.convex_hull_interpolate(5382)[4]
        lb:((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
        nub:(not ((<inc3_1040@15:2> >= <inc3_1040@15:0>) || (0 <= <inc3_1040@15:2>)))
        lb':((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
        nub':(not ((<inc3_1040@15:2> >= <inc3_1040@15:0>) || (0 <= <inc3_1040@15:2>)))
        begin InterpProver.interpolate(5383)[5]
          begin InterpProver.interpolate_fresh(5384)[6]
            begin InterpProver.interpolate_log(5385)[7]
              input1: ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
              input2: (not ((<inc3_1040@15:2> >= <inc3_1040@15:0>) || (0 <= <inc3_1040@15:2>)))
              begin InterpProver.interpolate_check(5386)[8]
                begin InterpProver.interpolate_simplify(5387)[9]
                  begin InterpProver.interpolate_quick(5438)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(5447)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(5448)[12]
                        begin CsisatInterface.interpolate_csisat_log(5449)[13]
                          input1: (0 = v_sep_inc3_1040_sep_15_sep_2 & 1 <= v_sep_inc3_1040_sep_15_sep_0)
                          input2: ((1 + v_sep_inc3_1040_sep_15_sep_2) <= 0 & (1 + v_sep_inc3_1040_sep_15_sep_2) <= v_sep_inc3_1040_sep_15_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(5450)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(5450)[14] (0.000000 sec.)
                          output: -2*v_sep_inc3_1040_sep_15_sep_2 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(5449)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_inc3_1040_sep_15_sep_2 <= 0
                        after dnf conversion: ((-2*v_sep_inc3_1040_sep_15_sep_2 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(5448)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(5447)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(5438)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5387)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5386)[8] (0.000999 sec.)
              output: (0 <= <inc3_1040@15:2>)
            end InterpProver.interpolate_log(5385)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(5384)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(5383)[5] (0.000999 sec.)
        output:
          P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int) = (0 <= <inc3_1040@15:2>)
      end ApronInterface.convex_hull_interpolate(5382)[4] (0.000999 sec.)
      begin HcSolver.check_validity(5603)[4]
        input:
          P[<fail_1502@26:0>](<fail_1502@26:0>:bool)|- bot
          
          P[<<inc3_1040@15:1>@18:0>](<k_make_array_u_1198@23:1>:int,<k_make_array_u_1198@23:0>:int),
          ((0 > <k_make_array_u_1198@23:0>) && ((<k_make_array_u_1198@23:1> > 0) && <fail_1502@26:0>))
          |- P[<fail_1502@26:0>](<fail_1502@26:0>:bool)
          
          P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int),
          (<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>)
          |- P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int)
          
           ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
          |- P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(5603)[4] (0.002000 sec.)
      solution:
        P[<fail_1502@26:0>](<fail_1502@26:0>:bool) = false
        P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int) = (0 <= <<inc3_1040@15:1>@18:0>)
        P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int) = (0 <= <inc3_1040@15:2>)
    end GenHcSolver.solve(1653)[3] (0.023996 sec.)
    begin GenHcSolver.solve(5883)[3]
      Horn clauses:
        P[<fail_1502@26:0>](<fail_1502@26:0>:bool)|- bot
        
        P[<<inc3_1040@15:1>@18:0>](<k_make_array_u_1198@23:1>:int,<k_make_array_u_1198@23:0>:int),
        ((0 > <k_make_array_u_1198@23:0>) && ((<k_make_array_u_1198@23:1> > 0) && <fail_1502@26:0>))
        |- P[<fail_1502@26:0>](<fail_1502@26:0>:bool)
        
        P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int),
        (<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>)
        |- P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int)
        
         ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
        |- P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int)
      lower bounds:
        P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int) =
        ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
        P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int) =
        ((<<inc3_1040@15:1>@18:0> = 0) && ((<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>) && (<inc3_1040@15:0> > 0)))
        P[<fail_1502@26:0>](<fail_1502@26:0>:bool) = false
      upper bounds:
        P[<fail_1502@26:0>](var11:bool) = true
      begin GenHcSolver.classify_pids(7064)[4]
        output:
          [<fail_1502@26:0>]
      end GenHcSolver.classify_pids(7064)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(7067)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(7070)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(7070)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(7075)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(7075)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(7078)[5]
          begin InterpProver.interpolate_fresh(7079)[6]
            begin InterpProver.interpolate_log(7080)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(7081)[8]
                begin InterpProver.interpolate_simplify(7082)[9]
                  begin InterpProver.interpolate_quick(7097)[10]
                    
                  end InterpProver.interpolate_quick(7097)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(7101)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(7101)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(7082)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(7081)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(7080)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(7079)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(7078)[5] (0.001000 sec.)
        output:
          P[<fail_1502@26:0>](<fail_1502@26:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(7067)[4] (0.001000 sec.)
      Horn clauses:
        P[<<inc3_1040@15:1>@18:0>](<k_make_array_u_1198@23:1>:int,<k_make_array_u_1198@23:0>:int),
        ((<k_make_array_u_1198@23:1> > 0) && (0 > <k_make_array_u_1198@23:0>)) |- bot
        
        P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int),
        (<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>)
        |- P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int)
        
         ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
        |- P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int)
      lower bounds:
        P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int) =
        ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
        P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int) =
        ((<<inc3_1040@15:1>@18:0> = 0) && ((<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>) && (<inc3_1040@15:0> > 0)))
      upper bounds:
        P[<<inc3_1040@15:1>@18:0>](var12:int,var13:int) = ((var12 <= 0) || (0 <= var13))
      begin GenHcSolver.classify_pids(8606)[4]
        output:
          [<<inc3_1040@15:1>@18:0>]
      end GenHcSolver.classify_pids(8606)[4] (0.000000 sec.)
      lb:((<<inc3_1040@15:1>@18:0> = 0) && ((<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>) && (<inc3_1040@15:0> > 0)))
      nub:(not ((<inc3_1040@15:0> <= 0) || (0 <= <<inc3_1040@15:1>@18:0>)))
      begin ApronInterface.convex_hull_interpolate(8609)[4]
        lb:((<<inc3_1040@15:1>@18:0> = 0) && ((<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>) && (<inc3_1040@15:0> > 0)))
        nub:(not ((<inc3_1040@15:0> <= 0) || (0 <= <<inc3_1040@15:1>@18:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(8634)[5]
          ts: ((<<inc3_1040@15:1>@18:0> = 0) &&
               ((<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>) && (<inc3_1040@15:0> > 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(8634)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(8652)[5]
          ts: ((<inc3_1040@15:0> > 0) && (0 > <<inc3_1040@15:1>@18:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(8652)[5] (0.000000 sec.)
        lb':((<<inc3_1040@15:1>@18:0> = 0) && ((-1 + <inc3_1040@15:0>) >= 0))
        nub':(((-1 + (-1 * <<inc3_1040@15:1>@18:0>)) >= 0) && ((-1 + <inc3_1040@15:0>) >= 0))
        begin InterpProver.interpolate(8657)[5]
          begin InterpProver.interpolate_fresh(8658)[6]
            begin InterpProver.interpolate_log(8659)[7]
              input1: ((<<inc3_1040@15:1>@18:0> = 0) && ((-1 + <inc3_1040@15:0>) >= 0))
              input2: (((-1 + (-1 * <<inc3_1040@15:1>@18:0>)) >= 0) && ((-1 + <inc3_1040@15:0>) >= 0))
              begin InterpProver.interpolate_check(8660)[8]
                begin InterpProver.interpolate_simplify(8661)[9]
                  begin InterpProver.interpolate_quick(8724)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(8733)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(8734)[12]
                        begin CsisatInterface.interpolate_csisat_log(8735)[13]
                          input1: (0 = v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0 & 1 <= v_sep_inc3_1040_sep_15_sep_0)
                          input2: (1 <= v_sep_inc3_1040_sep_15_sep_0 & (1 + v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(8736)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(8736)[14] (0.000000 sec.)
                          output: -2*v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(8735)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(8734)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(8733)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(8724)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(8661)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(8660)[8] (0.001000 sec.)
              output: (0 <= <<inc3_1040@15:1>@18:0>)
            end InterpProver.interpolate_log(8659)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(8658)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(8657)[5] (0.001000 sec.)
        output:
          P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int) = (0 <= <<inc3_1040@15:1>@18:0>)
      end ApronInterface.convex_hull_interpolate(8609)[4] (0.001000 sec.)
      Horn clauses:
        P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int),
        ((<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>) && (0 > <<inc3_1040@15:1>@18:0>)) |- bot
        
         ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
        |- P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int)
      lower bounds:
        P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int) =
        ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
      upper bounds:
        P[<inc3_1040@15:2>](var14:int,var15:int) = ((var15 >= var14) || (0 <= var15))
      begin GenHcSolver.classify_pids(9667)[4]
        output:
          [<inc3_1040@15:2>]
      end GenHcSolver.classify_pids(9667)[4] (0.000000 sec.)
      lb:((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
      nub:(not ((<inc3_1040@15:2> >= <inc3_1040@15:0>) || (0 <= <inc3_1040@15:2>)))
      begin ApronInterface.convex_hull_interpolate(9670)[4]
        lb:((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
        nub:(not ((<inc3_1040@15:2> >= <inc3_1040@15:0>) || (0 <= <inc3_1040@15:2>)))
        begin ExtFormula.Formula.case_analysis_boolean(9680)[5]
          ts: ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(9680)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(9699)[5]
          ts: ((<inc3_1040@15:2> < <inc3_1040@15:0>) && (0 > <inc3_1040@15:2>))
          
        end ExtFormula.Formula.case_analysis_boolean(9699)[5] (0.000000 sec.)
        lb':((<inc3_1040@15:2> = 0) && ((-1 + <inc3_1040@15:0>) >= 0))
        nub':(((-1 + (-1 * <inc3_1040@15:2>)) >= 0) && (((-1 + (-1 * <inc3_1040@15:2>)) + <inc3_1040@15:0>) >= 0))
        begin InterpProver.interpolate(9705)[5]
          begin InterpProver.interpolate_fresh(9706)[6]
            begin InterpProver.interpolate_log(9707)[7]
              input1: ((<inc3_1040@15:2> = 0) && ((-1 + <inc3_1040@15:0>) >= 0))
              input2: (((-1 + (-1 * <inc3_1040@15:2>)) >= 0) &&
                       (((-1 + (-1 * <inc3_1040@15:2>)) + <inc3_1040@15:0>) >= 0))
              begin InterpProver.interpolate_check(9708)[8]
                begin InterpProver.interpolate_simplify(9709)[9]
                  begin InterpProver.interpolate_quick(9778)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(9787)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(9788)[12]
                        begin CsisatInterface.interpolate_csisat_log(9789)[13]
                          input1: (0 = v_sep_inc3_1040_sep_15_sep_2 & 1 <= v_sep_inc3_1040_sep_15_sep_0)
                          input2: ((1 + v_sep_inc3_1040_sep_15_sep_2) <= 0 & (1 + v_sep_inc3_1040_sep_15_sep_2) <= v_sep_inc3_1040_sep_15_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(9790)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(9790)[14] (0.000000 sec.)
                          output: -2*v_sep_inc3_1040_sep_15_sep_2 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(9789)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_inc3_1040_sep_15_sep_2 <= 0
                        after dnf conversion: ((-2*v_sep_inc3_1040_sep_15_sep_2 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(9788)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(9787)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(9778)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(9709)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(9708)[8] (0.001000 sec.)
              output: (0 <= <inc3_1040@15:2>)
            end InterpProver.interpolate_log(9707)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(9706)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(9705)[5] (0.001000 sec.)
        output:
          P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int) = (0 <= <inc3_1040@15:2>)
      end ApronInterface.convex_hull_interpolate(9670)[4] (0.001000 sec.)
      begin HcSolver.check_validity(9947)[4]
        input:
          P[<fail_1502@26:0>](<fail_1502@26:0>:bool)|- bot
          
          P[<<inc3_1040@15:1>@18:0>](<k_make_array_u_1198@23:1>:int,<k_make_array_u_1198@23:0>:int),
          ((0 > <k_make_array_u_1198@23:0>) && ((<k_make_array_u_1198@23:1> > 0) && <fail_1502@26:0>))
          |- P[<fail_1502@26:0>](<fail_1502@26:0>:bool)
          
          P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int),
          (<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>)
          |- P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int)
          
           ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
          |- P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(9947)[4] (0.001000 sec.)
      solution:
        P[<fail_1502@26:0>](<fail_1502@26:0>:bool) = false
        P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int) = (0 <= <<inc3_1040@15:1>@18:0>)
        P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int) = (0 <= <inc3_1040@15:2>)
    end GenHcSolver.solve(5883)[3] (0.022997 sec.)
    begin YhornInterface.solve(10227)[3]
      begin HcSolver.solve_ub(10228)[4]
        encoded:
          P[<fail_1502@26:0>](<fail_1502@26:0>:int)|- bot
          
          P[<<inc3_1040@15:1>@18:0>](<k_make_array_u_1198@23:1>:int,<k_make_array_u_1198@23:0>:int),
          ((0 > <k_make_array_u_1198@23:0>) && ((<k_make_array_u_1198@23:1> > 0) && (<fail_1502@26:0> = 1)))
          |- P[<fail_1502@26:0>](<fail_1502@26:0>:int)
          
          P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int),
          (<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>)
          |- P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int)
          
           ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
          |- P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int)
        input to Yhorn:
          P[<fail_1502@26:0>](<fail_1502@26:0>:int)|- bot
          
          P[<<inc3_1040@15:1>@18:0>](<k_make_array_u_1198@23:1>:int,<k_make_array_u_1198@23:0>:int),
          ((<k_make_array_u_1198@23:1> > 0) && ((0 > <k_make_array_u_1198@23:0>) && (<fail_1502@26:0> = 1)))
          |- P[<fail_1502@26:0>](<fail_1502@26:0>:int)
          
          P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int),
          (<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>)
          |- P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int)
          
           ((<inc3_1040@15:0> > 0) && (<inc3_1040@15:2> = 0))
          |- P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1502_sep_26_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0) & ($9>0)) & (v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0($9,$8)) -> v_sep_fail_1502_sep_26_sep_0($7).
($10-$11<0) & (v_sep_inc3_1040_sep_15_sep_2($11,$10)) -> v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0($11,$10).
($12=0) & ($11>0) -> v_sep_inc3_1040_sep_15_sep_2($11,$12).


v_sep_fail_1502_sep_26_sep_0: X
v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0: X
v_sep_inc3_1040_sep_15_sep_2: X
....
v_sep_fail_1502_sep_26_sep_0: X
v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0: X
v_sep_inc3_1040_sep_15_sep_2: X
...
v_sep_fail_1502_sep_26_sep_0: X
v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0: X
v_sep_inc3_1040_sep_15_sep_2: X
....
v_sep_fail_1502_sep_26_sep_0: X
v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0: X
v_sep_inc3_1040_sep_15_sep_2: X
....(0=0) & (v_sep_fail_1502_sep_26_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0) & ($9>0)) & (v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0($9,$8)) -> v_sep_fail_1502_sep_26_sep_0($7).
($10-$11<0) & (v_sep_inc3_1040_sep_15_sep_2($11,$10)) -> v_sep_inc3_1040_sep_15_sep_1_sep_18_sep_0($11,$10).
($12=0) & ($11>0) -> v_sep_inc3_1040_sep_15_sep_2($11,$12).

        solution:
          P[<fail_1502@26:0>]($13:bool) = false
          P[<<inc3_1040@15:1>@18:0>]($16:int,$18:int) = (0 <= $18)
          P[<inc3_1040@15:2>]($21:int,$23:int) = (0 <= $23)
        
      end HcSolver.solve_ub(10228)[4] (0.010998 sec.)
      begin HcSolver.check_validity(10362)[4]
        input:
          P[<fail_1502@26:0>](<fail_1502@26:0>:bool)|- bot
          
          P[<<inc3_1040@15:1>@18:0>](<k_make_array_u_1198@23:1>:int,<k_make_array_u_1198@23:0>:int),
          ((0 > <k_make_array_u_1198@23:0>) && ((<k_make_array_u_1198@23:1> > 0) && <fail_1502@26:0>))
          |- P[<fail_1502@26:0>](<fail_1502@26:0>:bool)
          
          P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int),
          (<<inc3_1040@15:1>@18:0> < <inc3_1040@15:0>)
          |- P[<<inc3_1040@15:1>@18:0>](<inc3_1040@15:0>:int,<<inc3_1040@15:1>@18:0>:int)
          
           ((<inc3_1040@15:2> = 0) && (<inc3_1040@15:0> > 0))
          |- P[<inc3_1040@15:2>](<inc3_1040@15:0>:int,<inc3_1040@15:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(10362)[4] (0.006999 sec.)
      solution:
        P[<fail_1502@26:0>]($13:bool) = false
        P[<<inc3_1040@15:1>@18:0>]($16:int,$18:int) = (0 <= $18)
        P[<inc3_1040@15:2>]($21:int,$23:int) = (0 <= $23)
    end YhornInterface.solve(10227)[3] (0.017997 sec.)
    
  end RefTypeInfer.infer_etrs(186)[2] (0.102985 sec.)
  refinement types:
    main_1495: X
    f_1499: v1:int -> X
    f_1500: v1:int -> v2:int -> X
    main_1045: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1423: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    inc3_1040: v1:int ->
               (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) -> v6:{v6:int | (0 <= v6)} -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1198: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1502: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var41:int ->
            var40:int ->
            var39:int -> var38:int -> (var37:int -> (var36:int -> X) -> X) -> var33:int -> (var32:int -> X) -> X
    f_1501: var45:int -> var44:int -> var43:unit -> X
    f_inc3_1497: var55:int -> var54:int -> (var53:int -> (var52:int -> X) -> X) -> (var49:unit -> X) -> var47:int -> X
    f_inc3_1498: var65:int -> var64:int -> var63:int -> (var62:unit -> X) -> (var60:int -> (var59:int -> X) -> X) -> X
    f_update_1496: var79:int ->
                   var78:int ->
                   var77:int ->
                   (var76:int -> (var75:int -> X) -> X) ->
                   ((var72:int -> (var71:int -> X) -> X) -> X) -> var67:int -> X
    k_make_array_u_1209: var85:int -> var84:int -> (var83:int -> X) -> var81:unit -> X
    update_1164: var98:int ->
                 var97:int ->
                 (var96:int -> (var95:int -> X) -> X) -> var92:int -> ((var91:int -> (var90:int -> X) -> X) -> X) -> X
  abstraction types:
    main_1495: X
    f_1499: v1:int -> X
    f_1500: v1:int -> v2:int -> X
    main_1045: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1423: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    inc3_1040: v1:int ->
               (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) -> v6:int[v6 -> (
                                                                    0 <= v6)] -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1198: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1502: v1:bool -> (v2:unit -> X) -> X
    a_1038: var41:int ->
            var40:int ->
            var39:int -> var38:int -> (var37:int -> (var36:int -> X) -> X) -> var33:int -> (var32:int -> X) -> X
    f_1501: var45:int -> var44:int -> var43:unit -> X
    f_inc3_1497: var55:int -> var54:int -> (var53:int -> (var52:int -> X) -> X) -> (var49:unit -> X) -> var47:int -> X
    f_inc3_1498: var65:int -> var64:int -> var63:int -> (var62:unit -> X) -> (var60:int -> (var59:int -> X) -> X) -> X
    f_update_1496: var79:int ->
                   var78:int ->
                   var77:int ->
                   (var76:int -> (var75:int -> X) -> X) ->
                   ((var72:int -> (var71:int -> X) -> X) -> X) -> var67:int -> X
    k_make_array_u_1209: var85:int -> var84:int -> (var83:int -> X) -> var81:unit -> X
    update_1164: var98:int ->
                 var97:int ->
                 (var96:int -> (var95:int -> X) -> X) -> var92:int -> ((var91:int -> (var90:int -> X) -> X) -> X) -> X
  
end AbsTypeInfer.refine(185)[1] (0.105985 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1495
  main_1495 -> (rand_int f_1499)
  a_1038 i_1034 n_1035 x_1037 x_1263 des_1036 j_1039 k_update_a_1278 when (i_1034 = j_1039) -> (k_update_a_1278 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1263 des_1036 j_1039 k_update_a_1278 when (
      not (i_1034 = j_1039)) -> (des_1036 i_1034 k_update_a_1278)
  f_1499 x_1453 -> (rand_int (f_1500 x_1453))
  f_1500 x_1453 x_1466 -> (main_1045 x_1453 x_1466 (f_1501 x_1453 x_1466))
  f_1501 x_1453 x_1466 x_1450 -> end
  f_inc3_1497 i_1043 m_1041 a_1042 k_inc3_1327 x_1357 ->
      (update_1164 i_1043 m_1041 a_1042 (x_1357 + 1) (f_inc3_1498 i_1043 m_1041 x_1357 k_inc3_1327))
  f_inc3_1498 i_1043 m_1041 x_1357 k_inc3_1327 x_1333 -> (inc3_1040 m_1041 x_1333 (i_1043 + 1) k_inc3_1327)
  f_update_1496 i_1034 n_1035 x_1037 des_1036 k_update_1257 x_1263 ->
      (k_update_1257 (a_1038 i_1034 n_1035 x_1037 x_1263 des_1036))
  fail_1502 b k -> {fail} => (k ())
  inc3_1040 m_1041 a_1042 i_1043 k_inc3_1327 when (i_1043 >= m_1041) -> (k_inc3_1327 ())
  inc3_1040 m_1041 a_1042 i_1043 k_inc3_1327 when (not (i_1043 >= m_1041)) ->
      (a_1042 i_1043 (f_inc3_1497 i_1043 m_1041 a_1042 k_inc3_1327))
  k_main_1423 i_1047 n_1046 k_main_1420 b_1447 when b_1447 ->
      (inc3_1040 n_1046 (make_array_1030 n_1046) i_1047 k_main_1420)
  k_main_1423 i_1047 n_1046 k_main_1420 b_1447 when (not b_1447) -> (k_main_1420 ())
  k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 b_1210 when b_1210 ->
      (k_make_array_u_1209 i_1032 n_1031 k_make_array_1192 ())
  k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 b_1210 when (not b_1210) ->
      (fail_1502 true (k_make_array_u_1209 i_1032 n_1031 k_make_array_1192))
  k_make_array_u_1209 i_1032 n_1031 k_make_array_1192 x_1195 -> (k_make_array_1192 0)
  main_1045 n_1046 i_1047 k_main_1420 when (i_1047 = 0) -> (k_main_1423 i_1047 n_1046 k_main_1420 (n_1046 > 0))
  main_1045 n_1046 i_1047 k_main_1420 when (not (i_1047 = 0)) -> (k_main_1423 i_1047 n_1046 k_main_1420 false)
  make_array_1030 n_1031 i_1032 k_make_array_1192 when (0 <= i_1032) ->
      (k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1192 when (not (0 <= i_1032)) ->
      (k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 false)
  update_1164 i_1034 n_1035 des_1036 x_1037 k_update_1257 ->
      (des_1036 i_1034 (f_update_1496 i_1034 n_1035 x_1037 des_1036 k_update_1257))
Types:
  main_1495 : X
  fail_1502 : (x_1:bool[x_1] -> (unit -> X) -> X)
  inc3_1040 : (int -> (x_3:int[x_3 >= 0] -> (int -> X) -> X) -> x_8:int[x_8 >= 0] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1495 ... --> 
  f_1499 ... --> 
  f_1500 ... --> 
  main_1045 [1/2] ... --> 
  k_main_1423 [1/2] ... --> 
  inc3_1040 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1198 [2/2] ... --> 
  fail_1502 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(11151)[1]
  program:
    main_1495  | true = ((Random.int 0) f_1499)
    a_1038 i_1034 n_1035 x_1037 x_1263 des_1036 j_1039 k_update_a_1278 | (
    i_1034 = j_1039) = (k_update_a_1278 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1263 des_1036 j_1039 k_update_a_1278 | (
    not (i_1034 = j_1039)) = (des_1036 i_1034
                                       k_update_a_1278)
    f_1499 x_1453 | true = ((Random.int 0) (f_1500 x_1453))
    f_1500 x_1453 x_1466 | true = (main_1045 x_1453
                                             x_1466
                                             (f_1501 x_1453
                                                     x_1466))
    f_1501 x_1453 x_1466 x_1450 | true = end
    f_inc3_1497 i_1043 m_1041 a_1042 k_inc3_1327 x_1357 | true = (update_1164
                                                                    i_1043
                                                                    m_1041
                                                                    a_1042
                                                                    (
                                                                    x_1357 + 1)
                                                                    (
                                                                    f_inc3_1498 i_1043
                                                                    m_1041
                                                                    x_1357
                                                                    k_inc3_1327))
    f_inc3_1498 i_1043 m_1041 x_1357 k_inc3_1327 x_1333 | true = (inc3_1040 m_1041
                                                                    x_1333
                                                                    (i_1043 + 1)
                                                                    k_inc3_1327)
    f_update_1496 i_1034 n_1035 x_1037 des_1036 k_update_1257 x_1263 | true = (
    k_update_1257 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1263
                          des_1036))
    fail_1502 b k | true = (fail ())
    inc3_1040 m_1041 a_1042 i_1043 k_inc3_1327 | (i_1043 >= m_1041) = (
    k_inc3_1327 ())
    inc3_1040 m_1041 a_1042 i_1043 k_inc3_1327 | (not (i_1043 >= m_1041)) = (
    a_1042 i_1043
           (f_inc3_1497 i_1043
                        m_1041
                        a_1042
                        k_inc3_1327))
    k_main_1423 i_1047 n_1046 k_main_1420 b_1447 | b_1447 = (inc3_1040
                                                               n_1046
                                                               (make_array_1030 n_1046)
                                                               i_1047
                                                               k_main_1420)
    k_main_1423 i_1047 n_1046 k_main_1420 b_1447 | (not b_1447) = (k_main_1420 ())
    k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 b_1210 | b_1210 = (
    k_make_array_u_1209 i_1032
                        n_1031
                        k_make_array_1192
                        ())
    k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 b_1210 | (not b_1210) = (
    fail_1502 true
              (k_make_array_u_1209 i_1032
                                   n_1031
                                   k_make_array_1192))
    k_make_array_u_1209 i_1032 n_1031 k_make_array_1192 x_1195 | true = (
    k_make_array_1192 0)
    main_1045 n_1046 i_1047 k_main_1420 | (i_1047 = 0) = (k_main_1423 i_1047
                                                                    n_1046
                                                                    k_main_1420
                                                                    (n_1046 > 0))
    main_1045 n_1046 i_1047 k_main_1420 | (not (i_1047 = 0)) = (k_main_1423 i_1047
                                                                    n_1046
                                                                    k_main_1420
                                                                    false)
    make_array_1030 n_1031 i_1032 k_make_array_1192 | (0 <= i_1032) = (
    k_make_array_u_1198 i_1032
                        n_1031
                        k_make_array_1192
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1192 | (not (0 <= i_1032)) = (
    k_make_array_u_1198 i_1032
                        n_1031
                        k_make_array_1192
                        false)
    update_1164 i_1034 n_1035 des_1036 x_1037 k_update_1257 | true = (
    des_1036 i_1034
             (f_update_1496 i_1034
                            n_1035
                            x_1037
                            des_1036
                            k_update_1257))
    main_1495:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_1499:int -> X
    f_1500:int -> int -> X
    f_1501:int -> int -> unit -> X
    f_inc3_1497:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> int -> X
    f_inc3_1498:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> X
    f_update_1496:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1502:bool -> (unit -> X) -> X
    inc3_1040:int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    k_main_1423:int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1198:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1209:int -> int -> (int -> X) -> unit -> X
    main_1045:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1164:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1499,f_1500,f_1501,f_inc3_1497,f_inc3_1498,f_update_1496,k_main_1423,k_make_array_u_1198,k_make_array_u_1209,main_1045,make_array_1030,update_1164
  counterexample: 0:0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1499@32:0> = var99)
     [true.nop((<f_1500@35:0> = <f_1499@32:0>) && (<f_1500@35:1> = var100))
      [true.((<main_1045@37:0> = <f_1500@35:0>) && (<main_1045@37:1> = <f_1500@35:1>))
       [(<main_1045@37:1> = 0).
        ((<k_main_1423@40:0> = <main_1045@37:1>) &&
         ((<k_main_1423@40:1> = <main_1045@37:0>) && (<k_main_1423@40:3> = (<main_1045@37:0> > 0))))
        [<k_main_1423@40:3>.((<inc3_1040@43:0> = <k_main_1423@40:1>) && (<inc3_1040@43:2> = <k_main_1423@40:0>))
         [(not (<inc3_1040@43:2> >= <inc3_1040@43:0>)).(<<inc3_1040@43:1>@46:0> = <inc3_1040@43:2>)
          [true.((<make_array_1030@48:0> = <k_main_1423@40:1>) && (<make_array_1030@48:1> = <<inc3_1040@43:1>@46:0>))
           [(0 <= <make_array_1030@48:1>).
            ((<k_make_array_u_1198@51:0> = <make_array_1030@48:1>) &&
             ((<k_make_array_u_1198@51:1> = <make_array_1030@48:0>) &&
              (<k_make_array_u_1198@51:3> = (<make_array_1030@48:1> < <make_array_1030@48:0>))))
            [(not <k_make_array_u_1198@51:3>).(<fail_1502@54:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(11152)[2]
    horn clauses:
      P[<fail_1502@54:0>](<fail_1502@54:0>:bool)|- bot
      
      P[<k_make_array_u_1198@51:3>](<k_make_array_u_1198@51:0>:int,<k_make_array_u_1198@51:1>:int,false:bool),
      <fail_1502@54:0> |- P[<fail_1502@54:0>](<fail_1502@54:0>:bool)
      
      P[<make_array_1030@48:1>](<k_make_array_u_1198@51:1>:int,<k_make_array_u_1198@51:0>:int),
      ((0 <= <k_make_array_u_1198@51:0>) &&
       (<k_make_array_u_1198@51:3> = (<k_make_array_u_1198@51:0> < <k_make_array_u_1198@51:1>)))
      |- P[<k_make_array_u_1198@51:3>](<k_make_array_u_1198@51:0>:int,
                                       <k_make_array_u_1198@51:1>:int,
                                       <k_make_array_u_1198@51:3>:bool)
      
      P[<k_main_1423@40:3>](<inc3_1040@43:2>:int,<make_array_1030@48:0>:int,true:bool),
      P[<<inc3_1040@43:1>@46:0>](<make_array_1030@48:0>:int,<make_array_1030@48:1>:int)|- P[<make_array_1030@48:1>](
      <make_array_1030@48:0>:int,<make_array_1030@48:1>:int)
      
      P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int),
      (<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>)
      |- P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int)
      
      P[<k_main_1423@40:3>](<inc3_1040@43:2>:int,<inc3_1040@43:0>:int,true:bool)|- P[<inc3_1040@43:2>](
      <inc3_1040@43:0>:int,<inc3_1040@43:2>:int)
      
      P[<main_1045@37:1>](<k_main_1423@40:1>:int,<k_main_1423@40:0>:int),
      ((<k_main_1423@40:0> = 0) && (<k_main_1423@40:3> = (<k_main_1423@40:1> > 0)))
      |- P[<k_main_1423@40:3>](<k_main_1423@40:0>:int,<k_main_1423@40:1>:int,
                               <k_main_1423@40:3>:bool)
      
      P[<f_1500@35:1>](<main_1045@37:0>:int,<main_1045@37:1>:int)|- P[<main_1045@37:1>](
      <main_1045@37:0>:int,<main_1045@37:1>:int)
      
      P[<f_1499@32:0>](<f_1500@35:0>:int)|- P[<f_1500@35:1>](<f_1500@35:0>:int,
                                                             <f_1500@35:1>:int)
      
      |- P[<f_1499@32:0>](<f_1499@32:0>:int)
    call trees:
      <main_1495@29>
        <f_1499@32>
          <f_1500@35>
            <main_1045@37>
              <k_main_1423@40>
                <inc3_1040@43>
                </<inc3_1040@43:1>@46>
                <make_array_1030@48>
                  <k_make_array_u_1198@51>
                    <fail_1502@54>
    inlined horn clauses:
      P[<fail_1502@54:0>](<fail_1502@54:0>:bool)|- bot
      
      P[<<inc3_1040@43:1>@46:0>](<k_make_array_u_1198@51:1>:int,<k_make_array_u_1198@51:0>:int),
      ((0 <= <k_make_array_u_1198@51:0>) &&
       ((<k_make_array_u_1198@51:1> > 0) &&
        ((<k_make_array_u_1198@51:0> >= <k_make_array_u_1198@51:1>) && <fail_1502@54:0>)))
      |- P[<fail_1502@54:0>](<fail_1502@54:0>:bool)
      
      P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int),
      (<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>)
      |- P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int)
      
       ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
      |- P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int)
    begin ParamSubstInfer.infer(12680)[3]
      
    end ParamSubstInfer.infer(12680)[3] (0.058991 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(12682)[3]
      
    end RefTypeInfer.elim_coeffs(12682)[3] (0.000000 sec.)
    begin GenHcSolver.solve(12963)[3]
      Horn clauses:
        P[<fail_1502@54:0>](<fail_1502@54:0>:bool)|- bot
        
        P[<<inc3_1040@43:1>@46:0>](<k_make_array_u_1198@51:1>:int,<k_make_array_u_1198@51:0>:int),
        ((0 <= <k_make_array_u_1198@51:0>) &&
         ((<k_make_array_u_1198@51:1> > 0) &&
          ((<k_make_array_u_1198@51:0> >= <k_make_array_u_1198@51:1>) && <fail_1502@54:0>)))
        |- P[<fail_1502@54:0>](<fail_1502@54:0>:bool)
        
        P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int),
        (<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>)
        |- P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int)
        
         ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
        |- P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int)
      lower bounds:
        P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int) =
        ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
        P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int) =
        ((<<inc3_1040@43:1>@46:0> = 0) && ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) && (<inc3_1040@43:0> > 0)))
        P[<fail_1502@54:0>](<fail_1502@54:0>:bool) = false
      upper bounds:
        P[<fail_1502@54:0>](var102:bool) = true
      begin GenHcSolver.classify_pids(14237)[4]
        output:
          [<fail_1502@54:0>]
      end GenHcSolver.classify_pids(14237)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(14240)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(14241)[5]
          begin InterpProver.interpolate_fresh(14242)[6]
            begin InterpProver.interpolate_log(14243)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(14244)[8]
                begin InterpProver.interpolate_simplify(14245)[9]
                  begin InterpProver.interpolate_quick(14258)[10]
                    
                  end InterpProver.interpolate_quick(14258)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(14262)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(14262)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(14245)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(14244)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(14243)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(14242)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(14241)[5] (0.000000 sec.)
        output:
          P[<fail_1502@54:0>](<fail_1502@54:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(14240)[4] (0.000000 sec.)
      Horn clauses:
        P[<<inc3_1040@43:1>@46:0>](<k_make_array_u_1198@51:1>:int,<k_make_array_u_1198@51:0>:int),
        ((<k_make_array_u_1198@51:0> >= <k_make_array_u_1198@51:1>) &&
         ((<k_make_array_u_1198@51:1> > 0) && (0 <= <k_make_array_u_1198@51:0>))) |- bot
        
        P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int),
        (<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>)
        |- P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int)
        
         ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
        |- P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int)
      lower bounds:
        P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int) =
        ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
        P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int) =
        ((<<inc3_1040@43:1>@46:0> = 0) && ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) && (<inc3_1040@43:0> > 0)))
      upper bounds:
        P[<<inc3_1040@43:1>@46:0>](var103:int,var104:int) = ((var104 < var103) || ((var103 <= 0) || (0 > var104)))
      begin GenHcSolver.classify_pids(16208)[4]
        output:
          [<<inc3_1040@43:1>@46:0>]
      end GenHcSolver.classify_pids(16208)[4] (0.000000 sec.)
      lb:((<<inc3_1040@43:1>@46:0> = 0) && ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) && (<inc3_1040@43:0> > 0)))
      nub:(not
             ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) ||
              ((<inc3_1040@43:0> <= 0) || (0 > <<inc3_1040@43:1>@46:0>))))
      begin ApronInterface.convex_hull_interpolate(16211)[4]
        lb:((<<inc3_1040@43:1>@46:0> = 0) && ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) && (<inc3_1040@43:0> > 0)))
        nub:(not
               ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) ||
                ((<inc3_1040@43:0> <= 0) || (0 > <<inc3_1040@43:1>@46:0>))))
        lb':((<<inc3_1040@43:1>@46:0> = 0) && ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) && (<inc3_1040@43:0> > 0)))
        nub':(not
                ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) ||
                 ((<inc3_1040@43:0> <= 0) || (0 > <<inc3_1040@43:1>@46:0>))))
        begin InterpProver.interpolate(16212)[5]
          begin InterpProver.interpolate_fresh(16213)[6]
            begin InterpProver.interpolate_log(16214)[7]
              input1: ((<<inc3_1040@43:1>@46:0> = 0) &&
                       ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) && (<inc3_1040@43:0> > 0)))
              input2: (not
                         ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) ||
                          ((<inc3_1040@43:0> <= 0) || (0 > <<inc3_1040@43:1>@46:0>))))
              begin InterpProver.interpolate_check(16215)[8]
                begin InterpProver.interpolate_simplify(16216)[9]
                  begin InterpProver.interpolate_quick(16319)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(16328)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(16329)[12]
                        begin CsisatInterface.interpolate_csisat_log(16330)[13]
                          input1: (0 = v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0 & 1 <= v_sep_inc3_1040_sep_43_sep_0 & (1 + v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0) <= v_sep_inc3_1040_sep_43_sep_0)
                          input2: (0 <= v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0 & 1 <= v_sep_inc3_1040_sep_43_sep_0 & v_sep_inc3_1040_sep_43_sep_0 <= v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(16331)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(16331)[14] (0.000000 sec.)
                          output: (-2*v_sep_inc3_1040_sep_43_sep_0 + 2*v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(16330)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_inc3_1040_sep_43_sep_0 + 2*v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_inc3_1040_sep_43_sep_0 + 2*v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(16329)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(16328)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(16319)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(16216)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(16215)[8] (0.002000 sec.)
              output: ((1 + <<inc3_1040@43:1>@46:0>) <= <inc3_1040@43:0>)
            end InterpProver.interpolate_log(16214)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(16213)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(16212)[5] (0.003000 sec.)
        output:
          P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int) =
          ((1 + <<inc3_1040@43:1>@46:0>) <= <inc3_1040@43:0>)
      end ApronInterface.convex_hull_interpolate(16211)[4] (0.003000 sec.)
      Horn clauses:
         ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
        |- P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int)
      lower bounds:
        P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int) =
        ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
      upper bounds:
        P[<inc3_1040@43:2>](var105:int,var106:int) = true
      begin GenHcSolver.classify_pids(16882)[4]
        output:
          [<inc3_1040@43:2>]
      end GenHcSolver.classify_pids(16882)[4] (0.000000 sec.)
      lb:((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(16885)[4]
        lb:((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
        nub:false
        lb':((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
        nub':false
        begin InterpProver.interpolate(16886)[5]
          begin InterpProver.interpolate_fresh(16887)[6]
            begin InterpProver.interpolate_log(16888)[7]
              input1: ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
              input2: false
              begin InterpProver.interpolate_check(16889)[8]
                begin InterpProver.interpolate_simplify(16890)[9]
                  begin InterpProver.interpolate_quick(16922)[10]
                    
                  end InterpProver.interpolate_quick(16922)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(16890)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(16889)[8] (0.001999 sec.)
              output: true
            end InterpProver.interpolate_log(16888)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(16887)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(16886)[5] (0.001999 sec.)
        output:
          P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int) = true
      end ApronInterface.convex_hull_interpolate(16885)[4] (0.001999 sec.)
      begin HcSolver.check_validity(17018)[4]
        input:
          P[<fail_1502@54:0>](<fail_1502@54:0>:bool)|- bot
          
          P[<<inc3_1040@43:1>@46:0>](<k_make_array_u_1198@51:1>:int,<k_make_array_u_1198@51:0>:int),
          ((0 <= <k_make_array_u_1198@51:0>) &&
           ((<k_make_array_u_1198@51:1> > 0) &&
            ((<k_make_array_u_1198@51:0> >= <k_make_array_u_1198@51:1>) && <fail_1502@54:0>)))
          |- P[<fail_1502@54:0>](<fail_1502@54:0>:bool)
          
          P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int),
          (<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>)
          |- P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int)
          
           ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
          |- P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(17018)[4] (0.000000 sec.)
      solution:
        P[<fail_1502@54:0>](<fail_1502@54:0>:bool) = false
        P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int) =
        ((1 + <<inc3_1040@43:1>@46:0>) <= <inc3_1040@43:0>)
        P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int) = true
    end GenHcSolver.solve(12963)[3] (0.023996 sec.)
    begin GenHcSolver.solve(17251)[3]
      Horn clauses:
        P[<fail_1502@54:0>](<fail_1502@54:0>:bool)|- bot
        
        P[<<inc3_1040@43:1>@46:0>](<k_make_array_u_1198@51:1>:int,<k_make_array_u_1198@51:0>:int),
        ((0 <= <k_make_array_u_1198@51:0>) &&
         ((<k_make_array_u_1198@51:1> > 0) &&
          ((<k_make_array_u_1198@51:0> >= <k_make_array_u_1198@51:1>) && <fail_1502@54:0>)))
        |- P[<fail_1502@54:0>](<fail_1502@54:0>:bool)
        
        P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int),
        (<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>)
        |- P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int)
        
         ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
        |- P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int)
      lower bounds:
        P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int) =
        ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
        P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int) =
        ((<<inc3_1040@43:1>@46:0> = 0) && ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) && (<inc3_1040@43:0> > 0)))
        P[<fail_1502@54:0>](<fail_1502@54:0>:bool) = false
      upper bounds:
        P[<fail_1502@54:0>](var108:bool) = true
      begin GenHcSolver.classify_pids(18525)[4]
        output:
          [<fail_1502@54:0>]
      end GenHcSolver.classify_pids(18525)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(18528)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(18531)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(18531)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(18536)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(18536)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(18539)[5]
          begin InterpProver.interpolate_fresh(18540)[6]
            begin InterpProver.interpolate_log(18541)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(18542)[8]
                begin InterpProver.interpolate_simplify(18543)[9]
                  begin InterpProver.interpolate_quick(18558)[10]
                    
                  end InterpProver.interpolate_quick(18558)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(18562)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(18562)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(18543)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(18542)[8] (0.000999 sec.)
              output: false
            end InterpProver.interpolate_log(18541)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(18540)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(18539)[5] (0.000999 sec.)
        output:
          P[<fail_1502@54:0>](<fail_1502@54:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(18528)[4] (0.000999 sec.)
      Horn clauses:
        P[<<inc3_1040@43:1>@46:0>](<k_make_array_u_1198@51:1>:int,<k_make_array_u_1198@51:0>:int),
        ((<k_make_array_u_1198@51:0> >= <k_make_array_u_1198@51:1>) &&
         ((<k_make_array_u_1198@51:1> > 0) && (0 <= <k_make_array_u_1198@51:0>))) |- bot
        
        P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int),
        (<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>)
        |- P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int)
        
         ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
        |- P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int)
      lower bounds:
        P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int) =
        ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
        P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int) =
        ((<<inc3_1040@43:1>@46:0> = 0) && ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) && (<inc3_1040@43:0> > 0)))
      upper bounds:
        P[<<inc3_1040@43:1>@46:0>](var109:int,var110:int) = ((var110 < var109) || ((var109 <= 0) || (0 > var110)))
      begin GenHcSolver.classify_pids(20515)[4]
        output:
          [<<inc3_1040@43:1>@46:0>]
      end GenHcSolver.classify_pids(20515)[4] (0.000000 sec.)
      lb:((<<inc3_1040@43:1>@46:0> = 0) && ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) && (<inc3_1040@43:0> > 0)))
      nub:(not
             ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) ||
              ((<inc3_1040@43:0> <= 0) || (0 > <<inc3_1040@43:1>@46:0>))))
      begin ApronInterface.convex_hull_interpolate(20518)[4]
        lb:((<<inc3_1040@43:1>@46:0> = 0) && ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) && (<inc3_1040@43:0> > 0)))
        nub:(not
               ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) ||
                ((<inc3_1040@43:0> <= 0) || (0 > <<inc3_1040@43:1>@46:0>))))
        begin ExtFormula.Formula.case_analysis_boolean(20543)[5]
          ts: ((<<inc3_1040@43:1>@46:0> = 0) &&
               ((<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>) && (<inc3_1040@43:0> > 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(20543)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(20575)[5]
          ts: ((<<inc3_1040@43:1>@46:0> >= <inc3_1040@43:0>) &&
               ((<inc3_1040@43:0> > 0) && (0 <= <<inc3_1040@43:1>@46:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(20575)[5] (0.001000 sec.)
        lb':((<<inc3_1040@43:1>@46:0> = 0) && ((-1 + <inc3_1040@43:0>) >= 0))
        nub':(((<<inc3_1040@43:1>@46:0> + (-1 * <inc3_1040@43:0>)) >= 0) && ((-1 + <inc3_1040@43:0>) >= 0))
        begin InterpProver.interpolate(20582)[5]
          begin InterpProver.interpolate_fresh(20583)[6]
            begin InterpProver.interpolate_log(20584)[7]
              input1: ((<<inc3_1040@43:1>@46:0> = 0) && ((-1 + <inc3_1040@43:0>) >= 0))
              input2: (((<<inc3_1040@43:1>@46:0> + (-1 * <inc3_1040@43:0>)) >= 0) && ((-1 + <inc3_1040@43:0>) >= 0))
              begin InterpProver.interpolate_check(20585)[8]
                begin InterpProver.interpolate_simplify(20586)[9]
                  begin InterpProver.interpolate_quick(20649)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(20658)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(20659)[12]
                        begin CsisatInterface.interpolate_csisat_log(20660)[13]
                          input1: (0 = v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0 & 1 <= v_sep_inc3_1040_sep_43_sep_0)
                          input2: (1 <= v_sep_inc3_1040_sep_43_sep_0 & v_sep_inc3_1040_sep_43_sep_0 <= v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(20661)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(20661)[14] (0.000000 sec.)
                          output: (-2*v_sep_inc3_1040_sep_43_sep_0 + 2*v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(20660)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_inc3_1040_sep_43_sep_0 + 2*v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_inc3_1040_sep_43_sep_0 + 2*v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(20659)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(20658)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(20649)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(20586)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(20585)[8] (0.001999 sec.)
              output: ((1 + <<inc3_1040@43:1>@46:0>) <= <inc3_1040@43:0>)
            end InterpProver.interpolate_log(20584)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(20583)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(20582)[5] (0.001999 sec.)
        output:
          P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int) =
          ((1 + <<inc3_1040@43:1>@46:0>) <= <inc3_1040@43:0>)
      end ApronInterface.convex_hull_interpolate(20518)[4] (0.002999 sec.)
      Horn clauses:
         ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
        |- P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int)
      lower bounds:
        P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int) =
        ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
      upper bounds:
        P[<inc3_1040@43:2>](var111:int,var112:int) = true
      begin GenHcSolver.classify_pids(21209)[4]
        output:
          [<inc3_1040@43:2>]
      end GenHcSolver.classify_pids(21209)[4] (0.000000 sec.)
      lb:((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(21212)[4]
        lb:((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(21222)[5]
          ts: ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(21222)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(21229)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(21229)[5] (0.000000 sec.)
        lb':((<inc3_1040@43:2> = 0) && ((-1 + <inc3_1040@43:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(21232)[5]
          begin InterpProver.interpolate_fresh(21233)[6]
            begin InterpProver.interpolate_log(21234)[7]
              input1: ((<inc3_1040@43:2> = 0) && ((-1 + <inc3_1040@43:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(21235)[8]
                begin InterpProver.interpolate_simplify(21236)[9]
                  begin InterpProver.interpolate_quick(21276)[10]
                    
                  end InterpProver.interpolate_quick(21276)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(21236)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(21235)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(21234)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(21233)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(21232)[5] (0.000000 sec.)
        output:
          P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int) = true
      end ApronInterface.convex_hull_interpolate(21212)[4] (0.001000 sec.)
      begin HcSolver.check_validity(21374)[4]
        input:
          P[<fail_1502@54:0>](<fail_1502@54:0>:bool)|- bot
          
          P[<<inc3_1040@43:1>@46:0>](<k_make_array_u_1198@51:1>:int,<k_make_array_u_1198@51:0>:int),
          ((0 <= <k_make_array_u_1198@51:0>) &&
           ((<k_make_array_u_1198@51:1> > 0) &&
            ((<k_make_array_u_1198@51:0> >= <k_make_array_u_1198@51:1>) && <fail_1502@54:0>)))
          |- P[<fail_1502@54:0>](<fail_1502@54:0>:bool)
          
          P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int),
          (<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>)
          |- P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int)
          
           ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
          |- P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(21374)[4] (0.002000 sec.)
      solution:
        P[<fail_1502@54:0>](<fail_1502@54:0>:bool) = false
        P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int) =
        ((1 + <<inc3_1040@43:1>@46:0>) <= <inc3_1040@43:0>)
        P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int) = true
    end GenHcSolver.solve(17251)[3] (0.022997 sec.)
    begin YhornInterface.solve(21607)[3]
      begin HcSolver.solve_ub(21608)[4]
        encoded:
          P[<fail_1502@54:0>](<fail_1502@54:0>:int)|- bot
          
          P[<<inc3_1040@43:1>@46:0>](<k_make_array_u_1198@51:1>:int,<k_make_array_u_1198@51:0>:int),
          ((0 <= <k_make_array_u_1198@51:0>) &&
           ((<k_make_array_u_1198@51:1> > 0) &&
            ((<k_make_array_u_1198@51:0> >= <k_make_array_u_1198@51:1>) && (<fail_1502@54:0> = 1))))
          |- P[<fail_1502@54:0>](<fail_1502@54:0>:int)
          
          P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int),
          (<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>)
          |- P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int)
          
           ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
          |- P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int)
        input to Yhorn:
          P[<fail_1502@54:0>](<fail_1502@54:0>:int)|- bot
          
          P[<<inc3_1040@43:1>@46:0>](<k_make_array_u_1198@51:1>:int,<k_make_array_u_1198@51:0>:int),
          ((<k_make_array_u_1198@51:0> >= <k_make_array_u_1198@51:1>) &&
           ((<k_make_array_u_1198@51:1> > 0) && ((0 <= <k_make_array_u_1198@51:0>) && (<fail_1502@54:0> = 1))))
          |- P[<fail_1502@54:0>](<fail_1502@54:0>:int)
          
          P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int),
          (<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>)
          |- P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int)
          
           ((<inc3_1040@43:0> > 0) && (<inc3_1040@43:2> = 0))
          |- P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1502_sep_54_sep_0($67)) -> 1=0.
(($67-1=0) & (-$68<=0) & ($69>0) & ($68-$69>=0)) & (v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0($69,$68)) -> v_sep_fail_1502_sep_54_sep_0($67).
($70-$71<0) & (v_sep_inc3_1040_sep_43_sep_2($71,$70)) -> v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0($71,$70).
($72=0) & ($71>0) -> v_sep_inc3_1040_sep_43_sep_2($71,$72).


v_sep_fail_1502_sep_54_sep_0: X
v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0: X
v_sep_inc3_1040_sep_43_sep_2: X
....
v_sep_fail_1502_sep_54_sep_0: X
v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0: X
v_sep_inc3_1040_sep_43_sep_2: X
...
v_sep_fail_1502_sep_54_sep_0: X
v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0: X
v_sep_inc3_1040_sep_43_sep_2: X
....
v_sep_fail_1502_sep_54_sep_0: X
v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0: X
v_sep_inc3_1040_sep_43_sep_2: X
....(0=0) & (v_sep_fail_1502_sep_54_sep_0($67)) -> 1=0.
(($67-1=0) & (-$68<=0) & ($69>0) & ($68-$69>=0)) & (v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0($69,$68)) -> v_sep_fail_1502_sep_54_sep_0($67).
($70-$71<0) & (v_sep_inc3_1040_sep_43_sep_2($71,$70)) -> v_sep_inc3_1040_sep_43_sep_1_sep_46_sep_0($71,$70).
($72=0) & ($71>0) -> v_sep_inc3_1040_sep_43_sep_2($71,$72).

        solution:
          P[<fail_1502@54:0>]($73:bool) = false
          P[<<inc3_1040@43:1>@46:0>]($76:int,$78:int) = ((1 + $78) <= $76)
          P[<inc3_1040@43:2>]($81:int,$83:int) = ((1 + $83) <= $81)
        
      end HcSolver.solve_ub(21608)[4] (0.018997 sec.)
      begin HcSolver.check_validity(21808)[4]
        input:
          P[<fail_1502@54:0>](<fail_1502@54:0>:bool)|- bot
          
          P[<<inc3_1040@43:1>@46:0>](<k_make_array_u_1198@51:1>:int,<k_make_array_u_1198@51:0>:int),
          ((0 <= <k_make_array_u_1198@51:0>) &&
           ((<k_make_array_u_1198@51:1> > 0) &&
            ((<k_make_array_u_1198@51:0> >= <k_make_array_u_1198@51:1>) && <fail_1502@54:0>)))
          |- P[<fail_1502@54:0>](<fail_1502@54:0>:bool)
          
          P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int),
          (<<inc3_1040@43:1>@46:0> < <inc3_1040@43:0>)
          |- P[<<inc3_1040@43:1>@46:0>](<inc3_1040@43:0>:int,<<inc3_1040@43:1>@46:0>:int)
          
           ((<inc3_1040@43:2> = 0) && (<inc3_1040@43:0> > 0))
          |- P[<inc3_1040@43:2>](<inc3_1040@43:0>:int,<inc3_1040@43:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(21808)[4] (0.001000 sec.)
      solution:
        P[<fail_1502@54:0>]($73:bool) = false
        P[<<inc3_1040@43:1>@46:0>]($76:int,$78:int) = ((1 + $78) <= $76)
        P[<inc3_1040@43:2>]($81:int,$83:int) = ((1 + $83) <= $81)
    end YhornInterface.solve(21607)[3] (0.019997 sec.)
    
  end RefTypeInfer.infer_etrs(11152)[2] (0.133980 sec.)
  refinement types:
    main_1495: X
    f_1499: v1:int -> X
    f_1500: v1:int -> v2:int -> X
    main_1045: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1423: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    inc3_1040: v1:int -> (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) -> v6:int -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1198: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1502: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var138:int ->
            var137:int ->
            var136:int -> var135:int -> (var134:int -> (var133:int -> X) -> X) -> var130:int -> (var129:int -> X) -> X
    f_1501: var142:int -> var141:int -> var140:unit -> X
    f_inc3_1497: var152:int ->
                 var151:int -> (var150:int -> (var149:int -> X) -> X) -> (var146:unit -> X) -> var144:int -> X
    f_inc3_1498: var162:int ->
                 var161:int -> var160:int -> (var159:unit -> X) -> (var157:int -> (var156:int -> X) -> X) -> X
    f_update_1496: var176:int ->
                   var175:int ->
                   var174:int ->
                   (var173:int -> (var172:int -> X) -> X) ->
                   ((var169:int -> (var168:int -> X) -> X) -> X) -> var164:int -> X
    k_make_array_u_1209: var182:int -> var181:int -> (var180:int -> X) -> var178:unit -> X
    update_1164: var195:int ->
                 var194:int ->
                 (var193:int -> (var192:int -> X) -> X) ->
                 var189:int -> ((var188:int -> (var187:int -> X) -> X) -> X) -> X
  abstraction types:
    main_1495: X
    f_1499: v1:int -> X
    f_1500: v1:int -> v2:int -> X
    main_1045: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1423: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    inc3_1040: v1:int -> (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) -> v6:int -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1198: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1502: v1:bool -> (v2:unit -> X) -> X
    a_1038: var138:int ->
            var137:int ->
            var136:int -> var135:int -> (var134:int -> (var133:int -> X) -> X) -> var130:int -> (var129:int -> X) -> X
    f_1501: var142:int -> var141:int -> var140:unit -> X
    f_inc3_1497: var152:int ->
                 var151:int -> (var150:int -> (var149:int -> X) -> X) -> (var146:unit -> X) -> var144:int -> X
    f_inc3_1498: var162:int ->
                 var161:int -> var160:int -> (var159:unit -> X) -> (var157:int -> (var156:int -> X) -> X) -> X
    f_update_1496: var176:int ->
                   var175:int ->
                   var174:int ->
                   (var173:int -> (var172:int -> X) -> X) ->
                   ((var169:int -> (var168:int -> X) -> X) -> X) -> var164:int -> X
    k_make_array_u_1209: var182:int -> var181:int -> (var180:int -> X) -> var178:unit -> X
    update_1164: var195:int ->
                 var194:int ->
                 (var193:int -> (var192:int -> X) -> X) ->
                 var189:int -> ((var188:int -> (var187:int -> X) -> X) -> X) -> X
  
end AbsTypeInfer.refine(11151)[1] (0.138979 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1495
  main_1495 -> (rand_int f_1499)
  a_1038 i_1034 n_1035 x_1037 x_1263 des_1036 j_1039 k_update_a_1278 when (i_1034 = j_1039) -> (k_update_a_1278 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1263 des_1036 j_1039 k_update_a_1278 when (
      not (i_1034 = j_1039)) -> (des_1036 i_1034 k_update_a_1278)
  f_1499 x_1453 -> (rand_int (f_1500 x_1453))
  f_1500 x_1453 x_1466 -> (main_1045 x_1453 x_1466 (f_1501 x_1453 x_1466))
  f_1501 x_1453 x_1466 x_1450 -> end
  f_inc3_1497 i_1043 m_1041 a_1042 k_inc3_1327 x_1357 ->
      (update_1164 i_1043 m_1041 a_1042 (x_1357 + 1) (f_inc3_1498 i_1043 m_1041 x_1357 k_inc3_1327))
  f_inc3_1498 i_1043 m_1041 x_1357 k_inc3_1327 x_1333 -> (inc3_1040 m_1041 x_1333 (i_1043 + 1) k_inc3_1327)
  f_update_1496 i_1034 n_1035 x_1037 des_1036 k_update_1257 x_1263 ->
      (k_update_1257 (a_1038 i_1034 n_1035 x_1037 x_1263 des_1036))
  fail_1502 b k -> {fail} => (k ())
  inc3_1040 m_1041 a_1042 i_1043 k_inc3_1327 when (i_1043 >= m_1041) -> (k_inc3_1327 ())
  inc3_1040 m_1041 a_1042 i_1043 k_inc3_1327 when (not (i_1043 >= m_1041)) ->
      (a_1042 i_1043 (f_inc3_1497 i_1043 m_1041 a_1042 k_inc3_1327))
  k_main_1423 i_1047 n_1046 k_main_1420 b_1447 when b_1447 ->
      (inc3_1040 n_1046 (make_array_1030 n_1046) i_1047 k_main_1420)
  k_main_1423 i_1047 n_1046 k_main_1420 b_1447 when (not b_1447) -> (k_main_1420 ())
  k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 b_1210 when b_1210 ->
      (k_make_array_u_1209 i_1032 n_1031 k_make_array_1192 ())
  k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 b_1210 when (not b_1210) ->
      (fail_1502 true (k_make_array_u_1209 i_1032 n_1031 k_make_array_1192))
  k_make_array_u_1209 i_1032 n_1031 k_make_array_1192 x_1195 -> (k_make_array_1192 0)
  main_1045 n_1046 i_1047 k_main_1420 when (i_1047 = 0) -> (k_main_1423 i_1047 n_1046 k_main_1420 (n_1046 > 0))
  main_1045 n_1046 i_1047 k_main_1420 when (not (i_1047 = 0)) -> (k_main_1423 i_1047 n_1046 k_main_1420 false)
  make_array_1030 n_1031 i_1032 k_make_array_1192 when (0 <= i_1032) ->
      (k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1192 when (not (0 <= i_1032)) ->
      (k_make_array_u_1198 i_1032 n_1031 k_make_array_1192 false)
  update_1164 i_1034 n_1035 des_1036 x_1037 k_update_1257 ->
      (des_1036 i_1034 (f_update_1496 i_1034 n_1035 x_1037 des_1036 k_update_1257))
Types:
  main_1495 : X
  fail_1502 : (x_1:bool[x_1] -> (unit -> X) -> X)
  inc3_1040 : (x_1:int ->
               (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) -> x_8:int[x_8 >= 0] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  inc3: ((int -> ((int -> int) -> ({x_3:int | x_3 >= 0} -> unit))) /\ 
         (x_7:int -> (({x_11:int | x_11 >= 0 && x_7 >= x_11 + 1} -> int) -> ({x_9:int | x_9 >= 0} -> unit))))

cycles: 2
total: 0.625 sec
  abst: 0.019 sec
  mc: 0.031 sec
  refine: 0.292 sec
    exparam: 0.087 sec
