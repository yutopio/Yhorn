MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi fold_left.ml

parsed::
 let rec fold_left_1030 f_1031 acc_1032 xs_1033 =
   (match xs_1033 with
      | [] -> acc_1032
      | x_1034::xs'_1035 -> fold_left_1030 f_1031 (f_1031 acc_1032 x_1034) xs'_1035) 
 in
 let rec make_list_1036 n_1037 = if n_1037 < 0 then
                                   []
                                 else
                                   n_1037::make_list_1036 (n_1037 - 1) 
 in
 let add_1038 x_1039 y_1040 = x_1039 + y_1040 
 in
 let main_1041 n_1042 m_1043 =
   let xs_1044 = make_list_1036 n_1042 
   in
     if fold_left_1030 add_1038 m_1043 xs_1044 >= m_1043 then
       ()
     else
       {fail} () 
 in
   ()

set_target::
 let rec fold_left_1030 f_1031 acc_1032 xs_1033 =
   (match xs_1033 with
      | [] -> acc_1032
      | x_1034::xs'_1035 -> fold_left_1030 f_1031 (f_1031 acc_1032 x_1034) xs'_1035) 
 in
 let rec make_list_1036 n_1037 = if n_1037 < 0 then
                                   []
                                 else
                                   n_1037::make_list_1036 (n_1037 - 1) 
 in
 let add_1038 x_1039 y_1040 = x_1039 + y_1040 
 in
 let main_1041 n_1042 m_1043 =
   let xs_1044 = make_list_1036 n_1042 
   in
     if fold_left_1030 add_1038 m_1043 xs_1044 >= m_1043 then
       ()
     else
       {fail} () 
 in
 let main_1099 = let arg1_1097 = rand_int () 
                 in
                 let arg2_1098 = rand_int () 
                 in
                   main_1041 arg1_1097 arg2_1098 
 in
   ()

abst_list::
 let rec fold_left_1030 (f_1031:(int -> (int -> int))) (acc_1032:int) (xs_1033:(
   int * (int -> int))) =
   if fst xs_1033 = 0 then
     acc_1032
   else
     if 1 <= fst xs_1033 then
       let xs'_1035 = (fst xs_1033 - 1, fun x_1104 -> (snd xs_1033) (x_1104 + 1)) 
       in
       let x_1034 = (snd xs_1033) 0 
       in
         fold_left_1030 f_1031 (f_1031 acc_1032 x_1034) xs'_1035
     else
       _|_ 
 in
 let rec make_list_1036 (n_1037:int) =
   if n_1037 < 0 then
     (0, fun x_1137 -> _|_)
   else
     let cons_make_list_1133 (x_1131:int) (xs_1132:(int * (int -> int))) =
       (fst xs_1132 + 1, fun i_1130 -> (if i_1130 = 0 then
                                          x_1131
                                        else
                                          (snd xs_1132) (i_1130 - 1))) 
     in
       cons_make_list_1133 n_1037 (make_list_1036 (n_1037 - 1)) 
 in
 let add_1038 (x_1039:int) (y_1040:int) = x_1039 + y_1040 
 in
 let main_1041 (n_1042:int) (m_1043:int) =
   let xs_1044 = make_list_1036 n_1042 
   in
     if fold_left_1030 add_1038 m_1043 xs_1044 >= m_1043 then
       ()
     else
       {fail} () 
 in
 let main_1099 = let arg1_1097 = rand_int () 
                 in
                 let arg2_1098 = rand_int () 
                 in
                   main_1041 arg1_1097 arg2_1098 
 in
   ()

CPS::
 let rec fold_left_1030
   (f_1031:(int -> (int -> ((int -> X) -> X)))) (acc_1032:int) (xs_1033:(
   int * (int -> ((int -> X) -> X)))) (k_fold_left_1215:(int -> X)) =
   if fst xs_1033 = 0 then
     k_fold_left_1215 acc_1032
   else
     if 1 <= fst xs_1033 then
       (snd xs_1033) 0
         (fun x_1262 ->
            f_1031 acc_1032 x_1262
              (fun x_1316 ->
                 fold_left_1030 f_1031 x_1316
                   (fst xs_1033 - 1,
                   fun x_1104 -> fun k_fold_left_xs'_1248 -> (snd xs_1033) (x_1104 + 1) k_fold_left_xs'_1248)
                   k_fold_left_1215))
     else
       _|_ 
 in
 let rec make_list_1036 (n_1037:int) (k_make_list_1368:((int * (int -> ((int -> X) -> X))) -> X)) =
   if n_1037 < 0 then
     k_make_list_1368 (0, fun x_1137 -> fun k_make_list_1380 -> _|_)
   else
     let cons_make_list_1133
       (x_1131:int) (xs_1132:(int * (int -> ((int -> X) -> X)))) (k_make_list_cons_make_list_1427:(
       (int * (int -> ((int -> X) -> X))) -> X)) =
       k_make_list_cons_make_list_1427
         (fst xs_1132 + 1,
         fun i_1130 ->
           fun k_make_list_cons_make_list_1442 ->
             (if i_1130 = 0 then
                k_make_list_cons_make_list_1442 x_1131
              else
                (snd xs_1132) (i_1130 - 1) k_make_list_cons_make_list_1442)) 
     in
       make_list_1036 (n_1037 - 1) (fun x_1505 -> cons_make_list_1133 n_1037 x_1505 k_make_list_1368) 
 in
 let add_1038 (x_1039:int) (y_1040:int) (k_add_1529:(int -> X)) = k_add_1529 (x_1039 + y_1040) 
 in
 let main_1041 (n_1042:int) (m_1043:int) (k_main_1546:(unit -> X)) =
   make_list_1036 n_1042
     (fun x_1552 ->
        fold_left_1030 add_1038 m_1043 x_1552
          (fun x_1580 -> (if x_1580 >= m_1043 then
                            k_main_1546 ()
                          else
                            {|fail|} () k_main_1546))) 
 in
   rand_int_cps () (fun x_1630 -> rand_int_cps () (fun x_1643 -> main_1041 x_1630 x_1643 (fun x_1627 -> end)))

remove_pair::
 let rec fold_left_1030
   (f_1031:(int -> (int -> ((int -> X) -> X)))) (acc_1032:int) (xs1_1033:int) (xs2_1033:(
   int -> ((int -> X) -> X))) (k_fold_left_1215:(int -> X)) =
   if xs1_1033 = 0 then
     k_fold_left_1215 acc_1032
   else
     if 1 <= xs1_1033 then
       xs2_1033 0
         (fun x_1262 ->
            f_1031 acc_1032 x_1262
              (fun x_1316 ->
                 fold_left_1030 f_1031 x_1316 (xs1_1033 - 1)
                   (fun x_1104 -> fun k_fold_left_xs'_1248 -> xs2_1033 (x_1104 + 1) k_fold_left_xs'_1248)
                   k_fold_left_1215))
     else
       _|_ 
 in
 let rec make_list_1036 (n_1037:int) (k_make_list_1368:(int -> ((int -> ((int -> X) -> X)) -> X))) =
   if n_1037 < 0 then
     k_make_list_1368 0 (fun x_1137 -> fun k_make_list_1380 -> _|_)
   else
     let cons_make_list_1133
       (x_1131:int) (xs1_1132:int) (xs2_1132:(int -> ((int -> X) -> X))) (k_make_list_cons_make_list_1427:(
       int -> ((int -> ((int -> X) -> X)) -> X))) =
       k_make_list_cons_make_list_1427 (xs1_1132 + 1)
         (fun i_1130 ->
            fun k_make_list_cons_make_list_1442 ->
              (if i_1130 = 0 then
                 k_make_list_cons_make_list_1442 x_1131
               else
                 xs2_1132 (i_1130 - 1) k_make_list_cons_make_list_1442)) 
     in
       make_list_1036 (n_1037 - 1)
         (fun x1_1505 -> fun x2_1505 -> cons_make_list_1133 n_1037 x1_1505 x2_1505 k_make_list_1368) 
 in
 let add_1038 (x_1039:int) (y_1040:int) (k_add_1529:(int -> X)) = k_add_1529 (x_1039 + y_1040) 
 in
 let main_1041 (n_1042:int) (m_1043:int) (k_main_1546:(unit -> X)) =
   make_list_1036 n_1042
     (fun x1_1552 ->
        fun x2_1552 ->
          fold_left_1030 add_1038 m_1043 x1_1552 x2_1552
            (fun x_1580 -> (if x_1580 >= m_1043 then
                              k_main_1546 ()
                            else
                              {|fail|} () k_main_1546))) 
 in
   rand_int_cps () (fun x_1630 -> rand_int_cps () (fun x_1643 -> main_1041 x_1630 x_1643 (fun x_1627 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1705
  main_1705 -> (rand_int f_1714)
  add_1038 x_1039 y_1040 k_add_1529 -> (k_add_1529 (x_1039 + y_1040))
  br_fold_left_1717 b_1718 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 when b_1718 ->
      (xs2_1033 0 (f_fold_left_1706 acc_1032 xs1_1033 f_1031 k_fold_left_1215 xs2_1033))
  br_fold_left_1717 b_1718 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 when (not b_1718) -> _|_
  cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1427 ->
      (k_make_list_cons_make_list_1427 (xs1_1132 + 1) (f_cons_make_list_1710 n_1037 x_1131 xs1_1132 xs2_1132))
  f_1714 x_1630 -> (rand_int (f_1715 x_1630))
  f_1715 x_1630 x_1643 -> (main_1041 x_1630 x_1643 (f_1716 x_1630 x_1643))
  f_1716 x_1630 x_1643 x_1627 -> end
  f_cons_make_list_1710 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1442 when (
      i_1130 = 0) -> (k_make_list_cons_make_list_1442 x_1131)
  f_cons_make_list_1710 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1442 when (
      not (i_1130 = 0)) -> (xs2_1132 (i_1130 - 1) k_make_list_cons_make_list_1442)
  f_fold_left_1706 acc_1032 xs1_1033 f_1031 k_fold_left_1215 xs2_1033 x_1262 ->
      (f_1031 acc_1032 x_1262 (f_fold_left_1707 acc_1032 x_1262 xs1_1033 f_1031 k_fold_left_1215 xs2_1033))
  f_fold_left_1707 acc_1032 x_1262 xs1_1033 f_1031 k_fold_left_1215 xs2_1033 x_1316 ->
      (fold_left_1030 f_1031 x_1316 (xs1_1033 - 1) (f_fold_left_1708 acc_1032 x_1262 x_1316 xs1_1033 xs2_1033)
        k_fold_left_1215)
  f_fold_left_1708 acc_1032 x_1262 x_1316 xs1_1033 xs2_1033 x_1104 k_fold_left_xs'_1248 ->
      (xs2_1033 (x_1104 + 1) k_fold_left_xs'_1248)
  f_main_1712 m_1043 n_1042 k_main_1546 x1_1552 x2_1552 ->
      (fold_left_1030 add_1038 m_1043 x1_1552 x2_1552 (f_main_1713 m_1043 n_1042 x1_1552 k_main_1546))
  f_main_1713 m_1043 n_1042 x1_1552 k_main_1546 x_1580 when (x_1580 >= m_1043) -> (k_main_1546 ())
  f_main_1713 m_1043 n_1042 x1_1552 k_main_1546 x_1580 when (not (x_1580 >= m_1043)) -> (fail_1719 true k_main_1546)
  f_make_list_1709 n_1037 x_1137 k_make_list_1380 -> _|_
  f_make_list_1711 n_1037 k_make_list_1368 x1_1505 x2_1505 ->
      (cons_make_list_1133 n_1037 n_1037 x1_1505 x2_1505 k_make_list_1368)
  fail_1719 b k -> {fail} => (k ())
  fold_left_1030 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 when (xs1_1033 = 0) -> (k_fold_left_1215 acc_1032)
  fold_left_1030 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 when (
      not (xs1_1033 = 0)) -> (br_fold_left_1717 (1 <= xs1_1033) f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215)
  main_1041 n_1042 m_1043 k_main_1546 -> (make_list_1036 n_1042 (f_main_1712 m_1043 n_1042 k_main_1546))
  make_list_1036 n_1037 k_make_list_1368 when (n_1037 < 0) -> (k_make_list_1368 0 (f_make_list_1709 n_1037))
  make_list_1036 n_1037 k_make_list_1368 when (not (n_1037 < 0)) ->
      (make_list_1036 (n_1037 - 1) (f_make_list_1711 n_1037 k_make_list_1368))
Types:
  main_1705 : X
  fail_1719 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fold_left_1030 : ((int -> int -> (int -> X) -> X) -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X)
  make_list_1036 : (int -> (int -> (int -> (int -> X) -> X) -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1705 ... --> 
  f_1714 ... --> 
  f_1715 ... --> 
  main_1041 ... --> 
  make_list_1036 [1/2] ... --> 
  f_main_1712 ... --> 
  fold_left_1030 [1/2] ... --> 
  f_main_1713 [2/2] ... --> 
  fail_1719 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(183)[1]
  program:
    main_1705  | true = ((Random.int 0) f_1714)
    add_1038 x_1039 y_1040 k_add_1529 | true = (k_add_1529 (x_1039 + y_1040))
    br_fold_left_1717 b_1718 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 | b_1718 = (
    xs2_1033 0
             (f_fold_left_1706 acc_1032
                               xs1_1033
                               f_1031
                               k_fold_left_1215
                               xs2_1033))
    br_fold_left_1717 b_1718 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 | (
    not b_1718) = bot
    cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1427 | true = (
    k_make_list_cons_make_list_1427 (xs1_1132 + 1)
                                    (f_cons_make_list_1710 n_1037
                                                           x_1131
                                                           xs1_1132
                                                           xs2_1132))
    f_1714 x_1630 | true = ((Random.int 0) (f_1715 x_1630))
    f_1715 x_1630 x_1643 | true = (main_1041 x_1630
                                             x_1643
                                             (f_1716 x_1630
                                                     x_1643))
    f_1716 x_1630 x_1643 x_1627 | true = end
    f_cons_make_list_1710 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1442 | (
    i_1130 = 0) = (k_make_list_cons_make_list_1442 x_1131)
    f_cons_make_list_1710 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1442 | (
    not (i_1130 = 0)) = (xs2_1132 (i_1130 - 1)
                                  k_make_list_cons_make_list_1442)
    f_fold_left_1706 acc_1032 xs1_1033 f_1031 k_fold_left_1215 xs2_1033 x_1262 | true = (
    f_1031 acc_1032
           x_1262
           (f_fold_left_1707 acc_1032
                             x_1262
                             xs1_1033
                             f_1031
                             k_fold_left_1215
                             xs2_1033))
    f_fold_left_1707 acc_1032 x_1262 xs1_1033 f_1031 k_fold_left_1215 xs2_1033 x_1316 | true = (
    fold_left_1030
      f_1031
      x_1316
      (xs1_1033 - 1)
      (f_fold_left_1708 acc_1032
                        x_1262
                        x_1316
                        xs1_1033
                        xs2_1033)
      k_fold_left_1215)
    f_fold_left_1708 acc_1032 x_1262 x_1316 xs1_1033 xs2_1033 x_1104 k_fold_left_xs'_1248 | true = (
    xs2_1033 (x_1104 + 1)
             k_fold_left_xs'_1248)
    f_main_1712 m_1043 n_1042 k_main_1546 x1_1552 x2_1552 | true = (fold_left_1030
                                                                    add_1038
                                                                    m_1043
                                                                    x1_1552
                                                                    x2_1552
                                                                    (
                                                                    f_main_1713 m_1043
                                                                    n_1042
                                                                    x1_1552
                                                                    k_main_1546))
    f_main_1713 m_1043 n_1042 x1_1552 k_main_1546 x_1580 | (x_1580 >= m_1043) = (
    k_main_1546 ())
    f_main_1713 m_1043 n_1042 x1_1552 k_main_1546 x_1580 | (not (x_1580 >= m_1043)) = (
    fail_1719 true
              k_main_1546)
    f_make_list_1709 n_1037 x_1137 k_make_list_1380 | true = bot
    f_make_list_1711 n_1037 k_make_list_1368 x1_1505 x2_1505 | true = (
    cons_make_list_1133 n_1037
                        n_1037
                        x1_1505
                        x2_1505
                        k_make_list_1368)
    fail_1719 b k | true = (fail ())
    fold_left_1030 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 | (
    xs1_1033 = 0) = (k_fold_left_1215 acc_1032)
    fold_left_1030 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 | (
    not (xs1_1033 = 0)) = (br_fold_left_1717 (1 <= xs1_1033)
                                             f_1031
                                             acc_1032
                                             xs1_1033
                                             xs2_1033
                                             k_fold_left_1215)
    main_1041 n_1042 m_1043 k_main_1546 | true = (make_list_1036 n_1042
                                                                 (f_main_1712 m_1043
                                                                    n_1042
                                                                    k_main_1546))
    make_list_1036 n_1037 k_make_list_1368 | (n_1037 < 0) = (k_make_list_1368 0
                                                                    (f_make_list_1709 n_1037))
    make_list_1036 n_1037 k_make_list_1368 | (not (n_1037 < 0)) = (make_list_1036
                                                                    (
                                                                    n_1037 - 1)
                                                                    (
                                                                    f_make_list_1711 n_1037
                                                                    k_make_list_1368))
    main_1705:X
    add_1038:int -> int -> (int -> X) -> X
    br_fold_left_1717:bool ->
                      (int -> int -> (int -> X) -> X) -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    cons_make_list_1133:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1714:int -> X
    f_1715:int -> int -> X
    f_1716:int -> int -> unit -> X
    f_cons_make_list_1710:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_fold_left_1706:int ->
                     int -> (int -> int -> (int -> X) -> X) -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_fold_left_1707:int ->
                     int ->
                     int -> (int -> int -> (int -> X) -> X) -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_fold_left_1708:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_main_1712:int -> int -> (unit -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_main_1713:int -> int -> int -> (unit -> X) -> int -> X
    f_make_list_1709:int -> int -> (int -> X) -> X
    f_make_list_1711:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    fail_1719:bool -> (unit -> X) -> X
    fold_left_1030:(int -> int -> (int -> X) -> X) -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    main_1041:int -> int -> (unit -> X) -> X
    make_list_1036:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
  inlined functions: add_1038,br_fold_left_1717,cons_make_list_1133,f_1714,f_1715,f_1716,f_cons_make_list_1710,f_fold_left_1706,f_fold_left_1707,f_fold_left_1708,f_main_1712,f_main_1713,f_make_list_1709,f_make_list_1711,main_1041
  counterexample: 0:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1714@4:0> = var2)
     [true.nop((<f_1715@7:0> = <f_1714@4:0>) && (<f_1715@7:1> = var3))
      [true.((<main_1041@9:0> = <f_1715@7:0>) && (<main_1041@9:1> = <f_1715@7:1>))
       [true.(<make_list_1036@11:0> = <main_1041@9:0>)
        [(<make_list_1036@11:0> < 0).(<<make_list_1036@11:1>@14:0> = 0)
         [true.
          ((<f_main_1712@16:0> = <main_1041@9:1>) &&
           ((<f_main_1712@16:1> = <main_1041@9:0>) && (<f_main_1712@16:3> = <<make_list_1036@11:1>@14:0>)))
          [true.((<fold_left_1030@18:1> = <f_main_1712@16:0>) && (<fold_left_1030@18:2> = <f_main_1712@16:3>))
           [(<fold_left_1030@18:2> = 0).(<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>)
            [true.
             ((<f_main_1713@23:0> = <f_main_1712@16:0>) &&
              ((<f_main_1713@23:1> = <f_main_1712@16:1>) &&
               ((<f_main_1713@23:2> = <f_main_1712@16:3>) && (<f_main_1713@23:4> = <<fold_left_1030@18:4>@21:0>))))
             [(not (<f_main_1713@23:4> >= <f_main_1713@23:0>)).(<fail_1719@26:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(184)[2]
    horn clauses:
      P[<fail_1719@26:0>](<fail_1719@26:0>:bool)|- bot
      
      P[<f_main_1713@23:4>](<f_main_1713@23:0>:int,<f_main_1713@23:1>:int,<f_main_1713@23:2>:int,<f_main_1713@23:4>:int),
      ((<f_main_1713@23:4> < <f_main_1713@23:0>) && <fail_1719@26:0>) |- P[<fail_1719@26:0>](
      <fail_1719@26:0>:bool)
      
      P[<f_main_1712@16:3>](<f_main_1713@23:0>:int,<f_main_1713@23:1>:int,<f_main_1713@23:2>:int),
      P[<<fold_left_1030@18:4>@21:0>](<f_main_1713@23:0>:int,<f_main_1713@23:2>:int,<f_main_1713@23:4>:int)|- P[<f_main_1713@23:4>](
      <f_main_1713@23:0>:int,<f_main_1713@23:1>:int,<f_main_1713@23:2>:int,
      <f_main_1713@23:4>:int)
      
      P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int),
      ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
      |- P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int,
                                         <<fold_left_1030@18:4>@21:0>:int)
      
      P[<f_main_1712@16:3>](<fold_left_1030@18:1>:int,<f_main_1712@16:1>:int,<fold_left_1030@18:2>:int)|- P[<fold_left_1030@18:2>](
      <fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int)
      
      P[<main_1041@9:1>](<f_main_1712@16:1>:int,<f_main_1712@16:0>:int),
      P[<<make_list_1036@11:1>@14:0>](<f_main_1712@16:1>:int,<f_main_1712@16:3>:int)|- P[<f_main_1712@16:3>](
      <f_main_1712@16:0>:int,<f_main_1712@16:1>:int,<f_main_1712@16:3>:int)
      
      P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
      ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
      |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int)
      
      P[<main_1041@9:1>](<make_list_1036@11:0>:int,<main_1041@9:1>:int)|- P[<make_list_1036@11:0>](
      <make_list_1036@11:0>:int)
      
      P[<f_1715@7:1>](<main_1041@9:0>:int,<main_1041@9:1>:int)|- P[<main_1041@9:1>](
      <main_1041@9:0>:int,<main_1041@9:1>:int)
      
      P[<f_1714@4:0>](<f_1715@7:0>:int)|- P[<f_1715@7:1>](<f_1715@7:0>:int,
                                                          <f_1715@7:1>:int)
      
      |- P[<f_1714@4:0>](<f_1714@4:0>:int)
    call trees:
      <main_1705@1>
        <f_1714@4>
          <f_1715@7>
            <main_1041@9>
              <make_list_1036@11>
              </<make_list_1036@11:1>@14>
              <f_main_1712@16>
                <fold_left_1030@18>
                </<fold_left_1030@18:4>@21>
                <f_main_1713@23>
                  <fail_1719@26>
    inlined horn clauses:
      P[<fail_1719@26:0>](<fail_1719@26:0>:bool)|- bot
      
      P[<<make_list_1036@11:1>@14:0>](<f_main_1713@23:1>:int,<f_main_1713@23:2>:int),
      P[<<fold_left_1030@18:4>@21:0>](<f_main_1713@23:0>:int,<f_main_1713@23:2>:int,<f_main_1713@23:4>:int),
      ((<f_main_1713@23:4> < <f_main_1713@23:0>) && <fail_1719@26:0>) |- P[<fail_1719@26:0>](
      <fail_1719@26:0>:bool)
      
      P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int),
      ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
      |- P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int,
                                         <<fold_left_1030@18:4>@21:0>:int)
      
      P[<<make_list_1036@11:1>@14:0>](<f_main_1712@16:1>:int,<fold_left_1030@18:2>:int)|- P[<fold_left_1030@18:2>](
      <fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int)
      
      P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
      ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
      |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int)
      
      |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
    begin ParamSubstInfer.infer(1429)[3]
      
    end ParamSubstInfer.infer(1429)[3] (0.017997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1431)[3]
      
    end RefTypeInfer.elim_coeffs(1431)[3] (0.001000 sec.)
    begin GenHcSolver.solve(1668)[3]
      Horn clauses:
        P[<fail_1719@26:0>](<fail_1719@26:0>:bool)|- bot
        
        P[<<make_list_1036@11:1>@14:0>](<f_main_1713@23:1>:int,<f_main_1713@23:2>:int),
        P[<<fold_left_1030@18:4>@21:0>](<f_main_1713@23:0>:int,<f_main_1713@23:2>:int,<f_main_1713@23:4>:int),
        ((<f_main_1713@23:4> < <f_main_1713@23:0>) && <fail_1719@26:0>) |- P[<fail_1719@26:0>](
        <fail_1719@26:0>:bool)
        
        P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int),
        ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
        |- P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,
                                           <fold_left_1030@18:2>:int,
                                           <<fold_left_1030@18:4>@21:0>:int)
        
        P[<<make_list_1036@11:1>@14:0>](<f_main_1712@16:1>:int,<fold_left_1030@18:2>:int)|- P[<fold_left_1030@18:2>](
        <fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int)
        
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int) = (<fold_left_1030@18:2> = 0)
        P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int,<<fold_left_1030@18:4>@21:0>:int) =
        ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
        P[<fail_1719@26:0>](<fail_1719@26:0>:bool) = false
      upper bounds:
        P[<fail_1719@26:0>](var5:bool) = true
      begin GenHcSolver.classify_pids(2982)[4]
        output:
          [<fail_1719@26:0>]
      end GenHcSolver.classify_pids(2982)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2985)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2986)[5]
          begin InterpProver.interpolate_fresh(2987)[6]
            begin InterpProver.interpolate_log(2988)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2989)[8]
                begin InterpProver.interpolate_simplify(2990)[9]
                  begin InterpProver.interpolate_quick(3003)[10]
                    
                  end InterpProver.interpolate_quick(3003)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(3007)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(3007)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2990)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2989)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2988)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2987)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2986)[5] (0.000000 sec.)
        output:
          P[<fail_1719@26:0>](<fail_1719@26:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2985)[4] (0.000999 sec.)
      Horn clauses:
        P[<<make_list_1036@11:1>@14:0>](<f_main_1713@23:1>:int,<f_main_1713@23:2>:int),
        P[<<fold_left_1030@18:4>@21:0>](<f_main_1713@23:0>:int,<f_main_1713@23:2>:int,<f_main_1713@23:4>:int),
        (<f_main_1713@23:4> < <f_main_1713@23:0>) |- bot
        
        P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int),
        ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
        |- P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,
                                           <fold_left_1030@18:2>:int,
                                           <<fold_left_1030@18:4>@21:0>:int)
        
        P[<<make_list_1036@11:1>@14:0>](<f_main_1712@16:1>:int,<fold_left_1030@18:2>:int)|- P[<fold_left_1030@18:2>](
        <fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int)
        
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int) = (<fold_left_1030@18:2> = 0)
        P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int,<<fold_left_1030@18:4>@21:0>:int) =
        ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
      upper bounds:
        P[<<fold_left_1030@18:4>@21:0>](var6:int,var7:int,var8:int) = ((var7 <> 0) || (var8 >= var6))
      begin GenHcSolver.classify_pids(4640)[4]
        output:
          [<<fold_left_1030@18:4>@21:0>]
      end GenHcSolver.classify_pids(4640)[4] (0.000000 sec.)
      lb:((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
      nub:(not ((<fold_left_1030@18:2> <> 0) || (<<fold_left_1030@18:4>@21:0> >= <fold_left_1030@18:1>)))
      begin ApronInterface.convex_hull_interpolate(4643)[4]
        lb:((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
        nub:(not ((<fold_left_1030@18:2> <> 0) || (<<fold_left_1030@18:4>@21:0> >= <fold_left_1030@18:1>)))
        lb':((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
        nub':(not ((<fold_left_1030@18:2> <> 0) || (<<fold_left_1030@18:4>@21:0> >= <fold_left_1030@18:1>)))
        begin InterpProver.interpolate(4644)[5]
          begin InterpProver.interpolate_fresh(4645)[6]
            begin InterpProver.interpolate_log(4646)[7]
              input1: ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
              input2: (not ((<fold_left_1030@18:2> <> 0) || (<<fold_left_1030@18:4>@21:0> >= <fold_left_1030@18:1>)))
              begin InterpProver.interpolate_check(4647)[8]
                begin InterpProver.interpolate_simplify(4648)[9]
                  begin InterpProver.interpolate_quick(4701)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(4710)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(4711)[12]
                        begin CsisatInterface.interpolate_csisat_log(4712)[13]
                          input1: (0 = v_sep_fold_left_1030_sep_18_sep_2 & v_sep_fold_left_1030_sep_18_sep_1 = v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0)
                          input2: (0 = v_sep_fold_left_1030_sep_18_sep_2 & (1 + v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0) <= v_sep_fold_left_1030_sep_18_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(4713)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(4713)[14] (0.000000 sec.)
                          output: (-2*v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0 + 2*v_sep_fold_left_1030_sep_18_sep_1) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(4712)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0 + 2*v_sep_fold_left_1030_sep_18_sep_1) <= 0
                        after dnf conversion: (((-2*v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0 + 2*v_sep_fold_left_1030_sep_18_sep_1) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(4711)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(4710)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(4701)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4648)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(4647)[8] (0.001000 sec.)
              output: (<fold_left_1030@18:1> <= <<fold_left_1030@18:4>@21:0>)
            end InterpProver.interpolate_log(4646)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(4645)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(4644)[5] (0.001000 sec.)
        output:
          P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int,<<fold_left_1030@18:4>@21:0>:int) =
          (<fold_left_1030@18:1> <= <<fold_left_1030@18:4>@21:0>)
      end ApronInterface.convex_hull_interpolate(4643)[4] (0.001000 sec.)
      Horn clauses:
        P[<<make_list_1036@11:1>@14:0>](<f_main_1712@16:1>:int,<fold_left_1030@18:2>:int)|- P[<fold_left_1030@18:2>](
        <fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int)
        
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int) = (<fold_left_1030@18:2> = 0)
      upper bounds:
        P[<fold_left_1030@18:2>](var9:int,var10:int) = true
      begin GenHcSolver.classify_pids(5590)[4]
        output:
          [<fold_left_1030@18:2>]
      end GenHcSolver.classify_pids(5590)[4] (0.000000 sec.)
      lb:(<fold_left_1030@18:2> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(5593)[4]
        lb:(<fold_left_1030@18:2> = 0)
        nub:false
        lb':(<fold_left_1030@18:2> = 0)
        nub':false
        begin InterpProver.interpolate(5594)[5]
          begin InterpProver.interpolate_fresh(5595)[6]
            begin InterpProver.interpolate_log(5596)[7]
              input1: (<fold_left_1030@18:2> = 0)
              input2: false
              begin InterpProver.interpolate_check(5597)[8]
                begin InterpProver.interpolate_simplify(5598)[9]
                  begin InterpProver.interpolate_quick(5617)[10]
                    
                  end InterpProver.interpolate_quick(5617)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5598)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5597)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(5596)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(5595)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(5594)[5] (0.000000 sec.)
        output:
          P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int) = true
      end ApronInterface.convex_hull_interpolate(5593)[4] (0.000000 sec.)
      Horn clauses:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
      upper bounds:
        P[<<make_list_1036@11:1>@14:0>](var11:int,var12:int) = true
      begin GenHcSolver.classify_pids(6172)[4]
        output:
          [<<make_list_1036@11:1>@14:0>]
      end GenHcSolver.classify_pids(6172)[4] (0.000000 sec.)
      lb:((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(6175)[4]
        lb:((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        nub:false
        lb':((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        nub':false
        begin InterpProver.interpolate(6176)[5]
          begin InterpProver.interpolate_fresh(6177)[6]
            begin InterpProver.interpolate_log(6178)[7]
              input1: ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
              input2: false
              begin InterpProver.interpolate_check(6179)[8]
                begin InterpProver.interpolate_simplify(6180)[9]
                  begin InterpProver.interpolate_quick(6212)[10]
                    
                  end InterpProver.interpolate_quick(6212)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(6180)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(6179)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(6178)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(6177)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(6176)[5] (0.000000 sec.)
        output:
          P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) = true
      end ApronInterface.convex_hull_interpolate(6175)[4] (0.000000 sec.)
      Horn clauses:
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
      upper bounds:
        P[<make_list_1036@11:0>](var13:int) = true
      begin GenHcSolver.classify_pids(6463)[4]
        output:
          [<make_list_1036@11:0>]
      end GenHcSolver.classify_pids(6463)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(6466)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(6467)[5]
          begin InterpProver.interpolate_fresh(6468)[6]
            begin InterpProver.interpolate_log(6469)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(6470)[8]
                begin InterpProver.interpolate_simplify(6471)[9]
                  begin InterpProver.interpolate_quick(6484)[10]
                    
                  end InterpProver.interpolate_quick(6484)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(6471)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(6470)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(6469)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(6468)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(6467)[5] (0.000000 sec.)
        output:
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
      end ApronInterface.convex_hull_interpolate(6466)[4] (0.000000 sec.)
      begin HcSolver.check_validity(6539)[4]
        input:
          P[<fail_1719@26:0>](<fail_1719@26:0>:bool)|- bot
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1713@23:1>:int,<f_main_1713@23:2>:int),
          P[<<fold_left_1030@18:4>@21:0>](<f_main_1713@23:0>:int,<f_main_1713@23:2>:int,<f_main_1713@23:4>:int),
          ((<f_main_1713@23:4> < <f_main_1713@23:0>) && <fail_1719@26:0>) |- P[<fail_1719@26:0>](
          <fail_1719@26:0>:bool)
          
          P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int),
          ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
          |- P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,
                                             <fold_left_1030@18:2>:int,
                                             <<fold_left_1030@18:4>@21:0>:int)
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1712@16:1>:int,<fold_left_1030@18:2>:int)|- P[<fold_left_1030@18:2>](
          <fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int)
          
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
          ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
          |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                             <<make_list_1036@11:1>@14:0>:int)
          
          |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(6539)[4] (0.002000 sec.)
      solution:
        P[<fail_1719@26:0>](<fail_1719@26:0>:bool) = false
        P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int,<<fold_left_1030@18:4>@21:0>:int) =
        (<fold_left_1030@18:1> <= <<fold_left_1030@18:4>@21:0>)
        P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) = true
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
    end GenHcSolver.solve(1668)[3] (0.025996 sec.)
    begin GenHcSolver.solve(6881)[3]
      Horn clauses:
        P[<fail_1719@26:0>](<fail_1719@26:0>:bool)|- bot
        
        P[<<make_list_1036@11:1>@14:0>](<f_main_1713@23:1>:int,<f_main_1713@23:2>:int),
        P[<<fold_left_1030@18:4>@21:0>](<f_main_1713@23:0>:int,<f_main_1713@23:2>:int,<f_main_1713@23:4>:int),
        ((<f_main_1713@23:4> < <f_main_1713@23:0>) && <fail_1719@26:0>) |- P[<fail_1719@26:0>](
        <fail_1719@26:0>:bool)
        
        P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int),
        ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
        |- P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,
                                           <fold_left_1030@18:2>:int,
                                           <<fold_left_1030@18:4>@21:0>:int)
        
        P[<<make_list_1036@11:1>@14:0>](<f_main_1712@16:1>:int,<fold_left_1030@18:2>:int)|- P[<fold_left_1030@18:2>](
        <fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int)
        
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int) = (<fold_left_1030@18:2> = 0)
        P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int,<<fold_left_1030@18:4>@21:0>:int) =
        ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
        P[<fail_1719@26:0>](<fail_1719@26:0>:bool) = false
      upper bounds:
        P[<fail_1719@26:0>](var15:bool) = true
      begin GenHcSolver.classify_pids(8195)[4]
        output:
          [<fail_1719@26:0>]
      end GenHcSolver.classify_pids(8195)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(8198)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(8201)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(8201)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(8206)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(8206)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(8209)[5]
          begin InterpProver.interpolate_fresh(8210)[6]
            begin InterpProver.interpolate_log(8211)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(8212)[8]
                begin InterpProver.interpolate_simplify(8213)[9]
                  begin InterpProver.interpolate_quick(8228)[10]
                    
                  end InterpProver.interpolate_quick(8228)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(8232)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(8232)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(8213)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(8212)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(8211)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(8210)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(8209)[5] (0.000000 sec.)
        output:
          P[<fail_1719@26:0>](<fail_1719@26:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(8198)[4] (0.000000 sec.)
      Horn clauses:
        P[<<make_list_1036@11:1>@14:0>](<f_main_1713@23:1>:int,<f_main_1713@23:2>:int),
        P[<<fold_left_1030@18:4>@21:0>](<f_main_1713@23:0>:int,<f_main_1713@23:2>:int,<f_main_1713@23:4>:int),
        (<f_main_1713@23:4> < <f_main_1713@23:0>) |- bot
        
        P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int),
        ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
        |- P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,
                                           <fold_left_1030@18:2>:int,
                                           <<fold_left_1030@18:4>@21:0>:int)
        
        P[<<make_list_1036@11:1>@14:0>](<f_main_1712@16:1>:int,<fold_left_1030@18:2>:int)|- P[<fold_left_1030@18:2>](
        <fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int)
        
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int) = (<fold_left_1030@18:2> = 0)
        P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int,<<fold_left_1030@18:4>@21:0>:int) =
        ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
      upper bounds:
        P[<<fold_left_1030@18:4>@21:0>](var16:int,var17:int,var18:int) = ((var17 <> 0) || (var18 >= var16))
      begin GenHcSolver.classify_pids(9872)[4]
        output:
          [<<fold_left_1030@18:4>@21:0>]
      end GenHcSolver.classify_pids(9872)[4] (0.000000 sec.)
      lb:((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
      nub:(not ((<fold_left_1030@18:2> <> 0) || (<<fold_left_1030@18:4>@21:0> >= <fold_left_1030@18:1>)))
      begin ApronInterface.convex_hull_interpolate(9875)[4]
        lb:((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
        nub:(not ((<fold_left_1030@18:2> <> 0) || (<<fold_left_1030@18:4>@21:0> >= <fold_left_1030@18:1>)))
        begin ExtFormula.Formula.case_analysis_boolean(9888)[5]
          ts: ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(9888)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(9906)[5]
          ts: ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> < <fold_left_1030@18:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(9906)[5] (0.000000 sec.)
        lb':(((<<fold_left_1030@18:4>@21:0> + (-1 * <fold_left_1030@18:1>)) = 0) && (<fold_left_1030@18:2> = 0))
        nub':((<fold_left_1030@18:2> = 0) &&
              (((-1 + (-1 * <<fold_left_1030@18:4>@21:0>)) + <fold_left_1030@18:1>) >= 0))
        begin InterpProver.interpolate(9912)[5]
          begin InterpProver.interpolate_fresh(9913)[6]
            begin InterpProver.interpolate_log(9914)[7]
              input1: (((<<fold_left_1030@18:4>@21:0> + (-1 * <fold_left_1030@18:1>)) = 0) &&
                       (<fold_left_1030@18:2> = 0))
              input2: ((<fold_left_1030@18:2> = 0) &&
                       (((-1 + (-1 * <<fold_left_1030@18:4>@21:0>)) + <fold_left_1030@18:1>) >= 0))
              begin InterpProver.interpolate_check(9915)[8]
                begin InterpProver.interpolate_simplify(9916)[9]
                  begin InterpProver.interpolate_quick(9975)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(9984)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(9985)[12]
                        begin CsisatInterface.interpolate_csisat_log(9986)[13]
                          input1: (0 = v_sep_fold_left_1030_sep_18_sep_2 & v_sep_fold_left_1030_sep_18_sep_1 = v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0)
                          input2: (0 = v_sep_fold_left_1030_sep_18_sep_2 & (1 + v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0) <= v_sep_fold_left_1030_sep_18_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(9987)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(9987)[14] (0.000000 sec.)
                          output: (-2*v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0 + 2*v_sep_fold_left_1030_sep_18_sep_1) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(9986)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0 + 2*v_sep_fold_left_1030_sep_18_sep_1) <= 0
                        after dnf conversion: (((-2*v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0 + 2*v_sep_fold_left_1030_sep_18_sep_1) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(9985)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(9984)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(9975)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(9916)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(9915)[8] (0.002000 sec.)
              output: (<fold_left_1030@18:1> <= <<fold_left_1030@18:4>@21:0>)
            end InterpProver.interpolate_log(9914)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(9913)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(9912)[5] (0.002000 sec.)
        output:
          P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int,<<fold_left_1030@18:4>@21:0>:int) =
          (<fold_left_1030@18:1> <= <<fold_left_1030@18:4>@21:0>)
      end ApronInterface.convex_hull_interpolate(9875)[4] (0.003000 sec.)
      Horn clauses:
        P[<<make_list_1036@11:1>@14:0>](<f_main_1712@16:1>:int,<fold_left_1030@18:2>:int)|- P[<fold_left_1030@18:2>](
        <fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int)
        
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int) = (<fold_left_1030@18:2> = 0)
      upper bounds:
        P[<fold_left_1030@18:2>](var19:int,var20:int) = true
      begin GenHcSolver.classify_pids(10866)[4]
        output:
          [<fold_left_1030@18:2>]
      end GenHcSolver.classify_pids(10866)[4] (0.000000 sec.)
      lb:(<fold_left_1030@18:2> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(10869)[4]
        lb:(<fold_left_1030@18:2> = 0)
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(10873)[5]
          ts: (<fold_left_1030@18:2> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(10873)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(10879)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(10879)[5] (0.000000 sec.)
        lb':(<fold_left_1030@18:2> = 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(10882)[5]
          begin InterpProver.interpolate_fresh(10883)[6]
            begin InterpProver.interpolate_log(10884)[7]
              input1: (<fold_left_1030@18:2> = 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(10885)[8]
                begin InterpProver.interpolate_simplify(10886)[9]
                  begin InterpProver.interpolate_quick(10906)[10]
                    
                  end InterpProver.interpolate_quick(10906)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(10886)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(10885)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(10884)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(10883)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(10882)[5] (0.000000 sec.)
        output:
          P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int) = true
      end ApronInterface.convex_hull_interpolate(10869)[4] (0.000000 sec.)
      Horn clauses:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
      upper bounds:
        P[<<make_list_1036@11:1>@14:0>](var21:int,var22:int) = true
      begin GenHcSolver.classify_pids(11463)[4]
        output:
          [<<make_list_1036@11:1>@14:0>]
      end GenHcSolver.classify_pids(11463)[4] (0.000000 sec.)
      lb:((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(11466)[4]
        lb:((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(11476)[5]
          ts: ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
          
        end ExtFormula.Formula.case_analysis_boolean(11476)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(11483)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(11483)[5] (0.000000 sec.)
        lb':((<<make_list_1036@11:1>@14:0> = 0) && ((-1 + (-1 * <make_list_1036@11:0>)) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(11486)[5]
          begin InterpProver.interpolate_fresh(11487)[6]
            begin InterpProver.interpolate_log(11488)[7]
              input1: ((<<make_list_1036@11:1>@14:0> = 0) && ((-1 + (-1 * <make_list_1036@11:0>)) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(11489)[8]
                begin InterpProver.interpolate_simplify(11490)[9]
                  begin InterpProver.interpolate_quick(11530)[10]
                    
                  end InterpProver.interpolate_quick(11530)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(11490)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(11489)[8] (0.000999 sec.)
              output: true
            end InterpProver.interpolate_log(11488)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(11487)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(11486)[5] (0.000999 sec.)
        output:
          P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) = true
      end ApronInterface.convex_hull_interpolate(11466)[4] (0.000999 sec.)
      Horn clauses:
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
      upper bounds:
        P[<make_list_1036@11:0>](var23:int) = true
      begin GenHcSolver.classify_pids(11783)[4]
        output:
          [<make_list_1036@11:0>]
      end GenHcSolver.classify_pids(11783)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(11786)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(11789)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(11789)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(11794)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(11794)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(11797)[5]
          begin InterpProver.interpolate_fresh(11798)[6]
            begin InterpProver.interpolate_log(11799)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(11800)[8]
                begin InterpProver.interpolate_simplify(11801)[9]
                  begin InterpProver.interpolate_quick(11815)[10]
                    
                  end InterpProver.interpolate_quick(11815)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(11801)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(11800)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(11799)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(11798)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(11797)[5] (0.000000 sec.)
        output:
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
      end ApronInterface.convex_hull_interpolate(11786)[4] (0.000000 sec.)
      begin HcSolver.check_validity(11872)[4]
        input:
          P[<fail_1719@26:0>](<fail_1719@26:0>:bool)|- bot
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1713@23:1>:int,<f_main_1713@23:2>:int),
          P[<<fold_left_1030@18:4>@21:0>](<f_main_1713@23:0>:int,<f_main_1713@23:2>:int,<f_main_1713@23:4>:int),
          ((<f_main_1713@23:4> < <f_main_1713@23:0>) && <fail_1719@26:0>) |- P[<fail_1719@26:0>](
          <fail_1719@26:0>:bool)
          
          P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int),
          ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
          |- P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,
                                             <fold_left_1030@18:2>:int,
                                             <<fold_left_1030@18:4>@21:0>:int)
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1712@16:1>:int,<fold_left_1030@18:2>:int)|- P[<fold_left_1030@18:2>](
          <fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int)
          
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
          ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
          |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                             <<make_list_1036@11:1>@14:0>:int)
          
          |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(11872)[4] (0.003000 sec.)
      solution:
        P[<fail_1719@26:0>](<fail_1719@26:0>:bool) = false
        P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int,<<fold_left_1030@18:4>@21:0>:int) =
        (<fold_left_1030@18:1> <= <<fold_left_1030@18:4>@21:0>)
        P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) = true
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
    end GenHcSolver.solve(6881)[3] (0.031995 sec.)
    begin YhornInterface.solve(12214)[3]
      begin HcSolver.solve_ub(12215)[4]
        encoded:
          P[<fail_1719@26:0>](<fail_1719@26:0>:int)|- bot
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1713@23:1>:int,<f_main_1713@23:2>:int),
          P[<<fold_left_1030@18:4>@21:0>](<f_main_1713@23:0>:int,<f_main_1713@23:2>:int,<f_main_1713@23:4>:int),
          ((<f_main_1713@23:4> < <f_main_1713@23:0>) && (<fail_1719@26:0> = 1))
          |- P[<fail_1719@26:0>](<fail_1719@26:0>:int)
          
          P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int),
          ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
          |- P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,
                                             <fold_left_1030@18:2>:int,
                                             <<fold_left_1030@18:4>@21:0>:int)
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1712@16:1>:int,<fold_left_1030@18:2>:int)|- P[<fold_left_1030@18:2>](
          <fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int)
          
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
          ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
          |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                             <<make_list_1036@11:1>@14:0>:int)
          
          |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
        input to Yhorn:
          P[<fail_1719@26:0>](<fail_1719@26:0>:int)|- bot
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1713@23:1>:int,<f_main_1713@23:2>:int),
          P[<<fold_left_1030@18:4>@21:0>](<f_main_1713@23:0>:int,<f_main_1713@23:2>:int,<f_main_1713@23:4>:int),
          ((<f_main_1713@23:4> < <f_main_1713@23:0>) && (<fail_1719@26:0> = 1))
          |- P[<fail_1719@26:0>](<fail_1719@26:0>:int)
          
          P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int),
          ((<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>) && (<fold_left_1030@18:2> = 0))
          |- P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,
                                             <fold_left_1030@18:2>:int,
                                             <<fold_left_1030@18:4>@21:0>:int)
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1712@16:1>:int,<fold_left_1030@18:2>:int)|- P[<fold_left_1030@18:2>](
          <fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int)
          
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
          ((<make_list_1036@11:0> < 0) && (<<make_list_1036@11:1>@14:0> = 0))
          |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                             <<make_list_1036@11:1>@14:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1719_sep_26_sep_0($12)) -> 1=0.
(($12-1=0) & ($13-$14<0)) & (v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0($14,$15,$13)) & (v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($16,$15)) -> v_sep_fail_1719_sep_26_sep_0($12).
(($17=0) & ($18-$19=0)) & (v_sep_fold_left_1030_sep_18_sep_2($19,$17)) -> v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0($19,$17,$18).
(0=0) & (v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($20,$17)) -> v_sep_fold_left_1030_sep_18_sep_2($19,$17).
(($21=0) & ($22<0)) & (v_sep_make_list_1036_sep_11_sep_0($22)) -> v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($22,$21).
0=0 -> v_sep_make_list_1036_sep_11_sep_0($22).


v_sep_fail_1719_sep_26_sep_0: X
v_sep_fold_left_1030_sep_18_sep_2: X
v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0: X
v_sep_make_list_1036_sep_11_sep_0: X
v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0: X
.......
v_sep_fail_1719_sep_26_sep_0: X
v_sep_fold_left_1030_sep_18_sep_2: X
v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0: X
v_sep_make_list_1036_sep_11_sep_0: X
v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0: X
....
v_sep_fail_1719_sep_26_sep_0: X
v_sep_fold_left_1030_sep_18_sep_2: X
v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0: X
v_sep_make_list_1036_sep_11_sep_0: X
v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0: X
......
v_sep_fail_1719_sep_26_sep_0: X
v_sep_fold_left_1030_sep_18_sep_2: X
v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0: X
v_sep_make_list_1036_sep_11_sep_0: X
v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0: X
.......(0=0) & (v_sep_fail_1719_sep_26_sep_0($12)) -> 1=0.
(($12-1=0) & ($13-$14<0)) & (v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0($14,$15,$13)) & (v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($16,$15)) -> v_sep_fail_1719_sep_26_sep_0($12).
(($17=0) & ($18-$19=0)) & (v_sep_fold_left_1030_sep_18_sep_2($19,$17)) -> v_sep_fold_left_1030_sep_18_sep_4_sep_21_sep_0($19,$17,$18).
(0=0) & (v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($20,$17)) -> v_sep_fold_left_1030_sep_18_sep_2($19,$17).
(($21=0) & ($22<0)) & (v_sep_make_list_1036_sep_11_sep_0($22)) -> v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($22,$21).
0=0 -> v_sep_make_list_1036_sep_11_sep_0($22).

          |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
        solution:
          P[<fail_1719@26:0>]($23:bool) = false
          P[<fold_left_1030@18:2>]($38:int,$40:int) = true
          P[<<fold_left_1030@18:4>@21:0>]($26:int,$28:int,$30:int) = ($26 <= $30)
          P[<make_list_1036@11:0>]($43:int) = true
          P[<<make_list_1036@11:1>@14:0>]($33:int,$35:int) = true
        
      end HcSolver.solve_ub(12215)[4] (0.018997 sec.)
      begin HcSolver.check_validity(12375)[4]
        input:
          P[<fail_1719@26:0>](<fail_1719@26:0>:bool)|- bot
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1713@23:1>:int,<f_main_1713@23:2>:int),
          P[<<fold_left_1030@18:4>@21:0>](<f_main_1713@23:0>:int,<f_main_1713@23:2>:int,<f_main_1713@23:4>:int),
          ((<f_main_1713@23:4> < <f_main_1713@23:0>) && <fail_1719@26:0>) |- P[<fail_1719@26:0>](
          <fail_1719@26:0>:bool)
          
          P[<fold_left_1030@18:2>](<fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int),
          ((<fold_left_1030@18:2> = 0) && (<<fold_left_1030@18:4>@21:0> = <fold_left_1030@18:1>))
          |- P[<<fold_left_1030@18:4>@21:0>](<fold_left_1030@18:1>:int,
                                             <fold_left_1030@18:2>:int,
                                             <<fold_left_1030@18:4>@21:0>:int)
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1712@16:1>:int,<fold_left_1030@18:2>:int)|- P[<fold_left_1030@18:2>](
          <fold_left_1030@18:1>:int,<fold_left_1030@18:2>:int)
          
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
          ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
          |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                             <<make_list_1036@11:1>@14:0>:int)
          
          |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(12375)[4] (0.001000 sec.)
      solution:
        P[<fail_1719@26:0>]($23:bool) = false
        P[<fold_left_1030@18:2>]($38:int,$40:int) = true
        P[<<fold_left_1030@18:4>@21:0>]($26:int,$28:int,$30:int) = ($26 <= $30)
        P[<make_list_1036@11:0>]($43:int) = true
        P[<<make_list_1036@11:1>@14:0>]($33:int,$35:int) = true
    end YhornInterface.solve(12214)[3] (0.019997 sec.)
    
  end RefTypeInfer.infer_etrs(184)[2] (0.105984 sec.)
  refinement types:
    main_1705: X
    f_1714: v1:int -> X
    f_1715: v1:int -> v2:int -> X
    main_1041: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1036: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_main_1712: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    fold_left_1030: (v1:int -> v2:int -> (v3:int -> X) -> X) ->
                    v6:int -> v7:int -> (v8:int -> (v9:int -> X) -> X) -> (v12:{v12:int | (v6 <= v12)} -> X) -> X
    f_main_1713: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    fail_1719: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    add_1038: var53:int -> var52:int -> (var51:int -> X) -> X
    br_fold_left_1717: var68:bool ->
                       (var67:int -> var66:int -> (var65:int -> X) -> X) ->
                       var62:int -> var61:int -> (var60:int -> (var59:int -> X) -> X) -> (var56:int -> X) -> X
    cons_make_list_1133: var82:int ->
                         var81:int ->
                         var80:int ->
                         (var79:int -> (var78:int -> X) -> X) ->
                         (var75:int -> (var74:int -> (var73:int -> X) -> X) -> X) -> X
    f_1716: var86:int -> var85:int -> var84:unit -> X
    f_cons_make_list_1710: var97:int ->
                           var96:int ->
                           var95:int -> (var94:int -> (var93:int -> X) -> X) -> var90:int -> (var89:int -> X) -> X
    f_fold_left_1706: var112:int ->
                      var111:int ->
                      (var110:int -> var109:int -> (var108:int -> X) -> X) ->
                      (var105:int -> X) -> (var103:int -> (var102:int -> X) -> X) -> var99:int -> X
    f_fold_left_1707: var128:int ->
                      var127:int ->
                      var126:int ->
                      (var125:int -> var124:int -> (var123:int -> X) -> X) ->
                      (var120:int -> X) -> (var118:int -> (var117:int -> X) -> X) -> var114:int -> X
    f_fold_left_1708: var140:int ->
                      var139:int ->
                      var138:int ->
                      var137:int -> (var136:int -> (var135:int -> X) -> X) -> var132:int -> (var131:int -> X) -> X
    f_make_list_1709: var145:int -> var144:int -> (var143:int -> X) -> X
    f_make_list_1711: var158:int ->
                      (var157:int -> (var156:int -> (var155:int -> X) -> X) -> X) ->
                      var151:int -> (var150:int -> (var149:int -> X) -> X) -> X
  abstraction types:
    main_1705: X
    f_1714: v1:int -> X
    f_1715: v1:int -> v2:int -> X
    main_1041: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1036: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_main_1712: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    fold_left_1030: (v1:int -> v2:int -> (v3:int -> X) -> X) ->
                    v6:int -> v7:int -> (v8:int -> (v9:int -> X) -> X) -> (v12:int[v12 -> (
                                                                    v6 <= v12)] -> X) -> X
    f_main_1713: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    fail_1719: v1:bool -> (v2:unit -> X) -> X
    add_1038: var53:int -> var52:int -> (var51:int -> X) -> X
    br_fold_left_1717: var68:bool ->
                       (var67:int -> var66:int -> (var65:int -> X) -> X) ->
                       var62:int -> var61:int -> (var60:int -> (var59:int -> X) -> X) -> (var56:int -> X) -> X
    cons_make_list_1133: var82:int ->
                         var81:int ->
                         var80:int ->
                         (var79:int -> (var78:int -> X) -> X) ->
                         (var75:int -> (var74:int -> (var73:int -> X) -> X) -> X) -> X
    f_1716: var86:int -> var85:int -> var84:unit -> X
    f_cons_make_list_1710: var97:int ->
                           var96:int ->
                           var95:int -> (var94:int -> (var93:int -> X) -> X) -> var90:int -> (var89:int -> X) -> X
    f_fold_left_1706: var112:int ->
                      var111:int ->
                      (var110:int -> var109:int -> (var108:int -> X) -> X) ->
                      (var105:int -> X) -> (var103:int -> (var102:int -> X) -> X) -> var99:int -> X
    f_fold_left_1707: var128:int ->
                      var127:int ->
                      var126:int ->
                      (var125:int -> var124:int -> (var123:int -> X) -> X) ->
                      (var120:int -> X) -> (var118:int -> (var117:int -> X) -> X) -> var114:int -> X
    f_fold_left_1708: var140:int ->
                      var139:int ->
                      var138:int ->
                      var137:int -> (var136:int -> (var135:int -> X) -> X) -> var132:int -> (var131:int -> X) -> X
    f_make_list_1709: var145:int -> var144:int -> (var143:int -> X) -> X
    f_make_list_1711: var158:int ->
                      (var157:int -> (var156:int -> (var155:int -> X) -> X) -> X) ->
                      var151:int -> (var150:int -> (var149:int -> X) -> X) -> X
  
end AbsTypeInfer.refine(183)[1] (0.110983 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1705
  main_1705 -> (rand_int f_1714)
  add_1038 x_1039 y_1040 k_add_1529 -> (k_add_1529 (x_1039 + y_1040))
  br_fold_left_1717 b_1718 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 when b_1718 ->
      (xs2_1033 0 (f_fold_left_1706 acc_1032 xs1_1033 f_1031 k_fold_left_1215 xs2_1033))
  br_fold_left_1717 b_1718 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 when (not b_1718) -> _|_
  cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1427 ->
      (k_make_list_cons_make_list_1427 (xs1_1132 + 1) (f_cons_make_list_1710 n_1037 x_1131 xs1_1132 xs2_1132))
  f_1714 x_1630 -> (rand_int (f_1715 x_1630))
  f_1715 x_1630 x_1643 -> (main_1041 x_1630 x_1643 (f_1716 x_1630 x_1643))
  f_1716 x_1630 x_1643 x_1627 -> end
  f_cons_make_list_1710 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1442 when (
      i_1130 = 0) -> (k_make_list_cons_make_list_1442 x_1131)
  f_cons_make_list_1710 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1442 when (
      not (i_1130 = 0)) -> (xs2_1132 (i_1130 - 1) k_make_list_cons_make_list_1442)
  f_fold_left_1706 acc_1032 xs1_1033 f_1031 k_fold_left_1215 xs2_1033 x_1262 ->
      (f_1031 acc_1032 x_1262 (f_fold_left_1707 acc_1032 x_1262 xs1_1033 f_1031 k_fold_left_1215 xs2_1033))
  f_fold_left_1707 acc_1032 x_1262 xs1_1033 f_1031 k_fold_left_1215 xs2_1033 x_1316 ->
      (fold_left_1030 f_1031 x_1316 (xs1_1033 - 1) (f_fold_left_1708 acc_1032 x_1262 x_1316 xs1_1033 xs2_1033)
        k_fold_left_1215)
  f_fold_left_1708 acc_1032 x_1262 x_1316 xs1_1033 xs2_1033 x_1104 k_fold_left_xs'_1248 ->
      (xs2_1033 (x_1104 + 1) k_fold_left_xs'_1248)
  f_main_1712 m_1043 n_1042 k_main_1546 x1_1552 x2_1552 ->
      (fold_left_1030 add_1038 m_1043 x1_1552 x2_1552 (f_main_1713 m_1043 n_1042 x1_1552 k_main_1546))
  f_main_1713 m_1043 n_1042 x1_1552 k_main_1546 x_1580 when (x_1580 >= m_1043) -> (k_main_1546 ())
  f_main_1713 m_1043 n_1042 x1_1552 k_main_1546 x_1580 when (not (x_1580 >= m_1043)) -> (fail_1719 true k_main_1546)
  f_make_list_1709 n_1037 x_1137 k_make_list_1380 -> _|_
  f_make_list_1711 n_1037 k_make_list_1368 x1_1505 x2_1505 ->
      (cons_make_list_1133 n_1037 n_1037 x1_1505 x2_1505 k_make_list_1368)
  fail_1719 b k -> {fail} => (k ())
  fold_left_1030 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 when (xs1_1033 = 0) -> (k_fold_left_1215 acc_1032)
  fold_left_1030 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 when (
      not (xs1_1033 = 0)) -> (br_fold_left_1717 (1 <= xs1_1033) f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215)
  main_1041 n_1042 m_1043 k_main_1546 -> (make_list_1036 n_1042 (f_main_1712 m_1043 n_1042 k_main_1546))
  make_list_1036 n_1037 k_make_list_1368 when (n_1037 < 0) -> (k_make_list_1368 0 (f_make_list_1709 n_1037))
  make_list_1036 n_1037 k_make_list_1368 when (not (n_1037 < 0)) ->
      (make_list_1036 (n_1037 - 1) (f_make_list_1711 n_1037 k_make_list_1368))
Types:
  main_1705 : X
  fail_1719 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fold_left_1030 : ((int -> int -> (int -> X) -> X) ->
                    x_8:int -> int -> (int -> (int -> X) -> X) -> (x_17:int[x_8 <= x_17] -> X) -> X)
  make_list_1036 : (int -> (int -> (int -> (int -> X) -> X) -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1705 ... --> 
  f_1714 ... --> 
  f_1715 ... --> 
  main_1041 ... --> 
  make_list_1036 [2/2] ... --> 
  make_list_1036 [1/2] ... --> 
  f_make_list_1711 ... --> 
  cons_make_list_1133 ... --> 
  f_main_1712 ... --> 
  fold_left_1030 [2/2] ... --> 
  br_fold_left_1717 [1/2] ... --> 
  f_cons_make_list_1710 [1/2] ... --> 
  f_fold_left_1706 ... --> 
  add_1038 ... --> 
  f_fold_left_1707 ... --> 
  fold_left_1030 [1/2] ... --> 
  f_main_1713 [2/2] ... --> 
  fail_1719 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(13042)[1]
  program:
    main_1705  | true = ((Random.int 0) f_1714)
    add_1038 x_1039 y_1040 k_add_1529 | true = (k_add_1529 (x_1039 + y_1040))
    br_fold_left_1717 b_1718 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 | b_1718 = (
    xs2_1033 0
             (f_fold_left_1706 acc_1032
                               xs1_1033
                               f_1031
                               k_fold_left_1215
                               xs2_1033))
    br_fold_left_1717 b_1718 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 | (
    not b_1718) = bot
    cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1427 | true = (
    k_make_list_cons_make_list_1427 (xs1_1132 + 1)
                                    (f_cons_make_list_1710 n_1037
                                                           x_1131
                                                           xs1_1132
                                                           xs2_1132))
    f_1714 x_1630 | true = ((Random.int 0) (f_1715 x_1630))
    f_1715 x_1630 x_1643 | true = (main_1041 x_1630
                                             x_1643
                                             (f_1716 x_1630
                                                     x_1643))
    f_1716 x_1630 x_1643 x_1627 | true = end
    f_cons_make_list_1710 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1442 | (
    i_1130 = 0) = (k_make_list_cons_make_list_1442 x_1131)
    f_cons_make_list_1710 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1442 | (
    not (i_1130 = 0)) = (xs2_1132 (i_1130 - 1)
                                  k_make_list_cons_make_list_1442)
    f_fold_left_1706 acc_1032 xs1_1033 f_1031 k_fold_left_1215 xs2_1033 x_1262 | true = (
    f_1031 acc_1032
           x_1262
           (f_fold_left_1707 acc_1032
                             x_1262
                             xs1_1033
                             f_1031
                             k_fold_left_1215
                             xs2_1033))
    f_fold_left_1707 acc_1032 x_1262 xs1_1033 f_1031 k_fold_left_1215 xs2_1033 x_1316 | true = (
    fold_left_1030
      f_1031
      x_1316
      (xs1_1033 - 1)
      (f_fold_left_1708 acc_1032
                        x_1262
                        x_1316
                        xs1_1033
                        xs2_1033)
      k_fold_left_1215)
    f_fold_left_1708 acc_1032 x_1262 x_1316 xs1_1033 xs2_1033 x_1104 k_fold_left_xs'_1248 | true = (
    xs2_1033 (x_1104 + 1)
             k_fold_left_xs'_1248)
    f_main_1712 m_1043 n_1042 k_main_1546 x1_1552 x2_1552 | true = (fold_left_1030
                                                                    add_1038
                                                                    m_1043
                                                                    x1_1552
                                                                    x2_1552
                                                                    (
                                                                    f_main_1713 m_1043
                                                                    n_1042
                                                                    x1_1552
                                                                    k_main_1546))
    f_main_1713 m_1043 n_1042 x1_1552 k_main_1546 x_1580 | (x_1580 >= m_1043) = (
    k_main_1546 ())
    f_main_1713 m_1043 n_1042 x1_1552 k_main_1546 x_1580 | (not (x_1580 >= m_1043)) = (
    fail_1719 true
              k_main_1546)
    f_make_list_1709 n_1037 x_1137 k_make_list_1380 | true = bot
    f_make_list_1711 n_1037 k_make_list_1368 x1_1505 x2_1505 | true = (
    cons_make_list_1133 n_1037
                        n_1037
                        x1_1505
                        x2_1505
                        k_make_list_1368)
    fail_1719 b k | true = (fail ())
    fold_left_1030 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 | (
    xs1_1033 = 0) = (k_fold_left_1215 acc_1032)
    fold_left_1030 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 | (
    not (xs1_1033 = 0)) = (br_fold_left_1717 (1 <= xs1_1033)
                                             f_1031
                                             acc_1032
                                             xs1_1033
                                             xs2_1033
                                             k_fold_left_1215)
    main_1041 n_1042 m_1043 k_main_1546 | true = (make_list_1036 n_1042
                                                                 (f_main_1712 m_1043
                                                                    n_1042
                                                                    k_main_1546))
    make_list_1036 n_1037 k_make_list_1368 | (n_1037 < 0) = (k_make_list_1368 0
                                                                    (f_make_list_1709 n_1037))
    make_list_1036 n_1037 k_make_list_1368 | (not (n_1037 < 0)) = (make_list_1036
                                                                    (
                                                                    n_1037 - 1)
                                                                    (
                                                                    f_make_list_1711 n_1037
                                                                    k_make_list_1368))
    main_1705:X
    add_1038:int -> int -> (int -> X) -> X
    br_fold_left_1717:bool ->
                      (int -> int -> (int -> X) -> X) -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    cons_make_list_1133:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1714:int -> X
    f_1715:int -> int -> X
    f_1716:int -> int -> unit -> X
    f_cons_make_list_1710:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_fold_left_1706:int ->
                     int -> (int -> int -> (int -> X) -> X) -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_fold_left_1707:int ->
                     int ->
                     int -> (int -> int -> (int -> X) -> X) -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_fold_left_1708:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_main_1712:int -> int -> (unit -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_main_1713:int -> int -> int -> (unit -> X) -> int -> X
    f_make_list_1709:int -> int -> (int -> X) -> X
    f_make_list_1711:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    fail_1719:bool -> (unit -> X) -> X
    fold_left_1030:(int -> int -> (int -> X) -> X) -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    main_1041:int -> int -> (unit -> X) -> X
    make_list_1036:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
  inlined functions: add_1038,br_fold_left_1717,cons_make_list_1133,f_1714,f_1715,f_1716,f_cons_make_list_1710,f_fold_left_1706,f_fold_left_1707,f_fold_left_1708,f_main_1712,f_main_1713,f_make_list_1709,f_make_list_1711,main_1041
  counterexample: 0:0:0:0:1:0:0:0:0:1:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1714@32:0> = var159)
     [true.nop((<f_1715@35:0> = <f_1714@32:0>) && (<f_1715@35:1> = var160))
      [true.((<main_1041@37:0> = <f_1715@35:0>) && (<main_1041@37:1> = <f_1715@35:1>))
       [true.(<make_list_1036@39:0> = <main_1041@37:0>)
        [(not (<make_list_1036@39:0> < 0)).(<make_list_1036@42:0> = (<make_list_1036@39:0> - 1))
         [(<make_list_1036@42:0> < 0).(<<make_list_1036@42:1>@45:0> = 0)
          [true.
           ((<f_make_list_1711@47:0> = <make_list_1036@39:0>) &&
            (<f_make_list_1711@47:2> = <<make_list_1036@42:1>@45:0>))
           [true.
            ((<cons_make_list_1133@49:0> = <f_make_list_1711@47:0>) &&
             ((<cons_make_list_1133@49:1> = <f_make_list_1711@47:0>) &&
              (<cons_make_list_1133@49:2> = <f_make_list_1711@47:2>)))
            [true.(<<cons_make_list_1133@49:4>@51:0> = (<cons_make_list_1133@49:2> + 1))
             [true.(<<f_make_list_1711@47:1>@53:0> = <<cons_make_list_1133@49:4>@51:0>)
              [true.(<<make_list_1036@39:1>@55:0> = <<f_make_list_1711@47:1>@53:0>)
               [true.
                ((<f_main_1712@57:0> = <main_1041@37:1>) &&
                 ((<f_main_1712@57:1> = <main_1041@37:0>) && (<f_main_1712@57:3> = <<make_list_1036@39:1>@55:0>)))
                [true.((<fold_left_1030@59:1> = <f_main_1712@57:0>) && (<fold_left_1030@59:2> = <f_main_1712@57:3>))
                 [(not (<fold_left_1030@59:2> = 0)).
                  ((<br_fold_left_1717@62:0> = (1 <= <fold_left_1030@59:2>)) &&
                   ((<br_fold_left_1717@62:2> = <fold_left_1030@59:1>) &&
                    (<br_fold_left_1717@62:3> = <fold_left_1030@59:2>)))
                  [<br_fold_left_1717@62:0>.(<<br_fold_left_1717@62:4>@65:0> = 0)
                   [true.(<<fold_left_1030@59:3>@67:0> = <<br_fold_left_1717@62:4>@65:0>)
                    [true.(<<f_main_1712@57:4>@69:0> = <<fold_left_1030@59:3>@67:0>)
                     [true.(<<<make_list_1036@39:1>@55:1>@71:0> = <<f_main_1712@57:4>@69:0>)
                      [true.(<<<f_make_list_1711@47:1>@53:1>@73:0> = <<<make_list_1036@39:1>@55:1>@71:0>)
                       [true.(<<<cons_make_list_1133@49:4>@51:1>@75:0> = <<<f_make_list_1711@47:1>@53:1>@73:0>)
                        [true.
                         ((<f_cons_make_list_1710@77:0> = <cons_make_list_1133@49:0>) &&
                          ((<f_cons_make_list_1710@77:1> = <cons_make_list_1133@49:1>) &&
                           ((<f_cons_make_list_1710@77:2> = <cons_make_list_1133@49:2>) &&
                            (<f_cons_make_list_1710@77:4> = <<<cons_make_list_1133@49:4>@51:1>@75:0>))))
                         [(<f_cons_make_list_1710@77:4> = 0).
                          (<<f_cons_make_list_1710@77:5>@80:0> = <f_cons_make_list_1710@77:1>)
                          [true.(<<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0> = <<f_cons_make_list_1710@77:5>@80:0>)
                           [true.
                            (<<<<f_make_list_1711@47:1>@53:1>@73:1>@84:0> =
                             <<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>)
                            [true.
                             (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <<<<f_make_list_1711@47:1>@53:1>@73:1>@84:0>)
                             [true.(<<<f_main_1712@57:4>@69:1>@88:0> = <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
                              [true.(<<<fold_left_1030@59:3>@67:1>@90:0> = <<<f_main_1712@57:4>@69:1>@88:0>)
                               [true.(<<<br_fold_left_1717@62:4>@65:1>@92:0> = <<<fold_left_1030@59:3>@67:1>@90:0>)
                                [true.
                                 ((<f_fold_left_1706@94:0> = <br_fold_left_1717@62:2>) &&
                                  ((<f_fold_left_1706@94:1> = <br_fold_left_1717@62:3>) &&
                                   (<f_fold_left_1706@94:5> = <<<br_fold_left_1717@62:4>@65:1>@92:0>)))
                                 [true.
                                  ((<<f_fold_left_1706@94:2>@96:0> = <f_fold_left_1706@94:0>) &&
                                   (<<f_fold_left_1706@94:2>@96:1> = <f_fold_left_1706@94:5>))
                                  [true.
                                   ((<<br_fold_left_1717@62:1>@98:0> = <<f_fold_left_1706@94:2>@96:0>) &&
                                    (<<br_fold_left_1717@62:1>@98:1> = <<f_fold_left_1706@94:2>@96:1>))
                                   [true.
                                    ((<<fold_left_1030@59:0>@100:0> = <<br_fold_left_1717@62:1>@98:0>) &&
                                     (<<fold_left_1030@59:0>@100:1> = <<br_fold_left_1717@62:1>@98:1>))
                                    [true.
                                     ((<add_1038@102:0> = <<fold_left_1030@59:0>@100:0>) &&
                                      (<add_1038@102:1> = <<fold_left_1030@59:0>@100:1>))
                                     [true.(<<add_1038@102:2>@104:0> = (<add_1038@102:0> + <add_1038@102:1>))
                                      [true.(<<<fold_left_1030@59:0>@100:2>@106:0> = <<add_1038@102:2>@104:0>)
                                       [true.
                                        (<<<br_fold_left_1717@62:1>@98:2>@108:0> =
                                         <<<fold_left_1030@59:0>@100:2>@106:0>)
                                        [true.
                                         (<<<f_fold_left_1706@94:2>@96:2>@110:0> =
                                          <<<br_fold_left_1717@62:1>@98:2>@108:0>)
                                         [true.
                                          ((<f_fold_left_1707@112:0> = <f_fold_left_1706@94:0>) &&
                                           ((<f_fold_left_1707@112:1> = <f_fold_left_1706@94:5>) &&
                                            ((<f_fold_left_1707@112:2> = <f_fold_left_1706@94:1>) &&
                                             (<f_fold_left_1707@112:6> = <<<f_fold_left_1706@94:2>@96:2>@110:0>))))
                                          [true.
                                           ((<fold_left_1030@114:1> = <f_fold_left_1707@112:6>) &&
                                            (<fold_left_1030@114:2> = (<f_fold_left_1707@112:2> - 1)))
                                           [(<fold_left_1030@114:2> = 0).
                                            (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>)
                                            [true.(<<f_fold_left_1707@112:4>@119:0> = <<fold_left_1030@114:4>@117:0>)
                                             [true.(<<f_fold_left_1706@94:3>@121:0> = <<f_fold_left_1707@112:4>@119:0>)
                                              [true.
                                               (<<br_fold_left_1717@62:5>@123:0> = <<f_fold_left_1706@94:3>@121:0>)
                                               [true.(<<fold_left_1030@59:4>@125:0> = <<br_fold_left_1717@62:5>@123:0>)
                                                [true.
                                                 ((<f_main_1713@127:0> = <f_main_1712@57:0>) &&
                                                  ((<f_main_1713@127:1> = <f_main_1712@57:1>) &&
                                                   ((<f_main_1713@127:2> = <f_main_1712@57:3>) &&
                                                    (<f_main_1713@127:4> = <<fold_left_1030@59:4>@125:0>))))
                                                 [(not (<f_main_1713@127:4> >= <f_main_1713@127:0>)).
                                                  (<fail_1719@130:0> = true)[
                                                  true.error
  begin RefTypeInfer.infer_etrs(13043)[2]
    horn clauses:
      P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
      
      P[<f_main_1713@127:4>](<f_main_1713@127:0>:int,<f_main_1713@127:1>:int,<f_main_1713@127:2>:int,<f_main_1713@127:4>:int),
      ((<f_main_1713@127:4> < <f_main_1713@127:0>) && <fail_1719@130:0>)
      |- P[<fail_1719@130:0>](<fail_1719@130:0>:bool)
      
      P[<f_main_1712@57:3>](<f_main_1713@127:0>:int,<f_main_1713@127:1>:int,<f_main_1713@127:2>:int),
      P[<<fold_left_1030@59:4>@125:0>](<f_main_1713@127:0>:int,<f_main_1713@127:2>:int,<f_main_1713@127:4>:int)|- P[<f_main_1713@127:4>](
      <f_main_1713@127:0>:int,<f_main_1713@127:1>:int,<f_main_1713@127:2>:int,
      <f_main_1713@127:4>:int)
      
      P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
      P[<<br_fold_left_1717@62:5>@123:0>]((1 <= <fold_left_1030@59:2>):bool,<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:4>@125:0>:int),
      (<fold_left_1030@59:2> <> 0)
      |- P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,
                                          <<fold_left_1030@59:4>@125:0>:int)
      
      P[<br_fold_left_1717@62:3>](<br_fold_left_1717@62:0>:bool,<br_fold_left_1717@62:2>:int,<br_fold_left_1717@62:3>:int),
      P[<<f_fold_left_1706@94:3>@121:0>](<br_fold_left_1717@62:2>:int,<br_fold_left_1717@62:3>:int,<<br_fold_left_1717@62:5>@123:0>:int),
      <br_fold_left_1717@62:0>
      |- P[<<br_fold_left_1717@62:5>@123:0>](<br_fold_left_1717@62:0>:bool,
                                             <br_fold_left_1717@62:2>:int,
                                             <br_fold_left_1717@62:3>:int,
                                             <<br_fold_left_1717@62:5>@123:0>:int)
      
      P[<f_fold_left_1706@94:5>](<f_fold_left_1706@94:0>:int,<f_fold_left_1706@94:1>:int,<<f_fold_left_1706@94:2>@96:1>:int),
      P[<<f_fold_left_1707@112:4>@119:0>](<f_fold_left_1706@94:0>:int,<<f_fold_left_1706@94:2>@96:1>:int,<f_fold_left_1706@94:1>:int,<<f_fold_left_1706@94:3>@121:0>:int)|- P[<<f_fold_left_1706@94:3>@121:0>](
      <f_fold_left_1706@94:0>:int,<f_fold_left_1706@94:1>:int,<<f_fold_left_1706@94:3>@121:0>:int)
      
      P[<f_fold_left_1707@112:6>](<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,<f_fold_left_1707@112:2>:int,<fold_left_1030@114:1>:int),
      P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,(-1 + <f_fold_left_1707@112:2>):int,<<f_fold_left_1707@112:4>@119:0>:int)|- P[<<f_fold_left_1707@112:4>@119:0>](
      <f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,<f_fold_left_1707@112:2>:int,
      <<f_fold_left_1707@112:4>@119:0>:int)
      
      P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int),
      ((<fold_left_1030@114:2> = 0) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>))
      |- P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,
                                           <fold_left_1030@114:2>:int,
                                           <<fold_left_1030@114:4>@117:0>:int)
      
      P[<f_fold_left_1707@112:6>](<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,(
                                  1 + <fold_left_1030@114:2>):int,<fold_left_1030@114:1>:int)|- P[<fold_left_1030@114:2>](
      <fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int)
      
      P[<f_fold_left_1706@94:5>](<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:2>:int,<f_fold_left_1707@112:1>:int),
      P[<<<f_fold_left_1706@94:2>@96:2>@110:0>](<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:2>:int,<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,<f_fold_left_1707@112:6>:int)|- P[<f_fold_left_1707@112:6>](
      <f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,<f_fold_left_1707@112:2>:int,
      <f_fold_left_1707@112:6>:int)
      
      P[<br_fold_left_1717@62:3>](true:bool,<f_fold_left_1706@94:0>:int,<f_fold_left_1706@94:1>:int),
      P[<<<br_fold_left_1717@62:1>@98:2>@108:0>](true:bool,<<f_fold_left_1706@94:2>@96:0>:int,<<f_fold_left_1706@94:2>@96:1>:int,<<<f_fold_left_1706@94:2>@96:2>@110:0>:int)|- P[<<<f_fold_left_1706@94:2>@96:2>@110:0>](
      <f_fold_left_1706@94:0>:int,<f_fold_left_1706@94:1>:int,<<f_fold_left_1706@94:2>@96:0>:int,
      <<f_fold_left_1706@94:2>@96:1>:int,<<<f_fold_left_1706@94:2>@96:2>@110:0>:int)
      
      P[<fold_left_1030@59:2>](<br_fold_left_1717@62:2>:int,<br_fold_left_1717@62:3>:int),
      P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<br_fold_left_1717@62:1>@98:0>:int,<<br_fold_left_1717@62:1>@98:1>:int,<<<br_fold_left_1717@62:1>@98:2>@108:0>:int),
      ((<br_fold_left_1717@62:3> <> 0) && (<br_fold_left_1717@62:0> = (1 <= <br_fold_left_1717@62:3>)))
      |- P[<<<br_fold_left_1717@62:1>@98:2>@108:0>](<br_fold_left_1717@62:0>:bool,
                                                    <<br_fold_left_1717@62:1>@98:0>:int,
                                                    <<br_fold_left_1717@62:1>@98:1>:int,
                                                    <<<br_fold_left_1717@62:1>@98:2>@108:0>:int)
      
      P[<f_main_1712@57:3>](<fold_left_1030@59:1>:int,<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
      P[<<add_1038@102:2>@104:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int)|- P[<<<fold_left_1030@59:0>@100:2>@106:0>](
      <<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,
      <<<fold_left_1030@59:0>@100:2>@106:0>:int)
      
      P[<add_1038@102:1>](<add_1038@102:0>:int,<add_1038@102:1>:int),
      (<<add_1038@102:2>@104:0> = (<add_1038@102:0> + <add_1038@102:1>))
      |- P[<<add_1038@102:2>@104:0>](<add_1038@102:0>:int,<add_1038@102:1>:int,
                                     <<add_1038@102:2>@104:0>:int)
      
      P[<f_main_1712@57:3>](<fold_left_1030@59:1>:int,<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
      P[<<fold_left_1030@59:0>@100:1>](<add_1038@102:0>:int,<add_1038@102:1>:int)|- P[<add_1038@102:1>](
      <add_1038@102:0>:int,<add_1038@102:1>:int)
      
      P[<fold_left_1030@59:2>](<br_fold_left_1717@62:2>:int,<br_fold_left_1717@62:3>:int),
      P[<<br_fold_left_1717@62:1>@98:1>]((1 <= <br_fold_left_1717@62:3>):bool,<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
      (<br_fold_left_1717@62:3> <> 0)
      |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                          <<fold_left_1030@59:0>@100:1>:int)
      
      P[<br_fold_left_1717@62:3>](<br_fold_left_1717@62:0>:bool,<f_fold_left_1706@94:0>:int,<f_fold_left_1706@94:1>:int),
      P[<<f_fold_left_1706@94:2>@96:1>](<f_fold_left_1706@94:0>:int,<f_fold_left_1706@94:1>:int,<<br_fold_left_1717@62:1>@98:0>:int,<<br_fold_left_1717@62:1>@98:1>:int),
      <br_fold_left_1717@62:0>
      |- P[<<br_fold_left_1717@62:1>@98:1>](<br_fold_left_1717@62:0>:bool,
                                            <<br_fold_left_1717@62:1>@98:0>:int,
                                            <<br_fold_left_1717@62:1>@98:1>:int)
      
      P[<f_fold_left_1706@94:5>](<f_fold_left_1706@94:0>:int,<f_fold_left_1706@94:1>:int,<<f_fold_left_1706@94:2>@96:1>:int),
      (<<f_fold_left_1706@94:2>@96:0> = <f_fold_left_1706@94:0>)
      |- P[<<f_fold_left_1706@94:2>@96:1>](<f_fold_left_1706@94:0>:int,
                                           <f_fold_left_1706@94:1>:int,
                                           <<f_fold_left_1706@94:2>@96:0>:int,
                                           <<f_fold_left_1706@94:2>@96:1>:int)
      
      P[<br_fold_left_1717@62:3>](true:bool,<f_fold_left_1706@94:0>:int,<f_fold_left_1706@94:1>:int),
      P[<<<br_fold_left_1717@62:4>@65:1>@92:0>](true:bool,<f_fold_left_1706@94:0>:int,<f_fold_left_1706@94:1>:int,0:int,<f_fold_left_1706@94:5>:int)|- P[<f_fold_left_1706@94:5>](
      <f_fold_left_1706@94:0>:int,<f_fold_left_1706@94:1>:int,<f_fold_left_1706@94:5>:int)
      
      P[<fold_left_1030@59:2>](<br_fold_left_1717@62:2>:int,<br_fold_left_1717@62:3>:int),
      P[<<<fold_left_1030@59:3>@67:1>@90:0>](<br_fold_left_1717@62:2>:int,<br_fold_left_1717@62:3>:int,<<br_fold_left_1717@62:4>@65:0>:int,<<<br_fold_left_1717@62:4>@65:1>@92:0>:int),
      P[<br_fold_left_1717@62:3>](<br_fold_left_1717@62:0>:bool,<br_fold_left_1717@62:2>:int,<br_fold_left_1717@62:3>:int),
      ((<br_fold_left_1717@62:3> <> 0) && (<br_fold_left_1717@62:0> = (1 <= <br_fold_left_1717@62:3>)))
      |- P[<<<br_fold_left_1717@62:4>@65:1>@92:0>](<br_fold_left_1717@62:0>:bool,
                                                   <br_fold_left_1717@62:2>:int,
                                                   <br_fold_left_1717@62:3>:int,
                                                   <<br_fold_left_1717@62:4>@65:0>:int,
                                                   <<<br_fold_left_1717@62:4>@65:1>@92:0>:int)
      
      P[<f_main_1712@57:3>](<fold_left_1030@59:1>:int,<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
      P[<<<f_main_1712@57:4>@69:1>@88:0>](<fold_left_1030@59:1>:int,<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
      P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
      <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
      <<<fold_left_1030@59:3>@67:1>@90:0>:int)
      
      P[<main_1041@37:1>](<f_main_1712@57:1>:int,<f_main_1712@57:0>:int),
      P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<f_main_1712@57:3>:int),
      P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<f_main_1712@57:3>:int,<<f_main_1712@57:4>@69:0>:int,<<<f_main_1712@57:4>@69:1>@88:0>:int),
      P[<f_main_1712@57:3>](<f_main_1712@57:0>:int,<f_main_1712@57:1>:int,<f_main_1712@57:3>:int)|- P[<<<f_main_1712@57:4>@69:1>@88:0>](
      <f_main_1712@57:0>:int,<f_main_1712@57:1>:int,<f_main_1712@57:3>:int,
      <<f_main_1712@57:4>@69:0>:int,<<<f_main_1712@57:4>@69:1>@88:0>:int)
      
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
      P[<<f_make_list_1711@47:1>@53:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      P[<<<<f_make_list_1711@47:1>@53:1>@73:1>@84:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int),
      P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      (<make_list_1036@39:0> >= 0)
      |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                       <<make_list_1036@39:1>@55:0>:int,
                                                       <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                       <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
      
      P[<f_make_list_1711@47:2>](<f_make_list_1711@47:0>:int,<cons_make_list_1133@49:2>:int),
      P[<<cons_make_list_1133@49:4>@51:0>](<f_make_list_1711@47:0>:int,<f_make_list_1711@47:0>:int,<cons_make_list_1133@49:2>:int,<<f_make_list_1711@47:1>@53:0>:int),
      P[<<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>](<f_make_list_1711@47:0>:int,<f_make_list_1711@47:0>:int,<cons_make_list_1133@49:2>:int,<<f_make_list_1711@47:1>@53:0>:int,<<<f_make_list_1711@47:1>@53:1>@73:0>:int,<<<<f_make_list_1711@47:1>@53:1>@73:1>@84:0>:int),
      P[<<f_make_list_1711@47:1>@53:0>](<f_make_list_1711@47:0>:int,<<f_make_list_1711@47:1>@53:0>:int)|- P[<<<<f_make_list_1711@47:1>@53:1>@73:1>@84:0>](
      <f_make_list_1711@47:0>:int,<<f_make_list_1711@47:1>@53:0>:int,
      <<<f_make_list_1711@47:1>@53:1>@73:0>:int,<<<<f_make_list_1711@47:1>@53:1>@73:1>@84:0>:int)
      
      P[<cons_make_list_1133@49:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int),
      P[<<f_cons_make_list_1710@77:5>@80:0>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int,<<<cons_make_list_1133@49:4>@51:1>@75:0>:int,<<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>:int),
      P[<<cons_make_list_1133@49:4>@51:0>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int,<<cons_make_list_1133@49:4>@51:0>:int),
      (<<cons_make_list_1133@49:4>@51:0> = (1 + <cons_make_list_1133@49:2>))
      |- P[<<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>](<cons_make_list_1133@49:0>:int,
                                                            <cons_make_list_1133@49:1>:int,
                                                            <cons_make_list_1133@49:2>:int,
                                                            <<cons_make_list_1133@49:4>@51:0>:int,
                                                            <<<cons_make_list_1133@49:4>@51:1>@75:0>:int,
                                                            <<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>:int)
      
      P[<f_cons_make_list_1710@77:4>](<f_cons_make_list_1710@77:0>:int,<f_cons_make_list_1710@77:1>:int,<f_cons_make_list_1710@77:2>:int,<f_cons_make_list_1710@77:4>:int),
      ((<f_cons_make_list_1710@77:4> = 0) && (<<f_cons_make_list_1710@77:5>@80:0> = <f_cons_make_list_1710@77:1>))
      |- P[<<f_cons_make_list_1710@77:5>@80:0>](<f_cons_make_list_1710@77:0>:int,
                                                <f_cons_make_list_1710@77:1>:int,
                                                <f_cons_make_list_1710@77:2>:int,
                                                <f_cons_make_list_1710@77:4>:int,
                                                <<f_cons_make_list_1710@77:5>@80:0>:int)
      
      P[<cons_make_list_1133@49:2>](<f_cons_make_list_1710@77:0>:int,<f_cons_make_list_1710@77:1>:int,<f_cons_make_list_1710@77:2>:int),
      P[<<<cons_make_list_1133@49:4>@51:1>@75:0>](<f_cons_make_list_1710@77:0>:int,<f_cons_make_list_1710@77:1>:int,<f_cons_make_list_1710@77:2>:int,(
                                                  1 + <f_cons_make_list_1710@77:2>):int,<f_cons_make_list_1710@77:4>:int)|- P[<f_cons_make_list_1710@77:4>](
      <f_cons_make_list_1710@77:0>:int,<f_cons_make_list_1710@77:1>:int,
      <f_cons_make_list_1710@77:2>:int,<f_cons_make_list_1710@77:4>:int)
      
      P[<f_make_list_1711@47:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:2>:int),
      P[<<<f_make_list_1711@47:1>@53:1>@73:0>](<cons_make_list_1133@49:0>:int,<<cons_make_list_1133@49:4>@51:0>:int,<<<cons_make_list_1133@49:4>@51:1>@75:0>:int),
      P[<cons_make_list_1133@49:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int),
      (<cons_make_list_1133@49:0> = <cons_make_list_1133@49:1>)
      |- P[<<<cons_make_list_1133@49:4>@51:1>@75:0>](<cons_make_list_1133@49:0>:int,
                                                     <cons_make_list_1133@49:1>:int,
                                                     <cons_make_list_1133@49:2>:int,
                                                     <<cons_make_list_1133@49:4>@51:0>:int,
                                                     <<<cons_make_list_1133@49:4>@51:1>@75:0>:int)
      
      P[<make_list_1036@39:0>](<f_make_list_1711@47:0>:int),
      P[<<<make_list_1036@39:1>@55:1>@71:0>](<f_make_list_1711@47:0>:int,<<f_make_list_1711@47:1>@53:0>:int,<<<f_make_list_1711@47:1>@53:1>@73:0>:int),
      (<f_make_list_1711@47:0> >= 0)
      |- P[<<<f_make_list_1711@47:1>@53:1>@73:0>](<f_make_list_1711@47:0>:int,
                                                  <<f_make_list_1711@47:1>@53:0>:int,
                                                  <<<f_make_list_1711@47:1>@53:1>@73:0>:int)
      
      P[<main_1041@37:1>](<make_list_1036@39:0>:int,<f_main_1712@57:0>:int),
      P[<<f_main_1712@57:4>@69:0>](<f_main_1712@57:0>:int,<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
      <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
      
      P[<f_main_1712@57:3>](<f_main_1712@57:0>:int,<f_main_1712@57:1>:int,<f_main_1712@57:3>:int),
      P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<f_main_1712@57:3>:int,<<f_main_1712@57:4>@69:0>:int)|- P[<<f_main_1712@57:4>@69:0>](
      <f_main_1712@57:0>:int,<f_main_1712@57:1>:int,<f_main_1712@57:3>:int,
      <<f_main_1712@57:4>@69:0>:int)
      
      P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
      P[<<br_fold_left_1717@62:4>@65:0>]((1 <= <fold_left_1030@59:2>):bool,<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int),
      (<fold_left_1030@59:2> <> 0)
      |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,
                                         <<fold_left_1030@59:3>@67:0>:int)
      
      P[<br_fold_left_1717@62:3>](<br_fold_left_1717@62:0>:bool,<br_fold_left_1717@62:2>:int,<br_fold_left_1717@62:3>:int),
      ((<<br_fold_left_1717@62:4>@65:0> = 0) && <br_fold_left_1717@62:0>)
      |- P[<<br_fold_left_1717@62:4>@65:0>](<br_fold_left_1717@62:0>:bool,
                                            <br_fold_left_1717@62:2>:int,
                                            <br_fold_left_1717@62:3>:int,
                                            <<br_fold_left_1717@62:4>@65:0>:int)
      
      P[<fold_left_1030@59:2>](<br_fold_left_1717@62:2>:int,<br_fold_left_1717@62:3>:int),
      ((<br_fold_left_1717@62:3> <> 0) && (<br_fold_left_1717@62:0> = (1 <= <br_fold_left_1717@62:3>)))
      |- P[<br_fold_left_1717@62:3>](<br_fold_left_1717@62:0>:bool,<br_fold_left_1717@62:2>:int,
                                     <br_fold_left_1717@62:3>:int)
      
      P[<f_main_1712@57:3>](<fold_left_1030@59:1>:int,<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int)|- P[<fold_left_1030@59:2>](
      <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)
      
      P[<main_1041@37:1>](<f_main_1712@57:1>:int,<f_main_1712@57:0>:int),
      P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<f_main_1712@57:3>:int)|- P[<f_main_1712@57:3>](
      <f_main_1712@57:0>:int,<f_main_1712@57:1>:int,<f_main_1712@57:3>:int)
      
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
      P[<<f_make_list_1711@47:1>@53:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      (<make_list_1036@39:0> >= 0)
      |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int)
      
      P[<f_make_list_1711@47:2>](<f_make_list_1711@47:0>:int,<cons_make_list_1133@49:2>:int),
      P[<<cons_make_list_1133@49:4>@51:0>](<f_make_list_1711@47:0>:int,<f_make_list_1711@47:0>:int,<cons_make_list_1133@49:2>:int,<<f_make_list_1711@47:1>@53:0>:int)|- P[<<f_make_list_1711@47:1>@53:0>](
      <f_make_list_1711@47:0>:int,<<f_make_list_1711@47:1>@53:0>:int)
      
      P[<cons_make_list_1133@49:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int),
      (<<cons_make_list_1133@49:4>@51:0> = (1 + <cons_make_list_1133@49:2>))
      |- P[<<cons_make_list_1133@49:4>@51:0>](<cons_make_list_1133@49:0>:int,
                                              <cons_make_list_1133@49:1>:int,
                                              <cons_make_list_1133@49:2>:int,
                                              <<cons_make_list_1133@49:4>@51:0>:int)
      
      P[<f_make_list_1711@47:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:2>:int),
      (<cons_make_list_1133@49:0> = <cons_make_list_1133@49:1>)
      |- P[<cons_make_list_1133@49:2>](<cons_make_list_1133@49:0>:int,
                                       <cons_make_list_1133@49:1>:int,
                                       <cons_make_list_1133@49:2>:int)
      
      P[<make_list_1036@39:0>](<f_make_list_1711@47:0>:int),
      P[<<make_list_1036@42:1>@45:0>]((-1 + <f_make_list_1711@47:0>):int,<f_make_list_1711@47:2>:int),
      (<f_make_list_1711@47:0> >= 0)
      |- P[<f_make_list_1711@47:2>](<f_make_list_1711@47:0>:int,<f_make_list_1711@47:2>:int)
      
      P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
      ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
      |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int)
      
      P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
      |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
      
      P[<main_1041@37:1>](<make_list_1036@39:0>:int,<main_1041@37:1>:int)|- P[<make_list_1036@39:0>](
      <make_list_1036@39:0>:int)
      
      P[<f_1715@35:1>](<main_1041@37:0>:int,<main_1041@37:1>:int)|- P[<main_1041@37:1>](
      <main_1041@37:0>:int,<main_1041@37:1>:int)
      
      P[<f_1714@32:0>](<f_1715@35:0>:int)|- P[<f_1715@35:1>](<f_1715@35:0>:int,
                                                             <f_1715@35:1>:int)
      
      |- P[<f_1714@32:0>](<f_1714@32:0>:int)
    call trees:
      <main_1705@29>
        <f_1714@32>
          <f_1715@35>
            <main_1041@37>
              <make_list_1036@39>
                <make_list_1036@42>
                </<make_list_1036@42:1>@45>
                <f_make_list_1711@47>
                  <cons_make_list_1133@49>
                  </<cons_make_list_1133@49:4>@51>
                </<f_make_list_1711@47:1>@53>
              </<make_list_1036@39:1>@55>
              <f_main_1712@57>
                <fold_left_1030@59>
                  <br_fold_left_1717@62>
                  </<br_fold_left_1717@62:4>@65>
                </<fold_left_1030@59:3>@67>
              </<f_main_1712@57:4>@69>
              <<<make_list_1036@39:1>@55:1>@71>
                <<<f_make_list_1711@47:1>@53:1>@73>
                  <<<cons_make_list_1133@49:4>@51:1>@75>
                    <f_cons_make_list_1710@77>
                    </<f_cons_make_list_1710@77:5>@80>
                  </<<<cons_make_list_1133@49:4>@51:1>@75:1>@82>
                </<<<f_make_list_1711@47:1>@53:1>@73:1>@84>
              </<<<make_list_1036@39:1>@55:1>@71:1>@86>
              <<<f_main_1712@57:4>@69:1>@88>
                <<<fold_left_1030@59:3>@67:1>@90>
                  <<<br_fold_left_1717@62:4>@65:1>@92>
                    <f_fold_left_1706@94>
                    </<f_fold_left_1706@94:2>@96>
                  </<br_fold_left_1717@62:1>@98>
                </<fold_left_1030@59:0>@100>
                <add_1038@102>
                </<add_1038@102:2>@104>
                <<<fold_left_1030@59:0>@100:2>@106>
                  <<<br_fold_left_1717@62:1>@98:2>@108>
                    <<<f_fold_left_1706@94:2>@96:2>@110>
                      <f_fold_left_1707@112>
                        <fold_left_1030@114>
                        </<fold_left_1030@114:4>@117>
                      </<f_fold_left_1707@112:4>@119>
                    </<f_fold_left_1706@94:3>@121>
                  </<br_fold_left_1717@62:5>@123>
                </<fold_left_1030@59:4>@125>
                <f_main_1713@127>
                  <fail_1719@130>
    inlined horn clauses:
      P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
      
      P[<<make_list_1036@39:1>@55:0>](<f_main_1713@127:1>:int,<f_main_1713@127:2>:int),
      P[<<fold_left_1030@59:4>@125:0>](<f_main_1713@127:0>:int,<f_main_1713@127:2>:int,<f_main_1713@127:4>:int),
      ((<f_main_1713@127:4> < <f_main_1713@127:0>) && <fail_1719@130:0>)
      |- P[<fail_1719@130:0>](<fail_1719@130:0>:bool)
      
      P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
      P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
      P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
      P[<<fold_left_1030@114:4>@117:0>](var169:int,(-1 + <fold_left_1030@59:2>):int,<<fold_left_1030@59:4>@125:0>:int),
      (<fold_left_1030@59:2> >= 1)
      |- P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,
                                          <<fold_left_1030@59:4>@125:0>:int)
      
      P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int),
      ((<fold_left_1030@114:2> = 0) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>))
      |- P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,
                                           <fold_left_1030@114:2>:int,
                                           <<fold_left_1030@114:4>@117:0>:int)
      
      P[<<<fold_left_1030@59:3>@67:1>@90:0>](<f_fold_left_1707@112:0>:int,(
                                             1 + <fold_left_1030@114:2>):int,0:int,<f_fold_left_1707@112:1>:int),
      P[<fold_left_1030@59:2>](<f_fold_left_1707@112:0>:int,(1 + <fold_left_1030@114:2>):int),
      P[<<<fold_left_1030@59:0>@100:2>@106:0>](<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,<fold_left_1030@114:1>:int),
      (<fold_left_1030@114:2> >= 0) |- P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,
                                                                 <fold_left_1030@114:2>:int)
      
      P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
      P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
      (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
      |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                  <<fold_left_1030@59:0>@100:1>:int,
                                                  <<<fold_left_1030@59:0>@100:2>@106:0>:int)
      
      P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
      P[<fold_left_1030@59:2>](<<fold_left_1030@59:0>@100:0>:int,var172:int), (
      1 <= var172)
      |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                          <<fold_left_1030@59:0>@100:1>:int)
      
      P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
      P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
      P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
      <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
      <<<fold_left_1030@59:3>@67:1>@90:0>:int)
      
      P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
      P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                      -1 + <<make_list_1036@39:1>@55:0>):int),
      P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
       ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
      |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                       <<make_list_1036@39:1>@55:0>:int,
                                                       <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                       <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
      
      P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
      <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
      
      P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
      ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
      |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,
                                         <<fold_left_1030@59:3>@67:0>:int)
      
      P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int)|- P[<fold_left_1030@59:2>](
      <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)
      
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
      P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                      -1 + <<make_list_1036@39:1>@55:0>):int), (
      <make_list_1036@39:0> >= 0)
      |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int)
      
      P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
      ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
      |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int)
      
      P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
      |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
      
      |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
    begin ParamSubstInfer.infer(20172)[3]
      
    end ParamSubstInfer.infer(20172)[3] (0.063990 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(20174)[3]
      
    end RefTypeInfer.elim_coeffs(20174)[3] (0.002999 sec.)
    begin GenHcSolver.solve(20793)[3]
      Horn clauses:
        P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1713@127:1>:int,<f_main_1713@127:2>:int),
        P[<<fold_left_1030@59:4>@125:0>](<f_main_1713@127:0>:int,<f_main_1713@127:2>:int,<f_main_1713@127:4>:int),
        ((<f_main_1713@127:4> < <f_main_1713@127:0>) && <fail_1719@130:0>)
        |- P[<fail_1719@130:0>](<fail_1719@130:0>:bool)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
        P[<<fold_left_1030@114:4>@117:0>](var169:int,(-1 + <fold_left_1030@59:2>):int,<<fold_left_1030@59:4>@125:0>:int),
        (<fold_left_1030@59:2> >= 1)
        |- P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@59:1>:int,
                                            <fold_left_1030@59:2>:int,
                                            <<fold_left_1030@59:4>@125:0>:int)
        
        P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int),
        ((<fold_left_1030@114:2> = 0) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>))
        |- P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,
                                             <fold_left_1030@114:2>:int,
                                             <<fold_left_1030@114:4>@117:0>:int)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<f_fold_left_1707@112:0>:int,(
                                               1 + <fold_left_1030@114:2>):int,0:int,<f_fold_left_1707@112:1>:int),
        P[<fold_left_1030@59:2>](<f_fold_left_1707@112:0>:int,(1 + <fold_left_1030@114:2>):int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,<fold_left_1030@114:1>:int),
        (<fold_left_1030@114:2> >= 0)
        |- P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
        (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
        |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                    <<fold_left_1030@59:0>@100:1>:int,
                                                    <<<fold_left_1030@59:0>@100:2>@106:0>:int)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        P[<fold_left_1030@59:2>](<<fold_left_1030@59:0>@100:0>:int,var172:int), (
        1 <= var172)
        |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                            <<fold_left_1030@59:0>@100:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int),
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int)|- P[<fold_left_1030@59:2>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)
        
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int), (
        <make_list_1036@39:0> >= 0)
        |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                           <<make_list_1036@39:1>@55:0>:int)
        
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
        |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                           <<make_list_1036@42:1>@45:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) =
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1))
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int) =
        ((<make_list_1036@39:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1))
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int) = (<fold_left_1030@59:2> = 1)
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> = 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1)))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<<make_list_1036@39:1>@55:0> = 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> = 0) && (<fold_left_1030@59:2> = 1)))
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (<<fold_left_1030@59:0>@100:1> = 0)
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
        ((<<fold_left_1030@59:0>@100:1> = 0) &&
         (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)))
        P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int) = (<fold_left_1030@114:2> = 0)
        P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int,<<fold_left_1030@114:4>@117:0>:int) =
        ((<fold_left_1030@114:2> = 0) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>))
        P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:4>@125:0>:int) =
        ((<fold_left_1030@59:2> = 1) && (<<fold_left_1030@59:4>@125:0> = <fold_left_1030@59:1>))
        P[<fail_1719@130:0>](<fail_1719@130:0>:bool) = false
      upper bounds:
        P[<<fold_left_1030@59:4>@125:0>](var180:int,var181:int,var182:int) = ((var181 <> 1) || (var182 >= var180))
        P[<<fold_left_1030@114:4>@117:0>](var175:int,var176:int,var177:int) = ((var176 <> 0) || (var177 >= var175))
      begin GenHcSolver.classify_pids(30135)[4]
        output:
          [<<fold_left_1030@114:4>@117:0>;<<fold_left_1030@59:4>@125:0>]
      end GenHcSolver.classify_pids(30135)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(30203)[4]
        lb:(((<fold_left_1030@114:2> = 0) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>)) ||
            ((<fold_left_1030@114:2> = 1) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>)))
        nub:((not ((<fold_left_1030@114:2> <> 0) || (<<fold_left_1030@114:4>@117:0> >= <fold_left_1030@114:1>))) ||
             (not ((<fold_left_1030@114:2> <> 1) || (<<fold_left_1030@114:4>@117:0> >= <fold_left_1030@114:1>))))
        lb':(((<fold_left_1030@114:2> = 0) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>)) ||
             ((<fold_left_1030@114:2> = 1) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>)))
        nub':((not ((<fold_left_1030@114:2> <> 0) || (<<fold_left_1030@114:4>@117:0> >= <fold_left_1030@114:1>))) ||
              (not ((<fold_left_1030@114:2> <> 1) || (<<fold_left_1030@114:4>@117:0> >= <fold_left_1030@114:1>))))
        begin InterpProver.interpolate(30204)[5]
          begin InterpProver.interpolate_fresh(30205)[6]
            begin InterpProver.interpolate_log(30206)[7]
              input1: (((<fold_left_1030@114:2> = 0) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>)) ||
                       ((<fold_left_1030@114:2> = 1) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>)))
              input2: ((not
                          ((<fold_left_1030@114:2> <> 0) || (<<fold_left_1030@114:4>@117:0> >= <fold_left_1030@114:1>))) ||
                       (not
                          ((<fold_left_1030@114:2> <> 1) || (<<fold_left_1030@114:4>@117:0> >= <fold_left_1030@114:1>))))
              begin InterpProver.interpolate_check(30207)[8]
                begin InterpProver.interpolate_simplify(30208)[9]
                  begin InterpProver.interpolate_quick(30337)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(30346)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(30347)[12]
                        begin CsisatInterface.interpolate_csisat_log(30348)[13]
                          input1: ((0 = v_sep_fold_left_1030_sep_114_sep_2 | 1 = v_sep_fold_left_1030_sep_114_sep_2) & v_sep_fold_left_1030_sep_114_sep_1 = v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0)
                          input2: ((0 = v_sep_fold_left_1030_sep_114_sep_2 | 1 = v_sep_fold_left_1030_sep_114_sep_2) & (1 + v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0) <= v_sep_fold_left_1030_sep_114_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(30349)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(30349)[14] (0.001000 sec.)
                          output: (-2*v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0 + 2*v_sep_fold_left_1030_sep_114_sep_1) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(30348)[13] (0.001000 sec.)
                        after simplification: (-2*v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0 + 2*v_sep_fold_left_1030_sep_114_sep_1) <= 0
                        after dnf conversion: (((-2*v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0 + 2*v_sep_fold_left_1030_sep_114_sep_1) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(30347)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(30346)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(30337)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(30208)[9] (0.003000 sec.)
                
              end InterpProver.interpolate_check(30207)[8] (0.003000 sec.)
              output: (<fold_left_1030@114:1> <= <<fold_left_1030@114:4>@117:0>)
            end InterpProver.interpolate_log(30206)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(30205)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(30204)[5] (0.003000 sec.)
        output:
          P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int,<<fold_left_1030@114:4>@117:0>:int) =
          (<fold_left_1030@114:1> <= <<fold_left_1030@114:4>@117:0>)
          P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int,<<fold_left_1030@114:4>@117:0>:int) =
          (<fold_left_1030@114:1> <= <<fold_left_1030@114:4>@117:0>)
      end ApronInterface.convex_hull_interpolate(30203)[4] (0.003000 sec.)
      Horn clauses:
        P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
        ((<fold_left_1030@59:2> >= 1) && (var169 < <fold_left_1030@59:1>)) |- bot
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<f_fold_left_1707@112:0>:int,(
                                               1 + <fold_left_1030@114:2>):int,0:int,<f_fold_left_1707@112:1>:int),
        P[<fold_left_1030@59:2>](<f_fold_left_1707@112:0>:int,(1 + <fold_left_1030@114:2>):int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,<fold_left_1030@114:1>:int),
        (<fold_left_1030@114:2> >= 0)
        |- P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
        (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
        |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                    <<fold_left_1030@59:0>@100:1>:int,
                                                    <<<fold_left_1030@59:0>@100:2>@106:0>:int)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        P[<fold_left_1030@59:2>](<<fold_left_1030@59:0>@100:0>:int,var172:int), (
        1 <= var172)
        |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                            <<fold_left_1030@59:0>@100:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int),
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int)|- P[<fold_left_1030@59:2>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)
        
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int), (
        <make_list_1036@39:0> >= 0)
        |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                           <<make_list_1036@39:1>@55:0>:int)
        
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
        |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                           <<make_list_1036@42:1>@45:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<fail_1719@130:0>](var186:bool) = false
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) =
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1))
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int) =
        ((<make_list_1036@39:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1))
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int) = (<fold_left_1030@59:2> = 1)
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> = 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1)))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<<make_list_1036@39:1>@55:0> = 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> = 0) && (<fold_left_1030@59:2> = 1)))
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (<<fold_left_1030@59:0>@100:1> = 0)
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
        ((<<fold_left_1030@59:0>@100:1> = 0) &&
         (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)))
        P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int) = (<fold_left_1030@114:2> = 0)
      upper bounds:
        P[<fold_left_1030@114:2>](var195:int,var196:int) = true
        P[<fold_left_1030@59:2>](var191:int,var192:int) = true
      begin GenHcSolver.classify_pids(41954)[4]
        output:
          [<fold_left_1030@59:2>;<fold_left_1030@114:2>]
      end GenHcSolver.classify_pids(41954)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(41965)[4]
        lb:((<fold_left_1030@59:2> = 1) || (<fold_left_1030@59:2> = 0))
        nub:false
        lb':((<fold_left_1030@59:2> = 1) || (<fold_left_1030@59:2> = 0))
        nub':false
        begin InterpProver.interpolate(41966)[5]
          begin InterpProver.interpolate_fresh(41967)[6]
            begin InterpProver.interpolate_log(41968)[7]
              input1: ((<fold_left_1030@59:2> = 1) || (<fold_left_1030@59:2> = 0))
              input2: false
              begin InterpProver.interpolate_check(41969)[8]
                begin InterpProver.interpolate_simplify(41970)[9]
                  begin InterpProver.interpolate_quick(41997)[10]
                    
                  end InterpProver.interpolate_quick(41997)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(41970)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(41969)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(41968)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(41967)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(41966)[5] (0.000000 sec.)
        output:
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int) = true
          P[<fold_left_1030@114:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int) = true
      end ApronInterface.convex_hull_interpolate(41965)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
        ((<fold_left_1030@59:2> >= 1) && (var169 < <fold_left_1030@59:1>)) |- bot
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
        (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
        |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                    <<fold_left_1030@59:0>@100:1>:int,
                                                    <<<fold_left_1030@59:0>@100:2>@106:0>:int)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        (1 <= var172)
        |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                            <<fold_left_1030@59:0>@100:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int),
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
        
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int), (
        <make_list_1036@39:0> >= 0)
        |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                           <<make_list_1036@39:1>@55:0>:int)
        
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
        |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                           <<make_list_1036@42:1>@45:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<fail_1719@130:0>](var200:bool) = false
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) =
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1))
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int) =
        ((<make_list_1036@39:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<make_list_1036@39:1>@55:0> = 1) && (<<<make_list_1036@39:1>@55:1>@71:0> = 0)))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<<make_list_1036@39:1>@55:0> = 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> = 0) && (<fold_left_1030@59:2> = 1)))
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (<<fold_left_1030@59:0>@100:1> = 0)
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
        ((<<fold_left_1030@59:0>@100:1> = 0) &&
         (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)))
      upper bounds:
        P[<<make_list_1036@39:1>@55:0>](var209:int,var210:int) = true
        P[<<make_list_1036@42:1>@45:0>](var205:int,var206:int) = true
      begin GenHcSolver.classify_pids(52065)[4]
        output:
          [<<make_list_1036@42:1>@45:0>;<<make_list_1036@39:1>@55:0>]
      end GenHcSolver.classify_pids(52065)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(52076)[4]
        lb:(((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1)) ||
            ((<make_list_1036@42:0> = 0) && (<<make_list_1036@42:1>@45:0> = 1)))
        nub:false
        lb':(((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1)) ||
             ((<make_list_1036@42:0> = 0) && (<<make_list_1036@42:1>@45:0> = 1)))
        nub':false
        begin InterpProver.interpolate(52077)[5]
          begin InterpProver.interpolate_fresh(52078)[6]
            begin InterpProver.interpolate_log(52079)[7]
              input1: (((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1)) ||
                       ((<make_list_1036@42:0> = 0) && (<<make_list_1036@42:1>@45:0> = 1)))
              input2: false
              begin InterpProver.interpolate_check(52080)[8]
                begin InterpProver.interpolate_simplify(52081)[9]
                  begin InterpProver.interpolate_quick(52124)[10]
                    
                  end InterpProver.interpolate_quick(52124)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(52081)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(52080)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(52079)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(52078)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(52077)[5] (0.001000 sec.)
        output:
          P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
      end ApronInterface.convex_hull_interpolate(52076)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
        ((<fold_left_1030@59:2> >= 1) && (var169 < <fold_left_1030@59:1>)) |- bot
        
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
        (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
        |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                    <<fold_left_1030@59:0>@100:1>:int,
                                                    <<<fold_left_1030@59:0>@100:2>@106:0>:int)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        (1 <= var172)
        |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                            <<fold_left_1030@59:0>@100:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<fail_1719@130:0>](var214:bool) = false
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (<<fold_left_1030@59:0>@100:1> >= 0)
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
        ((<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)) &&
         (<<fold_left_1030@59:0>@100:1> >= 0))
      upper bounds:
        P[<make_list_1036@42:0>](var220:int) = true
        P[<make_list_1036@39:0>](var217:int) = true
      begin GenHcSolver.classify_pids(60778)[4]
        output:
          [<make_list_1036@39:0>;<make_list_1036@42:0>]
      end GenHcSolver.classify_pids(60778)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(60789)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(60790)[5]
          begin InterpProver.interpolate_fresh(60791)[6]
            begin InterpProver.interpolate_log(60792)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(60793)[8]
                begin InterpProver.interpolate_simplify(60794)[9]
                  begin InterpProver.interpolate_quick(60807)[10]
                    
                  end InterpProver.interpolate_quick(60807)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(60794)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(60793)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(60792)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(60791)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(60790)[5] (0.000000 sec.)
        output:
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
          P[<make_list_1036@42:0>](<make_list_1036@39:0>:int) = true
      end ApronInterface.convex_hull_interpolate(60789)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
        ((<fold_left_1030@59:2> >= 1) && (var169 < <fold_left_1030@59:1>)) |- bot
        
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
        (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
        |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                    <<fold_left_1030@59:0>@100:1>:int,
                                                    <<<fold_left_1030@59:0>@100:2>@106:0>:int)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        (1 <= var172)
        |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                            <<fold_left_1030@59:0>@100:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<fail_1719@130:0>](var224:bool) = false
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (<<fold_left_1030@59:0>@100:1> >= 0)
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
        ((<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)) &&
         (<<fold_left_1030@59:0>@100:1> >= 0))
      upper bounds:
        P[<fail_1719@130:0>](var227:bool) = true
      begin GenHcSolver.classify_pids(66831)[4]
        output:
          [<fail_1719@130:0>]
      end GenHcSolver.classify_pids(66831)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(66834)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(66835)[5]
          begin InterpProver.interpolate_fresh(66836)[6]
            begin InterpProver.interpolate_log(66837)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(66838)[8]
                begin InterpProver.interpolate_simplify(66839)[9]
                  begin InterpProver.interpolate_quick(66852)[10]
                    
                  end InterpProver.interpolate_quick(66852)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(66856)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(66856)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(66839)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(66838)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(66837)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(66836)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(66835)[5] (0.000000 sec.)
        output:
          P[<fail_1719@130:0>](var224:bool) = false
      end ApronInterface.convex_hull_interpolate(66834)[4] (0.000999 sec.)
      Horn clauses:
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
        ((<fold_left_1030@59:2> >= 1) && (var169 < <fold_left_1030@59:1>)) |- bot
        
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
        (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
        |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                    <<fold_left_1030@59:0>@100:1>:int,
                                                    <<<fold_left_1030@59:0>@100:2>@106:0>:int)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        (1 <= var172)
        |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                            <<fold_left_1030@59:0>@100:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (<<fold_left_1030@59:0>@100:1> >= 0)
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
        ((<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)) &&
         (<<fold_left_1030@59:0>@100:1> >= 0))
      upper bounds:
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](var228:int,var229:int,var230:int) =
        ((var230 >= var228) || (var229 < 0))
      begin GenHcSolver.classify_pids(70772)[4]
        output:
          [<<<fold_left_1030@59:0>@100:2>@106:0>]
      end GenHcSolver.classify_pids(70772)[4] (0.000000 sec.)
      lb:((<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)) &&
          (<<fold_left_1030@59:0>@100:1> >= 0))
      nub:(not
             ((<<<fold_left_1030@59:0>@100:2>@106:0> >= <<fold_left_1030@59:0>@100:0>) ||
              (<<fold_left_1030@59:0>@100:1> < 0)))
      begin ApronInterface.convex_hull_interpolate(70775)[4]
        lb:((<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)) &&
            (<<fold_left_1030@59:0>@100:1> >= 0))
        nub:(not
               ((<<<fold_left_1030@59:0>@100:2>@106:0> >= <<fold_left_1030@59:0>@100:0>) ||
                (<<fold_left_1030@59:0>@100:1> < 0)))
        lb':((<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)) &&
             (<<fold_left_1030@59:0>@100:1> >= 0))
        nub':(not
                ((<<<fold_left_1030@59:0>@100:2>@106:0> >= <<fold_left_1030@59:0>@100:0>) ||
                 (<<fold_left_1030@59:0>@100:1> < 0)))
        begin InterpProver.interpolate(70776)[5]
          begin InterpProver.interpolate_fresh(70777)[6]
            begin InterpProver.interpolate_log(70778)[7]
              input1: ((<<<fold_left_1030@59:0>@100:2>@106:0> =
                        (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)) &&
                       (<<fold_left_1030@59:0>@100:1> >= 0))
              input2: (not
                         ((<<<fold_left_1030@59:0>@100:2>@106:0> >= <<fold_left_1030@59:0>@100:0>) ||
                          (<<fold_left_1030@59:0>@100:1> < 0)))
              begin InterpProver.interpolate_check(70779)[8]
                begin InterpProver.interpolate_simplify(70780)[9]
                  begin InterpProver.interpolate_quick(70847)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(70856)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(70857)[12]
                        begin CsisatInterface.interpolate_csisat_log(70858)[13]
                          input1: (v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0 = (v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_0 + v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1) & 0 <= v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1)
                          input2: (0 <= v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1 & (1 + v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0) <= v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(70859)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(70859)[14] (0.000000 sec.)
                          output: (-2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0 + 2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_0) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(70858)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0 + 2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_0) <= 0
                        after dnf conversion: (((-2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0 + 2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_0) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(70857)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(70856)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(70847)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(70780)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(70779)[8] (0.001000 sec.)
              output: (<<fold_left_1030@59:0>@100:0> <= <<<fold_left_1030@59:0>@100:2>@106:0>)
            end InterpProver.interpolate_log(70778)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(70777)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(70776)[5] (0.001000 sec.)
        output:
          P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
          (<<fold_left_1030@59:0>@100:0> <= <<<fold_left_1030@59:0>@100:2>@106:0>)
      end ApronInterface.convex_hull_interpolate(70775)[4] (0.001000 sec.)
      Horn clauses:
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
        (0 > <<fold_left_1030@59:0>@100:1>) |- bot
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        (1 <= var172)
        |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                            <<fold_left_1030@59:0>@100:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (<<fold_left_1030@59:0>@100:1> >= 0)
      upper bounds:
        P[<<fold_left_1030@59:0>@100:1>](var231:int,var232:int) = (0 <= var232)
      begin GenHcSolver.classify_pids(73802)[4]
        output:
          [<<fold_left_1030@59:0>@100:1>]
      end GenHcSolver.classify_pids(73802)[4] (0.000000 sec.)
      lb:(<<fold_left_1030@59:0>@100:1> >= 0)
      nub:(not (0 <= <<fold_left_1030@59:0>@100:1>))
      begin ApronInterface.convex_hull_interpolate(73805)[4]
        lb:(<<fold_left_1030@59:0>@100:1> >= 0)
        nub:(not (0 <= <<fold_left_1030@59:0>@100:1>))
        lb':(<<fold_left_1030@59:0>@100:1> >= 0)
        nub':(not (0 <= <<fold_left_1030@59:0>@100:1>))
        begin InterpProver.interpolate(73806)[5]
          begin InterpProver.interpolate_fresh(73807)[6]
            begin InterpProver.interpolate_log(73808)[7]
              input1: (<<fold_left_1030@59:0>@100:1> >= 0)
              input2: (not (0 <= <<fold_left_1030@59:0>@100:1>))
              begin InterpProver.interpolate_check(73809)[8]
                begin InterpProver.interpolate_simplify(73810)[9]
                  begin InterpProver.interpolate_quick(73827)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(73836)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(73837)[12]
                        begin CsisatInterface.interpolate_csisat_log(73838)[13]
                          input1: 0 <= v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1
                          input2: (1 + v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(73839)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(73839)[14] (0.001000 sec.)
                          output: -2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(73838)[13] (0.001000 sec.)
                        after simplification: -2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1 <= 0
                        after dnf conversion: ((-2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(73837)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(73836)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(73827)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(73810)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(73809)[8] (0.001000 sec.)
              output: (0 <= <<fold_left_1030@59:0>@100:1>)
            end InterpProver.interpolate_log(73808)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(73807)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(73806)[5] (0.001000 sec.)
        output:
          P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
          (0 <= <<fold_left_1030@59:0>@100:1>)
      end ApronInterface.convex_hull_interpolate(73805)[4] (0.001000 sec.)
      Horn clauses:
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        ((1 <= var172) && (0 > <<fold_left_1030@59:0>@100:1>)) |- bot
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
      upper bounds:
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](var233:int,var234:int,var235:int,var236:int) =
        ((var235 <> 0) || ((1 > var234) || (0 <= var236)))
      begin GenHcSolver.classify_pids(76754)[4]
        output:
          [<<<fold_left_1030@59:3>@67:1>@90:0>]
      end GenHcSolver.classify_pids(76754)[4] (0.000000 sec.)
      lb:((<<fold_left_1030@59:3>@67:0> = 0) &&
          ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
      nub:(not
             ((<<fold_left_1030@59:3>@67:0> <> 0) ||
              ((1 > <fold_left_1030@59:2>) || (0 <= <<<fold_left_1030@59:3>@67:1>@90:0>))))
      begin ApronInterface.convex_hull_interpolate(76757)[4]
        lb:((<<fold_left_1030@59:3>@67:0> = 0) &&
            ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
        nub:(not
               ((<<fold_left_1030@59:3>@67:0> <> 0) ||
                ((1 > <fold_left_1030@59:2>) || (0 <= <<<fold_left_1030@59:3>@67:1>@90:0>))))
        lb':((<<fold_left_1030@59:3>@67:0> = 0) &&
             ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
        nub':(not
                ((<<fold_left_1030@59:3>@67:0> <> 0) ||
                 ((1 > <fold_left_1030@59:2>) || (0 <= <<<fold_left_1030@59:3>@67:1>@90:0>))))
        begin InterpProver.interpolate(76758)[5]
          begin InterpProver.interpolate_fresh(76759)[6]
            begin InterpProver.interpolate_log(76760)[7]
              input1: ((<<fold_left_1030@59:3>@67:0> = 0) &&
                       ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
              input2: (not
                         ((<<fold_left_1030@59:3>@67:0> <> 0) ||
                          ((1 > <fold_left_1030@59:2>) || (0 <= <<<fold_left_1030@59:3>@67:1>@90:0>))))
              begin InterpProver.interpolate_check(76761)[8]
                begin InterpProver.interpolate_simplify(76762)[9]
                  begin InterpProver.interpolate_quick(76867)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(76876)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(76877)[12]
                        begin CsisatInterface.interpolate_csisat_log(76878)[13]
                          input1: (0 = v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0 & 0 <= v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0 & 1 <= v_sep_fold_left_1030_sep_59_sep_2)
                          input2: (0 = v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0 & 1 <= v_sep_fold_left_1030_sep_59_sep_2 & (1 + v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(76879)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(76879)[14] (0.001000 sec.)
                          output: -2*v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(76878)[13] (0.001000 sec.)
                        after simplification: -2*v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(76877)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(76876)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(76867)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(76762)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(76761)[8] (0.001000 sec.)
              output: (0 <= <<<fold_left_1030@59:3>@67:1>@90:0>)
            end InterpProver.interpolate_log(76760)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(76759)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(76758)[5] (0.002000 sec.)
        output:
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
          (0 <= <<<fold_left_1030@59:3>@67:1>@90:0>)
      end ApronInterface.convex_hull_interpolate(76757)[4] (0.002000 sec.)
      Horn clauses:
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
        (0 > <<<fold_left_1030@59:3>@67:1>@90:0>) |- bot
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
      upper bounds:
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](var237:int,var238:int,var239:int,var240:int) = (0 <= var240)
      begin GenHcSolver.classify_pids(79164)[4]
        output:
          [<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>]
      end GenHcSolver.classify_pids(79164)[4] (0.000000 sec.)
      lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<make_list_1036@39:0> >= 0) &&
           ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
      nub:(not (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>))
      begin ApronInterface.convex_hull_interpolate(79167)[4]
        lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
            ((<make_list_1036@39:0> >= 0) &&
             ((<<make_list_1036@39:1>@55:0> >= 1) &&
              (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        nub:(not (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>))
        lb':((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
             ((<make_list_1036@39:0> >= 0) &&
              ((<<make_list_1036@39:1>@55:0> >= 1) &&
               (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        nub':(not (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>))
        begin InterpProver.interpolate(79168)[5]
          begin InterpProver.interpolate_fresh(79169)[6]
            begin InterpProver.interpolate_log(79170)[7]
              input1: ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
                       ((<make_list_1036@39:0> >= 0) &&
                        ((<<make_list_1036@39:1>@55:0> >= 1) &&
                         (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
              input2: (not (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>))
              begin InterpProver.interpolate_check(79171)[8]
                begin InterpProver.interpolate_simplify(79172)[9]
                  begin InterpProver.interpolate_quick(79272)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(79281)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(79282)[12]
                        begin CsisatInterface.interpolate_csisat_log(79283)[13]
                          input1: (0 <= v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 & 1 <= v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0)
                          input2: (1 + v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(79284)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(79284)[14] (0.000000 sec.)
                          output: -2*v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(79283)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(79282)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(79281)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(79272)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(79172)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(79171)[8] (0.001000 sec.)
              output: (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
            end InterpProver.interpolate_log(79170)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(79169)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(79168)[5] (0.002000 sec.)
        output:
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
          (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
      end ApronInterface.convex_hull_interpolate(79167)[4] (0.002000 sec.)
      Horn clauses:
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
      upper bounds:
        P[<<<make_list_1036@39:1>@55:1>@71:0>](var241:int,var242:int,var243:int) = true
      begin GenHcSolver.classify_pids(80251)[4]
        output:
          [<<<make_list_1036@39:1>@55:1>@71:0>]
      end GenHcSolver.classify_pids(80251)[4] (0.000000 sec.)
      lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(80254)[4]
        lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        nub:false
        lb':((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        nub':false
        begin InterpProver.interpolate(80255)[5]
          begin InterpProver.interpolate_fresh(80256)[6]
            begin InterpProver.interpolate_log(80257)[7]
              input1: ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
              input2: false
              begin InterpProver.interpolate_check(80258)[8]
                begin InterpProver.interpolate_simplify(80259)[9]
                  begin InterpProver.interpolate_quick(80298)[10]
                    
                  end InterpProver.interpolate_quick(80298)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(80259)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(80258)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(80257)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(80256)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(80255)[5] (0.000000 sec.)
        output:
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(80254)[4] (0.000000 sec.)
      Horn clauses:
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
      upper bounds:
        P[<<fold_left_1030@59:3>@67:0>](var244:int,var245:int,var246:int) = true
      begin GenHcSolver.classify_pids(80819)[4]
        output:
          [<<fold_left_1030@59:3>@67:0>]
      end GenHcSolver.classify_pids(80819)[4] (0.000000 sec.)
      lb:((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(80822)[4]
        lb:((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        nub:false
        lb':((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        nub':false
        begin InterpProver.interpolate(80823)[5]
          begin InterpProver.interpolate_fresh(80824)[6]
            begin InterpProver.interpolate_log(80825)[7]
              input1: ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
              input2: false
              begin InterpProver.interpolate_check(80826)[8]
                begin InterpProver.interpolate_simplify(80827)[9]
                  begin InterpProver.interpolate_quick(80866)[10]
                    
                  end InterpProver.interpolate_quick(80866)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(80827)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(80826)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(80825)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(80824)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(80823)[5] (0.001000 sec.)
        output:
          P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(80822)[4] (0.001000 sec.)
      begin HcSolver.check_validity(80975)[4]
        input:
          P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1713@127:1>:int,<f_main_1713@127:2>:int),
          P[<<fold_left_1030@59:4>@125:0>](<f_main_1713@127:0>:int,<f_main_1713@127:2>:int,<f_main_1713@127:4>:int),
          ((<f_main_1713@127:4> < <f_main_1713@127:0>) && <fail_1719@130:0>)
          |- P[<fail_1719@130:0>](<fail_1719@130:0>:bool)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
          P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
          P[<<fold_left_1030@114:4>@117:0>](var169:int,(-1 + <fold_left_1030@59:2>):int,<<fold_left_1030@59:4>@125:0>:int),
          (<fold_left_1030@59:2> >= 1)
          |- P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@59:1>:int,
                                              <fold_left_1030@59:2>:int,
                                              <<fold_left_1030@59:4>@125:0>:int)
          
          P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int),
          ((<fold_left_1030@114:2> = 0) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>))
          |- P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,
                                               <fold_left_1030@114:2>:int,
                                               <<fold_left_1030@114:4>@117:0>:int)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<f_fold_left_1707@112:0>:int,(
                                                 1 + <fold_left_1030@114:2>):int,0:int,<f_fold_left_1707@112:1>:int),
          P[<fold_left_1030@59:2>](<f_fold_left_1707@112:0>:int,(1 + <fold_left_1030@114:2>):int),
          P[<<<fold_left_1030@59:0>@100:2>@106:0>](<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,<fold_left_1030@114:1>:int),
          (<fold_left_1030@114:2> >= 0)
          |- P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
          P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
          (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
          |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                      <<fold_left_1030@59:0>@100:1>:int,
                                                      <<<fold_left_1030@59:0>@100:2>@106:0>:int)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
          P[<fold_left_1030@59:2>](<<fold_left_1030@59:0>@100:0>:int,var172:int), (
          1 <= var172)
          |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                              <<fold_left_1030@59:0>@100:1>:int)
          
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
          <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
          <<<fold_left_1030@59:3>@67:1>@90:0>:int)
          
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int),
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
           ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
          |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                           <<make_list_1036@39:1>@55:0>:int,
                                                           <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                           <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
          <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,
          <<<make_list_1036@39:1>@55:1>@71:0>:int)
          
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
          ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
          |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                             <fold_left_1030@59:2>:int,
                                             <<fold_left_1030@59:3>@67:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int)|- P[<fold_left_1030@59:2>](
          <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)
          
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int), (
          <make_list_1036@39:0> >= 0)
          |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                             <<make_list_1036@39:1>@55:0>:int)
          
          P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
          ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
          |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                             <<make_list_1036@42:1>@45:0>:int)
          
          P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), (
          (1 + <make_list_1036@42:0>) >= 0) |- P[<make_list_1036@42:0>](
          <make_list_1036@42:0>:int)
          
          |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(80975)[4] (0.006999 sec.)
      solution:
        P[<fail_1719@130:0>](var224:bool) = false
        P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int,<<fold_left_1030@114:4>@117:0>:int) =
        (<fold_left_1030@114:1> <= <<fold_left_1030@114:4>@117:0>)
        P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int,<<fold_left_1030@114:4>@117:0>:int) =
        (<fold_left_1030@114:1> <= <<fold_left_1030@114:4>@117:0>)
        P[<fold_left_1030@114:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int) = true
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
        (<<fold_left_1030@59:0>@100:0> <= <<<fold_left_1030@59:0>@100:2>@106:0>)
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (0 <= <<fold_left_1030@59:0>@100:1>)
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        (0 <= <<<fold_left_1030@59:3>@67:1>@90:0>)
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        true
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        true
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int) = true
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
        P[<make_list_1036@42:0>](<make_list_1036@39:0>:int) = true
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
    end GenHcSolver.solve(20793)[3] (0.318952 sec.)
    begin GenHcSolver.solve(82398)[3]
      Horn clauses:
        P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1713@127:1>:int,<f_main_1713@127:2>:int),
        P[<<fold_left_1030@59:4>@125:0>](<f_main_1713@127:0>:int,<f_main_1713@127:2>:int,<f_main_1713@127:4>:int),
        ((<f_main_1713@127:4> < <f_main_1713@127:0>) && <fail_1719@130:0>)
        |- P[<fail_1719@130:0>](<fail_1719@130:0>:bool)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
        P[<<fold_left_1030@114:4>@117:0>](var169:int,(-1 + <fold_left_1030@59:2>):int,<<fold_left_1030@59:4>@125:0>:int),
        (<fold_left_1030@59:2> >= 1)
        |- P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@59:1>:int,
                                            <fold_left_1030@59:2>:int,
                                            <<fold_left_1030@59:4>@125:0>:int)
        
        P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int),
        ((<fold_left_1030@114:2> = 0) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>))
        |- P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,
                                             <fold_left_1030@114:2>:int,
                                             <<fold_left_1030@114:4>@117:0>:int)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<f_fold_left_1707@112:0>:int,(
                                               1 + <fold_left_1030@114:2>):int,0:int,<f_fold_left_1707@112:1>:int),
        P[<fold_left_1030@59:2>](<f_fold_left_1707@112:0>:int,(1 + <fold_left_1030@114:2>):int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,<fold_left_1030@114:1>:int),
        (<fold_left_1030@114:2> >= 0)
        |- P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
        (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
        |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                    <<fold_left_1030@59:0>@100:1>:int,
                                                    <<<fold_left_1030@59:0>@100:2>@106:0>:int)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        P[<fold_left_1030@59:2>](<<fold_left_1030@59:0>@100:0>:int,var172:int), (
        1 <= var172)
        |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                            <<fold_left_1030@59:0>@100:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int),
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int)|- P[<fold_left_1030@59:2>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)
        
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int), (
        <make_list_1036@39:0> >= 0)
        |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                           <<make_list_1036@39:1>@55:0>:int)
        
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
        |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                           <<make_list_1036@42:1>@45:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) =
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1))
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int) =
        ((<make_list_1036@39:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1))
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int) = (<fold_left_1030@59:2> = 1)
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> = 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1)))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<<make_list_1036@39:1>@55:0> = 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> = 0) && (<fold_left_1030@59:2> = 1)))
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (<<fold_left_1030@59:0>@100:1> = 0)
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
        ((<<fold_left_1030@59:0>@100:1> = 0) &&
         (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)))
        P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int) = (<fold_left_1030@114:2> = 0)
        P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int,<<fold_left_1030@114:4>@117:0>:int) =
        ((<fold_left_1030@114:2> = 0) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>))
        P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:4>@125:0>:int) =
        ((<fold_left_1030@59:2> = 1) && (<<fold_left_1030@59:4>@125:0> = <fold_left_1030@59:1>))
        P[<fail_1719@130:0>](<fail_1719@130:0>:bool) = false
      upper bounds:
        P[<<fold_left_1030@59:4>@125:0>](var254:int,var255:int,var256:int) = ((var255 <> 1) || (var256 >= var254))
        P[<<fold_left_1030@114:4>@117:0>](var249:int,var250:int,var251:int) = ((var250 <> 0) || (var251 >= var249))
      begin GenHcSolver.classify_pids(91740)[4]
        output:
          [<<fold_left_1030@114:4>@117:0>;<<fold_left_1030@59:4>@125:0>]
      end GenHcSolver.classify_pids(91740)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(91808)[4]
        lb:(((<fold_left_1030@114:2> = 0) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>)) ||
            ((<fold_left_1030@114:2> = 1) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>)))
        nub:((not ((<fold_left_1030@114:2> <> 0) || (<<fold_left_1030@114:4>@117:0> >= <fold_left_1030@114:1>))) ||
             (not ((<fold_left_1030@114:2> <> 1) || (<<fold_left_1030@114:4>@117:0> >= <fold_left_1030@114:1>))))
        begin ExtFormula.Formula.case_analysis_boolean(91846)[5]
          ts: ((<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>) &&
               ((<fold_left_1030@114:2> = 0) || (<fold_left_1030@114:2> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(91846)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(91893)[5]
          ts: ((<<fold_left_1030@114:4>@117:0> < <fold_left_1030@114:1>) &&
               ((<fold_left_1030@114:2> = 0) || (<fold_left_1030@114:2> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(91893)[5] (0.000000 sec.)
        lb':(((<<fold_left_1030@114:4>@117:0> + (-1 * <fold_left_1030@114:1>)) = 0) &&
             (((1 + (-1 * <fold_left_1030@114:2>)) >= 0) && (<fold_left_1030@114:2> >= 0)))
        nub':(((1 + (-1 * <fold_left_1030@114:2>)) >= 0) &&
              ((<fold_left_1030@114:2> >= 0) &&
               (((-1 + (-1 * <<fold_left_1030@114:4>@117:0>)) + <fold_left_1030@114:1>) >= 0)))
        begin InterpProver.interpolate(91903)[5]
          begin InterpProver.interpolate_fresh(91904)[6]
            begin InterpProver.interpolate_log(91905)[7]
              input1: (((<<fold_left_1030@114:4>@117:0> + (-1 * <fold_left_1030@114:1>)) = 0) &&
                       (((1 + (-1 * <fold_left_1030@114:2>)) >= 0) && (<fold_left_1030@114:2> >= 0)))
              input2: (((1 + (-1 * <fold_left_1030@114:2>)) >= 0) &&
                       ((<fold_left_1030@114:2> >= 0) &&
                        (((-1 + (-1 * <<fold_left_1030@114:4>@117:0>)) + <fold_left_1030@114:1>) >= 0)))
              begin InterpProver.interpolate_check(91906)[8]
                begin InterpProver.interpolate_simplify(91907)[9]
                  begin InterpProver.interpolate_quick(92046)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(92055)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(92056)[12]
                        begin CsisatInterface.interpolate_csisat_log(92057)[13]
                          input1: (v_sep_fold_left_1030_sep_114_sep_1 = v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0 & 0 <= v_sep_fold_left_1030_sep_114_sep_2 & v_sep_fold_left_1030_sep_114_sep_2 <= 1)
                          input2: (0 <= v_sep_fold_left_1030_sep_114_sep_2 & v_sep_fold_left_1030_sep_114_sep_2 <= 1 & (1 + v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0) <= v_sep_fold_left_1030_sep_114_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(92058)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(92058)[14] (0.000000 sec.)
                          output: (-2*v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0 + 2*v_sep_fold_left_1030_sep_114_sep_1) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(92057)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0 + 2*v_sep_fold_left_1030_sep_114_sep_1) <= 0
                        after dnf conversion: (((-2*v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0 + 2*v_sep_fold_left_1030_sep_114_sep_1) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(92056)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(92055)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(92046)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(91907)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(91906)[8] (0.002999 sec.)
              output: (<fold_left_1030@114:1> <= <<fold_left_1030@114:4>@117:0>)
            end InterpProver.interpolate_log(91905)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(91904)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(91903)[5] (0.002999 sec.)
        output:
          P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int,<<fold_left_1030@114:4>@117:0>:int) =
          (<fold_left_1030@114:1> <= <<fold_left_1030@114:4>@117:0>)
          P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int,<<fold_left_1030@114:4>@117:0>:int) =
          (<fold_left_1030@114:1> <= <<fold_left_1030@114:4>@117:0>)
      end ApronInterface.convex_hull_interpolate(91808)[4] (0.003999 sec.)
      Horn clauses:
        P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
        ((<fold_left_1030@59:2> >= 1) && (var169 < <fold_left_1030@59:1>)) |- bot
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<f_fold_left_1707@112:0>:int,(
                                               1 + <fold_left_1030@114:2>):int,0:int,<f_fold_left_1707@112:1>:int),
        P[<fold_left_1030@59:2>](<f_fold_left_1707@112:0>:int,(1 + <fold_left_1030@114:2>):int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,<fold_left_1030@114:1>:int),
        (<fold_left_1030@114:2> >= 0)
        |- P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
        (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
        |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                    <<fold_left_1030@59:0>@100:1>:int,
                                                    <<<fold_left_1030@59:0>@100:2>@106:0>:int)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        P[<fold_left_1030@59:2>](<<fold_left_1030@59:0>@100:0>:int,var172:int), (
        1 <= var172)
        |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                            <<fold_left_1030@59:0>@100:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int),
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int)|- P[<fold_left_1030@59:2>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)
        
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int), (
        <make_list_1036@39:0> >= 0)
        |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                           <<make_list_1036@39:1>@55:0>:int)
        
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
        |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                           <<make_list_1036@42:1>@45:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<fail_1719@130:0>](var260:bool) = false
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) =
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1))
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int) =
        ((<make_list_1036@39:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1))
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int) = (<fold_left_1030@59:2> = 1)
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> = 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1)))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<<make_list_1036@39:1>@55:0> = 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> = 0) && (<fold_left_1030@59:2> = 1)))
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (<<fold_left_1030@59:0>@100:1> = 0)
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
        ((<<fold_left_1030@59:0>@100:1> = 0) &&
         (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)))
        P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int) = (<fold_left_1030@114:2> = 0)
      upper bounds:
        P[<fold_left_1030@114:2>](var269:int,var270:int) = true
        P[<fold_left_1030@59:2>](var265:int,var266:int) = true
      begin GenHcSolver.classify_pids(103629)[4]
        output:
          [<fold_left_1030@59:2>;<fold_left_1030@114:2>]
      end GenHcSolver.classify_pids(103629)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(103640)[4]
        lb:((<fold_left_1030@59:2> = 1) || (<fold_left_1030@59:2> = 0))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(103650)[5]
          ts: ((<fold_left_1030@59:2> = 0) || (<fold_left_1030@59:2> = 1))
          
        end ExtFormula.Formula.case_analysis_boolean(103650)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(103658)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(103658)[5] (0.000000 sec.)
        lb':(((1 + (-1 * <fold_left_1030@59:2>)) >= 0) && (<fold_left_1030@59:2> >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(103661)[5]
          begin InterpProver.interpolate_fresh(103662)[6]
            begin InterpProver.interpolate_log(103663)[7]
              input1: (((1 + (-1 * <fold_left_1030@59:2>)) >= 0) && (<fold_left_1030@59:2> >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(103664)[8]
                begin InterpProver.interpolate_simplify(103665)[9]
                  begin InterpProver.interpolate_quick(103703)[10]
                    
                  end InterpProver.interpolate_quick(103703)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(103665)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(103664)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(103663)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(103662)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(103661)[5] (0.001000 sec.)
        output:
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int) = true
          P[<fold_left_1030@114:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int) = true
      end ApronInterface.convex_hull_interpolate(103640)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
        ((<fold_left_1030@59:2> >= 1) && (var169 < <fold_left_1030@59:1>)) |- bot
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
        (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
        |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                    <<fold_left_1030@59:0>@100:1>:int,
                                                    <<<fold_left_1030@59:0>@100:2>@106:0>:int)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        (1 <= var172)
        |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                            <<fold_left_1030@59:0>@100:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
        P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int),
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
        
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int), (
        <make_list_1036@39:0> >= 0)
        |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                           <<make_list_1036@39:1>@55:0>:int)
        
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
        |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                           <<make_list_1036@42:1>@45:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<fail_1719@130:0>](var274:bool) = false
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) =
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1))
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int) =
        ((<make_list_1036@39:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<make_list_1036@39:1>@55:0> = 1) && (<<<make_list_1036@39:1>@55:1>@71:0> = 0)))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<<make_list_1036@39:1>@55:0> = 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> = 0) && (<fold_left_1030@59:2> = 1)))
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (<<fold_left_1030@59:0>@100:1> = 0)
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
        ((<<fold_left_1030@59:0>@100:1> = 0) &&
         (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)))
      upper bounds:
        P[<<make_list_1036@39:1>@55:0>](var283:int,var284:int) = true
        P[<<make_list_1036@42:1>@45:0>](var279:int,var280:int) = true
      begin GenHcSolver.classify_pids(113773)[4]
        output:
          [<<make_list_1036@42:1>@45:0>;<<make_list_1036@39:1>@55:0>]
      end GenHcSolver.classify_pids(113773)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(113784)[4]
        lb:(((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1)) ||
            ((<make_list_1036@42:0> = 0) && (<<make_list_1036@42:1>@45:0> = 1)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(113802)[5]
          ts: (((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1)) ||
               ((<make_list_1036@42:0> = 0) && (<<make_list_1036@42:1>@45:0> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(113802)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(113813)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(113813)[5] (0.000000 sec.)
        lb':((((-1 + <<make_list_1036@42:1>@45:0>) + (-1 * <make_list_1036@42:0>)) = 0) &&
             (((-1 * <make_list_1036@42:0>) >= 0) && ((1 + <make_list_1036@42:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(113816)[5]
          begin InterpProver.interpolate_fresh(113817)[6]
            begin InterpProver.interpolate_log(113818)[7]
              input1: ((((-1 + <<make_list_1036@42:1>@45:0>) + (-1 * <make_list_1036@42:0>)) = 0) &&
                       (((-1 * <make_list_1036@42:0>) >= 0) && ((1 + <make_list_1036@42:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(113819)[8]
                begin InterpProver.interpolate_simplify(113820)[9]
                  begin InterpProver.interpolate_quick(113926)[10]
                    
                  end InterpProver.interpolate_quick(113926)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(113820)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(113819)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(113818)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(113817)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(113816)[5] (0.001000 sec.)
        output:
          P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
      end ApronInterface.convex_hull_interpolate(113784)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
        ((<fold_left_1030@59:2> >= 1) && (var169 < <fold_left_1030@59:1>)) |- bot
        
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
        (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
        |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                    <<fold_left_1030@59:0>@100:1>:int,
                                                    <<<fold_left_1030@59:0>@100:2>@106:0>:int)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        (1 <= var172)
        |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                            <<fold_left_1030@59:0>@100:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<fail_1719@130:0>](var288:bool) = false
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (<<fold_left_1030@59:0>@100:1> >= 0)
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
        ((<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)) &&
         (<<fold_left_1030@59:0>@100:1> >= 0))
      upper bounds:
        P[<make_list_1036@42:0>](var294:int) = true
        P[<make_list_1036@39:0>](var291:int) = true
      begin GenHcSolver.classify_pids(122582)[4]
        output:
          [<make_list_1036@39:0>;<make_list_1036@42:0>]
      end GenHcSolver.classify_pids(122582)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(122593)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(122596)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(122596)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(122601)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(122601)[5] (0.001000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(122604)[5]
          begin InterpProver.interpolate_fresh(122605)[6]
            begin InterpProver.interpolate_log(122606)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(122607)[8]
                begin InterpProver.interpolate_simplify(122608)[9]
                  begin InterpProver.interpolate_quick(122622)[10]
                    
                  end InterpProver.interpolate_quick(122622)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(122608)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(122607)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(122606)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(122605)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(122604)[5] (0.000000 sec.)
        output:
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
          P[<make_list_1036@42:0>](<make_list_1036@39:0>:int) = true
      end ApronInterface.convex_hull_interpolate(122593)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
        ((<fold_left_1030@59:2> >= 1) && (var169 < <fold_left_1030@59:1>)) |- bot
        
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
        (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
        |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                    <<fold_left_1030@59:0>@100:1>:int,
                                                    <<<fold_left_1030@59:0>@100:2>@106:0>:int)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        (1 <= var172)
        |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                            <<fold_left_1030@59:0>@100:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<fail_1719@130:0>](var298:bool) = false
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (<<fold_left_1030@59:0>@100:1> >= 0)
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
        ((<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)) &&
         (<<fold_left_1030@59:0>@100:1> >= 0))
      upper bounds:
        P[<fail_1719@130:0>](var301:bool) = true
      begin GenHcSolver.classify_pids(128648)[4]
        output:
          [<fail_1719@130:0>]
      end GenHcSolver.classify_pids(128648)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(128651)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(128654)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(128654)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(128659)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(128659)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(128662)[5]
          begin InterpProver.interpolate_fresh(128663)[6]
            begin InterpProver.interpolate_log(128664)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(128665)[8]
                begin InterpProver.interpolate_simplify(128666)[9]
                  begin InterpProver.interpolate_quick(128681)[10]
                    
                  end InterpProver.interpolate_quick(128681)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(128685)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(128685)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(128666)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(128665)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(128664)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(128663)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(128662)[5] (0.000000 sec.)
        output:
          P[<fail_1719@130:0>](var298:bool) = false
      end ApronInterface.convex_hull_interpolate(128651)[4] (0.000000 sec.)
      Horn clauses:
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
        ((<fold_left_1030@59:2> >= 1) && (var169 < <fold_left_1030@59:1>)) |- bot
        
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
        (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
        |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                    <<fold_left_1030@59:0>@100:1>:int,
                                                    <<<fold_left_1030@59:0>@100:2>@106:0>:int)
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        (1 <= var172)
        |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                            <<fold_left_1030@59:0>@100:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (<<fold_left_1030@59:0>@100:1> >= 0)
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
        ((<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)) &&
         (<<fold_left_1030@59:0>@100:1> >= 0))
      upper bounds:
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](var302:int,var303:int,var304:int) =
        ((var304 >= var302) || (var303 < 0))
      begin GenHcSolver.classify_pids(132608)[4]
        output:
          [<<<fold_left_1030@59:0>@100:2>@106:0>]
      end GenHcSolver.classify_pids(132608)[4] (0.000000 sec.)
      lb:((<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)) &&
          (<<fold_left_1030@59:0>@100:1> >= 0))
      nub:(not
             ((<<<fold_left_1030@59:0>@100:2>@106:0> >= <<fold_left_1030@59:0>@100:0>) ||
              (<<fold_left_1030@59:0>@100:1> < 0)))
      begin ApronInterface.convex_hull_interpolate(132611)[4]
        lb:((<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)) &&
            (<<fold_left_1030@59:0>@100:1> >= 0))
        nub:(not
               ((<<<fold_left_1030@59:0>@100:2>@106:0> >= <<fold_left_1030@59:0>@100:0>) ||
                (<<fold_left_1030@59:0>@100:1> < 0)))
        begin ExtFormula.Formula.case_analysis_boolean(132629)[5]
          ts: ((<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>)) &&
               (<<fold_left_1030@59:0>@100:1> >= 0))
          
        end ExtFormula.Formula.case_analysis_boolean(132629)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(132650)[5]
          ts: ((<<<fold_left_1030@59:0>@100:2>@106:0> < <<fold_left_1030@59:0>@100:0>) &&
               (<<fold_left_1030@59:0>@100:1> >= 0))
          
        end ExtFormula.Formula.case_analysis_boolean(132650)[5] (0.000000 sec.)
        lb':((((<<<fold_left_1030@59:0>@100:2>@106:0> + (-1 * <<fold_left_1030@59:0>@100:1>)) +
               (-1 * <<fold_left_1030@59:0>@100:0>)) = 0) && (<<fold_left_1030@59:0>@100:1> >= 0))
        nub':((<<fold_left_1030@59:0>@100:1> >= 0) &&
              (((-1 + (-1 * <<<fold_left_1030@59:0>@100:2>@106:0>)) + <<fold_left_1030@59:0>@100:0>) >= 0))
        begin InterpProver.interpolate(132656)[5]
          begin InterpProver.interpolate_fresh(132657)[6]
            begin InterpProver.interpolate_log(132658)[7]
              input1: ((((<<<fold_left_1030@59:0>@100:2>@106:0> + (-1 * <<fold_left_1030@59:0>@100:1>)) +
                         (-1 * <<fold_left_1030@59:0>@100:0>)) = 0) && (
                       <<fold_left_1030@59:0>@100:1> >= 0))
              input2: ((<<fold_left_1030@59:0>@100:1> >= 0) &&
                       (((-1 + (-1 * <<<fold_left_1030@59:0>@100:2>@106:0>)) + <<fold_left_1030@59:0>@100:0>) >= 0))
              begin InterpProver.interpolate_check(132659)[8]
                begin InterpProver.interpolate_simplify(132660)[9]
                  begin InterpProver.interpolate_quick(132733)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(132742)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(132743)[12]
                        begin CsisatInterface.interpolate_csisat_log(132744)[13]
                          input1: (v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0 = (v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_0 + v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1) & 0 <= v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1)
                          input2: (0 <= v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1 & (1 + v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0) <= v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(132745)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(132745)[14] (0.000000 sec.)
                          output: (-2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0 + 2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_0) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(132744)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0 + 2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_0) <= 0
                        after dnf conversion: (((-2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0 + 2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_0) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(132743)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(132742)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(132733)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(132660)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(132659)[8] (0.001000 sec.)
              output: (<<fold_left_1030@59:0>@100:0> <= <<<fold_left_1030@59:0>@100:2>@106:0>)
            end InterpProver.interpolate_log(132658)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(132657)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(132656)[5] (0.001999 sec.)
        output:
          P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
          (<<fold_left_1030@59:0>@100:0> <= <<<fold_left_1030@59:0>@100:2>@106:0>)
      end ApronInterface.convex_hull_interpolate(132611)[4] (0.002999 sec.)
      Horn clauses:
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
        (0 > <<fold_left_1030@59:0>@100:1>) |- bot
        
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        (1 <= var172)
        |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                            <<fold_left_1030@59:0>@100:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (<<fold_left_1030@59:0>@100:1> >= 0)
      upper bounds:
        P[<<fold_left_1030@59:0>@100:1>](var305:int,var306:int) = (0 <= var306)
      begin GenHcSolver.classify_pids(135690)[4]
        output:
          [<<fold_left_1030@59:0>@100:1>]
      end GenHcSolver.classify_pids(135690)[4] (0.000000 sec.)
      lb:(<<fold_left_1030@59:0>@100:1> >= 0)
      nub:(not (0 <= <<fold_left_1030@59:0>@100:1>))
      begin ApronInterface.convex_hull_interpolate(135693)[4]
        lb:(<<fold_left_1030@59:0>@100:1> >= 0)
        nub:(not (0 <= <<fold_left_1030@59:0>@100:1>))
        begin ExtFormula.Formula.case_analysis_boolean(135697)[5]
          ts: (<<fold_left_1030@59:0>@100:1> >= 0)
          
        end ExtFormula.Formula.case_analysis_boolean(135697)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(135704)[5]
          ts: (0 > <<fold_left_1030@59:0>@100:1>)
          
        end ExtFormula.Formula.case_analysis_boolean(135704)[5] (0.000000 sec.)
        lb':(<<fold_left_1030@59:0>@100:1> >= 0)
        nub':((-1 + (-1 * <<fold_left_1030@59:0>@100:1>)) >= 0)
        begin InterpProver.interpolate(135708)[5]
          begin InterpProver.interpolate_fresh(135709)[6]
            begin InterpProver.interpolate_log(135710)[7]
              input1: (<<fold_left_1030@59:0>@100:1> >= 0)
              input2: ((-1 + (-1 * <<fold_left_1030@59:0>@100:1>)) >= 0)
              begin InterpProver.interpolate_check(135711)[8]
                begin InterpProver.interpolate_simplify(135712)[9]
                  begin InterpProver.interpolate_quick(135731)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(135740)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(135741)[12]
                        begin CsisatInterface.interpolate_csisat_log(135742)[13]
                          input1: 0 <= v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1
                          input2: (1 + v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(135743)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(135743)[14] (0.000000 sec.)
                          output: -2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(135742)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1 <= 0
                        after dnf conversion: ((-2*v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(135741)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(135740)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(135731)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(135712)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(135711)[8] (0.000000 sec.)
              output: (0 <= <<fold_left_1030@59:0>@100:1>)
            end InterpProver.interpolate_log(135710)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(135709)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(135708)[5] (0.000000 sec.)
        output:
          P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
          (0 <= <<fold_left_1030@59:0>@100:1>)
      end ApronInterface.convex_hull_interpolate(135693)[4] (0.000000 sec.)
      Horn clauses:
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
        ((1 <= var172) && (0 > <<fold_left_1030@59:0>@100:1>)) |- bot
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
        <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
        <<<fold_left_1030@59:3>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) &&
         ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
      upper bounds:
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](var307:int,var308:int,var309:int,var310:int) =
        ((var309 <> 0) || ((1 > var308) || (0 <= var310)))
      begin GenHcSolver.classify_pids(138665)[4]
        output:
          [<<<fold_left_1030@59:3>@67:1>@90:0>]
      end GenHcSolver.classify_pids(138665)[4] (0.000000 sec.)
      lb:((<<fold_left_1030@59:3>@67:0> = 0) &&
          ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
      nub:(not
             ((<<fold_left_1030@59:3>@67:0> <> 0) ||
              ((1 > <fold_left_1030@59:2>) || (0 <= <<<fold_left_1030@59:3>@67:1>@90:0>))))
      begin ApronInterface.convex_hull_interpolate(138668)[4]
        lb:((<<fold_left_1030@59:3>@67:0> = 0) &&
            ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
        nub:(not
               ((<<fold_left_1030@59:3>@67:0> <> 0) ||
                ((1 > <fold_left_1030@59:2>) || (0 <= <<<fold_left_1030@59:3>@67:1>@90:0>))))
        begin ExtFormula.Formula.case_analysis_boolean(138694)[5]
          ts: ((<<fold_left_1030@59:3>@67:0> = 0) &&
               ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && (<fold_left_1030@59:2> >= 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(138694)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(138726)[5]
          ts: ((<<fold_left_1030@59:3>@67:0> = 0) &&
               ((1 <= <fold_left_1030@59:2>) && (0 > <<<fold_left_1030@59:3>@67:1>@90:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(138726)[5] (0.000000 sec.)
        lb':((<<fold_left_1030@59:3>@67:0> = 0) &&
             ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && ((-1 + <fold_left_1030@59:2>) >= 0)))
        nub':((<<fold_left_1030@59:3>@67:0> = 0) &&
              (((-1 + (-1 * <<<fold_left_1030@59:3>@67:1>@90:0>)) >= 0) && ((-1 + <fold_left_1030@59:2>) >= 0)))
        begin InterpProver.interpolate(138733)[5]
          begin InterpProver.interpolate_fresh(138734)[6]
            begin InterpProver.interpolate_log(138735)[7]
              input1: ((<<fold_left_1030@59:3>@67:0> = 0) &&
                       ((<<<fold_left_1030@59:3>@67:1>@90:0> >= 0) && ((-1 + <fold_left_1030@59:2>) >= 0)))
              input2: ((<<fold_left_1030@59:3>@67:0> = 0) &&
                       (((-1 + (-1 * <<<fold_left_1030@59:3>@67:1>@90:0>)) >= 0) && ((-1 + <fold_left_1030@59:2>) >= 0)))
              begin InterpProver.interpolate_check(138736)[8]
                begin InterpProver.interpolate_simplify(138737)[9]
                  begin InterpProver.interpolate_quick(138852)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(138861)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(138862)[12]
                        begin CsisatInterface.interpolate_csisat_log(138863)[13]
                          input1: (0 = v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0 & 0 <= v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0 & 1 <= v_sep_fold_left_1030_sep_59_sep_2)
                          input2: (0 = v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0 & 1 <= v_sep_fold_left_1030_sep_59_sep_2 & (1 + v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(138864)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(138864)[14] (0.000000 sec.)
                          output: -2*v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(138863)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(138862)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(138861)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(138852)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(138737)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(138736)[8] (0.002000 sec.)
              output: (0 <= <<<fold_left_1030@59:3>@67:1>@90:0>)
            end InterpProver.interpolate_log(138735)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(138734)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(138733)[5] (0.002000 sec.)
        output:
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
          (0 <= <<<fold_left_1030@59:3>@67:1>@90:0>)
      end ApronInterface.convex_hull_interpolate(138668)[4] (0.002000 sec.)
      Horn clauses:
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
        (0 > <<<fold_left_1030@59:3>@67:1>@90:0>) |- bot
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
      upper bounds:
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](var311:int,var312:int,var313:int,var314:int) = (0 <= var314)
      begin GenHcSolver.classify_pids(141152)[4]
        output:
          [<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>]
      end GenHcSolver.classify_pids(141152)[4] (0.000000 sec.)
      lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<make_list_1036@39:0> >= 0) &&
           ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
      nub:(not (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>))
      begin ApronInterface.convex_hull_interpolate(141155)[4]
        lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
            ((<make_list_1036@39:0> >= 0) &&
             ((<<make_list_1036@39:1>@55:0> >= 1) &&
              (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        nub:(not (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>))
        begin ExtFormula.Formula.case_analysis_boolean(141204)[5]
          ts: ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
               ((<make_list_1036@39:0> >= 0) &&
                ((<<make_list_1036@39:1>@55:0> >= 1) &&
                 (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
          
        end ExtFormula.Formula.case_analysis_boolean(141204)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(141216)[5]
          ts: (0 > <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(141216)[5] (0.000000 sec.)
        lb':(((<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> + (-1 * <make_list_1036@39:0>)) = 0) &&
             ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
              (((-1 + <<make_list_1036@39:1>@55:0>) >= 0) && (<make_list_1036@39:0> >= 0))))
        nub':((-1 + (-1 * <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)) >= 0)
        begin InterpProver.interpolate(141220)[5]
          begin InterpProver.interpolate_fresh(141221)[6]
            begin InterpProver.interpolate_log(141222)[7]
              input1: (((<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> + (-1 * <make_list_1036@39:0>)) = 0) &&
                       ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
                        (((-1 + <<make_list_1036@39:1>@55:0>) >= 0) && (<make_list_1036@39:0> >= 0))))
              input2: ((-1 + (-1 * <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)) >= 0)
              begin InterpProver.interpolate_check(141223)[8]
                begin InterpProver.interpolate_simplify(141224)[9]
                  begin InterpProver.interpolate_quick(141320)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(141329)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(141330)[12]
                        begin CsisatInterface.interpolate_csisat_log(141331)[13]
                          input1: (0 <= v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 & 1 <= v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0)
                          input2: (1 + v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(141332)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(141332)[14] (0.000000 sec.)
                          output: -2*v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(141331)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(141330)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(141329)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(141320)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(141224)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(141223)[8] (0.000999 sec.)
              output: (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
            end InterpProver.interpolate_log(141222)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(141221)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(141220)[5] (0.000999 sec.)
        output:
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
          (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
      end ApronInterface.convex_hull_interpolate(141155)[4] (0.001999 sec.)
      Horn clauses:
        P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
      upper bounds:
        P[<<<make_list_1036@39:1>@55:1>@71:0>](var315:int,var316:int,var317:int) = true
      begin GenHcSolver.classify_pids(142306)[4]
        output:
          [<<<make_list_1036@39:1>@55:1>@71:0>]
      end GenHcSolver.classify_pids(142306)[4] (0.000000 sec.)
      lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(142309)[4]
        lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(142322)[5]
          ts: ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
          
        end ExtFormula.Formula.case_analysis_boolean(142322)[5] (0.000999 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(142330)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(142330)[5] (0.000000 sec.)
        lb':((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && ((-1 + <<make_list_1036@39:1>@55:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(142333)[5]
          begin InterpProver.interpolate_fresh(142334)[6]
            begin InterpProver.interpolate_log(142335)[7]
              input1: ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && ((-1 + <<make_list_1036@39:1>@55:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(142336)[8]
                begin InterpProver.interpolate_simplify(142337)[9]
                  begin InterpProver.interpolate_quick(142377)[10]
                    
                  end InterpProver.interpolate_quick(142377)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(142337)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(142336)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(142335)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(142334)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(142333)[5] (0.001000 sec.)
        output:
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(142309)[4] (0.001999 sec.)
      Horn clauses:
         ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                           <fold_left_1030@59:2>:int,
                                           <<fold_left_1030@59:3>@67:0>:int)
      lower bounds:
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
      upper bounds:
        P[<<fold_left_1030@59:3>@67:0>](var318:int,var319:int,var320:int) = true
      begin GenHcSolver.classify_pids(142900)[4]
        output:
          [<<fold_left_1030@59:3>@67:0>]
      end GenHcSolver.classify_pids(142900)[4] (0.000000 sec.)
      lb:((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(142903)[4]
        lb:((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(142916)[5]
          ts: ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
          
        end ExtFormula.Formula.case_analysis_boolean(142916)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(142924)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(142924)[5] (0.000000 sec.)
        lb':((<<fold_left_1030@59:3>@67:0> = 0) && ((-1 + <fold_left_1030@59:2>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(142927)[5]
          begin InterpProver.interpolate_fresh(142928)[6]
            begin InterpProver.interpolate_log(142929)[7]
              input1: ((<<fold_left_1030@59:3>@67:0> = 0) && ((-1 + <fold_left_1030@59:2>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(142930)[8]
                begin InterpProver.interpolate_simplify(142931)[9]
                  begin InterpProver.interpolate_quick(142971)[10]
                    
                  end InterpProver.interpolate_quick(142971)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(142931)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(142930)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(142929)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(142928)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(142927)[5] (0.001000 sec.)
        output:
          P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(142903)[4] (0.002000 sec.)
      begin HcSolver.check_validity(143082)[4]
        input:
          P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1713@127:1>:int,<f_main_1713@127:2>:int),
          P[<<fold_left_1030@59:4>@125:0>](<f_main_1713@127:0>:int,<f_main_1713@127:2>:int,<f_main_1713@127:4>:int),
          ((<f_main_1713@127:4> < <f_main_1713@127:0>) && <fail_1719@130:0>)
          |- P[<fail_1719@130:0>](<fail_1719@130:0>:bool)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
          P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
          P[<<fold_left_1030@114:4>@117:0>](var169:int,(-1 + <fold_left_1030@59:2>):int,<<fold_left_1030@59:4>@125:0>:int),
          (<fold_left_1030@59:2> >= 1)
          |- P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@59:1>:int,
                                              <fold_left_1030@59:2>:int,
                                              <<fold_left_1030@59:4>@125:0>:int)
          
          P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int),
          ((<fold_left_1030@114:2> = 0) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>))
          |- P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,
                                               <fold_left_1030@114:2>:int,
                                               <<fold_left_1030@114:4>@117:0>:int)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<f_fold_left_1707@112:0>:int,(
                                                 1 + <fold_left_1030@114:2>):int,0:int,<f_fold_left_1707@112:1>:int),
          P[<fold_left_1030@59:2>](<f_fold_left_1707@112:0>:int,(1 + <fold_left_1030@114:2>):int),
          P[<<<fold_left_1030@59:0>@100:2>@106:0>](<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,<fold_left_1030@114:1>:int),
          (<fold_left_1030@114:2> >= 0)
          |- P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
          P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
          (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
          |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                      <<fold_left_1030@59:0>@100:1>:int,
                                                      <<<fold_left_1030@59:0>@100:2>@106:0>:int)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
          P[<fold_left_1030@59:2>](<<fold_left_1030@59:0>@100:0>:int,var172:int), (
          1 <= var172)
          |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                              <<fold_left_1030@59:0>@100:1>:int)
          
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
          <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
          <<<fold_left_1030@59:3>@67:1>@90:0>:int)
          
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int),
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
           ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
          |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                           <<make_list_1036@39:1>@55:0>:int,
                                                           <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                           <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
          <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,
          <<<make_list_1036@39:1>@55:1>@71:0>:int)
          
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
          ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
          |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                             <fold_left_1030@59:2>:int,
                                             <<fold_left_1030@59:3>@67:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int)|- P[<fold_left_1030@59:2>](
          <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)
          
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int), (
          <make_list_1036@39:0> >= 0)
          |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                             <<make_list_1036@39:1>@55:0>:int)
          
          P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
          ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
          |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                             <<make_list_1036@42:1>@45:0>:int)
          
          P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), (
          (1 + <make_list_1036@42:0>) >= 0) |- P[<make_list_1036@42:0>](
          <make_list_1036@42:0>:int)
          
          |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(143082)[4] (0.009998 sec.)
      solution:
        P[<fail_1719@130:0>](var298:bool) = false
        P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int,<<fold_left_1030@114:4>@117:0>:int) =
        (<fold_left_1030@114:1> <= <<fold_left_1030@114:4>@117:0>)
        P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int,<<fold_left_1030@114:4>@117:0>:int) =
        (<fold_left_1030@114:1> <= <<fold_left_1030@114:4>@117:0>)
        P[<fold_left_1030@114:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int) = true
        P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int,<<<fold_left_1030@59:0>@100:2>@106:0>:int) =
        (<<fold_left_1030@59:0>@100:0> <= <<<fold_left_1030@59:0>@100:2>@106:0>)
        P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int) =
        (0 <= <<fold_left_1030@59:0>@100:1>)
        P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int) =
        (0 <= <<<fold_left_1030@59:3>@67:1>@90:0>)
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        true
        P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int) =
        true
        P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int) = true
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
        P[<make_list_1036@42:0>](<make_list_1036@39:0>:int) = true
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
    end GenHcSolver.solve(82398)[3] (0.326950 sec.)
    begin YhornInterface.solve(144505)[3]
      begin HcSolver.solve_ub(144506)[4]
        encoded:
          P[<fail_1719@130:0>](<fail_1719@130:0>:int)|- bot
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1713@127:1>:int,<f_main_1713@127:2>:int),
          P[<<fold_left_1030@59:4>@125:0>](<f_main_1713@127:0>:int,<f_main_1713@127:2>:int,<f_main_1713@127:4>:int),
          ((<f_main_1713@127:4> < <f_main_1713@127:0>) && (<fail_1719@130:0> = 1))
          |- P[<fail_1719@130:0>](<fail_1719@130:0>:int)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
          P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
          P[<<fold_left_1030@114:4>@117:0>](var169:int,(-1 + <fold_left_1030@59:2>):int,<<fold_left_1030@59:4>@125:0>:int),
          (<fold_left_1030@59:2> >= 1)
          |- P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@59:1>:int,
                                              <fold_left_1030@59:2>:int,
                                              <<fold_left_1030@59:4>@125:0>:int)
          
          P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int),
          ((<fold_left_1030@114:2> = 0) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>))
          |- P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,
                                               <fold_left_1030@114:2>:int,
                                               <<fold_left_1030@114:4>@117:0>:int)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<f_fold_left_1707@112:0>:int,(
                                                 1 + <fold_left_1030@114:2>):int,0:int,<f_fold_left_1707@112:1>:int),
          P[<fold_left_1030@59:2>](<f_fold_left_1707@112:0>:int,(1 + <fold_left_1030@114:2>):int),
          P[<<<fold_left_1030@59:0>@100:2>@106:0>](<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,<fold_left_1030@114:1>:int),
          (<fold_left_1030@114:2> >= 0)
          |- P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
          P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
          (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
          |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                      <<fold_left_1030@59:0>@100:1>:int,
                                                      <<<fold_left_1030@59:0>@100:2>@106:0>:int)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
          P[<fold_left_1030@59:2>](<<fold_left_1030@59:0>@100:0>:int,var172:int), (
          1 <= var172)
          |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                              <<fold_left_1030@59:0>@100:1>:int)
          
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
          <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
          <<<fold_left_1030@59:3>@67:1>@90:0>:int)
          
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int),
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
           ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
          |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                           <<make_list_1036@39:1>@55:0>:int,
                                                           <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                           <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
          <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,
          <<<make_list_1036@39:1>@55:1>@71:0>:int)
          
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
          ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
          |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                             <fold_left_1030@59:2>:int,
                                             <<fold_left_1030@59:3>@67:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int)|- P[<fold_left_1030@59:2>](
          <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)
          
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int), (
          <make_list_1036@39:0> >= 0)
          |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                             <<make_list_1036@39:1>@55:0>:int)
          
          P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
          ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
          |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                             <<make_list_1036@42:1>@45:0>:int)
          
          P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), (
          (1 + <make_list_1036@42:0>) >= 0) |- P[<make_list_1036@42:0>](
          <make_list_1036@42:0>:int)
          
          |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
        input to Yhorn:
          P[<fail_1719@130:0>](<fail_1719@130:0>:int)|- bot
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1713@127:1>:int,<f_main_1713@127:2>:int),
          P[<<fold_left_1030@59:4>@125:0>](<f_main_1713@127:0>:int,<f_main_1713@127:2>:int,<f_main_1713@127:4>:int),
          ((<f_main_1713@127:4> < <f_main_1713@127:0>) && (<fail_1719@130:0> = 1))
          |- P[<fail_1719@130:0>](<fail_1719@130:0>:int)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,var321:int,var168:int),
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
          P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
          P[<<fold_left_1030@114:4>@117:0>](var169:int,var322:int,<<fold_left_1030@59:4>@125:0>:int),
          (((1 + var322) = <fold_left_1030@59:2>) && ((<fold_left_1030@59:2> >= 1) && (var321 = 0)))
          |- P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@59:1>:int,
                                              <fold_left_1030@59:2>:int,
                                              <<fold_left_1030@59:4>@125:0>:int)
          
          P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int),
          ((<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>) && (<fold_left_1030@114:2> = 0))
          |- P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,
                                               <fold_left_1030@114:2>:int,
                                               <<fold_left_1030@114:4>@117:0>:int)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<f_fold_left_1707@112:0>:int,var323:int,var324:int,<f_fold_left_1707@112:1>:int),
          P[<fold_left_1030@59:2>](<f_fold_left_1707@112:0>:int,var325:int),
          P[<<<fold_left_1030@59:0>@100:2>@106:0>](<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,<fold_left_1030@114:1>:int),
          ((var325 = (1 + <fold_left_1030@114:2>)) &&
           ((var323 = (1 + <fold_left_1030@114:2>)) && ((<fold_left_1030@114:2> >= 0) && (var324 = 0))))
          |- P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
          P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
          (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
          |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                      <<fold_left_1030@59:0>@100:1>:int,
                                                      <<<fold_left_1030@59:0>@100:2>@106:0>:int)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,var326:int,<<fold_left_1030@59:0>@100:1>:int),
          P[<fold_left_1030@59:2>](<<fold_left_1030@59:0>@100:0>:int,var172:int), (
          (1 <= var172) && (var326 = 0))
          |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                              <<fold_left_1030@59:0>@100:1>:int)
          
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
          <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
          <<<fold_left_1030@59:3>@67:1>@90:0>:int)
          
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>](var327:int,var328:int),
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          ((<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>) &&
           (((1 + var328) = <<make_list_1036@39:1>@55:0>) &&
            (((1 + var327) = <make_list_1036@39:0>) &&
             ((<make_list_1036@39:0> >= 0) && (<<<make_list_1036@39:1>@55:1>@71:0> = 0)))))
          |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                           <<make_list_1036@39:1>@55:0>:int,
                                                           <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                           <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
          <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,
          <<<make_list_1036@39:1>@55:1>@71:0>:int)
          
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
          ((<fold_left_1030@59:2> >= 1) && (<<fold_left_1030@59:3>@67:0> = 0))
          |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                             <fold_left_1030@59:2>:int,
                                             <<fold_left_1030@59:3>@67:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int)|- P[<fold_left_1030@59:2>](
          <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)
          
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>](var329:int,var330:int),
          (((1 + var330) = <<make_list_1036@39:1>@55:0>) &&
           (((1 + var329) = <make_list_1036@39:0>) && (<make_list_1036@39:0> >= 0)))
          |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                             <<make_list_1036@39:1>@55:0>:int)
          
          P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
          ((<make_list_1036@42:0> < 0) && (<<make_list_1036@42:1>@45:0> = 0))
          |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                             <<make_list_1036@42:1>@45:0>:int)
          
          P[<make_list_1036@39:0>](var331:int),
          ((var331 = (1 + <make_list_1036@42:0>)) && ((1 + <make_list_1036@42:0>) >= 0))
          |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1719_sep_130_sep_0($140)) -> 1=0.
(($140-1=0) & ($141-$142<0)) & (v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0($142,$143,$141)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($144,$143)) -> v_sep_fail_1719_sep_130_sep_0($140).
(($145=0) & ($146-1>=0) & (-$146+$147+1=0)) & (v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0($148,$147,$149)) & (v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0($150,$151,$148)) & (v_sep_fold_left_1030_sep_59_sep_2($150,$146)) & (v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0($150,$146,$145,$151)) -> v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0($150,$146,$149).
(($152=0) & ($153-$154=0)) & (v_sep_fold_left_1030_sep_114_sep_2($154,$152)) -> v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0($154,$152,$153).
(($155=0) & ($152>=0) & (-$152+$156-1=0) & (-$152+$157-1=0)) & (v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0($158,$159,$154)) & (v_sep_fold_left_1030_sep_59_sep_2($158,$157)) & (v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0($158,$156,$155,$159)) -> v_sep_fold_left_1030_sep_114_sep_2($154,$152).
($160-$161-$162=0) & (v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1($161,$162)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($163,$146)) -> v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0($161,$162,$160).
(($164=0) & (-$165+1<=0)) & (v_sep_fold_left_1030_sep_59_sep_2($161,$165)) & (v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0($161,$165,$164,$162)) -> v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1($161,$162).
(0=0) & (v_sep_fold_left_1030_sep_59_sep_2($150,$146)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($163,$146)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0($163,$146,$166,$167)) -> v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0($150,$146,$166,$167).
(($168=0) & ($169>=0) & (-$169+$170+1=0) & ($171-$172+1=0) & (-$169+$173=0)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($169,$172)) & (v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($170,$171)) & (v_sep_make_list_1036_sep_39_sep_0($169)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0($169,$172,$168)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0($169,$172,$168,$173).
(0=0) & (v_sep_make_list_1036_sep_39_sep_0($169)) & (v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0($174,$172,$168)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($169,$172)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0($169,$172,$168).
(($166=0) & ($146-1>=0)) & (v_sep_fold_left_1030_sep_59_sep_2($150,$146)) -> v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0($150,$146,$166).
(0=0) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($163,$146)) -> v_sep_fold_left_1030_sep_59_sep_2($150,$146).
(($169>=0) & (-$169+$175+1=0) & (-$172+$176+1=0)) & (v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($175,$176)) & (v_sep_make_list_1036_sep_39_sep_0($169)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($169,$172).
(($177=0) & ($178<0)) & (v_sep_make_list_1036_sep_42_sep_0($178)) -> v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($178,$177).
(($178+1>=0) & (-$178+$179-1=0)) & (v_sep_make_list_1036_sep_39_sep_0($179)) -> v_sep_make_list_1036_sep_42_sep_0($178).
0=0 -> v_sep_make_list_1036_sep_39_sep_0($169).


v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: X
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: X
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: X
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: X
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: X
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
............................Split conj [48] 1.228812
(Reconstrcut: 25 ******)
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: X
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
........................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: X
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: X
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: X
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: X
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..................................Split conj [58] 1.293802
(Reconstrcut: 11 **)
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.........................................Split conj [60] 1.477775
(Reconstrcut: 25 *****)
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
............................................Split conj [68] 1.604755
(Reconstrcut: 35 *****)
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
............................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..............................................Split conj [76] 1.717738
(Reconstrcut: 17 ***)
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...........................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....................................................Split conj [80] 1.893711
(Reconstrcut: 15 **)
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....................................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.............................................................Split conj [82] 2.16867
(Reconstrcut: 19 **)
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....................................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.............................................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................................................Split conj [84] 2.541612
(Reconstrcut: 27 ****)
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
................................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....................................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.....................................................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.........................................................................
v_sep_fail_1719_sep_130_sep_0: X
v_sep_fold_left_1030_sep_114_sep_2: X
v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0: X
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0: (X) & (X)
v_sep_fold_left_1030_sep_59_sep_2: (X) & (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0: X
v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...............................................................................(0=0) & (v_sep_fail_1719_sep_130_sep_0($140)) -> 1=0.
(($140-1=0) & ($141-$142<0)) & (v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0($142,$143,$141)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($144,$143)) -> v_sep_fail_1719_sep_130_sep_0($140).
(($145=0) & ($146-1>=0) & (-$146+$147+1=0)) & (v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0($148,$147,$149)) & (v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0($150,$151,$148)) & (v_sep_fold_left_1030_sep_59_sep_2($150,$146)) & (v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0($150,$146,$145,$151)) -> v_sep_fold_left_1030_sep_59_sep_4_sep_125_sep_0($150,$146,$149).
(($152=0) & ($153-$154=0)) & (v_sep_fold_left_1030_sep_114_sep_2($154,$152)) -> v_sep_fold_left_1030_sep_114_sep_4_sep_117_sep_0($154,$152,$153).
(($155=0) & ($152>=0) & (-$152+$156-1=0) & (-$152+$157-1=0)) & (v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0($158,$159,$154)) & (v_sep_fold_left_1030_sep_59_sep_2($158,$157)) & (v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0($158,$156,$155,$159)) -> v_sep_fold_left_1030_sep_114_sep_2($154,$152).
($160-$161-$162=0) & (v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1($161,$162)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($163,$146)) -> v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_2_sep_106_sep_0($161,$162,$160).
(($164=0) & (-$165+1<=0)) & (v_sep_fold_left_1030_sep_59_sep_2($161,$165)) & (v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0($161,$165,$164,$162)) -> v_sep_fold_left_1030_sep_59_sep_0_sep_100_sep_1($161,$162).
(0=0) & (v_sep_fold_left_1030_sep_59_sep_2($150,$146)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($163,$146)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0($163,$146,$166,$167)) -> v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_1_sep_90_sep_0($150,$146,$166,$167).
(($168=0) & ($169>=0) & (-$169+$170+1=0) & ($171-$172+1=0) & (-$169+$173=0)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($169,$172)) & (v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($170,$171)) & (v_sep_make_list_1036_sep_39_sep_0($169)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0($169,$172,$168)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0($169,$172,$168,$173).
(0=0) & (v_sep_make_list_1036_sep_39_sep_0($169)) & (v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0($174,$172,$168)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($169,$172)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0($169,$172,$168).
(($166=0) & ($146-1>=0)) & (v_sep_fold_left_1030_sep_59_sep_2($150,$146)) -> v_sep_fold_left_1030_sep_59_sep_3_sep_67_sep_0($150,$146,$166).
(0=0) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($163,$146)) -> v_sep_fold_left_1030_sep_59_sep_2($150,$146).
(($169>=0) & (-$169+$175+1=0) & (-$172+$176+1=0)) & (v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($175,$176)) & (v_sep_make_list_1036_sep_39_sep_0($169)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($169,$172).
(($177=0) & ($178<0)) & (v_sep_make_list_1036_sep_42_sep_0($178)) -> v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($178,$177).
(($178+1>=0) & (-$178+$179-1=0)) & (v_sep_make_list_1036_sep_39_sep_0($179)) -> v_sep_make_list_1036_sep_42_sep_0($178).
0=0 -> v_sep_make_list_1036_sep_39_sep_0($169).

          |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
        solution:
          P[<fail_1719@130:0>]($180:bool) = false
          P[<fold_left_1030@114:2>]($223:int,$225:int) = true
          P[<<fold_left_1030@114:4>@117:0>]($195:int,$197:int,$199:int) = ($195 <= $199)
          P[<<fold_left_1030@59:0>@100:1>]($228:int,$230:int) = (0 <= $230)
          P[<<<fold_left_1030@59:0>@100:2>@106:0>]($202:int,$204:int,$206:int) = ($202 <= $206)
          P[<fold_left_1030@59:2>]($209:int,$211:int) = true
          P[<<fold_left_1030@59:3>@67:0>]($257:int,$259:int,$261:int) = true
          P[<<<fold_left_1030@59:3>@67:1>@90:0>]($214:int,$216:int,$218:int,$220:int) = (0 <= $220)
          P[<<fold_left_1030@59:4>@125:0>]($183:int,$185:int,$187:int) = ($183 <= $187)
          P[<make_list_1036@39:0>]($247:int) = true
          P[<<make_list_1036@39:1>@55:0>]($190:int,$192:int) = true
          P[<<<make_list_1036@39:1>@55:1>@71:0>]($250:int,$252:int,$254:int) = true
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>]($233:int,$235:int,$237:int,$239:int) = (0 <= $239)
          P[<make_list_1036@42:0>]($264:int) = true
          P[<<make_list_1036@42:1>@45:0>]($242:int,$244:int) = true
        
      end HcSolver.solve_ub(144506)[4] (1.756733 sec.)
      begin HcSolver.check_validity(145399)[4]
        input:
          P[<fail_1719@130:0>](<fail_1719@130:0>:bool)|- bot
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1713@127:1>:int,<f_main_1713@127:2>:int),
          P[<<fold_left_1030@59:4>@125:0>](<f_main_1713@127:0>:int,<f_main_1713@127:2>:int,<f_main_1713@127:4>:int),
          ((<f_main_1713@127:4> < <f_main_1713@127:0>) && <fail_1719@130:0>)
          |- P[<fail_1719@130:0>](<fail_1719@130:0>:bool)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,0:int,var168:int),
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
          P[<<<fold_left_1030@59:0>@100:2>@106:0>](<fold_left_1030@59:1>:int,var168:int,var169:int),
          P[<<fold_left_1030@114:4>@117:0>](var169:int,(-1 + <fold_left_1030@59:2>):int,<<fold_left_1030@59:4>@125:0>:int),
          (<fold_left_1030@59:2> >= 1)
          |- P[<<fold_left_1030@59:4>@125:0>](<fold_left_1030@59:1>:int,
                                              <fold_left_1030@59:2>:int,
                                              <<fold_left_1030@59:4>@125:0>:int)
          
          P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int),
          ((<fold_left_1030@114:2> = 0) && (<<fold_left_1030@114:4>@117:0> = <fold_left_1030@114:1>))
          |- P[<<fold_left_1030@114:4>@117:0>](<fold_left_1030@114:1>:int,
                                               <fold_left_1030@114:2>:int,
                                               <<fold_left_1030@114:4>@117:0>:int)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<f_fold_left_1707@112:0>:int,(
                                                 1 + <fold_left_1030@114:2>):int,0:int,<f_fold_left_1707@112:1>:int),
          P[<fold_left_1030@59:2>](<f_fold_left_1707@112:0>:int,(1 + <fold_left_1030@114:2>):int),
          P[<<<fold_left_1030@59:0>@100:2>@106:0>](<f_fold_left_1707@112:0>:int,<f_fold_left_1707@112:1>:int,<fold_left_1030@114:1>:int),
          (<fold_left_1030@114:2> >= 0)
          |- P[<fold_left_1030@114:2>](<fold_left_1030@114:1>:int,<fold_left_1030@114:2>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
          P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,<<fold_left_1030@59:0>@100:1>:int),
          (<<<fold_left_1030@59:0>@100:2>@106:0> = (<<fold_left_1030@59:0>@100:0> + <<fold_left_1030@59:0>@100:1>))
          |- P[<<<fold_left_1030@59:0>@100:2>@106:0>](<<fold_left_1030@59:0>@100:0>:int,
                                                      <<fold_left_1030@59:0>@100:1>:int,
                                                      <<<fold_left_1030@59:0>@100:2>@106:0>:int)
          
          P[<<<fold_left_1030@59:3>@67:1>@90:0>](<<fold_left_1030@59:0>@100:0>:int,var172:int,0:int,<<fold_left_1030@59:0>@100:1>:int),
          P[<fold_left_1030@59:2>](<<fold_left_1030@59:0>@100:0>:int,var172:int), (
          1 <= var172)
          |- P[<<fold_left_1030@59:0>@100:1>](<<fold_left_1030@59:0>@100:0>:int,
                                              <<fold_left_1030@59:0>@100:1>:int)
          
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,<<<fold_left_1030@59:3>@67:1>@90:0>:int),
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int),
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)|- P[<<<fold_left_1030@59:3>@67:1>@90:0>](
          <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int,<<fold_left_1030@59:3>@67:0>:int,
          <<<fold_left_1030@59:3>@67:1>@90:0>:int)
          
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int),
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
           ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
          |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                           <<make_list_1036@39:1>@55:0>:int,
                                                           <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                           <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          P[<<fold_left_1030@59:3>@67:0>](<f_main_1712@57:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
          <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,
          <<<make_list_1036@39:1>@55:1>@71:0>:int)
          
          P[<fold_left_1030@59:2>](<fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int),
          ((<<fold_left_1030@59:3>@67:0> = 0) && (<fold_left_1030@59:2> >= 1))
          |- P[<<fold_left_1030@59:3>@67:0>](<fold_left_1030@59:1>:int,
                                             <fold_left_1030@59:2>:int,
                                             <<fold_left_1030@59:3>@67:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1712@57:1>:int,<fold_left_1030@59:2>:int)|- P[<fold_left_1030@59:2>](
          <fold_left_1030@59:1>:int,<fold_left_1030@59:2>:int)
          
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int), (
          <make_list_1036@39:0> >= 0)
          |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                             <<make_list_1036@39:1>@55:0>:int)
          
          P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
          ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
          |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                             <<make_list_1036@42:1>@45:0>:int)
          
          P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), (
          (1 + <make_list_1036@42:0>) >= 0) |- P[<make_list_1036@42:0>](
          <make_list_1036@42:0>:int)
          
          |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(145399)[4] (0.009999 sec.)
      solution:
        P[<fail_1719@130:0>]($180:bool) = false
        P[<fold_left_1030@114:2>]($223:int,$225:int) = true
        P[<<fold_left_1030@114:4>@117:0>]($195:int,$197:int,$199:int) = ($195 <= $199)
        P[<<fold_left_1030@59:0>@100:1>]($228:int,$230:int) = (0 <= $230)
        P[<<<fold_left_1030@59:0>@100:2>@106:0>]($202:int,$204:int,$206:int) = ($202 <= $206)
        P[<fold_left_1030@59:2>]($209:int,$211:int) = true
        P[<<fold_left_1030@59:3>@67:0>]($257:int,$259:int,$261:int) = true
        P[<<<fold_left_1030@59:3>@67:1>@90:0>]($214:int,$216:int,$218:int,$220:int) = (0 <= $220)
        P[<<fold_left_1030@59:4>@125:0>]($183:int,$185:int,$187:int) = ($183 <= $187)
        P[<make_list_1036@39:0>]($247:int) = true
        P[<<make_list_1036@39:1>@55:0>]($190:int,$192:int) = true
        P[<<<make_list_1036@39:1>@55:1>@71:0>]($250:int,$252:int,$254:int) = true
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>]($233:int,$235:int,$237:int,$239:int) = (0 <= $239)
        P[<make_list_1036@42:0>]($264:int) = true
        P[<<make_list_1036@42:1>@45:0>]($242:int,$244:int) = true
    end YhornInterface.solve(144505)[3] (1.767731 sec.)
    
  end RefTypeInfer.infer_etrs(13043)[2] (2.528615 sec.)
  refinement types:
    main_1705: X
    f_1714: v1:int -> X
    f_1715: v1:int -> v2:int -> X
    main_1041: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1036: v1:int -> (v2:int -> (v3:int -> (v4:{v4:int | (0 <= v4)} -> X) -> X) -> X) -> X
    make_list_1036: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_make_list_1711: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1133: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_1712: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    fold_left_1030: (v1:int -> v2:{v2:int | (0 <= v2)} -> (v3:{v3:int | (v1 <= v3)} -> X) -> X) ->
                    v6:int ->
                    v7:int ->
                    (v8:int -> (v9:{v9:int | (0 <= v9)} -> X) -> X) -> (v12:{v12:int | (v6 <= v12)} -> X) -> X
    br_fold_left_1717: v1:bool ->
                       (v2:int -> v3:int -> (v4:int -> X) -> X) ->
                       v7:int -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> (v13:int -> X) -> X
    f_cons_make_list_1710: v1:int -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> v8:int -> (v9:int -> X) -> X
    f_fold_left_1706: v1:int ->
                      v2:int ->
                      (v3:int -> v4:int -> (v5:int -> X) -> X) ->
                      (v8:int -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    add_1038: v1:int -> v2:int -> (v3:int -> X) -> X
    f_fold_left_1707: v1:int ->
                      v2:int ->
                      v3:int ->
                      (v4:int -> v5:int -> (v6:int -> X) -> X) ->
                      (v9:int -> X) -> (v11:int -> (v12:int -> X) -> X) -> v15:int -> X
    fold_left_1030: (v1:int -> v2:int -> (v3:int -> X) -> X) ->
                    v6:int -> v7:int -> (v8:int -> (v9:int -> X) -> X) -> (v12:{v12:int | (v6 <= v12)} -> X) -> X
    f_main_1713: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    fail_1719: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1716: var381:int -> var380:int -> var379:unit -> X
    f_fold_left_1708: var393:int ->
                      var392:int ->
                      var391:int ->
                      var390:int -> (var389:int -> (var388:int -> X) -> X) -> var385:int -> (var384:int -> X) -> X
    f_make_list_1709: var398:int -> var397:int -> (var396:int -> X) -> X
  abstraction types:
    main_1705: X
    f_1714: v1:int -> X
    f_1715: v1:int -> v2:int -> X
    main_1041: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1036: var399:int ->
                    (var400:int -> (var401:int -> (var402:int[var402 -> (
                                                              0 <= var402)] -> X) -> X) -> X) -> X
    f_make_list_1711: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1133: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_1712: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    fold_left_1030: (var407:int ->
                     var408:int[var408 -> (0 <= var408)] -> (var409:int[var409 -> (
                                                                    var407 <= var409)] -> X) -> X) ->
                    var412:int ->
                    var413:int ->
                    (var414:int -> (var415:int[var415 -> (0 <= var415)] -> X) -> X) ->
                    (var418:int[var418 -> (var412 <= var418)] -> X) -> X
    br_fold_left_1717: v1:bool ->
                       (v2:int -> v3:int -> (v4:int -> X) -> X) ->
                       v7:int -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> (v13:int -> X) -> X
    f_cons_make_list_1710: v1:int -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> v8:int -> (v9:int -> X) -> X
    f_fold_left_1706: v1:int ->
                      v2:int ->
                      (v3:int -> v4:int -> (v5:int -> X) -> X) ->
                      (v8:int -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    add_1038: v1:int -> v2:int -> (v3:int -> X) -> X
    f_fold_left_1707: v1:int ->
                      v2:int ->
                      v3:int ->
                      (v4:int -> v5:int -> (v6:int -> X) -> X) ->
                      (v9:int -> X) -> (v11:int -> (v12:int -> X) -> X) -> v15:int -> X
    f_main_1713: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    fail_1719: v1:bool -> (v2:unit -> X) -> X
    f_1716: var381:int -> var380:int -> var379:unit -> X
    f_fold_left_1708: var393:int ->
                      var392:int ->
                      var391:int ->
                      var390:int -> (var389:int -> (var388:int -> X) -> X) -> var385:int -> (var384:int -> X) -> X
    f_make_list_1709: var398:int -> var397:int -> (var396:int -> X) -> X
  
end AbsTypeInfer.refine(13042)[1] (2.545613 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1705
  main_1705 -> (rand_int f_1714)
  add_1038 x_1039 y_1040 k_add_1529 -> (k_add_1529 (x_1039 + y_1040))
  br_fold_left_1717 b_1718 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 when b_1718 ->
      (xs2_1033 0 (f_fold_left_1706 acc_1032 xs1_1033 f_1031 k_fold_left_1215 xs2_1033))
  br_fold_left_1717 b_1718 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 when (not b_1718) -> _|_
  cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1427 ->
      (k_make_list_cons_make_list_1427 (xs1_1132 + 1) (f_cons_make_list_1710 n_1037 x_1131 xs1_1132 xs2_1132))
  f_1714 x_1630 -> (rand_int (f_1715 x_1630))
  f_1715 x_1630 x_1643 -> (main_1041 x_1630 x_1643 (f_1716 x_1630 x_1643))
  f_1716 x_1630 x_1643 x_1627 -> end
  f_cons_make_list_1710 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1442 when (
      i_1130 = 0) -> (k_make_list_cons_make_list_1442 x_1131)
  f_cons_make_list_1710 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1442 when (
      not (i_1130 = 0)) -> (xs2_1132 (i_1130 - 1) k_make_list_cons_make_list_1442)
  f_fold_left_1706 acc_1032 xs1_1033 f_1031 k_fold_left_1215 xs2_1033 x_1262 ->
      (f_1031 acc_1032 x_1262 (f_fold_left_1707 acc_1032 x_1262 xs1_1033 f_1031 k_fold_left_1215 xs2_1033))
  f_fold_left_1707 acc_1032 x_1262 xs1_1033 f_1031 k_fold_left_1215 xs2_1033 x_1316 ->
      (fold_left_1030 f_1031 x_1316 (xs1_1033 - 1) (f_fold_left_1708 acc_1032 x_1262 x_1316 xs1_1033 xs2_1033)
        k_fold_left_1215)
  f_fold_left_1708 acc_1032 x_1262 x_1316 xs1_1033 xs2_1033 x_1104 k_fold_left_xs'_1248 ->
      (xs2_1033 (x_1104 + 1) k_fold_left_xs'_1248)
  f_main_1712 m_1043 n_1042 k_main_1546 x1_1552 x2_1552 ->
      (fold_left_1030 add_1038 m_1043 x1_1552 x2_1552 (f_main_1713 m_1043 n_1042 x1_1552 k_main_1546))
  f_main_1713 m_1043 n_1042 x1_1552 k_main_1546 x_1580 when (x_1580 >= m_1043) -> (k_main_1546 ())
  f_main_1713 m_1043 n_1042 x1_1552 k_main_1546 x_1580 when (not (x_1580 >= m_1043)) -> (fail_1719 true k_main_1546)
  f_make_list_1709 n_1037 x_1137 k_make_list_1380 -> _|_
  f_make_list_1711 n_1037 k_make_list_1368 x1_1505 x2_1505 ->
      (cons_make_list_1133 n_1037 n_1037 x1_1505 x2_1505 k_make_list_1368)
  fail_1719 b k -> {fail} => (k ())
  fold_left_1030 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 when (xs1_1033 = 0) -> (k_fold_left_1215 acc_1032)
  fold_left_1030 f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215 when (
      not (xs1_1033 = 0)) -> (br_fold_left_1717 (1 <= xs1_1033) f_1031 acc_1032 xs1_1033 xs2_1033 k_fold_left_1215)
  main_1041 n_1042 m_1043 k_main_1546 -> (make_list_1036 n_1042 (f_main_1712 m_1043 n_1042 k_main_1546))
  make_list_1036 n_1037 k_make_list_1368 when (n_1037 < 0) -> (k_make_list_1368 0 (f_make_list_1709 n_1037))
  make_list_1036 n_1037 k_make_list_1368 when (not (n_1037 < 0)) ->
      (make_list_1036 (n_1037 - 1) (f_make_list_1711 n_1037 k_make_list_1368))
Types:
  main_1705 : X
  fail_1719 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fold_left_1030 : ((x_2:int -> x_3:int[x_3 >= 0] -> (x_5:int[x_2 <= x_5] -> X) -> X) ->
                    x_8:int -> int -> (int -> (x_13:int[x_13 >= 0] -> X) -> X) -> (x_17:int[x_8 <= x_17] -> X) -> X)
  make_list_1036 : (int -> (int -> (int -> (x_7:int[x_7 >= 0] -> X) -> X) -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  fold_left: ((Top -> (x_2:int -> ((Bottom list) -> {x_4:int | x_2 <= x_4}))) /\ 
              ((x_14:int -> ({x_15:int | x_15 >= 0} -> {x_16:int | x_14 <= x_16})) ->
                   (x_8:int -> (({x_13:int | x_13 >= 0} list) -> {x_10:int | x_8 <= x_10}))))
  make_list: (int -> ({x_4:int | x_4 >= 0} list))

cycles: 2
total: 2.994 sec
  abst: 0.016 sec
  mc: 0.027 sec
  refine: 2.752 sec
    exparam: 0.082 sec
