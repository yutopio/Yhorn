MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi sigma_sum.ml

parsed::
 let rec sum_1030 n_1031 = if n_1031 <= 0 then
                             0
                           else
                             n_1031 + sum_1030 (n_1031 - 1) 
 in
 let rec sigma_1032 f_1033 n_1034 = if n_1034 <= 0 then
                                      0
                                    else
                                      f_1033 n_1034 + sigma_1032 f_1033 (n_1034 - 1) 
 in
 let main_1035 n_1036 = if sigma_1032 sum_1030 n_1036 >= n_1036 then
                          ()
                        else
                          {fail} () 
 in
   ()

set_target::
 let rec sum_1030 n_1031 = if n_1031 <= 0 then
                             0
                           else
                             n_1031 + sum_1030 (n_1031 - 1) 
 in
 let rec sigma_1032 f_1033 n_1034 = if n_1034 <= 0 then
                                      0
                                    else
                                      f_1033 n_1034 + sigma_1032 f_1033 (n_1034 - 1) 
 in
 let main_1035 n_1036 = if sigma_1032 sum_1030 n_1036 >= n_1036 then
                          ()
                        else
                          {fail} () 
 in
 let main_1073 = let arg1_1072 = rand_int () 
                 in
                   main_1035 arg1_1072 
 in
   ()

CPS::
 let rec sum_1030 (n_1031:int) (k_sum_1098:(int -> X)) =
   if n_1031 <= 0 then
     k_sum_1098 0
   else
     sum_1030 (n_1031 - 1) (fun x_1102 -> k_sum_1098 (n_1031 + x_1102)) 
 in
 let rec sigma_1032 (f_1033:(int -> ((int -> X) -> X))) (n_1034:int) (k_sigma_1145:(
   int -> X)) =
   if n_1034 <= 0 then
     k_sigma_1145 0
   else
     f_1033 n_1034 (fun x_1148 -> sigma_1032 f_1033 (n_1034 - 1) (fun x_1149 -> k_sigma_1145 (x_1148 + x_1149))) 
 in
 let main_1035 (n_1036:int) (k_main_1194:(unit -> X)) =
   sigma_1032 sum_1030 n_1036
     (fun x_1197 -> (if x_1197 >= n_1036 then
                       k_main_1194 ()
                     else
                       {|fail|} () k_main_1194)) 
 in
   rand_int_cps () (fun x_1232 -> main_1035 x_1232 (fun x_1229 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1257
  main_1257 -> (rand_int f_1262)
  f_1262 x_1232 -> (main_1035 x_1232 (f_1263 x_1232))
  f_1263 x_1232 x_1229 -> end
  f_main_1261 n_1036 k_main_1194 x_1197 when (x_1197 >= n_1036) -> (k_main_1194 ())
  f_main_1261 n_1036 k_main_1194 x_1197 when (not (x_1197 >= n_1036)) -> (fail_1264 true k_main_1194)
  f_sigma_1259 n_1034 f_1033 k_sigma_1145 x_1148 ->
      (sigma_1032 f_1033 (n_1034 - 1) (f_sigma_1260 n_1034 x_1148 k_sigma_1145))
  f_sigma_1260 n_1034 x_1148 k_sigma_1145 x_1149 -> (k_sigma_1145 (x_1148 + x_1149))
  f_sum_1258 n_1031 k_sum_1098 x_1102 -> (k_sum_1098 (n_1031 + x_1102))
  fail_1264 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1194 -> (sigma_1032 sum_1030 n_1036 (f_main_1261 n_1036 k_main_1194))
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (n_1034 <= 0) -> (k_sigma_1145 0)
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (not (n_1034 <= 0)) ->
      (f_1033 n_1034 (f_sigma_1259 n_1034 f_1033 k_sigma_1145))
  sum_1030 n_1031 k_sum_1098 when (n_1031 <= 0) -> (k_sum_1098 0)
  sum_1030 n_1031 k_sum_1098 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1258 n_1031 k_sum_1098))
Types:
  main_1257 : X
  fail_1264 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sigma_1032 : ((int -> (int -> X) -> X) -> int -> (int -> X) -> X)
  sum_1030 : (int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1257 ... --> 
  f_1262 ... --> 
  main_1035 ... --> 
  sigma_1032 [1/2] ... --> 
  f_main_1261 [2/2] ... --> 
  fail_1264 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(126)[1]
  program:
    main_1257  | true = ((Random.int 0) f_1262)
    f_1262 x_1232 | true = (main_1035 x_1232
                                      (f_1263 x_1232))
    f_1263 x_1232 x_1229 | true = end
    f_main_1261 n_1036 k_main_1194 x_1197 | (x_1197 >= n_1036) = (k_main_1194 ())
    f_main_1261 n_1036 k_main_1194 x_1197 | (not (x_1197 >= n_1036)) = (
    fail_1264 true
              k_main_1194)
    f_sigma_1259 n_1034 f_1033 k_sigma_1145 x_1148 | true = (sigma_1032
                                                               f_1033
                                                               (n_1034 - 1)
                                                               (f_sigma_1260 n_1034
                                                                    x_1148
                                                                    k_sigma_1145))
    f_sigma_1260 n_1034 x_1148 k_sigma_1145 x_1149 | true = (k_sigma_1145 (
                                                                    x_1148 + x_1149))
    f_sum_1258 n_1031 k_sum_1098 x_1102 | true = (k_sum_1098 (n_1031 + x_1102))
    fail_1264 b k | true = (fail ())
    main_1035 n_1036 k_main_1194 | true = (sigma_1032 sum_1030
                                                      n_1036
                                                      (f_main_1261 n_1036
                                                                   k_main_1194))
    sigma_1032 f_1033 n_1034 k_sigma_1145 | (n_1034 <= 0) = (k_sigma_1145 0)
    sigma_1032 f_1033 n_1034 k_sigma_1145 | (not (n_1034 <= 0)) = (f_1033
                                                                    n_1034
                                                                    (
                                                                    f_sigma_1259 n_1034
                                                                    f_1033
                                                                    k_sigma_1145))
    sum_1030 n_1031 k_sum_1098 | (n_1031 <= 0) = (k_sum_1098 0)
    sum_1030 n_1031 k_sum_1098 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1258 n_1031
                                                                    k_sum_1098))
    main_1257:X
    f_1262:int -> X
    f_1263:int -> unit -> X
    f_main_1261:int -> (unit -> X) -> int -> X
    f_sigma_1259:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_sigma_1260:int -> int -> (int -> X) -> int -> X
    f_sum_1258:int -> (int -> X) -> int -> X
    fail_1264:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    sigma_1032:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: f_1262,f_1263,f_main_1261,f_sigma_1259,f_sigma_1260,f_sum_1258,main_1035
  counterexample: 0:0:0:0:1:0
  error traces:
    [true.nop(<f_1262@4:0> = var2)
     [true.(<main_1035@6:0> = <f_1262@4:0>)
      [true.(<sigma_1032@8:1> = <main_1035@6:0>)
       [(<sigma_1032@8:1> <= 0).(<<sigma_1032@8:2>@11:0> = 0)
        [true.((<f_main_1261@13:0> = <main_1035@6:0>) && (<f_main_1261@13:2> = <<sigma_1032@8:2>@11:0>))
         [(not (<f_main_1261@13:2> >= <f_main_1261@13:0>)).(<fail_1264@16:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(127)[2]
    horn clauses:
      P[<fail_1264@16:0>](<fail_1264@16:0>:bool)|- bot
      
      P[<f_main_1261@13:2>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
      ((<f_main_1261@13:2> < <f_main_1261@13:0>) && <fail_1264@16:0>) |- P[<fail_1264@16:0>](
      <fail_1264@16:0>:bool)
      
      P[<main_1035@6:0>](<f_main_1261@13:0>:int),
      P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int)|- P[<f_main_1261@13:2>](
      <f_main_1261@13:0>:int,<f_main_1261@13:2>:int)
      
      P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
      |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
      
      P[<main_1035@6:0>](<sigma_1032@8:1>:int)|- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
      
      P[<f_1262@4:0>](<main_1035@6:0>:int)|- P[<main_1035@6:0>](<main_1035@6:0>:int)
      
      |- P[<f_1262@4:0>](<f_1262@4:0>:int)
    call trees:
      <main_1257@1>
        <f_1262@4>
          <main_1035@6>
            <sigma_1032@8>
            </<sigma_1032@8:2>@11>
            <f_main_1261@13>
              <fail_1264@16>
    inlined horn clauses:
      P[<fail_1264@16:0>](<fail_1264@16:0>:bool)|- bot
      
      P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
      ((<f_main_1261@13:2> < <f_main_1261@13:0>) && <fail_1264@16:0>) |- P[<fail_1264@16:0>](
      <fail_1264@16:0>:bool)
      
      P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
      |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
      
      |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
    begin ParamSubstInfer.infer(926)[3]
      
    end ParamSubstInfer.infer(926)[3] (0.012998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(928)[3]
      
    end RefTypeInfer.elim_coeffs(928)[3] (0.000000 sec.)
    begin GenHcSolver.solve(1083)[3]
      Horn clauses:
        P[<fail_1264@16:0>](<fail_1264@16:0>:bool)|- bot
        
        P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
        ((<f_main_1261@13:2> < <f_main_1261@13:0>) && <fail_1264@16:0>) |- P[<fail_1264@16:0>](
        <fail_1264@16:0>:bool)
        
        P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
        |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
        
        |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
      lower bounds:
        P[<sigma_1032@8:1>](<sigma_1032@8:1>:int) = true
        P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int) =
        ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
        P[<fail_1264@16:0>](<fail_1264@16:0>:bool) = false
      upper bounds:
        P[<fail_1264@16:0>](var4:bool) = true
      begin GenHcSolver.classify_pids(1979)[4]
        output:
          [<fail_1264@16:0>]
      end GenHcSolver.classify_pids(1979)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(1982)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(1983)[5]
          begin InterpProver.interpolate_fresh(1984)[6]
            begin InterpProver.interpolate_log(1985)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(1986)[8]
                begin InterpProver.interpolate_simplify(1987)[9]
                  begin InterpProver.interpolate_quick(2000)[10]
                    
                  end InterpProver.interpolate_quick(2000)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2004)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2004)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(1987)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(1986)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(1985)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(1984)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(1983)[5] (0.000000 sec.)
        output:
          P[<fail_1264@16:0>](<fail_1264@16:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(1982)[4] (0.001000 sec.)
      Horn clauses:
        P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
        (<f_main_1261@13:2> < <f_main_1261@13:0>) |- bot
        
        P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
        |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
        
        |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
      lower bounds:
        P[<sigma_1032@8:1>](<sigma_1032@8:1>:int) = true
        P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int) =
        ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
      upper bounds:
        P[<<sigma_1032@8:2>@11:0>](var5:int,var6:int) = (var6 >= var5)
      begin GenHcSolver.classify_pids(2938)[4]
        output:
          [<<sigma_1032@8:2>@11:0>]
      end GenHcSolver.classify_pids(2938)[4] (0.000000 sec.)
      lb:((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
      nub:(not (<<sigma_1032@8:2>@11:0> >= <sigma_1032@8:1>))
      begin ApronInterface.convex_hull_interpolate(2941)[4]
        lb:((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
        nub:(not (<<sigma_1032@8:2>@11:0> >= <sigma_1032@8:1>))
        lb':((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
        nub':(not (<<sigma_1032@8:2>@11:0> >= <sigma_1032@8:1>))
        begin InterpProver.interpolate(2942)[5]
          begin InterpProver.interpolate_fresh(2943)[6]
            begin InterpProver.interpolate_log(2944)[7]
              input1: ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
              input2: (not (<<sigma_1032@8:2>@11:0> >= <sigma_1032@8:1>))
              begin InterpProver.interpolate_check(2945)[8]
                begin InterpProver.interpolate_simplify(2946)[9]
                  begin InterpProver.interpolate_quick(2977)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(2986)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(2987)[12]
                        begin CsisatInterface.interpolate_csisat_log(2988)[13]
                          input1: (0 = v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0 & v_sep_sigma_1032_sep_8_sep_1 <= 0)
                          input2: (1 + v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0) <= v_sep_sigma_1032_sep_8_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(2989)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(2989)[14] (0.001000 sec.)
                          output: (-2*v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0 + 2*v_sep_sigma_1032_sep_8_sep_1) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(2988)[13] (0.001000 sec.)
                        after simplification: (-2*v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0 + 2*v_sep_sigma_1032_sep_8_sep_1) <= 0
                        after dnf conversion: (((-2*v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0 + 2*v_sep_sigma_1032_sep_8_sep_1) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(2987)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(2986)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(2977)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(2946)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(2945)[8] (0.002000 sec.)
              output: (<sigma_1032@8:1> <= <<sigma_1032@8:2>@11:0>)
            end InterpProver.interpolate_log(2944)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(2943)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(2942)[5] (0.002000 sec.)
        output:
          P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int) =
          (<sigma_1032@8:1> <= <<sigma_1032@8:2>@11:0>)
      end ApronInterface.convex_hull_interpolate(2941)[4] (0.002000 sec.)
      Horn clauses:
        |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
      lower bounds:
        P[<sigma_1032@8:1>](<sigma_1032@8:1>:int) = true
      upper bounds:
        P[<sigma_1032@8:1>](var7:int) = true
      begin GenHcSolver.classify_pids(3336)[4]
        output:
          [<sigma_1032@8:1>]
      end GenHcSolver.classify_pids(3336)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(3339)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(3340)[5]
          begin InterpProver.interpolate_fresh(3341)[6]
            begin InterpProver.interpolate_log(3342)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(3343)[8]
                begin InterpProver.interpolate_simplify(3344)[9]
                  begin InterpProver.interpolate_quick(3357)[10]
                    
                  end InterpProver.interpolate_quick(3357)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3344)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3343)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(3342)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(3341)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(3340)[5] (0.000000 sec.)
        output:
          P[<sigma_1032@8:1>](<sigma_1032@8:1>:int) = true
      end ApronInterface.convex_hull_interpolate(3339)[4] (0.000000 sec.)
      begin HcSolver.check_validity(3412)[4]
        input:
          P[<fail_1264@16:0>](<fail_1264@16:0>:bool)|- bot
          
          P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
          ((<f_main_1261@13:2> < <f_main_1261@13:0>) && <fail_1264@16:0>) |- P[<fail_1264@16:0>](
          <fail_1264@16:0>:bool)
          
          P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
          |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
          
          |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3412)[4] (0.000000 sec.)
      solution:
        P[<fail_1264@16:0>](<fail_1264@16:0>:bool) = false
        P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int) =
        (<sigma_1032@8:1> <= <<sigma_1032@8:2>@11:0>)
        P[<sigma_1032@8:1>](<sigma_1032@8:1>:int) = true
    end GenHcSolver.solve(1083)[3] (0.013997 sec.)
    begin GenHcSolver.solve(3663)[3]
      Horn clauses:
        P[<fail_1264@16:0>](<fail_1264@16:0>:bool)|- bot
        
        P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
        ((<f_main_1261@13:2> < <f_main_1261@13:0>) && <fail_1264@16:0>) |- P[<fail_1264@16:0>](
        <fail_1264@16:0>:bool)
        
        P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
        |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
        
        |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
      lower bounds:
        P[<sigma_1032@8:1>](<sigma_1032@8:1>:int) = true
        P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int) =
        ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
        P[<fail_1264@16:0>](<fail_1264@16:0>:bool) = false
      upper bounds:
        P[<fail_1264@16:0>](var9:bool) = true
      begin GenHcSolver.classify_pids(4559)[4]
        output:
          [<fail_1264@16:0>]
      end GenHcSolver.classify_pids(4559)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(4562)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(4565)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4565)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(4570)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4570)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(4573)[5]
          begin InterpProver.interpolate_fresh(4574)[6]
            begin InterpProver.interpolate_log(4575)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(4576)[8]
                begin InterpProver.interpolate_simplify(4577)[9]
                  begin InterpProver.interpolate_quick(4592)[10]
                    
                  end InterpProver.interpolate_quick(4592)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(4596)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(4596)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4577)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(4576)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(4575)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(4574)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(4573)[5] (0.000000 sec.)
        output:
          P[<fail_1264@16:0>](<fail_1264@16:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(4562)[4] (0.000000 sec.)
      Horn clauses:
        P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
        (<f_main_1261@13:2> < <f_main_1261@13:0>) |- bot
        
        P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
        |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
        
        |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
      lower bounds:
        P[<sigma_1032@8:1>](<sigma_1032@8:1>:int) = true
        P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int) =
        ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
      upper bounds:
        P[<<sigma_1032@8:2>@11:0>](var10:int,var11:int) = (var11 >= var10)
      begin GenHcSolver.classify_pids(5537)[4]
        output:
          [<<sigma_1032@8:2>@11:0>]
      end GenHcSolver.classify_pids(5537)[4] (0.000000 sec.)
      lb:((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
      nub:(not (<<sigma_1032@8:2>@11:0> >= <sigma_1032@8:1>))
      begin ApronInterface.convex_hull_interpolate(5540)[4]
        lb:((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
        nub:(not (<<sigma_1032@8:2>@11:0> >= <sigma_1032@8:1>))
        begin ExtFormula.Formula.case_analysis_boolean(5550)[5]
          ts: ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
          
        end ExtFormula.Formula.case_analysis_boolean(5550)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5559)[5]
          ts: (<<sigma_1032@8:2>@11:0> < <sigma_1032@8:1>)
          
        end ExtFormula.Formula.case_analysis_boolean(5559)[5] (0.000000 sec.)
        lb':((<<sigma_1032@8:2>@11:0> = 0) && ((-1 * <sigma_1032@8:1>) >= 0))
        nub':(((-1 + (-1 * <<sigma_1032@8:2>@11:0>)) + <sigma_1032@8:1>) >= 0)
        begin InterpProver.interpolate(5564)[5]
          begin InterpProver.interpolate_fresh(5565)[6]
            begin InterpProver.interpolate_log(5566)[7]
              input1: ((<<sigma_1032@8:2>@11:0> = 0) && ((-1 * <sigma_1032@8:1>) >= 0))
              input2: (((-1 + (-1 * <<sigma_1032@8:2>@11:0>)) + <sigma_1032@8:1>) >= 0)
              begin InterpProver.interpolate_check(5567)[8]
                begin InterpProver.interpolate_simplify(5568)[9]
                  begin InterpProver.interpolate_quick(5601)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(5610)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(5611)[12]
                        begin CsisatInterface.interpolate_csisat_log(5612)[13]
                          input1: (0 = v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0 & v_sep_sigma_1032_sep_8_sep_1 <= 0)
                          input2: (1 + v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0) <= v_sep_sigma_1032_sep_8_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(5613)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(5613)[14] (0.000000 sec.)
                          output: (-2*v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0 + 2*v_sep_sigma_1032_sep_8_sep_1) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(5612)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0 + 2*v_sep_sigma_1032_sep_8_sep_1) <= 0
                        after dnf conversion: (((-2*v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0 + 2*v_sep_sigma_1032_sep_8_sep_1) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(5611)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(5610)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(5601)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5568)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5567)[8] (0.001000 sec.)
              output: (<sigma_1032@8:1> <= <<sigma_1032@8:2>@11:0>)
            end InterpProver.interpolate_log(5566)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(5565)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(5564)[5] (0.001000 sec.)
        output:
          P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int) =
          (<sigma_1032@8:1> <= <<sigma_1032@8:2>@11:0>)
      end ApronInterface.convex_hull_interpolate(5540)[4] (0.002000 sec.)
      Horn clauses:
        |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
      lower bounds:
        P[<sigma_1032@8:1>](<sigma_1032@8:1>:int) = true
      upper bounds:
        P[<sigma_1032@8:1>](var12:int) = true
      begin GenHcSolver.classify_pids(5959)[4]
        output:
          [<sigma_1032@8:1>]
      end GenHcSolver.classify_pids(5959)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(5962)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(5965)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(5965)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5970)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5970)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(5973)[5]
          begin InterpProver.interpolate_fresh(5974)[6]
            begin InterpProver.interpolate_log(5975)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(5976)[8]
                begin InterpProver.interpolate_simplify(5977)[9]
                  begin InterpProver.interpolate_quick(5991)[10]
                    
                  end InterpProver.interpolate_quick(5991)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5977)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5976)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(5975)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(5974)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(5973)[5] (0.001000 sec.)
        output:
          P[<sigma_1032@8:1>](<sigma_1032@8:1>:int) = true
      end ApronInterface.convex_hull_interpolate(5962)[4] (0.001000 sec.)
      begin HcSolver.check_validity(6048)[4]
        input:
          P[<fail_1264@16:0>](<fail_1264@16:0>:bool)|- bot
          
          P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
          ((<f_main_1261@13:2> < <f_main_1261@13:0>) && <fail_1264@16:0>) |- P[<fail_1264@16:0>](
          <fail_1264@16:0>:bool)
          
          P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
          |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
          
          |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(6048)[4] (0.001999 sec.)
      solution:
        P[<fail_1264@16:0>](<fail_1264@16:0>:bool) = false
        P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int) =
        (<sigma_1032@8:1> <= <<sigma_1032@8:2>@11:0>)
        P[<sigma_1032@8:1>](<sigma_1032@8:1>:int) = true
    end GenHcSolver.solve(3663)[3] (0.013998 sec.)
    begin YhornInterface.solve(6299)[3]
      begin HcSolver.solve_ub(6300)[4]
        encoded:
          P[<fail_1264@16:0>](<fail_1264@16:0>:int)|- bot
          
          P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
          ((<f_main_1261@13:2> < <f_main_1261@13:0>) && (<fail_1264@16:0> = 1))
          |- P[<fail_1264@16:0>](<fail_1264@16:0>:int)
          
          P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
          |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
          
          |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
        input to Yhorn:
          P[<fail_1264@16:0>](<fail_1264@16:0>:int)|- bot
          
          P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
          ((<f_main_1261@13:2> < <f_main_1261@13:0>) && (<fail_1264@16:0> = 1))
          |- P[<fail_1264@16:0>](<fail_1264@16:0>:int)
          
          P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<sigma_1032@8:1> <= 0) && (<<sigma_1032@8:2>@11:0> = 0))
          |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1264_sep_16_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-$8<0)) & (v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0($8,$7)) -> v_sep_fail_1264_sep_16_sep_0($6).
(($9=0) & ($10<=0)) & (v_sep_sigma_1032_sep_8_sep_1($10)) -> v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0($10,$9).
0=0 -> v_sep_sigma_1032_sep_8_sep_1($10).


v_sep_fail_1264_sep_16_sep_0: X
v_sep_sigma_1032_sep_8_sep_1: X
v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0: X
....
v_sep_fail_1264_sep_16_sep_0: X
v_sep_sigma_1032_sep_8_sep_1: X
v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0: X
...
v_sep_fail_1264_sep_16_sep_0: X
v_sep_sigma_1032_sep_8_sep_1: X
v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0: X
....
v_sep_fail_1264_sep_16_sep_0: X
v_sep_sigma_1032_sep_8_sep_1: X
v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0: X
....(0=0) & (v_sep_fail_1264_sep_16_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-$8<0)) & (v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0($8,$7)) -> v_sep_fail_1264_sep_16_sep_0($6).
(($9=0) & ($10<=0)) & (v_sep_sigma_1032_sep_8_sep_1($10)) -> v_sep_sigma_1032_sep_8_sep_2_sep_11_sep_0($10,$9).
0=0 -> v_sep_sigma_1032_sep_8_sep_1($10).

          |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
        solution:
          P[<fail_1264@16:0>]($11:bool) = false
          P[<sigma_1032@8:1>]($19:int) = true
          P[<<sigma_1032@8:2>@11:0>]($14:int,$16:int) = ($14 <= $16)
        
      end HcSolver.solve_ub(6300)[4] (0.007999 sec.)
      begin HcSolver.check_validity(6406)[4]
        input:
          P[<fail_1264@16:0>](<fail_1264@16:0>:bool)|- bot
          
          P[<<sigma_1032@8:2>@11:0>](<f_main_1261@13:0>:int,<f_main_1261@13:2>:int),
          ((<f_main_1261@13:2> < <f_main_1261@13:0>) && <fail_1264@16:0>) |- P[<fail_1264@16:0>](
          <fail_1264@16:0>:bool)
          
          P[<sigma_1032@8:1>](<sigma_1032@8:1>:int), ((<<sigma_1032@8:2>@11:0> = 0) && (<sigma_1032@8:1> <= 0))
          |- P[<<sigma_1032@8:2>@11:0>](<sigma_1032@8:1>:int,<<sigma_1032@8:2>@11:0>:int)
          
          |- P[<sigma_1032@8:1>](<sigma_1032@8:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(6406)[4] (0.002000 sec.)
      solution:
        P[<fail_1264@16:0>]($11:bool) = false
        P[<sigma_1032@8:1>]($19:int) = true
        P[<<sigma_1032@8:2>@11:0>]($14:int,$16:int) = ($14 <= $16)
    end YhornInterface.solve(6299)[3] (0.009999 sec.)
    
  end RefTypeInfer.infer_etrs(127)[2] (0.055992 sec.)
  refinement types:
    main_1257: X
    f_1262: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    sigma_1032: (v1:int -> (v2:int -> X) -> X) -> v5:int -> (v6:{v6:int | (v5 <= v6)} -> X) -> X
    f_main_1261: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1264: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1263: var25:int -> var24:unit -> X
    f_sigma_1259: var34:int -> (var33:int -> (var32:int -> X) -> X) -> (var29:int -> X) -> var27:int -> X
    f_sigma_1260: var40:int -> var39:int -> (var38:int -> X) -> var36:int -> X
    f_sum_1258: var45:int -> (var44:int -> X) -> var42:int -> X
    sum_1030: var49:int -> (var48:int -> X) -> X
  abstraction types:
    main_1257: X
    f_1262: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    sigma_1032: (v1:int -> (v2:int -> X) -> X) -> v5:int -> (v6:int[v6 -> (
                                                                    v5 <= v6)] -> X) -> X
    f_main_1261: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1264: v1:bool -> (v2:unit -> X) -> X
    f_1263: var25:int -> var24:unit -> X
    f_sigma_1259: var34:int -> (var33:int -> (var32:int -> X) -> X) -> (var29:int -> X) -> var27:int -> X
    f_sigma_1260: var40:int -> var39:int -> (var38:int -> X) -> var36:int -> X
    f_sum_1258: var45:int -> (var44:int -> X) -> var42:int -> X
    sum_1030: var49:int -> (var48:int -> X) -> X
  
end AbsTypeInfer.refine(126)[1] (0.057992 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1257
  main_1257 -> (rand_int f_1262)
  f_1262 x_1232 -> (main_1035 x_1232 (f_1263 x_1232))
  f_1263 x_1232 x_1229 -> end
  f_main_1261 n_1036 k_main_1194 x_1197 when (x_1197 >= n_1036) -> (k_main_1194 ())
  f_main_1261 n_1036 k_main_1194 x_1197 when (not (x_1197 >= n_1036)) -> (fail_1264 true k_main_1194)
  f_sigma_1259 n_1034 f_1033 k_sigma_1145 x_1148 ->
      (sigma_1032 f_1033 (n_1034 - 1) (f_sigma_1260 n_1034 x_1148 k_sigma_1145))
  f_sigma_1260 n_1034 x_1148 k_sigma_1145 x_1149 -> (k_sigma_1145 (x_1148 + x_1149))
  f_sum_1258 n_1031 k_sum_1098 x_1102 -> (k_sum_1098 (n_1031 + x_1102))
  fail_1264 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1194 -> (sigma_1032 sum_1030 n_1036 (f_main_1261 n_1036 k_main_1194))
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (n_1034 <= 0) -> (k_sigma_1145 0)
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (not (n_1034 <= 0)) ->
      (f_1033 n_1034 (f_sigma_1259 n_1034 f_1033 k_sigma_1145))
  sum_1030 n_1031 k_sum_1098 when (n_1031 <= 0) -> (k_sum_1098 0)
  sum_1030 n_1031 k_sum_1098 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1258 n_1031 k_sum_1098))
Types:
  main_1257 : X
  fail_1264 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sigma_1032 : ((int -> (int -> X) -> X) -> x_7:int -> (x_9:int[x_7 <= x_9] -> X) -> X)
  sum_1030 : (int -> (int -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1257 ... --> 
  f_1262 ... --> 
  main_1035 ... --> 
  sigma_1032 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sigma_1259 ... --> 
  sigma_1032 [1/2] ... --> 
  f_sigma_1260 ... --> 
  f_main_1261 [2/2] ... --> 
  fail_1264 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(6857)[1]
  program:
    main_1257  | true = ((Random.int 0) f_1262)
    f_1262 x_1232 | true = (main_1035 x_1232
                                      (f_1263 x_1232))
    f_1263 x_1232 x_1229 | true = end
    f_main_1261 n_1036 k_main_1194 x_1197 | (x_1197 >= n_1036) = (k_main_1194 ())
    f_main_1261 n_1036 k_main_1194 x_1197 | (not (x_1197 >= n_1036)) = (
    fail_1264 true
              k_main_1194)
    f_sigma_1259 n_1034 f_1033 k_sigma_1145 x_1148 | true = (sigma_1032
                                                               f_1033
                                                               (n_1034 - 1)
                                                               (f_sigma_1260 n_1034
                                                                    x_1148
                                                                    k_sigma_1145))
    f_sigma_1260 n_1034 x_1148 k_sigma_1145 x_1149 | true = (k_sigma_1145 (
                                                                    x_1148 + x_1149))
    f_sum_1258 n_1031 k_sum_1098 x_1102 | true = (k_sum_1098 (n_1031 + x_1102))
    fail_1264 b k | true = (fail ())
    main_1035 n_1036 k_main_1194 | true = (sigma_1032 sum_1030
                                                      n_1036
                                                      (f_main_1261 n_1036
                                                                   k_main_1194))
    sigma_1032 f_1033 n_1034 k_sigma_1145 | (n_1034 <= 0) = (k_sigma_1145 0)
    sigma_1032 f_1033 n_1034 k_sigma_1145 | (not (n_1034 <= 0)) = (f_1033
                                                                    n_1034
                                                                    (
                                                                    f_sigma_1259 n_1034
                                                                    f_1033
                                                                    k_sigma_1145))
    sum_1030 n_1031 k_sum_1098 | (n_1031 <= 0) = (k_sum_1098 0)
    sum_1030 n_1031 k_sum_1098 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1258 n_1031
                                                                    k_sum_1098))
    main_1257:X
    f_1262:int -> X
    f_1263:int -> unit -> X
    f_main_1261:int -> (unit -> X) -> int -> X
    f_sigma_1259:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_sigma_1260:int -> int -> (int -> X) -> int -> X
    f_sum_1258:int -> (int -> X) -> int -> X
    fail_1264:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    sigma_1032:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: f_1262,f_1263,f_main_1261,f_sigma_1259,f_sigma_1260,f_sum_1258,main_1035
  counterexample: 0:0:0:1:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1262@22:0> = var50)
     [true.(<main_1035@24:0> = <f_1262@22:0>)
      [true.(<sigma_1032@26:1> = <main_1035@24:0>)
       [(not (<sigma_1032@26:1> <= 0)).(<<sigma_1032@26:0>@29:0> = <sigma_1032@26:1>)
        [true.(<sum_1030@31:0> = <<sigma_1032@26:0>@29:0>)
         [(<sum_1030@31:0> <= 0).(<<sum_1030@31:1>@34:0> = 0)
          [true.(<<<sigma_1032@26:0>@29:1>@36:0> = <<sum_1030@31:1>@34:0>)
           [true.((<f_sigma_1259@38:0> = <sigma_1032@26:1>) && (<f_sigma_1259@38:3> = <<<sigma_1032@26:0>@29:1>@36:0>))
            [true.(<sigma_1032@40:1> = (<f_sigma_1259@38:0> - 1))
             [(<sigma_1032@40:1> <= 0).(<<sigma_1032@40:2>@43:0> = 0)
              [true.
               ((<f_sigma_1260@45:0> = <f_sigma_1259@38:0>) &&
                ((<f_sigma_1260@45:1> = <f_sigma_1259@38:3>) && (<f_sigma_1260@45:3> = <<sigma_1032@40:2>@43:0>)))
               [true.(<<f_sigma_1260@45:2>@47:0> = (<f_sigma_1260@45:1> + <f_sigma_1260@45:3>))
                [true.(<<f_sigma_1259@38:2>@49:0> = <<f_sigma_1260@45:2>@47:0>)
                 [true.(<<sigma_1032@26:2>@51:0> = <<f_sigma_1259@38:2>@49:0>)
                  [true.((<f_main_1261@53:0> = <main_1035@24:0>) && (<f_main_1261@53:2> = <<sigma_1032@26:2>@51:0>))
                   [(not (<f_main_1261@53:2> >= <f_main_1261@53:0>)).(<fail_1264@56:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(6858)[2]
    horn clauses:
      P[<fail_1264@56:0>](<fail_1264@56:0>:bool)|- bot
      
      P[<f_main_1261@53:2>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int),
      ((<f_main_1261@53:2> < <f_main_1261@53:0>) && <fail_1264@56:0>) |- P[<fail_1264@56:0>](
      <fail_1264@56:0>:bool)
      
      P[<main_1035@24:0>](<f_main_1261@53:0>:int),
      P[<<sigma_1032@26:2>@51:0>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int)|- P[<f_main_1261@53:2>](
      <f_main_1261@53:0>:int,<f_main_1261@53:2>:int)
      
      P[<sigma_1032@26:1>](<sigma_1032@26:1>:int),
      P[<<f_sigma_1259@38:2>@49:0>](<sigma_1032@26:1>:int,<<sigma_1032@26:2>@51:0>:int), (
      <sigma_1032@26:1> > 0) |- P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,
                                                            <<sigma_1032@26:2>@51:0>:int)
      
      P[<f_sigma_1259@38:3>](<f_sigma_1259@38:0>:int,<f_sigma_1260@45:1>:int),
      P[<<f_sigma_1260@45:2>@47:0>](<f_sigma_1259@38:0>:int,<f_sigma_1260@45:1>:int,<<f_sigma_1259@38:2>@49:0>:int)|- P[<<f_sigma_1259@38:2>@49:0>](
      <f_sigma_1259@38:0>:int,<<f_sigma_1259@38:2>@49:0>:int)
      
      P[<f_sigma_1260@45:3>](<f_sigma_1260@45:0>:int,<f_sigma_1260@45:1>:int,(
                             <<f_sigma_1260@45:2>@47:0> + (-1 * <f_sigma_1260@45:1>)):int)|- P[<<f_sigma_1260@45:2>@47:0>](
      <f_sigma_1260@45:0>:int,<f_sigma_1260@45:1>:int,<<f_sigma_1260@45:2>@47:0>:int)
      
      P[<f_sigma_1259@38:3>](<f_sigma_1260@45:0>:int,<f_sigma_1260@45:1>:int),
      P[<<sigma_1032@40:2>@43:0>]((-1 + <f_sigma_1260@45:0>):int,<f_sigma_1260@45:3>:int)|- P[<f_sigma_1260@45:3>](
      <f_sigma_1260@45:0>:int,<f_sigma_1260@45:1>:int,<f_sigma_1260@45:3>:int)
      
      P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), ((<<sigma_1032@40:2>@43:0> = 0) && (<sigma_1032@40:1> <= 0))
      |- P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int)
      
      P[<f_sigma_1259@38:3>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int)|- P[<sigma_1032@40:1>](
      <sigma_1032@40:1>:int)
      
      P[<sigma_1032@26:1>](<f_sigma_1259@38:0>:int),
      P[<<<sigma_1032@26:0>@29:1>@36:0>](<f_sigma_1259@38:0>:int,<f_sigma_1259@38:3>:int), (
      <f_sigma_1259@38:0> > 0) |- P[<f_sigma_1259@38:3>](<f_sigma_1259@38:0>:int,
                                                         <f_sigma_1259@38:3>:int)
      
      P[<main_1035@24:0>](<sigma_1032@26:1>:int),
      P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
      <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
      
      P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
      |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
      
      P[<main_1035@24:0>](<sigma_1032@26:1>:int),
      P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](
      <sum_1030@31:0>:int)
      
      P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
      |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      
      P[<main_1035@24:0>](<sigma_1032@26:1>:int)|- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
      
      P[<f_1262@22:0>](<main_1035@24:0>:int)|- P[<main_1035@24:0>](<main_1035@24:0>:int)
      
      |- P[<f_1262@22:0>](<f_1262@22:0>:int)
    call trees:
      <main_1257@19>
        <f_1262@22>
          <main_1035@24>
            <sigma_1032@26>
            </<sigma_1032@26:0>@29>
            <sum_1030@31>
            </<sum_1030@31:1>@34>
            <<<sigma_1032@26:0>@29:1>@36>
              <f_sigma_1259@38>
                <sigma_1032@40>
                </<sigma_1032@40:2>@43>
                <f_sigma_1260@45>
                </<f_sigma_1260@45:2>@47>
              </<f_sigma_1259@38:2>@49>
            </<sigma_1032@26:2>@51>
            <f_main_1261@53>
              <fail_1264@56>
    inlined horn clauses:
      P[<fail_1264@56:0>](<fail_1264@56:0>:bool)|- bot
      
      P[<<sigma_1032@26:2>@51:0>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int),
      ((<f_main_1261@53:2> < <f_main_1261@53:0>) && <fail_1264@56:0>) |- P[<fail_1264@56:0>](
      <fail_1264@56:0>:bool)
      
      P[<sigma_1032@26:1>](<sigma_1032@26:1>:int),
      P[<<<sigma_1032@26:0>@29:1>@36:0>](<sigma_1032@26:1>:int,var51:int),
      P[<<sigma_1032@40:2>@43:0>]((-1 + <sigma_1032@26:1>):int,(<<sigma_1032@26:2>@51:0> + (-1 * var51)):int),
      (<sigma_1032@26:1> > 0) |- P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,
                                                             <<sigma_1032@26:2>@51:0>:int)
      
      P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), ((<<sigma_1032@40:2>@43:0> = 0) && (<sigma_1032@40:1> <= 0))
      |- P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int)
      
      P[<sigma_1032@26:1>]((1 + <sigma_1032@40:1>):int),
      P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
      ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
      
      P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
      <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
      
      P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
      |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
      
      P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
      
      P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
      |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      
      |- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
    begin ParamSubstInfer.infer(8652)[3]
      
    end ParamSubstInfer.infer(8652)[3] (0.029995 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(8654)[3]
      
    end RefTypeInfer.elim_coeffs(8654)[3] (0.000000 sec.)
    begin GenHcSolver.solve(8977)[3]
      Horn clauses:
        P[<fail_1264@56:0>](<fail_1264@56:0>:bool)|- bot
        
        P[<<sigma_1032@26:2>@51:0>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int),
        ((<f_main_1261@53:2> < <f_main_1261@53:0>) && <fail_1264@56:0>) |- P[<fail_1264@56:0>](
        <fail_1264@56:0>:bool)
        
        P[<sigma_1032@26:1>](<sigma_1032@26:1>:int),
        P[<<<sigma_1032@26:0>@29:1>@36:0>](<sigma_1032@26:1>:int,var51:int),
        P[<<sigma_1032@40:2>@43:0>]((-1 + <sigma_1032@26:1>):int,(<<sigma_1032@26:2>@51:0> + (-1 * var51)):int),
        (<sigma_1032@26:1> > 0) |- P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,
                                                               <<sigma_1032@26:2>@51:0>:int)
        
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), ((<<sigma_1032@40:2>@43:0> = 0) && (<sigma_1032@40:1> <= 0))
        |- P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int)
        
        P[<sigma_1032@26:1>]((1 + <sigma_1032@40:1>):int),
        P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
        ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
        
        P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
        <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
        
        P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
        |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
        
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
        
        P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
        |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
        
        |- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
      lower bounds:
        P[<sigma_1032@26:1>](<sigma_1032@26:1>:int) = true
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (<sum_1030@31:0> > 0)
        P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
        P[<<<sigma_1032@26:0>@29:1>@36:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int) = false
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int) = false
        P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int) = false
        P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,<<sigma_1032@26:2>@51:0>:int) = false
        P[<fail_1264@56:0>](<fail_1264@56:0>:bool) = false
      upper bounds:
        P[<<sigma_1032@26:2>@51:0>](var62:int,var63:int) = true
        P[<<sigma_1032@40:2>@43:0>](var56:int,var57:int) = true
      begin GenHcSolver.classify_pids(11198)[4]
        output:
          [<<sigma_1032@40:2>@43:0>;<<sigma_1032@26:2>@51:0>]
      end GenHcSolver.classify_pids(11198)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(11209)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(11210)[5]
          begin InterpProver.interpolate_fresh(11211)[6]
            begin InterpProver.interpolate_log(11212)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(11213)[8]
                begin InterpProver.interpolate_simplify(11214)[9]
                  begin InterpProver.interpolate_quick(11227)[10]
                    
                  end InterpProver.interpolate_quick(11227)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(11231)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(11231)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(11214)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(11213)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(11212)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(11211)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(11210)[5] (0.000000 sec.)
        output:
          P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int) = false
          P[<<sigma_1032@26:2>@51:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int) = false
      end ApronInterface.convex_hull_interpolate(11209)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1264@56:0>](<fail_1264@56:0>:bool)|- bot
        
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), (<sigma_1032@40:1> <= 0) |- bot
        
        P[<sigma_1032@26:1>]((1 + <sigma_1032@40:1>):int),
        P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
        ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
        
        P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
        <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
        
        P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
        |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
        
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
        
        P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
        |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
        
        |- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
      lower bounds:
        P[<sigma_1032@26:1>](<sigma_1032@26:1>:int) = true
        P[<fail_1264@56:0>](var67:bool) = false
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (<sum_1030@31:0> > 0)
        P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
        P[<<<sigma_1032@26:0>@29:1>@36:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int) = false
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int) = false
      upper bounds:
        P[<sigma_1032@40:1>](var74:int) = true
        P[<sigma_1032@26:1>](var70:int) = true
      begin GenHcSolver.classify_pids(13972)[4]
        output:
          [<sigma_1032@26:1>;<sigma_1032@40:1>]
      end GenHcSolver.classify_pids(13972)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(13983)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(13984)[5]
          begin InterpProver.interpolate_fresh(13985)[6]
            begin InterpProver.interpolate_log(13986)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(13987)[8]
                begin InterpProver.interpolate_simplify(13988)[9]
                  begin InterpProver.interpolate_quick(14001)[10]
                    
                  end InterpProver.interpolate_quick(14001)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(13988)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(13987)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(13986)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(13985)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(13984)[5] (0.000000 sec.)
        output:
          P[<sigma_1032@26:1>](<sigma_1032@26:1>:int) = true
          P[<sigma_1032@40:1>](<sigma_1032@26:1>:int) = true
      end ApronInterface.convex_hull_interpolate(13983)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1264@56:0>](<fail_1264@56:0>:bool)|- bot
        
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), (<sigma_1032@40:1> <= 0) |- bot
        
        P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
        ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
        
        P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
        <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
        
        P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
        |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
        
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
        
         (<<sigma_1032@26:0>@29:0> > 0) |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      lower bounds:
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
        P[<fail_1264@56:0>](var78:bool) = false
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (<sum_1030@31:0> > 0)
        P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
        P[<<<sigma_1032@26:0>@29:1>@36:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int) = false
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int) = false
      upper bounds:
        P[<fail_1264@56:0>](var81:bool) = true
      begin GenHcSolver.classify_pids(15757)[4]
        output:
          [<fail_1264@56:0>]
      end GenHcSolver.classify_pids(15757)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(15760)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(15761)[5]
          begin InterpProver.interpolate_fresh(15762)[6]
            begin InterpProver.interpolate_log(15763)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(15764)[8]
                begin InterpProver.interpolate_simplify(15765)[9]
                  begin InterpProver.interpolate_quick(15778)[10]
                    
                  end InterpProver.interpolate_quick(15778)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(15782)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(15782)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(15765)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(15764)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(15763)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(15762)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(15761)[5] (0.000000 sec.)
        output:
          P[<fail_1264@56:0>](var78:bool) = false
      end ApronInterface.convex_hull_interpolate(15760)[4] (0.000000 sec.)
      Horn clauses:
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), (<sigma_1032@40:1> <= 0) |- bot
        
        P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
        ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
        
        P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
        <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
        
        P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
        |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
        
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
        
         (<<sigma_1032@26:0>@29:0> > 0) |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      lower bounds:
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (<sum_1030@31:0> > 0)
        P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
        P[<<<sigma_1032@26:0>@29:1>@36:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int) = false
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int) = false
      upper bounds:
        P[<sigma_1032@40:1>](var83:int) = true
      begin GenHcSolver.classify_pids(16777)[4]
        output:
          [<sigma_1032@40:1>]
      end GenHcSolver.classify_pids(16777)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(16780)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(16781)[5]
          begin InterpProver.interpolate_fresh(16782)[6]
            begin InterpProver.interpolate_log(16783)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(16784)[8]
                begin InterpProver.interpolate_simplify(16785)[9]
                  begin InterpProver.interpolate_quick(16798)[10]
                    
                  end InterpProver.interpolate_quick(16798)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(16802)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(16802)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(16785)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(16784)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(16783)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(16782)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(16781)[5] (0.000000 sec.)
        output:
          P[<sigma_1032@40:1>](<sigma_1032@40:1>:int) = false
      end ApronInterface.convex_hull_interpolate(16780)[4] (0.000000 sec.)
      Horn clauses:
        P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
        ((1 + <sigma_1032@40:1>) > 0) |- bot
        
        P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
        <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
        
        P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
        |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
        
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
        
         (<<sigma_1032@26:0>@29:0> > 0) |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      lower bounds:
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (<sum_1030@31:0> > 0)
        P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
        P[<<<sigma_1032@26:0>@29:1>@36:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int) = false
      upper bounds:
        P[<<<sigma_1032@26:0>@29:1>@36:0>](var86:int,var87:int) = true
      begin GenHcSolver.classify_pids(17687)[4]
        output:
          [<<<sigma_1032@26:0>@29:1>@36:0>]
      end GenHcSolver.classify_pids(17687)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(17690)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(17691)[5]
          begin InterpProver.interpolate_fresh(17692)[6]
            begin InterpProver.interpolate_log(17693)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(17694)[8]
                begin InterpProver.interpolate_simplify(17695)[9]
                  begin InterpProver.interpolate_quick(17708)[10]
                    
                  end InterpProver.interpolate_quick(17708)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(17712)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(17712)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(17695)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(17694)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(17693)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(17692)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(17691)[5] (0.000000 sec.)
        output:
          P[<<<sigma_1032@26:0>@29:1>@36:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int) = false
      end ApronInterface.convex_hull_interpolate(17690)[4] (0.000000 sec.)
      Horn clauses:
        P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- bot
        
        P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
        |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
        
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
        
         (<<sigma_1032@26:0>@29:0> > 0) |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      lower bounds:
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (<sum_1030@31:0> > 0)
        P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
      upper bounds:
        P[<<sum_1030@31:1>@34:0>](var90:int,var91:int) = true
      begin GenHcSolver.classify_pids(18425)[4]
        output:
          [<<sum_1030@31:1>@34:0>]
      end GenHcSolver.classify_pids(18425)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(18428)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(18429)[5]
          begin InterpProver.interpolate_fresh(18430)[6]
            begin InterpProver.interpolate_log(18431)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(18432)[8]
                begin InterpProver.interpolate_simplify(18433)[9]
                  begin InterpProver.interpolate_quick(18446)[10]
                    
                  end InterpProver.interpolate_quick(18446)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(18450)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(18450)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(18433)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(18432)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(18431)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(18430)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(18429)[5] (0.001000 sec.)
        output:
          P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
      end ApronInterface.convex_hull_interpolate(18428)[4] (0.001000 sec.)
      Horn clauses:
        P[<sum_1030@31:0>](<sum_1030@31:0>:int), (<sum_1030@31:0> <= 0) |- bot
        
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
        
         (<<sigma_1032@26:0>@29:0> > 0) |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      lower bounds:
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (<sum_1030@31:0> > 0)
      upper bounds:
        P[<sum_1030@31:0>](var92:int) = (var92 > 0)
      begin GenHcSolver.classify_pids(19076)[4]
        output:
          [<sum_1030@31:0>]
      end GenHcSolver.classify_pids(19076)[4] (0.000000 sec.)
      lb:(<sum_1030@31:0> > 0)
      nub:(not (<sum_1030@31:0> > 0))
      begin ApronInterface.convex_hull_interpolate(19079)[4]
        lb:(<sum_1030@31:0> > 0)
        nub:(not (<sum_1030@31:0> > 0))
        lb':(<sum_1030@31:0> > 0)
        nub':(not (<sum_1030@31:0> > 0))
        begin InterpProver.interpolate(19080)[5]
          begin InterpProver.interpolate_fresh(19081)[6]
            begin InterpProver.interpolate_log(19082)[7]
              input1: (<sum_1030@31:0> > 0)
              input2: (not (<sum_1030@31:0> > 0))
              begin InterpProver.interpolate_check(19083)[8]
                begin InterpProver.interpolate_simplify(19084)[9]
                  begin InterpProver.interpolate_quick(19101)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(19110)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(19111)[12]
                        begin CsisatInterface.interpolate_csisat_log(19112)[13]
                          input1: 1 <= v_sep_sum_1030_sep_31_sep_0
                          input2: v_sep_sum_1030_sep_31_sep_0 <= 0
                          begin CsisatInterface.interpolate_csisat_raw(19113)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(19113)[14] (0.000000 sec.)
                          output: -2*v_sep_sum_1030_sep_31_sep_0 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(19112)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_sum_1030_sep_31_sep_0 <= -2
                        after dnf conversion: ((-2*v_sep_sum_1030_sep_31_sep_0 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(19111)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(19110)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(19101)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(19084)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(19083)[8] (0.002000 sec.)
              output: (1 <= <sum_1030@31:0>)
            end InterpProver.interpolate_log(19082)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(19081)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(19080)[5] (0.002000 sec.)
        output:
          P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (1 <= <sum_1030@31:0>)
      end ApronInterface.convex_hull_interpolate(19079)[4] (0.002000 sec.)
      Horn clauses:
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int), (1 > <sum_1030@31:0>) |- bot
        
         (<<sigma_1032@26:0>@29:0> > 0) |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      lower bounds:
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
      upper bounds:
        P[<<sigma_1032@26:0>@29:0>](var93:int) = (1 <= var93)
      begin GenHcSolver.classify_pids(19607)[4]
        output:
          [<<sigma_1032@26:0>@29:0>]
      end GenHcSolver.classify_pids(19607)[4] (0.000000 sec.)
      lb:(<<sigma_1032@26:0>@29:0> > 0)
      nub:(not (1 <= <<sigma_1032@26:0>@29:0>))
      begin ApronInterface.convex_hull_interpolate(19610)[4]
        lb:(<<sigma_1032@26:0>@29:0> > 0)
        nub:(not (1 <= <<sigma_1032@26:0>@29:0>))
        lb':(<<sigma_1032@26:0>@29:0> > 0)
        nub':(not (1 <= <<sigma_1032@26:0>@29:0>))
        begin InterpProver.interpolate(19611)[5]
          begin InterpProver.interpolate_fresh(19612)[6]
            begin InterpProver.interpolate_log(19613)[7]
              input1: (<<sigma_1032@26:0>@29:0> > 0)
              input2: (not (1 <= <<sigma_1032@26:0>@29:0>))
              begin InterpProver.interpolate_check(19614)[8]
                begin InterpProver.interpolate_simplify(19615)[9]
                  begin InterpProver.interpolate_quick(19634)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(19643)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(19644)[12]
                        begin CsisatInterface.interpolate_csisat_log(19645)[13]
                          input1: 1 <= v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0
                          input2: (1 + v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0) <= 1
                          begin CsisatInterface.interpolate_csisat_raw(19646)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(19646)[14] (0.000000 sec.)
                          output: -2*v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(19645)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0 <= -2
                        after dnf conversion: ((-2*v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(19644)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(19643)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(19634)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(19615)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(19614)[8] (0.001000 sec.)
              output: (1 <= <<sigma_1032@26:0>@29:0>)
            end InterpProver.interpolate_log(19613)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(19612)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(19611)[5] (0.001000 sec.)
        output:
          P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (1 <= <<sigma_1032@26:0>@29:0>)
      end ApronInterface.convex_hull_interpolate(19610)[4] (0.001000 sec.)
      begin HcSolver.check_validity(19755)[4]
        input:
          P[<fail_1264@56:0>](<fail_1264@56:0>:bool)|- bot
          
          P[<<sigma_1032@26:2>@51:0>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int),
          ((<f_main_1261@53:2> < <f_main_1261@53:0>) && <fail_1264@56:0>) |- P[<fail_1264@56:0>](
          <fail_1264@56:0>:bool)
          
          P[<sigma_1032@26:1>](<sigma_1032@26:1>:int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>](<sigma_1032@26:1>:int,var51:int),
          P[<<sigma_1032@40:2>@43:0>]((-1 + <sigma_1032@26:1>):int,(<<sigma_1032@26:2>@51:0> + (-1 * var51)):int),
          (<sigma_1032@26:1> > 0) |- P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,
                                                                 <<sigma_1032@26:2>@51:0>:int)
          
          P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), ((<<sigma_1032@40:2>@43:0> = 0) && (<sigma_1032@40:1> <= 0))
          |- P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int)
          
          P[<sigma_1032@26:1>]((1 + <sigma_1032@40:1>):int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
          ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
          
          P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
          <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
          
          P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
          |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
          
          P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
          
          P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
          |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
          
          |- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(19755)[4] (0.002999 sec.)
      solution:
        P[<fail_1264@56:0>](var78:bool) = false
        P[<<sigma_1032@26:2>@51:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int) = false
        P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int) = false
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int) = false
        P[<<<sigma_1032@26:0>@29:1>@36:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int) = false
        P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (1 <= <sum_1030@31:0>)
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (1 <= <<sigma_1032@26:0>@29:0>)
        P[<sigma_1032@26:1>](<sigma_1032@26:1>:int) = true
    end GenHcSolver.solve(8977)[3] (0.041993 sec.)
    begin GenHcSolver.solve(20213)[3]
      Horn clauses:
        P[<fail_1264@56:0>](<fail_1264@56:0>:bool)|- bot
        
        P[<<sigma_1032@26:2>@51:0>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int),
        ((<f_main_1261@53:2> < <f_main_1261@53:0>) && <fail_1264@56:0>) |- P[<fail_1264@56:0>](
        <fail_1264@56:0>:bool)
        
        P[<sigma_1032@26:1>](<sigma_1032@26:1>:int),
        P[<<<sigma_1032@26:0>@29:1>@36:0>](<sigma_1032@26:1>:int,var51:int),
        P[<<sigma_1032@40:2>@43:0>]((-1 + <sigma_1032@26:1>):int,(<<sigma_1032@26:2>@51:0> + (-1 * var51)):int),
        (<sigma_1032@26:1> > 0) |- P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,
                                                               <<sigma_1032@26:2>@51:0>:int)
        
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), ((<<sigma_1032@40:2>@43:0> = 0) && (<sigma_1032@40:1> <= 0))
        |- P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int)
        
        P[<sigma_1032@26:1>]((1 + <sigma_1032@40:1>):int),
        P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
        ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
        
        P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
        <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
        
        P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
        |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
        
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
        
        P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
        |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
        
        |- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
      lower bounds:
        P[<sigma_1032@26:1>](<sigma_1032@26:1>:int) = true
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (<sum_1030@31:0> > 0)
        P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
        P[<<<sigma_1032@26:0>@29:1>@36:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int) = false
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int) = false
        P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int) = false
        P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,<<sigma_1032@26:2>@51:0>:int) = false
        P[<fail_1264@56:0>](<fail_1264@56:0>:bool) = false
      upper bounds:
        P[<<sigma_1032@26:2>@51:0>](var104:int,var105:int) = true
        P[<<sigma_1032@40:2>@43:0>](var98:int,var99:int) = true
      begin GenHcSolver.classify_pids(22434)[4]
        output:
          [<<sigma_1032@40:2>@43:0>;<<sigma_1032@26:2>@51:0>]
      end GenHcSolver.classify_pids(22434)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(22445)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(22448)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(22448)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(22453)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(22453)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(22456)[5]
          begin InterpProver.interpolate_fresh(22457)[6]
            begin InterpProver.interpolate_log(22458)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(22459)[8]
                begin InterpProver.interpolate_simplify(22460)[9]
                  begin InterpProver.interpolate_quick(22475)[10]
                    
                  end InterpProver.interpolate_quick(22475)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(22479)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(22479)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(22460)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(22459)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(22458)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(22457)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(22456)[5] (0.001000 sec.)
        output:
          P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int) = false
          P[<<sigma_1032@26:2>@51:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int) = false
      end ApronInterface.convex_hull_interpolate(22445)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1264@56:0>](<fail_1264@56:0>:bool)|- bot
        
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), (<sigma_1032@40:1> <= 0) |- bot
        
        P[<sigma_1032@26:1>]((1 + <sigma_1032@40:1>):int),
        P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
        ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
        
        P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
        <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
        
        P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
        |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
        
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
        
        P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
        |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
        
        |- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
      lower bounds:
        P[<sigma_1032@26:1>](<sigma_1032@26:1>:int) = true
        P[<fail_1264@56:0>](var109:bool) = false
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (<sum_1030@31:0> > 0)
        P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
        P[<<<sigma_1032@26:0>@29:1>@36:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int) = false
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int) = false
      upper bounds:
        P[<sigma_1032@40:1>](var116:int) = true
        P[<sigma_1032@26:1>](var112:int) = true
      begin GenHcSolver.classify_pids(25227)[4]
        output:
          [<sigma_1032@26:1>;<sigma_1032@40:1>]
      end GenHcSolver.classify_pids(25227)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(25238)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(25241)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(25241)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(25246)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(25246)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(25249)[5]
          begin InterpProver.interpolate_fresh(25250)[6]
            begin InterpProver.interpolate_log(25251)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(25252)[8]
                begin InterpProver.interpolate_simplify(25253)[9]
                  begin InterpProver.interpolate_quick(25267)[10]
                    
                  end InterpProver.interpolate_quick(25267)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(25253)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(25252)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(25251)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(25250)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(25249)[5] (0.000000 sec.)
        output:
          P[<sigma_1032@26:1>](<sigma_1032@26:1>:int) = true
          P[<sigma_1032@40:1>](<sigma_1032@26:1>:int) = true
      end ApronInterface.convex_hull_interpolate(25238)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1264@56:0>](<fail_1264@56:0>:bool)|- bot
        
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), (<sigma_1032@40:1> <= 0) |- bot
        
        P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
        ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
        
        P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
        <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
        
        P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
        |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
        
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
        
         (<<sigma_1032@26:0>@29:0> > 0) |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      lower bounds:
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
        P[<fail_1264@56:0>](var120:bool) = false
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (<sum_1030@31:0> > 0)
        P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
        P[<<<sigma_1032@26:0>@29:1>@36:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int) = false
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int) = false
      upper bounds:
        P[<fail_1264@56:0>](var123:bool) = true
      begin GenHcSolver.classify_pids(27025)[4]
        output:
          [<fail_1264@56:0>]
      end GenHcSolver.classify_pids(27025)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(27028)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(27031)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(27031)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(27036)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(27036)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(27039)[5]
          begin InterpProver.interpolate_fresh(27040)[6]
            begin InterpProver.interpolate_log(27041)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(27042)[8]
                begin InterpProver.interpolate_simplify(27043)[9]
                  begin InterpProver.interpolate_quick(27058)[10]
                    
                  end InterpProver.interpolate_quick(27058)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(27062)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(27062)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(27043)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(27042)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(27041)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(27040)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(27039)[5] (0.001000 sec.)
        output:
          P[<fail_1264@56:0>](var120:bool) = false
      end ApronInterface.convex_hull_interpolate(27028)[4] (0.001000 sec.)
      Horn clauses:
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), (<sigma_1032@40:1> <= 0) |- bot
        
        P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
        ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
        
        P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
        <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
        
        P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
        |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
        
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
        
         (<<sigma_1032@26:0>@29:0> > 0) |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      lower bounds:
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (<sum_1030@31:0> > 0)
        P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
        P[<<<sigma_1032@26:0>@29:1>@36:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int) = false
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int) = false
      upper bounds:
        P[<sigma_1032@40:1>](var125:int) = true
      begin GenHcSolver.classify_pids(28064)[4]
        output:
          [<sigma_1032@40:1>]
      end GenHcSolver.classify_pids(28064)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(28067)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(28070)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(28070)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(28075)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(28075)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(28078)[5]
          begin InterpProver.interpolate_fresh(28079)[6]
            begin InterpProver.interpolate_log(28080)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(28081)[8]
                begin InterpProver.interpolate_simplify(28082)[9]
                  begin InterpProver.interpolate_quick(28097)[10]
                    
                  end InterpProver.interpolate_quick(28097)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(28101)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(28101)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(28082)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(28081)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(28080)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(28079)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(28078)[5] (0.001000 sec.)
        output:
          P[<sigma_1032@40:1>](<sigma_1032@40:1>:int) = false
      end ApronInterface.convex_hull_interpolate(28067)[4] (0.001000 sec.)
      Horn clauses:
        P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
        ((1 + <sigma_1032@40:1>) > 0) |- bot
        
        P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
        <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
        
        P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
        |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
        
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
        
         (<<sigma_1032@26:0>@29:0> > 0) |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      lower bounds:
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (<sum_1030@31:0> > 0)
        P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
        P[<<<sigma_1032@26:0>@29:1>@36:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int) = false
      upper bounds:
        P[<<<sigma_1032@26:0>@29:1>@36:0>](var128:int,var129:int) = true
      begin GenHcSolver.classify_pids(28993)[4]
        output:
          [<<<sigma_1032@26:0>@29:1>@36:0>]
      end GenHcSolver.classify_pids(28993)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(28996)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(28999)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(28999)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(29004)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(29004)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(29007)[5]
          begin InterpProver.interpolate_fresh(29008)[6]
            begin InterpProver.interpolate_log(29009)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(29010)[8]
                begin InterpProver.interpolate_simplify(29011)[9]
                  begin InterpProver.interpolate_quick(29026)[10]
                    
                  end InterpProver.interpolate_quick(29026)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(29030)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(29030)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(29011)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(29010)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(29009)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(29008)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(29007)[5] (0.000000 sec.)
        output:
          P[<<<sigma_1032@26:0>@29:1>@36:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int) = false
      end ApronInterface.convex_hull_interpolate(28996)[4] (0.000000 sec.)
      Horn clauses:
        P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- bot
        
        P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
        |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
        
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
        
         (<<sigma_1032@26:0>@29:0> > 0) |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      lower bounds:
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (<sum_1030@31:0> > 0)
        P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
      upper bounds:
        P[<<sum_1030@31:1>@34:0>](var132:int,var133:int) = true
      begin GenHcSolver.classify_pids(29750)[4]
        output:
          [<<sum_1030@31:1>@34:0>]
      end GenHcSolver.classify_pids(29750)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(29753)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(29756)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(29756)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(29761)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(29761)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(29764)[5]
          begin InterpProver.interpolate_fresh(29765)[6]
            begin InterpProver.interpolate_log(29766)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(29767)[8]
                begin InterpProver.interpolate_simplify(29768)[9]
                  begin InterpProver.interpolate_quick(29783)[10]
                    
                  end InterpProver.interpolate_quick(29783)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(29787)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(29787)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(29768)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(29767)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(29766)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(29765)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(29764)[5] (0.001000 sec.)
        output:
          P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
      end ApronInterface.convex_hull_interpolate(29753)[4] (0.002000 sec.)
      Horn clauses:
        P[<sum_1030@31:0>](<sum_1030@31:0>:int), (<sum_1030@31:0> <= 0) |- bot
        
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
        
         (<<sigma_1032@26:0>@29:0> > 0) |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      lower bounds:
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (<sum_1030@31:0> > 0)
      upper bounds:
        P[<sum_1030@31:0>](var134:int) = (var134 > 0)
      begin GenHcSolver.classify_pids(30420)[4]
        output:
          [<sum_1030@31:0>]
      end GenHcSolver.classify_pids(30420)[4] (0.000999 sec.)
      lb:(<sum_1030@31:0> > 0)
      nub:(not (<sum_1030@31:0> > 0))
      begin ApronInterface.convex_hull_interpolate(30423)[4]
        lb:(<sum_1030@31:0> > 0)
        nub:(not (<sum_1030@31:0> > 0))
        begin ExtFormula.Formula.case_analysis_boolean(30427)[5]
          ts: (<sum_1030@31:0> > 0)
          
        end ExtFormula.Formula.case_analysis_boolean(30427)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(30434)[5]
          ts: (<sum_1030@31:0> <= 0)
          
        end ExtFormula.Formula.case_analysis_boolean(30434)[5] (0.000000 sec.)
        lb':((-1 + <sum_1030@31:0>) >= 0)
        nub':((-1 * <sum_1030@31:0>) >= 0)
        begin InterpProver.interpolate(30438)[5]
          begin InterpProver.interpolate_fresh(30439)[6]
            begin InterpProver.interpolate_log(30440)[7]
              input1: ((-1 + <sum_1030@31:0>) >= 0)
              input2: ((-1 * <sum_1030@31:0>) >= 0)
              begin InterpProver.interpolate_check(30441)[8]
                begin InterpProver.interpolate_simplify(30442)[9]
                  begin InterpProver.interpolate_quick(30461)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(30470)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(30471)[12]
                        begin CsisatInterface.interpolate_csisat_log(30472)[13]
                          input1: 1 <= v_sep_sum_1030_sep_31_sep_0
                          input2: v_sep_sum_1030_sep_31_sep_0 <= 0
                          begin CsisatInterface.interpolate_csisat_raw(30473)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(30473)[14] (0.000000 sec.)
                          output: -2*v_sep_sum_1030_sep_31_sep_0 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(30472)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_sum_1030_sep_31_sep_0 <= -2
                        after dnf conversion: ((-2*v_sep_sum_1030_sep_31_sep_0 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(30471)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(30470)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(30461)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(30442)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(30441)[8] (0.002000 sec.)
              output: (1 <= <sum_1030@31:0>)
            end InterpProver.interpolate_log(30440)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(30439)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(30438)[5] (0.002000 sec.)
        output:
          P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (1 <= <sum_1030@31:0>)
      end ApronInterface.convex_hull_interpolate(30423)[4] (0.002000 sec.)
      Horn clauses:
        P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int), (1 > <sum_1030@31:0>) |- bot
        
         (<<sigma_1032@26:0>@29:0> > 0) |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
      lower bounds:
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (<<sigma_1032@26:0>@29:0> > 0)
      upper bounds:
        P[<<sigma_1032@26:0>@29:0>](var135:int) = (1 <= var135)
      begin GenHcSolver.classify_pids(30966)[4]
        output:
          [<<sigma_1032@26:0>@29:0>]
      end GenHcSolver.classify_pids(30966)[4] (0.000000 sec.)
      lb:(<<sigma_1032@26:0>@29:0> > 0)
      nub:(not (1 <= <<sigma_1032@26:0>@29:0>))
      begin ApronInterface.convex_hull_interpolate(30969)[4]
        lb:(<<sigma_1032@26:0>@29:0> > 0)
        nub:(not (1 <= <<sigma_1032@26:0>@29:0>))
        begin ExtFormula.Formula.case_analysis_boolean(30973)[5]
          ts: (<<sigma_1032@26:0>@29:0> > 0)
          
        end ExtFormula.Formula.case_analysis_boolean(30973)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(30981)[5]
          ts: (1 > <<sigma_1032@26:0>@29:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(30981)[5] (0.000000 sec.)
        lb':((-1 + <<sigma_1032@26:0>@29:0>) >= 0)
        nub':((-1 * <<sigma_1032@26:0>@29:0>) >= 0)
        begin InterpProver.interpolate(30986)[5]
          begin InterpProver.interpolate_fresh(30987)[6]
            begin InterpProver.interpolate_log(30988)[7]
              input1: ((-1 + <<sigma_1032@26:0>@29:0>) >= 0)
              input2: ((-1 * <<sigma_1032@26:0>@29:0>) >= 0)
              begin InterpProver.interpolate_check(30989)[8]
                begin InterpProver.interpolate_simplify(30990)[9]
                  begin InterpProver.interpolate_quick(31009)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(31018)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(31019)[12]
                        begin CsisatInterface.interpolate_csisat_log(31020)[13]
                          input1: 1 <= v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0
                          input2: v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0 <= 0
                          begin CsisatInterface.interpolate_csisat_raw(31021)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(31021)[14] (0.000000 sec.)
                          output: -2*v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(31020)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0 <= -2
                        after dnf conversion: ((-2*v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(31019)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(31018)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(31009)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(30990)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(30989)[8] (0.001000 sec.)
              output: (1 <= <<sigma_1032@26:0>@29:0>)
            end InterpProver.interpolate_log(30988)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(30987)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(30986)[5] (0.001000 sec.)
        output:
          P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (1 <= <<sigma_1032@26:0>@29:0>)
      end ApronInterface.convex_hull_interpolate(30969)[4] (0.001000 sec.)
      begin HcSolver.check_validity(31136)[4]
        input:
          P[<fail_1264@56:0>](<fail_1264@56:0>:bool)|- bot
          
          P[<<sigma_1032@26:2>@51:0>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int),
          ((<f_main_1261@53:2> < <f_main_1261@53:0>) && <fail_1264@56:0>) |- P[<fail_1264@56:0>](
          <fail_1264@56:0>:bool)
          
          P[<sigma_1032@26:1>](<sigma_1032@26:1>:int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>](<sigma_1032@26:1>:int,var51:int),
          P[<<sigma_1032@40:2>@43:0>]((-1 + <sigma_1032@26:1>):int,(<<sigma_1032@26:2>@51:0> + (-1 * var51)):int),
          (<sigma_1032@26:1> > 0) |- P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,
                                                                 <<sigma_1032@26:2>@51:0>:int)
          
          P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), ((<<sigma_1032@40:2>@43:0> = 0) && (<sigma_1032@40:1> <= 0))
          |- P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int)
          
          P[<sigma_1032@26:1>]((1 + <sigma_1032@40:1>):int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
          ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
          
          P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
          <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
          
          P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
          |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
          
          P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
          
          P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
          |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
          
          |- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(31136)[4] (0.002999 sec.)
      solution:
        P[<fail_1264@56:0>](var120:bool) = false
        P[<<sigma_1032@26:2>@51:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int) = false
        P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int) = false
        P[<sigma_1032@40:1>](<sigma_1032@40:1>:int) = false
        P[<<<sigma_1032@26:0>@29:1>@36:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int) = false
        P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int) = false
        P[<sum_1030@31:0>](<sum_1030@31:0>:int) = (1 <= <sum_1030@31:0>)
        P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int) = (1 <= <<sigma_1032@26:0>@29:0>)
        P[<sigma_1032@26:1>](<sigma_1032@26:1>:int) = true
    end GenHcSolver.solve(20213)[3] (0.051992 sec.)
    begin YhornInterface.solve(31594)[3]
      begin HcSolver.solve_ub(31595)[4]
        encoded:
          P[<fail_1264@56:0>](<fail_1264@56:0>:int)|- bot
          
          P[<<sigma_1032@26:2>@51:0>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int),
          ((<f_main_1261@53:2> < <f_main_1261@53:0>) && (<fail_1264@56:0> = 1))
          |- P[<fail_1264@56:0>](<fail_1264@56:0>:int)
          
          P[<sigma_1032@26:1>](<sigma_1032@26:1>:int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>](<sigma_1032@26:1>:int,var51:int),
          P[<<sigma_1032@40:2>@43:0>]((-1 + <sigma_1032@26:1>):int,(<<sigma_1032@26:2>@51:0> + (-1 * var51)):int),
          (<sigma_1032@26:1> > 0) |- P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,
                                                                 <<sigma_1032@26:2>@51:0>:int)
          
          P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), ((<<sigma_1032@40:2>@43:0> = 0) && (<sigma_1032@40:1> <= 0))
          |- P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int)
          
          P[<sigma_1032@26:1>]((1 + <sigma_1032@40:1>):int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
          ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
          
          P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
          <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
          
          P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
          |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
          
          P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
          
          P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
          |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
          
          |- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
        input to Yhorn:
          P[<fail_1264@56:0>](<fail_1264@56:0>:int)|- bot
          
          P[<<sigma_1032@26:2>@51:0>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int),
          ((<f_main_1261@53:2> < <f_main_1261@53:0>) && (<fail_1264@56:0> = 1))
          |- P[<fail_1264@56:0>](<fail_1264@56:0>:int)
          
          P[<sigma_1032@26:1>](<sigma_1032@26:1>:int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>](<sigma_1032@26:1>:int,var51:int),
          P[<<sigma_1032@40:2>@43:0>](var136:int,var137:int),
          (((var137 + var51) = <<sigma_1032@26:2>@51:0>) &&
           (((1 + var136) = <sigma_1032@26:1>) && (<sigma_1032@26:1> > 0)))
          |- P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,<<sigma_1032@26:2>@51:0>:int)
          
          P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), ((<sigma_1032@40:1> <= 0) && (<<sigma_1032@40:2>@43:0> = 0))
          |- P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int)
          
          P[<sigma_1032@26:1>](var138:int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>](var139:int,<f_sigma_1259@38:3>:int),
          ((var139 = (1 + <sigma_1032@40:1>)) && ((var138 = (1 + <sigma_1032@40:1>)) && ((1 + <sigma_1032@40:1>) > 0)))
          |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
          
          P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
          <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
          
          P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<sum_1030@31:0> <= 0) && (<<sum_1030@31:1>@34:0> = 0))
          |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
          
          P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
          
          P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
          |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1264_sep_56_sep_0($74)) -> 1=0.
(($74-1=0) & ($75-$76<0)) & (v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0($76,$75)) -> v_sep_fail_1264_sep_56_sep_0($74).
(($77>0) & (-$77+$78+1=0) & ($79+$80-$81=0)) & (v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0($78,$79)) & (v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0($77,$80)) & (v_sep_sigma_1032_sep_26_sep_1($77)) -> v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0($77,$81).
(($82=0) & ($83<=0)) & (v_sep_sigma_1032_sep_40_sep_1($83)) -> v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0($83,$82).
(($83+1>0) & (-$83+$84-1=0) & (-$83+$85-1=0)) & (v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0($85,$86)) & (v_sep_sigma_1032_sep_26_sep_1($84)) -> v_sep_sigma_1032_sep_40_sep_1($83).
(0=0) & (v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0($87,$88)) -> v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0($87,$88).
(($89=0) & ($90<=0)) & (v_sep_sum_1030_sep_31_sep_0($90)) -> v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0($90,$89).
(0=0) & (v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0($90)) -> v_sep_sum_1030_sep_31_sep_0($90).
($87>0) & (v_sep_sigma_1032_sep_26_sep_1($87)) -> v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0($87).
0=0 -> v_sep_sigma_1032_sep_26_sep_1($77).


v_sep_fail_1264_sep_56_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0: X
v_sep_sigma_1032_sep_26_sep_1: X
v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0: X
v_sep_sigma_1032_sep_40_sep_1: X
v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0: X
v_sep_sum_1030_sep_31_sep_0: X
v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0: X
.............
v_sep_fail_1264_sep_56_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0: X
v_sep_sigma_1032_sep_26_sep_1: X
v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0: X
v_sep_sigma_1032_sep_40_sep_1: X
v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0: X
v_sep_sum_1030_sep_31_sep_0: X
v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0: X
...
v_sep_fail_1264_sep_56_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0: X
v_sep_sigma_1032_sep_26_sep_1: X
v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0: X
v_sep_sigma_1032_sep_40_sep_1: X
v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0: X
v_sep_sum_1030_sep_31_sep_0: X
v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0: X
......
v_sep_fail_1264_sep_56_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0: X
v_sep_sigma_1032_sep_26_sep_1: X
v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0: X
v_sep_sigma_1032_sep_40_sep_1: X
v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0: X
v_sep_sum_1030_sep_31_sep_0: X
v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0: X
........
v_sep_fail_1264_sep_56_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0: X
v_sep_sigma_1032_sep_26_sep_1: X
v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0: X
v_sep_sigma_1032_sep_40_sep_1: X
v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0: X
v_sep_sum_1030_sep_31_sep_0: X
v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0: X
...........
v_sep_fail_1264_sep_56_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0: X
v_sep_sigma_1032_sep_26_sep_1: X
v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0: X
v_sep_sigma_1032_sep_40_sep_1: X
v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0: X
v_sep_sum_1030_sep_31_sep_0: X
v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0: X
............
v_sep_fail_1264_sep_56_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0: X
v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0: X
v_sep_sigma_1032_sep_26_sep_1: X
v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0: X
v_sep_sigma_1032_sep_40_sep_1: X
v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0: X
v_sep_sum_1030_sep_31_sep_0: X
v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0: X
.............(0=0) & (v_sep_fail_1264_sep_56_sep_0($74)) -> 1=0.
(($74-1=0) & ($75-$76<0)) & (v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0($76,$75)) -> v_sep_fail_1264_sep_56_sep_0($74).
(($77>0) & (-$77+$78+1=0) & ($79+$80-$81=0)) & (v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0($78,$79)) & (v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0($77,$80)) & (v_sep_sigma_1032_sep_26_sep_1($77)) -> v_sep_sigma_1032_sep_26_sep_2_sep_51_sep_0($77,$81).
(($82=0) & ($83<=0)) & (v_sep_sigma_1032_sep_40_sep_1($83)) -> v_sep_sigma_1032_sep_40_sep_2_sep_43_sep_0($83,$82).
(($83+1>0) & (-$83+$84-1=0) & (-$83+$85-1=0)) & (v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0($85,$86)) & (v_sep_sigma_1032_sep_26_sep_1($84)) -> v_sep_sigma_1032_sep_40_sep_1($83).
(0=0) & (v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0($87,$88)) -> v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_1_sep_36_sep_0($87,$88).
(($89=0) & ($90<=0)) & (v_sep_sum_1030_sep_31_sep_0($90)) -> v_sep_sum_1030_sep_31_sep_1_sep_34_sep_0($90,$89).
(0=0) & (v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0($90)) -> v_sep_sum_1030_sep_31_sep_0($90).
($87>0) & (v_sep_sigma_1032_sep_26_sep_1($87)) -> v_sep_sigma_1032_sep_26_sep_0_sep_29_sep_0($87).
0=0 -> v_sep_sigma_1032_sep_26_sep_1($77).

          |- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
        solution:
          P[<fail_1264@56:0>]($91:bool) = false
          P[<<sigma_1032@26:0>@29:0>]($123:int) = (1 <= $123)
          P[<<<sigma_1032@26:0>@29:1>@36:0>]($104:int,$106:int) = false
          P[<sigma_1032@26:1>]($109:int) = true
          P[<<sigma_1032@26:2>@51:0>]($94:int,$96:int) = false
          P[<sigma_1032@40:1>]($112:int) = false
          P[<<sigma_1032@40:2>@43:0>]($99:int,$101:int) = false
          P[<sum_1030@31:0>]($120:int) = (1 <= $120)
          P[<<sum_1030@31:1>@34:0>]($115:int,$117:int) = false
        
      end HcSolver.solve_ub(31595)[4] (0.033995 sec.)
      begin HcSolver.check_validity(31976)[4]
        input:
          P[<fail_1264@56:0>](<fail_1264@56:0>:bool)|- bot
          
          P[<<sigma_1032@26:2>@51:0>](<f_main_1261@53:0>:int,<f_main_1261@53:2>:int),
          ((<f_main_1261@53:2> < <f_main_1261@53:0>) && <fail_1264@56:0>) |- P[<fail_1264@56:0>](
          <fail_1264@56:0>:bool)
          
          P[<sigma_1032@26:1>](<sigma_1032@26:1>:int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>](<sigma_1032@26:1>:int,var51:int),
          P[<<sigma_1032@40:2>@43:0>]((-1 + <sigma_1032@26:1>):int,(<<sigma_1032@26:2>@51:0> + (-1 * var51)):int),
          (<sigma_1032@26:1> > 0) |- P[<<sigma_1032@26:2>@51:0>](<sigma_1032@26:1>:int,
                                                                 <<sigma_1032@26:2>@51:0>:int)
          
          P[<sigma_1032@40:1>](<sigma_1032@40:1>:int), ((<<sigma_1032@40:2>@43:0> = 0) && (<sigma_1032@40:1> <= 0))
          |- P[<<sigma_1032@40:2>@43:0>](<sigma_1032@40:1>:int,<<sigma_1032@40:2>@43:0>:int)
          
          P[<sigma_1032@26:1>]((1 + <sigma_1032@40:1>):int),
          P[<<<sigma_1032@26:0>@29:1>@36:0>]((1 + <sigma_1032@40:1>):int,<f_sigma_1259@38:3>:int),
          ((1 + <sigma_1032@40:1>) > 0) |- P[<sigma_1032@40:1>](<sigma_1032@40:1>:int)
          
          P[<<sum_1030@31:1>@34:0>](<<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)|- P[<<<sigma_1032@26:0>@29:1>@36:0>](
          <<sigma_1032@26:0>@29:0>:int,<<<sigma_1032@26:0>@29:1>@36:0>:int)
          
          P[<sum_1030@31:0>](<sum_1030@31:0>:int), ((<<sum_1030@31:1>@34:0> = 0) && (<sum_1030@31:0> <= 0))
          |- P[<<sum_1030@31:1>@34:0>](<sum_1030@31:0>:int,<<sum_1030@31:1>@34:0>:int)
          
          P[<<sigma_1032@26:0>@29:0>](<sum_1030@31:0>:int)|- P[<sum_1030@31:0>](<sum_1030@31:0>:int)
          
          P[<sigma_1032@26:1>](<<sigma_1032@26:0>@29:0>:int), (<<sigma_1032@26:0>@29:0> > 0)
          |- P[<<sigma_1032@26:0>@29:0>](<<sigma_1032@26:0>@29:0>:int)
          
          |- P[<sigma_1032@26:1>](<sigma_1032@26:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(31976)[4] (0.006999 sec.)
      solution:
        P[<fail_1264@56:0>]($91:bool) = false
        P[<<sigma_1032@26:0>@29:0>]($123:int) = (1 <= $123)
        P[<<<sigma_1032@26:0>@29:1>@36:0>]($104:int,$106:int) = false
        P[<sigma_1032@26:1>]($109:int) = true
        P[<<sigma_1032@26:2>@51:0>]($94:int,$96:int) = false
        P[<sigma_1032@40:1>]($112:int) = false
        P[<<sigma_1032@40:2>@43:0>]($99:int,$101:int) = false
        P[<sum_1030@31:0>]($120:int) = (1 <= $120)
        P[<<sum_1030@31:1>@34:0>]($115:int,$117:int) = false
    end YhornInterface.solve(31594)[3] (0.040994 sec.)
    
  end RefTypeInfer.infer_etrs(6858)[2] (0.173973 sec.)
  refinement types:
    main_1257: X
    f_1262: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    sigma_1032: (v1:{v1:int | (1 <= v1)} -> (v2:{v2:int | false} -> X) -> X) ->
                v5:int -> (v6:{v6:int | false} -> X) -> X
    sum_1030: v1:{v1:int | (1 <= v1)} -> (v2:{v2:int | false} -> X) -> X
    f_sigma_1259: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    sigma_1032: (v1:int -> (v2:int -> X) -> X) -> v5:{v5:int | false} -> (v6:{v6:int | false} -> X) -> X
    f_sigma_1260: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1261: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1264: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1263: var156:int -> var155:unit -> X
    f_sum_1258: var161:int -> (var160:int -> X) -> var158:int -> X
  abstraction types:
    main_1257: X
    f_1262: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    sigma_1032: (var162:int[var162 -> (1 <= var162)] -> (var163:int -> X) -> X) -> var166:int -> (var167:int -> X) -> X
    sum_1030: v1:int[v1 -> (1 <= v1)] -> (v2:int -> X) -> X
    f_sigma_1259: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    f_sigma_1260: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1261: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1264: v1:bool -> (v2:unit -> X) -> X
    f_1263: var156:int -> var155:unit -> X
    f_sum_1258: var161:int -> (var160:int -> X) -> var158:int -> X
  
end AbsTypeInfer.refine(6857)[1] (0.174973 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1257
  main_1257 -> (rand_int f_1262)
  f_1262 x_1232 -> (main_1035 x_1232 (f_1263 x_1232))
  f_1263 x_1232 x_1229 -> end
  f_main_1261 n_1036 k_main_1194 x_1197 when (x_1197 >= n_1036) -> (k_main_1194 ())
  f_main_1261 n_1036 k_main_1194 x_1197 when (not (x_1197 >= n_1036)) -> (fail_1264 true k_main_1194)
  f_sigma_1259 n_1034 f_1033 k_sigma_1145 x_1148 ->
      (sigma_1032 f_1033 (n_1034 - 1) (f_sigma_1260 n_1034 x_1148 k_sigma_1145))
  f_sigma_1260 n_1034 x_1148 k_sigma_1145 x_1149 -> (k_sigma_1145 (x_1148 + x_1149))
  f_sum_1258 n_1031 k_sum_1098 x_1102 -> (k_sum_1098 (n_1031 + x_1102))
  fail_1264 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1194 -> (sigma_1032 sum_1030 n_1036 (f_main_1261 n_1036 k_main_1194))
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (n_1034 <= 0) -> (k_sigma_1145 0)
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (not (n_1034 <= 0)) ->
      (f_1033 n_1034 (f_sigma_1259 n_1034 f_1033 k_sigma_1145))
  sum_1030 n_1031 k_sum_1098 when (n_1031 <= 0) -> (k_sum_1098 0)
  sum_1030 n_1031 k_sum_1098 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1258 n_1031 k_sum_1098))
Types:
  main_1257 : X
  fail_1264 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sigma_1032 : ((x_2:int[x_2 >= 1] -> (int -> X) -> X) -> x_7:int -> (x_9:int[x_7 <= x_9] -> X) -> X)
  sum_1030 : (x_1:int[x_1 >= 1] -> (int -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1257 ... --> 
  f_1262 ... --> 
  main_1035 ... --> 
  sigma_1032 [2/2] ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sum_1258 ... --> 
  f_sigma_1259 ... --> 
  sigma_1032 [1/2] ... --> 
  f_sigma_1260 ... --> 
  f_main_1261 [2/2] ... --> 
  fail_1264 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 0; 0; 0; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(32856)[1]
  program:
    main_1257  | true = ((Random.int 0) f_1262)
    f_1262 x_1232 | true = (main_1035 x_1232
                                      (f_1263 x_1232))
    f_1263 x_1232 x_1229 | true = end
    f_main_1261 n_1036 k_main_1194 x_1197 | (x_1197 >= n_1036) = (k_main_1194 ())
    f_main_1261 n_1036 k_main_1194 x_1197 | (not (x_1197 >= n_1036)) = (
    fail_1264 true
              k_main_1194)
    f_sigma_1259 n_1034 f_1033 k_sigma_1145 x_1148 | true = (sigma_1032
                                                               f_1033
                                                               (n_1034 - 1)
                                                               (f_sigma_1260 n_1034
                                                                    x_1148
                                                                    k_sigma_1145))
    f_sigma_1260 n_1034 x_1148 k_sigma_1145 x_1149 | true = (k_sigma_1145 (
                                                                    x_1148 + x_1149))
    f_sum_1258 n_1031 k_sum_1098 x_1102 | true = (k_sum_1098 (n_1031 + x_1102))
    fail_1264 b k | true = (fail ())
    main_1035 n_1036 k_main_1194 | true = (sigma_1032 sum_1030
                                                      n_1036
                                                      (f_main_1261 n_1036
                                                                   k_main_1194))
    sigma_1032 f_1033 n_1034 k_sigma_1145 | (n_1034 <= 0) = (k_sigma_1145 0)
    sigma_1032 f_1033 n_1034 k_sigma_1145 | (not (n_1034 <= 0)) = (f_1033
                                                                    n_1034
                                                                    (
                                                                    f_sigma_1259 n_1034
                                                                    f_1033
                                                                    k_sigma_1145))
    sum_1030 n_1031 k_sum_1098 | (n_1031 <= 0) = (k_sum_1098 0)
    sum_1030 n_1031 k_sum_1098 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1258 n_1031
                                                                    k_sum_1098))
    main_1257:X
    f_1262:int -> X
    f_1263:int -> unit -> X
    f_main_1261:int -> (unit -> X) -> int -> X
    f_sigma_1259:int -> (int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_sigma_1260:int -> int -> (int -> X) -> int -> X
    f_sum_1258:int -> (int -> X) -> int -> X
    fail_1264:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    sigma_1032:(int -> (int -> X) -> X) -> int -> (int -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: f_1262,f_1263,f_main_1261,f_sigma_1259,f_sigma_1260,f_sum_1258,main_1035
  counterexample: 0:0:0:1:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1262@62:0> = var170)
     [true.(<main_1035@64:0> = <f_1262@62:0>)
      [true.(<sigma_1032@66:1> = <main_1035@64:0>)
       [(not (<sigma_1032@66:1> <= 0)).(<<sigma_1032@66:0>@69:0> = <sigma_1032@66:1>)
        [true.(<sum_1030@71:0> = <<sigma_1032@66:0>@69:0>)
         [(not (<sum_1030@71:0> <= 0)).(<sum_1030@74:0> = (<sum_1030@71:0> - 1))
          [(<sum_1030@74:0> <= 0).(<<sum_1030@74:1>@77:0> = 0)
           [true.((<f_sum_1258@79:0> = <sum_1030@71:0>) && (<f_sum_1258@79:2> = <<sum_1030@74:1>@77:0>))
            [true.(<<f_sum_1258@79:1>@81:0> = (<f_sum_1258@79:0> + <f_sum_1258@79:2>))
             [true.(<<sum_1030@71:1>@83:0> = <<f_sum_1258@79:1>@81:0>)
              [true.(<<<sigma_1032@66:0>@69:1>@85:0> = <<sum_1030@71:1>@83:0>)
               [true.
                ((<f_sigma_1259@87:0> = <sigma_1032@66:1>) && (<f_sigma_1259@87:3> = <<<sigma_1032@66:0>@69:1>@85:0>))
                [true.(<sigma_1032@89:1> = (<f_sigma_1259@87:0> - 1))
                 [(<sigma_1032@89:1> <= 0).(<<sigma_1032@89:2>@92:0> = 0)
                  [true.
                   ((<f_sigma_1260@94:0> = <f_sigma_1259@87:0>) &&
                    ((<f_sigma_1260@94:1> = <f_sigma_1259@87:3>) && (<f_sigma_1260@94:3> = <<sigma_1032@89:2>@92:0>)))
                   [true.(<<f_sigma_1260@94:2>@96:0> = (<f_sigma_1260@94:1> + <f_sigma_1260@94:3>))
                    [true.(<<f_sigma_1259@87:2>@98:0> = <<f_sigma_1260@94:2>@96:0>)
                     [true.(<<sigma_1032@66:2>@100:0> = <<f_sigma_1259@87:2>@98:0>)
                      [true.
                       ((<f_main_1261@102:0> = <main_1035@64:0>) && (<f_main_1261@102:2> = <<sigma_1032@66:2>@100:0>))
                       [(not (<f_main_1261@102:2> >= <f_main_1261@102:0>)).(<fail_1264@105:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(32857)[2]
    horn clauses:
      P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
      
      P[<f_main_1261@102:2>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int),
      ((<f_main_1261@102:2> < <f_main_1261@102:0>) && <fail_1264@105:0>)
      |- P[<fail_1264@105:0>](<fail_1264@105:0>:bool)
      
      P[<main_1035@64:0>](<f_main_1261@102:0>:int),
      P[<<sigma_1032@66:2>@100:0>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int)|- P[<f_main_1261@102:2>](
      <f_main_1261@102:0>:int,<f_main_1261@102:2>:int)
      
      P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
      P[<<f_sigma_1259@87:2>@98:0>](<sigma_1032@66:1>:int,<<sigma_1032@66:2>@100:0>:int), (
      <sigma_1032@66:1> > 0) |- P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,
                                                             <<sigma_1032@66:2>@100:0>:int)
      
      P[<f_sigma_1259@87:3>](<f_sigma_1259@87:0>:int,<f_sigma_1260@94:1>:int),
      P[<<f_sigma_1260@94:2>@96:0>](<f_sigma_1259@87:0>:int,<f_sigma_1260@94:1>:int,<<f_sigma_1259@87:2>@98:0>:int)|- P[<<f_sigma_1259@87:2>@98:0>](
      <f_sigma_1259@87:0>:int,<<f_sigma_1259@87:2>@98:0>:int)
      
      P[<f_sigma_1260@94:3>](<f_sigma_1260@94:0>:int,<f_sigma_1260@94:1>:int,(
                             <<f_sigma_1260@94:2>@96:0> + (-1 * <f_sigma_1260@94:1>)):int)|- P[<<f_sigma_1260@94:2>@96:0>](
      <f_sigma_1260@94:0>:int,<f_sigma_1260@94:1>:int,<<f_sigma_1260@94:2>@96:0>:int)
      
      P[<f_sigma_1259@87:3>](<f_sigma_1260@94:0>:int,<f_sigma_1260@94:1>:int),
      P[<<sigma_1032@89:2>@92:0>]((-1 + <f_sigma_1260@94:0>):int,<f_sigma_1260@94:3>:int)|- P[<f_sigma_1260@94:3>](
      <f_sigma_1260@94:0>:int,<f_sigma_1260@94:1>:int,<f_sigma_1260@94:3>:int)
      
      P[<sigma_1032@89:1>](<sigma_1032@89:1>:int), ((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> <= 0))
      |- P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int)
      
      P[<f_sigma_1259@87:3>]((1 + <sigma_1032@89:1>):int,<f_sigma_1259@87:3>:int)|- P[<sigma_1032@89:1>](
      <sigma_1032@89:1>:int)
      
      P[<sigma_1032@66:1>](<f_sigma_1259@87:0>:int),
      P[<<<sigma_1032@66:0>@69:1>@85:0>](<f_sigma_1259@87:0>:int,<f_sigma_1259@87:3>:int), (
      <f_sigma_1259@87:0> > 0) |- P[<f_sigma_1259@87:3>](<f_sigma_1259@87:0>:int,
                                                         <f_sigma_1259@87:3>:int)
      
      P[<main_1035@64:0>](<sigma_1032@66:1>:int),
      P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
      <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
      
      P[<sum_1030@71:0>](<sum_1030@71:0>:int),
      P[<<f_sum_1258@79:1>@81:0>](<sum_1030@71:0>:int,<<sum_1030@71:1>@83:0>:int), (
      <sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                        <<sum_1030@71:1>@83:0>:int)
      
      P[<f_sum_1258@79:2>](<f_sum_1258@79:0>:int,(<<f_sum_1258@79:1>@81:0> + (-1 * <f_sum_1258@79:0>)):int)|- P[<<f_sum_1258@79:1>@81:0>](
      <f_sum_1258@79:0>:int,<<f_sum_1258@79:1>@81:0>:int)
      
      P[<sum_1030@71:0>](<f_sum_1258@79:0>:int),
      P[<<sum_1030@74:1>@77:0>]((-1 + <f_sum_1258@79:0>):int,<f_sum_1258@79:2>:int), (
      <f_sum_1258@79:0> > 0) |- P[<f_sum_1258@79:2>](<f_sum_1258@79:0>:int,
                                                     <f_sum_1258@79:2>:int)
      
      P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
      |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
      
      P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
      |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
      
      P[<main_1035@64:0>](<sigma_1032@66:1>:int),
      P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](
      <sum_1030@71:0>:int)
      
      P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
      |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
      
      P[<main_1035@64:0>](<sigma_1032@66:1>:int)|- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
      
      P[<f_1262@62:0>](<main_1035@64:0>:int)|- P[<main_1035@64:0>](<main_1035@64:0>:int)
      
      |- P[<f_1262@62:0>](<f_1262@62:0>:int)
    call trees:
      <main_1257@59>
        <f_1262@62>
          <main_1035@64>
            <sigma_1032@66>
            </<sigma_1032@66:0>@69>
            <sum_1030@71>
              <sum_1030@74>
              </<sum_1030@74:1>@77>
              <f_sum_1258@79>
              </<f_sum_1258@79:1>@81>
            </<sum_1030@71:1>@83>
            <<<sigma_1032@66:0>@69:1>@85>
              <f_sigma_1259@87>
                <sigma_1032@89>
                </<sigma_1032@89:2>@92>
                <f_sigma_1260@94>
                </<f_sigma_1260@94:2>@96>
              </<f_sigma_1259@87:2>@98>
            </<sigma_1032@66:2>@100>
            <f_main_1261@102>
              <fail_1264@105>
    inlined horn clauses:
      P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
      
      P[<<sigma_1032@66:2>@100:0>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int),
      ((<f_main_1261@102:2> < <f_main_1261@102:0>) && <fail_1264@105:0>)
      |- P[<fail_1264@105:0>](<fail_1264@105:0>:bool)
      
      P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
      P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int),
      P[<<sigma_1032@89:2>@92:0>]((-1 + <sigma_1032@66:1>):int,(<<sigma_1032@66:2>@100:0> + (-1 * var171)):int),
      (<sigma_1032@66:1> > 0) |- P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,
                                                              <<sigma_1032@66:2>@100:0>:int)
      
      P[<sigma_1032@89:1>](<sigma_1032@89:1>:int), ((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> <= 0))
      |- P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int)
      
      P[<sigma_1032@66:1>]((1 + <sigma_1032@89:1>):int),
      P[<<<sigma_1032@66:0>@69:1>@85:0>]((1 + <sigma_1032@89:1>):int,<f_sigma_1259@87:3>:int),
      ((1 + <sigma_1032@89:1>) > 0) |- P[<sigma_1032@89:1>](<sigma_1032@89:1>:int)
      
      P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
      <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
      
      P[<sum_1030@71:0>](<sum_1030@71:0>:int),
      P[<<sum_1030@74:1>@77:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@83:0> + (-1 * <sum_1030@71:0>)):int),
      (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                         <<sum_1030@71:1>@83:0>:int)
      
      P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
      |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
      
      P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
      |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
      
      P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
      
      P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
      |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
      
      |- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
    begin ParamSubstInfer.infer(35164)[3]
      
    end ParamSubstInfer.infer(35164)[3] (0.068990 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(35166)[3]
      
    end RefTypeInfer.elim_coeffs(35166)[3] (0.000000 sec.)
    begin GenHcSolver.solve(35543)[3]
      Horn clauses:
        P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
        
        P[<<sigma_1032@66:2>@100:0>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int),
        ((<f_main_1261@102:2> < <f_main_1261@102:0>) && <fail_1264@105:0>)
        |- P[<fail_1264@105:0>](<fail_1264@105:0>:bool)
        
        P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int),
        P[<<sigma_1032@89:2>@92:0>]((-1 + <sigma_1032@66:1>):int,(<<sigma_1032@66:2>@100:0> + (-1 * var171)):int),
        (<sigma_1032@66:1> > 0) |- P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,
                                                                <<sigma_1032@66:2>@100:0>:int)
        
        P[<sigma_1032@89:1>](<sigma_1032@89:1>:int), ((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> <= 0))
        |- P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int)
        
        P[<sigma_1032@66:1>]((1 + <sigma_1032@89:1>):int),
        P[<<<sigma_1032@66:0>@69:1>@85:0>]((1 + <sigma_1032@89:1>):int,<f_sigma_1259@87:3>:int),
        ((1 + <sigma_1032@89:1>) > 0) |- P[<sigma_1032@89:1>](<sigma_1032@89:1>:int)
        
        P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
        <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
        
        P[<sum_1030@71:0>](<sum_1030@71:0>:int),
        P[<<sum_1030@74:1>@77:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@83:0> + (-1 * <sum_1030@71:0>)):int),
        (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                           <<sum_1030@71:1>@83:0>:int)
        
        P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
        |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
        
        P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
        |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
        
        P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
        
        P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
        |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
        
        |- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
      lower bounds:
        P[<sigma_1032@66:1>](<sigma_1032@66:1>:int) = true
        P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = (<<sigma_1032@66:0>@69:0> > 0)
        P[<sum_1030@71:0>](<sum_1030@71:0>:int) = (<sum_1030@71:0> > 0)
        P[<sum_1030@74:0>](<sum_1030@74:0>:int) = ((1 + <sum_1030@74:0>) > 0)
        P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int) =
        ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> = 0))
        P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,<<sum_1030@71:1>@83:0>:int) =
        ((<sum_1030@71:0> = 1) && (<<sum_1030@71:1>@83:0> = <sum_1030@71:0>))
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        ((<<sigma_1032@66:0>@69:0> = 1) && (<<<sigma_1032@66:0>@69:1>@85:0> = <<sigma_1032@66:0>@69:0>))
        P[<sigma_1032@89:1>](<sigma_1032@89:1>:int) = (<sigma_1032@89:1> = 0)
        P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int) =
        ((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> = 0))
        P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,<<sigma_1032@66:2>@100:0>:int) =
        ((<sigma_1032@66:1> = 1) && (<<sigma_1032@66:2>@100:0> = <sigma_1032@66:1>))
        P[<fail_1264@105:0>](<fail_1264@105:0>:bool) = false
      upper bounds:
        P[<<sigma_1032@66:2>@100:0>](var177:int,var178:int) = (var178 >= var177)
        P[<<sigma_1032@89:2>@92:0>](var173:int,var174:int) = ((var173 <> 0) || (var174 >= 0))
      begin GenHcSolver.classify_pids(40268)[4]
        output:
          [<<sigma_1032@89:2>@92:0>;<<sigma_1032@66:2>@100:0>]
      end GenHcSolver.classify_pids(40268)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(40303)[4]
        lb:(((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> = 0)) ||
            ((<sigma_1032@89:1> = 1) && (<<sigma_1032@89:2>@92:0> = <sigma_1032@89:1>)))
        nub:((not ((<sigma_1032@89:1> <> 0) || (<<sigma_1032@89:2>@92:0> >= 0))) ||
             (not (<<sigma_1032@89:2>@92:0> >= <sigma_1032@89:1>)))
        lb':(((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> = 0)) ||
             ((<sigma_1032@89:1> = 1) && (<<sigma_1032@89:2>@92:0> = <sigma_1032@89:1>)))
        nub':((not ((<sigma_1032@89:1> <> 0) || (<<sigma_1032@89:2>@92:0> >= 0))) ||
              (not (<<sigma_1032@89:2>@92:0> >= <sigma_1032@89:1>)))
        begin InterpProver.interpolate(40304)[5]
          begin InterpProver.interpolate_fresh(40305)[6]
            begin InterpProver.interpolate_log(40306)[7]
              input1: (((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> = 0)) ||
                       ((<sigma_1032@89:1> = 1) && (<<sigma_1032@89:2>@92:0> = <sigma_1032@89:1>)))
              input2: ((not ((<sigma_1032@89:1> <> 0) || (<<sigma_1032@89:2>@92:0> >= 0))) ||
                       (not (<<sigma_1032@89:2>@92:0> >= <sigma_1032@89:1>)))
              begin InterpProver.interpolate_check(40307)[8]
                begin InterpProver.interpolate_simplify(40308)[9]
                  begin InterpProver.interpolate_quick(40381)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(40390)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(40391)[12]
                        begin CsisatInterface.interpolate_csisat_log(40392)[13]
                          input1: ((0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0) | (1 = v_sep_sigma_1032_sep_89_sep_1 & v_sep_sigma_1032_sep_89_sep_1 = v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0))
                          input2: ((0 = v_sep_sigma_1032_sep_89_sep_1 & (1 + v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0) <= 0) | (1 + v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0) <= v_sep_sigma_1032_sep_89_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(40393)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(40393)[14] (0.002999 sec.)
                          output: ((((not 0 = v_sep_sigma_1032_sep_89_sep_1 | (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) & 0 = v_sep_sigma_1032_sep_89_sep_1) | (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) & (not 0 = v_sep_sigma_1032_sep_89_sep_1 | -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0) & (0 = v_sep_sigma_1032_sep_89_sep_1 | (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) & ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 | -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0))
                          
                        end CsisatInterface.interpolate_csisat_log(40392)[13] (0.002999 sec.)
                        after simplification: ((((not 0 = v_sep_sigma_1032_sep_89_sep_1 | (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) & 0 = v_sep_sigma_1032_sep_89_sep_1) | (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) & (not 0 = v_sep_sigma_1032_sep_89_sep_1 | -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0) & (0 = v_sep_sigma_1032_sep_89_sep_1 | (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) & ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 | -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0))
                        after dnf conversion: (((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & 0 = v_sep_sigma_1032_sep_89_sep_1 & not 0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_1 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & 0 = v_sep_sigma_1032_sep_89_sep_1 & not 0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_1 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & 0 = v_sep_sigma_1032_sep_89_sep_1 & not 0 = v_sep_sigma_1032_sep_89_sep_1 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & 0 = v_sep_sigma_1032_sep_89_sep_1 & not 0 = v_sep_sigma_1032_sep_89_sep_1 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & 0 = v_sep_sigma_1032_sep_89_sep_1 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0 & 0 = v_sep_sigma_1032_sep_89_sep_1 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & 0 = v_sep_sigma_1032_sep_89_sep_1 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0 & 0 = v_sep_sigma_1032_sep_89_sep_1 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & 0 = v_sep_sigma_1032_sep_89_sep_1 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & 0 = v_sep_sigma_1032_sep_89_sep_1 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0) | (not 0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_1 & not 0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_1 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) | (not 0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_1 & not 0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_1 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0) | (not 0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_1 & not 0 = v_sep_sigma_1032_sep_89_sep_1 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) | (not 0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_1 & not 0 = v_sep_sigma_1032_sep_89_sep_1 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0) | (not 0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_1 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0 & 0 = v_sep_sigma_1032_sep_89_sep_1 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) | (not 0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_1 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0 & 0 = v_sep_sigma_1032_sep_89_sep_1 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0) | (not 0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_1 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) | (not 0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_1 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & not 0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_1 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & not 0 = v_sep_sigma_1032_sep_89_sep_1 & 0 = v_sep_sigma_1032_sep_89_sep_1 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & not 0 = v_sep_sigma_1032_sep_89_sep_1 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & not 0 = v_sep_sigma_1032_sep_89_sep_1 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0 & 0 = v_sep_sigma_1032_sep_89_sep_1 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0 & 0 = v_sep_sigma_1032_sep_89_sep_1 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0) | ((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0 & (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0 & -2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(40391)[12] (0.003999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(40390)[11] (0.003999 sec.)
                    
                  end InterpProver.interpolate_quick(40381)[10] (0.003999 sec.)
                  begin minimizing # of disjunctions(40891)[10]
                    input: (((<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>) && (0 <> <sigma_1032@89:1>)) ||
                            (((<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>) && (0 <= <<sigma_1032@89:2>@92:0>)) ||
                             ((<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>) &&
                              ((<sigma_1032@89:1> = 0) && (0 <= <<sigma_1032@89:2>@92:0>)))))
                    output: ((<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>) && (0 <= <<sigma_1032@89:2>@92:0>))
                  end minimizing # of disjunctions(40891)[10] (0.000999 sec.)
                  begin minimizing # of conjunctions(41069)[10]
                    input: ((<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>) && (0 <= <<sigma_1032@89:2>@92:0>))
                    output: (<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>)
                  end minimizing # of conjunctions(41069)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(40308)[9] (0.008998 sec.)
                
              end InterpProver.interpolate_check(40307)[8] (0.008998 sec.)
              output: (<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>)
            end InterpProver.interpolate_log(40306)[7] (0.008998 sec.)
            
          end InterpProver.interpolate_fresh(40305)[6] (0.008998 sec.)
          
        end InterpProver.interpolate(40304)[5] (0.008998 sec.)
        output:
          P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int) =
          (<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>)
          P[<<sigma_1032@66:2>@100:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int) =
          (<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>)
      end ApronInterface.convex_hull_interpolate(40303)[4] (0.008998 sec.)
      Horn clauses:
        P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
        
        P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int), (
        (<sigma_1032@66:1> > 0) && (var171 < 1)) |- bot
        
        P[<sigma_1032@66:1>]((1 + <sigma_1032@89:1>):int),
        P[<<<sigma_1032@66:0>@69:1>@85:0>]((1 + <sigma_1032@89:1>):int,<f_sigma_1259@87:3>:int),
        ((1 + <sigma_1032@89:1>) > 0) |- P[<sigma_1032@89:1>](<sigma_1032@89:1>:int)
        
        P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
        <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
        
        P[<sum_1030@71:0>](<sum_1030@71:0>:int),
        P[<<sum_1030@74:1>@77:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@83:0> + (-1 * <sum_1030@71:0>)):int),
        (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                           <<sum_1030@71:1>@83:0>:int)
        
        P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
        |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
        
        P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
        |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
        
        P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
        
        P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
        |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
        
        |- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
      lower bounds:
        P[<sigma_1032@66:1>](<sigma_1032@66:1>:int) = true
        P[<fail_1264@105:0>](var182:bool) = false
        P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = (<<sigma_1032@66:0>@69:0> > 0)
        P[<sum_1030@71:0>](<sum_1030@71:0>:int) = (<sum_1030@71:0> > 0)
        P[<sum_1030@74:0>](<sum_1030@74:0>:int) = ((1 + <sum_1030@74:0>) > 0)
        P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int) =
        ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> = 0))
        P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,<<sum_1030@71:1>@83:0>:int) =
        ((<sum_1030@71:0> = 1) && (<<sum_1030@71:1>@83:0> = <sum_1030@71:0>))
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        ((<<sigma_1032@66:0>@69:0> = 1) && (<<<sigma_1032@66:0>@69:1>@85:0> = <<sigma_1032@66:0>@69:0>))
        P[<sigma_1032@89:1>](<sigma_1032@89:1>:int) = (<sigma_1032@89:1> = 0)
      upper bounds:
        P[<sigma_1032@89:1>](var188:int) = true
        P[<sigma_1032@66:1>](var185:int) = true
      begin GenHcSolver.classify_pids(46516)[4]
        output:
          [<sigma_1032@66:1>;<sigma_1032@89:1>]
      end GenHcSolver.classify_pids(46516)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(46527)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(46528)[5]
          begin InterpProver.interpolate_fresh(46529)[6]
            begin InterpProver.interpolate_log(46530)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(46531)[8]
                begin InterpProver.interpolate_simplify(46532)[9]
                  begin InterpProver.interpolate_quick(46545)[10]
                    
                  end InterpProver.interpolate_quick(46545)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(46532)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(46531)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(46530)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(46529)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(46528)[5] (0.000000 sec.)
        output:
          P[<sigma_1032@66:1>](<sigma_1032@66:1>:int) = true
          P[<sigma_1032@89:1>](<sigma_1032@66:1>:int) = true
      end ApronInterface.convex_hull_interpolate(46527)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
        
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int), (
        (<sigma_1032@66:1> > 0) && (var171 < 1)) |- bot
        
        P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
        <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
        
        P[<sum_1030@71:0>](<sum_1030@71:0>:int),
        P[<<sum_1030@74:1>@77:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@83:0> + (-1 * <sum_1030@71:0>)):int),
        (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                           <<sum_1030@71:1>@83:0>:int)
        
        P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
        |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
        
        P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
        |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
        
        P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
        
         (<<sigma_1032@66:0>@69:0> > 0) |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
      lower bounds:
        P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = (<<sigma_1032@66:0>@69:0> > 0)
        P[<fail_1264@105:0>](var192:bool) = false
        P[<sum_1030@71:0>](<sum_1030@71:0>:int) = (<sum_1030@71:0> > 0)
        P[<sum_1030@74:0>](<sum_1030@74:0>:int) = ((1 + <sum_1030@74:0>) > 0)
        P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int) =
        ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> = 0))
        P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,<<sum_1030@71:1>@83:0>:int) =
        ((<sum_1030@71:0> = 1) && (<<sum_1030@71:1>@83:0> = <sum_1030@71:0>))
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        ((<<sigma_1032@66:0>@69:0> = 1) && (<<<sigma_1032@66:0>@69:1>@85:0> = <<sigma_1032@66:0>@69:0>))
      upper bounds:
        P[<<sum_1030@71:1>@83:0>](var199:int,var200:int) = ((var199 <= 0) || (var200 >= 1))
        P[<<sum_1030@74:1>@77:0>](var195:int,var196:int) = (((var196 + var195) >= 0) || ((1 + var195) <= 0))
      begin GenHcSolver.classify_pids(51265)[4]
        output:
          [<<sum_1030@74:1>@77:0>;<<sum_1030@71:1>@83:0>]
      end GenHcSolver.classify_pids(51265)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(51316)[4]
        lb:(((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> = 0)) ||
            ((<sum_1030@74:0> = 1) && (<<sum_1030@74:1>@77:0> = <sum_1030@74:0>)))
        nub:((not (((<<sum_1030@74:1>@77:0> + <sum_1030@74:0>) >= 0) || ((1 + <sum_1030@74:0>) <= 0))) ||
             (not ((<sum_1030@74:0> <= 0) || (<<sum_1030@74:1>@77:0> >= 1))))
        lb':(((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> = 0)) ||
             ((<sum_1030@74:0> = 1) && (<<sum_1030@74:1>@77:0> = <sum_1030@74:0>)))
        nub':((not (((<<sum_1030@74:1>@77:0> + <sum_1030@74:0>) >= 0) || ((1 + <sum_1030@74:0>) <= 0))) ||
              (not ((<sum_1030@74:0> <= 0) || (<<sum_1030@74:1>@77:0> >= 1))))
        begin InterpProver.interpolate(51317)[5]
          begin InterpProver.interpolate_fresh(51318)[6]
            begin InterpProver.interpolate_log(51319)[7]
              input1: (((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> = 0)) ||
                       ((<sum_1030@74:0> = 1) && (<<sum_1030@74:1>@77:0> = <sum_1030@74:0>)))
              input2: ((not (((<<sum_1030@74:1>@77:0> + <sum_1030@74:0>) >= 0) || ((1 + <sum_1030@74:0>) <= 0))) ||
                       (not ((<sum_1030@74:0> <= 0) || (<<sum_1030@74:1>@77:0> >= 1))))
              begin InterpProver.interpolate_check(51320)[8]
                begin InterpProver.interpolate_simplify(51321)[9]
                  begin InterpProver.interpolate_quick(51426)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(51435)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(51436)[12]
                        begin CsisatInterface.interpolate_csisat_log(51437)[13]
                          input1: ((0 = v_sep_sum_1030_sep_74_sep_0 & 0 = v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0) | (1 = v_sep_sum_1030_sep_74_sep_0 & v_sep_sum_1030_sep_74_sep_0 = v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0))
                          input2: ((1 <= v_sep_sum_1030_sep_74_sep_0 & (1 + v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0) <= 1) | (1 <= (1 + v_sep_sum_1030_sep_74_sep_0) & (1 + v_sep_sum_1030_sep_74_sep_0 + v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0) <= 0))
                          begin CsisatInterface.interpolate_csisat_raw(51438)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(51438)[14] (0.002999 sec.)
                          output: (((-2*v_sep_sum_1030_sep_74_sep_0 + -2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0) <= 0 | -2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 <= -2) & (-2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 <= -2 | 2*v_sep_sum_1030_sep_74_sep_0 <= 0) & (-1*v_sep_sum_1030_sep_74_sep_0 <= 0 | -0.666666666667*v_sep_sum_1030_sep_74_sep_0 <= -0.666666666667))
                          
                        end CsisatInterface.interpolate_csisat_log(51437)[13] (0.002999 sec.)
                        after simplification: (((-2*v_sep_sum_1030_sep_74_sep_0 + -2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0) <= 0 | -2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 <= -2) & (-2*v_sep_sum_1030_sep_74_sep_0 <= -2 | -1*v_sep_sum_1030_sep_74_sep_0 <= 0) & (-2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 <= -2 | 2*v_sep_sum_1030_sep_74_sep_0 <= 0))
                        after dnf conversion: (((-2*v_sep_sum_1030_sep_74_sep_0 + -2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0) <= 0 & -2*v_sep_sum_1030_sep_74_sep_0 <= -2 & -2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 <= -2) | ((-2*v_sep_sum_1030_sep_74_sep_0 + -2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0) <= 0 & -2*v_sep_sum_1030_sep_74_sep_0 <= -2 & 2*v_sep_sum_1030_sep_74_sep_0 <= 0) | ((-2*v_sep_sum_1030_sep_74_sep_0 + -2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0) <= 0 & -1*v_sep_sum_1030_sep_74_sep_0 <= 0 & -2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 <= -2) | ((-2*v_sep_sum_1030_sep_74_sep_0 + -2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0) <= 0 & -1*v_sep_sum_1030_sep_74_sep_0 <= 0 & 2*v_sep_sum_1030_sep_74_sep_0 <= 0) | (-2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 <= -2 & -2*v_sep_sum_1030_sep_74_sep_0 <= -2 & -2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 <= -2) | (-2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 <= -2 & -2*v_sep_sum_1030_sep_74_sep_0 <= -2 & 2*v_sep_sum_1030_sep_74_sep_0 <= 0) | (-2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 <= -2 & -1*v_sep_sum_1030_sep_74_sep_0 <= 0 & -2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 <= -2) | (-2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 <= -2 & -1*v_sep_sum_1030_sep_74_sep_0 <= 0 & 2*v_sep_sum_1030_sep_74_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(51436)[12] (0.003999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(51435)[11] (0.003999 sec.)
                    
                  end InterpProver.interpolate_quick(51426)[10] (0.004999 sec.)
                  begin minimizing # of disjunctions(51609)[10]
                    input: (((0 <= (<sum_1030@74:0> + <<sum_1030@74:1>@77:0>)) &&
                             ((1 <= <sum_1030@74:0>) && (1 <= <<sum_1030@74:1>@77:0>))) ||
                            (((0 <= (<sum_1030@74:0> + <<sum_1030@74:1>@77:0>)) &&
                              ((0 <= <sum_1030@74:0>) && (1 <= <<sum_1030@74:1>@77:0>))) ||
                             (((<sum_1030@74:0> = 0) && (0 <= (<sum_1030@74:0> + <<sum_1030@74:1>@77:0>))) ||
                              ((1 <= <<sum_1030@74:1>@77:0>) && (0 <= <sum_1030@74:0>)))))
                    output: (((1 <= <<sum_1030@74:1>@77:0>) && (0 <= <sum_1030@74:0>)) ||
                             ((<sum_1030@74:0> = 0) && (0 <= (<sum_1030@74:0> + <<sum_1030@74:1>@77:0>))))
                  end minimizing # of disjunctions(51609)[10] (0.002000 sec.)
                  begin minimizing # of conjunctions(51732)[10]
                    input: ((1 <= <<sum_1030@74:1>@77:0>) && (0 <= <sum_1030@74:0>))
                    output: (1 <= <<sum_1030@74:1>@77:0>)
                  end minimizing # of conjunctions(51732)[10] (0.001000 sec.)
                  begin minimizing # of conjunctions(51817)[10]
                    input: ((<sum_1030@74:0> = 0) && (0 <= (<sum_1030@74:0> + <<sum_1030@74:1>@77:0>)))
                    output: ((0 <= (<sum_1030@74:0> + <<sum_1030@74:1>@77:0>)) && (<sum_1030@74:0> = 0))
                  end minimizing # of conjunctions(51817)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(51321)[9] (0.009998 sec.)
                
              end InterpProver.interpolate_check(51320)[8] (0.010998 sec.)
              output: ((1 <= <<sum_1030@74:1>@77:0>) ||
                       ((0 <= (<sum_1030@74:0> + <<sum_1030@74:1>@77:0>)) && (<sum_1030@74:0> = 0)))
            end InterpProver.interpolate_log(51319)[7] (0.011998 sec.)
            
          end InterpProver.interpolate_fresh(51318)[6] (0.011998 sec.)
          
        end InterpProver.interpolate(51317)[5] (0.011998 sec.)
        output:
          P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int) =
          ((1 <= <<sum_1030@74:1>@77:0>) ||
           ((0 <= (<sum_1030@74:0> + <<sum_1030@74:1>@77:0>)) && (<sum_1030@74:0> = 0)))
          P[<<sum_1030@71:1>@83:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int) =
          ((1 <= <<sum_1030@74:1>@77:0>) ||
           ((0 <= (<sum_1030@74:0> + <<sum_1030@74:1>@77:0>)) && (<sum_1030@74:0> = 0)))
      end ApronInterface.convex_hull_interpolate(51316)[4] (0.011998 sec.)
      Horn clauses:
        P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
        
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int), (
        (<sigma_1032@66:1> > 0) && (var171 < 1)) |- bot
        
        
        ((1 <= <<<sigma_1032@66:0>@69:1>@85:0>) ||
         ((<<sigma_1032@66:0>@69:0> = 0) && (0 <= (<<sigma_1032@66:0>@69:0> + <<<sigma_1032@66:0>@69:1>@85:0>))))
        |- P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,
                                              <<<sigma_1032@66:0>@69:1>@85:0>:int)
        
        P[<sum_1030@74:0>](<sum_1030@74:0>:int), (0 > <sum_1030@74:0>) |- bot
        
        P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
        |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
        
        P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
        
         (<<sigma_1032@66:0>@69:0> > 0) |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
      lower bounds:
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        ((1 <= <<<sigma_1032@66:0>@69:1>@85:0>) ||
         ((<<sigma_1032@66:0>@69:0> = 0) && (0 <= (<<sigma_1032@66:0>@69:0> + <<<sigma_1032@66:0>@69:1>@85:0>))))
        P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = (<<sigma_1032@66:0>@69:0> > 0)
        P[<fail_1264@105:0>](var204:bool) = false
        P[<sum_1030@71:0>](<sum_1030@71:0>:int) = (<sum_1030@71:0> > 0)
        P[<sum_1030@74:0>](<sum_1030@74:0>:int) = ((1 + <sum_1030@74:0>) > 0)
      upper bounds:
        P[<sum_1030@74:0>](var210:int) = (0 <= var210)
        P[<sum_1030@71:0>](var207:int) = true
      begin GenHcSolver.classify_pids(56777)[4]
        output:
          [<sum_1030@71:0>;<sum_1030@74:0>]
      end GenHcSolver.classify_pids(56777)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(56795)[4]
        lb:((<sum_1030@71:0> > 0) || ((1 + <sum_1030@71:0>) > 0))
        nub:(not (0 <= <sum_1030@71:0>))
        lb':((<sum_1030@71:0> > 0) || ((1 + <sum_1030@71:0>) > 0))
        nub':(not (0 <= <sum_1030@71:0>))
        begin InterpProver.interpolate(56796)[5]
          begin InterpProver.interpolate_fresh(56797)[6]
            begin InterpProver.interpolate_log(56798)[7]
              input1: ((<sum_1030@71:0> > 0) || ((1 + <sum_1030@71:0>) > 0))
              input2: (not (0 <= <sum_1030@71:0>))
              begin InterpProver.interpolate_check(56799)[8]
                begin InterpProver.interpolate_simplify(56800)[9]
                  begin InterpProver.interpolate_quick(56824)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(56833)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(56834)[12]
                        begin CsisatInterface.interpolate_csisat_log(56835)[13]
                          input1: 1 <= (1 + v_sep_sum_1030_sep_71_sep_0)
                          input2: (1 + v_sep_sum_1030_sep_71_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(56836)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(56836)[14] (0.000000 sec.)
                          output: -2*v_sep_sum_1030_sep_71_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(56835)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_sum_1030_sep_71_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_sum_1030_sep_71_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(56834)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(56833)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(56824)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(56800)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(56799)[8] (0.001000 sec.)
              output: (0 <= <sum_1030@71:0>)
            end InterpProver.interpolate_log(56798)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(56797)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(56796)[5] (0.001000 sec.)
        output:
          P[<sum_1030@71:0>](<sum_1030@71:0>:int) = (0 <= <sum_1030@71:0>)
          P[<sum_1030@74:0>](<sum_1030@71:0>:int) = (0 <= <sum_1030@71:0>)
      end ApronInterface.convex_hull_interpolate(56795)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
        
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int), (
        (<sigma_1032@66:1> > 0) && (var171 < 1)) |- bot
        
        
        ((1 <= <<<sigma_1032@66:0>@69:1>@85:0>) ||
         ((<<sigma_1032@66:0>@69:0> = 0) && (0 <= (<<sigma_1032@66:0>@69:0> + <<<sigma_1032@66:0>@69:1>@85:0>))))
        |- P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,
                                              <<<sigma_1032@66:0>@69:1>@85:0>:int)
        
        P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int), (0 > <sum_1030@71:0>) |- bot
        
         (<<sigma_1032@66:0>@69:0> > 0) |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
      lower bounds:
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        ((1 <= <<<sigma_1032@66:0>@69:1>@85:0>) ||
         ((<<sigma_1032@66:0>@69:0> = 0) && (0 <= (<<sigma_1032@66:0>@69:0> + <<<sigma_1032@66:0>@69:1>@85:0>))))
        P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = (<<sigma_1032@66:0>@69:0> > 0)
        P[<fail_1264@105:0>](var214:bool) = false
      upper bounds:
        P[<fail_1264@105:0>](var217:bool) = true
      begin GenHcSolver.classify_pids(59312)[4]
        output:
          [<fail_1264@105:0>]
      end GenHcSolver.classify_pids(59312)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(59315)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(59316)[5]
          begin InterpProver.interpolate_fresh(59317)[6]
            begin InterpProver.interpolate_log(59318)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(59319)[8]
                begin InterpProver.interpolate_simplify(59320)[9]
                  begin InterpProver.interpolate_quick(59333)[10]
                    
                  end InterpProver.interpolate_quick(59333)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(59337)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(59337)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(59320)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(59319)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(59318)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(59317)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(59316)[5] (0.000000 sec.)
        output:
          P[<fail_1264@105:0>](var214:bool) = false
      end ApronInterface.convex_hull_interpolate(59315)[4] (0.000000 sec.)
      Horn clauses:
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int), (
        (<sigma_1032@66:1> > 0) && (var171 < 1)) |- bot
        
        
        ((1 <= <<<sigma_1032@66:0>@69:1>@85:0>) ||
         ((<<sigma_1032@66:0>@69:0> = 0) && (0 <= (<<sigma_1032@66:0>@69:0> + <<<sigma_1032@66:0>@69:1>@85:0>))))
        |- P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,
                                              <<<sigma_1032@66:0>@69:1>@85:0>:int)
        
        P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int), (0 > <sum_1030@71:0>) |- bot
        
         (<<sigma_1032@66:0>@69:0> > 0) |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
      lower bounds:
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        ((1 <= <<<sigma_1032@66:0>@69:1>@85:0>) ||
         ((<<sigma_1032@66:0>@69:0> = 0) && (0 <= (<<sigma_1032@66:0>@69:0> + <<<sigma_1032@66:0>@69:1>@85:0>))))
        P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = (<<sigma_1032@66:0>@69:0> > 0)
      upper bounds:
        P[<<<sigma_1032@66:0>@69:1>@85:0>](var218:int,var219:int) = ((var218 <= 0) || (var219 >= 1))
      begin GenHcSolver.classify_pids(60886)[4]
        output:
          [<<<sigma_1032@66:0>@69:1>@85:0>]
      end GenHcSolver.classify_pids(60886)[4] (0.000000 sec.)
      lb:((1 <= <<<sigma_1032@66:0>@69:1>@85:0>) ||
          ((<<sigma_1032@66:0>@69:0> = 0) && (0 <= (<<sigma_1032@66:0>@69:0> + <<<sigma_1032@66:0>@69:1>@85:0>))))
      nub:(not ((<<sigma_1032@66:0>@69:0> <= 0) || (<<<sigma_1032@66:0>@69:1>@85:0> >= 1)))
      begin ApronInterface.convex_hull_interpolate(60889)[4]
        lb:((1 <= <<<sigma_1032@66:0>@69:1>@85:0>) ||
            ((<<sigma_1032@66:0>@69:0> = 0) && (0 <= (<<sigma_1032@66:0>@69:0> + <<<sigma_1032@66:0>@69:1>@85:0>))))
        nub:(not ((<<sigma_1032@66:0>@69:0> <= 0) || (<<<sigma_1032@66:0>@69:1>@85:0> >= 1)))
        lb':((1 <= <<<sigma_1032@66:0>@69:1>@85:0>) ||
             ((<<sigma_1032@66:0>@69:0> = 0) && (0 <= (<<sigma_1032@66:0>@69:0> + <<<sigma_1032@66:0>@69:1>@85:0>))))
        nub':(not ((<<sigma_1032@66:0>@69:0> <= 0) || (<<<sigma_1032@66:0>@69:1>@85:0> >= 1)))
        begin InterpProver.interpolate(60890)[5]
          begin InterpProver.interpolate_fresh(60891)[6]
            begin InterpProver.interpolate_log(60892)[7]
              input1: ((1 <= <<<sigma_1032@66:0>@69:1>@85:0>) ||
                       ((<<sigma_1032@66:0>@69:0> = 0) &&
                        (0 <= (<<sigma_1032@66:0>@69:0> + <<<sigma_1032@66:0>@69:1>@85:0>))))
              input2: (not ((<<sigma_1032@66:0>@69:0> <= 0) || (<<<sigma_1032@66:0>@69:1>@85:0> >= 1)))
              begin InterpProver.interpolate_check(60893)[8]
                begin InterpProver.interpolate_simplify(60894)[9]
                  begin InterpProver.interpolate_quick(60959)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(60968)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(60969)[12]
                        begin CsisatInterface.interpolate_csisat_log(60970)[13]
                          input1: ((0 = v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0 & 0 <= (v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0 + v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0)) | 1 <= v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0)
                          input2: (1 <= v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0 & (1 + v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0) <= 1)
                          begin CsisatInterface.interpolate_csisat_raw(60971)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(60971)[14] (0.001000 sec.)
                          output: (-2*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0 <= -2 | 2*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0 <= 0)
                          
                        end CsisatInterface.interpolate_csisat_log(60970)[13] (0.001000 sec.)
                        after simplification: (-2*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0 <= -2 | 2*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0 <= 0)
                        after dnf conversion: ((-2*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0 <= -2) | (2*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(60969)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(60968)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(60959)[10] (0.001999 sec.)
                  begin minimizing # of disjunctions(60981)[10]
                    input: ((1 <= <<<sigma_1032@66:0>@69:1>@85:0>) || (<<sigma_1032@66:0>@69:0> <= 0))
                    output: ((<<sigma_1032@66:0>@69:0> <= 0) || (1 <= <<<sigma_1032@66:0>@69:1>@85:0>))
                  end minimizing # of disjunctions(60981)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(60894)[9] (0.002999 sec.)
                
              end InterpProver.interpolate_check(60893)[8] (0.002999 sec.)
              output: ((<<sigma_1032@66:0>@69:0> <= 0) || (1 <= <<<sigma_1032@66:0>@69:1>@85:0>))
            end InterpProver.interpolate_log(60892)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(60891)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(60890)[5] (0.002999 sec.)
        output:
          P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
          ((<<sigma_1032@66:0>@69:0> <= 0) || (1 <= <<<sigma_1032@66:0>@69:1>@85:0>))
      end ApronInterface.convex_hull_interpolate(60889)[4] (0.002999 sec.)
      Horn clauses:
        P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int), (0 > <sum_1030@71:0>) |- bot
        
         (<<sigma_1032@66:0>@69:0> > 0) |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
      lower bounds:
        P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = (<<sigma_1032@66:0>@69:0> > 0)
      upper bounds:
        P[<<sigma_1032@66:0>@69:0>](var220:int) = (0 <= var220)
      begin GenHcSolver.classify_pids(61742)[4]
        output:
          [<<sigma_1032@66:0>@69:0>]
      end GenHcSolver.classify_pids(61742)[4] (0.000000 sec.)
      lb:(<<sigma_1032@66:0>@69:0> > 0)
      nub:(not (0 <= <<sigma_1032@66:0>@69:0>))
      begin ApronInterface.convex_hull_interpolate(61745)[4]
        lb:(<<sigma_1032@66:0>@69:0> > 0)
        nub:(not (0 <= <<sigma_1032@66:0>@69:0>))
        lb':(<<sigma_1032@66:0>@69:0> > 0)
        nub':(not (0 <= <<sigma_1032@66:0>@69:0>))
        begin InterpProver.interpolate(61746)[5]
          begin InterpProver.interpolate_fresh(61747)[6]
            begin InterpProver.interpolate_log(61748)[7]
              input1: (<<sigma_1032@66:0>@69:0> > 0)
              input2: (not (0 <= <<sigma_1032@66:0>@69:0>))
              begin InterpProver.interpolate_check(61749)[8]
                begin InterpProver.interpolate_simplify(61750)[9]
                  begin InterpProver.interpolate_quick(61767)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(61776)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(61777)[12]
                        begin CsisatInterface.interpolate_csisat_log(61778)[13]
                          input1: 1 <= v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0
                          input2: (1 + v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(61779)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(61779)[14] (0.000000 sec.)
                          output: -1*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0 <= -1
                          
                        end CsisatInterface.interpolate_csisat_log(61778)[13] (0.000000 sec.)
                        after simplification: -1*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0 <= -1
                        after dnf conversion: ((-1*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0 <= -1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(61777)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(61776)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(61767)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(61750)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(61749)[8] (0.000000 sec.)
              output: (1 <= <<sigma_1032@66:0>@69:0>)
            end InterpProver.interpolate_log(61748)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(61747)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(61746)[5] (0.000000 sec.)
        output:
          P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = (1 <= <<sigma_1032@66:0>@69:0>)
      end ApronInterface.convex_hull_interpolate(61745)[4] (0.000000 sec.)
      begin HcSolver.check_validity(61893)[4]
        input:
          P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
          
          P[<<sigma_1032@66:2>@100:0>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int),
          ((<f_main_1261@102:2> < <f_main_1261@102:0>) && <fail_1264@105:0>)
          |- P[<fail_1264@105:0>](<fail_1264@105:0>:bool)
          
          P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int),
          P[<<sigma_1032@89:2>@92:0>]((-1 + <sigma_1032@66:1>):int,(<<sigma_1032@66:2>@100:0> + (-1 * var171)):int),
          (<sigma_1032@66:1> > 0) |- P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,
                                                                  <<sigma_1032@66:2>@100:0>:int)
          
          P[<sigma_1032@89:1>](<sigma_1032@89:1>:int), ((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> <= 0))
          |- P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int)
          
          P[<sigma_1032@66:1>]((1 + <sigma_1032@89:1>):int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>]((1 + <sigma_1032@89:1>):int,<f_sigma_1259@87:3>:int),
          ((1 + <sigma_1032@89:1>) > 0) |- P[<sigma_1032@89:1>](<sigma_1032@89:1>:int)
          
          P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
          <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
          
          P[<sum_1030@71:0>](<sum_1030@71:0>:int),
          P[<<sum_1030@74:1>@77:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@83:0> + (-1 * <sum_1030@71:0>)):int),
          (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                             <<sum_1030@71:1>@83:0>:int)
          
          P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
          |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
          
          P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
          |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
          
          P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
          
          P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
          |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
          
          |- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(61893)[4] (0.008998 sec.)
      solution:
        P[<fail_1264@105:0>](var214:bool) = false
        P[<<sigma_1032@66:2>@100:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int) =
        (<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>)
        P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int) =
        (<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>)
        P[<sigma_1032@89:1>](<sigma_1032@66:1>:int) = true
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        ((<<sigma_1032@66:0>@69:0> <= 0) || (1 <= <<<sigma_1032@66:0>@69:1>@85:0>))
        P[<<sum_1030@71:1>@83:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int) =
        ((1 <= <<sum_1030@74:1>@77:0>) || ((0 <= (<sum_1030@74:0> + <<sum_1030@74:1>@77:0>)) && (<sum_1030@74:0> = 0)))
        P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int) =
        ((1 <= <<sum_1030@74:1>@77:0>) || ((0 <= (<sum_1030@74:0> + <<sum_1030@74:1>@77:0>)) && (<sum_1030@74:0> = 0)))
        P[<sum_1030@74:0>](<sum_1030@71:0>:int) = (0 <= <sum_1030@71:0>)
        P[<sum_1030@71:0>](<sum_1030@71:0>:int) = (0 <= <sum_1030@71:0>)
        P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = (1 <= <<sigma_1032@66:0>@69:0>)
        P[<sigma_1032@66:1>](<sigma_1032@66:1>:int) = true
    end GenHcSolver.solve(35543)[3] (0.138979 sec.)
    begin GenHcSolver.solve(63710)[3]
      Horn clauses:
        P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
        
        P[<<sigma_1032@66:2>@100:0>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int),
        ((<f_main_1261@102:2> < <f_main_1261@102:0>) && <fail_1264@105:0>)
        |- P[<fail_1264@105:0>](<fail_1264@105:0>:bool)
        
        P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int),
        P[<<sigma_1032@89:2>@92:0>]((-1 + <sigma_1032@66:1>):int,(<<sigma_1032@66:2>@100:0> + (-1 * var171)):int),
        (<sigma_1032@66:1> > 0) |- P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,
                                                                <<sigma_1032@66:2>@100:0>:int)
        
        P[<sigma_1032@89:1>](<sigma_1032@89:1>:int), ((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> <= 0))
        |- P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int)
        
        P[<sigma_1032@66:1>]((1 + <sigma_1032@89:1>):int),
        P[<<<sigma_1032@66:0>@69:1>@85:0>]((1 + <sigma_1032@89:1>):int,<f_sigma_1259@87:3>:int),
        ((1 + <sigma_1032@89:1>) > 0) |- P[<sigma_1032@89:1>](<sigma_1032@89:1>:int)
        
        P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
        <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
        
        P[<sum_1030@71:0>](<sum_1030@71:0>:int),
        P[<<sum_1030@74:1>@77:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@83:0> + (-1 * <sum_1030@71:0>)):int),
        (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                           <<sum_1030@71:1>@83:0>:int)
        
        P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
        |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
        
        P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
        |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
        
        P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
        
        P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
        |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
        
        |- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
      lower bounds:
        P[<sigma_1032@66:1>](<sigma_1032@66:1>:int) = true
        P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = (<<sigma_1032@66:0>@69:0> > 0)
        P[<sum_1030@71:0>](<sum_1030@71:0>:int) = (<sum_1030@71:0> > 0)
        P[<sum_1030@74:0>](<sum_1030@74:0>:int) = ((1 + <sum_1030@74:0>) > 0)
        P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int) =
        ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> = 0))
        P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,<<sum_1030@71:1>@83:0>:int) =
        ((<sum_1030@71:0> = 1) && (<<sum_1030@71:1>@83:0> = <sum_1030@71:0>))
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        ((<<sigma_1032@66:0>@69:0> = 1) && (<<<sigma_1032@66:0>@69:1>@85:0> = <<sigma_1032@66:0>@69:0>))
        P[<sigma_1032@89:1>](<sigma_1032@89:1>:int) = (<sigma_1032@89:1> = 0)
        P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int) =
        ((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> = 0))
        P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,<<sigma_1032@66:2>@100:0>:int) =
        ((<sigma_1032@66:1> = 1) && (<<sigma_1032@66:2>@100:0> = <sigma_1032@66:1>))
        P[<fail_1264@105:0>](<fail_1264@105:0>:bool) = false
      upper bounds:
        P[<<sigma_1032@66:2>@100:0>](var226:int,var227:int) = (var227 >= var226)
        P[<<sigma_1032@89:2>@92:0>](var222:int,var223:int) = ((var222 <> 0) || (var223 >= 0))
      begin GenHcSolver.classify_pids(68435)[4]
        output:
          [<<sigma_1032@89:2>@92:0>;<<sigma_1032@66:2>@100:0>]
      end GenHcSolver.classify_pids(68435)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(68470)[4]
        lb:(((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> = 0)) ||
            ((<sigma_1032@89:1> = 1) && (<<sigma_1032@89:2>@92:0> = <sigma_1032@89:1>)))
        nub:((not ((<sigma_1032@89:1> <> 0) || (<<sigma_1032@89:2>@92:0> >= 0))) ||
             (not (<<sigma_1032@89:2>@92:0> >= <sigma_1032@89:1>)))
        begin ExtFormula.Formula.case_analysis_boolean(68491)[5]
          ts: (((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> = 0)) ||
               ((<sigma_1032@89:1> = 1) && (<<sigma_1032@89:2>@92:0> = <sigma_1032@89:1>)))
          
        end ExtFormula.Formula.case_analysis_boolean(68491)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(68514)[5]
          ts: ((<<sigma_1032@89:2>@92:0> < <sigma_1032@89:1>) ||
               ((<sigma_1032@89:1> = 0) && (<<sigma_1032@89:2>@92:0> < 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(68514)[5] (0.001000 sec.)
        lb':(((<<sigma_1032@89:2>@92:0> + (-1 * <sigma_1032@89:1>)) = 0) &&
             (((1 + (-1 * <sigma_1032@89:1>)) >= 0) && (<sigma_1032@89:1> >= 0)))
        nub':(((-1 + (-1 * <<sigma_1032@89:2>@92:0>)) + <sigma_1032@89:1>) >= 0)
        begin InterpProver.interpolate(68521)[5]
          begin InterpProver.interpolate_fresh(68522)[6]
            begin InterpProver.interpolate_log(68523)[7]
              input1: (((<<sigma_1032@89:2>@92:0> + (-1 * <sigma_1032@89:1>)) = 0) &&
                       (((1 + (-1 * <sigma_1032@89:1>)) >= 0) && (<sigma_1032@89:1> >= 0)))
              input2: (((-1 + (-1 * <<sigma_1032@89:2>@92:0>)) + <sigma_1032@89:1>) >= 0)
              begin InterpProver.interpolate_check(68524)[8]
                begin InterpProver.interpolate_simplify(68525)[9]
                  begin InterpProver.interpolate_quick(68602)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(68611)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(68612)[12]
                        begin CsisatInterface.interpolate_csisat_log(68613)[13]
                          input1: (v_sep_sigma_1032_sep_89_sep_1 = v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 & 0 <= v_sep_sigma_1032_sep_89_sep_1 & v_sep_sigma_1032_sep_89_sep_1 <= 1)
                          input2: (1 + v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0) <= v_sep_sigma_1032_sep_89_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(68614)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(68614)[14] (0.000000 sec.)
                          output: (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(68613)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0
                        after dnf conversion: (((-2*v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0 + 2*v_sep_sigma_1032_sep_89_sep_1) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(68612)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(68611)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(68602)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(68525)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(68524)[8] (0.001999 sec.)
              output: (<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>)
            end InterpProver.interpolate_log(68523)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(68522)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(68521)[5] (0.001999 sec.)
        output:
          P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int) =
          (<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>)
          P[<<sigma_1032@66:2>@100:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int) =
          (<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>)
      end ApronInterface.convex_hull_interpolate(68470)[4] (0.002999 sec.)
      Horn clauses:
        P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
        
        P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int), (
        (<sigma_1032@66:1> > 0) && (var171 < 1)) |- bot
        
        P[<sigma_1032@66:1>]((1 + <sigma_1032@89:1>):int),
        P[<<<sigma_1032@66:0>@69:1>@85:0>]((1 + <sigma_1032@89:1>):int,<f_sigma_1259@87:3>:int),
        ((1 + <sigma_1032@89:1>) > 0) |- P[<sigma_1032@89:1>](<sigma_1032@89:1>:int)
        
        P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
        <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
        
        P[<sum_1030@71:0>](<sum_1030@71:0>:int),
        P[<<sum_1030@74:1>@77:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@83:0> + (-1 * <sum_1030@71:0>)):int),
        (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                           <<sum_1030@71:1>@83:0>:int)
        
        P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
        |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
        
        P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
        |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
        
        P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
        
        P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
        |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
        
        |- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
      lower bounds:
        P[<sigma_1032@66:1>](<sigma_1032@66:1>:int) = true
        P[<fail_1264@105:0>](var231:bool) = false
        P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = (<<sigma_1032@66:0>@69:0> > 0)
        P[<sum_1030@71:0>](<sum_1030@71:0>:int) = (<sum_1030@71:0> > 0)
        P[<sum_1030@74:0>](<sum_1030@74:0>:int) = ((1 + <sum_1030@74:0>) > 0)
        P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int) =
        ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> = 0))
        P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,<<sum_1030@71:1>@83:0>:int) =
        ((<sum_1030@71:0> = 1) && (<<sum_1030@71:1>@83:0> = <sum_1030@71:0>))
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        ((<<sigma_1032@66:0>@69:0> = 1) && (<<<sigma_1032@66:0>@69:1>@85:0> = <<sigma_1032@66:0>@69:0>))
        P[<sigma_1032@89:1>](<sigma_1032@89:1>:int) = (<sigma_1032@89:1> = 0)
      upper bounds:
        P[<sigma_1032@89:1>](var237:int) = true
        P[<sigma_1032@66:1>](var234:int) = true
      begin GenHcSolver.classify_pids(73997)[4]
        output:
          [<sigma_1032@66:1>;<sigma_1032@89:1>]
      end GenHcSolver.classify_pids(73997)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(74008)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(74011)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(74011)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(74016)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(74016)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(74019)[5]
          begin InterpProver.interpolate_fresh(74020)[6]
            begin InterpProver.interpolate_log(74021)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(74022)[8]
                begin InterpProver.interpolate_simplify(74023)[9]
                  begin InterpProver.interpolate_quick(74037)[10]
                    
                  end InterpProver.interpolate_quick(74037)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(74023)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(74022)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(74021)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(74020)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(74019)[5] (0.000000 sec.)
        output:
          P[<sigma_1032@66:1>](<sigma_1032@66:1>:int) = true
          P[<sigma_1032@89:1>](<sigma_1032@66:1>:int) = true
      end ApronInterface.convex_hull_interpolate(74008)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
        
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int), (
        (<sigma_1032@66:1> > 0) && (var171 < 1)) |- bot
        
        P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
        <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
        
        P[<sum_1030@71:0>](<sum_1030@71:0>:int),
        P[<<sum_1030@74:1>@77:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@83:0> + (-1 * <sum_1030@71:0>)):int),
        (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                           <<sum_1030@71:1>@83:0>:int)
        
        P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
        |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
        
        P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
        |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
        
        P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
        
         (<<sigma_1032@66:0>@69:0> > 0) |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
      lower bounds:
        P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = (<<sigma_1032@66:0>@69:0> > 0)
        P[<fail_1264@105:0>](var241:bool) = false
        P[<sum_1030@71:0>](<sum_1030@71:0>:int) = (<sum_1030@71:0> > 0)
        P[<sum_1030@74:0>](<sum_1030@74:0>:int) = ((1 + <sum_1030@74:0>) > 0)
        P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int) =
        ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> = 0))
        P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,<<sum_1030@71:1>@83:0>:int) =
        ((<sum_1030@71:0> = 1) && (<<sum_1030@71:1>@83:0> = <sum_1030@71:0>))
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        ((<<sigma_1032@66:0>@69:0> = 1) && (<<<sigma_1032@66:0>@69:1>@85:0> = <<sigma_1032@66:0>@69:0>))
      upper bounds:
        P[<<sum_1030@71:1>@83:0>](var248:int,var249:int) = ((var248 <= 0) || (var249 >= 1))
        P[<<sum_1030@74:1>@77:0>](var244:int,var245:int) = (((var245 + var244) >= 0) || ((1 + var244) <= 0))
      begin GenHcSolver.classify_pids(78759)[4]
        output:
          [<<sum_1030@74:1>@77:0>;<<sum_1030@71:1>@83:0>]
      end GenHcSolver.classify_pids(78759)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(78810)[4]
        lb:(((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> = 0)) ||
            ((<sum_1030@74:0> = 1) && (<<sum_1030@74:1>@77:0> = <sum_1030@74:0>)))
        nub:((not (((<<sum_1030@74:1>@77:0> + <sum_1030@74:0>) >= 0) || ((1 + <sum_1030@74:0>) <= 0))) ||
             (not ((<sum_1030@74:0> <= 0) || (<<sum_1030@74:1>@77:0> >= 1))))
        begin ExtFormula.Formula.case_analysis_boolean(78831)[5]
          ts: (((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> = 0)) ||
               ((<sum_1030@74:0> = 1) && (<<sum_1030@74:1>@77:0> = <sum_1030@74:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(78831)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(78870)[5]
          ts: ((((<<sum_1030@74:1>@77:0> + <sum_1030@74:0>) < 0) && ((1 + <sum_1030@74:0>) > 0)) ||
               ((<sum_1030@74:0> > 0) && (<<sum_1030@74:1>@77:0> < 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(78870)[5] (0.000000 sec.)
        lb':(((<<sum_1030@74:1>@77:0> + (-1 * <sum_1030@74:0>)) = 0) &&
             (((1 + (-1 * <sum_1030@74:0>)) >= 0) && (<sum_1030@74:0> >= 0)))
        nub':(((-1 * <<sum_1030@74:1>@77:0>) >= 0) &&
              ((((-1 + (-1 * <<sum_1030@74:1>@77:0>)) + <sum_1030@74:0>) >= 0) && (<sum_1030@74:0> >= 0)))
        begin InterpProver.interpolate(78880)[5]
          begin InterpProver.interpolate_fresh(78881)[6]
            begin InterpProver.interpolate_log(78882)[7]
              input1: (((<<sum_1030@74:1>@77:0> + (-1 * <sum_1030@74:0>)) = 0) &&
                       (((1 + (-1 * <sum_1030@74:0>)) >= 0) && (<sum_1030@74:0> >= 0)))
              input2: (((-1 * <<sum_1030@74:1>@77:0>) >= 0) &&
                       ((((-1 + (-1 * <<sum_1030@74:1>@77:0>)) + <sum_1030@74:0>) >= 0) && (<sum_1030@74:0> >= 0)))
              begin InterpProver.interpolate_check(78883)[8]
                begin InterpProver.interpolate_simplify(78884)[9]
                  begin InterpProver.interpolate_quick(79015)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(79024)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(79025)[12]
                        begin CsisatInterface.interpolate_csisat_log(79026)[13]
                          input1: (v_sep_sum_1030_sep_74_sep_0 = v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 & 0 <= v_sep_sum_1030_sep_74_sep_0 & v_sep_sum_1030_sep_74_sep_0 <= 1)
                          input2: (0 <= v_sep_sum_1030_sep_74_sep_0 & v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 <= 0 & (1 + v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0) <= v_sep_sum_1030_sep_74_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(79027)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(79027)[14] (0.000000 sec.)
                          output: (-2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 + 2*v_sep_sum_1030_sep_74_sep_0) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(79026)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 + 2*v_sep_sum_1030_sep_74_sep_0) <= 0
                        after dnf conversion: (((-2*v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0 + 2*v_sep_sum_1030_sep_74_sep_0) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(79025)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(79024)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(79015)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(78884)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(78883)[8] (0.002000 sec.)
              output: (<sum_1030@74:0> <= <<sum_1030@74:1>@77:0>)
            end InterpProver.interpolate_log(78882)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(78881)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(78880)[5] (0.002999 sec.)
        output:
          P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int) =
          (<sum_1030@74:0> <= <<sum_1030@74:1>@77:0>)
          P[<<sum_1030@71:1>@83:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int) =
          (<sum_1030@74:0> <= <<sum_1030@74:1>@77:0>)
      end ApronInterface.convex_hull_interpolate(78810)[4] (0.003999 sec.)
      Horn clauses:
        P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
        
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int), (
        (<sigma_1032@66:1> > 0) && (var171 < 1)) |- bot
        
         (<<sigma_1032@66:0>@69:0> <= <<<sigma_1032@66:0>@69:1>@85:0>)
        |- P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,
                                              <<<sigma_1032@66:0>@69:1>@85:0>:int)
        
        P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
        |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
        
        P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
        
         (<<sigma_1032@66:0>@69:0> > 0) |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
      lower bounds:
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        (<<sigma_1032@66:0>@69:0> <= <<<sigma_1032@66:0>@69:1>@85:0>)
        P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = (<<sigma_1032@66:0>@69:0> > 0)
        P[<fail_1264@105:0>](var253:bool) = false
        P[<sum_1030@71:0>](<sum_1030@71:0>:int) = (<sum_1030@71:0> > 0)
        P[<sum_1030@74:0>](<sum_1030@74:0>:int) = ((1 + <sum_1030@74:0>) > 0)
      upper bounds:
        P[<sum_1030@74:0>](var259:int) = true
        P[<sum_1030@71:0>](var256:int) = true
      begin GenHcSolver.classify_pids(82154)[4]
        output:
          [<sum_1030@71:0>;<sum_1030@74:0>]
      end GenHcSolver.classify_pids(82154)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(82165)[4]
        lb:((<sum_1030@71:0> > 0) || ((1 + <sum_1030@71:0>) > 0))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(82175)[5]
          ts: ((1 + <sum_1030@71:0>) > 0)
          
        end ExtFormula.Formula.case_analysis_boolean(82175)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(82182)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(82182)[5] (0.000000 sec.)
        lb':(<sum_1030@71:0> >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(82185)[5]
          begin InterpProver.interpolate_fresh(82186)[6]
            begin InterpProver.interpolate_log(82187)[7]
              input1: (<sum_1030@71:0> >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(82188)[8]
                begin InterpProver.interpolate_simplify(82189)[9]
                  begin InterpProver.interpolate_quick(82205)[10]
                    
                  end InterpProver.interpolate_quick(82205)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(82189)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(82188)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(82187)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(82186)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(82185)[5] (0.000000 sec.)
        output:
          P[<sum_1030@71:0>](<sum_1030@71:0>:int) = true
          P[<sum_1030@74:0>](<sum_1030@71:0>:int) = true
      end ApronInterface.convex_hull_interpolate(82165)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
        
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int), (
        (<sigma_1032@66:1> > 0) && (var171 < 1)) |- bot
        
         (<<sigma_1032@66:0>@69:0> <= <<<sigma_1032@66:0>@69:1>@85:0>)
        |- P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,
                                              <<<sigma_1032@66:0>@69:1>@85:0>:int)
        
         (<<sigma_1032@66:0>@69:0> > 0) |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
      lower bounds:
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        (<<sigma_1032@66:0>@69:0> <= <<<sigma_1032@66:0>@69:1>@85:0>)
        P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = (<<sigma_1032@66:0>@69:0> > 0)
        P[<fail_1264@105:0>](var263:bool) = false
      upper bounds:
        P[<<sigma_1032@66:0>@69:0>](var266:int) = true
      begin GenHcSolver.classify_pids(83787)[4]
        output:
          [<<sigma_1032@66:0>@69:0>]
      end GenHcSolver.classify_pids(83787)[4] (0.000000 sec.)
      lb:(<<sigma_1032@66:0>@69:0> > 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(83790)[4]
        lb:(<<sigma_1032@66:0>@69:0> > 0)
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(83794)[5]
          ts: (<<sigma_1032@66:0>@69:0> > 0)
          
        end ExtFormula.Formula.case_analysis_boolean(83794)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(83800)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(83800)[5] (0.000000 sec.)
        lb':((-1 + <<sigma_1032@66:0>@69:0>) >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(83803)[5]
          begin InterpProver.interpolate_fresh(83804)[6]
            begin InterpProver.interpolate_log(83805)[7]
              input1: ((-1 + <<sigma_1032@66:0>@69:0>) >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(83806)[8]
                begin InterpProver.interpolate_simplify(83807)[9]
                  begin InterpProver.interpolate_quick(83825)[10]
                    
                  end InterpProver.interpolate_quick(83825)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(83807)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(83806)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(83805)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(83804)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(83803)[5] (0.001000 sec.)
        output:
          P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = true
      end ApronInterface.convex_hull_interpolate(83790)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
        
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int), (
        (<sigma_1032@66:1> > 0) && (var171 < 1)) |- bot
        
         (<<sigma_1032@66:0>@69:0> <= <<<sigma_1032@66:0>@69:1>@85:0>)
        |- P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,
                                              <<<sigma_1032@66:0>@69:1>@85:0>:int)
      lower bounds:
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        (<<sigma_1032@66:0>@69:0> <= <<<sigma_1032@66:0>@69:1>@85:0>)
        P[<fail_1264@105:0>](var268:bool) = false
      upper bounds:
        P[<fail_1264@105:0>](var271:bool) = true
      begin GenHcSolver.classify_pids(84620)[4]
        output:
          [<fail_1264@105:0>]
      end GenHcSolver.classify_pids(84620)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(84623)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(84626)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(84626)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(84631)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(84631)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(84634)[5]
          begin InterpProver.interpolate_fresh(84635)[6]
            begin InterpProver.interpolate_log(84636)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(84637)[8]
                begin InterpProver.interpolate_simplify(84638)[9]
                  begin InterpProver.interpolate_quick(84653)[10]
                    
                  end InterpProver.interpolate_quick(84653)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(84657)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(84657)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(84638)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(84637)[8] (0.000999 sec.)
              output: false
            end InterpProver.interpolate_log(84636)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(84635)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(84634)[5] (0.000999 sec.)
        output:
          P[<fail_1264@105:0>](var268:bool) = false
      end ApronInterface.convex_hull_interpolate(84623)[4] (0.000999 sec.)
      Horn clauses:
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int), (
        (<sigma_1032@66:1> > 0) && (var171 < 1)) |- bot
        
         (<<sigma_1032@66:0>@69:0> <= <<<sigma_1032@66:0>@69:1>@85:0>)
        |- P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,
                                              <<<sigma_1032@66:0>@69:1>@85:0>:int)
      lower bounds:
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        (<<sigma_1032@66:0>@69:0> <= <<<sigma_1032@66:0>@69:1>@85:0>)
      upper bounds:
        P[<<<sigma_1032@66:0>@69:1>@85:0>](var272:int,var273:int) = ((var272 <= 0) || (var273 >= 1))
      begin GenHcSolver.classify_pids(85467)[4]
        output:
          [<<<sigma_1032@66:0>@69:1>@85:0>]
      end GenHcSolver.classify_pids(85467)[4] (0.000000 sec.)
      lb:(<<sigma_1032@66:0>@69:0> <= <<<sigma_1032@66:0>@69:1>@85:0>)
      nub:(not ((<<sigma_1032@66:0>@69:0> <= 0) || (<<<sigma_1032@66:0>@69:1>@85:0> >= 1)))
      begin ApronInterface.convex_hull_interpolate(85470)[4]
        lb:(<<sigma_1032@66:0>@69:0> <= <<<sigma_1032@66:0>@69:1>@85:0>)
        nub:(not ((<<sigma_1032@66:0>@69:0> <= 0) || (<<<sigma_1032@66:0>@69:1>@85:0> >= 1)))
        begin ExtFormula.Formula.case_analysis_boolean(85475)[5]
          ts: (<<sigma_1032@66:0>@69:0> <= <<<sigma_1032@66:0>@69:1>@85:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(85475)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(85494)[5]
          ts: ((<<sigma_1032@66:0>@69:0> > 0) && (<<<sigma_1032@66:0>@69:1>@85:0> < 1))
          
        end ExtFormula.Formula.case_analysis_boolean(85494)[5] (0.000000 sec.)
        lb':((<<<sigma_1032@66:0>@69:1>@85:0> + (-1 * <<sigma_1032@66:0>@69:0>)) >= 0)
        nub':(((-1 * <<<sigma_1032@66:0>@69:1>@85:0>) >= 0) && ((-1 + <<sigma_1032@66:0>@69:0>) >= 0))
        begin InterpProver.interpolate(85500)[5]
          begin InterpProver.interpolate_fresh(85501)[6]
            begin InterpProver.interpolate_log(85502)[7]
              input1: ((<<<sigma_1032@66:0>@69:1>@85:0> + (-1 * <<sigma_1032@66:0>@69:0>)) >= 0)
              input2: (((-1 * <<<sigma_1032@66:0>@69:1>@85:0>) >= 0) && ((-1 + <<sigma_1032@66:0>@69:0>) >= 0))
              begin InterpProver.interpolate_check(85503)[8]
                begin InterpProver.interpolate_simplify(85504)[9]
                  begin InterpProver.interpolate_quick(85545)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(85554)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(85555)[12]
                        begin CsisatInterface.interpolate_csisat_log(85556)[13]
                          input1: v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0 <= v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0
                          input2: (1 <= v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0 & v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0 <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(85557)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(85557)[14] (0.000000 sec.)
                          output: (-2*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0 + 2*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(85556)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0 + 2*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0) <= 0
                        after dnf conversion: (((-2*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0 + 2*v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(85555)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(85554)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(85545)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(85504)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(85503)[8] (0.001000 sec.)
              output: (<<sigma_1032@66:0>@69:0> <= <<<sigma_1032@66:0>@69:1>@85:0>)
            end InterpProver.interpolate_log(85502)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(85501)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(85500)[5] (0.001000 sec.)
        output:
          P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
          (<<sigma_1032@66:0>@69:0> <= <<<sigma_1032@66:0>@69:1>@85:0>)
      end ApronInterface.convex_hull_interpolate(85470)[4] (0.001000 sec.)
      begin HcSolver.check_validity(85737)[4]
        input:
          P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
          
          P[<<sigma_1032@66:2>@100:0>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int),
          ((<f_main_1261@102:2> < <f_main_1261@102:0>) && <fail_1264@105:0>)
          |- P[<fail_1264@105:0>](<fail_1264@105:0>:bool)
          
          P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int),
          P[<<sigma_1032@89:2>@92:0>]((-1 + <sigma_1032@66:1>):int,(<<sigma_1032@66:2>@100:0> + (-1 * var171)):int),
          (<sigma_1032@66:1> > 0) |- P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,
                                                                  <<sigma_1032@66:2>@100:0>:int)
          
          P[<sigma_1032@89:1>](<sigma_1032@89:1>:int), ((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> <= 0))
          |- P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int)
          
          P[<sigma_1032@66:1>]((1 + <sigma_1032@89:1>):int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>]((1 + <sigma_1032@89:1>):int,<f_sigma_1259@87:3>:int),
          ((1 + <sigma_1032@89:1>) > 0) |- P[<sigma_1032@89:1>](<sigma_1032@89:1>:int)
          
          P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
          <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
          
          P[<sum_1030@71:0>](<sum_1030@71:0>:int),
          P[<<sum_1030@74:1>@77:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@83:0> + (-1 * <sum_1030@71:0>)):int),
          (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                             <<sum_1030@71:1>@83:0>:int)
          
          P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
          |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
          
          P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
          |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
          
          P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
          
          P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
          |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
          
          |- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(85737)[4] (0.005999 sec.)
      solution:
        P[<fail_1264@105:0>](var268:bool) = false
        P[<<sigma_1032@66:2>@100:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int) =
        (<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>)
        P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int) =
        (<sigma_1032@89:1> <= <<sigma_1032@89:2>@92:0>)
        P[<sigma_1032@89:1>](<sigma_1032@66:1>:int) = true
        P[<<<sigma_1032@66:0>@69:1>@85:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int) =
        (<<sigma_1032@66:0>@69:0> <= <<<sigma_1032@66:0>@69:1>@85:0>)
        P[<<sum_1030@71:1>@83:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int) =
        (<sum_1030@74:0> <= <<sum_1030@74:1>@77:0>)
        P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int) =
        (<sum_1030@74:0> <= <<sum_1030@74:1>@77:0>)
        P[<sum_1030@74:0>](<sum_1030@71:0>:int) = true
        P[<sum_1030@71:0>](<sum_1030@71:0>:int) = true
        P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int) = true
        P[<sigma_1032@66:1>](<sigma_1032@66:1>:int) = true
    end GenHcSolver.solve(63710)[3] (0.107984 sec.)
    begin YhornInterface.solve(86854)[3]
      begin HcSolver.solve_ub(86855)[4]
        encoded:
          P[<fail_1264@105:0>](<fail_1264@105:0>:int)|- bot
          
          P[<<sigma_1032@66:2>@100:0>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int),
          ((<f_main_1261@102:2> < <f_main_1261@102:0>) && (<fail_1264@105:0> = 1))
          |- P[<fail_1264@105:0>](<fail_1264@105:0>:int)
          
          P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int),
          P[<<sigma_1032@89:2>@92:0>]((-1 + <sigma_1032@66:1>):int,(<<sigma_1032@66:2>@100:0> + (-1 * var171)):int),
          (<sigma_1032@66:1> > 0) |- P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,
                                                                  <<sigma_1032@66:2>@100:0>:int)
          
          P[<sigma_1032@89:1>](<sigma_1032@89:1>:int), ((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> <= 0))
          |- P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int)
          
          P[<sigma_1032@66:1>]((1 + <sigma_1032@89:1>):int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>]((1 + <sigma_1032@89:1>):int,<f_sigma_1259@87:3>:int),
          ((1 + <sigma_1032@89:1>) > 0) |- P[<sigma_1032@89:1>](<sigma_1032@89:1>:int)
          
          P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
          <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
          
          P[<sum_1030@71:0>](<sum_1030@71:0>:int),
          P[<<sum_1030@74:1>@77:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@83:0> + (-1 * <sum_1030@71:0>)):int),
          (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                             <<sum_1030@71:1>@83:0>:int)
          
          P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
          |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
          
          P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
          |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
          
          P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
          
          P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
          |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
          
          |- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
        input to Yhorn:
          P[<fail_1264@105:0>](<fail_1264@105:0>:int)|- bot
          
          P[<<sigma_1032@66:2>@100:0>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int),
          ((<f_main_1261@102:2> < <f_main_1261@102:0>) && (<fail_1264@105:0> = 1))
          |- P[<fail_1264@105:0>](<fail_1264@105:0>:int)
          
          P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int),
          P[<<sigma_1032@89:2>@92:0>](var274:int,var275:int),
          (((var275 + var171) = <<sigma_1032@66:2>@100:0>) &&
           (((1 + var274) = <sigma_1032@66:1>) && (<sigma_1032@66:1> > 0)))
          |- P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,<<sigma_1032@66:2>@100:0>:int)
          
          P[<sigma_1032@89:1>](<sigma_1032@89:1>:int), ((<sigma_1032@89:1> <= 0) && (<<sigma_1032@89:2>@92:0> = 0))
          |- P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int)
          
          P[<sigma_1032@66:1>](var276:int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>](var277:int,<f_sigma_1259@87:3>:int),
          ((var277 = (1 + <sigma_1032@89:1>)) && ((var276 = (1 + <sigma_1032@89:1>)) && ((1 + <sigma_1032@89:1>) > 0)))
          |- P[<sigma_1032@89:1>](<sigma_1032@89:1>:int)
          
          P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
          <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
          
          P[<sum_1030@71:0>](<sum_1030@71:0>:int),
          P[<<sum_1030@74:1>@77:0>](var278:int,var279:int),
          (((var279 + <sum_1030@71:0>) = <<sum_1030@71:1>@83:0>) &&
           (((1 + var278) = <sum_1030@71:0>) && (<sum_1030@71:0> > 0)))
          |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,<<sum_1030@71:1>@83:0>:int)
          
          P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<sum_1030@74:0> <= 0) && (<<sum_1030@74:1>@77:0> = 0))
          |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
          
          P[<sum_1030@71:0>](var280:int), ((var280 = (1 + <sum_1030@74:0>)) && ((1 + <sum_1030@74:0>) > 0))
          |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
          
          P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
          
          P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
          |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1264_sep_105_sep_0($296)) -> 1=0.
(($296-1=0) & ($297-$298<0)) & (v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0($298,$297)) -> v_sep_fail_1264_sep_105_sep_0($296).
(($299>0) & (-$299+$300+1=0) & ($301+$302-$303=0)) & (v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0($300,$301)) & (v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0($299,$302)) & (v_sep_sigma_1032_sep_66_sep_1($299)) -> v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0($299,$303).
(($304=0) & ($305<=0)) & (v_sep_sigma_1032_sep_89_sep_1($305)) -> v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0($305,$304).
(($305+1>0) & (-$305+$306-1=0) & (-$305+$307-1=0)) & (v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0($307,$308)) & (v_sep_sigma_1032_sep_66_sep_1($306)) -> v_sep_sigma_1032_sep_89_sep_1($305).
(0=0) & (v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0($309,$310)) -> v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0($309,$310).
(($311>0) & (-$311+$312+1=0) & ($311+$313-$314=0)) & (v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0($312,$313)) & (v_sep_sum_1030_sep_71_sep_0($311)) -> v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0($311,$314).
(($315=0) & ($316<=0)) & (v_sep_sum_1030_sep_74_sep_0($316)) -> v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0($316,$315).
(($316+1>0) & (-$316+$317-1=0)) & (v_sep_sum_1030_sep_71_sep_0($317)) -> v_sep_sum_1030_sep_74_sep_0($316).
(0=0) & (v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0($311)) -> v_sep_sum_1030_sep_71_sep_0($311).
($309>0) & (v_sep_sigma_1032_sep_66_sep_1($309)) -> v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0($309).
0=0 -> v_sep_sigma_1032_sep_66_sep_1($299).


v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: X
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
................
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: X
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: X
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
......
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: X
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
........
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: X
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
............Split conj [36] 0.827873
(Reconstrcut: 11 **)
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...........
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
......
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
........
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
............
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: X
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...............Split conj [38] 0.853869
(Reconstrcut: 25 ***)
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
.................
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
......
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
........
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
............
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: X
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...............Split conj [42] 0.878865
(Reconstrcut: 15 **)
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...............
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
......
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
........
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
............
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...............
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: X
...................Split conj [44] 0.918859
(Reconstrcut: 19 **)
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
.................
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
...
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
......
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
........
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
............
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
...............
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
...................
v_sep_fail_1264_sep_105_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0: X
v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0: (X) & (X)
v_sep_sigma_1032_sep_66_sep_1: (X) & (X) & (X)
v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0: X
v_sep_sigma_1032_sep_89_sep_1: X
v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0: X
v_sep_sum_1030_sep_71_sep_0: X
v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0: (X) & (X)
v_sep_sum_1030_sep_74_sep_0: X
v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0: (X) & (X)
....................(0=0) & (v_sep_fail_1264_sep_105_sep_0($296)) -> 1=0.
(($296-1=0) & ($297-$298<0)) & (v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0($298,$297)) -> v_sep_fail_1264_sep_105_sep_0($296).
(($299>0) & (-$299+$300+1=0) & ($301+$302-$303=0)) & (v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0($300,$301)) & (v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0($299,$302)) & (v_sep_sigma_1032_sep_66_sep_1($299)) -> v_sep_sigma_1032_sep_66_sep_2_sep_100_sep_0($299,$303).
(($304=0) & ($305<=0)) & (v_sep_sigma_1032_sep_89_sep_1($305)) -> v_sep_sigma_1032_sep_89_sep_2_sep_92_sep_0($305,$304).
(($305+1>0) & (-$305+$306-1=0) & (-$305+$307-1=0)) & (v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0($307,$308)) & (v_sep_sigma_1032_sep_66_sep_1($306)) -> v_sep_sigma_1032_sep_89_sep_1($305).
(0=0) & (v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0($309,$310)) -> v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_1_sep_85_sep_0($309,$310).
(($311>0) & (-$311+$312+1=0) & ($311+$313-$314=0)) & (v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0($312,$313)) & (v_sep_sum_1030_sep_71_sep_0($311)) -> v_sep_sum_1030_sep_71_sep_1_sep_83_sep_0($311,$314).
(($315=0) & ($316<=0)) & (v_sep_sum_1030_sep_74_sep_0($316)) -> v_sep_sum_1030_sep_74_sep_1_sep_77_sep_0($316,$315).
(($316+1>0) & (-$316+$317-1=0)) & (v_sep_sum_1030_sep_71_sep_0($317)) -> v_sep_sum_1030_sep_74_sep_0($316).
(0=0) & (v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0($311)) -> v_sep_sum_1030_sep_71_sep_0($311).
($309>0) & (v_sep_sigma_1032_sep_66_sep_1($309)) -> v_sep_sigma_1032_sep_66_sep_0_sep_69_sep_0($309).
0=0 -> v_sep_sigma_1032_sep_66_sep_1($299).

          |- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
        solution:
          P[<fail_1264@105:0>]($318:bool) = false
          P[<<sigma_1032@66:0>@69:0>]($358:int) = true
          P[<<<sigma_1032@66:0>@69:1>@85:0>]($331:int,$333:int) = ($331 <= $333)
          P[<sigma_1032@66:1>]($336:int) = true
          P[<<sigma_1032@66:2>@100:0>]($321:int,$323:int) = ($321 <= $323)
          P[<sigma_1032@89:1>]($339:int) = true
          P[<<sigma_1032@89:2>@92:0>]($326:int,$328:int) = (0 <= $328)
          P[<sum_1030@71:0>]($352:int) = true
          P[<<sum_1030@71:1>@83:0>]($342:int,$344:int) = ($342 <= $344)
          P[<sum_1030@74:0>]($355:int) = true
          P[<<sum_1030@74:1>@77:0>]($347:int,$349:int) = (0 <= $349)
        
      end HcSolver.solve_ub(86855)[4] (0.176973 sec.)
      begin HcSolver.check_validity(87409)[4]
        input:
          P[<fail_1264@105:0>](<fail_1264@105:0>:bool)|- bot
          
          P[<<sigma_1032@66:2>@100:0>](<f_main_1261@102:0>:int,<f_main_1261@102:2>:int),
          ((<f_main_1261@102:2> < <f_main_1261@102:0>) && <fail_1264@105:0>)
          |- P[<fail_1264@105:0>](<fail_1264@105:0>:bool)
          
          P[<sigma_1032@66:1>](<sigma_1032@66:1>:int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>](<sigma_1032@66:1>:int,var171:int),
          P[<<sigma_1032@89:2>@92:0>]((-1 + <sigma_1032@66:1>):int,(<<sigma_1032@66:2>@100:0> + (-1 * var171)):int),
          (<sigma_1032@66:1> > 0) |- P[<<sigma_1032@66:2>@100:0>](<sigma_1032@66:1>:int,
                                                                  <<sigma_1032@66:2>@100:0>:int)
          
          P[<sigma_1032@89:1>](<sigma_1032@89:1>:int), ((<<sigma_1032@89:2>@92:0> = 0) && (<sigma_1032@89:1> <= 0))
          |- P[<<sigma_1032@89:2>@92:0>](<sigma_1032@89:1>:int,<<sigma_1032@89:2>@92:0>:int)
          
          P[<sigma_1032@66:1>]((1 + <sigma_1032@89:1>):int),
          P[<<<sigma_1032@66:0>@69:1>@85:0>]((1 + <sigma_1032@89:1>):int,<f_sigma_1259@87:3>:int),
          ((1 + <sigma_1032@89:1>) > 0) |- P[<sigma_1032@89:1>](<sigma_1032@89:1>:int)
          
          P[<<sum_1030@71:1>@83:0>](<<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)|- P[<<<sigma_1032@66:0>@69:1>@85:0>](
          <<sigma_1032@66:0>@69:0>:int,<<<sigma_1032@66:0>@69:1>@85:0>:int)
          
          P[<sum_1030@71:0>](<sum_1030@71:0>:int),
          P[<<sum_1030@74:1>@77:0>]((-1 + <sum_1030@71:0>):int,(<<sum_1030@71:1>@83:0> + (-1 * <sum_1030@71:0>)):int),
          (<sum_1030@71:0> > 0) |- P[<<sum_1030@71:1>@83:0>](<sum_1030@71:0>:int,
                                                             <<sum_1030@71:1>@83:0>:int)
          
          P[<sum_1030@74:0>](<sum_1030@74:0>:int), ((<<sum_1030@74:1>@77:0> = 0) && (<sum_1030@74:0> <= 0))
          |- P[<<sum_1030@74:1>@77:0>](<sum_1030@74:0>:int,<<sum_1030@74:1>@77:0>:int)
          
          P[<sum_1030@71:0>]((1 + <sum_1030@74:0>):int), ((1 + <sum_1030@74:0>) > 0)
          |- P[<sum_1030@74:0>](<sum_1030@74:0>:int)
          
          P[<<sigma_1032@66:0>@69:0>](<sum_1030@71:0>:int)|- P[<sum_1030@71:0>](<sum_1030@71:0>:int)
          
          P[<sigma_1032@66:1>](<<sigma_1032@66:0>@69:0>:int), (<<sigma_1032@66:0>@69:0> > 0)
          |- P[<<sigma_1032@66:0>@69:0>](<<sigma_1032@66:0>@69:0>:int)
          
          |- P[<sigma_1032@66:1>](<sigma_1032@66:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(87409)[4] (0.006999 sec.)
      solution:
        P[<fail_1264@105:0>]($318:bool) = false
        P[<<sigma_1032@66:0>@69:0>]($358:int) = true
        P[<<<sigma_1032@66:0>@69:1>@85:0>]($331:int,$333:int) = ($331 <= $333)
        P[<sigma_1032@66:1>]($336:int) = true
        P[<<sigma_1032@66:2>@100:0>]($321:int,$323:int) = ($321 <= $323)
        P[<sigma_1032@89:1>]($339:int) = true
        P[<<sigma_1032@89:2>@92:0>]($326:int,$328:int) = (0 <= $328)
        P[<sum_1030@71:0>]($352:int) = true
        P[<<sum_1030@71:1>@83:0>]($342:int,$344:int) = ($342 <= $344)
        P[<sum_1030@74:0>]($355:int) = true
        P[<<sum_1030@74:1>@77:0>]($347:int,$349:int) = (0 <= $349)
    end YhornInterface.solve(86854)[3] (0.184971 sec.)
    
  end RefTypeInfer.infer_etrs(32857)[2] (0.513922 sec.)
  refinement types:
    main_1257: X
    f_1262: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    sigma_1032: (v1:int -> (v2:{v2:int | (v1 <= v2)} -> X) -> X) -> v5:int -> (v6:{v6:int | (v5 <= v6)} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (v1 <= v2)} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (v1 <= v2)} -> X) -> X
    f_sum_1258: v1:int -> (v2:int -> X) -> v4:int -> X
    f_sigma_1259: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    sigma_1032: (v1:int -> (v2:int -> X) -> X) -> v5:int -> (v6:{v6:int | (v5 <= v6)} -> X) -> X
    f_sigma_1260: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1261: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1264: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1263: var297:int -> var296:unit -> X
  abstraction types:
    main_1257: X
    f_1262: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    sigma_1032: (var298:int -> (var299:int[var299 -> (var298 <= var299)] -> X) -> X) ->
                var302:int -> (var303:int[var303 -> (var302 <= var303)] -> X) -> X
    sum_1030: var306:int -> (var307:int[var307 -> (var306 <= var307)] -> X) -> X
    f_sum_1258: v1:int -> (v2:int -> X) -> v4:int -> X
    f_sigma_1259: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> X) -> v8:int -> X
    f_sigma_1260: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1261: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1264: v1:bool -> (v2:unit -> X) -> X
    f_1263: var297:int -> var296:unit -> X
  
end AbsTypeInfer.refine(32856)[1] (0.517922 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1257
  main_1257 -> (rand_int f_1262)
  f_1262 x_1232 -> (main_1035 x_1232 (f_1263 x_1232))
  f_1263 x_1232 x_1229 -> end
  f_main_1261 n_1036 k_main_1194 x_1197 when (x_1197 >= n_1036) -> (k_main_1194 ())
  f_main_1261 n_1036 k_main_1194 x_1197 when (not (x_1197 >= n_1036)) -> (fail_1264 true k_main_1194)
  f_sigma_1259 n_1034 f_1033 k_sigma_1145 x_1148 ->
      (sigma_1032 f_1033 (n_1034 - 1) (f_sigma_1260 n_1034 x_1148 k_sigma_1145))
  f_sigma_1260 n_1034 x_1148 k_sigma_1145 x_1149 -> (k_sigma_1145 (x_1148 + x_1149))
  f_sum_1258 n_1031 k_sum_1098 x_1102 -> (k_sum_1098 (n_1031 + x_1102))
  fail_1264 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1194 -> (sigma_1032 sum_1030 n_1036 (f_main_1261 n_1036 k_main_1194))
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (n_1034 <= 0) -> (k_sigma_1145 0)
  sigma_1032 f_1033 n_1034 k_sigma_1145 when (not (n_1034 <= 0)) ->
      (f_1033 n_1034 (f_sigma_1259 n_1034 f_1033 k_sigma_1145))
  sum_1030 n_1031 k_sum_1098 when (n_1031 <= 0) -> (k_sum_1098 0)
  sum_1030 n_1031 k_sum_1098 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1258 n_1031 k_sum_1098))
Types:
  main_1257 : X
  fail_1264 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sigma_1032 : ((x_2:int[x_2 >= 1] -> (x_4:int[x_2 <= x_4] -> X) -> X) -> x_7:int -> (x_9:int[x_7 <= x_9] -> X) -> X)
  sum_1030 : (x_1:int[x_1 >= 1] -> (x_3:int[x_1 <= x_3] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  sigma: ((x_4:{x_4:int | x_4 >= 1} -> {x_5:int | x_4 <= x_5}) -> (x_2:int -> {x_3:int | x_2 <= x_3}))
  sum: ((x_1:{x_1:int | x_1 >= 1} -> {x_2:int | x_1 <= x_2}) /\ (x_3:{x_3:int | x_3 < 1} -> {x_4:int | x_3 <= x_4}))

cycles: 3
total: 1.306 sec
  abst: 0.012 sec
  mc: 0.032 sec
  refine: 1.003 sec
    exparam: 0.112 sec
