MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi a-copy-print.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 des_1036 x_1037 =
   let u_1097 = des_1036 i_1034 
   in
   let a_1038 j_1039 = if i_1034 = j_1039 then
                         x_1037
                       else
                         des_1036 i_1034 
   in
     a_1038 
 in
 let print_int_1040 n_1041 = () 
 in
 let f_1042 m_1043 src_1044 des_1045 =
   let rec bcopy_1046 m_1047 src_1048 des_1049 i_1050 =
     if i_1050 >= m_1047 then
       des_1049
     else
       let des_1051 = update_1033 i_1050 m_1047 des_1049 (src_1048 i_1050) 
       in
         bcopy_1046 m_1047 src_1048 des_1051 (i_1050 + 1) 
   in
   let rec print_array_1052 m_1053 array_1054 i_1055 =
     if i_1055 >= m_1053 then
       ()
     else
       let u_1244 = print_int_1040 (des_1045 i_1055) 
       in
         print_array_1052 m_1053 array_1054 (i_1055 + 1) 
   in
   let array_1056 = bcopy_1046 m_1043 src_1044 des_1045 0 
   in
     print_array_1052 m_1043 array_1056 0 
 in
 let main_1057 n_1058 =
   let array1_1059 = make_array_1030 n_1058 
   in
   let array2_1060 = make_array_1030 n_1058 
   in
     if n_1058 > 0 then
       f_1042 n_1058 array1_1059 array2_1060
     else
       () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 des_1036 x_1037 =
   let u_1097 = des_1036 i_1034 
   in
   let a_1038 j_1039 = if i_1034 = j_1039 then
                         x_1037
                       else
                         des_1036 i_1034 
   in
     a_1038 
 in
 let print_int_1040 n_1041 = () 
 in
 let f_1042 m_1043 src_1044 des_1045 =
   let rec bcopy_1046 m_1047 src_1048 des_1049 i_1050 =
     if i_1050 >= m_1047 then
       des_1049
     else
       let des_1051 = update_1033 i_1050 m_1047 des_1049 (src_1048 i_1050) 
       in
         bcopy_1046 m_1047 src_1048 des_1051 (i_1050 + 1) 
   in
   let rec print_array_1052 m_1053 array_1054 i_1055 =
     if i_1055 >= m_1053 then
       ()
     else
       let u_1244 = print_int_1040 (des_1045 i_1055) 
       in
         print_array_1052 m_1053 array_1054 (i_1055 + 1) 
   in
   let array_1056 = bcopy_1046 m_1043 src_1044 des_1045 0 
   in
     print_array_1052 m_1043 array_1056 0 
 in
 let main_1057 n_1058 =
   let array1_1059 = make_array_1030 n_1058 
   in
   let array2_1060 = make_array_1030 n_1058 
   in
     if n_1058 > 0 then
       f_1042 n_1058 array1_1059 array2_1060
     else
       () 
 in
 let main_1285 = let arg1_1284 = rand_int () 
                 in
                   main_1057 arg1_1284 
 in
   ()

abst_list::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let update_1033 (i_1034:int) (n_1035:int) (des_1036:(int -> int)) (x_1037:int) =
   let u_1097 = des_1036 i_1034 
   in
   let a_1038 (j_1039:int) = if i_1034 = j_1039 then
                               x_1037
                             else
                               des_1036 i_1034 
   in
     a_1038 
 in
 let print_int_1040 (n_1041:int) = () 
 in
 let f_1042 (m_1043:int) (src_1044:(int -> int)) (des_1045:(int -> int)) =
   let rec bcopy_1046 (m_1047:int) (src_1048:(int -> int)) (des_1049:(
     int -> int)) (i_1050:int) =
     if i_1050 >= m_1047 then
       des_1049
     else
       let des_1051 = update_1033 i_1050 m_1047 des_1049 (src_1048 i_1050) 
       in
         bcopy_1046 m_1047 src_1048 des_1051 (i_1050 + 1) 
   in
   let rec print_array_1052 (m_1053:int) (array_1054:(int -> int)) (i_1055:int) =
     if i_1055 >= m_1053 then
       ()
     else
       let u_1244 = print_int_1040 (des_1045 i_1055) 
       in
         print_array_1052 m_1053 array_1054 (i_1055 + 1) 
   in
   let array_1056 = bcopy_1046 m_1043 src_1044 des_1045 0 
   in
     print_array_1052 m_1043 array_1056 0 
 in
 let main_1057 (n_1058:int) =
   let array1_1059 = make_array_1030 n_1058 
   in
   let array2_1060 = make_array_1030 n_1058 
   in
     if n_1058 > 0 then
       f_1042 n_1058 array1_1059 array2_1060
     else
       () 
 in
 let main_1285 = let arg1_1284 = rand_int () 
                 in
                   main_1057 arg1_1284 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1315:(int -> X)) =
   let k_make_array_u_1332 (x_1318:unit) = k_make_array_1315 0 
   in
   let k_make_array_u_1321 (b_1333:bool) =
     if b_1333 then
       k_make_array_u_1332 ()
     else
       {|fail|} () k_make_array_u_1332 
   in
     if 0 <= i_1032 then
       k_make_array_u_1321 (i_1032 < n_1031)
     else
       k_make_array_u_1321 false 
 in
 let update_1033
   (i_1034:int) (n_1035:int) (des_1036:(int -> ((int -> X) -> X))) (x_1037:int) (k_update_1380:(
   (int -> ((int -> X) -> X)) -> X)) =
   des_1036 i_1034
     (fun x_1386 ->
        k_update_1380
          (let a_1038 (j_1039:int) (k_update_a_1401:(int -> X)) =
             if i_1034 = j_1039 then
               k_update_a_1401 x_1037
             else
               des_1036 i_1034 k_update_a_1401 
           in
             a_1038)) 
 in
 let print_int_1040 (n_1041:int) (k_print_int_1432:(unit -> X)) = k_print_int_1432 () 
 in
 let f_1042
   (m_1043:int) (src_1044:(int -> ((int -> X) -> X))) (des_1045:(int -> ((int -> X) -> X))) (k_f_1476:(
   unit -> X)) =
   let rec bcopy_1046
     (m_1047:int) (src_1048:(int -> ((int -> X) -> X))) (des_1049:(int -> ((int -> X) -> X))) (i_1050:int) (k_f_bcopy_1535:(
     (int -> ((int -> X) -> X)) -> X)) =
     if i_1050 >= m_1047 then
       k_f_bcopy_1535 des_1049
     else
       src_1048 i_1050
         (fun x_1591 ->
            update_1033 i_1050 m_1047 des_1049 x_1591
              (fun x_1547 -> bcopy_1046 m_1047 src_1048 x_1547 (i_1050 + 1) k_f_bcopy_1535)) 
   in
   let rec print_array_1052
     (m_1053:int) (array_1054:(int -> ((int -> X) -> X))) (i_1055:int) (k_f_print_array_1664:(
     unit -> X)) =
     if i_1055 >= m_1053 then
       k_f_print_array_1664 ()
     else
       des_1045 i_1055
         (fun x_1687 ->
            print_int_1040 x_1687 (fun x_1667 -> print_array_1052 m_1053 array_1054 (i_1055 + 1) k_f_print_array_1664)) 
   in
     bcopy_1046 m_1043 src_1044 des_1045 0 (fun x_1715 -> print_array_1052 m_1043 x_1715 0 k_f_1476) 
 in
 let main_1057 (n_1058:int) (k_main_1787:(unit -> X)) =
   if n_1058 > 0 then
     f_1042 n_1058 (make_array_1030 n_1058) (make_array_1030 n_1058) k_main_1787
   else
     k_main_1787 () 
 in
   rand_int_cps () (fun x_1859 -> main_1057 x_1859 (fun x_1856 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1884
  main_1884 -> (rand_int f_1891)
  a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 when (i_1034 = j_1039) -> (k_update_a_1401 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 when (
      not (i_1034 = j_1039)) -> (des_1036 i_1034 k_update_a_1401)
  bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 when (i_1050 >= m_1047) -> (k_f_bcopy_1535 des_1049)
  bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 when (
      not (i_1050 >= m_1047)) -> (src_1048 i_1050 (f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048))
  f_1042 m_1043 src_1044 des_1045 k_f_1476 ->
      (bcopy_1046 m_1043 m_1043 src_1044 des_1045 0 (f_f_1890 m_1043 des_1045 k_f_1476))
  f_1891 x_1859 -> (main_1057 x_1859 (f_1892 x_1859))
  f_1892 x_1859 x_1856 -> end
  f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048 x_1591 ->
      (update_1033 i_1050 m_1047 des_1049 x_1591 (f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048))
  f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048 x_1547 ->
      (bcopy_1046 m_1043 m_1047 src_1048 x_1547 (i_1050 + 1) k_f_bcopy_1535)
  f_f_1890 m_1043 des_1045 k_f_1476 x_1715 -> (print_array_1052 m_1043 des_1045 m_1043 x_1715 0 k_f_1476)
  f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664 x_1687 ->
      (print_int_1040 x_1687 (f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664))
  f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664 x_1667 ->
      (print_array_1052 m_1043 des_1045 m_1053 array_1054 (i_1055 + 1) k_f_print_array_1664)
  f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380 x_1386 ->
      (k_update_1380 (a_1038 i_1034 n_1035 x_1037 x_1386 des_1036))
  fail_1893 b k -> {fail} => (k ())
  k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 when b_1333 ->
      (k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 ())
  k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 when (not b_1333) ->
      (fail_1893 true (k_make_array_u_1332 i_1032 n_1031 k_make_array_1315))
  k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 x_1318 -> (k_make_array_1315 0)
  main_1057 n_1058 k_main_1787 when (n_1058 > 0) ->
      (f_1042 n_1058 (make_array_1030 n_1058) (make_array_1030 n_1058) k_main_1787)
  main_1057 n_1058 k_main_1787 when (not (n_1058 > 0)) -> (k_main_1787 ())
  make_array_1030 n_1031 i_1032 k_make_array_1315 when (0 <= i_1032) ->
      (k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1315 when (not (0 <= i_1032)) ->
      (k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 false)
  print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 when (
      i_1055 >= m_1053) -> (k_f_print_array_1664 ())
  print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 when (
      not (i_1055 >= m_1053)) ->
      (des_1045 i_1055 (f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664))
  print_int_1040 n_1041 k_print_int_1432 -> (k_print_int_1432 ())
  update_1033 i_1034 n_1035 des_1036 x_1037 k_update_1380 ->
      (des_1036 i_1034 (f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380))
Types:
  main_1884 : X
  bcopy_1046 : (int ->
                int ->
                (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X)
  fail_1893 : (x_1:bool[x_1] -> (unit -> X) -> X)
  print_array_1052 : (int -> (int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1884 ... --> 
  f_1891 ... --> 
  main_1057 [1/2] ... --> 
  f_1042 ... --> 
  bcopy_1046 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1321 [1/2] ... --> 
  k_make_array_u_1332 ... --> 
  f_bcopy_1886 ... --> 
  update_1033 ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1321 [2/2] ... --> 
  fail_1893 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(330)[1]
  program:
    main_1884  | true = ((Random.int 0) f_1891)
    a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 | (
    i_1034 = j_1039) = (k_update_a_1401 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 | (
    not (i_1034 = j_1039)) = (des_1036 i_1034
                                       k_update_a_1401)
    bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 | (
    i_1050 >= m_1047) = (k_f_bcopy_1535 des_1049)
    bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 | (
    not (i_1050 >= m_1047)) = (src_1048 i_1050
                                        (f_bcopy_1886 i_1050
                                                      m_1043
                                                      m_1047
                                                      des_1049
                                                      k_f_bcopy_1535
                                                      src_1048))
    f_1042 m_1043 src_1044 des_1045 k_f_1476 | true = (bcopy_1046
                                                         m_1043
                                                         m_1043
                                                         src_1044
                                                         des_1045
                                                         0
                                                         (f_f_1890 m_1043
                                                                   des_1045
                                                                   k_f_1476))
    f_1891 x_1859 | true = (main_1057 x_1859
                                      (f_1892 x_1859))
    f_1892 x_1859 x_1856 | true = end
    f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048 x_1591 | true = (
    update_1033 i_1050
                m_1047
                des_1049
                x_1591
                (f_bcopy_1887 i_1050
                              m_1043
                              m_1047
                              x_1591
                              k_f_bcopy_1535
                              src_1048))
    f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048 x_1547 | true = (
    bcopy_1046 m_1043
               m_1047
               src_1048
               x_1547
               (i_1050 + 1)
               k_f_bcopy_1535)
    f_f_1890 m_1043 des_1045 k_f_1476 x_1715 | true = (print_array_1052 m_1043
                                                                    des_1045
                                                                    m_1043
                                                                    x_1715
                                                                    0
                                                                    k_f_1476)
    f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664 x_1687 | true = (
    print_int_1040 x_1687
                   (f_print_array_1889 i_1055
                                       m_1043
                                       m_1053
                                       x_1687
                                       array_1054
                                       des_1045
                                       k_f_print_array_1664))
    f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664 x_1667 | true = (
    print_array_1052 m_1043
                     des_1045
                     m_1053
                     array_1054
                     (i_1055 + 1)
                     k_f_print_array_1664)
    f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380 x_1386 | true = (
    k_update_1380 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1386
                          des_1036))
    fail_1893 b k | true = (fail ())
    k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 | b_1333 = (
    k_make_array_u_1332 i_1032
                        n_1031
                        k_make_array_1315
                        ())
    k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 | (not b_1333) = (
    fail_1893 true
              (k_make_array_u_1332 i_1032
                                   n_1031
                                   k_make_array_1315))
    k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 x_1318 | true = (
    k_make_array_1315 0)
    main_1057 n_1058 k_main_1787 | (n_1058 > 0) = (f_1042
                                                     n_1058
                                                     (make_array_1030 n_1058)
                                                     (make_array_1030 n_1058)
                                                     k_main_1787)
    main_1057 n_1058 k_main_1787 | (not (n_1058 > 0)) = (k_main_1787 ())
    make_array_1030 n_1031 i_1032 k_make_array_1315 | (0 <= i_1032) = (
    k_make_array_u_1321 i_1032
                        n_1031
                        k_make_array_1315
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1315 | (not (0 <= i_1032)) = (
    k_make_array_u_1321 i_1032
                        n_1031
                        k_make_array_1315
                        false)
    print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 | (
    i_1055 >= m_1053) = (k_f_print_array_1664 ())
    print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 | (
    not (i_1055 >= m_1053)) = (des_1045
                                 i_1055
                                 (f_print_array_1888 i_1055
                                                     m_1043
                                                     m_1053
                                                     array_1054
                                                     des_1045
                                                     k_f_print_array_1664))
    print_int_1040 n_1041 k_print_int_1432 | true = (k_print_int_1432 ())
    update_1033 i_1034 n_1035 des_1036 x_1037 k_update_1380 | true = (
    des_1036 i_1034
             (f_update_1885 i_1034
                            n_1035
                            x_1037
                            des_1036
                            k_update_1380))
    main_1884:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    bcopy_1046:int ->
               int ->
               (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
    f_1042:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> X
    f_1891:int -> X
    f_1892:int -> unit -> X
    f_bcopy_1886:int ->
                 int ->
                 int ->
                 (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_1887:int ->
                 int ->
                 int ->
                 int -> ((int -> (int -> X) -> X) -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> X
    f_f_1890:int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> X
    f_print_array_1888:int ->
                       int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> int -> X
    f_print_array_1889:int ->
                       int ->
                       int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> unit -> X
    f_update_1885:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1893:bool -> (unit -> X) -> X
    k_make_array_u_1321:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1332:int -> int -> (int -> X) -> unit -> X
    main_1057:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    print_array_1052:int -> (int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    print_int_1040:int -> (unit -> X) -> X
    update_1033:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1042,f_1891,f_1892,f_bcopy_1886,f_bcopy_1887,f_f_1890,f_print_array_1888,f_print_array_1889,f_update_1885,k_make_array_u_1321,k_make_array_u_1332,main_1057,make_array_1030,print_int_1040,update_1033
  counterexample: 0:0:0:0:1:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1891@4:0> = var2)
     [true.(<main_1057@6:0> = <f_1891@4:0>)
      [(<main_1057@6:0> > 0).(<f_1042@9:0> = <main_1057@6:0>)
       [true.((<bcopy_1046@11:0> = <f_1042@9:0>) && ((<bcopy_1046@11:1> = <f_1042@9:0>) && (<bcopy_1046@11:4> = 0)))
        [(not (<bcopy_1046@11:4> >= <bcopy_1046@11:1>)).(<<bcopy_1046@11:2>@14:0> = <bcopy_1046@11:4>)
         [true.(<<f_1042@9:1>@16:0> = <<bcopy_1046@11:2>@14:0>)
          [true.((<make_array_1030@18:0> = <main_1057@6:0>) && (<make_array_1030@18:1> = <<f_1042@9:1>@16:0>))
           [(0 <= <make_array_1030@18:1>).
            ((<k_make_array_u_1321@21:0> = <make_array_1030@18:1>) &&
             ((<k_make_array_u_1321@21:1> = <make_array_1030@18:0>) &&
              (<k_make_array_u_1321@21:3> = (<make_array_1030@18:1> < <make_array_1030@18:0>))))
            [<k_make_array_u_1321@21:3>.
             ((<k_make_array_u_1332@24:0> = <k_make_array_u_1321@21:0>) &&
              ((<k_make_array_u_1332@24:1> = <k_make_array_u_1321@21:1>) && (<k_make_array_u_1332@24:3> = ())))
             [true.(<<k_make_array_u_1332@24:2>@26:0> = 0)
              [true.(<<k_make_array_u_1321@21:2>@28:0> = <<k_make_array_u_1332@24:2>@26:0>)
               [true.(<<make_array_1030@18:2>@30:0> = <<k_make_array_u_1321@21:2>@28:0>)
                [true.(<<<f_1042@9:1>@16:1>@32:0> = <<make_array_1030@18:2>@30:0>)
                 [true.(<<<bcopy_1046@11:2>@14:1>@34:0> = <<<f_1042@9:1>@16:1>@32:0>)
                  [true.
                   ((<f_bcopy_1886@36:0> = <bcopy_1046@11:4>) &&
                    ((<f_bcopy_1886@36:1> = <bcopy_1046@11:0>) &&
                     ((<f_bcopy_1886@36:2> = <bcopy_1046@11:1>) &&
                      (<f_bcopy_1886@36:6> = <<<bcopy_1046@11:2>@14:1>@34:0>))))
                   [true.
                    ((<update_1033@38:0> = <f_bcopy_1886@36:0>) &&
                     ((<update_1033@38:1> = <f_bcopy_1886@36:2>) && (<update_1033@38:3> = <f_bcopy_1886@36:6>)))
                    [true.(<<update_1033@38:2>@40:0> = <update_1033@38:0>)
                     [true.(<<f_bcopy_1886@36:3>@42:0> = <<update_1033@38:2>@40:0>)
                      [true.(<<bcopy_1046@11:3>@44:0> = <<f_bcopy_1886@36:3>@42:0>)
                       [true.(<<f_1042@9:2>@46:0> = <<bcopy_1046@11:3>@44:0>)
                        [true.
                         ((<make_array_1030@48:0> = <main_1057@6:0>) && (<make_array_1030@48:1> = <<f_1042@9:2>@46:0>))
                         [(0 <= <make_array_1030@48:1>).
                          ((<k_make_array_u_1321@51:0> = <make_array_1030@48:1>) &&
                           ((<k_make_array_u_1321@51:1> = <make_array_1030@48:0>) &&
                            (<k_make_array_u_1321@51:3> = (<make_array_1030@48:1> < <make_array_1030@48:0>))))
                          [(not <k_make_array_u_1321@51:3>).(<fail_1893@54:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(331)[2]
    horn clauses:
      P[<fail_1893@54:0>](<fail_1893@54:0>:bool)|- bot
      
      P[<k_make_array_u_1321@51:3>](<k_make_array_u_1321@51:0>:int,<k_make_array_u_1321@51:1>:int,false:bool),
      <fail_1893@54:0> |- P[<fail_1893@54:0>](<fail_1893@54:0>:bool)
      
      P[<make_array_1030@48:1>](<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:0>:int),
      ((0 <= <k_make_array_u_1321@51:0>) &&
       (<k_make_array_u_1321@51:3> = (<k_make_array_u_1321@51:0> < <k_make_array_u_1321@51:1>)))
      |- P[<k_make_array_u_1321@51:3>](<k_make_array_u_1321@51:0>:int,
                                       <k_make_array_u_1321@51:1>:int,
                                       <k_make_array_u_1321@51:3>:bool)
      
      P[<main_1057@6:0>](<make_array_1030@48:0>:int),
      P[<<f_1042@9:2>@46:0>](<make_array_1030@48:0>:int,<make_array_1030@48:1>:int), (
      <make_array_1030@48:0> > 0) |- P[<make_array_1030@48:1>](<make_array_1030@48:0>:int,
                                                               <make_array_1030@48:1>:int)
      
      P[<f_1042@9:0>](<f_1042@9:0>:int),
      P[<<bcopy_1046@11:3>@44:0>](<f_1042@9:0>:int,<f_1042@9:0>:int,<<f_1042@9:2>@46:0>:int)|- P[<<f_1042@9:2>@46:0>](
      <f_1042@9:0>:int,<<f_1042@9:2>@46:0>:int)
      
      P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
      P[<<f_bcopy_1886@36:3>@42:0>](<<bcopy_1046@11:2>@14:0>:int,<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
      (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
      |- P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                     <<bcopy_1046@11:3>@44:0>:int)
      
      P[<f_bcopy_1886@36:6>](<f_bcopy_1886@36:0>:int,<f_bcopy_1886@36:1>:int,<f_bcopy_1886@36:2>:int,<update_1033@38:3>:int),
      P[<<update_1033@38:2>@40:0>](<f_bcopy_1886@36:0>:int,<f_bcopy_1886@36:2>:int,<<f_bcopy_1886@36:3>@42:0>:int)|- P[<<f_bcopy_1886@36:3>@42:0>](
      <f_bcopy_1886@36:0>:int,<f_bcopy_1886@36:1>:int,<f_bcopy_1886@36:2>:int,
      <<f_bcopy_1886@36:3>@42:0>:int)
      
      P[<update_1033@38:3>](<update_1033@38:0>:int,<update_1033@38:1>:int,<update_1033@38:3>:int),
      (<<update_1033@38:2>@40:0> = <update_1033@38:0>)
      |- P[<<update_1033@38:2>@40:0>](<update_1033@38:0>:int,<update_1033@38:1>:int,
                                      <<update_1033@38:2>@40:0>:int)
      
      P[<f_bcopy_1886@36:6>](<update_1033@38:0>:int,<f_bcopy_1886@36:1>:int,<update_1033@38:1>:int,<update_1033@38:3>:int)|- P[<update_1033@38:3>](
      <update_1033@38:0>:int,<update_1033@38:1>:int,<update_1033@38:3>:int)
      
      P[<bcopy_1046@11:4>](<f_bcopy_1886@36:1>:int,<f_bcopy_1886@36:2>:int,<f_bcopy_1886@36:0>:int),
      P[<<<bcopy_1046@11:2>@14:1>@34:0>](<f_bcopy_1886@36:1>:int,<f_bcopy_1886@36:2>:int,<f_bcopy_1886@36:0>:int,<f_bcopy_1886@36:6>:int),
      (<f_bcopy_1886@36:0> < <f_bcopy_1886@36:2>)
      |- P[<f_bcopy_1886@36:6>](<f_bcopy_1886@36:0>:int,<f_bcopy_1886@36:1>:int,
                                <f_bcopy_1886@36:2>:int,<f_bcopy_1886@36:6>:int)
      
      P[<f_1042@9:0>](<bcopy_1046@11:0>:int),
      P[<<<f_1042@9:1>@16:1>@32:0>](<bcopy_1046@11:0>:int,<<bcopy_1046@11:2>@14:0>:int,<<<bcopy_1046@11:2>@14:1>@34:0>:int),
      (<bcopy_1046@11:0> = <bcopy_1046@11:1>)
      |- P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                            <<bcopy_1046@11:2>@14:0>:int,
                                            <<<bcopy_1046@11:2>@14:1>@34:0>:int)
      
      P[<main_1057@6:0>](<f_1042@9:0>:int),
      P[<<make_array_1030@18:2>@30:0>](<f_1042@9:0>:int,<<f_1042@9:1>@16:0>:int,<<<f_1042@9:1>@16:1>@32:0>:int),
      P[<f_1042@9:0>](<f_1042@9:0>:int), (<f_1042@9:0> > 0)
      |- P[<<<f_1042@9:1>@16:1>@32:0>](<f_1042@9:0>:int,<<f_1042@9:1>@16:0>:int,
                                       <<<f_1042@9:1>@16:1>@32:0>:int)
      
      P[<make_array_1030@18:1>](<make_array_1030@18:0>:int,<make_array_1030@18:1>:int),
      P[<<k_make_array_u_1321@21:2>@28:0>](<make_array_1030@18:1>:int,<make_array_1030@18:0>:int,<<make_array_1030@18:2>@30:0>:int),
      (0 <= <make_array_1030@18:1>)
      |- P[<<make_array_1030@18:2>@30:0>](<make_array_1030@18:0>:int,
                                          <make_array_1030@18:1>:int,
                                          <<make_array_1030@18:2>@30:0>:int)
      
      P[<k_make_array_u_1321@21:3>](<k_make_array_u_1321@21:0>:int,<k_make_array_u_1321@21:1>:int,true:bool),
      P[<<k_make_array_u_1332@24:2>@26:0>](<k_make_array_u_1321@21:0>:int,<k_make_array_u_1321@21:1>:int,<<k_make_array_u_1321@21:2>@28:0>:int)|- P[<<k_make_array_u_1321@21:2>@28:0>](
      <k_make_array_u_1321@21:0>:int,<k_make_array_u_1321@21:1>:int,<<k_make_array_u_1321@21:2>@28:0>:int)
      
      P[<k_make_array_u_1332@24:3>](<k_make_array_u_1332@24:0>:int,<k_make_array_u_1332@24:1>:int,<k_make_array_u_1332@24:3>:unit),
      (<<k_make_array_u_1332@24:2>@26:0> = 0)
      |- P[<<k_make_array_u_1332@24:2>@26:0>](<k_make_array_u_1332@24:0>:int,
                                              <k_make_array_u_1332@24:1>:int,
                                              <<k_make_array_u_1332@24:2>@26:0>:int)
      
      P[<k_make_array_u_1321@21:3>](<k_make_array_u_1332@24:0>:int,<k_make_array_u_1332@24:1>:int,true:bool)|- P[<k_make_array_u_1332@24:3>](
      <k_make_array_u_1332@24:0>:int,<k_make_array_u_1332@24:1>:int,<k_make_array_u_1332@24:3>:unit)
      
      P[<make_array_1030@18:1>](<k_make_array_u_1321@21:1>:int,<k_make_array_u_1321@21:0>:int),
      ((0 <= <k_make_array_u_1321@21:0>) &&
       (<k_make_array_u_1321@21:3> = (<k_make_array_u_1321@21:0> < <k_make_array_u_1321@21:1>)))
      |- P[<k_make_array_u_1321@21:3>](<k_make_array_u_1321@21:0>:int,
                                       <k_make_array_u_1321@21:1>:int,
                                       <k_make_array_u_1321@21:3>:bool)
      
      P[<main_1057@6:0>](<make_array_1030@18:0>:int),
      P[<<f_1042@9:1>@16:0>](<make_array_1030@18:0>:int,<make_array_1030@18:1>:int), (
      <make_array_1030@18:0> > 0) |- P[<make_array_1030@18:1>](<make_array_1030@18:0>:int,
                                                               <make_array_1030@18:1>:int)
      
      P[<f_1042@9:0>](<f_1042@9:0>:int),
      P[<<bcopy_1046@11:2>@14:0>](<f_1042@9:0>:int,<f_1042@9:0>:int,<<f_1042@9:1>@16:0>:int)|- P[<<f_1042@9:1>@16:0>](
      <f_1042@9:0>:int,<<f_1042@9:1>@16:0>:int)
      
      P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
      (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
      |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                     <<bcopy_1046@11:2>@14:0>:int)
      
      P[<f_1042@9:0>](<bcopy_1046@11:0>:int), ((<bcopy_1046@11:4> = 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))
      |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                              <bcopy_1046@11:4>:int)
      
      P[<main_1057@6:0>](<f_1042@9:0>:int), (<f_1042@9:0> > 0) |- P[<f_1042@9:0>](<f_1042@9:0>:int)
      
      P[<f_1891@4:0>](<main_1057@6:0>:int)|- P[<main_1057@6:0>](<main_1057@6:0>:int)
      
      |- P[<f_1891@4:0>](<f_1891@4:0>:int)
    call trees:
      <main_1884@1>
        <f_1891@4>
          <main_1057@6>
            <f_1042@9>
              <bcopy_1046@11>
              </<bcopy_1046@11:2>@14>
            </<f_1042@9:1>@16>
            <make_array_1030@18>
              <k_make_array_u_1321@21>
                <k_make_array_u_1332@24>
                </<k_make_array_u_1332@24:2>@26>
              </<k_make_array_u_1321@21:2>@28>
            </<make_array_1030@18:2>@30>
            <<<f_1042@9:1>@16:1>@32>
              <<<bcopy_1046@11:2>@14:1>@34>
                <f_bcopy_1886@36>
                  <update_1033@38>
                  </<update_1033@38:2>@40>
                </<f_bcopy_1886@36:3>@42>
              </<bcopy_1046@11:3>@44>
            </<f_1042@9:2>@46>
            <make_array_1030@48>
              <k_make_array_u_1321@51>
                <fail_1893@54>
    inlined horn clauses:
      P[<fail_1893@54:0>](<fail_1893@54:0>:bool)|- bot
      
      P[<<bcopy_1046@11:3>@44:0>](<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:0>:int),
      ((0 <= <k_make_array_u_1321@51:0>) &&
       ((<k_make_array_u_1321@51:1> > 0) &&
        ((<k_make_array_u_1321@51:0> >= <k_make_array_u_1321@51:1>) && <fail_1893@54:0>)))
      |- P[<fail_1893@54:0>](<fail_1893@54:0>:bool)
      
      P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int,var6:int),
      P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
      (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)
      |- P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                     <<bcopy_1046@11:3>@44:0>:int)
      
      P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:0>:int,<<bcopy_1046@11:2>@14:0>:int),
      ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
       ((0 <= <<bcopy_1046@11:2>@14:0>) &&
        ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
         ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))))
      |- P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                            <<bcopy_1046@11:2>@14:0>:int,
                                            <<<bcopy_1046@11:2>@14:1>@34:0>:int)
      
      P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
      (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
      |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                     <<bcopy_1046@11:2>@14:0>:int)
      
       ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
      |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                              <bcopy_1046@11:4>:int)
    begin ParamSubstInfer.infer(4672)[3]
      
    end ParamSubstInfer.infer(4672)[3] (0.050992 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(4674)[3]
      
    end RefTypeInfer.elim_coeffs(4674)[3] (0.003000 sec.)
    begin GenHcSolver.solve(5313)[3]
      Horn clauses:
        P[<fail_1893@54:0>](<fail_1893@54:0>:bool)|- bot
        
        P[<<bcopy_1046@11:3>@44:0>](<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:0>:int),
        ((0 <= <k_make_array_u_1321@51:0>) &&
         ((<k_make_array_u_1321@51:1> > 0) &&
          ((<k_make_array_u_1321@51:0> >= <k_make_array_u_1321@51:1>) && <fail_1893@54:0>)))
        |- P[<fail_1893@54:0>](<fail_1893@54:0>:bool)
        
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int,var6:int),
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
        (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)
        |- P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                       <<bcopy_1046@11:3>@44:0>:int)
        
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:0>:int,<<bcopy_1046@11:2>@14:0>:int),
        ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
         ((0 <= <<bcopy_1046@11:2>@14:0>) &&
          ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
           ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))))
        |- P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                              <<bcopy_1046@11:2>@14:0>:int,
                                              <<<bcopy_1046@11:2>@14:1>@34:0>:int)
        
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
        (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
        |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                       <<bcopy_1046@11:2>@14:0>:int)
        
         ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                <bcopy_1046@11:4>:int)
      lower bounds:
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<bcopy_1046@11:4>:int) =
        ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int) =
        ((<<bcopy_1046@11:2>@14:0> = 0) &&
         ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
          ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int,<<<bcopy_1046@11:2>@14:1>@34:0>:int) =
        ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
         ((<<bcopy_1046@11:2>@14:0> = 0) &&
          ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
           ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:1> = <bcopy_1046@11:0>)))))
        P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int) =
        ((<<bcopy_1046@11:3>@44:0> = 0) &&
         ((<bcopy_1046@11:0> = <bcopy_1046@11:1>) &&
          ((<bcopy_1046@11:0> > 0) &&
           ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) && (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)))))
        P[<fail_1893@54:0>](<fail_1893@54:0>:bool) = false
      upper bounds:
        P[<fail_1893@54:0>](var8:bool) = true
      begin GenHcSolver.classify_pids(10253)[4]
        output:
          [<fail_1893@54:0>]
      end GenHcSolver.classify_pids(10253)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(10256)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(10257)[5]
          begin InterpProver.interpolate_fresh(10258)[6]
            begin InterpProver.interpolate_log(10259)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(10260)[8]
                begin InterpProver.interpolate_simplify(10261)[9]
                  begin InterpProver.interpolate_quick(10274)[10]
                    
                  end InterpProver.interpolate_quick(10274)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(10278)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(10278)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(10261)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(10260)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(10259)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(10258)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(10257)[5] (0.000000 sec.)
        output:
          P[<fail_1893@54:0>](<fail_1893@54:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(10256)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_1046@11:3>@44:0>](<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:0>:int),
        ((<k_make_array_u_1321@51:0> >= <k_make_array_u_1321@51:1>) &&
         ((<k_make_array_u_1321@51:1> > 0) && (0 <= <k_make_array_u_1321@51:0>))) |- bot
        
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int,var6:int),
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
        (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)
        |- P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                       <<bcopy_1046@11:3>@44:0>:int)
        
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:0>:int,<<bcopy_1046@11:2>@14:0>:int),
        ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
         ((0 <= <<bcopy_1046@11:2>@14:0>) &&
          ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
           ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))))
        |- P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                              <<bcopy_1046@11:2>@14:0>:int,
                                              <<<bcopy_1046@11:2>@14:1>@34:0>:int)
        
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
        (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
        |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                       <<bcopy_1046@11:2>@14:0>:int)
        
         ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                <bcopy_1046@11:4>:int)
      lower bounds:
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<bcopy_1046@11:4>:int) =
        ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int) =
        ((<<bcopy_1046@11:2>@14:0> = 0) &&
         ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
          ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int,<<<bcopy_1046@11:2>@14:1>@34:0>:int) =
        ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
         ((<<bcopy_1046@11:2>@14:0> = 0) &&
          ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
           ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:1> = <bcopy_1046@11:0>)))))
        P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int) =
        ((<<bcopy_1046@11:3>@44:0> = 0) &&
         ((<bcopy_1046@11:0> = <bcopy_1046@11:1>) &&
          ((<bcopy_1046@11:0> > 0) &&
           ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) && (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)))))
      upper bounds:
        P[<<bcopy_1046@11:3>@44:0>](var9:int,var10:int,var11:int) =
        ((var11 < var9) || ((var9 <= 0) || ((0 > var11) || (var9 <> var10))))
      begin GenHcSolver.classify_pids(16539)[4]
        output:
          [<<bcopy_1046@11:3>@44:0>]
      end GenHcSolver.classify_pids(16539)[4] (0.000000 sec.)
      lb:((<<bcopy_1046@11:3>@44:0> = 0) &&
          ((<bcopy_1046@11:0> = <bcopy_1046@11:1>) &&
           ((<bcopy_1046@11:0> > 0) &&
            ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) && (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)))))
      nub:(not
             ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) ||
              ((<bcopy_1046@11:0> <= 0) || ((0 > <<bcopy_1046@11:3>@44:0>) || (<bcopy_1046@11:0> <> <bcopy_1046@11:1>)))))
      begin ApronInterface.convex_hull_interpolate(16542)[4]
        lb:((<<bcopy_1046@11:3>@44:0> = 0) &&
            ((<bcopy_1046@11:0> = <bcopy_1046@11:1>) &&
             ((<bcopy_1046@11:0> > 0) &&
              ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) && (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)))))
        nub:(not
               ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) ||
                ((<bcopy_1046@11:0> <= 0) ||
                 ((0 > <<bcopy_1046@11:3>@44:0>) || (<bcopy_1046@11:0> <> <bcopy_1046@11:1>)))))
        lb':((<<bcopy_1046@11:3>@44:0> = 0) &&
             ((<bcopy_1046@11:0> = <bcopy_1046@11:1>) &&
              ((<bcopy_1046@11:0> > 0) &&
               ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) && (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)))))
        nub':(not
                ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) ||
                 ((<bcopy_1046@11:0> <= 0) ||
                  ((0 > <<bcopy_1046@11:3>@44:0>) || (<bcopy_1046@11:0> <> <bcopy_1046@11:1>)))))
        begin InterpProver.interpolate(16543)[5]
          begin InterpProver.interpolate_fresh(16544)[6]
            begin InterpProver.interpolate_log(16545)[7]
              input1: ((<<bcopy_1046@11:3>@44:0> = 0) &&
                       ((<bcopy_1046@11:0> = <bcopy_1046@11:1>) &&
                        ((<bcopy_1046@11:0> > 0) &&
                         ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) &&
                          (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)))))
              input2: (not
                         ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) ||
                          ((<bcopy_1046@11:0> <= 0) ||
                           ((0 > <<bcopy_1046@11:3>@44:0>) || (<bcopy_1046@11:0> <> <bcopy_1046@11:1>)))))
              begin InterpProver.interpolate_check(16546)[8]
                begin InterpProver.interpolate_simplify(16547)[9]
                  begin InterpProver.interpolate_quick(16790)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(16799)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(16800)[12]
                        begin CsisatInterface.interpolate_csisat_log(16801)[13]
                          input1: (0 = v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0 & v_sep_bcopy_1046_sep_11_sep_0 = v_sep_bcopy_1046_sep_11_sep_1 & 1 <= v_sep_bcopy_1046_sep_11_sep_0 & (1 + v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0) <= v_sep_bcopy_1046_sep_11_sep_0 & (1 + v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0) <= v_sep_bcopy_1046_sep_11_sep_1)
                          input2: (v_sep_bcopy_1046_sep_11_sep_0 = v_sep_bcopy_1046_sep_11_sep_1 & 0 <= v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0 & 1 <= v_sep_bcopy_1046_sep_11_sep_0 & v_sep_bcopy_1046_sep_11_sep_0 <= v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(16802)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(16802)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_1046_sep_11_sep_0 + 2*v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(16801)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_1046_sep_11_sep_0 + 2*v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_1046_sep_11_sep_0 + 2*v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(16800)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(16799)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(16790)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(16547)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(16546)[8] (0.003000 sec.)
              output: ((1 + <<bcopy_1046@11:3>@44:0>) <= <bcopy_1046@11:0>)
            end InterpProver.interpolate_log(16545)[7] (0.003999 sec.)
            
          end InterpProver.interpolate_fresh(16544)[6] (0.003999 sec.)
          
        end InterpProver.interpolate(16543)[5] (0.003999 sec.)
        output:
          P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int) =
          ((1 + <<bcopy_1046@11:3>@44:0>) <= <bcopy_1046@11:0>)
      end ApronInterface.convex_hull_interpolate(16542)[4] (0.003999 sec.)
      Horn clauses:
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int,var6:int),
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
        ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>) && ((1 + <<bcopy_1046@11:3>@44:0>) > <bcopy_1046@11:0>)) |- bot
        
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:0>:int,<<bcopy_1046@11:2>@14:0>:int),
        ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
         ((0 <= <<bcopy_1046@11:2>@14:0>) &&
          ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
           ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))))
        |- P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                              <<bcopy_1046@11:2>@14:0>:int,
                                              <<<bcopy_1046@11:2>@14:1>@34:0>:int)
        
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
        (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
        |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                       <<bcopy_1046@11:2>@14:0>:int)
        
         ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                <bcopy_1046@11:4>:int)
      lower bounds:
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<bcopy_1046@11:4>:int) =
        ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int) =
        ((<<bcopy_1046@11:2>@14:0> = 0) &&
         ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
          ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int,<<<bcopy_1046@11:2>@14:1>@34:0>:int) =
        ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
         ((<<bcopy_1046@11:2>@14:0> = 0) &&
          ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
           ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:1> = <bcopy_1046@11:0>)))))
      upper bounds:
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](var12:int,var13:int,var14:int,var15:int) = true
      begin GenHcSolver.classify_pids(20622)[4]
        output:
          [<<<bcopy_1046@11:2>@14:1>@34:0>]
      end GenHcSolver.classify_pids(20622)[4] (0.000000 sec.)
      lb:((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
          ((<<bcopy_1046@11:2>@14:0> = 0) &&
           ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
            ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:1> = <bcopy_1046@11:0>)))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(20625)[4]
        lb:((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
            ((<<bcopy_1046@11:2>@14:0> = 0) &&
             ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
              ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:1> = <bcopy_1046@11:0>)))))
        nub:false
        lb':((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
             ((<<bcopy_1046@11:2>@14:0> = 0) &&
              ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
               ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:1> = <bcopy_1046@11:0>)))))
        nub':false
        begin InterpProver.interpolate(20626)[5]
          begin InterpProver.interpolate_fresh(20627)[6]
            begin InterpProver.interpolate_log(20628)[7]
              input1: ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
                       ((<<bcopy_1046@11:2>@14:0> = 0) &&
                        ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
                         ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:1> = <bcopy_1046@11:0>)))))
              input2: false
              begin InterpProver.interpolate_check(20629)[8]
                begin InterpProver.interpolate_simplify(20630)[9]
                  begin InterpProver.interpolate_quick(20749)[10]
                    
                  end InterpProver.interpolate_quick(20749)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(20630)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(20629)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(20628)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(20627)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(20626)[5] (0.001000 sec.)
        output:
          P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int,<<<bcopy_1046@11:2>@14:1>@34:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(20625)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
        ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>) && ((1 + <<bcopy_1046@11:3>@44:0>) > <bcopy_1046@11:0>)) |- bot
        
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
        (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
        |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                       <<bcopy_1046@11:2>@14:0>:int)
        
         ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                <bcopy_1046@11:4>:int)
      lower bounds:
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<bcopy_1046@11:4>:int) =
        ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int) =
        ((<<bcopy_1046@11:2>@14:0> = 0) &&
         ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
          ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
      upper bounds:
        P[<<bcopy_1046@11:2>@14:0>](var16:int,var17:int,var18:int) = true
      begin GenHcSolver.classify_pids(23189)[4]
        output:
          [<<bcopy_1046@11:2>@14:0>]
      end GenHcSolver.classify_pids(23189)[4] (0.000000 sec.)
      lb:((<<bcopy_1046@11:2>@14:0> = 0) &&
          ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
           ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(23192)[4]
        lb:((<<bcopy_1046@11:2>@14:0> = 0) &&
            ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
             ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
        nub:false
        lb':((<<bcopy_1046@11:2>@14:0> = 0) &&
             ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
              ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
        nub':false
        begin InterpProver.interpolate(23193)[5]
          begin InterpProver.interpolate_fresh(23194)[6]
            begin InterpProver.interpolate_log(23195)[7]
              input1: ((<<bcopy_1046@11:2>@14:0> = 0) &&
                       ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
                        ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
              input2: false
              begin InterpProver.interpolate_check(23196)[8]
                begin InterpProver.interpolate_simplify(23197)[9]
                  begin InterpProver.interpolate_quick(23289)[10]
                    
                  end InterpProver.interpolate_quick(23289)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(23197)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(23196)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(23195)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(23194)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(23193)[5] (0.000000 sec.)
        output:
          P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int) = true
      end ApronInterface.convex_hull_interpolate(23192)[4] (0.000000 sec.)
      Horn clauses:
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
        ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>) && ((1 + <<bcopy_1046@11:3>@44:0>) > <bcopy_1046@11:0>)) |- bot
        
         ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                <bcopy_1046@11:4>:int)
      lower bounds:
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<bcopy_1046@11:4>:int) =
        ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
      upper bounds:
        P[<bcopy_1046@11:4>](var19:int,var20:int,var21:int) = ((var21 >= var20) || ((1 + var21) <= var19))
      begin GenHcSolver.classify_pids(24844)[4]
        output:
          [<bcopy_1046@11:4>]
      end GenHcSolver.classify_pids(24844)[4] (0.000000 sec.)
      lb:((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
      nub:(not ((<bcopy_1046@11:4> >= <bcopy_1046@11:1>) || ((1 + <bcopy_1046@11:4>) <= <bcopy_1046@11:0>)))
      begin ApronInterface.convex_hull_interpolate(24847)[4]
        lb:((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        nub:(not ((<bcopy_1046@11:4> >= <bcopy_1046@11:1>) || ((1 + <bcopy_1046@11:4>) <= <bcopy_1046@11:0>)))
        lb':((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        nub':(not ((<bcopy_1046@11:4> >= <bcopy_1046@11:1>) || ((1 + <bcopy_1046@11:4>) <= <bcopy_1046@11:0>)))
        begin InterpProver.interpolate(24848)[5]
          begin InterpProver.interpolate_fresh(24849)[6]
            begin InterpProver.interpolate_log(24850)[7]
              input1: ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
              input2: (not ((<bcopy_1046@11:4> >= <bcopy_1046@11:1>) || ((1 + <bcopy_1046@11:4>) <= <bcopy_1046@11:0>)))
              begin InterpProver.interpolate_check(24851)[8]
                begin InterpProver.interpolate_simplify(24852)[9]
                  begin InterpProver.interpolate_quick(24947)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(24956)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(24957)[12]
                        begin CsisatInterface.interpolate_csisat_log(24958)[13]
                          input1: (0 = v_sep_bcopy_1046_sep_11_sep_4 & v_sep_bcopy_1046_sep_11_sep_0 = v_sep_bcopy_1046_sep_11_sep_1 & 1 <= v_sep_bcopy_1046_sep_11_sep_0)
                          input2: ((1 + v_sep_bcopy_1046_sep_11_sep_0) <= (1 + v_sep_bcopy_1046_sep_11_sep_4) & (1 + v_sep_bcopy_1046_sep_11_sep_4) <= v_sep_bcopy_1046_sep_11_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(24959)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(24959)[14] (0.001000 sec.)
                          output: (-2*v_sep_bcopy_1046_sep_11_sep_0 + 2*v_sep_bcopy_1046_sep_11_sep_1) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(24958)[13] (0.001000 sec.)
                        after simplification: (-2*v_sep_bcopy_1046_sep_11_sep_0 + 2*v_sep_bcopy_1046_sep_11_sep_1) <= 0
                        after dnf conversion: (((-2*v_sep_bcopy_1046_sep_11_sep_0 + 2*v_sep_bcopy_1046_sep_11_sep_1) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(24957)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(24956)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(24947)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(24852)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(24851)[8] (0.002000 sec.)
              output: (<bcopy_1046@11:1> <= <bcopy_1046@11:0>)
            end InterpProver.interpolate_log(24850)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(24849)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(24848)[5] (0.002000 sec.)
        output:
          P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<bcopy_1046@11:4>:int) =
          (<bcopy_1046@11:1> <= <bcopy_1046@11:0>)
      end ApronInterface.convex_hull_interpolate(24847)[4] (0.002000 sec.)
      begin HcSolver.check_validity(25261)[4]
        input:
          P[<fail_1893@54:0>](<fail_1893@54:0>:bool)|- bot
          
          P[<<bcopy_1046@11:3>@44:0>](<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:0>:int),
          ((0 <= <k_make_array_u_1321@51:0>) &&
           ((<k_make_array_u_1321@51:1> > 0) &&
            ((<k_make_array_u_1321@51:0> >= <k_make_array_u_1321@51:1>) && <fail_1893@54:0>)))
          |- P[<fail_1893@54:0>](<fail_1893@54:0>:bool)
          
          P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int,var6:int),
          P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
          (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)
          |- P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                         <<bcopy_1046@11:3>@44:0>:int)
          
          P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:0>:int,<<bcopy_1046@11:2>@14:0>:int),
          ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
           ((0 <= <<bcopy_1046@11:2>@14:0>) &&
            ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
             ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))))
          |- P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,
                                                <bcopy_1046@11:1>:int,
                                                <<bcopy_1046@11:2>@14:0>:int,
                                                <<<bcopy_1046@11:2>@14:1>@34:0>:int)
          
          P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
          (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
          |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                         <<bcopy_1046@11:2>@14:0>:int)
          
           ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
          |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                  <bcopy_1046@11:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(25261)[4] (0.003000 sec.)
      solution:
        P[<fail_1893@54:0>](<fail_1893@54:0>:bool) = false
        P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int) =
        ((1 + <<bcopy_1046@11:3>@44:0>) <= <bcopy_1046@11:0>)
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int,<<<bcopy_1046@11:2>@14:1>@34:0>:int) =
        true
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int) = true
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<bcopy_1046@11:4>:int) =
        (<bcopy_1046@11:1> <= <bcopy_1046@11:0>)
    end GenHcSolver.solve(5313)[3] (0.105984 sec.)
    begin GenHcSolver.solve(26117)[3]
      Horn clauses:
        P[<fail_1893@54:0>](<fail_1893@54:0>:bool)|- bot
        
        P[<<bcopy_1046@11:3>@44:0>](<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:0>:int),
        ((0 <= <k_make_array_u_1321@51:0>) &&
         ((<k_make_array_u_1321@51:1> > 0) &&
          ((<k_make_array_u_1321@51:0> >= <k_make_array_u_1321@51:1>) && <fail_1893@54:0>)))
        |- P[<fail_1893@54:0>](<fail_1893@54:0>:bool)
        
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int,var6:int),
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
        (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)
        |- P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                       <<bcopy_1046@11:3>@44:0>:int)
        
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:0>:int,<<bcopy_1046@11:2>@14:0>:int),
        ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
         ((0 <= <<bcopy_1046@11:2>@14:0>) &&
          ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
           ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))))
        |- P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                              <<bcopy_1046@11:2>@14:0>:int,
                                              <<<bcopy_1046@11:2>@14:1>@34:0>:int)
        
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
        (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
        |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                       <<bcopy_1046@11:2>@14:0>:int)
        
         ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                <bcopy_1046@11:4>:int)
      lower bounds:
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<bcopy_1046@11:4>:int) =
        ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int) =
        ((<<bcopy_1046@11:2>@14:0> = 0) &&
         ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
          ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int,<<<bcopy_1046@11:2>@14:1>@34:0>:int) =
        ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
         ((<<bcopy_1046@11:2>@14:0> = 0) &&
          ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
           ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:1> = <bcopy_1046@11:0>)))))
        P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int) =
        ((<<bcopy_1046@11:3>@44:0> = 0) &&
         ((<bcopy_1046@11:0> = <bcopy_1046@11:1>) &&
          ((<bcopy_1046@11:0> > 0) &&
           ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) && (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)))))
        P[<fail_1893@54:0>](<fail_1893@54:0>:bool) = false
      upper bounds:
        P[<fail_1893@54:0>](var23:bool) = true
      begin GenHcSolver.classify_pids(31057)[4]
        output:
          [<fail_1893@54:0>]
      end GenHcSolver.classify_pids(31057)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(31060)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(31063)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(31063)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(31068)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(31068)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(31071)[5]
          begin InterpProver.interpolate_fresh(31072)[6]
            begin InterpProver.interpolate_log(31073)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(31074)[8]
                begin InterpProver.interpolate_simplify(31075)[9]
                  begin InterpProver.interpolate_quick(31090)[10]
                    
                  end InterpProver.interpolate_quick(31090)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(31094)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(31094)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(31075)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(31074)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(31073)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(31072)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(31071)[5] (0.001000 sec.)
        output:
          P[<fail_1893@54:0>](<fail_1893@54:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(31060)[4] (0.002000 sec.)
      Horn clauses:
        P[<<bcopy_1046@11:3>@44:0>](<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:0>:int),
        ((<k_make_array_u_1321@51:0> >= <k_make_array_u_1321@51:1>) &&
         ((<k_make_array_u_1321@51:1> > 0) && (0 <= <k_make_array_u_1321@51:0>))) |- bot
        
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int,var6:int),
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
        (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)
        |- P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                       <<bcopy_1046@11:3>@44:0>:int)
        
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:0>:int,<<bcopy_1046@11:2>@14:0>:int),
        ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
         ((0 <= <<bcopy_1046@11:2>@14:0>) &&
          ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
           ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))))
        |- P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                              <<bcopy_1046@11:2>@14:0>:int,
                                              <<<bcopy_1046@11:2>@14:1>@34:0>:int)
        
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
        (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
        |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                       <<bcopy_1046@11:2>@14:0>:int)
        
         ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                <bcopy_1046@11:4>:int)
      lower bounds:
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<bcopy_1046@11:4>:int) =
        ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int) =
        ((<<bcopy_1046@11:2>@14:0> = 0) &&
         ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
          ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int,<<<bcopy_1046@11:2>@14:1>@34:0>:int) =
        ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
         ((<<bcopy_1046@11:2>@14:0> = 0) &&
          ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
           ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:1> = <bcopy_1046@11:0>)))))
        P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int) =
        ((<<bcopy_1046@11:3>@44:0> = 0) &&
         ((<bcopy_1046@11:0> = <bcopy_1046@11:1>) &&
          ((<bcopy_1046@11:0> > 0) &&
           ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) && (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)))))
      upper bounds:
        P[<<bcopy_1046@11:3>@44:0>](var24:int,var25:int,var26:int) =
        ((var26 < var24) || ((var24 <= 0) || ((0 > var26) || (var24 <> var25))))
      begin GenHcSolver.classify_pids(37362)[4]
        output:
          [<<bcopy_1046@11:3>@44:0>]
      end GenHcSolver.classify_pids(37362)[4] (0.000000 sec.)
      lb:((<<bcopy_1046@11:3>@44:0> = 0) &&
          ((<bcopy_1046@11:0> = <bcopy_1046@11:1>) &&
           ((<bcopy_1046@11:0> > 0) &&
            ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) && (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)))))
      nub:(not
             ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) ||
              ((<bcopy_1046@11:0> <= 0) || ((0 > <<bcopy_1046@11:3>@44:0>) || (<bcopy_1046@11:0> <> <bcopy_1046@11:1>)))))
      begin ApronInterface.convex_hull_interpolate(37365)[4]
        lb:((<<bcopy_1046@11:3>@44:0> = 0) &&
            ((<bcopy_1046@11:0> = <bcopy_1046@11:1>) &&
             ((<bcopy_1046@11:0> > 0) &&
              ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) && (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)))))
        nub:(not
               ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) ||
                ((<bcopy_1046@11:0> <= 0) ||
                 ((0 > <<bcopy_1046@11:3>@44:0>) || (<bcopy_1046@11:0> <> <bcopy_1046@11:1>)))))
        begin ExtFormula.Formula.case_analysis_boolean(37438)[5]
          ts: ((<<bcopy_1046@11:3>@44:0> = 0) &&
               ((<bcopy_1046@11:0> = <bcopy_1046@11:1>) &&
                ((<bcopy_1046@11:0> > 0) &&
                 ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:0>) && (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)))))
          
        end ExtFormula.Formula.case_analysis_boolean(37438)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(37495)[5]
          ts: ((<<bcopy_1046@11:3>@44:0> >= <bcopy_1046@11:0>) &&
               ((<bcopy_1046@11:0> > 0) && ((0 <= <<bcopy_1046@11:3>@44:0>) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
          
        end ExtFormula.Formula.case_analysis_boolean(37495)[5] (0.001000 sec.)
        lb':(((<bcopy_1046@11:1> + (-1 * <bcopy_1046@11:0>)) = 0) &&
             ((<<bcopy_1046@11:3>@44:0> = 0) && ((-1 + <bcopy_1046@11:0>) >= 0)))
        nub':(((<bcopy_1046@11:1> + (-1 * <bcopy_1046@11:0>)) = 0) &&
              (((<<bcopy_1046@11:3>@44:0> + (-1 * <bcopy_1046@11:0>)) >= 0) && ((-1 + <bcopy_1046@11:0>) >= 0)))
        begin InterpProver.interpolate(37504)[5]
          begin InterpProver.interpolate_fresh(37505)[6]
            begin InterpProver.interpolate_log(37506)[7]
              input1: (((<bcopy_1046@11:1> + (-1 * <bcopy_1046@11:0>)) = 0) &&
                       ((<<bcopy_1046@11:3>@44:0> = 0) && ((-1 + <bcopy_1046@11:0>) >= 0)))
              input2: (((<bcopy_1046@11:1> + (-1 * <bcopy_1046@11:0>)) = 0) &&
                       (((<<bcopy_1046@11:3>@44:0> + (-1 * <bcopy_1046@11:0>)) >= 0) && ((-1 + <bcopy_1046@11:0>) >= 0)))
              begin InterpProver.interpolate_check(37507)[8]
                begin InterpProver.interpolate_simplify(37508)[9]
                  begin InterpProver.interpolate_quick(37639)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(37648)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(37649)[12]
                        begin CsisatInterface.interpolate_csisat_log(37650)[13]
                          input1: (0 = v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0 & v_sep_bcopy_1046_sep_11_sep_0 = v_sep_bcopy_1046_sep_11_sep_1 & 1 <= v_sep_bcopy_1046_sep_11_sep_0)
                          input2: (v_sep_bcopy_1046_sep_11_sep_0 = v_sep_bcopy_1046_sep_11_sep_1 & 1 <= v_sep_bcopy_1046_sep_11_sep_0 & v_sep_bcopy_1046_sep_11_sep_0 <= v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(37651)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(37651)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_1046_sep_11_sep_0 + 2*v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(37650)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_1046_sep_11_sep_0 + 2*v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_1046_sep_11_sep_0 + 2*v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(37649)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(37648)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(37639)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(37508)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(37507)[8] (0.003000 sec.)
              output: ((1 + <<bcopy_1046@11:3>@44:0>) <= <bcopy_1046@11:0>)
            end InterpProver.interpolate_log(37506)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(37505)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(37504)[5] (0.003000 sec.)
        output:
          P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int) =
          ((1 + <<bcopy_1046@11:3>@44:0>) <= <bcopy_1046@11:0>)
      end ApronInterface.convex_hull_interpolate(37365)[4] (0.004999 sec.)
      Horn clauses:
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int,var6:int),
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
        ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>) && ((1 + <<bcopy_1046@11:3>@44:0>) > <bcopy_1046@11:0>)) |- bot
        
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:0>:int,<<bcopy_1046@11:2>@14:0>:int),
        ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
         ((0 <= <<bcopy_1046@11:2>@14:0>) &&
          ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
           ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))))
        |- P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                              <<bcopy_1046@11:2>@14:0>:int,
                                              <<<bcopy_1046@11:2>@14:1>@34:0>:int)
        
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
        (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
        |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                       <<bcopy_1046@11:2>@14:0>:int)
        
         ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                <bcopy_1046@11:4>:int)
      lower bounds:
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<bcopy_1046@11:4>:int) =
        ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int) =
        ((<<bcopy_1046@11:2>@14:0> = 0) &&
         ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
          ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int,<<<bcopy_1046@11:2>@14:1>@34:0>:int) =
        ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
         ((<<bcopy_1046@11:2>@14:0> = 0) &&
          ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
           ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:1> = <bcopy_1046@11:0>)))))
      upper bounds:
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](var27:int,var28:int,var29:int,var30:int) = true
      begin GenHcSolver.classify_pids(41467)[4]
        output:
          [<<<bcopy_1046@11:2>@14:1>@34:0>]
      end GenHcSolver.classify_pids(41467)[4] (0.000000 sec.)
      lb:((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
          ((<<bcopy_1046@11:2>@14:0> = 0) &&
           ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
            ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:1> = <bcopy_1046@11:0>)))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(41470)[4]
        lb:((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
            ((<<bcopy_1046@11:2>@14:0> = 0) &&
             ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
              ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:1> = <bcopy_1046@11:0>)))))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(41532)[5]
          ts: ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
               ((<<bcopy_1046@11:2>@14:0> = 0) &&
                ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
                 ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:1> = <bcopy_1046@11:0>)))))
          
        end ExtFormula.Formula.case_analysis_boolean(41532)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(41544)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(41544)[5] (0.000000 sec.)
        lb':(((<bcopy_1046@11:1> + (-1 * <bcopy_1046@11:0>)) = 0) &&
             ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
              ((<<bcopy_1046@11:2>@14:0> = 0) && ((-1 + <bcopy_1046@11:0>) >= 0))))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(41547)[5]
          begin InterpProver.interpolate_fresh(41548)[6]
            begin InterpProver.interpolate_log(41549)[7]
              input1: (((<bcopy_1046@11:1> + (-1 * <bcopy_1046@11:0>)) = 0) &&
                       ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
                        ((<<bcopy_1046@11:2>@14:0> = 0) && ((-1 + <bcopy_1046@11:0>) >= 0))))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(41550)[8]
                begin InterpProver.interpolate_simplify(41551)[9]
                  begin InterpProver.interpolate_quick(41624)[10]
                    
                  end InterpProver.interpolate_quick(41624)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(41551)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(41550)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(41549)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(41548)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(41547)[5] (0.001999 sec.)
        output:
          P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int,<<<bcopy_1046@11:2>@14:1>@34:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(41470)[4] (0.002999 sec.)
      Horn clauses:
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
        ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>) && ((1 + <<bcopy_1046@11:3>@44:0>) > <bcopy_1046@11:0>)) |- bot
        
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
        (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
        |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                       <<bcopy_1046@11:2>@14:0>:int)
        
         ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                <bcopy_1046@11:4>:int)
      lower bounds:
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<bcopy_1046@11:4>:int) =
        ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int) =
        ((<<bcopy_1046@11:2>@14:0> = 0) &&
         ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
          ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
      upper bounds:
        P[<<bcopy_1046@11:2>@14:0>](var31:int,var32:int,var33:int) = true
      begin GenHcSolver.classify_pids(44066)[4]
        output:
          [<<bcopy_1046@11:2>@14:0>]
      end GenHcSolver.classify_pids(44066)[4] (0.000000 sec.)
      lb:((<<bcopy_1046@11:2>@14:0> = 0) &&
          ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
           ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(44069)[4]
        lb:((<<bcopy_1046@11:2>@14:0> = 0) &&
            ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
             ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(44115)[5]
          ts: ((<<bcopy_1046@11:2>@14:0> = 0) &&
               ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>) &&
                ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>))))
          
        end ExtFormula.Formula.case_analysis_boolean(44115)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(44126)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(44126)[5] (0.000000 sec.)
        lb':(((<bcopy_1046@11:1> + (-1 * <bcopy_1046@11:0>)) = 0) &&
             ((<<bcopy_1046@11:2>@14:0> = 0) && ((-1 + <bcopy_1046@11:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(44129)[5]
          begin InterpProver.interpolate_fresh(44130)[6]
            begin InterpProver.interpolate_log(44131)[7]
              input1: (((<bcopy_1046@11:1> + (-1 * <bcopy_1046@11:0>)) = 0) &&
                       ((<<bcopy_1046@11:2>@14:0> = 0) && ((-1 + <bcopy_1046@11:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(44132)[8]
                begin InterpProver.interpolate_simplify(44133)[9]
                  begin InterpProver.interpolate_quick(44187)[10]
                    
                  end InterpProver.interpolate_quick(44187)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(44133)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(44132)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(44131)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(44130)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(44129)[5] (0.000000 sec.)
        output:
          P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int) = true
      end ApronInterface.convex_hull_interpolate(44069)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
        ((<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>) && ((1 + <<bcopy_1046@11:3>@44:0>) > <bcopy_1046@11:0>)) |- bot
        
         ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                <bcopy_1046@11:4>:int)
      lower bounds:
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<bcopy_1046@11:4>:int) =
        ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
      upper bounds:
        P[<bcopy_1046@11:4>](var34:int,var35:int,var36:int) = ((var36 >= var35) || ((1 + var36) <= var34))
      begin GenHcSolver.classify_pids(45744)[4]
        output:
          [<bcopy_1046@11:4>]
      end GenHcSolver.classify_pids(45744)[4] (0.000000 sec.)
      lb:((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
      nub:(not ((<bcopy_1046@11:4> >= <bcopy_1046@11:1>) || ((1 + <bcopy_1046@11:4>) <= <bcopy_1046@11:0>)))
      begin ApronInterface.convex_hull_interpolate(45747)[4]
        lb:((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
        nub:(not ((<bcopy_1046@11:4> >= <bcopy_1046@11:1>) || ((1 + <bcopy_1046@11:4>) <= <bcopy_1046@11:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(45773)[5]
          ts: ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
          
        end ExtFormula.Formula.case_analysis_boolean(45773)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(45800)[5]
          ts: ((<bcopy_1046@11:4> < <bcopy_1046@11:1>) && ((1 + <bcopy_1046@11:4>) > <bcopy_1046@11:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(45800)[5] (0.001000 sec.)
        lb':(((<bcopy_1046@11:1> + (-1 * <bcopy_1046@11:0>)) = 0) &&
             ((<bcopy_1046@11:4> = 0) && ((-1 + <bcopy_1046@11:0>) >= 0)))
        nub':(((<bcopy_1046@11:4> + (-1 * <bcopy_1046@11:0>)) >= 0) &&
              (((-1 + (-1 * <bcopy_1046@11:4>)) + <bcopy_1046@11:1>) >= 0))
        begin InterpProver.interpolate(45808)[5]
          begin InterpProver.interpolate_fresh(45809)[6]
            begin InterpProver.interpolate_log(45810)[7]
              input1: (((<bcopy_1046@11:1> + (-1 * <bcopy_1046@11:0>)) = 0) &&
                       ((<bcopy_1046@11:4> = 0) && ((-1 + <bcopy_1046@11:0>) >= 0)))
              input2: (((<bcopy_1046@11:4> + (-1 * <bcopy_1046@11:0>)) >= 0) &&
                       (((-1 + (-1 * <bcopy_1046@11:4>)) + <bcopy_1046@11:1>) >= 0))
              begin InterpProver.interpolate_check(45811)[8]
                begin InterpProver.interpolate_simplify(45812)[9]
                  begin InterpProver.interpolate_quick(45913)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(45922)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(45923)[12]
                        begin CsisatInterface.interpolate_csisat_log(45924)[13]
                          input1: (0 = v_sep_bcopy_1046_sep_11_sep_4 & v_sep_bcopy_1046_sep_11_sep_0 = v_sep_bcopy_1046_sep_11_sep_1 & 1 <= v_sep_bcopy_1046_sep_11_sep_0)
                          input2: (v_sep_bcopy_1046_sep_11_sep_0 <= v_sep_bcopy_1046_sep_11_sep_4 & (1 + v_sep_bcopy_1046_sep_11_sep_4) <= v_sep_bcopy_1046_sep_11_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(45925)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(45925)[14] (0.000999 sec.)
                          output: (-2*v_sep_bcopy_1046_sep_11_sep_0 + 2*v_sep_bcopy_1046_sep_11_sep_1) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(45924)[13] (0.000999 sec.)
                        after simplification: (-2*v_sep_bcopy_1046_sep_11_sep_0 + 2*v_sep_bcopy_1046_sep_11_sep_1) <= 0
                        after dnf conversion: (((-2*v_sep_bcopy_1046_sep_11_sep_0 + 2*v_sep_bcopy_1046_sep_11_sep_1) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(45923)[12] (0.000999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(45922)[11] (0.000999 sec.)
                    
                  end InterpProver.interpolate_quick(45913)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(45812)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(45811)[8] (0.001999 sec.)
              output: (<bcopy_1046@11:1> <= <bcopy_1046@11:0>)
            end InterpProver.interpolate_log(45810)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(45809)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(45808)[5] (0.001999 sec.)
        output:
          P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<bcopy_1046@11:4>:int) =
          (<bcopy_1046@11:1> <= <bcopy_1046@11:0>)
      end ApronInterface.convex_hull_interpolate(45747)[4] (0.002999 sec.)
      begin HcSolver.check_validity(46227)[4]
        input:
          P[<fail_1893@54:0>](<fail_1893@54:0>:bool)|- bot
          
          P[<<bcopy_1046@11:3>@44:0>](<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:0>:int),
          ((0 <= <k_make_array_u_1321@51:0>) &&
           ((<k_make_array_u_1321@51:1> > 0) &&
            ((<k_make_array_u_1321@51:0> >= <k_make_array_u_1321@51:1>) && <fail_1893@54:0>)))
          |- P[<fail_1893@54:0>](<fail_1893@54:0>:bool)
          
          P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int,var6:int),
          P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
          (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)
          |- P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                         <<bcopy_1046@11:3>@44:0>:int)
          
          P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:0>:int,<<bcopy_1046@11:2>@14:0>:int),
          ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
           ((0 <= <<bcopy_1046@11:2>@14:0>) &&
            ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
             ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))))
          |- P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,
                                                <bcopy_1046@11:1>:int,
                                                <<bcopy_1046@11:2>@14:0>:int,
                                                <<<bcopy_1046@11:2>@14:1>@34:0>:int)
          
          P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
          (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
          |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                         <<bcopy_1046@11:2>@14:0>:int)
          
           ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
          |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                  <bcopy_1046@11:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(46227)[4] (0.005000 sec.)
      solution:
        P[<fail_1893@54:0>](<fail_1893@54:0>:bool) = false
        P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int) =
        ((1 + <<bcopy_1046@11:3>@44:0>) <= <bcopy_1046@11:0>)
        P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int,<<<bcopy_1046@11:2>@14:1>@34:0>:int) =
        true
        P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int) = true
        P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<bcopy_1046@11:4>:int) =
        (<bcopy_1046@11:1> <= <bcopy_1046@11:0>)
    end GenHcSolver.solve(26117)[3] (0.120981 sec.)
    begin YhornInterface.solve(47083)[3]
      begin HcSolver.solve_ub(47084)[4]
        encoded:
          P[<fail_1893@54:0>](<fail_1893@54:0>:int)|- bot
          
          P[<<bcopy_1046@11:3>@44:0>](<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:0>:int),
          ((0 <= <k_make_array_u_1321@51:0>) &&
           ((<k_make_array_u_1321@51:1> > 0) &&
            ((<k_make_array_u_1321@51:0> >= <k_make_array_u_1321@51:1>) && (<fail_1893@54:0> = 1))))
          |- P[<fail_1893@54:0>](<fail_1893@54:0>:int)
          
          P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int,var6:int),
          P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
          (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)
          |- P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                         <<bcopy_1046@11:3>@44:0>:int)
          
          P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:0>:int,<<bcopy_1046@11:2>@14:0>:int),
          ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
           ((0 <= <<bcopy_1046@11:2>@14:0>) &&
            ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
             ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))))
          |- P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,
                                                <bcopy_1046@11:1>:int,
                                                <<bcopy_1046@11:2>@14:0>:int,
                                                <<<bcopy_1046@11:2>@14:1>@34:0>:int)
          
          P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
          (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
          |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                         <<bcopy_1046@11:2>@14:0>:int)
          
           ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
          |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                  <bcopy_1046@11:4>:int)
        input to Yhorn:
          P[<fail_1893@54:0>](<fail_1893@54:0>:int)|- bot
          
          P[<<bcopy_1046@11:3>@44:0>](<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:0>:int),
          ((<k_make_array_u_1321@51:0> >= <k_make_array_u_1321@51:1>) &&
           ((<k_make_array_u_1321@51:1> > 0) && ((0 <= <k_make_array_u_1321@51:0>) && (<fail_1893@54:0> = 1))))
          |- P[<fail_1893@54:0>](<fail_1893@54:0>:int)
          
          P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int,var6:int),
          P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
          (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)
          |- P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                         <<bcopy_1046@11:3>@44:0>:int)
          
          P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:0>:int,<<bcopy_1046@11:2>@14:0>:int),
          ((<bcopy_1046@11:0> = <bcopy_1046@11:1>) &&
           ((<bcopy_1046@11:0> > 0) &&
            ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
             ((0 <= <<bcopy_1046@11:2>@14:0>) && (<<<bcopy_1046@11:2>@14:1>@34:0> = 0)))))
          |- P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,
                                                <bcopy_1046@11:1>:int,
                                                <<bcopy_1046@11:2>@14:0>:int,
                                                <<<bcopy_1046@11:2>@14:1>@34:0>:int)
          
          P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
          (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
          |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                         <<bcopy_1046@11:2>@14:0>:int)
          
           ((<bcopy_1046@11:0> = <bcopy_1046@11:1>) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:4> = 0)))
          |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                  <bcopy_1046@11:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1893_sep_54_sep_0($11)) -> 1=0.
(($11-1=0) & (-$12<=0) & ($13>0) & ($12-$13>=0)) & (v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0($13,$13,$12)) -> v_sep_fail_1893_sep_54_sep_0($11).
($14-$15<0) & (v_sep_bcopy_1046_sep_11_sep_4($16,$15,$14)) & (v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_1_sep_34_sep_0($16,$15,$14,$17)) -> v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0($16,$15,$14).
(($18=0) & (-$19<=0) & (-$16+$19<0) & ($16>0) & (-$15+$16=0)) & (v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_0($16,$16,$19)) -> v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_1_sep_34_sep_0($16,$15,$19,$18).
(-$15+$19<0) & (v_sep_bcopy_1046_sep_11_sep_4($16,$15,$19)) -> v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_0($16,$15,$19).
($20=0) & ($16>0) & (-$15+$16=0) -> v_sep_bcopy_1046_sep_11_sep_4($16,$15,$20).


v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_0: X
v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_1_sep_34_sep_0: X
v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0: X
v_sep_bcopy_1046_sep_11_sep_4: X
v_sep_fail_1893_sep_54_sep_0: X
.......
v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_0: X
v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_1_sep_34_sep_0: X
v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0: X
v_sep_bcopy_1046_sep_11_sep_4: X
v_sep_fail_1893_sep_54_sep_0: X
...
v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_0: X
v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_1_sep_34_sep_0: X
v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0: X
v_sep_bcopy_1046_sep_11_sep_4: X
v_sep_fail_1893_sep_54_sep_0: X
.....
v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_0: X
v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_1_sep_34_sep_0: X
v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0: X
v_sep_bcopy_1046_sep_11_sep_4: X
v_sep_fail_1893_sep_54_sep_0: X
......
v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_0: X
v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_1_sep_34_sep_0: X
v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0: X
v_sep_bcopy_1046_sep_11_sep_4: X
v_sep_fail_1893_sep_54_sep_0: X
.......(0=0) & (v_sep_fail_1893_sep_54_sep_0($11)) -> 1=0.
(($11-1=0) & (-$12<=0) & ($13>0) & ($12-$13>=0)) & (v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0($13,$13,$12)) -> v_sep_fail_1893_sep_54_sep_0($11).
($14-$15<0) & (v_sep_bcopy_1046_sep_11_sep_4($16,$15,$14)) & (v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_1_sep_34_sep_0($16,$15,$14,$17)) -> v_sep_bcopy_1046_sep_11_sep_3_sep_44_sep_0($16,$15,$14).
(($18=0) & (-$19<=0) & (-$16+$19<0) & ($16>0) & (-$15+$16=0)) & (v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_0($16,$16,$19)) -> v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_1_sep_34_sep_0($16,$15,$19,$18).
(-$15+$19<0) & (v_sep_bcopy_1046_sep_11_sep_4($16,$15,$19)) -> v_sep_bcopy_1046_sep_11_sep_2_sep_14_sep_0($16,$15,$19).
($20=0) & ($16>0) & (-$15+$16=0) -> v_sep_bcopy_1046_sep_11_sep_4($16,$15,$20).

        solution:
          P[<<bcopy_1046@11:2>@14:0>]($47:int,$49:int,$51:int) = ((1 + $51) <= $49)
          P[<<<bcopy_1046@11:2>@14:1>@34:0>]($38:int,$40:int,$42:int,$44:int) = ((1 + $42) <= $38)
          P[<<bcopy_1046@11:3>@44:0>]($24:int,$26:int,$28:int) = ((2 + (2 * $28)) <= ($26 + $24))
          P[<bcopy_1046@11:4>]($31:int,$33:int,$35:int) = ((1 + $35) <= $33)
          P[<fail_1893@54:0>]($21:bool) = false
        
      end HcSolver.solve_ub(47084)[4] (0.022997 sec.)
      begin HcSolver.check_validity(47571)[4]
        input:
          P[<fail_1893@54:0>](<fail_1893@54:0>:bool)|- bot
          
          P[<<bcopy_1046@11:3>@44:0>](<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:1>:int,<k_make_array_u_1321@51:0>:int),
          ((0 <= <k_make_array_u_1321@51:0>) &&
           ((<k_make_array_u_1321@51:1> > 0) &&
            ((<k_make_array_u_1321@51:0> >= <k_make_array_u_1321@51:1>) && <fail_1893@54:0>)))
          |- P[<fail_1893@54:0>](<fail_1893@54:0>:bool)
          
          P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int,var6:int),
          P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:3>@44:0>:int),
          (<<bcopy_1046@11:3>@44:0> < <bcopy_1046@11:1>)
          |- P[<<bcopy_1046@11:3>@44:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                         <<bcopy_1046@11:3>@44:0>:int)
          
          P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:0>:int,<<bcopy_1046@11:2>@14:0>:int),
          ((<<<bcopy_1046@11:2>@14:1>@34:0> = 0) &&
           ((0 <= <<bcopy_1046@11:2>@14:0>) &&
            ((<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:0>) &&
             ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))))
          |- P[<<<bcopy_1046@11:2>@14:1>@34:0>](<bcopy_1046@11:0>:int,
                                                <bcopy_1046@11:1>:int,
                                                <<bcopy_1046@11:2>@14:0>:int,
                                                <<<bcopy_1046@11:2>@14:1>@34:0>:int)
          
          P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,<<bcopy_1046@11:2>@14:0>:int),
          (<<bcopy_1046@11:2>@14:0> < <bcopy_1046@11:1>)
          |- P[<<bcopy_1046@11:2>@14:0>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                         <<bcopy_1046@11:2>@14:0>:int)
          
           ((<bcopy_1046@11:4> = 0) && ((<bcopy_1046@11:0> > 0) && (<bcopy_1046@11:0> = <bcopy_1046@11:1>)))
          |- P[<bcopy_1046@11:4>](<bcopy_1046@11:0>:int,<bcopy_1046@11:1>:int,
                                  <bcopy_1046@11:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(47571)[4] (0.015997 sec.)
      solution:
        P[<<bcopy_1046@11:2>@14:0>]($47:int,$49:int,$51:int) = ((1 + $51) <= $49)
        P[<<<bcopy_1046@11:2>@14:1>@34:0>]($38:int,$40:int,$42:int,$44:int) = ((1 + $42) <= $38)
        P[<<bcopy_1046@11:3>@44:0>]($24:int,$26:int,$28:int) = ((2 + (2 * $28)) <= ($26 + $24))
        P[<bcopy_1046@11:4>]($31:int,$33:int,$35:int) = ((1 + $35) <= $33)
        P[<fail_1893@54:0>]($21:bool) = false
    end YhornInterface.solve(47083)[3] (0.039994 sec.)
    
  end RefTypeInfer.infer_etrs(331)[2] (0.336948 sec.)
  refinement types:
    main_1884: X
    f_1891: v1:int -> X
    main_1057: v1:int -> (v2:unit -> X) -> X
    f_1042: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:unit -> X) -> X
    bcopy_1046: v1:int ->
                v2:int ->
                (v3:int -> (v4:int -> X) -> X) ->
                (v7:{v7:int | ((1 + v7) <= v1)} -> (v8:int -> X) -> X) ->
                v11:{v11:int | (v2 <= v1)} -> ((v12:int -> (v13:int -> X) -> X) -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1321: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1332: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_1886: v1:int ->
                  v2:int ->
                  v3:int ->
                  (v4:int -> (v5:int -> X) -> X) ->
                  ((v8:int -> (v9:int -> X) -> X) -> X) -> (v13:int -> (v14:int -> X) -> X) -> v17:int -> X
    update_1033: v1:int ->
                 v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> ((v8:int -> (v9:int -> X) -> X) -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1321: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1893: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var85:int ->
            var84:int ->
            var83:int -> var82:int -> (var81:int -> (var80:int -> X) -> X) -> var77:int -> (var76:int -> X) -> X
    f_1892: var88:int -> var87:unit -> X
    f_bcopy_1887: var106:int ->
                  var105:int ->
                  var104:int ->
                  var103:int ->
                  ((var102:int -> (var101:int -> X) -> X) -> X) ->
                  (var97:int -> (var96:int -> X) -> X) -> (var93:int -> (var92:int -> X) -> X) -> X
    f_f_1890: var118:int ->
              (var117:int -> (var116:int -> X) -> X) ->
              (var113:unit -> X) -> (var111:int -> (var110:int -> X) -> X) -> X
    f_print_array_1888: var133:int ->
                        var132:int ->
                        var131:int ->
                        (var130:int -> (var129:int -> X) -> X) ->
                        (var126:int -> (var125:int -> X) -> X) -> (var122:unit -> X) -> var120:int -> X
    f_print_array_1889: var149:int ->
                        var148:int ->
                        var147:int ->
                        var146:int ->
                        (var145:int -> (var144:int -> X) -> X) ->
                        (var141:int -> (var140:int -> X) -> X) -> (var137:unit -> X) -> var135:unit -> X
    f_update_1885: var163:int ->
                   var162:int ->
                   var161:int ->
                   (var160:int -> (var159:int -> X) -> X) ->
                   ((var156:int -> (var155:int -> X) -> X) -> X) -> var151:int -> X
    print_array_1052: var177:int ->
                      (var176:int -> (var175:int -> X) -> X) ->
                      var172:int -> (var171:int -> (var170:int -> X) -> X) -> var167:int -> (var166:unit -> X) -> X
    print_int_1040: var181:int -> (var180:unit -> X) -> X
  abstraction types:
    main_1884: X
    f_1891: v1:int -> X
    main_1057: v1:int -> (v2:unit -> X) -> X
    f_1042: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:unit -> X) -> X
    bcopy_1046: v1:int ->
                v2:int ->
                (v3:int -> (v4:int -> X) -> X) ->
                (v7:int[v7 -> ((1 + v7) <= v1)] -> (v8:int -> X) -> X) ->
                v11:int[v11 -> (v2 <= v1)] -> ((v12:int -> (v13:int -> X) -> X) -> X) -> X
    make_array_1030: var182:int -> var183:int -> (var184:int -> X) -> X
    k_make_array_u_1321: var187:int -> var188:int -> (var189:int -> X) -> var191:bool -> X
    k_make_array_u_1332: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_1886: v1:int ->
                  v2:int ->
                  v3:int ->
                  (v4:int -> (v5:int -> X) -> X) ->
                  ((v8:int -> (v9:int -> X) -> X) -> X) -> (v13:int -> (v14:int -> X) -> X) -> v17:int -> X
    update_1033: v1:int ->
                 v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> ((v8:int -> (v9:int -> X) -> X) -> X) -> X
    fail_1893: v1:bool -> (v2:unit -> X) -> X
    a_1038: var85:int ->
            var84:int ->
            var83:int -> var82:int -> (var81:int -> (var80:int -> X) -> X) -> var77:int -> (var76:int -> X) -> X
    f_1892: var88:int -> var87:unit -> X
    f_bcopy_1887: var106:int ->
                  var105:int ->
                  var104:int ->
                  var103:int ->
                  ((var102:int -> (var101:int -> X) -> X) -> X) ->
                  (var97:int -> (var96:int -> X) -> X) -> (var93:int -> (var92:int -> X) -> X) -> X
    f_f_1890: var118:int ->
              (var117:int -> (var116:int -> X) -> X) ->
              (var113:unit -> X) -> (var111:int -> (var110:int -> X) -> X) -> X
    f_print_array_1888: var133:int ->
                        var132:int ->
                        var131:int ->
                        (var130:int -> (var129:int -> X) -> X) ->
                        (var126:int -> (var125:int -> X) -> X) -> (var122:unit -> X) -> var120:int -> X
    f_print_array_1889: var149:int ->
                        var148:int ->
                        var147:int ->
                        var146:int ->
                        (var145:int -> (var144:int -> X) -> X) ->
                        (var141:int -> (var140:int -> X) -> X) -> (var137:unit -> X) -> var135:unit -> X
    f_update_1885: var163:int ->
                   var162:int ->
                   var161:int ->
                   (var160:int -> (var159:int -> X) -> X) ->
                   ((var156:int -> (var155:int -> X) -> X) -> X) -> var151:int -> X
    print_array_1052: var177:int ->
                      (var176:int -> (var175:int -> X) -> X) ->
                      var172:int -> (var171:int -> (var170:int -> X) -> X) -> var167:int -> (var166:unit -> X) -> X
    print_int_1040: var181:int -> (var180:unit -> X) -> X
  
end AbsTypeInfer.refine(330)[1] (0.346947 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1884
  main_1884 -> (rand_int f_1891)
  a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 when (i_1034 = j_1039) -> (k_update_a_1401 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 when (
      not (i_1034 = j_1039)) -> (des_1036 i_1034 k_update_a_1401)
  bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 when (i_1050 >= m_1047) -> (k_f_bcopy_1535 des_1049)
  bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 when (
      not (i_1050 >= m_1047)) -> (src_1048 i_1050 (f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048))
  f_1042 m_1043 src_1044 des_1045 k_f_1476 ->
      (bcopy_1046 m_1043 m_1043 src_1044 des_1045 0 (f_f_1890 m_1043 des_1045 k_f_1476))
  f_1891 x_1859 -> (main_1057 x_1859 (f_1892 x_1859))
  f_1892 x_1859 x_1856 -> end
  f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048 x_1591 ->
      (update_1033 i_1050 m_1047 des_1049 x_1591 (f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048))
  f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048 x_1547 ->
      (bcopy_1046 m_1043 m_1047 src_1048 x_1547 (i_1050 + 1) k_f_bcopy_1535)
  f_f_1890 m_1043 des_1045 k_f_1476 x_1715 -> (print_array_1052 m_1043 des_1045 m_1043 x_1715 0 k_f_1476)
  f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664 x_1687 ->
      (print_int_1040 x_1687 (f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664))
  f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664 x_1667 ->
      (print_array_1052 m_1043 des_1045 m_1053 array_1054 (i_1055 + 1) k_f_print_array_1664)
  f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380 x_1386 ->
      (k_update_1380 (a_1038 i_1034 n_1035 x_1037 x_1386 des_1036))
  fail_1893 b k -> {fail} => (k ())
  k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 when b_1333 ->
      (k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 ())
  k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 when (not b_1333) ->
      (fail_1893 true (k_make_array_u_1332 i_1032 n_1031 k_make_array_1315))
  k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 x_1318 -> (k_make_array_1315 0)
  main_1057 n_1058 k_main_1787 when (n_1058 > 0) ->
      (f_1042 n_1058 (make_array_1030 n_1058) (make_array_1030 n_1058) k_main_1787)
  main_1057 n_1058 k_main_1787 when (not (n_1058 > 0)) -> (k_main_1787 ())
  make_array_1030 n_1031 i_1032 k_make_array_1315 when (0 <= i_1032) ->
      (k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1315 when (not (0 <= i_1032)) ->
      (k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 false)
  print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 when (
      i_1055 >= m_1053) -> (k_f_print_array_1664 ())
  print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 when (
      not (i_1055 >= m_1053)) ->
      (des_1045 i_1055 (f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664))
  print_int_1040 n_1041 k_print_int_1432 -> (k_print_int_1432 ())
  update_1033 i_1034 n_1035 des_1036 x_1037 k_update_1380 ->
      (des_1036 i_1034 (f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380))
Types:
  main_1884 : X
  bcopy_1046 : (x_1:int ->
                x_2:int ->
                (int -> (int -> X) -> X) ->
                (x_10:int[x_1 >= x_10 + 1] -> (int -> X) -> X) ->
                int[x_1 >= x_2] -> ((int -> (int -> X) -> X) -> X) -> X)
  fail_1893 : (x_1:bool[x_1] -> (unit -> X) -> X)
  print_array_1052 : (int -> (int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1884 ... --> 
  f_1891 ... --> 
  main_1057 [1/2] ... --> 
  f_1042 ... --> 
  bcopy_1046 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1321 [2/2] ... --> 
  fail_1893 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 1; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(49214)[1]
  program:
    main_1884  | true = ((Random.int 0) f_1891)
    a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 | (
    i_1034 = j_1039) = (k_update_a_1401 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 | (
    not (i_1034 = j_1039)) = (des_1036 i_1034
                                       k_update_a_1401)
    bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 | (
    i_1050 >= m_1047) = (k_f_bcopy_1535 des_1049)
    bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 | (
    not (i_1050 >= m_1047)) = (src_1048 i_1050
                                        (f_bcopy_1886 i_1050
                                                      m_1043
                                                      m_1047
                                                      des_1049
                                                      k_f_bcopy_1535
                                                      src_1048))
    f_1042 m_1043 src_1044 des_1045 k_f_1476 | true = (bcopy_1046
                                                         m_1043
                                                         m_1043
                                                         src_1044
                                                         des_1045
                                                         0
                                                         (f_f_1890 m_1043
                                                                   des_1045
                                                                   k_f_1476))
    f_1891 x_1859 | true = (main_1057 x_1859
                                      (f_1892 x_1859))
    f_1892 x_1859 x_1856 | true = end
    f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048 x_1591 | true = (
    update_1033 i_1050
                m_1047
                des_1049
                x_1591
                (f_bcopy_1887 i_1050
                              m_1043
                              m_1047
                              x_1591
                              k_f_bcopy_1535
                              src_1048))
    f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048 x_1547 | true = (
    bcopy_1046 m_1043
               m_1047
               src_1048
               x_1547
               (i_1050 + 1)
               k_f_bcopy_1535)
    f_f_1890 m_1043 des_1045 k_f_1476 x_1715 | true = (print_array_1052 m_1043
                                                                    des_1045
                                                                    m_1043
                                                                    x_1715
                                                                    0
                                                                    k_f_1476)
    f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664 x_1687 | true = (
    print_int_1040 x_1687
                   (f_print_array_1889 i_1055
                                       m_1043
                                       m_1053
                                       x_1687
                                       array_1054
                                       des_1045
                                       k_f_print_array_1664))
    f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664 x_1667 | true = (
    print_array_1052 m_1043
                     des_1045
                     m_1053
                     array_1054
                     (i_1055 + 1)
                     k_f_print_array_1664)
    f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380 x_1386 | true = (
    k_update_1380 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1386
                          des_1036))
    fail_1893 b k | true = (fail ())
    k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 | b_1333 = (
    k_make_array_u_1332 i_1032
                        n_1031
                        k_make_array_1315
                        ())
    k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 | (not b_1333) = (
    fail_1893 true
              (k_make_array_u_1332 i_1032
                                   n_1031
                                   k_make_array_1315))
    k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 x_1318 | true = (
    k_make_array_1315 0)
    main_1057 n_1058 k_main_1787 | (n_1058 > 0) = (f_1042
                                                     n_1058
                                                     (make_array_1030 n_1058)
                                                     (make_array_1030 n_1058)
                                                     k_main_1787)
    main_1057 n_1058 k_main_1787 | (not (n_1058 > 0)) = (k_main_1787 ())
    make_array_1030 n_1031 i_1032 k_make_array_1315 | (0 <= i_1032) = (
    k_make_array_u_1321 i_1032
                        n_1031
                        k_make_array_1315
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1315 | (not (0 <= i_1032)) = (
    k_make_array_u_1321 i_1032
                        n_1031
                        k_make_array_1315
                        false)
    print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 | (
    i_1055 >= m_1053) = (k_f_print_array_1664 ())
    print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 | (
    not (i_1055 >= m_1053)) = (des_1045
                                 i_1055
                                 (f_print_array_1888 i_1055
                                                     m_1043
                                                     m_1053
                                                     array_1054
                                                     des_1045
                                                     k_f_print_array_1664))
    print_int_1040 n_1041 k_print_int_1432 | true = (k_print_int_1432 ())
    update_1033 i_1034 n_1035 des_1036 x_1037 k_update_1380 | true = (
    des_1036 i_1034
             (f_update_1885 i_1034
                            n_1035
                            x_1037
                            des_1036
                            k_update_1380))
    main_1884:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    bcopy_1046:int ->
               int ->
               (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
    f_1042:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> X
    f_1891:int -> X
    f_1892:int -> unit -> X
    f_bcopy_1886:int ->
                 int ->
                 int ->
                 (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_1887:int ->
                 int ->
                 int ->
                 int -> ((int -> (int -> X) -> X) -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> X
    f_f_1890:int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> X
    f_print_array_1888:int ->
                       int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> int -> X
    f_print_array_1889:int ->
                       int ->
                       int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> unit -> X
    f_update_1885:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1893:bool -> (unit -> X) -> X
    k_make_array_u_1321:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1332:int -> int -> (int -> X) -> unit -> X
    main_1057:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    print_array_1052:int -> (int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    print_int_1040:int -> (unit -> X) -> X
    update_1033:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1042,f_1891,f_1892,f_bcopy_1886,f_bcopy_1887,f_f_1890,f_print_array_1888,f_print_array_1889,f_update_1885,k_make_array_u_1321,k_make_array_u_1332,main_1057,make_array_1030,print_int_1040,update_1033
  counterexample: 0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1891@60:0> = var193)
     [true.(<main_1057@62:0> = <f_1891@60:0>)
      [(<main_1057@62:0> > 0).(<f_1042@65:0> = <main_1057@62:0>)
       [true.((<bcopy_1046@67:0> = <f_1042@65:0>) && ((<bcopy_1046@67:1> = <f_1042@65:0>) && (<bcopy_1046@67:4> = 0)))
        [(not (<bcopy_1046@67:4> >= <bcopy_1046@67:1>)).(<<bcopy_1046@67:2>@70:0> = <bcopy_1046@67:4>)
         [true.(<<f_1042@65:1>@72:0> = <<bcopy_1046@67:2>@70:0>)
          [true.((<make_array_1030@74:0> = <main_1057@62:0>) && (<make_array_1030@74:1> = <<f_1042@65:1>@72:0>))
           [(not (0 <= <make_array_1030@74:1>)).
            ((<k_make_array_u_1321@77:0> = <make_array_1030@74:1>) &&
             ((<k_make_array_u_1321@77:1> = <make_array_1030@74:0>) && (<k_make_array_u_1321@77:3> = false)))
            [(not <k_make_array_u_1321@77:3>).(<fail_1893@80:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(49215)[2]
    horn clauses:
      P[<fail_1893@80:0>](<fail_1893@80:0>:bool)|- bot
      
      P[<k_make_array_u_1321@77:3>](<k_make_array_u_1321@77:0>:int,<k_make_array_u_1321@77:1>:int,false:bool),
      <fail_1893@80:0> |- P[<fail_1893@80:0>](<fail_1893@80:0>:bool)
      
      P[<make_array_1030@74:1>](<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:0>:int),
      ((0 > <k_make_array_u_1321@77:0>) && (not <k_make_array_u_1321@77:3>))
      |- P[<k_make_array_u_1321@77:3>](<k_make_array_u_1321@77:0>:int,
                                       <k_make_array_u_1321@77:1>:int,
                                       <k_make_array_u_1321@77:3>:bool)
      
      P[<main_1057@62:0>](<make_array_1030@74:0>:int),
      P[<<f_1042@65:1>@72:0>](<make_array_1030@74:0>:int,<make_array_1030@74:1>:int), (
      <make_array_1030@74:0> > 0) |- P[<make_array_1030@74:1>](<make_array_1030@74:0>:int,
                                                               <make_array_1030@74:1>:int)
      
      P[<f_1042@65:0>](<f_1042@65:0>:int),
      P[<<bcopy_1046@67:2>@70:0>](<f_1042@65:0>:int,<f_1042@65:0>:int,<<f_1042@65:1>@72:0>:int)|- P[<<f_1042@65:1>@72:0>](
      <f_1042@65:0>:int,<<f_1042@65:1>@72:0>:int)
      
      P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int),
      (<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>)
      |- P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                     <<bcopy_1046@67:2>@70:0>:int)
      
      P[<f_1042@65:0>](<bcopy_1046@67:0>:int), ((<bcopy_1046@67:4> = 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>))
      |- P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                              <bcopy_1046@67:4>:int)
      
      P[<main_1057@62:0>](<f_1042@65:0>:int), (<f_1042@65:0> > 0) |- P[<f_1042@65:0>](<f_1042@65:0>:int)
      
      P[<f_1891@60:0>](<main_1057@62:0>:int)|- P[<main_1057@62:0>](<main_1057@62:0>:int)
      
      |- P[<f_1891@60:0>](<f_1891@60:0>:int)
    call trees:
      <main_1884@57>
        <f_1891@60>
          <main_1057@62>
            <f_1042@65>
              <bcopy_1046@67>
              </<bcopy_1046@67:2>@70>
            </<f_1042@65:1>@72>
            <make_array_1030@74>
              <k_make_array_u_1321@77>
                <fail_1893@80>
    inlined horn clauses:
      P[<fail_1893@80:0>](<fail_1893@80:0>:bool)|- bot
      
      P[<<bcopy_1046@67:2>@70:0>](<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:0>:int),
      ((0 > <k_make_array_u_1321@77:0>) && ((<k_make_array_u_1321@77:1> > 0) && <fail_1893@80:0>))
      |- P[<fail_1893@80:0>](<fail_1893@80:0>:bool)
      
      P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int),
      (<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>)
      |- P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                     <<bcopy_1046@67:2>@70:0>:int)
      
       ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
      |- P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                              <bcopy_1046@67:4>:int)
    begin ParamSubstInfer.infer(50562)[3]
      
    end ParamSubstInfer.infer(50562)[3] (0.105984 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(50564)[3]
      
    end RefTypeInfer.elim_coeffs(50564)[3] (0.001000 sec.)
    begin GenHcSolver.solve(50820)[3]
      Horn clauses:
        P[<fail_1893@80:0>](<fail_1893@80:0>:bool)|- bot
        
        P[<<bcopy_1046@67:2>@70:0>](<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:0>:int),
        ((0 > <k_make_array_u_1321@77:0>) && ((<k_make_array_u_1321@77:1> > 0) && <fail_1893@80:0>))
        |- P[<fail_1893@80:0>](<fail_1893@80:0>:bool)
        
        P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int),
        (<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>)
        |- P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                       <<bcopy_1046@67:2>@70:0>:int)
        
         ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
        |- P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                <bcopy_1046@67:4>:int)
      lower bounds:
        P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<bcopy_1046@67:4>:int) =
        ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
        P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int) =
        ((<<bcopy_1046@67:2>@70:0> = 0) &&
         ((<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>) &&
          ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>))))
        P[<fail_1893@80:0>](<fail_1893@80:0>:bool) = false
      upper bounds:
        P[<fail_1893@80:0>](var195:bool) = true
      begin GenHcSolver.classify_pids(52617)[4]
        output:
          [<fail_1893@80:0>]
      end GenHcSolver.classify_pids(52617)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(52620)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(52621)[5]
          begin InterpProver.interpolate_fresh(52622)[6]
            begin InterpProver.interpolate_log(52623)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(52624)[8]
                begin InterpProver.interpolate_simplify(52625)[9]
                  begin InterpProver.interpolate_quick(52638)[10]
                    
                  end InterpProver.interpolate_quick(52638)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(52642)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(52642)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(52625)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(52624)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(52623)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(52622)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(52621)[5] (0.000000 sec.)
        output:
          P[<fail_1893@80:0>](<fail_1893@80:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(52620)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_1046@67:2>@70:0>](<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:0>:int),
        ((<k_make_array_u_1321@77:1> > 0) && (0 > <k_make_array_u_1321@77:0>)) |- bot
        
        P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int),
        (<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>)
        |- P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                       <<bcopy_1046@67:2>@70:0>:int)
        
         ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
        |- P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                <bcopy_1046@67:4>:int)
      lower bounds:
        P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<bcopy_1046@67:4>:int) =
        ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
        P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int) =
        ((<<bcopy_1046@67:2>@70:0> = 0) &&
         ((<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>) &&
          ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>))))
      upper bounds:
        P[<<bcopy_1046@67:2>@70:0>](var196:int,var197:int,var198:int) =
        ((var196 <= 0) || ((0 <= var198) || (var196 <> var197)))
      begin GenHcSolver.classify_pids(54976)[4]
        output:
          [<<bcopy_1046@67:2>@70:0>]
      end GenHcSolver.classify_pids(54976)[4] (0.000000 sec.)
      lb:((<<bcopy_1046@67:2>@70:0> = 0) &&
          ((<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>) &&
           ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>))))
      nub:(not
             ((<bcopy_1046@67:0> <= 0) || ((0 <= <<bcopy_1046@67:2>@70:0>) || (<bcopy_1046@67:0> <> <bcopy_1046@67:1>))))
      begin ApronInterface.convex_hull_interpolate(54979)[4]
        lb:((<<bcopy_1046@67:2>@70:0> = 0) &&
            ((<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>) &&
             ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>))))
        nub:(not
               ((<bcopy_1046@67:0> <= 0) ||
                ((0 <= <<bcopy_1046@67:2>@70:0>) || (<bcopy_1046@67:0> <> <bcopy_1046@67:1>))))
        lb':((<<bcopy_1046@67:2>@70:0> = 0) &&
             ((<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>) &&
              ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>))))
        nub':(not
                ((<bcopy_1046@67:0> <= 0) ||
                 ((0 <= <<bcopy_1046@67:2>@70:0>) || (<bcopy_1046@67:0> <> <bcopy_1046@67:1>))))
        begin InterpProver.interpolate(54980)[5]
          begin InterpProver.interpolate_fresh(54981)[6]
            begin InterpProver.interpolate_log(54982)[7]
              input1: ((<<bcopy_1046@67:2>@70:0> = 0) &&
                       ((<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>) &&
                        ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>))))
              input2: (not
                         ((<bcopy_1046@67:0> <= 0) ||
                          ((0 <= <<bcopy_1046@67:2>@70:0>) || (<bcopy_1046@67:0> <> <bcopy_1046@67:1>))))
              begin InterpProver.interpolate_check(54983)[8]
                begin InterpProver.interpolate_simplify(54984)[9]
                  begin InterpProver.interpolate_quick(55133)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(55142)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(55143)[12]
                        begin CsisatInterface.interpolate_csisat_log(55144)[13]
                          input1: (0 = v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0 & v_sep_bcopy_1046_sep_67_sep_0 = v_sep_bcopy_1046_sep_67_sep_1 & 1 <= v_sep_bcopy_1046_sep_67_sep_0 & (1 + v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0) <= v_sep_bcopy_1046_sep_67_sep_1)
                          input2: (v_sep_bcopy_1046_sep_67_sep_0 = v_sep_bcopy_1046_sep_67_sep_1 & 1 <= v_sep_bcopy_1046_sep_67_sep_0 & (1 + v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(55145)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(55145)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(55144)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(55143)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(55142)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(55133)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(54984)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(54983)[8] (0.002000 sec.)
              output: (0 <= <<bcopy_1046@67:2>@70:0>)
            end InterpProver.interpolate_log(54982)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(54981)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(54980)[5] (0.002000 sec.)
        output:
          P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int) =
          (0 <= <<bcopy_1046@67:2>@70:0>)
      end ApronInterface.convex_hull_interpolate(54979)[4] (0.003000 sec.)
      Horn clauses:
        P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int),
        ((<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>) && (0 > <<bcopy_1046@67:2>@70:0>)) |- bot
        
         ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
        |- P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                <bcopy_1046@67:4>:int)
      lower bounds:
        P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<bcopy_1046@67:4>:int) =
        ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
      upper bounds:
        P[<bcopy_1046@67:4>](var199:int,var200:int,var201:int) = ((var201 >= var200) || (0 <= var201))
      begin GenHcSolver.classify_pids(56500)[4]
        output:
          [<bcopy_1046@67:4>]
      end GenHcSolver.classify_pids(56500)[4] (0.000000 sec.)
      lb:((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
      nub:(not ((<bcopy_1046@67:4> >= <bcopy_1046@67:1>) || (0 <= <bcopy_1046@67:4>)))
      begin ApronInterface.convex_hull_interpolate(56503)[4]
        lb:((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
        nub:(not ((<bcopy_1046@67:4> >= <bcopy_1046@67:1>) || (0 <= <bcopy_1046@67:4>)))
        lb':((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
        nub':(not ((<bcopy_1046@67:4> >= <bcopy_1046@67:1>) || (0 <= <bcopy_1046@67:4>)))
        begin InterpProver.interpolate(56504)[5]
          begin InterpProver.interpolate_fresh(56505)[6]
            begin InterpProver.interpolate_log(56506)[7]
              input1: ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
              input2: (not ((<bcopy_1046@67:4> >= <bcopy_1046@67:1>) || (0 <= <bcopy_1046@67:4>)))
              begin InterpProver.interpolate_check(56507)[8]
                begin InterpProver.interpolate_simplify(56508)[9]
                  begin InterpProver.interpolate_quick(56575)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(56584)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(56585)[12]
                        begin CsisatInterface.interpolate_csisat_log(56586)[13]
                          input1: (0 = v_sep_bcopy_1046_sep_67_sep_4 & 1 <= v_sep_bcopy_1046_sep_67_sep_1)
                          input2: ((1 + v_sep_bcopy_1046_sep_67_sep_4) <= 0 & (1 + v_sep_bcopy_1046_sep_67_sep_4) <= v_sep_bcopy_1046_sep_67_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(56587)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(56587)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_1046_sep_67_sep_4 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(56586)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_1046_sep_67_sep_4 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_1046_sep_67_sep_4 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(56585)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(56584)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(56575)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(56508)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(56507)[8] (0.001999 sec.)
              output: (0 <= <bcopy_1046@67:4>)
            end InterpProver.interpolate_log(56506)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(56505)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(56504)[5] (0.001999 sec.)
        output:
          P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<bcopy_1046@67:4>:int) =
          (0 <= <bcopy_1046@67:4>)
      end ApronInterface.convex_hull_interpolate(56503)[4] (0.001999 sec.)
      begin HcSolver.check_validity(56800)[4]
        input:
          P[<fail_1893@80:0>](<fail_1893@80:0>:bool)|- bot
          
          P[<<bcopy_1046@67:2>@70:0>](<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:0>:int),
          ((0 > <k_make_array_u_1321@77:0>) && ((<k_make_array_u_1321@77:1> > 0) && <fail_1893@80:0>))
          |- P[<fail_1893@80:0>](<fail_1893@80:0>:bool)
          
          P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int),
          (<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>)
          |- P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                         <<bcopy_1046@67:2>@70:0>:int)
          
           ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
          |- P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                  <bcopy_1046@67:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(56800)[4] (0.002000 sec.)
      solution:
        P[<fail_1893@80:0>](<fail_1893@80:0>:bool) = false
        P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int) =
        (0 <= <<bcopy_1046@67:2>@70:0>)
        P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<bcopy_1046@67:4>:int) =
        (0 <= <bcopy_1046@67:4>)
    end GenHcSolver.solve(50820)[3] (0.036994 sec.)
    begin GenHcSolver.solve(57140)[3]
      Horn clauses:
        P[<fail_1893@80:0>](<fail_1893@80:0>:bool)|- bot
        
        P[<<bcopy_1046@67:2>@70:0>](<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:0>:int),
        ((0 > <k_make_array_u_1321@77:0>) && ((<k_make_array_u_1321@77:1> > 0) && <fail_1893@80:0>))
        |- P[<fail_1893@80:0>](<fail_1893@80:0>:bool)
        
        P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int),
        (<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>)
        |- P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                       <<bcopy_1046@67:2>@70:0>:int)
        
         ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
        |- P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                <bcopy_1046@67:4>:int)
      lower bounds:
        P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<bcopy_1046@67:4>:int) =
        ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
        P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int) =
        ((<<bcopy_1046@67:2>@70:0> = 0) &&
         ((<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>) &&
          ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>))))
        P[<fail_1893@80:0>](<fail_1893@80:0>:bool) = false
      upper bounds:
        P[<fail_1893@80:0>](var203:bool) = true
      begin GenHcSolver.classify_pids(58937)[4]
        output:
          [<fail_1893@80:0>]
      end GenHcSolver.classify_pids(58937)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(58940)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(58943)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(58943)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(58948)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(58948)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(58951)[5]
          begin InterpProver.interpolate_fresh(58952)[6]
            begin InterpProver.interpolate_log(58953)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(58954)[8]
                begin InterpProver.interpolate_simplify(58955)[9]
                  begin InterpProver.interpolate_quick(58970)[10]
                    
                  end InterpProver.interpolate_quick(58970)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(58974)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(58974)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(58955)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(58954)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(58953)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(58952)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(58951)[5] (0.001000 sec.)
        output:
          P[<fail_1893@80:0>](<fail_1893@80:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(58940)[4] (0.001999 sec.)
      Horn clauses:
        P[<<bcopy_1046@67:2>@70:0>](<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:0>:int),
        ((<k_make_array_u_1321@77:1> > 0) && (0 > <k_make_array_u_1321@77:0>)) |- bot
        
        P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int),
        (<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>)
        |- P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                       <<bcopy_1046@67:2>@70:0>:int)
        
         ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
        |- P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                <bcopy_1046@67:4>:int)
      lower bounds:
        P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<bcopy_1046@67:4>:int) =
        ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
        P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int) =
        ((<<bcopy_1046@67:2>@70:0> = 0) &&
         ((<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>) &&
          ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>))))
      upper bounds:
        P[<<bcopy_1046@67:2>@70:0>](var204:int,var205:int,var206:int) =
        ((var204 <= 0) || ((0 <= var206) || (var204 <> var205)))
      begin GenHcSolver.classify_pids(61315)[4]
        output:
          [<<bcopy_1046@67:2>@70:0>]
      end GenHcSolver.classify_pids(61315)[4] (0.000000 sec.)
      lb:((<<bcopy_1046@67:2>@70:0> = 0) &&
          ((<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>) &&
           ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>))))
      nub:(not
             ((<bcopy_1046@67:0> <= 0) || ((0 <= <<bcopy_1046@67:2>@70:0>) || (<bcopy_1046@67:0> <> <bcopy_1046@67:1>))))
      begin ApronInterface.convex_hull_interpolate(61318)[4]
        lb:((<<bcopy_1046@67:2>@70:0> = 0) &&
            ((<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>) &&
             ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>))))
        nub:(not
               ((<bcopy_1046@67:0> <= 0) ||
                ((0 <= <<bcopy_1046@67:2>@70:0>) || (<bcopy_1046@67:0> <> <bcopy_1046@67:1>))))
        begin ExtFormula.Formula.case_analysis_boolean(61364)[5]
          ts: ((<<bcopy_1046@67:2>@70:0> = 0) &&
               ((<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>) &&
                ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>))))
          
        end ExtFormula.Formula.case_analysis_boolean(61364)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(61400)[5]
          ts: ((<bcopy_1046@67:0> > 0) && ((0 > <<bcopy_1046@67:2>@70:0>) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
          
        end ExtFormula.Formula.case_analysis_boolean(61400)[5] (0.000000 sec.)
        lb':(((<bcopy_1046@67:1> + (-1 * <bcopy_1046@67:0>)) = 0) &&
             ((<<bcopy_1046@67:2>@70:0> = 0) && ((-1 + <bcopy_1046@67:0>) >= 0)))
        nub':(((<bcopy_1046@67:1> + (-1 * <bcopy_1046@67:0>)) = 0) &&
              (((-1 + (-1 * <<bcopy_1046@67:2>@70:0>)) >= 0) && ((-1 + <bcopy_1046@67:0>) >= 0)))
        begin InterpProver.interpolate(61407)[5]
          begin InterpProver.interpolate_fresh(61408)[6]
            begin InterpProver.interpolate_log(61409)[7]
              input1: (((<bcopy_1046@67:1> + (-1 * <bcopy_1046@67:0>)) = 0) &&
                       ((<<bcopy_1046@67:2>@70:0> = 0) && ((-1 + <bcopy_1046@67:0>) >= 0)))
              input2: (((<bcopy_1046@67:1> + (-1 * <bcopy_1046@67:0>)) = 0) &&
                       (((-1 + (-1 * <<bcopy_1046@67:2>@70:0>)) >= 0) && ((-1 + <bcopy_1046@67:0>) >= 0)))
              begin InterpProver.interpolate_check(61410)[8]
                begin InterpProver.interpolate_simplify(61411)[9]
                  begin InterpProver.interpolate_quick(61542)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(61551)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(61552)[12]
                        begin CsisatInterface.interpolate_csisat_log(61553)[13]
                          input1: (0 = v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0 & v_sep_bcopy_1046_sep_67_sep_0 = v_sep_bcopy_1046_sep_67_sep_1 & 1 <= v_sep_bcopy_1046_sep_67_sep_0)
                          input2: (v_sep_bcopy_1046_sep_67_sep_0 = v_sep_bcopy_1046_sep_67_sep_1 & 1 <= v_sep_bcopy_1046_sep_67_sep_0 & (1 + v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(61554)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(61554)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(61553)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(61552)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(61551)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(61542)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(61411)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(61410)[8] (0.003000 sec.)
              output: (0 <= <<bcopy_1046@67:2>@70:0>)
            end InterpProver.interpolate_log(61409)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(61408)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(61407)[5] (0.003000 sec.)
        output:
          P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int) =
          (0 <= <<bcopy_1046@67:2>@70:0>)
      end ApronInterface.convex_hull_interpolate(61318)[4] (0.003999 sec.)
      Horn clauses:
        P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int),
        ((<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>) && (0 > <<bcopy_1046@67:2>@70:0>)) |- bot
        
         ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
        |- P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                <bcopy_1046@67:4>:int)
      lower bounds:
        P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<bcopy_1046@67:4>:int) =
        ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
      upper bounds:
        P[<bcopy_1046@67:4>](var207:int,var208:int,var209:int) = ((var209 >= var208) || (0 <= var209))
      begin GenHcSolver.classify_pids(62914)[4]
        output:
          [<bcopy_1046@67:4>]
      end GenHcSolver.classify_pids(62914)[4] (0.000000 sec.)
      lb:((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
      nub:(not ((<bcopy_1046@67:4> >= <bcopy_1046@67:1>) || (0 <= <bcopy_1046@67:4>)))
      begin ApronInterface.convex_hull_interpolate(62917)[4]
        lb:((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
        nub:(not ((<bcopy_1046@67:4> >= <bcopy_1046@67:1>) || (0 <= <bcopy_1046@67:4>)))
        begin ExtFormula.Formula.case_analysis_boolean(62943)[5]
          ts: ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
          
        end ExtFormula.Formula.case_analysis_boolean(62943)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(62964)[5]
          ts: ((<bcopy_1046@67:4> < <bcopy_1046@67:1>) && (0 > <bcopy_1046@67:4>))
          
        end ExtFormula.Formula.case_analysis_boolean(62964)[5] (0.000000 sec.)
        lb':(((<bcopy_1046@67:1> + (-1 * <bcopy_1046@67:0>)) = 0) &&
             ((<bcopy_1046@67:4> = 0) && ((-1 + <bcopy_1046@67:0>) >= 0)))
        nub':(((-1 + (-1 * <bcopy_1046@67:4>)) >= 0) && (((-1 + (-1 * <bcopy_1046@67:4>)) + <bcopy_1046@67:1>) >= 0))
        begin InterpProver.interpolate(62970)[5]
          begin InterpProver.interpolate_fresh(62971)[6]
            begin InterpProver.interpolate_log(62972)[7]
              input1: (((<bcopy_1046@67:1> + (-1 * <bcopy_1046@67:0>)) = 0) &&
                       ((<bcopy_1046@67:4> = 0) && ((-1 + <bcopy_1046@67:0>) >= 0)))
              input2: (((-1 + (-1 * <bcopy_1046@67:4>)) >= 0) &&
                       (((-1 + (-1 * <bcopy_1046@67:4>)) + <bcopy_1046@67:1>) >= 0))
              begin InterpProver.interpolate_check(62973)[8]
                begin InterpProver.interpolate_simplify(62974)[9]
                  begin InterpProver.interpolate_quick(63057)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(63066)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(63067)[12]
                        begin CsisatInterface.interpolate_csisat_log(63068)[13]
                          input1: (0 = v_sep_bcopy_1046_sep_67_sep_4 & 1 <= v_sep_bcopy_1046_sep_67_sep_1)
                          input2: ((1 + v_sep_bcopy_1046_sep_67_sep_4) <= 0 & (1 + v_sep_bcopy_1046_sep_67_sep_4) <= v_sep_bcopy_1046_sep_67_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(63069)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(63069)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_1046_sep_67_sep_4 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(63068)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_1046_sep_67_sep_4 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_1046_sep_67_sep_4 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(63067)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(63066)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(63057)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(62974)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(62973)[8] (0.001999 sec.)
              output: (0 <= <bcopy_1046@67:4>)
            end InterpProver.interpolate_log(62972)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(62971)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(62970)[5] (0.001999 sec.)
        output:
          P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<bcopy_1046@67:4>:int) =
          (0 <= <bcopy_1046@67:4>)
      end ApronInterface.convex_hull_interpolate(62917)[4] (0.002999 sec.)
      begin HcSolver.check_validity(63286)[4]
        input:
          P[<fail_1893@80:0>](<fail_1893@80:0>:bool)|- bot
          
          P[<<bcopy_1046@67:2>@70:0>](<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:0>:int),
          ((0 > <k_make_array_u_1321@77:0>) && ((<k_make_array_u_1321@77:1> > 0) && <fail_1893@80:0>))
          |- P[<fail_1893@80:0>](<fail_1893@80:0>:bool)
          
          P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int),
          (<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>)
          |- P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                         <<bcopy_1046@67:2>@70:0>:int)
          
           ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
          |- P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                  <bcopy_1046@67:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(63286)[4] (0.000000 sec.)
      solution:
        P[<fail_1893@80:0>](<fail_1893@80:0>:bool) = false
        P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int) =
        (0 <= <<bcopy_1046@67:2>@70:0>)
        P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<bcopy_1046@67:4>:int) =
        (0 <= <bcopy_1046@67:4>)
    end GenHcSolver.solve(57140)[3] (0.038994 sec.)
    begin YhornInterface.solve(63626)[3]
      begin HcSolver.solve_ub(63627)[4]
        encoded:
          P[<fail_1893@80:0>](<fail_1893@80:0>:int)|- bot
          
          P[<<bcopy_1046@67:2>@70:0>](<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:0>:int),
          ((0 > <k_make_array_u_1321@77:0>) && ((<k_make_array_u_1321@77:1> > 0) && (<fail_1893@80:0> = 1)))
          |- P[<fail_1893@80:0>](<fail_1893@80:0>:int)
          
          P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int),
          (<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>)
          |- P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                         <<bcopy_1046@67:2>@70:0>:int)
          
           ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
          |- P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                  <bcopy_1046@67:4>:int)
        input to Yhorn:
          P[<fail_1893@80:0>](<fail_1893@80:0>:int)|- bot
          
          P[<<bcopy_1046@67:2>@70:0>](<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:0>:int),
          ((<k_make_array_u_1321@77:1> > 0) && ((0 > <k_make_array_u_1321@77:0>) && (<fail_1893@80:0> = 1)))
          |- P[<fail_1893@80:0>](<fail_1893@80:0>:int)
          
          P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int),
          (<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>)
          |- P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                         <<bcopy_1046@67:2>@70:0>:int)
          
           ((<bcopy_1046@67:0> = <bcopy_1046@67:1>) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:4> = 0)))
          |- P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                  <bcopy_1046@67:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1893_sep_80_sep_0($141)) -> 1=0.
(($141-1=0) & (-$142>0) & ($143>0)) & (v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0($143,$143,$142)) -> v_sep_fail_1893_sep_80_sep_0($141).
($144-$145<0) & (v_sep_bcopy_1046_sep_67_sep_4($146,$145,$144)) -> v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0($146,$145,$144).
($147=0) & ($146>0) & (-$145+$146=0) -> v_sep_bcopy_1046_sep_67_sep_4($146,$145,$147).


v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0: X
v_sep_bcopy_1046_sep_67_sep_4: X
v_sep_fail_1893_sep_80_sep_0: X
....
v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0: X
v_sep_bcopy_1046_sep_67_sep_4: X
v_sep_fail_1893_sep_80_sep_0: X
...
v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0: X
v_sep_bcopy_1046_sep_67_sep_4: X
v_sep_fail_1893_sep_80_sep_0: X
....
v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0: X
v_sep_bcopy_1046_sep_67_sep_4: X
v_sep_fail_1893_sep_80_sep_0: X
....(0=0) & (v_sep_fail_1893_sep_80_sep_0($141)) -> 1=0.
(($141-1=0) & (-$142>0) & ($143>0)) & (v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0($143,$143,$142)) -> v_sep_fail_1893_sep_80_sep_0($141).
($144-$145<0) & (v_sep_bcopy_1046_sep_67_sep_4($146,$145,$144)) -> v_sep_bcopy_1046_sep_67_sep_2_sep_70_sep_0($146,$145,$144).
($147=0) & ($146>0) & (-$145+$146=0) -> v_sep_bcopy_1046_sep_67_sep_4($146,$145,$147).

        solution:
          P[<<bcopy_1046@67:2>@70:0>]($151:int,$153:int,$155:int) = (0 <= $155)
          P[<bcopy_1046@67:4>]($158:int,$160:int,$162:int) = (0 <= $162)
          P[<fail_1893@80:0>]($148:bool) = false
        
      end HcSolver.solve_ub(63627)[4] (0.009999 sec.)
      begin HcSolver.check_validity(63811)[4]
        input:
          P[<fail_1893@80:0>](<fail_1893@80:0>:bool)|- bot
          
          P[<<bcopy_1046@67:2>@70:0>](<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:1>:int,<k_make_array_u_1321@77:0>:int),
          ((0 > <k_make_array_u_1321@77:0>) && ((<k_make_array_u_1321@77:1> > 0) && <fail_1893@80:0>))
          |- P[<fail_1893@80:0>](<fail_1893@80:0>:bool)
          
          P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,<<bcopy_1046@67:2>@70:0>:int),
          (<<bcopy_1046@67:2>@70:0> < <bcopy_1046@67:1>)
          |- P[<<bcopy_1046@67:2>@70:0>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                         <<bcopy_1046@67:2>@70:0>:int)
          
           ((<bcopy_1046@67:4> = 0) && ((<bcopy_1046@67:0> > 0) && (<bcopy_1046@67:0> = <bcopy_1046@67:1>)))
          |- P[<bcopy_1046@67:4>](<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int,
                                  <bcopy_1046@67:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(63811)[4] (0.009998 sec.)
      solution:
        P[<<bcopy_1046@67:2>@70:0>]($151:int,$153:int,$155:int) = (0 <= $155)
        P[<bcopy_1046@67:4>]($158:int,$160:int,$162:int) = (0 <= $162)
        P[<fail_1893@80:0>]($148:bool) = false
    end YhornInterface.solve(63626)[3] (0.019997 sec.)
    
  end RefTypeInfer.infer_etrs(49215)[2] (0.208968 sec.)
  refinement types:
    main_1884: X
    f_1891: v1:int -> X
    main_1057: v1:int -> (v2:unit -> X) -> X
    f_1042: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:unit -> X) -> X
    bcopy_1046: v1:int ->
                v2:int ->
                (v3:{v3:int | (0 <= v3)} -> (v4:int -> X) -> X) ->
                (v7:int -> (v8:int -> X) -> X) ->
                v11:{v11:int | (0 <= v11)} -> ((v12:int -> (v13:int -> X) -> X) -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1321: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1893: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var248:int ->
            var247:int ->
            var246:int -> var245:int -> (var244:int -> (var243:int -> X) -> X) -> var240:int -> (var239:int -> X) -> X
    f_1892: var251:int -> var250:unit -> X
    f_bcopy_1886: var269:int ->
                  var268:int ->
                  var267:int ->
                  (var266:int -> (var265:int -> X) -> X) ->
                  ((var262:int -> (var261:int -> X) -> X) -> X) ->
                  (var257:int -> (var256:int -> X) -> X) -> var253:int -> X
    f_bcopy_1887: var287:int ->
                  var286:int ->
                  var285:int ->
                  var284:int ->
                  ((var283:int -> (var282:int -> X) -> X) -> X) ->
                  (var278:int -> (var277:int -> X) -> X) -> (var274:int -> (var273:int -> X) -> X) -> X
    f_f_1890: var299:int ->
              (var298:int -> (var297:int -> X) -> X) ->
              (var294:unit -> X) -> (var292:int -> (var291:int -> X) -> X) -> X
    f_print_array_1888: var314:int ->
                        var313:int ->
                        var312:int ->
                        (var311:int -> (var310:int -> X) -> X) ->
                        (var307:int -> (var306:int -> X) -> X) -> (var303:unit -> X) -> var301:int -> X
    f_print_array_1889: var330:int ->
                        var329:int ->
                        var328:int ->
                        var327:int ->
                        (var326:int -> (var325:int -> X) -> X) ->
                        (var322:int -> (var321:int -> X) -> X) -> (var318:unit -> X) -> var316:unit -> X
    f_update_1885: var344:int ->
                   var343:int ->
                   var342:int ->
                   (var341:int -> (var340:int -> X) -> X) ->
                   ((var337:int -> (var336:int -> X) -> X) -> X) -> var332:int -> X
    k_make_array_u_1332: var350:int -> var349:int -> (var348:int -> X) -> var346:unit -> X
    print_array_1052: var364:int ->
                      (var363:int -> (var362:int -> X) -> X) ->
                      var359:int -> (var358:int -> (var357:int -> X) -> X) -> var354:int -> (var353:unit -> X) -> X
    print_int_1040: var368:int -> (var367:unit -> X) -> X
    update_1033: var381:int ->
                 var380:int ->
                 (var379:int -> (var378:int -> X) -> X) ->
                 var375:int -> ((var374:int -> (var373:int -> X) -> X) -> X) -> X
  abstraction types:
    main_1884: X
    f_1891: v1:int -> X
    main_1057: v1:int -> (v2:unit -> X) -> X
    f_1042: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:unit -> X) -> X
    bcopy_1046: v1:int ->
                v2:int ->
                (v3:int[v3 -> (0 <= v3)] -> (v4:int -> X) -> X) ->
                (v7:int -> (v8:int -> X) -> X) ->
                v11:int[v11 -> (0 <= v11)] -> ((v12:int -> (v13:int -> X) -> X) -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1321: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1893: v1:bool -> (v2:unit -> X) -> X
    a_1038: var248:int ->
            var247:int ->
            var246:int -> var245:int -> (var244:int -> (var243:int -> X) -> X) -> var240:int -> (var239:int -> X) -> X
    f_1892: var251:int -> var250:unit -> X
    f_bcopy_1886: var269:int ->
                  var268:int ->
                  var267:int ->
                  (var266:int -> (var265:int -> X) -> X) ->
                  ((var262:int -> (var261:int -> X) -> X) -> X) ->
                  (var257:int -> (var256:int -> X) -> X) -> var253:int -> X
    f_bcopy_1887: var287:int ->
                  var286:int ->
                  var285:int ->
                  var284:int ->
                  ((var283:int -> (var282:int -> X) -> X) -> X) ->
                  (var278:int -> (var277:int -> X) -> X) -> (var274:int -> (var273:int -> X) -> X) -> X
    f_f_1890: var299:int ->
              (var298:int -> (var297:int -> X) -> X) ->
              (var294:unit -> X) -> (var292:int -> (var291:int -> X) -> X) -> X
    f_print_array_1888: var314:int ->
                        var313:int ->
                        var312:int ->
                        (var311:int -> (var310:int -> X) -> X) ->
                        (var307:int -> (var306:int -> X) -> X) -> (var303:unit -> X) -> var301:int -> X
    f_print_array_1889: var330:int ->
                        var329:int ->
                        var328:int ->
                        var327:int ->
                        (var326:int -> (var325:int -> X) -> X) ->
                        (var322:int -> (var321:int -> X) -> X) -> (var318:unit -> X) -> var316:unit -> X
    f_update_1885: var344:int ->
                   var343:int ->
                   var342:int ->
                   (var341:int -> (var340:int -> X) -> X) ->
                   ((var337:int -> (var336:int -> X) -> X) -> X) -> var332:int -> X
    k_make_array_u_1332: var350:int -> var349:int -> (var348:int -> X) -> var346:unit -> X
    print_array_1052: var364:int ->
                      (var363:int -> (var362:int -> X) -> X) ->
                      var359:int -> (var358:int -> (var357:int -> X) -> X) -> var354:int -> (var353:unit -> X) -> X
    print_int_1040: var368:int -> (var367:unit -> X) -> X
    update_1033: var381:int ->
                 var380:int ->
                 (var379:int -> (var378:int -> X) -> X) ->
                 var375:int -> ((var374:int -> (var373:int -> X) -> X) -> X) -> X
  
end AbsTypeInfer.refine(49214)[1] (0.216967 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1884
  main_1884 -> (rand_int f_1891)
  a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 when (i_1034 = j_1039) -> (k_update_a_1401 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 when (
      not (i_1034 = j_1039)) -> (des_1036 i_1034 k_update_a_1401)
  bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 when (i_1050 >= m_1047) -> (k_f_bcopy_1535 des_1049)
  bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 when (
      not (i_1050 >= m_1047)) -> (src_1048 i_1050 (f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048))
  f_1042 m_1043 src_1044 des_1045 k_f_1476 ->
      (bcopy_1046 m_1043 m_1043 src_1044 des_1045 0 (f_f_1890 m_1043 des_1045 k_f_1476))
  f_1891 x_1859 -> (main_1057 x_1859 (f_1892 x_1859))
  f_1892 x_1859 x_1856 -> end
  f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048 x_1591 ->
      (update_1033 i_1050 m_1047 des_1049 x_1591 (f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048))
  f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048 x_1547 ->
      (bcopy_1046 m_1043 m_1047 src_1048 x_1547 (i_1050 + 1) k_f_bcopy_1535)
  f_f_1890 m_1043 des_1045 k_f_1476 x_1715 -> (print_array_1052 m_1043 des_1045 m_1043 x_1715 0 k_f_1476)
  f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664 x_1687 ->
      (print_int_1040 x_1687 (f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664))
  f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664 x_1667 ->
      (print_array_1052 m_1043 des_1045 m_1053 array_1054 (i_1055 + 1) k_f_print_array_1664)
  f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380 x_1386 ->
      (k_update_1380 (a_1038 i_1034 n_1035 x_1037 x_1386 des_1036))
  fail_1893 b k -> {fail} => (k ())
  k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 when b_1333 ->
      (k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 ())
  k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 when (not b_1333) ->
      (fail_1893 true (k_make_array_u_1332 i_1032 n_1031 k_make_array_1315))
  k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 x_1318 -> (k_make_array_1315 0)
  main_1057 n_1058 k_main_1787 when (n_1058 > 0) ->
      (f_1042 n_1058 (make_array_1030 n_1058) (make_array_1030 n_1058) k_main_1787)
  main_1057 n_1058 k_main_1787 when (not (n_1058 > 0)) -> (k_main_1787 ())
  make_array_1030 n_1031 i_1032 k_make_array_1315 when (0 <= i_1032) ->
      (k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1315 when (not (0 <= i_1032)) ->
      (k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 false)
  print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 when (
      i_1055 >= m_1053) -> (k_f_print_array_1664 ())
  print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 when (
      not (i_1055 >= m_1053)) ->
      (des_1045 i_1055 (f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664))
  print_int_1040 n_1041 k_print_int_1432 -> (k_print_int_1432 ())
  update_1033 i_1034 n_1035 des_1036 x_1037 k_update_1380 ->
      (des_1036 i_1034 (f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380))
Types:
  main_1884 : X
  bcopy_1046 : (x_1:int ->
                x_2:int ->
                (x_4:int[x_4 >= 0] -> (int -> X) -> X) ->
                (x_10:int[x_1 >= x_10 + 1] -> (int -> X) -> X) ->
                x_15:int[x_15 >= 0; x_1 >= x_2] -> ((int -> (int -> X) -> X) -> X) -> X)
  fail_1893 : (x_1:bool[x_1] -> (unit -> X) -> X)
  print_array_1052 : (int -> (int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1884 ... --> 
  f_1891 ... --> 
  main_1057 [1/2] ... --> 
  f_1042 ... --> 
  bcopy_1046 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1321 [1/2] ... --> 
  k_make_array_u_1332 ... --> 
  f_bcopy_1886 ... --> 
  update_1033 ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1321 [2/2] ... --> 
  fail_1893 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(65333)[1]
  program:
    main_1884  | true = ((Random.int 0) f_1891)
    a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 | (
    i_1034 = j_1039) = (k_update_a_1401 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 | (
    not (i_1034 = j_1039)) = (des_1036 i_1034
                                       k_update_a_1401)
    bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 | (
    i_1050 >= m_1047) = (k_f_bcopy_1535 des_1049)
    bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 | (
    not (i_1050 >= m_1047)) = (src_1048 i_1050
                                        (f_bcopy_1886 i_1050
                                                      m_1043
                                                      m_1047
                                                      des_1049
                                                      k_f_bcopy_1535
                                                      src_1048))
    f_1042 m_1043 src_1044 des_1045 k_f_1476 | true = (bcopy_1046
                                                         m_1043
                                                         m_1043
                                                         src_1044
                                                         des_1045
                                                         0
                                                         (f_f_1890 m_1043
                                                                   des_1045
                                                                   k_f_1476))
    f_1891 x_1859 | true = (main_1057 x_1859
                                      (f_1892 x_1859))
    f_1892 x_1859 x_1856 | true = end
    f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048 x_1591 | true = (
    update_1033 i_1050
                m_1047
                des_1049
                x_1591
                (f_bcopy_1887 i_1050
                              m_1043
                              m_1047
                              x_1591
                              k_f_bcopy_1535
                              src_1048))
    f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048 x_1547 | true = (
    bcopy_1046 m_1043
               m_1047
               src_1048
               x_1547
               (i_1050 + 1)
               k_f_bcopy_1535)
    f_f_1890 m_1043 des_1045 k_f_1476 x_1715 | true = (print_array_1052 m_1043
                                                                    des_1045
                                                                    m_1043
                                                                    x_1715
                                                                    0
                                                                    k_f_1476)
    f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664 x_1687 | true = (
    print_int_1040 x_1687
                   (f_print_array_1889 i_1055
                                       m_1043
                                       m_1053
                                       x_1687
                                       array_1054
                                       des_1045
                                       k_f_print_array_1664))
    f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664 x_1667 | true = (
    print_array_1052 m_1043
                     des_1045
                     m_1053
                     array_1054
                     (i_1055 + 1)
                     k_f_print_array_1664)
    f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380 x_1386 | true = (
    k_update_1380 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1386
                          des_1036))
    fail_1893 b k | true = (fail ())
    k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 | b_1333 = (
    k_make_array_u_1332 i_1032
                        n_1031
                        k_make_array_1315
                        ())
    k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 | (not b_1333) = (
    fail_1893 true
              (k_make_array_u_1332 i_1032
                                   n_1031
                                   k_make_array_1315))
    k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 x_1318 | true = (
    k_make_array_1315 0)
    main_1057 n_1058 k_main_1787 | (n_1058 > 0) = (f_1042
                                                     n_1058
                                                     (make_array_1030 n_1058)
                                                     (make_array_1030 n_1058)
                                                     k_main_1787)
    main_1057 n_1058 k_main_1787 | (not (n_1058 > 0)) = (k_main_1787 ())
    make_array_1030 n_1031 i_1032 k_make_array_1315 | (0 <= i_1032) = (
    k_make_array_u_1321 i_1032
                        n_1031
                        k_make_array_1315
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1315 | (not (0 <= i_1032)) = (
    k_make_array_u_1321 i_1032
                        n_1031
                        k_make_array_1315
                        false)
    print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 | (
    i_1055 >= m_1053) = (k_f_print_array_1664 ())
    print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 | (
    not (i_1055 >= m_1053)) = (des_1045
                                 i_1055
                                 (f_print_array_1888 i_1055
                                                     m_1043
                                                     m_1053
                                                     array_1054
                                                     des_1045
                                                     k_f_print_array_1664))
    print_int_1040 n_1041 k_print_int_1432 | true = (k_print_int_1432 ())
    update_1033 i_1034 n_1035 des_1036 x_1037 k_update_1380 | true = (
    des_1036 i_1034
             (f_update_1885 i_1034
                            n_1035
                            x_1037
                            des_1036
                            k_update_1380))
    main_1884:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    bcopy_1046:int ->
               int ->
               (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
    f_1042:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> X
    f_1891:int -> X
    f_1892:int -> unit -> X
    f_bcopy_1886:int ->
                 int ->
                 int ->
                 (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_1887:int ->
                 int ->
                 int ->
                 int -> ((int -> (int -> X) -> X) -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> X
    f_f_1890:int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> X
    f_print_array_1888:int ->
                       int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> int -> X
    f_print_array_1889:int ->
                       int ->
                       int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> unit -> X
    f_update_1885:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1893:bool -> (unit -> X) -> X
    k_make_array_u_1321:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1332:int -> int -> (int -> X) -> unit -> X
    main_1057:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    print_array_1052:int -> (int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    print_int_1040:int -> (unit -> X) -> X
    update_1033:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1042,f_1891,f_1892,f_bcopy_1886,f_bcopy_1887,f_f_1890,f_print_array_1888,f_print_array_1889,f_update_1885,k_make_array_u_1321,k_make_array_u_1332,main_1057,make_array_1030,print_int_1040,update_1033
  counterexample: 0:0:0:0:1:0:0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1891@86:0> = var382)
     [true.(<main_1057@88:0> = <f_1891@86:0>)
      [(<main_1057@88:0> > 0).(<f_1042@91:0> = <main_1057@88:0>)
       [true.((<bcopy_1046@93:0> = <f_1042@91:0>) && ((<bcopy_1046@93:1> = <f_1042@91:0>) && (<bcopy_1046@93:4> = 0)))
        [(not (<bcopy_1046@93:4> >= <bcopy_1046@93:1>)).(<<bcopy_1046@93:2>@96:0> = <bcopy_1046@93:4>)
         [true.(<<f_1042@91:1>@98:0> = <<bcopy_1046@93:2>@96:0>)
          [true.((<make_array_1030@100:0> = <main_1057@88:0>) && (<make_array_1030@100:1> = <<f_1042@91:1>@98:0>))
           [(0 <= <make_array_1030@100:1>).
            ((<k_make_array_u_1321@103:0> = <make_array_1030@100:1>) &&
             ((<k_make_array_u_1321@103:1> = <make_array_1030@100:0>) &&
              (<k_make_array_u_1321@103:3> = (<make_array_1030@100:1> < <make_array_1030@100:0>))))
            [<k_make_array_u_1321@103:3>.
             ((<k_make_array_u_1332@106:0> = <k_make_array_u_1321@103:0>) &&
              ((<k_make_array_u_1332@106:1> = <k_make_array_u_1321@103:1>) && (<k_make_array_u_1332@106:3> = ())))
             [true.(<<k_make_array_u_1332@106:2>@108:0> = 0)
              [true.(<<k_make_array_u_1321@103:2>@110:0> = <<k_make_array_u_1332@106:2>@108:0>)
               [true.(<<make_array_1030@100:2>@112:0> = <<k_make_array_u_1321@103:2>@110:0>)
                [true.(<<<f_1042@91:1>@98:1>@114:0> = <<make_array_1030@100:2>@112:0>)
                 [true.(<<<bcopy_1046@93:2>@96:1>@116:0> = <<<f_1042@91:1>@98:1>@114:0>)
                  [true.
                   ((<f_bcopy_1886@118:0> = <bcopy_1046@93:4>) &&
                    ((<f_bcopy_1886@118:1> = <bcopy_1046@93:0>) &&
                     ((<f_bcopy_1886@118:2> = <bcopy_1046@93:1>) &&
                      (<f_bcopy_1886@118:6> = <<<bcopy_1046@93:2>@96:1>@116:0>))))
                   [true.
                    ((<update_1033@120:0> = <f_bcopy_1886@118:0>) &&
                     ((<update_1033@120:1> = <f_bcopy_1886@118:2>) && (<update_1033@120:3> = <f_bcopy_1886@118:6>)))
                    [true.(<<update_1033@120:2>@122:0> = <update_1033@120:0>)
                     [true.(<<f_bcopy_1886@118:3>@124:0> = <<update_1033@120:2>@122:0>)
                      [true.(<<bcopy_1046@93:3>@126:0> = <<f_bcopy_1886@118:3>@124:0>)
                       [true.(<<f_1042@91:2>@128:0> = <<bcopy_1046@93:3>@126:0>)
                        [true.
                         ((<make_array_1030@130:0> = <main_1057@88:0>) &&
                          (<make_array_1030@130:1> = <<f_1042@91:2>@128:0>))
                         [(not (0 <= <make_array_1030@130:1>)).
                          ((<k_make_array_u_1321@133:0> = <make_array_1030@130:1>) &&
                           ((<k_make_array_u_1321@133:1> = <make_array_1030@130:0>) &&
                            (<k_make_array_u_1321@133:3> = false)))
                          [(not <k_make_array_u_1321@133:3>).(<fail_1893@136:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(65334)[2]
    horn clauses:
      P[<fail_1893@136:0>](<fail_1893@136:0>:bool)|- bot
      
      P[<k_make_array_u_1321@133:3>](<k_make_array_u_1321@133:0>:int,<k_make_array_u_1321@133:1>:int,false:bool),
      <fail_1893@136:0> |- P[<fail_1893@136:0>](<fail_1893@136:0>:bool)
      
      P[<make_array_1030@130:1>](<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:0>:int),
      ((0 > <k_make_array_u_1321@133:0>) && (not <k_make_array_u_1321@133:3>))
      |- P[<k_make_array_u_1321@133:3>](<k_make_array_u_1321@133:0>:int,
                                        <k_make_array_u_1321@133:1>:int,
                                        <k_make_array_u_1321@133:3>:bool)
      
      P[<main_1057@88:0>](<make_array_1030@130:0>:int),
      P[<<f_1042@91:2>@128:0>](<make_array_1030@130:0>:int,<make_array_1030@130:1>:int), (
      <make_array_1030@130:0> > 0)
      |- P[<make_array_1030@130:1>](<make_array_1030@130:0>:int,<make_array_1030@130:1>:int)
      
      P[<f_1042@91:0>](<f_1042@91:0>:int),
      P[<<bcopy_1046@93:3>@126:0>](<f_1042@91:0>:int,<f_1042@91:0>:int,<<f_1042@91:2>@128:0>:int)|- P[<<f_1042@91:2>@128:0>](
      <f_1042@91:0>:int,<<f_1042@91:2>@128:0>:int)
      
      P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
      P[<<f_bcopy_1886@118:3>@124:0>](<<bcopy_1046@93:2>@96:0>:int,<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
      (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
      |- P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                      <<bcopy_1046@93:3>@126:0>:int)
      
      P[<f_bcopy_1886@118:6>](<f_bcopy_1886@118:0>:int,<f_bcopy_1886@118:1>:int,<f_bcopy_1886@118:2>:int,<update_1033@120:3>:int),
      P[<<update_1033@120:2>@122:0>](<f_bcopy_1886@118:0>:int,<f_bcopy_1886@118:2>:int,<<f_bcopy_1886@118:3>@124:0>:int)|- P[<<f_bcopy_1886@118:3>@124:0>](
      <f_bcopy_1886@118:0>:int,<f_bcopy_1886@118:1>:int,<f_bcopy_1886@118:2>:int,
      <<f_bcopy_1886@118:3>@124:0>:int)
      
      P[<update_1033@120:3>](<update_1033@120:0>:int,<update_1033@120:1>:int,<update_1033@120:3>:int),
      (<<update_1033@120:2>@122:0> = <update_1033@120:0>)
      |- P[<<update_1033@120:2>@122:0>](<update_1033@120:0>:int,<update_1033@120:1>:int,
                                        <<update_1033@120:2>@122:0>:int)
      
      P[<f_bcopy_1886@118:6>](<update_1033@120:0>:int,<f_bcopy_1886@118:1>:int,<update_1033@120:1>:int,<update_1033@120:3>:int)|- P[<update_1033@120:3>](
      <update_1033@120:0>:int,<update_1033@120:1>:int,<update_1033@120:3>:int)
      
      P[<bcopy_1046@93:4>](<f_bcopy_1886@118:1>:int,<f_bcopy_1886@118:2>:int,<f_bcopy_1886@118:0>:int),
      P[<<<bcopy_1046@93:2>@96:1>@116:0>](<f_bcopy_1886@118:1>:int,<f_bcopy_1886@118:2>:int,<f_bcopy_1886@118:0>:int,<f_bcopy_1886@118:6>:int),
      (<f_bcopy_1886@118:0> < <f_bcopy_1886@118:2>)
      |- P[<f_bcopy_1886@118:6>](<f_bcopy_1886@118:0>:int,<f_bcopy_1886@118:1>:int,
                                 <f_bcopy_1886@118:2>:int,<f_bcopy_1886@118:6>:int)
      
      P[<f_1042@91:0>](<bcopy_1046@93:0>:int),
      P[<<<f_1042@91:1>@98:1>@114:0>](<bcopy_1046@93:0>:int,<<bcopy_1046@93:2>@96:0>:int,<<<bcopy_1046@93:2>@96:1>@116:0>:int),
      (<bcopy_1046@93:0> = <bcopy_1046@93:1>)
      |- P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                             <<bcopy_1046@93:2>@96:0>:int,
                                             <<<bcopy_1046@93:2>@96:1>@116:0>:int)
      
      P[<main_1057@88:0>](<f_1042@91:0>:int),
      P[<<make_array_1030@100:2>@112:0>](<f_1042@91:0>:int,<<f_1042@91:1>@98:0>:int,<<<f_1042@91:1>@98:1>@114:0>:int),
      P[<f_1042@91:0>](<f_1042@91:0>:int), (<f_1042@91:0> > 0)
      |- P[<<<f_1042@91:1>@98:1>@114:0>](<f_1042@91:0>:int,<<f_1042@91:1>@98:0>:int,
                                         <<<f_1042@91:1>@98:1>@114:0>:int)
      
      P[<make_array_1030@100:1>](<make_array_1030@100:0>:int,<make_array_1030@100:1>:int),
      P[<<k_make_array_u_1321@103:2>@110:0>](<make_array_1030@100:1>:int,<make_array_1030@100:0>:int,<<make_array_1030@100:2>@112:0>:int),
      (0 <= <make_array_1030@100:1>)
      |- P[<<make_array_1030@100:2>@112:0>](<make_array_1030@100:0>:int,
                                            <make_array_1030@100:1>:int,
                                            <<make_array_1030@100:2>@112:0>:int)
      
      P[<k_make_array_u_1321@103:3>](<k_make_array_u_1321@103:0>:int,<k_make_array_u_1321@103:1>:int,true:bool),
      P[<<k_make_array_u_1332@106:2>@108:0>](<k_make_array_u_1321@103:0>:int,<k_make_array_u_1321@103:1>:int,<<k_make_array_u_1321@103:2>@110:0>:int)|- P[<<k_make_array_u_1321@103:2>@110:0>](
      <k_make_array_u_1321@103:0>:int,<k_make_array_u_1321@103:1>:int,
      <<k_make_array_u_1321@103:2>@110:0>:int)
      
      P[<k_make_array_u_1332@106:3>](<k_make_array_u_1332@106:0>:int,<k_make_array_u_1332@106:1>:int,<k_make_array_u_1332@106:3>:unit),
      (<<k_make_array_u_1332@106:2>@108:0> = 0)
      |- P[<<k_make_array_u_1332@106:2>@108:0>](<k_make_array_u_1332@106:0>:int,
                                                <k_make_array_u_1332@106:1>:int,
                                                <<k_make_array_u_1332@106:2>@108:0>:int)
      
      P[<k_make_array_u_1321@103:3>](<k_make_array_u_1332@106:0>:int,<k_make_array_u_1332@106:1>:int,true:bool)|- P[<k_make_array_u_1332@106:3>](
      <k_make_array_u_1332@106:0>:int,<k_make_array_u_1332@106:1>:int,
      <k_make_array_u_1332@106:3>:unit)
      
      P[<make_array_1030@100:1>](<k_make_array_u_1321@103:1>:int,<k_make_array_u_1321@103:0>:int),
      ((0 <= <k_make_array_u_1321@103:0>) &&
       (<k_make_array_u_1321@103:3> = (<k_make_array_u_1321@103:0> < <k_make_array_u_1321@103:1>)))
      |- P[<k_make_array_u_1321@103:3>](<k_make_array_u_1321@103:0>:int,
                                        <k_make_array_u_1321@103:1>:int,
                                        <k_make_array_u_1321@103:3>:bool)
      
      P[<main_1057@88:0>](<make_array_1030@100:0>:int),
      P[<<f_1042@91:1>@98:0>](<make_array_1030@100:0>:int,<make_array_1030@100:1>:int), (
      <make_array_1030@100:0> > 0)
      |- P[<make_array_1030@100:1>](<make_array_1030@100:0>:int,<make_array_1030@100:1>:int)
      
      P[<f_1042@91:0>](<f_1042@91:0>:int),
      P[<<bcopy_1046@93:2>@96:0>](<f_1042@91:0>:int,<f_1042@91:0>:int,<<f_1042@91:1>@98:0>:int)|- P[<<f_1042@91:1>@98:0>](
      <f_1042@91:0>:int,<<f_1042@91:1>@98:0>:int)
      
      P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
      (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
      |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                     <<bcopy_1046@93:2>@96:0>:int)
      
      P[<f_1042@91:0>](<bcopy_1046@93:0>:int), ((<bcopy_1046@93:4> = 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))
      |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                              <bcopy_1046@93:4>:int)
      
      P[<main_1057@88:0>](<f_1042@91:0>:int), (<f_1042@91:0> > 0) |- P[<f_1042@91:0>](<f_1042@91:0>:int)
      
      P[<f_1891@86:0>](<main_1057@88:0>:int)|- P[<main_1057@88:0>](<main_1057@88:0>:int)
      
      |- P[<f_1891@86:0>](<f_1891@86:0>:int)
    call trees:
      <main_1884@83>
        <f_1891@86>
          <main_1057@88>
            <f_1042@91>
              <bcopy_1046@93>
              </<bcopy_1046@93:2>@96>
            </<f_1042@91:1>@98>
            <make_array_1030@100>
              <k_make_array_u_1321@103>
                <k_make_array_u_1332@106>
                </<k_make_array_u_1332@106:2>@108>
              </<k_make_array_u_1321@103:2>@110>
            </<make_array_1030@100:2>@112>
            <<<f_1042@91:1>@98:1>@114>
              <<<bcopy_1046@93:2>@96:1>@116>
                <f_bcopy_1886@118>
                  <update_1033@120>
                  </<update_1033@120:2>@122>
                </<f_bcopy_1886@118:3>@124>
              </<bcopy_1046@93:3>@126>
            </<f_1042@91:2>@128>
            <make_array_1030@130>
              <k_make_array_u_1321@133>
                <fail_1893@136>
    inlined horn clauses:
      P[<fail_1893@136:0>](<fail_1893@136:0>:bool)|- bot
      
      P[<<bcopy_1046@93:3>@126:0>](<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:0>:int),
      ((0 > <k_make_array_u_1321@133:0>) && ((<k_make_array_u_1321@133:1> > 0) && <fail_1893@136:0>))
      |- P[<fail_1893@136:0>](<fail_1893@136:0>:bool)
      
      P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int,var386:int),
      P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
      (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)
      |- P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                      <<bcopy_1046@93:3>@126:0>:int)
      
      P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:0>:int,<<bcopy_1046@93:2>@96:0>:int),
      ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
       ((0 <= <<bcopy_1046@93:2>@96:0>) &&
        ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
         ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))))
      |- P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                             <<bcopy_1046@93:2>@96:0>:int,
                                             <<<bcopy_1046@93:2>@96:1>@116:0>:int)
      
      P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
      (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
      |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                     <<bcopy_1046@93:2>@96:0>:int)
      
       ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
      |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                              <bcopy_1046@93:4>:int)
    begin ParamSubstInfer.infer(69416)[3]
      
    end ParamSubstInfer.infer(69416)[3] (0.223966 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(69418)[3]
      
    end RefTypeInfer.elim_coeffs(69418)[3] (0.002999 sec.)
    begin GenHcSolver.solve(69972)[3]
      Horn clauses:
        P[<fail_1893@136:0>](<fail_1893@136:0>:bool)|- bot
        
        P[<<bcopy_1046@93:3>@126:0>](<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:0>:int),
        ((0 > <k_make_array_u_1321@133:0>) && ((<k_make_array_u_1321@133:1> > 0) && <fail_1893@136:0>))
        |- P[<fail_1893@136:0>](<fail_1893@136:0>:bool)
        
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int,var386:int),
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
        (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)
        |- P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                        <<bcopy_1046@93:3>@126:0>:int)
        
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:0>:int,<<bcopy_1046@93:2>@96:0>:int),
        ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
         ((0 <= <<bcopy_1046@93:2>@96:0>) &&
          ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
           ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))))
        |- P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,
                                               <bcopy_1046@93:1>:int,
                                               <<bcopy_1046@93:2>@96:0>:int,
                                               <<<bcopy_1046@93:2>@96:1>@116:0>:int)
        
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
        (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
        |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                       <<bcopy_1046@93:2>@96:0>:int)
        
         ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                <bcopy_1046@93:4>:int)
      lower bounds:
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<bcopy_1046@93:4>:int) =
        ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int) =
        ((<<bcopy_1046@93:2>@96:0> = 0) &&
         ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
          ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int,<<<bcopy_1046@93:2>@96:1>@116:0>:int) =
        ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
         ((<<bcopy_1046@93:2>@96:0> = 0) &&
          ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
           ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:1> = <bcopy_1046@93:0>)))))
        P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int) =
        ((<<bcopy_1046@93:3>@126:0> = 0) &&
         ((<bcopy_1046@93:0> = <bcopy_1046@93:1>) &&
          ((<bcopy_1046@93:0> > 0) &&
           ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:0>) && (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)))))
        P[<fail_1893@136:0>](<fail_1893@136:0>:bool) = false
      upper bounds:
        P[<fail_1893@136:0>](var388:bool) = true
      begin GenHcSolver.classify_pids(74819)[4]
        output:
          [<fail_1893@136:0>]
      end GenHcSolver.classify_pids(74819)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(74822)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(74823)[5]
          begin InterpProver.interpolate_fresh(74824)[6]
            begin InterpProver.interpolate_log(74825)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(74826)[8]
                begin InterpProver.interpolate_simplify(74827)[9]
                  begin InterpProver.interpolate_quick(74840)[10]
                    
                  end InterpProver.interpolate_quick(74840)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(74844)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(74844)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(74827)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(74826)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(74825)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(74824)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(74823)[5] (0.000000 sec.)
        output:
          P[<fail_1893@136:0>](<fail_1893@136:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(74822)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_1046@93:3>@126:0>](<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:0>:int),
        ((<k_make_array_u_1321@133:1> > 0) && (0 > <k_make_array_u_1321@133:0>)) |- bot
        
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int,var386:int),
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
        (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)
        |- P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                        <<bcopy_1046@93:3>@126:0>:int)
        
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:0>:int,<<bcopy_1046@93:2>@96:0>:int),
        ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
         ((0 <= <<bcopy_1046@93:2>@96:0>) &&
          ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
           ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))))
        |- P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,
                                               <bcopy_1046@93:1>:int,
                                               <<bcopy_1046@93:2>@96:0>:int,
                                               <<<bcopy_1046@93:2>@96:1>@116:0>:int)
        
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
        (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
        |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                       <<bcopy_1046@93:2>@96:0>:int)
        
         ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                <bcopy_1046@93:4>:int)
      lower bounds:
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<bcopy_1046@93:4>:int) =
        ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int) =
        ((<<bcopy_1046@93:2>@96:0> = 0) &&
         ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
          ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int,<<<bcopy_1046@93:2>@96:1>@116:0>:int) =
        ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
         ((<<bcopy_1046@93:2>@96:0> = 0) &&
          ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
           ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:1> = <bcopy_1046@93:0>)))))
        P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int) =
        ((<<bcopy_1046@93:3>@126:0> = 0) &&
         ((<bcopy_1046@93:0> = <bcopy_1046@93:1>) &&
          ((<bcopy_1046@93:0> > 0) &&
           ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:0>) && (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)))))
      upper bounds:
        P[<<bcopy_1046@93:3>@126:0>](var389:int,var390:int,var391:int) =
        ((var389 <= 0) || ((0 <= var391) || (var389 <> var390)))
      begin GenHcSolver.classify_pids(80633)[4]
        output:
          [<<bcopy_1046@93:3>@126:0>]
      end GenHcSolver.classify_pids(80633)[4] (0.000000 sec.)
      lb:((<<bcopy_1046@93:3>@126:0> = 0) &&
          ((<bcopy_1046@93:0> = <bcopy_1046@93:1>) &&
           ((<bcopy_1046@93:0> > 0) &&
            ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:0>) && (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)))))
      nub:(not
             ((<bcopy_1046@93:0> <= 0) ||
              ((0 <= <<bcopy_1046@93:3>@126:0>) || (<bcopy_1046@93:0> <> <bcopy_1046@93:1>))))
      begin ApronInterface.convex_hull_interpolate(80636)[4]
        lb:((<<bcopy_1046@93:3>@126:0> = 0) &&
            ((<bcopy_1046@93:0> = <bcopy_1046@93:1>) &&
             ((<bcopy_1046@93:0> > 0) &&
              ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:0>) && (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)))))
        nub:(not
               ((<bcopy_1046@93:0> <= 0) ||
                ((0 <= <<bcopy_1046@93:3>@126:0>) || (<bcopy_1046@93:0> <> <bcopy_1046@93:1>))))
        lb':((<<bcopy_1046@93:3>@126:0> = 0) &&
             ((<bcopy_1046@93:0> = <bcopy_1046@93:1>) &&
              ((<bcopy_1046@93:0> > 0) &&
               ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:0>) && (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)))))
        nub':(not
                ((<bcopy_1046@93:0> <= 0) ||
                 ((0 <= <<bcopy_1046@93:3>@126:0>) || (<bcopy_1046@93:0> <> <bcopy_1046@93:1>))))
        begin InterpProver.interpolate(80637)[5]
          begin InterpProver.interpolate_fresh(80638)[6]
            begin InterpProver.interpolate_log(80639)[7]
              input1: ((<<bcopy_1046@93:3>@126:0> = 0) &&
                       ((<bcopy_1046@93:0> = <bcopy_1046@93:1>) &&
                        ((<bcopy_1046@93:0> > 0) &&
                         ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:0>) &&
                          (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)))))
              input2: (not
                         ((<bcopy_1046@93:0> <= 0) ||
                          ((0 <= <<bcopy_1046@93:3>@126:0>) || (<bcopy_1046@93:0> <> <bcopy_1046@93:1>))))
              begin InterpProver.interpolate_check(80640)[8]
                begin InterpProver.interpolate_simplify(80641)[9]
                  begin InterpProver.interpolate_quick(80846)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(80855)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(80856)[12]
                        begin CsisatInterface.interpolate_csisat_log(80857)[13]
                          input1: (0 = v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0 & v_sep_bcopy_1046_sep_93_sep_0 = v_sep_bcopy_1046_sep_93_sep_1 & 1 <= v_sep_bcopy_1046_sep_93_sep_0 & (1 + v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0) <= v_sep_bcopy_1046_sep_93_sep_0 & (1 + v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0) <= v_sep_bcopy_1046_sep_93_sep_1)
                          input2: (v_sep_bcopy_1046_sep_93_sep_0 = v_sep_bcopy_1046_sep_93_sep_1 & 1 <= v_sep_bcopy_1046_sep_93_sep_0 & (1 + v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(80858)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(80858)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(80857)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(80856)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(80855)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(80846)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(80641)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(80640)[8] (0.003000 sec.)
              output: (0 <= <<bcopy_1046@93:3>@126:0>)
            end InterpProver.interpolate_log(80639)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(80638)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(80637)[5] (0.003000 sec.)
        output:
          P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int) =
          (0 <= <<bcopy_1046@93:3>@126:0>)
      end ApronInterface.convex_hull_interpolate(80636)[4] (0.003000 sec.)
      Horn clauses:
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int,var386:int),
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
        ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>) && (0 > <<bcopy_1046@93:3>@126:0>)) |- bot
        
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:0>:int,<<bcopy_1046@93:2>@96:0>:int),
        ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
         ((0 <= <<bcopy_1046@93:2>@96:0>) &&
          ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
           ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))))
        |- P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,
                                               <bcopy_1046@93:1>:int,
                                               <<bcopy_1046@93:2>@96:0>:int,
                                               <<<bcopy_1046@93:2>@96:1>@116:0>:int)
        
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
        (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
        |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                       <<bcopy_1046@93:2>@96:0>:int)
        
         ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                <bcopy_1046@93:4>:int)
      lower bounds:
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<bcopy_1046@93:4>:int) =
        ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int) =
        ((<<bcopy_1046@93:2>@96:0> = 0) &&
         ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
          ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int,<<<bcopy_1046@93:2>@96:1>@116:0>:int) =
        ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
         ((<<bcopy_1046@93:2>@96:0> = 0) &&
          ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
           ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:1> = <bcopy_1046@93:0>)))))
      upper bounds:
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](var392:int,var393:int,var394:int,var395:int) = true
      begin GenHcSolver.classify_pids(84528)[4]
        output:
          [<<<bcopy_1046@93:2>@96:1>@116:0>]
      end GenHcSolver.classify_pids(84528)[4] (0.000000 sec.)
      lb:((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
          ((<<bcopy_1046@93:2>@96:0> = 0) &&
           ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
            ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:1> = <bcopy_1046@93:0>)))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(84531)[4]
        lb:((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
            ((<<bcopy_1046@93:2>@96:0> = 0) &&
             ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
              ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:1> = <bcopy_1046@93:0>)))))
        nub:false
        lb':((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
             ((<<bcopy_1046@93:2>@96:0> = 0) &&
              ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
               ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:1> = <bcopy_1046@93:0>)))))
        nub':false
        begin InterpProver.interpolate(84532)[5]
          begin InterpProver.interpolate_fresh(84533)[6]
            begin InterpProver.interpolate_log(84534)[7]
              input1: ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
                       ((<<bcopy_1046@93:2>@96:0> = 0) &&
                        ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
                         ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:1> = <bcopy_1046@93:0>)))))
              input2: false
              begin InterpProver.interpolate_check(84535)[8]
                begin InterpProver.interpolate_simplify(84536)[9]
                  begin InterpProver.interpolate_quick(84655)[10]
                    
                  end InterpProver.interpolate_quick(84655)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(84536)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(84535)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(84534)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(84533)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(84532)[5] (0.001000 sec.)
        output:
          P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int,<<<bcopy_1046@93:2>@96:1>@116:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(84531)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
        ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>) && (0 > <<bcopy_1046@93:3>@126:0>)) |- bot
        
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
        (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
        |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                       <<bcopy_1046@93:2>@96:0>:int)
        
         ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                <bcopy_1046@93:4>:int)
      lower bounds:
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<bcopy_1046@93:4>:int) =
        ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int) =
        ((<<bcopy_1046@93:2>@96:0> = 0) &&
         ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
          ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
      upper bounds:
        P[<<bcopy_1046@93:2>@96:0>](var396:int,var397:int,var398:int) = true
      begin GenHcSolver.classify_pids(86900)[4]
        output:
          [<<bcopy_1046@93:2>@96:0>]
      end GenHcSolver.classify_pids(86900)[4] (0.000000 sec.)
      lb:((<<bcopy_1046@93:2>@96:0> = 0) &&
          ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
           ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(86903)[4]
        lb:((<<bcopy_1046@93:2>@96:0> = 0) &&
            ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
             ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
        nub:false
        lb':((<<bcopy_1046@93:2>@96:0> = 0) &&
             ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
              ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
        nub':false
        begin InterpProver.interpolate(86904)[5]
          begin InterpProver.interpolate_fresh(86905)[6]
            begin InterpProver.interpolate_log(86906)[7]
              input1: ((<<bcopy_1046@93:2>@96:0> = 0) &&
                       ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
                        ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
              input2: false
              begin InterpProver.interpolate_check(86907)[8]
                begin InterpProver.interpolate_simplify(86908)[9]
                  begin InterpProver.interpolate_quick(87000)[10]
                    
                  end InterpProver.interpolate_quick(87000)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(86908)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(86907)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(86906)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(86905)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(86904)[5] (0.001000 sec.)
        output:
          P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int) = true
      end ApronInterface.convex_hull_interpolate(86903)[4] (0.003000 sec.)
      Horn clauses:
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
        ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>) && (0 > <<bcopy_1046@93:3>@126:0>)) |- bot
        
         ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                <bcopy_1046@93:4>:int)
      lower bounds:
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<bcopy_1046@93:4>:int) =
        ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
      upper bounds:
        P[<bcopy_1046@93:4>](var399:int,var400:int,var401:int) = ((var401 >= var400) || (0 <= var401))
      begin GenHcSolver.classify_pids(88329)[4]
        output:
          [<bcopy_1046@93:4>]
      end GenHcSolver.classify_pids(88329)[4] (0.000000 sec.)
      lb:((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
      nub:(not ((<bcopy_1046@93:4> >= <bcopy_1046@93:1>) || (0 <= <bcopy_1046@93:4>)))
      begin ApronInterface.convex_hull_interpolate(88332)[4]
        lb:((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        nub:(not ((<bcopy_1046@93:4> >= <bcopy_1046@93:1>) || (0 <= <bcopy_1046@93:4>)))
        lb':((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        nub':(not ((<bcopy_1046@93:4> >= <bcopy_1046@93:1>) || (0 <= <bcopy_1046@93:4>)))
        begin InterpProver.interpolate(88333)[5]
          begin InterpProver.interpolate_fresh(88334)[6]
            begin InterpProver.interpolate_log(88335)[7]
              input1: ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
              input2: (not ((<bcopy_1046@93:4> >= <bcopy_1046@93:1>) || (0 <= <bcopy_1046@93:4>)))
              begin InterpProver.interpolate_check(88336)[8]
                begin InterpProver.interpolate_simplify(88337)[9]
                  begin InterpProver.interpolate_quick(88404)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(88413)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(88414)[12]
                        begin CsisatInterface.interpolate_csisat_log(88415)[13]
                          input1: (0 = v_sep_bcopy_1046_sep_93_sep_4 & 1 <= v_sep_bcopy_1046_sep_93_sep_1)
                          input2: ((1 + v_sep_bcopy_1046_sep_93_sep_4) <= 0 & (1 + v_sep_bcopy_1046_sep_93_sep_4) <= v_sep_bcopy_1046_sep_93_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(88416)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(88416)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_1046_sep_93_sep_4 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(88415)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_1046_sep_93_sep_4 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_1046_sep_93_sep_4 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(88414)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(88413)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(88404)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(88337)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(88336)[8] (0.001000 sec.)
              output: (0 <= <bcopy_1046@93:4>)
            end InterpProver.interpolate_log(88335)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(88334)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(88333)[5] (0.001000 sec.)
        output:
          P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<bcopy_1046@93:4>:int) =
          (0 <= <bcopy_1046@93:4>)
      end ApronInterface.convex_hull_interpolate(88332)[4] (0.001000 sec.)
      begin HcSolver.check_validity(88629)[4]
        input:
          P[<fail_1893@136:0>](<fail_1893@136:0>:bool)|- bot
          
          P[<<bcopy_1046@93:3>@126:0>](<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:0>:int),
          ((0 > <k_make_array_u_1321@133:0>) && ((<k_make_array_u_1321@133:1> > 0) && <fail_1893@136:0>))
          |- P[<fail_1893@136:0>](<fail_1893@136:0>:bool)
          
          P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int,var386:int),
          P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
          (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)
          |- P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                          <<bcopy_1046@93:3>@126:0>:int)
          
          P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:0>:int,<<bcopy_1046@93:2>@96:0>:int),
          ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
           ((0 <= <<bcopy_1046@93:2>@96:0>) &&
            ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
             ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))))
          |- P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,
                                                 <bcopy_1046@93:1>:int,
                                                 <<bcopy_1046@93:2>@96:0>:int,
                                                 <<<bcopy_1046@93:2>@96:1>@116:0>:int)
          
          P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
          (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
          |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                         <<bcopy_1046@93:2>@96:0>:int)
          
           ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
          |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                  <bcopy_1046@93:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(88629)[4] (0.004000 sec.)
      solution:
        P[<fail_1893@136:0>](<fail_1893@136:0>:bool) = false
        P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int) =
        (0 <= <<bcopy_1046@93:3>@126:0>)
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int,<<<bcopy_1046@93:2>@96:1>@116:0>:int) =
        true
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int) = true
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<bcopy_1046@93:4>:int) =
        (0 <= <bcopy_1046@93:4>)
    end GenHcSolver.solve(69972)[3] (0.113983 sec.)
    begin GenHcSolver.solve(89374)[3]
      Horn clauses:
        P[<fail_1893@136:0>](<fail_1893@136:0>:bool)|- bot
        
        P[<<bcopy_1046@93:3>@126:0>](<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:0>:int),
        ((0 > <k_make_array_u_1321@133:0>) && ((<k_make_array_u_1321@133:1> > 0) && <fail_1893@136:0>))
        |- P[<fail_1893@136:0>](<fail_1893@136:0>:bool)
        
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int,var386:int),
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
        (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)
        |- P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                        <<bcopy_1046@93:3>@126:0>:int)
        
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:0>:int,<<bcopy_1046@93:2>@96:0>:int),
        ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
         ((0 <= <<bcopy_1046@93:2>@96:0>) &&
          ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
           ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))))
        |- P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,
                                               <bcopy_1046@93:1>:int,
                                               <<bcopy_1046@93:2>@96:0>:int,
                                               <<<bcopy_1046@93:2>@96:1>@116:0>:int)
        
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
        (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
        |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                       <<bcopy_1046@93:2>@96:0>:int)
        
         ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                <bcopy_1046@93:4>:int)
      lower bounds:
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<bcopy_1046@93:4>:int) =
        ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int) =
        ((<<bcopy_1046@93:2>@96:0> = 0) &&
         ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
          ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int,<<<bcopy_1046@93:2>@96:1>@116:0>:int) =
        ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
         ((<<bcopy_1046@93:2>@96:0> = 0) &&
          ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
           ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:1> = <bcopy_1046@93:0>)))))
        P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int) =
        ((<<bcopy_1046@93:3>@126:0> = 0) &&
         ((<bcopy_1046@93:0> = <bcopy_1046@93:1>) &&
          ((<bcopy_1046@93:0> > 0) &&
           ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:0>) && (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)))))
        P[<fail_1893@136:0>](<fail_1893@136:0>:bool) = false
      upper bounds:
        P[<fail_1893@136:0>](var403:bool) = true
      begin GenHcSolver.classify_pids(94221)[4]
        output:
          [<fail_1893@136:0>]
      end GenHcSolver.classify_pids(94221)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(94224)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(94227)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(94227)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(94232)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(94232)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(94235)[5]
          begin InterpProver.interpolate_fresh(94236)[6]
            begin InterpProver.interpolate_log(94237)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(94238)[8]
                begin InterpProver.interpolate_simplify(94239)[9]
                  begin InterpProver.interpolate_quick(94254)[10]
                    
                  end InterpProver.interpolate_quick(94254)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(94258)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(94258)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(94239)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(94238)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(94237)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(94236)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(94235)[5] (0.001000 sec.)
        output:
          P[<fail_1893@136:0>](<fail_1893@136:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(94224)[4] (0.001000 sec.)
      Horn clauses:
        P[<<bcopy_1046@93:3>@126:0>](<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:0>:int),
        ((<k_make_array_u_1321@133:1> > 0) && (0 > <k_make_array_u_1321@133:0>)) |- bot
        
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int,var386:int),
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
        (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)
        |- P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                        <<bcopy_1046@93:3>@126:0>:int)
        
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:0>:int,<<bcopy_1046@93:2>@96:0>:int),
        ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
         ((0 <= <<bcopy_1046@93:2>@96:0>) &&
          ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
           ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))))
        |- P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,
                                               <bcopy_1046@93:1>:int,
                                               <<bcopy_1046@93:2>@96:0>:int,
                                               <<<bcopy_1046@93:2>@96:1>@116:0>:int)
        
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
        (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
        |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                       <<bcopy_1046@93:2>@96:0>:int)
        
         ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                <bcopy_1046@93:4>:int)
      lower bounds:
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<bcopy_1046@93:4>:int) =
        ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int) =
        ((<<bcopy_1046@93:2>@96:0> = 0) &&
         ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
          ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int,<<<bcopy_1046@93:2>@96:1>@116:0>:int) =
        ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
         ((<<bcopy_1046@93:2>@96:0> = 0) &&
          ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
           ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:1> = <bcopy_1046@93:0>)))))
        P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int) =
        ((<<bcopy_1046@93:3>@126:0> = 0) &&
         ((<bcopy_1046@93:0> = <bcopy_1046@93:1>) &&
          ((<bcopy_1046@93:0> > 0) &&
           ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:0>) && (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)))))
      upper bounds:
        P[<<bcopy_1046@93:3>@126:0>](var404:int,var405:int,var406:int) =
        ((var404 <= 0) || ((0 <= var406) || (var404 <> var405)))
      begin GenHcSolver.classify_pids(100054)[4]
        output:
          [<<bcopy_1046@93:3>@126:0>]
      end GenHcSolver.classify_pids(100054)[4] (0.000000 sec.)
      lb:((<<bcopy_1046@93:3>@126:0> = 0) &&
          ((<bcopy_1046@93:0> = <bcopy_1046@93:1>) &&
           ((<bcopy_1046@93:0> > 0) &&
            ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:0>) && (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)))))
      nub:(not
             ((<bcopy_1046@93:0> <= 0) ||
              ((0 <= <<bcopy_1046@93:3>@126:0>) || (<bcopy_1046@93:0> <> <bcopy_1046@93:1>))))
      begin ApronInterface.convex_hull_interpolate(100057)[4]
        lb:((<<bcopy_1046@93:3>@126:0> = 0) &&
            ((<bcopy_1046@93:0> = <bcopy_1046@93:1>) &&
             ((<bcopy_1046@93:0> > 0) &&
              ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:0>) && (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)))))
        nub:(not
               ((<bcopy_1046@93:0> <= 0) ||
                ((0 <= <<bcopy_1046@93:3>@126:0>) || (<bcopy_1046@93:0> <> <bcopy_1046@93:1>))))
        begin ExtFormula.Formula.case_analysis_boolean(100130)[5]
          ts: ((<<bcopy_1046@93:3>@126:0> = 0) &&
               ((<bcopy_1046@93:0> = <bcopy_1046@93:1>) &&
                ((<bcopy_1046@93:0> > 0) &&
                 ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:0>) && (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)))))
          
        end ExtFormula.Formula.case_analysis_boolean(100130)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(100168)[5]
          ts: ((<bcopy_1046@93:0> > 0) && ((0 > <<bcopy_1046@93:3>@126:0>) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
          
        end ExtFormula.Formula.case_analysis_boolean(100168)[5] (0.000000 sec.)
        lb':(((<bcopy_1046@93:1> + (-1 * <bcopy_1046@93:0>)) = 0) &&
             ((<<bcopy_1046@93:3>@126:0> = 0) && ((-1 + <bcopy_1046@93:0>) >= 0)))
        nub':(((<bcopy_1046@93:1> + (-1 * <bcopy_1046@93:0>)) = 0) &&
              (((-1 + (-1 * <<bcopy_1046@93:3>@126:0>)) >= 0) && ((-1 + <bcopy_1046@93:0>) >= 0)))
        begin InterpProver.interpolate(100175)[5]
          begin InterpProver.interpolate_fresh(100176)[6]
            begin InterpProver.interpolate_log(100177)[7]
              input1: (((<bcopy_1046@93:1> + (-1 * <bcopy_1046@93:0>)) = 0) &&
                       ((<<bcopy_1046@93:3>@126:0> = 0) && ((-1 + <bcopy_1046@93:0>) >= 0)))
              input2: (((<bcopy_1046@93:1> + (-1 * <bcopy_1046@93:0>)) = 0) &&
                       (((-1 + (-1 * <<bcopy_1046@93:3>@126:0>)) >= 0) && ((-1 + <bcopy_1046@93:0>) >= 0)))
              begin InterpProver.interpolate_check(100178)[8]
                begin InterpProver.interpolate_simplify(100179)[9]
                  begin InterpProver.interpolate_quick(100310)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(100319)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(100320)[12]
                        begin CsisatInterface.interpolate_csisat_log(100321)[13]
                          input1: (0 = v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0 & v_sep_bcopy_1046_sep_93_sep_0 = v_sep_bcopy_1046_sep_93_sep_1 & 1 <= v_sep_bcopy_1046_sep_93_sep_0)
                          input2: (v_sep_bcopy_1046_sep_93_sep_0 = v_sep_bcopy_1046_sep_93_sep_1 & 1 <= v_sep_bcopy_1046_sep_93_sep_0 & (1 + v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(100322)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(100322)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(100321)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(100320)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(100319)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(100310)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(100179)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(100178)[8] (0.002000 sec.)
              output: (0 <= <<bcopy_1046@93:3>@126:0>)
            end InterpProver.interpolate_log(100177)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(100176)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(100175)[5] (0.002000 sec.)
        output:
          P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int) =
          (0 <= <<bcopy_1046@93:3>@126:0>)
      end ApronInterface.convex_hull_interpolate(100057)[4] (0.004000 sec.)
      Horn clauses:
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int,var386:int),
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
        ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>) && (0 > <<bcopy_1046@93:3>@126:0>)) |- bot
        
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:0>:int,<<bcopy_1046@93:2>@96:0>:int),
        ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
         ((0 <= <<bcopy_1046@93:2>@96:0>) &&
          ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
           ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))))
        |- P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,
                                               <bcopy_1046@93:1>:int,
                                               <<bcopy_1046@93:2>@96:0>:int,
                                               <<<bcopy_1046@93:2>@96:1>@116:0>:int)
        
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
        (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
        |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                       <<bcopy_1046@93:2>@96:0>:int)
        
         ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                <bcopy_1046@93:4>:int)
      lower bounds:
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<bcopy_1046@93:4>:int) =
        ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int) =
        ((<<bcopy_1046@93:2>@96:0> = 0) &&
         ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
          ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int,<<<bcopy_1046@93:2>@96:1>@116:0>:int) =
        ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
         ((<<bcopy_1046@93:2>@96:0> = 0) &&
          ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
           ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:1> = <bcopy_1046@93:0>)))))
      upper bounds:
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](var407:int,var408:int,var409:int,var410:int) = true
      begin GenHcSolver.classify_pids(103997)[4]
        output:
          [<<<bcopy_1046@93:2>@96:1>@116:0>]
      end GenHcSolver.classify_pids(103997)[4] (0.000000 sec.)
      lb:((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
          ((<<bcopy_1046@93:2>@96:0> = 0) &&
           ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
            ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:1> = <bcopy_1046@93:0>)))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(104000)[4]
        lb:((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
            ((<<bcopy_1046@93:2>@96:0> = 0) &&
             ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
              ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:1> = <bcopy_1046@93:0>)))))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(104062)[5]
          ts: ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
               ((<<bcopy_1046@93:2>@96:0> = 0) &&
                ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
                 ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:1> = <bcopy_1046@93:0>)))))
          
        end ExtFormula.Formula.case_analysis_boolean(104062)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(104074)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(104074)[5] (0.000000 sec.)
        lb':(((<bcopy_1046@93:1> + (-1 * <bcopy_1046@93:0>)) = 0) &&
             ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
              ((<<bcopy_1046@93:2>@96:0> = 0) && ((-1 + <bcopy_1046@93:0>) >= 0))))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(104077)[5]
          begin InterpProver.interpolate_fresh(104078)[6]
            begin InterpProver.interpolate_log(104079)[7]
              input1: (((<bcopy_1046@93:1> + (-1 * <bcopy_1046@93:0>)) = 0) &&
                       ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
                        ((<<bcopy_1046@93:2>@96:0> = 0) && ((-1 + <bcopy_1046@93:0>) >= 0))))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(104080)[8]
                begin InterpProver.interpolate_simplify(104081)[9]
                  begin InterpProver.interpolate_quick(104154)[10]
                    
                  end InterpProver.interpolate_quick(104154)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(104081)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(104080)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(104079)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(104078)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(104077)[5] (0.001000 sec.)
        output:
          P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int,<<<bcopy_1046@93:2>@96:1>@116:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(104000)[4] (0.002000 sec.)
      Horn clauses:
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
        ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>) && (0 > <<bcopy_1046@93:3>@126:0>)) |- bot
        
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
        (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
        |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                       <<bcopy_1046@93:2>@96:0>:int)
        
         ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                <bcopy_1046@93:4>:int)
      lower bounds:
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<bcopy_1046@93:4>:int) =
        ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int) =
        ((<<bcopy_1046@93:2>@96:0> = 0) &&
         ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
          ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
      upper bounds:
        P[<<bcopy_1046@93:2>@96:0>](var411:int,var412:int,var413:int) = true
      begin GenHcSolver.classify_pids(106401)[4]
        output:
          [<<bcopy_1046@93:2>@96:0>]
      end GenHcSolver.classify_pids(106401)[4] (0.000000 sec.)
      lb:((<<bcopy_1046@93:2>@96:0> = 0) &&
          ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
           ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(106404)[4]
        lb:((<<bcopy_1046@93:2>@96:0> = 0) &&
            ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
             ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(106450)[5]
          ts: ((<<bcopy_1046@93:2>@96:0> = 0) &&
               ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>) &&
                ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>))))
          
        end ExtFormula.Formula.case_analysis_boolean(106450)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(106461)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(106461)[5] (0.000000 sec.)
        lb':(((<bcopy_1046@93:1> + (-1 * <bcopy_1046@93:0>)) = 0) &&
             ((<<bcopy_1046@93:2>@96:0> = 0) && ((-1 + <bcopy_1046@93:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(106464)[5]
          begin InterpProver.interpolate_fresh(106465)[6]
            begin InterpProver.interpolate_log(106466)[7]
              input1: (((<bcopy_1046@93:1> + (-1 * <bcopy_1046@93:0>)) = 0) &&
                       ((<<bcopy_1046@93:2>@96:0> = 0) && ((-1 + <bcopy_1046@93:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(106467)[8]
                begin InterpProver.interpolate_simplify(106468)[9]
                  begin InterpProver.interpolate_quick(106522)[10]
                    
                  end InterpProver.interpolate_quick(106522)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(106468)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(106467)[8] (0.000999 sec.)
              output: true
            end InterpProver.interpolate_log(106466)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(106465)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(106464)[5] (0.000999 sec.)
        output:
          P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int) = true
      end ApronInterface.convex_hull_interpolate(106404)[4] (0.001999 sec.)
      Horn clauses:
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
        ((<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>) && (0 > <<bcopy_1046@93:3>@126:0>)) |- bot
        
         ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                <bcopy_1046@93:4>:int)
      lower bounds:
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<bcopy_1046@93:4>:int) =
        ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
      upper bounds:
        P[<bcopy_1046@93:4>](var414:int,var415:int,var416:int) = ((var416 >= var415) || (0 <= var416))
      begin GenHcSolver.classify_pids(107853)[4]
        output:
          [<bcopy_1046@93:4>]
      end GenHcSolver.classify_pids(107853)[4] (0.000000 sec.)
      lb:((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
      nub:(not ((<bcopy_1046@93:4> >= <bcopy_1046@93:1>) || (0 <= <bcopy_1046@93:4>)))
      begin ApronInterface.convex_hull_interpolate(107856)[4]
        lb:((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
        nub:(not ((<bcopy_1046@93:4> >= <bcopy_1046@93:1>) || (0 <= <bcopy_1046@93:4>)))
        begin ExtFormula.Formula.case_analysis_boolean(107882)[5]
          ts: ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
          
        end ExtFormula.Formula.case_analysis_boolean(107882)[5] (0.000999 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(107903)[5]
          ts: ((<bcopy_1046@93:4> < <bcopy_1046@93:1>) && (0 > <bcopy_1046@93:4>))
          
        end ExtFormula.Formula.case_analysis_boolean(107903)[5] (0.000000 sec.)
        lb':(((<bcopy_1046@93:1> + (-1 * <bcopy_1046@93:0>)) = 0) &&
             ((<bcopy_1046@93:4> = 0) && ((-1 + <bcopy_1046@93:0>) >= 0)))
        nub':(((-1 + (-1 * <bcopy_1046@93:4>)) >= 0) && (((-1 + (-1 * <bcopy_1046@93:4>)) + <bcopy_1046@93:1>) >= 0))
        begin InterpProver.interpolate(107909)[5]
          begin InterpProver.interpolate_fresh(107910)[6]
            begin InterpProver.interpolate_log(107911)[7]
              input1: (((<bcopy_1046@93:1> + (-1 * <bcopy_1046@93:0>)) = 0) &&
                       ((<bcopy_1046@93:4> = 0) && ((-1 + <bcopy_1046@93:0>) >= 0)))
              input2: (((-1 + (-1 * <bcopy_1046@93:4>)) >= 0) &&
                       (((-1 + (-1 * <bcopy_1046@93:4>)) + <bcopy_1046@93:1>) >= 0))
              begin InterpProver.interpolate_check(107912)[8]
                begin InterpProver.interpolate_simplify(107913)[9]
                  begin InterpProver.interpolate_quick(107996)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(108005)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(108006)[12]
                        begin CsisatInterface.interpolate_csisat_log(108007)[13]
                          input1: (0 = v_sep_bcopy_1046_sep_93_sep_4 & 1 <= v_sep_bcopy_1046_sep_93_sep_1)
                          input2: ((1 + v_sep_bcopy_1046_sep_93_sep_4) <= 0 & (1 + v_sep_bcopy_1046_sep_93_sep_4) <= v_sep_bcopy_1046_sep_93_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(108008)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(108008)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_1046_sep_93_sep_4 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(108007)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_1046_sep_93_sep_4 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_1046_sep_93_sep_4 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(108006)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(108005)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(107996)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(107913)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(107912)[8] (0.001000 sec.)
              output: (0 <= <bcopy_1046@93:4>)
            end InterpProver.interpolate_log(107911)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(107910)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(107909)[5] (0.001000 sec.)
        output:
          P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<bcopy_1046@93:4>:int) =
          (0 <= <bcopy_1046@93:4>)
      end ApronInterface.convex_hull_interpolate(107856)[4] (0.001999 sec.)
      begin HcSolver.check_validity(108225)[4]
        input:
          P[<fail_1893@136:0>](<fail_1893@136:0>:bool)|- bot
          
          P[<<bcopy_1046@93:3>@126:0>](<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:0>:int),
          ((0 > <k_make_array_u_1321@133:0>) && ((<k_make_array_u_1321@133:1> > 0) && <fail_1893@136:0>))
          |- P[<fail_1893@136:0>](<fail_1893@136:0>:bool)
          
          P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int,var386:int),
          P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
          (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)
          |- P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                          <<bcopy_1046@93:3>@126:0>:int)
          
          P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:0>:int,<<bcopy_1046@93:2>@96:0>:int),
          ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
           ((0 <= <<bcopy_1046@93:2>@96:0>) &&
            ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
             ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))))
          |- P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,
                                                 <bcopy_1046@93:1>:int,
                                                 <<bcopy_1046@93:2>@96:0>:int,
                                                 <<<bcopy_1046@93:2>@96:1>@116:0>:int)
          
          P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
          (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
          |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                         <<bcopy_1046@93:2>@96:0>:int)
          
           ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
          |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                  <bcopy_1046@93:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(108225)[4] (0.004000 sec.)
      solution:
        P[<fail_1893@136:0>](<fail_1893@136:0>:bool) = false
        P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int) =
        (0 <= <<bcopy_1046@93:3>@126:0>)
        P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int,<<<bcopy_1046@93:2>@96:1>@116:0>:int) =
        true
        P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int) = true
        P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<bcopy_1046@93:4>:int) =
        (0 <= <bcopy_1046@93:4>)
    end GenHcSolver.solve(89374)[3] (0.107983 sec.)
    begin YhornInterface.solve(108970)[3]
      begin HcSolver.solve_ub(108971)[4]
        encoded:
          P[<fail_1893@136:0>](<fail_1893@136:0>:int)|- bot
          
          P[<<bcopy_1046@93:3>@126:0>](<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:0>:int),
          ((0 > <k_make_array_u_1321@133:0>) && ((<k_make_array_u_1321@133:1> > 0) && (<fail_1893@136:0> = 1)))
          |- P[<fail_1893@136:0>](<fail_1893@136:0>:int)
          
          P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int,var386:int),
          P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
          (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)
          |- P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                          <<bcopy_1046@93:3>@126:0>:int)
          
          P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:0>:int,<<bcopy_1046@93:2>@96:0>:int),
          ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
           ((0 <= <<bcopy_1046@93:2>@96:0>) &&
            ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
             ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))))
          |- P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,
                                                 <bcopy_1046@93:1>:int,
                                                 <<bcopy_1046@93:2>@96:0>:int,
                                                 <<<bcopy_1046@93:2>@96:1>@116:0>:int)
          
          P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
          (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
          |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                         <<bcopy_1046@93:2>@96:0>:int)
          
           ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
          |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                  <bcopy_1046@93:4>:int)
        input to Yhorn:
          P[<fail_1893@136:0>](<fail_1893@136:0>:int)|- bot
          
          P[<<bcopy_1046@93:3>@126:0>](<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:0>:int),
          ((<k_make_array_u_1321@133:1> > 0) && ((0 > <k_make_array_u_1321@133:0>) && (<fail_1893@136:0> = 1)))
          |- P[<fail_1893@136:0>](<fail_1893@136:0>:int)
          
          P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int,var386:int),
          P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
          (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)
          |- P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                          <<bcopy_1046@93:3>@126:0>:int)
          
          P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:0>:int,<<bcopy_1046@93:2>@96:0>:int),
          ((<bcopy_1046@93:0> = <bcopy_1046@93:1>) &&
           ((<bcopy_1046@93:0> > 0) &&
            ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
             ((0 <= <<bcopy_1046@93:2>@96:0>) && (<<<bcopy_1046@93:2>@96:1>@116:0> = 0)))))
          |- P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,
                                                 <bcopy_1046@93:1>:int,
                                                 <<bcopy_1046@93:2>@96:0>:int,
                                                 <<<bcopy_1046@93:2>@96:1>@116:0>:int)
          
          P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
          (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
          |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                         <<bcopy_1046@93:2>@96:0>:int)
          
           ((<bcopy_1046@93:0> = <bcopy_1046@93:1>) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:4> = 0)))
          |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                  <bcopy_1046@93:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1893_sep_136_sep_0($214)) -> 1=0.
(($214-1=0) & (-$215>0) & ($216>0)) & (v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0($216,$216,$215)) -> v_sep_fail_1893_sep_136_sep_0($214).
($217-$218<0) & (v_sep_bcopy_1046_sep_93_sep_4($219,$218,$217)) & (v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_1_sep_116_sep_0($219,$218,$217,$220)) -> v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0($219,$218,$217).
(($221=0) & (-$222<=0) & (-$219+$222<0) & ($219>0) & (-$218+$219=0)) & (v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_0($219,$219,$222)) -> v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_1_sep_116_sep_0($219,$218,$222,$221).
(-$218+$222<0) & (v_sep_bcopy_1046_sep_93_sep_4($219,$218,$222)) -> v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_0($219,$218,$222).
($223=0) & ($219>0) & (-$218+$219=0) -> v_sep_bcopy_1046_sep_93_sep_4($219,$218,$223).


v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_0: X
v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_1_sep_116_sep_0: X
v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0: X
v_sep_bcopy_1046_sep_93_sep_4: X
v_sep_fail_1893_sep_136_sep_0: X
.......
v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_0: X
v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_1_sep_116_sep_0: X
v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0: X
v_sep_bcopy_1046_sep_93_sep_4: X
v_sep_fail_1893_sep_136_sep_0: X
...
v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_0: X
v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_1_sep_116_sep_0: X
v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0: X
v_sep_bcopy_1046_sep_93_sep_4: X
v_sep_fail_1893_sep_136_sep_0: X
.....
v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_0: X
v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_1_sep_116_sep_0: X
v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0: X
v_sep_bcopy_1046_sep_93_sep_4: X
v_sep_fail_1893_sep_136_sep_0: X
......
v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_0: X
v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_1_sep_116_sep_0: X
v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0: X
v_sep_bcopy_1046_sep_93_sep_4: X
v_sep_fail_1893_sep_136_sep_0: X
.......(0=0) & (v_sep_fail_1893_sep_136_sep_0($214)) -> 1=0.
(($214-1=0) & (-$215>0) & ($216>0)) & (v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0($216,$216,$215)) -> v_sep_fail_1893_sep_136_sep_0($214).
($217-$218<0) & (v_sep_bcopy_1046_sep_93_sep_4($219,$218,$217)) & (v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_1_sep_116_sep_0($219,$218,$217,$220)) -> v_sep_bcopy_1046_sep_93_sep_3_sep_126_sep_0($219,$218,$217).
(($221=0) & (-$222<=0) & (-$219+$222<0) & ($219>0) & (-$218+$219=0)) & (v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_0($219,$219,$222)) -> v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_1_sep_116_sep_0($219,$218,$222,$221).
(-$218+$222<0) & (v_sep_bcopy_1046_sep_93_sep_4($219,$218,$222)) -> v_sep_bcopy_1046_sep_93_sep_2_sep_96_sep_0($219,$218,$222).
($223=0) & ($219>0) & (-$218+$219=0) -> v_sep_bcopy_1046_sep_93_sep_4($219,$218,$223).

        solution:
          P[<<bcopy_1046@93:2>@96:0>]($250:int,$252:int,$254:int) = true
          P[<<<bcopy_1046@93:2>@96:1>@116:0>]($241:int,$243:int,$245:int,$247:int) = (0 <= $245)
          P[<<bcopy_1046@93:3>@126:0>]($227:int,$229:int,$231:int) = (0 <= $231)
          P[<bcopy_1046@93:4>]($234:int,$236:int,$238:int) = true
          P[<fail_1893@136:0>]($224:bool) = false
        
      end HcSolver.solve_ub(108971)[4] (0.021997 sec.)
      begin HcSolver.check_validity(109385)[4]
        input:
          P[<fail_1893@136:0>](<fail_1893@136:0>:bool)|- bot
          
          P[<<bcopy_1046@93:3>@126:0>](<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:1>:int,<k_make_array_u_1321@133:0>:int),
          ((0 > <k_make_array_u_1321@133:0>) && ((<k_make_array_u_1321@133:1> > 0) && <fail_1893@136:0>))
          |- P[<fail_1893@136:0>](<fail_1893@136:0>:bool)
          
          P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int,var386:int),
          P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:3>@126:0>:int),
          (<<bcopy_1046@93:3>@126:0> < <bcopy_1046@93:1>)
          |- P[<<bcopy_1046@93:3>@126:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                          <<bcopy_1046@93:3>@126:0>:int)
          
          P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:0>:int,<<bcopy_1046@93:2>@96:0>:int),
          ((<<<bcopy_1046@93:2>@96:1>@116:0> = 0) &&
           ((0 <= <<bcopy_1046@93:2>@96:0>) &&
            ((<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:0>) &&
             ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))))
          |- P[<<<bcopy_1046@93:2>@96:1>@116:0>](<bcopy_1046@93:0>:int,
                                                 <bcopy_1046@93:1>:int,
                                                 <<bcopy_1046@93:2>@96:0>:int,
                                                 <<<bcopy_1046@93:2>@96:1>@116:0>:int)
          
          P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,<<bcopy_1046@93:2>@96:0>:int),
          (<<bcopy_1046@93:2>@96:0> < <bcopy_1046@93:1>)
          |- P[<<bcopy_1046@93:2>@96:0>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                         <<bcopy_1046@93:2>@96:0>:int)
          
           ((<bcopy_1046@93:4> = 0) && ((<bcopy_1046@93:0> > 0) && (<bcopy_1046@93:0> = <bcopy_1046@93:1>)))
          |- P[<bcopy_1046@93:4>](<bcopy_1046@93:0>:int,<bcopy_1046@93:1>:int,
                                  <bcopy_1046@93:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(109385)[4] (0.003999 sec.)
      solution:
        P[<<bcopy_1046@93:2>@96:0>]($250:int,$252:int,$254:int) = true
        P[<<<bcopy_1046@93:2>@96:1>@116:0>]($241:int,$243:int,$245:int,$247:int) = (0 <= $245)
        P[<<bcopy_1046@93:3>@126:0>]($227:int,$229:int,$231:int) = (0 <= $231)
        P[<bcopy_1046@93:4>]($234:int,$236:int,$238:int) = true
        P[<fail_1893@136:0>]($224:bool) = false
    end YhornInterface.solve(108970)[3] (0.025996 sec.)
    
  end RefTypeInfer.infer_etrs(65334)[2] (0.504923 sec.)
  refinement types:
    main_1884: X
    f_1891: v1:int -> X
    main_1057: v1:int -> (v2:unit -> X) -> X
    f_1042: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:unit -> X) -> X
    bcopy_1046: v1:int ->
                v2:int ->
                (v3:int -> (v4:int -> X) -> X) ->
                (v7:{v7:int | (0 <= v7)} -> (v8:int -> X) -> X) ->
                v11:{v11:int | (0 <= v11)} -> ((v12:int -> (v13:int -> X) -> X) -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1321: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1332: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_1886: v1:int ->
                  v2:int ->
                  v3:int ->
                  (v4:int -> (v5:int -> X) -> X) ->
                  ((v8:int -> (v9:int -> X) -> X) -> X) -> (v13:int -> (v14:int -> X) -> X) -> v17:int -> X
    update_1033: v1:int ->
                 v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> ((v8:int -> (v9:int -> X) -> X) -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1321: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1893: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var465:int ->
            var464:int ->
            var463:int -> var462:int -> (var461:int -> (var460:int -> X) -> X) -> var457:int -> (var456:int -> X) -> X
    f_1892: var468:int -> var467:unit -> X
    f_bcopy_1887: var486:int ->
                  var485:int ->
                  var484:int ->
                  var483:int ->
                  ((var482:int -> (var481:int -> X) -> X) -> X) ->
                  (var477:int -> (var476:int -> X) -> X) -> (var473:int -> (var472:int -> X) -> X) -> X
    f_f_1890: var498:int ->
              (var497:int -> (var496:int -> X) -> X) ->
              (var493:unit -> X) -> (var491:int -> (var490:int -> X) -> X) -> X
    f_print_array_1888: var513:int ->
                        var512:int ->
                        var511:int ->
                        (var510:int -> (var509:int -> X) -> X) ->
                        (var506:int -> (var505:int -> X) -> X) -> (var502:unit -> X) -> var500:int -> X
    f_print_array_1889: var529:int ->
                        var528:int ->
                        var527:int ->
                        var526:int ->
                        (var525:int -> (var524:int -> X) -> X) ->
                        (var521:int -> (var520:int -> X) -> X) -> (var517:unit -> X) -> var515:unit -> X
    f_update_1885: var543:int ->
                   var542:int ->
                   var541:int ->
                   (var540:int -> (var539:int -> X) -> X) ->
                   ((var536:int -> (var535:int -> X) -> X) -> X) -> var531:int -> X
    print_array_1052: var557:int ->
                      (var556:int -> (var555:int -> X) -> X) ->
                      var552:int -> (var551:int -> (var550:int -> X) -> X) -> var547:int -> (var546:unit -> X) -> X
    print_int_1040: var561:int -> (var560:unit -> X) -> X
  abstraction types:
    main_1884: X
    f_1891: v1:int -> X
    main_1057: v1:int -> (v2:unit -> X) -> X
    f_1042: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:unit -> X) -> X
    bcopy_1046: v1:int ->
                v2:int ->
                (v3:int -> (v4:int -> X) -> X) ->
                (v7:int[v7 -> (0 <= v7)] -> (v8:int -> X) -> X) ->
                v11:int[v11 -> (0 <= v11)] -> ((v12:int -> (v13:int -> X) -> X) -> X) -> X
    make_array_1030: var562:int -> var563:int -> (var564:int -> X) -> X
    k_make_array_u_1321: var567:int -> var568:int -> (var569:int -> X) -> var571:bool -> X
    k_make_array_u_1332: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_1886: v1:int ->
                  v2:int ->
                  v3:int ->
                  (v4:int -> (v5:int -> X) -> X) ->
                  ((v8:int -> (v9:int -> X) -> X) -> X) -> (v13:int -> (v14:int -> X) -> X) -> v17:int -> X
    update_1033: v1:int ->
                 v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> ((v8:int -> (v9:int -> X) -> X) -> X) -> X
    fail_1893: v1:bool -> (v2:unit -> X) -> X
    a_1038: var465:int ->
            var464:int ->
            var463:int -> var462:int -> (var461:int -> (var460:int -> X) -> X) -> var457:int -> (var456:int -> X) -> X
    f_1892: var468:int -> var467:unit -> X
    f_bcopy_1887: var486:int ->
                  var485:int ->
                  var484:int ->
                  var483:int ->
                  ((var482:int -> (var481:int -> X) -> X) -> X) ->
                  (var477:int -> (var476:int -> X) -> X) -> (var473:int -> (var472:int -> X) -> X) -> X
    f_f_1890: var498:int ->
              (var497:int -> (var496:int -> X) -> X) ->
              (var493:unit -> X) -> (var491:int -> (var490:int -> X) -> X) -> X
    f_print_array_1888: var513:int ->
                        var512:int ->
                        var511:int ->
                        (var510:int -> (var509:int -> X) -> X) ->
                        (var506:int -> (var505:int -> X) -> X) -> (var502:unit -> X) -> var500:int -> X
    f_print_array_1889: var529:int ->
                        var528:int ->
                        var527:int ->
                        var526:int ->
                        (var525:int -> (var524:int -> X) -> X) ->
                        (var521:int -> (var520:int -> X) -> X) -> (var517:unit -> X) -> var515:unit -> X
    f_update_1885: var543:int ->
                   var542:int ->
                   var541:int ->
                   (var540:int -> (var539:int -> X) -> X) ->
                   ((var536:int -> (var535:int -> X) -> X) -> X) -> var531:int -> X
    print_array_1052: var557:int ->
                      (var556:int -> (var555:int -> X) -> X) ->
                      var552:int -> (var551:int -> (var550:int -> X) -> X) -> var547:int -> (var546:unit -> X) -> X
    print_int_1040: var561:int -> (var560:unit -> X) -> X
  
end AbsTypeInfer.refine(65333)[1] (0.514922 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1884
  main_1884 -> (rand_int f_1891)
  a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 when (i_1034 = j_1039) -> (k_update_a_1401 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 when (
      not (i_1034 = j_1039)) -> (des_1036 i_1034 k_update_a_1401)
  bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 when (i_1050 >= m_1047) -> (k_f_bcopy_1535 des_1049)
  bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 when (
      not (i_1050 >= m_1047)) -> (src_1048 i_1050 (f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048))
  f_1042 m_1043 src_1044 des_1045 k_f_1476 ->
      (bcopy_1046 m_1043 m_1043 src_1044 des_1045 0 (f_f_1890 m_1043 des_1045 k_f_1476))
  f_1891 x_1859 -> (main_1057 x_1859 (f_1892 x_1859))
  f_1892 x_1859 x_1856 -> end
  f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048 x_1591 ->
      (update_1033 i_1050 m_1047 des_1049 x_1591 (f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048))
  f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048 x_1547 ->
      (bcopy_1046 m_1043 m_1047 src_1048 x_1547 (i_1050 + 1) k_f_bcopy_1535)
  f_f_1890 m_1043 des_1045 k_f_1476 x_1715 -> (print_array_1052 m_1043 des_1045 m_1043 x_1715 0 k_f_1476)
  f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664 x_1687 ->
      (print_int_1040 x_1687 (f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664))
  f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664 x_1667 ->
      (print_array_1052 m_1043 des_1045 m_1053 array_1054 (i_1055 + 1) k_f_print_array_1664)
  f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380 x_1386 ->
      (k_update_1380 (a_1038 i_1034 n_1035 x_1037 x_1386 des_1036))
  fail_1893 b k -> {fail} => (k ())
  k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 when b_1333 ->
      (k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 ())
  k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 when (not b_1333) ->
      (fail_1893 true (k_make_array_u_1332 i_1032 n_1031 k_make_array_1315))
  k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 x_1318 -> (k_make_array_1315 0)
  main_1057 n_1058 k_main_1787 when (n_1058 > 0) ->
      (f_1042 n_1058 (make_array_1030 n_1058) (make_array_1030 n_1058) k_main_1787)
  main_1057 n_1058 k_main_1787 when (not (n_1058 > 0)) -> (k_main_1787 ())
  make_array_1030 n_1031 i_1032 k_make_array_1315 when (0 <= i_1032) ->
      (k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1315 when (not (0 <= i_1032)) ->
      (k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 false)
  print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 when (
      i_1055 >= m_1053) -> (k_f_print_array_1664 ())
  print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 when (
      not (i_1055 >= m_1053)) ->
      (des_1045 i_1055 (f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664))
  print_int_1040 n_1041 k_print_int_1432 -> (k_print_int_1432 ())
  update_1033 i_1034 n_1035 des_1036 x_1037 k_update_1380 ->
      (des_1036 i_1034 (f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380))
Types:
  main_1884 : X
  bcopy_1046 : (x_1:int ->
                x_2:int ->
                (x_4:int[x_4 >= 0] -> (int -> X) -> X) ->
                (x_10:int[x_10 >= 0; x_1 >= x_10 + 1] -> (int -> X) -> X) ->
                x_15:int[x_15 >= 0; x_1 >= x_2] -> ((int -> (int -> X) -> X) -> X) -> X)
  fail_1893 : (x_1:bool[x_1] -> (unit -> X) -> X)
  print_array_1052 : (int -> (int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1884 ... --> 
  f_1891 ... --> 
  main_1057 [1/2] ... --> 
  f_1042 ... --> 
  bcopy_1046 [1/2] ... --> 
  f_f_1890 ... --> 
  print_array_1052 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1321 [2/2] ... --> 
  fail_1893 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 1; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(111751)[1]
  program:
    main_1884  | true = ((Random.int 0) f_1891)
    a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 | (
    i_1034 = j_1039) = (k_update_a_1401 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 | (
    not (i_1034 = j_1039)) = (des_1036 i_1034
                                       k_update_a_1401)
    bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 | (
    i_1050 >= m_1047) = (k_f_bcopy_1535 des_1049)
    bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 | (
    not (i_1050 >= m_1047)) = (src_1048 i_1050
                                        (f_bcopy_1886 i_1050
                                                      m_1043
                                                      m_1047
                                                      des_1049
                                                      k_f_bcopy_1535
                                                      src_1048))
    f_1042 m_1043 src_1044 des_1045 k_f_1476 | true = (bcopy_1046
                                                         m_1043
                                                         m_1043
                                                         src_1044
                                                         des_1045
                                                         0
                                                         (f_f_1890 m_1043
                                                                   des_1045
                                                                   k_f_1476))
    f_1891 x_1859 | true = (main_1057 x_1859
                                      (f_1892 x_1859))
    f_1892 x_1859 x_1856 | true = end
    f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048 x_1591 | true = (
    update_1033 i_1050
                m_1047
                des_1049
                x_1591
                (f_bcopy_1887 i_1050
                              m_1043
                              m_1047
                              x_1591
                              k_f_bcopy_1535
                              src_1048))
    f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048 x_1547 | true = (
    bcopy_1046 m_1043
               m_1047
               src_1048
               x_1547
               (i_1050 + 1)
               k_f_bcopy_1535)
    f_f_1890 m_1043 des_1045 k_f_1476 x_1715 | true = (print_array_1052 m_1043
                                                                    des_1045
                                                                    m_1043
                                                                    x_1715
                                                                    0
                                                                    k_f_1476)
    f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664 x_1687 | true = (
    print_int_1040 x_1687
                   (f_print_array_1889 i_1055
                                       m_1043
                                       m_1053
                                       x_1687
                                       array_1054
                                       des_1045
                                       k_f_print_array_1664))
    f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664 x_1667 | true = (
    print_array_1052 m_1043
                     des_1045
                     m_1053
                     array_1054
                     (i_1055 + 1)
                     k_f_print_array_1664)
    f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380 x_1386 | true = (
    k_update_1380 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1386
                          des_1036))
    fail_1893 b k | true = (fail ())
    k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 | b_1333 = (
    k_make_array_u_1332 i_1032
                        n_1031
                        k_make_array_1315
                        ())
    k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 | (not b_1333) = (
    fail_1893 true
              (k_make_array_u_1332 i_1032
                                   n_1031
                                   k_make_array_1315))
    k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 x_1318 | true = (
    k_make_array_1315 0)
    main_1057 n_1058 k_main_1787 | (n_1058 > 0) = (f_1042
                                                     n_1058
                                                     (make_array_1030 n_1058)
                                                     (make_array_1030 n_1058)
                                                     k_main_1787)
    main_1057 n_1058 k_main_1787 | (not (n_1058 > 0)) = (k_main_1787 ())
    make_array_1030 n_1031 i_1032 k_make_array_1315 | (0 <= i_1032) = (
    k_make_array_u_1321 i_1032
                        n_1031
                        k_make_array_1315
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1315 | (not (0 <= i_1032)) = (
    k_make_array_u_1321 i_1032
                        n_1031
                        k_make_array_1315
                        false)
    print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 | (
    i_1055 >= m_1053) = (k_f_print_array_1664 ())
    print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 | (
    not (i_1055 >= m_1053)) = (des_1045
                                 i_1055
                                 (f_print_array_1888 i_1055
                                                     m_1043
                                                     m_1053
                                                     array_1054
                                                     des_1045
                                                     k_f_print_array_1664))
    print_int_1040 n_1041 k_print_int_1432 | true = (k_print_int_1432 ())
    update_1033 i_1034 n_1035 des_1036 x_1037 k_update_1380 | true = (
    des_1036 i_1034
             (f_update_1885 i_1034
                            n_1035
                            x_1037
                            des_1036
                            k_update_1380))
    main_1884:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    bcopy_1046:int ->
               int ->
               (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
    f_1042:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> X
    f_1891:int -> X
    f_1892:int -> unit -> X
    f_bcopy_1886:int ->
                 int ->
                 int ->
                 (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_1887:int ->
                 int ->
                 int ->
                 int -> ((int -> (int -> X) -> X) -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> X
    f_f_1890:int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> X
    f_print_array_1888:int ->
                       int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> int -> X
    f_print_array_1889:int ->
                       int ->
                       int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> unit -> X
    f_update_1885:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1893:bool -> (unit -> X) -> X
    k_make_array_u_1321:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1332:int -> int -> (int -> X) -> unit -> X
    main_1057:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    print_array_1052:int -> (int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    print_int_1040:int -> (unit -> X) -> X
    update_1033:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1042,f_1891,f_1892,f_bcopy_1886,f_bcopy_1887,f_f_1890,f_print_array_1888,f_print_array_1889,f_update_1885,k_make_array_u_1321,k_make_array_u_1332,main_1057,make_array_1030,print_int_1040,update_1033
  counterexample: 0:0:0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1891@142:0> = var573)
     [true.(<main_1057@144:0> = <f_1891@142:0>)
      [(<main_1057@144:0> > 0).(<f_1042@147:0> = <main_1057@144:0>)
       [true.
        ((<bcopy_1046@149:0> = <f_1042@147:0>) && ((<bcopy_1046@149:1> = <f_1042@147:0>) && (<bcopy_1046@149:4> = 0)))
        [(<bcopy_1046@149:4> >= <bcopy_1046@149:1>).true
         [true.(<f_f_1890@154:0> = <f_1042@147:0>)
          [true.
           ((<print_array_1052@156:0> = <f_f_1890@154:0>) &&
            ((<print_array_1052@156:2> = <f_f_1890@154:0>) && (<print_array_1052@156:4> = 0)))
           [(not (<print_array_1052@156:4> >= <print_array_1052@156:2>)).
            (<<print_array_1052@156:1>@159:0> = <print_array_1052@156:4>)
            [true.(<<f_f_1890@154:1>@161:0> = <<print_array_1052@156:1>@159:0>)
             [true.(<<f_1042@147:2>@163:0> = <<f_f_1890@154:1>@161:0>)
              [true.
               ((<make_array_1030@165:0> = <main_1057@144:0>) && (<make_array_1030@165:1> = <<f_1042@147:2>@163:0>))
               [(not (0 <= <make_array_1030@165:1>)).
                ((<k_make_array_u_1321@168:0> = <make_array_1030@165:1>) &&
                 ((<k_make_array_u_1321@168:1> = <make_array_1030@165:0>) && (<k_make_array_u_1321@168:3> = false)))
                [(not <k_make_array_u_1321@168:3>).(<fail_1893@171:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(111752)[2]
    horn clauses:
      P[<fail_1893@171:0>](<fail_1893@171:0>:bool)|- bot
      
      P[<k_make_array_u_1321@168:3>](<k_make_array_u_1321@168:0>:int,<k_make_array_u_1321@168:1>:int,false:bool),
      <fail_1893@171:0> |- P[<fail_1893@171:0>](<fail_1893@171:0>:bool)
      
      P[<make_array_1030@165:1>](<k_make_array_u_1321@168:1>:int,<k_make_array_u_1321@168:0>:int),
      ((0 > <k_make_array_u_1321@168:0>) && (not <k_make_array_u_1321@168:3>))
      |- P[<k_make_array_u_1321@168:3>](<k_make_array_u_1321@168:0>:int,
                                        <k_make_array_u_1321@168:1>:int,
                                        <k_make_array_u_1321@168:3>:bool)
      
      P[<main_1057@144:0>](<make_array_1030@165:0>:int),
      P[<<f_1042@147:2>@163:0>](<make_array_1030@165:0>:int,<make_array_1030@165:1>:int), (
      <make_array_1030@165:0> > 0)
      |- P[<make_array_1030@165:1>](<make_array_1030@165:0>:int,<make_array_1030@165:1>:int)
      
      P[<f_1042@147:0>](<f_1042@147:0>:int),
      P[<<f_f_1890@154:1>@161:0>](<f_1042@147:0>:int,<<f_1042@147:2>@163:0>:int)|- P[<<f_1042@147:2>@163:0>](
      <f_1042@147:0>:int,<<f_1042@147:2>@163:0>:int)
      
      P[<f_f_1890@154:0>](<f_f_1890@154:0>:int),
      P[<<print_array_1052@156:1>@159:0>](<f_f_1890@154:0>:int,<<f_f_1890@154:1>@161:0>:int)|- P[<<f_f_1890@154:1>@161:0>](
      <f_f_1890@154:0>:int,<<f_f_1890@154:1>@161:0>:int)
      
      P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
      (<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>)
      |- P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,
                                             <<print_array_1052@156:1>@159:0>:int)
      
      P[<f_f_1890@154:0>](<print_array_1052@156:0>:int),
      ((<print_array_1052@156:4> = 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>))
      |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,
                                     <print_array_1052@156:4>:int)
      
      P[<f_1042@147:0>](<f_f_1890@154:0>:int)|- P[<f_f_1890@154:0>](<f_f_1890@154:0>:int)
      
      P[<f_1042@147:0>](<bcopy_1046@149:0>:int),
      ((<bcopy_1046@149:4> = 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>))
      |- P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,
                               <bcopy_1046@149:4>:int)
      
      P[<main_1057@144:0>](<f_1042@147:0>:int), (<f_1042@147:0> > 0) |- P[<f_1042@147:0>](<f_1042@147:0>:int)
      
      P[<f_1891@142:0>](<main_1057@144:0>:int)|- P[<main_1057@144:0>](<main_1057@144:0>:int)
      
      |- P[<f_1891@142:0>](<f_1891@142:0>:int)
    call trees:
      <main_1884@139>
        <f_1891@142>
          <main_1057@144>
            <f_1042@147>
              <bcopy_1046@149>
              </<bcopy_1046@149:5>@152>
              <f_f_1890@154>
                <print_array_1052@156>
                </<print_array_1052@156:1>@159>
              </<f_f_1890@154:1>@161>
            </<f_1042@147:2>@163>
            <make_array_1030@165>
              <k_make_array_u_1321@168>
                <fail_1893@171>
    inlined horn clauses:
      P[<fail_1893@171:0>](<fail_1893@171:0>:bool)|- bot
      
      P[<<print_array_1052@156:1>@159:0>](<k_make_array_u_1321@168:1>:int,<k_make_array_u_1321@168:0>:int),
      ((0 > <k_make_array_u_1321@168:0>) && ((<k_make_array_u_1321@168:1> > 0) && <fail_1893@171:0>))
      |- P[<fail_1893@171:0>](<fail_1893@171:0>:bool)
      
      P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
      (<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>)
      |- P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,
                                             <<print_array_1052@156:1>@159:0>:int)
      
      
      ((<print_array_1052@156:4> = 0) &&
       ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
      |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,
                                     <print_array_1052@156:4>:int)
      
       ((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
      |- P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,
                               <bcopy_1046@149:4>:int)
    begin ParamSubstInfer.infer(113586)[3]
      
    end ParamSubstInfer.infer(113586)[3] (0.320952 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(113588)[3]
      
    end RefTypeInfer.elim_coeffs(113588)[3] (0.002000 sec.)
    begin GenHcSolver.solve(113955)[3]
      Horn clauses:
        P[<fail_1893@171:0>](<fail_1893@171:0>:bool)|- bot
        
        P[<<print_array_1052@156:1>@159:0>](<k_make_array_u_1321@168:1>:int,<k_make_array_u_1321@168:0>:int),
        ((0 > <k_make_array_u_1321@168:0>) && ((<k_make_array_u_1321@168:1> > 0) && <fail_1893@171:0>))
        |- P[<fail_1893@171:0>](<fail_1893@171:0>:bool)
        
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
        (<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>)
        |- P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,
                                               <<print_array_1052@156:1>@159:0>:int)
        
        
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,
                                       <print_array_1052@156:4>:int)
        
         ((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
        |- P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,
                                 <bcopy_1046@149:4>:int)
      lower bounds:
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<print_array_1052@156:4>:int) =
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,<bcopy_1046@149:4>:int) =
        ((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
        P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,<<print_array_1052@156:1>@159:0>:int) =
        ((<<print_array_1052@156:1>@159:0> = 0) &&
         ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:0>) && (<print_array_1052@156:0> > 0)))
        P[<fail_1893@171:0>](<fail_1893@171:0>:bool) = false
      upper bounds:
        P[<bcopy_1046@149:4>](var574:int,var575:int,var576:int) = true
      begin GenHcSolver.classify_pids(116082)[4]
        output:
          [<bcopy_1046@149:4>]
      end GenHcSolver.classify_pids(116082)[4] (0.001000 sec.)
      lb:((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(116085)[4]
        lb:((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
        nub:false
        lb':((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
        nub':false
        begin InterpProver.interpolate(116086)[5]
          begin InterpProver.interpolate_fresh(116087)[6]
            begin InterpProver.interpolate_log(116088)[7]
              input1: ((<bcopy_1046@149:4> = 0) &&
                       ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
              input2: false
              begin InterpProver.interpolate_check(116089)[8]
                begin InterpProver.interpolate_simplify(116090)[9]
                  begin InterpProver.interpolate_quick(116138)[10]
                    
                  end InterpProver.interpolate_quick(116138)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(116090)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(116089)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(116088)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(116087)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(116086)[5] (0.001000 sec.)
        output:
          P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,<bcopy_1046@149:4>:int) = true
      end ApronInterface.convex_hull_interpolate(116085)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1893@171:0>](<fail_1893@171:0>:bool)|- bot
        
        P[<<print_array_1052@156:1>@159:0>](<k_make_array_u_1321@168:1>:int,<k_make_array_u_1321@168:0>:int),
        ((0 > <k_make_array_u_1321@168:0>) && ((<k_make_array_u_1321@168:1> > 0) && <fail_1893@171:0>))
        |- P[<fail_1893@171:0>](<fail_1893@171:0>:bool)
        
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
        (<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>)
        |- P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,
                                               <<print_array_1052@156:1>@159:0>:int)
        
        
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,
                                       <print_array_1052@156:4>:int)
      lower bounds:
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<print_array_1052@156:4>:int) =
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,<<print_array_1052@156:1>@159:0>:int) =
        ((<<print_array_1052@156:1>@159:0> = 0) &&
         ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:0>) && (<print_array_1052@156:0> > 0)))
        P[<fail_1893@171:0>](<fail_1893@171:0>:bool) = false
      upper bounds:
        P[<fail_1893@171:0>](var578:bool) = true
      begin GenHcSolver.classify_pids(118033)[4]
        output:
          [<fail_1893@171:0>]
      end GenHcSolver.classify_pids(118033)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(118036)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(118037)[5]
          begin InterpProver.interpolate_fresh(118038)[6]
            begin InterpProver.interpolate_log(118039)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(118040)[8]
                begin InterpProver.interpolate_simplify(118041)[9]
                  begin InterpProver.interpolate_quick(118054)[10]
                    
                  end InterpProver.interpolate_quick(118054)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(118058)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(118058)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(118041)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(118040)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(118039)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(118038)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(118037)[5] (0.000000 sec.)
        output:
          P[<fail_1893@171:0>](<fail_1893@171:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(118036)[4] (0.000000 sec.)
      Horn clauses:
        P[<<print_array_1052@156:1>@159:0>](<k_make_array_u_1321@168:1>:int,<k_make_array_u_1321@168:0>:int),
        ((<k_make_array_u_1321@168:1> > 0) && (0 > <k_make_array_u_1321@168:0>)) |- bot
        
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
        (<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>)
        |- P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,
                                               <<print_array_1052@156:1>@159:0>:int)
        
        
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,
                                       <print_array_1052@156:4>:int)
      lower bounds:
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<print_array_1052@156:4>:int) =
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,<<print_array_1052@156:1>@159:0>:int) =
        ((<<print_array_1052@156:1>@159:0> = 0) &&
         ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:0>) && (<print_array_1052@156:0> > 0)))
      upper bounds:
        P[<<print_array_1052@156:1>@159:0>](var579:int,var580:int) = ((var579 <= 0) || (0 <= var580))
      begin GenHcSolver.classify_pids(119916)[4]
        output:
          [<<print_array_1052@156:1>@159:0>]
      end GenHcSolver.classify_pids(119916)[4] (0.000000 sec.)
      lb:((<<print_array_1052@156:1>@159:0> = 0) &&
          ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:0>) && (<print_array_1052@156:0> > 0)))
      nub:(not ((<print_array_1052@156:0> <= 0) || (0 <= <<print_array_1052@156:1>@159:0>)))
      begin ApronInterface.convex_hull_interpolate(119919)[4]
        lb:((<<print_array_1052@156:1>@159:0> = 0) &&
            ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:0>) && (<print_array_1052@156:0> > 0)))
        nub:(not ((<print_array_1052@156:0> <= 0) || (0 <= <<print_array_1052@156:1>@159:0>)))
        lb':((<<print_array_1052@156:1>@159:0> = 0) &&
             ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:0>) && (<print_array_1052@156:0> > 0)))
        nub':(not ((<print_array_1052@156:0> <= 0) || (0 <= <<print_array_1052@156:1>@159:0>)))
        begin InterpProver.interpolate(119920)[5]
          begin InterpProver.interpolate_fresh(119921)[6]
            begin InterpProver.interpolate_log(119922)[7]
              input1: ((<<print_array_1052@156:1>@159:0> = 0) &&
                       ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:0>) && (<print_array_1052@156:0> > 0)))
              input2: (not ((<print_array_1052@156:0> <= 0) || (0 <= <<print_array_1052@156:1>@159:0>)))
              begin InterpProver.interpolate_check(119923)[8]
                begin InterpProver.interpolate_simplify(119924)[9]
                  begin InterpProver.interpolate_quick(119999)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(120008)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(120009)[12]
                        begin CsisatInterface.interpolate_csisat_log(120010)[13]
                          input1: (0 = v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0 & 1 <= v_sep_print_array_1052_sep_156_sep_0 & (1 + v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0) <= v_sep_print_array_1052_sep_156_sep_0)
                          input2: (1 <= v_sep_print_array_1052_sep_156_sep_0 & (1 + v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(120011)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(120011)[14] (0.000000 sec.)
                          output: -2*v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(120010)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(120009)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(120008)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(119999)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(119924)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(119923)[8] (0.002000 sec.)
              output: (0 <= <<print_array_1052@156:1>@159:0>)
            end InterpProver.interpolate_log(119922)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(119921)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(119920)[5] (0.002000 sec.)
        output:
          P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,<<print_array_1052@156:1>@159:0>:int) =
          (0 <= <<print_array_1052@156:1>@159:0>)
      end ApronInterface.convex_hull_interpolate(119919)[4] (0.002000 sec.)
      Horn clauses:
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
        ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>) && (0 > <<print_array_1052@156:1>@159:0>))
        |- bot
        
        
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,
                                       <print_array_1052@156:4>:int)
      lower bounds:
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<print_array_1052@156:4>:int) =
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
      upper bounds:
        P[<print_array_1052@156:4>](var581:int,var582:int,var583:int) = ((var583 >= var582) || (0 <= var583))
      begin GenHcSolver.classify_pids(121358)[4]
        output:
          [<print_array_1052@156:4>]
      end GenHcSolver.classify_pids(121358)[4] (0.000000 sec.)
      lb:((<print_array_1052@156:4> = 0) &&
          ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
      nub:(not ((<print_array_1052@156:4> >= <print_array_1052@156:2>) || (0 <= <print_array_1052@156:4>)))
      begin ApronInterface.convex_hull_interpolate(121361)[4]
        lb:((<print_array_1052@156:4> = 0) &&
            ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        nub:(not ((<print_array_1052@156:4> >= <print_array_1052@156:2>) || (0 <= <print_array_1052@156:4>)))
        lb':((<print_array_1052@156:4> = 0) &&
             ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        nub':(not ((<print_array_1052@156:4> >= <print_array_1052@156:2>) || (0 <= <print_array_1052@156:4>)))
        begin InterpProver.interpolate(121362)[5]
          begin InterpProver.interpolate_fresh(121363)[6]
            begin InterpProver.interpolate_log(121364)[7]
              input1: ((<print_array_1052@156:4> = 0) &&
                       ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
              input2: (not ((<print_array_1052@156:4> >= <print_array_1052@156:2>) || (0 <= <print_array_1052@156:4>)))
              begin InterpProver.interpolate_check(121365)[8]
                begin InterpProver.interpolate_simplify(121366)[9]
                  begin InterpProver.interpolate_quick(121433)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(121442)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(121443)[12]
                        begin CsisatInterface.interpolate_csisat_log(121444)[13]
                          input1: (0 = v_sep_print_array_1052_sep_156_sep_4 & 1 <= v_sep_print_array_1052_sep_156_sep_2)
                          input2: ((1 + v_sep_print_array_1052_sep_156_sep_4) <= 0 & (1 + v_sep_print_array_1052_sep_156_sep_4) <= v_sep_print_array_1052_sep_156_sep_2)
                          begin CsisatInterface.interpolate_csisat_raw(121445)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(121445)[14] (0.000000 sec.)
                          output: -2*v_sep_print_array_1052_sep_156_sep_4 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(121444)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_print_array_1052_sep_156_sep_4 <= 0
                        after dnf conversion: ((-2*v_sep_print_array_1052_sep_156_sep_4 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(121443)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(121442)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(121433)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(121366)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(121365)[8] (0.001000 sec.)
              output: (0 <= <print_array_1052@156:4>)
            end InterpProver.interpolate_log(121364)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(121363)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(121362)[5] (0.001000 sec.)
        output:
          P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<print_array_1052@156:4>:int) =
          (0 <= <print_array_1052@156:4>)
      end ApronInterface.convex_hull_interpolate(121361)[4] (0.001000 sec.)
      begin HcSolver.check_validity(121658)[4]
        input:
          P[<fail_1893@171:0>](<fail_1893@171:0>:bool)|- bot
          
          P[<<print_array_1052@156:1>@159:0>](<k_make_array_u_1321@168:1>:int,<k_make_array_u_1321@168:0>:int),
          ((0 > <k_make_array_u_1321@168:0>) && ((<k_make_array_u_1321@168:1> > 0) && <fail_1893@171:0>))
          |- P[<fail_1893@171:0>](<fail_1893@171:0>:bool)
          
          P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
          (<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>)
          |- P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,
                                                 <<print_array_1052@156:1>@159:0>:int)
          
          
          ((<print_array_1052@156:4> = 0) &&
           ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
          |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,
                                         <print_array_1052@156:2>:int,
                                         <print_array_1052@156:4>:int)
          
           ((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
          |- P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,
                                   <bcopy_1046@149:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(121658)[4] (0.002000 sec.)
      solution:
        P[<fail_1893@171:0>](<fail_1893@171:0>:bool) = false
        P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,<<print_array_1052@156:1>@159:0>:int) =
        (0 <= <<print_array_1052@156:1>@159:0>)
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<print_array_1052@156:4>:int) =
        (0 <= <print_array_1052@156:4>)
        P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,<bcopy_1046@149:4>:int) = true
    end GenHcSolver.solve(113955)[3] (0.042993 sec.)
    begin GenHcSolver.solve(122120)[3]
      Horn clauses:
        P[<fail_1893@171:0>](<fail_1893@171:0>:bool)|- bot
        
        P[<<print_array_1052@156:1>@159:0>](<k_make_array_u_1321@168:1>:int,<k_make_array_u_1321@168:0>:int),
        ((0 > <k_make_array_u_1321@168:0>) && ((<k_make_array_u_1321@168:1> > 0) && <fail_1893@171:0>))
        |- P[<fail_1893@171:0>](<fail_1893@171:0>:bool)
        
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
        (<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>)
        |- P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,
                                               <<print_array_1052@156:1>@159:0>:int)
        
        
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,
                                       <print_array_1052@156:4>:int)
        
         ((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
        |- P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,
                                 <bcopy_1046@149:4>:int)
      lower bounds:
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<print_array_1052@156:4>:int) =
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,<bcopy_1046@149:4>:int) =
        ((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
        P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,<<print_array_1052@156:1>@159:0>:int) =
        ((<<print_array_1052@156:1>@159:0> = 0) &&
         ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:0>) && (<print_array_1052@156:0> > 0)))
        P[<fail_1893@171:0>](<fail_1893@171:0>:bool) = false
      upper bounds:
        P[<bcopy_1046@149:4>](var584:int,var585:int,var586:int) = true
      begin GenHcSolver.classify_pids(124247)[4]
        output:
          [<bcopy_1046@149:4>]
      end GenHcSolver.classify_pids(124247)[4] (0.000000 sec.)
      lb:((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(124250)[4]
        lb:((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(124276)[5]
          ts: ((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
          
        end ExtFormula.Formula.case_analysis_boolean(124276)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(124285)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(124285)[5] (0.000000 sec.)
        lb':(((<bcopy_1046@149:1> + (-1 * <bcopy_1046@149:0>)) = 0) &&
             ((<bcopy_1046@149:4> = 0) && ((-1 + <bcopy_1046@149:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(124288)[5]
          begin InterpProver.interpolate_fresh(124289)[6]
            begin InterpProver.interpolate_log(124290)[7]
              input1: (((<bcopy_1046@149:1> + (-1 * <bcopy_1046@149:0>)) = 0) &&
                       ((<bcopy_1046@149:4> = 0) && ((-1 + <bcopy_1046@149:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(124291)[8]
                begin InterpProver.interpolate_simplify(124292)[9]
                  begin InterpProver.interpolate_quick(124346)[10]
                    
                  end InterpProver.interpolate_quick(124346)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(124292)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(124291)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(124290)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(124289)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(124288)[5] (0.001000 sec.)
        output:
          P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,<bcopy_1046@149:4>:int) = true
      end ApronInterface.convex_hull_interpolate(124250)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1893@171:0>](<fail_1893@171:0>:bool)|- bot
        
        P[<<print_array_1052@156:1>@159:0>](<k_make_array_u_1321@168:1>:int,<k_make_array_u_1321@168:0>:int),
        ((0 > <k_make_array_u_1321@168:0>) && ((<k_make_array_u_1321@168:1> > 0) && <fail_1893@171:0>))
        |- P[<fail_1893@171:0>](<fail_1893@171:0>:bool)
        
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
        (<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>)
        |- P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,
                                               <<print_array_1052@156:1>@159:0>:int)
        
        
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,
                                       <print_array_1052@156:4>:int)
      lower bounds:
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<print_array_1052@156:4>:int) =
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,<<print_array_1052@156:1>@159:0>:int) =
        ((<<print_array_1052@156:1>@159:0> = 0) &&
         ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:0>) && (<print_array_1052@156:0> > 0)))
        P[<fail_1893@171:0>](<fail_1893@171:0>:bool) = false
      upper bounds:
        P[<fail_1893@171:0>](var588:bool) = true
      begin GenHcSolver.classify_pids(126243)[4]
        output:
          [<fail_1893@171:0>]
      end GenHcSolver.classify_pids(126243)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(126246)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(126249)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(126249)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(126254)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(126254)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(126257)[5]
          begin InterpProver.interpolate_fresh(126258)[6]
            begin InterpProver.interpolate_log(126259)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(126260)[8]
                begin InterpProver.interpolate_simplify(126261)[9]
                  begin InterpProver.interpolate_quick(126276)[10]
                    
                  end InterpProver.interpolate_quick(126276)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(126280)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(126280)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(126261)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(126260)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(126259)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(126258)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(126257)[5] (0.000000 sec.)
        output:
          P[<fail_1893@171:0>](<fail_1893@171:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(126246)[4] (0.000000 sec.)
      Horn clauses:
        P[<<print_array_1052@156:1>@159:0>](<k_make_array_u_1321@168:1>:int,<k_make_array_u_1321@168:0>:int),
        ((<k_make_array_u_1321@168:1> > 0) && (0 > <k_make_array_u_1321@168:0>)) |- bot
        
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
        (<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>)
        |- P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,
                                               <<print_array_1052@156:1>@159:0>:int)
        
        
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,
                                       <print_array_1052@156:4>:int)
      lower bounds:
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<print_array_1052@156:4>:int) =
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,<<print_array_1052@156:1>@159:0>:int) =
        ((<<print_array_1052@156:1>@159:0> = 0) &&
         ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:0>) && (<print_array_1052@156:0> > 0)))
      upper bounds:
        P[<<print_array_1052@156:1>@159:0>](var589:int,var590:int) = ((var589 <= 0) || (0 <= var590))
      begin GenHcSolver.classify_pids(128145)[4]
        output:
          [<<print_array_1052@156:1>@159:0>]
      end GenHcSolver.classify_pids(128145)[4] (0.000000 sec.)
      lb:((<<print_array_1052@156:1>@159:0> = 0) &&
          ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:0>) && (<print_array_1052@156:0> > 0)))
      nub:(not ((<print_array_1052@156:0> <= 0) || (0 <= <<print_array_1052@156:1>@159:0>)))
      begin ApronInterface.convex_hull_interpolate(128148)[4]
        lb:((<<print_array_1052@156:1>@159:0> = 0) &&
            ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:0>) && (<print_array_1052@156:0> > 0)))
        nub:(not ((<print_array_1052@156:0> <= 0) || (0 <= <<print_array_1052@156:1>@159:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(128173)[5]
          ts: ((<<print_array_1052@156:1>@159:0> = 0) &&
               ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:0>) && (<print_array_1052@156:0> > 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(128173)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(128191)[5]
          ts: ((<print_array_1052@156:0> > 0) && (0 > <<print_array_1052@156:1>@159:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(128191)[5] (0.000000 sec.)
        lb':((<<print_array_1052@156:1>@159:0> = 0) && ((-1 + <print_array_1052@156:0>) >= 0))
        nub':(((-1 + (-1 * <<print_array_1052@156:1>@159:0>)) >= 0) && ((-1 + <print_array_1052@156:0>) >= 0))
        begin InterpProver.interpolate(128196)[5]
          begin InterpProver.interpolate_fresh(128197)[6]
            begin InterpProver.interpolate_log(128198)[7]
              input1: ((<<print_array_1052@156:1>@159:0> = 0) && ((-1 + <print_array_1052@156:0>) >= 0))
              input2: (((-1 + (-1 * <<print_array_1052@156:1>@159:0>)) >= 0) && ((-1 + <print_array_1052@156:0>) >= 0))
              begin InterpProver.interpolate_check(128199)[8]
                begin InterpProver.interpolate_simplify(128200)[9]
                  begin InterpProver.interpolate_quick(128263)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(128272)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(128273)[12]
                        begin CsisatInterface.interpolate_csisat_log(128274)[13]
                          input1: (0 = v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0 & 1 <= v_sep_print_array_1052_sep_156_sep_0)
                          input2: (1 <= v_sep_print_array_1052_sep_156_sep_0 & (1 + v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(128275)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(128275)[14] (0.000000 sec.)
                          output: -2*v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(128274)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(128273)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(128272)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(128263)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(128200)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(128199)[8] (0.002000 sec.)
              output: (0 <= <<print_array_1052@156:1>@159:0>)
            end InterpProver.interpolate_log(128198)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(128197)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(128196)[5] (0.002000 sec.)
        output:
          P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,<<print_array_1052@156:1>@159:0>:int) =
          (0 <= <<print_array_1052@156:1>@159:0>)
      end ApronInterface.convex_hull_interpolate(128148)[4] (0.002000 sec.)
      Horn clauses:
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
        ((<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>) && (0 > <<print_array_1052@156:1>@159:0>))
        |- bot
        
        
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,
                                       <print_array_1052@156:4>:int)
      lower bounds:
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<print_array_1052@156:4>:int) =
        ((<print_array_1052@156:4> = 0) &&
         ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
      upper bounds:
        P[<print_array_1052@156:4>](var591:int,var592:int,var593:int) = ((var593 >= var592) || (0 <= var593))
      begin GenHcSolver.classify_pids(129626)[4]
        output:
          [<print_array_1052@156:4>]
      end GenHcSolver.classify_pids(129626)[4] (0.000000 sec.)
      lb:((<print_array_1052@156:4> = 0) &&
          ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
      nub:(not ((<print_array_1052@156:4> >= <print_array_1052@156:2>) || (0 <= <print_array_1052@156:4>)))
      begin ApronInterface.convex_hull_interpolate(129629)[4]
        lb:((<print_array_1052@156:4> = 0) &&
            ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
        nub:(not ((<print_array_1052@156:4> >= <print_array_1052@156:2>) || (0 <= <print_array_1052@156:4>)))
        begin ExtFormula.Formula.case_analysis_boolean(129655)[5]
          ts: ((<print_array_1052@156:4> = 0) &&
               ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
          
        end ExtFormula.Formula.case_analysis_boolean(129655)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(129676)[5]
          ts: ((<print_array_1052@156:4> < <print_array_1052@156:2>) && (0 > <print_array_1052@156:4>))
          
        end ExtFormula.Formula.case_analysis_boolean(129676)[5] (0.000000 sec.)
        lb':(((<print_array_1052@156:2> + (-1 * <print_array_1052@156:0>)) = 0) &&
             ((<print_array_1052@156:4> = 0) && ((-1 + <print_array_1052@156:0>) >= 0)))
        nub':(((-1 + (-1 * <print_array_1052@156:4>)) >= 0) &&
              (((-1 + (-1 * <print_array_1052@156:4>)) + <print_array_1052@156:2>) >= 0))
        begin InterpProver.interpolate(129682)[5]
          begin InterpProver.interpolate_fresh(129683)[6]
            begin InterpProver.interpolate_log(129684)[7]
              input1: (((<print_array_1052@156:2> + (-1 * <print_array_1052@156:0>)) = 0) &&
                       ((<print_array_1052@156:4> = 0) && ((-1 + <print_array_1052@156:0>) >= 0)))
              input2: (((-1 + (-1 * <print_array_1052@156:4>)) >= 0) &&
                       (((-1 + (-1 * <print_array_1052@156:4>)) + <print_array_1052@156:2>) >= 0))
              begin InterpProver.interpolate_check(129685)[8]
                begin InterpProver.interpolate_simplify(129686)[9]
                  begin InterpProver.interpolate_quick(129769)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(129778)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(129779)[12]
                        begin CsisatInterface.interpolate_csisat_log(129780)[13]
                          input1: (0 = v_sep_print_array_1052_sep_156_sep_4 & 1 <= v_sep_print_array_1052_sep_156_sep_2)
                          input2: ((1 + v_sep_print_array_1052_sep_156_sep_4) <= 0 & (1 + v_sep_print_array_1052_sep_156_sep_4) <= v_sep_print_array_1052_sep_156_sep_2)
                          begin CsisatInterface.interpolate_csisat_raw(129781)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(129781)[14] (0.000000 sec.)
                          output: -2*v_sep_print_array_1052_sep_156_sep_4 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(129780)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_print_array_1052_sep_156_sep_4 <= 0
                        after dnf conversion: ((-2*v_sep_print_array_1052_sep_156_sep_4 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(129779)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(129778)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(129769)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(129686)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(129685)[8] (0.000999 sec.)
              output: (0 <= <print_array_1052@156:4>)
            end InterpProver.interpolate_log(129684)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(129683)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(129682)[5] (0.000999 sec.)
        output:
          P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<print_array_1052@156:4>:int) =
          (0 <= <print_array_1052@156:4>)
      end ApronInterface.convex_hull_interpolate(129629)[4] (0.000999 sec.)
      begin HcSolver.check_validity(129998)[4]
        input:
          P[<fail_1893@171:0>](<fail_1893@171:0>:bool)|- bot
          
          P[<<print_array_1052@156:1>@159:0>](<k_make_array_u_1321@168:1>:int,<k_make_array_u_1321@168:0>:int),
          ((0 > <k_make_array_u_1321@168:0>) && ((<k_make_array_u_1321@168:1> > 0) && <fail_1893@171:0>))
          |- P[<fail_1893@171:0>](<fail_1893@171:0>:bool)
          
          P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
          (<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>)
          |- P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,
                                                 <<print_array_1052@156:1>@159:0>:int)
          
          
          ((<print_array_1052@156:4> = 0) &&
           ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
          |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,
                                         <print_array_1052@156:2>:int,
                                         <print_array_1052@156:4>:int)
          
           ((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
          |- P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,
                                   <bcopy_1046@149:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(129998)[4] (0.000000 sec.)
      solution:
        P[<fail_1893@171:0>](<fail_1893@171:0>:bool) = false
        P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,<<print_array_1052@156:1>@159:0>:int) =
        (0 <= <<print_array_1052@156:1>@159:0>)
        P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<print_array_1052@156:4>:int) =
        (0 <= <print_array_1052@156:4>)
        P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,<bcopy_1046@149:4>:int) = true
    end GenHcSolver.solve(122120)[3] (0.051992 sec.)
    begin YhornInterface.solve(130460)[3]
      begin HcSolver.solve_ub(130461)[4]
        encoded:
          P[<fail_1893@171:0>](<fail_1893@171:0>:int)|- bot
          
          P[<<print_array_1052@156:1>@159:0>](<k_make_array_u_1321@168:1>:int,<k_make_array_u_1321@168:0>:int),
          ((0 > <k_make_array_u_1321@168:0>) && ((<k_make_array_u_1321@168:1> > 0) && (<fail_1893@171:0> = 1)))
          |- P[<fail_1893@171:0>](<fail_1893@171:0>:int)
          
          P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
          (<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>)
          |- P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,
                                                 <<print_array_1052@156:1>@159:0>:int)
          
          
          ((<print_array_1052@156:4> = 0) &&
           ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
          |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,
                                         <print_array_1052@156:2>:int,
                                         <print_array_1052@156:4>:int)
          
           ((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
          |- P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,
                                   <bcopy_1046@149:4>:int)
        input to Yhorn:
          P[<fail_1893@171:0>](<fail_1893@171:0>:int)|- bot
          
          P[<<print_array_1052@156:1>@159:0>](<k_make_array_u_1321@168:1>:int,<k_make_array_u_1321@168:0>:int),
          ((<k_make_array_u_1321@168:1> > 0) && ((0 > <k_make_array_u_1321@168:0>) && (<fail_1893@171:0> = 1)))
          |- P[<fail_1893@171:0>](<fail_1893@171:0>:int)
          
          P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
          (<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>)
          |- P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,
                                                 <<print_array_1052@156:1>@159:0>:int)
          
          
          ((<print_array_1052@156:0> = <print_array_1052@156:2>) &&
           ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:4> = 0)))
          |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,
                                         <print_array_1052@156:2>:int,
                                         <print_array_1052@156:4>:int)
          
           ((<bcopy_1046@149:0> = <bcopy_1046@149:1>) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:4> = 0)))
          |- P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,
                                   <bcopy_1046@149:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1893_sep_171_sep_0($342)) -> 1=0.
(($342-1=0) & (-$343>0) & ($344>0)) & (v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0($344,$343)) -> v_sep_fail_1893_sep_171_sep_0($342).
($345-$346<0) & (v_sep_print_array_1052_sep_156_sep_4($347,$346,$345)) -> v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0($347,$345).
($348=0) & ($347>0) & (-$346+$347=0) -> v_sep_print_array_1052_sep_156_sep_4($347,$346,$348).
($349=0) & ($350>0) & ($350-$351=0) -> v_sep_bcopy_1046_sep_149_sep_4($350,$351,$349).


v_sep_bcopy_1046_sep_149_sep_4: X
v_sep_fail_1893_sep_171_sep_0: X
v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0: X
v_sep_print_array_1052_sep_156_sep_4: X
.....
v_sep_bcopy_1046_sep_149_sep_4: X
v_sep_fail_1893_sep_171_sep_0: X
v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0: X
v_sep_print_array_1052_sep_156_sep_4: X
....
v_sep_bcopy_1046_sep_149_sep_4: X
v_sep_fail_1893_sep_171_sep_0: X
v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0: X
v_sep_print_array_1052_sep_156_sep_4: X
.....
v_sep_bcopy_1046_sep_149_sep_4: X
v_sep_fail_1893_sep_171_sep_0: X
v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0: X
v_sep_print_array_1052_sep_156_sep_4: X
.....(0=0) & (v_sep_fail_1893_sep_171_sep_0($342)) -> 1=0.
(($342-1=0) & (-$343>0) & ($344>0)) & (v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0($344,$343)) -> v_sep_fail_1893_sep_171_sep_0($342).
($345-$346<0) & (v_sep_print_array_1052_sep_156_sep_4($347,$346,$345)) -> v_sep_print_array_1052_sep_156_sep_1_sep_159_sep_0($347,$345).
($348=0) & ($347>0) & (-$346+$347=0) -> v_sep_print_array_1052_sep_156_sep_4($347,$346,$348).
($349=0) & ($350>0) & ($350-$351=0) -> v_sep_bcopy_1046_sep_149_sep_4($350,$351,$349).

        solution:
          P[<bcopy_1046@149:4>]($367:int,$369:int,$371:int) = true
          P[<fail_1893@171:0>]($352:bool) = false
          P[<<print_array_1052@156:1>@159:0>]($355:int,$357:int) = (0 <= $357)
          P[<print_array_1052@156:4>]($360:int,$362:int,$364:int) = (0 <= $364)
        
      end HcSolver.solve_ub(130461)[4] (0.016998 sec.)
      begin HcSolver.check_validity(130728)[4]
        input:
          P[<fail_1893@171:0>](<fail_1893@171:0>:bool)|- bot
          
          P[<<print_array_1052@156:1>@159:0>](<k_make_array_u_1321@168:1>:int,<k_make_array_u_1321@168:0>:int),
          ((0 > <k_make_array_u_1321@168:0>) && ((<k_make_array_u_1321@168:1> > 0) && <fail_1893@171:0>))
          |- P[<fail_1893@171:0>](<fail_1893@171:0>:bool)
          
          P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,<print_array_1052@156:2>:int,<<print_array_1052@156:1>@159:0>:int),
          (<<print_array_1052@156:1>@159:0> < <print_array_1052@156:2>)
          |- P[<<print_array_1052@156:1>@159:0>](<print_array_1052@156:0>:int,
                                                 <<print_array_1052@156:1>@159:0>:int)
          
          
          ((<print_array_1052@156:4> = 0) &&
           ((<print_array_1052@156:0> > 0) && (<print_array_1052@156:0> = <print_array_1052@156:2>)))
          |- P[<print_array_1052@156:4>](<print_array_1052@156:0>:int,
                                         <print_array_1052@156:2>:int,
                                         <print_array_1052@156:4>:int)
          
           ((<bcopy_1046@149:4> = 0) && ((<bcopy_1046@149:0> > 0) && (<bcopy_1046@149:0> = <bcopy_1046@149:1>)))
          |- P[<bcopy_1046@149:4>](<bcopy_1046@149:0>:int,<bcopy_1046@149:1>:int,
                                   <bcopy_1046@149:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(130728)[4] (0.003999 sec.)
      solution:
        P[<bcopy_1046@149:4>]($367:int,$369:int,$371:int) = true
        P[<fail_1893@171:0>]($352:bool) = false
        P[<<print_array_1052@156:1>@159:0>]($355:int,$357:int) = (0 <= $357)
        P[<print_array_1052@156:4>]($360:int,$362:int,$364:int) = (0 <= $364)
    end YhornInterface.solve(130460)[3] (0.020997 sec.)
    
  end RefTypeInfer.infer_etrs(111752)[2] (0.448933 sec.)
  refinement types:
    main_1884: X
    f_1891: v1:int -> X
    main_1057: v1:int -> (v2:unit -> X) -> X
    f_1042: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:unit -> X) -> X
    bcopy_1046: v1:int ->
                v2:int ->
                (v3:int -> (v4:int -> X) -> X) ->
                (v7:int -> (v8:int -> X) -> X) -> v11:int -> ((v12:int -> (v13:int -> X) -> X) -> X) -> X
    f_f_1890: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:unit -> X) -> (v8:int -> (v9:int -> X) -> X) -> X
    print_array_1052: v1:int ->
                      (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) ->
                      v6:int -> (v7:int -> (v8:int -> X) -> X) -> v11:{v11:int | (0 <= v11)} -> (v12:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1321: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1893: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var649:int ->
            var648:int ->
            var647:int -> var646:int -> (var645:int -> (var644:int -> X) -> X) -> var641:int -> (var640:int -> X) -> X
    f_1892: var652:int -> var651:unit -> X
    f_bcopy_1886: var670:int ->
                  var669:int ->
                  var668:int ->
                  (var667:int -> (var666:int -> X) -> X) ->
                  ((var663:int -> (var662:int -> X) -> X) -> X) ->
                  (var658:int -> (var657:int -> X) -> X) -> var654:int -> X
    f_bcopy_1887: var688:int ->
                  var687:int ->
                  var686:int ->
                  var685:int ->
                  ((var684:int -> (var683:int -> X) -> X) -> X) ->
                  (var679:int -> (var678:int -> X) -> X) -> (var675:int -> (var674:int -> X) -> X) -> X
    f_print_array_1888: var703:int ->
                        var702:int ->
                        var701:int ->
                        (var700:int -> (var699:int -> X) -> X) ->
                        (var696:int -> (var695:int -> X) -> X) -> (var692:unit -> X) -> var690:int -> X
    f_print_array_1889: var719:int ->
                        var718:int ->
                        var717:int ->
                        var716:int ->
                        (var715:int -> (var714:int -> X) -> X) ->
                        (var711:int -> (var710:int -> X) -> X) -> (var707:unit -> X) -> var705:unit -> X
    f_update_1885: var733:int ->
                   var732:int ->
                   var731:int ->
                   (var730:int -> (var729:int -> X) -> X) ->
                   ((var726:int -> (var725:int -> X) -> X) -> X) -> var721:int -> X
    k_make_array_u_1332: var739:int -> var738:int -> (var737:int -> X) -> var735:unit -> X
    print_int_1040: var743:int -> (var742:unit -> X) -> X
    update_1033: var756:int ->
                 var755:int ->
                 (var754:int -> (var753:int -> X) -> X) ->
                 var750:int -> ((var749:int -> (var748:int -> X) -> X) -> X) -> X
  abstraction types:
    main_1884: X
    f_1891: v1:int -> X
    main_1057: v1:int -> (v2:unit -> X) -> X
    f_1042: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:unit -> X) -> X
    bcopy_1046: v1:int ->
                v2:int ->
                (v3:int -> (v4:int -> X) -> X) ->
                (v7:int -> (v8:int -> X) -> X) -> v11:int -> ((v12:int -> (v13:int -> X) -> X) -> X) -> X
    f_f_1890: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:unit -> X) -> (v8:int -> (v9:int -> X) -> X) -> X
    print_array_1052: v1:int ->
                      (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) ->
                      v6:int -> (v7:int -> (v8:int -> X) -> X) -> v11:int[v11 -> (
                                                                    0 <= v11)] -> (v12:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1321: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1893: v1:bool -> (v2:unit -> X) -> X
    a_1038: var649:int ->
            var648:int ->
            var647:int -> var646:int -> (var645:int -> (var644:int -> X) -> X) -> var641:int -> (var640:int -> X) -> X
    f_1892: var652:int -> var651:unit -> X
    f_bcopy_1886: var670:int ->
                  var669:int ->
                  var668:int ->
                  (var667:int -> (var666:int -> X) -> X) ->
                  ((var663:int -> (var662:int -> X) -> X) -> X) ->
                  (var658:int -> (var657:int -> X) -> X) -> var654:int -> X
    f_bcopy_1887: var688:int ->
                  var687:int ->
                  var686:int ->
                  var685:int ->
                  ((var684:int -> (var683:int -> X) -> X) -> X) ->
                  (var679:int -> (var678:int -> X) -> X) -> (var675:int -> (var674:int -> X) -> X) -> X
    f_print_array_1888: var703:int ->
                        var702:int ->
                        var701:int ->
                        (var700:int -> (var699:int -> X) -> X) ->
                        (var696:int -> (var695:int -> X) -> X) -> (var692:unit -> X) -> var690:int -> X
    f_print_array_1889: var719:int ->
                        var718:int ->
                        var717:int ->
                        var716:int ->
                        (var715:int -> (var714:int -> X) -> X) ->
                        (var711:int -> (var710:int -> X) -> X) -> (var707:unit -> X) -> var705:unit -> X
    f_update_1885: var733:int ->
                   var732:int ->
                   var731:int ->
                   (var730:int -> (var729:int -> X) -> X) ->
                   ((var726:int -> (var725:int -> X) -> X) -> X) -> var721:int -> X
    k_make_array_u_1332: var739:int -> var738:int -> (var737:int -> X) -> var735:unit -> X
    print_int_1040: var743:int -> (var742:unit -> X) -> X
    update_1033: var756:int ->
                 var755:int ->
                 (var754:int -> (var753:int -> X) -> X) ->
                 var750:int -> ((var749:int -> (var748:int -> X) -> X) -> X) -> X
  
end AbsTypeInfer.refine(111751)[1] (0.456931 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1884
  main_1884 -> (rand_int f_1891)
  a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 when (i_1034 = j_1039) -> (k_update_a_1401 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 when (
      not (i_1034 = j_1039)) -> (des_1036 i_1034 k_update_a_1401)
  bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 when (i_1050 >= m_1047) -> (k_f_bcopy_1535 des_1049)
  bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 when (
      not (i_1050 >= m_1047)) -> (src_1048 i_1050 (f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048))
  f_1042 m_1043 src_1044 des_1045 k_f_1476 ->
      (bcopy_1046 m_1043 m_1043 src_1044 des_1045 0 (f_f_1890 m_1043 des_1045 k_f_1476))
  f_1891 x_1859 -> (main_1057 x_1859 (f_1892 x_1859))
  f_1892 x_1859 x_1856 -> end
  f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048 x_1591 ->
      (update_1033 i_1050 m_1047 des_1049 x_1591 (f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048))
  f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048 x_1547 ->
      (bcopy_1046 m_1043 m_1047 src_1048 x_1547 (i_1050 + 1) k_f_bcopy_1535)
  f_f_1890 m_1043 des_1045 k_f_1476 x_1715 -> (print_array_1052 m_1043 des_1045 m_1043 x_1715 0 k_f_1476)
  f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664 x_1687 ->
      (print_int_1040 x_1687 (f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664))
  f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664 x_1667 ->
      (print_array_1052 m_1043 des_1045 m_1053 array_1054 (i_1055 + 1) k_f_print_array_1664)
  f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380 x_1386 ->
      (k_update_1380 (a_1038 i_1034 n_1035 x_1037 x_1386 des_1036))
  fail_1893 b k -> {fail} => (k ())
  k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 when b_1333 ->
      (k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 ())
  k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 when (not b_1333) ->
      (fail_1893 true (k_make_array_u_1332 i_1032 n_1031 k_make_array_1315))
  k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 x_1318 -> (k_make_array_1315 0)
  main_1057 n_1058 k_main_1787 when (n_1058 > 0) ->
      (f_1042 n_1058 (make_array_1030 n_1058) (make_array_1030 n_1058) k_main_1787)
  main_1057 n_1058 k_main_1787 when (not (n_1058 > 0)) -> (k_main_1787 ())
  make_array_1030 n_1031 i_1032 k_make_array_1315 when (0 <= i_1032) ->
      (k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1315 when (not (0 <= i_1032)) ->
      (k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 false)
  print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 when (
      i_1055 >= m_1053) -> (k_f_print_array_1664 ())
  print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 when (
      not (i_1055 >= m_1053)) ->
      (des_1045 i_1055 (f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664))
  print_int_1040 n_1041 k_print_int_1432 -> (k_print_int_1432 ())
  update_1033 i_1034 n_1035 des_1036 x_1037 k_update_1380 ->
      (des_1036 i_1034 (f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380))
Types:
  main_1884 : X
  bcopy_1046 : (x_1:int ->
                x_2:int ->
                (x_4:int[x_4 >= 0] -> (int -> X) -> X) ->
                (x_10:int[x_10 >= 0; x_1 >= x_10 + 1] -> (int -> X) -> X) ->
                x_15:int[x_15 >= 0; x_1 >= x_2] -> ((int -> (int -> X) -> X) -> X) -> X)
  fail_1893 : (x_1:bool[x_1] -> (unit -> X) -> X)
  print_array_1052 : (int ->
                      (x_3:int[x_3 >= 0] -> (int -> X) -> X) ->
                      int -> (int -> (int -> X) -> X) -> x_15:int[x_15 >= 0] -> (unit -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Error trace::
  main_1884 ... --> 
  f_1891 ... --> 
  main_1057 [1/2] ... --> 
  f_1042 ... --> 
  bcopy_1046 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1321 [1/2] ... --> 
  k_make_array_u_1332 ... --> 
  f_bcopy_1886 ... --> 
  update_1033 ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1321 [1/2] ... --> 
  k_make_array_u_1332 ... --> 
  f_update_1885 ... --> 
  f_bcopy_1887 ... --> 
  bcopy_1046 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1321 [2/2] ... --> 
  fail_1893 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 1; 0

(4-3) Checking counter-example ... DONE!

(4-4) Discovering predicates ... 
begin AbsTypeInfer.refine(133115)[1]
  program:
    main_1884  | true = ((Random.int 0) f_1891)
    a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 | (
    i_1034 = j_1039) = (k_update_a_1401 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 | (
    not (i_1034 = j_1039)) = (des_1036 i_1034
                                       k_update_a_1401)
    bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 | (
    i_1050 >= m_1047) = (k_f_bcopy_1535 des_1049)
    bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 | (
    not (i_1050 >= m_1047)) = (src_1048 i_1050
                                        (f_bcopy_1886 i_1050
                                                      m_1043
                                                      m_1047
                                                      des_1049
                                                      k_f_bcopy_1535
                                                      src_1048))
    f_1042 m_1043 src_1044 des_1045 k_f_1476 | true = (bcopy_1046
                                                         m_1043
                                                         m_1043
                                                         src_1044
                                                         des_1045
                                                         0
                                                         (f_f_1890 m_1043
                                                                   des_1045
                                                                   k_f_1476))
    f_1891 x_1859 | true = (main_1057 x_1859
                                      (f_1892 x_1859))
    f_1892 x_1859 x_1856 | true = end
    f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048 x_1591 | true = (
    update_1033 i_1050
                m_1047
                des_1049
                x_1591
                (f_bcopy_1887 i_1050
                              m_1043
                              m_1047
                              x_1591
                              k_f_bcopy_1535
                              src_1048))
    f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048 x_1547 | true = (
    bcopy_1046 m_1043
               m_1047
               src_1048
               x_1547
               (i_1050 + 1)
               k_f_bcopy_1535)
    f_f_1890 m_1043 des_1045 k_f_1476 x_1715 | true = (print_array_1052 m_1043
                                                                    des_1045
                                                                    m_1043
                                                                    x_1715
                                                                    0
                                                                    k_f_1476)
    f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664 x_1687 | true = (
    print_int_1040 x_1687
                   (f_print_array_1889 i_1055
                                       m_1043
                                       m_1053
                                       x_1687
                                       array_1054
                                       des_1045
                                       k_f_print_array_1664))
    f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664 x_1667 | true = (
    print_array_1052 m_1043
                     des_1045
                     m_1053
                     array_1054
                     (i_1055 + 1)
                     k_f_print_array_1664)
    f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380 x_1386 | true = (
    k_update_1380 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1386
                          des_1036))
    fail_1893 b k | true = (fail ())
    k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 | b_1333 = (
    k_make_array_u_1332 i_1032
                        n_1031
                        k_make_array_1315
                        ())
    k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 | (not b_1333) = (
    fail_1893 true
              (k_make_array_u_1332 i_1032
                                   n_1031
                                   k_make_array_1315))
    k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 x_1318 | true = (
    k_make_array_1315 0)
    main_1057 n_1058 k_main_1787 | (n_1058 > 0) = (f_1042
                                                     n_1058
                                                     (make_array_1030 n_1058)
                                                     (make_array_1030 n_1058)
                                                     k_main_1787)
    main_1057 n_1058 k_main_1787 | (not (n_1058 > 0)) = (k_main_1787 ())
    make_array_1030 n_1031 i_1032 k_make_array_1315 | (0 <= i_1032) = (
    k_make_array_u_1321 i_1032
                        n_1031
                        k_make_array_1315
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1315 | (not (0 <= i_1032)) = (
    k_make_array_u_1321 i_1032
                        n_1031
                        k_make_array_1315
                        false)
    print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 | (
    i_1055 >= m_1053) = (k_f_print_array_1664 ())
    print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 | (
    not (i_1055 >= m_1053)) = (des_1045
                                 i_1055
                                 (f_print_array_1888 i_1055
                                                     m_1043
                                                     m_1053
                                                     array_1054
                                                     des_1045
                                                     k_f_print_array_1664))
    print_int_1040 n_1041 k_print_int_1432 | true = (k_print_int_1432 ())
    update_1033 i_1034 n_1035 des_1036 x_1037 k_update_1380 | true = (
    des_1036 i_1034
             (f_update_1885 i_1034
                            n_1035
                            x_1037
                            des_1036
                            k_update_1380))
    main_1884:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    bcopy_1046:int ->
               int ->
               (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
    f_1042:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> X
    f_1891:int -> X
    f_1892:int -> unit -> X
    f_bcopy_1886:int ->
                 int ->
                 int ->
                 (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_1887:int ->
                 int ->
                 int ->
                 int -> ((int -> (int -> X) -> X) -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> X
    f_f_1890:int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> X
    f_print_array_1888:int ->
                       int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> int -> X
    f_print_array_1889:int ->
                       int ->
                       int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> unit -> X
    f_update_1885:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1893:bool -> (unit -> X) -> X
    k_make_array_u_1321:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1332:int -> int -> (int -> X) -> unit -> X
    main_1057:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    print_array_1052:int -> (int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    print_int_1040:int -> (unit -> X) -> X
    update_1033:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1042,f_1891,f_1892,f_bcopy_1886,f_bcopy_1887,f_f_1890,f_print_array_1888,f_print_array_1889,f_update_1885,k_make_array_u_1321,k_make_array_u_1332,main_1057,make_array_1030,print_int_1040,update_1033
  counterexample: 0:0:0:0:1:0:0:0:0:0:0:0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1891@177:0> = var757)
     [true.(<main_1057@179:0> = <f_1891@177:0>)
      [(<main_1057@179:0> > 0).(<f_1042@182:0> = <main_1057@179:0>)
       [true.
        ((<bcopy_1046@184:0> = <f_1042@182:0>) && ((<bcopy_1046@184:1> = <f_1042@182:0>) && (<bcopy_1046@184:4> = 0)))
        [(not (<bcopy_1046@184:4> >= <bcopy_1046@184:1>)).(<<bcopy_1046@184:2>@187:0> = <bcopy_1046@184:4>)
         [true.(<<f_1042@182:1>@189:0> = <<bcopy_1046@184:2>@187:0>)
          [true.((<make_array_1030@191:0> = <main_1057@179:0>) && (<make_array_1030@191:1> = <<f_1042@182:1>@189:0>))
           [(0 <= <make_array_1030@191:1>).
            ((<k_make_array_u_1321@194:0> = <make_array_1030@191:1>) &&
             ((<k_make_array_u_1321@194:1> = <make_array_1030@191:0>) &&
              (<k_make_array_u_1321@194:3> = (<make_array_1030@191:1> < <make_array_1030@191:0>))))
            [<k_make_array_u_1321@194:3>.
             ((<k_make_array_u_1332@197:0> = <k_make_array_u_1321@194:0>) &&
              ((<k_make_array_u_1332@197:1> = <k_make_array_u_1321@194:1>) && (<k_make_array_u_1332@197:3> = ())))
             [true.(<<k_make_array_u_1332@197:2>@199:0> = 0)
              [true.(<<k_make_array_u_1321@194:2>@201:0> = <<k_make_array_u_1332@197:2>@199:0>)
               [true.(<<make_array_1030@191:2>@203:0> = <<k_make_array_u_1321@194:2>@201:0>)
                [true.(<<<f_1042@182:1>@189:1>@205:0> = <<make_array_1030@191:2>@203:0>)
                 [true.(<<<bcopy_1046@184:2>@187:1>@207:0> = <<<f_1042@182:1>@189:1>@205:0>)
                  [true.
                   ((<f_bcopy_1886@209:0> = <bcopy_1046@184:4>) &&
                    ((<f_bcopy_1886@209:1> = <bcopy_1046@184:0>) &&
                     ((<f_bcopy_1886@209:2> = <bcopy_1046@184:1>) &&
                      (<f_bcopy_1886@209:6> = <<<bcopy_1046@184:2>@187:1>@207:0>))))
                   [true.
                    ((<update_1033@211:0> = <f_bcopy_1886@209:0>) &&
                     ((<update_1033@211:1> = <f_bcopy_1886@209:2>) && (<update_1033@211:3> = <f_bcopy_1886@209:6>)))
                    [true.(<<update_1033@211:2>@213:0> = <update_1033@211:0>)
                     [true.(<<f_bcopy_1886@209:3>@215:0> = <<update_1033@211:2>@213:0>)
                      [true.(<<bcopy_1046@184:3>@217:0> = <<f_bcopy_1886@209:3>@215:0>)
                       [true.(<<f_1042@182:2>@219:0> = <<bcopy_1046@184:3>@217:0>)
                        [true.
                         ((<make_array_1030@221:0> = <main_1057@179:0>) &&
                          (<make_array_1030@221:1> = <<f_1042@182:2>@219:0>))
                         [(0 <= <make_array_1030@221:1>).
                          ((<k_make_array_u_1321@224:0> = <make_array_1030@221:1>) &&
                           ((<k_make_array_u_1321@224:1> = <make_array_1030@221:0>) &&
                            (<k_make_array_u_1321@224:3> = (<make_array_1030@221:1> < <make_array_1030@221:0>))))
                          [<k_make_array_u_1321@224:3>.
                           ((<k_make_array_u_1332@227:0> = <k_make_array_u_1321@224:0>) &&
                            ((<k_make_array_u_1332@227:1> = <k_make_array_u_1321@224:1>) &&
                             (<k_make_array_u_1332@227:3> = ())))
                           [true.(<<k_make_array_u_1332@227:2>@229:0> = 0)
                            [true.(<<k_make_array_u_1321@224:2>@231:0> = <<k_make_array_u_1332@227:2>@229:0>)
                             [true.(<<make_array_1030@221:2>@233:0> = <<k_make_array_u_1321@224:2>@231:0>)
                              [true.(<<<f_1042@182:2>@219:1>@235:0> = <<make_array_1030@221:2>@233:0>)
                               [true.(<<<bcopy_1046@184:3>@217:1>@237:0> = <<<f_1042@182:2>@219:1>@235:0>)
                                [true.(<<<f_bcopy_1886@209:3>@215:1>@239:0> = <<<bcopy_1046@184:3>@217:1>@237:0>)
                                 [true.(<<<update_1033@211:2>@213:1>@241:0> = <<<f_bcopy_1886@209:3>@215:1>@239:0>)
                                  [true.
                                   ((<f_update_1885@243:0> = <update_1033@211:0>) &&
                                    ((<f_update_1885@243:1> = <update_1033@211:1>) &&
                                     ((<f_update_1885@243:2> = <update_1033@211:3>) &&
                                      (<f_update_1885@243:5> = <<<update_1033@211:2>@213:1>@241:0>))))
                                   [true.true
                                    [true.true
                                     [true.
                                      ((<f_bcopy_1887@249:0> = <f_bcopy_1886@209:0>) &&
                                       ((<f_bcopy_1887@249:1> = <f_bcopy_1886@209:1>) &&
                                        ((<f_bcopy_1887@249:2> = <f_bcopy_1886@209:2>) &&
                                         (<f_bcopy_1887@249:3> = <f_bcopy_1886@209:6>))))
                                      [true.
                                       ((<bcopy_1046@251:0> = <f_bcopy_1887@249:1>) &&
                                        ((<bcopy_1046@251:1> = <f_bcopy_1887@249:2>) &&
                                         (<bcopy_1046@251:4> = (<f_bcopy_1887@249:0> + 1))))
                                       [(not (<bcopy_1046@251:4> >= <bcopy_1046@251:1>)).
                                        (<<bcopy_1046@251:2>@254:0> = <bcopy_1046@251:4>)
                                        [true.(<<f_bcopy_1887@249:5>@256:0> = <<bcopy_1046@251:2>@254:0>)
                                         [true.(<<f_bcopy_1886@209:5>@258:0> = <<f_bcopy_1887@249:5>@256:0>)
                                          [true.(<<bcopy_1046@184:2>@260:0> = <<f_bcopy_1886@209:5>@258:0>)
                                           [true.(<<f_1042@182:1>@262:0> = <<bcopy_1046@184:2>@260:0>)
                                            [true.
                                             ((<make_array_1030@264:0> = <main_1057@179:0>) &&
                                              (<make_array_1030@264:1> = <<f_1042@182:1>@262:0>))
                                             [(0 <= <make_array_1030@264:1>).
                                              ((<k_make_array_u_1321@267:0> = <make_array_1030@264:1>) &&
                                               ((<k_make_array_u_1321@267:1> = <make_array_1030@264:0>) &&
                                                (<k_make_array_u_1321@267:3> =
                                                 (<make_array_1030@264:1> < <make_array_1030@264:0>))))
                                              [(not <k_make_array_u_1321@267:3>).(<fail_1893@270:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(133116)[2]
    horn clauses:
      P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
      
      P[<k_make_array_u_1321@267:3>](<k_make_array_u_1321@267:0>:int,<k_make_array_u_1321@267:1>:int,false:bool),
      <fail_1893@270:0> |- P[<fail_1893@270:0>](<fail_1893@270:0>:bool)
      
      P[<make_array_1030@264:1>](<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:0>:int),
      ((0 <= <k_make_array_u_1321@267:0>) &&
       (<k_make_array_u_1321@267:3> = (<k_make_array_u_1321@267:0> < <k_make_array_u_1321@267:1>)))
      |- P[<k_make_array_u_1321@267:3>](<k_make_array_u_1321@267:0>:int,
                                        <k_make_array_u_1321@267:1>:int,
                                        <k_make_array_u_1321@267:3>:bool)
      
      P[<main_1057@179:0>](<make_array_1030@264:0>:int),
      P[<<f_1042@182:1>@262:0>](<make_array_1030@264:0>:int,<make_array_1030@264:1>:int), (
      <make_array_1030@264:0> > 0)
      |- P[<make_array_1030@264:1>](<make_array_1030@264:0>:int,<make_array_1030@264:1>:int)
      
      P[<f_1042@182:0>](<f_1042@182:0>:int),
      P[<<bcopy_1046@184:2>@260:0>](<f_1042@182:0>:int,<f_1042@182:0>:int,<<f_1042@182:1>@262:0>:int)|- P[<<f_1042@182:1>@262:0>](
      <f_1042@182:0>:int,<<f_1042@182:1>@262:0>:int)
      
      P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
      P[<<f_bcopy_1886@209:5>@258:0>](<<bcopy_1046@184:2>@187:0>:int,<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@260:0>:int),
      (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
      |- P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                       <<bcopy_1046@184:2>@260:0>:int)
      
      P[<f_bcopy_1886@209:6>](<f_bcopy_1886@209:0>:int,<f_bcopy_1886@209:1>:int,<f_bcopy_1886@209:2>:int,<update_1033@211:3>:int),
      P[<<f_bcopy_1887@249:5>@256:0>](<f_bcopy_1886@209:0>:int,<f_bcopy_1886@209:1>:int,<f_bcopy_1886@209:2>:int,<update_1033@211:3>:int,<<f_bcopy_1886@209:5>@258:0>:int)|- P[<<f_bcopy_1886@209:5>@258:0>](
      <f_bcopy_1886@209:0>:int,<f_bcopy_1886@209:1>:int,<f_bcopy_1886@209:2>:int,
      <<f_bcopy_1886@209:5>@258:0>:int)
      
      P[<f_bcopy_1887@249:3>](<f_bcopy_1887@249:0>:int,<f_bcopy_1887@249:1>:int,<f_bcopy_1887@249:2>:int,<f_bcopy_1887@249:3>:int),
      P[<<bcopy_1046@251:2>@254:0>](<f_bcopy_1887@249:1>:int,<f_bcopy_1887@249:2>:int,<<f_bcopy_1887@249:5>@256:0>:int)|- P[<<f_bcopy_1887@249:5>@256:0>](
      <f_bcopy_1887@249:0>:int,<f_bcopy_1887@249:1>:int,<f_bcopy_1887@249:2>:int,
      <f_bcopy_1887@249:3>:int,<<f_bcopy_1887@249:5>@256:0>:int)
      
      P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<<bcopy_1046@251:2>@254:0>:int),
      (<<bcopy_1046@251:2>@254:0> < <bcopy_1046@251:1>)
      |- P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                       <<bcopy_1046@251:2>@254:0>:int)
      
      P[<f_bcopy_1887@249:3>]((-1 + <bcopy_1046@251:4>):int,<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<f_bcopy_1887@249:3>:int)|- P[<bcopy_1046@251:4>](
      <bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<bcopy_1046@251:4>:int)
      
      P[<f_bcopy_1886@209:6>](<f_bcopy_1887@249:0>:int,<f_bcopy_1887@249:1>:int,<f_bcopy_1887@249:2>:int,<f_bcopy_1887@249:3>:int)|- P[<f_bcopy_1887@249:3>](
      <f_bcopy_1887@249:0>:int,<f_bcopy_1887@249:1>:int,<f_bcopy_1887@249:2>:int,
      <f_bcopy_1887@249:3>:int)
      
      P[<update_1033@211:3>](<f_update_1885@243:0>:int,<f_update_1885@243:1>:int,<f_update_1885@243:2>:int),
      P[<<<update_1033@211:2>@213:1>@241:0>](<f_update_1885@243:0>:int,<f_update_1885@243:1>:int,<f_update_1885@243:0>:int,<f_update_1885@243:5>:int)|- P[<f_update_1885@243:5>](
      <f_update_1885@243:0>:int,<f_update_1885@243:1>:int,<f_update_1885@243:2>:int,
      <f_update_1885@243:5>:int)
      
      P[<f_bcopy_1886@209:6>](<update_1033@211:0>:int,<f_bcopy_1886@209:1>:int,<update_1033@211:1>:int,<update_1033@211:3>:int),
      P[<<<f_bcopy_1886@209:3>@215:1>@239:0>](<update_1033@211:0>:int,<f_bcopy_1886@209:1>:int,<update_1033@211:1>:int,<<update_1033@211:2>@213:0>:int,<<<update_1033@211:2>@213:1>@241:0>:int)|- P[<<<update_1033@211:2>@213:1>@241:0>](
      <update_1033@211:0>:int,<update_1033@211:1>:int,<<update_1033@211:2>@213:0>:int,
      <<<update_1033@211:2>@213:1>@241:0>:int)
      
      P[<bcopy_1046@184:4>](<f_bcopy_1886@209:1>:int,<f_bcopy_1886@209:2>:int,<f_bcopy_1886@209:0>:int),
      P[<<<bcopy_1046@184:3>@217:1>@237:0>](<f_bcopy_1886@209:1>:int,<f_bcopy_1886@209:2>:int,<<f_bcopy_1886@209:3>@215:0>:int,<<<f_bcopy_1886@209:3>@215:1>@239:0>:int),
      (<f_bcopy_1886@209:0> < <f_bcopy_1886@209:2>)
      |- P[<<<f_bcopy_1886@209:3>@215:1>@239:0>](<f_bcopy_1886@209:0>:int,
                                                 <f_bcopy_1886@209:1>:int,
                                                 <f_bcopy_1886@209:2>:int,
                                                 <<f_bcopy_1886@209:3>@215:0>:int,
                                                 <<<f_bcopy_1886@209:3>@215:1>@239:0>:int)
      
      P[<f_1042@182:0>](<bcopy_1046@184:0>:int),
      P[<<<f_1042@182:2>@219:1>@235:0>](<bcopy_1046@184:0>:int,<<bcopy_1046@184:3>@217:0>:int,<<<bcopy_1046@184:3>@217:1>@237:0>:int),
      (<bcopy_1046@184:0> = <bcopy_1046@184:1>)
      |- P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,
                                               <bcopy_1046@184:1>:int,
                                               <<bcopy_1046@184:3>@217:0>:int,
                                               <<<bcopy_1046@184:3>@217:1>@237:0>:int)
      
      P[<main_1057@179:0>](<f_1042@182:0>:int),
      P[<<make_array_1030@221:2>@233:0>](<f_1042@182:0>:int,<<f_1042@182:2>@219:0>:int,<<<f_1042@182:2>@219:1>@235:0>:int),
      P[<f_1042@182:0>](<f_1042@182:0>:int), (<f_1042@182:0> > 0)
      |- P[<<<f_1042@182:2>@219:1>@235:0>](<f_1042@182:0>:int,<<f_1042@182:2>@219:0>:int,
                                           <<<f_1042@182:2>@219:1>@235:0>:int)
      
      P[<make_array_1030@221:1>](<make_array_1030@221:0>:int,<make_array_1030@221:1>:int),
      P[<<k_make_array_u_1321@224:2>@231:0>](<make_array_1030@221:1>:int,<make_array_1030@221:0>:int,<<make_array_1030@221:2>@233:0>:int),
      (0 <= <make_array_1030@221:1>)
      |- P[<<make_array_1030@221:2>@233:0>](<make_array_1030@221:0>:int,
                                            <make_array_1030@221:1>:int,
                                            <<make_array_1030@221:2>@233:0>:int)
      
      P[<k_make_array_u_1321@224:3>](<k_make_array_u_1321@224:0>:int,<k_make_array_u_1321@224:1>:int,true:bool),
      P[<<k_make_array_u_1332@227:2>@229:0>](<k_make_array_u_1321@224:0>:int,<k_make_array_u_1321@224:1>:int,<<k_make_array_u_1321@224:2>@231:0>:int)|- P[<<k_make_array_u_1321@224:2>@231:0>](
      <k_make_array_u_1321@224:0>:int,<k_make_array_u_1321@224:1>:int,
      <<k_make_array_u_1321@224:2>@231:0>:int)
      
      P[<k_make_array_u_1332@227:3>](<k_make_array_u_1332@227:0>:int,<k_make_array_u_1332@227:1>:int,<k_make_array_u_1332@227:3>:unit),
      (<<k_make_array_u_1332@227:2>@229:0> = 0)
      |- P[<<k_make_array_u_1332@227:2>@229:0>](<k_make_array_u_1332@227:0>:int,
                                                <k_make_array_u_1332@227:1>:int,
                                                <<k_make_array_u_1332@227:2>@229:0>:int)
      
      P[<k_make_array_u_1321@224:3>](<k_make_array_u_1332@227:0>:int,<k_make_array_u_1332@227:1>:int,true:bool)|- P[<k_make_array_u_1332@227:3>](
      <k_make_array_u_1332@227:0>:int,<k_make_array_u_1332@227:1>:int,
      <k_make_array_u_1332@227:3>:unit)
      
      P[<make_array_1030@221:1>](<k_make_array_u_1321@224:1>:int,<k_make_array_u_1321@224:0>:int),
      ((0 <= <k_make_array_u_1321@224:0>) &&
       (<k_make_array_u_1321@224:3> = (<k_make_array_u_1321@224:0> < <k_make_array_u_1321@224:1>)))
      |- P[<k_make_array_u_1321@224:3>](<k_make_array_u_1321@224:0>:int,
                                        <k_make_array_u_1321@224:1>:int,
                                        <k_make_array_u_1321@224:3>:bool)
      
      P[<main_1057@179:0>](<make_array_1030@221:0>:int),
      P[<<f_1042@182:2>@219:0>](<make_array_1030@221:0>:int,<make_array_1030@221:1>:int), (
      <make_array_1030@221:0> > 0)
      |- P[<make_array_1030@221:1>](<make_array_1030@221:0>:int,<make_array_1030@221:1>:int)
      
      P[<f_1042@182:0>](<f_1042@182:0>:int),
      P[<<bcopy_1046@184:3>@217:0>](<f_1042@182:0>:int,<f_1042@182:0>:int,<<f_1042@182:2>@219:0>:int)|- P[<<f_1042@182:2>@219:0>](
      <f_1042@182:0>:int,<<f_1042@182:2>@219:0>:int)
      
      P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
      P[<<f_bcopy_1886@209:3>@215:0>](<<bcopy_1046@184:2>@187:0>:int,<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int),
      (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
      |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                       <<bcopy_1046@184:3>@217:0>:int)
      
      P[<f_bcopy_1886@209:6>](<f_bcopy_1886@209:0>:int,<f_bcopy_1886@209:1>:int,<f_bcopy_1886@209:2>:int,<update_1033@211:3>:int),
      P[<<update_1033@211:2>@213:0>](<f_bcopy_1886@209:0>:int,<f_bcopy_1886@209:2>:int,<<f_bcopy_1886@209:3>@215:0>:int)|- P[<<f_bcopy_1886@209:3>@215:0>](
      <f_bcopy_1886@209:0>:int,<f_bcopy_1886@209:1>:int,<f_bcopy_1886@209:2>:int,
      <<f_bcopy_1886@209:3>@215:0>:int)
      
      P[<update_1033@211:3>](<update_1033@211:0>:int,<update_1033@211:1>:int,<update_1033@211:3>:int),
      (<<update_1033@211:2>@213:0> = <update_1033@211:0>)
      |- P[<<update_1033@211:2>@213:0>](<update_1033@211:0>:int,<update_1033@211:1>:int,
                                        <<update_1033@211:2>@213:0>:int)
      
      P[<f_bcopy_1886@209:6>](<update_1033@211:0>:int,<f_bcopy_1886@209:1>:int,<update_1033@211:1>:int,<update_1033@211:3>:int)|- P[<update_1033@211:3>](
      <update_1033@211:0>:int,<update_1033@211:1>:int,<update_1033@211:3>:int)
      
      P[<bcopy_1046@184:4>](<f_bcopy_1886@209:1>:int,<f_bcopy_1886@209:2>:int,<f_bcopy_1886@209:0>:int),
      P[<<<bcopy_1046@184:2>@187:1>@207:0>](<f_bcopy_1886@209:1>:int,<f_bcopy_1886@209:2>:int,<f_bcopy_1886@209:0>:int,<f_bcopy_1886@209:6>:int),
      (<f_bcopy_1886@209:0> < <f_bcopy_1886@209:2>)
      |- P[<f_bcopy_1886@209:6>](<f_bcopy_1886@209:0>:int,<f_bcopy_1886@209:1>:int,
                                 <f_bcopy_1886@209:2>:int,<f_bcopy_1886@209:6>:int)
      
      P[<f_1042@182:0>](<bcopy_1046@184:0>:int),
      P[<<<f_1042@182:1>@189:1>@205:0>](<bcopy_1046@184:0>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int),
      (<bcopy_1046@184:0> = <bcopy_1046@184:1>)
      |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                               <bcopy_1046@184:1>:int,
                                               <<bcopy_1046@184:2>@187:0>:int,
                                               <<<bcopy_1046@184:2>@187:1>@207:0>:int)
      
      P[<main_1057@179:0>](<f_1042@182:0>:int),
      P[<<make_array_1030@191:2>@203:0>](<f_1042@182:0>:int,<<f_1042@182:1>@189:0>:int,<<<f_1042@182:1>@189:1>@205:0>:int),
      P[<f_1042@182:0>](<f_1042@182:0>:int), (<f_1042@182:0> > 0)
      |- P[<<<f_1042@182:1>@189:1>@205:0>](<f_1042@182:0>:int,<<f_1042@182:1>@189:0>:int,
                                           <<<f_1042@182:1>@189:1>@205:0>:int)
      
      P[<make_array_1030@191:1>](<make_array_1030@191:0>:int,<make_array_1030@191:1>:int),
      P[<<k_make_array_u_1321@194:2>@201:0>](<make_array_1030@191:1>:int,<make_array_1030@191:0>:int,<<make_array_1030@191:2>@203:0>:int),
      (0 <= <make_array_1030@191:1>)
      |- P[<<make_array_1030@191:2>@203:0>](<make_array_1030@191:0>:int,
                                            <make_array_1030@191:1>:int,
                                            <<make_array_1030@191:2>@203:0>:int)
      
      P[<k_make_array_u_1321@194:3>](<k_make_array_u_1321@194:0>:int,<k_make_array_u_1321@194:1>:int,true:bool),
      P[<<k_make_array_u_1332@197:2>@199:0>](<k_make_array_u_1321@194:0>:int,<k_make_array_u_1321@194:1>:int,<<k_make_array_u_1321@194:2>@201:0>:int)|- P[<<k_make_array_u_1321@194:2>@201:0>](
      <k_make_array_u_1321@194:0>:int,<k_make_array_u_1321@194:1>:int,
      <<k_make_array_u_1321@194:2>@201:0>:int)
      
      P[<k_make_array_u_1332@197:3>](<k_make_array_u_1332@197:0>:int,<k_make_array_u_1332@197:1>:int,<k_make_array_u_1332@197:3>:unit),
      (<<k_make_array_u_1332@197:2>@199:0> = 0)
      |- P[<<k_make_array_u_1332@197:2>@199:0>](<k_make_array_u_1332@197:0>:int,
                                                <k_make_array_u_1332@197:1>:int,
                                                <<k_make_array_u_1332@197:2>@199:0>:int)
      
      P[<k_make_array_u_1321@194:3>](<k_make_array_u_1332@197:0>:int,<k_make_array_u_1332@197:1>:int,true:bool)|- P[<k_make_array_u_1332@197:3>](
      <k_make_array_u_1332@197:0>:int,<k_make_array_u_1332@197:1>:int,
      <k_make_array_u_1332@197:3>:unit)
      
      P[<make_array_1030@191:1>](<k_make_array_u_1321@194:1>:int,<k_make_array_u_1321@194:0>:int),
      ((0 <= <k_make_array_u_1321@194:0>) &&
       (<k_make_array_u_1321@194:3> = (<k_make_array_u_1321@194:0> < <k_make_array_u_1321@194:1>)))
      |- P[<k_make_array_u_1321@194:3>](<k_make_array_u_1321@194:0>:int,
                                        <k_make_array_u_1321@194:1>:int,
                                        <k_make_array_u_1321@194:3>:bool)
      
      P[<main_1057@179:0>](<make_array_1030@191:0>:int),
      P[<<f_1042@182:1>@189:0>](<make_array_1030@191:0>:int,<make_array_1030@191:1>:int), (
      <make_array_1030@191:0> > 0)
      |- P[<make_array_1030@191:1>](<make_array_1030@191:0>:int,<make_array_1030@191:1>:int)
      
      P[<f_1042@182:0>](<f_1042@182:0>:int),
      P[<<bcopy_1046@184:2>@187:0>](<f_1042@182:0>:int,<f_1042@182:0>:int,<<f_1042@182:1>@189:0>:int)|- P[<<f_1042@182:1>@189:0>](
      <f_1042@182:0>:int,<<f_1042@182:1>@189:0>:int)
      
      P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
      (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
      |- P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                       <<bcopy_1046@184:2>@187:0>:int)
      
      P[<f_1042@182:0>](<bcopy_1046@184:0>:int),
      ((<bcopy_1046@184:4> = 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>))
      |- P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                               <bcopy_1046@184:4>:int)
      
      P[<main_1057@179:0>](<f_1042@182:0>:int), (<f_1042@182:0> > 0) |- P[<f_1042@182:0>](<f_1042@182:0>:int)
      
      P[<f_1891@177:0>](<main_1057@179:0>:int)|- P[<main_1057@179:0>](<main_1057@179:0>:int)
      
      |- P[<f_1891@177:0>](<f_1891@177:0>:int)
    call trees:
      <main_1884@174>
        <f_1891@177>
          <main_1057@179>
            <f_1042@182>
              <bcopy_1046@184>
              </<bcopy_1046@184:2>@187>
            </<f_1042@182:1>@189>
            <make_array_1030@191>
              <k_make_array_u_1321@194>
                <k_make_array_u_1332@197>
                </<k_make_array_u_1332@197:2>@199>
              </<k_make_array_u_1321@194:2>@201>
            </<make_array_1030@191:2>@203>
            <<<f_1042@182:1>@189:1>@205>
              <<<bcopy_1046@184:2>@187:1>@207>
                <f_bcopy_1886@209>
                  <update_1033@211>
                  </<update_1033@211:2>@213>
                </<f_bcopy_1886@209:3>@215>
              </<bcopy_1046@184:3>@217>
            </<f_1042@182:2>@219>
            <make_array_1030@221>
              <k_make_array_u_1321@224>
                <k_make_array_u_1332@227>
                </<k_make_array_u_1332@227:2>@229>
              </<k_make_array_u_1321@224:2>@231>
            </<make_array_1030@221:2>@233>
            <<<f_1042@182:2>@219:1>@235>
              <<<bcopy_1046@184:3>@217:1>@237>
                <<<f_bcopy_1886@209:3>@215:1>@239>
                  <<<update_1033@211:2>@213:1>@241>
                    <f_update_1885@243>
                    </<f_update_1885@243:4>@245>
                  </<update_1033@211:4>@247>
                  <f_bcopy_1887@249>
                    <bcopy_1046@251>
                    </<bcopy_1046@251:2>@254>
                  </<f_bcopy_1887@249:5>@256>
                </<f_bcopy_1886@209:5>@258>
              </<bcopy_1046@184:2>@260>
            </<f_1042@182:1>@262>
            <make_array_1030@264>
              <k_make_array_u_1321@267>
                <fail_1893@270>
    inlined horn clauses:
      P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
      
      P[<<bcopy_1046@184:2>@260:0>](<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:0>:int),
      ((0 <= <k_make_array_u_1321@267:0>) &&
       ((<k_make_array_u_1321@267:1> > 0) &&
        ((<k_make_array_u_1321@267:0> >= <k_make_array_u_1321@267:1>) && <fail_1893@270:0>)))
      |- P[<fail_1893@270:0>](<fail_1893@270:0>:bool)
      
      P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
      P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,var764:int),
      P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@260:0>:int),
      (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
      |- P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                       <<bcopy_1046@184:2>@260:0>:int)
      
      P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<<bcopy_1046@251:2>@254:0>:int),
      (<<bcopy_1046@251:2>@254:0> < <bcopy_1046@251:1>)
      |- P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                       <<bcopy_1046@251:2>@254:0>:int)
      
      P[<bcopy_1046@184:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                            -1 + <bcopy_1046@251:4>):int),
      P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                                            -1 + <bcopy_1046@251:4>):int,<f_bcopy_1887@249:3>:int),
      (<bcopy_1046@251:4> < (1 + <bcopy_1046@251:1>))
      |- P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                               <bcopy_1046@251:4>:int)
      
      P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:3>@217:0>:int),
      ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
       ((0 <= <<bcopy_1046@184:3>@217:0>) &&
        ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) &&
         ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
      |- P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,
                                               <bcopy_1046@184:1>:int,
                                               <<bcopy_1046@184:3>@217:0>:int,
                                               <<<bcopy_1046@184:3>@217:1>@237:0>:int)
      
      P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,var765:int),
      P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int),
      (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)
      |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                       <<bcopy_1046@184:3>@217:0>:int)
      
      P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:2>@187:0>:int),
      ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
       ((0 <= <<bcopy_1046@184:2>@187:0>) &&
        ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) &&
         ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
      |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                               <bcopy_1046@184:1>:int,
                                               <<bcopy_1046@184:2>@187:0>:int,
                                               <<<bcopy_1046@184:2>@187:1>@207:0>:int)
      
      P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
      (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
      |- P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                       <<bcopy_1046@184:2>@187:0>:int)
      
       ((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))
      |- P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                               <bcopy_1046@184:4>:int)
    begin ParamSubstInfer.infer(140455)[3]
      
    end ParamSubstInfer.infer(140455)[3] (0.386941 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(140457)[3]
      
    end RefTypeInfer.elim_coeffs(140457)[3] (0.005999 sec.)
    begin GenHcSolver.solve(141456)[3]
      Horn clauses:
        P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
        
        P[<<bcopy_1046@184:2>@260:0>](<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:0>:int),
        ((0 <= <k_make_array_u_1321@267:0>) &&
         ((<k_make_array_u_1321@267:1> > 0) &&
          ((<k_make_array_u_1321@267:0> >= <k_make_array_u_1321@267:1>) && <fail_1893@270:0>)))
        |- P[<fail_1893@270:0>](<fail_1893@270:0>:bool)
        
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,var764:int),
        P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@260:0>:int),
        (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
        |- P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                         <<bcopy_1046@184:2>@260:0>:int)
        
        P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<<bcopy_1046@251:2>@254:0>:int),
        (<<bcopy_1046@251:2>@254:0> < <bcopy_1046@251:1>)
        |- P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                         <<bcopy_1046@251:2>@254:0>:int)
        
        P[<bcopy_1046@184:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                              -1 + <bcopy_1046@251:4>):int),
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                                              -1 + <bcopy_1046@251:4>):int,<f_bcopy_1887@249:3>:int),
        (<bcopy_1046@251:4> < (1 + <bcopy_1046@251:1>))
        |- P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                 <bcopy_1046@251:4>:int)
        
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:3>@217:0>:int),
        ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
         ((0 <= <<bcopy_1046@184:3>@217:0>) &&
          ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:3>@217:0>:int,
                                                 <<<bcopy_1046@184:3>@217:1>@237:0>:int)
        
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,var765:int),
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int),
        (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)
        |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                         <<bcopy_1046@184:3>@217:0>:int)
        
        P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:2>@187:0>:int),
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:2>@187:0>:int,
                                                 <<<bcopy_1046@184:2>@187:1>@207:0>:int)
        
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
        (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
        |- P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                         <<bcopy_1046@184:2>@187:0>:int)
        
         ((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))
        |- P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                 <bcopy_1046@184:4>:int)
      lower bounds:
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<bcopy_1046@184:4>:int) =
        ((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))
        P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int) =
        ((<<bcopy_1046@184:2>@187:0> = 0) &&
         ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) &&
          ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>))))
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int) =
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((<<bcopy_1046@184:2>@187:0> = 0) &&
          ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
        P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<bcopy_1046@251:4>:int) =
        ((<bcopy_1046@251:4> = 1) &&
         ((<bcopy_1046@251:1> = <bcopy_1046@251:0>) &&
          ((<bcopy_1046@251:0> > 0) &&
           ((<bcopy_1046@251:4> < (1 + <bcopy_1046@251:0>)) && (<bcopy_1046@251:4> < (1 + <bcopy_1046@251:1>))))))
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int) =
        ((<<bcopy_1046@184:3>@217:0> = 0) &&
         ((<bcopy_1046@184:0> = <bcopy_1046@184:1>) &&
          ((<bcopy_1046@184:0> > 0) &&
           ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) && (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
        P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<<bcopy_1046@251:2>@254:0>:int) =
        ((<<bcopy_1046@251:2>@254:0> = 1) &&
         ((<<bcopy_1046@251:2>@254:0> < <bcopy_1046@251:1>) &&
          ((<bcopy_1046@251:0> > 0) &&
           ((<<bcopy_1046@251:2>@254:0> < (1 + <bcopy_1046@251:0>)) && (<bcopy_1046@251:1> = <bcopy_1046@251:0>)))))
        P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,<<<bcopy_1046@184:3>@217:1>@237:0>:int) =
        ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
         ((<<bcopy_1046@184:3>@217:0> = 0) &&
          ((<bcopy_1046@184:0> > 0) &&
           ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
        P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@260:0>:int) =
        ((<<bcopy_1046@184:2>@260:0> = 1) &&
         ((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
          ((<<bcopy_1046@184:2>@260:0> < (1 + <bcopy_1046@184:0>)) &&
           ((<bcopy_1046@184:0> > 0) && ((<<bcopy_1046@184:2>@260:0> < <bcopy_1046@184:1>) && (0 < <bcopy_1046@184:1>))))))
        P[<fail_1893@270:0>](<fail_1893@270:0>:bool) = false
      upper bounds:
        P[<<bcopy_1046@184:2>@260:0>](var777:int,var778:int,var779:int) =
        ((var779 < var777) || ((var777 <= 0) || ((0 > var779) || (var777 <> var778))))
        P[<<bcopy_1046@251:2>@254:0>](var772:int,var773:int,var774:int) =
        ((var772 <= 0) || ((var774 < var772) || ((0 > var774) || (var772 <> var773))))
        P[<<bcopy_1046@184:2>@187:0>](var767:int,var768:int,var769:int) = true
      begin GenHcSolver.classify_pids(171192)[4]
        output:
          [<<bcopy_1046@184:2>@187:0>;<<bcopy_1046@251:2>@254:0>;<<bcopy_1046@184:2>@260:0>]
      end GenHcSolver.classify_pids(171192)[4] (0.003000 sec.)
      begin ApronInterface.convex_hull_interpolate(171465)[4]
        lb:(((<<bcopy_1046@184:2>@187:0> = 0) &&
             ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) &&
              ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))) ||
            (((<<bcopy_1046@184:2>@187:0> = 1) &&
              ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) &&
               ((<bcopy_1046@184:0> > 0) &&
                ((<<bcopy_1046@184:2>@187:0> < (1 + <bcopy_1046@184:0>)) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>))))) ||
             ((<<bcopy_1046@184:2>@187:0> = 1) &&
              ((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
               ((<<bcopy_1046@184:2>@187:0> < (1 + <bcopy_1046@184:0>)) &&
                ((<bcopy_1046@184:0> > 0) &&
                 ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) && (0 < <bcopy_1046@184:1>))))))))
        nub:((not
                ((<bcopy_1046@184:0> <= 0) ||
                 ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) ||
                  ((0 > <<bcopy_1046@184:2>@187:0>) || (<bcopy_1046@184:0> <> <bcopy_1046@184:1>))))) ||
             (not
                ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) ||
                 ((<bcopy_1046@184:0> <= 0) ||
                  ((0 > <<bcopy_1046@184:2>@187:0>) || (<bcopy_1046@184:0> <> <bcopy_1046@184:1>))))))
        lb':(((<<bcopy_1046@184:2>@187:0> = 0) &&
              ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) &&
               ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))) ||
             (((<<bcopy_1046@184:2>@187:0> = 1) &&
               ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) &&
                ((<bcopy_1046@184:0> > 0) &&
                 ((<<bcopy_1046@184:2>@187:0> < (1 + <bcopy_1046@184:0>)) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>))))) ||
              ((<<bcopy_1046@184:2>@187:0> = 1) &&
               ((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
                ((<<bcopy_1046@184:2>@187:0> < (1 + <bcopy_1046@184:0>)) &&
                 ((<bcopy_1046@184:0> > 0) &&
                  ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) && (0 < <bcopy_1046@184:1>))))))))
        nub':((not
                 ((<bcopy_1046@184:0> <= 0) ||
                  ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) ||
                   ((0 > <<bcopy_1046@184:2>@187:0>) || (<bcopy_1046@184:0> <> <bcopy_1046@184:1>))))) ||
              (not
                 ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) ||
                  ((<bcopy_1046@184:0> <= 0) ||
                   ((0 > <<bcopy_1046@184:2>@187:0>) || (<bcopy_1046@184:0> <> <bcopy_1046@184:1>))))))
        begin InterpProver.interpolate(171466)[5]
          begin InterpProver.interpolate_fresh(171467)[6]
            begin InterpProver.interpolate_log(171468)[7]
              input1: (((<<bcopy_1046@184:2>@187:0> = 0) &&
                        ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) &&
                         ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))) ||
                       (((<<bcopy_1046@184:2>@187:0> = 1) &&
                         ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) &&
                          ((<bcopy_1046@184:0> > 0) &&
                           ((<<bcopy_1046@184:2>@187:0> < (1 + <bcopy_1046@184:0>)) &&
                            (<bcopy_1046@184:1> = <bcopy_1046@184:0>))))) ||
                        ((<<bcopy_1046@184:2>@187:0> = 1) &&
                         ((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
                          ((<<bcopy_1046@184:2>@187:0> < (1 + <bcopy_1046@184:0>)) &&
                           ((<bcopy_1046@184:0> > 0) &&
                            ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) && (0 < <bcopy_1046@184:1>))))))))
              input2: ((not
                          ((<bcopy_1046@184:0> <= 0) ||
                           ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) ||
                            ((0 > <<bcopy_1046@184:2>@187:0>) || (<bcopy_1046@184:0> <> <bcopy_1046@184:1>))))) ||
                       (not
                          ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) ||
                           ((<bcopy_1046@184:0> <= 0) ||
                            ((0 > <<bcopy_1046@184:2>@187:0>) || (<bcopy_1046@184:0> <> <bcopy_1046@184:1>))))))
              begin InterpProver.interpolate_check(171469)[8]
                begin InterpProver.interpolate_simplify(171470)[9]
                  begin InterpProver.interpolate_quick(172190)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(172199)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(172200)[12]
                        begin CsisatInterface.interpolate_csisat_log(172201)[13]
                          input1: (((0 = v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0 & v_sep_bcopy_1046_sep_184_sep_0 = v_sep_bcopy_1046_sep_184_sep_1) | (1 = v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0 & v_sep_bcopy_1046_sep_184_sep_0 = v_sep_bcopy_1046_sep_184_sep_1 & (1 + v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0) <= (1 + v_sep_bcopy_1046_sep_184_sep_0))) & 1 <= v_sep_bcopy_1046_sep_184_sep_0 & (1 + v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0) <= v_sep_bcopy_1046_sep_184_sep_1)
                          input2: (v_sep_bcopy_1046_sep_184_sep_0 = v_sep_bcopy_1046_sep_184_sep_1 & 0 <= v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0 & 1 <= v_sep_bcopy_1046_sep_184_sep_0 & v_sep_bcopy_1046_sep_184_sep_0 <= v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(172202)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(172202)[14] (0.001000 sec.)
                          output: (not v_sep_bcopy_1046_sep_184_sep_0 = v_sep_bcopy_1046_sep_184_sep_1 | v_sep_bcopy_1046_sep_184_sep_0 < 1 | (-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0) <= -2)
                          
                        end CsisatInterface.interpolate_csisat_log(172201)[13] (0.001000 sec.)
                        after simplification: (not v_sep_bcopy_1046_sep_184_sep_0 = v_sep_bcopy_1046_sep_184_sep_1 | v_sep_bcopy_1046_sep_184_sep_0 < 1 | (-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0) <= -2)
                        after dnf conversion: ((not v_sep_bcopy_1046_sep_184_sep_0 = v_sep_bcopy_1046_sep_184_sep_1) | (v_sep_bcopy_1046_sep_184_sep_0 < 1) | ((-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(172200)[12] (0.002000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(172199)[11] (0.002000 sec.)
                    
                  end InterpProver.interpolate_quick(172190)[10] (0.003000 sec.)
                  begin minimizing # of disjunctions(172226)[10]
                    input: ((<bcopy_1046@184:0> <> <bcopy_1046@184:1>) ||
                            ((<bcopy_1046@184:0> < 1) || ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)))
                    output: ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
                  end minimizing # of disjunctions(172226)[10] (0.001999 sec.)
                  
                end InterpProver.interpolate_simplify(171470)[9] (0.007998 sec.)
                
              end InterpProver.interpolate_check(171469)[8] (0.007998 sec.)
              output: ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
            end InterpProver.interpolate_log(171468)[7] (0.007998 sec.)
            
          end InterpProver.interpolate_fresh(171467)[6] (0.007998 sec.)
          
        end InterpProver.interpolate(171466)[5] (0.007998 sec.)
        output:
          P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int) =
          ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
          P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int) =
          ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
          P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int) =
          ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
      end ApronInterface.convex_hull_interpolate(171465)[4] (0.008998 sec.)
      Horn clauses:
        P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
        
        P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<<bcopy_1046@251:2>@254:0>:int),
        ((<<bcopy_1046@251:2>@254:0> < <bcopy_1046@251:1>) && ((1 + <<bcopy_1046@251:2>@254:0>) > <bcopy_1046@251:0>))
        |- bot
        
        P[<bcopy_1046@184:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                              -1 + <bcopy_1046@251:4>):int),
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                                              -1 + <bcopy_1046@251:4>):int,<f_bcopy_1887@249:3>:int),
        (<bcopy_1046@251:4> < (1 + <bcopy_1046@251:1>))
        |- P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                 <bcopy_1046@251:4>:int)
        
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:3>@217:0>:int),
        ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
         ((0 <= <<bcopy_1046@184:3>@217:0>) &&
          ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:3>@217:0>:int,
                                                 <<<bcopy_1046@184:3>@217:1>@237:0>:int)
        
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,var765:int),
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int),
        (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)
        |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                         <<bcopy_1046@184:3>@217:0>:int)
        
        
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:2>@187:0>:int,
                                                 <<<bcopy_1046@184:2>@187:1>@207:0>:int)
        
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
        ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) && ((1 + <<bcopy_1046@184:2>@187:0>) > <bcopy_1046@184:0>))
        |- bot
        
         ((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))
        |- P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                 <bcopy_1046@184:4>:int)
      lower bounds:
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int) =
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<bcopy_1046@184:4>:int) =
        ((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))
        P[<fail_1893@270:0>](var784:bool) = false
        P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<bcopy_1046@251:4>:int) =
        ((<bcopy_1046@251:4> = 1) &&
         ((<bcopy_1046@251:0> = <bcopy_1046@251:1>) &&
          ((<bcopy_1046@251:0> > 0) &&
           ((<bcopy_1046@251:4> <= <bcopy_1046@251:0>) && (<bcopy_1046@251:4> < (1 + <bcopy_1046@251:1>))))))
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int) =
        ((<<bcopy_1046@184:3>@217:0> = 0) &&
         ((<bcopy_1046@184:0> = <bcopy_1046@184:1>) &&
          ((<bcopy_1046@184:0> > 0) &&
           (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
            (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
        P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,<<<bcopy_1046@184:3>@217:1>@237:0>:int) =
        ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
         ((<<bcopy_1046@184:3>@217:0> = 0) &&
          ((<bcopy_1046@184:0> > 0) &&
           (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
      upper bounds:
        P[<bcopy_1046@251:4>](var792:int,var793:int,var794:int) = ((var794 >= var793) || ((1 + var794) <= var792))
        P[<bcopy_1046@184:4>](var787:int,var788:int,var789:int) = ((var789 >= var788) || ((1 + var789) <= var787))
      begin GenHcSolver.classify_pids(196318)[4]
        output:
          [<bcopy_1046@184:4>;<bcopy_1046@251:4>]
      end GenHcSolver.classify_pids(196318)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(196345)[4]
        lb:(((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>))) ||
            ((<bcopy_1046@184:4> = 1) &&
             ((<bcopy_1046@184:0> = <bcopy_1046@184:1>) &&
              ((<bcopy_1046@184:0> > 0) &&
               ((<bcopy_1046@184:4> <= <bcopy_1046@184:0>) && (<bcopy_1046@184:4> < (1 + <bcopy_1046@184:1>)))))))
        nub:(not ((<bcopy_1046@184:4> >= <bcopy_1046@184:1>) || ((1 + <bcopy_1046@184:4>) <= <bcopy_1046@184:0>)))
        lb':(((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>))) ||
             ((<bcopy_1046@184:4> = 1) &&
              ((<bcopy_1046@184:0> = <bcopy_1046@184:1>) &&
               ((<bcopy_1046@184:0> > 0) &&
                ((<bcopy_1046@184:4> <= <bcopy_1046@184:0>) && (<bcopy_1046@184:4> < (1 + <bcopy_1046@184:1>)))))))
        nub':(not ((<bcopy_1046@184:4> >= <bcopy_1046@184:1>) || ((1 + <bcopy_1046@184:4>) <= <bcopy_1046@184:0>)))
        begin InterpProver.interpolate(196346)[5]
          begin InterpProver.interpolate_fresh(196347)[6]
            begin InterpProver.interpolate_log(196348)[7]
              input1: (((<bcopy_1046@184:4> = 0) &&
                        ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>))) ||
                       ((<bcopy_1046@184:4> = 1) &&
                        ((<bcopy_1046@184:0> = <bcopy_1046@184:1>) &&
                         ((<bcopy_1046@184:0> > 0) &&
                          ((<bcopy_1046@184:4> <= <bcopy_1046@184:0>) &&
                           (<bcopy_1046@184:4> < (1 + <bcopy_1046@184:1>)))))))
              input2: (not
                         ((<bcopy_1046@184:4> >= <bcopy_1046@184:1>) ||
                          ((1 + <bcopy_1046@184:4>) <= <bcopy_1046@184:0>)))
              begin InterpProver.interpolate_check(196349)[8]
                begin InterpProver.interpolate_simplify(196350)[9]
                  begin InterpProver.interpolate_quick(196683)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(196692)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(196693)[12]
                        begin CsisatInterface.interpolate_csisat_log(196694)[13]
                          input1: (((1 = v_sep_bcopy_1046_sep_184_sep_4 & v_sep_bcopy_1046_sep_184_sep_4 <= v_sep_bcopy_1046_sep_184_sep_0 & (1 + v_sep_bcopy_1046_sep_184_sep_4) <= (1 + v_sep_bcopy_1046_sep_184_sep_1)) | 0 = v_sep_bcopy_1046_sep_184_sep_4) & v_sep_bcopy_1046_sep_184_sep_0 = v_sep_bcopy_1046_sep_184_sep_1 & 1 <= v_sep_bcopy_1046_sep_184_sep_0)
                          input2: ((1 + v_sep_bcopy_1046_sep_184_sep_0) <= (1 + v_sep_bcopy_1046_sep_184_sep_4) & (1 + v_sep_bcopy_1046_sep_184_sep_4) <= v_sep_bcopy_1046_sep_184_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(196695)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(196695)[14] (0.001000 sec.)
                          output: ((-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_1) <= 0 | (-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_4) <= -2)
                          
                        end CsisatInterface.interpolate_csisat_log(196694)[13] (0.001000 sec.)
                        after simplification: ((-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_1) <= 0 | (-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_4) <= -2)
                        after dnf conversion: (((-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_1) <= 0) | ((-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_4) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(196693)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(196692)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(196683)[10] (0.002000 sec.)
                  begin minimizing # of disjunctions(196709)[10]
                    input: ((<bcopy_1046@184:1> <= <bcopy_1046@184:0>) ||
                            ((1 + <bcopy_1046@184:4>) <= <bcopy_1046@184:0>))
                    output: (<bcopy_1046@184:1> <= <bcopy_1046@184:0>)
                  end minimizing # of disjunctions(196709)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(196350)[9] (0.003999 sec.)
                
              end InterpProver.interpolate_check(196349)[8] (0.003999 sec.)
              output: (<bcopy_1046@184:1> <= <bcopy_1046@184:0>)
            end InterpProver.interpolate_log(196348)[7] (0.003999 sec.)
            
          end InterpProver.interpolate_fresh(196347)[6] (0.003999 sec.)
          
        end InterpProver.interpolate(196346)[5] (0.003999 sec.)
        output:
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<bcopy_1046@184:4>:int) =
          (<bcopy_1046@184:1> <= <bcopy_1046@184:0>)
          P[<bcopy_1046@251:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<bcopy_1046@184:4>:int) =
          (<bcopy_1046@184:1> <= <bcopy_1046@184:0>)
      end ApronInterface.convex_hull_interpolate(196345)[4] (0.003999 sec.)
      Horn clauses:
        P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
        
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:3>@217:0>:int),
        ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
         ((0 <= <<bcopy_1046@184:3>@217:0>) &&
          ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:3>@217:0>:int,
                                                 <<<bcopy_1046@184:3>@217:1>@237:0>:int)
        
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,var765:int),
        ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>) && (<bcopy_1046@184:1> <= <bcopy_1046@184:0>))
        |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                         <<bcopy_1046@184:3>@217:0>:int)
        
        
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:2>@187:0>:int,
                                                 <<<bcopy_1046@184:2>@187:1>@207:0>:int)
      lower bounds:
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int) =
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        P[<fail_1893@270:0>](var798:bool) = false
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int) =
        ((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
         ((<bcopy_1046@184:0> > 0) &&
          (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
           ((0 <= <<bcopy_1046@184:3>@217:0>) && (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
        P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,<<<bcopy_1046@184:3>@217:1>@237:0>:int) =
        ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
         ((<bcopy_1046@184:0> > 0) &&
          (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
           ((0 <= <<bcopy_1046@184:3>@217:0>) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
      upper bounds:
        P[<<<bcopy_1046@184:3>@217:1>@237:0>](var801:int,var802:int,var803:int,var804:int) = true
      begin GenHcSolver.classify_pids(206932)[4]
        output:
          [<<<bcopy_1046@184:3>@217:1>@237:0>]
      end GenHcSolver.classify_pids(206932)[4] (0.000000 sec.)
      lb:((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
          ((<bcopy_1046@184:0> > 0) &&
           (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
            ((0 <= <<bcopy_1046@184:3>@217:0>) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(206935)[4]
        lb:((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
            ((<bcopy_1046@184:0> > 0) &&
             (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
              ((0 <= <<bcopy_1046@184:3>@217:0>) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
        nub:false
        lb':((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
             ((<bcopy_1046@184:0> > 0) &&
              (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
               ((0 <= <<bcopy_1046@184:3>@217:0>) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
        nub':false
        begin InterpProver.interpolate(206936)[5]
          begin InterpProver.interpolate_fresh(206937)[6]
            begin InterpProver.interpolate_log(206938)[7]
              input1: ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
                       ((<bcopy_1046@184:0> > 0) &&
                        (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
                         ((0 <= <<bcopy_1046@184:3>@217:0>) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
              input2: false
              begin InterpProver.interpolate_check(206939)[8]
                begin InterpProver.interpolate_simplify(206940)[9]
                  begin InterpProver.interpolate_quick(207105)[10]
                    
                  end InterpProver.interpolate_quick(207105)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(206940)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(206939)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(206938)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(206937)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(206936)[5] (0.001999 sec.)
        output:
          P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,<<<bcopy_1046@184:3>@217:1>@237:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(206935)[4] (0.001999 sec.)
      Horn clauses:
        P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
        
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,var765:int),
        ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>) && (<bcopy_1046@184:1> <= <bcopy_1046@184:0>))
        |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                         <<bcopy_1046@184:3>@217:0>:int)
        
        
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:2>@187:0>:int,
                                                 <<<bcopy_1046@184:2>@187:1>@207:0>:int)
      lower bounds:
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int) =
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        P[<fail_1893@270:0>](var806:bool) = false
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int) =
        ((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
         ((<bcopy_1046@184:0> > 0) &&
          (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
           ((0 <= <<bcopy_1046@184:3>@217:0>) && (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
      upper bounds:
        P[<<bcopy_1046@184:3>@217:0>](var809:int,var810:int,var811:int) = true
      begin GenHcSolver.classify_pids(211832)[4]
        output:
          [<<bcopy_1046@184:3>@217:0>]
      end GenHcSolver.classify_pids(211832)[4] (0.000000 sec.)
      lb:((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
          ((<bcopy_1046@184:0> > 0) &&
           (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
            ((0 <= <<bcopy_1046@184:3>@217:0>) && (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(211835)[4]
        lb:((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
            ((<bcopy_1046@184:0> > 0) &&
             (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
              ((0 <= <<bcopy_1046@184:3>@217:0>) && (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
        nub:false
        lb':((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
             ((<bcopy_1046@184:0> > 0) &&
              (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
               ((0 <= <<bcopy_1046@184:3>@217:0>) && (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
        nub':false
        begin InterpProver.interpolate(211836)[5]
          begin InterpProver.interpolate_fresh(211837)[6]
            begin InterpProver.interpolate_log(211838)[7]
              input1: ((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
                       ((<bcopy_1046@184:0> > 0) &&
                        (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
                         ((0 <= <<bcopy_1046@184:3>@217:0>) && (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
              input2: false
              begin InterpProver.interpolate_check(211839)[8]
                begin InterpProver.interpolate_simplify(211840)[9]
                  begin InterpProver.interpolate_quick(211981)[10]
                    
                  end InterpProver.interpolate_quick(211981)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(211840)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(211839)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(211838)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(211837)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(211836)[5] (0.000999 sec.)
        output:
          P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(211835)[4] (0.000999 sec.)
      Horn clauses:
        P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
        
        
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:2>@187:0>:int,
                                                 <<<bcopy_1046@184:2>@187:1>@207:0>:int)
      lower bounds:
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int) =
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        P[<fail_1893@270:0>](var813:bool) = false
      upper bounds:
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](var816:int,var817:int,var818:int,var819:int) = true
      begin GenHcSolver.classify_pids(214336)[4]
        output:
          [<<<bcopy_1046@184:2>@187:1>@207:0>]
      end GenHcSolver.classify_pids(214336)[4] (0.000000 sec.)
      lb:((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
          ((0 <= <<bcopy_1046@184:2>@187:0>) &&
           (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
            ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(214339)[4]
        lb:((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
            ((0 <= <<bcopy_1046@184:2>@187:0>) &&
             (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
              ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        nub:false
        lb':((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
             ((0 <= <<bcopy_1046@184:2>@187:0>) &&
              (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
               ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        nub':false
        begin InterpProver.interpolate(214340)[5]
          begin InterpProver.interpolate_fresh(214341)[6]
            begin InterpProver.interpolate_log(214342)[7]
              input1: ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
                       ((0 <= <<bcopy_1046@184:2>@187:0>) &&
                        (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
                         ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
              input2: false
              begin InterpProver.interpolate_check(214343)[8]
                begin InterpProver.interpolate_simplify(214344)[9]
                  begin InterpProver.interpolate_quick(214509)[10]
                    
                  end InterpProver.interpolate_quick(214509)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(214344)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(214343)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(214342)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(214341)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(214340)[5] (0.001000 sec.)
        output:
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(214339)[4] (0.001999 sec.)
      Horn clauses:
        P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
      lower bounds:
        P[<fail_1893@270:0>](var821:bool) = false
      upper bounds:
        P[<fail_1893@270:0>](var824:bool) = true
      begin GenHcSolver.classify_pids(215014)[4]
        output:
          [<fail_1893@270:0>]
      end GenHcSolver.classify_pids(215014)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(215017)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(215018)[5]
          begin InterpProver.interpolate_fresh(215019)[6]
            begin InterpProver.interpolate_log(215020)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(215021)[8]
                begin InterpProver.interpolate_simplify(215022)[9]
                  begin InterpProver.interpolate_quick(215035)[10]
                    
                  end InterpProver.interpolate_quick(215035)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(215039)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(215039)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(215022)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(215021)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(215020)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(215019)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(215018)[5] (0.000000 sec.)
        output:
          P[<fail_1893@270:0>](var821:bool) = false
      end ApronInterface.convex_hull_interpolate(215017)[4] (0.000000 sec.)
      begin HcSolver.check_validity(215072)[4]
        input:
          P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
          
          P[<<bcopy_1046@184:2>@260:0>](<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:0>:int),
          ((0 <= <k_make_array_u_1321@267:0>) &&
           ((<k_make_array_u_1321@267:1> > 0) &&
            ((<k_make_array_u_1321@267:0> >= <k_make_array_u_1321@267:1>) && <fail_1893@270:0>)))
          |- P[<fail_1893@270:0>](<fail_1893@270:0>:bool)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,var764:int),
          P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@260:0>:int),
          (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:2>@260:0>:int)
          
          P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<<bcopy_1046@251:2>@254:0>:int),
          (<<bcopy_1046@251:2>@254:0> < <bcopy_1046@251:1>)
          |- P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                           <<bcopy_1046@251:2>@254:0>:int)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                                -1 + <bcopy_1046@251:4>):int),
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                                                -1 + <bcopy_1046@251:4>):int,<f_bcopy_1887@249:3>:int),
          (<bcopy_1046@251:4> < (1 + <bcopy_1046@251:1>))
          |- P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                   <bcopy_1046@251:4>:int)
          
          P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:3>@217:0>:int),
          ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
           ((0 <= <<bcopy_1046@184:3>@217:0>) &&
            ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) &&
             ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
          |- P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,
                                                   <bcopy_1046@184:1>:int,
                                                   <<bcopy_1046@184:3>@217:0>:int,
                                                   <<<bcopy_1046@184:3>@217:1>@237:0>:int)
          
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,var765:int),
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int),
          (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:3>@217:0>:int)
          
          P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:2>@187:0>:int),
          ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
           ((0 <= <<bcopy_1046@184:2>@187:0>) &&
            ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) &&
             ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
          |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                   <bcopy_1046@184:1>:int,
                                                   <<bcopy_1046@184:2>@187:0>:int,
                                                   <<<bcopy_1046@184:2>@187:1>@207:0>:int)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
          (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:2>@187:0>:int)
          
           ((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))
          |- P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                   <bcopy_1046@184:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(215072)[4] (0.009999 sec.)
      solution:
        P[<fail_1893@270:0>](var821:bool) = false
        P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int) =
        ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
        P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int) =
        ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
        P[<bcopy_1046@251:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<bcopy_1046@184:4>:int) =
        (<bcopy_1046@184:1> <= <bcopy_1046@184:0>)
        P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,<<<bcopy_1046@184:3>@217:1>@237:0>:int) =
        true
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int) =
        true
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int) =
        true
        P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int) =
        ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<bcopy_1046@184:4>:int) =
        (<bcopy_1046@184:1> <= <bcopy_1046@184:0>)
    end GenHcSolver.solve(141456)[3] (0.384942 sec.)
    begin GenHcSolver.solve(216789)[3]
      Horn clauses:
        P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
        
        P[<<bcopy_1046@184:2>@260:0>](<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:0>:int),
        ((0 <= <k_make_array_u_1321@267:0>) &&
         ((<k_make_array_u_1321@267:1> > 0) &&
          ((<k_make_array_u_1321@267:0> >= <k_make_array_u_1321@267:1>) && <fail_1893@270:0>)))
        |- P[<fail_1893@270:0>](<fail_1893@270:0>:bool)
        
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,var764:int),
        P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@260:0>:int),
        (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
        |- P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                         <<bcopy_1046@184:2>@260:0>:int)
        
        P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<<bcopy_1046@251:2>@254:0>:int),
        (<<bcopy_1046@251:2>@254:0> < <bcopy_1046@251:1>)
        |- P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                         <<bcopy_1046@251:2>@254:0>:int)
        
        P[<bcopy_1046@184:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                              -1 + <bcopy_1046@251:4>):int),
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                                              -1 + <bcopy_1046@251:4>):int,<f_bcopy_1887@249:3>:int),
        (<bcopy_1046@251:4> < (1 + <bcopy_1046@251:1>))
        |- P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                 <bcopy_1046@251:4>:int)
        
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:3>@217:0>:int),
        ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
         ((0 <= <<bcopy_1046@184:3>@217:0>) &&
          ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:3>@217:0>:int,
                                                 <<<bcopy_1046@184:3>@217:1>@237:0>:int)
        
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,var765:int),
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int),
        (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)
        |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                         <<bcopy_1046@184:3>@217:0>:int)
        
        P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:2>@187:0>:int),
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:2>@187:0>:int,
                                                 <<<bcopy_1046@184:2>@187:1>@207:0>:int)
        
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
        (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
        |- P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                         <<bcopy_1046@184:2>@187:0>:int)
        
         ((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))
        |- P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                 <bcopy_1046@184:4>:int)
      lower bounds:
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<bcopy_1046@184:4>:int) =
        ((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))
        P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int) =
        ((<<bcopy_1046@184:2>@187:0> = 0) &&
         ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) &&
          ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>))))
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int) =
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((<<bcopy_1046@184:2>@187:0> = 0) &&
          ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
        P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<bcopy_1046@251:4>:int) =
        ((<bcopy_1046@251:4> = 1) &&
         ((<bcopy_1046@251:1> = <bcopy_1046@251:0>) &&
          ((<bcopy_1046@251:0> > 0) &&
           ((<bcopy_1046@251:4> < (1 + <bcopy_1046@251:0>)) && (<bcopy_1046@251:4> < (1 + <bcopy_1046@251:1>))))))
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int) =
        ((<<bcopy_1046@184:3>@217:0> = 0) &&
         ((<bcopy_1046@184:0> = <bcopy_1046@184:1>) &&
          ((<bcopy_1046@184:0> > 0) &&
           ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) && (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
        P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<<bcopy_1046@251:2>@254:0>:int) =
        ((<<bcopy_1046@251:2>@254:0> = 1) &&
         ((<<bcopy_1046@251:2>@254:0> < <bcopy_1046@251:1>) &&
          ((<bcopy_1046@251:0> > 0) &&
           ((<<bcopy_1046@251:2>@254:0> < (1 + <bcopy_1046@251:0>)) && (<bcopy_1046@251:1> = <bcopy_1046@251:0>)))))
        P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,<<<bcopy_1046@184:3>@217:1>@237:0>:int) =
        ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
         ((<<bcopy_1046@184:3>@217:0> = 0) &&
          ((<bcopy_1046@184:0> > 0) &&
           ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
        P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@260:0>:int) =
        ((<<bcopy_1046@184:2>@260:0> = 1) &&
         ((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
          ((<<bcopy_1046@184:2>@260:0> < (1 + <bcopy_1046@184:0>)) &&
           ((<bcopy_1046@184:0> > 0) && ((<<bcopy_1046@184:2>@260:0> < <bcopy_1046@184:1>) && (0 < <bcopy_1046@184:1>))))))
        P[<fail_1893@270:0>](<fail_1893@270:0>:bool) = false
      upper bounds:
        P[<<bcopy_1046@184:2>@260:0>](var836:int,var837:int,var838:int) =
        ((var838 < var836) || ((var836 <= 0) || ((0 > var838) || (var836 <> var837))))
        P[<<bcopy_1046@251:2>@254:0>](var831:int,var832:int,var833:int) =
        ((var831 <= 0) || ((var833 < var831) || ((0 > var833) || (var831 <> var832))))
        P[<<bcopy_1046@184:2>@187:0>](var826:int,var827:int,var828:int) = true
      begin GenHcSolver.classify_pids(246525)[4]
        output:
          [<<bcopy_1046@184:2>@187:0>;<<bcopy_1046@251:2>@254:0>;<<bcopy_1046@184:2>@260:0>]
      end GenHcSolver.classify_pids(246525)[4] (0.002000 sec.)
      begin ApronInterface.convex_hull_interpolate(246798)[4]
        lb:(((<<bcopy_1046@184:2>@187:0> = 0) &&
             ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) &&
              ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))) ||
            (((<<bcopy_1046@184:2>@187:0> = 1) &&
              ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) &&
               ((<bcopy_1046@184:0> > 0) &&
                ((<<bcopy_1046@184:2>@187:0> < (1 + <bcopy_1046@184:0>)) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>))))) ||
             ((<<bcopy_1046@184:2>@187:0> = 1) &&
              ((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
               ((<<bcopy_1046@184:2>@187:0> < (1 + <bcopy_1046@184:0>)) &&
                ((<bcopy_1046@184:0> > 0) &&
                 ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) && (0 < <bcopy_1046@184:1>))))))))
        nub:((not
                ((<bcopy_1046@184:0> <= 0) ||
                 ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) ||
                  ((0 > <<bcopy_1046@184:2>@187:0>) || (<bcopy_1046@184:0> <> <bcopy_1046@184:1>))))) ||
             (not
                ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) ||
                 ((<bcopy_1046@184:0> <= 0) ||
                  ((0 > <<bcopy_1046@184:2>@187:0>) || (<bcopy_1046@184:0> <> <bcopy_1046@184:1>))))))
        begin ExtFormula.Formula.case_analysis_boolean(247171)[5]
          ts: (((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) && (<bcopy_1046@184:0> > 0)) &&
               (((<<bcopy_1046@184:2>@187:0> = 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)) ||
                ((<<bcopy_1046@184:2>@187:0> = 1) &&
                 ((<<bcopy_1046@184:2>@187:0> < (1 + <bcopy_1046@184:0>)) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
          
        end ExtFormula.Formula.case_analysis_boolean(247171)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(247333)[5]
          ts: ((<bcopy_1046@184:0> > 0) &&
               ((<<bcopy_1046@184:2>@187:0> >= <bcopy_1046@184:0>) &&
                ((0 <= <<bcopy_1046@184:2>@187:0>) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>))))
          
        end ExtFormula.Formula.case_analysis_boolean(247333)[5] (0.000999 sec.)
        lb':(((<bcopy_1046@184:1> + (-1 * <bcopy_1046@184:0>)) = 0) &&
             (((1 + (-1 * <<bcopy_1046@184:2>@187:0>)) >= 0) &&
              ((<<bcopy_1046@184:2>@187:0> >= 0) &&
               (((-1 + (-1 * <<bcopy_1046@184:2>@187:0>)) + <bcopy_1046@184:0>) >= 0))))
        nub':(((<bcopy_1046@184:1> + (-1 * <bcopy_1046@184:0>)) = 0) &&
              (((<<bcopy_1046@184:2>@187:0> + (-1 * <bcopy_1046@184:0>)) >= 0) && ((-1 + <bcopy_1046@184:0>) >= 0)))
        begin InterpProver.interpolate(247342)[5]
          begin InterpProver.interpolate_fresh(247343)[6]
            begin InterpProver.interpolate_log(247344)[7]
              input1: (((<bcopy_1046@184:1> + (-1 * <bcopy_1046@184:0>)) = 0) &&
                       (((1 + (-1 * <<bcopy_1046@184:2>@187:0>)) >= 0) &&
                        ((<<bcopy_1046@184:2>@187:0> >= 0) &&
                         (((-1 + (-1 * <<bcopy_1046@184:2>@187:0>)) + <bcopy_1046@184:0>) >= 0))))
              input2: (((<bcopy_1046@184:1> + (-1 * <bcopy_1046@184:0>)) = 0) &&
                       (((<<bcopy_1046@184:2>@187:0> + (-1 * <bcopy_1046@184:0>)) >= 0) &&
                        ((-1 + <bcopy_1046@184:0>) >= 0)))
              begin InterpProver.interpolate_check(247345)[8]
                begin InterpProver.interpolate_simplify(247346)[9]
                  begin InterpProver.interpolate_quick(247541)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(247550)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(247551)[12]
                        begin CsisatInterface.interpolate_csisat_log(247552)[13]
                          input1: (v_sep_bcopy_1046_sep_184_sep_0 = v_sep_bcopy_1046_sep_184_sep_1 & 0 <= v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0 & v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0 <= 1 & (1 + v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0) <= v_sep_bcopy_1046_sep_184_sep_0)
                          input2: (v_sep_bcopy_1046_sep_184_sep_0 = v_sep_bcopy_1046_sep_184_sep_1 & 1 <= v_sep_bcopy_1046_sep_184_sep_0 & v_sep_bcopy_1046_sep_184_sep_0 <= v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(247553)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(247553)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(247552)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(247551)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(247550)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(247541)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(247346)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(247345)[8] (0.003000 sec.)
              output: ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
            end InterpProver.interpolate_log(247344)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(247343)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(247342)[5] (0.003000 sec.)
        output:
          P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int) =
          ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
          P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int) =
          ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
          P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int) =
          ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
      end ApronInterface.convex_hull_interpolate(246798)[4] (0.008999 sec.)
      Horn clauses:
        P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
        
        P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<<bcopy_1046@251:2>@254:0>:int),
        ((<<bcopy_1046@251:2>@254:0> < <bcopy_1046@251:1>) && ((1 + <<bcopy_1046@251:2>@254:0>) > <bcopy_1046@251:0>))
        |- bot
        
        P[<bcopy_1046@184:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                              -1 + <bcopy_1046@251:4>):int),
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                                              -1 + <bcopy_1046@251:4>):int,<f_bcopy_1887@249:3>:int),
        (<bcopy_1046@251:4> < (1 + <bcopy_1046@251:1>))
        |- P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                 <bcopy_1046@251:4>:int)
        
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:3>@217:0>:int),
        ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
         ((0 <= <<bcopy_1046@184:3>@217:0>) &&
          ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:3>@217:0>:int,
                                                 <<<bcopy_1046@184:3>@217:1>@237:0>:int)
        
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,var765:int),
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int),
        (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)
        |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                         <<bcopy_1046@184:3>@217:0>:int)
        
        
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:2>@187:0>:int,
                                                 <<<bcopy_1046@184:2>@187:1>@207:0>:int)
        
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
        ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>) && ((1 + <<bcopy_1046@184:2>@187:0>) > <bcopy_1046@184:0>))
        |- bot
        
         ((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))
        |- P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                 <bcopy_1046@184:4>:int)
      lower bounds:
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int) =
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<bcopy_1046@184:4>:int) =
        ((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))
        P[<fail_1893@270:0>](var843:bool) = false
        P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<bcopy_1046@251:4>:int) =
        ((<bcopy_1046@251:4> = 1) &&
         ((<bcopy_1046@251:0> = <bcopy_1046@251:1>) &&
          ((<bcopy_1046@251:0> > 0) &&
           ((<bcopy_1046@251:4> <= <bcopy_1046@251:0>) && (<bcopy_1046@251:4> < (1 + <bcopy_1046@251:1>))))))
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int) =
        ((<<bcopy_1046@184:3>@217:0> = 0) &&
         ((<bcopy_1046@184:0> = <bcopy_1046@184:1>) &&
          ((<bcopy_1046@184:0> > 0) &&
           (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
            (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
        P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,<<<bcopy_1046@184:3>@217:1>@237:0>:int) =
        ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
         ((<<bcopy_1046@184:3>@217:0> = 0) &&
          ((<bcopy_1046@184:0> > 0) &&
           (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
      upper bounds:
        P[<bcopy_1046@251:4>](var851:int,var852:int,var853:int) = ((var853 >= var852) || ((1 + var853) <= var851))
        P[<bcopy_1046@184:4>](var846:int,var847:int,var848:int) = ((var848 >= var847) || ((1 + var848) <= var846))
      begin GenHcSolver.classify_pids(271509)[4]
        output:
          [<bcopy_1046@184:4>;<bcopy_1046@251:4>]
      end GenHcSolver.classify_pids(271509)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(271536)[4]
        lb:(((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>))) ||
            ((<bcopy_1046@184:4> = 1) &&
             ((<bcopy_1046@184:0> = <bcopy_1046@184:1>) &&
              ((<bcopy_1046@184:0> > 0) &&
               ((<bcopy_1046@184:4> <= <bcopy_1046@184:0>) && (<bcopy_1046@184:4> < (1 + <bcopy_1046@184:1>)))))))
        nub:(not ((<bcopy_1046@184:4> >= <bcopy_1046@184:1>) || ((1 + <bcopy_1046@184:4>) <= <bcopy_1046@184:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(271695)[5]
          ts: (((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)) &&
               ((<bcopy_1046@184:4> = 0) ||
                ((<bcopy_1046@184:4> = 1) &&
                 ((<bcopy_1046@184:4> <= <bcopy_1046@184:0>) && (<bcopy_1046@184:4> < (1 + <bcopy_1046@184:1>))))))
          
        end ExtFormula.Formula.case_analysis_boolean(271695)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(271732)[5]
          ts: ((<bcopy_1046@184:4> < <bcopy_1046@184:1>) && ((1 + <bcopy_1046@184:4>) > <bcopy_1046@184:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(271732)[5] (0.000000 sec.)
        lb':(((<bcopy_1046@184:1> + (-1 * <bcopy_1046@184:0>)) = 0) &&
             (((1 + (-1 * <bcopy_1046@184:4>)) >= 0) && ((<bcopy_1046@184:4> >= 0) && ((-1 + <bcopy_1046@184:0>) >= 0))))
        nub':(((<bcopy_1046@184:4> + (-1 * <bcopy_1046@184:0>)) >= 0) &&
              (((-1 + (-1 * <bcopy_1046@184:4>)) + <bcopy_1046@184:1>) >= 0))
        begin InterpProver.interpolate(271740)[5]
          begin InterpProver.interpolate_fresh(271741)[6]
            begin InterpProver.interpolate_log(271742)[7]
              input1: (((<bcopy_1046@184:1> + (-1 * <bcopy_1046@184:0>)) = 0) &&
                       (((1 + (-1 * <bcopy_1046@184:4>)) >= 0) &&
                        ((<bcopy_1046@184:4> >= 0) && ((-1 + <bcopy_1046@184:0>) >= 0))))
              input2: (((<bcopy_1046@184:4> + (-1 * <bcopy_1046@184:0>)) >= 0) &&
                       (((-1 + (-1 * <bcopy_1046@184:4>)) + <bcopy_1046@184:1>) >= 0))
              begin InterpProver.interpolate_check(271743)[8]
                begin InterpProver.interpolate_simplify(271744)[9]
                  begin InterpProver.interpolate_quick(271895)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(271904)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(271905)[12]
                        begin CsisatInterface.interpolate_csisat_log(271906)[13]
                          input1: (v_sep_bcopy_1046_sep_184_sep_0 = v_sep_bcopy_1046_sep_184_sep_1 & 0 <= v_sep_bcopy_1046_sep_184_sep_4 & 1 <= v_sep_bcopy_1046_sep_184_sep_0 & v_sep_bcopy_1046_sep_184_sep_4 <= 1)
                          input2: (v_sep_bcopy_1046_sep_184_sep_0 <= v_sep_bcopy_1046_sep_184_sep_4 & (1 + v_sep_bcopy_1046_sep_184_sep_4) <= v_sep_bcopy_1046_sep_184_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(271907)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(271907)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_1) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(271906)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_1) <= 0
                        after dnf conversion: (((-2*v_sep_bcopy_1046_sep_184_sep_0 + 2*v_sep_bcopy_1046_sep_184_sep_1) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(271905)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(271904)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(271895)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(271744)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(271743)[8] (0.002000 sec.)
              output: (<bcopy_1046@184:1> <= <bcopy_1046@184:0>)
            end InterpProver.interpolate_log(271742)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(271741)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(271740)[5] (0.003000 sec.)
        output:
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<bcopy_1046@184:4>:int) =
          (<bcopy_1046@184:1> <= <bcopy_1046@184:0>)
          P[<bcopy_1046@251:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<bcopy_1046@184:4>:int) =
          (<bcopy_1046@184:1> <= <bcopy_1046@184:0>)
      end ApronInterface.convex_hull_interpolate(271536)[4] (0.003000 sec.)
      Horn clauses:
        P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
        
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:3>@217:0>:int),
        ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
         ((0 <= <<bcopy_1046@184:3>@217:0>) &&
          ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:3>@217:0>:int,
                                                 <<<bcopy_1046@184:3>@217:1>@237:0>:int)
        
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,var765:int),
        ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>) && (<bcopy_1046@184:1> <= <bcopy_1046@184:0>))
        |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                         <<bcopy_1046@184:3>@217:0>:int)
        
        
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:2>@187:0>:int,
                                                 <<<bcopy_1046@184:2>@187:1>@207:0>:int)
      lower bounds:
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int) =
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        P[<fail_1893@270:0>](var857:bool) = false
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int) =
        ((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
         ((<bcopy_1046@184:0> > 0) &&
          (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
           ((0 <= <<bcopy_1046@184:3>@217:0>) && (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
        P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,<<<bcopy_1046@184:3>@217:1>@237:0>:int) =
        ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
         ((<bcopy_1046@184:0> > 0) &&
          (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
           ((0 <= <<bcopy_1046@184:3>@217:0>) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
      upper bounds:
        P[<<<bcopy_1046@184:3>@217:1>@237:0>](var860:int,var861:int,var862:int,var863:int) = true
      begin GenHcSolver.classify_pids(282110)[4]
        output:
          [<<<bcopy_1046@184:3>@217:1>@237:0>]
      end GenHcSolver.classify_pids(282110)[4] (0.000000 sec.)
      lb:((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
          ((<bcopy_1046@184:0> > 0) &&
           (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
            ((0 <= <<bcopy_1046@184:3>@217:0>) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(282113)[4]
        lb:((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
            ((<bcopy_1046@184:0> > 0) &&
             (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
              ((0 <= <<bcopy_1046@184:3>@217:0>) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(282188)[5]
          ts: ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
               ((<bcopy_1046@184:0> > 0) &&
                (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
                 ((0 <= <<bcopy_1046@184:3>@217:0>) && (<bcopy_1046@184:1> = <bcopy_1046@184:0>)))))
          
        end ExtFormula.Formula.case_analysis_boolean(282188)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(282201)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(282201)[5] (0.000000 sec.)
        lb':(((<bcopy_1046@184:1> + (-1 * <bcopy_1046@184:0>)) = 0) &&
             ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
              ((<<bcopy_1046@184:3>@217:0> >= 0) &&
               (((-1 + (-1 * <<bcopy_1046@184:3>@217:0>)) + <bcopy_1046@184:0>) >= 0))))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(282204)[5]
          begin InterpProver.interpolate_fresh(282205)[6]
            begin InterpProver.interpolate_log(282206)[7]
              input1: (((<bcopy_1046@184:1> + (-1 * <bcopy_1046@184:0>)) = 0) &&
                       ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
                        ((<<bcopy_1046@184:3>@217:0> >= 0) &&
                         (((-1 + (-1 * <<bcopy_1046@184:3>@217:0>)) + <bcopy_1046@184:0>) >= 0))))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(282207)[8]
                begin InterpProver.interpolate_simplify(282208)[9]
                  begin InterpProver.interpolate_quick(282316)[10]
                    
                  end InterpProver.interpolate_quick(282316)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(282208)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(282207)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(282206)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(282205)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(282204)[5] (0.002000 sec.)
        output:
          P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,<<<bcopy_1046@184:3>@217:1>@237:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(282113)[4] (0.003000 sec.)
      Horn clauses:
        P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
        
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,var765:int),
        ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>) && (<bcopy_1046@184:1> <= <bcopy_1046@184:0>))
        |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                         <<bcopy_1046@184:3>@217:0>:int)
        
        
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:2>@187:0>:int,
                                                 <<<bcopy_1046@184:2>@187:1>@207:0>:int)
      lower bounds:
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int) =
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        P[<fail_1893@270:0>](var865:bool) = false
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int) =
        ((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
         ((<bcopy_1046@184:0> > 0) &&
          (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
           ((0 <= <<bcopy_1046@184:3>@217:0>) && (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
      upper bounds:
        P[<<bcopy_1046@184:3>@217:0>](var868:int,var869:int,var870:int) = true
      begin GenHcSolver.classify_pids(287045)[4]
        output:
          [<<bcopy_1046@184:3>@217:0>]
      end GenHcSolver.classify_pids(287045)[4] (0.000000 sec.)
      lb:((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
          ((<bcopy_1046@184:0> > 0) &&
           (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
            ((0 <= <<bcopy_1046@184:3>@217:0>) && (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(287048)[4]
        lb:((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
            ((<bcopy_1046@184:0> > 0) &&
             (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
              ((0 <= <<bcopy_1046@184:3>@217:0>) && (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(287128)[5]
          ts: ((<bcopy_1046@184:1> = <bcopy_1046@184:0>) &&
               ((<bcopy_1046@184:0> > 0) &&
                (((1 + <<bcopy_1046@184:3>@217:0>) <= <bcopy_1046@184:0>) &&
                 ((0 <= <<bcopy_1046@184:3>@217:0>) && (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)))))
          
        end ExtFormula.Formula.case_analysis_boolean(287128)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(287142)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(287142)[5] (0.000000 sec.)
        lb':(((<bcopy_1046@184:1> + (-1 * <bcopy_1046@184:0>)) = 0) &&
             ((<<bcopy_1046@184:3>@217:0> >= 0) &&
              (((-1 + (-1 * <<bcopy_1046@184:3>@217:0>)) + <bcopy_1046@184:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(287145)[5]
          begin InterpProver.interpolate_fresh(287146)[6]
            begin InterpProver.interpolate_log(287147)[7]
              input1: (((<bcopy_1046@184:1> + (-1 * <bcopy_1046@184:0>)) = 0) &&
                       ((<<bcopy_1046@184:3>@217:0> >= 0) &&
                        (((-1 + (-1 * <<bcopy_1046@184:3>@217:0>)) + <bcopy_1046@184:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(287148)[8]
                begin InterpProver.interpolate_simplify(287149)[9]
                  begin InterpProver.interpolate_quick(287211)[10]
                    
                  end InterpProver.interpolate_quick(287211)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(287149)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(287148)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(287147)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(287146)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(287145)[5] (0.001000 sec.)
        output:
          P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(287048)[4] (0.002999 sec.)
      Horn clauses:
        P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
        
        
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                 <bcopy_1046@184:1>:int,
                                                 <<bcopy_1046@184:2>@187:0>:int,
                                                 <<<bcopy_1046@184:2>@187:1>@207:0>:int)
      lower bounds:
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int) =
        ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
         ((0 <= <<bcopy_1046@184:2>@187:0>) &&
          (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
           ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        P[<fail_1893@270:0>](var872:bool) = false
      upper bounds:
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](var875:int,var876:int,var877:int,var878:int) = true
      begin GenHcSolver.classify_pids(289568)[4]
        output:
          [<<<bcopy_1046@184:2>@187:1>@207:0>]
      end GenHcSolver.classify_pids(289568)[4] (0.000000 sec.)
      lb:((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
          ((0 <= <<bcopy_1046@184:2>@187:0>) &&
           (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
            ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(289571)[4]
        lb:((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
            ((0 <= <<bcopy_1046@184:2>@187:0>) &&
             (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
              ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(289646)[5]
          ts: ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
               ((0 <= <<bcopy_1046@184:2>@187:0>) &&
                (((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>) &&
                 ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
          
        end ExtFormula.Formula.case_analysis_boolean(289646)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(289659)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(289659)[5] (0.000000 sec.)
        lb':(((<bcopy_1046@184:1> + (-1 * <bcopy_1046@184:0>)) = 0) &&
             ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
              ((<<bcopy_1046@184:2>@187:0> >= 0) &&
               (((-1 + (-1 * <<bcopy_1046@184:2>@187:0>)) + <bcopy_1046@184:0>) >= 0))))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(289662)[5]
          begin InterpProver.interpolate_fresh(289663)[6]
            begin InterpProver.interpolate_log(289664)[7]
              input1: (((<bcopy_1046@184:1> + (-1 * <bcopy_1046@184:0>)) = 0) &&
                       ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
                        ((<<bcopy_1046@184:2>@187:0> >= 0) &&
                         (((-1 + (-1 * <<bcopy_1046@184:2>@187:0>)) + <bcopy_1046@184:0>) >= 0))))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(289665)[8]
                begin InterpProver.interpolate_simplify(289666)[9]
                  begin InterpProver.interpolate_quick(289774)[10]
                    
                  end InterpProver.interpolate_quick(289774)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(289666)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(289665)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(289664)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(289663)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(289662)[5] (0.001000 sec.)
        output:
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(289571)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
      lower bounds:
        P[<fail_1893@270:0>](var880:bool) = false
      upper bounds:
        P[<fail_1893@270:0>](var883:bool) = true
      begin GenHcSolver.classify_pids(290281)[4]
        output:
          [<fail_1893@270:0>]
      end GenHcSolver.classify_pids(290281)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(290284)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(290287)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(290287)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(290292)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(290292)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(290295)[5]
          begin InterpProver.interpolate_fresh(290296)[6]
            begin InterpProver.interpolate_log(290297)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(290298)[8]
                begin InterpProver.interpolate_simplify(290299)[9]
                  begin InterpProver.interpolate_quick(290314)[10]
                    
                  end InterpProver.interpolate_quick(290314)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(290318)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(290318)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(290299)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(290298)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(290297)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(290296)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(290295)[5] (0.001000 sec.)
        output:
          P[<fail_1893@270:0>](var880:bool) = false
      end ApronInterface.convex_hull_interpolate(290284)[4] (0.001000 sec.)
      begin HcSolver.check_validity(290358)[4]
        input:
          P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
          
          P[<<bcopy_1046@184:2>@260:0>](<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:0>:int),
          ((0 <= <k_make_array_u_1321@267:0>) &&
           ((<k_make_array_u_1321@267:1> > 0) &&
            ((<k_make_array_u_1321@267:0> >= <k_make_array_u_1321@267:1>) && <fail_1893@270:0>)))
          |- P[<fail_1893@270:0>](<fail_1893@270:0>:bool)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,var764:int),
          P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@260:0>:int),
          (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:2>@260:0>:int)
          
          P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<<bcopy_1046@251:2>@254:0>:int),
          (<<bcopy_1046@251:2>@254:0> < <bcopy_1046@251:1>)
          |- P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                           <<bcopy_1046@251:2>@254:0>:int)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                                -1 + <bcopy_1046@251:4>):int),
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                                                -1 + <bcopy_1046@251:4>):int,<f_bcopy_1887@249:3>:int),
          (<bcopy_1046@251:4> < (1 + <bcopy_1046@251:1>))
          |- P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                   <bcopy_1046@251:4>:int)
          
          P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:3>@217:0>:int),
          ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
           ((0 <= <<bcopy_1046@184:3>@217:0>) &&
            ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) &&
             ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
          |- P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,
                                                   <bcopy_1046@184:1>:int,
                                                   <<bcopy_1046@184:3>@217:0>:int,
                                                   <<<bcopy_1046@184:3>@217:1>@237:0>:int)
          
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,var765:int),
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int),
          (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:3>@217:0>:int)
          
          P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:2>@187:0>:int),
          ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
           ((0 <= <<bcopy_1046@184:2>@187:0>) &&
            ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) &&
             ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
          |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                   <bcopy_1046@184:1>:int,
                                                   <<bcopy_1046@184:2>@187:0>:int,
                                                   <<<bcopy_1046@184:2>@187:1>@207:0>:int)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
          (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:2>@187:0>:int)
          
           ((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))
          |- P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                   <bcopy_1046@184:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(290358)[4] (0.007999 sec.)
      solution:
        P[<fail_1893@270:0>](var880:bool) = false
        P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int) =
        ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
        P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int) =
        ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
        P[<bcopy_1046@251:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<bcopy_1046@184:4>:int) =
        (<bcopy_1046@184:1> <= <bcopy_1046@184:0>)
        P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,<<<bcopy_1046@184:3>@217:1>@237:0>:int) =
        true
        P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int) =
        true
        P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,<<<bcopy_1046@184:2>@187:1>@207:0>:int) =
        true
        P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int) =
        ((1 + <<bcopy_1046@184:2>@187:0>) <= <bcopy_1046@184:0>)
        P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<bcopy_1046@184:4>:int) =
        (<bcopy_1046@184:1> <= <bcopy_1046@184:0>)
    end GenHcSolver.solve(216789)[3] (0.386941 sec.)
    begin YhornInterface.solve(292075)[3]
      begin HcSolver.solve_ub(292076)[4]
        encoded:
          P[<fail_1893@270:0>](<fail_1893@270:0>:int)|- bot
          
          P[<<bcopy_1046@184:2>@260:0>](<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:0>:int),
          ((0 <= <k_make_array_u_1321@267:0>) &&
           ((<k_make_array_u_1321@267:1> > 0) &&
            ((<k_make_array_u_1321@267:0> >= <k_make_array_u_1321@267:1>) && (<fail_1893@270:0> = 1))))
          |- P[<fail_1893@270:0>](<fail_1893@270:0>:int)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,var764:int),
          P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@260:0>:int),
          (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:2>@260:0>:int)
          
          P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<<bcopy_1046@251:2>@254:0>:int),
          (<<bcopy_1046@251:2>@254:0> < <bcopy_1046@251:1>)
          |- P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                           <<bcopy_1046@251:2>@254:0>:int)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                                -1 + <bcopy_1046@251:4>):int),
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                                                -1 + <bcopy_1046@251:4>):int,<f_bcopy_1887@249:3>:int),
          (<bcopy_1046@251:4> < (1 + <bcopy_1046@251:1>))
          |- P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                   <bcopy_1046@251:4>:int)
          
          P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:3>@217:0>:int),
          ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
           ((0 <= <<bcopy_1046@184:3>@217:0>) &&
            ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) &&
             ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
          |- P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,
                                                   <bcopy_1046@184:1>:int,
                                                   <<bcopy_1046@184:3>@217:0>:int,
                                                   <<<bcopy_1046@184:3>@217:1>@237:0>:int)
          
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,var765:int),
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int),
          (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:3>@217:0>:int)
          
          P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:2>@187:0>:int),
          ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
           ((0 <= <<bcopy_1046@184:2>@187:0>) &&
            ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) &&
             ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
          |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                   <bcopy_1046@184:1>:int,
                                                   <<bcopy_1046@184:2>@187:0>:int,
                                                   <<<bcopy_1046@184:2>@187:1>@207:0>:int)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
          (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:2>@187:0>:int)
          
           ((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))
          |- P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                   <bcopy_1046@184:4>:int)
        input to Yhorn:
          P[<fail_1893@270:0>](<fail_1893@270:0>:int)|- bot
          
          P[<<bcopy_1046@184:2>@260:0>](<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:0>:int),
          ((<k_make_array_u_1321@267:0> >= <k_make_array_u_1321@267:1>) &&
           ((<k_make_array_u_1321@267:1> > 0) && ((0 <= <k_make_array_u_1321@267:0>) && (<fail_1893@270:0> = 1))))
          |- P[<fail_1893@270:0>](<fail_1893@270:0>:int)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,var764:int),
          P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@260:0>:int),
          (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:2>@260:0>:int)
          
          P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<<bcopy_1046@251:2>@254:0>:int),
          (<<bcopy_1046@251:2>@254:0> < <bcopy_1046@251:1>)
          |- P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                           <<bcopy_1046@251:2>@254:0>:int)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,var884:int),
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,var885:int,<f_bcopy_1887@249:3>:int),
          (((1 + var885) = <bcopy_1046@251:4>) &&
           (((1 + var884) = <bcopy_1046@251:4>) && (<bcopy_1046@251:4> < (1 + <bcopy_1046@251:1>))))
          |- P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                   <bcopy_1046@251:4>:int)
          
          P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:3>@217:0>:int),
          ((<bcopy_1046@184:0> = <bcopy_1046@184:1>) &&
           ((<bcopy_1046@184:0> > 0) &&
            ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) &&
             ((0 <= <<bcopy_1046@184:3>@217:0>) && (<<<bcopy_1046@184:3>@217:1>@237:0> = 0)))))
          |- P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,
                                                   <bcopy_1046@184:1>:int,
                                                   <<bcopy_1046@184:3>@217:0>:int,
                                                   <<<bcopy_1046@184:3>@217:1>@237:0>:int)
          
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,var765:int),
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int),
          (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:3>@217:0>:int)
          
          P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:2>@187:0>:int),
          ((<bcopy_1046@184:0> = <bcopy_1046@184:1>) &&
           ((<bcopy_1046@184:0> > 0) &&
            ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) &&
             ((0 <= <<bcopy_1046@184:2>@187:0>) && (<<<bcopy_1046@184:2>@187:1>@207:0> = 0)))))
          |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                   <bcopy_1046@184:1>:int,
                                                   <<bcopy_1046@184:2>@187:0>:int,
                                                   <<<bcopy_1046@184:2>@187:1>@207:0>:int)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
          (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:2>@187:0>:int)
          
           ((<bcopy_1046@184:0> = <bcopy_1046@184:1>) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:4> = 0)))
          |- P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                   <bcopy_1046@184:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1893_sep_270_sep_0($461)) -> 1=0.
(($461-1=0) & (-$462<=0) & ($463>0) & ($462-$463>=0)) & (v_sep_bcopy_1046_sep_184_sep_2_sep_260_sep_0($463,$463,$462)) -> v_sep_fail_1893_sep_270_sep_0($461).
($464-$465<0) & (v_sep_bcopy_1046_sep_251_sep_2_sep_254_sep_0($466,$465,$467)) & (v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_1_sep_207_sep_0($466,$465,$464,$468)) & (v_sep_bcopy_1046_sep_184_sep_4($466,$465,$464)) -> v_sep_bcopy_1046_sep_184_sep_2_sep_260_sep_0($466,$465,$467).
($469-$470<0) & (v_sep_bcopy_1046_sep_251_sep_4($471,$470,$469)) -> v_sep_bcopy_1046_sep_251_sep_2_sep_254_sep_0($471,$470,$469).
((-$470+$472-1<0) & (-$472+$473+1=0) & (-$472+$474+1=0)) & (v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_1_sep_207_sep_0($471,$470,$474,$475)) & (v_sep_bcopy_1046_sep_184_sep_4($471,$470,$473)) -> v_sep_bcopy_1046_sep_251_sep_4($471,$470,$472).
(($476=0) & (-$477<=0) & (-$466+$477<0) & ($466>0) & (-$465+$466=0)) & (v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_0($466,$466,$477)) -> v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_1_sep_237_sep_0($466,$465,$477,$476).
(-$465+$477<0) & (v_sep_bcopy_1046_sep_184_sep_4($466,$465,$477)) & (v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_1_sep_207_sep_0($466,$465,$477,$478)) -> v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_0($466,$465,$477).
(($479=0) & (-$464<=0) & ($464-$466<0) & ($466>0) & (-$465+$466=0)) & (v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0($466,$466,$464)) -> v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_1_sep_207_sep_0($466,$465,$464,$479).
($464-$465<0) & (v_sep_bcopy_1046_sep_184_sep_4($466,$465,$464)) -> v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0($466,$465,$464).
($480=0) & ($466>0) & (-$465+$466=0) -> v_sep_bcopy_1046_sep_184_sep_4($466,$465,$480).


v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0: X
v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_1_sep_207_sep_0: X
v_sep_bcopy_1046_sep_184_sep_2_sep_260_sep_0: X
v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_0: X
v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_1_sep_237_sep_0: X
v_sep_bcopy_1046_sep_184_sep_4: X
v_sep_bcopy_1046_sep_251_sep_2_sep_254_sep_0: X
v_sep_bcopy_1046_sep_251_sep_4: X
v_sep_fail_1893_sep_270_sep_0: X
...............
v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0: X
v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_1_sep_207_sep_0: X
v_sep_bcopy_1046_sep_184_sep_2_sep_260_sep_0: X
v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_0: X
v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_1_sep_237_sep_0: X
v_sep_bcopy_1046_sep_184_sep_4: X
v_sep_bcopy_1046_sep_251_sep_2_sep_254_sep_0: X
v_sep_bcopy_1046_sep_251_sep_4: X
v_sep_fail_1893_sep_270_sep_0: X
.....
v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0: X
v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_1_sep_207_sep_0: X
v_sep_bcopy_1046_sep_184_sep_2_sep_260_sep_0: X
v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_0: X
v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_1_sep_237_sep_0: X
v_sep_bcopy_1046_sep_184_sep_4: X
v_sep_bcopy_1046_sep_251_sep_2_sep_254_sep_0: X
v_sep_bcopy_1046_sep_251_sep_4: X
v_sep_fail_1893_sep_270_sep_0: X
..........
v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0: X
v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_1_sep_207_sep_0: X
v_sep_bcopy_1046_sep_184_sep_2_sep_260_sep_0: X
v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_0: X
v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_1_sep_237_sep_0: X
v_sep_bcopy_1046_sep_184_sep_4: X
v_sep_bcopy_1046_sep_251_sep_2_sep_254_sep_0: X
v_sep_bcopy_1046_sep_251_sep_4: X
v_sep_fail_1893_sep_270_sep_0: X
............
v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0: X
v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_1_sep_207_sep_0: X
v_sep_bcopy_1046_sep_184_sep_2_sep_260_sep_0: X
v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_0: X
v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_1_sep_237_sep_0: X
v_sep_bcopy_1046_sep_184_sep_4: X
v_sep_bcopy_1046_sep_251_sep_2_sep_254_sep_0: X
v_sep_bcopy_1046_sep_251_sep_4: X
v_sep_fail_1893_sep_270_sep_0: X
...............(0=0) & (v_sep_fail_1893_sep_270_sep_0($461)) -> 1=0.
(($461-1=0) & (-$462<=0) & ($463>0) & ($462-$463>=0)) & (v_sep_bcopy_1046_sep_184_sep_2_sep_260_sep_0($463,$463,$462)) -> v_sep_fail_1893_sep_270_sep_0($461).
($464-$465<0) & (v_sep_bcopy_1046_sep_251_sep_2_sep_254_sep_0($466,$465,$467)) & (v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_1_sep_207_sep_0($466,$465,$464,$468)) & (v_sep_bcopy_1046_sep_184_sep_4($466,$465,$464)) -> v_sep_bcopy_1046_sep_184_sep_2_sep_260_sep_0($466,$465,$467).
($469-$470<0) & (v_sep_bcopy_1046_sep_251_sep_4($471,$470,$469)) -> v_sep_bcopy_1046_sep_251_sep_2_sep_254_sep_0($471,$470,$469).
((-$470+$472-1<0) & (-$472+$473+1=0) & (-$472+$474+1=0)) & (v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_1_sep_207_sep_0($471,$470,$474,$475)) & (v_sep_bcopy_1046_sep_184_sep_4($471,$470,$473)) -> v_sep_bcopy_1046_sep_251_sep_4($471,$470,$472).
(($476=0) & (-$477<=0) & (-$466+$477<0) & ($466>0) & (-$465+$466=0)) & (v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_0($466,$466,$477)) -> v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_1_sep_237_sep_0($466,$465,$477,$476).
(-$465+$477<0) & (v_sep_bcopy_1046_sep_184_sep_4($466,$465,$477)) & (v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_1_sep_207_sep_0($466,$465,$477,$478)) -> v_sep_bcopy_1046_sep_184_sep_3_sep_217_sep_0($466,$465,$477).
(($479=0) & (-$464<=0) & ($464-$466<0) & ($466>0) & (-$465+$466=0)) & (v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0($466,$466,$464)) -> v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_1_sep_207_sep_0($466,$465,$464,$479).
($464-$465<0) & (v_sep_bcopy_1046_sep_184_sep_4($466,$465,$464)) -> v_sep_bcopy_1046_sep_184_sep_2_sep_187_sep_0($466,$465,$464).
($480=0) & ($466>0) & (-$465+$466=0) -> v_sep_bcopy_1046_sep_184_sep_4($466,$465,$480).

        solution:
          P[<<bcopy_1046@184:2>@187:0>]($537:int,$539:int,$541:int) = true
          P[<<<bcopy_1046@184:2>@187:1>@207:0>]($498:int,$500:int,$502:int,$504:int) = true
          P[<<bcopy_1046@184:2>@260:0>]($484:int,$486:int,$488:int) = ((1 + $488) <= $486)
          P[<<bcopy_1046@184:3>@217:0>]($530:int,$532:int,$534:int) = true
          P[<<<bcopy_1046@184:3>@217:1>@237:0>]($521:int,$523:int,$525:int,$527:int) = true
          P[<bcopy_1046@184:4>]($507:int,$509:int,$511:int) = true
          P[<<bcopy_1046@251:2>@254:0>]($491:int,$493:int,$495:int) = ((1 + $495) <= $493)
          P[<bcopy_1046@251:4>]($514:int,$516:int,$518:int) = true
          P[<fail_1893@270:0>]($481:bool) = false
        
      end HcSolver.solve_ub(292076)[4] (0.045993 sec.)
      begin HcSolver.check_validity(292918)[4]
        input:
          P[<fail_1893@270:0>](<fail_1893@270:0>:bool)|- bot
          
          P[<<bcopy_1046@184:2>@260:0>](<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:1>:int,<k_make_array_u_1321@267:0>:int),
          ((0 <= <k_make_array_u_1321@267:0>) &&
           ((<k_make_array_u_1321@267:1> > 0) &&
            ((<k_make_array_u_1321@267:0> >= <k_make_array_u_1321@267:1>) && <fail_1893@270:0>)))
          |- P[<fail_1893@270:0>](<fail_1893@270:0>:bool)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int,var764:int),
          P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@260:0>:int),
          (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:2>@260:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:2>@260:0>:int)
          
          P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,<<bcopy_1046@251:2>@254:0>:int),
          (<<bcopy_1046@251:2>@254:0> < <bcopy_1046@251:1>)
          |- P[<<bcopy_1046@251:2>@254:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                           <<bcopy_1046@251:2>@254:0>:int)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                                -1 + <bcopy_1046@251:4>):int),
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,(
                                                -1 + <bcopy_1046@251:4>):int,<f_bcopy_1887@249:3>:int),
          (<bcopy_1046@251:4> < (1 + <bcopy_1046@251:1>))
          |- P[<bcopy_1046@251:4>](<bcopy_1046@251:0>:int,<bcopy_1046@251:1>:int,
                                   <bcopy_1046@251:4>:int)
          
          P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:3>@217:0>:int),
          ((<<<bcopy_1046@184:3>@217:1>@237:0> = 0) &&
           ((0 <= <<bcopy_1046@184:3>@217:0>) &&
            ((<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:0>) &&
             ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
          |- P[<<<bcopy_1046@184:3>@217:1>@237:0>](<bcopy_1046@184:0>:int,
                                                   <bcopy_1046@184:1>:int,
                                                   <<bcopy_1046@184:3>@217:0>:int,
                                                   <<<bcopy_1046@184:3>@217:1>@237:0>:int)
          
          P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int,var765:int),
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:3>@217:0>:int),
          (<<bcopy_1046@184:3>@217:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:3>@217:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:3>@217:0>:int)
          
          P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:0>:int,<<bcopy_1046@184:2>@187:0>:int),
          ((<<<bcopy_1046@184:2>@187:1>@207:0> = 0) &&
           ((0 <= <<bcopy_1046@184:2>@187:0>) &&
            ((<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:0>) &&
             ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))))
          |- P[<<<bcopy_1046@184:2>@187:1>@207:0>](<bcopy_1046@184:0>:int,
                                                   <bcopy_1046@184:1>:int,
                                                   <<bcopy_1046@184:2>@187:0>:int,
                                                   <<<bcopy_1046@184:2>@187:1>@207:0>:int)
          
          P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,<<bcopy_1046@184:2>@187:0>:int),
          (<<bcopy_1046@184:2>@187:0> < <bcopy_1046@184:1>)
          |- P[<<bcopy_1046@184:2>@187:0>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                           <<bcopy_1046@184:2>@187:0>:int)
          
           ((<bcopy_1046@184:4> = 0) && ((<bcopy_1046@184:0> > 0) && (<bcopy_1046@184:0> = <bcopy_1046@184:1>)))
          |- P[<bcopy_1046@184:4>](<bcopy_1046@184:0>:int,<bcopy_1046@184:1>:int,
                                   <bcopy_1046@184:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(292918)[4] (0.010998 sec.)
      solution:
        P[<<bcopy_1046@184:2>@187:0>]($537:int,$539:int,$541:int) = true
        P[<<<bcopy_1046@184:2>@187:1>@207:0>]($498:int,$500:int,$502:int,$504:int) = true
        P[<<bcopy_1046@184:2>@260:0>]($484:int,$486:int,$488:int) = ((1 + $488) <= $486)
        P[<<bcopy_1046@184:3>@217:0>]($530:int,$532:int,$534:int) = true
        P[<<<bcopy_1046@184:3>@217:1>@237:0>]($521:int,$523:int,$525:int,$527:int) = true
        P[<bcopy_1046@184:4>]($507:int,$509:int,$511:int) = true
        P[<<bcopy_1046@251:2>@254:0>]($491:int,$493:int,$495:int) = ((1 + $495) <= $493)
        P[<bcopy_1046@251:4>]($514:int,$516:int,$518:int) = true
        P[<fail_1893@270:0>]($481:bool) = false
    end YhornInterface.solve(292075)[3] (0.056991 sec.)
    
  end RefTypeInfer.infer_etrs(133116)[2] (1.266807 sec.)
  refinement types:
    main_1884: X
    f_1891: v1:int -> X
    main_1057: v1:int -> (v2:unit -> X) -> X
    f_1042: v1:int ->
            (v2:int -> (v3:int -> X) -> X /\
             v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> (v14:unit -> X) -> X
    bcopy_1046: v1:int ->
                v2:int ->
                (v3:{v3:int | ((1 + v3) <= v1)} -> (v4:int -> X) -> X /\
                 v7:{v7:int | ((1 + v7) <= v1)} -> (v8:int -> X) -> X) ->
                (v11:int -> (v12:int -> X) -> X) ->
                v15:{v15:int | (v2 <= v1)} -> ((v16:int -> (v17:int -> X) -> X) -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1321: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1332: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_1886: v1:int ->
                  v2:int ->
                  v3:int ->
                  (v4:int -> (v5:int -> X) -> X) ->
                  ((v8:int -> (v9:int -> X) -> X) -> X) -> (v13:int -> (v14:int -> X) -> X) -> v17:int -> X
    update_1033: v1:int ->
                 v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> ((v8:int -> (v9:int -> X) -> X) -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1321: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1332: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_update_1885: v1:int ->
                   v2:int ->
                   v3:int -> (v4:int -> (v5:int -> X) -> X) -> ((v8:int -> (v9:int -> X) -> X) -> X) -> v13:int -> X
    f_bcopy_1887: v1:int ->
                  v2:int ->
                  v3:int ->
                  v4:int ->
                  ((v5:int -> (v6:int -> X) -> X) -> X) ->
                  (v10:int -> (v11:int -> X) -> X) -> (v14:int -> (v15:int -> X) -> X) -> X
    bcopy_1046: v1:int ->
                v2:int ->
                (v3:{v3:int | ((1 + v3) <= v1)} -> (v4:int -> X) -> X) ->
                (v7:int -> (v8:int -> X) -> X) ->
                v11:{v11:int | (v2 <= v1)} -> ((v12:int -> (v13:int -> X) -> X) -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1321: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1893: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var957:int ->
            var956:int ->
            var955:int -> var954:int -> (var953:int -> (var952:int -> X) -> X) -> var949:int -> (var948:int -> X) -> X
    f_1892: var960:int -> var959:unit -> X
    f_f_1890: var972:int ->
              (var971:int -> (var970:int -> X) -> X) ->
              (var967:unit -> X) -> (var965:int -> (var964:int -> X) -> X) -> X
    f_print_array_1888: var987:int ->
                        var986:int ->
                        var985:int ->
                        (var984:int -> (var983:int -> X) -> X) ->
                        (var980:int -> (var979:int -> X) -> X) -> (var976:unit -> X) -> var974:int -> X
    f_print_array_1889: var1003:int ->
                        var1002:int ->
                        var1001:int ->
                        var1000:int ->
                        (var999:int -> (var998:int -> X) -> X) ->
                        (var995:int -> (var994:int -> X) -> X) -> (var991:unit -> X) -> var989:unit -> X
    print_array_1052: var1017:int ->
                      (var1016:int -> (var1015:int -> X) -> X) ->
                      var1012:int ->
                      (var1011:int -> (var1010:int -> X) -> X) -> var1007:int -> (var1006:unit -> X) -> X
    print_int_1040: var1021:int -> (var1020:unit -> X) -> X
  abstraction types:
    main_1884: X
    f_1891: v1:int -> X
    main_1057: v1:int -> (v2:unit -> X) -> X
    f_1042: v1:int ->
            (var1022:int -> (var1023:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> (v14:unit -> X) -> X
    bcopy_1046: var1030:int ->
                var1031:int ->
                (var1032:int[var1032 -> ((1 + var1032) <= var1030)] -> (var1033:int -> X) -> X) ->
                (var1036:int -> (var1037:int -> X) -> X) ->
                var1040:int[var1040 -> (var1031 <= var1030)] -> ((var1041:int -> (var1042:int -> X) -> X) -> X) -> X
    make_array_1030: var1052:int -> var1053:int -> (var1054:int -> X) -> X
    k_make_array_u_1321: var1063:int -> var1064:int -> (var1065:int -> X) -> var1067:bool -> X
    k_make_array_u_1332: var1069:int -> var1070:int -> (var1071:int -> X) -> var1073:unit -> X
    f_bcopy_1886: v1:int ->
                  v2:int ->
                  v3:int ->
                  (v4:int -> (v5:int -> X) -> X) ->
                  ((v8:int -> (v9:int -> X) -> X) -> X) -> (v13:int -> (v14:int -> X) -> X) -> v17:int -> X
    update_1033: v1:int ->
                 v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> ((v8:int -> (v9:int -> X) -> X) -> X) -> X
    f_update_1885: v1:int ->
                   v2:int ->
                   v3:int -> (v4:int -> (v5:int -> X) -> X) -> ((v8:int -> (v9:int -> X) -> X) -> X) -> v13:int -> X
    f_bcopy_1887: v1:int ->
                  v2:int ->
                  v3:int ->
                  v4:int ->
                  ((v5:int -> (v6:int -> X) -> X) -> X) ->
                  (v10:int -> (v11:int -> X) -> X) -> (v14:int -> (v15:int -> X) -> X) -> X
    fail_1893: v1:bool -> (v2:unit -> X) -> X
    a_1038: var957:int ->
            var956:int ->
            var955:int -> var954:int -> (var953:int -> (var952:int -> X) -> X) -> var949:int -> (var948:int -> X) -> X
    f_1892: var960:int -> var959:unit -> X
    f_f_1890: var972:int ->
              (var971:int -> (var970:int -> X) -> X) ->
              (var967:unit -> X) -> (var965:int -> (var964:int -> X) -> X) -> X
    f_print_array_1888: var987:int ->
                        var986:int ->
                        var985:int ->
                        (var984:int -> (var983:int -> X) -> X) ->
                        (var980:int -> (var979:int -> X) -> X) -> (var976:unit -> X) -> var974:int -> X
    f_print_array_1889: var1003:int ->
                        var1002:int ->
                        var1001:int ->
                        var1000:int ->
                        (var999:int -> (var998:int -> X) -> X) ->
                        (var995:int -> (var994:int -> X) -> X) -> (var991:unit -> X) -> var989:unit -> X
    print_array_1052: var1017:int ->
                      (var1016:int -> (var1015:int -> X) -> X) ->
                      var1012:int ->
                      (var1011:int -> (var1010:int -> X) -> X) -> var1007:int -> (var1006:unit -> X) -> X
    print_int_1040: var1021:int -> (var1020:unit -> X) -> X
  
end AbsTypeInfer.refine(133115)[1] (1.276805 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 5)::
Main: main_1884
  main_1884 -> (rand_int f_1891)
  a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 when (i_1034 = j_1039) -> (k_update_a_1401 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 when (
      not (i_1034 = j_1039)) -> (des_1036 i_1034 k_update_a_1401)
  bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 when (i_1050 >= m_1047) -> (k_f_bcopy_1535 des_1049)
  bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 when (
      not (i_1050 >= m_1047)) -> (src_1048 i_1050 (f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048))
  f_1042 m_1043 src_1044 des_1045 k_f_1476 ->
      (bcopy_1046 m_1043 m_1043 src_1044 des_1045 0 (f_f_1890 m_1043 des_1045 k_f_1476))
  f_1891 x_1859 -> (main_1057 x_1859 (f_1892 x_1859))
  f_1892 x_1859 x_1856 -> end
  f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048 x_1591 ->
      (update_1033 i_1050 m_1047 des_1049 x_1591 (f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048))
  f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048 x_1547 ->
      (bcopy_1046 m_1043 m_1047 src_1048 x_1547 (i_1050 + 1) k_f_bcopy_1535)
  f_f_1890 m_1043 des_1045 k_f_1476 x_1715 -> (print_array_1052 m_1043 des_1045 m_1043 x_1715 0 k_f_1476)
  f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664 x_1687 ->
      (print_int_1040 x_1687 (f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664))
  f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664 x_1667 ->
      (print_array_1052 m_1043 des_1045 m_1053 array_1054 (i_1055 + 1) k_f_print_array_1664)
  f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380 x_1386 ->
      (k_update_1380 (a_1038 i_1034 n_1035 x_1037 x_1386 des_1036))
  fail_1893 b k -> {fail} => (k ())
  k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 when b_1333 ->
      (k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 ())
  k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 when (not b_1333) ->
      (fail_1893 true (k_make_array_u_1332 i_1032 n_1031 k_make_array_1315))
  k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 x_1318 -> (k_make_array_1315 0)
  main_1057 n_1058 k_main_1787 when (n_1058 > 0) ->
      (f_1042 n_1058 (make_array_1030 n_1058) (make_array_1030 n_1058) k_main_1787)
  main_1057 n_1058 k_main_1787 when (not (n_1058 > 0)) -> (k_main_1787 ())
  make_array_1030 n_1031 i_1032 k_make_array_1315 when (0 <= i_1032) ->
      (k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1315 when (not (0 <= i_1032)) ->
      (k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 false)
  print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 when (
      i_1055 >= m_1053) -> (k_f_print_array_1664 ())
  print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 when (
      not (i_1055 >= m_1053)) ->
      (des_1045 i_1055 (f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664))
  print_int_1040 n_1041 k_print_int_1432 -> (k_print_int_1432 ())
  update_1033 i_1034 n_1035 des_1036 x_1037 k_update_1380 ->
      (des_1036 i_1034 (f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380))
Types:
  main_1884 : X
  bcopy_1046 : (x_1:int ->
                x_2:int ->
                (x_4:int[x_1 >= x_4 + 1; x_4 >= 0] -> (int -> X) -> X) ->
                (x_10:int[x_10 >= 0; x_1 >= x_10 + 1] -> (int -> X) -> X) ->
                x_15:int[x_15 >= 0; x_1 >= x_2] -> ((int -> (int -> X) -> X) -> X) -> X)
  fail_1893 : (x_1:bool[x_1] -> (unit -> X) -> X)
  print_array_1052 : (int ->
                      (x_3:int[x_3 >= 0] -> (int -> X) -> X) ->
                      int -> (int -> (int -> X) -> X) -> x_15:int[x_15 >= 0] -> (unit -> X) -> X)
  
(5-1) Abstracting ... DONE!

(5-2) Checking HORS ... DONE!

Error trace::
  main_1884 ... --> 
  f_1891 ... --> 
  main_1057 [1/2] ... --> 
  f_1042 ... --> 
  bcopy_1046 [1/2] ... --> 
  f_f_1890 ... --> 
  print_array_1052 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1321 [2/2] ... --> 
  fail_1893 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0; 1; 0

(5-3) Checking counter-example ... DONE!

(5-4) Discovering predicates ... 
begin AbsTypeInfer.refine(296407)[1]
  program:
    main_1884  | true = ((Random.int 0) f_1891)
    a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 | (
    i_1034 = j_1039) = (k_update_a_1401 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 | (
    not (i_1034 = j_1039)) = (des_1036 i_1034
                                       k_update_a_1401)
    bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 | (
    i_1050 >= m_1047) = (k_f_bcopy_1535 des_1049)
    bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 | (
    not (i_1050 >= m_1047)) = (src_1048 i_1050
                                        (f_bcopy_1886 i_1050
                                                      m_1043
                                                      m_1047
                                                      des_1049
                                                      k_f_bcopy_1535
                                                      src_1048))
    f_1042 m_1043 src_1044 des_1045 k_f_1476 | true = (bcopy_1046
                                                         m_1043
                                                         m_1043
                                                         src_1044
                                                         des_1045
                                                         0
                                                         (f_f_1890 m_1043
                                                                   des_1045
                                                                   k_f_1476))
    f_1891 x_1859 | true = (main_1057 x_1859
                                      (f_1892 x_1859))
    f_1892 x_1859 x_1856 | true = end
    f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048 x_1591 | true = (
    update_1033 i_1050
                m_1047
                des_1049
                x_1591
                (f_bcopy_1887 i_1050
                              m_1043
                              m_1047
                              x_1591
                              k_f_bcopy_1535
                              src_1048))
    f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048 x_1547 | true = (
    bcopy_1046 m_1043
               m_1047
               src_1048
               x_1547
               (i_1050 + 1)
               k_f_bcopy_1535)
    f_f_1890 m_1043 des_1045 k_f_1476 x_1715 | true = (print_array_1052 m_1043
                                                                    des_1045
                                                                    m_1043
                                                                    x_1715
                                                                    0
                                                                    k_f_1476)
    f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664 x_1687 | true = (
    print_int_1040 x_1687
                   (f_print_array_1889 i_1055
                                       m_1043
                                       m_1053
                                       x_1687
                                       array_1054
                                       des_1045
                                       k_f_print_array_1664))
    f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664 x_1667 | true = (
    print_array_1052 m_1043
                     des_1045
                     m_1053
                     array_1054
                     (i_1055 + 1)
                     k_f_print_array_1664)
    f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380 x_1386 | true = (
    k_update_1380 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1386
                          des_1036))
    fail_1893 b k | true = (fail ())
    k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 | b_1333 = (
    k_make_array_u_1332 i_1032
                        n_1031
                        k_make_array_1315
                        ())
    k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 | (not b_1333) = (
    fail_1893 true
              (k_make_array_u_1332 i_1032
                                   n_1031
                                   k_make_array_1315))
    k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 x_1318 | true = (
    k_make_array_1315 0)
    main_1057 n_1058 k_main_1787 | (n_1058 > 0) = (f_1042
                                                     n_1058
                                                     (make_array_1030 n_1058)
                                                     (make_array_1030 n_1058)
                                                     k_main_1787)
    main_1057 n_1058 k_main_1787 | (not (n_1058 > 0)) = (k_main_1787 ())
    make_array_1030 n_1031 i_1032 k_make_array_1315 | (0 <= i_1032) = (
    k_make_array_u_1321 i_1032
                        n_1031
                        k_make_array_1315
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1315 | (not (0 <= i_1032)) = (
    k_make_array_u_1321 i_1032
                        n_1031
                        k_make_array_1315
                        false)
    print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 | (
    i_1055 >= m_1053) = (k_f_print_array_1664 ())
    print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 | (
    not (i_1055 >= m_1053)) = (des_1045
                                 i_1055
                                 (f_print_array_1888 i_1055
                                                     m_1043
                                                     m_1053
                                                     array_1054
                                                     des_1045
                                                     k_f_print_array_1664))
    print_int_1040 n_1041 k_print_int_1432 | true = (k_print_int_1432 ())
    update_1033 i_1034 n_1035 des_1036 x_1037 k_update_1380 | true = (
    des_1036 i_1034
             (f_update_1885 i_1034
                            n_1035
                            x_1037
                            des_1036
                            k_update_1380))
    main_1884:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    bcopy_1046:int ->
               int ->
               (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
    f_1042:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> X
    f_1891:int -> X
    f_1892:int -> unit -> X
    f_bcopy_1886:int ->
                 int ->
                 int ->
                 (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_1887:int ->
                 int ->
                 int ->
                 int -> ((int -> (int -> X) -> X) -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> X
    f_f_1890:int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> X
    f_print_array_1888:int ->
                       int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> int -> X
    f_print_array_1889:int ->
                       int ->
                       int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> (unit -> X) -> unit -> X
    f_update_1885:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1893:bool -> (unit -> X) -> X
    k_make_array_u_1321:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1332:int -> int -> (int -> X) -> unit -> X
    main_1057:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    print_array_1052:int -> (int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    print_int_1040:int -> (unit -> X) -> X
    update_1033:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1042,f_1891,f_1892,f_bcopy_1886,f_bcopy_1887,f_f_1890,f_print_array_1888,f_print_array_1889,f_update_1885,k_make_array_u_1321,k_make_array_u_1332,main_1057,make_array_1030,print_int_1040,update_1033
  counterexample: 0:0:0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1891@276:0> = var1075)
     [true.(<main_1057@278:0> = <f_1891@276:0>)
      [(<main_1057@278:0> > 0).(<f_1042@281:0> = <main_1057@278:0>)
       [true.
        ((<bcopy_1046@283:0> = <f_1042@281:0>) && ((<bcopy_1046@283:1> = <f_1042@281:0>) && (<bcopy_1046@283:4> = 0)))
        [(<bcopy_1046@283:4> >= <bcopy_1046@283:1>).true
         [true.(<f_f_1890@288:0> = <f_1042@281:0>)
          [true.
           ((<print_array_1052@290:0> = <f_f_1890@288:0>) &&
            ((<print_array_1052@290:2> = <f_f_1890@288:0>) && (<print_array_1052@290:4> = 0)))
           [(not (<print_array_1052@290:4> >= <print_array_1052@290:2>)).
            (<<print_array_1052@290:1>@293:0> = <print_array_1052@290:4>)
            [true.(<<f_f_1890@288:1>@295:0> = <<print_array_1052@290:1>@293:0>)
             [true.(<<f_1042@281:2>@297:0> = <<f_f_1890@288:1>@295:0>)
              [true.
               ((<make_array_1030@299:0> = <main_1057@278:0>) && (<make_array_1030@299:1> = <<f_1042@281:2>@297:0>))
               [(0 <= <make_array_1030@299:1>).
                ((<k_make_array_u_1321@302:0> = <make_array_1030@299:1>) &&
                 ((<k_make_array_u_1321@302:1> = <make_array_1030@299:0>) &&
                  (<k_make_array_u_1321@302:3> = (<make_array_1030@299:1> < <make_array_1030@299:0>))))
                [(not <k_make_array_u_1321@302:3>).(<fail_1893@305:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(296408)[2]
    horn clauses:
      P[<fail_1893@305:0>](<fail_1893@305:0>:bool)|- bot
      
      P[<k_make_array_u_1321@302:3>](<k_make_array_u_1321@302:0>:int,<k_make_array_u_1321@302:1>:int,false:bool),
      <fail_1893@305:0> |- P[<fail_1893@305:0>](<fail_1893@305:0>:bool)
      
      P[<make_array_1030@299:1>](<k_make_array_u_1321@302:1>:int,<k_make_array_u_1321@302:0>:int),
      ((0 <= <k_make_array_u_1321@302:0>) &&
       (<k_make_array_u_1321@302:3> = (<k_make_array_u_1321@302:0> < <k_make_array_u_1321@302:1>)))
      |- P[<k_make_array_u_1321@302:3>](<k_make_array_u_1321@302:0>:int,
                                        <k_make_array_u_1321@302:1>:int,
                                        <k_make_array_u_1321@302:3>:bool)
      
      P[<main_1057@278:0>](<make_array_1030@299:0>:int),
      P[<<f_1042@281:2>@297:0>](<make_array_1030@299:0>:int,<make_array_1030@299:1>:int), (
      <make_array_1030@299:0> > 0)
      |- P[<make_array_1030@299:1>](<make_array_1030@299:0>:int,<make_array_1030@299:1>:int)
      
      P[<f_1042@281:0>](<f_1042@281:0>:int),
      P[<<f_f_1890@288:1>@295:0>](<f_1042@281:0>:int,<<f_1042@281:2>@297:0>:int)|- P[<<f_1042@281:2>@297:0>](
      <f_1042@281:0>:int,<<f_1042@281:2>@297:0>:int)
      
      P[<f_f_1890@288:0>](<f_f_1890@288:0>:int),
      P[<<print_array_1052@290:1>@293:0>](<f_f_1890@288:0>:int,<<f_f_1890@288:1>@295:0>:int)|- P[<<f_f_1890@288:1>@295:0>](
      <f_f_1890@288:0>:int,<<f_f_1890@288:1>@295:0>:int)
      
      P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
      (<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>)
      |- P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,
                                             <<print_array_1052@290:1>@293:0>:int)
      
      P[<f_f_1890@288:0>](<print_array_1052@290:0>:int),
      ((<print_array_1052@290:4> = 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>))
      |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,
                                     <print_array_1052@290:4>:int)
      
      P[<f_1042@281:0>](<f_f_1890@288:0>:int)|- P[<f_f_1890@288:0>](<f_f_1890@288:0>:int)
      
      P[<f_1042@281:0>](<bcopy_1046@283:0>:int),
      ((<bcopy_1046@283:4> = 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>))
      |- P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,
                               <bcopy_1046@283:4>:int)
      
      P[<main_1057@278:0>](<f_1042@281:0>:int), (<f_1042@281:0> > 0) |- P[<f_1042@281:0>](<f_1042@281:0>:int)
      
      P[<f_1891@276:0>](<main_1057@278:0>:int)|- P[<main_1057@278:0>](<main_1057@278:0>:int)
      
      |- P[<f_1891@276:0>](<f_1891@276:0>:int)
    call trees:
      <main_1884@273>
        <f_1891@276>
          <main_1057@278>
            <f_1042@281>
              <bcopy_1046@283>
              </<bcopy_1046@283:5>@286>
              <f_f_1890@288>
                <print_array_1052@290>
                </<print_array_1052@290:1>@293>
              </<f_f_1890@288:1>@295>
            </<f_1042@281:2>@297>
            <make_array_1030@299>
              <k_make_array_u_1321@302>
                <fail_1893@305>
    inlined horn clauses:
      P[<fail_1893@305:0>](<fail_1893@305:0>:bool)|- bot
      
      P[<<print_array_1052@290:1>@293:0>](<k_make_array_u_1321@302:1>:int,<k_make_array_u_1321@302:0>:int),
      ((0 <= <k_make_array_u_1321@302:0>) &&
       ((<k_make_array_u_1321@302:1> > 0) &&
        ((<k_make_array_u_1321@302:0> >= <k_make_array_u_1321@302:1>) && <fail_1893@305:0>)))
      |- P[<fail_1893@305:0>](<fail_1893@305:0>:bool)
      
      P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
      (<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>)
      |- P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,
                                             <<print_array_1052@290:1>@293:0>:int)
      
      
      ((<print_array_1052@290:4> = 0) &&
       ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
      |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,
                                     <print_array_1052@290:4>:int)
      
       ((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
      |- P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,
                               <bcopy_1046@283:4>:int)
    begin ParamSubstInfer.infer(298501)[3]
      
    end ParamSubstInfer.infer(298501)[3] (0.452932 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(298503)[3]
      
    end RefTypeInfer.elim_coeffs(298503)[3] (0.000000 sec.)
    begin GenHcSolver.solve(298955)[3]
      Horn clauses:
        P[<fail_1893@305:0>](<fail_1893@305:0>:bool)|- bot
        
        P[<<print_array_1052@290:1>@293:0>](<k_make_array_u_1321@302:1>:int,<k_make_array_u_1321@302:0>:int),
        ((0 <= <k_make_array_u_1321@302:0>) &&
         ((<k_make_array_u_1321@302:1> > 0) &&
          ((<k_make_array_u_1321@302:0> >= <k_make_array_u_1321@302:1>) && <fail_1893@305:0>)))
        |- P[<fail_1893@305:0>](<fail_1893@305:0>:bool)
        
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
        (<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>)
        |- P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,
                                               <<print_array_1052@290:1>@293:0>:int)
        
        
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,
                                       <print_array_1052@290:4>:int)
        
         ((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
        |- P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,
                                 <bcopy_1046@283:4>:int)
      lower bounds:
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<print_array_1052@290:4>:int) =
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,<bcopy_1046@283:4>:int) =
        ((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
        P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,<<print_array_1052@290:1>@293:0>:int) =
        ((<<print_array_1052@290:1>@293:0> = 0) &&
         ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) && (<print_array_1052@290:0> > 0)))
        P[<fail_1893@305:0>](<fail_1893@305:0>:bool) = false
      upper bounds:
        P[<bcopy_1046@283:4>](var1076:int,var1077:int,var1078:int) = true
      begin GenHcSolver.classify_pids(301175)[4]
        output:
          [<bcopy_1046@283:4>]
      end GenHcSolver.classify_pids(301175)[4] (0.000000 sec.)
      lb:((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(301178)[4]
        lb:((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
        nub:false
        lb':((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
        nub':false
        begin InterpProver.interpolate(301179)[5]
          begin InterpProver.interpolate_fresh(301180)[6]
            begin InterpProver.interpolate_log(301181)[7]
              input1: ((<bcopy_1046@283:4> = 0) &&
                       ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
              input2: false
              begin InterpProver.interpolate_check(301182)[8]
                begin InterpProver.interpolate_simplify(301183)[9]
                  begin InterpProver.interpolate_quick(301231)[10]
                    
                  end InterpProver.interpolate_quick(301231)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(301183)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(301182)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(301181)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(301180)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(301179)[5] (0.001000 sec.)
        output:
          P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,<bcopy_1046@283:4>:int) = true
      end ApronInterface.convex_hull_interpolate(301178)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1893@305:0>](<fail_1893@305:0>:bool)|- bot
        
        P[<<print_array_1052@290:1>@293:0>](<k_make_array_u_1321@302:1>:int,<k_make_array_u_1321@302:0>:int),
        ((0 <= <k_make_array_u_1321@302:0>) &&
         ((<k_make_array_u_1321@302:1> > 0) &&
          ((<k_make_array_u_1321@302:0> >= <k_make_array_u_1321@302:1>) && <fail_1893@305:0>)))
        |- P[<fail_1893@305:0>](<fail_1893@305:0>:bool)
        
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
        (<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>)
        |- P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,
                                               <<print_array_1052@290:1>@293:0>:int)
        
        
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,
                                       <print_array_1052@290:4>:int)
      lower bounds:
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<print_array_1052@290:4>:int) =
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,<<print_array_1052@290:1>@293:0>:int) =
        ((<<print_array_1052@290:1>@293:0> = 0) &&
         ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) && (<print_array_1052@290:0> > 0)))
        P[<fail_1893@305:0>](<fail_1893@305:0>:bool) = false
      upper bounds:
        P[<fail_1893@305:0>](var1080:bool) = true
      begin GenHcSolver.classify_pids(303304)[4]
        output:
          [<fail_1893@305:0>]
      end GenHcSolver.classify_pids(303304)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(303307)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(303308)[5]
          begin InterpProver.interpolate_fresh(303309)[6]
            begin InterpProver.interpolate_log(303310)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(303311)[8]
                begin InterpProver.interpolate_simplify(303312)[9]
                  begin InterpProver.interpolate_quick(303325)[10]
                    
                  end InterpProver.interpolate_quick(303325)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(303329)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(303329)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(303312)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(303311)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(303310)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(303309)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(303308)[5] (0.000000 sec.)
        output:
          P[<fail_1893@305:0>](<fail_1893@305:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(303307)[4] (0.000000 sec.)
      Horn clauses:
        P[<<print_array_1052@290:1>@293:0>](<k_make_array_u_1321@302:1>:int,<k_make_array_u_1321@302:0>:int),
        ((<k_make_array_u_1321@302:0> >= <k_make_array_u_1321@302:1>) &&
         ((<k_make_array_u_1321@302:1> > 0) && (0 <= <k_make_array_u_1321@302:0>))) |- bot
        
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
        (<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>)
        |- P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,
                                               <<print_array_1052@290:1>@293:0>:int)
        
        
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,
                                       <print_array_1052@290:4>:int)
      lower bounds:
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<print_array_1052@290:4>:int) =
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,<<print_array_1052@290:1>@293:0>:int) =
        ((<<print_array_1052@290:1>@293:0> = 0) &&
         ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) && (<print_array_1052@290:0> > 0)))
      upper bounds:
        P[<<print_array_1052@290:1>@293:0>](var1081:int,var1082:int) =
        ((var1082 < var1081) || ((var1081 <= 0) || (0 > var1082)))
      begin GenHcSolver.classify_pids(305635)[4]
        output:
          [<<print_array_1052@290:1>@293:0>]
      end GenHcSolver.classify_pids(305635)[4] (0.000000 sec.)
      lb:((<<print_array_1052@290:1>@293:0> = 0) &&
          ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) && (<print_array_1052@290:0> > 0)))
      nub:(not
             ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) ||
              ((<print_array_1052@290:0> <= 0) || (0 > <<print_array_1052@290:1>@293:0>))))
      begin ApronInterface.convex_hull_interpolate(305638)[4]
        lb:((<<print_array_1052@290:1>@293:0> = 0) &&
            ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) && (<print_array_1052@290:0> > 0)))
        nub:(not
               ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) ||
                ((<print_array_1052@290:0> <= 0) || (0 > <<print_array_1052@290:1>@293:0>))))
        lb':((<<print_array_1052@290:1>@293:0> = 0) &&
             ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) && (<print_array_1052@290:0> > 0)))
        nub':(not
                ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) ||
                 ((<print_array_1052@290:0> <= 0) || (0 > <<print_array_1052@290:1>@293:0>))))
        begin InterpProver.interpolate(305639)[5]
          begin InterpProver.interpolate_fresh(305640)[6]
            begin InterpProver.interpolate_log(305641)[7]
              input1: ((<<print_array_1052@290:1>@293:0> = 0) &&
                       ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) && (<print_array_1052@290:0> > 0)))
              input2: (not
                         ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) ||
                          ((<print_array_1052@290:0> <= 0) || (0 > <<print_array_1052@290:1>@293:0>))))
              begin InterpProver.interpolate_check(305642)[8]
                begin InterpProver.interpolate_simplify(305643)[9]
                  begin InterpProver.interpolate_quick(305746)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(305755)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(305756)[12]
                        begin CsisatInterface.interpolate_csisat_log(305757)[13]
                          input1: (0 = v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0 & 1 <= v_sep_print_array_1052_sep_290_sep_0 & (1 + v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0) <= v_sep_print_array_1052_sep_290_sep_0)
                          input2: (0 <= v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0 & 1 <= v_sep_print_array_1052_sep_290_sep_0 & v_sep_print_array_1052_sep_290_sep_0 <= v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(305758)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(305758)[14] (0.000000 sec.)
                          output: (-2*v_sep_print_array_1052_sep_290_sep_0 + 2*v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(305757)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_print_array_1052_sep_290_sep_0 + 2*v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_print_array_1052_sep_290_sep_0 + 2*v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(305756)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(305755)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(305746)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(305643)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(305642)[8] (0.000999 sec.)
              output: ((1 + <<print_array_1052@290:1>@293:0>) <= <print_array_1052@290:0>)
            end InterpProver.interpolate_log(305641)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(305640)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(305639)[5] (0.000999 sec.)
        output:
          P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,<<print_array_1052@290:1>@293:0>:int) =
          ((1 + <<print_array_1052@290:1>@293:0>) <= <print_array_1052@290:0>)
      end ApronInterface.convex_hull_interpolate(305638)[4] (0.000999 sec.)
      Horn clauses:
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
        ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>) &&
         ((1 + <<print_array_1052@290:1>@293:0>) > <print_array_1052@290:0>)) |- bot
        
        
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,
                                       <print_array_1052@290:4>:int)
      lower bounds:
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<print_array_1052@290:4>:int) =
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
      upper bounds:
        P[<print_array_1052@290:4>](var1083:int,var1084:int,var1085:int) =
        ((var1085 >= var1084) || ((1 + var1085) <= var1083))
      begin GenHcSolver.classify_pids(307380)[4]
        output:
          [<print_array_1052@290:4>]
      end GenHcSolver.classify_pids(307380)[4] (0.000000 sec.)
      lb:((<print_array_1052@290:4> = 0) &&
          ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
      nub:(not
             ((<print_array_1052@290:4> >= <print_array_1052@290:2>) ||
              ((1 + <print_array_1052@290:4>) <= <print_array_1052@290:0>)))
      begin ApronInterface.convex_hull_interpolate(307383)[4]
        lb:((<print_array_1052@290:4> = 0) &&
            ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        nub:(not
               ((<print_array_1052@290:4> >= <print_array_1052@290:2>) ||
                ((1 + <print_array_1052@290:4>) <= <print_array_1052@290:0>)))
        lb':((<print_array_1052@290:4> = 0) &&
             ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        nub':(not
                ((<print_array_1052@290:4> >= <print_array_1052@290:2>) ||
                 ((1 + <print_array_1052@290:4>) <= <print_array_1052@290:0>)))
        begin InterpProver.interpolate(307384)[5]
          begin InterpProver.interpolate_fresh(307385)[6]
            begin InterpProver.interpolate_log(307386)[7]
              input1: ((<print_array_1052@290:4> = 0) &&
                       ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
              input2: (not
                         ((<print_array_1052@290:4> >= <print_array_1052@290:2>) ||
                          ((1 + <print_array_1052@290:4>) <= <print_array_1052@290:0>)))
              begin InterpProver.interpolate_check(307387)[8]
                begin InterpProver.interpolate_simplify(307388)[9]
                  begin InterpProver.interpolate_quick(307483)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(307492)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(307493)[12]
                        begin CsisatInterface.interpolate_csisat_log(307494)[13]
                          input1: (0 = v_sep_print_array_1052_sep_290_sep_4 & v_sep_print_array_1052_sep_290_sep_0 = v_sep_print_array_1052_sep_290_sep_2 & 1 <= v_sep_print_array_1052_sep_290_sep_0)
                          input2: ((1 + v_sep_print_array_1052_sep_290_sep_0) <= (1 + v_sep_print_array_1052_sep_290_sep_4) & (1 + v_sep_print_array_1052_sep_290_sep_4) <= v_sep_print_array_1052_sep_290_sep_2)
                          begin CsisatInterface.interpolate_csisat_raw(307495)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(307495)[14] (0.000000 sec.)
                          output: (-2*v_sep_print_array_1052_sep_290_sep_0 + 2*v_sep_print_array_1052_sep_290_sep_2) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(307494)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_print_array_1052_sep_290_sep_0 + 2*v_sep_print_array_1052_sep_290_sep_2) <= 0
                        after dnf conversion: (((-2*v_sep_print_array_1052_sep_290_sep_0 + 2*v_sep_print_array_1052_sep_290_sep_2) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(307493)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(307492)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(307483)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(307388)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(307387)[8] (0.002000 sec.)
              output: (<print_array_1052@290:2> <= <print_array_1052@290:0>)
            end InterpProver.interpolate_log(307386)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(307385)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(307384)[5] (0.002000 sec.)
        output:
          P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<print_array_1052@290:4>:int) =
          (<print_array_1052@290:2> <= <print_array_1052@290:0>)
      end ApronInterface.convex_hull_interpolate(307383)[4] (0.002000 sec.)
      begin HcSolver.check_validity(307797)[4]
        input:
          P[<fail_1893@305:0>](<fail_1893@305:0>:bool)|- bot
          
          P[<<print_array_1052@290:1>@293:0>](<k_make_array_u_1321@302:1>:int,<k_make_array_u_1321@302:0>:int),
          ((0 <= <k_make_array_u_1321@302:0>) &&
           ((<k_make_array_u_1321@302:1> > 0) &&
            ((<k_make_array_u_1321@302:0> >= <k_make_array_u_1321@302:1>) && <fail_1893@305:0>)))
          |- P[<fail_1893@305:0>](<fail_1893@305:0>:bool)
          
          P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
          (<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>)
          |- P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,
                                                 <<print_array_1052@290:1>@293:0>:int)
          
          
          ((<print_array_1052@290:4> = 0) &&
           ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
          |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,
                                         <print_array_1052@290:2>:int,
                                         <print_array_1052@290:4>:int)
          
           ((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
          |- P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,
                                   <bcopy_1046@283:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(307797)[4] (0.002000 sec.)
      solution:
        P[<fail_1893@305:0>](<fail_1893@305:0>:bool) = false
        P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,<<print_array_1052@290:1>@293:0>:int) =
        ((1 + <<print_array_1052@290:1>@293:0>) <= <print_array_1052@290:0>)
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<print_array_1052@290:4>:int) =
        (<print_array_1052@290:2> <= <print_array_1052@290:0>)
        P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,<bcopy_1046@283:4>:int) = true
    end GenHcSolver.solve(298955)[3] (0.046993 sec.)
    begin GenHcSolver.solve(308294)[3]
      Horn clauses:
        P[<fail_1893@305:0>](<fail_1893@305:0>:bool)|- bot
        
        P[<<print_array_1052@290:1>@293:0>](<k_make_array_u_1321@302:1>:int,<k_make_array_u_1321@302:0>:int),
        ((0 <= <k_make_array_u_1321@302:0>) &&
         ((<k_make_array_u_1321@302:1> > 0) &&
          ((<k_make_array_u_1321@302:0> >= <k_make_array_u_1321@302:1>) && <fail_1893@305:0>)))
        |- P[<fail_1893@305:0>](<fail_1893@305:0>:bool)
        
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
        (<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>)
        |- P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,
                                               <<print_array_1052@290:1>@293:0>:int)
        
        
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,
                                       <print_array_1052@290:4>:int)
        
         ((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
        |- P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,
                                 <bcopy_1046@283:4>:int)
      lower bounds:
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<print_array_1052@290:4>:int) =
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,<bcopy_1046@283:4>:int) =
        ((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
        P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,<<print_array_1052@290:1>@293:0>:int) =
        ((<<print_array_1052@290:1>@293:0> = 0) &&
         ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) && (<print_array_1052@290:0> > 0)))
        P[<fail_1893@305:0>](<fail_1893@305:0>:bool) = false
      upper bounds:
        P[<bcopy_1046@283:4>](var1086:int,var1087:int,var1088:int) = true
      begin GenHcSolver.classify_pids(310514)[4]
        output:
          [<bcopy_1046@283:4>]
      end GenHcSolver.classify_pids(310514)[4] (0.000000 sec.)
      lb:((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(310517)[4]
        lb:((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(310543)[5]
          ts: ((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
          
        end ExtFormula.Formula.case_analysis_boolean(310543)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(310552)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(310552)[5] (0.000000 sec.)
        lb':(((<bcopy_1046@283:1> + (-1 * <bcopy_1046@283:0>)) = 0) &&
             ((<bcopy_1046@283:4> = 0) && ((-1 + <bcopy_1046@283:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(310555)[5]
          begin InterpProver.interpolate_fresh(310556)[6]
            begin InterpProver.interpolate_log(310557)[7]
              input1: (((<bcopy_1046@283:1> + (-1 * <bcopy_1046@283:0>)) = 0) &&
                       ((<bcopy_1046@283:4> = 0) && ((-1 + <bcopy_1046@283:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(310558)[8]
                begin InterpProver.interpolate_simplify(310559)[9]
                  begin InterpProver.interpolate_quick(310613)[10]
                    
                  end InterpProver.interpolate_quick(310613)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(310559)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(310558)[8] (0.002000 sec.)
              output: true
            end InterpProver.interpolate_log(310557)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(310556)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(310555)[5] (0.002000 sec.)
        output:
          P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,<bcopy_1046@283:4>:int) = true
      end ApronInterface.convex_hull_interpolate(310517)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1893@305:0>](<fail_1893@305:0>:bool)|- bot
        
        P[<<print_array_1052@290:1>@293:0>](<k_make_array_u_1321@302:1>:int,<k_make_array_u_1321@302:0>:int),
        ((0 <= <k_make_array_u_1321@302:0>) &&
         ((<k_make_array_u_1321@302:1> > 0) &&
          ((<k_make_array_u_1321@302:0> >= <k_make_array_u_1321@302:1>) && <fail_1893@305:0>)))
        |- P[<fail_1893@305:0>](<fail_1893@305:0>:bool)
        
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
        (<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>)
        |- P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,
                                               <<print_array_1052@290:1>@293:0>:int)
        
        
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,
                                       <print_array_1052@290:4>:int)
      lower bounds:
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<print_array_1052@290:4>:int) =
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,<<print_array_1052@290:1>@293:0>:int) =
        ((<<print_array_1052@290:1>@293:0> = 0) &&
         ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) && (<print_array_1052@290:0> > 0)))
        P[<fail_1893@305:0>](<fail_1893@305:0>:bool) = false
      upper bounds:
        P[<fail_1893@305:0>](var1090:bool) = true
      begin GenHcSolver.classify_pids(312688)[4]
        output:
          [<fail_1893@305:0>]
      end GenHcSolver.classify_pids(312688)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(312691)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(312694)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(312694)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(312699)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(312699)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(312702)[5]
          begin InterpProver.interpolate_fresh(312703)[6]
            begin InterpProver.interpolate_log(312704)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(312705)[8]
                begin InterpProver.interpolate_simplify(312706)[9]
                  begin InterpProver.interpolate_quick(312721)[10]
                    
                  end InterpProver.interpolate_quick(312721)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(312725)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(312725)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(312706)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(312705)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(312704)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(312703)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(312702)[5] (0.000000 sec.)
        output:
          P[<fail_1893@305:0>](<fail_1893@305:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(312691)[4] (0.000000 sec.)
      Horn clauses:
        P[<<print_array_1052@290:1>@293:0>](<k_make_array_u_1321@302:1>:int,<k_make_array_u_1321@302:0>:int),
        ((<k_make_array_u_1321@302:0> >= <k_make_array_u_1321@302:1>) &&
         ((<k_make_array_u_1321@302:1> > 0) && (0 <= <k_make_array_u_1321@302:0>))) |- bot
        
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
        (<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>)
        |- P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,
                                               <<print_array_1052@290:1>@293:0>:int)
        
        
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,
                                       <print_array_1052@290:4>:int)
      lower bounds:
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<print_array_1052@290:4>:int) =
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,<<print_array_1052@290:1>@293:0>:int) =
        ((<<print_array_1052@290:1>@293:0> = 0) &&
         ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) && (<print_array_1052@290:0> > 0)))
      upper bounds:
        P[<<print_array_1052@290:1>@293:0>](var1091:int,var1092:int) =
        ((var1092 < var1091) || ((var1091 <= 0) || (0 > var1092)))
      begin GenHcSolver.classify_pids(315038)[4]
        output:
          [<<print_array_1052@290:1>@293:0>]
      end GenHcSolver.classify_pids(315038)[4] (0.000000 sec.)
      lb:((<<print_array_1052@290:1>@293:0> = 0) &&
          ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) && (<print_array_1052@290:0> > 0)))
      nub:(not
             ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) ||
              ((<print_array_1052@290:0> <= 0) || (0 > <<print_array_1052@290:1>@293:0>))))
      begin ApronInterface.convex_hull_interpolate(315041)[4]
        lb:((<<print_array_1052@290:1>@293:0> = 0) &&
            ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) && (<print_array_1052@290:0> > 0)))
        nub:(not
               ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) ||
                ((<print_array_1052@290:0> <= 0) || (0 > <<print_array_1052@290:1>@293:0>))))
        begin ExtFormula.Formula.case_analysis_boolean(315066)[5]
          ts: ((<<print_array_1052@290:1>@293:0> = 0) &&
               ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:0>) && (<print_array_1052@290:0> > 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(315066)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(315098)[5]
          ts: ((<<print_array_1052@290:1>@293:0> >= <print_array_1052@290:0>) &&
               ((<print_array_1052@290:0> > 0) && (0 <= <<print_array_1052@290:1>@293:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(315098)[5] (0.001000 sec.)
        lb':((<<print_array_1052@290:1>@293:0> = 0) && ((-1 + <print_array_1052@290:0>) >= 0))
        nub':(((<<print_array_1052@290:1>@293:0> + (-1 * <print_array_1052@290:0>)) >= 0) &&
              ((-1 + <print_array_1052@290:0>) >= 0))
        begin InterpProver.interpolate(315105)[5]
          begin InterpProver.interpolate_fresh(315106)[6]
            begin InterpProver.interpolate_log(315107)[7]
              input1: ((<<print_array_1052@290:1>@293:0> = 0) && ((-1 + <print_array_1052@290:0>) >= 0))
              input2: (((<<print_array_1052@290:1>@293:0> + (-1 * <print_array_1052@290:0>)) >= 0) &&
                       ((-1 + <print_array_1052@290:0>) >= 0))
              begin InterpProver.interpolate_check(315108)[8]
                begin InterpProver.interpolate_simplify(315109)[9]
                  begin InterpProver.interpolate_quick(315172)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(315181)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(315182)[12]
                        begin CsisatInterface.interpolate_csisat_log(315183)[13]
                          input1: (0 = v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0 & 1 <= v_sep_print_array_1052_sep_290_sep_0)
                          input2: (1 <= v_sep_print_array_1052_sep_290_sep_0 & v_sep_print_array_1052_sep_290_sep_0 <= v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(315184)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(315184)[14] (0.000000 sec.)
                          output: (-2*v_sep_print_array_1052_sep_290_sep_0 + 2*v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(315183)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_print_array_1052_sep_290_sep_0 + 2*v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_print_array_1052_sep_290_sep_0 + 2*v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(315182)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(315181)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(315172)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(315109)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(315108)[8] (0.002000 sec.)
              output: ((1 + <<print_array_1052@290:1>@293:0>) <= <print_array_1052@290:0>)
            end InterpProver.interpolate_log(315107)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(315106)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(315105)[5] (0.002000 sec.)
        output:
          P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,<<print_array_1052@290:1>@293:0>:int) =
          ((1 + <<print_array_1052@290:1>@293:0>) <= <print_array_1052@290:0>)
      end ApronInterface.convex_hull_interpolate(315041)[4] (0.003000 sec.)
      Horn clauses:
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
        ((<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>) &&
         ((1 + <<print_array_1052@290:1>@293:0>) > <print_array_1052@290:0>)) |- bot
        
        
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,
                                       <print_array_1052@290:4>:int)
      lower bounds:
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<print_array_1052@290:4>:int) =
        ((<print_array_1052@290:4> = 0) &&
         ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
      upper bounds:
        P[<print_array_1052@290:4>](var1093:int,var1094:int,var1095:int) =
        ((var1095 >= var1094) || ((1 + var1095) <= var1093))
      begin GenHcSolver.classify_pids(316803)[4]
        output:
          [<print_array_1052@290:4>]
      end GenHcSolver.classify_pids(316803)[4] (0.000000 sec.)
      lb:((<print_array_1052@290:4> = 0) &&
          ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
      nub:(not
             ((<print_array_1052@290:4> >= <print_array_1052@290:2>) ||
              ((1 + <print_array_1052@290:4>) <= <print_array_1052@290:0>)))
      begin ApronInterface.convex_hull_interpolate(316806)[4]
        lb:((<print_array_1052@290:4> = 0) &&
            ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
        nub:(not
               ((<print_array_1052@290:4> >= <print_array_1052@290:2>) ||
                ((1 + <print_array_1052@290:4>) <= <print_array_1052@290:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(316832)[5]
          ts: ((<print_array_1052@290:4> = 0) &&
               ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
          
        end ExtFormula.Formula.case_analysis_boolean(316832)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(316859)[5]
          ts: ((<print_array_1052@290:4> < <print_array_1052@290:2>) &&
               ((1 + <print_array_1052@290:4>) > <print_array_1052@290:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(316859)[5] (0.001000 sec.)
        lb':(((<print_array_1052@290:2> + (-1 * <print_array_1052@290:0>)) = 0) &&
             ((<print_array_1052@290:4> = 0) && ((-1 + <print_array_1052@290:0>) >= 0)))
        nub':(((<print_array_1052@290:4> + (-1 * <print_array_1052@290:0>)) >= 0) &&
              (((-1 + (-1 * <print_array_1052@290:4>)) + <print_array_1052@290:2>) >= 0))
        begin InterpProver.interpolate(316867)[5]
          begin InterpProver.interpolate_fresh(316868)[6]
            begin InterpProver.interpolate_log(316869)[7]
              input1: (((<print_array_1052@290:2> + (-1 * <print_array_1052@290:0>)) = 0) &&
                       ((<print_array_1052@290:4> = 0) && ((-1 + <print_array_1052@290:0>) >= 0)))
              input2: (((<print_array_1052@290:4> + (-1 * <print_array_1052@290:0>)) >= 0) &&
                       (((-1 + (-1 * <print_array_1052@290:4>)) + <print_array_1052@290:2>) >= 0))
              begin InterpProver.interpolate_check(316870)[8]
                begin InterpProver.interpolate_simplify(316871)[9]
                  begin InterpProver.interpolate_quick(316972)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(316981)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(316982)[12]
                        begin CsisatInterface.interpolate_csisat_log(316983)[13]
                          input1: (0 = v_sep_print_array_1052_sep_290_sep_4 & v_sep_print_array_1052_sep_290_sep_0 = v_sep_print_array_1052_sep_290_sep_2 & 1 <= v_sep_print_array_1052_sep_290_sep_0)
                          input2: (v_sep_print_array_1052_sep_290_sep_0 <= v_sep_print_array_1052_sep_290_sep_4 & (1 + v_sep_print_array_1052_sep_290_sep_4) <= v_sep_print_array_1052_sep_290_sep_2)
                          begin CsisatInterface.interpolate_csisat_raw(316984)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(316984)[14] (0.000999 sec.)
                          output: (-2*v_sep_print_array_1052_sep_290_sep_0 + 2*v_sep_print_array_1052_sep_290_sep_2) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(316983)[13] (0.000999 sec.)
                        after simplification: (-2*v_sep_print_array_1052_sep_290_sep_0 + 2*v_sep_print_array_1052_sep_290_sep_2) <= 0
                        after dnf conversion: (((-2*v_sep_print_array_1052_sep_290_sep_0 + 2*v_sep_print_array_1052_sep_290_sep_2) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(316982)[12] (0.000999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(316981)[11] (0.000999 sec.)
                    
                  end InterpProver.interpolate_quick(316972)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(316871)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(316870)[8] (0.001999 sec.)
              output: (<print_array_1052@290:2> <= <print_array_1052@290:0>)
            end InterpProver.interpolate_log(316869)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(316868)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(316867)[5] (0.001999 sec.)
        output:
          P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<print_array_1052@290:4>:int) =
          (<print_array_1052@290:2> <= <print_array_1052@290:0>)
      end ApronInterface.convex_hull_interpolate(316806)[4] (0.002999 sec.)
      begin HcSolver.check_validity(317286)[4]
        input:
          P[<fail_1893@305:0>](<fail_1893@305:0>:bool)|- bot
          
          P[<<print_array_1052@290:1>@293:0>](<k_make_array_u_1321@302:1>:int,<k_make_array_u_1321@302:0>:int),
          ((0 <= <k_make_array_u_1321@302:0>) &&
           ((<k_make_array_u_1321@302:1> > 0) &&
            ((<k_make_array_u_1321@302:0> >= <k_make_array_u_1321@302:1>) && <fail_1893@305:0>)))
          |- P[<fail_1893@305:0>](<fail_1893@305:0>:bool)
          
          P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
          (<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>)
          |- P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,
                                                 <<print_array_1052@290:1>@293:0>:int)
          
          
          ((<print_array_1052@290:4> = 0) &&
           ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
          |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,
                                         <print_array_1052@290:2>:int,
                                         <print_array_1052@290:4>:int)
          
           ((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
          |- P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,
                                   <bcopy_1046@283:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(317286)[4] (0.003000 sec.)
      solution:
        P[<fail_1893@305:0>](<fail_1893@305:0>:bool) = false
        P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,<<print_array_1052@290:1>@293:0>:int) =
        ((1 + <<print_array_1052@290:1>@293:0>) <= <print_array_1052@290:0>)
        P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<print_array_1052@290:4>:int) =
        (<print_array_1052@290:2> <= <print_array_1052@290:0>)
        P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,<bcopy_1046@283:4>:int) = true
    end GenHcSolver.solve(308294)[3] (0.052992 sec.)
    begin YhornInterface.solve(317783)[3]
      begin HcSolver.solve_ub(317784)[4]
        encoded:
          P[<fail_1893@305:0>](<fail_1893@305:0>:int)|- bot
          
          P[<<print_array_1052@290:1>@293:0>](<k_make_array_u_1321@302:1>:int,<k_make_array_u_1321@302:0>:int),
          ((0 <= <k_make_array_u_1321@302:0>) &&
           ((<k_make_array_u_1321@302:1> > 0) &&
            ((<k_make_array_u_1321@302:0> >= <k_make_array_u_1321@302:1>) && (<fail_1893@305:0> = 1))))
          |- P[<fail_1893@305:0>](<fail_1893@305:0>:int)
          
          P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
          (<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>)
          |- P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,
                                                 <<print_array_1052@290:1>@293:0>:int)
          
          
          ((<print_array_1052@290:4> = 0) &&
           ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
          |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,
                                         <print_array_1052@290:2>:int,
                                         <print_array_1052@290:4>:int)
          
           ((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
          |- P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,
                                   <bcopy_1046@283:4>:int)
        input to Yhorn:
          P[<fail_1893@305:0>](<fail_1893@305:0>:int)|- bot
          
          P[<<print_array_1052@290:1>@293:0>](<k_make_array_u_1321@302:1>:int,<k_make_array_u_1321@302:0>:int),
          ((<k_make_array_u_1321@302:0> >= <k_make_array_u_1321@302:1>) &&
           ((<k_make_array_u_1321@302:1> > 0) && ((0 <= <k_make_array_u_1321@302:0>) && (<fail_1893@305:0> = 1))))
          |- P[<fail_1893@305:0>](<fail_1893@305:0>:int)
          
          P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
          (<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>)
          |- P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,
                                                 <<print_array_1052@290:1>@293:0>:int)
          
          
          ((<print_array_1052@290:0> = <print_array_1052@290:2>) &&
           ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:4> = 0)))
          |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,
                                         <print_array_1052@290:2>:int,
                                         <print_array_1052@290:4>:int)
          
           ((<bcopy_1046@283:0> = <bcopy_1046@283:1>) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:4> = 0)))
          |- P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,
                                   <bcopy_1046@283:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1893_sep_305_sep_0($700)) -> 1=0.
(($700-1=0) & (-$701<=0) & ($702>0) & ($701-$702>=0)) & (v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0($702,$701)) -> v_sep_fail_1893_sep_305_sep_0($700).
($703-$704<0) & (v_sep_print_array_1052_sep_290_sep_4($705,$704,$703)) -> v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0($705,$703).
($706=0) & ($705>0) & (-$704+$705=0) -> v_sep_print_array_1052_sep_290_sep_4($705,$704,$706).
($707=0) & ($708>0) & ($708-$709=0) -> v_sep_bcopy_1046_sep_283_sep_4($708,$709,$707).


v_sep_bcopy_1046_sep_283_sep_4: X
v_sep_fail_1893_sep_305_sep_0: X
v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0: X
v_sep_print_array_1052_sep_290_sep_4: X
.....
v_sep_bcopy_1046_sep_283_sep_4: X
v_sep_fail_1893_sep_305_sep_0: X
v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0: X
v_sep_print_array_1052_sep_290_sep_4: X
....
v_sep_bcopy_1046_sep_283_sep_4: X
v_sep_fail_1893_sep_305_sep_0: X
v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0: X
v_sep_print_array_1052_sep_290_sep_4: X
.....
v_sep_bcopy_1046_sep_283_sep_4: X
v_sep_fail_1893_sep_305_sep_0: X
v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0: X
v_sep_print_array_1052_sep_290_sep_4: X
.....(0=0) & (v_sep_fail_1893_sep_305_sep_0($700)) -> 1=0.
(($700-1=0) & (-$701<=0) & ($702>0) & ($701-$702>=0)) & (v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0($702,$701)) -> v_sep_fail_1893_sep_305_sep_0($700).
($703-$704<0) & (v_sep_print_array_1052_sep_290_sep_4($705,$704,$703)) -> v_sep_print_array_1052_sep_290_sep_1_sep_293_sep_0($705,$703).
($706=0) & ($705>0) & (-$704+$705=0) -> v_sep_print_array_1052_sep_290_sep_4($705,$704,$706).
($707=0) & ($708>0) & ($708-$709=0) -> v_sep_bcopy_1046_sep_283_sep_4($708,$709,$707).

        solution:
          P[<bcopy_1046@283:4>]($725:int,$727:int,$729:int) = true
          P[<fail_1893@305:0>]($710:bool) = false
          P[<<print_array_1052@290:1>@293:0>]($713:int,$715:int) = ((1 + $715) <= $713)
          P[<print_array_1052@290:4>]($718:int,$720:int,$722:int) = ((1 + $722) <= $718)
        
      end HcSolver.solve_ub(317784)[4] (0.027995 sec.)
      begin HcSolver.check_validity(318117)[4]
        input:
          P[<fail_1893@305:0>](<fail_1893@305:0>:bool)|- bot
          
          P[<<print_array_1052@290:1>@293:0>](<k_make_array_u_1321@302:1>:int,<k_make_array_u_1321@302:0>:int),
          ((0 <= <k_make_array_u_1321@302:0>) &&
           ((<k_make_array_u_1321@302:1> > 0) &&
            ((<k_make_array_u_1321@302:0> >= <k_make_array_u_1321@302:1>) && <fail_1893@305:0>)))
          |- P[<fail_1893@305:0>](<fail_1893@305:0>:bool)
          
          P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,<print_array_1052@290:2>:int,<<print_array_1052@290:1>@293:0>:int),
          (<<print_array_1052@290:1>@293:0> < <print_array_1052@290:2>)
          |- P[<<print_array_1052@290:1>@293:0>](<print_array_1052@290:0>:int,
                                                 <<print_array_1052@290:1>@293:0>:int)
          
          
          ((<print_array_1052@290:4> = 0) &&
           ((<print_array_1052@290:0> > 0) && (<print_array_1052@290:0> = <print_array_1052@290:2>)))
          |- P[<print_array_1052@290:4>](<print_array_1052@290:0>:int,
                                         <print_array_1052@290:2>:int,
                                         <print_array_1052@290:4>:int)
          
           ((<bcopy_1046@283:4> = 0) && ((<bcopy_1046@283:0> > 0) && (<bcopy_1046@283:0> = <bcopy_1046@283:1>)))
          |- P[<bcopy_1046@283:4>](<bcopy_1046@283:0>:int,<bcopy_1046@283:1>:int,
                                   <bcopy_1046@283:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(318117)[4] (0.004000 sec.)
      solution:
        P[<bcopy_1046@283:4>]($725:int,$727:int,$729:int) = true
        P[<fail_1893@305:0>]($710:bool) = false
        P[<<print_array_1052@290:1>@293:0>]($713:int,$715:int) = ((1 + $715) <= $713)
        P[<print_array_1052@290:4>]($718:int,$720:int,$722:int) = ((1 + $722) <= $718)
    end YhornInterface.solve(317783)[3] (0.031995 sec.)
    
  end RefTypeInfer.infer_etrs(296408)[2] (0.594911 sec.)
  refinement types:
    main_1884: X
    f_1891: v1:int -> X
    main_1057: v1:int -> (v2:unit -> X) -> X
    f_1042: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:unit -> X) -> X
    bcopy_1046: v1:int ->
                v2:int ->
                (v3:int -> (v4:int -> X) -> X) ->
                (v7:int -> (v8:int -> X) -> X) -> v11:int -> ((v12:int -> (v13:int -> X) -> X) -> X) -> X
    f_f_1890: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:unit -> X) -> (v8:int -> (v9:int -> X) -> X) -> X
    print_array_1052: v1:int ->
                      (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) ->
                      v6:int -> (v7:int -> (v8:int -> X) -> X) -> v11:{v11:int | (v6 <= v1)} -> (v12:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1321: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1893: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var1151:int ->
            var1150:int ->
            var1149:int ->
            var1148:int -> (var1147:int -> (var1146:int -> X) -> X) -> var1143:int -> (var1142:int -> X) -> X
    f_1892: var1154:int -> var1153:unit -> X
    f_bcopy_1886: var1172:int ->
                  var1171:int ->
                  var1170:int ->
                  (var1169:int -> (var1168:int -> X) -> X) ->
                  ((var1165:int -> (var1164:int -> X) -> X) -> X) ->
                  (var1160:int -> (var1159:int -> X) -> X) -> var1156:int -> X
    f_bcopy_1887: var1190:int ->
                  var1189:int ->
                  var1188:int ->
                  var1187:int ->
                  ((var1186:int -> (var1185:int -> X) -> X) -> X) ->
                  (var1181:int -> (var1180:int -> X) -> X) -> (var1177:int -> (var1176:int -> X) -> X) -> X
    f_print_array_1888: var1205:int ->
                        var1204:int ->
                        var1203:int ->
                        (var1202:int -> (var1201:int -> X) -> X) ->
                        (var1198:int -> (var1197:int -> X) -> X) -> (var1194:unit -> X) -> var1192:int -> X
    f_print_array_1889: var1221:int ->
                        var1220:int ->
                        var1219:int ->
                        var1218:int ->
                        (var1217:int -> (var1216:int -> X) -> X) ->
                        (var1213:int -> (var1212:int -> X) -> X) -> (var1209:unit -> X) -> var1207:unit -> X
    f_update_1885: var1235:int ->
                   var1234:int ->
                   var1233:int ->
                   (var1232:int -> (var1231:int -> X) -> X) ->
                   ((var1228:int -> (var1227:int -> X) -> X) -> X) -> var1223:int -> X
    k_make_array_u_1332: var1241:int -> var1240:int -> (var1239:int -> X) -> var1237:unit -> X
    print_int_1040: var1245:int -> (var1244:unit -> X) -> X
    update_1033: var1258:int ->
                 var1257:int ->
                 (var1256:int -> (var1255:int -> X) -> X) ->
                 var1252:int -> ((var1251:int -> (var1250:int -> X) -> X) -> X) -> X
  abstraction types:
    main_1884: X
    f_1891: v1:int -> X
    main_1057: v1:int -> (v2:unit -> X) -> X
    f_1042: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:unit -> X) -> X
    bcopy_1046: v1:int ->
                v2:int ->
                (v3:int -> (v4:int -> X) -> X) ->
                (v7:int -> (v8:int -> X) -> X) -> v11:int -> ((v12:int -> (v13:int -> X) -> X) -> X) -> X
    f_f_1890: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:unit -> X) -> (v8:int -> (v9:int -> X) -> X) -> X
    print_array_1052: v1:int ->
                      (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) ->
                      v6:int -> (v7:int -> (v8:int -> X) -> X) -> v11:int[v11 -> (
                                                                    v6 <= v1)] -> (v12:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1321: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1893: v1:bool -> (v2:unit -> X) -> X
    a_1038: var1151:int ->
            var1150:int ->
            var1149:int ->
            var1148:int -> (var1147:int -> (var1146:int -> X) -> X) -> var1143:int -> (var1142:int -> X) -> X
    f_1892: var1154:int -> var1153:unit -> X
    f_bcopy_1886: var1172:int ->
                  var1171:int ->
                  var1170:int ->
                  (var1169:int -> (var1168:int -> X) -> X) ->
                  ((var1165:int -> (var1164:int -> X) -> X) -> X) ->
                  (var1160:int -> (var1159:int -> X) -> X) -> var1156:int -> X
    f_bcopy_1887: var1190:int ->
                  var1189:int ->
                  var1188:int ->
                  var1187:int ->
                  ((var1186:int -> (var1185:int -> X) -> X) -> X) ->
                  (var1181:int -> (var1180:int -> X) -> X) -> (var1177:int -> (var1176:int -> X) -> X) -> X
    f_print_array_1888: var1205:int ->
                        var1204:int ->
                        var1203:int ->
                        (var1202:int -> (var1201:int -> X) -> X) ->
                        (var1198:int -> (var1197:int -> X) -> X) -> (var1194:unit -> X) -> var1192:int -> X
    f_print_array_1889: var1221:int ->
                        var1220:int ->
                        var1219:int ->
                        var1218:int ->
                        (var1217:int -> (var1216:int -> X) -> X) ->
                        (var1213:int -> (var1212:int -> X) -> X) -> (var1209:unit -> X) -> var1207:unit -> X
    f_update_1885: var1235:int ->
                   var1234:int ->
                   var1233:int ->
                   (var1232:int -> (var1231:int -> X) -> X) ->
                   ((var1228:int -> (var1227:int -> X) -> X) -> X) -> var1223:int -> X
    k_make_array_u_1332: var1241:int -> var1240:int -> (var1239:int -> X) -> var1237:unit -> X
    print_int_1040: var1245:int -> (var1244:unit -> X) -> X
    update_1033: var1258:int ->
                 var1257:int ->
                 (var1256:int -> (var1255:int -> X) -> X) ->
                 var1252:int -> ((var1251:int -> (var1250:int -> X) -> X) -> X) -> X
  
end AbsTypeInfer.refine(296407)[1] (0.603909 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 6)::
Main: main_1884
  main_1884 -> (rand_int f_1891)
  a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 when (i_1034 = j_1039) -> (k_update_a_1401 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1386 des_1036 j_1039 k_update_a_1401 when (
      not (i_1034 = j_1039)) -> (des_1036 i_1034 k_update_a_1401)
  bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 when (i_1050 >= m_1047) -> (k_f_bcopy_1535 des_1049)
  bcopy_1046 m_1043 m_1047 src_1048 des_1049 i_1050 k_f_bcopy_1535 when (
      not (i_1050 >= m_1047)) -> (src_1048 i_1050 (f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048))
  f_1042 m_1043 src_1044 des_1045 k_f_1476 ->
      (bcopy_1046 m_1043 m_1043 src_1044 des_1045 0 (f_f_1890 m_1043 des_1045 k_f_1476))
  f_1891 x_1859 -> (main_1057 x_1859 (f_1892 x_1859))
  f_1892 x_1859 x_1856 -> end
  f_bcopy_1886 i_1050 m_1043 m_1047 des_1049 k_f_bcopy_1535 src_1048 x_1591 ->
      (update_1033 i_1050 m_1047 des_1049 x_1591 (f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048))
  f_bcopy_1887 i_1050 m_1043 m_1047 x_1591 k_f_bcopy_1535 src_1048 x_1547 ->
      (bcopy_1046 m_1043 m_1047 src_1048 x_1547 (i_1050 + 1) k_f_bcopy_1535)
  f_f_1890 m_1043 des_1045 k_f_1476 x_1715 -> (print_array_1052 m_1043 des_1045 m_1043 x_1715 0 k_f_1476)
  f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664 x_1687 ->
      (print_int_1040 x_1687 (f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664))
  f_print_array_1889 i_1055 m_1043 m_1053 x_1687 array_1054 des_1045 k_f_print_array_1664 x_1667 ->
      (print_array_1052 m_1043 des_1045 m_1053 array_1054 (i_1055 + 1) k_f_print_array_1664)
  f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380 x_1386 ->
      (k_update_1380 (a_1038 i_1034 n_1035 x_1037 x_1386 des_1036))
  fail_1893 b k -> {fail} => (k ())
  k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 when b_1333 ->
      (k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 ())
  k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 b_1333 when (not b_1333) ->
      (fail_1893 true (k_make_array_u_1332 i_1032 n_1031 k_make_array_1315))
  k_make_array_u_1332 i_1032 n_1031 k_make_array_1315 x_1318 -> (k_make_array_1315 0)
  main_1057 n_1058 k_main_1787 when (n_1058 > 0) ->
      (f_1042 n_1058 (make_array_1030 n_1058) (make_array_1030 n_1058) k_main_1787)
  main_1057 n_1058 k_main_1787 when (not (n_1058 > 0)) -> (k_main_1787 ())
  make_array_1030 n_1031 i_1032 k_make_array_1315 when (0 <= i_1032) ->
      (k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1315 when (not (0 <= i_1032)) ->
      (k_make_array_u_1321 i_1032 n_1031 k_make_array_1315 false)
  print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 when (
      i_1055 >= m_1053) -> (k_f_print_array_1664 ())
  print_array_1052 m_1043 des_1045 m_1053 array_1054 i_1055 k_f_print_array_1664 when (
      not (i_1055 >= m_1053)) ->
      (des_1045 i_1055 (f_print_array_1888 i_1055 m_1043 m_1053 array_1054 des_1045 k_f_print_array_1664))
  print_int_1040 n_1041 k_print_int_1432 -> (k_print_int_1432 ())
  update_1033 i_1034 n_1035 des_1036 x_1037 k_update_1380 ->
      (des_1036 i_1034 (f_update_1885 i_1034 n_1035 x_1037 des_1036 k_update_1380))
Types:
  main_1884 : X
  bcopy_1046 : (x_1:int ->
                x_2:int ->
                (x_4:int[x_1 >= x_4 + 1; x_4 >= 0] -> (int -> X) -> X) ->
                (x_10:int[x_10 >= 0; x_1 >= x_10 + 1] -> (int -> X) -> X) ->
                x_15:int[x_15 >= 0; x_1 >= x_2] -> ((int -> (int -> X) -> X) -> X) -> X)
  fail_1893 : (x_1:bool[x_1] -> (unit -> X) -> X)
  print_array_1052 : (x_1:int ->
                      (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                      x_8:int -> (int -> (int -> X) -> X) -> x_15:int[x_1 >= x_8; x_15 >= 0] -> (unit -> X) -> X)
  
(6-1) Abstracting ... DONE!

(6-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  bcopy: (((x_2:int ->
                (({x_8:int | x_8 >= 0 && x_1 >= x_8 + 1} -> int) ->
                     ((int -> int) -> ({x_5:int | x_1 >= x_2 && x_5 >= 0} -> Top)))) where x_1:int) /\
          ((x_11:int ->
                (({x_17:int | x_17 >= 0 && x_10 >= x_17 + 1} -> int) ->
                     (({x_15:int | x_10 >= x_15 + 1 && x_15 >= 0} -> int) ->
                          ({x_14:int | x_10 >= x_11 && x_14 >= 0} -> Top)))) where x_10:int))
  print_array: ((x_2:int -> (Top -> ({x_4:int | x_4 >= 0 && x_1 >= x_2} -> unit))) where x_1:int)

cycles: 6
total: 4.787 sec
  abst: 0.138 sec
  mc: 0.124 sec
  refine: 3.786 sec
    exparam: 1.542 sec
