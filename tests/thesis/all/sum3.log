MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi sum3.ml

parsed::
 let rec sum_1030 n_1031 = if n_1031 <= 0 then
                             0
                           else
                             n_1031 + sum_1030 (n_1031 - 1) 
 in
 let main_1032 n_1033 = if (3 * n_1033) - 3 <= sum_1030 n_1033 then
                          ()
                        else
                          {fail} () 
 in
   ()

set_target::
 let rec sum_1030 n_1031 = if n_1031 <= 0 then
                             0
                           else
                             n_1031 + sum_1030 (n_1031 - 1) 
 in
 let main_1032 n_1033 = if (3 * n_1033) - 3 <= sum_1030 n_1033 then
                          ()
                        else
                          {fail} () 
 in
 let main_1052 = let arg1_1051 = rand_int () 
                 in
                   main_1032 arg1_1051 
 in
   ()

CPS::
 let rec sum_1030 (n_1031:int) (k_sum_1077:(int -> X)) =
   if n_1031 <= 0 then
     k_sum_1077 0
   else
     sum_1030 (n_1031 - 1) (fun x_1081 -> k_sum_1077 (n_1031 + x_1081)) 
 in
 let main_1032 (n_1033:int) (k_main_1109:(unit -> X)) =
   sum_1030 n_1033 (fun x_1113 -> (if (3 * n_1033) - 3 <= x_1113 then
                                     k_main_1109 ()
                                   else
                                     {|fail|} () k_main_1109)) 
 in
   rand_int_cps () (fun x_1140 -> main_1032 x_1140 (fun x_1137 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1165
  main_1165 -> (rand_int f_1168)
  f_1168 x_1140 -> (main_1032 x_1140 (f_1169 x_1140))
  f_1169 x_1140 x_1137 -> end
  f_main_1167 n_1033 k_main_1109 x_1113 when (((3 * n_1033) - 3) <= x_1113) -> (k_main_1109 ())
  f_main_1167 n_1033 k_main_1109 x_1113 when (not (((3 * n_1033) - 3) <= x_1113)) -> (fail_1170 true k_main_1109)
  f_sum_1166 n_1031 k_sum_1077 x_1081 -> (k_sum_1077 (n_1031 + x_1081))
  fail_1170 b k -> {fail} => (k ())
  main_1032 n_1033 k_main_1109 -> (sum_1030 n_1033 (f_main_1167 n_1033 k_main_1109))
  sum_1030 n_1031 k_sum_1077 when (n_1031 <= 0) -> (k_sum_1077 0)
  sum_1030 n_1031 k_sum_1077 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1166 n_1031 k_sum_1077))
Types:
  main_1165 : X
  fail_1170 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1165 ... --> 
  f_1168 ... --> 
  main_1032 ... --> 
  sum_1030 [1/2] ... --> 
  f_main_1167 [2/2] ... --> 
  fail_1170 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(96)[1]
  program:
    main_1165  | true = ((Random.int 0) f_1168)
    f_1168 x_1140 | true = (main_1032 x_1140
                                      (f_1169 x_1140))
    f_1169 x_1140 x_1137 | true = end
    f_main_1167 n_1033 k_main_1109 x_1113 | (((3 * n_1033) - 3) <= x_1113) = (
    k_main_1109 ())
    f_main_1167 n_1033 k_main_1109 x_1113 | (not (((3 * n_1033) - 3) <= x_1113)) = (
    fail_1170 true
              k_main_1109)
    f_sum_1166 n_1031 k_sum_1077 x_1081 | true = (k_sum_1077 (n_1031 + x_1081))
    fail_1170 b k | true = (fail ())
    main_1032 n_1033 k_main_1109 | true = (sum_1030 n_1033
                                                    (f_main_1167 n_1033
                                                                 k_main_1109))
    sum_1030 n_1031 k_sum_1077 | (n_1031 <= 0) = (k_sum_1077 0)
    sum_1030 n_1031 k_sum_1077 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1166 n_1031
                                                                    k_sum_1077))
    main_1165:X
    f_1168:int -> X
    f_1169:int -> unit -> X
    f_main_1167:int -> (unit -> X) -> int -> X
    f_sum_1166:int -> (int -> X) -> int -> X
    fail_1170:bool -> (unit -> X) -> X
    main_1032:int -> (unit -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: f_1168,f_1169,f_main_1167,f_sum_1166,main_1032
  counterexample: 0:0:0:0:1:0
  error traces:
    [true.nop(<f_1168@4:0> = var2)
     [true.(<main_1032@6:0> = <f_1168@4:0>)
      [true.(<sum_1030@8:0> = <main_1032@6:0>)
       [(<sum_1030@8:0> <= 0).(<<sum_1030@8:1>@11:0> = 0)
        [true.((<f_main_1167@13:0> = <main_1032@6:0>) && (<f_main_1167@13:2> = <<sum_1030@8:1>@11:0>))
         [(not (((3 * <f_main_1167@13:0>) - 3) <= <f_main_1167@13:2>)).(<fail_1170@16:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(97)[2]
    horn clauses:
      P[<fail_1170@16:0>](<fail_1170@16:0>:bool)|- bot
      
      P[<f_main_1167@13:2>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
      (((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) && <fail_1170@16:0>)
      |- P[<fail_1170@16:0>](<fail_1170@16:0>:bool)
      
      P[<main_1032@6:0>](<f_main_1167@13:0>:int),
      P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int)|- P[<f_main_1167@13:2>](
      <f_main_1167@13:0>:int,<f_main_1167@13:2>:int)
      
      P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
      |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
      
      P[<main_1032@6:0>](<sum_1030@8:0>:int)|- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
      
      P[<f_1168@4:0>](<main_1032@6:0>:int)|- P[<main_1032@6:0>](<main_1032@6:0>:int)
      
      |- P[<f_1168@4:0>](<f_1168@4:0>:int)
    call trees:
      <main_1165@1>
        <f_1168@4>
          <main_1032@6>
            <sum_1030@8>
            </<sum_1030@8:1>@11>
            <f_main_1167@13>
              <fail_1170@16>
    inlined horn clauses:
      P[<fail_1170@16:0>](<fail_1170@16:0>:bool)|- bot
      
      P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
      (((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) && <fail_1170@16:0>)
      |- P[<fail_1170@16:0>](<fail_1170@16:0>:bool)
      
      P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
      |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
      
      |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
    begin ParamSubstInfer.infer(952)[3]
      
    end ParamSubstInfer.infer(952)[3] (0.012998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(954)[3]
      
    end RefTypeInfer.elim_coeffs(954)[3] (0.000000 sec.)
    begin GenHcSolver.solve(1123)[3]
      Horn clauses:
        P[<fail_1170@16:0>](<fail_1170@16:0>:bool)|- bot
        
        P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
        (((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) && <fail_1170@16:0>)
        |- P[<fail_1170@16:0>](<fail_1170@16:0>:bool)
        
        P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
        |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
        
        |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
      lower bounds:
        P[<sum_1030@8:0>](<sum_1030@8:0>:int) = true
        P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int) =
        ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
        P[<fail_1170@16:0>](<fail_1170@16:0>:bool) = false
      upper bounds:
        P[<fail_1170@16:0>](var4:bool) = true
      begin GenHcSolver.classify_pids(2073)[4]
        output:
          [<fail_1170@16:0>]
      end GenHcSolver.classify_pids(2073)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2076)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2077)[5]
          begin InterpProver.interpolate_fresh(2078)[6]
            begin InterpProver.interpolate_log(2079)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2080)[8]
                begin InterpProver.interpolate_simplify(2081)[9]
                  begin InterpProver.interpolate_quick(2094)[10]
                    
                  end InterpProver.interpolate_quick(2094)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2098)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2098)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2081)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2080)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2079)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2078)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2077)[5] (0.000000 sec.)
        output:
          P[<fail_1170@16:0>](<fail_1170@16:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2076)[4] (0.000000 sec.)
      Horn clauses:
        P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
        ((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) |- bot
        
        P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
        |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
        
        |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
      lower bounds:
        P[<sum_1030@8:0>](<sum_1030@8:0>:int) = true
        P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int) =
        ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
      upper bounds:
        P[<<sum_1030@8:1>@11:0>](var5:int,var6:int) = ((3 * var5) <= (3 + var6))
      begin GenHcSolver.classify_pids(3096)[4]
        output:
          [<<sum_1030@8:1>@11:0>]
      end GenHcSolver.classify_pids(3096)[4] (0.000000 sec.)
      lb:((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
      nub:(not ((3 * <sum_1030@8:0>) <= (3 + <<sum_1030@8:1>@11:0>)))
      begin ApronInterface.convex_hull_interpolate(3099)[4]
        lb:((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
        nub:(not ((3 * <sum_1030@8:0>) <= (3 + <<sum_1030@8:1>@11:0>)))
        lb':((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
        nub':(not ((3 * <sum_1030@8:0>) <= (3 + <<sum_1030@8:1>@11:0>)))
        begin InterpProver.interpolate(3100)[5]
          begin InterpProver.interpolate_fresh(3101)[6]
            begin InterpProver.interpolate_log(3102)[7]
              input1: ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
              input2: (not ((3 * <sum_1030@8:0>) <= (3 + <<sum_1030@8:1>@11:0>)))
              begin InterpProver.interpolate_check(3103)[8]
                begin InterpProver.interpolate_simplify(3104)[9]
                  begin InterpProver.interpolate_quick(3137)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(3146)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(3147)[12]
                        begin CsisatInterface.interpolate_csisat_log(3148)[13]
                          input1: (0 = v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0 & v_sep_sum_1030_sep_8_sep_0 <= 0)
                          input2: (4 + v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0) <= 3*v_sep_sum_1030_sep_8_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(3149)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(3149)[14] (0.000000 sec.)
                          output: (-0.5*v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0 + 1.5*v_sep_sum_1030_sep_8_sep_0) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(3148)[13] (0.000000 sec.)
                        after simplification: (-1*v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0 + 3*v_sep_sum_1030_sep_8_sep_0) <= 0
                        after dnf conversion: (((-1*v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0 + 3*v_sep_sum_1030_sep_8_sep_0) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(3147)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(3146)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(3137)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(3104)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(3103)[8] (0.001000 sec.)
              output: ((3 * <sum_1030@8:0>) <= <<sum_1030@8:1>@11:0>)
            end InterpProver.interpolate_log(3102)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(3101)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(3100)[5] (0.001000 sec.)
        output:
          P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int) =
          ((3 * <sum_1030@8:0>) <= <<sum_1030@8:1>@11:0>)
      end ApronInterface.convex_hull_interpolate(3099)[4] (0.001000 sec.)
      Horn clauses:
        |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
      lower bounds:
        P[<sum_1030@8:0>](<sum_1030@8:0>:int) = true
      upper bounds:
        P[<sum_1030@8:0>](var7:int) = true
      begin GenHcSolver.classify_pids(3500)[4]
        output:
          [<sum_1030@8:0>]
      end GenHcSolver.classify_pids(3500)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(3503)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(3504)[5]
          begin InterpProver.interpolate_fresh(3505)[6]
            begin InterpProver.interpolate_log(3506)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(3507)[8]
                begin InterpProver.interpolate_simplify(3508)[9]
                  begin InterpProver.interpolate_quick(3521)[10]
                    
                  end InterpProver.interpolate_quick(3521)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3508)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3507)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(3506)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(3505)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(3504)[5] (0.000000 sec.)
        output:
          P[<sum_1030@8:0>](<sum_1030@8:0>:int) = true
      end ApronInterface.convex_hull_interpolate(3503)[4] (0.001000 sec.)
      begin HcSolver.check_validity(3576)[4]
        input:
          P[<fail_1170@16:0>](<fail_1170@16:0>:bool)|- bot
          
          P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
          (((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) && <fail_1170@16:0>)
          |- P[<fail_1170@16:0>](<fail_1170@16:0>:bool)
          
          P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
          |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
          
          |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3576)[4] (0.001000 sec.)
      solution:
        P[<fail_1170@16:0>](<fail_1170@16:0>:bool) = false
        P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int) =
        ((3 * <sum_1030@8:0>) <= <<sum_1030@8:1>@11:0>)
        P[<sum_1030@8:0>](<sum_1030@8:0>:int) = true
    end GenHcSolver.solve(1123)[3] (0.013998 sec.)
    begin GenHcSolver.solve(3829)[3]
      Horn clauses:
        P[<fail_1170@16:0>](<fail_1170@16:0>:bool)|- bot
        
        P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
        (((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) && <fail_1170@16:0>)
        |- P[<fail_1170@16:0>](<fail_1170@16:0>:bool)
        
        P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
        |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
        
        |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
      lower bounds:
        P[<sum_1030@8:0>](<sum_1030@8:0>:int) = true
        P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int) =
        ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
        P[<fail_1170@16:0>](<fail_1170@16:0>:bool) = false
      upper bounds:
        P[<fail_1170@16:0>](var9:bool) = true
      begin GenHcSolver.classify_pids(4779)[4]
        output:
          [<fail_1170@16:0>]
      end GenHcSolver.classify_pids(4779)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(4782)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(4785)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4785)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(4790)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4790)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(4793)[5]
          begin InterpProver.interpolate_fresh(4794)[6]
            begin InterpProver.interpolate_log(4795)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(4796)[8]
                begin InterpProver.interpolate_simplify(4797)[9]
                  begin InterpProver.interpolate_quick(4812)[10]
                    
                  end InterpProver.interpolate_quick(4812)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(4816)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(4816)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4797)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(4796)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(4795)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(4794)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(4793)[5] (0.001000 sec.)
        output:
          P[<fail_1170@16:0>](<fail_1170@16:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(4782)[4] (0.001000 sec.)
      Horn clauses:
        P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
        ((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) |- bot
        
        P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
        |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
        
        |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
      lower bounds:
        P[<sum_1030@8:0>](<sum_1030@8:0>:int) = true
        P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int) =
        ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
      upper bounds:
        P[<<sum_1030@8:1>@11:0>](var10:int,var11:int) = ((3 * var10) <= (3 + var11))
      begin GenHcSolver.classify_pids(5821)[4]
        output:
          [<<sum_1030@8:1>@11:0>]
      end GenHcSolver.classify_pids(5821)[4] (0.000000 sec.)
      lb:((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
      nub:(not ((3 * <sum_1030@8:0>) <= (3 + <<sum_1030@8:1>@11:0>)))
      begin ApronInterface.convex_hull_interpolate(5824)[4]
        lb:((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
        nub:(not ((3 * <sum_1030@8:0>) <= (3 + <<sum_1030@8:1>@11:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(5834)[5]
          ts: ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
          
        end ExtFormula.Formula.case_analysis_boolean(5834)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5844)[5]
          ts: ((3 * <sum_1030@8:0>) > (3 + <<sum_1030@8:1>@11:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(5844)[5] (0.000000 sec.)
        lb':((<<sum_1030@8:1>@11:0> = 0) && ((-1 * <sum_1030@8:0>) >= 0))
        nub':(((-4 + (-1 * <<sum_1030@8:1>@11:0>)) + (3 * <sum_1030@8:0>)) >= 0)
        begin InterpProver.interpolate(5850)[5]
          begin InterpProver.interpolate_fresh(5851)[6]
            begin InterpProver.interpolate_log(5852)[7]
              input1: ((<<sum_1030@8:1>@11:0> = 0) && ((-1 * <sum_1030@8:0>) >= 0))
              input2: (((-4 + (-1 * <<sum_1030@8:1>@11:0>)) + (3 * <sum_1030@8:0>)) >= 0)
              begin InterpProver.interpolate_check(5853)[8]
                begin InterpProver.interpolate_simplify(5854)[9]
                  begin InterpProver.interpolate_quick(5887)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(5896)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(5897)[12]
                        begin CsisatInterface.interpolate_csisat_log(5898)[13]
                          input1: (0 = v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0 & v_sep_sum_1030_sep_8_sep_0 <= 0)
                          input2: (4 + v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0) <= 3*v_sep_sum_1030_sep_8_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(5899)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(5899)[14] (0.000000 sec.)
                          output: (-0.5*v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0 + 1.5*v_sep_sum_1030_sep_8_sep_0) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(5898)[13] (0.000000 sec.)
                        after simplification: (-1*v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0 + 3*v_sep_sum_1030_sep_8_sep_0) <= 0
                        after dnf conversion: (((-1*v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0 + 3*v_sep_sum_1030_sep_8_sep_0) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(5897)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(5896)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(5887)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(5854)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(5853)[8] (0.002000 sec.)
              output: ((3 * <sum_1030@8:0>) <= <<sum_1030@8:1>@11:0>)
            end InterpProver.interpolate_log(5852)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(5851)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(5850)[5] (0.002999 sec.)
        output:
          P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int) =
          ((3 * <sum_1030@8:0>) <= <<sum_1030@8:1>@11:0>)
      end ApronInterface.convex_hull_interpolate(5824)[4] (0.002999 sec.)
      Horn clauses:
        |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
      lower bounds:
        P[<sum_1030@8:0>](<sum_1030@8:0>:int) = true
      upper bounds:
        P[<sum_1030@8:0>](var12:int) = true
      begin GenHcSolver.classify_pids(6247)[4]
        output:
          [<sum_1030@8:0>]
      end GenHcSolver.classify_pids(6247)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(6250)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(6253)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(6253)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(6258)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(6258)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(6261)[5]
          begin InterpProver.interpolate_fresh(6262)[6]
            begin InterpProver.interpolate_log(6263)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(6264)[8]
                begin InterpProver.interpolate_simplify(6265)[9]
                  begin InterpProver.interpolate_quick(6279)[10]
                    
                  end InterpProver.interpolate_quick(6279)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(6265)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(6264)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(6263)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(6262)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(6261)[5] (0.000000 sec.)
        output:
          P[<sum_1030@8:0>](<sum_1030@8:0>:int) = true
      end ApronInterface.convex_hull_interpolate(6250)[4] (0.001000 sec.)
      begin HcSolver.check_validity(6336)[4]
        input:
          P[<fail_1170@16:0>](<fail_1170@16:0>:bool)|- bot
          
          P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
          (((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) && <fail_1170@16:0>)
          |- P[<fail_1170@16:0>](<fail_1170@16:0>:bool)
          
          P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
          |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
          
          |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(6336)[4] (0.001999 sec.)
      solution:
        P[<fail_1170@16:0>](<fail_1170@16:0>:bool) = false
        P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int) =
        ((3 * <sum_1030@8:0>) <= <<sum_1030@8:1>@11:0>)
        P[<sum_1030@8:0>](<sum_1030@8:0>:int) = true
    end GenHcSolver.solve(3829)[3] (0.016997 sec.)
    begin YhornInterface.solve(6589)[3]
      begin HcSolver.solve_ub(6590)[4]
        encoded:
          P[<fail_1170@16:0>](<fail_1170@16:0>:int)|- bot
          
          P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
          (((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) && (<fail_1170@16:0> = 1))
          |- P[<fail_1170@16:0>](<fail_1170@16:0>:int)
          
          P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
          |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
          
          |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
        input to Yhorn:
          P[<fail_1170@16:0>](<fail_1170@16:0>:int)|- bot
          
          P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
          (((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) && (<fail_1170@16:0> = 1))
          |- P[<fail_1170@16:0>](<fail_1170@16:0>:int)
          
          P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<sum_1030@8:0> <= 0) && (<<sum_1030@8:1>@11:0> = 0))
          |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1170_sep_16_sep_0($6)) -> 1=0.
(($6-1=0) & (3$7-$8-3>0)) & (v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0($7,$8)) -> v_sep_fail_1170_sep_16_sep_0($6).
(($9=0) & ($10<=0)) & (v_sep_sum_1030_sep_8_sep_0($10)) -> v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0($10,$9).
0=0 -> v_sep_sum_1030_sep_8_sep_0($10).


v_sep_fail_1170_sep_16_sep_0: X
v_sep_sum_1030_sep_8_sep_0: X
v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0: X
....
v_sep_fail_1170_sep_16_sep_0: X
v_sep_sum_1030_sep_8_sep_0: X
v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0: X
...
v_sep_fail_1170_sep_16_sep_0: X
v_sep_sum_1030_sep_8_sep_0: X
v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0: X
....
v_sep_fail_1170_sep_16_sep_0: X
v_sep_sum_1030_sep_8_sep_0: X
v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0: X
....(0=0) & (v_sep_fail_1170_sep_16_sep_0($6)) -> 1=0.
(($6-1=0) & (3$7-$8-3>0)) & (v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0($7,$8)) -> v_sep_fail_1170_sep_16_sep_0($6).
(($9=0) & ($10<=0)) & (v_sep_sum_1030_sep_8_sep_0($10)) -> v_sep_sum_1030_sep_8_sep_1_sep_11_sep_0($10,$9).
0=0 -> v_sep_sum_1030_sep_8_sep_0($10).

          |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
        solution:
          P[<fail_1170@16:0>]($11:bool) = false
          P[<sum_1030@8:0>]($19:int) = true
          P[<<sum_1030@8:1>@11:0>]($14:int,$16:int) = ((3 * $14) <= $16)
        
      end HcSolver.solve_ub(6590)[4] (0.011999 sec.)
      begin HcSolver.check_validity(6706)[4]
        input:
          P[<fail_1170@16:0>](<fail_1170@16:0>:bool)|- bot
          
          P[<<sum_1030@8:1>@11:0>](<f_main_1167@13:0>:int,<f_main_1167@13:2>:int),
          (((3 * <f_main_1167@13:0>) > (3 + <f_main_1167@13:2>)) && <fail_1170@16:0>)
          |- P[<fail_1170@16:0>](<fail_1170@16:0>:bool)
          
          P[<sum_1030@8:0>](<sum_1030@8:0>:int), ((<<sum_1030@8:1>@11:0> = 0) && (<sum_1030@8:0> <= 0))
          |- P[<<sum_1030@8:1>@11:0>](<sum_1030@8:0>:int,<<sum_1030@8:1>@11:0>:int)
          
          |- P[<sum_1030@8:0>](<sum_1030@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(6706)[4] (0.002999 sec.)
      solution:
        P[<fail_1170@16:0>]($11:bool) = false
        P[<sum_1030@8:0>]($19:int) = true
        P[<<sum_1030@8:1>@11:0>]($14:int,$16:int) = ((3 * $14) <= $16)
    end YhornInterface.solve(6589)[3] (0.014998 sec.)
    
  end RefTypeInfer.infer_etrs(97)[2] (0.063990 sec.)
  refinement types:
    main_1165: X
    f_1168: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | ((3 * v1) <= v2)} -> X) -> X
    f_main_1167: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1170: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1169: var21:int -> var20:unit -> X
    f_sum_1166: var26:int -> (var25:int -> X) -> var23:int -> X
  abstraction types:
    main_1165: X
    f_1168: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    sum_1030: v1:int -> (v2:int[v2 -> ((3 * v1) <= v2)] -> X) -> X
    f_main_1167: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1170: v1:bool -> (v2:unit -> X) -> X
    f_1169: var21:int -> var20:unit -> X
    f_sum_1166: var26:int -> (var25:int -> X) -> var23:int -> X
  
end AbsTypeInfer.refine(96)[1] (0.064990 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1165
  main_1165 -> (rand_int f_1168)
  f_1168 x_1140 -> (main_1032 x_1140 (f_1169 x_1140))
  f_1169 x_1140 x_1137 -> end
  f_main_1167 n_1033 k_main_1109 x_1113 when (((3 * n_1033) - 3) <= x_1113) -> (k_main_1109 ())
  f_main_1167 n_1033 k_main_1109 x_1113 when (not (((3 * n_1033) - 3) <= x_1113)) -> (fail_1170 true k_main_1109)
  f_sum_1166 n_1031 k_sum_1077 x_1081 -> (k_sum_1077 (n_1031 + x_1081))
  fail_1170 b k -> {fail} => (k ())
  main_1032 n_1033 k_main_1109 -> (sum_1030 n_1033 (f_main_1167 n_1033 k_main_1109))
  sum_1030 n_1031 k_sum_1077 when (n_1031 <= 0) -> (k_sum_1077 0)
  sum_1030 n_1031 k_sum_1077 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1166 n_1031 k_sum_1077))
Types:
  main_1165 : X
  fail_1170 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (x_1:int -> (x_3:int[3*x_1 <= x_3] -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1165 ... --> 
  f_1168 ... --> 
  main_1032 ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sum_1166 ... --> 
  f_main_1167 [2/2] ... --> 
  fail_1170 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(7149)[1]
  program:
    main_1165  | true = ((Random.int 0) f_1168)
    f_1168 x_1140 | true = (main_1032 x_1140
                                      (f_1169 x_1140))
    f_1169 x_1140 x_1137 | true = end
    f_main_1167 n_1033 k_main_1109 x_1113 | (((3 * n_1033) - 3) <= x_1113) = (
    k_main_1109 ())
    f_main_1167 n_1033 k_main_1109 x_1113 | (not (((3 * n_1033) - 3) <= x_1113)) = (
    fail_1170 true
              k_main_1109)
    f_sum_1166 n_1031 k_sum_1077 x_1081 | true = (k_sum_1077 (n_1031 + x_1081))
    fail_1170 b k | true = (fail ())
    main_1032 n_1033 k_main_1109 | true = (sum_1030 n_1033
                                                    (f_main_1167 n_1033
                                                                 k_main_1109))
    sum_1030 n_1031 k_sum_1077 | (n_1031 <= 0) = (k_sum_1077 0)
    sum_1030 n_1031 k_sum_1077 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1166 n_1031
                                                                    k_sum_1077))
    main_1165:X
    f_1168:int -> X
    f_1169:int -> unit -> X
    f_main_1167:int -> (unit -> X) -> int -> X
    f_sum_1166:int -> (int -> X) -> int -> X
    fail_1170:bool -> (unit -> X) -> X
    main_1032:int -> (unit -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: f_1168,f_1169,f_main_1167,f_sum_1166,main_1032
  counterexample: 0:0:0:1:0:0:1:0
  error traces:
    [true.nop(<f_1168@22:0> = var27)
     [true.(<main_1032@24:0> = <f_1168@22:0>)
      [true.(<sum_1030@26:0> = <main_1032@24:0>)
       [(not (<sum_1030@26:0> <= 0)).(<sum_1030@29:0> = (<sum_1030@26:0> - 1))
        [(<sum_1030@29:0> <= 0).(<<sum_1030@29:1>@32:0> = 0)
         [true.((<f_sum_1166@34:0> = <sum_1030@26:0>) && (<f_sum_1166@34:2> = <<sum_1030@29:1>@32:0>))
          [true.(<<f_sum_1166@34:1>@36:0> = (<f_sum_1166@34:0> + <f_sum_1166@34:2>))
           [true.(<<sum_1030@26:1>@38:0> = <<f_sum_1166@34:1>@36:0>)
            [true.((<f_main_1167@40:0> = <main_1032@24:0>) && (<f_main_1167@40:2> = <<sum_1030@26:1>@38:0>))
             [(not (((3 * <f_main_1167@40:0>) - 3) <= <f_main_1167@40:2>)).(<fail_1170@43:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(7150)[2]
    horn clauses:
      P[<fail_1170@43:0>](<fail_1170@43:0>:bool)|- bot
      
      P[<f_main_1167@40:2>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int),
      (((3 * <f_main_1167@40:0>) > (3 + <f_main_1167@40:2>)) && <fail_1170@43:0>)
      |- P[<fail_1170@43:0>](<fail_1170@43:0>:bool)
      
      P[<main_1032@24:0>](<f_main_1167@40:0>:int),
      P[<<sum_1030@26:1>@38:0>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int)|- P[<f_main_1167@40:2>](
      <f_main_1167@40:0>:int,<f_main_1167@40:2>:int)
      
      P[<sum_1030@26:0>](<sum_1030@26:0>:int),
      P[<<f_sum_1166@34:1>@36:0>](<sum_1030@26:0>:int,<<sum_1030@26:1>@38:0>:int), (
      <sum_1030@26:0> > 0) |- P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,
                                                        <<sum_1030@26:1>@38:0>:int)
      
      P[<f_sum_1166@34:2>](<f_sum_1166@34:0>:int,(<<f_sum_1166@34:1>@36:0> + (-1 * <f_sum_1166@34:0>)):int)|- P[<<f_sum_1166@34:1>@36:0>](
      <f_sum_1166@34:0>:int,<<f_sum_1166@34:1>@36:0>:int)
      
      P[<sum_1030@26:0>](<f_sum_1166@34:0>:int),
      P[<<sum_1030@29:1>@32:0>]((-1 + <f_sum_1166@34:0>):int,<f_sum_1166@34:2>:int), (
      <f_sum_1166@34:0> > 0) |- P[<f_sum_1166@34:2>](<f_sum_1166@34:0>:int,
                                                     <f_sum_1166@34:2>:int)
      
      P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
      |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
      
      P[<sum_1030@26:0>]((1 + <sum_1030@29:0>):int), ((1 + <sum_1030@29:0>) > 0)
      |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
      
      P[<main_1032@24:0>](<sum_1030@26:0>:int)|- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
      
      P[<f_1168@22:0>](<main_1032@24:0>:int)|- P[<main_1032@24:0>](<main_1032@24:0>:int)
      
      |- P[<f_1168@22:0>](<f_1168@22:0>:int)
    call trees:
      <main_1165@19>
        <f_1168@22>
          <main_1032@24>
            <sum_1030@26>
              <sum_1030@29>
              </<sum_1030@29:1>@32>
              <f_sum_1166@34>
              </<f_sum_1166@34:1>@36>
            </<sum_1030@26:1>@38>
            <f_main_1167@40>
              <fail_1170@43>
    inlined horn clauses:
      P[<fail_1170@43:0>](<fail_1170@43:0>:bool)|- bot
      
      P[<<sum_1030@26:1>@38:0>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int),
      (((3 * <f_main_1167@40:0>) > (3 + <f_main_1167@40:2>)) && <fail_1170@43:0>)
      |- P[<fail_1170@43:0>](<fail_1170@43:0>:bool)
      
      P[<sum_1030@26:0>](<sum_1030@26:0>:int),
      P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
      (<sum_1030@26:0> > 0) |- P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,
                                                         <<sum_1030@26:1>@38:0>:int)
      
      P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
      |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
      
      P[<sum_1030@26:0>]((1 + <sum_1030@29:0>):int), ((1 + <sum_1030@29:0>) > 0)
      |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
      
      |- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
    begin ParamSubstInfer.infer(8518)[3]
      
    end ParamSubstInfer.infer(8518)[3] (0.037994 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(8520)[3]
      
    end RefTypeInfer.elim_coeffs(8520)[3] (0.001000 sec.)
    begin GenHcSolver.solve(8743)[3]
      Horn clauses:
        P[<fail_1170@43:0>](<fail_1170@43:0>:bool)|- bot
        
        P[<<sum_1030@26:1>@38:0>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int),
        (((3 * <f_main_1167@40:0>) > (3 + <f_main_1167@40:2>)) && <fail_1170@43:0>)
        |- P[<fail_1170@43:0>](<fail_1170@43:0>:bool)
        
        P[<sum_1030@26:0>](<sum_1030@26:0>:int),
        P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
        (<sum_1030@26:0> > 0) |- P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,
                                                           <<sum_1030@26:1>@38:0>:int)
        
        P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
        |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
        
        P[<sum_1030@26:0>]((1 + <sum_1030@29:0>):int), ((1 + <sum_1030@29:0>) > 0)
        |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
        
        |- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
      lower bounds:
        P[<sum_1030@26:0>](<sum_1030@26:0>:int) = true
        P[<sum_1030@29:0>](<sum_1030@29:0>:int) = ((1 + <sum_1030@29:0>) > 0)
        P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
        ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> = 0))
        P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,<<sum_1030@26:1>@38:0>:int) =
        ((<sum_1030@26:0> = 1) && (<<sum_1030@26:1>@38:0> = <sum_1030@26:0>))
        P[<fail_1170@43:0>](<fail_1170@43:0>:bool) = false
      upper bounds:
        P[<<sum_1030@26:1>@38:0>](var34:int,var35:int) = ((3 * var34) <= (3 + var35))
        P[<<sum_1030@29:1>@32:0>](var30:int,var31:int) = (((1 + var30) <= 0) || ((2 * var30) <= (1 + var31)))
      begin GenHcSolver.classify_pids(11623)[4]
        output:
          [<<sum_1030@29:1>@32:0>;<<sum_1030@26:1>@38:0>]
      end GenHcSolver.classify_pids(11623)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(11673)[4]
        lb:(((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> = 0)) ||
            ((<sum_1030@29:0> = 1) && (<<sum_1030@29:1>@32:0> = <sum_1030@29:0>)))
        nub:((not (((1 + <sum_1030@29:0>) <= 0) || ((2 * <sum_1030@29:0>) <= (1 + <<sum_1030@29:1>@32:0>)))) ||
             (not ((3 * <sum_1030@29:0>) <= (3 + <<sum_1030@29:1>@32:0>))))
        lb':(((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> = 0)) ||
             ((<sum_1030@29:0> = 1) && (<<sum_1030@29:1>@32:0> = <sum_1030@29:0>)))
        nub':((not (((1 + <sum_1030@29:0>) <= 0) || ((2 * <sum_1030@29:0>) <= (1 + <<sum_1030@29:1>@32:0>)))) ||
              (not ((3 * <sum_1030@29:0>) <= (3 + <<sum_1030@29:1>@32:0>))))
        begin InterpProver.interpolate(11674)[5]
          begin InterpProver.interpolate_fresh(11675)[6]
            begin InterpProver.interpolate_log(11676)[7]
              input1: (((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> = 0)) ||
                       ((<sum_1030@29:0> = 1) && (<<sum_1030@29:1>@32:0> = <sum_1030@29:0>)))
              input2: ((not (((1 + <sum_1030@29:0>) <= 0) || ((2 * <sum_1030@29:0>) <= (1 + <<sum_1030@29:1>@32:0>)))) ||
                       (not ((3 * <sum_1030@29:0>) <= (3 + <<sum_1030@29:1>@32:0>))))
              begin InterpProver.interpolate_check(11677)[8]
                begin InterpProver.interpolate_simplify(11678)[9]
                  begin InterpProver.interpolate_quick(11777)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(11786)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(11787)[12]
                        begin CsisatInterface.interpolate_csisat_log(11788)[13]
                          input1: ((0 = v_sep_sum_1030_sep_29_sep_0 & 0 = v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0) | (1 = v_sep_sum_1030_sep_29_sep_0 & v_sep_sum_1030_sep_29_sep_0 = v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0))
                          input2: ((1 <= (1 + v_sep_sum_1030_sep_29_sep_0) & (2 + v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0) <= 2*v_sep_sum_1030_sep_29_sep_0) | (4 + v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0) <= 3*v_sep_sum_1030_sep_29_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(11789)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(11789)[14] (0.005999 sec.)
                          output: (((-2*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 4*v_sep_sum_1030_sep_29_sep_0) <= 2 | (-1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 2*v_sep_sum_1030_sep_29_sep_0) <= 0) & ((-1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 3*v_sep_sum_1030_sep_29_sep_0) <= 2. | (-0.5*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 1.5*v_sep_sum_1030_sep_29_sep_0) <= 0))
                          
                        end CsisatInterface.interpolate_csisat_log(11788)[13] (0.005999 sec.)
                        after simplification: (((-2*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 4*v_sep_sum_1030_sep_29_sep_0) <= 2 | (-1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 2*v_sep_sum_1030_sep_29_sep_0) <= 0) & ((-1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 3*v_sep_sum_1030_sep_29_sep_0) <= 0 | (-1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 3*v_sep_sum_1030_sep_29_sep_0) <= 2))
                        after dnf conversion: (((-2*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 4*v_sep_sum_1030_sep_29_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 3*v_sep_sum_1030_sep_29_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 4*v_sep_sum_1030_sep_29_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 3*v_sep_sum_1030_sep_29_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 2*v_sep_sum_1030_sep_29_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 3*v_sep_sum_1030_sep_29_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 2*v_sep_sum_1030_sep_29_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 3*v_sep_sum_1030_sep_29_sep_0) <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(11787)[12] (0.005999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(11786)[11] (0.006998 sec.)
                    
                  end InterpProver.interpolate_quick(11777)[10] (0.006998 sec.)
                  begin minimizing # of conjunctions(11917)[10]
                    input: (((2 * <sum_1030@29:0>) <= (1 + <<sum_1030@29:1>@32:0>)) &&
                            ((3 * <sum_1030@29:0>) <= (2 + <<sum_1030@29:1>@32:0>)))
                    output: (((3 * <sum_1030@29:0>) <= (2 + <<sum_1030@29:1>@32:0>)) &&
                             ((2 * <sum_1030@29:0>) <= (1 + <<sum_1030@29:1>@32:0>)))
                  end minimizing # of conjunctions(11917)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(11678)[9] (0.008998 sec.)
                
              end InterpProver.interpolate_check(11677)[8] (0.008998 sec.)
              output: (((3 * <sum_1030@29:0>) <= (2 + <<sum_1030@29:1>@32:0>)) &&
                       ((2 * <sum_1030@29:0>) <= (1 + <<sum_1030@29:1>@32:0>)))
            end InterpProver.interpolate_log(11676)[7] (0.009998 sec.)
            
          end InterpProver.interpolate_fresh(11675)[6] (0.009998 sec.)
          
        end InterpProver.interpolate(11674)[5] (0.009998 sec.)
        output:
          P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
          (((3 * <sum_1030@29:0>) <= (2 + <<sum_1030@29:1>@32:0>)) &&
           ((2 * <sum_1030@29:0>) <= (1 + <<sum_1030@29:1>@32:0>)))
          P[<<sum_1030@26:1>@38:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
          (((3 * <sum_1030@29:0>) <= (2 + <<sum_1030@29:1>@32:0>)) &&
           ((2 * <sum_1030@29:0>) <= (1 + <<sum_1030@29:1>@32:0>)))
      end ApronInterface.convex_hull_interpolate(11673)[4] (0.009998 sec.)
      Horn clauses:
        P[<fail_1170@43:0>](<fail_1170@43:0>:bool)|- bot
        
        P[<sum_1030@26:0>](<sum_1030@26:0>:int),
        P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
        ((<sum_1030@26:0> > 0) &&
         (((3 * <sum_1030@26:0>) > (2 + <<sum_1030@26:1>@38:0>)) ||
          ((2 * <sum_1030@26:0>) > (1 + <<sum_1030@26:1>@38:0>)))) |- bot
        
        P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
        |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
        
        P[<sum_1030@26:0>]((1 + <sum_1030@29:0>):int), ((1 + <sum_1030@29:0>) > 0)
        |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
        
        |- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
      lower bounds:
        P[<sum_1030@26:0>](<sum_1030@26:0>:int) = true
        P[<fail_1170@43:0>](var39:bool) = false
        P[<sum_1030@29:0>](<sum_1030@29:0>:int) = ((1 + <sum_1030@29:0>) > 0)
        P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
        ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> = 0))
      upper bounds:
        P[<sum_1030@29:0>](var45:int) = true
        P[<sum_1030@26:0>](var42:int) = true
      begin GenHcSolver.classify_pids(15545)[4]
        output:
          [<sum_1030@26:0>;<sum_1030@29:0>]
      end GenHcSolver.classify_pids(15545)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(15556)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(15557)[5]
          begin InterpProver.interpolate_fresh(15558)[6]
            begin InterpProver.interpolate_log(15559)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(15560)[8]
                begin InterpProver.interpolate_simplify(15561)[9]
                  begin InterpProver.interpolate_quick(15574)[10]
                    
                  end InterpProver.interpolate_quick(15574)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(15561)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(15560)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(15559)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(15558)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(15557)[5] (0.000000 sec.)
        output:
          P[<sum_1030@26:0>](<sum_1030@26:0>:int) = true
          P[<sum_1030@29:0>](<sum_1030@26:0>:int) = true
      end ApronInterface.convex_hull_interpolate(15556)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1170@43:0>](<fail_1170@43:0>:bool)|- bot
        
        P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
        ((<sum_1030@26:0> > 0) &&
         (((3 * <sum_1030@26:0>) > (2 + <<sum_1030@26:1>@38:0>)) ||
          ((2 * <sum_1030@26:0>) > (1 + <<sum_1030@26:1>@38:0>)))) |- bot
        
         ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
        |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
      lower bounds:
        P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
        ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
        P[<fail_1170@43:0>](var49:bool) = false
      upper bounds:
        P[<fail_1170@43:0>](var52:bool) = true
      begin GenHcSolver.classify_pids(17545)[4]
        output:
          [<fail_1170@43:0>]
      end GenHcSolver.classify_pids(17545)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(17548)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(17549)[5]
          begin InterpProver.interpolate_fresh(17550)[6]
            begin InterpProver.interpolate_log(17551)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(17552)[8]
                begin InterpProver.interpolate_simplify(17553)[9]
                  begin InterpProver.interpolate_quick(17566)[10]
                    
                  end InterpProver.interpolate_quick(17566)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(17570)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(17570)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(17553)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(17552)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(17551)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(17550)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(17549)[5] (0.000000 sec.)
        output:
          P[<fail_1170@43:0>](var49:bool) = false
      end ApronInterface.convex_hull_interpolate(17548)[4] (0.000000 sec.)
      Horn clauses:
        P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
        ((<sum_1030@26:0> > 0) &&
         (((3 * <sum_1030@26:0>) > (2 + <<sum_1030@26:1>@38:0>)) ||
          ((2 * <sum_1030@26:0>) > (1 + <<sum_1030@26:1>@38:0>)))) |- bot
        
         ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
        |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
      lower bounds:
        P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
        ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
      upper bounds:
        P[<<sum_1030@29:1>@32:0>](var53:int,var54:int) =
        (((1 + var53) <= 0) || (((2 * var53) <= var54) && (var53 <= var54)))
      begin GenHcSolver.classify_pids(19365)[4]
        output:
          [<<sum_1030@29:1>@32:0>]
      end GenHcSolver.classify_pids(19365)[4] (0.000000 sec.)
      lb:((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
      nub:(not
             (((1 + <sum_1030@29:0>) <= 0) ||
              (((2 * <sum_1030@29:0>) <= <<sum_1030@29:1>@32:0>) && (<sum_1030@29:0> <= <<sum_1030@29:1>@32:0>))))
      begin ApronInterface.convex_hull_interpolate(19368)[4]
        lb:((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
        nub:(not
               (((1 + <sum_1030@29:0>) <= 0) ||
                (((2 * <sum_1030@29:0>) <= <<sum_1030@29:1>@32:0>) && (<sum_1030@29:0> <= <<sum_1030@29:1>@32:0>))))
        lb':((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
        nub':(not
                (((1 + <sum_1030@29:0>) <= 0) ||
                 (((2 * <sum_1030@29:0>) <= <<sum_1030@29:1>@32:0>) && (<sum_1030@29:0> <= <<sum_1030@29:1>@32:0>))))
        begin InterpProver.interpolate(19369)[5]
          begin InterpProver.interpolate_fresh(19370)[6]
            begin InterpProver.interpolate_log(19371)[7]
              input1: ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
              input2: (not
                         (((1 + <sum_1030@29:0>) <= 0) ||
                          (((2 * <sum_1030@29:0>) <= <<sum_1030@29:1>@32:0>) &&
                           (<sum_1030@29:0> <= <<sum_1030@29:1>@32:0>))))
              begin InterpProver.interpolate_check(19372)[8]
                begin InterpProver.interpolate_simplify(19373)[9]
                  begin InterpProver.interpolate_quick(19454)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(19463)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(19464)[12]
                        begin CsisatInterface.interpolate_csisat_log(19465)[13]
                          input1: (0 = v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 & v_sep_sum_1030_sep_29_sep_0 <= 0)
                          input2: (((1 + v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0) <= v_sep_sum_1030_sep_29_sep_0 | (1 + v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0) <= 2*v_sep_sum_1030_sep_29_sep_0) & 1 <= (1 + v_sep_sum_1030_sep_29_sep_0))
                          begin CsisatInterface.interpolate_csisat_raw(19466)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(19466)[14] (0.001000 sec.)
                          output: ((-2*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 4*v_sep_sum_1030_sep_29_sep_0) <= 0 & -1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 <= 0)
                          
                        end CsisatInterface.interpolate_csisat_log(19465)[13] (0.001000 sec.)
                        after simplification: ((-2*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 4*v_sep_sum_1030_sep_29_sep_0) <= 0 & -1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 <= 0)
                        after dnf conversion: (((-2*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 4*v_sep_sum_1030_sep_29_sep_0) <= 0 & -1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(19464)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(19463)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(19454)[10] (0.001000 sec.)
                  begin minimizing # of conjunctions(19481)[10]
                    input: (((2 * <sum_1030@29:0>) <= <<sum_1030@29:1>@32:0>) && (0 <= <<sum_1030@29:1>@32:0>))
                    output: ((2 * <sum_1030@29:0>) <= <<sum_1030@29:1>@32:0>)
                  end minimizing # of conjunctions(19481)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(19373)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(19372)[8] (0.005999 sec.)
              output: ((2 * <sum_1030@29:0>) <= <<sum_1030@29:1>@32:0>)
            end InterpProver.interpolate_log(19371)[7] (0.006999 sec.)
            
          end InterpProver.interpolate_fresh(19370)[6] (0.006999 sec.)
          
        end InterpProver.interpolate(19369)[5] (0.006999 sec.)
        output:
          P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
          ((2 * <sum_1030@29:0>) <= <<sum_1030@29:1>@32:0>)
      end ApronInterface.convex_hull_interpolate(19368)[4] (0.006999 sec.)
      begin HcSolver.check_validity(19860)[4]
        input:
          P[<fail_1170@43:0>](<fail_1170@43:0>:bool)|- bot
          
          P[<<sum_1030@26:1>@38:0>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int),
          (((3 * <f_main_1167@40:0>) > (3 + <f_main_1167@40:2>)) && <fail_1170@43:0>)
          |- P[<fail_1170@43:0>](<fail_1170@43:0>:bool)
          
          P[<sum_1030@26:0>](<sum_1030@26:0>:int),
          P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
          (<sum_1030@26:0> > 0) |- P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,
                                                             <<sum_1030@26:1>@38:0>:int)
          
          P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
          |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
          
          P[<sum_1030@26:0>]((1 + <sum_1030@29:0>):int), ((1 + <sum_1030@29:0>) > 0)
          |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
          
          |- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(19860)[4] (0.003999 sec.)
      solution:
        P[<fail_1170@43:0>](var49:bool) = false
        P[<<sum_1030@26:1>@38:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
        (((3 * <sum_1030@29:0>) <= (2 + <<sum_1030@29:1>@32:0>)) &&
         ((2 * <sum_1030@29:0>) <= (1 + <<sum_1030@29:1>@32:0>)))
        P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
        ((2 * <sum_1030@29:0>) <= <<sum_1030@29:1>@32:0>)
        P[<sum_1030@29:0>](<sum_1030@26:0>:int) = true
        P[<sum_1030@26:0>](<sum_1030@26:0>:int) = true
    end GenHcSolver.solve(8743)[3] (0.071989 sec.)
    begin GenHcSolver.solve(20441)[3]
      Horn clauses:
        P[<fail_1170@43:0>](<fail_1170@43:0>:bool)|- bot
        
        P[<<sum_1030@26:1>@38:0>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int),
        (((3 * <f_main_1167@40:0>) > (3 + <f_main_1167@40:2>)) && <fail_1170@43:0>)
        |- P[<fail_1170@43:0>](<fail_1170@43:0>:bool)
        
        P[<sum_1030@26:0>](<sum_1030@26:0>:int),
        P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
        (<sum_1030@26:0> > 0) |- P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,
                                                           <<sum_1030@26:1>@38:0>:int)
        
        P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
        |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
        
        P[<sum_1030@26:0>]((1 + <sum_1030@29:0>):int), ((1 + <sum_1030@29:0>) > 0)
        |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
        
        |- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
      lower bounds:
        P[<sum_1030@26:0>](<sum_1030@26:0>:int) = true
        P[<sum_1030@29:0>](<sum_1030@29:0>:int) = ((1 + <sum_1030@29:0>) > 0)
        P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
        ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> = 0))
        P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,<<sum_1030@26:1>@38:0>:int) =
        ((<sum_1030@26:0> = 1) && (<<sum_1030@26:1>@38:0> = <sum_1030@26:0>))
        P[<fail_1170@43:0>](<fail_1170@43:0>:bool) = false
      upper bounds:
        P[<<sum_1030@26:1>@38:0>](var61:int,var62:int) = ((3 * var61) <= (3 + var62))
        P[<<sum_1030@29:1>@32:0>](var57:int,var58:int) = (((1 + var57) <= 0) || ((2 * var57) <= (1 + var58)))
      begin GenHcSolver.classify_pids(23321)[4]
        output:
          [<<sum_1030@29:1>@32:0>;<<sum_1030@26:1>@38:0>]
      end GenHcSolver.classify_pids(23321)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(23371)[4]
        lb:(((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> = 0)) ||
            ((<sum_1030@29:0> = 1) && (<<sum_1030@29:1>@32:0> = <sum_1030@29:0>)))
        nub:((not (((1 + <sum_1030@29:0>) <= 0) || ((2 * <sum_1030@29:0>) <= (1 + <<sum_1030@29:1>@32:0>)))) ||
             (not ((3 * <sum_1030@29:0>) <= (3 + <<sum_1030@29:1>@32:0>))))
        begin ExtFormula.Formula.case_analysis_boolean(23392)[5]
          ts: (((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> = 0)) ||
               ((<sum_1030@29:0> = 1) && (<<sum_1030@29:1>@32:0> = <sum_1030@29:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(23392)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(23428)[5]
          ts: (((3 * <sum_1030@29:0>) > (3 + <<sum_1030@29:1>@32:0>)) ||
               (((1 + <sum_1030@29:0>) > 0) && ((2 * <sum_1030@29:0>) > (1 + <<sum_1030@29:1>@32:0>))))
          
        end ExtFormula.Formula.case_analysis_boolean(23428)[5] (0.000000 sec.)
        lb':(((<<sum_1030@29:1>@32:0> + (-1 * <sum_1030@29:0>)) = 0) &&
             (((1 + (-1 * <sum_1030@29:0>)) >= 0) && (<sum_1030@29:0> >= 0)))
        nub':(((-2 + (-1 * <<sum_1030@29:1>@32:0>)) + (3 * <sum_1030@29:0>)) >= 0)
        begin InterpProver.interpolate(23439)[5]
          begin InterpProver.interpolate_fresh(23440)[6]
            begin InterpProver.interpolate_log(23441)[7]
              input1: (((<<sum_1030@29:1>@32:0> + (-1 * <sum_1030@29:0>)) = 0) &&
                       (((1 + (-1 * <sum_1030@29:0>)) >= 0) && (<sum_1030@29:0> >= 0)))
              input2: (((-2 + (-1 * <<sum_1030@29:1>@32:0>)) + (3 * <sum_1030@29:0>)) >= 0)
              begin InterpProver.interpolate_check(23442)[8]
                begin InterpProver.interpolate_simplify(23443)[9]
                  begin InterpProver.interpolate_quick(23520)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(23529)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(23530)[12]
                        begin CsisatInterface.interpolate_csisat_log(23531)[13]
                          input1: (v_sep_sum_1030_sep_29_sep_0 = v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 & 0 <= v_sep_sum_1030_sep_29_sep_0 & v_sep_sum_1030_sep_29_sep_0 <= 1)
                          input2: (2 + v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0) <= 3*v_sep_sum_1030_sep_29_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(23532)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(23532)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(23531)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(23530)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(23529)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(23520)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(23443)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(23442)[8] (0.002000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(23441)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(23440)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(23439)[5] (0.002000 sec.)
        begin InterpProver.interpolate(23543)[5]
          begin InterpProver.interpolate_fresh(23544)[6]
            begin InterpProver.interpolate_log(23545)[7]
              input1: (((<<sum_1030@29:1>@32:0> + (-1 * <sum_1030@29:0>)) = 0) &&
                       (((1 + (-1 * <sum_1030@29:0>)) >= 0) && (<sum_1030@29:0> >= 0)))
              input2: (not ((3 * <sum_1030@29:0>) <= (3 + <<sum_1030@29:1>@32:0>)))
              begin InterpProver.interpolate_check(23546)[8]
                begin InterpProver.interpolate_simplify(23547)[9]
                  begin InterpProver.interpolate_quick(23624)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(23633)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(23634)[12]
                        begin CsisatInterface.interpolate_csisat_log(23635)[13]
                          input1: (v_sep_sum_1030_sep_29_sep_0 = v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 & 0 <= v_sep_sum_1030_sep_29_sep_0 & v_sep_sum_1030_sep_29_sep_0 <= 1)
                          input2: (4 + v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0) <= 3*v_sep_sum_1030_sep_29_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(23636)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(23636)[14] (0.000000 sec.)
                          output: (-1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 3*v_sep_sum_1030_sep_29_sep_0) <= 2.
                          
                        end CsisatInterface.interpolate_csisat_log(23635)[13] (0.000000 sec.)
                        after simplification: (-1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 3*v_sep_sum_1030_sep_29_sep_0) <= 2
                        after dnf conversion: (((-1*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 3*v_sep_sum_1030_sep_29_sep_0) <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(23634)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(23633)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(23624)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(23547)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(23546)[8] (0.002000 sec.)
              output: ((3 * <sum_1030@29:0>) <= (2 + <<sum_1030@29:1>@32:0>))
            end InterpProver.interpolate_log(23545)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(23544)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(23543)[5] (0.002000 sec.)
        begin InterpProver.interpolate(23668)[5]
          begin InterpProver.interpolate_fresh(23669)[6]
            begin InterpProver.interpolate_log(23670)[7]
              input1: (((<<sum_1030@29:1>@32:0> + (-1 * <sum_1030@29:0>)) = 0) &&
                       (((1 + (-1 * <sum_1030@29:0>)) >= 0) && (<sum_1030@29:0> >= 0)))
              input2: (not (((1 + <sum_1030@29:0>) <= 0) || ((2 * <sum_1030@29:0>) <= (1 + <<sum_1030@29:1>@32:0>))))
              begin InterpProver.interpolate_check(23671)[8]
                begin InterpProver.interpolate_simplify(23672)[9]
                  begin InterpProver.interpolate_quick(23779)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(23788)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(23789)[12]
                        begin CsisatInterface.interpolate_csisat_log(23790)[13]
                          input1: (v_sep_sum_1030_sep_29_sep_0 = v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 & 0 <= v_sep_sum_1030_sep_29_sep_0 & v_sep_sum_1030_sep_29_sep_0 <= 1)
                          input2: (1 <= (1 + v_sep_sum_1030_sep_29_sep_0) & (2 + v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0) <= 2*v_sep_sum_1030_sep_29_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(23791)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(23791)[14] (0.000000 sec.)
                          output: (-2*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 4*v_sep_sum_1030_sep_29_sep_0) <= 2
                          
                        end CsisatInterface.interpolate_csisat_log(23790)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 4*v_sep_sum_1030_sep_29_sep_0) <= 2
                        after dnf conversion: (((-2*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 4*v_sep_sum_1030_sep_29_sep_0) <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(23789)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(23788)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(23779)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(23672)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(23671)[8] (0.001000 sec.)
              output: ((2 * <sum_1030@29:0>) <= (1 + <<sum_1030@29:1>@32:0>))
            end InterpProver.interpolate_log(23670)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(23669)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(23668)[5] (0.001000 sec.)
        output:
          P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
          ((2 * <sum_1030@29:0>) <= (1 + <<sum_1030@29:1>@32:0>))
          P[<<sum_1030@26:1>@38:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
          ((3 * <sum_1030@29:0>) <= (2 + <<sum_1030@29:1>@32:0>))
      end ApronInterface.convex_hull_interpolate(23371)[4] (0.005000 sec.)
      Horn clauses:
        P[<fail_1170@43:0>](<fail_1170@43:0>:bool)|- bot
        
        P[<sum_1030@26:0>](<sum_1030@26:0>:int),
        P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
        ((<sum_1030@26:0> > 0) && ((3 * <sum_1030@26:0>) > (2 + <<sum_1030@26:1>@38:0>))) |- bot
        
        P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
        |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
        
        P[<sum_1030@26:0>]((1 + <sum_1030@29:0>):int), ((1 + <sum_1030@29:0>) > 0)
        |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
        
        |- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
      lower bounds:
        P[<sum_1030@26:0>](<sum_1030@26:0>:int) = true
        P[<fail_1170@43:0>](var66:bool) = false
        P[<sum_1030@29:0>](<sum_1030@29:0>:int) = ((1 + <sum_1030@29:0>) > 0)
        P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
        ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> = 0))
      upper bounds:
        P[<sum_1030@29:0>](var72:int) = true
        P[<sum_1030@26:0>](var69:int) = true
      begin GenHcSolver.classify_pids(26514)[4]
        output:
          [<sum_1030@26:0>;<sum_1030@29:0>]
      end GenHcSolver.classify_pids(26514)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(26525)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(26528)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(26528)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(26533)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(26533)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(26536)[5]
          begin InterpProver.interpolate_fresh(26537)[6]
            begin InterpProver.interpolate_log(26538)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(26539)[8]
                begin InterpProver.interpolate_simplify(26540)[9]
                  begin InterpProver.interpolate_quick(26554)[10]
                    
                  end InterpProver.interpolate_quick(26554)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(26540)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(26539)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(26538)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(26537)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(26536)[5] (0.000000 sec.)
        output:
          P[<sum_1030@26:0>](<sum_1030@26:0>:int) = true
          P[<sum_1030@29:0>](<sum_1030@26:0>:int) = true
      end ApronInterface.convex_hull_interpolate(26525)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1170@43:0>](<fail_1170@43:0>:bool)|- bot
        
        P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
        ((<sum_1030@26:0> > 0) && ((3 * <sum_1030@26:0>) > (2 + <<sum_1030@26:1>@38:0>))) |- bot
        
         ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
        |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
      lower bounds:
        P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
        ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
        P[<fail_1170@43:0>](var76:bool) = false
      upper bounds:
        P[<fail_1170@43:0>](var79:bool) = true
      begin GenHcSolver.classify_pids(28158)[4]
        output:
          [<fail_1170@43:0>]
      end GenHcSolver.classify_pids(28158)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(28161)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(28164)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(28164)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(28169)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(28169)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(28172)[5]
          begin InterpProver.interpolate_fresh(28173)[6]
            begin InterpProver.interpolate_log(28174)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(28175)[8]
                begin InterpProver.interpolate_simplify(28176)[9]
                  begin InterpProver.interpolate_quick(28191)[10]
                    
                  end InterpProver.interpolate_quick(28191)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(28195)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(28195)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(28176)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(28175)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(28174)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(28173)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(28172)[5] (0.001000 sec.)
        output:
          P[<fail_1170@43:0>](var76:bool) = false
      end ApronInterface.convex_hull_interpolate(28161)[4] (0.001000 sec.)
      Horn clauses:
        P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
        ((<sum_1030@26:0> > 0) && ((3 * <sum_1030@26:0>) > (2 + <<sum_1030@26:1>@38:0>))) |- bot
        
         ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
        |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
      lower bounds:
        P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
        ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
      upper bounds:
        P[<<sum_1030@29:1>@32:0>](var80:int,var81:int) = (((1 + var80) <= 0) || ((2 * var80) <= var81))
      begin GenHcSolver.classify_pids(29491)[4]
        output:
          [<<sum_1030@29:1>@32:0>]
      end GenHcSolver.classify_pids(29491)[4] (0.000000 sec.)
      lb:((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
      nub:(not (((1 + <sum_1030@29:0>) <= 0) || ((2 * <sum_1030@29:0>) <= <<sum_1030@29:1>@32:0>)))
      begin ApronInterface.convex_hull_interpolate(29494)[4]
        lb:((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
        nub:(not (((1 + <sum_1030@29:0>) <= 0) || ((2 * <sum_1030@29:0>) <= <<sum_1030@29:1>@32:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(29504)[5]
          ts: ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
          
        end ExtFormula.Formula.case_analysis_boolean(29504)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(29526)[5]
          ts: (((1 + <sum_1030@29:0>) > 0) && ((2 * <sum_1030@29:0>) > <<sum_1030@29:1>@32:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(29526)[5] (0.000000 sec.)
        lb':((<<sum_1030@29:1>@32:0> = 0) && ((-1 * <sum_1030@29:0>) >= 0))
        nub':((<sum_1030@29:0> >= 0) && (((-1 + (-1 * <<sum_1030@29:1>@32:0>)) + (2 * <sum_1030@29:0>)) >= 0))
        begin InterpProver.interpolate(29533)[5]
          begin InterpProver.interpolate_fresh(29534)[6]
            begin InterpProver.interpolate_log(29535)[7]
              input1: ((<<sum_1030@29:1>@32:0> = 0) && ((-1 * <sum_1030@29:0>) >= 0))
              input2: ((<sum_1030@29:0> >= 0) && (((-1 + (-1 * <<sum_1030@29:1>@32:0>)) + (2 * <sum_1030@29:0>)) >= 0))
              begin InterpProver.interpolate_check(29536)[8]
                begin InterpProver.interpolate_simplify(29537)[9]
                  begin InterpProver.interpolate_quick(29594)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(29603)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(29604)[12]
                        begin CsisatInterface.interpolate_csisat_log(29605)[13]
                          input1: (0 = v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 & v_sep_sum_1030_sep_29_sep_0 <= 0)
                          input2: (0 <= v_sep_sum_1030_sep_29_sep_0 & (1 + v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0) <= 2*v_sep_sum_1030_sep_29_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(29606)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(29606)[14] (0.001000 sec.)
                          output: (-2*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 4*v_sep_sum_1030_sep_29_sep_0) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(29605)[13] (0.001000 sec.)
                        after simplification: (-2*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 4*v_sep_sum_1030_sep_29_sep_0) <= 0
                        after dnf conversion: (((-2*v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0 + 4*v_sep_sum_1030_sep_29_sep_0) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(29604)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(29603)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(29594)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(29537)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(29536)[8] (0.001000 sec.)
              output: ((2 * <sum_1030@29:0>) <= <<sum_1030@29:1>@32:0>)
            end InterpProver.interpolate_log(29535)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(29534)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(29533)[5] (0.002000 sec.)
        output:
          P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
          ((2 * <sum_1030@29:0>) <= <<sum_1030@29:1>@32:0>)
      end ApronInterface.convex_hull_interpolate(29494)[4] (0.002000 sec.)
      begin HcSolver.check_validity(29810)[4]
        input:
          P[<fail_1170@43:0>](<fail_1170@43:0>:bool)|- bot
          
          P[<<sum_1030@26:1>@38:0>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int),
          (((3 * <f_main_1167@40:0>) > (3 + <f_main_1167@40:2>)) && <fail_1170@43:0>)
          |- P[<fail_1170@43:0>](<fail_1170@43:0>:bool)
          
          P[<sum_1030@26:0>](<sum_1030@26:0>:int),
          P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
          (<sum_1030@26:0> > 0) |- P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,
                                                             <<sum_1030@26:1>@38:0>:int)
          
          P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
          |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
          
          P[<sum_1030@26:0>]((1 + <sum_1030@29:0>):int), ((1 + <sum_1030@29:0>) > 0)
          |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
          
          |- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(29810)[4] (0.001999 sec.)
      solution:
        P[<fail_1170@43:0>](var76:bool) = false
        P[<<sum_1030@26:1>@38:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
        ((3 * <sum_1030@29:0>) <= (2 + <<sum_1030@29:1>@32:0>))
        P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int) =
        ((2 * <sum_1030@29:0>) <= <<sum_1030@29:1>@32:0>)
        P[<sum_1030@29:0>](<sum_1030@26:0>:int) = true
        P[<sum_1030@26:0>](<sum_1030@26:0>:int) = true
    end GenHcSolver.solve(20441)[3] (0.045993 sec.)
    begin YhornInterface.solve(30245)[3]
      begin HcSolver.solve_ub(30246)[4]
        encoded:
          P[<fail_1170@43:0>](<fail_1170@43:0>:int)|- bot
          
          P[<<sum_1030@26:1>@38:0>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int),
          (((3 * <f_main_1167@40:0>) > (3 + <f_main_1167@40:2>)) && (<fail_1170@43:0> = 1))
          |- P[<fail_1170@43:0>](<fail_1170@43:0>:int)
          
          P[<sum_1030@26:0>](<sum_1030@26:0>:int),
          P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
          (<sum_1030@26:0> > 0) |- P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,
                                                             <<sum_1030@26:1>@38:0>:int)
          
          P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
          |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
          
          P[<sum_1030@26:0>]((1 + <sum_1030@29:0>):int), ((1 + <sum_1030@29:0>) > 0)
          |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
          
          |- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
        input to Yhorn:
          P[<fail_1170@43:0>](<fail_1170@43:0>:int)|- bot
          
          P[<<sum_1030@26:1>@38:0>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int),
          (((3 * <f_main_1167@40:0>) > (3 + <f_main_1167@40:2>)) && (<fail_1170@43:0> = 1))
          |- P[<fail_1170@43:0>](<fail_1170@43:0>:int)
          
          P[<sum_1030@26:0>](<sum_1030@26:0>:int),
          P[<<sum_1030@29:1>@32:0>](var82:int,var83:int),
          (((var83 + <sum_1030@26:0>) = <<sum_1030@26:1>@38:0>) &&
           (((1 + var82) = <sum_1030@26:0>) && (<sum_1030@26:0> > 0)))
          |- P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,<<sum_1030@26:1>@38:0>:int)
          
          P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<sum_1030@29:0> <= 0) && (<<sum_1030@29:1>@32:0> = 0))
          |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
          
          P[<sum_1030@26:0>](var84:int), ((var84 = (1 + <sum_1030@29:0>)) && ((1 + <sum_1030@29:0>) > 0))
          |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1170_sep_43_sep_0($67)) -> 1=0.
(($67-1=0) & (3$68-$69-3>0)) & (v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0($68,$69)) -> v_sep_fail_1170_sep_43_sep_0($67).
(($70>0) & (-$70+$71+1=0) & ($70+$72-$73=0)) & (v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0($71,$72)) & (v_sep_sum_1030_sep_26_sep_0($70)) -> v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0($70,$73).
(($74=0) & ($75<=0)) & (v_sep_sum_1030_sep_29_sep_0($75)) -> v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0($75,$74).
(($75+1>0) & (-$75+$76-1=0)) & (v_sep_sum_1030_sep_26_sep_0($76)) -> v_sep_sum_1030_sep_29_sep_0($75).
0=0 -> v_sep_sum_1030_sep_26_sep_0($70).


v_sep_fail_1170_sep_43_sep_0: X
v_sep_sum_1030_sep_26_sep_0: X
v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0: X
v_sep_sum_1030_sep_29_sep_0: X
v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0: X
.......
v_sep_fail_1170_sep_43_sep_0: X
v_sep_sum_1030_sep_26_sep_0: X
v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0: X
v_sep_sum_1030_sep_29_sep_0: X
v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0: X
...
v_sep_fail_1170_sep_43_sep_0: X
v_sep_sum_1030_sep_26_sep_0: X
v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0: X
v_sep_sum_1030_sep_29_sep_0: X
v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0: X
.....
v_sep_fail_1170_sep_43_sep_0: X
v_sep_sum_1030_sep_26_sep_0: X
v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0: X
v_sep_sum_1030_sep_29_sep_0: X
v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0: X
......
v_sep_fail_1170_sep_43_sep_0: X
v_sep_sum_1030_sep_26_sep_0: X
v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0: X
v_sep_sum_1030_sep_29_sep_0: X
v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0: X
.......(0=0) & (v_sep_fail_1170_sep_43_sep_0($67)) -> 1=0.
(($67-1=0) & (3$68-$69-3>0)) & (v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0($68,$69)) -> v_sep_fail_1170_sep_43_sep_0($67).
(($70>0) & (-$70+$71+1=0) & ($70+$72-$73=0)) & (v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0($71,$72)) & (v_sep_sum_1030_sep_26_sep_0($70)) -> v_sep_sum_1030_sep_26_sep_1_sep_38_sep_0($70,$73).
(($74=0) & ($75<=0)) & (v_sep_sum_1030_sep_29_sep_0($75)) -> v_sep_sum_1030_sep_29_sep_1_sep_32_sep_0($75,$74).
(($75+1>0) & (-$75+$76-1=0)) & (v_sep_sum_1030_sep_26_sep_0($76)) -> v_sep_sum_1030_sep_29_sep_0($75).
0=0 -> v_sep_sum_1030_sep_26_sep_0($70).

          |- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
        solution:
          P[<fail_1170@43:0>]($77:bool) = false
          P[<sum_1030@26:0>]($90:int) = true
          P[<<sum_1030@26:1>@38:0>]($80:int,$82:int) = ((3 * $80) <= (2 + $82))
          P[<sum_1030@29:0>]($93:int) = true
          P[<<sum_1030@29:1>@32:0>]($85:int,$87:int) = ((2 * $85) <= $87)
        
      end HcSolver.solve_ub(30246)[4] (0.014998 sec.)
      begin HcSolver.check_validity(30516)[4]
        input:
          P[<fail_1170@43:0>](<fail_1170@43:0>:bool)|- bot
          
          P[<<sum_1030@26:1>@38:0>](<f_main_1167@40:0>:int,<f_main_1167@40:2>:int),
          (((3 * <f_main_1167@40:0>) > (3 + <f_main_1167@40:2>)) && <fail_1170@43:0>)
          |- P[<fail_1170@43:0>](<fail_1170@43:0>:bool)
          
          P[<sum_1030@26:0>](<sum_1030@26:0>:int),
          P[<<sum_1030@29:1>@32:0>]((-1 + <sum_1030@26:0>):int,(<<sum_1030@26:1>@38:0> + (-1 * <sum_1030@26:0>)):int),
          (<sum_1030@26:0> > 0) |- P[<<sum_1030@26:1>@38:0>](<sum_1030@26:0>:int,
                                                             <<sum_1030@26:1>@38:0>:int)
          
          P[<sum_1030@29:0>](<sum_1030@29:0>:int), ((<<sum_1030@29:1>@32:0> = 0) && (<sum_1030@29:0> <= 0))
          |- P[<<sum_1030@29:1>@32:0>](<sum_1030@29:0>:int,<<sum_1030@29:1>@32:0>:int)
          
          P[<sum_1030@26:0>]((1 + <sum_1030@29:0>):int), ((1 + <sum_1030@29:0>) > 0)
          |- P[<sum_1030@29:0>](<sum_1030@29:0>:int)
          
          |- P[<sum_1030@26:0>](<sum_1030@26:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(30516)[4] (0.002000 sec.)
      solution:
        P[<fail_1170@43:0>]($77:bool) = false
        P[<sum_1030@26:0>]($90:int) = true
        P[<<sum_1030@26:1>@38:0>]($80:int,$82:int) = ((3 * $80) <= (2 + $82))
        P[<sum_1030@29:0>]($93:int) = true
        P[<<sum_1030@29:1>@32:0>]($85:int,$87:int) = ((2 * $85) <= $87)
    end YhornInterface.solve(30245)[3] (0.016998 sec.)
    
  end RefTypeInfer.infer_etrs(7150)[2] (0.181972 sec.)
  refinement types:
    main_1165: X
    f_1168: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | ((3 * v1) <= (2 + v2))} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | ((2 * v1) <= v2)} -> X) -> X
    f_sum_1166: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1167: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1170: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1169: var93:int -> var92:unit -> X
  abstraction types:
    main_1165: X
    f_1168: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    sum_1030: var94:int -> (var95:int[var95 -> ((3 * var94) <= (2 + var95)),
                                      var95 -> ((2 * var94) <= var95)] -> X) -> X
    f_sum_1166: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1167: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1170: v1:bool -> (v2:unit -> X) -> X
    f_1169: var93:int -> var92:unit -> X
  
end AbsTypeInfer.refine(7149)[1] (0.183971 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1165
  main_1165 -> (rand_int f_1168)
  f_1168 x_1140 -> (main_1032 x_1140 (f_1169 x_1140))
  f_1169 x_1140 x_1137 -> end
  f_main_1167 n_1033 k_main_1109 x_1113 when (((3 * n_1033) - 3) <= x_1113) -> (k_main_1109 ())
  f_main_1167 n_1033 k_main_1109 x_1113 when (not (((3 * n_1033) - 3) <= x_1113)) -> (fail_1170 true k_main_1109)
  f_sum_1166 n_1031 k_sum_1077 x_1081 -> (k_sum_1077 (n_1031 + x_1081))
  fail_1170 b k -> {fail} => (k ())
  main_1032 n_1033 k_main_1109 -> (sum_1030 n_1033 (f_main_1167 n_1033 k_main_1109))
  sum_1030 n_1031 k_sum_1077 when (n_1031 <= 0) -> (k_sum_1077 0)
  sum_1030 n_1031 k_sum_1077 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1166 n_1031 k_sum_1077))
Types:
  main_1165 : X
  fail_1170 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (x_1:int -> (x_3:int[2*x_1 <= x_3; 3*x_1 <= x_3 + 2; 3*x_1 <= x_3] -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1165 ... --> 
  f_1168 ... --> 
  main_1032 ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [2/2] ... --> 
  sum_1030 [1/2] ... --> 
  f_sum_1166 ... --> 
  f_sum_1166 ... --> 
  f_main_1167 [2/2] ... --> 
  fail_1170 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 0; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(31651)[1]
  program:
    main_1165  | true = ((Random.int 0) f_1168)
    f_1168 x_1140 | true = (main_1032 x_1140
                                      (f_1169 x_1140))
    f_1169 x_1140 x_1137 | true = end
    f_main_1167 n_1033 k_main_1109 x_1113 | (((3 * n_1033) - 3) <= x_1113) = (
    k_main_1109 ())
    f_main_1167 n_1033 k_main_1109 x_1113 | (not (((3 * n_1033) - 3) <= x_1113)) = (
    fail_1170 true
              k_main_1109)
    f_sum_1166 n_1031 k_sum_1077 x_1081 | true = (k_sum_1077 (n_1031 + x_1081))
    fail_1170 b k | true = (fail ())
    main_1032 n_1033 k_main_1109 | true = (sum_1030 n_1033
                                                    (f_main_1167 n_1033
                                                                 k_main_1109))
    sum_1030 n_1031 k_sum_1077 | (n_1031 <= 0) = (k_sum_1077 0)
    sum_1030 n_1031 k_sum_1077 | (not (n_1031 <= 0)) = (sum_1030 (n_1031 - 1)
                                                                 (f_sum_1166 n_1031
                                                                    k_sum_1077))
    main_1165:X
    f_1168:int -> X
    f_1169:int -> unit -> X
    f_main_1167:int -> (unit -> X) -> int -> X
    f_sum_1166:int -> (int -> X) -> int -> X
    fail_1170:bool -> (unit -> X) -> X
    main_1032:int -> (unit -> X) -> X
    sum_1030:int -> (int -> X) -> X
  inlined functions: f_1168,f_1169,f_main_1167,f_sum_1166,main_1032
  counterexample: 0:0:0:1:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1168@49:0> = var98)
     [true.(<main_1032@51:0> = <f_1168@49:0>)
      [true.(<sum_1030@53:0> = <main_1032@51:0>)
       [(not (<sum_1030@53:0> <= 0)).(<sum_1030@56:0> = (<sum_1030@53:0> - 1))
        [(not (<sum_1030@56:0> <= 0)).(<sum_1030@59:0> = (<sum_1030@56:0> - 1))
         [(<sum_1030@59:0> <= 0).(<<sum_1030@59:1>@62:0> = 0)
          [true.((<f_sum_1166@64:0> = <sum_1030@56:0>) && (<f_sum_1166@64:2> = <<sum_1030@59:1>@62:0>))
           [true.(<<f_sum_1166@64:1>@66:0> = (<f_sum_1166@64:0> + <f_sum_1166@64:2>))
            [true.(<<sum_1030@56:1>@68:0> = <<f_sum_1166@64:1>@66:0>)
             [true.((<f_sum_1166@70:0> = <sum_1030@53:0>) && (<f_sum_1166@70:2> = <<sum_1030@56:1>@68:0>))
              [true.(<<f_sum_1166@70:1>@72:0> = (<f_sum_1166@70:0> + <f_sum_1166@70:2>))
               [true.(<<sum_1030@53:1>@74:0> = <<f_sum_1166@70:1>@72:0>)
                [true.((<f_main_1167@76:0> = <main_1032@51:0>) && (<f_main_1167@76:2> = <<sum_1030@53:1>@74:0>))
                 [(not (((3 * <f_main_1167@76:0>) - 3) <= <f_main_1167@76:2>)).(<fail_1170@79:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(31652)[2]
    horn clauses:
      P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
      
      P[<f_main_1167@76:2>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int),
      (((3 * <f_main_1167@76:0>) > (3 + <f_main_1167@76:2>)) && <fail_1170@79:0>)
      |- P[<fail_1170@79:0>](<fail_1170@79:0>:bool)
      
      P[<main_1032@51:0>](<f_main_1167@76:0>:int),
      P[<<sum_1030@53:1>@74:0>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int)|- P[<f_main_1167@76:2>](
      <f_main_1167@76:0>:int,<f_main_1167@76:2>:int)
      
      P[<sum_1030@53:0>](<sum_1030@53:0>:int),
      P[<<f_sum_1166@70:1>@72:0>](<sum_1030@53:0>:int,<<sum_1030@53:1>@74:0>:int), (
      <sum_1030@53:0> > 0) |- P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,
                                                        <<sum_1030@53:1>@74:0>:int)
      
      P[<f_sum_1166@70:2>](<f_sum_1166@70:0>:int,(<<f_sum_1166@70:1>@72:0> + (-1 * <f_sum_1166@70:0>)):int)|- P[<<f_sum_1166@70:1>@72:0>](
      <f_sum_1166@70:0>:int,<<f_sum_1166@70:1>@72:0>:int)
      
      P[<sum_1030@53:0>](<f_sum_1166@70:0>:int),
      P[<<sum_1030@56:1>@68:0>]((-1 + <f_sum_1166@70:0>):int,<f_sum_1166@70:2>:int), (
      <f_sum_1166@70:0> > 0) |- P[<f_sum_1166@70:2>](<f_sum_1166@70:0>:int,
                                                     <f_sum_1166@70:2>:int)
      
      P[<sum_1030@56:0>](<sum_1030@56:0>:int),
      P[<<f_sum_1166@64:1>@66:0>](<sum_1030@56:0>:int,<<sum_1030@56:1>@68:0>:int), (
      <sum_1030@56:0> > 0) |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,
                                                        <<sum_1030@56:1>@68:0>:int)
      
      P[<f_sum_1166@64:2>](<f_sum_1166@64:0>:int,(<<f_sum_1166@64:1>@66:0> + (-1 * <f_sum_1166@64:0>)):int)|- P[<<f_sum_1166@64:1>@66:0>](
      <f_sum_1166@64:0>:int,<<f_sum_1166@64:1>@66:0>:int)
      
      P[<sum_1030@56:0>](<f_sum_1166@64:0>:int),
      P[<<sum_1030@59:1>@62:0>]((-1 + <f_sum_1166@64:0>):int,<f_sum_1166@64:2>:int), (
      <f_sum_1166@64:0> > 0) |- P[<f_sum_1166@64:2>](<f_sum_1166@64:0>:int,
                                                     <f_sum_1166@64:2>:int)
      
      P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
      |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
      
      P[<sum_1030@56:0>]((1 + <sum_1030@59:0>):int), ((1 + <sum_1030@59:0>) > 0)
      |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
      
      P[<sum_1030@53:0>]((1 + <sum_1030@56:0>):int), ((1 + <sum_1030@56:0>) > 0)
      |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
      
      P[<main_1032@51:0>](<sum_1030@53:0>:int)|- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
      
      P[<f_1168@49:0>](<main_1032@51:0>:int)|- P[<main_1032@51:0>](<main_1032@51:0>:int)
      
      |- P[<f_1168@49:0>](<f_1168@49:0>:int)
    call trees:
      <main_1165@46>
        <f_1168@49>
          <main_1032@51>
            <sum_1030@53>
              <sum_1030@56>
                <sum_1030@59>
                </<sum_1030@59:1>@62>
                <f_sum_1166@64>
                </<f_sum_1166@64:1>@66>
              </<sum_1030@56:1>@68>
              <f_sum_1166@70>
              </<f_sum_1166@70:1>@72>
            </<sum_1030@53:1>@74>
            <f_main_1167@76>
              <fail_1170@79>
    inlined horn clauses:
      P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
      
      P[<<sum_1030@53:1>@74:0>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int),
      (((3 * <f_main_1167@76:0>) > (3 + <f_main_1167@76:2>)) && <fail_1170@79:0>)
      |- P[<fail_1170@79:0>](<fail_1170@79:0>:bool)
      
      P[<sum_1030@53:0>](<sum_1030@53:0>:int),
      P[<<sum_1030@56:1>@68:0>]((-1 + <sum_1030@53:0>):int,(<<sum_1030@53:1>@74:0> + (-1 * <sum_1030@53:0>)):int),
      (<sum_1030@53:0> > 0) |- P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,
                                                         <<sum_1030@53:1>@74:0>:int)
      
      P[<sum_1030@56:0>](<sum_1030@56:0>:int),
      P[<<sum_1030@59:1>@62:0>]((-1 + <sum_1030@56:0>):int,(<<sum_1030@56:1>@68:0> + (-1 * <sum_1030@56:0>)):int),
      (<sum_1030@56:0> > 0) |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,
                                                         <<sum_1030@56:1>@68:0>:int)
      
      P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
      |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
      
      P[<sum_1030@56:0>]((1 + <sum_1030@59:0>):int), ((1 + <sum_1030@59:0>) > 0)
      |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
      
      P[<sum_1030@53:0>]((1 + <sum_1030@56:0>):int), ((1 + <sum_1030@56:0>) > 0)
      |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
      
      |- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
    begin ParamSubstInfer.infer(33533)[3]
      
    end ParamSubstInfer.infer(33533)[3] (0.201969 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(33535)[3]
      
    end RefTypeInfer.elim_coeffs(33535)[3] (0.001000 sec.)
    begin GenHcSolver.solve(33812)[3]
      Horn clauses:
        P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
        
        P[<<sum_1030@53:1>@74:0>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int),
        (((3 * <f_main_1167@76:0>) > (3 + <f_main_1167@76:2>)) && <fail_1170@79:0>)
        |- P[<fail_1170@79:0>](<fail_1170@79:0>:bool)
        
        P[<sum_1030@53:0>](<sum_1030@53:0>:int),
        P[<<sum_1030@56:1>@68:0>]((-1 + <sum_1030@53:0>):int,(<<sum_1030@53:1>@74:0> + (-1 * <sum_1030@53:0>)):int),
        (<sum_1030@53:0> > 0) |- P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,
                                                           <<sum_1030@53:1>@74:0>:int)
        
        P[<sum_1030@56:0>](<sum_1030@56:0>:int),
        P[<<sum_1030@59:1>@62:0>]((-1 + <sum_1030@56:0>):int,(<<sum_1030@56:1>@68:0> + (-1 * <sum_1030@56:0>)):int),
        (<sum_1030@56:0> > 0) |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,
                                                           <<sum_1030@56:1>@68:0>:int)
        
        P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
        |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
        
        P[<sum_1030@56:0>]((1 + <sum_1030@59:0>):int), ((1 + <sum_1030@59:0>) > 0)
        |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
        
        P[<sum_1030@53:0>]((1 + <sum_1030@56:0>):int), ((1 + <sum_1030@56:0>) > 0)
        |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
        
        |- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
      lower bounds:
        P[<sum_1030@53:0>](<sum_1030@53:0>:int) = true
        P[<sum_1030@56:0>](<sum_1030@56:0>:int) = ((1 + <sum_1030@56:0>) > 0)
        P[<sum_1030@59:0>](<sum_1030@59:0>:int) = ((1 + <sum_1030@59:0>) > 0)
        P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
        ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> = 0))
        P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,<<sum_1030@56:1>@68:0>:int) =
        ((<sum_1030@56:0> = 1) && (<<sum_1030@56:1>@68:0> = <sum_1030@56:0>))
        P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,<<sum_1030@53:1>@74:0>:int) =
        ((<sum_1030@53:0> = 2) && ((1 + <<sum_1030@53:1>@74:0>) = (2 * <sum_1030@53:0>)))
        P[<fail_1170@79:0>](<fail_1170@79:0>:bool) = false
      upper bounds:
        P[<<sum_1030@53:1>@74:0>](var109:int,var110:int) = ((3 * var109) <= (3 + var110))
        P[<<sum_1030@56:1>@68:0>](var105:int,var106:int) = (((1 + var105) <= 0) || ((2 * var105) <= (1 + var106)))
        P[<<sum_1030@59:1>@62:0>](var101:int,var102:int) = (((1 + var101) <= 0) || (var101 <= var102))
      begin GenHcSolver.classify_pids(39783)[4]
        output:
          [<<sum_1030@59:1>@62:0>;<<sum_1030@56:1>@68:0>;<<sum_1030@53:1>@74:0>]
      end GenHcSolver.classify_pids(39783)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(39921)[4]
        lb:(((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> = 0)) ||
            (((<sum_1030@59:0> = 1) && (<<sum_1030@59:1>@62:0> = <sum_1030@59:0>)) ||
             ((<sum_1030@59:0> = 2) && ((1 + <<sum_1030@59:1>@62:0>) = (2 * <sum_1030@59:0>)))))
        nub:((not (((1 + <sum_1030@59:0>) <= 0) || (<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>))) ||
             ((not (((1 + <sum_1030@59:0>) <= 0) || ((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)))) ||
              (not ((3 * <sum_1030@59:0>) <= (3 + <<sum_1030@59:1>@62:0>)))))
        lb':(((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> = 0)) ||
             (((<sum_1030@59:0> = 1) && (<<sum_1030@59:1>@62:0> = <sum_1030@59:0>)) ||
              ((<sum_1030@59:0> = 2) && ((1 + <<sum_1030@59:1>@62:0>) = (2 * <sum_1030@59:0>)))))
        nub':((not (((1 + <sum_1030@59:0>) <= 0) || (<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>))) ||
              ((not (((1 + <sum_1030@59:0>) <= 0) || ((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)))) ||
               (not ((3 * <sum_1030@59:0>) <= (3 + <<sum_1030@59:1>@62:0>)))))
        begin InterpProver.interpolate(39922)[5]
          begin InterpProver.interpolate_fresh(39923)[6]
            begin InterpProver.interpolate_log(39924)[7]
              input1: (((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> = 0)) ||
                       (((<sum_1030@59:0> = 1) && (<<sum_1030@59:1>@62:0> = <sum_1030@59:0>)) ||
                        ((<sum_1030@59:0> = 2) && ((1 + <<sum_1030@59:1>@62:0>) = (2 * <sum_1030@59:0>)))))
              input2: ((not (((1 + <sum_1030@59:0>) <= 0) || (<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>))) ||
                       ((not (((1 + <sum_1030@59:0>) <= 0) || ((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)))) ||
                        (not ((3 * <sum_1030@59:0>) <= (3 + <<sum_1030@59:1>@62:0>)))))
              begin InterpProver.interpolate_check(39925)[8]
                begin InterpProver.interpolate_simplify(39926)[9]
                  begin InterpProver.interpolate_quick(40106)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(40115)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(40116)[12]
                        begin CsisatInterface.interpolate_csisat_log(40117)[13]
                          input1: ((0 = v_sep_sum_1030_sep_59_sep_0 & 0 = v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) | (1 = v_sep_sum_1030_sep_59_sep_0 & v_sep_sum_1030_sep_59_sep_0 = v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) | (2 = v_sep_sum_1030_sep_59_sep_0 & (1 + v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) = 2*v_sep_sum_1030_sep_59_sep_0))
                          input2: ((((1 + v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= v_sep_sum_1030_sep_59_sep_0 | (2 + v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= 2*v_sep_sum_1030_sep_59_sep_0) & 1 <= (1 + v_sep_sum_1030_sep_59_sep_0)) | (4 + v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= 3*v_sep_sum_1030_sep_59_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(40118)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(40118)[14] (0.014997 sec.)
                          output: ((v_sep_sum_1030_sep_59_sep_0 <= 0 | (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 | (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) & ((v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 | (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0) & ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 | (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2. | (-0.5*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 1.5*v_sep_sum_1030_sep_59_sep_0) <= 0) & ((-1.33333333333*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2.66666666667*v_sep_sum_1030_sep_59_sep_0) <= 1.33333333333 | (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2. | (-0.5*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 1.5*v_sep_sum_1030_sep_59_sep_0) <= 0) & ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2. | (-1.*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4.*v_sep_sum_1030_sep_59_sep_0) <= 5. | (-0.5*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 1.5*v_sep_sum_1030_sep_59_sep_0) <= 0))
                          
                        end CsisatInterface.interpolate_csisat_log(40117)[13] (0.014997 sec.)
                        after simplification: ((v_sep_sum_1030_sep_59_sep_0 <= 0 | (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 | (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) & ((v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 | (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0) & ((-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 | (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 | (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) & ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 | (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 | (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) & ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 | (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 | (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5))
                        after dnf conversion: ((v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | (v_sep_sum_1030_sep_59_sep_0 <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (v_sep_sum_1030_sep_59_sep_0 + -1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= -1 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-4*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 8*v_sep_sum_1030_sep_59_sep_0) <= 4 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 0) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2) | ((-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 3*v_sep_sum_1030_sep_59_sep_0) <= 2 & (-1*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 5))
                        
                      end CsisatInterface.interpolate_csisat_post_process(40116)[12] (0.017997 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(40115)[11] (0.038994 sec.)
                    
                  end InterpProver.interpolate_quick(40106)[10] (0.038994 sec.)
                  begin minimizing # of disjunctions(52989)[10]
                    input: (((<sum_1030@59:0> <= 0) &&
                             (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                              (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                               ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>))))) ||
                            (((<sum_1030@59:0> <= 0) &&
                              (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                               (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                (((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                 ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)))))) ||
                             (((<sum_1030@59:0> <= 0) &&
                               (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                 (((3 * <sum_1030@59:0>) <= (2 + <<sum_1030@59:1>@62:0>)) &&
                                  ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)))))) ||
                              (((<sum_1030@59:0> <= 0) &&
                                (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                 (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                  ((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>)))) ||
                               (((<sum_1030@59:0> <= 0) &&
                                 (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                  (((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                   (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                    ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)))))) ||
                                (((<sum_1030@59:0> <= 0) &&
                                  (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                   (((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                    ((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>))))) ||
                                 (((<sum_1030@59:0> <= 0) &&
                                   (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                    (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                     ((3 * <sum_1030@59:0>) <= (2 + <<sum_1030@59:1>@62:0>))))) ||
                                  (((<sum_1030@59:0> <= 0) &&
                                    (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                     (((3 * <sum_1030@59:0>) <= (2 + <<sum_1030@59:1>@62:0>)) &&
                                      (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                       ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)))))) ||
                                   (((<sum_1030@59:0> <= 0) &&
                                     (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                      (((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                       ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>))))) ||
                                    (((<sum_1030@59:0> <= 0) &&
                                      (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                       ((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>))) ||
                                     (((<sum_1030@59:0> <= 0) &&
                                       (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                        ((3 * <sum_1030@59:0>) <= (2 + <<sum_1030@59:1>@62:0>)))) ||
                                      (((<sum_1030@59:0> <= 0) &&
                                        (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                         (((3 * <sum_1030@59:0>) <= (2 + <<sum_1030@59:1>@62:0>)) &&
                                          ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>))))) ||
                                       (((<sum_1030@59:0> <= 0) &&
                                         ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                          (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                           ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>))))) ||
                                        (((<sum_1030@59:0> <= 0) &&
                                          ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                           (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                            (((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                             ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)))))) ||
                                         (((<sum_1030@59:0> <= 0) &&
                                           ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                            (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                             (((3 * <sum_1030@59:0>) <= (2 + <<sum_1030@59:1>@62:0>)) &&
                                              ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)))))) ||
                                          (((<sum_1030@59:0> <= 0) &&
                                            ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                             (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                              ((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>)))) ||
                                           (((<sum_1030@59:0> <= 0) &&
                                             ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                              (((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                               (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)))))) ||
                                            (((<sum_1030@59:0> <= 0) &&
                                              ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                               (((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                ((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>))))) ||
                                             (((<sum_1030@59:0> <= 0) &&
                                               ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                 ((3 * <sum_1030@59:0>) <= (2 + <<sum_1030@59:1>@62:0>))))) ||
                                              (((<sum_1030@59:0> <= 0) &&
                                                ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                 (((3 * <sum_1030@59:0>) <= (2 + <<sum_1030@59:1>@62:0>)) &&
                                                  (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                   ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)))))) ||
                                               (((<sum_1030@59:0> <= 0) &&
                                                 ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                  (((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                   ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>))))) ||
                                                (((<sum_1030@59:0> <= 0) &&
                                                  ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                   ((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>))) ||
                                                 (((<sum_1030@59:0> <= 0) &&
                                                   ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                    ((3 * <sum_1030@59:0>) <= (2 + <<sum_1030@59:1>@62:0>)))) ||
                                                  (((<sum_1030@59:0> <= 0) &&
                                                    ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                     (((3 * <sum_1030@59:0>) <= (2 + <<sum_1030@59:1>@62:0>)) &&
                                                      ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>))))) ||
                                                   ((((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                     (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                      ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)))) ||
                                                    ((((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                      (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                       (((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                        ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>))))) ||
                                                     ((((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                       (((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                        (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                         ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>))))) ||
                                                      ((((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                        (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                         (((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                          ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>))))) ||
                                                       ((((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                         (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                          ((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>))) ||
                                                        ((((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                          (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                           ((3 * <sum_1030@59:0>) <= (2 + <<sum_1030@59:1>@62:0>)))) ||
                                                         ((((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                           (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                            (((3 * <sum_1030@59:0>) <= (2 + <<sum_1030@59:1>@62:0>)) &&
                                                             ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>))))) ||
                                                          (((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                            (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                             ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)))) ||
                                                           (((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                             (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                              (((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                               ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>))))) ||
                                                            ((((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                              ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                               (((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>))))) ||
                                                             ((((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                               ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                                ((3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>))) ||
                                                              ((((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                                ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                                 ((3 * <sum_1030@59:0>) <= (2 + <<sum_1030@59:1>@62:0>)))) ||
                                                               ((((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                                                                 ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                                  (((
                                                                    3 * <sum_1030@59:0>) <=
                                                                    (
                                                                    2 + <<sum_1030@59:1>@62:0>)) &&
                                                                   ((
                                                                    4 * <sum_1030@59:0>) <=
                                                                    (
                                                                    5 + <<sum_1030@59:1>@62:0>))))) ||
                                                                ((((3 * <sum_1030@59:0>) <=
                                                                   (2 + <<sum_1030@59:1>@62:0>)) &&
                                                                  (((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                   ((
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    4 * <sum_1030@59:0>) <=
                                                                    (
                                                                    5 + <<sum_1030@59:1>@62:0>))))) ||
                                                                 ((((1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                   ((
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>))) ||
                                                                  (((
                                                                    (1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    3 * <sum_1030@59:0>) <=
                                                                    (
                                                                    2 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    4 * <sum_1030@59:0>) <=
                                                                    (
                                                                    5 + <<sum_1030@59:1>@62:0>))))) ||
                                                                   ((
                                                                    (
                                                                    (3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    (3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    4 * <sum_1030@59:0>) <=
                                                                    (
                                                                    5 + <<sum_1030@59:1>@62:0>))))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    (3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>)) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    (3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    4 * <sum_1030@59:0>) <=
                                                                    (
                                                                    5 + <<sum_1030@59:1>@62:0>)))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    (1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    (1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    3 * <sum_1030@59:0>) <=
                                                                    (
                                                                    2 + <<sum_1030@59:1>@62:0>)))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    (1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    3 * <sum_1030@59:0>) <=
                                                                    (
                                                                    2 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    4 * <sum_1030@59:0>) <=
                                                                    (
                                                                    5 + <<sum_1030@59:1>@62:0>))))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    (1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    4 * <sum_1030@59:0>) <=
                                                                    (
                                                                    5 + <<sum_1030@59:1>@62:0>)))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    (1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>)) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    (1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    3 * <sum_1030@59:0>) <=
                                                                    (
                                                                    2 + <<sum_1030@59:1>@62:0>))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    (1 + <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    3 * <sum_1030@59:0>) <=
                                                                    (
                                                                    2 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    4 * <sum_1030@59:0>) <=
                                                                    (
                                                                    5 + <<sum_1030@59:1>@62:0>)))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    <sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    3 * <sum_1030@59:0>) <=
                                                                    (
                                                                    2 + <<sum_1030@59:1>@62:0>))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    <sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    3 * <sum_1030@59:0>) <=
                                                                    (
                                                                    2 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    4 * <sum_1030@59:0>) <=
                                                                    (
                                                                    5 + <<sum_1030@59:1>@62:0>))))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    <sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    <sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    3 * <sum_1030@59:0>) <=
                                                                    (
                                                                    2 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    4 * <sum_1030@59:0>) <=
                                                                    (
                                                                    5 + <<sum_1030@59:1>@62:0>))))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    <sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    4 * <sum_1030@59:0>) <=
                                                                    (
                                                                    5 + <<sum_1030@59:1>@62:0>))))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    <sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    4 * <sum_1030@59:0>) <=
                                                                    (
                                                                    5 + <<sum_1030@59:1>@62:0>)))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    <sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    <sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    3 * <sum_1030@59:0>) <=
                                                                    (
                                                                    2 + <<sum_1030@59:1>@62:0>)))) ||
                                                                    (
                                                                    (
                                                                    (
                                                                    <sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    4 * <sum_1030@59:0>) <=
                                                                    (
                                                                    5 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (3 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>))) ||
                                                                    (
                                                                    (
                                                                    <sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    4 * <sum_1030@59:0>) <=
                                                                    (
                                                                    5 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    (
                                                                    3 * <sum_1030@59:0>) <=
                                                                    (
                                                                    2 + <<sum_1030@59:1>@62:0>)) &&
                                                                    (
                                                                    (
                                                                    2 * <sum_1030@59:0>) <=
                                                                    (
                                                                    1 + <<sum_1030@59:1>@62:0>)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                    output: ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                             (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                              ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>))))
                  end minimizing # of disjunctions(52989)[10] (2.586606 sec.)
                  begin minimizing # of conjunctions(248968)[10]
                    input: ((<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>) &&
                            (((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)) &&
                             ((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>))))
                    output: (((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)) &&
                             (<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>))
                  end minimizing # of conjunctions(248968)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(39926)[9] (2.906558 sec.)
                
              end InterpProver.interpolate_check(39925)[8] (2.906558 sec.)
              output: (((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)) &&
                       (<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>))
            end InterpProver.interpolate_log(39924)[7] (2.906558 sec.)
            
          end InterpProver.interpolate_fresh(39923)[6] (2.906558 sec.)
          
        end InterpProver.interpolate(39922)[5] (2.906558 sec.)
        output:
          P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
          (((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)) && (<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>))
          P[<<sum_1030@56:1>@68:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
          (((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)) && (<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>))
          P[<<sum_1030@53:1>@74:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
          (((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)) && (<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>))
      end ApronInterface.convex_hull_interpolate(39921)[4] (2.906558 sec.)
      Horn clauses:
        P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
        
        P[<sum_1030@53:0>](<sum_1030@53:0>:int),
        P[<<sum_1030@56:1>@68:0>]((-1 + <sum_1030@53:0>):int,(<<sum_1030@53:1>@74:0> + (-1 * <sum_1030@53:0>)):int),
        ((<sum_1030@53:0> > 0) &&
         (((4 * <sum_1030@53:0>) > (5 + <<sum_1030@53:1>@74:0>)) || (<sum_1030@53:0> > <<sum_1030@53:1>@74:0>))) |- bot
        
        P[<sum_1030@56:0>](<sum_1030@56:0>:int),
        P[<<sum_1030@59:1>@62:0>]((-1 + <sum_1030@56:0>):int,(<<sum_1030@56:1>@68:0> + (-1 * <sum_1030@56:0>)):int),
        (<sum_1030@56:0> > 0) |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,
                                                           <<sum_1030@56:1>@68:0>:int)
        
        P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
        |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
        
        P[<sum_1030@56:0>]((1 + <sum_1030@59:0>):int), ((1 + <sum_1030@59:0>) > 0)
        |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
        
        P[<sum_1030@53:0>]((1 + <sum_1030@56:0>):int), ((1 + <sum_1030@56:0>) > 0)
        |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
        
        |- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
      lower bounds:
        P[<sum_1030@53:0>](<sum_1030@53:0>:int) = true
        P[<fail_1170@79:0>](var115:bool) = false
        P[<sum_1030@56:0>](<sum_1030@56:0>:int) = ((1 + <sum_1030@56:0>) > 0)
        P[<sum_1030@59:0>](<sum_1030@59:0>:int) = ((1 + <sum_1030@59:0>) > 0)
        P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
        ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> = 0))
        P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,<<sum_1030@56:1>@68:0>:int) =
        ((<sum_1030@56:0> = 1) && (<<sum_1030@56:1>@68:0> = <sum_1030@56:0>))
      upper bounds:
        P[<sum_1030@59:0>](var124:int) = true
        P[<sum_1030@56:0>](var121:int) = true
        P[<sum_1030@53:0>](var118:int) = true
      begin GenHcSolver.classify_pids(257177)[4]
        output:
          [<sum_1030@53:0>;<sum_1030@56:0>;<sum_1030@59:0>]
      end GenHcSolver.classify_pids(257177)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(257198)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(257199)[5]
          begin InterpProver.interpolate_fresh(257200)[6]
            begin InterpProver.interpolate_log(257201)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(257202)[8]
                begin InterpProver.interpolate_simplify(257203)[9]
                  begin InterpProver.interpolate_quick(257216)[10]
                    
                  end InterpProver.interpolate_quick(257216)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(257203)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(257202)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(257201)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(257200)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(257199)[5] (0.000000 sec.)
        output:
          P[<sum_1030@53:0>](<sum_1030@53:0>:int) = true
          P[<sum_1030@56:0>](<sum_1030@53:0>:int) = true
          P[<sum_1030@59:0>](<sum_1030@53:0>:int) = true
      end ApronInterface.convex_hull_interpolate(257198)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
        
        P[<<sum_1030@56:1>@68:0>]((-1 + <sum_1030@53:0>):int,(<<sum_1030@53:1>@74:0> + (-1 * <sum_1030@53:0>)):int),
        ((<sum_1030@53:0> > 0) &&
         (((4 * <sum_1030@53:0>) > (5 + <<sum_1030@53:1>@74:0>)) || (<sum_1030@53:0> > <<sum_1030@53:1>@74:0>))) |- bot
        
        P[<<sum_1030@59:1>@62:0>]((-1 + <sum_1030@56:0>):int,(<<sum_1030@56:1>@68:0> + (-1 * <sum_1030@56:0>)):int),
        (<sum_1030@56:0> > 0) |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,
                                                           <<sum_1030@56:1>@68:0>:int)
        
         ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
        |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
      lower bounds:
        P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
        ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
        P[<fail_1170@79:0>](var129:bool) = false
        P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,<<sum_1030@56:1>@68:0>:int) =
        ((<sum_1030@56:0> = 1) && (<<sum_1030@56:1>@68:0> = <sum_1030@56:0>))
      upper bounds:
        P[<<sum_1030@56:1>@68:0>](var136:int,var137:int) =
        (((1 + var136) <= 0) || (((3 * var136) <= (2 + var137)) && (0 <= var137)))
        P[<<sum_1030@59:1>@62:0>](var132:int,var133:int) =
        (((1 + var132) <= 0) || (((2 * var132) <= var133) && (0 <= (1 + (var132 + var133)))))
      begin GenHcSolver.classify_pids(262927)[4]
        output:
          [<<sum_1030@56:1>@68:0>],[<<sum_1030@59:1>@62:0>]
      end GenHcSolver.classify_pids(262927)[4] (0.001000 sec.)
      lb:((<sum_1030@56:0> = 1) && (<<sum_1030@56:1>@68:0> = <sum_1030@56:0>))
      nub:(not
             (((1 + <sum_1030@56:0>) <= 0) ||
              (((3 * <sum_1030@56:0>) <= (2 + <<sum_1030@56:1>@68:0>)) && (0 <= <<sum_1030@56:1>@68:0>))))
      begin ApronInterface.convex_hull_interpolate(263104)[4]
        lb:((<sum_1030@56:0> = 1) && (<<sum_1030@56:1>@68:0> = <sum_1030@56:0>))
        nub:(not
               (((1 + <sum_1030@56:0>) <= 0) ||
                (((3 * <sum_1030@56:0>) <= (2 + <<sum_1030@56:1>@68:0>)) && (0 <= <<sum_1030@56:1>@68:0>))))
        lb':((<sum_1030@56:0> = 1) && (<<sum_1030@56:1>@68:0> = <sum_1030@56:0>))
        nub':(not
                (((1 + <sum_1030@56:0>) <= 0) ||
                 (((3 * <sum_1030@56:0>) <= (2 + <<sum_1030@56:1>@68:0>)) && (0 <= <<sum_1030@56:1>@68:0>))))
        begin InterpProver.interpolate(263105)[5]
          begin InterpProver.interpolate_fresh(263106)[6]
            begin InterpProver.interpolate_log(263107)[7]
              input1: ((<sum_1030@56:0> = 1) && (<<sum_1030@56:1>@68:0> = <sum_1030@56:0>))
              input2: (not
                         (((1 + <sum_1030@56:0>) <= 0) ||
                          (((3 * <sum_1030@56:0>) <= (2 + <<sum_1030@56:1>@68:0>)) && (0 <= <<sum_1030@56:1>@68:0>))))
              begin InterpProver.interpolate_check(263108)[8]
                begin InterpProver.interpolate_simplify(263109)[9]
                  begin InterpProver.interpolate_quick(263200)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(263209)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(263210)[12]
                        begin CsisatInterface.interpolate_csisat_log(263211)[13]
                          input1: (1 = v_sep_sum_1030_sep_56_sep_0 & v_sep_sum_1030_sep_56_sep_0 = v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0)
                          input2: (((1 + v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0) <= 0 | (3 + v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0) <= 3*v_sep_sum_1030_sep_56_sep_0) & 1 <= (1 + v_sep_sum_1030_sep_56_sep_0))
                          begin CsisatInterface.interpolate_csisat_raw(263212)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(263212)[14] (0.000000 sec.)
                          output: ((-2.*v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0 + 6.*v_sep_sum_1030_sep_56_sep_0) <= 4. & -1*v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0 <= -1)
                          
                        end CsisatInterface.interpolate_csisat_log(263211)[13] (0.001000 sec.)
                        after simplification: ((-2*v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0 + 6*v_sep_sum_1030_sep_56_sep_0) <= 4 & -1*v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0 <= -1)
                        after dnf conversion: (((-2*v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0 + 6*v_sep_sum_1030_sep_56_sep_0) <= 4 & -1*v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0 <= -1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(263210)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(263209)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(263200)[10] (0.001999 sec.)
                  begin minimizing # of conjunctions(263233)[10]
                    input: (((3 * <sum_1030@56:0>) <= (2 + <<sum_1030@56:1>@68:0>)) && (1 <= <<sum_1030@56:1>@68:0>))
                    output: ((1 <= <<sum_1030@56:1>@68:0>) && ((3 * <sum_1030@56:0>) <= (2 + <<sum_1030@56:1>@68:0>)))
                  end minimizing # of conjunctions(263233)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(263109)[9] (0.002999 sec.)
                
              end InterpProver.interpolate_check(263108)[8] (0.002999 sec.)
              output: ((1 <= <<sum_1030@56:1>@68:0>) && ((3 * <sum_1030@56:0>) <= (2 + <<sum_1030@56:1>@68:0>)))
            end InterpProver.interpolate_log(263107)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(263106)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(263105)[5] (0.002999 sec.)
        output:
          P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,<<sum_1030@56:1>@68:0>:int) =
          ((1 <= <<sum_1030@56:1>@68:0>) && ((3 * <sum_1030@56:0>) <= (2 + <<sum_1030@56:1>@68:0>)))
      end ApronInterface.convex_hull_interpolate(263104)[4] (0.002999 sec.)
      Horn clauses:
        P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
        
        P[<<sum_1030@59:1>@62:0>]((-1 + <sum_1030@56:0>):int,(<<sum_1030@56:1>@68:0> + (-1 * <sum_1030@56:0>)):int),
        ((<sum_1030@56:0> > 0) &&
         ((1 > <<sum_1030@56:1>@68:0>) || ((3 * <sum_1030@56:0>) > (2 + <<sum_1030@56:1>@68:0>)))) |- bot
        
         ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
        |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
      lower bounds:
        P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
        ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
        P[<fail_1170@79:0>](var139:bool) = false
      upper bounds:
        P[<fail_1170@79:0>](var142:bool) = true
      begin GenHcSolver.classify_pids(264678)[4]
        output:
          [<fail_1170@79:0>]
      end GenHcSolver.classify_pids(264678)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(264681)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(264682)[5]
          begin InterpProver.interpolate_fresh(264683)[6]
            begin InterpProver.interpolate_log(264684)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(264685)[8]
                begin InterpProver.interpolate_simplify(264686)[9]
                  begin InterpProver.interpolate_quick(264699)[10]
                    
                  end InterpProver.interpolate_quick(264699)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(264703)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(264703)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(264686)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(264685)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(264684)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(264683)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(264682)[5] (0.000000 sec.)
        output:
          P[<fail_1170@79:0>](var139:bool) = false
      end ApronInterface.convex_hull_interpolate(264681)[4] (0.000000 sec.)
      Horn clauses:
        P[<<sum_1030@59:1>@62:0>]((-1 + <sum_1030@56:0>):int,(<<sum_1030@56:1>@68:0> + (-1 * <sum_1030@56:0>)):int),
        ((<sum_1030@56:0> > 0) &&
         ((1 > <<sum_1030@56:1>@68:0>) || ((3 * <sum_1030@56:0>) > (2 + <<sum_1030@56:1>@68:0>)))) |- bot
        
         ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
        |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
      lower bounds:
        P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
        ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
      upper bounds:
        P[<<sum_1030@59:1>@62:0>](var143:int,var144:int) =
        (((1 + var143) <= 0) || ((0 <= (var144 + var143)) && ((2 * var143) <= var144)))
      begin GenHcSolver.classify_pids(266398)[4]
        output:
          [<<sum_1030@59:1>@62:0>]
      end GenHcSolver.classify_pids(266398)[4] (0.000000 sec.)
      lb:((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
      nub:(not
             (((1 + <sum_1030@59:0>) <= 0) ||
              ((0 <= (<<sum_1030@59:1>@62:0> + <sum_1030@59:0>)) && ((2 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>))))
      begin ApronInterface.convex_hull_interpolate(266401)[4]
        lb:((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
        nub:(not
               (((1 + <sum_1030@59:0>) <= 0) ||
                ((0 <= (<<sum_1030@59:1>@62:0> + <sum_1030@59:0>)) && ((2 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>))))
        lb':((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
        nub':(not
                (((1 + <sum_1030@59:0>) <= 0) ||
                 ((0 <= (<<sum_1030@59:1>@62:0> + <sum_1030@59:0>)) &&
                  ((2 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>))))
        begin InterpProver.interpolate(266402)[5]
          begin InterpProver.interpolate_fresh(266403)[6]
            begin InterpProver.interpolate_log(266404)[7]
              input1: ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
              input2: (not
                         (((1 + <sum_1030@59:0>) <= 0) ||
                          ((0 <= (<<sum_1030@59:1>@62:0> + <sum_1030@59:0>)) &&
                           ((2 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>))))
              begin InterpProver.interpolate_check(266405)[8]
                begin InterpProver.interpolate_simplify(266406)[9]
                  begin InterpProver.interpolate_quick(266487)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(266496)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(266497)[12]
                        begin CsisatInterface.interpolate_csisat_log(266498)[13]
                          input1: (0 = v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 & v_sep_sum_1030_sep_59_sep_0 <= 0)
                          input2: (((1 + v_sep_sum_1030_sep_59_sep_0 + v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= 0 | (1 + v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= 2*v_sep_sum_1030_sep_59_sep_0) & 1 <= (1 + v_sep_sum_1030_sep_59_sep_0))
                          begin CsisatInterface.interpolate_csisat_raw(266499)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(266499)[14] (0.001000 sec.)
                          output: ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 0 & -2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 <= 0)
                          
                        end CsisatInterface.interpolate_csisat_log(266498)[13] (0.001000 sec.)
                        after simplification: ((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 0 & -2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 <= 0)
                        after dnf conversion: (((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 0 & -2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(266497)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(266496)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(266487)[10] (0.002000 sec.)
                  begin minimizing # of conjunctions(266514)[10]
                    input: (((2 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>) && (0 <= <<sum_1030@59:1>@62:0>))
                    output: ((2 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>)
                  end minimizing # of conjunctions(266514)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(266406)[9] (0.003000 sec.)
                
              end InterpProver.interpolate_check(266405)[8] (0.004000 sec.)
              output: ((2 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>)
            end InterpProver.interpolate_log(266404)[7] (0.004000 sec.)
            
          end InterpProver.interpolate_fresh(266403)[6] (0.004000 sec.)
          
        end InterpProver.interpolate(266402)[5] (0.004000 sec.)
        output:
          P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
          ((2 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>)
      end ApronInterface.convex_hull_interpolate(266401)[4] (0.004000 sec.)
      begin HcSolver.check_validity(266881)[4]
        input:
          P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
          
          P[<<sum_1030@53:1>@74:0>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int),
          (((3 * <f_main_1167@76:0>) > (3 + <f_main_1167@76:2>)) && <fail_1170@79:0>)
          |- P[<fail_1170@79:0>](<fail_1170@79:0>:bool)
          
          P[<sum_1030@53:0>](<sum_1030@53:0>:int),
          P[<<sum_1030@56:1>@68:0>]((-1 + <sum_1030@53:0>):int,(<<sum_1030@53:1>@74:0> + (-1 * <sum_1030@53:0>)):int),
          (<sum_1030@53:0> > 0) |- P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,
                                                             <<sum_1030@53:1>@74:0>:int)
          
          P[<sum_1030@56:0>](<sum_1030@56:0>:int),
          P[<<sum_1030@59:1>@62:0>]((-1 + <sum_1030@56:0>):int,(<<sum_1030@56:1>@68:0> + (-1 * <sum_1030@56:0>)):int),
          (<sum_1030@56:0> > 0) |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,
                                                             <<sum_1030@56:1>@68:0>:int)
          
          P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
          |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
          
          P[<sum_1030@56:0>]((1 + <sum_1030@59:0>):int), ((1 + <sum_1030@59:0>) > 0)
          |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
          
          P[<sum_1030@53:0>]((1 + <sum_1030@56:0>):int), ((1 + <sum_1030@56:0>) > 0)
          |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
          
          |- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(266881)[4] (0.004999 sec.)
      solution:
        P[<fail_1170@79:0>](var139:bool) = false
        P[<<sum_1030@53:1>@74:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
        (((4 * <sum_1030@59:0>) <= (5 + <<sum_1030@59:1>@62:0>)) && (<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>))
        P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,<<sum_1030@56:1>@68:0>:int) =
        ((1 <= <<sum_1030@56:1>@68:0>) && ((3 * <sum_1030@56:0>) <= (2 + <<sum_1030@56:1>@68:0>)))
        P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
        ((2 * <sum_1030@59:0>) <= <<sum_1030@59:1>@62:0>)
        P[<sum_1030@59:0>](<sum_1030@53:0>:int) = true
        P[<sum_1030@56:0>](<sum_1030@53:0>:int) = true
        P[<sum_1030@53:0>](<sum_1030@53:0>:int) = true
    end GenHcSolver.solve(33812)[3] (3.023541 sec.)
    begin GenHcSolver.solve(267976)[3]
      Horn clauses:
        P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
        
        P[<<sum_1030@53:1>@74:0>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int),
        (((3 * <f_main_1167@76:0>) > (3 + <f_main_1167@76:2>)) && <fail_1170@79:0>)
        |- P[<fail_1170@79:0>](<fail_1170@79:0>:bool)
        
        P[<sum_1030@53:0>](<sum_1030@53:0>:int),
        P[<<sum_1030@56:1>@68:0>]((-1 + <sum_1030@53:0>):int,(<<sum_1030@53:1>@74:0> + (-1 * <sum_1030@53:0>)):int),
        (<sum_1030@53:0> > 0) |- P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,
                                                           <<sum_1030@53:1>@74:0>:int)
        
        P[<sum_1030@56:0>](<sum_1030@56:0>:int),
        P[<<sum_1030@59:1>@62:0>]((-1 + <sum_1030@56:0>):int,(<<sum_1030@56:1>@68:0> + (-1 * <sum_1030@56:0>)):int),
        (<sum_1030@56:0> > 0) |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,
                                                           <<sum_1030@56:1>@68:0>:int)
        
        P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
        |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
        
        P[<sum_1030@56:0>]((1 + <sum_1030@59:0>):int), ((1 + <sum_1030@59:0>) > 0)
        |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
        
        P[<sum_1030@53:0>]((1 + <sum_1030@56:0>):int), ((1 + <sum_1030@56:0>) > 0)
        |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
        
        |- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
      lower bounds:
        P[<sum_1030@53:0>](<sum_1030@53:0>:int) = true
        P[<sum_1030@56:0>](<sum_1030@56:0>:int) = ((1 + <sum_1030@56:0>) > 0)
        P[<sum_1030@59:0>](<sum_1030@59:0>:int) = ((1 + <sum_1030@59:0>) > 0)
        P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
        ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> = 0))
        P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,<<sum_1030@56:1>@68:0>:int) =
        ((<sum_1030@56:0> = 1) && (<<sum_1030@56:1>@68:0> = <sum_1030@56:0>))
        P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,<<sum_1030@53:1>@74:0>:int) =
        ((<sum_1030@53:0> = 2) && ((1 + <<sum_1030@53:1>@74:0>) = (2 * <sum_1030@53:0>)))
        P[<fail_1170@79:0>](<fail_1170@79:0>:bool) = false
      upper bounds:
        P[<<sum_1030@53:1>@74:0>](var155:int,var156:int) = ((3 * var155) <= (3 + var156))
        P[<<sum_1030@56:1>@68:0>](var151:int,var152:int) = (((1 + var151) <= 0) || ((2 * var151) <= (1 + var152)))
        P[<<sum_1030@59:1>@62:0>](var147:int,var148:int) = (((1 + var147) <= 0) || (var147 <= var148))
      begin GenHcSolver.classify_pids(273947)[4]
        output:
          [<<sum_1030@59:1>@62:0>;<<sum_1030@56:1>@68:0>;<<sum_1030@53:1>@74:0>]
      end GenHcSolver.classify_pids(273947)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(274085)[4]
        lb:(((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> = 0)) ||
            (((<sum_1030@59:0> = 1) && (<<sum_1030@59:1>@62:0> = <sum_1030@59:0>)) ||
             ((<sum_1030@59:0> = 2) && ((1 + <<sum_1030@59:1>@62:0>) = (2 * <sum_1030@59:0>)))))
        nub:((not (((1 + <sum_1030@59:0>) <= 0) || (<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>))) ||
             ((not (((1 + <sum_1030@59:0>) <= 0) || ((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>)))) ||
              (not ((3 * <sum_1030@59:0>) <= (3 + <<sum_1030@59:1>@62:0>)))))
        begin ExtFormula.Formula.case_analysis_boolean(274121)[5]
          ts: (((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> = 0)) ||
               (((<sum_1030@59:0> = 1) && (<<sum_1030@59:1>@62:0> = <sum_1030@59:0>)) ||
                ((<sum_1030@59:0> = 2) && ((1 + <<sum_1030@59:1>@62:0>) = (2 * <sum_1030@59:0>)))))
          
        end ExtFormula.Formula.case_analysis_boolean(274121)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(274181)[5]
          ts: (((3 * <sum_1030@59:0>) > (3 + <<sum_1030@59:1>@62:0>)) ||
               ((((1 + <sum_1030@59:0>) > 0) && (<sum_1030@59:0> > <<sum_1030@59:1>@62:0>)) ||
                (((1 + <sum_1030@59:0>) > 0) && ((2 * <sum_1030@59:0>) > (1 + <<sum_1030@59:1>@62:0>)))))
          
        end ExtFormula.Formula.case_analysis_boolean(274181)[5] (0.001000 sec.)
        lb':((((1 + <<sum_1030@59:1>@62:0>) + (-2 * <sum_1030@59:0>)) >= 0) &&
             (((<<sum_1030@59:1>@62:0> + (-1 * <sum_1030@59:0>)) >= 0) &&
              (((-2 * <<sum_1030@59:1>@62:0>) + (3 * <sum_1030@59:0>)) >= 0)))
        nub':(((-1 + (-1 * <<sum_1030@59:1>@62:0>)) + (3 * <sum_1030@59:0>)) >= 0)
        begin InterpProver.interpolate(274196)[5]
          begin InterpProver.interpolate_fresh(274197)[6]
            begin InterpProver.interpolate_log(274198)[7]
              input1: ((((1 + <<sum_1030@59:1>@62:0>) + (-2 * <sum_1030@59:0>)) >= 0) &&
                       (((<<sum_1030@59:1>@62:0> + (-1 * <sum_1030@59:0>)) >= 0) &&
                        (((-2 * <<sum_1030@59:1>@62:0>) + (3 * <sum_1030@59:0>)) >= 0)))
              input2: (((-1 + (-1 * <<sum_1030@59:1>@62:0>)) + (3 * <sum_1030@59:0>)) >= 0)
              begin InterpProver.interpolate_check(274199)[8]
                begin InterpProver.interpolate_simplify(274200)[9]
                  begin InterpProver.interpolate_quick(274291)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(274300)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(274301)[12]
                        begin CsisatInterface.interpolate_csisat_log(274302)[13]
                          input1: (v_sep_sum_1030_sep_59_sep_0 <= v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 & 2*v_sep_sum_1030_sep_59_sep_0 <= (1 + v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) & 2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 <= 3*v_sep_sum_1030_sep_59_sep_0)
                          input2: (1 + v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= 3*v_sep_sum_1030_sep_59_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(274303)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(274303)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(274302)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(274301)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(274300)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(274291)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(274200)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(274199)[8] (0.002000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(274198)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(274197)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(274196)[5] (0.002000 sec.)
        begin InterpProver.interpolate(274314)[5]
          begin InterpProver.interpolate_fresh(274315)[6]
            begin InterpProver.interpolate_log(274316)[7]
              input1: ((((1 + <<sum_1030@59:1>@62:0>) + (-2 * <sum_1030@59:0>)) >= 0) &&
                       (((<<sum_1030@59:1>@62:0> + (-1 * <sum_1030@59:0>)) >= 0) &&
                        (((-2 * <<sum_1030@59:1>@62:0>) + (3 * <sum_1030@59:0>)) >= 0)))
              input2: (not ((3 * <sum_1030@59:0>) <= (3 + <<sum_1030@59:1>@62:0>)))
              begin InterpProver.interpolate_check(274317)[8]
                begin InterpProver.interpolate_simplify(274318)[9]
                  begin InterpProver.interpolate_quick(274409)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(274418)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(274419)[12]
                        begin CsisatInterface.interpolate_csisat_log(274420)[13]
                          input1: (v_sep_sum_1030_sep_59_sep_0 <= v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 & 2*v_sep_sum_1030_sep_59_sep_0 <= (1 + v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) & 2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 <= 3*v_sep_sum_1030_sep_59_sep_0)
                          input2: (4 + v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= 3*v_sep_sum_1030_sep_59_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(274421)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(274421)[14] (0.000000 sec.)
                          output: (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 6*v_sep_sum_1030_sep_59_sep_0) <= 6
                          
                        end CsisatInterface.interpolate_csisat_log(274420)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 6*v_sep_sum_1030_sep_59_sep_0) <= 6
                        after dnf conversion: (((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 6*v_sep_sum_1030_sep_59_sep_0) <= 6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(274419)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(274418)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(274409)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(274318)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(274317)[8] (0.001999 sec.)
              output: ((3 * <sum_1030@59:0>) <= (3 + <<sum_1030@59:1>@62:0>))
            end InterpProver.interpolate_log(274316)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(274315)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(274314)[5] (0.001999 sec.)
        begin InterpProver.interpolate(274442)[5]
          begin InterpProver.interpolate_fresh(274443)[6]
            begin InterpProver.interpolate_log(274444)[7]
              input1: ((((1 + <<sum_1030@59:1>@62:0>) + (-2 * <sum_1030@59:0>)) >= 0) &&
                       (((<<sum_1030@59:1>@62:0> + (-1 * <sum_1030@59:0>)) >= 0) &&
                        (((-2 * <<sum_1030@59:1>@62:0>) + (3 * <sum_1030@59:0>)) >= 0)))
              input2: (not (((1 + <sum_1030@59:0>) <= 0) || ((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>))))
              begin InterpProver.interpolate_check(274445)[8]
                begin InterpProver.interpolate_simplify(274446)[9]
                  begin InterpProver.interpolate_quick(274567)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(274576)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(274577)[12]
                        begin CsisatInterface.interpolate_csisat_log(274578)[13]
                          input1: (v_sep_sum_1030_sep_59_sep_0 <= v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 & 2*v_sep_sum_1030_sep_59_sep_0 <= (1 + v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) & 2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 <= 3*v_sep_sum_1030_sep_59_sep_0)
                          input2: (1 <= (1 + v_sep_sum_1030_sep_59_sep_0) & (2 + v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= 2*v_sep_sum_1030_sep_59_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(274579)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(274579)[14] (0.000000 sec.)
                          output: (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2
                          
                        end CsisatInterface.interpolate_csisat_log(274578)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2
                        after dnf conversion: (((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 4*v_sep_sum_1030_sep_59_sep_0) <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(274577)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(274576)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(274567)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(274446)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(274445)[8] (0.002000 sec.)
              output: ((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>))
            end InterpProver.interpolate_log(274444)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(274443)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(274442)[5] (0.002000 sec.)
        begin InterpProver.interpolate(274616)[5]
          begin InterpProver.interpolate_fresh(274617)[6]
            begin InterpProver.interpolate_log(274618)[7]
              input1: ((((1 + <<sum_1030@59:1>@62:0>) + (-2 * <sum_1030@59:0>)) >= 0) &&
                       (((<<sum_1030@59:1>@62:0> + (-1 * <sum_1030@59:0>)) >= 0) &&
                        (((-2 * <<sum_1030@59:1>@62:0>) + (3 * <sum_1030@59:0>)) >= 0)))
              input2: (not (((1 + <sum_1030@59:0>) <= 0) || (<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>)))
              begin InterpProver.interpolate_check(274619)[8]
                begin InterpProver.interpolate_simplify(274620)[9]
                  begin InterpProver.interpolate_quick(274735)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(274744)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(274745)[12]
                        begin CsisatInterface.interpolate_csisat_log(274746)[13]
                          input1: (v_sep_sum_1030_sep_59_sep_0 <= v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 & 2*v_sep_sum_1030_sep_59_sep_0 <= (1 + v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) & 2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 <= 3*v_sep_sum_1030_sep_59_sep_0)
                          input2: (1 <= (1 + v_sep_sum_1030_sep_59_sep_0) & (1 + v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0) <= v_sep_sum_1030_sep_59_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(274747)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(274747)[14] (0.000000 sec.)
                          output: (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(274746)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0
                        after dnf conversion: (((-2*v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0 + 2*v_sep_sum_1030_sep_59_sep_0) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(274745)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(274744)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(274735)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(274620)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(274619)[8] (0.002999 sec.)
              output: (<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>)
            end InterpProver.interpolate_log(274618)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(274617)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(274616)[5] (0.002999 sec.)
        output:
          P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
          (<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>)
          P[<<sum_1030@56:1>@68:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
          ((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>))
          P[<<sum_1030@53:1>@74:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
          ((3 * <sum_1030@59:0>) <= (3 + <<sum_1030@59:1>@62:0>))
      end ApronInterface.convex_hull_interpolate(274085)[4] (0.010998 sec.)
      Horn clauses:
        P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
        
        P[<sum_1030@56:0>]((1 + <sum_1030@59:0>):int), ((1 + <sum_1030@59:0>) > 0)
        |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
        
        P[<sum_1030@53:0>]((1 + <sum_1030@56:0>):int), ((1 + <sum_1030@56:0>) > 0)
        |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
        
        |- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
      lower bounds:
        P[<sum_1030@53:0>](<sum_1030@53:0>:int) = true
        P[<fail_1170@79:0>](var161:bool) = false
        P[<sum_1030@56:0>](<sum_1030@56:0>:int) = ((1 + <sum_1030@56:0>) > 0)
        P[<sum_1030@59:0>](<sum_1030@59:0>:int) = ((1 + <sum_1030@59:0>) > 0)
      upper bounds:
        P[<sum_1030@59:0>](var170:int) = true
        P[<sum_1030@56:0>](var167:int) = true
        P[<sum_1030@53:0>](var164:int) = true
      begin GenHcSolver.classify_pids(277833)[4]
        output:
          [<sum_1030@53:0>;<sum_1030@56:0>;<sum_1030@59:0>]
      end GenHcSolver.classify_pids(277833)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(277854)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(277857)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(277857)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(277862)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(277862)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(277865)[5]
          begin InterpProver.interpolate_fresh(277866)[6]
            begin InterpProver.interpolate_log(277867)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(277868)[8]
                begin InterpProver.interpolate_simplify(277869)[9]
                  begin InterpProver.interpolate_quick(277883)[10]
                    
                  end InterpProver.interpolate_quick(277883)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(277869)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(277868)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(277867)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(277866)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(277865)[5] (0.000000 sec.)
        output:
          P[<sum_1030@53:0>](<sum_1030@53:0>:int) = true
          P[<sum_1030@56:0>](<sum_1030@53:0>:int) = true
          P[<sum_1030@59:0>](<sum_1030@53:0>:int) = true
      end ApronInterface.convex_hull_interpolate(277854)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
      lower bounds:
        P[<fail_1170@79:0>](var175:bool) = false
      upper bounds:
        P[<fail_1170@79:0>](var178:bool) = true
      begin GenHcSolver.classify_pids(278524)[4]
        output:
          [<fail_1170@79:0>]
      end GenHcSolver.classify_pids(278524)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(278527)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(278530)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(278530)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(278535)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(278535)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(278538)[5]
          begin InterpProver.interpolate_fresh(278539)[6]
            begin InterpProver.interpolate_log(278540)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(278541)[8]
                begin InterpProver.interpolate_simplify(278542)[9]
                  begin InterpProver.interpolate_quick(278557)[10]
                    
                  end InterpProver.interpolate_quick(278557)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(278561)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(278561)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(278542)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(278541)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(278540)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(278539)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(278538)[5] (0.000000 sec.)
        output:
          P[<fail_1170@79:0>](var175:bool) = false
      end ApronInterface.convex_hull_interpolate(278527)[4] (0.000000 sec.)
      begin HcSolver.check_validity(278601)[4]
        input:
          P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
          
          P[<<sum_1030@53:1>@74:0>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int),
          (((3 * <f_main_1167@76:0>) > (3 + <f_main_1167@76:2>)) && <fail_1170@79:0>)
          |- P[<fail_1170@79:0>](<fail_1170@79:0>:bool)
          
          P[<sum_1030@53:0>](<sum_1030@53:0>:int),
          P[<<sum_1030@56:1>@68:0>]((-1 + <sum_1030@53:0>):int,(<<sum_1030@53:1>@74:0> + (-1 * <sum_1030@53:0>)):int),
          (<sum_1030@53:0> > 0) |- P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,
                                                             <<sum_1030@53:1>@74:0>:int)
          
          P[<sum_1030@56:0>](<sum_1030@56:0>:int),
          P[<<sum_1030@59:1>@62:0>]((-1 + <sum_1030@56:0>):int,(<<sum_1030@56:1>@68:0> + (-1 * <sum_1030@56:0>)):int),
          (<sum_1030@56:0> > 0) |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,
                                                             <<sum_1030@56:1>@68:0>:int)
          
          P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
          |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
          
          P[<sum_1030@56:0>]((1 + <sum_1030@59:0>):int), ((1 + <sum_1030@59:0>) > 0)
          |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
          
          P[<sum_1030@53:0>]((1 + <sum_1030@56:0>):int), ((1 + <sum_1030@56:0>) > 0)
          |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
          
          |- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(278601)[4] (0.001999 sec.)
      solution:
        P[<fail_1170@79:0>](var175:bool) = false
        P[<<sum_1030@53:1>@74:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
        ((3 * <sum_1030@59:0>) <= (3 + <<sum_1030@59:1>@62:0>))
        P[<<sum_1030@56:1>@68:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
        ((2 * <sum_1030@59:0>) <= (1 + <<sum_1030@59:1>@62:0>))
        P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int) =
        (<sum_1030@59:0> <= <<sum_1030@59:1>@62:0>)
        P[<sum_1030@59:0>](<sum_1030@53:0>:int) = true
        P[<sum_1030@56:0>](<sum_1030@53:0>:int) = true
        P[<sum_1030@53:0>](<sum_1030@53:0>:int) = true
    end GenHcSolver.solve(267976)[3] (0.048992 sec.)
    begin YhornInterface.solve(279214)[3]
      begin HcSolver.solve_ub(279215)[4]
        encoded:
          P[<fail_1170@79:0>](<fail_1170@79:0>:int)|- bot
          
          P[<<sum_1030@53:1>@74:0>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int),
          (((3 * <f_main_1167@76:0>) > (3 + <f_main_1167@76:2>)) && (<fail_1170@79:0> = 1))
          |- P[<fail_1170@79:0>](<fail_1170@79:0>:int)
          
          P[<sum_1030@53:0>](<sum_1030@53:0>:int),
          P[<<sum_1030@56:1>@68:0>]((-1 + <sum_1030@53:0>):int,(<<sum_1030@53:1>@74:0> + (-1 * <sum_1030@53:0>)):int),
          (<sum_1030@53:0> > 0) |- P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,
                                                             <<sum_1030@53:1>@74:0>:int)
          
          P[<sum_1030@56:0>](<sum_1030@56:0>:int),
          P[<<sum_1030@59:1>@62:0>]((-1 + <sum_1030@56:0>):int,(<<sum_1030@56:1>@68:0> + (-1 * <sum_1030@56:0>)):int),
          (<sum_1030@56:0> > 0) |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,
                                                             <<sum_1030@56:1>@68:0>:int)
          
          P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
          |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
          
          P[<sum_1030@56:0>]((1 + <sum_1030@59:0>):int), ((1 + <sum_1030@59:0>) > 0)
          |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
          
          P[<sum_1030@53:0>]((1 + <sum_1030@56:0>):int), ((1 + <sum_1030@56:0>) > 0)
          |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
          
          |- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
        input to Yhorn:
          P[<fail_1170@79:0>](<fail_1170@79:0>:int)|- bot
          
          P[<<sum_1030@53:1>@74:0>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int),
          (((3 * <f_main_1167@76:0>) > (3 + <f_main_1167@76:2>)) && (<fail_1170@79:0> = 1))
          |- P[<fail_1170@79:0>](<fail_1170@79:0>:int)
          
          P[<sum_1030@53:0>](<sum_1030@53:0>:int),
          P[<<sum_1030@56:1>@68:0>](var179:int,var180:int),
          (((var180 + <sum_1030@53:0>) = <<sum_1030@53:1>@74:0>) &&
           (((1 + var179) = <sum_1030@53:0>) && (<sum_1030@53:0> > 0)))
          |- P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,<<sum_1030@53:1>@74:0>:int)
          
          P[<sum_1030@56:0>](<sum_1030@56:0>:int),
          P[<<sum_1030@59:1>@62:0>](var181:int,var182:int),
          (((var182 + <sum_1030@56:0>) = <<sum_1030@56:1>@68:0>) &&
           (((1 + var181) = <sum_1030@56:0>) && (<sum_1030@56:0> > 0)))
          |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,<<sum_1030@56:1>@68:0>:int)
          
          P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<sum_1030@59:0> <= 0) && (<<sum_1030@59:1>@62:0> = 0))
          |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
          
          P[<sum_1030@56:0>](var183:int), ((var183 = (1 + <sum_1030@59:0>)) && ((1 + <sum_1030@59:0>) > 0))
          |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
          
          P[<sum_1030@53:0>](var184:int), ((var184 = (1 + <sum_1030@56:0>)) && ((1 + <sum_1030@56:0>) > 0))
          |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1170_sep_79_sep_0($182)) -> 1=0.
(($182-1=0) & (3$183-$184-3>0)) & (v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0($183,$184)) -> v_sep_fail_1170_sep_79_sep_0($182).
(($185>0) & (-$185+$186+1=0) & ($185+$187-$188=0)) & (v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0($186,$187)) & (v_sep_sum_1030_sep_53_sep_0($185)) -> v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0($185,$188).
(($189>0) & (-$189+$190+1=0) & ($189+$191-$192=0)) & (v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0($190,$191)) & (v_sep_sum_1030_sep_56_sep_0($189)) -> v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0($189,$192).
(($193=0) & ($194<=0)) & (v_sep_sum_1030_sep_59_sep_0($194)) -> v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0($194,$193).
(($194+1>0) & (-$194+$195-1=0)) & (v_sep_sum_1030_sep_56_sep_0($195)) -> v_sep_sum_1030_sep_59_sep_0($194).
(($189+1>0) & (-$189+$196-1=0)) & (v_sep_sum_1030_sep_53_sep_0($196)) -> v_sep_sum_1030_sep_56_sep_0($189).
0=0 -> v_sep_sum_1030_sep_53_sep_0($185).


v_sep_fail_1170_sep_79_sep_0: X
v_sep_sum_1030_sep_53_sep_0: X
v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0: X
v_sep_sum_1030_sep_56_sep_0: X
v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
..........
v_sep_fail_1170_sep_79_sep_0: X
v_sep_sum_1030_sep_53_sep_0: X
v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0: X
v_sep_sum_1030_sep_56_sep_0: X
v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
...
v_sep_fail_1170_sep_79_sep_0: X
v_sep_sum_1030_sep_53_sep_0: X
v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0: X
v_sep_sum_1030_sep_56_sep_0: X
v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
.....
v_sep_fail_1170_sep_79_sep_0: X
v_sep_sum_1030_sep_53_sep_0: X
v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0: X
v_sep_sum_1030_sep_56_sep_0: X
v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
.......
v_sep_fail_1170_sep_79_sep_0: X
v_sep_sum_1030_sep_53_sep_0: X
v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0: X
v_sep_sum_1030_sep_56_sep_0: X
v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
.........
v_sep_fail_1170_sep_79_sep_0: X
v_sep_sum_1030_sep_53_sep_0: X
v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0: X
v_sep_sum_1030_sep_56_sep_0: X
v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0: X
v_sep_sum_1030_sep_59_sep_0: X
v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0: X
..........(0=0) & (v_sep_fail_1170_sep_79_sep_0($182)) -> 1=0.
(($182-1=0) & (3$183-$184-3>0)) & (v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0($183,$184)) -> v_sep_fail_1170_sep_79_sep_0($182).
(($185>0) & (-$185+$186+1=0) & ($185+$187-$188=0)) & (v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0($186,$187)) & (v_sep_sum_1030_sep_53_sep_0($185)) -> v_sep_sum_1030_sep_53_sep_1_sep_74_sep_0($185,$188).
(($189>0) & (-$189+$190+1=0) & ($189+$191-$192=0)) & (v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0($190,$191)) & (v_sep_sum_1030_sep_56_sep_0($189)) -> v_sep_sum_1030_sep_56_sep_1_sep_68_sep_0($189,$192).
(($193=0) & ($194<=0)) & (v_sep_sum_1030_sep_59_sep_0($194)) -> v_sep_sum_1030_sep_59_sep_1_sep_62_sep_0($194,$193).
(($194+1>0) & (-$194+$195-1=0)) & (v_sep_sum_1030_sep_56_sep_0($195)) -> v_sep_sum_1030_sep_59_sep_0($194).
(($189+1>0) & (-$189+$196-1=0)) & (v_sep_sum_1030_sep_53_sep_0($196)) -> v_sep_sum_1030_sep_56_sep_0($189).
0=0 -> v_sep_sum_1030_sep_53_sep_0($185).

          |- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
        solution:
          P[<fail_1170@79:0>]($197:bool) = false
          P[<sum_1030@53:0>]($210:int) = true
          P[<<sum_1030@53:1>@74:0>]($200:int,$202:int) = ((3 * $200) <= (3 + $202))
          P[<sum_1030@56:0>]($218:int) = true
          P[<<sum_1030@56:1>@68:0>]($205:int,$207:int) = ((2 * $205) <= (1 + $207))
          P[<sum_1030@59:0>]($221:int) = true
          P[<<sum_1030@59:1>@62:0>]($213:int,$215:int) = ($213 <= $215)
        
      end HcSolver.solve_ub(279215)[4] (0.035995 sec.)
      begin HcSolver.check_validity(279639)[4]
        input:
          P[<fail_1170@79:0>](<fail_1170@79:0>:bool)|- bot
          
          P[<<sum_1030@53:1>@74:0>](<f_main_1167@76:0>:int,<f_main_1167@76:2>:int),
          (((3 * <f_main_1167@76:0>) > (3 + <f_main_1167@76:2>)) && <fail_1170@79:0>)
          |- P[<fail_1170@79:0>](<fail_1170@79:0>:bool)
          
          P[<sum_1030@53:0>](<sum_1030@53:0>:int),
          P[<<sum_1030@56:1>@68:0>]((-1 + <sum_1030@53:0>):int,(<<sum_1030@53:1>@74:0> + (-1 * <sum_1030@53:0>)):int),
          (<sum_1030@53:0> > 0) |- P[<<sum_1030@53:1>@74:0>](<sum_1030@53:0>:int,
                                                             <<sum_1030@53:1>@74:0>:int)
          
          P[<sum_1030@56:0>](<sum_1030@56:0>:int),
          P[<<sum_1030@59:1>@62:0>]((-1 + <sum_1030@56:0>):int,(<<sum_1030@56:1>@68:0> + (-1 * <sum_1030@56:0>)):int),
          (<sum_1030@56:0> > 0) |- P[<<sum_1030@56:1>@68:0>](<sum_1030@56:0>:int,
                                                             <<sum_1030@56:1>@68:0>:int)
          
          P[<sum_1030@59:0>](<sum_1030@59:0>:int), ((<<sum_1030@59:1>@62:0> = 0) && (<sum_1030@59:0> <= 0))
          |- P[<<sum_1030@59:1>@62:0>](<sum_1030@59:0>:int,<<sum_1030@59:1>@62:0>:int)
          
          P[<sum_1030@56:0>]((1 + <sum_1030@59:0>):int), ((1 + <sum_1030@59:0>) > 0)
          |- P[<sum_1030@59:0>](<sum_1030@59:0>:int)
          
          P[<sum_1030@53:0>]((1 + <sum_1030@56:0>):int), ((1 + <sum_1030@56:0>) > 0)
          |- P[<sum_1030@56:0>](<sum_1030@56:0>:int)
          
          |- P[<sum_1030@53:0>](<sum_1030@53:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(279639)[4] (0.003999 sec.)
      solution:
        P[<fail_1170@79:0>]($197:bool) = false
        P[<sum_1030@53:0>]($210:int) = true
        P[<<sum_1030@53:1>@74:0>]($200:int,$202:int) = ((3 * $200) <= (3 + $202))
        P[<sum_1030@56:0>]($218:int) = true
        P[<<sum_1030@56:1>@68:0>]($205:int,$207:int) = ((2 * $205) <= (1 + $207))
        P[<sum_1030@59:0>]($221:int) = true
        P[<<sum_1030@59:1>@62:0>]($213:int,$215:int) = ($213 <= $215)
    end YhornInterface.solve(279214)[3] (0.039994 sec.)
    
  end RefTypeInfer.infer_etrs(31652)[2] (3.325495 sec.)
  refinement types:
    main_1165: X
    f_1168: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | ((3 * v1) <= (3 + v2))} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | ((2 * v1) <= (1 + v2))} -> X) -> X
    sum_1030: v1:int -> (v2:{v2:int | (v1 <= v2)} -> X) -> X
    f_sum_1166: v1:int -> (v2:int -> X) -> v4:int -> X
    f_sum_1166: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1167: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1170: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1169: var193:int -> var192:unit -> X
  abstraction types:
    main_1165: X
    f_1168: v1:int -> X
    main_1032: v1:int -> (v2:unit -> X) -> X
    sum_1030: var198:int ->
              (var199:int[var199 -> ((3 * var198) <= (3 + var199)),
                          var199 -> ((2 * var198) <= (1 + var199)),
                          var199 -> (var198 <= var199)] -> X) -> X
    f_sum_1166: var202:int -> (var203:int -> X) -> var205:int -> X
    f_main_1167: v1:int -> (v2:unit -> X) -> v4:int -> X
    fail_1170: v1:bool -> (v2:unit -> X) -> X
    f_1169: var193:int -> var192:unit -> X
  
end AbsTypeInfer.refine(31651)[1] (3.328495 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1165
  main_1165 -> (rand_int f_1168)
  f_1168 x_1140 -> (main_1032 x_1140 (f_1169 x_1140))
  f_1169 x_1140 x_1137 -> end
  f_main_1167 n_1033 k_main_1109 x_1113 when (((3 * n_1033) - 3) <= x_1113) -> (k_main_1109 ())
  f_main_1167 n_1033 k_main_1109 x_1113 when (not (((3 * n_1033) - 3) <= x_1113)) -> (fail_1170 true k_main_1109)
  f_sum_1166 n_1031 k_sum_1077 x_1081 -> (k_sum_1077 (n_1031 + x_1081))
  fail_1170 b k -> {fail} => (k ())
  main_1032 n_1033 k_main_1109 -> (sum_1030 n_1033 (f_main_1167 n_1033 k_main_1109))
  sum_1030 n_1031 k_sum_1077 when (n_1031 <= 0) -> (k_sum_1077 0)
  sum_1030 n_1031 k_sum_1077 when (not (n_1031 <= 0)) -> (sum_1030 (n_1031 - 1) (f_sum_1166 n_1031 k_sum_1077))
Types:
  main_1165 : X
  fail_1170 : (x_1:bool[x_1] -> (unit -> X) -> X)
  sum_1030 : (x_1:int ->
              (x_3:int[x_1 <= x_3; 2*x_1 <= x_3 + 1; 3*x_1 <= x_3 + 3; 2*x_1 <= x_3; 3*x_1 <= x_3 + 2; 3*x_1 <= x_3] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  sum: ((x_1:int -> {x_2:int | 3 * x_1 <= x_2 + 3}) /\ 
        (x_3:int ->
             ({x_4:int | (2 * x_3 <= x_4 + 1 && 2 * x_3 <= x_4) && x_3 <= x_4} \/ 
              {x_5:int | ((2 * x_3 <= x_5 + 1 && 3 * x_3 <= x_5) && 2 * x_3 > x_5) && x_3 <= x_5} \/ 
              {x_6:int | ((2 * x_3 <= x_6 + 1 && 3 * x_3 > x_6) && 2 * x_3 > x_6) && x_3 <= x_6})))

cycles: 3
total: 6.731 sec
  abst: 0.067 sec
  mc: 0.201 sec
  refine: 4.966 sec
    exparam: 0.253 sec
