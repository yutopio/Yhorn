MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi enc-rev_append.ml

parsed::
 let rec append_1030 x_1031 y_1032 = if x_1031 = 0 then
                                       y_1032
                                     else
                                       1 + append_1030 (x_1031 - 1) y_1032 
 in
 let rec rev_1033 n_1034 = if n_1034 = 0 then
                             0
                           else
                             append_1030 (rev_1033 (n_1034 - 1)) 1 
 in
 let main_1035 n_1036 m_1037 =
   let u_1074 = if rev_1033 n_1036 = n_1036 then
                  ()
                else
                  {fail} () 
   in
     if append_1030 n_1036 m_1037 = n_1036 + m_1037 then
       ()
     else
       {fail} () 
 in
   ()

set_target::
 let rec append_1030 x_1031 y_1032 = if x_1031 = 0 then
                                       y_1032
                                     else
                                       1 + append_1030 (x_1031 - 1) y_1032 
 in
 let rec rev_1033 n_1034 = if n_1034 = 0 then
                             0
                           else
                             append_1030 (rev_1033 (n_1034 - 1)) 1 
 in
 let main_1035 n_1036 m_1037 =
   let u_1074 = if rev_1033 n_1036 = n_1036 then
                  ()
                else
                  {fail} () 
   in
     if append_1030 n_1036 m_1037 = n_1036 + m_1037 then
       ()
     else
       {fail} () 
 in
 let main_1077 = let arg1_1075 = rand_int () 
                 in
                 let arg2_1076 = rand_int () 
                 in
                   main_1035 arg1_1075 arg2_1076 
 in
   ()

CPS::
 let rec append_1030 (x_1031:int) (y_1032:int) (k_append_1105:(int -> X)) =
   if x_1031 = 0 then
     k_append_1105 y_1032
   else
     append_1030 (x_1031 - 1) y_1032 (fun x_1109 -> k_append_1105 (1 + x_1109)) 
 in
 let rec rev_1033 (n_1034:int) (k_rev_1138:(int -> X)) =
   if n_1034 = 0 then
     k_rev_1138 0
   else
     rev_1033 (n_1034 - 1) (fun x_1163 -> append_1030 x_1163 1 k_rev_1138) 
 in
 let main_1035 (n_1036:int) (m_1037:int) (k_main_1191:(unit -> X)) =
   let k_main_u_1218 (x_1194:unit) =
     append_1030 n_1036 m_1037
       (fun x_1222 -> (if x_1222 = n_1036 + m_1037 then
                         k_main_1191 ()
                       else
                         {|fail|} () k_main_1191)) 
   in
     rev_1033 n_1036 (fun x_1197 -> (if x_1197 = n_1036 then
                                       k_main_u_1218 ()
                                     else
                                       {|fail|} () k_main_u_1218)) 
 in
   rand_int_cps () (fun x_1251 -> rand_int_cps () (fun x_1264 -> main_1035 x_1251 x_1264 (fun x_1248 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1293
  main_1293 -> (rand_int f_1298)
  append_1030 x_1031 y_1032 k_append_1105 when (x_1031 = 0) -> (k_append_1105 y_1032)
  append_1030 x_1031 y_1032 k_append_1105 when (not (x_1031 = 0)) ->
      (append_1030 (x_1031 - 1) y_1032 (f_append_1294 x_1031 y_1032 k_append_1105))
  f_1298 x_1251 -> (rand_int (f_1299 x_1251))
  f_1299 x_1251 x_1264 -> (main_1035 x_1251 x_1264 (f_1300 x_1251 x_1264))
  f_1300 x_1251 x_1264 x_1248 -> end
  f_append_1294 x_1031 y_1032 k_append_1105 x_1109 -> (k_append_1105 (1 + x_1109))
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (x_1222 = (n_1036 + m_1037)) -> (k_main_1191 ())
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (not (x_1222 = (n_1036 + m_1037))) ->
      (fail_1301 true k_main_1191)
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (x_1197 = n_1036) -> (k_main_u_1218 m_1037 n_1036 k_main_1191 ())
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (not (x_1197 = n_1036)) ->
      (fail_1302 true (k_main_u_1218 m_1037 n_1036 k_main_1191))
  f_rev_1295 n_1034 k_rev_1138 x_1163 -> (append_1030 x_1163 1 k_rev_1138)
  fail_1301 b k -> {fail} => (k ())
  fail_1302 b k -> {fail} => (k ())
  k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 ->
      (append_1030 n_1036 m_1037 (f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191))
  main_1035 n_1036 m_1037 k_main_1191 -> (rev_1033 n_1036 (f_main_1297 m_1037 n_1036 k_main_1191))
  rev_1033 n_1034 k_rev_1138 when (n_1034 = 0) -> (k_rev_1138 0)
  rev_1033 n_1034 k_rev_1138 when (not (n_1034 = 0)) -> (rev_1033 (n_1034 - 1) (f_rev_1295 n_1034 k_rev_1138))
Types:
  main_1293 : X
  append_1030 : (int -> int -> (int -> X) -> X)
  fail_1301 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1302 : (x_1:bool[x_1] -> (unit -> X) -> X)
  rev_1033 : (int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1293 ... --> 
  f_1298 ... --> 
  f_1299 ... --> 
  main_1035 ... --> 
  rev_1033 [1/2] ... --> 
  f_main_1297 [2/2] ... --> 
  fail_1302 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(180)[1]
  program:
    main_1293  | true = ((Random.int 0) f_1298)
    append_1030 x_1031 y_1032 k_append_1105 | (x_1031 = 0) = (k_append_1105 y_1032)
    append_1030 x_1031 y_1032 k_append_1105 | (not (x_1031 = 0)) = (append_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    y_1032
                                                                    (
                                                                    f_append_1294 x_1031
                                                                    y_1032
                                                                    k_append_1105))
    f_1298 x_1251 | true = ((Random.int 0) (f_1299 x_1251))
    f_1299 x_1251 x_1264 | true = (main_1035 x_1251
                                             x_1264
                                             (f_1300 x_1251
                                                     x_1264))
    f_1300 x_1251 x_1264 x_1248 | true = end
    f_append_1294 x_1031 y_1032 k_append_1105 x_1109 | true = (k_append_1105 (
                                                                    1 + x_1109))
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (x_1222 = (n_1036 + m_1037)) = (
    k_main_1191 ())
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (not (x_1222 = (n_1036 + m_1037))) = (
    fail_1301 true
              k_main_1191)
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (x_1197 = n_1036) = (
    k_main_u_1218 m_1037
                  n_1036
                  k_main_1191
                  ())
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (not (x_1197 = n_1036)) = (
    fail_1302 true
              (k_main_u_1218 m_1037
                             n_1036
                             k_main_1191))
    f_rev_1295 n_1034 k_rev_1138 x_1163 | true = (append_1030 x_1163
                                                              1
                                                              k_rev_1138)
    fail_1301 b k | true = (fail ())
    fail_1302 b k | true = (fail ())
    k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 | true = (append_1030
                                                               n_1036
                                                               m_1037
                                                               (f_k_main_u_1296 m_1037
                                                                    n_1036
                                                                    x_1194
                                                                    k_main_1191))
    main_1035 n_1036 m_1037 k_main_1191 | true = (rev_1033 n_1036
                                                           (f_main_1297 m_1037
                                                                    n_1036
                                                                    k_main_1191))
    rev_1033 n_1034 k_rev_1138 | (n_1034 = 0) = (k_rev_1138 0)
    rev_1033 n_1034 k_rev_1138 | (not (n_1034 = 0)) = (rev_1033 (n_1034 - 1)
                                                                (f_rev_1295 n_1034
                                                                    k_rev_1138))
    main_1293:X
    append_1030:int -> int -> (int -> X) -> X
    f_1298:int -> X
    f_1299:int -> int -> X
    f_1300:int -> int -> unit -> X
    f_append_1294:int -> int -> (int -> X) -> int -> X
    f_k_main_u_1296:int -> int -> unit -> (unit -> X) -> int -> X
    f_main_1297:int -> int -> (unit -> X) -> int -> X
    f_rev_1295:int -> (int -> X) -> int -> X
    fail_1301:bool -> (unit -> X) -> X
    fail_1302:bool -> (unit -> X) -> X
    k_main_u_1218:int -> int -> (unit -> X) -> unit -> X
    main_1035:int -> int -> (unit -> X) -> X
    rev_1033:int -> (int -> X) -> X
  inlined functions: f_1298,f_1299,f_1300,f_append_1294,f_k_main_u_1296,f_main_1297,f_rev_1295,k_main_u_1218,main_1035
  counterexample: 0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1298@4:0> = var2)
     [true.nop((<f_1299@7:0> = <f_1298@4:0>) && (<f_1299@7:1> = var3))
      [true.((<main_1035@9:0> = <f_1299@7:0>) && (<main_1035@9:1> = <f_1299@7:1>))
       [true.(<rev_1033@11:0> = <main_1035@9:0>)
        [(<rev_1033@11:0> = 0).(<<rev_1033@11:1>@14:0> = 0)
         [true.
          ((<f_main_1297@16:0> = <main_1035@9:1>) &&
           ((<f_main_1297@16:1> = <main_1035@9:0>) && (<f_main_1297@16:3> = <<rev_1033@11:1>@14:0>)))
          [(not (<f_main_1297@16:3> = <f_main_1297@16:1>)).(<fail_1302@19:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(181)[2]
    horn clauses:
      P[<fail_1302@19:0>](<fail_1302@19:0>:bool)|- bot
      
      P[<f_main_1297@16:3>](<f_main_1297@16:0>:int,<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
      ((<f_main_1297@16:3> <> <f_main_1297@16:1>) && <fail_1302@19:0>) |- P[<fail_1302@19:0>](
      <fail_1302@19:0>:bool)
      
      P[<main_1035@9:1>](<f_main_1297@16:1>:int,<f_main_1297@16:0>:int),
      P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int)|- P[<f_main_1297@16:3>](
      <f_main_1297@16:0>:int,<f_main_1297@16:1>:int,<f_main_1297@16:3>:int)
      
      P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
      |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
      
      P[<main_1035@9:1>](<rev_1033@11:0>:int,<main_1035@9:1>:int)|- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
      
      P[<f_1299@7:1>](<main_1035@9:0>:int,<main_1035@9:1>:int)|- P[<main_1035@9:1>](
      <main_1035@9:0>:int,<main_1035@9:1>:int)
      
      P[<f_1298@4:0>](<f_1299@7:0>:int)|- P[<f_1299@7:1>](<f_1299@7:0>:int,
                                                          <f_1299@7:1>:int)
      
      |- P[<f_1298@4:0>](<f_1298@4:0>:int)
    call trees:
      <main_1293@1>
        <f_1298@4>
          <f_1299@7>
            <main_1035@9>
              <rev_1033@11>
              </<rev_1033@11:1>@14>
              <f_main_1297@16>
                <fail_1302@19>
    inlined horn clauses:
      P[<fail_1302@19:0>](<fail_1302@19:0>:bool)|- bot
      
      P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
      ((<f_main_1297@16:3> <> <f_main_1297@16:1>) && <fail_1302@19:0>) |- P[<fail_1302@19:0>](
      <fail_1302@19:0>:bool)
      
      P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
      |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
      
      |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
    begin ParamSubstInfer.infer(1005)[3]
      
    end ParamSubstInfer.infer(1005)[3] (0.011998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1007)[3]
      
    end RefTypeInfer.elim_coeffs(1007)[3] (0.000000 sec.)
    begin GenHcSolver.solve(1154)[3]
      Horn clauses:
        P[<fail_1302@19:0>](<fail_1302@19:0>:bool)|- bot
        
        P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
        ((<f_main_1297@16:3> <> <f_main_1297@16:1>) && <fail_1302@19:0>) |- P[<fail_1302@19:0>](
        <fail_1302@19:0>:bool)
        
        P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
        |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
        
        |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
      lower bounds:
        P[<rev_1033@11:0>](<rev_1033@11:0>:int) = true
        P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int) =
        ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
        P[<fail_1302@19:0>](<fail_1302@19:0>:bool) = false
      upper bounds:
        P[<fail_1302@19:0>](var5:bool) = true
      begin GenHcSolver.classify_pids(1814)[4]
        output:
          [<fail_1302@19:0>]
      end GenHcSolver.classify_pids(1814)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(1817)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(1818)[5]
          begin InterpProver.interpolate_fresh(1819)[6]
            begin InterpProver.interpolate_log(1820)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(1821)[8]
                begin InterpProver.interpolate_simplify(1822)[9]
                  begin InterpProver.interpolate_quick(1835)[10]
                    
                  end InterpProver.interpolate_quick(1835)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(1839)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(1839)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(1822)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(1821)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(1820)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(1819)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(1818)[5] (0.001000 sec.)
        output:
          P[<fail_1302@19:0>](<fail_1302@19:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(1817)[4] (0.001000 sec.)
      Horn clauses:
        P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
        (<f_main_1297@16:3> <> <f_main_1297@16:1>) |- bot
        
        P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
        |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
        
        |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
      lower bounds:
        P[<rev_1033@11:0>](<rev_1033@11:0>:int) = true
        P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int) =
        ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
      upper bounds:
        P[<<rev_1033@11:1>@14:0>](var6:int,var7:int) = (var7 = var6)
      begin GenHcSolver.classify_pids(2641)[4]
        output:
          [<<rev_1033@11:1>@14:0>]
      end GenHcSolver.classify_pids(2641)[4] (0.000000 sec.)
      lb:((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
      nub:(not (<<rev_1033@11:1>@14:0> = <rev_1033@11:0>))
      begin ApronInterface.convex_hull_interpolate(2644)[4]
        lb:((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
        nub:(not (<<rev_1033@11:1>@14:0> = <rev_1033@11:0>))
        lb':((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
        nub':(not (<<rev_1033@11:1>@14:0> = <rev_1033@11:0>))
        begin InterpProver.interpolate(2645)[5]
          begin InterpProver.interpolate_fresh(2646)[6]
            begin InterpProver.interpolate_log(2647)[7]
              input1: ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
              input2: (not (<<rev_1033@11:1>@14:0> = <rev_1033@11:0>))
              begin InterpProver.interpolate_check(2648)[8]
                begin InterpProver.interpolate_simplify(2649)[9]
                  begin InterpProver.interpolate_quick(2676)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(2685)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(2686)[12]
                        begin CsisatInterface.interpolate_csisat_log(2687)[13]
                          input1: (0 = v_sep_rev_1033_sep_11_sep_0 & 0 = v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0)
                          input2: not v_sep_rev_1033_sep_11_sep_0 = v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(2688)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(2688)[14] (0.000000 sec.)
                          output: v_sep_rev_1033_sep_11_sep_0 = v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(2687)[13] (0.000000 sec.)
                        after simplification: v_sep_rev_1033_sep_11_sep_0 = v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0
                        after dnf conversion: ((v_sep_rev_1033_sep_11_sep_0 = v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(2686)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(2685)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(2676)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2649)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2648)[8] (0.000000 sec.)
              output: (<rev_1033@11:0> = <<rev_1033@11:1>@14:0>)
            end InterpProver.interpolate_log(2647)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2646)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2645)[5] (0.000000 sec.)
        output:
          P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int) =
          (<rev_1033@11:0> = <<rev_1033@11:1>@14:0>)
      end ApronInterface.convex_hull_interpolate(2644)[4] (0.000000 sec.)
      Horn clauses:
        |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
      lower bounds:
        P[<rev_1033@11:0>](<rev_1033@11:0>:int) = true
      upper bounds:
        P[<rev_1033@11:0>](var8:int) = true
      begin GenHcSolver.classify_pids(2981)[4]
        output:
          [<rev_1033@11:0>]
      end GenHcSolver.classify_pids(2981)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(2984)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(2985)[5]
          begin InterpProver.interpolate_fresh(2986)[6]
            begin InterpProver.interpolate_log(2987)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(2988)[8]
                begin InterpProver.interpolate_simplify(2989)[9]
                  begin InterpProver.interpolate_quick(3002)[10]
                    
                  end InterpProver.interpolate_quick(3002)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2989)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2988)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(2987)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2986)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2985)[5] (0.001000 sec.)
        output:
          P[<rev_1033@11:0>](<rev_1033@11:0>:int) = true
      end ApronInterface.convex_hull_interpolate(2984)[4] (0.001000 sec.)
      begin HcSolver.check_validity(3057)[4]
        input:
          P[<fail_1302@19:0>](<fail_1302@19:0>:bool)|- bot
          
          P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
          ((<f_main_1297@16:3> <> <f_main_1297@16:1>) && <fail_1302@19:0>)
          |- P[<fail_1302@19:0>](<fail_1302@19:0>:bool)
          
          P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
          |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
          
          |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3057)[4] (0.000000 sec.)
      solution:
        P[<fail_1302@19:0>](<fail_1302@19:0>:bool) = false
        P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int) =
        (<rev_1033@11:0> = <<rev_1033@11:1>@14:0>)
        P[<rev_1033@11:0>](<rev_1033@11:0>:int) = true
    end GenHcSolver.solve(1154)[3] (0.008999 sec.)
    begin GenHcSolver.solve(3255)[3]
      Horn clauses:
        P[<fail_1302@19:0>](<fail_1302@19:0>:bool)|- bot
        
        P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
        ((<f_main_1297@16:3> <> <f_main_1297@16:1>) && <fail_1302@19:0>) |- P[<fail_1302@19:0>](
        <fail_1302@19:0>:bool)
        
        P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
        |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
        
        |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
      lower bounds:
        P[<rev_1033@11:0>](<rev_1033@11:0>:int) = true
        P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int) =
        ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
        P[<fail_1302@19:0>](<fail_1302@19:0>:bool) = false
      upper bounds:
        P[<fail_1302@19:0>](var10:bool) = true
      begin GenHcSolver.classify_pids(3915)[4]
        output:
          [<fail_1302@19:0>]
      end GenHcSolver.classify_pids(3915)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(3918)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(3921)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(3921)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(3926)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(3926)[5] (0.001000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(3929)[5]
          begin InterpProver.interpolate_fresh(3930)[6]
            begin InterpProver.interpolate_log(3931)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(3932)[8]
                begin InterpProver.interpolate_simplify(3933)[9]
                  begin InterpProver.interpolate_quick(3948)[10]
                    
                  end InterpProver.interpolate_quick(3948)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(3952)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(3952)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3933)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3932)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(3931)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(3930)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(3929)[5] (0.000000 sec.)
        output:
          P[<fail_1302@19:0>](<fail_1302@19:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(3918)[4] (0.001000 sec.)
      Horn clauses:
        P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
        (<f_main_1297@16:3> <> <f_main_1297@16:1>) |- bot
        
        P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
        |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
        
        |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
      lower bounds:
        P[<rev_1033@11:0>](<rev_1033@11:0>:int) = true
        P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int) =
        ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
      upper bounds:
        P[<<rev_1033@11:1>@14:0>](var11:int,var12:int) = (var12 = var11)
      begin GenHcSolver.classify_pids(4761)[4]
        output:
          [<<rev_1033@11:1>@14:0>]
      end GenHcSolver.classify_pids(4761)[4] (0.000000 sec.)
      lb:((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
      nub:(not (<<rev_1033@11:1>@14:0> = <rev_1033@11:0>))
      begin ApronInterface.convex_hull_interpolate(4764)[4]
        lb:((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
        nub:(not (<<rev_1033@11:1>@14:0> = <rev_1033@11:0>))
        begin ExtFormula.Formula.case_analysis_boolean(4772)[5]
          ts: ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
          
        end ExtFormula.Formula.case_analysis_boolean(4772)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(4781)[5]
          ts: (<<rev_1033@11:1>@14:0> <> <rev_1033@11:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(4781)[5] (0.000000 sec.)
        lb':((<<rev_1033@11:1>@14:0> = 0) && (<rev_1033@11:0> = 0))
        nub':true
        begin InterpProver.interpolate(4786)[5]
          begin InterpProver.interpolate_fresh(4787)[6]
            begin InterpProver.interpolate_log(4788)[7]
              input1: ((<<rev_1033@11:1>@14:0> = 0) && (<rev_1033@11:0> = 0))
              input2: true
              begin InterpProver.interpolate_check(4789)[8]
                begin InterpProver.interpolate_simplify(4790)[9]
                  begin InterpProver.interpolate_quick(4817)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(4820)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(4821)[12]
                        begin CsisatInterface.interpolate_csisat_log(4822)[13]
                          input1: true
                          input2: true
                          begin CsisatInterface.interpolate_csisat_raw(4823)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(4823)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(4822)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(4821)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(4820)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(4817)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4790)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(4789)[8] (0.000999 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(4788)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(4787)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(4786)[5] (0.000999 sec.)
        begin InterpProver.interpolate(4831)[5]
          begin InterpProver.interpolate_fresh(4832)[6]
            begin InterpProver.interpolate_log(4833)[7]
              input1: ((<<rev_1033@11:1>@14:0> = 0) && (<rev_1033@11:0> = 0))
              input2: (not (<<rev_1033@11:1>@14:0> = <rev_1033@11:0>))
              begin InterpProver.interpolate_check(4834)[8]
                begin InterpProver.interpolate_simplify(4835)[9]
                  begin InterpProver.interpolate_quick(4862)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(4871)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(4872)[12]
                        begin CsisatInterface.interpolate_csisat_log(4873)[13]
                          input1: (0 = v_sep_rev_1033_sep_11_sep_0 & 0 = v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0)
                          input2: not v_sep_rev_1033_sep_11_sep_0 = v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(4874)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(4874)[14] (0.000000 sec.)
                          output: v_sep_rev_1033_sep_11_sep_0 = v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(4873)[13] (0.000000 sec.)
                        after simplification: v_sep_rev_1033_sep_11_sep_0 = v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0
                        after dnf conversion: ((v_sep_rev_1033_sep_11_sep_0 = v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(4872)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(4871)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(4862)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(4835)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(4834)[8] (0.001000 sec.)
              output: (<rev_1033@11:0> = <<rev_1033@11:1>@14:0>)
            end InterpProver.interpolate_log(4833)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(4832)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(4831)[5] (0.001000 sec.)
        output:
          P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int) =
          (<rev_1033@11:0> = <<rev_1033@11:1>@14:0>)
      end ApronInterface.convex_hull_interpolate(4764)[4] (0.001999 sec.)
      Horn clauses:
        |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
      lower bounds:
        P[<rev_1033@11:0>](<rev_1033@11:0>:int) = true
      upper bounds:
        P[<rev_1033@11:0>](var13:int) = true
      begin GenHcSolver.classify_pids(5167)[4]
        output:
          [<rev_1033@11:0>]
      end GenHcSolver.classify_pids(5167)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(5170)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(5173)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(5173)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5178)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5178)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(5181)[5]
          begin InterpProver.interpolate_fresh(5182)[6]
            begin InterpProver.interpolate_log(5183)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(5184)[8]
                begin InterpProver.interpolate_simplify(5185)[9]
                  begin InterpProver.interpolate_quick(5199)[10]
                    
                  end InterpProver.interpolate_quick(5199)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5185)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5184)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(5183)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(5182)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(5181)[5] (0.000000 sec.)
        output:
          P[<rev_1033@11:0>](<rev_1033@11:0>:int) = true
      end ApronInterface.convex_hull_interpolate(5170)[4] (0.000000 sec.)
      begin HcSolver.check_validity(5256)[4]
        input:
          P[<fail_1302@19:0>](<fail_1302@19:0>:bool)|- bot
          
          P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
          ((<f_main_1297@16:3> <> <f_main_1297@16:1>) && <fail_1302@19:0>)
          |- P[<fail_1302@19:0>](<fail_1302@19:0>:bool)
          
          P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
          |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
          
          |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(5256)[4] (0.001000 sec.)
      solution:
        P[<fail_1302@19:0>](<fail_1302@19:0>:bool) = false
        P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int) =
        (<rev_1033@11:0> = <<rev_1033@11:1>@14:0>)
        P[<rev_1033@11:0>](<rev_1033@11:0>:int) = true
    end GenHcSolver.solve(3255)[3] (0.013998 sec.)
    begin YhornInterface.solve(5454)[3]
      begin HcSolver.solve_ub(5455)[4]
        encoded:
          P[<fail_1302@19:0>](<fail_1302@19:0>:int)|- bot
          
          P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
          ((<f_main_1297@16:3> <> <f_main_1297@16:1>) && (<fail_1302@19:0> = 1))
          |- P[<fail_1302@19:0>](<fail_1302@19:0>:int)
          
          P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
          |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
          
          |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
        input to Yhorn:
          P[<fail_1302@19:0>](<fail_1302@19:0>:int)|- bot
          
          P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
          ((<f_main_1297@16:3> <> <f_main_1297@16:1>) && (<fail_1302@19:0> = 1))
          |- P[<fail_1302@19:0>](<fail_1302@19:0>:int)
          
          P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<<rev_1033@11:1>@14:0> = 0) && (<rev_1033@11:0> = 0))
          |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1302_sep_19_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-$8<>0)) & (v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0($8,$7)) -> v_sep_fail_1302_sep_19_sep_0($6).
(($9=0) & ($10=0)) & (v_sep_rev_1033_sep_11_sep_0($9)) -> v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0($9,$10).
0=0 -> v_sep_rev_1033_sep_11_sep_0($9).


v_sep_fail_1302_sep_19_sep_0: X
v_sep_rev_1033_sep_11_sep_0: X
v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0: X
.....Split disj [14] 0.222965
Reconstrcut: 3 **)

v_sep_fail_1302_sep_19_sep_0: (X) | (X)
v_sep_rev_1033_sep_11_sep_0: X
v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0: X
.....
v_sep_fail_1302_sep_19_sep_0: (X) | (X)
v_sep_rev_1033_sep_11_sep_0: X
v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0: X
.....Split conj [16] 0.226965
(Reconstrcut: 8 **)
v_sep_fail_1302_sep_19_sep_0: (X) | (X)
v_sep_rev_1033_sep_11_sep_0: X
v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0: (X) & (X)
.......
v_sep_fail_1302_sep_19_sep_0: (X) | (X)
v_sep_rev_1033_sep_11_sep_0: X
v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0: (X) & (X)
.....
v_sep_fail_1302_sep_19_sep_0: (X) | (X)
v_sep_rev_1033_sep_11_sep_0: X
v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0: (X) & (X)
.......
v_sep_fail_1302_sep_19_sep_0: (X) | (X)
v_sep_rev_1033_sep_11_sep_0: X
v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0: (X) & (X)
.......(0=0) & (v_sep_fail_1302_sep_19_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-$8<>0)) & (v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0($8,$7)) -> v_sep_fail_1302_sep_19_sep_0($6).
(($9=0) & ($10=0)) & (v_sep_rev_1033_sep_11_sep_0($9)) -> v_sep_rev_1033_sep_11_sep_1_sep_14_sep_0($9,$10).
0=0 -> v_sep_rev_1033_sep_11_sep_0($9).

          |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
        solution:
          P[<fail_1302@19:0>]($11:bool) = false
          P[<rev_1033@11:0>]($19:int) = true
          P[<<rev_1033@11:1>@14:0>]($14:int,$16:int) = ($14 = $16)
        
      end HcSolver.solve_ub(5455)[4] (0.021997 sec.)
      begin HcSolver.check_validity(5566)[4]
        input:
          P[<fail_1302@19:0>](<fail_1302@19:0>:bool)|- bot
          
          P[<<rev_1033@11:1>@14:0>](<f_main_1297@16:1>:int,<f_main_1297@16:3>:int),
          ((<f_main_1297@16:3> <> <f_main_1297@16:1>) && <fail_1302@19:0>)
          |- P[<fail_1302@19:0>](<fail_1302@19:0>:bool)
          
          P[<rev_1033@11:0>](<rev_1033@11:0>:int), ((<rev_1033@11:0> = 0) && (<<rev_1033@11:1>@14:0> = 0))
          |- P[<<rev_1033@11:1>@14:0>](<rev_1033@11:0>:int,<<rev_1033@11:1>@14:0>:int)
          
          |- P[<rev_1033@11:0>](<rev_1033@11:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(5566)[4] (0.000999 sec.)
      solution:
        P[<fail_1302@19:0>]($11:bool) = false
        P[<rev_1033@11:0>]($19:int) = true
        P[<<rev_1033@11:1>@14:0>]($14:int,$16:int) = ($14 = $16)
    end YhornInterface.solve(5454)[3] (0.022996 sec.)
    
  end RefTypeInfer.infer_etrs(181)[2] (0.062990 sec.)
  refinement types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:{v2:int | (v1 = v2)} -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1302: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    append_1030: var24:int -> var23:int -> (var22:int -> X) -> X
    f_1300: var28:int -> var27:int -> var26:unit -> X
    f_append_1294: var34:int -> var33:int -> (var32:int -> X) -> var30:int -> X
    f_k_main_u_1296: var41:int -> var40:int -> var39:unit -> (var38:unit -> X) -> var36:int -> X
    f_rev_1295: var46:int -> (var45:int -> X) -> var43:int -> X
    fail_1301: var50:bool -> (var49:unit -> X) -> X
    k_main_u_1218: var56:int -> var55:int -> (var54:unit -> X) -> var52:unit -> X
  abstraction types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:int[v2 -> (v1 = v2)] -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1302: v1:bool -> (v2:unit -> X) -> X
    append_1030: var24:int -> var23:int -> (var22:int -> X) -> X
    f_1300: var28:int -> var27:int -> var26:unit -> X
    f_append_1294: var34:int -> var33:int -> (var32:int -> X) -> var30:int -> X
    f_k_main_u_1296: var41:int -> var40:int -> var39:unit -> (var38:unit -> X) -> var36:int -> X
    f_rev_1295: var46:int -> (var45:int -> X) -> var43:int -> X
    fail_1301: var50:bool -> (var49:unit -> X) -> X
    k_main_u_1218: var56:int -> var55:int -> (var54:unit -> X) -> var52:unit -> X
  
end AbsTypeInfer.refine(180)[1] (0.067989 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1293
  main_1293 -> (rand_int f_1298)
  append_1030 x_1031 y_1032 k_append_1105 when (x_1031 = 0) -> (k_append_1105 y_1032)
  append_1030 x_1031 y_1032 k_append_1105 when (not (x_1031 = 0)) ->
      (append_1030 (x_1031 - 1) y_1032 (f_append_1294 x_1031 y_1032 k_append_1105))
  f_1298 x_1251 -> (rand_int (f_1299 x_1251))
  f_1299 x_1251 x_1264 -> (main_1035 x_1251 x_1264 (f_1300 x_1251 x_1264))
  f_1300 x_1251 x_1264 x_1248 -> end
  f_append_1294 x_1031 y_1032 k_append_1105 x_1109 -> (k_append_1105 (1 + x_1109))
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (x_1222 = (n_1036 + m_1037)) -> (k_main_1191 ())
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (not (x_1222 = (n_1036 + m_1037))) ->
      (fail_1301 true k_main_1191)
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (x_1197 = n_1036) -> (k_main_u_1218 m_1037 n_1036 k_main_1191 ())
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (not (x_1197 = n_1036)) ->
      (fail_1302 true (k_main_u_1218 m_1037 n_1036 k_main_1191))
  f_rev_1295 n_1034 k_rev_1138 x_1163 -> (append_1030 x_1163 1 k_rev_1138)
  fail_1301 b k -> {fail} => (k ())
  fail_1302 b k -> {fail} => (k ())
  k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 ->
      (append_1030 n_1036 m_1037 (f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191))
  main_1035 n_1036 m_1037 k_main_1191 -> (rev_1033 n_1036 (f_main_1297 m_1037 n_1036 k_main_1191))
  rev_1033 n_1034 k_rev_1138 when (n_1034 = 0) -> (k_rev_1138 0)
  rev_1033 n_1034 k_rev_1138 when (not (n_1034 = 0)) -> (rev_1033 (n_1034 - 1) (f_rev_1295 n_1034 k_rev_1138))
Types:
  main_1293 : X
  append_1030 : (int -> int -> (int -> X) -> X)
  fail_1301 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1302 : (x_1:bool[x_1] -> (unit -> X) -> X)
  rev_1033 : (x_1:int -> (x_3:int[x_1 = x_3] -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1293 ... --> 
  f_1298 ... --> 
  f_1299 ... --> 
  main_1035 ... --> 
  rev_1033 [2/2] ... --> 
  rev_1033 [1/2] ... --> 
  f_rev_1295 ... --> 
  append_1030 [1/2] ... --> 
  f_main_1297 [2/2] ... --> 
  fail_1302 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(6096)[1]
  program:
    main_1293  | true = ((Random.int 0) f_1298)
    append_1030 x_1031 y_1032 k_append_1105 | (x_1031 = 0) = (k_append_1105 y_1032)
    append_1030 x_1031 y_1032 k_append_1105 | (not (x_1031 = 0)) = (append_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    y_1032
                                                                    (
                                                                    f_append_1294 x_1031
                                                                    y_1032
                                                                    k_append_1105))
    f_1298 x_1251 | true = ((Random.int 0) (f_1299 x_1251))
    f_1299 x_1251 x_1264 | true = (main_1035 x_1251
                                             x_1264
                                             (f_1300 x_1251
                                                     x_1264))
    f_1300 x_1251 x_1264 x_1248 | true = end
    f_append_1294 x_1031 y_1032 k_append_1105 x_1109 | true = (k_append_1105 (
                                                                    1 + x_1109))
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (x_1222 = (n_1036 + m_1037)) = (
    k_main_1191 ())
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (not (x_1222 = (n_1036 + m_1037))) = (
    fail_1301 true
              k_main_1191)
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (x_1197 = n_1036) = (
    k_main_u_1218 m_1037
                  n_1036
                  k_main_1191
                  ())
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (not (x_1197 = n_1036)) = (
    fail_1302 true
              (k_main_u_1218 m_1037
                             n_1036
                             k_main_1191))
    f_rev_1295 n_1034 k_rev_1138 x_1163 | true = (append_1030 x_1163
                                                              1
                                                              k_rev_1138)
    fail_1301 b k | true = (fail ())
    fail_1302 b k | true = (fail ())
    k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 | true = (append_1030
                                                               n_1036
                                                               m_1037
                                                               (f_k_main_u_1296 m_1037
                                                                    n_1036
                                                                    x_1194
                                                                    k_main_1191))
    main_1035 n_1036 m_1037 k_main_1191 | true = (rev_1033 n_1036
                                                           (f_main_1297 m_1037
                                                                    n_1036
                                                                    k_main_1191))
    rev_1033 n_1034 k_rev_1138 | (n_1034 = 0) = (k_rev_1138 0)
    rev_1033 n_1034 k_rev_1138 | (not (n_1034 = 0)) = (rev_1033 (n_1034 - 1)
                                                                (f_rev_1295 n_1034
                                                                    k_rev_1138))
    main_1293:X
    append_1030:int -> int -> (int -> X) -> X
    f_1298:int -> X
    f_1299:int -> int -> X
    f_1300:int -> int -> unit -> X
    f_append_1294:int -> int -> (int -> X) -> int -> X
    f_k_main_u_1296:int -> int -> unit -> (unit -> X) -> int -> X
    f_main_1297:int -> int -> (unit -> X) -> int -> X
    f_rev_1295:int -> (int -> X) -> int -> X
    fail_1301:bool -> (unit -> X) -> X
    fail_1302:bool -> (unit -> X) -> X
    k_main_u_1218:int -> int -> (unit -> X) -> unit -> X
    main_1035:int -> int -> (unit -> X) -> X
    rev_1033:int -> (int -> X) -> X
  inlined functions: f_1298,f_1299,f_1300,f_append_1294,f_k_main_u_1296,f_main_1297,f_rev_1295,k_main_u_1218,main_1035
  counterexample: 0:0:0:0:1:0:0:0:1:0
  error traces:
    [true.nop(<f_1298@25:0> = var57)
     [true.nop((<f_1299@28:0> = <f_1298@25:0>) && (<f_1299@28:1> = var58))
      [true.((<main_1035@30:0> = <f_1299@28:0>) && (<main_1035@30:1> = <f_1299@28:1>))
       [true.(<rev_1033@32:0> = <main_1035@30:0>)
        [(not (<rev_1033@32:0> = 0)).(<rev_1033@35:0> = (<rev_1033@32:0> - 1))
         [(<rev_1033@35:0> = 0).(<<rev_1033@35:1>@38:0> = 0)
          [true.((<f_rev_1295@40:0> = <rev_1033@32:0>) && (<f_rev_1295@40:2> = <<rev_1033@35:1>@38:0>))
           [true.((<append_1030@42:0> = <f_rev_1295@40:2>) && (<append_1030@42:1> = 1))
            [(<append_1030@42:0> = 0).(<<append_1030@42:2>@45:0> = <append_1030@42:1>)
             [true.(<<f_rev_1295@40:1>@47:0> = <<append_1030@42:2>@45:0>)
              [true.(<<rev_1033@32:1>@49:0> = <<f_rev_1295@40:1>@47:0>)
               [true.
                ((<f_main_1297@51:0> = <main_1035@30:1>) &&
                 ((<f_main_1297@51:1> = <main_1035@30:0>) && (<f_main_1297@51:3> = <<rev_1033@32:1>@49:0>)))
                [(not (<f_main_1297@51:3> = <f_main_1297@51:1>)).(<fail_1302@54:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(6097)[2]
    horn clauses:
      P[<fail_1302@54:0>](<fail_1302@54:0>:bool)|- bot
      
      P[<f_main_1297@51:3>](<f_main_1297@51:0>:int,<f_main_1297@51:1>:int,<f_main_1297@51:3>:int),
      ((<f_main_1297@51:3> <> <f_main_1297@51:1>) && <fail_1302@54:0>) |- P[<fail_1302@54:0>](
      <fail_1302@54:0>:bool)
      
      P[<main_1035@30:1>](<f_main_1297@51:1>:int,<f_main_1297@51:0>:int),
      P[<<rev_1033@32:1>@49:0>](<f_main_1297@51:1>:int,<f_main_1297@51:3>:int)|- P[<f_main_1297@51:3>](
      <f_main_1297@51:0>:int,<f_main_1297@51:1>:int,<f_main_1297@51:3>:int)
      
      P[<rev_1033@32:0>](<rev_1033@32:0>:int),
      P[<<f_rev_1295@40:1>@47:0>](<rev_1033@32:0>:int,<<rev_1033@32:1>@49:0>:int), (
      <rev_1033@32:0> <> 0) |- P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,
                                                         <<rev_1033@32:1>@49:0>:int)
      
      P[<f_rev_1295@40:2>](<f_rev_1295@40:0>:int,<append_1030@42:0>:int),
      P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,1:int,<<f_rev_1295@40:1>@47:0>:int)|- P[<<f_rev_1295@40:1>@47:0>](
      <f_rev_1295@40:0>:int,<<f_rev_1295@40:1>@47:0>:int)
      
      P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
      ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
      |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                      <<append_1030@42:2>@45:0>:int)
      
      P[<f_rev_1295@40:2>](<f_rev_1295@40:0>:int,<append_1030@42:0>:int), (
      <append_1030@42:1> = 1) |- P[<append_1030@42:1>](<append_1030@42:0>:int,
                                                       <append_1030@42:1>:int)
      
      P[<rev_1033@32:0>](<f_rev_1295@40:0>:int),
      P[<<rev_1033@35:1>@38:0>]((-1 + <f_rev_1295@40:0>):int,<f_rev_1295@40:2>:int), (
      <f_rev_1295@40:0> <> 0) |- P[<f_rev_1295@40:2>](<f_rev_1295@40:0>:int,
                                                      <f_rev_1295@40:2>:int)
      
      P[<rev_1033@35:0>](<rev_1033@35:0>:int), ((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0))
      |- P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int)
      
      P[<rev_1033@32:0>]((1 + <rev_1033@35:0>):int), ((1 + <rev_1033@35:0>) <> 0)
      |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
      
      P[<main_1035@30:1>](<rev_1033@32:0>:int,<main_1035@30:1>:int)|- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
      
      P[<f_1299@28:1>](<main_1035@30:0>:int,<main_1035@30:1>:int)|- P[<main_1035@30:1>](
      <main_1035@30:0>:int,<main_1035@30:1>:int)
      
      P[<f_1298@25:0>](<f_1299@28:0>:int)|- P[<f_1299@28:1>](<f_1299@28:0>:int,
                                                             <f_1299@28:1>:int)
      
      |- P[<f_1298@25:0>](<f_1298@25:0>:int)
    call trees:
      <main_1293@22>
        <f_1298@25>
          <f_1299@28>
            <main_1035@30>
              <rev_1033@32>
                <rev_1033@35>
                </<rev_1033@35:1>@38>
                <f_rev_1295@40>
                  <append_1030@42>
                  </<append_1030@42:2>@45>
                </<f_rev_1295@40:1>@47>
              </<rev_1033@32:1>@49>
              <f_main_1297@51>
                <fail_1302@54>
    inlined horn clauses:
      P[<fail_1302@54:0>](<fail_1302@54:0>:bool)|- bot
      
      P[<<rev_1033@32:1>@49:0>](<f_main_1297@51:1>:int,<f_main_1297@51:3>:int),
      ((<f_main_1297@51:3> <> <f_main_1297@51:1>) && <fail_1302@54:0>) |- P[<fail_1302@54:0>](
      <fail_1302@54:0>:bool)
      
      P[<rev_1033@32:0>](<rev_1033@32:0>:int),
      P[<<rev_1033@35:1>@38:0>]((-1 + <rev_1033@32:0>):int,var59:int),
      P[<<append_1030@42:2>@45:0>](var59:int,1:int,<<rev_1033@32:1>@49:0>:int), (
      <rev_1033@32:0> <> 0) |- P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,
                                                         <<rev_1033@32:1>@49:0>:int)
      
      P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
      ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
      |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                      <<append_1030@42:2>@45:0>:int)
      
      P[<rev_1033@32:0>](<f_rev_1295@40:0>:int),
      P[<<rev_1033@35:1>@38:0>]((-1 + <f_rev_1295@40:0>):int,<append_1030@42:0>:int),
      ((<append_1030@42:1> = 1) && (<f_rev_1295@40:0> <> 0))
      |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
      
      P[<rev_1033@35:0>](<rev_1033@35:0>:int), ((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0))
      |- P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int)
      
      P[<rev_1033@32:0>]((1 + <rev_1033@35:0>):int), ((1 + <rev_1033@35:0>) <> 0)
      |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
      
      |- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
    begin ParamSubstInfer.infer(7867)[3]
      
    end ParamSubstInfer.infer(7867)[3] (0.024996 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(7869)[3]
      
    end RefTypeInfer.elim_coeffs(7869)[3] (0.000000 sec.)
    begin GenHcSolver.solve(8192)[3]
      Horn clauses:
        P[<fail_1302@54:0>](<fail_1302@54:0>:bool)|- bot
        
        P[<<rev_1033@32:1>@49:0>](<f_main_1297@51:1>:int,<f_main_1297@51:3>:int),
        ((<f_main_1297@51:3> <> <f_main_1297@51:1>) && <fail_1302@54:0>) |- P[<fail_1302@54:0>](
        <fail_1302@54:0>:bool)
        
        P[<rev_1033@32:0>](<rev_1033@32:0>:int),
        P[<<rev_1033@35:1>@38:0>]((-1 + <rev_1033@32:0>):int,var59:int),
        P[<<append_1030@42:2>@45:0>](var59:int,1:int,<<rev_1033@32:1>@49:0>:int), (
        <rev_1033@32:0> <> 0) |- P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,
                                                           <<rev_1033@32:1>@49:0>:int)
        
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
        ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
        |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                        <<append_1030@42:2>@45:0>:int)
        
        P[<rev_1033@32:0>](<f_rev_1295@40:0>:int),
        P[<<rev_1033@35:1>@38:0>]((-1 + <f_rev_1295@40:0>):int,<append_1030@42:0>:int),
        ((<append_1030@42:1> = 1) && (<f_rev_1295@40:0> <> 0))
        |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
        
        P[<rev_1033@35:0>](<rev_1033@35:0>:int), ((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0))
        |- P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int)
        
        P[<rev_1033@32:0>]((1 + <rev_1033@35:0>):int), ((1 + <rev_1033@35:0>) <> 0)
        |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
        
        |- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
      lower bounds:
        P[<rev_1033@32:0>](<rev_1033@32:0>:int) = true
        P[<rev_1033@35:0>](<rev_1033@35:0>:int) = ((1 + <rev_1033@35:0>) <> 0)
        P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int) =
        ((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0))
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int) =
        ((<append_1030@42:0> = 0) && (<append_1030@42:1> = 1))
        P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,<<append_1030@42:2>@45:0>:int) =
        ((<append_1030@42:0> = 0) && ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
        P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,<<rev_1033@32:1>@49:0>:int) =
        ((<<rev_1033@32:1>@49:0> = 1) && (<rev_1033@32:0> = 1))
        P[<fail_1302@54:0>](<fail_1302@54:0>:bool) = false
      upper bounds:
        P[<<rev_1033@32:1>@49:0>](var67:int,var68:int) = (var68 = var67)
        P[<<rev_1033@35:1>@38:0>](var63:int,var64:int) = ((var64 <> 0) || (((1 + var63) = 0) || (var63 = 0)))
      begin GenHcSolver.classify_pids(12578)[4]
        output:
          [<<rev_1033@35:1>@38:0>;<<rev_1033@32:1>@49:0>]
      end GenHcSolver.classify_pids(12578)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(12629)[4]
        lb:(((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0)) ||
            ((<<rev_1033@35:1>@38:0> = 1) && (<rev_1033@35:0> = 1)))
        nub:((not ((<<rev_1033@35:1>@38:0> <> 0) || (((1 + <rev_1033@35:0>) = 0) || (<rev_1033@35:0> = 0)))) ||
             (not (<<rev_1033@35:1>@38:0> = <rev_1033@35:0>)))
        lb':(((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0)) ||
             ((<<rev_1033@35:1>@38:0> = 1) && (<rev_1033@35:0> = 1)))
        nub':((not ((<<rev_1033@35:1>@38:0> <> 0) || (((1 + <rev_1033@35:0>) = 0) || (<rev_1033@35:0> = 0)))) ||
              (not (<<rev_1033@35:1>@38:0> = <rev_1033@35:0>)))
        begin InterpProver.interpolate(12630)[5]
          begin InterpProver.interpolate_fresh(12631)[6]
            begin InterpProver.interpolate_log(12632)[7]
              input1: (((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0)) ||
                       ((<<rev_1033@35:1>@38:0> = 1) && (<rev_1033@35:0> = 1)))
              input2: ((not ((<<rev_1033@35:1>@38:0> <> 0) || (((1 + <rev_1033@35:0>) = 0) || (<rev_1033@35:0> = 0)))) ||
                       (not (<<rev_1033@35:1>@38:0> = <rev_1033@35:0>)))
              begin InterpProver.interpolate_check(12633)[8]
                begin InterpProver.interpolate_simplify(12634)[9]
                  begin InterpProver.interpolate_quick(12733)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(12742)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(12743)[12]
                        begin CsisatInterface.interpolate_csisat_log(12744)[13]
                          input1: ((0 = v_sep_rev_1033_sep_35_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) | (1 = v_sep_rev_1033_sep_35_sep_0 & 1 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0))
                          input2: ((not 0 = v_sep_rev_1033_sep_35_sep_0 & not 0 = (1 + v_sep_rev_1033_sep_35_sep_0) & 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) | not v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(12745)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(12745)[14] (0.001000 sec.)
                          output: ((((((not 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 | v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) & 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) | not 0 = v_sep_rev_1033_sep_35_sep_0) & 0 = v_sep_rev_1033_sep_35_sep_0) | v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) & (not 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 | not v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 | 0 = v_sep_rev_1033_sep_35_sep_0))
                          
                        end CsisatInterface.interpolate_csisat_log(12744)[13] (0.002000 sec.)
                        after simplification: ((((((not 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 | v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) & 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) | not 0 = v_sep_rev_1033_sep_35_sep_0) & 0 = v_sep_rev_1033_sep_35_sep_0) | v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) & (not 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 | not v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 | 0 = v_sep_rev_1033_sep_35_sep_0))
                        after dnf conversion: ((not 0 = v_sep_rev_1033_sep_35_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_0 & not 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) | (not 0 = v_sep_rev_1033_sep_35_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_0 & not v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) | (not 0 = v_sep_rev_1033_sep_35_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_0) | (not 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_0 & not 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) | (not 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_0 & not v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) | (not 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_0) | (v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_0 & not 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) | (v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_0 & not v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) | (v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_0) | (v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & not 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) | (v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & not v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0) | (v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 = v_sep_rev_1033_sep_35_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(12743)[12] (0.002000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(12742)[11] (0.002000 sec.)
                    
                  end InterpProver.interpolate_quick(12733)[10] (0.002000 sec.)
                  begin minimizing # of disjunctions(12936)[10]
                    input: (((<<rev_1033@35:1>@38:0> = 0) && (<rev_1033@35:0> = 0)) ||
                            (((<rev_1033@35:0> = <<rev_1033@35:1>@38:0>) && (0 <> <<rev_1033@35:1>@38:0>)) ||
                             ((<rev_1033@35:0> = <<rev_1033@35:1>@38:0>) && (<rev_1033@35:0> = 0))))
                    output: (((<rev_1033@35:0> = <<rev_1033@35:1>@38:0>) && (<rev_1033@35:0> = 0)) ||
                             ((<rev_1033@35:0> = <<rev_1033@35:1>@38:0>) && (0 <> <<rev_1033@35:1>@38:0>)))
                  end minimizing # of disjunctions(12936)[10] (0.002000 sec.)
                  begin minimizing # of conjunctions(13011)[10]
                    input: ((<rev_1033@35:0> = <<rev_1033@35:1>@38:0>) && (<rev_1033@35:0> = 0))
                    output: (<rev_1033@35:0> = <<rev_1033@35:1>@38:0>)
                  end minimizing # of conjunctions(13011)[10] (0.001000 sec.)
                  begin minimizing # of conjunctions(13096)[10]
                    input: ((<rev_1033@35:0> = <<rev_1033@35:1>@38:0>) && (0 <> <<rev_1033@35:1>@38:0>))
                    output: (<rev_1033@35:0> = <<rev_1033@35:1>@38:0>)
                  end minimizing # of conjunctions(13096)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(12634)[9] (0.006000 sec.)
                
              end InterpProver.interpolate_check(12633)[8] (0.006999 sec.)
              output: (<rev_1033@35:0> = <<rev_1033@35:1>@38:0>)
            end InterpProver.interpolate_log(12632)[7] (0.006999 sec.)
            
          end InterpProver.interpolate_fresh(12631)[6] (0.006999 sec.)
          
        end InterpProver.interpolate(12630)[5] (0.006999 sec.)
        output:
          P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int) =
          (<rev_1033@35:0> = <<rev_1033@35:1>@38:0>)
          P[<<rev_1033@32:1>@49:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int) =
          (<rev_1033@35:0> = <<rev_1033@35:1>@38:0>)
      end ApronInterface.convex_hull_interpolate(12629)[4] (0.006999 sec.)
      Horn clauses:
        P[<fail_1302@54:0>](<fail_1302@54:0>:bool)|- bot
        
        P[<rev_1033@32:0>]((1 + var59):int),
        P[<<append_1030@42:2>@45:0>](var59:int,1:int,<<rev_1033@32:1>@49:0>:int),
        (((1 + var59) <> <<rev_1033@32:1>@49:0>) && ((1 + var59) <> 0)) |- bot
        
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
        ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
        |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                        <<append_1030@42:2>@45:0>:int)
        
        P[<rev_1033@32:0>]((1 + <append_1030@42:0>):int), ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
        
        P[<rev_1033@32:0>]((1 + <rev_1033@35:0>):int), ((1 + <rev_1033@35:0>) <> 0)
        |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
        
        |- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
      lower bounds:
        P[<rev_1033@32:0>](<rev_1033@32:0>:int) = true
        P[<fail_1302@54:0>](var72:bool) = false
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int) =
        ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        P[<rev_1033@35:0>](<rev_1033@35:0>:int) = ((1 + <rev_1033@35:0>) <> 0)
        P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,<<append_1030@42:2>@45:0>:int) =
        ((<append_1030@42:0> = 0) && ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
      upper bounds:
        P[<rev_1033@35:0>](var78:int) = true
        P[<rev_1033@32:0>](var75:int) = true
      begin GenHcSolver.classify_pids(17493)[4]
        output:
          [<rev_1033@32:0>;<rev_1033@35:0>]
      end GenHcSolver.classify_pids(17493)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(17504)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(17505)[5]
          begin InterpProver.interpolate_fresh(17506)[6]
            begin InterpProver.interpolate_log(17507)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(17508)[8]
                begin InterpProver.interpolate_simplify(17509)[9]
                  begin InterpProver.interpolate_quick(17522)[10]
                    
                  end InterpProver.interpolate_quick(17522)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(17509)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(17508)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(17507)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(17506)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(17505)[5] (0.000000 sec.)
        output:
          P[<rev_1033@32:0>](<rev_1033@32:0>:int) = true
          P[<rev_1033@35:0>](<rev_1033@32:0>:int) = true
      end ApronInterface.convex_hull_interpolate(17504)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1302@54:0>](<fail_1302@54:0>:bool)|- bot
        
        P[<<append_1030@42:2>@45:0>](var59:int,1:int,<<rev_1033@32:1>@49:0>:int),
        (((1 + var59) <> <<rev_1033@32:1>@49:0>) && ((1 + var59) <> 0)) |- bot
        
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
        ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
        |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                        <<append_1030@42:2>@45:0>:int)
        
         ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
      lower bounds:
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int) =
        ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        P[<fail_1302@54:0>](var82:bool) = false
        P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,<<append_1030@42:2>@45:0>:int) =
        ((<append_1030@42:0> = 0) && ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
      upper bounds:
        P[<fail_1302@54:0>](var85:bool) = true
      begin GenHcSolver.classify_pids(20083)[4]
        output:
          [<fail_1302@54:0>]
      end GenHcSolver.classify_pids(20083)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(20086)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(20087)[5]
          begin InterpProver.interpolate_fresh(20088)[6]
            begin InterpProver.interpolate_log(20089)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(20090)[8]
                begin InterpProver.interpolate_simplify(20091)[9]
                  begin InterpProver.interpolate_quick(20104)[10]
                    
                  end InterpProver.interpolate_quick(20104)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(20108)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(20108)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(20091)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(20090)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(20089)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(20088)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(20087)[5] (0.000000 sec.)
        output:
          P[<fail_1302@54:0>](var82:bool) = false
      end ApronInterface.convex_hull_interpolate(20086)[4] (0.000000 sec.)
      Horn clauses:
        P[<<append_1030@42:2>@45:0>](var59:int,1:int,<<rev_1033@32:1>@49:0>:int),
        (((1 + var59) <> <<rev_1033@32:1>@49:0>) && ((1 + var59) <> 0)) |- bot
        
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
        ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
        |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                        <<append_1030@42:2>@45:0>:int)
        
         ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
      lower bounds:
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int) =
        ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,<<append_1030@42:2>@45:0>:int) =
        ((<append_1030@42:0> = 0) && ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
      upper bounds:
        P[<<append_1030@42:2>@45:0>](var86:int,var87:int,var88:int) =
        ((var87 <> 1) || (((1 + var86) = var88) || ((1 + var86) = 0)))
      begin GenHcSolver.classify_pids(22013)[4]
        output:
          [<<append_1030@42:2>@45:0>]
      end GenHcSolver.classify_pids(22013)[4] (0.000000 sec.)
      lb:((<append_1030@42:0> = 0) && ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
      nub:(not
             ((<append_1030@42:1> <> 1) ||
              (((1 + <append_1030@42:0>) = <<append_1030@42:2>@45:0>) || ((1 + <append_1030@42:0>) = 0))))
      begin ApronInterface.convex_hull_interpolate(22016)[4]
        lb:((<append_1030@42:0> = 0) && ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
        nub:(not
               ((<append_1030@42:1> <> 1) ||
                (((1 + <append_1030@42:0>) = <<append_1030@42:2>@45:0>) || ((1 + <append_1030@42:0>) = 0))))
        lb':((<append_1030@42:0> = 0) && ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
        nub':(not
                ((<append_1030@42:1> <> 1) ||
                 (((1 + <append_1030@42:0>) = <<append_1030@42:2>@45:0>) || ((1 + <append_1030@42:0>) = 0))))
        begin InterpProver.interpolate(22017)[5]
          begin InterpProver.interpolate_fresh(22018)[6]
            begin InterpProver.interpolate_log(22019)[7]
              input1: ((<append_1030@42:0> = 0) &&
                       ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
              input2: (not
                         ((<append_1030@42:1> <> 1) ||
                          (((1 + <append_1030@42:0>) = <<append_1030@42:2>@45:0>) || ((1 + <append_1030@42:0>) = 0))))
              begin InterpProver.interpolate_check(22020)[8]
                begin InterpProver.interpolate_simplify(22021)[9]
                  begin InterpProver.interpolate_quick(22148)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(22157)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(22158)[12]
                        begin CsisatInterface.interpolate_csisat_log(22159)[13]
                          input1: (0 = v_sep_append_1030_sep_42_sep_0 & 1 = v_sep_append_1030_sep_42_sep_1 & v_sep_append_1030_sep_42_sep_1 = v_sep_append_1030_sep_42_sep_2_sep_45_sep_0)
                          input2: (not 0 = (1 + v_sep_append_1030_sep_42_sep_0) & not v_sep_append_1030_sep_42_sep_2_sep_45_sep_0 = (1 + v_sep_append_1030_sep_42_sep_0) & 1 = v_sep_append_1030_sep_42_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(22160)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(22160)[14] (0.001000 sec.)
                          output: (1 = v_sep_append_1030_sep_42_sep_2_sep_45_sep_0 & v_sep_append_1030_sep_42_sep_0 <= 0 & -1*v_sep_append_1030_sep_42_sep_0 <= 0)
                          
                        end CsisatInterface.interpolate_csisat_log(22159)[13] (0.001000 sec.)
                        after simplification: (1 = v_sep_append_1030_sep_42_sep_2_sep_45_sep_0 & v_sep_append_1030_sep_42_sep_0 <= 0 & -1*v_sep_append_1030_sep_42_sep_0 <= 0)
                        after dnf conversion: ((1 = v_sep_append_1030_sep_42_sep_2_sep_45_sep_0 & v_sep_append_1030_sep_42_sep_0 <= 0 & -1*v_sep_append_1030_sep_42_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(22158)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(22157)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(22148)[10] (0.001000 sec.)
                  begin minimizing # of conjunctions(22174)[10]
                    input: ((<<append_1030@42:2>@45:0> = 1) && (<append_1030@42:0> = 0))
                    output: ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = 1))
                  end minimizing # of conjunctions(22174)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(22021)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(22020)[8] (0.002000 sec.)
              output: ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = 1))
            end InterpProver.interpolate_log(22019)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(22018)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(22017)[5] (0.002000 sec.)
        output:
          P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,<<append_1030@42:2>@45:0>:int) =
          ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = 1))
      end ApronInterface.convex_hull_interpolate(22016)[4] (0.003000 sec.)
      Horn clauses:
        P[<append_1030@42:1>](0:int,<<append_1030@42:2>@45:0>:int), (<<append_1030@42:2>@45:0> <> 1) |- bot
        
         ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
      lower bounds:
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int) =
        ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
      upper bounds:
        P[<append_1030@42:1>](var89:int,var90:int) = ((var89 <> 0) || (var90 = 1))
      begin GenHcSolver.classify_pids(23244)[4]
        output:
          [<append_1030@42:1>]
      end GenHcSolver.classify_pids(23244)[4] (0.000000 sec.)
      lb:((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
      nub:(not ((<append_1030@42:0> <> 0) || (<append_1030@42:1> = 1)))
      begin ApronInterface.convex_hull_interpolate(23247)[4]
        lb:((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        nub:(not ((<append_1030@42:0> <> 0) || (<append_1030@42:1> = 1)))
        lb':((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        nub':(not ((<append_1030@42:0> <> 0) || (<append_1030@42:1> = 1)))
        begin InterpProver.interpolate(23248)[5]
          begin InterpProver.interpolate_fresh(23249)[6]
            begin InterpProver.interpolate_log(23250)[7]
              input1: ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
              input2: (not ((<append_1030@42:0> <> 0) || (<append_1030@42:1> = 1)))
              begin InterpProver.interpolate_check(23251)[8]
                begin InterpProver.interpolate_simplify(23252)[9]
                  begin InterpProver.interpolate_quick(23309)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(23318)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(23319)[12]
                        begin CsisatInterface.interpolate_csisat_log(23320)[13]
                          input1: (not 0 = (1 + v_sep_append_1030_sep_42_sep_0) & 1 = v_sep_append_1030_sep_42_sep_1)
                          input2: (not 1 = v_sep_append_1030_sep_42_sep_1 & 0 = v_sep_append_1030_sep_42_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(23321)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(23321)[14] (0.000000 sec.)
                          output: 1 = v_sep_append_1030_sep_42_sep_1
                          
                        end CsisatInterface.interpolate_csisat_log(23320)[13] (0.000000 sec.)
                        after simplification: 1 = v_sep_append_1030_sep_42_sep_1
                        after dnf conversion: ((1 = v_sep_append_1030_sep_42_sep_1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(23319)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(23318)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(23309)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(23252)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(23251)[8] (0.002000 sec.)
              output: (1 = <append_1030@42:1>)
            end InterpProver.interpolate_log(23250)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(23249)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(23248)[5] (0.002000 sec.)
        output:
          P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int) = (1 = <append_1030@42:1>)
      end ApronInterface.convex_hull_interpolate(23247)[4] (0.002000 sec.)
      begin HcSolver.check_validity(23505)[4]
        input:
          P[<fail_1302@54:0>](<fail_1302@54:0>:bool)|- bot
          
          P[<<rev_1033@32:1>@49:0>](<f_main_1297@51:1>:int,<f_main_1297@51:3>:int),
          ((<f_main_1297@51:3> <> <f_main_1297@51:1>) && <fail_1302@54:0>)
          |- P[<fail_1302@54:0>](<fail_1302@54:0>:bool)
          
          P[<rev_1033@32:0>](<rev_1033@32:0>:int),
          P[<<rev_1033@35:1>@38:0>]((-1 + <rev_1033@32:0>):int,var59:int),
          P[<<append_1030@42:2>@45:0>](var59:int,1:int,<<rev_1033@32:1>@49:0>:int), (
          <rev_1033@32:0> <> 0) |- P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,
                                                             <<rev_1033@32:1>@49:0>:int)
          
          P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
          ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
          |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                          <<append_1030@42:2>@45:0>:int)
          
          P[<rev_1033@32:0>](<f_rev_1295@40:0>:int),
          P[<<rev_1033@35:1>@38:0>]((-1 + <f_rev_1295@40:0>):int,<append_1030@42:0>:int),
          ((<append_1030@42:1> = 1) && (<f_rev_1295@40:0> <> 0))
          |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
          
          P[<rev_1033@35:0>](<rev_1033@35:0>:int), ((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0))
          |- P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int)
          
          P[<rev_1033@32:0>]((1 + <rev_1033@35:0>):int), ((1 + <rev_1033@35:0>) <> 0)
          |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
          
          |- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(23505)[4] (0.002999 sec.)
      solution:
        P[<fail_1302@54:0>](var82:bool) = false
        P[<<rev_1033@32:1>@49:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int) =
        (<rev_1033@35:0> = <<rev_1033@35:1>@38:0>)
        P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,<<append_1030@42:2>@45:0>:int) =
        ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = 1))
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int) = (1 = <append_1030@42:1>)
        P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int) =
        (<rev_1033@35:0> = <<rev_1033@35:1>@38:0>)
        P[<rev_1033@35:0>](<rev_1033@32:0>:int) = true
        P[<rev_1033@32:0>](<rev_1033@32:0>:int) = true
    end GenHcSolver.solve(8192)[3] (0.085987 sec.)
    begin GenHcSolver.solve(24328)[3]
      Horn clauses:
        P[<fail_1302@54:0>](<fail_1302@54:0>:bool)|- bot
        
        P[<<rev_1033@32:1>@49:0>](<f_main_1297@51:1>:int,<f_main_1297@51:3>:int),
        ((<f_main_1297@51:3> <> <f_main_1297@51:1>) && <fail_1302@54:0>) |- P[<fail_1302@54:0>](
        <fail_1302@54:0>:bool)
        
        P[<rev_1033@32:0>](<rev_1033@32:0>:int),
        P[<<rev_1033@35:1>@38:0>]((-1 + <rev_1033@32:0>):int,var59:int),
        P[<<append_1030@42:2>@45:0>](var59:int,1:int,<<rev_1033@32:1>@49:0>:int), (
        <rev_1033@32:0> <> 0) |- P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,
                                                           <<rev_1033@32:1>@49:0>:int)
        
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
        ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
        |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                        <<append_1030@42:2>@45:0>:int)
        
        P[<rev_1033@32:0>](<f_rev_1295@40:0>:int),
        P[<<rev_1033@35:1>@38:0>]((-1 + <f_rev_1295@40:0>):int,<append_1030@42:0>:int),
        ((<append_1030@42:1> = 1) && (<f_rev_1295@40:0> <> 0))
        |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
        
        P[<rev_1033@35:0>](<rev_1033@35:0>:int), ((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0))
        |- P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int)
        
        P[<rev_1033@32:0>]((1 + <rev_1033@35:0>):int), ((1 + <rev_1033@35:0>) <> 0)
        |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
        
        |- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
      lower bounds:
        P[<rev_1033@32:0>](<rev_1033@32:0>:int) = true
        P[<rev_1033@35:0>](<rev_1033@35:0>:int) = ((1 + <rev_1033@35:0>) <> 0)
        P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int) =
        ((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0))
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int) =
        ((<append_1030@42:0> = 0) && (<append_1030@42:1> = 1))
        P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,<<append_1030@42:2>@45:0>:int) =
        ((<append_1030@42:0> = 0) && ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
        P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,<<rev_1033@32:1>@49:0>:int) =
        ((<<rev_1033@32:1>@49:0> = 1) && (<rev_1033@32:0> = 1))
        P[<fail_1302@54:0>](<fail_1302@54:0>:bool) = false
      upper bounds:
        P[<<rev_1033@32:1>@49:0>](var98:int,var99:int) = (var99 = var98)
        P[<<rev_1033@35:1>@38:0>](var94:int,var95:int) = ((var95 <> 0) || (((1 + var94) = 0) || (var94 = 0)))
      begin GenHcSolver.classify_pids(28714)[4]
        output:
          [<<rev_1033@35:1>@38:0>;<<rev_1033@32:1>@49:0>]
      end GenHcSolver.classify_pids(28714)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(28765)[4]
        lb:(((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0)) ||
            ((<<rev_1033@35:1>@38:0> = 1) && (<rev_1033@35:0> = 1)))
        nub:((not ((<<rev_1033@35:1>@38:0> <> 0) || (((1 + <rev_1033@35:0>) = 0) || (<rev_1033@35:0> = 0)))) ||
             (not (<<rev_1033@35:1>@38:0> = <rev_1033@35:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(28783)[5]
          ts: (((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0)) ||
               ((<<rev_1033@35:1>@38:0> = 1) && (<rev_1033@35:0> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(28783)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(28822)[5]
          ts: ((<<rev_1033@35:1>@38:0> <> <rev_1033@35:0>) ||
               ((<<rev_1033@35:1>@38:0> = 0) && (((1 + <rev_1033@35:0>) <> 0) && (<rev_1033@35:0> <> 0))))
          
        end ExtFormula.Formula.case_analysis_boolean(28822)[5] (0.000000 sec.)
        lb':(((<<rev_1033@35:1>@38:0> + (-1 * <rev_1033@35:0>)) = 0) &&
             (((1 + (-1 * <rev_1033@35:0>)) >= 0) && (<rev_1033@35:0> >= 0)))
        nub':true
        begin InterpProver.interpolate(28831)[5]
          begin InterpProver.interpolate_fresh(28832)[6]
            begin InterpProver.interpolate_log(28833)[7]
              input1: (((<<rev_1033@35:1>@38:0> + (-1 * <rev_1033@35:0>)) = 0) &&
                       (((1 + (-1 * <rev_1033@35:0>)) >= 0) && (<rev_1033@35:0> >= 0)))
              input2: true
              begin InterpProver.interpolate_check(28834)[8]
                begin InterpProver.interpolate_simplify(28835)[9]
                  begin InterpProver.interpolate_quick(28888)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(28894)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(28895)[12]
                        begin CsisatInterface.interpolate_csisat_log(28896)[13]
                          input1: (0 <= v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 <= 1)
                          input2: true
                          begin CsisatInterface.interpolate_csisat_raw(28897)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(28897)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(28896)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(28895)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(28894)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(28888)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(28835)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(28834)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(28833)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(28832)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(28831)[5] (0.002000 sec.)
        begin InterpProver.interpolate(28905)[5]
          begin InterpProver.interpolate_fresh(28906)[6]
            begin InterpProver.interpolate_log(28907)[7]
              input1: (((<<rev_1033@35:1>@38:0> + (-1 * <rev_1033@35:0>)) = 0) &&
                       (((1 + (-1 * <rev_1033@35:0>)) >= 0) && (<rev_1033@35:0> >= 0)))
              input2: (not (<<rev_1033@35:1>@38:0> = <rev_1033@35:0>))
              begin InterpProver.interpolate_check(28908)[8]
                begin InterpProver.interpolate_simplify(28909)[9]
                  begin InterpProver.interpolate_quick(28984)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(28993)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(28994)[12]
                        begin CsisatInterface.interpolate_csisat_log(28995)[13]
                          input1: (v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 <= v_sep_rev_1033_sep_35_sep_0 & v_sep_rev_1033_sep_35_sep_0 <= 1)
                          input2: not v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(28996)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(28996)[14] (0.000000 sec.)
                          output: v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(28995)[13] (0.000000 sec.)
                        after simplification: v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0
                        after dnf conversion: ((v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(28994)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(28993)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(28984)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(28909)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(28908)[8] (0.000999 sec.)
              output: (<rev_1033@35:0> = <<rev_1033@35:1>@38:0>)
            end InterpProver.interpolate_log(28907)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(28906)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(28905)[5] (0.000999 sec.)
        begin InterpProver.interpolate(29023)[5]
          begin InterpProver.interpolate_fresh(29024)[6]
            begin InterpProver.interpolate_log(29025)[7]
              input1: (((<<rev_1033@35:1>@38:0> + (-1 * <rev_1033@35:0>)) = 0) &&
                       (((1 + (-1 * <rev_1033@35:0>)) >= 0) && (<rev_1033@35:0> >= 0)))
              input2: (not ((<<rev_1033@35:1>@38:0> <> 0) || (((1 + <rev_1033@35:0>) = 0) || (<rev_1033@35:0> = 0))))
              begin InterpProver.interpolate_check(29026)[8]
                begin InterpProver.interpolate_simplify(29027)[9]
                  begin InterpProver.interpolate_quick(29144)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(29153)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(29154)[12]
                        begin CsisatInterface.interpolate_csisat_log(29155)[13]
                          input1: (v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0 & 0 <= v_sep_rev_1033_sep_35_sep_0 & v_sep_rev_1033_sep_35_sep_0 <= 1)
                          input2: (not 0 = v_sep_rev_1033_sep_35_sep_0 & not 0 = (1 + v_sep_rev_1033_sep_35_sep_0) & 0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(29156)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(29156)[14] (0.000000 sec.)
                          output: v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(29155)[13] (0.000000 sec.)
                        after simplification: v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0
                        after dnf conversion: ((v_sep_rev_1033_sep_35_sep_0 = v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(29154)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(29153)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(29144)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(29027)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(29026)[8] (0.002000 sec.)
              output: (<rev_1033@35:0> = <<rev_1033@35:1>@38:0>)
            end InterpProver.interpolate_log(29025)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(29024)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(29023)[5] (0.002000 sec.)
        output:
          P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int) =
          (<rev_1033@35:0> = <<rev_1033@35:1>@38:0>)
          P[<<rev_1033@32:1>@49:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int) =
          (<rev_1033@35:0> = <<rev_1033@35:1>@38:0>)
      end ApronInterface.convex_hull_interpolate(28765)[4] (0.004999 sec.)
      Horn clauses:
        P[<fail_1302@54:0>](<fail_1302@54:0>:bool)|- bot
        
        P[<rev_1033@32:0>]((1 + var59):int),
        P[<<append_1030@42:2>@45:0>](var59:int,1:int,<<rev_1033@32:1>@49:0>:int),
        (((1 + var59) <> <<rev_1033@32:1>@49:0>) && ((1 + var59) <> 0)) |- bot
        
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
        ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
        |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                        <<append_1030@42:2>@45:0>:int)
        
        P[<rev_1033@32:0>]((1 + <append_1030@42:0>):int), ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
        
        P[<rev_1033@32:0>]((1 + <rev_1033@35:0>):int), ((1 + <rev_1033@35:0>) <> 0)
        |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
        
        |- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
      lower bounds:
        P[<rev_1033@32:0>](<rev_1033@32:0>:int) = true
        P[<fail_1302@54:0>](var103:bool) = false
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int) =
        ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        P[<rev_1033@35:0>](<rev_1033@35:0>:int) = ((1 + <rev_1033@35:0>) <> 0)
        P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,<<append_1030@42:2>@45:0>:int) =
        ((<append_1030@42:0> = 0) && ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
      upper bounds:
        P[<rev_1033@35:0>](var109:int) = true
        P[<rev_1033@32:0>](var106:int) = true
      begin GenHcSolver.classify_pids(33451)[4]
        output:
          [<rev_1033@32:0>;<rev_1033@35:0>]
      end GenHcSolver.classify_pids(33451)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(33462)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(33465)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(33465)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(33470)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(33470)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(33473)[5]
          begin InterpProver.interpolate_fresh(33474)[6]
            begin InterpProver.interpolate_log(33475)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(33476)[8]
                begin InterpProver.interpolate_simplify(33477)[9]
                  begin InterpProver.interpolate_quick(33491)[10]
                    
                  end InterpProver.interpolate_quick(33491)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(33477)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(33476)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(33475)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(33474)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(33473)[5] (0.000000 sec.)
        output:
          P[<rev_1033@32:0>](<rev_1033@32:0>:int) = true
          P[<rev_1033@35:0>](<rev_1033@32:0>:int) = true
      end ApronInterface.convex_hull_interpolate(33462)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1302@54:0>](<fail_1302@54:0>:bool)|- bot
        
        P[<<append_1030@42:2>@45:0>](var59:int,1:int,<<rev_1033@32:1>@49:0>:int),
        (((1 + var59) <> <<rev_1033@32:1>@49:0>) && ((1 + var59) <> 0)) |- bot
        
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
        ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
        |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                        <<append_1030@42:2>@45:0>:int)
        
         ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
      lower bounds:
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int) =
        ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        P[<fail_1302@54:0>](var113:bool) = false
        P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,<<append_1030@42:2>@45:0>:int) =
        ((<append_1030@42:0> = 0) && ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
      upper bounds:
        P[<fail_1302@54:0>](var116:bool) = true
      begin GenHcSolver.classify_pids(36054)[4]
        output:
          [<fail_1302@54:0>]
      end GenHcSolver.classify_pids(36054)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(36057)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(36060)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(36060)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(36065)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(36065)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(36068)[5]
          begin InterpProver.interpolate_fresh(36069)[6]
            begin InterpProver.interpolate_log(36070)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(36071)[8]
                begin InterpProver.interpolate_simplify(36072)[9]
                  begin InterpProver.interpolate_quick(36087)[10]
                    
                  end InterpProver.interpolate_quick(36087)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(36091)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(36091)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(36072)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(36071)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(36070)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(36069)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(36068)[5] (0.000000 sec.)
        output:
          P[<fail_1302@54:0>](var113:bool) = false
      end ApronInterface.convex_hull_interpolate(36057)[4] (0.001000 sec.)
      Horn clauses:
        P[<<append_1030@42:2>@45:0>](var59:int,1:int,<<rev_1033@32:1>@49:0>:int),
        (((1 + var59) <> <<rev_1033@32:1>@49:0>) && ((1 + var59) <> 0)) |- bot
        
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
        ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
        |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                        <<append_1030@42:2>@45:0>:int)
        
         ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
      lower bounds:
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int) =
        ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,<<append_1030@42:2>@45:0>:int) =
        ((<append_1030@42:0> = 0) && ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
      upper bounds:
        P[<<append_1030@42:2>@45:0>](var117:int,var118:int,var119:int) =
        ((var118 <> 1) || (((1 + var117) = var119) || ((1 + var117) = 0)))
      begin GenHcSolver.classify_pids(38003)[4]
        output:
          [<<append_1030@42:2>@45:0>]
      end GenHcSolver.classify_pids(38003)[4] (0.000000 sec.)
      lb:((<append_1030@42:0> = 0) && ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
      nub:(not
             ((<append_1030@42:1> <> 1) ||
              (((1 + <append_1030@42:0>) = <<append_1030@42:2>@45:0>) || ((1 + <append_1030@42:0>) = 0))))
      begin ApronInterface.convex_hull_interpolate(38006)[4]
        lb:((<append_1030@42:0> = 0) && ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
        nub:(not
               ((<append_1030@42:1> <> 1) ||
                (((1 + <append_1030@42:0>) = <<append_1030@42:2>@45:0>) || ((1 + <append_1030@42:0>) = 0))))
        begin ExtFormula.Formula.case_analysis_boolean(38031)[5]
          ts: ((<append_1030@42:0> = 0) &&
               ((<append_1030@42:1> = 1) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>)))
          
        end ExtFormula.Formula.case_analysis_boolean(38031)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(38076)[5]
          ts: ((<append_1030@42:1> = 1) &&
               (((1 + <append_1030@42:0>) <> <<append_1030@42:2>@45:0>) && ((1 + <append_1030@42:0>) <> 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(38076)[5] (0.000000 sec.)
        lb':(((-1 + <<append_1030@42:2>@45:0>) = 0) && (((-1 + <append_1030@42:1>) = 0) && (<append_1030@42:0> = 0)))
        nub':((-1 + <append_1030@42:1>) = 0)
        begin InterpProver.interpolate(38086)[5]
          begin InterpProver.interpolate_fresh(38087)[6]
            begin InterpProver.interpolate_log(38088)[7]
              input1: (((-1 + <<append_1030@42:2>@45:0>) = 0) &&
                       (((-1 + <append_1030@42:1>) = 0) && (<append_1030@42:0> = 0)))
              input2: ((-1 + <append_1030@42:1>) = 0)
              begin InterpProver.interpolate_check(38089)[8]
                begin InterpProver.interpolate_simplify(38090)[9]
                  begin InterpProver.interpolate_quick(38143)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(38152)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(38153)[12]
                        begin CsisatInterface.interpolate_csisat_log(38154)[13]
                          input1: 1 = v_sep_append_1030_sep_42_sep_1
                          input2: 1 = v_sep_append_1030_sep_42_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(38155)[14]
                            csisat error: NelsonOppen: not a conjunction
                            
                          end CsisatInterface.interpolate_csisat_raw(38155)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(38154)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(38153)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(38152)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(38143)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(38090)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(38089)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(38088)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(38087)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(38086)[5] (0.001000 sec.)
        begin InterpProver.interpolate(38165)[5]
          begin InterpProver.interpolate_fresh(38166)[6]
            begin InterpProver.interpolate_log(38167)[7]
              input1: (((-1 + <<append_1030@42:2>@45:0>) = 0) &&
                       (((-1 + <append_1030@42:1>) = 0) && (<append_1030@42:0> = 0)))
              input2: (not
                         ((<append_1030@42:1> <> 1) ||
                          (((1 + <append_1030@42:0>) = <<append_1030@42:2>@45:0>) || ((1 + <append_1030@42:0>) = 0))))
              begin InterpProver.interpolate_check(38168)[8]
                begin InterpProver.interpolate_simplify(38169)[9]
                  begin InterpProver.interpolate_quick(38282)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(38291)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(38292)[12]
                        begin CsisatInterface.interpolate_csisat_log(38293)[13]
                          input1: (0 = v_sep_append_1030_sep_42_sep_0 & 1 = v_sep_append_1030_sep_42_sep_1 & 1 = v_sep_append_1030_sep_42_sep_2_sep_45_sep_0)
                          input2: (not 0 = (1 + v_sep_append_1030_sep_42_sep_0) & not v_sep_append_1030_sep_42_sep_2_sep_45_sep_0 = (1 + v_sep_append_1030_sep_42_sep_0) & 1 = v_sep_append_1030_sep_42_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(38294)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(38294)[14] (0.000000 sec.)
                          output: (1 = v_sep_append_1030_sep_42_sep_2_sep_45_sep_0 & v_sep_append_1030_sep_42_sep_0 <= 0 & -1*v_sep_append_1030_sep_42_sep_0 <= 0)
                          
                        end CsisatInterface.interpolate_csisat_log(38293)[13] (0.000000 sec.)
                        after simplification: (1 = v_sep_append_1030_sep_42_sep_2_sep_45_sep_0 & v_sep_append_1030_sep_42_sep_0 <= 0 & -1*v_sep_append_1030_sep_42_sep_0 <= 0)
                        after dnf conversion: ((1 = v_sep_append_1030_sep_42_sep_2_sep_45_sep_0 & v_sep_append_1030_sep_42_sep_0 <= 0 & -1*v_sep_append_1030_sep_42_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(38292)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(38291)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(38282)[10] (0.001000 sec.)
                  begin minimizing # of conjunctions(38308)[10]
                    input: ((<<append_1030@42:2>@45:0> = 1) && (<append_1030@42:0> = 0))
                    output: ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = 1))
                  end minimizing # of conjunctions(38308)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(38169)[9] (0.003000 sec.)
                
              end InterpProver.interpolate_check(38168)[8] (0.003000 sec.)
              output: ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = 1))
            end InterpProver.interpolate_log(38167)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(38166)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(38165)[5] (0.003000 sec.)
        output:
          P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,<<append_1030@42:2>@45:0>:int) =
          ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = 1))
      end ApronInterface.convex_hull_interpolate(38006)[4] (0.005000 sec.)
      Horn clauses:
        P[<append_1030@42:1>](0:int,<<append_1030@42:2>@45:0>:int), (<<append_1030@42:2>@45:0> <> 1) |- bot
        
         ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
      lower bounds:
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int) =
        ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
      upper bounds:
        P[<append_1030@42:1>](var120:int,var121:int) = ((var120 <> 0) || (var121 = 1))
      begin GenHcSolver.classify_pids(39378)[4]
        output:
          [<append_1030@42:1>]
      end GenHcSolver.classify_pids(39378)[4] (0.000000 sec.)
      lb:((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
      nub:(not ((<append_1030@42:0> <> 0) || (<append_1030@42:1> = 1)))
      begin ApronInterface.convex_hull_interpolate(39381)[4]
        lb:((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
        nub:(not ((<append_1030@42:0> <> 0) || (<append_1030@42:1> = 1)))
        begin ExtFormula.Formula.case_analysis_boolean(39396)[5]
          ts: ((<append_1030@42:1> = 1) && ((1 + <append_1030@42:0>) <> 0))
          
        end ExtFormula.Formula.case_analysis_boolean(39396)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(39415)[5]
          ts: ((<append_1030@42:0> = 0) && (<append_1030@42:1> <> 1))
          
        end ExtFormula.Formula.case_analysis_boolean(39415)[5] (0.000000 sec.)
        lb':((-1 + <append_1030@42:1>) = 0)
        nub':(<append_1030@42:0> = 0)
        begin InterpProver.interpolate(39421)[5]
          begin InterpProver.interpolate_fresh(39422)[6]
            begin InterpProver.interpolate_log(39423)[7]
              input1: ((-1 + <append_1030@42:1>) = 0)
              input2: (<append_1030@42:0> = 0)
              begin InterpProver.interpolate_check(39424)[8]
                begin InterpProver.interpolate_simplify(39425)[9]
                  begin InterpProver.interpolate_quick(39452)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(39455)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(39456)[12]
                        begin CsisatInterface.interpolate_csisat_log(39457)[13]
                          input1: true
                          input2: true
                          begin CsisatInterface.interpolate_csisat_raw(39458)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(39458)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(39457)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(39456)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(39455)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(39452)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(39425)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(39424)[8] (0.000999 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(39423)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(39422)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(39421)[5] (0.000999 sec.)
        begin InterpProver.interpolate(39467)[5]
          begin InterpProver.interpolate_fresh(39468)[6]
            begin InterpProver.interpolate_log(39469)[7]
              input1: ((-1 + <append_1030@42:1>) = 0)
              input2: (not ((<append_1030@42:0> <> 0) || (<append_1030@42:1> = 1)))
              begin InterpProver.interpolate_check(39470)[8]
                begin InterpProver.interpolate_simplify(39471)[9]
                  begin InterpProver.interpolate_quick(39514)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(39523)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(39524)[12]
                        begin CsisatInterface.interpolate_csisat_log(39525)[13]
                          input1: 1 = v_sep_append_1030_sep_42_sep_1
                          input2: not 1 = v_sep_append_1030_sep_42_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(39526)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(39526)[14] (0.000000 sec.)
                          output: 1 = v_sep_append_1030_sep_42_sep_1
                          
                        end CsisatInterface.interpolate_csisat_log(39525)[13] (0.000000 sec.)
                        after simplification: 1 = v_sep_append_1030_sep_42_sep_1
                        after dnf conversion: ((1 = v_sep_append_1030_sep_42_sep_1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(39524)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(39523)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(39514)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(39471)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(39470)[8] (0.001000 sec.)
              output: (1 = <append_1030@42:1>)
            end InterpProver.interpolate_log(39469)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(39468)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(39467)[5] (0.001000 sec.)
        output:
          P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int) = (1 = <append_1030@42:1>)
      end ApronInterface.convex_hull_interpolate(39381)[4] (0.001999 sec.)
      begin HcSolver.check_validity(39710)[4]
        input:
          P[<fail_1302@54:0>](<fail_1302@54:0>:bool)|- bot
          
          P[<<rev_1033@32:1>@49:0>](<f_main_1297@51:1>:int,<f_main_1297@51:3>:int),
          ((<f_main_1297@51:3> <> <f_main_1297@51:1>) && <fail_1302@54:0>)
          |- P[<fail_1302@54:0>](<fail_1302@54:0>:bool)
          
          P[<rev_1033@32:0>](<rev_1033@32:0>:int),
          P[<<rev_1033@35:1>@38:0>]((-1 + <rev_1033@32:0>):int,var59:int),
          P[<<append_1030@42:2>@45:0>](var59:int,1:int,<<rev_1033@32:1>@49:0>:int), (
          <rev_1033@32:0> <> 0) |- P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,
                                                             <<rev_1033@32:1>@49:0>:int)
          
          P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
          ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
          |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                          <<append_1030@42:2>@45:0>:int)
          
          P[<rev_1033@32:0>](<f_rev_1295@40:0>:int),
          P[<<rev_1033@35:1>@38:0>]((-1 + <f_rev_1295@40:0>):int,<append_1030@42:0>:int),
          ((<append_1030@42:1> = 1) && (<f_rev_1295@40:0> <> 0))
          |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
          
          P[<rev_1033@35:0>](<rev_1033@35:0>:int), ((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0))
          |- P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int)
          
          P[<rev_1033@32:0>]((1 + <rev_1033@35:0>):int), ((1 + <rev_1033@35:0>) <> 0)
          |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
          
          |- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(39710)[4] (0.004999 sec.)
      solution:
        P[<fail_1302@54:0>](var113:bool) = false
        P[<<rev_1033@32:1>@49:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int) =
        (<rev_1033@35:0> = <<rev_1033@35:1>@38:0>)
        P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,<<append_1030@42:2>@45:0>:int) =
        ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = 1))
        P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int) = (1 = <append_1030@42:1>)
        P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int) =
        (<rev_1033@35:0> = <<rev_1033@35:1>@38:0>)
        P[<rev_1033@35:0>](<rev_1033@32:0>:int) = true
        P[<rev_1033@32:0>](<rev_1033@32:0>:int) = true
    end GenHcSolver.solve(24328)[3] (0.082987 sec.)
    begin YhornInterface.solve(40533)[3]
      begin HcSolver.solve_ub(40534)[4]
        encoded:
          P[<fail_1302@54:0>](<fail_1302@54:0>:int)|- bot
          
          P[<<rev_1033@32:1>@49:0>](<f_main_1297@51:1>:int,<f_main_1297@51:3>:int),
          ((<f_main_1297@51:3> <> <f_main_1297@51:1>) && (<fail_1302@54:0> = 1))
          |- P[<fail_1302@54:0>](<fail_1302@54:0>:int)
          
          P[<rev_1033@32:0>](<rev_1033@32:0>:int),
          P[<<rev_1033@35:1>@38:0>]((-1 + <rev_1033@32:0>):int,var59:int),
          P[<<append_1030@42:2>@45:0>](var59:int,1:int,<<rev_1033@32:1>@49:0>:int), (
          <rev_1033@32:0> <> 0) |- P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,
                                                             <<rev_1033@32:1>@49:0>:int)
          
          P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
          ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
          |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                          <<append_1030@42:2>@45:0>:int)
          
          P[<rev_1033@32:0>](<f_rev_1295@40:0>:int),
          P[<<rev_1033@35:1>@38:0>]((-1 + <f_rev_1295@40:0>):int,<append_1030@42:0>:int),
          ((<append_1030@42:1> = 1) && (<f_rev_1295@40:0> <> 0))
          |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
          
          P[<rev_1033@35:0>](<rev_1033@35:0>:int), ((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0))
          |- P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int)
          
          P[<rev_1033@32:0>]((1 + <rev_1033@35:0>):int), ((1 + <rev_1033@35:0>) <> 0)
          |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
          
          |- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
        input to Yhorn:
          P[<fail_1302@54:0>](<fail_1302@54:0>:int)|- bot
          
          P[<<rev_1033@32:1>@49:0>](<f_main_1297@51:1>:int,<f_main_1297@51:3>:int),
          ((<f_main_1297@51:3> <> <f_main_1297@51:1>) && (<fail_1302@54:0> = 1))
          |- P[<fail_1302@54:0>](<fail_1302@54:0>:int)
          
          P[<rev_1033@32:0>](<rev_1033@32:0>:int),
          P[<<rev_1033@35:1>@38:0>](var122:int,var59:int),
          P[<<append_1030@42:2>@45:0>](var59:int,var123:int,<<rev_1033@32:1>@49:0>:int),
          (((1 + var122) = <rev_1033@32:0>) && ((<rev_1033@32:0> <> 0) && (var123 = 1)))
          |- P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,<<rev_1033@32:1>@49:0>:int)
          
          P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
          ((<<append_1030@42:2>@45:0> = <append_1030@42:1>) && (<append_1030@42:0> = 0))
          |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                          <<append_1030@42:2>@45:0>:int)
          
          P[<rev_1033@32:0>](<f_rev_1295@40:0>:int),
          P[<<rev_1033@35:1>@38:0>](var124:int,<append_1030@42:0>:int),
          (((1 + var124) = <f_rev_1295@40:0>) && ((<f_rev_1295@40:0> <> 0) && (<append_1030@42:1> = 1)))
          |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
          
          P[<rev_1033@35:0>](<rev_1033@35:0>:int), ((<<rev_1033@35:1>@38:0> = 0) && (<rev_1033@35:0> = 0))
          |- P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int)
          
          P[<rev_1033@32:0>](var125:int), ((var125 = (1 + <rev_1033@35:0>)) && ((1 + <rev_1033@35:0>) <> 0))
          |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1302_sep_54_sep_0($147)) -> 1=0.
(($147-1=0) & ($148-$149<>0)) & (v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0($149,$148)) -> v_sep_fail_1302_sep_54_sep_0($147).
(($150-1=0) & ($151<>0) & (-$151+$152+1=0)) & (v_sep_append_1030_sep_42_sep_2_sep_45_sep_0($153,$150,$154)) & (v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0($152,$153)) & (v_sep_rev_1033_sep_32_sep_0($151)) -> v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0($151,$154).
(($155=0) & ($156-$157=0)) & (v_sep_append_1030_sep_42_sep_1($155,$157)) -> v_sep_append_1030_sep_42_sep_2_sep_45_sep_0($155,$157,$156).
(($157-1=0) & ($158<>0) & (-$158+$159+1=0)) & (v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0($159,$155)) & (v_sep_rev_1033_sep_32_sep_0($158)) -> v_sep_append_1030_sep_42_sep_1($155,$157).
(($160=0) & ($161=0)) & (v_sep_rev_1033_sep_35_sep_0($160)) -> v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0($160,$161).
(($160+1<>0) & (-$160+$162-1=0)) & (v_sep_rev_1033_sep_32_sep_0($162)) -> v_sep_rev_1033_sep_35_sep_0($160).
0=0 -> v_sep_rev_1033_sep_32_sep_0($151).


v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: X
v_sep_fail_1302_sep_54_sep_0: X
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: X
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
..................Split disj [32] 0.507922
Reconstrcut: 3 **)

v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: X
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: X
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.....
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: X
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: X
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.....Split conj [34] 0.512921
(Reconstrcut: 8 **)
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: X
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.................
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: X
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.....
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: X
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.................Split conj [37] 0.525919
(Reconstrcut: 14 ****)
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.....................
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.....
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: X
.................Split conj [43] 0.547916
(Reconstrcut: 25 ******)
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
...............................
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
.....
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
.................
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
.........................
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
...............................
v_sep_append_1030_sep_42_sep_1: X
v_sep_append_1030_sep_42_sep_2_sep_45_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1302_sep_54_sep_0: (X) | (X)
v_sep_rev_1033_sep_32_sep_0: X
v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0: (X) & (X)
v_sep_rev_1033_sep_35_sep_0: X
v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
.................................(0=0) & (v_sep_fail_1302_sep_54_sep_0($147)) -> 1=0.
(($147-1=0) & ($148-$149<>0)) & (v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0($149,$148)) -> v_sep_fail_1302_sep_54_sep_0($147).
(($150-1=0) & ($151<>0) & (-$151+$152+1=0)) & (v_sep_append_1030_sep_42_sep_2_sep_45_sep_0($153,$150,$154)) & (v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0($152,$153)) & (v_sep_rev_1033_sep_32_sep_0($151)) -> v_sep_rev_1033_sep_32_sep_1_sep_49_sep_0($151,$154).
(($155=0) & ($156-$157=0)) & (v_sep_append_1030_sep_42_sep_1($155,$157)) -> v_sep_append_1030_sep_42_sep_2_sep_45_sep_0($155,$157,$156).
(($157-1=0) & ($158<>0) & (-$158+$159+1=0)) & (v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0($159,$155)) & (v_sep_rev_1033_sep_32_sep_0($158)) -> v_sep_append_1030_sep_42_sep_1($155,$157).
(($160=0) & ($161=0)) & (v_sep_rev_1033_sep_35_sep_0($160)) -> v_sep_rev_1033_sep_35_sep_1_sep_38_sep_0($160,$161).
(($160+1<>0) & (-$160+$162-1=0)) & (v_sep_rev_1033_sep_32_sep_0($162)) -> v_sep_rev_1033_sep_35_sep_0($160).
0=0 -> v_sep_rev_1033_sep_32_sep_0($151).

          |- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
        solution:
          P[<append_1030@42:1>]($186:int,$188:int) = true
          P[<<append_1030@42:2>@45:0>]($171:int,$173:int,$175:int) = ($173 = $175)
          P[<fail_1302@54:0>]($163:bool) = false
          P[<rev_1033@32:0>]($183:int) = true
          P[<<rev_1033@32:1>@49:0>]($166:int,$168:int) = ($166 = $168)
          P[<rev_1033@35:0>]($191:int) = true
          P[<<rev_1033@35:1>@38:0>]($178:int,$180:int) = ($178 = 0)
        
      end HcSolver.solve_ub(40534)[4] (0.116983 sec.)
      begin HcSolver.check_validity(40950)[4]
        input:
          P[<fail_1302@54:0>](<fail_1302@54:0>:bool)|- bot
          
          P[<<rev_1033@32:1>@49:0>](<f_main_1297@51:1>:int,<f_main_1297@51:3>:int),
          ((<f_main_1297@51:3> <> <f_main_1297@51:1>) && <fail_1302@54:0>)
          |- P[<fail_1302@54:0>](<fail_1302@54:0>:bool)
          
          P[<rev_1033@32:0>](<rev_1033@32:0>:int),
          P[<<rev_1033@35:1>@38:0>]((-1 + <rev_1033@32:0>):int,var59:int),
          P[<<append_1030@42:2>@45:0>](var59:int,1:int,<<rev_1033@32:1>@49:0>:int), (
          <rev_1033@32:0> <> 0) |- P[<<rev_1033@32:1>@49:0>](<rev_1033@32:0>:int,
                                                             <<rev_1033@32:1>@49:0>:int)
          
          P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int),
          ((<append_1030@42:0> = 0) && (<<append_1030@42:2>@45:0> = <append_1030@42:1>))
          |- P[<<append_1030@42:2>@45:0>](<append_1030@42:0>:int,<append_1030@42:1>:int,
                                          <<append_1030@42:2>@45:0>:int)
          
          P[<rev_1033@32:0>](<f_rev_1295@40:0>:int),
          P[<<rev_1033@35:1>@38:0>]((-1 + <f_rev_1295@40:0>):int,<append_1030@42:0>:int),
          ((<append_1030@42:1> = 1) && (<f_rev_1295@40:0> <> 0))
          |- P[<append_1030@42:1>](<append_1030@42:0>:int,<append_1030@42:1>:int)
          
          P[<rev_1033@35:0>](<rev_1033@35:0>:int), ((<rev_1033@35:0> = 0) && (<<rev_1033@35:1>@38:0> = 0))
          |- P[<<rev_1033@35:1>@38:0>](<rev_1033@35:0>:int,<<rev_1033@35:1>@38:0>:int)
          
          P[<rev_1033@32:0>]((1 + <rev_1033@35:0>):int), ((1 + <rev_1033@35:0>) <> 0)
          |- P[<rev_1033@35:0>](<rev_1033@35:0>:int)
          
          |- P[<rev_1033@32:0>](<rev_1033@32:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(40950)[4] (0.002999 sec.)
      solution:
        P[<append_1030@42:1>]($186:int,$188:int) = true
        P[<<append_1030@42:2>@45:0>]($171:int,$173:int,$175:int) = ($173 = $175)
        P[<fail_1302@54:0>]($163:bool) = false
        P[<rev_1033@32:0>]($183:int) = true
        P[<<rev_1033@32:1>@49:0>]($166:int,$168:int) = ($166 = $168)
        P[<rev_1033@35:0>]($191:int) = true
        P[<<rev_1033@35:1>@38:0>]($178:int,$180:int) = ($178 = 0)
    end YhornInterface.solve(40533)[3] (0.120982 sec.)
    
  end RefTypeInfer.infer_etrs(6097)[2] (0.321951 sec.)
  refinement types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:{v2:int | (v1 = v2)} -> X) -> X
    rev_1033: v1:int -> (v2:{v2:int | (v1 = v2)} -> X) -> X
    f_rev_1295: v1:int -> (v2:int -> X) -> v4:int -> X
    append_1030: v1:int -> v2:{v2:int | (1 = v2)} -> (v3:{v3:int | ((v1 = 0) && (v3 = 1))} -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1302: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1300: var135:int -> var134:int -> var133:unit -> X
    f_append_1294: var141:int -> var140:int -> (var139:int -> X) -> var137:int -> X
    f_k_main_u_1296: var148:int -> var147:int -> var146:unit -> (var145:unit -> X) -> var143:int -> X
    fail_1301: var152:bool -> (var151:unit -> X) -> X
    k_main_u_1218: var158:int -> var157:int -> (var156:unit -> X) -> var154:unit -> X
  abstraction types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: var159:int -> (var160:int[var160 -> (var159 = var160)] -> X) -> X
    f_rev_1295: v1:int -> (v2:int -> X) -> v4:int -> X
    append_1030: v1:int -> v2:int[v2 -> (1 = v2)] -> (v3:int[v3 -> ((v1 = 0) && (v3 = 1))] -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1302: v1:bool -> (v2:unit -> X) -> X
    f_1300: var135:int -> var134:int -> var133:unit -> X
    f_append_1294: var141:int -> var140:int -> (var139:int -> X) -> var137:int -> X
    f_k_main_u_1296: var148:int -> var147:int -> var146:unit -> (var145:unit -> X) -> var143:int -> X
    fail_1301: var152:bool -> (var151:unit -> X) -> X
    k_main_u_1218: var158:int -> var157:int -> (var156:unit -> X) -> var154:unit -> X
  
end AbsTypeInfer.refine(6096)[1] (0.330949 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1293
  main_1293 -> (rand_int f_1298)
  append_1030 x_1031 y_1032 k_append_1105 when (x_1031 = 0) -> (k_append_1105 y_1032)
  append_1030 x_1031 y_1032 k_append_1105 when (not (x_1031 = 0)) ->
      (append_1030 (x_1031 - 1) y_1032 (f_append_1294 x_1031 y_1032 k_append_1105))
  f_1298 x_1251 -> (rand_int (f_1299 x_1251))
  f_1299 x_1251 x_1264 -> (main_1035 x_1251 x_1264 (f_1300 x_1251 x_1264))
  f_1300 x_1251 x_1264 x_1248 -> end
  f_append_1294 x_1031 y_1032 k_append_1105 x_1109 -> (k_append_1105 (1 + x_1109))
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (x_1222 = (n_1036 + m_1037)) -> (k_main_1191 ())
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (not (x_1222 = (n_1036 + m_1037))) ->
      (fail_1301 true k_main_1191)
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (x_1197 = n_1036) -> (k_main_u_1218 m_1037 n_1036 k_main_1191 ())
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (not (x_1197 = n_1036)) ->
      (fail_1302 true (k_main_u_1218 m_1037 n_1036 k_main_1191))
  f_rev_1295 n_1034 k_rev_1138 x_1163 -> (append_1030 x_1163 1 k_rev_1138)
  fail_1301 b k -> {fail} => (k ())
  fail_1302 b k -> {fail} => (k ())
  k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 ->
      (append_1030 n_1036 m_1037 (f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191))
  main_1035 n_1036 m_1037 k_main_1191 -> (rev_1033 n_1036 (f_main_1297 m_1037 n_1036 k_main_1191))
  rev_1033 n_1034 k_rev_1138 when (n_1034 = 0) -> (k_rev_1138 0)
  rev_1033 n_1034 k_rev_1138 when (not (n_1034 = 0)) -> (rev_1033 (n_1034 - 1) (f_rev_1295 n_1034 k_rev_1138))
Types:
  main_1293 : X
  append_1030 : (x_1:int -> x_2:int[x_2 = 1] -> (x_4:int[x_1 = 0 && x_4 = 1] -> X) -> X)
  fail_1301 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1302 : (x_1:bool[x_1] -> (unit -> X) -> X)
  rev_1033 : (x_1:int -> (x_3:int[x_1 = x_3] -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1293 ... --> 
  f_1298 ... --> 
  f_1299 ... --> 
  main_1035 ... --> 
  rev_1033 [2/2] ... --> 
  rev_1033 [1/2] ... --> 
  f_rev_1295 ... --> 
  append_1030 [2/2] ... --> 
  append_1030 [1/2] ... --> 
  f_append_1294 ... --> 
  f_main_1297 [2/2] ... --> 
  fail_1302 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 1; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(42096)[1]
  program:
    main_1293  | true = ((Random.int 0) f_1298)
    append_1030 x_1031 y_1032 k_append_1105 | (x_1031 = 0) = (k_append_1105 y_1032)
    append_1030 x_1031 y_1032 k_append_1105 | (not (x_1031 = 0)) = (append_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    y_1032
                                                                    (
                                                                    f_append_1294 x_1031
                                                                    y_1032
                                                                    k_append_1105))
    f_1298 x_1251 | true = ((Random.int 0) (f_1299 x_1251))
    f_1299 x_1251 x_1264 | true = (main_1035 x_1251
                                             x_1264
                                             (f_1300 x_1251
                                                     x_1264))
    f_1300 x_1251 x_1264 x_1248 | true = end
    f_append_1294 x_1031 y_1032 k_append_1105 x_1109 | true = (k_append_1105 (
                                                                    1 + x_1109))
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (x_1222 = (n_1036 + m_1037)) = (
    k_main_1191 ())
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (not (x_1222 = (n_1036 + m_1037))) = (
    fail_1301 true
              k_main_1191)
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (x_1197 = n_1036) = (
    k_main_u_1218 m_1037
                  n_1036
                  k_main_1191
                  ())
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (not (x_1197 = n_1036)) = (
    fail_1302 true
              (k_main_u_1218 m_1037
                             n_1036
                             k_main_1191))
    f_rev_1295 n_1034 k_rev_1138 x_1163 | true = (append_1030 x_1163
                                                              1
                                                              k_rev_1138)
    fail_1301 b k | true = (fail ())
    fail_1302 b k | true = (fail ())
    k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 | true = (append_1030
                                                               n_1036
                                                               m_1037
                                                               (f_k_main_u_1296 m_1037
                                                                    n_1036
                                                                    x_1194
                                                                    k_main_1191))
    main_1035 n_1036 m_1037 k_main_1191 | true = (rev_1033 n_1036
                                                           (f_main_1297 m_1037
                                                                    n_1036
                                                                    k_main_1191))
    rev_1033 n_1034 k_rev_1138 | (n_1034 = 0) = (k_rev_1138 0)
    rev_1033 n_1034 k_rev_1138 | (not (n_1034 = 0)) = (rev_1033 (n_1034 - 1)
                                                                (f_rev_1295 n_1034
                                                                    k_rev_1138))
    main_1293:X
    append_1030:int -> int -> (int -> X) -> X
    f_1298:int -> X
    f_1299:int -> int -> X
    f_1300:int -> int -> unit -> X
    f_append_1294:int -> int -> (int -> X) -> int -> X
    f_k_main_u_1296:int -> int -> unit -> (unit -> X) -> int -> X
    f_main_1297:int -> int -> (unit -> X) -> int -> X
    f_rev_1295:int -> (int -> X) -> int -> X
    fail_1301:bool -> (unit -> X) -> X
    fail_1302:bool -> (unit -> X) -> X
    k_main_u_1218:int -> int -> (unit -> X) -> unit -> X
    main_1035:int -> int -> (unit -> X) -> X
    rev_1033:int -> (int -> X) -> X
  inlined functions: f_1298,f_1299,f_1300,f_append_1294,f_k_main_u_1296,f_main_1297,f_rev_1295,k_main_u_1218,main_1035
  counterexample: 0:0:0:0:1:0:0:1:0:0:1:0
  error traces:
    [true.nop(<f_1298@60:0> = var163)
     [true.nop((<f_1299@63:0> = <f_1298@60:0>) && (<f_1299@63:1> = var164))
      [true.((<main_1035@65:0> = <f_1299@63:0>) && (<main_1035@65:1> = <f_1299@63:1>))
       [true.(<rev_1033@67:0> = <main_1035@65:0>)
        [(not (<rev_1033@67:0> = 0)).(<rev_1033@70:0> = (<rev_1033@67:0> - 1))
         [(<rev_1033@70:0> = 0).(<<rev_1033@70:1>@73:0> = 0)
          [true.((<f_rev_1295@75:0> = <rev_1033@67:0>) && (<f_rev_1295@75:2> = <<rev_1033@70:1>@73:0>))
           [true.((<append_1030@77:0> = <f_rev_1295@75:2>) && (<append_1030@77:1> = 1))
            [(not (<append_1030@77:0> = 0)).
             ((<append_1030@80:0> = (<append_1030@77:0> - 1)) && (<append_1030@80:1> = <append_1030@77:1>))
             [(<append_1030@80:0> = 0).(<<append_1030@80:2>@83:0> = <append_1030@80:1>)
              [true.
               ((<f_append_1294@85:0> = <append_1030@77:0>) &&
                ((<f_append_1294@85:1> = <append_1030@77:1>) && (<f_append_1294@85:3> = <<append_1030@80:2>@83:0>)))
               [true.(<<f_append_1294@85:2>@87:0> = (1 + <f_append_1294@85:3>))
                [true.(<<append_1030@77:2>@89:0> = <<f_append_1294@85:2>@87:0>)
                 [true.(<<f_rev_1295@75:1>@91:0> = <<append_1030@77:2>@89:0>)
                  [true.(<<rev_1033@67:1>@93:0> = <<f_rev_1295@75:1>@91:0>)
                   [true.
                    ((<f_main_1297@95:0> = <main_1035@65:1>) &&
                     ((<f_main_1297@95:1> = <main_1035@65:0>) && (<f_main_1297@95:3> = <<rev_1033@67:1>@93:0>)))
                    [(not (<f_main_1297@95:3> = <f_main_1297@95:1>)).(<fail_1302@98:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(42097)[2]
    horn clauses:
      P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
      
      P[<f_main_1297@95:3>](<f_main_1297@95:0>:int,<f_main_1297@95:1>:int,<f_main_1297@95:3>:int),
      ((<f_main_1297@95:3> <> <f_main_1297@95:1>) && <fail_1302@98:0>) |- P[<fail_1302@98:0>](
      <fail_1302@98:0>:bool)
      
      P[<main_1035@65:1>](<f_main_1297@95:1>:int,<f_main_1297@95:0>:int),
      P[<<rev_1033@67:1>@93:0>](<f_main_1297@95:1>:int,<f_main_1297@95:3>:int)|- P[<f_main_1297@95:3>](
      <f_main_1297@95:0>:int,<f_main_1297@95:1>:int,<f_main_1297@95:3>:int)
      
      P[<rev_1033@67:0>](<rev_1033@67:0>:int),
      P[<<f_rev_1295@75:1>@91:0>](<rev_1033@67:0>:int,<<rev_1033@67:1>@93:0>:int), (
      <rev_1033@67:0> <> 0) |- P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,
                                                         <<rev_1033@67:1>@93:0>:int)
      
      P[<f_rev_1295@75:2>](<f_rev_1295@75:0>:int,<append_1030@77:0>:int),
      P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,1:int,<<f_rev_1295@75:1>@91:0>:int)|- P[<<f_rev_1295@75:1>@91:0>](
      <f_rev_1295@75:0>:int,<<f_rev_1295@75:1>@91:0>:int)
      
      P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
      P[<<f_append_1294@85:2>@87:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,<<append_1030@77:2>@89:0>:int),
      (<append_1030@77:0> <> 0)
      |- P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                      <<append_1030@77:2>@89:0>:int)
      
      P[<f_append_1294@85:3>](<f_append_1294@85:0>:int,<f_append_1294@85:1>:int,(
                              -1 + <<f_append_1294@85:2>@87:0>):int)|- P[<<f_append_1294@85:2>@87:0>](
      <f_append_1294@85:0>:int,<f_append_1294@85:1>:int,<<f_append_1294@85:2>@87:0>:int)
      
      P[<append_1030@77:1>](<f_append_1294@85:0>:int,<f_append_1294@85:1>:int),
      P[<<append_1030@80:2>@83:0>]((-1 + <f_append_1294@85:0>):int,<f_append_1294@85:1>:int,<f_append_1294@85:3>:int),
      (<f_append_1294@85:0> <> 0)
      |- P[<f_append_1294@85:3>](<f_append_1294@85:0>:int,<f_append_1294@85:1>:int,
                                 <f_append_1294@85:3>:int)
      
      P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int),
      ((<append_1030@80:0> = 0) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))
      |- P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,
                                      <<append_1030@80:2>@83:0>:int)
      
      P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
      (1 + <append_1030@80:0>) <> 0) |- P[<append_1030@80:1>](<append_1030@80:0>:int,
                                                              <append_1030@80:1>:int)
      
      P[<f_rev_1295@75:2>](<f_rev_1295@75:0>:int,<append_1030@77:0>:int), (
      <append_1030@77:1> = 1) |- P[<append_1030@77:1>](<append_1030@77:0>:int,
                                                       <append_1030@77:1>:int)
      
      P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
      P[<<rev_1033@70:1>@73:0>]((-1 + <f_rev_1295@75:0>):int,<f_rev_1295@75:2>:int), (
      <f_rev_1295@75:0> <> 0) |- P[<f_rev_1295@75:2>](<f_rev_1295@75:0>:int,
                                                      <f_rev_1295@75:2>:int)
      
      P[<rev_1033@70:0>](<rev_1033@70:0>:int), ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
      |- P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int)
      
      P[<rev_1033@67:0>]((1 + <rev_1033@70:0>):int), ((1 + <rev_1033@70:0>) <> 0)
      |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
      
      P[<main_1035@65:1>](<rev_1033@67:0>:int,<main_1035@65:1>:int)|- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
      
      P[<f_1299@63:1>](<main_1035@65:0>:int,<main_1035@65:1>:int)|- P[<main_1035@65:1>](
      <main_1035@65:0>:int,<main_1035@65:1>:int)
      
      P[<f_1298@60:0>](<f_1299@63:0>:int)|- P[<f_1299@63:1>](<f_1299@63:0>:int,
                                                             <f_1299@63:1>:int)
      
      |- P[<f_1298@60:0>](<f_1298@60:0>:int)
    call trees:
      <main_1293@57>
        <f_1298@60>
          <f_1299@63>
            <main_1035@65>
              <rev_1033@67>
                <rev_1033@70>
                </<rev_1033@70:1>@73>
                <f_rev_1295@75>
                  <append_1030@77>
                    <append_1030@80>
                    </<append_1030@80:2>@83>
                    <f_append_1294@85>
                    </<f_append_1294@85:2>@87>
                  </<append_1030@77:2>@89>
                </<f_rev_1295@75:1>@91>
              </<rev_1033@67:1>@93>
              <f_main_1297@95>
                <fail_1302@98>
    inlined horn clauses:
      P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
      
      P[<<rev_1033@67:1>@93:0>](<f_main_1297@95:1>:int,<f_main_1297@95:3>:int),
      ((<f_main_1297@95:3> <> <f_main_1297@95:1>) && <fail_1302@98:0>) |- P[<fail_1302@98:0>](
      <fail_1302@98:0>:bool)
      
      P[<rev_1033@67:0>](<rev_1033@67:0>:int),
      P[<<rev_1033@70:1>@73:0>]((-1 + <rev_1033@67:0>):int,var165:int),
      P[<<append_1030@77:2>@89:0>](var165:int,1:int,<<rev_1033@67:1>@93:0>:int), (
      <rev_1033@67:0> <> 0) |- P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,
                                                         <<rev_1033@67:1>@93:0>:int)
      
      P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
      P[<<append_1030@80:2>@83:0>]((-1 + <append_1030@77:0>):int,<append_1030@77:1>:int,(
                                   -1 + <<append_1030@77:2>@89:0>):int), (
      <append_1030@77:0> <> 0)
      |- P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                      <<append_1030@77:2>@89:0>:int)
      
      P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int),
      ((<append_1030@80:0> = 0) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))
      |- P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,
                                      <<append_1030@80:2>@83:0>:int)
      
      P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
      (1 + <append_1030@80:0>) <> 0) |- P[<append_1030@80:1>](<append_1030@80:0>:int,
                                                              <append_1030@80:1>:int)
      
      P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
      P[<<rev_1033@70:1>@73:0>]((-1 + <f_rev_1295@75:0>):int,<append_1030@77:0>:int),
      ((<append_1030@77:1> = 1) && (<f_rev_1295@75:0> <> 0))
      |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
      
      P[<rev_1033@70:0>](<rev_1033@70:0>:int), ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
      |- P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int)
      
      P[<rev_1033@67:0>]((1 + <rev_1033@70:0>):int), ((1 + <rev_1033@70:0>) <> 0)
      |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
      
      |- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
    begin ParamSubstInfer.infer(44384)[3]
      
    end ParamSubstInfer.infer(44384)[3] (0.045993 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(44386)[3]
      
    end RefTypeInfer.elim_coeffs(44386)[3] (0.001000 sec.)
    begin GenHcSolver.solve(44763)[3]
      Horn clauses:
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
        
        P[<<rev_1033@67:1>@93:0>](<f_main_1297@95:1>:int,<f_main_1297@95:3>:int),
        ((<f_main_1297@95:3> <> <f_main_1297@95:1>) && <fail_1302@98:0>) |- P[<fail_1302@98:0>](
        <fail_1302@98:0>:bool)
        
        P[<rev_1033@67:0>](<rev_1033@67:0>:int),
        P[<<rev_1033@70:1>@73:0>]((-1 + <rev_1033@67:0>):int,var165:int),
        P[<<append_1030@77:2>@89:0>](var165:int,1:int,<<rev_1033@67:1>@93:0>:int), (
        <rev_1033@67:0> <> 0) |- P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,
                                                           <<rev_1033@67:1>@93:0>:int)
        
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
        P[<<append_1030@80:2>@83:0>]((-1 + <append_1030@77:0>):int,<append_1030@77:1>:int,(
                                     -1 + <<append_1030@77:2>@89:0>):int), (
        <append_1030@77:0> <> 0)
        |- P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                        <<append_1030@77:2>@89:0>:int)
        
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int),
        ((<append_1030@80:0> = 0) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))
        |- P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,
                                        <<append_1030@80:2>@83:0>:int)
        
        P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
        (1 + <append_1030@80:0>) <> 0) |- P[<append_1030@80:1>](<append_1030@80:0>:int,
                                                                <append_1030@80:1>:int)
        
        P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
        P[<<rev_1033@70:1>@73:0>]((-1 + <f_rev_1295@75:0>):int,<append_1030@77:0>:int),
        ((<append_1030@77:1> = 1) && (<f_rev_1295@75:0> <> 0))
        |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
        
        P[<rev_1033@70:0>](<rev_1033@70:0>:int), ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
        |- P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int)
        
        P[<rev_1033@67:0>]((1 + <rev_1033@70:0>):int), ((1 + <rev_1033@70:0>) <> 0)
        |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
        
        |- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
      lower bounds:
        P[<rev_1033@67:0>](<rev_1033@67:0>:int) = true
        P[<rev_1033@70:0>](<rev_1033@70:0>:int) = ((1 + <rev_1033@70:0>) <> 0)
        P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int) =
        ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) =
        ((<append_1030@77:0> = 0) && (<append_1030@77:1> = 1))
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int) = false
        P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,<<append_1030@80:2>@83:0>:int) =
        false
        P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,<<append_1030@77:2>@89:0>:int) =
        false
        P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,<<rev_1033@67:1>@93:0>:int) = false
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool) = false
      upper bounds:
        P[<<rev_1033@67:1>@93:0>](var178:int,var179:int) = true
        P[<<rev_1033@70:1>@73:0>](var172:int,var173:int) = ((var173 <> 1) || (((1 + var172) = 0) || (var172 = 1)))
      begin GenHcSolver.classify_pids(49135)[4]
        output:
          [<<rev_1033@70:1>@73:0>;<<rev_1033@67:1>@93:0>]
      end GenHcSolver.classify_pids(49135)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(49169)[4]
        lb:((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
        nub:(not ((<<rev_1033@70:1>@73:0> <> 1) || (((1 + <rev_1033@70:0>) = 0) || (<rev_1033@70:0> = 1))))
        lb':((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
        nub':(not ((<<rev_1033@70:1>@73:0> <> 1) || (((1 + <rev_1033@70:0>) = 0) || (<rev_1033@70:0> = 1))))
        begin InterpProver.interpolate(49170)[5]
          begin InterpProver.interpolate_fresh(49171)[6]
            begin InterpProver.interpolate_log(49172)[7]
              input1: ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
              input2: (not ((<<rev_1033@70:1>@73:0> <> 1) || (((1 + <rev_1033@70:0>) = 0) || (<rev_1033@70:0> = 1))))
              begin InterpProver.interpolate_check(49173)[8]
                begin InterpProver.interpolate_simplify(49174)[9]
                  begin InterpProver.interpolate_quick(49257)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(49266)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(49267)[12]
                        begin CsisatInterface.interpolate_csisat_log(49268)[13]
                          input1: (0 = v_sep_rev_1033_sep_70_sep_0 & 0 = v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0)
                          input2: (not 0 = (1 + v_sep_rev_1033_sep_70_sep_0) & not 1 = v_sep_rev_1033_sep_70_sep_0 & 1 = v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(49269)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(49269)[14] (0.000000 sec.)
                          output: v_sep_rev_1033_sep_70_sep_0 = v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(49268)[13] (0.000000 sec.)
                        after simplification: v_sep_rev_1033_sep_70_sep_0 = v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0
                        after dnf conversion: ((v_sep_rev_1033_sep_70_sep_0 = v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(49267)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(49266)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(49257)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(49174)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(49173)[8] (0.001999 sec.)
              output: (<rev_1033@70:0> = <<rev_1033@70:1>@73:0>)
            end InterpProver.interpolate_log(49172)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(49171)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(49170)[5] (0.001999 sec.)
        output:
          P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int) =
          (<rev_1033@70:0> = <<rev_1033@70:1>@73:0>)
          P[<<rev_1033@67:1>@93:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int) =
          (<rev_1033@70:0> = <<rev_1033@70:1>@73:0>)
      end ApronInterface.convex_hull_interpolate(49169)[4] (0.001999 sec.)
      Horn clauses:
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
        
        P[<rev_1033@67:0>]((1 + var165):int),
        P[<<append_1030@77:2>@89:0>](var165:int,1:int,<<rev_1033@67:1>@93:0>:int),
        (((1 + var165) <> <<rev_1033@67:1>@93:0>) && ((1 + var165) <> 0)) |- bot
        
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
        P[<<append_1030@80:2>@83:0>]((-1 + <append_1030@77:0>):int,<append_1030@77:1>:int,(
                                     -1 + <<append_1030@77:2>@89:0>):int), (
        <append_1030@77:0> <> 0)
        |- P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                        <<append_1030@77:2>@89:0>:int)
        
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int),
        ((<append_1030@80:0> = 0) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))
        |- P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,
                                        <<append_1030@80:2>@83:0>:int)
        
        P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
        (1 + <append_1030@80:0>) <> 0) |- P[<append_1030@80:1>](<append_1030@80:0>:int,
                                                                <append_1030@80:1>:int)
        
        P[<rev_1033@67:0>]((1 + <append_1030@77:0>):int), ((<append_1030@77:1> = 1) && ((1 + <append_1030@77:0>) <> 0))
        |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
        
        P[<rev_1033@67:0>]((1 + <rev_1033@70:0>):int), ((1 + <rev_1033@70:0>) <> 0)
        |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
        
        |- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
      lower bounds:
        P[<rev_1033@67:0>](<rev_1033@67:0>:int) = true
        P[<fail_1302@98:0>](var183:bool) = false
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) =
        ((<append_1030@77:1> = 1) && ((1 + <append_1030@77:0>) <> 0))
        P[<rev_1033@70:0>](<rev_1033@70:0>:int) = ((1 + <rev_1033@70:0>) <> 0)
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int) =
        ((<append_1030@80:1> = 1) && (((2 + <append_1030@80:0>) <> 0) && ((1 + <append_1030@80:0>) <> 0)))
        P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,<<append_1030@80:2>@83:0>:int) =
        ((<append_1030@80:0> = 0) && ((<append_1030@80:1> = 1) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>)))
        P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,<<append_1030@77:2>@89:0>:int) =
        ((<append_1030@77:0> = 1) &&
         ((<append_1030@77:1> = 1) && (<<append_1030@77:2>@89:0> = (1 + <append_1030@77:1>))))
      upper bounds:
        P[<rev_1033@70:0>](var189:int) = true
        P[<rev_1033@67:0>](var186:int) = true
      begin GenHcSolver.classify_pids(56006)[4]
        output:
          [<rev_1033@67:0>;<rev_1033@70:0>]
      end GenHcSolver.classify_pids(56006)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(56017)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(56018)[5]
          begin InterpProver.interpolate_fresh(56019)[6]
            begin InterpProver.interpolate_log(56020)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(56021)[8]
                begin InterpProver.interpolate_simplify(56022)[9]
                  begin InterpProver.interpolate_quick(56035)[10]
                    
                  end InterpProver.interpolate_quick(56035)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(56022)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(56021)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(56020)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(56019)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(56018)[5] (0.001000 sec.)
        output:
          P[<rev_1033@67:0>](<rev_1033@67:0>:int) = true
          P[<rev_1033@70:0>](<rev_1033@67:0>:int) = true
      end ApronInterface.convex_hull_interpolate(56017)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
        
        P[<<append_1030@77:2>@89:0>](var165:int,1:int,<<rev_1033@67:1>@93:0>:int),
        (((1 + var165) <> <<rev_1033@67:1>@93:0>) && ((1 + var165) <> 0)) |- bot
        
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
        P[<<append_1030@80:2>@83:0>]((-1 + <append_1030@77:0>):int,<append_1030@77:1>:int,(
                                     -1 + <<append_1030@77:2>@89:0>):int), (
        <append_1030@77:0> <> 0)
        |- P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                        <<append_1030@77:2>@89:0>:int)
        
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int),
        ((<append_1030@80:0> = 0) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))
        |- P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,
                                        <<append_1030@80:2>@83:0>:int)
        
        P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
        (1 + <append_1030@80:0>) <> 0) |- P[<append_1030@80:1>](<append_1030@80:0>:int,
                                                                <append_1030@80:1>:int)
        
         ((<append_1030@77:1> = 1) && ((1 + <append_1030@77:0>) <> 0))
        |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
      lower bounds:
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) =
        ((<append_1030@77:1> = 1) && ((1 + <append_1030@77:0>) <> 0))
        P[<fail_1302@98:0>](var193:bool) = false
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int) =
        ((<append_1030@80:1> = 1) && (((2 + <append_1030@80:0>) <> 0) && ((1 + <append_1030@80:0>) <> 0)))
        P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,<<append_1030@80:2>@83:0>:int) =
        ((<append_1030@80:0> = 0) && ((<append_1030@80:1> = 1) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>)))
        P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,<<append_1030@77:2>@89:0>:int) =
        ((<append_1030@77:0> = 1) &&
         ((<append_1030@77:1> = 1) && (<<append_1030@77:2>@89:0> = (1 + <append_1030@77:1>))))
      upper bounds:
        P[<<append_1030@77:2>@89:0>](var201:int,var202:int,var203:int) =
        ((var202 <> 1) || (((1 + var201) = var203) || ((1 + var201) = 0)))
        P[<<append_1030@80:2>@83:0>](var196:int,var197:int,var198:int) =
        ((var197 <> 1) || (((2 + var196) = 0) || (((1 + var196) = 0) || ((1 + var196) = var198))))
      begin GenHcSolver.classify_pids(63565)[4]
        output:
          [<<append_1030@80:2>@83:0>;<<append_1030@77:2>@89:0>]
      end GenHcSolver.classify_pids(63565)[4] (0.000999 sec.)
      begin ApronInterface.convex_hull_interpolate(63720)[4]
        lb:(((<append_1030@80:0> = 0) && ((<append_1030@80:1> = 1) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))) ||
            ((<append_1030@80:0> = 1) &&
             ((<append_1030@80:1> = 1) && (<<append_1030@80:2>@83:0> = (1 + <append_1030@80:1>)))))
        nub:((not
                ((<append_1030@80:1> <> 1) ||
                 (((2 + <append_1030@80:0>) = 0) ||
                  (((1 + <append_1030@80:0>) = 0) || ((1 + <append_1030@80:0>) = <<append_1030@80:2>@83:0>))))) ||
             (not
                ((<append_1030@80:1> <> 1) ||
                 (((1 + <append_1030@80:0>) = <<append_1030@80:2>@83:0>) || ((1 + <append_1030@80:0>) = 0)))))
        lb':(((<append_1030@80:0> = 0) &&
              ((<append_1030@80:1> = 1) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))) ||
             ((<append_1030@80:0> = 1) &&
              ((<append_1030@80:1> = 1) && (<<append_1030@80:2>@83:0> = (1 + <append_1030@80:1>)))))
        nub':((not
                 ((<append_1030@80:1> <> 1) ||
                  (((2 + <append_1030@80:0>) = 0) ||
                   (((1 + <append_1030@80:0>) = 0) || ((1 + <append_1030@80:0>) = <<append_1030@80:2>@83:0>))))) ||
              (not
                 ((<append_1030@80:1> <> 1) ||
                  (((1 + <append_1030@80:0>) = <<append_1030@80:2>@83:0>) || ((1 + <append_1030@80:0>) = 0)))))
        begin InterpProver.interpolate(63721)[5]
          begin InterpProver.interpolate_fresh(63722)[6]
            begin InterpProver.interpolate_log(63723)[7]
              input1: (((<append_1030@80:0> = 0) &&
                        ((<append_1030@80:1> = 1) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))) ||
                       ((<append_1030@80:0> = 1) &&
                        ((<append_1030@80:1> = 1) && (<<append_1030@80:2>@83:0> = (1 + <append_1030@80:1>)))))
              input2: ((not
                          ((<append_1030@80:1> <> 1) ||
                           (((2 + <append_1030@80:0>) = 0) ||
                            (((1 + <append_1030@80:0>) = 0) || ((1 + <append_1030@80:0>) = <<append_1030@80:2>@83:0>))))) ||
                       (not
                          ((<append_1030@80:1> <> 1) ||
                           (((1 + <append_1030@80:0>) = <<append_1030@80:2>@83:0>) || ((1 + <append_1030@80:0>) = 0)))))
              begin InterpProver.interpolate_check(63724)[8]
                begin InterpProver.interpolate_simplify(63725)[9]
                  begin InterpProver.interpolate_quick(64040)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(64049)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(64050)[12]
                        begin CsisatInterface.interpolate_csisat_log(64051)[13]
                          input1: (((0 = v_sep_append_1030_sep_80_sep_0 & v_sep_append_1030_sep_80_sep_1 = v_sep_append_1030_sep_80_sep_2_sep_83_sep_0) | (1 = v_sep_append_1030_sep_80_sep_0 & v_sep_append_1030_sep_80_sep_2_sep_83_sep_0 = (1 + v_sep_append_1030_sep_80_sep_1))) & 1 = v_sep_append_1030_sep_80_sep_1)
                          input2: (not 0 = (1 + v_sep_append_1030_sep_80_sep_0) & not v_sep_append_1030_sep_80_sep_2_sep_83_sep_0 = (1 + v_sep_append_1030_sep_80_sep_0) & 1 = v_sep_append_1030_sep_80_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(64052)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(64052)[14] (0.004999 sec.)
                          output: ((1 = v_sep_append_1030_sep_80_sep_2_sep_83_sep_0 & v_sep_append_1030_sep_80_sep_0 <= 0 & -1*v_sep_append_1030_sep_80_sep_0 <= 0) | not 1 = v_sep_append_1030_sep_80_sep_1 | v_sep_append_1030_sep_80_sep_2_sep_83_sep_0 = (1 + v_sep_append_1030_sep_80_sep_0))
                          
                        end CsisatInterface.interpolate_csisat_log(64051)[13] (0.004999 sec.)
                        after simplification: ((1 = v_sep_append_1030_sep_80_sep_2_sep_83_sep_0 & v_sep_append_1030_sep_80_sep_0 <= 0 & -1*v_sep_append_1030_sep_80_sep_0 <= 0) | not 1 = v_sep_append_1030_sep_80_sep_1 | v_sep_append_1030_sep_80_sep_2_sep_83_sep_0 = (1 + v_sep_append_1030_sep_80_sep_0))
                        after dnf conversion: ((1 = v_sep_append_1030_sep_80_sep_2_sep_83_sep_0 & v_sep_append_1030_sep_80_sep_0 <= 0 & -1*v_sep_append_1030_sep_80_sep_0 <= 0) | (not 1 = v_sep_append_1030_sep_80_sep_1) | (v_sep_append_1030_sep_80_sep_2_sep_83_sep_0 = (1 + v_sep_append_1030_sep_80_sep_0)))
                        
                      end CsisatInterface.interpolate_csisat_post_process(64050)[12] (0.004999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(64049)[11] (0.004999 sec.)
                    
                  end InterpProver.interpolate_quick(64040)[10] (0.005999 sec.)
                  begin minimizing # of disjunctions(64083)[10]
                    input: ((1 <> <append_1030@80:1>) ||
                            ((<<append_1030@80:2>@83:0> = (1 + <append_1030@80:0>)) ||
                             ((<<append_1030@80:2>@83:0> = 1) && (<append_1030@80:0> = 0))))
                    output: (<<append_1030@80:2>@83:0> = (1 + <append_1030@80:0>))
                  end minimizing # of disjunctions(64083)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(63725)[9] (0.009999 sec.)
                
              end InterpProver.interpolate_check(63724)[8] (0.010999 sec.)
              output: (<<append_1030@80:2>@83:0> = (1 + <append_1030@80:0>))
            end InterpProver.interpolate_log(63723)[7] (0.010999 sec.)
            
          end InterpProver.interpolate_fresh(63722)[6] (0.010999 sec.)
          
        end InterpProver.interpolate(63721)[5] (0.010999 sec.)
        output:
          P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,<<append_1030@80:2>@83:0>:int) =
          (<<append_1030@80:2>@83:0> = (1 + <append_1030@80:0>))
          P[<<append_1030@77:2>@89:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,<<append_1030@80:2>@83:0>:int) =
          (<<append_1030@80:2>@83:0> = (1 + <append_1030@80:0>))
      end ApronInterface.convex_hull_interpolate(63720)[4] (0.010999 sec.)
      Horn clauses:
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
        
        P[<append_1030@80:1>](0:int,<<append_1030@80:2>@83:0>:int), (<<append_1030@80:2>@83:0> <> 1) |- bot
        
        P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
        (1 + <append_1030@80:0>) <> 0) |- P[<append_1030@80:1>](<append_1030@80:0>:int,
                                                                <append_1030@80:1>:int)
        
         ((<append_1030@77:1> = 1) && ((1 + <append_1030@77:0>) <> 0))
        |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
      lower bounds:
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) =
        ((<append_1030@77:1> = 1) && ((1 + <append_1030@77:0>) <> 0))
        P[<fail_1302@98:0>](var207:bool) = false
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int) =
        ((<append_1030@80:1> = 1) && (((2 + <append_1030@80:0>) <> 0) && ((1 + <append_1030@80:0>) <> 0)))
      upper bounds:
        P[<append_1030@80:1>](var214:int,var215:int) = ((var214 <> 0) || (var215 = 1))
        P[<append_1030@77:1>](var210:int,var211:int) = ((var210 <> 1) || (var211 = 1))
      begin GenHcSolver.classify_pids(68064)[4]
        output:
          [<append_1030@77:1>;<append_1030@80:1>]
      end GenHcSolver.classify_pids(68064)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(68132)[4]
        lb:(((<append_1030@77:1> = 1) && ((1 + <append_1030@77:0>) <> 0)) ||
            ((<append_1030@77:1> = 1) && (((2 + <append_1030@77:0>) <> 0) && ((1 + <append_1030@77:0>) <> 0))))
        nub:((not ((<append_1030@77:0> <> 1) || (<append_1030@77:1> = 1))) ||
             (not ((<append_1030@77:0> <> 0) || (<append_1030@77:1> = 1))))
        lb':(((<append_1030@77:1> = 1) && ((1 + <append_1030@77:0>) <> 0)) ||
             ((<append_1030@77:1> = 1) && (((2 + <append_1030@77:0>) <> 0) && ((1 + <append_1030@77:0>) <> 0))))
        nub':((not ((<append_1030@77:0> <> 1) || (<append_1030@77:1> = 1))) ||
              (not ((<append_1030@77:0> <> 0) || (<append_1030@77:1> = 1))))
        begin InterpProver.interpolate(68133)[5]
          begin InterpProver.interpolate_fresh(68134)[6]
            begin InterpProver.interpolate_log(68135)[7]
              input1: (((<append_1030@77:1> = 1) && ((1 + <append_1030@77:0>) <> 0)) ||
                       ((<append_1030@77:1> = 1) &&
                        (((2 + <append_1030@77:0>) <> 0) && ((1 + <append_1030@77:0>) <> 0))))
              input2: ((not ((<append_1030@77:0> <> 1) || (<append_1030@77:1> = 1))) ||
                       (not ((<append_1030@77:0> <> 0) || (<append_1030@77:1> = 1))))
              begin InterpProver.interpolate_check(68136)[8]
                begin InterpProver.interpolate_simplify(68137)[9]
                  begin InterpProver.interpolate_quick(68281)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(68290)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(68291)[12]
                        begin CsisatInterface.interpolate_csisat_log(68292)[13]
                          input1: (not 0 = (1 + v_sep_append_1030_sep_77_sep_0) & 1 = v_sep_append_1030_sep_77_sep_1)
                          input2: ((0 = v_sep_append_1030_sep_77_sep_0 | 1 = v_sep_append_1030_sep_77_sep_0) & not 1 = v_sep_append_1030_sep_77_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(68293)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(68293)[14] (0.000000 sec.)
                          output: 1 = v_sep_append_1030_sep_77_sep_1
                          
                        end CsisatInterface.interpolate_csisat_log(68292)[13] (0.000000 sec.)
                        after simplification: 1 = v_sep_append_1030_sep_77_sep_1
                        after dnf conversion: ((1 = v_sep_append_1030_sep_77_sep_1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(68291)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(68290)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(68281)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(68137)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(68136)[8] (0.008999 sec.)
              output: (1 = <append_1030@77:1>)
            end InterpProver.interpolate_log(68135)[7] (0.009999 sec.)
            
          end InterpProver.interpolate_fresh(68134)[6] (0.009999 sec.)
          
        end InterpProver.interpolate(68133)[5] (0.009999 sec.)
        output:
          P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) = (1 = <append_1030@77:1>)
          P[<append_1030@80:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) = (1 = <append_1030@77:1>)
      end ApronInterface.convex_hull_interpolate(68132)[4] (0.009999 sec.)
      Horn clauses:
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
      lower bounds:
        P[<fail_1302@98:0>](var219:bool) = false
      upper bounds:
        P[<fail_1302@98:0>](var222:bool) = true
      begin GenHcSolver.classify_pids(69132)[4]
        output:
          [<fail_1302@98:0>]
      end GenHcSolver.classify_pids(69132)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(69135)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(69136)[5]
          begin InterpProver.interpolate_fresh(69137)[6]
            begin InterpProver.interpolate_log(69138)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(69139)[8]
                begin InterpProver.interpolate_simplify(69140)[9]
                  begin InterpProver.interpolate_quick(69153)[10]
                    
                  end InterpProver.interpolate_quick(69153)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(69157)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(69157)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(69140)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(69139)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(69138)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(69137)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(69136)[5] (0.000999 sec.)
        output:
          P[<fail_1302@98:0>](var219:bool) = false
      end ApronInterface.convex_hull_interpolate(69135)[4] (0.000999 sec.)
      begin HcSolver.check_validity(69190)[4]
        input:
          P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
          
          P[<<rev_1033@67:1>@93:0>](<f_main_1297@95:1>:int,<f_main_1297@95:3>:int),
          ((<f_main_1297@95:3> <> <f_main_1297@95:1>) && <fail_1302@98:0>)
          |- P[<fail_1302@98:0>](<fail_1302@98:0>:bool)
          
          P[<rev_1033@67:0>](<rev_1033@67:0>:int),
          P[<<rev_1033@70:1>@73:0>]((-1 + <rev_1033@67:0>):int,var165:int),
          P[<<append_1030@77:2>@89:0>](var165:int,1:int,<<rev_1033@67:1>@93:0>:int), (
          <rev_1033@67:0> <> 0) |- P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,
                                                             <<rev_1033@67:1>@93:0>:int)
          
          P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
          P[<<append_1030@80:2>@83:0>]((-1 + <append_1030@77:0>):int,<append_1030@77:1>:int,(
                                       -1 + <<append_1030@77:2>@89:0>):int), (
          <append_1030@77:0> <> 0)
          |- P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                          <<append_1030@77:2>@89:0>:int)
          
          P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int),
          ((<append_1030@80:0> = 0) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))
          |- P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,
                                          <<append_1030@80:2>@83:0>:int)
          
          P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
          (1 + <append_1030@80:0>) <> 0) |- P[<append_1030@80:1>](<append_1030@80:0>:int,
                                                                  <append_1030@80:1>:int)
          
          P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
          P[<<rev_1033@70:1>@73:0>]((-1 + <f_rev_1295@75:0>):int,<append_1030@77:0>:int),
          ((<append_1030@77:1> = 1) && (<f_rev_1295@75:0> <> 0))
          |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
          
          P[<rev_1033@70:0>](<rev_1033@70:0>:int), ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
          |- P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int)
          
          P[<rev_1033@67:0>]((1 + <rev_1033@70:0>):int), ((1 + <rev_1033@70:0>) <> 0)
          |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
          
          |- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(69190)[4] (0.005000 sec.)
      solution:
        P[<fail_1302@98:0>](var219:bool) = false
        P[<<rev_1033@67:1>@93:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int) =
        (<rev_1033@70:0> = <<rev_1033@70:1>@73:0>)
        P[<<append_1030@77:2>@89:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,<<append_1030@80:2>@83:0>:int) =
        (<<append_1030@80:2>@83:0> = (1 + <append_1030@80:0>))
        P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,<<append_1030@80:2>@83:0>:int) =
        (<<append_1030@80:2>@83:0> = (1 + <append_1030@80:0>))
        P[<append_1030@80:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) = (1 = <append_1030@77:1>)
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) = (1 = <append_1030@77:1>)
        P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int) =
        (<rev_1033@70:0> = <<rev_1033@70:1>@73:0>)
        P[<rev_1033@70:0>](<rev_1033@67:0>:int) = true
        P[<rev_1033@67:0>](<rev_1033@67:0>:int) = true
    end GenHcSolver.solve(44763)[3] (0.131979 sec.)
    begin GenHcSolver.solve(70307)[3]
      Horn clauses:
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
        
        P[<<rev_1033@67:1>@93:0>](<f_main_1297@95:1>:int,<f_main_1297@95:3>:int),
        ((<f_main_1297@95:3> <> <f_main_1297@95:1>) && <fail_1302@98:0>) |- P[<fail_1302@98:0>](
        <fail_1302@98:0>:bool)
        
        P[<rev_1033@67:0>](<rev_1033@67:0>:int),
        P[<<rev_1033@70:1>@73:0>]((-1 + <rev_1033@67:0>):int,var165:int),
        P[<<append_1030@77:2>@89:0>](var165:int,1:int,<<rev_1033@67:1>@93:0>:int), (
        <rev_1033@67:0> <> 0) |- P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,
                                                           <<rev_1033@67:1>@93:0>:int)
        
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
        P[<<append_1030@80:2>@83:0>]((-1 + <append_1030@77:0>):int,<append_1030@77:1>:int,(
                                     -1 + <<append_1030@77:2>@89:0>):int), (
        <append_1030@77:0> <> 0)
        |- P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                        <<append_1030@77:2>@89:0>:int)
        
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int),
        ((<append_1030@80:0> = 0) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))
        |- P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,
                                        <<append_1030@80:2>@83:0>:int)
        
        P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
        (1 + <append_1030@80:0>) <> 0) |- P[<append_1030@80:1>](<append_1030@80:0>:int,
                                                                <append_1030@80:1>:int)
        
        P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
        P[<<rev_1033@70:1>@73:0>]((-1 + <f_rev_1295@75:0>):int,<append_1030@77:0>:int),
        ((<append_1030@77:1> = 1) && (<f_rev_1295@75:0> <> 0))
        |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
        
        P[<rev_1033@70:0>](<rev_1033@70:0>:int), ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
        |- P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int)
        
        P[<rev_1033@67:0>]((1 + <rev_1033@70:0>):int), ((1 + <rev_1033@70:0>) <> 0)
        |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
        
        |- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
      lower bounds:
        P[<rev_1033@67:0>](<rev_1033@67:0>:int) = true
        P[<rev_1033@70:0>](<rev_1033@70:0>:int) = ((1 + <rev_1033@70:0>) <> 0)
        P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int) =
        ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) =
        ((<append_1030@77:0> = 0) && (<append_1030@77:1> = 1))
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int) = false
        P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,<<append_1030@80:2>@83:0>:int) =
        false
        P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,<<append_1030@77:2>@89:0>:int) =
        false
        P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,<<rev_1033@67:1>@93:0>:int) = false
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool) = false
      upper bounds:
        P[<<rev_1033@67:1>@93:0>](var235:int,var236:int) = true
        P[<<rev_1033@70:1>@73:0>](var229:int,var230:int) = ((var230 <> 1) || (((1 + var229) = 0) || (var229 = 1)))
      begin GenHcSolver.classify_pids(74679)[4]
        output:
          [<<rev_1033@70:1>@73:0>;<<rev_1033@67:1>@93:0>]
      end GenHcSolver.classify_pids(74679)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(74713)[4]
        lb:((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
        nub:(not ((<<rev_1033@70:1>@73:0> <> 1) || (((1 + <rev_1033@70:0>) = 0) || (<rev_1033@70:0> = 1))))
        begin ExtFormula.Formula.case_analysis_boolean(74721)[5]
          ts: ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
          
        end ExtFormula.Formula.case_analysis_boolean(74721)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(74758)[5]
          ts: ((<<rev_1033@70:1>@73:0> = 1) && (((1 + <rev_1033@70:0>) <> 0) && (<rev_1033@70:0> <> 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(74758)[5] (0.000000 sec.)
        lb':((<<rev_1033@70:1>@73:0> = 0) && (<rev_1033@70:0> = 0))
        nub':((-1 + <<rev_1033@70:1>@73:0>) = 0)
        begin InterpProver.interpolate(74767)[5]
          begin InterpProver.interpolate_fresh(74768)[6]
            begin InterpProver.interpolate_log(74769)[7]
              input1: ((<<rev_1033@70:1>@73:0> = 0) && (<rev_1033@70:0> = 0))
              input2: ((-1 + <<rev_1033@70:1>@73:0>) = 0)
              begin InterpProver.interpolate_check(74770)[8]
                begin InterpProver.interpolate_simplify(74771)[9]
                  begin InterpProver.interpolate_quick(74803)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(74812)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(74813)[12]
                        begin CsisatInterface.interpolate_csisat_log(74814)[13]
                          input1: 0 = v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0
                          input2: 1 = v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(74815)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(74815)[14] (0.000000 sec.)
                          output: 2*v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(74814)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(74813)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(74812)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(74803)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(74771)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(74770)[8] (0.000999 sec.)
              output: (<<rev_1033@70:1>@73:0> <= 0)
            end InterpProver.interpolate_log(74769)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(74768)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(74767)[5] (0.000999 sec.)
        output:
          P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int) = (<<rev_1033@70:1>@73:0> <= 0)
          P[<<rev_1033@67:1>@93:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int) = (<<rev_1033@70:1>@73:0> <= 0)
      end ApronInterface.convex_hull_interpolate(74713)[4] (0.000999 sec.)
      Horn clauses:
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
        
        P[<<rev_1033@67:1>@93:0>](<f_main_1297@95:1>:int,<f_main_1297@95:3>:int),
        ((<f_main_1297@95:3> <> <f_main_1297@95:1>) && <fail_1302@98:0>) |- P[<fail_1302@98:0>](
        <fail_1302@98:0>:bool)
        
        P[<rev_1033@67:0>](<rev_1033@67:0>:int),
        P[<<append_1030@77:2>@89:0>](var165:int,1:int,<<rev_1033@67:1>@93:0>:int),
        ((<rev_1033@67:0> <> 0) && (var165 <= 0))
        |- P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,<<rev_1033@67:1>@93:0>:int)
        
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
        P[<<append_1030@80:2>@83:0>]((-1 + <append_1030@77:0>):int,<append_1030@77:1>:int,(
                                     -1 + <<append_1030@77:2>@89:0>):int), (
        <append_1030@77:0> <> 0)
        |- P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                        <<append_1030@77:2>@89:0>:int)
        
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int),
        ((<append_1030@80:0> = 0) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))
        |- P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,
                                        <<append_1030@80:2>@83:0>:int)
        
        P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
        (1 + <append_1030@80:0>) <> 0) |- P[<append_1030@80:1>](<append_1030@80:0>:int,
                                                                <append_1030@80:1>:int)
        
        P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
        ((<append_1030@77:1> = 1) && ((<f_rev_1295@75:0> <> 0) && (<append_1030@77:0> <= 0)))
        |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
        
        P[<rev_1033@67:0>]((1 + <rev_1033@70:0>):int), ((1 + <rev_1033@70:0>) <> 0)
        |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
        
        |- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
      lower bounds:
        P[<rev_1033@67:0>](<rev_1033@67:0>:int) = true
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) =
        ((<append_1030@77:1> = 1) && (<append_1030@77:0> <= 0))
        P[<rev_1033@70:0>](<rev_1033@70:0>:int) = ((1 + <rev_1033@70:0>) <> 0)
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int) =
        ((<append_1030@80:1> = 1) && ((1 + <append_1030@80:0>) < 0))
        P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,<<append_1030@80:2>@83:0>:int) =
        false
        P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,<<append_1030@77:2>@89:0>:int) =
        false
        P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,<<rev_1033@67:1>@93:0>:int) = false
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool) = false
      upper bounds:
        P[<rev_1033@70:0>](var244:int) = true
        P[<rev_1033@67:0>](var243:int) = true
      begin GenHcSolver.classify_pids(79938)[4]
        output:
          [<rev_1033@67:0>;<rev_1033@70:0>]
      end GenHcSolver.classify_pids(79938)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(79949)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(79952)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(79952)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(79957)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(79957)[5] (0.001000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(79960)[5]
          begin InterpProver.interpolate_fresh(79961)[6]
            begin InterpProver.interpolate_log(79962)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(79963)[8]
                begin InterpProver.interpolate_simplify(79964)[9]
                  begin InterpProver.interpolate_quick(79978)[10]
                    
                  end InterpProver.interpolate_quick(79978)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(79964)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(79963)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(79962)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(79961)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(79960)[5] (0.000000 sec.)
        output:
          P[<rev_1033@67:0>](<rev_1033@67:0>:int) = true
          P[<rev_1033@70:0>](<rev_1033@67:0>:int) = true
      end ApronInterface.convex_hull_interpolate(79949)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
        
        P[<<rev_1033@67:1>@93:0>](<f_main_1297@95:1>:int,<f_main_1297@95:3>:int),
        ((<f_main_1297@95:3> <> <f_main_1297@95:1>) && <fail_1302@98:0>) |- P[<fail_1302@98:0>](
        <fail_1302@98:0>:bool)
        
        P[<<append_1030@77:2>@89:0>](var165:int,1:int,<<rev_1033@67:1>@93:0>:int),
        ((<rev_1033@67:0> <> 0) && (var165 <= 0))
        |- P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,<<rev_1033@67:1>@93:0>:int)
        
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
        P[<<append_1030@80:2>@83:0>]((-1 + <append_1030@77:0>):int,<append_1030@77:1>:int,(
                                     -1 + <<append_1030@77:2>@89:0>):int), (
        <append_1030@77:0> <> 0)
        |- P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                        <<append_1030@77:2>@89:0>:int)
        
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int),
        ((<append_1030@80:0> = 0) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))
        |- P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,
                                        <<append_1030@80:2>@83:0>:int)
        
        P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
        (1 + <append_1030@80:0>) <> 0) |- P[<append_1030@80:1>](<append_1030@80:0>:int,
                                                                <append_1030@80:1>:int)
        
         ((<append_1030@77:1> = 1) && (<append_1030@77:0> <= 0))
        |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
      lower bounds:
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) =
        ((<append_1030@77:1> = 1) && (<append_1030@77:0> <= 0))
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int) =
        ((<append_1030@80:1> = 1) && ((1 + <append_1030@80:0>) < 0))
        P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,<<append_1030@80:2>@83:0>:int) =
        false
        P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,<<append_1030@77:2>@89:0>:int) =
        false
        P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,<<rev_1033@67:1>@93:0>:int) = false
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool) = false
      upper bounds:
        P[<<append_1030@77:2>@89:0>](var260:int,var261:int,var262:int) = true
        P[<<append_1030@80:2>@83:0>](var251:int,var252:int,var253:int) = true
      begin GenHcSolver.classify_pids(84464)[4]
        output:
          [<<append_1030@80:2>@83:0>;<<append_1030@77:2>@89:0>]
      end GenHcSolver.classify_pids(84464)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(84475)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(84478)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(84478)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(84483)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(84483)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(84486)[5]
          begin InterpProver.interpolate_fresh(84487)[6]
            begin InterpProver.interpolate_log(84488)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(84489)[8]
                begin InterpProver.interpolate_simplify(84490)[9]
                  begin InterpProver.interpolate_quick(84505)[10]
                    
                  end InterpProver.interpolate_quick(84505)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(84509)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(84509)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(84490)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(84489)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(84488)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(84487)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(84486)[5] (0.001000 sec.)
        output:
          P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,<<append_1030@80:2>@83:0>:int) =
          false
          P[<<append_1030@77:2>@89:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,<<append_1030@80:2>@83:0>:int) =
          false
      end ApronInterface.convex_hull_interpolate(84475)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
        
        P[<<rev_1033@67:1>@93:0>](<f_main_1297@95:1>:int,<f_main_1297@95:3>:int),
        ((<f_main_1297@95:3> <> <f_main_1297@95:1>) && <fail_1302@98:0>) |- P[<fail_1302@98:0>](
        <fail_1302@98:0>:bool)
        
        P[<append_1030@80:1>](0:int,<<append_1030@80:2>@83:0>:int)|- bot
        
        P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
        (1 + <append_1030@80:0>) <> 0) |- P[<append_1030@80:1>](<append_1030@80:0>:int,
                                                                <append_1030@80:1>:int)
        
         ((<append_1030@77:1> = 1) && (<append_1030@77:0> <= 0))
        |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
      lower bounds:
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) =
        ((<append_1030@77:1> = 1) && (<append_1030@77:0> <= 0))
        P[<<rev_1033@67:1>@93:0>](var269:int,var270:int) = false
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool) = false
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int) =
        ((<append_1030@80:1> = 1) && ((1 + <append_1030@80:0>) < 0))
      upper bounds:
        P[<append_1030@80:1>](var283:int,var284:int) = (var283 <> 0)
        P[<append_1030@77:1>](var276:int,var277:int) = (var276 <> 1)
      begin GenHcSolver.classify_pids(87533)[4]
        output:
          [<append_1030@80:1>],[<append_1030@77:1>]
      end GenHcSolver.classify_pids(87533)[4] (0.000000 sec.)
      lb:((<append_1030@80:1> = 1) && ((1 + <append_1030@80:0>) < 0))
      nub:(not (<append_1030@80:0> <> 0))
      begin ApronInterface.convex_hull_interpolate(87559)[4]
        lb:((<append_1030@80:1> = 1) && ((1 + <append_1030@80:0>) < 0))
        nub:(not (<append_1030@80:0> <> 0))
        begin ExtFormula.Formula.case_analysis_boolean(87574)[5]
          ts: ((<append_1030@80:1> = 1) && ((1 + <append_1030@80:0>) < 0))
          
        end ExtFormula.Formula.case_analysis_boolean(87574)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(87584)[5]
          ts: (<append_1030@80:0> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(87584)[5] (0.000000 sec.)
        lb':(((-1 + <append_1030@80:1>) = 0) && ((-2 + (-1 * <append_1030@80:0>)) >= 0))
        nub':(<append_1030@80:0> = 0)
        begin InterpProver.interpolate(87588)[5]
          begin InterpProver.interpolate_fresh(87589)[6]
            begin InterpProver.interpolate_log(87590)[7]
              input1: (((-1 + <append_1030@80:1>) = 0) && ((-2 + (-1 * <append_1030@80:0>)) >= 0))
              input2: (<append_1030@80:0> = 0)
              begin InterpProver.interpolate_check(87591)[8]
                begin InterpProver.interpolate_simplify(87592)[9]
                  begin InterpProver.interpolate_quick(87637)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(87646)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(87647)[12]
                        begin CsisatInterface.interpolate_csisat_log(87648)[13]
                          input1: (2 + v_sep_append_1030_sep_80_sep_0) <= 0
                          input2: 0 = v_sep_append_1030_sep_80_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(87649)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(87649)[14] (0.000000 sec.)
                          output: v_sep_append_1030_sep_80_sep_0 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(87648)[13] (0.000000 sec.)
                        after simplification: v_sep_append_1030_sep_80_sep_0 <= -2
                        after dnf conversion: ((v_sep_append_1030_sep_80_sep_0 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(87647)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(87646)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(87637)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(87592)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(87591)[8] (0.001999 sec.)
              output: ((2 + <append_1030@80:0>) <= 0)
            end InterpProver.interpolate_log(87590)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(87589)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(87588)[5] (0.001999 sec.)
        output:
          P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int) = ((2 + <append_1030@80:0>) <= 0)
      end ApronInterface.convex_hull_interpolate(87559)[4] (0.002999 sec.)
      Horn clauses:
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
        
        P[<<rev_1033@67:1>@93:0>](<f_main_1297@95:1>:int,<f_main_1297@95:3>:int),
        ((<f_main_1297@95:3> <> <f_main_1297@95:1>) && <fail_1302@98:0>) |- P[<fail_1302@98:0>](
        <fail_1302@98:0>:bool)
        
        P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
        (1 + <append_1030@80:0>) > 0) |- bot
        
         ((<append_1030@77:1> = 1) && (<append_1030@77:0> <= 0))
        |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
      lower bounds:
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) =
        ((<append_1030@77:1> = 1) && (<append_1030@77:0> <= 0))
        P[<<rev_1033@67:1>@93:0>](var287:int,var288:int) = false
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool) = false
      upper bounds:
        P[<fail_1302@98:0>](var294:bool) = true
      begin GenHcSolver.classify_pids(88651)[4]
        output:
          [<fail_1302@98:0>]
      end GenHcSolver.classify_pids(88651)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(88654)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(88657)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(88657)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(88662)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(88662)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(88665)[5]
          begin InterpProver.interpolate_fresh(88666)[6]
            begin InterpProver.interpolate_log(88667)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(88668)[8]
                begin InterpProver.interpolate_simplify(88669)[9]
                  begin InterpProver.interpolate_quick(88684)[10]
                    
                  end InterpProver.interpolate_quick(88684)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(88688)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(88688)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(88669)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(88668)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(88667)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(88666)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(88665)[5] (0.001000 sec.)
        output:
          P[<fail_1302@98:0>](<fail_1302@98:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(88654)[4] (0.002000 sec.)
      Horn clauses:
        P[<<rev_1033@67:1>@93:0>](<f_main_1297@95:1>:int,<f_main_1297@95:3>:int),
        (<f_main_1297@95:3> <> <f_main_1297@95:1>) |- bot
        
        P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
        (1 + <append_1030@80:0>) > 0) |- bot
        
         ((<append_1030@77:1> = 1) && (<append_1030@77:0> <= 0))
        |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
      lower bounds:
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) =
        ((<append_1030@77:1> = 1) && (<append_1030@77:0> <= 0))
        P[<<rev_1033@67:1>@93:0>](var297:int,var298:int) = false
      upper bounds:
        P[<<rev_1033@67:1>@93:0>](var303:int,var304:int) = true
      begin GenHcSolver.classify_pids(89545)[4]
        output:
          [<<rev_1033@67:1>@93:0>]
      end GenHcSolver.classify_pids(89545)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(89548)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(89551)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(89551)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(89556)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(89556)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(89559)[5]
          begin InterpProver.interpolate_fresh(89560)[6]
            begin InterpProver.interpolate_log(89561)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(89562)[8]
                begin InterpProver.interpolate_simplify(89563)[9]
                  begin InterpProver.interpolate_quick(89578)[10]
                    
                  end InterpProver.interpolate_quick(89578)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(89582)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(89582)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(89563)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(89562)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(89561)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(89560)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(89559)[5] (0.000000 sec.)
        output:
          P[<<rev_1033@67:1>@93:0>](var297:int,var298:int) = false
      end ApronInterface.convex_hull_interpolate(89548)[4] (0.001000 sec.)
      Horn clauses:
        P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
        (1 + <append_1030@80:0>) > 0) |- bot
        
         ((<append_1030@77:1> = 1) && (<append_1030@77:0> <= 0))
        |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
      lower bounds:
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) =
        ((<append_1030@77:1> = 1) && (<append_1030@77:0> <= 0))
      upper bounds:
        P[<append_1030@77:1>](var305:int,var306:int) = (var305 <= 0)
      begin GenHcSolver.classify_pids(90341)[4]
        output:
          [<append_1030@77:1>]
      end GenHcSolver.classify_pids(90341)[4] (0.000000 sec.)
      lb:((<append_1030@77:1> = 1) && (<append_1030@77:0> <= 0))
      nub:(not (<append_1030@77:0> <= 0))
      begin ApronInterface.convex_hull_interpolate(90344)[4]
        lb:((<append_1030@77:1> = 1) && (<append_1030@77:0> <= 0))
        nub:(not (<append_1030@77:0> <= 0))
        begin ExtFormula.Formula.case_analysis_boolean(90356)[5]
          ts: ((<append_1030@77:1> = 1) && (<append_1030@77:0> <= 0))
          
        end ExtFormula.Formula.case_analysis_boolean(90356)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(90365)[5]
          ts: (<append_1030@77:0> > 0)
          
        end ExtFormula.Formula.case_analysis_boolean(90365)[5] (0.000000 sec.)
        lb':(((-1 + <append_1030@77:1>) = 0) && ((-1 * <append_1030@77:0>) >= 0))
        nub':((-1 + <append_1030@77:0>) >= 0)
        begin InterpProver.interpolate(90369)[5]
          begin InterpProver.interpolate_fresh(90370)[6]
            begin InterpProver.interpolate_log(90371)[7]
              input1: (((-1 + <append_1030@77:1>) = 0) && ((-1 * <append_1030@77:0>) >= 0))
              input2: ((-1 + <append_1030@77:0>) >= 0)
              begin InterpProver.interpolate_check(90372)[8]
                begin InterpProver.interpolate_simplify(90373)[9]
                  begin InterpProver.interpolate_quick(90413)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(90422)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(90423)[12]
                        begin CsisatInterface.interpolate_csisat_log(90424)[13]
                          input1: v_sep_append_1030_sep_77_sep_0 <= 0
                          input2: 1 <= v_sep_append_1030_sep_77_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(90425)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(90425)[14] (0.000000 sec.)
                          output: 2*v_sep_append_1030_sep_77_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(90424)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_append_1030_sep_77_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_append_1030_sep_77_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(90423)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(90422)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(90413)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(90373)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(90372)[8] (0.000999 sec.)
              output: (<append_1030@77:0> <= 0)
            end InterpProver.interpolate_log(90371)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(90370)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(90369)[5] (0.000999 sec.)
        output:
          P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) = (<append_1030@77:0> <= 0)
      end ApronInterface.convex_hull_interpolate(90344)[4] (0.000999 sec.)
      begin HcSolver.check_validity(90574)[4]
        input:
          P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
          
          P[<<rev_1033@67:1>@93:0>](<f_main_1297@95:1>:int,<f_main_1297@95:3>:int),
          ((<f_main_1297@95:3> <> <f_main_1297@95:1>) && <fail_1302@98:0>)
          |- P[<fail_1302@98:0>](<fail_1302@98:0>:bool)
          
          P[<rev_1033@67:0>](<rev_1033@67:0>:int),
          P[<<rev_1033@70:1>@73:0>]((-1 + <rev_1033@67:0>):int,var165:int),
          P[<<append_1030@77:2>@89:0>](var165:int,1:int,<<rev_1033@67:1>@93:0>:int), (
          <rev_1033@67:0> <> 0) |- P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,
                                                             <<rev_1033@67:1>@93:0>:int)
          
          P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
          P[<<append_1030@80:2>@83:0>]((-1 + <append_1030@77:0>):int,<append_1030@77:1>:int,(
                                       -1 + <<append_1030@77:2>@89:0>):int), (
          <append_1030@77:0> <> 0)
          |- P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                          <<append_1030@77:2>@89:0>:int)
          
          P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int),
          ((<append_1030@80:0> = 0) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))
          |- P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,
                                          <<append_1030@80:2>@83:0>:int)
          
          P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
          (1 + <append_1030@80:0>) <> 0) |- P[<append_1030@80:1>](<append_1030@80:0>:int,
                                                                  <append_1030@80:1>:int)
          
          P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
          P[<<rev_1033@70:1>@73:0>]((-1 + <f_rev_1295@75:0>):int,<append_1030@77:0>:int),
          ((<append_1030@77:1> = 1) && (<f_rev_1295@75:0> <> 0))
          |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
          
          P[<rev_1033@70:0>](<rev_1033@70:0>:int), ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
          |- P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int)
          
          P[<rev_1033@67:0>]((1 + <rev_1033@70:0>):int), ((1 + <rev_1033@70:0>) <> 0)
          |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
          
          |- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(90574)[4] (0.004000 sec.)
      solution:
        P[<fail_1302@98:0>](<fail_1302@98:0>:bool) = false
        P[<<rev_1033@67:1>@93:0>](var297:int,var298:int) = false
        P[<<append_1030@77:2>@89:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,<<append_1030@80:2>@83:0>:int) =
        false
        P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,<<append_1030@80:2>@83:0>:int) =
        false
        P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int) = ((2 + <append_1030@80:0>) <= 0)
        P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int) = (<append_1030@77:0> <= 0)
        P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int) = (<<rev_1033@70:1>@73:0> <= 0)
        P[<rev_1033@70:0>](<rev_1033@67:0>:int) = true
        P[<rev_1033@67:0>](<rev_1033@67:0>:int) = true
    end GenHcSolver.solve(70307)[3] (0.089987 sec.)
    begin YhornInterface.solve(91173)[3]
      begin HcSolver.solve_ub(91174)[4]
        encoded:
          P[<fail_1302@98:0>](<fail_1302@98:0>:int)|- bot
          
          P[<<rev_1033@67:1>@93:0>](<f_main_1297@95:1>:int,<f_main_1297@95:3>:int),
          ((<f_main_1297@95:3> <> <f_main_1297@95:1>) && (<fail_1302@98:0> = 1))
          |- P[<fail_1302@98:0>](<fail_1302@98:0>:int)
          
          P[<rev_1033@67:0>](<rev_1033@67:0>:int),
          P[<<rev_1033@70:1>@73:0>]((-1 + <rev_1033@67:0>):int,var165:int),
          P[<<append_1030@77:2>@89:0>](var165:int,1:int,<<rev_1033@67:1>@93:0>:int), (
          <rev_1033@67:0> <> 0) |- P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,
                                                             <<rev_1033@67:1>@93:0>:int)
          
          P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
          P[<<append_1030@80:2>@83:0>]((-1 + <append_1030@77:0>):int,<append_1030@77:1>:int,(
                                       -1 + <<append_1030@77:2>@89:0>):int), (
          <append_1030@77:0> <> 0)
          |- P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                          <<append_1030@77:2>@89:0>:int)
          
          P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int),
          ((<append_1030@80:0> = 0) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))
          |- P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,
                                          <<append_1030@80:2>@83:0>:int)
          
          P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
          (1 + <append_1030@80:0>) <> 0) |- P[<append_1030@80:1>](<append_1030@80:0>:int,
                                                                  <append_1030@80:1>:int)
          
          P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
          P[<<rev_1033@70:1>@73:0>]((-1 + <f_rev_1295@75:0>):int,<append_1030@77:0>:int),
          ((<append_1030@77:1> = 1) && (<f_rev_1295@75:0> <> 0))
          |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
          
          P[<rev_1033@70:0>](<rev_1033@70:0>:int), ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
          |- P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int)
          
          P[<rev_1033@67:0>]((1 + <rev_1033@70:0>):int), ((1 + <rev_1033@70:0>) <> 0)
          |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
          
          |- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
        input to Yhorn:
          P[<fail_1302@98:0>](<fail_1302@98:0>:int)|- bot
          
          P[<<rev_1033@67:1>@93:0>](<f_main_1297@95:1>:int,<f_main_1297@95:3>:int),
          ((<f_main_1297@95:3> <> <f_main_1297@95:1>) && (<fail_1302@98:0> = 1))
          |- P[<fail_1302@98:0>](<fail_1302@98:0>:int)
          
          P[<rev_1033@67:0>](<rev_1033@67:0>:int),
          P[<<rev_1033@70:1>@73:0>](var307:int,var165:int),
          P[<<append_1030@77:2>@89:0>](var165:int,var308:int,<<rev_1033@67:1>@93:0>:int),
          (((1 + var307) = <rev_1033@67:0>) && ((<rev_1033@67:0> <> 0) && (var308 = 1)))
          |- P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,<<rev_1033@67:1>@93:0>:int)
          
          P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
          P[<<append_1030@80:2>@83:0>](var309:int,<append_1030@77:1>:int,var310:int),
          (((1 + var310) = <<append_1030@77:2>@89:0>) &&
           (((1 + var309) = <append_1030@77:0>) && (<append_1030@77:0> <> 0)))
          |- P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                          <<append_1030@77:2>@89:0>:int)
          
          P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int),
          ((<<append_1030@80:2>@83:0> = <append_1030@80:1>) && (<append_1030@80:0> = 0))
          |- P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,
                                          <<append_1030@80:2>@83:0>:int)
          
          P[<append_1030@77:1>](var311:int,<append_1030@80:1>:int),
          ((var311 = (1 + <append_1030@80:0>)) && ((1 + <append_1030@80:0>) <> 0))
          |- P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int)
          
          P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
          P[<<rev_1033@70:1>@73:0>](var312:int,<append_1030@77:0>:int),
          (((1 + var312) = <f_rev_1295@75:0>) && ((<f_rev_1295@75:0> <> 0) && (<append_1030@77:1> = 1)))
          |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
          
          P[<rev_1033@70:0>](<rev_1033@70:0>:int), ((<<rev_1033@70:1>@73:0> = 0) && (<rev_1033@70:0> = 0))
          |- P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int)
          
          P[<rev_1033@67:0>](var313:int), ((var313 = (1 + <rev_1033@70:0>)) && ((1 + <rev_1033@70:0>) <> 0))
          |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1302_sep_98_sep_0($836)) -> 1=0.
(($836-1=0) & ($837-$838<>0)) & (v_sep_rev_1033_sep_67_sep_1_sep_93_sep_0($838,$837)) -> v_sep_fail_1302_sep_98_sep_0($836).
(($839-1=0) & ($840<>0) & (-$840+$841+1=0)) & (v_sep_append_1030_sep_77_sep_2_sep_89_sep_0($842,$839,$843)) & (v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0($841,$842)) & (v_sep_rev_1033_sep_67_sep_0($840)) -> v_sep_rev_1033_sep_67_sep_1_sep_93_sep_0($840,$843).
(($844<>0) & (-$844+$845+1=0) & ($846-$847+1=0)) & (v_sep_append_1030_sep_80_sep_2_sep_83_sep_0($845,$848,$846)) & (v_sep_append_1030_sep_77_sep_1($844,$848)) -> v_sep_append_1030_sep_77_sep_2_sep_89_sep_0($844,$848,$847).
(($849=0) & ($850-$851=0)) & (v_sep_append_1030_sep_80_sep_1($849,$851)) -> v_sep_append_1030_sep_80_sep_2_sep_83_sep_0($849,$851,$850).
(($849+1<>0) & (-$849+$852-1=0)) & (v_sep_append_1030_sep_77_sep_1($852,$851)) -> v_sep_append_1030_sep_80_sep_1($849,$851).
(($848-1=0) & ($853<>0) & (-$853+$854+1=0)) & (v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0($854,$844)) & (v_sep_rev_1033_sep_67_sep_0($853)) -> v_sep_append_1030_sep_77_sep_1($844,$848).
(($855=0) & ($856=0)) & (v_sep_rev_1033_sep_70_sep_0($855)) -> v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0($855,$856).
(($855+1<>0) & (-$855+$857-1=0)) & (v_sep_rev_1033_sep_67_sep_0($857)) -> v_sep_rev_1033_sep_70_sep_0($855).
0=0 -> v_sep_rev_1033_sep_67_sep_0($840).


v_sep_append_1030_sep_77_sep_1: X
v_sep_append_1030_sep_77_sep_2_sep_89_sep_0: X
v_sep_append_1030_sep_80_sep_1: X
v_sep_append_1030_sep_80_sep_2_sep_83_sep_0: X
v_sep_fail_1302_sep_98_sep_0: X
v_sep_rev_1033_sep_67_sep_0: X
v_sep_rev_1033_sep_67_sep_1_sep_93_sep_0: X
v_sep_rev_1033_sep_70_sep_0: X
v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0: X
........................
v_sep_append_1030_sep_77_sep_1: X
v_sep_append_1030_sep_77_sep_2_sep_89_sep_0: X
v_sep_append_1030_sep_80_sep_1: X
v_sep_append_1030_sep_80_sep_2_sep_83_sep_0: X
v_sep_fail_1302_sep_98_sep_0: X
v_sep_rev_1033_sep_67_sep_0: X
v_sep_rev_1033_sep_67_sep_1_sep_93_sep_0: X
v_sep_rev_1033_sep_70_sep_0: X
v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0: X
....
v_sep_append_1030_sep_77_sep_1: X
v_sep_append_1030_sep_77_sep_2_sep_89_sep_0: X
v_sep_append_1030_sep_80_sep_1: X
v_sep_append_1030_sep_80_sep_2_sep_83_sep_0: X
v_sep_fail_1302_sep_98_sep_0: X
v_sep_rev_1033_sep_67_sep_0: X
v_sep_rev_1033_sep_67_sep_1_sep_93_sep_0: X
v_sep_rev_1033_sep_70_sep_0: X
v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0: X
..........
v_sep_append_1030_sep_77_sep_1: X
v_sep_append_1030_sep_77_sep_2_sep_89_sep_0: X
v_sep_append_1030_sep_80_sep_1: X
v_sep_append_1030_sep_80_sep_2_sep_83_sep_0: X
v_sep_fail_1302_sep_98_sep_0: X
v_sep_rev_1033_sep_67_sep_0: X
v_sep_rev_1033_sep_67_sep_1_sep_93_sep_0: X
v_sep_rev_1033_sep_70_sep_0: X
v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0: X
...............
v_sep_append_1030_sep_77_sep_1: X
v_sep_append_1030_sep_77_sep_2_sep_89_sep_0: X
v_sep_append_1030_sep_80_sep_1: X
v_sep_append_1030_sep_80_sep_2_sep_83_sep_0: X
v_sep_fail_1302_sep_98_sep_0: X
v_sep_rev_1033_sep_67_sep_0: X
v_sep_rev_1033_sep_67_sep_1_sep_93_sep_0: X
v_sep_rev_1033_sep_70_sep_0: X
v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0: X
......................
v_sep_append_1030_sep_77_sep_1: X
v_sep_append_1030_sep_77_sep_2_sep_89_sep_0: X
v_sep_append_1030_sep_80_sep_1: X
v_sep_append_1030_sep_80_sep_2_sep_83_sep_0: X
v_sep_fail_1302_sep_98_sep_0: X
v_sep_rev_1033_sep_67_sep_0: X
v_sep_rev_1033_sep_67_sep_1_sep_93_sep_0: X
v_sep_rev_1033_sep_70_sep_0: X
v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0: X
........................(0=0) & (v_sep_fail_1302_sep_98_sep_0($836)) -> 1=0.
(($836-1=0) & ($837-$838<>0)) & (v_sep_rev_1033_sep_67_sep_1_sep_93_sep_0($838,$837)) -> v_sep_fail_1302_sep_98_sep_0($836).
(($839-1=0) & ($840<>0) & (-$840+$841+1=0)) & (v_sep_append_1030_sep_77_sep_2_sep_89_sep_0($842,$839,$843)) & (v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0($841,$842)) & (v_sep_rev_1033_sep_67_sep_0($840)) -> v_sep_rev_1033_sep_67_sep_1_sep_93_sep_0($840,$843).
(($844<>0) & (-$844+$845+1=0) & ($846-$847+1=0)) & (v_sep_append_1030_sep_80_sep_2_sep_83_sep_0($845,$848,$846)) & (v_sep_append_1030_sep_77_sep_1($844,$848)) -> v_sep_append_1030_sep_77_sep_2_sep_89_sep_0($844,$848,$847).
(($849=0) & ($850-$851=0)) & (v_sep_append_1030_sep_80_sep_1($849,$851)) -> v_sep_append_1030_sep_80_sep_2_sep_83_sep_0($849,$851,$850).
(($849+1<>0) & (-$849+$852-1=0)) & (v_sep_append_1030_sep_77_sep_1($852,$851)) -> v_sep_append_1030_sep_80_sep_1($849,$851).
(($848-1=0) & ($853<>0) & (-$853+$854+1=0)) & (v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0($854,$844)) & (v_sep_rev_1033_sep_67_sep_0($853)) -> v_sep_append_1030_sep_77_sep_1($844,$848).
(($855=0) & ($856=0)) & (v_sep_rev_1033_sep_70_sep_0($855)) -> v_sep_rev_1033_sep_70_sep_1_sep_73_sep_0($855,$856).
(($855+1<>0) & (-$855+$857-1=0)) & (v_sep_rev_1033_sep_67_sep_0($857)) -> v_sep_rev_1033_sep_70_sep_0($855).
0=0 -> v_sep_rev_1033_sep_67_sep_0($840).

          |- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
        solution:
          P[<append_1030@77:1>]($888:int,$890:int) = (((3 * $890) + (2 * $888)) <= 3)
          P[<<append_1030@77:2>@89:0>]($866:int,$868:int,$870:int) = ((3 * $868) <= $866)
          P[<append_1030@80:1>]($893:int,$895:int) = (((3 * $895) + (2 * $893)) <= 1)
          P[<<append_1030@80:2>@83:0>]($881:int,$883:int,$885:int) = ((3 * $883) <= (1 + (4 * $881)))
          P[<fail_1302@98:0>]($858:bool) = false
          P[<rev_1033@67:0>]($878:int) = true
          P[<<rev_1033@67:1>@93:0>]($861:int,$863:int) = false
          P[<rev_1033@70:0>]($898:int) = true
          P[<<rev_1033@70:1>@73:0>]($873:int,$875:int) = ($875 <= 0)
        
      end HcSolver.solve_ub(91174)[4] (0.156976 sec.)
      begin HcSolver.check_validity(91687)[4]
        input:
          P[<fail_1302@98:0>](<fail_1302@98:0>:bool)|- bot
          
          P[<<rev_1033@67:1>@93:0>](<f_main_1297@95:1>:int,<f_main_1297@95:3>:int),
          ((<f_main_1297@95:3> <> <f_main_1297@95:1>) && <fail_1302@98:0>)
          |- P[<fail_1302@98:0>](<fail_1302@98:0>:bool)
          
          P[<rev_1033@67:0>](<rev_1033@67:0>:int),
          P[<<rev_1033@70:1>@73:0>]((-1 + <rev_1033@67:0>):int,var165:int),
          P[<<append_1030@77:2>@89:0>](var165:int,1:int,<<rev_1033@67:1>@93:0>:int), (
          <rev_1033@67:0> <> 0) |- P[<<rev_1033@67:1>@93:0>](<rev_1033@67:0>:int,
                                                             <<rev_1033@67:1>@93:0>:int)
          
          P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int),
          P[<<append_1030@80:2>@83:0>]((-1 + <append_1030@77:0>):int,<append_1030@77:1>:int,(
                                       -1 + <<append_1030@77:2>@89:0>):int), (
          <append_1030@77:0> <> 0)
          |- P[<<append_1030@77:2>@89:0>](<append_1030@77:0>:int,<append_1030@77:1>:int,
                                          <<append_1030@77:2>@89:0>:int)
          
          P[<append_1030@80:1>](<append_1030@80:0>:int,<append_1030@80:1>:int),
          ((<append_1030@80:0> = 0) && (<<append_1030@80:2>@83:0> = <append_1030@80:1>))
          |- P[<<append_1030@80:2>@83:0>](<append_1030@80:0>:int,<append_1030@80:1>:int,
                                          <<append_1030@80:2>@83:0>:int)
          
          P[<append_1030@77:1>]((1 + <append_1030@80:0>):int,<append_1030@80:1>:int), (
          (1 + <append_1030@80:0>) <> 0) |- P[<append_1030@80:1>](<append_1030@80:0>:int,
                                                                  <append_1030@80:1>:int)
          
          P[<rev_1033@67:0>](<f_rev_1295@75:0>:int),
          P[<<rev_1033@70:1>@73:0>]((-1 + <f_rev_1295@75:0>):int,<append_1030@77:0>:int),
          ((<append_1030@77:1> = 1) && (<f_rev_1295@75:0> <> 0))
          |- P[<append_1030@77:1>](<append_1030@77:0>:int,<append_1030@77:1>:int)
          
          P[<rev_1033@70:0>](<rev_1033@70:0>:int), ((<rev_1033@70:0> = 0) && (<<rev_1033@70:1>@73:0> = 0))
          |- P[<<rev_1033@70:1>@73:0>](<rev_1033@70:0>:int,<<rev_1033@70:1>@73:0>:int)
          
          P[<rev_1033@67:0>]((1 + <rev_1033@70:0>):int), ((1 + <rev_1033@70:0>) <> 0)
          |- P[<rev_1033@70:0>](<rev_1033@70:0>:int)
          
          |- P[<rev_1033@67:0>](<rev_1033@67:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(91687)[4] (0.007999 sec.)
      solution:
        P[<append_1030@77:1>]($888:int,$890:int) = (((3 * $890) + (2 * $888)) <= 3)
        P[<<append_1030@77:2>@89:0>]($866:int,$868:int,$870:int) = ((3 * $868) <= $866)
        P[<append_1030@80:1>]($893:int,$895:int) = (((3 * $895) + (2 * $893)) <= 1)
        P[<<append_1030@80:2>@83:0>]($881:int,$883:int,$885:int) = ((3 * $883) <= (1 + (4 * $881)))
        P[<fail_1302@98:0>]($858:bool) = false
        P[<rev_1033@67:0>]($878:int) = true
        P[<<rev_1033@67:1>@93:0>]($861:int,$863:int) = false
        P[<rev_1033@70:0>]($898:int) = true
        P[<<rev_1033@70:1>@73:0>]($873:int,$875:int) = ($875 <= 0)
    end YhornInterface.solve(91173)[3] (0.164975 sec.)
    
  end RefTypeInfer.infer_etrs(42097)[2] (0.447932 sec.)
  refinement types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:{v2:int | false} -> X) -> X
    rev_1033: v1:int -> (v2:{v2:int | (v2 <= 0)} -> X) -> X
    f_rev_1295: v1:int -> (v2:int -> X) -> v4:int -> X
    append_1030: v1:int -> v2:{v2:int | (v1 <= 0)} -> (v3:{v3:int | false} -> X) -> X
    append_1030: v1:int -> v2:{v2:int | ((2 + v1) <= 0)} -> (v3:{v3:int | false} -> X) -> X
    f_append_1294: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1302: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1300: var323:int -> var322:int -> var321:unit -> X
    f_k_main_u_1296: var330:int -> var329:int -> var328:unit -> (var327:unit -> X) -> var325:int -> X
    fail_1301: var334:bool -> (var333:unit -> X) -> X
    k_main_u_1218: var340:int -> var339:int -> (var338:unit -> X) -> var336:unit -> X
  abstraction types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: var341:int -> (var342:int[var342 -> (var342 <= 0)] -> X) -> X
    f_rev_1295: v1:int -> (v2:int -> X) -> v4:int -> X
    append_1030: var345:int ->
                 var346:int[var346 -> (var345 <= 0),
                            var346 -> ((2 + var345) <= 0)] -> (var347:int -> X) -> X
    f_append_1294: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1302: v1:bool -> (v2:unit -> X) -> X
    f_1300: var323:int -> var322:int -> var321:unit -> X
    f_k_main_u_1296: var330:int -> var329:int -> var328:unit -> (var327:unit -> X) -> var325:int -> X
    fail_1301: var334:bool -> (var333:unit -> X) -> X
    k_main_u_1218: var340:int -> var339:int -> (var338:unit -> X) -> var336:unit -> X
  
end AbsTypeInfer.refine(42096)[1] (0.450931 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1293
  main_1293 -> (rand_int f_1298)
  append_1030 x_1031 y_1032 k_append_1105 when (x_1031 = 0) -> (k_append_1105 y_1032)
  append_1030 x_1031 y_1032 k_append_1105 when (not (x_1031 = 0)) ->
      (append_1030 (x_1031 - 1) y_1032 (f_append_1294 x_1031 y_1032 k_append_1105))
  f_1298 x_1251 -> (rand_int (f_1299 x_1251))
  f_1299 x_1251 x_1264 -> (main_1035 x_1251 x_1264 (f_1300 x_1251 x_1264))
  f_1300 x_1251 x_1264 x_1248 -> end
  f_append_1294 x_1031 y_1032 k_append_1105 x_1109 -> (k_append_1105 (1 + x_1109))
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (x_1222 = (n_1036 + m_1037)) -> (k_main_1191 ())
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (not (x_1222 = (n_1036 + m_1037))) ->
      (fail_1301 true k_main_1191)
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (x_1197 = n_1036) -> (k_main_u_1218 m_1037 n_1036 k_main_1191 ())
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (not (x_1197 = n_1036)) ->
      (fail_1302 true (k_main_u_1218 m_1037 n_1036 k_main_1191))
  f_rev_1295 n_1034 k_rev_1138 x_1163 -> (append_1030 x_1163 1 k_rev_1138)
  fail_1301 b k -> {fail} => (k ())
  fail_1302 b k -> {fail} => (k ())
  k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 ->
      (append_1030 n_1036 m_1037 (f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191))
  main_1035 n_1036 m_1037 k_main_1191 -> (rev_1033 n_1036 (f_main_1297 m_1037 n_1036 k_main_1191))
  rev_1033 n_1034 k_rev_1138 when (n_1034 = 0) -> (k_rev_1138 0)
  rev_1033 n_1034 k_rev_1138 when (not (n_1034 = 0)) -> (rev_1033 (n_1034 - 1) (f_rev_1295 n_1034 k_rev_1138))
Types:
  main_1293 : X
  append_1030 : (x_1:int -> x_2:int[x_1 <= -2; x_1 <= 0; x_2 = 1] -> (x_4:int[x_1 = 0 && x_4 = 1] -> X) -> X)
  fail_1301 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1302 : (x_1:bool[x_1] -> (unit -> X) -> X)
  rev_1033 : (x_1:int -> (x_3:int[x_3 <= 0; x_1 = x_3] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1293 ... --> 
  f_1298 ... --> 
  f_1299 ... --> 
  main_1035 ... --> 
  rev_1033 [1/2] ... --> 
  f_main_1297 [1/2] ... --> 
  k_main_u_1218 ... --> 
  append_1030 [1/2] ... --> 
  f_k_main_u_1296 [2/2] ... --> 
  fail_1301 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(94521)[1]
  program:
    main_1293  | true = ((Random.int 0) f_1298)
    append_1030 x_1031 y_1032 k_append_1105 | (x_1031 = 0) = (k_append_1105 y_1032)
    append_1030 x_1031 y_1032 k_append_1105 | (not (x_1031 = 0)) = (append_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    y_1032
                                                                    (
                                                                    f_append_1294 x_1031
                                                                    y_1032
                                                                    k_append_1105))
    f_1298 x_1251 | true = ((Random.int 0) (f_1299 x_1251))
    f_1299 x_1251 x_1264 | true = (main_1035 x_1251
                                             x_1264
                                             (f_1300 x_1251
                                                     x_1264))
    f_1300 x_1251 x_1264 x_1248 | true = end
    f_append_1294 x_1031 y_1032 k_append_1105 x_1109 | true = (k_append_1105 (
                                                                    1 + x_1109))
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (x_1222 = (n_1036 + m_1037)) = (
    k_main_1191 ())
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (not (x_1222 = (n_1036 + m_1037))) = (
    fail_1301 true
              k_main_1191)
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (x_1197 = n_1036) = (
    k_main_u_1218 m_1037
                  n_1036
                  k_main_1191
                  ())
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (not (x_1197 = n_1036)) = (
    fail_1302 true
              (k_main_u_1218 m_1037
                             n_1036
                             k_main_1191))
    f_rev_1295 n_1034 k_rev_1138 x_1163 | true = (append_1030 x_1163
                                                              1
                                                              k_rev_1138)
    fail_1301 b k | true = (fail ())
    fail_1302 b k | true = (fail ())
    k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 | true = (append_1030
                                                               n_1036
                                                               m_1037
                                                               (f_k_main_u_1296 m_1037
                                                                    n_1036
                                                                    x_1194
                                                                    k_main_1191))
    main_1035 n_1036 m_1037 k_main_1191 | true = (rev_1033 n_1036
                                                           (f_main_1297 m_1037
                                                                    n_1036
                                                                    k_main_1191))
    rev_1033 n_1034 k_rev_1138 | (n_1034 = 0) = (k_rev_1138 0)
    rev_1033 n_1034 k_rev_1138 | (not (n_1034 = 0)) = (rev_1033 (n_1034 - 1)
                                                                (f_rev_1295 n_1034
                                                                    k_rev_1138))
    main_1293:X
    append_1030:int -> int -> (int -> X) -> X
    f_1298:int -> X
    f_1299:int -> int -> X
    f_1300:int -> int -> unit -> X
    f_append_1294:int -> int -> (int -> X) -> int -> X
    f_k_main_u_1296:int -> int -> unit -> (unit -> X) -> int -> X
    f_main_1297:int -> int -> (unit -> X) -> int -> X
    f_rev_1295:int -> (int -> X) -> int -> X
    fail_1301:bool -> (unit -> X) -> X
    fail_1302:bool -> (unit -> X) -> X
    k_main_u_1218:int -> int -> (unit -> X) -> unit -> X
    main_1035:int -> int -> (unit -> X) -> X
    rev_1033:int -> (int -> X) -> X
  inlined functions: f_1298,f_1299,f_1300,f_append_1294,f_k_main_u_1296,f_main_1297,f_rev_1295,k_main_u_1218,main_1035
  counterexample: 0:0:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1298@104:0> = var350)
     [true.nop((<f_1299@107:0> = <f_1298@104:0>) && (<f_1299@107:1> = var351))
      [true.((<main_1035@109:0> = <f_1299@107:0>) && (<main_1035@109:1> = <f_1299@107:1>))
       [true.(<rev_1033@111:0> = <main_1035@109:0>)
        [(<rev_1033@111:0> = 0).(<<rev_1033@111:1>@114:0> = 0)
         [true.
          ((<f_main_1297@116:0> = <main_1035@109:1>) &&
           ((<f_main_1297@116:1> = <main_1035@109:0>) && (<f_main_1297@116:3> = <<rev_1033@111:1>@114:0>)))
          [(<f_main_1297@116:3> = <f_main_1297@116:1>).
           ((<k_main_u_1218@119:0> = <f_main_1297@116:0>) &&
            ((<k_main_u_1218@119:1> = <f_main_1297@116:1>) && (<k_main_u_1218@119:3> = ())))
           [true.((<append_1030@121:0> = <k_main_u_1218@119:1>) && (<append_1030@121:1> = <k_main_u_1218@119:0>))
            [(<append_1030@121:0> = 0).(<<append_1030@121:2>@124:0> = <append_1030@121:1>)
             [true.
              ((<f_k_main_u_1296@126:0> = <k_main_u_1218@119:0>) &&
               ((<f_k_main_u_1296@126:1> = <k_main_u_1218@119:1>) &&
                ((<f_k_main_u_1296@126:2> = <k_main_u_1218@119:3>) &&
                 (<f_k_main_u_1296@126:4> = <<append_1030@121:2>@124:0>))))
              [(not (<f_k_main_u_1296@126:4> = (<f_k_main_u_1296@126:1> + <f_k_main_u_1296@126:0>))).
               (<fail_1301@129:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(94522)[2]
    horn clauses:
      P[<fail_1301@129:0>](<fail_1301@129:0>:bool)|- bot
      
      P[<f_k_main_u_1296@126:4>](<f_k_main_u_1296@126:0>:int,<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:2>:unit,<f_k_main_u_1296@126:4>:int),
      ((<f_k_main_u_1296@126:4> <> (<f_k_main_u_1296@126:1> + <f_k_main_u_1296@126:0>)) && <fail_1301@129:0>)
      |- P[<fail_1301@129:0>](<fail_1301@129:0>:bool)
      
      P[<k_main_u_1218@119:3>](<f_k_main_u_1296@126:0>:int,<f_k_main_u_1296@126:1>:int,<k_main_u_1218@119:3>:unit),
      P[<<append_1030@121:2>@124:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:0>:int,<f_k_main_u_1296@126:4>:int)|- P[<f_k_main_u_1296@126:4>](
      <f_k_main_u_1296@126:0>:int,<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:2>:unit,
      <f_k_main_u_1296@126:4>:int)
      
      P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int),
      ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
      |- P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,
                                        <<append_1030@121:2>@124:0>:int)
      
      P[<k_main_u_1218@119:3>](<append_1030@121:1>:int,<append_1030@121:0>:int,<k_main_u_1218@119:3>:unit)|- P[<append_1030@121:1>](
      <append_1030@121:0>:int,<append_1030@121:1>:int)
      
      P[<f_main_1297@116:3>](<k_main_u_1218@119:0>:int,<k_main_u_1218@119:1>:int,<k_main_u_1218@119:1>:int)|- P[<k_main_u_1218@119:3>](
      <k_main_u_1218@119:0>:int,<k_main_u_1218@119:1>:int,<k_main_u_1218@119:3>:unit)
      
      P[<main_1035@109:1>](<f_main_1297@116:1>:int,<f_main_1297@116:0>:int),
      P[<<rev_1033@111:1>@114:0>](<f_main_1297@116:1>:int,<f_main_1297@116:3>:int)|- P[<f_main_1297@116:3>](
      <f_main_1297@116:0>:int,<f_main_1297@116:1>:int,<f_main_1297@116:3>:int)
      
      P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
      |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
      
      P[<main_1035@109:1>](<rev_1033@111:0>:int,<main_1035@109:1>:int)|- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
      
      P[<f_1299@107:1>](<main_1035@109:0>:int,<main_1035@109:1>:int)|- P[<main_1035@109:1>](
      <main_1035@109:0>:int,<main_1035@109:1>:int)
      
      P[<f_1298@104:0>](<f_1299@107:0>:int)|- P[<f_1299@107:1>](<f_1299@107:0>:int,
                                                                <f_1299@107:1>:int)
      
      |- P[<f_1298@104:0>](<f_1298@104:0>:int)
    call trees:
      <main_1293@101>
        <f_1298@104>
          <f_1299@107>
            <main_1035@109>
              <rev_1033@111>
              </<rev_1033@111:1>@114>
              <f_main_1297@116>
                <k_main_u_1218@119>
                  <append_1030@121>
                  </<append_1030@121:2>@124>
                  <f_k_main_u_1296@126>
                    <fail_1301@129>
    inlined horn clauses:
      P[<fail_1301@129:0>](<fail_1301@129:0>:bool)|- bot
      
      P[<<rev_1033@111:1>@114:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:1>:int),
      P[<<append_1030@121:2>@124:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:0>:int,<f_k_main_u_1296@126:4>:int),
      ((<f_k_main_u_1296@126:4> <> (<f_k_main_u_1296@126:1> + <f_k_main_u_1296@126:0>)) && <fail_1301@129:0>)
      |- P[<fail_1301@129:0>](<fail_1301@129:0>:bool)
      
      P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int),
      ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
      |- P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,
                                        <<append_1030@121:2>@124:0>:int)
      
      P[<<rev_1033@111:1>@114:0>](<append_1030@121:0>:int,<append_1030@121:0>:int)|- P[<append_1030@121:1>](
      <append_1030@121:0>:int,<append_1030@121:1>:int)
      
      P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
      |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
      
      |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
    begin ParamSubstInfer.infer(95848)[3]
      
    end ParamSubstInfer.infer(95848)[3] (0.153977 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(95850)[3]
      
    end RefTypeInfer.elim_coeffs(95850)[3] (0.000000 sec.)
    begin GenHcSolver.solve(96093)[3]
      Horn clauses:
        P[<fail_1301@129:0>](<fail_1301@129:0>:bool)|- bot
        
        P[<<rev_1033@111:1>@114:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:1>:int),
        P[<<append_1030@121:2>@124:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:0>:int,<f_k_main_u_1296@126:4>:int),
        ((<f_k_main_u_1296@126:4> <> (<f_k_main_u_1296@126:1> + <f_k_main_u_1296@126:0>)) && <fail_1301@129:0>)
        |- P[<fail_1301@129:0>](<fail_1301@129:0>:bool)
        
        P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int),
        ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
        |- P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,
                                          <<append_1030@121:2>@124:0>:int)
        
        P[<<rev_1033@111:1>@114:0>](<append_1030@121:0>:int,<append_1030@121:0>:int)|- P[<append_1030@121:1>](
        <append_1030@121:0>:int,<append_1030@121:1>:int)
        
        P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
        
        |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
      lower bounds:
        P[<rev_1033@111:0>](<rev_1033@111:0>:int) = true
        P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int) =
        ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int) = (<append_1030@121:0> = 0)
        P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,<<append_1030@121:2>@124:0>:int) =
        ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
        P[<fail_1301@129:0>](<fail_1301@129:0>:bool) = false
      upper bounds:
        P[<fail_1301@129:0>](var353:bool) = true
      begin GenHcSolver.classify_pids(97249)[4]
        output:
          [<fail_1301@129:0>]
      end GenHcSolver.classify_pids(97249)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(97252)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(97253)[5]
          begin InterpProver.interpolate_fresh(97254)[6]
            begin InterpProver.interpolate_log(97255)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(97256)[8]
                begin InterpProver.interpolate_simplify(97257)[9]
                  begin InterpProver.interpolate_quick(97270)[10]
                    
                  end InterpProver.interpolate_quick(97270)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(97274)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(97274)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(97257)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(97256)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(97255)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(97254)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(97253)[5] (0.000000 sec.)
        output:
          P[<fail_1301@129:0>](<fail_1301@129:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(97252)[4] (0.000000 sec.)
      Horn clauses:
        P[<<rev_1033@111:1>@114:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:1>:int),
        P[<<append_1030@121:2>@124:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:0>:int,<f_k_main_u_1296@126:4>:int),
        (<f_k_main_u_1296@126:4> <> (<f_k_main_u_1296@126:1> + <f_k_main_u_1296@126:0>)) |- bot
        
        P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int),
        ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
        |- P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,
                                          <<append_1030@121:2>@124:0>:int)
        
        P[<<rev_1033@111:1>@114:0>](<append_1030@121:0>:int,<append_1030@121:0>:int)|- P[<append_1030@121:1>](
        <append_1030@121:0>:int,<append_1030@121:1>:int)
        
        P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
        
        |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
      lower bounds:
        P[<rev_1033@111:0>](<rev_1033@111:0>:int) = true
        P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int) =
        ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int) = (<append_1030@121:0> = 0)
        P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,<<append_1030@121:2>@124:0>:int) =
        ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
      upper bounds:
        P[<<append_1030@121:2>@124:0>](var354:int,var355:int,var356:int) = ((var354 <> 0) || (var356 = var355))
      begin GenHcSolver.classify_pids(98757)[4]
        output:
          [<<append_1030@121:2>@124:0>]
      end GenHcSolver.classify_pids(98757)[4] (0.000000 sec.)
      lb:((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
      nub:(not ((<append_1030@121:0> <> 0) || (<<append_1030@121:2>@124:0> = <append_1030@121:1>)))
      begin ApronInterface.convex_hull_interpolate(98760)[4]
        lb:((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
        nub:(not ((<append_1030@121:0> <> 0) || (<<append_1030@121:2>@124:0> = <append_1030@121:1>)))
        lb':((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
        nub':(not ((<append_1030@121:0> <> 0) || (<<append_1030@121:2>@124:0> = <append_1030@121:1>)))
        begin InterpProver.interpolate(98761)[5]
          begin InterpProver.interpolate_fresh(98762)[6]
            begin InterpProver.interpolate_log(98763)[7]
              input1: ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
              input2: (not ((<append_1030@121:0> <> 0) || (<<append_1030@121:2>@124:0> = <append_1030@121:1>)))
              begin InterpProver.interpolate_check(98764)[8]
                begin InterpProver.interpolate_simplify(98765)[9]
                  begin InterpProver.interpolate_quick(98818)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(98827)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(98828)[12]
                        begin CsisatInterface.interpolate_csisat_log(98829)[13]
                          input1: (0 = v_sep_append_1030_sep_121_sep_0 & v_sep_append_1030_sep_121_sep_1 = v_sep_append_1030_sep_121_sep_2_sep_124_sep_0)
                          input2: (not v_sep_append_1030_sep_121_sep_1 = v_sep_append_1030_sep_121_sep_2_sep_124_sep_0 & 0 = v_sep_append_1030_sep_121_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(98830)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(98830)[14] (0.000000 sec.)
                          output: v_sep_append_1030_sep_121_sep_1 = v_sep_append_1030_sep_121_sep_2_sep_124_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(98829)[13] (0.000000 sec.)
                        after simplification: v_sep_append_1030_sep_121_sep_1 = v_sep_append_1030_sep_121_sep_2_sep_124_sep_0
                        after dnf conversion: ((v_sep_append_1030_sep_121_sep_1 = v_sep_append_1030_sep_121_sep_2_sep_124_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(98828)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(98827)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(98818)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(98765)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(98764)[8] (0.001000 sec.)
              output: (<append_1030@121:1> = <<append_1030@121:2>@124:0>)
            end InterpProver.interpolate_log(98763)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(98762)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(98761)[5] (0.001000 sec.)
        output:
          P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,<<append_1030@121:2>@124:0>:int) =
          (<append_1030@121:1> = <<append_1030@121:2>@124:0>)
      end ApronInterface.convex_hull_interpolate(98760)[4] (0.001000 sec.)
      Horn clauses:
        P[<<rev_1033@111:1>@114:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:1>:int),
        (0 <> <f_k_main_u_1296@126:1>) |- bot
        
        P[<<rev_1033@111:1>@114:0>](<append_1030@121:0>:int,<append_1030@121:0>:int)|- P[<append_1030@121:1>](
        <append_1030@121:0>:int,<append_1030@121:1>:int)
        
        P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
        
        |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
      lower bounds:
        P[<rev_1033@111:0>](<rev_1033@111:0>:int) = true
        P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int) =
        ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int) = (<append_1030@121:0> = 0)
      upper bounds:
        P[<append_1030@121:1>](var357:int,var358:int) = true
      begin GenHcSolver.classify_pids(99668)[4]
        output:
          [<append_1030@121:1>]
      end GenHcSolver.classify_pids(99668)[4] (0.000000 sec.)
      lb:(<append_1030@121:0> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(99671)[4]
        lb:(<append_1030@121:0> = 0)
        nub:false
        lb':(<append_1030@121:0> = 0)
        nub':false
        begin InterpProver.interpolate(99672)[5]
          begin InterpProver.interpolate_fresh(99673)[6]
            begin InterpProver.interpolate_log(99674)[7]
              input1: (<append_1030@121:0> = 0)
              input2: false
              begin InterpProver.interpolate_check(99675)[8]
                begin InterpProver.interpolate_simplify(99676)[9]
                  begin InterpProver.interpolate_quick(99695)[10]
                    
                  end InterpProver.interpolate_quick(99695)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(99676)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(99675)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(99674)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(99673)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(99672)[5] (0.000000 sec.)
        output:
          P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int) = true
      end ApronInterface.convex_hull_interpolate(99671)[4] (0.000000 sec.)
      Horn clauses:
        P[<<rev_1033@111:1>@114:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:1>:int),
        (0 <> <f_k_main_u_1296@126:1>) |- bot
        
        P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
        
        |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
      lower bounds:
        P[<rev_1033@111:0>](<rev_1033@111:0>:int) = true
        P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int) =
        ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
      upper bounds:
        P[<<rev_1033@111:1>@114:0>](var359:int,var360:int) = ((0 = var359) || (var359 <> var360))
      begin GenHcSolver.classify_pids(100442)[4]
        output:
          [<<rev_1033@111:1>@114:0>]
      end GenHcSolver.classify_pids(100442)[4] (0.000000 sec.)
      lb:((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
      nub:(not ((0 = <rev_1033@111:0>) || (<rev_1033@111:0> <> <<rev_1033@111:1>@114:0>)))
      begin ApronInterface.convex_hull_interpolate(100445)[4]
        lb:((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        nub:(not ((0 = <rev_1033@111:0>) || (<rev_1033@111:0> <> <<rev_1033@111:1>@114:0>)))
        lb':((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        nub':(not ((0 = <rev_1033@111:0>) || (<rev_1033@111:0> <> <<rev_1033@111:1>@114:0>)))
        begin InterpProver.interpolate(100446)[5]
          begin InterpProver.interpolate_fresh(100447)[6]
            begin InterpProver.interpolate_log(100448)[7]
              input1: ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
              input2: (not ((0 = <rev_1033@111:0>) || (<rev_1033@111:0> <> <<rev_1033@111:1>@114:0>)))
              begin InterpProver.interpolate_check(100449)[8]
                begin InterpProver.interpolate_simplify(100450)[9]
                  begin InterpProver.interpolate_quick(100497)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(100506)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(100507)[12]
                        begin CsisatInterface.interpolate_csisat_log(100508)[13]
                          input1: (0 = v_sep_rev_1033_sep_111_sep_0 & 0 = v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0)
                          input2: (not 0 = v_sep_rev_1033_sep_111_sep_0 & v_sep_rev_1033_sep_111_sep_0 = v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(100509)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(100509)[14] (0.000000 sec.)
                          output: 0 = v_sep_rev_1033_sep_111_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(100508)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_rev_1033_sep_111_sep_0
                        after dnf conversion: ((0 = v_sep_rev_1033_sep_111_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(100507)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(100506)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(100497)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(100450)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(100449)[8] (0.001000 sec.)
              output: (0 = <rev_1033@111:0>)
            end InterpProver.interpolate_log(100448)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(100447)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(100446)[5] (0.001000 sec.)
        output:
          P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int) = (0 = <rev_1033@111:0>)
      end ApronInterface.convex_hull_interpolate(100445)[4] (0.001000 sec.)
      Horn clauses:
        |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
      lower bounds:
        P[<rev_1033@111:0>](<rev_1033@111:0>:int) = true
      upper bounds:
        P[<rev_1033@111:0>](var361:int) = true
      begin GenHcSolver.classify_pids(100799)[4]
        output:
          [<rev_1033@111:0>]
      end GenHcSolver.classify_pids(100799)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(100802)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(100803)[5]
          begin InterpProver.interpolate_fresh(100804)[6]
            begin InterpProver.interpolate_log(100805)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(100806)[8]
                begin InterpProver.interpolate_simplify(100807)[9]
                  begin InterpProver.interpolate_quick(100820)[10]
                    
                  end InterpProver.interpolate_quick(100820)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(100807)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(100806)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(100805)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(100804)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(100803)[5] (0.001000 sec.)
        output:
          P[<rev_1033@111:0>](<rev_1033@111:0>:int) = true
      end ApronInterface.convex_hull_interpolate(100802)[4] (0.001000 sec.)
      begin HcSolver.check_validity(100875)[4]
        input:
          P[<fail_1301@129:0>](<fail_1301@129:0>:bool)|- bot
          
          P[<<rev_1033@111:1>@114:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:1>:int),
          P[<<append_1030@121:2>@124:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:0>:int,<f_k_main_u_1296@126:4>:int),
          ((<f_k_main_u_1296@126:4> <> (<f_k_main_u_1296@126:1> + <f_k_main_u_1296@126:0>)) && <fail_1301@129:0>)
          |- P[<fail_1301@129:0>](<fail_1301@129:0>:bool)
          
          P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int),
          ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
          |- P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,
                                            <<append_1030@121:2>@124:0>:int)
          
          P[<<rev_1033@111:1>@114:0>](<append_1030@121:0>:int,<append_1030@121:0>:int)|- P[<append_1030@121:1>](
          <append_1030@121:0>:int,<append_1030@121:1>:int)
          
          P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
          |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
          
          |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(100875)[4] (0.000999 sec.)
      solution:
        P[<fail_1301@129:0>](<fail_1301@129:0>:bool) = false
        P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,<<append_1030@121:2>@124:0>:int) =
        (<append_1030@121:1> = <<append_1030@121:2>@124:0>)
        P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int) = true
        P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int) = (0 = <rev_1033@111:0>)
        P[<rev_1033@111:0>](<rev_1033@111:0>:int) = true
    end GenHcSolver.solve(96093)[3] (0.023996 sec.)
    begin GenHcSolver.solve(101235)[3]
      Horn clauses:
        P[<fail_1301@129:0>](<fail_1301@129:0>:bool)|- bot
        
        P[<<rev_1033@111:1>@114:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:1>:int),
        P[<<append_1030@121:2>@124:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:0>:int,<f_k_main_u_1296@126:4>:int),
        ((<f_k_main_u_1296@126:4> <> (<f_k_main_u_1296@126:1> + <f_k_main_u_1296@126:0>)) && <fail_1301@129:0>)
        |- P[<fail_1301@129:0>](<fail_1301@129:0>:bool)
        
        P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int),
        ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
        |- P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,
                                          <<append_1030@121:2>@124:0>:int)
        
        P[<<rev_1033@111:1>@114:0>](<append_1030@121:0>:int,<append_1030@121:0>:int)|- P[<append_1030@121:1>](
        <append_1030@121:0>:int,<append_1030@121:1>:int)
        
        P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
        
        |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
      lower bounds:
        P[<rev_1033@111:0>](<rev_1033@111:0>:int) = true
        P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int) =
        ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int) = (<append_1030@121:0> = 0)
        P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,<<append_1030@121:2>@124:0>:int) =
        ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
        P[<fail_1301@129:0>](<fail_1301@129:0>:bool) = false
      upper bounds:
        P[<fail_1301@129:0>](var363:bool) = true
      begin GenHcSolver.classify_pids(102391)[4]
        output:
          [<fail_1301@129:0>]
      end GenHcSolver.classify_pids(102391)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(102394)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(102397)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(102397)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(102402)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(102402)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(102405)[5]
          begin InterpProver.interpolate_fresh(102406)[6]
            begin InterpProver.interpolate_log(102407)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(102408)[8]
                begin InterpProver.interpolate_simplify(102409)[9]
                  begin InterpProver.interpolate_quick(102424)[10]
                    
                  end InterpProver.interpolate_quick(102424)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(102428)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(102428)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(102409)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(102408)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(102407)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(102406)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(102405)[5] (0.000000 sec.)
        output:
          P[<fail_1301@129:0>](<fail_1301@129:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(102394)[4] (0.001000 sec.)
      Horn clauses:
        P[<<rev_1033@111:1>@114:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:1>:int),
        P[<<append_1030@121:2>@124:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:0>:int,<f_k_main_u_1296@126:4>:int),
        (<f_k_main_u_1296@126:4> <> (<f_k_main_u_1296@126:1> + <f_k_main_u_1296@126:0>)) |- bot
        
        P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int),
        ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
        |- P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,
                                          <<append_1030@121:2>@124:0>:int)
        
        P[<<rev_1033@111:1>@114:0>](<append_1030@121:0>:int,<append_1030@121:0>:int)|- P[<append_1030@121:1>](
        <append_1030@121:0>:int,<append_1030@121:1>:int)
        
        P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
        
        |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
      lower bounds:
        P[<rev_1033@111:0>](<rev_1033@111:0>:int) = true
        P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int) =
        ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int) = (<append_1030@121:0> = 0)
        P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,<<append_1030@121:2>@124:0>:int) =
        ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
      upper bounds:
        P[<<append_1030@121:2>@124:0>](var364:int,var365:int,var366:int) = ((var364 <> 0) || (var366 = var365))
      begin GenHcSolver.classify_pids(103918)[4]
        output:
          [<<append_1030@121:2>@124:0>]
      end GenHcSolver.classify_pids(103918)[4] (0.000000 sec.)
      lb:((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
      nub:(not ((<append_1030@121:0> <> 0) || (<<append_1030@121:2>@124:0> = <append_1030@121:1>)))
      begin ApronInterface.convex_hull_interpolate(103921)[4]
        lb:((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
        nub:(not ((<append_1030@121:0> <> 0) || (<<append_1030@121:2>@124:0> = <append_1030@121:1>)))
        begin ExtFormula.Formula.case_analysis_boolean(103934)[5]
          ts: ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(103934)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(103952)[5]
          ts: ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> <> <append_1030@121:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(103952)[5] (0.000000 sec.)
        lb':(((<<append_1030@121:2>@124:0> + (-1 * <append_1030@121:1>)) = 0) && (<append_1030@121:0> = 0))
        nub':(<append_1030@121:0> = 0)
        begin InterpProver.interpolate(103958)[5]
          begin InterpProver.interpolate_fresh(103959)[6]
            begin InterpProver.interpolate_log(103960)[7]
              input1: (((<<append_1030@121:2>@124:0> + (-1 * <append_1030@121:1>)) = 0) && (<append_1030@121:0> = 0))
              input2: (<append_1030@121:0> = 0)
              begin InterpProver.interpolate_check(103961)[8]
                begin InterpProver.interpolate_simplify(103962)[9]
                  begin InterpProver.interpolate_quick(103988)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(103997)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(103998)[12]
                        begin CsisatInterface.interpolate_csisat_log(103999)[13]
                          input1: 0 = v_sep_append_1030_sep_121_sep_0
                          input2: 0 = v_sep_append_1030_sep_121_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(104000)[14]
                            csisat error: NelsonOppen: not a conjunction
                            
                          end CsisatInterface.interpolate_csisat_raw(104000)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(103999)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(103998)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(103997)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(103988)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(103962)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(103961)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(103960)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(103959)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(103958)[5] (0.001000 sec.)
        begin InterpProver.interpolate(104009)[5]
          begin InterpProver.interpolate_fresh(104010)[6]
            begin InterpProver.interpolate_log(104011)[7]
              input1: (((<<append_1030@121:2>@124:0> + (-1 * <append_1030@121:1>)) = 0) && (<append_1030@121:0> = 0))
              input2: (not ((<append_1030@121:0> <> 0) || (<<append_1030@121:2>@124:0> = <append_1030@121:1>)))
              begin InterpProver.interpolate_check(104012)[8]
                begin InterpProver.interpolate_simplify(104013)[9]
                  begin InterpProver.interpolate_quick(104066)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(104075)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(104076)[12]
                        begin CsisatInterface.interpolate_csisat_log(104077)[13]
                          input1: (0 = v_sep_append_1030_sep_121_sep_0 & v_sep_append_1030_sep_121_sep_1 = v_sep_append_1030_sep_121_sep_2_sep_124_sep_0)
                          input2: (not v_sep_append_1030_sep_121_sep_1 = v_sep_append_1030_sep_121_sep_2_sep_124_sep_0 & 0 = v_sep_append_1030_sep_121_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(104078)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(104078)[14] (0.000000 sec.)
                          output: v_sep_append_1030_sep_121_sep_1 = v_sep_append_1030_sep_121_sep_2_sep_124_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(104077)[13] (0.000000 sec.)
                        after simplification: v_sep_append_1030_sep_121_sep_1 = v_sep_append_1030_sep_121_sep_2_sep_124_sep_0
                        after dnf conversion: ((v_sep_append_1030_sep_121_sep_1 = v_sep_append_1030_sep_121_sep_2_sep_124_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(104076)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(104075)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(104066)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(104013)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(104012)[8] (0.001000 sec.)
              output: (<append_1030@121:1> = <<append_1030@121:2>@124:0>)
            end InterpProver.interpolate_log(104011)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(104010)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(104009)[5] (0.001000 sec.)
        output:
          P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,<<append_1030@121:2>@124:0>:int) =
          (<append_1030@121:1> = <<append_1030@121:2>@124:0>)
      end ApronInterface.convex_hull_interpolate(103921)[4] (0.002000 sec.)
      Horn clauses:
        P[<<rev_1033@111:1>@114:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:1>:int),
        (0 <> <f_k_main_u_1296@126:1>) |- bot
        
        P[<<rev_1033@111:1>@114:0>](<append_1030@121:0>:int,<append_1030@121:0>:int)|- P[<append_1030@121:1>](
        <append_1030@121:0>:int,<append_1030@121:1>:int)
        
        P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
        
        |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
      lower bounds:
        P[<rev_1033@111:0>](<rev_1033@111:0>:int) = true
        P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int) =
        ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int) = (<append_1030@121:0> = 0)
      upper bounds:
        P[<append_1030@121:1>](var367:int,var368:int) = true
      begin GenHcSolver.classify_pids(104916)[4]
        output:
          [<append_1030@121:1>]
      end GenHcSolver.classify_pids(104916)[4] (0.000000 sec.)
      lb:(<append_1030@121:0> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(104919)[4]
        lb:(<append_1030@121:0> = 0)
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(104923)[5]
          ts: (<append_1030@121:0> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(104923)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(104929)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(104929)[5] (0.000000 sec.)
        lb':(<append_1030@121:0> = 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(104932)[5]
          begin InterpProver.interpolate_fresh(104933)[6]
            begin InterpProver.interpolate_log(104934)[7]
              input1: (<append_1030@121:0> = 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(104935)[8]
                begin InterpProver.interpolate_simplify(104936)[9]
                  begin InterpProver.interpolate_quick(104956)[10]
                    
                  end InterpProver.interpolate_quick(104956)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(104936)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(104935)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(104934)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(104933)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(104932)[5] (0.000000 sec.)
        output:
          P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int) = true
      end ApronInterface.convex_hull_interpolate(104919)[4] (0.000000 sec.)
      Horn clauses:
        P[<<rev_1033@111:1>@114:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:1>:int),
        (0 <> <f_k_main_u_1296@126:1>) |- bot
        
        P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
        
        |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
      lower bounds:
        P[<rev_1033@111:0>](<rev_1033@111:0>:int) = true
        P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int) =
        ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
      upper bounds:
        P[<<rev_1033@111:1>@114:0>](var369:int,var370:int) = ((0 = var369) || (var369 <> var370))
      begin GenHcSolver.classify_pids(105705)[4]
        output:
          [<<rev_1033@111:1>@114:0>]
      end GenHcSolver.classify_pids(105705)[4] (0.000000 sec.)
      lb:((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
      nub:(not ((0 = <rev_1033@111:0>) || (<rev_1033@111:0> <> <<rev_1033@111:1>@114:0>)))
      begin ApronInterface.convex_hull_interpolate(105708)[4]
        lb:((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
        nub:(not ((0 = <rev_1033@111:0>) || (<rev_1033@111:0> <> <<rev_1033@111:1>@114:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(105716)[5]
          ts: ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
          
        end ExtFormula.Formula.case_analysis_boolean(105716)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(105735)[5]
          ts: ((0 <> <rev_1033@111:0>) && (<rev_1033@111:0> = <<rev_1033@111:1>@114:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(105735)[5] (0.000000 sec.)
        lb':((<<rev_1033@111:1>@114:0> = 0) && (<rev_1033@111:0> = 0))
        nub':((<<rev_1033@111:1>@114:0> + (-1 * <rev_1033@111:0>)) = 0)
        begin InterpProver.interpolate(105741)[5]
          begin InterpProver.interpolate_fresh(105742)[6]
            begin InterpProver.interpolate_log(105743)[7]
              input1: ((<<rev_1033@111:1>@114:0> = 0) && (<rev_1033@111:0> = 0))
              input2: ((<<rev_1033@111:1>@114:0> + (-1 * <rev_1033@111:0>)) = 0)
              begin InterpProver.interpolate_check(105744)[8]
                begin InterpProver.interpolate_simplify(105745)[9]
                  begin InterpProver.interpolate_quick(105772)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(105781)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(105782)[12]
                        begin CsisatInterface.interpolate_csisat_log(105783)[13]
                          input1: (0 = v_sep_rev_1033_sep_111_sep_0 & 0 = v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0)
                          input2: v_sep_rev_1033_sep_111_sep_0 = v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(105784)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(105784)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(105783)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(105782)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(105781)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(105772)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(105745)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(105744)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(105743)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(105742)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(105741)[5] (0.001000 sec.)
        begin InterpProver.interpolate(105794)[5]
          begin InterpProver.interpolate_fresh(105795)[6]
            begin InterpProver.interpolate_log(105796)[7]
              input1: ((<<rev_1033@111:1>@114:0> = 0) && (<rev_1033@111:0> = 0))
              input2: (not ((0 = <rev_1033@111:0>) || (<rev_1033@111:0> <> <<rev_1033@111:1>@114:0>)))
              begin InterpProver.interpolate_check(105797)[8]
                begin InterpProver.interpolate_simplify(105798)[9]
                  begin InterpProver.interpolate_quick(105845)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(105854)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(105855)[12]
                        begin CsisatInterface.interpolate_csisat_log(105856)[13]
                          input1: (0 = v_sep_rev_1033_sep_111_sep_0 & 0 = v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0)
                          input2: (not 0 = v_sep_rev_1033_sep_111_sep_0 & v_sep_rev_1033_sep_111_sep_0 = v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(105857)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(105857)[14] (0.000000 sec.)
                          output: 0 = v_sep_rev_1033_sep_111_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(105856)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_rev_1033_sep_111_sep_0
                        after dnf conversion: ((0 = v_sep_rev_1033_sep_111_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(105855)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(105854)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(105845)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(105798)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(105797)[8] (0.001000 sec.)
              output: (0 = <rev_1033@111:0>)
            end InterpProver.interpolate_log(105796)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(105795)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(105794)[5] (0.001000 sec.)
        output:
          P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int) = (0 = <rev_1033@111:0>)
      end ApronInterface.convex_hull_interpolate(105708)[4] (0.002000 sec.)
      Horn clauses:
        |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
      lower bounds:
        P[<rev_1033@111:0>](<rev_1033@111:0>:int) = true
      upper bounds:
        P[<rev_1033@111:0>](var371:int) = true
      begin GenHcSolver.classify_pids(106147)[4]
        output:
          [<rev_1033@111:0>]
      end GenHcSolver.classify_pids(106147)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(106150)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(106153)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(106153)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(106158)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(106158)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(106161)[5]
          begin InterpProver.interpolate_fresh(106162)[6]
            begin InterpProver.interpolate_log(106163)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(106164)[8]
                begin InterpProver.interpolate_simplify(106165)[9]
                  begin InterpProver.interpolate_quick(106179)[10]
                    
                  end InterpProver.interpolate_quick(106179)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(106165)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(106164)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(106163)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(106162)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(106161)[5] (0.000000 sec.)
        output:
          P[<rev_1033@111:0>](<rev_1033@111:0>:int) = true
      end ApronInterface.convex_hull_interpolate(106150)[4] (0.001000 sec.)
      begin HcSolver.check_validity(106236)[4]
        input:
          P[<fail_1301@129:0>](<fail_1301@129:0>:bool)|- bot
          
          P[<<rev_1033@111:1>@114:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:1>:int),
          P[<<append_1030@121:2>@124:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:0>:int,<f_k_main_u_1296@126:4>:int),
          ((<f_k_main_u_1296@126:4> <> (<f_k_main_u_1296@126:1> + <f_k_main_u_1296@126:0>)) && <fail_1301@129:0>)
          |- P[<fail_1301@129:0>](<fail_1301@129:0>:bool)
          
          P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int),
          ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
          |- P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,
                                            <<append_1030@121:2>@124:0>:int)
          
          P[<<rev_1033@111:1>@114:0>](<append_1030@121:0>:int,<append_1030@121:0>:int)|- P[<append_1030@121:1>](
          <append_1030@121:0>:int,<append_1030@121:1>:int)
          
          P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
          |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
          
          |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(106236)[4] (0.001999 sec.)
      solution:
        P[<fail_1301@129:0>](<fail_1301@129:0>:bool) = false
        P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,<<append_1030@121:2>@124:0>:int) =
        (<append_1030@121:1> = <<append_1030@121:2>@124:0>)
        P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int) = true
        P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int) = (0 = <rev_1033@111:0>)
        P[<rev_1033@111:0>](<rev_1033@111:0>:int) = true
    end GenHcSolver.solve(101235)[3] (0.024996 sec.)
    begin YhornInterface.solve(106596)[3]
      begin HcSolver.solve_ub(106597)[4]
        encoded:
          P[<fail_1301@129:0>](<fail_1301@129:0>:int)|- bot
          
          P[<<rev_1033@111:1>@114:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:1>:int),
          P[<<append_1030@121:2>@124:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:0>:int,<f_k_main_u_1296@126:4>:int),
          ((<f_k_main_u_1296@126:4> <> (<f_k_main_u_1296@126:1> + <f_k_main_u_1296@126:0>)) && (<fail_1301@129:0> = 1))
          |- P[<fail_1301@129:0>](<fail_1301@129:0>:int)
          
          P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int),
          ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
          |- P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,
                                            <<append_1030@121:2>@124:0>:int)
          
          P[<<rev_1033@111:1>@114:0>](<append_1030@121:0>:int,<append_1030@121:0>:int)|- P[<append_1030@121:1>](
          <append_1030@121:0>:int,<append_1030@121:1>:int)
          
          P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
          |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
          
          |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
        input to Yhorn:
          P[<fail_1301@129:0>](<fail_1301@129:0>:int)|- bot
          
          P[<<rev_1033@111:1>@114:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:1>:int),
          P[<<append_1030@121:2>@124:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:0>:int,<f_k_main_u_1296@126:4>:int),
          ((<f_k_main_u_1296@126:4> <> (<f_k_main_u_1296@126:1> + <f_k_main_u_1296@126:0>)) && (<fail_1301@129:0> = 1))
          |- P[<fail_1301@129:0>](<fail_1301@129:0>:int)
          
          P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int),
          ((<<append_1030@121:2>@124:0> = <append_1030@121:1>) && (<append_1030@121:0> = 0))
          |- P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,
                                            <<append_1030@121:2>@124:0>:int)
          
          P[<<rev_1033@111:1>@114:0>](<append_1030@121:0>:int,<append_1030@121:0>:int)|- P[<append_1030@121:1>](
          <append_1030@121:0>:int,<append_1030@121:1>:int)
          
          P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<<rev_1033@111:1>@114:0> = 0) && (<rev_1033@111:0> = 0))
          |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1301_sep_129_sep_0($1166)) -> 1=0.
(($1166-1=0) & ($1167-$1168-$1169<>0)) & (v_sep_append_1030_sep_121_sep_2_sep_124_sep_0($1168,$1169,$1167)) & (v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0($1168,$1168)) -> v_sep_fail_1301_sep_129_sep_0($1166).
(($1170=0) & ($1171-$1172=0)) & (v_sep_append_1030_sep_121_sep_1($1170,$1172)) -> v_sep_append_1030_sep_121_sep_2_sep_124_sep_0($1170,$1172,$1171).
(0=0) & (v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0($1170,$1170)) -> v_sep_append_1030_sep_121_sep_1($1170,$1172).
(($1173=0) & ($1174=0)) & (v_sep_rev_1033_sep_111_sep_0($1173)) -> v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0($1173,$1174).
0=0 -> v_sep_rev_1033_sep_111_sep_0($1173).


v_sep_append_1030_sep_121_sep_1: X
v_sep_append_1030_sep_121_sep_2_sep_124_sep_0: X
v_sep_fail_1301_sep_129_sep_0: X
v_sep_rev_1033_sep_111_sep_0: X
v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0: X
.........Split disj [20] 1.279805
Reconstrcut: 3 **)

v_sep_append_1030_sep_121_sep_1: X
v_sep_append_1030_sep_121_sep_2_sep_124_sep_0: X
v_sep_fail_1301_sep_129_sep_0: (X) | (X)
v_sep_rev_1033_sep_111_sep_0: X
v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0: X
.......
v_sep_append_1030_sep_121_sep_1: X
v_sep_append_1030_sep_121_sep_2_sep_124_sep_0: X
v_sep_fail_1301_sep_129_sep_0: (X) | (X)
v_sep_rev_1033_sep_111_sep_0: X
v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0: X
.......Split conj [22] 1.284804
(Reconstrcut: 8 **)
v_sep_append_1030_sep_121_sep_1: X
v_sep_append_1030_sep_121_sep_2_sep_124_sep_0: (X) & (X)
v_sep_fail_1301_sep_129_sep_0: (X) | (X)
v_sep_rev_1033_sep_111_sep_0: X
v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0: X
.........
v_sep_append_1030_sep_121_sep_1: X
v_sep_append_1030_sep_121_sep_2_sep_124_sep_0: (X) & (X)
v_sep_fail_1301_sep_129_sep_0: (X) | (X)
v_sep_rev_1033_sep_111_sep_0: X
v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0: X
.......
v_sep_append_1030_sep_121_sep_1: X
v_sep_append_1030_sep_121_sep_2_sep_124_sep_0: (X) & (X)
v_sep_fail_1301_sep_129_sep_0: (X) | (X)
v_sep_rev_1033_sep_111_sep_0: X
v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0: X
..........
v_sep_append_1030_sep_121_sep_1: X
v_sep_append_1030_sep_121_sep_2_sep_124_sep_0: (X) & (X)
v_sep_fail_1301_sep_129_sep_0: (X) | (X)
v_sep_rev_1033_sep_111_sep_0: X
v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0: X
...........(0=0) & (v_sep_fail_1301_sep_129_sep_0($1166)) -> 1=0.
(($1166-1=0) & ($1167-$1168-$1169<>0)) & (v_sep_append_1030_sep_121_sep_2_sep_124_sep_0($1168,$1169,$1167)) & (v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0($1168,$1168)) -> v_sep_fail_1301_sep_129_sep_0($1166).
(($1170=0) & ($1171-$1172=0)) & (v_sep_append_1030_sep_121_sep_1($1170,$1172)) -> v_sep_append_1030_sep_121_sep_2_sep_124_sep_0($1170,$1172,$1171).
(0=0) & (v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0($1170,$1170)) -> v_sep_append_1030_sep_121_sep_1($1170,$1172).
(($1173=0) & ($1174=0)) & (v_sep_rev_1033_sep_111_sep_0($1173)) -> v_sep_rev_1033_sep_111_sep_1_sep_114_sep_0($1173,$1174).
0=0 -> v_sep_rev_1033_sep_111_sep_0($1173).

          |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
        solution:
          P[<append_1030@121:1>]($1190:int,$1192:int) = true
          P[<<append_1030@121:2>@124:0>]($1178:int,$1180:int,$1182:int) = (($1180 + $1178) = $1182)
          P[<fail_1301@129:0>]($1175:bool) = false
          P[<rev_1033@111:0>]($1195:int) = true
          P[<<rev_1033@111:1>@114:0>]($1185:int,$1187:int) = true
        
      end HcSolver.solve_ub(106597)[4] (0.035995 sec.)
      begin HcSolver.check_validity(106777)[4]
        input:
          P[<fail_1301@129:0>](<fail_1301@129:0>:bool)|- bot
          
          P[<<rev_1033@111:1>@114:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:1>:int),
          P[<<append_1030@121:2>@124:0>](<f_k_main_u_1296@126:1>:int,<f_k_main_u_1296@126:0>:int,<f_k_main_u_1296@126:4>:int),
          ((<f_k_main_u_1296@126:4> <> (<f_k_main_u_1296@126:1> + <f_k_main_u_1296@126:0>)) && <fail_1301@129:0>)
          |- P[<fail_1301@129:0>](<fail_1301@129:0>:bool)
          
          P[<append_1030@121:1>](<append_1030@121:0>:int,<append_1030@121:1>:int),
          ((<append_1030@121:0> = 0) && (<<append_1030@121:2>@124:0> = <append_1030@121:1>))
          |- P[<<append_1030@121:2>@124:0>](<append_1030@121:0>:int,<append_1030@121:1>:int,
                                            <<append_1030@121:2>@124:0>:int)
          
          P[<<rev_1033@111:1>@114:0>](<append_1030@121:0>:int,<append_1030@121:0>:int)|- P[<append_1030@121:1>](
          <append_1030@121:0>:int,<append_1030@121:1>:int)
          
          P[<rev_1033@111:0>](<rev_1033@111:0>:int), ((<rev_1033@111:0> = 0) && (<<rev_1033@111:1>@114:0> = 0))
          |- P[<<rev_1033@111:1>@114:0>](<rev_1033@111:0>:int,<<rev_1033@111:1>@114:0>:int)
          
          |- P[<rev_1033@111:0>](<rev_1033@111:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(106777)[4] (0.002000 sec.)
      solution:
        P[<append_1030@121:1>]($1190:int,$1192:int) = true
        P[<<append_1030@121:2>@124:0>]($1178:int,$1180:int,$1182:int) = (($1180 + $1178) = $1182)
        P[<fail_1301@129:0>]($1175:bool) = false
        P[<rev_1033@111:0>]($1195:int) = true
        P[<<rev_1033@111:1>@114:0>]($1185:int,$1187:int) = true
    end YhornInterface.solve(106596)[3] (0.038995 sec.)
    
  end RefTypeInfer.infer_etrs(94522)[2] (0.250962 sec.)
  refinement types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:{v2:int | (0 = v1)} -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    k_main_u_1218: v1:int -> v2:int -> (v3:unit -> X) -> v5:unit -> X
    append_1030: v1:int -> v2:int -> (v3:{v3:int | (v2 = v3)} -> X) -> X
    f_k_main_u_1296: v1:int -> v2:int -> v3:unit -> (v4:unit -> X) -> v6:int -> X
    fail_1301: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1300: var385:int -> var384:int -> var383:unit -> X
    f_append_1294: var391:int -> var390:int -> (var389:int -> X) -> var387:int -> X
    f_rev_1295: var396:int -> (var395:int -> X) -> var393:int -> X
    fail_1302: var400:bool -> (var399:unit -> X) -> X
  abstraction types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:int[v2 -> (0 = v1)] -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    k_main_u_1218: v1:int -> v2:int -> (v3:unit -> X) -> v5:unit -> X
    append_1030: v1:int -> v2:int -> (v3:int[v3 -> (v2 = v3)] -> X) -> X
    f_k_main_u_1296: v1:int -> v2:int -> v3:unit -> (v4:unit -> X) -> v6:int -> X
    fail_1301: v1:bool -> (v2:unit -> X) -> X
    f_1300: var385:int -> var384:int -> var383:unit -> X
    f_append_1294: var391:int -> var390:int -> (var389:int -> X) -> var387:int -> X
    f_rev_1295: var396:int -> (var395:int -> X) -> var393:int -> X
    fail_1302: var400:bool -> (var399:unit -> X) -> X
  
end AbsTypeInfer.refine(94521)[1] (0.253962 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1293
  main_1293 -> (rand_int f_1298)
  append_1030 x_1031 y_1032 k_append_1105 when (x_1031 = 0) -> (k_append_1105 y_1032)
  append_1030 x_1031 y_1032 k_append_1105 when (not (x_1031 = 0)) ->
      (append_1030 (x_1031 - 1) y_1032 (f_append_1294 x_1031 y_1032 k_append_1105))
  f_1298 x_1251 -> (rand_int (f_1299 x_1251))
  f_1299 x_1251 x_1264 -> (main_1035 x_1251 x_1264 (f_1300 x_1251 x_1264))
  f_1300 x_1251 x_1264 x_1248 -> end
  f_append_1294 x_1031 y_1032 k_append_1105 x_1109 -> (k_append_1105 (1 + x_1109))
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (x_1222 = (n_1036 + m_1037)) -> (k_main_1191 ())
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (not (x_1222 = (n_1036 + m_1037))) ->
      (fail_1301 true k_main_1191)
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (x_1197 = n_1036) -> (k_main_u_1218 m_1037 n_1036 k_main_1191 ())
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (not (x_1197 = n_1036)) ->
      (fail_1302 true (k_main_u_1218 m_1037 n_1036 k_main_1191))
  f_rev_1295 n_1034 k_rev_1138 x_1163 -> (append_1030 x_1163 1 k_rev_1138)
  fail_1301 b k -> {fail} => (k ())
  fail_1302 b k -> {fail} => (k ())
  k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 ->
      (append_1030 n_1036 m_1037 (f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191))
  main_1035 n_1036 m_1037 k_main_1191 -> (rev_1033 n_1036 (f_main_1297 m_1037 n_1036 k_main_1191))
  rev_1033 n_1034 k_rev_1138 when (n_1034 = 0) -> (k_rev_1138 0)
  rev_1033 n_1034 k_rev_1138 when (not (n_1034 = 0)) -> (rev_1033 (n_1034 - 1) (f_rev_1295 n_1034 k_rev_1138))
Types:
  main_1293 : X
  append_1030 : (x_1:int -> x_2:int[x_1 <= -2; x_1 <= 0; x_2 = 1] -> (x_4:int[x_2 = x_4; x_1 = 0 && x_4 = 1] -> X) -> X)
  fail_1301 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1302 : (x_1:bool[x_1] -> (unit -> X) -> X)
  rev_1033 : (x_1:int -> (x_3:int[x_1 = 0; x_3 <= 0; x_1 = x_3] -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Error trace::
  main_1293 ... --> 
  f_1298 ... --> 
  f_1299 ... --> 
  main_1035 ... --> 
  rev_1033 [2/2] ... --> 
  rev_1033 [1/2] ... --> 
  f_rev_1295 ... --> 
  append_1030 [1/2] ... --> 
  f_main_1297 [1/2] ... --> 
  k_main_u_1218 ... --> 
  append_1030 [2/2] ... --> 
  append_1030 [1/2] ... --> 
  f_append_1294 ... --> 
  f_k_main_u_1296 [2/2] ... --> 
  fail_1301 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0; 0; 1; 0

(4-3) Checking counter-example ... DONE!

(4-4) Discovering predicates ... 
begin AbsTypeInfer.refine(110245)[1]
  program:
    main_1293  | true = ((Random.int 0) f_1298)
    append_1030 x_1031 y_1032 k_append_1105 | (x_1031 = 0) = (k_append_1105 y_1032)
    append_1030 x_1031 y_1032 k_append_1105 | (not (x_1031 = 0)) = (append_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    y_1032
                                                                    (
                                                                    f_append_1294 x_1031
                                                                    y_1032
                                                                    k_append_1105))
    f_1298 x_1251 | true = ((Random.int 0) (f_1299 x_1251))
    f_1299 x_1251 x_1264 | true = (main_1035 x_1251
                                             x_1264
                                             (f_1300 x_1251
                                                     x_1264))
    f_1300 x_1251 x_1264 x_1248 | true = end
    f_append_1294 x_1031 y_1032 k_append_1105 x_1109 | true = (k_append_1105 (
                                                                    1 + x_1109))
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (x_1222 = (n_1036 + m_1037)) = (
    k_main_1191 ())
    f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 | (not (x_1222 = (n_1036 + m_1037))) = (
    fail_1301 true
              k_main_1191)
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (x_1197 = n_1036) = (
    k_main_u_1218 m_1037
                  n_1036
                  k_main_1191
                  ())
    f_main_1297 m_1037 n_1036 k_main_1191 x_1197 | (not (x_1197 = n_1036)) = (
    fail_1302 true
              (k_main_u_1218 m_1037
                             n_1036
                             k_main_1191))
    f_rev_1295 n_1034 k_rev_1138 x_1163 | true = (append_1030 x_1163
                                                              1
                                                              k_rev_1138)
    fail_1301 b k | true = (fail ())
    fail_1302 b k | true = (fail ())
    k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 | true = (append_1030
                                                               n_1036
                                                               m_1037
                                                               (f_k_main_u_1296 m_1037
                                                                    n_1036
                                                                    x_1194
                                                                    k_main_1191))
    main_1035 n_1036 m_1037 k_main_1191 | true = (rev_1033 n_1036
                                                           (f_main_1297 m_1037
                                                                    n_1036
                                                                    k_main_1191))
    rev_1033 n_1034 k_rev_1138 | (n_1034 = 0) = (k_rev_1138 0)
    rev_1033 n_1034 k_rev_1138 | (not (n_1034 = 0)) = (rev_1033 (n_1034 - 1)
                                                                (f_rev_1295 n_1034
                                                                    k_rev_1138))
    main_1293:X
    append_1030:int -> int -> (int -> X) -> X
    f_1298:int -> X
    f_1299:int -> int -> X
    f_1300:int -> int -> unit -> X
    f_append_1294:int -> int -> (int -> X) -> int -> X
    f_k_main_u_1296:int -> int -> unit -> (unit -> X) -> int -> X
    f_main_1297:int -> int -> (unit -> X) -> int -> X
    f_rev_1295:int -> (int -> X) -> int -> X
    fail_1301:bool -> (unit -> X) -> X
    fail_1302:bool -> (unit -> X) -> X
    k_main_u_1218:int -> int -> (unit -> X) -> unit -> X
    main_1035:int -> int -> (unit -> X) -> X
    rev_1033:int -> (int -> X) -> X
  inlined functions: f_1298,f_1299,f_1300,f_append_1294,f_k_main_u_1296,f_main_1297,f_rev_1295,k_main_u_1218,main_1035
  counterexample: 0:0:0:0:1:0:0:0:0:0:1:0:0:1:0
  error traces:
    [true.nop(<f_1298@135:0> = var401)
     [true.nop((<f_1299@138:0> = <f_1298@135:0>) && (<f_1299@138:1> = var402))
      [true.((<main_1035@140:0> = <f_1299@138:0>) && (<main_1035@140:1> = <f_1299@138:1>))
       [true.(<rev_1033@142:0> = <main_1035@140:0>)
        [(not (<rev_1033@142:0> = 0)).(<rev_1033@145:0> = (<rev_1033@142:0> - 1))
         [(<rev_1033@145:0> = 0).(<<rev_1033@145:1>@148:0> = 0)
          [true.((<f_rev_1295@150:0> = <rev_1033@142:0>) && (<f_rev_1295@150:2> = <<rev_1033@145:1>@148:0>))
           [true.((<append_1030@152:0> = <f_rev_1295@150:2>) && (<append_1030@152:1> = 1))
            [(<append_1030@152:0> = 0).(<<append_1030@152:2>@155:0> = <append_1030@152:1>)
             [true.(<<f_rev_1295@150:1>@157:0> = <<append_1030@152:2>@155:0>)
              [true.(<<rev_1033@142:1>@159:0> = <<f_rev_1295@150:1>@157:0>)
               [true.
                ((<f_main_1297@161:0> = <main_1035@140:1>) &&
                 ((<f_main_1297@161:1> = <main_1035@140:0>) && (<f_main_1297@161:3> = <<rev_1033@142:1>@159:0>)))
                [(<f_main_1297@161:3> = <f_main_1297@161:1>).
                 ((<k_main_u_1218@164:0> = <f_main_1297@161:0>) &&
                  ((<k_main_u_1218@164:1> = <f_main_1297@161:1>) && (<k_main_u_1218@164:3> = ())))
                 [true.((<append_1030@166:0> = <k_main_u_1218@164:1>) && (<append_1030@166:1> = <k_main_u_1218@164:0>))
                  [(not (<append_1030@166:0> = 0)).
                   ((<append_1030@169:0> = (<append_1030@166:0> - 1)) && (<append_1030@169:1> = <append_1030@166:1>))
                   [(<append_1030@169:0> = 0).(<<append_1030@169:2>@172:0> = <append_1030@169:1>)
                    [true.
                     ((<f_append_1294@174:0> = <append_1030@166:0>) &&
                      ((<f_append_1294@174:1> = <append_1030@166:1>) &&
                       (<f_append_1294@174:3> = <<append_1030@169:2>@172:0>)))
                     [true.(<<f_append_1294@174:2>@176:0> = (1 + <f_append_1294@174:3>))
                      [true.(<<append_1030@166:2>@178:0> = <<f_append_1294@174:2>@176:0>)
                       [true.
                        ((<f_k_main_u_1296@180:0> = <k_main_u_1218@164:0>) &&
                         ((<f_k_main_u_1296@180:1> = <k_main_u_1218@164:1>) &&
                          ((<f_k_main_u_1296@180:2> = <k_main_u_1218@164:3>) &&
                           (<f_k_main_u_1296@180:4> = <<append_1030@166:2>@178:0>))))
                        [(not (<f_k_main_u_1296@180:4> = (<f_k_main_u_1296@180:1> + <f_k_main_u_1296@180:0>))).
                         (<fail_1301@183:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(110246)[2]
    horn clauses:
      P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
      
      P[<f_k_main_u_1296@180:4>](<f_k_main_u_1296@180:0>:int,<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:2>:unit,<f_k_main_u_1296@180:4>:int),
      ((<f_k_main_u_1296@180:4> <> (<f_k_main_u_1296@180:1> + <f_k_main_u_1296@180:0>)) && <fail_1301@183:0>)
      |- P[<fail_1301@183:0>](<fail_1301@183:0>:bool)
      
      P[<k_main_u_1218@164:3>](<f_k_main_u_1296@180:0>:int,<f_k_main_u_1296@180:1>:int,<k_main_u_1218@164:3>:unit),
      P[<<append_1030@166:2>@178:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:0>:int,<f_k_main_u_1296@180:4>:int)|- P[<f_k_main_u_1296@180:4>](
      <f_k_main_u_1296@180:0>:int,<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:2>:unit,
      <f_k_main_u_1296@180:4>:int)
      
      P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int),
      P[<<f_append_1294@174:2>@176:0>](<append_1030@166:0>:int,<append_1030@166:1>:int,<<append_1030@166:2>@178:0>:int),
      (<append_1030@166:0> <> 0)
      |- P[<<append_1030@166:2>@178:0>](<append_1030@166:0>:int,<append_1030@166:1>:int,
                                        <<append_1030@166:2>@178:0>:int)
      
      P[<f_append_1294@174:3>](<f_append_1294@174:0>:int,<f_append_1294@174:1>:int,(
                               -1 + <<f_append_1294@174:2>@176:0>):int)|- P[<<f_append_1294@174:2>@176:0>](
      <f_append_1294@174:0>:int,<f_append_1294@174:1>:int,<<f_append_1294@174:2>@176:0>:int)
      
      P[<append_1030@166:1>](<f_append_1294@174:0>:int,<f_append_1294@174:1>:int),
      P[<<append_1030@169:2>@172:0>]((-1 + <f_append_1294@174:0>):int,<f_append_1294@174:1>:int,<f_append_1294@174:3>:int),
      (<f_append_1294@174:0> <> 0)
      |- P[<f_append_1294@174:3>](<f_append_1294@174:0>:int,<f_append_1294@174:1>:int,
                                  <f_append_1294@174:3>:int)
      
      P[<append_1030@169:1>](<append_1030@169:0>:int,<append_1030@169:1>:int),
      ((<append_1030@169:0> = 0) && (<<append_1030@169:2>@172:0> = <append_1030@169:1>))
      |- P[<<append_1030@169:2>@172:0>](<append_1030@169:0>:int,<append_1030@169:1>:int,
                                        <<append_1030@169:2>@172:0>:int)
      
      P[<append_1030@166:1>]((1 + <append_1030@169:0>):int,<append_1030@169:1>:int), (
      (1 + <append_1030@169:0>) <> 0) |- P[<append_1030@169:1>](<append_1030@169:0>:int,
                                                                <append_1030@169:1>:int)
      
      P[<k_main_u_1218@164:3>](<append_1030@166:1>:int,<append_1030@166:0>:int,<k_main_u_1218@164:3>:unit)|- P[<append_1030@166:1>](
      <append_1030@166:0>:int,<append_1030@166:1>:int)
      
      P[<f_main_1297@161:3>](<k_main_u_1218@164:0>:int,<k_main_u_1218@164:1>:int,<k_main_u_1218@164:1>:int)|- P[<k_main_u_1218@164:3>](
      <k_main_u_1218@164:0>:int,<k_main_u_1218@164:1>:int,<k_main_u_1218@164:3>:unit)
      
      P[<main_1035@140:1>](<f_main_1297@161:1>:int,<f_main_1297@161:0>:int),
      P[<<rev_1033@142:1>@159:0>](<f_main_1297@161:1>:int,<f_main_1297@161:3>:int)|- P[<f_main_1297@161:3>](
      <f_main_1297@161:0>:int,<f_main_1297@161:1>:int,<f_main_1297@161:3>:int)
      
      P[<rev_1033@142:0>](<rev_1033@142:0>:int),
      P[<<f_rev_1295@150:1>@157:0>](<rev_1033@142:0>:int,<<rev_1033@142:1>@159:0>:int), (
      <rev_1033@142:0> <> 0) |- P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,
                                                            <<rev_1033@142:1>@159:0>:int)
      
      P[<f_rev_1295@150:2>](<f_rev_1295@150:0>:int,<append_1030@152:0>:int),
      P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,1:int,<<f_rev_1295@150:1>@157:0>:int)|- P[<<f_rev_1295@150:1>@157:0>](
      <f_rev_1295@150:0>:int,<<f_rev_1295@150:1>@157:0>:int)
      
      P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int),
      ((<append_1030@152:0> = 0) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>))
      |- P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,
                                        <<append_1030@152:2>@155:0>:int)
      
      P[<f_rev_1295@150:2>](<f_rev_1295@150:0>:int,<append_1030@152:0>:int), (
      <append_1030@152:1> = 1) |- P[<append_1030@152:1>](<append_1030@152:0>:int,
                                                         <append_1030@152:1>:int)
      
      P[<rev_1033@142:0>](<f_rev_1295@150:0>:int),
      P[<<rev_1033@145:1>@148:0>]((-1 + <f_rev_1295@150:0>):int,<f_rev_1295@150:2>:int), (
      <f_rev_1295@150:0> <> 0) |- P[<f_rev_1295@150:2>](<f_rev_1295@150:0>:int,
                                                        <f_rev_1295@150:2>:int)
      
      P[<rev_1033@145:0>](<rev_1033@145:0>:int), ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
      |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
      
      P[<rev_1033@142:0>]((1 + <rev_1033@145:0>):int), ((1 + <rev_1033@145:0>) <> 0)
      |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
      
      P[<main_1035@140:1>](<rev_1033@142:0>:int,<main_1035@140:1>:int)|- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
      
      P[<f_1299@138:1>](<main_1035@140:0>:int,<main_1035@140:1>:int)|- P[<main_1035@140:1>](
      <main_1035@140:0>:int,<main_1035@140:1>:int)
      
      P[<f_1298@135:0>](<f_1299@138:0>:int)|- P[<f_1299@138:1>](<f_1299@138:0>:int,
                                                                <f_1299@138:1>:int)
      
      |- P[<f_1298@135:0>](<f_1298@135:0>:int)
    call trees:
      <main_1293@132>
        <f_1298@135>
          <f_1299@138>
            <main_1035@140>
              <rev_1033@142>
                <rev_1033@145>
                </<rev_1033@145:1>@148>
                <f_rev_1295@150>
                  <append_1030@152>
                  </<append_1030@152:2>@155>
                </<f_rev_1295@150:1>@157>
              </<rev_1033@142:1>@159>
              <f_main_1297@161>
                <k_main_u_1218@164>
                  <append_1030@166>
                    <append_1030@169>
                    </<append_1030@169:2>@172>
                    <f_append_1294@174>
                    </<f_append_1294@174:2>@176>
                  </<append_1030@166:2>@178>
                  <f_k_main_u_1296@180>
                    <fail_1301@183>
    inlined horn clauses:
      P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
      
      P[<<rev_1033@142:1>@159:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:1>:int),
      P[<<append_1030@166:2>@178:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:0>:int,<f_k_main_u_1296@180:4>:int),
      ((<f_k_main_u_1296@180:4> <> (<f_k_main_u_1296@180:1> + <f_k_main_u_1296@180:0>)) && <fail_1301@183:0>)
      |- P[<fail_1301@183:0>](<fail_1301@183:0>:bool)
      
      P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int),
      P[<<append_1030@169:2>@172:0>]((-1 + <append_1030@166:0>):int,<append_1030@166:1>:int,(
                                     -1 + <<append_1030@166:2>@178:0>):int), (
      <append_1030@166:0> <> 0)
      |- P[<<append_1030@166:2>@178:0>](<append_1030@166:0>:int,<append_1030@166:1>:int,
                                        <<append_1030@166:2>@178:0>:int)
      
      P[<append_1030@169:1>](<append_1030@169:0>:int,<append_1030@169:1>:int),
      ((<append_1030@169:0> = 0) && (<<append_1030@169:2>@172:0> = <append_1030@169:1>))
      |- P[<<append_1030@169:2>@172:0>](<append_1030@169:0>:int,<append_1030@169:1>:int,
                                        <<append_1030@169:2>@172:0>:int)
      
      P[<append_1030@166:1>]((1 + <append_1030@169:0>):int,<append_1030@169:1>:int), (
      (1 + <append_1030@169:0>) <> 0) |- P[<append_1030@169:1>](<append_1030@169:0>:int,
                                                                <append_1030@169:1>:int)
      
      P[<<rev_1033@142:1>@159:0>](<append_1030@166:0>:int,<append_1030@166:0>:int)|- P[<append_1030@166:1>](
      <append_1030@166:0>:int,<append_1030@166:1>:int)
      
      P[<rev_1033@142:0>](<rev_1033@142:0>:int),
      P[<<rev_1033@145:1>@148:0>]((-1 + <rev_1033@142:0>):int,var403:int),
      P[<<append_1030@152:2>@155:0>](var403:int,1:int,<<rev_1033@142:1>@159:0>:int), (
      <rev_1033@142:0> <> 0) |- P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,
                                                            <<rev_1033@142:1>@159:0>:int)
      
      P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int),
      ((<append_1030@152:0> = 0) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>))
      |- P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,
                                        <<append_1030@152:2>@155:0>:int)
      
      P[<rev_1033@142:0>](<f_rev_1295@150:0>:int),
      P[<<rev_1033@145:1>@148:0>]((-1 + <f_rev_1295@150:0>):int,<append_1030@152:0>:int),
      ((<append_1030@152:1> = 1) && (<f_rev_1295@150:0> <> 0))
      |- P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int)
      
      P[<rev_1033@145:0>](<rev_1033@145:0>:int), ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
      |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
      
      P[<rev_1033@142:0>]((1 + <rev_1033@145:0>):int), ((1 + <rev_1033@145:0>) <> 0)
      |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
      
      |- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
    begin ParamSubstInfer.infer(113035)[3]
      
    end ParamSubstInfer.infer(113035)[3] (0.349947 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(113037)[3]
      
    end RefTypeInfer.elim_coeffs(113037)[3] (0.002999 sec.)
    begin GenHcSolver.solve(113510)[3]
      Horn clauses:
        P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
        
        P[<<rev_1033@142:1>@159:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:1>:int),
        P[<<append_1030@166:2>@178:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:0>:int,<f_k_main_u_1296@180:4>:int),
        ((<f_k_main_u_1296@180:4> <> (<f_k_main_u_1296@180:1> + <f_k_main_u_1296@180:0>)) && <fail_1301@183:0>)
        |- P[<fail_1301@183:0>](<fail_1301@183:0>:bool)
        
        P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int),
        P[<<append_1030@169:2>@172:0>]((-1 + <append_1030@166:0>):int,<append_1030@166:1>:int,(
                                       -1 + <<append_1030@166:2>@178:0>):int), (
        <append_1030@166:0> <> 0)
        |- P[<<append_1030@166:2>@178:0>](<append_1030@166:0>:int,<append_1030@166:1>:int,
                                          <<append_1030@166:2>@178:0>:int)
        
        P[<append_1030@169:1>](<append_1030@169:0>:int,<append_1030@169:1>:int),
        ((<append_1030@169:0> = 0) && (<<append_1030@169:2>@172:0> = <append_1030@169:1>))
        |- P[<<append_1030@169:2>@172:0>](<append_1030@169:0>:int,<append_1030@169:1>:int,
                                          <<append_1030@169:2>@172:0>:int)
        
        P[<append_1030@166:1>]((1 + <append_1030@169:0>):int,<append_1030@169:1>:int), (
        (1 + <append_1030@169:0>) <> 0) |- P[<append_1030@169:1>](<append_1030@169:0>:int,
                                                                  <append_1030@169:1>:int)
        
        P[<<rev_1033@142:1>@159:0>](<append_1030@166:0>:int,<append_1030@166:0>:int)|- P[<append_1030@166:1>](
        <append_1030@166:0>:int,<append_1030@166:1>:int)
        
        P[<rev_1033@142:0>](<rev_1033@142:0>:int),
        P[<<rev_1033@145:1>@148:0>]((-1 + <rev_1033@142:0>):int,var403:int),
        P[<<append_1030@152:2>@155:0>](var403:int,1:int,<<rev_1033@142:1>@159:0>:int), (
        <rev_1033@142:0> <> 0) |- P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,
                                                              <<rev_1033@142:1>@159:0>:int)
        
        P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int),
        ((<append_1030@152:0> = 0) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>))
        |- P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,
                                          <<append_1030@152:2>@155:0>:int)
        
        P[<rev_1033@142:0>](<f_rev_1295@150:0>:int),
        P[<<rev_1033@145:1>@148:0>]((-1 + <f_rev_1295@150:0>):int,<append_1030@152:0>:int),
        ((<append_1030@152:1> = 1) && (<f_rev_1295@150:0> <> 0))
        |- P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int)
        
        P[<rev_1033@145:0>](<rev_1033@145:0>:int), ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
        
        P[<rev_1033@142:0>]((1 + <rev_1033@145:0>):int), ((1 + <rev_1033@145:0>) <> 0)
        |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
        
        |- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
      lower bounds:
        P[<rev_1033@142:0>](<rev_1033@142:0>:int) = true
        P[<rev_1033@145:0>](<rev_1033@145:0>:int) = ((1 + <rev_1033@145:0>) <> 0)
        P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) =
        ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int) =
        ((<append_1030@152:0> = 0) && (<append_1030@152:1> = 1))
        P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,<<append_1030@152:2>@155:0>:int) =
        ((<append_1030@152:0> = 0) &&
         ((<append_1030@152:1> = 1) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>)))
        P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,<<rev_1033@142:1>@159:0>:int) =
        ((<<rev_1033@142:1>@159:0> = 1) && (<rev_1033@142:0> = 1))
        P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = (<append_1030@166:0> = 1)
        P[<append_1030@169:1>](<append_1030@169:0>:int,<append_1030@169:1>:int) = (<append_1030@169:0> = 0)
        P[<<append_1030@169:2>@172:0>](<append_1030@169:0>:int,<append_1030@169:1>:int,<<append_1030@169:2>@172:0>:int) =
        ((<append_1030@169:0> = 0) && (<<append_1030@169:2>@172:0> = <append_1030@169:1>))
        P[<<append_1030@166:2>@178:0>](<append_1030@166:0>:int,<append_1030@166:1>:int,<<append_1030@166:2>@178:0>:int) =
        ((<append_1030@166:0> = 1) && (<<append_1030@166:2>@178:0> = (1 + <append_1030@166:1>)))
        P[<fail_1301@183:0>](<fail_1301@183:0>:bool) = false
      upper bounds:
        P[<<append_1030@166:2>@178:0>](var415:int,var416:int,var417:int) = ((var415 <> 1) || (var417 = (1 + var416)))
        P[<<append_1030@169:2>@172:0>](var410:int,var411:int,var412:int) = ((var410 <> 0) || (var412 = var411))
        P[<<append_1030@152:2>@155:0>](var405:int,var406:int,var407:int) = true
      begin GenHcSolver.classify_pids(121838)[4]
        output:
          [<<append_1030@152:2>@155:0>;<<append_1030@169:2>@172:0>;<<append_1030@166:2>@178:0>]
      end GenHcSolver.classify_pids(121838)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(121947)[4]
        lb:(((<append_1030@152:0> = 0) &&
             ((<append_1030@152:1> = 1) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>))) ||
            (((<append_1030@152:0> = 0) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>)) ||
             ((<append_1030@152:0> = 1) && (<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)))))
        nub:((not ((<append_1030@152:0> <> 0) || (<<append_1030@152:2>@155:0> = <append_1030@152:1>))) ||
             (not ((<append_1030@152:0> <> 1) || (<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)))))
        lb':(((<append_1030@152:0> = 0) &&
              ((<append_1030@152:1> = 1) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>))) ||
             (((<append_1030@152:0> = 0) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>)) ||
              ((<append_1030@152:0> = 1) && (<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)))))
        nub':((not ((<append_1030@152:0> <> 0) || (<<append_1030@152:2>@155:0> = <append_1030@152:1>))) ||
              (not ((<append_1030@152:0> <> 1) || (<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)))))
        begin InterpProver.interpolate(121948)[5]
          begin InterpProver.interpolate_fresh(121949)[6]
            begin InterpProver.interpolate_log(121950)[7]
              input1: (((<append_1030@152:0> = 0) &&
                        ((<append_1030@152:1> = 1) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>))) ||
                       (((<append_1030@152:0> = 0) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>)) ||
                        ((<append_1030@152:0> = 1) && (<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)))))
              input2: ((not ((<append_1030@152:0> <> 0) || (<<append_1030@152:2>@155:0> = <append_1030@152:1>))) ||
                       (not ((<append_1030@152:0> <> 1) || (<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)))))
              begin InterpProver.interpolate_check(121951)[8]
                begin InterpProver.interpolate_simplify(121952)[9]
                  begin InterpProver.interpolate_quick(122115)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(122124)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(122125)[12]
                        begin CsisatInterface.interpolate_csisat_log(122126)[13]
                          input1: ((0 = v_sep_append_1030_sep_152_sep_0 & 1 = v_sep_append_1030_sep_152_sep_1 & v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0) | (0 = v_sep_append_1030_sep_152_sep_0 & v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0) | (1 = v_sep_append_1030_sep_152_sep_0 & v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (1 + v_sep_append_1030_sep_152_sep_1)))
                          input2: ((not v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 & 0 = v_sep_append_1030_sep_152_sep_0) | (not v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (1 + v_sep_append_1030_sep_152_sep_1) & 1 = v_sep_append_1030_sep_152_sep_0))
                          begin CsisatInterface.interpolate_csisat_raw(122127)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(122127)[14] (0.002000 sec.)
                          output: (((((not 0 = v_sep_append_1030_sep_152_sep_0 | not 1 = v_sep_append_1030_sep_152_sep_0) & 0 = v_sep_append_1030_sep_152_sep_0) | v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (1 + v_sep_append_1030_sep_152_sep_1)) & (((not 0 = v_sep_append_1030_sep_152_sep_0 | not 1 = v_sep_append_1030_sep_152_sep_0 | not v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (1 + v_sep_append_1030_sep_152_sep_1)) & 1 = v_sep_append_1030_sep_152_sep_0) | v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0)) | ((((not 1 = v_sep_append_1030_sep_152_sep_0 | not v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0) & v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0) | not 0 = v_sep_append_1030_sep_152_sep_0) & 0 = v_sep_append_1030_sep_152_sep_0))
                          
                        end CsisatInterface.interpolate_csisat_log(122126)[13] (0.002000 sec.)
                        after simplification: (((((not 0 = v_sep_append_1030_sep_152_sep_0 | not 1 = v_sep_append_1030_sep_152_sep_0) & 0 = v_sep_append_1030_sep_152_sep_0) | v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (1 + v_sep_append_1030_sep_152_sep_1)) & (((not 0 = v_sep_append_1030_sep_152_sep_0 | not 1 = v_sep_append_1030_sep_152_sep_0 | not v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (1 + v_sep_append_1030_sep_152_sep_1)) & 1 = v_sep_append_1030_sep_152_sep_0) | v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0)) | ((((not 1 = v_sep_append_1030_sep_152_sep_0 | not v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0) & v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0) | not 0 = v_sep_append_1030_sep_152_sep_0) & 0 = v_sep_append_1030_sep_152_sep_0))
                        after dnf conversion: ((v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (1 + v_sep_append_1030_sep_152_sep_1) & v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0) | (v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (1 + v_sep_append_1030_sep_152_sep_1) & not 0 = v_sep_append_1030_sep_152_sep_0 & 1 = v_sep_append_1030_sep_152_sep_0) | (v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (1 + v_sep_append_1030_sep_152_sep_1) & not 1 = v_sep_append_1030_sep_152_sep_0 & 1 = v_sep_append_1030_sep_152_sep_0) | (v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (1 + v_sep_append_1030_sep_152_sep_1) & not v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (1 + v_sep_append_1030_sep_152_sep_1) & 1 = v_sep_append_1030_sep_152_sep_0) | (not 0 = v_sep_append_1030_sep_152_sep_0 & 0 = v_sep_append_1030_sep_152_sep_0 & v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0) | (not 0 = v_sep_append_1030_sep_152_sep_0 & 0 = v_sep_append_1030_sep_152_sep_0 & not 0 = v_sep_append_1030_sep_152_sep_0 & 1 = v_sep_append_1030_sep_152_sep_0) | (not 0 = v_sep_append_1030_sep_152_sep_0 & 0 = v_sep_append_1030_sep_152_sep_0 & not 1 = v_sep_append_1030_sep_152_sep_0 & 1 = v_sep_append_1030_sep_152_sep_0) | (not 0 = v_sep_append_1030_sep_152_sep_0 & 0 = v_sep_append_1030_sep_152_sep_0 & not v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (1 + v_sep_append_1030_sep_152_sep_1) & 1 = v_sep_append_1030_sep_152_sep_0) | (not 1 = v_sep_append_1030_sep_152_sep_0 & 0 = v_sep_append_1030_sep_152_sep_0 & v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0) | (not 1 = v_sep_append_1030_sep_152_sep_0 & 0 = v_sep_append_1030_sep_152_sep_0 & not 0 = v_sep_append_1030_sep_152_sep_0 & 1 = v_sep_append_1030_sep_152_sep_0) | (not 1 = v_sep_append_1030_sep_152_sep_0 & 0 = v_sep_append_1030_sep_152_sep_0 & not 1 = v_sep_append_1030_sep_152_sep_0 & 1 = v_sep_append_1030_sep_152_sep_0) | (not 1 = v_sep_append_1030_sep_152_sep_0 & 0 = v_sep_append_1030_sep_152_sep_0 & not v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (1 + v_sep_append_1030_sep_152_sep_1) & 1 = v_sep_append_1030_sep_152_sep_0) | (not 0 = v_sep_append_1030_sep_152_sep_0 & 0 = v_sep_append_1030_sep_152_sep_0) | (not 1 = v_sep_append_1030_sep_152_sep_0 & v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 & 0 = v_sep_append_1030_sep_152_sep_0) | (not v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 & v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 & 0 = v_sep_append_1030_sep_152_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(122125)[12] (0.002000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(122124)[11] (0.005999 sec.)
                    
                  end InterpProver.interpolate_quick(122115)[10] (0.006999 sec.)
                  begin minimizing # of disjunctions(122428)[10]
                    input: (((<append_1030@152:0> = 1) && (<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>))) ||
                            ((<append_1030@152:0> = 0) && (<append_1030@152:1> = <<append_1030@152:2>@155:0>)))
                    output: (((<append_1030@152:0> = 0) && (<append_1030@152:1> = <<append_1030@152:2>@155:0>)) ||
                             ((<append_1030@152:0> = 1) && (<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>))))
                  end minimizing # of disjunctions(122428)[10] (0.001000 sec.)
                  begin minimizing # of conjunctions(122468)[10]
                    input: ((<append_1030@152:0> = 0) && (<append_1030@152:1> = <<append_1030@152:2>@155:0>))
                    output: ((<append_1030@152:1> = <<append_1030@152:2>@155:0>) && (<append_1030@152:0> = 0))
                  end minimizing # of conjunctions(122468)[10] (0.000000 sec.)
                  begin minimizing # of conjunctions(122561)[10]
                    input: ((<append_1030@152:0> = 1) && (<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)))
                    output: ((<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)) && (<append_1030@152:0> = 1))
                  end minimizing # of conjunctions(122561)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(121952)[9] (0.011998 sec.)
                
              end InterpProver.interpolate_check(121951)[8] (0.012998 sec.)
              output: (((<append_1030@152:1> = <<append_1030@152:2>@155:0>) && (<append_1030@152:0> = 0)) ||
                       ((<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)) && (<append_1030@152:0> = 1)))
            end InterpProver.interpolate_log(121950)[7] (0.012998 sec.)
            
          end InterpProver.interpolate_fresh(121949)[6] (0.012998 sec.)
          
        end InterpProver.interpolate(121948)[5] (0.012998 sec.)
        output:
          P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,<<append_1030@152:2>@155:0>:int) =
          (((<append_1030@152:1> = <<append_1030@152:2>@155:0>) && (<append_1030@152:0> = 0)) ||
           ((<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)) && (<append_1030@152:0> = 1)))
          P[<<append_1030@169:2>@172:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,<<append_1030@152:2>@155:0>:int) =
          (((<append_1030@152:1> = <<append_1030@152:2>@155:0>) && (<append_1030@152:0> = 0)) ||
           ((<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)) && (<append_1030@152:0> = 1)))
          P[<<append_1030@166:2>@178:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,<<append_1030@152:2>@155:0>:int) =
          (((<append_1030@152:1> = <<append_1030@152:2>@155:0>) && (<append_1030@152:0> = 0)) ||
           ((<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)) && (<append_1030@152:0> = 1)))
      end ApronInterface.convex_hull_interpolate(121947)[4] (0.013998 sec.)
      Horn clauses:
        P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
        
        P[<append_1030@166:1>](2:int,<append_1030@166:1>:int)|- bot
        
        P[<append_1030@166:1>]((1 + <append_1030@169:0>):int,<append_1030@169:1>:int), (
        (1 + <append_1030@169:0>) <> 0) |- P[<append_1030@169:1>](<append_1030@169:0>:int,
                                                                  <append_1030@169:1>:int)
        
        P[<<rev_1033@142:1>@159:0>](<append_1030@166:0>:int,<append_1030@166:0>:int)|- P[<append_1030@166:1>](
        <append_1030@166:0>:int,<append_1030@166:1>:int)
        
        P[<rev_1033@142:0>](<rev_1033@142:0>:int),
        P[<<rev_1033@145:1>@148:0>]((-1 + <rev_1033@142:0>):int,var403:int),
        ((<rev_1033@142:0> <> 0) &&
         (((<<rev_1033@142:1>@159:0> = 1) && (var403 = 0)) || ((<<rev_1033@142:1>@159:0> = 2) && (var403 = 1))))
        |- P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,<<rev_1033@142:1>@159:0>:int)
        
        P[<rev_1033@142:0>](<f_rev_1295@150:0>:int),
        P[<<rev_1033@145:1>@148:0>]((-1 + <f_rev_1295@150:0>):int,<append_1030@152:0>:int),
        ((<append_1030@152:1> = 1) && (<f_rev_1295@150:0> <> 0))
        |- P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int)
        
        P[<rev_1033@145:0>](<rev_1033@145:0>:int), ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
        
        P[<rev_1033@142:0>]((1 + <rev_1033@145:0>):int), ((1 + <rev_1033@145:0>) <> 0)
        |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
        
        |- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
      lower bounds:
        P[<rev_1033@142:0>](<rev_1033@142:0>:int) = true
        P[<fail_1301@183:0>](var422:bool) = false
        P[<rev_1033@145:0>](<rev_1033@145:0>:int) = ((1 + <rev_1033@145:0>) <> 0)
        P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) =
        ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,<<rev_1033@142:1>@159:0>:int) =
        ((<<rev_1033@142:1>@159:0> = 1) && (<rev_1033@142:0> = 1))
        P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int) =
        ((<append_1030@152:0> = 0) && (<append_1030@152:1> = 1))
        P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = (<append_1030@166:0> = 1)
        P[<append_1030@169:1>](<append_1030@169:0>:int,<append_1030@169:1>:int) = (<append_1030@169:0> = 0)
      upper bounds:
        P[<append_1030@169:1>](var433:int,var434:int) = true
        P[<append_1030@166:1>](var429:int,var430:int) = (var429 <> 2)
        P[<append_1030@152:1>](var425:int,var426:int) = true
      begin GenHcSolver.classify_pids(132279)[4]
        output:
          [<append_1030@166:1>;<append_1030@152:1>;<append_1030@169:1>]
      end GenHcSolver.classify_pids(132279)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(132309)[4]
        lb:((<append_1030@166:0> = 1) ||
            (((<append_1030@166:0> = 0) && (<append_1030@166:1> = 1)) || (<append_1030@166:0> = 0)))
        nub:(not (<append_1030@166:0> <> 2))
        lb':((<append_1030@166:0> = 1) ||
             (((<append_1030@166:0> = 0) && (<append_1030@166:1> = 1)) || (<append_1030@166:0> = 0)))
        nub':(not (<append_1030@166:0> <> 2))
        begin InterpProver.interpolate(132310)[5]
          begin InterpProver.interpolate_fresh(132311)[6]
            begin InterpProver.interpolate_log(132312)[7]
              input1: ((<append_1030@166:0> = 1) ||
                       (((<append_1030@166:0> = 0) && (<append_1030@166:1> = 1)) || (<append_1030@166:0> = 0)))
              input2: (not (<append_1030@166:0> <> 2))
              begin InterpProver.interpolate_check(132313)[8]
                begin InterpProver.interpolate_simplify(132314)[9]
                  begin InterpProver.interpolate_quick(132361)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(132370)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(132371)[12]
                        begin CsisatInterface.interpolate_csisat_log(132372)[13]
                          input1: (0 = v_sep_append_1030_sep_166_sep_0 | 1 = v_sep_append_1030_sep_166_sep_0)
                          input2: 2 = v_sep_append_1030_sep_166_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(132373)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(132373)[14] (0.000000 sec.)
                          output: (v_sep_append_1030_sep_166_sep_0 <= 0 | 2*v_sep_append_1030_sep_166_sep_0 <= 2)
                          
                        end CsisatInterface.interpolate_csisat_log(132372)[13] (0.000000 sec.)
                        after simplification: (v_sep_append_1030_sep_166_sep_0 <= 0 | 2*v_sep_append_1030_sep_166_sep_0 <= 2)
                        after dnf conversion: ((v_sep_append_1030_sep_166_sep_0 <= 0) | (2*v_sep_append_1030_sep_166_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(132371)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(132370)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(132361)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(132314)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(132313)[8] (0.001000 sec.)
              output: (<append_1030@166:0> <= 1)
            end InterpProver.interpolate_log(132312)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(132311)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(132310)[5] (0.001000 sec.)
        output:
          P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = (<append_1030@166:0> <= 1)
          P[<append_1030@152:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = (<append_1030@166:0> <= 1)
          P[<append_1030@169:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = (<append_1030@166:0> <= 1)
      end ApronInterface.convex_hull_interpolate(132309)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
        
        P[<<rev_1033@142:1>@159:0>](<append_1030@166:0>:int,<append_1030@166:0>:int), (<append_1030@166:0> > 1) |- bot
        
        P[<rev_1033@142:0>](<rev_1033@142:0>:int),
        P[<<rev_1033@145:1>@148:0>]((-1 + <rev_1033@142:0>):int,var403:int),
        ((<rev_1033@142:0> <> 0) &&
         (((<<rev_1033@142:1>@159:0> = 1) && (var403 = 0)) || ((<<rev_1033@142:1>@159:0> = 2) && (var403 = 1))))
        |- P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,<<rev_1033@142:1>@159:0>:int)
        
        P[<rev_1033@142:0>](<f_rev_1295@150:0>:int),
        P[<<rev_1033@145:1>@148:0>]((-1 + <f_rev_1295@150:0>):int,<append_1030@152:0>:int),
        ((<append_1030@152:0> > 1) && (<f_rev_1295@150:0> <> 0)) |- bot
        
        P[<rev_1033@145:0>](<rev_1033@145:0>:int), ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
        
        P[<rev_1033@142:0>]((1 + <rev_1033@145:0>):int), ((1 + <rev_1033@145:0>) <> 0)
        |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
        
        |- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
      lower bounds:
        P[<rev_1033@142:0>](<rev_1033@142:0>:int) = true
        P[<fail_1301@183:0>](var439:bool) = false
        P[<rev_1033@145:0>](<rev_1033@145:0>:int) = ((1 + <rev_1033@145:0>) <> 0)
        P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) =
        ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,<<rev_1033@142:1>@159:0>:int) =
        ((<<rev_1033@142:1>@159:0> = 1) && (<rev_1033@142:0> = 1))
      upper bounds:
        P[<<rev_1033@142:1>@159:0>](var449:int,var450:int) = ((var449 <= 1) || (var449 <> var450))
        P[<<rev_1033@145:1>@148:0>](var443:int,var444:int) =
        (((var443 <= 0) || (((var443 <> 0) || (var444 <> 0)) && ((var443 <> 1) || (var444 <> 1)))) &&
         (((1 + var443) = 0) || (var444 <= 1)))
      begin GenHcSolver.classify_pids(139805)[4]
        output:
          [<<rev_1033@142:1>@159:0>],[<<rev_1033@145:1>@148:0>]
      end GenHcSolver.classify_pids(139805)[4] (0.001000 sec.)
      lb:((<<rev_1033@142:1>@159:0> = 1) && (<rev_1033@142:0> = 1))
      nub:(not ((<rev_1033@142:0> <= 1) || (<rev_1033@142:0> <> <<rev_1033@142:1>@159:0>)))
      begin ApronInterface.convex_hull_interpolate(139973)[4]
        lb:((<<rev_1033@142:1>@159:0> = 1) && (<rev_1033@142:0> = 1))
        nub:(not ((<rev_1033@142:0> <= 1) || (<rev_1033@142:0> <> <<rev_1033@142:1>@159:0>)))
        lb':((<<rev_1033@142:1>@159:0> = 1) && (<rev_1033@142:0> = 1))
        nub':(not ((<rev_1033@142:0> <= 1) || (<rev_1033@142:0> <> <<rev_1033@142:1>@159:0>)))
        begin InterpProver.interpolate(139974)[5]
          begin InterpProver.interpolate_fresh(139975)[6]
            begin InterpProver.interpolate_log(139976)[7]
              input1: ((<<rev_1033@142:1>@159:0> = 1) && (<rev_1033@142:0> = 1))
              input2: (not ((<rev_1033@142:0> <= 1) || (<rev_1033@142:0> <> <<rev_1033@142:1>@159:0>)))
              begin InterpProver.interpolate_check(139977)[8]
                begin InterpProver.interpolate_simplify(139978)[9]
                  begin InterpProver.interpolate_quick(140039)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(140048)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(140049)[12]
                        begin CsisatInterface.interpolate_csisat_log(140050)[13]
                          input1: (1 = v_sep_rev_1033_sep_142_sep_0 & 1 = v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0)
                          input2: (v_sep_rev_1033_sep_142_sep_0 = v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0 & 2 <= v_sep_rev_1033_sep_142_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(140051)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(140051)[14] (0.000000 sec.)
                          output: 2*v_sep_rev_1033_sep_142_sep_0 <= 2
                          
                        end CsisatInterface.interpolate_csisat_log(140050)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_rev_1033_sep_142_sep_0 <= 2
                        after dnf conversion: ((2*v_sep_rev_1033_sep_142_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(140049)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(140048)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(140039)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(139978)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(139977)[8] (0.002000 sec.)
              output: (<rev_1033@142:0> <= 1)
            end InterpProver.interpolate_log(139976)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(139975)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(139974)[5] (0.002000 sec.)
        output:
          P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,<<rev_1033@142:1>@159:0>:int) = (<rev_1033@142:0> <= 1)
      end ApronInterface.convex_hull_interpolate(139973)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
        
        P[<rev_1033@142:0>](<rev_1033@142:0>:int),
        P[<<rev_1033@145:1>@148:0>]((-1 + <rev_1033@142:0>):int,var403:int),
        ((<rev_1033@142:0> > 1) &&
         (((<<rev_1033@142:1>@159:0> = 1) && (var403 = 0)) || ((<<rev_1033@142:1>@159:0> = 2) && (var403 = 1)))) |- bot
        
        P[<rev_1033@142:0>](<f_rev_1295@150:0>:int),
        P[<<rev_1033@145:1>@148:0>]((-1 + <f_rev_1295@150:0>):int,<append_1030@152:0>:int),
        ((<append_1030@152:0> > 1) && (<f_rev_1295@150:0> <> 0)) |- bot
        
        P[<rev_1033@145:0>](<rev_1033@145:0>:int), ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
        
        P[<rev_1033@142:0>]((1 + <rev_1033@145:0>):int), ((1 + <rev_1033@145:0>) <> 0)
        |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
        
        |- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
      lower bounds:
        P[<rev_1033@142:0>](<rev_1033@142:0>:int) = true
        P[<fail_1301@183:0>](var452:bool) = false
        P[<rev_1033@145:0>](<rev_1033@145:0>:int) = ((1 + <rev_1033@145:0>) <> 0)
        P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) =
        ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
      upper bounds:
        P[<rev_1033@145:0>](var458:int) = true
        P[<rev_1033@142:0>](var455:int) = true
      begin GenHcSolver.classify_pids(143051)[4]
        output:
          [<rev_1033@142:0>;<rev_1033@145:0>]
      end GenHcSolver.classify_pids(143051)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(143062)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(143063)[5]
          begin InterpProver.interpolate_fresh(143064)[6]
            begin InterpProver.interpolate_log(143065)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(143066)[8]
                begin InterpProver.interpolate_simplify(143067)[9]
                  begin InterpProver.interpolate_quick(143080)[10]
                    
                  end InterpProver.interpolate_quick(143080)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(143067)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(143066)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(143065)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(143064)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(143063)[5] (0.000000 sec.)
        output:
          P[<rev_1033@142:0>](<rev_1033@142:0>:int) = true
          P[<rev_1033@145:0>](<rev_1033@142:0>:int) = true
      end ApronInterface.convex_hull_interpolate(143062)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
        
        P[<<rev_1033@145:1>@148:0>]((-1 + <rev_1033@142:0>):int,var403:int),
        ((<rev_1033@142:0> > 1) &&
         (((<<rev_1033@142:1>@159:0> = 1) && (var403 = 0)) || ((<<rev_1033@142:1>@159:0> = 2) && (var403 = 1)))) |- bot
        
        P[<<rev_1033@145:1>@148:0>]((-1 + <f_rev_1295@150:0>):int,<append_1030@152:0>:int),
        ((<append_1030@152:0> > 1) && (<f_rev_1295@150:0> <> 0)) |- bot
        
         ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
      lower bounds:
        P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) =
        ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        P[<fail_1301@183:0>](var462:bool) = false
      upper bounds:
        P[<fail_1301@183:0>](var465:bool) = true
      begin GenHcSolver.classify_pids(145433)[4]
        output:
          [<fail_1301@183:0>]
      end GenHcSolver.classify_pids(145433)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(145436)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(145437)[5]
          begin InterpProver.interpolate_fresh(145438)[6]
            begin InterpProver.interpolate_log(145439)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(145440)[8]
                begin InterpProver.interpolate_simplify(145441)[9]
                  begin InterpProver.interpolate_quick(145454)[10]
                    
                  end InterpProver.interpolate_quick(145454)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(145458)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(145458)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(145441)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(145440)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(145439)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(145438)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(145437)[5] (0.000000 sec.)
        output:
          P[<fail_1301@183:0>](var462:bool) = false
      end ApronInterface.convex_hull_interpolate(145436)[4] (0.000000 sec.)
      Horn clauses:
        P[<<rev_1033@145:1>@148:0>]((-1 + <rev_1033@142:0>):int,var403:int),
        ((<rev_1033@142:0> > 1) &&
         (((<<rev_1033@142:1>@159:0> = 1) && (var403 = 0)) || ((<<rev_1033@142:1>@159:0> = 2) && (var403 = 1)))) |- bot
        
        P[<<rev_1033@145:1>@148:0>]((-1 + <f_rev_1295@150:0>):int,<append_1030@152:0>:int),
        ((<append_1030@152:0> > 1) && (<f_rev_1295@150:0> <> 0)) |- bot
        
         ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
      lower bounds:
        P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) =
        ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
      upper bounds:
        P[<<rev_1033@145:1>@148:0>](var466:int,var467:int) =
        (((var466 <= 0) ||
          (((<<rev_1033@142:1>@159:0> <> 1) || (var467 <> 0)) && ((<<rev_1033@142:1>@159:0> <> 2) || (var467 <> 1)))) &&
         (((1 + var466) = 0) || (var467 <= 1)))
      begin GenHcSolver.classify_pids(147991)[4]
        output:
          [<<rev_1033@145:1>@148:0>]
      end GenHcSolver.classify_pids(147991)[4] (0.000000 sec.)
      lb:((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
      nub:(not
             (((<rev_1033@145:0> <= 0) ||
               (((var471 <> 1) || (<<rev_1033@145:1>@148:0> <> 0)) &&
                ((var471 <> 2) || (<<rev_1033@145:1>@148:0> <> 1)))) &&
              (((1 + <rev_1033@145:0>) = 0) || (<<rev_1033@145:1>@148:0> <= 1))))
      begin ApronInterface.convex_hull_interpolate(147994)[4]
        lb:((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        nub:(not
               (((<rev_1033@145:0> <= 0) ||
                 (((var471 <> 1) || (<<rev_1033@145:1>@148:0> <> 0)) &&
                  ((var471 <> 2) || (<<rev_1033@145:1>@148:0> <> 1)))) &&
                (((1 + <rev_1033@145:0>) = 0) || (<<rev_1033@145:1>@148:0> <= 1))))
        lb':((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        nub':(not
                (((<rev_1033@145:0> <= 0) ||
                  (((var471 <> 1) || (<<rev_1033@145:1>@148:0> <> 0)) &&
                   ((var471 <> 2) || (<<rev_1033@145:1>@148:0> <> 1)))) &&
                 (((1 + <rev_1033@145:0>) = 0) || (<<rev_1033@145:1>@148:0> <= 1))))
        begin InterpProver.interpolate(147995)[5]
          begin InterpProver.interpolate_fresh(147996)[6]
            begin InterpProver.interpolate_log(147997)[7]
              input1: ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
              input2: (not
                         (((<rev_1033@145:0> <= 0) ||
                           (((var472 <> 1) || (<<rev_1033@145:1>@148:0> <> 0)) &&
                            ((var472 <> 2) || (<<rev_1033@145:1>@148:0> <> 1)))) &&
                          (((1 + <rev_1033@145:0>) = 0) || (<<rev_1033@145:1>@148:0> <= 1))))
              begin InterpProver.interpolate_check(147998)[8]
                begin InterpProver.interpolate_simplify(147999)[9]
                  begin InterpProver.interpolate_quick(148134)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(148143)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(148144)[12]
                        begin CsisatInterface.interpolate_csisat_log(148145)[13]
                          input1: (0 = v_sep_rev_1033_sep_145_sep_0 & 0 = v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0)
                          input2: ((((0 = v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0 & 1 = v_sep_var472) | (1 = v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0 & 2 = v_sep_var472)) & 1 <= v_sep_rev_1033_sep_145_sep_0) | (not 0 = (1 + v_sep_rev_1033_sep_145_sep_0) & 2 <= v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0))
                          begin CsisatInterface.interpolate_csisat_raw(148146)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(148146)[14] (0.003999 sec.)
                          output: (((v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0 <= 0 & 2*v_sep_rev_1033_sep_145_sep_0 <= 0) | not 0 = v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0) & 0 = v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0)
                          
                        end CsisatInterface.interpolate_csisat_log(148145)[13] (0.003999 sec.)
                        after simplification: (((v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0 <= 0 & 2*v_sep_rev_1033_sep_145_sep_0 <= 0) | not 0 = v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0) & 0 = v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0)
                        after dnf conversion: ((v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0 <= 0 & 2*v_sep_rev_1033_sep_145_sep_0 <= 0 & 0 = v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0) | (not 0 = v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0 & 0 = v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(148144)[12] (0.003999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(148143)[11] (0.003999 sec.)
                    
                  end InterpProver.interpolate_quick(148134)[10] (0.003999 sec.)
                  begin minimizing # of conjunctions(148170)[10]
                    input: ((<<rev_1033@145:1>@148:0> = 0) && (<rev_1033@145:0> <= 0))
                    output: ((<rev_1033@145:0> <= 0) && (<<rev_1033@145:1>@148:0> = 0))
                  end minimizing # of conjunctions(148170)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(147999)[9] (0.005999 sec.)
                
              end InterpProver.interpolate_check(147998)[8] (0.006999 sec.)
              output: ((<rev_1033@145:0> <= 0) && (<<rev_1033@145:1>@148:0> = 0))
            end InterpProver.interpolate_log(147997)[7] (0.006999 sec.)
            
          end InterpProver.interpolate_fresh(147996)[6] (0.006999 sec.)
          
        end InterpProver.interpolate(147995)[5] (0.006999 sec.)
        output:
          P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) =
          ((<rev_1033@145:0> <= 0) && (<<rev_1033@145:1>@148:0> = 0))
      end ApronInterface.convex_hull_interpolate(147994)[4] (0.006999 sec.)
      begin HcSolver.check_validity(148739)[4]
        input:
          P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
          
          P[<<rev_1033@142:1>@159:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:1>:int),
          P[<<append_1030@166:2>@178:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:0>:int,<f_k_main_u_1296@180:4>:int),
          ((<f_k_main_u_1296@180:4> <> (<f_k_main_u_1296@180:1> + <f_k_main_u_1296@180:0>)) && <fail_1301@183:0>)
          |- P[<fail_1301@183:0>](<fail_1301@183:0>:bool)
          
          P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int),
          P[<<append_1030@169:2>@172:0>]((-1 + <append_1030@166:0>):int,<append_1030@166:1>:int,(
                                         -1 + <<append_1030@166:2>@178:0>):int), (
          <append_1030@166:0> <> 0)
          |- P[<<append_1030@166:2>@178:0>](<append_1030@166:0>:int,<append_1030@166:1>:int,
                                            <<append_1030@166:2>@178:0>:int)
          
          P[<append_1030@169:1>](<append_1030@169:0>:int,<append_1030@169:1>:int),
          ((<append_1030@169:0> = 0) && (<<append_1030@169:2>@172:0> = <append_1030@169:1>))
          |- P[<<append_1030@169:2>@172:0>](<append_1030@169:0>:int,<append_1030@169:1>:int,
                                            <<append_1030@169:2>@172:0>:int)
          
          P[<append_1030@166:1>]((1 + <append_1030@169:0>):int,<append_1030@169:1>:int),
          ((1 + <append_1030@169:0>) <> 0) |- P[<append_1030@169:1>](
          <append_1030@169:0>:int,<append_1030@169:1>:int)
          
          P[<<rev_1033@142:1>@159:0>](<append_1030@166:0>:int,<append_1030@166:0>:int)|- P[<append_1030@166:1>](
          <append_1030@166:0>:int,<append_1030@166:1>:int)
          
          P[<rev_1033@142:0>](<rev_1033@142:0>:int),
          P[<<rev_1033@145:1>@148:0>]((-1 + <rev_1033@142:0>):int,var403:int),
          P[<<append_1030@152:2>@155:0>](var403:int,1:int,<<rev_1033@142:1>@159:0>:int), (
          <rev_1033@142:0> <> 0) |- P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,
                                                                <<rev_1033@142:1>@159:0>:int)
          
          P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int),
          ((<append_1030@152:0> = 0) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>))
          |- P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,
                                            <<append_1030@152:2>@155:0>:int)
          
          P[<rev_1033@142:0>](<f_rev_1295@150:0>:int),
          P[<<rev_1033@145:1>@148:0>]((-1 + <f_rev_1295@150:0>):int,<append_1030@152:0>:int),
          ((<append_1030@152:1> = 1) && (<f_rev_1295@150:0> <> 0))
          |- P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int)
          
          P[<rev_1033@145:0>](<rev_1033@145:0>:int), ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
          |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
          
          P[<rev_1033@142:0>]((1 + <rev_1033@145:0>):int), ((1 + <rev_1033@145:0>) <> 0)
          |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
          
          |- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(148739)[4] (0.011998 sec.)
      solution:
        P[<fail_1301@183:0>](var462:bool) = false
        P[<<append_1030@166:2>@178:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,<<append_1030@152:2>@155:0>:int) =
        (((<append_1030@152:1> = <<append_1030@152:2>@155:0>) && (<append_1030@152:0> = 0)) ||
         ((<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)) && (<append_1030@152:0> = 1)))
        P[<<append_1030@169:2>@172:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,<<append_1030@152:2>@155:0>:int) =
        (((<append_1030@152:1> = <<append_1030@152:2>@155:0>) && (<append_1030@152:0> = 0)) ||
         ((<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)) && (<append_1030@152:0> = 1)))
        P[<append_1030@169:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = (<append_1030@166:0> <= 1)
        P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = (<append_1030@166:0> <= 1)
        P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,<<rev_1033@142:1>@159:0>:int) = (<rev_1033@142:0> <= 1)
        P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,<<append_1030@152:2>@155:0>:int) =
        (((<append_1030@152:1> = <<append_1030@152:2>@155:0>) && (<append_1030@152:0> = 0)) ||
         ((<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)) && (<append_1030@152:0> = 1)))
        P[<append_1030@152:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = (<append_1030@166:0> <= 1)
        P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) =
        ((<rev_1033@145:0> <= 0) && (<<rev_1033@145:1>@148:0> = 0))
        P[<rev_1033@145:0>](<rev_1033@142:0>:int) = true
        P[<rev_1033@142:0>](<rev_1033@142:0>:int) = true
    end GenHcSolver.solve(113510)[3] (0.186972 sec.)
    begin GenHcSolver.solve(151230)[3]
      Horn clauses:
        P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
        
        P[<<rev_1033@142:1>@159:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:1>:int),
        P[<<append_1030@166:2>@178:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:0>:int,<f_k_main_u_1296@180:4>:int),
        ((<f_k_main_u_1296@180:4> <> (<f_k_main_u_1296@180:1> + <f_k_main_u_1296@180:0>)) && <fail_1301@183:0>)
        |- P[<fail_1301@183:0>](<fail_1301@183:0>:bool)
        
        P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int),
        P[<<append_1030@169:2>@172:0>]((-1 + <append_1030@166:0>):int,<append_1030@166:1>:int,(
                                       -1 + <<append_1030@166:2>@178:0>):int), (
        <append_1030@166:0> <> 0)
        |- P[<<append_1030@166:2>@178:0>](<append_1030@166:0>:int,<append_1030@166:1>:int,
                                          <<append_1030@166:2>@178:0>:int)
        
        P[<append_1030@169:1>](<append_1030@169:0>:int,<append_1030@169:1>:int),
        ((<append_1030@169:0> = 0) && (<<append_1030@169:2>@172:0> = <append_1030@169:1>))
        |- P[<<append_1030@169:2>@172:0>](<append_1030@169:0>:int,<append_1030@169:1>:int,
                                          <<append_1030@169:2>@172:0>:int)
        
        P[<append_1030@166:1>]((1 + <append_1030@169:0>):int,<append_1030@169:1>:int), (
        (1 + <append_1030@169:0>) <> 0) |- P[<append_1030@169:1>](<append_1030@169:0>:int,
                                                                  <append_1030@169:1>:int)
        
        P[<<rev_1033@142:1>@159:0>](<append_1030@166:0>:int,<append_1030@166:0>:int)|- P[<append_1030@166:1>](
        <append_1030@166:0>:int,<append_1030@166:1>:int)
        
        P[<rev_1033@142:0>](<rev_1033@142:0>:int),
        P[<<rev_1033@145:1>@148:0>]((-1 + <rev_1033@142:0>):int,var403:int),
        P[<<append_1030@152:2>@155:0>](var403:int,1:int,<<rev_1033@142:1>@159:0>:int), (
        <rev_1033@142:0> <> 0) |- P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,
                                                              <<rev_1033@142:1>@159:0>:int)
        
        P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int),
        ((<append_1030@152:0> = 0) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>))
        |- P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,
                                          <<append_1030@152:2>@155:0>:int)
        
        P[<rev_1033@142:0>](<f_rev_1295@150:0>:int),
        P[<<rev_1033@145:1>@148:0>]((-1 + <f_rev_1295@150:0>):int,<append_1030@152:0>:int),
        ((<append_1030@152:1> = 1) && (<f_rev_1295@150:0> <> 0))
        |- P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int)
        
        P[<rev_1033@145:0>](<rev_1033@145:0>:int), ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
        
        P[<rev_1033@142:0>]((1 + <rev_1033@145:0>):int), ((1 + <rev_1033@145:0>) <> 0)
        |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
        
        |- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
      lower bounds:
        P[<rev_1033@142:0>](<rev_1033@142:0>:int) = true
        P[<rev_1033@145:0>](<rev_1033@145:0>:int) = ((1 + <rev_1033@145:0>) <> 0)
        P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) =
        ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int) =
        ((<append_1030@152:0> = 0) && (<append_1030@152:1> = 1))
        P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,<<append_1030@152:2>@155:0>:int) =
        ((<append_1030@152:0> = 0) &&
         ((<append_1030@152:1> = 1) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>)))
        P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,<<rev_1033@142:1>@159:0>:int) =
        ((<<rev_1033@142:1>@159:0> = 1) && (<rev_1033@142:0> = 1))
        P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = (<append_1030@166:0> = 1)
        P[<append_1030@169:1>](<append_1030@169:0>:int,<append_1030@169:1>:int) = (<append_1030@169:0> = 0)
        P[<<append_1030@169:2>@172:0>](<append_1030@169:0>:int,<append_1030@169:1>:int,<<append_1030@169:2>@172:0>:int) =
        ((<append_1030@169:0> = 0) && (<<append_1030@169:2>@172:0> = <append_1030@169:1>))
        P[<<append_1030@166:2>@178:0>](<append_1030@166:0>:int,<append_1030@166:1>:int,<<append_1030@166:2>@178:0>:int) =
        ((<append_1030@166:0> = 1) && (<<append_1030@166:2>@178:0> = (1 + <append_1030@166:1>)))
        P[<fail_1301@183:0>](<fail_1301@183:0>:bool) = false
      upper bounds:
        P[<<append_1030@166:2>@178:0>](var484:int,var485:int,var486:int) = ((var484 <> 1) || (var486 = (1 + var485)))
        P[<<append_1030@169:2>@172:0>](var479:int,var480:int,var481:int) = ((var479 <> 0) || (var481 = var480))
        P[<<append_1030@152:2>@155:0>](var474:int,var475:int,var476:int) = true
      begin GenHcSolver.classify_pids(159558)[4]
        output:
          [<<append_1030@152:2>@155:0>;<<append_1030@169:2>@172:0>;<<append_1030@166:2>@178:0>]
      end GenHcSolver.classify_pids(159558)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(159667)[4]
        lb:(((<append_1030@152:0> = 0) &&
             ((<append_1030@152:1> = 1) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>))) ||
            (((<append_1030@152:0> = 0) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>)) ||
             ((<append_1030@152:0> = 1) && (<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)))))
        nub:((not ((<append_1030@152:0> <> 0) || (<<append_1030@152:2>@155:0> = <append_1030@152:1>))) ||
             (not ((<append_1030@152:0> <> 1) || (<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)))))
        begin ExtFormula.Formula.case_analysis_boolean(159719)[5]
          ts: (((<append_1030@152:0> = 0) &&
                ((<append_1030@152:1> = 1) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>))) ||
               (((<append_1030@152:0> = 0) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>)) ||
                ((<append_1030@152:0> = 1) && (<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>)))))
          
        end ExtFormula.Formula.case_analysis_boolean(159719)[5] (0.000999 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(159763)[5]
          ts: (((<append_1030@152:0> = 0) && (<<append_1030@152:2>@155:0> <> <append_1030@152:1>)) ||
               ((<append_1030@152:0> = 1) && (<<append_1030@152:2>@155:0> <> (1 + <append_1030@152:1>))))
          
        end ExtFormula.Formula.case_analysis_boolean(159763)[5] (0.000000 sec.)
        lb':((((<<append_1030@152:2>@155:0> + (-1 * <append_1030@152:1>)) + (-1 * <append_1030@152:0>)) = 0) &&
             (((1 + (-1 * <append_1030@152:0>)) >= 0) && (<append_1030@152:0> >= 0)))
        nub':(((1 + (-1 * <append_1030@152:0>)) >= 0) && (<append_1030@152:0> >= 0))
        begin InterpProver.interpolate(159774)[5]
          begin InterpProver.interpolate_fresh(159775)[6]
            begin InterpProver.interpolate_log(159776)[7]
              input1: ((((<<append_1030@152:2>@155:0> + (-1 * <append_1030@152:1>)) + (-1 * <append_1030@152:0>)) = 0) &&
                       (((1 + (-1 * <append_1030@152:0>)) >= 0) && (<append_1030@152:0> >= 0)))
              input2: (((1 + (-1 * <append_1030@152:0>)) >= 0) && (<append_1030@152:0> >= 0))
              begin InterpProver.interpolate_check(159777)[8]
                begin InterpProver.interpolate_simplify(159778)[9]
                  begin InterpProver.interpolate_quick(159907)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(159916)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(159917)[12]
                        begin CsisatInterface.interpolate_csisat_log(159918)[13]
                          input1: (0 <= v_sep_append_1030_sep_152_sep_0 & v_sep_append_1030_sep_152_sep_0 <= 1)
                          input2: (0 <= v_sep_append_1030_sep_152_sep_0 & v_sep_append_1030_sep_152_sep_0 <= 1)
                          begin CsisatInterface.interpolate_csisat_raw(159919)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(159919)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(159918)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(159917)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(159916)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(159907)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(159778)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(159777)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(159776)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(159775)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(159774)[5] (0.001000 sec.)
        begin InterpProver.interpolate(159934)[5]
          begin InterpProver.interpolate_fresh(159935)[6]
            begin InterpProver.interpolate_log(159936)[7]
              input1: ((((<<append_1030@152:2>@155:0> + (-1 * <append_1030@152:1>)) + (-1 * <append_1030@152:0>)) = 0) &&
                       (((1 + (-1 * <append_1030@152:0>)) >= 0) && (<append_1030@152:0> >= 0)))
              input2: (not ((<append_1030@152:0> <> 1) || (<<append_1030@152:2>@155:0> = (1 + <append_1030@152:1>))))
              begin InterpProver.interpolate_check(159937)[8]
                begin InterpProver.interpolate_simplify(159938)[9]
                  begin InterpProver.interpolate_quick(160043)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(160052)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(160053)[12]
                        begin CsisatInterface.interpolate_csisat_log(160054)[13]
                          input1: (v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (v_sep_append_1030_sep_152_sep_0 + v_sep_append_1030_sep_152_sep_1) & 0 <= v_sep_append_1030_sep_152_sep_0 & v_sep_append_1030_sep_152_sep_0 <= 1)
                          input2: (not v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (1 + v_sep_append_1030_sep_152_sep_1) & 1 = v_sep_append_1030_sep_152_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(160055)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(160055)[14] (0.001000 sec.)
                          output: (v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (v_sep_append_1030_sep_152_sep_0 + v_sep_append_1030_sep_152_sep_1) & v_sep_append_1030_sep_152_sep_0 <= 1)
                          
                        end CsisatInterface.interpolate_csisat_log(160054)[13] (0.001000 sec.)
                        after simplification: (v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (v_sep_append_1030_sep_152_sep_0 + v_sep_append_1030_sep_152_sep_1) & v_sep_append_1030_sep_152_sep_0 <= 1)
                        after dnf conversion: ((v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (v_sep_append_1030_sep_152_sep_0 + v_sep_append_1030_sep_152_sep_1) & v_sep_append_1030_sep_152_sep_0 <= 1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(160053)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(160052)[11] (0.002000 sec.)
                    
                  end InterpProver.interpolate_quick(160043)[10] (0.002000 sec.)
                  begin minimizing # of conjunctions(160076)[10]
                    input: ((<<append_1030@152:2>@155:0> = (<append_1030@152:0> + <append_1030@152:1>)) &&
                            (<append_1030@152:0> <= 1))
                    output: (<<append_1030@152:2>@155:0> = (<append_1030@152:0> + <append_1030@152:1>))
                  end minimizing # of conjunctions(160076)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(159938)[9] (0.003000 sec.)
                
              end InterpProver.interpolate_check(159937)[8] (0.003000 sec.)
              output: (<<append_1030@152:2>@155:0> = (<append_1030@152:0> + <append_1030@152:1>))
            end InterpProver.interpolate_log(159936)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(159935)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(159934)[5] (0.003000 sec.)
        begin InterpProver.interpolate(160144)[5]
          begin InterpProver.interpolate_fresh(160145)[6]
            begin InterpProver.interpolate_log(160146)[7]
              input1: ((((<<append_1030@152:2>@155:0> + (-1 * <append_1030@152:1>)) + (-1 * <append_1030@152:0>)) = 0) &&
                       (((1 + (-1 * <append_1030@152:0>)) >= 0) && (<append_1030@152:0> >= 0)))
              input2: (not ((<append_1030@152:0> <> 0) || (<<append_1030@152:2>@155:0> = <append_1030@152:1>)))
              begin InterpProver.interpolate_check(160147)[8]
                begin InterpProver.interpolate_simplify(160148)[9]
                  begin InterpProver.interpolate_quick(160243)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(160252)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(160253)[12]
                        begin CsisatInterface.interpolate_csisat_log(160254)[13]
                          input1: (v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (v_sep_append_1030_sep_152_sep_0 + v_sep_append_1030_sep_152_sep_1) & 0 <= v_sep_append_1030_sep_152_sep_0 & v_sep_append_1030_sep_152_sep_0 <= 1)
                          input2: (not v_sep_append_1030_sep_152_sep_1 = v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 & 0 = v_sep_append_1030_sep_152_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(160255)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(160255)[14] (0.001000 sec.)
                          output: (v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (v_sep_append_1030_sep_152_sep_0 + v_sep_append_1030_sep_152_sep_1) & -1*v_sep_append_1030_sep_152_sep_0 <= 0)
                          
                        end CsisatInterface.interpolate_csisat_log(160254)[13] (0.001000 sec.)
                        after simplification: (v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (v_sep_append_1030_sep_152_sep_0 + v_sep_append_1030_sep_152_sep_1) & -1*v_sep_append_1030_sep_152_sep_0 <= 0)
                        after dnf conversion: ((v_sep_append_1030_sep_152_sep_2_sep_155_sep_0 = (v_sep_append_1030_sep_152_sep_0 + v_sep_append_1030_sep_152_sep_1) & -1*v_sep_append_1030_sep_152_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(160253)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(160252)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(160243)[10] (0.002000 sec.)
                  begin minimizing # of conjunctions(160273)[10]
                    input: ((<<append_1030@152:2>@155:0> = (<append_1030@152:0> + <append_1030@152:1>)) &&
                            (0 <= <append_1030@152:0>))
                    output: (<<append_1030@152:2>@155:0> = (<append_1030@152:0> + <append_1030@152:1>))
                  end minimizing # of conjunctions(160273)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(160148)[9] (0.002999 sec.)
                
              end InterpProver.interpolate_check(160147)[8] (0.002999 sec.)
              output: (<<append_1030@152:2>@155:0> = (<append_1030@152:0> + <append_1030@152:1>))
            end InterpProver.interpolate_log(160146)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(160145)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(160144)[5] (0.002999 sec.)
        begin InterpProver.interpolate(160329)[5]
          begin InterpProver.interpolate_fresh(160330)[6]
            begin InterpProver.interpolate_log(160331)[7]
              input1: ((((<<append_1030@152:2>@155:0> + (-1 * <append_1030@152:1>)) + (-1 * <append_1030@152:0>)) = 0) &&
                       (((1 + (-1 * <append_1030@152:0>)) >= 0) && (<append_1030@152:0> >= 0)))
              input2: false
              begin InterpProver.interpolate_check(160332)[8]
                begin InterpProver.interpolate_simplify(160333)[9]
                  begin InterpProver.interpolate_quick(160438)[10]
                    
                  end InterpProver.interpolate_quick(160438)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(160333)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(160332)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(160331)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(160330)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(160329)[5] (0.000000 sec.)
        output:
          P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,<<append_1030@152:2>@155:0>:int) =
          true
          P[<<append_1030@169:2>@172:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,<<append_1030@152:2>@155:0>:int) =
          (<<append_1030@152:2>@155:0> = (<append_1030@152:0> + <append_1030@152:1>))
          P[<<append_1030@166:2>@178:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,<<append_1030@152:2>@155:0>:int) =
          (<<append_1030@152:2>@155:0> = (<append_1030@152:0> + <append_1030@152:1>))
      end ApronInterface.convex_hull_interpolate(159667)[4] (0.007998 sec.)
      Horn clauses:
        P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
        
        P[<append_1030@166:1>]((1 + <append_1030@169:0>):int,<append_1030@169:1>:int), (
        (1 + <append_1030@169:0>) <> 0) |- P[<append_1030@169:1>](<append_1030@169:0>:int,
                                                                  <append_1030@169:1>:int)
        
        P[<<rev_1033@142:1>@159:0>](<append_1030@166:0>:int,<append_1030@166:0>:int)|- P[<append_1030@166:1>](
        <append_1030@166:0>:int,<append_1030@166:1>:int)
        
        P[<rev_1033@142:0>](<rev_1033@142:0>:int),
        P[<<rev_1033@145:1>@148:0>]((-1 + <rev_1033@142:0>):int,var403:int), (
        <rev_1033@142:0> <> 0) |- P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,
                                                              <<rev_1033@142:1>@159:0>:int)
        
        P[<rev_1033@142:0>](<f_rev_1295@150:0>:int),
        P[<<rev_1033@145:1>@148:0>]((-1 + <f_rev_1295@150:0>):int,<append_1030@152:0>:int),
        ((<append_1030@152:1> = 1) && (<f_rev_1295@150:0> <> 0))
        |- P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int)
        
        P[<rev_1033@145:0>](<rev_1033@145:0>:int), ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
        
        P[<rev_1033@142:0>]((1 + <rev_1033@145:0>):int), ((1 + <rev_1033@145:0>) <> 0)
        |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
        
        |- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
      lower bounds:
        P[<rev_1033@142:0>](<rev_1033@142:0>:int) = true
        P[<fail_1301@183:0>](var491:bool) = false
        P[<rev_1033@145:0>](<rev_1033@145:0>:int) = ((1 + <rev_1033@145:0>) <> 0)
        P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) =
        ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,<<rev_1033@142:1>@159:0>:int) = (<rev_1033@142:0> = 1)
        P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int) =
        ((<append_1030@152:0> = 0) && (<append_1030@152:1> = 1))
        P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = (<append_1030@166:0> = 1)
        P[<append_1030@169:1>](<append_1030@169:0>:int,<append_1030@169:1>:int) = (<append_1030@169:0> = 0)
      upper bounds:
        P[<append_1030@169:1>](var502:int,var503:int) = true
        P[<append_1030@166:1>](var498:int,var499:int) = true
        P[<append_1030@152:1>](var494:int,var495:int) = true
      begin GenHcSolver.classify_pids(166894)[4]
        output:
          [<append_1030@166:1>;<append_1030@152:1>;<append_1030@169:1>]
      end GenHcSolver.classify_pids(166894)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(166915)[4]
        lb:((<append_1030@166:0> = 1) ||
            (((<append_1030@166:0> = 0) && (<append_1030@166:1> = 1)) || (<append_1030@166:0> = 0)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(166941)[5]
          ts: ((<append_1030@166:0> = 0) || (<append_1030@166:0> = 1))
          
        end ExtFormula.Formula.case_analysis_boolean(166941)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(166949)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(166949)[5] (0.001000 sec.)
        lb':(((1 + (-1 * <append_1030@166:0>)) >= 0) && (<append_1030@166:0> >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(166952)[5]
          begin InterpProver.interpolate_fresh(166953)[6]
            begin InterpProver.interpolate_log(166954)[7]
              input1: (((1 + (-1 * <append_1030@166:0>)) >= 0) && (<append_1030@166:0> >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(166955)[8]
                begin InterpProver.interpolate_simplify(166956)[9]
                  begin InterpProver.interpolate_quick(166994)[10]
                    
                  end InterpProver.interpolate_quick(166994)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(166956)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(166955)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(166954)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(166953)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(166952)[5] (0.000000 sec.)
        output:
          P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = true
          P[<append_1030@152:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = true
          P[<append_1030@169:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = true
      end ApronInterface.convex_hull_interpolate(166915)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
        
        P[<rev_1033@142:0>](<rev_1033@142:0>:int),
        P[<<rev_1033@145:1>@148:0>]((-1 + <rev_1033@142:0>):int,var403:int), (
        <rev_1033@142:0> <> 0) |- P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,
                                                              <<rev_1033@142:1>@159:0>:int)
        
        P[<rev_1033@145:0>](<rev_1033@145:0>:int), ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
        
        P[<rev_1033@142:0>]((1 + <rev_1033@145:0>):int), ((1 + <rev_1033@145:0>) <> 0)
        |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
        
        |- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
      lower bounds:
        P[<rev_1033@142:0>](<rev_1033@142:0>:int) = true
        P[<fail_1301@183:0>](var508:bool) = false
        P[<rev_1033@145:0>](<rev_1033@145:0>:int) = ((1 + <rev_1033@145:0>) <> 0)
        P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) =
        ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
        P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,<<rev_1033@142:1>@159:0>:int) = (<rev_1033@142:0> = 1)
      upper bounds:
        P[<<rev_1033@142:1>@159:0>](var515:int,var516:int) = true
        P[<<rev_1033@145:1>@148:0>](var511:int,var512:int) = true
      begin GenHcSolver.classify_pids(170032)[4]
        output:
          [<<rev_1033@145:1>@148:0>;<<rev_1033@142:1>@159:0>]
      end GenHcSolver.classify_pids(170032)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(170043)[4]
        lb:(((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0)) || (<rev_1033@145:0> = 1))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(170056)[5]
          ts: ((<rev_1033@145:0> = 1) || ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(170056)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(170065)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(170065)[5] (0.000000 sec.)
        lb':(((1 + (-1 * <rev_1033@145:0>)) >= 0) && (<rev_1033@145:0> >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(170068)[5]
          begin InterpProver.interpolate_fresh(170069)[6]
            begin InterpProver.interpolate_log(170070)[7]
              input1: (((1 + (-1 * <rev_1033@145:0>)) >= 0) && (<rev_1033@145:0> >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(170071)[8]
                begin InterpProver.interpolate_simplify(170072)[9]
                  begin InterpProver.interpolate_quick(170110)[10]
                    
                  end InterpProver.interpolate_quick(170110)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(170072)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(170071)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(170070)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(170069)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(170068)[5] (0.001000 sec.)
        output:
          P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) = true
          P[<<rev_1033@142:1>@159:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) = true
      end ApronInterface.convex_hull_interpolate(170043)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
        
        P[<rev_1033@142:0>]((1 + <rev_1033@145:0>):int), ((1 + <rev_1033@145:0>) <> 0)
        |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
        
        |- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
      lower bounds:
        P[<rev_1033@142:0>](<rev_1033@142:0>:int) = true
        P[<fail_1301@183:0>](var520:bool) = false
        P[<rev_1033@145:0>](<rev_1033@145:0>:int) = ((1 + <rev_1033@145:0>) <> 0)
      upper bounds:
        P[<rev_1033@145:0>](var526:int) = true
        P[<rev_1033@142:0>](var523:int) = true
      begin GenHcSolver.classify_pids(171338)[4]
        output:
          [<rev_1033@142:0>;<rev_1033@145:0>]
      end GenHcSolver.classify_pids(171338)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(171349)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(171352)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(171352)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(171357)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(171357)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(171360)[5]
          begin InterpProver.interpolate_fresh(171361)[6]
            begin InterpProver.interpolate_log(171362)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(171363)[8]
                begin InterpProver.interpolate_simplify(171364)[9]
                  begin InterpProver.interpolate_quick(171378)[10]
                    
                  end InterpProver.interpolate_quick(171378)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(171364)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(171363)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(171362)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(171361)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(171360)[5] (0.001000 sec.)
        output:
          P[<rev_1033@142:0>](<rev_1033@142:0>:int) = true
          P[<rev_1033@145:0>](<rev_1033@142:0>:int) = true
      end ApronInterface.convex_hull_interpolate(171349)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
      lower bounds:
        P[<fail_1301@183:0>](var530:bool) = false
      upper bounds:
        P[<fail_1301@183:0>](var533:bool) = true
      begin GenHcSolver.classify_pids(171797)[4]
        output:
          [<fail_1301@183:0>]
      end GenHcSolver.classify_pids(171797)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(171800)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(171803)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(171803)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(171808)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(171808)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(171811)[5]
          begin InterpProver.interpolate_fresh(171812)[6]
            begin InterpProver.interpolate_log(171813)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(171814)[8]
                begin InterpProver.interpolate_simplify(171815)[9]
                  begin InterpProver.interpolate_quick(171830)[10]
                    
                  end InterpProver.interpolate_quick(171830)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(171834)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(171834)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(171815)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(171814)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(171813)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(171812)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(171811)[5] (0.001000 sec.)
        output:
          P[<fail_1301@183:0>](var530:bool) = false
      end ApronInterface.convex_hull_interpolate(171800)[4] (0.001000 sec.)
      begin HcSolver.check_validity(171874)[4]
        input:
          P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
          
          P[<<rev_1033@142:1>@159:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:1>:int),
          P[<<append_1030@166:2>@178:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:0>:int,<f_k_main_u_1296@180:4>:int),
          ((<f_k_main_u_1296@180:4> <> (<f_k_main_u_1296@180:1> + <f_k_main_u_1296@180:0>)) && <fail_1301@183:0>)
          |- P[<fail_1301@183:0>](<fail_1301@183:0>:bool)
          
          P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int),
          P[<<append_1030@169:2>@172:0>]((-1 + <append_1030@166:0>):int,<append_1030@166:1>:int,(
                                         -1 + <<append_1030@166:2>@178:0>):int), (
          <append_1030@166:0> <> 0)
          |- P[<<append_1030@166:2>@178:0>](<append_1030@166:0>:int,<append_1030@166:1>:int,
                                            <<append_1030@166:2>@178:0>:int)
          
          P[<append_1030@169:1>](<append_1030@169:0>:int,<append_1030@169:1>:int),
          ((<append_1030@169:0> = 0) && (<<append_1030@169:2>@172:0> = <append_1030@169:1>))
          |- P[<<append_1030@169:2>@172:0>](<append_1030@169:0>:int,<append_1030@169:1>:int,
                                            <<append_1030@169:2>@172:0>:int)
          
          P[<append_1030@166:1>]((1 + <append_1030@169:0>):int,<append_1030@169:1>:int),
          ((1 + <append_1030@169:0>) <> 0) |- P[<append_1030@169:1>](
          <append_1030@169:0>:int,<append_1030@169:1>:int)
          
          P[<<rev_1033@142:1>@159:0>](<append_1030@166:0>:int,<append_1030@166:0>:int)|- P[<append_1030@166:1>](
          <append_1030@166:0>:int,<append_1030@166:1>:int)
          
          P[<rev_1033@142:0>](<rev_1033@142:0>:int),
          P[<<rev_1033@145:1>@148:0>]((-1 + <rev_1033@142:0>):int,var403:int),
          P[<<append_1030@152:2>@155:0>](var403:int,1:int,<<rev_1033@142:1>@159:0>:int), (
          <rev_1033@142:0> <> 0) |- P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,
                                                                <<rev_1033@142:1>@159:0>:int)
          
          P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int),
          ((<append_1030@152:0> = 0) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>))
          |- P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,
                                            <<append_1030@152:2>@155:0>:int)
          
          P[<rev_1033@142:0>](<f_rev_1295@150:0>:int),
          P[<<rev_1033@145:1>@148:0>]((-1 + <f_rev_1295@150:0>):int,<append_1030@152:0>:int),
          ((<append_1030@152:1> = 1) && (<f_rev_1295@150:0> <> 0))
          |- P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int)
          
          P[<rev_1033@145:0>](<rev_1033@145:0>:int), ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
          |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
          
          P[<rev_1033@142:0>]((1 + <rev_1033@145:0>):int), ((1 + <rev_1033@145:0>) <> 0)
          |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
          
          |- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(171874)[4] (0.001000 sec.)
      solution:
        P[<fail_1301@183:0>](var530:bool) = false
        P[<<append_1030@166:2>@178:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,<<append_1030@152:2>@155:0>:int) =
        (<<append_1030@152:2>@155:0> = (<append_1030@152:0> + <append_1030@152:1>))
        P[<<append_1030@169:2>@172:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,<<append_1030@152:2>@155:0>:int) =
        (<<append_1030@152:2>@155:0> = (<append_1030@152:0> + <append_1030@152:1>))
        P[<append_1030@169:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = true
        P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = true
        P[<<rev_1033@142:1>@159:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) = true
        P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,<<append_1030@152:2>@155:0>:int) =
        true
        P[<append_1030@152:1>](<append_1030@166:0>:int,<append_1030@166:1>:int) = true
        P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int) = true
        P[<rev_1033@145:0>](<rev_1033@142:0>:int) = true
        P[<rev_1033@142:0>](<rev_1033@142:0>:int) = true
    end GenHcSolver.solve(151230)[3] (0.098985 sec.)
    begin YhornInterface.solve(172672)[3]
      begin HcSolver.solve_ub(172673)[4]
        encoded:
          P[<fail_1301@183:0>](<fail_1301@183:0>:int)|- bot
          
          P[<<rev_1033@142:1>@159:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:1>:int),
          P[<<append_1030@166:2>@178:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:0>:int,<f_k_main_u_1296@180:4>:int),
          ((<f_k_main_u_1296@180:4> <> (<f_k_main_u_1296@180:1> + <f_k_main_u_1296@180:0>)) && (<fail_1301@183:0> = 1))
          |- P[<fail_1301@183:0>](<fail_1301@183:0>:int)
          
          P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int),
          P[<<append_1030@169:2>@172:0>]((-1 + <append_1030@166:0>):int,<append_1030@166:1>:int,(
                                         -1 + <<append_1030@166:2>@178:0>):int), (
          <append_1030@166:0> <> 0)
          |- P[<<append_1030@166:2>@178:0>](<append_1030@166:0>:int,<append_1030@166:1>:int,
                                            <<append_1030@166:2>@178:0>:int)
          
          P[<append_1030@169:1>](<append_1030@169:0>:int,<append_1030@169:1>:int),
          ((<append_1030@169:0> = 0) && (<<append_1030@169:2>@172:0> = <append_1030@169:1>))
          |- P[<<append_1030@169:2>@172:0>](<append_1030@169:0>:int,<append_1030@169:1>:int,
                                            <<append_1030@169:2>@172:0>:int)
          
          P[<append_1030@166:1>]((1 + <append_1030@169:0>):int,<append_1030@169:1>:int),
          ((1 + <append_1030@169:0>) <> 0) |- P[<append_1030@169:1>](
          <append_1030@169:0>:int,<append_1030@169:1>:int)
          
          P[<<rev_1033@142:1>@159:0>](<append_1030@166:0>:int,<append_1030@166:0>:int)|- P[<append_1030@166:1>](
          <append_1030@166:0>:int,<append_1030@166:1>:int)
          
          P[<rev_1033@142:0>](<rev_1033@142:0>:int),
          P[<<rev_1033@145:1>@148:0>]((-1 + <rev_1033@142:0>):int,var403:int),
          P[<<append_1030@152:2>@155:0>](var403:int,1:int,<<rev_1033@142:1>@159:0>:int), (
          <rev_1033@142:0> <> 0) |- P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,
                                                                <<rev_1033@142:1>@159:0>:int)
          
          P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int),
          ((<append_1030@152:0> = 0) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>))
          |- P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,
                                            <<append_1030@152:2>@155:0>:int)
          
          P[<rev_1033@142:0>](<f_rev_1295@150:0>:int),
          P[<<rev_1033@145:1>@148:0>]((-1 + <f_rev_1295@150:0>):int,<append_1030@152:0>:int),
          ((<append_1030@152:1> = 1) && (<f_rev_1295@150:0> <> 0))
          |- P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int)
          
          P[<rev_1033@145:0>](<rev_1033@145:0>:int), ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
          |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
          
          P[<rev_1033@142:0>]((1 + <rev_1033@145:0>):int), ((1 + <rev_1033@145:0>) <> 0)
          |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
          
          |- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
        input to Yhorn:
          P[<fail_1301@183:0>](<fail_1301@183:0>:int)|- bot
          
          P[<<rev_1033@142:1>@159:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:1>:int),
          P[<<append_1030@166:2>@178:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:0>:int,<f_k_main_u_1296@180:4>:int),
          ((<f_k_main_u_1296@180:4> <> (<f_k_main_u_1296@180:1> + <f_k_main_u_1296@180:0>)) && (<fail_1301@183:0> = 1))
          |- P[<fail_1301@183:0>](<fail_1301@183:0>:int)
          
          P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int),
          P[<<append_1030@169:2>@172:0>](var534:int,<append_1030@166:1>:int,var535:int),
          (((1 + var535) = <<append_1030@166:2>@178:0>) &&
           (((1 + var534) = <append_1030@166:0>) && (<append_1030@166:0> <> 0)))
          |- P[<<append_1030@166:2>@178:0>](<append_1030@166:0>:int,<append_1030@166:1>:int,
                                            <<append_1030@166:2>@178:0>:int)
          
          P[<append_1030@169:1>](<append_1030@169:0>:int,<append_1030@169:1>:int),
          ((<<append_1030@169:2>@172:0> = <append_1030@169:1>) && (<append_1030@169:0> = 0))
          |- P[<<append_1030@169:2>@172:0>](<append_1030@169:0>:int,<append_1030@169:1>:int,
                                            <<append_1030@169:2>@172:0>:int)
          
          P[<append_1030@166:1>](var536:int,<append_1030@169:1>:int),
          ((var536 = (1 + <append_1030@169:0>)) && ((1 + <append_1030@169:0>) <> 0))
          |- P[<append_1030@169:1>](<append_1030@169:0>:int,<append_1030@169:1>:int)
          
          P[<<rev_1033@142:1>@159:0>](<append_1030@166:0>:int,<append_1030@166:0>:int)|- P[<append_1030@166:1>](
          <append_1030@166:0>:int,<append_1030@166:1>:int)
          
          P[<rev_1033@142:0>](<rev_1033@142:0>:int),
          P[<<rev_1033@145:1>@148:0>](var537:int,var403:int),
          P[<<append_1030@152:2>@155:0>](var403:int,var538:int,<<rev_1033@142:1>@159:0>:int),
          (((1 + var537) = <rev_1033@142:0>) && ((<rev_1033@142:0> <> 0) && (var538 = 1)))
          |- P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,<<rev_1033@142:1>@159:0>:int)
          
          P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int),
          ((<<append_1030@152:2>@155:0> = <append_1030@152:1>) && (<append_1030@152:0> = 0))
          |- P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,
                                            <<append_1030@152:2>@155:0>:int)
          
          P[<rev_1033@142:0>](<f_rev_1295@150:0>:int),
          P[<<rev_1033@145:1>@148:0>](var539:int,<append_1030@152:0>:int),
          (((1 + var539) = <f_rev_1295@150:0>) && ((<f_rev_1295@150:0> <> 0) && (<append_1030@152:1> = 1)))
          |- P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int)
          
          P[<rev_1033@145:0>](<rev_1033@145:0>:int), ((<<rev_1033@145:1>@148:0> = 0) && (<rev_1033@145:0> = 0))
          |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
          
          P[<rev_1033@142:0>](var540:int), ((var540 = (1 + <rev_1033@145:0>)) && ((1 + <rev_1033@145:0>) <> 0))
          |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1301_sep_183_sep_0($1352)) -> 1=0.
(($1352-1=0) & ($1353-$1354-$1355<>0)) & (v_sep_append_1030_sep_166_sep_2_sep_178_sep_0($1354,$1355,$1353)) & (v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0($1354,$1354)) -> v_sep_fail_1301_sep_183_sep_0($1352).
(($1356<>0) & (-$1356+$1357+1=0) & ($1358-$1359+1=0)) & (v_sep_append_1030_sep_169_sep_2_sep_172_sep_0($1357,$1360,$1358)) & (v_sep_append_1030_sep_166_sep_1($1356,$1360)) -> v_sep_append_1030_sep_166_sep_2_sep_178_sep_0($1356,$1360,$1359).
(($1361=0) & ($1362-$1363=0)) & (v_sep_append_1030_sep_169_sep_1($1361,$1363)) -> v_sep_append_1030_sep_169_sep_2_sep_172_sep_0($1361,$1363,$1362).
(($1361+1<>0) & (-$1361+$1364-1=0)) & (v_sep_append_1030_sep_166_sep_1($1364,$1363)) -> v_sep_append_1030_sep_169_sep_1($1361,$1363).
(0=0) & (v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0($1356,$1356)) -> v_sep_append_1030_sep_166_sep_1($1356,$1360).
(($1365-1=0) & ($1366<>0) & (-$1366+$1367+1=0)) & (v_sep_append_1030_sep_152_sep_2_sep_155_sep_0($1368,$1365,$1369)) & (v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0($1367,$1368)) & (v_sep_rev_1033_sep_142_sep_0($1366)) -> v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0($1366,$1369).
(($1370=0) & ($1371-$1372=0)) & (v_sep_append_1030_sep_152_sep_1($1370,$1372)) -> v_sep_append_1030_sep_152_sep_2_sep_155_sep_0($1370,$1372,$1371).
(($1372-1=0) & ($1373<>0) & (-$1373+$1374+1=0)) & (v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0($1374,$1370)) & (v_sep_rev_1033_sep_142_sep_0($1373)) -> v_sep_append_1030_sep_152_sep_1($1370,$1372).
(($1375=0) & ($1376=0)) & (v_sep_rev_1033_sep_145_sep_0($1375)) -> v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0($1375,$1376).
(($1375+1<>0) & (-$1375+$1377-1=0)) & (v_sep_rev_1033_sep_142_sep_0($1377)) -> v_sep_rev_1033_sep_145_sep_0($1375).
0=0 -> v_sep_rev_1033_sep_142_sep_0($1366).


v_sep_append_1030_sep_152_sep_1: X
v_sep_append_1030_sep_152_sep_2_sep_155_sep_0: X
v_sep_append_1030_sep_166_sep_1: X
v_sep_append_1030_sep_166_sep_2_sep_178_sep_0: X
v_sep_append_1030_sep_169_sep_1: X
v_sep_append_1030_sep_169_sep_2_sep_172_sep_0: X
v_sep_fail_1301_sep_183_sep_0: X
v_sep_rev_1033_sep_142_sep_0: X
v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0: X
v_sep_rev_1033_sep_145_sep_0: X
v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0: X
............................Split disj [48] 1.804725
Reconstrcut: 3 **)

v_sep_append_1030_sep_152_sep_1: X
v_sep_append_1030_sep_152_sep_2_sep_155_sep_0: X
v_sep_append_1030_sep_166_sep_1: X
v_sep_append_1030_sep_166_sep_2_sep_178_sep_0: X
v_sep_append_1030_sep_169_sep_1: X
v_sep_append_1030_sep_169_sep_2_sep_172_sep_0: X
v_sep_fail_1301_sep_183_sep_0: (X) | (X)
v_sep_rev_1033_sep_142_sep_0: X
v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0: X
v_sep_rev_1033_sep_145_sep_0: X
v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0: X
.......
v_sep_append_1030_sep_152_sep_1: X
v_sep_append_1030_sep_152_sep_2_sep_155_sep_0: X
v_sep_append_1030_sep_166_sep_1: X
v_sep_append_1030_sep_166_sep_2_sep_178_sep_0: X
v_sep_append_1030_sep_169_sep_1: X
v_sep_append_1030_sep_169_sep_2_sep_172_sep_0: X
v_sep_fail_1301_sep_183_sep_0: (X) | (X)
v_sep_rev_1033_sep_142_sep_0: X
v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0: X
v_sep_rev_1033_sep_145_sep_0: X
v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0: X
.......Split conj [50] 1.810723
(Reconstrcut: 8 **)
v_sep_append_1030_sep_152_sep_1: X
v_sep_append_1030_sep_152_sep_2_sep_155_sep_0: X
v_sep_append_1030_sep_166_sep_1: X
v_sep_append_1030_sep_166_sep_2_sep_178_sep_0: (X) & (X)
v_sep_append_1030_sep_169_sep_1: X
v_sep_append_1030_sep_169_sep_2_sep_172_sep_0: X
v_sep_fail_1301_sep_183_sep_0: (X) | (X)
v_sep_rev_1033_sep_142_sep_0: X
v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0: X
v_sep_rev_1033_sep_145_sep_0: X
v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0: X
...............
v_sep_append_1030_sep_152_sep_1: X
v_sep_append_1030_sep_152_sep_2_sep_155_sep_0: X
v_sep_append_1030_sep_166_sep_1: X
v_sep_append_1030_sep_166_sep_2_sep_178_sep_0: (X) & (X)
v_sep_append_1030_sep_169_sep_1: X
v_sep_append_1030_sep_169_sep_2_sep_172_sep_0: X
v_sep_fail_1301_sep_183_sep_0: (X) | (X)
v_sep_rev_1033_sep_142_sep_0: X
v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0: X
v_sep_rev_1033_sep_145_sep_0: X
v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0: X
.......
v_sep_append_1030_sep_152_sep_1: X
v_sep_append_1030_sep_152_sep_2_sep_155_sep_0: X
v_sep_append_1030_sep_166_sep_1: X
v_sep_append_1030_sep_166_sep_2_sep_178_sep_0: (X) & (X)
v_sep_append_1030_sep_169_sep_1: X
v_sep_append_1030_sep_169_sep_2_sep_172_sep_0: X
v_sep_fail_1301_sep_183_sep_0: (X) | (X)
v_sep_rev_1033_sep_142_sep_0: X
v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0: X
v_sep_rev_1033_sep_145_sep_0: X
v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0: X
.....................Split conj [53] 1.827721
(Reconstrcut: 21 ***)
v_sep_append_1030_sep_152_sep_1: X
v_sep_append_1030_sep_152_sep_2_sep_155_sep_0: X
v_sep_append_1030_sep_166_sep_1: X
v_sep_append_1030_sep_166_sep_2_sep_178_sep_0: (X) & (X)
v_sep_append_1030_sep_169_sep_1: X
v_sep_append_1030_sep_169_sep_2_sep_172_sep_0: X
v_sep_fail_1301_sep_183_sep_0: (X) | (X)
v_sep_rev_1033_sep_142_sep_0: X
v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_145_sep_0: X
v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0: X
.....................................
v_sep_append_1030_sep_152_sep_1: X
v_sep_append_1030_sep_152_sep_2_sep_155_sep_0: X
v_sep_append_1030_sep_166_sep_1: X
v_sep_append_1030_sep_166_sep_2_sep_178_sep_0: (X) & (X)
v_sep_append_1030_sep_169_sep_1: X
v_sep_append_1030_sep_169_sep_2_sep_172_sep_0: X
v_sep_fail_1301_sep_183_sep_0: (X) | (X)
v_sep_rev_1033_sep_142_sep_0: X
v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_145_sep_0: X
v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0: X
.......
v_sep_append_1030_sep_152_sep_1: X
v_sep_append_1030_sep_152_sep_2_sep_155_sep_0: X
v_sep_append_1030_sep_166_sep_1: X
v_sep_append_1030_sep_166_sep_2_sep_178_sep_0: (X) & (X)
v_sep_append_1030_sep_169_sep_1: X
v_sep_append_1030_sep_169_sep_2_sep_172_sep_0: X
v_sep_fail_1301_sep_183_sep_0: (X) | (X)
v_sep_rev_1033_sep_142_sep_0: X
v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_145_sep_0: X
v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0: X
...........................Split conj [59] 1.852718
(Reconstrcut: 14 ****)
v_sep_append_1030_sep_152_sep_1: X
v_sep_append_1030_sep_152_sep_2_sep_155_sep_0: X
v_sep_append_1030_sep_166_sep_1: X
v_sep_append_1030_sep_166_sep_2_sep_178_sep_0: (X) & (X)
v_sep_append_1030_sep_169_sep_1: X
v_sep_append_1030_sep_169_sep_2_sep_172_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_183_sep_0: (X) | (X)
v_sep_rev_1033_sep_142_sep_0: X
v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_145_sep_0: X
v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0: X
...................
v_sep_append_1030_sep_152_sep_1: X
v_sep_append_1030_sep_152_sep_2_sep_155_sep_0: X
v_sep_append_1030_sep_166_sep_1: X
v_sep_append_1030_sep_166_sep_2_sep_178_sep_0: (X) & (X)
v_sep_append_1030_sep_169_sep_1: X
v_sep_append_1030_sep_169_sep_2_sep_172_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_183_sep_0: (X) | (X)
v_sep_rev_1033_sep_142_sep_0: X
v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_145_sep_0: X
v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0: X
.......
v_sep_append_1030_sep_152_sep_1: X
v_sep_append_1030_sep_152_sep_2_sep_155_sep_0: X
v_sep_append_1030_sep_166_sep_1: X
v_sep_append_1030_sep_166_sep_2_sep_178_sep_0: (X) & (X)
v_sep_append_1030_sep_169_sep_1: X
v_sep_append_1030_sep_169_sep_2_sep_172_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_183_sep_0: (X) | (X)
v_sep_rev_1033_sep_142_sep_0: X
v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_145_sep_0: X
v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0: X
...........................
v_sep_append_1030_sep_152_sep_1: X
v_sep_append_1030_sep_152_sep_2_sep_155_sep_0: X
v_sep_append_1030_sep_166_sep_1: X
v_sep_append_1030_sep_166_sep_2_sep_178_sep_0: (X) & (X)
v_sep_append_1030_sep_169_sep_1: X
v_sep_append_1030_sep_169_sep_2_sep_172_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_183_sep_0: (X) | (X)
v_sep_rev_1033_sep_142_sep_0: X
v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_145_sep_0: X
v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0: X
..................................
v_sep_append_1030_sep_152_sep_1: X
v_sep_append_1030_sep_152_sep_2_sep_155_sep_0: X
v_sep_append_1030_sep_166_sep_1: X
v_sep_append_1030_sep_166_sep_2_sep_178_sep_0: (X) & (X)
v_sep_append_1030_sep_169_sep_1: X
v_sep_append_1030_sep_169_sep_2_sep_172_sep_0: (X) & (X) & (X) & (X)
v_sep_fail_1301_sep_183_sep_0: (X) | (X)
v_sep_rev_1033_sep_142_sep_0: X
v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0: (X) & (X) & (X)
v_sep_rev_1033_sep_145_sep_0: X
v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0: X
................................................(0=0) & (v_sep_fail_1301_sep_183_sep_0($1352)) -> 1=0.
(($1352-1=0) & ($1353-$1354-$1355<>0)) & (v_sep_append_1030_sep_166_sep_2_sep_178_sep_0($1354,$1355,$1353)) & (v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0($1354,$1354)) -> v_sep_fail_1301_sep_183_sep_0($1352).
(($1356<>0) & (-$1356+$1357+1=0) & ($1358-$1359+1=0)) & (v_sep_append_1030_sep_169_sep_2_sep_172_sep_0($1357,$1360,$1358)) & (v_sep_append_1030_sep_166_sep_1($1356,$1360)) -> v_sep_append_1030_sep_166_sep_2_sep_178_sep_0($1356,$1360,$1359).
(($1361=0) & ($1362-$1363=0)) & (v_sep_append_1030_sep_169_sep_1($1361,$1363)) -> v_sep_append_1030_sep_169_sep_2_sep_172_sep_0($1361,$1363,$1362).
(($1361+1<>0) & (-$1361+$1364-1=0)) & (v_sep_append_1030_sep_166_sep_1($1364,$1363)) -> v_sep_append_1030_sep_169_sep_1($1361,$1363).
(0=0) & (v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0($1356,$1356)) -> v_sep_append_1030_sep_166_sep_1($1356,$1360).
(($1365-1=0) & ($1366<>0) & (-$1366+$1367+1=0)) & (v_sep_append_1030_sep_152_sep_2_sep_155_sep_0($1368,$1365,$1369)) & (v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0($1367,$1368)) & (v_sep_rev_1033_sep_142_sep_0($1366)) -> v_sep_rev_1033_sep_142_sep_1_sep_159_sep_0($1366,$1369).
(($1370=0) & ($1371-$1372=0)) & (v_sep_append_1030_sep_152_sep_1($1370,$1372)) -> v_sep_append_1030_sep_152_sep_2_sep_155_sep_0($1370,$1372,$1371).
(($1372-1=0) & ($1373<>0) & (-$1373+$1374+1=0)) & (v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0($1374,$1370)) & (v_sep_rev_1033_sep_142_sep_0($1373)) -> v_sep_append_1030_sep_152_sep_1($1370,$1372).
(($1375=0) & ($1376=0)) & (v_sep_rev_1033_sep_145_sep_0($1375)) -> v_sep_rev_1033_sep_145_sep_1_sep_148_sep_0($1375,$1376).
(($1375+1<>0) & (-$1375+$1377-1=0)) & (v_sep_rev_1033_sep_142_sep_0($1377)) -> v_sep_rev_1033_sep_145_sep_0($1375).
0=0 -> v_sep_rev_1033_sep_142_sep_0($1366).

          |- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
        solution:
          P[<append_1030@152:1>]($1425:int,$1427:int) = true
          P[<<append_1030@152:2>@155:0>]($1410:int,$1412:int,$1414:int) = true
          P[<append_1030@166:1>]($1400:int,$1402:int) = true
          P[<<append_1030@166:2>@178:0>]($1381:int,$1383:int,$1385:int) = (($1383 + $1381) = $1385)
          P[<append_1030@169:1>]($1405:int,$1407:int) = true
          P[<<append_1030@169:2>@172:0>]($1393:int,$1395:int,$1397:int) = (($1395 + $1393) = $1397)
          P[<fail_1301@183:0>]($1378:bool) = false
          P[<rev_1033@142:0>]($1422:int) = true
          P[<<rev_1033@142:1>@159:0>]($1388:int,$1390:int) = true
          P[<rev_1033@145:0>]($1430:int) = true
          P[<<rev_1033@145:1>@148:0>]($1417:int,$1419:int) = true
        
      end HcSolver.solve_ub(172673)[4] (0.281957 sec.)
      begin HcSolver.check_validity(173303)[4]
        input:
          P[<fail_1301@183:0>](<fail_1301@183:0>:bool)|- bot
          
          P[<<rev_1033@142:1>@159:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:1>:int),
          P[<<append_1030@166:2>@178:0>](<f_k_main_u_1296@180:1>:int,<f_k_main_u_1296@180:0>:int,<f_k_main_u_1296@180:4>:int),
          ((<f_k_main_u_1296@180:4> <> (<f_k_main_u_1296@180:1> + <f_k_main_u_1296@180:0>)) && <fail_1301@183:0>)
          |- P[<fail_1301@183:0>](<fail_1301@183:0>:bool)
          
          P[<append_1030@166:1>](<append_1030@166:0>:int,<append_1030@166:1>:int),
          P[<<append_1030@169:2>@172:0>]((-1 + <append_1030@166:0>):int,<append_1030@166:1>:int,(
                                         -1 + <<append_1030@166:2>@178:0>):int), (
          <append_1030@166:0> <> 0)
          |- P[<<append_1030@166:2>@178:0>](<append_1030@166:0>:int,<append_1030@166:1>:int,
                                            <<append_1030@166:2>@178:0>:int)
          
          P[<append_1030@169:1>](<append_1030@169:0>:int,<append_1030@169:1>:int),
          ((<append_1030@169:0> = 0) && (<<append_1030@169:2>@172:0> = <append_1030@169:1>))
          |- P[<<append_1030@169:2>@172:0>](<append_1030@169:0>:int,<append_1030@169:1>:int,
                                            <<append_1030@169:2>@172:0>:int)
          
          P[<append_1030@166:1>]((1 + <append_1030@169:0>):int,<append_1030@169:1>:int),
          ((1 + <append_1030@169:0>) <> 0) |- P[<append_1030@169:1>](
          <append_1030@169:0>:int,<append_1030@169:1>:int)
          
          P[<<rev_1033@142:1>@159:0>](<append_1030@166:0>:int,<append_1030@166:0>:int)|- P[<append_1030@166:1>](
          <append_1030@166:0>:int,<append_1030@166:1>:int)
          
          P[<rev_1033@142:0>](<rev_1033@142:0>:int),
          P[<<rev_1033@145:1>@148:0>]((-1 + <rev_1033@142:0>):int,var403:int),
          P[<<append_1030@152:2>@155:0>](var403:int,1:int,<<rev_1033@142:1>@159:0>:int), (
          <rev_1033@142:0> <> 0) |- P[<<rev_1033@142:1>@159:0>](<rev_1033@142:0>:int,
                                                                <<rev_1033@142:1>@159:0>:int)
          
          P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int),
          ((<append_1030@152:0> = 0) && (<<append_1030@152:2>@155:0> = <append_1030@152:1>))
          |- P[<<append_1030@152:2>@155:0>](<append_1030@152:0>:int,<append_1030@152:1>:int,
                                            <<append_1030@152:2>@155:0>:int)
          
          P[<rev_1033@142:0>](<f_rev_1295@150:0>:int),
          P[<<rev_1033@145:1>@148:0>]((-1 + <f_rev_1295@150:0>):int,<append_1030@152:0>:int),
          ((<append_1030@152:1> = 1) && (<f_rev_1295@150:0> <> 0))
          |- P[<append_1030@152:1>](<append_1030@152:0>:int,<append_1030@152:1>:int)
          
          P[<rev_1033@145:0>](<rev_1033@145:0>:int), ((<rev_1033@145:0> = 0) && (<<rev_1033@145:1>@148:0> = 0))
          |- P[<<rev_1033@145:1>@148:0>](<rev_1033@145:0>:int,<<rev_1033@145:1>@148:0>:int)
          
          P[<rev_1033@142:0>]((1 + <rev_1033@145:0>):int), ((1 + <rev_1033@145:0>) <> 0)
          |- P[<rev_1033@145:0>](<rev_1033@145:0>:int)
          
          |- P[<rev_1033@142:0>](<rev_1033@142:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(173303)[4] (0.005999 sec.)
      solution:
        P[<append_1030@152:1>]($1425:int,$1427:int) = true
        P[<<append_1030@152:2>@155:0>]($1410:int,$1412:int,$1414:int) = true
        P[<append_1030@166:1>]($1400:int,$1402:int) = true
        P[<<append_1030@166:2>@178:0>]($1381:int,$1383:int,$1385:int) = (($1383 + $1381) = $1385)
        P[<append_1030@169:1>]($1405:int,$1407:int) = true
        P[<<append_1030@169:2>@172:0>]($1393:int,$1395:int,$1397:int) = (($1395 + $1393) = $1397)
        P[<fail_1301@183:0>]($1378:bool) = false
        P[<rev_1033@142:0>]($1422:int) = true
        P[<<rev_1033@142:1>@159:0>]($1388:int,$1390:int) = true
        P[<rev_1033@145:0>]($1430:int) = true
        P[<<rev_1033@145:1>@148:0>]($1417:int,$1419:int) = true
    end YhornInterface.solve(172672)[3] (0.289956 sec.)
    
  end RefTypeInfer.infer_etrs(110246)[2] (0.941857 sec.)
  refinement types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: v1:int -> (v2:int -> X) -> X
    rev_1033: v1:int -> (v2:int -> X) -> X
    f_rev_1295: v1:int -> (v2:int -> X) -> v4:int -> X
    append_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    k_main_u_1218: v1:int -> v2:int -> (v3:unit -> X) -> v5:unit -> X
    append_1030: v1:int -> v2:int -> (v3:{v3:int | (v3 = (v1 + v2))} -> X) -> X
    append_1030: v1:int -> v2:int -> (v3:{v3:int | (v3 = (v1 + v2))} -> X) -> X
    f_append_1294: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_k_main_u_1296: v1:int -> v2:int -> v3:unit -> (v4:unit -> X) -> v6:int -> X
    fail_1301: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1300: var554:int -> var553:int -> var552:unit -> X
    fail_1302: var558:bool -> (var557:unit -> X) -> X
  abstraction types:
    main_1293: X
    f_1298: v1:int -> X
    f_1299: v1:int -> v2:int -> X
    main_1035: v1:int -> v2:int -> (v3:unit -> X) -> X
    rev_1033: var559:int -> (var560:int -> X) -> X
    f_rev_1295: v1:int -> (v2:int -> X) -> v4:int -> X
    append_1030: var568:int -> var569:int -> (var570:int[var570 -> (var570 = (var568 + var569))] -> X) -> X
    f_main_1297: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    k_main_u_1218: v1:int -> v2:int -> (v3:unit -> X) -> v5:unit -> X
    f_append_1294: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_k_main_u_1296: v1:int -> v2:int -> v3:unit -> (v4:unit -> X) -> v6:int -> X
    fail_1301: v1:bool -> (v2:unit -> X) -> X
    f_1300: var554:int -> var553:int -> var552:unit -> X
    fail_1302: var558:bool -> (var557:unit -> X) -> X
  
end AbsTypeInfer.refine(110245)[1] (0.955855 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0; 0; 1

Program with abstraction types (CEGAR-cycle 5)::
Main: main_1293
  main_1293 -> (rand_int f_1298)
  append_1030 x_1031 y_1032 k_append_1105 when (x_1031 = 0) -> (k_append_1105 y_1032)
  append_1030 x_1031 y_1032 k_append_1105 when (not (x_1031 = 0)) ->
      (append_1030 (x_1031 - 1) y_1032 (f_append_1294 x_1031 y_1032 k_append_1105))
  f_1298 x_1251 -> (rand_int (f_1299 x_1251))
  f_1299 x_1251 x_1264 -> (main_1035 x_1251 x_1264 (f_1300 x_1251 x_1264))
  f_1300 x_1251 x_1264 x_1248 -> end
  f_append_1294 x_1031 y_1032 k_append_1105 x_1109 -> (k_append_1105 (1 + x_1109))
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (x_1222 = (n_1036 + m_1037)) -> (k_main_1191 ())
  f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191 x_1222 when (not (x_1222 = (n_1036 + m_1037))) ->
      (fail_1301 true k_main_1191)
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (x_1197 = n_1036) -> (k_main_u_1218 m_1037 n_1036 k_main_1191 ())
  f_main_1297 m_1037 n_1036 k_main_1191 x_1197 when (not (x_1197 = n_1036)) ->
      (fail_1302 true (k_main_u_1218 m_1037 n_1036 k_main_1191))
  f_rev_1295 n_1034 k_rev_1138 x_1163 -> (append_1030 x_1163 1 k_rev_1138)
  fail_1301 b k -> {fail} => (k ())
  fail_1302 b k -> {fail} => (k ())
  k_main_u_1218 m_1037 n_1036 k_main_1191 x_1194 ->
      (append_1030 n_1036 m_1037 (f_k_main_u_1296 m_1037 n_1036 x_1194 k_main_1191))
  main_1035 n_1036 m_1037 k_main_1191 -> (rev_1033 n_1036 (f_main_1297 m_1037 n_1036 k_main_1191))
  rev_1033 n_1034 k_rev_1138 when (n_1034 = 0) -> (k_rev_1138 0)
  rev_1033 n_1034 k_rev_1138 when (not (n_1034 = 0)) -> (rev_1033 (n_1034 - 1) (f_rev_1295 n_1034 k_rev_1138))
Types:
  main_1293 : X
  append_1030 : (x_1:int ->
                 x_2:int[x_1 <= -2; x_1 <= 0; x_2 = 1] ->
                 (x_4:int[x_1 = -x_2 + x_4; x_2 = x_4; x_1 = 0 && x_4 = 1] -> X) -> X)
  fail_1301 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1302 : (x_1:bool[x_1] -> (unit -> X) -> X)
  rev_1033 : (x_1:int -> (x_3:int[x_1 = 0; x_3 <= 0; x_1 = x_3] -> X) -> X)
  
(5-1) Abstracting ... DONE!

(5-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  append: ((x_1:int -> ({x_2:int | (x_1 <= 0 && x_2 = 1) && x_1 <= -2} -> Bottom)) /\ 
           (x_3:int -> ({x_4:int | (x_3 <= 0 && x_4 <> 1) && x_3 <= -2} -> Bottom)) /\ 
           (x_5:int -> ({x_6:int | (x_5 > 0 && x_6 = 1) && x_5 <= -2} -> Bottom)) /\ 
           (x_7:int -> ({x_8:int | (x_7 > 0 && x_8 <> 1) && x_7 <= -2} -> Bottom)) /\ 
           (x_9:int -> (x_10:{x_10:int | (x_9 <= 0 && x_10 = 1) && x_9 > -2} -> {x_11:int | x_9 = (-x_10) + x_11})) /\ 
           (x_12:int ->
                (x_13:{x_13:int | (x_12 <= 0 && x_13 = 1) && x_12 > -2} ->
                     {x_14:int | x_13 = x_14 && x_12 = (-x_13) + x_14})) /\
           (x_15:int -> (x_16:{x_16:int | (x_15 <= 0 && x_16 <> 1) && x_15 > -2} -> {x_17:int | x_15 = (-x_16) + x_17})) /\
           (x_18:int -> (x_19:{x_19:int | (x_18 > 0 && x_19 = 1) && x_18 > -2} -> {x_20:int | x_18 = (-x_19) + x_20})) /\
           (x_21:int ->
                (x_22:{x_22:int | (x_21 > 0 && x_22 = 1) && x_21 > -2} ->
                     ({x_23:int | x_22 = x_23 && x_21 = (-x_22) + x_23} \/ 
                      {x_24:int | (x_22 <> x_24 && not (x_21 = 0 && x_24 = 1)) && x_21 = (-x_22) + x_24}))) /\
           (x_25:int -> (x_26:{x_26:int | (x_25 > 0 && x_26 <> 1) && x_25 > -2} -> {x_27:int | x_25 = (-x_26) + x_27})))
  rev: ((x_1:int ->
             ({x_2:int | x_1 = x_2 && x_1 = 0} \/ {x_3:int | (x_3 <= 0 && x_1 = x_3) && x_1 <> 0} \/ 
              {x_4:int | (x_4 > 0 && x_1 = x_4) && x_1 <> 0})) /\
        (x_5:int ->
             ({x_6:int | (x_6 <= 0 && x_5 = x_6) && x_5 = 0} \/ {x_7:int | 
              (x_7 <= 0 && x_5 = x_7) && x_5 <> 0} \/ {x_8:int | (x_8 > 0 && x_5 = x_8) && x_5 <> 0})))

cycles: 5
total: 3.400 sec
  abst: 0.119 sec
  mc: 0.262 sec
  refine: 2.295 sec
    exparam: 0.587 sec
