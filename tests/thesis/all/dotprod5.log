MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi dotprod5.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 a_1036 x_1037 =
   let u_1097 = a_1036 i_1034 
   in
   let a_1038 j_1039 = if i_1034 = j_1039 then
                         x_1037
                       else
                         a_1036 j_1039 
   in
     a_1038 
 in
 let rec bcopy_aux_1040 m_1041 src_1042 des_1043 i_1044 =
   if i_1044 >= m_1041 then
     ()
   else
     bcopy_aux_1040 m_1041 src_1042 (update_1033 i_1044 m_1041 des_1043 (src_1042 i_1044)) (i_1044 + 1) 
 in
 let main_1045 n_1046 m_1047 i_1048 =
   let array1_1049 = make_array_1030 n_1046 
   in
   let array2_1050 = make_array_1030 m_1047 
   in
     if i_1048 = 0 && n_1046 <= m_1047 then
       bcopy_aux_1040 n_1046 array1_1049 array2_1050 i_1048
     else
       () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 a_1036 x_1037 =
   let u_1097 = a_1036 i_1034 
   in
   let a_1038 j_1039 = if i_1034 = j_1039 then
                         x_1037
                       else
                         a_1036 j_1039 
   in
     a_1038 
 in
 let rec bcopy_aux_1040 m_1041 src_1042 des_1043 i_1044 =
   if i_1044 >= m_1041 then
     ()
   else
     bcopy_aux_1040 m_1041 src_1042 (update_1033 i_1044 m_1041 des_1043 (src_1042 i_1044)) (i_1044 + 1) 
 in
 let main_1045 n_1046 m_1047 i_1048 =
   let array1_1049 = make_array_1030 n_1046 
   in
   let array2_1050 = make_array_1030 m_1047 
   in
     if i_1048 = 0 && n_1046 <= m_1047 then
       bcopy_aux_1040 n_1046 array1_1049 array2_1050 i_1048
     else
       () 
 in
 let main_1196 =
   let arg1_1193 = rand_int () 
   in
   let arg2_1194 = rand_int () 
   in
   let arg3_1195 = rand_int () 
   in
     main_1045 arg1_1193 arg2_1194 arg3_1195 
 in
   ()

copy_poly::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let update_1198 (i_1034:int) (n_1035:int) (a_1036:(int -> int)) (x_1037:int) =
   let u_1097 = a_1036 i_1034 
   in
   let a_1038 (j_1039:int) = if i_1034 = j_1039 then
                               x_1037
                             else
                               a_1036 j_1039 
   in
     a_1038 
 in
 let rec bcopy_aux_1197 (m_1041:int) (src_1042:(int -> int)) (des_1043:(
   int -> int)) (i_1044:int) =
   if i_1044 >= m_1041 then
     ()
   else
     bcopy_aux_1197 m_1041 src_1042 (update_1198 i_1044 m_1041 des_1043 (src_1042 i_1044)) (i_1044 + 1) 
 in
 let main_1045 (n_1046:int) (m_1047:int) (i_1048:int) =
   let array1_1049 = make_array_1030 n_1046 
   in
   let array2_1050 = make_array_1030 m_1047 
   in
     if i_1048 = 0 && n_1046 <= m_1047 then
       bcopy_aux_1197 n_1046 array1_1049 array2_1050 i_1048
     else
       () 
 in
 let main_1196 =
   let arg1_1193 = rand_int () 
   in
   let arg2_1194 = rand_int () 
   in
   let arg3_1195 = rand_int () 
   in
     main_1045 arg1_1193 arg2_1194 arg3_1195 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1226:(int -> X)) =
   let k_make_array_u_1243 (x_1229:unit) = k_make_array_1226 0 
   in
   let k_make_array_u_1232 (b_1244:bool) =
     if b_1244 then
       k_make_array_u_1243 ()
     else
       {|fail|} () k_make_array_u_1243 
   in
     if 0 <= i_1032 then
       k_make_array_u_1232 (i_1032 < n_1031)
     else
       k_make_array_u_1232 false 
 in
 let update_1198
   (i_1034:int) (n_1035:int) (a_1036:(int -> ((int -> X) -> X))) (x_1037:int) (k_update_1291:(
   (int -> ((int -> X) -> X)) -> X)) =
   a_1036 i_1034
     (fun x_1297 ->
        k_update_1291
          (let a_1038 (j_1039:int) (k_update_a_1312:(int -> X)) =
             if i_1034 = j_1039 then
               k_update_a_1312 x_1037
             else
               a_1036 j_1039 k_update_a_1312 
           in
             a_1038)) 
 in
 let rec bcopy_aux_1197
   (m_1041:int) (src_1042:(int -> ((int -> X) -> X))) (des_1043:(int -> ((int -> X) -> X))) (i_1044:int) (k_bcopy_aux_1376:(
   unit -> X)) =
   if i_1044 >= m_1041 then
     k_bcopy_aux_1376 ()
   else
     src_1042 i_1044
       (fun x_1429 ->
          update_1198 i_1044 m_1041 des_1043 x_1429
            (fun x_1446 -> bcopy_aux_1197 m_1041 src_1042 x_1446 (i_1044 + 1) k_bcopy_aux_1376)) 
 in
 let main_1045 (n_1046:int) (m_1047:int) (i_1048:int) (k_main_1477:(unit -> X)) =
   let k_main_1512 (b_1542:bool) =
     if b_1542 then
       bcopy_aux_1197 n_1046 (make_array_1030 n_1046) (make_array_1030 m_1047) i_1048 k_main_1477
     else
       k_main_1477 () 
   in
     if i_1048 = 0 then
       k_main_1512 (n_1046 <= m_1047)
     else
       k_main_1512 false 
 in
   rand_int_cps ()
     (fun x_1548 ->
        rand_int_cps ()
          (fun x_1561 -> rand_int_cps () (fun x_1574 -> main_1045 x_1548 x_1561 x_1574 (fun x_1545 -> end))))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1607
  main_1607 -> (rand_int f_1611)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (i_1034 = j_1039) -> (k_update_a_1312 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (
      not (i_1034 = j_1039)) -> (a_1036 j_1039 k_update_a_1312)
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (i_1044 >= m_1041) -> (k_bcopy_aux_1376 ())
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (
      not (i_1044 >= m_1041)) -> (src_1042 i_1044 (f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042))
  f_1611 x_1548 -> (rand_int (f_1612 x_1548))
  f_1612 x_1548 x_1561 -> (rand_int (f_1613 x_1548 x_1561))
  f_1613 x_1548 x_1561 x_1574 -> (main_1045 x_1548 x_1561 x_1574 (f_1614 x_1548 x_1561 x_1574))
  f_1614 x_1548 x_1561 x_1574 x_1545 -> end
  f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 ->
      (update_1198 i_1044 m_1041 des_1043 x_1429 (f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042))
  f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 ->
      (bcopy_aux_1197 m_1041 src_1042 x_1446 (i_1044 + 1) k_bcopy_aux_1376)
  f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 ->
      (k_update_1291 (a_1038 i_1034 n_1035 x_1037 x_1297 a_1036))
  fail_1615 b k -> {fail} => (k ())
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when b_1542 ->
      (bcopy_aux_1197 n_1046 (make_array_1030 n_1046) (make_array_1030 m_1047) i_1048 k_main_1477)
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when (not b_1542) -> (k_main_1477 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when b_1244 ->
      (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when (not b_1244) ->
      (fail_1615 true (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226))
  k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 -> (k_make_array_1226 0)
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (i_1048 = 0) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 (n_1046 <= m_1047))
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (not (i_1048 = 0)) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 false)
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (0 <= i_1032) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (not (0 <= i_1032)) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 false)
  update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 ->
      (a_1036 i_1034 (f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291))
Types:
  main_1607 : X
  bcopy_aux_1197 : (int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  fail_1615 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1607 ... --> 
  f_1611 ... --> 
  f_1612 ... --> 
  f_1613 ... --> 
  main_1045 [1/2] ... --> 
  k_main_1512 [1/2] ... --> 
  bcopy_aux_1197 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1232 [2/2] ... --> 
  fail_1615 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(237)[1]
  program:
    main_1607  | true = ((Random.int 0) f_1611)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    i_1034 = j_1039) = (k_update_a_1312 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    not (i_1034 = j_1039)) = (a_1036 j_1039
                                     k_update_a_1312)
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    i_1044 >= m_1041) = (k_bcopy_aux_1376 ())
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    not (i_1044 >= m_1041)) = (src_1042 i_1044
                                        (f_bcopy_aux_1609 i_1044
                                                          m_1041
                                                          des_1043
                                                          k_bcopy_aux_1376
                                                          src_1042))
    f_1611 x_1548 | true = ((Random.int 0) (f_1612 x_1548))
    f_1612 x_1548 x_1561 | true = ((Random.int 0) (f_1613 x_1548
                                                          x_1561))
    f_1613 x_1548 x_1561 x_1574 | true = (main_1045 x_1548
                                                    x_1561
                                                    x_1574
                                                    (f_1614 x_1548
                                                            x_1561
                                                            x_1574))
    f_1614 x_1548 x_1561 x_1574 x_1545 | true = end
    f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 | true = (
    update_1198 i_1044
                m_1041
                des_1043
                x_1429
                (f_bcopy_aux_1610 i_1044
                                  m_1041
                                  x_1429
                                  k_bcopy_aux_1376
                                  src_1042))
    f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 | true = (
    bcopy_aux_1197 m_1041
                   src_1042
                   x_1446
                   (i_1044 + 1)
                   k_bcopy_aux_1376)
    f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 | true = (
    k_update_1291 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1297
                          a_1036))
    fail_1615 b k | true = (fail ())
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | b_1542 = (bcopy_aux_1197
                                                                    n_1046
                                                                    (
                                                                    make_array_1030 n_1046)
                                                                    (
                                                                    make_array_1030 m_1047)
                                                                    i_1048
                                                                    k_main_1477)
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | (not b_1542) = (
    k_main_1477 ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | b_1244 = (
    k_make_array_u_1243 i_1032
                        n_1031
                        k_make_array_1226
                        ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | (not b_1244) = (
    fail_1615 true
              (k_make_array_u_1243 i_1032
                                   n_1031
                                   k_make_array_1226))
    k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 | true = (
    k_make_array_1226 0)
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (i_1048 = 0) = (k_main_1512
                                                                   i_1048
                                                                   m_1047
                                                                   n_1046
                                                                   k_main_1477
                                                                   (n_1046 <= m_1047))
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (not (i_1048 = 0)) = (
    k_main_1512 i_1048
                m_1047
                n_1046
                k_main_1477
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (0 <= i_1032) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (not (0 <= i_1032)) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        false)
    update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 | true = (a_1036
                                                                    i_1034
                                                                    (
                                                                    f_update_1608
                                                                    i_1034
                                                                    n_1035
                                                                    x_1037
                                                                    a_1036
                                                                    k_update_1291))
    main_1607:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    bcopy_aux_1197:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1611:int -> X
    f_1612:int -> int -> X
    f_1613:int -> int -> int -> X
    f_1614:int -> int -> int -> unit -> X
    f_bcopy_aux_1609:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1610:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> X
    f_update_1608:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1615:bool -> (unit -> X) -> X
    k_main_1512:int -> int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1232:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1243:int -> int -> (int -> X) -> unit -> X
    main_1045:int -> int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1198:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1611,f_1612,f_1613,f_1614,f_bcopy_aux_1609,f_bcopy_aux_1610,f_update_1608,k_main_1512,k_make_array_u_1232,k_make_array_u_1243,main_1045,make_array_1030,update_1198
  counterexample: 0:0:0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1611@4:0> = var2)
     [true.nop((<f_1612@7:0> = <f_1611@4:0>) && (<f_1612@7:1> = var3))
      [true.nop((<f_1613@10:0> = <f_1612@7:0>) && ((<f_1613@10:1> = <f_1612@7:1>) && (<f_1613@10:2> = var4)))
       [true.
        ((<main_1045@12:0> = <f_1613@10:0>) &&
         ((<main_1045@12:1> = <f_1613@10:1>) && (<main_1045@12:2> = <f_1613@10:2>)))
        [(<main_1045@12:2> = 0).
         ((<k_main_1512@15:0> = <main_1045@12:2>) &&
          ((<k_main_1512@15:1> = <main_1045@12:1>) &&
           ((<k_main_1512@15:2> = <main_1045@12:0>) && (<k_main_1512@15:4> = (<main_1045@12:0> <= <main_1045@12:1>)))))
         [<k_main_1512@15:4>.
          ((<bcopy_aux_1197@18:0> = <k_main_1512@15:2>) && (<bcopy_aux_1197@18:3> = <k_main_1512@15:0>))
          [(not (<bcopy_aux_1197@18:3> >= <bcopy_aux_1197@18:0>)).
           (<<bcopy_aux_1197@18:1>@21:0> = <bcopy_aux_1197@18:3>)
           [true.
            ((<make_array_1030@23:0> = <k_main_1512@15:2>) && (<make_array_1030@23:1> = <<bcopy_aux_1197@18:1>@21:0>))
            [(not (0 <= <make_array_1030@23:1>)).
             ((<k_make_array_u_1232@26:0> = <make_array_1030@23:1>) &&
              ((<k_make_array_u_1232@26:1> = <make_array_1030@23:0>) && (<k_make_array_u_1232@26:3> = false)))
             [(not <k_make_array_u_1232@26:3>).(<fail_1615@29:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(238)[2]
    horn clauses:
      P[<fail_1615@29:0>](<fail_1615@29:0>:bool)|- bot
      
      P[<k_make_array_u_1232@26:3>](<k_make_array_u_1232@26:0>:int,<k_make_array_u_1232@26:1>:int,false:bool),
      <fail_1615@29:0> |- P[<fail_1615@29:0>](<fail_1615@29:0>:bool)
      
      P[<make_array_1030@23:1>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
      ((0 > <k_make_array_u_1232@26:0>) && (not <k_make_array_u_1232@26:3>))
      |- P[<k_make_array_u_1232@26:3>](<k_make_array_u_1232@26:0>:int,
                                       <k_make_array_u_1232@26:1>:int,
                                       <k_make_array_u_1232@26:3>:bool)
      
      P[<k_main_1512@15:4>](<bcopy_aux_1197@18:3>:int,<k_main_1512@15:1>:int,<make_array_1030@23:0>:int,true:bool),
      P[<<bcopy_aux_1197@18:1>@21:0>](<make_array_1030@23:0>:int,<make_array_1030@23:1>:int)|- P[<make_array_1030@23:1>](
      <make_array_1030@23:0>:int,<make_array_1030@23:1>:int)
      
      P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
      (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
      |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int)
      
      P[<k_main_1512@15:4>](<bcopy_aux_1197@18:3>:int,<k_main_1512@15:1>:int,<bcopy_aux_1197@18:0>:int,true:bool)|- P[<bcopy_aux_1197@18:3>](
      <bcopy_aux_1197@18:0>:int,<bcopy_aux_1197@18:3>:int)
      
      P[<main_1045@12:2>](<k_main_1512@15:2>:int,<k_main_1512@15:1>:int,<k_main_1512@15:0>:int),
      ((<k_main_1512@15:0> = 0) && (<k_main_1512@15:4> = (<k_main_1512@15:2> <= <k_main_1512@15:1>)))
      |- P[<k_main_1512@15:4>](<k_main_1512@15:0>:int,<k_main_1512@15:1>:int,
                               <k_main_1512@15:2>:int,<k_main_1512@15:4>:bool)
      
      P[<f_1613@10:2>](<main_1045@12:0>:int,<main_1045@12:1>:int,<main_1045@12:2>:int)|- P[<main_1045@12:2>](
      <main_1045@12:0>:int,<main_1045@12:1>:int,<main_1045@12:2>:int)
      
      P[<f_1612@7:1>](<f_1613@10:0>:int,<f_1613@10:1>:int)|- P[<f_1613@10:2>](
      <f_1613@10:0>:int,<f_1613@10:1>:int,<f_1613@10:2>:int)
      
      P[<f_1611@4:0>](<f_1612@7:0>:int)|- P[<f_1612@7:1>](<f_1612@7:0>:int,
                                                          <f_1612@7:1>:int)
      
      |- P[<f_1611@4:0>](<f_1611@4:0>:int)
    call trees:
      <main_1607@1>
        <f_1611@4>
          <f_1612@7>
            <f_1613@10>
              <main_1045@12>
                <k_main_1512@15>
                  <bcopy_aux_1197@18>
                  </<bcopy_aux_1197@18:1>@21>
                  <make_array_1030@23>
                    <k_make_array_u_1232@26>
                      <fail_1615@29>
    inlined horn clauses:
      P[<fail_1615@29:0>](<fail_1615@29:0>:bool)|- bot
      
      P[<<bcopy_aux_1197@18:1>@21:0>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
      ((0 > <k_make_array_u_1232@26:0>) && <fail_1615@29:0>) |- P[<fail_1615@29:0>](
      <fail_1615@29:0>:bool)
      
      P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
      (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
      |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int)
      
       (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                               <bcopy_aux_1197@18:3>:int)
    begin ParamSubstInfer.infer(1446)[3]
      
    end ParamSubstInfer.infer(1446)[3] (0.039994 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1448)[3]
      
    end RefTypeInfer.elim_coeffs(1448)[3] (0.000000 sec.)
    begin GenHcSolver.solve(1573)[3]
      Horn clauses:
        P[<fail_1615@29:0>](<fail_1615@29:0>:bool)|- bot
        
        P[<<bcopy_aux_1197@18:1>@21:0>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
        ((0 > <k_make_array_u_1232@26:0>) && <fail_1615@29:0>) |- P[<fail_1615@29:0>](
        <fail_1615@29:0>:bool)
        
        P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
        (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
        |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,
                                           <<bcopy_aux_1197@18:1>@21:0>:int)
        
         (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                                 <bcopy_aux_1197@18:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<bcopy_aux_1197@18:3>:int) = (<bcopy_aux_1197@18:3> = 0)
        P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int) =
        ((<<bcopy_aux_1197@18:1>@21:0> = 0) && (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>))
        P[<fail_1615@29:0>](<fail_1615@29:0>:bool) = false
      upper bounds:
        P[<fail_1615@29:0>](var6:bool) = true
      begin GenHcSolver.classify_pids(2331)[4]
        output:
          [<fail_1615@29:0>]
      end GenHcSolver.classify_pids(2331)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2334)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2335)[5]
          begin InterpProver.interpolate_fresh(2336)[6]
            begin InterpProver.interpolate_log(2337)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2338)[8]
                begin InterpProver.interpolate_simplify(2339)[9]
                  begin InterpProver.interpolate_quick(2352)[10]
                    
                  end InterpProver.interpolate_quick(2352)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2356)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2356)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2339)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2338)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2337)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2336)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2335)[5] (0.000000 sec.)
        output:
          P[<fail_1615@29:0>](<fail_1615@29:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2334)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1197@18:1>@21:0>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
        (0 > <k_make_array_u_1232@26:0>) |- bot
        
        P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
        (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
        |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,
                                           <<bcopy_aux_1197@18:1>@21:0>:int)
        
         (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                                 <bcopy_aux_1197@18:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<bcopy_aux_1197@18:3>:int) = (<bcopy_aux_1197@18:3> = 0)
        P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int) =
        ((<<bcopy_aux_1197@18:1>@21:0> = 0) && (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>))
      upper bounds:
        P[<<bcopy_aux_1197@18:1>@21:0>](var7:int,var8:int) = (0 <= var8)
      begin GenHcSolver.classify_pids(3212)[4]
        output:
          [<<bcopy_aux_1197@18:1>@21:0>]
      end GenHcSolver.classify_pids(3212)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1197@18:1>@21:0> = 0) && (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>))
      nub:(not (0 <= <<bcopy_aux_1197@18:1>@21:0>))
      begin ApronInterface.convex_hull_interpolate(3215)[4]
        lb:((<<bcopy_aux_1197@18:1>@21:0> = 0) && (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>))
        nub:(not (0 <= <<bcopy_aux_1197@18:1>@21:0>))
        lb':((<<bcopy_aux_1197@18:1>@21:0> = 0) && (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>))
        nub':(not (0 <= <<bcopy_aux_1197@18:1>@21:0>))
        begin InterpProver.interpolate(3216)[5]
          begin InterpProver.interpolate_fresh(3217)[6]
            begin InterpProver.interpolate_log(3218)[7]
              input1: ((<<bcopy_aux_1197@18:1>@21:0> = 0) && (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>))
              input2: (not (0 <= <<bcopy_aux_1197@18:1>@21:0>))
              begin InterpProver.interpolate_check(3219)[8]
                begin InterpProver.interpolate_simplify(3220)[9]
                  begin InterpProver.interpolate_quick(3253)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(3262)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(3263)[12]
                        begin CsisatInterface.interpolate_csisat_log(3264)[13]
                          input1: (0 = v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0 & (1 + v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0) <= v_sep_bcopy_aux_1197_sep_18_sep_0)
                          input2: (1 + v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(3265)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(3265)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(3264)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(3263)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(3262)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(3253)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(3220)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(3219)[8] (0.002000 sec.)
              output: (0 <= <<bcopy_aux_1197@18:1>@21:0>)
            end InterpProver.interpolate_log(3218)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(3217)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(3216)[5] (0.002000 sec.)
        output:
          P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int) =
          (0 <= <<bcopy_aux_1197@18:1>@21:0>)
      end ApronInterface.convex_hull_interpolate(3215)[4] (0.002000 sec.)
      Horn clauses:
        P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
        ((<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>) && (0 > <<bcopy_aux_1197@18:1>@21:0>)) |- bot
        
         (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                                 <bcopy_aux_1197@18:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<bcopy_aux_1197@18:3>:int) = (<bcopy_aux_1197@18:3> = 0)
      upper bounds:
        P[<bcopy_aux_1197@18:3>](var9:int,var10:int) = ((var10 >= var9) || (0 <= var10))
      begin GenHcSolver.classify_pids(3979)[4]
        output:
          [<bcopy_aux_1197@18:3>]
      end GenHcSolver.classify_pids(3979)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1197@18:3> = 0)
      nub:(not ((<bcopy_aux_1197@18:3> >= <bcopy_aux_1197@18:0>) || (0 <= <bcopy_aux_1197@18:3>)))
      begin ApronInterface.convex_hull_interpolate(3982)[4]
        lb:(<bcopy_aux_1197@18:3> = 0)
        nub:(not ((<bcopy_aux_1197@18:3> >= <bcopy_aux_1197@18:0>) || (0 <= <bcopy_aux_1197@18:3>)))
        lb':(<bcopy_aux_1197@18:3> = 0)
        nub':(not ((<bcopy_aux_1197@18:3> >= <bcopy_aux_1197@18:0>) || (0 <= <bcopy_aux_1197@18:3>)))
        begin InterpProver.interpolate(3983)[5]
          begin InterpProver.interpolate_fresh(3984)[6]
            begin InterpProver.interpolate_log(3985)[7]
              input1: (<bcopy_aux_1197@18:3> = 0)
              input2: (not ((<bcopy_aux_1197@18:3> >= <bcopy_aux_1197@18:0>) || (0 <= <bcopy_aux_1197@18:3>)))
              begin InterpProver.interpolate_check(3986)[8]
                begin InterpProver.interpolate_simplify(3987)[9]
                  begin InterpProver.interpolate_quick(4026)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(4035)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(4036)[12]
                        begin CsisatInterface.interpolate_csisat_log(4037)[13]
                          input1: 0 = v_sep_bcopy_aux_1197_sep_18_sep_3
                          input2: ((1 + v_sep_bcopy_aux_1197_sep_18_sep_3) <= 0 & (1 + v_sep_bcopy_aux_1197_sep_18_sep_3) <= v_sep_bcopy_aux_1197_sep_18_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(4038)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(4038)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1197_sep_18_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(4037)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1197_sep_18_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1197_sep_18_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(4036)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(4035)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(4026)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3987)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3986)[8] (0.001000 sec.)
              output: (0 <= <bcopy_aux_1197@18:3>)
            end InterpProver.interpolate_log(3985)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(3984)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(3983)[5] (0.001000 sec.)
        output:
          P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<bcopy_aux_1197@18:3>:int) = (0 <= <bcopy_aux_1197@18:3>)
      end ApronInterface.convex_hull_interpolate(3982)[4] (0.001000 sec.)
      begin HcSolver.check_validity(4154)[4]
        input:
          P[<fail_1615@29:0>](<fail_1615@29:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@18:1>@21:0>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
          ((0 > <k_make_array_u_1232@26:0>) && <fail_1615@29:0>) |- P[<fail_1615@29:0>](
          <fail_1615@29:0>:bool)
          
          P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
          (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
          |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,
                                             <<bcopy_aux_1197@18:1>@21:0>:int)
          
           (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                                   <bcopy_aux_1197@18:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(4154)[4] (0.001000 sec.)
      solution:
        P[<fail_1615@29:0>](<fail_1615@29:0>:bool) = false
        P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int) =
        (0 <= <<bcopy_aux_1197@18:1>@21:0>)
        P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<bcopy_aux_1197@18:3>:int) = (0 <= <bcopy_aux_1197@18:3>)
    end GenHcSolver.solve(1573)[3] (0.020997 sec.)
    begin GenHcSolver.solve(4385)[3]
      Horn clauses:
        P[<fail_1615@29:0>](<fail_1615@29:0>:bool)|- bot
        
        P[<<bcopy_aux_1197@18:1>@21:0>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
        ((0 > <k_make_array_u_1232@26:0>) && <fail_1615@29:0>) |- P[<fail_1615@29:0>](
        <fail_1615@29:0>:bool)
        
        P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
        (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
        |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,
                                           <<bcopy_aux_1197@18:1>@21:0>:int)
        
         (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                                 <bcopy_aux_1197@18:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<bcopy_aux_1197@18:3>:int) = (<bcopy_aux_1197@18:3> = 0)
        P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int) =
        ((<<bcopy_aux_1197@18:1>@21:0> = 0) && (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>))
        P[<fail_1615@29:0>](<fail_1615@29:0>:bool) = false
      upper bounds:
        P[<fail_1615@29:0>](var12:bool) = true
      begin GenHcSolver.classify_pids(5143)[4]
        output:
          [<fail_1615@29:0>]
      end GenHcSolver.classify_pids(5143)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(5146)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(5149)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5149)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5154)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5154)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(5157)[5]
          begin InterpProver.interpolate_fresh(5158)[6]
            begin InterpProver.interpolate_log(5159)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(5160)[8]
                begin InterpProver.interpolate_simplify(5161)[9]
                  begin InterpProver.interpolate_quick(5176)[10]
                    
                  end InterpProver.interpolate_quick(5176)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(5180)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(5180)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5161)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5160)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(5159)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(5158)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(5157)[5] (0.001000 sec.)
        output:
          P[<fail_1615@29:0>](<fail_1615@29:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(5146)[4] (0.001000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1197@18:1>@21:0>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
        (0 > <k_make_array_u_1232@26:0>) |- bot
        
        P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
        (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
        |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,
                                           <<bcopy_aux_1197@18:1>@21:0>:int)
        
         (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                                 <bcopy_aux_1197@18:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<bcopy_aux_1197@18:3>:int) = (<bcopy_aux_1197@18:3> = 0)
        P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int) =
        ((<<bcopy_aux_1197@18:1>@21:0> = 0) && (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>))
      upper bounds:
        P[<<bcopy_aux_1197@18:1>@21:0>](var13:int,var14:int) = (0 <= var14)
      begin GenHcSolver.classify_pids(6043)[4]
        output:
          [<<bcopy_aux_1197@18:1>@21:0>]
      end GenHcSolver.classify_pids(6043)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1197@18:1>@21:0> = 0) && (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>))
      nub:(not (0 <= <<bcopy_aux_1197@18:1>@21:0>))
      begin ApronInterface.convex_hull_interpolate(6046)[4]
        lb:((<<bcopy_aux_1197@18:1>@21:0> = 0) && (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>))
        nub:(not (0 <= <<bcopy_aux_1197@18:1>@21:0>))
        begin ExtFormula.Formula.case_analysis_boolean(6058)[5]
          ts: ((<<bcopy_aux_1197@18:1>@21:0> = 0) && (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(6058)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(6067)[5]
          ts: (0 > <<bcopy_aux_1197@18:1>@21:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(6067)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1197@18:1>@21:0> = 0) && ((-1 + <bcopy_aux_1197@18:0>) >= 0))
        nub':((-1 + (-1 * <<bcopy_aux_1197@18:1>@21:0>)) >= 0)
        begin InterpProver.interpolate(6071)[5]
          begin InterpProver.interpolate_fresh(6072)[6]
            begin InterpProver.interpolate_log(6073)[7]
              input1: ((<<bcopy_aux_1197@18:1>@21:0> = 0) && ((-1 + <bcopy_aux_1197@18:0>) >= 0))
              input2: ((-1 + (-1 * <<bcopy_aux_1197@18:1>@21:0>)) >= 0)
              begin InterpProver.interpolate_check(6074)[8]
                begin InterpProver.interpolate_simplify(6075)[9]
                  begin InterpProver.interpolate_quick(6112)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(6121)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(6122)[12]
                        begin CsisatInterface.interpolate_csisat_log(6123)[13]
                          input1: (0 = v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0 & 1 <= v_sep_bcopy_aux_1197_sep_18_sep_0)
                          input2: (1 + v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(6124)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(6124)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(6123)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(6122)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(6121)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(6112)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(6075)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(6074)[8] (0.000000 sec.)
              output: (0 <= <<bcopy_aux_1197@18:1>@21:0>)
            end InterpProver.interpolate_log(6073)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(6072)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(6071)[5] (0.000000 sec.)
        output:
          P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int) =
          (0 <= <<bcopy_aux_1197@18:1>@21:0>)
      end ApronInterface.convex_hull_interpolate(6046)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
        ((<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>) && (0 > <<bcopy_aux_1197@18:1>@21:0>)) |- bot
        
         (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                                 <bcopy_aux_1197@18:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<bcopy_aux_1197@18:3>:int) = (<bcopy_aux_1197@18:3> = 0)
      upper bounds:
        P[<bcopy_aux_1197@18:3>](var15:int,var16:int) = ((var16 >= var15) || (0 <= var16))
      begin GenHcSolver.classify_pids(6845)[4]
        output:
          [<bcopy_aux_1197@18:3>]
      end GenHcSolver.classify_pids(6845)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1197@18:3> = 0)
      nub:(not ((<bcopy_aux_1197@18:3> >= <bcopy_aux_1197@18:0>) || (0 <= <bcopy_aux_1197@18:3>)))
      begin ApronInterface.convex_hull_interpolate(6848)[4]
        lb:(<bcopy_aux_1197@18:3> = 0)
        nub:(not ((<bcopy_aux_1197@18:3> >= <bcopy_aux_1197@18:0>) || (0 <= <bcopy_aux_1197@18:3>)))
        begin ExtFormula.Formula.case_analysis_boolean(6852)[5]
          ts: (<bcopy_aux_1197@18:3> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(6852)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(6870)[5]
          ts: ((<bcopy_aux_1197@18:3> < <bcopy_aux_1197@18:0>) && (0 > <bcopy_aux_1197@18:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(6870)[5] (0.001000 sec.)
        lb':(<bcopy_aux_1197@18:3> = 0)
        nub':(((-1 + (-1 * <bcopy_aux_1197@18:3>)) >= 0) &&
              (((-1 + (-1 * <bcopy_aux_1197@18:3>)) + <bcopy_aux_1197@18:0>) >= 0))
        begin InterpProver.interpolate(6876)[5]
          begin InterpProver.interpolate_fresh(6877)[6]
            begin InterpProver.interpolate_log(6878)[7]
              input1: (<bcopy_aux_1197@18:3> = 0)
              input2: (((-1 + (-1 * <bcopy_aux_1197@18:3>)) >= 0) &&
                       (((-1 + (-1 * <bcopy_aux_1197@18:3>)) + <bcopy_aux_1197@18:0>) >= 0))
              begin InterpProver.interpolate_check(6879)[8]
                begin InterpProver.interpolate_simplify(6880)[9]
                  begin InterpProver.interpolate_quick(6931)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(6940)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(6941)[12]
                        begin CsisatInterface.interpolate_csisat_log(6942)[13]
                          input1: 0 = v_sep_bcopy_aux_1197_sep_18_sep_3
                          input2: ((1 + v_sep_bcopy_aux_1197_sep_18_sep_3) <= 0 & (1 + v_sep_bcopy_aux_1197_sep_18_sep_3) <= v_sep_bcopy_aux_1197_sep_18_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(6943)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(6943)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1197_sep_18_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(6942)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1197_sep_18_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1197_sep_18_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(6941)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(6940)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(6931)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(6880)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(6879)[8] (0.000999 sec.)
              output: (0 <= <bcopy_aux_1197@18:3>)
            end InterpProver.interpolate_log(6878)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(6877)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(6876)[5] (0.000999 sec.)
        output:
          P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<bcopy_aux_1197@18:3>:int) = (0 <= <bcopy_aux_1197@18:3>)
      end ApronInterface.convex_hull_interpolate(6848)[4] (0.001999 sec.)
      begin HcSolver.check_validity(7063)[4]
        input:
          P[<fail_1615@29:0>](<fail_1615@29:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@18:1>@21:0>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
          ((0 > <k_make_array_u_1232@26:0>) && <fail_1615@29:0>) |- P[<fail_1615@29:0>](
          <fail_1615@29:0>:bool)
          
          P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
          (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
          |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,
                                             <<bcopy_aux_1197@18:1>@21:0>:int)
          
           (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                                   <bcopy_aux_1197@18:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(7063)[4] (0.000000 sec.)
      solution:
        P[<fail_1615@29:0>](<fail_1615@29:0>:bool) = false
        P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int) =
        (0 <= <<bcopy_aux_1197@18:1>@21:0>)
        P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<bcopy_aux_1197@18:3>:int) = (0 <= <bcopy_aux_1197@18:3>)
    end GenHcSolver.solve(4385)[3] (0.015997 sec.)
    begin YhornInterface.solve(7294)[3]
      begin HcSolver.solve_ub(7295)[4]
        encoded:
          P[<fail_1615@29:0>](<fail_1615@29:0>:int)|- bot
          
          P[<<bcopy_aux_1197@18:1>@21:0>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
          ((0 > <k_make_array_u_1232@26:0>) && (<fail_1615@29:0> = 1)) |- P[<fail_1615@29:0>](
          <fail_1615@29:0>:int)
          
          P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
          (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
          |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,
                                             <<bcopy_aux_1197@18:1>@21:0>:int)
          
           (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                                   <bcopy_aux_1197@18:3>:int)
        input to Yhorn:
          P[<fail_1615@29:0>](<fail_1615@29:0>:int)|- bot
          
          P[<<bcopy_aux_1197@18:1>@21:0>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
          ((0 > <k_make_array_u_1232@26:0>) && (<fail_1615@29:0> = 1)) |- P[<fail_1615@29:0>](
          <fail_1615@29:0>:int)
          
          P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
          (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
          |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,
                                             <<bcopy_aux_1197@18:1>@21:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1615_sep_29_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0)) & (v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0($9,$8)) -> v_sep_fail_1615_sep_29_sep_0($7).
($10-$11<0) & (v_sep_bcopy_aux_1197_sep_18_sep_3($11,$10)) -> v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0($11,$10).
$12=0 -> v_sep_bcopy_aux_1197_sep_18_sep_3($11,$12).


v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0: X
v_sep_bcopy_aux_1197_sep_18_sep_3: X
v_sep_fail_1615_sep_29_sep_0: X
....
v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0: X
v_sep_bcopy_aux_1197_sep_18_sep_3: X
v_sep_fail_1615_sep_29_sep_0: X
...
v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0: X
v_sep_bcopy_aux_1197_sep_18_sep_3: X
v_sep_fail_1615_sep_29_sep_0: X
....
v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0: X
v_sep_bcopy_aux_1197_sep_18_sep_3: X
v_sep_fail_1615_sep_29_sep_0: X
....(0=0) & (v_sep_fail_1615_sep_29_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0)) & (v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0($9,$8)) -> v_sep_fail_1615_sep_29_sep_0($7).
($10-$11<0) & (v_sep_bcopy_aux_1197_sep_18_sep_3($11,$10)) -> v_sep_bcopy_aux_1197_sep_18_sep_1_sep_21_sep_0($11,$10).
$12=0 -> v_sep_bcopy_aux_1197_sep_18_sep_3($11,$12).

           (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                                   <bcopy_aux_1197@18:3>:int)
        solution:
          P[<<bcopy_aux_1197@18:1>@21:0>]($16:int,$18:int) = (0 <= $18)
          P[<bcopy_aux_1197@18:3>]($21:int,$23:int) = (0 <= $23)
          P[<fail_1615@29:0>]($13:bool) = false
        
      end HcSolver.solve_ub(7295)[4] (0.011999 sec.)
      begin HcSolver.check_validity(7379)[4]
        input:
          P[<fail_1615@29:0>](<fail_1615@29:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@18:1>@21:0>](<k_make_array_u_1232@26:1>:int,<k_make_array_u_1232@26:0>:int),
          ((0 > <k_make_array_u_1232@26:0>) && <fail_1615@29:0>) |- P[<fail_1615@29:0>](
          <fail_1615@29:0>:bool)
          
          P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,<<bcopy_aux_1197@18:1>@21:0>:int),
          (<<bcopy_aux_1197@18:1>@21:0> < <bcopy_aux_1197@18:0>)
          |- P[<<bcopy_aux_1197@18:1>@21:0>](<bcopy_aux_1197@18:0>:int,
                                             <<bcopy_aux_1197@18:1>@21:0>:int)
          
           (<bcopy_aux_1197@18:3> = 0) |- P[<bcopy_aux_1197@18:3>](<bcopy_aux_1197@18:0>:int,
                                                                   <bcopy_aux_1197@18:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(7379)[4] (0.000999 sec.)
      solution:
        P[<<bcopy_aux_1197@18:1>@21:0>]($16:int,$18:int) = (0 <= $18)
        P[<bcopy_aux_1197@18:3>]($21:int,$23:int) = (0 <= $23)
        P[<fail_1615@29:0>]($13:bool) = false
    end YhornInterface.solve(7294)[3] (0.013998 sec.)
    
  end RefTypeInfer.infer_etrs(238)[2] (0.096985 sec.)
  refinement types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:{v10:int | (0 <= v10)} -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1615: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var46:int ->
            var45:int ->
            var44:int -> var43:int -> (var42:int -> (var41:int -> X) -> X) -> var38:int -> (var37:int -> X) -> X
    f_1614: var51:int -> var50:int -> var49:int -> var48:unit -> X
    f_bcopy_aux_1609: var65:int ->
                      var64:int ->
                      (var63:int -> (var62:int -> X) -> X) ->
                      (var59:unit -> X) -> (var57:int -> (var56:int -> X) -> X) -> var53:int -> X
    f_bcopy_aux_1610: var79:int ->
                      var78:int ->
                      var77:int ->
                      (var76:unit -> X) ->
                      (var74:int -> (var73:int -> X) -> X) -> (var70:int -> (var69:int -> X) -> X) -> X
    f_update_1608: var93:int ->
                   var92:int ->
                   var91:int ->
                   (var90:int -> (var89:int -> X) -> X) ->
                   ((var86:int -> (var85:int -> X) -> X) -> X) -> var81:int -> X
    k_make_array_u_1243: var99:int -> var98:int -> (var97:int -> X) -> var95:unit -> X
    update_1198: var112:int ->
                 var111:int ->
                 (var110:int -> (var109:int -> X) -> X) ->
                 var106:int -> ((var105:int -> (var104:int -> X) -> X) -> X) -> X
  abstraction types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int[v10 -> (
                                                              0 <= v10)] -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1615: v1:bool -> (v2:unit -> X) -> X
    a_1038: var46:int ->
            var45:int ->
            var44:int -> var43:int -> (var42:int -> (var41:int -> X) -> X) -> var38:int -> (var37:int -> X) -> X
    f_1614: var51:int -> var50:int -> var49:int -> var48:unit -> X
    f_bcopy_aux_1609: var65:int ->
                      var64:int ->
                      (var63:int -> (var62:int -> X) -> X) ->
                      (var59:unit -> X) -> (var57:int -> (var56:int -> X) -> X) -> var53:int -> X
    f_bcopy_aux_1610: var79:int ->
                      var78:int ->
                      var77:int ->
                      (var76:unit -> X) ->
                      (var74:int -> (var73:int -> X) -> X) -> (var70:int -> (var69:int -> X) -> X) -> X
    f_update_1608: var93:int ->
                   var92:int ->
                   var91:int ->
                   (var90:int -> (var89:int -> X) -> X) ->
                   ((var86:int -> (var85:int -> X) -> X) -> X) -> var81:int -> X
    k_make_array_u_1243: var99:int -> var98:int -> (var97:int -> X) -> var95:unit -> X
    update_1198: var112:int ->
                 var111:int ->
                 (var110:int -> (var109:int -> X) -> X) ->
                 var106:int -> ((var105:int -> (var104:int -> X) -> X) -> X) -> X
  
end AbsTypeInfer.refine(237)[1] (0.105984 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1607
  main_1607 -> (rand_int f_1611)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (i_1034 = j_1039) -> (k_update_a_1312 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (
      not (i_1034 = j_1039)) -> (a_1036 j_1039 k_update_a_1312)
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (i_1044 >= m_1041) -> (k_bcopy_aux_1376 ())
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (
      not (i_1044 >= m_1041)) -> (src_1042 i_1044 (f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042))
  f_1611 x_1548 -> (rand_int (f_1612 x_1548))
  f_1612 x_1548 x_1561 -> (rand_int (f_1613 x_1548 x_1561))
  f_1613 x_1548 x_1561 x_1574 -> (main_1045 x_1548 x_1561 x_1574 (f_1614 x_1548 x_1561 x_1574))
  f_1614 x_1548 x_1561 x_1574 x_1545 -> end
  f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 ->
      (update_1198 i_1044 m_1041 des_1043 x_1429 (f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042))
  f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 ->
      (bcopy_aux_1197 m_1041 src_1042 x_1446 (i_1044 + 1) k_bcopy_aux_1376)
  f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 ->
      (k_update_1291 (a_1038 i_1034 n_1035 x_1037 x_1297 a_1036))
  fail_1615 b k -> {fail} => (k ())
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when b_1542 ->
      (bcopy_aux_1197 n_1046 (make_array_1030 n_1046) (make_array_1030 m_1047) i_1048 k_main_1477)
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when (not b_1542) -> (k_main_1477 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when b_1244 ->
      (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when (not b_1244) ->
      (fail_1615 true (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226))
  k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 -> (k_make_array_1226 0)
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (i_1048 = 0) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 (n_1046 <= m_1047))
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (not (i_1048 = 0)) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 false)
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (0 <= i_1032) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (not (0 <= i_1032)) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 false)
  update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 ->
      (a_1036 i_1034 (f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291))
Types:
  main_1607 : X
  bcopy_aux_1197 : (int ->
                    (x_3:int[x_3 >= 0] -> (int -> X) -> X) ->
                    (int -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1615 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1607 ... --> 
  f_1611 ... --> 
  f_1612 ... --> 
  f_1613 ... --> 
  main_1045 [1/2] ... --> 
  k_main_1512 [1/2] ... --> 
  bcopy_aux_1197 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1232 [2/2] ... --> 
  fail_1615 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(8080)[1]
  program:
    main_1607  | true = ((Random.int 0) f_1611)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    i_1034 = j_1039) = (k_update_a_1312 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    not (i_1034 = j_1039)) = (a_1036 j_1039
                                     k_update_a_1312)
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    i_1044 >= m_1041) = (k_bcopy_aux_1376 ())
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    not (i_1044 >= m_1041)) = (src_1042 i_1044
                                        (f_bcopy_aux_1609 i_1044
                                                          m_1041
                                                          des_1043
                                                          k_bcopy_aux_1376
                                                          src_1042))
    f_1611 x_1548 | true = ((Random.int 0) (f_1612 x_1548))
    f_1612 x_1548 x_1561 | true = ((Random.int 0) (f_1613 x_1548
                                                          x_1561))
    f_1613 x_1548 x_1561 x_1574 | true = (main_1045 x_1548
                                                    x_1561
                                                    x_1574
                                                    (f_1614 x_1548
                                                            x_1561
                                                            x_1574))
    f_1614 x_1548 x_1561 x_1574 x_1545 | true = end
    f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 | true = (
    update_1198 i_1044
                m_1041
                des_1043
                x_1429
                (f_bcopy_aux_1610 i_1044
                                  m_1041
                                  x_1429
                                  k_bcopy_aux_1376
                                  src_1042))
    f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 | true = (
    bcopy_aux_1197 m_1041
                   src_1042
                   x_1446
                   (i_1044 + 1)
                   k_bcopy_aux_1376)
    f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 | true = (
    k_update_1291 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1297
                          a_1036))
    fail_1615 b k | true = (fail ())
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | b_1542 = (bcopy_aux_1197
                                                                    n_1046
                                                                    (
                                                                    make_array_1030 n_1046)
                                                                    (
                                                                    make_array_1030 m_1047)
                                                                    i_1048
                                                                    k_main_1477)
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | (not b_1542) = (
    k_main_1477 ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | b_1244 = (
    k_make_array_u_1243 i_1032
                        n_1031
                        k_make_array_1226
                        ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | (not b_1244) = (
    fail_1615 true
              (k_make_array_u_1243 i_1032
                                   n_1031
                                   k_make_array_1226))
    k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 | true = (
    k_make_array_1226 0)
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (i_1048 = 0) = (k_main_1512
                                                                   i_1048
                                                                   m_1047
                                                                   n_1046
                                                                   k_main_1477
                                                                   (n_1046 <= m_1047))
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (not (i_1048 = 0)) = (
    k_main_1512 i_1048
                m_1047
                n_1046
                k_main_1477
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (0 <= i_1032) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (not (0 <= i_1032)) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        false)
    update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 | true = (a_1036
                                                                    i_1034
                                                                    (
                                                                    f_update_1608
                                                                    i_1034
                                                                    n_1035
                                                                    x_1037
                                                                    a_1036
                                                                    k_update_1291))
    main_1607:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    bcopy_aux_1197:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1611:int -> X
    f_1612:int -> int -> X
    f_1613:int -> int -> int -> X
    f_1614:int -> int -> int -> unit -> X
    f_bcopy_aux_1609:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1610:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> X
    f_update_1608:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1615:bool -> (unit -> X) -> X
    k_main_1512:int -> int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1232:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1243:int -> int -> (int -> X) -> unit -> X
    main_1045:int -> int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1198:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1611,f_1612,f_1613,f_1614,f_bcopy_aux_1609,f_bcopy_aux_1610,f_update_1608,k_main_1512,k_make_array_u_1232,k_make_array_u_1243,main_1045,make_array_1030,update_1198
  counterexample: 0:0:0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1611@35:0> = var113)
     [true.nop((<f_1612@38:0> = <f_1611@35:0>) && (<f_1612@38:1> = var114))
      [true.nop((<f_1613@41:0> = <f_1612@38:0>) && ((<f_1613@41:1> = <f_1612@38:1>) && (<f_1613@41:2> = var115)))
       [true.
        ((<main_1045@43:0> = <f_1613@41:0>) &&
         ((<main_1045@43:1> = <f_1613@41:1>) && (<main_1045@43:2> = <f_1613@41:2>)))
        [(<main_1045@43:2> = 0).
         ((<k_main_1512@46:0> = <main_1045@43:2>) &&
          ((<k_main_1512@46:1> = <main_1045@43:1>) &&
           ((<k_main_1512@46:2> = <main_1045@43:0>) && (<k_main_1512@46:4> = (<main_1045@43:0> <= <main_1045@43:1>)))))
         [<k_main_1512@46:4>.
          ((<bcopy_aux_1197@49:0> = <k_main_1512@46:2>) && (<bcopy_aux_1197@49:3> = <k_main_1512@46:0>))
          [(not (<bcopy_aux_1197@49:3> >= <bcopy_aux_1197@49:0>)).
           (<<bcopy_aux_1197@49:1>@52:0> = <bcopy_aux_1197@49:3>)
           [true.
            ((<make_array_1030@54:0> = <k_main_1512@46:2>) && (<make_array_1030@54:1> = <<bcopy_aux_1197@49:1>@52:0>))
            [(0 <= <make_array_1030@54:1>).
             ((<k_make_array_u_1232@57:0> = <make_array_1030@54:1>) &&
              ((<k_make_array_u_1232@57:1> = <make_array_1030@54:0>) &&
               (<k_make_array_u_1232@57:3> = (<make_array_1030@54:1> < <make_array_1030@54:0>))))
             [(not <k_make_array_u_1232@57:3>).(<fail_1615@60:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(8081)[2]
    horn clauses:
      P[<fail_1615@60:0>](<fail_1615@60:0>:bool)|- bot
      
      P[<k_make_array_u_1232@57:3>](<k_make_array_u_1232@57:0>:int,<k_make_array_u_1232@57:1>:int,false:bool),
      <fail_1615@60:0> |- P[<fail_1615@60:0>](<fail_1615@60:0>:bool)
      
      P[<make_array_1030@54:1>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
      ((0 <= <k_make_array_u_1232@57:0>) &&
       (<k_make_array_u_1232@57:3> = (<k_make_array_u_1232@57:0> < <k_make_array_u_1232@57:1>)))
      |- P[<k_make_array_u_1232@57:3>](<k_make_array_u_1232@57:0>:int,
                                       <k_make_array_u_1232@57:1>:int,
                                       <k_make_array_u_1232@57:3>:bool)
      
      P[<k_main_1512@46:4>](<bcopy_aux_1197@49:3>:int,<k_main_1512@46:1>:int,<make_array_1030@54:0>:int,true:bool),
      P[<<bcopy_aux_1197@49:1>@52:0>](<make_array_1030@54:0>:int,<make_array_1030@54:1>:int)|- P[<make_array_1030@54:1>](
      <make_array_1030@54:0>:int,<make_array_1030@54:1>:int)
      
      P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
      (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
      |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int)
      
      P[<k_main_1512@46:4>](<bcopy_aux_1197@49:3>:int,<k_main_1512@46:1>:int,<bcopy_aux_1197@49:0>:int,true:bool)|- P[<bcopy_aux_1197@49:3>](
      <bcopy_aux_1197@49:0>:int,<bcopy_aux_1197@49:3>:int)
      
      P[<main_1045@43:2>](<k_main_1512@46:2>:int,<k_main_1512@46:1>:int,<k_main_1512@46:0>:int),
      ((<k_main_1512@46:0> = 0) && (<k_main_1512@46:4> = (<k_main_1512@46:2> <= <k_main_1512@46:1>)))
      |- P[<k_main_1512@46:4>](<k_main_1512@46:0>:int,<k_main_1512@46:1>:int,
                               <k_main_1512@46:2>:int,<k_main_1512@46:4>:bool)
      
      P[<f_1613@41:2>](<main_1045@43:0>:int,<main_1045@43:1>:int,<main_1045@43:2>:int)|- P[<main_1045@43:2>](
      <main_1045@43:0>:int,<main_1045@43:1>:int,<main_1045@43:2>:int)
      
      P[<f_1612@38:1>](<f_1613@41:0>:int,<f_1613@41:1>:int)|- P[<f_1613@41:2>](
      <f_1613@41:0>:int,<f_1613@41:1>:int,<f_1613@41:2>:int)
      
      P[<f_1611@35:0>](<f_1612@38:0>:int)|- P[<f_1612@38:1>](<f_1612@38:0>:int,
                                                             <f_1612@38:1>:int)
      
      |- P[<f_1611@35:0>](<f_1611@35:0>:int)
    call trees:
      <main_1607@32>
        <f_1611@35>
          <f_1612@38>
            <f_1613@41>
              <main_1045@43>
                <k_main_1512@46>
                  <bcopy_aux_1197@49>
                  </<bcopy_aux_1197@49:1>@52>
                  <make_array_1030@54>
                    <k_make_array_u_1232@57>
                      <fail_1615@60>
    inlined horn clauses:
      P[<fail_1615@60:0>](<fail_1615@60:0>:bool)|- bot
      
      P[<<bcopy_aux_1197@49:1>@52:0>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
      ((0 <= <k_make_array_u_1232@57:0>) &&
       ((<k_make_array_u_1232@57:0> >= <k_make_array_u_1232@57:1>) && <fail_1615@60:0>))
      |- P[<fail_1615@60:0>](<fail_1615@60:0>:bool)
      
      P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
      (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
      |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int)
      
       (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                               <bcopy_aux_1197@49:3>:int)
    begin ParamSubstInfer.infer(9507)[3]
      
    end ParamSubstInfer.infer(9507)[3] (0.067990 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(9509)[3]
      
    end RefTypeInfer.elim_coeffs(9509)[3] (0.001000 sec.)
    begin GenHcSolver.solve(9701)[3]
      Horn clauses:
        P[<fail_1615@60:0>](<fail_1615@60:0>:bool)|- bot
        
        P[<<bcopy_aux_1197@49:1>@52:0>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
        ((0 <= <k_make_array_u_1232@57:0>) &&
         ((<k_make_array_u_1232@57:0> >= <k_make_array_u_1232@57:1>) && <fail_1615@60:0>))
        |- P[<fail_1615@60:0>](<fail_1615@60:0>:bool)
        
        P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
        (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
        |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,
                                           <<bcopy_aux_1197@49:1>@52:0>:int)
        
         (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                                 <bcopy_aux_1197@49:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<bcopy_aux_1197@49:3>:int) = (<bcopy_aux_1197@49:3> = 0)
        P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int) =
        ((<<bcopy_aux_1197@49:1>@52:0> = 0) && (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>))
        P[<fail_1615@60:0>](<fail_1615@60:0>:bool) = false
      upper bounds:
        P[<fail_1615@60:0>](var117:bool) = true
      begin GenHcSolver.classify_pids(10534)[4]
        output:
          [<fail_1615@60:0>]
      end GenHcSolver.classify_pids(10534)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(10537)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(10538)[5]
          begin InterpProver.interpolate_fresh(10539)[6]
            begin InterpProver.interpolate_log(10540)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(10541)[8]
                begin InterpProver.interpolate_simplify(10542)[9]
                  begin InterpProver.interpolate_quick(10555)[10]
                    
                  end InterpProver.interpolate_quick(10555)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(10559)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(10559)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(10542)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(10541)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(10540)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(10539)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(10538)[5] (0.000000 sec.)
        output:
          P[<fail_1615@60:0>](<fail_1615@60:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(10537)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1197@49:1>@52:0>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
        ((<k_make_array_u_1232@57:0> >= <k_make_array_u_1232@57:1>) && (0 <= <k_make_array_u_1232@57:0>)) |- bot
        
        P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
        (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
        |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,
                                           <<bcopy_aux_1197@49:1>@52:0>:int)
        
         (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                                 <bcopy_aux_1197@49:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<bcopy_aux_1197@49:3>:int) = (<bcopy_aux_1197@49:3> = 0)
        P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int) =
        ((<<bcopy_aux_1197@49:1>@52:0> = 0) && (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>))
      upper bounds:
        P[<<bcopy_aux_1197@49:1>@52:0>](var118:int,var119:int) = ((var119 < var118) || (0 > var119))
      begin GenHcSolver.classify_pids(11759)[4]
        output:
          [<<bcopy_aux_1197@49:1>@52:0>]
      end GenHcSolver.classify_pids(11759)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1197@49:1>@52:0> = 0) && (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>))
      nub:(not ((<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>) || (0 > <<bcopy_aux_1197@49:1>@52:0>)))
      begin ApronInterface.convex_hull_interpolate(11762)[4]
        lb:((<<bcopy_aux_1197@49:1>@52:0> = 0) && (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>))
        nub:(not ((<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>) || (0 > <<bcopy_aux_1197@49:1>@52:0>)))
        lb':((<<bcopy_aux_1197@49:1>@52:0> = 0) && (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>))
        nub':(not ((<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>) || (0 > <<bcopy_aux_1197@49:1>@52:0>)))
        begin InterpProver.interpolate(11763)[5]
          begin InterpProver.interpolate_fresh(11764)[6]
            begin InterpProver.interpolate_log(11765)[7]
              input1: ((<<bcopy_aux_1197@49:1>@52:0> = 0) && (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>))
              input2: (not
                         ((<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>) || (0 > <<bcopy_aux_1197@49:1>@52:0>)))
              begin InterpProver.interpolate_check(11766)[8]
                begin InterpProver.interpolate_simplify(11767)[9]
                  begin InterpProver.interpolate_quick(11822)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(11831)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(11832)[12]
                        begin CsisatInterface.interpolate_csisat_log(11833)[13]
                          input1: (0 = v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0 & (1 + v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0) <= v_sep_bcopy_aux_1197_sep_49_sep_0)
                          input2: (0 <= v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0 & v_sep_bcopy_aux_1197_sep_49_sep_0 <= v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(11834)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(11834)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1197_sep_49_sep_0 + 2*v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(11833)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1197_sep_49_sep_0 + 2*v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1197_sep_49_sep_0 + 2*v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(11832)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(11831)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(11822)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(11767)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(11766)[8] (0.001999 sec.)
              output: ((1 + <<bcopy_aux_1197@49:1>@52:0>) <= <bcopy_aux_1197@49:0>)
            end InterpProver.interpolate_log(11765)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(11764)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(11763)[5] (0.001999 sec.)
        output:
          P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int) =
          ((1 + <<bcopy_aux_1197@49:1>@52:0>) <= <bcopy_aux_1197@49:0>)
      end ApronInterface.convex_hull_interpolate(11762)[4] (0.001999 sec.)
      Horn clauses:
         (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                                 <bcopy_aux_1197@49:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<bcopy_aux_1197@49:3>:int) = (<bcopy_aux_1197@49:3> = 0)
      upper bounds:
        P[<bcopy_aux_1197@49:3>](var120:int,var121:int) = true
      begin GenHcSolver.classify_pids(12180)[4]
        output:
          [<bcopy_aux_1197@49:3>]
      end GenHcSolver.classify_pids(12180)[4] (0.001000 sec.)
      lb:(<bcopy_aux_1197@49:3> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(12183)[4]
        lb:(<bcopy_aux_1197@49:3> = 0)
        nub:false
        lb':(<bcopy_aux_1197@49:3> = 0)
        nub':false
        begin InterpProver.interpolate(12184)[5]
          begin InterpProver.interpolate_fresh(12185)[6]
            begin InterpProver.interpolate_log(12186)[7]
              input1: (<bcopy_aux_1197@49:3> = 0)
              input2: false
              begin InterpProver.interpolate_check(12187)[8]
                begin InterpProver.interpolate_simplify(12188)[9]
                  begin InterpProver.interpolate_quick(12207)[10]
                    
                  end InterpProver.interpolate_quick(12207)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(12188)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(12187)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(12186)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(12185)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(12184)[5] (0.000000 sec.)
        output:
          P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<bcopy_aux_1197@49:3>:int) = true
      end ApronInterface.convex_hull_interpolate(12183)[4] (0.000000 sec.)
      begin HcSolver.check_validity(12271)[4]
        input:
          P[<fail_1615@60:0>](<fail_1615@60:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@49:1>@52:0>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
          ((0 <= <k_make_array_u_1232@57:0>) &&
           ((<k_make_array_u_1232@57:0> >= <k_make_array_u_1232@57:1>) && <fail_1615@60:0>))
          |- P[<fail_1615@60:0>](<fail_1615@60:0>:bool)
          
          P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
          (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
          |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,
                                             <<bcopy_aux_1197@49:1>@52:0>:int)
          
           (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                                   <bcopy_aux_1197@49:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(12271)[4] (0.001000 sec.)
      solution:
        P[<fail_1615@60:0>](<fail_1615@60:0>:bool) = false
        P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int) =
        ((1 + <<bcopy_aux_1197@49:1>@52:0>) <= <bcopy_aux_1197@49:0>)
        P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<bcopy_aux_1197@49:3>:int) = true
    end GenHcSolver.solve(9701)[3] (0.019997 sec.)
    begin GenHcSolver.solve(12472)[3]
      Horn clauses:
        P[<fail_1615@60:0>](<fail_1615@60:0>:bool)|- bot
        
        P[<<bcopy_aux_1197@49:1>@52:0>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
        ((0 <= <k_make_array_u_1232@57:0>) &&
         ((<k_make_array_u_1232@57:0> >= <k_make_array_u_1232@57:1>) && <fail_1615@60:0>))
        |- P[<fail_1615@60:0>](<fail_1615@60:0>:bool)
        
        P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
        (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
        |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,
                                           <<bcopy_aux_1197@49:1>@52:0>:int)
        
         (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                                 <bcopy_aux_1197@49:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<bcopy_aux_1197@49:3>:int) = (<bcopy_aux_1197@49:3> = 0)
        P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int) =
        ((<<bcopy_aux_1197@49:1>@52:0> = 0) && (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>))
        P[<fail_1615@60:0>](<fail_1615@60:0>:bool) = false
      upper bounds:
        P[<fail_1615@60:0>](var123:bool) = true
      begin GenHcSolver.classify_pids(13305)[4]
        output:
          [<fail_1615@60:0>]
      end GenHcSolver.classify_pids(13305)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(13308)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(13311)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(13311)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(13316)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(13316)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(13319)[5]
          begin InterpProver.interpolate_fresh(13320)[6]
            begin InterpProver.interpolate_log(13321)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(13322)[8]
                begin InterpProver.interpolate_simplify(13323)[9]
                  begin InterpProver.interpolate_quick(13338)[10]
                    
                  end InterpProver.interpolate_quick(13338)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(13342)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(13342)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(13323)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(13322)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(13321)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(13320)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(13319)[5] (0.001000 sec.)
        output:
          P[<fail_1615@60:0>](<fail_1615@60:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(13308)[4] (0.001000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1197@49:1>@52:0>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
        ((<k_make_array_u_1232@57:0> >= <k_make_array_u_1232@57:1>) && (0 <= <k_make_array_u_1232@57:0>)) |- bot
        
        P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
        (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
        |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,
                                           <<bcopy_aux_1197@49:1>@52:0>:int)
        
         (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                                 <bcopy_aux_1197@49:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<bcopy_aux_1197@49:3>:int) = (<bcopy_aux_1197@49:3> = 0)
        P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int) =
        ((<<bcopy_aux_1197@49:1>@52:0> = 0) && (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>))
      upper bounds:
        P[<<bcopy_aux_1197@49:1>@52:0>](var124:int,var125:int) = ((var125 < var124) || (0 > var125))
      begin GenHcSolver.classify_pids(14549)[4]
        output:
          [<<bcopy_aux_1197@49:1>@52:0>]
      end GenHcSolver.classify_pids(14549)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1197@49:1>@52:0> = 0) && (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>))
      nub:(not ((<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>) || (0 > <<bcopy_aux_1197@49:1>@52:0>)))
      begin ApronInterface.convex_hull_interpolate(14552)[4]
        lb:((<<bcopy_aux_1197@49:1>@52:0> = 0) && (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>))
        nub:(not ((<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>) || (0 > <<bcopy_aux_1197@49:1>@52:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(14564)[5]
          ts: ((<<bcopy_aux_1197@49:1>@52:0> = 0) && (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(14564)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(14584)[5]
          ts: ((<<bcopy_aux_1197@49:1>@52:0> >= <bcopy_aux_1197@49:0>) && (0 <= <<bcopy_aux_1197@49:1>@52:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(14584)[5] (0.001000 sec.)
        lb':((<<bcopy_aux_1197@49:1>@52:0> = 0) && ((-1 + <bcopy_aux_1197@49:0>) >= 0))
        nub':(((<<bcopy_aux_1197@49:1>@52:0> + (-1 * <bcopy_aux_1197@49:0>)) >= 0) &&
              (<<bcopy_aux_1197@49:1>@52:0> >= 0))
        begin InterpProver.interpolate(14590)[5]
          begin InterpProver.interpolate_fresh(14591)[6]
            begin InterpProver.interpolate_log(14592)[7]
              input1: ((<<bcopy_aux_1197@49:1>@52:0> = 0) && ((-1 + <bcopy_aux_1197@49:0>) >= 0))
              input2: (((<<bcopy_aux_1197@49:1>@52:0> + (-1 * <bcopy_aux_1197@49:0>)) >= 0) &&
                       (<<bcopy_aux_1197@49:1>@52:0> >= 0))
              begin InterpProver.interpolate_check(14593)[8]
                begin InterpProver.interpolate_simplify(14594)[9]
                  begin InterpProver.interpolate_quick(14651)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(14660)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(14661)[12]
                        begin CsisatInterface.interpolate_csisat_log(14662)[13]
                          input1: (0 = v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0 & 1 <= v_sep_bcopy_aux_1197_sep_49_sep_0)
                          input2: (0 <= v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0 & v_sep_bcopy_aux_1197_sep_49_sep_0 <= v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(14663)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(14663)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1197_sep_49_sep_0 + 2*v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(14662)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1197_sep_49_sep_0 + 2*v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1197_sep_49_sep_0 + 2*v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(14661)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(14660)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(14651)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(14594)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(14593)[8] (0.001000 sec.)
              output: ((1 + <<bcopy_aux_1197@49:1>@52:0>) <= <bcopy_aux_1197@49:0>)
            end InterpProver.interpolate_log(14592)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(14591)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(14590)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int) =
          ((1 + <<bcopy_aux_1197@49:1>@52:0>) <= <bcopy_aux_1197@49:0>)
      end ApronInterface.convex_hull_interpolate(14552)[4] (0.002000 sec.)
      Horn clauses:
         (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                                 <bcopy_aux_1197@49:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<bcopy_aux_1197@49:3>:int) = (<bcopy_aux_1197@49:3> = 0)
      upper bounds:
        P[<bcopy_aux_1197@49:3>](var126:int,var127:int) = true
      begin GenHcSolver.classify_pids(15009)[4]
        output:
          [<bcopy_aux_1197@49:3>]
      end GenHcSolver.classify_pids(15009)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1197@49:3> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(15012)[4]
        lb:(<bcopy_aux_1197@49:3> = 0)
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(15016)[5]
          ts: (<bcopy_aux_1197@49:3> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(15016)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(15022)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(15022)[5] (0.000000 sec.)
        lb':(<bcopy_aux_1197@49:3> = 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(15025)[5]
          begin InterpProver.interpolate_fresh(15026)[6]
            begin InterpProver.interpolate_log(15027)[7]
              input1: (<bcopy_aux_1197@49:3> = 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(15028)[8]
                begin InterpProver.interpolate_simplify(15029)[9]
                  begin InterpProver.interpolate_quick(15049)[10]
                    
                  end InterpProver.interpolate_quick(15049)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(15029)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(15028)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(15027)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(15026)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(15025)[5] (0.000000 sec.)
        output:
          P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<bcopy_aux_1197@49:3>:int) = true
      end ApronInterface.convex_hull_interpolate(15012)[4] (0.000000 sec.)
      begin HcSolver.check_validity(15115)[4]
        input:
          P[<fail_1615@60:0>](<fail_1615@60:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@49:1>@52:0>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
          ((0 <= <k_make_array_u_1232@57:0>) &&
           ((<k_make_array_u_1232@57:0> >= <k_make_array_u_1232@57:1>) && <fail_1615@60:0>))
          |- P[<fail_1615@60:0>](<fail_1615@60:0>:bool)
          
          P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
          (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
          |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,
                                             <<bcopy_aux_1197@49:1>@52:0>:int)
          
           (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                                   <bcopy_aux_1197@49:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(15115)[4] (0.001000 sec.)
      solution:
        P[<fail_1615@60:0>](<fail_1615@60:0>:bool) = false
        P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int) =
        ((1 + <<bcopy_aux_1197@49:1>@52:0>) <= <bcopy_aux_1197@49:0>)
        P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<bcopy_aux_1197@49:3>:int) = true
    end GenHcSolver.solve(12472)[3] (0.012998 sec.)
    begin YhornInterface.solve(15316)[3]
      begin HcSolver.solve_ub(15317)[4]
        encoded:
          P[<fail_1615@60:0>](<fail_1615@60:0>:int)|- bot
          
          P[<<bcopy_aux_1197@49:1>@52:0>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
          ((0 <= <k_make_array_u_1232@57:0>) &&
           ((<k_make_array_u_1232@57:0> >= <k_make_array_u_1232@57:1>) && (<fail_1615@60:0> = 1)))
          |- P[<fail_1615@60:0>](<fail_1615@60:0>:int)
          
          P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
          (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
          |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,
                                             <<bcopy_aux_1197@49:1>@52:0>:int)
          
           (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                                   <bcopy_aux_1197@49:3>:int)
        input to Yhorn:
          P[<fail_1615@60:0>](<fail_1615@60:0>:int)|- bot
          
          P[<<bcopy_aux_1197@49:1>@52:0>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
          ((<k_make_array_u_1232@57:0> >= <k_make_array_u_1232@57:1>) &&
           ((0 <= <k_make_array_u_1232@57:0>) && (<fail_1615@60:0> = 1))) |- P[<fail_1615@60:0>](
          <fail_1615@60:0>:int)
          
          P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
          (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
          |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,
                                             <<bcopy_aux_1197@49:1>@52:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1615_sep_60_sep_0($61)) -> 1=0.
(($61-1=0) & (-$62<=0) & ($62-$63>=0)) & (v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0($63,$62)) -> v_sep_fail_1615_sep_60_sep_0($61).
($64-$65<0) & (v_sep_bcopy_aux_1197_sep_49_sep_3($65,$64)) -> v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0($65,$64).
$66=0 -> v_sep_bcopy_aux_1197_sep_49_sep_3($65,$66).


v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0: X
v_sep_bcopy_aux_1197_sep_49_sep_3: X
v_sep_fail_1615_sep_60_sep_0: X
....
v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0: X
v_sep_bcopy_aux_1197_sep_49_sep_3: X
v_sep_fail_1615_sep_60_sep_0: X
...
v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0: X
v_sep_bcopy_aux_1197_sep_49_sep_3: X
v_sep_fail_1615_sep_60_sep_0: X
....
v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0: X
v_sep_bcopy_aux_1197_sep_49_sep_3: X
v_sep_fail_1615_sep_60_sep_0: X
....(0=0) & (v_sep_fail_1615_sep_60_sep_0($61)) -> 1=0.
(($61-1=0) & (-$62<=0) & ($62-$63>=0)) & (v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0($63,$62)) -> v_sep_fail_1615_sep_60_sep_0($61).
($64-$65<0) & (v_sep_bcopy_aux_1197_sep_49_sep_3($65,$64)) -> v_sep_bcopy_aux_1197_sep_49_sep_1_sep_52_sep_0($65,$64).
$66=0 -> v_sep_bcopy_aux_1197_sep_49_sep_3($65,$66).

           (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                                   <bcopy_aux_1197@49:3>:int)
        solution:
          P[<<bcopy_aux_1197@49:1>@52:0>]($70:int,$72:int) = ((1 + $72) <= $70)
          P[<bcopy_aux_1197@49:3>]($75:int,$77:int) = true
          P[<fail_1615@60:0>]($67:bool) = false
        
      end HcSolver.solve_ub(15317)[4] (0.011998 sec.)
      begin HcSolver.check_validity(15449)[4]
        input:
          P[<fail_1615@60:0>](<fail_1615@60:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@49:1>@52:0>](<k_make_array_u_1232@57:1>:int,<k_make_array_u_1232@57:0>:int),
          ((0 <= <k_make_array_u_1232@57:0>) &&
           ((<k_make_array_u_1232@57:0> >= <k_make_array_u_1232@57:1>) && <fail_1615@60:0>))
          |- P[<fail_1615@60:0>](<fail_1615@60:0>:bool)
          
          P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,<<bcopy_aux_1197@49:1>@52:0>:int),
          (<<bcopy_aux_1197@49:1>@52:0> < <bcopy_aux_1197@49:0>)
          |- P[<<bcopy_aux_1197@49:1>@52:0>](<bcopy_aux_1197@49:0>:int,
                                             <<bcopy_aux_1197@49:1>@52:0>:int)
          
           (<bcopy_aux_1197@49:3> = 0) |- P[<bcopy_aux_1197@49:3>](<bcopy_aux_1197@49:0>:int,
                                                                   <bcopy_aux_1197@49:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(15449)[4] (0.005999 sec.)
      solution:
        P[<<bcopy_aux_1197@49:1>@52:0>]($70:int,$72:int) = ((1 + $72) <= $70)
        P[<bcopy_aux_1197@49:3>]($75:int,$77:int) = true
        P[<fail_1615@60:0>]($67:bool) = false
    end YhornInterface.solve(15316)[3] (0.017997 sec.)
    
  end RefTypeInfer.infer_etrs(8081)[2] (0.126981 sec.)
  refinement types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1615: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var157:int ->
            var156:int ->
            var155:int -> var154:int -> (var153:int -> (var152:int -> X) -> X) -> var149:int -> (var148:int -> X) -> X
    f_1614: var162:int -> var161:int -> var160:int -> var159:unit -> X
    f_bcopy_aux_1609: var176:int ->
                      var175:int ->
                      (var174:int -> (var173:int -> X) -> X) ->
                      (var170:unit -> X) -> (var168:int -> (var167:int -> X) -> X) -> var164:int -> X
    f_bcopy_aux_1610: var190:int ->
                      var189:int ->
                      var188:int ->
                      (var187:unit -> X) ->
                      (var185:int -> (var184:int -> X) -> X) -> (var181:int -> (var180:int -> X) -> X) -> X
    f_update_1608: var204:int ->
                   var203:int ->
                   var202:int ->
                   (var201:int -> (var200:int -> X) -> X) ->
                   ((var197:int -> (var196:int -> X) -> X) -> X) -> var192:int -> X
    k_make_array_u_1243: var210:int -> var209:int -> (var208:int -> X) -> var206:unit -> X
    update_1198: var223:int ->
                 var222:int ->
                 (var221:int -> (var220:int -> X) -> X) ->
                 var217:int -> ((var216:int -> (var215:int -> X) -> X) -> X) -> X
  abstraction types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1615: v1:bool -> (v2:unit -> X) -> X
    a_1038: var157:int ->
            var156:int ->
            var155:int -> var154:int -> (var153:int -> (var152:int -> X) -> X) -> var149:int -> (var148:int -> X) -> X
    f_1614: var162:int -> var161:int -> var160:int -> var159:unit -> X
    f_bcopy_aux_1609: var176:int ->
                      var175:int ->
                      (var174:int -> (var173:int -> X) -> X) ->
                      (var170:unit -> X) -> (var168:int -> (var167:int -> X) -> X) -> var164:int -> X
    f_bcopy_aux_1610: var190:int ->
                      var189:int ->
                      var188:int ->
                      (var187:unit -> X) ->
                      (var185:int -> (var184:int -> X) -> X) -> (var181:int -> (var180:int -> X) -> X) -> X
    f_update_1608: var204:int ->
                   var203:int ->
                   var202:int ->
                   (var201:int -> (var200:int -> X) -> X) ->
                   ((var197:int -> (var196:int -> X) -> X) -> X) -> var192:int -> X
    k_make_array_u_1243: var210:int -> var209:int -> (var208:int -> X) -> var206:unit -> X
    update_1198: var223:int ->
                 var222:int ->
                 (var221:int -> (var220:int -> X) -> X) ->
                 var217:int -> ((var216:int -> (var215:int -> X) -> X) -> X) -> X
  
end AbsTypeInfer.refine(8080)[1] (0.132980 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1607
  main_1607 -> (rand_int f_1611)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (i_1034 = j_1039) -> (k_update_a_1312 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (
      not (i_1034 = j_1039)) -> (a_1036 j_1039 k_update_a_1312)
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (i_1044 >= m_1041) -> (k_bcopy_aux_1376 ())
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (
      not (i_1044 >= m_1041)) -> (src_1042 i_1044 (f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042))
  f_1611 x_1548 -> (rand_int (f_1612 x_1548))
  f_1612 x_1548 x_1561 -> (rand_int (f_1613 x_1548 x_1561))
  f_1613 x_1548 x_1561 x_1574 -> (main_1045 x_1548 x_1561 x_1574 (f_1614 x_1548 x_1561 x_1574))
  f_1614 x_1548 x_1561 x_1574 x_1545 -> end
  f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 ->
      (update_1198 i_1044 m_1041 des_1043 x_1429 (f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042))
  f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 ->
      (bcopy_aux_1197 m_1041 src_1042 x_1446 (i_1044 + 1) k_bcopy_aux_1376)
  f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 ->
      (k_update_1291 (a_1038 i_1034 n_1035 x_1037 x_1297 a_1036))
  fail_1615 b k -> {fail} => (k ())
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when b_1542 ->
      (bcopy_aux_1197 n_1046 (make_array_1030 n_1046) (make_array_1030 m_1047) i_1048 k_main_1477)
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when (not b_1542) -> (k_main_1477 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when b_1244 ->
      (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when (not b_1244) ->
      (fail_1615 true (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226))
  k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 -> (k_make_array_1226 0)
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (i_1048 = 0) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 (n_1046 <= m_1047))
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (not (i_1048 = 0)) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 false)
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (0 <= i_1032) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (not (0 <= i_1032)) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 false)
  update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 ->
      (a_1036 i_1034 (f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291))
Types:
  main_1607 : X
  bcopy_aux_1197 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                    (int -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1615 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1607 ... --> 
  f_1611 ... --> 
  f_1612 ... --> 
  f_1613 ... --> 
  main_1045 [1/2] ... --> 
  k_main_1512 [1/2] ... --> 
  bcopy_aux_1197 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1232 [1/2] ... --> 
  k_make_array_u_1243 ... --> 
  f_bcopy_aux_1609 ... --> 
  update_1198 ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1232 [2/2] ... --> 
  fail_1615 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(16380)[1]
  program:
    main_1607  | true = ((Random.int 0) f_1611)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    i_1034 = j_1039) = (k_update_a_1312 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    not (i_1034 = j_1039)) = (a_1036 j_1039
                                     k_update_a_1312)
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    i_1044 >= m_1041) = (k_bcopy_aux_1376 ())
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    not (i_1044 >= m_1041)) = (src_1042 i_1044
                                        (f_bcopy_aux_1609 i_1044
                                                          m_1041
                                                          des_1043
                                                          k_bcopy_aux_1376
                                                          src_1042))
    f_1611 x_1548 | true = ((Random.int 0) (f_1612 x_1548))
    f_1612 x_1548 x_1561 | true = ((Random.int 0) (f_1613 x_1548
                                                          x_1561))
    f_1613 x_1548 x_1561 x_1574 | true = (main_1045 x_1548
                                                    x_1561
                                                    x_1574
                                                    (f_1614 x_1548
                                                            x_1561
                                                            x_1574))
    f_1614 x_1548 x_1561 x_1574 x_1545 | true = end
    f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 | true = (
    update_1198 i_1044
                m_1041
                des_1043
                x_1429
                (f_bcopy_aux_1610 i_1044
                                  m_1041
                                  x_1429
                                  k_bcopy_aux_1376
                                  src_1042))
    f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 | true = (
    bcopy_aux_1197 m_1041
                   src_1042
                   x_1446
                   (i_1044 + 1)
                   k_bcopy_aux_1376)
    f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 | true = (
    k_update_1291 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1297
                          a_1036))
    fail_1615 b k | true = (fail ())
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | b_1542 = (bcopy_aux_1197
                                                                    n_1046
                                                                    (
                                                                    make_array_1030 n_1046)
                                                                    (
                                                                    make_array_1030 m_1047)
                                                                    i_1048
                                                                    k_main_1477)
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | (not b_1542) = (
    k_main_1477 ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | b_1244 = (
    k_make_array_u_1243 i_1032
                        n_1031
                        k_make_array_1226
                        ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | (not b_1244) = (
    fail_1615 true
              (k_make_array_u_1243 i_1032
                                   n_1031
                                   k_make_array_1226))
    k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 | true = (
    k_make_array_1226 0)
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (i_1048 = 0) = (k_main_1512
                                                                   i_1048
                                                                   m_1047
                                                                   n_1046
                                                                   k_main_1477
                                                                   (n_1046 <= m_1047))
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (not (i_1048 = 0)) = (
    k_main_1512 i_1048
                m_1047
                n_1046
                k_main_1477
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (0 <= i_1032) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (not (0 <= i_1032)) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        false)
    update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 | true = (a_1036
                                                                    i_1034
                                                                    (
                                                                    f_update_1608
                                                                    i_1034
                                                                    n_1035
                                                                    x_1037
                                                                    a_1036
                                                                    k_update_1291))
    main_1607:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    bcopy_aux_1197:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1611:int -> X
    f_1612:int -> int -> X
    f_1613:int -> int -> int -> X
    f_1614:int -> int -> int -> unit -> X
    f_bcopy_aux_1609:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1610:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> X
    f_update_1608:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1615:bool -> (unit -> X) -> X
    k_main_1512:int -> int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1232:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1243:int -> int -> (int -> X) -> unit -> X
    main_1045:int -> int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1198:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1611,f_1612,f_1613,f_1614,f_bcopy_aux_1609,f_bcopy_aux_1610,f_update_1608,k_main_1512,k_make_array_u_1232,k_make_array_u_1243,main_1045,make_array_1030,update_1198
  counterexample: 0:0:0:0:0:0:1:0:0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1611@66:0> = var224)
     [true.nop((<f_1612@69:0> = <f_1611@66:0>) && (<f_1612@69:1> = var225))
      [true.nop((<f_1613@72:0> = <f_1612@69:0>) && ((<f_1613@72:1> = <f_1612@69:1>) && (<f_1613@72:2> = var226)))
       [true.
        ((<main_1045@74:0> = <f_1613@72:0>) &&
         ((<main_1045@74:1> = <f_1613@72:1>) && (<main_1045@74:2> = <f_1613@72:2>)))
        [(<main_1045@74:2> = 0).
         ((<k_main_1512@77:0> = <main_1045@74:2>) &&
          ((<k_main_1512@77:1> = <main_1045@74:1>) &&
           ((<k_main_1512@77:2> = <main_1045@74:0>) && (<k_main_1512@77:4> = (<main_1045@74:0> <= <main_1045@74:1>)))))
         [<k_main_1512@77:4>.
          ((<bcopy_aux_1197@80:0> = <k_main_1512@77:2>) && (<bcopy_aux_1197@80:3> = <k_main_1512@77:0>))
          [(not (<bcopy_aux_1197@80:3> >= <bcopy_aux_1197@80:0>)).
           (<<bcopy_aux_1197@80:1>@83:0> = <bcopy_aux_1197@80:3>)
           [true.
            ((<make_array_1030@85:0> = <k_main_1512@77:2>) && (<make_array_1030@85:1> = <<bcopy_aux_1197@80:1>@83:0>))
            [(0 <= <make_array_1030@85:1>).
             ((<k_make_array_u_1232@88:0> = <make_array_1030@85:1>) &&
              ((<k_make_array_u_1232@88:1> = <make_array_1030@85:0>) &&
               (<k_make_array_u_1232@88:3> = (<make_array_1030@85:1> < <make_array_1030@85:0>))))
             [<k_make_array_u_1232@88:3>.
              ((<k_make_array_u_1243@91:0> = <k_make_array_u_1232@88:0>) &&
               ((<k_make_array_u_1243@91:1> = <k_make_array_u_1232@88:1>) && (<k_make_array_u_1243@91:3> = ())))
              [true.(<<k_make_array_u_1243@91:2>@93:0> = 0)
               [true.(<<k_make_array_u_1232@88:2>@95:0> = <<k_make_array_u_1243@91:2>@93:0>)
                [true.(<<make_array_1030@85:2>@97:0> = <<k_make_array_u_1232@88:2>@95:0>)
                 [true.(<<<bcopy_aux_1197@80:1>@83:1>@99:0> = <<make_array_1030@85:2>@97:0>)
                  [true.
                   ((<f_bcopy_aux_1609@101:0> = <bcopy_aux_1197@80:3>) &&
                    ((<f_bcopy_aux_1609@101:1> = <bcopy_aux_1197@80:0>) &&
                     (<f_bcopy_aux_1609@101:5> = <<<bcopy_aux_1197@80:1>@83:1>@99:0>)))
                   [true.
                    ((<update_1198@103:0> = <f_bcopy_aux_1609@101:0>) &&
                     ((<update_1198@103:1> = <f_bcopy_aux_1609@101:1>) &&
                      (<update_1198@103:3> = <f_bcopy_aux_1609@101:5>)))
                    [true.(<<update_1198@103:2>@105:0> = <update_1198@103:0>)
                     [true.(<<f_bcopy_aux_1609@101:2>@107:0> = <<update_1198@103:2>@105:0>)
                      [true.(<<bcopy_aux_1197@80:2>@109:0> = <<f_bcopy_aux_1609@101:2>@107:0>)
                       [true.
                        ((<make_array_1030@111:0> = <k_main_1512@77:1>) &&
                         (<make_array_1030@111:1> = <<bcopy_aux_1197@80:2>@109:0>))
                        [(not (0 <= <make_array_1030@111:1>)).
                         ((<k_make_array_u_1232@114:0> = <make_array_1030@111:1>) &&
                          ((<k_make_array_u_1232@114:1> = <make_array_1030@111:0>) &&
                           (<k_make_array_u_1232@114:3> = false)))
                         [(not <k_make_array_u_1232@114:3>).(<fail_1615@117:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(16381)[2]
    horn clauses:
      P[<fail_1615@117:0>](<fail_1615@117:0>:bool)|- bot
      
      P[<k_make_array_u_1232@114:3>](<k_make_array_u_1232@114:0>:int,<k_make_array_u_1232@114:1>:int,false:bool),
      <fail_1615@117:0> |- P[<fail_1615@117:0>](<fail_1615@117:0>:bool)
      
      P[<make_array_1030@111:1>](<k_make_array_u_1232@114:1>:int,<k_make_array_u_1232@114:0>:int),
      ((0 > <k_make_array_u_1232@114:0>) && (not <k_make_array_u_1232@114:3>))
      |- P[<k_make_array_u_1232@114:3>](<k_make_array_u_1232@114:0>:int,
                                        <k_make_array_u_1232@114:1>:int,
                                        <k_make_array_u_1232@114:3>:bool)
      
      P[<k_main_1512@77:4>](<bcopy_aux_1197@80:3>:int,<make_array_1030@111:0>:int,<bcopy_aux_1197@80:0>:int,true:bool),
      P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,<make_array_1030@111:1>:int)|- P[<make_array_1030@111:1>](
      <make_array_1030@111:0>:int,<make_array_1030@111:1>:int)
      
      P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
      P[<<f_bcopy_aux_1609@101:2>@107:0>](<<bcopy_aux_1197@80:1>@83:0>:int,<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
      (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
      |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int)
      
      P[<f_bcopy_aux_1609@101:5>](<f_bcopy_aux_1609@101:0>:int,<f_bcopy_aux_1609@101:1>:int,<update_1198@103:3>:int),
      P[<<update_1198@103:2>@105:0>](<f_bcopy_aux_1609@101:0>:int,<f_bcopy_aux_1609@101:1>:int,<<f_bcopy_aux_1609@101:2>@107:0>:int)|- P[<<f_bcopy_aux_1609@101:2>@107:0>](
      <f_bcopy_aux_1609@101:0>:int,<f_bcopy_aux_1609@101:1>:int,<<f_bcopy_aux_1609@101:2>@107:0>:int)
      
      P[<update_1198@103:3>](<update_1198@103:0>:int,<update_1198@103:1>:int,<update_1198@103:3>:int),
      (<<update_1198@103:2>@105:0> = <update_1198@103:0>)
      |- P[<<update_1198@103:2>@105:0>](<update_1198@103:0>:int,<update_1198@103:1>:int,
                                        <<update_1198@103:2>@105:0>:int)
      
      P[<f_bcopy_aux_1609@101:5>](<update_1198@103:0>:int,<update_1198@103:1>:int,<update_1198@103:3>:int)|- P[<update_1198@103:3>](
      <update_1198@103:0>:int,<update_1198@103:1>:int,<update_1198@103:3>:int)
      
      P[<bcopy_aux_1197@80:3>](<f_bcopy_aux_1609@101:1>:int,<f_bcopy_aux_1609@101:0>:int),
      P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<f_bcopy_aux_1609@101:1>:int,<f_bcopy_aux_1609@101:0>:int,<f_bcopy_aux_1609@101:5>:int),
      (<f_bcopy_aux_1609@101:0> < <f_bcopy_aux_1609@101:1>)
      |- P[<f_bcopy_aux_1609@101:5>](<f_bcopy_aux_1609@101:0>:int,<f_bcopy_aux_1609@101:1>:int,
                                     <f_bcopy_aux_1609@101:5>:int)
      
      P[<k_main_1512@77:4>](<bcopy_aux_1197@80:3>:int,<k_main_1512@77:1>:int,<bcopy_aux_1197@80:0>:int,true:bool),
      P[<<make_array_1030@85:2>@97:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int,<<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)|- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](
      <bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int,<<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
      
      P[<make_array_1030@85:1>](<make_array_1030@85:0>:int,<make_array_1030@85:1>:int),
      P[<<k_make_array_u_1232@88:2>@95:0>](<make_array_1030@85:1>:int,<make_array_1030@85:0>:int,<<make_array_1030@85:2>@97:0>:int),
      (0 <= <make_array_1030@85:1>)
      |- P[<<make_array_1030@85:2>@97:0>](<make_array_1030@85:0>:int,
                                          <make_array_1030@85:1>:int,
                                          <<make_array_1030@85:2>@97:0>:int)
      
      P[<k_make_array_u_1232@88:3>](<k_make_array_u_1232@88:0>:int,<k_make_array_u_1232@88:1>:int,true:bool),
      P[<<k_make_array_u_1243@91:2>@93:0>](<k_make_array_u_1232@88:0>:int,<k_make_array_u_1232@88:1>:int,<<k_make_array_u_1232@88:2>@95:0>:int)|- P[<<k_make_array_u_1232@88:2>@95:0>](
      <k_make_array_u_1232@88:0>:int,<k_make_array_u_1232@88:1>:int,<<k_make_array_u_1232@88:2>@95:0>:int)
      
      P[<k_make_array_u_1243@91:3>](<k_make_array_u_1243@91:0>:int,<k_make_array_u_1243@91:1>:int,<k_make_array_u_1243@91:3>:unit),
      (<<k_make_array_u_1243@91:2>@93:0> = 0)
      |- P[<<k_make_array_u_1243@91:2>@93:0>](<k_make_array_u_1243@91:0>:int,
                                              <k_make_array_u_1243@91:1>:int,
                                              <<k_make_array_u_1243@91:2>@93:0>:int)
      
      P[<k_make_array_u_1232@88:3>](<k_make_array_u_1243@91:0>:int,<k_make_array_u_1243@91:1>:int,true:bool)|- P[<k_make_array_u_1243@91:3>](
      <k_make_array_u_1243@91:0>:int,<k_make_array_u_1243@91:1>:int,<k_make_array_u_1243@91:3>:unit)
      
      P[<make_array_1030@85:1>](<k_make_array_u_1232@88:1>:int,<k_make_array_u_1232@88:0>:int),
      ((0 <= <k_make_array_u_1232@88:0>) &&
       (<k_make_array_u_1232@88:3> = (<k_make_array_u_1232@88:0> < <k_make_array_u_1232@88:1>)))
      |- P[<k_make_array_u_1232@88:3>](<k_make_array_u_1232@88:0>:int,
                                       <k_make_array_u_1232@88:1>:int,
                                       <k_make_array_u_1232@88:3>:bool)
      
      P[<k_main_1512@77:4>](<bcopy_aux_1197@80:3>:int,<k_main_1512@77:1>:int,<make_array_1030@85:0>:int,true:bool),
      P[<<bcopy_aux_1197@80:1>@83:0>](<make_array_1030@85:0>:int,<make_array_1030@85:1>:int)|- P[<make_array_1030@85:1>](
      <make_array_1030@85:0>:int,<make_array_1030@85:1>:int)
      
      P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
      (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
      |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int)
      
      P[<k_main_1512@77:4>](<bcopy_aux_1197@80:3>:int,<k_main_1512@77:1>:int,<bcopy_aux_1197@80:0>:int,true:bool)|- P[<bcopy_aux_1197@80:3>](
      <bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int)
      
      P[<main_1045@74:2>](<k_main_1512@77:2>:int,<k_main_1512@77:1>:int,<k_main_1512@77:0>:int),
      ((<k_main_1512@77:0> = 0) && (<k_main_1512@77:4> = (<k_main_1512@77:2> <= <k_main_1512@77:1>)))
      |- P[<k_main_1512@77:4>](<k_main_1512@77:0>:int,<k_main_1512@77:1>:int,
                               <k_main_1512@77:2>:int,<k_main_1512@77:4>:bool)
      
      P[<f_1613@72:2>](<main_1045@74:0>:int,<main_1045@74:1>:int,<main_1045@74:2>:int)|- P[<main_1045@74:2>](
      <main_1045@74:0>:int,<main_1045@74:1>:int,<main_1045@74:2>:int)
      
      P[<f_1612@69:1>](<f_1613@72:0>:int,<f_1613@72:1>:int)|- P[<f_1613@72:2>](
      <f_1613@72:0>:int,<f_1613@72:1>:int,<f_1613@72:2>:int)
      
      P[<f_1611@66:0>](<f_1612@69:0>:int)|- P[<f_1612@69:1>](<f_1612@69:0>:int,
                                                             <f_1612@69:1>:int)
      
      |- P[<f_1611@66:0>](<f_1611@66:0>:int)
    call trees:
      <main_1607@63>
        <f_1611@66>
          <f_1612@69>
            <f_1613@72>
              <main_1045@74>
                <k_main_1512@77>
                  <bcopy_aux_1197@80>
                  </<bcopy_aux_1197@80:1>@83>
                  <make_array_1030@85>
                    <k_make_array_u_1232@88>
                      <k_make_array_u_1243@91>
                      </<k_make_array_u_1243@91:2>@93>
                    </<k_make_array_u_1232@88:2>@95>
                  </<make_array_1030@85:2>@97>
                  <<<bcopy_aux_1197@80:1>@83:1>@99>
                    <f_bcopy_aux_1609@101>
                      <update_1198@103>
                      </<update_1198@103:2>@105>
                    </<f_bcopy_aux_1609@101:2>@107>
                  </<bcopy_aux_1197@80:2>@109>
                  <make_array_1030@111>
                    <k_make_array_u_1232@114>
                      <fail_1615@117>
    inlined horn clauses:
      P[<fail_1615@117:0>](<fail_1615@117:0>:bool)|- bot
      
      P[<<bcopy_aux_1197@80:2>@109:0>](var229:int,<k_make_array_u_1232@114:0>:int),
      ((0 > <k_make_array_u_1232@114:0>) && <fail_1615@117:0>) |- P[<fail_1615@117:0>](
      <fail_1615@117:0>:bool)
      
      P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var230:int),
      P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
      (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>)
      |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int)
      
      P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
      ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
       ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (0 <= <<bcopy_aux_1197@80:1>@83:0>)))
      |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                <<bcopy_aux_1197@80:1>@83:0>:int,
                                                <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
      
      P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
      (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
      |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int)
      
       (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                               <bcopy_aux_1197@80:3>:int)
    begin ParamSubstInfer.infer(19709)[3]
      
    end ParamSubstInfer.infer(19709)[3] (0.134980 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(19711)[3]
      
    end RefTypeInfer.elim_coeffs(19711)[3] (0.002999 sec.)
    begin GenHcSolver.solve(19976)[3]
      Horn clauses:
        P[<fail_1615@117:0>](<fail_1615@117:0>:bool)|- bot
        
        P[<<bcopy_aux_1197@80:2>@109:0>](var229:int,<k_make_array_u_1232@114:0>:int),
        ((0 > <k_make_array_u_1232@114:0>) && <fail_1615@117:0>) |- P[<fail_1615@117:0>](
        <fail_1615@117:0>:bool)
        
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var230:int),
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
        (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>)
        |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,
                                            <<bcopy_aux_1197@80:2>@109:0>:int)
        
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
        ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
         ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (0 <= <<bcopy_aux_1197@80:1>@83:0>)))
        |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                  <<bcopy_aux_1197@80:1>@83:0>:int,
                                                  <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
        
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
        (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
        |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                           <<bcopy_aux_1197@80:1>@83:0>:int)
        
         (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                 <bcopy_aux_1197@80:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int) = (<bcopy_aux_1197@80:3> = 0)
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int) =
        ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int,<<<bcopy_aux_1197@80:1>@83:1>@99:0>:int) =
        ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
         ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)))
        P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int) =
        ((<<bcopy_aux_1197@80:2>@109:0> = 0) && (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>))
        P[<fail_1615@117:0>](<fail_1615@117:0>:bool) = false
      upper bounds:
        P[<fail_1615@117:0>](var232:bool) = true
      begin GenHcSolver.classify_pids(21662)[4]
        output:
          [<fail_1615@117:0>]
      end GenHcSolver.classify_pids(21662)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(21665)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(21666)[5]
          begin InterpProver.interpolate_fresh(21667)[6]
            begin InterpProver.interpolate_log(21668)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(21669)[8]
                begin InterpProver.interpolate_simplify(21670)[9]
                  begin InterpProver.interpolate_quick(21683)[10]
                    
                  end InterpProver.interpolate_quick(21683)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(21687)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(21687)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(21670)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(21669)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(21668)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(21667)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(21666)[5] (0.000000 sec.)
        output:
          P[<fail_1615@117:0>](<fail_1615@117:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(21665)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1197@80:2>@109:0>](var229:int,<k_make_array_u_1232@114:0>:int), (
        0 > <k_make_array_u_1232@114:0>) |- bot
        
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var230:int),
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
        (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>)
        |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,
                                            <<bcopy_aux_1197@80:2>@109:0>:int)
        
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
        ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
         ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (0 <= <<bcopy_aux_1197@80:1>@83:0>)))
        |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                  <<bcopy_aux_1197@80:1>@83:0>:int,
                                                  <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
        
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
        (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
        |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                           <<bcopy_aux_1197@80:1>@83:0>:int)
        
         (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                 <bcopy_aux_1197@80:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int) = (<bcopy_aux_1197@80:3> = 0)
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int) =
        ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int,<<<bcopy_aux_1197@80:1>@83:1>@99:0>:int) =
        ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
         ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)))
        P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int) =
        ((<<bcopy_aux_1197@80:2>@109:0> = 0) && (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>))
      upper bounds:
        P[<<bcopy_aux_1197@80:2>@109:0>](var233:int,var234:int) = (0 <= var234)
      begin GenHcSolver.classify_pids(23618)[4]
        output:
          [<<bcopy_aux_1197@80:2>@109:0>]
      end GenHcSolver.classify_pids(23618)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1197@80:2>@109:0> = 0) && (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>))
      nub:(not (0 <= <<bcopy_aux_1197@80:2>@109:0>))
      begin ApronInterface.convex_hull_interpolate(23621)[4]
        lb:((<<bcopy_aux_1197@80:2>@109:0> = 0) && (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>))
        nub:(not (0 <= <<bcopy_aux_1197@80:2>@109:0>))
        lb':((<<bcopy_aux_1197@80:2>@109:0> = 0) && (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>))
        nub':(not (0 <= <<bcopy_aux_1197@80:2>@109:0>))
        begin InterpProver.interpolate(23622)[5]
          begin InterpProver.interpolate_fresh(23623)[6]
            begin InterpProver.interpolate_log(23624)[7]
              input1: ((<<bcopy_aux_1197@80:2>@109:0> = 0) && (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>))
              input2: (not (0 <= <<bcopy_aux_1197@80:2>@109:0>))
              begin InterpProver.interpolate_check(23625)[8]
                begin InterpProver.interpolate_simplify(23626)[9]
                  begin InterpProver.interpolate_quick(23659)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(23668)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(23669)[12]
                        begin CsisatInterface.interpolate_csisat_log(23670)[13]
                          input1: (0 = v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0 & (1 + v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0) <= v_sep_bcopy_aux_1197_sep_80_sep_0)
                          input2: (1 + v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(23671)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(23671)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(23670)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(23669)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(23668)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(23659)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(23626)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(23625)[8] (0.001000 sec.)
              output: (0 <= <<bcopy_aux_1197@80:2>@109:0>)
            end InterpProver.interpolate_log(23624)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(23623)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(23622)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int) =
          (0 <= <<bcopy_aux_1197@80:2>@109:0>)
      end ApronInterface.convex_hull_interpolate(23621)[4] (0.001000 sec.)
      Horn clauses:
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var230:int),
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
        ((<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>) && (0 > <<bcopy_aux_1197@80:2>@109:0>)) |- bot
        
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
        ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
         ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (0 <= <<bcopy_aux_1197@80:1>@83:0>)))
        |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                  <<bcopy_aux_1197@80:1>@83:0>:int,
                                                  <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
        
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
        (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
        |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                           <<bcopy_aux_1197@80:1>@83:0>:int)
        
         (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                 <bcopy_aux_1197@80:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int) = (<bcopy_aux_1197@80:3> = 0)
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int) =
        ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int,<<<bcopy_aux_1197@80:1>@83:1>@99:0>:int) =
        ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
         ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)))
      upper bounds:
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](var235:int,var236:int,var237:int) = true
      begin GenHcSolver.classify_pids(25191)[4]
        output:
          [<<<bcopy_aux_1197@80:1>@83:1>@99:0>]
      end GenHcSolver.classify_pids(25191)[4] (0.000000 sec.)
      lb:((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
          ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(25194)[4]
        lb:((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
            ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)))
        nub:false
        lb':((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
             ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)))
        nub':false
        begin InterpProver.interpolate(25195)[5]
          begin InterpProver.interpolate_fresh(25196)[6]
            begin InterpProver.interpolate_log(25197)[7]
              input1: ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
                       ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)))
              input2: false
              begin InterpProver.interpolate_check(25198)[8]
                begin InterpProver.interpolate_simplify(25199)[9]
                  begin InterpProver.interpolate_quick(25254)[10]
                    
                  end InterpProver.interpolate_quick(25254)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(25199)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(25198)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(25197)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(25196)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(25195)[5] (0.001000 sec.)
        output:
          P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int,<<<bcopy_aux_1197@80:1>@83:1>@99:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(25194)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
        ((<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>) && (0 > <<bcopy_aux_1197@80:2>@109:0>)) |- bot
        
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
        (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
        |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                           <<bcopy_aux_1197@80:1>@83:0>:int)
        
         (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                 <bcopy_aux_1197@80:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int) = (<bcopy_aux_1197@80:3> = 0)
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int) =
        ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
      upper bounds:
        P[<<bcopy_aux_1197@80:1>@83:0>](var238:int,var239:int) = true
      begin GenHcSolver.classify_pids(26181)[4]
        output:
          [<<bcopy_aux_1197@80:1>@83:0>]
      end GenHcSolver.classify_pids(26181)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(26184)[4]
        lb:((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
        nub:false
        lb':((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
        nub':false
        begin InterpProver.interpolate(26185)[5]
          begin InterpProver.interpolate_fresh(26186)[6]
            begin InterpProver.interpolate_log(26187)[7]
              input1: ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
              input2: false
              begin InterpProver.interpolate_check(26188)[8]
                begin InterpProver.interpolate_simplify(26189)[9]
                  begin InterpProver.interpolate_quick(26228)[10]
                    
                  end InterpProver.interpolate_quick(26228)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(26189)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(26188)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(26187)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(26186)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(26185)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int) = true
      end ApronInterface.convex_hull_interpolate(26184)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
        ((<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>) && (0 > <<bcopy_aux_1197@80:2>@109:0>)) |- bot
        
         (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                 <bcopy_aux_1197@80:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int) = (<bcopy_aux_1197@80:3> = 0)
      upper bounds:
        P[<bcopy_aux_1197@80:3>](var240:int,var241:int) = ((var241 >= var240) || (0 <= var241))
      begin GenHcSolver.classify_pids(26937)[4]
        output:
          [<bcopy_aux_1197@80:3>]
      end GenHcSolver.classify_pids(26937)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1197@80:3> = 0)
      nub:(not ((<bcopy_aux_1197@80:3> >= <bcopy_aux_1197@80:0>) || (0 <= <bcopy_aux_1197@80:3>)))
      begin ApronInterface.convex_hull_interpolate(26940)[4]
        lb:(<bcopy_aux_1197@80:3> = 0)
        nub:(not ((<bcopy_aux_1197@80:3> >= <bcopy_aux_1197@80:0>) || (0 <= <bcopy_aux_1197@80:3>)))
        lb':(<bcopy_aux_1197@80:3> = 0)
        nub':(not ((<bcopy_aux_1197@80:3> >= <bcopy_aux_1197@80:0>) || (0 <= <bcopy_aux_1197@80:3>)))
        begin InterpProver.interpolate(26941)[5]
          begin InterpProver.interpolate_fresh(26942)[6]
            begin InterpProver.interpolate_log(26943)[7]
              input1: (<bcopy_aux_1197@80:3> = 0)
              input2: (not ((<bcopy_aux_1197@80:3> >= <bcopy_aux_1197@80:0>) || (0 <= <bcopy_aux_1197@80:3>)))
              begin InterpProver.interpolate_check(26944)[8]
                begin InterpProver.interpolate_simplify(26945)[9]
                  begin InterpProver.interpolate_quick(26984)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(26993)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(26994)[12]
                        begin CsisatInterface.interpolate_csisat_log(26995)[13]
                          input1: 0 = v_sep_bcopy_aux_1197_sep_80_sep_3
                          input2: ((1 + v_sep_bcopy_aux_1197_sep_80_sep_3) <= 0 & (1 + v_sep_bcopy_aux_1197_sep_80_sep_3) <= v_sep_bcopy_aux_1197_sep_80_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(26996)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(26996)[14] (0.001000 sec.)
                          output: -2*v_sep_bcopy_aux_1197_sep_80_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(26995)[13] (0.001000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1197_sep_80_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1197_sep_80_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(26994)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(26993)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(26984)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(26945)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(26944)[8] (0.001000 sec.)
              output: (0 <= <bcopy_aux_1197@80:3>)
            end InterpProver.interpolate_log(26943)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(26942)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(26941)[5] (0.001000 sec.)
        output:
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int) = (0 <= <bcopy_aux_1197@80:3>)
      end ApronInterface.convex_hull_interpolate(26940)[4] (0.001000 sec.)
      begin HcSolver.check_validity(27112)[4]
        input:
          P[<fail_1615@117:0>](<fail_1615@117:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@80:2>@109:0>](var229:int,<k_make_array_u_1232@114:0>:int),
          ((0 > <k_make_array_u_1232@114:0>) && <fail_1615@117:0>) |- P[<fail_1615@117:0>](
          <fail_1615@117:0>:bool)
          
          P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var230:int),
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
          (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,
                                              <<bcopy_aux_1197@80:2>@109:0>:int)
          
          P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
           ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (0 <= <<bcopy_aux_1197@80:1>@83:0>)))
          |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                    <<bcopy_aux_1197@80:1>@83:0>:int,
                                                    <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
          
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                             <<bcopy_aux_1197@80:1>@83:0>:int)
          
           (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                   <bcopy_aux_1197@80:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(27112)[4] (0.004000 sec.)
      solution:
        P[<fail_1615@117:0>](<fail_1615@117:0>:bool) = false
        P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int) =
        (0 <= <<bcopy_aux_1197@80:2>@109:0>)
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int,<<<bcopy_aux_1197@80:1>@83:1>@99:0>:int) =
        true
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int) = true
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int) = (0 <= <bcopy_aux_1197@80:3>)
    end GenHcSolver.solve(19976)[3] (0.041994 sec.)
    begin GenHcSolver.solve(27587)[3]
      Horn clauses:
        P[<fail_1615@117:0>](<fail_1615@117:0>:bool)|- bot
        
        P[<<bcopy_aux_1197@80:2>@109:0>](var229:int,<k_make_array_u_1232@114:0>:int),
        ((0 > <k_make_array_u_1232@114:0>) && <fail_1615@117:0>) |- P[<fail_1615@117:0>](
        <fail_1615@117:0>:bool)
        
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var230:int),
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
        (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>)
        |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,
                                            <<bcopy_aux_1197@80:2>@109:0>:int)
        
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
        ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
         ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (0 <= <<bcopy_aux_1197@80:1>@83:0>)))
        |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                  <<bcopy_aux_1197@80:1>@83:0>:int,
                                                  <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
        
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
        (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
        |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                           <<bcopy_aux_1197@80:1>@83:0>:int)
        
         (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                 <bcopy_aux_1197@80:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int) = (<bcopy_aux_1197@80:3> = 0)
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int) =
        ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int,<<<bcopy_aux_1197@80:1>@83:1>@99:0>:int) =
        ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
         ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)))
        P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int) =
        ((<<bcopy_aux_1197@80:2>@109:0> = 0) && (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>))
        P[<fail_1615@117:0>](<fail_1615@117:0>:bool) = false
      upper bounds:
        P[<fail_1615@117:0>](var243:bool) = true
      begin GenHcSolver.classify_pids(29273)[4]
        output:
          [<fail_1615@117:0>]
      end GenHcSolver.classify_pids(29273)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(29276)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(29279)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(29279)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(29284)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(29284)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(29287)[5]
          begin InterpProver.interpolate_fresh(29288)[6]
            begin InterpProver.interpolate_log(29289)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(29290)[8]
                begin InterpProver.interpolate_simplify(29291)[9]
                  begin InterpProver.interpolate_quick(29306)[10]
                    
                  end InterpProver.interpolate_quick(29306)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(29310)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(29310)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(29291)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(29290)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(29289)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(29288)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(29287)[5] (0.000000 sec.)
        output:
          P[<fail_1615@117:0>](<fail_1615@117:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(29276)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1197@80:2>@109:0>](var229:int,<k_make_array_u_1232@114:0>:int), (
        0 > <k_make_array_u_1232@114:0>) |- bot
        
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var230:int),
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
        (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>)
        |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,
                                            <<bcopy_aux_1197@80:2>@109:0>:int)
        
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
        ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
         ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (0 <= <<bcopy_aux_1197@80:1>@83:0>)))
        |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                  <<bcopy_aux_1197@80:1>@83:0>:int,
                                                  <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
        
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
        (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
        |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                           <<bcopy_aux_1197@80:1>@83:0>:int)
        
         (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                 <bcopy_aux_1197@80:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int) = (<bcopy_aux_1197@80:3> = 0)
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int) =
        ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int,<<<bcopy_aux_1197@80:1>@83:1>@99:0>:int) =
        ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
         ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)))
        P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int) =
        ((<<bcopy_aux_1197@80:2>@109:0> = 0) && (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>))
      upper bounds:
        P[<<bcopy_aux_1197@80:2>@109:0>](var244:int,var245:int) = (0 <= var245)
      begin GenHcSolver.classify_pids(31248)[4]
        output:
          [<<bcopy_aux_1197@80:2>@109:0>]
      end GenHcSolver.classify_pids(31248)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1197@80:2>@109:0> = 0) && (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>))
      nub:(not (0 <= <<bcopy_aux_1197@80:2>@109:0>))
      begin ApronInterface.convex_hull_interpolate(31251)[4]
        lb:((<<bcopy_aux_1197@80:2>@109:0> = 0) && (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>))
        nub:(not (0 <= <<bcopy_aux_1197@80:2>@109:0>))
        begin ExtFormula.Formula.case_analysis_boolean(31263)[5]
          ts: ((<<bcopy_aux_1197@80:2>@109:0> = 0) && (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(31263)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(31272)[5]
          ts: (0 > <<bcopy_aux_1197@80:2>@109:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(31272)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1197@80:2>@109:0> = 0) && ((-1 + <bcopy_aux_1197@80:0>) >= 0))
        nub':((-1 + (-1 * <<bcopy_aux_1197@80:2>@109:0>)) >= 0)
        begin InterpProver.interpolate(31276)[5]
          begin InterpProver.interpolate_fresh(31277)[6]
            begin InterpProver.interpolate_log(31278)[7]
              input1: ((<<bcopy_aux_1197@80:2>@109:0> = 0) && ((-1 + <bcopy_aux_1197@80:0>) >= 0))
              input2: ((-1 + (-1 * <<bcopy_aux_1197@80:2>@109:0>)) >= 0)
              begin InterpProver.interpolate_check(31279)[8]
                begin InterpProver.interpolate_simplify(31280)[9]
                  begin InterpProver.interpolate_quick(31317)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(31326)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(31327)[12]
                        begin CsisatInterface.interpolate_csisat_log(31328)[13]
                          input1: (0 = v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0 & 1 <= v_sep_bcopy_aux_1197_sep_80_sep_0)
                          input2: (1 + v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(31329)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(31329)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(31328)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(31327)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(31326)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(31317)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(31280)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(31279)[8] (0.002000 sec.)
              output: (0 <= <<bcopy_aux_1197@80:2>@109:0>)
            end InterpProver.interpolate_log(31278)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(31277)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(31276)[5] (0.002000 sec.)
        output:
          P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int) =
          (0 <= <<bcopy_aux_1197@80:2>@109:0>)
      end ApronInterface.convex_hull_interpolate(31251)[4] (0.002000 sec.)
      Horn clauses:
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var230:int),
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
        ((<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>) && (0 > <<bcopy_aux_1197@80:2>@109:0>)) |- bot
        
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
        ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
         ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (0 <= <<bcopy_aux_1197@80:1>@83:0>)))
        |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                  <<bcopy_aux_1197@80:1>@83:0>:int,
                                                  <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
        
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
        (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
        |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                           <<bcopy_aux_1197@80:1>@83:0>:int)
        
         (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                 <bcopy_aux_1197@80:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int) = (<bcopy_aux_1197@80:3> = 0)
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int) =
        ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int,<<<bcopy_aux_1197@80:1>@83:1>@99:0>:int) =
        ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
         ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)))
      upper bounds:
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](var246:int,var247:int,var248:int) = true
      begin GenHcSolver.classify_pids(32856)[4]
        output:
          [<<<bcopy_aux_1197@80:1>@83:1>@99:0>]
      end GenHcSolver.classify_pids(32856)[4] (0.000000 sec.)
      lb:((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
          ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(32859)[4]
        lb:((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
            ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(32879)[5]
          ts: ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
               ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(32879)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(32888)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(32888)[5] (0.000000 sec.)
        lb':((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
             ((<<bcopy_aux_1197@80:1>@83:0> = 0) && ((-1 + <bcopy_aux_1197@80:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(32891)[5]
          begin InterpProver.interpolate_fresh(32892)[6]
            begin InterpProver.interpolate_log(32893)[7]
              input1: ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
                       ((<<bcopy_aux_1197@80:1>@83:0> = 0) && ((-1 + <bcopy_aux_1197@80:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(32894)[8]
                begin InterpProver.interpolate_simplify(32895)[9]
                  begin InterpProver.interpolate_quick(32953)[10]
                    
                  end InterpProver.interpolate_quick(32953)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(32895)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(32894)[8] (0.000999 sec.)
              output: true
            end InterpProver.interpolate_log(32893)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(32892)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(32891)[5] (0.000999 sec.)
        output:
          P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int,<<<bcopy_aux_1197@80:1>@83:1>@99:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(32859)[4] (0.001999 sec.)
      Horn clauses:
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
        ((<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>) && (0 > <<bcopy_aux_1197@80:2>@109:0>)) |- bot
        
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
        (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
        |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                           <<bcopy_aux_1197@80:1>@83:0>:int)
        
         (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                 <bcopy_aux_1197@80:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int) = (<bcopy_aux_1197@80:3> = 0)
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int) =
        ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
      upper bounds:
        P[<<bcopy_aux_1197@80:1>@83:0>](var249:int,var250:int) = true
      begin GenHcSolver.classify_pids(33882)[4]
        output:
          [<<bcopy_aux_1197@80:1>@83:0>]
      end GenHcSolver.classify_pids(33882)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(33885)[4]
        lb:((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(33897)[5]
          ts: ((<<bcopy_aux_1197@80:1>@83:0> = 0) && (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(33897)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(33905)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(33905)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1197@80:1>@83:0> = 0) && ((-1 + <bcopy_aux_1197@80:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(33908)[5]
          begin InterpProver.interpolate_fresh(33909)[6]
            begin InterpProver.interpolate_log(33910)[7]
              input1: ((<<bcopy_aux_1197@80:1>@83:0> = 0) && ((-1 + <bcopy_aux_1197@80:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(33911)[8]
                begin InterpProver.interpolate_simplify(33912)[9]
                  begin InterpProver.interpolate_quick(33952)[10]
                    
                  end InterpProver.interpolate_quick(33952)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(33912)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(33911)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(33910)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(33909)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(33908)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int) = true
      end ApronInterface.convex_hull_interpolate(33885)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
        ((<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>) && (0 > <<bcopy_aux_1197@80:2>@109:0>)) |- bot
        
         (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                 <bcopy_aux_1197@80:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int) = (<bcopy_aux_1197@80:3> = 0)
      upper bounds:
        P[<bcopy_aux_1197@80:3>](var251:int,var252:int) = ((var252 >= var251) || (0 <= var252))
      begin GenHcSolver.classify_pids(34663)[4]
        output:
          [<bcopy_aux_1197@80:3>]
      end GenHcSolver.classify_pids(34663)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1197@80:3> = 0)
      nub:(not ((<bcopy_aux_1197@80:3> >= <bcopy_aux_1197@80:0>) || (0 <= <bcopy_aux_1197@80:3>)))
      begin ApronInterface.convex_hull_interpolate(34666)[4]
        lb:(<bcopy_aux_1197@80:3> = 0)
        nub:(not ((<bcopy_aux_1197@80:3> >= <bcopy_aux_1197@80:0>) || (0 <= <bcopy_aux_1197@80:3>)))
        begin ExtFormula.Formula.case_analysis_boolean(34670)[5]
          ts: (<bcopy_aux_1197@80:3> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(34670)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(34688)[5]
          ts: ((<bcopy_aux_1197@80:3> < <bcopy_aux_1197@80:0>) && (0 > <bcopy_aux_1197@80:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(34688)[5] (0.000000 sec.)
        lb':(<bcopy_aux_1197@80:3> = 0)
        nub':(((-1 + (-1 * <bcopy_aux_1197@80:3>)) >= 0) &&
              (((-1 + (-1 * <bcopy_aux_1197@80:3>)) + <bcopy_aux_1197@80:0>) >= 0))
        begin InterpProver.interpolate(34694)[5]
          begin InterpProver.interpolate_fresh(34695)[6]
            begin InterpProver.interpolate_log(34696)[7]
              input1: (<bcopy_aux_1197@80:3> = 0)
              input2: (((-1 + (-1 * <bcopy_aux_1197@80:3>)) >= 0) &&
                       (((-1 + (-1 * <bcopy_aux_1197@80:3>)) + <bcopy_aux_1197@80:0>) >= 0))
              begin InterpProver.interpolate_check(34697)[8]
                begin InterpProver.interpolate_simplify(34698)[9]
                  begin InterpProver.interpolate_quick(34749)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(34758)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(34759)[12]
                        begin CsisatInterface.interpolate_csisat_log(34760)[13]
                          input1: 0 = v_sep_bcopy_aux_1197_sep_80_sep_3
                          input2: ((1 + v_sep_bcopy_aux_1197_sep_80_sep_3) <= 0 & (1 + v_sep_bcopy_aux_1197_sep_80_sep_3) <= v_sep_bcopy_aux_1197_sep_80_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(34761)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(34761)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1197_sep_80_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(34760)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1197_sep_80_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1197_sep_80_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(34759)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(34758)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(34749)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(34698)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(34697)[8] (0.001000 sec.)
              output: (0 <= <bcopy_aux_1197@80:3>)
            end InterpProver.interpolate_log(34696)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(34695)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(34694)[5] (0.001000 sec.)
        output:
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int) = (0 <= <bcopy_aux_1197@80:3>)
      end ApronInterface.convex_hull_interpolate(34666)[4] (0.001000 sec.)
      begin HcSolver.check_validity(34881)[4]
        input:
          P[<fail_1615@117:0>](<fail_1615@117:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@80:2>@109:0>](var229:int,<k_make_array_u_1232@114:0>:int),
          ((0 > <k_make_array_u_1232@114:0>) && <fail_1615@117:0>) |- P[<fail_1615@117:0>](
          <fail_1615@117:0>:bool)
          
          P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var230:int),
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
          (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,
                                              <<bcopy_aux_1197@80:2>@109:0>:int)
          
          P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
           ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (0 <= <<bcopy_aux_1197@80:1>@83:0>)))
          |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                    <<bcopy_aux_1197@80:1>@83:0>:int,
                                                    <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
          
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                             <<bcopy_aux_1197@80:1>@83:0>:int)
          
           (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                   <bcopy_aux_1197@80:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(34881)[4] (0.001000 sec.)
      solution:
        P[<fail_1615@117:0>](<fail_1615@117:0>:bool) = false
        P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int) =
        (0 <= <<bcopy_aux_1197@80:2>@109:0>)
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int,<<<bcopy_aux_1197@80:1>@83:1>@99:0>:int) =
        true
        P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int) = true
        P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<bcopy_aux_1197@80:3>:int) = (0 <= <bcopy_aux_1197@80:3>)
    end GenHcSolver.solve(27587)[3] (0.046993 sec.)
    begin YhornInterface.solve(35356)[3]
      begin HcSolver.solve_ub(35357)[4]
        encoded:
          P[<fail_1615@117:0>](<fail_1615@117:0>:int)|- bot
          
          P[<<bcopy_aux_1197@80:2>@109:0>](var229:int,<k_make_array_u_1232@114:0>:int),
          ((0 > <k_make_array_u_1232@114:0>) && (<fail_1615@117:0> = 1)) |- P[<fail_1615@117:0>](
          <fail_1615@117:0>:int)
          
          P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var230:int),
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
          (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,
                                              <<bcopy_aux_1197@80:2>@109:0>:int)
          
          P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
           ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (0 <= <<bcopy_aux_1197@80:1>@83:0>)))
          |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                    <<bcopy_aux_1197@80:1>@83:0>:int,
                                                    <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
          
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                             <<bcopy_aux_1197@80:1>@83:0>:int)
          
           (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                   <bcopy_aux_1197@80:3>:int)
        input to Yhorn:
          P[<fail_1615@117:0>](<fail_1615@117:0>:int)|- bot
          
          P[<<bcopy_aux_1197@80:2>@109:0>](var229:int,<k_make_array_u_1232@114:0>:int),
          ((0 > <k_make_array_u_1232@114:0>) && (<fail_1615@117:0> = 1)) |- P[<fail_1615@117:0>](
          <fail_1615@117:0>:int)
          
          P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var230:int),
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
          (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,
                                              <<bcopy_aux_1197@80:2>@109:0>:int)
          
          P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          ((0 <= <<bcopy_aux_1197@80:1>@83:0>) &&
           ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0)))
          |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                    <<bcopy_aux_1197@80:1>@83:0>:int,
                                                    <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
          
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                             <<bcopy_aux_1197@80:1>@83:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1615_sep_117_sep_0($122)) -> 1=0.
(($122-1=0) & (-$123>0)) & (v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0($124,$123)) -> v_sep_fail_1615_sep_117_sep_0($122).
($125-$126<0) & (v_sep_bcopy_aux_1197_sep_80_sep_3($126,$125)) & (v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0($126,$125,$127)) -> v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0($126,$125).
(($128=0) & (-$126+$129<0) & (-$129<=0)) & (v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0($126,$129)) -> v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0($126,$129,$128).
(-$126+$129<0) & (v_sep_bcopy_aux_1197_sep_80_sep_3($126,$129)) -> v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0($126,$129).
$130=0 -> v_sep_bcopy_aux_1197_sep_80_sep_3($126,$130).


v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_3: X
v_sep_fail_1615_sep_117_sep_0: X
.......
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_3: X
v_sep_fail_1615_sep_117_sep_0: X
...
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_3: X
v_sep_fail_1615_sep_117_sep_0: X
.....
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_3: X
v_sep_fail_1615_sep_117_sep_0: X
......
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0: X
v_sep_bcopy_aux_1197_sep_80_sep_3: X
v_sep_fail_1615_sep_117_sep_0: X
.......(0=0) & (v_sep_fail_1615_sep_117_sep_0($122)) -> 1=0.
(($122-1=0) & (-$123>0)) & (v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0($124,$123)) -> v_sep_fail_1615_sep_117_sep_0($122).
($125-$126<0) & (v_sep_bcopy_aux_1197_sep_80_sep_3($126,$125)) & (v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0($126,$125,$127)) -> v_sep_bcopy_aux_1197_sep_80_sep_2_sep_109_sep_0($126,$125).
(($128=0) & (-$126+$129<0) & (-$129<=0)) & (v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0($126,$129)) -> v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_1_sep_99_sep_0($126,$129,$128).
(-$126+$129<0) & (v_sep_bcopy_aux_1197_sep_80_sep_3($126,$129)) -> v_sep_bcopy_aux_1197_sep_80_sep_1_sep_83_sep_0($126,$129).
$130=0 -> v_sep_bcopy_aux_1197_sep_80_sep_3($126,$130).

           (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                   <bcopy_aux_1197@80:3>:int)
        solution:
          P[<<bcopy_aux_1197@80:1>@83:0>]($151:int,$153:int) = true
          P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>]($144:int,$146:int,$148:int) = (0 <= $146)
          P[<<bcopy_aux_1197@80:2>@109:0>]($134:int,$136:int) = (0 <= $136)
          P[<bcopy_aux_1197@80:3>]($139:int,$141:int) = true
          P[<fail_1615@117:0>]($131:bool) = false
        
      end HcSolver.solve_ub(35357)[4] (0.020996 sec.)
      begin HcSolver.check_validity(35542)[4]
        input:
          P[<fail_1615@117:0>](<fail_1615@117:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@80:2>@109:0>](var229:int,<k_make_array_u_1232@114:0>:int),
          ((0 > <k_make_array_u_1232@114:0>) && <fail_1615@117:0>) |- P[<fail_1615@117:0>](
          <fail_1615@117:0>:bool)
          
          P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int,var230:int),
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:2>@109:0>:int),
          (<<bcopy_aux_1197@80:2>@109:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:2>@109:0>](<bcopy_aux_1197@80:0>:int,
                                              <<bcopy_aux_1197@80:2>@109:0>:int)
          
          P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          ((<<<bcopy_aux_1197@80:1>@83:1>@99:0> = 0) &&
           ((<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>) && (0 <= <<bcopy_aux_1197@80:1>@83:0>)))
          |- P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>](<bcopy_aux_1197@80:0>:int,
                                                    <<bcopy_aux_1197@80:1>@83:0>:int,
                                                    <<<bcopy_aux_1197@80:1>@83:1>@99:0>:int)
          
          P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,<<bcopy_aux_1197@80:1>@83:0>:int),
          (<<bcopy_aux_1197@80:1>@83:0> < <bcopy_aux_1197@80:0>)
          |- P[<<bcopy_aux_1197@80:1>@83:0>](<bcopy_aux_1197@80:0>:int,
                                             <<bcopy_aux_1197@80:1>@83:0>:int)
          
           (<bcopy_aux_1197@80:3> = 0) |- P[<bcopy_aux_1197@80:3>](<bcopy_aux_1197@80:0>:int,
                                                                   <bcopy_aux_1197@80:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(35542)[4] (0.003000 sec.)
      solution:
        P[<<bcopy_aux_1197@80:1>@83:0>]($151:int,$153:int) = true
        P[<<<bcopy_aux_1197@80:1>@83:1>@99:0>]($144:int,$146:int,$148:int) = (0 <= $146)
        P[<<bcopy_aux_1197@80:2>@109:0>]($134:int,$136:int) = (0 <= $136)
        P[<bcopy_aux_1197@80:3>]($139:int,$141:int) = true
        P[<fail_1615@117:0>]($131:bool) = false
    end YhornInterface.solve(35356)[3] (0.023996 sec.)
    
  end RefTypeInfer.infer_etrs(16381)[2] (0.272959 sec.)
  refinement types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:int -> (v3:int -> X) -> X) ->
                    (v6:{v6:int | (0 <= v6)} -> (v7:int -> X) -> X) ->
                    v10:{v10:int | (0 <= v10)} -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1243: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1609: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1198: v1:int ->
                 v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> ((v8:int -> (v9:int -> X) -> X) -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1615: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var293:int ->
            var292:int ->
            var291:int -> var290:int -> (var289:int -> (var288:int -> X) -> X) -> var285:int -> (var284:int -> X) -> X
    f_1614: var298:int -> var297:int -> var296:int -> var295:unit -> X
    f_bcopy_aux_1610: var312:int ->
                      var311:int ->
                      var310:int ->
                      (var309:unit -> X) ->
                      (var307:int -> (var306:int -> X) -> X) -> (var303:int -> (var302:int -> X) -> X) -> X
    f_update_1608: var326:int ->
                   var325:int ->
                   var324:int ->
                   (var323:int -> (var322:int -> X) -> X) ->
                   ((var319:int -> (var318:int -> X) -> X) -> X) -> var314:int -> X
  abstraction types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:int -> (v3:int -> X) -> X) ->
                    (v6:int[v6 -> (0 <= v6)] -> (v7:int -> X) -> X) ->
                    v10:int[v10 -> (0 <= v10)] -> (v11:unit -> X) -> X
    make_array_1030: var327:int -> var328:int -> (var329:int -> X) -> X
    k_make_array_u_1232: var332:int -> var333:int -> (var334:int -> X) -> var336:bool -> X
    k_make_array_u_1243: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1609: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1198: v1:int ->
                 v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> ((v8:int -> (v9:int -> X) -> X) -> X) -> X
    fail_1615: v1:bool -> (v2:unit -> X) -> X
    a_1038: var293:int ->
            var292:int ->
            var291:int -> var290:int -> (var289:int -> (var288:int -> X) -> X) -> var285:int -> (var284:int -> X) -> X
    f_1614: var298:int -> var297:int -> var296:int -> var295:unit -> X
    f_bcopy_aux_1610: var312:int ->
                      var311:int ->
                      var310:int ->
                      (var309:unit -> X) ->
                      (var307:int -> (var306:int -> X) -> X) -> (var303:int -> (var302:int -> X) -> X) -> X
    f_update_1608: var326:int ->
                   var325:int ->
                   var324:int ->
                   (var323:int -> (var322:int -> X) -> X) ->
                   ((var319:int -> (var318:int -> X) -> X) -> X) -> var314:int -> X
  
end AbsTypeInfer.refine(16380)[1] (0.280958 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1607
  main_1607 -> (rand_int f_1611)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (i_1034 = j_1039) -> (k_update_a_1312 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (
      not (i_1034 = j_1039)) -> (a_1036 j_1039 k_update_a_1312)
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (i_1044 >= m_1041) -> (k_bcopy_aux_1376 ())
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (
      not (i_1044 >= m_1041)) -> (src_1042 i_1044 (f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042))
  f_1611 x_1548 -> (rand_int (f_1612 x_1548))
  f_1612 x_1548 x_1561 -> (rand_int (f_1613 x_1548 x_1561))
  f_1613 x_1548 x_1561 x_1574 -> (main_1045 x_1548 x_1561 x_1574 (f_1614 x_1548 x_1561 x_1574))
  f_1614 x_1548 x_1561 x_1574 x_1545 -> end
  f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 ->
      (update_1198 i_1044 m_1041 des_1043 x_1429 (f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042))
  f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 ->
      (bcopy_aux_1197 m_1041 src_1042 x_1446 (i_1044 + 1) k_bcopy_aux_1376)
  f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 ->
      (k_update_1291 (a_1038 i_1034 n_1035 x_1037 x_1297 a_1036))
  fail_1615 b k -> {fail} => (k ())
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when b_1542 ->
      (bcopy_aux_1197 n_1046 (make_array_1030 n_1046) (make_array_1030 m_1047) i_1048 k_main_1477)
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when (not b_1542) -> (k_main_1477 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when b_1244 ->
      (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when (not b_1244) ->
      (fail_1615 true (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226))
  k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 -> (k_make_array_1226 0)
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (i_1048 = 0) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 (n_1046 <= m_1047))
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (not (i_1048 = 0)) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 false)
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (0 <= i_1032) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (not (0 <= i_1032)) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 false)
  update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 ->
      (a_1036 i_1034 (f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291))
Types:
  main_1607 : X
  bcopy_aux_1197 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                    (x_9:int[x_9 >= 0] -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1615 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1607 ... --> 
  f_1611 ... --> 
  f_1612 ... --> 
  f_1613 ... --> 
  main_1045 [1/2] ... --> 
  k_main_1512 [1/2] ... --> 
  bcopy_aux_1197 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1232 [1/2] ... --> 
  k_make_array_u_1243 ... --> 
  f_bcopy_aux_1609 ... --> 
  update_1198 ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1232 [2/2] ... --> 
  fail_1615 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(36888)[1]
  program:
    main_1607  | true = ((Random.int 0) f_1611)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    i_1034 = j_1039) = (k_update_a_1312 x_1037)
    a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 | (
    not (i_1034 = j_1039)) = (a_1036 j_1039
                                     k_update_a_1312)
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    i_1044 >= m_1041) = (k_bcopy_aux_1376 ())
    bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 | (
    not (i_1044 >= m_1041)) = (src_1042 i_1044
                                        (f_bcopy_aux_1609 i_1044
                                                          m_1041
                                                          des_1043
                                                          k_bcopy_aux_1376
                                                          src_1042))
    f_1611 x_1548 | true = ((Random.int 0) (f_1612 x_1548))
    f_1612 x_1548 x_1561 | true = ((Random.int 0) (f_1613 x_1548
                                                          x_1561))
    f_1613 x_1548 x_1561 x_1574 | true = (main_1045 x_1548
                                                    x_1561
                                                    x_1574
                                                    (f_1614 x_1548
                                                            x_1561
                                                            x_1574))
    f_1614 x_1548 x_1561 x_1574 x_1545 | true = end
    f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 | true = (
    update_1198 i_1044
                m_1041
                des_1043
                x_1429
                (f_bcopy_aux_1610 i_1044
                                  m_1041
                                  x_1429
                                  k_bcopy_aux_1376
                                  src_1042))
    f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 | true = (
    bcopy_aux_1197 m_1041
                   src_1042
                   x_1446
                   (i_1044 + 1)
                   k_bcopy_aux_1376)
    f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 | true = (
    k_update_1291 (a_1038 i_1034
                          n_1035
                          x_1037
                          x_1297
                          a_1036))
    fail_1615 b k | true = (fail ())
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | b_1542 = (bcopy_aux_1197
                                                                    n_1046
                                                                    (
                                                                    make_array_1030 n_1046)
                                                                    (
                                                                    make_array_1030 m_1047)
                                                                    i_1048
                                                                    k_main_1477)
    k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 | (not b_1542) = (
    k_main_1477 ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | b_1244 = (
    k_make_array_u_1243 i_1032
                        n_1031
                        k_make_array_1226
                        ())
    k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 | (not b_1244) = (
    fail_1615 true
              (k_make_array_u_1243 i_1032
                                   n_1031
                                   k_make_array_1226))
    k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 | true = (
    k_make_array_1226 0)
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (i_1048 = 0) = (k_main_1512
                                                                   i_1048
                                                                   m_1047
                                                                   n_1046
                                                                   k_main_1477
                                                                   (n_1046 <= m_1047))
    main_1045 n_1046 m_1047 i_1048 k_main_1477 | (not (i_1048 = 0)) = (
    k_main_1512 i_1048
                m_1047
                n_1046
                k_main_1477
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (0 <= i_1032) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1226 | (not (0 <= i_1032)) = (
    k_make_array_u_1232 i_1032
                        n_1031
                        k_make_array_1226
                        false)
    update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 | true = (a_1036
                                                                    i_1034
                                                                    (
                                                                    f_update_1608
                                                                    i_1034
                                                                    n_1035
                                                                    x_1037
                                                                    a_1036
                                                                    k_update_1291))
    main_1607:X
    a_1038:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    bcopy_aux_1197:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1611:int -> X
    f_1612:int -> int -> X
    f_1613:int -> int -> int -> X
    f_1614:int -> int -> int -> unit -> X
    f_bcopy_aux_1609:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1610:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> X
    f_update_1608:int -> int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> int -> X
    fail_1615:bool -> (unit -> X) -> X
    k_main_1512:int -> int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1232:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1243:int -> int -> (int -> X) -> unit -> X
    main_1045:int -> int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1198:int -> int -> (int -> (int -> X) -> X) -> int -> ((int -> (int -> X) -> X) -> X) -> X
  inlined functions: a_1038,f_1611,f_1612,f_1613,f_1614,f_bcopy_aux_1609,f_bcopy_aux_1610,f_update_1608,k_main_1512,k_make_array_u_1232,k_make_array_u_1243,main_1045,make_array_1030,update_1198
  counterexample: 0:0:0:0:0:0:1:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1611@123:0> = var338)
     [true.nop((<f_1612@126:0> = <f_1611@123:0>) && (<f_1612@126:1> = var339))
      [true.nop((<f_1613@129:0> = <f_1612@126:0>) && ((<f_1613@129:1> = <f_1612@126:1>) && (<f_1613@129:2> = var340)))
       [true.
        ((<main_1045@131:0> = <f_1613@129:0>) &&
         ((<main_1045@131:1> = <f_1613@129:1>) && (<main_1045@131:2> = <f_1613@129:2>)))
        [(<main_1045@131:2> = 0).
         ((<k_main_1512@134:0> = <main_1045@131:2>) &&
          ((<k_main_1512@134:1> = <main_1045@131:1>) &&
           ((<k_main_1512@134:2> = <main_1045@131:0>) &&
            (<k_main_1512@134:4> = (<main_1045@131:0> <= <main_1045@131:1>)))))
         [<k_main_1512@134:4>.
          ((<bcopy_aux_1197@137:0> = <k_main_1512@134:2>) && (<bcopy_aux_1197@137:3> = <k_main_1512@134:0>))
          [(not (<bcopy_aux_1197@137:3> >= <bcopy_aux_1197@137:0>)).
           (<<bcopy_aux_1197@137:1>@140:0> = <bcopy_aux_1197@137:3>)
           [true.
            ((<make_array_1030@142:0> = <k_main_1512@134:2>) &&
             (<make_array_1030@142:1> = <<bcopy_aux_1197@137:1>@140:0>))
            [(0 <= <make_array_1030@142:1>).
             ((<k_make_array_u_1232@145:0> = <make_array_1030@142:1>) &&
              ((<k_make_array_u_1232@145:1> = <make_array_1030@142:0>) &&
               (<k_make_array_u_1232@145:3> = (<make_array_1030@142:1> < <make_array_1030@142:0>))))
             [<k_make_array_u_1232@145:3>.
              ((<k_make_array_u_1243@148:0> = <k_make_array_u_1232@145:0>) &&
               ((<k_make_array_u_1243@148:1> = <k_make_array_u_1232@145:1>) && (<k_make_array_u_1243@148:3> = ())))
              [true.(<<k_make_array_u_1243@148:2>@150:0> = 0)
               [true.(<<k_make_array_u_1232@145:2>@152:0> = <<k_make_array_u_1243@148:2>@150:0>)
                [true.(<<make_array_1030@142:2>@154:0> = <<k_make_array_u_1232@145:2>@152:0>)
                 [true.(<<<bcopy_aux_1197@137:1>@140:1>@156:0> = <<make_array_1030@142:2>@154:0>)
                  [true.
                   ((<f_bcopy_aux_1609@158:0> = <bcopy_aux_1197@137:3>) &&
                    ((<f_bcopy_aux_1609@158:1> = <bcopy_aux_1197@137:0>) &&
                     (<f_bcopy_aux_1609@158:5> = <<<bcopy_aux_1197@137:1>@140:1>@156:0>)))
                   [true.
                    ((<update_1198@160:0> = <f_bcopy_aux_1609@158:0>) &&
                     ((<update_1198@160:1> = <f_bcopy_aux_1609@158:1>) &&
                      (<update_1198@160:3> = <f_bcopy_aux_1609@158:5>)))
                    [true.(<<update_1198@160:2>@162:0> = <update_1198@160:0>)
                     [true.(<<f_bcopy_aux_1609@158:2>@164:0> = <<update_1198@160:2>@162:0>)
                      [true.(<<bcopy_aux_1197@137:2>@166:0> = <<f_bcopy_aux_1609@158:2>@164:0>)
                       [true.
                        ((<make_array_1030@168:0> = <k_main_1512@134:1>) &&
                         (<make_array_1030@168:1> = <<bcopy_aux_1197@137:2>@166:0>))
                        [(0 <= <make_array_1030@168:1>).
                         ((<k_make_array_u_1232@171:0> = <make_array_1030@168:1>) &&
                          ((<k_make_array_u_1232@171:1> = <make_array_1030@168:0>) &&
                           (<k_make_array_u_1232@171:3> = (<make_array_1030@168:1> < <make_array_1030@168:0>))))
                         [(not <k_make_array_u_1232@171:3>).(<fail_1615@174:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(36889)[2]
    horn clauses:
      P[<fail_1615@174:0>](<fail_1615@174:0>:bool)|- bot
      
      P[<k_make_array_u_1232@171:3>](<k_make_array_u_1232@171:0>:int,<k_make_array_u_1232@171:1>:int,false:bool),
      <fail_1615@174:0> |- P[<fail_1615@174:0>](<fail_1615@174:0>:bool)
      
      P[<make_array_1030@168:1>](<k_make_array_u_1232@171:1>:int,<k_make_array_u_1232@171:0>:int),
      ((0 <= <k_make_array_u_1232@171:0>) &&
       (<k_make_array_u_1232@171:3> = (<k_make_array_u_1232@171:0> < <k_make_array_u_1232@171:1>)))
      |- P[<k_make_array_u_1232@171:3>](<k_make_array_u_1232@171:0>:int,
                                        <k_make_array_u_1232@171:1>:int,
                                        <k_make_array_u_1232@171:3>:bool)
      
      P[<k_main_1512@134:4>](<bcopy_aux_1197@137:3>:int,<make_array_1030@168:0>:int,<bcopy_aux_1197@137:0>:int,true:bool),
      P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,<make_array_1030@168:1>:int)|- P[<make_array_1030@168:1>](
      <make_array_1030@168:0>:int,<make_array_1030@168:1>:int)
      
      P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
      P[<<f_bcopy_aux_1609@158:2>@164:0>](<<bcopy_aux_1197@137:1>@140:0>:int,<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
      (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
      |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                           <<bcopy_aux_1197@137:2>@166:0>:int)
      
      P[<f_bcopy_aux_1609@158:5>](<f_bcopy_aux_1609@158:0>:int,<f_bcopy_aux_1609@158:1>:int,<update_1198@160:3>:int),
      P[<<update_1198@160:2>@162:0>](<f_bcopy_aux_1609@158:0>:int,<f_bcopy_aux_1609@158:1>:int,<<f_bcopy_aux_1609@158:2>@164:0>:int)|- P[<<f_bcopy_aux_1609@158:2>@164:0>](
      <f_bcopy_aux_1609@158:0>:int,<f_bcopy_aux_1609@158:1>:int,<<f_bcopy_aux_1609@158:2>@164:0>:int)
      
      P[<update_1198@160:3>](<update_1198@160:0>:int,<update_1198@160:1>:int,<update_1198@160:3>:int),
      (<<update_1198@160:2>@162:0> = <update_1198@160:0>)
      |- P[<<update_1198@160:2>@162:0>](<update_1198@160:0>:int,<update_1198@160:1>:int,
                                        <<update_1198@160:2>@162:0>:int)
      
      P[<f_bcopy_aux_1609@158:5>](<update_1198@160:0>:int,<update_1198@160:1>:int,<update_1198@160:3>:int)|- P[<update_1198@160:3>](
      <update_1198@160:0>:int,<update_1198@160:1>:int,<update_1198@160:3>:int)
      
      P[<bcopy_aux_1197@137:3>](<f_bcopy_aux_1609@158:1>:int,<f_bcopy_aux_1609@158:0>:int),
      P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<f_bcopy_aux_1609@158:1>:int,<f_bcopy_aux_1609@158:0>:int,<f_bcopy_aux_1609@158:5>:int),
      (<f_bcopy_aux_1609@158:0> < <f_bcopy_aux_1609@158:1>)
      |- P[<f_bcopy_aux_1609@158:5>](<f_bcopy_aux_1609@158:0>:int,<f_bcopy_aux_1609@158:1>:int,
                                     <f_bcopy_aux_1609@158:5>:int)
      
      P[<k_main_1512@134:4>](<bcopy_aux_1197@137:3>:int,<k_main_1512@134:1>:int,<bcopy_aux_1197@137:0>:int,true:bool),
      P[<<make_array_1030@142:2>@154:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int,<<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)|- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](
      <bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int,<<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
      
      P[<make_array_1030@142:1>](<make_array_1030@142:0>:int,<make_array_1030@142:1>:int),
      P[<<k_make_array_u_1232@145:2>@152:0>](<make_array_1030@142:1>:int,<make_array_1030@142:0>:int,<<make_array_1030@142:2>@154:0>:int),
      (0 <= <make_array_1030@142:1>)
      |- P[<<make_array_1030@142:2>@154:0>](<make_array_1030@142:0>:int,
                                            <make_array_1030@142:1>:int,
                                            <<make_array_1030@142:2>@154:0>:int)
      
      P[<k_make_array_u_1232@145:3>](<k_make_array_u_1232@145:0>:int,<k_make_array_u_1232@145:1>:int,true:bool),
      P[<<k_make_array_u_1243@148:2>@150:0>](<k_make_array_u_1232@145:0>:int,<k_make_array_u_1232@145:1>:int,<<k_make_array_u_1232@145:2>@152:0>:int)|- P[<<k_make_array_u_1232@145:2>@152:0>](
      <k_make_array_u_1232@145:0>:int,<k_make_array_u_1232@145:1>:int,
      <<k_make_array_u_1232@145:2>@152:0>:int)
      
      P[<k_make_array_u_1243@148:3>](<k_make_array_u_1243@148:0>:int,<k_make_array_u_1243@148:1>:int,<k_make_array_u_1243@148:3>:unit),
      (<<k_make_array_u_1243@148:2>@150:0> = 0)
      |- P[<<k_make_array_u_1243@148:2>@150:0>](<k_make_array_u_1243@148:0>:int,
                                                <k_make_array_u_1243@148:1>:int,
                                                <<k_make_array_u_1243@148:2>@150:0>:int)
      
      P[<k_make_array_u_1232@145:3>](<k_make_array_u_1243@148:0>:int,<k_make_array_u_1243@148:1>:int,true:bool)|- P[<k_make_array_u_1243@148:3>](
      <k_make_array_u_1243@148:0>:int,<k_make_array_u_1243@148:1>:int,
      <k_make_array_u_1243@148:3>:unit)
      
      P[<make_array_1030@142:1>](<k_make_array_u_1232@145:1>:int,<k_make_array_u_1232@145:0>:int),
      ((0 <= <k_make_array_u_1232@145:0>) &&
       (<k_make_array_u_1232@145:3> = (<k_make_array_u_1232@145:0> < <k_make_array_u_1232@145:1>)))
      |- P[<k_make_array_u_1232@145:3>](<k_make_array_u_1232@145:0>:int,
                                        <k_make_array_u_1232@145:1>:int,
                                        <k_make_array_u_1232@145:3>:bool)
      
      P[<k_main_1512@134:4>](<bcopy_aux_1197@137:3>:int,<k_main_1512@134:1>:int,<make_array_1030@142:0>:int,true:bool),
      P[<<bcopy_aux_1197@137:1>@140:0>](<make_array_1030@142:0>:int,<make_array_1030@142:1>:int)|- P[<make_array_1030@142:1>](
      <make_array_1030@142:0>:int,<make_array_1030@142:1>:int)
      
      P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
      (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
      |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                           <<bcopy_aux_1197@137:1>@140:0>:int)
      
      P[<k_main_1512@134:4>](<bcopy_aux_1197@137:3>:int,<k_main_1512@134:1>:int,<bcopy_aux_1197@137:0>:int,true:bool)|- P[<bcopy_aux_1197@137:3>](
      <bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
      
      P[<main_1045@131:2>](<k_main_1512@134:2>:int,<k_main_1512@134:1>:int,<k_main_1512@134:0>:int),
      ((<k_main_1512@134:0> = 0) && (<k_main_1512@134:4> = (<k_main_1512@134:2> <= <k_main_1512@134:1>)))
      |- P[<k_main_1512@134:4>](<k_main_1512@134:0>:int,<k_main_1512@134:1>:int,
                                <k_main_1512@134:2>:int,<k_main_1512@134:4>:bool)
      
      P[<f_1613@129:2>](<main_1045@131:0>:int,<main_1045@131:1>:int,<main_1045@131:2>:int)|- P[<main_1045@131:2>](
      <main_1045@131:0>:int,<main_1045@131:1>:int,<main_1045@131:2>:int)
      
      P[<f_1612@126:1>](<f_1613@129:0>:int,<f_1613@129:1>:int)|- P[<f_1613@129:2>](
      <f_1613@129:0>:int,<f_1613@129:1>:int,<f_1613@129:2>:int)
      
      P[<f_1611@123:0>](<f_1612@126:0>:int)|- P[<f_1612@126:1>](<f_1612@126:0>:int,
                                                                <f_1612@126:1>:int)
      
      |- P[<f_1611@123:0>](<f_1611@123:0>:int)
    call trees:
      <main_1607@120>
        <f_1611@123>
          <f_1612@126>
            <f_1613@129>
              <main_1045@131>
                <k_main_1512@134>
                  <bcopy_aux_1197@137>
                  </<bcopy_aux_1197@137:1>@140>
                  <make_array_1030@142>
                    <k_make_array_u_1232@145>
                      <k_make_array_u_1243@148>
                      </<k_make_array_u_1243@148:2>@150>
                    </<k_make_array_u_1232@145:2>@152>
                  </<make_array_1030@142:2>@154>
                  <<<bcopy_aux_1197@137:1>@140:1>@156>
                    <f_bcopy_aux_1609@158>
                      <update_1198@160>
                      </<update_1198@160:2>@162>
                    </<f_bcopy_aux_1609@158:2>@164>
                  </<bcopy_aux_1197@137:2>@166>
                  <make_array_1030@168>
                    <k_make_array_u_1232@171>
                      <fail_1615@174>
    inlined horn clauses:
      P[<fail_1615@174:0>](<fail_1615@174:0>:bool)|- bot
      
      P[<<bcopy_aux_1197@137:2>@166:0>](var343:int,<k_make_array_u_1232@171:0>:int),
      ((0 <= <k_make_array_u_1232@171:0>) && ((var343 < (1 + <k_make_array_u_1232@171:0>)) && <fail_1615@174:0>))
      |- P[<fail_1615@174:0>](<fail_1615@174:0>:bool)
      
      P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int,var344:int),
      P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
      (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>)
      |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                           <<bcopy_aux_1197@137:2>@166:0>:int)
      
      P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
      ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
       ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (0 <= <<bcopy_aux_1197@137:1>@140:0>)))
      |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                   <<bcopy_aux_1197@137:1>@140:0>:int,
                                                   <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
      
      P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
      (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
      |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                           <<bcopy_aux_1197@137:1>@140:0>:int)
      
       (<bcopy_aux_1197@137:3> = 0) |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,
                                                                 <bcopy_aux_1197@137:3>:int)
    begin ParamSubstInfer.infer(40488)[3]
      
    end ParamSubstInfer.infer(40488)[3] (0.175973 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(40490)[3]
      
    end RefTypeInfer.elim_coeffs(40490)[3] (0.002999 sec.)
    begin GenHcSolver.solve(40844)[3]
      Horn clauses:
        P[<fail_1615@174:0>](<fail_1615@174:0>:bool)|- bot
        
        P[<<bcopy_aux_1197@137:2>@166:0>](var343:int,<k_make_array_u_1232@171:0>:int),
        ((0 <= <k_make_array_u_1232@171:0>) && ((var343 < (1 + <k_make_array_u_1232@171:0>)) && <fail_1615@174:0>))
        |- P[<fail_1615@174:0>](<fail_1615@174:0>:bool)
        
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int,var344:int),
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
        (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>)
        |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                             <<bcopy_aux_1197@137:2>@166:0>:int)
        
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
        ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
         ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (0 <= <<bcopy_aux_1197@137:1>@140:0>)))
        |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                     <<bcopy_aux_1197@137:1>@140:0>:int,
                                                     <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
        
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
        (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
        |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                             <<bcopy_aux_1197@137:1>@140:0>:int)
        
         (<bcopy_aux_1197@137:3> = 0)
        |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int) = (<bcopy_aux_1197@137:3> = 0)
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int) =
        ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int,<<<bcopy_aux_1197@137:1>@140:1>@156:0>:int) =
        ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
         ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)))
        P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int) =
        ((<<bcopy_aux_1197@137:2>@166:0> = 0) && (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>))
        P[<fail_1615@174:0>](<fail_1615@174:0>:bool) = false
      upper bounds:
        P[<fail_1615@174:0>](var346:bool) = true
      begin GenHcSolver.classify_pids(42635)[4]
        output:
          [<fail_1615@174:0>]
      end GenHcSolver.classify_pids(42635)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(42638)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(42639)[5]
          begin InterpProver.interpolate_fresh(42640)[6]
            begin InterpProver.interpolate_log(42641)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(42642)[8]
                begin InterpProver.interpolate_simplify(42643)[9]
                  begin InterpProver.interpolate_quick(42656)[10]
                    
                  end InterpProver.interpolate_quick(42656)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(42660)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(42660)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(42643)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(42642)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(42641)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(42640)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(42639)[5] (0.000000 sec.)
        output:
          P[<fail_1615@174:0>](<fail_1615@174:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(42638)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1197@137:2>@166:0>](var343:int,<k_make_array_u_1232@171:0>:int),
        ((var343 < (1 + <k_make_array_u_1232@171:0>)) && (0 <= <k_make_array_u_1232@171:0>)) |- bot
        
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int,var344:int),
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
        (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>)
        |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                             <<bcopy_aux_1197@137:2>@166:0>:int)
        
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
        ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
         ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (0 <= <<bcopy_aux_1197@137:1>@140:0>)))
        |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                     <<bcopy_aux_1197@137:1>@140:0>:int,
                                                     <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
        
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
        (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
        |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                             <<bcopy_aux_1197@137:1>@140:0>:int)
        
         (<bcopy_aux_1197@137:3> = 0)
        |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int) = (<bcopy_aux_1197@137:3> = 0)
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int) =
        ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int,<<<bcopy_aux_1197@137:1>@140:1>@156:0>:int) =
        ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
         ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)))
        P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int) =
        ((<<bcopy_aux_1197@137:2>@166:0> = 0) && (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>))
      upper bounds:
        P[<<bcopy_aux_1197@137:2>@166:0>](var347:int,var348:int) = ((var347 >= (1 + var348)) || (0 > var348))
      begin GenHcSolver.classify_pids(45034)[4]
        output:
          [<<bcopy_aux_1197@137:2>@166:0>]
      end GenHcSolver.classify_pids(45034)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1197@137:2>@166:0> = 0) && (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>))
      nub:(not
             ((<bcopy_aux_1197@137:0> >= (1 + <<bcopy_aux_1197@137:2>@166:0>)) || (0 > <<bcopy_aux_1197@137:2>@166:0>)))
      begin ApronInterface.convex_hull_interpolate(45037)[4]
        lb:((<<bcopy_aux_1197@137:2>@166:0> = 0) && (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>))
        nub:(not
               ((<bcopy_aux_1197@137:0> >= (1 + <<bcopy_aux_1197@137:2>@166:0>)) ||
                (0 > <<bcopy_aux_1197@137:2>@166:0>)))
        lb':((<<bcopy_aux_1197@137:2>@166:0> = 0) && (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>))
        nub':(not
                ((<bcopy_aux_1197@137:0> >= (1 + <<bcopy_aux_1197@137:2>@166:0>)) ||
                 (0 > <<bcopy_aux_1197@137:2>@166:0>)))
        begin InterpProver.interpolate(45038)[5]
          begin InterpProver.interpolate_fresh(45039)[6]
            begin InterpProver.interpolate_log(45040)[7]
              input1: ((<<bcopy_aux_1197@137:2>@166:0> = 0) &&
                       (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>))
              input2: (not
                         ((<bcopy_aux_1197@137:0> >= (1 + <<bcopy_aux_1197@137:2>@166:0>)) ||
                          (0 > <<bcopy_aux_1197@137:2>@166:0>)))
              begin InterpProver.interpolate_check(45041)[8]
                begin InterpProver.interpolate_simplify(45042)[9]
                  begin InterpProver.interpolate_quick(45103)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(45112)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(45113)[12]
                        begin CsisatInterface.interpolate_csisat_log(45114)[13]
                          input1: (0 = v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0 & (1 + v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0) <= v_sep_bcopy_aux_1197_sep_137_sep_0)
                          input2: (0 <= v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0 & (1 + v_sep_bcopy_aux_1197_sep_137_sep_0) <= (1 + v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0))
                          begin CsisatInterface.interpolate_csisat_raw(45115)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(45115)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1197_sep_137_sep_0 + 2*v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(45114)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1197_sep_137_sep_0 + 2*v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1197_sep_137_sep_0 + 2*v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(45113)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(45112)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(45103)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(45042)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(45041)[8] (0.001000 sec.)
              output: ((1 + <<bcopy_aux_1197@137:2>@166:0>) <= <bcopy_aux_1197@137:0>)
            end InterpProver.interpolate_log(45040)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(45039)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(45038)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int) =
          ((1 + <<bcopy_aux_1197@137:2>@166:0>) <= <bcopy_aux_1197@137:0>)
      end ApronInterface.convex_hull_interpolate(45037)[4] (0.001000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
        ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
         ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (0 <= <<bcopy_aux_1197@137:1>@140:0>)))
        |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                     <<bcopy_aux_1197@137:1>@140:0>:int,
                                                     <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
        
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
        (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
        |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                             <<bcopy_aux_1197@137:1>@140:0>:int)
        
         (<bcopy_aux_1197@137:3> = 0)
        |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int) = (<bcopy_aux_1197@137:3> = 0)
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int) =
        ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int,<<<bcopy_aux_1197@137:1>@140:1>@156:0>:int) =
        ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
         ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)))
      upper bounds:
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](var349:int,var350:int,var351:int) = true
      begin GenHcSolver.classify_pids(46438)[4]
        output:
          [<<<bcopy_aux_1197@137:1>@140:1>@156:0>]
      end GenHcSolver.classify_pids(46438)[4] (0.000000 sec.)
      lb:((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
          ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(46441)[4]
        lb:((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
            ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)))
        nub:false
        lb':((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
             ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)))
        nub':false
        begin InterpProver.interpolate(46442)[5]
          begin InterpProver.interpolate_fresh(46443)[6]
            begin InterpProver.interpolate_log(46444)[7]
              input1: ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
                       ((<<bcopy_aux_1197@137:1>@140:0> = 0) &&
                        (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)))
              input2: false
              begin InterpProver.interpolate_check(46445)[8]
                begin InterpProver.interpolate_simplify(46446)[9]
                  begin InterpProver.interpolate_quick(46501)[10]
                    
                  end InterpProver.interpolate_quick(46501)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(46446)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(46445)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(46444)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(46443)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(46442)[5] (0.001000 sec.)
        output:
          P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int,<<<bcopy_aux_1197@137:1>@140:1>@156:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(46441)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
        (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
        |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                             <<bcopy_aux_1197@137:1>@140:0>:int)
        
         (<bcopy_aux_1197@137:3> = 0)
        |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int) = (<bcopy_aux_1197@137:3> = 0)
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int) =
        ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
      upper bounds:
        P[<<bcopy_aux_1197@137:1>@140:0>](var352:int,var353:int) = true
      begin GenHcSolver.classify_pids(47193)[4]
        output:
          [<<bcopy_aux_1197@137:1>@140:0>]
      end GenHcSolver.classify_pids(47193)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(47196)[4]
        lb:((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
        nub:false
        lb':((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
        nub':false
        begin InterpProver.interpolate(47197)[5]
          begin InterpProver.interpolate_fresh(47198)[6]
            begin InterpProver.interpolate_log(47199)[7]
              input1: ((<<bcopy_aux_1197@137:1>@140:0> = 0) &&
                       (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
              input2: false
              begin InterpProver.interpolate_check(47200)[8]
                begin InterpProver.interpolate_simplify(47201)[9]
                  begin InterpProver.interpolate_quick(47240)[10]
                    
                  end InterpProver.interpolate_quick(47240)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(47201)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(47200)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(47199)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(47198)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(47197)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int) = true
      end ApronInterface.convex_hull_interpolate(47196)[4] (0.001000 sec.)
      Horn clauses:
         (<bcopy_aux_1197@137:3> = 0)
        |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int) = (<bcopy_aux_1197@137:3> = 0)
      upper bounds:
        P[<bcopy_aux_1197@137:3>](var354:int,var355:int) = true
      begin GenHcSolver.classify_pids(47509)[4]
        output:
          [<bcopy_aux_1197@137:3>]
      end GenHcSolver.classify_pids(47509)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1197@137:3> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(47512)[4]
        lb:(<bcopy_aux_1197@137:3> = 0)
        nub:false
        lb':(<bcopy_aux_1197@137:3> = 0)
        nub':false
        begin InterpProver.interpolate(47513)[5]
          begin InterpProver.interpolate_fresh(47514)[6]
            begin InterpProver.interpolate_log(47515)[7]
              input1: (<bcopy_aux_1197@137:3> = 0)
              input2: false
              begin InterpProver.interpolate_check(47516)[8]
                begin InterpProver.interpolate_simplify(47517)[9]
                  begin InterpProver.interpolate_quick(47536)[10]
                    
                  end InterpProver.interpolate_quick(47536)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(47517)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(47516)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(47515)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(47514)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(47513)[5] (0.000000 sec.)
        output:
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int) = true
      end ApronInterface.convex_hull_interpolate(47512)[4] (0.000000 sec.)
      begin HcSolver.check_validity(47600)[4]
        input:
          P[<fail_1615@174:0>](<fail_1615@174:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@137:2>@166:0>](var343:int,<k_make_array_u_1232@171:0>:int),
          ((0 <= <k_make_array_u_1232@171:0>) && ((var343 < (1 + <k_make_array_u_1232@171:0>)) && <fail_1615@174:0>))
          |- P[<fail_1615@174:0>](<fail_1615@174:0>:bool)
          
          P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int,var344:int),
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
          (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:2>@166:0>:int)
          
          P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
           ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (0 <= <<bcopy_aux_1197@137:1>@140:0>)))
          |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                       <<bcopy_aux_1197@137:1>@140:0>:int,
                                                       <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
          
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:1>@140:0>:int)
          
           (<bcopy_aux_1197@137:3> = 0)
          |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(47600)[4] (0.003000 sec.)
      solution:
        P[<fail_1615@174:0>](<fail_1615@174:0>:bool) = false
        P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int) =
        ((1 + <<bcopy_aux_1197@137:2>@166:0>) <= <bcopy_aux_1197@137:0>)
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int,<<<bcopy_aux_1197@137:1>@140:1>@156:0>:int) =
        true
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int) = true
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int) = true
    end GenHcSolver.solve(40844)[3] (0.041994 sec.)
    begin GenHcSolver.solve(48002)[3]
      Horn clauses:
        P[<fail_1615@174:0>](<fail_1615@174:0>:bool)|- bot
        
        P[<<bcopy_aux_1197@137:2>@166:0>](var343:int,<k_make_array_u_1232@171:0>:int),
        ((0 <= <k_make_array_u_1232@171:0>) && ((var343 < (1 + <k_make_array_u_1232@171:0>)) && <fail_1615@174:0>))
        |- P[<fail_1615@174:0>](<fail_1615@174:0>:bool)
        
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int,var344:int),
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
        (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>)
        |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                             <<bcopy_aux_1197@137:2>@166:0>:int)
        
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
        ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
         ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (0 <= <<bcopy_aux_1197@137:1>@140:0>)))
        |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                     <<bcopy_aux_1197@137:1>@140:0>:int,
                                                     <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
        
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
        (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
        |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                             <<bcopy_aux_1197@137:1>@140:0>:int)
        
         (<bcopy_aux_1197@137:3> = 0)
        |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int) = (<bcopy_aux_1197@137:3> = 0)
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int) =
        ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int,<<<bcopy_aux_1197@137:1>@140:1>@156:0>:int) =
        ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
         ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)))
        P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int) =
        ((<<bcopy_aux_1197@137:2>@166:0> = 0) && (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>))
        P[<fail_1615@174:0>](<fail_1615@174:0>:bool) = false
      upper bounds:
        P[<fail_1615@174:0>](var357:bool) = true
      begin GenHcSolver.classify_pids(49793)[4]
        output:
          [<fail_1615@174:0>]
      end GenHcSolver.classify_pids(49793)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(49796)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(49799)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(49799)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(49804)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(49804)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(49807)[5]
          begin InterpProver.interpolate_fresh(49808)[6]
            begin InterpProver.interpolate_log(49809)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(49810)[8]
                begin InterpProver.interpolate_simplify(49811)[9]
                  begin InterpProver.interpolate_quick(49826)[10]
                    
                  end InterpProver.interpolate_quick(49826)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(49830)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(49830)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(49811)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(49810)[8] (0.000999 sec.)
              output: false
            end InterpProver.interpolate_log(49809)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(49808)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(49807)[5] (0.000999 sec.)
        output:
          P[<fail_1615@174:0>](<fail_1615@174:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(49796)[4] (0.000999 sec.)
      Horn clauses:
        P[<<bcopy_aux_1197@137:2>@166:0>](var343:int,<k_make_array_u_1232@171:0>:int),
        ((var343 < (1 + <k_make_array_u_1232@171:0>)) && (0 <= <k_make_array_u_1232@171:0>)) |- bot
        
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int,var344:int),
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
        (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>)
        |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                             <<bcopy_aux_1197@137:2>@166:0>:int)
        
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
        ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
         ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (0 <= <<bcopy_aux_1197@137:1>@140:0>)))
        |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                     <<bcopy_aux_1197@137:1>@140:0>:int,
                                                     <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
        
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
        (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
        |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                             <<bcopy_aux_1197@137:1>@140:0>:int)
        
         (<bcopy_aux_1197@137:3> = 0)
        |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int) = (<bcopy_aux_1197@137:3> = 0)
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int) =
        ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int,<<<bcopy_aux_1197@137:1>@140:1>@156:0>:int) =
        ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
         ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)))
        P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int) =
        ((<<bcopy_aux_1197@137:2>@166:0> = 0) && (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>))
      upper bounds:
        P[<<bcopy_aux_1197@137:2>@166:0>](var358:int,var359:int) = ((var358 >= (1 + var359)) || (0 > var359))
      begin GenHcSolver.classify_pids(52211)[4]
        output:
          [<<bcopy_aux_1197@137:2>@166:0>]
      end GenHcSolver.classify_pids(52211)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1197@137:2>@166:0> = 0) && (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>))
      nub:(not
             ((<bcopy_aux_1197@137:0> >= (1 + <<bcopy_aux_1197@137:2>@166:0>)) || (0 > <<bcopy_aux_1197@137:2>@166:0>)))
      begin ApronInterface.convex_hull_interpolate(52214)[4]
        lb:((<<bcopy_aux_1197@137:2>@166:0> = 0) && (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>))
        nub:(not
               ((<bcopy_aux_1197@137:0> >= (1 + <<bcopy_aux_1197@137:2>@166:0>)) ||
                (0 > <<bcopy_aux_1197@137:2>@166:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(52226)[5]
          ts: ((<<bcopy_aux_1197@137:2>@166:0> = 0) && (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(52226)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(52249)[5]
          ts: ((<bcopy_aux_1197@137:0> < (1 + <<bcopy_aux_1197@137:2>@166:0>)) && (0 <= <<bcopy_aux_1197@137:2>@166:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(52249)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1197@137:2>@166:0> = 0) && ((-1 + <bcopy_aux_1197@137:0>) >= 0))
        nub':(((<<bcopy_aux_1197@137:2>@166:0> + (-1 * <bcopy_aux_1197@137:0>)) >= 0) &&
              (<<bcopy_aux_1197@137:2>@166:0> >= 0))
        begin InterpProver.interpolate(52256)[5]
          begin InterpProver.interpolate_fresh(52257)[6]
            begin InterpProver.interpolate_log(52258)[7]
              input1: ((<<bcopy_aux_1197@137:2>@166:0> = 0) && ((-1 + <bcopy_aux_1197@137:0>) >= 0))
              input2: (((<<bcopy_aux_1197@137:2>@166:0> + (-1 * <bcopy_aux_1197@137:0>)) >= 0) &&
                       (<<bcopy_aux_1197@137:2>@166:0> >= 0))
              begin InterpProver.interpolate_check(52259)[8]
                begin InterpProver.interpolate_simplify(52260)[9]
                  begin InterpProver.interpolate_quick(52317)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(52326)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(52327)[12]
                        begin CsisatInterface.interpolate_csisat_log(52328)[13]
                          input1: (0 = v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0 & 1 <= v_sep_bcopy_aux_1197_sep_137_sep_0)
                          input2: (0 <= v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0 & v_sep_bcopy_aux_1197_sep_137_sep_0 <= v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(52329)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(52329)[14] (0.001000 sec.)
                          output: (-2*v_sep_bcopy_aux_1197_sep_137_sep_0 + 2*v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(52328)[13] (0.001000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1197_sep_137_sep_0 + 2*v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1197_sep_137_sep_0 + 2*v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(52327)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(52326)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(52317)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(52260)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(52259)[8] (0.002000 sec.)
              output: ((1 + <<bcopy_aux_1197@137:2>@166:0>) <= <bcopy_aux_1197@137:0>)
            end InterpProver.interpolate_log(52258)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(52257)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(52256)[5] (0.002000 sec.)
        output:
          P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int) =
          ((1 + <<bcopy_aux_1197@137:2>@166:0>) <= <bcopy_aux_1197@137:0>)
      end ApronInterface.convex_hull_interpolate(52214)[4] (0.002000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
        ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
         ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (0 <= <<bcopy_aux_1197@137:1>@140:0>)))
        |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                     <<bcopy_aux_1197@137:1>@140:0>:int,
                                                     <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
        
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
        (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
        |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                             <<bcopy_aux_1197@137:1>@140:0>:int)
        
         (<bcopy_aux_1197@137:3> = 0)
        |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int) = (<bcopy_aux_1197@137:3> = 0)
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int) =
        ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int,<<<bcopy_aux_1197@137:1>@140:1>@156:0>:int) =
        ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
         ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)))
      upper bounds:
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](var360:int,var361:int,var362:int) = true
      begin GenHcSolver.classify_pids(53650)[4]
        output:
          [<<<bcopy_aux_1197@137:1>@140:1>@156:0>]
      end GenHcSolver.classify_pids(53650)[4] (0.000000 sec.)
      lb:((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
          ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(53653)[4]
        lb:((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
            ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(53673)[5]
          ts: ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
               ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(53673)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(53682)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(53682)[5] (0.000000 sec.)
        lb':((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
             ((<<bcopy_aux_1197@137:1>@140:0> = 0) && ((-1 + <bcopy_aux_1197@137:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(53685)[5]
          begin InterpProver.interpolate_fresh(53686)[6]
            begin InterpProver.interpolate_log(53687)[7]
              input1: ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
                       ((<<bcopy_aux_1197@137:1>@140:0> = 0) && ((-1 + <bcopy_aux_1197@137:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(53688)[8]
                begin InterpProver.interpolate_simplify(53689)[9]
                  begin InterpProver.interpolate_quick(53747)[10]
                    
                  end InterpProver.interpolate_quick(53747)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(53689)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(53688)[8] (0.002000 sec.)
              output: true
            end InterpProver.interpolate_log(53687)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(53686)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(53685)[5] (0.002000 sec.)
        output:
          P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int,<<<bcopy_aux_1197@137:1>@140:1>@156:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(53653)[4] (0.002000 sec.)
      Horn clauses:
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
        (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
        |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                             <<bcopy_aux_1197@137:1>@140:0>:int)
        
         (<bcopy_aux_1197@137:3> = 0)
        |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int) = (<bcopy_aux_1197@137:3> = 0)
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int) =
        ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
      upper bounds:
        P[<<bcopy_aux_1197@137:1>@140:0>](var363:int,var364:int) = true
      begin GenHcSolver.classify_pids(54441)[4]
        output:
          [<<bcopy_aux_1197@137:1>@140:0>]
      end GenHcSolver.classify_pids(54441)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(54444)[4]
        lb:((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(54456)[5]
          ts: ((<<bcopy_aux_1197@137:1>@140:0> = 0) && (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(54456)[5] (0.000999 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(54464)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(54464)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1197@137:1>@140:0> = 0) && ((-1 + <bcopy_aux_1197@137:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(54467)[5]
          begin InterpProver.interpolate_fresh(54468)[6]
            begin InterpProver.interpolate_log(54469)[7]
              input1: ((<<bcopy_aux_1197@137:1>@140:0> = 0) && ((-1 + <bcopy_aux_1197@137:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(54470)[8]
                begin InterpProver.interpolate_simplify(54471)[9]
                  begin InterpProver.interpolate_quick(54511)[10]
                    
                  end InterpProver.interpolate_quick(54511)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(54471)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(54470)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(54469)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(54468)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(54467)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int) = true
      end ApronInterface.convex_hull_interpolate(54444)[4] (0.001999 sec.)
      Horn clauses:
         (<bcopy_aux_1197@137:3> = 0)
        |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
      lower bounds:
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int) = (<bcopy_aux_1197@137:3> = 0)
      upper bounds:
        P[<bcopy_aux_1197@137:3>](var365:int,var366:int) = true
      begin GenHcSolver.classify_pids(54782)[4]
        output:
          [<bcopy_aux_1197@137:3>]
      end GenHcSolver.classify_pids(54782)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1197@137:3> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(54785)[4]
        lb:(<bcopy_aux_1197@137:3> = 0)
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(54789)[5]
          ts: (<bcopy_aux_1197@137:3> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(54789)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(54795)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(54795)[5] (0.000000 sec.)
        lb':(<bcopy_aux_1197@137:3> = 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(54798)[5]
          begin InterpProver.interpolate_fresh(54799)[6]
            begin InterpProver.interpolate_log(54800)[7]
              input1: (<bcopy_aux_1197@137:3> = 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(54801)[8]
                begin InterpProver.interpolate_simplify(54802)[9]
                  begin InterpProver.interpolate_quick(54822)[10]
                    
                  end InterpProver.interpolate_quick(54822)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(54802)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(54801)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(54800)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(54799)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(54798)[5] (0.000000 sec.)
        output:
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int) = true
      end ApronInterface.convex_hull_interpolate(54785)[4] (0.001000 sec.)
      begin HcSolver.check_validity(54888)[4]
        input:
          P[<fail_1615@174:0>](<fail_1615@174:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@137:2>@166:0>](var343:int,<k_make_array_u_1232@171:0>:int),
          ((0 <= <k_make_array_u_1232@171:0>) && ((var343 < (1 + <k_make_array_u_1232@171:0>)) && <fail_1615@174:0>))
          |- P[<fail_1615@174:0>](<fail_1615@174:0>:bool)
          
          P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int,var344:int),
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
          (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:2>@166:0>:int)
          
          P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
           ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (0 <= <<bcopy_aux_1197@137:1>@140:0>)))
          |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                       <<bcopy_aux_1197@137:1>@140:0>:int,
                                                       <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
          
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:1>@140:0>:int)
          
           (<bcopy_aux_1197@137:3> = 0)
          |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(54888)[4] (0.001999 sec.)
      solution:
        P[<fail_1615@174:0>](<fail_1615@174:0>:bool) = false
        P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int) =
        ((1 + <<bcopy_aux_1197@137:2>@166:0>) <= <bcopy_aux_1197@137:0>)
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int,<<<bcopy_aux_1197@137:1>@140:1>@156:0>:int) =
        true
        P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int) = true
        P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int) = true
    end GenHcSolver.solve(48002)[3] (0.042993 sec.)
    begin YhornInterface.solve(55290)[3]
      begin HcSolver.solve_ub(55291)[4]
        encoded:
          P[<fail_1615@174:0>](<fail_1615@174:0>:int)|- bot
          
          P[<<bcopy_aux_1197@137:2>@166:0>](var343:int,<k_make_array_u_1232@171:0>:int),
          ((0 <= <k_make_array_u_1232@171:0>) &&
           ((var343 < (1 + <k_make_array_u_1232@171:0>)) && (<fail_1615@174:0> = 1)))
          |- P[<fail_1615@174:0>](<fail_1615@174:0>:int)
          
          P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int,var344:int),
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
          (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:2>@166:0>:int)
          
          P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
           ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (0 <= <<bcopy_aux_1197@137:1>@140:0>)))
          |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                       <<bcopy_aux_1197@137:1>@140:0>:int,
                                                       <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
          
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:1>@140:0>:int)
          
           (<bcopy_aux_1197@137:3> = 0)
          |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
        input to Yhorn:
          P[<fail_1615@174:0>](<fail_1615@174:0>:int)|- bot
          
          P[<<bcopy_aux_1197@137:2>@166:0>](var343:int,<k_make_array_u_1232@171:0>:int),
          ((var343 < (1 + <k_make_array_u_1232@171:0>)) &&
           ((0 <= <k_make_array_u_1232@171:0>) && (<fail_1615@174:0> = 1)))
          |- P[<fail_1615@174:0>](<fail_1615@174:0>:int)
          
          P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int,var344:int),
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
          (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:2>@166:0>:int)
          
          P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          ((0 <= <<bcopy_aux_1197@137:1>@140:0>) &&
           ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0)))
          |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                       <<bcopy_aux_1197@137:1>@140:0>:int,
                                                       <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
          
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:1>@140:0>:int)
          
           (<bcopy_aux_1197@137:3> = 0)
          |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1615_sep_174_sep_0($217)) -> 1=0.
(($217-1=0) & (-$218<=0) & (-$218+$219-1<0)) & (v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0($219,$218)) -> v_sep_fail_1615_sep_174_sep_0($217).
($220-$221<0) & (v_sep_bcopy_aux_1197_sep_137_sep_3($221,$220)) & (v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0($221,$220,$222)) -> v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0($221,$220).
(($223=0) & (-$221+$224<0) & (-$224<=0)) & (v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0($221,$224)) -> v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0($221,$224,$223).
(-$221+$224<0) & (v_sep_bcopy_aux_1197_sep_137_sep_3($221,$224)) -> v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0($221,$224).
$225=0 -> v_sep_bcopy_aux_1197_sep_137_sep_3($221,$225).


v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_3: X
v_sep_fail_1615_sep_174_sep_0: X
.......
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_3: X
v_sep_fail_1615_sep_174_sep_0: X
...
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_3: X
v_sep_fail_1615_sep_174_sep_0: X
.....
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_3: X
v_sep_fail_1615_sep_174_sep_0: X
......
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0: X
v_sep_bcopy_aux_1197_sep_137_sep_3: X
v_sep_fail_1615_sep_174_sep_0: X
.......(0=0) & (v_sep_fail_1615_sep_174_sep_0($217)) -> 1=0.
(($217-1=0) & (-$218<=0) & (-$218+$219-1<0)) & (v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0($219,$218)) -> v_sep_fail_1615_sep_174_sep_0($217).
($220-$221<0) & (v_sep_bcopy_aux_1197_sep_137_sep_3($221,$220)) & (v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0($221,$220,$222)) -> v_sep_bcopy_aux_1197_sep_137_sep_2_sep_166_sep_0($221,$220).
(($223=0) & (-$221+$224<0) & (-$224<=0)) & (v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0($221,$224)) -> v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_1_sep_156_sep_0($221,$224,$223).
(-$221+$224<0) & (v_sep_bcopy_aux_1197_sep_137_sep_3($221,$224)) -> v_sep_bcopy_aux_1197_sep_137_sep_1_sep_140_sep_0($221,$224).
$225=0 -> v_sep_bcopy_aux_1197_sep_137_sep_3($221,$225).

        solution:
          P[<<bcopy_aux_1197@137:1>@140:0>]($246:int,$248:int) = true
          P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>]($239:int,$241:int,$243:int) = true
          P[<<bcopy_aux_1197@137:2>@166:0>]($229:int,$231:int) = ((1 + $231) <= $229)
          P[<bcopy_aux_1197@137:3>]($234:int,$236:int) = true
          P[<fail_1615@174:0>]($226:bool) = false
        
      end HcSolver.solve_ub(55291)[4] (0.016998 sec.)
      begin HcSolver.check_validity(55540)[4]
        input:
          P[<fail_1615@174:0>](<fail_1615@174:0>:bool)|- bot
          
          P[<<bcopy_aux_1197@137:2>@166:0>](var343:int,<k_make_array_u_1232@171:0>:int),
          ((0 <= <k_make_array_u_1232@171:0>) && ((var343 < (1 + <k_make_array_u_1232@171:0>)) && <fail_1615@174:0>))
          |- P[<fail_1615@174:0>](<fail_1615@174:0>:bool)
          
          P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int,var344:int),
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:2>@166:0>:int),
          (<<bcopy_aux_1197@137:2>@166:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:2>@166:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:2>@166:0>:int)
          
          P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          ((<<<bcopy_aux_1197@137:1>@140:1>@156:0> = 0) &&
           ((<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>) && (0 <= <<bcopy_aux_1197@137:1>@140:0>)))
          |- P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>](<bcopy_aux_1197@137:0>:int,
                                                       <<bcopy_aux_1197@137:1>@140:0>:int,
                                                       <<<bcopy_aux_1197@137:1>@140:1>@156:0>:int)
          
          P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<<bcopy_aux_1197@137:1>@140:0>:int),
          (<<bcopy_aux_1197@137:1>@140:0> < <bcopy_aux_1197@137:0>)
          |- P[<<bcopy_aux_1197@137:1>@140:0>](<bcopy_aux_1197@137:0>:int,
                                               <<bcopy_aux_1197@137:1>@140:0>:int)
          
           (<bcopy_aux_1197@137:3> = 0)
          |- P[<bcopy_aux_1197@137:3>](<bcopy_aux_1197@137:0>:int,<bcopy_aux_1197@137:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(55540)[4] (0.001000 sec.)
      solution:
        P[<<bcopy_aux_1197@137:1>@140:0>]($246:int,$248:int) = true
        P[<<<bcopy_aux_1197@137:1>@140:1>@156:0>]($239:int,$241:int,$243:int) = true
        P[<<bcopy_aux_1197@137:2>@166:0>]($229:int,$231:int) = ((1 + $231) <= $229)
        P[<bcopy_aux_1197@137:3>]($234:int,$236:int) = true
        P[<fail_1615@174:0>]($226:bool) = false
    end YhornInterface.solve(55290)[3] (0.017998 sec.)
    
  end RefTypeInfer.infer_etrs(36889)[2] (0.304954 sec.)
  refinement types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:int -> (v3:int -> X) -> X) ->
                    (v6:{v6:int | ((1 + v6) <= v1)} -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1243: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1609: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1198: v1:int ->
                 v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> ((v8:int -> (v9:int -> X) -> X) -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1232: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1615: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    a_1038: var407:int ->
            var406:int ->
            var405:int -> var404:int -> (var403:int -> (var402:int -> X) -> X) -> var399:int -> (var398:int -> X) -> X
    f_1614: var412:int -> var411:int -> var410:int -> var409:unit -> X
    f_bcopy_aux_1610: var426:int ->
                      var425:int ->
                      var424:int ->
                      (var423:unit -> X) ->
                      (var421:int -> (var420:int -> X) -> X) -> (var417:int -> (var416:int -> X) -> X) -> X
    f_update_1608: var440:int ->
                   var439:int ->
                   var438:int ->
                   (var437:int -> (var436:int -> X) -> X) ->
                   ((var433:int -> (var432:int -> X) -> X) -> X) -> var428:int -> X
  abstraction types:
    main_1607: X
    f_1611: v1:int -> X
    f_1612: v1:int -> v2:int -> X
    f_1613: v1:int -> v2:int -> v3:int -> X
    main_1045: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1512: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    bcopy_aux_1197: v1:int ->
                    (v2:int -> (v3:int -> X) -> X) ->
                    (v6:int[v6 -> ((1 + v6) <= v1)] -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: var441:int -> var442:int -> (var443:int -> X) -> X
    k_make_array_u_1232: var446:int -> var447:int -> (var448:int -> X) -> var450:bool -> X
    k_make_array_u_1243: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1609: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1198: v1:int ->
                 v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> ((v8:int -> (v9:int -> X) -> X) -> X) -> X
    fail_1615: v1:bool -> (v2:unit -> X) -> X
    a_1038: var407:int ->
            var406:int ->
            var405:int -> var404:int -> (var403:int -> (var402:int -> X) -> X) -> var399:int -> (var398:int -> X) -> X
    f_1614: var412:int -> var411:int -> var410:int -> var409:unit -> X
    f_bcopy_aux_1610: var426:int ->
                      var425:int ->
                      var424:int ->
                      (var423:unit -> X) ->
                      (var421:int -> (var420:int -> X) -> X) -> (var417:int -> (var416:int -> X) -> X) -> X
    f_update_1608: var440:int ->
                   var439:int ->
                   var438:int ->
                   (var437:int -> (var436:int -> X) -> X) ->
                   ((var433:int -> (var432:int -> X) -> X) -> X) -> var428:int -> X
  
end AbsTypeInfer.refine(36888)[1] (0.311952 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1607
  main_1607 -> (rand_int f_1611)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (i_1034 = j_1039) -> (k_update_a_1312 x_1037)
  a_1038 i_1034 n_1035 x_1037 x_1297 a_1036 j_1039 k_update_a_1312 when (
      not (i_1034 = j_1039)) -> (a_1036 j_1039 k_update_a_1312)
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (i_1044 >= m_1041) -> (k_bcopy_aux_1376 ())
  bcopy_aux_1197 m_1041 src_1042 des_1043 i_1044 k_bcopy_aux_1376 when (
      not (i_1044 >= m_1041)) -> (src_1042 i_1044 (f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042))
  f_1611 x_1548 -> (rand_int (f_1612 x_1548))
  f_1612 x_1548 x_1561 -> (rand_int (f_1613 x_1548 x_1561))
  f_1613 x_1548 x_1561 x_1574 -> (main_1045 x_1548 x_1561 x_1574 (f_1614 x_1548 x_1561 x_1574))
  f_1614 x_1548 x_1561 x_1574 x_1545 -> end
  f_bcopy_aux_1609 i_1044 m_1041 des_1043 k_bcopy_aux_1376 src_1042 x_1429 ->
      (update_1198 i_1044 m_1041 des_1043 x_1429 (f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042))
  f_bcopy_aux_1610 i_1044 m_1041 x_1429 k_bcopy_aux_1376 src_1042 x_1446 ->
      (bcopy_aux_1197 m_1041 src_1042 x_1446 (i_1044 + 1) k_bcopy_aux_1376)
  f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291 x_1297 ->
      (k_update_1291 (a_1038 i_1034 n_1035 x_1037 x_1297 a_1036))
  fail_1615 b k -> {fail} => (k ())
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when b_1542 ->
      (bcopy_aux_1197 n_1046 (make_array_1030 n_1046) (make_array_1030 m_1047) i_1048 k_main_1477)
  k_main_1512 i_1048 m_1047 n_1046 k_main_1477 b_1542 when (not b_1542) -> (k_main_1477 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when b_1244 ->
      (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 ())
  k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 b_1244 when (not b_1244) ->
      (fail_1615 true (k_make_array_u_1243 i_1032 n_1031 k_make_array_1226))
  k_make_array_u_1243 i_1032 n_1031 k_make_array_1226 x_1229 -> (k_make_array_1226 0)
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (i_1048 = 0) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 (n_1046 <= m_1047))
  main_1045 n_1046 m_1047 i_1048 k_main_1477 when (not (i_1048 = 0)) ->
      (k_main_1512 i_1048 m_1047 n_1046 k_main_1477 false)
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (0 <= i_1032) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1226 when (not (0 <= i_1032)) ->
      (k_make_array_u_1232 i_1032 n_1031 k_make_array_1226 false)
  update_1198 i_1034 n_1035 a_1036 x_1037 k_update_1291 ->
      (a_1036 i_1034 (f_update_1608 i_1034 n_1035 x_1037 a_1036 k_update_1291))
Types:
  main_1607 : X
  bcopy_aux_1197 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                    (x_9:int[x_1 >= x_9 + 1; x_9 >= 0] -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1615 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  bcopy_aux: (x_1:int ->
                  (({x_8:int | x_8 >= 0 && x_1 >= x_8 + 1} -> int) ->
                       (({x_6:int | x_6 >= 0 && x_1 >= x_6 + 1} -> int) -> ({x_4:int | x_4 >= 0} -> unit))))

cycles: 4
total: 1.359 sec
  abst: 0.048 sec
  mc: 0.048 sec
  refine: 0.918 sec
    exparam: 0.419 sec
