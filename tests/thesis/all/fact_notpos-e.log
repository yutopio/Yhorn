MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi fact_notpos-e.ml

parsed::
 let rec fact_1031 n_1032 =
   if n_1032 <= 0 then
     raise NotPositive
   else
     try n_1032 * fact_1031 (n_1032 - 1) with fun e_1037 -> (match e_1037 with
                                                               | NotPositive -> 1
                                                               | _ -> raise e_1037) 
 in
 let main_1033 n_1034 =
   try fact_1031 n_1034 with
   fun e_1046 ->
     (match e_1046 with
        | NotPositive -> let u_1049 = if n_1034 < 0 then
                                        ()
                                      else
                                        {fail} () 
                         in
                           0
        | _ -> raise e_1046) 
 in
   ()

set_target::
 let rec fact_1031 n_1032 =
   if n_1032 <= 0 then
     raise NotPositive
   else
     try n_1032 * fact_1031 (n_1032 - 1) with fun e_1037 -> (match e_1037 with
                                                               | NotPositive -> 1
                                                               | _ -> raise e_1037) 
 in
 let main_1033 n_1034 =
   try fact_1031 n_1034 with
   fun e_1046 ->
     (match e_1046 with
        | NotPositive -> let u_1049 = if n_1034 < 0 then
                                        ()
                                      else
                                        {fail} () 
                         in
                           0
        | _ -> raise e_1046) 
 in
 let main_1052 = let arg1_1051 = rand_int () 
                 in
                   main_1033 arg1_1051 
 in
   ()

abst_recdata::
 let rec fact_1031 n_1032 =
   if n_1032 <= 0 then
     raise ((), fun path_1076 -> (match path_1076 with
                                    | [] -> 1))
   else
     try n_1032 * fact_1031 (n_1032 - 1) with
     fun e_1037 -> (match e_1037 with
                      | f_1065 when (snd f_1065) [] = 1 -> 1
                      | _ -> raise e_1037) 
 in
 let main_1033 n_1034 =
   try fact_1031 n_1034 with
   fun e_1046 ->
     (match e_1046 with
        | f_1089 when (snd f_1089) [] = 1 -> let u_1049 = if n_1034 < 0 then
                                                            ()
                                                          else
                                                            {fail} () 
                                             in
                                               0
        | _ -> raise e_1046) 
 in
 let main_1052 = let arg1_1051 = rand_int () 
                 in
                   main_1033 arg1_1051 
 in
   ()

abst_list::
 let rec fact_1031 (n_1032:int) =
   if n_1032 <= 0 then
     raise ((), fun path_1076 -> (if fst path_1076 = 0 then
                                    1
                                  else
                                    _|_))
   else
     try n_1032 * fact_1031 (n_1032 - 1) with
     fun e_1037 ->
       (if let f_1065 = e_1037 
           in
             (snd f_1065) (0, fun x_1114 -> _|_) = 1 then
          let f_1065 = e_1037 
          in
            1
        else
          raise e_1037) 
 in
 let main_1033 (n_1034:int) =
   try fact_1031 n_1034 with
   fun e_1046 ->
     (if let f_1089 = e_1046 
         in
           (snd f_1089) (0, fun x_1145 -> _|_) = 1 then
        let f_1089 = e_1046 
        in
        let u_1049 = if n_1034 < 0 then
                       ()
                     else
                       {fail} () 
        in
          0
      else
        raise e_1046) 
 in
 let main_1052 = let arg1_1051 = rand_int () 
                 in
                   main_1033 arg1_1051 
 in
   ()

CPS::
 let h_1170 (e_1610:(unit * ((int * (int -> ((int -> X) -> X))) -> ((int -> X) -> X)))) = {fail} () 
 in
 let rec fact_1031
   (n_1032:int) (k_fact_1188:(int -> X)) (h_1190:((unit * ((int * (int -> ((int -> X) -> X))) -> ((int -> X) -> X))) ->
                                                  X)) =
   (fun h_1377 ->
      (if n_1032 <= 0 then
         h_1377 ((), fun path_1076 -> fun k_fact_1216 -> (if fst path_1076 = 0 then
                                                            k_fact_1216 1
                                                          else
                                                            _|_))
       else
         let h_1249 (e_1241:(unit * ((int * (int -> ((int -> X) -> X))) -> ((int -> X) -> X)))) =
           (fun h_1370 ->
              (snd e_1241) (0, fun x_1114 -> fun k_fact_1325 -> _|_)
                (fun x_1306 -> (if x_1306 = 1 then
                                  k_fact_1188 1
                                else
                                  h_1370 e_1241))) h_1377 
         in
           fact_1031 (n_1032 - 1) (fun x_1246 -> k_fact_1188 (n_1032 * x_1246)) h_1249)) h_1190 
 in
 let main_1033
   (n_1034:int) (k_main_1401:(int -> X)) (h_1403:((unit * ((int * (int -> ((int -> X) -> X))) -> ((int -> X) -> X))) ->
                                                  X)) =
   let h_1436 (e_1418:(unit * ((int * (int -> ((int -> X) -> X))) -> ((int -> X) -> X)))) =
     (fun h_1569 ->
        (snd e_1418) (0, fun x_1145 -> fun k_main_1495 -> _|_)
          (fun x_1476 ->
             (if x_1476 = 1 then
                let k_main_u_1551 (x_1541:unit) = k_main_1401 0 
                in
                  if n_1034 < 0 then
                    k_main_u_1551 ()
                  else
                    {|fail|} () k_main_u_1551
              else
                h_1569 e_1418))) h_1403 
   in
     fact_1031 n_1034 k_main_1401 h_1436 
 in
   rand_int_cps () (fun x_1582 -> main_1033 x_1582 (fun x_1576 -> end) h_1170)

remove_pair::
 let h_1170 (e1_1610:unit) (e2_1610:(int -> ((int -> ((int -> X) -> X)) -> ((int -> X) -> X)))) = {fail} () 
 in
 let rec fact_1031
   (n_1032:int) (k_fact_1188:(int -> X)) (h_1190:(unit ->
                                                  ((int -> ((int -> ((int -> X) -> X)) -> ((int -> X) -> X))) -> X))) =
   (fun h_1377 ->
      (if n_1032 <= 0 then
         h_1377 ()
           (fun path1_1076 -> fun path2_1076 -> fun k_fact_1216 -> (if 
                                                                    path1_1076 = 0 then
                                                                      
                                                                    k_fact_1216 1
                                                                    else
                                                                      
                                                                    _|_))
       else
         let h_1249 (e1_1241:unit) (e2_1241:(int -> ((int -> ((int -> X) -> X)) -> ((int -> X) -> X)))) =
           (fun h_1370 ->
              e2_1241 0 (fun x_1114 -> fun k_fact_1325 -> _|_)
                (fun x_1306 -> (if x_1306 = 1 then
                                  k_fact_1188 1
                                else
                                  h_1370 e1_1241 e2_1241))) h_1377 
         in
           fact_1031 (n_1032 - 1) (fun x_1246 -> k_fact_1188 (n_1032 * x_1246)) h_1249)) h_1190 
 in
 let main_1033
   (n_1034:int) (k_main_1401:(int -> X)) (h_1403:(unit ->
                                                  ((int -> ((int -> ((int -> X) -> X)) -> ((int -> X) -> X))) -> X))) =
   let h_1436 (e1_1418:unit) (e2_1418:(int -> ((int -> ((int -> X) -> X)) -> ((int -> X) -> X)))) =
     (fun h_1569 ->
        e2_1418 0 (fun x_1145 -> fun k_main_1495 -> _|_)
          (fun x_1476 ->
             (if x_1476 = 1 then
                let k_main_u_1551 (x_1541:unit) = k_main_1401 0 
                in
                  if n_1034 < 0 then
                    k_main_u_1551 ()
                  else
                    {|fail|} () k_main_u_1551
              else
                h_1569 e1_1418 e2_1418))) h_1403 
   in
     fact_1031 n_1034 k_main_1401 h_1436 
 in
   rand_int_cps () (fun x_1582 -> main_1033 x_1582 (fun x_1576 -> end) h_1170)

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1673
  main_1673 -> (rand_int f_1683)
  br_f_h_1686 b_1687 e1_1418 n_1034 e2_1418 h_1569 k_main_1401 x_1476 when b_1687 ->
      (k_main_u_1551 e1_1418 n_1034 x_1476 k_main_1401 ())
  br_f_h_1686 b_1687 e1_1418 n_1034 e2_1418 h_1569 k_main_1401 x_1476 when (
      not b_1687) -> (fail_1688 true (k_main_u_1551 e1_1418 n_1034 x_1476 k_main_1401))
  f_1683 x_1582 -> (main_1033 x_1582 (f_1684 x_1582) h_1170)
  f_1684 x_1582 x_1576 -> end
  f_fact_1674 n_1032 k_fact_1188 h_1377 when (n_1032 <= 0) -> (h_1377 () (f_fact_1675 n_1032))
  f_fact_1674 n_1032 k_fact_1188 h_1377 when (not (n_1032 <= 0)) ->
      (fact_1031 (n_1032 - 1) (f_fact_1679 n_1032 k_fact_1188) (h_1249 n_1032 h_1377 k_fact_1188))
  f_fact_1675 n_1032 path1_1076 path2_1076 k_fact_1216 when (path1_1076 = 0) -> (k_fact_1216 1)
  f_fact_1675 n_1032 path1_1076 path2_1076 k_fact_1216 when (not (path1_1076 = 0)) -> _|_
  f_fact_1679 n_1032 k_fact_1188 x_1246 -> (k_fact_1188 (n_1032 * x_1246))
  f_h_1676 e1_1241 n_1032 e2_1241 k_fact_1188 h_1370 ->
      (e2_1241 0 (f_h_1677 e1_1241 n_1032) (f_h_1678 e1_1241 n_1032 e2_1241 h_1370 k_fact_1188))
  f_h_1677 e1_1241 n_1032 x_1114 k_fact_1325 -> _|_
  f_h_1678 e1_1241 n_1032 e2_1241 h_1370 k_fact_1188 x_1306 when (x_1306 = 1) -> (k_fact_1188 1)
  f_h_1678 e1_1241 n_1032 e2_1241 h_1370 k_fact_1188 x_1306 when (not (x_1306 = 1)) -> (h_1370 e1_1241 e2_1241)
  f_h_1680 e1_1418 n_1034 e2_1418 k_main_1401 h_1569 ->
      (e2_1418 0 (f_h_1681 e1_1418 n_1034) (f_h_1682 e1_1418 n_1034 e2_1418 h_1569 k_main_1401))
  f_h_1681 e1_1418 n_1034 x_1145 k_main_1495 -> _|_
  f_h_1682 e1_1418 n_1034 e2_1418 h_1569 k_main_1401 x_1476 when (x_1476 = 1) ->
      (br_f_h_1686 (n_1034 < 0) e1_1418 n_1034 e2_1418 h_1569 k_main_1401 x_1476)
  f_h_1682 e1_1418 n_1034 e2_1418 h_1569 k_main_1401 x_1476 when (not (x_1476 = 1)) -> (h_1569 e1_1418 e2_1418)
  fact_1031 n_1032 k_fact_1188 h_1190 -> (f_fact_1674 n_1032 k_fact_1188 h_1190)
  fail_1688 b k -> {fail} => (k ())
  h_1170 e1_1610 e2_1610 -> {fail} => (k_1685 ())
  h_1249 n_1032 h_1377 k_fact_1188 e1_1241 e2_1241 -> (f_h_1676 e1_1241 n_1032 e2_1241 k_fact_1188 h_1377)
  h_1436 n_1034 h_1403 k_main_1401 e1_1418 e2_1418 -> (f_h_1680 e1_1418 n_1034 e2_1418 k_main_1401 h_1403)
  k_1685 u -> end
  k_main_u_1551 e1_1418 n_1034 x_1476 k_main_1401 x_1541 -> (k_main_1401 0)
  main_1033 n_1034 k_main_1401 h_1403 -> (fact_1031 n_1034 k_main_1401 (h_1436 n_1034 h_1403 k_main_1401))
Types:
  main_1673 : X
  fact_1031 : (int -> (int -> X) -> (unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X) -> X)
  fail_1688 : (x_1:bool[x_1] -> (unit -> X) -> X)
  h_1170 : (unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1673 ... --> 
  f_1683 ... --> 
  main_1033 ... --> 
  fact_1031 ... --> 
  f_fact_1674 [1/2] ... --> 
  h_1436 ... --> 
  f_h_1680 ... --> 
  f_fact_1675 [1/2] ... --> 
  f_h_1682 [2/2] ... --> 
  h_1170 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(155)[1]
  program:
    main_1673  | true = ((Random.int 0) f_1683)
    br_f_h_1686 b_1687 e1_1418 n_1034 e2_1418 h_1569 k_main_1401 x_1476 | b_1687 = (
    k_main_u_1551 e1_1418
                  n_1034
                  x_1476
                  k_main_1401
                  ())
    br_f_h_1686 b_1687 e1_1418 n_1034 e2_1418 h_1569 k_main_1401 x_1476 | (
    not b_1687) = (fail_1688 true
                             (k_main_u_1551 e1_1418
                                            n_1034
                                            x_1476
                                            k_main_1401))
    f_1683 x_1582 | true = (main_1033 x_1582
                                      (f_1684 x_1582)
                                      h_1170)
    f_1684 x_1582 x_1576 | true = end
    f_fact_1674 n_1032 k_fact_1188 h_1377 | (n_1032 <= 0) = (h_1377 ()
                                                                    (
                                                                    f_fact_1675 n_1032))
    f_fact_1674 n_1032 k_fact_1188 h_1377 | (not (n_1032 <= 0)) = (fact_1031
                                                                    (
                                                                    n_1032 - 1)
                                                                    (
                                                                    f_fact_1679 n_1032
                                                                    k_fact_1188)
                                                                    (
                                                                    h_1249 n_1032
                                                                    h_1377
                                                                    k_fact_1188))
    f_fact_1675 n_1032 path1_1076 path2_1076 k_fact_1216 | (path1_1076 = 0) = (
    k_fact_1216 1)
    f_fact_1675 n_1032 path1_1076 path2_1076 k_fact_1216 | (not (path1_1076 = 0)) = bot
    f_fact_1679 n_1032 k_fact_1188 x_1246 | true = (k_fact_1188 (n_1032 * x_1246))
    f_h_1676 e1_1241 n_1032 e2_1241 k_fact_1188 h_1370 | true = (e2_1241
                                                                   0
                                                                   (f_h_1677 e1_1241
                                                                    n_1032)
                                                                   (f_h_1678 e1_1241
                                                                    n_1032
                                                                    e2_1241
                                                                    h_1370
                                                                    k_fact_1188))
    f_h_1677 e1_1241 n_1032 x_1114 k_fact_1325 | true = bot
    f_h_1678 e1_1241 n_1032 e2_1241 h_1370 k_fact_1188 x_1306 | (x_1306 = 1) = (
    k_fact_1188 1)
    f_h_1678 e1_1241 n_1032 e2_1241 h_1370 k_fact_1188 x_1306 | (not (
                                                                    x_1306 = 1)) = (
    h_1370 e1_1241
           e2_1241)
    f_h_1680 e1_1418 n_1034 e2_1418 k_main_1401 h_1569 | true = (e2_1418
                                                                   0
                                                                   (f_h_1681 e1_1418
                                                                    n_1034)
                                                                   (f_h_1682 e1_1418
                                                                    n_1034
                                                                    e2_1418
                                                                    h_1569
                                                                    k_main_1401))
    f_h_1681 e1_1418 n_1034 x_1145 k_main_1495 | true = bot
    f_h_1682 e1_1418 n_1034 e2_1418 h_1569 k_main_1401 x_1476 | (x_1476 = 1) = (
    br_f_h_1686 (n_1034 < 0)
                e1_1418
                n_1034
                e2_1418
                h_1569
                k_main_1401
                x_1476)
    f_h_1682 e1_1418 n_1034 e2_1418 h_1569 k_main_1401 x_1476 | (not (
                                                                    x_1476 = 1)) = (
    h_1569 e1_1418
           e2_1418)
    fact_1031 n_1032 k_fact_1188 h_1190 | true = (f_fact_1674 n_1032
                                                              k_fact_1188
                                                              h_1190)
    fail_1688 b k | true = (fail ())
    h_1170 e1_1610 e2_1610 | true = (fail ())
    h_1249 n_1032 h_1377 k_fact_1188 e1_1241 e2_1241 | true = (f_h_1676 e1_1241
                                                                    n_1032
                                                                    e2_1241
                                                                    k_fact_1188
                                                                    h_1377)
    h_1436 n_1034 h_1403 k_main_1401 e1_1418 e2_1418 | true = (f_h_1680 e1_1418
                                                                    n_1034
                                                                    e2_1418
                                                                    k_main_1401
                                                                    h_1403)
    k_1685 u | true = end
    k_main_u_1551 e1_1418 n_1034 x_1476 k_main_1401 x_1541 | true = (
    k_main_1401 0)
    main_1033 n_1034 k_main_1401 h_1403 | true = (fact_1031 n_1034
                                                            k_main_1401
                                                            (h_1436 n_1034
                                                                    h_1403
                                                                    k_main_1401))
    main_1673:X
    br_f_h_1686:bool ->
                unit ->
                int ->
                (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) ->
                (unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X) -> (int -> X) -> int -> X
    f_1683:int -> X
    f_1684:int -> int -> X
    f_fact_1674:int -> (int -> X) -> (unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X) -> X
    f_fact_1675:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    f_fact_1679:int -> (int -> X) -> int -> X
    f_h_1676:unit ->
             int ->
             (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) ->
             (int -> X) -> (unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X) -> X
    f_h_1677:unit -> int -> int -> (int -> X) -> X
    f_h_1678:unit ->
             int ->
             (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) ->
             (unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X) -> (int -> X) -> int -> X
    f_h_1680:unit ->
             int ->
             (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) ->
             (int -> X) -> (unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X) -> X
    f_h_1681:unit -> int -> int -> (int -> X) -> X
    f_h_1682:unit ->
             int ->
             (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) ->
             (unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X) -> (int -> X) -> int -> X
    fact_1031:int -> (int -> X) -> (unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X) -> X
    fail_1688:bool -> (unit -> X) -> X
    h_1170:unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X
    h_1249:int ->
           (unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X) ->
           (int -> X) -> unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X
    h_1436:int ->
           (unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X) ->
           (int -> X) -> unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X
    k_1685:unit -> X
    k_main_u_1551:unit -> int -> int -> (int -> X) -> unit -> X
    main_1033:int -> (int -> X) -> (unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X) -> X
  inlined functions: br_f_h_1686,f_1683,f_1684,f_fact_1674,f_fact_1675,f_fact_1679,f_h_1676,f_h_1677,f_h_1678,f_h_1680,f_h_1681,f_h_1682,h_1249,h_1436,k_1685,k_main_u_1551,main_1033
  counterexample: 0:0:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1683@4:0> = var2)
     [true.(<main_1033@6:0> = <f_1683@4:0>)
      [true.(<fact_1031@8:0> = <main_1033@6:0>)
       [true.(<f_fact_1674@10:0> = <fact_1031@8:0>)
        [(<f_fact_1674@10:0> <= 0).(<<f_fact_1674@10:2>@13:0> = ())
         [true.(<<fact_1031@8:2>@15:0> = <<f_fact_1674@10:2>@13:0>)
          [true.((<h_1436@17:0> = <main_1033@6:0>) && (<h_1436@17:3> = <<fact_1031@8:2>@15:0>))
           [true.((<f_h_1680@19:0> = <h_1436@17:3>) && (<f_h_1680@19:1> = <h_1436@17:0>))
            [true.(<<f_h_1680@19:2>@21:0> = 0)
             [true.(<<h_1436@17:4>@23:0> = <<f_h_1680@19:2>@21:0>)
              [true.(<<<fact_1031@8:2>@15:1>@25:0> = <<h_1436@17:4>@23:0>)
               [true.(<<<f_fact_1674@10:2>@13:1>@27:0> = <<<fact_1031@8:2>@15:1>@25:0>)
                [true.
                 ((<f_fact_1675@29:0> = <f_fact_1674@10:0>) && (<f_fact_1675@29:1> = <<<f_fact_1674@10:2>@13:1>@27:0>))
                 [(<f_fact_1675@29:1> = 0).(<<f_fact_1675@29:3>@32:0> = 1)
                  [true.(<<<<f_fact_1674@10:2>@13:1>@27:2>@34:0> = <<f_fact_1675@29:3>@32:0>)
                   [true.(<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = <<<<f_fact_1674@10:2>@13:1>@27:2>@34:0>)
                    [true.(<<<h_1436@17:4>@23:2>@38:0> = <<<<fact_1031@8:2>@15:1>@25:2>@36:0>)
                     [true.(<<<f_h_1680@19:2>@21:2>@40:0> = <<<h_1436@17:4>@23:2>@38:0>)
                      [true.
                       ((<f_h_1682@42:0> = <f_h_1680@19:0>) &&
                        ((<f_h_1682@42:1> = <f_h_1680@19:1>) && (<f_h_1682@42:5> = <<<f_h_1680@19:2>@21:2>@40:0>)))
                       [(not (<f_h_1682@42:5> = 1)).(<<f_h_1682@42:3>@45:0> = <f_h_1682@42:0>)
                        [true.(<<f_h_1680@19:4>@47:0> = <<f_h_1682@42:3>@45:0>)
                         [true.(<<h_1436@17:1>@49:0> = <<f_h_1680@19:4>@47:0>)
                          [true.(<<main_1033@6:2>@51:0> = <<h_1436@17:1>@49:0>)
                           [true.(<h_1170@53:0> = <<main_1033@6:2>@51:0>)[true.error
  begin RefTypeInfer.infer_etrs(156)[2]
    horn clauses:
      P[<h_1170@53:0>](<h_1170@53:0>:unit)|- bot
      
      P[<f_1683@4:0>](<main_1033@6:0>:int),
      P[<<main_1033@6:2>@51:0>](<main_1033@6:0>:int,<<main_1033@6:2>@51:0>:unit)|- P[<h_1170@53:0>](
      <h_1170@53:0>:unit)
      
      P[<main_1033@6:0>](<main_1033@6:0>:int),
      P[<<h_1436@17:1>@49:0>](<main_1033@6:0>:int,<<h_1436@17:1>@49:0>:unit)|- P[<<main_1033@6:2>@51:0>](
      <main_1033@6:0>:int,<<main_1033@6:2>@51:0>:unit)
      
      P[<h_1436@17:3>](<h_1436@17:0>:int,<h_1436@17:3>:unit),
      P[<<f_h_1680@19:4>@47:0>](<f_h_1680@19:0>:unit,<h_1436@17:0>:int,<<f_h_1680@19:4>@47:0>:unit)|- P[<<h_1436@17:1>@49:0>](
      <h_1436@17:0>:int,<<h_1436@17:1>@49:0>:unit)
      
      P[<f_h_1680@19:1>](<f_h_1680@19:0>:unit,<f_h_1680@19:1>:int),
      P[<<f_h_1682@42:3>@45:0>](<f_h_1682@42:0>:unit,<f_h_1680@19:1>:int,<<f_h_1682@42:3>@45:0>:unit)|- P[<<f_h_1680@19:4>@47:0>](
      <f_h_1680@19:0>:unit,<f_h_1680@19:1>:int,<<f_h_1680@19:4>@47:0>:unit)
      
      P[<f_h_1682@42:5>](<f_h_1682@42:0>:unit,<f_h_1682@42:1>:int,<f_h_1682@42:5>:int), (
      <f_h_1682@42:5> <> 1)
      |- P[<<f_h_1682@42:3>@45:0>](<f_h_1682@42:0>:unit,<f_h_1682@42:1>:int,
                                   <<f_h_1682@42:3>@45:0>:unit)
      
      P[<f_h_1680@19:1>](<f_h_1680@19:0>:unit,<f_h_1682@42:1>:int),
      P[<<<f_h_1680@19:2>@21:2>@40:0>](<f_h_1680@19:0>:unit,<f_h_1682@42:1>:int,0:int,<f_h_1682@42:5>:int)|- P[<f_h_1682@42:5>](
      <f_h_1682@42:0>:unit,<f_h_1682@42:1>:int,<f_h_1682@42:5>:int)
      
      P[<h_1436@17:3>](<f_h_1680@19:1>:int,<h_1436@17:3>:unit),
      P[<<<h_1436@17:4>@23:2>@38:0>](<f_h_1680@19:1>:int,<h_1436@17:3>:unit,<<f_h_1680@19:2>@21:0>:int,<<<f_h_1680@19:2>@21:2>@40:0>:int),
      P[<f_h_1680@19:1>](<f_h_1680@19:0>:unit,<f_h_1680@19:1>:int)|- P[<<<f_h_1680@19:2>@21:2>@40:0>](
      <f_h_1680@19:0>:unit,<f_h_1680@19:1>:int,<<f_h_1680@19:2>@21:0>:int,
      <<<f_h_1680@19:2>@21:2>@40:0>:int)
      
      P[<main_1033@6:0>](<h_1436@17:0>:int),
      P[<<fact_1031@8:2>@15:0>](<h_1436@17:0>:int,<<fact_1031@8:2>@15:0>:unit),
      P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<h_1436@17:0>:int,<<fact_1031@8:2>@15:0>:unit,<<h_1436@17:4>@23:0>:int,<<<h_1436@17:4>@23:2>@38:0>:int),
      P[<h_1436@17:3>](<h_1436@17:0>:int,<h_1436@17:3>:unit)|- P[<<<h_1436@17:4>@23:2>@38:0>](
      <h_1436@17:0>:int,<h_1436@17:3>:unit,<<h_1436@17:4>@23:0>:int,<<<h_1436@17:4>@23:2>@38:0>:int)
      
      P[<fact_1031@8:0>](<fact_1031@8:0>:int),
      P[<<f_fact_1674@10:2>@13:0>](<fact_1031@8:0>:int,<<f_fact_1674@10:2>@13:0>:unit),
      P[<<<<f_fact_1674@10:2>@13:1>@27:2>@34:0>](<fact_1031@8:0>:int,<<f_fact_1674@10:2>@13:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int,<<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int),
      P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)|- P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](
      <fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int,
      <<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int)
      
      P[<f_fact_1674@10:0>](<f_fact_1674@10:0>:int),
      P[<<f_fact_1675@29:3>@32:0>](<f_fact_1674@10:0>:int,<<<f_fact_1674@10:2>@13:1>@27:0>:int,<<<<f_fact_1674@10:2>@13:1>@27:2>@34:0>:int),
      P[<<f_fact_1674@10:2>@13:0>](<f_fact_1674@10:0>:int,<<f_fact_1674@10:2>@13:0>:unit), (
      <f_fact_1674@10:0> <= 0)
      |- P[<<<<f_fact_1674@10:2>@13:1>@27:2>@34:0>](<f_fact_1674@10:0>:int,
                                                    <<f_fact_1674@10:2>@13:0>:unit,
                                                    <<<f_fact_1674@10:2>@13:1>@27:0>:int,
                                                    <<<<f_fact_1674@10:2>@13:1>@27:2>@34:0>:int)
      
      P[<f_fact_1675@29:1>](<f_fact_1675@29:0>:int,<f_fact_1675@29:1>:int),
      ((<f_fact_1675@29:1> = 0) && (<<f_fact_1675@29:3>@32:0> = 1))
      |- P[<<f_fact_1675@29:3>@32:0>](<f_fact_1675@29:0>:int,<f_fact_1675@29:1>:int,
                                      <<f_fact_1675@29:3>@32:0>:int)
      
      P[<f_fact_1674@10:0>](<f_fact_1675@29:0>:int),
      P[<<<f_fact_1674@10:2>@13:1>@27:0>](<f_fact_1675@29:0>:int,<<f_fact_1674@10:2>@13:0>:unit,<f_fact_1675@29:1>:int),
      (<f_fact_1675@29:0> <= 0) |- P[<f_fact_1675@29:1>](<f_fact_1675@29:0>:int,
                                                         <f_fact_1675@29:1>:int)
      
      P[<fact_1031@8:0>](<f_fact_1674@10:0>:int),
      P[<<<fact_1031@8:2>@15:1>@25:0>](<f_fact_1674@10:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<f_fact_1674@10:2>@13:1>@27:0>:int),
      P[<f_fact_1674@10:0>](<f_fact_1674@10:0>:int)|- P[<<<f_fact_1674@10:2>@13:1>@27:0>](
      <f_fact_1674@10:0>:int,<<f_fact_1674@10:2>@13:0>:unit,<<<f_fact_1674@10:2>@13:1>@27:0>:int)
      
      P[<main_1033@6:0>](<fact_1031@8:0>:int),
      P[<<h_1436@17:4>@23:0>](<fact_1031@8:0>:int,<h_1436@17:3>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int),
      P[<fact_1031@8:0>](<fact_1031@8:0>:int)|- P[<<<fact_1031@8:2>@15:1>@25:0>](
      <fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int)
      
      P[<h_1436@17:3>](<h_1436@17:0>:int,<h_1436@17:3>:unit),
      P[<<f_h_1680@19:2>@21:0>](<f_h_1680@19:0>:unit,<h_1436@17:0>:int,<<h_1436@17:4>@23:0>:int)|- P[<<h_1436@17:4>@23:0>](
      <h_1436@17:0>:int,<h_1436@17:3>:unit,<<h_1436@17:4>@23:0>:int)
      
      P[<f_h_1680@19:1>](<f_h_1680@19:0>:unit,<f_h_1680@19:1>:int), (
      <<f_h_1680@19:2>@21:0> = 0)
      |- P[<<f_h_1680@19:2>@21:0>](<f_h_1680@19:0>:unit,<f_h_1680@19:1>:int,
                                   <<f_h_1680@19:2>@21:0>:int)
      
      P[<h_1436@17:3>](<f_h_1680@19:1>:int,<h_1436@17:3>:unit)|- P[<f_h_1680@19:1>](
      <f_h_1680@19:0>:unit,<f_h_1680@19:1>:int)
      
      P[<main_1033@6:0>](<h_1436@17:0>:int),
      P[<<fact_1031@8:2>@15:0>](<h_1436@17:0>:int,<<fact_1031@8:2>@15:0>:unit)|- P[<h_1436@17:3>](
      <h_1436@17:0>:int,<h_1436@17:3>:unit)
      
      P[<fact_1031@8:0>](<fact_1031@8:0>:int),
      P[<<f_fact_1674@10:2>@13:0>](<fact_1031@8:0>:int,<<f_fact_1674@10:2>@13:0>:unit)|- P[<<fact_1031@8:2>@15:0>](
      <fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
      
      P[<f_fact_1674@10:0>](<f_fact_1674@10:0>:int), (<f_fact_1674@10:0> <= 0)
      |- P[<<f_fact_1674@10:2>@13:0>](<f_fact_1674@10:0>:int,<<f_fact_1674@10:2>@13:0>:unit)
      
      P[<fact_1031@8:0>](<f_fact_1674@10:0>:int)|- P[<f_fact_1674@10:0>](<f_fact_1674@10:0>:int)
      
      P[<main_1033@6:0>](<fact_1031@8:0>:int)|- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
      
      P[<f_1683@4:0>](<main_1033@6:0>:int)|- P[<main_1033@6:0>](<main_1033@6:0>:int)
      
      |- P[<f_1683@4:0>](<f_1683@4:0>:int)
    call trees:
      <main_1673@1>
        <f_1683@4>
          <main_1033@6>
            <fact_1031@8>
              <f_fact_1674@10>
              </<f_fact_1674@10:2>@13>
            </<fact_1031@8:2>@15>
            <h_1436@17>
              <f_h_1680@19>
              </<f_h_1680@19:2>@21>
            </<h_1436@17:4>@23>
            <<<fact_1031@8:2>@15:1>@25>
              <<<f_fact_1674@10:2>@13:1>@27>
                <f_fact_1675@29>
                </<f_fact_1675@29:3>@32>
              </<<<f_fact_1674@10:2>@13:1>@27:2>@34>
            </<<<fact_1031@8:2>@15:1>@25:2>@36>
            <<<h_1436@17:4>@23:2>@38>
              <<<f_h_1680@19:2>@21:2>@40>
                <f_h_1682@42>
                </<f_h_1682@42:3>@45>
              </<f_h_1680@19:4>@47>
            </<h_1436@17:1>@49>
          </<main_1033@6:2>@51>
          <h_1170@53>
    inlined horn clauses:
      P[<h_1170@53:0>](<h_1170@53:0>:unit)|- bot
      
      P[<<fact_1031@8:2>@15:0>](<main_1033@6:0>:int,var25:unit),
      P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<main_1033@6:0>:int,var25:unit,0:int,var26:int), (
      var26 <> 1) |- P[<h_1170@53:0>](<h_1170@53:0>:unit)
      
      P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,var27:unit,<<<fact_1031@8:2>@15:1>@25:0>:int),
      P[<fact_1031@8:0>](<fact_1031@8:0>:int),
      P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit),
      ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && (<fact_1031@8:0> <= 0)))
      |- P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,
                                                 <<fact_1031@8:2>@15:0>:unit,
                                                 <<<fact_1031@8:2>@15:1>@25:0>:int,
                                                 <<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int)
      
      P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,var28:unit),
      P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<<<fact_1031@8:2>@15:1>@25:0> = 0)
      |- P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,
                                          <<<fact_1031@8:2>@15:1>@25:0>:int)
      
      P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<fact_1031@8:0> <= 0)
      |- P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
      
      |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
    begin ParamSubstInfer.infer(2335)[3]
      
    end ParamSubstInfer.infer(2335)[3] (0.021997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(2337)[3]
      
    end RefTypeInfer.elim_coeffs(2337)[3] (0.001000 sec.)
    begin GenHcSolver.solve(2544)[3]
      Horn clauses:
        P[<h_1170@53:0>](<h_1170@53:0>:unit)|- bot
        
        P[<<fact_1031@8:2>@15:0>](<main_1033@6:0>:int,var25:unit),
        P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<main_1033@6:0>:int,var25:unit,0:int,var26:int), (
        var26 <> 1) |- P[<h_1170@53:0>](<h_1170@53:0>:unit)
        
        P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,var27:unit,<<<fact_1031@8:2>@15:1>@25:0>:int),
        P[<fact_1031@8:0>](<fact_1031@8:0>:int),
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit),
        ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && (<fact_1031@8:0> <= 0)))
        |- P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,
                                                   <<fact_1031@8:2>@15:0>:unit,
                                                   <<<fact_1031@8:2>@15:1>@25:0>:int,
                                                   <<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int)
        
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,var28:unit),
        P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<<<fact_1031@8:2>@15:1>@25:0> = 0)
        |- P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,
                                            <<<fact_1031@8:2>@15:1>@25:0>:int)
        
        P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<fact_1031@8:0> <= 0)
        |- P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
        
        |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
      lower bounds:
        P[<fact_1031@8:0>](<fact_1031@8:0>:int) = true
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit) = (<fact_1031@8:0> <= 0)
        P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int) =
        ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0))
        P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int,<<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int) =
        ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0)))
        P[<h_1170@53:0>](<h_1170@53:0>:unit) = false
      upper bounds:
        P[<h_1170@53:0>](var30:unit) = true
      begin GenHcSolver.classify_pids(3792)[4]
        output:
          [<h_1170@53:0>]
      end GenHcSolver.classify_pids(3792)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(3795)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(3796)[5]
          begin InterpProver.interpolate_fresh(3797)[6]
            begin InterpProver.interpolate_log(3798)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(3799)[8]
                begin InterpProver.interpolate_simplify(3800)[9]
                  begin InterpProver.interpolate_quick(3813)[10]
                    
                  end InterpProver.interpolate_quick(3813)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(3817)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(3817)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3800)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3799)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(3798)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(3797)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(3796)[5] (0.000000 sec.)
        output:
          P[<h_1170@53:0>](<h_1170@53:0>:unit) = false
      end ApronInterface.convex_hull_interpolate(3795)[4] (0.001000 sec.)
      Horn clauses:
        P[<<fact_1031@8:2>@15:0>](<main_1033@6:0>:int,var25:unit),
        P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<main_1033@6:0>:int,var25:unit,0:int,var26:int), (
        var26 <> 1) |- bot
        
        P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,var27:unit,<<<fact_1031@8:2>@15:1>@25:0>:int),
        P[<fact_1031@8:0>](<fact_1031@8:0>:int),
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit),
        ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && (<fact_1031@8:0> <= 0)))
        |- P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,
                                                   <<fact_1031@8:2>@15:0>:unit,
                                                   <<<fact_1031@8:2>@15:1>@25:0>:int,
                                                   <<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int)
        
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,var28:unit),
        P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<<<fact_1031@8:2>@15:1>@25:0> = 0)
        |- P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,
                                            <<<fact_1031@8:2>@15:1>@25:0>:int)
        
        P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<fact_1031@8:0> <= 0)
        |- P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
        
        |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
      lower bounds:
        P[<fact_1031@8:0>](<fact_1031@8:0>:int) = true
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit) = (<fact_1031@8:0> <= 0)
        P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int) =
        ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0))
        P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int,<<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int) =
        ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0)))
      upper bounds:
        P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](var31:int,var32:unit,var33:int,var34:int) =
        ((var33 <> 0) || ((var34 = 1) || (var31 > 0)))
      begin GenHcSolver.classify_pids(5505)[4]
        output:
          [<<<<fact_1031@8:2>@15:1>@25:2>@36:0>]
      end GenHcSolver.classify_pids(5505)[4] (0.000000 sec.)
      lb:((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0)))
      nub:(not
             ((<<<fact_1031@8:2>@15:1>@25:0> <> 0) ||
              ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) || (<fact_1031@8:0> > 0))))
      begin ApronInterface.convex_hull_interpolate(5508)[4]
        lb:((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) &&
            ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0)))
        nub:(not
               ((<<<fact_1031@8:2>@15:1>@25:0> <> 0) ||
                ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) || (<fact_1031@8:0> > 0))))
        lb':((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) &&
             ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0)))
        nub':(not
                ((<<<fact_1031@8:2>@15:1>@25:0> <> 0) ||
                 ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) || (<fact_1031@8:0> > 0))))
        begin InterpProver.interpolate(5509)[5]
          begin InterpProver.interpolate_fresh(5510)[6]
            begin InterpProver.interpolate_log(5511)[7]
              input1: ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) &&
                       ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0)))
              input2: (not
                         ((<<<fact_1031@8:2>@15:1>@25:0> <> 0) ||
                          ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) || (<fact_1031@8:0> > 0))))
              begin InterpProver.interpolate_check(5512)[8]
                begin InterpProver.interpolate_simplify(5513)[9]
                  begin InterpProver.interpolate_quick(5604)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(5613)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(5614)[12]
                        begin CsisatInterface.interpolate_csisat_log(5615)[13]
                          input1: (0 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0 & 1 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0 & v_sep_fact_1031_sep_8_sep_0 <= 0)
                          input2: (not 1 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0 & 0 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0 & v_sep_fact_1031_sep_8_sep_0 <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(5616)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(5616)[14] (0.000000 sec.)
                          output: 1 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(5615)[13] (0.000000 sec.)
                        after simplification: 1 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0
                        after dnf conversion: ((1 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(5614)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(5613)[11] (0.000999 sec.)
                    
                  end InterpProver.interpolate_quick(5604)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(5513)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(5512)[8] (0.001999 sec.)
              output: (1 = <<<<fact_1031@8:2>@15:1>@25:2>@36:0>)
            end InterpProver.interpolate_log(5511)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(5510)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(5509)[5] (0.001999 sec.)
        output:
          P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int,<<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int) =
          (1 = <<<<fact_1031@8:2>@15:1>@25:2>@36:0>)
      end ApronInterface.convex_hull_interpolate(5508)[4] (0.001999 sec.)
      Horn clauses:
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,var28:unit),
        P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<<<fact_1031@8:2>@15:1>@25:0> = 0)
        |- P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,
                                            <<<fact_1031@8:2>@15:1>@25:0>:int)
        
        P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<fact_1031@8:0> <= 0)
        |- P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
        
        |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
      lower bounds:
        P[<fact_1031@8:0>](<fact_1031@8:0>:int) = true
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit) = (<fact_1031@8:0> <= 0)
        P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int) =
        ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0))
      upper bounds:
        P[<<<fact_1031@8:2>@15:1>@25:0>](var35:int,var36:unit,var37:int) = true
      begin GenHcSolver.classify_pids(6435)[4]
        output:
          [<<<fact_1031@8:2>@15:1>@25:0>]
      end GenHcSolver.classify_pids(6435)[4] (0.000000 sec.)
      lb:((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(6438)[4]
        lb:((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0))
        nub:false
        lb':((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0))
        nub':false
        begin InterpProver.interpolate(6439)[5]
          begin InterpProver.interpolate_fresh(6440)[6]
            begin InterpProver.interpolate_log(6441)[7]
              input1: ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0))
              input2: false
              begin InterpProver.interpolate_check(6442)[8]
                begin InterpProver.interpolate_simplify(6443)[9]
                  begin InterpProver.interpolate_quick(6475)[10]
                    
                  end InterpProver.interpolate_quick(6475)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(6443)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(6442)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(6441)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(6440)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(6439)[5] (0.001000 sec.)
        output:
          P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(6438)[4] (0.001000 sec.)
      Horn clauses:
        P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<fact_1031@8:0> <= 0)
        |- P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
        
        |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
      lower bounds:
        P[<fact_1031@8:0>](<fact_1031@8:0>:int) = true
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit) = (<fact_1031@8:0> <= 0)
      upper bounds:
        P[<<fact_1031@8:2>@15:0>](var38:int,var39:unit) = true
      begin GenHcSolver.classify_pids(6861)[4]
        output:
          [<<fact_1031@8:2>@15:0>]
      end GenHcSolver.classify_pids(6861)[4] (0.000000 sec.)
      lb:(<fact_1031@8:0> <= 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(6864)[4]
        lb:(<fact_1031@8:0> <= 0)
        nub:false
        lb':(<fact_1031@8:0> <= 0)
        nub':false
        begin InterpProver.interpolate(6865)[5]
          begin InterpProver.interpolate_fresh(6866)[6]
            begin InterpProver.interpolate_log(6867)[7]
              input1: (<fact_1031@8:0> <= 0)
              input2: false
              begin InterpProver.interpolate_check(6868)[8]
                begin InterpProver.interpolate_simplify(6869)[9]
                  begin InterpProver.interpolate_quick(6884)[10]
                    
                  end InterpProver.interpolate_quick(6884)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(6869)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(6868)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(6867)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(6866)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(6865)[5] (0.000000 sec.)
        output:
          P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit) = true
      end ApronInterface.convex_hull_interpolate(6864)[4] (0.000000 sec.)
      Horn clauses:
        |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
      lower bounds:
        P[<fact_1031@8:0>](<fact_1031@8:0>:int) = true
      upper bounds:
        P[<fact_1031@8:0>](var40:int) = true
      begin GenHcSolver.classify_pids(7106)[4]
        output:
          [<fact_1031@8:0>]
      end GenHcSolver.classify_pids(7106)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(7109)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(7110)[5]
          begin InterpProver.interpolate_fresh(7111)[6]
            begin InterpProver.interpolate_log(7112)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(7113)[8]
                begin InterpProver.interpolate_simplify(7114)[9]
                  begin InterpProver.interpolate_quick(7127)[10]
                    
                  end InterpProver.interpolate_quick(7127)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(7114)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(7113)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(7112)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(7111)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(7110)[5] (0.000000 sec.)
        output:
          P[<fact_1031@8:0>](<fact_1031@8:0>:int) = true
      end ApronInterface.convex_hull_interpolate(7109)[4] (0.000000 sec.)
      begin HcSolver.check_validity(7182)[4]
        input:
          P[<h_1170@53:0>](<h_1170@53:0>:unit)|- bot
          
          P[<<fact_1031@8:2>@15:0>](<main_1033@6:0>:int,var25:unit),
          P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<main_1033@6:0>:int,var25:unit,0:int,var26:int), (
          var26 <> 1) |- P[<h_1170@53:0>](<h_1170@53:0>:unit)
          
          P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,var27:unit,<<<fact_1031@8:2>@15:1>@25:0>:int),
          P[<fact_1031@8:0>](<fact_1031@8:0>:int),
          P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit),
          ((<<<fact_1031@8:2>@15:1>@25:0> = 0) &&
           ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && (<fact_1031@8:0> <= 0)))
          |- P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,
                                                     <<fact_1031@8:2>@15:0>:unit,
                                                     <<<fact_1031@8:2>@15:1>@25:0>:int,
                                                     <<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int)
          
          P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,var28:unit),
          P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<<<fact_1031@8:2>@15:1>@25:0> = 0)
          |- P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,
                                              <<<fact_1031@8:2>@15:1>@25:0>:int)
          
          P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<fact_1031@8:0> <= 0)
          |- P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
          
          |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(7182)[4] (0.003000 sec.)
      solution:
        P[<h_1170@53:0>](<h_1170@53:0>:unit) = false
        P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int,<<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int) =
        (1 = <<<<fact_1031@8:2>@15:1>@25:2>@36:0>)
        P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int) =
        true
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit) = true
        P[<fact_1031@8:0>](<fact_1031@8:0>:int) = true
    end GenHcSolver.solve(2544)[3] (0.021997 sec.)
    begin GenHcSolver.solve(7537)[3]
      Horn clauses:
        P[<h_1170@53:0>](<h_1170@53:0>:unit)|- bot
        
        P[<<fact_1031@8:2>@15:0>](<main_1033@6:0>:int,var25:unit),
        P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<main_1033@6:0>:int,var25:unit,0:int,var26:int), (
        var26 <> 1) |- P[<h_1170@53:0>](<h_1170@53:0>:unit)
        
        P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,var27:unit,<<<fact_1031@8:2>@15:1>@25:0>:int),
        P[<fact_1031@8:0>](<fact_1031@8:0>:int),
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit),
        ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && (<fact_1031@8:0> <= 0)))
        |- P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,
                                                   <<fact_1031@8:2>@15:0>:unit,
                                                   <<<fact_1031@8:2>@15:1>@25:0>:int,
                                                   <<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int)
        
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,var28:unit),
        P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<<<fact_1031@8:2>@15:1>@25:0> = 0)
        |- P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,
                                            <<<fact_1031@8:2>@15:1>@25:0>:int)
        
        P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<fact_1031@8:0> <= 0)
        |- P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
        
        |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
      lower bounds:
        P[<fact_1031@8:0>](<fact_1031@8:0>:int) = true
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit) = (<fact_1031@8:0> <= 0)
        P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int) =
        ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0))
        P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int,<<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int) =
        ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0)))
        P[<h_1170@53:0>](<h_1170@53:0>:unit) = false
      upper bounds:
        P[<h_1170@53:0>](var42:unit) = true
      begin GenHcSolver.classify_pids(8785)[4]
        output:
          [<h_1170@53:0>]
      end GenHcSolver.classify_pids(8785)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(8788)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(8791)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(8791)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(8796)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(8796)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(8799)[5]
          begin InterpProver.interpolate_fresh(8800)[6]
            begin InterpProver.interpolate_log(8801)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(8802)[8]
                begin InterpProver.interpolate_simplify(8803)[9]
                  begin InterpProver.interpolate_quick(8818)[10]
                    
                  end InterpProver.interpolate_quick(8818)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(8822)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(8822)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(8803)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(8802)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(8801)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(8800)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(8799)[5] (0.000000 sec.)
        output:
          P[<h_1170@53:0>](<h_1170@53:0>:unit) = false
      end ApronInterface.convex_hull_interpolate(8788)[4] (0.000999 sec.)
      Horn clauses:
        P[<<fact_1031@8:2>@15:0>](<main_1033@6:0>:int,var25:unit),
        P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<main_1033@6:0>:int,var25:unit,0:int,var26:int), (
        var26 <> 1) |- bot
        
        P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,var27:unit,<<<fact_1031@8:2>@15:1>@25:0>:int),
        P[<fact_1031@8:0>](<fact_1031@8:0>:int),
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit),
        ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && (<fact_1031@8:0> <= 0)))
        |- P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,
                                                   <<fact_1031@8:2>@15:0>:unit,
                                                   <<<fact_1031@8:2>@15:1>@25:0>:int,
                                                   <<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int)
        
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,var28:unit),
        P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<<<fact_1031@8:2>@15:1>@25:0> = 0)
        |- P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,
                                            <<<fact_1031@8:2>@15:1>@25:0>:int)
        
        P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<fact_1031@8:0> <= 0)
        |- P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
        
        |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
      lower bounds:
        P[<fact_1031@8:0>](<fact_1031@8:0>:int) = true
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit) = (<fact_1031@8:0> <= 0)
        P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int) =
        ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0))
        P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int,<<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int) =
        ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0)))
      upper bounds:
        P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](var43:int,var44:unit,var45:int,var46:int) =
        ((var45 <> 0) || ((var46 = 1) || (var43 > 0)))
      begin GenHcSolver.classify_pids(10517)[4]
        output:
          [<<<<fact_1031@8:2>@15:1>@25:2>@36:0>]
      end GenHcSolver.classify_pids(10517)[4] (0.000000 sec.)
      lb:((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0)))
      nub:(not
             ((<<<fact_1031@8:2>@15:1>@25:0> <> 0) ||
              ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) || (<fact_1031@8:0> > 0))))
      begin ApronInterface.convex_hull_interpolate(10520)[4]
        lb:((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) &&
            ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0)))
        nub:(not
               ((<<<fact_1031@8:2>@15:1>@25:0> <> 0) ||
                ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) || (<fact_1031@8:0> > 0))))
        begin ExtFormula.Formula.case_analysis_boolean(10539)[5]
          ts: ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) &&
               ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(10539)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(10571)[5]
          ts: ((<<<fact_1031@8:2>@15:1>@25:0> = 0) &&
               ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> <> 1) && (<fact_1031@8:0> <= 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(10571)[5] (0.000000 sec.)
        lb':(((-1 + <<<<fact_1031@8:2>@15:1>@25:2>@36:0>) = 0) &&
             ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && ((-1 * <fact_1031@8:0>) >= 0)))
        nub':((<<<fact_1031@8:2>@15:1>@25:0> = 0) && ((-1 * <fact_1031@8:0>) >= 0))
        begin InterpProver.interpolate(10578)[5]
          begin InterpProver.interpolate_fresh(10579)[6]
            begin InterpProver.interpolate_log(10580)[7]
              input1: (((-1 + <<<<fact_1031@8:2>@15:1>@25:2>@36:0>) = 0) &&
                       ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && ((-1 * <fact_1031@8:0>) >= 0)))
              input2: ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && ((-1 * <fact_1031@8:0>) >= 0))
              begin InterpProver.interpolate_check(10581)[8]
                begin InterpProver.interpolate_simplify(10582)[9]
                  begin InterpProver.interpolate_quick(10661)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(10670)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(10671)[12]
                        begin CsisatInterface.interpolate_csisat_log(10672)[13]
                          input1: (0 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0 & v_sep_fact_1031_sep_8_sep_0 <= 0)
                          input2: (0 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0 & v_sep_fact_1031_sep_8_sep_0 <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(10673)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(10673)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(10672)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(10671)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(10670)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(10661)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(10582)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(10581)[8] (0.001999 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(10580)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(10579)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(10578)[5] (0.002999 sec.)
        begin InterpProver.interpolate(10686)[5]
          begin InterpProver.interpolate_fresh(10687)[6]
            begin InterpProver.interpolate_log(10688)[7]
              input1: (((-1 + <<<<fact_1031@8:2>@15:1>@25:2>@36:0>) = 0) &&
                       ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && ((-1 * <fact_1031@8:0>) >= 0)))
              input2: (not
                         ((<<<fact_1031@8:2>@15:1>@25:0> <> 0) ||
                          ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) || (<fact_1031@8:0> > 0))))
              begin InterpProver.interpolate_check(10689)[8]
                begin InterpProver.interpolate_simplify(10690)[9]
                  begin InterpProver.interpolate_quick(10781)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(10790)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(10791)[12]
                        begin CsisatInterface.interpolate_csisat_log(10792)[13]
                          input1: (0 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0 & 1 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0 & v_sep_fact_1031_sep_8_sep_0 <= 0)
                          input2: (not 1 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0 & 0 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0 & v_sep_fact_1031_sep_8_sep_0 <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(10793)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(10793)[14] (0.000000 sec.)
                          output: 1 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(10792)[13] (0.000000 sec.)
                        after simplification: 1 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0
                        after dnf conversion: ((1 = v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(10791)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(10790)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(10781)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(10690)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(10689)[8] (0.000000 sec.)
              output: (1 = <<<<fact_1031@8:2>@15:1>@25:2>@36:0>)
            end InterpProver.interpolate_log(10688)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(10687)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(10686)[5] (0.000000 sec.)
        output:
          P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int,<<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int) =
          (1 = <<<<fact_1031@8:2>@15:1>@25:2>@36:0>)
      end ApronInterface.convex_hull_interpolate(10520)[4] (0.003999 sec.)
      Horn clauses:
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,var28:unit),
        P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<<<fact_1031@8:2>@15:1>@25:0> = 0)
        |- P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,
                                            <<<fact_1031@8:2>@15:1>@25:0>:int)
        
        P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<fact_1031@8:0> <= 0)
        |- P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
        
        |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
      lower bounds:
        P[<fact_1031@8:0>](<fact_1031@8:0>:int) = true
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit) = (<fact_1031@8:0> <= 0)
        P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int) =
        ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0))
      upper bounds:
        P[<<<fact_1031@8:2>@15:1>@25:0>](var47:int,var48:unit,var49:int) = true
      begin GenHcSolver.classify_pids(11612)[4]
        output:
          [<<<fact_1031@8:2>@15:1>@25:0>]
      end GenHcSolver.classify_pids(11612)[4] (0.001000 sec.)
      lb:((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(11615)[4]
        lb:((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(11625)[5]
          ts: ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && (<fact_1031@8:0> <= 0))
          
        end ExtFormula.Formula.case_analysis_boolean(11625)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(11632)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(11632)[5] (0.000000 sec.)
        lb':((<<<fact_1031@8:2>@15:1>@25:0> = 0) && ((-1 * <fact_1031@8:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(11635)[5]
          begin InterpProver.interpolate_fresh(11636)[6]
            begin InterpProver.interpolate_log(11637)[7]
              input1: ((<<<fact_1031@8:2>@15:1>@25:0> = 0) && ((-1 * <fact_1031@8:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(11638)[8]
                begin InterpProver.interpolate_simplify(11639)[9]
                  begin InterpProver.interpolate_quick(11672)[10]
                    
                  end InterpProver.interpolate_quick(11672)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(11639)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(11638)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(11637)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(11636)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(11635)[5] (0.000999 sec.)
        output:
          P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(11615)[4] (0.000999 sec.)
      Horn clauses:
        P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<fact_1031@8:0> <= 0)
        |- P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
        
        |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
      lower bounds:
        P[<fact_1031@8:0>](<fact_1031@8:0>:int) = true
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit) = (<fact_1031@8:0> <= 0)
      upper bounds:
        P[<<fact_1031@8:2>@15:0>](var50:int,var51:unit) = true
      begin GenHcSolver.classify_pids(12060)[4]
        output:
          [<<fact_1031@8:2>@15:0>]
      end GenHcSolver.classify_pids(12060)[4] (0.000000 sec.)
      lb:(<fact_1031@8:0> <= 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(12063)[4]
        lb:(<fact_1031@8:0> <= 0)
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(12067)[5]
          ts: (<fact_1031@8:0> <= 0)
          
        end ExtFormula.Formula.case_analysis_boolean(12067)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(12073)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(12073)[5] (0.000000 sec.)
        lb':((-1 * <fact_1031@8:0>) >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(12076)[5]
          begin InterpProver.interpolate_fresh(12077)[6]
            begin InterpProver.interpolate_log(12078)[7]
              input1: ((-1 * <fact_1031@8:0>) >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(12079)[8]
                begin InterpProver.interpolate_simplify(12080)[9]
                  begin InterpProver.interpolate_quick(12096)[10]
                    
                  end InterpProver.interpolate_quick(12096)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(12080)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(12079)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(12078)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(12077)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(12076)[5] (0.001000 sec.)
        output:
          P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit) = true
      end ApronInterface.convex_hull_interpolate(12063)[4] (0.001000 sec.)
      Horn clauses:
        |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
      lower bounds:
        P[<fact_1031@8:0>](<fact_1031@8:0>:int) = true
      upper bounds:
        P[<fact_1031@8:0>](var52:int) = true
      begin GenHcSolver.classify_pids(12320)[4]
        output:
          [<fact_1031@8:0>]
      end GenHcSolver.classify_pids(12320)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(12323)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(12326)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(12326)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(12331)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(12331)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(12334)[5]
          begin InterpProver.interpolate_fresh(12335)[6]
            begin InterpProver.interpolate_log(12336)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(12337)[8]
                begin InterpProver.interpolate_simplify(12338)[9]
                  begin InterpProver.interpolate_quick(12352)[10]
                    
                  end InterpProver.interpolate_quick(12352)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(12338)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(12337)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(12336)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(12335)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(12334)[5] (0.000000 sec.)
        output:
          P[<fact_1031@8:0>](<fact_1031@8:0>:int) = true
      end ApronInterface.convex_hull_interpolate(12323)[4] (0.000000 sec.)
      begin HcSolver.check_validity(12409)[4]
        input:
          P[<h_1170@53:0>](<h_1170@53:0>:unit)|- bot
          
          P[<<fact_1031@8:2>@15:0>](<main_1033@6:0>:int,var25:unit),
          P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<main_1033@6:0>:int,var25:unit,0:int,var26:int), (
          var26 <> 1) |- P[<h_1170@53:0>](<h_1170@53:0>:unit)
          
          P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,var27:unit,<<<fact_1031@8:2>@15:1>@25:0>:int),
          P[<fact_1031@8:0>](<fact_1031@8:0>:int),
          P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit),
          ((<<<fact_1031@8:2>@15:1>@25:0> = 0) &&
           ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && (<fact_1031@8:0> <= 0)))
          |- P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,
                                                     <<fact_1031@8:2>@15:0>:unit,
                                                     <<<fact_1031@8:2>@15:1>@25:0>:int,
                                                     <<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int)
          
          P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,var28:unit),
          P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<<<fact_1031@8:2>@15:1>@25:0> = 0)
          |- P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,
                                              <<<fact_1031@8:2>@15:1>@25:0>:int)
          
          P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<fact_1031@8:0> <= 0)
          |- P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
          
          |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(12409)[4] (0.000999 sec.)
      solution:
        P[<h_1170@53:0>](<h_1170@53:0>:unit) = false
        P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int,<<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int) =
        (1 = <<<<fact_1031@8:2>@15:1>@25:2>@36:0>)
        P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,<<<fact_1031@8:2>@15:1>@25:0>:int) =
        true
        P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit) = true
        P[<fact_1031@8:0>](<fact_1031@8:0>:int) = true
    end GenHcSolver.solve(7537)[3] (0.035994 sec.)
    begin YhornInterface.solve(12764)[3]
      begin HcSolver.solve_ub(12765)[4]
        encoded:
          P[<h_1170@53:0>](<h_1170@53:0>:unit)|- bot
          
          P[<<fact_1031@8:2>@15:0>](<main_1033@6:0>:int,var25:unit),
          P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<main_1033@6:0>:int,var25:unit,0:int,var26:int), (
          var26 <> 1) |- P[<h_1170@53:0>](<h_1170@53:0>:unit)
          
          P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,var27:unit,<<<fact_1031@8:2>@15:1>@25:0>:int),
          P[<fact_1031@8:0>](<fact_1031@8:0>:int),
          P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit),
          ((<<<fact_1031@8:2>@15:1>@25:0> = 0) &&
           ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && (<fact_1031@8:0> <= 0)))
          |- P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,
                                                     <<fact_1031@8:2>@15:0>:unit,
                                                     <<<fact_1031@8:2>@15:1>@25:0>:int,
                                                     <<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int)
          
          P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,var28:unit),
          P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<<<fact_1031@8:2>@15:1>@25:0> = 0)
          |- P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,
                                              <<<fact_1031@8:2>@15:1>@25:0>:int)
          
          P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<fact_1031@8:0> <= 0)
          |- P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
          
          |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
        input to Yhorn:
          P[<h_1170@53:0>](<h_1170@53:0>:unit)|- bot
          
          P[<<fact_1031@8:2>@15:0>](<main_1033@6:0>:int,var25:unit),
          P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<main_1033@6:0>:int,var25:unit,var53:int,var26:int),
          ((var26 <> 1) && (var53 = 0)) |- P[<h_1170@53:0>](<h_1170@53:0>:unit)
          
          P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,var27:unit,<<<fact_1031@8:2>@15:1>@25:0>:int),
          P[<fact_1031@8:0>](<fact_1031@8:0>:int),
          P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit),
          ((<fact_1031@8:0> <= 0) &&
           ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && (<<<fact_1031@8:2>@15:1>@25:0> = 0)))
          |- P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,
                                                     <<fact_1031@8:2>@15:0>:unit,
                                                     <<<fact_1031@8:2>@15:1>@25:0>:int,
                                                     <<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int)
          
          P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,var28:unit),
          P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<<<fact_1031@8:2>@15:1>@25:0> = 0)
          |- P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,
                                              <<<fact_1031@8:2>@15:1>@25:0>:int)
          
          P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<fact_1031@8:0> <= 0)
          |- P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_h_1170_sep_53_sep_0($12)) -> 1=0.
(($13=0) & ($14-1<>0)) & (v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0($15,$16,$13,$14)) & (v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0($15,$16)) -> v_sep_h_1170_sep_53_sep_0($12).
(($17=0) & ($18-1=0) & ($19<=0)) & (v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0($19,$20)) & (v_sep_fact_1031_sep_8_sep_0($19)) & (v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0($19,$21,$17)) -> v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0($19,$20,$17,$18).
($17=0) & (v_sep_fact_1031_sep_8_sep_0($19)) & (v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0($19,$22)) -> v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0($19,$20,$17).
($19<=0) & (v_sep_fact_1031_sep_8_sep_0($19)) -> v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0($19,$20).
0=0 -> v_sep_fact_1031_sep_8_sep_0($19).


v_sep_fact_1031_sep_8_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0: X
v_sep_h_1170_sep_53_sep_0: X
............Split disj [20] 0.300953
Reconstrcut: 3 **)

v_sep_fact_1031_sep_8_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0: X
v_sep_h_1170_sep_53_sep_0: (X) | (X)
.......
v_sep_fact_1031_sep_8_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0: X
v_sep_h_1170_sep_53_sep_0: (X) | (X)
.......Split conj [22] 0.305953
(Reconstrcut: 8 **)
v_sep_fact_1031_sep_8_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0: (X) & (X)
v_sep_h_1170_sep_53_sep_0: (X) | (X)
.............
v_sep_fact_1031_sep_8_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0: (X) & (X)
v_sep_h_1170_sep_53_sep_0: (X) | (X)
.......
v_sep_fact_1031_sep_8_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0: (X) & (X)
v_sep_h_1170_sep_53_sep_0: (X) | (X)
..............
v_sep_fact_1031_sep_8_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0: X
v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0: (X) & (X)
v_sep_h_1170_sep_53_sep_0: (X) | (X)
................(0=0) & (v_sep_h_1170_sep_53_sep_0($12)) -> 1=0.
(($13=0) & ($14-1<>0)) & (v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0($15,$16,$13,$14)) & (v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0($15,$16)) -> v_sep_h_1170_sep_53_sep_0($12).
(($17=0) & ($18-1=0) & ($19<=0)) & (v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0($19,$20)) & (v_sep_fact_1031_sep_8_sep_0($19)) & (v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0($19,$21,$17)) -> v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_2_sep_36_sep_0($19,$20,$17,$18).
($17=0) & (v_sep_fact_1031_sep_8_sep_0($19)) & (v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0($19,$22)) -> v_sep_fact_1031_sep_8_sep_2_sep_15_sep_1_sep_25_sep_0($19,$20,$17).
($19<=0) & (v_sep_fact_1031_sep_8_sep_0($19)) -> v_sep_fact_1031_sep_8_sep_2_sep_15_sep_0($19,$20).
0=0 -> v_sep_fact_1031_sep_8_sep_0($19).

          |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
        solution:
          P[<fact_1031@8:0>]($40:int) = true
          P[<<fact_1031@8:2>@15:0>]($35:int,$37:unit) = true
          P[<<<fact_1031@8:2>@15:1>@25:0>]($43:int,$45:unit,$47:int) = true
          P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>]($26:int,$28:unit,$30:int,$32:int) = ($32 = 1)
          P[<h_1170@53:0>]($23:unit) = false
        
      end HcSolver.solve_ub(12765)[4] (0.029996 sec.)
      begin HcSolver.check_validity(12925)[4]
        input:
          P[<h_1170@53:0>](<h_1170@53:0>:unit)|- bot
          
          P[<<fact_1031@8:2>@15:0>](<main_1033@6:0>:int,var25:unit),
          P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<main_1033@6:0>:int,var25:unit,0:int,var26:int), (
          var26 <> 1) |- P[<h_1170@53:0>](<h_1170@53:0>:unit)
          
          P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,var27:unit,<<<fact_1031@8:2>@15:1>@25:0>:int),
          P[<fact_1031@8:0>](<fact_1031@8:0>:int),
          P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit),
          ((<<<fact_1031@8:2>@15:1>@25:0> = 0) &&
           ((<<<<fact_1031@8:2>@15:1>@25:2>@36:0> = 1) && (<fact_1031@8:0> <= 0)))
          |- P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>](<fact_1031@8:0>:int,
                                                     <<fact_1031@8:2>@15:0>:unit,
                                                     <<<fact_1031@8:2>@15:1>@25:0>:int,
                                                     <<<<fact_1031@8:2>@15:1>@25:2>@36:0>:int)
          
          P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,var28:unit),
          P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<<<fact_1031@8:2>@15:1>@25:0> = 0)
          |- P[<<<fact_1031@8:2>@15:1>@25:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit,
                                              <<<fact_1031@8:2>@15:1>@25:0>:int)
          
          P[<fact_1031@8:0>](<fact_1031@8:0>:int), (<fact_1031@8:0> <= 0)
          |- P[<<fact_1031@8:2>@15:0>](<fact_1031@8:0>:int,<<fact_1031@8:2>@15:0>:unit)
          
          |- P[<fact_1031@8:0>](<fact_1031@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(12925)[4] (0.001999 sec.)
      solution:
        P[<fact_1031@8:0>]($40:int) = true
        P[<<fact_1031@8:2>@15:0>]($35:int,$37:unit) = true
        P[<<<fact_1031@8:2>@15:1>@25:0>]($43:int,$45:unit,$47:int) = true
        P[<<<<fact_1031@8:2>@15:1>@25:2>@36:0>]($26:int,$28:unit,$30:int,$32:int) = ($32 = 1)
        P[<h_1170@53:0>]($23:unit) = false
    end YhornInterface.solve(12764)[3] (0.032995 sec.)
    
  end RefTypeInfer.infer_etrs(156)[2] (0.128980 sec.)
  refinement types:
    main_1673: X
    f_1683: v1:int -> X
    main_1033: v1:int ->
               (v2:int -> X) ->
               (v4:unit -> (v5:int -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> X) -> X) -> X) -> X
    fact_1031: v1:int ->
               (v2:int -> X) ->
               (v4:unit -> (v5:int -> (v6:int -> (v7:int -> X) -> X) -> (v10:{v10:int | (1 = v10)} -> X) -> X) -> X) ->
               X
    f_fact_1674: v1:int ->
                 (v2:int -> X) ->
                 (v4:unit -> (v5:int -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> X) -> X) -> X) -> X
    h_1436: v1:int ->
            (v2:unit -> (v3:int -> (v4:int -> (v5:int -> X) -> X) -> (v8:int -> X) -> X) -> X) ->
            (v12:int -> X) -> v14:unit -> (v15:int -> (v16:int -> (v17:int -> X) -> X) -> (v20:int -> X) -> X) -> X
    f_h_1680: v1:unit ->
              v2:int ->
              (v3:int -> (v4:int -> (v5:int -> X) -> X) -> (v8:int -> X) -> X) ->
              (v11:int -> X) ->
              (v13:unit -> (v14:int -> (v15:int -> (v16:int -> X) -> X) -> (v19:int -> X) -> X) -> X) -> X
    f_fact_1675: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    f_h_1682: v1:unit ->
              v2:int ->
              (v3:int -> (v4:int -> (v5:int -> X) -> X) -> (v8:int -> X) -> X) ->
              (v11:unit -> (v12:int -> (v13:int -> (v14:int -> X) -> X) -> (v17:int -> X) -> X) -> X) ->
              (v21:int -> X) -> v23:int -> X
    h_1170: v1:{v1:unit | false} -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X) -> X
    br_f_h_1686: var158:bool ->
                 var157:unit ->
                 var156:int ->
                 (var155:int -> (var154:int -> (var153:int -> X) -> X) -> (var150:int -> X) -> X) ->
                 (var147:unit -> (var146:int -> (var145:int -> (var144:int -> X) -> X) -> (var141:int -> X) -> X) -> X)
                 -> (var137:int -> X) -> var135:int -> X
    f_1684: var161:int -> var160:int -> X
    f_fact_1679: var166:int -> (var165:int -> X) -> var163:int -> X
    f_h_1676: var189:unit ->
              var188:int ->
              (var187:int -> (var186:int -> (var185:int -> X) -> X) -> (var182:int -> X) -> X) ->
              (var179:int -> X) ->
              (var177:unit -> (var176:int -> (var175:int -> (var174:int -> X) -> X) -> (var171:int -> X) -> X) -> X) ->
              X
    f_h_1677: var195:unit -> var194:int -> var193:int -> (var192:int -> X) -> X
    f_h_1678: var219:unit ->
              var218:int ->
              (var217:int -> (var216:int -> (var215:int -> X) -> X) -> (var212:int -> X) -> X) ->
              (var209:unit -> (var208:int -> (var207:int -> (var206:int -> X) -> X) -> (var203:int -> X) -> X) -> X) ->
              (var199:int -> X) -> var197:int -> X
    f_h_1681: var225:unit -> var224:int -> var223:int -> (var222:int -> X) -> X
    fail_1688: var229:bool -> (var228:unit -> X) -> X
    h_1249: var252:int ->
            (var251:unit -> (var250:int -> (var249:int -> (var248:int -> X) -> X) -> (var245:int -> X) -> X) -> X) ->
            (var241:int -> X) ->
            var239:unit -> (var238:int -> (var237:int -> (var236:int -> X) -> X) -> (var233:int -> X) -> X) -> X
    k_1685: var254:unit -> X
    k_main_u_1551: var261:unit -> var260:int -> var259:int -> (var258:int -> X) -> var256:unit -> X
  abstraction types:
    main_1673: X
    f_1683: v1:int -> X
    main_1033: v1:int ->
               (v2:int -> X) ->
               (v4:unit -> (v5:int -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> X) -> X) -> X) -> X
    fact_1031: v1:int ->
               (v2:int -> X) ->
               (v4:unit -> (v5:int -> (v6:int -> (v7:int -> X) -> X) -> (v10:int[v10 -> (
                                                                    1 = v10)] -> X) -> X) -> X) -> X
    f_fact_1674: v1:int ->
                 (v2:int -> X) ->
                 (v4:unit -> (v5:int -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> X) -> X) -> X) -> X
    h_1436: v1:int ->
            (v2:unit -> (v3:int -> (v4:int -> (v5:int -> X) -> X) -> (v8:int -> X) -> X) -> X) ->
            (v12:int -> X) -> v14:unit -> (v15:int -> (v16:int -> (v17:int -> X) -> X) -> (v20:int -> X) -> X) -> X
    f_h_1680: v1:unit ->
              v2:int ->
              (v3:int -> (v4:int -> (v5:int -> X) -> X) -> (v8:int -> X) -> X) ->
              (v11:int -> X) ->
              (v13:unit -> (v14:int -> (v15:int -> (v16:int -> X) -> X) -> (v19:int -> X) -> X) -> X) -> X
    f_fact_1675: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    f_h_1682: v1:unit ->
              v2:int ->
              (v3:int -> (v4:int -> (v5:int -> X) -> X) -> (v8:int -> X) -> X) ->
              (v11:unit -> (v12:int -> (v13:int -> (v14:int -> X) -> X) -> (v17:int -> X) -> X) -> X) ->
              (v21:int -> X) -> v23:int -> X
    h_1170: v1:unit -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X) -> X
    br_f_h_1686: var158:bool ->
                 var157:unit ->
                 var156:int ->
                 (var155:int -> (var154:int -> (var153:int -> X) -> X) -> (var150:int -> X) -> X) ->
                 (var147:unit -> (var146:int -> (var145:int -> (var144:int -> X) -> X) -> (var141:int -> X) -> X) -> X)
                 -> (var137:int -> X) -> var135:int -> X
    f_1684: var161:int -> var160:int -> X
    f_fact_1679: var166:int -> (var165:int -> X) -> var163:int -> X
    f_h_1676: var189:unit ->
              var188:int ->
              (var187:int -> (var186:int -> (var185:int -> X) -> X) -> (var182:int -> X) -> X) ->
              (var179:int -> X) ->
              (var177:unit -> (var176:int -> (var175:int -> (var174:int -> X) -> X) -> (var171:int -> X) -> X) -> X) ->
              X
    f_h_1677: var195:unit -> var194:int -> var193:int -> (var192:int -> X) -> X
    f_h_1678: var219:unit ->
              var218:int ->
              (var217:int -> (var216:int -> (var215:int -> X) -> X) -> (var212:int -> X) -> X) ->
              (var209:unit -> (var208:int -> (var207:int -> (var206:int -> X) -> X) -> (var203:int -> X) -> X) -> X) ->
              (var199:int -> X) -> var197:int -> X
    f_h_1681: var225:unit -> var224:int -> var223:int -> (var222:int -> X) -> X
    fail_1688: var229:bool -> (var228:unit -> X) -> X
    h_1249: var252:int ->
            (var251:unit -> (var250:int -> (var249:int -> (var248:int -> X) -> X) -> (var245:int -> X) -> X) -> X) ->
            (var241:int -> X) ->
            var239:unit -> (var238:int -> (var237:int -> (var236:int -> X) -> X) -> (var233:int -> X) -> X) -> X
    k_1685: var254:unit -> X
    k_main_u_1551: var261:unit -> var260:int -> var259:int -> (var258:int -> X) -> var256:unit -> X
  
end AbsTypeInfer.refine(155)[1] (0.139979 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1673
  main_1673 -> (rand_int f_1683)
  br_f_h_1686 b_1687 e1_1418 n_1034 e2_1418 h_1569 k_main_1401 x_1476 when b_1687 ->
      (k_main_u_1551 e1_1418 n_1034 x_1476 k_main_1401 ())
  br_f_h_1686 b_1687 e1_1418 n_1034 e2_1418 h_1569 k_main_1401 x_1476 when (
      not b_1687) -> (fail_1688 true (k_main_u_1551 e1_1418 n_1034 x_1476 k_main_1401))
  f_1683 x_1582 -> (main_1033 x_1582 (f_1684 x_1582) h_1170)
  f_1684 x_1582 x_1576 -> end
  f_fact_1674 n_1032 k_fact_1188 h_1377 when (n_1032 <= 0) -> (h_1377 () (f_fact_1675 n_1032))
  f_fact_1674 n_1032 k_fact_1188 h_1377 when (not (n_1032 <= 0)) ->
      (fact_1031 (n_1032 - 1) (f_fact_1679 n_1032 k_fact_1188) (h_1249 n_1032 h_1377 k_fact_1188))
  f_fact_1675 n_1032 path1_1076 path2_1076 k_fact_1216 when (path1_1076 = 0) -> (k_fact_1216 1)
  f_fact_1675 n_1032 path1_1076 path2_1076 k_fact_1216 when (not (path1_1076 = 0)) -> _|_
  f_fact_1679 n_1032 k_fact_1188 x_1246 -> (k_fact_1188 (n_1032 * x_1246))
  f_h_1676 e1_1241 n_1032 e2_1241 k_fact_1188 h_1370 ->
      (e2_1241 0 (f_h_1677 e1_1241 n_1032) (f_h_1678 e1_1241 n_1032 e2_1241 h_1370 k_fact_1188))
  f_h_1677 e1_1241 n_1032 x_1114 k_fact_1325 -> _|_
  f_h_1678 e1_1241 n_1032 e2_1241 h_1370 k_fact_1188 x_1306 when (x_1306 = 1) -> (k_fact_1188 1)
  f_h_1678 e1_1241 n_1032 e2_1241 h_1370 k_fact_1188 x_1306 when (not (x_1306 = 1)) -> (h_1370 e1_1241 e2_1241)
  f_h_1680 e1_1418 n_1034 e2_1418 k_main_1401 h_1569 ->
      (e2_1418 0 (f_h_1681 e1_1418 n_1034) (f_h_1682 e1_1418 n_1034 e2_1418 h_1569 k_main_1401))
  f_h_1681 e1_1418 n_1034 x_1145 k_main_1495 -> _|_
  f_h_1682 e1_1418 n_1034 e2_1418 h_1569 k_main_1401 x_1476 when (x_1476 = 1) ->
      (br_f_h_1686 (n_1034 < 0) e1_1418 n_1034 e2_1418 h_1569 k_main_1401 x_1476)
  f_h_1682 e1_1418 n_1034 e2_1418 h_1569 k_main_1401 x_1476 when (not (x_1476 = 1)) -> (h_1569 e1_1418 e2_1418)
  fact_1031 n_1032 k_fact_1188 h_1190 -> (f_fact_1674 n_1032 k_fact_1188 h_1190)
  fail_1688 b k -> {fail} => (k ())
  h_1170 e1_1610 e2_1610 -> {fail} => (k_1685 ())
  h_1249 n_1032 h_1377 k_fact_1188 e1_1241 e2_1241 -> (f_h_1676 e1_1241 n_1032 e2_1241 k_fact_1188 h_1377)
  h_1436 n_1034 h_1403 k_main_1401 e1_1418 e2_1418 -> (f_h_1680 e1_1418 n_1034 e2_1418 k_main_1401 h_1403)
  k_1685 u -> end
  k_main_u_1551 e1_1418 n_1034 x_1476 k_main_1401 x_1541 -> (k_main_1401 0)
  main_1033 n_1034 k_main_1401 h_1403 -> (fact_1031 n_1034 k_main_1401 (h_1436 n_1034 h_1403 k_main_1401))
Types:
  main_1673 : X
  fact_1031 : (int ->
               (int -> X) -> (unit -> (int -> (int -> (int -> X) -> X) -> (x_16:int[x_16 = 1] -> X) -> X) -> X) -> X)
  fail_1688 : (x_1:bool[x_1] -> (unit -> X) -> X)
  h_1170 : (unit -> (int -> (int -> (int -> X) -> X) -> (int -> X) -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1673 ... --> 
  f_1683 ... --> 
  main_1033 ... --> 
  fact_1031 ... --> 
  f_fact_1674 [1/2] ... --> 
  h_1436 ... --> 
  f_h_1680 ... --> 
  f_fact_1675 [1/2] ... --> 
  f_h_1682 [1/2] ... --> 
  br_f_h_1686 [2/2] ... --> 
  fail_1688 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... begin Cvc3Interface.solve(13525)[1]
  CVC3 input: PUSH;cnt40_v_sep_r_2804:INT;CHECKSAT (TRUE AND ((NOT (cnt40_v_sep_r_2804 < 0)) AND ((1 = 1) AND ((0 = 0) AND (TRUE AND (TRUE AND ((cnt40_v_sep_r_2804 <= 0) AND (TRUE AND (TRUE AND (TRUE AND TRUE))))))))));COUNTERMODEL;POP;
  CVC3 output: CVC> Satisfiable.
  CVC3 output: Current scope level is 9.
  CVC3 output: %Satisfiable  Variable Assignment: % 
  CVC3 output: ASSERT (cnt40_v_sep_r_2804 = 0);
  CVC3 output: CVC> 
  v_sep_r_2804 = 0
  end Cvc3Interface.solve(13525)[1] (0.005999 sec.)
DONE!

Unsafe!

Input for main:
  0
Error trace:
  main 0 ->
    fact 0 ->
      if true then ... ->
      if false then ... ->
      FAIL!

cycles: 1
total: 0.397 sec
  abst: 0.008 sec
  mc: 0.006 sec
  refine: 0.171 sec
    exparam: 0.022 sec
