MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi array_init.ml

parsed::
 let mk_array_1030 n_1031 i_1032 = if 0 <= i_1032 && i_1032 < n_1031 then
                                     0
                                   else
                                     -1 
 in
 let update_1033 i_1034 a_1035 x_1036 j_1037 = if j_1037 = i_1034 then
                                                 x_1036
                                               else
                                                 a_1035 j_1037 
 in
 let rec init_1038 i_1039 n_1040 a_1041 =
   if i_1039 >= n_1040 then
     a_1041
   else
     init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) 
 in
 let main_1042 n_1043 i_1044 =
   let x_1045 = init_1038 0 n_1043 (mk_array_1030 n_1043) 
   in
     if 0 <= i_1044 && i_1044 < n_1043 then
       if x_1045 i_1044 >= 1 then
         ()
       else
         {fail} ()
     else
       () 
 in
   ()

set_target::
 let mk_array_1030 n_1031 i_1032 = if 0 <= i_1032 && i_1032 < n_1031 then
                                     0
                                   else
                                     -1 
 in
 let update_1033 i_1034 a_1035 x_1036 j_1037 = if j_1037 = i_1034 then
                                                 x_1036
                                               else
                                                 a_1035 j_1037 
 in
 let rec init_1038 i_1039 n_1040 a_1041 =
   if i_1039 >= n_1040 then
     a_1041
   else
     init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) 
 in
 let main_1042 n_1043 i_1044 =
   let x_1045 = init_1038 0 n_1043 (mk_array_1030 n_1043) 
   in
     if 0 <= i_1044 && i_1044 < n_1043 then
       if x_1045 i_1044 >= 1 then
         ()
       else
         {fail} ()
     else
       () 
 in
 let main_1156 = let arg1_1154 = rand_int () 
                 in
                 let arg2_1155 = rand_int () 
                 in
                   main_1042 arg1_1154 arg2_1155 
 in
   ()

copy_poly::
 let mk_array_1030 (n_1031:int) (i_1032:int) = if 0 <= i_1032 && i_1032 < n_1031 then
                                                 0
                                               else
                                                 -1 
 in
 let update_1157 (i_1034:int) (a_1035:(int -> int)) (x_1036:int) (j_1037:int) =
   if j_1037 = i_1034 then
     x_1036
   else
     a_1035 j_1037 
 in
 let rec init_1038 (i_1039:int) (n_1040:int) (a_1041:(int -> int)) =
   if i_1039 >= n_1040 then
     a_1041
   else
     init_1038 (i_1039 + 1) n_1040 (update_1157 i_1039 a_1041 1) 
 in
 let main_1042 (n_1043:int) (i_1044:int) =
   let x_1045 = init_1038 0 n_1043 (mk_array_1030 n_1043) 
   in
     if 0 <= i_1044 && i_1044 < n_1043 then
       if x_1045 i_1044 >= 1 then
         ()
       else
         {fail} ()
     else
       () 
 in
 let main_1156 = let arg1_1154 = rand_int () 
                 in
                 let arg2_1155 = rand_int () 
                 in
                   main_1042 arg1_1154 arg2_1155 
 in
   ()

abst_list::
 let mk_array_1030 (n_1031:int) (i_1032:int) = if 0 <= i_1032 && i_1032 < n_1031 then
                                                 0
                                               else
                                                 -1 
 in
 let update_1157 (i_1034:int) (a_1035:(int -> int)) (x_1036:int) (j_1037:int) =
   if j_1037 = i_1034 then
     x_1036
   else
     a_1035 j_1037 
 in
 let rec init_1038 (i_1039:int) (n_1040:int) (a_1041:(int -> int)) =
   if i_1039 >= n_1040 then
     a_1041
   else
     init_1038 (i_1039 + 1) n_1040 (update_1157 i_1039 a_1041 1) 
 in
 let main_1042 (n_1043:int) (i_1044:int) =
   let x_1045 = init_1038 0 n_1043 (mk_array_1030 n_1043) 
   in
     if 0 <= i_1044 && i_1044 < n_1043 then
       if x_1045 i_1044 >= 1 then
         ()
       else
         {fail} ()
     else
       () 
 in
 let main_1156 = let arg1_1154 = rand_int () 
                 in
                 let arg2_1155 = rand_int () 
                 in
                   main_1042 arg1_1154 arg2_1155 
 in
   ()

CPS::
 let mk_array_1030 (n_1031:int) (i_1032:int) (k_mk_array_1187:(int -> X)) =
   let k_mk_array_1190 (b_1195:bool) = if b_1195 then
                                         k_mk_array_1187 0
                                       else
                                         k_mk_array_1187 -1 
   in
     if 0 <= i_1032 then
       k_mk_array_1190 (i_1032 < n_1031)
     else
       k_mk_array_1190 false 
 in
 let update_1157
   (i_1034:int) (a_1035:(int -> ((int -> X) -> X))) (x_1036:int) (j_1037:int) (k_update_1230:(
   int -> X)) = if j_1037 = i_1034 then
                  k_update_1230 x_1036
                else
                  a_1035 j_1037 k_update_1230 
 in
 let rec init_1038
   (i_1039:int) (n_1040:int) (a_1041:(int -> ((int -> X) -> X))) (k_init_1288:(
   (int -> ((int -> X) -> X)) -> X)) =
   if i_1039 >= n_1040 then
     k_init_1288 a_1041
   else
     init_1038 (i_1039 + 1) n_1040 (update_1157 i_1039 a_1041 1) k_init_1288 
 in
 let main_1042 (n_1043:int) (i_1044:int) (k_main_1357:(unit -> X)) =
   init_1038 0 n_1043 (mk_array_1030 n_1043)
     (fun x_1363 ->
        (let k_main_1406 (b_1436:bool) =
           if b_1436 then
             x_1363 i_1044 (fun x_1410 -> (if x_1410 >= 1 then
                                             k_main_1357 ()
                                           else
                                             {|fail|} () k_main_1357))
           else
             k_main_1357 () 
         in
           if 0 <= i_1044 then
             k_main_1406 (i_1044 < n_1043)
           else
             k_main_1406 false)) 
 in
   rand_int_cps () (fun x_1442 -> rand_int_cps () (fun x_1455 -> main_1042 x_1442 x_1455 (fun x_1439 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1484
  main_1484 -> (rand_int f_1487)
  f_1487 x_1442 -> (rand_int (f_1488 x_1442))
  f_1488 x_1442 x_1455 -> (main_1042 x_1442 x_1455 (f_1489 x_1442 x_1455))
  f_1489 x_1442 x_1455 x_1439 -> end
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (x_1410 >= 1) -> (k_main_1357 ())
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (not (x_1410 >= 1)) -> (fail_1490 true k_main_1357)
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (0 <= i_1044) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 (i_1044 < n_1043))
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (not (0 <= i_1044)) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 false)
  fail_1490 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (i_1039 >= n_1040) -> (k_init_1288 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1157 i_1039 a_1041 1) k_init_1288)
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when b_1436 ->
      (x_1363 i_1044 (f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357))
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when (not b_1436) -> (k_main_1357 ())
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when b_1195 -> (k_mk_array_1187 0)
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when (not b_1195) -> (k_mk_array_1187 -1)
  main_1042 n_1043 i_1044 k_main_1357 ->
      (init_1038 0 n_1043 (mk_array_1030 n_1043) (f_main_1485 i_1044 n_1043 k_main_1357))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (0 <= i_1032) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 (i_1032 < n_1031))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (not (0 <= i_1032)) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 false)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (j_1037 = i_1034) -> (k_update_1230 x_1036)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (not (j_1037 = i_1034)) -> (a_1035 j_1037 k_update_1230)
Types:
  main_1484 : X
  fail_1490 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1484 ... --> 
  f_1487 ... --> 
  f_1488 ... --> 
  main_1042 ... --> 
  init_1038 [1/2] ... --> 
  f_main_1485 [1/2] ... --> 
  k_main_1406 [1/2] ... --> 
  mk_array_1030 [1/2] ... --> 
  k_mk_array_1190 [1/2] ... --> 
  f_k_main_1486 [2/2] ... --> 
  fail_1490 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(208)[1]
  program:
    main_1484  | true = ((Random.int 0) f_1487)
    f_1487 x_1442 | true = ((Random.int 0) (f_1488 x_1442))
    f_1488 x_1442 x_1455 | true = (main_1042 x_1442
                                             x_1455
                                             (f_1489 x_1442
                                                     x_1455))
    f_1489 x_1442 x_1455 x_1439 | true = end
    f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 | (x_1410 >= 1) = (
    k_main_1357 ())
    f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 | (not (x_1410 >= 1)) = (
    fail_1490 true
              k_main_1357)
    f_main_1485 i_1044 n_1043 k_main_1357 x_1363 | (0 <= i_1044) = (k_main_1406
                                                                    i_1044
                                                                    n_1043
                                                                    k_main_1357
                                                                    x_1363
                                                                    (
                                                                    i_1044 < n_1043))
    f_main_1485 i_1044 n_1043 k_main_1357 x_1363 | (not (0 <= i_1044)) = (
    k_main_1406 i_1044
                n_1043
                k_main_1357
                x_1363
                false)
    fail_1490 b k | true = (fail ())
    init_1038 i_1039 n_1040 a_1041 k_init_1288 | (i_1039 >= n_1040) = (
    k_init_1288 a_1041)
    init_1038 i_1039 n_1040 a_1041 k_init_1288 | (not (i_1039 >= n_1040)) = (
    init_1038 (i_1039 + 1)
              n_1040
              (update_1157 i_1039
                           a_1041
                           1)
              k_init_1288)
    k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 | b_1436 = (x_1363
                                                                    i_1044
                                                                    (
                                                                    f_k_main_1486 b_1436
                                                                    i_1044
                                                                    n_1043
                                                                    k_main_1357))
    k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 | (not b_1436) = (
    k_main_1357 ())
    k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 | b_1195 = (
    k_mk_array_1187 0)
    k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 | (not b_1195) = (
    k_mk_array_1187 -1)
    main_1042 n_1043 i_1044 k_main_1357 | true = (init_1038
                                                    0
                                                    n_1043
                                                    (mk_array_1030 n_1043)
                                                    (f_main_1485 i_1044
                                                                 n_1043
                                                                 k_main_1357))
    mk_array_1030 n_1031 i_1032 k_mk_array_1187 | (0 <= i_1032) = (k_mk_array_1190
                                                                    i_1032
                                                                    n_1031
                                                                    k_mk_array_1187
                                                                    (
                                                                    i_1032 < n_1031))
    mk_array_1030 n_1031 i_1032 k_mk_array_1187 | (not (0 <= i_1032)) = (
    k_mk_array_1190 i_1032
                    n_1031
                    k_mk_array_1187
                    false)
    update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 | (j_1037 = i_1034) = (
    k_update_1230 x_1036)
    update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 | (not (j_1037 = i_1034)) = (
    a_1035 j_1037
           k_update_1230)
    main_1484:X
    f_1487:int -> X
    f_1488:int -> int -> X
    f_1489:int -> int -> unit -> X
    f_k_main_1486:bool -> int -> int -> (unit -> X) -> int -> X
    f_main_1485:int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> X
    fail_1490:bool -> (unit -> X) -> X
    init_1038:int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> X
    k_main_1406:int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> bool -> X
    k_mk_array_1190:int -> int -> (int -> X) -> bool -> X
    main_1042:int -> int -> (unit -> X) -> X
    mk_array_1030:int -> int -> (int -> X) -> X
    update_1157:int -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
  inlined functions: f_1487,f_1488,f_1489,f_k_main_1486,f_main_1485,k_main_1406,k_mk_array_1190,main_1042,mk_array_1030,update_1157
  counterexample: 0:0:0:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1487@4:0> = var2)
     [true.nop((<f_1488@7:0> = <f_1487@4:0>) && (<f_1488@7:1> = var3))
      [true.((<main_1042@9:0> = <f_1488@7:0>) && (<main_1042@9:1> = <f_1488@7:1>))
       [true.((<init_1038@11:0> = 0) && (<init_1038@11:1> = <main_1042@9:0>))
        [(<init_1038@11:0> >= <init_1038@11:1>).true
         [true.((<f_main_1485@16:0> = <main_1042@9:1>) && (<f_main_1485@16:1> = <main_1042@9:0>))
          [(0 <= <f_main_1485@16:0>).
           ((<k_main_1406@19:0> = <f_main_1485@16:0>) &&
            ((<k_main_1406@19:1> = <f_main_1485@16:1>) &&
             (<k_main_1406@19:4> = (<f_main_1485@16:0> < <f_main_1485@16:1>))))
           [<k_main_1406@19:4>.(<<k_main_1406@19:3>@22:0> = <k_main_1406@19:0>)
            [true.(<<f_main_1485@16:3>@24:0> = <<k_main_1406@19:3>@22:0>)
             [true.(<<<init_1038@11:3>@14:0>@26:0> = <<f_main_1485@16:3>@24:0>)
              [true.(<<init_1038@11:2>@28:0> = <<<init_1038@11:3>@14:0>@26:0>)
               [true.((<mk_array_1030@30:0> = <main_1042@9:0>) && (<mk_array_1030@30:1> = <<init_1038@11:2>@28:0>))
                [(0 <= <mk_array_1030@30:1>).
                 ((<k_mk_array_1190@33:0> = <mk_array_1030@30:1>) &&
                  ((<k_mk_array_1190@33:1> = <mk_array_1030@30:0>) &&
                   (<k_mk_array_1190@33:3> = (<mk_array_1030@30:1> < <mk_array_1030@30:0>))))
                 [<k_mk_array_1190@33:3>.(<<k_mk_array_1190@33:2>@36:0> = 0)
                  [true.(<<mk_array_1030@30:2>@38:0> = <<k_mk_array_1190@33:2>@36:0>)
                   [true.(<<<init_1038@11:2>@28:1>@40:0> = <<mk_array_1030@30:2>@38:0>)
                    [true.(<<<<init_1038@11:3>@14:0>@26:1>@42:0> = <<<init_1038@11:2>@28:1>@40:0>)
                     [true.(<<<f_main_1485@16:3>@24:1>@44:0> = <<<<init_1038@11:3>@14:0>@26:1>@42:0>)
                      [true.(<<<k_main_1406@19:3>@22:1>@46:0> = <<<f_main_1485@16:3>@24:1>@44:0>)
                       [true.
                        ((<f_k_main_1486@48:0> = <k_main_1406@19:4>) &&
                         ((<f_k_main_1486@48:1> = <k_main_1406@19:0>) &&
                          ((<f_k_main_1486@48:2> = <k_main_1406@19:1>) &&
                           (<f_k_main_1486@48:4> = <<<k_main_1406@19:3>@22:1>@46:0>))))
                        [(not (<f_k_main_1486@48:4> >= 1)).(<fail_1490@51:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(209)[2]
    horn clauses:
      P[<fail_1490@51:0>](<fail_1490@51:0>:bool)|- bot
      
      P[<f_k_main_1486@48:4>](<f_k_main_1486@48:0>:bool,<f_k_main_1486@48:1>:int,<f_k_main_1486@48:2>:int,<f_k_main_1486@48:4>:int),
      ((<f_k_main_1486@48:4> < 1) && <fail_1490@51:0>) |- P[<fail_1490@51:0>](
      <fail_1490@51:0>:bool)
      
      P[<k_main_1406@19:4>](<f_k_main_1486@48:1>:int,<f_k_main_1486@48:2>:int,<f_k_main_1486@48:0>:bool),
      P[<<<k_main_1406@19:3>@22:1>@46:0>](<f_k_main_1486@48:1>:int,<f_k_main_1486@48:2>:int,<f_k_main_1486@48:1>:int,<f_k_main_1486@48:4>:int),
      <f_k_main_1486@48:0>
      |- P[<f_k_main_1486@48:4>](<f_k_main_1486@48:0>:bool,<f_k_main_1486@48:1>:int,
                                 <f_k_main_1486@48:2>:int,<f_k_main_1486@48:4>:int)
      
      P[<f_main_1485@16:1>](<k_main_1406@19:0>:int,<k_main_1406@19:1>:int),
      P[<<<f_main_1485@16:3>@24:1>@44:0>](<k_main_1406@19:0>:int,<k_main_1406@19:1>:int,<<k_main_1406@19:3>@22:0>:int,<<<k_main_1406@19:3>@22:1>@46:0>:int),
      (0 <= <k_main_1406@19:0>)
      |- P[<<<k_main_1406@19:3>@22:1>@46:0>](<k_main_1406@19:0>:int,<k_main_1406@19:1>:int,
                                             <<k_main_1406@19:3>@22:0>:int,
                                             <<<k_main_1406@19:3>@22:1>@46:0>:int)
      
      P[<main_1042@9:1>](<f_main_1485@16:1>:int,<f_main_1485@16:0>:int),
      P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](0:int,<f_main_1485@16:1>:int,<<f_main_1485@16:3>@24:0>:int,<<<f_main_1485@16:3>@24:1>@44:0>:int),
      P[<f_main_1485@16:1>](<f_main_1485@16:0>:int,<f_main_1485@16:1>:int)|- P[<<<f_main_1485@16:3>@24:1>@44:0>](
      <f_main_1485@16:0>:int,<f_main_1485@16:1>:int,<<f_main_1485@16:3>@24:0>:int,
      <<<f_main_1485@16:3>@24:1>@44:0>:int)
      
      P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
      P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int),
      (<init_1038@11:0> >= <init_1038@11:1>)
      |- P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,
                                                  <init_1038@11:1>:int,
                                                  <<<init_1038@11:3>@14:0>@26:0>:int,
                                                  <<<<init_1038@11:3>@14:0>@26:1>@42:0>:int)
      
      P[<main_1042@9:1>](<init_1038@11:1>:int,<f_main_1485@16:0>:int),
      P[<<mk_array_1030@30:2>@38:0>](<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int,<<<init_1038@11:2>@28:1>@40:0>:int),
      P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int), (
      <init_1038@11:0> = 0)
      |- P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                           <<init_1038@11:2>@28:0>:int,
                                           <<<init_1038@11:2>@28:1>@40:0>:int)
      
      P[<mk_array_1030@30:1>](<mk_array_1030@30:0>:int,<mk_array_1030@30:1>:int),
      P[<<k_mk_array_1190@33:2>@36:0>](<mk_array_1030@30:1>:int,<mk_array_1030@30:0>:int,<<mk_array_1030@30:2>@38:0>:int),
      (0 <= <mk_array_1030@30:1>)
      |- P[<<mk_array_1030@30:2>@38:0>](<mk_array_1030@30:0>:int,<mk_array_1030@30:1>:int,
                                        <<mk_array_1030@30:2>@38:0>:int)
      
      P[<k_mk_array_1190@33:3>](<k_mk_array_1190@33:0>:int,<k_mk_array_1190@33:1>:int,true:bool),
      (<<k_mk_array_1190@33:2>@36:0> = 0)
      |- P[<<k_mk_array_1190@33:2>@36:0>](<k_mk_array_1190@33:0>:int,
                                          <k_mk_array_1190@33:1>:int,
                                          <<k_mk_array_1190@33:2>@36:0>:int)
      
      P[<mk_array_1030@30:1>](<k_mk_array_1190@33:1>:int,<k_mk_array_1190@33:0>:int),
      ((0 <= <k_mk_array_1190@33:0>) && (<k_mk_array_1190@33:3> = (<k_mk_array_1190@33:0> < <k_mk_array_1190@33:1>)))
      |- P[<k_mk_array_1190@33:3>](<k_mk_array_1190@33:0>:int,<k_mk_array_1190@33:1>:int,
                                   <k_mk_array_1190@33:3>:bool)
      
      P[<main_1042@9:1>](<mk_array_1030@30:0>:int,<f_main_1485@16:0>:int),
      P[<<init_1038@11:2>@28:0>](0:int,<mk_array_1030@30:0>:int,<mk_array_1030@30:1>:int)|- P[<mk_array_1030@30:1>](
      <mk_array_1030@30:0>:int,<mk_array_1030@30:1>:int)
      
      P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
      P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
      (<init_1038@11:0> >= <init_1038@11:1>)
      |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                    <<init_1038@11:2>@28:0>:int)
      
      P[<main_1042@9:1>](<init_1038@11:1>:int,<f_main_1485@16:0>:int),
      P[<<f_main_1485@16:3>@24:0>](<f_main_1485@16:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int),
      P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int), (
      <init_1038@11:0> = 0)
      |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                           <<<init_1038@11:3>@14:0>@26:0>:int)
      
      P[<f_main_1485@16:1>](<f_main_1485@16:0>:int,<f_main_1485@16:1>:int),
      P[<<k_main_1406@19:3>@22:0>](<f_main_1485@16:0>:int,<f_main_1485@16:1>:int,<<f_main_1485@16:3>@24:0>:int),
      (0 <= <f_main_1485@16:0>)
      |- P[<<f_main_1485@16:3>@24:0>](<f_main_1485@16:0>:int,<f_main_1485@16:1>:int,
                                      <<f_main_1485@16:3>@24:0>:int)
      
      P[<k_main_1406@19:4>](<k_main_1406@19:0>:int,<k_main_1406@19:1>:int,true:bool),
      (<<k_main_1406@19:3>@22:0> = <k_main_1406@19:0>)
      |- P[<<k_main_1406@19:3>@22:0>](<k_main_1406@19:0>:int,<k_main_1406@19:1>:int,
                                      <<k_main_1406@19:3>@22:0>:int)
      
      P[<f_main_1485@16:1>](<k_main_1406@19:0>:int,<k_main_1406@19:1>:int),
      ((0 <= <k_main_1406@19:0>) && (<k_main_1406@19:4> = (<k_main_1406@19:0> < <k_main_1406@19:1>)))
      |- P[<k_main_1406@19:4>](<k_main_1406@19:0>:int,<k_main_1406@19:1>:int,
                               <k_main_1406@19:4>:bool)
      
      P[<main_1042@9:1>](<f_main_1485@16:1>:int,<f_main_1485@16:0>:int)|- P[<f_main_1485@16:1>](
      <f_main_1485@16:0>:int,<f_main_1485@16:1>:int)
      
      P[<main_1042@9:1>](<init_1038@11:1>:int,<main_1042@9:1>:int), (
      <init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                   <init_1038@11:1>:int)
      
      P[<f_1488@7:1>](<main_1042@9:0>:int,<main_1042@9:1>:int)|- P[<main_1042@9:1>](
      <main_1042@9:0>:int,<main_1042@9:1>:int)
      
      P[<f_1487@4:0>](<f_1488@7:0>:int)|- P[<f_1488@7:1>](<f_1488@7:0>:int,
                                                          <f_1488@7:1>:int)
      
      |- P[<f_1487@4:0>](<f_1487@4:0>:int)
    call trees:
      <main_1484@1>
        <f_1487@4>
          <f_1488@7>
            <main_1042@9>
              <init_1038@11>
              </<init_1038@11:3>@14>
              <f_main_1485@16>
                <k_main_1406@19>
                </<k_main_1406@19:3>@22>
              </<f_main_1485@16:3>@24>
              <<<init_1038@11:3>@14:0>@26>
              </<init_1038@11:2>@28>
              <mk_array_1030@30>
                <k_mk_array_1190@33>
                </<k_mk_array_1190@33:2>@36>
              </<mk_array_1030@30:2>@38>
              <<<init_1038@11:2>@28:1>@40>
              </<<<init_1038@11:3>@14:0>@26:1>@42>
              <<<f_main_1485@16:3>@24:1>@44>
                <<<k_main_1406@19:3>@22:1>@46>
                  <f_k_main_1486@48>
                    <fail_1490@51>
    inlined horn clauses:
      P[<fail_1490@51:0>](<fail_1490@51:0>:bool)|- bot
      
      P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](0:int,<f_k_main_1486@48:2>:int,<f_k_main_1486@48:1>:int,<f_k_main_1486@48:4>:int),
      ((<f_k_main_1486@48:1> < <f_k_main_1486@48:2>) &&
       ((0 <= <f_k_main_1486@48:1>) && ((<f_k_main_1486@48:4> < 1) && <fail_1490@51:0>)))
      |- P[<fail_1490@51:0>](<fail_1490@51:0>:bool)
      
      P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
      P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int),
      (<init_1038@11:0> >= <init_1038@11:1>)
      |- P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,
                                                  <init_1038@11:1>:int,
                                                  <<<init_1038@11:3>@14:0>@26:0>:int,
                                                  <<<<init_1038@11:3>@14:0>@26:1>@42:0>:int)
      
      P[<<init_1038@11:2>@28:0>](0:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
      P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
      ((<init_1038@11:0> = 0) &&
       ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
        ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
      |- P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                           <<init_1038@11:2>@28:0>:int,
                                           <<<init_1038@11:2>@28:1>@40:0>:int)
      
      P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
      P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
      (<init_1038@11:0> >= <init_1038@11:1>)
      |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                    <<init_1038@11:2>@28:0>:int)
      
      P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
      ((<init_1038@11:0> = 0) &&
       ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
      |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                           <<<init_1038@11:3>@14:0>@26:0>:int)
      
       (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                     <init_1038@11:1>:int)
    begin ParamSubstInfer.infer(3941)[3]
      
    end ParamSubstInfer.infer(3941)[3] (0.031996 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(3943)[3]
      
    end RefTypeInfer.elim_coeffs(3943)[3] (0.003999 sec.)
    begin GenHcSolver.solve(4507)[3]
      Horn clauses:
        P[<fail_1490@51:0>](<fail_1490@51:0>:bool)|- bot
        
        P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](0:int,<f_k_main_1486@48:2>:int,<f_k_main_1486@48:1>:int,<f_k_main_1486@48:4>:int),
        ((<f_k_main_1486@48:1> < <f_k_main_1486@48:2>) &&
         ((0 <= <f_k_main_1486@48:1>) && ((<f_k_main_1486@48:4> < 1) && <fail_1490@51:0>)))
        |- P[<fail_1490@51:0>](<fail_1490@51:0>:bool)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>)
        |- P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,
                                                    <init_1038@11:1>:int,
                                                    <<<init_1038@11:3>@14:0>@26:0>:int,
                                                    <<<<init_1038@11:3>@14:0>@26:1>@42:0>:int)
        
        P[<<init_1038@11:2>@28:0>](0:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
          ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        |- P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<init_1038@11:2>@28:0>:int,
                                             <<<init_1038@11:2>@28:1>@40:0>:int)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>)
        |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                      <<init_1038@11:2>@28:0>:int)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<<init_1038@11:3>@14:0>@26:0>:int)
        
         (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                       <init_1038@11:1>:int)
      lower bounds:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> = 0)
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((<init_1038@11:0> >= <init_1038@11:1>) &&
          ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int,<<<init_1038@11:2>@28:1>@40:0>:int) =
        ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
         ((<init_1038@11:0> = 0) &&
          ((0 >= <init_1038@11:1>) && ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)))))
        P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int) =
        ((<<<<init_1038@11:3>@14:0>@26:1>@42:0> = 0) &&
         ((<init_1038@11:0> = 0) &&
          ((<init_1038@11:0> >= <init_1038@11:1>) &&
           ((0 >= <init_1038@11:1>) &&
            ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>))))))
        P[<fail_1490@51:0>](<fail_1490@51:0>:bool) = false
      upper bounds:
        P[<fail_1490@51:0>](var5:bool) = true
      begin GenHcSolver.classify_pids(9580)[4]
        output:
          [<fail_1490@51:0>]
      end GenHcSolver.classify_pids(9580)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(9583)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(9584)[5]
          begin InterpProver.interpolate_fresh(9585)[6]
            begin InterpProver.interpolate_log(9586)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(9587)[8]
                begin InterpProver.interpolate_simplify(9588)[9]
                  begin InterpProver.interpolate_quick(9601)[10]
                    
                  end InterpProver.interpolate_quick(9601)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(9605)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(9605)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(9588)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(9587)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(9586)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(9585)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(9584)[5] (0.000000 sec.)
        output:
          P[<fail_1490@51:0>](<fail_1490@51:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(9583)[4] (0.000000 sec.)
      Horn clauses:
        P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](0:int,<f_k_main_1486@48:2>:int,<f_k_main_1486@48:1>:int,<f_k_main_1486@48:4>:int),
        ((<f_k_main_1486@48:4> < 1) && ((0 <= <f_k_main_1486@48:1>) && (<f_k_main_1486@48:1> < <f_k_main_1486@48:2>)))
        |- bot
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>)
        |- P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,
                                                    <init_1038@11:1>:int,
                                                    <<<init_1038@11:3>@14:0>@26:0>:int,
                                                    <<<<init_1038@11:3>@14:0>@26:1>@42:0>:int)
        
        P[<<init_1038@11:2>@28:0>](0:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
          ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        |- P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<init_1038@11:2>@28:0>:int,
                                             <<<init_1038@11:2>@28:1>@40:0>:int)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>)
        |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                      <<init_1038@11:2>@28:0>:int)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<<init_1038@11:3>@14:0>@26:0>:int)
        
         (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                       <init_1038@11:1>:int)
      lower bounds:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> = 0)
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((<init_1038@11:0> >= <init_1038@11:1>) &&
          ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int,<<<init_1038@11:2>@28:1>@40:0>:int) =
        ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
         ((<init_1038@11:0> = 0) &&
          ((0 >= <init_1038@11:1>) && ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)))))
        P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int) =
        ((<<<<init_1038@11:3>@14:0>@26:1>@42:0> = 0) &&
         ((<init_1038@11:0> = 0) &&
          ((<init_1038@11:0> >= <init_1038@11:1>) &&
           ((0 >= <init_1038@11:1>) &&
            ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>))))))
      upper bounds:
        P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](var6:int,var7:int,var8:int,var9:int) =
        ((var6 <> 0) || ((var9 >= 1) || ((0 > var8) || (var8 >= var7))))
      begin GenHcSolver.classify_pids(15476)[4]
        output:
          [<<<<init_1038@11:3>@14:0>@26:1>@42:0>]
      end GenHcSolver.classify_pids(15476)[4] (0.000000 sec.)
      lb:((<<<<init_1038@11:3>@14:0>@26:1>@42:0> = 0) &&
          ((<init_1038@11:0> = 0) &&
           ((<init_1038@11:0> >= <init_1038@11:1>) &&
            ((0 >= <init_1038@11:1>) &&
             ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>))))))
      nub:(not
             ((<init_1038@11:0> <> 0) ||
              ((<<<<init_1038@11:3>@14:0>@26:1>@42:0> >= 1) ||
               ((0 > <<<init_1038@11:3>@14:0>@26:0>) || (<<<init_1038@11:3>@14:0>@26:0> >= <init_1038@11:1>)))))
      begin ApronInterface.convex_hull_interpolate(15479)[4]
        lb:((<<<<init_1038@11:3>@14:0>@26:1>@42:0> = 0) &&
            ((<init_1038@11:0> = 0) &&
             ((<init_1038@11:0> >= <init_1038@11:1>) &&
              ((0 >= <init_1038@11:1>) &&
               ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>))))))
        nub:(not
               ((<init_1038@11:0> <> 0) ||
                ((<<<<init_1038@11:3>@14:0>@26:1>@42:0> >= 1) ||
                 ((0 > <<<init_1038@11:3>@14:0>@26:0>) || (<<<init_1038@11:3>@14:0>@26:0> >= <init_1038@11:1>)))))
        lb':((<<<<init_1038@11:3>@14:0>@26:1>@42:0> = 0) &&
             ((<init_1038@11:0> = 0) &&
              ((<init_1038@11:0> >= <init_1038@11:1>) &&
               ((0 >= <init_1038@11:1>) &&
                ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>))))))
        nub':(not
                ((<init_1038@11:0> <> 0) ||
                 ((<<<<init_1038@11:3>@14:0>@26:1>@42:0> >= 1) ||
                  ((0 > <<<init_1038@11:3>@14:0>@26:0>) || (<<<init_1038@11:3>@14:0>@26:0> >= <init_1038@11:1>)))))
        begin InterpProver.interpolate(15480)[5]
          begin InterpProver.interpolate_fresh(15481)[6]
            begin InterpProver.interpolate_log(15482)[7]
              input1: ((<<<<init_1038@11:3>@14:0>@26:1>@42:0> = 0) &&
                       ((<init_1038@11:0> = 0) &&
                        ((<init_1038@11:0> >= <init_1038@11:1>) &&
                         ((0 >= <init_1038@11:1>) &&
                          ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>))))))
              input2: (not
                         ((<init_1038@11:0> <> 0) ||
                          ((<<<<init_1038@11:3>@14:0>@26:1>@42:0> >= 1) ||
                           ((0 > <<<init_1038@11:3>@14:0>@26:0>) ||
                            (<<<init_1038@11:3>@14:0>@26:0> >= <init_1038@11:1>)))))
              begin InterpProver.interpolate_check(15483)[8]
                begin InterpProver.interpolate_simplify(15484)[9]
                  begin InterpProver.interpolate_quick(15747)[10]
                    
                  end InterpProver.interpolate_quick(15747)[10] (0.001000 sec.)
                  begin minimizing # of disjunctions(15754)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(15754)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(15484)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(15483)[8] (0.001999 sec.)
              output: false
            end InterpProver.interpolate_log(15482)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(15481)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(15480)[5] (0.001999 sec.)
        output:
          P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int) =
          false
      end ApronInterface.convex_hull_interpolate(15479)[4] (0.001999 sec.)
      Horn clauses:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>) |- bot
        
        P[<<init_1038@11:2>@28:0>](0:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
          ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        |- P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<init_1038@11:2>@28:0>:int,
                                             <<<init_1038@11:2>@28:1>@40:0>:int)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>)
        |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                      <<init_1038@11:2>@28:0>:int)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<<init_1038@11:3>@14:0>@26:0>:int)
        
         (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                       <init_1038@11:1>:int)
      lower bounds:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> = 0)
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((<init_1038@11:0> >= <init_1038@11:1>) &&
          ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int,<<<init_1038@11:2>@28:1>@40:0>:int) =
        ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
         ((<init_1038@11:0> = 0) &&
          ((0 >= <init_1038@11:1>) && ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)))))
      upper bounds:
        P[<<<init_1038@11:2>@28:1>@40:0>](var10:int,var11:int,var12:int,var13:int) = ((var10 <> 0) || (0 < var11))
      begin GenHcSolver.classify_pids(19614)[4]
        output:
          [<<<init_1038@11:2>@28:1>@40:0>]
      end GenHcSolver.classify_pids(19614)[4] (0.000000 sec.)
      lb:((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
          ((<init_1038@11:0> = 0) &&
           ((0 >= <init_1038@11:1>) && ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)))))
      nub:(not ((<init_1038@11:0> <> 0) || (0 < <init_1038@11:1>)))
      begin ApronInterface.convex_hull_interpolate(19617)[4]
        lb:((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
            ((<init_1038@11:0> = 0) &&
             ((0 >= <init_1038@11:1>) &&
              ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)))))
        nub:(not ((<init_1038@11:0> <> 0) || (0 < <init_1038@11:1>)))
        lb':((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
             ((<init_1038@11:0> = 0) &&
              ((0 >= <init_1038@11:1>) &&
               ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)))))
        nub':(not ((<init_1038@11:0> <> 0) || (0 < <init_1038@11:1>)))
        begin InterpProver.interpolate(19618)[5]
          begin InterpProver.interpolate_fresh(19619)[6]
            begin InterpProver.interpolate_log(19620)[7]
              input1: ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
                       ((<init_1038@11:0> = 0) &&
                        ((0 >= <init_1038@11:1>) &&
                         ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)))))
              input2: (not ((<init_1038@11:0> <> 0) || (0 < <init_1038@11:1>)))
              begin InterpProver.interpolate_check(19621)[8]
                begin InterpProver.interpolate_simplify(19622)[9]
                  begin InterpProver.interpolate_quick(19831)[10]
                    
                  end InterpProver.interpolate_quick(19831)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(19838)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(19838)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(19622)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(19621)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(19620)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(19619)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(19618)[5] (0.001000 sec.)
        output:
          P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int,<<<init_1038@11:2>@28:1>@40:0>:int) =
          false
      end ApronInterface.convex_hull_interpolate(19617)[4] (0.001000 sec.)
      Horn clauses:
        P[<<init_1038@11:2>@28:0>](0:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        P[<init_1038@11:1>](0:int,<init_1038@11:1>:int),
        ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)) |- bot
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>)
        |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                      <<init_1038@11:2>@28:0>:int)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<<init_1038@11:3>@14:0>@26:0>:int)
        
         (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                       <init_1038@11:1>:int)
      lower bounds:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> = 0)
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((<init_1038@11:0> >= <init_1038@11:1>) &&
          ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
      upper bounds:
        P[<<init_1038@11:2>@28:0>](var14:int,var15:int,var16:int) = ((var14 <> 0) || ((0 > var16) || (var16 >= var15)))
      begin GenHcSolver.classify_pids(22579)[4]
        output:
          [<<init_1038@11:2>@28:0>]
      end GenHcSolver.classify_pids(22579)[4] (0.000000 sec.)
      lb:((<init_1038@11:0> = 0) &&
          ((<init_1038@11:0> >= <init_1038@11:1>) &&
           ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
      nub:(not
             ((<init_1038@11:0> <> 0) ||
              ((0 > <<init_1038@11:2>@28:0>) || (<<init_1038@11:2>@28:0> >= <init_1038@11:1>))))
      begin ApronInterface.convex_hull_interpolate(22582)[4]
        lb:((<init_1038@11:0> = 0) &&
            ((<init_1038@11:0> >= <init_1038@11:1>) &&
             ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        nub:(not
               ((<init_1038@11:0> <> 0) ||
                ((0 > <<init_1038@11:2>@28:0>) || (<<init_1038@11:2>@28:0> >= <init_1038@11:1>))))
        lb':((<init_1038@11:0> = 0) &&
             ((<init_1038@11:0> >= <init_1038@11:1>) &&
              ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        nub':(not
                ((<init_1038@11:0> <> 0) ||
                 ((0 > <<init_1038@11:2>@28:0>) || (<<init_1038@11:2>@28:0> >= <init_1038@11:1>))))
        begin InterpProver.interpolate(22583)[5]
          begin InterpProver.interpolate_fresh(22584)[6]
            begin InterpProver.interpolate_log(22585)[7]
              input1: ((<init_1038@11:0> = 0) &&
                       ((<init_1038@11:0> >= <init_1038@11:1>) &&
                        ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
              input2: (not
                         ((<init_1038@11:0> <> 0) ||
                          ((0 > <<init_1038@11:2>@28:0>) || (<<init_1038@11:2>@28:0> >= <init_1038@11:1>))))
              begin InterpProver.interpolate_check(22586)[8]
                begin InterpProver.interpolate_simplify(22587)[9]
                  begin InterpProver.interpolate_quick(22732)[10]
                    
                  end InterpProver.interpolate_quick(22732)[10] (0.002000 sec.)
                  begin minimizing # of disjunctions(22739)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(22739)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(22587)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(22586)[8] (0.002000 sec.)
              output: false
            end InterpProver.interpolate_log(22585)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(22584)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(22583)[5] (0.002000 sec.)
        output:
          P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int) = false
      end ApronInterface.convex_hull_interpolate(22582)[4] (0.002000 sec.)
      Horn clauses:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>) |- bot
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<<init_1038@11:3>@14:0>@26:0>:int)
        
         (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                       <init_1038@11:1>:int)
      lower bounds:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> = 0)
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
      upper bounds:
        P[<<<init_1038@11:3>@14:0>@26:0>](var17:int,var18:int,var19:int) = ((var17 <> 0) || (0 < var18))
      begin GenHcSolver.classify_pids(24311)[4]
        output:
          [<<<init_1038@11:3>@14:0>@26:0>]
      end GenHcSolver.classify_pids(24311)[4] (0.000000 sec.)
      lb:((<init_1038@11:0> = 0) &&
          ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
      nub:(not ((<init_1038@11:0> <> 0) || (0 < <init_1038@11:1>)))
      begin ApronInterface.convex_hull_interpolate(24314)[4]
        lb:((<init_1038@11:0> = 0) &&
            ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        nub:(not ((<init_1038@11:0> <> 0) || (0 < <init_1038@11:1>)))
        lb':((<init_1038@11:0> = 0) &&
             ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        nub':(not ((<init_1038@11:0> <> 0) || (0 < <init_1038@11:1>)))
        begin InterpProver.interpolate(24315)[5]
          begin InterpProver.interpolate_fresh(24316)[6]
            begin InterpProver.interpolate_log(24317)[7]
              input1: ((<init_1038@11:0> = 0) &&
                       ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
              input2: (not ((<init_1038@11:0> <> 0) || (0 < <init_1038@11:1>)))
              begin InterpProver.interpolate_check(24318)[8]
                begin InterpProver.interpolate_simplify(24319)[9]
                  begin InterpProver.interpolate_quick(24392)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(24401)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(24402)[12]
                        begin CsisatInterface.interpolate_csisat_log(24403)[13]
                          input1: (0 = v_sep_init_1038_sep_11_sep_0 & 0 <= v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_0 & (1 + v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_0) <= v_sep_init_1038_sep_11_sep_1)
                          input2: (0 = v_sep_init_1038_sep_11_sep_0 & v_sep_init_1038_sep_11_sep_1 <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(24404)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(24404)[14] (0.000000 sec.)
                          output: -2*v_sep_init_1038_sep_11_sep_1 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(24403)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_init_1038_sep_11_sep_1 <= -2
                        after dnf conversion: ((-2*v_sep_init_1038_sep_11_sep_1 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(24402)[12] (0.000999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(24401)[11] (0.000999 sec.)
                    
                  end InterpProver.interpolate_quick(24392)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(24319)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(24318)[8] (0.001999 sec.)
              output: (1 <= <init_1038@11:1>)
            end InterpProver.interpolate_log(24317)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(24316)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(24315)[5] (0.001999 sec.)
        output:
          P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int) =
          (1 <= <init_1038@11:1>)
      end ApronInterface.convex_hull_interpolate(24314)[4] (0.001999 sec.)
      Horn clauses:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> >= <init_1038@11:1>) && (1 <= <init_1038@11:1>)) |- bot
        
         (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                       <init_1038@11:1>:int)
      lower bounds:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> = 0)
      upper bounds:
        P[<init_1038@11:1>](var20:int,var21:int) = ((var20 < var21) || (1 > var21))
      begin GenHcSolver.classify_pids(25506)[4]
        output:
          [<init_1038@11:1>]
      end GenHcSolver.classify_pids(25506)[4] (0.000000 sec.)
      lb:(<init_1038@11:0> = 0)
      nub:(not ((<init_1038@11:0> < <init_1038@11:1>) || (1 > <init_1038@11:1>)))
      begin ApronInterface.convex_hull_interpolate(25509)[4]
        lb:(<init_1038@11:0> = 0)
        nub:(not ((<init_1038@11:0> < <init_1038@11:1>) || (1 > <init_1038@11:1>)))
        lb':(<init_1038@11:0> = 0)
        nub':(not ((<init_1038@11:0> < <init_1038@11:1>) || (1 > <init_1038@11:1>)))
        begin InterpProver.interpolate(25510)[5]
          begin InterpProver.interpolate_fresh(25511)[6]
            begin InterpProver.interpolate_log(25512)[7]
              input1: (<init_1038@11:0> = 0)
              input2: (not ((<init_1038@11:0> < <init_1038@11:1>) || (1 > <init_1038@11:1>)))
              begin InterpProver.interpolate_check(25513)[8]
                begin InterpProver.interpolate_simplify(25514)[9]
                  begin InterpProver.interpolate_quick(25559)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(25568)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(25569)[12]
                        begin CsisatInterface.interpolate_csisat_log(25570)[13]
                          input1: 0 = v_sep_init_1038_sep_11_sep_0
                          input2: (1 <= v_sep_init_1038_sep_11_sep_1 & v_sep_init_1038_sep_11_sep_1 <= v_sep_init_1038_sep_11_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(25571)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(25571)[14] (0.000000 sec.)
                          output: 2*v_sep_init_1038_sep_11_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(25570)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_init_1038_sep_11_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_init_1038_sep_11_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(25569)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(25568)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(25559)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(25514)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(25513)[8] (0.002000 sec.)
              output: (<init_1038@11:0> <= 0)
            end InterpProver.interpolate_log(25512)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(25511)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(25510)[5] (0.002000 sec.)
        output:
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> <= 0)
      end ApronInterface.convex_hull_interpolate(25509)[4] (0.002000 sec.)
      begin HcSolver.check_validity(25738)[4]
        input:
          P[<fail_1490@51:0>](<fail_1490@51:0>:bool)|- bot
          
          P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](0:int,<f_k_main_1486@48:2>:int,<f_k_main_1486@48:1>:int,<f_k_main_1486@48:4>:int),
          ((<f_k_main_1486@48:1> < <f_k_main_1486@48:2>) &&
           ((0 <= <f_k_main_1486@48:1>) && ((<f_k_main_1486@48:4> < 1) && <fail_1490@51:0>)))
          |- P[<fail_1490@51:0>](<fail_1490@51:0>:bool)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int),
          (<init_1038@11:0> >= <init_1038@11:1>)
          |- P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,
                                                      <init_1038@11:1>:int,
                                                      <<<init_1038@11:3>@14:0>@26:0>:int,
                                                      <<<<init_1038@11:3>@14:0>@26:1>@42:0>:int)
          
          P[<<init_1038@11:2>@28:0>](0:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          ((<init_1038@11:0> = 0) &&
           ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
            ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
          |- P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                               <<init_1038@11:2>@28:0>:int,
                                               <<<init_1038@11:2>@28:1>@40:0>:int)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
          (<init_1038@11:0> >= <init_1038@11:1>)
          |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                        <<init_1038@11:2>@28:0>:int)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          ((<init_1038@11:0> = 0) &&
           ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
          |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                               <<<init_1038@11:3>@14:0>@26:0>:int)
          
           (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                         <init_1038@11:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(25738)[4] (0.004999 sec.)
      solution:
        P[<fail_1490@51:0>](<fail_1490@51:0>:bool) = false
        P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int) =
        false
        P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int,<<<init_1038@11:2>@28:1>@40:0>:int) =
        false
        P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int) = false
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int) =
        (1 <= <init_1038@11:1>)
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> <= 0)
    end GenHcSolver.solve(4507)[3] (0.112983 sec.)
    begin GenHcSolver.solve(26451)[3]
      Horn clauses:
        P[<fail_1490@51:0>](<fail_1490@51:0>:bool)|- bot
        
        P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](0:int,<f_k_main_1486@48:2>:int,<f_k_main_1486@48:1>:int,<f_k_main_1486@48:4>:int),
        ((<f_k_main_1486@48:1> < <f_k_main_1486@48:2>) &&
         ((0 <= <f_k_main_1486@48:1>) && ((<f_k_main_1486@48:4> < 1) && <fail_1490@51:0>)))
        |- P[<fail_1490@51:0>](<fail_1490@51:0>:bool)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>)
        |- P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,
                                                    <init_1038@11:1>:int,
                                                    <<<init_1038@11:3>@14:0>@26:0>:int,
                                                    <<<<init_1038@11:3>@14:0>@26:1>@42:0>:int)
        
        P[<<init_1038@11:2>@28:0>](0:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
          ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        |- P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<init_1038@11:2>@28:0>:int,
                                             <<<init_1038@11:2>@28:1>@40:0>:int)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>)
        |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                      <<init_1038@11:2>@28:0>:int)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<<init_1038@11:3>@14:0>@26:0>:int)
        
         (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                       <init_1038@11:1>:int)
      lower bounds:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> = 0)
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((<init_1038@11:0> >= <init_1038@11:1>) &&
          ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int,<<<init_1038@11:2>@28:1>@40:0>:int) =
        ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
         ((<init_1038@11:0> = 0) &&
          ((0 >= <init_1038@11:1>) && ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)))))
        P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int) =
        ((<<<<init_1038@11:3>@14:0>@26:1>@42:0> = 0) &&
         ((<init_1038@11:0> = 0) &&
          ((<init_1038@11:0> >= <init_1038@11:1>) &&
           ((0 >= <init_1038@11:1>) &&
            ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>))))))
        P[<fail_1490@51:0>](<fail_1490@51:0>:bool) = false
      upper bounds:
        P[<fail_1490@51:0>](var23:bool) = true
      begin GenHcSolver.classify_pids(31524)[4]
        output:
          [<fail_1490@51:0>]
      end GenHcSolver.classify_pids(31524)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(31527)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(31530)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(31530)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(31535)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(31535)[5] (0.001000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(31538)[5]
          begin InterpProver.interpolate_fresh(31539)[6]
            begin InterpProver.interpolate_log(31540)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(31541)[8]
                begin InterpProver.interpolate_simplify(31542)[9]
                  begin InterpProver.interpolate_quick(31557)[10]
                    
                  end InterpProver.interpolate_quick(31557)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(31561)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(31561)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(31542)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(31541)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(31540)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(31539)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(31538)[5] (0.000000 sec.)
        output:
          P[<fail_1490@51:0>](<fail_1490@51:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(31527)[4] (0.001000 sec.)
      Horn clauses:
        P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](0:int,<f_k_main_1486@48:2>:int,<f_k_main_1486@48:1>:int,<f_k_main_1486@48:4>:int),
        ((<f_k_main_1486@48:4> < 1) && ((0 <= <f_k_main_1486@48:1>) && (<f_k_main_1486@48:1> < <f_k_main_1486@48:2>)))
        |- bot
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>)
        |- P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,
                                                    <init_1038@11:1>:int,
                                                    <<<init_1038@11:3>@14:0>@26:0>:int,
                                                    <<<<init_1038@11:3>@14:0>@26:1>@42:0>:int)
        
        P[<<init_1038@11:2>@28:0>](0:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
          ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        |- P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<init_1038@11:2>@28:0>:int,
                                             <<<init_1038@11:2>@28:1>@40:0>:int)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>)
        |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                      <<init_1038@11:2>@28:0>:int)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<<init_1038@11:3>@14:0>@26:0>:int)
        
         (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                       <init_1038@11:1>:int)
      lower bounds:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> = 0)
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((<init_1038@11:0> >= <init_1038@11:1>) &&
          ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int,<<<init_1038@11:2>@28:1>@40:0>:int) =
        ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
         ((<init_1038@11:0> = 0) &&
          ((0 >= <init_1038@11:1>) && ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)))))
        P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int) =
        ((<<<<init_1038@11:3>@14:0>@26:1>@42:0> = 0) &&
         ((<init_1038@11:0> = 0) &&
          ((<init_1038@11:0> >= <init_1038@11:1>) &&
           ((0 >= <init_1038@11:1>) &&
            ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>))))))
      upper bounds:
        P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](var24:int,var25:int,var26:int,var27:int) =
        ((var24 <> 0) || ((var27 >= 1) || ((0 > var26) || (var26 >= var25))))
      begin GenHcSolver.classify_pids(37439)[4]
        output:
          [<<<<init_1038@11:3>@14:0>@26:1>@42:0>]
      end GenHcSolver.classify_pids(37439)[4] (0.000000 sec.)
      lb:((<<<<init_1038@11:3>@14:0>@26:1>@42:0> = 0) &&
          ((<init_1038@11:0> = 0) &&
           ((<init_1038@11:0> >= <init_1038@11:1>) &&
            ((0 >= <init_1038@11:1>) &&
             ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>))))))
      nub:(not
             ((<init_1038@11:0> <> 0) ||
              ((<<<<init_1038@11:3>@14:0>@26:1>@42:0> >= 1) ||
               ((0 > <<<init_1038@11:3>@14:0>@26:0>) || (<<<init_1038@11:3>@14:0>@26:0> >= <init_1038@11:1>)))))
      begin ApronInterface.convex_hull_interpolate(37442)[4]
        lb:((<<<<init_1038@11:3>@14:0>@26:1>@42:0> = 0) &&
            ((<init_1038@11:0> = 0) &&
             ((<init_1038@11:0> >= <init_1038@11:1>) &&
              ((0 >= <init_1038@11:1>) &&
               ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>))))))
        nub:(not
               ((<init_1038@11:0> <> 0) ||
                ((<<<<init_1038@11:3>@14:0>@26:1>@42:0> >= 1) ||
                 ((0 > <<<init_1038@11:3>@14:0>@26:0>) || (<<<init_1038@11:3>@14:0>@26:0> >= <init_1038@11:1>)))))
        begin ExtFormula.Formula.case_analysis_boolean(37526)[5]
          ts: ((<<<<init_1038@11:3>@14:0>@26:1>@42:0> = 0) &&
               ((<init_1038@11:0> = 0) &&
                ((<init_1038@11:0> >= <init_1038@11:1>) &&
                 ((0 >= <init_1038@11:1>) &&
                  ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>))))))
          
        end ExtFormula.Formula.case_analysis_boolean(37526)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(37583)[5]
          ts: ((<init_1038@11:0> = 0) &&
               ((<<<<init_1038@11:3>@14:0>@26:1>@42:0> < 1) &&
                ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>))))
          
        end ExtFormula.Formula.case_analysis_boolean(37583)[5] (0.001000 sec.)
        lb':(-1 >= 0)
        nub':((<init_1038@11:0> = 0) &&
              (((-1 * <<<<init_1038@11:3>@14:0>@26:1>@42:0>) >= 0) &&
               ((<<<init_1038@11:3>@14:0>@26:0> >= 0) &&
                (((-1 + (-1 * <<<init_1038@11:3>@14:0>@26:0>)) + <init_1038@11:1>) >= 0))))
        begin InterpProver.interpolate(37592)[5]
          begin InterpProver.interpolate_fresh(37593)[6]
            begin InterpProver.interpolate_log(37594)[7]
              input1: (-1 >= 0)
              input2: ((<init_1038@11:0> = 0) &&
                       (((-1 * <<<<init_1038@11:3>@14:0>@26:1>@42:0>) >= 0) &&
                        ((<<<init_1038@11:3>@14:0>@26:0> >= 0) &&
                         (((-1 + (-1 * <<<init_1038@11:3>@14:0>@26:0>)) + <init_1038@11:1>) >= 0))))
              begin InterpProver.interpolate_check(37595)[8]
                begin InterpProver.interpolate_simplify(37596)[9]
                  begin InterpProver.interpolate_quick(37732)[10]
                    
                  end InterpProver.interpolate_quick(37732)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(37736)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(37736)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(37596)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(37595)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(37594)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(37593)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(37592)[5] (0.000000 sec.)
        output:
          P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int) =
          false
      end ApronInterface.convex_hull_interpolate(37442)[4] (0.002000 sec.)
      Horn clauses:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>) |- bot
        
        P[<<init_1038@11:2>@28:0>](0:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
          ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        |- P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<init_1038@11:2>@28:0>:int,
                                             <<<init_1038@11:2>@28:1>@40:0>:int)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>)
        |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                      <<init_1038@11:2>@28:0>:int)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<<init_1038@11:3>@14:0>@26:0>:int)
        
         (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                       <init_1038@11:1>:int)
      lower bounds:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> = 0)
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((<init_1038@11:0> >= <init_1038@11:1>) &&
          ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int,<<<init_1038@11:2>@28:1>@40:0>:int) =
        ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
         ((<init_1038@11:0> = 0) &&
          ((0 >= <init_1038@11:1>) && ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)))))
      upper bounds:
        P[<<<init_1038@11:2>@28:1>@40:0>](var28:int,var29:int,var30:int,var31:int) = ((var28 <> 0) || (0 < var29))
      begin GenHcSolver.classify_pids(41597)[4]
        output:
          [<<<init_1038@11:2>@28:1>@40:0>]
      end GenHcSolver.classify_pids(41597)[4] (0.000000 sec.)
      lb:((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
          ((<init_1038@11:0> = 0) &&
           ((0 >= <init_1038@11:1>) && ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)))))
      nub:(not ((<init_1038@11:0> <> 0) || (0 < <init_1038@11:1>)))
      begin ApronInterface.convex_hull_interpolate(41600)[4]
        lb:((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
            ((<init_1038@11:0> = 0) &&
             ((0 >= <init_1038@11:1>) &&
              ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)))))
        nub:(not ((<init_1038@11:0> <> 0) || (0 < <init_1038@11:1>)))
        begin ExtFormula.Formula.case_analysis_boolean(41657)[5]
          ts: ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
               ((<init_1038@11:0> = 0) &&
                ((0 >= <init_1038@11:1>) &&
                 ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)))))
          
        end ExtFormula.Formula.case_analysis_boolean(41657)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(41675)[5]
          ts: ((<init_1038@11:0> = 0) && (0 >= <init_1038@11:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(41675)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':((<init_1038@11:0> = 0) && ((-1 * <init_1038@11:1>) >= 0))
        begin InterpProver.interpolate(41680)[5]
          begin InterpProver.interpolate_fresh(41681)[6]
            begin InterpProver.interpolate_log(41682)[7]
              input1: (-1 >= 0)
              input2: ((<init_1038@11:0> = 0) && ((-1 * <init_1038@11:1>) >= 0))
              begin InterpProver.interpolate_check(41683)[8]
                begin InterpProver.interpolate_simplify(41684)[9]
                  begin InterpProver.interpolate_quick(41717)[10]
                    
                  end InterpProver.interpolate_quick(41717)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(41721)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(41721)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(41684)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(41683)[8] (0.000999 sec.)
              output: false
            end InterpProver.interpolate_log(41682)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(41681)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(41680)[5] (0.000999 sec.)
        output:
          P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int,<<<init_1038@11:2>@28:1>@40:0>:int) =
          false
      end ApronInterface.convex_hull_interpolate(41600)[4] (0.001999 sec.)
      Horn clauses:
        P[<<init_1038@11:2>@28:0>](0:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        P[<init_1038@11:1>](0:int,<init_1038@11:1>:int),
        ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)) |- bot
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>)
        |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                      <<init_1038@11:2>@28:0>:int)
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<<init_1038@11:3>@14:0>@26:0>:int)
        
         (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                       <init_1038@11:1>:int)
      lower bounds:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> = 0)
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((<init_1038@11:0> >= <init_1038@11:1>) &&
          ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
      upper bounds:
        P[<<init_1038@11:2>@28:0>](var32:int,var33:int,var34:int) = ((var32 <> 0) || ((0 > var34) || (var34 >= var33)))
      begin GenHcSolver.classify_pids(44462)[4]
        output:
          [<<init_1038@11:2>@28:0>]
      end GenHcSolver.classify_pids(44462)[4] (0.000000 sec.)
      lb:((<init_1038@11:0> = 0) &&
          ((<init_1038@11:0> >= <init_1038@11:1>) &&
           ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
      nub:(not
             ((<init_1038@11:0> <> 0) ||
              ((0 > <<init_1038@11:2>@28:0>) || (<<init_1038@11:2>@28:0> >= <init_1038@11:1>))))
      begin ApronInterface.convex_hull_interpolate(44465)[4]
        lb:((<init_1038@11:0> = 0) &&
            ((<init_1038@11:0> >= <init_1038@11:1>) &&
             ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
        nub:(not
               ((<init_1038@11:0> <> 0) ||
                ((0 > <<init_1038@11:2>@28:0>) || (<<init_1038@11:2>@28:0> >= <init_1038@11:1>))))
        begin ExtFormula.Formula.case_analysis_boolean(44511)[5]
          ts: ((<init_1038@11:0> = 0) &&
               ((<init_1038@11:0> >= <init_1038@11:1>) &&
                ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
          
        end ExtFormula.Formula.case_analysis_boolean(44511)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(44545)[5]
          ts: ((<init_1038@11:0> = 0) &&
               ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>)))
          
        end ExtFormula.Formula.case_analysis_boolean(44545)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':((<init_1038@11:0> = 0) &&
              ((<<init_1038@11:2>@28:0> >= 0) && (((-1 + (-1 * <<init_1038@11:2>@28:0>)) + <init_1038@11:1>) >= 0)))
        begin InterpProver.interpolate(44552)[5]
          begin InterpProver.interpolate_fresh(44553)[6]
            begin InterpProver.interpolate_log(44554)[7]
              input1: (-1 >= 0)
              input2: ((<init_1038@11:0> = 0) &&
                       ((<<init_1038@11:2>@28:0> >= 0) &&
                        (((-1 + (-1 * <<init_1038@11:2>@28:0>)) + <init_1038@11:1>) >= 0)))
              begin InterpProver.interpolate_check(44555)[8]
                begin InterpProver.interpolate_simplify(44556)[9]
                  begin InterpProver.interpolate_quick(44645)[10]
                    
                  end InterpProver.interpolate_quick(44645)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(44649)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(44649)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(44556)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(44555)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(44554)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(44553)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(44552)[5] (0.000000 sec.)
        output:
          P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int) = false
      end ApronInterface.convex_hull_interpolate(44465)[4] (0.001000 sec.)
      Horn clauses:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
        (<init_1038@11:0> >= <init_1038@11:1>) |- bot
        
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                             <<<init_1038@11:3>@14:0>@26:0>:int)
        
         (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                       <init_1038@11:1>:int)
      lower bounds:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> = 0)
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int) =
        ((<init_1038@11:0> = 0) &&
         ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
      upper bounds:
        P[<<<init_1038@11:3>@14:0>@26:0>](var35:int,var36:int,var37:int) = ((var35 <> 0) || (0 < var36))
      begin GenHcSolver.classify_pids(46224)[4]
        output:
          [<<<init_1038@11:3>@14:0>@26:0>]
      end GenHcSolver.classify_pids(46224)[4] (0.000000 sec.)
      lb:((<init_1038@11:0> = 0) &&
          ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
      nub:(not ((<init_1038@11:0> <> 0) || (0 < <init_1038@11:1>)))
      begin ApronInterface.convex_hull_interpolate(46227)[4]
        lb:((<init_1038@11:0> = 0) &&
            ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
        nub:(not ((<init_1038@11:0> <> 0) || (0 < <init_1038@11:1>)))
        begin ExtFormula.Formula.case_analysis_boolean(46253)[5]
          ts: ((<init_1038@11:0> = 0) &&
               ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
          
        end ExtFormula.Formula.case_analysis_boolean(46253)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(46269)[5]
          ts: ((<init_1038@11:0> = 0) && (0 >= <init_1038@11:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(46269)[5] (0.000000 sec.)
        lb':((<init_1038@11:0> = 0) &&
             ((<<<init_1038@11:3>@14:0>@26:0> >= 0) &&
              (((-1 + (-1 * <<<init_1038@11:3>@14:0>@26:0>)) + <init_1038@11:1>) >= 0)))
        nub':((<init_1038@11:0> = 0) && ((-1 * <init_1038@11:1>) >= 0))
        begin InterpProver.interpolate(46274)[5]
          begin InterpProver.interpolate_fresh(46275)[6]
            begin InterpProver.interpolate_log(46276)[7]
              input1: ((<init_1038@11:0> = 0) &&
                       ((<<<init_1038@11:3>@14:0>@26:0> >= 0) &&
                        (((-1 + (-1 * <<<init_1038@11:3>@14:0>@26:0>)) + <init_1038@11:1>) >= 0)))
              input2: ((<init_1038@11:0> = 0) && ((-1 * <init_1038@11:1>) >= 0))
              begin InterpProver.interpolate_check(46277)[8]
                begin InterpProver.interpolate_simplify(46278)[9]
                  begin InterpProver.interpolate_quick(46361)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(46370)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(46371)[12]
                        begin CsisatInterface.interpolate_csisat_log(46372)[13]
                          input1: (0 = v_sep_init_1038_sep_11_sep_0 & 0 <= v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_0 & (1 + v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_0) <= v_sep_init_1038_sep_11_sep_1)
                          input2: (0 = v_sep_init_1038_sep_11_sep_0 & v_sep_init_1038_sep_11_sep_1 <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(46373)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(46373)[14] (0.000000 sec.)
                          output: -2*v_sep_init_1038_sep_11_sep_1 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(46372)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_init_1038_sep_11_sep_1 <= -2
                        after dnf conversion: ((-2*v_sep_init_1038_sep_11_sep_1 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(46371)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(46370)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(46361)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(46278)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(46277)[8] (0.002000 sec.)
              output: (1 <= <init_1038@11:1>)
            end InterpProver.interpolate_log(46276)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(46275)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(46274)[5] (0.002000 sec.)
        output:
          P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int) =
          (1 <= <init_1038@11:1>)
      end ApronInterface.convex_hull_interpolate(46227)[4] (0.003000 sec.)
      Horn clauses:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
        ((<init_1038@11:0> >= <init_1038@11:1>) && (1 <= <init_1038@11:1>)) |- bot
        
         (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                       <init_1038@11:1>:int)
      lower bounds:
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> = 0)
      upper bounds:
        P[<init_1038@11:1>](var38:int,var39:int) = ((var38 < var39) || (1 > var39))
      begin GenHcSolver.classify_pids(47475)[4]
        output:
          [<init_1038@11:1>]
      end GenHcSolver.classify_pids(47475)[4] (0.000000 sec.)
      lb:(<init_1038@11:0> = 0)
      nub:(not ((<init_1038@11:0> < <init_1038@11:1>) || (1 > <init_1038@11:1>)))
      begin ApronInterface.convex_hull_interpolate(47478)[4]
        lb:(<init_1038@11:0> = 0)
        nub:(not ((<init_1038@11:0> < <init_1038@11:1>) || (1 > <init_1038@11:1>)))
        begin ExtFormula.Formula.case_analysis_boolean(47482)[5]
          ts: (<init_1038@11:0> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(47482)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(47503)[5]
          ts: ((<init_1038@11:0> >= <init_1038@11:1>) && (1 <= <init_1038@11:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(47503)[5] (0.001000 sec.)
        lb':(<init_1038@11:0> = 0)
        nub':(((-1 + <init_1038@11:1>) >= 0) && (((-1 * <init_1038@11:1>) + <init_1038@11:0>) >= 0))
        begin InterpProver.interpolate(47510)[5]
          begin InterpProver.interpolate_fresh(47511)[6]
            begin InterpProver.interpolate_log(47512)[7]
              input1: (<init_1038@11:0> = 0)
              input2: (((-1 + <init_1038@11:1>) >= 0) && (((-1 * <init_1038@11:1>) + <init_1038@11:0>) >= 0))
              begin InterpProver.interpolate_check(47513)[8]
                begin InterpProver.interpolate_simplify(47514)[9]
                  begin InterpProver.interpolate_quick(47559)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(47568)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(47569)[12]
                        begin CsisatInterface.interpolate_csisat_log(47570)[13]
                          input1: 0 = v_sep_init_1038_sep_11_sep_0
                          input2: (1 <= v_sep_init_1038_sep_11_sep_1 & v_sep_init_1038_sep_11_sep_1 <= v_sep_init_1038_sep_11_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(47571)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(47571)[14] (0.000000 sec.)
                          output: 2*v_sep_init_1038_sep_11_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(47570)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_init_1038_sep_11_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_init_1038_sep_11_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(47569)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(47568)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(47559)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(47514)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(47513)[8] (0.001000 sec.)
              output: (<init_1038@11:0> <= 0)
            end InterpProver.interpolate_log(47512)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(47511)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(47510)[5] (0.001000 sec.)
        output:
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> <= 0)
      end ApronInterface.convex_hull_interpolate(47478)[4] (0.002000 sec.)
      begin HcSolver.check_validity(47738)[4]
        input:
          P[<fail_1490@51:0>](<fail_1490@51:0>:bool)|- bot
          
          P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](0:int,<f_k_main_1486@48:2>:int,<f_k_main_1486@48:1>:int,<f_k_main_1486@48:4>:int),
          ((<f_k_main_1486@48:1> < <f_k_main_1486@48:2>) &&
           ((0 <= <f_k_main_1486@48:1>) && ((<f_k_main_1486@48:4> < 1) && <fail_1490@51:0>)))
          |- P[<fail_1490@51:0>](<fail_1490@51:0>:bool)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int),
          (<init_1038@11:0> >= <init_1038@11:1>)
          |- P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,
                                                      <init_1038@11:1>:int,
                                                      <<<init_1038@11:3>@14:0>@26:0>:int,
                                                      <<<<init_1038@11:3>@14:0>@26:1>@42:0>:int)
          
          P[<<init_1038@11:2>@28:0>](0:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          ((<init_1038@11:0> = 0) &&
           ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
            ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
          |- P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                               <<init_1038@11:2>@28:0>:int,
                                               <<<init_1038@11:2>@28:1>@40:0>:int)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
          (<init_1038@11:0> >= <init_1038@11:1>)
          |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                        <<init_1038@11:2>@28:0>:int)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          ((<init_1038@11:0> = 0) &&
           ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
          |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                               <<<init_1038@11:3>@14:0>@26:0>:int)
          
           (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                         <init_1038@11:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(47738)[4] (0.003999 sec.)
      solution:
        P[<fail_1490@51:0>](<fail_1490@51:0>:bool) = false
        P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int) =
        false
        P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int,<<<init_1038@11:2>@28:1>@40:0>:int) =
        false
        P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int) = false
        P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int) =
        (1 <= <init_1038@11:1>)
        P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int) = (<init_1038@11:0> <= 0)
    end GenHcSolver.solve(26451)[3] (0.133979 sec.)
    begin YhornInterface.solve(48451)[3]
      begin HcSolver.solve_ub(48452)[4]
        encoded:
          P[<fail_1490@51:0>](<fail_1490@51:0>:int)|- bot
          
          P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](0:int,<f_k_main_1486@48:2>:int,<f_k_main_1486@48:1>:int,<f_k_main_1486@48:4>:int),
          ((<f_k_main_1486@48:1> < <f_k_main_1486@48:2>) &&
           ((0 <= <f_k_main_1486@48:1>) && ((<f_k_main_1486@48:4> < 1) && (<fail_1490@51:0> = 1))))
          |- P[<fail_1490@51:0>](<fail_1490@51:0>:int)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int),
          (<init_1038@11:0> >= <init_1038@11:1>)
          |- P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,
                                                      <init_1038@11:1>:int,
                                                      <<<init_1038@11:3>@14:0>@26:0>:int,
                                                      <<<<init_1038@11:3>@14:0>@26:1>@42:0>:int)
          
          P[<<init_1038@11:2>@28:0>](0:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          ((<init_1038@11:0> = 0) &&
           ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
            ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
          |- P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                               <<init_1038@11:2>@28:0>:int,
                                               <<<init_1038@11:2>@28:1>@40:0>:int)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
          (<init_1038@11:0> >= <init_1038@11:1>)
          |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                        <<init_1038@11:2>@28:0>:int)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          ((<init_1038@11:0> = 0) &&
           ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
          |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                               <<<init_1038@11:3>@14:0>@26:0>:int)
          
           (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                         <init_1038@11:1>:int)
        input to Yhorn:
          P[<fail_1490@51:0>](<fail_1490@51:0>:int)|- bot
          
          P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](var40:int,<f_k_main_1486@48:2>:int,<f_k_main_1486@48:1>:int,<f_k_main_1486@48:4>:int),
          ((<f_k_main_1486@48:4> < 1) &&
           ((0 <= <f_k_main_1486@48:1>) &&
            ((<f_k_main_1486@48:1> < <f_k_main_1486@48:2>) && ((var40 = 0) && (<fail_1490@51:0> = 1)))))
          |- P[<fail_1490@51:0>](<fail_1490@51:0>:int)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int),
          (<init_1038@11:0> >= <init_1038@11:1>)
          |- P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,
                                                      <init_1038@11:1>:int,
                                                      <<<init_1038@11:3>@14:0>@26:0>:int,
                                                      <<<<init_1038@11:3>@14:0>@26:1>@42:0>:int)
          
          P[<<init_1038@11:2>@28:0>](var41:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          ((<<init_1038@11:2>@28:0> < <init_1038@11:1>) &&
           ((0 <= <<init_1038@11:2>@28:0>) &&
            ((var41 = 0) && ((<<<init_1038@11:2>@28:1>@40:0> = 0) && (<init_1038@11:0> = 0)))))
          |- P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                               <<init_1038@11:2>@28:0>:int,
                                               <<<init_1038@11:2>@28:1>@40:0>:int)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
          (<init_1038@11:0> >= <init_1038@11:1>)
          |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                        <<init_1038@11:2>@28:0>:int)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          ((<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>) &&
           ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<init_1038@11:0> = 0)))
          |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                               <<<init_1038@11:3>@14:0>@26:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1490_sep_51_sep_0($13)) -> 1=0.
(($13-1=0) & ($14=0) & ($15-$16<0) & (-$15<=0) & ($17-1<0)) & (v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_1_sep_42_sep_0($14,$16,$15,$17)) -> v_sep_fail_1490_sep_51_sep_0($13).
($18-$19>=0) & (v_sep_init_1038_sep_11_sep_2_sep_28_sep_1_sep_40_sep_0($18,$19,$20,$21)) & (v_sep_init_1038_sep_11_sep_1($18,$19)) -> v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_1_sep_42_sep_0($18,$19,$20,$21).
(($18=0) & ($22=0) & ($23=0) & (-$24<=0) & (-$19+$24<0)) & (v_sep_init_1038_sep_11_sep_1($18,$19)) & (v_sep_init_1038_sep_11_sep_2_sep_28_sep_0($23,$19,$24)) -> v_sep_init_1038_sep_11_sep_2_sep_28_sep_1_sep_40_sep_0($18,$19,$24,$22).
($18-$19>=0) & (v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_0($18,$19,$24)) & (v_sep_init_1038_sep_11_sep_1($18,$19)) -> v_sep_init_1038_sep_11_sep_2_sep_28_sep_0($18,$19,$24).
(($18=0) & (-$20<=0) & (-$19+$20<0)) & (v_sep_init_1038_sep_11_sep_1($18,$19)) -> v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_0($18,$19,$20).
$18=0 -> v_sep_init_1038_sep_11_sep_1($18,$19).


v_sep_fail_1490_sep_51_sep_0: X
v_sep_init_1038_sep_11_sep_1: X
v_sep_init_1038_sep_11_sep_2_sep_28_sep_0: X
v_sep_init_1038_sep_11_sep_2_sep_28_sep_1_sep_40_sep_0: X
v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_0: X
v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_1_sep_42_sep_0: X
..........
v_sep_fail_1490_sep_51_sep_0: X
v_sep_init_1038_sep_11_sep_1: X
v_sep_init_1038_sep_11_sep_2_sep_28_sep_0: X
v_sep_init_1038_sep_11_sep_2_sep_28_sep_1_sep_40_sep_0: X
v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_0: X
v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_1_sep_42_sep_0: X
...
v_sep_fail_1490_sep_51_sep_0: X
v_sep_init_1038_sep_11_sep_1: X
v_sep_init_1038_sep_11_sep_2_sep_28_sep_0: X
v_sep_init_1038_sep_11_sep_2_sep_28_sep_1_sep_40_sep_0: X
v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_0: X
v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_1_sep_42_sep_0: X
.....
v_sep_fail_1490_sep_51_sep_0: X
v_sep_init_1038_sep_11_sep_1: X
v_sep_init_1038_sep_11_sep_2_sep_28_sep_0: X
v_sep_init_1038_sep_11_sep_2_sep_28_sep_1_sep_40_sep_0: X
v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_0: X
v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_1_sep_42_sep_0: X
.......
v_sep_fail_1490_sep_51_sep_0: X
v_sep_init_1038_sep_11_sep_1: X
v_sep_init_1038_sep_11_sep_2_sep_28_sep_0: X
v_sep_init_1038_sep_11_sep_2_sep_28_sep_1_sep_40_sep_0: X
v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_0: X
v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_1_sep_42_sep_0: X
.........
v_sep_fail_1490_sep_51_sep_0: X
v_sep_init_1038_sep_11_sep_1: X
v_sep_init_1038_sep_11_sep_2_sep_28_sep_0: X
v_sep_init_1038_sep_11_sep_2_sep_28_sep_1_sep_40_sep_0: X
v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_0: X
v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_1_sep_42_sep_0: X
..........(0=0) & (v_sep_fail_1490_sep_51_sep_0($13)) -> 1=0.
(($13-1=0) & ($14=0) & ($15-$16<0) & (-$15<=0) & ($17-1<0)) & (v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_1_sep_42_sep_0($14,$16,$15,$17)) -> v_sep_fail_1490_sep_51_sep_0($13).
($18-$19>=0) & (v_sep_init_1038_sep_11_sep_2_sep_28_sep_1_sep_40_sep_0($18,$19,$20,$21)) & (v_sep_init_1038_sep_11_sep_1($18,$19)) -> v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_1_sep_42_sep_0($18,$19,$20,$21).
(($18=0) & ($22=0) & ($23=0) & (-$24<=0) & (-$19+$24<0)) & (v_sep_init_1038_sep_11_sep_1($18,$19)) & (v_sep_init_1038_sep_11_sep_2_sep_28_sep_0($23,$19,$24)) -> v_sep_init_1038_sep_11_sep_2_sep_28_sep_1_sep_40_sep_0($18,$19,$24,$22).
($18-$19>=0) & (v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_0($18,$19,$24)) & (v_sep_init_1038_sep_11_sep_1($18,$19)) -> v_sep_init_1038_sep_11_sep_2_sep_28_sep_0($18,$19,$24).
(($18=0) & (-$20<=0) & (-$19+$20<0)) & (v_sep_init_1038_sep_11_sep_1($18,$19)) -> v_sep_init_1038_sep_11_sep_3_sep_14_sep_0_sep_26_sep_0($18,$19,$20).
$18=0 -> v_sep_init_1038_sep_11_sep_1($18,$19).

           (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                         <init_1038@11:1>:int)
        solution:
          P[<fail_1490@51:0>]($25:bool) = false
          P[<init_1038@11:1>]($46:int,$48:int) = true
          P[<<init_1038@11:2>@28:0>]($51:int,$53:int,$55:int) = ($53 <= 0)
          P[<<<init_1038@11:2>@28:1>@40:0>]($37:int,$39:int,$41:int,$43:int) = ($39 <= 0)
          P[<<<init_1038@11:3>@14:0>@26:0>]($58:int,$60:int,$62:int) = ($58 <= 0)
          P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>]($28:int,$30:int,$32:int,$34:int) = ($30 <= 0)
        
      end HcSolver.solve_ub(48452)[4] (0.026996 sec.)
      begin HcSolver.check_validity(48927)[4]
        input:
          P[<fail_1490@51:0>](<fail_1490@51:0>:bool)|- bot
          
          P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](0:int,<f_k_main_1486@48:2>:int,<f_k_main_1486@48:1>:int,<f_k_main_1486@48:4>:int),
          ((<f_k_main_1486@48:1> < <f_k_main_1486@48:2>) &&
           ((0 <= <f_k_main_1486@48:1>) && ((<f_k_main_1486@48:4> < 1) && <fail_1490@51:0>)))
          |- P[<fail_1490@51:0>](<fail_1490@51:0>:bool)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<<init_1038@11:3>@14:0>@26:0>:int,<<<<init_1038@11:3>@14:0>@26:1>@42:0>:int),
          (<init_1038@11:0> >= <init_1038@11:1>)
          |- P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>](<init_1038@11:0>:int,
                                                      <init_1038@11:1>:int,
                                                      <<<init_1038@11:3>@14:0>@26:0>:int,
                                                      <<<<init_1038@11:3>@14:0>@26:1>@42:0>:int)
          
          P[<<init_1038@11:2>@28:0>](0:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          ((<init_1038@11:0> = 0) &&
           ((<<<init_1038@11:2>@28:1>@40:0> = 0) &&
            ((0 <= <<init_1038@11:2>@28:0>) && (<<init_1038@11:2>@28:0> < <init_1038@11:1>))))
          |- P[<<<init_1038@11:2>@28:1>@40:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                               <<init_1038@11:2>@28:0>:int,
                                               <<<init_1038@11:2>@28:1>@40:0>:int)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,<<init_1038@11:2>@28:0>:int),
          (<init_1038@11:0> >= <init_1038@11:1>)
          |- P[<<init_1038@11:2>@28:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                        <<init_1038@11:2>@28:0>:int)
          
          P[<init_1038@11:1>](<init_1038@11:0>:int,<init_1038@11:1>:int),
          ((<init_1038@11:0> = 0) &&
           ((0 <= <<<init_1038@11:3>@14:0>@26:0>) && (<<<init_1038@11:3>@14:0>@26:0> < <init_1038@11:1>)))
          |- P[<<<init_1038@11:3>@14:0>@26:0>](<init_1038@11:0>:int,<init_1038@11:1>:int,
                                               <<<init_1038@11:3>@14:0>@26:0>:int)
          
           (<init_1038@11:0> = 0) |- P[<init_1038@11:1>](<init_1038@11:0>:int,
                                                         <init_1038@11:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(48927)[4] (0.015998 sec.)
      solution:
        P[<fail_1490@51:0>]($25:bool) = false
        P[<init_1038@11:1>]($46:int,$48:int) = true
        P[<<init_1038@11:2>@28:0>]($51:int,$53:int,$55:int) = ($53 <= 0)
        P[<<<init_1038@11:2>@28:1>@40:0>]($37:int,$39:int,$41:int,$43:int) = ($39 <= 0)
        P[<<<init_1038@11:3>@14:0>@26:0>]($58:int,$60:int,$62:int) = ($58 <= 0)
        P[<<<<init_1038@11:3>@14:0>@26:1>@42:0>]($28:int,$30:int,$32:int,$34:int) = ($30 <= 0)
    end YhornInterface.solve(48451)[3] (0.042994 sec.)
    
  end RefTypeInfer.infer_etrs(209)[2] (0.345949 sec.)
  refinement types:
    main_1484: X
    f_1487: v1:int -> X
    f_1488: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    init_1038: v1:int ->
               v2:{v2:int | (v1 <= 0)} ->
               (v3:{v3:int | false} -> (v4:{v4:int | false} -> X) -> X) ->
               ((v7:{v7:int | (1 <= v2)} -> (v8:{v8:int | false} -> X) -> X) -> X) -> X
    f_main_1485: v1:int -> v2:int -> (v3:unit -> X) -> (v5:int -> (v6:int -> X) -> X) -> X
    k_main_1406: v1:int -> v2:int -> (v3:unit -> X) -> (v5:int -> (v6:int -> X) -> X) -> v9:bool -> X
    mk_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_mk_array_1190: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    f_k_main_1486: v1:bool -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    fail_1490: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1489: var55:int -> var54:int -> var53:unit -> X
    update_1157: var65:int -> (var64:int -> (var63:int -> X) -> X) -> var60:int -> var59:int -> (var58:int -> X) -> X
  abstraction types:
    main_1484: X
    f_1487: v1:int -> X
    f_1488: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    init_1038: v1:int ->
               v2:int[v2 -> (v1 <= 0)] ->
               (v3:int -> (v4:int -> X) -> X) -> ((v7:int[v7 -> (1 <= v2)] -> (v8:int -> X) -> X) -> X) -> X
    f_main_1485: v1:int -> v2:int -> (v3:unit -> X) -> (v5:int -> (v6:int -> X) -> X) -> X
    k_main_1406: v1:int -> v2:int -> (v3:unit -> X) -> (v5:int -> (v6:int -> X) -> X) -> v9:bool -> X
    mk_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_mk_array_1190: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    f_k_main_1486: v1:bool -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    fail_1490: v1:bool -> (v2:unit -> X) -> X
    f_1489: var55:int -> var54:int -> var53:unit -> X
    update_1157: var65:int -> (var64:int -> (var63:int -> X) -> X) -> var60:int -> var59:int -> (var58:int -> X) -> X
  
end AbsTypeInfer.refine(208)[1] (0.350947 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1484
  main_1484 -> (rand_int f_1487)
  f_1487 x_1442 -> (rand_int (f_1488 x_1442))
  f_1488 x_1442 x_1455 -> (main_1042 x_1442 x_1455 (f_1489 x_1442 x_1455))
  f_1489 x_1442 x_1455 x_1439 -> end
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (x_1410 >= 1) -> (k_main_1357 ())
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (not (x_1410 >= 1)) -> (fail_1490 true k_main_1357)
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (0 <= i_1044) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 (i_1044 < n_1043))
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (not (0 <= i_1044)) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 false)
  fail_1490 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (i_1039 >= n_1040) -> (k_init_1288 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1157 i_1039 a_1041 1) k_init_1288)
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when b_1436 ->
      (x_1363 i_1044 (f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357))
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when (not b_1436) -> (k_main_1357 ())
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when b_1195 -> (k_mk_array_1187 0)
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when (not b_1195) -> (k_mk_array_1187 -1)
  main_1042 n_1043 i_1044 k_main_1357 ->
      (init_1038 0 n_1043 (mk_array_1030 n_1043) (f_main_1485 i_1044 n_1043 k_main_1357))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (0 <= i_1032) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 (i_1032 < n_1031))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (not (0 <= i_1032)) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 false)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (j_1037 = i_1034) -> (k_update_1230 x_1036)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (not (j_1037 = i_1034)) -> (a_1035 j_1037 k_update_1230)
Types:
  main_1484 : X
  fail_1490 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Filter option enabled.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 2)::
Main: main_1484
  main_1484 -> (rand_int f_1487)
  f_1487 x_1442 -> (rand_int (f_1488 x_1442))
  f_1488 x_1442 x_1455 -> (main_1042 x_1442 x_1455 (f_1489 x_1442 x_1455))
  f_1489 x_1442 x_1455 x_1439 -> end
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (x_1410 >= 1) -> (k_main_1357 ())
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (not (x_1410 >= 1)) -> (fail_1490 true k_main_1357)
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (0 <= i_1044) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 (i_1044 < n_1043))
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (not (0 <= i_1044)) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 false)
  fail_1490 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (i_1039 >= n_1040) -> (k_init_1288 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1157 i_1039 a_1041 1) k_init_1288)
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when b_1436 ->
      (x_1363 i_1044 (f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357))
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when (not b_1436) -> (k_main_1357 ())
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when b_1195 -> (k_mk_array_1187 0)
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when (not b_1195) -> (k_mk_array_1187 -1)
  main_1042 n_1043 i_1044 k_main_1357 ->
      (init_1038 0 n_1043 (mk_array_1030 n_1043) (f_main_1485 i_1044 n_1043 k_main_1357))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (0 <= i_1032) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 (i_1032 < n_1031))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (not (0 <= i_1032)) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 false)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (j_1037 = i_1034) -> (k_update_1230 x_1036)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (not (j_1037 = i_1034)) -> (a_1035 j_1037 k_update_1230)
Types:
  main_1484 : X
  fail_1490 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Negative-predicate option enabled.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 3)::
Main: main_1484
  main_1484 -> (rand_int f_1487)
  f_1487 x_1442 -> (rand_int (f_1488 x_1442))
  f_1488 x_1442 x_1455 -> (main_1042 x_1442 x_1455 (f_1489 x_1442 x_1455))
  f_1489 x_1442 x_1455 x_1439 -> end
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (x_1410 >= 1) -> (k_main_1357 ())
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (not (x_1410 >= 1)) -> (fail_1490 true k_main_1357)
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (0 <= i_1044) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 (i_1044 < n_1043))
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (not (0 <= i_1044)) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 false)
  fail_1490 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (i_1039 >= n_1040) -> (k_init_1288 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1157 i_1039 a_1041 1) k_init_1288)
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when b_1436 ->
      (x_1363 i_1044 (f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357))
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when (not b_1436) -> (k_main_1357 ())
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when b_1195 -> (k_mk_array_1187 0)
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when (not b_1195) -> (k_mk_array_1187 -1)
  main_1042 n_1043 i_1044 k_main_1357 ->
      (init_1038 0 n_1043 (mk_array_1030 n_1043) (f_main_1485 i_1044 n_1043 k_main_1357))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (0 <= i_1032) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 (i_1032 < n_1031))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (not (0 <= i_1032)) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 false)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (j_1037 = i_1034) -> (k_update_1230 x_1036)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (not (j_1037 = i_1034)) -> (a_1035 j_1037 k_update_1230)
Types:
  main_1484 : X
  fail_1490 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Set wp_max_num to 4.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 4)::
Main: main_1484
  main_1484 -> (rand_int f_1487)
  f_1487 x_1442 -> (rand_int (f_1488 x_1442))
  f_1488 x_1442 x_1455 -> (main_1042 x_1442 x_1455 (f_1489 x_1442 x_1455))
  f_1489 x_1442 x_1455 x_1439 -> end
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (x_1410 >= 1) -> (k_main_1357 ())
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (not (x_1410 >= 1)) -> (fail_1490 true k_main_1357)
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (0 <= i_1044) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 (i_1044 < n_1043))
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (not (0 <= i_1044)) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 false)
  fail_1490 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (i_1039 >= n_1040) -> (k_init_1288 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1157 i_1039 a_1041 1) k_init_1288)
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when b_1436 ->
      (x_1363 i_1044 (f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357))
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when (not b_1436) -> (k_main_1357 ())
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when b_1195 -> (k_mk_array_1187 0)
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when (not b_1195) -> (k_mk_array_1187 -1)
  main_1042 n_1043 i_1044 k_main_1357 ->
      (init_1038 0 n_1043 (mk_array_1030 n_1043) (f_main_1485 i_1044 n_1043 k_main_1357))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (0 <= i_1032) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 (i_1032 < n_1031))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (not (0 <= i_1032)) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 false)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (j_1037 = i_1034) -> (k_update_1230 x_1036)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (not (j_1037 = i_1034)) -> (a_1035 j_1037 k_update_1230)
Types:
  main_1484 : X
  fail_1490 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Set wp_max_num to 5.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 5)::
Main: main_1484
  main_1484 -> (rand_int f_1487)
  f_1487 x_1442 -> (rand_int (f_1488 x_1442))
  f_1488 x_1442 x_1455 -> (main_1042 x_1442 x_1455 (f_1489 x_1442 x_1455))
  f_1489 x_1442 x_1455 x_1439 -> end
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (x_1410 >= 1) -> (k_main_1357 ())
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (not (x_1410 >= 1)) -> (fail_1490 true k_main_1357)
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (0 <= i_1044) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 (i_1044 < n_1043))
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (not (0 <= i_1044)) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 false)
  fail_1490 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (i_1039 >= n_1040) -> (k_init_1288 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1157 i_1039 a_1041 1) k_init_1288)
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when b_1436 ->
      (x_1363 i_1044 (f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357))
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when (not b_1436) -> (k_main_1357 ())
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when b_1195 -> (k_mk_array_1187 0)
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when (not b_1195) -> (k_mk_array_1187 -1)
  main_1042 n_1043 i_1044 k_main_1357 ->
      (init_1038 0 n_1043 (mk_array_1030 n_1043) (f_main_1485 i_1044 n_1043 k_main_1357))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (0 <= i_1032) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 (i_1032 < n_1031))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (not (0 <= i_1032)) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 false)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (j_1037 = i_1034) -> (k_update_1230 x_1036)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (not (j_1037 = i_1034)) -> (a_1035 j_1037 k_update_1230)
Types:
  main_1484 : X
  fail_1490 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(5-1) Abstracting ... DONE!

(5-2) Checking HORS ... DONE!

Set wp_max_num to 6.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 6)::
Main: main_1484
  main_1484 -> (rand_int f_1487)
  f_1487 x_1442 -> (rand_int (f_1488 x_1442))
  f_1488 x_1442 x_1455 -> (main_1042 x_1442 x_1455 (f_1489 x_1442 x_1455))
  f_1489 x_1442 x_1455 x_1439 -> end
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (x_1410 >= 1) -> (k_main_1357 ())
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (not (x_1410 >= 1)) -> (fail_1490 true k_main_1357)
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (0 <= i_1044) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 (i_1044 < n_1043))
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (not (0 <= i_1044)) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 false)
  fail_1490 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (i_1039 >= n_1040) -> (k_init_1288 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1157 i_1039 a_1041 1) k_init_1288)
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when b_1436 ->
      (x_1363 i_1044 (f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357))
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when (not b_1436) -> (k_main_1357 ())
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when b_1195 -> (k_mk_array_1187 0)
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when (not b_1195) -> (k_mk_array_1187 -1)
  main_1042 n_1043 i_1044 k_main_1357 ->
      (init_1038 0 n_1043 (mk_array_1030 n_1043) (f_main_1485 i_1044 n_1043 k_main_1357))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (0 <= i_1032) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 (i_1032 < n_1031))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (not (0 <= i_1032)) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 false)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (j_1037 = i_1034) -> (k_update_1230 x_1036)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (not (j_1037 = i_1034)) -> (a_1035 j_1037 k_update_1230)
Types:
  main_1484 : X
  fail_1490 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(6-1) Abstracting ... DONE!

(6-2) Checking HORS ... DONE!

Set wp_max_num to 7.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 7)::
Main: main_1484
  main_1484 -> (rand_int f_1487)
  f_1487 x_1442 -> (rand_int (f_1488 x_1442))
  f_1488 x_1442 x_1455 -> (main_1042 x_1442 x_1455 (f_1489 x_1442 x_1455))
  f_1489 x_1442 x_1455 x_1439 -> end
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (x_1410 >= 1) -> (k_main_1357 ())
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (not (x_1410 >= 1)) -> (fail_1490 true k_main_1357)
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (0 <= i_1044) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 (i_1044 < n_1043))
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (not (0 <= i_1044)) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 false)
  fail_1490 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (i_1039 >= n_1040) -> (k_init_1288 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1157 i_1039 a_1041 1) k_init_1288)
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when b_1436 ->
      (x_1363 i_1044 (f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357))
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when (not b_1436) -> (k_main_1357 ())
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when b_1195 -> (k_mk_array_1187 0)
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when (not b_1195) -> (k_mk_array_1187 -1)
  main_1042 n_1043 i_1044 k_main_1357 ->
      (init_1038 0 n_1043 (mk_array_1030 n_1043) (f_main_1485 i_1044 n_1043 k_main_1357))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (0 <= i_1032) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 (i_1032 < n_1031))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (not (0 <= i_1032)) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 false)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (j_1037 = i_1034) -> (k_update_1230 x_1036)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (not (j_1037 = i_1034)) -> (a_1035 j_1037 k_update_1230)
Types:
  main_1484 : X
  fail_1490 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(7-1) Abstracting ... DONE!

(7-2) Checking HORS ... DONE!

Set wp_max_num to 8.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 8)::
Main: main_1484
  main_1484 -> (rand_int f_1487)
  f_1487 x_1442 -> (rand_int (f_1488 x_1442))
  f_1488 x_1442 x_1455 -> (main_1042 x_1442 x_1455 (f_1489 x_1442 x_1455))
  f_1489 x_1442 x_1455 x_1439 -> end
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (x_1410 >= 1) -> (k_main_1357 ())
  f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357 x_1410 when (not (x_1410 >= 1)) -> (fail_1490 true k_main_1357)
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (0 <= i_1044) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 (i_1044 < n_1043))
  f_main_1485 i_1044 n_1043 k_main_1357 x_1363 when (not (0 <= i_1044)) ->
      (k_main_1406 i_1044 n_1043 k_main_1357 x_1363 false)
  fail_1490 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (i_1039 >= n_1040) -> (k_init_1288 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1288 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1157 i_1039 a_1041 1) k_init_1288)
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when b_1436 ->
      (x_1363 i_1044 (f_k_main_1486 b_1436 i_1044 n_1043 k_main_1357))
  k_main_1406 i_1044 n_1043 k_main_1357 x_1363 b_1436 when (not b_1436) -> (k_main_1357 ())
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when b_1195 -> (k_mk_array_1187 0)
  k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 b_1195 when (not b_1195) -> (k_mk_array_1187 -1)
  main_1042 n_1043 i_1044 k_main_1357 ->
      (init_1038 0 n_1043 (mk_array_1030 n_1043) (f_main_1485 i_1044 n_1043 k_main_1357))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (0 <= i_1032) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 (i_1032 < n_1031))
  mk_array_1030 n_1031 i_1032 k_mk_array_1187 when (not (0 <= i_1032)) ->
      (k_mk_array_1190 i_1032 n_1031 k_mk_array_1187 false)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (j_1037 = i_1034) -> (k_update_1230 x_1036)
  update_1157 i_1034 a_1035 x_1036 j_1037 k_update_1230 when (not (j_1037 = i_1034)) -> (a_1035 j_1037 k_update_1230)
Types:
  main_1484 : X
  fail_1490 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(8-1) Abstracting ... DONE!

(8-2) Checking HORS ... DONE!

Error trace::
  main_1484 ... --> 
  f_1487 ... --> 
  f_1488 ... --> 
  main_1042 ... --> 
  init_1038 [1/2] ... --> 
  f_main_1485 [1/2] ... --> 
  k_main_1406 [1/2] ... --> 
  mk_array_1030 [1/2] ... --> 
  k_mk_array_1190 [1/2] ... --> 
  f_k_main_1486 [2/2] ... --> 
  fail_1490 ... --> fail -->
  ERROR!

Verification failed (new error path not found)
