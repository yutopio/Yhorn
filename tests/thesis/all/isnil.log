MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi isnil.ml

parsed::
 let is_nil_1030 xs_1031 = (match xs_1031 with
                              | [] -> true
                              | _ -> false) 
 in
 let rec make_list_1032 n_1033 = if n_1033 = 0 then
                                   []
                                 else
                                   n_1033::make_list_1032 (n_1033 - 1) 
 in
 let main_1034 n_1035 =
   let xs_1036 = make_list_1032 n_1035 
   in
     if n_1035 > 0 then
       if not is_nil_1030 xs_1036 then
         ()
       else
         {fail} ()
     else
       () 
 in
   ()

set_target::
 let is_nil_1030 xs_1031 = (match xs_1031 with
                              | [] -> true
                              | _ -> false) 
 in
 let rec make_list_1032 n_1033 = if n_1033 = 0 then
                                   []
                                 else
                                   n_1033::make_list_1032 (n_1033 - 1) 
 in
 let main_1034 n_1035 =
   let xs_1036 = make_list_1032 n_1035 
   in
     if n_1035 > 0 then
       if not is_nil_1030 xs_1036 then
         ()
       else
         {fail} ()
     else
       () 
 in
 let main_1051 = let arg1_1050 = rand_int () 
                 in
                   main_1034 arg1_1050 
 in
   ()

abst_list::
 let is_nil_1030 (xs_1031:(int * (int -> int))) = if fst xs_1031 = 0 then
                                                    true
                                                  else
                                                    false 
 in
 let rec make_list_1032 (n_1033:int) =
   if n_1033 = 0 then
     (0, fun x_1077 -> _|_)
   else
     let cons_make_list_1073 (x_1071:int) (xs_1072:(int * (int -> int))) =
       (fst xs_1072 + 1, fun i_1070 -> (if i_1070 = 0 then
                                          x_1071
                                        else
                                          (snd xs_1072) (i_1070 - 1))) 
     in
       cons_make_list_1073 n_1033 (make_list_1032 (n_1033 - 1)) 
 in
 let main_1034 (n_1035:int) =
   let xs_1036 = make_list_1032 n_1035 
   in
     if n_1035 > 0 then
       if not is_nil_1030 xs_1036 then
         ()
       else
         {fail} ()
     else
       () 
 in
 let main_1051 = let arg1_1050 = rand_int () 
                 in
                   main_1034 arg1_1050 
 in
   ()

CPS::
 let is_nil_1030 (xs_1031:(int * (int -> ((int -> X) -> X)))) (k_is_nil_1133:(
   bool -> X)) = if fst xs_1031 = 0 then
                   k_is_nil_1133 true
                 else
                   k_is_nil_1133 false 
 in
 let rec make_list_1032 (n_1033:int) (k_make_list_1166:((int * (int -> ((int -> X) -> X))) -> X)) =
   if n_1033 = 0 then
     k_make_list_1166 (0, fun x_1077 -> fun k_make_list_1178 -> _|_)
   else
     let cons_make_list_1073
       (x_1071:int) (xs_1072:(int * (int -> ((int -> X) -> X)))) (k_make_list_cons_make_list_1225:(
       (int * (int -> ((int -> X) -> X))) -> X)) =
       k_make_list_cons_make_list_1225
         (fst xs_1072 + 1,
         fun i_1070 ->
           fun k_make_list_cons_make_list_1240 ->
             (if i_1070 = 0 then
                k_make_list_cons_make_list_1240 x_1071
              else
                (snd xs_1072) (i_1070 - 1) k_make_list_cons_make_list_1240)) 
     in
       make_list_1032 (n_1033 - 1) (fun x_1303 -> cons_make_list_1073 n_1033 x_1303 k_make_list_1166) 
 in
 let main_1034 (n_1035:int) (k_main_1324:(unit -> X)) =
   make_list_1032 n_1035
     (fun x_1330 ->
        (if n_1035 > 0 then
           is_nil_1030 x_1330 (fun b_1358 -> (if not b_1358 then
                                                k_main_1324 ()
                                              else
                                                {|fail|} () k_main_1324))
         else
           k_main_1324 ())) 
 in
   rand_int_cps () (fun x_1401 -> main_1034 x_1401 (fun x_1398 -> end))

remove_pair::
 let is_nil_1030 (xs1_1031:int) (xs2_1031:(int -> ((int -> X) -> X))) (k_is_nil_1133:(
   bool -> X)) = if xs1_1031 = 0 then
                   k_is_nil_1133 true
                 else
                   k_is_nil_1133 false 
 in
 let rec make_list_1032 (n_1033:int) (k_make_list_1166:(int -> ((int -> ((int -> X) -> X)) -> X))) =
   if n_1033 = 0 then
     k_make_list_1166 0 (fun x_1077 -> fun k_make_list_1178 -> _|_)
   else
     let cons_make_list_1073
       (x_1071:int) (xs1_1072:int) (xs2_1072:(int -> ((int -> X) -> X))) (k_make_list_cons_make_list_1225:(
       int -> ((int -> ((int -> X) -> X)) -> X))) =
       k_make_list_cons_make_list_1225 (xs1_1072 + 1)
         (fun i_1070 ->
            fun k_make_list_cons_make_list_1240 ->
              (if i_1070 = 0 then
                 k_make_list_cons_make_list_1240 x_1071
               else
                 xs2_1072 (i_1070 - 1) k_make_list_cons_make_list_1240)) 
     in
       make_list_1032 (n_1033 - 1)
         (fun x1_1303 -> fun x2_1303 -> cons_make_list_1073 n_1033 x1_1303 x2_1303 k_make_list_1166) 
 in
 let main_1034 (n_1035:int) (k_main_1324:(unit -> X)) =
   make_list_1032 n_1035
     (fun x1_1330 ->
        fun x2_1330 ->
          (if n_1035 > 0 then
             is_nil_1030 x1_1330 x2_1330
               (fun b_1358 -> (if not b_1358 then
                                 k_main_1324 ()
                               else
                                 {|fail|} () k_main_1324))
           else
             k_main_1324 ())) 
 in
   rand_int_cps () (fun x_1401 -> main_1034 x_1401 (fun x_1398 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1447
  main_1447 -> (rand_int f_1453)
  cons_make_list_1073 n_1033 x_1071 xs1_1072 xs2_1072 k_make_list_cons_make_list_1225 ->
      (k_make_list_cons_make_list_1225 (xs1_1072 + 1) (f_cons_make_list_1449 n_1033 x_1071 xs1_1072 xs2_1072))
  f_1453 x_1401 -> (main_1034 x_1401 (f_1454 x_1401))
  f_1454 x_1401 x_1398 -> end
  f_cons_make_list_1449 n_1033 x_1071 xs1_1072 xs2_1072 i_1070 k_make_list_cons_make_list_1240 when (
      i_1070 = 0) -> (k_make_list_cons_make_list_1240 x_1071)
  f_cons_make_list_1449 n_1033 x_1071 xs1_1072 xs2_1072 i_1070 k_make_list_cons_make_list_1240 when (
      not (i_1070 = 0)) -> (xs2_1072 (i_1070 - 1) k_make_list_cons_make_list_1240)
  f_main_1451 n_1035 k_main_1324 x1_1330 x2_1330 when (n_1035 > 0) ->
      (is_nil_1030 x1_1330 x2_1330 (f_main_1452 n_1035 x1_1330 k_main_1324))
  f_main_1451 n_1035 k_main_1324 x1_1330 x2_1330 when (not (n_1035 > 0)) -> (k_main_1324 ())
  f_main_1452 n_1035 x1_1330 k_main_1324 b_1358 when (not b_1358) -> (k_main_1324 ())
  f_main_1452 n_1035 x1_1330 k_main_1324 b_1358 when (not (not b_1358)) -> (fail_1455 true k_main_1324)
  f_make_list_1448 n_1033 x_1077 k_make_list_1178 -> _|_
  f_make_list_1450 n_1033 k_make_list_1166 x1_1303 x2_1303 ->
      (cons_make_list_1073 n_1033 n_1033 x1_1303 x2_1303 k_make_list_1166)
  fail_1455 b k -> {fail} => (k ())
  is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1133 when (xs1_1031 = 0) -> (k_is_nil_1133 true)
  is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1133 when (not (xs1_1031 = 0)) -> (k_is_nil_1133 false)
  main_1034 n_1035 k_main_1324 -> (make_list_1032 n_1035 (f_main_1451 n_1035 k_main_1324))
  make_list_1032 n_1033 k_make_list_1166 when (n_1033 = 0) -> (k_make_list_1166 0 (f_make_list_1448 n_1033))
  make_list_1032 n_1033 k_make_list_1166 when (not (n_1033 = 0)) ->
      (make_list_1032 (n_1033 - 1) (f_make_list_1450 n_1033 k_make_list_1166))
Types:
  main_1447 : X
  fail_1455 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1032 : (int -> (int -> (int -> (int -> X) -> X) -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1447 ... --> 
  f_1453 ... --> 
  main_1034 ... --> 
  make_list_1032 [1/2] ... --> 
  f_main_1451 [1/2] ... --> 
  is_nil_1030 [1/2] ... --> 
  f_main_1452 [2/2] ... --> 
  fail_1455 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(133)[1]
  program:
    main_1447  | true = ((Random.int 0) f_1453)
    cons_make_list_1073 n_1033 x_1071 xs1_1072 xs2_1072 k_make_list_cons_make_list_1225 | true = (
    k_make_list_cons_make_list_1225 (xs1_1072 + 1)
                                    (f_cons_make_list_1449 n_1033
                                                           x_1071
                                                           xs1_1072
                                                           xs2_1072))
    f_1453 x_1401 | true = (main_1034 x_1401
                                      (f_1454 x_1401))
    f_1454 x_1401 x_1398 | true = end
    f_cons_make_list_1449 n_1033 x_1071 xs1_1072 xs2_1072 i_1070 k_make_list_cons_make_list_1240 | (
    i_1070 = 0) = (k_make_list_cons_make_list_1240 x_1071)
    f_cons_make_list_1449 n_1033 x_1071 xs1_1072 xs2_1072 i_1070 k_make_list_cons_make_list_1240 | (
    not (i_1070 = 0)) = (xs2_1072 (i_1070 - 1)
                                  k_make_list_cons_make_list_1240)
    f_main_1451 n_1035 k_main_1324 x1_1330 x2_1330 | (n_1035 > 0) = (
    is_nil_1030 x1_1330
                x2_1330
                (f_main_1452 n_1035
                             x1_1330
                             k_main_1324))
    f_main_1451 n_1035 k_main_1324 x1_1330 x2_1330 | (not (n_1035 > 0)) = (
    k_main_1324 ())
    f_main_1452 n_1035 x1_1330 k_main_1324 b_1358 | (not b_1358) = (k_main_1324 ())
    f_main_1452 n_1035 x1_1330 k_main_1324 b_1358 | (not (not b_1358)) = (
    fail_1455 true
              k_main_1324)
    f_make_list_1448 n_1033 x_1077 k_make_list_1178 | true = bot
    f_make_list_1450 n_1033 k_make_list_1166 x1_1303 x2_1303 | true = (
    cons_make_list_1073 n_1033
                        n_1033
                        x1_1303
                        x2_1303
                        k_make_list_1166)
    fail_1455 b k | true = (fail ())
    is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1133 | (xs1_1031 = 0) = (k_is_nil_1133 true)
    is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1133 | (not (xs1_1031 = 0)) = (
    k_is_nil_1133 false)
    main_1034 n_1035 k_main_1324 | true = (make_list_1032 n_1035
                                                          (f_main_1451 n_1035
                                                                    k_main_1324))
    make_list_1032 n_1033 k_make_list_1166 | (n_1033 = 0) = (k_make_list_1166 0
                                                                    (f_make_list_1448 n_1033))
    make_list_1032 n_1033 k_make_list_1166 | (not (n_1033 = 0)) = (make_list_1032
                                                                    (
                                                                    n_1033 - 1)
                                                                    (
                                                                    f_make_list_1450 n_1033
                                                                    k_make_list_1166))
    main_1447:X
    cons_make_list_1073:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1453:int -> X
    f_1454:int -> unit -> X
    f_cons_make_list_1449:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_main_1451:int -> (unit -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_main_1452:int -> int -> (unit -> X) -> bool -> X
    f_make_list_1448:int -> int -> (int -> X) -> X
    f_make_list_1450:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    fail_1455:bool -> (unit -> X) -> X
    is_nil_1030:int -> (int -> (int -> X) -> X) -> (bool -> X) -> X
    main_1034:int -> (unit -> X) -> X
    make_list_1032:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
  inlined functions: cons_make_list_1073,f_1453,f_1454,f_cons_make_list_1449,f_main_1451,f_main_1452,f_make_list_1448,f_make_list_1450,is_nil_1030,main_1034
  counterexample: 0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1453@4:0> = var2)
     [true.(<main_1034@6:0> = <f_1453@4:0>)
      [true.(<make_list_1032@8:0> = <main_1034@6:0>)
       [(<make_list_1032@8:0> = 0).(<<make_list_1032@8:1>@11:0> = 0)
        [true.((<f_main_1451@13:0> = <main_1034@6:0>) && (<f_main_1451@13:2> = <<make_list_1032@8:1>@11:0>))
         [(<f_main_1451@13:0> > 0).(<is_nil_1030@16:0> = <f_main_1451@13:2>)
          [(<is_nil_1030@16:0> = 0).(<<is_nil_1030@16:2>@19:0> = true)
           [true.
            ((<f_main_1452@21:0> = <f_main_1451@13:0>) &&
             ((<f_main_1452@21:1> = <f_main_1451@13:2>) && (<f_main_1452@21:3> = <<is_nil_1030@16:2>@19:0>)))
            [(not (not <f_main_1452@21:3>)).(<fail_1455@24:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(134)[2]
    horn clauses:
      P[<fail_1455@24:0>](<fail_1455@24:0>:bool)|- bot
      
      P[<f_main_1452@21:3>](<f_main_1452@21:0>:int,<f_main_1452@21:1>:int,true:bool), <fail_1455@24:0>
      |- P[<fail_1455@24:0>](<fail_1455@24:0>:bool)
      
      P[<f_main_1451@13:2>](<f_main_1452@21:0>:int,<f_main_1452@21:1>:int),
      P[<<is_nil_1030@16:2>@19:0>](<f_main_1452@21:1>:int,<f_main_1452@21:3>:bool), (
      <f_main_1452@21:0> > 0)
      |- P[<f_main_1452@21:3>](<f_main_1452@21:0>:int,<f_main_1452@21:1>:int,
                               <f_main_1452@21:3>:bool)
      
      P[<is_nil_1030@16:0>](<is_nil_1030@16:0>:int), ((<is_nil_1030@16:0> = 0) && <<is_nil_1030@16:2>@19:0>)
      |- P[<<is_nil_1030@16:2>@19:0>](<is_nil_1030@16:0>:int,<<is_nil_1030@16:2>@19:0>:bool)
      
      P[<f_main_1451@13:2>](<f_main_1451@13:0>:int,<is_nil_1030@16:0>:int), (
      <f_main_1451@13:0> > 0) |- P[<is_nil_1030@16:0>](<is_nil_1030@16:0>:int)
      
      P[<main_1034@6:0>](<f_main_1451@13:0>:int),
      P[<<make_list_1032@8:1>@11:0>](<f_main_1451@13:0>:int,<f_main_1451@13:2>:int)|- P[<f_main_1451@13:2>](
      <f_main_1451@13:0>:int,<f_main_1451@13:2>:int)
      
      P[<make_list_1032@8:0>](<make_list_1032@8:0>:int),
      ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
      |- P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,<<make_list_1032@8:1>@11:0>:int)
      
      P[<main_1034@6:0>](<make_list_1032@8:0>:int)|- P[<make_list_1032@8:0>](<make_list_1032@8:0>:int)
      
      P[<f_1453@4:0>](<main_1034@6:0>:int)|- P[<main_1034@6:0>](<main_1034@6:0>:int)
      
      |- P[<f_1453@4:0>](<f_1453@4:0>:int)
    call trees:
      <main_1447@1>
        <f_1453@4>
          <main_1034@6>
            <make_list_1032@8>
            </<make_list_1032@8:1>@11>
            <f_main_1451@13>
              <is_nil_1030@16>
              </<is_nil_1030@16:2>@19>
              <f_main_1452@21>
                <fail_1455@24>
    inlined horn clauses:
      P[<fail_1455@24:0>](<fail_1455@24:0>:bool)|- bot
      
      P[<<make_list_1032@8:1>@11:0>](<f_main_1452@21:0>:int,0:int), (
      (<f_main_1452@21:0> > 0) && <fail_1455@24:0>) |- P[<fail_1455@24:0>](
      <fail_1455@24:0>:bool)
      
      P[<make_list_1032@8:0>](<make_list_1032@8:0>:int),
      ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
      |- P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,<<make_list_1032@8:1>@11:0>:int)
      
      |- P[<make_list_1032@8:0>](<make_list_1032@8:0>:int)
    begin ParamSubstInfer.infer(1287)[3]
      
    end ParamSubstInfer.infer(1287)[3] (0.007999 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1289)[3]
      
    end RefTypeInfer.elim_coeffs(1289)[3] (0.000000 sec.)
    begin GenHcSolver.solve(1422)[3]
      Horn clauses:
        P[<fail_1455@24:0>](<fail_1455@24:0>:bool)|- bot
        
        P[<<make_list_1032@8:1>@11:0>](<f_main_1452@21:0>:int,0:int), (
        (<f_main_1452@21:0> > 0) && <fail_1455@24:0>) |- P[<fail_1455@24:0>](
        <fail_1455@24:0>:bool)
        
        P[<make_list_1032@8:0>](<make_list_1032@8:0>:int),
        ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
        |- P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,<<make_list_1032@8:1>@11:0>:int)
        
        |- P[<make_list_1032@8:0>](<make_list_1032@8:0>:int)
      lower bounds:
        P[<make_list_1032@8:0>](<make_list_1032@8:0>:int) = true
        P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,<<make_list_1032@8:1>@11:0>:int) =
        ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
        P[<fail_1455@24:0>](<fail_1455@24:0>:bool) = false
      upper bounds:
        P[<fail_1455@24:0>](var6:bool) = true
      begin GenHcSolver.classify_pids(2044)[4]
        output:
          [<fail_1455@24:0>]
      end GenHcSolver.classify_pids(2044)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2047)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2048)[5]
          begin InterpProver.interpolate_fresh(2049)[6]
            begin InterpProver.interpolate_log(2050)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2051)[8]
                begin InterpProver.interpolate_simplify(2052)[9]
                  begin InterpProver.interpolate_quick(2065)[10]
                    
                  end InterpProver.interpolate_quick(2065)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2069)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2069)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2052)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2051)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2050)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2049)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2048)[5] (0.000000 sec.)
        output:
          P[<fail_1455@24:0>](<fail_1455@24:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2047)[4] (0.000000 sec.)
      Horn clauses:
        P[<<make_list_1032@8:1>@11:0>](<f_main_1452@21:0>:int,0:int), (<f_main_1452@21:0> > 0) |- bot
        
        P[<make_list_1032@8:0>](<make_list_1032@8:0>:int),
        ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
        |- P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,<<make_list_1032@8:1>@11:0>:int)
        
        |- P[<make_list_1032@8:0>](<make_list_1032@8:0>:int)
      lower bounds:
        P[<make_list_1032@8:0>](<make_list_1032@8:0>:int) = true
        P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,<<make_list_1032@8:1>@11:0>:int) =
        ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
      upper bounds:
        P[<<make_list_1032@8:1>@11:0>](var7:int,var8:int) = ((var8 <> 0) || (var7 <= 0))
      begin GenHcSolver.classify_pids(2850)[4]
        output:
          [<<make_list_1032@8:1>@11:0>]
      end GenHcSolver.classify_pids(2850)[4] (0.000000 sec.)
      lb:((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
      nub:(not ((<<make_list_1032@8:1>@11:0> <> 0) || (<make_list_1032@8:0> <= 0)))
      begin ApronInterface.convex_hull_interpolate(2853)[4]
        lb:((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
        nub:(not ((<<make_list_1032@8:1>@11:0> <> 0) || (<make_list_1032@8:0> <= 0)))
        lb':((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
        nub':(not ((<<make_list_1032@8:1>@11:0> <> 0) || (<make_list_1032@8:0> <= 0)))
        begin InterpProver.interpolate(2854)[5]
          begin InterpProver.interpolate_fresh(2855)[6]
            begin InterpProver.interpolate_log(2856)[7]
              input1: ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
              input2: (not ((<<make_list_1032@8:1>@11:0> <> 0) || (<make_list_1032@8:0> <= 0)))
              begin InterpProver.interpolate_check(2857)[8]
                begin InterpProver.interpolate_simplify(2858)[9]
                  begin InterpProver.interpolate_quick(2895)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(2904)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(2905)[12]
                        begin CsisatInterface.interpolate_csisat_log(2906)[13]
                          input1: (0 = v_sep_make_list_1032_sep_8_sep_0 & 0 = v_sep_make_list_1032_sep_8_sep_1_sep_11_sep_0)
                          input2: (0 = v_sep_make_list_1032_sep_8_sep_1_sep_11_sep_0 & 1 <= v_sep_make_list_1032_sep_8_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(2907)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(2907)[14] (0.000000 sec.)
                          output: 2*v_sep_make_list_1032_sep_8_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(2906)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_make_list_1032_sep_8_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_make_list_1032_sep_8_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(2905)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(2904)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(2895)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(2858)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(2857)[8] (0.001999 sec.)
              output: (<make_list_1032@8:0> <= 0)
            end InterpProver.interpolate_log(2856)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(2855)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(2854)[5] (0.001999 sec.)
        output:
          P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,<<make_list_1032@8:1>@11:0>:int) =
          (<make_list_1032@8:0> <= 0)
      end ApronInterface.convex_hull_interpolate(2853)[4] (0.001999 sec.)
      Horn clauses:
        |- P[<make_list_1032@8:0>](<make_list_1032@8:0>:int)
      lower bounds:
        P[<make_list_1032@8:0>](<make_list_1032@8:0>:int) = true
      upper bounds:
        P[<make_list_1032@8:0>](var9:int) = true
      begin GenHcSolver.classify_pids(3197)[4]
        output:
          [<make_list_1032@8:0>]
      end GenHcSolver.classify_pids(3197)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(3200)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(3201)[5]
          begin InterpProver.interpolate_fresh(3202)[6]
            begin InterpProver.interpolate_log(3203)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(3204)[8]
                begin InterpProver.interpolate_simplify(3205)[9]
                  begin InterpProver.interpolate_quick(3218)[10]
                    
                  end InterpProver.interpolate_quick(3218)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3205)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3204)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(3203)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(3202)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(3201)[5] (0.000000 sec.)
        output:
          P[<make_list_1032@8:0>](<make_list_1032@8:0>:int) = true
      end ApronInterface.convex_hull_interpolate(3200)[4] (0.000000 sec.)
      begin HcSolver.check_validity(3273)[4]
        input:
          P[<fail_1455@24:0>](<fail_1455@24:0>:bool)|- bot
          
          P[<<make_list_1032@8:1>@11:0>](<f_main_1452@21:0>:int,0:int), (
          (<f_main_1452@21:0> > 0) && <fail_1455@24:0>) |- P[<fail_1455@24:0>](
          <fail_1455@24:0>:bool)
          
          P[<make_list_1032@8:0>](<make_list_1032@8:0>:int),
          ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
          |- P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,
                                            <<make_list_1032@8:1>@11:0>:int)
          
          |- P[<make_list_1032@8:0>](<make_list_1032@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3273)[4] (0.000000 sec.)
      solution:
        P[<fail_1455@24:0>](<fail_1455@24:0>:bool) = false
        P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,<<make_list_1032@8:1>@11:0>:int) =
        (<make_list_1032@8:0> <= 0)
        P[<make_list_1032@8:0>](<make_list_1032@8:0>:int) = true
    end GenHcSolver.solve(1422)[3] (0.011998 sec.)
    begin GenHcSolver.solve(3467)[3]
      Horn clauses:
        P[<fail_1455@24:0>](<fail_1455@24:0>:bool)|- bot
        
        P[<<make_list_1032@8:1>@11:0>](<f_main_1452@21:0>:int,0:int), (
        (<f_main_1452@21:0> > 0) && <fail_1455@24:0>) |- P[<fail_1455@24:0>](
        <fail_1455@24:0>:bool)
        
        P[<make_list_1032@8:0>](<make_list_1032@8:0>:int),
        ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
        |- P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,<<make_list_1032@8:1>@11:0>:int)
        
        |- P[<make_list_1032@8:0>](<make_list_1032@8:0>:int)
      lower bounds:
        P[<make_list_1032@8:0>](<make_list_1032@8:0>:int) = true
        P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,<<make_list_1032@8:1>@11:0>:int) =
        ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
        P[<fail_1455@24:0>](<fail_1455@24:0>:bool) = false
      upper bounds:
        P[<fail_1455@24:0>](var11:bool) = true
      begin GenHcSolver.classify_pids(4089)[4]
        output:
          [<fail_1455@24:0>]
      end GenHcSolver.classify_pids(4089)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(4092)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(4095)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4095)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(4100)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4100)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(4103)[5]
          begin InterpProver.interpolate_fresh(4104)[6]
            begin InterpProver.interpolate_log(4105)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(4106)[8]
                begin InterpProver.interpolate_simplify(4107)[9]
                  begin InterpProver.interpolate_quick(4122)[10]
                    
                  end InterpProver.interpolate_quick(4122)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(4126)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(4126)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4107)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(4106)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(4105)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(4104)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(4103)[5] (0.001000 sec.)
        output:
          P[<fail_1455@24:0>](<fail_1455@24:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(4092)[4] (0.002000 sec.)
      Horn clauses:
        P[<<make_list_1032@8:1>@11:0>](<f_main_1452@21:0>:int,0:int), (<f_main_1452@21:0> > 0) |- bot
        
        P[<make_list_1032@8:0>](<make_list_1032@8:0>:int),
        ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
        |- P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,<<make_list_1032@8:1>@11:0>:int)
        
        |- P[<make_list_1032@8:0>](<make_list_1032@8:0>:int)
      lower bounds:
        P[<make_list_1032@8:0>](<make_list_1032@8:0>:int) = true
        P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,<<make_list_1032@8:1>@11:0>:int) =
        ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
      upper bounds:
        P[<<make_list_1032@8:1>@11:0>](var12:int,var13:int) = ((var13 <> 0) || (var12 <= 0))
      begin GenHcSolver.classify_pids(4914)[4]
        output:
          [<<make_list_1032@8:1>@11:0>]
      end GenHcSolver.classify_pids(4914)[4] (0.000000 sec.)
      lb:((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
      nub:(not ((<<make_list_1032@8:1>@11:0> <> 0) || (<make_list_1032@8:0> <= 0)))
      begin ApronInterface.convex_hull_interpolate(4917)[4]
        lb:((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
        nub:(not ((<<make_list_1032@8:1>@11:0> <> 0) || (<make_list_1032@8:0> <= 0)))
        begin ExtFormula.Formula.case_analysis_boolean(4925)[5]
          ts: ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
          
        end ExtFormula.Formula.case_analysis_boolean(4925)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(4939)[5]
          ts: ((<<make_list_1032@8:1>@11:0> = 0) && (<make_list_1032@8:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(4939)[5] (0.000000 sec.)
        lb':((<<make_list_1032@8:1>@11:0> = 0) && (<make_list_1032@8:0> = 0))
        nub':((<<make_list_1032@8:1>@11:0> = 0) && ((-1 + <make_list_1032@8:0>) >= 0))
        begin InterpProver.interpolate(4944)[5]
          begin InterpProver.interpolate_fresh(4945)[6]
            begin InterpProver.interpolate_log(4946)[7]
              input1: ((<<make_list_1032@8:1>@11:0> = 0) && (<make_list_1032@8:0> = 0))
              input2: ((<<make_list_1032@8:1>@11:0> = 0) && ((-1 + <make_list_1032@8:0>) >= 0))
              begin InterpProver.interpolate_check(4947)[8]
                begin InterpProver.interpolate_simplify(4948)[9]
                  begin InterpProver.interpolate_quick(4991)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(5000)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(5001)[12]
                        begin CsisatInterface.interpolate_csisat_log(5002)[13]
                          input1: (0 = v_sep_make_list_1032_sep_8_sep_0 & 0 = v_sep_make_list_1032_sep_8_sep_1_sep_11_sep_0)
                          input2: (0 = v_sep_make_list_1032_sep_8_sep_1_sep_11_sep_0 & 1 <= v_sep_make_list_1032_sep_8_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(5003)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(5003)[14] (0.000000 sec.)
                          output: 2*v_sep_make_list_1032_sep_8_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(5002)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_make_list_1032_sep_8_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_make_list_1032_sep_8_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(5001)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(5000)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(4991)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(4948)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(4947)[8] (0.002000 sec.)
              output: (<make_list_1032@8:0> <= 0)
            end InterpProver.interpolate_log(4946)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(4945)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(4944)[5] (0.002000 sec.)
        output:
          P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,<<make_list_1032@8:1>@11:0>:int) =
          (<make_list_1032@8:0> <= 0)
      end ApronInterface.convex_hull_interpolate(4917)[4] (0.003000 sec.)
      Horn clauses:
        |- P[<make_list_1032@8:0>](<make_list_1032@8:0>:int)
      lower bounds:
        P[<make_list_1032@8:0>](<make_list_1032@8:0>:int) = true
      upper bounds:
        P[<make_list_1032@8:0>](var14:int) = true
      begin GenHcSolver.classify_pids(5295)[4]
        output:
          [<make_list_1032@8:0>]
      end GenHcSolver.classify_pids(5295)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(5298)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(5301)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(5301)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5306)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5306)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(5309)[5]
          begin InterpProver.interpolate_fresh(5310)[6]
            begin InterpProver.interpolate_log(5311)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(5312)[8]
                begin InterpProver.interpolate_simplify(5313)[9]
                  begin InterpProver.interpolate_quick(5327)[10]
                    
                  end InterpProver.interpolate_quick(5327)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5313)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(5312)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(5311)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(5310)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(5309)[5] (0.001000 sec.)
        output:
          P[<make_list_1032@8:0>](<make_list_1032@8:0>:int) = true
      end ApronInterface.convex_hull_interpolate(5298)[4] (0.001000 sec.)
      begin HcSolver.check_validity(5384)[4]
        input:
          P[<fail_1455@24:0>](<fail_1455@24:0>:bool)|- bot
          
          P[<<make_list_1032@8:1>@11:0>](<f_main_1452@21:0>:int,0:int), (
          (<f_main_1452@21:0> > 0) && <fail_1455@24:0>) |- P[<fail_1455@24:0>](
          <fail_1455@24:0>:bool)
          
          P[<make_list_1032@8:0>](<make_list_1032@8:0>:int),
          ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
          |- P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,
                                            <<make_list_1032@8:1>@11:0>:int)
          
          |- P[<make_list_1032@8:0>](<make_list_1032@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(5384)[4] (0.001000 sec.)
      solution:
        P[<fail_1455@24:0>](<fail_1455@24:0>:bool) = false
        P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,<<make_list_1032@8:1>@11:0>:int) =
        (<make_list_1032@8:0> <= 0)
        P[<make_list_1032@8:0>](<make_list_1032@8:0>:int) = true
    end GenHcSolver.solve(3467)[3] (0.013998 sec.)
    begin YhornInterface.solve(5578)[3]
      begin HcSolver.solve_ub(5579)[4]
        encoded:
          P[<fail_1455@24:0>](<fail_1455@24:0>:int)|- bot
          
          P[<<make_list_1032@8:1>@11:0>](<f_main_1452@21:0>:int,0:int),
          ((<f_main_1452@21:0> > 0) && (<fail_1455@24:0> = 1)) |- P[<fail_1455@24:0>](
          <fail_1455@24:0>:int)
          
          P[<make_list_1032@8:0>](<make_list_1032@8:0>:int),
          ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
          |- P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,
                                            <<make_list_1032@8:1>@11:0>:int)
          
          |- P[<make_list_1032@8:0>](<make_list_1032@8:0>:int)
        input to Yhorn:
          P[<fail_1455@24:0>](<fail_1455@24:0>:int)|- bot
          
          P[<<make_list_1032@8:1>@11:0>](<f_main_1452@21:0>:int,var15:int),
          ((<f_main_1452@21:0> > 0) && ((var15 = 0) && (<fail_1455@24:0> = 1)))
          |- P[<fail_1455@24:0>](<fail_1455@24:0>:int)
          
          P[<make_list_1032@8:0>](<make_list_1032@8:0>:int),
          ((<<make_list_1032@8:1>@11:0> = 0) && (<make_list_1032@8:0> = 0))
          |- P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,
                                            <<make_list_1032@8:1>@11:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1455_sep_24_sep_0($6)) -> 1=0.
(($6-1=0) & ($7=0) & ($8>0)) & (v_sep_make_list_1032_sep_8_sep_1_sep_11_sep_0($8,$7)) -> v_sep_fail_1455_sep_24_sep_0($6).
(($9=0) & ($10=0)) & (v_sep_make_list_1032_sep_8_sep_0($9)) -> v_sep_make_list_1032_sep_8_sep_1_sep_11_sep_0($9,$10).
0=0 -> v_sep_make_list_1032_sep_8_sep_0($9).


v_sep_fail_1455_sep_24_sep_0: X
v_sep_make_list_1032_sep_8_sep_0: X
v_sep_make_list_1032_sep_8_sep_1_sep_11_sep_0: X
....
v_sep_fail_1455_sep_24_sep_0: X
v_sep_make_list_1032_sep_8_sep_0: X
v_sep_make_list_1032_sep_8_sep_1_sep_11_sep_0: X
...
v_sep_fail_1455_sep_24_sep_0: X
v_sep_make_list_1032_sep_8_sep_0: X
v_sep_make_list_1032_sep_8_sep_1_sep_11_sep_0: X
....
v_sep_fail_1455_sep_24_sep_0: X
v_sep_make_list_1032_sep_8_sep_0: X
v_sep_make_list_1032_sep_8_sep_1_sep_11_sep_0: X
....(0=0) & (v_sep_fail_1455_sep_24_sep_0($6)) -> 1=0.
(($6-1=0) & ($7=0) & ($8>0)) & (v_sep_make_list_1032_sep_8_sep_1_sep_11_sep_0($8,$7)) -> v_sep_fail_1455_sep_24_sep_0($6).
(($9=0) & ($10=0)) & (v_sep_make_list_1032_sep_8_sep_0($9)) -> v_sep_make_list_1032_sep_8_sep_1_sep_11_sep_0($9,$10).
0=0 -> v_sep_make_list_1032_sep_8_sep_0($9).

          |- P[<make_list_1032@8:0>](<make_list_1032@8:0>:int)
        solution:
          P[<fail_1455@24:0>]($11:bool) = false
          P[<make_list_1032@8:0>]($19:int) = true
          P[<<make_list_1032@8:1>@11:0>]($14:int,$16:int) = ($14 <= 0)
        
      end HcSolver.solve_ub(5579)[4] (0.009999 sec.)
      begin HcSolver.check_validity(5684)[4]
        input:
          P[<fail_1455@24:0>](<fail_1455@24:0>:bool)|- bot
          
          P[<<make_list_1032@8:1>@11:0>](<f_main_1452@21:0>:int,0:int), (
          (<f_main_1452@21:0> > 0) && <fail_1455@24:0>) |- P[<fail_1455@24:0>](
          <fail_1455@24:0>:bool)
          
          P[<make_list_1032@8:0>](<make_list_1032@8:0>:int),
          ((<make_list_1032@8:0> = 0) && (<<make_list_1032@8:1>@11:0> = 0))
          |- P[<<make_list_1032@8:1>@11:0>](<make_list_1032@8:0>:int,
                                            <<make_list_1032@8:1>@11:0>:int)
          
          |- P[<make_list_1032@8:0>](<make_list_1032@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(5684)[4] (0.000000 sec.)
      solution:
        P[<fail_1455@24:0>]($11:bool) = false
        P[<make_list_1032@8:0>]($19:int) = true
        P[<<make_list_1032@8:1>@11:0>]($14:int,$16:int) = ($14 <= 0)
    end YhornInterface.solve(5578)[3] (0.009999 sec.)
    
  end RefTypeInfer.infer_etrs(134)[2] (0.050993 sec.)
  refinement types:
    main_1447: X
    f_1453: v1:int -> X
    main_1034: v1:int -> (v2:unit -> X) -> X
    make_list_1032: v1:int -> (v2:{v2:int | (v1 <= 0)} -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_main_1451: v1:int -> (v2:unit -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    is_nil_1030: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1452: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    fail_1455: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    cons_make_list_1073: var49:int ->
                         var48:int ->
                         var47:int ->
                         (var46:int -> (var45:int -> X) -> X) ->
                         (var42:int -> (var41:int -> (var40:int -> X) -> X) -> X) -> X
    f_1454: var52:int -> var51:unit -> X
    f_cons_make_list_1449: var63:int ->
                           var62:int ->
                           var61:int -> (var60:int -> (var59:int -> X) -> X) -> var56:int -> (var55:int -> X) -> X
    f_make_list_1448: var68:int -> var67:int -> (var66:int -> X) -> X
    f_make_list_1450: var81:int ->
                      (var80:int -> (var79:int -> (var78:int -> X) -> X) -> X) ->
                      var74:int -> (var73:int -> (var72:int -> X) -> X) -> X
  abstraction types:
    main_1447: X
    f_1453: v1:int -> X
    main_1034: v1:int -> (v2:unit -> X) -> X
    make_list_1032: v1:int -> (v2:int[v2 -> (v1 <= 0)] -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_main_1451: v1:int -> (v2:unit -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    is_nil_1030: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1452: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    fail_1455: v1:bool -> (v2:unit -> X) -> X
    cons_make_list_1073: var49:int ->
                         var48:int ->
                         var47:int ->
                         (var46:int -> (var45:int -> X) -> X) ->
                         (var42:int -> (var41:int -> (var40:int -> X) -> X) -> X) -> X
    f_1454: var52:int -> var51:unit -> X
    f_cons_make_list_1449: var63:int ->
                           var62:int ->
                           var61:int -> (var60:int -> (var59:int -> X) -> X) -> var56:int -> (var55:int -> X) -> X
    f_make_list_1448: var68:int -> var67:int -> (var66:int -> X) -> X
    f_make_list_1450: var81:int ->
                      (var80:int -> (var79:int -> (var78:int -> X) -> X) -> X) ->
                      var74:int -> (var73:int -> (var72:int -> X) -> X) -> X
  
end AbsTypeInfer.refine(133)[1] (0.054991 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1447
  main_1447 -> (rand_int f_1453)
  cons_make_list_1073 n_1033 x_1071 xs1_1072 xs2_1072 k_make_list_cons_make_list_1225 ->
      (k_make_list_cons_make_list_1225 (xs1_1072 + 1) (f_cons_make_list_1449 n_1033 x_1071 xs1_1072 xs2_1072))
  f_1453 x_1401 -> (main_1034 x_1401 (f_1454 x_1401))
  f_1454 x_1401 x_1398 -> end
  f_cons_make_list_1449 n_1033 x_1071 xs1_1072 xs2_1072 i_1070 k_make_list_cons_make_list_1240 when (
      i_1070 = 0) -> (k_make_list_cons_make_list_1240 x_1071)
  f_cons_make_list_1449 n_1033 x_1071 xs1_1072 xs2_1072 i_1070 k_make_list_cons_make_list_1240 when (
      not (i_1070 = 0)) -> (xs2_1072 (i_1070 - 1) k_make_list_cons_make_list_1240)
  f_main_1451 n_1035 k_main_1324 x1_1330 x2_1330 when (n_1035 > 0) ->
      (is_nil_1030 x1_1330 x2_1330 (f_main_1452 n_1035 x1_1330 k_main_1324))
  f_main_1451 n_1035 k_main_1324 x1_1330 x2_1330 when (not (n_1035 > 0)) -> (k_main_1324 ())
  f_main_1452 n_1035 x1_1330 k_main_1324 b_1358 when (not b_1358) -> (k_main_1324 ())
  f_main_1452 n_1035 x1_1330 k_main_1324 b_1358 when (not (not b_1358)) -> (fail_1455 true k_main_1324)
  f_make_list_1448 n_1033 x_1077 k_make_list_1178 -> _|_
  f_make_list_1450 n_1033 k_make_list_1166 x1_1303 x2_1303 ->
      (cons_make_list_1073 n_1033 n_1033 x1_1303 x2_1303 k_make_list_1166)
  fail_1455 b k -> {fail} => (k ())
  is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1133 when (xs1_1031 = 0) -> (k_is_nil_1133 true)
  is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1133 when (not (xs1_1031 = 0)) -> (k_is_nil_1133 false)
  main_1034 n_1035 k_main_1324 -> (make_list_1032 n_1035 (f_main_1451 n_1035 k_main_1324))
  make_list_1032 n_1033 k_make_list_1166 when (n_1033 = 0) -> (k_make_list_1166 0 (f_make_list_1448 n_1033))
  make_list_1032 n_1033 k_make_list_1166 when (not (n_1033 = 0)) ->
      (make_list_1032 (n_1033 - 1) (f_make_list_1450 n_1033 k_make_list_1166))
Types:
  main_1447 : X
  fail_1455 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1032 : (x_1:int -> (int[x_1 <= 0] -> (int -> (int -> X) -> X) -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1447 ... --> 
  f_1453 ... --> 
  main_1034 ... --> 
  make_list_1032 [2/2] ... --> 
  make_list_1032 [1/2] ... --> 
  f_make_list_1450 ... --> 
  cons_make_list_1073 ... --> 
  f_main_1451 [1/2] ... --> 
  is_nil_1030 [1/2] ... --> 
  f_main_1452 [2/2] ... --> 
  fail_1455 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(6109)[1]
  program:
    main_1447  | true = ((Random.int 0) f_1453)
    cons_make_list_1073 n_1033 x_1071 xs1_1072 xs2_1072 k_make_list_cons_make_list_1225 | true = (
    k_make_list_cons_make_list_1225 (xs1_1072 + 1)
                                    (f_cons_make_list_1449 n_1033
                                                           x_1071
                                                           xs1_1072
                                                           xs2_1072))
    f_1453 x_1401 | true = (main_1034 x_1401
                                      (f_1454 x_1401))
    f_1454 x_1401 x_1398 | true = end
    f_cons_make_list_1449 n_1033 x_1071 xs1_1072 xs2_1072 i_1070 k_make_list_cons_make_list_1240 | (
    i_1070 = 0) = (k_make_list_cons_make_list_1240 x_1071)
    f_cons_make_list_1449 n_1033 x_1071 xs1_1072 xs2_1072 i_1070 k_make_list_cons_make_list_1240 | (
    not (i_1070 = 0)) = (xs2_1072 (i_1070 - 1)
                                  k_make_list_cons_make_list_1240)
    f_main_1451 n_1035 k_main_1324 x1_1330 x2_1330 | (n_1035 > 0) = (
    is_nil_1030 x1_1330
                x2_1330
                (f_main_1452 n_1035
                             x1_1330
                             k_main_1324))
    f_main_1451 n_1035 k_main_1324 x1_1330 x2_1330 | (not (n_1035 > 0)) = (
    k_main_1324 ())
    f_main_1452 n_1035 x1_1330 k_main_1324 b_1358 | (not b_1358) = (k_main_1324 ())
    f_main_1452 n_1035 x1_1330 k_main_1324 b_1358 | (not (not b_1358)) = (
    fail_1455 true
              k_main_1324)
    f_make_list_1448 n_1033 x_1077 k_make_list_1178 | true = bot
    f_make_list_1450 n_1033 k_make_list_1166 x1_1303 x2_1303 | true = (
    cons_make_list_1073 n_1033
                        n_1033
                        x1_1303
                        x2_1303
                        k_make_list_1166)
    fail_1455 b k | true = (fail ())
    is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1133 | (xs1_1031 = 0) = (k_is_nil_1133 true)
    is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1133 | (not (xs1_1031 = 0)) = (
    k_is_nil_1133 false)
    main_1034 n_1035 k_main_1324 | true = (make_list_1032 n_1035
                                                          (f_main_1451 n_1035
                                                                    k_main_1324))
    make_list_1032 n_1033 k_make_list_1166 | (n_1033 = 0) = (k_make_list_1166 0
                                                                    (f_make_list_1448 n_1033))
    make_list_1032 n_1033 k_make_list_1166 | (not (n_1033 = 0)) = (make_list_1032
                                                                    (
                                                                    n_1033 - 1)
                                                                    (
                                                                    f_make_list_1450 n_1033
                                                                    k_make_list_1166))
    main_1447:X
    cons_make_list_1073:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1453:int -> X
    f_1454:int -> unit -> X
    f_cons_make_list_1449:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_main_1451:int -> (unit -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_main_1452:int -> int -> (unit -> X) -> bool -> X
    f_make_list_1448:int -> int -> (int -> X) -> X
    f_make_list_1450:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    fail_1455:bool -> (unit -> X) -> X
    is_nil_1030:int -> (int -> (int -> X) -> X) -> (bool -> X) -> X
    main_1034:int -> (unit -> X) -> X
    make_list_1032:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
  inlined functions: cons_make_list_1073,f_1453,f_1454,f_cons_make_list_1449,f_main_1451,f_main_1452,f_make_list_1448,f_make_list_1450,is_nil_1030,main_1034
  counterexample: 0:0:0:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1453@30:0> = var82)
     [true.(<main_1034@32:0> = <f_1453@30:0>)
      [true.(<make_list_1032@34:0> = <main_1034@32:0>)
       [(not (<make_list_1032@34:0> = 0)).(<make_list_1032@37:0> = (<make_list_1032@34:0> - 1))
        [(<make_list_1032@37:0> = 0).(<<make_list_1032@37:1>@40:0> = 0)
         [true.
          ((<f_make_list_1450@42:0> = <make_list_1032@34:0>) &&
           (<f_make_list_1450@42:2> = <<make_list_1032@37:1>@40:0>))
          [true.
           ((<cons_make_list_1073@44:0> = <f_make_list_1450@42:0>) &&
            ((<cons_make_list_1073@44:1> = <f_make_list_1450@42:0>) &&
             (<cons_make_list_1073@44:2> = <f_make_list_1450@42:2>)))
           [true.(<<cons_make_list_1073@44:4>@46:0> = (<cons_make_list_1073@44:2> + 1))
            [true.(<<f_make_list_1450@42:1>@48:0> = <<cons_make_list_1073@44:4>@46:0>)
             [true.(<<make_list_1032@34:1>@50:0> = <<f_make_list_1450@42:1>@48:0>)
              [true.((<f_main_1451@52:0> = <main_1034@32:0>) && (<f_main_1451@52:2> = <<make_list_1032@34:1>@50:0>))
               [(<f_main_1451@52:0> > 0).(<is_nil_1030@55:0> = <f_main_1451@52:2>)
                [(<is_nil_1030@55:0> = 0).(<<is_nil_1030@55:2>@58:0> = true)
                 [true.
                  ((<f_main_1452@60:0> = <f_main_1451@52:0>) &&
                   ((<f_main_1452@60:1> = <f_main_1451@52:2>) && (<f_main_1452@60:3> = <<is_nil_1030@55:2>@58:0>)))
                  [(not (not <f_main_1452@60:3>)).(<fail_1455@63:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(6110)[2]
    horn clauses:
      P[<fail_1455@63:0>](<fail_1455@63:0>:bool)|- bot
      
      P[<f_main_1452@60:3>](<f_main_1452@60:0>:int,<f_main_1452@60:1>:int,true:bool), <fail_1455@63:0>
      |- P[<fail_1455@63:0>](<fail_1455@63:0>:bool)
      
      P[<f_main_1451@52:2>](<f_main_1452@60:0>:int,<f_main_1452@60:1>:int),
      P[<<is_nil_1030@55:2>@58:0>](<f_main_1452@60:1>:int,<f_main_1452@60:3>:bool), (
      <f_main_1452@60:0> > 0)
      |- P[<f_main_1452@60:3>](<f_main_1452@60:0>:int,<f_main_1452@60:1>:int,
                               <f_main_1452@60:3>:bool)
      
      P[<is_nil_1030@55:0>](<is_nil_1030@55:0>:int), ((<is_nil_1030@55:0> = 0) && <<is_nil_1030@55:2>@58:0>)
      |- P[<<is_nil_1030@55:2>@58:0>](<is_nil_1030@55:0>:int,<<is_nil_1030@55:2>@58:0>:bool)
      
      P[<f_main_1451@52:2>](<f_main_1451@52:0>:int,<is_nil_1030@55:0>:int), (
      <f_main_1451@52:0> > 0) |- P[<is_nil_1030@55:0>](<is_nil_1030@55:0>:int)
      
      P[<main_1034@32:0>](<f_main_1451@52:0>:int),
      P[<<make_list_1032@34:1>@50:0>](<f_main_1451@52:0>:int,<f_main_1451@52:2>:int)|- P[<f_main_1451@52:2>](
      <f_main_1451@52:0>:int,<f_main_1451@52:2>:int)
      
      P[<make_list_1032@34:0>](<make_list_1032@34:0>:int),
      P[<<f_make_list_1450@42:1>@48:0>](<make_list_1032@34:0>:int,<<make_list_1032@34:1>@50:0>:int),
      (<make_list_1032@34:0> <> 0)
      |- P[<<make_list_1032@34:1>@50:0>](<make_list_1032@34:0>:int,<<make_list_1032@34:1>@50:0>:int)
      
      P[<f_make_list_1450@42:2>](<f_make_list_1450@42:0>:int,<cons_make_list_1073@44:2>:int),
      P[<<cons_make_list_1073@44:4>@46:0>](<f_make_list_1450@42:0>:int,<f_make_list_1450@42:0>:int,<cons_make_list_1073@44:2>:int,<<f_make_list_1450@42:1>@48:0>:int)|- P[<<f_make_list_1450@42:1>@48:0>](
      <f_make_list_1450@42:0>:int,<<f_make_list_1450@42:1>@48:0>:int)
      
      P[<cons_make_list_1073@44:2>](<cons_make_list_1073@44:0>:int,<cons_make_list_1073@44:1>:int,<cons_make_list_1073@44:2>:int),
      (<<cons_make_list_1073@44:4>@46:0> = (1 + <cons_make_list_1073@44:2>))
      |- P[<<cons_make_list_1073@44:4>@46:0>](<cons_make_list_1073@44:0>:int,
                                              <cons_make_list_1073@44:1>:int,
                                              <cons_make_list_1073@44:2>:int,
                                              <<cons_make_list_1073@44:4>@46:0>:int)
      
      P[<f_make_list_1450@42:2>](<cons_make_list_1073@44:0>:int,<cons_make_list_1073@44:2>:int),
      (<cons_make_list_1073@44:0> = <cons_make_list_1073@44:1>)
      |- P[<cons_make_list_1073@44:2>](<cons_make_list_1073@44:0>:int,
                                       <cons_make_list_1073@44:1>:int,
                                       <cons_make_list_1073@44:2>:int)
      
      P[<make_list_1032@34:0>](<f_make_list_1450@42:0>:int),
      P[<<make_list_1032@37:1>@40:0>]((-1 + <f_make_list_1450@42:0>):int,<f_make_list_1450@42:2>:int),
      (<f_make_list_1450@42:0> <> 0)
      |- P[<f_make_list_1450@42:2>](<f_make_list_1450@42:0>:int,<f_make_list_1450@42:2>:int)
      
      P[<make_list_1032@37:0>](<make_list_1032@37:0>:int),
      ((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0))
      |- P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,<<make_list_1032@37:1>@40:0>:int)
      
      P[<make_list_1032@34:0>]((1 + <make_list_1032@37:0>):int), ((1 + <make_list_1032@37:0>) <> 0)
      |- P[<make_list_1032@37:0>](<make_list_1032@37:0>:int)
      
      P[<main_1034@32:0>](<make_list_1032@34:0>:int)|- P[<make_list_1032@34:0>](<make_list_1032@34:0>:int)
      
      P[<f_1453@30:0>](<main_1034@32:0>:int)|- P[<main_1034@32:0>](<main_1034@32:0>:int)
      
      |- P[<f_1453@30:0>](<f_1453@30:0>:int)
    call trees:
      <main_1447@27>
        <f_1453@30>
          <main_1034@32>
            <make_list_1032@34>
              <make_list_1032@37>
              </<make_list_1032@37:1>@40>
              <f_make_list_1450@42>
                <cons_make_list_1073@44>
                </<cons_make_list_1073@44:4>@46>
              </<f_make_list_1450@42:1>@48>
            </<make_list_1032@34:1>@50>
            <f_main_1451@52>
              <is_nil_1030@55>
              </<is_nil_1030@55:2>@58>
              <f_main_1452@60>
                <fail_1455@63>
    inlined horn clauses:
      P[<fail_1455@63:0>](<fail_1455@63:0>:bool)|- bot
      
      P[<<make_list_1032@34:1>@50:0>](<f_main_1452@60:0>:int,0:int), (
      (<f_main_1452@60:0> > 0) && <fail_1455@63:0>) |- P[<fail_1455@63:0>](
      <fail_1455@63:0>:bool)
      
      P[<make_list_1032@34:0>](<make_list_1032@34:0>:int),
      P[<<make_list_1032@37:1>@40:0>]((-1 + <make_list_1032@34:0>):int,(
                                      -1 + <<make_list_1032@34:1>@50:0>):int), (
      <make_list_1032@34:0> <> 0)
      |- P[<<make_list_1032@34:1>@50:0>](<make_list_1032@34:0>:int,<<make_list_1032@34:1>@50:0>:int)
      
      P[<make_list_1032@37:0>](<make_list_1032@37:0>:int),
      ((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0))
      |- P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,<<make_list_1032@37:1>@40:0>:int)
      
      P[<make_list_1032@34:0>]((1 + <make_list_1032@37:0>):int), ((1 + <make_list_1032@37:0>) <> 0)
      |- P[<make_list_1032@37:0>](<make_list_1032@37:0>:int)
      
      |- P[<make_list_1032@34:0>](<make_list_1032@34:0>:int)
    begin ParamSubstInfer.infer(8166)[3]
      
    end ParamSubstInfer.infer(8166)[3] (0.023996 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(8168)[3]
      
    end RefTypeInfer.elim_coeffs(8168)[3] (0.000000 sec.)
    begin GenHcSolver.solve(8355)[3]
      Horn clauses:
        P[<fail_1455@63:0>](<fail_1455@63:0>:bool)|- bot
        
        P[<<make_list_1032@34:1>@50:0>](<f_main_1452@60:0>:int,0:int), (
        (<f_main_1452@60:0> > 0) && <fail_1455@63:0>) |- P[<fail_1455@63:0>](
        <fail_1455@63:0>:bool)
        
        P[<make_list_1032@34:0>](<make_list_1032@34:0>:int),
        P[<<make_list_1032@37:1>@40:0>]((-1 + <make_list_1032@34:0>):int,(
                                        -1 + <<make_list_1032@34:1>@50:0>):int), (
        <make_list_1032@34:0> <> 0)
        |- P[<<make_list_1032@34:1>@50:0>](<make_list_1032@34:0>:int,
                                           <<make_list_1032@34:1>@50:0>:int)
        
        P[<make_list_1032@37:0>](<make_list_1032@37:0>:int),
        ((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0))
        |- P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,
                                           <<make_list_1032@37:1>@40:0>:int)
        
        P[<make_list_1032@34:0>]((1 + <make_list_1032@37:0>):int), ((1 + <make_list_1032@37:0>) <> 0)
        |- P[<make_list_1032@37:0>](<make_list_1032@37:0>:int)
        
        |- P[<make_list_1032@34:0>](<make_list_1032@34:0>:int)
      lower bounds:
        P[<make_list_1032@34:0>](<make_list_1032@34:0>:int) = true
        P[<make_list_1032@37:0>](<make_list_1032@37:0>:int) = ((1 + <make_list_1032@37:0>) <> 0)
        P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,<<make_list_1032@37:1>@40:0>:int) =
        ((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0))
        P[<<make_list_1032@34:1>@50:0>](<make_list_1032@34:0>:int,<<make_list_1032@34:1>@50:0>:int) =
        ((<make_list_1032@34:0> = 1) && (<<make_list_1032@34:1>@50:0> = 1))
        P[<fail_1455@63:0>](<fail_1455@63:0>:bool) = false
      upper bounds:
        P[<<make_list_1032@34:1>@50:0>](var89:int,var90:int) = ((var90 <> 0) || (var89 <= 0))
        P[<<make_list_1032@37:1>@40:0>](var86:int,var87:int) = (((1 + var87) <> 0) || ((1 + var86) <= 0))
      begin GenHcSolver.classify_pids(10535)[4]
        output:
          [<<make_list_1032@37:1>@40:0>;<<make_list_1032@34:1>@50:0>]
      end GenHcSolver.classify_pids(10535)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(10582)[4]
        lb:(((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0)) ||
            ((<make_list_1032@37:0> = 1) && (<<make_list_1032@37:1>@40:0> = 1)))
        nub:((not (((1 + <<make_list_1032@37:1>@40:0>) <> 0) || ((1 + <make_list_1032@37:0>) <= 0))) ||
             (not ((<<make_list_1032@37:1>@40:0> <> 0) || (<make_list_1032@37:0> <= 0))))
        lb':(((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0)) ||
             ((<make_list_1032@37:0> = 1) && (<<make_list_1032@37:1>@40:0> = 1)))
        nub':((not (((1 + <<make_list_1032@37:1>@40:0>) <> 0) || ((1 + <make_list_1032@37:0>) <= 0))) ||
              (not ((<<make_list_1032@37:1>@40:0> <> 0) || (<make_list_1032@37:0> <= 0))))
        begin InterpProver.interpolate(10583)[5]
          begin InterpProver.interpolate_fresh(10584)[6]
            begin InterpProver.interpolate_log(10585)[7]
              input1: (((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0)) ||
                       ((<make_list_1032@37:0> = 1) && (<<make_list_1032@37:1>@40:0> = 1)))
              input2: ((not (((1 + <<make_list_1032@37:1>@40:0>) <> 0) || ((1 + <make_list_1032@37:0>) <= 0))) ||
                       (not ((<<make_list_1032@37:1>@40:0> <> 0) || (<make_list_1032@37:0> <= 0))))
              begin InterpProver.interpolate_check(10586)[8]
                begin InterpProver.interpolate_simplify(10587)[9]
                  begin InterpProver.interpolate_quick(10670)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(10679)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(10680)[12]
                        begin CsisatInterface.interpolate_csisat_log(10681)[13]
                          input1: ((0 = v_sep_make_list_1032_sep_37_sep_0 & 0 = v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0) | (1 = v_sep_make_list_1032_sep_37_sep_0 & 1 = v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0))
                          input2: ((-1 = v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 & 1 <= (1 + v_sep_make_list_1032_sep_37_sep_0)) | (0 = v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 & 1 <= v_sep_make_list_1032_sep_37_sep_0))
                          begin CsisatInterface.interpolate_csisat_raw(10682)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(10682)[14] (0.002999 sec.)
                          output: (((-2*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 <= 0 & 2*v_sep_make_list_1032_sep_37_sep_0 <= 0) | (-1*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 <= -1 & 2*v_sep_make_list_1032_sep_37_sep_0 <= 0) | not 0 = v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0) & (0 = v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 | -1*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 <= -1))
                          
                        end CsisatInterface.interpolate_csisat_log(10681)[13] (0.002999 sec.)
                        after simplification: (((-2*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 <= 0 & 2*v_sep_make_list_1032_sep_37_sep_0 <= 0) | (-1*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 <= -1 & 2*v_sep_make_list_1032_sep_37_sep_0 <= 0) | not 0 = v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0) & (0 = v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 | -1*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 <= -1))
                        after dnf conversion: ((-2*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 <= 0 & 2*v_sep_make_list_1032_sep_37_sep_0 <= 0 & 0 = v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0) | (-2*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 <= 0 & 2*v_sep_make_list_1032_sep_37_sep_0 <= 0 & -1*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 <= -1) | (-1*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 <= -1 & 2*v_sep_make_list_1032_sep_37_sep_0 <= 0 & 0 = v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0) | (-1*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 <= -1 & 2*v_sep_make_list_1032_sep_37_sep_0 <= 0 & -1*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 <= -1) | (not 0 = v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 & 0 = v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0) | (not 0 = v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 & -1*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 <= -1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(10680)[12] (0.002999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(10679)[11] (0.002999 sec.)
                    
                  end InterpProver.interpolate_quick(10670)[10] (0.003999 sec.)
                  begin minimizing # of disjunctions(10796)[10]
                    input: ((1 <= <<make_list_1032@37:1>@40:0>) ||
                            ((<<make_list_1032@37:1>@40:0> = 0) && (<make_list_1032@37:0> <= 0)))
                    output: (((<<make_list_1032@37:1>@40:0> = 0) && (<make_list_1032@37:0> <= 0)) ||
                             (1 <= <<make_list_1032@37:1>@40:0>))
                  end minimizing # of disjunctions(10796)[10] (0.001000 sec.)
                  begin minimizing # of conjunctions(10822)[10]
                    input: ((<<make_list_1032@37:1>@40:0> = 0) && (<make_list_1032@37:0> <= 0))
                    output: ((<make_list_1032@37:0> <= 0) && (<<make_list_1032@37:1>@40:0> = 0))
                  end minimizing # of conjunctions(10822)[10] (0.002999 sec.)
                  
                end InterpProver.interpolate_simplify(10587)[9] (0.009998 sec.)
                
              end InterpProver.interpolate_check(10586)[8] (0.009998 sec.)
              output: (((<make_list_1032@37:0> <= 0) && (<<make_list_1032@37:1>@40:0> = 0)) ||
                       (1 <= <<make_list_1032@37:1>@40:0>))
            end InterpProver.interpolate_log(10585)[7] (0.009998 sec.)
            
          end InterpProver.interpolate_fresh(10584)[6] (0.009998 sec.)
          
        end InterpProver.interpolate(10583)[5] (0.009998 sec.)
        output:
          P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,<<make_list_1032@37:1>@40:0>:int) =
          (((<make_list_1032@37:0> <= 0) && (<<make_list_1032@37:1>@40:0> = 0)) || (1 <= <<make_list_1032@37:1>@40:0>))
          P[<<make_list_1032@34:1>@50:0>](<make_list_1032@37:0>:int,<<make_list_1032@37:1>@40:0>:int) =
          (((<make_list_1032@37:0> <= 0) && (<<make_list_1032@37:1>@40:0> = 0)) || (1 <= <<make_list_1032@37:1>@40:0>))
      end ApronInterface.convex_hull_interpolate(10582)[4] (0.009998 sec.)
      Horn clauses:
        P[<fail_1455@63:0>](<fail_1455@63:0>:bool)|- bot
        
        P[<make_list_1032@34:0>]((1 + <make_list_1032@37:0>):int), ((1 + <make_list_1032@37:0>) <> 0)
        |- P[<make_list_1032@37:0>](<make_list_1032@37:0>:int)
        
        |- P[<make_list_1032@34:0>](<make_list_1032@34:0>:int)
      lower bounds:
        P[<make_list_1032@34:0>](<make_list_1032@34:0>:int) = true
        P[<fail_1455@63:0>](var94:bool) = false
        P[<make_list_1032@37:0>](<make_list_1032@37:0>:int) = ((1 + <make_list_1032@37:0>) <> 0)
      upper bounds:
        P[<make_list_1032@37:0>](var100:int) = true
        P[<make_list_1032@34:0>](var97:int) = true
      begin GenHcSolver.classify_pids(12707)[4]
        output:
          [<make_list_1032@34:0>;<make_list_1032@37:0>]
      end GenHcSolver.classify_pids(12707)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(12718)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(12719)[5]
          begin InterpProver.interpolate_fresh(12720)[6]
            begin InterpProver.interpolate_log(12721)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(12722)[8]
                begin InterpProver.interpolate_simplify(12723)[9]
                  begin InterpProver.interpolate_quick(12736)[10]
                    
                  end InterpProver.interpolate_quick(12736)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(12723)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(12722)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(12721)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(12720)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(12719)[5] (0.000000 sec.)
        output:
          P[<make_list_1032@34:0>](<make_list_1032@34:0>:int) = true
          P[<make_list_1032@37:0>](<make_list_1032@34:0>:int) = true
      end ApronInterface.convex_hull_interpolate(12718)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1455@63:0>](<fail_1455@63:0>:bool)|- bot
      lower bounds:
        P[<fail_1455@63:0>](var104:bool) = false
      upper bounds:
        P[<fail_1455@63:0>](var107:bool) = true
      begin GenHcSolver.classify_pids(13153)[4]
        output:
          [<fail_1455@63:0>]
      end GenHcSolver.classify_pids(13153)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(13156)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(13157)[5]
          begin InterpProver.interpolate_fresh(13158)[6]
            begin InterpProver.interpolate_log(13159)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(13160)[8]
                begin InterpProver.interpolate_simplify(13161)[9]
                  begin InterpProver.interpolate_quick(13174)[10]
                    
                  end InterpProver.interpolate_quick(13174)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(13178)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(13178)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(13161)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(13160)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(13159)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(13158)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(13157)[5] (0.000000 sec.)
        output:
          P[<fail_1455@63:0>](var104:bool) = false
      end ApronInterface.convex_hull_interpolate(13156)[4] (0.000000 sec.)
      begin HcSolver.check_validity(13211)[4]
        input:
          P[<fail_1455@63:0>](<fail_1455@63:0>:bool)|- bot
          
          P[<<make_list_1032@34:1>@50:0>](<f_main_1452@60:0>:int,0:int), (
          (<f_main_1452@60:0> > 0) && <fail_1455@63:0>) |- P[<fail_1455@63:0>](
          <fail_1455@63:0>:bool)
          
          P[<make_list_1032@34:0>](<make_list_1032@34:0>:int),
          P[<<make_list_1032@37:1>@40:0>]((-1 + <make_list_1032@34:0>):int,(
                                          -1 + <<make_list_1032@34:1>@50:0>):int), (
          <make_list_1032@34:0> <> 0)
          |- P[<<make_list_1032@34:1>@50:0>](<make_list_1032@34:0>:int,
                                             <<make_list_1032@34:1>@50:0>:int)
          
          P[<make_list_1032@37:0>](<make_list_1032@37:0>:int),
          ((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0))
          |- P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,
                                             <<make_list_1032@37:1>@40:0>:int)
          
          P[<make_list_1032@34:0>]((1 + <make_list_1032@37:0>):int), (
          (1 + <make_list_1032@37:0>) <> 0) |- P[<make_list_1032@37:0>](
          <make_list_1032@37:0>:int)
          
          |- P[<make_list_1032@34:0>](<make_list_1032@34:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(13211)[4] (0.003000 sec.)
      solution:
        P[<fail_1455@63:0>](var104:bool) = false
        P[<<make_list_1032@34:1>@50:0>](<make_list_1032@37:0>:int,<<make_list_1032@37:1>@40:0>:int) =
        (((<make_list_1032@37:0> <= 0) && (<<make_list_1032@37:1>@40:0> = 0)) || (1 <= <<make_list_1032@37:1>@40:0>))
        P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,<<make_list_1032@37:1>@40:0>:int) =
        (((<make_list_1032@37:0> <= 0) && (<<make_list_1032@37:1>@40:0> = 0)) || (1 <= <<make_list_1032@37:1>@40:0>))
        P[<make_list_1032@37:0>](<make_list_1032@34:0>:int) = true
        P[<make_list_1032@34:0>](<make_list_1032@34:0>:int) = true
    end GenHcSolver.solve(8355)[3] (0.028996 sec.)
    begin GenHcSolver.solve(13914)[3]
      Horn clauses:
        P[<fail_1455@63:0>](<fail_1455@63:0>:bool)|- bot
        
        P[<<make_list_1032@34:1>@50:0>](<f_main_1452@60:0>:int,0:int), (
        (<f_main_1452@60:0> > 0) && <fail_1455@63:0>) |- P[<fail_1455@63:0>](
        <fail_1455@63:0>:bool)
        
        P[<make_list_1032@34:0>](<make_list_1032@34:0>:int),
        P[<<make_list_1032@37:1>@40:0>]((-1 + <make_list_1032@34:0>):int,(
                                        -1 + <<make_list_1032@34:1>@50:0>):int), (
        <make_list_1032@34:0> <> 0)
        |- P[<<make_list_1032@34:1>@50:0>](<make_list_1032@34:0>:int,
                                           <<make_list_1032@34:1>@50:0>:int)
        
        P[<make_list_1032@37:0>](<make_list_1032@37:0>:int),
        ((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0))
        |- P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,
                                           <<make_list_1032@37:1>@40:0>:int)
        
        P[<make_list_1032@34:0>]((1 + <make_list_1032@37:0>):int), ((1 + <make_list_1032@37:0>) <> 0)
        |- P[<make_list_1032@37:0>](<make_list_1032@37:0>:int)
        
        |- P[<make_list_1032@34:0>](<make_list_1032@34:0>:int)
      lower bounds:
        P[<make_list_1032@34:0>](<make_list_1032@34:0>:int) = true
        P[<make_list_1032@37:0>](<make_list_1032@37:0>:int) = ((1 + <make_list_1032@37:0>) <> 0)
        P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,<<make_list_1032@37:1>@40:0>:int) =
        ((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0))
        P[<<make_list_1032@34:1>@50:0>](<make_list_1032@34:0>:int,<<make_list_1032@34:1>@50:0>:int) =
        ((<make_list_1032@34:0> = 1) && (<<make_list_1032@34:1>@50:0> = 1))
        P[<fail_1455@63:0>](<fail_1455@63:0>:bool) = false
      upper bounds:
        P[<<make_list_1032@34:1>@50:0>](var112:int,var113:int) = ((var113 <> 0) || (var112 <= 0))
        P[<<make_list_1032@37:1>@40:0>](var109:int,var110:int) = (((1 + var110) <> 0) || ((1 + var109) <= 0))
      begin GenHcSolver.classify_pids(16094)[4]
        output:
          [<<make_list_1032@37:1>@40:0>;<<make_list_1032@34:1>@50:0>]
      end GenHcSolver.classify_pids(16094)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(16141)[4]
        lb:(((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0)) ||
            ((<make_list_1032@37:0> = 1) && (<<make_list_1032@37:1>@40:0> = 1)))
        nub:((not (((1 + <<make_list_1032@37:1>@40:0>) <> 0) || ((1 + <make_list_1032@37:0>) <= 0))) ||
             (not ((<<make_list_1032@37:1>@40:0> <> 0) || (<make_list_1032@37:0> <= 0))))
        begin ExtFormula.Formula.case_analysis_boolean(16159)[5]
          ts: (((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0)) ||
               ((<make_list_1032@37:0> = 1) && (<<make_list_1032@37:1>@40:0> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(16159)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(16190)[5]
          ts: (((<<make_list_1032@37:1>@40:0> = -1) && ((1 + <make_list_1032@37:0>) > 0)) ||
               ((<<make_list_1032@37:1>@40:0> = 0) && (<make_list_1032@37:0> > 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(16190)[5] (0.001000 sec.)
        lb':(((<<make_list_1032@37:1>@40:0> + (-1 * <make_list_1032@37:0>)) = 0) &&
             (((1 + (-1 * <make_list_1032@37:0>)) >= 0) && (<make_list_1032@37:0> >= 0)))
        nub':(((-1 * <<make_list_1032@37:1>@40:0>) >= 0) &&
              (((1 + <<make_list_1032@37:1>@40:0>) >= 0) &&
               (((-1 + (-1 * <<make_list_1032@37:1>@40:0>)) + <make_list_1032@37:0>) >= 0)))
        begin InterpProver.interpolate(16199)[5]
          begin InterpProver.interpolate_fresh(16200)[6]
            begin InterpProver.interpolate_log(16201)[7]
              input1: (((<<make_list_1032@37:1>@40:0> + (-1 * <make_list_1032@37:0>)) = 0) &&
                       (((1 + (-1 * <make_list_1032@37:0>)) >= 0) && (<make_list_1032@37:0> >= 0)))
              input2: (((-1 * <<make_list_1032@37:1>@40:0>) >= 0) &&
                       (((1 + <<make_list_1032@37:1>@40:0>) >= 0) &&
                        (((-1 + (-1 * <<make_list_1032@37:1>@40:0>)) + <make_list_1032@37:0>) >= 0)))
              begin InterpProver.interpolate_check(16202)[8]
                begin InterpProver.interpolate_simplify(16203)[9]
                  begin InterpProver.interpolate_quick(16342)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(16351)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(16352)[12]
                        begin CsisatInterface.interpolate_csisat_log(16353)[13]
                          input1: (v_sep_make_list_1032_sep_37_sep_0 = v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 & 0 <= v_sep_make_list_1032_sep_37_sep_0 & v_sep_make_list_1032_sep_37_sep_0 <= 1)
                          input2: (0 <= (1 + v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0) & v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 <= 0 & (1 + v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0) <= v_sep_make_list_1032_sep_37_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(16354)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(16354)[14] (0.000000 sec.)
                          output: (-2*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 + 2*v_sep_make_list_1032_sep_37_sep_0) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(16353)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 + 2*v_sep_make_list_1032_sep_37_sep_0) <= 0
                        after dnf conversion: (((-2*v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0 + 2*v_sep_make_list_1032_sep_37_sep_0) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(16352)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(16351)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(16342)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(16203)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(16202)[8] (0.003000 sec.)
              output: (<make_list_1032@37:0> <= <<make_list_1032@37:1>@40:0>)
            end InterpProver.interpolate_log(16201)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(16200)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(16199)[5] (0.003000 sec.)
        output:
          P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,<<make_list_1032@37:1>@40:0>:int) =
          (<make_list_1032@37:0> <= <<make_list_1032@37:1>@40:0>)
          P[<<make_list_1032@34:1>@50:0>](<make_list_1032@37:0>:int,<<make_list_1032@37:1>@40:0>:int) =
          (<make_list_1032@37:0> <= <<make_list_1032@37:1>@40:0>)
      end ApronInterface.convex_hull_interpolate(16141)[4] (0.004000 sec.)
      Horn clauses:
        P[<fail_1455@63:0>](<fail_1455@63:0>:bool)|- bot
        
        P[<make_list_1032@34:0>]((1 + <make_list_1032@37:0>):int), ((1 + <make_list_1032@37:0>) <> 0)
        |- P[<make_list_1032@37:0>](<make_list_1032@37:0>:int)
        
        |- P[<make_list_1032@34:0>](<make_list_1032@34:0>:int)
      lower bounds:
        P[<make_list_1032@34:0>](<make_list_1032@34:0>:int) = true
        P[<fail_1455@63:0>](var117:bool) = false
        P[<make_list_1032@37:0>](<make_list_1032@37:0>:int) = ((1 + <make_list_1032@37:0>) <> 0)
      upper bounds:
        P[<make_list_1032@37:0>](var123:int) = true
        P[<make_list_1032@34:0>](var120:int) = true
      begin GenHcSolver.classify_pids(17783)[4]
        output:
          [<make_list_1032@34:0>;<make_list_1032@37:0>]
      end GenHcSolver.classify_pids(17783)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(17794)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(17797)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(17797)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(17802)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(17802)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(17805)[5]
          begin InterpProver.interpolate_fresh(17806)[6]
            begin InterpProver.interpolate_log(17807)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(17808)[8]
                begin InterpProver.interpolate_simplify(17809)[9]
                  begin InterpProver.interpolate_quick(17823)[10]
                    
                  end InterpProver.interpolate_quick(17823)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(17809)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(17808)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(17807)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(17806)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(17805)[5] (0.000000 sec.)
        output:
          P[<make_list_1032@34:0>](<make_list_1032@34:0>:int) = true
          P[<make_list_1032@37:0>](<make_list_1032@34:0>:int) = true
      end ApronInterface.convex_hull_interpolate(17794)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1455@63:0>](<fail_1455@63:0>:bool)|- bot
      lower bounds:
        P[<fail_1455@63:0>](var127:bool) = false
      upper bounds:
        P[<fail_1455@63:0>](var130:bool) = true
      begin GenHcSolver.classify_pids(18242)[4]
        output:
          [<fail_1455@63:0>]
      end GenHcSolver.classify_pids(18242)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(18245)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(18248)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(18248)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(18253)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(18253)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(18256)[5]
          begin InterpProver.interpolate_fresh(18257)[6]
            begin InterpProver.interpolate_log(18258)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(18259)[8]
                begin InterpProver.interpolate_simplify(18260)[9]
                  begin InterpProver.interpolate_quick(18275)[10]
                    
                  end InterpProver.interpolate_quick(18275)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(18279)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(18279)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(18260)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(18259)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(18258)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(18257)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(18256)[5] (0.001000 sec.)
        output:
          P[<fail_1455@63:0>](var127:bool) = false
      end ApronInterface.convex_hull_interpolate(18245)[4] (0.001000 sec.)
      begin HcSolver.check_validity(18319)[4]
        input:
          P[<fail_1455@63:0>](<fail_1455@63:0>:bool)|- bot
          
          P[<<make_list_1032@34:1>@50:0>](<f_main_1452@60:0>:int,0:int), (
          (<f_main_1452@60:0> > 0) && <fail_1455@63:0>) |- P[<fail_1455@63:0>](
          <fail_1455@63:0>:bool)
          
          P[<make_list_1032@34:0>](<make_list_1032@34:0>:int),
          P[<<make_list_1032@37:1>@40:0>]((-1 + <make_list_1032@34:0>):int,(
                                          -1 + <<make_list_1032@34:1>@50:0>):int), (
          <make_list_1032@34:0> <> 0)
          |- P[<<make_list_1032@34:1>@50:0>](<make_list_1032@34:0>:int,
                                             <<make_list_1032@34:1>@50:0>:int)
          
          P[<make_list_1032@37:0>](<make_list_1032@37:0>:int),
          ((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0))
          |- P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,
                                             <<make_list_1032@37:1>@40:0>:int)
          
          P[<make_list_1032@34:0>]((1 + <make_list_1032@37:0>):int), (
          (1 + <make_list_1032@37:0>) <> 0) |- P[<make_list_1032@37:0>](
          <make_list_1032@37:0>:int)
          
          |- P[<make_list_1032@34:0>](<make_list_1032@34:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(18319)[4] (0.001999 sec.)
      solution:
        P[<fail_1455@63:0>](var127:bool) = false
        P[<<make_list_1032@34:1>@50:0>](<make_list_1032@37:0>:int,<<make_list_1032@37:1>@40:0>:int) =
        (<make_list_1032@37:0> <= <<make_list_1032@37:1>@40:0>)
        P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,<<make_list_1032@37:1>@40:0>:int) =
        (<make_list_1032@37:0> <= <<make_list_1032@37:1>@40:0>)
        P[<make_list_1032@37:0>](<make_list_1032@34:0>:int) = true
        P[<make_list_1032@34:0>](<make_list_1032@34:0>:int) = true
    end GenHcSolver.solve(13914)[3] (0.021996 sec.)
    begin YhornInterface.solve(18679)[3]
      begin HcSolver.solve_ub(18680)[4]
        encoded:
          P[<fail_1455@63:0>](<fail_1455@63:0>:int)|- bot
          
          P[<<make_list_1032@34:1>@50:0>](<f_main_1452@60:0>:int,0:int),
          ((<f_main_1452@60:0> > 0) && (<fail_1455@63:0> = 1)) |- P[<fail_1455@63:0>](
          <fail_1455@63:0>:int)
          
          P[<make_list_1032@34:0>](<make_list_1032@34:0>:int),
          P[<<make_list_1032@37:1>@40:0>]((-1 + <make_list_1032@34:0>):int,(
                                          -1 + <<make_list_1032@34:1>@50:0>):int), (
          <make_list_1032@34:0> <> 0)
          |- P[<<make_list_1032@34:1>@50:0>](<make_list_1032@34:0>:int,
                                             <<make_list_1032@34:1>@50:0>:int)
          
          P[<make_list_1032@37:0>](<make_list_1032@37:0>:int),
          ((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0))
          |- P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,
                                             <<make_list_1032@37:1>@40:0>:int)
          
          P[<make_list_1032@34:0>]((1 + <make_list_1032@37:0>):int), (
          (1 + <make_list_1032@37:0>) <> 0) |- P[<make_list_1032@37:0>](
          <make_list_1032@37:0>:int)
          
          |- P[<make_list_1032@34:0>](<make_list_1032@34:0>:int)
        input to Yhorn:
          P[<fail_1455@63:0>](<fail_1455@63:0>:int)|- bot
          
          P[<<make_list_1032@34:1>@50:0>](<f_main_1452@60:0>:int,var131:int),
          ((<f_main_1452@60:0> > 0) && ((var131 = 0) && (<fail_1455@63:0> = 1)))
          |- P[<fail_1455@63:0>](<fail_1455@63:0>:int)
          
          P[<make_list_1032@34:0>](<make_list_1032@34:0>:int),
          P[<<make_list_1032@37:1>@40:0>](var132:int,var133:int),
          (((1 + var133) = <<make_list_1032@34:1>@50:0>) &&
           (((1 + var132) = <make_list_1032@34:0>) && (<make_list_1032@34:0> <> 0)))
          |- P[<<make_list_1032@34:1>@50:0>](<make_list_1032@34:0>:int,
                                             <<make_list_1032@34:1>@50:0>:int)
          
          P[<make_list_1032@37:0>](<make_list_1032@37:0>:int),
          ((<<make_list_1032@37:1>@40:0> = 0) && (<make_list_1032@37:0> = 0))
          |- P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,
                                             <<make_list_1032@37:1>@40:0>:int)
          
          P[<make_list_1032@34:0>](var134:int),
          ((var134 = (1 + <make_list_1032@37:0>)) && ((1 + <make_list_1032@37:0>) <> 0))
          |- P[<make_list_1032@37:0>](<make_list_1032@37:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1455_sep_63_sep_0($78)) -> 1=0.
(($78-1=0) & ($79=0) & ($80>0)) & (v_sep_make_list_1032_sep_34_sep_1_sep_50_sep_0($80,$79)) -> v_sep_fail_1455_sep_63_sep_0($78).
(($81<>0) & (-$81+$82+1=0) & ($83-$84+1=0)) & (v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0($82,$83)) & (v_sep_make_list_1032_sep_34_sep_0($81)) -> v_sep_make_list_1032_sep_34_sep_1_sep_50_sep_0($81,$84).
(($85=0) & ($86=0)) & (v_sep_make_list_1032_sep_37_sep_0($85)) -> v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0($85,$86).
(($85+1<>0) & (-$85+$87-1=0)) & (v_sep_make_list_1032_sep_34_sep_0($87)) -> v_sep_make_list_1032_sep_37_sep_0($85).
0=0 -> v_sep_make_list_1032_sep_34_sep_0($81).


v_sep_fail_1455_sep_63_sep_0: X
v_sep_make_list_1032_sep_34_sep_0: X
v_sep_make_list_1032_sep_34_sep_1_sep_50_sep_0: X
v_sep_make_list_1032_sep_37_sep_0: X
v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0: X
..........
v_sep_fail_1455_sep_63_sep_0: X
v_sep_make_list_1032_sep_34_sep_0: X
v_sep_make_list_1032_sep_34_sep_1_sep_50_sep_0: X
v_sep_make_list_1032_sep_37_sep_0: X
v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0: X
...
v_sep_fail_1455_sep_63_sep_0: X
v_sep_make_list_1032_sep_34_sep_0: X
v_sep_make_list_1032_sep_34_sep_1_sep_50_sep_0: X
v_sep_make_list_1032_sep_37_sep_0: X
v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0: X
.......
v_sep_fail_1455_sep_63_sep_0: X
v_sep_make_list_1032_sep_34_sep_0: X
v_sep_make_list_1032_sep_34_sep_1_sep_50_sep_0: X
v_sep_make_list_1032_sep_37_sep_0: X
v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0: X
........
v_sep_fail_1455_sep_63_sep_0: X
v_sep_make_list_1032_sep_34_sep_0: X
v_sep_make_list_1032_sep_34_sep_1_sep_50_sep_0: X
v_sep_make_list_1032_sep_37_sep_0: X
v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0: X
..........(0=0) & (v_sep_fail_1455_sep_63_sep_0($78)) -> 1=0.
(($78-1=0) & ($79=0) & ($80>0)) & (v_sep_make_list_1032_sep_34_sep_1_sep_50_sep_0($80,$79)) -> v_sep_fail_1455_sep_63_sep_0($78).
(($81<>0) & (-$81+$82+1=0) & ($83-$84+1=0)) & (v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0($82,$83)) & (v_sep_make_list_1032_sep_34_sep_0($81)) -> v_sep_make_list_1032_sep_34_sep_1_sep_50_sep_0($81,$84).
(($85=0) & ($86=0)) & (v_sep_make_list_1032_sep_37_sep_0($85)) -> v_sep_make_list_1032_sep_37_sep_1_sep_40_sep_0($85,$86).
(($85+1<>0) & (-$85+$87-1=0)) & (v_sep_make_list_1032_sep_34_sep_0($87)) -> v_sep_make_list_1032_sep_37_sep_0($85).
0=0 -> v_sep_make_list_1032_sep_34_sep_0($81).

          |- P[<make_list_1032@34:0>](<make_list_1032@34:0>:int)
        solution:
          P[<fail_1455@63:0>]($88:bool) = false
          P[<make_list_1032@34:0>]($101:int) = true
          P[<<make_list_1032@34:1>@50:0>]($91:int,$93:int) = ($91 <= $93)
          P[<make_list_1032@37:0>]($104:int) = true
          P[<<make_list_1032@37:1>@40:0>]($96:int,$98:int) = ($96 <= $98)
        
      end HcSolver.solve_ub(18680)[4] (0.023997 sec.)
      begin HcSolver.check_validity(18939)[4]
        input:
          P[<fail_1455@63:0>](<fail_1455@63:0>:bool)|- bot
          
          P[<<make_list_1032@34:1>@50:0>](<f_main_1452@60:0>:int,0:int), (
          (<f_main_1452@60:0> > 0) && <fail_1455@63:0>) |- P[<fail_1455@63:0>](
          <fail_1455@63:0>:bool)
          
          P[<make_list_1032@34:0>](<make_list_1032@34:0>:int),
          P[<<make_list_1032@37:1>@40:0>]((-1 + <make_list_1032@34:0>):int,(
                                          -1 + <<make_list_1032@34:1>@50:0>):int), (
          <make_list_1032@34:0> <> 0)
          |- P[<<make_list_1032@34:1>@50:0>](<make_list_1032@34:0>:int,
                                             <<make_list_1032@34:1>@50:0>:int)
          
          P[<make_list_1032@37:0>](<make_list_1032@37:0>:int),
          ((<make_list_1032@37:0> = 0) && (<<make_list_1032@37:1>@40:0> = 0))
          |- P[<<make_list_1032@37:1>@40:0>](<make_list_1032@37:0>:int,
                                             <<make_list_1032@37:1>@40:0>:int)
          
          P[<make_list_1032@34:0>]((1 + <make_list_1032@37:0>):int), (
          (1 + <make_list_1032@37:0>) <> 0) |- P[<make_list_1032@37:0>](
          <make_list_1032@37:0>:int)
          
          |- P[<make_list_1032@34:0>](<make_list_1032@34:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(18939)[4] (0.001999 sec.)
      solution:
        P[<fail_1455@63:0>]($88:bool) = false
        P[<make_list_1032@34:0>]($101:int) = true
        P[<<make_list_1032@34:1>@50:0>]($91:int,$93:int) = ($91 <= $93)
        P[<make_list_1032@37:0>]($104:int) = true
        P[<<make_list_1032@37:1>@40:0>]($96:int,$98:int) = ($96 <= $98)
    end YhornInterface.solve(18679)[3] (0.025996 sec.)
    
  end RefTypeInfer.infer_etrs(6110)[2] (0.112982 sec.)
  refinement types:
    main_1447: X
    f_1453: v1:int -> X
    main_1034: v1:int -> (v2:unit -> X) -> X
    make_list_1032: v1:int -> (v2:{v2:int | (v1 <= v2)} -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    make_list_1032: v1:int -> (v2:{v2:int | (v1 <= v2)} -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_make_list_1450: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1073: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_1451: v1:int -> (v2:unit -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    is_nil_1030: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1452: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    fail_1455: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1454: var177:int -> var176:unit -> X
    f_cons_make_list_1449: var188:int ->
                           var187:int ->
                           var186:int -> (var185:int -> (var184:int -> X) -> X) -> var181:int -> (var180:int -> X) -> X
    f_make_list_1448: var193:int -> var192:int -> (var191:int -> X) -> X
  abstraction types:
    main_1447: X
    f_1453: v1:int -> X
    main_1034: v1:int -> (v2:unit -> X) -> X
    make_list_1032: var194:int ->
                    (var195:int[var195 -> (var194 <= var195)] -> (var196:int -> (var197:int -> X) -> X) -> X) -> X
    f_make_list_1450: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1073: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_1451: v1:int -> (v2:unit -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    is_nil_1030: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1452: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    fail_1455: v1:bool -> (v2:unit -> X) -> X
    f_1454: var177:int -> var176:unit -> X
    f_cons_make_list_1449: var188:int ->
                           var187:int ->
                           var186:int -> (var185:int -> (var184:int -> X) -> X) -> var181:int -> (var180:int -> X) -> X
    f_make_list_1448: var193:int -> var192:int -> (var191:int -> X) -> X
  
end AbsTypeInfer.refine(6109)[1] (0.118981 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1447
  main_1447 -> (rand_int f_1453)
  cons_make_list_1073 n_1033 x_1071 xs1_1072 xs2_1072 k_make_list_cons_make_list_1225 ->
      (k_make_list_cons_make_list_1225 (xs1_1072 + 1) (f_cons_make_list_1449 n_1033 x_1071 xs1_1072 xs2_1072))
  f_1453 x_1401 -> (main_1034 x_1401 (f_1454 x_1401))
  f_1454 x_1401 x_1398 -> end
  f_cons_make_list_1449 n_1033 x_1071 xs1_1072 xs2_1072 i_1070 k_make_list_cons_make_list_1240 when (
      i_1070 = 0) -> (k_make_list_cons_make_list_1240 x_1071)
  f_cons_make_list_1449 n_1033 x_1071 xs1_1072 xs2_1072 i_1070 k_make_list_cons_make_list_1240 when (
      not (i_1070 = 0)) -> (xs2_1072 (i_1070 - 1) k_make_list_cons_make_list_1240)
  f_main_1451 n_1035 k_main_1324 x1_1330 x2_1330 when (n_1035 > 0) ->
      (is_nil_1030 x1_1330 x2_1330 (f_main_1452 n_1035 x1_1330 k_main_1324))
  f_main_1451 n_1035 k_main_1324 x1_1330 x2_1330 when (not (n_1035 > 0)) -> (k_main_1324 ())
  f_main_1452 n_1035 x1_1330 k_main_1324 b_1358 when (not b_1358) -> (k_main_1324 ())
  f_main_1452 n_1035 x1_1330 k_main_1324 b_1358 when (not (not b_1358)) -> (fail_1455 true k_main_1324)
  f_make_list_1448 n_1033 x_1077 k_make_list_1178 -> _|_
  f_make_list_1450 n_1033 k_make_list_1166 x1_1303 x2_1303 ->
      (cons_make_list_1073 n_1033 n_1033 x1_1303 x2_1303 k_make_list_1166)
  fail_1455 b k -> {fail} => (k ())
  is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1133 when (xs1_1031 = 0) -> (k_is_nil_1133 true)
  is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1133 when (not (xs1_1031 = 0)) -> (k_is_nil_1133 false)
  main_1034 n_1035 k_main_1324 -> (make_list_1032 n_1035 (f_main_1451 n_1035 k_main_1324))
  make_list_1032 n_1033 k_make_list_1166 when (n_1033 = 0) -> (k_make_list_1166 0 (f_make_list_1448 n_1033))
  make_list_1032 n_1033 k_make_list_1166 when (not (n_1033 = 0)) ->
      (make_list_1032 (n_1033 - 1) (f_make_list_1450 n_1033 k_make_list_1166))
Types:
  main_1447 : X
  fail_1455 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1032 : (x_1:int -> (x_3:int[x_1 <= x_3; x_1 <= 0] -> (int -> (int -> X) -> X) -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  make_list: ((x_1:int -> ((Top list|x_2:x_1 <= 0|) \/ (Top list|x_4:x_1 > 0 && x_1 <= x_4|))) /\ 
              (x_6:int -> (Top list|x_7:x_6 <= x_7|)))

cycles: 2
total: 0.480 sec
  abst: 0.007 sec
  mc: 0.031 sec
  refine: 0.229 sec
    exparam: 0.032 sec
