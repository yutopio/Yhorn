MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi zip.ml

parsed::
 let rec zip_1030 xs_1031 ys_1032 =
   (match xs_1031 with
      | [] -> (match ys_1032 with
                 | [] -> []
                 | _ -> let u_1048 = {fail} () 
                        in
                          _|_)
      | x_1033::xs'_1034 ->
          (match ys_1032 with
             | [] -> let u_1051 = {fail} () 
                     in
                       _|_
             | y_1035::ys'_1036 -> (x_1033, y_1035)::zip_1030 xs'_1034 ys'_1036)) 
 in
 let rec make_list_1037 n_1038 = if n_1038 < 0 then
                                   []
                                 else
                                   n_1038::make_list_1037 (n_1038 - 1) 
 in
 let main_1039 n_1040 = let xs_1041 = make_list_1037 n_1040 
                        in
                          zip_1030 xs_1041 xs_1041 
 in
   ()

set_target::
 let rec zip_1030 xs_1031 ys_1032 =
   (match xs_1031 with
      | [] -> (match ys_1032 with
                 | [] -> []
                 | _ -> let u_1048 = {fail} () 
                        in
                          _|_)
      | x_1033::xs'_1034 ->
          (match ys_1032 with
             | [] -> let u_1051 = {fail} () 
                     in
                       _|_
             | y_1035::ys'_1036 -> (x_1033, y_1035)::zip_1030 xs'_1034 ys'_1036)) 
 in
 let rec make_list_1037 n_1038 = if n_1038 < 0 then
                                   []
                                 else
                                   n_1038::make_list_1037 (n_1038 - 1) 
 in
 let main_1039 n_1040 = let xs_1041 = make_list_1037 n_1040 
                        in
                          zip_1030 xs_1041 xs_1041 
 in
 let main_1080 = let arg1_1079 = rand_int () 
                 in
                   main_1039 arg1_1079 
 in
   ()

abst_list::
 let rec zip_1030 (xs_1031:(int * (int -> int))) (ys_1032:(int * (int -> int))) =
   if fst xs_1031 = 0 then
     if fst ys_1032 = 0 then
       (0, fun x_1159 -> _|_)
     else
       let u_1048 = {fail} () 
       in
         _|_
   else
     if 1 <= fst xs_1031 then
       let xs'_1034 = (fst xs_1031 - 1, fun x_1093 -> (snd xs_1031) (x_1093 + 1)) 
       in
       let x_1033 = (snd xs_1031) 0 
       in
         if fst ys_1032 = 0 then
           let u_1051 = {fail} () 
           in
             _|_
         else
           if 1 <= fst ys_1032 then
             let ys'_1036 = (fst ys_1032 - 1, fun x_1101 -> (snd ys_1032) (x_1101 + 1)) 
             in
             let y_1035 = (snd ys_1032) 0 
             in
             let cons_zip_1134 (x_1131:(int * int)) (xs_1132:(int * (int -> (int * int)))) =
               (fst xs_1132 + 1, fun i_1130 -> (if i_1130 = 0 then
                                                  x_1131
                                                else
                                                  (snd xs_1132) (i_1130 - 1))) 
             in
               cons_zip_1134 (x_1033, y_1035) (zip_1030 xs'_1034 ys'_1036)
           else
             _|_
     else
       _|_ 
 in
 let rec make_list_1037 (n_1038:int) =
   if n_1038 < 0 then
     (0, fun x_1194 -> _|_)
   else
     let cons_make_list_1190 (x_1188:int) (xs_1189:(int * (int -> int))) =
       (fst xs_1189 + 1, fun i_1187 -> (if i_1187 = 0 then
                                          x_1188
                                        else
                                          (snd xs_1189) (i_1187 - 1))) 
     in
       cons_make_list_1190 n_1038 (make_list_1037 (n_1038 - 1)) 
 in
 let main_1039 (n_1040:int) = let xs_1041 = make_list_1037 n_1040 
                              in
                                zip_1030 xs_1041 xs_1041 
 in
 let main_1080 = let arg1_1079 = rand_int () 
                 in
                   main_1039 arg1_1079 
 in
   ()

CPS::
 let rec zip_1030
   (xs_1031:(int * (int -> ((int -> X) -> X)))) (ys_1032:(int * (int -> ((int -> X) -> X)))) (k_zip_1305:(
   (int * (int -> (((int * int) -> X) -> X))) -> X)) =
   if fst xs_1031 = 0 then
     if fst ys_1032 = 0 then
       k_zip_1305 (0, fun x_1159 -> fun k_zip_1323 -> _|_)
     else
       {|fail|} () (fun x_1332 -> _|_)
   else
     if 1 <= fst xs_1031 then
       (snd xs_1031) 0
         (fun x_1401 ->
            (if fst ys_1032 = 0 then
               {|fail|} () (fun x_1420 -> _|_)
             else
               if 1 <= fst ys_1032 then
                 (snd ys_1032) 0
                   (fun x_1482 ->
                      (let cons_zip_1134
                         (x_1131:(int * int)) (xs_1132:(int * (int -> (((int * int) -> X) -> X)))) (k_zip_cons_zip_1536:(
                         (int * (int -> (((int * int) -> X) -> X))) -> X)) =
                         k_zip_cons_zip_1536
                           (fst xs_1132 + 1,
                           fun i_1130 ->
                             fun k_zip_cons_zip_1551 ->
                               (if i_1130 = 0 then
                                  k_zip_cons_zip_1551 x_1131
                                else
                                  (snd xs_1132) (i_1130 - 1) k_zip_cons_zip_1551)) 
                       in
                         zip_1030
                           (fst xs_1031 - 1,
                           fun x_1093 -> fun k_zip_xs'_1384 -> (snd xs_1031) (x_1093 + 1) k_zip_xs'_1384)
                           (fst ys_1032 - 1,
                           fun x_1101 -> fun k_zip_ys'_1465 -> (snd ys_1032) (x_1101 + 1) k_zip_ys'_1465)
                           (fun x_1661 -> cons_zip_1134 (x_1401, x_1482) x_1661 k_zip_1305)))
               else
                 _|_))
     else
       _|_ 
 in
 let rec make_list_1037 (n_1038:int) (k_make_list_1725:((int * (int -> ((int -> X) -> X))) -> X)) =
   if n_1038 < 0 then
     k_make_list_1725 (0, fun x_1194 -> fun k_make_list_1737 -> _|_)
   else
     let cons_make_list_1190
       (x_1188:int) (xs_1189:(int * (int -> ((int -> X) -> X)))) (k_make_list_cons_make_list_1784:(
       (int * (int -> ((int -> X) -> X))) -> X)) =
       k_make_list_cons_make_list_1784
         (fst xs_1189 + 1,
         fun i_1187 ->
           fun k_make_list_cons_make_list_1799 ->
             (if i_1187 = 0 then
                k_make_list_cons_make_list_1799 x_1188
              else
                (snd xs_1189) (i_1187 - 1) k_make_list_cons_make_list_1799)) 
     in
       make_list_1037 (n_1038 - 1) (fun x_1862 -> cons_make_list_1190 n_1038 x_1862 k_make_list_1725) 
 in
 let main_1039 (n_1040:int) (k_main_1895:((int * (int -> (((int * int) -> X) -> X))) -> X)) =
   make_list_1037 n_1040 (fun x_1904 -> zip_1030 x_1904 x_1904 k_main_1895) 
 in
   rand_int_cps () (fun x_1985 -> main_1039 x_1985 (fun x_1973 -> end))

remove_pair::
 let rec zip_1030
   (xs1_1031:int) (xs2_1031:(int -> ((int -> X) -> X))) (ys1_1032:int) (ys2_1032:(
   int -> ((int -> X) -> X))) (k_zip_1305:(int -> ((int -> ((int -> (int -> X)) -> X)) -> X))) =
   if xs1_1031 = 0 then
     if ys1_1032 = 0 then
       k_zip_1305 0 (fun x_1159 -> fun k_zip_1323 -> _|_)
     else
       {|fail|} () (fun x_1332 -> _|_)
   else
     if 1 <= xs1_1031 then
       xs2_1031 0
         (fun x_1401 ->
            (if ys1_1032 = 0 then
               {|fail|} () (fun x_1420 -> _|_)
             else
               if 1 <= ys1_1032 then
                 ys2_1032 0
                   (fun x_1482 ->
                      (let cons_zip_1134
                         (x1_1131:int) (x2_1131:int) (xs1_1132:int) (xs2_1132:(
                         int -> ((int -> (int -> X)) -> X))) (k_zip_cons_zip_1536:(
                         int -> ((int -> ((int -> (int -> X)) -> X)) -> X))) =
                         k_zip_cons_zip_1536 (xs1_1132 + 1)
                           (fun i_1130 ->
                              fun k_zip_cons_zip_1551 ->
                                (if i_1130 = 0 then
                                   k_zip_cons_zip_1551 x1_1131 x2_1131
                                 else
                                   xs2_1132 (i_1130 - 1) k_zip_cons_zip_1551)) 
                       in
                         zip_1030 (xs1_1031 - 1)
                           (fun x_1093 -> fun k_zip_xs'_1384 -> xs2_1031 (x_1093 + 1) k_zip_xs'_1384) (
                           ys1_1032 - 1) (fun x_1101 -> fun k_zip_ys'_1465 -> ys2_1032 (x_1101 + 1) k_zip_ys'_1465)
                           (fun x1_1661 -> fun x2_1661 -> cons_zip_1134 x_1401 x_1482 x1_1661 x2_1661 k_zip_1305)))
               else
                 _|_))
     else
       _|_ 
 in
 let rec make_list_1037 (n_1038:int) (k_make_list_1725:(int -> ((int -> ((int -> X) -> X)) -> X))) =
   if n_1038 < 0 then
     k_make_list_1725 0 (fun x_1194 -> fun k_make_list_1737 -> _|_)
   else
     let cons_make_list_1190
       (x_1188:int) (xs1_1189:int) (xs2_1189:(int -> ((int -> X) -> X))) (k_make_list_cons_make_list_1784:(
       int -> ((int -> ((int -> X) -> X)) -> X))) =
       k_make_list_cons_make_list_1784 (xs1_1189 + 1)
         (fun i_1187 ->
            fun k_make_list_cons_make_list_1799 ->
              (if i_1187 = 0 then
                 k_make_list_cons_make_list_1799 x_1188
               else
                 xs2_1189 (i_1187 - 1) k_make_list_cons_make_list_1799)) 
     in
       make_list_1037 (n_1038 - 1)
         (fun x1_1862 -> fun x2_1862 -> cons_make_list_1190 n_1038 x1_1862 x2_1862 k_make_list_1725) 
 in
 let main_1039 (n_1040:int) (k_main_1895:(int -> ((int -> ((int -> (int -> X)) -> X)) -> X))) =
   make_list_1037 n_1040 (fun x1_1904 -> fun x2_1904 -> zip_1030 x1_1904 x2_1904 x1_1904 x2_1904 k_main_1895) 
 in
   rand_int_cps () (fun x_1985 -> main_1039 x_1985 (fun x1_1973 -> fun x2_1973 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_2145
  main_2145 -> (rand_int f_2159)
  br_f_zip_2165 b_2166 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when b_2166 ->
      (ys2_1032 0 (f_zip_2150 x_1401 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032))
  br_f_zip_2165 b_2166 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when (not b_2166) -> _|_
  br_zip_2161 b_2162 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when b_2162 ->
      (k_zip_1305 0 (f_zip_2146 xs1_1031 ys1_1032))
  br_zip_2161 b_2162 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (
      not b_2162) -> (fail_2167 true (f_zip_2147 xs1_1031 ys1_1032))
  br_zip_2163 b_2164 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when b_2164 ->
      (xs2_1031 0 (f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032))
  br_zip_2163 b_2164 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (not b_2164) -> _|_
  cons_make_list_1190 n_1038 x_1188 xs1_1189 xs2_1189 k_make_list_cons_make_list_1784 ->
      (k_make_list_cons_make_list_1784 (xs1_1189 + 1) (f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189))
  cons_zip_1134 x_1401 x_1482 xs1_1031 ys1_1032 x1_1131 x2_1131 xs1_1132 xs2_1132 k_zip_cons_zip_1536 ->
      (k_zip_cons_zip_1536 (xs1_1132 + 1)
        (f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132))
  f_2159 x_1985 -> (main_1039 x_1985 (f_2160 x_1985))
  f_2160 x_1985 x1_1973 x2_1973 -> end
  f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189 i_1187 k_make_list_cons_make_list_1799 when (
      i_1187 = 0) -> (k_make_list_cons_make_list_1799 x_1188)
  f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189 i_1187 k_make_list_cons_make_list_1799 when (
      not (i_1187 = 0)) -> (xs2_1189 (i_1187 - 1) k_make_list_cons_make_list_1799)
  f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132 i_1130 k_zip_cons_zip_1551 when (
      i_1130 = 0) -> (k_zip_cons_zip_1551 x1_1131 x2_1131)
  f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132 i_1130 k_zip_cons_zip_1551 when (
      not (i_1130 = 0)) -> (xs2_1132 (i_1130 - 1) k_zip_cons_zip_1551)
  f_main_2158 n_1040 k_main_1895 x1_1904 x2_1904 -> (zip_1030 x1_1904 x2_1904 x1_1904 x2_1904 k_main_1895)
  f_make_list_2155 n_1038 x_1194 k_make_list_1737 -> _|_
  f_make_list_2157 n_1038 k_make_list_1725 x1_1862 x2_1862 ->
      (cons_make_list_1190 n_1038 n_1038 x1_1862 x2_1862 k_make_list_1725)
  f_zip_2146 xs1_1031 ys1_1032 x_1159 k_zip_1323 -> _|_
  f_zip_2147 xs1_1031 ys1_1032 x_1332 -> _|_
  f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when (
      ys1_1032 = 0) -> (fail_2168 true (f_zip_2149 x_1401 xs1_1031 ys1_1032))
  f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when (
      not (ys1_1032 = 0)) -> (br_f_zip_2165 (1 <= ys1_1032) xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401)
  f_zip_2149 x_1401 xs1_1031 ys1_1032 x_1420 -> _|_
  f_zip_2150 x_1401 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1482 ->
      (zip_1030 (xs1_1031 - 1) (f_zip_2152 x_1401 x_1482 xs1_1031 ys1_1032 xs2_1031) (
        ys1_1032 - 1) (f_zip_2153 x_1401 x_1482 xs1_1031 ys1_1032 ys2_1032)
        (f_zip_2154 x_1401 x_1482 xs1_1031 ys1_1032 k_zip_1305))
  f_zip_2152 x_1401 x_1482 xs1_1031 ys1_1032 xs2_1031 x_1093 k_zip_xs'_1384 -> (xs2_1031 (x_1093 + 1) k_zip_xs'_1384)
  f_zip_2153 x_1401 x_1482 xs1_1031 ys1_1032 ys2_1032 x_1101 k_zip_ys'_1465 -> (ys2_1032 (x_1101 + 1) k_zip_ys'_1465)
  f_zip_2154 x_1401 x_1482 xs1_1031 ys1_1032 k_zip_1305 x1_1661 x2_1661 ->
      (cons_zip_1134 x_1401 x_1482 xs1_1031 ys1_1032 x_1401 x_1482 x1_1661 x2_1661 k_zip_1305)
  fail_2167 b k -> {fail} => (k ())
  fail_2168 b k -> {fail} => (k ())
  main_1039 n_1040 k_main_1895 -> (make_list_1037 n_1040 (f_main_2158 n_1040 k_main_1895))
  make_list_1037 n_1038 k_make_list_1725 when (n_1038 < 0) -> (k_make_list_1725 0 (f_make_list_2155 n_1038))
  make_list_1037 n_1038 k_make_list_1725 when (not (n_1038 < 0)) ->
      (make_list_1037 (n_1038 - 1) (f_make_list_2157 n_1038 k_make_list_1725))
  zip_1030 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (xs1_1031 = 0) ->
      (br_zip_2161 (ys1_1032 = 0) xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305)
  zip_1030 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (not (xs1_1031 = 0)) ->
      (br_zip_2163 (1 <= xs1_1031) xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305)
Types:
  main_2145 : X
  fail_2167 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_2168 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1037 : (int -> (int -> (int -> (int -> X) -> X) -> X) -> X)
  zip_1030 : (int ->
              (int -> (int -> X) -> X) ->
              int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_2145 ... --> 
  f_2159 ... --> 
  main_1039 ... --> 
  make_list_1037 [2/2] ... --> 
  make_list_1037 [1/2] ... --> 
  f_make_list_2157 ... --> 
  cons_make_list_1190 ... --> 
  f_main_2158 ... --> 
  zip_1030 [2/2] ... --> 
  br_zip_2163 [1/2] ... --> 
  f_cons_make_list_2156 [1/2] ... --> 
  f_zip_2148 [1/2] ... --> 
  fail_2168 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 0; 1; 0; 0; 0; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(262)[1]
  program:
    main_2145  | true = ((Random.int 0) f_2159)
    br_f_zip_2165 b_2166 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 | b_2166 = (
    ys2_1032 0
             (f_zip_2150 x_1401
                         xs1_1031
                         ys1_1032
                         k_zip_1305
                         xs2_1031
                         ys2_1032))
    br_f_zip_2165 b_2166 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 | (
    not b_2166) = bot
    br_zip_2161 b_2162 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | b_2162 = (
    k_zip_1305 0
               (f_zip_2146 xs1_1031
                           ys1_1032))
    br_zip_2161 b_2162 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | (
    not b_2162) = (fail_2167 true
                             (f_zip_2147 xs1_1031
                                         ys1_1032))
    br_zip_2163 b_2164 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | b_2164 = (
    xs2_1031 0
             (f_zip_2148 xs1_1031
                         ys1_1032
                         k_zip_1305
                         xs2_1031
                         ys2_1032))
    br_zip_2163 b_2164 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | (
    not b_2164) = bot
    cons_make_list_1190 n_1038 x_1188 xs1_1189 xs2_1189 k_make_list_cons_make_list_1784 | true = (
    k_make_list_cons_make_list_1784 (xs1_1189 + 1)
                                    (f_cons_make_list_2156 n_1038
                                                           x_1188
                                                           xs1_1189
                                                           xs2_1189))
    cons_zip_1134 x_1401 x_1482 xs1_1031 ys1_1032 x1_1131 x2_1131 xs1_1132 xs2_1132 k_zip_cons_zip_1536 | true = (
    k_zip_cons_zip_1536
      (xs1_1132 + 1)
      (f_cons_zip_2151 x1_1131
                       x2_1131
                       x_1401
                       x_1482
                       xs1_1031
                       xs1_1132
                       ys1_1032
                       xs2_1132))
    f_2159 x_1985 | true = (main_1039 x_1985
                                      (f_2160 x_1985))
    f_2160 x_1985 x1_1973 x2_1973 | true = end
    f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189 i_1187 k_make_list_cons_make_list_1799 | (
    i_1187 = 0) = (k_make_list_cons_make_list_1799 x_1188)
    f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189 i_1187 k_make_list_cons_make_list_1799 | (
    not (i_1187 = 0)) = (xs2_1189 (i_1187 - 1)
                                  k_make_list_cons_make_list_1799)
    f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132 i_1130 k_zip_cons_zip_1551 | (
    i_1130 = 0) = (k_zip_cons_zip_1551 x1_1131
                                       x2_1131)
    f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132 i_1130 k_zip_cons_zip_1551 | (
    not (i_1130 = 0)) = (xs2_1132 (i_1130 - 1)
                                  k_zip_cons_zip_1551)
    f_main_2158 n_1040 k_main_1895 x1_1904 x2_1904 | true = (zip_1030 x1_1904
                                                                    x2_1904
                                                                    x1_1904
                                                                    x2_1904
                                                                    k_main_1895)
    f_make_list_2155 n_1038 x_1194 k_make_list_1737 | true = bot
    f_make_list_2157 n_1038 k_make_list_1725 x1_1862 x2_1862 | true = (
    cons_make_list_1190 n_1038
                        n_1038
                        x1_1862
                        x2_1862
                        k_make_list_1725)
    f_zip_2146 xs1_1031 ys1_1032 x_1159 k_zip_1323 | true = bot
    f_zip_2147 xs1_1031 ys1_1032 x_1332 | true = bot
    f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 | (
    ys1_1032 = 0) = (fail_2168 true
                               (f_zip_2149 x_1401
                                           xs1_1031
                                           ys1_1032))
    f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 | (
    not (ys1_1032 = 0)) = (br_f_zip_2165 (1 <= ys1_1032)
                                         xs1_1031
                                         ys1_1032
                                         k_zip_1305
                                         xs2_1031
                                         ys2_1032
                                         x_1401)
    f_zip_2149 x_1401 xs1_1031 ys1_1032 x_1420 | true = bot
    f_zip_2150 x_1401 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1482 | true = (
    zip_1030
      (xs1_1031 - 1)
      (f_zip_2152 x_1401
                  x_1482
                  xs1_1031
                  ys1_1032
                  xs2_1031)
      (ys1_1032 - 1)
      (f_zip_2153 x_1401
                  x_1482
                  xs1_1031
                  ys1_1032
                  ys2_1032)
      (f_zip_2154 x_1401
                  x_1482
                  xs1_1031
                  ys1_1032
                  k_zip_1305))
    f_zip_2152 x_1401 x_1482 xs1_1031 ys1_1032 xs2_1031 x_1093 k_zip_xs'_1384 | true = (
    xs2_1031 (x_1093 + 1)
             k_zip_xs'_1384)
    f_zip_2153 x_1401 x_1482 xs1_1031 ys1_1032 ys2_1032 x_1101 k_zip_ys'_1465 | true = (
    ys2_1032 (x_1101 + 1)
             k_zip_ys'_1465)
    f_zip_2154 x_1401 x_1482 xs1_1031 ys1_1032 k_zip_1305 x1_1661 x2_1661 | true = (
    cons_zip_1134 x_1401
                  x_1482
                  xs1_1031
                  ys1_1032
                  x_1401
                  x_1482
                  x1_1661
                  x2_1661
                  k_zip_1305)
    fail_2167 b k | true = (fail ())
    fail_2168 b k | true = (fail ())
    main_1039 n_1040 k_main_1895 | true = (make_list_1037 n_1040
                                                          (f_main_2158 n_1040
                                                                    k_main_1895))
    make_list_1037 n_1038 k_make_list_1725 | (n_1038 < 0) = (k_make_list_1725 0
                                                                    (f_make_list_2155 n_1038))
    make_list_1037 n_1038 k_make_list_1725 | (not (n_1038 < 0)) = (make_list_1037
                                                                    (
                                                                    n_1038 - 1)
                                                                    (
                                                                    f_make_list_2157 n_1038
                                                                    k_make_list_1725))
    zip_1030 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | (xs1_1031 = 0) = (
    br_zip_2161 (ys1_1032 = 0)
                xs1_1031
                xs2_1031
                ys1_1032
                ys2_1032
                k_zip_1305)
    zip_1030 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | (not (xs1_1031 = 0)) = (
    br_zip_2163 (1 <= xs1_1031)
                xs1_1031
                xs2_1031
                ys1_1032
                ys2_1032
                k_zip_1305)
    main_2145:X
    br_f_zip_2165:bool ->
                  int ->
                  int ->
                  (int -> (int -> (int -> int -> X) -> X) -> X) ->
                  (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    br_zip_2161:bool ->
                int ->
                (int -> (int -> X) -> X) ->
                int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
    br_zip_2163:bool ->
                int ->
                (int -> (int -> X) -> X) ->
                int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
    cons_make_list_1190:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    cons_zip_1134:int ->
                  int ->
                  int ->
                  int ->
                  int ->
                  int -> int -> (int -> (int -> int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
    f_2159:int -> X
    f_2160:int -> int -> (int -> (int -> int -> X) -> X) -> X
    f_cons_make_list_2156:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_cons_zip_2151:int ->
                    int ->
                    int -> int -> int -> int -> int -> (int -> (int -> int -> X) -> X) -> int -> (int -> int -> X) -> X
    f_main_2158:int -> (int -> (int -> (int -> int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_make_list_2155:int -> int -> (int -> X) -> X
    f_make_list_2157:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_zip_2146:int -> int -> int -> (int -> int -> X) -> X
    f_zip_2147:int -> int -> unit -> X
    f_zip_2148:int ->
               int ->
               (int -> (int -> (int -> int -> X) -> X) -> X) ->
               (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_zip_2149:int -> int -> int -> unit -> X
    f_zip_2150:int ->
               int ->
               int ->
               (int -> (int -> (int -> int -> X) -> X) -> X) ->
               (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_zip_2152:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_zip_2153:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_zip_2154:int ->
               int ->
               int ->
               int -> (int -> (int -> (int -> int -> X) -> X) -> X) -> int -> (int -> (int -> int -> X) -> X) -> X
    fail_2167:bool -> (unit -> X) -> X
    fail_2168:bool -> (unit -> X) -> X
    main_1039:int -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
    make_list_1037:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
    zip_1030:int ->
             (int -> (int -> X) -> X) ->
             int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
  inlined functions: br_f_zip_2165,br_zip_2161,br_zip_2163,cons_make_list_1190,cons_zip_1134,f_2159,f_2160,f_cons_make_list_2156,f_cons_zip_2151,f_main_2158,f_make_list_2155,f_make_list_2157,f_zip_2146,f_zip_2147,f_zip_2148,f_zip_2149,f_zip_2150,f_zip_2152,f_zip_2153,f_zip_2154,main_1039
  counterexample: 0:0:0:1:0:0:0:0:1:0:0:0:0
  error traces:
    [true.nop(<f_2159@4:0> = var2)
     [true.(<main_1039@6:0> = <f_2159@4:0>)
      [true.(<make_list_1037@8:0> = <main_1039@6:0>)
       [(not (<make_list_1037@8:0> < 0)).(<make_list_1037@11:0> = (<make_list_1037@8:0> - 1))
        [(<make_list_1037@11:0> < 0).(<<make_list_1037@11:1>@14:0> = 0)
         [true.
          ((<f_make_list_2157@16:0> = <make_list_1037@8:0>) && (<f_make_list_2157@16:2> = <<make_list_1037@11:1>@14:0>))
          [true.
           ((<cons_make_list_1190@18:0> = <f_make_list_2157@16:0>) &&
            ((<cons_make_list_1190@18:1> = <f_make_list_2157@16:0>) &&
             (<cons_make_list_1190@18:2> = <f_make_list_2157@16:2>)))
           [true.(<<cons_make_list_1190@18:4>@20:0> = (<cons_make_list_1190@18:2> + 1))
            [true.(<<f_make_list_2157@16:1>@22:0> = <<cons_make_list_1190@18:4>@20:0>)
             [true.(<<make_list_1037@8:1>@24:0> = <<f_make_list_2157@16:1>@22:0>)
              [true.((<f_main_2158@26:0> = <main_1039@6:0>) && (<f_main_2158@26:2> = <<make_list_1037@8:1>@24:0>))
               [true.((<zip_1030@28:0> = <f_main_2158@26:2>) && (<zip_1030@28:2> = <f_main_2158@26:2>))
                [(not (<zip_1030@28:0> = 0)).
                 ((<br_zip_2163@31:0> = (1 <= <zip_1030@28:0>)) &&
                  ((<br_zip_2163@31:1> = <zip_1030@28:0>) && (<br_zip_2163@31:3> = <zip_1030@28:2>)))
                 [<br_zip_2163@31:0>.(<<br_zip_2163@31:2>@34:0> = 0)
                  [true.(<<zip_1030@28:1>@36:0> = <<br_zip_2163@31:2>@34:0>)
                   [true.(<<f_main_2158@26:3>@38:0> = <<zip_1030@28:1>@36:0>)
                    [true.(<<<make_list_1037@8:1>@24:1>@40:0> = <<f_main_2158@26:3>@38:0>)
                     [true.(<<<f_make_list_2157@16:1>@22:1>@42:0> = <<<make_list_1037@8:1>@24:1>@40:0>)
                      [true.(<<<cons_make_list_1190@18:4>@20:1>@44:0> = <<<f_make_list_2157@16:1>@22:1>@42:0>)
                       [true.
                        ((<f_cons_make_list_2156@46:0> = <cons_make_list_1190@18:0>) &&
                         ((<f_cons_make_list_2156@46:1> = <cons_make_list_1190@18:1>) &&
                          ((<f_cons_make_list_2156@46:2> = <cons_make_list_1190@18:2>) &&
                           (<f_cons_make_list_2156@46:4> = <<<cons_make_list_1190@18:4>@20:1>@44:0>))))
                        [(<f_cons_make_list_2156@46:4> = 0).
                         (<<f_cons_make_list_2156@46:5>@49:0> = <f_cons_make_list_2156@46:1>)
                         [true.(<<<<cons_make_list_1190@18:4>@20:1>@44:1>@51:0> = <<f_cons_make_list_2156@46:5>@49:0>)
                          [true.
                           (<<<<f_make_list_2157@16:1>@22:1>@42:1>@53:0> =
                            <<<<cons_make_list_1190@18:4>@20:1>@44:1>@51:0>)
                           [true.
                            (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <<<<f_make_list_2157@16:1>@22:1>@42:1>@53:0>)
                            [true.(<<<f_main_2158@26:3>@38:1>@57:0> = <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>)
                             [true.(<<<zip_1030@28:1>@36:1>@59:0> = <<<f_main_2158@26:3>@38:1>@57:0>)
                              [true.(<<<br_zip_2163@31:2>@34:1>@61:0> = <<<zip_1030@28:1>@36:1>@59:0>)
                               [true.
                                ((<f_zip_2148@63:0> = <br_zip_2163@31:1>) &&
                                 ((<f_zip_2148@63:1> = <br_zip_2163@31:3>) &&
                                  (<f_zip_2148@63:5> = <<<br_zip_2163@31:2>@34:1>@61:0>)))
                                [(<f_zip_2148@63:1> = 0).(<fail_2168@66:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(263)[2]
    horn clauses:
      P[<fail_2168@66:0>](<fail_2168@66:0>:bool)|- bot
      
      P[<f_zip_2148@63:5>](<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int), <fail_2168@66:0>
      |- P[<fail_2168@66:0>](<fail_2168@66:0>:bool)
      
      P[<br_zip_2163@31:3>](true:bool,<f_zip_2148@63:0>:int,<f_zip_2148@63:1>:int),
      P[<<<br_zip_2163@31:2>@34:1>@61:0>](true:bool,<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int)|- P[<f_zip_2148@63:5>](
      <f_zip_2148@63:0>:int,<f_zip_2148@63:1>:int,<f_zip_2148@63:5>:int)
      
      P[<zip_1030@28:2>](<br_zip_2163@31:1>:int,<br_zip_2163@31:3>:int),
      P[<<<zip_1030@28:1>@36:1>@59:0>](<br_zip_2163@31:1>:int,<<br_zip_2163@31:2>@34:0>:int,<<<br_zip_2163@31:2>@34:1>@61:0>:int),
      ((<br_zip_2163@31:1> <> 0) && (<br_zip_2163@31:0> = (1 <= <br_zip_2163@31:1>)))
      |- P[<<<br_zip_2163@31:2>@34:1>@61:0>](<br_zip_2163@31:0>:bool,
                                             <br_zip_2163@31:1>:int,<<br_zip_2163@31:2>@34:0>:int,
                                             <<<br_zip_2163@31:2>@34:1>@61:0>:int)
      
      P[<f_main_2158@26:2>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int),
      P[<<<f_main_2158@26:3>@38:1>@57:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
      <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
      
      P[<main_1039@6:0>](<f_main_2158@26:0>:int),
      P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<f_main_2158@26:2>:int),
      P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<f_main_2158@26:2>:int,<<f_main_2158@26:3>@38:0>:int,<<<f_main_2158@26:3>@38:1>@57:0>:int),
      P[<f_main_2158@26:2>](<f_main_2158@26:0>:int,<f_main_2158@26:2>:int)|- P[<<<f_main_2158@26:3>@38:1>@57:0>](
      <f_main_2158@26:0>:int,<f_main_2158@26:2>:int,<<f_main_2158@26:3>@38:0>:int,
      <<<f_main_2158@26:3>@38:1>@57:0>:int)
      
      P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
      P[<<f_make_list_2157@16:1>@22:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
      P[<<<<f_make_list_2157@16:1>@22:1>@42:1>@53:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int),
      P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
      (<make_list_1037@8:0> >= 0)
      |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                      <<make_list_1037@8:1>@24:0>:int,
                                                      <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                      <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
      
      P[<f_make_list_2157@16:2>](<f_make_list_2157@16:0>:int,<cons_make_list_1190@18:2>:int),
      P[<<cons_make_list_1190@18:4>@20:0>](<f_make_list_2157@16:0>:int,<f_make_list_2157@16:0>:int,<cons_make_list_1190@18:2>:int,<<f_make_list_2157@16:1>@22:0>:int),
      P[<<<<cons_make_list_1190@18:4>@20:1>@44:1>@51:0>](<f_make_list_2157@16:0>:int,<f_make_list_2157@16:0>:int,<cons_make_list_1190@18:2>:int,<<f_make_list_2157@16:1>@22:0>:int,<<<f_make_list_2157@16:1>@22:1>@42:0>:int,<<<<f_make_list_2157@16:1>@22:1>@42:1>@53:0>:int),
      P[<<f_make_list_2157@16:1>@22:0>](<f_make_list_2157@16:0>:int,<<f_make_list_2157@16:1>@22:0>:int)|- P[<<<<f_make_list_2157@16:1>@22:1>@42:1>@53:0>](
      <f_make_list_2157@16:0>:int,<<f_make_list_2157@16:1>@22:0>:int,
      <<<f_make_list_2157@16:1>@22:1>@42:0>:int,<<<<f_make_list_2157@16:1>@22:1>@42:1>@53:0>:int)
      
      P[<cons_make_list_1190@18:2>](<cons_make_list_1190@18:0>:int,<cons_make_list_1190@18:1>:int,<cons_make_list_1190@18:2>:int),
      P[<<f_cons_make_list_2156@46:5>@49:0>](<cons_make_list_1190@18:0>:int,<cons_make_list_1190@18:1>:int,<cons_make_list_1190@18:2>:int,<<<cons_make_list_1190@18:4>@20:1>@44:0>:int,<<<<cons_make_list_1190@18:4>@20:1>@44:1>@51:0>:int),
      P[<<cons_make_list_1190@18:4>@20:0>](<cons_make_list_1190@18:0>:int,<cons_make_list_1190@18:1>:int,<cons_make_list_1190@18:2>:int,<<cons_make_list_1190@18:4>@20:0>:int),
      (<<cons_make_list_1190@18:4>@20:0> = (1 + <cons_make_list_1190@18:2>))
      |- P[<<<<cons_make_list_1190@18:4>@20:1>@44:1>@51:0>](<cons_make_list_1190@18:0>:int,
                                                            <cons_make_list_1190@18:1>:int,
                                                            <cons_make_list_1190@18:2>:int,
                                                            <<cons_make_list_1190@18:4>@20:0>:int,
                                                            <<<cons_make_list_1190@18:4>@20:1>@44:0>:int,
                                                            <<<<cons_make_list_1190@18:4>@20:1>@44:1>@51:0>:int)
      
      P[<f_cons_make_list_2156@46:4>](<f_cons_make_list_2156@46:0>:int,<f_cons_make_list_2156@46:1>:int,<f_cons_make_list_2156@46:2>:int,<f_cons_make_list_2156@46:4>:int),
      ((<f_cons_make_list_2156@46:4> = 0) && (<<f_cons_make_list_2156@46:5>@49:0> = <f_cons_make_list_2156@46:1>))
      |- P[<<f_cons_make_list_2156@46:5>@49:0>](<f_cons_make_list_2156@46:0>:int,
                                                <f_cons_make_list_2156@46:1>:int,
                                                <f_cons_make_list_2156@46:2>:int,
                                                <f_cons_make_list_2156@46:4>:int,
                                                <<f_cons_make_list_2156@46:5>@49:0>:int)
      
      P[<cons_make_list_1190@18:2>](<f_cons_make_list_2156@46:0>:int,<f_cons_make_list_2156@46:1>:int,<f_cons_make_list_2156@46:2>:int),
      P[<<<cons_make_list_1190@18:4>@20:1>@44:0>](<f_cons_make_list_2156@46:0>:int,<f_cons_make_list_2156@46:1>:int,<f_cons_make_list_2156@46:2>:int,(
                                                  1 + <f_cons_make_list_2156@46:2>):int,<f_cons_make_list_2156@46:4>:int)|- P[<f_cons_make_list_2156@46:4>](
      <f_cons_make_list_2156@46:0>:int,<f_cons_make_list_2156@46:1>:int,
      <f_cons_make_list_2156@46:2>:int,<f_cons_make_list_2156@46:4>:int)
      
      P[<f_make_list_2157@16:2>](<cons_make_list_1190@18:0>:int,<cons_make_list_1190@18:2>:int),
      P[<<<f_make_list_2157@16:1>@22:1>@42:0>](<cons_make_list_1190@18:0>:int,<<cons_make_list_1190@18:4>@20:0>:int,<<<cons_make_list_1190@18:4>@20:1>@44:0>:int),
      P[<cons_make_list_1190@18:2>](<cons_make_list_1190@18:0>:int,<cons_make_list_1190@18:1>:int,<cons_make_list_1190@18:2>:int),
      (<cons_make_list_1190@18:0> = <cons_make_list_1190@18:1>)
      |- P[<<<cons_make_list_1190@18:4>@20:1>@44:0>](<cons_make_list_1190@18:0>:int,
                                                     <cons_make_list_1190@18:1>:int,
                                                     <cons_make_list_1190@18:2>:int,
                                                     <<cons_make_list_1190@18:4>@20:0>:int,
                                                     <<<cons_make_list_1190@18:4>@20:1>@44:0>:int)
      
      P[<make_list_1037@8:0>](<f_make_list_2157@16:0>:int),
      P[<<<make_list_1037@8:1>@24:1>@40:0>](<f_make_list_2157@16:0>:int,<<f_make_list_2157@16:1>@22:0>:int,<<<f_make_list_2157@16:1>@22:1>@42:0>:int),
      (<f_make_list_2157@16:0> >= 0)
      |- P[<<<f_make_list_2157@16:1>@22:1>@42:0>](<f_make_list_2157@16:0>:int,
                                                  <<f_make_list_2157@16:1>@22:0>:int,
                                                  <<<f_make_list_2157@16:1>@22:1>@42:0>:int)
      
      P[<main_1039@6:0>](<make_list_1037@8:0>:int),
      P[<<f_main_2158@26:3>@38:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
      P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
      <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
      
      P[<f_main_2158@26:2>](<f_main_2158@26:0>:int,<f_main_2158@26:2>:int),
      P[<<zip_1030@28:1>@36:0>](<f_main_2158@26:2>:int,<<f_main_2158@26:3>@38:0>:int)|- P[<<f_main_2158@26:3>@38:0>](
      <f_main_2158@26:0>:int,<f_main_2158@26:2>:int,<<f_main_2158@26:3>@38:0>:int)
      
      P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
      P[<<br_zip_2163@31:2>@34:0>]((1 <= <zip_1030@28:0>):bool,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int),
      (<zip_1030@28:0> <> 0) |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,
                                                          <<zip_1030@28:1>@36:0>:int)
      
      P[<br_zip_2163@31:3>](<br_zip_2163@31:0>:bool,<br_zip_2163@31:1>:int,<br_zip_2163@31:3>:int),
      ((<<br_zip_2163@31:2>@34:0> = 0) && <br_zip_2163@31:0>)
      |- P[<<br_zip_2163@31:2>@34:0>](<br_zip_2163@31:0>:bool,<br_zip_2163@31:1>:int,
                                      <<br_zip_2163@31:2>@34:0>:int)
      
      P[<zip_1030@28:2>](<br_zip_2163@31:1>:int,<br_zip_2163@31:3>:int),
      ((<br_zip_2163@31:1> <> 0) && (<br_zip_2163@31:0> = (1 <= <br_zip_2163@31:1>)))
      |- P[<br_zip_2163@31:3>](<br_zip_2163@31:0>:bool,<br_zip_2163@31:1>:int,
                               <br_zip_2163@31:3>:int)
      
      P[<f_main_2158@26:2>](<f_main_2158@26:0>:int,<zip_1030@28:2>:int), (
      <zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                               <zip_1030@28:2>:int)
      
      P[<main_1039@6:0>](<f_main_2158@26:0>:int),
      P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<f_main_2158@26:2>:int)|- P[<f_main_2158@26:2>](
      <f_main_2158@26:0>:int,<f_main_2158@26:2>:int)
      
      P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
      P[<<f_make_list_2157@16:1>@22:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
      (<make_list_1037@8:0> >= 0)
      |- P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int)
      
      P[<f_make_list_2157@16:2>](<f_make_list_2157@16:0>:int,<cons_make_list_1190@18:2>:int),
      P[<<cons_make_list_1190@18:4>@20:0>](<f_make_list_2157@16:0>:int,<f_make_list_2157@16:0>:int,<cons_make_list_1190@18:2>:int,<<f_make_list_2157@16:1>@22:0>:int)|- P[<<f_make_list_2157@16:1>@22:0>](
      <f_make_list_2157@16:0>:int,<<f_make_list_2157@16:1>@22:0>:int)
      
      P[<cons_make_list_1190@18:2>](<cons_make_list_1190@18:0>:int,<cons_make_list_1190@18:1>:int,<cons_make_list_1190@18:2>:int),
      (<<cons_make_list_1190@18:4>@20:0> = (1 + <cons_make_list_1190@18:2>))
      |- P[<<cons_make_list_1190@18:4>@20:0>](<cons_make_list_1190@18:0>:int,
                                              <cons_make_list_1190@18:1>:int,
                                              <cons_make_list_1190@18:2>:int,
                                              <<cons_make_list_1190@18:4>@20:0>:int)
      
      P[<f_make_list_2157@16:2>](<cons_make_list_1190@18:0>:int,<cons_make_list_1190@18:2>:int),
      (<cons_make_list_1190@18:0> = <cons_make_list_1190@18:1>)
      |- P[<cons_make_list_1190@18:2>](<cons_make_list_1190@18:0>:int,
                                       <cons_make_list_1190@18:1>:int,
                                       <cons_make_list_1190@18:2>:int)
      
      P[<make_list_1037@8:0>](<f_make_list_2157@16:0>:int),
      P[<<make_list_1037@11:1>@14:0>]((-1 + <f_make_list_2157@16:0>):int,<f_make_list_2157@16:2>:int),
      (<f_make_list_2157@16:0> >= 0)
      |- P[<f_make_list_2157@16:2>](<f_make_list_2157@16:0>:int,<f_make_list_2157@16:2>:int)
      
      P[<make_list_1037@11:0>](<make_list_1037@11:0>:int),
      ((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> < 0))
      |- P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,<<make_list_1037@11:1>@14:0>:int)
      
      P[<make_list_1037@8:0>]((1 + <make_list_1037@11:0>):int), ((1 + <make_list_1037@11:0>) >= 0)
      |- P[<make_list_1037@11:0>](<make_list_1037@11:0>:int)
      
      P[<main_1039@6:0>](<make_list_1037@8:0>:int)|- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
      
      P[<f_2159@4:0>](<main_1039@6:0>:int)|- P[<main_1039@6:0>](<main_1039@6:0>:int)
      
      |- P[<f_2159@4:0>](<f_2159@4:0>:int)
    call trees:
      <main_2145@1>
        <f_2159@4>
          <main_1039@6>
            <make_list_1037@8>
              <make_list_1037@11>
              </<make_list_1037@11:1>@14>
              <f_make_list_2157@16>
                <cons_make_list_1190@18>
                </<cons_make_list_1190@18:4>@20>
              </<f_make_list_2157@16:1>@22>
            </<make_list_1037@8:1>@24>
            <f_main_2158@26>
              <zip_1030@28>
                <br_zip_2163@31>
                </<br_zip_2163@31:2>@34>
              </<zip_1030@28:1>@36>
            </<f_main_2158@26:3>@38>
            <<<make_list_1037@8:1>@24:1>@40>
              <<<f_make_list_2157@16:1>@22:1>@42>
                <<<cons_make_list_1190@18:4>@20:1>@44>
                  <f_cons_make_list_2156@46>
                  </<f_cons_make_list_2156@46:5>@49>
                </<<<cons_make_list_1190@18:4>@20:1>@44:1>@51>
              </<<<f_make_list_2157@16:1>@22:1>@42:1>@53>
            </<<<make_list_1037@8:1>@24:1>@40:1>@55>
            <<<f_main_2158@26:3>@38:1>@57>
              <<<zip_1030@28:1>@36:1>@59>
                <<<br_zip_2163@31:2>@34:1>@61>
                  <f_zip_2148@63>
                    <fail_2168@66>
    inlined horn clauses:
      P[<fail_2168@66:0>](<fail_2168@66:0>:bool)|- bot
      
      P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int),
      P[<<<zip_1030@28:1>@36:1>@59:0>](<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int),
      ((<f_zip_2148@63:0> >= 1) && <fail_2168@66:0>) |- P[<fail_2168@66:0>](
      <fail_2168@66:0>:bool)
      
      P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int),
      P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
      <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
      
      P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
      P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
      P[<<make_list_1037@11:1>@14:0>]((-1 + <make_list_1037@8:0>):int,(
                                      -1 + <<make_list_1037@8:1>@24:0>):int),
      P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
      ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
       ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
      |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                      <<make_list_1037@8:1>@24:0>:int,
                                                      <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                      <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
      
      P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
      P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
      P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
      <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
      
      P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
      ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
      |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
      
      P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:2>:int), (
      <zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                               <zip_1030@28:2>:int)
      
      P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
      P[<<make_list_1037@11:1>@14:0>]((-1 + <make_list_1037@8:0>):int,(
                                      -1 + <<make_list_1037@8:1>@24:0>):int), (
      <make_list_1037@8:0> >= 0)
      |- P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int)
      
      P[<make_list_1037@11:0>](<make_list_1037@11:0>:int),
      ((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> < 0))
      |- P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,<<make_list_1037@11:1>@14:0>:int)
      
      P[<make_list_1037@8:0>]((1 + <make_list_1037@11:0>):int), ((1 + <make_list_1037@11:0>) >= 0)
      |- P[<make_list_1037@11:0>](<make_list_1037@11:0>:int)
      
      |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
    begin ParamSubstInfer.infer(5047)[3]
      
    end ParamSubstInfer.infer(5047)[3] (0.036994 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(5049)[3]
      
    end RefTypeInfer.elim_coeffs(5049)[3] (0.002000 sec.)
    begin GenHcSolver.solve(5499)[3]
      Horn clauses:
        P[<fail_2168@66:0>](<fail_2168@66:0>:bool)|- bot
        
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int),
        P[<<<zip_1030@28:1>@36:1>@59:0>](<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int),
        ((<f_zip_2148@63:0> >= 1) && <fail_2168@66:0>) |- P[<fail_2168@66:0>](
        <fail_2168@66:0>:bool)
        
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int),
        P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
        <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
        
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
        P[<<make_list_1037@11:1>@14:0>]((-1 + <make_list_1037@8:0>):int,(
                                        -1 + <<make_list_1037@8:1>@24:0>):int),
        P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
        |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                        <<make_list_1037@8:1>@24:0>:int,
                                                        <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                        <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
        
        P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
        P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
        <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
        
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
        
        P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:2>:int), (
        <zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                 <zip_1030@28:2>:int)
        
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
        P[<<make_list_1037@11:1>@14:0>]((-1 + <make_list_1037@8:0>):int,(
                                        -1 + <<make_list_1037@8:1>@24:0>):int), (
        <make_list_1037@8:0> >= 0)
        |- P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int)
        
        P[<make_list_1037@11:0>](<make_list_1037@11:0>:int),
        ((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> < 0))
        |- P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,
                                           <<make_list_1037@11:1>@14:0>:int)
        
        P[<make_list_1037@8:0>]((1 + <make_list_1037@11:0>):int), ((1 + <make_list_1037@11:0>) >= 0)
        |- P[<make_list_1037@11:0>](<make_list_1037@11:0>:int)
        
        |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
      lower bounds:
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
        P[<make_list_1037@11:0>](<make_list_1037@11:0>:int) = ((1 + <make_list_1037@11:0>) >= 0)
        P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,<<make_list_1037@11:1>@14:0>:int) =
        ((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> = -1))
        P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int) =
        ((<make_list_1037@8:0> = 0) && (<<make_list_1037@8:1>@24:0> = 1))
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) =
        ((<zip_1030@28:2> = 1) && (<zip_1030@28:2> = <zip_1030@28:0>))
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> = 1))
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
        ((<make_list_1037@8:0> = 0) && ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> = 1)))
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int) =
        ((<make_list_1037@8:0> = 0) &&
         ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
          ((<<make_list_1037@8:1>@24:0> = 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
        P[<<<zip_1030@28:1>@36:1>@59:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> = 0) && (<zip_1030@28:0> = 1)))
        P[<fail_2168@66:0>](<fail_2168@66:0>:bool) = false
      upper bounds:
        P[<<make_list_1037@8:1>@24:0>](var17:int,var18:int) = true
        P[<<make_list_1037@11:1>@14:0>](var10:int,var11:int) = true
      begin GenHcSolver.classify_pids(11153)[4]
        output:
          [<<make_list_1037@11:1>@14:0>;<<make_list_1037@8:1>@24:0>]
      end GenHcSolver.classify_pids(11153)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(11164)[4]
        lb:(((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> = -1)) ||
            ((<make_list_1037@11:0> = 0) && (<<make_list_1037@11:1>@14:0> = 1)))
        nub:false
        lb':(((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> = -1)) ||
             ((<make_list_1037@11:0> = 0) && (<<make_list_1037@11:1>@14:0> = 1)))
        nub':false
        begin InterpProver.interpolate(11165)[5]
          begin InterpProver.interpolate_fresh(11166)[6]
            begin InterpProver.interpolate_log(11167)[7]
              input1: (((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> = -1)) ||
                       ((<make_list_1037@11:0> = 0) && (<<make_list_1037@11:1>@14:0> = 1)))
              input2: false
              begin InterpProver.interpolate_check(11168)[8]
                begin InterpProver.interpolate_simplify(11169)[9]
                  begin InterpProver.interpolate_quick(11212)[10]
                    
                  end InterpProver.interpolate_quick(11212)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(11169)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(11168)[8] (0.000999 sec.)
              output: true
            end InterpProver.interpolate_log(11167)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(11166)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(11165)[5] (0.000999 sec.)
        output:
          P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,<<make_list_1037@11:1>@14:0>:int) = true
          P[<<make_list_1037@8:1>@24:0>](<make_list_1037@11:0>:int,<<make_list_1037@11:1>@14:0>:int) = true
      end ApronInterface.convex_hull_interpolate(11164)[4] (0.000999 sec.)
      Horn clauses:
        P[<fail_2168@66:0>](<fail_2168@66:0>:bool)|- bot
        
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int),
        P[<<<zip_1030@28:1>@36:1>@59:0>](<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int),
        ((<f_zip_2148@63:0> >= 1) && <fail_2168@66:0>) |- P[<fail_2168@66:0>](
        <fail_2168@66:0>:bool)
        
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
        <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
        
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
        |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                        <<make_list_1037@8:1>@24:0>:int,
                                                        <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                        <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
        
        P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
        <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
        
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
        
         (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                   <zip_1030@28:2>:int)
        
        P[<make_list_1037@8:0>]((1 + <make_list_1037@11:0>):int), ((1 + <make_list_1037@11:0>) >= 0)
        |- P[<make_list_1037@11:0>](<make_list_1037@11:0>:int)
        
        |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
      lower bounds:
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:2> = <zip_1030@28:0>)
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        P[<make_list_1037@11:0>](<make_list_1037@11:0>:int) = ((1 + <make_list_1037@11:0>) >= 0)
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) &&
          ((<<make_list_1037@8:1>@24:0> >= 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
        P[<<<zip_1030@28:1>@36:1>@59:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && (<zip_1030@28:0> >= 1)))
        P[<fail_2168@66:0>](<fail_2168@66:0>:bool) = false
      upper bounds:
        P[<make_list_1037@11:0>](var21:int) = true
        P[<make_list_1037@8:0>](var20:int) = true
      begin GenHcSolver.classify_pids(17724)[4]
        output:
          [<make_list_1037@8:0>;<make_list_1037@11:0>]
      end GenHcSolver.classify_pids(17724)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(17735)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(17736)[5]
          begin InterpProver.interpolate_fresh(17737)[6]
            begin InterpProver.interpolate_log(17738)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(17739)[8]
                begin InterpProver.interpolate_simplify(17740)[9]
                  begin InterpProver.interpolate_quick(17753)[10]
                    
                  end InterpProver.interpolate_quick(17753)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(17740)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(17739)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(17738)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(17737)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(17736)[5] (0.000000 sec.)
        output:
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
          P[<make_list_1037@11:0>](<make_list_1037@8:0>:int) = true
      end ApronInterface.convex_hull_interpolate(17735)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_2168@66:0>](<fail_2168@66:0>:bool)|- bot
        
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int),
        P[<<<zip_1030@28:1>@36:1>@59:0>](<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int),
        ((<f_zip_2148@63:0> >= 1) && <fail_2168@66:0>) |- P[<fail_2168@66:0>](
        <fail_2168@66:0>:bool)
        
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
        <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
        
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
        |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                        <<make_list_1037@8:1>@24:0>:int,
                                                        <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                        <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
        
        P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
        <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
        
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
        
         (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                   <zip_1030@28:2>:int)
      lower bounds:
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:2> = <zip_1030@28:0>)
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) &&
          ((<<make_list_1037@8:1>@24:0> >= 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
        P[<<<zip_1030@28:1>@36:1>@59:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && (<zip_1030@28:0> >= 1)))
        P[<fail_2168@66:0>](<fail_2168@66:0>:bool) = false
      upper bounds:
        P[<fail_2168@66:0>](var23:bool) = true
      begin GenHcSolver.classify_pids(22176)[4]
        output:
          [<fail_2168@66:0>]
      end GenHcSolver.classify_pids(22176)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(22179)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(22180)[5]
          begin InterpProver.interpolate_fresh(22181)[6]
            begin InterpProver.interpolate_log(22182)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(22183)[8]
                begin InterpProver.interpolate_simplify(22184)[9]
                  begin InterpProver.interpolate_quick(22197)[10]
                    
                  end InterpProver.interpolate_quick(22197)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(22201)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(22201)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(22184)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(22183)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(22182)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(22181)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(22180)[5] (0.000000 sec.)
        output:
          P[<fail_2168@66:0>](<fail_2168@66:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(22179)[4] (0.000000 sec.)
      Horn clauses:
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int),
        P[<<<zip_1030@28:1>@36:1>@59:0>](<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int), (
        <f_zip_2148@63:0> >= 1) |- bot
        
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
        <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
        
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
        |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                        <<make_list_1037@8:1>@24:0>:int,
                                                        <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                        <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
        
        P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
        <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
        
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
        
         (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                   <zip_1030@28:2>:int)
      lower bounds:
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:2> = <zip_1030@28:0>)
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) &&
          ((<<make_list_1037@8:1>@24:0> >= 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
        P[<<<zip_1030@28:1>@36:1>@59:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && (<zip_1030@28:0> >= 1)))
      upper bounds:
        P[<<<zip_1030@28:1>@36:1>@59:0>](var24:int,var25:int,var26:int) = true
      begin GenHcSolver.classify_pids(25005)[4]
        output:
          [<<<zip_1030@28:1>@36:1>@59:0>]
      end GenHcSolver.classify_pids(25005)[4] (0.000000 sec.)
      lb:((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && (<zip_1030@28:0> >= 1)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(25008)[4]
        lb:((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && (<zip_1030@28:0> >= 1)))
        nub:false
        lb':((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && (<zip_1030@28:0> >= 1)))
        nub':false
        begin InterpProver.interpolate(25009)[5]
          begin InterpProver.interpolate_fresh(25010)[6]
            begin InterpProver.interpolate_log(25011)[7]
              input1: ((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && (<zip_1030@28:0> >= 1)))
              input2: false
              begin InterpProver.interpolate_check(25012)[8]
                begin InterpProver.interpolate_simplify(25013)[9]
                  begin InterpProver.interpolate_quick(25088)[10]
                    
                  end InterpProver.interpolate_quick(25088)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(25013)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(25012)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(25011)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(25010)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(25009)[5] (0.001000 sec.)
        output:
          P[<<<zip_1030@28:1>@36:1>@59:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(25008)[4] (0.002000 sec.)
      Horn clauses:
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int), (<f_zip_2148@63:0> >= 1) |- bot
        
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
        |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                        <<make_list_1037@8:1>@24:0>:int,
                                                        <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                        <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
        
        P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
        <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
        
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
        
         (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                   <zip_1030@28:2>:int)
      lower bounds:
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:2> = <zip_1030@28:0>)
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) &&
          ((<<make_list_1037@8:1>@24:0> >= 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
      upper bounds:
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](var27:int,var28:int,var29:int,var30:int) = true
      begin GenHcSolver.classify_pids(27365)[4]
        output:
          [<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>]
      end GenHcSolver.classify_pids(27365)[4] (0.000000 sec.)
      lb:((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
          ((<make_list_1037@8:0> >= 0) &&
           ((<<make_list_1037@8:1>@24:0> >= 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(27368)[4]
        lb:((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
            ((<make_list_1037@8:0> >= 0) &&
             ((<<make_list_1037@8:1>@24:0> >= 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
        nub:false
        lb':((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
             ((<make_list_1037@8:0> >= 0) &&
              ((<<make_list_1037@8:1>@24:0> >= 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
        nub':false
        begin InterpProver.interpolate(27369)[5]
          begin InterpProver.interpolate_fresh(27370)[6]
            begin InterpProver.interpolate_log(27371)[7]
              input1: ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
                       ((<make_list_1037@8:0> >= 0) &&
                        ((<<make_list_1037@8:1>@24:0> >= 1) &&
                         (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
              input2: false
              begin InterpProver.interpolate_check(27372)[8]
                begin InterpProver.interpolate_simplify(27373)[9]
                  begin InterpProver.interpolate_quick(27471)[10]
                    
                  end InterpProver.interpolate_quick(27471)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(27373)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(27372)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(27371)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(27370)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(27369)[5] (0.001000 sec.)
        output:
          P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(27368)[4] (0.001000 sec.)
      Horn clauses:
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int), (<f_zip_2148@63:0> >= 1) |- bot
        
        P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
        <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
        
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
        
         (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                   <zip_1030@28:2>:int)
      lower bounds:
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:2> = <zip_1030@28:0>)
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
      upper bounds:
        P[<<<make_list_1037@8:1>@24:1>@40:0>](var31:int,var32:int,var33:int) = true
      begin GenHcSolver.classify_pids(28712)[4]
        output:
          [<<<make_list_1037@8:1>@24:1>@40:0>]
      end GenHcSolver.classify_pids(28712)[4] (0.000000 sec.)
      lb:((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(28715)[4]
        lb:((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
        nub:false
        lb':((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
        nub':false
        begin InterpProver.interpolate(28716)[5]
          begin InterpProver.interpolate_fresh(28717)[6]
            begin InterpProver.interpolate_log(28718)[7]
              input1: ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
              input2: false
              begin InterpProver.interpolate_check(28719)[8]
                begin InterpProver.interpolate_simplify(28720)[9]
                  begin InterpProver.interpolate_quick(28759)[10]
                    
                  end InterpProver.interpolate_quick(28759)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(28720)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(28719)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(28718)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(28717)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(28716)[5] (0.001000 sec.)
        output:
          P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(28715)[4] (0.001000 sec.)
      Horn clauses:
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int), (<f_zip_2148@63:0> >= 1) |- bot
        
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
        
         (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                   <zip_1030@28:2>:int)
      lower bounds:
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:2> = <zip_1030@28:0>)
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
      upper bounds:
        P[<<zip_1030@28:1>@36:0>](var34:int,var35:int) = true
      begin GenHcSolver.classify_pids(29605)[4]
        output:
          [<<zip_1030@28:1>@36:0>]
      end GenHcSolver.classify_pids(29605)[4] (0.000000 sec.)
      lb:((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(29608)[4]
        lb:((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        nub:false
        lb':((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        nub':false
        begin InterpProver.interpolate(29609)[5]
          begin InterpProver.interpolate_fresh(29610)[6]
            begin InterpProver.interpolate_log(29611)[7]
              input1: ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
              input2: false
              begin InterpProver.interpolate_check(29612)[8]
                begin InterpProver.interpolate_simplify(29613)[9]
                  begin InterpProver.interpolate_quick(29652)[10]
                    
                  end InterpProver.interpolate_quick(29652)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(29613)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(29612)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(29611)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(29610)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(29609)[5] (0.000000 sec.)
        output:
          P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) = true
      end ApronInterface.convex_hull_interpolate(29608)[4] (0.000000 sec.)
      Horn clauses:
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int), (<f_zip_2148@63:0> >= 1) |- bot
        
         (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                   <zip_1030@28:2>:int)
      lower bounds:
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:2> = <zip_1030@28:0>)
      upper bounds:
        P[<zip_1030@28:2>](var36:int,var37:int) = ((var37 <> 0) || (var36 < 1))
      begin GenHcSolver.classify_pids(30246)[4]
        output:
          [<zip_1030@28:2>]
      end GenHcSolver.classify_pids(30246)[4] (0.000000 sec.)
      lb:(<zip_1030@28:2> = <zip_1030@28:0>)
      nub:(not ((<zip_1030@28:2> <> 0) || (<zip_1030@28:0> < 1)))
      begin ApronInterface.convex_hull_interpolate(30249)[4]
        lb:(<zip_1030@28:2> = <zip_1030@28:0>)
        nub:(not ((<zip_1030@28:2> <> 0) || (<zip_1030@28:0> < 1)))
        lb':(<zip_1030@28:2> = <zip_1030@28:0>)
        nub':(not ((<zip_1030@28:2> <> 0) || (<zip_1030@28:0> < 1)))
        begin InterpProver.interpolate(30250)[5]
          begin InterpProver.interpolate_fresh(30251)[6]
            begin InterpProver.interpolate_log(30252)[7]
              input1: (<zip_1030@28:2> = <zip_1030@28:0>)
              input2: (not ((<zip_1030@28:2> <> 0) || (<zip_1030@28:0> < 1)))
              begin InterpProver.interpolate_check(30253)[8]
                begin InterpProver.interpolate_simplify(30254)[9]
                  begin InterpProver.interpolate_quick(30291)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(30300)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(30301)[12]
                        begin CsisatInterface.interpolate_csisat_log(30302)[13]
                          input1: v_sep_zip_1030_sep_28_sep_0 = v_sep_zip_1030_sep_28_sep_2
                          input2: (0 = v_sep_zip_1030_sep_28_sep_2 & 1 <= v_sep_zip_1030_sep_28_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(30303)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(30303)[14] (0.000000 sec.)
                          output: (-2*v_sep_zip_1030_sep_28_sep_2 + 2*v_sep_zip_1030_sep_28_sep_0) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(30302)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_zip_1030_sep_28_sep_2 + 2*v_sep_zip_1030_sep_28_sep_0) <= 0
                        after dnf conversion: (((-2*v_sep_zip_1030_sep_28_sep_2 + 2*v_sep_zip_1030_sep_28_sep_0) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(30301)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(30300)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(30291)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(30254)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(30253)[8] (0.001000 sec.)
              output: (<zip_1030@28:0> <= <zip_1030@28:2>)
            end InterpProver.interpolate_log(30252)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(30251)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(30250)[5] (0.001000 sec.)
        output:
          P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:0> <= <zip_1030@28:2>)
      end ApronInterface.convex_hull_interpolate(30249)[4] (0.001000 sec.)
      begin HcSolver.check_validity(30421)[4]
        input:
          P[<fail_2168@66:0>](<fail_2168@66:0>:bool)|- bot
          
          P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int),
          P[<<<zip_1030@28:1>@36:1>@59:0>](<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int),
          ((<f_zip_2148@63:0> >= 1) && <fail_2168@66:0>) |- P[<fail_2168@66:0>](
          <fail_2168@66:0>:bool)
          
          P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int),
          P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
          <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
          
          P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          P[<<make_list_1037@11:1>@14:0>]((-1 + <make_list_1037@8:0>):int,(
                                          -1 + <<make_list_1037@8:1>@24:0>):int),
          P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
          ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
           ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
          |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                          <<make_list_1037@8:1>@24:0>:int,
                                                          <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                          <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
          
          P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
          P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
          <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
          
          P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
          ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
          |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
          
          P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:2>:int),
          (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                    <zip_1030@28:2>:int)
          
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          P[<<make_list_1037@11:1>@14:0>]((-1 + <make_list_1037@8:0>):int,(
                                          -1 + <<make_list_1037@8:1>@24:0>):int), (
          <make_list_1037@8:0> >= 0)
          |- P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,
                                            <<make_list_1037@8:1>@24:0>:int)
          
          P[<make_list_1037@11:0>](<make_list_1037@11:0>:int),
          ((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> < 0))
          |- P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,
                                             <<make_list_1037@11:1>@14:0>:int)
          
          P[<make_list_1037@8:0>]((1 + <make_list_1037@11:0>):int), (
          (1 + <make_list_1037@11:0>) >= 0) |- P[<make_list_1037@11:0>](
          <make_list_1037@11:0>:int)
          
          |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(30421)[4] (0.004999 sec.)
      solution:
        P[<fail_2168@66:0>](<fail_2168@66:0>:bool) = false
        P[<<<zip_1030@28:1>@36:1>@59:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int) =
        true
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int) =
        true
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
        true
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) = true
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:0> <= <zip_1030@28:2>)
        P[<<make_list_1037@8:1>@24:0>](<make_list_1037@11:0>:int,<<make_list_1037@11:1>@14:0>:int) = true
        P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,<<make_list_1037@11:1>@14:0>:int) = true
        P[<make_list_1037@11:0>](<make_list_1037@8:0>:int) = true
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
    end GenHcSolver.solve(5499)[3] (0.113983 sec.)
    begin GenHcSolver.solve(31146)[3]
      Horn clauses:
        P[<fail_2168@66:0>](<fail_2168@66:0>:bool)|- bot
        
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int),
        P[<<<zip_1030@28:1>@36:1>@59:0>](<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int),
        ((<f_zip_2148@63:0> >= 1) && <fail_2168@66:0>) |- P[<fail_2168@66:0>](
        <fail_2168@66:0>:bool)
        
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int),
        P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
        <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
        
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
        P[<<make_list_1037@11:1>@14:0>]((-1 + <make_list_1037@8:0>):int,(
                                        -1 + <<make_list_1037@8:1>@24:0>):int),
        P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
        |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                        <<make_list_1037@8:1>@24:0>:int,
                                                        <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                        <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
        
        P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
        P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
        <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
        
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
        
        P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:2>:int), (
        <zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                 <zip_1030@28:2>:int)
        
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
        P[<<make_list_1037@11:1>@14:0>]((-1 + <make_list_1037@8:0>):int,(
                                        -1 + <<make_list_1037@8:1>@24:0>):int), (
        <make_list_1037@8:0> >= 0)
        |- P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int)
        
        P[<make_list_1037@11:0>](<make_list_1037@11:0>:int),
        ((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> < 0))
        |- P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,
                                           <<make_list_1037@11:1>@14:0>:int)
        
        P[<make_list_1037@8:0>]((1 + <make_list_1037@11:0>):int), ((1 + <make_list_1037@11:0>) >= 0)
        |- P[<make_list_1037@11:0>](<make_list_1037@11:0>:int)
        
        |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
      lower bounds:
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
        P[<make_list_1037@11:0>](<make_list_1037@11:0>:int) = ((1 + <make_list_1037@11:0>) >= 0)
        P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,<<make_list_1037@11:1>@14:0>:int) =
        ((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> = -1))
        P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int) =
        ((<make_list_1037@8:0> = 0) && (<<make_list_1037@8:1>@24:0> = 1))
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) =
        ((<zip_1030@28:2> = 1) && (<zip_1030@28:2> = <zip_1030@28:0>))
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> = 1))
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
        ((<make_list_1037@8:0> = 0) && ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> = 1)))
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int) =
        ((<make_list_1037@8:0> = 0) &&
         ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
          ((<<make_list_1037@8:1>@24:0> = 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
        P[<<<zip_1030@28:1>@36:1>@59:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> = 0) && (<zip_1030@28:0> = 1)))
        P[<fail_2168@66:0>](<fail_2168@66:0>:bool) = false
      upper bounds:
        P[<<make_list_1037@8:1>@24:0>](var50:int,var51:int) = true
        P[<<make_list_1037@11:1>@14:0>](var43:int,var44:int) = true
      begin GenHcSolver.classify_pids(36800)[4]
        output:
          [<<make_list_1037@11:1>@14:0>;<<make_list_1037@8:1>@24:0>]
      end GenHcSolver.classify_pids(36800)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(36811)[4]
        lb:(((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> = -1)) ||
            ((<make_list_1037@11:0> = 0) && (<<make_list_1037@11:1>@14:0> = 1)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(36829)[5]
          ts: (((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> = -1)) ||
               ((<make_list_1037@11:0> = 0) && (<<make_list_1037@11:1>@14:0> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(36829)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(36840)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(36840)[5] (0.000000 sec.)
        lb':((((-1 + <<make_list_1037@11:1>@14:0>) + (-1 * <make_list_1037@11:0>)) = 0) &&
             (((-1 * <make_list_1037@11:0>) >= 0) && ((1 + <make_list_1037@11:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(36843)[5]
          begin InterpProver.interpolate_fresh(36844)[6]
            begin InterpProver.interpolate_log(36845)[7]
              input1: ((((-1 + <<make_list_1037@11:1>@14:0>) + (-1 * <make_list_1037@11:0>)) = 0) &&
                       (((-1 * <make_list_1037@11:0>) >= 0) && ((1 + <make_list_1037@11:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(36846)[8]
                begin InterpProver.interpolate_simplify(36847)[9]
                  begin InterpProver.interpolate_quick(36953)[10]
                    
                  end InterpProver.interpolate_quick(36953)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(36847)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(36846)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(36845)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(36844)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(36843)[5] (0.001000 sec.)
        output:
          P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,<<make_list_1037@11:1>@14:0>:int) = true
          P[<<make_list_1037@8:1>@24:0>](<make_list_1037@11:0>:int,<<make_list_1037@11:1>@14:0>:int) = true
      end ApronInterface.convex_hull_interpolate(36811)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_2168@66:0>](<fail_2168@66:0>:bool)|- bot
        
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int),
        P[<<<zip_1030@28:1>@36:1>@59:0>](<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int),
        ((<f_zip_2148@63:0> >= 1) && <fail_2168@66:0>) |- P[<fail_2168@66:0>](
        <fail_2168@66:0>:bool)
        
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
        <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
        
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
        |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                        <<make_list_1037@8:1>@24:0>:int,
                                                        <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                        <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
        
        P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
        <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
        
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
        
         (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                   <zip_1030@28:2>:int)
        
        P[<make_list_1037@8:0>]((1 + <make_list_1037@11:0>):int), ((1 + <make_list_1037@11:0>) >= 0)
        |- P[<make_list_1037@11:0>](<make_list_1037@11:0>:int)
        
        |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
      lower bounds:
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:2> = <zip_1030@28:0>)
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        P[<make_list_1037@11:0>](<make_list_1037@11:0>:int) = ((1 + <make_list_1037@11:0>) >= 0)
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) &&
          ((<<make_list_1037@8:1>@24:0> >= 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
        P[<<<zip_1030@28:1>@36:1>@59:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && (<zip_1030@28:0> >= 1)))
        P[<fail_2168@66:0>](<fail_2168@66:0>:bool) = false
      upper bounds:
        P[<make_list_1037@11:0>](var54:int) = true
        P[<make_list_1037@8:0>](var53:int) = true
      begin GenHcSolver.classify_pids(43467)[4]
        output:
          [<make_list_1037@8:0>;<make_list_1037@11:0>]
      end GenHcSolver.classify_pids(43467)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(43478)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(43481)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(43481)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(43486)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(43486)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(43489)[5]
          begin InterpProver.interpolate_fresh(43490)[6]
            begin InterpProver.interpolate_log(43491)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(43492)[8]
                begin InterpProver.interpolate_simplify(43493)[9]
                  begin InterpProver.interpolate_quick(43507)[10]
                    
                  end InterpProver.interpolate_quick(43507)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(43493)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(43492)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(43491)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(43490)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(43489)[5] (0.000000 sec.)
        output:
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
          P[<make_list_1037@11:0>](<make_list_1037@8:0>:int) = true
      end ApronInterface.convex_hull_interpolate(43478)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_2168@66:0>](<fail_2168@66:0>:bool)|- bot
        
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int),
        P[<<<zip_1030@28:1>@36:1>@59:0>](<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int),
        ((<f_zip_2148@63:0> >= 1) && <fail_2168@66:0>) |- P[<fail_2168@66:0>](
        <fail_2168@66:0>:bool)
        
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
        <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
        
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
        |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                        <<make_list_1037@8:1>@24:0>:int,
                                                        <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                        <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
        
        P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
        <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
        
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
        
         (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                   <zip_1030@28:2>:int)
      lower bounds:
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:2> = <zip_1030@28:0>)
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) &&
          ((<<make_list_1037@8:1>@24:0> >= 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
        P[<<<zip_1030@28:1>@36:1>@59:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && (<zip_1030@28:0> >= 1)))
        P[<fail_2168@66:0>](<fail_2168@66:0>:bool) = false
      upper bounds:
        P[<fail_2168@66:0>](var56:bool) = true
      begin GenHcSolver.classify_pids(47932)[4]
        output:
          [<fail_2168@66:0>]
      end GenHcSolver.classify_pids(47932)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(47935)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(47938)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(47938)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(47943)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(47943)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(47946)[5]
          begin InterpProver.interpolate_fresh(47947)[6]
            begin InterpProver.interpolate_log(47948)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(47949)[8]
                begin InterpProver.interpolate_simplify(47950)[9]
                  begin InterpProver.interpolate_quick(47965)[10]
                    
                  end InterpProver.interpolate_quick(47965)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(47969)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(47969)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(47950)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(47949)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(47948)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(47947)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(47946)[5] (0.000000 sec.)
        output:
          P[<fail_2168@66:0>](<fail_2168@66:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(47935)[4] (0.000000 sec.)
      Horn clauses:
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int),
        P[<<<zip_1030@28:1>@36:1>@59:0>](<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int), (
        <f_zip_2148@63:0> >= 1) |- bot
        
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
        <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
        
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
        |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                        <<make_list_1037@8:1>@24:0>:int,
                                                        <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                        <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
        
        P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
        <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
        
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
        
         (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                   <zip_1030@28:2>:int)
      lower bounds:
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:2> = <zip_1030@28:0>)
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) &&
          ((<<make_list_1037@8:1>@24:0> >= 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
        P[<<<zip_1030@28:1>@36:1>@59:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && (<zip_1030@28:0> >= 1)))
      upper bounds:
        P[<<<zip_1030@28:1>@36:1>@59:0>](var57:int,var58:int,var59:int) = true
      begin GenHcSolver.classify_pids(50780)[4]
        output:
          [<<<zip_1030@28:1>@36:1>@59:0>]
      end GenHcSolver.classify_pids(50780)[4] (0.000000 sec.)
      lb:((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && (<zip_1030@28:0> >= 1)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(50783)[4]
        lb:((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && (<zip_1030@28:0> >= 1)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(50809)[5]
          ts: ((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && (<zip_1030@28:0> >= 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(50809)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(50818)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(50818)[5] (0.000000 sec.)
        lb':((<<zip_1030@28:1>@36:0> = 0) && ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && ((-1 + <zip_1030@28:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(50821)[5]
          begin InterpProver.interpolate_fresh(50822)[6]
            begin InterpProver.interpolate_log(50823)[7]
              input1: ((<<zip_1030@28:1>@36:0> = 0) &&
                       ((<<<zip_1030@28:1>@36:1>@59:0> >= 0) && ((-1 + <zip_1030@28:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(50824)[8]
                begin InterpProver.interpolate_simplify(50825)[9]
                  begin InterpProver.interpolate_quick(50901)[10]
                    
                  end InterpProver.interpolate_quick(50901)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(50825)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(50824)[8] (0.000999 sec.)
              output: true
            end InterpProver.interpolate_log(50823)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(50822)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(50821)[5] (0.001999 sec.)
        output:
          P[<<<zip_1030@28:1>@36:1>@59:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(50783)[4] (0.001999 sec.)
      Horn clauses:
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int), (<f_zip_2148@63:0> >= 1) |- bot
        
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
        |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                        <<make_list_1037@8:1>@24:0>:int,
                                                        <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                        <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
        
        P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
        <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
        
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
        
         (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                   <zip_1030@28:2>:int)
      lower bounds:
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:2> = <zip_1030@28:0>)
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
         ((<make_list_1037@8:0> >= 0) &&
          ((<<make_list_1037@8:1>@24:0> >= 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
      upper bounds:
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](var60:int,var61:int,var62:int,var63:int) = true
      begin GenHcSolver.classify_pids(53180)[4]
        output:
          [<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>]
      end GenHcSolver.classify_pids(53180)[4] (0.000000 sec.)
      lb:((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
          ((<make_list_1037@8:0> >= 0) &&
           ((<<make_list_1037@8:1>@24:0> >= 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(53183)[4]
        lb:((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
            ((<make_list_1037@8:0> >= 0) &&
             ((<<make_list_1037@8:1>@24:0> >= 1) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(53232)[5]
          ts: ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
               ((<make_list_1037@8:0> >= 0) &&
                ((<<make_list_1037@8:1>@24:0> >= 1) &&
                 (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>))))
          
        end ExtFormula.Formula.case_analysis_boolean(53232)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(53243)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(53243)[5] (0.000000 sec.)
        lb':(((<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> + (-1 * <make_list_1037@8:0>)) = 0) &&
             ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
              (((-1 + <<make_list_1037@8:1>@24:0>) >= 0) && (<make_list_1037@8:0> >= 0))))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(53246)[5]
          begin InterpProver.interpolate_fresh(53247)[6]
            begin InterpProver.interpolate_log(53248)[7]
              input1: (((<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> + (-1 * <make_list_1037@8:0>)) = 0) &&
                       ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
                        (((-1 + <<make_list_1037@8:1>@24:0>) >= 0) && (<make_list_1037@8:0> >= 0))))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(53249)[8]
                begin InterpProver.interpolate_simplify(53250)[9]
                  begin InterpProver.interpolate_quick(53343)[10]
                    
                  end InterpProver.interpolate_quick(53343)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(53250)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(53249)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(53248)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(53247)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(53246)[5] (0.002000 sec.)
        output:
          P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(53183)[4] (0.002000 sec.)
      Horn clauses:
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int), (<f_zip_2148@63:0> >= 1) |- bot
        
        P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
        <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
        
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
        
         (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                   <zip_1030@28:2>:int)
      lower bounds:
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:2> = <zip_1030@28:0>)
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
        ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
      upper bounds:
        P[<<<make_list_1037@8:1>@24:1>@40:0>](var64:int,var65:int,var66:int) = true
      begin GenHcSolver.classify_pids(54586)[4]
        output:
          [<<<make_list_1037@8:1>@24:1>@40:0>]
      end GenHcSolver.classify_pids(54586)[4] (0.000000 sec.)
      lb:((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(54589)[4]
        lb:((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(54602)[5]
          ts: ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && (<<make_list_1037@8:1>@24:0> >= 1))
          
        end ExtFormula.Formula.case_analysis_boolean(54602)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(54610)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(54610)[5] (0.000000 sec.)
        lb':((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && ((-1 + <<make_list_1037@8:1>@24:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(54613)[5]
          begin InterpProver.interpolate_fresh(54614)[6]
            begin InterpProver.interpolate_log(54615)[7]
              input1: ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) && ((-1 + <<make_list_1037@8:1>@24:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(54616)[8]
                begin InterpProver.interpolate_simplify(54617)[9]
                  begin InterpProver.interpolate_quick(54657)[10]
                    
                  end InterpProver.interpolate_quick(54657)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(54617)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(54616)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(54615)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(54614)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(54613)[5] (0.000000 sec.)
        output:
          P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(54589)[4] (0.000000 sec.)
      Horn clauses:
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int), (<f_zip_2148@63:0> >= 1) |- bot
        
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
        
         (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                   <zip_1030@28:2>:int)
      lower bounds:
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:2> = <zip_1030@28:0>)
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) =
        ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
      upper bounds:
        P[<<zip_1030@28:1>@36:0>](var67:int,var68:int) = true
      begin GenHcSolver.classify_pids(55505)[4]
        output:
          [<<zip_1030@28:1>@36:0>]
      end GenHcSolver.classify_pids(55505)[4] (0.000000 sec.)
      lb:((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(55508)[4]
        lb:((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(55521)[5]
          ts: ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
          
        end ExtFormula.Formula.case_analysis_boolean(55521)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(55529)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(55529)[5] (0.000000 sec.)
        lb':((<<zip_1030@28:1>@36:0> = 0) && ((-1 + <zip_1030@28:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(55532)[5]
          begin InterpProver.interpolate_fresh(55533)[6]
            begin InterpProver.interpolate_log(55534)[7]
              input1: ((<<zip_1030@28:1>@36:0> = 0) && ((-1 + <zip_1030@28:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(55535)[8]
                begin InterpProver.interpolate_simplify(55536)[9]
                  begin InterpProver.interpolate_quick(55576)[10]
                    
                  end InterpProver.interpolate_quick(55576)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(55536)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(55535)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(55534)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(55533)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(55532)[5] (0.000000 sec.)
        output:
          P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) = true
      end ApronInterface.convex_hull_interpolate(55508)[4] (0.001000 sec.)
      Horn clauses:
        P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int), (<f_zip_2148@63:0> >= 1) |- bot
        
         (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                   <zip_1030@28:2>:int)
      lower bounds:
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:2> = <zip_1030@28:0>)
      upper bounds:
        P[<zip_1030@28:2>](var69:int,var70:int) = ((var70 <> 0) || (var69 < 1))
      begin GenHcSolver.classify_pids(56172)[4]
        output:
          [<zip_1030@28:2>]
      end GenHcSolver.classify_pids(56172)[4] (0.000000 sec.)
      lb:(<zip_1030@28:2> = <zip_1030@28:0>)
      nub:(not ((<zip_1030@28:2> <> 0) || (<zip_1030@28:0> < 1)))
      begin ApronInterface.convex_hull_interpolate(56175)[4]
        lb:(<zip_1030@28:2> = <zip_1030@28:0>)
        nub:(not ((<zip_1030@28:2> <> 0) || (<zip_1030@28:0> < 1)))
        begin ExtFormula.Formula.case_analysis_boolean(56180)[5]
          ts: (<zip_1030@28:2> = <zip_1030@28:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(56180)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(56197)[5]
          ts: ((<zip_1030@28:2> = 0) && (<zip_1030@28:0> >= 1))
          
        end ExtFormula.Formula.case_analysis_boolean(56197)[5] (0.000000 sec.)
        lb':((<zip_1030@28:2> + (-1 * <zip_1030@28:0>)) = 0)
        nub':((<zip_1030@28:2> = 0) && ((-1 + <zip_1030@28:0>) >= 0))
        begin InterpProver.interpolate(56203)[5]
          begin InterpProver.interpolate_fresh(56204)[6]
            begin InterpProver.interpolate_log(56205)[7]
              input1: ((<zip_1030@28:2> + (-1 * <zip_1030@28:0>)) = 0)
              input2: ((<zip_1030@28:2> = 0) && ((-1 + <zip_1030@28:0>) >= 0))
              begin InterpProver.interpolate_check(56206)[8]
                begin InterpProver.interpolate_simplify(56207)[9]
                  begin InterpProver.interpolate_quick(56244)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(56253)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(56254)[12]
                        begin CsisatInterface.interpolate_csisat_log(56255)[13]
                          input1: v_sep_zip_1030_sep_28_sep_0 = v_sep_zip_1030_sep_28_sep_2
                          input2: (0 = v_sep_zip_1030_sep_28_sep_2 & 1 <= v_sep_zip_1030_sep_28_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(56256)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(56256)[14] (0.000000 sec.)
                          output: (-2*v_sep_zip_1030_sep_28_sep_2 + 2*v_sep_zip_1030_sep_28_sep_0) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(56255)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_zip_1030_sep_28_sep_2 + 2*v_sep_zip_1030_sep_28_sep_0) <= 0
                        after dnf conversion: (((-2*v_sep_zip_1030_sep_28_sep_2 + 2*v_sep_zip_1030_sep_28_sep_0) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(56254)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(56253)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(56244)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(56207)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(56206)[8] (0.002000 sec.)
              output: (<zip_1030@28:0> <= <zip_1030@28:2>)
            end InterpProver.interpolate_log(56205)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(56204)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(56203)[5] (0.002000 sec.)
        output:
          P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:0> <= <zip_1030@28:2>)
      end ApronInterface.convex_hull_interpolate(56175)[4] (0.002000 sec.)
      begin HcSolver.check_validity(56374)[4]
        input:
          P[<fail_2168@66:0>](<fail_2168@66:0>:bool)|- bot
          
          P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int),
          P[<<<zip_1030@28:1>@36:1>@59:0>](<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int),
          ((<f_zip_2148@63:0> >= 1) && <fail_2168@66:0>) |- P[<fail_2168@66:0>](
          <fail_2168@66:0>:bool)
          
          P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int),
          P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
          <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
          
          P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          P[<<make_list_1037@11:1>@14:0>]((-1 + <make_list_1037@8:0>):int,(
                                          -1 + <<make_list_1037@8:1>@24:0>):int),
          P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
          ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
           ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
          |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                          <<make_list_1037@8:1>@24:0>:int,
                                                          <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                          <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
          
          P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
          P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
          <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
          
          P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
          ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
          |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
          
          P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:2>:int),
          (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                    <zip_1030@28:2>:int)
          
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          P[<<make_list_1037@11:1>@14:0>]((-1 + <make_list_1037@8:0>):int,(
                                          -1 + <<make_list_1037@8:1>@24:0>):int), (
          <make_list_1037@8:0> >= 0)
          |- P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,
                                            <<make_list_1037@8:1>@24:0>:int)
          
          P[<make_list_1037@11:0>](<make_list_1037@11:0>:int),
          ((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> < 0))
          |- P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,
                                             <<make_list_1037@11:1>@14:0>:int)
          
          P[<make_list_1037@8:0>]((1 + <make_list_1037@11:0>):int), (
          (1 + <make_list_1037@11:0>) >= 0) |- P[<make_list_1037@11:0>](
          <make_list_1037@11:0>:int)
          
          |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(56374)[4] (0.004000 sec.)
      solution:
        P[<fail_2168@66:0>](<fail_2168@66:0>:bool) = false
        P[<<<zip_1030@28:1>@36:1>@59:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int) =
        true
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int,<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int) =
        true
        P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int) =
        true
        P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int) = true
        P[<zip_1030@28:2>](<zip_1030@28:0>:int,<zip_1030@28:2>:int) = (<zip_1030@28:0> <= <zip_1030@28:2>)
        P[<<make_list_1037@8:1>@24:0>](<make_list_1037@11:0>:int,<<make_list_1037@11:1>@14:0>:int) = true
        P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,<<make_list_1037@11:1>@14:0>:int) = true
        P[<make_list_1037@11:0>](<make_list_1037@8:0>:int) = true
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
    end GenHcSolver.solve(31146)[3] (0.126980 sec.)
    begin YhornInterface.solve(57099)[3]
      begin HcSolver.solve_ub(57100)[4]
        encoded:
          P[<fail_2168@66:0>](<fail_2168@66:0>:int)|- bot
          
          P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int),
          P[<<<zip_1030@28:1>@36:1>@59:0>](<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int),
          ((<f_zip_2148@63:0> >= 1) && (<fail_2168@66:0> = 1)) |- P[<fail_2168@66:0>](
          <fail_2168@66:0>:int)
          
          P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int),
          P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
          <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
          
          P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          P[<<make_list_1037@11:1>@14:0>]((-1 + <make_list_1037@8:0>):int,(
                                          -1 + <<make_list_1037@8:1>@24:0>):int),
          P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
          ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
           ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
          |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                          <<make_list_1037@8:1>@24:0>:int,
                                                          <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                          <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
          
          P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
          P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
          <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
          
          P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
          ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
          |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
          
          P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:2>:int),
          (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                    <zip_1030@28:2>:int)
          
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          P[<<make_list_1037@11:1>@14:0>]((-1 + <make_list_1037@8:0>):int,(
                                          -1 + <<make_list_1037@8:1>@24:0>):int), (
          <make_list_1037@8:0> >= 0)
          |- P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,
                                            <<make_list_1037@8:1>@24:0>:int)
          
          P[<make_list_1037@11:0>](<make_list_1037@11:0>:int),
          ((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> < 0))
          |- P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,
                                             <<make_list_1037@11:1>@14:0>:int)
          
          P[<make_list_1037@8:0>]((1 + <make_list_1037@11:0>):int), (
          (1 + <make_list_1037@11:0>) >= 0) |- P[<make_list_1037@11:0>](
          <make_list_1037@11:0>:int)
          
          |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
        input to Yhorn:
          P[<fail_2168@66:0>](<fail_2168@66:0>:int)|- bot
          
          P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,var71:int),
          P[<<<zip_1030@28:1>@36:1>@59:0>](<f_zip_2148@63:0>:int,var72:int,<f_zip_2148@63:5>:int),
          ((<f_zip_2148@63:0> >= 1) && ((var72 = 0) && ((var71 = 0) && (<fail_2168@66:0> = 1))))
          |- P[<fail_2168@66:0>](<fail_2168@66:0>:int)
          
          P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int),
          P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
          <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
          
          P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          P[<<make_list_1037@11:1>@14:0>](var73:int,var74:int),
          P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
          ((<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>) &&
           (((1 + var74) = <<make_list_1037@8:1>@24:0>) &&
            (((1 + var73) = <make_list_1037@8:0>) &&
             ((<make_list_1037@8:0> >= 0) && (<<<make_list_1037@8:1>@24:1>@40:0> = 0)))))
          |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                          <<make_list_1037@8:1>@24:0>:int,
                                                          <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                          <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
          
          P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
          P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
          <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
          
          P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
          ((<zip_1030@28:0> >= 1) && (<<zip_1030@28:1>@36:0> = 0))
          |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
          
          P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:2>:int),
          (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                    <zip_1030@28:2>:int)
          
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          P[<<make_list_1037@11:1>@14:0>](var75:int,var76:int),
          (((1 + var76) = <<make_list_1037@8:1>@24:0>) &&
           (((1 + var75) = <make_list_1037@8:0>) && (<make_list_1037@8:0> >= 0)))
          |- P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,
                                            <<make_list_1037@8:1>@24:0>:int)
          
          P[<make_list_1037@11:0>](<make_list_1037@11:0>:int),
          ((<make_list_1037@11:0> < 0) && (<<make_list_1037@11:1>@14:0> = 0))
          |- P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,
                                             <<make_list_1037@11:1>@14:0>:int)
          
          P[<make_list_1037@8:0>](var77:int),
          ((var77 = (1 + <make_list_1037@11:0>)) && ((1 + <make_list_1037@11:0>) >= 0))
          |- P[<make_list_1037@11:0>](<make_list_1037@11:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_2168_sep_66_sep_0($23)) -> 1=0.
(($23-1=0) & ($24=0) & ($25=0) & ($26-1>=0)) & (v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0($26,$25,$27)) & (v_sep_zip_1030_sep_28_sep_2($26,$24)) -> v_sep_fail_2168_sep_66_sep_0($23).
(0=0) & (v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0($28,$29)) & (v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0($28,$29,$30,$31)) -> v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0($29,$30,$31).
(($32=0) & ($33>=0) & (-$33+$34+1=0) & ($35-$36+1=0) & (-$33+$37=0)) & (v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0($33,$36)) & (v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0($34,$35)) & (v_sep_make_list_1037_sep_8_sep_0($33)) & (v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0($33,$36,$32)) -> v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0($33,$36,$32,$37).
(0=0) & (v_sep_make_list_1037_sep_8_sep_0($33)) & (v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0($36,$32)) & (v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0($33,$36)) -> v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0($33,$36,$32).
(($30=0) & ($29-1>=0)) & (v_sep_zip_1030_sep_28_sep_2($29,$38)) -> v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0($29,$30).
(-$29+$39=0) & (v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0($28,$39)) -> v_sep_zip_1030_sep_28_sep_2($29,$39).
(($33>=0) & (-$33+$40+1=0) & (-$36+$41+1=0)) & (v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0($40,$41)) & (v_sep_make_list_1037_sep_8_sep_0($33)) -> v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0($33,$36).
(($42=0) & ($43<0)) & (v_sep_make_list_1037_sep_11_sep_0($43)) -> v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0($43,$42).
(($43+1>=0) & (-$43+$44-1=0)) & (v_sep_make_list_1037_sep_8_sep_0($44)) -> v_sep_make_list_1037_sep_11_sep_0($43).
0=0 -> v_sep_make_list_1037_sep_8_sep_0($33).


v_sep_fail_2168_sep_66_sep_0: X
v_sep_make_list_1037_sep_11_sep_0: X
v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0: X
v_sep_zip_1030_sep_28_sep_2: X
...................
v_sep_fail_2168_sep_66_sep_0: X
v_sep_make_list_1037_sep_11_sep_0: X
v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0: X
v_sep_zip_1030_sep_28_sep_2: X
....
v_sep_fail_2168_sep_66_sep_0: X
v_sep_make_list_1037_sep_11_sep_0: X
v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0: X
v_sep_zip_1030_sep_28_sep_2: X
.......
v_sep_fail_2168_sep_66_sep_0: X
v_sep_make_list_1037_sep_11_sep_0: X
v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0: X
v_sep_zip_1030_sep_28_sep_2: X
.............
v_sep_fail_2168_sep_66_sep_0: X
v_sep_make_list_1037_sep_11_sep_0: X
v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0: X
v_sep_zip_1030_sep_28_sep_2: X
.................
v_sep_fail_2168_sep_66_sep_0: X
v_sep_make_list_1037_sep_11_sep_0: X
v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0: X
v_sep_zip_1030_sep_28_sep_2: X
...................Split conj [33] 0.610906
(Reconstrcut: 13 **)
v_sep_fail_2168_sep_66_sep_0: X
v_sep_make_list_1037_sep_11_sep_0: X
v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0: X
v_sep_zip_1030_sep_28_sep_2: (X) & (X)
................
v_sep_fail_2168_sep_66_sep_0: X
v_sep_make_list_1037_sep_11_sep_0: X
v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0: X
v_sep_zip_1030_sep_28_sep_2: (X) & (X)
....
v_sep_fail_2168_sep_66_sep_0: X
v_sep_make_list_1037_sep_11_sep_0: X
v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0: X
v_sep_zip_1030_sep_28_sep_2: (X) & (X)
.......
v_sep_fail_2168_sep_66_sep_0: X
v_sep_make_list_1037_sep_11_sep_0: X
v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0: X
v_sep_zip_1030_sep_28_sep_2: (X) & (X)
.............
v_sep_fail_2168_sep_66_sep_0: X
v_sep_make_list_1037_sep_11_sep_0: X
v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0: X
v_sep_zip_1030_sep_28_sep_2: (X) & (X)
.................
v_sep_fail_2168_sep_66_sep_0: X
v_sep_make_list_1037_sep_11_sep_0: X
v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0: X
v_sep_zip_1030_sep_28_sep_2: (X) & (X)
...................
v_sep_fail_2168_sep_66_sep_0: X
v_sep_make_list_1037_sep_11_sep_0: X
v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0: X
v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0: X
v_sep_zip_1030_sep_28_sep_2: (X) & (X)
....................(0=0) & (v_sep_fail_2168_sep_66_sep_0($23)) -> 1=0.
(($23-1=0) & ($24=0) & ($25=0) & ($26-1>=0)) & (v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0($26,$25,$27)) & (v_sep_zip_1030_sep_28_sep_2($26,$24)) -> v_sep_fail_2168_sep_66_sep_0($23).
(0=0) & (v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0($28,$29)) & (v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0($28,$29,$30,$31)) -> v_sep_zip_1030_sep_28_sep_1_sep_36_sep_1_sep_59_sep_0($29,$30,$31).
(($32=0) & ($33>=0) & (-$33+$34+1=0) & ($35-$36+1=0) & (-$33+$37=0)) & (v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0($33,$36)) & (v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0($34,$35)) & (v_sep_make_list_1037_sep_8_sep_0($33)) & (v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0($33,$36,$32)) -> v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_1_sep_55_sep_0($33,$36,$32,$37).
(0=0) & (v_sep_make_list_1037_sep_8_sep_0($33)) & (v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0($36,$32)) & (v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0($33,$36)) -> v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_1_sep_40_sep_0($33,$36,$32).
(($30=0) & ($29-1>=0)) & (v_sep_zip_1030_sep_28_sep_2($29,$38)) -> v_sep_zip_1030_sep_28_sep_1_sep_36_sep_0($29,$30).
(-$29+$39=0) & (v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0($28,$39)) -> v_sep_zip_1030_sep_28_sep_2($29,$39).
(($33>=0) & (-$33+$40+1=0) & (-$36+$41+1=0)) & (v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0($40,$41)) & (v_sep_make_list_1037_sep_8_sep_0($33)) -> v_sep_make_list_1037_sep_8_sep_1_sep_24_sep_0($33,$36).
(($42=0) & ($43<0)) & (v_sep_make_list_1037_sep_11_sep_0($43)) -> v_sep_make_list_1037_sep_11_sep_1_sep_14_sep_0($43,$42).
(($43+1>=0) & (-$43+$44-1=0)) & (v_sep_make_list_1037_sep_8_sep_0($44)) -> v_sep_make_list_1037_sep_11_sep_0($43).
0=0 -> v_sep_make_list_1037_sep_8_sep_0($33).

          |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
        solution:
          P[<fail_2168@66:0>]($45:bool) = false
          P[<make_list_1037@11:0>]($94:int) = true
          P[<<make_list_1037@11:1>@14:0>]($74:int,$76:int) = true
          P[<make_list_1037@8:0>]($79:int) = true
          P[<<make_list_1037@8:1>@24:0>]($60:int,$62:int) = true
          P[<<<make_list_1037@8:1>@24:1>@40:0>]($82:int,$84:int,$86:int) = true
          P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>]($65:int,$67:int,$69:int,$71:int) = true
          P[<<zip_1030@28:1>@36:0>]($89:int,$91:int) = true
          P[<<<zip_1030@28:1>@36:1>@59:0>]($48:int,$50:int,$52:int) = true
          P[<zip_1030@28:2>]($55:int,$57:int) = ($55 <= $57)
        
      end HcSolver.solve_ub(57100)[4] (0.107984 sec.)
      begin HcSolver.check_validity(57683)[4]
        input:
          P[<fail_2168@66:0>](<fail_2168@66:0>:bool)|- bot
          
          P[<zip_1030@28:2>](<f_zip_2148@63:0>:int,0:int),
          P[<<<zip_1030@28:1>@36:1>@59:0>](<f_zip_2148@63:0>:int,0:int,<f_zip_2148@63:5>:int),
          ((<f_zip_2148@63:0> >= 1) && <fail_2168@66:0>) |- P[<fail_2168@66:0>](
          <fail_2168@66:0>:bool)
          
          P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int),
          P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:0>:int)|- P[<<<zip_1030@28:1>@36:1>@59:0>](
          <zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int,<<<zip_1030@28:1>@36:1>@59:0>:int)
          
          P[<<<make_list_1037@8:1>@24:1>@40:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          P[<<make_list_1037@11:1>@14:0>]((-1 + <make_list_1037@8:0>):int,(
                                          -1 + <<make_list_1037@8:1>@24:0>):int),
          P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
          ((<<<make_list_1037@8:1>@24:1>@40:0> = 0) &&
           ((<make_list_1037@8:0> >= 0) && (<<<<make_list_1037@8:1>@24:1>@40:1>@55:0> = <make_list_1037@8:0>)))
          |- P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>](<make_list_1037@8:0>:int,
                                                          <<make_list_1037@8:1>@24:0>:int,
                                                          <<<make_list_1037@8:1>@24:1>@40:0>:int,
                                                          <<<<make_list_1037@8:1>@24:1>@40:1>@55:0>:int)
          
          P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int),
          P[<<zip_1030@28:1>@36:0>](<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int),
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)|- P[<<<make_list_1037@8:1>@24:1>@40:0>](
          <make_list_1037@8:0>:int,<<make_list_1037@8:1>@24:0>:int,<<<make_list_1037@8:1>@24:1>@40:0>:int)
          
          P[<zip_1030@28:2>](<zip_1030@28:0>:int,<br_zip_2163@31:3>:int),
          ((<<zip_1030@28:1>@36:0> = 0) && (<zip_1030@28:0> >= 1))
          |- P[<<zip_1030@28:1>@36:0>](<zip_1030@28:0>:int,<<zip_1030@28:1>@36:0>:int)
          
          P[<<make_list_1037@8:1>@24:0>](<f_main_2158@26:0>:int,<zip_1030@28:2>:int),
          (<zip_1030@28:2> = <zip_1030@28:0>) |- P[<zip_1030@28:2>](<zip_1030@28:0>:int,
                                                                    <zip_1030@28:2>:int)
          
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          P[<<make_list_1037@11:1>@14:0>]((-1 + <make_list_1037@8:0>):int,(
                                          -1 + <<make_list_1037@8:1>@24:0>):int), (
          <make_list_1037@8:0> >= 0)
          |- P[<<make_list_1037@8:1>@24:0>](<make_list_1037@8:0>:int,
                                            <<make_list_1037@8:1>@24:0>:int)
          
          P[<make_list_1037@11:0>](<make_list_1037@11:0>:int),
          ((<<make_list_1037@11:1>@14:0> = 0) && (<make_list_1037@11:0> < 0))
          |- P[<<make_list_1037@11:1>@14:0>](<make_list_1037@11:0>:int,
                                             <<make_list_1037@11:1>@14:0>:int)
          
          P[<make_list_1037@8:0>]((1 + <make_list_1037@11:0>):int), (
          (1 + <make_list_1037@11:0>) >= 0) |- P[<make_list_1037@11:0>](
          <make_list_1037@11:0>:int)
          
          |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(57683)[4] (0.004999 sec.)
      solution:
        P[<fail_2168@66:0>]($45:bool) = false
        P[<make_list_1037@11:0>]($94:int) = true
        P[<<make_list_1037@11:1>@14:0>]($74:int,$76:int) = true
        P[<make_list_1037@8:0>]($79:int) = true
        P[<<make_list_1037@8:1>@24:0>]($60:int,$62:int) = true
        P[<<<make_list_1037@8:1>@24:1>@40:0>]($82:int,$84:int,$86:int) = true
        P[<<<<make_list_1037@8:1>@24:1>@40:1>@55:0>]($65:int,$67:int,$69:int,$71:int) = true
        P[<<zip_1030@28:1>@36:0>]($89:int,$91:int) = true
        P[<<<zip_1030@28:1>@36:1>@59:0>]($48:int,$50:int,$52:int) = true
        P[<zip_1030@28:2>]($55:int,$57:int) = ($55 <= $57)
    end YhornInterface.solve(57099)[3] (0.112983 sec.)
    
  end RefTypeInfer.infer_etrs(263)[2] (0.423935 sec.)
  refinement types:
    main_2145: X
    f_2159: v1:int -> X
    main_1039: v1:int -> (v2:int -> (v3:int -> (v4:int -> v5:int -> X) -> X) -> X) -> X
    make_list_1037: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    make_list_1037: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_make_list_2157: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1190: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_2158: v1:int ->
                 (v2:int -> (v3:int -> (v4:int -> v5:int -> X) -> X) -> X) ->
                 v9:int -> (v10:int -> (v11:int -> X) -> X) -> X
    zip_1030: v1:int ->
              (v2:int -> (v3:int -> X) -> X) ->
              v6:{v6:int | (v1 <= v6)} ->
              (v7:int -> (v8:int -> X) -> X) -> (v11:int -> (v12:int -> (v13:int -> v14:int -> X) -> X) -> X) -> X
    br_zip_2163: v1:bool ->
                 v2:int ->
                 (v3:int -> (v4:int -> X) -> X) ->
                 v7:int ->
                 (v8:int -> (v9:int -> X) -> X) -> (v12:int -> (v13:int -> (v14:int -> v15:int -> X) -> X) -> X) -> X
    f_cons_make_list_2156: v1:int -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> v8:int -> (v9:int -> X) -> X
    f_zip_2148: v1:int ->
                v2:int ->
                (v3:int -> (v4:int -> (v5:int -> v6:int -> X) -> X) -> X) ->
                (v10:int -> (v11:int -> X) -> X) -> (v14:int -> (v15:int -> X) -> X) -> v18:int -> X
    fail_2168: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_f_zip_2165: var166:bool ->
                   var165:int ->
                   var164:int ->
                   (var163:int -> (var162:int -> (var161:int -> var160:int -> X) -> X) -> X) ->
                   (var156:int -> (var155:int -> X) -> X) -> (var152:int -> (var151:int -> X) -> X) -> var148:int -> X
    br_zip_2161: var185:bool ->
                 var184:int ->
                 (var183:int -> (var182:int -> X) -> X) ->
                 var179:int ->
                 (var178:int -> (var177:int -> X) -> X) ->
                 (var174:int -> (var173:int -> (var172:int -> var171:int -> X) -> X) -> X) -> X
    cons_zip_1134: var205:int ->
                   var204:int ->
                   var203:int ->
                   var202:int ->
                   var201:int ->
                   var200:int ->
                   var199:int ->
                   (var198:int -> (var197:int -> var196:int -> X) -> X) ->
                   (var193:int -> (var192:int -> (var191:int -> var190:int -> X) -> X) -> X) -> X
    f_2160: var213:int -> var212:int -> (var211:int -> (var210:int -> var209:int -> X) -> X) -> X
    f_cons_zip_2151: var230:int ->
                     var229:int ->
                     var228:int ->
                     var227:int ->
                     var226:int ->
                     var225:int ->
                     var224:int ->
                     (var223:int -> (var222:int -> var221:int -> X) -> X) ->
                     var218:int -> (var217:int -> var216:int -> X) -> X
    f_make_list_2155: var235:int -> var234:int -> (var233:int -> X) -> X
    f_zip_2146: var242:int -> var241:int -> var240:int -> (var239:int -> var238:int -> X) -> X
    f_zip_2147: var246:int -> var245:int -> var244:unit -> X
    f_zip_2149: var251:int -> var250:int -> var249:int -> var248:unit -> X
    f_zip_2150: var271:int ->
                var270:int ->
                var269:int ->
                (var268:int -> (var267:int -> (var266:int -> var265:int -> X) -> X) -> X) ->
                (var261:int -> (var260:int -> X) -> X) -> (var257:int -> (var256:int -> X) -> X) -> var253:int -> X
    f_zip_2152: var283:int ->
                var282:int ->
                var281:int ->
                var280:int -> (var279:int -> (var278:int -> X) -> X) -> var275:int -> (var274:int -> X) -> X
    f_zip_2153: var295:int ->
                var294:int ->
                var293:int ->
                var292:int -> (var291:int -> (var290:int -> X) -> X) -> var287:int -> (var286:int -> X) -> X
    f_zip_2154: var313:int ->
                var312:int ->
                var311:int ->
                var310:int ->
                (var309:int -> (var308:int -> (var307:int -> var306:int -> X) -> X) -> X) ->
                var302:int -> (var301:int -> (var300:int -> var299:int -> X) -> X) -> X
    fail_2167: var317:bool -> (var316:unit -> X) -> X
  abstraction types:
    main_2145: X
    f_2159: v1:int -> X
    main_1039: v1:int -> (v2:int -> (v3:int -> (v4:int -> v5:int -> X) -> X) -> X) -> X
    make_list_1037: var318:int -> (var319:int -> (var320:int -> (var321:int -> X) -> X) -> X) -> X
    f_make_list_2157: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1190: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_2158: v1:int ->
                 (v2:int -> (v3:int -> (v4:int -> v5:int -> X) -> X) -> X) ->
                 v9:int -> (v10:int -> (v11:int -> X) -> X) -> X
    zip_1030: v1:int ->
              (v2:int -> (v3:int -> X) -> X) ->
              v6:int[v6 -> (v1 <= v6)] ->
              (v7:int -> (v8:int -> X) -> X) -> (v11:int -> (v12:int -> (v13:int -> v14:int -> X) -> X) -> X) -> X
    br_zip_2163: v1:bool ->
                 v2:int ->
                 (v3:int -> (v4:int -> X) -> X) ->
                 v7:int ->
                 (v8:int -> (v9:int -> X) -> X) -> (v12:int -> (v13:int -> (v14:int -> v15:int -> X) -> X) -> X) -> X
    f_cons_make_list_2156: v1:int -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> v8:int -> (v9:int -> X) -> X
    f_zip_2148: v1:int ->
                v2:int ->
                (v3:int -> (v4:int -> (v5:int -> v6:int -> X) -> X) -> X) ->
                (v10:int -> (v11:int -> X) -> X) -> (v14:int -> (v15:int -> X) -> X) -> v18:int -> X
    fail_2168: v1:bool -> (v2:unit -> X) -> X
    br_f_zip_2165: var166:bool ->
                   var165:int ->
                   var164:int ->
                   (var163:int -> (var162:int -> (var161:int -> var160:int -> X) -> X) -> X) ->
                   (var156:int -> (var155:int -> X) -> X) -> (var152:int -> (var151:int -> X) -> X) -> var148:int -> X
    br_zip_2161: var185:bool ->
                 var184:int ->
                 (var183:int -> (var182:int -> X) -> X) ->
                 var179:int ->
                 (var178:int -> (var177:int -> X) -> X) ->
                 (var174:int -> (var173:int -> (var172:int -> var171:int -> X) -> X) -> X) -> X
    cons_zip_1134: var205:int ->
                   var204:int ->
                   var203:int ->
                   var202:int ->
                   var201:int ->
                   var200:int ->
                   var199:int ->
                   (var198:int -> (var197:int -> var196:int -> X) -> X) ->
                   (var193:int -> (var192:int -> (var191:int -> var190:int -> X) -> X) -> X) -> X
    f_2160: var213:int -> var212:int -> (var211:int -> (var210:int -> var209:int -> X) -> X) -> X
    f_cons_zip_2151: var230:int ->
                     var229:int ->
                     var228:int ->
                     var227:int ->
                     var226:int ->
                     var225:int ->
                     var224:int ->
                     (var223:int -> (var222:int -> var221:int -> X) -> X) ->
                     var218:int -> (var217:int -> var216:int -> X) -> X
    f_make_list_2155: var235:int -> var234:int -> (var233:int -> X) -> X
    f_zip_2146: var242:int -> var241:int -> var240:int -> (var239:int -> var238:int -> X) -> X
    f_zip_2147: var246:int -> var245:int -> var244:unit -> X
    f_zip_2149: var251:int -> var250:int -> var249:int -> var248:unit -> X
    f_zip_2150: var271:int ->
                var270:int ->
                var269:int ->
                (var268:int -> (var267:int -> (var266:int -> var265:int -> X) -> X) -> X) ->
                (var261:int -> (var260:int -> X) -> X) -> (var257:int -> (var256:int -> X) -> X) -> var253:int -> X
    f_zip_2152: var283:int ->
                var282:int ->
                var281:int ->
                var280:int -> (var279:int -> (var278:int -> X) -> X) -> var275:int -> (var274:int -> X) -> X
    f_zip_2153: var295:int ->
                var294:int ->
                var293:int ->
                var292:int -> (var291:int -> (var290:int -> X) -> X) -> var287:int -> (var286:int -> X) -> X
    f_zip_2154: var313:int ->
                var312:int ->
                var311:int ->
                var310:int ->
                (var309:int -> (var308:int -> (var307:int -> var306:int -> X) -> X) -> X) ->
                var302:int -> (var301:int -> (var300:int -> var299:int -> X) -> X) -> X
    fail_2167: var317:bool -> (var316:unit -> X) -> X
  
end AbsTypeInfer.refine(262)[1] (0.435933 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 0; 0; 1; 0; 0; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_2145
  main_2145 -> (rand_int f_2159)
  br_f_zip_2165 b_2166 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when b_2166 ->
      (ys2_1032 0 (f_zip_2150 x_1401 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032))
  br_f_zip_2165 b_2166 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when (not b_2166) -> _|_
  br_zip_2161 b_2162 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when b_2162 ->
      (k_zip_1305 0 (f_zip_2146 xs1_1031 ys1_1032))
  br_zip_2161 b_2162 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (
      not b_2162) -> (fail_2167 true (f_zip_2147 xs1_1031 ys1_1032))
  br_zip_2163 b_2164 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when b_2164 ->
      (xs2_1031 0 (f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032))
  br_zip_2163 b_2164 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (not b_2164) -> _|_
  cons_make_list_1190 n_1038 x_1188 xs1_1189 xs2_1189 k_make_list_cons_make_list_1784 ->
      (k_make_list_cons_make_list_1784 (xs1_1189 + 1) (f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189))
  cons_zip_1134 x_1401 x_1482 xs1_1031 ys1_1032 x1_1131 x2_1131 xs1_1132 xs2_1132 k_zip_cons_zip_1536 ->
      (k_zip_cons_zip_1536 (xs1_1132 + 1)
        (f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132))
  f_2159 x_1985 -> (main_1039 x_1985 (f_2160 x_1985))
  f_2160 x_1985 x1_1973 x2_1973 -> end
  f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189 i_1187 k_make_list_cons_make_list_1799 when (
      i_1187 = 0) -> (k_make_list_cons_make_list_1799 x_1188)
  f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189 i_1187 k_make_list_cons_make_list_1799 when (
      not (i_1187 = 0)) -> (xs2_1189 (i_1187 - 1) k_make_list_cons_make_list_1799)
  f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132 i_1130 k_zip_cons_zip_1551 when (
      i_1130 = 0) -> (k_zip_cons_zip_1551 x1_1131 x2_1131)
  f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132 i_1130 k_zip_cons_zip_1551 when (
      not (i_1130 = 0)) -> (xs2_1132 (i_1130 - 1) k_zip_cons_zip_1551)
  f_main_2158 n_1040 k_main_1895 x1_1904 x2_1904 -> (zip_1030 x1_1904 x2_1904 x1_1904 x2_1904 k_main_1895)
  f_make_list_2155 n_1038 x_1194 k_make_list_1737 -> _|_
  f_make_list_2157 n_1038 k_make_list_1725 x1_1862 x2_1862 ->
      (cons_make_list_1190 n_1038 n_1038 x1_1862 x2_1862 k_make_list_1725)
  f_zip_2146 xs1_1031 ys1_1032 x_1159 k_zip_1323 -> _|_
  f_zip_2147 xs1_1031 ys1_1032 x_1332 -> _|_
  f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when (
      ys1_1032 = 0) -> (fail_2168 true (f_zip_2149 x_1401 xs1_1031 ys1_1032))
  f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when (
      not (ys1_1032 = 0)) -> (br_f_zip_2165 (1 <= ys1_1032) xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401)
  f_zip_2149 x_1401 xs1_1031 ys1_1032 x_1420 -> _|_
  f_zip_2150 x_1401 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1482 ->
      (zip_1030 (xs1_1031 - 1) (f_zip_2152 x_1401 x_1482 xs1_1031 ys1_1032 xs2_1031) (
        ys1_1032 - 1) (f_zip_2153 x_1401 x_1482 xs1_1031 ys1_1032 ys2_1032)
        (f_zip_2154 x_1401 x_1482 xs1_1031 ys1_1032 k_zip_1305))
  f_zip_2152 x_1401 x_1482 xs1_1031 ys1_1032 xs2_1031 x_1093 k_zip_xs'_1384 -> (xs2_1031 (x_1093 + 1) k_zip_xs'_1384)
  f_zip_2153 x_1401 x_1482 xs1_1031 ys1_1032 ys2_1032 x_1101 k_zip_ys'_1465 -> (ys2_1032 (x_1101 + 1) k_zip_ys'_1465)
  f_zip_2154 x_1401 x_1482 xs1_1031 ys1_1032 k_zip_1305 x1_1661 x2_1661 ->
      (cons_zip_1134 x_1401 x_1482 xs1_1031 ys1_1032 x_1401 x_1482 x1_1661 x2_1661 k_zip_1305)
  fail_2167 b k -> {fail} => (k ())
  fail_2168 b k -> {fail} => (k ())
  main_1039 n_1040 k_main_1895 -> (make_list_1037 n_1040 (f_main_2158 n_1040 k_main_1895))
  make_list_1037 n_1038 k_make_list_1725 when (n_1038 < 0) -> (k_make_list_1725 0 (f_make_list_2155 n_1038))
  make_list_1037 n_1038 k_make_list_1725 when (not (n_1038 < 0)) ->
      (make_list_1037 (n_1038 - 1) (f_make_list_2157 n_1038 k_make_list_1725))
  zip_1030 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (xs1_1031 = 0) ->
      (br_zip_2161 (ys1_1032 = 0) xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305)
  zip_1030 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (not (xs1_1031 = 0)) ->
      (br_zip_2163 (1 <= xs1_1031) xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305)
Types:
  main_2145 : X
  fail_2167 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_2168 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1037 : (int -> (int -> (int -> (int -> X) -> X) -> X) -> X)
  zip_1030 : (x_1:int ->
              (int -> (int -> X) -> X) ->
              x_8:int[x_1 <= x_8] -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_2145 ... --> 
  f_2159 ... --> 
  main_1039 ... --> 
  make_list_1037 [1/2] ... --> 
  f_main_2158 ... --> 
  zip_1030 [1/2] ... --> 
  br_zip_2161 [2/2] ... --> 
  fail_2167 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(58795)[1]
  program:
    main_2145  | true = ((Random.int 0) f_2159)
    br_f_zip_2165 b_2166 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 | b_2166 = (
    ys2_1032 0
             (f_zip_2150 x_1401
                         xs1_1031
                         ys1_1032
                         k_zip_1305
                         xs2_1031
                         ys2_1032))
    br_f_zip_2165 b_2166 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 | (
    not b_2166) = bot
    br_zip_2161 b_2162 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | b_2162 = (
    k_zip_1305 0
               (f_zip_2146 xs1_1031
                           ys1_1032))
    br_zip_2161 b_2162 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | (
    not b_2162) = (fail_2167 true
                             (f_zip_2147 xs1_1031
                                         ys1_1032))
    br_zip_2163 b_2164 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | b_2164 = (
    xs2_1031 0
             (f_zip_2148 xs1_1031
                         ys1_1032
                         k_zip_1305
                         xs2_1031
                         ys2_1032))
    br_zip_2163 b_2164 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | (
    not b_2164) = bot
    cons_make_list_1190 n_1038 x_1188 xs1_1189 xs2_1189 k_make_list_cons_make_list_1784 | true = (
    k_make_list_cons_make_list_1784 (xs1_1189 + 1)
                                    (f_cons_make_list_2156 n_1038
                                                           x_1188
                                                           xs1_1189
                                                           xs2_1189))
    cons_zip_1134 x_1401 x_1482 xs1_1031 ys1_1032 x1_1131 x2_1131 xs1_1132 xs2_1132 k_zip_cons_zip_1536 | true = (
    k_zip_cons_zip_1536
      (xs1_1132 + 1)
      (f_cons_zip_2151 x1_1131
                       x2_1131
                       x_1401
                       x_1482
                       xs1_1031
                       xs1_1132
                       ys1_1032
                       xs2_1132))
    f_2159 x_1985 | true = (main_1039 x_1985
                                      (f_2160 x_1985))
    f_2160 x_1985 x1_1973 x2_1973 | true = end
    f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189 i_1187 k_make_list_cons_make_list_1799 | (
    i_1187 = 0) = (k_make_list_cons_make_list_1799 x_1188)
    f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189 i_1187 k_make_list_cons_make_list_1799 | (
    not (i_1187 = 0)) = (xs2_1189 (i_1187 - 1)
                                  k_make_list_cons_make_list_1799)
    f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132 i_1130 k_zip_cons_zip_1551 | (
    i_1130 = 0) = (k_zip_cons_zip_1551 x1_1131
                                       x2_1131)
    f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132 i_1130 k_zip_cons_zip_1551 | (
    not (i_1130 = 0)) = (xs2_1132 (i_1130 - 1)
                                  k_zip_cons_zip_1551)
    f_main_2158 n_1040 k_main_1895 x1_1904 x2_1904 | true = (zip_1030 x1_1904
                                                                    x2_1904
                                                                    x1_1904
                                                                    x2_1904
                                                                    k_main_1895)
    f_make_list_2155 n_1038 x_1194 k_make_list_1737 | true = bot
    f_make_list_2157 n_1038 k_make_list_1725 x1_1862 x2_1862 | true = (
    cons_make_list_1190 n_1038
                        n_1038
                        x1_1862
                        x2_1862
                        k_make_list_1725)
    f_zip_2146 xs1_1031 ys1_1032 x_1159 k_zip_1323 | true = bot
    f_zip_2147 xs1_1031 ys1_1032 x_1332 | true = bot
    f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 | (
    ys1_1032 = 0) = (fail_2168 true
                               (f_zip_2149 x_1401
                                           xs1_1031
                                           ys1_1032))
    f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 | (
    not (ys1_1032 = 0)) = (br_f_zip_2165 (1 <= ys1_1032)
                                         xs1_1031
                                         ys1_1032
                                         k_zip_1305
                                         xs2_1031
                                         ys2_1032
                                         x_1401)
    f_zip_2149 x_1401 xs1_1031 ys1_1032 x_1420 | true = bot
    f_zip_2150 x_1401 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1482 | true = (
    zip_1030
      (xs1_1031 - 1)
      (f_zip_2152 x_1401
                  x_1482
                  xs1_1031
                  ys1_1032
                  xs2_1031)
      (ys1_1032 - 1)
      (f_zip_2153 x_1401
                  x_1482
                  xs1_1031
                  ys1_1032
                  ys2_1032)
      (f_zip_2154 x_1401
                  x_1482
                  xs1_1031
                  ys1_1032
                  k_zip_1305))
    f_zip_2152 x_1401 x_1482 xs1_1031 ys1_1032 xs2_1031 x_1093 k_zip_xs'_1384 | true = (
    xs2_1031 (x_1093 + 1)
             k_zip_xs'_1384)
    f_zip_2153 x_1401 x_1482 xs1_1031 ys1_1032 ys2_1032 x_1101 k_zip_ys'_1465 | true = (
    ys2_1032 (x_1101 + 1)
             k_zip_ys'_1465)
    f_zip_2154 x_1401 x_1482 xs1_1031 ys1_1032 k_zip_1305 x1_1661 x2_1661 | true = (
    cons_zip_1134 x_1401
                  x_1482
                  xs1_1031
                  ys1_1032
                  x_1401
                  x_1482
                  x1_1661
                  x2_1661
                  k_zip_1305)
    fail_2167 b k | true = (fail ())
    fail_2168 b k | true = (fail ())
    main_1039 n_1040 k_main_1895 | true = (make_list_1037 n_1040
                                                          (f_main_2158 n_1040
                                                                    k_main_1895))
    make_list_1037 n_1038 k_make_list_1725 | (n_1038 < 0) = (k_make_list_1725 0
                                                                    (f_make_list_2155 n_1038))
    make_list_1037 n_1038 k_make_list_1725 | (not (n_1038 < 0)) = (make_list_1037
                                                                    (
                                                                    n_1038 - 1)
                                                                    (
                                                                    f_make_list_2157 n_1038
                                                                    k_make_list_1725))
    zip_1030 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | (xs1_1031 = 0) = (
    br_zip_2161 (ys1_1032 = 0)
                xs1_1031
                xs2_1031
                ys1_1032
                ys2_1032
                k_zip_1305)
    zip_1030 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | (not (xs1_1031 = 0)) = (
    br_zip_2163 (1 <= xs1_1031)
                xs1_1031
                xs2_1031
                ys1_1032
                ys2_1032
                k_zip_1305)
    main_2145:X
    br_f_zip_2165:bool ->
                  int ->
                  int ->
                  (int -> (int -> (int -> int -> X) -> X) -> X) ->
                  (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    br_zip_2161:bool ->
                int ->
                (int -> (int -> X) -> X) ->
                int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
    br_zip_2163:bool ->
                int ->
                (int -> (int -> X) -> X) ->
                int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
    cons_make_list_1190:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    cons_zip_1134:int ->
                  int ->
                  int ->
                  int ->
                  int ->
                  int -> int -> (int -> (int -> int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
    f_2159:int -> X
    f_2160:int -> int -> (int -> (int -> int -> X) -> X) -> X
    f_cons_make_list_2156:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_cons_zip_2151:int ->
                    int ->
                    int -> int -> int -> int -> int -> (int -> (int -> int -> X) -> X) -> int -> (int -> int -> X) -> X
    f_main_2158:int -> (int -> (int -> (int -> int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_make_list_2155:int -> int -> (int -> X) -> X
    f_make_list_2157:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_zip_2146:int -> int -> int -> (int -> int -> X) -> X
    f_zip_2147:int -> int -> unit -> X
    f_zip_2148:int ->
               int ->
               (int -> (int -> (int -> int -> X) -> X) -> X) ->
               (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_zip_2149:int -> int -> int -> unit -> X
    f_zip_2150:int ->
               int ->
               int ->
               (int -> (int -> (int -> int -> X) -> X) -> X) ->
               (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_zip_2152:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_zip_2153:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_zip_2154:int ->
               int ->
               int ->
               int -> (int -> (int -> (int -> int -> X) -> X) -> X) -> int -> (int -> (int -> int -> X) -> X) -> X
    fail_2167:bool -> (unit -> X) -> X
    fail_2168:bool -> (unit -> X) -> X
    main_1039:int -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
    make_list_1037:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
    zip_1030:int ->
             (int -> (int -> X) -> X) ->
             int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
  inlined functions: br_f_zip_2165,br_zip_2161,br_zip_2163,cons_make_list_1190,cons_zip_1134,f_2159,f_2160,f_cons_make_list_2156,f_cons_zip_2151,f_main_2158,f_make_list_2155,f_make_list_2157,f_zip_2146,f_zip_2147,f_zip_2148,f_zip_2149,f_zip_2150,f_zip_2152,f_zip_2153,f_zip_2154,main_1039
  counterexample: 0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_2159@72:0> = var326)
     [true.(<main_1039@74:0> = <f_2159@72:0>)
      [true.(<make_list_1037@76:0> = <main_1039@74:0>)
       [(<make_list_1037@76:0> < 0).(<<make_list_1037@76:1>@79:0> = 0)
        [true.((<f_main_2158@81:0> = <main_1039@74:0>) && (<f_main_2158@81:2> = <<make_list_1037@76:1>@79:0>))
         [true.((<zip_1030@83:0> = <f_main_2158@81:2>) && (<zip_1030@83:2> = <f_main_2158@81:2>))
          [(<zip_1030@83:0> = 0).
           ((<br_zip_2161@86:0> = (<zip_1030@83:2> = 0)) &&
            ((<br_zip_2161@86:1> = <zip_1030@83:0>) && (<br_zip_2161@86:3> = <zip_1030@83:2>)))
           [(not <br_zip_2161@86:0>).(<fail_2167@89:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(58796)[2]
    horn clauses:
      P[<fail_2167@89:0>](<fail_2167@89:0>:bool)|- bot
      
      P[<br_zip_2161@86:3>](false:bool,<br_zip_2161@86:1>:int,<br_zip_2161@86:3>:int), <fail_2167@89:0>
      |- P[<fail_2167@89:0>](<fail_2167@89:0>:bool)
      
      P[<zip_1030@83:2>](<br_zip_2161@86:1>:int,<br_zip_2161@86:3>:int),
      ((<br_zip_2161@86:1> = 0) && (<br_zip_2161@86:0> = (<br_zip_2161@86:3> = 0)))
      |- P[<br_zip_2161@86:3>](<br_zip_2161@86:0>:bool,<br_zip_2161@86:1>:int,
                               <br_zip_2161@86:3>:int)
      
      P[<f_main_2158@81:2>](<f_main_2158@81:0>:int,<zip_1030@83:2>:int), (
      <zip_1030@83:2> = <zip_1030@83:0>) |- P[<zip_1030@83:2>](<zip_1030@83:0>:int,
                                                               <zip_1030@83:2>:int)
      
      P[<main_1039@74:0>](<f_main_2158@81:0>:int),
      P[<<make_list_1037@76:1>@79:0>](<f_main_2158@81:0>:int,<f_main_2158@81:2>:int)|- P[<f_main_2158@81:2>](
      <f_main_2158@81:0>:int,<f_main_2158@81:2>:int)
      
      P[<make_list_1037@76:0>](<make_list_1037@76:0>:int),
      ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
      |- P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,<<make_list_1037@76:1>@79:0>:int)
      
      P[<main_1039@74:0>](<make_list_1037@76:0>:int)|- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
      
      P[<f_2159@72:0>](<main_1039@74:0>:int)|- P[<main_1039@74:0>](<main_1039@74:0>:int)
      
      |- P[<f_2159@72:0>](<f_2159@72:0>:int)
    call trees:
      <main_2145@69>
        <f_2159@72>
          <main_1039@74>
            <make_list_1037@76>
            </<make_list_1037@76:1>@79>
            <f_main_2158@81>
              <zip_1030@83>
                <br_zip_2161@86>
                  <fail_2167@89>
    inlined horn clauses:
      P[<fail_2167@89:0>](<fail_2167@89:0>:bool)|- bot
      
      P[<zip_1030@83:2>](0:int,<br_zip_2161@86:3>:int), ((<br_zip_2161@86:3> <> 0) && <fail_2167@89:0>)
      |- P[<fail_2167@89:0>](<fail_2167@89:0>:bool)
      
      P[<<make_list_1037@76:1>@79:0>](<f_main_2158@81:0>:int,<zip_1030@83:2>:int), (
      <zip_1030@83:2> = <zip_1030@83:0>) |- P[<zip_1030@83:2>](<zip_1030@83:0>:int,
                                                               <zip_1030@83:2>:int)
      
      P[<make_list_1037@76:0>](<make_list_1037@76:0>:int),
      ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
      |- P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,<<make_list_1037@76:1>@79:0>:int)
      
      |- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
    begin ParamSubstInfer.infer(59853)[3]
      
    end ParamSubstInfer.infer(59853)[3] (0.049993 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(59855)[3]
      
    end RefTypeInfer.elim_coeffs(59855)[3] (0.000000 sec.)
    begin GenHcSolver.solve(60025)[3]
      Horn clauses:
        P[<fail_2167@89:0>](<fail_2167@89:0>:bool)|- bot
        
        P[<zip_1030@83:2>](0:int,<br_zip_2161@86:3>:int), ((<br_zip_2161@86:3> <> 0) && <fail_2167@89:0>)
        |- P[<fail_2167@89:0>](<fail_2167@89:0>:bool)
        
        P[<<make_list_1037@76:1>@79:0>](<f_main_2158@81:0>:int,<zip_1030@83:2>:int),
        (<zip_1030@83:2> = <zip_1030@83:0>) |- P[<zip_1030@83:2>](<zip_1030@83:0>:int,
                                                                  <zip_1030@83:2>:int)
        
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int),
        ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
        |- P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,
                                           <<make_list_1037@76:1>@79:0>:int)
        
        |- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
      lower bounds:
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int) = true
        P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,<<make_list_1037@76:1>@79:0>:int) =
        ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
        P[<zip_1030@83:2>](<zip_1030@83:0>:int,<zip_1030@83:2>:int) =
        ((<zip_1030@83:2> = 0) && (<zip_1030@83:2> = <zip_1030@83:0>))
        P[<fail_2167@89:0>](<fail_2167@89:0>:bool) = false
      upper bounds:
        P[<fail_2167@89:0>](var328:bool) = true
      begin GenHcSolver.classify_pids(61092)[4]
        output:
          [<fail_2167@89:0>]
      end GenHcSolver.classify_pids(61092)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(61095)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(61096)[5]
          begin InterpProver.interpolate_fresh(61097)[6]
            begin InterpProver.interpolate_log(61098)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(61099)[8]
                begin InterpProver.interpolate_simplify(61100)[9]
                  begin InterpProver.interpolate_quick(61113)[10]
                    
                  end InterpProver.interpolate_quick(61113)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(61117)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(61117)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(61100)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(61099)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(61098)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(61097)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(61096)[5] (0.001000 sec.)
        output:
          P[<fail_2167@89:0>](<fail_2167@89:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(61095)[4] (0.001000 sec.)
      Horn clauses:
        P[<zip_1030@83:2>](0:int,<br_zip_2161@86:3>:int), (<br_zip_2161@86:3> <> 0) |- bot
        
        P[<<make_list_1037@76:1>@79:0>](<f_main_2158@81:0>:int,<zip_1030@83:2>:int),
        (<zip_1030@83:2> = <zip_1030@83:0>) |- P[<zip_1030@83:2>](<zip_1030@83:0>:int,
                                                                  <zip_1030@83:2>:int)
        
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int),
        ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
        |- P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,
                                           <<make_list_1037@76:1>@79:0>:int)
        
        |- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
      lower bounds:
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int) = true
        P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,<<make_list_1037@76:1>@79:0>:int) =
        ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
        P[<zip_1030@83:2>](<zip_1030@83:0>:int,<zip_1030@83:2>:int) =
        ((<zip_1030@83:2> = 0) && (<zip_1030@83:2> = <zip_1030@83:0>))
      upper bounds:
        P[<zip_1030@83:2>](var329:int,var330:int) = ((var329 <> 0) || (var330 = 0))
      begin GenHcSolver.classify_pids(62405)[4]
        output:
          [<zip_1030@83:2>]
      end GenHcSolver.classify_pids(62405)[4] (0.000000 sec.)
      lb:((<zip_1030@83:2> = 0) && (<zip_1030@83:2> = <zip_1030@83:0>))
      nub:(not ((<zip_1030@83:0> <> 0) || (<zip_1030@83:2> = 0)))
      begin ApronInterface.convex_hull_interpolate(62408)[4]
        lb:((<zip_1030@83:2> = 0) && (<zip_1030@83:2> = <zip_1030@83:0>))
        nub:(not ((<zip_1030@83:0> <> 0) || (<zip_1030@83:2> = 0)))
        lb':((<zip_1030@83:2> = 0) && (<zip_1030@83:2> = <zip_1030@83:0>))
        nub':(not ((<zip_1030@83:0> <> 0) || (<zip_1030@83:2> = 0)))
        begin InterpProver.interpolate(62409)[5]
          begin InterpProver.interpolate_fresh(62410)[6]
            begin InterpProver.interpolate_log(62411)[7]
              input1: ((<zip_1030@83:2> = 0) && (<zip_1030@83:2> = <zip_1030@83:0>))
              input2: (not ((<zip_1030@83:0> <> 0) || (<zip_1030@83:2> = 0)))
              begin InterpProver.interpolate_check(62412)[8]
                begin InterpProver.interpolate_simplify(62413)[9]
                  begin InterpProver.interpolate_quick(62458)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(62467)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(62468)[12]
                        begin CsisatInterface.interpolate_csisat_log(62469)[13]
                          input1: (0 = v_sep_zip_1030_sep_83_sep_2 & v_sep_zip_1030_sep_83_sep_0 = v_sep_zip_1030_sep_83_sep_2)
                          input2: (not 0 = v_sep_zip_1030_sep_83_sep_2 & 0 = v_sep_zip_1030_sep_83_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(62470)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(62470)[14] (0.000000 sec.)
                          output: 0 = v_sep_zip_1030_sep_83_sep_2
                          
                        end CsisatInterface.interpolate_csisat_log(62469)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_zip_1030_sep_83_sep_2
                        after dnf conversion: ((0 = v_sep_zip_1030_sep_83_sep_2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(62468)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(62467)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(62458)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(62413)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(62412)[8] (0.001000 sec.)
              output: (0 = <zip_1030@83:2>)
            end InterpProver.interpolate_log(62411)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(62410)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(62409)[5] (0.001000 sec.)
        output:
          P[<zip_1030@83:2>](<zip_1030@83:0>:int,<zip_1030@83:2>:int) = (0 = <zip_1030@83:2>)
      end ApronInterface.convex_hull_interpolate(62408)[4] (0.001000 sec.)
      Horn clauses:
        P[<<make_list_1037@76:1>@79:0>](<f_main_2158@81:0>:int,<zip_1030@83:2>:int), (0 <> <zip_1030@83:2>) |- bot
        
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int),
        ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
        |- P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,
                                           <<make_list_1037@76:1>@79:0>:int)
        
        |- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
      lower bounds:
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int) = true
        P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,<<make_list_1037@76:1>@79:0>:int) =
        ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
      upper bounds:
        P[<<make_list_1037@76:1>@79:0>](var331:int,var332:int) = (0 = var332)
      begin GenHcSolver.classify_pids(63262)[4]
        output:
          [<<make_list_1037@76:1>@79:0>]
      end GenHcSolver.classify_pids(63262)[4] (0.000000 sec.)
      lb:((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
      nub:(not (0 = <<make_list_1037@76:1>@79:0>))
      begin ApronInterface.convex_hull_interpolate(63265)[4]
        lb:((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
        nub:(not (0 = <<make_list_1037@76:1>@79:0>))
        lb':((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
        nub':(not (0 = <<make_list_1037@76:1>@79:0>))
        begin InterpProver.interpolate(63266)[5]
          begin InterpProver.interpolate_fresh(63267)[6]
            begin InterpProver.interpolate_log(63268)[7]
              input1: ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
              input2: (not (0 = <<make_list_1037@76:1>@79:0>))
              begin InterpProver.interpolate_check(63269)[8]
                begin InterpProver.interpolate_simplify(63270)[9]
                  begin InterpProver.interpolate_quick(63299)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(63308)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(63309)[12]
                        begin CsisatInterface.interpolate_csisat_log(63310)[13]
                          input1: (0 = v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0 & (1 + v_sep_make_list_1037_sep_76_sep_0) <= 0)
                          input2: not 0 = v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(63311)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(63311)[14] (0.000000 sec.)
                          output: 0 = v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(63310)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0
                        after dnf conversion: ((0 = v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(63309)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(63308)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(63299)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(63270)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(63269)[8] (0.001000 sec.)
              output: (0 = <<make_list_1037@76:1>@79:0>)
            end InterpProver.interpolate_log(63268)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(63267)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(63266)[5] (0.001000 sec.)
        output:
          P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,<<make_list_1037@76:1>@79:0>:int) =
          (0 = <<make_list_1037@76:1>@79:0>)
      end ApronInterface.convex_hull_interpolate(63265)[4] (0.001000 sec.)
      Horn clauses:
        |- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
      lower bounds:
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int) = true
      upper bounds:
        P[<make_list_1037@76:0>](var333:int) = true
      begin GenHcSolver.classify_pids(63601)[4]
        output:
          [<make_list_1037@76:0>]
      end GenHcSolver.classify_pids(63601)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(63604)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(63605)[5]
          begin InterpProver.interpolate_fresh(63606)[6]
            begin InterpProver.interpolate_log(63607)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(63608)[8]
                begin InterpProver.interpolate_simplify(63609)[9]
                  begin InterpProver.interpolate_quick(63622)[10]
                    
                  end InterpProver.interpolate_quick(63622)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(63609)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(63608)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(63607)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(63606)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(63605)[5] (0.001000 sec.)
        output:
          P[<make_list_1037@76:0>](<make_list_1037@76:0>:int) = true
      end ApronInterface.convex_hull_interpolate(63604)[4] (0.001000 sec.)
      begin HcSolver.check_validity(63677)[4]
        input:
          P[<fail_2167@89:0>](<fail_2167@89:0>:bool)|- bot
          
          P[<zip_1030@83:2>](0:int,<br_zip_2161@86:3>:int), ((<br_zip_2161@86:3> <> 0) && <fail_2167@89:0>)
          |- P[<fail_2167@89:0>](<fail_2167@89:0>:bool)
          
          P[<<make_list_1037@76:1>@79:0>](<f_main_2158@81:0>:int,<zip_1030@83:2>:int),
          (<zip_1030@83:2> = <zip_1030@83:0>) |- P[<zip_1030@83:2>](<zip_1030@83:0>:int,
                                                                    <zip_1030@83:2>:int)
          
          P[<make_list_1037@76:0>](<make_list_1037@76:0>:int),
          ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
          |- P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,
                                             <<make_list_1037@76:1>@79:0>:int)
          
          |- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(63677)[4] (0.002000 sec.)
      solution:
        P[<fail_2167@89:0>](<fail_2167@89:0>:bool) = false
        P[<zip_1030@83:2>](<zip_1030@83:0>:int,<zip_1030@83:2>:int) = (0 = <zip_1030@83:2>)
        P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,<<make_list_1037@76:1>@79:0>:int) =
        (0 = <<make_list_1037@76:1>@79:0>)
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int) = true
    end GenHcSolver.solve(60025)[3] (0.022997 sec.)
    begin GenHcSolver.solve(63968)[3]
      Horn clauses:
        P[<fail_2167@89:0>](<fail_2167@89:0>:bool)|- bot
        
        P[<zip_1030@83:2>](0:int,<br_zip_2161@86:3>:int), ((<br_zip_2161@86:3> <> 0) && <fail_2167@89:0>)
        |- P[<fail_2167@89:0>](<fail_2167@89:0>:bool)
        
        P[<<make_list_1037@76:1>@79:0>](<f_main_2158@81:0>:int,<zip_1030@83:2>:int),
        (<zip_1030@83:2> = <zip_1030@83:0>) |- P[<zip_1030@83:2>](<zip_1030@83:0>:int,
                                                                  <zip_1030@83:2>:int)
        
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int),
        ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
        |- P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,
                                           <<make_list_1037@76:1>@79:0>:int)
        
        |- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
      lower bounds:
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int) = true
        P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,<<make_list_1037@76:1>@79:0>:int) =
        ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
        P[<zip_1030@83:2>](<zip_1030@83:0>:int,<zip_1030@83:2>:int) =
        ((<zip_1030@83:2> = 0) && (<zip_1030@83:2> = <zip_1030@83:0>))
        P[<fail_2167@89:0>](<fail_2167@89:0>:bool) = false
      upper bounds:
        P[<fail_2167@89:0>](var335:bool) = true
      begin GenHcSolver.classify_pids(65035)[4]
        output:
          [<fail_2167@89:0>]
      end GenHcSolver.classify_pids(65035)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(65038)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(65041)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(65041)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(65046)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(65046)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(65049)[5]
          begin InterpProver.interpolate_fresh(65050)[6]
            begin InterpProver.interpolate_log(65051)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(65052)[8]
                begin InterpProver.interpolate_simplify(65053)[9]
                  begin InterpProver.interpolate_quick(65068)[10]
                    
                  end InterpProver.interpolate_quick(65068)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(65072)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(65072)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(65053)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(65052)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(65051)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(65050)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(65049)[5] (0.000000 sec.)
        output:
          P[<fail_2167@89:0>](<fail_2167@89:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(65038)[4] (0.000000 sec.)
      Horn clauses:
        P[<zip_1030@83:2>](0:int,<br_zip_2161@86:3>:int), (<br_zip_2161@86:3> <> 0) |- bot
        
        P[<<make_list_1037@76:1>@79:0>](<f_main_2158@81:0>:int,<zip_1030@83:2>:int),
        (<zip_1030@83:2> = <zip_1030@83:0>) |- P[<zip_1030@83:2>](<zip_1030@83:0>:int,
                                                                  <zip_1030@83:2>:int)
        
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int),
        ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
        |- P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,
                                           <<make_list_1037@76:1>@79:0>:int)
        
        |- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
      lower bounds:
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int) = true
        P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,<<make_list_1037@76:1>@79:0>:int) =
        ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
        P[<zip_1030@83:2>](<zip_1030@83:0>:int,<zip_1030@83:2>:int) =
        ((<zip_1030@83:2> = 0) && (<zip_1030@83:2> = <zip_1030@83:0>))
      upper bounds:
        P[<zip_1030@83:2>](var336:int,var337:int) = ((var336 <> 0) || (var337 = 0))
      begin GenHcSolver.classify_pids(66367)[4]
        output:
          [<zip_1030@83:2>]
      end GenHcSolver.classify_pids(66367)[4] (0.000000 sec.)
      lb:((<zip_1030@83:2> = 0) && (<zip_1030@83:2> = <zip_1030@83:0>))
      nub:(not ((<zip_1030@83:0> <> 0) || (<zip_1030@83:2> = 0)))
      begin ApronInterface.convex_hull_interpolate(66370)[4]
        lb:((<zip_1030@83:2> = 0) && (<zip_1030@83:2> = <zip_1030@83:0>))
        nub:(not ((<zip_1030@83:0> <> 0) || (<zip_1030@83:2> = 0)))
        begin ExtFormula.Formula.case_analysis_boolean(66382)[5]
          ts: ((<zip_1030@83:2> = 0) && (<zip_1030@83:2> = <zip_1030@83:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(66382)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(66397)[5]
          ts: ((<zip_1030@83:0> = 0) && (<zip_1030@83:2> <> 0))
          
        end ExtFormula.Formula.case_analysis_boolean(66397)[5] (0.000000 sec.)
        lb':((<zip_1030@83:2> = 0) && (<zip_1030@83:0> = 0))
        nub':(<zip_1030@83:0> = 0)
        begin InterpProver.interpolate(66402)[5]
          begin InterpProver.interpolate_fresh(66403)[6]
            begin InterpProver.interpolate_log(66404)[7]
              input1: ((<zip_1030@83:2> = 0) && (<zip_1030@83:0> = 0))
              input2: (<zip_1030@83:0> = 0)
              begin InterpProver.interpolate_check(66405)[8]
                begin InterpProver.interpolate_simplify(66406)[9]
                  begin InterpProver.interpolate_quick(66436)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(66445)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(66446)[12]
                        begin CsisatInterface.interpolate_csisat_log(66447)[13]
                          input1: 0 = v_sep_zip_1030_sep_83_sep_0
                          input2: 0 = v_sep_zip_1030_sep_83_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(66448)[14]
                            csisat error: NelsonOppen: not a conjunction
                            
                          end CsisatInterface.interpolate_csisat_raw(66448)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(66447)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(66446)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(66445)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(66436)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(66406)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(66405)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(66404)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(66403)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(66402)[5] (0.002000 sec.)
        begin InterpProver.interpolate(66457)[5]
          begin InterpProver.interpolate_fresh(66458)[6]
            begin InterpProver.interpolate_log(66459)[7]
              input1: ((<zip_1030@83:2> = 0) && (<zip_1030@83:0> = 0))
              input2: (not ((<zip_1030@83:0> <> 0) || (<zip_1030@83:2> = 0)))
              begin InterpProver.interpolate_check(66460)[8]
                begin InterpProver.interpolate_simplify(66461)[9]
                  begin InterpProver.interpolate_quick(66498)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(66507)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(66508)[12]
                        begin CsisatInterface.interpolate_csisat_log(66509)[13]
                          input1: (0 = v_sep_zip_1030_sep_83_sep_0 & 0 = v_sep_zip_1030_sep_83_sep_2)
                          input2: (not 0 = v_sep_zip_1030_sep_83_sep_2 & 0 = v_sep_zip_1030_sep_83_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(66510)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(66510)[14] (0.000000 sec.)
                          output: 0 = v_sep_zip_1030_sep_83_sep_2
                          
                        end CsisatInterface.interpolate_csisat_log(66509)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_zip_1030_sep_83_sep_2
                        after dnf conversion: ((0 = v_sep_zip_1030_sep_83_sep_2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(66508)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(66507)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(66498)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(66461)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(66460)[8] (0.001000 sec.)
              output: (0 = <zip_1030@83:2>)
            end InterpProver.interpolate_log(66459)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(66458)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(66457)[5] (0.001000 sec.)
        output:
          P[<zip_1030@83:2>](<zip_1030@83:0>:int,<zip_1030@83:2>:int) = (0 = <zip_1030@83:2>)
      end ApronInterface.convex_hull_interpolate(66370)[4] (0.003000 sec.)
      Horn clauses:
        P[<<make_list_1037@76:1>@79:0>](<f_main_2158@81:0>:int,<zip_1030@83:2>:int), (0 <> <zip_1030@83:2>) |- bot
        
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int),
        ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
        |- P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,
                                           <<make_list_1037@76:1>@79:0>:int)
        
        |- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
      lower bounds:
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int) = true
        P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,<<make_list_1037@76:1>@79:0>:int) =
        ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
      upper bounds:
        P[<<make_list_1037@76:1>@79:0>](var338:int,var339:int) = (0 = var339)
      begin GenHcSolver.classify_pids(67302)[4]
        output:
          [<<make_list_1037@76:1>@79:0>]
      end GenHcSolver.classify_pids(67302)[4] (0.000000 sec.)
      lb:((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
      nub:(not (0 = <<make_list_1037@76:1>@79:0>))
      begin ApronInterface.convex_hull_interpolate(67305)[4]
        lb:((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
        nub:(not (0 = <<make_list_1037@76:1>@79:0>))
        begin ExtFormula.Formula.case_analysis_boolean(67315)[5]
          ts: ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
          
        end ExtFormula.Formula.case_analysis_boolean(67315)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(67323)[5]
          ts: (0 <> <<make_list_1037@76:1>@79:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(67323)[5] (0.000000 sec.)
        lb':((<<make_list_1037@76:1>@79:0> = 0) && ((-1 + (-1 * <make_list_1037@76:0>)) >= 0))
        nub':true
        begin InterpProver.interpolate(67327)[5]
          begin InterpProver.interpolate_fresh(67328)[6]
            begin InterpProver.interpolate_log(67329)[7]
              input1: ((<<make_list_1037@76:1>@79:0> = 0) && ((-1 + (-1 * <make_list_1037@76:0>)) >= 0))
              input2: true
              begin InterpProver.interpolate_check(67330)[8]
                begin InterpProver.interpolate_simplify(67331)[9]
                  begin InterpProver.interpolate_quick(67370)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(67376)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(67377)[12]
                        begin CsisatInterface.interpolate_csisat_log(67378)[13]
                          input1: (1 + v_sep_make_list_1037_sep_76_sep_0) <= 0
                          input2: true
                          begin CsisatInterface.interpolate_csisat_raw(67379)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(67379)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(67378)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(67377)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(67376)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(67370)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(67331)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(67330)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(67329)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(67328)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(67327)[5] (0.001000 sec.)
        begin InterpProver.interpolate(67387)[5]
          begin InterpProver.interpolate_fresh(67388)[6]
            begin InterpProver.interpolate_log(67389)[7]
              input1: ((<<make_list_1037@76:1>@79:0> = 0) && ((-1 + (-1 * <make_list_1037@76:0>)) >= 0))
              input2: (not (0 = <<make_list_1037@76:1>@79:0>))
              begin InterpProver.interpolate_check(67390)[8]
                begin InterpProver.interpolate_simplify(67391)[9]
                  begin InterpProver.interpolate_quick(67426)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(67435)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(67436)[12]
                        begin CsisatInterface.interpolate_csisat_log(67437)[13]
                          input1: (0 = v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0 & (1 + v_sep_make_list_1037_sep_76_sep_0) <= 0)
                          input2: not 0 = v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(67438)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(67438)[14] (0.000000 sec.)
                          output: 0 = v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(67437)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0
                        after dnf conversion: ((0 = v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(67436)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(67435)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(67426)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(67391)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(67390)[8] (0.000999 sec.)
              output: (0 = <<make_list_1037@76:1>@79:0>)
            end InterpProver.interpolate_log(67389)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(67388)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(67387)[5] (0.000999 sec.)
        output:
          P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,<<make_list_1037@76:1>@79:0>:int) =
          (0 = <<make_list_1037@76:1>@79:0>)
      end ApronInterface.convex_hull_interpolate(67305)[4] (0.001999 sec.)
      Horn clauses:
        |- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
      lower bounds:
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int) = true
      upper bounds:
        P[<make_list_1037@76:0>](var340:int) = true
      begin GenHcSolver.classify_pids(67728)[4]
        output:
          [<make_list_1037@76:0>]
      end GenHcSolver.classify_pids(67728)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(67731)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(67734)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(67734)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(67739)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(67739)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(67742)[5]
          begin InterpProver.interpolate_fresh(67743)[6]
            begin InterpProver.interpolate_log(67744)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(67745)[8]
                begin InterpProver.interpolate_simplify(67746)[9]
                  begin InterpProver.interpolate_quick(67760)[10]
                    
                  end InterpProver.interpolate_quick(67760)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(67746)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(67745)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(67744)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(67743)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(67742)[5] (0.001000 sec.)
        output:
          P[<make_list_1037@76:0>](<make_list_1037@76:0>:int) = true
      end ApronInterface.convex_hull_interpolate(67731)[4] (0.001000 sec.)
      begin HcSolver.check_validity(67817)[4]
        input:
          P[<fail_2167@89:0>](<fail_2167@89:0>:bool)|- bot
          
          P[<zip_1030@83:2>](0:int,<br_zip_2161@86:3>:int), ((<br_zip_2161@86:3> <> 0) && <fail_2167@89:0>)
          |- P[<fail_2167@89:0>](<fail_2167@89:0>:bool)
          
          P[<<make_list_1037@76:1>@79:0>](<f_main_2158@81:0>:int,<zip_1030@83:2>:int),
          (<zip_1030@83:2> = <zip_1030@83:0>) |- P[<zip_1030@83:2>](<zip_1030@83:0>:int,
                                                                    <zip_1030@83:2>:int)
          
          P[<make_list_1037@76:0>](<make_list_1037@76:0>:int),
          ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
          |- P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,
                                             <<make_list_1037@76:1>@79:0>:int)
          
          |- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(67817)[4] (0.001000 sec.)
      solution:
        P[<fail_2167@89:0>](<fail_2167@89:0>:bool) = false
        P[<zip_1030@83:2>](<zip_1030@83:0>:int,<zip_1030@83:2>:int) = (0 = <zip_1030@83:2>)
        P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,<<make_list_1037@76:1>@79:0>:int) =
        (0 = <<make_list_1037@76:1>@79:0>)
        P[<make_list_1037@76:0>](<make_list_1037@76:0>:int) = true
    end GenHcSolver.solve(63968)[3] (0.019997 sec.)
    begin YhornInterface.solve(68108)[3]
      begin HcSolver.solve_ub(68109)[4]
        encoded:
          P[<fail_2167@89:0>](<fail_2167@89:0>:int)|- bot
          
          P[<zip_1030@83:2>](0:int,<br_zip_2161@86:3>:int), ((<br_zip_2161@86:3> <> 0) && (<fail_2167@89:0> = 1))
          |- P[<fail_2167@89:0>](<fail_2167@89:0>:int)
          
          P[<<make_list_1037@76:1>@79:0>](<f_main_2158@81:0>:int,<zip_1030@83:2>:int),
          (<zip_1030@83:2> = <zip_1030@83:0>) |- P[<zip_1030@83:2>](<zip_1030@83:0>:int,
                                                                    <zip_1030@83:2>:int)
          
          P[<make_list_1037@76:0>](<make_list_1037@76:0>:int),
          ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
          |- P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,
                                             <<make_list_1037@76:1>@79:0>:int)
          
          |- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
        input to Yhorn:
          P[<fail_2167@89:0>](<fail_2167@89:0>:int)|- bot
          
          P[<zip_1030@83:2>](var341:int,<br_zip_2161@86:3>:int),
          ((<br_zip_2161@86:3> <> 0) && ((var341 = 0) && (<fail_2167@89:0> = 1)))
          |- P[<fail_2167@89:0>](<fail_2167@89:0>:int)
          
          P[<<make_list_1037@76:1>@79:0>](<f_main_2158@81:0>:int,<zip_1030@83:2>:int),
          (<zip_1030@83:2> = <zip_1030@83:0>) |- P[<zip_1030@83:2>](<zip_1030@83:0>:int,
                                                                    <zip_1030@83:2>:int)
          
          P[<make_list_1037@76:0>](<make_list_1037@76:0>:int),
          ((<make_list_1037@76:0> < 0) && (<<make_list_1037@76:1>@79:0> = 0))
          |- P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,
                                             <<make_list_1037@76:1>@79:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_2167_sep_89_sep_0($668)) -> 1=0.
(($668-1=0) & ($669=0) & ($670<>0)) & (v_sep_zip_1030_sep_83_sep_2($669,$670)) -> v_sep_fail_2167_sep_89_sep_0($668).
($671-$672=0) & (v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0($673,$671)) -> v_sep_zip_1030_sep_83_sep_2($672,$671).
(($674=0) & ($675<0)) & (v_sep_make_list_1037_sep_76_sep_0($675)) -> v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0($675,$674).
0=0 -> v_sep_make_list_1037_sep_76_sep_0($675).


v_sep_fail_2167_sep_89_sep_0: X
v_sep_make_list_1037_sep_76_sep_0: X
v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0: X
v_sep_zip_1030_sep_83_sep_2: X
......Split disj [17] 0.804877
Reconstrcut: 3 **)

v_sep_fail_2167_sep_89_sep_0: (X) | (X)
v_sep_make_list_1037_sep_76_sep_0: X
v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0: X
v_sep_zip_1030_sep_83_sep_2: X
.....
v_sep_fail_2167_sep_89_sep_0: (X) | (X)
v_sep_make_list_1037_sep_76_sep_0: X
v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0: X
v_sep_zip_1030_sep_83_sep_2: X
.....Split conj [19] 0.808876
(Reconstrcut: 8 **)
v_sep_fail_2167_sep_89_sep_0: (X) | (X)
v_sep_make_list_1037_sep_76_sep_0: X
v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0: X
v_sep_zip_1030_sep_83_sep_2: (X) & (X)
.......
v_sep_fail_2167_sep_89_sep_0: (X) | (X)
v_sep_make_list_1037_sep_76_sep_0: X
v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0: X
v_sep_zip_1030_sep_83_sep_2: (X) & (X)
.....
v_sep_fail_2167_sep_89_sep_0: (X) | (X)
v_sep_make_list_1037_sep_76_sep_0: X
v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0: X
v_sep_zip_1030_sep_83_sep_2: (X) & (X)
.......
v_sep_fail_2167_sep_89_sep_0: (X) | (X)
v_sep_make_list_1037_sep_76_sep_0: X
v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0: X
v_sep_zip_1030_sep_83_sep_2: (X) & (X)
........
v_sep_fail_2167_sep_89_sep_0: (X) | (X)
v_sep_make_list_1037_sep_76_sep_0: X
v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0: X
v_sep_zip_1030_sep_83_sep_2: (X) & (X)
........(0=0) & (v_sep_fail_2167_sep_89_sep_0($668)) -> 1=0.
(($668-1=0) & ($669=0) & ($670<>0)) & (v_sep_zip_1030_sep_83_sep_2($669,$670)) -> v_sep_fail_2167_sep_89_sep_0($668).
($671-$672=0) & (v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0($673,$671)) -> v_sep_zip_1030_sep_83_sep_2($672,$671).
(($674=0) & ($675<0)) & (v_sep_make_list_1037_sep_76_sep_0($675)) -> v_sep_make_list_1037_sep_76_sep_1_sep_79_sep_0($675,$674).
0=0 -> v_sep_make_list_1037_sep_76_sep_0($675).

          |- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
        solution:
          P[<fail_2167@89:0>]($676:bool) = false
          P[<make_list_1037@76:0>]($689:int) = true
          P[<<make_list_1037@76:1>@79:0>]($684:int,$686:int) = true
          P[<zip_1030@83:2>]($679:int,$681:int) = ($679 = $681)
        
      end HcSolver.solve_ub(68109)[4] (0.022996 sec.)
      begin HcSolver.check_validity(68250)[4]
        input:
          P[<fail_2167@89:0>](<fail_2167@89:0>:bool)|- bot
          
          P[<zip_1030@83:2>](0:int,<br_zip_2161@86:3>:int), ((<br_zip_2161@86:3> <> 0) && <fail_2167@89:0>)
          |- P[<fail_2167@89:0>](<fail_2167@89:0>:bool)
          
          P[<<make_list_1037@76:1>@79:0>](<f_main_2158@81:0>:int,<zip_1030@83:2>:int),
          (<zip_1030@83:2> = <zip_1030@83:0>) |- P[<zip_1030@83:2>](<zip_1030@83:0>:int,
                                                                    <zip_1030@83:2>:int)
          
          P[<make_list_1037@76:0>](<make_list_1037@76:0>:int),
          ((<<make_list_1037@76:1>@79:0> = 0) && (<make_list_1037@76:0> < 0))
          |- P[<<make_list_1037@76:1>@79:0>](<make_list_1037@76:0>:int,
                                             <<make_list_1037@76:1>@79:0>:int)
          
          |- P[<make_list_1037@76:0>](<make_list_1037@76:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(68250)[4] (0.003000 sec.)
      solution:
        P[<fail_2167@89:0>]($676:bool) = false
        P[<make_list_1037@76:0>]($689:int) = true
        P[<<make_list_1037@76:1>@79:0>]($684:int,$686:int) = true
        P[<zip_1030@83:2>]($679:int,$681:int) = ($679 = $681)
    end YhornInterface.solve(68108)[3] (0.025996 sec.)
    
  end RefTypeInfer.infer_etrs(58796)[2] (0.125982 sec.)
  refinement types:
    main_2145: X
    f_2159: v1:int -> X
    main_1039: v1:int -> (v2:int -> (v3:int -> (v4:int -> v5:int -> X) -> X) -> X) -> X
    make_list_1037: v1:int -> (v2:{v2:int | (0 = v2)} -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_main_2158: v1:int ->
                 (v2:int -> (v3:int -> (v4:int -> v5:int -> X) -> X) -> X) ->
                 v9:int -> (v10:int -> (v11:int -> X) -> X) -> X
    zip_1030: v1:int ->
              (v2:int -> (v3:int -> X) -> X) ->
              v6:{v6:int | (0 = v6)} ->
              (v7:int -> (v8:int -> X) -> X) -> (v11:int -> (v12:int -> (v13:int -> v14:int -> X) -> X) -> X) -> X
    br_zip_2161: v1:bool ->
                 v2:int ->
                 (v3:int -> (v4:int -> X) -> X) ->
                 v7:int ->
                 (v8:int -> (v9:int -> X) -> X) -> (v12:int -> (v13:int -> (v14:int -> v15:int -> X) -> X) -> X) -> X
    fail_2167: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_f_zip_2165: var415:bool ->
                   var414:int ->
                   var413:int ->
                   (var412:int -> (var411:int -> (var410:int -> var409:int -> X) -> X) -> X) ->
                   (var405:int -> (var404:int -> X) -> X) -> (var401:int -> (var400:int -> X) -> X) -> var397:int -> X
    br_zip_2163: var434:bool ->
                 var433:int ->
                 (var432:int -> (var431:int -> X) -> X) ->
                 var428:int ->
                 (var427:int -> (var426:int -> X) -> X) ->
                 (var423:int -> (var422:int -> (var421:int -> var420:int -> X) -> X) -> X) -> X
    cons_make_list_1190: var448:int ->
                         var447:int ->
                         var446:int ->
                         (var445:int -> (var444:int -> X) -> X) ->
                         (var441:int -> (var440:int -> (var439:int -> X) -> X) -> X) -> X
    cons_zip_1134: var468:int ->
                   var467:int ->
                   var466:int ->
                   var465:int ->
                   var464:int ->
                   var463:int ->
                   var462:int ->
                   (var461:int -> (var460:int -> var459:int -> X) -> X) ->
                   (var456:int -> (var455:int -> (var454:int -> var453:int -> X) -> X) -> X) -> X
    f_2160: var476:int -> var475:int -> (var474:int -> (var473:int -> var472:int -> X) -> X) -> X
    f_cons_make_list_2156: var487:int ->
                           var486:int ->
                           var485:int -> (var484:int -> (var483:int -> X) -> X) -> var480:int -> (var479:int -> X) -> X
    f_cons_zip_2151: var504:int ->
                     var503:int ->
                     var502:int ->
                     var501:int ->
                     var500:int ->
                     var499:int ->
                     var498:int ->
                     (var497:int -> (var496:int -> var495:int -> X) -> X) ->
                     var492:int -> (var491:int -> var490:int -> X) -> X
    f_make_list_2155: var509:int -> var508:int -> (var507:int -> X) -> X
    f_make_list_2157: var522:int ->
                      (var521:int -> (var520:int -> (var519:int -> X) -> X) -> X) ->
                      var515:int -> (var514:int -> (var513:int -> X) -> X) -> X
    f_zip_2146: var529:int -> var528:int -> var527:int -> (var526:int -> var525:int -> X) -> X
    f_zip_2147: var533:int -> var532:int -> var531:unit -> X
    f_zip_2148: var552:int ->
                var551:int ->
                (var550:int -> (var549:int -> (var548:int -> var547:int -> X) -> X) -> X) ->
                (var543:int -> (var542:int -> X) -> X) -> (var539:int -> (var538:int -> X) -> X) -> var535:int -> X
    f_zip_2149: var557:int -> var556:int -> var555:int -> var554:unit -> X
    f_zip_2150: var577:int ->
                var576:int ->
                var575:int ->
                (var574:int -> (var573:int -> (var572:int -> var571:int -> X) -> X) -> X) ->
                (var567:int -> (var566:int -> X) -> X) -> (var563:int -> (var562:int -> X) -> X) -> var559:int -> X
    f_zip_2152: var589:int ->
                var588:int ->
                var587:int ->
                var586:int -> (var585:int -> (var584:int -> X) -> X) -> var581:int -> (var580:int -> X) -> X
    f_zip_2153: var601:int ->
                var600:int ->
                var599:int ->
                var598:int -> (var597:int -> (var596:int -> X) -> X) -> var593:int -> (var592:int -> X) -> X
    f_zip_2154: var619:int ->
                var618:int ->
                var617:int ->
                var616:int ->
                (var615:int -> (var614:int -> (var613:int -> var612:int -> X) -> X) -> X) ->
                var608:int -> (var607:int -> (var606:int -> var605:int -> X) -> X) -> X
    fail_2168: var623:bool -> (var622:unit -> X) -> X
  abstraction types:
    main_2145: X
    f_2159: v1:int -> X
    main_1039: v1:int -> (v2:int -> (v3:int -> (v4:int -> v5:int -> X) -> X) -> X) -> X
    make_list_1037: v1:int -> (v2:int[v2 -> (0 = v2)] -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_main_2158: v1:int ->
                 (v2:int -> (v3:int -> (v4:int -> v5:int -> X) -> X) -> X) ->
                 v9:int -> (v10:int -> (v11:int -> X) -> X) -> X
    zip_1030: v1:int ->
              (v2:int -> (v3:int -> X) -> X) ->
              v6:int[v6 -> (0 = v6)] ->
              (v7:int -> (v8:int -> X) -> X) -> (v11:int -> (v12:int -> (v13:int -> v14:int -> X) -> X) -> X) -> X
    br_zip_2161: v1:bool ->
                 v2:int ->
                 (v3:int -> (v4:int -> X) -> X) ->
                 v7:int ->
                 (v8:int -> (v9:int -> X) -> X) -> (v12:int -> (v13:int -> (v14:int -> v15:int -> X) -> X) -> X) -> X
    fail_2167: v1:bool -> (v2:unit -> X) -> X
    br_f_zip_2165: var415:bool ->
                   var414:int ->
                   var413:int ->
                   (var412:int -> (var411:int -> (var410:int -> var409:int -> X) -> X) -> X) ->
                   (var405:int -> (var404:int -> X) -> X) -> (var401:int -> (var400:int -> X) -> X) -> var397:int -> X
    br_zip_2163: var434:bool ->
                 var433:int ->
                 (var432:int -> (var431:int -> X) -> X) ->
                 var428:int ->
                 (var427:int -> (var426:int -> X) -> X) ->
                 (var423:int -> (var422:int -> (var421:int -> var420:int -> X) -> X) -> X) -> X
    cons_make_list_1190: var448:int ->
                         var447:int ->
                         var446:int ->
                         (var445:int -> (var444:int -> X) -> X) ->
                         (var441:int -> (var440:int -> (var439:int -> X) -> X) -> X) -> X
    cons_zip_1134: var468:int ->
                   var467:int ->
                   var466:int ->
                   var465:int ->
                   var464:int ->
                   var463:int ->
                   var462:int ->
                   (var461:int -> (var460:int -> var459:int -> X) -> X) ->
                   (var456:int -> (var455:int -> (var454:int -> var453:int -> X) -> X) -> X) -> X
    f_2160: var476:int -> var475:int -> (var474:int -> (var473:int -> var472:int -> X) -> X) -> X
    f_cons_make_list_2156: var487:int ->
                           var486:int ->
                           var485:int -> (var484:int -> (var483:int -> X) -> X) -> var480:int -> (var479:int -> X) -> X
    f_cons_zip_2151: var504:int ->
                     var503:int ->
                     var502:int ->
                     var501:int ->
                     var500:int ->
                     var499:int ->
                     var498:int ->
                     (var497:int -> (var496:int -> var495:int -> X) -> X) ->
                     var492:int -> (var491:int -> var490:int -> X) -> X
    f_make_list_2155: var509:int -> var508:int -> (var507:int -> X) -> X
    f_make_list_2157: var522:int ->
                      (var521:int -> (var520:int -> (var519:int -> X) -> X) -> X) ->
                      var515:int -> (var514:int -> (var513:int -> X) -> X) -> X
    f_zip_2146: var529:int -> var528:int -> var527:int -> (var526:int -> var525:int -> X) -> X
    f_zip_2147: var533:int -> var532:int -> var531:unit -> X
    f_zip_2148: var552:int ->
                var551:int ->
                (var550:int -> (var549:int -> (var548:int -> var547:int -> X) -> X) -> X) ->
                (var543:int -> (var542:int -> X) -> X) -> (var539:int -> (var538:int -> X) -> X) -> var535:int -> X
    f_zip_2149: var557:int -> var556:int -> var555:int -> var554:unit -> X
    f_zip_2150: var577:int ->
                var576:int ->
                var575:int ->
                (var574:int -> (var573:int -> (var572:int -> var571:int -> X) -> X) -> X) ->
                (var567:int -> (var566:int -> X) -> X) -> (var563:int -> (var562:int -> X) -> X) -> var559:int -> X
    f_zip_2152: var589:int ->
                var588:int ->
                var587:int ->
                var586:int -> (var585:int -> (var584:int -> X) -> X) -> var581:int -> (var580:int -> X) -> X
    f_zip_2153: var601:int ->
                var600:int ->
                var599:int ->
                var598:int -> (var597:int -> (var596:int -> X) -> X) -> var593:int -> (var592:int -> X) -> X
    f_zip_2154: var619:int ->
                var618:int ->
                var617:int ->
                var616:int ->
                (var615:int -> (var614:int -> (var613:int -> var612:int -> X) -> X) -> X) ->
                var608:int -> (var607:int -> (var606:int -> var605:int -> X) -> X) -> X
    fail_2168: var623:bool -> (var622:unit -> X) -> X
  
end AbsTypeInfer.refine(58795)[1] (0.138979 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_2145
  main_2145 -> (rand_int f_2159)
  br_f_zip_2165 b_2166 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when b_2166 ->
      (ys2_1032 0 (f_zip_2150 x_1401 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032))
  br_f_zip_2165 b_2166 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when (not b_2166) -> _|_
  br_zip_2161 b_2162 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when b_2162 ->
      (k_zip_1305 0 (f_zip_2146 xs1_1031 ys1_1032))
  br_zip_2161 b_2162 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (
      not b_2162) -> (fail_2167 true (f_zip_2147 xs1_1031 ys1_1032))
  br_zip_2163 b_2164 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when b_2164 ->
      (xs2_1031 0 (f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032))
  br_zip_2163 b_2164 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (not b_2164) -> _|_
  cons_make_list_1190 n_1038 x_1188 xs1_1189 xs2_1189 k_make_list_cons_make_list_1784 ->
      (k_make_list_cons_make_list_1784 (xs1_1189 + 1) (f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189))
  cons_zip_1134 x_1401 x_1482 xs1_1031 ys1_1032 x1_1131 x2_1131 xs1_1132 xs2_1132 k_zip_cons_zip_1536 ->
      (k_zip_cons_zip_1536 (xs1_1132 + 1)
        (f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132))
  f_2159 x_1985 -> (main_1039 x_1985 (f_2160 x_1985))
  f_2160 x_1985 x1_1973 x2_1973 -> end
  f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189 i_1187 k_make_list_cons_make_list_1799 when (
      i_1187 = 0) -> (k_make_list_cons_make_list_1799 x_1188)
  f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189 i_1187 k_make_list_cons_make_list_1799 when (
      not (i_1187 = 0)) -> (xs2_1189 (i_1187 - 1) k_make_list_cons_make_list_1799)
  f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132 i_1130 k_zip_cons_zip_1551 when (
      i_1130 = 0) -> (k_zip_cons_zip_1551 x1_1131 x2_1131)
  f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132 i_1130 k_zip_cons_zip_1551 when (
      not (i_1130 = 0)) -> (xs2_1132 (i_1130 - 1) k_zip_cons_zip_1551)
  f_main_2158 n_1040 k_main_1895 x1_1904 x2_1904 -> (zip_1030 x1_1904 x2_1904 x1_1904 x2_1904 k_main_1895)
  f_make_list_2155 n_1038 x_1194 k_make_list_1737 -> _|_
  f_make_list_2157 n_1038 k_make_list_1725 x1_1862 x2_1862 ->
      (cons_make_list_1190 n_1038 n_1038 x1_1862 x2_1862 k_make_list_1725)
  f_zip_2146 xs1_1031 ys1_1032 x_1159 k_zip_1323 -> _|_
  f_zip_2147 xs1_1031 ys1_1032 x_1332 -> _|_
  f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when (
      ys1_1032 = 0) -> (fail_2168 true (f_zip_2149 x_1401 xs1_1031 ys1_1032))
  f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when (
      not (ys1_1032 = 0)) -> (br_f_zip_2165 (1 <= ys1_1032) xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401)
  f_zip_2149 x_1401 xs1_1031 ys1_1032 x_1420 -> _|_
  f_zip_2150 x_1401 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1482 ->
      (zip_1030 (xs1_1031 - 1) (f_zip_2152 x_1401 x_1482 xs1_1031 ys1_1032 xs2_1031) (
        ys1_1032 - 1) (f_zip_2153 x_1401 x_1482 xs1_1031 ys1_1032 ys2_1032)
        (f_zip_2154 x_1401 x_1482 xs1_1031 ys1_1032 k_zip_1305))
  f_zip_2152 x_1401 x_1482 xs1_1031 ys1_1032 xs2_1031 x_1093 k_zip_xs'_1384 -> (xs2_1031 (x_1093 + 1) k_zip_xs'_1384)
  f_zip_2153 x_1401 x_1482 xs1_1031 ys1_1032 ys2_1032 x_1101 k_zip_ys'_1465 -> (ys2_1032 (x_1101 + 1) k_zip_ys'_1465)
  f_zip_2154 x_1401 x_1482 xs1_1031 ys1_1032 k_zip_1305 x1_1661 x2_1661 ->
      (cons_zip_1134 x_1401 x_1482 xs1_1031 ys1_1032 x_1401 x_1482 x1_1661 x2_1661 k_zip_1305)
  fail_2167 b k -> {fail} => (k ())
  fail_2168 b k -> {fail} => (k ())
  main_1039 n_1040 k_main_1895 -> (make_list_1037 n_1040 (f_main_2158 n_1040 k_main_1895))
  make_list_1037 n_1038 k_make_list_1725 when (n_1038 < 0) -> (k_make_list_1725 0 (f_make_list_2155 n_1038))
  make_list_1037 n_1038 k_make_list_1725 when (not (n_1038 < 0)) ->
      (make_list_1037 (n_1038 - 1) (f_make_list_2157 n_1038 k_make_list_1725))
  zip_1030 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (xs1_1031 = 0) ->
      (br_zip_2161 (ys1_1032 = 0) xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305)
  zip_1030 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (not (xs1_1031 = 0)) ->
      (br_zip_2163 (1 <= xs1_1031) xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305)
Types:
  main_2145 : X
  fail_2167 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_2168 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1037 : (int -> (x_3:int[x_3 = 0] -> (int -> (int -> X) -> X) -> X) -> X)
  zip_1030 : (x_1:int ->
              (int -> (int -> X) -> X) ->
              x_8:int[x_8 = 0; x_1 <= x_8] ->
              (int -> (int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_2145 ... --> 
  f_2159 ... --> 
  main_1039 ... --> 
  make_list_1037 [2/2] ... --> 
  make_list_1037 [1/2] ... --> 
  f_make_list_2157 ... --> 
  cons_make_list_1190 ... --> 
  f_main_2158 ... --> 
  zip_1030 [1/2] ... --> 
  br_zip_2161 [2/2] ... --> 
  fail_2167 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(69213)[1]
  program:
    main_2145  | true = ((Random.int 0) f_2159)
    br_f_zip_2165 b_2166 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 | b_2166 = (
    ys2_1032 0
             (f_zip_2150 x_1401
                         xs1_1031
                         ys1_1032
                         k_zip_1305
                         xs2_1031
                         ys2_1032))
    br_f_zip_2165 b_2166 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 | (
    not b_2166) = bot
    br_zip_2161 b_2162 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | b_2162 = (
    k_zip_1305 0
               (f_zip_2146 xs1_1031
                           ys1_1032))
    br_zip_2161 b_2162 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | (
    not b_2162) = (fail_2167 true
                             (f_zip_2147 xs1_1031
                                         ys1_1032))
    br_zip_2163 b_2164 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | b_2164 = (
    xs2_1031 0
             (f_zip_2148 xs1_1031
                         ys1_1032
                         k_zip_1305
                         xs2_1031
                         ys2_1032))
    br_zip_2163 b_2164 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | (
    not b_2164) = bot
    cons_make_list_1190 n_1038 x_1188 xs1_1189 xs2_1189 k_make_list_cons_make_list_1784 | true = (
    k_make_list_cons_make_list_1784 (xs1_1189 + 1)
                                    (f_cons_make_list_2156 n_1038
                                                           x_1188
                                                           xs1_1189
                                                           xs2_1189))
    cons_zip_1134 x_1401 x_1482 xs1_1031 ys1_1032 x1_1131 x2_1131 xs1_1132 xs2_1132 k_zip_cons_zip_1536 | true = (
    k_zip_cons_zip_1536
      (xs1_1132 + 1)
      (f_cons_zip_2151 x1_1131
                       x2_1131
                       x_1401
                       x_1482
                       xs1_1031
                       xs1_1132
                       ys1_1032
                       xs2_1132))
    f_2159 x_1985 | true = (main_1039 x_1985
                                      (f_2160 x_1985))
    f_2160 x_1985 x1_1973 x2_1973 | true = end
    f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189 i_1187 k_make_list_cons_make_list_1799 | (
    i_1187 = 0) = (k_make_list_cons_make_list_1799 x_1188)
    f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189 i_1187 k_make_list_cons_make_list_1799 | (
    not (i_1187 = 0)) = (xs2_1189 (i_1187 - 1)
                                  k_make_list_cons_make_list_1799)
    f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132 i_1130 k_zip_cons_zip_1551 | (
    i_1130 = 0) = (k_zip_cons_zip_1551 x1_1131
                                       x2_1131)
    f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132 i_1130 k_zip_cons_zip_1551 | (
    not (i_1130 = 0)) = (xs2_1132 (i_1130 - 1)
                                  k_zip_cons_zip_1551)
    f_main_2158 n_1040 k_main_1895 x1_1904 x2_1904 | true = (zip_1030 x1_1904
                                                                    x2_1904
                                                                    x1_1904
                                                                    x2_1904
                                                                    k_main_1895)
    f_make_list_2155 n_1038 x_1194 k_make_list_1737 | true = bot
    f_make_list_2157 n_1038 k_make_list_1725 x1_1862 x2_1862 | true = (
    cons_make_list_1190 n_1038
                        n_1038
                        x1_1862
                        x2_1862
                        k_make_list_1725)
    f_zip_2146 xs1_1031 ys1_1032 x_1159 k_zip_1323 | true = bot
    f_zip_2147 xs1_1031 ys1_1032 x_1332 | true = bot
    f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 | (
    ys1_1032 = 0) = (fail_2168 true
                               (f_zip_2149 x_1401
                                           xs1_1031
                                           ys1_1032))
    f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 | (
    not (ys1_1032 = 0)) = (br_f_zip_2165 (1 <= ys1_1032)
                                         xs1_1031
                                         ys1_1032
                                         k_zip_1305
                                         xs2_1031
                                         ys2_1032
                                         x_1401)
    f_zip_2149 x_1401 xs1_1031 ys1_1032 x_1420 | true = bot
    f_zip_2150 x_1401 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1482 | true = (
    zip_1030
      (xs1_1031 - 1)
      (f_zip_2152 x_1401
                  x_1482
                  xs1_1031
                  ys1_1032
                  xs2_1031)
      (ys1_1032 - 1)
      (f_zip_2153 x_1401
                  x_1482
                  xs1_1031
                  ys1_1032
                  ys2_1032)
      (f_zip_2154 x_1401
                  x_1482
                  xs1_1031
                  ys1_1032
                  k_zip_1305))
    f_zip_2152 x_1401 x_1482 xs1_1031 ys1_1032 xs2_1031 x_1093 k_zip_xs'_1384 | true = (
    xs2_1031 (x_1093 + 1)
             k_zip_xs'_1384)
    f_zip_2153 x_1401 x_1482 xs1_1031 ys1_1032 ys2_1032 x_1101 k_zip_ys'_1465 | true = (
    ys2_1032 (x_1101 + 1)
             k_zip_ys'_1465)
    f_zip_2154 x_1401 x_1482 xs1_1031 ys1_1032 k_zip_1305 x1_1661 x2_1661 | true = (
    cons_zip_1134 x_1401
                  x_1482
                  xs1_1031
                  ys1_1032
                  x_1401
                  x_1482
                  x1_1661
                  x2_1661
                  k_zip_1305)
    fail_2167 b k | true = (fail ())
    fail_2168 b k | true = (fail ())
    main_1039 n_1040 k_main_1895 | true = (make_list_1037 n_1040
                                                          (f_main_2158 n_1040
                                                                    k_main_1895))
    make_list_1037 n_1038 k_make_list_1725 | (n_1038 < 0) = (k_make_list_1725 0
                                                                    (f_make_list_2155 n_1038))
    make_list_1037 n_1038 k_make_list_1725 | (not (n_1038 < 0)) = (make_list_1037
                                                                    (
                                                                    n_1038 - 1)
                                                                    (
                                                                    f_make_list_2157 n_1038
                                                                    k_make_list_1725))
    zip_1030 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | (xs1_1031 = 0) = (
    br_zip_2161 (ys1_1032 = 0)
                xs1_1031
                xs2_1031
                ys1_1032
                ys2_1032
                k_zip_1305)
    zip_1030 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 | (not (xs1_1031 = 0)) = (
    br_zip_2163 (1 <= xs1_1031)
                xs1_1031
                xs2_1031
                ys1_1032
                ys2_1032
                k_zip_1305)
    main_2145:X
    br_f_zip_2165:bool ->
                  int ->
                  int ->
                  (int -> (int -> (int -> int -> X) -> X) -> X) ->
                  (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    br_zip_2161:bool ->
                int ->
                (int -> (int -> X) -> X) ->
                int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
    br_zip_2163:bool ->
                int ->
                (int -> (int -> X) -> X) ->
                int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
    cons_make_list_1190:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    cons_zip_1134:int ->
                  int ->
                  int ->
                  int ->
                  int ->
                  int -> int -> (int -> (int -> int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
    f_2159:int -> X
    f_2160:int -> int -> (int -> (int -> int -> X) -> X) -> X
    f_cons_make_list_2156:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_cons_zip_2151:int ->
                    int ->
                    int -> int -> int -> int -> int -> (int -> (int -> int -> X) -> X) -> int -> (int -> int -> X) -> X
    f_main_2158:int -> (int -> (int -> (int -> int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_make_list_2155:int -> int -> (int -> X) -> X
    f_make_list_2157:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_zip_2146:int -> int -> int -> (int -> int -> X) -> X
    f_zip_2147:int -> int -> unit -> X
    f_zip_2148:int ->
               int ->
               (int -> (int -> (int -> int -> X) -> X) -> X) ->
               (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_zip_2149:int -> int -> int -> unit -> X
    f_zip_2150:int ->
               int ->
               int ->
               (int -> (int -> (int -> int -> X) -> X) -> X) ->
               (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_zip_2152:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_zip_2153:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_zip_2154:int ->
               int ->
               int ->
               int -> (int -> (int -> (int -> int -> X) -> X) -> X) -> int -> (int -> (int -> int -> X) -> X) -> X
    fail_2167:bool -> (unit -> X) -> X
    fail_2168:bool -> (unit -> X) -> X
    main_1039:int -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
    make_list_1037:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
    zip_1030:int ->
             (int -> (int -> X) -> X) ->
             int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X
  inlined functions: br_f_zip_2165,br_zip_2161,br_zip_2163,cons_make_list_1190,cons_zip_1134,f_2159,f_2160,f_cons_make_list_2156,f_cons_zip_2151,f_main_2158,f_make_list_2155,f_make_list_2157,f_zip_2146,f_zip_2147,f_zip_2148,f_zip_2149,f_zip_2150,f_zip_2152,f_zip_2153,f_zip_2154,main_1039
  counterexample: 0:0:0:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_2159@95:0> = var624)
     [true.(<main_1039@97:0> = <f_2159@95:0>)
      [true.(<make_list_1037@99:0> = <main_1039@97:0>)
       [(not (<make_list_1037@99:0> < 0)).(<make_list_1037@102:0> = (<make_list_1037@99:0> - 1))
        [(<make_list_1037@102:0> < 0).(<<make_list_1037@102:1>@105:0> = 0)
         [true.
          ((<f_make_list_2157@107:0> = <make_list_1037@99:0>) &&
           (<f_make_list_2157@107:2> = <<make_list_1037@102:1>@105:0>))
          [true.
           ((<cons_make_list_1190@109:0> = <f_make_list_2157@107:0>) &&
            ((<cons_make_list_1190@109:1> = <f_make_list_2157@107:0>) &&
             (<cons_make_list_1190@109:2> = <f_make_list_2157@107:2>)))
           [true.(<<cons_make_list_1190@109:4>@111:0> = (<cons_make_list_1190@109:2> + 1))
            [true.(<<f_make_list_2157@107:1>@113:0> = <<cons_make_list_1190@109:4>@111:0>)
             [true.(<<make_list_1037@99:1>@115:0> = <<f_make_list_2157@107:1>@113:0>)
              [true.((<f_main_2158@117:0> = <main_1039@97:0>) && (<f_main_2158@117:2> = <<make_list_1037@99:1>@115:0>))
               [true.((<zip_1030@119:0> = <f_main_2158@117:2>) && (<zip_1030@119:2> = <f_main_2158@117:2>))
                [(<zip_1030@119:0> = 0).
                 ((<br_zip_2161@122:0> = (<zip_1030@119:2> = 0)) &&
                  ((<br_zip_2161@122:1> = <zip_1030@119:0>) && (<br_zip_2161@122:3> = <zip_1030@119:2>)))
                 [(not <br_zip_2161@122:0>).(<fail_2167@125:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(69214)[2]
    horn clauses:
      P[<fail_2167@125:0>](<fail_2167@125:0>:bool)|- bot
      
      P[<br_zip_2161@122:3>](false:bool,<br_zip_2161@122:1>:int,<br_zip_2161@122:3>:int), <fail_2167@125:0>
      |- P[<fail_2167@125:0>](<fail_2167@125:0>:bool)
      
      P[<zip_1030@119:2>](<br_zip_2161@122:1>:int,<br_zip_2161@122:3>:int),
      ((<br_zip_2161@122:1> = 0) && (<br_zip_2161@122:0> = (<br_zip_2161@122:3> = 0)))
      |- P[<br_zip_2161@122:3>](<br_zip_2161@122:0>:bool,<br_zip_2161@122:1>:int,
                                <br_zip_2161@122:3>:int)
      
      P[<f_main_2158@117:2>](<f_main_2158@117:0>:int,<zip_1030@119:2>:int), (
      <zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](<zip_1030@119:0>:int,
                                                                  <zip_1030@119:2>:int)
      
      P[<main_1039@97:0>](<f_main_2158@117:0>:int),
      P[<<make_list_1037@99:1>@115:0>](<f_main_2158@117:0>:int,<f_main_2158@117:2>:int)|- P[<f_main_2158@117:2>](
      <f_main_2158@117:0>:int,<f_main_2158@117:2>:int)
      
      P[<make_list_1037@99:0>](<make_list_1037@99:0>:int),
      P[<<f_make_list_2157@107:1>@113:0>](<make_list_1037@99:0>:int,<<make_list_1037@99:1>@115:0>:int),
      (<make_list_1037@99:0> >= 0)
      |- P[<<make_list_1037@99:1>@115:0>](<make_list_1037@99:0>:int,<<make_list_1037@99:1>@115:0>:int)
      
      P[<f_make_list_2157@107:2>](<f_make_list_2157@107:0>:int,<cons_make_list_1190@109:2>:int),
      P[<<cons_make_list_1190@109:4>@111:0>](<f_make_list_2157@107:0>:int,<f_make_list_2157@107:0>:int,<cons_make_list_1190@109:2>:int,<<f_make_list_2157@107:1>@113:0>:int)|- P[<<f_make_list_2157@107:1>@113:0>](
      <f_make_list_2157@107:0>:int,<<f_make_list_2157@107:1>@113:0>:int)
      
      P[<cons_make_list_1190@109:2>](<cons_make_list_1190@109:0>:int,<cons_make_list_1190@109:1>:int,<cons_make_list_1190@109:2>:int),
      (<<cons_make_list_1190@109:4>@111:0> = (1 + <cons_make_list_1190@109:2>))
      |- P[<<cons_make_list_1190@109:4>@111:0>](<cons_make_list_1190@109:0>:int,
                                                <cons_make_list_1190@109:1>:int,
                                                <cons_make_list_1190@109:2>:int,
                                                <<cons_make_list_1190@109:4>@111:0>:int)
      
      P[<f_make_list_2157@107:2>](<cons_make_list_1190@109:0>:int,<cons_make_list_1190@109:2>:int),
      (<cons_make_list_1190@109:0> = <cons_make_list_1190@109:1>)
      |- P[<cons_make_list_1190@109:2>](<cons_make_list_1190@109:0>:int,
                                        <cons_make_list_1190@109:1>:int,
                                        <cons_make_list_1190@109:2>:int)
      
      P[<make_list_1037@99:0>](<f_make_list_2157@107:0>:int),
      P[<<make_list_1037@102:1>@105:0>]((-1 + <f_make_list_2157@107:0>):int,<f_make_list_2157@107:2>:int),
      (<f_make_list_2157@107:0> >= 0)
      |- P[<f_make_list_2157@107:2>](<f_make_list_2157@107:0>:int,<f_make_list_2157@107:2>:int)
      
      P[<make_list_1037@102:0>](<make_list_1037@102:0>:int),
      ((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> < 0))
      |- P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,
                                           <<make_list_1037@102:1>@105:0>:int)
      
      P[<make_list_1037@99:0>]((1 + <make_list_1037@102:0>):int), ((1 + <make_list_1037@102:0>) >= 0)
      |- P[<make_list_1037@102:0>](<make_list_1037@102:0>:int)
      
      P[<main_1039@97:0>](<make_list_1037@99:0>:int)|- P[<make_list_1037@99:0>](<make_list_1037@99:0>:int)
      
      P[<f_2159@95:0>](<main_1039@97:0>:int)|- P[<main_1039@97:0>](<main_1039@97:0>:int)
      
      |- P[<f_2159@95:0>](<f_2159@95:0>:int)
    call trees:
      <main_2145@92>
        <f_2159@95>
          <main_1039@97>
            <make_list_1037@99>
              <make_list_1037@102>
              </<make_list_1037@102:1>@105>
              <f_make_list_2157@107>
                <cons_make_list_1190@109>
                </<cons_make_list_1190@109:4>@111>
              </<f_make_list_2157@107:1>@113>
            </<make_list_1037@99:1>@115>
            <f_main_2158@117>
              <zip_1030@119>
                <br_zip_2161@122>
                  <fail_2167@125>
    inlined horn clauses:
      P[<fail_2167@125:0>](<fail_2167@125:0>:bool)|- bot
      
      P[<zip_1030@119:2>](0:int,<br_zip_2161@122:3>:int), ((<br_zip_2161@122:3> <> 0) && <fail_2167@125:0>)
      |- P[<fail_2167@125:0>](<fail_2167@125:0>:bool)
      
      P[<<make_list_1037@99:1>@115:0>](<f_main_2158@117:0>:int,<zip_1030@119:2>:int),
      (<zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](<zip_1030@119:0>:int,
                                                                   <zip_1030@119:2>:int)
      
      P[<make_list_1037@99:0>](<make_list_1037@99:0>:int),
      P[<<make_list_1037@102:1>@105:0>]((-1 + <make_list_1037@99:0>):int,(
                                        -1 + <<make_list_1037@99:1>@115:0>):int), (
      <make_list_1037@99:0> >= 0)
      |- P[<<make_list_1037@99:1>@115:0>](<make_list_1037@99:0>:int,<<make_list_1037@99:1>@115:0>:int)
      
      P[<make_list_1037@102:0>](<make_list_1037@102:0>:int),
      ((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> < 0))
      |- P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,
                                           <<make_list_1037@102:1>@105:0>:int)
      
      P[<make_list_1037@99:0>]((1 + <make_list_1037@102:0>):int), ((1 + <make_list_1037@102:0>) >= 0)
      |- P[<make_list_1037@102:0>](<make_list_1037@102:0>:int)
      
      |- P[<make_list_1037@99:0>](<make_list_1037@99:0>:int)
    begin ParamSubstInfer.infer(71174)[3]
      
    end ParamSubstInfer.infer(71174)[3] (0.081987 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(71176)[3]
      
    end RefTypeInfer.elim_coeffs(71176)[3] (0.000000 sec.)
    begin GenHcSolver.solve(71400)[3]
      Horn clauses:
        P[<fail_2167@125:0>](<fail_2167@125:0>:bool)|- bot
        
        P[<zip_1030@119:2>](0:int,<br_zip_2161@122:3>:int), ((<br_zip_2161@122:3> <> 0) && <fail_2167@125:0>)
        |- P[<fail_2167@125:0>](<fail_2167@125:0>:bool)
        
        P[<<make_list_1037@99:1>@115:0>](<f_main_2158@117:0>:int,<zip_1030@119:2>:int),
        (<zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](
        <zip_1030@119:0>:int,<zip_1030@119:2>:int)
        
        P[<make_list_1037@99:0>](<make_list_1037@99:0>:int),
        P[<<make_list_1037@102:1>@105:0>]((-1 + <make_list_1037@99:0>):int,(
                                          -1 + <<make_list_1037@99:1>@115:0>):int), (
        <make_list_1037@99:0> >= 0)
        |- P[<<make_list_1037@99:1>@115:0>](<make_list_1037@99:0>:int,
                                            <<make_list_1037@99:1>@115:0>:int)
        
        P[<make_list_1037@102:0>](<make_list_1037@102:0>:int),
        ((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> < 0))
        |- P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,
                                             <<make_list_1037@102:1>@105:0>:int)
        
        P[<make_list_1037@99:0>]((1 + <make_list_1037@102:0>):int), (
        (1 + <make_list_1037@102:0>) >= 0) |- P[<make_list_1037@102:0>](
        <make_list_1037@102:0>:int)
        
        |- P[<make_list_1037@99:0>](<make_list_1037@99:0>:int)
      lower bounds:
        P[<make_list_1037@99:0>](<make_list_1037@99:0>:int) = true
        P[<make_list_1037@102:0>](<make_list_1037@102:0>:int) = ((1 + <make_list_1037@102:0>) >= 0)
        P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,<<make_list_1037@102:1>@105:0>:int) =
        ((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> = -1))
        P[<<make_list_1037@99:1>@115:0>](<make_list_1037@99:0>:int,<<make_list_1037@99:1>@115:0>:int) =
        ((<make_list_1037@99:0> = 0) && (<<make_list_1037@99:1>@115:0> = 1))
        P[<zip_1030@119:2>](<zip_1030@119:0>:int,<zip_1030@119:2>:int) =
        ((<zip_1030@119:2> = 1) && (<zip_1030@119:2> = <zip_1030@119:0>))
        P[<fail_2167@125:0>](<fail_2167@125:0>:bool) = false
      upper bounds:
        P[<<make_list_1037@99:1>@115:0>](var633:int,var634:int) = true
        P[<<make_list_1037@102:1>@105:0>](var628:int,var629:int) = true
      begin GenHcSolver.classify_pids(73843)[4]
        output:
          [<<make_list_1037@102:1>@105:0>;<<make_list_1037@99:1>@115:0>]
      end GenHcSolver.classify_pids(73843)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(73854)[4]
        lb:(((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> = -1)) ||
            ((<make_list_1037@102:0> = 0) && (<<make_list_1037@102:1>@105:0> = 1)))
        nub:false
        lb':(((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> = -1)) ||
             ((<make_list_1037@102:0> = 0) && (<<make_list_1037@102:1>@105:0> = 1)))
        nub':false
        begin InterpProver.interpolate(73855)[5]
          begin InterpProver.interpolate_fresh(73856)[6]
            begin InterpProver.interpolate_log(73857)[7]
              input1: (((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> = -1)) ||
                       ((<make_list_1037@102:0> = 0) && (<<make_list_1037@102:1>@105:0> = 1)))
              input2: false
              begin InterpProver.interpolate_check(73858)[8]
                begin InterpProver.interpolate_simplify(73859)[9]
                  begin InterpProver.interpolate_quick(73902)[10]
                    
                  end InterpProver.interpolate_quick(73902)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(73859)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(73858)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(73857)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(73856)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(73855)[5] (0.001000 sec.)
        output:
          P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,<<make_list_1037@102:1>@105:0>:int) = true
          P[<<make_list_1037@99:1>@115:0>](<make_list_1037@102:0>:int,<<make_list_1037@102:1>@105:0>:int) = true
      end ApronInterface.convex_hull_interpolate(73854)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_2167@125:0>](<fail_2167@125:0>:bool)|- bot
        
        P[<zip_1030@119:2>](0:int,<br_zip_2161@122:3>:int), ((<br_zip_2161@122:3> <> 0) && <fail_2167@125:0>)
        |- P[<fail_2167@125:0>](<fail_2167@125:0>:bool)
        
         (<zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](<zip_1030@119:0>:int,
                                                                    <zip_1030@119:2>:int)
        
        P[<make_list_1037@99:0>]((1 + <make_list_1037@102:0>):int), (
        (1 + <make_list_1037@102:0>) >= 0) |- P[<make_list_1037@102:0>](
        <make_list_1037@102:0>:int)
        
        |- P[<make_list_1037@99:0>](<make_list_1037@99:0>:int)
      lower bounds:
        P[<zip_1030@119:2>](<zip_1030@119:0>:int,<zip_1030@119:2>:int) = (<zip_1030@119:2> = <zip_1030@119:0>)
        P[<make_list_1037@99:0>](<make_list_1037@99:0>:int) = true
        P[<fail_2167@125:0>](<fail_2167@125:0>:bool) = false
        P[<make_list_1037@102:0>](<make_list_1037@102:0>:int) = ((1 + <make_list_1037@102:0>) >= 0)
      upper bounds:
        P[<make_list_1037@102:0>](var636:int) = true
        P[<make_list_1037@99:0>](var635:int) = true
      begin GenHcSolver.classify_pids(75873)[4]
        output:
          [<make_list_1037@99:0>;<make_list_1037@102:0>]
      end GenHcSolver.classify_pids(75873)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(75884)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(75885)[5]
          begin InterpProver.interpolate_fresh(75886)[6]
            begin InterpProver.interpolate_log(75887)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(75888)[8]
                begin InterpProver.interpolate_simplify(75889)[9]
                  begin InterpProver.interpolate_quick(75902)[10]
                    
                  end InterpProver.interpolate_quick(75902)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(75889)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(75888)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(75887)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(75886)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(75885)[5] (0.000000 sec.)
        output:
          P[<make_list_1037@99:0>](<make_list_1037@99:0>:int) = true
          P[<make_list_1037@102:0>](<make_list_1037@99:0>:int) = true
      end ApronInterface.convex_hull_interpolate(75884)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_2167@125:0>](<fail_2167@125:0>:bool)|- bot
        
        P[<zip_1030@119:2>](0:int,<br_zip_2161@122:3>:int), ((<br_zip_2161@122:3> <> 0) && <fail_2167@125:0>)
        |- P[<fail_2167@125:0>](<fail_2167@125:0>:bool)
        
         (<zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](<zip_1030@119:0>:int,
                                                                    <zip_1030@119:2>:int)
      lower bounds:
        P[<zip_1030@119:2>](<zip_1030@119:0>:int,<zip_1030@119:2>:int) = (<zip_1030@119:2> = <zip_1030@119:0>)
        P[<fail_2167@125:0>](<fail_2167@125:0>:bool) = false
      upper bounds:
        P[<fail_2167@125:0>](var638:bool) = true
      begin GenHcSolver.classify_pids(76867)[4]
        output:
          [<fail_2167@125:0>]
      end GenHcSolver.classify_pids(76867)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(76870)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(76871)[5]
          begin InterpProver.interpolate_fresh(76872)[6]
            begin InterpProver.interpolate_log(76873)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(76874)[8]
                begin InterpProver.interpolate_simplify(76875)[9]
                  begin InterpProver.interpolate_quick(76888)[10]
                    
                  end InterpProver.interpolate_quick(76888)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(76892)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(76892)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(76875)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(76874)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(76873)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(76872)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(76871)[5] (0.000000 sec.)
        output:
          P[<fail_2167@125:0>](<fail_2167@125:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(76870)[4] (0.000000 sec.)
      Horn clauses:
        P[<zip_1030@119:2>](0:int,<br_zip_2161@122:3>:int), (<br_zip_2161@122:3> <> 0) |- bot
        
         (<zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](<zip_1030@119:0>:int,
                                                                    <zip_1030@119:2>:int)
      lower bounds:
        P[<zip_1030@119:2>](<zip_1030@119:0>:int,<zip_1030@119:2>:int) = (<zip_1030@119:2> = <zip_1030@119:0>)
      upper bounds:
        P[<zip_1030@119:2>](var639:int,var640:int) = ((var639 <> 0) || (var640 = 0))
      begin GenHcSolver.classify_pids(77448)[4]
        output:
          [<zip_1030@119:2>]
      end GenHcSolver.classify_pids(77448)[4] (0.000000 sec.)
      lb:(<zip_1030@119:2> = <zip_1030@119:0>)
      nub:(not ((<zip_1030@119:0> <> 0) || (<zip_1030@119:2> = 0)))
      begin ApronInterface.convex_hull_interpolate(77451)[4]
        lb:(<zip_1030@119:2> = <zip_1030@119:0>)
        nub:(not ((<zip_1030@119:0> <> 0) || (<zip_1030@119:2> = 0)))
        lb':(<zip_1030@119:2> = <zip_1030@119:0>)
        nub':(not ((<zip_1030@119:0> <> 0) || (<zip_1030@119:2> = 0)))
        begin InterpProver.interpolate(77452)[5]
          begin InterpProver.interpolate_fresh(77453)[6]
            begin InterpProver.interpolate_log(77454)[7]
              input1: (<zip_1030@119:2> = <zip_1030@119:0>)
              input2: (not ((<zip_1030@119:0> <> 0) || (<zip_1030@119:2> = 0)))
              begin InterpProver.interpolate_check(77455)[8]
                begin InterpProver.interpolate_simplify(77456)[9]
                  begin InterpProver.interpolate_quick(77487)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(77496)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(77497)[12]
                        begin CsisatInterface.interpolate_csisat_log(77498)[13]
                          input1: v_sep_zip_1030_sep_119_sep_0 = v_sep_zip_1030_sep_119_sep_2
                          input2: (not 0 = v_sep_zip_1030_sep_119_sep_2 & 0 = v_sep_zip_1030_sep_119_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(77499)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(77499)[14] (0.000000 sec.)
                          output: v_sep_zip_1030_sep_119_sep_0 = v_sep_zip_1030_sep_119_sep_2
                          
                        end CsisatInterface.interpolate_csisat_log(77498)[13] (0.000000 sec.)
                        after simplification: v_sep_zip_1030_sep_119_sep_0 = v_sep_zip_1030_sep_119_sep_2
                        after dnf conversion: ((v_sep_zip_1030_sep_119_sep_0 = v_sep_zip_1030_sep_119_sep_2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(77497)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(77496)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(77487)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(77456)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(77455)[8] (0.001000 sec.)
              output: (<zip_1030@119:0> = <zip_1030@119:2>)
            end InterpProver.interpolate_log(77454)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(77453)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(77452)[5] (0.001000 sec.)
        output:
          P[<zip_1030@119:2>](<zip_1030@119:0>:int,<zip_1030@119:2>:int) = (<zip_1030@119:0> = <zip_1030@119:2>)
      end ApronInterface.convex_hull_interpolate(77451)[4] (0.001000 sec.)
      begin HcSolver.check_validity(77613)[4]
        input:
          P[<fail_2167@125:0>](<fail_2167@125:0>:bool)|- bot
          
          P[<zip_1030@119:2>](0:int,<br_zip_2161@122:3>:int), ((<br_zip_2161@122:3> <> 0) && <fail_2167@125:0>)
          |- P[<fail_2167@125:0>](<fail_2167@125:0>:bool)
          
          P[<<make_list_1037@99:1>@115:0>](<f_main_2158@117:0>:int,<zip_1030@119:2>:int),
          (<zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](
          <zip_1030@119:0>:int,<zip_1030@119:2>:int)
          
          P[<make_list_1037@99:0>](<make_list_1037@99:0>:int),
          P[<<make_list_1037@102:1>@105:0>]((-1 + <make_list_1037@99:0>):int,(
                                            -1 + <<make_list_1037@99:1>@115:0>):int), (
          <make_list_1037@99:0> >= 0)
          |- P[<<make_list_1037@99:1>@115:0>](<make_list_1037@99:0>:int,
                                              <<make_list_1037@99:1>@115:0>:int)
          
          P[<make_list_1037@102:0>](<make_list_1037@102:0>:int),
          ((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> < 0))
          |- P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,
                                               <<make_list_1037@102:1>@105:0>:int)
          
          P[<make_list_1037@99:0>]((1 + <make_list_1037@102:0>):int), (
          (1 + <make_list_1037@102:0>) >= 0) |- P[<make_list_1037@102:0>](
          <make_list_1037@102:0>:int)
          
          |- P[<make_list_1037@99:0>](<make_list_1037@99:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(77613)[4] (0.000999 sec.)
      solution:
        P[<fail_2167@125:0>](<fail_2167@125:0>:bool) = false
        P[<zip_1030@119:2>](<zip_1030@119:0>:int,<zip_1030@119:2>:int) = (<zip_1030@119:0> = <zip_1030@119:2>)
        P[<<make_list_1037@99:1>@115:0>](<make_list_1037@102:0>:int,<<make_list_1037@102:1>@105:0>:int) = true
        P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,<<make_list_1037@102:1>@105:0>:int) = true
        P[<make_list_1037@102:0>](<make_list_1037@99:0>:int) = true
        P[<make_list_1037@99:0>](<make_list_1037@99:0>:int) = true
    end GenHcSolver.solve(71400)[3] (0.028995 sec.)
    begin GenHcSolver.solve(77966)[3]
      Horn clauses:
        P[<fail_2167@125:0>](<fail_2167@125:0>:bool)|- bot
        
        P[<zip_1030@119:2>](0:int,<br_zip_2161@122:3>:int), ((<br_zip_2161@122:3> <> 0) && <fail_2167@125:0>)
        |- P[<fail_2167@125:0>](<fail_2167@125:0>:bool)
        
        P[<<make_list_1037@99:1>@115:0>](<f_main_2158@117:0>:int,<zip_1030@119:2>:int),
        (<zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](
        <zip_1030@119:0>:int,<zip_1030@119:2>:int)
        
        P[<make_list_1037@99:0>](<make_list_1037@99:0>:int),
        P[<<make_list_1037@102:1>@105:0>]((-1 + <make_list_1037@99:0>):int,(
                                          -1 + <<make_list_1037@99:1>@115:0>):int), (
        <make_list_1037@99:0> >= 0)
        |- P[<<make_list_1037@99:1>@115:0>](<make_list_1037@99:0>:int,
                                            <<make_list_1037@99:1>@115:0>:int)
        
        P[<make_list_1037@102:0>](<make_list_1037@102:0>:int),
        ((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> < 0))
        |- P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,
                                             <<make_list_1037@102:1>@105:0>:int)
        
        P[<make_list_1037@99:0>]((1 + <make_list_1037@102:0>):int), (
        (1 + <make_list_1037@102:0>) >= 0) |- P[<make_list_1037@102:0>](
        <make_list_1037@102:0>:int)
        
        |- P[<make_list_1037@99:0>](<make_list_1037@99:0>:int)
      lower bounds:
        P[<make_list_1037@99:0>](<make_list_1037@99:0>:int) = true
        P[<make_list_1037@102:0>](<make_list_1037@102:0>:int) = ((1 + <make_list_1037@102:0>) >= 0)
        P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,<<make_list_1037@102:1>@105:0>:int) =
        ((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> = -1))
        P[<<make_list_1037@99:1>@115:0>](<make_list_1037@99:0>:int,<<make_list_1037@99:1>@115:0>:int) =
        ((<make_list_1037@99:0> = 0) && (<<make_list_1037@99:1>@115:0> = 1))
        P[<zip_1030@119:2>](<zip_1030@119:0>:int,<zip_1030@119:2>:int) =
        ((<zip_1030@119:2> = 1) && (<zip_1030@119:2> = <zip_1030@119:0>))
        P[<fail_2167@125:0>](<fail_2167@125:0>:bool) = false
      upper bounds:
        P[<<make_list_1037@99:1>@115:0>](var649:int,var650:int) = true
        P[<<make_list_1037@102:1>@105:0>](var644:int,var645:int) = true
      begin GenHcSolver.classify_pids(80409)[4]
        output:
          [<<make_list_1037@102:1>@105:0>;<<make_list_1037@99:1>@115:0>]
      end GenHcSolver.classify_pids(80409)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(80420)[4]
        lb:(((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> = -1)) ||
            ((<make_list_1037@102:0> = 0) && (<<make_list_1037@102:1>@105:0> = 1)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(80438)[5]
          ts: (((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> = -1)) ||
               ((<make_list_1037@102:0> = 0) && (<<make_list_1037@102:1>@105:0> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(80438)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(80449)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(80449)[5] (0.000000 sec.)
        lb':((((-1 + <<make_list_1037@102:1>@105:0>) + (-1 * <make_list_1037@102:0>)) = 0) &&
             (((-1 * <make_list_1037@102:0>) >= 0) && ((1 + <make_list_1037@102:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(80452)[5]
          begin InterpProver.interpolate_fresh(80453)[6]
            begin InterpProver.interpolate_log(80454)[7]
              input1: ((((-1 + <<make_list_1037@102:1>@105:0>) + (-1 * <make_list_1037@102:0>)) = 0) &&
                       (((-1 * <make_list_1037@102:0>) >= 0) && ((1 + <make_list_1037@102:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(80455)[8]
                begin InterpProver.interpolate_simplify(80456)[9]
                  begin InterpProver.interpolate_quick(80562)[10]
                    
                  end InterpProver.interpolate_quick(80562)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(80456)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(80455)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(80454)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(80453)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(80452)[5] (0.001000 sec.)
        output:
          P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,<<make_list_1037@102:1>@105:0>:int) = true
          P[<<make_list_1037@99:1>@115:0>](<make_list_1037@102:0>:int,<<make_list_1037@102:1>@105:0>:int) = true
      end ApronInterface.convex_hull_interpolate(80420)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_2167@125:0>](<fail_2167@125:0>:bool)|- bot
        
        P[<zip_1030@119:2>](0:int,<br_zip_2161@122:3>:int), ((<br_zip_2161@122:3> <> 0) && <fail_2167@125:0>)
        |- P[<fail_2167@125:0>](<fail_2167@125:0>:bool)
        
         (<zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](<zip_1030@119:0>:int,
                                                                    <zip_1030@119:2>:int)
        
        P[<make_list_1037@99:0>]((1 + <make_list_1037@102:0>):int), (
        (1 + <make_list_1037@102:0>) >= 0) |- P[<make_list_1037@102:0>](
        <make_list_1037@102:0>:int)
        
        |- P[<make_list_1037@99:0>](<make_list_1037@99:0>:int)
      lower bounds:
        P[<zip_1030@119:2>](<zip_1030@119:0>:int,<zip_1030@119:2>:int) = (<zip_1030@119:2> = <zip_1030@119:0>)
        P[<make_list_1037@99:0>](<make_list_1037@99:0>:int) = true
        P[<fail_2167@125:0>](<fail_2167@125:0>:bool) = false
        P[<make_list_1037@102:0>](<make_list_1037@102:0>:int) = ((1 + <make_list_1037@102:0>) >= 0)
      upper bounds:
        P[<make_list_1037@102:0>](var652:int) = true
        P[<make_list_1037@99:0>](var651:int) = true
      begin GenHcSolver.classify_pids(82535)[4]
        output:
          [<make_list_1037@99:0>;<make_list_1037@102:0>]
      end GenHcSolver.classify_pids(82535)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(82546)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(82549)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(82549)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(82554)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(82554)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(82557)[5]
          begin InterpProver.interpolate_fresh(82558)[6]
            begin InterpProver.interpolate_log(82559)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(82560)[8]
                begin InterpProver.interpolate_simplify(82561)[9]
                  begin InterpProver.interpolate_quick(82575)[10]
                    
                  end InterpProver.interpolate_quick(82575)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(82561)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(82560)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(82559)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(82558)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(82557)[5] (0.000000 sec.)
        output:
          P[<make_list_1037@99:0>](<make_list_1037@99:0>:int) = true
          P[<make_list_1037@102:0>](<make_list_1037@99:0>:int) = true
      end ApronInterface.convex_hull_interpolate(82546)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_2167@125:0>](<fail_2167@125:0>:bool)|- bot
        
        P[<zip_1030@119:2>](0:int,<br_zip_2161@122:3>:int), ((<br_zip_2161@122:3> <> 0) && <fail_2167@125:0>)
        |- P[<fail_2167@125:0>](<fail_2167@125:0>:bool)
        
         (<zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](<zip_1030@119:0>:int,
                                                                    <zip_1030@119:2>:int)
      lower bounds:
        P[<zip_1030@119:2>](<zip_1030@119:0>:int,<zip_1030@119:2>:int) = (<zip_1030@119:2> = <zip_1030@119:0>)
        P[<fail_2167@125:0>](<fail_2167@125:0>:bool) = false
      upper bounds:
        P[<fail_2167@125:0>](var654:bool) = true
      begin GenHcSolver.classify_pids(83542)[4]
        output:
          [<fail_2167@125:0>]
      end GenHcSolver.classify_pids(83542)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(83545)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(83548)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(83548)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(83553)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(83553)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(83556)[5]
          begin InterpProver.interpolate_fresh(83557)[6]
            begin InterpProver.interpolate_log(83558)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(83559)[8]
                begin InterpProver.interpolate_simplify(83560)[9]
                  begin InterpProver.interpolate_quick(83575)[10]
                    
                  end InterpProver.interpolate_quick(83575)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(83579)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(83579)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(83560)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(83559)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(83558)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(83557)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(83556)[5] (0.001000 sec.)
        output:
          P[<fail_2167@125:0>](<fail_2167@125:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(83545)[4] (0.002000 sec.)
      Horn clauses:
        P[<zip_1030@119:2>](0:int,<br_zip_2161@122:3>:int), (<br_zip_2161@122:3> <> 0) |- bot
        
         (<zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](<zip_1030@119:0>:int,
                                                                    <zip_1030@119:2>:int)
      lower bounds:
        P[<zip_1030@119:2>](<zip_1030@119:0>:int,<zip_1030@119:2>:int) = (<zip_1030@119:2> = <zip_1030@119:0>)
      upper bounds:
        P[<zip_1030@119:2>](var655:int,var656:int) = ((var655 <> 0) || (var656 = 0))
      begin GenHcSolver.classify_pids(84142)[4]
        output:
          [<zip_1030@119:2>]
      end GenHcSolver.classify_pids(84142)[4] (0.000000 sec.)
      lb:(<zip_1030@119:2> = <zip_1030@119:0>)
      nub:(not ((<zip_1030@119:0> <> 0) || (<zip_1030@119:2> = 0)))
      begin ApronInterface.convex_hull_interpolate(84145)[4]
        lb:(<zip_1030@119:2> = <zip_1030@119:0>)
        nub:(not ((<zip_1030@119:0> <> 0) || (<zip_1030@119:2> = 0)))
        begin ExtFormula.Formula.case_analysis_boolean(84150)[5]
          ts: (<zip_1030@119:2> = <zip_1030@119:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(84150)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(84164)[5]
          ts: ((<zip_1030@119:0> = 0) && (<zip_1030@119:2> <> 0))
          
        end ExtFormula.Formula.case_analysis_boolean(84164)[5] (0.000000 sec.)
        lb':((<zip_1030@119:2> + (-1 * <zip_1030@119:0>)) = 0)
        nub':(<zip_1030@119:0> = 0)
        begin InterpProver.interpolate(84169)[5]
          begin InterpProver.interpolate_fresh(84170)[6]
            begin InterpProver.interpolate_log(84171)[7]
              input1: ((<zip_1030@119:2> + (-1 * <zip_1030@119:0>)) = 0)
              input2: (<zip_1030@119:0> = 0)
              begin InterpProver.interpolate_check(84172)[8]
                begin InterpProver.interpolate_simplify(84173)[9]
                  begin InterpProver.interpolate_quick(84190)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(84196)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(84197)[12]
                        begin CsisatInterface.interpolate_csisat_log(84198)[13]
                          input1: true
                          input2: 0 = v_sep_zip_1030_sep_119_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(84199)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(84199)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(84198)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(84197)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(84196)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(84190)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(84173)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(84172)[8] (0.000000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(84171)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(84170)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(84169)[5] (0.000000 sec.)
        begin InterpProver.interpolate(84208)[5]
          begin InterpProver.interpolate_fresh(84209)[6]
            begin InterpProver.interpolate_log(84210)[7]
              input1: ((<zip_1030@119:2> + (-1 * <zip_1030@119:0>)) = 0)
              input2: (not ((<zip_1030@119:0> <> 0) || (<zip_1030@119:2> = 0)))
              begin InterpProver.interpolate_check(84211)[8]
                begin InterpProver.interpolate_simplify(84212)[9]
                  begin InterpProver.interpolate_quick(84243)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(84252)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(84253)[12]
                        begin CsisatInterface.interpolate_csisat_log(84254)[13]
                          input1: v_sep_zip_1030_sep_119_sep_0 = v_sep_zip_1030_sep_119_sep_2
                          input2: (not 0 = v_sep_zip_1030_sep_119_sep_2 & 0 = v_sep_zip_1030_sep_119_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(84255)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(84255)[14] (0.000000 sec.)
                          output: v_sep_zip_1030_sep_119_sep_0 = v_sep_zip_1030_sep_119_sep_2
                          
                        end CsisatInterface.interpolate_csisat_log(84254)[13] (0.000000 sec.)
                        after simplification: v_sep_zip_1030_sep_119_sep_0 = v_sep_zip_1030_sep_119_sep_2
                        after dnf conversion: ((v_sep_zip_1030_sep_119_sep_0 = v_sep_zip_1030_sep_119_sep_2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(84253)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(84252)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(84243)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(84212)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(84211)[8] (0.001000 sec.)
              output: (<zip_1030@119:0> = <zip_1030@119:2>)
            end InterpProver.interpolate_log(84210)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(84209)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(84208)[5] (0.001000 sec.)
        output:
          P[<zip_1030@119:2>](<zip_1030@119:0>:int,<zip_1030@119:2>:int) = (<zip_1030@119:0> = <zip_1030@119:2>)
      end ApronInterface.convex_hull_interpolate(84145)[4] (0.002000 sec.)
      begin HcSolver.check_validity(84369)[4]
        input:
          P[<fail_2167@125:0>](<fail_2167@125:0>:bool)|- bot
          
          P[<zip_1030@119:2>](0:int,<br_zip_2161@122:3>:int), ((<br_zip_2161@122:3> <> 0) && <fail_2167@125:0>)
          |- P[<fail_2167@125:0>](<fail_2167@125:0>:bool)
          
          P[<<make_list_1037@99:1>@115:0>](<f_main_2158@117:0>:int,<zip_1030@119:2>:int),
          (<zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](
          <zip_1030@119:0>:int,<zip_1030@119:2>:int)
          
          P[<make_list_1037@99:0>](<make_list_1037@99:0>:int),
          P[<<make_list_1037@102:1>@105:0>]((-1 + <make_list_1037@99:0>):int,(
                                            -1 + <<make_list_1037@99:1>@115:0>):int), (
          <make_list_1037@99:0> >= 0)
          |- P[<<make_list_1037@99:1>@115:0>](<make_list_1037@99:0>:int,
                                              <<make_list_1037@99:1>@115:0>:int)
          
          P[<make_list_1037@102:0>](<make_list_1037@102:0>:int),
          ((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> < 0))
          |- P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,
                                               <<make_list_1037@102:1>@105:0>:int)
          
          P[<make_list_1037@99:0>]((1 + <make_list_1037@102:0>):int), (
          (1 + <make_list_1037@102:0>) >= 0) |- P[<make_list_1037@102:0>](
          <make_list_1037@102:0>:int)
          
          |- P[<make_list_1037@99:0>](<make_list_1037@99:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(84369)[4] (0.002000 sec.)
      solution:
        P[<fail_2167@125:0>](<fail_2167@125:0>:bool) = false
        P[<zip_1030@119:2>](<zip_1030@119:0>:int,<zip_1030@119:2>:int) = (<zip_1030@119:0> = <zip_1030@119:2>)
        P[<<make_list_1037@99:1>@115:0>](<make_list_1037@102:0>:int,<<make_list_1037@102:1>@105:0>:int) = true
        P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,<<make_list_1037@102:1>@105:0>:int) = true
        P[<make_list_1037@102:0>](<make_list_1037@99:0>:int) = true
        P[<make_list_1037@99:0>](<make_list_1037@99:0>:int) = true
    end GenHcSolver.solve(77966)[3] (0.026996 sec.)
    begin YhornInterface.solve(84722)[3]
      begin HcSolver.solve_ub(84723)[4]
        encoded:
          P[<fail_2167@125:0>](<fail_2167@125:0>:int)|- bot
          
          P[<zip_1030@119:2>](0:int,<br_zip_2161@122:3>:int), ((<br_zip_2161@122:3> <> 0) && (<fail_2167@125:0> = 1))
          |- P[<fail_2167@125:0>](<fail_2167@125:0>:int)
          
          P[<<make_list_1037@99:1>@115:0>](<f_main_2158@117:0>:int,<zip_1030@119:2>:int),
          (<zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](
          <zip_1030@119:0>:int,<zip_1030@119:2>:int)
          
          P[<make_list_1037@99:0>](<make_list_1037@99:0>:int),
          P[<<make_list_1037@102:1>@105:0>]((-1 + <make_list_1037@99:0>):int,(
                                            -1 + <<make_list_1037@99:1>@115:0>):int), (
          <make_list_1037@99:0> >= 0)
          |- P[<<make_list_1037@99:1>@115:0>](<make_list_1037@99:0>:int,
                                              <<make_list_1037@99:1>@115:0>:int)
          
          P[<make_list_1037@102:0>](<make_list_1037@102:0>:int),
          ((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> < 0))
          |- P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,
                                               <<make_list_1037@102:1>@105:0>:int)
          
          P[<make_list_1037@99:0>]((1 + <make_list_1037@102:0>):int), (
          (1 + <make_list_1037@102:0>) >= 0) |- P[<make_list_1037@102:0>](
          <make_list_1037@102:0>:int)
          
          |- P[<make_list_1037@99:0>](<make_list_1037@99:0>:int)
        input to Yhorn:
          P[<fail_2167@125:0>](<fail_2167@125:0>:int)|- bot
          
          P[<zip_1030@119:2>](var657:int,<br_zip_2161@122:3>:int),
          ((<br_zip_2161@122:3> <> 0) && ((var657 = 0) && (<fail_2167@125:0> = 1)))
          |- P[<fail_2167@125:0>](<fail_2167@125:0>:int)
          
          P[<<make_list_1037@99:1>@115:0>](<f_main_2158@117:0>:int,<zip_1030@119:2>:int),
          (<zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](
          <zip_1030@119:0>:int,<zip_1030@119:2>:int)
          
          P[<make_list_1037@99:0>](<make_list_1037@99:0>:int),
          P[<<make_list_1037@102:1>@105:0>](var658:int,var659:int),
          (((1 + var659) = <<make_list_1037@99:1>@115:0>) &&
           (((1 + var658) = <make_list_1037@99:0>) && (<make_list_1037@99:0> >= 0)))
          |- P[<<make_list_1037@99:1>@115:0>](<make_list_1037@99:0>:int,
                                              <<make_list_1037@99:1>@115:0>:int)
          
          P[<make_list_1037@102:0>](<make_list_1037@102:0>:int),
          ((<make_list_1037@102:0> < 0) && (<<make_list_1037@102:1>@105:0> = 0))
          |- P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,
                                               <<make_list_1037@102:1>@105:0>:int)
          
          P[<make_list_1037@99:0>](var660:int),
          ((var660 = (1 + <make_list_1037@102:0>)) && ((1 + <make_list_1037@102:0>) >= 0))
          |- P[<make_list_1037@102:0>](<make_list_1037@102:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_2167_sep_125_sep_0($856)) -> 1=0.
(($856-1=0) & ($857=0) & ($858<>0)) & (v_sep_zip_1030_sep_119_sep_2($857,$858)) -> v_sep_fail_2167_sep_125_sep_0($856).
($859-$860=0) & (v_sep_make_list_1037_sep_99_sep_1_sep_115_sep_0($861,$859)) -> v_sep_zip_1030_sep_119_sep_2($860,$859).
(($862>=0) & (-$862+$863+1=0) & ($864-$865+1=0)) & (v_sep_make_list_1037_sep_102_sep_1_sep_105_sep_0($863,$864)) & (v_sep_make_list_1037_sep_99_sep_0($862)) -> v_sep_make_list_1037_sep_99_sep_1_sep_115_sep_0($862,$865).
(($866=0) & ($867<0)) & (v_sep_make_list_1037_sep_102_sep_0($867)) -> v_sep_make_list_1037_sep_102_sep_1_sep_105_sep_0($867,$866).
(($867+1>=0) & (-$867+$868-1=0)) & (v_sep_make_list_1037_sep_99_sep_0($868)) -> v_sep_make_list_1037_sep_102_sep_0($867).
0=0 -> v_sep_make_list_1037_sep_99_sep_0($862).


v_sep_fail_2167_sep_125_sep_0: X
v_sep_make_list_1037_sep_102_sep_0: X
v_sep_make_list_1037_sep_102_sep_1_sep_105_sep_0: X
v_sep_make_list_1037_sep_99_sep_0: X
v_sep_make_list_1037_sep_99_sep_1_sep_115_sep_0: X
v_sep_zip_1030_sep_119_sep_2: X
.........
v_sep_fail_2167_sep_125_sep_0: X
v_sep_make_list_1037_sep_102_sep_0: X
v_sep_make_list_1037_sep_102_sep_1_sep_105_sep_0: X
v_sep_make_list_1037_sep_99_sep_0: X
v_sep_make_list_1037_sep_99_sep_1_sep_115_sep_0: X
v_sep_zip_1030_sep_119_sep_2: X
....
v_sep_fail_2167_sep_125_sep_0: X
v_sep_make_list_1037_sep_102_sep_0: X
v_sep_make_list_1037_sep_102_sep_1_sep_105_sep_0: X
v_sep_make_list_1037_sep_99_sep_0: X
v_sep_make_list_1037_sep_99_sep_1_sep_115_sep_0: X
v_sep_zip_1030_sep_119_sep_2: X
.....
v_sep_fail_2167_sep_125_sep_0: X
v_sep_make_list_1037_sep_102_sep_0: X
v_sep_make_list_1037_sep_102_sep_1_sep_105_sep_0: X
v_sep_make_list_1037_sep_99_sep_0: X
v_sep_make_list_1037_sep_99_sep_1_sep_115_sep_0: X
v_sep_zip_1030_sep_119_sep_2: X
.......
v_sep_fail_2167_sep_125_sep_0: X
v_sep_make_list_1037_sep_102_sep_0: X
v_sep_make_list_1037_sep_102_sep_1_sep_105_sep_0: X
v_sep_make_list_1037_sep_99_sep_0: X
v_sep_make_list_1037_sep_99_sep_1_sep_115_sep_0: X
v_sep_zip_1030_sep_119_sep_2: X
........
v_sep_fail_2167_sep_125_sep_0: X
v_sep_make_list_1037_sep_102_sep_0: X
v_sep_make_list_1037_sep_102_sep_1_sep_105_sep_0: X
v_sep_make_list_1037_sep_99_sep_0: X
v_sep_make_list_1037_sep_99_sep_1_sep_115_sep_0: X
v_sep_zip_1030_sep_119_sep_2: X
.........(0=0) & (v_sep_fail_2167_sep_125_sep_0($856)) -> 1=0.
(($856-1=0) & ($857=0) & ($858<>0)) & (v_sep_zip_1030_sep_119_sep_2($857,$858)) -> v_sep_fail_2167_sep_125_sep_0($856).
($859-$860=0) & (v_sep_make_list_1037_sep_99_sep_1_sep_115_sep_0($861,$859)) -> v_sep_zip_1030_sep_119_sep_2($860,$859).
(($862>=0) & (-$862+$863+1=0) & ($864-$865+1=0)) & (v_sep_make_list_1037_sep_102_sep_1_sep_105_sep_0($863,$864)) & (v_sep_make_list_1037_sep_99_sep_0($862)) -> v_sep_make_list_1037_sep_99_sep_1_sep_115_sep_0($862,$865).
(($866=0) & ($867<0)) & (v_sep_make_list_1037_sep_102_sep_0($867)) -> v_sep_make_list_1037_sep_102_sep_1_sep_105_sep_0($867,$866).
(($867+1>=0) & (-$867+$868-1=0)) & (v_sep_make_list_1037_sep_99_sep_0($868)) -> v_sep_make_list_1037_sep_102_sep_0($867).
0=0 -> v_sep_make_list_1037_sep_99_sep_0($862).

          |- P[<make_list_1037@99:0>](<make_list_1037@99:0>:int)
        solution:
          P[<fail_2167@125:0>]($869:bool) = false
          P[<make_list_1037@102:0>]($890:int) = true
          P[<<make_list_1037@102:1>@105:0>]($882:int,$884:int) = (0 <= $884)
          P[<make_list_1037@99:0>]($887:int) = true
          P[<<make_list_1037@99:1>@115:0>]($877:int,$879:int) = (1 <= $879)
          P[<zip_1030@119:2>]($872:int,$874:int) = (1 <= $872)
        
      end HcSolver.solve_ub(84723)[4] (0.033995 sec.)
      begin HcSolver.check_validity(85007)[4]
        input:
          P[<fail_2167@125:0>](<fail_2167@125:0>:bool)|- bot
          
          P[<zip_1030@119:2>](0:int,<br_zip_2161@122:3>:int), ((<br_zip_2161@122:3> <> 0) && <fail_2167@125:0>)
          |- P[<fail_2167@125:0>](<fail_2167@125:0>:bool)
          
          P[<<make_list_1037@99:1>@115:0>](<f_main_2158@117:0>:int,<zip_1030@119:2>:int),
          (<zip_1030@119:2> = <zip_1030@119:0>) |- P[<zip_1030@119:2>](
          <zip_1030@119:0>:int,<zip_1030@119:2>:int)
          
          P[<make_list_1037@99:0>](<make_list_1037@99:0>:int),
          P[<<make_list_1037@102:1>@105:0>]((-1 + <make_list_1037@99:0>):int,(
                                            -1 + <<make_list_1037@99:1>@115:0>):int), (
          <make_list_1037@99:0> >= 0)
          |- P[<<make_list_1037@99:1>@115:0>](<make_list_1037@99:0>:int,
                                              <<make_list_1037@99:1>@115:0>:int)
          
          P[<make_list_1037@102:0>](<make_list_1037@102:0>:int),
          ((<<make_list_1037@102:1>@105:0> = 0) && (<make_list_1037@102:0> < 0))
          |- P[<<make_list_1037@102:1>@105:0>](<make_list_1037@102:0>:int,
                                               <<make_list_1037@102:1>@105:0>:int)
          
          P[<make_list_1037@99:0>]((1 + <make_list_1037@102:0>):int), (
          (1 + <make_list_1037@102:0>) >= 0) |- P[<make_list_1037@102:0>](
          <make_list_1037@102:0>:int)
          
          |- P[<make_list_1037@99:0>](<make_list_1037@99:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(85007)[4] (0.002000 sec.)
      solution:
        P[<fail_2167@125:0>]($869:bool) = false
        P[<make_list_1037@102:0>]($890:int) = true
        P[<<make_list_1037@102:1>@105:0>]($882:int,$884:int) = (0 <= $884)
        P[<make_list_1037@99:0>]($887:int) = true
        P[<<make_list_1037@99:1>@115:0>]($877:int,$879:int) = (1 <= $879)
        P[<zip_1030@119:2>]($872:int,$874:int) = (1 <= $872)
    end YhornInterface.solve(84722)[3] (0.035995 sec.)
    
  end RefTypeInfer.infer_etrs(69214)[2] (0.185971 sec.)
  refinement types:
    main_2145: X
    f_2159: v1:int -> X
    main_1039: v1:int -> (v2:int -> (v3:int -> (v4:int -> v5:int -> X) -> X) -> X) -> X
    make_list_1037: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    make_list_1037: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_make_list_2157: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1190: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_2158: v1:int ->
                 (v2:int -> (v3:int -> (v4:int -> v5:int -> X) -> X) -> X) ->
                 v9:int -> (v10:int -> (v11:int -> X) -> X) -> X
    zip_1030: v1:int ->
              (v2:int -> (v3:int -> X) -> X) ->
              v6:{v6:int | (v1 = v6)} ->
              (v7:int -> (v8:int -> X) -> X) -> (v11:int -> (v12:int -> (v13:int -> v14:int -> X) -> X) -> X) -> X
    br_zip_2161: v1:bool ->
                 v2:int ->
                 (v3:int -> (v4:int -> X) -> X) ->
                 v7:int ->
                 (v8:int -> (v9:int -> X) -> X) -> (v12:int -> (v13:int -> (v14:int -> v15:int -> X) -> X) -> X) -> X
    fail_2167: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_f_zip_2165: var754:bool ->
                   var753:int ->
                   var752:int ->
                   (var751:int -> (var750:int -> (var749:int -> var748:int -> X) -> X) -> X) ->
                   (var744:int -> (var743:int -> X) -> X) -> (var740:int -> (var739:int -> X) -> X) -> var736:int -> X
    br_zip_2163: var773:bool ->
                 var772:int ->
                 (var771:int -> (var770:int -> X) -> X) ->
                 var767:int ->
                 (var766:int -> (var765:int -> X) -> X) ->
                 (var762:int -> (var761:int -> (var760:int -> var759:int -> X) -> X) -> X) -> X
    cons_zip_1134: var793:int ->
                   var792:int ->
                   var791:int ->
                   var790:int ->
                   var789:int ->
                   var788:int ->
                   var787:int ->
                   (var786:int -> (var785:int -> var784:int -> X) -> X) ->
                   (var781:int -> (var780:int -> (var779:int -> var778:int -> X) -> X) -> X) -> X
    f_2160: var801:int -> var800:int -> (var799:int -> (var798:int -> var797:int -> X) -> X) -> X
    f_cons_make_list_2156: var812:int ->
                           var811:int ->
                           var810:int -> (var809:int -> (var808:int -> X) -> X) -> var805:int -> (var804:int -> X) -> X
    f_cons_zip_2151: var829:int ->
                     var828:int ->
                     var827:int ->
                     var826:int ->
                     var825:int ->
                     var824:int ->
                     var823:int ->
                     (var822:int -> (var821:int -> var820:int -> X) -> X) ->
                     var817:int -> (var816:int -> var815:int -> X) -> X
    f_make_list_2155: var834:int -> var833:int -> (var832:int -> X) -> X
    f_zip_2146: var841:int -> var840:int -> var839:int -> (var838:int -> var837:int -> X) -> X
    f_zip_2147: var845:int -> var844:int -> var843:unit -> X
    f_zip_2148: var864:int ->
                var863:int ->
                (var862:int -> (var861:int -> (var860:int -> var859:int -> X) -> X) -> X) ->
                (var855:int -> (var854:int -> X) -> X) -> (var851:int -> (var850:int -> X) -> X) -> var847:int -> X
    f_zip_2149: var869:int -> var868:int -> var867:int -> var866:unit -> X
    f_zip_2150: var889:int ->
                var888:int ->
                var887:int ->
                (var886:int -> (var885:int -> (var884:int -> var883:int -> X) -> X) -> X) ->
                (var879:int -> (var878:int -> X) -> X) -> (var875:int -> (var874:int -> X) -> X) -> var871:int -> X
    f_zip_2152: var901:int ->
                var900:int ->
                var899:int ->
                var898:int -> (var897:int -> (var896:int -> X) -> X) -> var893:int -> (var892:int -> X) -> X
    f_zip_2153: var913:int ->
                var912:int ->
                var911:int ->
                var910:int -> (var909:int -> (var908:int -> X) -> X) -> var905:int -> (var904:int -> X) -> X
    f_zip_2154: var931:int ->
                var930:int ->
                var929:int ->
                var928:int ->
                (var927:int -> (var926:int -> (var925:int -> var924:int -> X) -> X) -> X) ->
                var920:int -> (var919:int -> (var918:int -> var917:int -> X) -> X) -> X
    fail_2168: var935:bool -> (var934:unit -> X) -> X
  abstraction types:
    main_2145: X
    f_2159: v1:int -> X
    main_1039: v1:int -> (v2:int -> (v3:int -> (v4:int -> v5:int -> X) -> X) -> X) -> X
    make_list_1037: var936:int -> (var937:int -> (var938:int -> (var939:int -> X) -> X) -> X) -> X
    f_make_list_2157: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1190: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_2158: v1:int ->
                 (v2:int -> (v3:int -> (v4:int -> v5:int -> X) -> X) -> X) ->
                 v9:int -> (v10:int -> (v11:int -> X) -> X) -> X
    zip_1030: v1:int ->
              (v2:int -> (v3:int -> X) -> X) ->
              v6:int[v6 -> (v1 = v6)] ->
              (v7:int -> (v8:int -> X) -> X) -> (v11:int -> (v12:int -> (v13:int -> v14:int -> X) -> X) -> X) -> X
    br_zip_2161: v1:bool ->
                 v2:int ->
                 (v3:int -> (v4:int -> X) -> X) ->
                 v7:int ->
                 (v8:int -> (v9:int -> X) -> X) -> (v12:int -> (v13:int -> (v14:int -> v15:int -> X) -> X) -> X) -> X
    fail_2167: v1:bool -> (v2:unit -> X) -> X
    br_f_zip_2165: var754:bool ->
                   var753:int ->
                   var752:int ->
                   (var751:int -> (var750:int -> (var749:int -> var748:int -> X) -> X) -> X) ->
                   (var744:int -> (var743:int -> X) -> X) -> (var740:int -> (var739:int -> X) -> X) -> var736:int -> X
    br_zip_2163: var773:bool ->
                 var772:int ->
                 (var771:int -> (var770:int -> X) -> X) ->
                 var767:int ->
                 (var766:int -> (var765:int -> X) -> X) ->
                 (var762:int -> (var761:int -> (var760:int -> var759:int -> X) -> X) -> X) -> X
    cons_zip_1134: var793:int ->
                   var792:int ->
                   var791:int ->
                   var790:int ->
                   var789:int ->
                   var788:int ->
                   var787:int ->
                   (var786:int -> (var785:int -> var784:int -> X) -> X) ->
                   (var781:int -> (var780:int -> (var779:int -> var778:int -> X) -> X) -> X) -> X
    f_2160: var801:int -> var800:int -> (var799:int -> (var798:int -> var797:int -> X) -> X) -> X
    f_cons_make_list_2156: var812:int ->
                           var811:int ->
                           var810:int -> (var809:int -> (var808:int -> X) -> X) -> var805:int -> (var804:int -> X) -> X
    f_cons_zip_2151: var829:int ->
                     var828:int ->
                     var827:int ->
                     var826:int ->
                     var825:int ->
                     var824:int ->
                     var823:int ->
                     (var822:int -> (var821:int -> var820:int -> X) -> X) ->
                     var817:int -> (var816:int -> var815:int -> X) -> X
    f_make_list_2155: var834:int -> var833:int -> (var832:int -> X) -> X
    f_zip_2146: var841:int -> var840:int -> var839:int -> (var838:int -> var837:int -> X) -> X
    f_zip_2147: var845:int -> var844:int -> var843:unit -> X
    f_zip_2148: var864:int ->
                var863:int ->
                (var862:int -> (var861:int -> (var860:int -> var859:int -> X) -> X) -> X) ->
                (var855:int -> (var854:int -> X) -> X) -> (var851:int -> (var850:int -> X) -> X) -> var847:int -> X
    f_zip_2149: var869:int -> var868:int -> var867:int -> var866:unit -> X
    f_zip_2150: var889:int ->
                var888:int ->
                var887:int ->
                (var886:int -> (var885:int -> (var884:int -> var883:int -> X) -> X) -> X) ->
                (var879:int -> (var878:int -> X) -> X) -> (var875:int -> (var874:int -> X) -> X) -> var871:int -> X
    f_zip_2152: var901:int ->
                var900:int ->
                var899:int ->
                var898:int -> (var897:int -> (var896:int -> X) -> X) -> var893:int -> (var892:int -> X) -> X
    f_zip_2153: var913:int ->
                var912:int ->
                var911:int ->
                var910:int -> (var909:int -> (var908:int -> X) -> X) -> var905:int -> (var904:int -> X) -> X
    f_zip_2154: var931:int ->
                var930:int ->
                var929:int ->
                var928:int ->
                (var927:int -> (var926:int -> (var925:int -> var924:int -> X) -> X) -> X) ->
                var920:int -> (var919:int -> (var918:int -> var917:int -> X) -> X) -> X
    fail_2168: var935:bool -> (var934:unit -> X) -> X
  
end AbsTypeInfer.refine(69213)[1] (0.197970 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 3)::
Main: main_2145
  main_2145 -> (rand_int f_2159)
  br_f_zip_2165 b_2166 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when b_2166 ->
      (ys2_1032 0 (f_zip_2150 x_1401 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032))
  br_f_zip_2165 b_2166 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when (not b_2166) -> _|_
  br_zip_2161 b_2162 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when b_2162 ->
      (k_zip_1305 0 (f_zip_2146 xs1_1031 ys1_1032))
  br_zip_2161 b_2162 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (
      not b_2162) -> (fail_2167 true (f_zip_2147 xs1_1031 ys1_1032))
  br_zip_2163 b_2164 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when b_2164 ->
      (xs2_1031 0 (f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032))
  br_zip_2163 b_2164 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (not b_2164) -> _|_
  cons_make_list_1190 n_1038 x_1188 xs1_1189 xs2_1189 k_make_list_cons_make_list_1784 ->
      (k_make_list_cons_make_list_1784 (xs1_1189 + 1) (f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189))
  cons_zip_1134 x_1401 x_1482 xs1_1031 ys1_1032 x1_1131 x2_1131 xs1_1132 xs2_1132 k_zip_cons_zip_1536 ->
      (k_zip_cons_zip_1536 (xs1_1132 + 1)
        (f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132))
  f_2159 x_1985 -> (main_1039 x_1985 (f_2160 x_1985))
  f_2160 x_1985 x1_1973 x2_1973 -> end
  f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189 i_1187 k_make_list_cons_make_list_1799 when (
      i_1187 = 0) -> (k_make_list_cons_make_list_1799 x_1188)
  f_cons_make_list_2156 n_1038 x_1188 xs1_1189 xs2_1189 i_1187 k_make_list_cons_make_list_1799 when (
      not (i_1187 = 0)) -> (xs2_1189 (i_1187 - 1) k_make_list_cons_make_list_1799)
  f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132 i_1130 k_zip_cons_zip_1551 when (
      i_1130 = 0) -> (k_zip_cons_zip_1551 x1_1131 x2_1131)
  f_cons_zip_2151 x1_1131 x2_1131 x_1401 x_1482 xs1_1031 xs1_1132 ys1_1032 xs2_1132 i_1130 k_zip_cons_zip_1551 when (
      not (i_1130 = 0)) -> (xs2_1132 (i_1130 - 1) k_zip_cons_zip_1551)
  f_main_2158 n_1040 k_main_1895 x1_1904 x2_1904 -> (zip_1030 x1_1904 x2_1904 x1_1904 x2_1904 k_main_1895)
  f_make_list_2155 n_1038 x_1194 k_make_list_1737 -> _|_
  f_make_list_2157 n_1038 k_make_list_1725 x1_1862 x2_1862 ->
      (cons_make_list_1190 n_1038 n_1038 x1_1862 x2_1862 k_make_list_1725)
  f_zip_2146 xs1_1031 ys1_1032 x_1159 k_zip_1323 -> _|_
  f_zip_2147 xs1_1031 ys1_1032 x_1332 -> _|_
  f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when (
      ys1_1032 = 0) -> (fail_2168 true (f_zip_2149 x_1401 xs1_1031 ys1_1032))
  f_zip_2148 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401 when (
      not (ys1_1032 = 0)) -> (br_f_zip_2165 (1 <= ys1_1032) xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1401)
  f_zip_2149 x_1401 xs1_1031 ys1_1032 x_1420 -> _|_
  f_zip_2150 x_1401 xs1_1031 ys1_1032 k_zip_1305 xs2_1031 ys2_1032 x_1482 ->
      (zip_1030 (xs1_1031 - 1) (f_zip_2152 x_1401 x_1482 xs1_1031 ys1_1032 xs2_1031) (
        ys1_1032 - 1) (f_zip_2153 x_1401 x_1482 xs1_1031 ys1_1032 ys2_1032)
        (f_zip_2154 x_1401 x_1482 xs1_1031 ys1_1032 k_zip_1305))
  f_zip_2152 x_1401 x_1482 xs1_1031 ys1_1032 xs2_1031 x_1093 k_zip_xs'_1384 -> (xs2_1031 (x_1093 + 1) k_zip_xs'_1384)
  f_zip_2153 x_1401 x_1482 xs1_1031 ys1_1032 ys2_1032 x_1101 k_zip_ys'_1465 -> (ys2_1032 (x_1101 + 1) k_zip_ys'_1465)
  f_zip_2154 x_1401 x_1482 xs1_1031 ys1_1032 k_zip_1305 x1_1661 x2_1661 ->
      (cons_zip_1134 x_1401 x_1482 xs1_1031 ys1_1032 x_1401 x_1482 x1_1661 x2_1661 k_zip_1305)
  fail_2167 b k -> {fail} => (k ())
  fail_2168 b k -> {fail} => (k ())
  main_1039 n_1040 k_main_1895 -> (make_list_1037 n_1040 (f_main_2158 n_1040 k_main_1895))
  make_list_1037 n_1038 k_make_list_1725 when (n_1038 < 0) -> (k_make_list_1725 0 (f_make_list_2155 n_1038))
  make_list_1037 n_1038 k_make_list_1725 when (not (n_1038 < 0)) ->
      (make_list_1037 (n_1038 - 1) (f_make_list_2157 n_1038 k_make_list_1725))
  zip_1030 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (xs1_1031 = 0) ->
      (br_zip_2161 (ys1_1032 = 0) xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305)
  zip_1030 xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305 when (not (xs1_1031 = 0)) ->
      (br_zip_2163 (1 <= xs1_1031) xs1_1031 xs2_1031 ys1_1032 ys2_1032 k_zip_1305)
Types:
  main_2145 : X
  fail_2167 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_2168 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1037 : (int -> (x_3:int[x_3 = 0] -> (int -> (int -> X) -> X) -> X) -> X)
  zip_1030 : (x_1:int ->
              (int -> (int -> X) -> X) ->
              x_8:int[x_1 = x_8; x_8 = 0; x_1 <= x_8] ->
              (int -> (int -> X) -> X) -> (int -> (int -> (int -> int -> X) -> X) -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  make_list: ((int -> ((Top list|x_2:x_2 = 0|) \/ (int list|x_4:x_4 <> 0|))) /\ 
              (int -> ((int list|x_8:x_8 = 0|) \/ (int list|x_11:x_11 <> 0|))))
  zip: ((x_1:(Top list) -> ((Top list|x_5:x_5 = 0 && fst x_1 = x_5|) -> (Top list))) /\ 
        (x_9:(int list) -> ((int list|x_13:(x_13 <> 0 && fst x_9 <= x_13) && fst x_9 = x_13|) -> (Top list))))

cycles: 3
total: 1.271 sec
  abst: 0.050 sec
  mc: 0.065 sec
  refine: 0.836 sec
    exparam: 0.169 sec
