MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi bcopy.ml

parsed::
 let make_array_1030 n_1031 = n_1031 
 in
 let arraysize_1032 src_1033 = src_1033 
 in
 let update_1034 des_1035 i_1036 x_1037 = if 0 <= i_1036 && i_1036 < des_1035 then
                                            ()
                                          else
                                            {fail} () 
 in
 let sub_1038 src_1039 i_1040 = let u_1072 = if 0 <= i_1040 && i_1040 < src_1039 then
                                               ()
                                             else
                                               {fail} () 
                                in
                                  0 
 in
 let rec bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 =
   if i_1044 >= m_1045 then
     ()
   else
     let u_1110 = update_1034 des_1043 i_1044 (sub_1038 src_1042 i_1044) 
     in
       bcopy_aux_1041 src_1042 des_1043 (i_1044 + 1) m_1045 
 in
 let bcopy_1046 src_1047 des_1048 = bcopy_aux_1041 src_1047 des_1048 0 (arraysize_1032 src_1047) 
 in
 let main_1049 n_1050 m_1051 =
   let array1_1052 = make_array_1030 n_1050 
   in
   let array2_1053 = make_array_1030 m_1051 
   in
     if n_1050 <= m_1051 then
       bcopy_1046 array1_1052 array2_1053
     else
       () 
 in
   ()

set_target::
 let make_array_1030 n_1031 = n_1031 
 in
 let arraysize_1032 src_1033 = src_1033 
 in
 let update_1034 des_1035 i_1036 x_1037 = if 0 <= i_1036 && i_1036 < des_1035 then
                                            ()
                                          else
                                            {fail} () 
 in
 let sub_1038 src_1039 i_1040 = let u_1072 = if 0 <= i_1040 && i_1040 < src_1039 then
                                               ()
                                             else
                                               {fail} () 
                                in
                                  0 
 in
 let rec bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 =
   if i_1044 >= m_1045 then
     ()
   else
     let u_1110 = update_1034 des_1043 i_1044 (sub_1038 src_1042 i_1044) 
     in
       bcopy_aux_1041 src_1042 des_1043 (i_1044 + 1) m_1045 
 in
 let bcopy_1046 src_1047 des_1048 = bcopy_aux_1041 src_1047 des_1048 0 (arraysize_1032 src_1047) 
 in
 let main_1049 n_1050 m_1051 =
   let array1_1052 = make_array_1030 n_1050 
   in
   let array2_1053 = make_array_1030 m_1051 
   in
     if n_1050 <= m_1051 then
       bcopy_1046 array1_1052 array2_1053
     else
       () 
 in
 let main_1140 = let arg1_1138 = rand_int () 
                 in
                 let arg2_1139 = rand_int () 
                 in
                   main_1049 arg1_1138 arg2_1139 
 in
   ()

copy_poly::
 let make_array_1143 (n_1031:int) = n_1031 
 in
 let arraysize_1142 (src_1033:int) = src_1033 
 in
 let update_1141 (des_1035:int) (i_1036:int) (x_1037:int) =
   if 0 <= i_1036 && i_1036 < des_1035 then
     ()
   else
     {fail} () 
 in
 let sub_1038 (src_1039:int) (i_1040:int) =
   let u_1072 = if 0 <= i_1040 && i_1040 < src_1039 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let rec bcopy_aux_1041 (src_1042:int) (des_1043:int) (i_1044:int) (m_1045:int) =
   if i_1044 >= m_1045 then
     ()
   else
     let u_1110 = update_1141 des_1043 i_1044 (sub_1038 src_1042 i_1044) 
     in
       bcopy_aux_1041 src_1042 des_1043 (i_1044 + 1) m_1045 
 in
 let bcopy_1046 (src_1047:int) (des_1048:int) = bcopy_aux_1041 src_1047 des_1048 0 (arraysize_1142 src_1047) 
 in
 let main_1049 (n_1050:int) (m_1051:int) =
   let array1_1052 = make_array_1143 n_1050 
   in
   let array2_1053 = make_array_1143 m_1051 
   in
     if n_1050 <= m_1051 then
       bcopy_1046 array1_1052 array2_1053
     else
       () 
 in
 let main_1140 = let arg1_1138 = rand_int () 
                 in
                 let arg2_1139 = rand_int () 
                 in
                   main_1049 arg1_1138 arg2_1139 
 in
   ()

CPS::
 let make_array_1143 (n_1031:int) (k_make_array_1169:(int -> X)) = k_make_array_1169 n_1031 
 in
 let arraysize_1142 (src_1033:int) (k_arraysize_1183:(int -> X)) = k_arraysize_1183 src_1033 
 in
 let update_1141 (des_1035:int) (i_1036:int) (x_1037:int) (k_update_1203:(
   unit -> X)) =
   let k_update_1206 (b_1218:bool) = if b_1218 then
                                       k_update_1203 ()
                                     else
                                       {|fail|} () k_update_1203 
   in
     if 0 <= i_1036 then
       k_update_1206 (i_1036 < des_1035)
     else
       k_update_1206 false 
 in
 let sub_1038 (src_1039:int) (i_1040:int) (k_sub_1235:(int -> X)) =
   let k_sub_u_1252 (x_1238:unit) = k_sub_1235 0 
   in
   let k_sub_u_1241 (b_1253:bool) = if b_1253 then
                                      k_sub_u_1252 ()
                                    else
                                      {|fail|} () k_sub_u_1252 
   in
     if 0 <= i_1040 then
       k_sub_u_1241 (i_1040 < src_1039)
     else
       k_sub_u_1241 false 
 in
 let rec bcopy_aux_1041 (src_1042:int) (des_1043:int) (i_1044:int) (m_1045:int) (k_bcopy_aux_1276:(
   unit -> X)) =
   if i_1044 >= m_1045 then
     k_bcopy_aux_1276 ()
   else
     sub_1038 src_1042 i_1044
       (fun x_1302 ->
          update_1141 des_1043 i_1044 x_1302
            (fun x_1279 -> bcopy_aux_1041 src_1042 des_1043 (i_1044 + 1) m_1045 k_bcopy_aux_1276)) 
 in
 let bcopy_1046 (src_1047:int) (des_1048:int) (k_bcopy_1336:(unit -> X)) =
   arraysize_1142 src_1047 (fun x_1359 -> bcopy_aux_1041 src_1047 des_1048 0 x_1359 k_bcopy_1336) 
 in
 let main_1049 (n_1050:int) (m_1051:int) (k_main_1376:(unit -> X)) =
   make_array_1143 n_1050
     (fun x_1379 ->
        make_array_1143 m_1051
          (fun x_1392 -> (if n_1050 <= m_1051 then
                            bcopy_1046 x_1379 x_1392 k_main_1376
                          else
                            k_main_1376 ()))) 
 in
   rand_int_cps () (fun x_1423 -> rand_int_cps () (fun x_1436 -> main_1049 x_1423 x_1436 (fun x_1420 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1465
  main_1465 -> (rand_int f_1471)
  arraysize_1142 src_1033 k_arraysize_1183 -> (k_arraysize_1183 src_1033)
  bcopy_1046 src_1047 des_1048 k_bcopy_1336 -> (arraysize_1142 src_1047 (f_bcopy_1468 des_1048 src_1047 k_bcopy_1336))
  bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 k_bcopy_aux_1276 when (i_1044 >= m_1045) -> (k_bcopy_aux_1276 ())
  bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 k_bcopy_aux_1276 when (
      not (i_1044 >= m_1045)) ->
      (sub_1038 src_1042 i_1044 (f_bcopy_aux_1466 des_1043 i_1044 m_1045 src_1042 k_bcopy_aux_1276))
  f_1471 x_1423 -> (rand_int (f_1472 x_1423))
  f_1472 x_1423 x_1436 -> (main_1049 x_1423 x_1436 (f_1473 x_1423 x_1436))
  f_1473 x_1423 x_1436 x_1420 -> end
  f_bcopy_1468 des_1048 src_1047 k_bcopy_1336 x_1359 -> (bcopy_aux_1041 src_1047 des_1048 0 x_1359 k_bcopy_1336)
  f_bcopy_aux_1466 des_1043 i_1044 m_1045 src_1042 k_bcopy_aux_1276 x_1302 ->
      (update_1141 des_1043 i_1044 x_1302 (f_bcopy_aux_1467 des_1043 i_1044 m_1045 src_1042 x_1302 k_bcopy_aux_1276))
  f_bcopy_aux_1467 des_1043 i_1044 m_1045 src_1042 x_1302 k_bcopy_aux_1276 x_1279 ->
      (bcopy_aux_1041 src_1042 des_1043 (i_1044 + 1) m_1045 k_bcopy_aux_1276)
  f_main_1469 m_1051 n_1050 k_main_1376 x_1379 ->
      (make_array_1143 m_1051 (f_main_1470 m_1051 n_1050 x_1379 k_main_1376))
  f_main_1470 m_1051 n_1050 x_1379 k_main_1376 x_1392 when (n_1050 <= m_1051) -> (bcopy_1046 x_1379 x_1392 k_main_1376)
  f_main_1470 m_1051 n_1050 x_1379 k_main_1376 x_1392 when (not (n_1050 <= m_1051)) -> (k_main_1376 ())
  fail_1474 b k -> {fail} => (k ())
  fail_1475 b k -> {fail} => (k ())
  k_sub_u_1241 i_1040 src_1039 k_sub_1235 b_1253 when b_1253 -> (k_sub_u_1252 i_1040 src_1039 k_sub_1235 ())
  k_sub_u_1241 i_1040 src_1039 k_sub_1235 b_1253 when (not b_1253) ->
      (fail_1475 true (k_sub_u_1252 i_1040 src_1039 k_sub_1235))
  k_sub_u_1252 i_1040 src_1039 k_sub_1235 x_1238 -> (k_sub_1235 0)
  k_update_1206 des_1035 i_1036 x_1037 k_update_1203 b_1218 when b_1218 -> (k_update_1203 ())
  k_update_1206 des_1035 i_1036 x_1037 k_update_1203 b_1218 when (not b_1218) -> (fail_1474 true k_update_1203)
  main_1049 n_1050 m_1051 k_main_1376 -> (make_array_1143 n_1050 (f_main_1469 m_1051 n_1050 k_main_1376))
  make_array_1143 n_1031 k_make_array_1169 -> (k_make_array_1169 n_1031)
  sub_1038 src_1039 i_1040 k_sub_1235 when (0 <= i_1040) ->
      (k_sub_u_1241 i_1040 src_1039 k_sub_1235 (i_1040 < src_1039))
  sub_1038 src_1039 i_1040 k_sub_1235 when (not (0 <= i_1040)) -> (k_sub_u_1241 i_1040 src_1039 k_sub_1235 false)
  update_1141 des_1035 i_1036 x_1037 k_update_1203 when (0 <= i_1036) ->
      (k_update_1206 des_1035 i_1036 x_1037 k_update_1203 (i_1036 < des_1035))
  update_1141 des_1035 i_1036 x_1037 k_update_1203 when (not (0 <= i_1036)) ->
      (k_update_1206 des_1035 i_1036 x_1037 k_update_1203 false)
Types:
  main_1465 : X
  bcopy_aux_1041 : (int -> int -> int -> int -> (unit -> X) -> X)
  fail_1474 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1475 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1465 ... --> 
  f_1471 ... --> 
  f_1472 ... --> 
  main_1049 ... --> 
  make_array_1143 ... --> 
  f_main_1469 ... --> 
  make_array_1143 ... --> 
  f_main_1470 [1/2] ... --> 
  bcopy_1046 ... --> 
  arraysize_1142 ... --> 
  f_bcopy_1468 ... --> 
  bcopy_aux_1041 [2/2] ... --> 
  sub_1038 [2/2] ... --> 
  k_sub_u_1241 [2/2] ... --> 
  fail_1475 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(279)[1]
  program:
    main_1465  | true = ((Random.int 0) f_1471)
    arraysize_1142 src_1033 k_arraysize_1183 | true = (k_arraysize_1183 src_1033)
    bcopy_1046 src_1047 des_1048 k_bcopy_1336 | true = (arraysize_1142
                                                          src_1047
                                                          (f_bcopy_1468 des_1048
                                                                    src_1047
                                                                    k_bcopy_1336))
    bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 k_bcopy_aux_1276 | (
    i_1044 >= m_1045) = (k_bcopy_aux_1276 ())
    bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 k_bcopy_aux_1276 | (
    not (i_1044 >= m_1045)) = (sub_1038
                                 src_1042
                                 i_1044
                                 (f_bcopy_aux_1466 des_1043
                                                   i_1044
                                                   m_1045
                                                   src_1042
                                                   k_bcopy_aux_1276))
    f_1471 x_1423 | true = ((Random.int 0) (f_1472 x_1423))
    f_1472 x_1423 x_1436 | true = (main_1049 x_1423
                                             x_1436
                                             (f_1473 x_1423
                                                     x_1436))
    f_1473 x_1423 x_1436 x_1420 | true = end
    f_bcopy_1468 des_1048 src_1047 k_bcopy_1336 x_1359 | true = (bcopy_aux_1041 src_1047
                                                                    des_1048
                                                                    0
                                                                    x_1359
                                                                    k_bcopy_1336)
    f_bcopy_aux_1466 des_1043 i_1044 m_1045 src_1042 k_bcopy_aux_1276 x_1302 | true = (
    update_1141 des_1043
                i_1044
                x_1302
                (f_bcopy_aux_1467 des_1043
                                  i_1044
                                  m_1045
                                  src_1042
                                  x_1302
                                  k_bcopy_aux_1276))
    f_bcopy_aux_1467 des_1043 i_1044 m_1045 src_1042 x_1302 k_bcopy_aux_1276 x_1279 | true = (
    bcopy_aux_1041 src_1042
                   des_1043
                   (i_1044 + 1)
                   m_1045
                   k_bcopy_aux_1276)
    f_main_1469 m_1051 n_1050 k_main_1376 x_1379 | true = (make_array_1143
                                                             m_1051
                                                             (f_main_1470 m_1051
                                                                    n_1050
                                                                    x_1379
                                                                    k_main_1376))
    f_main_1470 m_1051 n_1050 x_1379 k_main_1376 x_1392 | (n_1050 <= m_1051) = (
    bcopy_1046 x_1379
               x_1392
               k_main_1376)
    f_main_1470 m_1051 n_1050 x_1379 k_main_1376 x_1392 | (not (n_1050 <= m_1051)) = (
    k_main_1376 ())
    fail_1474 b k | true = (fail ())
    fail_1475 b k | true = (fail ())
    k_sub_u_1241 i_1040 src_1039 k_sub_1235 b_1253 | b_1253 = (k_sub_u_1252 i_1040
                                                                    src_1039
                                                                    k_sub_1235
                                                                    ())
    k_sub_u_1241 i_1040 src_1039 k_sub_1235 b_1253 | (not b_1253) = (
    fail_1475 true
              (k_sub_u_1252 i_1040
                            src_1039
                            k_sub_1235))
    k_sub_u_1252 i_1040 src_1039 k_sub_1235 x_1238 | true = (k_sub_1235 0)
    k_update_1206 des_1035 i_1036 x_1037 k_update_1203 b_1218 | b_1218 = (
    k_update_1203 ())
    k_update_1206 des_1035 i_1036 x_1037 k_update_1203 b_1218 | (not b_1218) = (
    fail_1474 true
              k_update_1203)
    main_1049 n_1050 m_1051 k_main_1376 | true = (make_array_1143 n_1050
                                                                  (f_main_1469 m_1051
                                                                    n_1050
                                                                    k_main_1376))
    make_array_1143 n_1031 k_make_array_1169 | true = (k_make_array_1169 n_1031)
    sub_1038 src_1039 i_1040 k_sub_1235 | (0 <= i_1040) = (k_sub_u_1241 i_1040
                                                                    src_1039
                                                                    k_sub_1235
                                                                    (i_1040 < src_1039))
    sub_1038 src_1039 i_1040 k_sub_1235 | (not (0 <= i_1040)) = (k_sub_u_1241 i_1040
                                                                    src_1039
                                                                    k_sub_1235
                                                                    false)
    update_1141 des_1035 i_1036 x_1037 k_update_1203 | (0 <= i_1036) = (
    k_update_1206 des_1035
                  i_1036
                  x_1037
                  k_update_1203
                  (i_1036 < des_1035))
    update_1141 des_1035 i_1036 x_1037 k_update_1203 | (not (0 <= i_1036)) = (
    k_update_1206 des_1035
                  i_1036
                  x_1037
                  k_update_1203
                  false)
    main_1465:X
    arraysize_1142:int -> (int -> X) -> X
    bcopy_1046:int -> int -> (unit -> X) -> X
    bcopy_aux_1041:int -> int -> int -> int -> (unit -> X) -> X
    f_1471:int -> X
    f_1472:int -> int -> X
    f_1473:int -> int -> unit -> X
    f_bcopy_1468:int -> int -> (unit -> X) -> int -> X
    f_bcopy_aux_1466:int -> int -> int -> int -> (unit -> X) -> int -> X
    f_bcopy_aux_1467:int -> int -> int -> int -> int -> (unit -> X) -> unit -> X
    f_main_1469:int -> int -> (unit -> X) -> int -> X
    f_main_1470:int -> int -> int -> (unit -> X) -> int -> X
    fail_1474:bool -> (unit -> X) -> X
    fail_1475:bool -> (unit -> X) -> X
    k_sub_u_1241:int -> int -> (int -> X) -> bool -> X
    k_sub_u_1252:int -> int -> (int -> X) -> unit -> X
    k_update_1206:int -> int -> int -> (unit -> X) -> bool -> X
    main_1049:int -> int -> (unit -> X) -> X
    make_array_1143:int -> (int -> X) -> X
    sub_1038:int -> int -> (int -> X) -> X
    update_1141:int -> int -> int -> (unit -> X) -> X
  inlined functions: arraysize_1142,bcopy_1046,f_1471,f_1472,f_1473,f_bcopy_1468,f_bcopy_aux_1466,f_bcopy_aux_1467,f_main_1469,f_main_1470,k_sub_u_1241,k_sub_u_1252,k_update_1206,main_1049,make_array_1143,sub_1038,update_1141
  counterexample: 0:0:0:0:0:0:0:0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1471@4:0> = var2)
     [true.nop((<f_1472@7:0> = <f_1471@4:0>) && (<f_1472@7:1> = var3))
      [true.((<main_1049@9:0> = <f_1472@7:0>) && (<main_1049@9:1> = <f_1472@7:1>))
       [true.(<make_array_1143@11:0> = <main_1049@9:0>)
        [true.(<<make_array_1143@11:1>@13:0> = <make_array_1143@11:0>)
         [true.
          ((<f_main_1469@15:0> = <main_1049@9:1>) &&
           ((<f_main_1469@15:1> = <main_1049@9:0>) && (<f_main_1469@15:3> = <<make_array_1143@11:1>@13:0>)))
          [true.(<make_array_1143@17:0> = <f_main_1469@15:0>)
           [true.(<<make_array_1143@17:1>@19:0> = <make_array_1143@17:0>)
            [true.
             ((<f_main_1470@21:0> = <f_main_1469@15:0>) &&
              ((<f_main_1470@21:1> = <f_main_1469@15:1>) &&
               ((<f_main_1470@21:2> = <f_main_1469@15:3>) && (<f_main_1470@21:4> = <<make_array_1143@17:1>@19:0>))))
             [(<f_main_1470@21:1> <= <f_main_1470@21:0>).
              ((<bcopy_1046@24:0> = <f_main_1470@21:2>) && (<bcopy_1046@24:1> = <f_main_1470@21:4>))
              [true.(<arraysize_1142@26:0> = <bcopy_1046@24:0>)
               [true.(<<arraysize_1142@26:1>@28:0> = <arraysize_1142@26:0>)
                [true.
                 ((<f_bcopy_1468@30:0> = <bcopy_1046@24:1>) &&
                  ((<f_bcopy_1468@30:1> = <bcopy_1046@24:0>) && (<f_bcopy_1468@30:3> = <<arraysize_1142@26:1>@28:0>)))
                 [true.
                  ((<bcopy_aux_1041@32:0> = <f_bcopy_1468@30:1>) &&
                   ((<bcopy_aux_1041@32:1> = <f_bcopy_1468@30:0>) &&
                    ((<bcopy_aux_1041@32:2> = 0) && (<bcopy_aux_1041@32:3> = <f_bcopy_1468@30:3>))))
                  [(not (<bcopy_aux_1041@32:2> >= <bcopy_aux_1041@32:3>)).
                   ((<sub_1038@35:0> = <bcopy_aux_1041@32:0>) && (<sub_1038@35:1> = <bcopy_aux_1041@32:2>))
                   [(not (0 <= <sub_1038@35:1>)).
                    ((<k_sub_u_1241@38:0> = <sub_1038@35:1>) &&
                     ((<k_sub_u_1241@38:1> = <sub_1038@35:0>) && (<k_sub_u_1241@38:3> = false)))
                    [(not <k_sub_u_1241@38:3>).(<fail_1475@41:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(280)[2]
    horn clauses:
      P[<fail_1475@41:0>](<fail_1475@41:0>:bool)|- bot
      
      P[<k_sub_u_1241@38:3>](<k_sub_u_1241@38:0>:int,<k_sub_u_1241@38:1>:int,false:bool), <fail_1475@41:0>
      |- P[<fail_1475@41:0>](<fail_1475@41:0>:bool)
      
      P[<sub_1038@35:1>](<k_sub_u_1241@38:1>:int,<k_sub_u_1241@38:0>:int),
      ((0 > <k_sub_u_1241@38:0>) && (not <k_sub_u_1241@38:3>))
      |- P[<k_sub_u_1241@38:3>](<k_sub_u_1241@38:0>:int,<k_sub_u_1241@38:1>:int,
                                <k_sub_u_1241@38:3>:bool)
      
      P[<bcopy_aux_1041@32:3>](<sub_1038@35:0>:int,<bcopy_aux_1041@32:1>:int,<sub_1038@35:1>:int,<bcopy_aux_1041@32:3>:int),
      (<sub_1038@35:1> < <bcopy_aux_1041@32:3>) |- P[<sub_1038@35:1>](
      <sub_1038@35:0>:int,<sub_1038@35:1>:int)
      
      P[<f_bcopy_1468@30:3>](<bcopy_aux_1041@32:1>:int,<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:3>:int),
      (<bcopy_aux_1041@32:2> = 0)
      |- P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,
                                  <bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int)
      
      P[<bcopy_1046@24:1>](<f_bcopy_1468@30:1>:int,<f_bcopy_1468@30:0>:int),
      P[<<arraysize_1142@26:1>@28:0>](<f_bcopy_1468@30:1>:int,<f_bcopy_1468@30:3>:int)|- P[<f_bcopy_1468@30:3>](
      <f_bcopy_1468@30:0>:int,<f_bcopy_1468@30:1>:int,<f_bcopy_1468@30:3>:int)
      
      P[<arraysize_1142@26:0>](<arraysize_1142@26:0>:int), (<<arraysize_1142@26:1>@28:0> = <arraysize_1142@26:0>)
      |- P[<<arraysize_1142@26:1>@28:0>](<arraysize_1142@26:0>:int,<<arraysize_1142@26:1>@28:0>:int)
      
      P[<bcopy_1046@24:1>](<arraysize_1142@26:0>:int,<bcopy_1046@24:1>:int)|- P[<arraysize_1142@26:0>](
      <arraysize_1142@26:0>:int)
      
      P[<f_main_1470@21:4>](<f_main_1470@21:0>:int,<f_main_1470@21:1>:int,<bcopy_1046@24:0>:int,<bcopy_1046@24:1>:int),
      (<f_main_1470@21:1> <= <f_main_1470@21:0>) |- P[<bcopy_1046@24:1>](
      <bcopy_1046@24:0>:int,<bcopy_1046@24:1>:int)
      
      P[<f_main_1469@15:3>](<f_main_1470@21:0>:int,<f_main_1470@21:1>:int,<f_main_1470@21:2>:int),
      P[<<make_array_1143@17:1>@19:0>](<f_main_1470@21:0>:int,<f_main_1470@21:4>:int)|- P[<f_main_1470@21:4>](
      <f_main_1470@21:0>:int,<f_main_1470@21:1>:int,<f_main_1470@21:2>:int,
      <f_main_1470@21:4>:int)
      
      P[<make_array_1143@17:0>](<make_array_1143@17:0>:int), (<<make_array_1143@17:1>@19:0> = <make_array_1143@17:0>)
      |- P[<<make_array_1143@17:1>@19:0>](<make_array_1143@17:0>:int,
                                          <<make_array_1143@17:1>@19:0>:int)
      
      P[<f_main_1469@15:3>](<make_array_1143@17:0>:int,<f_main_1469@15:1>:int,<f_main_1469@15:3>:int)|- P[<make_array_1143@17:0>](
      <make_array_1143@17:0>:int)
      
      P[<main_1049@9:1>](<f_main_1469@15:1>:int,<f_main_1469@15:0>:int),
      P[<<make_array_1143@11:1>@13:0>](<f_main_1469@15:1>:int,<f_main_1469@15:3>:int)|- P[<f_main_1469@15:3>](
      <f_main_1469@15:0>:int,<f_main_1469@15:1>:int,<f_main_1469@15:3>:int)
      
      P[<make_array_1143@11:0>](<make_array_1143@11:0>:int), (<<make_array_1143@11:1>@13:0> = <make_array_1143@11:0>)
      |- P[<<make_array_1143@11:1>@13:0>](<make_array_1143@11:0>:int,
                                          <<make_array_1143@11:1>@13:0>:int)
      
      P[<main_1049@9:1>](<make_array_1143@11:0>:int,<main_1049@9:1>:int)|- P[<make_array_1143@11:0>](
      <make_array_1143@11:0>:int)
      
      P[<f_1472@7:1>](<main_1049@9:0>:int,<main_1049@9:1>:int)|- P[<main_1049@9:1>](
      <main_1049@9:0>:int,<main_1049@9:1>:int)
      
      P[<f_1471@4:0>](<f_1472@7:0>:int)|- P[<f_1472@7:1>](<f_1472@7:0>:int,
                                                          <f_1472@7:1>:int)
      
      |- P[<f_1471@4:0>](<f_1471@4:0>:int)
    call trees:
      <main_1465@1>
        <f_1471@4>
          <f_1472@7>
            <main_1049@9>
              <make_array_1143@11>
              </<make_array_1143@11:1>@13>
              <f_main_1469@15>
                <make_array_1143@17>
                </<make_array_1143@17:1>@19>
                <f_main_1470@21>
                  <bcopy_1046@24>
                    <arraysize_1142@26>
                    </<arraysize_1142@26:1>@28>
                    <f_bcopy_1468@30>
                      <bcopy_aux_1041@32>
                        <sub_1038@35>
                          <k_sub_u_1241@38>
                            <fail_1475@41>
    inlined horn clauses:
      P[<fail_1475@41:0>](<fail_1475@41:0>:bool)|- bot
      
      P[<bcopy_aux_1041@32:3>](<k_sub_u_1241@38:1>:int,var6:int,<k_sub_u_1241@38:0>:int,var7:int),
      ((0 > <k_sub_u_1241@38:0>) && ((<k_sub_u_1241@38:0> < var7) && <fail_1475@41:0>))
      |- P[<fail_1475@41:0>](<fail_1475@41:0>:bool)
      
      
      ((<bcopy_aux_1041@32:2> = 0) &&
       ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
      |- P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,
                                  <bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int)
    begin ParamSubstInfer.infer(2308)[3]
      
    end ParamSubstInfer.infer(2308)[3] (0.048992 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(2310)[3]
      
    end RefTypeInfer.elim_coeffs(2310)[3] (0.003000 sec.)
    begin GenHcSolver.solve(2577)[3]
      Horn clauses:
        P[<fail_1475@41:0>](<fail_1475@41:0>:bool)|- bot
        
        P[<bcopy_aux_1041@32:3>](<k_sub_u_1241@38:1>:int,var6:int,<k_sub_u_1241@38:0>:int,var7:int),
        ((0 > <k_sub_u_1241@38:0>) && ((<k_sub_u_1241@38:0> < var7) && <fail_1475@41:0>))
        |- P[<fail_1475@41:0>](<fail_1475@41:0>:bool)
        
        
        ((<bcopy_aux_1041@32:2> = 0) &&
         ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
        |- P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,
                                    <bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int)
      lower bounds:
        P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,<bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int) =
        ((<bcopy_aux_1041@32:2> = 0) &&
         ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
        P[<fail_1475@41:0>](<fail_1475@41:0>:bool) = false
      upper bounds:
        P[<fail_1475@41:0>](var9:bool) = true
      begin GenHcSolver.classify_pids(3737)[4]
        output:
          [<fail_1475@41:0>]
      end GenHcSolver.classify_pids(3737)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(3740)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(3741)[5]
          begin InterpProver.interpolate_fresh(3742)[6]
            begin InterpProver.interpolate_log(3743)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(3744)[8]
                begin InterpProver.interpolate_simplify(3745)[9]
                  begin InterpProver.interpolate_quick(3758)[10]
                    
                  end InterpProver.interpolate_quick(3758)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(3762)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(3762)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3745)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3744)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(3743)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(3742)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(3741)[5] (0.000000 sec.)
        output:
          P[<fail_1475@41:0>](<fail_1475@41:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(3740)[4] (0.000000 sec.)
      Horn clauses:
        P[<bcopy_aux_1041@32:3>](<k_sub_u_1241@38:1>:int,var6:int,<k_sub_u_1241@38:0>:int,var7:int),
        ((<k_sub_u_1241@38:0> < var7) && (0 > <k_sub_u_1241@38:0>)) |- bot
        
        
        ((<bcopy_aux_1041@32:2> = 0) &&
         ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
        |- P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,
                                    <bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int)
      lower bounds:
        P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,<bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int) =
        ((<bcopy_aux_1041@32:2> = 0) &&
         ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
      upper bounds:
        P[<bcopy_aux_1041@32:3>](var10:int,var11:int,var12:int,var13:int) = ((var12 >= var13) || (0 <= var12))
      begin GenHcSolver.classify_pids(5353)[4]
        output:
          [<bcopy_aux_1041@32:3>]
      end GenHcSolver.classify_pids(5353)[4] (0.000000 sec.)
      lb:((<bcopy_aux_1041@32:2> = 0) &&
          ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
      nub:(not ((<bcopy_aux_1041@32:2> >= <bcopy_aux_1041@32:3>) || (0 <= <bcopy_aux_1041@32:2>)))
      begin ApronInterface.convex_hull_interpolate(5356)[4]
        lb:((<bcopy_aux_1041@32:2> = 0) &&
            ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
        nub:(not ((<bcopy_aux_1041@32:2> >= <bcopy_aux_1041@32:3>) || (0 <= <bcopy_aux_1041@32:2>)))
        lb':((<bcopy_aux_1041@32:2> = 0) &&
             ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
        nub':(not ((<bcopy_aux_1041@32:2> >= <bcopy_aux_1041@32:3>) || (0 <= <bcopy_aux_1041@32:2>)))
        begin InterpProver.interpolate(5357)[5]
          begin InterpProver.interpolate_fresh(5358)[6]
            begin InterpProver.interpolate_log(5359)[7]
              input1: ((<bcopy_aux_1041@32:2> = 0) &&
                       ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) &&
                        (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
              input2: (not ((<bcopy_aux_1041@32:2> >= <bcopy_aux_1041@32:3>) || (0 <= <bcopy_aux_1041@32:2>)))
              begin InterpProver.interpolate_check(5360)[8]
                begin InterpProver.interpolate_simplify(5361)[9]
                  begin InterpProver.interpolate_quick(5436)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(5445)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(5446)[12]
                        begin CsisatInterface.interpolate_csisat_log(5447)[13]
                          input1: (0 = v_sep_bcopy_aux_1041_sep_32_sep_2 & v_sep_bcopy_aux_1041_sep_32_sep_3 <= v_sep_bcopy_aux_1041_sep_32_sep_1)
                          input2: ((1 + v_sep_bcopy_aux_1041_sep_32_sep_2) <= 0 & (1 + v_sep_bcopy_aux_1041_sep_32_sep_2) <= v_sep_bcopy_aux_1041_sep_32_sep_3)
                          begin CsisatInterface.interpolate_csisat_raw(5448)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(5448)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1041_sep_32_sep_2 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(5447)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1041_sep_32_sep_2 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1041_sep_32_sep_2 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(5446)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(5445)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(5436)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(5361)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(5360)[8] (0.001999 sec.)
              output: (0 <= <bcopy_aux_1041@32:2>)
            end InterpProver.interpolate_log(5359)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(5358)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(5357)[5] (0.001999 sec.)
        output:
          P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,<bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int) =
          (0 <= <bcopy_aux_1041@32:2>)
      end ApronInterface.convex_hull_interpolate(5356)[4] (0.001999 sec.)
      begin HcSolver.check_validity(5684)[4]
        input:
          P[<fail_1475@41:0>](<fail_1475@41:0>:bool)|- bot
          
          P[<bcopy_aux_1041@32:3>](<k_sub_u_1241@38:1>:int,var6:int,<k_sub_u_1241@38:0>:int,var7:int),
          ((0 > <k_sub_u_1241@38:0>) && ((<k_sub_u_1241@38:0> < var7) && <fail_1475@41:0>))
          |- P[<fail_1475@41:0>](<fail_1475@41:0>:bool)
          
          
          ((<bcopy_aux_1041@32:2> = 0) &&
           ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
          |- P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,
                                      <bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(5684)[4] (0.002000 sec.)
      solution:
        P[<fail_1475@41:0>](<fail_1475@41:0>:bool) = false
        P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,<bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int) =
        (0 <= <bcopy_aux_1041@32:2>)
    end GenHcSolver.solve(2577)[3] (0.018997 sec.)
    begin GenHcSolver.solve(5949)[3]
      Horn clauses:
        P[<fail_1475@41:0>](<fail_1475@41:0>:bool)|- bot
        
        P[<bcopy_aux_1041@32:3>](<k_sub_u_1241@38:1>:int,var6:int,<k_sub_u_1241@38:0>:int,var7:int),
        ((0 > <k_sub_u_1241@38:0>) && ((<k_sub_u_1241@38:0> < var7) && <fail_1475@41:0>))
        |- P[<fail_1475@41:0>](<fail_1475@41:0>:bool)
        
        
        ((<bcopy_aux_1041@32:2> = 0) &&
         ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
        |- P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,
                                    <bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int)
      lower bounds:
        P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,<bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int) =
        ((<bcopy_aux_1041@32:2> = 0) &&
         ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
        P[<fail_1475@41:0>](<fail_1475@41:0>:bool) = false
      upper bounds:
        P[<fail_1475@41:0>](var15:bool) = true
      begin GenHcSolver.classify_pids(7109)[4]
        output:
          [<fail_1475@41:0>]
      end GenHcSolver.classify_pids(7109)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(7112)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(7115)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(7115)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(7120)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(7120)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(7123)[5]
          begin InterpProver.interpolate_fresh(7124)[6]
            begin InterpProver.interpolate_log(7125)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(7126)[8]
                begin InterpProver.interpolate_simplify(7127)[9]
                  begin InterpProver.interpolate_quick(7142)[10]
                    
                  end InterpProver.interpolate_quick(7142)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(7146)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(7146)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(7127)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(7126)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(7125)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(7124)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(7123)[5] (0.001000 sec.)
        output:
          P[<fail_1475@41:0>](<fail_1475@41:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(7112)[4] (0.002000 sec.)
      Horn clauses:
        P[<bcopy_aux_1041@32:3>](<k_sub_u_1241@38:1>:int,var6:int,<k_sub_u_1241@38:0>:int,var7:int),
        ((<k_sub_u_1241@38:0> < var7) && (0 > <k_sub_u_1241@38:0>)) |- bot
        
        
        ((<bcopy_aux_1041@32:2> = 0) &&
         ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
        |- P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,
                                    <bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int)
      lower bounds:
        P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,<bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int) =
        ((<bcopy_aux_1041@32:2> = 0) &&
         ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
      upper bounds:
        P[<bcopy_aux_1041@32:3>](var16:int,var17:int,var18:int,var19:int) = ((var18 >= var19) || (0 <= var18))
      begin GenHcSolver.classify_pids(8744)[4]
        output:
          [<bcopy_aux_1041@32:3>]
      end GenHcSolver.classify_pids(8744)[4] (0.000000 sec.)
      lb:((<bcopy_aux_1041@32:2> = 0) &&
          ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
      nub:(not ((<bcopy_aux_1041@32:2> >= <bcopy_aux_1041@32:3>) || (0 <= <bcopy_aux_1041@32:2>)))
      begin ApronInterface.convex_hull_interpolate(8747)[4]
        lb:((<bcopy_aux_1041@32:2> = 0) &&
            ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
        nub:(not ((<bcopy_aux_1041@32:2> >= <bcopy_aux_1041@32:3>) || (0 <= <bcopy_aux_1041@32:2>)))
        begin ExtFormula.Formula.case_analysis_boolean(8778)[5]
          ts: ((<bcopy_aux_1041@32:2> = 0) &&
               ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(8778)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(8800)[5]
          ts: ((<bcopy_aux_1041@32:2> < <bcopy_aux_1041@32:3>) && (0 > <bcopy_aux_1041@32:2>))
          
        end ExtFormula.Formula.case_analysis_boolean(8800)[5] (0.000000 sec.)
        lb':(((<bcopy_aux_1041@32:3> + (-1 * <bcopy_aux_1041@32:0>)) = 0) &&
             ((<bcopy_aux_1041@32:2> = 0) && ((<bcopy_aux_1041@32:1> + (-1 * <bcopy_aux_1041@32:0>)) >= 0)))
        nub':(((-1 + (-1 * <bcopy_aux_1041@32:2>)) >= 0) &&
              (((-1 + <bcopy_aux_1041@32:3>) + (-1 * <bcopy_aux_1041@32:2>)) >= 0))
        begin InterpProver.interpolate(8806)[5]
          begin InterpProver.interpolate_fresh(8807)[6]
            begin InterpProver.interpolate_log(8808)[7]
              input1: (((<bcopy_aux_1041@32:3> + (-1 * <bcopy_aux_1041@32:0>)) = 0) &&
                       ((<bcopy_aux_1041@32:2> = 0) && ((<bcopy_aux_1041@32:1> + (-1 * <bcopy_aux_1041@32:0>)) >= 0)))
              input2: (((-1 + (-1 * <bcopy_aux_1041@32:2>)) >= 0) &&
                       (((-1 + <bcopy_aux_1041@32:3>) + (-1 * <bcopy_aux_1041@32:2>)) >= 0))
              begin InterpProver.interpolate_check(8809)[8]
                begin InterpProver.interpolate_simplify(8810)[9]
                  begin InterpProver.interpolate_quick(8893)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(8902)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(8903)[12]
                        begin CsisatInterface.interpolate_csisat_log(8904)[13]
                          input1: (0 = v_sep_bcopy_aux_1041_sep_32_sep_2 & v_sep_bcopy_aux_1041_sep_32_sep_3 <= v_sep_bcopy_aux_1041_sep_32_sep_1)
                          input2: ((1 + v_sep_bcopy_aux_1041_sep_32_sep_2) <= 0 & (1 + v_sep_bcopy_aux_1041_sep_32_sep_2) <= v_sep_bcopy_aux_1041_sep_32_sep_3)
                          begin CsisatInterface.interpolate_csisat_raw(8905)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(8905)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1041_sep_32_sep_2 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(8904)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1041_sep_32_sep_2 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1041_sep_32_sep_2 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(8903)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(8902)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(8893)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(8810)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(8809)[8] (0.002000 sec.)
              output: (0 <= <bcopy_aux_1041@32:2>)
            end InterpProver.interpolate_log(8808)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(8807)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(8806)[5] (0.002999 sec.)
        output:
          P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,<bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int) =
          (0 <= <bcopy_aux_1041@32:2>)
      end ApronInterface.convex_hull_interpolate(8747)[4] (0.002999 sec.)
      begin HcSolver.check_validity(9145)[4]
        input:
          P[<fail_1475@41:0>](<fail_1475@41:0>:bool)|- bot
          
          P[<bcopy_aux_1041@32:3>](<k_sub_u_1241@38:1>:int,var6:int,<k_sub_u_1241@38:0>:int,var7:int),
          ((0 > <k_sub_u_1241@38:0>) && ((<k_sub_u_1241@38:0> < var7) && <fail_1475@41:0>))
          |- P[<fail_1475@41:0>](<fail_1475@41:0>:bool)
          
          
          ((<bcopy_aux_1041@32:2> = 0) &&
           ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
          |- P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,
                                      <bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(9145)[4] (0.002000 sec.)
      solution:
        P[<fail_1475@41:0>](<fail_1475@41:0>:bool) = false
        P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,<bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int) =
        (0 <= <bcopy_aux_1041@32:2>)
    end GenHcSolver.solve(5949)[3] (0.020997 sec.)
    begin YhornInterface.solve(9410)[3]
      begin HcSolver.solve_ub(9411)[4]
        encoded:
          P[<fail_1475@41:0>](<fail_1475@41:0>:int)|- bot
          
          P[<bcopy_aux_1041@32:3>](<k_sub_u_1241@38:1>:int,var6:int,<k_sub_u_1241@38:0>:int,var7:int),
          ((0 > <k_sub_u_1241@38:0>) && ((<k_sub_u_1241@38:0> < var7) && (<fail_1475@41:0> = 1)))
          |- P[<fail_1475@41:0>](<fail_1475@41:0>:int)
          
          
          ((<bcopy_aux_1041@32:2> = 0) &&
           ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
          |- P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,
                                      <bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int)
        input to Yhorn:
          P[<fail_1475@41:0>](<fail_1475@41:0>:int)|- bot
          
          P[<bcopy_aux_1041@32:3>](<k_sub_u_1241@38:1>:int,var6:int,<k_sub_u_1241@38:0>:int,var7:int),
          ((<k_sub_u_1241@38:0> < var7) && ((0 > <k_sub_u_1241@38:0>) && (<fail_1475@41:0> = 1)))
          |- P[<fail_1475@41:0>](<fail_1475@41:0>:int)
          
          
          ((<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>) &&
           ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:2> = 0)))
          |- P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,
                                      <bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1475_sep_41_sep_0($10)) -> 1=0.
(($10-1=0) & (-$11>0) & ($11-$12<0)) & (v_sep_bcopy_aux_1041_sep_32_sep_3($13,$14,$11,$12)) -> v_sep_fail_1475_sep_41_sep_0($10).
($15=0) & ($16-$17<=0) & (-$16+$18=0) -> v_sep_bcopy_aux_1041_sep_32_sep_3($16,$17,$15,$18).


v_sep_bcopy_aux_1041_sep_32_sep_3: X
v_sep_fail_1475_sep_41_sep_0: X
...
v_sep_bcopy_aux_1041_sep_32_sep_3: X
v_sep_fail_1475_sep_41_sep_0: X
...
v_sep_bcopy_aux_1041_sep_32_sep_3: X
v_sep_fail_1475_sep_41_sep_0: X
...(0=0) & (v_sep_fail_1475_sep_41_sep_0($10)) -> 1=0.
(($10-1=0) & (-$11>0) & ($11-$12<0)) & (v_sep_bcopy_aux_1041_sep_32_sep_3($13,$14,$11,$12)) -> v_sep_fail_1475_sep_41_sep_0($10).
($15=0) & ($16-$17<=0) & (-$16+$18=0) -> v_sep_bcopy_aux_1041_sep_32_sep_3($16,$17,$15,$18).

        solution:
          P[<bcopy_aux_1041@32:3>]($22:int,$24:int,$26:int,$28:int) = (0 <= $26)
          P[<fail_1475@41:0>]($19:bool) = false
        
      end HcSolver.solve_ub(9411)[4] (0.011998 sec.)
      begin HcSolver.check_validity(9608)[4]
        input:
          P[<fail_1475@41:0>](<fail_1475@41:0>:bool)|- bot
          
          P[<bcopy_aux_1041@32:3>](<k_sub_u_1241@38:1>:int,var6:int,<k_sub_u_1241@38:0>:int,var7:int),
          ((0 > <k_sub_u_1241@38:0>) && ((<k_sub_u_1241@38:0> < var7) && <fail_1475@41:0>))
          |- P[<fail_1475@41:0>](<fail_1475@41:0>:bool)
          
          
          ((<bcopy_aux_1041@32:2> = 0) &&
           ((<bcopy_aux_1041@32:0> <= <bcopy_aux_1041@32:1>) && (<bcopy_aux_1041@32:3> = <bcopy_aux_1041@32:0>)))
          |- P[<bcopy_aux_1041@32:3>](<bcopy_aux_1041@32:0>:int,<bcopy_aux_1041@32:1>:int,
                                      <bcopy_aux_1041@32:2>:int,<bcopy_aux_1041@32:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(9608)[4] (0.005999 sec.)
      solution:
        P[<bcopy_aux_1041@32:3>]($22:int,$24:int,$26:int,$28:int) = (0 <= $26)
        P[<fail_1475@41:0>]($19:bool) = false
    end YhornInterface.solve(9410)[3] (0.017997 sec.)
    
  end RefTypeInfer.infer_etrs(280)[2] (0.121981 sec.)
  refinement types:
    main_1465: X
    f_1471: v1:int -> X
    f_1472: v1:int -> v2:int -> X
    main_1049: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_array_1143: v1:int -> (v2:int -> X) -> X
    f_main_1469: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    make_array_1143: v1:int -> (v2:int -> X) -> X
    f_main_1470: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    bcopy_1046: v1:int -> v2:int -> (v3:unit -> X) -> X
    arraysize_1142: v1:int -> (v2:int -> X) -> X
    f_bcopy_1468: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    bcopy_aux_1041: v1:int -> v2:int -> v3:int -> v4:{v4:int | (0 <= v3)} -> (v5:unit -> X) -> X
    sub_1038: v1:int -> v2:int -> (v3:int -> X) -> X
    k_sub_u_1241: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1475: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1473: var41:int -> var40:int -> var39:unit -> X
    f_bcopy_aux_1466: var49:int -> var48:int -> var47:int -> var46:int -> (var45:unit -> X) -> var43:int -> X
    f_bcopy_aux_1467: var58:int ->
                      var57:int -> var56:int -> var55:int -> var54:int -> (var53:unit -> X) -> var51:unit -> X
    fail_1474: var62:bool -> (var61:unit -> X) -> X
    k_sub_u_1252: var68:int -> var67:int -> (var66:int -> X) -> var64:unit -> X
    k_update_1206: var75:int -> var74:int -> var73:int -> (var72:unit -> X) -> var70:bool -> X
    update_1141: var81:int -> var80:int -> var79:int -> (var78:unit -> X) -> X
  abstraction types:
    main_1465: X
    f_1471: v1:int -> X
    f_1472: v1:int -> v2:int -> X
    main_1049: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_array_1143: var82:int -> (var83:int -> X) -> X
    f_main_1469: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    f_main_1470: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    bcopy_1046: v1:int -> v2:int -> (v3:unit -> X) -> X
    arraysize_1142: v1:int -> (v2:int -> X) -> X
    f_bcopy_1468: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    bcopy_aux_1041: v1:int -> v2:int -> v3:int -> v4:int[v4 -> (0 <= v3)] -> (v5:unit -> X) -> X
    sub_1038: v1:int -> v2:int -> (v3:int -> X) -> X
    k_sub_u_1241: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1475: v1:bool -> (v2:unit -> X) -> X
    f_1473: var41:int -> var40:int -> var39:unit -> X
    f_bcopy_aux_1466: var49:int -> var48:int -> var47:int -> var46:int -> (var45:unit -> X) -> var43:int -> X
    f_bcopy_aux_1467: var58:int ->
                      var57:int -> var56:int -> var55:int -> var54:int -> (var53:unit -> X) -> var51:unit -> X
    fail_1474: var62:bool -> (var61:unit -> X) -> X
    k_sub_u_1252: var68:int -> var67:int -> (var66:int -> X) -> var64:unit -> X
    k_update_1206: var75:int -> var74:int -> var73:int -> (var72:unit -> X) -> var70:bool -> X
    update_1141: var81:int -> var80:int -> var79:int -> (var78:unit -> X) -> X
  
end AbsTypeInfer.refine(279)[1] (0.126981 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1465
  main_1465 -> (rand_int f_1471)
  arraysize_1142 src_1033 k_arraysize_1183 -> (k_arraysize_1183 src_1033)
  bcopy_1046 src_1047 des_1048 k_bcopy_1336 -> (arraysize_1142 src_1047 (f_bcopy_1468 des_1048 src_1047 k_bcopy_1336))
  bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 k_bcopy_aux_1276 when (i_1044 >= m_1045) -> (k_bcopy_aux_1276 ())
  bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 k_bcopy_aux_1276 when (
      not (i_1044 >= m_1045)) ->
      (sub_1038 src_1042 i_1044 (f_bcopy_aux_1466 des_1043 i_1044 m_1045 src_1042 k_bcopy_aux_1276))
  f_1471 x_1423 -> (rand_int (f_1472 x_1423))
  f_1472 x_1423 x_1436 -> (main_1049 x_1423 x_1436 (f_1473 x_1423 x_1436))
  f_1473 x_1423 x_1436 x_1420 -> end
  f_bcopy_1468 des_1048 src_1047 k_bcopy_1336 x_1359 -> (bcopy_aux_1041 src_1047 des_1048 0 x_1359 k_bcopy_1336)
  f_bcopy_aux_1466 des_1043 i_1044 m_1045 src_1042 k_bcopy_aux_1276 x_1302 ->
      (update_1141 des_1043 i_1044 x_1302 (f_bcopy_aux_1467 des_1043 i_1044 m_1045 src_1042 x_1302 k_bcopy_aux_1276))
  f_bcopy_aux_1467 des_1043 i_1044 m_1045 src_1042 x_1302 k_bcopy_aux_1276 x_1279 ->
      (bcopy_aux_1041 src_1042 des_1043 (i_1044 + 1) m_1045 k_bcopy_aux_1276)
  f_main_1469 m_1051 n_1050 k_main_1376 x_1379 ->
      (make_array_1143 m_1051 (f_main_1470 m_1051 n_1050 x_1379 k_main_1376))
  f_main_1470 m_1051 n_1050 x_1379 k_main_1376 x_1392 when (n_1050 <= m_1051) -> (bcopy_1046 x_1379 x_1392 k_main_1376)
  f_main_1470 m_1051 n_1050 x_1379 k_main_1376 x_1392 when (not (n_1050 <= m_1051)) -> (k_main_1376 ())
  fail_1474 b k -> {fail} => (k ())
  fail_1475 b k -> {fail} => (k ())
  k_sub_u_1241 i_1040 src_1039 k_sub_1235 b_1253 when b_1253 -> (k_sub_u_1252 i_1040 src_1039 k_sub_1235 ())
  k_sub_u_1241 i_1040 src_1039 k_sub_1235 b_1253 when (not b_1253) ->
      (fail_1475 true (k_sub_u_1252 i_1040 src_1039 k_sub_1235))
  k_sub_u_1252 i_1040 src_1039 k_sub_1235 x_1238 -> (k_sub_1235 0)
  k_update_1206 des_1035 i_1036 x_1037 k_update_1203 b_1218 when b_1218 -> (k_update_1203 ())
  k_update_1206 des_1035 i_1036 x_1037 k_update_1203 b_1218 when (not b_1218) -> (fail_1474 true k_update_1203)
  main_1049 n_1050 m_1051 k_main_1376 -> (make_array_1143 n_1050 (f_main_1469 m_1051 n_1050 k_main_1376))
  make_array_1143 n_1031 k_make_array_1169 -> (k_make_array_1169 n_1031)
  sub_1038 src_1039 i_1040 k_sub_1235 when (0 <= i_1040) ->
      (k_sub_u_1241 i_1040 src_1039 k_sub_1235 (i_1040 < src_1039))
  sub_1038 src_1039 i_1040 k_sub_1235 when (not (0 <= i_1040)) -> (k_sub_u_1241 i_1040 src_1039 k_sub_1235 false)
  update_1141 des_1035 i_1036 x_1037 k_update_1203 when (0 <= i_1036) ->
      (k_update_1206 des_1035 i_1036 x_1037 k_update_1203 (i_1036 < des_1035))
  update_1141 des_1035 i_1036 x_1037 k_update_1203 when (not (0 <= i_1036)) ->
      (k_update_1206 des_1035 i_1036 x_1037 k_update_1203 false)
Types:
  main_1465 : X
  bcopy_aux_1041 : (int -> int -> x_3:int -> int[x_3 >= 0] -> (unit -> X) -> X)
  fail_1474 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1475 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1465 ... --> 
  f_1471 ... --> 
  f_1472 ... --> 
  main_1049 ... --> 
  make_array_1143 ... --> 
  f_main_1469 ... --> 
  make_array_1143 ... --> 
  f_main_1470 [1/2] ... --> 
  bcopy_1046 ... --> 
  arraysize_1142 ... --> 
  f_bcopy_1468 ... --> 
  bcopy_aux_1041 [2/2] ... --> 
  sub_1038 [1/2] ... --> 
  k_sub_u_1241 [2/2] ... --> 
  fail_1475 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(10427)[1]
  program:
    main_1465  | true = ((Random.int 0) f_1471)
    arraysize_1142 src_1033 k_arraysize_1183 | true = (k_arraysize_1183 src_1033)
    bcopy_1046 src_1047 des_1048 k_bcopy_1336 | true = (arraysize_1142
                                                          src_1047
                                                          (f_bcopy_1468 des_1048
                                                                    src_1047
                                                                    k_bcopy_1336))
    bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 k_bcopy_aux_1276 | (
    i_1044 >= m_1045) = (k_bcopy_aux_1276 ())
    bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 k_bcopy_aux_1276 | (
    not (i_1044 >= m_1045)) = (sub_1038
                                 src_1042
                                 i_1044
                                 (f_bcopy_aux_1466 des_1043
                                                   i_1044
                                                   m_1045
                                                   src_1042
                                                   k_bcopy_aux_1276))
    f_1471 x_1423 | true = ((Random.int 0) (f_1472 x_1423))
    f_1472 x_1423 x_1436 | true = (main_1049 x_1423
                                             x_1436
                                             (f_1473 x_1423
                                                     x_1436))
    f_1473 x_1423 x_1436 x_1420 | true = end
    f_bcopy_1468 des_1048 src_1047 k_bcopy_1336 x_1359 | true = (bcopy_aux_1041 src_1047
                                                                    des_1048
                                                                    0
                                                                    x_1359
                                                                    k_bcopy_1336)
    f_bcopy_aux_1466 des_1043 i_1044 m_1045 src_1042 k_bcopy_aux_1276 x_1302 | true = (
    update_1141 des_1043
                i_1044
                x_1302
                (f_bcopy_aux_1467 des_1043
                                  i_1044
                                  m_1045
                                  src_1042
                                  x_1302
                                  k_bcopy_aux_1276))
    f_bcopy_aux_1467 des_1043 i_1044 m_1045 src_1042 x_1302 k_bcopy_aux_1276 x_1279 | true = (
    bcopy_aux_1041 src_1042
                   des_1043
                   (i_1044 + 1)
                   m_1045
                   k_bcopy_aux_1276)
    f_main_1469 m_1051 n_1050 k_main_1376 x_1379 | true = (make_array_1143
                                                             m_1051
                                                             (f_main_1470 m_1051
                                                                    n_1050
                                                                    x_1379
                                                                    k_main_1376))
    f_main_1470 m_1051 n_1050 x_1379 k_main_1376 x_1392 | (n_1050 <= m_1051) = (
    bcopy_1046 x_1379
               x_1392
               k_main_1376)
    f_main_1470 m_1051 n_1050 x_1379 k_main_1376 x_1392 | (not (n_1050 <= m_1051)) = (
    k_main_1376 ())
    fail_1474 b k | true = (fail ())
    fail_1475 b k | true = (fail ())
    k_sub_u_1241 i_1040 src_1039 k_sub_1235 b_1253 | b_1253 = (k_sub_u_1252 i_1040
                                                                    src_1039
                                                                    k_sub_1235
                                                                    ())
    k_sub_u_1241 i_1040 src_1039 k_sub_1235 b_1253 | (not b_1253) = (
    fail_1475 true
              (k_sub_u_1252 i_1040
                            src_1039
                            k_sub_1235))
    k_sub_u_1252 i_1040 src_1039 k_sub_1235 x_1238 | true = (k_sub_1235 0)
    k_update_1206 des_1035 i_1036 x_1037 k_update_1203 b_1218 | b_1218 = (
    k_update_1203 ())
    k_update_1206 des_1035 i_1036 x_1037 k_update_1203 b_1218 | (not b_1218) = (
    fail_1474 true
              k_update_1203)
    main_1049 n_1050 m_1051 k_main_1376 | true = (make_array_1143 n_1050
                                                                  (f_main_1469 m_1051
                                                                    n_1050
                                                                    k_main_1376))
    make_array_1143 n_1031 k_make_array_1169 | true = (k_make_array_1169 n_1031)
    sub_1038 src_1039 i_1040 k_sub_1235 | (0 <= i_1040) = (k_sub_u_1241 i_1040
                                                                    src_1039
                                                                    k_sub_1235
                                                                    (i_1040 < src_1039))
    sub_1038 src_1039 i_1040 k_sub_1235 | (not (0 <= i_1040)) = (k_sub_u_1241 i_1040
                                                                    src_1039
                                                                    k_sub_1235
                                                                    false)
    update_1141 des_1035 i_1036 x_1037 k_update_1203 | (0 <= i_1036) = (
    k_update_1206 des_1035
                  i_1036
                  x_1037
                  k_update_1203
                  (i_1036 < des_1035))
    update_1141 des_1035 i_1036 x_1037 k_update_1203 | (not (0 <= i_1036)) = (
    k_update_1206 des_1035
                  i_1036
                  x_1037
                  k_update_1203
                  false)
    main_1465:X
    arraysize_1142:int -> (int -> X) -> X
    bcopy_1046:int -> int -> (unit -> X) -> X
    bcopy_aux_1041:int -> int -> int -> int -> (unit -> X) -> X
    f_1471:int -> X
    f_1472:int -> int -> X
    f_1473:int -> int -> unit -> X
    f_bcopy_1468:int -> int -> (unit -> X) -> int -> X
    f_bcopy_aux_1466:int -> int -> int -> int -> (unit -> X) -> int -> X
    f_bcopy_aux_1467:int -> int -> int -> int -> int -> (unit -> X) -> unit -> X
    f_main_1469:int -> int -> (unit -> X) -> int -> X
    f_main_1470:int -> int -> int -> (unit -> X) -> int -> X
    fail_1474:bool -> (unit -> X) -> X
    fail_1475:bool -> (unit -> X) -> X
    k_sub_u_1241:int -> int -> (int -> X) -> bool -> X
    k_sub_u_1252:int -> int -> (int -> X) -> unit -> X
    k_update_1206:int -> int -> int -> (unit -> X) -> bool -> X
    main_1049:int -> int -> (unit -> X) -> X
    make_array_1143:int -> (int -> X) -> X
    sub_1038:int -> int -> (int -> X) -> X
    update_1141:int -> int -> int -> (unit -> X) -> X
  inlined functions: arraysize_1142,bcopy_1046,f_1471,f_1472,f_1473,f_bcopy_1468,f_bcopy_aux_1466,f_bcopy_aux_1467,f_main_1469,f_main_1470,k_sub_u_1241,k_sub_u_1252,k_update_1206,main_1049,make_array_1143,sub_1038,update_1141
  counterexample: 0:0:0:0:0:0:0:0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1471@47:0> = var86)
     [true.nop((<f_1472@50:0> = <f_1471@47:0>) && (<f_1472@50:1> = var87))
      [true.((<main_1049@52:0> = <f_1472@50:0>) && (<main_1049@52:1> = <f_1472@50:1>))
       [true.(<make_array_1143@54:0> = <main_1049@52:0>)
        [true.(<<make_array_1143@54:1>@56:0> = <make_array_1143@54:0>)
         [true.
          ((<f_main_1469@58:0> = <main_1049@52:1>) &&
           ((<f_main_1469@58:1> = <main_1049@52:0>) && (<f_main_1469@58:3> = <<make_array_1143@54:1>@56:0>)))
          [true.(<make_array_1143@60:0> = <f_main_1469@58:0>)
           [true.(<<make_array_1143@60:1>@62:0> = <make_array_1143@60:0>)
            [true.
             ((<f_main_1470@64:0> = <f_main_1469@58:0>) &&
              ((<f_main_1470@64:1> = <f_main_1469@58:1>) &&
               ((<f_main_1470@64:2> = <f_main_1469@58:3>) && (<f_main_1470@64:4> = <<make_array_1143@60:1>@62:0>))))
             [(<f_main_1470@64:1> <= <f_main_1470@64:0>).
              ((<bcopy_1046@67:0> = <f_main_1470@64:2>) && (<bcopy_1046@67:1> = <f_main_1470@64:4>))
              [true.(<arraysize_1142@69:0> = <bcopy_1046@67:0>)
               [true.(<<arraysize_1142@69:1>@71:0> = <arraysize_1142@69:0>)
                [true.
                 ((<f_bcopy_1468@73:0> = <bcopy_1046@67:1>) &&
                  ((<f_bcopy_1468@73:1> = <bcopy_1046@67:0>) && (<f_bcopy_1468@73:3> = <<arraysize_1142@69:1>@71:0>)))
                 [true.
                  ((<bcopy_aux_1041@75:0> = <f_bcopy_1468@73:1>) &&
                   ((<bcopy_aux_1041@75:1> = <f_bcopy_1468@73:0>) &&
                    ((<bcopy_aux_1041@75:2> = 0) && (<bcopy_aux_1041@75:3> = <f_bcopy_1468@73:3>))))
                  [(not (<bcopy_aux_1041@75:2> >= <bcopy_aux_1041@75:3>)).
                   ((<sub_1038@78:0> = <bcopy_aux_1041@75:0>) && (<sub_1038@78:1> = <bcopy_aux_1041@75:2>))
                   [(0 <= <sub_1038@78:1>).
                    ((<k_sub_u_1241@81:0> = <sub_1038@78:1>) &&
                     ((<k_sub_u_1241@81:1> = <sub_1038@78:0>) &&
                      (<k_sub_u_1241@81:3> = (<sub_1038@78:1> < <sub_1038@78:0>))))
                    [(not <k_sub_u_1241@81:3>).(<fail_1475@84:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(10428)[2]
    horn clauses:
      P[<fail_1475@84:0>](<fail_1475@84:0>:bool)|- bot
      
      P[<k_sub_u_1241@81:3>](<k_sub_u_1241@81:0>:int,<k_sub_u_1241@81:1>:int,false:bool), <fail_1475@84:0>
      |- P[<fail_1475@84:0>](<fail_1475@84:0>:bool)
      
      P[<sub_1038@78:1>](<k_sub_u_1241@81:1>:int,<k_sub_u_1241@81:0>:int),
      ((0 <= <k_sub_u_1241@81:0>) && (<k_sub_u_1241@81:3> = (<k_sub_u_1241@81:0> < <k_sub_u_1241@81:1>)))
      |- P[<k_sub_u_1241@81:3>](<k_sub_u_1241@81:0>:int,<k_sub_u_1241@81:1>:int,
                                <k_sub_u_1241@81:3>:bool)
      
      P[<bcopy_aux_1041@75:3>](<sub_1038@78:0>:int,<bcopy_aux_1041@75:1>:int,<sub_1038@78:1>:int,<bcopy_aux_1041@75:3>:int),
      (<sub_1038@78:1> < <bcopy_aux_1041@75:3>) |- P[<sub_1038@78:1>](
      <sub_1038@78:0>:int,<sub_1038@78:1>:int)
      
      P[<f_bcopy_1468@73:3>](<bcopy_aux_1041@75:1>:int,<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:3>:int),
      (<bcopy_aux_1041@75:2> = 0)
      |- P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,
                                  <bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int)
      
      P[<bcopy_1046@67:1>](<f_bcopy_1468@73:1>:int,<f_bcopy_1468@73:0>:int),
      P[<<arraysize_1142@69:1>@71:0>](<f_bcopy_1468@73:1>:int,<f_bcopy_1468@73:3>:int)|- P[<f_bcopy_1468@73:3>](
      <f_bcopy_1468@73:0>:int,<f_bcopy_1468@73:1>:int,<f_bcopy_1468@73:3>:int)
      
      P[<arraysize_1142@69:0>](<arraysize_1142@69:0>:int), (<<arraysize_1142@69:1>@71:0> = <arraysize_1142@69:0>)
      |- P[<<arraysize_1142@69:1>@71:0>](<arraysize_1142@69:0>:int,<<arraysize_1142@69:1>@71:0>:int)
      
      P[<bcopy_1046@67:1>](<arraysize_1142@69:0>:int,<bcopy_1046@67:1>:int)|- P[<arraysize_1142@69:0>](
      <arraysize_1142@69:0>:int)
      
      P[<f_main_1470@64:4>](<f_main_1470@64:0>:int,<f_main_1470@64:1>:int,<bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int),
      (<f_main_1470@64:1> <= <f_main_1470@64:0>) |- P[<bcopy_1046@67:1>](
      <bcopy_1046@67:0>:int,<bcopy_1046@67:1>:int)
      
      P[<f_main_1469@58:3>](<f_main_1470@64:0>:int,<f_main_1470@64:1>:int,<f_main_1470@64:2>:int),
      P[<<make_array_1143@60:1>@62:0>](<f_main_1470@64:0>:int,<f_main_1470@64:4>:int)|- P[<f_main_1470@64:4>](
      <f_main_1470@64:0>:int,<f_main_1470@64:1>:int,<f_main_1470@64:2>:int,
      <f_main_1470@64:4>:int)
      
      P[<make_array_1143@60:0>](<make_array_1143@60:0>:int), (<<make_array_1143@60:1>@62:0> = <make_array_1143@60:0>)
      |- P[<<make_array_1143@60:1>@62:0>](<make_array_1143@60:0>:int,
                                          <<make_array_1143@60:1>@62:0>:int)
      
      P[<f_main_1469@58:3>](<make_array_1143@60:0>:int,<f_main_1469@58:1>:int,<f_main_1469@58:3>:int)|- P[<make_array_1143@60:0>](
      <make_array_1143@60:0>:int)
      
      P[<main_1049@52:1>](<f_main_1469@58:1>:int,<f_main_1469@58:0>:int),
      P[<<make_array_1143@54:1>@56:0>](<f_main_1469@58:1>:int,<f_main_1469@58:3>:int)|- P[<f_main_1469@58:3>](
      <f_main_1469@58:0>:int,<f_main_1469@58:1>:int,<f_main_1469@58:3>:int)
      
      P[<make_array_1143@54:0>](<make_array_1143@54:0>:int), (<<make_array_1143@54:1>@56:0> = <make_array_1143@54:0>)
      |- P[<<make_array_1143@54:1>@56:0>](<make_array_1143@54:0>:int,
                                          <<make_array_1143@54:1>@56:0>:int)
      
      P[<main_1049@52:1>](<make_array_1143@54:0>:int,<main_1049@52:1>:int)|- P[<make_array_1143@54:0>](
      <make_array_1143@54:0>:int)
      
      P[<f_1472@50:1>](<main_1049@52:0>:int,<main_1049@52:1>:int)|- P[<main_1049@52:1>](
      <main_1049@52:0>:int,<main_1049@52:1>:int)
      
      P[<f_1471@47:0>](<f_1472@50:0>:int)|- P[<f_1472@50:1>](<f_1472@50:0>:int,
                                                             <f_1472@50:1>:int)
      
      |- P[<f_1471@47:0>](<f_1471@47:0>:int)
    call trees:
      <main_1465@44>
        <f_1471@47>
          <f_1472@50>
            <main_1049@52>
              <make_array_1143@54>
              </<make_array_1143@54:1>@56>
              <f_main_1469@58>
                <make_array_1143@60>
                </<make_array_1143@60:1>@62>
                <f_main_1470@64>
                  <bcopy_1046@67>
                    <arraysize_1142@69>
                    </<arraysize_1142@69:1>@71>
                    <f_bcopy_1468@73>
                      <bcopy_aux_1041@75>
                        <sub_1038@78>
                          <k_sub_u_1241@81>
                            <fail_1475@84>
    inlined horn clauses:
      P[<fail_1475@84:0>](<fail_1475@84:0>:bool)|- bot
      
      P[<bcopy_aux_1041@75:3>](<k_sub_u_1241@81:1>:int,var90:int,<k_sub_u_1241@81:0>:int,var91:int),
      ((0 <= <k_sub_u_1241@81:0>) &&
       ((<k_sub_u_1241@81:0> < var91) && ((<k_sub_u_1241@81:0> >= <k_sub_u_1241@81:1>) && <fail_1475@84:0>)))
      |- P[<fail_1475@84:0>](<fail_1475@84:0>:bool)
      
      
      ((<bcopy_aux_1041@75:2> = 0) &&
       ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
      |- P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,
                                  <bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int)
    begin ParamSubstInfer.infer(12721)[3]
      
    end ParamSubstInfer.infer(12721)[3] (0.084987 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(12723)[3]
      
    end RefTypeInfer.elim_coeffs(12723)[3] (0.002000 sec.)
    begin GenHcSolver.solve(13079)[3]
      Horn clauses:
        P[<fail_1475@84:0>](<fail_1475@84:0>:bool)|- bot
        
        P[<bcopy_aux_1041@75:3>](<k_sub_u_1241@81:1>:int,var90:int,<k_sub_u_1241@81:0>:int,var91:int),
        ((0 <= <k_sub_u_1241@81:0>) &&
         ((<k_sub_u_1241@81:0> < var91) && ((<k_sub_u_1241@81:0> >= <k_sub_u_1241@81:1>) && <fail_1475@84:0>)))
        |- P[<fail_1475@84:0>](<fail_1475@84:0>:bool)
        
        
        ((<bcopy_aux_1041@75:2> = 0) &&
         ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
        |- P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,
                                    <bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int)
      lower bounds:
        P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,<bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int) =
        ((<bcopy_aux_1041@75:2> = 0) &&
         ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
        P[<fail_1475@84:0>](<fail_1475@84:0>:bool) = false
      upper bounds:
        P[<fail_1475@84:0>](var93:bool) = true
      begin GenHcSolver.classify_pids(14568)[4]
        output:
          [<fail_1475@84:0>]
      end GenHcSolver.classify_pids(14568)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(14571)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(14572)[5]
          begin InterpProver.interpolate_fresh(14573)[6]
            begin InterpProver.interpolate_log(14574)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(14575)[8]
                begin InterpProver.interpolate_simplify(14576)[9]
                  begin InterpProver.interpolate_quick(14589)[10]
                    
                  end InterpProver.interpolate_quick(14589)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(14593)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(14593)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(14576)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(14575)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(14574)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(14573)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(14572)[5] (0.001000 sec.)
        output:
          P[<fail_1475@84:0>](<fail_1475@84:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(14571)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_aux_1041@75:3>](<k_sub_u_1241@81:1>:int,var90:int,<k_sub_u_1241@81:0>:int,var91:int),
        ((<k_sub_u_1241@81:0> >= <k_sub_u_1241@81:1>) && ((<k_sub_u_1241@81:0> < var91) && (0 <= <k_sub_u_1241@81:0>)))
        |- bot
        
        
        ((<bcopy_aux_1041@75:2> = 0) &&
         ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
        |- P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,
                                    <bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int)
      lower bounds:
        P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,<bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int) =
        ((<bcopy_aux_1041@75:2> = 0) &&
         ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
      upper bounds:
        P[<bcopy_aux_1041@75:3>](var94:int,var95:int,var96:int,var97:int) =
        ((var96 < var94) || ((var96 >= var97) || (0 > var96)))
      begin GenHcSolver.classify_pids(16768)[4]
        output:
          [<bcopy_aux_1041@75:3>]
      end GenHcSolver.classify_pids(16768)[4] (0.000000 sec.)
      lb:((<bcopy_aux_1041@75:2> = 0) &&
          ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
      nub:(not
             ((<bcopy_aux_1041@75:2> < <bcopy_aux_1041@75:0>) ||
              ((<bcopy_aux_1041@75:2> >= <bcopy_aux_1041@75:3>) || (0 > <bcopy_aux_1041@75:2>))))
      begin ApronInterface.convex_hull_interpolate(16771)[4]
        lb:((<bcopy_aux_1041@75:2> = 0) &&
            ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
        nub:(not
               ((<bcopy_aux_1041@75:2> < <bcopy_aux_1041@75:0>) ||
                ((<bcopy_aux_1041@75:2> >= <bcopy_aux_1041@75:3>) || (0 > <bcopy_aux_1041@75:2>))))
        lb':((<bcopy_aux_1041@75:2> = 0) &&
             ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
        nub':(not
                ((<bcopy_aux_1041@75:2> < <bcopy_aux_1041@75:0>) ||
                 ((<bcopy_aux_1041@75:2> >= <bcopy_aux_1041@75:3>) || (0 > <bcopy_aux_1041@75:2>))))
        begin InterpProver.interpolate(16772)[5]
          begin InterpProver.interpolate_fresh(16773)[6]
            begin InterpProver.interpolate_log(16774)[7]
              input1: ((<bcopy_aux_1041@75:2> = 0) &&
                       ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) &&
                        (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
              input2: (not
                         ((<bcopy_aux_1041@75:2> < <bcopy_aux_1041@75:0>) ||
                          ((<bcopy_aux_1041@75:2> >= <bcopy_aux_1041@75:3>) || (0 > <bcopy_aux_1041@75:2>))))
              begin InterpProver.interpolate_check(16775)[8]
                begin InterpProver.interpolate_simplify(16776)[9]
                  begin InterpProver.interpolate_quick(16901)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(16910)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(16911)[12]
                        begin CsisatInterface.interpolate_csisat_log(16912)[13]
                          input1: (0 = v_sep_bcopy_aux_1041_sep_75_sep_2 & v_sep_bcopy_aux_1041_sep_75_sep_0 = v_sep_bcopy_aux_1041_sep_75_sep_3 & v_sep_bcopy_aux_1041_sep_75_sep_0 <= v_sep_bcopy_aux_1041_sep_75_sep_1)
                          input2: (0 <= v_sep_bcopy_aux_1041_sep_75_sep_2 & v_sep_bcopy_aux_1041_sep_75_sep_0 <= v_sep_bcopy_aux_1041_sep_75_sep_2 & (1 + v_sep_bcopy_aux_1041_sep_75_sep_2) <= v_sep_bcopy_aux_1041_sep_75_sep_3)
                          begin CsisatInterface.interpolate_csisat_raw(16913)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(16913)[14] (0.001000 sec.)
                          output: (-2*v_sep_bcopy_aux_1041_sep_75_sep_0 + 2*v_sep_bcopy_aux_1041_sep_75_sep_3) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(16912)[13] (0.001000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1041_sep_75_sep_0 + 2*v_sep_bcopy_aux_1041_sep_75_sep_3) <= 0
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1041_sep_75_sep_0 + 2*v_sep_bcopy_aux_1041_sep_75_sep_3) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(16911)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(16910)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(16901)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(16776)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(16775)[8] (0.002000 sec.)
              output: (<bcopy_aux_1041@75:3> <= <bcopy_aux_1041@75:0>)
            end InterpProver.interpolate_log(16774)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(16773)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(16772)[5] (0.002000 sec.)
        output:
          P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,<bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int) =
          (<bcopy_aux_1041@75:3> <= <bcopy_aux_1041@75:0>)
      end ApronInterface.convex_hull_interpolate(16771)[4] (0.003000 sec.)
      begin HcSolver.check_validity(17265)[4]
        input:
          P[<fail_1475@84:0>](<fail_1475@84:0>:bool)|- bot
          
          P[<bcopy_aux_1041@75:3>](<k_sub_u_1241@81:1>:int,var90:int,<k_sub_u_1241@81:0>:int,var91:int),
          ((0 <= <k_sub_u_1241@81:0>) &&
           ((<k_sub_u_1241@81:0> < var91) && ((<k_sub_u_1241@81:0> >= <k_sub_u_1241@81:1>) && <fail_1475@84:0>)))
          |- P[<fail_1475@84:0>](<fail_1475@84:0>:bool)
          
          
          ((<bcopy_aux_1041@75:2> = 0) &&
           ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
          |- P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,
                                      <bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(17265)[4] (0.002000 sec.)
      solution:
        P[<fail_1475@84:0>](<fail_1475@84:0>:bool) = false
        P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,<bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int) =
        (<bcopy_aux_1041@75:3> <= <bcopy_aux_1041@75:0>)
    end GenHcSolver.solve(13079)[3] (0.023996 sec.)
    begin GenHcSolver.solve(17664)[3]
      Horn clauses:
        P[<fail_1475@84:0>](<fail_1475@84:0>:bool)|- bot
        
        P[<bcopy_aux_1041@75:3>](<k_sub_u_1241@81:1>:int,var90:int,<k_sub_u_1241@81:0>:int,var91:int),
        ((0 <= <k_sub_u_1241@81:0>) &&
         ((<k_sub_u_1241@81:0> < var91) && ((<k_sub_u_1241@81:0> >= <k_sub_u_1241@81:1>) && <fail_1475@84:0>)))
        |- P[<fail_1475@84:0>](<fail_1475@84:0>:bool)
        
        
        ((<bcopy_aux_1041@75:2> = 0) &&
         ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
        |- P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,
                                    <bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int)
      lower bounds:
        P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,<bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int) =
        ((<bcopy_aux_1041@75:2> = 0) &&
         ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
        P[<fail_1475@84:0>](<fail_1475@84:0>:bool) = false
      upper bounds:
        P[<fail_1475@84:0>](var99:bool) = true
      begin GenHcSolver.classify_pids(19153)[4]
        output:
          [<fail_1475@84:0>]
      end GenHcSolver.classify_pids(19153)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(19156)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(19159)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(19159)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(19164)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(19164)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(19167)[5]
          begin InterpProver.interpolate_fresh(19168)[6]
            begin InterpProver.interpolate_log(19169)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(19170)[8]
                begin InterpProver.interpolate_simplify(19171)[9]
                  begin InterpProver.interpolate_quick(19186)[10]
                    
                  end InterpProver.interpolate_quick(19186)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(19190)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(19190)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(19171)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(19170)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(19169)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(19168)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(19167)[5] (0.001000 sec.)
        output:
          P[<fail_1475@84:0>](<fail_1475@84:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(19156)[4] (0.002000 sec.)
      Horn clauses:
        P[<bcopy_aux_1041@75:3>](<k_sub_u_1241@81:1>:int,var90:int,<k_sub_u_1241@81:0>:int,var91:int),
        ((<k_sub_u_1241@81:0> >= <k_sub_u_1241@81:1>) && ((<k_sub_u_1241@81:0> < var91) && (0 <= <k_sub_u_1241@81:0>)))
        |- bot
        
        
        ((<bcopy_aux_1041@75:2> = 0) &&
         ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
        |- P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,
                                    <bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int)
      lower bounds:
        P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,<bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int) =
        ((<bcopy_aux_1041@75:2> = 0) &&
         ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
      upper bounds:
        P[<bcopy_aux_1041@75:3>](var100:int,var101:int,var102:int,var103:int) =
        ((var102 < var100) || ((var102 >= var103) || (0 > var102)))
      begin GenHcSolver.classify_pids(21372)[4]
        output:
          [<bcopy_aux_1041@75:3>]
      end GenHcSolver.classify_pids(21372)[4] (0.000000 sec.)
      lb:((<bcopy_aux_1041@75:2> = 0) &&
          ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
      nub:(not
             ((<bcopy_aux_1041@75:2> < <bcopy_aux_1041@75:0>) ||
              ((<bcopy_aux_1041@75:2> >= <bcopy_aux_1041@75:3>) || (0 > <bcopy_aux_1041@75:2>))))
      begin ApronInterface.convex_hull_interpolate(21375)[4]
        lb:((<bcopy_aux_1041@75:2> = 0) &&
            ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
        nub:(not
               ((<bcopy_aux_1041@75:2> < <bcopy_aux_1041@75:0>) ||
                ((<bcopy_aux_1041@75:2> >= <bcopy_aux_1041@75:3>) || (0 > <bcopy_aux_1041@75:2>))))
        begin ExtFormula.Formula.case_analysis_boolean(21406)[5]
          ts: ((<bcopy_aux_1041@75:2> = 0) &&
               ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(21406)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(21444)[5]
          ts: ((<bcopy_aux_1041@75:2> >= <bcopy_aux_1041@75:0>) &&
               ((<bcopy_aux_1041@75:2> < <bcopy_aux_1041@75:3>) && (0 <= <bcopy_aux_1041@75:2>)))
          
        end ExtFormula.Formula.case_analysis_boolean(21444)[5] (0.000000 sec.)
        lb':(((<bcopy_aux_1041@75:3> + (-1 * <bcopy_aux_1041@75:0>)) = 0) &&
             ((<bcopy_aux_1041@75:2> = 0) && ((<bcopy_aux_1041@75:1> + (-1 * <bcopy_aux_1041@75:0>)) >= 0)))
        nub':(((<bcopy_aux_1041@75:2> + (-1 * <bcopy_aux_1041@75:0>)) >= 0) &&
              ((((-1 + <bcopy_aux_1041@75:3>) + (-1 * <bcopy_aux_1041@75:2>)) >= 0) && (<bcopy_aux_1041@75:2> >= 0)))
        begin InterpProver.interpolate(21452)[5]
          begin InterpProver.interpolate_fresh(21453)[6]
            begin InterpProver.interpolate_log(21454)[7]
              input1: (((<bcopy_aux_1041@75:3> + (-1 * <bcopy_aux_1041@75:0>)) = 0) &&
                       ((<bcopy_aux_1041@75:2> = 0) && ((<bcopy_aux_1041@75:1> + (-1 * <bcopy_aux_1041@75:0>)) >= 0)))
              input2: (((<bcopy_aux_1041@75:2> + (-1 * <bcopy_aux_1041@75:0>)) >= 0) &&
                       ((((-1 + <bcopy_aux_1041@75:3>) + (-1 * <bcopy_aux_1041@75:2>)) >= 0) &&
                        (<bcopy_aux_1041@75:2> >= 0)))
              begin InterpProver.interpolate_check(21455)[8]
                begin InterpProver.interpolate_simplify(21456)[9]
                  begin InterpProver.interpolate_quick(21587)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(21596)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(21597)[12]
                        begin CsisatInterface.interpolate_csisat_log(21598)[13]
                          input1: (0 = v_sep_bcopy_aux_1041_sep_75_sep_2 & v_sep_bcopy_aux_1041_sep_75_sep_0 = v_sep_bcopy_aux_1041_sep_75_sep_3 & v_sep_bcopy_aux_1041_sep_75_sep_0 <= v_sep_bcopy_aux_1041_sep_75_sep_1)
                          input2: (0 <= v_sep_bcopy_aux_1041_sep_75_sep_2 & v_sep_bcopy_aux_1041_sep_75_sep_0 <= v_sep_bcopy_aux_1041_sep_75_sep_2 & (1 + v_sep_bcopy_aux_1041_sep_75_sep_2) <= v_sep_bcopy_aux_1041_sep_75_sep_3)
                          begin CsisatInterface.interpolate_csisat_raw(21599)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(21599)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1041_sep_75_sep_0 + 2*v_sep_bcopy_aux_1041_sep_75_sep_3) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(21598)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1041_sep_75_sep_0 + 2*v_sep_bcopy_aux_1041_sep_75_sep_3) <= 0
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1041_sep_75_sep_0 + 2*v_sep_bcopy_aux_1041_sep_75_sep_3) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(21597)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(21596)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(21587)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(21456)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(21455)[8] (0.002999 sec.)
              output: (<bcopy_aux_1041@75:3> <= <bcopy_aux_1041@75:0>)
            end InterpProver.interpolate_log(21454)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(21453)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(21452)[5] (0.002999 sec.)
        output:
          P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,<bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int) =
          (<bcopy_aux_1041@75:3> <= <bcopy_aux_1041@75:0>)
      end ApronInterface.convex_hull_interpolate(21375)[4] (0.003999 sec.)
      begin HcSolver.check_validity(21954)[4]
        input:
          P[<fail_1475@84:0>](<fail_1475@84:0>:bool)|- bot
          
          P[<bcopy_aux_1041@75:3>](<k_sub_u_1241@81:1>:int,var90:int,<k_sub_u_1241@81:0>:int,var91:int),
          ((0 <= <k_sub_u_1241@81:0>) &&
           ((<k_sub_u_1241@81:0> < var91) && ((<k_sub_u_1241@81:0> >= <k_sub_u_1241@81:1>) && <fail_1475@84:0>)))
          |- P[<fail_1475@84:0>](<fail_1475@84:0>:bool)
          
          
          ((<bcopy_aux_1041@75:2> = 0) &&
           ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
          |- P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,
                                      <bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(21954)[4] (0.002000 sec.)
      solution:
        P[<fail_1475@84:0>](<fail_1475@84:0>:bool) = false
        P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,<bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int) =
        (<bcopy_aux_1041@75:3> <= <bcopy_aux_1041@75:0>)
    end GenHcSolver.solve(17664)[3] (0.021997 sec.)
    begin YhornInterface.solve(22353)[3]
      begin HcSolver.solve_ub(22354)[4]
        encoded:
          P[<fail_1475@84:0>](<fail_1475@84:0>:int)|- bot
          
          P[<bcopy_aux_1041@75:3>](<k_sub_u_1241@81:1>:int,var90:int,<k_sub_u_1241@81:0>:int,var91:int),
          ((0 <= <k_sub_u_1241@81:0>) &&
           ((<k_sub_u_1241@81:0> < var91) && ((<k_sub_u_1241@81:0> >= <k_sub_u_1241@81:1>) && (<fail_1475@84:0> = 1))))
          |- P[<fail_1475@84:0>](<fail_1475@84:0>:int)
          
          
          ((<bcopy_aux_1041@75:2> = 0) &&
           ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
          |- P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,
                                      <bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int)
        input to Yhorn:
          P[<fail_1475@84:0>](<fail_1475@84:0>:int)|- bot
          
          P[<bcopy_aux_1041@75:3>](<k_sub_u_1241@81:1>:int,var90:int,<k_sub_u_1241@81:0>:int,var91:int),
          ((<k_sub_u_1241@81:0> >= <k_sub_u_1241@81:1>) &&
           ((<k_sub_u_1241@81:0> < var91) && ((0 <= <k_sub_u_1241@81:0>) && (<fail_1475@84:0> = 1))))
          |- P[<fail_1475@84:0>](<fail_1475@84:0>:int)
          
          
          ((<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>) &&
           ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:2> = 0)))
          |- P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,
                                      <bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1475_sep_84_sep_0($72)) -> 1=0.
(($72-1=0) & (-$73<=0) & ($73-$74<0) & ($73-$75>=0)) & (v_sep_bcopy_aux_1041_sep_75_sep_3($75,$76,$73,$74)) -> v_sep_fail_1475_sep_84_sep_0($72).
($77=0) & ($78-$79<=0) & (-$78+$80=0) -> v_sep_bcopy_aux_1041_sep_75_sep_3($78,$79,$77,$80).


v_sep_bcopy_aux_1041_sep_75_sep_3: X
v_sep_fail_1475_sep_84_sep_0: X
...
v_sep_bcopy_aux_1041_sep_75_sep_3: X
v_sep_fail_1475_sep_84_sep_0: X
...
v_sep_bcopy_aux_1041_sep_75_sep_3: X
v_sep_fail_1475_sep_84_sep_0: X
...(0=0) & (v_sep_fail_1475_sep_84_sep_0($72)) -> 1=0.
(($72-1=0) & (-$73<=0) & ($73-$74<0) & ($73-$75>=0)) & (v_sep_bcopy_aux_1041_sep_75_sep_3($75,$76,$73,$74)) -> v_sep_fail_1475_sep_84_sep_0($72).
($77=0) & ($78-$79<=0) & (-$78+$80=0) -> v_sep_bcopy_aux_1041_sep_75_sep_3($78,$79,$77,$80).

        solution:
          P[<bcopy_aux_1041@75:3>]($84:int,$86:int,$88:int,$90:int) = ($90 <= $84)
          P[<fail_1475@84:0>]($81:bool) = false
        
      end HcSolver.solve_ub(22354)[4] (0.008998 sec.)
      begin HcSolver.check_validity(22616)[4]
        input:
          P[<fail_1475@84:0>](<fail_1475@84:0>:bool)|- bot
          
          P[<bcopy_aux_1041@75:3>](<k_sub_u_1241@81:1>:int,var90:int,<k_sub_u_1241@81:0>:int,var91:int),
          ((0 <= <k_sub_u_1241@81:0>) &&
           ((<k_sub_u_1241@81:0> < var91) && ((<k_sub_u_1241@81:0> >= <k_sub_u_1241@81:1>) && <fail_1475@84:0>)))
          |- P[<fail_1475@84:0>](<fail_1475@84:0>:bool)
          
          
          ((<bcopy_aux_1041@75:2> = 0) &&
           ((<bcopy_aux_1041@75:0> <= <bcopy_aux_1041@75:1>) && (<bcopy_aux_1041@75:3> = <bcopy_aux_1041@75:0>)))
          |- P[<bcopy_aux_1041@75:3>](<bcopy_aux_1041@75:0>:int,<bcopy_aux_1041@75:1>:int,
                                      <bcopy_aux_1041@75:2>:int,<bcopy_aux_1041@75:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(22616)[4] (0.010999 sec.)
      solution:
        P[<bcopy_aux_1041@75:3>]($84:int,$86:int,$88:int,$90:int) = ($90 <= $84)
        P[<fail_1475@84:0>]($81:bool) = false
    end YhornInterface.solve(22353)[3] (0.019997 sec.)
    
  end RefTypeInfer.infer_etrs(10428)[2] (0.167975 sec.)
  refinement types:
    main_1465: X
    f_1471: v1:int -> X
    f_1472: v1:int -> v2:int -> X
    main_1049: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_array_1143: v1:int -> (v2:int -> X) -> X
    f_main_1469: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    make_array_1143: v1:int -> (v2:int -> X) -> X
    f_main_1470: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    bcopy_1046: v1:int -> v2:int -> (v3:unit -> X) -> X
    arraysize_1142: v1:int -> (v2:int -> X) -> X
    f_bcopy_1468: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    bcopy_aux_1041: v1:int -> v2:int -> v3:int -> v4:{v4:int | (v4 <= v1)} -> (v5:unit -> X) -> X
    sub_1038: v1:int -> v2:int -> (v3:int -> X) -> X
    k_sub_u_1241: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1475: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1473: var125:int -> var124:int -> var123:unit -> X
    f_bcopy_aux_1466: var133:int -> var132:int -> var131:int -> var130:int -> (var129:unit -> X) -> var127:int -> X
    f_bcopy_aux_1467: var142:int ->
                      var141:int -> var140:int -> var139:int -> var138:int -> (var137:unit -> X) -> var135:unit -> X
    fail_1474: var146:bool -> (var145:unit -> X) -> X
    k_sub_u_1252: var152:int -> var151:int -> (var150:int -> X) -> var148:unit -> X
    k_update_1206: var159:int -> var158:int -> var157:int -> (var156:unit -> X) -> var154:bool -> X
    update_1141: var165:int -> var164:int -> var163:int -> (var162:unit -> X) -> X
  abstraction types:
    main_1465: X
    f_1471: v1:int -> X
    f_1472: v1:int -> v2:int -> X
    main_1049: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_array_1143: var166:int -> (var167:int -> X) -> X
    f_main_1469: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    f_main_1470: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    bcopy_1046: v1:int -> v2:int -> (v3:unit -> X) -> X
    arraysize_1142: v1:int -> (v2:int -> X) -> X
    f_bcopy_1468: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    bcopy_aux_1041: v1:int -> v2:int -> v3:int -> v4:int[v4 -> (v4 <= v1)] -> (v5:unit -> X) -> X
    sub_1038: v1:int -> v2:int -> (v3:int -> X) -> X
    k_sub_u_1241: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1475: v1:bool -> (v2:unit -> X) -> X
    f_1473: var125:int -> var124:int -> var123:unit -> X
    f_bcopy_aux_1466: var133:int -> var132:int -> var131:int -> var130:int -> (var129:unit -> X) -> var127:int -> X
    f_bcopy_aux_1467: var142:int ->
                      var141:int -> var140:int -> var139:int -> var138:int -> (var137:unit -> X) -> var135:unit -> X
    fail_1474: var146:bool -> (var145:unit -> X) -> X
    k_sub_u_1252: var152:int -> var151:int -> (var150:int -> X) -> var148:unit -> X
    k_update_1206: var159:int -> var158:int -> var157:int -> (var156:unit -> X) -> var154:bool -> X
    update_1141: var165:int -> var164:int -> var163:int -> (var162:unit -> X) -> X
  
end AbsTypeInfer.refine(10427)[1] (0.175973 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1465
  main_1465 -> (rand_int f_1471)
  arraysize_1142 src_1033 k_arraysize_1183 -> (k_arraysize_1183 src_1033)
  bcopy_1046 src_1047 des_1048 k_bcopy_1336 -> (arraysize_1142 src_1047 (f_bcopy_1468 des_1048 src_1047 k_bcopy_1336))
  bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 k_bcopy_aux_1276 when (i_1044 >= m_1045) -> (k_bcopy_aux_1276 ())
  bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 k_bcopy_aux_1276 when (
      not (i_1044 >= m_1045)) ->
      (sub_1038 src_1042 i_1044 (f_bcopy_aux_1466 des_1043 i_1044 m_1045 src_1042 k_bcopy_aux_1276))
  f_1471 x_1423 -> (rand_int (f_1472 x_1423))
  f_1472 x_1423 x_1436 -> (main_1049 x_1423 x_1436 (f_1473 x_1423 x_1436))
  f_1473 x_1423 x_1436 x_1420 -> end
  f_bcopy_1468 des_1048 src_1047 k_bcopy_1336 x_1359 -> (bcopy_aux_1041 src_1047 des_1048 0 x_1359 k_bcopy_1336)
  f_bcopy_aux_1466 des_1043 i_1044 m_1045 src_1042 k_bcopy_aux_1276 x_1302 ->
      (update_1141 des_1043 i_1044 x_1302 (f_bcopy_aux_1467 des_1043 i_1044 m_1045 src_1042 x_1302 k_bcopy_aux_1276))
  f_bcopy_aux_1467 des_1043 i_1044 m_1045 src_1042 x_1302 k_bcopy_aux_1276 x_1279 ->
      (bcopy_aux_1041 src_1042 des_1043 (i_1044 + 1) m_1045 k_bcopy_aux_1276)
  f_main_1469 m_1051 n_1050 k_main_1376 x_1379 ->
      (make_array_1143 m_1051 (f_main_1470 m_1051 n_1050 x_1379 k_main_1376))
  f_main_1470 m_1051 n_1050 x_1379 k_main_1376 x_1392 when (n_1050 <= m_1051) -> (bcopy_1046 x_1379 x_1392 k_main_1376)
  f_main_1470 m_1051 n_1050 x_1379 k_main_1376 x_1392 when (not (n_1050 <= m_1051)) -> (k_main_1376 ())
  fail_1474 b k -> {fail} => (k ())
  fail_1475 b k -> {fail} => (k ())
  k_sub_u_1241 i_1040 src_1039 k_sub_1235 b_1253 when b_1253 -> (k_sub_u_1252 i_1040 src_1039 k_sub_1235 ())
  k_sub_u_1241 i_1040 src_1039 k_sub_1235 b_1253 when (not b_1253) ->
      (fail_1475 true (k_sub_u_1252 i_1040 src_1039 k_sub_1235))
  k_sub_u_1252 i_1040 src_1039 k_sub_1235 x_1238 -> (k_sub_1235 0)
  k_update_1206 des_1035 i_1036 x_1037 k_update_1203 b_1218 when b_1218 -> (k_update_1203 ())
  k_update_1206 des_1035 i_1036 x_1037 k_update_1203 b_1218 when (not b_1218) -> (fail_1474 true k_update_1203)
  main_1049 n_1050 m_1051 k_main_1376 -> (make_array_1143 n_1050 (f_main_1469 m_1051 n_1050 k_main_1376))
  make_array_1143 n_1031 k_make_array_1169 -> (k_make_array_1169 n_1031)
  sub_1038 src_1039 i_1040 k_sub_1235 when (0 <= i_1040) ->
      (k_sub_u_1241 i_1040 src_1039 k_sub_1235 (i_1040 < src_1039))
  sub_1038 src_1039 i_1040 k_sub_1235 when (not (0 <= i_1040)) -> (k_sub_u_1241 i_1040 src_1039 k_sub_1235 false)
  update_1141 des_1035 i_1036 x_1037 k_update_1203 when (0 <= i_1036) ->
      (k_update_1206 des_1035 i_1036 x_1037 k_update_1203 (i_1036 < des_1035))
  update_1141 des_1035 i_1036 x_1037 k_update_1203 when (not (0 <= i_1036)) ->
      (k_update_1206 des_1035 i_1036 x_1037 k_update_1203 false)
Types:
  main_1465 : X
  bcopy_aux_1041 : (x_1:int -> int -> x_3:int -> x_4:int[x_1 >= x_4; x_3 >= 0] -> (unit -> X) -> X)
  fail_1474 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1475 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1465 ... --> 
  f_1471 ... --> 
  f_1472 ... --> 
  main_1049 ... --> 
  make_array_1143 ... --> 
  f_main_1469 ... --> 
  make_array_1143 ... --> 
  f_main_1470 [1/2] ... --> 
  bcopy_1046 ... --> 
  arraysize_1142 ... --> 
  f_bcopy_1468 ... --> 
  bcopy_aux_1041 [2/2] ... --> 
  sub_1038 [1/2] ... --> 
  k_sub_u_1241 [1/2] ... --> 
  k_sub_u_1252 ... --> 
  f_bcopy_aux_1466 ... --> 
  update_1141 [1/2] ... --> 
  k_update_1206 [2/2] ... --> 
  fail_1474 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(24100)[1]
  program:
    main_1465  | true = ((Random.int 0) f_1471)
    arraysize_1142 src_1033 k_arraysize_1183 | true = (k_arraysize_1183 src_1033)
    bcopy_1046 src_1047 des_1048 k_bcopy_1336 | true = (arraysize_1142
                                                          src_1047
                                                          (f_bcopy_1468 des_1048
                                                                    src_1047
                                                                    k_bcopy_1336))
    bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 k_bcopy_aux_1276 | (
    i_1044 >= m_1045) = (k_bcopy_aux_1276 ())
    bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 k_bcopy_aux_1276 | (
    not (i_1044 >= m_1045)) = (sub_1038
                                 src_1042
                                 i_1044
                                 (f_bcopy_aux_1466 des_1043
                                                   i_1044
                                                   m_1045
                                                   src_1042
                                                   k_bcopy_aux_1276))
    f_1471 x_1423 | true = ((Random.int 0) (f_1472 x_1423))
    f_1472 x_1423 x_1436 | true = (main_1049 x_1423
                                             x_1436
                                             (f_1473 x_1423
                                                     x_1436))
    f_1473 x_1423 x_1436 x_1420 | true = end
    f_bcopy_1468 des_1048 src_1047 k_bcopy_1336 x_1359 | true = (bcopy_aux_1041 src_1047
                                                                    des_1048
                                                                    0
                                                                    x_1359
                                                                    k_bcopy_1336)
    f_bcopy_aux_1466 des_1043 i_1044 m_1045 src_1042 k_bcopy_aux_1276 x_1302 | true = (
    update_1141 des_1043
                i_1044
                x_1302
                (f_bcopy_aux_1467 des_1043
                                  i_1044
                                  m_1045
                                  src_1042
                                  x_1302
                                  k_bcopy_aux_1276))
    f_bcopy_aux_1467 des_1043 i_1044 m_1045 src_1042 x_1302 k_bcopy_aux_1276 x_1279 | true = (
    bcopy_aux_1041 src_1042
                   des_1043
                   (i_1044 + 1)
                   m_1045
                   k_bcopy_aux_1276)
    f_main_1469 m_1051 n_1050 k_main_1376 x_1379 | true = (make_array_1143
                                                             m_1051
                                                             (f_main_1470 m_1051
                                                                    n_1050
                                                                    x_1379
                                                                    k_main_1376))
    f_main_1470 m_1051 n_1050 x_1379 k_main_1376 x_1392 | (n_1050 <= m_1051) = (
    bcopy_1046 x_1379
               x_1392
               k_main_1376)
    f_main_1470 m_1051 n_1050 x_1379 k_main_1376 x_1392 | (not (n_1050 <= m_1051)) = (
    k_main_1376 ())
    fail_1474 b k | true = (fail ())
    fail_1475 b k | true = (fail ())
    k_sub_u_1241 i_1040 src_1039 k_sub_1235 b_1253 | b_1253 = (k_sub_u_1252 i_1040
                                                                    src_1039
                                                                    k_sub_1235
                                                                    ())
    k_sub_u_1241 i_1040 src_1039 k_sub_1235 b_1253 | (not b_1253) = (
    fail_1475 true
              (k_sub_u_1252 i_1040
                            src_1039
                            k_sub_1235))
    k_sub_u_1252 i_1040 src_1039 k_sub_1235 x_1238 | true = (k_sub_1235 0)
    k_update_1206 des_1035 i_1036 x_1037 k_update_1203 b_1218 | b_1218 = (
    k_update_1203 ())
    k_update_1206 des_1035 i_1036 x_1037 k_update_1203 b_1218 | (not b_1218) = (
    fail_1474 true
              k_update_1203)
    main_1049 n_1050 m_1051 k_main_1376 | true = (make_array_1143 n_1050
                                                                  (f_main_1469 m_1051
                                                                    n_1050
                                                                    k_main_1376))
    make_array_1143 n_1031 k_make_array_1169 | true = (k_make_array_1169 n_1031)
    sub_1038 src_1039 i_1040 k_sub_1235 | (0 <= i_1040) = (k_sub_u_1241 i_1040
                                                                    src_1039
                                                                    k_sub_1235
                                                                    (i_1040 < src_1039))
    sub_1038 src_1039 i_1040 k_sub_1235 | (not (0 <= i_1040)) = (k_sub_u_1241 i_1040
                                                                    src_1039
                                                                    k_sub_1235
                                                                    false)
    update_1141 des_1035 i_1036 x_1037 k_update_1203 | (0 <= i_1036) = (
    k_update_1206 des_1035
                  i_1036
                  x_1037
                  k_update_1203
                  (i_1036 < des_1035))
    update_1141 des_1035 i_1036 x_1037 k_update_1203 | (not (0 <= i_1036)) = (
    k_update_1206 des_1035
                  i_1036
                  x_1037
                  k_update_1203
                  false)
    main_1465:X
    arraysize_1142:int -> (int -> X) -> X
    bcopy_1046:int -> int -> (unit -> X) -> X
    bcopy_aux_1041:int -> int -> int -> int -> (unit -> X) -> X
    f_1471:int -> X
    f_1472:int -> int -> X
    f_1473:int -> int -> unit -> X
    f_bcopy_1468:int -> int -> (unit -> X) -> int -> X
    f_bcopy_aux_1466:int -> int -> int -> int -> (unit -> X) -> int -> X
    f_bcopy_aux_1467:int -> int -> int -> int -> int -> (unit -> X) -> unit -> X
    f_main_1469:int -> int -> (unit -> X) -> int -> X
    f_main_1470:int -> int -> int -> (unit -> X) -> int -> X
    fail_1474:bool -> (unit -> X) -> X
    fail_1475:bool -> (unit -> X) -> X
    k_sub_u_1241:int -> int -> (int -> X) -> bool -> X
    k_sub_u_1252:int -> int -> (int -> X) -> unit -> X
    k_update_1206:int -> int -> int -> (unit -> X) -> bool -> X
    main_1049:int -> int -> (unit -> X) -> X
    make_array_1143:int -> (int -> X) -> X
    sub_1038:int -> int -> (int -> X) -> X
    update_1141:int -> int -> int -> (unit -> X) -> X
  inlined functions: arraysize_1142,bcopy_1046,f_1471,f_1472,f_1473,f_bcopy_1468,f_bcopy_aux_1466,f_bcopy_aux_1467,f_main_1469,f_main_1470,k_sub_u_1241,k_sub_u_1252,k_update_1206,main_1049,make_array_1143,sub_1038,update_1141
  counterexample: 0:0:0:0:0:0:0:0:0:0:0:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1471@90:0> = var170)
     [true.nop((<f_1472@93:0> = <f_1471@90:0>) && (<f_1472@93:1> = var171))
      [true.((<main_1049@95:0> = <f_1472@93:0>) && (<main_1049@95:1> = <f_1472@93:1>))
       [true.(<make_array_1143@97:0> = <main_1049@95:0>)
        [true.(<<make_array_1143@97:1>@99:0> = <make_array_1143@97:0>)
         [true.
          ((<f_main_1469@101:0> = <main_1049@95:1>) &&
           ((<f_main_1469@101:1> = <main_1049@95:0>) && (<f_main_1469@101:3> = <<make_array_1143@97:1>@99:0>)))
          [true.(<make_array_1143@103:0> = <f_main_1469@101:0>)
           [true.(<<make_array_1143@103:1>@105:0> = <make_array_1143@103:0>)
            [true.
             ((<f_main_1470@107:0> = <f_main_1469@101:0>) &&
              ((<f_main_1470@107:1> = <f_main_1469@101:1>) &&
               ((<f_main_1470@107:2> = <f_main_1469@101:3>) && (<f_main_1470@107:4> = <<make_array_1143@103:1>@105:0>))))
             [(<f_main_1470@107:1> <= <f_main_1470@107:0>).
              ((<bcopy_1046@110:0> = <f_main_1470@107:2>) && (<bcopy_1046@110:1> = <f_main_1470@107:4>))
              [true.(<arraysize_1142@112:0> = <bcopy_1046@110:0>)
               [true.(<<arraysize_1142@112:1>@114:0> = <arraysize_1142@112:0>)
                [true.
                 ((<f_bcopy_1468@116:0> = <bcopy_1046@110:1>) &&
                  ((<f_bcopy_1468@116:1> = <bcopy_1046@110:0>) &&
                   (<f_bcopy_1468@116:3> = <<arraysize_1142@112:1>@114:0>)))
                 [true.
                  ((<bcopy_aux_1041@118:0> = <f_bcopy_1468@116:1>) &&
                   ((<bcopy_aux_1041@118:1> = <f_bcopy_1468@116:0>) &&
                    ((<bcopy_aux_1041@118:2> = 0) && (<bcopy_aux_1041@118:3> = <f_bcopy_1468@116:3>))))
                  [(not (<bcopy_aux_1041@118:2> >= <bcopy_aux_1041@118:3>)).
                   ((<sub_1038@121:0> = <bcopy_aux_1041@118:0>) && (<sub_1038@121:1> = <bcopy_aux_1041@118:2>))
                   [(0 <= <sub_1038@121:1>).
                    ((<k_sub_u_1241@124:0> = <sub_1038@121:1>) &&
                     ((<k_sub_u_1241@124:1> = <sub_1038@121:0>) &&
                      (<k_sub_u_1241@124:3> = (<sub_1038@121:1> < <sub_1038@121:0>))))
                    [<k_sub_u_1241@124:3>.
                     ((<k_sub_u_1252@127:0> = <k_sub_u_1241@124:0>) &&
                      ((<k_sub_u_1252@127:1> = <k_sub_u_1241@124:1>) && (<k_sub_u_1252@127:3> = ())))
                     [true.(<<k_sub_u_1252@127:2>@129:0> = 0)
                      [true.(<<k_sub_u_1241@124:2>@131:0> = <<k_sub_u_1252@127:2>@129:0>)
                       [true.(<<sub_1038@121:2>@133:0> = <<k_sub_u_1241@124:2>@131:0>)
                        [true.
                         ((<f_bcopy_aux_1466@135:0> = <bcopy_aux_1041@118:1>) &&
                          ((<f_bcopy_aux_1466@135:1> = <bcopy_aux_1041@118:2>) &&
                           ((<f_bcopy_aux_1466@135:2> = <bcopy_aux_1041@118:3>) &&
                            ((<f_bcopy_aux_1466@135:3> = <bcopy_aux_1041@118:0>) &&
                             (<f_bcopy_aux_1466@135:5> = <<sub_1038@121:2>@133:0>)))))
                         [true.
                          ((<update_1141@137:0> = <f_bcopy_aux_1466@135:0>) &&
                           ((<update_1141@137:1> = <f_bcopy_aux_1466@135:1>) &&
                            (<update_1141@137:2> = <f_bcopy_aux_1466@135:5>)))
                          [(0 <= <update_1141@137:1>).
                           ((<k_update_1206@140:0> = <update_1141@137:0>) &&
                            ((<k_update_1206@140:1> = <update_1141@137:1>) &&
                             ((<k_update_1206@140:2> = <update_1141@137:2>) &&
                              (<k_update_1206@140:4> = (<update_1141@137:1> < <update_1141@137:0>)))))
                           [(not <k_update_1206@140:4>).(<fail_1474@143:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(24101)[2]
    horn clauses:
      P[<fail_1474@143:0>](<fail_1474@143:0>:bool)|- bot
      
      P[<k_update_1206@140:4>](<k_update_1206@140:0>:int,<k_update_1206@140:1>:int,<k_update_1206@140:2>:int,false:bool),
      <fail_1474@143:0> |- P[<fail_1474@143:0>](<fail_1474@143:0>:bool)
      
      P[<update_1141@137:2>](<k_update_1206@140:0>:int,<k_update_1206@140:1>:int,<k_update_1206@140:2>:int),
      ((0 <= <k_update_1206@140:1>) && (<k_update_1206@140:4> = (<k_update_1206@140:1> < <k_update_1206@140:0>)))
      |- P[<k_update_1206@140:4>](<k_update_1206@140:0>:int,<k_update_1206@140:1>:int,
                                  <k_update_1206@140:2>:int,<k_update_1206@140:4>:bool)
      
      P[<f_bcopy_aux_1466@135:5>](<update_1141@137:0>:int,<update_1141@137:1>:int,<f_bcopy_aux_1466@135:2>:int,<f_bcopy_aux_1466@135:3>:int,<update_1141@137:2>:int)|- P[<update_1141@137:2>](
      <update_1141@137:0>:int,<update_1141@137:1>:int,<update_1141@137:2>:int)
      
      P[<bcopy_aux_1041@118:3>](<f_bcopy_aux_1466@135:3>:int,<f_bcopy_aux_1466@135:0>:int,<f_bcopy_aux_1466@135:1>:int,<f_bcopy_aux_1466@135:2>:int),
      P[<<sub_1038@121:2>@133:0>](<f_bcopy_aux_1466@135:3>:int,<f_bcopy_aux_1466@135:1>:int,<f_bcopy_aux_1466@135:5>:int),
      (<f_bcopy_aux_1466@135:1> < <f_bcopy_aux_1466@135:2>)
      |- P[<f_bcopy_aux_1466@135:5>](<f_bcopy_aux_1466@135:0>:int,<f_bcopy_aux_1466@135:1>:int,
                                     <f_bcopy_aux_1466@135:2>:int,<f_bcopy_aux_1466@135:3>:int,
                                     <f_bcopy_aux_1466@135:5>:int)
      
      P[<sub_1038@121:1>](<sub_1038@121:0>:int,<sub_1038@121:1>:int),
      P[<<k_sub_u_1241@124:2>@131:0>](<sub_1038@121:1>:int,<sub_1038@121:0>:int,<<sub_1038@121:2>@133:0>:int),
      (0 <= <sub_1038@121:1>)
      |- P[<<sub_1038@121:2>@133:0>](<sub_1038@121:0>:int,<sub_1038@121:1>:int,
                                     <<sub_1038@121:2>@133:0>:int)
      
      P[<k_sub_u_1241@124:3>](<k_sub_u_1241@124:0>:int,<k_sub_u_1241@124:1>:int,true:bool),
      P[<<k_sub_u_1252@127:2>@129:0>](<k_sub_u_1241@124:0>:int,<k_sub_u_1241@124:1>:int,<<k_sub_u_1241@124:2>@131:0>:int)|- P[<<k_sub_u_1241@124:2>@131:0>](
      <k_sub_u_1241@124:0>:int,<k_sub_u_1241@124:1>:int,<<k_sub_u_1241@124:2>@131:0>:int)
      
      P[<k_sub_u_1252@127:3>](<k_sub_u_1252@127:0>:int,<k_sub_u_1252@127:1>:int,<k_sub_u_1252@127:3>:unit),
      (<<k_sub_u_1252@127:2>@129:0> = 0)
      |- P[<<k_sub_u_1252@127:2>@129:0>](<k_sub_u_1252@127:0>:int,<k_sub_u_1252@127:1>:int,
                                         <<k_sub_u_1252@127:2>@129:0>:int)
      
      P[<k_sub_u_1241@124:3>](<k_sub_u_1252@127:0>:int,<k_sub_u_1252@127:1>:int,true:bool)|- P[<k_sub_u_1252@127:3>](
      <k_sub_u_1252@127:0>:int,<k_sub_u_1252@127:1>:int,<k_sub_u_1252@127:3>:unit)
      
      P[<sub_1038@121:1>](<k_sub_u_1241@124:1>:int,<k_sub_u_1241@124:0>:int),
      ((0 <= <k_sub_u_1241@124:0>) && (<k_sub_u_1241@124:3> = (<k_sub_u_1241@124:0> < <k_sub_u_1241@124:1>)))
      |- P[<k_sub_u_1241@124:3>](<k_sub_u_1241@124:0>:int,<k_sub_u_1241@124:1>:int,
                                 <k_sub_u_1241@124:3>:bool)
      
      P[<bcopy_aux_1041@118:3>](<sub_1038@121:0>:int,<bcopy_aux_1041@118:1>:int,<sub_1038@121:1>:int,<bcopy_aux_1041@118:3>:int),
      (<sub_1038@121:1> < <bcopy_aux_1041@118:3>) |- P[<sub_1038@121:1>](
      <sub_1038@121:0>:int,<sub_1038@121:1>:int)
      
      P[<f_bcopy_1468@116:3>](<bcopy_aux_1041@118:1>:int,<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:3>:int),
      (<bcopy_aux_1041@118:2> = 0)
      |- P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,
                                   <bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int)
      
      P[<bcopy_1046@110:1>](<f_bcopy_1468@116:1>:int,<f_bcopy_1468@116:0>:int),
      P[<<arraysize_1142@112:1>@114:0>](<f_bcopy_1468@116:1>:int,<f_bcopy_1468@116:3>:int)|- P[<f_bcopy_1468@116:3>](
      <f_bcopy_1468@116:0>:int,<f_bcopy_1468@116:1>:int,<f_bcopy_1468@116:3>:int)
      
      P[<arraysize_1142@112:0>](<arraysize_1142@112:0>:int), (<<arraysize_1142@112:1>@114:0> = <arraysize_1142@112:0>)
      |- P[<<arraysize_1142@112:1>@114:0>](<arraysize_1142@112:0>:int,
                                           <<arraysize_1142@112:1>@114:0>:int)
      
      P[<bcopy_1046@110:1>](<arraysize_1142@112:0>:int,<bcopy_1046@110:1>:int)|- P[<arraysize_1142@112:0>](
      <arraysize_1142@112:0>:int)
      
      P[<f_main_1470@107:4>](<f_main_1470@107:0>:int,<f_main_1470@107:1>:int,<bcopy_1046@110:0>:int,<bcopy_1046@110:1>:int),
      (<f_main_1470@107:1> <= <f_main_1470@107:0>)
      |- P[<bcopy_1046@110:1>](<bcopy_1046@110:0>:int,<bcopy_1046@110:1>:int)
      
      P[<f_main_1469@101:3>](<f_main_1470@107:0>:int,<f_main_1470@107:1>:int,<f_main_1470@107:2>:int),
      P[<<make_array_1143@103:1>@105:0>](<f_main_1470@107:0>:int,<f_main_1470@107:4>:int)|- P[<f_main_1470@107:4>](
      <f_main_1470@107:0>:int,<f_main_1470@107:1>:int,<f_main_1470@107:2>:int,
      <f_main_1470@107:4>:int)
      
      P[<make_array_1143@103:0>](<make_array_1143@103:0>:int),
      (<<make_array_1143@103:1>@105:0> = <make_array_1143@103:0>)
      |- P[<<make_array_1143@103:1>@105:0>](<make_array_1143@103:0>:int,
                                            <<make_array_1143@103:1>@105:0>:int)
      
      P[<f_main_1469@101:3>](<make_array_1143@103:0>:int,<f_main_1469@101:1>:int,<f_main_1469@101:3>:int)|- P[<make_array_1143@103:0>](
      <make_array_1143@103:0>:int)
      
      P[<main_1049@95:1>](<f_main_1469@101:1>:int,<f_main_1469@101:0>:int),
      P[<<make_array_1143@97:1>@99:0>](<f_main_1469@101:1>:int,<f_main_1469@101:3>:int)|- P[<f_main_1469@101:3>](
      <f_main_1469@101:0>:int,<f_main_1469@101:1>:int,<f_main_1469@101:3>:int)
      
      P[<make_array_1143@97:0>](<make_array_1143@97:0>:int), (<<make_array_1143@97:1>@99:0> = <make_array_1143@97:0>)
      |- P[<<make_array_1143@97:1>@99:0>](<make_array_1143@97:0>:int,
                                          <<make_array_1143@97:1>@99:0>:int)
      
      P[<main_1049@95:1>](<make_array_1143@97:0>:int,<main_1049@95:1>:int)|- P[<make_array_1143@97:0>](
      <make_array_1143@97:0>:int)
      
      P[<f_1472@93:1>](<main_1049@95:0>:int,<main_1049@95:1>:int)|- P[<main_1049@95:1>](
      <main_1049@95:0>:int,<main_1049@95:1>:int)
      
      P[<f_1471@90:0>](<f_1472@93:0>:int)|- P[<f_1472@93:1>](<f_1472@93:0>:int,
                                                             <f_1472@93:1>:int)
      
      |- P[<f_1471@90:0>](<f_1471@90:0>:int)
    call trees:
      <main_1465@87>
        <f_1471@90>
          <f_1472@93>
            <main_1049@95>
              <make_array_1143@97>
              </<make_array_1143@97:1>@99>
              <f_main_1469@101>
                <make_array_1143@103>
                </<make_array_1143@103:1>@105>
                <f_main_1470@107>
                  <bcopy_1046@110>
                    <arraysize_1142@112>
                    </<arraysize_1142@112:1>@114>
                    <f_bcopy_1468@116>
                      <bcopy_aux_1041@118>
                        <sub_1038@121>
                          <k_sub_u_1241@124>
                            <k_sub_u_1252@127>
                            </<k_sub_u_1252@127:2>@129>
                          </<k_sub_u_1241@124:2>@131>
                        </<sub_1038@121:2>@133>
                        <f_bcopy_aux_1466@135>
                          <update_1141@137>
                            <k_update_1206@140>
                              <fail_1474@143>
    inlined horn clauses:
      P[<fail_1474@143:0>](<fail_1474@143:0>:bool)|- bot
      
      P[<bcopy_aux_1041@118:3>](var191:int,<k_update_1206@140:0>:int,<k_update_1206@140:1>:int,var190:int),
      ((<k_update_1206@140:1> >= <k_update_1206@140:0>) &&
       ((<k_update_1206@140:1> < var191) &&
        ((0 <= <k_update_1206@140:1>) && ((<k_update_1206@140:1> < var190) && <fail_1474@143:0>))))
      |- P[<fail_1474@143:0>](<fail_1474@143:0>:bool)
      
      
      ((<bcopy_aux_1041@118:2> = 0) &&
       ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
      |- P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,
                                   <bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int)
    begin ParamSubstInfer.infer(29030)[3]
      
    end ParamSubstInfer.infer(29030)[3] (0.262960 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(29032)[3]
      
    end RefTypeInfer.elim_coeffs(29032)[3] (0.001000 sec.)
    begin GenHcSolver.solve(29487)[3]
      Horn clauses:
        P[<fail_1474@143:0>](<fail_1474@143:0>:bool)|- bot
        
        P[<bcopy_aux_1041@118:3>](var191:int,<k_update_1206@140:0>:int,<k_update_1206@140:1>:int,var190:int),
        ((<k_update_1206@140:1> >= <k_update_1206@140:0>) &&
         ((<k_update_1206@140:1> < var191) &&
          ((0 <= <k_update_1206@140:1>) && ((<k_update_1206@140:1> < var190) && <fail_1474@143:0>))))
        |- P[<fail_1474@143:0>](<fail_1474@143:0>:bool)
        
        
        ((<bcopy_aux_1041@118:2> = 0) &&
         ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
        |- P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,
                                     <bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int)
      lower bounds:
        P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,<bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int) =
        ((<bcopy_aux_1041@118:2> = 0) &&
         ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
        P[<fail_1474@143:0>](<fail_1474@143:0>:bool) = false
      upper bounds:
        P[<fail_1474@143:0>](var193:bool) = true
      begin GenHcSolver.classify_pids(31591)[4]
        output:
          [<fail_1474@143:0>]
      end GenHcSolver.classify_pids(31591)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(31594)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(31595)[5]
          begin InterpProver.interpolate_fresh(31596)[6]
            begin InterpProver.interpolate_log(31597)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(31598)[8]
                begin InterpProver.interpolate_simplify(31599)[9]
                  begin InterpProver.interpolate_quick(31612)[10]
                    
                  end InterpProver.interpolate_quick(31612)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(31616)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(31616)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(31599)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(31598)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(31597)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(31596)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(31595)[5] (0.000000 sec.)
        output:
          P[<fail_1474@143:0>](<fail_1474@143:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(31594)[4] (0.000000 sec.)
      Horn clauses:
        P[<bcopy_aux_1041@118:3>](var191:int,<k_update_1206@140:0>:int,<k_update_1206@140:1>:int,var190:int),
        ((<k_update_1206@140:1> < var190) &&
         ((0 <= <k_update_1206@140:1>) &&
          ((<k_update_1206@140:1> < var191) && (<k_update_1206@140:1> >= <k_update_1206@140:0>)))) |- bot
        
        
        ((<bcopy_aux_1041@118:2> = 0) &&
         ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
        |- P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,
                                     <bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int)
      lower bounds:
        P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,<bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int) =
        ((<bcopy_aux_1041@118:2> = 0) &&
         ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
      upper bounds:
        P[<bcopy_aux_1041@118:3>](var194:int,var195:int,var196:int,var197:int) =
        ((var196 >= var197) || ((0 > var196) || ((var196 >= var194) || (var196 < var195))))
      begin GenHcSolver.classify_pids(34588)[4]
        output:
          [<bcopy_aux_1041@118:3>]
      end GenHcSolver.classify_pids(34588)[4] (0.000000 sec.)
      lb:((<bcopy_aux_1041@118:2> = 0) &&
          ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
      nub:(not
             ((<bcopy_aux_1041@118:2> >= <bcopy_aux_1041@118:3>) ||
              ((0 > <bcopy_aux_1041@118:2>) ||
               ((<bcopy_aux_1041@118:2> >= <bcopy_aux_1041@118:0>) || (<bcopy_aux_1041@118:2> < <bcopy_aux_1041@118:1>)))))
      begin ApronInterface.convex_hull_interpolate(34591)[4]
        lb:((<bcopy_aux_1041@118:2> = 0) &&
            ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
        nub:(not
               ((<bcopy_aux_1041@118:2> >= <bcopy_aux_1041@118:3>) ||
                ((0 > <bcopy_aux_1041@118:2>) ||
                 ((<bcopy_aux_1041@118:2> >= <bcopy_aux_1041@118:0>) ||
                  (<bcopy_aux_1041@118:2> < <bcopy_aux_1041@118:1>)))))
        lb':((<bcopy_aux_1041@118:2> = 0) &&
             ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
        nub':(not
                ((<bcopy_aux_1041@118:2> >= <bcopy_aux_1041@118:3>) ||
                 ((0 > <bcopy_aux_1041@118:2>) ||
                  ((<bcopy_aux_1041@118:2> >= <bcopy_aux_1041@118:0>) ||
                   (<bcopy_aux_1041@118:2> < <bcopy_aux_1041@118:1>)))))
        begin InterpProver.interpolate(34592)[5]
          begin InterpProver.interpolate_fresh(34593)[6]
            begin InterpProver.interpolate_log(34594)[7]
              input1: ((<bcopy_aux_1041@118:2> = 0) &&
                       ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) &&
                        (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
              input2: (not
                         ((<bcopy_aux_1041@118:2> >= <bcopy_aux_1041@118:3>) ||
                          ((0 > <bcopy_aux_1041@118:2>) ||
                           ((<bcopy_aux_1041@118:2> >= <bcopy_aux_1041@118:0>) ||
                            (<bcopy_aux_1041@118:2> < <bcopy_aux_1041@118:1>)))))
              begin InterpProver.interpolate_check(34595)[8]
                begin InterpProver.interpolate_simplify(34596)[9]
                  begin InterpProver.interpolate_quick(34767)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(34776)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(34777)[12]
                        begin CsisatInterface.interpolate_csisat_log(34778)[13]
                          input1: (0 = v_sep_bcopy_aux_1041_sep_118_sep_2 & v_sep_bcopy_aux_1041_sep_118_sep_0 = v_sep_bcopy_aux_1041_sep_118_sep_3 & v_sep_bcopy_aux_1041_sep_118_sep_0 <= v_sep_bcopy_aux_1041_sep_118_sep_1)
                          input2: (0 <= v_sep_bcopy_aux_1041_sep_118_sep_2 & v_sep_bcopy_aux_1041_sep_118_sep_1 <= v_sep_bcopy_aux_1041_sep_118_sep_2 & (1 + v_sep_bcopy_aux_1041_sep_118_sep_2) <= v_sep_bcopy_aux_1041_sep_118_sep_0 & (1 + v_sep_bcopy_aux_1041_sep_118_sep_2) <= v_sep_bcopy_aux_1041_sep_118_sep_3)
                          begin CsisatInterface.interpolate_csisat_raw(34779)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(34779)[14] (0.001000 sec.)
                          output: (-2*v_sep_bcopy_aux_1041_sep_118_sep_1 + 2*v_sep_bcopy_aux_1041_sep_118_sep_0) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(34778)[13] (0.001000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1041_sep_118_sep_1 + 2*v_sep_bcopy_aux_1041_sep_118_sep_0) <= 0
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1041_sep_118_sep_1 + 2*v_sep_bcopy_aux_1041_sep_118_sep_0) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(34777)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(34776)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(34767)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(34596)[9] (0.003000 sec.)
                
              end InterpProver.interpolate_check(34595)[8] (0.003000 sec.)
              output: (<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>)
            end InterpProver.interpolate_log(34594)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(34593)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(34592)[5] (0.003000 sec.)
        output:
          P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,<bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int) =
          (<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>)
      end ApronInterface.convex_hull_interpolate(34591)[4] (0.003000 sec.)
      begin HcSolver.check_validity(35179)[4]
        input:
          P[<fail_1474@143:0>](<fail_1474@143:0>:bool)|- bot
          
          P[<bcopy_aux_1041@118:3>](var191:int,<k_update_1206@140:0>:int,<k_update_1206@140:1>:int,var190:int),
          ((<k_update_1206@140:1> >= <k_update_1206@140:0>) &&
           ((<k_update_1206@140:1> < var191) &&
            ((0 <= <k_update_1206@140:1>) && ((<k_update_1206@140:1> < var190) && <fail_1474@143:0>))))
          |- P[<fail_1474@143:0>](<fail_1474@143:0>:bool)
          
          
          ((<bcopy_aux_1041@118:2> = 0) &&
           ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
          |- P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,
                                       <bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(35179)[4] (0.003999 sec.)
      solution:
        P[<fail_1474@143:0>](<fail_1474@143:0>:bool) = false
        P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,<bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int) =
        (<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>)
    end GenHcSolver.solve(29487)[3] (0.031995 sec.)
    begin GenHcSolver.solve(35607)[3]
      Horn clauses:
        P[<fail_1474@143:0>](<fail_1474@143:0>:bool)|- bot
        
        P[<bcopy_aux_1041@118:3>](var191:int,<k_update_1206@140:0>:int,<k_update_1206@140:1>:int,var190:int),
        ((<k_update_1206@140:1> >= <k_update_1206@140:0>) &&
         ((<k_update_1206@140:1> < var191) &&
          ((0 <= <k_update_1206@140:1>) && ((<k_update_1206@140:1> < var190) && <fail_1474@143:0>))))
        |- P[<fail_1474@143:0>](<fail_1474@143:0>:bool)
        
        
        ((<bcopy_aux_1041@118:2> = 0) &&
         ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
        |- P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,
                                     <bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int)
      lower bounds:
        P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,<bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int) =
        ((<bcopy_aux_1041@118:2> = 0) &&
         ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
        P[<fail_1474@143:0>](<fail_1474@143:0>:bool) = false
      upper bounds:
        P[<fail_1474@143:0>](var199:bool) = true
      begin GenHcSolver.classify_pids(37711)[4]
        output:
          [<fail_1474@143:0>]
      end GenHcSolver.classify_pids(37711)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(37714)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(37717)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(37717)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(37722)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(37722)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(37725)[5]
          begin InterpProver.interpolate_fresh(37726)[6]
            begin InterpProver.interpolate_log(37727)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(37728)[8]
                begin InterpProver.interpolate_simplify(37729)[9]
                  begin InterpProver.interpolate_quick(37744)[10]
                    
                  end InterpProver.interpolate_quick(37744)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(37748)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(37748)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(37729)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(37728)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(37727)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(37726)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(37725)[5] (0.001000 sec.)
        output:
          P[<fail_1474@143:0>](<fail_1474@143:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(37714)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_aux_1041@118:3>](var191:int,<k_update_1206@140:0>:int,<k_update_1206@140:1>:int,var190:int),
        ((<k_update_1206@140:1> < var190) &&
         ((0 <= <k_update_1206@140:1>) &&
          ((<k_update_1206@140:1> < var191) && (<k_update_1206@140:1> >= <k_update_1206@140:0>)))) |- bot
        
        
        ((<bcopy_aux_1041@118:2> = 0) &&
         ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
        |- P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,
                                     <bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int)
      lower bounds:
        P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,<bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int) =
        ((<bcopy_aux_1041@118:2> = 0) &&
         ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
      upper bounds:
        P[<bcopy_aux_1041@118:3>](var200:int,var201:int,var202:int,var203:int) =
        ((var202 >= var203) || ((0 > var202) || ((var202 >= var200) || (var202 < var201))))
      begin GenHcSolver.classify_pids(40727)[4]
        output:
          [<bcopy_aux_1041@118:3>]
      end GenHcSolver.classify_pids(40727)[4] (0.000000 sec.)
      lb:((<bcopy_aux_1041@118:2> = 0) &&
          ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
      nub:(not
             ((<bcopy_aux_1041@118:2> >= <bcopy_aux_1041@118:3>) ||
              ((0 > <bcopy_aux_1041@118:2>) ||
               ((<bcopy_aux_1041@118:2> >= <bcopy_aux_1041@118:0>) || (<bcopy_aux_1041@118:2> < <bcopy_aux_1041@118:1>)))))
      begin ApronInterface.convex_hull_interpolate(40730)[4]
        lb:((<bcopy_aux_1041@118:2> = 0) &&
            ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
        nub:(not
               ((<bcopy_aux_1041@118:2> >= <bcopy_aux_1041@118:3>) ||
                ((0 > <bcopy_aux_1041@118:2>) ||
                 ((<bcopy_aux_1041@118:2> >= <bcopy_aux_1041@118:0>) ||
                  (<bcopy_aux_1041@118:2> < <bcopy_aux_1041@118:1>)))))
        begin ExtFormula.Formula.case_analysis_boolean(40761)[5]
          ts: ((<bcopy_aux_1041@118:2> = 0) &&
               ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(40761)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(40822)[5]
          ts: ((<bcopy_aux_1041@118:2> < <bcopy_aux_1041@118:3>) &&
               ((0 <= <bcopy_aux_1041@118:2>) &&
                ((<bcopy_aux_1041@118:2> < <bcopy_aux_1041@118:0>) &&
                 (<bcopy_aux_1041@118:2> >= <bcopy_aux_1041@118:1>))))
          
        end ExtFormula.Formula.case_analysis_boolean(40822)[5] (0.001000 sec.)
        lb':(((<bcopy_aux_1041@118:3> + (-1 * <bcopy_aux_1041@118:0>)) = 0) &&
             ((<bcopy_aux_1041@118:2> = 0) && ((<bcopy_aux_1041@118:1> + (-1 * <bcopy_aux_1041@118:0>)) >= 0)))
        nub':(((<bcopy_aux_1041@118:2> + (-1 * <bcopy_aux_1041@118:1>)) >= 0) &&
              ((((-1 + <bcopy_aux_1041@118:3>) + (-1 * <bcopy_aux_1041@118:2>)) >= 0) &&
               ((<bcopy_aux_1041@118:2> >= 0) && (((-1 + (-1 * <bcopy_aux_1041@118:2>)) + <bcopy_aux_1041@118:0>) >= 0))))
        begin InterpProver.interpolate(40832)[5]
          begin InterpProver.interpolate_fresh(40833)[6]
            begin InterpProver.interpolate_log(40834)[7]
              input1: (((<bcopy_aux_1041@118:3> + (-1 * <bcopy_aux_1041@118:0>)) = 0) &&
                       ((<bcopy_aux_1041@118:2> = 0) && ((<bcopy_aux_1041@118:1> + (-1 * <bcopy_aux_1041@118:0>)) >= 0)))
              input2: (((<bcopy_aux_1041@118:2> + (-1 * <bcopy_aux_1041@118:1>)) >= 0) &&
                       ((((-1 + <bcopy_aux_1041@118:3>) + (-1 * <bcopy_aux_1041@118:2>)) >= 0) &&
                        ((<bcopy_aux_1041@118:2> >= 0) &&
                         (((-1 + (-1 * <bcopy_aux_1041@118:2>)) + <bcopy_aux_1041@118:0>) >= 0))))
              begin InterpProver.interpolate_check(40835)[8]
                begin InterpProver.interpolate_simplify(40836)[9]
                  begin InterpProver.interpolate_quick(41023)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(41032)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(41033)[12]
                        begin CsisatInterface.interpolate_csisat_log(41034)[13]
                          input1: (0 = v_sep_bcopy_aux_1041_sep_118_sep_2 & v_sep_bcopy_aux_1041_sep_118_sep_0 = v_sep_bcopy_aux_1041_sep_118_sep_3 & v_sep_bcopy_aux_1041_sep_118_sep_0 <= v_sep_bcopy_aux_1041_sep_118_sep_1)
                          input2: (0 <= v_sep_bcopy_aux_1041_sep_118_sep_2 & v_sep_bcopy_aux_1041_sep_118_sep_1 <= v_sep_bcopy_aux_1041_sep_118_sep_2 & (1 + v_sep_bcopy_aux_1041_sep_118_sep_2) <= v_sep_bcopy_aux_1041_sep_118_sep_0 & (1 + v_sep_bcopy_aux_1041_sep_118_sep_2) <= v_sep_bcopy_aux_1041_sep_118_sep_3)
                          begin CsisatInterface.interpolate_csisat_raw(41035)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(41035)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1041_sep_118_sep_1 + 2*v_sep_bcopy_aux_1041_sep_118_sep_0) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(41034)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1041_sep_118_sep_1 + 2*v_sep_bcopy_aux_1041_sep_118_sep_0) <= 0
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1041_sep_118_sep_1 + 2*v_sep_bcopy_aux_1041_sep_118_sep_0) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(41033)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(41032)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(41023)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(40836)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(40835)[8] (0.003000 sec.)
              output: (<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>)
            end InterpProver.interpolate_log(40834)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(40833)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(40832)[5] (0.003000 sec.)
        output:
          P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,<bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int) =
          (<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>)
      end ApronInterface.convex_hull_interpolate(40730)[4] (0.004999 sec.)
      begin HcSolver.check_validity(41441)[4]
        input:
          P[<fail_1474@143:0>](<fail_1474@143:0>:bool)|- bot
          
          P[<bcopy_aux_1041@118:3>](var191:int,<k_update_1206@140:0>:int,<k_update_1206@140:1>:int,var190:int),
          ((<k_update_1206@140:1> >= <k_update_1206@140:0>) &&
           ((<k_update_1206@140:1> < var191) &&
            ((0 <= <k_update_1206@140:1>) && ((<k_update_1206@140:1> < var190) && <fail_1474@143:0>))))
          |- P[<fail_1474@143:0>](<fail_1474@143:0>:bool)
          
          
          ((<bcopy_aux_1041@118:2> = 0) &&
           ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
          |- P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,
                                       <bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(41441)[4] (0.002999 sec.)
      solution:
        P[<fail_1474@143:0>](<fail_1474@143:0>:bool) = false
        P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,<bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int) =
        (<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>)
    end GenHcSolver.solve(35607)[3] (0.038994 sec.)
    begin YhornInterface.solve(41869)[3]
      begin HcSolver.solve_ub(41870)[4]
        encoded:
          P[<fail_1474@143:0>](<fail_1474@143:0>:int)|- bot
          
          P[<bcopy_aux_1041@118:3>](var191:int,<k_update_1206@140:0>:int,<k_update_1206@140:1>:int,var190:int),
          ((<k_update_1206@140:1> >= <k_update_1206@140:0>) &&
           ((<k_update_1206@140:1> < var191) &&
            ((0 <= <k_update_1206@140:1>) && ((<k_update_1206@140:1> < var190) && (<fail_1474@143:0> = 1)))))
          |- P[<fail_1474@143:0>](<fail_1474@143:0>:int)
          
          
          ((<bcopy_aux_1041@118:2> = 0) &&
           ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
          |- P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,
                                       <bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int)
        input to Yhorn:
          P[<fail_1474@143:0>](<fail_1474@143:0>:int)|- bot
          
          P[<bcopy_aux_1041@118:3>](var191:int,<k_update_1206@140:0>:int,<k_update_1206@140:1>:int,var190:int),
          ((<k_update_1206@140:1> < var190) &&
           ((0 <= <k_update_1206@140:1>) &&
            ((<k_update_1206@140:1> < var191) &&
             ((<k_update_1206@140:1> >= <k_update_1206@140:0>) && (<fail_1474@143:0> = 1)))))
          |- P[<fail_1474@143:0>](<fail_1474@143:0>:int)
          
          
          ((<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>) &&
           ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:2> = 0)))
          |- P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,
                                       <bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1474_sep_143_sep_0($137)) -> 1=0.
(($137-1=0) & ($138-$139>=0) & ($138-$140<0) & (-$138<=0) & ($138-$141<0)) & (v_sep_bcopy_aux_1041_sep_118_sep_3($140,$139,$138,$141)) -> v_sep_fail_1474_sep_143_sep_0($137).
($142=0) & ($143-$144<=0) & (-$143+$145=0) -> v_sep_bcopy_aux_1041_sep_118_sep_3($143,$144,$142,$145).


v_sep_bcopy_aux_1041_sep_118_sep_3: X
v_sep_fail_1474_sep_143_sep_0: X
...
v_sep_bcopy_aux_1041_sep_118_sep_3: X
v_sep_fail_1474_sep_143_sep_0: X
...
v_sep_bcopy_aux_1041_sep_118_sep_3: X
v_sep_fail_1474_sep_143_sep_0: X
...(0=0) & (v_sep_fail_1474_sep_143_sep_0($137)) -> 1=0.
(($137-1=0) & ($138-$139>=0) & ($138-$140<0) & (-$138<=0) & ($138-$141<0)) & (v_sep_bcopy_aux_1041_sep_118_sep_3($140,$139,$138,$141)) -> v_sep_fail_1474_sep_143_sep_0($137).
($142=0) & ($143-$144<=0) & (-$143+$145=0) -> v_sep_bcopy_aux_1041_sep_118_sep_3($143,$144,$142,$145).

        solution:
          P[<bcopy_aux_1041@118:3>]($149:int,$151:int,$153:int,$155:int) = ($149 <= $151)
          P[<fail_1474@143:0>]($146:bool) = false
        
      end HcSolver.solve_ub(41870)[4] (0.009999 sec.)
      begin HcSolver.check_validity(42199)[4]
        input:
          P[<fail_1474@143:0>](<fail_1474@143:0>:bool)|- bot
          
          P[<bcopy_aux_1041@118:3>](var191:int,<k_update_1206@140:0>:int,<k_update_1206@140:1>:int,var190:int),
          ((<k_update_1206@140:1> >= <k_update_1206@140:0>) &&
           ((<k_update_1206@140:1> < var191) &&
            ((0 <= <k_update_1206@140:1>) && ((<k_update_1206@140:1> < var190) && <fail_1474@143:0>))))
          |- P[<fail_1474@143:0>](<fail_1474@143:0>:bool)
          
          
          ((<bcopy_aux_1041@118:2> = 0) &&
           ((<bcopy_aux_1041@118:0> <= <bcopy_aux_1041@118:1>) && (<bcopy_aux_1041@118:3> = <bcopy_aux_1041@118:0>)))
          |- P[<bcopy_aux_1041@118:3>](<bcopy_aux_1041@118:0>:int,<bcopy_aux_1041@118:1>:int,
                                       <bcopy_aux_1041@118:2>:int,<bcopy_aux_1041@118:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(42199)[4] (0.009998 sec.)
      solution:
        P[<bcopy_aux_1041@118:3>]($149:int,$151:int,$153:int,$155:int) = ($149 <= $151)
        P[<fail_1474@143:0>]($146:bool) = false
    end YhornInterface.solve(41869)[3] (0.019997 sec.)
    
  end RefTypeInfer.infer_etrs(24101)[2] (0.384941 sec.)
  refinement types:
    main_1465: X
    f_1471: v1:int -> X
    f_1472: v1:int -> v2:int -> X
    main_1049: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_array_1143: v1:int -> (v2:int -> X) -> X
    f_main_1469: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    make_array_1143: v1:int -> (v2:int -> X) -> X
    f_main_1470: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    bcopy_1046: v1:int -> v2:int -> (v3:unit -> X) -> X
    arraysize_1142: v1:int -> (v2:int -> X) -> X
    f_bcopy_1468: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    bcopy_aux_1041: v1:int -> v2:int -> v3:int -> v4:{v4:int | (v1 <= v2)} -> (v5:unit -> X) -> X
    sub_1038: v1:int -> v2:int -> (v3:int -> X) -> X
    k_sub_u_1241: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_sub_u_1252: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1466: v1:int -> v2:int -> v3:int -> v4:int -> (v5:unit -> X) -> v7:int -> X
    update_1141: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_update_1206: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    fail_1474: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1473: var227:int -> var226:int -> var225:unit -> X
    f_bcopy_aux_1467: var236:int ->
                      var235:int -> var234:int -> var233:int -> var232:int -> (var231:unit -> X) -> var229:unit -> X
    fail_1475: var240:bool -> (var239:unit -> X) -> X
  abstraction types:
    main_1465: X
    f_1471: v1:int -> X
    f_1472: v1:int -> v2:int -> X
    main_1049: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_array_1143: var241:int -> (var242:int -> X) -> X
    f_main_1469: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    f_main_1470: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    bcopy_1046: v1:int -> v2:int -> (v3:unit -> X) -> X
    arraysize_1142: v1:int -> (v2:int -> X) -> X
    f_bcopy_1468: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    bcopy_aux_1041: v1:int -> v2:int -> v3:int -> v4:int[v4 -> (v1 <= v2)] -> (v5:unit -> X) -> X
    sub_1038: v1:int -> v2:int -> (v3:int -> X) -> X
    k_sub_u_1241: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_sub_u_1252: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1466: v1:int -> v2:int -> v3:int -> v4:int -> (v5:unit -> X) -> v7:int -> X
    update_1141: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_update_1206: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    fail_1474: v1:bool -> (v2:unit -> X) -> X
    f_1473: var227:int -> var226:int -> var225:unit -> X
    f_bcopy_aux_1467: var236:int ->
                      var235:int -> var234:int -> var233:int -> var232:int -> (var231:unit -> X) -> var229:unit -> X
    fail_1475: var240:bool -> (var239:unit -> X) -> X
  
end AbsTypeInfer.refine(24100)[1] (0.392940 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1465
  main_1465 -> (rand_int f_1471)
  arraysize_1142 src_1033 k_arraysize_1183 -> (k_arraysize_1183 src_1033)
  bcopy_1046 src_1047 des_1048 k_bcopy_1336 -> (arraysize_1142 src_1047 (f_bcopy_1468 des_1048 src_1047 k_bcopy_1336))
  bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 k_bcopy_aux_1276 when (i_1044 >= m_1045) -> (k_bcopy_aux_1276 ())
  bcopy_aux_1041 src_1042 des_1043 i_1044 m_1045 k_bcopy_aux_1276 when (
      not (i_1044 >= m_1045)) ->
      (sub_1038 src_1042 i_1044 (f_bcopy_aux_1466 des_1043 i_1044 m_1045 src_1042 k_bcopy_aux_1276))
  f_1471 x_1423 -> (rand_int (f_1472 x_1423))
  f_1472 x_1423 x_1436 -> (main_1049 x_1423 x_1436 (f_1473 x_1423 x_1436))
  f_1473 x_1423 x_1436 x_1420 -> end
  f_bcopy_1468 des_1048 src_1047 k_bcopy_1336 x_1359 -> (bcopy_aux_1041 src_1047 des_1048 0 x_1359 k_bcopy_1336)
  f_bcopy_aux_1466 des_1043 i_1044 m_1045 src_1042 k_bcopy_aux_1276 x_1302 ->
      (update_1141 des_1043 i_1044 x_1302 (f_bcopy_aux_1467 des_1043 i_1044 m_1045 src_1042 x_1302 k_bcopy_aux_1276))
  f_bcopy_aux_1467 des_1043 i_1044 m_1045 src_1042 x_1302 k_bcopy_aux_1276 x_1279 ->
      (bcopy_aux_1041 src_1042 des_1043 (i_1044 + 1) m_1045 k_bcopy_aux_1276)
  f_main_1469 m_1051 n_1050 k_main_1376 x_1379 ->
      (make_array_1143 m_1051 (f_main_1470 m_1051 n_1050 x_1379 k_main_1376))
  f_main_1470 m_1051 n_1050 x_1379 k_main_1376 x_1392 when (n_1050 <= m_1051) -> (bcopy_1046 x_1379 x_1392 k_main_1376)
  f_main_1470 m_1051 n_1050 x_1379 k_main_1376 x_1392 when (not (n_1050 <= m_1051)) -> (k_main_1376 ())
  fail_1474 b k -> {fail} => (k ())
  fail_1475 b k -> {fail} => (k ())
  k_sub_u_1241 i_1040 src_1039 k_sub_1235 b_1253 when b_1253 -> (k_sub_u_1252 i_1040 src_1039 k_sub_1235 ())
  k_sub_u_1241 i_1040 src_1039 k_sub_1235 b_1253 when (not b_1253) ->
      (fail_1475 true (k_sub_u_1252 i_1040 src_1039 k_sub_1235))
  k_sub_u_1252 i_1040 src_1039 k_sub_1235 x_1238 -> (k_sub_1235 0)
  k_update_1206 des_1035 i_1036 x_1037 k_update_1203 b_1218 when b_1218 -> (k_update_1203 ())
  k_update_1206 des_1035 i_1036 x_1037 k_update_1203 b_1218 when (not b_1218) -> (fail_1474 true k_update_1203)
  main_1049 n_1050 m_1051 k_main_1376 -> (make_array_1143 n_1050 (f_main_1469 m_1051 n_1050 k_main_1376))
  make_array_1143 n_1031 k_make_array_1169 -> (k_make_array_1169 n_1031)
  sub_1038 src_1039 i_1040 k_sub_1235 when (0 <= i_1040) ->
      (k_sub_u_1241 i_1040 src_1039 k_sub_1235 (i_1040 < src_1039))
  sub_1038 src_1039 i_1040 k_sub_1235 when (not (0 <= i_1040)) -> (k_sub_u_1241 i_1040 src_1039 k_sub_1235 false)
  update_1141 des_1035 i_1036 x_1037 k_update_1203 when (0 <= i_1036) ->
      (k_update_1206 des_1035 i_1036 x_1037 k_update_1203 (i_1036 < des_1035))
  update_1141 des_1035 i_1036 x_1037 k_update_1203 when (not (0 <= i_1036)) ->
      (k_update_1206 des_1035 i_1036 x_1037 k_update_1203 false)
Types:
  main_1465 : X
  bcopy_aux_1041 : (x_1:int -> x_2:int -> x_3:int -> x_4:int[x_1 <= x_2; x_1 >= x_4; x_3 >= 0] -> (unit -> X) -> X)
  fail_1474 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1475 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  bcopy_aux: (x_1:int -> (x_2:int -> (x_3:int -> ({x_4:int | (x_1 >= x_4 && x_3 >= 0) && x_1 <= x_2} -> unit))))

cycles: 3
total: 1.556 sec
  abst: 0.050 sec
  mc: 0.020 sec
  refine: 0.799 sec
    exparam: 0.397 sec
