MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi fold_right.ml

parsed::
 let rec fold_right_1030 f_1031 xs_1032 acc_1033 =
   (match xs_1032 with
      | [] -> acc_1033
      | x_1034::xs'_1035 -> f_1031 x_1034 (fold_right_1030 f_1031 xs'_1035 acc_1033)) 
 in
 let rec make_list_1036 n_1037 = if n_1037 < 0 then
                                   []
                                 else
                                   n_1037::make_list_1036 (n_1037 - 1) 
 in
 let add_1038 x_1039 y_1040 = x_1039 + y_1040 
 in
 let main_1041 n_1042 m_1043 =
   let xs_1044 = make_list_1036 n_1042 
   in
     if fold_right_1030 add_1038 xs_1044 m_1043 >= m_1043 then
       ()
     else
       {fail} () 
 in
   ()

set_target::
 let rec fold_right_1030 f_1031 xs_1032 acc_1033 =
   (match xs_1032 with
      | [] -> acc_1033
      | x_1034::xs'_1035 -> f_1031 x_1034 (fold_right_1030 f_1031 xs'_1035 acc_1033)) 
 in
 let rec make_list_1036 n_1037 = if n_1037 < 0 then
                                   []
                                 else
                                   n_1037::make_list_1036 (n_1037 - 1) 
 in
 let add_1038 x_1039 y_1040 = x_1039 + y_1040 
 in
 let main_1041 n_1042 m_1043 =
   let xs_1044 = make_list_1036 n_1042 
   in
     if fold_right_1030 add_1038 xs_1044 m_1043 >= m_1043 then
       ()
     else
       {fail} () 
 in
 let main_1099 = let arg1_1097 = rand_int () 
                 in
                 let arg2_1098 = rand_int () 
                 in
                   main_1041 arg1_1097 arg2_1098 
 in
   ()

abst_list::
 let rec fold_right_1030 (f_1031:(int -> (int -> int))) (xs_1032:(int * (int -> int))) (acc_1033:int) =
   if fst xs_1032 = 0 then
     acc_1033
   else
     if 1 <= fst xs_1032 then
       let xs'_1035 = (fst xs_1032 - 1, fun x_1104 -> (snd xs_1032) (x_1104 + 1)) 
       in
       let x_1034 = (snd xs_1032) 0 
       in
         f_1031 x_1034 (fold_right_1030 f_1031 xs'_1035 acc_1033)
     else
       _|_ 
 in
 let rec make_list_1036 (n_1037:int) =
   if n_1037 < 0 then
     (0, fun x_1137 -> _|_)
   else
     let cons_make_list_1133 (x_1131:int) (xs_1132:(int * (int -> int))) =
       (fst xs_1132 + 1, fun i_1130 -> (if i_1130 = 0 then
                                          x_1131
                                        else
                                          (snd xs_1132) (i_1130 - 1))) 
     in
       cons_make_list_1133 n_1037 (make_list_1036 (n_1037 - 1)) 
 in
 let add_1038 (x_1039:int) (y_1040:int) = x_1039 + y_1040 
 in
 let main_1041 (n_1042:int) (m_1043:int) =
   let xs_1044 = make_list_1036 n_1042 
   in
     if fold_right_1030 add_1038 xs_1044 m_1043 >= m_1043 then
       ()
     else
       {fail} () 
 in
 let main_1099 = let arg1_1097 = rand_int () 
                 in
                 let arg2_1098 = rand_int () 
                 in
                   main_1041 arg1_1097 arg2_1098 
 in
   ()

CPS::
 let rec fold_right_1030
   (f_1031:(int -> (int -> ((int -> X) -> X)))) (xs_1032:(int * (int -> ((int -> X) -> X)))) (acc_1033:int) (k_fold_right_1215:(
   int -> X)) =
   if fst xs_1032 = 0 then
     k_fold_right_1215 acc_1033
   else
     if 1 <= fst xs_1032 then
       (snd xs_1032) 0
         (fun x_1262 ->
            fold_right_1030 f_1031
              (fst xs_1032 - 1,
              fun x_1104 -> fun k_fold_right_xs'_1248 -> (snd xs_1032) (x_1104 + 1) k_fold_right_xs'_1248) acc_1033
              (fun x_1309 -> f_1031 x_1262 x_1309 k_fold_right_1215))
     else
       _|_ 
 in
 let rec make_list_1036 (n_1037:int) (k_make_list_1345:((int * (int -> ((int -> X) -> X))) -> X)) =
   if n_1037 < 0 then
     k_make_list_1345 (0, fun x_1137 -> fun k_make_list_1357 -> _|_)
   else
     let cons_make_list_1133
       (x_1131:int) (xs_1132:(int * (int -> ((int -> X) -> X)))) (k_make_list_cons_make_list_1404:(
       (int * (int -> ((int -> X) -> X))) -> X)) =
       k_make_list_cons_make_list_1404
         (fst xs_1132 + 1,
         fun i_1130 ->
           fun k_make_list_cons_make_list_1419 ->
             (if i_1130 = 0 then
                k_make_list_cons_make_list_1419 x_1131
              else
                (snd xs_1132) (i_1130 - 1) k_make_list_cons_make_list_1419)) 
     in
       make_list_1036 (n_1037 - 1) (fun x_1482 -> cons_make_list_1133 n_1037 x_1482 k_make_list_1345) 
 in
 let add_1038 (x_1039:int) (y_1040:int) (k_add_1506:(int -> X)) = k_add_1506 (x_1039 + y_1040) 
 in
 let main_1041 (n_1042:int) (m_1043:int) (k_main_1523:(unit -> X)) =
   make_list_1036 n_1042
     (fun x_1529 ->
        fold_right_1030 add_1038 x_1529 m_1043
          (fun x_1557 -> (if x_1557 >= m_1043 then
                            k_main_1523 ()
                          else
                            {|fail|} () k_main_1523))) 
 in
   rand_int_cps () (fun x_1601 -> rand_int_cps () (fun x_1614 -> main_1041 x_1601 x_1614 (fun x_1598 -> end)))

remove_pair::
 let rec fold_right_1030
   (f_1031:(int -> (int -> ((int -> X) -> X)))) (xs1_1032:int) (xs2_1032:(
   int -> ((int -> X) -> X))) (acc_1033:int) (k_fold_right_1215:(int -> X)) =
   if xs1_1032 = 0 then
     k_fold_right_1215 acc_1033
   else
     if 1 <= xs1_1032 then
       xs2_1032 0
         (fun x_1262 ->
            fold_right_1030 f_1031 (xs1_1032 - 1)
              (fun x_1104 -> fun k_fold_right_xs'_1248 -> xs2_1032 (x_1104 + 1) k_fold_right_xs'_1248) acc_1033
              (fun x_1309 -> f_1031 x_1262 x_1309 k_fold_right_1215))
     else
       _|_ 
 in
 let rec make_list_1036 (n_1037:int) (k_make_list_1345:(int -> ((int -> ((int -> X) -> X)) -> X))) =
   if n_1037 < 0 then
     k_make_list_1345 0 (fun x_1137 -> fun k_make_list_1357 -> _|_)
   else
     let cons_make_list_1133
       (x_1131:int) (xs1_1132:int) (xs2_1132:(int -> ((int -> X) -> X))) (k_make_list_cons_make_list_1404:(
       int -> ((int -> ((int -> X) -> X)) -> X))) =
       k_make_list_cons_make_list_1404 (xs1_1132 + 1)
         (fun i_1130 ->
            fun k_make_list_cons_make_list_1419 ->
              (if i_1130 = 0 then
                 k_make_list_cons_make_list_1419 x_1131
               else
                 xs2_1132 (i_1130 - 1) k_make_list_cons_make_list_1419)) 
     in
       make_list_1036 (n_1037 - 1)
         (fun x1_1482 -> fun x2_1482 -> cons_make_list_1133 n_1037 x1_1482 x2_1482 k_make_list_1345) 
 in
 let add_1038 (x_1039:int) (y_1040:int) (k_add_1506:(int -> X)) = k_add_1506 (x_1039 + y_1040) 
 in
 let main_1041 (n_1042:int) (m_1043:int) (k_main_1523:(unit -> X)) =
   make_list_1036 n_1042
     (fun x1_1529 ->
        fun x2_1529 ->
          fold_right_1030 add_1038 x1_1529 x2_1529 m_1043
            (fun x_1557 -> (if x_1557 >= m_1043 then
                              k_main_1523 ()
                            else
                              {|fail|} () k_main_1523))) 
 in
   rand_int_cps () (fun x_1601 -> rand_int_cps () (fun x_1614 -> main_1041 x_1601 x_1614 (fun x_1598 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1676
  main_1676 -> (rand_int f_1685)
  add_1038 x_1039 y_1040 k_add_1506 -> (k_add_1506 (x_1039 + y_1040))
  br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when b_1689 ->
      (xs2_1032 0 (f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032))
  br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (not b_1689) -> _|_
  cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1404 ->
      (k_make_list_cons_make_list_1404 (xs1_1132 + 1) (f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132))
  f_1685 x_1601 -> (rand_int (f_1686 x_1601))
  f_1686 x_1601 x_1614 -> (main_1041 x_1601 x_1614 (f_1687 x_1601 x_1614))
  f_1687 x_1601 x_1614 x_1598 -> end
  f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 when (
      i_1130 = 0) -> (k_make_list_cons_make_list_1419 x_1131)
  f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 when (
      not (i_1130 = 0)) -> (xs2_1132 (i_1130 - 1) k_make_list_cons_make_list_1419)
  f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032 x_1262 ->
      (fold_right_1030 f_1031 (xs1_1032 - 1) (f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032) acc_1033
        (f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215))
  f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032 x_1104 k_fold_right_xs'_1248 ->
      (xs2_1032 (x_1104 + 1) k_fold_right_xs'_1248)
  f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215 x_1309 ->
      (f_1031 x_1262 x_1309 k_fold_right_1215)
  f_main_1683 m_1043 n_1042 k_main_1523 x1_1529 x2_1529 ->
      (fold_right_1030 add_1038 x1_1529 x2_1529 m_1043 (f_main_1684 m_1043 n_1042 x1_1529 k_main_1523))
  f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 when (x_1557 >= m_1043) -> (k_main_1523 ())
  f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 when (not (x_1557 >= m_1043)) -> (fail_1690 true k_main_1523)
  f_make_list_1680 n_1037 x_1137 k_make_list_1357 -> _|_
  f_make_list_1682 n_1037 k_make_list_1345 x1_1482 x2_1482 ->
      (cons_make_list_1133 n_1037 n_1037 x1_1482 x2_1482 k_make_list_1345)
  fail_1690 b k -> {fail} => (k ())
  fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (
      xs1_1032 = 0) -> (k_fold_right_1215 acc_1033)
  fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (
      not (xs1_1032 = 0)) -> (br_fold_right_1688 (1 <= xs1_1032) f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215)
  main_1041 n_1042 m_1043 k_main_1523 -> (make_list_1036 n_1042 (f_main_1683 m_1043 n_1042 k_main_1523))
  make_list_1036 n_1037 k_make_list_1345 when (n_1037 < 0) -> (k_make_list_1345 0 (f_make_list_1680 n_1037))
  make_list_1036 n_1037 k_make_list_1345 when (not (n_1037 < 0)) ->
      (make_list_1036 (n_1037 - 1) (f_make_list_1682 n_1037 k_make_list_1345))
Types:
  main_1676 : X
  fail_1690 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fold_right_1030 : ((int -> int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X)
  make_list_1036 : (int -> (int -> (int -> (int -> X) -> X) -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1676 ... --> 
  f_1685 ... --> 
  f_1686 ... --> 
  main_1041 ... --> 
  make_list_1036 [1/2] ... --> 
  f_main_1683 ... --> 
  fold_right_1030 [1/2] ... --> 
  f_main_1684 [2/2] ... --> 
  fail_1690 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(183)[1]
  program:
    main_1676  | true = ((Random.int 0) f_1685)
    add_1038 x_1039 y_1040 k_add_1506 | true = (k_add_1506 (x_1039 + y_1040))
    br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | b_1689 = (
    xs2_1032 0
             (f_fold_right_1677 acc_1033
                                xs1_1032
                                f_1031
                                k_fold_right_1215
                                xs2_1032))
    br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | (
    not b_1689) = bot
    cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1404 | true = (
    k_make_list_cons_make_list_1404 (xs1_1132 + 1)
                                    (f_cons_make_list_1681 n_1037
                                                           x_1131
                                                           xs1_1132
                                                           xs2_1132))
    f_1685 x_1601 | true = ((Random.int 0) (f_1686 x_1601))
    f_1686 x_1601 x_1614 | true = (main_1041 x_1601
                                             x_1614
                                             (f_1687 x_1601
                                                     x_1614))
    f_1687 x_1601 x_1614 x_1598 | true = end
    f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 | (
    i_1130 = 0) = (k_make_list_cons_make_list_1419 x_1131)
    f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 | (
    not (i_1130 = 0)) = (xs2_1132 (i_1130 - 1)
                                  k_make_list_cons_make_list_1419)
    f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032 x_1262 | true = (
    fold_right_1030
      f_1031
      (xs1_1032 - 1)
      (f_fold_right_1678 acc_1033
                         x_1262
                         xs1_1032
                         xs2_1032)
      acc_1033
      (f_fold_right_1679 acc_1033
                         x_1262
                         xs1_1032
                         f_1031
                         k_fold_right_1215))
    f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032 x_1104 k_fold_right_xs'_1248 | true = (
    xs2_1032 (x_1104 + 1)
             k_fold_right_xs'_1248)
    f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215 x_1309 | true = (
    f_1031 x_1262
           x_1309
           k_fold_right_1215)
    f_main_1683 m_1043 n_1042 k_main_1523 x1_1529 x2_1529 | true = (fold_right_1030
                                                                    add_1038
                                                                    x1_1529
                                                                    x2_1529
                                                                    m_1043
                                                                    (
                                                                    f_main_1684 m_1043
                                                                    n_1042
                                                                    x1_1529
                                                                    k_main_1523))
    f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 | (x_1557 >= m_1043) = (
    k_main_1523 ())
    f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 | (not (x_1557 >= m_1043)) = (
    fail_1690 true
              k_main_1523)
    f_make_list_1680 n_1037 x_1137 k_make_list_1357 | true = bot
    f_make_list_1682 n_1037 k_make_list_1345 x1_1482 x2_1482 | true = (
    cons_make_list_1133 n_1037
                        n_1037
                        x1_1482
                        x2_1482
                        k_make_list_1345)
    fail_1690 b k | true = (fail ())
    fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | (
    xs1_1032 = 0) = (k_fold_right_1215 acc_1033)
    fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | (
    not (xs1_1032 = 0)) = (br_fold_right_1688 (1 <= xs1_1032)
                                              f_1031
                                              xs1_1032
                                              xs2_1032
                                              acc_1033
                                              k_fold_right_1215)
    main_1041 n_1042 m_1043 k_main_1523 | true = (make_list_1036 n_1042
                                                                 (f_main_1683 m_1043
                                                                    n_1042
                                                                    k_main_1523))
    make_list_1036 n_1037 k_make_list_1345 | (n_1037 < 0) = (k_make_list_1345 0
                                                                    (f_make_list_1680 n_1037))
    make_list_1036 n_1037 k_make_list_1345 | (not (n_1037 < 0)) = (make_list_1036
                                                                    (
                                                                    n_1037 - 1)
                                                                    (
                                                                    f_make_list_1682 n_1037
                                                                    k_make_list_1345))
    main_1676:X
    add_1038:int -> int -> (int -> X) -> X
    br_fold_right_1688:bool ->
                       (int -> int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    cons_make_list_1133:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1685:int -> X
    f_1686:int -> int -> X
    f_1687:int -> int -> unit -> X
    f_cons_make_list_1681:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_fold_right_1677:int ->
                      int -> (int -> int -> (int -> X) -> X) -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_fold_right_1678:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_fold_right_1679:int -> int -> int -> (int -> int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_main_1683:int -> int -> (unit -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_main_1684:int -> int -> int -> (unit -> X) -> int -> X
    f_make_list_1680:int -> int -> (int -> X) -> X
    f_make_list_1682:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    fail_1690:bool -> (unit -> X) -> X
    fold_right_1030:(int -> int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    main_1041:int -> int -> (unit -> X) -> X
    make_list_1036:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
  inlined functions: add_1038,br_fold_right_1688,cons_make_list_1133,f_1685,f_1686,f_1687,f_cons_make_list_1681,f_fold_right_1677,f_fold_right_1678,f_fold_right_1679,f_main_1683,f_main_1684,f_make_list_1680,f_make_list_1682,main_1041
  counterexample: 0:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1685@4:0> = var2)
     [true.nop((<f_1686@7:0> = <f_1685@4:0>) && (<f_1686@7:1> = var3))
      [true.((<main_1041@9:0> = <f_1686@7:0>) && (<main_1041@9:1> = <f_1686@7:1>))
       [true.(<make_list_1036@11:0> = <main_1041@9:0>)
        [(<make_list_1036@11:0> < 0).(<<make_list_1036@11:1>@14:0> = 0)
         [true.
          ((<f_main_1683@16:0> = <main_1041@9:1>) &&
           ((<f_main_1683@16:1> = <main_1041@9:0>) && (<f_main_1683@16:3> = <<make_list_1036@11:1>@14:0>)))
          [true.((<fold_right_1030@18:1> = <f_main_1683@16:3>) && (<fold_right_1030@18:3> = <f_main_1683@16:0>))
           [(<fold_right_1030@18:1> = 0).(<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>)
            [true.
             ((<f_main_1684@23:0> = <f_main_1683@16:0>) &&
              ((<f_main_1684@23:1> = <f_main_1683@16:1>) &&
               ((<f_main_1684@23:2> = <f_main_1683@16:3>) && (<f_main_1684@23:4> = <<fold_right_1030@18:4>@21:0>))))
             [(not (<f_main_1684@23:4> >= <f_main_1684@23:0>)).(<fail_1690@26:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(184)[2]
    horn clauses:
      P[<fail_1690@26:0>](<fail_1690@26:0>:bool)|- bot
      
      P[<f_main_1684@23:4>](<f_main_1684@23:0>:int,<f_main_1684@23:1>:int,<f_main_1684@23:2>:int,<f_main_1684@23:4>:int),
      ((<f_main_1684@23:4> < <f_main_1684@23:0>) && <fail_1690@26:0>) |- P[<fail_1690@26:0>](
      <fail_1690@26:0>:bool)
      
      P[<f_main_1683@16:3>](<f_main_1684@23:0>:int,<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
      P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int)|- P[<f_main_1684@23:4>](
      <f_main_1684@23:0>:int,<f_main_1684@23:1>:int,<f_main_1684@23:2>:int,
      <f_main_1684@23:4>:int)
      
      P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
      ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
      |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                          <fold_right_1030@18:3>:int,
                                          <<fold_right_1030@18:4>@21:0>:int)
      
      P[<f_main_1683@16:3>](<fold_right_1030@18:3>:int,<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
      <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
      
      P[<main_1041@9:1>](<f_main_1683@16:1>:int,<f_main_1683@16:0>:int),
      P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<f_main_1683@16:3>:int)|- P[<f_main_1683@16:3>](
      <f_main_1683@16:0>:int,<f_main_1683@16:1>:int,<f_main_1683@16:3>:int)
      
      P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
      ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
      |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int)
      
      P[<main_1041@9:1>](<make_list_1036@11:0>:int,<main_1041@9:1>:int)|- P[<make_list_1036@11:0>](
      <make_list_1036@11:0>:int)
      
      P[<f_1686@7:1>](<main_1041@9:0>:int,<main_1041@9:1>:int)|- P[<main_1041@9:1>](
      <main_1041@9:0>:int,<main_1041@9:1>:int)
      
      P[<f_1685@4:0>](<f_1686@7:0>:int)|- P[<f_1686@7:1>](<f_1686@7:0>:int,
                                                          <f_1686@7:1>:int)
      
      |- P[<f_1685@4:0>](<f_1685@4:0>:int)
    call trees:
      <main_1676@1>
        <f_1685@4>
          <f_1686@7>
            <main_1041@9>
              <make_list_1036@11>
              </<make_list_1036@11:1>@14>
              <f_main_1683@16>
                <fold_right_1030@18>
                </<fold_right_1030@18:4>@21>
                <f_main_1684@23>
                  <fail_1690@26>
    inlined horn clauses:
      P[<fail_1690@26:0>](<fail_1690@26:0>:bool)|- bot
      
      P[<<make_list_1036@11:1>@14:0>](<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
      P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int),
      ((<f_main_1684@23:4> < <f_main_1684@23:0>) && <fail_1690@26:0>) |- P[<fail_1690@26:0>](
      <fail_1690@26:0>:bool)
      
      P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
      ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
      |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                          <fold_right_1030@18:3>:int,
                                          <<fold_right_1030@18:4>@21:0>:int)
      
      P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
      <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
      
      P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
      ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
      |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int)
      
      |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
    begin ParamSubstInfer.infer(1429)[3]
      
    end ParamSubstInfer.infer(1429)[3] (0.015998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1431)[3]
      
    end RefTypeInfer.elim_coeffs(1431)[3] (0.000000 sec.)
    begin GenHcSolver.solve(1668)[3]
      Horn clauses:
        P[<fail_1690@26:0>](<fail_1690@26:0>:bool)|- bot
        
        P[<<make_list_1036@11:1>@14:0>](<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
        P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int),
        ((<f_main_1684@23:4> < <f_main_1684@23:0>) && <fail_1690@26:0>) |- P[<fail_1690@26:0>](
        <fail_1690@26:0>:bool)
        
        P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
        ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
        |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                            <fold_right_1030@18:3>:int,
                                            <<fold_right_1030@18:4>@21:0>:int)
        
        P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
        <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
        
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int) = (<fold_right_1030@18:1> = 0)
        P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int,<<fold_right_1030@18:4>@21:0>:int) =
        ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
        P[<fail_1690@26:0>](<fail_1690@26:0>:bool) = false
      upper bounds:
        P[<fail_1690@26:0>](var5:bool) = true
      begin GenHcSolver.classify_pids(2982)[4]
        output:
          [<fail_1690@26:0>]
      end GenHcSolver.classify_pids(2982)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2985)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2986)[5]
          begin InterpProver.interpolate_fresh(2987)[6]
            begin InterpProver.interpolate_log(2988)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2989)[8]
                begin InterpProver.interpolate_simplify(2990)[9]
                  begin InterpProver.interpolate_quick(3003)[10]
                    
                  end InterpProver.interpolate_quick(3003)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(3007)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(3007)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2990)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2989)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2988)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2987)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2986)[5] (0.000000 sec.)
        output:
          P[<fail_1690@26:0>](<fail_1690@26:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2985)[4] (0.000000 sec.)
      Horn clauses:
        P[<<make_list_1036@11:1>@14:0>](<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
        P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int),
        (<f_main_1684@23:4> < <f_main_1684@23:0>) |- bot
        
        P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
        ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
        |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                            <fold_right_1030@18:3>:int,
                                            <<fold_right_1030@18:4>@21:0>:int)
        
        P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
        <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
        
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int) = (<fold_right_1030@18:1> = 0)
        P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int,<<fold_right_1030@18:4>@21:0>:int) =
        ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
      upper bounds:
        P[<<fold_right_1030@18:4>@21:0>](var6:int,var7:int,var8:int) = ((var6 <> 0) || (var8 >= var7))
      begin GenHcSolver.classify_pids(4640)[4]
        output:
          [<<fold_right_1030@18:4>@21:0>]
      end GenHcSolver.classify_pids(4640)[4] (0.000000 sec.)
      lb:((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
      nub:(not ((<fold_right_1030@18:1> <> 0) || (<<fold_right_1030@18:4>@21:0> >= <fold_right_1030@18:3>)))
      begin ApronInterface.convex_hull_interpolate(4643)[4]
        lb:((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
        nub:(not ((<fold_right_1030@18:1> <> 0) || (<<fold_right_1030@18:4>@21:0> >= <fold_right_1030@18:3>)))
        lb':((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
        nub':(not ((<fold_right_1030@18:1> <> 0) || (<<fold_right_1030@18:4>@21:0> >= <fold_right_1030@18:3>)))
        begin InterpProver.interpolate(4644)[5]
          begin InterpProver.interpolate_fresh(4645)[6]
            begin InterpProver.interpolate_log(4646)[7]
              input1: ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
              input2: (not ((<fold_right_1030@18:1> <> 0) || (<<fold_right_1030@18:4>@21:0> >= <fold_right_1030@18:3>)))
              begin InterpProver.interpolate_check(4647)[8]
                begin InterpProver.interpolate_simplify(4648)[9]
                  begin InterpProver.interpolate_quick(4701)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(4710)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(4711)[12]
                        begin CsisatInterface.interpolate_csisat_log(4712)[13]
                          input1: (0 = v_sep_fold_right_1030_sep_18_sep_1 & v_sep_fold_right_1030_sep_18_sep_3 = v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0)
                          input2: (0 = v_sep_fold_right_1030_sep_18_sep_1 & (1 + v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0) <= v_sep_fold_right_1030_sep_18_sep_3)
                          begin CsisatInterface.interpolate_csisat_raw(4713)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(4713)[14] (0.000000 sec.)
                          output: (-2*v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0 + 2*v_sep_fold_right_1030_sep_18_sep_3) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(4712)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0 + 2*v_sep_fold_right_1030_sep_18_sep_3) <= 0
                        after dnf conversion: (((-2*v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0 + 2*v_sep_fold_right_1030_sep_18_sep_3) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(4711)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(4710)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(4701)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(4648)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(4647)[8] (0.001999 sec.)
              output: (<fold_right_1030@18:3> <= <<fold_right_1030@18:4>@21:0>)
            end InterpProver.interpolate_log(4646)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(4645)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(4644)[5] (0.001999 sec.)
        output:
          P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int,<<fold_right_1030@18:4>@21:0>:int) =
          (<fold_right_1030@18:3> <= <<fold_right_1030@18:4>@21:0>)
      end ApronInterface.convex_hull_interpolate(4643)[4] (0.001999 sec.)
      Horn clauses:
        P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
        <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
        
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int) = (<fold_right_1030@18:1> = 0)
      upper bounds:
        P[<fold_right_1030@18:3>](var9:int,var10:int) = true
      begin GenHcSolver.classify_pids(5590)[4]
        output:
          [<fold_right_1030@18:3>]
      end GenHcSolver.classify_pids(5590)[4] (0.000000 sec.)
      lb:(<fold_right_1030@18:1> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(5593)[4]
        lb:(<fold_right_1030@18:1> = 0)
        nub:false
        lb':(<fold_right_1030@18:1> = 0)
        nub':false
        begin InterpProver.interpolate(5594)[5]
          begin InterpProver.interpolate_fresh(5595)[6]
            begin InterpProver.interpolate_log(5596)[7]
              input1: (<fold_right_1030@18:1> = 0)
              input2: false
              begin InterpProver.interpolate_check(5597)[8]
                begin InterpProver.interpolate_simplify(5598)[9]
                  begin InterpProver.interpolate_quick(5617)[10]
                    
                  end InterpProver.interpolate_quick(5617)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5598)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5597)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(5596)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(5595)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(5594)[5] (0.000000 sec.)
        output:
          P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int) = true
      end ApronInterface.convex_hull_interpolate(5593)[4] (0.000000 sec.)
      Horn clauses:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
      upper bounds:
        P[<<make_list_1036@11:1>@14:0>](var11:int,var12:int) = true
      begin GenHcSolver.classify_pids(6172)[4]
        output:
          [<<make_list_1036@11:1>@14:0>]
      end GenHcSolver.classify_pids(6172)[4] (0.000000 sec.)
      lb:((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(6175)[4]
        lb:((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        nub:false
        lb':((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        nub':false
        begin InterpProver.interpolate(6176)[5]
          begin InterpProver.interpolate_fresh(6177)[6]
            begin InterpProver.interpolate_log(6178)[7]
              input1: ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
              input2: false
              begin InterpProver.interpolate_check(6179)[8]
                begin InterpProver.interpolate_simplify(6180)[9]
                  begin InterpProver.interpolate_quick(6212)[10]
                    
                  end InterpProver.interpolate_quick(6212)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(6180)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(6179)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(6178)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(6177)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(6176)[5] (0.000000 sec.)
        output:
          P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) = true
      end ApronInterface.convex_hull_interpolate(6175)[4] (0.000000 sec.)
      Horn clauses:
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
      upper bounds:
        P[<make_list_1036@11:0>](var13:int) = true
      begin GenHcSolver.classify_pids(6463)[4]
        output:
          [<make_list_1036@11:0>]
      end GenHcSolver.classify_pids(6463)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(6466)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(6467)[5]
          begin InterpProver.interpolate_fresh(6468)[6]
            begin InterpProver.interpolate_log(6469)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(6470)[8]
                begin InterpProver.interpolate_simplify(6471)[9]
                  begin InterpProver.interpolate_quick(6484)[10]
                    
                  end InterpProver.interpolate_quick(6484)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(6471)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(6470)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(6469)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(6468)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(6467)[5] (0.000000 sec.)
        output:
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
      end ApronInterface.convex_hull_interpolate(6466)[4] (0.000000 sec.)
      begin HcSolver.check_validity(6539)[4]
        input:
          P[<fail_1690@26:0>](<fail_1690@26:0>:bool)|- bot
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
          P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int),
          ((<f_main_1684@23:4> < <f_main_1684@23:0>) && <fail_1690@26:0>) |- P[<fail_1690@26:0>](
          <fail_1690@26:0>:bool)
          
          P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
          ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
          |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                              <fold_right_1030@18:3>:int,
                                              <<fold_right_1030@18:4>@21:0>:int)
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
          <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
          
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
          ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
          |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                             <<make_list_1036@11:1>@14:0>:int)
          
          |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(6539)[4] (0.001999 sec.)
      solution:
        P[<fail_1690@26:0>](<fail_1690@26:0>:bool) = false
        P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int,<<fold_right_1030@18:4>@21:0>:int) =
        (<fold_right_1030@18:3> <= <<fold_right_1030@18:4>@21:0>)
        P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) = true
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
    end GenHcSolver.solve(1668)[3] (0.023996 sec.)
    begin GenHcSolver.solve(6881)[3]
      Horn clauses:
        P[<fail_1690@26:0>](<fail_1690@26:0>:bool)|- bot
        
        P[<<make_list_1036@11:1>@14:0>](<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
        P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int),
        ((<f_main_1684@23:4> < <f_main_1684@23:0>) && <fail_1690@26:0>) |- P[<fail_1690@26:0>](
        <fail_1690@26:0>:bool)
        
        P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
        ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
        |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                            <fold_right_1030@18:3>:int,
                                            <<fold_right_1030@18:4>@21:0>:int)
        
        P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
        <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
        
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int) = (<fold_right_1030@18:1> = 0)
        P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int,<<fold_right_1030@18:4>@21:0>:int) =
        ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
        P[<fail_1690@26:0>](<fail_1690@26:0>:bool) = false
      upper bounds:
        P[<fail_1690@26:0>](var15:bool) = true
      begin GenHcSolver.classify_pids(8195)[4]
        output:
          [<fail_1690@26:0>]
      end GenHcSolver.classify_pids(8195)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(8198)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(8201)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(8201)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(8206)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(8206)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(8209)[5]
          begin InterpProver.interpolate_fresh(8210)[6]
            begin InterpProver.interpolate_log(8211)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(8212)[8]
                begin InterpProver.interpolate_simplify(8213)[9]
                  begin InterpProver.interpolate_quick(8228)[10]
                    
                  end InterpProver.interpolate_quick(8228)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(8232)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(8232)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(8213)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(8212)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(8211)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(8210)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(8209)[5] (0.001000 sec.)
        output:
          P[<fail_1690@26:0>](<fail_1690@26:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(8198)[4] (0.002000 sec.)
      Horn clauses:
        P[<<make_list_1036@11:1>@14:0>](<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
        P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int),
        (<f_main_1684@23:4> < <f_main_1684@23:0>) |- bot
        
        P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
        ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
        |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                            <fold_right_1030@18:3>:int,
                                            <<fold_right_1030@18:4>@21:0>:int)
        
        P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
        <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
        
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int) = (<fold_right_1030@18:1> = 0)
        P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int,<<fold_right_1030@18:4>@21:0>:int) =
        ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
      upper bounds:
        P[<<fold_right_1030@18:4>@21:0>](var16:int,var17:int,var18:int) = ((var16 <> 0) || (var18 >= var17))
      begin GenHcSolver.classify_pids(9872)[4]
        output:
          [<<fold_right_1030@18:4>@21:0>]
      end GenHcSolver.classify_pids(9872)[4] (0.000000 sec.)
      lb:((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
      nub:(not ((<fold_right_1030@18:1> <> 0) || (<<fold_right_1030@18:4>@21:0> >= <fold_right_1030@18:3>)))
      begin ApronInterface.convex_hull_interpolate(9875)[4]
        lb:((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
        nub:(not ((<fold_right_1030@18:1> <> 0) || (<<fold_right_1030@18:4>@21:0> >= <fold_right_1030@18:3>)))
        begin ExtFormula.Formula.case_analysis_boolean(9888)[5]
          ts: ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(9888)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(9906)[5]
          ts: ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> < <fold_right_1030@18:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(9906)[5] (0.000000 sec.)
        lb':(((<<fold_right_1030@18:4>@21:0> + (-1 * <fold_right_1030@18:3>)) = 0) && (<fold_right_1030@18:1> = 0))
        nub':((<fold_right_1030@18:1> = 0) &&
              (((-1 + (-1 * <<fold_right_1030@18:4>@21:0>)) + <fold_right_1030@18:3>) >= 0))
        begin InterpProver.interpolate(9912)[5]
          begin InterpProver.interpolate_fresh(9913)[6]
            begin InterpProver.interpolate_log(9914)[7]
              input1: (((<<fold_right_1030@18:4>@21:0> + (-1 * <fold_right_1030@18:3>)) = 0) &&
                       (<fold_right_1030@18:1> = 0))
              input2: ((<fold_right_1030@18:1> = 0) &&
                       (((-1 + (-1 * <<fold_right_1030@18:4>@21:0>)) + <fold_right_1030@18:3>) >= 0))
              begin InterpProver.interpolate_check(9915)[8]
                begin InterpProver.interpolate_simplify(9916)[9]
                  begin InterpProver.interpolate_quick(9975)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(9984)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(9985)[12]
                        begin CsisatInterface.interpolate_csisat_log(9986)[13]
                          input1: (0 = v_sep_fold_right_1030_sep_18_sep_1 & v_sep_fold_right_1030_sep_18_sep_3 = v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0)
                          input2: (0 = v_sep_fold_right_1030_sep_18_sep_1 & (1 + v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0) <= v_sep_fold_right_1030_sep_18_sep_3)
                          begin CsisatInterface.interpolate_csisat_raw(9987)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(9987)[14] (0.000000 sec.)
                          output: (-2*v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0 + 2*v_sep_fold_right_1030_sep_18_sep_3) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(9986)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0 + 2*v_sep_fold_right_1030_sep_18_sep_3) <= 0
                        after dnf conversion: (((-2*v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0 + 2*v_sep_fold_right_1030_sep_18_sep_3) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(9985)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(9984)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(9975)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(9916)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(9915)[8] (0.001999 sec.)
              output: (<fold_right_1030@18:3> <= <<fold_right_1030@18:4>@21:0>)
            end InterpProver.interpolate_log(9914)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(9913)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(9912)[5] (0.002999 sec.)
        output:
          P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int,<<fold_right_1030@18:4>@21:0>:int) =
          (<fold_right_1030@18:3> <= <<fold_right_1030@18:4>@21:0>)
      end ApronInterface.convex_hull_interpolate(9875)[4] (0.002999 sec.)
      Horn clauses:
        P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
        <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
        
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int) = (<fold_right_1030@18:1> = 0)
      upper bounds:
        P[<fold_right_1030@18:3>](var19:int,var20:int) = true
      begin GenHcSolver.classify_pids(10866)[4]
        output:
          [<fold_right_1030@18:3>]
      end GenHcSolver.classify_pids(10866)[4] (0.000000 sec.)
      lb:(<fold_right_1030@18:1> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(10869)[4]
        lb:(<fold_right_1030@18:1> = 0)
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(10873)[5]
          ts: (<fold_right_1030@18:1> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(10873)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(10879)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(10879)[5] (0.000000 sec.)
        lb':(<fold_right_1030@18:1> = 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(10882)[5]
          begin InterpProver.interpolate_fresh(10883)[6]
            begin InterpProver.interpolate_log(10884)[7]
              input1: (<fold_right_1030@18:1> = 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(10885)[8]
                begin InterpProver.interpolate_simplify(10886)[9]
                  begin InterpProver.interpolate_quick(10906)[10]
                    
                  end InterpProver.interpolate_quick(10906)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(10886)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(10885)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(10884)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(10883)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(10882)[5] (0.000000 sec.)
        output:
          P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int) = true
      end ApronInterface.convex_hull_interpolate(10869)[4] (0.000000 sec.)
      Horn clauses:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                           <<make_list_1036@11:1>@14:0>:int)
        
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) =
        ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
      upper bounds:
        P[<<make_list_1036@11:1>@14:0>](var21:int,var22:int) = true
      begin GenHcSolver.classify_pids(11463)[4]
        output:
          [<<make_list_1036@11:1>@14:0>]
      end GenHcSolver.classify_pids(11463)[4] (0.000000 sec.)
      lb:((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(11466)[4]
        lb:((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(11476)[5]
          ts: ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
          
        end ExtFormula.Formula.case_analysis_boolean(11476)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(11483)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(11483)[5] (0.000000 sec.)
        lb':((<<make_list_1036@11:1>@14:0> = 0) && ((-1 + (-1 * <make_list_1036@11:0>)) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(11486)[5]
          begin InterpProver.interpolate_fresh(11487)[6]
            begin InterpProver.interpolate_log(11488)[7]
              input1: ((<<make_list_1036@11:1>@14:0> = 0) && ((-1 + (-1 * <make_list_1036@11:0>)) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(11489)[8]
                begin InterpProver.interpolate_simplify(11490)[9]
                  begin InterpProver.interpolate_quick(11530)[10]
                    
                  end InterpProver.interpolate_quick(11530)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(11490)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(11489)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(11488)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(11487)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(11486)[5] (0.000000 sec.)
        output:
          P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) = true
      end ApronInterface.convex_hull_interpolate(11466)[4] (0.001000 sec.)
      Horn clauses:
        |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
      lower bounds:
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
      upper bounds:
        P[<make_list_1036@11:0>](var23:int) = true
      begin GenHcSolver.classify_pids(11783)[4]
        output:
          [<make_list_1036@11:0>]
      end GenHcSolver.classify_pids(11783)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(11786)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(11789)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(11789)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(11794)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(11794)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(11797)[5]
          begin InterpProver.interpolate_fresh(11798)[6]
            begin InterpProver.interpolate_log(11799)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(11800)[8]
                begin InterpProver.interpolate_simplify(11801)[9]
                  begin InterpProver.interpolate_quick(11815)[10]
                    
                  end InterpProver.interpolate_quick(11815)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(11801)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(11800)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(11799)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(11798)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(11797)[5] (0.000000 sec.)
        output:
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
      end ApronInterface.convex_hull_interpolate(11786)[4] (0.001000 sec.)
      begin HcSolver.check_validity(11872)[4]
        input:
          P[<fail_1690@26:0>](<fail_1690@26:0>:bool)|- bot
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
          P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int),
          ((<f_main_1684@23:4> < <f_main_1684@23:0>) && <fail_1690@26:0>) |- P[<fail_1690@26:0>](
          <fail_1690@26:0>:bool)
          
          P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
          ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
          |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                              <fold_right_1030@18:3>:int,
                                              <<fold_right_1030@18:4>@21:0>:int)
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
          <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
          
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
          ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
          |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                             <<make_list_1036@11:1>@14:0>:int)
          
          |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(11872)[4] (0.002000 sec.)
      solution:
        P[<fail_1690@26:0>](<fail_1690@26:0>:bool) = false
        P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int,<<fold_right_1030@18:4>@21:0>:int) =
        (<fold_right_1030@18:3> <= <<fold_right_1030@18:4>@21:0>)
        P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int) = true
        P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,<<make_list_1036@11:1>@14:0>:int) = true
        P[<make_list_1036@11:0>](<make_list_1036@11:0>:int) = true
    end GenHcSolver.solve(6881)[3] (0.032995 sec.)
    begin YhornInterface.solve(12214)[3]
      begin HcSolver.solve_ub(12215)[4]
        encoded:
          P[<fail_1690@26:0>](<fail_1690@26:0>:int)|- bot
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
          P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int),
          ((<f_main_1684@23:4> < <f_main_1684@23:0>) && (<fail_1690@26:0> = 1))
          |- P[<fail_1690@26:0>](<fail_1690@26:0>:int)
          
          P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
          ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
          |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                              <fold_right_1030@18:3>:int,
                                              <<fold_right_1030@18:4>@21:0>:int)
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
          <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
          
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
          ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
          |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                             <<make_list_1036@11:1>@14:0>:int)
          
          |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
        input to Yhorn:
          P[<fail_1690@26:0>](<fail_1690@26:0>:int)|- bot
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
          P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int),
          ((<f_main_1684@23:4> < <f_main_1684@23:0>) && (<fail_1690@26:0> = 1))
          |- P[<fail_1690@26:0>](<fail_1690@26:0>:int)
          
          P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
          ((<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>) && (<fold_right_1030@18:1> = 0))
          |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                              <fold_right_1030@18:3>:int,
                                              <<fold_right_1030@18:4>@21:0>:int)
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
          <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
          
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
          ((<make_list_1036@11:0> < 0) && (<<make_list_1036@11:1>@14:0> = 0))
          |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                             <<make_list_1036@11:1>@14:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1690_sep_26_sep_0($12)) -> 1=0.
(($12-1=0) & ($13-$14<0)) & (v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0($15,$14,$13)) & (v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($16,$15)) -> v_sep_fail_1690_sep_26_sep_0($12).
(($17=0) & ($18-$19=0)) & (v_sep_fold_right_1030_sep_18_sep_3($17,$19)) -> v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0($17,$19,$18).
(0=0) & (v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($20,$17)) -> v_sep_fold_right_1030_sep_18_sep_3($17,$19).
(($21=0) & ($22<0)) & (v_sep_make_list_1036_sep_11_sep_0($22)) -> v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($22,$21).
0=0 -> v_sep_make_list_1036_sep_11_sep_0($22).


v_sep_fail_1690_sep_26_sep_0: X
v_sep_fold_right_1030_sep_18_sep_3: X
v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0: X
v_sep_make_list_1036_sep_11_sep_0: X
v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0: X
.......
v_sep_fail_1690_sep_26_sep_0: X
v_sep_fold_right_1030_sep_18_sep_3: X
v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0: X
v_sep_make_list_1036_sep_11_sep_0: X
v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0: X
....
v_sep_fail_1690_sep_26_sep_0: X
v_sep_fold_right_1030_sep_18_sep_3: X
v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0: X
v_sep_make_list_1036_sep_11_sep_0: X
v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0: X
......
v_sep_fail_1690_sep_26_sep_0: X
v_sep_fold_right_1030_sep_18_sep_3: X
v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0: X
v_sep_make_list_1036_sep_11_sep_0: X
v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0: X
.......(0=0) & (v_sep_fail_1690_sep_26_sep_0($12)) -> 1=0.
(($12-1=0) & ($13-$14<0)) & (v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0($15,$14,$13)) & (v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($16,$15)) -> v_sep_fail_1690_sep_26_sep_0($12).
(($17=0) & ($18-$19=0)) & (v_sep_fold_right_1030_sep_18_sep_3($17,$19)) -> v_sep_fold_right_1030_sep_18_sep_4_sep_21_sep_0($17,$19,$18).
(0=0) & (v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($20,$17)) -> v_sep_fold_right_1030_sep_18_sep_3($17,$19).
(($21=0) & ($22<0)) & (v_sep_make_list_1036_sep_11_sep_0($22)) -> v_sep_make_list_1036_sep_11_sep_1_sep_14_sep_0($22,$21).
0=0 -> v_sep_make_list_1036_sep_11_sep_0($22).

          |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
        solution:
          P[<fail_1690@26:0>]($23:bool) = false
          P[<fold_right_1030@18:3>]($38:int,$40:int) = true
          P[<<fold_right_1030@18:4>@21:0>]($26:int,$28:int,$30:int) = ($28 <= $30)
          P[<make_list_1036@11:0>]($43:int) = true
          P[<<make_list_1036@11:1>@14:0>]($33:int,$35:int) = true
        
      end HcSolver.solve_ub(12215)[4] (0.015998 sec.)
      begin HcSolver.check_validity(12375)[4]
        input:
          P[<fail_1690@26:0>](<fail_1690@26:0>:bool)|- bot
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1684@23:1>:int,<f_main_1684@23:2>:int),
          P[<<fold_right_1030@18:4>@21:0>](<f_main_1684@23:2>:int,<f_main_1684@23:0>:int,<f_main_1684@23:4>:int),
          ((<f_main_1684@23:4> < <f_main_1684@23:0>) && <fail_1690@26:0>) |- P[<fail_1690@26:0>](
          <fail_1690@26:0>:bool)
          
          P[<fold_right_1030@18:3>](<fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int),
          ((<fold_right_1030@18:1> = 0) && (<<fold_right_1030@18:4>@21:0> = <fold_right_1030@18:3>))
          |- P[<<fold_right_1030@18:4>@21:0>](<fold_right_1030@18:1>:int,
                                              <fold_right_1030@18:3>:int,
                                              <<fold_right_1030@18:4>@21:0>:int)
          
          P[<<make_list_1036@11:1>@14:0>](<f_main_1683@16:1>:int,<fold_right_1030@18:1>:int)|- P[<fold_right_1030@18:3>](
          <fold_right_1030@18:1>:int,<fold_right_1030@18:3>:int)
          
          P[<make_list_1036@11:0>](<make_list_1036@11:0>:int),
          ((<<make_list_1036@11:1>@14:0> = 0) && (<make_list_1036@11:0> < 0))
          |- P[<<make_list_1036@11:1>@14:0>](<make_list_1036@11:0>:int,
                                             <<make_list_1036@11:1>@14:0>:int)
          
          |- P[<make_list_1036@11:0>](<make_list_1036@11:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(12375)[4] (0.002000 sec.)
      solution:
        P[<fail_1690@26:0>]($23:bool) = false
        P[<fold_right_1030@18:3>]($38:int,$40:int) = true
        P[<<fold_right_1030@18:4>@21:0>]($26:int,$28:int,$30:int) = ($28 <= $30)
        P[<make_list_1036@11:0>]($43:int) = true
        P[<<make_list_1036@11:1>@14:0>]($33:int,$35:int) = true
    end YhornInterface.solve(12214)[3] (0.018998 sec.)
    
  end RefTypeInfer.infer_etrs(184)[2] (0.100986 sec.)
  refinement types:
    main_1676: X
    f_1685: v1:int -> X
    f_1686: v1:int -> v2:int -> X
    main_1041: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1036: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_main_1683: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    fold_right_1030: (v1:int -> v2:int -> (v3:int -> X) -> X) ->
                     v6:int -> (v7:int -> (v8:int -> X) -> X) -> v11:int -> (v12:{v12:int | (v11 <= v12)} -> X) -> X
    f_main_1684: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    fail_1690: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    add_1038: var53:int -> var52:int -> (var51:int -> X) -> X
    br_fold_right_1688: var68:bool ->
                        (var67:int -> var66:int -> (var65:int -> X) -> X) ->
                        var62:int -> (var61:int -> (var60:int -> X) -> X) -> var57:int -> (var56:int -> X) -> X
    cons_make_list_1133: var82:int ->
                         var81:int ->
                         var80:int ->
                         (var79:int -> (var78:int -> X) -> X) ->
                         (var75:int -> (var74:int -> (var73:int -> X) -> X) -> X) -> X
    f_1687: var86:int -> var85:int -> var84:unit -> X
    f_cons_make_list_1681: var97:int ->
                           var96:int ->
                           var95:int -> (var94:int -> (var93:int -> X) -> X) -> var90:int -> (var89:int -> X) -> X
    f_fold_right_1677: var112:int ->
                       var111:int ->
                       (var110:int -> var109:int -> (var108:int -> X) -> X) ->
                       (var105:int -> X) -> (var103:int -> (var102:int -> X) -> X) -> var99:int -> X
    f_fold_right_1678: var123:int ->
                       var122:int ->
                       var121:int -> (var120:int -> (var119:int -> X) -> X) -> var116:int -> (var115:int -> X) -> X
    f_fold_right_1679: var135:int ->
                       var134:int ->
                       var133:int ->
                       (var132:int -> var131:int -> (var130:int -> X) -> X) -> (var127:int -> X) -> var125:int -> X
    f_make_list_1680: var140:int -> var139:int -> (var138:int -> X) -> X
    f_make_list_1682: var153:int ->
                      (var152:int -> (var151:int -> (var150:int -> X) -> X) -> X) ->
                      var146:int -> (var145:int -> (var144:int -> X) -> X) -> X
  abstraction types:
    main_1676: X
    f_1685: v1:int -> X
    f_1686: v1:int -> v2:int -> X
    main_1041: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1036: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_main_1683: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    fold_right_1030: (v1:int -> v2:int -> (v3:int -> X) -> X) ->
                     v6:int -> (v7:int -> (v8:int -> X) -> X) -> v11:int -> (v12:int[v12 -> (
                                                                    v11 <= v12)] -> X) -> X
    f_main_1684: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    fail_1690: v1:bool -> (v2:unit -> X) -> X
    add_1038: var53:int -> var52:int -> (var51:int -> X) -> X
    br_fold_right_1688: var68:bool ->
                        (var67:int -> var66:int -> (var65:int -> X) -> X) ->
                        var62:int -> (var61:int -> (var60:int -> X) -> X) -> var57:int -> (var56:int -> X) -> X
    cons_make_list_1133: var82:int ->
                         var81:int ->
                         var80:int ->
                         (var79:int -> (var78:int -> X) -> X) ->
                         (var75:int -> (var74:int -> (var73:int -> X) -> X) -> X) -> X
    f_1687: var86:int -> var85:int -> var84:unit -> X
    f_cons_make_list_1681: var97:int ->
                           var96:int ->
                           var95:int -> (var94:int -> (var93:int -> X) -> X) -> var90:int -> (var89:int -> X) -> X
    f_fold_right_1677: var112:int ->
                       var111:int ->
                       (var110:int -> var109:int -> (var108:int -> X) -> X) ->
                       (var105:int -> X) -> (var103:int -> (var102:int -> X) -> X) -> var99:int -> X
    f_fold_right_1678: var123:int ->
                       var122:int ->
                       var121:int -> (var120:int -> (var119:int -> X) -> X) -> var116:int -> (var115:int -> X) -> X
    f_fold_right_1679: var135:int ->
                       var134:int ->
                       var133:int ->
                       (var132:int -> var131:int -> (var130:int -> X) -> X) -> (var127:int -> X) -> var125:int -> X
    f_make_list_1680: var140:int -> var139:int -> (var138:int -> X) -> X
    f_make_list_1682: var153:int ->
                      (var152:int -> (var151:int -> (var150:int -> X) -> X) -> X) ->
                      var146:int -> (var145:int -> (var144:int -> X) -> X) -> X
  
end AbsTypeInfer.refine(183)[1] (0.105984 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1676
  main_1676 -> (rand_int f_1685)
  add_1038 x_1039 y_1040 k_add_1506 -> (k_add_1506 (x_1039 + y_1040))
  br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when b_1689 ->
      (xs2_1032 0 (f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032))
  br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (not b_1689) -> _|_
  cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1404 ->
      (k_make_list_cons_make_list_1404 (xs1_1132 + 1) (f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132))
  f_1685 x_1601 -> (rand_int (f_1686 x_1601))
  f_1686 x_1601 x_1614 -> (main_1041 x_1601 x_1614 (f_1687 x_1601 x_1614))
  f_1687 x_1601 x_1614 x_1598 -> end
  f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 when (
      i_1130 = 0) -> (k_make_list_cons_make_list_1419 x_1131)
  f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 when (
      not (i_1130 = 0)) -> (xs2_1132 (i_1130 - 1) k_make_list_cons_make_list_1419)
  f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032 x_1262 ->
      (fold_right_1030 f_1031 (xs1_1032 - 1) (f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032) acc_1033
        (f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215))
  f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032 x_1104 k_fold_right_xs'_1248 ->
      (xs2_1032 (x_1104 + 1) k_fold_right_xs'_1248)
  f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215 x_1309 ->
      (f_1031 x_1262 x_1309 k_fold_right_1215)
  f_main_1683 m_1043 n_1042 k_main_1523 x1_1529 x2_1529 ->
      (fold_right_1030 add_1038 x1_1529 x2_1529 m_1043 (f_main_1684 m_1043 n_1042 x1_1529 k_main_1523))
  f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 when (x_1557 >= m_1043) -> (k_main_1523 ())
  f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 when (not (x_1557 >= m_1043)) -> (fail_1690 true k_main_1523)
  f_make_list_1680 n_1037 x_1137 k_make_list_1357 -> _|_
  f_make_list_1682 n_1037 k_make_list_1345 x1_1482 x2_1482 ->
      (cons_make_list_1133 n_1037 n_1037 x1_1482 x2_1482 k_make_list_1345)
  fail_1690 b k -> {fail} => (k ())
  fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (
      xs1_1032 = 0) -> (k_fold_right_1215 acc_1033)
  fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (
      not (xs1_1032 = 0)) -> (br_fold_right_1688 (1 <= xs1_1032) f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215)
  main_1041 n_1042 m_1043 k_main_1523 -> (make_list_1036 n_1042 (f_main_1683 m_1043 n_1042 k_main_1523))
  make_list_1036 n_1037 k_make_list_1345 when (n_1037 < 0) -> (k_make_list_1345 0 (f_make_list_1680 n_1037))
  make_list_1036 n_1037 k_make_list_1345 when (not (n_1037 < 0)) ->
      (make_list_1036 (n_1037 - 1) (f_make_list_1682 n_1037 k_make_list_1345))
Types:
  main_1676 : X
  fail_1690 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fold_right_1030 : ((int -> int -> (int -> X) -> X) ->
                     int -> (int -> (int -> X) -> X) -> x_15:int -> (x_17:int[x_15 <= x_17] -> X) -> X)
  make_list_1036 : (int -> (int -> (int -> (int -> X) -> X) -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1676 ... --> 
  f_1685 ... --> 
  f_1686 ... --> 
  main_1041 ... --> 
  make_list_1036 [2/2] ... --> 
  make_list_1036 [1/2] ... --> 
  f_make_list_1682 ... --> 
  cons_make_list_1133 ... --> 
  f_main_1683 ... --> 
  fold_right_1030 [2/2] ... --> 
  br_fold_right_1688 [1/2] ... --> 
  f_cons_make_list_1681 [1/2] ... --> 
  f_fold_right_1677 ... --> 
  fold_right_1030 [1/2] ... --> 
  f_fold_right_1679 ... --> 
  add_1038 ... --> 
  f_main_1684 [2/2] ... --> 
  fail_1690 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(13042)[1]
  program:
    main_1676  | true = ((Random.int 0) f_1685)
    add_1038 x_1039 y_1040 k_add_1506 | true = (k_add_1506 (x_1039 + y_1040))
    br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | b_1689 = (
    xs2_1032 0
             (f_fold_right_1677 acc_1033
                                xs1_1032
                                f_1031
                                k_fold_right_1215
                                xs2_1032))
    br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | (
    not b_1689) = bot
    cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1404 | true = (
    k_make_list_cons_make_list_1404 (xs1_1132 + 1)
                                    (f_cons_make_list_1681 n_1037
                                                           x_1131
                                                           xs1_1132
                                                           xs2_1132))
    f_1685 x_1601 | true = ((Random.int 0) (f_1686 x_1601))
    f_1686 x_1601 x_1614 | true = (main_1041 x_1601
                                             x_1614
                                             (f_1687 x_1601
                                                     x_1614))
    f_1687 x_1601 x_1614 x_1598 | true = end
    f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 | (
    i_1130 = 0) = (k_make_list_cons_make_list_1419 x_1131)
    f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 | (
    not (i_1130 = 0)) = (xs2_1132 (i_1130 - 1)
                                  k_make_list_cons_make_list_1419)
    f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032 x_1262 | true = (
    fold_right_1030
      f_1031
      (xs1_1032 - 1)
      (f_fold_right_1678 acc_1033
                         x_1262
                         xs1_1032
                         xs2_1032)
      acc_1033
      (f_fold_right_1679 acc_1033
                         x_1262
                         xs1_1032
                         f_1031
                         k_fold_right_1215))
    f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032 x_1104 k_fold_right_xs'_1248 | true = (
    xs2_1032 (x_1104 + 1)
             k_fold_right_xs'_1248)
    f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215 x_1309 | true = (
    f_1031 x_1262
           x_1309
           k_fold_right_1215)
    f_main_1683 m_1043 n_1042 k_main_1523 x1_1529 x2_1529 | true = (fold_right_1030
                                                                    add_1038
                                                                    x1_1529
                                                                    x2_1529
                                                                    m_1043
                                                                    (
                                                                    f_main_1684 m_1043
                                                                    n_1042
                                                                    x1_1529
                                                                    k_main_1523))
    f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 | (x_1557 >= m_1043) = (
    k_main_1523 ())
    f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 | (not (x_1557 >= m_1043)) = (
    fail_1690 true
              k_main_1523)
    f_make_list_1680 n_1037 x_1137 k_make_list_1357 | true = bot
    f_make_list_1682 n_1037 k_make_list_1345 x1_1482 x2_1482 | true = (
    cons_make_list_1133 n_1037
                        n_1037
                        x1_1482
                        x2_1482
                        k_make_list_1345)
    fail_1690 b k | true = (fail ())
    fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | (
    xs1_1032 = 0) = (k_fold_right_1215 acc_1033)
    fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 | (
    not (xs1_1032 = 0)) = (br_fold_right_1688 (1 <= xs1_1032)
                                              f_1031
                                              xs1_1032
                                              xs2_1032
                                              acc_1033
                                              k_fold_right_1215)
    main_1041 n_1042 m_1043 k_main_1523 | true = (make_list_1036 n_1042
                                                                 (f_main_1683 m_1043
                                                                    n_1042
                                                                    k_main_1523))
    make_list_1036 n_1037 k_make_list_1345 | (n_1037 < 0) = (k_make_list_1345 0
                                                                    (f_make_list_1680 n_1037))
    make_list_1036 n_1037 k_make_list_1345 | (not (n_1037 < 0)) = (make_list_1036
                                                                    (
                                                                    n_1037 - 1)
                                                                    (
                                                                    f_make_list_1682 n_1037
                                                                    k_make_list_1345))
    main_1676:X
    add_1038:int -> int -> (int -> X) -> X
    br_fold_right_1688:bool ->
                       (int -> int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    cons_make_list_1133:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1685:int -> X
    f_1686:int -> int -> X
    f_1687:int -> int -> unit -> X
    f_cons_make_list_1681:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_fold_right_1677:int ->
                      int -> (int -> int -> (int -> X) -> X) -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_fold_right_1678:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_fold_right_1679:int -> int -> int -> (int -> int -> (int -> X) -> X) -> (int -> X) -> int -> X
    f_main_1683:int -> int -> (unit -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_main_1684:int -> int -> int -> (unit -> X) -> int -> X
    f_make_list_1680:int -> int -> (int -> X) -> X
    f_make_list_1682:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    fail_1690:bool -> (unit -> X) -> X
    fold_right_1030:(int -> int -> (int -> X) -> X) -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    main_1041:int -> int -> (unit -> X) -> X
    make_list_1036:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
  inlined functions: add_1038,br_fold_right_1688,cons_make_list_1133,f_1685,f_1686,f_1687,f_cons_make_list_1681,f_fold_right_1677,f_fold_right_1678,f_fold_right_1679,f_main_1683,f_main_1684,f_make_list_1680,f_make_list_1682,main_1041
  counterexample: 0:0:0:0:1:0:0:0:0:1:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1685@32:0> = var154)
     [true.nop((<f_1686@35:0> = <f_1685@32:0>) && (<f_1686@35:1> = var155))
      [true.((<main_1041@37:0> = <f_1686@35:0>) && (<main_1041@37:1> = <f_1686@35:1>))
       [true.(<make_list_1036@39:0> = <main_1041@37:0>)
        [(not (<make_list_1036@39:0> < 0)).(<make_list_1036@42:0> = (<make_list_1036@39:0> - 1))
         [(<make_list_1036@42:0> < 0).(<<make_list_1036@42:1>@45:0> = 0)
          [true.
           ((<f_make_list_1682@47:0> = <make_list_1036@39:0>) &&
            (<f_make_list_1682@47:2> = <<make_list_1036@42:1>@45:0>))
           [true.
            ((<cons_make_list_1133@49:0> = <f_make_list_1682@47:0>) &&
             ((<cons_make_list_1133@49:1> = <f_make_list_1682@47:0>) &&
              (<cons_make_list_1133@49:2> = <f_make_list_1682@47:2>)))
            [true.(<<cons_make_list_1133@49:4>@51:0> = (<cons_make_list_1133@49:2> + 1))
             [true.(<<f_make_list_1682@47:1>@53:0> = <<cons_make_list_1133@49:4>@51:0>)
              [true.(<<make_list_1036@39:1>@55:0> = <<f_make_list_1682@47:1>@53:0>)
               [true.
                ((<f_main_1683@57:0> = <main_1041@37:1>) &&
                 ((<f_main_1683@57:1> = <main_1041@37:0>) && (<f_main_1683@57:3> = <<make_list_1036@39:1>@55:0>)))
                [true.((<fold_right_1030@59:1> = <f_main_1683@57:3>) && (<fold_right_1030@59:3> = <f_main_1683@57:0>))
                 [(not (<fold_right_1030@59:1> = 0)).
                  ((<br_fold_right_1688@62:0> = (1 <= <fold_right_1030@59:1>)) &&
                   ((<br_fold_right_1688@62:2> = <fold_right_1030@59:1>) &&
                    (<br_fold_right_1688@62:4> = <fold_right_1030@59:3>)))
                  [<br_fold_right_1688@62:0>.(<<br_fold_right_1688@62:3>@65:0> = 0)
                   [true.(<<fold_right_1030@59:2>@67:0> = <<br_fold_right_1688@62:3>@65:0>)
                    [true.(<<f_main_1683@57:4>@69:0> = <<fold_right_1030@59:2>@67:0>)
                     [true.(<<<make_list_1036@39:1>@55:1>@71:0> = <<f_main_1683@57:4>@69:0>)
                      [true.(<<<f_make_list_1682@47:1>@53:1>@73:0> = <<<make_list_1036@39:1>@55:1>@71:0>)
                       [true.(<<<cons_make_list_1133@49:4>@51:1>@75:0> = <<<f_make_list_1682@47:1>@53:1>@73:0>)
                        [true.
                         ((<f_cons_make_list_1681@77:0> = <cons_make_list_1133@49:0>) &&
                          ((<f_cons_make_list_1681@77:1> = <cons_make_list_1133@49:1>) &&
                           ((<f_cons_make_list_1681@77:2> = <cons_make_list_1133@49:2>) &&
                            (<f_cons_make_list_1681@77:4> = <<<cons_make_list_1133@49:4>@51:1>@75:0>))))
                         [(<f_cons_make_list_1681@77:4> = 0).
                          (<<f_cons_make_list_1681@77:5>@80:0> = <f_cons_make_list_1681@77:1>)
                          [true.(<<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0> = <<f_cons_make_list_1681@77:5>@80:0>)
                           [true.
                            (<<<<f_make_list_1682@47:1>@53:1>@73:1>@84:0> =
                             <<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>)
                            [true.
                             (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <<<<f_make_list_1682@47:1>@53:1>@73:1>@84:0>)
                             [true.(<<<f_main_1683@57:4>@69:1>@88:0> = <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
                              [true.(<<<fold_right_1030@59:2>@67:1>@90:0> = <<<f_main_1683@57:4>@69:1>@88:0>)
                               [true.(<<<br_fold_right_1688@62:3>@65:1>@92:0> = <<<fold_right_1030@59:2>@67:1>@90:0>)
                                [true.
                                 ((<f_fold_right_1677@94:0> = <br_fold_right_1688@62:4>) &&
                                  ((<f_fold_right_1677@94:1> = <br_fold_right_1688@62:2>) &&
                                   (<f_fold_right_1677@94:5> = <<<br_fold_right_1688@62:3>@65:1>@92:0>)))
                                 [true.
                                  ((<fold_right_1030@96:1> = (<f_fold_right_1677@94:1> - 1)) &&
                                   (<fold_right_1030@96:3> = <f_fold_right_1677@94:0>))
                                  [(<fold_right_1030@96:1> = 0).
                                   (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>)
                                   [true.
                                    ((<f_fold_right_1679@101:0> = <f_fold_right_1677@94:0>) &&
                                     ((<f_fold_right_1679@101:1> = <f_fold_right_1677@94:5>) &&
                                      ((<f_fold_right_1679@101:2> = <f_fold_right_1677@94:1>) &&
                                       (<f_fold_right_1679@101:5> = <<fold_right_1030@96:4>@99:0>))))
                                    [true.
                                     ((<<f_fold_right_1679@101:3>@103:0> = <f_fold_right_1679@101:1>) &&
                                      (<<f_fold_right_1679@101:3>@103:1> = <f_fold_right_1679@101:5>))
                                     [true.
                                      ((<<f_fold_right_1677@94:2>@105:0> = <<f_fold_right_1679@101:3>@103:0>) &&
                                       (<<f_fold_right_1677@94:2>@105:1> = <<f_fold_right_1679@101:3>@103:1>))
                                      [true.
                                       ((<<br_fold_right_1688@62:1>@107:0> = <<f_fold_right_1677@94:2>@105:0>) &&
                                        (<<br_fold_right_1688@62:1>@107:1> = <<f_fold_right_1677@94:2>@105:1>))
                                       [true.
                                        ((<<fold_right_1030@59:0>@109:0> = <<br_fold_right_1688@62:1>@107:0>) &&
                                         (<<fold_right_1030@59:0>@109:1> = <<br_fold_right_1688@62:1>@107:1>))
                                        [true.
                                         ((<add_1038@111:0> = <<fold_right_1030@59:0>@109:0>) &&
                                          (<add_1038@111:1> = <<fold_right_1030@59:0>@109:1>))
                                         [true.(<<add_1038@111:2>@113:0> = (<add_1038@111:0> + <add_1038@111:1>))
                                          [true.(<<<fold_right_1030@59:0>@109:2>@115:0> = <<add_1038@111:2>@113:0>)
                                           [true.
                                            (<<<br_fold_right_1688@62:1>@107:2>@117:0> =
                                             <<<fold_right_1030@59:0>@109:2>@115:0>)
                                            [true.
                                             (<<<f_fold_right_1677@94:2>@105:2>@119:0> =
                                              <<<br_fold_right_1688@62:1>@107:2>@117:0>)
                                             [true.
                                              (<<<f_fold_right_1679@101:3>@103:2>@121:0> =
                                               <<<f_fold_right_1677@94:2>@105:2>@119:0>)
                                              [true.
                                               (<<f_fold_right_1679@101:4>@123:0> =
                                                <<<f_fold_right_1679@101:3>@103:2>@121:0>)
                                               [true.
                                                (<<f_fold_right_1677@94:3>@125:0> = <<f_fold_right_1679@101:4>@123:0>)
                                                [true.
                                                 (<<br_fold_right_1688@62:5>@127:0> = <<f_fold_right_1677@94:3>@125:0>)
                                                 [true.
                                                  (<<fold_right_1030@59:4>@129:0> = <<br_fold_right_1688@62:5>@127:0>)
                                                  [true.
                                                   ((<f_main_1684@131:0> = <f_main_1683@57:0>) &&
                                                    ((<f_main_1684@131:1> = <f_main_1683@57:1>) &&
                                                     ((<f_main_1684@131:2> = <f_main_1683@57:3>) &&
                                                      (<f_main_1684@131:4> = <<fold_right_1030@59:4>@129:0>))))
                                                   [(not (<f_main_1684@131:4> >= <f_main_1684@131:0>)).
                                                    (<fail_1690@134:0> = true)[
                                                    true.error
  begin RefTypeInfer.infer_etrs(13043)[2]
    horn clauses:
      P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
      
      P[<f_main_1684@131:4>](<f_main_1684@131:0>:int,<f_main_1684@131:1>:int,<f_main_1684@131:2>:int,<f_main_1684@131:4>:int),
      ((<f_main_1684@131:4> < <f_main_1684@131:0>) && <fail_1690@134:0>)
      |- P[<fail_1690@134:0>](<fail_1690@134:0>:bool)
      
      P[<f_main_1683@57:3>](<f_main_1684@131:0>:int,<f_main_1684@131:1>:int,<f_main_1684@131:2>:int),
      P[<<fold_right_1030@59:4>@129:0>](<f_main_1684@131:2>:int,<f_main_1684@131:0>:int,<f_main_1684@131:4>:int)|- P[<f_main_1684@131:4>](
      <f_main_1684@131:0>:int,<f_main_1684@131:1>:int,<f_main_1684@131:2>:int,
      <f_main_1684@131:4>:int)
      
      P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
      P[<<br_fold_right_1688@62:5>@127:0>]((1 <= <fold_right_1030@59:1>):bool,<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int,<<fold_right_1030@59:4>@129:0>:int),
      (<fold_right_1030@59:1> <> 0)
      |- P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,
                                           <fold_right_1030@59:3>:int,
                                           <<fold_right_1030@59:4>@129:0>:int)
      
      P[<br_fold_right_1688@62:4>](<br_fold_right_1688@62:0>:bool,<br_fold_right_1688@62:2>:int,<br_fold_right_1688@62:4>:int),
      P[<<f_fold_right_1677@94:3>@125:0>](<br_fold_right_1688@62:4>:int,<br_fold_right_1688@62:2>:int,<<br_fold_right_1688@62:5>@127:0>:int),
      <br_fold_right_1688@62:0>
      |- P[<<br_fold_right_1688@62:5>@127:0>](<br_fold_right_1688@62:0>:bool,
                                              <br_fold_right_1688@62:2>:int,
                                              <br_fold_right_1688@62:4>:int,
                                              <<br_fold_right_1688@62:5>@127:0>:int)
      
      P[<f_fold_right_1677@94:5>](<f_fold_right_1677@94:0>:int,<f_fold_right_1677@94:1>:int,<f_fold_right_1679@101:1>:int),
      P[<<f_fold_right_1679@101:4>@123:0>](<f_fold_right_1677@94:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1677@94:1>:int,<<f_fold_right_1677@94:3>@125:0>:int)|- P[<<f_fold_right_1677@94:3>@125:0>](
      <f_fold_right_1677@94:0>:int,<f_fold_right_1677@94:1>:int,<<f_fold_right_1677@94:3>@125:0>:int)
      
      P[<f_fold_right_1679@101:5>](<f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1679@101:2>:int,<<f_fold_right_1679@101:3>@103:1>:int),
      P[<<<f_fold_right_1679@101:3>@103:2>@121:0>](<f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1679@101:2>:int,<f_fold_right_1679@101:1>:int,<<f_fold_right_1679@101:3>@103:1>:int,<<f_fold_right_1679@101:4>@123:0>:int)|- P[<<f_fold_right_1679@101:4>@123:0>](
      <f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1679@101:2>:int,
      <<f_fold_right_1679@101:4>@123:0>:int)
      
      P[<f_fold_right_1677@94:5>](<f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:2>:int,<f_fold_right_1679@101:1>:int),
      P[<<<f_fold_right_1677@94:2>@105:2>@119:0>](<f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:2>:int,<<f_fold_right_1679@101:3>@103:0>:int,<<f_fold_right_1679@101:3>@103:1>:int,<<<f_fold_right_1679@101:3>@103:2>@121:0>:int)|- P[<<<f_fold_right_1679@101:3>@103:2>@121:0>](
      <f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1679@101:2>:int,
      <<f_fold_right_1679@101:3>@103:0>:int,<<f_fold_right_1679@101:3>@103:1>:int,
      <<<f_fold_right_1679@101:3>@103:2>@121:0>:int)
      
      P[<br_fold_right_1688@62:4>](true:bool,<f_fold_right_1677@94:1>:int,<f_fold_right_1677@94:0>:int),
      P[<<<br_fold_right_1688@62:1>@107:2>@117:0>](true:bool,<<f_fold_right_1677@94:2>@105:0>:int,<<f_fold_right_1677@94:2>@105:1>:int,<<<f_fold_right_1677@94:2>@105:2>@119:0>:int)|- P[<<<f_fold_right_1677@94:2>@105:2>@119:0>](
      <f_fold_right_1677@94:0>:int,<f_fold_right_1677@94:1>:int,<<f_fold_right_1677@94:2>@105:0>:int,
      <<f_fold_right_1677@94:2>@105:1>:int,<<<f_fold_right_1677@94:2>@105:2>@119:0>:int)
      
      P[<fold_right_1030@59:3>](<br_fold_right_1688@62:2>:int,<br_fold_right_1688@62:4>:int),
      P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<br_fold_right_1688@62:1>@107:0>:int,<<br_fold_right_1688@62:1>@107:1>:int,<<<br_fold_right_1688@62:1>@107:2>@117:0>:int),
      ((<br_fold_right_1688@62:2> <> 0) && (<br_fold_right_1688@62:0> = (1 <= <br_fold_right_1688@62:2>)))
      |- P[<<<br_fold_right_1688@62:1>@107:2>@117:0>](<br_fold_right_1688@62:0>:bool,
                                                      <<br_fold_right_1688@62:1>@107:0>:int,
                                                      <<br_fold_right_1688@62:1>@107:1>:int,
                                                      <<<br_fold_right_1688@62:1>@107:2>@117:0>:int)
      
      P[<f_main_1683@57:3>](<fold_right_1030@59:3>:int,<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
      P[<<add_1038@111:2>@113:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int)|- P[<<<fold_right_1030@59:0>@109:2>@115:0>](
      <<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,
      <<<fold_right_1030@59:0>@109:2>@115:0>:int)
      
      P[<add_1038@111:1>](<add_1038@111:0>:int,<add_1038@111:1>:int),
      (<<add_1038@111:2>@113:0> = (<add_1038@111:0> + <add_1038@111:1>))
      |- P[<<add_1038@111:2>@113:0>](<add_1038@111:0>:int,<add_1038@111:1>:int,
                                     <<add_1038@111:2>@113:0>:int)
      
      P[<f_main_1683@57:3>](<fold_right_1030@59:3>:int,<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
      P[<<fold_right_1030@59:0>@109:1>](<add_1038@111:0>:int,<add_1038@111:1>:int)|- P[<add_1038@111:1>](
      <add_1038@111:0>:int,<add_1038@111:1>:int)
      
      P[<fold_right_1030@59:3>](<br_fold_right_1688@62:2>:int,<br_fold_right_1688@62:4>:int),
      P[<<br_fold_right_1688@62:1>@107:1>]((1 <= <br_fold_right_1688@62:2>):bool,<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
      (<br_fold_right_1688@62:2> <> 0)
      |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                           <<fold_right_1030@59:0>@109:1>:int)
      
      P[<br_fold_right_1688@62:4>](<br_fold_right_1688@62:0>:bool,<f_fold_right_1677@94:1>:int,<f_fold_right_1677@94:0>:int),
      P[<<f_fold_right_1677@94:2>@105:1>](<f_fold_right_1677@94:0>:int,<f_fold_right_1677@94:1>:int,<<br_fold_right_1688@62:1>@107:0>:int,<<br_fold_right_1688@62:1>@107:1>:int),
      <br_fold_right_1688@62:0>
      |- P[<<br_fold_right_1688@62:1>@107:1>](<br_fold_right_1688@62:0>:bool,
                                              <<br_fold_right_1688@62:1>@107:0>:int,
                                              <<br_fold_right_1688@62:1>@107:1>:int)
      
      P[<f_fold_right_1677@94:5>](<f_fold_right_1677@94:0>:int,<f_fold_right_1677@94:1>:int,<f_fold_right_1679@101:1>:int),
      P[<<f_fold_right_1679@101:3>@103:1>](<f_fold_right_1677@94:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1677@94:1>:int,<<f_fold_right_1677@94:2>@105:0>:int,<<f_fold_right_1677@94:2>@105:1>:int)|- P[<<f_fold_right_1677@94:2>@105:1>](
      <f_fold_right_1677@94:0>:int,<f_fold_right_1677@94:1>:int,<<f_fold_right_1677@94:2>@105:0>:int,
      <<f_fold_right_1677@94:2>@105:1>:int)
      
      P[<f_fold_right_1679@101:5>](<f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1679@101:2>:int,<<f_fold_right_1679@101:3>@103:1>:int),
      (<<f_fold_right_1679@101:3>@103:0> = <f_fold_right_1679@101:1>)
      |- P[<<f_fold_right_1679@101:3>@103:1>](<f_fold_right_1679@101:0>:int,
                                              <f_fold_right_1679@101:1>:int,
                                              <f_fold_right_1679@101:2>:int,
                                              <<f_fold_right_1679@101:3>@103:0>:int,
                                              <<f_fold_right_1679@101:3>@103:1>:int)
      
      P[<f_fold_right_1677@94:5>](<f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:2>:int,<f_fold_right_1679@101:1>:int),
      P[<<fold_right_1030@96:4>@99:0>]((-1 + <f_fold_right_1679@101:2>):int,<f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:5>:int)|- P[<f_fold_right_1679@101:5>](
      <f_fold_right_1679@101:0>:int,<f_fold_right_1679@101:1>:int,<f_fold_right_1679@101:2>:int,
      <f_fold_right_1679@101:5>:int)
      
      P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int),
      ((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>))
      |- P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,
                                          <fold_right_1030@96:3>:int,
                                          <<fold_right_1030@96:4>@99:0>:int)
      
      P[<f_fold_right_1677@94:5>](<fold_right_1030@96:3>:int,(1 + <fold_right_1030@96:1>):int,<f_fold_right_1677@94:5>:int)|- P[<fold_right_1030@96:3>](
      <fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int)
      
      P[<br_fold_right_1688@62:4>](true:bool,<f_fold_right_1677@94:1>:int,<f_fold_right_1677@94:0>:int),
      P[<<<br_fold_right_1688@62:3>@65:1>@92:0>](true:bool,<f_fold_right_1677@94:1>:int,0:int,<f_fold_right_1677@94:5>:int)|- P[<f_fold_right_1677@94:5>](
      <f_fold_right_1677@94:0>:int,<f_fold_right_1677@94:1>:int,<f_fold_right_1677@94:5>:int)
      
      P[<fold_right_1030@59:3>](<br_fold_right_1688@62:2>:int,<br_fold_right_1688@62:4>:int),
      P[<<<fold_right_1030@59:2>@67:1>@90:0>](<br_fold_right_1688@62:2>:int,<<br_fold_right_1688@62:3>@65:0>:int,<<<br_fold_right_1688@62:3>@65:1>@92:0>:int),
      ((<br_fold_right_1688@62:2> <> 0) && (<br_fold_right_1688@62:0> = (1 <= <br_fold_right_1688@62:2>)))
      |- P[<<<br_fold_right_1688@62:3>@65:1>@92:0>](<br_fold_right_1688@62:0>:bool,
                                                    <br_fold_right_1688@62:2>:int,
                                                    <<br_fold_right_1688@62:3>@65:0>:int,
                                                    <<<br_fold_right_1688@62:3>@65:1>@92:0>:int)
      
      P[<f_main_1683@57:3>](<fold_right_1030@59:3>:int,<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
      P[<<<f_main_1683@57:4>@69:1>@88:0>](<fold_right_1030@59:3>:int,<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
      <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)
      
      P[<main_1041@37:1>](<f_main_1683@57:1>:int,<f_main_1683@57:0>:int),
      P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<f_main_1683@57:3>:int),
      P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<f_main_1683@57:3>:int,<<f_main_1683@57:4>@69:0>:int,<<<f_main_1683@57:4>@69:1>@88:0>:int),
      P[<f_main_1683@57:3>](<f_main_1683@57:0>:int,<f_main_1683@57:1>:int,<f_main_1683@57:3>:int)|- P[<<<f_main_1683@57:4>@69:1>@88:0>](
      <f_main_1683@57:0>:int,<f_main_1683@57:1>:int,<f_main_1683@57:3>:int,
      <<f_main_1683@57:4>@69:0>:int,<<<f_main_1683@57:4>@69:1>@88:0>:int)
      
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
      P[<<f_make_list_1682@47:1>@53:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      P[<<<<f_make_list_1682@47:1>@53:1>@73:1>@84:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int),
      P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      (<make_list_1036@39:0> >= 0)
      |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                       <<make_list_1036@39:1>@55:0>:int,
                                                       <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                       <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
      
      P[<f_make_list_1682@47:2>](<f_make_list_1682@47:0>:int,<cons_make_list_1133@49:2>:int),
      P[<<cons_make_list_1133@49:4>@51:0>](<f_make_list_1682@47:0>:int,<f_make_list_1682@47:0>:int,<cons_make_list_1133@49:2>:int,<<f_make_list_1682@47:1>@53:0>:int),
      P[<<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>](<f_make_list_1682@47:0>:int,<f_make_list_1682@47:0>:int,<cons_make_list_1133@49:2>:int,<<f_make_list_1682@47:1>@53:0>:int,<<<f_make_list_1682@47:1>@53:1>@73:0>:int,<<<<f_make_list_1682@47:1>@53:1>@73:1>@84:0>:int),
      P[<<f_make_list_1682@47:1>@53:0>](<f_make_list_1682@47:0>:int,<<f_make_list_1682@47:1>@53:0>:int)|- P[<<<<f_make_list_1682@47:1>@53:1>@73:1>@84:0>](
      <f_make_list_1682@47:0>:int,<<f_make_list_1682@47:1>@53:0>:int,
      <<<f_make_list_1682@47:1>@53:1>@73:0>:int,<<<<f_make_list_1682@47:1>@53:1>@73:1>@84:0>:int)
      
      P[<cons_make_list_1133@49:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int),
      P[<<f_cons_make_list_1681@77:5>@80:0>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int,<<<cons_make_list_1133@49:4>@51:1>@75:0>:int,<<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>:int),
      P[<<cons_make_list_1133@49:4>@51:0>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int,<<cons_make_list_1133@49:4>@51:0>:int),
      (<<cons_make_list_1133@49:4>@51:0> = (1 + <cons_make_list_1133@49:2>))
      |- P[<<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>](<cons_make_list_1133@49:0>:int,
                                                            <cons_make_list_1133@49:1>:int,
                                                            <cons_make_list_1133@49:2>:int,
                                                            <<cons_make_list_1133@49:4>@51:0>:int,
                                                            <<<cons_make_list_1133@49:4>@51:1>@75:0>:int,
                                                            <<<<cons_make_list_1133@49:4>@51:1>@75:1>@82:0>:int)
      
      P[<f_cons_make_list_1681@77:4>](<f_cons_make_list_1681@77:0>:int,<f_cons_make_list_1681@77:1>:int,<f_cons_make_list_1681@77:2>:int,<f_cons_make_list_1681@77:4>:int),
      ((<f_cons_make_list_1681@77:4> = 0) && (<<f_cons_make_list_1681@77:5>@80:0> = <f_cons_make_list_1681@77:1>))
      |- P[<<f_cons_make_list_1681@77:5>@80:0>](<f_cons_make_list_1681@77:0>:int,
                                                <f_cons_make_list_1681@77:1>:int,
                                                <f_cons_make_list_1681@77:2>:int,
                                                <f_cons_make_list_1681@77:4>:int,
                                                <<f_cons_make_list_1681@77:5>@80:0>:int)
      
      P[<cons_make_list_1133@49:2>](<f_cons_make_list_1681@77:0>:int,<f_cons_make_list_1681@77:1>:int,<f_cons_make_list_1681@77:2>:int),
      P[<<<cons_make_list_1133@49:4>@51:1>@75:0>](<f_cons_make_list_1681@77:0>:int,<f_cons_make_list_1681@77:1>:int,<f_cons_make_list_1681@77:2>:int,(
                                                  1 + <f_cons_make_list_1681@77:2>):int,<f_cons_make_list_1681@77:4>:int)|- P[<f_cons_make_list_1681@77:4>](
      <f_cons_make_list_1681@77:0>:int,<f_cons_make_list_1681@77:1>:int,
      <f_cons_make_list_1681@77:2>:int,<f_cons_make_list_1681@77:4>:int)
      
      P[<f_make_list_1682@47:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:2>:int),
      P[<<<f_make_list_1682@47:1>@53:1>@73:0>](<cons_make_list_1133@49:0>:int,<<cons_make_list_1133@49:4>@51:0>:int,<<<cons_make_list_1133@49:4>@51:1>@75:0>:int),
      P[<cons_make_list_1133@49:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int),
      (<cons_make_list_1133@49:0> = <cons_make_list_1133@49:1>)
      |- P[<<<cons_make_list_1133@49:4>@51:1>@75:0>](<cons_make_list_1133@49:0>:int,
                                                     <cons_make_list_1133@49:1>:int,
                                                     <cons_make_list_1133@49:2>:int,
                                                     <<cons_make_list_1133@49:4>@51:0>:int,
                                                     <<<cons_make_list_1133@49:4>@51:1>@75:0>:int)
      
      P[<make_list_1036@39:0>](<f_make_list_1682@47:0>:int),
      P[<<<make_list_1036@39:1>@55:1>@71:0>](<f_make_list_1682@47:0>:int,<<f_make_list_1682@47:1>@53:0>:int,<<<f_make_list_1682@47:1>@53:1>@73:0>:int),
      (<f_make_list_1682@47:0> >= 0)
      |- P[<<<f_make_list_1682@47:1>@53:1>@73:0>](<f_make_list_1682@47:0>:int,
                                                  <<f_make_list_1682@47:1>@53:0>:int,
                                                  <<<f_make_list_1682@47:1>@53:1>@73:0>:int)
      
      P[<main_1041@37:1>](<make_list_1036@39:0>:int,<f_main_1683@57:0>:int),
      P[<<f_main_1683@57:4>@69:0>](<f_main_1683@57:0>:int,<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
      <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
      
      P[<f_main_1683@57:3>](<f_main_1683@57:0>:int,<f_main_1683@57:1>:int,<f_main_1683@57:3>:int),
      P[<<fold_right_1030@59:2>@67:0>](<f_main_1683@57:3>:int,<<f_main_1683@57:4>@69:0>:int)|- P[<<f_main_1683@57:4>@69:0>](
      <f_main_1683@57:0>:int,<f_main_1683@57:1>:int,<f_main_1683@57:3>:int,
      <<f_main_1683@57:4>@69:0>:int)
      
      P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
      P[<<br_fold_right_1688@62:3>@65:0>]((1 <= <fold_right_1030@59:1>):bool,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int),
      (<fold_right_1030@59:1> <> 0)
      |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                          <<fold_right_1030@59:2>@67:0>:int)
      
      P[<br_fold_right_1688@62:4>](<br_fold_right_1688@62:0>:bool,<br_fold_right_1688@62:2>:int,<br_fold_right_1688@62:4>:int),
      ((<<br_fold_right_1688@62:3>@65:0> = 0) && <br_fold_right_1688@62:0>)
      |- P[<<br_fold_right_1688@62:3>@65:0>](<br_fold_right_1688@62:0>:bool,
                                             <br_fold_right_1688@62:2>:int,
                                             <<br_fold_right_1688@62:3>@65:0>:int)
      
      P[<fold_right_1030@59:3>](<br_fold_right_1688@62:2>:int,<br_fold_right_1688@62:4>:int),
      ((<br_fold_right_1688@62:2> <> 0) && (<br_fold_right_1688@62:0> = (1 <= <br_fold_right_1688@62:2>)))
      |- P[<br_fold_right_1688@62:4>](<br_fold_right_1688@62:0>:bool,
                                      <br_fold_right_1688@62:2>:int,<br_fold_right_1688@62:4>:int)
      
      P[<f_main_1683@57:3>](<fold_right_1030@59:3>:int,<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
      <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
      
      P[<main_1041@37:1>](<f_main_1683@57:1>:int,<f_main_1683@57:0>:int),
      P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<f_main_1683@57:3>:int)|- P[<f_main_1683@57:3>](
      <f_main_1683@57:0>:int,<f_main_1683@57:1>:int,<f_main_1683@57:3>:int)
      
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
      P[<<f_make_list_1682@47:1>@53:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      (<make_list_1036@39:0> >= 0)
      |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int)
      
      P[<f_make_list_1682@47:2>](<f_make_list_1682@47:0>:int,<cons_make_list_1133@49:2>:int),
      P[<<cons_make_list_1133@49:4>@51:0>](<f_make_list_1682@47:0>:int,<f_make_list_1682@47:0>:int,<cons_make_list_1133@49:2>:int,<<f_make_list_1682@47:1>@53:0>:int)|- P[<<f_make_list_1682@47:1>@53:0>](
      <f_make_list_1682@47:0>:int,<<f_make_list_1682@47:1>@53:0>:int)
      
      P[<cons_make_list_1133@49:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:1>:int,<cons_make_list_1133@49:2>:int),
      (<<cons_make_list_1133@49:4>@51:0> = (1 + <cons_make_list_1133@49:2>))
      |- P[<<cons_make_list_1133@49:4>@51:0>](<cons_make_list_1133@49:0>:int,
                                              <cons_make_list_1133@49:1>:int,
                                              <cons_make_list_1133@49:2>:int,
                                              <<cons_make_list_1133@49:4>@51:0>:int)
      
      P[<f_make_list_1682@47:2>](<cons_make_list_1133@49:0>:int,<cons_make_list_1133@49:2>:int),
      (<cons_make_list_1133@49:0> = <cons_make_list_1133@49:1>)
      |- P[<cons_make_list_1133@49:2>](<cons_make_list_1133@49:0>:int,
                                       <cons_make_list_1133@49:1>:int,
                                       <cons_make_list_1133@49:2>:int)
      
      P[<make_list_1036@39:0>](<f_make_list_1682@47:0>:int),
      P[<<make_list_1036@42:1>@45:0>]((-1 + <f_make_list_1682@47:0>):int,<f_make_list_1682@47:2>:int),
      (<f_make_list_1682@47:0> >= 0)
      |- P[<f_make_list_1682@47:2>](<f_make_list_1682@47:0>:int,<f_make_list_1682@47:2>:int)
      
      P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
      ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
      |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int)
      
      P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
      |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
      
      P[<main_1041@37:1>](<make_list_1036@39:0>:int,<main_1041@37:1>:int)|- P[<make_list_1036@39:0>](
      <make_list_1036@39:0>:int)
      
      P[<f_1686@35:1>](<main_1041@37:0>:int,<main_1041@37:1>:int)|- P[<main_1041@37:1>](
      <main_1041@37:0>:int,<main_1041@37:1>:int)
      
      P[<f_1685@32:0>](<f_1686@35:0>:int)|- P[<f_1686@35:1>](<f_1686@35:0>:int,
                                                             <f_1686@35:1>:int)
      
      |- P[<f_1685@32:0>](<f_1685@32:0>:int)
    call trees:
      <main_1676@29>
        <f_1685@32>
          <f_1686@35>
            <main_1041@37>
              <make_list_1036@39>
                <make_list_1036@42>
                </<make_list_1036@42:1>@45>
                <f_make_list_1682@47>
                  <cons_make_list_1133@49>
                  </<cons_make_list_1133@49:4>@51>
                </<f_make_list_1682@47:1>@53>
              </<make_list_1036@39:1>@55>
              <f_main_1683@57>
                <fold_right_1030@59>
                  <br_fold_right_1688@62>
                  </<br_fold_right_1688@62:3>@65>
                </<fold_right_1030@59:2>@67>
              </<f_main_1683@57:4>@69>
              <<<make_list_1036@39:1>@55:1>@71>
                <<<f_make_list_1682@47:1>@53:1>@73>
                  <<<cons_make_list_1133@49:4>@51:1>@75>
                    <f_cons_make_list_1681@77>
                    </<f_cons_make_list_1681@77:5>@80>
                  </<<<cons_make_list_1133@49:4>@51:1>@75:1>@82>
                </<<<f_make_list_1682@47:1>@53:1>@73:1>@84>
              </<<<make_list_1036@39:1>@55:1>@71:1>@86>
              <<<f_main_1683@57:4>@69:1>@88>
                <<<fold_right_1030@59:2>@67:1>@90>
                  <<<br_fold_right_1688@62:3>@65:1>@92>
                    <f_fold_right_1677@94>
                      <fold_right_1030@96>
                      </<fold_right_1030@96:4>@99>
                      <f_fold_right_1679@101>
                      </<f_fold_right_1679@101:3>@103>
                    </<f_fold_right_1677@94:2>@105>
                  </<br_fold_right_1688@62:1>@107>
                </<fold_right_1030@59:0>@109>
                <add_1038@111>
                </<add_1038@111:2>@113>
                <<<fold_right_1030@59:0>@109:2>@115>
                  <<<br_fold_right_1688@62:1>@107:2>@117>
                    <<<f_fold_right_1677@94:2>@105:2>@119>
                      <<<f_fold_right_1679@101:3>@103:2>@121>
                      </<f_fold_right_1679@101:4>@123>
                    </<f_fold_right_1677@94:3>@125>
                  </<br_fold_right_1688@62:5>@127>
                </<fold_right_1030@59:4>@129>
                <f_main_1684@131>
                  <fail_1690@134>
    inlined horn clauses:
      P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
      
      P[<<make_list_1036@39:1>@55:0>](<f_main_1684@131:1>:int,<f_main_1684@131:2>:int),
      P[<<fold_right_1030@59:4>@129:0>](<f_main_1684@131:2>:int,<f_main_1684@131:0>:int,<f_main_1684@131:4>:int),
      ((<f_main_1684@131:4> < <f_main_1684@131:0>) && <fail_1690@134:0>)
      |- P[<fail_1690@134:0>](<fail_1690@134:0>:bool)
      
      P[<<fold_right_1030@96:4>@99:0>]((-1 + <fold_right_1030@59:1>):int,<fold_right_1030@59:3>:int,var165:int),
      P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
      P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
      P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
      (<fold_right_1030@59:1> >= 1)
      |- P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,
                                           <fold_right_1030@59:3>:int,
                                           <<fold_right_1030@59:4>@129:0>:int)
      
      P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
      P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
      (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
      |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                   <<fold_right_1030@59:0>@109:1>:int,
                                                   <<<fold_right_1030@59:0>@109:2>@115:0>:int)
      
      P[<fold_right_1030@59:3>](var169:int,var168:int),
      P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int),
      P[<<fold_right_1030@96:4>@99:0>]((-1 + var169):int,var168:int,<<fold_right_1030@59:0>@109:1>:int), (
      1 <= var169)
      |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                           <<fold_right_1030@59:0>@109:1>:int)
      
      P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int),
      ((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>))
      |- P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,
                                          <fold_right_1030@96:3>:int,
                                          <<fold_right_1030@96:4>@99:0>:int)
      
      P[<fold_right_1030@59:3>]((1 + <fold_right_1030@96:1>):int,<fold_right_1030@96:3>:int),
      P[<<<fold_right_1030@59:2>@67:1>@90:0>]((1 + <fold_right_1030@96:1>):int,0:int,<f_fold_right_1677@94:5>:int),
      (<fold_right_1030@96:1> >= 0) |- P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,
                                                                 <fold_right_1030@96:3>:int)
      
      P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
      P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
      <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)
      
      P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
      P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                      -1 + <<make_list_1036@39:1>@55:0>):int),
      P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
       ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
      |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                       <<make_list_1036@39:1>@55:0>:int,
                                                       <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                       <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
      
      P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
      P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
      <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
      
      P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
      ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
      |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                          <<fold_right_1030@59:2>@67:0>:int)
      
      P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
      <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
      
      P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
      P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                      -1 + <<make_list_1036@39:1>@55:0>):int), (
      <make_list_1036@39:0> >= 0)
      |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int)
      
      P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
      ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
      |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int)
      
      P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
      |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
      
      |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
    begin ParamSubstInfer.infer(20349)[3]
      
    end ParamSubstInfer.infer(20349)[3] (0.066989 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(20351)[3]
      
    end RefTypeInfer.elim_coeffs(20351)[3] (0.002999 sec.)
    begin GenHcSolver.solve(20970)[3]
      Horn clauses:
        P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1684@131:1>:int,<f_main_1684@131:2>:int),
        P[<<fold_right_1030@59:4>@129:0>](<f_main_1684@131:2>:int,<f_main_1684@131:0>:int,<f_main_1684@131:4>:int),
        ((<f_main_1684@131:4> < <f_main_1684@131:0>) && <fail_1690@134:0>)
        |- P[<fail_1690@134:0>](<fail_1690@134:0>:bool)
        
        P[<<fold_right_1030@96:4>@99:0>]((-1 + <fold_right_1030@59:1>):int,<fold_right_1030@59:3>:int,var165:int),
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
        P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
        (<fold_right_1030@59:1> >= 1)
        |- P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,
                                             <fold_right_1030@59:3>:int,
                                             <<fold_right_1030@59:4>@129:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
        (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
        |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                     <<fold_right_1030@59:0>@109:1>:int,
                                                     <<<fold_right_1030@59:0>@109:2>@115:0>:int)
        
        P[<fold_right_1030@59:3>](var169:int,var168:int),
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int),
        P[<<fold_right_1030@96:4>@99:0>]((-1 + var169):int,var168:int,<<fold_right_1030@59:0>@109:1>:int),
        (1 <= var169)
        |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                             <<fold_right_1030@59:0>@109:1>:int)
        
        P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int),
        ((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>))
        |- P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,
                                            <fold_right_1030@96:3>:int,
                                            <<fold_right_1030@96:4>@99:0>:int)
        
        P[<fold_right_1030@59:3>]((1 + <fold_right_1030@96:1>):int,<fold_right_1030@96:3>:int),
        P[<<<fold_right_1030@59:2>@67:1>@90:0>]((1 + <fold_right_1030@96:1>):int,0:int,<f_fold_right_1677@94:5>:int),
        (<fold_right_1030@96:1> >= 0)
        |- P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int),
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
        P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
        <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
        
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int), (
        <make_list_1036@39:0> >= 0)
        |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                           <<make_list_1036@39:1>@55:0>:int)
        
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
        |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                           <<make_list_1036@42:1>@45:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) =
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1))
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int) =
        ((<make_list_1036@39:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1))
        P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int) = (<fold_right_1030@59:1> = 1)
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> = 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1)))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<<make_list_1036@39:1>@55:0> = 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> = 0) && (<fold_right_1030@59:1> = 1)))
        P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int) = (<fold_right_1030@96:1> = 0)
        P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int,<<fold_right_1030@96:4>@99:0>:int) =
        ((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>))
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (<<fold_right_1030@59:0>@109:0> = 0)
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
        ((<<fold_right_1030@59:0>@109:0> = 0) &&
         (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)))
        P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int,<<fold_right_1030@59:4>@129:0>:int) =
        ((<fold_right_1030@59:1> = 1) && (<<fold_right_1030@59:4>@129:0> = <fold_right_1030@59:3>))
        P[<fail_1690@134:0>](<fail_1690@134:0>:bool) = false
      upper bounds:
        P[<<fold_right_1030@59:4>@129:0>](var180:int,var181:int,var182:int) = ((var180 <> 1) || (var182 >= var181))
        P[<<fold_right_1030@96:4>@99:0>](var175:int,var176:int,var177:int) = ((var175 <> 0) || (var177 >= var176))
      begin GenHcSolver.classify_pids(29952)[4]
        output:
          [<<fold_right_1030@96:4>@99:0>;<<fold_right_1030@59:4>@129:0>]
      end GenHcSolver.classify_pids(29952)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(30020)[4]
        lb:(((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>)) ||
            ((<fold_right_1030@96:1> = 1) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>)))
        nub:((not ((<fold_right_1030@96:1> <> 0) || (<<fold_right_1030@96:4>@99:0> >= <fold_right_1030@96:3>))) ||
             (not ((<fold_right_1030@96:1> <> 1) || (<<fold_right_1030@96:4>@99:0> >= <fold_right_1030@96:3>))))
        lb':(((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>)) ||
             ((<fold_right_1030@96:1> = 1) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>)))
        nub':((not ((<fold_right_1030@96:1> <> 0) || (<<fold_right_1030@96:4>@99:0> >= <fold_right_1030@96:3>))) ||
              (not ((<fold_right_1030@96:1> <> 1) || (<<fold_right_1030@96:4>@99:0> >= <fold_right_1030@96:3>))))
        begin InterpProver.interpolate(30021)[5]
          begin InterpProver.interpolate_fresh(30022)[6]
            begin InterpProver.interpolate_log(30023)[7]
              input1: (((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>)) ||
                       ((<fold_right_1030@96:1> = 1) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>)))
              input2: ((not
                          ((<fold_right_1030@96:1> <> 0) || (<<fold_right_1030@96:4>@99:0> >= <fold_right_1030@96:3>))) ||
                       (not
                          ((<fold_right_1030@96:1> <> 1) || (<<fold_right_1030@96:4>@99:0> >= <fold_right_1030@96:3>))))
              begin InterpProver.interpolate_check(30024)[8]
                begin InterpProver.interpolate_simplify(30025)[9]
                  begin InterpProver.interpolate_quick(30154)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(30163)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(30164)[12]
                        begin CsisatInterface.interpolate_csisat_log(30165)[13]
                          input1: ((0 = v_sep_fold_right_1030_sep_96_sep_1 | 1 = v_sep_fold_right_1030_sep_96_sep_1) & v_sep_fold_right_1030_sep_96_sep_3 = v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0)
                          input2: ((0 = v_sep_fold_right_1030_sep_96_sep_1 | 1 = v_sep_fold_right_1030_sep_96_sep_1) & (1 + v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0) <= v_sep_fold_right_1030_sep_96_sep_3)
                          begin CsisatInterface.interpolate_csisat_raw(30166)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(30166)[14] (0.001000 sec.)
                          output: (-2*v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0 + 2*v_sep_fold_right_1030_sep_96_sep_3) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(30165)[13] (0.001000 sec.)
                        after simplification: (-2*v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0 + 2*v_sep_fold_right_1030_sep_96_sep_3) <= 0
                        after dnf conversion: (((-2*v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0 + 2*v_sep_fold_right_1030_sep_96_sep_3) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(30164)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(30163)[11] (0.001999 sec.)
                    
                  end InterpProver.interpolate_quick(30154)[10] (0.002999 sec.)
                  
                end InterpProver.interpolate_simplify(30025)[9] (0.002999 sec.)
                
              end InterpProver.interpolate_check(30024)[8] (0.002999 sec.)
              output: (<fold_right_1030@96:3> <= <<fold_right_1030@96:4>@99:0>)
            end InterpProver.interpolate_log(30023)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(30022)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(30021)[5] (0.002999 sec.)
        output:
          P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int,<<fold_right_1030@96:4>@99:0>:int) =
          (<fold_right_1030@96:3> <= <<fold_right_1030@96:4>@99:0>)
          P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int,<<fold_right_1030@96:4>@99:0>:int) =
          (<fold_right_1030@96:3> <= <<fold_right_1030@96:4>@99:0>)
      end ApronInterface.convex_hull_interpolate(30020)[4] (0.002999 sec.)
      Horn clauses:
        P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
        P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
        ((<fold_right_1030@59:1> >= 1) &&
         ((<fold_right_1030@59:3> > <<fold_right_1030@59:4>@129:0>) && (<fold_right_1030@59:3> <= var165))) |- bot
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
        (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
        |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                     <<fold_right_1030@59:0>@109:1>:int,
                                                     <<<fold_right_1030@59:0>@109:2>@115:0>:int)
        
        P[<fold_right_1030@59:3>](var169:int,var168:int),
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int),
        ((1 <= var169) && (var168 <= <<fold_right_1030@59:0>@109:1>))
        |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                             <<fold_right_1030@59:0>@109:1>:int)
        
        P[<fold_right_1030@59:3>]((1 + <fold_right_1030@96:1>):int,<fold_right_1030@96:3>:int),
        P[<<<fold_right_1030@59:2>@67:1>@90:0>]((1 + <fold_right_1030@96:1>):int,0:int,<f_fold_right_1677@94:5>:int),
        (<fold_right_1030@96:1> >= 0)
        |- P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int),
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
        P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
        <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
        
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int), (
        <make_list_1036@39:0> >= 0)
        |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                           <<make_list_1036@39:1>@55:0>:int)
        
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
        |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                           <<make_list_1036@42:1>@45:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<fail_1690@134:0>](var186:bool) = false
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) =
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1))
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int) =
        ((<make_list_1036@39:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1))
        P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int) = (<fold_right_1030@59:1> = 1)
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> = 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1)))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<<make_list_1036@39:1>@55:0> = 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> = 0) && (<fold_right_1030@59:1> = 1)))
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (<<fold_right_1030@59:0>@109:0> = 0)
        P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int) = (<fold_right_1030@96:1> = 0)
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
        ((<<fold_right_1030@59:0>@109:0> = 0) &&
         (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)))
      upper bounds:
        P[<fold_right_1030@96:3>](var201:int,var202:int) = true
        P[<fold_right_1030@59:3>](var197:int,var198:int) = true
      begin GenHcSolver.classify_pids(43119)[4]
        output:
          [<fold_right_1030@59:3>;<fold_right_1030@96:3>]
      end GenHcSolver.classify_pids(43119)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(43130)[4]
        lb:((<fold_right_1030@59:1> = 1) || (<fold_right_1030@59:1> = 0))
        nub:false
        lb':((<fold_right_1030@59:1> = 1) || (<fold_right_1030@59:1> = 0))
        nub':false
        begin InterpProver.interpolate(43131)[5]
          begin InterpProver.interpolate_fresh(43132)[6]
            begin InterpProver.interpolate_log(43133)[7]
              input1: ((<fold_right_1030@59:1> = 1) || (<fold_right_1030@59:1> = 0))
              input2: false
              begin InterpProver.interpolate_check(43134)[8]
                begin InterpProver.interpolate_simplify(43135)[9]
                  begin InterpProver.interpolate_quick(43162)[10]
                    
                  end InterpProver.interpolate_quick(43162)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(43135)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(43134)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(43133)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(43132)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(43131)[5] (0.000000 sec.)
        output:
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int) = true
          P[<fold_right_1030@96:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int) = true
      end ApronInterface.convex_hull_interpolate(43130)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
        ((<fold_right_1030@59:1> >= 1) && (<<fold_right_1030@59:4>@129:0> < var165)) |- bot
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
        (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
        |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                     <<fold_right_1030@59:0>@109:1>:int,
                                                     <<<fold_right_1030@59:0>@109:2>@115:0>:int)
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int), (
        1 <= var169)
        |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                             <<fold_right_1030@59:0>@109:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int),
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
        
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int), (
        <make_list_1036@39:0> >= 0)
        |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                           <<make_list_1036@39:1>@55:0>:int)
        
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
        |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                           <<make_list_1036@42:1>@45:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<fail_1690@134:0>](var206:bool) = false
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) =
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1))
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int) =
        ((<make_list_1036@39:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<make_list_1036@39:1>@55:0> = 1) && (<<<make_list_1036@39:1>@55:1>@71:0> = 0)))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<<make_list_1036@39:1>@55:0> = 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> = 0) && (<fold_right_1030@59:1> = 1)))
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (<<fold_right_1030@59:0>@109:0> = 0)
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
        ((<<fold_right_1030@59:0>@109:0> = 0) &&
         (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)))
      upper bounds:
        P[<<make_list_1036@39:1>@55:0>](var215:int,var216:int) = true
        P[<<make_list_1036@42:1>@45:0>](var211:int,var212:int) = true
      begin GenHcSolver.classify_pids(53636)[4]
        output:
          [<<make_list_1036@42:1>@45:0>;<<make_list_1036@39:1>@55:0>]
      end GenHcSolver.classify_pids(53636)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(53647)[4]
        lb:(((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1)) ||
            ((<make_list_1036@42:0> = 0) && (<<make_list_1036@42:1>@45:0> = 1)))
        nub:false
        lb':(((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1)) ||
             ((<make_list_1036@42:0> = 0) && (<<make_list_1036@42:1>@45:0> = 1)))
        nub':false
        begin InterpProver.interpolate(53648)[5]
          begin InterpProver.interpolate_fresh(53649)[6]
            begin InterpProver.interpolate_log(53650)[7]
              input1: (((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1)) ||
                       ((<make_list_1036@42:0> = 0) && (<<make_list_1036@42:1>@45:0> = 1)))
              input2: false
              begin InterpProver.interpolate_check(53651)[8]
                begin InterpProver.interpolate_simplify(53652)[9]
                  begin InterpProver.interpolate_quick(53695)[10]
                    
                  end InterpProver.interpolate_quick(53695)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(53652)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(53651)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(53650)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(53649)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(53648)[5] (0.001000 sec.)
        output:
          P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
      end ApronInterface.convex_hull_interpolate(53647)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
        ((<fold_right_1030@59:1> >= 1) && (<<fold_right_1030@59:4>@129:0> < var165)) |- bot
        
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
        (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
        |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                     <<fold_right_1030@59:0>@109:1>:int,
                                                     <<<fold_right_1030@59:0>@109:2>@115:0>:int)
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int), (
        1 <= var169)
        |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                             <<fold_right_1030@59:0>@109:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<fail_1690@134:0>](var220:bool) = false
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (<<fold_right_1030@59:0>@109:0> >= 0)
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
        ((<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)) &&
         (<<fold_right_1030@59:0>@109:0> >= 0))
      upper bounds:
        P[<make_list_1036@42:0>](var226:int) = true
        P[<make_list_1036@39:0>](var223:int) = true
      begin GenHcSolver.classify_pids(62349)[4]
        output:
          [<make_list_1036@39:0>;<make_list_1036@42:0>]
      end GenHcSolver.classify_pids(62349)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(62360)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(62361)[5]
          begin InterpProver.interpolate_fresh(62362)[6]
            begin InterpProver.interpolate_log(62363)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(62364)[8]
                begin InterpProver.interpolate_simplify(62365)[9]
                  begin InterpProver.interpolate_quick(62378)[10]
                    
                  end InterpProver.interpolate_quick(62378)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(62365)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(62364)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(62363)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(62362)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(62361)[5] (0.001000 sec.)
        output:
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
          P[<make_list_1036@42:0>](<make_list_1036@39:0>:int) = true
      end ApronInterface.convex_hull_interpolate(62360)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
        ((<fold_right_1030@59:1> >= 1) && (<<fold_right_1030@59:4>@129:0> < var165)) |- bot
        
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
        (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
        |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                     <<fold_right_1030@59:0>@109:1>:int,
                                                     <<<fold_right_1030@59:0>@109:2>@115:0>:int)
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int), (
        1 <= var169)
        |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                             <<fold_right_1030@59:0>@109:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<fail_1690@134:0>](var230:bool) = false
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (<<fold_right_1030@59:0>@109:0> >= 0)
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
        ((<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)) &&
         (<<fold_right_1030@59:0>@109:0> >= 0))
      upper bounds:
        P[<fail_1690@134:0>](var233:bool) = true
      begin GenHcSolver.classify_pids(68402)[4]
        output:
          [<fail_1690@134:0>]
      end GenHcSolver.classify_pids(68402)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(68405)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(68406)[5]
          begin InterpProver.interpolate_fresh(68407)[6]
            begin InterpProver.interpolate_log(68408)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(68409)[8]
                begin InterpProver.interpolate_simplify(68410)[9]
                  begin InterpProver.interpolate_quick(68423)[10]
                    
                  end InterpProver.interpolate_quick(68423)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(68427)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(68427)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(68410)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(68409)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(68408)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(68407)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(68406)[5] (0.000000 sec.)
        output:
          P[<fail_1690@134:0>](var230:bool) = false
      end ApronInterface.convex_hull_interpolate(68405)[4] (0.000000 sec.)
      Horn clauses:
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
        ((<fold_right_1030@59:1> >= 1) && (<<fold_right_1030@59:4>@129:0> < var165)) |- bot
        
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
        (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
        |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                     <<fold_right_1030@59:0>@109:1>:int,
                                                     <<<fold_right_1030@59:0>@109:2>@115:0>:int)
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int), (
        1 <= var169)
        |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                             <<fold_right_1030@59:0>@109:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (<<fold_right_1030@59:0>@109:0> >= 0)
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
        ((<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)) &&
         (<<fold_right_1030@59:0>@109:0> >= 0))
      upper bounds:
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](var234:int,var235:int,var236:int) =
        ((var236 >= var235) || (var234 < 0))
      begin GenHcSolver.classify_pids(72343)[4]
        output:
          [<<<fold_right_1030@59:0>@109:2>@115:0>]
      end GenHcSolver.classify_pids(72343)[4] (0.000000 sec.)
      lb:((<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)) &&
          (<<fold_right_1030@59:0>@109:0> >= 0))
      nub:(not
             ((<<<fold_right_1030@59:0>@109:2>@115:0> >= <<fold_right_1030@59:0>@109:1>) ||
              (<<fold_right_1030@59:0>@109:0> < 0)))
      begin ApronInterface.convex_hull_interpolate(72346)[4]
        lb:((<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)) &&
            (<<fold_right_1030@59:0>@109:0> >= 0))
        nub:(not
               ((<<<fold_right_1030@59:0>@109:2>@115:0> >= <<fold_right_1030@59:0>@109:1>) ||
                (<<fold_right_1030@59:0>@109:0> < 0)))
        lb':((<<<fold_right_1030@59:0>@109:2>@115:0> =
              (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)) &&
             (<<fold_right_1030@59:0>@109:0> >= 0))
        nub':(not
                ((<<<fold_right_1030@59:0>@109:2>@115:0> >= <<fold_right_1030@59:0>@109:1>) ||
                 (<<fold_right_1030@59:0>@109:0> < 0)))
        begin InterpProver.interpolate(72347)[5]
          begin InterpProver.interpolate_fresh(72348)[6]
            begin InterpProver.interpolate_log(72349)[7]
              input1: ((<<<fold_right_1030@59:0>@109:2>@115:0> =
                        (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)) &&
                       (<<fold_right_1030@59:0>@109:0> >= 0))
              input2: (not
                         ((<<<fold_right_1030@59:0>@109:2>@115:0> >= <<fold_right_1030@59:0>@109:1>) ||
                          (<<fold_right_1030@59:0>@109:0> < 0)))
              begin InterpProver.interpolate_check(72350)[8]
                begin InterpProver.interpolate_simplify(72351)[9]
                  begin InterpProver.interpolate_quick(72418)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(72427)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(72428)[12]
                        begin CsisatInterface.interpolate_csisat_log(72429)[13]
                          input1: (v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0 = (v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0 + v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1) & 0 <= v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0)
                          input2: (0 <= v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0 & (1 + v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0) <= v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(72430)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(72430)[14] (0.000000 sec.)
                          output: (-2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0 + 2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(72429)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0 + 2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1) <= 0
                        after dnf conversion: (((-2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0 + 2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(72428)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(72427)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(72418)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(72351)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(72350)[8] (0.002000 sec.)
              output: (<<fold_right_1030@59:0>@109:1> <= <<<fold_right_1030@59:0>@109:2>@115:0>)
            end InterpProver.interpolate_log(72349)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(72348)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(72347)[5] (0.002000 sec.)
        output:
          P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
          (<<fold_right_1030@59:0>@109:1> <= <<<fold_right_1030@59:0>@109:2>@115:0>)
      end ApronInterface.convex_hull_interpolate(72346)[4] (0.003000 sec.)
      Horn clauses:
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
        (0 > <<fold_right_1030@59:0>@109:0>) |- bot
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int), (
        1 <= var169)
        |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                             <<fold_right_1030@59:0>@109:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (<<fold_right_1030@59:0>@109:0> >= 0)
      upper bounds:
        P[<<fold_right_1030@59:0>@109:1>](var237:int,var238:int) = (0 <= var237)
      begin GenHcSolver.classify_pids(75373)[4]
        output:
          [<<fold_right_1030@59:0>@109:1>]
      end GenHcSolver.classify_pids(75373)[4] (0.000000 sec.)
      lb:(<<fold_right_1030@59:0>@109:0> >= 0)
      nub:(not (0 <= <<fold_right_1030@59:0>@109:0>))
      begin ApronInterface.convex_hull_interpolate(75376)[4]
        lb:(<<fold_right_1030@59:0>@109:0> >= 0)
        nub:(not (0 <= <<fold_right_1030@59:0>@109:0>))
        lb':(<<fold_right_1030@59:0>@109:0> >= 0)
        nub':(not (0 <= <<fold_right_1030@59:0>@109:0>))
        begin InterpProver.interpolate(75377)[5]
          begin InterpProver.interpolate_fresh(75378)[6]
            begin InterpProver.interpolate_log(75379)[7]
              input1: (<<fold_right_1030@59:0>@109:0> >= 0)
              input2: (not (0 <= <<fold_right_1030@59:0>@109:0>))
              begin InterpProver.interpolate_check(75380)[8]
                begin InterpProver.interpolate_simplify(75381)[9]
                  begin InterpProver.interpolate_quick(75398)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(75407)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(75408)[12]
                        begin CsisatInterface.interpolate_csisat_log(75409)[13]
                          input1: 0 <= v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0
                          input2: (1 + v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(75410)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(75410)[14] (0.000000 sec.)
                          output: -2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(75409)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(75408)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(75407)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(75398)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(75381)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(75380)[8] (0.000000 sec.)
              output: (0 <= <<fold_right_1030@59:0>@109:0>)
            end InterpProver.interpolate_log(75379)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(75378)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(75377)[5] (0.000000 sec.)
        output:
          P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
          (0 <= <<fold_right_1030@59:0>@109:0>)
      end ApronInterface.convex_hull_interpolate(75376)[4] (0.000000 sec.)
      Horn clauses:
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int),
        ((1 <= var169) && (0 > <<fold_right_1030@59:0>@109:0>)) |- bot
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
      upper bounds:
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var239:int,var240:int,var241:int) =
        ((var240 <> 0) || ((1 > var239) || (0 <= var241)))
      begin GenHcSolver.classify_pids(78325)[4]
        output:
          [<<<fold_right_1030@59:2>@67:1>@90:0>]
      end GenHcSolver.classify_pids(78325)[4] (0.000000 sec.)
      lb:((<<fold_right_1030@59:2>@67:0> = 0) &&
          ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
      nub:(not
             ((<<fold_right_1030@59:2>@67:0> <> 0) ||
              ((1 > <fold_right_1030@59:1>) || (0 <= <<<fold_right_1030@59:2>@67:1>@90:0>))))
      begin ApronInterface.convex_hull_interpolate(78328)[4]
        lb:((<<fold_right_1030@59:2>@67:0> = 0) &&
            ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
        nub:(not
               ((<<fold_right_1030@59:2>@67:0> <> 0) ||
                ((1 > <fold_right_1030@59:1>) || (0 <= <<<fold_right_1030@59:2>@67:1>@90:0>))))
        lb':((<<fold_right_1030@59:2>@67:0> = 0) &&
             ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
        nub':(not
                ((<<fold_right_1030@59:2>@67:0> <> 0) ||
                 ((1 > <fold_right_1030@59:1>) || (0 <= <<<fold_right_1030@59:2>@67:1>@90:0>))))
        begin InterpProver.interpolate(78329)[5]
          begin InterpProver.interpolate_fresh(78330)[6]
            begin InterpProver.interpolate_log(78331)[7]
              input1: ((<<fold_right_1030@59:2>@67:0> = 0) &&
                       ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
              input2: (not
                         ((<<fold_right_1030@59:2>@67:0> <> 0) ||
                          ((1 > <fold_right_1030@59:1>) || (0 <= <<<fold_right_1030@59:2>@67:1>@90:0>))))
              begin InterpProver.interpolate_check(78332)[8]
                begin InterpProver.interpolate_simplify(78333)[9]
                  begin InterpProver.interpolate_quick(78438)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(78447)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(78448)[12]
                        begin CsisatInterface.interpolate_csisat_log(78449)[13]
                          input1: (0 = v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0 & 0 <= v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0 & 1 <= v_sep_fold_right_1030_sep_59_sep_1)
                          input2: (0 = v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0 & 1 <= v_sep_fold_right_1030_sep_59_sep_1 & (1 + v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(78450)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(78450)[14] (0.000000 sec.)
                          output: -2*v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(78449)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(78448)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(78447)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(78438)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(78333)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(78332)[8] (0.002000 sec.)
              output: (0 <= <<<fold_right_1030@59:2>@67:1>@90:0>)
            end InterpProver.interpolate_log(78331)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(78330)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(78329)[5] (0.002000 sec.)
        output:
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
          (0 <= <<<fold_right_1030@59:2>@67:1>@90:0>)
      end ApronInterface.convex_hull_interpolate(78328)[4] (0.002000 sec.)
      Horn clauses:
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
        (0 > <<<fold_right_1030@59:2>@67:1>@90:0>) |- bot
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
      upper bounds:
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](var242:int,var243:int,var244:int,var245:int) = (0 <= var245)
      begin GenHcSolver.classify_pids(80735)[4]
        output:
          [<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>]
      end GenHcSolver.classify_pids(80735)[4] (0.000000 sec.)
      lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<make_list_1036@39:0> >= 0) &&
           ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
      nub:(not (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>))
      begin ApronInterface.convex_hull_interpolate(80738)[4]
        lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
            ((<make_list_1036@39:0> >= 0) &&
             ((<<make_list_1036@39:1>@55:0> >= 1) &&
              (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        nub:(not (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>))
        lb':((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
             ((<make_list_1036@39:0> >= 0) &&
              ((<<make_list_1036@39:1>@55:0> >= 1) &&
               (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        nub':(not (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>))
        begin InterpProver.interpolate(80739)[5]
          begin InterpProver.interpolate_fresh(80740)[6]
            begin InterpProver.interpolate_log(80741)[7]
              input1: ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
                       ((<make_list_1036@39:0> >= 0) &&
                        ((<<make_list_1036@39:1>@55:0> >= 1) &&
                         (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
              input2: (not (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>))
              begin InterpProver.interpolate_check(80742)[8]
                begin InterpProver.interpolate_simplify(80743)[9]
                  begin InterpProver.interpolate_quick(80843)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(80852)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(80853)[12]
                        begin CsisatInterface.interpolate_csisat_log(80854)[13]
                          input1: (0 <= v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 & 1 <= v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0)
                          input2: (1 + v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(80855)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(80855)[14] (0.000000 sec.)
                          output: -2*v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(80854)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(80853)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(80852)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(80843)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(80743)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(80742)[8] (0.002000 sec.)
              output: (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
            end InterpProver.interpolate_log(80741)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(80740)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(80739)[5] (0.002000 sec.)
        output:
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
          (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
      end ApronInterface.convex_hull_interpolate(80738)[4] (0.002000 sec.)
      Horn clauses:
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
      upper bounds:
        P[<<<make_list_1036@39:1>@55:1>@71:0>](var246:int,var247:int,var248:int) = true
      begin GenHcSolver.classify_pids(81822)[4]
        output:
          [<<<make_list_1036@39:1>@55:1>@71:0>]
      end GenHcSolver.classify_pids(81822)[4] (0.000000 sec.)
      lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(81825)[4]
        lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        nub:false
        lb':((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        nub':false
        begin InterpProver.interpolate(81826)[5]
          begin InterpProver.interpolate_fresh(81827)[6]
            begin InterpProver.interpolate_log(81828)[7]
              input1: ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
              input2: false
              begin InterpProver.interpolate_check(81829)[8]
                begin InterpProver.interpolate_simplify(81830)[9]
                  begin InterpProver.interpolate_quick(81869)[10]
                    
                  end InterpProver.interpolate_quick(81869)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(81830)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(81829)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(81828)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(81827)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(81826)[5] (0.000000 sec.)
        output:
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(81825)[4] (0.000000 sec.)
      Horn clauses:
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
      upper bounds:
        P[<<fold_right_1030@59:2>@67:0>](var249:int,var250:int) = true
      begin GenHcSolver.classify_pids(82390)[4]
        output:
          [<<fold_right_1030@59:2>@67:0>]
      end GenHcSolver.classify_pids(82390)[4] (0.000000 sec.)
      lb:((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(82393)[4]
        lb:((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        nub:false
        lb':((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        nub':false
        begin InterpProver.interpolate(82394)[5]
          begin InterpProver.interpolate_fresh(82395)[6]
            begin InterpProver.interpolate_log(82396)[7]
              input1: ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
              input2: false
              begin InterpProver.interpolate_check(82397)[8]
                begin InterpProver.interpolate_simplify(82398)[9]
                  begin InterpProver.interpolate_quick(82437)[10]
                    
                  end InterpProver.interpolate_quick(82437)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(82398)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(82397)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(82396)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(82395)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(82394)[5] (0.001000 sec.)
        output:
          P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) = true
      end ApronInterface.convex_hull_interpolate(82393)[4] (0.001000 sec.)
      begin HcSolver.check_validity(82546)[4]
        input:
          P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1684@131:1>:int,<f_main_1684@131:2>:int),
          P[<<fold_right_1030@59:4>@129:0>](<f_main_1684@131:2>:int,<f_main_1684@131:0>:int,<f_main_1684@131:4>:int),
          ((<f_main_1684@131:4> < <f_main_1684@131:0>) && <fail_1690@134:0>)
          |- P[<fail_1690@134:0>](<fail_1690@134:0>:bool)
          
          P[<<fold_right_1030@96:4>@99:0>]((-1 + <fold_right_1030@59:1>):int,<fold_right_1030@59:3>:int,var165:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
          P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
          (<fold_right_1030@59:1> >= 1)
          |- P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,
                                               <fold_right_1030@59:3>:int,
                                               <<fold_right_1030@59:4>@129:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
          P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
          (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
          |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                       <<fold_right_1030@59:0>@109:1>:int,
                                                       <<<fold_right_1030@59:0>@109:2>@115:0>:int)
          
          P[<fold_right_1030@59:3>](var169:int,var168:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int),
          P[<<fold_right_1030@96:4>@99:0>]((-1 + var169):int,var168:int,<<fold_right_1030@59:0>@109:1>:int),
          (1 <= var169)
          |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                               <<fold_right_1030@59:0>@109:1>:int)
          
          P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int),
          ((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>))
          |- P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,
                                              <fold_right_1030@96:3>:int,
                                              <<fold_right_1030@96:4>@99:0>:int)
          
          P[<fold_right_1030@59:3>]((1 + <fold_right_1030@96:1>):int,<fold_right_1030@96:3>:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>]((1 + <fold_right_1030@96:1>):int,0:int,<f_fold_right_1677@94:5>:int),
          (<fold_right_1030@96:1> >= 0)
          |- P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int)
          
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
          <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
          <<<fold_right_1030@59:2>@67:1>@90:0>:int)
          
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int),
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
           ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
          |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                           <<make_list_1036@39:1>@55:0>:int,
                                                           <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                           <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
          <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,
          <<<make_list_1036@39:1>@55:1>@71:0>:int)
          
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
          ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
          |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                              <<fold_right_1030@59:2>@67:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
          <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
          
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int), (
          <make_list_1036@39:0> >= 0)
          |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                             <<make_list_1036@39:1>@55:0>:int)
          
          P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
          ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
          |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                             <<make_list_1036@42:1>@45:0>:int)
          
          P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), (
          (1 + <make_list_1036@42:0>) >= 0) |- P[<make_list_1036@42:0>](
          <make_list_1036@42:0>:int)
          
          |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(82546)[4] (0.005999 sec.)
      solution:
        P[<fail_1690@134:0>](var230:bool) = false
        P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int,<<fold_right_1030@96:4>@99:0>:int) =
        (<fold_right_1030@96:3> <= <<fold_right_1030@96:4>@99:0>)
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
        (<<fold_right_1030@59:0>@109:1> <= <<<fold_right_1030@59:0>@109:2>@115:0>)
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (0 <= <<fold_right_1030@59:0>@109:0>)
        P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int,<<fold_right_1030@96:4>@99:0>:int) =
        (<fold_right_1030@96:3> <= <<fold_right_1030@96:4>@99:0>)
        P[<fold_right_1030@96:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int) = true
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        (0 <= <<<fold_right_1030@59:2>@67:1>@90:0>)
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        true
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) = true
        P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int) = true
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
        P[<make_list_1036@42:0>](<make_list_1036@39:0>:int) = true
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
    end GenHcSolver.solve(20970)[3] (0.308953 sec.)
    begin GenHcSolver.solve(83964)[3]
      Horn clauses:
        P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1684@131:1>:int,<f_main_1684@131:2>:int),
        P[<<fold_right_1030@59:4>@129:0>](<f_main_1684@131:2>:int,<f_main_1684@131:0>:int,<f_main_1684@131:4>:int),
        ((<f_main_1684@131:4> < <f_main_1684@131:0>) && <fail_1690@134:0>)
        |- P[<fail_1690@134:0>](<fail_1690@134:0>:bool)
        
        P[<<fold_right_1030@96:4>@99:0>]((-1 + <fold_right_1030@59:1>):int,<fold_right_1030@59:3>:int,var165:int),
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
        P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
        (<fold_right_1030@59:1> >= 1)
        |- P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,
                                             <fold_right_1030@59:3>:int,
                                             <<fold_right_1030@59:4>@129:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
        (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
        |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                     <<fold_right_1030@59:0>@109:1>:int,
                                                     <<<fold_right_1030@59:0>@109:2>@115:0>:int)
        
        P[<fold_right_1030@59:3>](var169:int,var168:int),
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int),
        P[<<fold_right_1030@96:4>@99:0>]((-1 + var169):int,var168:int,<<fold_right_1030@59:0>@109:1>:int),
        (1 <= var169)
        |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                             <<fold_right_1030@59:0>@109:1>:int)
        
        P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int),
        ((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>))
        |- P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,
                                            <fold_right_1030@96:3>:int,
                                            <<fold_right_1030@96:4>@99:0>:int)
        
        P[<fold_right_1030@59:3>]((1 + <fold_right_1030@96:1>):int,<fold_right_1030@96:3>:int),
        P[<<<fold_right_1030@59:2>@67:1>@90:0>]((1 + <fold_right_1030@96:1>):int,0:int,<f_fold_right_1677@94:5>:int),
        (<fold_right_1030@96:1> >= 0)
        |- P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int),
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
        P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
        <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
        
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int), (
        <make_list_1036@39:0> >= 0)
        |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                           <<make_list_1036@39:1>@55:0>:int)
        
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
        |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                           <<make_list_1036@42:1>@45:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) =
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1))
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int) =
        ((<make_list_1036@39:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1))
        P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int) = (<fold_right_1030@59:1> = 1)
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> = 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1)))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<<make_list_1036@39:1>@55:0> = 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> = 0) && (<fold_right_1030@59:1> = 1)))
        P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int) = (<fold_right_1030@96:1> = 0)
        P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int,<<fold_right_1030@96:4>@99:0>:int) =
        ((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>))
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (<<fold_right_1030@59:0>@109:0> = 0)
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
        ((<<fold_right_1030@59:0>@109:0> = 0) &&
         (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)))
        P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int,<<fold_right_1030@59:4>@129:0>:int) =
        ((<fold_right_1030@59:1> = 1) && (<<fold_right_1030@59:4>@129:0> = <fold_right_1030@59:3>))
        P[<fail_1690@134:0>](<fail_1690@134:0>:bool) = false
      upper bounds:
        P[<<fold_right_1030@59:4>@129:0>](var260:int,var261:int,var262:int) = ((var260 <> 1) || (var262 >= var261))
        P[<<fold_right_1030@96:4>@99:0>](var255:int,var256:int,var257:int) = ((var255 <> 0) || (var257 >= var256))
      begin GenHcSolver.classify_pids(92946)[4]
        output:
          [<<fold_right_1030@96:4>@99:0>;<<fold_right_1030@59:4>@129:0>]
      end GenHcSolver.classify_pids(92946)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(93014)[4]
        lb:(((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>)) ||
            ((<fold_right_1030@96:1> = 1) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>)))
        nub:((not ((<fold_right_1030@96:1> <> 0) || (<<fold_right_1030@96:4>@99:0> >= <fold_right_1030@96:3>))) ||
             (not ((<fold_right_1030@96:1> <> 1) || (<<fold_right_1030@96:4>@99:0> >= <fold_right_1030@96:3>))))
        begin ExtFormula.Formula.case_analysis_boolean(93052)[5]
          ts: ((<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>) &&
               ((<fold_right_1030@96:1> = 0) || (<fold_right_1030@96:1> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(93052)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(93099)[5]
          ts: ((<<fold_right_1030@96:4>@99:0> < <fold_right_1030@96:3>) &&
               ((<fold_right_1030@96:1> = 0) || (<fold_right_1030@96:1> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(93099)[5] (0.000000 sec.)
        lb':(((<<fold_right_1030@96:4>@99:0> + (-1 * <fold_right_1030@96:3>)) = 0) &&
             (((1 + (-1 * <fold_right_1030@96:1>)) >= 0) && (<fold_right_1030@96:1> >= 0)))
        nub':(((1 + (-1 * <fold_right_1030@96:1>)) >= 0) &&
              ((((-1 + (-1 * <<fold_right_1030@96:4>@99:0>)) + <fold_right_1030@96:3>) >= 0) &&
               (<fold_right_1030@96:1> >= 0)))
        begin InterpProver.interpolate(93109)[5]
          begin InterpProver.interpolate_fresh(93110)[6]
            begin InterpProver.interpolate_log(93111)[7]
              input1: (((<<fold_right_1030@96:4>@99:0> + (-1 * <fold_right_1030@96:3>)) = 0) &&
                       (((1 + (-1 * <fold_right_1030@96:1>)) >= 0) && (<fold_right_1030@96:1> >= 0)))
              input2: (((1 + (-1 * <fold_right_1030@96:1>)) >= 0) &&
                       ((((-1 + (-1 * <<fold_right_1030@96:4>@99:0>)) + <fold_right_1030@96:3>) >= 0) &&
                        (<fold_right_1030@96:1> >= 0)))
              begin InterpProver.interpolate_check(93112)[8]
                begin InterpProver.interpolate_simplify(93113)[9]
                  begin InterpProver.interpolate_quick(93252)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(93261)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(93262)[12]
                        begin CsisatInterface.interpolate_csisat_log(93263)[13]
                          input1: (v_sep_fold_right_1030_sep_96_sep_3 = v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0 & 0 <= v_sep_fold_right_1030_sep_96_sep_1 & v_sep_fold_right_1030_sep_96_sep_1 <= 1)
                          input2: (0 <= v_sep_fold_right_1030_sep_96_sep_1 & v_sep_fold_right_1030_sep_96_sep_1 <= 1 & (1 + v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0) <= v_sep_fold_right_1030_sep_96_sep_3)
                          begin CsisatInterface.interpolate_csisat_raw(93264)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(93264)[14] (0.000000 sec.)
                          output: (-2*v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0 + 2*v_sep_fold_right_1030_sep_96_sep_3) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(93263)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0 + 2*v_sep_fold_right_1030_sep_96_sep_3) <= 0
                        after dnf conversion: (((-2*v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0 + 2*v_sep_fold_right_1030_sep_96_sep_3) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(93262)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(93261)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(93252)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(93113)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(93112)[8] (0.002999 sec.)
              output: (<fold_right_1030@96:3> <= <<fold_right_1030@96:4>@99:0>)
            end InterpProver.interpolate_log(93111)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(93110)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(93109)[5] (0.002999 sec.)
        output:
          P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int,<<fold_right_1030@96:4>@99:0>:int) =
          (<fold_right_1030@96:3> <= <<fold_right_1030@96:4>@99:0>)
          P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int,<<fold_right_1030@96:4>@99:0>:int) =
          (<fold_right_1030@96:3> <= <<fold_right_1030@96:4>@99:0>)
      end ApronInterface.convex_hull_interpolate(93014)[4] (0.002999 sec.)
      Horn clauses:
        P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
        P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
        ((<fold_right_1030@59:1> >= 1) &&
         ((<fold_right_1030@59:3> > <<fold_right_1030@59:4>@129:0>) && (<fold_right_1030@59:3> <= var165))) |- bot
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
        (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
        |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                     <<fold_right_1030@59:0>@109:1>:int,
                                                     <<<fold_right_1030@59:0>@109:2>@115:0>:int)
        
        P[<fold_right_1030@59:3>](var169:int,var168:int),
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int),
        ((1 <= var169) && (var168 <= <<fold_right_1030@59:0>@109:1>))
        |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                             <<fold_right_1030@59:0>@109:1>:int)
        
        P[<fold_right_1030@59:3>]((1 + <fold_right_1030@96:1>):int,<fold_right_1030@96:3>:int),
        P[<<<fold_right_1030@59:2>@67:1>@90:0>]((1 + <fold_right_1030@96:1>):int,0:int,<f_fold_right_1677@94:5>:int),
        (<fold_right_1030@96:1> >= 0)
        |- P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int),
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
        P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
        <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
        
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int), (
        <make_list_1036@39:0> >= 0)
        |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                           <<make_list_1036@39:1>@55:0>:int)
        
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
        |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                           <<make_list_1036@42:1>@45:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<fail_1690@134:0>](var266:bool) = false
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) =
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1))
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int) =
        ((<make_list_1036@39:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1))
        P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int) = (<fold_right_1030@59:1> = 1)
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> = 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1)))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<<make_list_1036@39:1>@55:0> = 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> = 0) && (<fold_right_1030@59:1> = 1)))
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (<<fold_right_1030@59:0>@109:0> = 0)
        P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int) = (<fold_right_1030@96:1> = 0)
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
        ((<<fold_right_1030@59:0>@109:0> = 0) &&
         (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)))
      upper bounds:
        P[<fold_right_1030@96:3>](var281:int,var282:int) = true
        P[<fold_right_1030@59:3>](var277:int,var278:int) = true
      begin GenHcSolver.classify_pids(106183)[4]
        output:
          [<fold_right_1030@59:3>;<fold_right_1030@96:3>]
      end GenHcSolver.classify_pids(106183)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(106194)[4]
        lb:((<fold_right_1030@59:1> = 1) || (<fold_right_1030@59:1> = 0))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(106204)[5]
          ts: ((<fold_right_1030@59:1> = 0) || (<fold_right_1030@59:1> = 1))
          
        end ExtFormula.Formula.case_analysis_boolean(106204)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(106212)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(106212)[5] (0.000000 sec.)
        lb':(((1 + (-1 * <fold_right_1030@59:1>)) >= 0) && (<fold_right_1030@59:1> >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(106215)[5]
          begin InterpProver.interpolate_fresh(106216)[6]
            begin InterpProver.interpolate_log(106217)[7]
              input1: (((1 + (-1 * <fold_right_1030@59:1>)) >= 0) && (<fold_right_1030@59:1> >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(106218)[8]
                begin InterpProver.interpolate_simplify(106219)[9]
                  begin InterpProver.interpolate_quick(106257)[10]
                    
                  end InterpProver.interpolate_quick(106257)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(106219)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(106218)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(106217)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(106216)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(106215)[5] (0.001000 sec.)
        output:
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int) = true
          P[<fold_right_1030@96:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int) = true
      end ApronInterface.convex_hull_interpolate(106194)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
        ((<fold_right_1030@59:1> >= 1) && (<<fold_right_1030@59:4>@129:0> < var165)) |- bot
        
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
        (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
        |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                     <<fold_right_1030@59:0>@109:1>:int,
                                                     <<<fold_right_1030@59:0>@109:2>@115:0>:int)
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int), (
        1 <= var169)
        |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                             <<fold_right_1030@59:0>@109:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
        P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int),
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
        
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                        -1 + <<make_list_1036@39:1>@55:0>):int), (
        <make_list_1036@39:0> >= 0)
        |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                           <<make_list_1036@39:1>@55:0>:int)
        
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
        |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                           <<make_list_1036@42:1>@45:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<fail_1690@134:0>](var286:bool) = false
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) =
        ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1))
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int) =
        ((<make_list_1036@39:0> = 0) && (<<make_list_1036@39:1>@55:0> = 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<make_list_1036@39:1>@55:0> = 1) && (<<<make_list_1036@39:1>@55:1>@71:0> = 0)))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<make_list_1036@39:0> = 0) &&
         ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<<make_list_1036@39:1>@55:0> = 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> = 0) && (<fold_right_1030@59:1> = 1)))
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (<<fold_right_1030@59:0>@109:0> = 0)
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
        ((<<fold_right_1030@59:0>@109:0> = 0) &&
         (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)))
      upper bounds:
        P[<<make_list_1036@39:1>@55:0>](var295:int,var296:int) = true
        P[<<make_list_1036@42:1>@45:0>](var291:int,var292:int) = true
      begin GenHcSolver.classify_pids(116733)[4]
        output:
          [<<make_list_1036@42:1>@45:0>;<<make_list_1036@39:1>@55:0>]
      end GenHcSolver.classify_pids(116733)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(116744)[4]
        lb:(((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1)) ||
            ((<make_list_1036@42:0> = 0) && (<<make_list_1036@42:1>@45:0> = 1)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(116762)[5]
          ts: (((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> = -1)) ||
               ((<make_list_1036@42:0> = 0) && (<<make_list_1036@42:1>@45:0> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(116762)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(116773)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(116773)[5] (0.001000 sec.)
        lb':((((-1 + <<make_list_1036@42:1>@45:0>) + (-1 * <make_list_1036@42:0>)) = 0) &&
             (((-1 * <make_list_1036@42:0>) >= 0) && ((1 + <make_list_1036@42:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(116776)[5]
          begin InterpProver.interpolate_fresh(116777)[6]
            begin InterpProver.interpolate_log(116778)[7]
              input1: ((((-1 + <<make_list_1036@42:1>@45:0>) + (-1 * <make_list_1036@42:0>)) = 0) &&
                       (((-1 * <make_list_1036@42:0>) >= 0) && ((1 + <make_list_1036@42:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(116779)[8]
                begin InterpProver.interpolate_simplify(116780)[9]
                  begin InterpProver.interpolate_quick(116886)[10]
                    
                  end InterpProver.interpolate_quick(116886)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(116780)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(116779)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(116778)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(116777)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(116776)[5] (0.001000 sec.)
        output:
          P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
      end ApronInterface.convex_hull_interpolate(116744)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
        ((<fold_right_1030@59:1> >= 1) && (<<fold_right_1030@59:4>@129:0> < var165)) |- bot
        
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
        (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
        |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                     <<fold_right_1030@59:0>@109:1>:int,
                                                     <<<fold_right_1030@59:0>@109:2>@115:0>:int)
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int), (
        1 <= var169)
        |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                             <<fold_right_1030@59:0>@109:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
        
        P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), ((1 + <make_list_1036@42:0>) >= 0)
        |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
        
        |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
        P[<fail_1690@134:0>](var300:bool) = false
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<make_list_1036@42:0>](<make_list_1036@42:0>:int) = ((1 + <make_list_1036@42:0>) >= 0)
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (<<fold_right_1030@59:0>@109:0> >= 0)
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
        ((<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)) &&
         (<<fold_right_1030@59:0>@109:0> >= 0))
      upper bounds:
        P[<make_list_1036@42:0>](var306:int) = true
        P[<make_list_1036@39:0>](var303:int) = true
      begin GenHcSolver.classify_pids(125542)[4]
        output:
          [<make_list_1036@39:0>;<make_list_1036@42:0>]
      end GenHcSolver.classify_pids(125542)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(125553)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(125556)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(125556)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(125561)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(125561)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(125564)[5]
          begin InterpProver.interpolate_fresh(125565)[6]
            begin InterpProver.interpolate_log(125566)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(125567)[8]
                begin InterpProver.interpolate_simplify(125568)[9]
                  begin InterpProver.interpolate_quick(125582)[10]
                    
                  end InterpProver.interpolate_quick(125582)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(125568)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(125567)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(125566)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(125565)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(125564)[5] (0.000000 sec.)
        output:
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
          P[<make_list_1036@42:0>](<make_list_1036@39:0>:int) = true
      end ApronInterface.convex_hull_interpolate(125553)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
        ((<fold_right_1030@59:1> >= 1) && (<<fold_right_1030@59:4>@129:0> < var165)) |- bot
        
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
        (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
        |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                     <<fold_right_1030@59:0>@109:1>:int,
                                                     <<<fold_right_1030@59:0>@109:2>@115:0>:int)
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int), (
        1 <= var169)
        |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                             <<fold_right_1030@59:0>@109:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<fail_1690@134:0>](var310:bool) = false
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (<<fold_right_1030@59:0>@109:0> >= 0)
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
        ((<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)) &&
         (<<fold_right_1030@59:0>@109:0> >= 0))
      upper bounds:
        P[<fail_1690@134:0>](var313:bool) = true
      begin GenHcSolver.classify_pids(131608)[4]
        output:
          [<fail_1690@134:0>]
      end GenHcSolver.classify_pids(131608)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(131611)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(131614)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(131614)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(131619)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(131619)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(131622)[5]
          begin InterpProver.interpolate_fresh(131623)[6]
            begin InterpProver.interpolate_log(131624)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(131625)[8]
                begin InterpProver.interpolate_simplify(131626)[9]
                  begin InterpProver.interpolate_quick(131641)[10]
                    
                  end InterpProver.interpolate_quick(131641)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(131645)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(131645)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(131626)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(131625)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(131624)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(131623)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(131622)[5] (0.001000 sec.)
        output:
          P[<fail_1690@134:0>](var310:bool) = false
      end ApronInterface.convex_hull_interpolate(131611)[4] (0.001000 sec.)
      Horn clauses:
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
        ((<fold_right_1030@59:1> >= 1) && (<<fold_right_1030@59:4>@129:0> < var165)) |- bot
        
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
        (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
        |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                     <<fold_right_1030@59:0>@109:1>:int,
                                                     <<<fold_right_1030@59:0>@109:2>@115:0>:int)
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int), (
        1 <= var169)
        |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                             <<fold_right_1030@59:0>@109:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (<<fold_right_1030@59:0>@109:0> >= 0)
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
        ((<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)) &&
         (<<fold_right_1030@59:0>@109:0> >= 0))
      upper bounds:
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](var314:int,var315:int,var316:int) =
        ((var316 >= var315) || (var314 < 0))
      begin GenHcSolver.classify_pids(135568)[4]
        output:
          [<<<fold_right_1030@59:0>@109:2>@115:0>]
      end GenHcSolver.classify_pids(135568)[4] (0.000000 sec.)
      lb:((<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)) &&
          (<<fold_right_1030@59:0>@109:0> >= 0))
      nub:(not
             ((<<<fold_right_1030@59:0>@109:2>@115:0> >= <<fold_right_1030@59:0>@109:1>) ||
              (<<fold_right_1030@59:0>@109:0> < 0)))
      begin ApronInterface.convex_hull_interpolate(135571)[4]
        lb:((<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)) &&
            (<<fold_right_1030@59:0>@109:0> >= 0))
        nub:(not
               ((<<<fold_right_1030@59:0>@109:2>@115:0> >= <<fold_right_1030@59:0>@109:1>) ||
                (<<fold_right_1030@59:0>@109:0> < 0)))
        begin ExtFormula.Formula.case_analysis_boolean(135589)[5]
          ts: ((<<<fold_right_1030@59:0>@109:2>@115:0> =
                (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>)) &&
               (<<fold_right_1030@59:0>@109:0> >= 0))
          
        end ExtFormula.Formula.case_analysis_boolean(135589)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(135610)[5]
          ts: ((<<<fold_right_1030@59:0>@109:2>@115:0> < <<fold_right_1030@59:0>@109:1>) &&
               (<<fold_right_1030@59:0>@109:0> >= 0))
          
        end ExtFormula.Formula.case_analysis_boolean(135610)[5] (0.000000 sec.)
        lb':((((<<<fold_right_1030@59:0>@109:2>@115:0> + (-1 * <<fold_right_1030@59:0>@109:1>)) +
               (-1 * <<fold_right_1030@59:0>@109:0>)) = 0) && (<<fold_right_1030@59:0>@109:0> >= 0))
        nub':((((-1 + (-1 * <<<fold_right_1030@59:0>@109:2>@115:0>)) + <<fold_right_1030@59:0>@109:1>) >= 0) &&
              (<<fold_right_1030@59:0>@109:0> >= 0))
        begin InterpProver.interpolate(135616)[5]
          begin InterpProver.interpolate_fresh(135617)[6]
            begin InterpProver.interpolate_log(135618)[7]
              input1: ((((<<<fold_right_1030@59:0>@109:2>@115:0> + (-1 * <<fold_right_1030@59:0>@109:1>)) +
                         (-1 * <<fold_right_1030@59:0>@109:0>)) = 0) && (
                       <<fold_right_1030@59:0>@109:0> >= 0))
              input2: ((((-1 + (-1 * <<<fold_right_1030@59:0>@109:2>@115:0>)) + <<fold_right_1030@59:0>@109:1>) >= 0) &&
                       (<<fold_right_1030@59:0>@109:0> >= 0))
              begin InterpProver.interpolate_check(135619)[8]
                begin InterpProver.interpolate_simplify(135620)[9]
                  begin InterpProver.interpolate_quick(135693)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(135702)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(135703)[12]
                        begin CsisatInterface.interpolate_csisat_log(135704)[13]
                          input1: (v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0 = (v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0 + v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1) & 0 <= v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0)
                          input2: (0 <= v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0 & (1 + v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0) <= v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(135705)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(135705)[14] (0.000000 sec.)
                          output: (-2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0 + 2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1) <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(135704)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0 + 2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1) <= 0
                        after dnf conversion: (((-2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0 + 2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1) <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(135703)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(135702)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(135693)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(135620)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(135619)[8] (0.003000 sec.)
              output: (<<fold_right_1030@59:0>@109:1> <= <<<fold_right_1030@59:0>@109:2>@115:0>)
            end InterpProver.interpolate_log(135618)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(135617)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(135616)[5] (0.003000 sec.)
        output:
          P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
          (<<fold_right_1030@59:0>@109:1> <= <<<fold_right_1030@59:0>@109:2>@115:0>)
      end ApronInterface.convex_hull_interpolate(135571)[4] (0.003000 sec.)
      Horn clauses:
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
        (0 > <<fold_right_1030@59:0>@109:0>) |- bot
        
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int), (
        1 <= var169)
        |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                             <<fold_right_1030@59:0>@109:1>:int)
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (<<fold_right_1030@59:0>@109:0> >= 0)
      upper bounds:
        P[<<fold_right_1030@59:0>@109:1>](var317:int,var318:int) = (0 <= var317)
      begin GenHcSolver.classify_pids(138650)[4]
        output:
          [<<fold_right_1030@59:0>@109:1>]
      end GenHcSolver.classify_pids(138650)[4] (0.000000 sec.)
      lb:(<<fold_right_1030@59:0>@109:0> >= 0)
      nub:(not (0 <= <<fold_right_1030@59:0>@109:0>))
      begin ApronInterface.convex_hull_interpolate(138653)[4]
        lb:(<<fold_right_1030@59:0>@109:0> >= 0)
        nub:(not (0 <= <<fold_right_1030@59:0>@109:0>))
        begin ExtFormula.Formula.case_analysis_boolean(138657)[5]
          ts: (<<fold_right_1030@59:0>@109:0> >= 0)
          
        end ExtFormula.Formula.case_analysis_boolean(138657)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(138664)[5]
          ts: (0 > <<fold_right_1030@59:0>@109:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(138664)[5] (0.001000 sec.)
        lb':(<<fold_right_1030@59:0>@109:0> >= 0)
        nub':((-1 + (-1 * <<fold_right_1030@59:0>@109:0>)) >= 0)
        begin InterpProver.interpolate(138668)[5]
          begin InterpProver.interpolate_fresh(138669)[6]
            begin InterpProver.interpolate_log(138670)[7]
              input1: (<<fold_right_1030@59:0>@109:0> >= 0)
              input2: ((-1 + (-1 * <<fold_right_1030@59:0>@109:0>)) >= 0)
              begin InterpProver.interpolate_check(138671)[8]
                begin InterpProver.interpolate_simplify(138672)[9]
                  begin InterpProver.interpolate_quick(138691)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(138700)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(138701)[12]
                        begin CsisatInterface.interpolate_csisat_log(138702)[13]
                          input1: 0 <= v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0
                          input2: (1 + v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(138703)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(138703)[14] (0.000000 sec.)
                          output: -2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(138702)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(138701)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(138700)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(138691)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(138672)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(138671)[8] (0.001000 sec.)
              output: (0 <= <<fold_right_1030@59:0>@109:0>)
            end InterpProver.interpolate_log(138670)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(138669)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(138668)[5] (0.001000 sec.)
        output:
          P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
          (0 <= <<fold_right_1030@59:0>@109:0>)
      end ApronInterface.convex_hull_interpolate(138653)[4] (0.002000 sec.)
      Horn clauses:
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int),
        ((1 <= var169) && (0 > <<fold_right_1030@59:0>@109:0>)) |- bot
        
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
        <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
        <<<fold_right_1030@59:2>@67:1>@90:0>:int)
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) &&
         ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
      upper bounds:
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](var319:int,var320:int,var321:int) =
        ((var320 <> 0) || ((1 > var319) || (0 <= var321)))
      begin GenHcSolver.classify_pids(141625)[4]
        output:
          [<<<fold_right_1030@59:2>@67:1>@90:0>]
      end GenHcSolver.classify_pids(141625)[4] (0.000000 sec.)
      lb:((<<fold_right_1030@59:2>@67:0> = 0) &&
          ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
      nub:(not
             ((<<fold_right_1030@59:2>@67:0> <> 0) ||
              ((1 > <fold_right_1030@59:1>) || (0 <= <<<fold_right_1030@59:2>@67:1>@90:0>))))
      begin ApronInterface.convex_hull_interpolate(141628)[4]
        lb:((<<fold_right_1030@59:2>@67:0> = 0) &&
            ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
        nub:(not
               ((<<fold_right_1030@59:2>@67:0> <> 0) ||
                ((1 > <fold_right_1030@59:1>) || (0 <= <<<fold_right_1030@59:2>@67:1>@90:0>))))
        begin ExtFormula.Formula.case_analysis_boolean(141654)[5]
          ts: ((<<fold_right_1030@59:2>@67:0> = 0) &&
               ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && (<fold_right_1030@59:1> >= 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(141654)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(141686)[5]
          ts: ((<<fold_right_1030@59:2>@67:0> = 0) &&
               ((1 <= <fold_right_1030@59:1>) && (0 > <<<fold_right_1030@59:2>@67:1>@90:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(141686)[5] (0.000000 sec.)
        lb':((<<fold_right_1030@59:2>@67:0> = 0) &&
             ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && ((-1 + <fold_right_1030@59:1>) >= 0)))
        nub':((<<fold_right_1030@59:2>@67:0> = 0) &&
              (((-1 + (-1 * <<<fold_right_1030@59:2>@67:1>@90:0>)) >= 0) && ((-1 + <fold_right_1030@59:1>) >= 0)))
        begin InterpProver.interpolate(141693)[5]
          begin InterpProver.interpolate_fresh(141694)[6]
            begin InterpProver.interpolate_log(141695)[7]
              input1: ((<<fold_right_1030@59:2>@67:0> = 0) &&
                       ((<<<fold_right_1030@59:2>@67:1>@90:0> >= 0) && ((-1 + <fold_right_1030@59:1>) >= 0)))
              input2: ((<<fold_right_1030@59:2>@67:0> = 0) &&
                       (((-1 + (-1 * <<<fold_right_1030@59:2>@67:1>@90:0>)) >= 0) &&
                        ((-1 + <fold_right_1030@59:1>) >= 0)))
              begin InterpProver.interpolate_check(141696)[8]
                begin InterpProver.interpolate_simplify(141697)[9]
                  begin InterpProver.interpolate_quick(141812)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(141821)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(141822)[12]
                        begin CsisatInterface.interpolate_csisat_log(141823)[13]
                          input1: (0 = v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0 & 0 <= v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0 & 1 <= v_sep_fold_right_1030_sep_59_sep_1)
                          input2: (0 = v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0 & 1 <= v_sep_fold_right_1030_sep_59_sep_1 & (1 + v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(141824)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(141824)[14] (0.000000 sec.)
                          output: -2*v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(141823)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(141822)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(141821)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(141812)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(141697)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(141696)[8] (0.002000 sec.)
              output: (0 <= <<<fold_right_1030@59:2>@67:1>@90:0>)
            end InterpProver.interpolate_log(141695)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(141694)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(141693)[5] (0.002000 sec.)
        output:
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
          (0 <= <<<fold_right_1030@59:2>@67:1>@90:0>)
      end ApronInterface.convex_hull_interpolate(141628)[4] (0.003000 sec.)
      Horn clauses:
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
        (0 > <<<fold_right_1030@59:2>@67:1>@90:0>) |- bot
        
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
        |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                         <<make_list_1036@39:1>@55:0>:int,
                                                         <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                         <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
        
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
         ((<make_list_1036@39:0> >= 0) &&
          ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
      upper bounds:
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](var322:int,var323:int,var324:int,var325:int) = (0 <= var325)
      begin GenHcSolver.classify_pids(144112)[4]
        output:
          [<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>]
      end GenHcSolver.classify_pids(144112)[4] (0.000000 sec.)
      lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
          ((<make_list_1036@39:0> >= 0) &&
           ((<<make_list_1036@39:1>@55:0> >= 1) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
      nub:(not (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>))
      begin ApronInterface.convex_hull_interpolate(144115)[4]
        lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
            ((<make_list_1036@39:0> >= 0) &&
             ((<<make_list_1036@39:1>@55:0> >= 1) &&
              (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
        nub:(not (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>))
        begin ExtFormula.Formula.case_analysis_boolean(144164)[5]
          ts: ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
               ((<make_list_1036@39:0> >= 0) &&
                ((<<make_list_1036@39:1>@55:0> >= 1) &&
                 (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>))))
          
        end ExtFormula.Formula.case_analysis_boolean(144164)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(144176)[5]
          ts: (0 > <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(144176)[5] (0.000000 sec.)
        lb':(((<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> + (-1 * <make_list_1036@39:0>)) = 0) &&
             ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
              (((-1 + <<make_list_1036@39:1>@55:0>) >= 0) && (<make_list_1036@39:0> >= 0))))
        nub':((-1 + (-1 * <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)) >= 0)
        begin InterpProver.interpolate(144180)[5]
          begin InterpProver.interpolate_fresh(144181)[6]
            begin InterpProver.interpolate_log(144182)[7]
              input1: (((<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> + (-1 * <make_list_1036@39:0>)) = 0) &&
                       ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
                        (((-1 + <<make_list_1036@39:1>@55:0>) >= 0) && (<make_list_1036@39:0> >= 0))))
              input2: ((-1 + (-1 * <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)) >= 0)
              begin InterpProver.interpolate_check(144183)[8]
                begin InterpProver.interpolate_simplify(144184)[9]
                  begin InterpProver.interpolate_quick(144280)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(144289)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(144290)[12]
                        begin CsisatInterface.interpolate_csisat_log(144291)[13]
                          input1: (0 <= v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 & 1 <= v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0)
                          input2: (1 + v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(144292)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(144292)[14] (0.000000 sec.)
                          output: -2*v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(144291)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(144290)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(144289)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(144280)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(144184)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(144183)[8] (0.001999 sec.)
              output: (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
            end InterpProver.interpolate_log(144182)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(144181)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(144180)[5] (0.001999 sec.)
        output:
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
          (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
      end ApronInterface.convex_hull_interpolate(144115)[4] (0.002999 sec.)
      Horn clauses:
        P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
        <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int)
        
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
      upper bounds:
        P[<<<make_list_1036@39:1>@55:1>@71:0>](var326:int,var327:int,var328:int) = true
      begin GenHcSolver.classify_pids(145266)[4]
        output:
          [<<<make_list_1036@39:1>@55:1>@71:0>]
      end GenHcSolver.classify_pids(145266)[4] (0.000000 sec.)
      lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(145269)[4]
        lb:((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(145282)[5]
          ts: ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && (<<make_list_1036@39:1>@55:0> >= 1))
          
        end ExtFormula.Formula.case_analysis_boolean(145282)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(145290)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(145290)[5] (0.000000 sec.)
        lb':((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && ((-1 + <<make_list_1036@39:1>@55:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(145293)[5]
          begin InterpProver.interpolate_fresh(145294)[6]
            begin InterpProver.interpolate_log(145295)[7]
              input1: ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) && ((-1 + <<make_list_1036@39:1>@55:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(145296)[8]
                begin InterpProver.interpolate_simplify(145297)[9]
                  begin InterpProver.interpolate_quick(145337)[10]
                    
                  end InterpProver.interpolate_quick(145337)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(145297)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(145296)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(145295)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(145294)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(145293)[5] (0.001000 sec.)
        output:
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(145269)[4] (0.001000 sec.)
      Horn clauses:
         ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                            <<fold_right_1030@59:2>@67:0>:int)
      lower bounds:
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) =
        ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
      upper bounds:
        P[<<fold_right_1030@59:2>@67:0>](var329:int,var330:int) = true
      begin GenHcSolver.classify_pids(145860)[4]
        output:
          [<<fold_right_1030@59:2>@67:0>]
      end GenHcSolver.classify_pids(145860)[4] (0.000000 sec.)
      lb:((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(145863)[4]
        lb:((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(145876)[5]
          ts: ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
          
        end ExtFormula.Formula.case_analysis_boolean(145876)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(145884)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(145884)[5] (0.000000 sec.)
        lb':((<<fold_right_1030@59:2>@67:0> = 0) && ((-1 + <fold_right_1030@59:1>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(145887)[5]
          begin InterpProver.interpolate_fresh(145888)[6]
            begin InterpProver.interpolate_log(145889)[7]
              input1: ((<<fold_right_1030@59:2>@67:0> = 0) && ((-1 + <fold_right_1030@59:1>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(145890)[8]
                begin InterpProver.interpolate_simplify(145891)[9]
                  begin InterpProver.interpolate_quick(145931)[10]
                    
                  end InterpProver.interpolate_quick(145931)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(145891)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(145890)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(145889)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(145888)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(145887)[5] (0.000000 sec.)
        output:
          P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) = true
      end ApronInterface.convex_hull_interpolate(145863)[4] (0.001000 sec.)
      begin HcSolver.check_validity(146042)[4]
        input:
          P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1684@131:1>:int,<f_main_1684@131:2>:int),
          P[<<fold_right_1030@59:4>@129:0>](<f_main_1684@131:2>:int,<f_main_1684@131:0>:int,<f_main_1684@131:4>:int),
          ((<f_main_1684@131:4> < <f_main_1684@131:0>) && <fail_1690@134:0>)
          |- P[<fail_1690@134:0>](<fail_1690@134:0>:bool)
          
          P[<<fold_right_1030@96:4>@99:0>]((-1 + <fold_right_1030@59:1>):int,<fold_right_1030@59:3>:int,var165:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
          P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
          (<fold_right_1030@59:1> >= 1)
          |- P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,
                                               <fold_right_1030@59:3>:int,
                                               <<fold_right_1030@59:4>@129:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
          P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
          (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
          |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                       <<fold_right_1030@59:0>@109:1>:int,
                                                       <<<fold_right_1030@59:0>@109:2>@115:0>:int)
          
          P[<fold_right_1030@59:3>](var169:int,var168:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int),
          P[<<fold_right_1030@96:4>@99:0>]((-1 + var169):int,var168:int,<<fold_right_1030@59:0>@109:1>:int),
          (1 <= var169)
          |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                               <<fold_right_1030@59:0>@109:1>:int)
          
          P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int),
          ((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>))
          |- P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,
                                              <fold_right_1030@96:3>:int,
                                              <<fold_right_1030@96:4>@99:0>:int)
          
          P[<fold_right_1030@59:3>]((1 + <fold_right_1030@96:1>):int,<fold_right_1030@96:3>:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>]((1 + <fold_right_1030@96:1>):int,0:int,<f_fold_right_1677@94:5>:int),
          (<fold_right_1030@96:1> >= 0)
          |- P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int)
          
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
          <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
          <<<fold_right_1030@59:2>@67:1>@90:0>:int)
          
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int),
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
           ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
          |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                           <<make_list_1036@39:1>@55:0>:int,
                                                           <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                           <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
          <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,
          <<<make_list_1036@39:1>@55:1>@71:0>:int)
          
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
          ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
          |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                              <<fold_right_1030@59:2>@67:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
          <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
          
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int), (
          <make_list_1036@39:0> >= 0)
          |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                             <<make_list_1036@39:1>@55:0>:int)
          
          P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
          ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
          |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                             <<make_list_1036@42:1>@45:0>:int)
          
          P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), (
          (1 + <make_list_1036@42:0>) >= 0) |- P[<make_list_1036@42:0>](
          <make_list_1036@42:0>:int)
          
          |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(146042)[4] (0.007999 sec.)
      solution:
        P[<fail_1690@134:0>](var310:bool) = false
        P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int,<<fold_right_1030@96:4>@99:0>:int) =
        (<fold_right_1030@96:3> <= <<fold_right_1030@96:4>@99:0>)
        P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int,<<<fold_right_1030@59:0>@109:2>@115:0>:int) =
        (<<fold_right_1030@59:0>@109:1> <= <<<fold_right_1030@59:0>@109:2>@115:0>)
        P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int) =
        (0 <= <<fold_right_1030@59:0>@109:0>)
        P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int,<<fold_right_1030@96:4>@99:0>:int) =
        (<fold_right_1030@96:3> <= <<fold_right_1030@96:4>@99:0>)
        P[<fold_right_1030@96:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int) = true
        P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int) =
        (0 <= <<<fold_right_1030@59:2>@67:1>@90:0>)
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int,<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int) =
        (0 <= <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>)
        P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int) =
        true
        P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int) = true
        P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int) = true
        P[<<make_list_1036@39:1>@55:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
        P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,<<make_list_1036@42:1>@45:0>:int) = true
        P[<make_list_1036@42:0>](<make_list_1036@39:0>:int) = true
        P[<make_list_1036@39:0>](<make_list_1036@39:0>:int) = true
    end GenHcSolver.solve(83964)[3] (0.333949 sec.)
    begin YhornInterface.solve(147460)[3]
      begin HcSolver.solve_ub(147461)[4]
        encoded:
          P[<fail_1690@134:0>](<fail_1690@134:0>:int)|- bot
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1684@131:1>:int,<f_main_1684@131:2>:int),
          P[<<fold_right_1030@59:4>@129:0>](<f_main_1684@131:2>:int,<f_main_1684@131:0>:int,<f_main_1684@131:4>:int),
          ((<f_main_1684@131:4> < <f_main_1684@131:0>) && (<fail_1690@134:0> = 1))
          |- P[<fail_1690@134:0>](<fail_1690@134:0>:int)
          
          P[<<fold_right_1030@96:4>@99:0>]((-1 + <fold_right_1030@59:1>):int,<fold_right_1030@59:3>:int,var165:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
          P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
          (<fold_right_1030@59:1> >= 1)
          |- P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,
                                               <fold_right_1030@59:3>:int,
                                               <<fold_right_1030@59:4>@129:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
          P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
          (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
          |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                       <<fold_right_1030@59:0>@109:1>:int,
                                                       <<<fold_right_1030@59:0>@109:2>@115:0>:int)
          
          P[<fold_right_1030@59:3>](var169:int,var168:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int),
          P[<<fold_right_1030@96:4>@99:0>]((-1 + var169):int,var168:int,<<fold_right_1030@59:0>@109:1>:int),
          (1 <= var169)
          |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                               <<fold_right_1030@59:0>@109:1>:int)
          
          P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int),
          ((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>))
          |- P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,
                                              <fold_right_1030@96:3>:int,
                                              <<fold_right_1030@96:4>@99:0>:int)
          
          P[<fold_right_1030@59:3>]((1 + <fold_right_1030@96:1>):int,<fold_right_1030@96:3>:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>]((1 + <fold_right_1030@96:1>):int,0:int,<f_fold_right_1677@94:5>:int),
          (<fold_right_1030@96:1> >= 0)
          |- P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int)
          
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
          <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
          <<<fold_right_1030@59:2>@67:1>@90:0>:int)
          
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int),
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
           ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
          |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                           <<make_list_1036@39:1>@55:0>:int,
                                                           <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                           <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
          <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,
          <<<make_list_1036@39:1>@55:1>@71:0>:int)
          
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
          ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
          |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                              <<fold_right_1030@59:2>@67:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
          <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
          
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int), (
          <make_list_1036@39:0> >= 0)
          |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                             <<make_list_1036@39:1>@55:0>:int)
          
          P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
          ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
          |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                             <<make_list_1036@42:1>@45:0>:int)
          
          P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), (
          (1 + <make_list_1036@42:0>) >= 0) |- P[<make_list_1036@42:0>](
          <make_list_1036@42:0>:int)
          
          |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
        input to Yhorn:
          P[<fail_1690@134:0>](<fail_1690@134:0>:int)|- bot
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1684@131:1>:int,<f_main_1684@131:2>:int),
          P[<<fold_right_1030@59:4>@129:0>](<f_main_1684@131:2>:int,<f_main_1684@131:0>:int,<f_main_1684@131:4>:int),
          ((<f_main_1684@131:4> < <f_main_1684@131:0>) && (<fail_1690@134:0> = 1))
          |- P[<fail_1690@134:0>](<fail_1690@134:0>:int)
          
          P[<<fold_right_1030@96:4>@99:0>](var331:int,<fold_right_1030@59:3>:int,var165:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,var332:int,var164:int),
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
          P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
          (((1 + var331) = <fold_right_1030@59:1>) && ((<fold_right_1030@59:1> >= 1) && (var332 = 0)))
          |- P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,
                                               <fold_right_1030@59:3>:int,
                                               <<fold_right_1030@59:4>@129:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
          P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
          (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
          |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                       <<fold_right_1030@59:0>@109:1>:int,
                                                       <<<fold_right_1030@59:0>@109:2>@115:0>:int)
          
          P[<fold_right_1030@59:3>](var169:int,var168:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,var333:int,<<fold_right_1030@59:0>@109:0>:int),
          P[<<fold_right_1030@96:4>@99:0>](var334:int,var168:int,<<fold_right_1030@59:0>@109:1>:int),
          (((1 + var334) = var169) && ((1 <= var169) && (var333 = 0)))
          |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                               <<fold_right_1030@59:0>@109:1>:int)
          
          P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int),
          ((<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>) && (<fold_right_1030@96:1> = 0))
          |- P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,
                                              <fold_right_1030@96:3>:int,
                                              <<fold_right_1030@96:4>@99:0>:int)
          
          P[<fold_right_1030@59:3>](var335:int,<fold_right_1030@96:3>:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](var336:int,var337:int,<f_fold_right_1677@94:5>:int),
          ((var336 = (1 + <fold_right_1030@96:1>)) &&
           ((var335 = (1 + <fold_right_1030@96:1>)) && ((<fold_right_1030@96:1> >= 0) && (var337 = 0))))
          |- P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int)
          
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
          <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
          <<<fold_right_1030@59:2>@67:1>@90:0>:int)
          
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>](var338:int,var339:int),
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          ((<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>) &&
           (((1 + var339) = <<make_list_1036@39:1>@55:0>) &&
            (((1 + var338) = <make_list_1036@39:0>) &&
             ((<make_list_1036@39:0> >= 0) && (<<<make_list_1036@39:1>@55:1>@71:0> = 0)))))
          |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                           <<make_list_1036@39:1>@55:0>:int,
                                                           <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                           <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
          <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,
          <<<make_list_1036@39:1>@55:1>@71:0>:int)
          
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
          ((<fold_right_1030@59:1> >= 1) && (<<fold_right_1030@59:2>@67:0> = 0))
          |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                              <<fold_right_1030@59:2>@67:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
          <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
          
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>](var340:int,var341:int),
          (((1 + var341) = <<make_list_1036@39:1>@55:0>) &&
           (((1 + var340) = <make_list_1036@39:0>) && (<make_list_1036@39:0> >= 0)))
          |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                             <<make_list_1036@39:1>@55:0>:int)
          
          P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
          ((<make_list_1036@42:0> < 0) && (<<make_list_1036@42:1>@45:0> = 0))
          |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                             <<make_list_1036@42:1>@45:0>:int)
          
          P[<make_list_1036@39:0>](var342:int),
          ((var342 = (1 + <make_list_1036@42:0>)) && ((1 + <make_list_1036@42:0>) >= 0))
          |- P[<make_list_1036@42:0>](<make_list_1036@42:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1690_sep_134_sep_0($141)) -> 1=0.
(($141-1=0) & ($142-$143<0)) & (v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0($144,$143,$142)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($145,$144)) -> v_sep_fail_1690_sep_134_sep_0($141).
(($146=0) & ($147-1>=0) & (-$147+$148+1=0)) & (v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0($149,$150,$151)) & (v_sep_fold_right_1030_sep_59_sep_3($147,$152)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($147,$146,$149)) & (v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0($148,$152,$150)) -> v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0($147,$152,$151).
($153-$154-$155=0) & (v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1($154,$155)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($156,$147)) -> v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0($154,$155,$153).
(($157=0) & (-$158+1<=0) & (-$158+$159+1=0)) & (v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0($159,$160,$155)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($158,$157,$154)) & (v_sep_fold_right_1030_sep_59_sep_3($158,$160)) -> v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1($154,$155).
(($161=0) & ($162-$163=0)) & (v_sep_fold_right_1030_sep_96_sep_3($161,$163)) -> v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0($161,$163,$162).
(($164=0) & ($161>=0) & (-$161+$165-1=0) & (-$161+$166-1=0)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($166,$164,$167)) & (v_sep_fold_right_1030_sep_59_sep_3($165,$163)) -> v_sep_fold_right_1030_sep_96_sep_3($161,$163).
(0=0) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($156,$147)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0($156,$147,$168,$169)) -> v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($147,$168,$169).
(($170=0) & ($171>=0) & (-$171+$172+1=0) & ($173-$174+1=0) & (-$171+$175=0)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($171,$174)) & (v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($172,$173)) & (v_sep_make_list_1036_sep_39_sep_0($171)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0($171,$174,$170)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0($171,$174,$170,$175).
(0=0) & (v_sep_make_list_1036_sep_39_sep_0($171)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0($174,$170)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($171,$174)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0($171,$174,$170).
(($168=0) & ($147-1>=0)) & (v_sep_fold_right_1030_sep_59_sep_3($147,$176)) -> v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0($147,$168).
(0=0) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($156,$147)) -> v_sep_fold_right_1030_sep_59_sep_3($147,$152).
(($171>=0) & (-$171+$177+1=0) & (-$174+$178+1=0)) & (v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($177,$178)) & (v_sep_make_list_1036_sep_39_sep_0($171)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($171,$174).
(($179=0) & ($180<0)) & (v_sep_make_list_1036_sep_42_sep_0($180)) -> v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($180,$179).
(($180+1>=0) & (-$180+$181-1=0)) & (v_sep_make_list_1036_sep_39_sep_0($181)) -> v_sep_make_list_1036_sep_42_sep_0($180).
0=0 -> v_sep_make_list_1036_sep_39_sep_0($171).


v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...............................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...........................Split conj [48] 1.292802
(Reconstrcut: 25 ******)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.......................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: X
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................Split conj [58] 1.362792
(Reconstrcut: 23 ****)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..............................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................Split conj [64] 1.431782
(Reconstrcut: 31 ****)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
......................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: X
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................Split conj [70] 1.498772
(Reconstrcut: 15 ***)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
......................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: X
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................Split conj [74] 1.582759
(Reconstrcut: 11 **)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...............
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: X
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.............................................Split conj [76] 1.690742
(Reconstrcut: 15 **)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.............................................Split conj [78] 1.864715
(Reconstrcut: 19 **)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.......................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: X
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.............................................Split conj [80] 2.03069
(Reconstrcut: 27 ****)
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
...........................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
....
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..........
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.............................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
..............................................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.................................................................
v_sep_fail_1690_sep_134_sep_0: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1: X
v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0: X
v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_3: (X) & (X) & (X) & (X)
v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0: X
v_sep_fold_right_1030_sep_96_sep_3: (X) & (X)
v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0: (X) & (X)
v_sep_make_list_1036_sep_39_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0: X
v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0: (X) & (X) & (X) & (X)
v_sep_make_list_1036_sep_42_sep_0: X
v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0: X
.......................................................................(0=0) & (v_sep_fail_1690_sep_134_sep_0($141)) -> 1=0.
(($141-1=0) & ($142-$143<0)) & (v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0($144,$143,$142)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($145,$144)) -> v_sep_fail_1690_sep_134_sep_0($141).
(($146=0) & ($147-1>=0) & (-$147+$148+1=0)) & (v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0($149,$150,$151)) & (v_sep_fold_right_1030_sep_59_sep_3($147,$152)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($147,$146,$149)) & (v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0($148,$152,$150)) -> v_sep_fold_right_1030_sep_59_sep_4_sep_129_sep_0($147,$152,$151).
($153-$154-$155=0) & (v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1($154,$155)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($156,$147)) -> v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_2_sep_115_sep_0($154,$155,$153).
(($157=0) & (-$158+1<=0) & (-$158+$159+1=0)) & (v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0($159,$160,$155)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($158,$157,$154)) & (v_sep_fold_right_1030_sep_59_sep_3($158,$160)) -> v_sep_fold_right_1030_sep_59_sep_0_sep_109_sep_1($154,$155).
(($161=0) & ($162-$163=0)) & (v_sep_fold_right_1030_sep_96_sep_3($161,$163)) -> v_sep_fold_right_1030_sep_96_sep_4_sep_99_sep_0($161,$163,$162).
(($164=0) & ($161>=0) & (-$161+$165-1=0) & (-$161+$166-1=0)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($166,$164,$167)) & (v_sep_fold_right_1030_sep_59_sep_3($165,$163)) -> v_sep_fold_right_1030_sep_96_sep_3($161,$163).
(0=0) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($156,$147)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0($156,$147,$168,$169)) -> v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_1_sep_90_sep_0($147,$168,$169).
(($170=0) & ($171>=0) & (-$171+$172+1=0) & ($173-$174+1=0) & (-$171+$175=0)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($171,$174)) & (v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($172,$173)) & (v_sep_make_list_1036_sep_39_sep_0($171)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0($171,$174,$170)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_1_sep_86_sep_0($171,$174,$170,$175).
(0=0) & (v_sep_make_list_1036_sep_39_sep_0($171)) & (v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0($174,$170)) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($171,$174)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_1_sep_71_sep_0($171,$174,$170).
(($168=0) & ($147-1>=0)) & (v_sep_fold_right_1030_sep_59_sep_3($147,$176)) -> v_sep_fold_right_1030_sep_59_sep_2_sep_67_sep_0($147,$168).
(0=0) & (v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($156,$147)) -> v_sep_fold_right_1030_sep_59_sep_3($147,$152).
(($171>=0) & (-$171+$177+1=0) & (-$174+$178+1=0)) & (v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($177,$178)) & (v_sep_make_list_1036_sep_39_sep_0($171)) -> v_sep_make_list_1036_sep_39_sep_1_sep_55_sep_0($171,$174).
(($179=0) & ($180<0)) & (v_sep_make_list_1036_sep_42_sep_0($180)) -> v_sep_make_list_1036_sep_42_sep_1_sep_45_sep_0($180,$179).
(($180+1>=0) & (-$180+$181-1=0)) & (v_sep_make_list_1036_sep_39_sep_0($181)) -> v_sep_make_list_1036_sep_42_sep_0($180).
0=0 -> v_sep_make_list_1036_sep_39_sep_0($171).

          |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
        solution:
          P[<fail_1690@134:0>]($182:bool) = false
          P[<<fold_right_1030@59:0>@109:1>]($223:int,$225:int) = true
          P[<<<fold_right_1030@59:0>@109:2>@115:0>]($197:int,$199:int,$201:int) = (($199 + $197) <= $201)
          P[<<fold_right_1030@59:2>@67:0>]($257:int,$259:int) = true
          P[<<<fold_right_1030@59:2>@67:1>@90:0>]($209:int,$211:int,$213:int) = (0 <= $213)
          P[<fold_right_1030@59:3>]($204:int,$206:int) = true
          P[<<fold_right_1030@59:4>@129:0>]($185:int,$187:int,$189:int) = ($187 <= $189)
          P[<fold_right_1030@96:3>]($228:int,$230:int) = true
          P[<<fold_right_1030@96:4>@99:0>]($216:int,$218:int,$220:int) = ($218 <= $220)
          P[<make_list_1036@39:0>]($247:int) = true
          P[<<make_list_1036@39:1>@55:0>]($192:int,$194:int) = true
          P[<<<make_list_1036@39:1>@55:1>@71:0>]($250:int,$252:int,$254:int) = true
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>]($233:int,$235:int,$237:int,$239:int) = (0 <= $239)
          P[<make_list_1036@42:0>]($262:int) = true
          P[<<make_list_1036@42:1>@45:0>]($242:int,$244:int) = true
        
      end HcSolver.solve_ub(147461)[4] (1.069838 sec.)
      begin HcSolver.check_validity(148397)[4]
        input:
          P[<fail_1690@134:0>](<fail_1690@134:0>:bool)|- bot
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1684@131:1>:int,<f_main_1684@131:2>:int),
          P[<<fold_right_1030@59:4>@129:0>](<f_main_1684@131:2>:int,<f_main_1684@131:0>:int,<f_main_1684@131:4>:int),
          ((<f_main_1684@131:4> < <f_main_1684@131:0>) && <fail_1690@134:0>)
          |- P[<fail_1690@134:0>](<fail_1690@134:0>:bool)
          
          P[<<fold_right_1030@96:4>@99:0>]((-1 + <fold_right_1030@59:1>):int,<fold_right_1030@59:3>:int,var165:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](<fold_right_1030@59:1>:int,0:int,var164:int),
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int),
          P[<<<fold_right_1030@59:0>@109:2>@115:0>](var164:int,var165:int,<<fold_right_1030@59:4>@129:0>:int),
          (<fold_right_1030@59:1> >= 1)
          |- P[<<fold_right_1030@59:4>@129:0>](<fold_right_1030@59:1>:int,
                                               <fold_right_1030@59:3>:int,
                                               <<fold_right_1030@59:4>@129:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int),
          P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,<<fold_right_1030@59:0>@109:1>:int),
          (<<<fold_right_1030@59:0>@109:2>@115:0> = (<<fold_right_1030@59:0>@109:0> + <<fold_right_1030@59:0>@109:1>))
          |- P[<<<fold_right_1030@59:0>@109:2>@115:0>](<<fold_right_1030@59:0>@109:0>:int,
                                                       <<fold_right_1030@59:0>@109:1>:int,
                                                       <<<fold_right_1030@59:0>@109:2>@115:0>:int)
          
          P[<fold_right_1030@59:3>](var169:int,var168:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>](var169:int,0:int,<<fold_right_1030@59:0>@109:0>:int),
          P[<<fold_right_1030@96:4>@99:0>]((-1 + var169):int,var168:int,<<fold_right_1030@59:0>@109:1>:int),
          (1 <= var169)
          |- P[<<fold_right_1030@59:0>@109:1>](<<fold_right_1030@59:0>@109:0>:int,
                                               <<fold_right_1030@59:0>@109:1>:int)
          
          P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int),
          ((<fold_right_1030@96:1> = 0) && (<<fold_right_1030@96:4>@99:0> = <fold_right_1030@96:3>))
          |- P[<<fold_right_1030@96:4>@99:0>](<fold_right_1030@96:1>:int,
                                              <fold_right_1030@96:3>:int,
                                              <<fold_right_1030@96:4>@99:0>:int)
          
          P[<fold_right_1030@59:3>]((1 + <fold_right_1030@96:1>):int,<fold_right_1030@96:3>:int),
          P[<<<fold_right_1030@59:2>@67:1>@90:0>]((1 + <fold_right_1030@96:1>):int,0:int,<f_fold_right_1677@94:5>:int),
          (<fold_right_1030@96:1> >= 0)
          |- P[<fold_right_1030@96:3>](<fold_right_1030@96:1>:int,<fold_right_1030@96:3>:int)
          
          P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,<<<fold_right_1030@59:2>@67:1>@90:0>:int),
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<<<fold_right_1030@59:2>@67:1>@90:0>](
          <fold_right_1030@59:1>:int,<<fold_right_1030@59:2>@67:0>:int,
          <<<fold_right_1030@59:2>@67:1>@90:0>:int)
          
          P[<<<make_list_1036@39:1>@55:1>@71:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int),
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          ((<<<make_list_1036@39:1>@55:1>@71:0> = 0) &&
           ((<make_list_1036@39:0> >= 0) && (<<<<make_list_1036@39:1>@55:1>@71:1>@86:0> = <make_list_1036@39:0>)))
          |- P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>](<make_list_1036@39:0>:int,
                                                           <<make_list_1036@39:1>@55:0>:int,
                                                           <<<make_list_1036@39:1>@55:1>@71:0>:int,
                                                           <<<<make_list_1036@39:1>@55:1>@71:1>@86:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int),
          P[<<fold_right_1030@59:2>@67:0>](<<make_list_1036@39:1>@55:0>:int,<<<make_list_1036@39:1>@55:1>@71:0>:int),
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)|- P[<<<make_list_1036@39:1>@55:1>@71:0>](
          <make_list_1036@39:0>:int,<<make_list_1036@39:1>@55:0>:int,
          <<<make_list_1036@39:1>@55:1>@71:0>:int)
          
          P[<fold_right_1030@59:3>](<fold_right_1030@59:1>:int,<br_fold_right_1688@62:4>:int),
          ((<<fold_right_1030@59:2>@67:0> = 0) && (<fold_right_1030@59:1> >= 1))
          |- P[<<fold_right_1030@59:2>@67:0>](<fold_right_1030@59:1>:int,
                                              <<fold_right_1030@59:2>@67:0>:int)
          
          P[<<make_list_1036@39:1>@55:0>](<f_main_1683@57:1>:int,<fold_right_1030@59:1>:int)|- P[<fold_right_1030@59:3>](
          <fold_right_1030@59:1>:int,<fold_right_1030@59:3>:int)
          
          P[<make_list_1036@39:0>](<make_list_1036@39:0>:int),
          P[<<make_list_1036@42:1>@45:0>]((-1 + <make_list_1036@39:0>):int,(
                                          -1 + <<make_list_1036@39:1>@55:0>):int), (
          <make_list_1036@39:0> >= 0)
          |- P[<<make_list_1036@39:1>@55:0>](<make_list_1036@39:0>:int,
                                             <<make_list_1036@39:1>@55:0>:int)
          
          P[<make_list_1036@42:0>](<make_list_1036@42:0>:int),
          ((<<make_list_1036@42:1>@45:0> = 0) && (<make_list_1036@42:0> < 0))
          |- P[<<make_list_1036@42:1>@45:0>](<make_list_1036@42:0>:int,
                                             <<make_list_1036@42:1>@45:0>:int)
          
          P[<make_list_1036@39:0>]((1 + <make_list_1036@42:0>):int), (
          (1 + <make_list_1036@42:0>) >= 0) |- P[<make_list_1036@42:0>](
          <make_list_1036@42:0>:int)
          
          |- P[<make_list_1036@39:0>](<make_list_1036@39:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(148397)[4] (0.019997 sec.)
      solution:
        P[<fail_1690@134:0>]($182:bool) = false
        P[<<fold_right_1030@59:0>@109:1>]($223:int,$225:int) = true
        P[<<<fold_right_1030@59:0>@109:2>@115:0>]($197:int,$199:int,$201:int) = (($199 + $197) <= $201)
        P[<<fold_right_1030@59:2>@67:0>]($257:int,$259:int) = true
        P[<<<fold_right_1030@59:2>@67:1>@90:0>]($209:int,$211:int,$213:int) = (0 <= $213)
        P[<fold_right_1030@59:3>]($204:int,$206:int) = true
        P[<<fold_right_1030@59:4>@129:0>]($185:int,$187:int,$189:int) = ($187 <= $189)
        P[<fold_right_1030@96:3>]($228:int,$230:int) = true
        P[<<fold_right_1030@96:4>@99:0>]($216:int,$218:int,$220:int) = ($218 <= $220)
        P[<make_list_1036@39:0>]($247:int) = true
        P[<<make_list_1036@39:1>@55:0>]($192:int,$194:int) = true
        P[<<<make_list_1036@39:1>@55:1>@71:0>]($250:int,$252:int,$254:int) = true
        P[<<<<make_list_1036@39:1>@55:1>@71:1>@86:0>]($233:int,$235:int,$237:int,$239:int) = (0 <= $239)
        P[<make_list_1036@42:0>]($262:int) = true
        P[<<make_list_1036@42:1>@45:0>]($242:int,$244:int) = true
    end YhornInterface.solve(147460)[3] (1.091834 sec.)
    
  end RefTypeInfer.infer_etrs(13043)[2] (1.857717 sec.)
  refinement types:
    main_1676: X
    f_1685: v1:int -> X
    f_1686: v1:int -> v2:int -> X
    main_1041: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1036: v1:int -> (v2:int -> (v3:int -> (v4:{v4:int | (0 <= v4)} -> X) -> X) -> X) -> X
    make_list_1036: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_make_list_1682: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1133: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_1683: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    fold_right_1030: (v1:int -> v2:{v2:int | (0 <= v1)} -> (v3:{v3:int | (v2 <= v3)} -> X) -> X) ->
                     v6:int ->
                     (v7:int -> (v8:{v8:int | (0 <= v8)} -> X) -> X) ->
                     v11:int -> (v12:{v12:int | (v11 <= v12)} -> X) -> X
    br_fold_right_1688: v1:bool ->
                        (v2:int -> v3:int -> (v4:int -> X) -> X) ->
                        v7:int -> (v8:int -> (v9:int -> X) -> X) -> v12:int -> (v13:int -> X) -> X
    f_cons_make_list_1681: v1:int -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> v8:int -> (v9:int -> X) -> X
    f_fold_right_1677: v1:int ->
                       v2:int ->
                       (v3:int -> v4:int -> (v5:int -> X) -> X) ->
                       (v8:int -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    fold_right_1030: (v1:int -> v2:int -> (v3:int -> X) -> X) ->
                     v6:int -> (v7:int -> (v8:int -> X) -> X) -> v11:int -> (v12:{v12:int | (v11 <= v12)} -> X) -> X
    f_fold_right_1679: v1:int ->
                       v2:int -> v3:int -> (v4:int -> v5:int -> (v6:int -> X) -> X) -> (v9:int -> X) -> v11:int -> X
    add_1038: v1:int -> v2:int -> (v3:int -> X) -> X
    f_main_1684: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    fail_1690: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1687: var383:int -> var382:int -> var381:unit -> X
    f_fold_right_1678: var394:int ->
                       var393:int ->
                       var392:int -> (var391:int -> (var390:int -> X) -> X) -> var387:int -> (var386:int -> X) -> X
    f_make_list_1680: var399:int -> var398:int -> (var397:int -> X) -> X
  abstraction types:
    main_1676: X
    f_1685: v1:int -> X
    f_1686: v1:int -> v2:int -> X
    main_1041: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1036: var400:int ->
                    (var401:int -> (var402:int -> (var403:int[var403 -> (
                                                              0 <= var403)] -> X) -> X) -> X) -> X
    f_make_list_1682: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1133: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_1683: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    fold_right_1030: (var408:int ->
                      var409:int[var409 -> (0 <= var408)] -> (var410:int[var410 -> (
                                                                    var409 <= var410)] -> X) -> X) ->
                     var413:int ->
                     (var414:int -> (var415:int[var415 -> (0 <= var415)] -> X) -> X) ->
                     var418:int -> (var419:int[var419 -> (var418 <= var419)] -> X) -> X
    br_fold_right_1688: v1:bool ->
                        (v2:int -> v3:int -> (v4:int -> X) -> X) ->
                        v7:int -> (v8:int -> (v9:int -> X) -> X) -> v12:int -> (v13:int -> X) -> X
    f_cons_make_list_1681: v1:int -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> v8:int -> (v9:int -> X) -> X
    f_fold_right_1677: v1:int ->
                       v2:int ->
                       (v3:int -> v4:int -> (v5:int -> X) -> X) ->
                       (v8:int -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    f_fold_right_1679: v1:int ->
                       v2:int -> v3:int -> (v4:int -> v5:int -> (v6:int -> X) -> X) -> (v9:int -> X) -> v11:int -> X
    add_1038: v1:int -> v2:int -> (v3:int -> X) -> X
    f_main_1684: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:int -> X
    fail_1690: v1:bool -> (v2:unit -> X) -> X
    f_1687: var383:int -> var382:int -> var381:unit -> X
    f_fold_right_1678: var394:int ->
                       var393:int ->
                       var392:int -> (var391:int -> (var390:int -> X) -> X) -> var387:int -> (var386:int -> X) -> X
    f_make_list_1680: var399:int -> var398:int -> (var397:int -> X) -> X
  
end AbsTypeInfer.refine(13042)[1] (1.874715 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1676
  main_1676 -> (rand_int f_1685)
  add_1038 x_1039 y_1040 k_add_1506 -> (k_add_1506 (x_1039 + y_1040))
  br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when b_1689 ->
      (xs2_1032 0 (f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032))
  br_fold_right_1688 b_1689 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (not b_1689) -> _|_
  cons_make_list_1133 n_1037 x_1131 xs1_1132 xs2_1132 k_make_list_cons_make_list_1404 ->
      (k_make_list_cons_make_list_1404 (xs1_1132 + 1) (f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132))
  f_1685 x_1601 -> (rand_int (f_1686 x_1601))
  f_1686 x_1601 x_1614 -> (main_1041 x_1601 x_1614 (f_1687 x_1601 x_1614))
  f_1687 x_1601 x_1614 x_1598 -> end
  f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 when (
      i_1130 = 0) -> (k_make_list_cons_make_list_1419 x_1131)
  f_cons_make_list_1681 n_1037 x_1131 xs1_1132 xs2_1132 i_1130 k_make_list_cons_make_list_1419 when (
      not (i_1130 = 0)) -> (xs2_1132 (i_1130 - 1) k_make_list_cons_make_list_1419)
  f_fold_right_1677 acc_1033 xs1_1032 f_1031 k_fold_right_1215 xs2_1032 x_1262 ->
      (fold_right_1030 f_1031 (xs1_1032 - 1) (f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032) acc_1033
        (f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215))
  f_fold_right_1678 acc_1033 x_1262 xs1_1032 xs2_1032 x_1104 k_fold_right_xs'_1248 ->
      (xs2_1032 (x_1104 + 1) k_fold_right_xs'_1248)
  f_fold_right_1679 acc_1033 x_1262 xs1_1032 f_1031 k_fold_right_1215 x_1309 ->
      (f_1031 x_1262 x_1309 k_fold_right_1215)
  f_main_1683 m_1043 n_1042 k_main_1523 x1_1529 x2_1529 ->
      (fold_right_1030 add_1038 x1_1529 x2_1529 m_1043 (f_main_1684 m_1043 n_1042 x1_1529 k_main_1523))
  f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 when (x_1557 >= m_1043) -> (k_main_1523 ())
  f_main_1684 m_1043 n_1042 x1_1529 k_main_1523 x_1557 when (not (x_1557 >= m_1043)) -> (fail_1690 true k_main_1523)
  f_make_list_1680 n_1037 x_1137 k_make_list_1357 -> _|_
  f_make_list_1682 n_1037 k_make_list_1345 x1_1482 x2_1482 ->
      (cons_make_list_1133 n_1037 n_1037 x1_1482 x2_1482 k_make_list_1345)
  fail_1690 b k -> {fail} => (k ())
  fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (
      xs1_1032 = 0) -> (k_fold_right_1215 acc_1033)
  fold_right_1030 f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215 when (
      not (xs1_1032 = 0)) -> (br_fold_right_1688 (1 <= xs1_1032) f_1031 xs1_1032 xs2_1032 acc_1033 k_fold_right_1215)
  main_1041 n_1042 m_1043 k_main_1523 -> (make_list_1036 n_1042 (f_main_1683 m_1043 n_1042 k_main_1523))
  make_list_1036 n_1037 k_make_list_1345 when (n_1037 < 0) -> (k_make_list_1345 0 (f_make_list_1680 n_1037))
  make_list_1036 n_1037 k_make_list_1345 when (not (n_1037 < 0)) ->
      (make_list_1036 (n_1037 - 1) (f_make_list_1682 n_1037 k_make_list_1345))
Types:
  main_1676 : X
  fail_1690 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fold_right_1030 : ((x_2:int -> x_3:int[x_2 >= 0] -> (x_5:int[x_3 <= x_5] -> X) -> X) ->
                     int -> (int -> (x_12:int[x_12 >= 0] -> X) -> X) -> x_15:int -> (x_17:int[x_15 <= x_17] -> X) -> X)
  make_list_1036 : (int -> (int -> (int -> (x_7:int[x_7 >= 0] -> X) -> X) -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  fold_right: ((Top -> ((Bottom list) -> (x_3:int -> {x_4:int | x_3 <= x_4}))) /\ 
               ((x_14:int -> (x_15:{x_15:int | x_14 >= 0} -> {x_16:int | x_15 <= x_16})) ->
                    (({x_13:int | x_13 >= 0} list) -> (x_9:int -> {x_10:int | x_9 <= x_10}))))
  make_list: (int -> ({x_4:int | x_4 >= 0} list))

cycles: 2
total: 2.383 sec
  abst: 0.014 sec
  mc: 0.033 sec
  refine: 2.085 sec
    exparam: 0.083 sec
