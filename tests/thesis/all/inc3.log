MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi inc3.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 des_1036 x_1037 =
   (match des_1036 i_1034 with
      | _ -> ()
      | _ -> let u_1078 = {fail} 
             in
               _|_) 
 in
 let rec inc3_1038 m_1039 src_1040 i_1041 =
   if i_1041 >= m_1039 then
     ()
   else
     let u_1117 = update_1033 i_1041 m_1039 src_1040 (src_1040 i_1041 + 1) 
     in
       inc3_1038 m_1039 src_1040 (i_1041 + 1) 
 in
 let main_1042 n_1043 = if n_1043 > 0 then
                          inc3_1038 n_1043 (make_array_1030 n_1043) 0
                        else
                          () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 des_1036 x_1037 =
   (match des_1036 i_1034 with
      | _ -> ()
      | _ -> let u_1078 = {fail} 
             in
               _|_) 
 in
 let rec inc3_1038 m_1039 src_1040 i_1041 =
   if i_1041 >= m_1039 then
     ()
   else
     let u_1117 = update_1033 i_1041 m_1039 src_1040 (src_1040 i_1041 + 1) 
     in
       inc3_1038 m_1039 src_1040 (i_1041 + 1) 
 in
 let main_1042 n_1043 = if n_1043 > 0 then
                          inc3_1038 n_1043 (make_array_1030 n_1043) 0
                        else
                          () 
 in
 let main_1131 = let arg1_1130 = rand_int () 
                 in
                   main_1042 arg1_1130 
 in
   ()

copy_poly::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let update_1132 (i_1034:int) (n_1035:int) (des_1036:(int -> int)) (x_1037:int) =
   (match des_1036 i_1034 with
      | _ -> ()
      | _ -> let u_1078 = {fail} 
             in
               _|_) 
 in
 let rec inc3_1038 (m_1039:int) (src_1040:(int -> int)) (i_1041:int) =
   if i_1041 >= m_1039 then
     ()
   else
     let u_1117 = update_1132 i_1041 m_1039 src_1040 (src_1040 i_1041 + 1) 
     in
       inc3_1038 m_1039 src_1040 (i_1041 + 1) 
 in
 let main_1042 (n_1043:int) = if n_1043 > 0 then
                                inc3_1038 n_1043 (make_array_1030 n_1043) 0
                              else
                                () 
 in
 let main_1131 = let arg1_1130 = rand_int () 
                 in
                   main_1042 arg1_1130 
 in
   ()

abst_recdata::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1132 i_1034 n_1035 des_1036 x_1037 = let u_1133 = des_1036 i_1034 
                                                 in
                                                   () 
 in
 let rec inc3_1038 m_1039 src_1040 i_1041 =
   if i_1041 >= m_1039 then
     ()
   else
     let u_1117 = update_1132 i_1041 m_1039 src_1040 (src_1040 i_1041 + 1) 
     in
       inc3_1038 m_1039 src_1040 (i_1041 + 1) 
 in
 let main_1042 n_1043 = if n_1043 > 0 then
                          inc3_1038 n_1043 (make_array_1030 n_1043) 0
                        else
                          () 
 in
 let main_1131 = let arg1_1130 = rand_int () 
                 in
                   main_1042 arg1_1130 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1161:(int -> X)) =
   let k_make_array_u_1178 (x_1164:unit) = k_make_array_1161 0 
   in
   let k_make_array_u_1167 (b_1179:bool) =
     if b_1179 then
       k_make_array_u_1178 ()
     else
       {|fail|} () k_make_array_u_1178 
   in
     if 0 <= i_1032 then
       k_make_array_u_1167 (i_1032 < n_1031)
     else
       k_make_array_u_1167 false 
 in
 let update_1132
   (i_1034:int) (n_1035:int) (des_1036:(int -> ((int -> X) -> X))) (x_1037:int) (k_update_1214:(
   unit -> X)) = des_1036 i_1034 (fun x_1217 -> k_update_1214 ()) 
 in
 let rec inc3_1038 (m_1039:int) (src_1040:(int -> ((int -> X) -> X))) (i_1041:int) (k_inc3_1259:(
   unit -> X)) =
   if i_1041 >= m_1039 then
     k_inc3_1259 ()
   else
     src_1040 i_1041
       (fun x_1277 ->
          update_1132 i_1041 m_1039 src_1040 (x_1277 + 1)
            (fun x_1262 -> inc3_1038 m_1039 src_1040 (i_1041 + 1) k_inc3_1259)) 
 in
 let main_1042 (n_1043:int) (k_main_1331:(unit -> X)) =
   if n_1043 > 0 then
     inc3_1038 n_1043 (make_array_1030 n_1043) 0 k_main_1331
   else
     k_main_1331 () 
 in
   rand_int_cps () (fun x_1360 -> main_1042 x_1360 (fun x_1357 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1385
  main_1385 -> (rand_int f_1389)
  f_1389 x_1360 -> (main_1042 x_1360 (f_1390 x_1360))
  f_1390 x_1360 x_1357 -> end
  f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040 x_1277 ->
      (update_1132 i_1041 m_1039 src_1040 (x_1277 + 1) (f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040))
  f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040 x_1262 -> (inc3_1038 m_1039 src_1040 (i_1041 + 1) k_inc3_1259)
  f_update_1386 i_1034 n_1035 x_1037 k_update_1214 x_1217 -> (k_update_1214 ())
  fail_1391 b k -> {fail} => (k ())
  inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 when (i_1041 >= m_1039) -> (k_inc3_1259 ())
  inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 when (not (i_1041 >= m_1039)) ->
      (src_1040 i_1041 (f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040))
  k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 when b_1179 ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 ())
  k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 when (not b_1179) ->
      (fail_1391 true (k_make_array_u_1178 i_1032 n_1031 k_make_array_1161))
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 x_1164 -> (k_make_array_1161 0)
  main_1042 n_1043 k_main_1331 when (n_1043 > 0) -> (inc3_1038 n_1043 (make_array_1030 n_1043) 0 k_main_1331)
  main_1042 n_1043 k_main_1331 when (not (n_1043 > 0)) -> (k_main_1331 ())
  make_array_1030 n_1031 i_1032 k_make_array_1161 when (0 <= i_1032) ->
      (k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1161 when (not (0 <= i_1032)) ->
      (k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 false)
  update_1132 i_1034 n_1035 des_1036 x_1037 k_update_1214 ->
      (des_1036 i_1034 (f_update_1386 i_1034 n_1035 x_1037 k_update_1214))
Types:
  main_1385 : X
  fail_1391 : (x_1:bool[x_1] -> (unit -> X) -> X)
  inc3_1038 : (int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1385 ... --> 
  f_1389 ... --> 
  main_1042 [1/2] ... --> 
  inc3_1038 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1167 [2/2] ... --> 
  fail_1391 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(134)[1]
  program:
    main_1385  | true = ((Random.int 0) f_1389)
    f_1389 x_1360 | true = (main_1042 x_1360
                                      (f_1390 x_1360))
    f_1390 x_1360 x_1357 | true = end
    f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040 x_1277 | true = (update_1132
                                                                    i_1041
                                                                    m_1039
                                                                    src_1040
                                                                    (
                                                                    x_1277 + 1)
                                                                    (
                                                                    f_inc3_1388
                                                                    i_1041
                                                                    m_1039
                                                                    x_1277
                                                                    k_inc3_1259
                                                                    src_1040))
    f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040 x_1262 | true = (
    inc3_1038 m_1039
              src_1040
              (i_1041 + 1)
              k_inc3_1259)
    f_update_1386 i_1034 n_1035 x_1037 k_update_1214 x_1217 | true = (
    k_update_1214 ())
    fail_1391 b k | true = (fail ())
    inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 | (i_1041 >= m_1039) = (
    k_inc3_1259 ())
    inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 | (not (i_1041 >= m_1039)) = (
    src_1040 i_1041
             (f_inc3_1387 i_1041
                          m_1039
                          k_inc3_1259
                          src_1040))
    k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 | b_1179 = (
    k_make_array_u_1178 i_1032
                        n_1031
                        k_make_array_1161
                        ())
    k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 | (not b_1179) = (
    fail_1391 true
              (k_make_array_u_1178 i_1032
                                   n_1031
                                   k_make_array_1161))
    k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 x_1164 | true = (
    k_make_array_1161 0)
    main_1042 n_1043 k_main_1331 | (n_1043 > 0) = (inc3_1038 n_1043
                                                             (make_array_1030 n_1043)
                                                             0
                                                             k_main_1331)
    main_1042 n_1043 k_main_1331 | (not (n_1043 > 0)) = (k_main_1331 ())
    make_array_1030 n_1031 i_1032 k_make_array_1161 | (0 <= i_1032) = (
    k_make_array_u_1167 i_1032
                        n_1031
                        k_make_array_1161
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1161 | (not (0 <= i_1032)) = (
    k_make_array_u_1167 i_1032
                        n_1031
                        k_make_array_1161
                        false)
    update_1132 i_1034 n_1035 des_1036 x_1037 k_update_1214 | true = (
    des_1036 i_1034
             (f_update_1386 i_1034
                            n_1035
                            x_1037
                            k_update_1214))
    main_1385:X
    f_1389:int -> X
    f_1390:int -> unit -> X
    f_inc3_1387:int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_inc3_1388:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1386:int -> int -> int -> (unit -> X) -> int -> X
    fail_1391:bool -> (unit -> X) -> X
    inc3_1038:int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    k_make_array_u_1167:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1178:int -> int -> (int -> X) -> unit -> X
    main_1042:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1132:int -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
  inlined functions: f_1389,f_1390,f_inc3_1387,f_inc3_1388,f_update_1386,k_make_array_u_1167,k_make_array_u_1178,main_1042,make_array_1030,update_1132
  counterexample: 0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1389@4:0> = var2)
     [true.(<main_1042@6:0> = <f_1389@4:0>)
      [(<main_1042@6:0> > 0).((<inc3_1038@9:0> = <main_1042@6:0>) && (<inc3_1038@9:2> = 0))
       [(not (<inc3_1038@9:2> >= <inc3_1038@9:0>)).(<<inc3_1038@9:1>@12:0> = <inc3_1038@9:2>)
        [true.((<make_array_1030@14:0> = <main_1042@6:0>) && (<make_array_1030@14:1> = <<inc3_1038@9:1>@12:0>))
         [(not (0 <= <make_array_1030@14:1>)).
          ((<k_make_array_u_1167@17:0> = <make_array_1030@14:1>) &&
           ((<k_make_array_u_1167@17:1> = <make_array_1030@14:0>) && (<k_make_array_u_1167@17:3> = false)))
          [(not <k_make_array_u_1167@17:3>).(<fail_1391@20:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(135)[2]
    horn clauses:
      P[<fail_1391@20:0>](<fail_1391@20:0>:bool)|- bot
      
      P[<k_make_array_u_1167@17:3>](<k_make_array_u_1167@17:0>:int,<k_make_array_u_1167@17:1>:int,false:bool),
      <fail_1391@20:0> |- P[<fail_1391@20:0>](<fail_1391@20:0>:bool)
      
      P[<make_array_1030@14:1>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
      ((0 > <k_make_array_u_1167@17:0>) && (not <k_make_array_u_1167@17:3>))
      |- P[<k_make_array_u_1167@17:3>](<k_make_array_u_1167@17:0>:int,
                                       <k_make_array_u_1167@17:1>:int,
                                       <k_make_array_u_1167@17:3>:bool)
      
      P[<main_1042@6:0>](<make_array_1030@14:0>:int),
      P[<<inc3_1038@9:1>@12:0>](<make_array_1030@14:0>:int,<make_array_1030@14:1>:int), (
      <make_array_1030@14:0> > 0) |- P[<make_array_1030@14:1>](<make_array_1030@14:0>:int,
                                                               <make_array_1030@14:1>:int)
      
      P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int), (
      <<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
      |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
      
      P[<main_1042@6:0>](<inc3_1038@9:0>:int), ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
      |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)
      
      P[<f_1389@4:0>](<main_1042@6:0>:int)|- P[<main_1042@6:0>](<main_1042@6:0>:int)
      
      |- P[<f_1389@4:0>](<f_1389@4:0>:int)
    call trees:
      <main_1385@1>
        <f_1389@4>
          <main_1042@6>
            <inc3_1038@9>
            </<inc3_1038@9:1>@12>
            <make_array_1030@14>
              <k_make_array_u_1167@17>
                <fail_1391@20>
    inlined horn clauses:
      P[<fail_1391@20:0>](<fail_1391@20:0>:bool)|- bot
      
      P[<<inc3_1038@9:1>@12:0>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
      ((0 > <k_make_array_u_1167@17:0>) && ((<k_make_array_u_1167@17:1> > 0) && <fail_1391@20:0>))
      |- P[<fail_1391@20:0>](<fail_1391@20:0>:bool)
      
      P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int), (
      <<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
      |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
      
       ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0)) |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,
                                                                    <inc3_1038@9:2>:int)
    begin ParamSubstInfer.infer(1210)[3]
      
    end ParamSubstInfer.infer(1210)[3] (0.018997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1212)[3]
      
    end RefTypeInfer.elim_coeffs(1212)[3] (0.001000 sec.)
    begin GenHcSolver.solve(1408)[3]
      Horn clauses:
        P[<fail_1391@20:0>](<fail_1391@20:0>:bool)|- bot
        
        P[<<inc3_1038@9:1>@12:0>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
        ((0 > <k_make_array_u_1167@17:0>) && ((<k_make_array_u_1167@17:1> > 0) && <fail_1391@20:0>))
        |- P[<fail_1391@20:0>](<fail_1391@20:0>:bool)
        
        P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int), (
        <<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
        |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
        
         ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
        |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)
      lower bounds:
        P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int) = ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
        P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int) =
        ((<<inc3_1038@9:1>@12:0> = 0) && ((<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>) && (<inc3_1038@9:0> > 0)))
        P[<fail_1391@20:0>](<fail_1391@20:0>:bool) = false
      upper bounds:
        P[<fail_1391@20:0>](var4:bool) = true
      begin GenHcSolver.classify_pids(2589)[4]
        output:
          [<fail_1391@20:0>]
      end GenHcSolver.classify_pids(2589)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2592)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2593)[5]
          begin InterpProver.interpolate_fresh(2594)[6]
            begin InterpProver.interpolate_log(2595)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2596)[8]
                begin InterpProver.interpolate_simplify(2597)[9]
                  begin InterpProver.interpolate_quick(2610)[10]
                    
                  end InterpProver.interpolate_quick(2610)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2614)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2614)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2597)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2596)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2595)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2594)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2593)[5] (0.000000 sec.)
        output:
          P[<fail_1391@20:0>](<fail_1391@20:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2592)[4] (0.000000 sec.)
      Horn clauses:
        P[<<inc3_1038@9:1>@12:0>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
        ((<k_make_array_u_1167@17:1> > 0) && (0 > <k_make_array_u_1167@17:0>)) |- bot
        
        P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int), (
        <<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
        |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
        
         ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
        |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)
      lower bounds:
        P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int) = ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
        P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int) =
        ((<<inc3_1038@9:1>@12:0> = 0) && ((<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>) && (<inc3_1038@9:0> > 0)))
      upper bounds:
        P[<<inc3_1038@9:1>@12:0>](var5:int,var6:int) = ((var5 <= 0) || (0 <= var6))
      begin GenHcSolver.classify_pids(4112)[4]
        output:
          [<<inc3_1038@9:1>@12:0>]
      end GenHcSolver.classify_pids(4112)[4] (0.000000 sec.)
      lb:((<<inc3_1038@9:1>@12:0> = 0) && ((<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>) && (<inc3_1038@9:0> > 0)))
      nub:(not ((<inc3_1038@9:0> <= 0) || (0 <= <<inc3_1038@9:1>@12:0>)))
      begin ApronInterface.convex_hull_interpolate(4115)[4]
        lb:((<<inc3_1038@9:1>@12:0> = 0) && ((<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>) && (<inc3_1038@9:0> > 0)))
        nub:(not ((<inc3_1038@9:0> <= 0) || (0 <= <<inc3_1038@9:1>@12:0>)))
        lb':((<<inc3_1038@9:1>@12:0> = 0) && ((<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>) && (<inc3_1038@9:0> > 0)))
        nub':(not ((<inc3_1038@9:0> <= 0) || (0 <= <<inc3_1038@9:1>@12:0>)))
        begin InterpProver.interpolate(4116)[5]
          begin InterpProver.interpolate_fresh(4117)[6]
            begin InterpProver.interpolate_log(4118)[7]
              input1: ((<<inc3_1038@9:1>@12:0> = 0) &&
                       ((<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>) && (<inc3_1038@9:0> > 0)))
              input2: (not ((<inc3_1038@9:0> <= 0) || (0 <= <<inc3_1038@9:1>@12:0>)))
              begin InterpProver.interpolate_check(4119)[8]
                begin InterpProver.interpolate_simplify(4120)[9]
                  begin InterpProver.interpolate_quick(4195)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(4204)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(4205)[12]
                        begin CsisatInterface.interpolate_csisat_log(4206)[13]
                          input1: (0 = v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0 & 1 <= v_sep_inc3_1038_sep_9_sep_0 & (1 + v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0) <= v_sep_inc3_1038_sep_9_sep_0)
                          input2: (1 <= v_sep_inc3_1038_sep_9_sep_0 & (1 + v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(4207)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(4207)[14] (0.000000 sec.)
                          output: -2*v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(4206)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(4205)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(4204)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(4195)[10] (0.001999 sec.)
                  
                end InterpProver.interpolate_simplify(4120)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(4119)[8] (0.001999 sec.)
              output: (0 <= <<inc3_1038@9:1>@12:0>)
            end InterpProver.interpolate_log(4118)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(4117)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(4116)[5] (0.001999 sec.)
        output:
          P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int) = (0 <= <<inc3_1038@9:1>@12:0>)
      end ApronInterface.convex_hull_interpolate(4115)[4] (0.001999 sec.)
      Horn clauses:
        P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int),
        ((<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>) && (0 > <<inc3_1038@9:1>@12:0>)) |- bot
        
         ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
        |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)
      lower bounds:
        P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int) = ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
      upper bounds:
        P[<inc3_1038@9:2>](var7:int,var8:int) = ((var8 >= var7) || (0 <= var8))
      begin GenHcSolver.classify_pids(5134)[4]
        output:
          [<inc3_1038@9:2>]
      end GenHcSolver.classify_pids(5134)[4] (0.000000 sec.)
      lb:((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
      nub:(not ((<inc3_1038@9:2> >= <inc3_1038@9:0>) || (0 <= <inc3_1038@9:2>)))
      begin ApronInterface.convex_hull_interpolate(5137)[4]
        lb:((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
        nub:(not ((<inc3_1038@9:2> >= <inc3_1038@9:0>) || (0 <= <inc3_1038@9:2>)))
        lb':((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
        nub':(not ((<inc3_1038@9:2> >= <inc3_1038@9:0>) || (0 <= <inc3_1038@9:2>)))
        begin InterpProver.interpolate(5138)[5]
          begin InterpProver.interpolate_fresh(5139)[6]
            begin InterpProver.interpolate_log(5140)[7]
              input1: ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
              input2: (not ((<inc3_1038@9:2> >= <inc3_1038@9:0>) || (0 <= <inc3_1038@9:2>)))
              begin InterpProver.interpolate_check(5141)[8]
                begin InterpProver.interpolate_simplify(5142)[9]
                  begin InterpProver.interpolate_quick(5193)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(5202)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(5203)[12]
                        begin CsisatInterface.interpolate_csisat_log(5204)[13]
                          input1: (0 = v_sep_inc3_1038_sep_9_sep_2 & 1 <= v_sep_inc3_1038_sep_9_sep_0)
                          input2: ((1 + v_sep_inc3_1038_sep_9_sep_2) <= 0 & (1 + v_sep_inc3_1038_sep_9_sep_2) <= v_sep_inc3_1038_sep_9_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(5205)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(5205)[14] (0.000000 sec.)
                          output: -2*v_sep_inc3_1038_sep_9_sep_2 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(5204)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_inc3_1038_sep_9_sep_2 <= 0
                        after dnf conversion: ((-2*v_sep_inc3_1038_sep_9_sep_2 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(5203)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(5202)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(5193)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(5142)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(5141)[8] (0.001000 sec.)
              output: (0 <= <inc3_1038@9:2>)
            end InterpProver.interpolate_log(5140)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(5139)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(5138)[5] (0.001000 sec.)
        output:
          P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int) = (0 <= <inc3_1038@9:2>)
      end ApronInterface.convex_hull_interpolate(5137)[4] (0.001000 sec.)
      begin HcSolver.check_validity(5358)[4]
        input:
          P[<fail_1391@20:0>](<fail_1391@20:0>:bool)|- bot
          
          P[<<inc3_1038@9:1>@12:0>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
          ((0 > <k_make_array_u_1167@17:0>) && ((<k_make_array_u_1167@17:1> > 0) && <fail_1391@20:0>))
          |- P[<fail_1391@20:0>](<fail_1391@20:0>:bool)
          
          P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int),
          (<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
          |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
          
           ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
          |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(5358)[4] (0.002000 sec.)
      solution:
        P[<fail_1391@20:0>](<fail_1391@20:0>:bool) = false
        P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int) = (0 <= <<inc3_1038@9:1>@12:0>)
        P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int) = (0 <= <inc3_1038@9:2>)
    end GenHcSolver.solve(1408)[3] (0.022996 sec.)
    begin GenHcSolver.solve(5638)[3]
      Horn clauses:
        P[<fail_1391@20:0>](<fail_1391@20:0>:bool)|- bot
        
        P[<<inc3_1038@9:1>@12:0>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
        ((0 > <k_make_array_u_1167@17:0>) && ((<k_make_array_u_1167@17:1> > 0) && <fail_1391@20:0>))
        |- P[<fail_1391@20:0>](<fail_1391@20:0>:bool)
        
        P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int), (
        <<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
        |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
        
         ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
        |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)
      lower bounds:
        P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int) = ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
        P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int) =
        ((<<inc3_1038@9:1>@12:0> = 0) && ((<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>) && (<inc3_1038@9:0> > 0)))
        P[<fail_1391@20:0>](<fail_1391@20:0>:bool) = false
      upper bounds:
        P[<fail_1391@20:0>](var10:bool) = true
      begin GenHcSolver.classify_pids(6819)[4]
        output:
          [<fail_1391@20:0>]
      end GenHcSolver.classify_pids(6819)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(6822)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(6825)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(6825)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(6830)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(6830)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(6833)[5]
          begin InterpProver.interpolate_fresh(6834)[6]
            begin InterpProver.interpolate_log(6835)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(6836)[8]
                begin InterpProver.interpolate_simplify(6837)[9]
                  begin InterpProver.interpolate_quick(6852)[10]
                    
                  end InterpProver.interpolate_quick(6852)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(6856)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(6856)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(6837)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(6836)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(6835)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(6834)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(6833)[5] (0.001000 sec.)
        output:
          P[<fail_1391@20:0>](<fail_1391@20:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(6822)[4] (0.002000 sec.)
      Horn clauses:
        P[<<inc3_1038@9:1>@12:0>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
        ((<k_make_array_u_1167@17:1> > 0) && (0 > <k_make_array_u_1167@17:0>)) |- bot
        
        P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int), (
        <<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
        |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
        
         ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
        |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)
      lower bounds:
        P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int) = ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
        P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int) =
        ((<<inc3_1038@9:1>@12:0> = 0) && ((<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>) && (<inc3_1038@9:0> > 0)))
      upper bounds:
        P[<<inc3_1038@9:1>@12:0>](var11:int,var12:int) = ((var11 <= 0) || (0 <= var12))
      begin GenHcSolver.classify_pids(8361)[4]
        output:
          [<<inc3_1038@9:1>@12:0>]
      end GenHcSolver.classify_pids(8361)[4] (0.000000 sec.)
      lb:((<<inc3_1038@9:1>@12:0> = 0) && ((<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>) && (<inc3_1038@9:0> > 0)))
      nub:(not ((<inc3_1038@9:0> <= 0) || (0 <= <<inc3_1038@9:1>@12:0>)))
      begin ApronInterface.convex_hull_interpolate(8364)[4]
        lb:((<<inc3_1038@9:1>@12:0> = 0) && ((<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>) && (<inc3_1038@9:0> > 0)))
        nub:(not ((<inc3_1038@9:0> <= 0) || (0 <= <<inc3_1038@9:1>@12:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(8389)[5]
          ts: ((<<inc3_1038@9:1>@12:0> = 0) && ((<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>) && (<inc3_1038@9:0> > 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(8389)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(8407)[5]
          ts: ((<inc3_1038@9:0> > 0) && (0 > <<inc3_1038@9:1>@12:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(8407)[5] (0.000000 sec.)
        lb':((<<inc3_1038@9:1>@12:0> = 0) && ((-1 + <inc3_1038@9:0>) >= 0))
        nub':(((-1 + (-1 * <<inc3_1038@9:1>@12:0>)) >= 0) && ((-1 + <inc3_1038@9:0>) >= 0))
        begin InterpProver.interpolate(8412)[5]
          begin InterpProver.interpolate_fresh(8413)[6]
            begin InterpProver.interpolate_log(8414)[7]
              input1: ((<<inc3_1038@9:1>@12:0> = 0) && ((-1 + <inc3_1038@9:0>) >= 0))
              input2: (((-1 + (-1 * <<inc3_1038@9:1>@12:0>)) >= 0) && ((-1 + <inc3_1038@9:0>) >= 0))
              begin InterpProver.interpolate_check(8415)[8]
                begin InterpProver.interpolate_simplify(8416)[9]
                  begin InterpProver.interpolate_quick(8479)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(8488)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(8489)[12]
                        begin CsisatInterface.interpolate_csisat_log(8490)[13]
                          input1: (0 = v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0 & 1 <= v_sep_inc3_1038_sep_9_sep_0)
                          input2: (1 <= v_sep_inc3_1038_sep_9_sep_0 & (1 + v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(8491)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(8491)[14] (0.000000 sec.)
                          output: -2*v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(8490)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(8489)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(8488)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(8479)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(8416)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(8415)[8] (0.001000 sec.)
              output: (0 <= <<inc3_1038@9:1>@12:0>)
            end InterpProver.interpolate_log(8414)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(8413)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(8412)[5] (0.002000 sec.)
        output:
          P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int) = (0 <= <<inc3_1038@9:1>@12:0>)
      end ApronInterface.convex_hull_interpolate(8364)[4] (0.002000 sec.)
      Horn clauses:
        P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int),
        ((<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>) && (0 > <<inc3_1038@9:1>@12:0>)) |- bot
        
         ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
        |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)
      lower bounds:
        P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int) = ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
      upper bounds:
        P[<inc3_1038@9:2>](var13:int,var14:int) = ((var14 >= var13) || (0 <= var14))
      begin GenHcSolver.classify_pids(9422)[4]
        output:
          [<inc3_1038@9:2>]
      end GenHcSolver.classify_pids(9422)[4] (0.000000 sec.)
      lb:((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
      nub:(not ((<inc3_1038@9:2> >= <inc3_1038@9:0>) || (0 <= <inc3_1038@9:2>)))
      begin ApronInterface.convex_hull_interpolate(9425)[4]
        lb:((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
        nub:(not ((<inc3_1038@9:2> >= <inc3_1038@9:0>) || (0 <= <inc3_1038@9:2>)))
        begin ExtFormula.Formula.case_analysis_boolean(9435)[5]
          ts: ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(9435)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(9454)[5]
          ts: ((<inc3_1038@9:2> < <inc3_1038@9:0>) && (0 > <inc3_1038@9:2>))
          
        end ExtFormula.Formula.case_analysis_boolean(9454)[5] (0.000000 sec.)
        lb':((<inc3_1038@9:2> = 0) && ((-1 + <inc3_1038@9:0>) >= 0))
        nub':(((-1 + (-1 * <inc3_1038@9:2>)) >= 0) && (((-1 + (-1 * <inc3_1038@9:2>)) + <inc3_1038@9:0>) >= 0))
        begin InterpProver.interpolate(9460)[5]
          begin InterpProver.interpolate_fresh(9461)[6]
            begin InterpProver.interpolate_log(9462)[7]
              input1: ((<inc3_1038@9:2> = 0) && ((-1 + <inc3_1038@9:0>) >= 0))
              input2: (((-1 + (-1 * <inc3_1038@9:2>)) >= 0) && (((-1 + (-1 * <inc3_1038@9:2>)) + <inc3_1038@9:0>) >= 0))
              begin InterpProver.interpolate_check(9463)[8]
                begin InterpProver.interpolate_simplify(9464)[9]
                  begin InterpProver.interpolate_quick(9533)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(9542)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(9543)[12]
                        begin CsisatInterface.interpolate_csisat_log(9544)[13]
                          input1: (0 = v_sep_inc3_1038_sep_9_sep_2 & 1 <= v_sep_inc3_1038_sep_9_sep_0)
                          input2: ((1 + v_sep_inc3_1038_sep_9_sep_2) <= 0 & (1 + v_sep_inc3_1038_sep_9_sep_2) <= v_sep_inc3_1038_sep_9_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(9545)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(9545)[14] (0.000000 sec.)
                          output: -2*v_sep_inc3_1038_sep_9_sep_2 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(9544)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_inc3_1038_sep_9_sep_2 <= 0
                        after dnf conversion: ((-2*v_sep_inc3_1038_sep_9_sep_2 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(9543)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(9542)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(9533)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(9464)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(9463)[8] (0.000000 sec.)
              output: (0 <= <inc3_1038@9:2>)
            end InterpProver.interpolate_log(9462)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(9461)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(9460)[5] (0.000000 sec.)
        output:
          P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int) = (0 <= <inc3_1038@9:2>)
      end ApronInterface.convex_hull_interpolate(9425)[4] (0.001000 sec.)
      begin HcSolver.check_validity(9702)[4]
        input:
          P[<fail_1391@20:0>](<fail_1391@20:0>:bool)|- bot
          
          P[<<inc3_1038@9:1>@12:0>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
          ((0 > <k_make_array_u_1167@17:0>) && ((<k_make_array_u_1167@17:1> > 0) && <fail_1391@20:0>))
          |- P[<fail_1391@20:0>](<fail_1391@20:0>:bool)
          
          P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int),
          (<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
          |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
          
           ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
          |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(9702)[4] (0.002000 sec.)
      solution:
        P[<fail_1391@20:0>](<fail_1391@20:0>:bool) = false
        P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int) = (0 <= <<inc3_1038@9:1>@12:0>)
        P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int) = (0 <= <inc3_1038@9:2>)
    end GenHcSolver.solve(5638)[3] (0.027996 sec.)
    begin YhornInterface.solve(9982)[3]
      begin HcSolver.solve_ub(9983)[4]
        encoded:
          P[<fail_1391@20:0>](<fail_1391@20:0>:int)|- bot
          
          P[<<inc3_1038@9:1>@12:0>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
          ((0 > <k_make_array_u_1167@17:0>) && ((<k_make_array_u_1167@17:1> > 0) && (<fail_1391@20:0> = 1)))
          |- P[<fail_1391@20:0>](<fail_1391@20:0>:int)
          
          P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int),
          (<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
          |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
          
           ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
          |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)
        input to Yhorn:
          P[<fail_1391@20:0>](<fail_1391@20:0>:int)|- bot
          
          P[<<inc3_1038@9:1>@12:0>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
          ((<k_make_array_u_1167@17:1> > 0) && ((0 > <k_make_array_u_1167@17:0>) && (<fail_1391@20:0> = 1)))
          |- P[<fail_1391@20:0>](<fail_1391@20:0>:int)
          
          P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int),
          (<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
          |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
          
           ((<inc3_1038@9:0> > 0) && (<inc3_1038@9:2> = 0))
          |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1391_sep_20_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0) & ($9>0)) & (v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0($9,$8)) -> v_sep_fail_1391_sep_20_sep_0($7).
($10-$11<0) & (v_sep_inc3_1038_sep_9_sep_2($11,$10)) -> v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0($11,$10).
($12=0) & ($11>0) -> v_sep_inc3_1038_sep_9_sep_2($11,$12).


v_sep_fail_1391_sep_20_sep_0: X
v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0: X
v_sep_inc3_1038_sep_9_sep_2: X
....
v_sep_fail_1391_sep_20_sep_0: X
v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0: X
v_sep_inc3_1038_sep_9_sep_2: X
...
v_sep_fail_1391_sep_20_sep_0: X
v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0: X
v_sep_inc3_1038_sep_9_sep_2: X
....
v_sep_fail_1391_sep_20_sep_0: X
v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0: X
v_sep_inc3_1038_sep_9_sep_2: X
....(0=0) & (v_sep_fail_1391_sep_20_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0) & ($9>0)) & (v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0($9,$8)) -> v_sep_fail_1391_sep_20_sep_0($7).
($10-$11<0) & (v_sep_inc3_1038_sep_9_sep_2($11,$10)) -> v_sep_inc3_1038_sep_9_sep_1_sep_12_sep_0($11,$10).
($12=0) & ($11>0) -> v_sep_inc3_1038_sep_9_sep_2($11,$12).

        solution:
          P[<fail_1391@20:0>]($13:bool) = false
          P[<<inc3_1038@9:1>@12:0>]($16:int,$18:int) = (0 <= $18)
          P[<inc3_1038@9:2>]($21:int,$23:int) = (0 <= $23)
        
      end HcSolver.solve_ub(9983)[4] (0.009998 sec.)
      begin HcSolver.check_validity(10117)[4]
        input:
          P[<fail_1391@20:0>](<fail_1391@20:0>:bool)|- bot
          
          P[<<inc3_1038@9:1>@12:0>](<k_make_array_u_1167@17:1>:int,<k_make_array_u_1167@17:0>:int),
          ((0 > <k_make_array_u_1167@17:0>) && ((<k_make_array_u_1167@17:1> > 0) && <fail_1391@20:0>))
          |- P[<fail_1391@20:0>](<fail_1391@20:0>:bool)
          
          P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int),
          (<<inc3_1038@9:1>@12:0> < <inc3_1038@9:0>)
          |- P[<<inc3_1038@9:1>@12:0>](<inc3_1038@9:0>:int,<<inc3_1038@9:1>@12:0>:int)
          
           ((<inc3_1038@9:2> = 0) && (<inc3_1038@9:0> > 0))
          |- P[<inc3_1038@9:2>](<inc3_1038@9:0>:int,<inc3_1038@9:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(10117)[4] (0.005999 sec.)
      solution:
        P[<fail_1391@20:0>]($13:bool) = false
        P[<<inc3_1038@9:1>@12:0>]($16:int,$18:int) = (0 <= $18)
        P[<inc3_1038@9:2>]($21:int,$23:int) = (0 <= $23)
    end YhornInterface.solve(9982)[3] (0.015997 sec.)
    
  end RefTypeInfer.infer_etrs(135)[2] (0.091986 sec.)
  refinement types:
    main_1385: X
    f_1389: v1:int -> X
    main_1042: v1:int -> (v2:unit -> X) -> X
    inc3_1038: v1:int ->
               (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) -> v6:{v6:int | (0 <= v6)} -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1167: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1391: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1390: var29:int -> var28:unit -> X
    f_inc3_1387: var39:int -> var38:int -> (var37:unit -> X) -> (var35:int -> (var34:int -> X) -> X) -> var31:int -> X
    f_inc3_1388: var50:int ->
                 var49:int -> var48:int -> (var47:unit -> X) -> (var45:int -> (var44:int -> X) -> X) -> var41:unit -> X
    f_update_1386: var57:int -> var56:int -> var55:int -> (var54:unit -> X) -> var52:int -> X
    k_make_array_u_1178: var63:int -> var62:int -> (var61:int -> X) -> var59:unit -> X
    update_1132: var73:int -> var72:int -> (var71:int -> (var70:int -> X) -> X) -> var67:int -> (var66:unit -> X) -> X
  abstraction types:
    main_1385: X
    f_1389: v1:int -> X
    main_1042: v1:int -> (v2:unit -> X) -> X
    inc3_1038: v1:int ->
               (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) -> v6:int[v6 -> (
                                                                    0 <= v6)] -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1167: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1391: v1:bool -> (v2:unit -> X) -> X
    f_1390: var29:int -> var28:unit -> X
    f_inc3_1387: var39:int -> var38:int -> (var37:unit -> X) -> (var35:int -> (var34:int -> X) -> X) -> var31:int -> X
    f_inc3_1388: var50:int ->
                 var49:int -> var48:int -> (var47:unit -> X) -> (var45:int -> (var44:int -> X) -> X) -> var41:unit -> X
    f_update_1386: var57:int -> var56:int -> var55:int -> (var54:unit -> X) -> var52:int -> X
    k_make_array_u_1178: var63:int -> var62:int -> (var61:int -> X) -> var59:unit -> X
    update_1132: var73:int -> var72:int -> (var71:int -> (var70:int -> X) -> X) -> var67:int -> (var66:unit -> X) -> X
  
end AbsTypeInfer.refine(134)[1] (0.095985 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1385
  main_1385 -> (rand_int f_1389)
  f_1389 x_1360 -> (main_1042 x_1360 (f_1390 x_1360))
  f_1390 x_1360 x_1357 -> end
  f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040 x_1277 ->
      (update_1132 i_1041 m_1039 src_1040 (x_1277 + 1) (f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040))
  f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040 x_1262 -> (inc3_1038 m_1039 src_1040 (i_1041 + 1) k_inc3_1259)
  f_update_1386 i_1034 n_1035 x_1037 k_update_1214 x_1217 -> (k_update_1214 ())
  fail_1391 b k -> {fail} => (k ())
  inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 when (i_1041 >= m_1039) -> (k_inc3_1259 ())
  inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 when (not (i_1041 >= m_1039)) ->
      (src_1040 i_1041 (f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040))
  k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 when b_1179 ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 ())
  k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 when (not b_1179) ->
      (fail_1391 true (k_make_array_u_1178 i_1032 n_1031 k_make_array_1161))
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 x_1164 -> (k_make_array_1161 0)
  main_1042 n_1043 k_main_1331 when (n_1043 > 0) -> (inc3_1038 n_1043 (make_array_1030 n_1043) 0 k_main_1331)
  main_1042 n_1043 k_main_1331 when (not (n_1043 > 0)) -> (k_main_1331 ())
  make_array_1030 n_1031 i_1032 k_make_array_1161 when (0 <= i_1032) ->
      (k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1161 when (not (0 <= i_1032)) ->
      (k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 false)
  update_1132 i_1034 n_1035 des_1036 x_1037 k_update_1214 ->
      (des_1036 i_1034 (f_update_1386 i_1034 n_1035 x_1037 k_update_1214))
Types:
  main_1385 : X
  fail_1391 : (x_1:bool[x_1] -> (unit -> X) -> X)
  inc3_1038 : (int -> (x_3:int[x_3 >= 0] -> (int -> X) -> X) -> x_8:int[x_8 >= 0] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1385 ... --> 
  f_1389 ... --> 
  main_1042 [1/2] ... --> 
  inc3_1038 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1167 [2/2] ... --> 
  fail_1391 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(10773)[1]
  program:
    main_1385  | true = ((Random.int 0) f_1389)
    f_1389 x_1360 | true = (main_1042 x_1360
                                      (f_1390 x_1360))
    f_1390 x_1360 x_1357 | true = end
    f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040 x_1277 | true = (update_1132
                                                                    i_1041
                                                                    m_1039
                                                                    src_1040
                                                                    (
                                                                    x_1277 + 1)
                                                                    (
                                                                    f_inc3_1388
                                                                    i_1041
                                                                    m_1039
                                                                    x_1277
                                                                    k_inc3_1259
                                                                    src_1040))
    f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040 x_1262 | true = (
    inc3_1038 m_1039
              src_1040
              (i_1041 + 1)
              k_inc3_1259)
    f_update_1386 i_1034 n_1035 x_1037 k_update_1214 x_1217 | true = (
    k_update_1214 ())
    fail_1391 b k | true = (fail ())
    inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 | (i_1041 >= m_1039) = (
    k_inc3_1259 ())
    inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 | (not (i_1041 >= m_1039)) = (
    src_1040 i_1041
             (f_inc3_1387 i_1041
                          m_1039
                          k_inc3_1259
                          src_1040))
    k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 | b_1179 = (
    k_make_array_u_1178 i_1032
                        n_1031
                        k_make_array_1161
                        ())
    k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 | (not b_1179) = (
    fail_1391 true
              (k_make_array_u_1178 i_1032
                                   n_1031
                                   k_make_array_1161))
    k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 x_1164 | true = (
    k_make_array_1161 0)
    main_1042 n_1043 k_main_1331 | (n_1043 > 0) = (inc3_1038 n_1043
                                                             (make_array_1030 n_1043)
                                                             0
                                                             k_main_1331)
    main_1042 n_1043 k_main_1331 | (not (n_1043 > 0)) = (k_main_1331 ())
    make_array_1030 n_1031 i_1032 k_make_array_1161 | (0 <= i_1032) = (
    k_make_array_u_1167 i_1032
                        n_1031
                        k_make_array_1161
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1161 | (not (0 <= i_1032)) = (
    k_make_array_u_1167 i_1032
                        n_1031
                        k_make_array_1161
                        false)
    update_1132 i_1034 n_1035 des_1036 x_1037 k_update_1214 | true = (
    des_1036 i_1034
             (f_update_1386 i_1034
                            n_1035
                            x_1037
                            k_update_1214))
    main_1385:X
    f_1389:int -> X
    f_1390:int -> unit -> X
    f_inc3_1387:int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_inc3_1388:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1386:int -> int -> int -> (unit -> X) -> int -> X
    fail_1391:bool -> (unit -> X) -> X
    inc3_1038:int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    k_make_array_u_1167:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1178:int -> int -> (int -> X) -> unit -> X
    main_1042:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1132:int -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
  inlined functions: f_1389,f_1390,f_inc3_1387,f_inc3_1388,f_update_1386,k_make_array_u_1167,k_make_array_u_1178,main_1042,make_array_1030,update_1132
  counterexample: 0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1389@26:0> = var74)
     [true.(<main_1042@28:0> = <f_1389@26:0>)
      [(<main_1042@28:0> > 0).((<inc3_1038@31:0> = <main_1042@28:0>) && (<inc3_1038@31:2> = 0))
       [(not (<inc3_1038@31:2> >= <inc3_1038@31:0>)).(<<inc3_1038@31:1>@34:0> = <inc3_1038@31:2>)
        [true.((<make_array_1030@36:0> = <main_1042@28:0>) && (<make_array_1030@36:1> = <<inc3_1038@31:1>@34:0>))
         [(0 <= <make_array_1030@36:1>).
          ((<k_make_array_u_1167@39:0> = <make_array_1030@36:1>) &&
           ((<k_make_array_u_1167@39:1> = <make_array_1030@36:0>) &&
            (<k_make_array_u_1167@39:3> = (<make_array_1030@36:1> < <make_array_1030@36:0>))))
          [(not <k_make_array_u_1167@39:3>).(<fail_1391@42:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(10774)[2]
    horn clauses:
      P[<fail_1391@42:0>](<fail_1391@42:0>:bool)|- bot
      
      P[<k_make_array_u_1167@39:3>](<k_make_array_u_1167@39:0>:int,<k_make_array_u_1167@39:1>:int,false:bool),
      <fail_1391@42:0> |- P[<fail_1391@42:0>](<fail_1391@42:0>:bool)
      
      P[<make_array_1030@36:1>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
      ((0 <= <k_make_array_u_1167@39:0>) &&
       (<k_make_array_u_1167@39:3> = (<k_make_array_u_1167@39:0> < <k_make_array_u_1167@39:1>)))
      |- P[<k_make_array_u_1167@39:3>](<k_make_array_u_1167@39:0>:int,
                                       <k_make_array_u_1167@39:1>:int,
                                       <k_make_array_u_1167@39:3>:bool)
      
      P[<main_1042@28:0>](<make_array_1030@36:0>:int),
      P[<<inc3_1038@31:1>@34:0>](<make_array_1030@36:0>:int,<make_array_1030@36:1>:int), (
      <make_array_1030@36:0> > 0) |- P[<make_array_1030@36:1>](<make_array_1030@36:0>:int,
                                                               <make_array_1030@36:1>:int)
      
      P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
      (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
      |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
      
      P[<main_1042@28:0>](<inc3_1038@31:0>:int), ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
      |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
      
      P[<f_1389@26:0>](<main_1042@28:0>:int)|- P[<main_1042@28:0>](<main_1042@28:0>:int)
      
      |- P[<f_1389@26:0>](<f_1389@26:0>:int)
    call trees:
      <main_1385@23>
        <f_1389@26>
          <main_1042@28>
            <inc3_1038@31>
            </<inc3_1038@31:1>@34>
            <make_array_1030@36>
              <k_make_array_u_1167@39>
                <fail_1391@42>
    inlined horn clauses:
      P[<fail_1391@42:0>](<fail_1391@42:0>:bool)|- bot
      
      P[<<inc3_1038@31:1>@34:0>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
      ((0 <= <k_make_array_u_1167@39:0>) &&
       ((<k_make_array_u_1167@39:1> > 0) &&
        ((<k_make_array_u_1167@39:0> >= <k_make_array_u_1167@39:1>) && <fail_1391@42:0>)))
      |- P[<fail_1391@42:0>](<fail_1391@42:0>:bool)
      
      P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
      (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
      |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
      
       ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
      |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
    begin ParamSubstInfer.infer(12108)[3]
      
    end ParamSubstInfer.infer(12108)[3] (0.062991 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(12110)[3]
      
    end RefTypeInfer.elim_coeffs(12110)[3] (0.002000 sec.)
    begin GenHcSolver.solve(12391)[3]
      Horn clauses:
        P[<fail_1391@42:0>](<fail_1391@42:0>:bool)|- bot
        
        P[<<inc3_1038@31:1>@34:0>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
        ((0 <= <k_make_array_u_1167@39:0>) &&
         ((<k_make_array_u_1167@39:1> > 0) &&
          ((<k_make_array_u_1167@39:0> >= <k_make_array_u_1167@39:1>) && <fail_1391@42:0>)))
        |- P[<fail_1391@42:0>](<fail_1391@42:0>:bool)
        
        P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
        (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
        |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
        
         ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
        |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
      lower bounds:
        P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int) =
        ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
        P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int) =
        ((<<inc3_1038@31:1>@34:0> = 0) && ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) && (<inc3_1038@31:0> > 0)))
        P[<fail_1391@42:0>](<fail_1391@42:0>:bool) = false
      upper bounds:
        P[<fail_1391@42:0>](var76:bool) = true
      begin GenHcSolver.classify_pids(13665)[4]
        output:
          [<fail_1391@42:0>]
      end GenHcSolver.classify_pids(13665)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(13668)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(13669)[5]
          begin InterpProver.interpolate_fresh(13670)[6]
            begin InterpProver.interpolate_log(13671)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(13672)[8]
                begin InterpProver.interpolate_simplify(13673)[9]
                  begin InterpProver.interpolate_quick(13686)[10]
                    
                  end InterpProver.interpolate_quick(13686)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(13690)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(13690)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(13673)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(13672)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(13671)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(13670)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(13669)[5] (0.000000 sec.)
        output:
          P[<fail_1391@42:0>](<fail_1391@42:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(13668)[4] (0.000000 sec.)
      Horn clauses:
        P[<<inc3_1038@31:1>@34:0>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
        ((<k_make_array_u_1167@39:0> >= <k_make_array_u_1167@39:1>) &&
         ((<k_make_array_u_1167@39:1> > 0) && (0 <= <k_make_array_u_1167@39:0>))) |- bot
        
        P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
        (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
        |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
        
         ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
        |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
      lower bounds:
        P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int) =
        ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
        P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int) =
        ((<<inc3_1038@31:1>@34:0> = 0) && ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) && (<inc3_1038@31:0> > 0)))
      upper bounds:
        P[<<inc3_1038@31:1>@34:0>](var77:int,var78:int) = ((var78 < var77) || ((var77 <= 0) || (0 > var78)))
      begin GenHcSolver.classify_pids(15636)[4]
        output:
          [<<inc3_1038@31:1>@34:0>]
      end GenHcSolver.classify_pids(15636)[4] (0.000000 sec.)
      lb:((<<inc3_1038@31:1>@34:0> = 0) && ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) && (<inc3_1038@31:0> > 0)))
      nub:(not
             ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) ||
              ((<inc3_1038@31:0> <= 0) || (0 > <<inc3_1038@31:1>@34:0>))))
      begin ApronInterface.convex_hull_interpolate(15639)[4]
        lb:((<<inc3_1038@31:1>@34:0> = 0) && ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) && (<inc3_1038@31:0> > 0)))
        nub:(not
               ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) ||
                ((<inc3_1038@31:0> <= 0) || (0 > <<inc3_1038@31:1>@34:0>))))
        lb':((<<inc3_1038@31:1>@34:0> = 0) && ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) && (<inc3_1038@31:0> > 0)))
        nub':(not
                ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) ||
                 ((<inc3_1038@31:0> <= 0) || (0 > <<inc3_1038@31:1>@34:0>))))
        begin InterpProver.interpolate(15640)[5]
          begin InterpProver.interpolate_fresh(15641)[6]
            begin InterpProver.interpolate_log(15642)[7]
              input1: ((<<inc3_1038@31:1>@34:0> = 0) &&
                       ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) && (<inc3_1038@31:0> > 0)))
              input2: (not
                         ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) ||
                          ((<inc3_1038@31:0> <= 0) || (0 > <<inc3_1038@31:1>@34:0>))))
              begin InterpProver.interpolate_check(15643)[8]
                begin InterpProver.interpolate_simplify(15644)[9]
                  begin InterpProver.interpolate_quick(15747)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(15756)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(15757)[12]
                        begin CsisatInterface.interpolate_csisat_log(15758)[13]
                          input1: (0 = v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0 & 1 <= v_sep_inc3_1038_sep_31_sep_0 & (1 + v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0) <= v_sep_inc3_1038_sep_31_sep_0)
                          input2: (0 <= v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0 & 1 <= v_sep_inc3_1038_sep_31_sep_0 & v_sep_inc3_1038_sep_31_sep_0 <= v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(15759)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(15759)[14] (0.000000 sec.)
                          output: (-2*v_sep_inc3_1038_sep_31_sep_0 + 2*v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(15758)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_inc3_1038_sep_31_sep_0 + 2*v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_inc3_1038_sep_31_sep_0 + 2*v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(15757)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(15756)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(15747)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(15644)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(15643)[8] (0.002000 sec.)
              output: ((1 + <<inc3_1038@31:1>@34:0>) <= <inc3_1038@31:0>)
            end InterpProver.interpolate_log(15642)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(15641)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(15640)[5] (0.002000 sec.)
        output:
          P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int) =
          ((1 + <<inc3_1038@31:1>@34:0>) <= <inc3_1038@31:0>)
      end ApronInterface.convex_hull_interpolate(15639)[4] (0.002000 sec.)
      Horn clauses:
         ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
        |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
      lower bounds:
        P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int) =
        ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
      upper bounds:
        P[<inc3_1038@31:2>](var79:int,var80:int) = true
      begin GenHcSolver.classify_pids(16310)[4]
        output:
          [<inc3_1038@31:2>]
      end GenHcSolver.classify_pids(16310)[4] (0.000000 sec.)
      lb:((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(16313)[4]
        lb:((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
        nub:false
        lb':((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
        nub':false
        begin InterpProver.interpolate(16314)[5]
          begin InterpProver.interpolate_fresh(16315)[6]
            begin InterpProver.interpolate_log(16316)[7]
              input1: ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
              input2: false
              begin InterpProver.interpolate_check(16317)[8]
                begin InterpProver.interpolate_simplify(16318)[9]
                  begin InterpProver.interpolate_quick(16350)[10]
                    
                  end InterpProver.interpolate_quick(16350)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(16318)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(16317)[8] (0.000999 sec.)
              output: true
            end InterpProver.interpolate_log(16316)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(16315)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(16314)[5] (0.000999 sec.)
        output:
          P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int) = true
      end ApronInterface.convex_hull_interpolate(16313)[4] (0.000999 sec.)
      begin HcSolver.check_validity(16446)[4]
        input:
          P[<fail_1391@42:0>](<fail_1391@42:0>:bool)|- bot
          
          P[<<inc3_1038@31:1>@34:0>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
          ((0 <= <k_make_array_u_1167@39:0>) &&
           ((<k_make_array_u_1167@39:1> > 0) &&
            ((<k_make_array_u_1167@39:0> >= <k_make_array_u_1167@39:1>) && <fail_1391@42:0>)))
          |- P[<fail_1391@42:0>](<fail_1391@42:0>:bool)
          
          P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
          (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
          |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
          
           ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
          |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(16446)[4] (0.000000 sec.)
      solution:
        P[<fail_1391@42:0>](<fail_1391@42:0>:bool) = false
        P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int) =
        ((1 + <<inc3_1038@31:1>@34:0>) <= <inc3_1038@31:0>)
        P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int) = true
    end GenHcSolver.solve(12391)[3] (0.022996 sec.)
    begin GenHcSolver.solve(16679)[3]
      Horn clauses:
        P[<fail_1391@42:0>](<fail_1391@42:0>:bool)|- bot
        
        P[<<inc3_1038@31:1>@34:0>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
        ((0 <= <k_make_array_u_1167@39:0>) &&
         ((<k_make_array_u_1167@39:1> > 0) &&
          ((<k_make_array_u_1167@39:0> >= <k_make_array_u_1167@39:1>) && <fail_1391@42:0>)))
        |- P[<fail_1391@42:0>](<fail_1391@42:0>:bool)
        
        P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
        (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
        |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
        
         ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
        |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
      lower bounds:
        P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int) =
        ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
        P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int) =
        ((<<inc3_1038@31:1>@34:0> = 0) && ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) && (<inc3_1038@31:0> > 0)))
        P[<fail_1391@42:0>](<fail_1391@42:0>:bool) = false
      upper bounds:
        P[<fail_1391@42:0>](var82:bool) = true
      begin GenHcSolver.classify_pids(17953)[4]
        output:
          [<fail_1391@42:0>]
      end GenHcSolver.classify_pids(17953)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(17956)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(17959)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(17959)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(17964)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(17964)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(17967)[5]
          begin InterpProver.interpolate_fresh(17968)[6]
            begin InterpProver.interpolate_log(17969)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(17970)[8]
                begin InterpProver.interpolate_simplify(17971)[9]
                  begin InterpProver.interpolate_quick(17986)[10]
                    
                  end InterpProver.interpolate_quick(17986)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(17990)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(17990)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(17971)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(17970)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(17969)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(17968)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(17967)[5] (0.000000 sec.)
        output:
          P[<fail_1391@42:0>](<fail_1391@42:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(17956)[4] (0.000000 sec.)
      Horn clauses:
        P[<<inc3_1038@31:1>@34:0>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
        ((<k_make_array_u_1167@39:0> >= <k_make_array_u_1167@39:1>) &&
         ((<k_make_array_u_1167@39:1> > 0) && (0 <= <k_make_array_u_1167@39:0>))) |- bot
        
        P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
        (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
        |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
        
         ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
        |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
      lower bounds:
        P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int) =
        ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
        P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int) =
        ((<<inc3_1038@31:1>@34:0> = 0) && ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) && (<inc3_1038@31:0> > 0)))
      upper bounds:
        P[<<inc3_1038@31:1>@34:0>](var83:int,var84:int) = ((var84 < var83) || ((var83 <= 0) || (0 > var84)))
      begin GenHcSolver.classify_pids(19943)[4]
        output:
          [<<inc3_1038@31:1>@34:0>]
      end GenHcSolver.classify_pids(19943)[4] (0.000000 sec.)
      lb:((<<inc3_1038@31:1>@34:0> = 0) && ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) && (<inc3_1038@31:0> > 0)))
      nub:(not
             ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) ||
              ((<inc3_1038@31:0> <= 0) || (0 > <<inc3_1038@31:1>@34:0>))))
      begin ApronInterface.convex_hull_interpolate(19946)[4]
        lb:((<<inc3_1038@31:1>@34:0> = 0) && ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) && (<inc3_1038@31:0> > 0)))
        nub:(not
               ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) ||
                ((<inc3_1038@31:0> <= 0) || (0 > <<inc3_1038@31:1>@34:0>))))
        begin ExtFormula.Formula.case_analysis_boolean(19971)[5]
          ts: ((<<inc3_1038@31:1>@34:0> = 0) &&
               ((<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>) && (<inc3_1038@31:0> > 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(19971)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(20003)[5]
          ts: ((<<inc3_1038@31:1>@34:0> >= <inc3_1038@31:0>) &&
               ((<inc3_1038@31:0> > 0) && (0 <= <<inc3_1038@31:1>@34:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(20003)[5] (0.000000 sec.)
        lb':((<<inc3_1038@31:1>@34:0> = 0) && ((-1 + <inc3_1038@31:0>) >= 0))
        nub':(((<<inc3_1038@31:1>@34:0> + (-1 * <inc3_1038@31:0>)) >= 0) && ((-1 + <inc3_1038@31:0>) >= 0))
        begin InterpProver.interpolate(20010)[5]
          begin InterpProver.interpolate_fresh(20011)[6]
            begin InterpProver.interpolate_log(20012)[7]
              input1: ((<<inc3_1038@31:1>@34:0> = 0) && ((-1 + <inc3_1038@31:0>) >= 0))
              input2: (((<<inc3_1038@31:1>@34:0> + (-1 * <inc3_1038@31:0>)) >= 0) && ((-1 + <inc3_1038@31:0>) >= 0))
              begin InterpProver.interpolate_check(20013)[8]
                begin InterpProver.interpolate_simplify(20014)[9]
                  begin InterpProver.interpolate_quick(20077)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(20086)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(20087)[12]
                        begin CsisatInterface.interpolate_csisat_log(20088)[13]
                          input1: (0 = v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0 & 1 <= v_sep_inc3_1038_sep_31_sep_0)
                          input2: (1 <= v_sep_inc3_1038_sep_31_sep_0 & v_sep_inc3_1038_sep_31_sep_0 <= v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(20089)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(20089)[14] (0.000000 sec.)
                          output: (-2*v_sep_inc3_1038_sep_31_sep_0 + 2*v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(20088)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_inc3_1038_sep_31_sep_0 + 2*v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_inc3_1038_sep_31_sep_0 + 2*v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(20087)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(20086)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(20077)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(20014)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(20013)[8] (0.003000 sec.)
              output: ((1 + <<inc3_1038@31:1>@34:0>) <= <inc3_1038@31:0>)
            end InterpProver.interpolate_log(20012)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(20011)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(20010)[5] (0.003000 sec.)
        output:
          P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int) =
          ((1 + <<inc3_1038@31:1>@34:0>) <= <inc3_1038@31:0>)
      end ApronInterface.convex_hull_interpolate(19946)[4] (0.003000 sec.)
      Horn clauses:
         ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
        |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
      lower bounds:
        P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int) =
        ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
      upper bounds:
        P[<inc3_1038@31:2>](var85:int,var86:int) = true
      begin GenHcSolver.classify_pids(20637)[4]
        output:
          [<inc3_1038@31:2>]
      end GenHcSolver.classify_pids(20637)[4] (0.000000 sec.)
      lb:((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(20640)[4]
        lb:((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(20650)[5]
          ts: ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(20650)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(20657)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(20657)[5] (0.000000 sec.)
        lb':((<inc3_1038@31:2> = 0) && ((-1 + <inc3_1038@31:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(20660)[5]
          begin InterpProver.interpolate_fresh(20661)[6]
            begin InterpProver.interpolate_log(20662)[7]
              input1: ((<inc3_1038@31:2> = 0) && ((-1 + <inc3_1038@31:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(20663)[8]
                begin InterpProver.interpolate_simplify(20664)[9]
                  begin InterpProver.interpolate_quick(20704)[10]
                    
                  end InterpProver.interpolate_quick(20704)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(20664)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(20663)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(20662)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(20661)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(20660)[5] (0.001000 sec.)
        output:
          P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int) = true
      end ApronInterface.convex_hull_interpolate(20640)[4] (0.001000 sec.)
      begin HcSolver.check_validity(20802)[4]
        input:
          P[<fail_1391@42:0>](<fail_1391@42:0>:bool)|- bot
          
          P[<<inc3_1038@31:1>@34:0>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
          ((0 <= <k_make_array_u_1167@39:0>) &&
           ((<k_make_array_u_1167@39:1> > 0) &&
            ((<k_make_array_u_1167@39:0> >= <k_make_array_u_1167@39:1>) && <fail_1391@42:0>)))
          |- P[<fail_1391@42:0>](<fail_1391@42:0>:bool)
          
          P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
          (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
          |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
          
           ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
          |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(20802)[4] (0.002000 sec.)
      solution:
        P[<fail_1391@42:0>](<fail_1391@42:0>:bool) = false
        P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int) =
        ((1 + <<inc3_1038@31:1>@34:0>) <= <inc3_1038@31:0>)
        P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int) = true
    end GenHcSolver.solve(16679)[3] (0.022997 sec.)
    begin YhornInterface.solve(21035)[3]
      begin HcSolver.solve_ub(21036)[4]
        encoded:
          P[<fail_1391@42:0>](<fail_1391@42:0>:int)|- bot
          
          P[<<inc3_1038@31:1>@34:0>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
          ((0 <= <k_make_array_u_1167@39:0>) &&
           ((<k_make_array_u_1167@39:1> > 0) &&
            ((<k_make_array_u_1167@39:0> >= <k_make_array_u_1167@39:1>) && (<fail_1391@42:0> = 1))))
          |- P[<fail_1391@42:0>](<fail_1391@42:0>:int)
          
          P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
          (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
          |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
          
           ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
          |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
        input to Yhorn:
          P[<fail_1391@42:0>](<fail_1391@42:0>:int)|- bot
          
          P[<<inc3_1038@31:1>@34:0>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
          ((<k_make_array_u_1167@39:0> >= <k_make_array_u_1167@39:1>) &&
           ((<k_make_array_u_1167@39:1> > 0) && ((0 <= <k_make_array_u_1167@39:0>) && (<fail_1391@42:0> = 1))))
          |- P[<fail_1391@42:0>](<fail_1391@42:0>:int)
          
          P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
          (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
          |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
          
           ((<inc3_1038@31:0> > 0) && (<inc3_1038@31:2> = 0))
          |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1391_sep_42_sep_0($67)) -> 1=0.
(($67-1=0) & (-$68<=0) & ($69>0) & ($68-$69>=0)) & (v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0($69,$68)) -> v_sep_fail_1391_sep_42_sep_0($67).
($70-$71<0) & (v_sep_inc3_1038_sep_31_sep_2($71,$70)) -> v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0($71,$70).
($72=0) & ($71>0) -> v_sep_inc3_1038_sep_31_sep_2($71,$72).


v_sep_fail_1391_sep_42_sep_0: X
v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0: X
v_sep_inc3_1038_sep_31_sep_2: X
....
v_sep_fail_1391_sep_42_sep_0: X
v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0: X
v_sep_inc3_1038_sep_31_sep_2: X
...
v_sep_fail_1391_sep_42_sep_0: X
v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0: X
v_sep_inc3_1038_sep_31_sep_2: X
....
v_sep_fail_1391_sep_42_sep_0: X
v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0: X
v_sep_inc3_1038_sep_31_sep_2: X
....(0=0) & (v_sep_fail_1391_sep_42_sep_0($67)) -> 1=0.
(($67-1=0) & (-$68<=0) & ($69>0) & ($68-$69>=0)) & (v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0($69,$68)) -> v_sep_fail_1391_sep_42_sep_0($67).
($70-$71<0) & (v_sep_inc3_1038_sep_31_sep_2($71,$70)) -> v_sep_inc3_1038_sep_31_sep_1_sep_34_sep_0($71,$70).
($72=0) & ($71>0) -> v_sep_inc3_1038_sep_31_sep_2($71,$72).

        solution:
          P[<fail_1391@42:0>]($73:bool) = false
          P[<<inc3_1038@31:1>@34:0>]($76:int,$78:int) = ((1 + $78) <= $76)
          P[<inc3_1038@31:2>]($81:int,$83:int) = ((1 + $83) <= $81)
        
      end HcSolver.solve_ub(21036)[4] (0.015997 sec.)
      begin HcSolver.check_validity(21236)[4]
        input:
          P[<fail_1391@42:0>](<fail_1391@42:0>:bool)|- bot
          
          P[<<inc3_1038@31:1>@34:0>](<k_make_array_u_1167@39:1>:int,<k_make_array_u_1167@39:0>:int),
          ((0 <= <k_make_array_u_1167@39:0>) &&
           ((<k_make_array_u_1167@39:1> > 0) &&
            ((<k_make_array_u_1167@39:0> >= <k_make_array_u_1167@39:1>) && <fail_1391@42:0>)))
          |- P[<fail_1391@42:0>](<fail_1391@42:0>:bool)
          
          P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int),
          (<<inc3_1038@31:1>@34:0> < <inc3_1038@31:0>)
          |- P[<<inc3_1038@31:1>@34:0>](<inc3_1038@31:0>:int,<<inc3_1038@31:1>@34:0>:int)
          
           ((<inc3_1038@31:2> = 0) && (<inc3_1038@31:0> > 0))
          |- P[<inc3_1038@31:2>](<inc3_1038@31:0>:int,<inc3_1038@31:2>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(21236)[4] (0.001000 sec.)
      solution:
        P[<fail_1391@42:0>]($73:bool) = false
        P[<<inc3_1038@31:1>@34:0>]($76:int,$78:int) = ((1 + $78) <= $76)
        P[<inc3_1038@31:2>]($81:int,$83:int) = ((1 + $83) <= $81)
    end YhornInterface.solve(21035)[3] (0.017997 sec.)
    
  end RefTypeInfer.infer_etrs(10774)[2] (0.134980 sec.)
  refinement types:
    main_1385: X
    f_1389: v1:int -> X
    main_1042: v1:int -> (v2:unit -> X) -> X
    inc3_1038: v1:int -> (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) -> v6:int -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1167: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1391: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1390: var101:int -> var100:unit -> X
    f_inc3_1387: var111:int ->
                 var110:int -> (var109:unit -> X) -> (var107:int -> (var106:int -> X) -> X) -> var103:int -> X
    f_inc3_1388: var122:int ->
                 var121:int ->
                 var120:int -> (var119:unit -> X) -> (var117:int -> (var116:int -> X) -> X) -> var113:unit -> X
    f_update_1386: var129:int -> var128:int -> var127:int -> (var126:unit -> X) -> var124:int -> X
    k_make_array_u_1178: var135:int -> var134:int -> (var133:int -> X) -> var131:unit -> X
    update_1132: var145:int ->
                 var144:int -> (var143:int -> (var142:int -> X) -> X) -> var139:int -> (var138:unit -> X) -> X
  abstraction types:
    main_1385: X
    f_1389: v1:int -> X
    main_1042: v1:int -> (v2:unit -> X) -> X
    inc3_1038: v1:int -> (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) -> v6:int -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1167: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1391: v1:bool -> (v2:unit -> X) -> X
    f_1390: var101:int -> var100:unit -> X
    f_inc3_1387: var111:int ->
                 var110:int -> (var109:unit -> X) -> (var107:int -> (var106:int -> X) -> X) -> var103:int -> X
    f_inc3_1388: var122:int ->
                 var121:int ->
                 var120:int -> (var119:unit -> X) -> (var117:int -> (var116:int -> X) -> X) -> var113:unit -> X
    f_update_1386: var129:int -> var128:int -> var127:int -> (var126:unit -> X) -> var124:int -> X
    k_make_array_u_1178: var135:int -> var134:int -> (var133:int -> X) -> var131:unit -> X
    update_1132: var145:int ->
                 var144:int -> (var143:int -> (var142:int -> X) -> X) -> var139:int -> (var138:unit -> X) -> X
  
end AbsTypeInfer.refine(10773)[1] (0.137980 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1385
  main_1385 -> (rand_int f_1389)
  f_1389 x_1360 -> (main_1042 x_1360 (f_1390 x_1360))
  f_1390 x_1360 x_1357 -> end
  f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040 x_1277 ->
      (update_1132 i_1041 m_1039 src_1040 (x_1277 + 1) (f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040))
  f_inc3_1388 i_1041 m_1039 x_1277 k_inc3_1259 src_1040 x_1262 -> (inc3_1038 m_1039 src_1040 (i_1041 + 1) k_inc3_1259)
  f_update_1386 i_1034 n_1035 x_1037 k_update_1214 x_1217 -> (k_update_1214 ())
  fail_1391 b k -> {fail} => (k ())
  inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 when (i_1041 >= m_1039) -> (k_inc3_1259 ())
  inc3_1038 m_1039 src_1040 i_1041 k_inc3_1259 when (not (i_1041 >= m_1039)) ->
      (src_1040 i_1041 (f_inc3_1387 i_1041 m_1039 k_inc3_1259 src_1040))
  k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 when b_1179 ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 ())
  k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 b_1179 when (not b_1179) ->
      (fail_1391 true (k_make_array_u_1178 i_1032 n_1031 k_make_array_1161))
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1161 x_1164 -> (k_make_array_1161 0)
  main_1042 n_1043 k_main_1331 when (n_1043 > 0) -> (inc3_1038 n_1043 (make_array_1030 n_1043) 0 k_main_1331)
  main_1042 n_1043 k_main_1331 when (not (n_1043 > 0)) -> (k_main_1331 ())
  make_array_1030 n_1031 i_1032 k_make_array_1161 when (0 <= i_1032) ->
      (k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1161 when (not (0 <= i_1032)) ->
      (k_make_array_u_1167 i_1032 n_1031 k_make_array_1161 false)
  update_1132 i_1034 n_1035 des_1036 x_1037 k_update_1214 ->
      (des_1036 i_1034 (f_update_1386 i_1034 n_1035 x_1037 k_update_1214))
Types:
  main_1385 : X
  fail_1391 : (x_1:bool[x_1] -> (unit -> X) -> X)
  inc3_1038 : (x_1:int ->
               (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) -> x_8:int[x_8 >= 0] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  inc3: (x_1:int -> (({x_5:int | x_5 >= 0 && x_1 >= x_5 + 1} -> int) -> ({x_3:int | x_3 >= 0} -> unit)))

cycles: 2
total: 0.591 sec
  abst: 0.013 sec
  mc: 0.029 sec
  refine: 0.277 sec
    exparam: 0.082 sec
