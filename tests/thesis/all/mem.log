MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi mem.ml

parsed::
 let rec mem_1030 x_1031 xs_1032 =
   (match xs_1032 with
      | [] -> false
      | x'_1033::xs_1034 -> x_1031 = x'_1033 || mem_1030 x_1031 xs_1034) 
 in
 let rec make_list_1035 n_1036 x_1037 = if n_1036 < 0 then
                                          []
                                        else
                                          x_1037::make_list_1035 (n_1036 - 1) x_1037 
 in
 let is_nil_1038 xs_1039 = (match xs_1039 with
                              | [] -> true
                              | _ -> false) 
 in
 let main_1040 n_1041 m_1042 =
   let xs_1043 = make_list_1035 n_1041 m_1042 
   in
     if is_nil_1038 xs_1043 || mem_1030 m_1042 xs_1043 then
       ()
     else
       {fail} () 
 in
   ()

set_target::
 let rec mem_1030 x_1031 xs_1032 =
   (match xs_1032 with
      | [] -> false
      | x'_1033::xs_1034 -> x_1031 = x'_1033 || mem_1030 x_1031 xs_1034) 
 in
 let rec make_list_1035 n_1036 x_1037 = if n_1036 < 0 then
                                          []
                                        else
                                          x_1037::make_list_1035 (n_1036 - 1) x_1037 
 in
 let is_nil_1038 xs_1039 = (match xs_1039 with
                              | [] -> true
                              | _ -> false) 
 in
 let main_1040 n_1041 m_1042 =
   let xs_1043 = make_list_1035 n_1041 m_1042 
   in
     if is_nil_1038 xs_1043 || mem_1030 m_1042 xs_1043 then
       ()
     else
       {fail} () 
 in
 let main_1079 = let arg1_1077 = rand_int () 
                 in
                 let arg2_1078 = rand_int () 
                 in
                   main_1040 arg1_1077 arg2_1078 
 in
   ()

abst_list::
 let rec mem_1030 (x_1031:int) (xs_1032:(int * (int -> int))) =
   if fst xs_1032 = 0 then
     false
   else
     if 1 <= fst xs_1032 then
       let xs_1034 = (fst xs_1032 - 1, fun x_1084 -> (snd xs_1032) (x_1084 + 1)) 
       in
       let x'_1033 = (snd xs_1032) 0 
       in
         x_1031 = x'_1033 || mem_1030 x_1031 xs_1034
     else
       _|_ 
 in
 let rec make_list_1035 (n_1036:int) (x_1037:int) =
   if n_1036 < 0 then
     (0, fun x_1117 -> _|_)
   else
     let cons_make_list_1113 (x_1111:int) (xs_1112:(int * (int -> int))) =
       (fst xs_1112 + 1, fun i_1110 -> (if i_1110 = 0 then
                                          x_1111
                                        else
                                          (snd xs_1112) (i_1110 - 1))) 
     in
       cons_make_list_1113 x_1037 (make_list_1035 (n_1036 - 1) x_1037) 
 in
 let is_nil_1038 (xs_1039:(int * (int -> int))) = if fst xs_1039 = 0 then
                                                    true
                                                  else
                                                    false 
 in
 let main_1040 (n_1041:int) (m_1042:int) =
   let xs_1043 = make_list_1035 n_1041 m_1042 
   in
     if is_nil_1038 xs_1043 || mem_1030 m_1042 xs_1043 then
       ()
     else
       {fail} () 
 in
 let main_1079 = let arg1_1077 = rand_int () 
                 in
                 let arg2_1078 = rand_int () 
                 in
                   main_1040 arg1_1077 arg2_1078 
 in
   ()

CPS::
 let rec mem_1030 (x_1031:int) (xs_1032:(int * (int -> ((int -> X) -> X)))) (k_mem_1190:(
   bool -> X)) =
   if fst xs_1032 = 0 then
     k_mem_1190 false
   else
     if 1 <= fst xs_1032 then
       (snd xs_1032) 0
         (fun x_1237 ->
            (if x_1031 = x_1237 then
               k_mem_1190 true
             else
               mem_1030 x_1031
                 (fst xs_1032 - 1, fun x_1084 -> fun k_mem_xs_1223 -> (snd xs_1032) (x_1084 + 1) k_mem_xs_1223)
                 k_mem_1190))
     else
       _|_ 
 in
 let rec make_list_1035 (n_1036:int) (x_1037:int) (k_make_list_1313:(
   (int * (int -> ((int -> X) -> X))) -> X)) =
   if n_1036 < 0 then
     k_make_list_1313 (0, fun x_1117 -> fun k_make_list_1325 -> _|_)
   else
     let cons_make_list_1113
       (x_1111:int) (xs_1112:(int * (int -> ((int -> X) -> X)))) (k_make_list_cons_make_list_1372:(
       (int * (int -> ((int -> X) -> X))) -> X)) =
       k_make_list_cons_make_list_1372
         (fst xs_1112 + 1,
         fun i_1110 ->
           fun k_make_list_cons_make_list_1387 ->
             (if i_1110 = 0 then
                k_make_list_cons_make_list_1387 x_1111
              else
                (snd xs_1112) (i_1110 - 1) k_make_list_cons_make_list_1387)) 
     in
       make_list_1035 (n_1036 - 1) x_1037 (fun x_1451 -> cons_make_list_1113 x_1037 x_1451 k_make_list_1313) 
 in
 let is_nil_1038 (xs_1039:(int * (int -> ((int -> X) -> X)))) (k_is_nil_1484:(
   bool -> X)) = if fst xs_1039 = 0 then
                   k_is_nil_1484 true
                 else
                   k_is_nil_1484 false 
 in
 let main_1040 (n_1041:int) (m_1042:int) (k_main_1508:(unit -> X)) =
   make_list_1035 n_1041 m_1042
     (fun x_1514 ->
        (let k_main_1588 (b_1600:bool) = if b_1600 then
                                           k_main_1508 ()
                                         else
                                           {|fail|} () k_main_1508 
         in
           is_nil_1038 x_1514
             (fun b_1589 -> (if b_1589 then
                               k_main_1588 true
                             else
                               mem_1030 m_1042 x_1514 k_main_1588)))) 
 in
   rand_int_cps () (fun x_1606 -> rand_int_cps () (fun x_1619 -> main_1040 x_1606 x_1619 (fun x_1603 -> end)))

remove_pair::
 let rec mem_1030 (x_1031:int) (xs1_1032:int) (xs2_1032:(int -> ((int -> X) -> X))) (k_mem_1190:(
   bool -> X)) =
   if xs1_1032 = 0 then
     k_mem_1190 false
   else
     if 1 <= xs1_1032 then
       xs2_1032 0
         (fun x_1237 ->
            (if x_1031 = x_1237 then
               k_mem_1190 true
             else
               mem_1030 x_1031 (xs1_1032 - 1) (fun x_1084 -> fun k_mem_xs_1223 -> xs2_1032 (x_1084 + 1) k_mem_xs_1223)
                 k_mem_1190))
     else
       _|_ 
 in
 let rec make_list_1035 (n_1036:int) (x_1037:int) (k_make_list_1313:(
   int -> ((int -> ((int -> X) -> X)) -> X))) =
   if n_1036 < 0 then
     k_make_list_1313 0 (fun x_1117 -> fun k_make_list_1325 -> _|_)
   else
     let cons_make_list_1113
       (x_1111:int) (xs1_1112:int) (xs2_1112:(int -> ((int -> X) -> X))) (k_make_list_cons_make_list_1372:(
       int -> ((int -> ((int -> X) -> X)) -> X))) =
       k_make_list_cons_make_list_1372 (xs1_1112 + 1)
         (fun i_1110 ->
            fun k_make_list_cons_make_list_1387 ->
              (if i_1110 = 0 then
                 k_make_list_cons_make_list_1387 x_1111
               else
                 xs2_1112 (i_1110 - 1) k_make_list_cons_make_list_1387)) 
     in
       make_list_1035 (n_1036 - 1) x_1037
         (fun x1_1451 -> fun x2_1451 -> cons_make_list_1113 x_1037 x1_1451 x2_1451 k_make_list_1313) 
 in
 let is_nil_1038 (xs1_1039:int) (xs2_1039:(int -> ((int -> X) -> X))) (k_is_nil_1484:(
   bool -> X)) = if xs1_1039 = 0 then
                   k_is_nil_1484 true
                 else
                   k_is_nil_1484 false 
 in
 let main_1040 (n_1041:int) (m_1042:int) (k_main_1508:(unit -> X)) =
   make_list_1035 n_1041 m_1042
     (fun x1_1514 ->
        fun x2_1514 ->
          (let k_main_1588 (b_1600:bool) = if b_1600 then
                                             k_main_1508 ()
                                           else
                                             {|fail|} () k_main_1508 
           in
             is_nil_1038 x1_1514 x2_1514
               (fun b_1589 -> (if b_1589 then
                                 k_main_1588 true
                               else
                                 mem_1030 m_1042 x1_1514 x2_1514 k_main_1588)))) 
 in
   rand_int_cps () (fun x_1606 -> rand_int_cps () (fun x_1619 -> main_1040 x_1606 x_1619 (fun x_1603 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1681
  main_1681 -> (rand_int f_1689)
  br_mem_1692 b_1693 x_1031 xs1_1032 xs2_1032 k_mem_1190 when b_1693 ->
      (xs2_1032 0 (f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032))
  br_mem_1692 b_1693 x_1031 xs1_1032 xs2_1032 k_mem_1190 when (not b_1693) -> _|_
  cons_make_list_1113 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 k_make_list_cons_make_list_1372 ->
      (k_make_list_cons_make_list_1372 (xs1_1112 + 1) (f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112))
  f_1689 x_1606 -> (rand_int (f_1690 x_1606))
  f_1690 x_1606 x_1619 -> (main_1040 x_1606 x_1619 (f_1691 x_1606 x_1619))
  f_1691 x_1606 x_1619 x_1603 -> end
  f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 i_1110 k_make_list_cons_make_list_1387 when (
      i_1110 = 0) -> (k_make_list_cons_make_list_1387 x_1111)
  f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 i_1110 k_make_list_cons_make_list_1387 when (
      not (i_1110 = 0)) -> (xs2_1112 (i_1110 - 1) k_make_list_cons_make_list_1387)
  f_main_1687 m_1042 n_1041 k_main_1508 x1_1514 x2_1514 ->
      (is_nil_1038 x1_1514 x2_1514 (f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514))
  f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514 b_1589 when b_1589 ->
      (k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 true)
  f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514 b_1589 when (
      not b_1589) -> (mem_1030 m_1042 x1_1514 x2_1514 (k_main_1588 m_1042 n_1041 x1_1514 k_main_1508))
  f_make_list_1684 n_1036 x_1037 x_1117 k_make_list_1325 -> _|_
  f_make_list_1686 n_1036 x_1037 k_make_list_1313 x1_1451 x2_1451 ->
      (cons_make_list_1113 n_1036 x_1037 x_1037 x1_1451 x2_1451 k_make_list_1313)
  f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032 x_1237 when (x_1031 = x_1237) -> (k_mem_1190 true)
  f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032 x_1237 when (not (x_1031 = x_1237)) ->
      (mem_1030 x_1031 (xs1_1032 - 1) (f_mem_1683 x_1031 x_1237 xs1_1032 xs2_1032) k_mem_1190)
  f_mem_1683 x_1031 x_1237 xs1_1032 xs2_1032 x_1084 k_mem_xs_1223 -> (xs2_1032 (x_1084 + 1) k_mem_xs_1223)
  fail_1694 b k -> {fail} => (k ())
  is_nil_1038 xs1_1039 xs2_1039 k_is_nil_1484 when (xs1_1039 = 0) -> (k_is_nil_1484 true)
  is_nil_1038 xs1_1039 xs2_1039 k_is_nil_1484 when (not (xs1_1039 = 0)) -> (k_is_nil_1484 false)
  k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 b_1600 when b_1600 -> (k_main_1508 ())
  k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 b_1600 when (not b_1600) -> (fail_1694 true k_main_1508)
  main_1040 n_1041 m_1042 k_main_1508 -> (make_list_1035 n_1041 m_1042 (f_main_1687 m_1042 n_1041 k_main_1508))
  make_list_1035 n_1036 x_1037 k_make_list_1313 when (n_1036 < 0) ->
      (k_make_list_1313 0 (f_make_list_1684 n_1036 x_1037))
  make_list_1035 n_1036 x_1037 k_make_list_1313 when (not (n_1036 < 0)) ->
      (make_list_1035 (n_1036 - 1) x_1037 (f_make_list_1686 n_1036 x_1037 k_make_list_1313))
  mem_1030 x_1031 xs1_1032 xs2_1032 k_mem_1190 when (xs1_1032 = 0) -> (k_mem_1190 false)
  mem_1030 x_1031 xs1_1032 xs2_1032 k_mem_1190 when (not (xs1_1032 = 0)) ->
      (br_mem_1692 (1 <= xs1_1032) x_1031 xs1_1032 xs2_1032 k_mem_1190)
Types:
  main_1681 : X
  fail_1694 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1035 : (int -> int -> (int -> (int -> (int -> X) -> X) -> X) -> X)
  mem_1030 : (int -> int -> (int -> (int -> X) -> X) -> (x_10:bool[x_10] -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1681 ... --> 
  f_1689 ... --> 
  f_1690 ... --> 
  main_1040 ... --> 
  make_list_1035 [1/2] ... --> 
  f_main_1687 ... --> 
  is_nil_1038 [2/2] ... --> 
  f_main_1688 [2/2] ... --> 
  mem_1030 [1/2] ... --> 
  k_main_1588 [2/2] ... --> 
  fail_1694 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 1; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(262)[1]
  program:
    main_1681  | true = ((Random.int 0) f_1689)
    br_mem_1692 b_1693 x_1031 xs1_1032 xs2_1032 k_mem_1190 | b_1693 = (
    xs2_1032 0
             (f_mem_1682 x_1031
                         xs1_1032
                         k_mem_1190
                         xs2_1032))
    br_mem_1692 b_1693 x_1031 xs1_1032 xs2_1032 k_mem_1190 | (not b_1693) = bot
    cons_make_list_1113 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 k_make_list_cons_make_list_1372 | true = (
    k_make_list_cons_make_list_1372 (xs1_1112 + 1)
                                    (f_cons_make_list_1685 n_1036
                                                           x_1037
                                                           x_1111
                                                           xs1_1112
                                                           xs2_1112))
    f_1689 x_1606 | true = ((Random.int 0) (f_1690 x_1606))
    f_1690 x_1606 x_1619 | true = (main_1040 x_1606
                                             x_1619
                                             (f_1691 x_1606
                                                     x_1619))
    f_1691 x_1606 x_1619 x_1603 | true = end
    f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 i_1110 k_make_list_cons_make_list_1387 | (
    i_1110 = 0) = (k_make_list_cons_make_list_1387 x_1111)
    f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 i_1110 k_make_list_cons_make_list_1387 | (
    not (i_1110 = 0)) = (xs2_1112 (i_1110 - 1)
                                  k_make_list_cons_make_list_1387)
    f_main_1687 m_1042 n_1041 k_main_1508 x1_1514 x2_1514 | true = (is_nil_1038
                                                                    x1_1514
                                                                    x2_1514
                                                                    (
                                                                    f_main_1688
                                                                    m_1042
                                                                    n_1041
                                                                    x1_1514
                                                                    k_main_1508
                                                                    x2_1514))
    f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514 b_1589 | b_1589 = (
    k_main_1588 m_1042
                n_1041
                x1_1514
                k_main_1508
                true)
    f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514 b_1589 | (not b_1589) = (
    mem_1030 m_1042
             x1_1514
             x2_1514
             (k_main_1588 m_1042
                          n_1041
                          x1_1514
                          k_main_1508))
    f_make_list_1684 n_1036 x_1037 x_1117 k_make_list_1325 | true = bot
    f_make_list_1686 n_1036 x_1037 k_make_list_1313 x1_1451 x2_1451 | true = (
    cons_make_list_1113 n_1036
                        x_1037
                        x_1037
                        x1_1451
                        x2_1451
                        k_make_list_1313)
    f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032 x_1237 | (x_1031 = x_1237) = (
    k_mem_1190 true)
    f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032 x_1237 | (not (x_1031 = x_1237)) = (
    mem_1030 x_1031
             (xs1_1032 - 1)
             (f_mem_1683 x_1031
                         x_1237
                         xs1_1032
                         xs2_1032)
             k_mem_1190)
    f_mem_1683 x_1031 x_1237 xs1_1032 xs2_1032 x_1084 k_mem_xs_1223 | true = (
    xs2_1032 (x_1084 + 1)
             k_mem_xs_1223)
    fail_1694 b k | true = (fail ())
    is_nil_1038 xs1_1039 xs2_1039 k_is_nil_1484 | (xs1_1039 = 0) = (k_is_nil_1484 true)
    is_nil_1038 xs1_1039 xs2_1039 k_is_nil_1484 | (not (xs1_1039 = 0)) = (
    k_is_nil_1484 false)
    k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 b_1600 | b_1600 = (
    k_main_1508 ())
    k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 b_1600 | (not b_1600) = (
    fail_1694 true
              k_main_1508)
    main_1040 n_1041 m_1042 k_main_1508 | true = (make_list_1035 n_1041
                                                                 m_1042
                                                                 (f_main_1687 m_1042
                                                                    n_1041
                                                                    k_main_1508))
    make_list_1035 n_1036 x_1037 k_make_list_1313 | (n_1036 < 0) = (k_make_list_1313 0
                                                                    (f_make_list_1684 n_1036
                                                                    x_1037))
    make_list_1035 n_1036 x_1037 k_make_list_1313 | (not (n_1036 < 0)) = (
    make_list_1035 (n_1036 - 1)
                   x_1037
                   (f_make_list_1686 n_1036
                                     x_1037
                                     k_make_list_1313))
    mem_1030 x_1031 xs1_1032 xs2_1032 k_mem_1190 | (xs1_1032 = 0) = (
    k_mem_1190 false)
    mem_1030 x_1031 xs1_1032 xs2_1032 k_mem_1190 | (not (xs1_1032 = 0)) = (
    br_mem_1692 (1 <= xs1_1032)
                x_1031
                xs1_1032
                xs2_1032
                k_mem_1190)
    main_1681:X
    br_mem_1692:bool -> int -> int -> (int -> (int -> X) -> X) -> (bool -> X) -> X
    cons_make_list_1113:int ->
                        int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1689:int -> X
    f_1690:int -> int -> X
    f_1691:int -> int -> unit -> X
    f_cons_make_list_1685:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_main_1687:int -> int -> (unit -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_main_1688:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> bool -> X
    f_make_list_1684:int -> int -> int -> (int -> X) -> X
    f_make_list_1686:int -> int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_mem_1682:int -> int -> (bool -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_mem_1683:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    fail_1694:bool -> (unit -> X) -> X
    is_nil_1038:int -> (int -> (int -> X) -> X) -> (bool -> X) -> X
    k_main_1588:int -> int -> int -> (unit -> X) -> bool -> X
    main_1040:int -> int -> (unit -> X) -> X
    make_list_1035:int -> int -> (int -> (int -> (int -> X) -> X) -> X) -> X
    mem_1030:int -> int -> (int -> (int -> X) -> X) -> (bool -> X) -> X
  inlined functions: br_mem_1692,cons_make_list_1113,f_1689,f_1690,f_1691,f_cons_make_list_1685,f_main_1687,f_main_1688,f_make_list_1684,f_make_list_1686,f_mem_1682,f_mem_1683,is_nil_1038,k_main_1588,main_1040
  counterexample: 0:0:0:0:0:0:1:1:0:1:0
  error traces:
    [true.nop(<f_1689@4:0> = var2)
     [true.nop((<f_1690@7:0> = <f_1689@4:0>) && (<f_1690@7:1> = var3))
      [true.((<main_1040@9:0> = <f_1690@7:0>) && (<main_1040@9:1> = <f_1690@7:1>))
       [true.((<make_list_1035@11:0> = <main_1040@9:0>) && (<make_list_1035@11:1> = <main_1040@9:1>))
        [(<make_list_1035@11:0> < 0).(<<make_list_1035@11:2>@14:0> = 0)
         [true.
          ((<f_main_1687@16:0> = <main_1040@9:1>) &&
           ((<f_main_1687@16:1> = <main_1040@9:0>) && (<f_main_1687@16:3> = <<make_list_1035@11:2>@14:0>)))
          [true.(<is_nil_1038@18:0> = <f_main_1687@16:3>)
           [(not (<is_nil_1038@18:0> = 0)).(<<is_nil_1038@18:2>@21:0> = false)
            [true.
             ((<f_main_1688@23:0> = <f_main_1687@16:0>) &&
              ((<f_main_1688@23:1> = <f_main_1687@16:1>) &&
               ((<f_main_1688@23:2> = <f_main_1687@16:3>) && (<f_main_1688@23:5> = <<is_nil_1038@18:2>@21:0>))))
             [(not <f_main_1688@23:5>).
              ((<mem_1030@26:0> = <f_main_1688@23:0>) && (<mem_1030@26:1> = <f_main_1688@23:2>))
              [(<mem_1030@26:1> = 0).(<<mem_1030@26:3>@29:0> = false)
               [true.
                ((<k_main_1588@31:0> = <f_main_1688@23:0>) &&
                 ((<k_main_1588@31:1> = <f_main_1688@23:1>) &&
                  ((<k_main_1588@31:2> = <f_main_1688@23:2>) && (<k_main_1588@31:4> = <<mem_1030@26:3>@29:0>))))
                [(not <k_main_1588@31:4>).(<fail_1694@34:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(263)[2]
    horn clauses:
      P[<fail_1694@34:0>](<fail_1694@34:0>:bool)|- bot
      
      P[<k_main_1588@31:4>](<k_main_1588@31:0>:int,<k_main_1588@31:1>:int,<k_main_1588@31:2>:int,false:bool),
      <fail_1694@34:0> |- P[<fail_1694@34:0>](<fail_1694@34:0>:bool)
      
      P[<f_main_1688@23:5>](<k_main_1588@31:0>:int,<k_main_1588@31:1>:int,<k_main_1588@31:2>:int,false:bool),
      P[<<mem_1030@26:3>@29:0>](<k_main_1588@31:0>:int,<k_main_1588@31:2>:int,<k_main_1588@31:4>:bool)|- P[<k_main_1588@31:4>](
      <k_main_1588@31:0>:int,<k_main_1588@31:1>:int,<k_main_1588@31:2>:int,
      <k_main_1588@31:4>:bool)
      
      P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int),
      ((<mem_1030@26:1> = 0) && (not <<mem_1030@26:3>@29:0>))
      |- P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,
                                   <<mem_1030@26:3>@29:0>:bool)
      
      P[<f_main_1688@23:5>](<mem_1030@26:0>:int,<f_main_1688@23:1>:int,<mem_1030@26:1>:int,false:bool)|- P[<mem_1030@26:1>](
      <mem_1030@26:0>:int,<mem_1030@26:1>:int)
      
      P[<f_main_1687@16:3>](<f_main_1688@23:0>:int,<f_main_1688@23:1>:int,<f_main_1688@23:2>:int),
      P[<<is_nil_1038@18:2>@21:0>](<f_main_1688@23:2>:int,<f_main_1688@23:5>:bool)|- P[<f_main_1688@23:5>](
      <f_main_1688@23:0>:int,<f_main_1688@23:1>:int,<f_main_1688@23:2>:int,
      <f_main_1688@23:5>:bool)
      
      P[<is_nil_1038@18:0>](<is_nil_1038@18:0>:int), ((<is_nil_1038@18:0> <> 0) && (not <<is_nil_1038@18:2>@21:0>))
      |- P[<<is_nil_1038@18:2>@21:0>](<is_nil_1038@18:0>:int,<<is_nil_1038@18:2>@21:0>:bool)
      
      P[<f_main_1687@16:3>](<f_main_1687@16:0>:int,<f_main_1687@16:1>:int,<is_nil_1038@18:0>:int)|- P[<is_nil_1038@18:0>](
      <is_nil_1038@18:0>:int)
      
      P[<main_1040@9:1>](<f_main_1687@16:1>:int,<f_main_1687@16:0>:int),
      P[<<make_list_1035@11:2>@14:0>](<f_main_1687@16:1>:int,<f_main_1687@16:0>:int,<f_main_1687@16:3>:int)|- P[<f_main_1687@16:3>](
      <f_main_1687@16:0>:int,<f_main_1687@16:1>:int,<f_main_1687@16:3>:int)
      
      P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
      ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
      |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int,
                                         <<make_list_1035@11:2>@14:0>:int)
      
      P[<main_1040@9:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)|- P[<make_list_1035@11:1>](
      <make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
      
      P[<f_1690@7:1>](<main_1040@9:0>:int,<main_1040@9:1>:int)|- P[<main_1040@9:1>](
      <main_1040@9:0>:int,<main_1040@9:1>:int)
      
      P[<f_1689@4:0>](<f_1690@7:0>:int)|- P[<f_1690@7:1>](<f_1690@7:0>:int,
                                                          <f_1690@7:1>:int)
      
      |- P[<f_1689@4:0>](<f_1689@4:0>:int)
    call trees:
      <main_1681@1>
        <f_1689@4>
          <f_1690@7>
            <main_1040@9>
              <make_list_1035@11>
              </<make_list_1035@11:2>@14>
              <f_main_1687@16>
                <is_nil_1038@18>
                </<is_nil_1038@18:2>@21>
                <f_main_1688@23>
                  <mem_1030@26>
                  </<mem_1030@26:3>@29>
                  <k_main_1588@31>
                    <fail_1694@34>
    inlined horn clauses:
      P[<fail_1694@34:0>](<fail_1694@34:0>:bool)|- bot
      
      P[<<make_list_1035@11:2>@14:0>](<k_main_1588@31:1>:int,<k_main_1588@31:0>:int,<k_main_1588@31:2>:int),
      P[<<mem_1030@26:3>@29:0>](<k_main_1588@31:0>:int,<k_main_1588@31:2>:int,false:bool),
      ((<k_main_1588@31:2> <> 0) && <fail_1694@34:0>) |- P[<fail_1694@34:0>](
      <fail_1694@34:0>:bool)
      
      P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int),
      ((<mem_1030@26:1> = 0) && (not <<mem_1030@26:3>@29:0>))
      |- P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,
                                   <<mem_1030@26:3>@29:0>:bool)
      
      P[<<make_list_1035@11:2>@14:0>](<f_main_1688@23:1>:int,<mem_1030@26:0>:int,<mem_1030@26:1>:int),
      (<mem_1030@26:1> <> 0) |- P[<mem_1030@26:1>](<mem_1030@26:0>:int,
                                                   <mem_1030@26:1>:int)
      
      P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
      ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
      |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int,
                                         <<make_list_1035@11:2>@14:0>:int)
      
      |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
    begin ParamSubstInfer.infer(1691)[3]
      
    end ParamSubstInfer.infer(1691)[3] (0.024997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1693)[3]
      
    end RefTypeInfer.elim_coeffs(1693)[3] (0.000000 sec.)
    begin GenHcSolver.solve(1900)[3]
      Horn clauses:
        P[<fail_1694@34:0>](<fail_1694@34:0>:bool)|- bot
        
        P[<<make_list_1035@11:2>@14:0>](<k_main_1588@31:1>:int,<k_main_1588@31:0>:int,<k_main_1588@31:2>:int),
        P[<<mem_1030@26:3>@29:0>](<k_main_1588@31:0>:int,<k_main_1588@31:2>:int,false:bool),
        ((<k_main_1588@31:2> <> 0) && <fail_1694@34:0>) |- P[<fail_1694@34:0>](
        <fail_1694@34:0>:bool)
        
        P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int),
        ((<mem_1030@26:1> = 0) && (not <<mem_1030@26:3>@29:0>))
        |- P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,
                                     <<mem_1030@26:3>@29:0>:bool)
        
        P[<<make_list_1035@11:2>@14:0>](<f_main_1688@23:1>:int,<mem_1030@26:0>:int,<mem_1030@26:1>:int),
        (<mem_1030@26:1> <> 0) |- P[<mem_1030@26:1>](<mem_1030@26:0>:int,
                                                     <mem_1030@26:1>:int)
        
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,
                                           <make_list_1035@11:1>:int,
                                           <<make_list_1035@11:2>@14:0>:int)
        
        |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
      lower bounds:
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int) = true
        P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int,<<make_list_1035@11:2>@14:0>:int) =
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int) = false
        P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,<<mem_1030@26:3>@29:0>:bool) = false
        P[<fail_1694@34:0>](<fail_1694@34:0>:bool) = false
      upper bounds:
        P[<fail_1694@34:0>](var9:bool) = true
      begin GenHcSolver.classify_pids(2864)[4]
        output:
          [<fail_1694@34:0>]
      end GenHcSolver.classify_pids(2864)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2867)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2868)[5]
          begin InterpProver.interpolate_fresh(2869)[6]
            begin InterpProver.interpolate_log(2870)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2871)[8]
                begin InterpProver.interpolate_simplify(2872)[9]
                  begin InterpProver.interpolate_quick(2885)[10]
                    
                  end InterpProver.interpolate_quick(2885)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2889)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2889)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2872)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2871)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2870)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2869)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2868)[5] (0.000000 sec.)
        output:
          P[<fail_1694@34:0>](<fail_1694@34:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2867)[4] (0.000000 sec.)
      Horn clauses:
        P[<<make_list_1035@11:2>@14:0>](<k_main_1588@31:1>:int,<k_main_1588@31:0>:int,<k_main_1588@31:2>:int),
        P[<<mem_1030@26:3>@29:0>](<k_main_1588@31:0>:int,<k_main_1588@31:2>:int,false:bool), (
        <k_main_1588@31:2> <> 0) |- bot
        
        P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int),
        ((<mem_1030@26:1> = 0) && (not <<mem_1030@26:3>@29:0>))
        |- P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,
                                     <<mem_1030@26:3>@29:0>:bool)
        
        P[<<make_list_1035@11:2>@14:0>](<f_main_1688@23:1>:int,<mem_1030@26:0>:int,<mem_1030@26:1>:int),
        (<mem_1030@26:1> <> 0) |- P[<mem_1030@26:1>](<mem_1030@26:0>:int,
                                                     <mem_1030@26:1>:int)
        
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,
                                           <make_list_1035@11:1>:int,
                                           <<make_list_1035@11:2>@14:0>:int)
        
        |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
      lower bounds:
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int) = true
        P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int,<<make_list_1035@11:2>@14:0>:int) =
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int) = false
        P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,<<mem_1030@26:3>@29:0>:bool) = false
      upper bounds:
        P[<<mem_1030@26:3>@29:0>](var10:int,var11:int,var12:bool) = true
      begin GenHcSolver.classify_pids(3976)[4]
        output:
          [<<mem_1030@26:3>@29:0>]
      end GenHcSolver.classify_pids(3976)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(3979)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(3980)[5]
          begin InterpProver.interpolate_fresh(3981)[6]
            begin InterpProver.interpolate_log(3982)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(3983)[8]
                begin InterpProver.interpolate_simplify(3984)[9]
                  begin InterpProver.interpolate_quick(3997)[10]
                    
                  end InterpProver.interpolate_quick(3997)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(4001)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(4001)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3984)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3983)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(3982)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(3981)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(3980)[5] (0.001000 sec.)
        output:
          P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,<<mem_1030@26:3>@29:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(3979)[4] (0.001000 sec.)
      Horn clauses:
        P[<mem_1030@26:1>](<mem_1030@26:0>:int,0:int)|- bot
        
        P[<<make_list_1035@11:2>@14:0>](<f_main_1688@23:1>:int,<mem_1030@26:0>:int,<mem_1030@26:1>:int),
        (<mem_1030@26:1> <> 0) |- P[<mem_1030@26:1>](<mem_1030@26:0>:int,
                                                     <mem_1030@26:1>:int)
        
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,
                                           <make_list_1035@11:1>:int,
                                           <<make_list_1035@11:2>@14:0>:int)
        
        |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
      lower bounds:
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int) = true
        P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int,<<make_list_1035@11:2>@14:0>:int) =
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int) = false
      upper bounds:
        P[<mem_1030@26:1>](var15:int,var16:int) = true
      begin GenHcSolver.classify_pids(4862)[4]
        output:
          [<mem_1030@26:1>]
      end GenHcSolver.classify_pids(4862)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(4865)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(4866)[5]
          begin InterpProver.interpolate_fresh(4867)[6]
            begin InterpProver.interpolate_log(4868)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(4869)[8]
                begin InterpProver.interpolate_simplify(4870)[9]
                  begin InterpProver.interpolate_quick(4883)[10]
                    
                  end InterpProver.interpolate_quick(4883)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(4887)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(4887)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4870)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(4869)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(4868)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(4867)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(4866)[5] (0.000000 sec.)
        output:
          P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int) = false
      end ApronInterface.convex_hull_interpolate(4865)[4] (0.000000 sec.)
      Horn clauses:
        P[<<make_list_1035@11:2>@14:0>](<f_main_1688@23:1>:int,<mem_1030@26:0>:int,<mem_1030@26:1>:int),
        (<mem_1030@26:1> <> 0) |- bot
        
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,
                                           <make_list_1035@11:1>:int,
                                           <<make_list_1035@11:2>@14:0>:int)
        
        |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
      lower bounds:
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int) = true
        P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int,<<make_list_1035@11:2>@14:0>:int) =
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
      upper bounds:
        P[<<make_list_1035@11:2>@14:0>](var17:int,var18:int,var19:int) = (var19 = 0)
      begin GenHcSolver.classify_pids(5651)[4]
        output:
          [<<make_list_1035@11:2>@14:0>]
      end GenHcSolver.classify_pids(5651)[4] (0.000000 sec.)
      lb:((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
      nub:(not (<<make_list_1035@11:2>@14:0> = 0))
      begin ApronInterface.convex_hull_interpolate(5654)[4]
        lb:((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        nub:(not (<<make_list_1035@11:2>@14:0> = 0))
        lb':((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        nub':(not (<<make_list_1035@11:2>@14:0> = 0))
        begin InterpProver.interpolate(5655)[5]
          begin InterpProver.interpolate_fresh(5656)[6]
            begin InterpProver.interpolate_log(5657)[7]
              input1: ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
              input2: (not (<<make_list_1035@11:2>@14:0> = 0))
              begin InterpProver.interpolate_check(5658)[8]
                begin InterpProver.interpolate_simplify(5659)[9]
                  begin InterpProver.interpolate_quick(5688)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(5697)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(5698)[12]
                        begin CsisatInterface.interpolate_csisat_log(5699)[13]
                          input1: (0 = v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0 & (1 + v_sep_make_list_1035_sep_11_sep_0) <= 0)
                          input2: not 0 = v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(5700)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(5700)[14] (0.000000 sec.)
                          output: 0 = v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(5699)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0
                        after dnf conversion: ((0 = v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(5698)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(5697)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(5688)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5659)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5658)[8] (0.001000 sec.)
              output: (0 = <<make_list_1035@11:2>@14:0>)
            end InterpProver.interpolate_log(5657)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(5656)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(5655)[5] (0.001000 sec.)
        output:
          P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int,<<make_list_1035@11:2>@14:0>:int) =
          (0 = <<make_list_1035@11:2>@14:0>)
      end ApronInterface.convex_hull_interpolate(5654)[4] (0.001000 sec.)
      Horn clauses:
        |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
      lower bounds:
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int) = true
      upper bounds:
        P[<make_list_1035@11:1>](var20:int,var21:int) = true
      begin GenHcSolver.classify_pids(5995)[4]
        output:
          [<make_list_1035@11:1>]
      end GenHcSolver.classify_pids(5995)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(5998)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(5999)[5]
          begin InterpProver.interpolate_fresh(6000)[6]
            begin InterpProver.interpolate_log(6001)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(6002)[8]
                begin InterpProver.interpolate_simplify(6003)[9]
                  begin InterpProver.interpolate_quick(6016)[10]
                    
                  end InterpProver.interpolate_quick(6016)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(6003)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(6002)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(6001)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(6000)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(5999)[5] (0.000000 sec.)
        output:
          P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int) = true
      end ApronInterface.convex_hull_interpolate(5998)[4] (0.000000 sec.)
      begin HcSolver.check_validity(6071)[4]
        input:
          P[<fail_1694@34:0>](<fail_1694@34:0>:bool)|- bot
          
          P[<<make_list_1035@11:2>@14:0>](<k_main_1588@31:1>:int,<k_main_1588@31:0>:int,<k_main_1588@31:2>:int),
          P[<<mem_1030@26:3>@29:0>](<k_main_1588@31:0>:int,<k_main_1588@31:2>:int,false:bool),
          ((<k_main_1588@31:2> <> 0) && <fail_1694@34:0>) |- P[<fail_1694@34:0>](
          <fail_1694@34:0>:bool)
          
          P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int),
          ((<mem_1030@26:1> = 0) && (not <<mem_1030@26:3>@29:0>))
          |- P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,
                                       <<mem_1030@26:3>@29:0>:bool)
          
          P[<<make_list_1035@11:2>@14:0>](<f_main_1688@23:1>:int,<mem_1030@26:0>:int,<mem_1030@26:1>:int),
          (<mem_1030@26:1> <> 0) |- P[<mem_1030@26:1>](<mem_1030@26:0>:int,
                                                       <mem_1030@26:1>:int)
          
          P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
          ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
          |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,
                                             <make_list_1035@11:1>:int,
                                             <<make_list_1035@11:2>@14:0>:int)
          
          |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(6071)[4] (0.001999 sec.)
      solution:
        P[<fail_1694@34:0>](<fail_1694@34:0>:bool) = false
        P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,<<mem_1030@26:3>@29:0>:bool) = false
        P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int) = false
        P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int,<<make_list_1035@11:2>@14:0>:int) =
        (0 = <<make_list_1035@11:2>@14:0>)
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int) = true
    end GenHcSolver.solve(1900)[3] (0.025996 sec.)
    begin GenHcSolver.solve(6367)[3]
      Horn clauses:
        P[<fail_1694@34:0>](<fail_1694@34:0>:bool)|- bot
        
        P[<<make_list_1035@11:2>@14:0>](<k_main_1588@31:1>:int,<k_main_1588@31:0>:int,<k_main_1588@31:2>:int),
        P[<<mem_1030@26:3>@29:0>](<k_main_1588@31:0>:int,<k_main_1588@31:2>:int,false:bool),
        ((<k_main_1588@31:2> <> 0) && <fail_1694@34:0>) |- P[<fail_1694@34:0>](
        <fail_1694@34:0>:bool)
        
        P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int),
        ((<mem_1030@26:1> = 0) && (not <<mem_1030@26:3>@29:0>))
        |- P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,
                                     <<mem_1030@26:3>@29:0>:bool)
        
        P[<<make_list_1035@11:2>@14:0>](<f_main_1688@23:1>:int,<mem_1030@26:0>:int,<mem_1030@26:1>:int),
        (<mem_1030@26:1> <> 0) |- P[<mem_1030@26:1>](<mem_1030@26:0>:int,
                                                     <mem_1030@26:1>:int)
        
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,
                                           <make_list_1035@11:1>:int,
                                           <<make_list_1035@11:2>@14:0>:int)
        
        |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
      lower bounds:
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int) = true
        P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int,<<make_list_1035@11:2>@14:0>:int) =
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int) = false
        P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,<<mem_1030@26:3>@29:0>:bool) = false
        P[<fail_1694@34:0>](<fail_1694@34:0>:bool) = false
      upper bounds:
        P[<fail_1694@34:0>](var23:bool) = true
      begin GenHcSolver.classify_pids(7331)[4]
        output:
          [<fail_1694@34:0>]
      end GenHcSolver.classify_pids(7331)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(7334)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(7337)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(7337)[5] (0.000999 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(7342)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(7342)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(7345)[5]
          begin InterpProver.interpolate_fresh(7346)[6]
            begin InterpProver.interpolate_log(7347)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(7348)[8]
                begin InterpProver.interpolate_simplify(7349)[9]
                  begin InterpProver.interpolate_quick(7364)[10]
                    
                  end InterpProver.interpolate_quick(7364)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(7368)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(7368)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(7349)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(7348)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(7347)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(7346)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(7345)[5] (0.000000 sec.)
        output:
          P[<fail_1694@34:0>](<fail_1694@34:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(7334)[4] (0.000999 sec.)
      Horn clauses:
        P[<<make_list_1035@11:2>@14:0>](<k_main_1588@31:1>:int,<k_main_1588@31:0>:int,<k_main_1588@31:2>:int),
        P[<<mem_1030@26:3>@29:0>](<k_main_1588@31:0>:int,<k_main_1588@31:2>:int,false:bool), (
        <k_main_1588@31:2> <> 0) |- bot
        
        P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int),
        ((<mem_1030@26:1> = 0) && (not <<mem_1030@26:3>@29:0>))
        |- P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,
                                     <<mem_1030@26:3>@29:0>:bool)
        
        P[<<make_list_1035@11:2>@14:0>](<f_main_1688@23:1>:int,<mem_1030@26:0>:int,<mem_1030@26:1>:int),
        (<mem_1030@26:1> <> 0) |- P[<mem_1030@26:1>](<mem_1030@26:0>:int,
                                                     <mem_1030@26:1>:int)
        
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,
                                           <make_list_1035@11:1>:int,
                                           <<make_list_1035@11:2>@14:0>:int)
        
        |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
      lower bounds:
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int) = true
        P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int,<<make_list_1035@11:2>@14:0>:int) =
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int) = false
        P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,<<mem_1030@26:3>@29:0>:bool) = false
      upper bounds:
        P[<<mem_1030@26:3>@29:0>](var24:int,var25:int,var26:bool) = true
      begin GenHcSolver.classify_pids(8462)[4]
        output:
          [<<mem_1030@26:3>@29:0>]
      end GenHcSolver.classify_pids(8462)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(8465)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(8468)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(8468)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(8473)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(8473)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(8476)[5]
          begin InterpProver.interpolate_fresh(8477)[6]
            begin InterpProver.interpolate_log(8478)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(8479)[8]
                begin InterpProver.interpolate_simplify(8480)[9]
                  begin InterpProver.interpolate_quick(8495)[10]
                    
                  end InterpProver.interpolate_quick(8495)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(8499)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(8499)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(8480)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(8479)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(8478)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(8477)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(8476)[5] (0.001000 sec.)
        output:
          P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,<<mem_1030@26:3>@29:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(8465)[4] (0.001000 sec.)
      Horn clauses:
        P[<mem_1030@26:1>](<mem_1030@26:0>:int,0:int)|- bot
        
        P[<<make_list_1035@11:2>@14:0>](<f_main_1688@23:1>:int,<mem_1030@26:0>:int,<mem_1030@26:1>:int),
        (<mem_1030@26:1> <> 0) |- P[<mem_1030@26:1>](<mem_1030@26:0>:int,
                                                     <mem_1030@26:1>:int)
        
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,
                                           <make_list_1035@11:1>:int,
                                           <<make_list_1035@11:2>@14:0>:int)
        
        |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
      lower bounds:
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int) = true
        P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int,<<make_list_1035@11:2>@14:0>:int) =
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int) = false
      upper bounds:
        P[<mem_1030@26:1>](var29:int,var30:int) = true
      begin GenHcSolver.classify_pids(9367)[4]
        output:
          [<mem_1030@26:1>]
      end GenHcSolver.classify_pids(9367)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(9370)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(9373)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(9373)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(9378)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(9378)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(9381)[5]
          begin InterpProver.interpolate_fresh(9382)[6]
            begin InterpProver.interpolate_log(9383)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(9384)[8]
                begin InterpProver.interpolate_simplify(9385)[9]
                  begin InterpProver.interpolate_quick(9400)[10]
                    
                  end InterpProver.interpolate_quick(9400)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(9404)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(9404)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(9385)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(9384)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(9383)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(9382)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(9381)[5] (0.000000 sec.)
        output:
          P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int) = false
      end ApronInterface.convex_hull_interpolate(9370)[4] (0.000000 sec.)
      Horn clauses:
        P[<<make_list_1035@11:2>@14:0>](<f_main_1688@23:1>:int,<mem_1030@26:0>:int,<mem_1030@26:1>:int),
        (<mem_1030@26:1> <> 0) |- bot
        
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,
                                           <make_list_1035@11:1>:int,
                                           <<make_list_1035@11:2>@14:0>:int)
        
        |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
      lower bounds:
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int) = true
        P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int,<<make_list_1035@11:2>@14:0>:int) =
        ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
      upper bounds:
        P[<<make_list_1035@11:2>@14:0>](var31:int,var32:int,var33:int) = (var33 = 0)
      begin GenHcSolver.classify_pids(10175)[4]
        output:
          [<<make_list_1035@11:2>@14:0>]
      end GenHcSolver.classify_pids(10175)[4] (0.000000 sec.)
      lb:((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
      nub:(not (<<make_list_1035@11:2>@14:0> = 0))
      begin ApronInterface.convex_hull_interpolate(10178)[4]
        lb:((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
        nub:(not (<<make_list_1035@11:2>@14:0> = 0))
        begin ExtFormula.Formula.case_analysis_boolean(10188)[5]
          ts: ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
          
        end ExtFormula.Formula.case_analysis_boolean(10188)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(10196)[5]
          ts: (<<make_list_1035@11:2>@14:0> <> 0)
          
        end ExtFormula.Formula.case_analysis_boolean(10196)[5] (0.000000 sec.)
        lb':((<<make_list_1035@11:2>@14:0> = 0) && ((-1 + (-1 * <make_list_1035@11:0>)) >= 0))
        nub':true
        begin InterpProver.interpolate(10200)[5]
          begin InterpProver.interpolate_fresh(10201)[6]
            begin InterpProver.interpolate_log(10202)[7]
              input1: ((<<make_list_1035@11:2>@14:0> = 0) && ((-1 + (-1 * <make_list_1035@11:0>)) >= 0))
              input2: true
              begin InterpProver.interpolate_check(10203)[8]
                begin InterpProver.interpolate_simplify(10204)[9]
                  begin InterpProver.interpolate_quick(10243)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(10249)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(10250)[12]
                        begin CsisatInterface.interpolate_csisat_log(10251)[13]
                          input1: (1 + v_sep_make_list_1035_sep_11_sep_0) <= 0
                          input2: true
                          begin CsisatInterface.interpolate_csisat_raw(10252)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(10252)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(10251)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(10250)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(10249)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(10243)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(10204)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(10203)[8] (0.000000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(10202)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(10201)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(10200)[5] (0.000000 sec.)
        begin InterpProver.interpolate(10260)[5]
          begin InterpProver.interpolate_fresh(10261)[6]
            begin InterpProver.interpolate_log(10262)[7]
              input1: ((<<make_list_1035@11:2>@14:0> = 0) && ((-1 + (-1 * <make_list_1035@11:0>)) >= 0))
              input2: (not (<<make_list_1035@11:2>@14:0> = 0))
              begin InterpProver.interpolate_check(10263)[8]
                begin InterpProver.interpolate_simplify(10264)[9]
                  begin InterpProver.interpolate_quick(10299)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(10308)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(10309)[12]
                        begin CsisatInterface.interpolate_csisat_log(10310)[13]
                          input1: (0 = v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0 & (1 + v_sep_make_list_1035_sep_11_sep_0) <= 0)
                          input2: not 0 = v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(10311)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(10311)[14] (0.000000 sec.)
                          output: 0 = v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(10310)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0
                        after dnf conversion: ((0 = v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(10309)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(10308)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(10299)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(10264)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(10263)[8] (0.001000 sec.)
              output: (0 = <<make_list_1035@11:2>@14:0>)
            end InterpProver.interpolate_log(10262)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(10261)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(10260)[5] (0.001000 sec.)
        output:
          P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int,<<make_list_1035@11:2>@14:0>:int) =
          (0 = <<make_list_1035@11:2>@14:0>)
      end ApronInterface.convex_hull_interpolate(10178)[4] (0.002000 sec.)
      Horn clauses:
        |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
      lower bounds:
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int) = true
      upper bounds:
        P[<make_list_1035@11:1>](var34:int,var35:int) = true
      begin GenHcSolver.classify_pids(10606)[4]
        output:
          [<make_list_1035@11:1>]
      end GenHcSolver.classify_pids(10606)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(10609)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(10612)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(10612)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(10617)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(10617)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(10620)[5]
          begin InterpProver.interpolate_fresh(10621)[6]
            begin InterpProver.interpolate_log(10622)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(10623)[8]
                begin InterpProver.interpolate_simplify(10624)[9]
                  begin InterpProver.interpolate_quick(10638)[10]
                    
                  end InterpProver.interpolate_quick(10638)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(10624)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(10623)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(10622)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(10621)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(10620)[5] (0.000000 sec.)
        output:
          P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int) = true
      end ApronInterface.convex_hull_interpolate(10609)[4] (0.000000 sec.)
      begin HcSolver.check_validity(10695)[4]
        input:
          P[<fail_1694@34:0>](<fail_1694@34:0>:bool)|- bot
          
          P[<<make_list_1035@11:2>@14:0>](<k_main_1588@31:1>:int,<k_main_1588@31:0>:int,<k_main_1588@31:2>:int),
          P[<<mem_1030@26:3>@29:0>](<k_main_1588@31:0>:int,<k_main_1588@31:2>:int,false:bool),
          ((<k_main_1588@31:2> <> 0) && <fail_1694@34:0>) |- P[<fail_1694@34:0>](
          <fail_1694@34:0>:bool)
          
          P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int),
          ((<mem_1030@26:1> = 0) && (not <<mem_1030@26:3>@29:0>))
          |- P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,
                                       <<mem_1030@26:3>@29:0>:bool)
          
          P[<<make_list_1035@11:2>@14:0>](<f_main_1688@23:1>:int,<mem_1030@26:0>:int,<mem_1030@26:1>:int),
          (<mem_1030@26:1> <> 0) |- P[<mem_1030@26:1>](<mem_1030@26:0>:int,
                                                       <mem_1030@26:1>:int)
          
          P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
          ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
          |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,
                                             <make_list_1035@11:1>:int,
                                             <<make_list_1035@11:2>@14:0>:int)
          
          |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(10695)[4] (0.001999 sec.)
      solution:
        P[<fail_1694@34:0>](<fail_1694@34:0>:bool) = false
        P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,<<mem_1030@26:3>@29:0>:bool) = false
        P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int) = false
        P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int,<<make_list_1035@11:2>@14:0>:int) =
        (0 = <<make_list_1035@11:2>@14:0>)
        P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int) = true
    end GenHcSolver.solve(6367)[3] (0.025996 sec.)
    begin YhornInterface.solve(10991)[3]
      begin HcSolver.solve_ub(10992)[4]
        encoded:
          P[<fail_1694@34:0>](<fail_1694@34:0>:int)|- bot
          
          P[<<make_list_1035@11:2>@14:0>](<k_main_1588@31:1>:int,<k_main_1588@31:0>:int,<k_main_1588@31:2>:int),
          P[<<mem_1030@26:3>@29:0>](<k_main_1588@31:0>:int,<k_main_1588@31:2>:int,0:int),
          ((<k_main_1588@31:2> <> 0) && (<fail_1694@34:0> = 1)) |- P[<fail_1694@34:0>](
          <fail_1694@34:0>:int)
          
          P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int),
          ((<mem_1030@26:1> = 0) && (not (<<mem_1030@26:3>@29:0> = 1)))
          |- P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,
                                       <<mem_1030@26:3>@29:0>:int)
          
          P[<<make_list_1035@11:2>@14:0>](<f_main_1688@23:1>:int,<mem_1030@26:0>:int,<mem_1030@26:1>:int),
          (<mem_1030@26:1> <> 0) |- P[<mem_1030@26:1>](<mem_1030@26:0>:int,
                                                       <mem_1030@26:1>:int)
          
          P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
          ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
          |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,
                                             <make_list_1035@11:1>:int,
                                             <<make_list_1035@11:2>@14:0>:int)
          
          |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
        input to Yhorn:
          P[<fail_1694@34:0>](<fail_1694@34:0>:int)|- bot
          
          P[<<make_list_1035@11:2>@14:0>](<k_main_1588@31:1>:int,<k_main_1588@31:0>:int,<k_main_1588@31:2>:int),
          P[<<mem_1030@26:3>@29:0>](<k_main_1588@31:0>:int,<k_main_1588@31:2>:int,var36:int),
          ((<k_main_1588@31:2> <> 0) && ((var36 = 0) && (<fail_1694@34:0> = 1)))
          |- P[<fail_1694@34:0>](<fail_1694@34:0>:int)
          
          P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int),
          ((<<mem_1030@26:3>@29:0> <> 1) && (<mem_1030@26:1> = 0))
          |- P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,
                                       <<mem_1030@26:3>@29:0>:int)
          
          P[<<make_list_1035@11:2>@14:0>](<f_main_1688@23:1>:int,<mem_1030@26:0>:int,<mem_1030@26:1>:int),
          (<mem_1030@26:1> <> 0) |- P[<mem_1030@26:1>](<mem_1030@26:0>:int,
                                                       <mem_1030@26:1>:int)
          
          P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
          ((<make_list_1035@11:0> < 0) && (<<make_list_1035@11:2>@14:0> = 0))
          |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,
                                             <make_list_1035@11:1>:int,
                                             <<make_list_1035@11:2>@14:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1694_sep_34_sep_0($13)) -> 1=0.
(($13-1=0) & ($14=0) & ($15<>0)) & (v_sep_mem_1030_sep_26_sep_3_sep_29_sep_0($16,$15,$14)) & (v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0($17,$16,$15)) -> v_sep_fail_1694_sep_34_sep_0($13).
(($18=0) & ($19-1<>0)) & (v_sep_mem_1030_sep_26_sep_1($20,$18)) -> v_sep_mem_1030_sep_26_sep_3_sep_29_sep_0($20,$18,$19).
($18<>0) & (v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0($21,$20,$18)) -> v_sep_mem_1030_sep_26_sep_1($20,$18).
(($22=0) & ($23<0)) & (v_sep_make_list_1035_sep_11_sep_1($23,$24)) -> v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0($23,$24,$22).
0=0 -> v_sep_make_list_1035_sep_11_sep_1($23,$24).


v_sep_fail_1694_sep_34_sep_0: X
v_sep_make_list_1035_sep_11_sep_1: X
v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0: X
v_sep_mem_1030_sep_26_sep_1: X
v_sep_mem_1030_sep_26_sep_3_sep_29_sep_0: X
...........Split disj [24] 0.278957
Reconstrcut: 3 **)

v_sep_fail_1694_sep_34_sep_0: (X) | (X)
v_sep_make_list_1035_sep_11_sep_1: X
v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0: X
v_sep_mem_1030_sep_26_sep_1: X
v_sep_mem_1030_sep_26_sep_3_sep_29_sep_0: X
.......
v_sep_fail_1694_sep_34_sep_0: (X) | (X)
v_sep_make_list_1035_sep_11_sep_1: X
v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0: X
v_sep_mem_1030_sep_26_sep_1: X
v_sep_mem_1030_sep_26_sep_3_sep_29_sep_0: X
.......Split conj [26] 0.283956
(Reconstrcut: 8 **)
v_sep_fail_1694_sep_34_sep_0: (X) | (X)
v_sep_make_list_1035_sep_11_sep_1: X
v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0: X
v_sep_mem_1030_sep_26_sep_1: X
v_sep_mem_1030_sep_26_sep_3_sep_29_sep_0: (X) & (X)
...........
v_sep_fail_1694_sep_34_sep_0: (X) | (X)
v_sep_make_list_1035_sep_11_sep_1: X
v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0: X
v_sep_mem_1030_sep_26_sep_1: X
v_sep_mem_1030_sep_26_sep_3_sep_29_sep_0: (X) & (X)
.......
v_sep_fail_1694_sep_34_sep_0: (X) | (X)
v_sep_make_list_1035_sep_11_sep_1: X
v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0: X
v_sep_mem_1030_sep_26_sep_1: X
v_sep_mem_1030_sep_26_sep_3_sep_29_sep_0: (X) & (X)
............
v_sep_fail_1694_sep_34_sep_0: (X) | (X)
v_sep_make_list_1035_sep_11_sep_1: X
v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0: X
v_sep_mem_1030_sep_26_sep_1: X
v_sep_mem_1030_sep_26_sep_3_sep_29_sep_0: (X) & (X)
..............(0=0) & (v_sep_fail_1694_sep_34_sep_0($13)) -> 1=0.
(($13-1=0) & ($14=0) & ($15<>0)) & (v_sep_mem_1030_sep_26_sep_3_sep_29_sep_0($16,$15,$14)) & (v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0($17,$16,$15)) -> v_sep_fail_1694_sep_34_sep_0($13).
(($18=0) & ($19-1<>0)) & (v_sep_mem_1030_sep_26_sep_1($20,$18)) -> v_sep_mem_1030_sep_26_sep_3_sep_29_sep_0($20,$18,$19).
($18<>0) & (v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0($21,$20,$18)) -> v_sep_mem_1030_sep_26_sep_1($20,$18).
(($22=0) & ($23<0)) & (v_sep_make_list_1035_sep_11_sep_1($23,$24)) -> v_sep_make_list_1035_sep_11_sep_2_sep_14_sep_0($23,$24,$22).
0=0 -> v_sep_make_list_1035_sep_11_sep_1($23,$24).

          |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
        solution:
          P[<fail_1694@34:0>]($25:bool) = false
          P[<make_list_1035@11:1>]($47:int,$49:int) = true
          P[<<make_list_1035@11:2>@14:0>]($35:int,$37:int,$39:int) = true
          P[<mem_1030@26:1>]($42:int,$44:int) = true
          P[<<mem_1030@26:3>@29:0>]($28:int,$30:int,$32:bool) = ($30 = 0)
        
      end HcSolver.solve_ub(10992)[4] (0.038994 sec.)
      begin HcSolver.check_validity(11180)[4]
        input:
          P[<fail_1694@34:0>](<fail_1694@34:0>:bool)|- bot
          
          P[<<make_list_1035@11:2>@14:0>](<k_main_1588@31:1>:int,<k_main_1588@31:0>:int,<k_main_1588@31:2>:int),
          P[<<mem_1030@26:3>@29:0>](<k_main_1588@31:0>:int,<k_main_1588@31:2>:int,false:bool),
          ((<k_main_1588@31:2> <> 0) && <fail_1694@34:0>) |- P[<fail_1694@34:0>](
          <fail_1694@34:0>:bool)
          
          P[<mem_1030@26:1>](<mem_1030@26:0>:int,<mem_1030@26:1>:int),
          ((<mem_1030@26:1> = 0) && (not <<mem_1030@26:3>@29:0>))
          |- P[<<mem_1030@26:3>@29:0>](<mem_1030@26:0>:int,<mem_1030@26:1>:int,
                                       <<mem_1030@26:3>@29:0>:bool)
          
          P[<<make_list_1035@11:2>@14:0>](<f_main_1688@23:1>:int,<mem_1030@26:0>:int,<mem_1030@26:1>:int),
          (<mem_1030@26:1> <> 0) |- P[<mem_1030@26:1>](<mem_1030@26:0>:int,
                                                       <mem_1030@26:1>:int)
          
          P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int),
          ((<<make_list_1035@11:2>@14:0> = 0) && (<make_list_1035@11:0> < 0))
          |- P[<<make_list_1035@11:2>@14:0>](<make_list_1035@11:0>:int,
                                             <make_list_1035@11:1>:int,
                                             <<make_list_1035@11:2>@14:0>:int)
          
          |- P[<make_list_1035@11:1>](<make_list_1035@11:0>:int,<make_list_1035@11:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(11180)[4] (0.001000 sec.)
      solution:
        P[<fail_1694@34:0>]($25:bool) = false
        P[<make_list_1035@11:1>]($47:int,$49:int) = true
        P[<<make_list_1035@11:2>@14:0>]($35:int,$37:int,$39:int) = true
        P[<mem_1030@26:1>]($42:int,$44:int) = true
        P[<<mem_1030@26:3>@29:0>]($28:int,$30:int,$32:bool) = ($30 = 0)
    end YhornInterface.solve(10991)[3] (0.039994 sec.)
    
  end RefTypeInfer.infer_etrs(263)[2] (0.124981 sec.)
  refinement types:
    main_1681: X
    f_1689: v1:int -> X
    f_1690: v1:int -> v2:int -> X
    main_1040: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1035: v1:int -> v2:int -> (v3:{v3:int | (0 = v3)} -> (v4:int -> (v5:int -> X) -> X) -> X) -> X
    f_main_1687: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    is_nil_1038: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1688: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> (v6:int -> (v7:int -> X) -> X) -> v10:bool -> X
    mem_1030: v1:int -> v2:{v2:int | false} -> (v3:int -> (v4:int -> X) -> X) -> (v7:{v7:bool | false} -> X) -> X
    k_main_1588: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    fail_1694: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_mem_1692: var76:bool -> var75:int -> var74:int -> (var73:int -> (var72:int -> X) -> X) -> (var69:bool -> X) -> X
    cons_make_list_1113: var91:int ->
                         var90:int ->
                         var89:int ->
                         var88:int ->
                         (var87:int -> (var86:int -> X) -> X) ->
                         (var83:int -> (var82:int -> (var81:int -> X) -> X) -> X) -> X
    f_1691: var95:int -> var94:int -> var93:unit -> X
    f_cons_make_list_1685: var107:int ->
                           var106:int ->
                           var105:int ->
                           var104:int -> (var103:int -> (var102:int -> X) -> X) -> var99:int -> (var98:int -> X) -> X
    f_make_list_1684: var113:int -> var112:int -> var111:int -> (var110:int -> X) -> X
    f_make_list_1686: var127:int ->
                      var126:int ->
                      (var125:int -> (var124:int -> (var123:int -> X) -> X) -> X) ->
                      var119:int -> (var118:int -> (var117:int -> X) -> X) -> X
    f_mem_1682: var137:int ->
                var136:int -> (var135:bool -> X) -> (var133:int -> (var132:int -> X) -> X) -> var129:int -> X
    f_mem_1683: var148:int ->
                var147:int ->
                var146:int -> (var145:int -> (var144:int -> X) -> X) -> var141:int -> (var140:int -> X) -> X
  abstraction types:
    main_1681: X
    f_1689: v1:int -> X
    f_1690: v1:int -> v2:int -> X
    main_1040: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1035: v1:int -> v2:int -> (v3:int[v3 -> (0 = v3)] -> (v4:int -> (v5:int -> X) -> X) -> X) -> X
    f_main_1687: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    is_nil_1038: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1688: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> (v6:int -> (v7:int -> X) -> X) -> v10:bool -> X
    mem_1030: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> (v7:bool -> X) -> X
    k_main_1588: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    fail_1694: v1:bool -> (v2:unit -> X) -> X
    br_mem_1692: var76:bool -> var75:int -> var74:int -> (var73:int -> (var72:int -> X) -> X) -> (var69:bool -> X) -> X
    cons_make_list_1113: var91:int ->
                         var90:int ->
                         var89:int ->
                         var88:int ->
                         (var87:int -> (var86:int -> X) -> X) ->
                         (var83:int -> (var82:int -> (var81:int -> X) -> X) -> X) -> X
    f_1691: var95:int -> var94:int -> var93:unit -> X
    f_cons_make_list_1685: var107:int ->
                           var106:int ->
                           var105:int ->
                           var104:int -> (var103:int -> (var102:int -> X) -> X) -> var99:int -> (var98:int -> X) -> X
    f_make_list_1684: var113:int -> var112:int -> var111:int -> (var110:int -> X) -> X
    f_make_list_1686: var127:int ->
                      var126:int ->
                      (var125:int -> (var124:int -> (var123:int -> X) -> X) -> X) ->
                      var119:int -> (var118:int -> (var117:int -> X) -> X) -> X
    f_mem_1682: var137:int ->
                var136:int -> (var135:bool -> X) -> (var133:int -> (var132:int -> X) -> X) -> var129:int -> X
    f_mem_1683: var148:int ->
                var147:int ->
                var146:int -> (var145:int -> (var144:int -> X) -> X) -> var141:int -> (var140:int -> X) -> X
  
end AbsTypeInfer.refine(262)[1] (0.128981 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1681
  main_1681 -> (rand_int f_1689)
  br_mem_1692 b_1693 x_1031 xs1_1032 xs2_1032 k_mem_1190 when b_1693 ->
      (xs2_1032 0 (f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032))
  br_mem_1692 b_1693 x_1031 xs1_1032 xs2_1032 k_mem_1190 when (not b_1693) -> _|_
  cons_make_list_1113 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 k_make_list_cons_make_list_1372 ->
      (k_make_list_cons_make_list_1372 (xs1_1112 + 1) (f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112))
  f_1689 x_1606 -> (rand_int (f_1690 x_1606))
  f_1690 x_1606 x_1619 -> (main_1040 x_1606 x_1619 (f_1691 x_1606 x_1619))
  f_1691 x_1606 x_1619 x_1603 -> end
  f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 i_1110 k_make_list_cons_make_list_1387 when (
      i_1110 = 0) -> (k_make_list_cons_make_list_1387 x_1111)
  f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 i_1110 k_make_list_cons_make_list_1387 when (
      not (i_1110 = 0)) -> (xs2_1112 (i_1110 - 1) k_make_list_cons_make_list_1387)
  f_main_1687 m_1042 n_1041 k_main_1508 x1_1514 x2_1514 ->
      (is_nil_1038 x1_1514 x2_1514 (f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514))
  f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514 b_1589 when b_1589 ->
      (k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 true)
  f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514 b_1589 when (
      not b_1589) -> (mem_1030 m_1042 x1_1514 x2_1514 (k_main_1588 m_1042 n_1041 x1_1514 k_main_1508))
  f_make_list_1684 n_1036 x_1037 x_1117 k_make_list_1325 -> _|_
  f_make_list_1686 n_1036 x_1037 k_make_list_1313 x1_1451 x2_1451 ->
      (cons_make_list_1113 n_1036 x_1037 x_1037 x1_1451 x2_1451 k_make_list_1313)
  f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032 x_1237 when (x_1031 = x_1237) -> (k_mem_1190 true)
  f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032 x_1237 when (not (x_1031 = x_1237)) ->
      (mem_1030 x_1031 (xs1_1032 - 1) (f_mem_1683 x_1031 x_1237 xs1_1032 xs2_1032) k_mem_1190)
  f_mem_1683 x_1031 x_1237 xs1_1032 xs2_1032 x_1084 k_mem_xs_1223 -> (xs2_1032 (x_1084 + 1) k_mem_xs_1223)
  fail_1694 b k -> {fail} => (k ())
  is_nil_1038 xs1_1039 xs2_1039 k_is_nil_1484 when (xs1_1039 = 0) -> (k_is_nil_1484 true)
  is_nil_1038 xs1_1039 xs2_1039 k_is_nil_1484 when (not (xs1_1039 = 0)) -> (k_is_nil_1484 false)
  k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 b_1600 when b_1600 -> (k_main_1508 ())
  k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 b_1600 when (not b_1600) -> (fail_1694 true k_main_1508)
  main_1040 n_1041 m_1042 k_main_1508 -> (make_list_1035 n_1041 m_1042 (f_main_1687 m_1042 n_1041 k_main_1508))
  make_list_1035 n_1036 x_1037 k_make_list_1313 when (n_1036 < 0) ->
      (k_make_list_1313 0 (f_make_list_1684 n_1036 x_1037))
  make_list_1035 n_1036 x_1037 k_make_list_1313 when (not (n_1036 < 0)) ->
      (make_list_1035 (n_1036 - 1) x_1037 (f_make_list_1686 n_1036 x_1037 k_make_list_1313))
  mem_1030 x_1031 xs1_1032 xs2_1032 k_mem_1190 when (xs1_1032 = 0) -> (k_mem_1190 false)
  mem_1030 x_1031 xs1_1032 xs2_1032 k_mem_1190 when (not (xs1_1032 = 0)) ->
      (br_mem_1692 (1 <= xs1_1032) x_1031 xs1_1032 xs2_1032 k_mem_1190)
Types:
  main_1681 : X
  fail_1694 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1035 : (int -> int -> (x_4:int[x_4 = 0] -> (int -> (int -> X) -> X) -> X) -> X)
  mem_1030 : (int -> int -> (int -> (int -> X) -> X) -> (x_10:bool[x_10] -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1681 ... --> 
  f_1689 ... --> 
  f_1690 ... --> 
  main_1040 ... --> 
  make_list_1035 [2/2] ... --> 
  make_list_1035 [1/2] ... --> 
  f_make_list_1686 ... --> 
  cons_make_list_1113 ... --> 
  f_main_1687 ... --> 
  is_nil_1038 [2/2] ... --> 
  f_main_1688 [2/2] ... --> 
  mem_1030 [1/2] ... --> 
  k_main_1588 [2/2] ... --> 
  fail_1694 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(11862)[1]
  program:
    main_1681  | true = ((Random.int 0) f_1689)
    br_mem_1692 b_1693 x_1031 xs1_1032 xs2_1032 k_mem_1190 | b_1693 = (
    xs2_1032 0
             (f_mem_1682 x_1031
                         xs1_1032
                         k_mem_1190
                         xs2_1032))
    br_mem_1692 b_1693 x_1031 xs1_1032 xs2_1032 k_mem_1190 | (not b_1693) = bot
    cons_make_list_1113 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 k_make_list_cons_make_list_1372 | true = (
    k_make_list_cons_make_list_1372 (xs1_1112 + 1)
                                    (f_cons_make_list_1685 n_1036
                                                           x_1037
                                                           x_1111
                                                           xs1_1112
                                                           xs2_1112))
    f_1689 x_1606 | true = ((Random.int 0) (f_1690 x_1606))
    f_1690 x_1606 x_1619 | true = (main_1040 x_1606
                                             x_1619
                                             (f_1691 x_1606
                                                     x_1619))
    f_1691 x_1606 x_1619 x_1603 | true = end
    f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 i_1110 k_make_list_cons_make_list_1387 | (
    i_1110 = 0) = (k_make_list_cons_make_list_1387 x_1111)
    f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 i_1110 k_make_list_cons_make_list_1387 | (
    not (i_1110 = 0)) = (xs2_1112 (i_1110 - 1)
                                  k_make_list_cons_make_list_1387)
    f_main_1687 m_1042 n_1041 k_main_1508 x1_1514 x2_1514 | true = (is_nil_1038
                                                                    x1_1514
                                                                    x2_1514
                                                                    (
                                                                    f_main_1688
                                                                    m_1042
                                                                    n_1041
                                                                    x1_1514
                                                                    k_main_1508
                                                                    x2_1514))
    f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514 b_1589 | b_1589 = (
    k_main_1588 m_1042
                n_1041
                x1_1514
                k_main_1508
                true)
    f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514 b_1589 | (not b_1589) = (
    mem_1030 m_1042
             x1_1514
             x2_1514
             (k_main_1588 m_1042
                          n_1041
                          x1_1514
                          k_main_1508))
    f_make_list_1684 n_1036 x_1037 x_1117 k_make_list_1325 | true = bot
    f_make_list_1686 n_1036 x_1037 k_make_list_1313 x1_1451 x2_1451 | true = (
    cons_make_list_1113 n_1036
                        x_1037
                        x_1037
                        x1_1451
                        x2_1451
                        k_make_list_1313)
    f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032 x_1237 | (x_1031 = x_1237) = (
    k_mem_1190 true)
    f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032 x_1237 | (not (x_1031 = x_1237)) = (
    mem_1030 x_1031
             (xs1_1032 - 1)
             (f_mem_1683 x_1031
                         x_1237
                         xs1_1032
                         xs2_1032)
             k_mem_1190)
    f_mem_1683 x_1031 x_1237 xs1_1032 xs2_1032 x_1084 k_mem_xs_1223 | true = (
    xs2_1032 (x_1084 + 1)
             k_mem_xs_1223)
    fail_1694 b k | true = (fail ())
    is_nil_1038 xs1_1039 xs2_1039 k_is_nil_1484 | (xs1_1039 = 0) = (k_is_nil_1484 true)
    is_nil_1038 xs1_1039 xs2_1039 k_is_nil_1484 | (not (xs1_1039 = 0)) = (
    k_is_nil_1484 false)
    k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 b_1600 | b_1600 = (
    k_main_1508 ())
    k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 b_1600 | (not b_1600) = (
    fail_1694 true
              k_main_1508)
    main_1040 n_1041 m_1042 k_main_1508 | true = (make_list_1035 n_1041
                                                                 m_1042
                                                                 (f_main_1687 m_1042
                                                                    n_1041
                                                                    k_main_1508))
    make_list_1035 n_1036 x_1037 k_make_list_1313 | (n_1036 < 0) = (k_make_list_1313 0
                                                                    (f_make_list_1684 n_1036
                                                                    x_1037))
    make_list_1035 n_1036 x_1037 k_make_list_1313 | (not (n_1036 < 0)) = (
    make_list_1035 (n_1036 - 1)
                   x_1037
                   (f_make_list_1686 n_1036
                                     x_1037
                                     k_make_list_1313))
    mem_1030 x_1031 xs1_1032 xs2_1032 k_mem_1190 | (xs1_1032 = 0) = (
    k_mem_1190 false)
    mem_1030 x_1031 xs1_1032 xs2_1032 k_mem_1190 | (not (xs1_1032 = 0)) = (
    br_mem_1692 (1 <= xs1_1032)
                x_1031
                xs1_1032
                xs2_1032
                k_mem_1190)
    main_1681:X
    br_mem_1692:bool -> int -> int -> (int -> (int -> X) -> X) -> (bool -> X) -> X
    cons_make_list_1113:int ->
                        int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1689:int -> X
    f_1690:int -> int -> X
    f_1691:int -> int -> unit -> X
    f_cons_make_list_1685:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_main_1687:int -> int -> (unit -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_main_1688:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> bool -> X
    f_make_list_1684:int -> int -> int -> (int -> X) -> X
    f_make_list_1686:int -> int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_mem_1682:int -> int -> (bool -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_mem_1683:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    fail_1694:bool -> (unit -> X) -> X
    is_nil_1038:int -> (int -> (int -> X) -> X) -> (bool -> X) -> X
    k_main_1588:int -> int -> int -> (unit -> X) -> bool -> X
    main_1040:int -> int -> (unit -> X) -> X
    make_list_1035:int -> int -> (int -> (int -> (int -> X) -> X) -> X) -> X
    mem_1030:int -> int -> (int -> (int -> X) -> X) -> (bool -> X) -> X
  inlined functions: br_mem_1692,cons_make_list_1113,f_1689,f_1690,f_1691,f_cons_make_list_1685,f_main_1687,f_main_1688,f_make_list_1684,f_make_list_1686,f_mem_1682,f_mem_1683,is_nil_1038,k_main_1588,main_1040
  counterexample: 0:0:0:0:1:0:0:0:0:1:1:0:1:0
  error traces:
    [true.nop(<f_1689@40:0> = var149)
     [true.nop((<f_1690@43:0> = <f_1689@40:0>) && (<f_1690@43:1> = var150))
      [true.((<main_1040@45:0> = <f_1690@43:0>) && (<main_1040@45:1> = <f_1690@43:1>))
       [true.((<make_list_1035@47:0> = <main_1040@45:0>) && (<make_list_1035@47:1> = <main_1040@45:1>))
        [(not (<make_list_1035@47:0> < 0)).
         ((<make_list_1035@50:0> = (<make_list_1035@47:0> - 1)) && (<make_list_1035@50:1> = <make_list_1035@47:1>))
         [(<make_list_1035@50:0> < 0).(<<make_list_1035@50:2>@53:0> = 0)
          [true.
           ((<f_make_list_1686@55:0> = <make_list_1035@47:0>) &&
            ((<f_make_list_1686@55:1> = <make_list_1035@47:1>) &&
             (<f_make_list_1686@55:3> = <<make_list_1035@50:2>@53:0>)))
           [true.
            ((<cons_make_list_1113@57:0> = <f_make_list_1686@55:0>) &&
             ((<cons_make_list_1113@57:1> = <f_make_list_1686@55:1>) &&
              ((<cons_make_list_1113@57:2> = <f_make_list_1686@55:1>) &&
               (<cons_make_list_1113@57:3> = <f_make_list_1686@55:3>))))
            [true.(<<cons_make_list_1113@57:5>@59:0> = (<cons_make_list_1113@57:3> + 1))
             [true.(<<f_make_list_1686@55:2>@61:0> = <<cons_make_list_1113@57:5>@59:0>)
              [true.(<<make_list_1035@47:2>@63:0> = <<f_make_list_1686@55:2>@61:0>)
               [true.
                ((<f_main_1687@65:0> = <main_1040@45:1>) &&
                 ((<f_main_1687@65:1> = <main_1040@45:0>) && (<f_main_1687@65:3> = <<make_list_1035@47:2>@63:0>)))
                [true.(<is_nil_1038@67:0> = <f_main_1687@65:3>)
                 [(not (<is_nil_1038@67:0> = 0)).(<<is_nil_1038@67:2>@70:0> = false)
                  [true.
                   ((<f_main_1688@72:0> = <f_main_1687@65:0>) &&
                    ((<f_main_1688@72:1> = <f_main_1687@65:1>) &&
                     ((<f_main_1688@72:2> = <f_main_1687@65:3>) && (<f_main_1688@72:5> = <<is_nil_1038@67:2>@70:0>))))
                   [(not <f_main_1688@72:5>).
                    ((<mem_1030@75:0> = <f_main_1688@72:0>) && (<mem_1030@75:1> = <f_main_1688@72:2>))
                    [(<mem_1030@75:1> = 0).(<<mem_1030@75:3>@78:0> = false)
                     [true.
                      ((<k_main_1588@80:0> = <f_main_1688@72:0>) &&
                       ((<k_main_1588@80:1> = <f_main_1688@72:1>) &&
                        ((<k_main_1588@80:2> = <f_main_1688@72:2>) && (<k_main_1588@80:4> = <<mem_1030@75:3>@78:0>))))
                      [(not <k_main_1588@80:4>).(<fail_1694@83:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(11863)[2]
    horn clauses:
      P[<fail_1694@83:0>](<fail_1694@83:0>:bool)|- bot
      
      P[<k_main_1588@80:4>](<k_main_1588@80:0>:int,<k_main_1588@80:1>:int,<k_main_1588@80:2>:int,false:bool),
      <fail_1694@83:0> |- P[<fail_1694@83:0>](<fail_1694@83:0>:bool)
      
      P[<f_main_1688@72:5>](<k_main_1588@80:0>:int,<k_main_1588@80:1>:int,<k_main_1588@80:2>:int,false:bool),
      P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,<k_main_1588@80:4>:bool)|- P[<k_main_1588@80:4>](
      <k_main_1588@80:0>:int,<k_main_1588@80:1>:int,<k_main_1588@80:2>:int,
      <k_main_1588@80:4>:bool)
      
      P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
      ((<mem_1030@75:1> = 0) && (not <<mem_1030@75:3>@78:0>))
      |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                   <<mem_1030@75:3>@78:0>:bool)
      
      P[<f_main_1688@72:5>](<mem_1030@75:0>:int,<f_main_1688@72:1>:int,<mem_1030@75:1>:int,false:bool)|- P[<mem_1030@75:1>](
      <mem_1030@75:0>:int,<mem_1030@75:1>:int)
      
      P[<f_main_1687@65:3>](<f_main_1688@72:0>:int,<f_main_1688@72:1>:int,<f_main_1688@72:2>:int),
      P[<<is_nil_1038@67:2>@70:0>](<f_main_1688@72:2>:int,<f_main_1688@72:5>:bool)|- P[<f_main_1688@72:5>](
      <f_main_1688@72:0>:int,<f_main_1688@72:1>:int,<f_main_1688@72:2>:int,
      <f_main_1688@72:5>:bool)
      
      P[<is_nil_1038@67:0>](<is_nil_1038@67:0>:int), ((<is_nil_1038@67:0> <> 0) && (not <<is_nil_1038@67:2>@70:0>))
      |- P[<<is_nil_1038@67:2>@70:0>](<is_nil_1038@67:0>:int,<<is_nil_1038@67:2>@70:0>:bool)
      
      P[<f_main_1687@65:3>](<f_main_1687@65:0>:int,<f_main_1687@65:1>:int,<is_nil_1038@67:0>:int)|- P[<is_nil_1038@67:0>](
      <is_nil_1038@67:0>:int)
      
      P[<main_1040@45:1>](<f_main_1687@65:1>:int,<f_main_1687@65:0>:int),
      P[<<make_list_1035@47:2>@63:0>](<f_main_1687@65:1>:int,<f_main_1687@65:0>:int,<f_main_1687@65:3>:int)|- P[<f_main_1687@65:3>](
      <f_main_1687@65:0>:int,<f_main_1687@65:1>:int,<f_main_1687@65:3>:int)
      
      P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int),
      P[<<f_make_list_1686@55:2>@61:0>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int,<<make_list_1035@47:2>@63:0>:int),
      (<make_list_1035@47:0> >= 0)
      |- P[<<make_list_1035@47:2>@63:0>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int,
                                         <<make_list_1035@47:2>@63:0>:int)
      
      P[<f_make_list_1686@55:3>](<f_make_list_1686@55:0>:int,<f_make_list_1686@55:1>:int,<cons_make_list_1113@57:3>:int),
      P[<<cons_make_list_1113@57:5>@59:0>](<f_make_list_1686@55:0>:int,<f_make_list_1686@55:1>:int,<f_make_list_1686@55:1>:int,<cons_make_list_1113@57:3>:int,<<f_make_list_1686@55:2>@61:0>:int)|- P[<<f_make_list_1686@55:2>@61:0>](
      <f_make_list_1686@55:0>:int,<f_make_list_1686@55:1>:int,<<f_make_list_1686@55:2>@61:0>:int)
      
      P[<cons_make_list_1113@57:3>](<cons_make_list_1113@57:0>:int,<cons_make_list_1113@57:1>:int,<cons_make_list_1113@57:2>:int,<cons_make_list_1113@57:3>:int),
      (<<cons_make_list_1113@57:5>@59:0> = (1 + <cons_make_list_1113@57:3>))
      |- P[<<cons_make_list_1113@57:5>@59:0>](<cons_make_list_1113@57:0>:int,
                                              <cons_make_list_1113@57:1>:int,
                                              <cons_make_list_1113@57:2>:int,
                                              <cons_make_list_1113@57:3>:int,
                                              <<cons_make_list_1113@57:5>@59:0>:int)
      
      P[<f_make_list_1686@55:3>](<cons_make_list_1113@57:0>:int,<cons_make_list_1113@57:1>:int,<cons_make_list_1113@57:3>:int),
      (<cons_make_list_1113@57:1> = <cons_make_list_1113@57:2>)
      |- P[<cons_make_list_1113@57:3>](<cons_make_list_1113@57:0>:int,
                                       <cons_make_list_1113@57:1>:int,
                                       <cons_make_list_1113@57:2>:int,
                                       <cons_make_list_1113@57:3>:int)
      
      P[<make_list_1035@47:1>](<f_make_list_1686@55:0>:int,<f_make_list_1686@55:1>:int),
      P[<<make_list_1035@50:2>@53:0>]((-1 + <f_make_list_1686@55:0>):int,<f_make_list_1686@55:1>:int,<f_make_list_1686@55:3>:int),
      (<f_make_list_1686@55:0> >= 0)
      |- P[<f_make_list_1686@55:3>](<f_make_list_1686@55:0>:int,<f_make_list_1686@55:1>:int,
                                    <f_make_list_1686@55:3>:int)
      
      P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int),
      ((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> < 0))
      |- P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int,
                                         <<make_list_1035@50:2>@53:0>:int)
      
      P[<make_list_1035@47:1>]((1 + <make_list_1035@50:0>):int,<make_list_1035@50:1>:int),
      ((1 + <make_list_1035@50:0>) >= 0)
      |- P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int)
      
      P[<main_1040@45:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int)|- P[<make_list_1035@47:1>](
      <make_list_1035@47:0>:int,<make_list_1035@47:1>:int)
      
      P[<f_1690@43:1>](<main_1040@45:0>:int,<main_1040@45:1>:int)|- P[<main_1040@45:1>](
      <main_1040@45:0>:int,<main_1040@45:1>:int)
      
      P[<f_1689@40:0>](<f_1690@43:0>:int)|- P[<f_1690@43:1>](<f_1690@43:0>:int,
                                                             <f_1690@43:1>:int)
      
      |- P[<f_1689@40:0>](<f_1689@40:0>:int)
    call trees:
      <main_1681@37>
        <f_1689@40>
          <f_1690@43>
            <main_1040@45>
              <make_list_1035@47>
                <make_list_1035@50>
                </<make_list_1035@50:2>@53>
                <f_make_list_1686@55>
                  <cons_make_list_1113@57>
                  </<cons_make_list_1113@57:5>@59>
                </<f_make_list_1686@55:2>@61>
              </<make_list_1035@47:2>@63>
              <f_main_1687@65>
                <is_nil_1038@67>
                </<is_nil_1038@67:2>@70>
                <f_main_1688@72>
                  <mem_1030@75>
                  </<mem_1030@75:3>@78>
                  <k_main_1588@80>
                    <fail_1694@83>
    inlined horn clauses:
      P[<fail_1694@83:0>](<fail_1694@83:0>:bool)|- bot
      
      P[<<make_list_1035@47:2>@63:0>](<k_main_1588@80:1>:int,<k_main_1588@80:0>:int,<k_main_1588@80:2>:int),
      P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,false:bool),
      ((<k_main_1588@80:2> <> 0) && <fail_1694@83:0>) |- P[<fail_1694@83:0>](
      <fail_1694@83:0>:bool)
      
      P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
      ((<mem_1030@75:1> = 0) && (not <<mem_1030@75:3>@78:0>))
      |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                   <<mem_1030@75:3>@78:0>:bool)
      
      P[<<make_list_1035@47:2>@63:0>](<f_main_1688@72:1>:int,<mem_1030@75:0>:int,<mem_1030@75:1>:int),
      (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                   <mem_1030@75:1>:int)
      
      P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int),
      P[<<make_list_1035@50:2>@53:0>]((-1 + <make_list_1035@47:0>):int,<make_list_1035@47:1>:int,(
                                      -1 + <<make_list_1035@47:2>@63:0>):int), (
      <make_list_1035@47:0> >= 0)
      |- P[<<make_list_1035@47:2>@63:0>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int,
                                         <<make_list_1035@47:2>@63:0>:int)
      
      P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int),
      ((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> < 0))
      |- P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int,
                                         <<make_list_1035@50:2>@53:0>:int)
      
      P[<make_list_1035@47:1>]((1 + <make_list_1035@50:0>):int,<make_list_1035@50:1>:int),
      ((1 + <make_list_1035@50:0>) >= 0)
      |- P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int)
      
      |- P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int)
    begin ParamSubstInfer.infer(14201)[3]
      
    end ParamSubstInfer.infer(14201)[3] (0.040994 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(14203)[3]
      
    end RefTypeInfer.elim_coeffs(14203)[3] (0.000000 sec.)
    begin GenHcSolver.solve(14464)[3]
      Horn clauses:
        P[<fail_1694@83:0>](<fail_1694@83:0>:bool)|- bot
        
        P[<<make_list_1035@47:2>@63:0>](<k_main_1588@80:1>:int,<k_main_1588@80:0>:int,<k_main_1588@80:2>:int),
        P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,false:bool),
        ((<k_main_1588@80:2> <> 0) && <fail_1694@83:0>) |- P[<fail_1694@83:0>](
        <fail_1694@83:0>:bool)
        
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
        ((<mem_1030@75:1> = 0) && (not <<mem_1030@75:3>@78:0>))
        |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                     <<mem_1030@75:3>@78:0>:bool)
        
        P[<<make_list_1035@47:2>@63:0>](<f_main_1688@72:1>:int,<mem_1030@75:0>:int,<mem_1030@75:1>:int),
        (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                     <mem_1030@75:1>:int)
        
        P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int),
        P[<<make_list_1035@50:2>@53:0>]((-1 + <make_list_1035@47:0>):int,<make_list_1035@47:1>:int,(
                                        -1 + <<make_list_1035@47:2>@63:0>):int), (
        <make_list_1035@47:0> >= 0)
        |- P[<<make_list_1035@47:2>@63:0>](<make_list_1035@47:0>:int,
                                           <make_list_1035@47:1>:int,
                                           <<make_list_1035@47:2>@63:0>:int)
        
        P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int),
        ((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> < 0))
        |- P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,
                                           <make_list_1035@50:1>:int,
                                           <<make_list_1035@50:2>@53:0>:int)
        
        P[<make_list_1035@47:1>]((1 + <make_list_1035@50:0>):int,<make_list_1035@50:1>:int),
        ((1 + <make_list_1035@50:0>) >= 0)
        |- P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int)
        
        |- P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int)
      lower bounds:
        P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int) = true
        P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int) =
        ((1 + <make_list_1035@50:0>) >= 0)
        P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int,<<make_list_1035@50:2>@53:0>:int) =
        ((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> = -1))
        P[<<make_list_1035@47:2>@63:0>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int,<<make_list_1035@47:2>@63:0>:int) =
        ((<make_list_1035@47:0> = 0) && (<<make_list_1035@47:2>@63:0> = 1))
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int) = (<mem_1030@75:1> = 1)
        P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,<<mem_1030@75:3>@78:0>:bool) = false
        P[<fail_1694@83:0>](<fail_1694@83:0>:bool) = false
      upper bounds:
        P[<<make_list_1035@47:2>@63:0>](var168:int,var169:int,var170:int) = true
        P[<<make_list_1035@50:2>@53:0>](var160:int,var161:int,var162:int) = true
      begin GenHcSolver.classify_pids(16896)[4]
        output:
          [<<make_list_1035@50:2>@53:0>;<<make_list_1035@47:2>@63:0>]
      end GenHcSolver.classify_pids(16896)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(16907)[4]
        lb:(((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> = -1)) ||
            ((<make_list_1035@50:0> = 0) && (<<make_list_1035@50:2>@53:0> = 1)))
        nub:false
        lb':(((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> = -1)) ||
             ((<make_list_1035@50:0> = 0) && (<<make_list_1035@50:2>@53:0> = 1)))
        nub':false
        begin InterpProver.interpolate(16908)[5]
          begin InterpProver.interpolate_fresh(16909)[6]
            begin InterpProver.interpolate_log(16910)[7]
              input1: (((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> = -1)) ||
                       ((<make_list_1035@50:0> = 0) && (<<make_list_1035@50:2>@53:0> = 1)))
              input2: false
              begin InterpProver.interpolate_check(16911)[8]
                begin InterpProver.interpolate_simplify(16912)[9]
                  begin InterpProver.interpolate_quick(16955)[10]
                    
                  end InterpProver.interpolate_quick(16955)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(16912)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(16911)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(16910)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(16909)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(16908)[5] (0.001000 sec.)
        output:
          P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int,<<make_list_1035@50:2>@53:0>:int) =
          true
          P[<<make_list_1035@47:2>@63:0>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int,<<make_list_1035@50:2>@53:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(16907)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1694@83:0>](<fail_1694@83:0>:bool)|- bot
        
        P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,false:bool),
        ((<k_main_1588@80:2> <> 0) && <fail_1694@83:0>) |- P[<fail_1694@83:0>](
        <fail_1694@83:0>:bool)
        
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
        ((<mem_1030@75:1> = 0) && (not <<mem_1030@75:3>@78:0>))
        |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                     <<mem_1030@75:3>@78:0>:bool)
        
         (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                      <mem_1030@75:1>:int)
        
        P[<make_list_1035@47:1>]((1 + <make_list_1035@50:0>):int,<make_list_1035@50:1>:int),
        ((1 + <make_list_1035@50:0>) >= 0)
        |- P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int)
        
        |- P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int)
      lower bounds:
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int) = (<mem_1030@75:1> <> 0)
        P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int) = true
        P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,<<mem_1030@75:3>@78:0>:bool) = false
        P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int) =
        ((1 + <make_list_1035@50:0>) >= 0)
        P[<fail_1694@83:0>](<fail_1694@83:0>:bool) = false
      upper bounds:
        P[<make_list_1035@50:1>](var173:int,var174:int) = true
        P[<make_list_1035@47:1>](var171:int,var172:int) = true
      begin GenHcSolver.classify_pids(19265)[4]
        output:
          [<make_list_1035@47:1>;<make_list_1035@50:1>]
      end GenHcSolver.classify_pids(19265)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(19276)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(19277)[5]
          begin InterpProver.interpolate_fresh(19278)[6]
            begin InterpProver.interpolate_log(19279)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(19280)[8]
                begin InterpProver.interpolate_simplify(19281)[9]
                  begin InterpProver.interpolate_quick(19294)[10]
                    
                  end InterpProver.interpolate_quick(19294)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(19281)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(19280)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(19279)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(19278)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(19277)[5] (0.000000 sec.)
        output:
          P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int) = true
          P[<make_list_1035@50:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int) = true
      end ApronInterface.convex_hull_interpolate(19276)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1694@83:0>](<fail_1694@83:0>:bool)|- bot
        
        P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,false:bool),
        ((<k_main_1588@80:2> <> 0) && <fail_1694@83:0>) |- P[<fail_1694@83:0>](
        <fail_1694@83:0>:bool)
        
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
        ((<mem_1030@75:1> = 0) && (not <<mem_1030@75:3>@78:0>))
        |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                     <<mem_1030@75:3>@78:0>:bool)
        
         (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                      <mem_1030@75:1>:int)
      lower bounds:
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int) = (<mem_1030@75:1> <> 0)
        P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,<<mem_1030@75:3>@78:0>:bool) = false
        P[<fail_1694@83:0>](<fail_1694@83:0>:bool) = false
      upper bounds:
        P[<fail_1694@83:0>](var176:bool) = true
      begin GenHcSolver.classify_pids(20514)[4]
        output:
          [<fail_1694@83:0>]
      end GenHcSolver.classify_pids(20514)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(20517)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(20518)[5]
          begin InterpProver.interpolate_fresh(20519)[6]
            begin InterpProver.interpolate_log(20520)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(20521)[8]
                begin InterpProver.interpolate_simplify(20522)[9]
                  begin InterpProver.interpolate_quick(20535)[10]
                    
                  end InterpProver.interpolate_quick(20535)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(20539)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(20539)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(20522)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(20521)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(20520)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(20519)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(20518)[5] (0.000000 sec.)
        output:
          P[<fail_1694@83:0>](<fail_1694@83:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(20517)[4] (0.000000 sec.)
      Horn clauses:
        P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,false:bool), (
        <k_main_1588@80:2> <> 0) |- bot
        
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
        ((<mem_1030@75:1> = 0) && (not <<mem_1030@75:3>@78:0>))
        |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                     <<mem_1030@75:3>@78:0>:bool)
        
         (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                      <mem_1030@75:1>:int)
      lower bounds:
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int) = (<mem_1030@75:1> <> 0)
        P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,<<mem_1030@75:3>@78:0>:bool) = false
      upper bounds:
        P[<<mem_1030@75:3>@78:0>](var180:int,var181:int,var182:bool) = true
      begin GenHcSolver.classify_pids(21179)[4]
        output:
          [<<mem_1030@75:3>@78:0>]
      end GenHcSolver.classify_pids(21179)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(21182)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(21183)[5]
          begin InterpProver.interpolate_fresh(21184)[6]
            begin InterpProver.interpolate_log(21185)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(21186)[8]
                begin InterpProver.interpolate_simplify(21187)[9]
                  begin InterpProver.interpolate_quick(21200)[10]
                    
                  end InterpProver.interpolate_quick(21200)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(21204)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(21204)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(21187)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(21186)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(21185)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(21184)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(21183)[5] (0.000000 sec.)
        output:
          P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,<<mem_1030@75:3>@78:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(21182)[4] (0.001000 sec.)
      Horn clauses:
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,0:int)|- bot
        
         (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                      <mem_1030@75:1>:int)
      lower bounds:
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int) = (<mem_1030@75:1> <> 0)
      upper bounds:
        P[<mem_1030@75:1>](var183:int,var184:int) = (var184 <> 0)
      begin GenHcSolver.classify_pids(21649)[4]
        output:
          [<mem_1030@75:1>]
      end GenHcSolver.classify_pids(21649)[4] (0.000000 sec.)
      lb:(<mem_1030@75:1> <> 0)
      nub:(not (<mem_1030@75:1> <> 0))
      begin ApronInterface.convex_hull_interpolate(21652)[4]
        lb:(<mem_1030@75:1> <> 0)
        nub:(not (<mem_1030@75:1> <> 0))
        lb':(<mem_1030@75:1> <> 0)
        nub':(not (<mem_1030@75:1> <> 0))
        begin InterpProver.interpolate(21653)[5]
          begin InterpProver.interpolate_fresh(21654)[6]
            begin InterpProver.interpolate_log(21655)[7]
              input1: (<mem_1030@75:1> <> 0)
              input2: (not (<mem_1030@75:1> <> 0))
              begin InterpProver.interpolate_check(21656)[8]
                begin InterpProver.interpolate_simplify(21657)[9]
                  begin InterpProver.interpolate_quick(21674)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(21683)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(21684)[12]
                        begin CsisatInterface.interpolate_csisat_log(21685)[13]
                          input1: not 0 = v_sep_mem_1030_sep_75_sep_1
                          input2: 0 = v_sep_mem_1030_sep_75_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(21686)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(21686)[14] (0.000000 sec.)
                          output: not 0 = v_sep_mem_1030_sep_75_sep_1
                          
                        end CsisatInterface.interpolate_csisat_log(21685)[13] (0.000000 sec.)
                        after simplification: not 0 = v_sep_mem_1030_sep_75_sep_1
                        after dnf conversion: ((not 0 = v_sep_mem_1030_sep_75_sep_1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(21684)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(21683)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(21674)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(21657)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(21656)[8] (0.000000 sec.)
              output: (0 <> <mem_1030@75:1>)
            end InterpProver.interpolate_log(21655)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(21654)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(21653)[5] (0.000000 sec.)
        output:
          P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int) = (0 <> <mem_1030@75:1>)
      end ApronInterface.convex_hull_interpolate(21652)[4] (0.000000 sec.)
      begin HcSolver.check_validity(21788)[4]
        input:
          P[<fail_1694@83:0>](<fail_1694@83:0>:bool)|- bot
          
          P[<<make_list_1035@47:2>@63:0>](<k_main_1588@80:1>:int,<k_main_1588@80:0>:int,<k_main_1588@80:2>:int),
          P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,false:bool),
          ((<k_main_1588@80:2> <> 0) && <fail_1694@83:0>) |- P[<fail_1694@83:0>](
          <fail_1694@83:0>:bool)
          
          P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
          ((<mem_1030@75:1> = 0) && (not <<mem_1030@75:3>@78:0>))
          |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                       <<mem_1030@75:3>@78:0>:bool)
          
          P[<<make_list_1035@47:2>@63:0>](<f_main_1688@72:1>:int,<mem_1030@75:0>:int,<mem_1030@75:1>:int),
          (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                       <mem_1030@75:1>:int)
          
          P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int),
          P[<<make_list_1035@50:2>@53:0>]((-1 + <make_list_1035@47:0>):int,<make_list_1035@47:1>:int,(
                                          -1 + <<make_list_1035@47:2>@63:0>):int), (
          <make_list_1035@47:0> >= 0)
          |- P[<<make_list_1035@47:2>@63:0>](<make_list_1035@47:0>:int,
                                             <make_list_1035@47:1>:int,
                                             <<make_list_1035@47:2>@63:0>:int)
          
          P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int),
          ((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> < 0))
          |- P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,
                                             <make_list_1035@50:1>:int,
                                             <<make_list_1035@50:2>@53:0>:int)
          
          P[<make_list_1035@47:1>]((1 + <make_list_1035@50:0>):int,<make_list_1035@50:1>:int),
          ((1 + <make_list_1035@50:0>) >= 0)
          |- P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int)
          
          |- P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(21788)[4] (0.002999 sec.)
      solution:
        P[<fail_1694@83:0>](<fail_1694@83:0>:bool) = false
        P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,<<mem_1030@75:3>@78:0>:bool) = false
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int) = (0 <> <mem_1030@75:1>)
        P[<<make_list_1035@47:2>@63:0>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int,<<make_list_1035@50:2>@53:0>:int) =
        true
        P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int,<<make_list_1035@50:2>@53:0>:int) =
        true
        P[<make_list_1035@50:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int) = true
        P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int) = true
    end GenHcSolver.solve(14464)[3] (0.029995 sec.)
    begin GenHcSolver.solve(22189)[3]
      Horn clauses:
        P[<fail_1694@83:0>](<fail_1694@83:0>:bool)|- bot
        
        P[<<make_list_1035@47:2>@63:0>](<k_main_1588@80:1>:int,<k_main_1588@80:0>:int,<k_main_1588@80:2>:int),
        P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,false:bool),
        ((<k_main_1588@80:2> <> 0) && <fail_1694@83:0>) |- P[<fail_1694@83:0>](
        <fail_1694@83:0>:bool)
        
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
        ((<mem_1030@75:1> = 0) && (not <<mem_1030@75:3>@78:0>))
        |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                     <<mem_1030@75:3>@78:0>:bool)
        
        P[<<make_list_1035@47:2>@63:0>](<f_main_1688@72:1>:int,<mem_1030@75:0>:int,<mem_1030@75:1>:int),
        (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                     <mem_1030@75:1>:int)
        
        P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int),
        P[<<make_list_1035@50:2>@53:0>]((-1 + <make_list_1035@47:0>):int,<make_list_1035@47:1>:int,(
                                        -1 + <<make_list_1035@47:2>@63:0>):int), (
        <make_list_1035@47:0> >= 0)
        |- P[<<make_list_1035@47:2>@63:0>](<make_list_1035@47:0>:int,
                                           <make_list_1035@47:1>:int,
                                           <<make_list_1035@47:2>@63:0>:int)
        
        P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int),
        ((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> < 0))
        |- P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,
                                           <make_list_1035@50:1>:int,
                                           <<make_list_1035@50:2>@53:0>:int)
        
        P[<make_list_1035@47:1>]((1 + <make_list_1035@50:0>):int,<make_list_1035@50:1>:int),
        ((1 + <make_list_1035@50:0>) >= 0)
        |- P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int)
        
        |- P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int)
      lower bounds:
        P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int) = true
        P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int) =
        ((1 + <make_list_1035@50:0>) >= 0)
        P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int,<<make_list_1035@50:2>@53:0>:int) =
        ((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> = -1))
        P[<<make_list_1035@47:2>@63:0>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int,<<make_list_1035@47:2>@63:0>:int) =
        ((<make_list_1035@47:0> = 0) && (<<make_list_1035@47:2>@63:0> = 1))
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int) = (<mem_1030@75:1> = 1)
        P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,<<mem_1030@75:3>@78:0>:bool) = false
        P[<fail_1694@83:0>](<fail_1694@83:0>:bool) = false
      upper bounds:
        P[<<make_list_1035@47:2>@63:0>](var198:int,var199:int,var200:int) = true
        P[<<make_list_1035@50:2>@53:0>](var190:int,var191:int,var192:int) = true
      begin GenHcSolver.classify_pids(24621)[4]
        output:
          [<<make_list_1035@50:2>@53:0>;<<make_list_1035@47:2>@63:0>]
      end GenHcSolver.classify_pids(24621)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(24632)[4]
        lb:(((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> = -1)) ||
            ((<make_list_1035@50:0> = 0) && (<<make_list_1035@50:2>@53:0> = 1)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(24650)[5]
          ts: (((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> = -1)) ||
               ((<make_list_1035@50:0> = 0) && (<<make_list_1035@50:2>@53:0> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(24650)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(24661)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(24661)[5] (0.000000 sec.)
        lb':((((-1 + <<make_list_1035@50:2>@53:0>) + (-1 * <make_list_1035@50:0>)) = 0) &&
             (((-1 * <make_list_1035@50:0>) >= 0) && ((1 + <make_list_1035@50:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(24664)[5]
          begin InterpProver.interpolate_fresh(24665)[6]
            begin InterpProver.interpolate_log(24666)[7]
              input1: ((((-1 + <<make_list_1035@50:2>@53:0>) + (-1 * <make_list_1035@50:0>)) = 0) &&
                       (((-1 * <make_list_1035@50:0>) >= 0) && ((1 + <make_list_1035@50:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(24667)[8]
                begin InterpProver.interpolate_simplify(24668)[9]
                  begin InterpProver.interpolate_quick(24774)[10]
                    
                  end InterpProver.interpolate_quick(24774)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(24668)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(24667)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(24666)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(24665)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(24664)[5] (0.001000 sec.)
        output:
          P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int,<<make_list_1035@50:2>@53:0>:int) =
          true
          P[<<make_list_1035@47:2>@63:0>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int,<<make_list_1035@50:2>@53:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(24632)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1694@83:0>](<fail_1694@83:0>:bool)|- bot
        
        P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,false:bool),
        ((<k_main_1588@80:2> <> 0) && <fail_1694@83:0>) |- P[<fail_1694@83:0>](
        <fail_1694@83:0>:bool)
        
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
        ((<mem_1030@75:1> = 0) && (not <<mem_1030@75:3>@78:0>))
        |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                     <<mem_1030@75:3>@78:0>:bool)
        
         (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                      <mem_1030@75:1>:int)
        
        P[<make_list_1035@47:1>]((1 + <make_list_1035@50:0>):int,<make_list_1035@50:1>:int),
        ((1 + <make_list_1035@50:0>) >= 0)
        |- P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int)
        
        |- P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int)
      lower bounds:
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int) = (<mem_1030@75:1> <> 0)
        P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int) = true
        P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,<<mem_1030@75:3>@78:0>:bool) = false
        P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int) =
        ((1 + <make_list_1035@50:0>) >= 0)
        P[<fail_1694@83:0>](<fail_1694@83:0>:bool) = false
      upper bounds:
        P[<make_list_1035@50:1>](var203:int,var204:int) = true
        P[<make_list_1035@47:1>](var201:int,var202:int) = true
      begin GenHcSolver.classify_pids(27086)[4]
        output:
          [<make_list_1035@47:1>;<make_list_1035@50:1>]
      end GenHcSolver.classify_pids(27086)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(27097)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(27100)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(27100)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(27105)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(27105)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(27108)[5]
          begin InterpProver.interpolate_fresh(27109)[6]
            begin InterpProver.interpolate_log(27110)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(27111)[8]
                begin InterpProver.interpolate_simplify(27112)[9]
                  begin InterpProver.interpolate_quick(27126)[10]
                    
                  end InterpProver.interpolate_quick(27126)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(27112)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(27111)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(27110)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(27109)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(27108)[5] (0.000000 sec.)
        output:
          P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int) = true
          P[<make_list_1035@50:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int) = true
      end ApronInterface.convex_hull_interpolate(27097)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1694@83:0>](<fail_1694@83:0>:bool)|- bot
        
        P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,false:bool),
        ((<k_main_1588@80:2> <> 0) && <fail_1694@83:0>) |- P[<fail_1694@83:0>](
        <fail_1694@83:0>:bool)
        
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
        ((<mem_1030@75:1> = 0) && (not <<mem_1030@75:3>@78:0>))
        |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                     <<mem_1030@75:3>@78:0>:bool)
        
         (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                      <mem_1030@75:1>:int)
      lower bounds:
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int) = (<mem_1030@75:1> <> 0)
        P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,<<mem_1030@75:3>@78:0>:bool) = false
        P[<fail_1694@83:0>](<fail_1694@83:0>:bool) = false
      upper bounds:
        P[<fail_1694@83:0>](var206:bool) = true
      begin GenHcSolver.classify_pids(28348)[4]
        output:
          [<fail_1694@83:0>]
      end GenHcSolver.classify_pids(28348)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(28351)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(28354)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(28354)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(28359)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(28359)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(28362)[5]
          begin InterpProver.interpolate_fresh(28363)[6]
            begin InterpProver.interpolate_log(28364)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(28365)[8]
                begin InterpProver.interpolate_simplify(28366)[9]
                  begin InterpProver.interpolate_quick(28381)[10]
                    
                  end InterpProver.interpolate_quick(28381)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(28385)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(28385)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(28366)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(28365)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(28364)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(28363)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(28362)[5] (0.000000 sec.)
        output:
          P[<fail_1694@83:0>](<fail_1694@83:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(28351)[4] (0.000000 sec.)
      Horn clauses:
        P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,false:bool), (
        <k_main_1588@80:2> <> 0) |- bot
        
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
        ((<mem_1030@75:1> = 0) && (not <<mem_1030@75:3>@78:0>))
        |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                     <<mem_1030@75:3>@78:0>:bool)
        
         (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                      <mem_1030@75:1>:int)
      lower bounds:
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int) = (<mem_1030@75:1> <> 0)
        P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,<<mem_1030@75:3>@78:0>:bool) = false
      upper bounds:
        P[<<mem_1030@75:3>@78:0>](var210:int,var211:int,var212:bool) = true
      begin GenHcSolver.classify_pids(29032)[4]
        output:
          [<<mem_1030@75:3>@78:0>]
      end GenHcSolver.classify_pids(29032)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(29035)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(29038)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(29038)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(29043)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(29043)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(29046)[5]
          begin InterpProver.interpolate_fresh(29047)[6]
            begin InterpProver.interpolate_log(29048)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(29049)[8]
                begin InterpProver.interpolate_simplify(29050)[9]
                  begin InterpProver.interpolate_quick(29065)[10]
                    
                  end InterpProver.interpolate_quick(29065)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(29069)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(29069)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(29050)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(29049)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(29048)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(29047)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(29046)[5] (0.000000 sec.)
        output:
          P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,<<mem_1030@75:3>@78:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(29035)[4] (0.000000 sec.)
      Horn clauses:
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,0:int)|- bot
        
         (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                      <mem_1030@75:1>:int)
      lower bounds:
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int) = (<mem_1030@75:1> <> 0)
      upper bounds:
        P[<mem_1030@75:1>](var213:int,var214:int) = (var214 <> 0)
      begin GenHcSolver.classify_pids(29521)[4]
        output:
          [<mem_1030@75:1>]
      end GenHcSolver.classify_pids(29521)[4] (0.000000 sec.)
      lb:(<mem_1030@75:1> <> 0)
      nub:(not (<mem_1030@75:1> <> 0))
      begin ApronInterface.convex_hull_interpolate(29524)[4]
        lb:(<mem_1030@75:1> <> 0)
        nub:(not (<mem_1030@75:1> <> 0))
        begin ExtFormula.Formula.case_analysis_boolean(29528)[5]
          ts: (<mem_1030@75:1> <> 0)
          
        end ExtFormula.Formula.case_analysis_boolean(29528)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(29535)[5]
          ts: (<mem_1030@75:1> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(29535)[5] (0.000000 sec.)
        lb':true
        nub':(<mem_1030@75:1> = 0)
        begin InterpProver.interpolate(29539)[5]
          begin InterpProver.interpolate_fresh(29540)[6]
            begin InterpProver.interpolate_log(29541)[7]
              input1: true
              input2: (<mem_1030@75:1> = 0)
              begin InterpProver.interpolate_check(29542)[8]
                begin InterpProver.interpolate_simplify(29543)[9]
                  begin InterpProver.interpolate_quick(29562)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(29565)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(29566)[12]
                        begin CsisatInterface.interpolate_csisat_log(29567)[13]
                          input1: true
                          input2: true
                          begin CsisatInterface.interpolate_csisat_raw(29568)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(29568)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(29567)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(29566)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(29565)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(29562)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(29543)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(29542)[8] (0.001999 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(29541)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(29540)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(29539)[5] (0.001999 sec.)
        begin InterpProver.interpolate(29577)[5]
          begin InterpProver.interpolate_fresh(29578)[6]
            begin InterpProver.interpolate_log(29579)[7]
              input1: true
              input2: (not (<mem_1030@75:1> <> 0))
              begin InterpProver.interpolate_check(29580)[8]
                begin InterpProver.interpolate_simplify(29581)[9]
                  begin InterpProver.interpolate_quick(29600)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(29603)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(29604)[12]
                        begin CsisatInterface.interpolate_csisat_log(29605)[13]
                          input1: true
                          input2: true
                          begin CsisatInterface.interpolate_csisat_raw(29606)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(29606)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(29605)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(29604)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(29603)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(29600)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(29581)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(29580)[8] (0.000000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(29579)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(29578)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(29577)[5] (0.000000 sec.)
        begin InterpProver.interpolate(29616)[5]
          begin InterpProver.interpolate_fresh(29617)[6]
            begin InterpProver.interpolate_log(29618)[7]
              input1: (<mem_1030@75:1> <> 0)
              input2: (not (<mem_1030@75:1> <> 0))
              begin InterpProver.interpolate_check(29619)[8]
                begin InterpProver.interpolate_simplify(29620)[9]
                  begin InterpProver.interpolate_quick(29637)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(29646)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(29647)[12]
                        begin CsisatInterface.interpolate_csisat_log(29648)[13]
                          input1: not 0 = v_sep_mem_1030_sep_75_sep_1
                          input2: 0 = v_sep_mem_1030_sep_75_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(29649)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(29649)[14] (0.000000 sec.)
                          output: not 0 = v_sep_mem_1030_sep_75_sep_1
                          
                        end CsisatInterface.interpolate_csisat_log(29648)[13] (0.000000 sec.)
                        after simplification: not 0 = v_sep_mem_1030_sep_75_sep_1
                        after dnf conversion: ((not 0 = v_sep_mem_1030_sep_75_sep_1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(29647)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(29646)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(29637)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(29620)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(29619)[8] (0.001000 sec.)
              output: (0 <> <mem_1030@75:1>)
            end InterpProver.interpolate_log(29618)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(29617)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(29616)[5] (0.001000 sec.)
        output:
          P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int) = (0 <> <mem_1030@75:1>)
      end ApronInterface.convex_hull_interpolate(29524)[4] (0.002999 sec.)
      begin HcSolver.check_validity(29751)[4]
        input:
          P[<fail_1694@83:0>](<fail_1694@83:0>:bool)|- bot
          
          P[<<make_list_1035@47:2>@63:0>](<k_main_1588@80:1>:int,<k_main_1588@80:0>:int,<k_main_1588@80:2>:int),
          P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,false:bool),
          ((<k_main_1588@80:2> <> 0) && <fail_1694@83:0>) |- P[<fail_1694@83:0>](
          <fail_1694@83:0>:bool)
          
          P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
          ((<mem_1030@75:1> = 0) && (not <<mem_1030@75:3>@78:0>))
          |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                       <<mem_1030@75:3>@78:0>:bool)
          
          P[<<make_list_1035@47:2>@63:0>](<f_main_1688@72:1>:int,<mem_1030@75:0>:int,<mem_1030@75:1>:int),
          (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                       <mem_1030@75:1>:int)
          
          P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int),
          P[<<make_list_1035@50:2>@53:0>]((-1 + <make_list_1035@47:0>):int,<make_list_1035@47:1>:int,(
                                          -1 + <<make_list_1035@47:2>@63:0>):int), (
          <make_list_1035@47:0> >= 0)
          |- P[<<make_list_1035@47:2>@63:0>](<make_list_1035@47:0>:int,
                                             <make_list_1035@47:1>:int,
                                             <<make_list_1035@47:2>@63:0>:int)
          
          P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int),
          ((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> < 0))
          |- P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,
                                             <make_list_1035@50:1>:int,
                                             <<make_list_1035@50:2>@53:0>:int)
          
          P[<make_list_1035@47:1>]((1 + <make_list_1035@50:0>):int,<make_list_1035@50:1>:int),
          ((1 + <make_list_1035@50:0>) >= 0)
          |- P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int)
          
          |- P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(29751)[4] (0.001000 sec.)
      solution:
        P[<fail_1694@83:0>](<fail_1694@83:0>:bool) = false
        P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,<<mem_1030@75:3>@78:0>:bool) = false
        P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int) = (0 <> <mem_1030@75:1>)
        P[<<make_list_1035@47:2>@63:0>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int,<<make_list_1035@50:2>@53:0>:int) =
        true
        P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int,<<make_list_1035@50:2>@53:0>:int) =
        true
        P[<make_list_1035@50:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int) = true
        P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int) = true
    end GenHcSolver.solve(22189)[3] (0.038994 sec.)
    begin YhornInterface.solve(30152)[3]
      begin HcSolver.solve_ub(30153)[4]
        encoded:
          P[<fail_1694@83:0>](<fail_1694@83:0>:int)|- bot
          
          P[<<make_list_1035@47:2>@63:0>](<k_main_1588@80:1>:int,<k_main_1588@80:0>:int,<k_main_1588@80:2>:int),
          P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,0:int),
          ((<k_main_1588@80:2> <> 0) && (<fail_1694@83:0> = 1)) |- P[<fail_1694@83:0>](
          <fail_1694@83:0>:int)
          
          P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
          ((<mem_1030@75:1> = 0) && (not (<<mem_1030@75:3>@78:0> = 1)))
          |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                       <<mem_1030@75:3>@78:0>:int)
          
          P[<<make_list_1035@47:2>@63:0>](<f_main_1688@72:1>:int,<mem_1030@75:0>:int,<mem_1030@75:1>:int),
          (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                       <mem_1030@75:1>:int)
          
          P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int),
          P[<<make_list_1035@50:2>@53:0>]((-1 + <make_list_1035@47:0>):int,<make_list_1035@47:1>:int,(
                                          -1 + <<make_list_1035@47:2>@63:0>):int), (
          <make_list_1035@47:0> >= 0)
          |- P[<<make_list_1035@47:2>@63:0>](<make_list_1035@47:0>:int,
                                             <make_list_1035@47:1>:int,
                                             <<make_list_1035@47:2>@63:0>:int)
          
          P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int),
          ((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> < 0))
          |- P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,
                                             <make_list_1035@50:1>:int,
                                             <<make_list_1035@50:2>@53:0>:int)
          
          P[<make_list_1035@47:1>]((1 + <make_list_1035@50:0>):int,<make_list_1035@50:1>:int),
          ((1 + <make_list_1035@50:0>) >= 0)
          |- P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int)
          
          |- P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int)
        input to Yhorn:
          P[<fail_1694@83:0>](<fail_1694@83:0>:int)|- bot
          
          P[<<make_list_1035@47:2>@63:0>](<k_main_1588@80:1>:int,<k_main_1588@80:0>:int,<k_main_1588@80:2>:int),
          P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,var215:int),
          ((<k_main_1588@80:2> <> 0) && ((var215 = 0) && (<fail_1694@83:0> = 1)))
          |- P[<fail_1694@83:0>](<fail_1694@83:0>:int)
          
          P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
          ((<<mem_1030@75:3>@78:0> <> 1) && (<mem_1030@75:1> = 0))
          |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                       <<mem_1030@75:3>@78:0>:int)
          
          P[<<make_list_1035@47:2>@63:0>](<f_main_1688@72:1>:int,<mem_1030@75:0>:int,<mem_1030@75:1>:int),
          (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                       <mem_1030@75:1>:int)
          
          P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int),
          P[<<make_list_1035@50:2>@53:0>](var216:int,<make_list_1035@47:1>:int,var217:int),
          (((1 + var217) = <<make_list_1035@47:2>@63:0>) &&
           (((1 + var216) = <make_list_1035@47:0>) && (<make_list_1035@47:0> >= 0)))
          |- P[<<make_list_1035@47:2>@63:0>](<make_list_1035@47:0>:int,
                                             <make_list_1035@47:1>:int,
                                             <<make_list_1035@47:2>@63:0>:int)
          
          P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int),
          ((<make_list_1035@50:0> < 0) && (<<make_list_1035@50:2>@53:0> = 0))
          |- P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,
                                             <make_list_1035@50:1>:int,
                                             <<make_list_1035@50:2>@53:0>:int)
          
          P[<make_list_1035@47:1>](var218:int,<make_list_1035@50:1>:int),
          ((var218 = (1 + <make_list_1035@50:0>)) && ((1 + <make_list_1035@50:0>) >= 0))
          |- P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1694_sep_83_sep_0($241)) -> 1=0.
(($241-1=0) & ($242=0) & ($243<>0)) & (v_sep_mem_1030_sep_75_sep_3_sep_78_sep_0($244,$243,$242)) & (v_sep_make_list_1035_sep_47_sep_2_sep_63_sep_0($245,$244,$243)) -> v_sep_fail_1694_sep_83_sep_0($241).
(($246=0) & ($247-1<>0)) & (v_sep_mem_1030_sep_75_sep_1($248,$246)) -> v_sep_mem_1030_sep_75_sep_3_sep_78_sep_0($248,$246,$247).
($246<>0) & (v_sep_make_list_1035_sep_47_sep_2_sep_63_sep_0($249,$248,$246)) -> v_sep_mem_1030_sep_75_sep_1($248,$246).
(($250>=0) & (-$250+$251+1=0) & ($252-$253+1=0)) & (v_sep_make_list_1035_sep_50_sep_2_sep_53_sep_0($251,$254,$252)) & (v_sep_make_list_1035_sep_47_sep_1($250,$254)) -> v_sep_make_list_1035_sep_47_sep_2_sep_63_sep_0($250,$254,$253).
(($255=0) & ($256<0)) & (v_sep_make_list_1035_sep_50_sep_1($256,$257)) -> v_sep_make_list_1035_sep_50_sep_2_sep_53_sep_0($256,$257,$255).
(($256+1>=0) & (-$256+$258-1=0)) & (v_sep_make_list_1035_sep_47_sep_1($258,$257)) -> v_sep_make_list_1035_sep_50_sep_1($256,$257).
0=0 -> v_sep_make_list_1035_sep_47_sep_1($250,$254).


v_sep_fail_1694_sep_83_sep_0: X
v_sep_make_list_1035_sep_47_sep_1: X
v_sep_make_list_1035_sep_47_sep_2_sep_63_sep_0: X
v_sep_make_list_1035_sep_50_sep_1: X
v_sep_make_list_1035_sep_50_sep_2_sep_53_sep_0: X
v_sep_mem_1030_sep_75_sep_1: X
v_sep_mem_1030_sep_75_sep_3_sep_78_sep_0: X
..............
v_sep_fail_1694_sep_83_sep_0: X
v_sep_make_list_1035_sep_47_sep_1: X
v_sep_make_list_1035_sep_47_sep_2_sep_63_sep_0: X
v_sep_make_list_1035_sep_50_sep_1: X
v_sep_make_list_1035_sep_50_sep_2_sep_53_sep_0: X
v_sep_mem_1030_sep_75_sep_1: X
v_sep_mem_1030_sep_75_sep_3_sep_78_sep_0: X
......
v_sep_fail_1694_sep_83_sep_0: X
v_sep_make_list_1035_sep_47_sep_1: X
v_sep_make_list_1035_sep_47_sep_2_sep_63_sep_0: X
v_sep_make_list_1035_sep_50_sep_1: X
v_sep_make_list_1035_sep_50_sep_2_sep_53_sep_0: X
v_sep_mem_1030_sep_75_sep_1: X
v_sep_mem_1030_sep_75_sep_3_sep_78_sep_0: X
..........
v_sep_fail_1694_sep_83_sep_0: X
v_sep_make_list_1035_sep_47_sep_1: X
v_sep_make_list_1035_sep_47_sep_2_sep_63_sep_0: X
v_sep_make_list_1035_sep_50_sep_1: X
v_sep_make_list_1035_sep_50_sep_2_sep_53_sep_0: X
v_sep_mem_1030_sep_75_sep_1: X
v_sep_mem_1030_sep_75_sep_3_sep_78_sep_0: X
.............
v_sep_fail_1694_sep_83_sep_0: X
v_sep_make_list_1035_sep_47_sep_1: X
v_sep_make_list_1035_sep_47_sep_2_sep_63_sep_0: X
v_sep_make_list_1035_sep_50_sep_1: X
v_sep_make_list_1035_sep_50_sep_2_sep_53_sep_0: X
v_sep_mem_1030_sep_75_sep_1: X
v_sep_mem_1030_sep_75_sep_3_sep_78_sep_0: X
..............(0=0) & (v_sep_fail_1694_sep_83_sep_0($241)) -> 1=0.
(($241-1=0) & ($242=0) & ($243<>0)) & (v_sep_mem_1030_sep_75_sep_3_sep_78_sep_0($244,$243,$242)) & (v_sep_make_list_1035_sep_47_sep_2_sep_63_sep_0($245,$244,$243)) -> v_sep_fail_1694_sep_83_sep_0($241).
(($246=0) & ($247-1<>0)) & (v_sep_mem_1030_sep_75_sep_1($248,$246)) -> v_sep_mem_1030_sep_75_sep_3_sep_78_sep_0($248,$246,$247).
($246<>0) & (v_sep_make_list_1035_sep_47_sep_2_sep_63_sep_0($249,$248,$246)) -> v_sep_mem_1030_sep_75_sep_1($248,$246).
(($250>=0) & (-$250+$251+1=0) & ($252-$253+1=0)) & (v_sep_make_list_1035_sep_50_sep_2_sep_53_sep_0($251,$254,$252)) & (v_sep_make_list_1035_sep_47_sep_1($250,$254)) -> v_sep_make_list_1035_sep_47_sep_2_sep_63_sep_0($250,$254,$253).
(($255=0) & ($256<0)) & (v_sep_make_list_1035_sep_50_sep_1($256,$257)) -> v_sep_make_list_1035_sep_50_sep_2_sep_53_sep_0($256,$257,$255).
(($256+1>=0) & (-$256+$258-1=0)) & (v_sep_make_list_1035_sep_47_sep_1($258,$257)) -> v_sep_make_list_1035_sep_50_sep_1($256,$257).
0=0 -> v_sep_make_list_1035_sep_47_sep_1($250,$254).

          |- P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int)
        solution:
          P[<fail_1694@83:0>]($259:bool) = false
          P[<make_list_1035@47:1>]($288:int,$290:int) = true
          P[<<make_list_1035@47:2>@63:0>]($269:int,$271:int,$273:int) = (1 <= $273)
          P[<make_list_1035@50:1>]($293:int,$295:int) = true
          P[<<make_list_1035@50:2>@53:0>]($281:int,$283:int,$285:int) = (0 <= $285)
          P[<mem_1030@75:1>]($276:int,$278:int) = (1 <= $278)
          P[<<mem_1030@75:3>@78:0>]($262:int,$264:int,$266:bool) = ((1 + $264) <= 0)
        
      end HcSolver.solve_ub(30153)[4] (0.045993 sec.)
      begin HcSolver.check_validity(30504)[4]
        input:
          P[<fail_1694@83:0>](<fail_1694@83:0>:bool)|- bot
          
          P[<<make_list_1035@47:2>@63:0>](<k_main_1588@80:1>:int,<k_main_1588@80:0>:int,<k_main_1588@80:2>:int),
          P[<<mem_1030@75:3>@78:0>](<k_main_1588@80:0>:int,<k_main_1588@80:2>:int,false:bool),
          ((<k_main_1588@80:2> <> 0) && <fail_1694@83:0>) |- P[<fail_1694@83:0>](
          <fail_1694@83:0>:bool)
          
          P[<mem_1030@75:1>](<mem_1030@75:0>:int,<mem_1030@75:1>:int),
          ((<mem_1030@75:1> = 0) && (not <<mem_1030@75:3>@78:0>))
          |- P[<<mem_1030@75:3>@78:0>](<mem_1030@75:0>:int,<mem_1030@75:1>:int,
                                       <<mem_1030@75:3>@78:0>:bool)
          
          P[<<make_list_1035@47:2>@63:0>](<f_main_1688@72:1>:int,<mem_1030@75:0>:int,<mem_1030@75:1>:int),
          (<mem_1030@75:1> <> 0) |- P[<mem_1030@75:1>](<mem_1030@75:0>:int,
                                                       <mem_1030@75:1>:int)
          
          P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int),
          P[<<make_list_1035@50:2>@53:0>]((-1 + <make_list_1035@47:0>):int,<make_list_1035@47:1>:int,(
                                          -1 + <<make_list_1035@47:2>@63:0>):int), (
          <make_list_1035@47:0> >= 0)
          |- P[<<make_list_1035@47:2>@63:0>](<make_list_1035@47:0>:int,
                                             <make_list_1035@47:1>:int,
                                             <<make_list_1035@47:2>@63:0>:int)
          
          P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int),
          ((<<make_list_1035@50:2>@53:0> = 0) && (<make_list_1035@50:0> < 0))
          |- P[<<make_list_1035@50:2>@53:0>](<make_list_1035@50:0>:int,
                                             <make_list_1035@50:1>:int,
                                             <<make_list_1035@50:2>@53:0>:int)
          
          P[<make_list_1035@47:1>]((1 + <make_list_1035@50:0>):int,<make_list_1035@50:1>:int),
          ((1 + <make_list_1035@50:0>) >= 0)
          |- P[<make_list_1035@50:1>](<make_list_1035@50:0>:int,<make_list_1035@50:1>:int)
          
          |- P[<make_list_1035@47:1>](<make_list_1035@47:0>:int,<make_list_1035@47:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(30504)[4] (0.002000 sec.)
      solution:
        P[<fail_1694@83:0>]($259:bool) = false
        P[<make_list_1035@47:1>]($288:int,$290:int) = true
        P[<<make_list_1035@47:2>@63:0>]($269:int,$271:int,$273:int) = (1 <= $273)
        P[<make_list_1035@50:1>]($293:int,$295:int) = true
        P[<<make_list_1035@50:2>@53:0>]($281:int,$283:int,$285:int) = (0 <= $285)
        P[<mem_1030@75:1>]($276:int,$278:int) = (1 <= $278)
        P[<<mem_1030@75:3>@78:0>]($262:int,$264:int,$266:bool) = ((1 + $264) <= 0)
    end YhornInterface.solve(30152)[3] (0.048993 sec.)
    
  end RefTypeInfer.infer_etrs(11863)[2] (0.174974 sec.)
  refinement types:
    main_1681: X
    f_1689: v1:int -> X
    f_1690: v1:int -> v2:int -> X
    main_1040: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1035: v1:int -> v2:int -> (v3:int -> (v4:int -> (v5:int -> X) -> X) -> X) -> X
    make_list_1035: v1:int -> v2:int -> (v3:int -> (v4:int -> (v5:int -> X) -> X) -> X) -> X
    f_make_list_1686: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> (v5:int -> X) -> X) -> X) ->
                      v9:int -> (v10:int -> (v11:int -> X) -> X) -> X
    cons_make_list_1113: v1:int ->
                         v2:int ->
                         v3:int ->
                         v4:int ->
                         (v5:int -> (v6:int -> X) -> X) -> (v9:int -> (v10:int -> (v11:int -> X) -> X) -> X) -> X
    f_main_1687: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    is_nil_1038: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1688: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> (v6:int -> (v7:int -> X) -> X) -> v10:bool -> X
    mem_1030: v1:int -> v2:{v2:int | (0 <> v2)} -> (v3:int -> (v4:int -> X) -> X) -> (v7:{v7:bool | false} -> X) -> X
    k_main_1588: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    fail_1694: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_mem_1692: var278:bool ->
                 var277:int -> var276:int -> (var275:int -> (var274:int -> X) -> X) -> (var271:bool -> X) -> X
    f_1691: var282:int -> var281:int -> var280:unit -> X
    f_cons_make_list_1685: var294:int ->
                           var293:int ->
                           var292:int ->
                           var291:int -> (var290:int -> (var289:int -> X) -> X) -> var286:int -> (var285:int -> X) -> X
    f_make_list_1684: var300:int -> var299:int -> var298:int -> (var297:int -> X) -> X
    f_mem_1682: var310:int ->
                var309:int -> (var308:bool -> X) -> (var306:int -> (var305:int -> X) -> X) -> var302:int -> X
    f_mem_1683: var321:int ->
                var320:int ->
                var319:int -> (var318:int -> (var317:int -> X) -> X) -> var314:int -> (var313:int -> X) -> X
  abstraction types:
    main_1681: X
    f_1689: v1:int -> X
    f_1690: v1:int -> v2:int -> X
    main_1040: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1035: var322:int -> var323:int -> (var324:int -> (var325:int -> (var326:int -> X) -> X) -> X) -> X
    f_make_list_1686: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> (v5:int -> X) -> X) -> X) ->
                      v9:int -> (v10:int -> (v11:int -> X) -> X) -> X
    cons_make_list_1113: v1:int ->
                         v2:int ->
                         v3:int ->
                         v4:int ->
                         (v5:int -> (v6:int -> X) -> X) -> (v9:int -> (v10:int -> (v11:int -> X) -> X) -> X) -> X
    f_main_1687: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    is_nil_1038: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1688: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> (v6:int -> (v7:int -> X) -> X) -> v10:bool -> X
    mem_1030: v1:int -> v2:int[v2 -> (0 <> v2)] -> (v3:int -> (v4:int -> X) -> X) -> (v7:bool -> X) -> X
    k_main_1588: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    fail_1694: v1:bool -> (v2:unit -> X) -> X
    br_mem_1692: var278:bool ->
                 var277:int -> var276:int -> (var275:int -> (var274:int -> X) -> X) -> (var271:bool -> X) -> X
    f_1691: var282:int -> var281:int -> var280:unit -> X
    f_cons_make_list_1685: var294:int ->
                           var293:int ->
                           var292:int ->
                           var291:int -> (var290:int -> (var289:int -> X) -> X) -> var286:int -> (var285:int -> X) -> X
    f_make_list_1684: var300:int -> var299:int -> var298:int -> (var297:int -> X) -> X
    f_mem_1682: var310:int ->
                var309:int -> (var308:bool -> X) -> (var306:int -> (var305:int -> X) -> X) -> var302:int -> X
    f_mem_1683: var321:int ->
                var320:int ->
                var319:int -> (var318:int -> (var317:int -> X) -> X) -> var314:int -> (var313:int -> X) -> X
  
end AbsTypeInfer.refine(11862)[1] (0.180973 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 1; 0

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1681
  main_1681 -> (rand_int f_1689)
  br_mem_1692 b_1693 x_1031 xs1_1032 xs2_1032 k_mem_1190 when b_1693 ->
      (xs2_1032 0 (f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032))
  br_mem_1692 b_1693 x_1031 xs1_1032 xs2_1032 k_mem_1190 when (not b_1693) -> _|_
  cons_make_list_1113 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 k_make_list_cons_make_list_1372 ->
      (k_make_list_cons_make_list_1372 (xs1_1112 + 1) (f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112))
  f_1689 x_1606 -> (rand_int (f_1690 x_1606))
  f_1690 x_1606 x_1619 -> (main_1040 x_1606 x_1619 (f_1691 x_1606 x_1619))
  f_1691 x_1606 x_1619 x_1603 -> end
  f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 i_1110 k_make_list_cons_make_list_1387 when (
      i_1110 = 0) -> (k_make_list_cons_make_list_1387 x_1111)
  f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 i_1110 k_make_list_cons_make_list_1387 when (
      not (i_1110 = 0)) -> (xs2_1112 (i_1110 - 1) k_make_list_cons_make_list_1387)
  f_main_1687 m_1042 n_1041 k_main_1508 x1_1514 x2_1514 ->
      (is_nil_1038 x1_1514 x2_1514 (f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514))
  f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514 b_1589 when b_1589 ->
      (k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 true)
  f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514 b_1589 when (
      not b_1589) -> (mem_1030 m_1042 x1_1514 x2_1514 (k_main_1588 m_1042 n_1041 x1_1514 k_main_1508))
  f_make_list_1684 n_1036 x_1037 x_1117 k_make_list_1325 -> _|_
  f_make_list_1686 n_1036 x_1037 k_make_list_1313 x1_1451 x2_1451 ->
      (cons_make_list_1113 n_1036 x_1037 x_1037 x1_1451 x2_1451 k_make_list_1313)
  f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032 x_1237 when (x_1031 = x_1237) -> (k_mem_1190 true)
  f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032 x_1237 when (not (x_1031 = x_1237)) ->
      (mem_1030 x_1031 (xs1_1032 - 1) (f_mem_1683 x_1031 x_1237 xs1_1032 xs2_1032) k_mem_1190)
  f_mem_1683 x_1031 x_1237 xs1_1032 xs2_1032 x_1084 k_mem_xs_1223 -> (xs2_1032 (x_1084 + 1) k_mem_xs_1223)
  fail_1694 b k -> {fail} => (k ())
  is_nil_1038 xs1_1039 xs2_1039 k_is_nil_1484 when (xs1_1039 = 0) -> (k_is_nil_1484 true)
  is_nil_1038 xs1_1039 xs2_1039 k_is_nil_1484 when (not (xs1_1039 = 0)) -> (k_is_nil_1484 false)
  k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 b_1600 when b_1600 -> (k_main_1508 ())
  k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 b_1600 when (not b_1600) -> (fail_1694 true k_main_1508)
  main_1040 n_1041 m_1042 k_main_1508 -> (make_list_1035 n_1041 m_1042 (f_main_1687 m_1042 n_1041 k_main_1508))
  make_list_1035 n_1036 x_1037 k_make_list_1313 when (n_1036 < 0) ->
      (k_make_list_1313 0 (f_make_list_1684 n_1036 x_1037))
  make_list_1035 n_1036 x_1037 k_make_list_1313 when (not (n_1036 < 0)) ->
      (make_list_1035 (n_1036 - 1) x_1037 (f_make_list_1686 n_1036 x_1037 k_make_list_1313))
  mem_1030 x_1031 xs1_1032 xs2_1032 k_mem_1190 when (xs1_1032 = 0) -> (k_mem_1190 false)
  mem_1030 x_1031 xs1_1032 xs2_1032 k_mem_1190 when (not (xs1_1032 = 0)) ->
      (br_mem_1692 (1 <= xs1_1032) x_1031 xs1_1032 xs2_1032 k_mem_1190)
Types:
  main_1681 : X
  fail_1694 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1035 : (int -> int -> (x_4:int[x_4 = 0] -> (int -> (int -> X) -> X) -> X) -> X)
  mem_1030 : (int -> x_2:int[(not (x_2 = 0))] -> (int -> (int -> X) -> X) -> (x_10:bool[x_10] -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1681 ... --> 
  f_1689 ... --> 
  f_1690 ... --> 
  main_1040 ... --> 
  make_list_1035 [2/2] ... --> 
  make_list_1035 [1/2] ... --> 
  f_make_list_1686 ... --> 
  cons_make_list_1113 ... --> 
  f_main_1687 ... --> 
  is_nil_1038 [2/2] ... --> 
  f_main_1688 [2/2] ... --> 
  mem_1030 [2/2] ... --> 
  br_mem_1692 [1/2] ... --> 
  f_cons_make_list_1685 [1/2] ... --> 
  f_mem_1682 [2/2] ... --> 
  mem_1030 [1/2] ... --> 
  k_main_1588 [2/2] ... --> 
  fail_1694 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 1; 1; 0; 0; 1; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(31480)[1]
  program:
    main_1681  | true = ((Random.int 0) f_1689)
    br_mem_1692 b_1693 x_1031 xs1_1032 xs2_1032 k_mem_1190 | b_1693 = (
    xs2_1032 0
             (f_mem_1682 x_1031
                         xs1_1032
                         k_mem_1190
                         xs2_1032))
    br_mem_1692 b_1693 x_1031 xs1_1032 xs2_1032 k_mem_1190 | (not b_1693) = bot
    cons_make_list_1113 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 k_make_list_cons_make_list_1372 | true = (
    k_make_list_cons_make_list_1372 (xs1_1112 + 1)
                                    (f_cons_make_list_1685 n_1036
                                                           x_1037
                                                           x_1111
                                                           xs1_1112
                                                           xs2_1112))
    f_1689 x_1606 | true = ((Random.int 0) (f_1690 x_1606))
    f_1690 x_1606 x_1619 | true = (main_1040 x_1606
                                             x_1619
                                             (f_1691 x_1606
                                                     x_1619))
    f_1691 x_1606 x_1619 x_1603 | true = end
    f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 i_1110 k_make_list_cons_make_list_1387 | (
    i_1110 = 0) = (k_make_list_cons_make_list_1387 x_1111)
    f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 i_1110 k_make_list_cons_make_list_1387 | (
    not (i_1110 = 0)) = (xs2_1112 (i_1110 - 1)
                                  k_make_list_cons_make_list_1387)
    f_main_1687 m_1042 n_1041 k_main_1508 x1_1514 x2_1514 | true = (is_nil_1038
                                                                    x1_1514
                                                                    x2_1514
                                                                    (
                                                                    f_main_1688
                                                                    m_1042
                                                                    n_1041
                                                                    x1_1514
                                                                    k_main_1508
                                                                    x2_1514))
    f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514 b_1589 | b_1589 = (
    k_main_1588 m_1042
                n_1041
                x1_1514
                k_main_1508
                true)
    f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514 b_1589 | (not b_1589) = (
    mem_1030 m_1042
             x1_1514
             x2_1514
             (k_main_1588 m_1042
                          n_1041
                          x1_1514
                          k_main_1508))
    f_make_list_1684 n_1036 x_1037 x_1117 k_make_list_1325 | true = bot
    f_make_list_1686 n_1036 x_1037 k_make_list_1313 x1_1451 x2_1451 | true = (
    cons_make_list_1113 n_1036
                        x_1037
                        x_1037
                        x1_1451
                        x2_1451
                        k_make_list_1313)
    f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032 x_1237 | (x_1031 = x_1237) = (
    k_mem_1190 true)
    f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032 x_1237 | (not (x_1031 = x_1237)) = (
    mem_1030 x_1031
             (xs1_1032 - 1)
             (f_mem_1683 x_1031
                         x_1237
                         xs1_1032
                         xs2_1032)
             k_mem_1190)
    f_mem_1683 x_1031 x_1237 xs1_1032 xs2_1032 x_1084 k_mem_xs_1223 | true = (
    xs2_1032 (x_1084 + 1)
             k_mem_xs_1223)
    fail_1694 b k | true = (fail ())
    is_nil_1038 xs1_1039 xs2_1039 k_is_nil_1484 | (xs1_1039 = 0) = (k_is_nil_1484 true)
    is_nil_1038 xs1_1039 xs2_1039 k_is_nil_1484 | (not (xs1_1039 = 0)) = (
    k_is_nil_1484 false)
    k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 b_1600 | b_1600 = (
    k_main_1508 ())
    k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 b_1600 | (not b_1600) = (
    fail_1694 true
              k_main_1508)
    main_1040 n_1041 m_1042 k_main_1508 | true = (make_list_1035 n_1041
                                                                 m_1042
                                                                 (f_main_1687 m_1042
                                                                    n_1041
                                                                    k_main_1508))
    make_list_1035 n_1036 x_1037 k_make_list_1313 | (n_1036 < 0) = (k_make_list_1313 0
                                                                    (f_make_list_1684 n_1036
                                                                    x_1037))
    make_list_1035 n_1036 x_1037 k_make_list_1313 | (not (n_1036 < 0)) = (
    make_list_1035 (n_1036 - 1)
                   x_1037
                   (f_make_list_1686 n_1036
                                     x_1037
                                     k_make_list_1313))
    mem_1030 x_1031 xs1_1032 xs2_1032 k_mem_1190 | (xs1_1032 = 0) = (
    k_mem_1190 false)
    mem_1030 x_1031 xs1_1032 xs2_1032 k_mem_1190 | (not (xs1_1032 = 0)) = (
    br_mem_1692 (1 <= xs1_1032)
                x_1031
                xs1_1032
                xs2_1032
                k_mem_1190)
    main_1681:X
    br_mem_1692:bool -> int -> int -> (int -> (int -> X) -> X) -> (bool -> X) -> X
    cons_make_list_1113:int ->
                        int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1689:int -> X
    f_1690:int -> int -> X
    f_1691:int -> int -> unit -> X
    f_cons_make_list_1685:int -> int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_main_1687:int -> int -> (unit -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_main_1688:int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> bool -> X
    f_make_list_1684:int -> int -> int -> (int -> X) -> X
    f_make_list_1686:int -> int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_mem_1682:int -> int -> (bool -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_mem_1683:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    fail_1694:bool -> (unit -> X) -> X
    is_nil_1038:int -> (int -> (int -> X) -> X) -> (bool -> X) -> X
    k_main_1588:int -> int -> int -> (unit -> X) -> bool -> X
    main_1040:int -> int -> (unit -> X) -> X
    make_list_1035:int -> int -> (int -> (int -> (int -> X) -> X) -> X) -> X
    mem_1030:int -> int -> (int -> (int -> X) -> X) -> (bool -> X) -> X
  inlined functions: br_mem_1692,cons_make_list_1113,f_1689,f_1690,f_1691,f_cons_make_list_1685,f_main_1687,f_main_1688,f_make_list_1684,f_make_list_1686,f_mem_1682,f_mem_1683,is_nil_1038,k_main_1588,main_1040
  counterexample: 0:0:0:0:1:0:0:0:0:1:1:1:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1689@89:0> = var331)
     [true.nop((<f_1690@92:0> = <f_1689@89:0>) && (<f_1690@92:1> = var332))
      [true.((<main_1040@94:0> = <f_1690@92:0>) && (<main_1040@94:1> = <f_1690@92:1>))
       [true.((<make_list_1035@96:0> = <main_1040@94:0>) && (<make_list_1035@96:1> = <main_1040@94:1>))
        [(not (<make_list_1035@96:0> < 0)).
         ((<make_list_1035@99:0> = (<make_list_1035@96:0> - 1)) && (<make_list_1035@99:1> = <make_list_1035@96:1>))
         [(<make_list_1035@99:0> < 0).(<<make_list_1035@99:2>@102:0> = 0)
          [true.
           ((<f_make_list_1686@104:0> = <make_list_1035@96:0>) &&
            ((<f_make_list_1686@104:1> = <make_list_1035@96:1>) &&
             (<f_make_list_1686@104:3> = <<make_list_1035@99:2>@102:0>)))
           [true.
            ((<cons_make_list_1113@106:0> = <f_make_list_1686@104:0>) &&
             ((<cons_make_list_1113@106:1> = <f_make_list_1686@104:1>) &&
              ((<cons_make_list_1113@106:2> = <f_make_list_1686@104:1>) &&
               (<cons_make_list_1113@106:3> = <f_make_list_1686@104:3>))))
            [true.(<<cons_make_list_1113@106:5>@108:0> = (<cons_make_list_1113@106:3> + 1))
             [true.(<<f_make_list_1686@104:2>@110:0> = <<cons_make_list_1113@106:5>@108:0>)
              [true.(<<make_list_1035@96:2>@112:0> = <<f_make_list_1686@104:2>@110:0>)
               [true.
                ((<f_main_1687@114:0> = <main_1040@94:1>) &&
                 ((<f_main_1687@114:1> = <main_1040@94:0>) && (<f_main_1687@114:3> = <<make_list_1035@96:2>@112:0>)))
                [true.(<is_nil_1038@116:0> = <f_main_1687@114:3>)
                 [(not (<is_nil_1038@116:0> = 0)).(<<is_nil_1038@116:2>@119:0> = false)
                  [true.
                   ((<f_main_1688@121:0> = <f_main_1687@114:0>) &&
                    ((<f_main_1688@121:1> = <f_main_1687@114:1>) &&
                     ((<f_main_1688@121:2> = <f_main_1687@114:3>) &&
                      (<f_main_1688@121:5> = <<is_nil_1038@116:2>@119:0>))))
                   [(not <f_main_1688@121:5>).
                    ((<mem_1030@124:0> = <f_main_1688@121:0>) && (<mem_1030@124:1> = <f_main_1688@121:2>))
                    [(not (<mem_1030@124:1> = 0)).
                     ((<br_mem_1692@127:0> = (1 <= <mem_1030@124:1>)) &&
                      ((<br_mem_1692@127:1> = <mem_1030@124:0>) && (<br_mem_1692@127:2> = <mem_1030@124:1>)))
                     [<br_mem_1692@127:0>.(<<br_mem_1692@127:3>@130:0> = 0)
                      [true.(<<mem_1030@124:2>@132:0> = <<br_mem_1692@127:3>@130:0>)
                       [true.(<<f_main_1688@121:4>@134:0> = <<mem_1030@124:2>@132:0>)
                        [true.(<<f_main_1687@114:4>@136:0> = <<f_main_1688@121:4>@134:0>)
                         [true.(<<<make_list_1035@96:2>@112:1>@138:0> = <<f_main_1687@114:4>@136:0>)
                          [true.(<<<f_make_list_1686@104:2>@110:1>@140:0> = <<<make_list_1035@96:2>@112:1>@138:0>)
                           [true.
                            (<<<cons_make_list_1113@106:5>@108:1>@142:0> = <<<f_make_list_1686@104:2>@110:1>@140:0>)
                            [true.
                             ((<f_cons_make_list_1685@144:0> = <cons_make_list_1113@106:0>) &&
                              ((<f_cons_make_list_1685@144:1> = <cons_make_list_1113@106:1>) &&
                               ((<f_cons_make_list_1685@144:2> = <cons_make_list_1113@106:2>) &&
                                ((<f_cons_make_list_1685@144:3> = <cons_make_list_1113@106:3>) &&
                                 (<f_cons_make_list_1685@144:5> = <<<cons_make_list_1113@106:5>@108:1>@142:0>)))))
                             [(<f_cons_make_list_1685@144:5> = 0).
                              (<<f_cons_make_list_1685@144:6>@147:0> = <f_cons_make_list_1685@144:2>)
                              [true.
                               (<<<<cons_make_list_1113@106:5>@108:1>@142:1>@149:0> =
                                <<f_cons_make_list_1685@144:6>@147:0>)
                               [true.
                                (<<<<f_make_list_1686@104:2>@110:1>@140:1>@151:0> =
                                 <<<<cons_make_list_1113@106:5>@108:1>@142:1>@149:0>)
                                [true.
                                 (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> =
                                  <<<<f_make_list_1686@104:2>@110:1>@140:1>@151:0>)
                                 [true.
                                  (<<<f_main_1687@114:4>@136:1>@155:0> = <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>)
                                  [true.(<<<f_main_1688@121:4>@134:1>@157:0> = <<<f_main_1687@114:4>@136:1>@155:0>)
                                   [true.(<<<mem_1030@124:2>@132:1>@159:0> = <<<f_main_1688@121:4>@134:1>@157:0>)
                                    [true.(<<<br_mem_1692@127:3>@130:1>@161:0> = <<<mem_1030@124:2>@132:1>@159:0>)
                                     [true.
                                      ((<f_mem_1682@163:0> = <br_mem_1692@127:1>) &&
                                       ((<f_mem_1682@163:1> = <br_mem_1692@127:2>) &&
                                        (<f_mem_1682@163:4> = <<<br_mem_1692@127:3>@130:1>@161:0>)))
                                      [(not (<f_mem_1682@163:0> = <f_mem_1682@163:4>)).
                                       ((<mem_1030@166:0> = <f_mem_1682@163:0>) &&
                                        (<mem_1030@166:1> = (<f_mem_1682@163:1> - 1)))
                                       [(<mem_1030@166:1> = 0).(<<mem_1030@166:3>@169:0> = false)
                                        [true.(<<f_mem_1682@163:2>@171:0> = <<mem_1030@166:3>@169:0>)
                                         [true.(<<br_mem_1692@127:4>@173:0> = <<f_mem_1682@163:2>@171:0>)
                                          [true.(<<mem_1030@124:3>@175:0> = <<br_mem_1692@127:4>@173:0>)
                                           [true.
                                            ((<k_main_1588@177:0> = <f_main_1688@121:0>) &&
                                             ((<k_main_1588@177:1> = <f_main_1688@121:1>) &&
                                              ((<k_main_1588@177:2> = <f_main_1688@121:2>) &&
                                               (<k_main_1588@177:4> = <<mem_1030@124:3>@175:0>))))
                                            [(not <k_main_1588@177:4>).(<fail_1694@180:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(31481)[2]
    horn clauses:
      P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
      
      P[<k_main_1588@177:4>](<k_main_1588@177:0>:int,<k_main_1588@177:1>:int,<k_main_1588@177:2>:int,false:bool),
      <fail_1694@180:0> |- P[<fail_1694@180:0>](<fail_1694@180:0>:bool)
      
      P[<f_main_1688@121:5>](<k_main_1588@177:0>:int,<k_main_1588@177:1>:int,<k_main_1588@177:2>:int,false:bool),
      P[<<mem_1030@124:3>@175:0>](<k_main_1588@177:0>:int,<k_main_1588@177:2>:int,<k_main_1588@177:4>:bool)|- P[<k_main_1588@177:4>](
      <k_main_1588@177:0>:int,<k_main_1588@177:1>:int,<k_main_1588@177:2>:int,
      <k_main_1588@177:4>:bool)
      
      P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
      P[<<br_mem_1692@127:4>@173:0>]((1 <= <mem_1030@124:1>):bool,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:3>@175:0>:bool),
      (<mem_1030@124:1> <> 0)
      |- P[<<mem_1030@124:3>@175:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                     <<mem_1030@124:3>@175:0>:bool)
      
      P[<br_mem_1692@127:2>](<br_mem_1692@127:0>:bool,<br_mem_1692@127:1>:int,<br_mem_1692@127:2>:int),
      P[<<f_mem_1682@163:2>@171:0>](<br_mem_1692@127:1>:int,<br_mem_1692@127:2>:int,<<br_mem_1692@127:4>@173:0>:bool),
      <br_mem_1692@127:0>
      |- P[<<br_mem_1692@127:4>@173:0>](<br_mem_1692@127:0>:bool,<br_mem_1692@127:1>:int,
                                        <br_mem_1692@127:2>:int,<<br_mem_1692@127:4>@173:0>:bool)
      
      P[<f_mem_1682@163:4>](<f_mem_1682@163:0>:int,<f_mem_1682@163:1>:int,<f_mem_1682@163:4>:int),
      P[<<mem_1030@166:3>@169:0>](<f_mem_1682@163:0>:int,(-1 + <f_mem_1682@163:1>):int,<<f_mem_1682@163:2>@171:0>:bool),
      (<f_mem_1682@163:0> <> <f_mem_1682@163:4>)
      |- P[<<f_mem_1682@163:2>@171:0>](<f_mem_1682@163:0>:int,<f_mem_1682@163:1>:int,
                                       <<f_mem_1682@163:2>@171:0>:bool)
      
      P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int),
      ((<mem_1030@166:1> = 0) && (not <<mem_1030@166:3>@169:0>))
      |- P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,
                                     <<mem_1030@166:3>@169:0>:bool)
      
      P[<f_mem_1682@163:4>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,<f_mem_1682@163:4>:int),
      (<mem_1030@166:0> <> <f_mem_1682@163:4>) |- P[<mem_1030@166:1>](
      <mem_1030@166:0>:int,<mem_1030@166:1>:int)
      
      P[<br_mem_1692@127:2>](true:bool,<f_mem_1682@163:0>:int,<f_mem_1682@163:1>:int),
      P[<<<br_mem_1692@127:3>@130:1>@161:0>](true:bool,<f_mem_1682@163:0>:int,<f_mem_1682@163:1>:int,0:int,<f_mem_1682@163:4>:int)|- P[<f_mem_1682@163:4>](
      <f_mem_1682@163:0>:int,<f_mem_1682@163:1>:int,<f_mem_1682@163:4>:int)
      
      P[<mem_1030@124:1>](<br_mem_1692@127:1>:int,<br_mem_1692@127:2>:int),
      P[<<<mem_1030@124:2>@132:1>@159:0>](<br_mem_1692@127:1>:int,<br_mem_1692@127:2>:int,<<br_mem_1692@127:3>@130:0>:int,<<<br_mem_1692@127:3>@130:1>@161:0>:int),
      P[<br_mem_1692@127:2>](<br_mem_1692@127:0>:bool,<br_mem_1692@127:1>:int,<br_mem_1692@127:2>:int),
      ((<br_mem_1692@127:2> <> 0) && (<br_mem_1692@127:0> = (1 <= <br_mem_1692@127:2>)))
      |- P[<<<br_mem_1692@127:3>@130:1>@161:0>](<br_mem_1692@127:0>:bool,
                                                <br_mem_1692@127:1>:int,
                                                <br_mem_1692@127:2>:int,
                                                <<br_mem_1692@127:3>@130:0>:int,
                                                <<<br_mem_1692@127:3>@130:1>@161:0>:int)
      
      P[<f_main_1688@121:5>](<mem_1030@124:0>:int,<f_main_1688@121:1>:int,<mem_1030@124:1>:int,false:bool),
      P[<<<f_main_1688@121:4>@134:1>@157:0>](<mem_1030@124:0>:int,<f_main_1688@121:1>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
      P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int)|- P[<<<mem_1030@124:2>@132:1>@159:0>](
      <mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,
      <<<mem_1030@124:2>@132:1>@159:0>:int)
      
      P[<f_main_1687@114:3>](<f_main_1688@121:0>:int,<f_main_1688@121:1>:int,<f_main_1688@121:2>:int),
      P[<<<f_main_1687@114:4>@136:1>@155:0>](<f_main_1688@121:0>:int,<f_main_1688@121:1>:int,<f_main_1688@121:2>:int,<<f_main_1688@121:4>@134:0>:int,<<<f_main_1688@121:4>@134:1>@157:0>:int)|- P[<<<f_main_1688@121:4>@134:1>@157:0>](
      <f_main_1688@121:0>:int,<f_main_1688@121:1>:int,<f_main_1688@121:2>:int,
      <<f_main_1688@121:4>@134:0>:int,<<<f_main_1688@121:4>@134:1>@157:0>:int)
      
      P[<main_1040@94:1>](<f_main_1687@114:1>:int,<f_main_1687@114:0>:int),
      P[<<make_list_1035@96:2>@112:0>](<f_main_1687@114:1>:int,<f_main_1687@114:0>:int,<f_main_1687@114:3>:int),
      P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1687@114:1>:int,<f_main_1687@114:0>:int,<f_main_1687@114:3>:int,<<f_main_1687@114:4>@136:0>:int,<<<f_main_1687@114:4>@136:1>@155:0>:int),
      P[<f_main_1687@114:3>](<f_main_1687@114:0>:int,<f_main_1687@114:1>:int,<f_main_1687@114:3>:int)|- P[<<<f_main_1687@114:4>@136:1>@155:0>](
      <f_main_1687@114:0>:int,<f_main_1687@114:1>:int,<f_main_1687@114:3>:int,
      <<f_main_1687@114:4>@136:0>:int,<<<f_main_1687@114:4>@136:1>@155:0>:int)
      
      P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
      P[<<f_make_list_1686@104:2>@110:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
      P[<<<<f_make_list_1686@104:2>@110:1>@140:1>@151:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int),
      P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
      (<make_list_1035@96:0> >= 0)
      |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                          <make_list_1035@96:1>:int,
                                                          <<make_list_1035@96:2>@112:0>:int,
                                                          <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                          <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
      
      P[<f_make_list_1686@104:3>](<f_make_list_1686@104:0>:int,<f_make_list_1686@104:1>:int,<cons_make_list_1113@106:3>:int),
      P[<<cons_make_list_1113@106:5>@108:0>](<f_make_list_1686@104:0>:int,<f_make_list_1686@104:1>:int,<f_make_list_1686@104:1>:int,<cons_make_list_1113@106:3>:int,<<f_make_list_1686@104:2>@110:0>:int),
      P[<<<<cons_make_list_1113@106:5>@108:1>@142:1>@149:0>](<f_make_list_1686@104:0>:int,<f_make_list_1686@104:1>:int,<f_make_list_1686@104:1>:int,<cons_make_list_1113@106:3>:int,<<f_make_list_1686@104:2>@110:0>:int,<<<f_make_list_1686@104:2>@110:1>@140:0>:int,<<<<f_make_list_1686@104:2>@110:1>@140:1>@151:0>:int),
      P[<<f_make_list_1686@104:2>@110:0>](<f_make_list_1686@104:0>:int,<f_make_list_1686@104:1>:int,<<f_make_list_1686@104:2>@110:0>:int)|- P[<<<<f_make_list_1686@104:2>@110:1>@140:1>@151:0>](
      <f_make_list_1686@104:0>:int,<f_make_list_1686@104:1>:int,<<f_make_list_1686@104:2>@110:0>:int,
      <<<f_make_list_1686@104:2>@110:1>@140:0>:int,<<<<f_make_list_1686@104:2>@110:1>@140:1>@151:0>:int)
      
      P[<cons_make_list_1113@106:3>](<cons_make_list_1113@106:0>:int,<cons_make_list_1113@106:1>:int,<cons_make_list_1113@106:2>:int,<cons_make_list_1113@106:3>:int),
      P[<<f_cons_make_list_1685@144:6>@147:0>](<cons_make_list_1113@106:0>:int,<cons_make_list_1113@106:1>:int,<cons_make_list_1113@106:2>:int,<cons_make_list_1113@106:3>:int,<<<cons_make_list_1113@106:5>@108:1>@142:0>:int,<<<<cons_make_list_1113@106:5>@108:1>@142:1>@149:0>:int),
      P[<<cons_make_list_1113@106:5>@108:0>](<cons_make_list_1113@106:0>:int,<cons_make_list_1113@106:1>:int,<cons_make_list_1113@106:2>:int,<cons_make_list_1113@106:3>:int,<<cons_make_list_1113@106:5>@108:0>:int),
      (<<cons_make_list_1113@106:5>@108:0> = (1 + <cons_make_list_1113@106:3>))
      |- P[<<<<cons_make_list_1113@106:5>@108:1>@142:1>@149:0>](<cons_make_list_1113@106:0>:int,
                                                                <cons_make_list_1113@106:1>:int,
                                                                <cons_make_list_1113@106:2>:int,
                                                                <cons_make_list_1113@106:3>:int,
                                                                <<cons_make_list_1113@106:5>@108:0>:int,
                                                                <<<cons_make_list_1113@106:5>@108:1>@142:0>:int,
                                                                <<<<cons_make_list_1113@106:5>@108:1>@142:1>@149:0>:int)
      
      P[<f_cons_make_list_1685@144:5>](<f_cons_make_list_1685@144:0>:int,<f_cons_make_list_1685@144:1>:int,<f_cons_make_list_1685@144:2>:int,<f_cons_make_list_1685@144:3>:int,<f_cons_make_list_1685@144:5>:int),
      ((<f_cons_make_list_1685@144:5> = 0) && (<<f_cons_make_list_1685@144:6>@147:0> = <f_cons_make_list_1685@144:2>))
      |- P[<<f_cons_make_list_1685@144:6>@147:0>](<f_cons_make_list_1685@144:0>:int,
                                                  <f_cons_make_list_1685@144:1>:int,
                                                  <f_cons_make_list_1685@144:2>:int,
                                                  <f_cons_make_list_1685@144:3>:int,
                                                  <f_cons_make_list_1685@144:5>:int,
                                                  <<f_cons_make_list_1685@144:6>@147:0>:int)
      
      P[<cons_make_list_1113@106:3>](<f_cons_make_list_1685@144:0>:int,<f_cons_make_list_1685@144:1>:int,<f_cons_make_list_1685@144:2>:int,<f_cons_make_list_1685@144:3>:int),
      P[<<<cons_make_list_1113@106:5>@108:1>@142:0>](<f_cons_make_list_1685@144:0>:int,<f_cons_make_list_1685@144:1>:int,<f_cons_make_list_1685@144:2>:int,<f_cons_make_list_1685@144:3>:int,(
                                                     1 + <f_cons_make_list_1685@144:3>):int,<f_cons_make_list_1685@144:5>:int)|- P[<f_cons_make_list_1685@144:5>](
      <f_cons_make_list_1685@144:0>:int,<f_cons_make_list_1685@144:1>:int,
      <f_cons_make_list_1685@144:2>:int,<f_cons_make_list_1685@144:3>:int,
      <f_cons_make_list_1685@144:5>:int)
      
      P[<f_make_list_1686@104:3>](<cons_make_list_1113@106:0>:int,<cons_make_list_1113@106:1>:int,<cons_make_list_1113@106:3>:int),
      P[<<<f_make_list_1686@104:2>@110:1>@140:0>](<cons_make_list_1113@106:0>:int,<cons_make_list_1113@106:1>:int,<<cons_make_list_1113@106:5>@108:0>:int,<<<cons_make_list_1113@106:5>@108:1>@142:0>:int),
      P[<cons_make_list_1113@106:3>](<cons_make_list_1113@106:0>:int,<cons_make_list_1113@106:1>:int,<cons_make_list_1113@106:2>:int,<cons_make_list_1113@106:3>:int),
      (<cons_make_list_1113@106:1> = <cons_make_list_1113@106:2>)
      |- P[<<<cons_make_list_1113@106:5>@108:1>@142:0>](<cons_make_list_1113@106:0>:int,
                                                        <cons_make_list_1113@106:1>:int,
                                                        <cons_make_list_1113@106:2>:int,
                                                        <cons_make_list_1113@106:3>:int,
                                                        <<cons_make_list_1113@106:5>@108:0>:int,
                                                        <<<cons_make_list_1113@106:5>@108:1>@142:0>:int)
      
      P[<make_list_1035@96:1>](<f_make_list_1686@104:0>:int,<f_make_list_1686@104:1>:int),
      P[<<<make_list_1035@96:2>@112:1>@138:0>](<f_make_list_1686@104:0>:int,<f_make_list_1686@104:1>:int,<<f_make_list_1686@104:2>@110:0>:int,<<<f_make_list_1686@104:2>@110:1>@140:0>:int),
      (<f_make_list_1686@104:0> >= 0)
      |- P[<<<f_make_list_1686@104:2>@110:1>@140:0>](<f_make_list_1686@104:0>:int,
                                                     <f_make_list_1686@104:1>:int,
                                                     <<f_make_list_1686@104:2>@110:0>:int,
                                                     <<<f_make_list_1686@104:2>@110:1>@140:0>:int)
      
      P[<main_1040@94:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
      P[<<f_main_1687@114:4>@136:0>](<make_list_1035@96:1>:int,<make_list_1035@96:0>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
      P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)|- P[<<<make_list_1035@96:2>@112:1>@138:0>](
      <make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,
      <<<make_list_1035@96:2>@112:1>@138:0>:int)
      
      P[<f_main_1687@114:3>](<f_main_1687@114:0>:int,<f_main_1687@114:1>:int,<f_main_1687@114:3>:int),
      P[<<f_main_1688@121:4>@134:0>](<f_main_1687@114:0>:int,<f_main_1687@114:1>:int,<f_main_1687@114:3>:int,<<f_main_1687@114:4>@136:0>:int)|- P[<<f_main_1687@114:4>@136:0>](
      <f_main_1687@114:0>:int,<f_main_1687@114:1>:int,<f_main_1687@114:3>:int,
      <<f_main_1687@114:4>@136:0>:int)
      
      P[<f_main_1688@121:5>](<f_main_1688@121:0>:int,<f_main_1688@121:1>:int,<f_main_1688@121:2>:int,false:bool),
      P[<<mem_1030@124:2>@132:0>](<f_main_1688@121:0>:int,<f_main_1688@121:2>:int,<<f_main_1688@121:4>@134:0>:int)|- P[<<f_main_1688@121:4>@134:0>](
      <f_main_1688@121:0>:int,<f_main_1688@121:1>:int,<f_main_1688@121:2>:int,
      <<f_main_1688@121:4>@134:0>:int)
      
      P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
      P[<<br_mem_1692@127:3>@130:0>]((1 <= <mem_1030@124:1>):bool,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int),
      (<mem_1030@124:1> <> 0)
      |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                     <<mem_1030@124:2>@132:0>:int)
      
      P[<br_mem_1692@127:2>](<br_mem_1692@127:0>:bool,<br_mem_1692@127:1>:int,<br_mem_1692@127:2>:int),
      ((<<br_mem_1692@127:3>@130:0> = 0) && <br_mem_1692@127:0>)
      |- P[<<br_mem_1692@127:3>@130:0>](<br_mem_1692@127:0>:bool,<br_mem_1692@127:1>:int,
                                        <br_mem_1692@127:2>:int,<<br_mem_1692@127:3>@130:0>:int)
      
      P[<mem_1030@124:1>](<br_mem_1692@127:1>:int,<br_mem_1692@127:2>:int),
      ((<br_mem_1692@127:2> <> 0) && (<br_mem_1692@127:0> = (1 <= <br_mem_1692@127:2>)))
      |- P[<br_mem_1692@127:2>](<br_mem_1692@127:0>:bool,<br_mem_1692@127:1>:int,
                                <br_mem_1692@127:2>:int)
      
      P[<f_main_1688@121:5>](<mem_1030@124:0>:int,<f_main_1688@121:1>:int,<mem_1030@124:1>:int,false:bool)|- P[<mem_1030@124:1>](
      <mem_1030@124:0>:int,<mem_1030@124:1>:int)
      
      P[<f_main_1687@114:3>](<f_main_1688@121:0>:int,<f_main_1688@121:1>:int,<f_main_1688@121:2>:int),
      P[<<is_nil_1038@116:2>@119:0>](<f_main_1688@121:2>:int,<f_main_1688@121:5>:bool)|- P[<f_main_1688@121:5>](
      <f_main_1688@121:0>:int,<f_main_1688@121:1>:int,<f_main_1688@121:2>:int,
      <f_main_1688@121:5>:bool)
      
      P[<is_nil_1038@116:0>](<is_nil_1038@116:0>:int),
      ((<is_nil_1038@116:0> <> 0) && (not <<is_nil_1038@116:2>@119:0>))
      |- P[<<is_nil_1038@116:2>@119:0>](<is_nil_1038@116:0>:int,<<is_nil_1038@116:2>@119:0>:bool)
      
      P[<f_main_1687@114:3>](<f_main_1687@114:0>:int,<f_main_1687@114:1>:int,<is_nil_1038@116:0>:int)|- P[<is_nil_1038@116:0>](
      <is_nil_1038@116:0>:int)
      
      P[<main_1040@94:1>](<f_main_1687@114:1>:int,<f_main_1687@114:0>:int),
      P[<<make_list_1035@96:2>@112:0>](<f_main_1687@114:1>:int,<f_main_1687@114:0>:int,<f_main_1687@114:3>:int)|- P[<f_main_1687@114:3>](
      <f_main_1687@114:0>:int,<f_main_1687@114:1>:int,<f_main_1687@114:3>:int)
      
      P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
      P[<<f_make_list_1686@104:2>@110:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
      (<make_list_1035@96:0> >= 0)
      |- P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,
                                          <<make_list_1035@96:2>@112:0>:int)
      
      P[<f_make_list_1686@104:3>](<f_make_list_1686@104:0>:int,<f_make_list_1686@104:1>:int,<cons_make_list_1113@106:3>:int),
      P[<<cons_make_list_1113@106:5>@108:0>](<f_make_list_1686@104:0>:int,<f_make_list_1686@104:1>:int,<f_make_list_1686@104:1>:int,<cons_make_list_1113@106:3>:int,<<f_make_list_1686@104:2>@110:0>:int)|- P[<<f_make_list_1686@104:2>@110:0>](
      <f_make_list_1686@104:0>:int,<f_make_list_1686@104:1>:int,<<f_make_list_1686@104:2>@110:0>:int)
      
      P[<cons_make_list_1113@106:3>](<cons_make_list_1113@106:0>:int,<cons_make_list_1113@106:1>:int,<cons_make_list_1113@106:2>:int,<cons_make_list_1113@106:3>:int),
      (<<cons_make_list_1113@106:5>@108:0> = (1 + <cons_make_list_1113@106:3>))
      |- P[<<cons_make_list_1113@106:5>@108:0>](<cons_make_list_1113@106:0>:int,
                                                <cons_make_list_1113@106:1>:int,
                                                <cons_make_list_1113@106:2>:int,
                                                <cons_make_list_1113@106:3>:int,
                                                <<cons_make_list_1113@106:5>@108:0>:int)
      
      P[<f_make_list_1686@104:3>](<cons_make_list_1113@106:0>:int,<cons_make_list_1113@106:1>:int,<cons_make_list_1113@106:3>:int),
      (<cons_make_list_1113@106:1> = <cons_make_list_1113@106:2>)
      |- P[<cons_make_list_1113@106:3>](<cons_make_list_1113@106:0>:int,
                                        <cons_make_list_1113@106:1>:int,
                                        <cons_make_list_1113@106:2>:int,
                                        <cons_make_list_1113@106:3>:int)
      
      P[<make_list_1035@96:1>](<f_make_list_1686@104:0>:int,<f_make_list_1686@104:1>:int),
      P[<<make_list_1035@99:2>@102:0>]((-1 + <f_make_list_1686@104:0>):int,<f_make_list_1686@104:1>:int,<f_make_list_1686@104:3>:int),
      (<f_make_list_1686@104:0> >= 0)
      |- P[<f_make_list_1686@104:3>](<f_make_list_1686@104:0>:int,<f_make_list_1686@104:1>:int,
                                     <f_make_list_1686@104:3>:int)
      
      P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int),
      ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> < 0))
      |- P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,
                                          <<make_list_1035@99:2>@102:0>:int)
      
      P[<make_list_1035@96:1>]((1 + <make_list_1035@99:0>):int,<make_list_1035@99:1>:int),
      ((1 + <make_list_1035@99:0>) >= 0)
      |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
      
      P[<main_1040@94:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)|- P[<make_list_1035@96:1>](
      <make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
      
      P[<f_1690@92:1>](<main_1040@94:0>:int,<main_1040@94:1>:int)|- P[<main_1040@94:1>](
      <main_1040@94:0>:int,<main_1040@94:1>:int)
      
      P[<f_1689@89:0>](<f_1690@92:0>:int)|- P[<f_1690@92:1>](<f_1690@92:0>:int,
                                                             <f_1690@92:1>:int)
      
      |- P[<f_1689@89:0>](<f_1689@89:0>:int)
    call trees:
      <main_1681@86>
        <f_1689@89>
          <f_1690@92>
            <main_1040@94>
              <make_list_1035@96>
                <make_list_1035@99>
                </<make_list_1035@99:2>@102>
                <f_make_list_1686@104>
                  <cons_make_list_1113@106>
                  </<cons_make_list_1113@106:5>@108>
                </<f_make_list_1686@104:2>@110>
              </<make_list_1035@96:2>@112>
              <f_main_1687@114>
                <is_nil_1038@116>
                </<is_nil_1038@116:2>@119>
                <f_main_1688@121>
                  <mem_1030@124>
                    <br_mem_1692@127>
                    </<br_mem_1692@127:3>@130>
                  </<mem_1030@124:2>@132>
                </<f_main_1688@121:4>@134>
              </<f_main_1687@114:4>@136>
              <<<make_list_1035@96:2>@112:1>@138>
                <<<f_make_list_1686@104:2>@110:1>@140>
                  <<<cons_make_list_1113@106:5>@108:1>@142>
                    <f_cons_make_list_1685@144>
                    </<f_cons_make_list_1685@144:6>@147>
                  </<<<cons_make_list_1113@106:5>@108:1>@142:1>@149>
                </<<<f_make_list_1686@104:2>@110:1>@140:1>@151>
              </<<<make_list_1035@96:2>@112:1>@138:1>@153>
              <<<f_main_1687@114:4>@136:1>@155>
                <<<f_main_1688@121:4>@134:1>@157>
                  <<<mem_1030@124:2>@132:1>@159>
                    <<<br_mem_1692@127:3>@130:1>@161>
                      <f_mem_1682@163>
                        <mem_1030@166>
                        </<mem_1030@166:3>@169>
                      </<f_mem_1682@163:2>@171>
                    </<br_mem_1692@127:4>@173>
                  </<mem_1030@124:3>@175>
                  <k_main_1588@177>
                    <fail_1694@180>
    inlined horn clauses:
      P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
      
      P[<<make_list_1035@96:2>@112:0>](<k_main_1588@177:1>:int,<k_main_1588@177:0>:int,<k_main_1588@177:2>:int),
      P[<<mem_1030@124:3>@175:0>](<k_main_1588@177:0>:int,<k_main_1588@177:2>:int,false:bool),
      ((<k_main_1588@177:2> <> 0) && <fail_1694@180:0>) |- P[<fail_1694@180:0>](
      <fail_1694@180:0>:bool)
      
      P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,0:int,var338:int),
      P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
      P[<<mem_1030@166:3>@169:0>](<mem_1030@124:0>:int,(-1 + <mem_1030@124:1>):int,<<mem_1030@124:3>@175:0>:bool),
      ((<mem_1030@124:1> >= 1) && (<mem_1030@124:0> <> var338))
      |- P[<<mem_1030@124:3>@175:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                     <<mem_1030@124:3>@175:0>:bool)
      
      P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int),
      ((<mem_1030@166:1> = 0) && (not <<mem_1030@166:3>@169:0>))
      |- P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,
                                     <<mem_1030@166:3>@169:0>:bool)
      
      P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
      P[<mem_1030@124:1>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int),
      ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
      |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
      
      P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
      P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
      P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int), (
      <mem_1030@124:1> <> 0)
      |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                             <<mem_1030@124:2>@132:0>:int,
                                             <<<mem_1030@124:2>@132:1>@159:0>:int)
      
      P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
      P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
      P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                       -1 + <<make_list_1035@96:2>@112:0>):int),
      P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
      ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
       ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
      |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                          <make_list_1035@96:1>:int,
                                                          <<make_list_1035@96:2>@112:0>:int,
                                                          <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                          <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
      
      P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
      P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
      P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
      (<<make_list_1035@96:2>@112:0> <> 0)
      |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                  <make_list_1035@96:1>:int,
                                                  <<make_list_1035@96:2>@112:0>:int,
                                                  <<<make_list_1035@96:2>@112:1>@138:0>:int)
      
      P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
      ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
      |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                     <<mem_1030@124:2>@132:0>:int)
      
      P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
      (<mem_1030@124:1> <> 0) |- P[<mem_1030@124:1>](<mem_1030@124:0>:int,
                                                     <mem_1030@124:1>:int)
      
      P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
      P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                       -1 + <<make_list_1035@96:2>@112:0>):int), (
      <make_list_1035@96:0> >= 0)
      |- P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,
                                          <<make_list_1035@96:2>@112:0>:int)
      
      P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int),
      ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> < 0))
      |- P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,
                                          <<make_list_1035@99:2>@102:0>:int)
      
      P[<make_list_1035@96:1>]((1 + <make_list_1035@99:0>):int,<make_list_1035@99:1>:int),
      ((1 + <make_list_1035@99:0>) >= 0)
      |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
      
      |- P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
    begin ParamSubstInfer.infer(38064)[3]
      
    end ParamSubstInfer.infer(38064)[3] (0.057991 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(38066)[3]
      
    end RefTypeInfer.elim_coeffs(38066)[3] (0.003999 sec.)
    begin GenHcSolver.solve(38705)[3]
      Horn clauses:
        P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
        
        P[<<make_list_1035@96:2>@112:0>](<k_main_1588@177:1>:int,<k_main_1588@177:0>:int,<k_main_1588@177:2>:int),
        P[<<mem_1030@124:3>@175:0>](<k_main_1588@177:0>:int,<k_main_1588@177:2>:int,false:bool),
        ((<k_main_1588@177:2> <> 0) && <fail_1694@180:0>) |- P[<fail_1694@180:0>](
        <fail_1694@180:0>:bool)
        
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,0:int,var338:int),
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        P[<<mem_1030@166:3>@169:0>](<mem_1030@124:0>:int,(-1 + <mem_1030@124:1>):int,<<mem_1030@124:3>@175:0>:bool),
        ((<mem_1030@124:1> >= 1) && (<mem_1030@124:0> <> var338))
        |- P[<<mem_1030@124:3>@175:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:3>@175:0>:bool)
        
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int),
        ((<mem_1030@166:1> = 0) && (not <<mem_1030@166:3>@169:0>))
        |- P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,
                                       <<mem_1030@166:3>@169:0>:bool)
        
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
        P[<mem_1030@124:1>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int),
        ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
        |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
        
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int), (
        <mem_1030@124:1> <> 0)
        |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                               <<mem_1030@124:2>@132:0>:int,
                                               <<<mem_1030@124:2>@132:1>@159:0>:int)
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                         -1 + <<make_list_1035@96:2>@112:0>):int),
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
        
        P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        (<mem_1030@124:1> <> 0) |- P[<mem_1030@124:1>](<mem_1030@124:0>:int,
                                                       <mem_1030@124:1>:int)
        
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                         -1 + <<make_list_1035@96:2>@112:0>):int), (
        <make_list_1035@96:0> >= 0)
        |- P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,
                                            <make_list_1035@96:1>:int,
                                            <<make_list_1035@96:2>@112:0>:int)
        
        P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int),
        ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> < 0))
        |- P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,
                                            <make_list_1035@99:1>:int,
                                            <<make_list_1035@99:2>@102:0>:int)
        
        P[<make_list_1035@96:1>]((1 + <make_list_1035@99:0>):int,<make_list_1035@99:1>:int),
        ((1 + <make_list_1035@99:0>) >= 0)
        |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
        
        |- P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
      lower bounds:
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
        P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int) =
        ((1 + <make_list_1035@99:0>) >= 0)
        P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,<<make_list_1035@99:2>@102:0>:int) =
        ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> = -1))
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int) =
        ((<make_list_1035@96:0> = 0) && (<<make_list_1035@96:2>@112:0> = 1))
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int) = (<mem_1030@124:1> = 1)
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> = 1))
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<make_list_1035@96:2>@112:0> = 1) &&
         ((<make_list_1035@96:0> = 0) && (<<<make_list_1035@96:2>@112:1>@138:0> = 0)))
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<make_list_1035@96:0> = 0) &&
         ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
          ((<<make_list_1035@96:2>@112:0> = 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) &&
         ((<mem_1030@124:1> = 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
        P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,<<mem_1030@166:3>@169:0>:bool) = false
        P[<<mem_1030@124:3>@175:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:3>@175:0>:bool) = false
        P[<fail_1694@180:0>](<fail_1694@180:0>:bool) = false
      upper bounds:
        P[<<mem_1030@124:3>@175:0>](var348:int,var349:int,var350:bool) = true
        P[<<mem_1030@166:3>@169:0>](var341:int,var342:int,var343:bool) = true
      begin GenHcSolver.classify_pids(45399)[4]
        output:
          [<<mem_1030@166:3>@169:0>;<<mem_1030@124:3>@175:0>]
      end GenHcSolver.classify_pids(45399)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(45410)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(45411)[5]
          begin InterpProver.interpolate_fresh(45412)[6]
            begin InterpProver.interpolate_log(45413)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(45414)[8]
                begin InterpProver.interpolate_simplify(45415)[9]
                  begin InterpProver.interpolate_quick(45428)[10]
                    
                  end InterpProver.interpolate_quick(45428)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(45432)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(45432)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(45415)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(45414)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(45413)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(45412)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(45411)[5] (0.000000 sec.)
        output:
          P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,<<mem_1030@166:3>@169:0>:bool) = false
          P[<<mem_1030@124:3>@175:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,<<mem_1030@166:3>@169:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(45410)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
        
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,0:int)|- bot
        
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
        P[<mem_1030@124:1>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int),
        ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
        |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
        
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int), (
        <mem_1030@124:1> <> 0)
        |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                               <<mem_1030@124:2>@132:0>:int,
                                               <<<mem_1030@124:2>@132:1>@159:0>:int)
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                         -1 + <<make_list_1035@96:2>@112:0>):int),
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
        
        P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        (<mem_1030@124:1> <> 0) |- P[<mem_1030@124:1>](<mem_1030@124:0>:int,
                                                       <mem_1030@124:1>:int)
        
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                         -1 + <<make_list_1035@96:2>@112:0>):int), (
        <make_list_1035@96:0> >= 0)
        |- P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,
                                            <make_list_1035@96:1>:int,
                                            <<make_list_1035@96:2>@112:0>:int)
        
        P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int),
        ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> < 0))
        |- P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,
                                            <make_list_1035@99:1>:int,
                                            <<make_list_1035@99:2>@102:0>:int)
        
        P[<make_list_1035@96:1>]((1 + <make_list_1035@99:0>):int,<make_list_1035@99:1>:int),
        ((1 + <make_list_1035@99:0>) >= 0)
        |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
        
        |- P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
      lower bounds:
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
        P[<fail_1694@180:0>](var354:bool) = false
        P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int) =
        ((1 + <make_list_1035@99:0>) >= 0)
        P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,<<make_list_1035@99:2>@102:0>:int) =
        ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> = -1))
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int) =
        ((<make_list_1035@96:0> = 0) && (<<make_list_1035@96:2>@112:0> = 1))
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int) = (<mem_1030@124:1> = 1)
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> = 1))
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<make_list_1035@96:2>@112:0> = 1) &&
         ((<make_list_1035@96:0> = 0) && (<<<make_list_1035@96:2>@112:1>@138:0> = 0)))
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<make_list_1035@96:0> = 0) &&
         ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
          ((<<make_list_1035@96:2>@112:0> = 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) &&
         ((<mem_1030@124:1> = 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
      upper bounds:
        P[<mem_1030@166:1>](var363:int,var364:int) = true
        P[<mem_1030@124:1>](var357:int,var358:int) = true
      begin GenHcSolver.classify_pids(54426)[4]
        output:
          [<mem_1030@124:1>;<mem_1030@166:1>]
      end GenHcSolver.classify_pids(54426)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(54437)[4]
        lb:(<mem_1030@124:1> = 1)
        nub:false
        lb':(<mem_1030@124:1> = 1)
        nub':false
        begin InterpProver.interpolate(54438)[5]
          begin InterpProver.interpolate_fresh(54439)[6]
            begin InterpProver.interpolate_log(54440)[7]
              input1: (<mem_1030@124:1> = 1)
              input2: false
              begin InterpProver.interpolate_check(54441)[8]
                begin InterpProver.interpolate_simplify(54442)[9]
                  begin InterpProver.interpolate_quick(54463)[10]
                    
                  end InterpProver.interpolate_quick(54463)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(54442)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(54441)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(54440)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(54439)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(54438)[5] (0.000000 sec.)
        output:
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int) = true
          P[<mem_1030@166:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int) = true
      end ApronInterface.convex_hull_interpolate(54437)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
        
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,0:int)|- bot
        
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
        ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
        |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
        
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        (<mem_1030@124:1> <> 0)
        |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                               <<mem_1030@124:2>@132:0>:int,
                                               <<<mem_1030@124:2>@132:1>@159:0>:int)
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                         -1 + <<make_list_1035@96:2>@112:0>):int),
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
        
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                         -1 + <<make_list_1035@96:2>@112:0>):int), (
        <make_list_1035@96:0> >= 0)
        |- P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,
                                            <make_list_1035@96:1>:int,
                                            <<make_list_1035@96:2>@112:0>:int)
        
        P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int),
        ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> < 0))
        |- P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,
                                            <make_list_1035@99:1>:int,
                                            <<make_list_1035@99:2>@102:0>:int)
        
        P[<make_list_1035@96:1>]((1 + <make_list_1035@99:0>):int,<make_list_1035@99:1>:int),
        ((1 + <make_list_1035@99:0>) >= 0)
        |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
        
        |- P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
        P[<fail_1694@180:0>](var368:bool) = false
        P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int) =
        ((1 + <make_list_1035@99:0>) >= 0)
        P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,<<make_list_1035@99:2>@102:0>:int) =
        ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> = -1))
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int) =
        ((<make_list_1035@96:0> = 0) && (<<make_list_1035@96:2>@112:0> = 1))
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<make_list_1035@96:2>@112:0> = 1) &&
         ((<make_list_1035@96:0> = 0) && (<<<make_list_1035@96:2>@112:1>@138:0> = 0)))
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<make_list_1035@96:0> = 0) &&
         ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
          ((<<make_list_1035@96:2>@112:0> = 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) &&
         ((<mem_1030@124:1> = 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
      upper bounds:
        P[<<make_list_1035@96:2>@112:0>](var378:int,var379:int,var380:int) = true
        P[<<make_list_1035@99:2>@102:0>](var373:int,var374:int,var375:int) = true
      begin GenHcSolver.classify_pids(62872)[4]
        output:
          [<<make_list_1035@99:2>@102:0>;<<make_list_1035@96:2>@112:0>]
      end GenHcSolver.classify_pids(62872)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(62883)[4]
        lb:(((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> = -1)) ||
            ((<make_list_1035@99:0> = 0) && (<<make_list_1035@99:2>@102:0> = 1)))
        nub:false
        lb':(((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> = -1)) ||
             ((<make_list_1035@99:0> = 0) && (<<make_list_1035@99:2>@102:0> = 1)))
        nub':false
        begin InterpProver.interpolate(62884)[5]
          begin InterpProver.interpolate_fresh(62885)[6]
            begin InterpProver.interpolate_log(62886)[7]
              input1: (((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> = -1)) ||
                       ((<make_list_1035@99:0> = 0) && (<<make_list_1035@99:2>@102:0> = 1)))
              input2: false
              begin InterpProver.interpolate_check(62887)[8]
                begin InterpProver.interpolate_simplify(62888)[9]
                  begin InterpProver.interpolate_quick(62931)[10]
                    
                  end InterpProver.interpolate_quick(62931)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(62888)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(62887)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(62886)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(62885)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(62884)[5] (0.000000 sec.)
        output:
          P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,<<make_list_1035@99:2>@102:0>:int) =
          true
          P[<<make_list_1035@96:2>@112:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,<<make_list_1035@99:2>@102:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(62883)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
        
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,0:int)|- bot
        
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
        ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
        |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
        
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        (<mem_1030@124:1> <> 0)
        |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                               <<mem_1030@124:2>@132:0>:int,
                                               <<<mem_1030@124:2>@132:1>@159:0>:int)
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
        
        P[<make_list_1035@96:1>]((1 + <make_list_1035@99:0>):int,<make_list_1035@99:1>:int),
        ((1 + <make_list_1035@99:0>) >= 0)
        |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
        
        |- P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
        P[<fail_1694@180:0>](var384:bool) = false
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
        P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int) =
        ((1 + <make_list_1035@99:0>) >= 0)
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) &&
          ((<<make_list_1035@96:2>@112:0> >= 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) &&
         ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
      upper bounds:
        P[<make_list_1035@99:1>](var393:int,var394:int) = true
        P[<make_list_1035@96:1>](var389:int,var390:int) = true
      begin GenHcSolver.classify_pids(70177)[4]
        output:
          [<make_list_1035@96:1>;<make_list_1035@99:1>]
      end GenHcSolver.classify_pids(70177)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(70188)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(70189)[5]
          begin InterpProver.interpolate_fresh(70190)[6]
            begin InterpProver.interpolate_log(70191)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(70192)[8]
                begin InterpProver.interpolate_simplify(70193)[9]
                  begin InterpProver.interpolate_quick(70206)[10]
                    
                  end InterpProver.interpolate_quick(70206)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(70193)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(70192)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(70191)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(70190)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(70189)[5] (0.000000 sec.)
        output:
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
          P[<make_list_1035@99:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
      end ApronInterface.convex_hull_interpolate(70188)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
        
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,0:int)|- bot
        
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
        ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
        |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
        
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        (<mem_1030@124:1> <> 0)
        |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                               <<mem_1030@124:2>@132:0>:int,
                                               <<<mem_1030@124:2>@132:1>@159:0>:int)
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        P[<fail_1694@180:0>](var398:bool) = false
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) &&
          ((<<make_list_1035@96:2>@112:0> >= 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) &&
         ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
      upper bounds:
        P[<fail_1694@180:0>](var401:bool) = true
      begin GenHcSolver.classify_pids(75111)[4]
        output:
          [<fail_1694@180:0>]
      end GenHcSolver.classify_pids(75111)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(75114)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(75115)[5]
          begin InterpProver.interpolate_fresh(75116)[6]
            begin InterpProver.interpolate_log(75117)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(75118)[8]
                begin InterpProver.interpolate_simplify(75119)[9]
                  begin InterpProver.interpolate_quick(75132)[10]
                    
                  end InterpProver.interpolate_quick(75132)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(75136)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(75136)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(75119)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(75118)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(75117)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(75116)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(75115)[5] (0.000000 sec.)
        output:
          P[<fail_1694@180:0>](var398:bool) = false
      end ApronInterface.convex_hull_interpolate(75114)[4] (0.000000 sec.)
      Horn clauses:
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,0:int)|- bot
        
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
        ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
        |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
        
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        (<mem_1030@124:1> <> 0)
        |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                               <<mem_1030@124:2>@132:0>:int,
                                               <<<mem_1030@124:2>@132:1>@159:0>:int)
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) &&
          ((<<make_list_1035@96:2>@112:0> >= 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) &&
         ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
      upper bounds:
        P[<mem_1030@166:1>](var404:int,var405:int) = true
      begin GenHcSolver.classify_pids(78184)[4]
        output:
          [<mem_1030@166:1>]
      end GenHcSolver.classify_pids(78184)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(78187)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(78188)[5]
          begin InterpProver.interpolate_fresh(78189)[6]
            begin InterpProver.interpolate_log(78190)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(78191)[8]
                begin InterpProver.interpolate_simplify(78192)[9]
                  begin InterpProver.interpolate_quick(78205)[10]
                    
                  end InterpProver.interpolate_quick(78205)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(78209)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(78209)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(78192)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(78191)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(78190)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(78189)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(78188)[5] (0.000000 sec.)
        output:
          P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
      end ApronInterface.convex_hull_interpolate(78187)[4] (0.001000 sec.)
      Horn clauses:
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
        ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0)) |- bot
        
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        (<mem_1030@124:1> <> 0)
        |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                               <<mem_1030@124:2>@132:0>:int,
                                               <<<mem_1030@124:2>@132:1>@159:0>:int)
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) &&
          ((<<make_list_1035@96:2>@112:0> >= 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) &&
         ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
      upper bounds:
        P[<<<mem_1030@124:2>@132:1>@159:0>](var406:int,var407:int,var408:int,var409:int) =
        ((var408 <> 0) || ((var407 < 1) || (var406 = var409)))
      begin GenHcSolver.classify_pids(81654)[4]
        output:
          [<<<mem_1030@124:2>@132:1>@159:0>]
      end GenHcSolver.classify_pids(81654)[4] (0.000000 sec.)
      lb:((<<mem_1030@124:2>@132:0> = 0) &&
          ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
      nub:(not
             ((<<mem_1030@124:2>@132:0> <> 0) ||
              ((<mem_1030@124:1> < 1) || (<mem_1030@124:0> = <<<mem_1030@124:2>@132:1>@159:0>))))
      begin ApronInterface.convex_hull_interpolate(81657)[4]
        lb:((<<mem_1030@124:2>@132:0> = 0) &&
            ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        nub:(not
               ((<<mem_1030@124:2>@132:0> <> 0) ||
                ((<mem_1030@124:1> < 1) || (<mem_1030@124:0> = <<<mem_1030@124:2>@132:1>@159:0>))))
        lb':((<<mem_1030@124:2>@132:0> = 0) &&
             ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        nub':(not
                ((<<mem_1030@124:2>@132:0> <> 0) ||
                 ((<mem_1030@124:1> < 1) || (<mem_1030@124:0> = <<<mem_1030@124:2>@132:1>@159:0>))))
        begin InterpProver.interpolate(81658)[5]
          begin InterpProver.interpolate_fresh(81659)[6]
            begin InterpProver.interpolate_log(81660)[7]
              input1: ((<<mem_1030@124:2>@132:0> = 0) &&
                       ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
              input2: (not
                         ((<<mem_1030@124:2>@132:0> <> 0) ||
                          ((<mem_1030@124:1> < 1) || (<mem_1030@124:0> = <<<mem_1030@124:2>@132:1>@159:0>))))
              begin InterpProver.interpolate_check(81661)[8]
                begin InterpProver.interpolate_simplify(81662)[9]
                  begin InterpProver.interpolate_quick(81787)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(81796)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(81797)[12]
                        begin CsisatInterface.interpolate_csisat_log(81798)[13]
                          input1: (0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0 & v_sep_mem_1030_sep_124_sep_0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0 & 1 <= v_sep_mem_1030_sep_124_sep_1)
                          input2: (not v_sep_mem_1030_sep_124_sep_0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0 & 0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0 & 1 <= v_sep_mem_1030_sep_124_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(81799)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(81799)[14] (0.000000 sec.)
                          output: v_sep_mem_1030_sep_124_sep_0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(81798)[13] (0.000000 sec.)
                        after simplification: v_sep_mem_1030_sep_124_sep_0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0
                        after dnf conversion: ((v_sep_mem_1030_sep_124_sep_0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(81797)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(81796)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(81787)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(81662)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(81661)[8] (0.001000 sec.)
              output: (<mem_1030@124:0> = <<<mem_1030@124:2>@132:1>@159:0>)
            end InterpProver.interpolate_log(81660)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(81659)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(81658)[5] (0.001000 sec.)
        output:
          P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
          (<mem_1030@124:0> = <<<mem_1030@124:2>@132:1>@159:0>)
      end ApronInterface.convex_hull_interpolate(81657)[4] (0.001000 sec.)
      Horn clauses:
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        ((<mem_1030@124:1> <> 0) && (<mem_1030@124:0> <> <<<mem_1030@124:2>@132:1>@159:0>)) |- bot
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) &&
          ((<<make_list_1035@96:2>@112:0> >= 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
      upper bounds:
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](var410:int,var411:int,var412:int,var413:int,var414:int) =
        ((var412 = 0) || (var411 = var414))
      begin GenHcSolver.classify_pids(84403)[4]
        output:
          [<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>]
      end GenHcSolver.classify_pids(84403)[4] (0.000000 sec.)
      lb:((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
          ((<make_list_1035@96:0> >= 0) &&
           ((<<make_list_1035@96:2>@112:0> >= 1) &&
            (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
      nub:(not
             ((<<make_list_1035@96:2>@112:0> = 0) ||
              (<make_list_1035@96:1> = <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>)))
      begin ApronInterface.convex_hull_interpolate(84406)[4]
        lb:((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
            ((<make_list_1035@96:0> >= 0) &&
             ((<<make_list_1035@96:2>@112:0> >= 1) &&
              (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        nub:(not
               ((<<make_list_1035@96:2>@112:0> = 0) ||
                (<make_list_1035@96:1> = <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>)))
        lb':((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
             ((<make_list_1035@96:0> >= 0) &&
              ((<<make_list_1035@96:2>@112:0> >= 1) &&
               (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        nub':(not
                ((<<make_list_1035@96:2>@112:0> = 0) ||
                 (<make_list_1035@96:1> = <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>)))
        begin InterpProver.interpolate(84407)[5]
          begin InterpProver.interpolate_fresh(84408)[6]
            begin InterpProver.interpolate_log(84409)[7]
              input1: ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
                       ((<make_list_1035@96:0> >= 0) &&
                        ((<<make_list_1035@96:2>@112:0> >= 1) &&
                         (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
              input2: (not
                         ((<<make_list_1035@96:2>@112:0> = 0) ||
                          (<make_list_1035@96:1> = <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>)))
              begin InterpProver.interpolate_check(84410)[8]
                begin InterpProver.interpolate_simplify(84411)[9]
                  begin InterpProver.interpolate_quick(84572)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(84581)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(84582)[12]
                        begin CsisatInterface.interpolate_csisat_log(84583)[13]
                          input1: (v_sep_make_list_1035_sep_96_sep_1 = v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0 & 0 <= v_sep_make_list_1035_sep_96_sep_0 & 1 <= v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0)
                          input2: (not 0 = v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0 & not v_sep_make_list_1035_sep_96_sep_1 = v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(84584)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(84584)[14] (0.000000 sec.)
                          output: v_sep_make_list_1035_sep_96_sep_1 = v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(84583)[13] (0.000000 sec.)
                        after simplification: v_sep_make_list_1035_sep_96_sep_1 = v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0
                        after dnf conversion: ((v_sep_make_list_1035_sep_96_sep_1 = v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(84582)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(84581)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(84572)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(84411)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(84410)[8] (0.000999 sec.)
              output: (<make_list_1035@96:1> = <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>)
            end InterpProver.interpolate_log(84409)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(84408)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(84407)[5] (0.000999 sec.)
        output:
          P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
          (<make_list_1035@96:1> = <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>)
      end ApronInterface.convex_hull_interpolate(84406)[4] (0.000999 sec.)
      Horn clauses:
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
      upper bounds:
        P[<<<make_list_1035@96:2>@112:1>@138:0>](var415:int,var416:int,var417:int,var418:int) = true
      begin GenHcSolver.classify_pids(85627)[4]
        output:
          [<<<make_list_1035@96:2>@112:1>@138:0>]
      end GenHcSolver.classify_pids(85627)[4] (0.000000 sec.)
      lb:((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(85630)[4]
        lb:((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
        nub:false
        lb':((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
        nub':false
        begin InterpProver.interpolate(85631)[5]
          begin InterpProver.interpolate_fresh(85632)[6]
            begin InterpProver.interpolate_log(85633)[7]
              input1: ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
              input2: false
              begin InterpProver.interpolate_check(85634)[8]
                begin InterpProver.interpolate_simplify(85635)[9]
                  begin InterpProver.interpolate_quick(85674)[10]
                    
                  end InterpProver.interpolate_quick(85674)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(85635)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(85634)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(85633)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(85632)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(85631)[5] (0.000000 sec.)
        output:
          P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(85630)[4] (0.000000 sec.)
      Horn clauses:
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
      upper bounds:
        P[<<mem_1030@124:2>@132:0>](var419:int,var420:int,var421:int) = true
      begin GenHcSolver.classify_pids(86204)[4]
        output:
          [<<mem_1030@124:2>@132:0>]
      end GenHcSolver.classify_pids(86204)[4] (0.000000 sec.)
      lb:((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(86207)[4]
        lb:((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        nub:false
        lb':((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        nub':false
        begin InterpProver.interpolate(86208)[5]
          begin InterpProver.interpolate_fresh(86209)[6]
            begin InterpProver.interpolate_log(86210)[7]
              input1: ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
              input2: false
              begin InterpProver.interpolate_check(86211)[8]
                begin InterpProver.interpolate_simplify(86212)[9]
                  begin InterpProver.interpolate_quick(86251)[10]
                    
                  end InterpProver.interpolate_quick(86251)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(86212)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(86211)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(86210)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(86209)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(86208)[5] (0.000000 sec.)
        output:
          P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) = true
      end ApronInterface.convex_hull_interpolate(86207)[4] (0.000000 sec.)
      begin HcSolver.check_validity(86360)[4]
        input:
          P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
          
          P[<<make_list_1035@96:2>@112:0>](<k_main_1588@177:1>:int,<k_main_1588@177:0>:int,<k_main_1588@177:2>:int),
          P[<<mem_1030@124:3>@175:0>](<k_main_1588@177:0>:int,<k_main_1588@177:2>:int,false:bool),
          ((<k_main_1588@177:2> <> 0) && <fail_1694@180:0>) |- P[<fail_1694@180:0>](
          <fail_1694@180:0>:bool)
          
          P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,0:int,var338:int),
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          P[<<mem_1030@166:3>@169:0>](<mem_1030@124:0>:int,(-1 + <mem_1030@124:1>):int,<<mem_1030@124:3>@175:0>:bool),
          ((<mem_1030@124:1> >= 1) && (<mem_1030@124:0> <> var338))
          |- P[<<mem_1030@124:3>@175:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                         <<mem_1030@124:3>@175:0>:bool)
          
          P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int),
          ((<mem_1030@166:1> = 0) && (not <<mem_1030@166:3>@169:0>))
          |- P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,
                                         <<mem_1030@166:3>@169:0>:bool)
          
          P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
          P[<mem_1030@124:1>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int),
          ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
          |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
          
          P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
          P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int), (
          <mem_1030@124:1> <> 0)
          |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,
                                                 <mem_1030@124:1>:int,
                                                 <<mem_1030@124:2>@132:0>:int,
                                                 <<<mem_1030@124:2>@132:1>@159:0>:int)
          
          P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                           -1 + <<make_list_1035@96:2>@112:0>):int),
          P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
          ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
           ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
          |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                              <make_list_1035@96:1>:int,
                                                              <<make_list_1035@96:2>@112:0>:int,
                                                              <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                              <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
          
          P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
          P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          (<<make_list_1035@96:2>@112:0> <> 0)
          |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                      <make_list_1035@96:1>:int,
                                                      <<make_list_1035@96:2>@112:0>:int,
                                                      <<<make_list_1035@96:2>@112:1>@138:0>:int)
          
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
          |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                         <<mem_1030@124:2>@132:0>:int)
          
          P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          (<mem_1030@124:1> <> 0) |- P[<mem_1030@124:1>](<mem_1030@124:0>:int,
                                                         <mem_1030@124:1>:int)
          
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                           -1 + <<make_list_1035@96:2>@112:0>):int), (
          <make_list_1035@96:0> >= 0)
          |- P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,
                                              <make_list_1035@96:1>:int,
                                              <<make_list_1035@96:2>@112:0>:int)
          
          P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int),
          ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> < 0))
          |- P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,
                                              <make_list_1035@99:1>:int,
                                              <<make_list_1035@99:2>@102:0>:int)
          
          P[<make_list_1035@96:1>]((1 + <make_list_1035@99:0>):int,<make_list_1035@99:1>:int),
          ((1 + <make_list_1035@99:0>) >= 0)
          |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
          
          |- P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(86360)[4] (0.005999 sec.)
      solution:
        P[<fail_1694@180:0>](var398:bool) = false
        P[<<mem_1030@124:3>@175:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,<<mem_1030@166:3>@169:0>:bool) = false
        P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,<<mem_1030@166:3>@169:0>:bool) = false
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        (<mem_1030@124:0> = <<<mem_1030@124:2>@132:1>@159:0>)
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        (<make_list_1035@96:1> = <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>)
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        true
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) = true
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int) = true
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,<<make_list_1035@99:2>@102:0>:int) =
        true
        P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,<<make_list_1035@99:2>@102:0>:int) =
        true
        P[<make_list_1035@99:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
    end GenHcSolver.solve(38705)[3] (0.235964 sec.)
    begin GenHcSolver.solve(87281)[3]
      Horn clauses:
        P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
        
        P[<<make_list_1035@96:2>@112:0>](<k_main_1588@177:1>:int,<k_main_1588@177:0>:int,<k_main_1588@177:2>:int),
        P[<<mem_1030@124:3>@175:0>](<k_main_1588@177:0>:int,<k_main_1588@177:2>:int,false:bool),
        ((<k_main_1588@177:2> <> 0) && <fail_1694@180:0>) |- P[<fail_1694@180:0>](
        <fail_1694@180:0>:bool)
        
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,0:int,var338:int),
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        P[<<mem_1030@166:3>@169:0>](<mem_1030@124:0>:int,(-1 + <mem_1030@124:1>):int,<<mem_1030@124:3>@175:0>:bool),
        ((<mem_1030@124:1> >= 1) && (<mem_1030@124:0> <> var338))
        |- P[<<mem_1030@124:3>@175:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:3>@175:0>:bool)
        
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int),
        ((<mem_1030@166:1> = 0) && (not <<mem_1030@166:3>@169:0>))
        |- P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,
                                       <<mem_1030@166:3>@169:0>:bool)
        
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
        P[<mem_1030@124:1>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int),
        ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
        |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
        
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int), (
        <mem_1030@124:1> <> 0)
        |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                               <<mem_1030@124:2>@132:0>:int,
                                               <<<mem_1030@124:2>@132:1>@159:0>:int)
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                         -1 + <<make_list_1035@96:2>@112:0>):int),
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
        
        P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        (<mem_1030@124:1> <> 0) |- P[<mem_1030@124:1>](<mem_1030@124:0>:int,
                                                       <mem_1030@124:1>:int)
        
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                         -1 + <<make_list_1035@96:2>@112:0>):int), (
        <make_list_1035@96:0> >= 0)
        |- P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,
                                            <make_list_1035@96:1>:int,
                                            <<make_list_1035@96:2>@112:0>:int)
        
        P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int),
        ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> < 0))
        |- P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,
                                            <make_list_1035@99:1>:int,
                                            <<make_list_1035@99:2>@102:0>:int)
        
        P[<make_list_1035@96:1>]((1 + <make_list_1035@99:0>):int,<make_list_1035@99:1>:int),
        ((1 + <make_list_1035@99:0>) >= 0)
        |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
        
        |- P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
      lower bounds:
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
        P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int) =
        ((1 + <make_list_1035@99:0>) >= 0)
        P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,<<make_list_1035@99:2>@102:0>:int) =
        ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> = -1))
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int) =
        ((<make_list_1035@96:0> = 0) && (<<make_list_1035@96:2>@112:0> = 1))
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int) = (<mem_1030@124:1> = 1)
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> = 1))
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<make_list_1035@96:2>@112:0> = 1) &&
         ((<make_list_1035@96:0> = 0) && (<<<make_list_1035@96:2>@112:1>@138:0> = 0)))
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<make_list_1035@96:0> = 0) &&
         ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
          ((<<make_list_1035@96:2>@112:0> = 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) &&
         ((<mem_1030@124:1> = 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
        P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,<<mem_1030@166:3>@169:0>:bool) = false
        P[<<mem_1030@124:3>@175:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:3>@175:0>:bool) = false
        P[<fail_1694@180:0>](<fail_1694@180:0>:bool) = false
      upper bounds:
        P[<<mem_1030@124:3>@175:0>](var431:int,var432:int,var433:bool) = true
        P[<<mem_1030@166:3>@169:0>](var424:int,var425:int,var426:bool) = true
      begin GenHcSolver.classify_pids(93975)[4]
        output:
          [<<mem_1030@166:3>@169:0>;<<mem_1030@124:3>@175:0>]
      end GenHcSolver.classify_pids(93975)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(93986)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(93989)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(93989)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(93994)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(93994)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(93997)[5]
          begin InterpProver.interpolate_fresh(93998)[6]
            begin InterpProver.interpolate_log(93999)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(94000)[8]
                begin InterpProver.interpolate_simplify(94001)[9]
                  begin InterpProver.interpolate_quick(94016)[10]
                    
                  end InterpProver.interpolate_quick(94016)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(94020)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(94020)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(94001)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(94000)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(93999)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(93998)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(93997)[5] (0.000000 sec.)
        output:
          P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,<<mem_1030@166:3>@169:0>:bool) = false
          P[<<mem_1030@124:3>@175:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,<<mem_1030@166:3>@169:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(93986)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
        
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,0:int)|- bot
        
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
        P[<mem_1030@124:1>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int),
        ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
        |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
        
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int), (
        <mem_1030@124:1> <> 0)
        |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                               <<mem_1030@124:2>@132:0>:int,
                                               <<<mem_1030@124:2>@132:1>@159:0>:int)
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                         -1 + <<make_list_1035@96:2>@112:0>):int),
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
        
        P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        (<mem_1030@124:1> <> 0) |- P[<mem_1030@124:1>](<mem_1030@124:0>:int,
                                                       <mem_1030@124:1>:int)
        
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                         -1 + <<make_list_1035@96:2>@112:0>):int), (
        <make_list_1035@96:0> >= 0)
        |- P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,
                                            <make_list_1035@96:1>:int,
                                            <<make_list_1035@96:2>@112:0>:int)
        
        P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int),
        ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> < 0))
        |- P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,
                                            <make_list_1035@99:1>:int,
                                            <<make_list_1035@99:2>@102:0>:int)
        
        P[<make_list_1035@96:1>]((1 + <make_list_1035@99:0>):int,<make_list_1035@99:1>:int),
        ((1 + <make_list_1035@99:0>) >= 0)
        |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
        
        |- P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
      lower bounds:
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
        P[<fail_1694@180:0>](var437:bool) = false
        P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int) =
        ((1 + <make_list_1035@99:0>) >= 0)
        P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,<<make_list_1035@99:2>@102:0>:int) =
        ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> = -1))
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int) =
        ((<make_list_1035@96:0> = 0) && (<<make_list_1035@96:2>@112:0> = 1))
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int) = (<mem_1030@124:1> = 1)
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> = 1))
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<make_list_1035@96:2>@112:0> = 1) &&
         ((<make_list_1035@96:0> = 0) && (<<<make_list_1035@96:2>@112:1>@138:0> = 0)))
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<make_list_1035@96:0> = 0) &&
         ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
          ((<<make_list_1035@96:2>@112:0> = 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) &&
         ((<mem_1030@124:1> = 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
      upper bounds:
        P[<mem_1030@166:1>](var446:int,var447:int) = true
        P[<mem_1030@124:1>](var440:int,var441:int) = true
      begin GenHcSolver.classify_pids(103021)[4]
        output:
          [<mem_1030@124:1>;<mem_1030@166:1>]
      end GenHcSolver.classify_pids(103021)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(103032)[4]
        lb:(<mem_1030@124:1> = 1)
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(103037)[5]
          ts: (<mem_1030@124:1> = 1)
          
        end ExtFormula.Formula.case_analysis_boolean(103037)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(103044)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(103044)[5] (0.000000 sec.)
        lb':((-1 + <mem_1030@124:1>) = 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(103047)[5]
          begin InterpProver.interpolate_fresh(103048)[6]
            begin InterpProver.interpolate_log(103049)[7]
              input1: ((-1 + <mem_1030@124:1>) = 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(103050)[8]
                begin InterpProver.interpolate_simplify(103051)[9]
                  begin InterpProver.interpolate_quick(103073)[10]
                    
                  end InterpProver.interpolate_quick(103073)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(103051)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(103050)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(103049)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(103048)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(103047)[5] (0.000000 sec.)
        output:
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int) = true
          P[<mem_1030@166:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int) = true
      end ApronInterface.convex_hull_interpolate(103032)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
        
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,0:int)|- bot
        
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
        ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
        |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
        
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
        (<mem_1030@124:1> <> 0)
        |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                               <<mem_1030@124:2>@132:0>:int,
                                               <<<mem_1030@124:2>@132:1>@159:0>:int)
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                         -1 + <<make_list_1035@96:2>@112:0>):int),
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
        
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                         -1 + <<make_list_1035@96:2>@112:0>):int), (
        <make_list_1035@96:0> >= 0)
        |- P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,
                                            <make_list_1035@96:1>:int,
                                            <<make_list_1035@96:2>@112:0>:int)
        
        P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int),
        ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> < 0))
        |- P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,
                                            <make_list_1035@99:1>:int,
                                            <<make_list_1035@99:2>@102:0>:int)
        
        P[<make_list_1035@96:1>]((1 + <make_list_1035@99:0>):int,<make_list_1035@99:1>:int),
        ((1 + <make_list_1035@99:0>) >= 0)
        |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
        
        |- P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
        P[<fail_1694@180:0>](var451:bool) = false
        P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int) =
        ((1 + <make_list_1035@99:0>) >= 0)
        P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,<<make_list_1035@99:2>@102:0>:int) =
        ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> = -1))
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int) =
        ((<make_list_1035@96:0> = 0) && (<<make_list_1035@96:2>@112:0> = 1))
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<make_list_1035@96:2>@112:0> = 1) &&
         ((<make_list_1035@96:0> = 0) && (<<<make_list_1035@96:2>@112:1>@138:0> = 0)))
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<make_list_1035@96:0> = 0) &&
         ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
          ((<<make_list_1035@96:2>@112:0> = 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) &&
         ((<mem_1030@124:1> = 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
      upper bounds:
        P[<<make_list_1035@96:2>@112:0>](var461:int,var462:int,var463:int) = true
        P[<<make_list_1035@99:2>@102:0>](var456:int,var457:int,var458:int) = true
      begin GenHcSolver.classify_pids(111484)[4]
        output:
          [<<make_list_1035@99:2>@102:0>;<<make_list_1035@96:2>@112:0>]
      end GenHcSolver.classify_pids(111484)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(111495)[4]
        lb:(((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> = -1)) ||
            ((<make_list_1035@99:0> = 0) && (<<make_list_1035@99:2>@102:0> = 1)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(111513)[5]
          ts: (((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> = -1)) ||
               ((<make_list_1035@99:0> = 0) && (<<make_list_1035@99:2>@102:0> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(111513)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(111524)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(111524)[5] (0.000000 sec.)
        lb':((((-1 + <<make_list_1035@99:2>@102:0>) + (-1 * <make_list_1035@99:0>)) = 0) &&
             (((-1 * <make_list_1035@99:0>) >= 0) && ((1 + <make_list_1035@99:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(111527)[5]
          begin InterpProver.interpolate_fresh(111528)[6]
            begin InterpProver.interpolate_log(111529)[7]
              input1: ((((-1 + <<make_list_1035@99:2>@102:0>) + (-1 * <make_list_1035@99:0>)) = 0) &&
                       (((-1 * <make_list_1035@99:0>) >= 0) && ((1 + <make_list_1035@99:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(111530)[8]
                begin InterpProver.interpolate_simplify(111531)[9]
                  begin InterpProver.interpolate_quick(111637)[10]
                    
                  end InterpProver.interpolate_quick(111637)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(111531)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(111530)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(111529)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(111528)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(111527)[5] (0.001000 sec.)
        output:
          P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,<<make_list_1035@99:2>@102:0>:int) =
          true
          P[<<make_list_1035@96:2>@112:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,<<make_list_1035@99:2>@102:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(111495)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
        
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,0:int)|- bot
        
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
        ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
        |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
        
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        (<mem_1030@124:1> <> 0)
        |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                               <<mem_1030@124:2>@132:0>:int,
                                               <<<mem_1030@124:2>@132:1>@159:0>:int)
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
        
        P[<make_list_1035@96:1>]((1 + <make_list_1035@99:0>):int,<make_list_1035@99:1>:int),
        ((1 + <make_list_1035@99:0>) >= 0)
        |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
        
        |- P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
        P[<fail_1694@180:0>](var467:bool) = false
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
        P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int) =
        ((1 + <make_list_1035@99:0>) >= 0)
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) &&
          ((<<make_list_1035@96:2>@112:0> >= 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) &&
         ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
      upper bounds:
        P[<make_list_1035@99:1>](var476:int,var477:int) = true
        P[<make_list_1035@96:1>](var472:int,var473:int) = true
      begin GenHcSolver.classify_pids(118885)[4]
        output:
          [<make_list_1035@96:1>;<make_list_1035@99:1>]
      end GenHcSolver.classify_pids(118885)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(118896)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(118899)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(118899)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(118904)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(118904)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(118907)[5]
          begin InterpProver.interpolate_fresh(118908)[6]
            begin InterpProver.interpolate_log(118909)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(118910)[8]
                begin InterpProver.interpolate_simplify(118911)[9]
                  begin InterpProver.interpolate_quick(118925)[10]
                    
                  end InterpProver.interpolate_quick(118925)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(118911)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(118910)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(118909)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(118908)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(118907)[5] (0.000000 sec.)
        output:
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
          P[<make_list_1035@99:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
      end ApronInterface.convex_hull_interpolate(118896)[4] (0.000999 sec.)
      Horn clauses:
        P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
        
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,0:int)|- bot
        
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
        ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
        |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
        
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        (<mem_1030@124:1> <> 0)
        |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                               <<mem_1030@124:2>@132:0>:int,
                                               <<<mem_1030@124:2>@132:1>@159:0>:int)
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        P[<fail_1694@180:0>](var481:bool) = false
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) &&
          ((<<make_list_1035@96:2>@112:0> >= 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) &&
         ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
      upper bounds:
        P[<fail_1694@180:0>](var484:bool) = true
      begin GenHcSolver.classify_pids(123832)[4]
        output:
          [<fail_1694@180:0>]
      end GenHcSolver.classify_pids(123832)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(123835)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(123838)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(123838)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(123843)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(123843)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(123846)[5]
          begin InterpProver.interpolate_fresh(123847)[6]
            begin InterpProver.interpolate_log(123848)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(123849)[8]
                begin InterpProver.interpolate_simplify(123850)[9]
                  begin InterpProver.interpolate_quick(123865)[10]
                    
                  end InterpProver.interpolate_quick(123865)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(123869)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(123869)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(123850)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(123849)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(123848)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(123847)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(123846)[5] (0.000000 sec.)
        output:
          P[<fail_1694@180:0>](var481:bool) = false
      end ApronInterface.convex_hull_interpolate(123835)[4] (0.000000 sec.)
      Horn clauses:
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,0:int)|- bot
        
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
        ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
        |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
        
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        (<mem_1030@124:1> <> 0)
        |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                               <<mem_1030@124:2>@132:0>:int,
                                               <<<mem_1030@124:2>@132:1>@159:0>:int)
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) &&
          ((<<make_list_1035@96:2>@112:0> >= 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) &&
         ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
      upper bounds:
        P[<mem_1030@166:1>](var487:int,var488:int) = true
      begin GenHcSolver.classify_pids(126924)[4]
        output:
          [<mem_1030@166:1>]
      end GenHcSolver.classify_pids(126924)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(126927)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(126930)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(126930)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(126935)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(126935)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(126938)[5]
          begin InterpProver.interpolate_fresh(126939)[6]
            begin InterpProver.interpolate_log(126940)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(126941)[8]
                begin InterpProver.interpolate_simplify(126942)[9]
                  begin InterpProver.interpolate_quick(126957)[10]
                    
                  end InterpProver.interpolate_quick(126957)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(126961)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(126961)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(126942)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(126941)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(126940)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(126939)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(126938)[5] (0.001000 sec.)
        output:
          P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
      end ApronInterface.convex_hull_interpolate(126927)[4] (0.001000 sec.)
      Horn clauses:
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
        ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0)) |- bot
        
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        (<mem_1030@124:1> <> 0)
        |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                               <<mem_1030@124:2>@132:0>:int,
                                               <<<mem_1030@124:2>@132:1>@159:0>:int)
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) &&
          ((<<make_list_1035@96:2>@112:0> >= 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) &&
         ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
      upper bounds:
        P[<<<mem_1030@124:2>@132:1>@159:0>](var489:int,var490:int,var491:int,var492:int) =
        ((var491 <> 0) || ((var490 < 1) || (var489 = var492)))
      begin GenHcSolver.classify_pids(130413)[4]
        output:
          [<<<mem_1030@124:2>@132:1>@159:0>]
      end GenHcSolver.classify_pids(130413)[4] (0.000000 sec.)
      lb:((<<mem_1030@124:2>@132:0> = 0) &&
          ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
      nub:(not
             ((<<mem_1030@124:2>@132:0> <> 0) ||
              ((<mem_1030@124:1> < 1) || (<mem_1030@124:0> = <<<mem_1030@124:2>@132:1>@159:0>))))
      begin ApronInterface.convex_hull_interpolate(130416)[4]
        lb:((<<mem_1030@124:2>@132:0> = 0) &&
            ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
        nub:(not
               ((<<mem_1030@124:2>@132:0> <> 0) ||
                ((<mem_1030@124:1> < 1) || (<mem_1030@124:0> = <<<mem_1030@124:2>@132:1>@159:0>))))
        begin ExtFormula.Formula.case_analysis_boolean(130447)[5]
          ts: ((<<mem_1030@124:2>@132:0> = 0) &&
               ((<mem_1030@124:1> >= 1) && (<<<mem_1030@124:2>@132:1>@159:0> = <mem_1030@124:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(130447)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(130485)[5]
          ts: ((<<mem_1030@124:2>@132:0> = 0) &&
               ((<mem_1030@124:1> >= 1) && (<mem_1030@124:0> <> <<<mem_1030@124:2>@132:1>@159:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(130485)[5] (0.000999 sec.)
        lb':(((<<<mem_1030@124:2>@132:1>@159:0> + (-1 * <mem_1030@124:0>)) = 0) &&
             ((<<mem_1030@124:2>@132:0> = 0) && ((-1 + <mem_1030@124:1>) >= 0)))
        nub':((<<mem_1030@124:2>@132:0> = 0) && ((-1 + <mem_1030@124:1>) >= 0))
        begin InterpProver.interpolate(130493)[5]
          begin InterpProver.interpolate_fresh(130494)[6]
            begin InterpProver.interpolate_log(130495)[7]
              input1: (((<<<mem_1030@124:2>@132:1>@159:0> + (-1 * <mem_1030@124:0>)) = 0) &&
                       ((<<mem_1030@124:2>@132:0> = 0) && ((-1 + <mem_1030@124:1>) >= 0)))
              input2: ((<<mem_1030@124:2>@132:0> = 0) && ((-1 + <mem_1030@124:1>) >= 0))
              begin InterpProver.interpolate_check(130496)[8]
                begin InterpProver.interpolate_simplify(130497)[9]
                  begin InterpProver.interpolate_quick(130564)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(130573)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(130574)[12]
                        begin CsisatInterface.interpolate_csisat_log(130575)[13]
                          input1: (0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0 & 1 <= v_sep_mem_1030_sep_124_sep_1)
                          input2: (0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0 & 1 <= v_sep_mem_1030_sep_124_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(130576)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(130576)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(130575)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(130574)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(130573)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(130564)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(130497)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(130496)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(130495)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(130494)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(130493)[5] (0.001000 sec.)
        begin InterpProver.interpolate(130591)[5]
          begin InterpProver.interpolate_fresh(130592)[6]
            begin InterpProver.interpolate_log(130593)[7]
              input1: (((<<<mem_1030@124:2>@132:1>@159:0> + (-1 * <mem_1030@124:0>)) = 0) &&
                       ((<<mem_1030@124:2>@132:0> = 0) && ((-1 + <mem_1030@124:1>) >= 0)))
              input2: (not
                         ((<<mem_1030@124:2>@132:0> <> 0) ||
                          ((<mem_1030@124:1> < 1) || (<mem_1030@124:0> = <<<mem_1030@124:2>@132:1>@159:0>))))
              begin InterpProver.interpolate_check(130594)[8]
                begin InterpProver.interpolate_simplify(130595)[9]
                  begin InterpProver.interpolate_quick(130716)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(130725)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(130726)[12]
                        begin CsisatInterface.interpolate_csisat_log(130727)[13]
                          input1: (0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0 & v_sep_mem_1030_sep_124_sep_0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0 & 1 <= v_sep_mem_1030_sep_124_sep_1)
                          input2: (not v_sep_mem_1030_sep_124_sep_0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0 & 0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0 & 1 <= v_sep_mem_1030_sep_124_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(130728)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(130728)[14] (0.000000 sec.)
                          output: v_sep_mem_1030_sep_124_sep_0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(130727)[13] (0.000000 sec.)
                        after simplification: v_sep_mem_1030_sep_124_sep_0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0
                        after dnf conversion: ((v_sep_mem_1030_sep_124_sep_0 = v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(130726)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(130725)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(130716)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(130595)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(130594)[8] (0.002000 sec.)
              output: (<mem_1030@124:0> = <<<mem_1030@124:2>@132:1>@159:0>)
            end InterpProver.interpolate_log(130593)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(130592)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(130591)[5] (0.002000 sec.)
        output:
          P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
          (<mem_1030@124:0> = <<<mem_1030@124:2>@132:1>@159:0>)
      end ApronInterface.convex_hull_interpolate(130416)[4] (0.003999 sec.)
      Horn clauses:
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
        ((<mem_1030@124:1> <> 0) && (<mem_1030@124:0> <> <<<mem_1030@124:2>@132:1>@159:0>)) |- bot
        
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
        |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                            <make_list_1035@96:1>:int,
                                                            <<make_list_1035@96:2>@112:0>:int,
                                                            <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                            <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
        
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
         ((<make_list_1035@96:0> >= 0) &&
          ((<<make_list_1035@96:2>@112:0> >= 1) &&
           (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
      upper bounds:
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](var493:int,var494:int,var495:int,var496:int,var497:int) =
        ((var495 = 0) || (var494 = var497))
      begin GenHcSolver.classify_pids(133332)[4]
        output:
          [<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>]
      end GenHcSolver.classify_pids(133332)[4] (0.000000 sec.)
      lb:((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
          ((<make_list_1035@96:0> >= 0) &&
           ((<<make_list_1035@96:2>@112:0> >= 1) &&
            (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
      nub:(not
             ((<<make_list_1035@96:2>@112:0> = 0) ||
              (<make_list_1035@96:1> = <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>)))
      begin ApronInterface.convex_hull_interpolate(133335)[4]
        lb:((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
            ((<make_list_1035@96:0> >= 0) &&
             ((<<make_list_1035@96:2>@112:0> >= 1) &&
              (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
        nub:(not
               ((<<make_list_1035@96:2>@112:0> = 0) ||
                (<make_list_1035@96:1> = <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(133384)[5]
          ts: ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
               ((<make_list_1035@96:0> >= 0) &&
                ((<<make_list_1035@96:2>@112:0> >= 1) &&
                 (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>))))
          
        end ExtFormula.Formula.case_analysis_boolean(133384)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(133407)[5]
          ts: ((<<make_list_1035@96:2>@112:0> <> 0) &&
               (<make_list_1035@96:1> <> <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(133407)[5] (0.000000 sec.)
        lb':(((<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> + (-1 * <make_list_1035@96:1>)) = 0) &&
             ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
              (((-1 + <<make_list_1035@96:2>@112:0>) >= 0) && (<make_list_1035@96:0> >= 0))))
        nub':true
        begin InterpProver.interpolate(133413)[5]
          begin InterpProver.interpolate_fresh(133414)[6]
            begin InterpProver.interpolate_log(133415)[7]
              input1: (((<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> + (-1 * <make_list_1035@96:1>)) = 0) &&
                       ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
                        (((-1 + <<make_list_1035@96:2>@112:0>) >= 0) && (<make_list_1035@96:0> >= 0))))
              input2: true
              begin InterpProver.interpolate_check(133416)[8]
                begin InterpProver.interpolate_simplify(133417)[9]
                  begin InterpProver.interpolate_quick(133509)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(133515)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(133516)[12]
                        begin CsisatInterface.interpolate_csisat_log(133517)[13]
                          input1: (0 <= v_sep_make_list_1035_sep_96_sep_0 & 1 <= v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0)
                          input2: true
                          begin CsisatInterface.interpolate_csisat_raw(133518)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(133518)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(133517)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(133516)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(133515)[11] (0.000999 sec.)
                    
                  end InterpProver.interpolate_quick(133509)[10] (0.001999 sec.)
                  
                end InterpProver.interpolate_simplify(133417)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(133416)[8] (0.001999 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(133415)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(133414)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(133413)[5] (0.002999 sec.)
        begin InterpProver.interpolate(133526)[5]
          begin InterpProver.interpolate_fresh(133527)[6]
            begin InterpProver.interpolate_log(133528)[7]
              input1: (((<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> + (-1 * <make_list_1035@96:1>)) = 0) &&
                       ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
                        (((-1 + <<make_list_1035@96:2>@112:0>) >= 0) && (<make_list_1035@96:0> >= 0))))
              input2: (not
                         ((<<make_list_1035@96:2>@112:0> = 0) ||
                          (<make_list_1035@96:1> = <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>)))
              begin InterpProver.interpolate_check(133529)[8]
                begin InterpProver.interpolate_simplify(133530)[9]
                  begin InterpProver.interpolate_quick(133683)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(133692)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(133693)[12]
                        begin CsisatInterface.interpolate_csisat_log(133694)[13]
                          input1: (v_sep_make_list_1035_sep_96_sep_1 = v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0 & 0 <= v_sep_make_list_1035_sep_96_sep_0 & 1 <= v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0)
                          input2: (not 0 = v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0 & not v_sep_make_list_1035_sep_96_sep_1 = v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(133695)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(133695)[14] (0.000000 sec.)
                          output: v_sep_make_list_1035_sep_96_sep_1 = v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(133694)[13] (0.000000 sec.)
                        after simplification: v_sep_make_list_1035_sep_96_sep_1 = v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0
                        after dnf conversion: ((v_sep_make_list_1035_sep_96_sep_1 = v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(133693)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(133692)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(133683)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(133530)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(133529)[8] (0.002000 sec.)
              output: (<make_list_1035@96:1> = <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>)
            end InterpProver.interpolate_log(133528)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(133527)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(133526)[5] (0.002000 sec.)
        output:
          P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
          (<make_list_1035@96:1> = <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>)
      end ApronInterface.convex_hull_interpolate(133335)[4] (0.004999 sec.)
      Horn clauses:
        P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
        (<<make_list_1035@96:2>@112:0> <> 0)
        |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                    <make_list_1035@96:1>:int,
                                                    <<make_list_1035@96:2>@112:0>:int,
                                                    <<<make_list_1035@96:2>@112:1>@138:0>:int)
        
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
      upper bounds:
        P[<<<make_list_1035@96:2>@112:1>@138:0>](var498:int,var499:int,var500:int,var501:int) = true
      begin GenHcSolver.classify_pids(134738)[4]
        output:
          [<<<make_list_1035@96:2>@112:1>@138:0>]
      end GenHcSolver.classify_pids(134738)[4] (0.000000 sec.)
      lb:((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(134741)[4]
        lb:((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(134754)[5]
          ts: ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && (<<make_list_1035@96:2>@112:0> >= 1))
          
        end ExtFormula.Formula.case_analysis_boolean(134754)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(134762)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(134762)[5] (0.000000 sec.)
        lb':((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && ((-1 + <<make_list_1035@96:2>@112:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(134765)[5]
          begin InterpProver.interpolate_fresh(134766)[6]
            begin InterpProver.interpolate_log(134767)[7]
              input1: ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) && ((-1 + <<make_list_1035@96:2>@112:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(134768)[8]
                begin InterpProver.interpolate_simplify(134769)[9]
                  begin InterpProver.interpolate_quick(134809)[10]
                    
                  end InterpProver.interpolate_quick(134809)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(134769)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(134768)[8] (0.000999 sec.)
              output: true
            end InterpProver.interpolate_log(134767)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(134766)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(134765)[5] (0.000999 sec.)
        output:
          P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(134741)[4] (0.000999 sec.)
      Horn clauses:
         ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                       <<mem_1030@124:2>@132:0>:int)
      lower bounds:
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) =
        ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
      upper bounds:
        P[<<mem_1030@124:2>@132:0>](var502:int,var503:int,var504:int) = true
      begin GenHcSolver.classify_pids(135341)[4]
        output:
          [<<mem_1030@124:2>@132:0>]
      end GenHcSolver.classify_pids(135341)[4] (0.000000 sec.)
      lb:((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(135344)[4]
        lb:((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(135357)[5]
          ts: ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
          
        end ExtFormula.Formula.case_analysis_boolean(135357)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(135365)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(135365)[5] (0.000000 sec.)
        lb':((<<mem_1030@124:2>@132:0> = 0) && ((-1 + <mem_1030@124:1>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(135368)[5]
          begin InterpProver.interpolate_fresh(135369)[6]
            begin InterpProver.interpolate_log(135370)[7]
              input1: ((<<mem_1030@124:2>@132:0> = 0) && ((-1 + <mem_1030@124:1>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(135371)[8]
                begin InterpProver.interpolate_simplify(135372)[9]
                  begin InterpProver.interpolate_quick(135412)[10]
                    
                  end InterpProver.interpolate_quick(135412)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(135372)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(135371)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(135370)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(135369)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(135368)[5] (0.001000 sec.)
        output:
          P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) = true
      end ApronInterface.convex_hull_interpolate(135344)[4] (0.002000 sec.)
      begin HcSolver.check_validity(135523)[4]
        input:
          P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
          
          P[<<make_list_1035@96:2>@112:0>](<k_main_1588@177:1>:int,<k_main_1588@177:0>:int,<k_main_1588@177:2>:int),
          P[<<mem_1030@124:3>@175:0>](<k_main_1588@177:0>:int,<k_main_1588@177:2>:int,false:bool),
          ((<k_main_1588@177:2> <> 0) && <fail_1694@180:0>) |- P[<fail_1694@180:0>](
          <fail_1694@180:0>:bool)
          
          P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,0:int,var338:int),
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          P[<<mem_1030@166:3>@169:0>](<mem_1030@124:0>:int,(-1 + <mem_1030@124:1>):int,<<mem_1030@124:3>@175:0>:bool),
          ((<mem_1030@124:1> >= 1) && (<mem_1030@124:0> <> var338))
          |- P[<<mem_1030@124:3>@175:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                         <<mem_1030@124:3>@175:0>:bool)
          
          P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int),
          ((<mem_1030@166:1> = 0) && (not <<mem_1030@166:3>@169:0>))
          |- P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,
                                         <<mem_1030@166:3>@169:0>:bool)
          
          P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
          P[<mem_1030@124:1>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int),
          ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
          |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
          
          P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
          P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int), (
          <mem_1030@124:1> <> 0)
          |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,
                                                 <mem_1030@124:1>:int,
                                                 <<mem_1030@124:2>@132:0>:int,
                                                 <<<mem_1030@124:2>@132:1>@159:0>:int)
          
          P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                           -1 + <<make_list_1035@96:2>@112:0>):int),
          P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
          ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
           ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
          |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                              <make_list_1035@96:1>:int,
                                                              <<make_list_1035@96:2>@112:0>:int,
                                                              <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                              <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
          
          P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
          P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          (<<make_list_1035@96:2>@112:0> <> 0)
          |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                      <make_list_1035@96:1>:int,
                                                      <<make_list_1035@96:2>@112:0>:int,
                                                      <<<make_list_1035@96:2>@112:1>@138:0>:int)
          
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
          |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                         <<mem_1030@124:2>@132:0>:int)
          
          P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          (<mem_1030@124:1> <> 0) |- P[<mem_1030@124:1>](<mem_1030@124:0>:int,
                                                         <mem_1030@124:1>:int)
          
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                           -1 + <<make_list_1035@96:2>@112:0>):int), (
          <make_list_1035@96:0> >= 0)
          |- P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,
                                              <make_list_1035@96:1>:int,
                                              <<make_list_1035@96:2>@112:0>:int)
          
          P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int),
          ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> < 0))
          |- P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,
                                              <make_list_1035@99:1>:int,
                                              <<make_list_1035@99:2>@102:0>:int)
          
          P[<make_list_1035@96:1>]((1 + <make_list_1035@99:0>):int,<make_list_1035@99:1>:int),
          ((1 + <make_list_1035@99:0>) >= 0)
          |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
          
          |- P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(135523)[4] (0.005999 sec.)
      solution:
        P[<fail_1694@180:0>](var481:bool) = false
        P[<<mem_1030@124:3>@175:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,<<mem_1030@166:3>@169:0>:bool) = false
        P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,<<mem_1030@166:3>@169:0>:bool) = false
        P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int) = false
        P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int) =
        (<mem_1030@124:0> = <<<mem_1030@124:2>@132:1>@159:0>)
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int,<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int) =
        (<make_list_1035@96:1> = <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>)
        P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int) =
        true
        P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int) = true
        P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int) = true
        P[<<make_list_1035@96:2>@112:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,<<make_list_1035@99:2>@102:0>:int) =
        true
        P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int,<<make_list_1035@99:2>@102:0>:int) =
        true
        P[<make_list_1035@99:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
        P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int) = true
    end GenHcSolver.solve(87281)[3] (0.240964 sec.)
    begin YhornInterface.solve(136444)[3]
      begin HcSolver.solve_ub(136445)[4]
        encoded:
          P[<fail_1694@180:0>](<fail_1694@180:0>:int)|- bot
          
          P[<<make_list_1035@96:2>@112:0>](<k_main_1588@177:1>:int,<k_main_1588@177:0>:int,<k_main_1588@177:2>:int),
          P[<<mem_1030@124:3>@175:0>](<k_main_1588@177:0>:int,<k_main_1588@177:2>:int,0:int),
          ((<k_main_1588@177:2> <> 0) && (<fail_1694@180:0> = 1)) |- P[<fail_1694@180:0>](
          <fail_1694@180:0>:int)
          
          P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,0:int,var338:int),
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          P[<<mem_1030@166:3>@169:0>](<mem_1030@124:0>:int,(-1 + <mem_1030@124:1>):int,<<mem_1030@124:3>@175:0>:int),
          ((<mem_1030@124:1> >= 1) && (<mem_1030@124:0> <> var338))
          |- P[<<mem_1030@124:3>@175:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                         <<mem_1030@124:3>@175:0>:int)
          
          P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int),
          ((<mem_1030@166:1> = 0) && (not (<<mem_1030@166:3>@169:0> = 1)))
          |- P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,
                                         <<mem_1030@166:3>@169:0>:int)
          
          P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
          P[<mem_1030@124:1>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int),
          ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
          |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
          
          P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
          P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int), (
          <mem_1030@124:1> <> 0)
          |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,
                                                 <mem_1030@124:1>:int,
                                                 <<mem_1030@124:2>@132:0>:int,
                                                 <<<mem_1030@124:2>@132:1>@159:0>:int)
          
          P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                           -1 + <<make_list_1035@96:2>@112:0>):int),
          P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
          ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
           ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
          |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                              <make_list_1035@96:1>:int,
                                                              <<make_list_1035@96:2>@112:0>:int,
                                                              <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                              <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
          
          P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
          P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          (<<make_list_1035@96:2>@112:0> <> 0)
          |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                      <make_list_1035@96:1>:int,
                                                      <<make_list_1035@96:2>@112:0>:int,
                                                      <<<make_list_1035@96:2>@112:1>@138:0>:int)
          
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
          |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                         <<mem_1030@124:2>@132:0>:int)
          
          P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          (<mem_1030@124:1> <> 0) |- P[<mem_1030@124:1>](<mem_1030@124:0>:int,
                                                         <mem_1030@124:1>:int)
          
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                           -1 + <<make_list_1035@96:2>@112:0>):int), (
          <make_list_1035@96:0> >= 0)
          |- P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,
                                              <make_list_1035@96:1>:int,
                                              <<make_list_1035@96:2>@112:0>:int)
          
          P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int),
          ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> < 0))
          |- P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,
                                              <make_list_1035@99:1>:int,
                                              <<make_list_1035@99:2>@102:0>:int)
          
          P[<make_list_1035@96:1>]((1 + <make_list_1035@99:0>):int,<make_list_1035@99:1>:int),
          ((1 + <make_list_1035@99:0>) >= 0)
          |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
          
          |- P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
        input to Yhorn:
          P[<fail_1694@180:0>](<fail_1694@180:0>:int)|- bot
          
          P[<<make_list_1035@96:2>@112:0>](<k_main_1588@177:1>:int,<k_main_1588@177:0>:int,<k_main_1588@177:2>:int),
          P[<<mem_1030@124:3>@175:0>](<k_main_1588@177:0>:int,<k_main_1588@177:2>:int,var505:int),
          ((<k_main_1588@177:2> <> 0) && ((var505 = 0) && (<fail_1694@180:0> = 1)))
          |- P[<fail_1694@180:0>](<fail_1694@180:0>:int)
          
          P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,var506:int,var338:int),
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          P[<<mem_1030@166:3>@169:0>](<mem_1030@124:0>:int,var507:int,<<mem_1030@124:3>@175:0>:int),
          (((1 + var507) = <mem_1030@124:1>) &&
           ((<mem_1030@124:0> <> var338) && ((<mem_1030@124:1> >= 1) && (var506 = 0))))
          |- P[<<mem_1030@124:3>@175:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                         <<mem_1030@124:3>@175:0>:int)
          
          P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int),
          ((<<mem_1030@166:3>@169:0> <> 1) && (<mem_1030@166:1> = 0))
          |- P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,
                                         <<mem_1030@166:3>@169:0>:int)
          
          P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,var508:int,var509:int,<f_mem_1682@163:4>:int),
          P[<mem_1030@124:1>](<mem_1030@166:0>:int,var510:int),
          ((var510 = (1 + <mem_1030@166:1>)) &&
           ((var508 = (1 + <mem_1030@166:1>)) &&
            ((<mem_1030@166:1> >= 0) && ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (var509 = 0)))))
          |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
          
          P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
          P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int), (
          <mem_1030@124:1> <> 0)
          |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,
                                                 <mem_1030@124:1>:int,
                                                 <<mem_1030@124:2>@132:0>:int,
                                                 <<<mem_1030@124:2>@132:1>@159:0>:int)
          
          P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          P[<<make_list_1035@99:2>@102:0>](var511:int,<make_list_1035@96:1>:int,var512:int),
          P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
          ((<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>) &&
           (((1 + var512) = <<make_list_1035@96:2>@112:0>) &&
            (((1 + var511) = <make_list_1035@96:0>) &&
             ((<make_list_1035@96:0> >= 0) && (<<<make_list_1035@96:2>@112:1>@138:0> = 0)))))
          |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                              <make_list_1035@96:1>:int,
                                                              <<make_list_1035@96:2>@112:0>:int,
                                                              <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                              <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
          
          P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
          P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          (<<make_list_1035@96:2>@112:0> <> 0)
          |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                      <make_list_1035@96:1>:int,
                                                      <<make_list_1035@96:2>@112:0>:int,
                                                      <<<make_list_1035@96:2>@112:1>@138:0>:int)
          
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          ((<mem_1030@124:1> >= 1) && (<<mem_1030@124:2>@132:0> = 0))
          |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                         <<mem_1030@124:2>@132:0>:int)
          
          P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          (<mem_1030@124:1> <> 0) |- P[<mem_1030@124:1>](<mem_1030@124:0>:int,
                                                         <mem_1030@124:1>:int)
          
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          P[<<make_list_1035@99:2>@102:0>](var513:int,<make_list_1035@96:1>:int,var514:int),
          (((1 + var514) = <<make_list_1035@96:2>@112:0>) &&
           (((1 + var513) = <make_list_1035@96:0>) && (<make_list_1035@96:0> >= 0)))
          |- P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,
                                              <make_list_1035@96:1>:int,
                                              <<make_list_1035@96:2>@112:0>:int)
          
          P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int),
          ((<make_list_1035@99:0> < 0) && (<<make_list_1035@99:2>@102:0> = 0))
          |- P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,
                                              <make_list_1035@99:1>:int,
                                              <<make_list_1035@99:2>@102:0>:int)
          
          P[<make_list_1035@96:1>](var515:int,<make_list_1035@99:1>:int),
          ((var515 = (1 + <make_list_1035@99:0>)) && ((1 + <make_list_1035@99:0>) >= 0))
          |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1694_sep_180_sep_0($476)) -> 1=0.
(($476-1=0) & ($477=0) & ($478<>0)) & (v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0($479,$478,$477)) & (v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0($480,$479,$478)) -> v_sep_fail_1694_sep_180_sep_0($476).
(($481=0) & ($482-1>=0) & ($483-$484<>0) & (-$482+$485+1=0)) & (v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0($483,$485,$486)) & (v_sep_mem_1030_sep_124_sep_1($483,$482)) & (v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0($483,$482,$481,$484)) -> v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0($483,$482,$486).
(($487=0) & ($488-1<>0)) & (v_sep_mem_1030_sep_166_sep_1($489,$487)) -> v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0($489,$487,$488).
(($490=0) & ($489-$491<>0) & ($487>=0) & (-$487+$492-1=0) & (-$487+$493-1=0)) & (v_sep_mem_1030_sep_124_sep_1($489,$493)) & (v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0($489,$492,$490,$491)) -> v_sep_mem_1030_sep_166_sep_1($489,$487).
($482<>0) & (v_sep_mem_1030_sep_124_sep_1($483,$482)) & (v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0($494,$483,$482)) & (v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0($494,$483,$482,$495,$496)) -> v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0($483,$482,$495,$496).
(($497=0) & ($498>=0) & (-$498+$499+1=0) & ($500-$501+1=0) & ($502-$503=0)) & (v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0($498,$503,$501)) & (v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0($499,$503,$500)) & (v_sep_make_list_1035_sep_96_sep_1($498,$503)) & (v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0($498,$503,$501,$497)) -> v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0($498,$503,$501,$497,$502).
($501<>0) & (v_sep_make_list_1035_sep_96_sep_1($498,$503)) & (v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0($503,$501,$497)) & (v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0($498,$503,$501)) -> v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0($498,$503,$501,$497).
(($495=0) & ($482-1>=0)) & (v_sep_mem_1030_sep_124_sep_1($483,$482)) -> v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0($483,$482,$495).
($482<>0) & (v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0($494,$483,$482)) -> v_sep_mem_1030_sep_124_sep_1($483,$482).
(($498>=0) & (-$498+$504+1=0) & (-$501+$505+1=0)) & (v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0($504,$503,$505)) & (v_sep_make_list_1035_sep_96_sep_1($498,$503)) -> v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0($498,$503,$501).
(($506=0) & ($507<0)) & (v_sep_make_list_1035_sep_99_sep_1($507,$508)) -> v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0($507,$508,$506).
(($507+1>=0) & (-$507+$509-1=0)) & (v_sep_make_list_1035_sep_96_sep_1($509,$508)) -> v_sep_make_list_1035_sep_99_sep_1($507,$508).
0=0 -> v_sep_make_list_1035_sep_96_sep_1($498,$503).


v_sep_fail_1694_sep_180_sep_0: X
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: X
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: X
.........................................Split disj [56] 1.240811
Reconstrcut: 3 **)

v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: X
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: X
.......Extend [58]1.250809
Reconstrcut: 6

v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: X
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: X
.......Split conj [58] 1.253809
(Reconstrcut: 8 **)
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & (X)
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: X
...................Extend [61]1.259808
Reconstrcut: 6

v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & (X)
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: X
.......Split conj [61] 1.262807
(Reconstrcut: 33 *********)
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & (X)
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: X
..............................................................Extend [77]1.280805
Reconstrcut: 6

v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & (X)
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: X
.......Split disj [77] 1.283803
Reconstrcut: 5 **)

v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: X
.............
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: X
.........
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: X
.........................Split conj [79] 1.3038
(Reconstrcut: 16 ****)
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.............................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.........
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.........................Split conj [88] 1.333796
(Reconstrcut: 41 *********)
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
....................................................................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.........
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: X
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.........................Split conj [112] 1.37479
(Reconstrcut: 31 ******)
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.....................................................................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.........
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.........................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
..................................................................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.......................................................................................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: X
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
...............................................................................................................Split conj [127] 2.451626
(Reconstrcut: 28 ********)
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.............................................................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.........
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.........................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
..................................................................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
...................................................................................................................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: X
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
...........................................................................................................................................Split conj [148] 9.219598
(Reconstrcut: 70 ************)
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.................................................................................................................................................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.........
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.........................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
..................................................................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
...............................................................................................................................................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
.......................................................................................................................................................................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
............................................................................................................................................................................................
v_sep_fail_1694_sep_180_sep_0: (X) | (X)
v_sep_make_list_1035_sep_96_sep_1: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0: X
v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_make_list_1035_sep_99_sep_1: X
v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0: X
v_sep_mem_1030_sep_124_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0: X
v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0: (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0: (X) & ((X) | (X))
v_sep_mem_1030_sep_166_sep_1: (X) & (X) & (X) & (X) & (X) & (X) & (X) & (X)
v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0: (X) & (X) & (X) & (X)
..............................................................................................................................................................................................(0=0) & (v_sep_fail_1694_sep_180_sep_0($476)) -> 1=0.
(($476-1=0) & ($477=0) & ($478<>0)) & (v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0($479,$478,$477)) & (v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0($480,$479,$478)) -> v_sep_fail_1694_sep_180_sep_0($476).
(($481=0) & ($482-1>=0) & ($483-$484<>0) & (-$482+$485+1=0)) & (v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0($483,$485,$486)) & (v_sep_mem_1030_sep_124_sep_1($483,$482)) & (v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0($483,$482,$481,$484)) -> v_sep_mem_1030_sep_124_sep_3_sep_175_sep_0($483,$482,$486).
(($487=0) & ($488-1<>0)) & (v_sep_mem_1030_sep_166_sep_1($489,$487)) -> v_sep_mem_1030_sep_166_sep_3_sep_169_sep_0($489,$487,$488).
(($490=0) & ($489-$491<>0) & ($487>=0) & (-$487+$492-1=0) & (-$487+$493-1=0)) & (v_sep_mem_1030_sep_124_sep_1($489,$493)) & (v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0($489,$492,$490,$491)) -> v_sep_mem_1030_sep_166_sep_1($489,$487).
($482<>0) & (v_sep_mem_1030_sep_124_sep_1($483,$482)) & (v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0($494,$483,$482)) & (v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0($494,$483,$482,$495,$496)) -> v_sep_mem_1030_sep_124_sep_2_sep_132_sep_1_sep_159_sep_0($483,$482,$495,$496).
(($497=0) & ($498>=0) & (-$498+$499+1=0) & ($500-$501+1=0) & ($502-$503=0)) & (v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0($498,$503,$501)) & (v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0($499,$503,$500)) & (v_sep_make_list_1035_sep_96_sep_1($498,$503)) & (v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0($498,$503,$501,$497)) -> v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_1_sep_153_sep_0($498,$503,$501,$497,$502).
($501<>0) & (v_sep_make_list_1035_sep_96_sep_1($498,$503)) & (v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0($503,$501,$497)) & (v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0($498,$503,$501)) -> v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_1_sep_138_sep_0($498,$503,$501,$497).
(($495=0) & ($482-1>=0)) & (v_sep_mem_1030_sep_124_sep_1($483,$482)) -> v_sep_mem_1030_sep_124_sep_2_sep_132_sep_0($483,$482,$495).
($482<>0) & (v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0($494,$483,$482)) -> v_sep_mem_1030_sep_124_sep_1($483,$482).
(($498>=0) & (-$498+$504+1=0) & (-$501+$505+1=0)) & (v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0($504,$503,$505)) & (v_sep_make_list_1035_sep_96_sep_1($498,$503)) -> v_sep_make_list_1035_sep_96_sep_2_sep_112_sep_0($498,$503,$501).
(($506=0) & ($507<0)) & (v_sep_make_list_1035_sep_99_sep_1($507,$508)) -> v_sep_make_list_1035_sep_99_sep_2_sep_102_sep_0($507,$508,$506).
(($507+1>=0) & (-$507+$509-1=0)) & (v_sep_make_list_1035_sep_96_sep_1($509,$508)) -> v_sep_make_list_1035_sep_99_sep_1($507,$508).
0=0 -> v_sep_make_list_1035_sep_96_sep_1($498,$503).

          |- P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
        solution:
          P[<fail_1694@180:0>]($510:bool) = false
          P[<make_list_1035@96:1>]($571:int,$573:int) = true
          P[<<make_list_1035@96:2>@112:0>]($520:int,$522:int,$524:int) = true
          P[<<<make_list_1035@96:2>@112:1>@138:0>]($576:int,$578:int,$580:int,$582:int) = true
          P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>]($553:int,$555:int,$557:int,$559:int,$561:int) =
          ($561 = $555)
          P[<make_list_1035@99:1>]($592:int,$594:int) = true
          P[<<make_list_1035@99:2>@102:0>]($564:int,$566:int,$568:int) = true
          P[<mem_1030@124:1>]($534:int,$536:int) = true
          P[<<mem_1030@124:2>@132:0>]($585:int,$587:int,$589:int) = true
          P[<<<mem_1030@124:2>@132:1>@159:0>]($539:int,$541:int,$543:int,$545:int) = ($539 = $545)
          P[<<mem_1030@124:3>@175:0>]($513:int,$515:int,$517:bool) = false
          P[<mem_1030@166:1>]($548:int,$550:int) = true
          P[<<mem_1030@166:3>@169:0>]($527:int,$529:int,$531:bool) = true
        
      end HcSolver.solve_ub(136445)[4] (13.750909 sec.)
      begin HcSolver.check_validity(137504)[4]
        input:
          P[<fail_1694@180:0>](<fail_1694@180:0>:bool)|- bot
          
          P[<<make_list_1035@96:2>@112:0>](<k_main_1588@177:1>:int,<k_main_1588@177:0>:int,<k_main_1588@177:2>:int),
          P[<<mem_1030@124:3>@175:0>](<k_main_1588@177:0>:int,<k_main_1588@177:2>:int,false:bool),
          ((<k_main_1588@177:2> <> 0) && <fail_1694@180:0>) |- P[<fail_1694@180:0>](
          <fail_1694@180:0>:bool)
          
          P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,0:int,var338:int),
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          P[<<mem_1030@166:3>@169:0>](<mem_1030@124:0>:int,(-1 + <mem_1030@124:1>):int,<<mem_1030@124:3>@175:0>:bool),
          ((<mem_1030@124:1> >= 1) && (<mem_1030@124:0> <> var338))
          |- P[<<mem_1030@124:3>@175:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                         <<mem_1030@124:3>@175:0>:bool)
          
          P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int),
          ((<mem_1030@166:1> = 0) && (not <<mem_1030@166:3>@169:0>))
          |- P[<<mem_1030@166:3>@169:0>](<mem_1030@166:0>:int,<mem_1030@166:1>:int,
                                         <<mem_1030@166:3>@169:0>:bool)
          
          P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int,0:int,<f_mem_1682@163:4>:int),
          P[<mem_1030@124:1>](<mem_1030@166:0>:int,(1 + <mem_1030@166:1>):int),
          ((<mem_1030@166:0> <> <f_mem_1682@163:4>) && (<mem_1030@166:1> >= 0))
          |- P[<mem_1030@166:1>](<mem_1030@166:0>:int,<mem_1030@166:1>:int)
          
          P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int,<<mem_1030@124:2>@132:0>:int,<<<mem_1030@124:2>@132:1>@159:0>:int),
          P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int), (
          <mem_1030@124:1> <> 0)
          |- P[<<<mem_1030@124:2>@132:1>@159:0>](<mem_1030@124:0>:int,
                                                 <mem_1030@124:1>:int,
                                                 <<mem_1030@124:2>@132:0>:int,
                                                 <<<mem_1030@124:2>@132:1>@159:0>:int)
          
          P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                           -1 + <<make_list_1035@96:2>@112:0>):int),
          P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
          ((<<<make_list_1035@96:2>@112:1>@138:0> = 0) &&
           ((<make_list_1035@96:0> >= 0) && (<<<<make_list_1035@96:2>@112:1>@138:1>@153:0> = <make_list_1035@96:1>)))
          |- P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>](<make_list_1035@96:0>:int,
                                                              <make_list_1035@96:1>:int,
                                                              <<make_list_1035@96:2>@112:0>:int,
                                                              <<<make_list_1035@96:2>@112:1>@138:0>:int,
                                                              <<<<make_list_1035@96:2>@112:1>@138:1>@153:0>:int)
          
          P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int),
          P[<<mem_1030@124:2>@132:0>](<make_list_1035@96:1>:int,<<make_list_1035@96:2>@112:0>:int,<<<make_list_1035@96:2>@112:1>@138:0>:int),
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          (<<make_list_1035@96:2>@112:0> <> 0)
          |- P[<<<make_list_1035@96:2>@112:1>@138:0>](<make_list_1035@96:0>:int,
                                                      <make_list_1035@96:1>:int,
                                                      <<make_list_1035@96:2>@112:0>:int,
                                                      <<<make_list_1035@96:2>@112:1>@138:0>:int)
          
          P[<mem_1030@124:1>](<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          ((<<mem_1030@124:2>@132:0> = 0) && (<mem_1030@124:1> >= 1))
          |- P[<<mem_1030@124:2>@132:0>](<mem_1030@124:0>:int,<mem_1030@124:1>:int,
                                         <<mem_1030@124:2>@132:0>:int)
          
          P[<<make_list_1035@96:2>@112:0>](<f_main_1688@121:1>:int,<mem_1030@124:0>:int,<mem_1030@124:1>:int),
          (<mem_1030@124:1> <> 0) |- P[<mem_1030@124:1>](<mem_1030@124:0>:int,
                                                         <mem_1030@124:1>:int)
          
          P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int),
          P[<<make_list_1035@99:2>@102:0>]((-1 + <make_list_1035@96:0>):int,<make_list_1035@96:1>:int,(
                                           -1 + <<make_list_1035@96:2>@112:0>):int), (
          <make_list_1035@96:0> >= 0)
          |- P[<<make_list_1035@96:2>@112:0>](<make_list_1035@96:0>:int,
                                              <make_list_1035@96:1>:int,
                                              <<make_list_1035@96:2>@112:0>:int)
          
          P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int),
          ((<<make_list_1035@99:2>@102:0> = 0) && (<make_list_1035@99:0> < 0))
          |- P[<<make_list_1035@99:2>@102:0>](<make_list_1035@99:0>:int,
                                              <make_list_1035@99:1>:int,
                                              <<make_list_1035@99:2>@102:0>:int)
          
          P[<make_list_1035@96:1>]((1 + <make_list_1035@99:0>):int,<make_list_1035@99:1>:int),
          ((1 + <make_list_1035@99:0>) >= 0)
          |- P[<make_list_1035@99:1>](<make_list_1035@99:0>:int,<make_list_1035@99:1>:int)
          
          |- P[<make_list_1035@96:1>](<make_list_1035@96:0>:int,<make_list_1035@96:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(137504)[4] (0.007999 sec.)
      solution:
        P[<fail_1694@180:0>]($510:bool) = false
        P[<make_list_1035@96:1>]($571:int,$573:int) = true
        P[<<make_list_1035@96:2>@112:0>]($520:int,$522:int,$524:int) = true
        P[<<<make_list_1035@96:2>@112:1>@138:0>]($576:int,$578:int,$580:int,$582:int) = true
        P[<<<<make_list_1035@96:2>@112:1>@138:1>@153:0>]($553:int,$555:int,$557:int,$559:int,$561:int) = ($561 = $555)
        P[<make_list_1035@99:1>]($592:int,$594:int) = true
        P[<<make_list_1035@99:2>@102:0>]($564:int,$566:int,$568:int) = true
        P[<mem_1030@124:1>]($534:int,$536:int) = true
        P[<<mem_1030@124:2>@132:0>]($585:int,$587:int,$589:int) = true
        P[<<<mem_1030@124:2>@132:1>@159:0>]($539:int,$541:int,$543:int,$545:int) = ($539 = $545)
        P[<<mem_1030@124:3>@175:0>]($513:int,$515:int,$517:bool) = false
        P[<mem_1030@166:1>]($548:int,$550:int) = true
        P[<<mem_1030@166:3>@169:0>]($527:int,$529:int,$531:bool) = true
    end YhornInterface.solve(136444)[3] (13.758908 sec.)
    
  end RefTypeInfer.infer_etrs(31481)[2] (14.344819 sec.)
  refinement types:
    main_1681: X
    f_1689: v1:int -> X
    f_1690: v1:int -> v2:int -> X
    main_1040: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1035: v1:int -> v2:int -> (v3:int -> (v4:int -> (v5:{v5:int | (v2 = v5)} -> X) -> X) -> X) -> X
    make_list_1035: v1:int -> v2:int -> (v3:int -> (v4:int -> (v5:int -> X) -> X) -> X) -> X
    f_make_list_1686: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> (v5:int -> X) -> X) -> X) ->
                      v9:int -> (v10:int -> (v11:int -> X) -> X) -> X
    cons_make_list_1113: v1:int ->
                         v2:int ->
                         v3:int ->
                         v4:int ->
                         (v5:int -> (v6:int -> X) -> X) -> (v9:int -> (v10:int -> (v11:int -> X) -> X) -> X) -> X
    f_main_1687: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    is_nil_1038: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1688: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> (v6:int -> (v7:int -> X) -> X) -> v10:bool -> X
    mem_1030: v1:int -> v2:int -> (v3:int -> (v4:{v4:int | (v1 = v4)} -> X) -> X) -> (v7:{v7:bool | false} -> X) -> X
    br_mem_1692: v1:bool -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> (v8:bool -> X) -> X
    f_cons_make_list_1685: v1:int ->
                           v2:int ->
                           v3:int -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    f_mem_1682: v1:int -> v2:int -> (v3:bool -> X) -> (v5:int -> (v6:int -> X) -> X) -> v9:int -> X
    mem_1030: v1:int -> v2:{v2:int | false} -> (v3:int -> (v4:int -> X) -> X) -> (v7:{v7:bool | false} -> X) -> X
    k_main_1588: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    fail_1694: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1691: var557:int -> var556:int -> var555:unit -> X
    f_make_list_1684: var563:int -> var562:int -> var561:int -> (var560:int -> X) -> X
    f_mem_1683: var574:int ->
                var573:int ->
                var572:int -> (var571:int -> (var570:int -> X) -> X) -> var567:int -> (var566:int -> X) -> X
  abstraction types:
    main_1681: X
    f_1689: v1:int -> X
    f_1690: v1:int -> v2:int -> X
    main_1040: v1:int -> v2:int -> (v3:unit -> X) -> X
    make_list_1035: var575:int ->
                    var576:int ->
                    (var577:int -> (var578:int -> (var579:int[var579 -> (
                                                              var576 = var579)] -> X) -> X) -> X) -> X
    f_make_list_1686: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> (v5:int -> X) -> X) -> X) ->
                      v9:int -> (v10:int -> (v11:int -> X) -> X) -> X
    cons_make_list_1113: v1:int ->
                         v2:int ->
                         v3:int ->
                         v4:int ->
                         (v5:int -> (v6:int -> X) -> X) -> (v9:int -> (v10:int -> (v11:int -> X) -> X) -> X) -> X
    f_main_1687: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> (v6:int -> (v7:int -> X) -> X) -> X
    is_nil_1038: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1688: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> (v6:int -> (v7:int -> X) -> X) -> v10:bool -> X
    mem_1030: var584:int ->
              var585:int ->
              (var586:int -> (var587:int[var587 -> (var584 = var587)] -> X) -> X) -> (var590:bool -> X) -> X
    br_mem_1692: v1:bool -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> (v8:bool -> X) -> X
    f_cons_make_list_1685: v1:int ->
                           v2:int ->
                           v3:int -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> v9:int -> (v10:int -> X) -> X
    f_mem_1682: v1:int -> v2:int -> (v3:bool -> X) -> (v5:int -> (v6:int -> X) -> X) -> v9:int -> X
    k_main_1588: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    fail_1694: v1:bool -> (v2:unit -> X) -> X
    f_1691: var557:int -> var556:int -> var555:unit -> X
    f_make_list_1684: var563:int -> var562:int -> var561:int -> (var560:int -> X) -> X
    f_mem_1683: var574:int ->
                var573:int ->
                var572:int -> (var571:int -> (var570:int -> X) -> X) -> var567:int -> (var566:int -> X) -> X
  
end AbsTypeInfer.refine(31480)[1] (14.360817 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 1; 1; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1681
  main_1681 -> (rand_int f_1689)
  br_mem_1692 b_1693 x_1031 xs1_1032 xs2_1032 k_mem_1190 when b_1693 ->
      (xs2_1032 0 (f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032))
  br_mem_1692 b_1693 x_1031 xs1_1032 xs2_1032 k_mem_1190 when (not b_1693) -> _|_
  cons_make_list_1113 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 k_make_list_cons_make_list_1372 ->
      (k_make_list_cons_make_list_1372 (xs1_1112 + 1) (f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112))
  f_1689 x_1606 -> (rand_int (f_1690 x_1606))
  f_1690 x_1606 x_1619 -> (main_1040 x_1606 x_1619 (f_1691 x_1606 x_1619))
  f_1691 x_1606 x_1619 x_1603 -> end
  f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 i_1110 k_make_list_cons_make_list_1387 when (
      i_1110 = 0) -> (k_make_list_cons_make_list_1387 x_1111)
  f_cons_make_list_1685 n_1036 x_1037 x_1111 xs1_1112 xs2_1112 i_1110 k_make_list_cons_make_list_1387 when (
      not (i_1110 = 0)) -> (xs2_1112 (i_1110 - 1) k_make_list_cons_make_list_1387)
  f_main_1687 m_1042 n_1041 k_main_1508 x1_1514 x2_1514 ->
      (is_nil_1038 x1_1514 x2_1514 (f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514))
  f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514 b_1589 when b_1589 ->
      (k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 true)
  f_main_1688 m_1042 n_1041 x1_1514 k_main_1508 x2_1514 b_1589 when (
      not b_1589) -> (mem_1030 m_1042 x1_1514 x2_1514 (k_main_1588 m_1042 n_1041 x1_1514 k_main_1508))
  f_make_list_1684 n_1036 x_1037 x_1117 k_make_list_1325 -> _|_
  f_make_list_1686 n_1036 x_1037 k_make_list_1313 x1_1451 x2_1451 ->
      (cons_make_list_1113 n_1036 x_1037 x_1037 x1_1451 x2_1451 k_make_list_1313)
  f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032 x_1237 when (x_1031 = x_1237) -> (k_mem_1190 true)
  f_mem_1682 x_1031 xs1_1032 k_mem_1190 xs2_1032 x_1237 when (not (x_1031 = x_1237)) ->
      (mem_1030 x_1031 (xs1_1032 - 1) (f_mem_1683 x_1031 x_1237 xs1_1032 xs2_1032) k_mem_1190)
  f_mem_1683 x_1031 x_1237 xs1_1032 xs2_1032 x_1084 k_mem_xs_1223 -> (xs2_1032 (x_1084 + 1) k_mem_xs_1223)
  fail_1694 b k -> {fail} => (k ())
  is_nil_1038 xs1_1039 xs2_1039 k_is_nil_1484 when (xs1_1039 = 0) -> (k_is_nil_1484 true)
  is_nil_1038 xs1_1039 xs2_1039 k_is_nil_1484 when (not (xs1_1039 = 0)) -> (k_is_nil_1484 false)
  k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 b_1600 when b_1600 -> (k_main_1508 ())
  k_main_1588 m_1042 n_1041 x1_1514 k_main_1508 b_1600 when (not b_1600) -> (fail_1694 true k_main_1508)
  main_1040 n_1041 m_1042 k_main_1508 -> (make_list_1035 n_1041 m_1042 (f_main_1687 m_1042 n_1041 k_main_1508))
  make_list_1035 n_1036 x_1037 k_make_list_1313 when (n_1036 < 0) ->
      (k_make_list_1313 0 (f_make_list_1684 n_1036 x_1037))
  make_list_1035 n_1036 x_1037 k_make_list_1313 when (not (n_1036 < 0)) ->
      (make_list_1035 (n_1036 - 1) x_1037 (f_make_list_1686 n_1036 x_1037 k_make_list_1313))
  mem_1030 x_1031 xs1_1032 xs2_1032 k_mem_1190 when (xs1_1032 = 0) -> (k_mem_1190 false)
  mem_1030 x_1031 xs1_1032 xs2_1032 k_mem_1190 when (not (xs1_1032 = 0)) ->
      (br_mem_1692 (1 <= xs1_1032) x_1031 xs1_1032 xs2_1032 k_mem_1190)
Types:
  main_1681 : X
  fail_1694 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1035 : (int -> x_2:int -> (x_4:int[x_4 = 0] -> (int -> (x_8:int[x_2 = x_8] -> X) -> X) -> X) -> X)
  mem_1030 : (x_1:int ->
              x_2:int[(not (x_2 = 0))] -> (int -> (x_6:int[x_1 = x_6] -> X) -> X) -> (x_10:bool[x_10] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  make_list: ((int -> (x_2:int -> ((Top list|x_3:x_3 = 0|) \/ ({x_7:int | x_2 = x_7} list|x_5:x_5 <> 0|)))) /\ 
              (int ->
                   (x_9:int ->
                        (({x_12:int | x_9 = x_12} list|x_10:x_10 = 0|) \/ 
                         ({x_15:int | x_9 = x_15} list|x_13:x_13 <> 0|)))))
  mem: (x_1:int -> (({x_6:int | x_1 = x_6} list|x_4:x_4 <> 0|) -> {true}))

cycles: 3
total: 15.033 sec
  abst: 0.028 sec
  mc: 0.039 sec
  refine: 14.731 sec
    exparam: 0.124 sec
