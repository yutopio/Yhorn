MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi dotprod3.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 des_1034 i_1035 x_1036 j_1037 = if i_1035 = j_1037 then
                                                   x_1036
                                                 else
                                                   des_1034 i_1035 
 in
 let rec dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 =
   if i_1042 >= n_1039 then
     sum_1043
   else
     dotprod_1038 n_1039 v1_1040 v2_1041 (i_1042 + 1) (sum_1043 + (v1_1040 i_1042 * v2_1041 i_1042)) 
 in
 let main_1044 n_1045 =
   let v1_1046 = make_array_1030 n_1045 
   in
   let v2_1047 = make_array_1030 n_1045 
   in
   let u_1164 = dotprod_1038 n_1045 v1_1046 v2_1047 0 0 
   in
     () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 des_1034 i_1035 x_1036 j_1037 = if i_1035 = j_1037 then
                                                   x_1036
                                                 else
                                                   des_1034 i_1035 
 in
 let rec dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 =
   if i_1042 >= n_1039 then
     sum_1043
   else
     dotprod_1038 n_1039 v1_1040 v2_1041 (i_1042 + 1) (sum_1043 + (v1_1040 i_1042 * v2_1041 i_1042)) 
 in
 let main_1044 n_1045 =
   let v1_1046 = make_array_1030 n_1045 
   in
   let v2_1047 = make_array_1030 n_1045 
   in
   let u_1164 = dotprod_1038 n_1045 v1_1046 v2_1047 0 0 
   in
     () 
 in
 let main_1166 = let arg1_1165 = rand_int () 
                 in
                   main_1044 arg1_1165 
 in
   ()

copy_poly::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let update_1033 (des_1034:(unit -> unit)) (i_1035:unit) (x_1036:unit) (j_1037:unit) =
   if i_1035 = j_1037 then
     x_1036
   else
     des_1034 i_1035 
 in
 let rec dotprod_1038 (n_1039:int) (v1_1040:(int -> int)) (v2_1041:(int -> int)) (i_1042:int) (sum_1043:int) =
   if i_1042 >= n_1039 then
     sum_1043
   else
     dotprod_1038 n_1039 v1_1040 v2_1041 (i_1042 + 1) (sum_1043 + (v1_1040 i_1042 * v2_1041 i_1042)) 
 in
 let main_1044 (n_1045:int) =
   let v1_1046 = make_array_1030 n_1045 
   in
   let v2_1047 = make_array_1030 n_1045 
   in
   let u_1164 = dotprod_1038 n_1045 v1_1046 v2_1047 0 0 
   in
     () 
 in
 let main_1166 = let arg1_1165 = rand_int () 
                 in
                   main_1044 arg1_1165 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1194:(int -> X)) =
   let k_make_array_u_1211 (x_1197:unit) = k_make_array_1194 0 
   in
   let k_make_array_u_1200 (b_1212:bool) =
     if b_1212 then
       k_make_array_u_1211 ()
     else
       {|fail|} () k_make_array_u_1211 
   in
     if 0 <= i_1032 then
       k_make_array_u_1200 (i_1032 < n_1031)
     else
       k_make_array_u_1200 false 
 in
 let update_1033
   (des_1034:(unit -> ((unit -> X) -> X))) (i_1035:unit) (x_1036:unit) (j_1037:unit) (k_update_1247:(
   unit -> X)) = if i_1035 = j_1037 then
                   k_update_1247 x_1036
                 else
                   des_1034 i_1035 k_update_1247 
 in
 let rec dotprod_1038
   (n_1039:int) (v1_1040:(int -> ((int -> X) -> X))) (v2_1041:(int -> ((int -> X) -> X))) (i_1042:int) (sum_1043:int) (k_dotprod_1311:(
   int -> X)) =
   if i_1042 >= n_1039 then
     k_dotprod_1311 sum_1043
   else
     v1_1040 i_1042
       (fun x_1337 ->
          v2_1041 i_1042
            (fun x_1338 ->
               dotprod_1038 n_1039 v1_1040 v2_1041 (i_1042 + 1) (sum_1043 + (x_1337 * x_1338)) k_dotprod_1311)) 
 in
 let main_1044 (n_1045:int) (k_main_1383:(unit -> X)) =
   dotprod_1038 n_1045 (make_array_1030 n_1045) (make_array_1030 n_1045) 0 0 (fun x_1418 -> k_main_1383 ()) 
 in
   rand_int_cps () (fun x_1450 -> main_1044 x_1450 (fun x_1447 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1475
  main_1475 -> (rand_int f_1479)
  dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 when (
      i_1042 >= n_1039) -> (k_dotprod_1311 sum_1043)
  dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 when (
      not (i_1042 >= n_1039)) ->
      (v1_1040 i_1042 (f_dotprod_1476 i_1042 n_1039 sum_1043 k_dotprod_1311 v1_1040 v2_1041))
  f_1479 x_1450 -> (main_1044 x_1450 (f_1480 x_1450))
  f_1480 x_1450 x_1447 -> end
  f_dotprod_1476 i_1042 n_1039 sum_1043 k_dotprod_1311 v1_1040 v2_1041 x_1337 ->
      (v2_1041 i_1042 (f_dotprod_1477 i_1042 n_1039 sum_1043 x_1337 k_dotprod_1311 v1_1040 v2_1041))
  f_dotprod_1477 i_1042 n_1039 sum_1043 x_1337 k_dotprod_1311 v1_1040 v2_1041 x_1338 ->
      (dotprod_1038 n_1039 v1_1040 v2_1041 (i_1042 + 1) (sum_1043 + (x_1337 * x_1338)) k_dotprod_1311)
  f_main_1478 n_1045 k_main_1383 x_1418 -> (k_main_1383 ())
  fail_1481 b k -> {fail} => (k ())
  k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 when b_1212 ->
      (k_make_array_u_1211 i_1032 n_1031 k_make_array_1194 ())
  k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 when (not b_1212) ->
      (fail_1481 true (k_make_array_u_1211 i_1032 n_1031 k_make_array_1194))
  k_make_array_u_1211 i_1032 n_1031 k_make_array_1194 x_1197 -> (k_make_array_1194 0)
  main_1044 n_1045 k_main_1383 ->
      (dotprod_1038 n_1045 (make_array_1030 n_1045) (make_array_1030 n_1045) 0 0 (f_main_1478 n_1045 k_main_1383))
  make_array_1030 n_1031 i_1032 k_make_array_1194 when (0 <= i_1032) ->
      (k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1194 when (not (0 <= i_1032)) ->
      (k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 false)
  update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 when (= i_1035 j_1037) -> (k_update_1247 x_1036)
  update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 when (not (= i_1035 j_1037)) ->
      (des_1034 i_1035 k_update_1247)
Types:
  main_1475 : X
  dotprod_1038 : (int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X)
  fail_1481 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1475 ... --> 
  f_1479 ... --> 
  main_1044 ... --> 
  dotprod_1038 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1200 [2/2] ... --> 
  fail_1481 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(158)[1]
  program:
    main_1475  | true = ((Random.int 0) f_1479)
    dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 | (
    i_1042 >= n_1039) = (k_dotprod_1311 sum_1043)
    dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 | (
    not (i_1042 >= n_1039)) = (v1_1040 i_1042
                                       (f_dotprod_1476 i_1042
                                                       n_1039
                                                       sum_1043
                                                       k_dotprod_1311
                                                       v1_1040
                                                       v2_1041))
    f_1479 x_1450 | true = (main_1044 x_1450
                                      (f_1480 x_1450))
    f_1480 x_1450 x_1447 | true = end
    f_dotprod_1476 i_1042 n_1039 sum_1043 k_dotprod_1311 v1_1040 v2_1041 x_1337 | true = (
    v2_1041 i_1042
            (f_dotprod_1477 i_1042
                            n_1039
                            sum_1043
                            x_1337
                            k_dotprod_1311
                            v1_1040
                            v2_1041))
    f_dotprod_1477 i_1042 n_1039 sum_1043 x_1337 k_dotprod_1311 v1_1040 v2_1041 x_1338 | true = (
    dotprod_1038 n_1039
                 v1_1040
                 v2_1041
                 (i_1042 + 1)
                 (sum_1043 + (x_1337 * x_1338))
                 k_dotprod_1311)
    f_main_1478 n_1045 k_main_1383 x_1418 | true = (k_main_1383 ())
    fail_1481 b k | true = (fail ())
    k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 | b_1212 = (
    k_make_array_u_1211 i_1032
                        n_1031
                        k_make_array_1194
                        ())
    k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 | (not b_1212) = (
    fail_1481 true
              (k_make_array_u_1211 i_1032
                                   n_1031
                                   k_make_array_1194))
    k_make_array_u_1211 i_1032 n_1031 k_make_array_1194 x_1197 | true = (
    k_make_array_1194 0)
    main_1044 n_1045 k_main_1383 | true = (dotprod_1038
                                             n_1045
                                             (make_array_1030 n_1045)
                                             (make_array_1030 n_1045)
                                             0
                                             0
                                             (f_main_1478 n_1045
                                                          k_main_1383))
    make_array_1030 n_1031 i_1032 k_make_array_1194 | (0 <= i_1032) = (
    k_make_array_u_1200 i_1032
                        n_1031
                        k_make_array_1194
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1194 | (not (0 <= i_1032)) = (
    k_make_array_u_1200 i_1032
                        n_1031
                        k_make_array_1194
                        false)
    update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 | (i_1035 = j_1037) = (
    k_update_1247 x_1036)
    update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 | (not (i_1035 = j_1037)) = (
    des_1034 i_1035
             k_update_1247)
    main_1475:X
    dotprod_1038:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1479:int -> X
    f_1480:int -> unit -> X
    f_dotprod_1476:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1477:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1478:int -> (unit -> X) -> int -> X
    fail_1481:bool -> (unit -> X) -> X
    k_make_array_u_1200:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1211:int -> int -> (int -> X) -> unit -> X
    main_1044:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1033:(unit -> (unit -> X) -> X) -> unit -> unit -> unit -> (unit -> X) -> X
  inlined functions: f_1479,f_1480,f_dotprod_1476,f_dotprod_1477,f_main_1478,k_make_array_u_1200,k_make_array_u_1211,main_1044,make_array_1030,update_1033
  counterexample: 0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1479@4:0> = var2)
     [true.(<main_1044@6:0> = <f_1479@4:0>)
      [true.((<dotprod_1038@8:0> = <main_1044@6:0>) && ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0)))
       [(not (<dotprod_1038@8:3> >= <dotprod_1038@8:0>)).(<<dotprod_1038@8:1>@11:0> = <dotprod_1038@8:3>)
        [true.((<make_array_1030@13:0> = <main_1044@6:0>) && (<make_array_1030@13:1> = <<dotprod_1038@8:1>@11:0>))
         [(not (0 <= <make_array_1030@13:1>)).
          ((<k_make_array_u_1200@16:0> = <make_array_1030@13:1>) &&
           ((<k_make_array_u_1200@16:1> = <make_array_1030@13:0>) && (<k_make_array_u_1200@16:3> = false)))
          [(not <k_make_array_u_1200@16:3>).(<fail_1481@19:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(159)[2]
    horn clauses:
      P[<fail_1481@19:0>](<fail_1481@19:0>:bool)|- bot
      
      P[<k_make_array_u_1200@16:3>](<k_make_array_u_1200@16:0>:int,<k_make_array_u_1200@16:1>:int,false:bool),
      <fail_1481@19:0> |- P[<fail_1481@19:0>](<fail_1481@19:0>:bool)
      
      P[<make_array_1030@13:1>](<k_make_array_u_1200@16:1>:int,<k_make_array_u_1200@16:0>:int),
      ((0 > <k_make_array_u_1200@16:0>) && (not <k_make_array_u_1200@16:3>))
      |- P[<k_make_array_u_1200@16:3>](<k_make_array_u_1200@16:0>:int,
                                       <k_make_array_u_1200@16:1>:int,
                                       <k_make_array_u_1200@16:3>:bool)
      
      P[<main_1044@6:0>](<make_array_1030@13:0>:int),
      P[<<dotprod_1038@8:1>@11:0>](<make_array_1030@13:0>:int,<make_array_1030@13:1>:int)|- P[<make_array_1030@13:1>](
      <make_array_1030@13:0>:int,<make_array_1030@13:1>:int)
      
      P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int,<dotprod_1038@8:4>:int),
      (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>)
      |- P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int)
      
      P[<main_1044@6:0>](<dotprod_1038@8:0>:int), ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
      |- P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,
                               <dotprod_1038@8:4>:int)
      
      P[<f_1479@4:0>](<main_1044@6:0>:int)|- P[<main_1044@6:0>](<main_1044@6:0>:int)
      
      |- P[<f_1479@4:0>](<f_1479@4:0>:int)
    call trees:
      <main_1475@1>
        <f_1479@4>
          <main_1044@6>
            <dotprod_1038@8>
            </<dotprod_1038@8:1>@11>
            <make_array_1030@13>
              <k_make_array_u_1200@16>
                <fail_1481@19>
    inlined horn clauses:
      P[<fail_1481@19:0>](<fail_1481@19:0>:bool)|- bot
      
      P[<<dotprod_1038@8:1>@11:0>](<k_make_array_u_1200@16:1>:int,<k_make_array_u_1200@16:0>:int),
      ((0 > <k_make_array_u_1200@16:0>) && <fail_1481@19:0>) |- P[<fail_1481@19:0>](
      <fail_1481@19:0>:bool)
      
      P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int,<dotprod_1038@8:4>:int),
      (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>)
      |- P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int)
      
       ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
      |- P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,
                               <dotprod_1038@8:4>:int)
    begin ParamSubstInfer.infer(1044)[3]
      
    end ParamSubstInfer.infer(1044)[3] (0.018997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1046)[3]
      
    end RefTypeInfer.elim_coeffs(1046)[3] (0.001000 sec.)
    begin GenHcSolver.solve(1189)[3]
      Horn clauses:
        P[<fail_1481@19:0>](<fail_1481@19:0>:bool)|- bot
        
        P[<<dotprod_1038@8:1>@11:0>](<k_make_array_u_1200@16:1>:int,<k_make_array_u_1200@16:0>:int),
        ((0 > <k_make_array_u_1200@16:0>) && <fail_1481@19:0>) |- P[<fail_1481@19:0>](
        <fail_1481@19:0>:bool)
        
        P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int,<dotprod_1038@8:4>:int),
        (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>)
        |- P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int)
        
         ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
        |- P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,
                                 <dotprod_1038@8:4>:int)
      lower bounds:
        P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,<dotprod_1038@8:4>:int) =
        ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
        P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int) =
        ((<<dotprod_1038@8:1>@11:0> = 0) && (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>))
        P[<fail_1481@19:0>](<fail_1481@19:0>:bool) = false
      upper bounds:
        P[<fail_1481@19:0>](var4:bool) = true
      begin GenHcSolver.classify_pids(2189)[4]
        output:
          [<fail_1481@19:0>]
      end GenHcSolver.classify_pids(2189)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2192)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2193)[5]
          begin InterpProver.interpolate_fresh(2194)[6]
            begin InterpProver.interpolate_log(2195)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2196)[8]
                begin InterpProver.interpolate_simplify(2197)[9]
                  begin InterpProver.interpolate_quick(2210)[10]
                    
                  end InterpProver.interpolate_quick(2210)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2214)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2214)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2197)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2196)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2195)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2194)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2193)[5] (0.000000 sec.)
        output:
          P[<fail_1481@19:0>](<fail_1481@19:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2192)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1038@8:1>@11:0>](<k_make_array_u_1200@16:1>:int,<k_make_array_u_1200@16:0>:int),
        (0 > <k_make_array_u_1200@16:0>) |- bot
        
        P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int,<dotprod_1038@8:4>:int),
        (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>)
        |- P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int)
        
         ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
        |- P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,
                                 <dotprod_1038@8:4>:int)
      lower bounds:
        P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,<dotprod_1038@8:4>:int) =
        ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
        P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int) =
        ((<<dotprod_1038@8:1>@11:0> = 0) && (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>))
      upper bounds:
        P[<<dotprod_1038@8:1>@11:0>](var5:int,var6:int) = (0 <= var6)
      begin GenHcSolver.classify_pids(3330)[4]
        output:
          [<<dotprod_1038@8:1>@11:0>]
      end GenHcSolver.classify_pids(3330)[4] (0.000000 sec.)
      lb:((<<dotprod_1038@8:1>@11:0> = 0) && (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>))
      nub:(not (0 <= <<dotprod_1038@8:1>@11:0>))
      begin ApronInterface.convex_hull_interpolate(3333)[4]
        lb:((<<dotprod_1038@8:1>@11:0> = 0) && (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>))
        nub:(not (0 <= <<dotprod_1038@8:1>@11:0>))
        lb':((<<dotprod_1038@8:1>@11:0> = 0) && (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>))
        nub':(not (0 <= <<dotprod_1038@8:1>@11:0>))
        begin InterpProver.interpolate(3334)[5]
          begin InterpProver.interpolate_fresh(3335)[6]
            begin InterpProver.interpolate_log(3336)[7]
              input1: ((<<dotprod_1038@8:1>@11:0> = 0) && (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>))
              input2: (not (0 <= <<dotprod_1038@8:1>@11:0>))
              begin InterpProver.interpolate_check(3337)[8]
                begin InterpProver.interpolate_simplify(3338)[9]
                  begin InterpProver.interpolate_quick(3371)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(3380)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(3381)[12]
                        begin CsisatInterface.interpolate_csisat_log(3382)[13]
                          input1: (0 = v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0 & (1 + v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0) <= v_sep_dotprod_1038_sep_8_sep_0)
                          input2: (1 + v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(3383)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(3383)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(3382)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(3381)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(3380)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(3371)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3338)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3337)[8] (0.000999 sec.)
              output: (0 <= <<dotprod_1038@8:1>@11:0>)
            end InterpProver.interpolate_log(3336)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(3335)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(3334)[5] (0.000999 sec.)
        output:
          P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int) =
          (0 <= <<dotprod_1038@8:1>@11:0>)
      end ApronInterface.convex_hull_interpolate(3333)[4] (0.000999 sec.)
      Horn clauses:
        P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int,<dotprod_1038@8:4>:int),
        ((<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>) && (0 > <<dotprod_1038@8:1>@11:0>)) |- bot
        
         ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
        |- P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,
                                 <dotprod_1038@8:4>:int)
      lower bounds:
        P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,<dotprod_1038@8:4>:int) =
        ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
      upper bounds:
        P[<dotprod_1038@8:4>](var7:int,var8:int,var9:int) = ((var8 >= var7) || (0 <= var8))
      begin GenHcSolver.classify_pids(4233)[4]
        output:
          [<dotprod_1038@8:4>]
      end GenHcSolver.classify_pids(4233)[4] (0.000000 sec.)
      lb:((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
      nub:(not ((<dotprod_1038@8:3> >= <dotprod_1038@8:0>) || (0 <= <dotprod_1038@8:3>)))
      begin ApronInterface.convex_hull_interpolate(4236)[4]
        lb:((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
        nub:(not ((<dotprod_1038@8:3> >= <dotprod_1038@8:0>) || (0 <= <dotprod_1038@8:3>)))
        lb':((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
        nub':(not ((<dotprod_1038@8:3> >= <dotprod_1038@8:0>) || (0 <= <dotprod_1038@8:3>)))
        begin InterpProver.interpolate(4237)[5]
          begin InterpProver.interpolate_fresh(4238)[6]
            begin InterpProver.interpolate_log(4239)[7]
              input1: ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
              input2: (not ((<dotprod_1038@8:3> >= <dotprod_1038@8:0>) || (0 <= <dotprod_1038@8:3>)))
              begin InterpProver.interpolate_check(4240)[8]
                begin InterpProver.interpolate_simplify(4241)[9]
                  begin InterpProver.interpolate_quick(4293)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(4302)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(4303)[12]
                        begin CsisatInterface.interpolate_csisat_log(4304)[13]
                          input1: 0 = v_sep_dotprod_1038_sep_8_sep_3
                          input2: ((1 + v_sep_dotprod_1038_sep_8_sep_3) <= 0 & (1 + v_sep_dotprod_1038_sep_8_sep_3) <= v_sep_dotprod_1038_sep_8_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(4305)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(4305)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1038_sep_8_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(4304)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1038_sep_8_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1038_sep_8_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(4303)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(4302)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(4293)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4241)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(4240)[8] (0.002000 sec.)
              output: (0 <= <dotprod_1038@8:3>)
            end InterpProver.interpolate_log(4239)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(4238)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(4237)[5] (0.002000 sec.)
        output:
          P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,<dotprod_1038@8:4>:int) =
          (0 <= <dotprod_1038@8:3>)
      end ApronInterface.convex_hull_interpolate(4236)[4] (0.002000 sec.)
      begin HcSolver.check_validity(4446)[4]
        input:
          P[<fail_1481@19:0>](<fail_1481@19:0>:bool)|- bot
          
          P[<<dotprod_1038@8:1>@11:0>](<k_make_array_u_1200@16:1>:int,<k_make_array_u_1200@16:0>:int),
          ((0 > <k_make_array_u_1200@16:0>) && <fail_1481@19:0>) |- P[<fail_1481@19:0>](
          <fail_1481@19:0>:bool)
          
          P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int,<dotprod_1038@8:4>:int),
          (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>)
          |- P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int)
          
           ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
          |- P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,
                                   <dotprod_1038@8:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(4446)[4] (0.001000 sec.)
      solution:
        P[<fail_1481@19:0>](<fail_1481@19:0>:bool) = false
        P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int) =
        (0 <= <<dotprod_1038@8:1>@11:0>)
        P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,<dotprod_1038@8:4>:int) =
        (0 <= <dotprod_1038@8:3>)
    end GenHcSolver.solve(1189)[3] (0.017997 sec.)
    begin GenHcSolver.solve(4702)[3]
      Horn clauses:
        P[<fail_1481@19:0>](<fail_1481@19:0>:bool)|- bot
        
        P[<<dotprod_1038@8:1>@11:0>](<k_make_array_u_1200@16:1>:int,<k_make_array_u_1200@16:0>:int),
        ((0 > <k_make_array_u_1200@16:0>) && <fail_1481@19:0>) |- P[<fail_1481@19:0>](
        <fail_1481@19:0>:bool)
        
        P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int,<dotprod_1038@8:4>:int),
        (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>)
        |- P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int)
        
         ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
        |- P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,
                                 <dotprod_1038@8:4>:int)
      lower bounds:
        P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,<dotprod_1038@8:4>:int) =
        ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
        P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int) =
        ((<<dotprod_1038@8:1>@11:0> = 0) && (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>))
        P[<fail_1481@19:0>](<fail_1481@19:0>:bool) = false
      upper bounds:
        P[<fail_1481@19:0>](var11:bool) = true
      begin GenHcSolver.classify_pids(5702)[4]
        output:
          [<fail_1481@19:0>]
      end GenHcSolver.classify_pids(5702)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(5705)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(5708)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5708)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5713)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5713)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(5716)[5]
          begin InterpProver.interpolate_fresh(5717)[6]
            begin InterpProver.interpolate_log(5718)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(5719)[8]
                begin InterpProver.interpolate_simplify(5720)[9]
                  begin InterpProver.interpolate_quick(5735)[10]
                    
                  end InterpProver.interpolate_quick(5735)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(5739)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(5739)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5720)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5719)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(5718)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(5717)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(5716)[5] (0.000000 sec.)
        output:
          P[<fail_1481@19:0>](<fail_1481@19:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(5705)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1038@8:1>@11:0>](<k_make_array_u_1200@16:1>:int,<k_make_array_u_1200@16:0>:int),
        (0 > <k_make_array_u_1200@16:0>) |- bot
        
        P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int,<dotprod_1038@8:4>:int),
        (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>)
        |- P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int)
        
         ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
        |- P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,
                                 <dotprod_1038@8:4>:int)
      lower bounds:
        P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,<dotprod_1038@8:4>:int) =
        ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
        P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int) =
        ((<<dotprod_1038@8:1>@11:0> = 0) && (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>))
      upper bounds:
        P[<<dotprod_1038@8:1>@11:0>](var12:int,var13:int) = (0 <= var13)
      begin GenHcSolver.classify_pids(6862)[4]
        output:
          [<<dotprod_1038@8:1>@11:0>]
      end GenHcSolver.classify_pids(6862)[4] (0.000000 sec.)
      lb:((<<dotprod_1038@8:1>@11:0> = 0) && (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>))
      nub:(not (0 <= <<dotprod_1038@8:1>@11:0>))
      begin ApronInterface.convex_hull_interpolate(6865)[4]
        lb:((<<dotprod_1038@8:1>@11:0> = 0) && (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>))
        nub:(not (0 <= <<dotprod_1038@8:1>@11:0>))
        begin ExtFormula.Formula.case_analysis_boolean(6877)[5]
          ts: ((<<dotprod_1038@8:1>@11:0> = 0) && (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(6877)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(6886)[5]
          ts: (0 > <<dotprod_1038@8:1>@11:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(6886)[5] (0.000000 sec.)
        lb':((<<dotprod_1038@8:1>@11:0> = 0) && ((-1 + <dotprod_1038@8:0>) >= 0))
        nub':((-1 + (-1 * <<dotprod_1038@8:1>@11:0>)) >= 0)
        begin InterpProver.interpolate(6890)[5]
          begin InterpProver.interpolate_fresh(6891)[6]
            begin InterpProver.interpolate_log(6892)[7]
              input1: ((<<dotprod_1038@8:1>@11:0> = 0) && ((-1 + <dotprod_1038@8:0>) >= 0))
              input2: ((-1 + (-1 * <<dotprod_1038@8:1>@11:0>)) >= 0)
              begin InterpProver.interpolate_check(6893)[8]
                begin InterpProver.interpolate_simplify(6894)[9]
                  begin InterpProver.interpolate_quick(6931)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(6940)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(6941)[12]
                        begin CsisatInterface.interpolate_csisat_log(6942)[13]
                          input1: (0 = v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0 & 1 <= v_sep_dotprod_1038_sep_8_sep_0)
                          input2: (1 + v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(6943)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(6943)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(6942)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(6941)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(6940)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(6931)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(6894)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(6893)[8] (0.002000 sec.)
              output: (0 <= <<dotprod_1038@8:1>@11:0>)
            end InterpProver.interpolate_log(6892)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(6891)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(6890)[5] (0.002000 sec.)
        output:
          P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int) =
          (0 <= <<dotprod_1038@8:1>@11:0>)
      end ApronInterface.convex_hull_interpolate(6865)[4] (0.002000 sec.)
      Horn clauses:
        P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int,<dotprod_1038@8:4>:int),
        ((<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>) && (0 > <<dotprod_1038@8:1>@11:0>)) |- bot
        
         ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
        |- P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,
                                 <dotprod_1038@8:4>:int)
      lower bounds:
        P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,<dotprod_1038@8:4>:int) =
        ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
      upper bounds:
        P[<dotprod_1038@8:4>](var14:int,var15:int,var16:int) = ((var15 >= var14) || (0 <= var15))
      begin GenHcSolver.classify_pids(7800)[4]
        output:
          [<dotprod_1038@8:4>]
      end GenHcSolver.classify_pids(7800)[4] (0.000000 sec.)
      lb:((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
      nub:(not ((<dotprod_1038@8:3> >= <dotprod_1038@8:0>) || (0 <= <dotprod_1038@8:3>)))
      begin ApronInterface.convex_hull_interpolate(7803)[4]
        lb:((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
        nub:(not ((<dotprod_1038@8:3> >= <dotprod_1038@8:0>) || (0 <= <dotprod_1038@8:3>)))
        begin ExtFormula.Formula.case_analysis_boolean(7811)[5]
          ts: ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
          
        end ExtFormula.Formula.case_analysis_boolean(7811)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(7830)[5]
          ts: ((<dotprod_1038@8:3> < <dotprod_1038@8:0>) && (0 > <dotprod_1038@8:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(7830)[5] (0.000000 sec.)
        lb':((<dotprod_1038@8:4> = 0) && (<dotprod_1038@8:3> = 0))
        nub':(((-1 + (-1 * <dotprod_1038@8:3>)) >= 0) && (((-1 + (-1 * <dotprod_1038@8:3>)) + <dotprod_1038@8:0>) >= 0))
        begin InterpProver.interpolate(7836)[5]
          begin InterpProver.interpolate_fresh(7837)[6]
            begin InterpProver.interpolate_log(7838)[7]
              input1: ((<dotprod_1038@8:4> = 0) && (<dotprod_1038@8:3> = 0))
              input2: (((-1 + (-1 * <dotprod_1038@8:3>)) >= 0) &&
                       (((-1 + (-1 * <dotprod_1038@8:3>)) + <dotprod_1038@8:0>) >= 0))
              begin InterpProver.interpolate_check(7839)[8]
                begin InterpProver.interpolate_simplify(7840)[9]
                  begin InterpProver.interpolate_quick(7904)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(7913)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(7914)[12]
                        begin CsisatInterface.interpolate_csisat_log(7915)[13]
                          input1: 0 = v_sep_dotprod_1038_sep_8_sep_3
                          input2: ((1 + v_sep_dotprod_1038_sep_8_sep_3) <= 0 & (1 + v_sep_dotprod_1038_sep_8_sep_3) <= v_sep_dotprod_1038_sep_8_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(7916)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(7916)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1038_sep_8_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(7915)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1038_sep_8_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1038_sep_8_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(7914)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(7913)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(7904)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(7840)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(7839)[8] (0.002000 sec.)
              output: (0 <= <dotprod_1038@8:3>)
            end InterpProver.interpolate_log(7838)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(7837)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(7836)[5] (0.002000 sec.)
        output:
          P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,<dotprod_1038@8:4>:int) =
          (0 <= <dotprod_1038@8:3>)
      end ApronInterface.convex_hull_interpolate(7803)[4] (0.003000 sec.)
      begin HcSolver.check_validity(8061)[4]
        input:
          P[<fail_1481@19:0>](<fail_1481@19:0>:bool)|- bot
          
          P[<<dotprod_1038@8:1>@11:0>](<k_make_array_u_1200@16:1>:int,<k_make_array_u_1200@16:0>:int),
          ((0 > <k_make_array_u_1200@16:0>) && <fail_1481@19:0>) |- P[<fail_1481@19:0>](
          <fail_1481@19:0>:bool)
          
          P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int,<dotprod_1038@8:4>:int),
          (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>)
          |- P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int)
          
           ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
          |- P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,
                                   <dotprod_1038@8:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(8061)[4] (0.001999 sec.)
      solution:
        P[<fail_1481@19:0>](<fail_1481@19:0>:bool) = false
        P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int) =
        (0 <= <<dotprod_1038@8:1>@11:0>)
        P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,<dotprod_1038@8:4>:int) =
        (0 <= <dotprod_1038@8:3>)
    end GenHcSolver.solve(4702)[3] (0.019997 sec.)
    begin YhornInterface.solve(8317)[3]
      begin HcSolver.solve_ub(8318)[4]
        encoded:
          P[<fail_1481@19:0>](<fail_1481@19:0>:int)|- bot
          
          P[<<dotprod_1038@8:1>@11:0>](<k_make_array_u_1200@16:1>:int,<k_make_array_u_1200@16:0>:int),
          ((0 > <k_make_array_u_1200@16:0>) && (<fail_1481@19:0> = 1)) |- P[<fail_1481@19:0>](
          <fail_1481@19:0>:int)
          
          P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int,<dotprod_1038@8:4>:int),
          (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>)
          |- P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int)
          
           ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
          |- P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,
                                   <dotprod_1038@8:4>:int)
        input to Yhorn:
          P[<fail_1481@19:0>](<fail_1481@19:0>:int)|- bot
          
          P[<<dotprod_1038@8:1>@11:0>](<k_make_array_u_1200@16:1>:int,<k_make_array_u_1200@16:0>:int),
          ((0 > <k_make_array_u_1200@16:0>) && (<fail_1481@19:0> = 1)) |- P[<fail_1481@19:0>](
          <fail_1481@19:0>:int)
          
          P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int,<dotprod_1038@8:4>:int),
          (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>)
          |- P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int)
          
           ((<dotprod_1038@8:4> = 0) && (<dotprod_1038@8:3> = 0))
          |- P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,
                                   <dotprod_1038@8:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1481_sep_19_sep_0($8)) -> 1=0.
(($8-1=0) & (-$9>0)) & (v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0($10,$9)) -> v_sep_fail_1481_sep_19_sep_0($8).
($11-$12<0) & (v_sep_dotprod_1038_sep_8_sep_4($12,$11,$13)) -> v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0($12,$11).
($14=0) & ($13=0) -> v_sep_dotprod_1038_sep_8_sep_4($12,$14,$13).


v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0: X
v_sep_dotprod_1038_sep_8_sep_4: X
v_sep_fail_1481_sep_19_sep_0: X
....
v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0: X
v_sep_dotprod_1038_sep_8_sep_4: X
v_sep_fail_1481_sep_19_sep_0: X
...
v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0: X
v_sep_dotprod_1038_sep_8_sep_4: X
v_sep_fail_1481_sep_19_sep_0: X
....
v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0: X
v_sep_dotprod_1038_sep_8_sep_4: X
v_sep_fail_1481_sep_19_sep_0: X
....(0=0) & (v_sep_fail_1481_sep_19_sep_0($8)) -> 1=0.
(($8-1=0) & (-$9>0)) & (v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0($10,$9)) -> v_sep_fail_1481_sep_19_sep_0($8).
($11-$12<0) & (v_sep_dotprod_1038_sep_8_sep_4($12,$11,$13)) -> v_sep_dotprod_1038_sep_8_sep_1_sep_11_sep_0($12,$11).
($14=0) & ($13=0) -> v_sep_dotprod_1038_sep_8_sep_4($12,$14,$13).

        solution:
          P[<<dotprod_1038@8:1>@11:0>]($18:int,$20:int) = (0 <= $20)
          P[<dotprod_1038@8:4>]($23:int,$25:int,$27:int) = (0 <= $25)
          P[<fail_1481@19:0>]($15:bool) = false
        
      end HcSolver.solve_ub(8318)[4] (0.014998 sec.)
      begin HcSolver.check_validity(8415)[4]
        input:
          P[<fail_1481@19:0>](<fail_1481@19:0>:bool)|- bot
          
          P[<<dotprod_1038@8:1>@11:0>](<k_make_array_u_1200@16:1>:int,<k_make_array_u_1200@16:0>:int),
          ((0 > <k_make_array_u_1200@16:0>) && <fail_1481@19:0>) |- P[<fail_1481@19:0>](
          <fail_1481@19:0>:bool)
          
          P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int,<dotprod_1038@8:4>:int),
          (<<dotprod_1038@8:1>@11:0> < <dotprod_1038@8:0>)
          |- P[<<dotprod_1038@8:1>@11:0>](<dotprod_1038@8:0>:int,<<dotprod_1038@8:1>@11:0>:int)
          
           ((<dotprod_1038@8:3> = 0) && (<dotprod_1038@8:4> = 0))
          |- P[<dotprod_1038@8:4>](<dotprod_1038@8:0>:int,<dotprod_1038@8:3>:int,
                                   <dotprod_1038@8:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(8415)[4] (0.006999 sec.)
      solution:
        P[<<dotprod_1038@8:1>@11:0>]($18:int,$20:int) = (0 <= $20)
        P[<dotprod_1038@8:4>]($23:int,$25:int,$27:int) = (0 <= $25)
        P[<fail_1481@19:0>]($15:bool) = false
    end YhornInterface.solve(8317)[3] (0.021997 sec.)
    
  end RefTypeInfer.infer_etrs(159)[2] (0.082987 sec.)
  refinement types:
    main_1475: X
    f_1479: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    dotprod_1038: v1:int ->
                  (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:{v11:int | (0 <= v10)} -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1200: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1481: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1480: var35:int -> var34:unit -> X
    f_dotprod_1476: var50:int ->
                    var49:int ->
                    var48:int ->
                    (var47:int -> X) ->
                    (var45:int -> (var44:int -> X) -> X) -> (var41:int -> (var40:int -> X) -> X) -> var37:int -> X
    f_dotprod_1477: var66:int ->
                    var65:int ->
                    var64:int ->
                    var63:int ->
                    (var62:int -> X) ->
                    (var60:int -> (var59:int -> X) -> X) -> (var56:int -> (var55:int -> X) -> X) -> var52:int -> X
    f_main_1478: var71:int -> (var70:unit -> X) -> var68:int -> X
    k_make_array_u_1211: var77:int -> var76:int -> (var75:int -> X) -> var73:unit -> X
    update_1033: (var87:unit -> (var86:unit -> X) -> X) ->
                 var83:unit -> var82:unit -> var81:unit -> (var80:unit -> X) -> X
  abstraction types:
    main_1475: X
    f_1479: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    dotprod_1038: v1:int ->
                  (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:int[v11 -> (
                                                                    0 <= v10)] -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1200: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1481: v1:bool -> (v2:unit -> X) -> X
    f_1480: var35:int -> var34:unit -> X
    f_dotprod_1476: var50:int ->
                    var49:int ->
                    var48:int ->
                    (var47:int -> X) ->
                    (var45:int -> (var44:int -> X) -> X) -> (var41:int -> (var40:int -> X) -> X) -> var37:int -> X
    f_dotprod_1477: var66:int ->
                    var65:int ->
                    var64:int ->
                    var63:int ->
                    (var62:int -> X) ->
                    (var60:int -> (var59:int -> X) -> X) -> (var56:int -> (var55:int -> X) -> X) -> var52:int -> X
    f_main_1478: var71:int -> (var70:unit -> X) -> var68:int -> X
    k_make_array_u_1211: var77:int -> var76:int -> (var75:int -> X) -> var73:unit -> X
    update_1033: (var87:unit -> (var86:unit -> X) -> X) ->
                 var83:unit -> var82:unit -> var81:unit -> (var80:unit -> X) -> X
  
end AbsTypeInfer.refine(158)[1] (0.086986 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1475
  main_1475 -> (rand_int f_1479)
  dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 when (
      i_1042 >= n_1039) -> (k_dotprod_1311 sum_1043)
  dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 when (
      not (i_1042 >= n_1039)) ->
      (v1_1040 i_1042 (f_dotprod_1476 i_1042 n_1039 sum_1043 k_dotprod_1311 v1_1040 v2_1041))
  f_1479 x_1450 -> (main_1044 x_1450 (f_1480 x_1450))
  f_1480 x_1450 x_1447 -> end
  f_dotprod_1476 i_1042 n_1039 sum_1043 k_dotprod_1311 v1_1040 v2_1041 x_1337 ->
      (v2_1041 i_1042 (f_dotprod_1477 i_1042 n_1039 sum_1043 x_1337 k_dotprod_1311 v1_1040 v2_1041))
  f_dotprod_1477 i_1042 n_1039 sum_1043 x_1337 k_dotprod_1311 v1_1040 v2_1041 x_1338 ->
      (dotprod_1038 n_1039 v1_1040 v2_1041 (i_1042 + 1) (sum_1043 + (x_1337 * x_1338)) k_dotprod_1311)
  f_main_1478 n_1045 k_main_1383 x_1418 -> (k_main_1383 ())
  fail_1481 b k -> {fail} => (k ())
  k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 when b_1212 ->
      (k_make_array_u_1211 i_1032 n_1031 k_make_array_1194 ())
  k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 when (not b_1212) ->
      (fail_1481 true (k_make_array_u_1211 i_1032 n_1031 k_make_array_1194))
  k_make_array_u_1211 i_1032 n_1031 k_make_array_1194 x_1197 -> (k_make_array_1194 0)
  main_1044 n_1045 k_main_1383 ->
      (dotprod_1038 n_1045 (make_array_1030 n_1045) (make_array_1030 n_1045) 0 0 (f_main_1478 n_1045 k_main_1383))
  make_array_1030 n_1031 i_1032 k_make_array_1194 when (0 <= i_1032) ->
      (k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1194 when (not (0 <= i_1032)) ->
      (k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 false)
  update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 when (= i_1035 j_1037) -> (k_update_1247 x_1036)
  update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 when (not (= i_1035 j_1037)) ->
      (des_1034 i_1035 k_update_1247)
Types:
  main_1475 : X
  dotprod_1038 : (int ->
                  (x_3:int[x_3 >= 0] -> (int -> X) -> X) ->
                  (int -> (int -> X) -> X) -> x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1481 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1475 ... --> 
  f_1479 ... --> 
  main_1044 ... --> 
  dotprod_1038 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1200 [2/2] ... --> 
  fail_1481 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(9037)[1]
  program:
    main_1475  | true = ((Random.int 0) f_1479)
    dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 | (
    i_1042 >= n_1039) = (k_dotprod_1311 sum_1043)
    dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 | (
    not (i_1042 >= n_1039)) = (v1_1040 i_1042
                                       (f_dotprod_1476 i_1042
                                                       n_1039
                                                       sum_1043
                                                       k_dotprod_1311
                                                       v1_1040
                                                       v2_1041))
    f_1479 x_1450 | true = (main_1044 x_1450
                                      (f_1480 x_1450))
    f_1480 x_1450 x_1447 | true = end
    f_dotprod_1476 i_1042 n_1039 sum_1043 k_dotprod_1311 v1_1040 v2_1041 x_1337 | true = (
    v2_1041 i_1042
            (f_dotprod_1477 i_1042
                            n_1039
                            sum_1043
                            x_1337
                            k_dotprod_1311
                            v1_1040
                            v2_1041))
    f_dotprod_1477 i_1042 n_1039 sum_1043 x_1337 k_dotprod_1311 v1_1040 v2_1041 x_1338 | true = (
    dotprod_1038 n_1039
                 v1_1040
                 v2_1041
                 (i_1042 + 1)
                 (sum_1043 + (x_1337 * x_1338))
                 k_dotprod_1311)
    f_main_1478 n_1045 k_main_1383 x_1418 | true = (k_main_1383 ())
    fail_1481 b k | true = (fail ())
    k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 | b_1212 = (
    k_make_array_u_1211 i_1032
                        n_1031
                        k_make_array_1194
                        ())
    k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 | (not b_1212) = (
    fail_1481 true
              (k_make_array_u_1211 i_1032
                                   n_1031
                                   k_make_array_1194))
    k_make_array_u_1211 i_1032 n_1031 k_make_array_1194 x_1197 | true = (
    k_make_array_1194 0)
    main_1044 n_1045 k_main_1383 | true = (dotprod_1038
                                             n_1045
                                             (make_array_1030 n_1045)
                                             (make_array_1030 n_1045)
                                             0
                                             0
                                             (f_main_1478 n_1045
                                                          k_main_1383))
    make_array_1030 n_1031 i_1032 k_make_array_1194 | (0 <= i_1032) = (
    k_make_array_u_1200 i_1032
                        n_1031
                        k_make_array_1194
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1194 | (not (0 <= i_1032)) = (
    k_make_array_u_1200 i_1032
                        n_1031
                        k_make_array_1194
                        false)
    update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 | (i_1035 = j_1037) = (
    k_update_1247 x_1036)
    update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 | (not (i_1035 = j_1037)) = (
    des_1034 i_1035
             k_update_1247)
    main_1475:X
    dotprod_1038:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1479:int -> X
    f_1480:int -> unit -> X
    f_dotprod_1476:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1477:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1478:int -> (unit -> X) -> int -> X
    fail_1481:bool -> (unit -> X) -> X
    k_make_array_u_1200:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1211:int -> int -> (int -> X) -> unit -> X
    main_1044:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1033:(unit -> (unit -> X) -> X) -> unit -> unit -> unit -> (unit -> X) -> X
  inlined functions: f_1479,f_1480,f_dotprod_1476,f_dotprod_1477,f_main_1478,k_make_array_u_1200,k_make_array_u_1211,main_1044,make_array_1030,update_1033
  counterexample: 0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1479@25:0> = var88)
     [true.(<main_1044@27:0> = <f_1479@25:0>)
      [true.((<dotprod_1038@29:0> = <main_1044@27:0>) && ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0)))
       [(not (<dotprod_1038@29:3> >= <dotprod_1038@29:0>)).(<<dotprod_1038@29:1>@32:0> = <dotprod_1038@29:3>)
        [true.((<make_array_1030@34:0> = <main_1044@27:0>) && (<make_array_1030@34:1> = <<dotprod_1038@29:1>@32:0>))
         [(0 <= <make_array_1030@34:1>).
          ((<k_make_array_u_1200@37:0> = <make_array_1030@34:1>) &&
           ((<k_make_array_u_1200@37:1> = <make_array_1030@34:0>) &&
            (<k_make_array_u_1200@37:3> = (<make_array_1030@34:1> < <make_array_1030@34:0>))))
          [(not <k_make_array_u_1200@37:3>).(<fail_1481@40:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(9038)[2]
    horn clauses:
      P[<fail_1481@40:0>](<fail_1481@40:0>:bool)|- bot
      
      P[<k_make_array_u_1200@37:3>](<k_make_array_u_1200@37:0>:int,<k_make_array_u_1200@37:1>:int,false:bool),
      <fail_1481@40:0> |- P[<fail_1481@40:0>](<fail_1481@40:0>:bool)
      
      P[<make_array_1030@34:1>](<k_make_array_u_1200@37:1>:int,<k_make_array_u_1200@37:0>:int),
      ((0 <= <k_make_array_u_1200@37:0>) &&
       (<k_make_array_u_1200@37:3> = (<k_make_array_u_1200@37:0> < <k_make_array_u_1200@37:1>)))
      |- P[<k_make_array_u_1200@37:3>](<k_make_array_u_1200@37:0>:int,
                                       <k_make_array_u_1200@37:1>:int,
                                       <k_make_array_u_1200@37:3>:bool)
      
      P[<main_1044@27:0>](<make_array_1030@34:0>:int),
      P[<<dotprod_1038@29:1>@32:0>](<make_array_1030@34:0>:int,<make_array_1030@34:1>:int)|- P[<make_array_1030@34:1>](
      <make_array_1030@34:0>:int,<make_array_1030@34:1>:int)
      
      P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int,<dotprod_1038@29:4>:int),
      (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>)
      |- P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int)
      
      P[<main_1044@27:0>](<dotprod_1038@29:0>:int), ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
      |- P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,
                                <dotprod_1038@29:4>:int)
      
      P[<f_1479@25:0>](<main_1044@27:0>:int)|- P[<main_1044@27:0>](<main_1044@27:0>:int)
      
      |- P[<f_1479@25:0>](<f_1479@25:0>:int)
    call trees:
      <main_1475@22>
        <f_1479@25>
          <main_1044@27>
            <dotprod_1038@29>
            </<dotprod_1038@29:1>@32>
            <make_array_1030@34>
              <k_make_array_u_1200@37>
                <fail_1481@40>
    inlined horn clauses:
      P[<fail_1481@40:0>](<fail_1481@40:0>:bool)|- bot
      
      P[<<dotprod_1038@29:1>@32:0>](<k_make_array_u_1200@37:1>:int,<k_make_array_u_1200@37:0>:int),
      ((0 <= <k_make_array_u_1200@37:0>) &&
       ((<k_make_array_u_1200@37:0> >= <k_make_array_u_1200@37:1>) && <fail_1481@40:0>))
      |- P[<fail_1481@40:0>](<fail_1481@40:0>:bool)
      
      P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int,<dotprod_1038@29:4>:int),
      (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>)
      |- P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int)
      
       ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
      |- P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,
                                <dotprod_1038@29:4>:int)
    begin ParamSubstInfer.infer(10141)[3]
      
    end ParamSubstInfer.infer(10141)[3] (0.056992 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(10143)[3]
      
    end RefTypeInfer.elim_coeffs(10143)[3] (0.000000 sec.)
    begin GenHcSolver.solve(10353)[3]
      Horn clauses:
        P[<fail_1481@40:0>](<fail_1481@40:0>:bool)|- bot
        
        P[<<dotprod_1038@29:1>@32:0>](<k_make_array_u_1200@37:1>:int,<k_make_array_u_1200@37:0>:int),
        ((0 <= <k_make_array_u_1200@37:0>) &&
         ((<k_make_array_u_1200@37:0> >= <k_make_array_u_1200@37:1>) && <fail_1481@40:0>))
        |- P[<fail_1481@40:0>](<fail_1481@40:0>:bool)
        
        P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int,<dotprod_1038@29:4>:int),
        (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>)
        |- P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int)
        
         ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
        |- P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,
                                  <dotprod_1038@29:4>:int)
      lower bounds:
        P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,<dotprod_1038@29:4>:int) =
        ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
        P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int) =
        ((<<dotprod_1038@29:1>@32:0> = 0) && (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>))
        P[<fail_1481@40:0>](<fail_1481@40:0>:bool) = false
      upper bounds:
        P[<fail_1481@40:0>](var90:bool) = true
      begin GenHcSolver.classify_pids(11428)[4]
        output:
          [<fail_1481@40:0>]
      end GenHcSolver.classify_pids(11428)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(11431)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(11432)[5]
          begin InterpProver.interpolate_fresh(11433)[6]
            begin InterpProver.interpolate_log(11434)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(11435)[8]
                begin InterpProver.interpolate_simplify(11436)[9]
                  begin InterpProver.interpolate_quick(11449)[10]
                    
                  end InterpProver.interpolate_quick(11449)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(11453)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(11453)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(11436)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(11435)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(11434)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(11433)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(11432)[5] (0.000000 sec.)
        output:
          P[<fail_1481@40:0>](<fail_1481@40:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(11431)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1038@29:1>@32:0>](<k_make_array_u_1200@37:1>:int,<k_make_array_u_1200@37:0>:int),
        ((<k_make_array_u_1200@37:0> >= <k_make_array_u_1200@37:1>) && (0 <= <k_make_array_u_1200@37:0>)) |- bot
        
        P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int,<dotprod_1038@29:4>:int),
        (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>)
        |- P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int)
        
         ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
        |- P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,
                                  <dotprod_1038@29:4>:int)
      lower bounds:
        P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,<dotprod_1038@29:4>:int) =
        ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
        P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int) =
        ((<<dotprod_1038@29:1>@32:0> = 0) && (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>))
      upper bounds:
        P[<<dotprod_1038@29:1>@32:0>](var91:int,var92:int) = ((var92 < var91) || (0 > var92))
      begin GenHcSolver.classify_pids(12913)[4]
        output:
          [<<dotprod_1038@29:1>@32:0>]
      end GenHcSolver.classify_pids(12913)[4] (0.000000 sec.)
      lb:((<<dotprod_1038@29:1>@32:0> = 0) && (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>))
      nub:(not ((<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>) || (0 > <<dotprod_1038@29:1>@32:0>)))
      begin ApronInterface.convex_hull_interpolate(12916)[4]
        lb:((<<dotprod_1038@29:1>@32:0> = 0) && (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>))
        nub:(not ((<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>) || (0 > <<dotprod_1038@29:1>@32:0>)))
        lb':((<<dotprod_1038@29:1>@32:0> = 0) && (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>))
        nub':(not ((<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>) || (0 > <<dotprod_1038@29:1>@32:0>)))
        begin InterpProver.interpolate(12917)[5]
          begin InterpProver.interpolate_fresh(12918)[6]
            begin InterpProver.interpolate_log(12919)[7]
              input1: ((<<dotprod_1038@29:1>@32:0> = 0) && (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>))
              input2: (not ((<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>) || (0 > <<dotprod_1038@29:1>@32:0>)))
              begin InterpProver.interpolate_check(12920)[8]
                begin InterpProver.interpolate_simplify(12921)[9]
                  begin InterpProver.interpolate_quick(12976)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(12985)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(12986)[12]
                        begin CsisatInterface.interpolate_csisat_log(12987)[13]
                          input1: (0 = v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0 & (1 + v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0) <= v_sep_dotprod_1038_sep_29_sep_0)
                          input2: (0 <= v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0 & v_sep_dotprod_1038_sep_29_sep_0 <= v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(12988)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(12988)[14] (0.000000 sec.)
                          output: (-2*v_sep_dotprod_1038_sep_29_sep_0 + 2*v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(12987)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_dotprod_1038_sep_29_sep_0 + 2*v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_dotprod_1038_sep_29_sep_0 + 2*v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(12986)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(12985)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(12976)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(12921)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(12920)[8] (0.002000 sec.)
              output: ((1 + <<dotprod_1038@29:1>@32:0>) <= <dotprod_1038@29:0>)
            end InterpProver.interpolate_log(12919)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(12918)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(12917)[5] (0.002000 sec.)
        output:
          P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int) =
          ((1 + <<dotprod_1038@29:1>@32:0>) <= <dotprod_1038@29:0>)
      end ApronInterface.convex_hull_interpolate(12916)[4] (0.002000 sec.)
      Horn clauses:
         ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
        |- P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,
                                  <dotprod_1038@29:4>:int)
      lower bounds:
        P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,<dotprod_1038@29:4>:int) =
        ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
      upper bounds:
        P[<dotprod_1038@29:4>](var93:int,var94:int,var95:int) = true
      begin GenHcSolver.classify_pids(13460)[4]
        output:
          [<dotprod_1038@29:4>]
      end GenHcSolver.classify_pids(13460)[4] (0.000000 sec.)
      lb:((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(13463)[4]
        lb:((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
        nub:false
        lb':((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
        nub':false
        begin InterpProver.interpolate(13464)[5]
          begin InterpProver.interpolate_fresh(13465)[6]
            begin InterpProver.interpolate_log(13466)[7]
              input1: ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
              input2: false
              begin InterpProver.interpolate_check(13467)[8]
                begin InterpProver.interpolate_simplify(13468)[9]
                  begin InterpProver.interpolate_quick(13495)[10]
                    
                  end InterpProver.interpolate_quick(13495)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(13468)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(13467)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(13466)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(13465)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(13464)[5] (0.000000 sec.)
        output:
          P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,<dotprod_1038@29:4>:int) = true
      end ApronInterface.convex_hull_interpolate(13463)[4] (0.000000 sec.)
      begin HcSolver.check_validity(13580)[4]
        input:
          P[<fail_1481@40:0>](<fail_1481@40:0>:bool)|- bot
          
          P[<<dotprod_1038@29:1>@32:0>](<k_make_array_u_1200@37:1>:int,<k_make_array_u_1200@37:0>:int),
          ((0 <= <k_make_array_u_1200@37:0>) &&
           ((<k_make_array_u_1200@37:0> >= <k_make_array_u_1200@37:1>) && <fail_1481@40:0>))
          |- P[<fail_1481@40:0>](<fail_1481@40:0>:bool)
          
          P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int,<dotprod_1038@29:4>:int),
          (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>)
          |- P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int)
          
           ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
          |- P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,
                                    <dotprod_1038@29:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(13580)[4] (0.000000 sec.)
      solution:
        P[<fail_1481@40:0>](<fail_1481@40:0>:bool) = false
        P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int) =
        ((1 + <<dotprod_1038@29:1>@32:0>) <= <dotprod_1038@29:0>)
        P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,<dotprod_1038@29:4>:int) = true
    end GenHcSolver.solve(10353)[3] (0.019996 sec.)
    begin GenHcSolver.solve(13802)[3]
      Horn clauses:
        P[<fail_1481@40:0>](<fail_1481@40:0>:bool)|- bot
        
        P[<<dotprod_1038@29:1>@32:0>](<k_make_array_u_1200@37:1>:int,<k_make_array_u_1200@37:0>:int),
        ((0 <= <k_make_array_u_1200@37:0>) &&
         ((<k_make_array_u_1200@37:0> >= <k_make_array_u_1200@37:1>) && <fail_1481@40:0>))
        |- P[<fail_1481@40:0>](<fail_1481@40:0>:bool)
        
        P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int,<dotprod_1038@29:4>:int),
        (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>)
        |- P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int)
        
         ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
        |- P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,
                                  <dotprod_1038@29:4>:int)
      lower bounds:
        P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,<dotprod_1038@29:4>:int) =
        ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
        P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int) =
        ((<<dotprod_1038@29:1>@32:0> = 0) && (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>))
        P[<fail_1481@40:0>](<fail_1481@40:0>:bool) = false
      upper bounds:
        P[<fail_1481@40:0>](var97:bool) = true
      begin GenHcSolver.classify_pids(14877)[4]
        output:
          [<fail_1481@40:0>]
      end GenHcSolver.classify_pids(14877)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(14880)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(14883)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(14883)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(14888)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(14888)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(14891)[5]
          begin InterpProver.interpolate_fresh(14892)[6]
            begin InterpProver.interpolate_log(14893)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(14894)[8]
                begin InterpProver.interpolate_simplify(14895)[9]
                  begin InterpProver.interpolate_quick(14910)[10]
                    
                  end InterpProver.interpolate_quick(14910)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(14914)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(14914)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(14895)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(14894)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(14893)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(14892)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(14891)[5] (0.000000 sec.)
        output:
          P[<fail_1481@40:0>](<fail_1481@40:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(14880)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1038@29:1>@32:0>](<k_make_array_u_1200@37:1>:int,<k_make_array_u_1200@37:0>:int),
        ((<k_make_array_u_1200@37:0> >= <k_make_array_u_1200@37:1>) && (0 <= <k_make_array_u_1200@37:0>)) |- bot
        
        P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int,<dotprod_1038@29:4>:int),
        (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>)
        |- P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int)
        
         ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
        |- P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,
                                  <dotprod_1038@29:4>:int)
      lower bounds:
        P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,<dotprod_1038@29:4>:int) =
        ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
        P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int) =
        ((<<dotprod_1038@29:1>@32:0> = 0) && (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>))
      upper bounds:
        P[<<dotprod_1038@29:1>@32:0>](var98:int,var99:int) = ((var99 < var98) || (0 > var99))
      begin GenHcSolver.classify_pids(16381)[4]
        output:
          [<<dotprod_1038@29:1>@32:0>]
      end GenHcSolver.classify_pids(16381)[4] (0.000000 sec.)
      lb:((<<dotprod_1038@29:1>@32:0> = 0) && (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>))
      nub:(not ((<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>) || (0 > <<dotprod_1038@29:1>@32:0>)))
      begin ApronInterface.convex_hull_interpolate(16384)[4]
        lb:((<<dotprod_1038@29:1>@32:0> = 0) && (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>))
        nub:(not ((<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>) || (0 > <<dotprod_1038@29:1>@32:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(16396)[5]
          ts: ((<<dotprod_1038@29:1>@32:0> = 0) && (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(16396)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(16416)[5]
          ts: ((<<dotprod_1038@29:1>@32:0> >= <dotprod_1038@29:0>) && (0 <= <<dotprod_1038@29:1>@32:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(16416)[5] (0.001000 sec.)
        lb':((<<dotprod_1038@29:1>@32:0> = 0) && ((-1 + <dotprod_1038@29:0>) >= 0))
        nub':(((<<dotprod_1038@29:1>@32:0> + (-1 * <dotprod_1038@29:0>)) >= 0) && (<<dotprod_1038@29:1>@32:0> >= 0))
        begin InterpProver.interpolate(16422)[5]
          begin InterpProver.interpolate_fresh(16423)[6]
            begin InterpProver.interpolate_log(16424)[7]
              input1: ((<<dotprod_1038@29:1>@32:0> = 0) && ((-1 + <dotprod_1038@29:0>) >= 0))
              input2: (((<<dotprod_1038@29:1>@32:0> + (-1 * <dotprod_1038@29:0>)) >= 0) &&
                       (<<dotprod_1038@29:1>@32:0> >= 0))
              begin InterpProver.interpolate_check(16425)[8]
                begin InterpProver.interpolate_simplify(16426)[9]
                  begin InterpProver.interpolate_quick(16483)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(16492)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(16493)[12]
                        begin CsisatInterface.interpolate_csisat_log(16494)[13]
                          input1: (0 = v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0 & 1 <= v_sep_dotprod_1038_sep_29_sep_0)
                          input2: (0 <= v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0 & v_sep_dotprod_1038_sep_29_sep_0 <= v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(16495)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(16495)[14] (0.000000 sec.)
                          output: (-2*v_sep_dotprod_1038_sep_29_sep_0 + 2*v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(16494)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_dotprod_1038_sep_29_sep_0 + 2*v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_dotprod_1038_sep_29_sep_0 + 2*v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(16493)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(16492)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(16483)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(16426)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(16425)[8] (0.001000 sec.)
              output: ((1 + <<dotprod_1038@29:1>@32:0>) <= <dotprod_1038@29:0>)
            end InterpProver.interpolate_log(16424)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(16423)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(16422)[5] (0.001000 sec.)
        output:
          P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int) =
          ((1 + <<dotprod_1038@29:1>@32:0>) <= <dotprod_1038@29:0>)
      end ApronInterface.convex_hull_interpolate(16384)[4] (0.002000 sec.)
      Horn clauses:
         ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
        |- P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,
                                  <dotprod_1038@29:4>:int)
      lower bounds:
        P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,<dotprod_1038@29:4>:int) =
        ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
      upper bounds:
        P[<dotprod_1038@29:4>](var100:int,var101:int,var102:int) = true
      begin GenHcSolver.classify_pids(16967)[4]
        output:
          [<dotprod_1038@29:4>]
      end GenHcSolver.classify_pids(16967)[4] (0.000000 sec.)
      lb:((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(16970)[4]
        lb:((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(16978)[5]
          ts: ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
          
        end ExtFormula.Formula.case_analysis_boolean(16978)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(16985)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(16985)[5] (0.000000 sec.)
        lb':((<dotprod_1038@29:4> = 0) && (<dotprod_1038@29:3> = 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(16988)[5]
          begin InterpProver.interpolate_fresh(16989)[6]
            begin InterpProver.interpolate_log(16990)[7]
              input1: ((<dotprod_1038@29:4> = 0) && (<dotprod_1038@29:3> = 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(16991)[8]
                begin InterpProver.interpolate_simplify(16992)[9]
                  begin InterpProver.interpolate_quick(17020)[10]
                    
                  end InterpProver.interpolate_quick(17020)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(16992)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(16991)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(16990)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(16989)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(16988)[5] (0.000000 sec.)
        output:
          P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,<dotprod_1038@29:4>:int) = true
      end ApronInterface.convex_hull_interpolate(16970)[4] (0.001000 sec.)
      begin HcSolver.check_validity(17107)[4]
        input:
          P[<fail_1481@40:0>](<fail_1481@40:0>:bool)|- bot
          
          P[<<dotprod_1038@29:1>@32:0>](<k_make_array_u_1200@37:1>:int,<k_make_array_u_1200@37:0>:int),
          ((0 <= <k_make_array_u_1200@37:0>) &&
           ((<k_make_array_u_1200@37:0> >= <k_make_array_u_1200@37:1>) && <fail_1481@40:0>))
          |- P[<fail_1481@40:0>](<fail_1481@40:0>:bool)
          
          P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int,<dotprod_1038@29:4>:int),
          (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>)
          |- P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int)
          
           ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
          |- P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,
                                    <dotprod_1038@29:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(17107)[4] (0.001000 sec.)
      solution:
        P[<fail_1481@40:0>](<fail_1481@40:0>:bool) = false
        P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int) =
        ((1 + <<dotprod_1038@29:1>@32:0>) <= <dotprod_1038@29:0>)
        P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,<dotprod_1038@29:4>:int) = true
    end GenHcSolver.solve(13802)[3] (0.022997 sec.)
    begin YhornInterface.solve(17329)[3]
      begin HcSolver.solve_ub(17330)[4]
        encoded:
          P[<fail_1481@40:0>](<fail_1481@40:0>:int)|- bot
          
          P[<<dotprod_1038@29:1>@32:0>](<k_make_array_u_1200@37:1>:int,<k_make_array_u_1200@37:0>:int),
          ((0 <= <k_make_array_u_1200@37:0>) &&
           ((<k_make_array_u_1200@37:0> >= <k_make_array_u_1200@37:1>) && (<fail_1481@40:0> = 1)))
          |- P[<fail_1481@40:0>](<fail_1481@40:0>:int)
          
          P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int,<dotprod_1038@29:4>:int),
          (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>)
          |- P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int)
          
           ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
          |- P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,
                                    <dotprod_1038@29:4>:int)
        input to Yhorn:
          P[<fail_1481@40:0>](<fail_1481@40:0>:int)|- bot
          
          P[<<dotprod_1038@29:1>@32:0>](<k_make_array_u_1200@37:1>:int,<k_make_array_u_1200@37:0>:int),
          ((<k_make_array_u_1200@37:0> >= <k_make_array_u_1200@37:1>) &&
           ((0 <= <k_make_array_u_1200@37:0>) && (<fail_1481@40:0> = 1))) |- P[<fail_1481@40:0>](
          <fail_1481@40:0>:int)
          
          P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int,<dotprod_1038@29:4>:int),
          (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>)
          |- P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int)
          
           ((<dotprod_1038@29:4> = 0) && (<dotprod_1038@29:3> = 0))
          |- P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,
                                    <dotprod_1038@29:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1481_sep_40_sep_0($71)) -> 1=0.
(($71-1=0) & (-$72<=0) & ($72-$73>=0)) & (v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0($73,$72)) -> v_sep_fail_1481_sep_40_sep_0($71).
($74-$75<0) & (v_sep_dotprod_1038_sep_29_sep_4($75,$74,$76)) -> v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0($75,$74).
($77=0) & ($76=0) -> v_sep_dotprod_1038_sep_29_sep_4($75,$77,$76).


v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0: X
v_sep_dotprod_1038_sep_29_sep_4: X
v_sep_fail_1481_sep_40_sep_0: X
....
v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0: X
v_sep_dotprod_1038_sep_29_sep_4: X
v_sep_fail_1481_sep_40_sep_0: X
...
v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0: X
v_sep_dotprod_1038_sep_29_sep_4: X
v_sep_fail_1481_sep_40_sep_0: X
....
v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0: X
v_sep_dotprod_1038_sep_29_sep_4: X
v_sep_fail_1481_sep_40_sep_0: X
....(0=0) & (v_sep_fail_1481_sep_40_sep_0($71)) -> 1=0.
(($71-1=0) & (-$72<=0) & ($72-$73>=0)) & (v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0($73,$72)) -> v_sep_fail_1481_sep_40_sep_0($71).
($74-$75<0) & (v_sep_dotprod_1038_sep_29_sep_4($75,$74,$76)) -> v_sep_dotprod_1038_sep_29_sep_1_sep_32_sep_0($75,$74).
($77=0) & ($76=0) -> v_sep_dotprod_1038_sep_29_sep_4($75,$77,$76).

        solution:
          P[<<dotprod_1038@29:1>@32:0>]($81:int,$83:int) = ((1 + $83) <= $81)
          P[<dotprod_1038@29:4>]($86:int,$88:int,$90:int) = true
          P[<fail_1481@40:0>]($78:bool) = false
        
      end HcSolver.solve_ub(17330)[4] (0.013998 sec.)
      begin HcSolver.check_validity(17475)[4]
        input:
          P[<fail_1481@40:0>](<fail_1481@40:0>:bool)|- bot
          
          P[<<dotprod_1038@29:1>@32:0>](<k_make_array_u_1200@37:1>:int,<k_make_array_u_1200@37:0>:int),
          ((0 <= <k_make_array_u_1200@37:0>) &&
           ((<k_make_array_u_1200@37:0> >= <k_make_array_u_1200@37:1>) && <fail_1481@40:0>))
          |- P[<fail_1481@40:0>](<fail_1481@40:0>:bool)
          
          P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int,<dotprod_1038@29:4>:int),
          (<<dotprod_1038@29:1>@32:0> < <dotprod_1038@29:0>)
          |- P[<<dotprod_1038@29:1>@32:0>](<dotprod_1038@29:0>:int,<<dotprod_1038@29:1>@32:0>:int)
          
           ((<dotprod_1038@29:3> = 0) && (<dotprod_1038@29:4> = 0))
          |- P[<dotprod_1038@29:4>](<dotprod_1038@29:0>:int,<dotprod_1038@29:3>:int,
                                    <dotprod_1038@29:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(17475)[4] (0.001000 sec.)
      solution:
        P[<<dotprod_1038@29:1>@32:0>]($81:int,$83:int) = ((1 + $83) <= $81)
        P[<dotprod_1038@29:4>]($86:int,$88:int,$90:int) = true
        P[<fail_1481@40:0>]($78:bool) = false
    end YhornInterface.solve(17329)[3] (0.014998 sec.)
    
  end RefTypeInfer.infer_etrs(9038)[2] (0.126981 sec.)
  refinement types:
    main_1475: X
    f_1479: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    dotprod_1038: v1:int ->
                  (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1200: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1481: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1480: var121:int -> var120:unit -> X
    f_dotprod_1476: var136:int ->
                    var135:int ->
                    var134:int ->
                    (var133:int -> X) ->
                    (var131:int -> (var130:int -> X) -> X) -> (var127:int -> (var126:int -> X) -> X) -> var123:int -> X
    f_dotprod_1477: var152:int ->
                    var151:int ->
                    var150:int ->
                    var149:int ->
                    (var148:int -> X) ->
                    (var146:int -> (var145:int -> X) -> X) -> (var142:int -> (var141:int -> X) -> X) -> var138:int -> X
    f_main_1478: var157:int -> (var156:unit -> X) -> var154:int -> X
    k_make_array_u_1211: var163:int -> var162:int -> (var161:int -> X) -> var159:unit -> X
    update_1033: (var173:unit -> (var172:unit -> X) -> X) ->
                 var169:unit -> var168:unit -> var167:unit -> (var166:unit -> X) -> X
  abstraction types:
    main_1475: X
    f_1479: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    dotprod_1038: v1:int ->
                  (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1200: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1481: v1:bool -> (v2:unit -> X) -> X
    f_1480: var121:int -> var120:unit -> X
    f_dotprod_1476: var136:int ->
                    var135:int ->
                    var134:int ->
                    (var133:int -> X) ->
                    (var131:int -> (var130:int -> X) -> X) -> (var127:int -> (var126:int -> X) -> X) -> var123:int -> X
    f_dotprod_1477: var152:int ->
                    var151:int ->
                    var150:int ->
                    var149:int ->
                    (var148:int -> X) ->
                    (var146:int -> (var145:int -> X) -> X) -> (var142:int -> (var141:int -> X) -> X) -> var138:int -> X
    f_main_1478: var157:int -> (var156:unit -> X) -> var154:int -> X
    k_make_array_u_1211: var163:int -> var162:int -> (var161:int -> X) -> var159:unit -> X
    update_1033: (var173:unit -> (var172:unit -> X) -> X) ->
                 var169:unit -> var168:unit -> var167:unit -> (var166:unit -> X) -> X
  
end AbsTypeInfer.refine(9037)[1] (0.130980 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1475
  main_1475 -> (rand_int f_1479)
  dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 when (
      i_1042 >= n_1039) -> (k_dotprod_1311 sum_1043)
  dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 when (
      not (i_1042 >= n_1039)) ->
      (v1_1040 i_1042 (f_dotprod_1476 i_1042 n_1039 sum_1043 k_dotprod_1311 v1_1040 v2_1041))
  f_1479 x_1450 -> (main_1044 x_1450 (f_1480 x_1450))
  f_1480 x_1450 x_1447 -> end
  f_dotprod_1476 i_1042 n_1039 sum_1043 k_dotprod_1311 v1_1040 v2_1041 x_1337 ->
      (v2_1041 i_1042 (f_dotprod_1477 i_1042 n_1039 sum_1043 x_1337 k_dotprod_1311 v1_1040 v2_1041))
  f_dotprod_1477 i_1042 n_1039 sum_1043 x_1337 k_dotprod_1311 v1_1040 v2_1041 x_1338 ->
      (dotprod_1038 n_1039 v1_1040 v2_1041 (i_1042 + 1) (sum_1043 + (x_1337 * x_1338)) k_dotprod_1311)
  f_main_1478 n_1045 k_main_1383 x_1418 -> (k_main_1383 ())
  fail_1481 b k -> {fail} => (k ())
  k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 when b_1212 ->
      (k_make_array_u_1211 i_1032 n_1031 k_make_array_1194 ())
  k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 when (not b_1212) ->
      (fail_1481 true (k_make_array_u_1211 i_1032 n_1031 k_make_array_1194))
  k_make_array_u_1211 i_1032 n_1031 k_make_array_1194 x_1197 -> (k_make_array_1194 0)
  main_1044 n_1045 k_main_1383 ->
      (dotprod_1038 n_1045 (make_array_1030 n_1045) (make_array_1030 n_1045) 0 0 (f_main_1478 n_1045 k_main_1383))
  make_array_1030 n_1031 i_1032 k_make_array_1194 when (0 <= i_1032) ->
      (k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1194 when (not (0 <= i_1032)) ->
      (k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 false)
  update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 when (= i_1035 j_1037) -> (k_update_1247 x_1036)
  update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 when (not (= i_1035 j_1037)) ->
      (des_1034 i_1035 k_update_1247)
Types:
  main_1475 : X
  dotprod_1038 : (x_1:int ->
                  (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                  (int -> (int -> X) -> X) -> x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1481 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1475 ... --> 
  f_1479 ... --> 
  main_1044 ... --> 
  dotprod_1038 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1200 [1/2] ... --> 
  k_make_array_u_1211 ... --> 
  f_dotprod_1476 ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1200 [2/2] ... --> 
  fail_1481 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 0; 1; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(18315)[1]
  program:
    main_1475  | true = ((Random.int 0) f_1479)
    dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 | (
    i_1042 >= n_1039) = (k_dotprod_1311 sum_1043)
    dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 | (
    not (i_1042 >= n_1039)) = (v1_1040 i_1042
                                       (f_dotprod_1476 i_1042
                                                       n_1039
                                                       sum_1043
                                                       k_dotprod_1311
                                                       v1_1040
                                                       v2_1041))
    f_1479 x_1450 | true = (main_1044 x_1450
                                      (f_1480 x_1450))
    f_1480 x_1450 x_1447 | true = end
    f_dotprod_1476 i_1042 n_1039 sum_1043 k_dotprod_1311 v1_1040 v2_1041 x_1337 | true = (
    v2_1041 i_1042
            (f_dotprod_1477 i_1042
                            n_1039
                            sum_1043
                            x_1337
                            k_dotprod_1311
                            v1_1040
                            v2_1041))
    f_dotprod_1477 i_1042 n_1039 sum_1043 x_1337 k_dotprod_1311 v1_1040 v2_1041 x_1338 | true = (
    dotprod_1038 n_1039
                 v1_1040
                 v2_1041
                 (i_1042 + 1)
                 (sum_1043 + (x_1337 * x_1338))
                 k_dotprod_1311)
    f_main_1478 n_1045 k_main_1383 x_1418 | true = (k_main_1383 ())
    fail_1481 b k | true = (fail ())
    k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 | b_1212 = (
    k_make_array_u_1211 i_1032
                        n_1031
                        k_make_array_1194
                        ())
    k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 | (not b_1212) = (
    fail_1481 true
              (k_make_array_u_1211 i_1032
                                   n_1031
                                   k_make_array_1194))
    k_make_array_u_1211 i_1032 n_1031 k_make_array_1194 x_1197 | true = (
    k_make_array_1194 0)
    main_1044 n_1045 k_main_1383 | true = (dotprod_1038
                                             n_1045
                                             (make_array_1030 n_1045)
                                             (make_array_1030 n_1045)
                                             0
                                             0
                                             (f_main_1478 n_1045
                                                          k_main_1383))
    make_array_1030 n_1031 i_1032 k_make_array_1194 | (0 <= i_1032) = (
    k_make_array_u_1200 i_1032
                        n_1031
                        k_make_array_1194
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1194 | (not (0 <= i_1032)) = (
    k_make_array_u_1200 i_1032
                        n_1031
                        k_make_array_1194
                        false)
    update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 | (i_1035 = j_1037) = (
    k_update_1247 x_1036)
    update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 | (not (i_1035 = j_1037)) = (
    des_1034 i_1035
             k_update_1247)
    main_1475:X
    dotprod_1038:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1479:int -> X
    f_1480:int -> unit -> X
    f_dotprod_1476:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1477:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1478:int -> (unit -> X) -> int -> X
    fail_1481:bool -> (unit -> X) -> X
    k_make_array_u_1200:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1211:int -> int -> (int -> X) -> unit -> X
    main_1044:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1033:(unit -> (unit -> X) -> X) -> unit -> unit -> unit -> (unit -> X) -> X
  inlined functions: f_1479,f_1480,f_dotprod_1476,f_dotprod_1477,f_main_1478,k_make_array_u_1200,k_make_array_u_1211,main_1044,make_array_1030,update_1033
  counterexample: 0:0:0:1:0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1479@46:0> = var174)
     [true.(<main_1044@48:0> = <f_1479@46:0>)
      [true.((<dotprod_1038@50:0> = <main_1044@48:0>) && ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0)))
       [(not (<dotprod_1038@50:3> >= <dotprod_1038@50:0>)).(<<dotprod_1038@50:1>@53:0> = <dotprod_1038@50:3>)
        [true.((<make_array_1030@55:0> = <main_1044@48:0>) && (<make_array_1030@55:1> = <<dotprod_1038@50:1>@53:0>))
         [(0 <= <make_array_1030@55:1>).
          ((<k_make_array_u_1200@58:0> = <make_array_1030@55:1>) &&
           ((<k_make_array_u_1200@58:1> = <make_array_1030@55:0>) &&
            (<k_make_array_u_1200@58:3> = (<make_array_1030@55:1> < <make_array_1030@55:0>))))
          [<k_make_array_u_1200@58:3>.
           ((<k_make_array_u_1211@61:0> = <k_make_array_u_1200@58:0>) &&
            ((<k_make_array_u_1211@61:1> = <k_make_array_u_1200@58:1>) && (<k_make_array_u_1211@61:3> = ())))
           [true.(<<k_make_array_u_1211@61:2>@63:0> = 0)
            [true.(<<k_make_array_u_1200@58:2>@65:0> = <<k_make_array_u_1211@61:2>@63:0>)
             [true.(<<make_array_1030@55:2>@67:0> = <<k_make_array_u_1200@58:2>@65:0>)
              [true.(<<<dotprod_1038@50:1>@53:1>@69:0> = <<make_array_1030@55:2>@67:0>)
               [true.
                ((<f_dotprod_1476@71:0> = <dotprod_1038@50:3>) &&
                 ((<f_dotprod_1476@71:1> = <dotprod_1038@50:0>) &&
                  ((<f_dotprod_1476@71:2> = <dotprod_1038@50:4>) &&
                   (<f_dotprod_1476@71:6> = <<<dotprod_1038@50:1>@53:1>@69:0>))))
                [true.(<<f_dotprod_1476@71:5>@73:0> = <f_dotprod_1476@71:0>)
                 [true.(<<dotprod_1038@50:2>@75:0> = <<f_dotprod_1476@71:5>@73:0>)
                  [true.
                   ((<make_array_1030@77:0> = <main_1044@48:0>) &&
                    (<make_array_1030@77:1> = <<dotprod_1038@50:2>@75:0>))
                   [(not (0 <= <make_array_1030@77:1>)).
                    ((<k_make_array_u_1200@80:0> = <make_array_1030@77:1>) &&
                     ((<k_make_array_u_1200@80:1> = <make_array_1030@77:0>) && (<k_make_array_u_1200@80:3> = false)))
                    [(not <k_make_array_u_1200@80:3>).(<fail_1481@83:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(18316)[2]
    horn clauses:
      P[<fail_1481@83:0>](<fail_1481@83:0>:bool)|- bot
      
      P[<k_make_array_u_1200@80:3>](<k_make_array_u_1200@80:0>:int,<k_make_array_u_1200@80:1>:int,false:bool),
      <fail_1481@83:0> |- P[<fail_1481@83:0>](<fail_1481@83:0>:bool)
      
      P[<make_array_1030@77:1>](<k_make_array_u_1200@80:1>:int,<k_make_array_u_1200@80:0>:int),
      ((0 > <k_make_array_u_1200@80:0>) && (not <k_make_array_u_1200@80:3>))
      |- P[<k_make_array_u_1200@80:3>](<k_make_array_u_1200@80:0>:int,
                                       <k_make_array_u_1200@80:1>:int,
                                       <k_make_array_u_1200@80:3>:bool)
      
      P[<main_1044@48:0>](<make_array_1030@77:0>:int),
      P[<<dotprod_1038@50:2>@75:0>](<make_array_1030@77:0>:int,<make_array_1030@77:1>:int)|- P[<make_array_1030@77:1>](
      <make_array_1030@77:0>:int,<make_array_1030@77:1>:int)
      
      P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<f_dotprod_1476@71:2>:int),
      P[<<f_dotprod_1476@71:5>@73:0>](<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:0>:int,<f_dotprod_1476@71:2>:int,<<dotprod_1038@50:2>@75:0>:int),
      (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
      |- P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int)
      
      P[<f_dotprod_1476@71:6>](<f_dotprod_1476@71:0>:int,<f_dotprod_1476@71:1>:int,<f_dotprod_1476@71:2>:int,<f_dotprod_1476@71:6>:int),
      (<<f_dotprod_1476@71:5>@73:0> = <f_dotprod_1476@71:0>)
      |- P[<<f_dotprod_1476@71:5>@73:0>](<f_dotprod_1476@71:0>:int,<f_dotprod_1476@71:1>:int,
                                         <f_dotprod_1476@71:2>:int,<<f_dotprod_1476@71:5>@73:0>:int)
      
      P[<dotprod_1038@50:4>](<f_dotprod_1476@71:1>:int,<f_dotprod_1476@71:0>:int,<f_dotprod_1476@71:2>:int),
      P[<<<dotprod_1038@50:1>@53:1>@69:0>](<f_dotprod_1476@71:1>:int,<f_dotprod_1476@71:0>:int,<f_dotprod_1476@71:6>:int),
      (<f_dotprod_1476@71:0> < <f_dotprod_1476@71:1>)
      |- P[<f_dotprod_1476@71:6>](<f_dotprod_1476@71:0>:int,<f_dotprod_1476@71:1>:int,
                                  <f_dotprod_1476@71:2>:int,<f_dotprod_1476@71:6>:int)
      
      P[<main_1044@48:0>](<dotprod_1038@50:0>:int),
      P[<<make_array_1030@55:2>@67:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<<<dotprod_1038@50:1>@53:1>@69:0>:int)|- P[<<<dotprod_1038@50:1>@53:1>@69:0>](
      <dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<<<dotprod_1038@50:1>@53:1>@69:0>:int)
      
      P[<make_array_1030@55:1>](<make_array_1030@55:0>:int,<make_array_1030@55:1>:int),
      P[<<k_make_array_u_1200@58:2>@65:0>](<make_array_1030@55:1>:int,<make_array_1030@55:0>:int,<<make_array_1030@55:2>@67:0>:int),
      (0 <= <make_array_1030@55:1>)
      |- P[<<make_array_1030@55:2>@67:0>](<make_array_1030@55:0>:int,
                                          <make_array_1030@55:1>:int,
                                          <<make_array_1030@55:2>@67:0>:int)
      
      P[<k_make_array_u_1200@58:3>](<k_make_array_u_1200@58:0>:int,<k_make_array_u_1200@58:1>:int,true:bool),
      P[<<k_make_array_u_1211@61:2>@63:0>](<k_make_array_u_1200@58:0>:int,<k_make_array_u_1200@58:1>:int,<<k_make_array_u_1200@58:2>@65:0>:int)|- P[<<k_make_array_u_1200@58:2>@65:0>](
      <k_make_array_u_1200@58:0>:int,<k_make_array_u_1200@58:1>:int,<<k_make_array_u_1200@58:2>@65:0>:int)
      
      P[<k_make_array_u_1211@61:3>](<k_make_array_u_1211@61:0>:int,<k_make_array_u_1211@61:1>:int,<k_make_array_u_1211@61:3>:unit),
      (<<k_make_array_u_1211@61:2>@63:0> = 0)
      |- P[<<k_make_array_u_1211@61:2>@63:0>](<k_make_array_u_1211@61:0>:int,
                                              <k_make_array_u_1211@61:1>:int,
                                              <<k_make_array_u_1211@61:2>@63:0>:int)
      
      P[<k_make_array_u_1200@58:3>](<k_make_array_u_1211@61:0>:int,<k_make_array_u_1211@61:1>:int,true:bool)|- P[<k_make_array_u_1211@61:3>](
      <k_make_array_u_1211@61:0>:int,<k_make_array_u_1211@61:1>:int,<k_make_array_u_1211@61:3>:unit)
      
      P[<make_array_1030@55:1>](<k_make_array_u_1200@58:1>:int,<k_make_array_u_1200@58:0>:int),
      ((0 <= <k_make_array_u_1200@58:0>) &&
       (<k_make_array_u_1200@58:3> = (<k_make_array_u_1200@58:0> < <k_make_array_u_1200@58:1>)))
      |- P[<k_make_array_u_1200@58:3>](<k_make_array_u_1200@58:0>:int,
                                       <k_make_array_u_1200@58:1>:int,
                                       <k_make_array_u_1200@58:3>:bool)
      
      P[<main_1044@48:0>](<make_array_1030@55:0>:int),
      P[<<dotprod_1038@50:1>@53:0>](<make_array_1030@55:0>:int,<make_array_1030@55:1>:int)|- P[<make_array_1030@55:1>](
      <make_array_1030@55:0>:int,<make_array_1030@55:1>:int)
      
      P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
      (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
      |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
      
      P[<main_1044@48:0>](<dotprod_1038@50:0>:int), ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
      |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                <dotprod_1038@50:4>:int)
      
      P[<f_1479@46:0>](<main_1044@48:0>:int)|- P[<main_1044@48:0>](<main_1044@48:0>:int)
      
      |- P[<f_1479@46:0>](<f_1479@46:0>:int)
    call trees:
      <main_1475@43>
        <f_1479@46>
          <main_1044@48>
            <dotprod_1038@50>
            </<dotprod_1038@50:1>@53>
            <make_array_1030@55>
              <k_make_array_u_1200@58>
                <k_make_array_u_1211@61>
                </<k_make_array_u_1211@61:2>@63>
              </<k_make_array_u_1200@58:2>@65>
            </<make_array_1030@55:2>@67>
            <<<dotprod_1038@50:1>@53:1>@69>
              <f_dotprod_1476@71>
              </<f_dotprod_1476@71:5>@73>
            </<dotprod_1038@50:2>@75>
            <make_array_1030@77>
              <k_make_array_u_1200@80>
                <fail_1481@83>
    inlined horn clauses:
      P[<fail_1481@83:0>](<fail_1481@83:0>:bool)|- bot
      
      P[<<dotprod_1038@50:2>@75:0>](<k_make_array_u_1200@80:1>:int,<k_make_array_u_1200@80:0>:int),
      ((0 > <k_make_array_u_1200@80:0>) && <fail_1481@83:0>) |- P[<fail_1481@83:0>](
      <fail_1481@83:0>:bool)
      
      P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
      P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,var175:int),
      (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>)
      |- P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int)
      
      P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int),
      ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
       ((0 <= <<dotprod_1038@50:1>@53:0>) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
      |- P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,
                                              <<dotprod_1038@50:1>@53:0>:int,
                                              <<<dotprod_1038@50:1>@53:1>@69:0>:int)
      
      P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
      (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
      |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
      
       ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
      |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                <dotprod_1038@50:4>:int)
    begin ParamSubstInfer.infer(20804)[3]
      
    end ParamSubstInfer.infer(20804)[3] (0.096985 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(20806)[3]
      
    end RefTypeInfer.elim_coeffs(20806)[3] (0.002000 sec.)
    begin GenHcSolver.solve(21089)[3]
      Horn clauses:
        P[<fail_1481@83:0>](<fail_1481@83:0>:bool)|- bot
        
        P[<<dotprod_1038@50:2>@75:0>](<k_make_array_u_1200@80:1>:int,<k_make_array_u_1200@80:0>:int),
        ((0 > <k_make_array_u_1200@80:0>) && <fail_1481@83:0>) |- P[<fail_1481@83:0>](
        <fail_1481@83:0>:bool)
        
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,var175:int),
        (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>)
        |- P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int)
        
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int),
        ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
         ((0 <= <<dotprod_1038@50:1>@53:0>) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
        |- P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,
                                                <<dotprod_1038@50:1>@53:0>:int,
                                                <<<dotprod_1038@50:1>@53:1>@69:0>:int)
        
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
        (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
        |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
        
         ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                  <dotprod_1038@50:4>:int)
      lower bounds:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,<dotprod_1038@50:4>:int) =
        ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int) =
        ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<<<dotprod_1038@50:1>@53:1>@69:0>:int) =
        ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
         ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
        P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int) =
        ((<<dotprod_1038@50:2>@75:0> = 0) && (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>))
        P[<fail_1481@83:0>](<fail_1481@83:0>:bool) = false
      upper bounds:
        P[<fail_1481@83:0>](var177:bool) = true
      begin GenHcSolver.classify_pids(23089)[4]
        output:
          [<fail_1481@83:0>]
      end GenHcSolver.classify_pids(23089)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(23092)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(23093)[5]
          begin InterpProver.interpolate_fresh(23094)[6]
            begin InterpProver.interpolate_log(23095)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(23096)[8]
                begin InterpProver.interpolate_simplify(23097)[9]
                  begin InterpProver.interpolate_quick(23110)[10]
                    
                  end InterpProver.interpolate_quick(23110)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(23114)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(23114)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(23097)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(23096)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(23095)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(23094)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(23093)[5] (0.000000 sec.)
        output:
          P[<fail_1481@83:0>](<fail_1481@83:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(23092)[4] (0.001000 sec.)
      Horn clauses:
        P[<<dotprod_1038@50:2>@75:0>](<k_make_array_u_1200@80:1>:int,<k_make_array_u_1200@80:0>:int),
        (0 > <k_make_array_u_1200@80:0>) |- bot
        
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,var175:int),
        (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>)
        |- P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int)
        
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int),
        ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
         ((0 <= <<dotprod_1038@50:1>@53:0>) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
        |- P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,
                                                <<dotprod_1038@50:1>@53:0>:int,
                                                <<<dotprod_1038@50:1>@53:1>@69:0>:int)
        
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
        (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
        |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
        
         ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                  <dotprod_1038@50:4>:int)
      lower bounds:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,<dotprod_1038@50:4>:int) =
        ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int) =
        ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<<<dotprod_1038@50:1>@53:1>@69:0>:int) =
        ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
         ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
        P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int) =
        ((<<dotprod_1038@50:2>@75:0> = 0) && (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>))
      upper bounds:
        P[<<dotprod_1038@50:2>@75:0>](var178:int,var179:int) = (0 <= var179)
      begin GenHcSolver.classify_pids(25377)[4]
        output:
          [<<dotprod_1038@50:2>@75:0>]
      end GenHcSolver.classify_pids(25377)[4] (0.000000 sec.)
      lb:((<<dotprod_1038@50:2>@75:0> = 0) && (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>))
      nub:(not (0 <= <<dotprod_1038@50:2>@75:0>))
      begin ApronInterface.convex_hull_interpolate(25380)[4]
        lb:((<<dotprod_1038@50:2>@75:0> = 0) && (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>))
        nub:(not (0 <= <<dotprod_1038@50:2>@75:0>))
        lb':((<<dotprod_1038@50:2>@75:0> = 0) && (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>))
        nub':(not (0 <= <<dotprod_1038@50:2>@75:0>))
        begin InterpProver.interpolate(25381)[5]
          begin InterpProver.interpolate_fresh(25382)[6]
            begin InterpProver.interpolate_log(25383)[7]
              input1: ((<<dotprod_1038@50:2>@75:0> = 0) && (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>))
              input2: (not (0 <= <<dotprod_1038@50:2>@75:0>))
              begin InterpProver.interpolate_check(25384)[8]
                begin InterpProver.interpolate_simplify(25385)[9]
                  begin InterpProver.interpolate_quick(25418)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(25427)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(25428)[12]
                        begin CsisatInterface.interpolate_csisat_log(25429)[13]
                          input1: (0 = v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0 & (1 + v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0) <= v_sep_dotprod_1038_sep_50_sep_0)
                          input2: (1 + v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(25430)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(25430)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(25429)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(25428)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(25427)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(25418)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(25385)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(25384)[8] (0.001000 sec.)
              output: (0 <= <<dotprod_1038@50:2>@75:0>)
            end InterpProver.interpolate_log(25383)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(25382)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(25381)[5] (0.001000 sec.)
        output:
          P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int) =
          (0 <= <<dotprod_1038@50:2>@75:0>)
      end ApronInterface.convex_hull_interpolate(25380)[4] (0.001000 sec.)
      Horn clauses:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,var175:int),
        ((<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>) && (0 > <<dotprod_1038@50:2>@75:0>)) |- bot
        
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int),
        ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
         ((0 <= <<dotprod_1038@50:1>@53:0>) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
        |- P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,
                                                <<dotprod_1038@50:1>@53:0>:int,
                                                <<<dotprod_1038@50:1>@53:1>@69:0>:int)
        
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
        (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
        |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
        
         ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                  <dotprod_1038@50:4>:int)
      lower bounds:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,<dotprod_1038@50:4>:int) =
        ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int) =
        ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<<<dotprod_1038@50:1>@53:1>@69:0>:int) =
        ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
         ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
      upper bounds:
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](var180:int,var181:int,var182:int) = true
      begin GenHcSolver.classify_pids(27235)[4]
        output:
          [<<<dotprod_1038@50:1>@53:1>@69:0>]
      end GenHcSolver.classify_pids(27235)[4] (0.000000 sec.)
      lb:((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
          ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(27238)[4]
        lb:((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
            ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
        nub:false
        lb':((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
             ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
        nub':false
        begin InterpProver.interpolate(27239)[5]
          begin InterpProver.interpolate_fresh(27240)[6]
            begin InterpProver.interpolate_log(27241)[7]
              input1: ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
                       ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
              input2: false
              begin InterpProver.interpolate_check(27242)[8]
                begin InterpProver.interpolate_simplify(27243)[9]
                  begin InterpProver.interpolate_quick(27298)[10]
                    
                  end InterpProver.interpolate_quick(27298)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(27243)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(27242)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(27241)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(27240)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(27239)[5] (0.001000 sec.)
        output:
          P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<<<dotprod_1038@50:1>@53:1>@69:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(27238)[4] (0.001000 sec.)
      Horn clauses:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
        ((<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>) && (0 > <<dotprod_1038@50:2>@75:0>)) |- bot
        
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
        (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
        |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
        
         ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                  <dotprod_1038@50:4>:int)
      lower bounds:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,<dotprod_1038@50:4>:int) =
        ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int) =
        ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
      upper bounds:
        P[<<dotprod_1038@50:1>@53:0>](var183:int,var184:int) = true
      begin GenHcSolver.classify_pids(28500)[4]
        output:
          [<<dotprod_1038@50:1>@53:0>]
      end GenHcSolver.classify_pids(28500)[4] (0.000000 sec.)
      lb:((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(28503)[4]
        lb:((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
        nub:false
        lb':((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
        nub':false
        begin InterpProver.interpolate(28504)[5]
          begin InterpProver.interpolate_fresh(28505)[6]
            begin InterpProver.interpolate_log(28506)[7]
              input1: ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
              input2: false
              begin InterpProver.interpolate_check(28507)[8]
                begin InterpProver.interpolate_simplify(28508)[9]
                  begin InterpProver.interpolate_quick(28547)[10]
                    
                  end InterpProver.interpolate_quick(28547)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(28508)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(28507)[8] (0.000999 sec.)
              output: true
            end InterpProver.interpolate_log(28506)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(28505)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(28504)[5] (0.000999 sec.)
        output:
          P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int) = true
      end ApronInterface.convex_hull_interpolate(28503)[4] (0.001999 sec.)
      Horn clauses:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
        ((<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>) && (0 > <<dotprod_1038@50:2>@75:0>)) |- bot
        
         ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                  <dotprod_1038@50:4>:int)
      lower bounds:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,<dotprod_1038@50:4>:int) =
        ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
      upper bounds:
        P[<dotprod_1038@50:4>](var185:int,var186:int,var187:int) = ((var186 >= var185) || (0 <= var186))
      begin GenHcSolver.classify_pids(29392)[4]
        output:
          [<dotprod_1038@50:4>]
      end GenHcSolver.classify_pids(29392)[4] (0.000000 sec.)
      lb:((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
      nub:(not ((<dotprod_1038@50:3> >= <dotprod_1038@50:0>) || (0 <= <dotprod_1038@50:3>)))
      begin ApronInterface.convex_hull_interpolate(29395)[4]
        lb:((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        nub:(not ((<dotprod_1038@50:3> >= <dotprod_1038@50:0>) || (0 <= <dotprod_1038@50:3>)))
        lb':((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        nub':(not ((<dotprod_1038@50:3> >= <dotprod_1038@50:0>) || (0 <= <dotprod_1038@50:3>)))
        begin InterpProver.interpolate(29396)[5]
          begin InterpProver.interpolate_fresh(29397)[6]
            begin InterpProver.interpolate_log(29398)[7]
              input1: ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
              input2: (not ((<dotprod_1038@50:3> >= <dotprod_1038@50:0>) || (0 <= <dotprod_1038@50:3>)))
              begin InterpProver.interpolate_check(29399)[8]
                begin InterpProver.interpolate_simplify(29400)[9]
                  begin InterpProver.interpolate_quick(29452)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(29461)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(29462)[12]
                        begin CsisatInterface.interpolate_csisat_log(29463)[13]
                          input1: 0 = v_sep_dotprod_1038_sep_50_sep_3
                          input2: ((1 + v_sep_dotprod_1038_sep_50_sep_3) <= 0 & (1 + v_sep_dotprod_1038_sep_50_sep_3) <= v_sep_dotprod_1038_sep_50_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(29464)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(29464)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1038_sep_50_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(29463)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1038_sep_50_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1038_sep_50_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(29462)[12] (0.000999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(29461)[11] (0.000999 sec.)
                    
                  end InterpProver.interpolate_quick(29452)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(29400)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(29399)[8] (0.001999 sec.)
              output: (0 <= <dotprod_1038@50:3>)
            end InterpProver.interpolate_log(29398)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(29397)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(29396)[5] (0.001999 sec.)
        output:
          P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,<dotprod_1038@50:4>:int) =
          (0 <= <dotprod_1038@50:3>)
      end ApronInterface.convex_hull_interpolate(29395)[4] (0.001999 sec.)
      begin HcSolver.check_validity(29605)[4]
        input:
          P[<fail_1481@83:0>](<fail_1481@83:0>:bool)|- bot
          
          P[<<dotprod_1038@50:2>@75:0>](<k_make_array_u_1200@80:1>:int,<k_make_array_u_1200@80:0>:int),
          ((0 > <k_make_array_u_1200@80:0>) && <fail_1481@83:0>) |- P[<fail_1481@83:0>](
          <fail_1481@83:0>:bool)
          
          P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
          P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,var175:int),
          (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>)
          |- P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int)
          
          P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int),
          ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
           ((0 <= <<dotprod_1038@50:1>@53:0>) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
          |- P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,
                                                  <<dotprod_1038@50:1>@53:0>:int,
                                                  <<<dotprod_1038@50:1>@53:1>@69:0>:int)
          
          P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
          (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
          |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
          
           ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
          |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                    <dotprod_1038@50:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(29605)[4] (0.004000 sec.)
      solution:
        P[<fail_1481@83:0>](<fail_1481@83:0>:bool) = false
        P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int) =
        (0 <= <<dotprod_1038@50:2>@75:0>)
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<<<dotprod_1038@50:1>@53:1>@69:0>:int) =
        true
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int) = true
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,<dotprod_1038@50:4>:int) =
        (0 <= <dotprod_1038@50:3>)
    end GenHcSolver.solve(21089)[3] (0.047993 sec.)
    begin GenHcSolver.solve(30105)[3]
      Horn clauses:
        P[<fail_1481@83:0>](<fail_1481@83:0>:bool)|- bot
        
        P[<<dotprod_1038@50:2>@75:0>](<k_make_array_u_1200@80:1>:int,<k_make_array_u_1200@80:0>:int),
        ((0 > <k_make_array_u_1200@80:0>) && <fail_1481@83:0>) |- P[<fail_1481@83:0>](
        <fail_1481@83:0>:bool)
        
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,var175:int),
        (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>)
        |- P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int)
        
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int),
        ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
         ((0 <= <<dotprod_1038@50:1>@53:0>) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
        |- P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,
                                                <<dotprod_1038@50:1>@53:0>:int,
                                                <<<dotprod_1038@50:1>@53:1>@69:0>:int)
        
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
        (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
        |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
        
         ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                  <dotprod_1038@50:4>:int)
      lower bounds:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,<dotprod_1038@50:4>:int) =
        ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int) =
        ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<<<dotprod_1038@50:1>@53:1>@69:0>:int) =
        ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
         ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
        P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int) =
        ((<<dotprod_1038@50:2>@75:0> = 0) && (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>))
        P[<fail_1481@83:0>](<fail_1481@83:0>:bool) = false
      upper bounds:
        P[<fail_1481@83:0>](var189:bool) = true
      begin GenHcSolver.classify_pids(32105)[4]
        output:
          [<fail_1481@83:0>]
      end GenHcSolver.classify_pids(32105)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(32108)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(32111)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(32111)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(32116)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(32116)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(32119)[5]
          begin InterpProver.interpolate_fresh(32120)[6]
            begin InterpProver.interpolate_log(32121)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(32122)[8]
                begin InterpProver.interpolate_simplify(32123)[9]
                  begin InterpProver.interpolate_quick(32138)[10]
                    
                  end InterpProver.interpolate_quick(32138)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(32142)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(32142)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(32123)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(32122)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(32121)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(32120)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(32119)[5] (0.001000 sec.)
        output:
          P[<fail_1481@83:0>](<fail_1481@83:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(32108)[4] (0.001000 sec.)
      Horn clauses:
        P[<<dotprod_1038@50:2>@75:0>](<k_make_array_u_1200@80:1>:int,<k_make_array_u_1200@80:0>:int),
        (0 > <k_make_array_u_1200@80:0>) |- bot
        
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,var175:int),
        (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>)
        |- P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int)
        
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int),
        ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
         ((0 <= <<dotprod_1038@50:1>@53:0>) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
        |- P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,
                                                <<dotprod_1038@50:1>@53:0>:int,
                                                <<<dotprod_1038@50:1>@53:1>@69:0>:int)
        
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
        (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
        |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
        
         ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                  <dotprod_1038@50:4>:int)
      lower bounds:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,<dotprod_1038@50:4>:int) =
        ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int) =
        ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<<<dotprod_1038@50:1>@53:1>@69:0>:int) =
        ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
         ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
        P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int) =
        ((<<dotprod_1038@50:2>@75:0> = 0) && (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>))
      upper bounds:
        P[<<dotprod_1038@50:2>@75:0>](var190:int,var191:int) = (0 <= var191)
      begin GenHcSolver.classify_pids(34412)[4]
        output:
          [<<dotprod_1038@50:2>@75:0>]
      end GenHcSolver.classify_pids(34412)[4] (0.000000 sec.)
      lb:((<<dotprod_1038@50:2>@75:0> = 0) && (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>))
      nub:(not (0 <= <<dotprod_1038@50:2>@75:0>))
      begin ApronInterface.convex_hull_interpolate(34415)[4]
        lb:((<<dotprod_1038@50:2>@75:0> = 0) && (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>))
        nub:(not (0 <= <<dotprod_1038@50:2>@75:0>))
        begin ExtFormula.Formula.case_analysis_boolean(34427)[5]
          ts: ((<<dotprod_1038@50:2>@75:0> = 0) && (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(34427)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(34436)[5]
          ts: (0 > <<dotprod_1038@50:2>@75:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(34436)[5] (0.000000 sec.)
        lb':((<<dotprod_1038@50:2>@75:0> = 0) && ((-1 + <dotprod_1038@50:0>) >= 0))
        nub':((-1 + (-1 * <<dotprod_1038@50:2>@75:0>)) >= 0)
        begin InterpProver.interpolate(34440)[5]
          begin InterpProver.interpolate_fresh(34441)[6]
            begin InterpProver.interpolate_log(34442)[7]
              input1: ((<<dotprod_1038@50:2>@75:0> = 0) && ((-1 + <dotprod_1038@50:0>) >= 0))
              input2: ((-1 + (-1 * <<dotprod_1038@50:2>@75:0>)) >= 0)
              begin InterpProver.interpolate_check(34443)[8]
                begin InterpProver.interpolate_simplify(34444)[9]
                  begin InterpProver.interpolate_quick(34481)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(34490)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(34491)[12]
                        begin CsisatInterface.interpolate_csisat_log(34492)[13]
                          input1: (0 = v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0 & 1 <= v_sep_dotprod_1038_sep_50_sep_0)
                          input2: (1 + v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(34493)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(34493)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(34492)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(34491)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(34490)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(34481)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(34444)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(34443)[8] (0.002000 sec.)
              output: (0 <= <<dotprod_1038@50:2>@75:0>)
            end InterpProver.interpolate_log(34442)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(34441)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(34440)[5] (0.002000 sec.)
        output:
          P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int) =
          (0 <= <<dotprod_1038@50:2>@75:0>)
      end ApronInterface.convex_hull_interpolate(34415)[4] (0.002000 sec.)
      Horn clauses:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,var175:int),
        ((<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>) && (0 > <<dotprod_1038@50:2>@75:0>)) |- bot
        
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int),
        ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
         ((0 <= <<dotprod_1038@50:1>@53:0>) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
        |- P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,
                                                <<dotprod_1038@50:1>@53:0>:int,
                                                <<<dotprod_1038@50:1>@53:1>@69:0>:int)
        
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
        (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
        |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
        
         ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                  <dotprod_1038@50:4>:int)
      lower bounds:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,<dotprod_1038@50:4>:int) =
        ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int) =
        ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<<<dotprod_1038@50:1>@53:1>@69:0>:int) =
        ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
         ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
      upper bounds:
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](var192:int,var193:int,var194:int) = true
      begin GenHcSolver.classify_pids(36305)[4]
        output:
          [<<<dotprod_1038@50:1>@53:1>@69:0>]
      end GenHcSolver.classify_pids(36305)[4] (0.000000 sec.)
      lb:((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
          ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(36308)[4]
        lb:((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
            ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(36328)[5]
          ts: ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
               ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(36328)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(36337)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(36337)[5] (0.000000 sec.)
        lb':((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
             ((<<dotprod_1038@50:1>@53:0> = 0) && ((-1 + <dotprod_1038@50:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(36340)[5]
          begin InterpProver.interpolate_fresh(36341)[6]
            begin InterpProver.interpolate_log(36342)[7]
              input1: ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
                       ((<<dotprod_1038@50:1>@53:0> = 0) && ((-1 + <dotprod_1038@50:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(36343)[8]
                begin InterpProver.interpolate_simplify(36344)[9]
                  begin InterpProver.interpolate_quick(36402)[10]
                    
                  end InterpProver.interpolate_quick(36402)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(36344)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(36343)[8] (0.001999 sec.)
              output: true
            end InterpProver.interpolate_log(36342)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(36341)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(36340)[5] (0.001999 sec.)
        output:
          P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<<<dotprod_1038@50:1>@53:1>@69:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(36308)[4] (0.001999 sec.)
      Horn clauses:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
        ((<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>) && (0 > <<dotprod_1038@50:2>@75:0>)) |- bot
        
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
        (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
        |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
        
         ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                  <dotprod_1038@50:4>:int)
      lower bounds:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,<dotprod_1038@50:4>:int) =
        ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int) =
        ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
      upper bounds:
        P[<<dotprod_1038@50:1>@53:0>](var195:int,var196:int) = true
      begin GenHcSolver.classify_pids(37606)[4]
        output:
          [<<dotprod_1038@50:1>@53:0>]
      end GenHcSolver.classify_pids(37606)[4] (0.000000 sec.)
      lb:((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(37609)[4]
        lb:((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(37621)[5]
          ts: ((<<dotprod_1038@50:1>@53:0> = 0) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(37621)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(37629)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(37629)[5] (0.000000 sec.)
        lb':((<<dotprod_1038@50:1>@53:0> = 0) && ((-1 + <dotprod_1038@50:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(37632)[5]
          begin InterpProver.interpolate_fresh(37633)[6]
            begin InterpProver.interpolate_log(37634)[7]
              input1: ((<<dotprod_1038@50:1>@53:0> = 0) && ((-1 + <dotprod_1038@50:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(37635)[8]
                begin InterpProver.interpolate_simplify(37636)[9]
                  begin InterpProver.interpolate_quick(37676)[10]
                    
                  end InterpProver.interpolate_quick(37676)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(37636)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(37635)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(37634)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(37633)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(37632)[5] (0.000000 sec.)
        output:
          P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int) = true
      end ApronInterface.convex_hull_interpolate(37609)[4] (0.000000 sec.)
      Horn clauses:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
        ((<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>) && (0 > <<dotprod_1038@50:2>@75:0>)) |- bot
        
         ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                  <dotprod_1038@50:4>:int)
      lower bounds:
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,<dotprod_1038@50:4>:int) =
        ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
      upper bounds:
        P[<dotprod_1038@50:4>](var197:int,var198:int,var199:int) = ((var198 >= var197) || (0 <= var198))
      begin GenHcSolver.classify_pids(38523)[4]
        output:
          [<dotprod_1038@50:4>]
      end GenHcSolver.classify_pids(38523)[4] (0.000000 sec.)
      lb:((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
      nub:(not ((<dotprod_1038@50:3> >= <dotprod_1038@50:0>) || (0 <= <dotprod_1038@50:3>)))
      begin ApronInterface.convex_hull_interpolate(38526)[4]
        lb:((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
        nub:(not ((<dotprod_1038@50:3> >= <dotprod_1038@50:0>) || (0 <= <dotprod_1038@50:3>)))
        begin ExtFormula.Formula.case_analysis_boolean(38534)[5]
          ts: ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
          
        end ExtFormula.Formula.case_analysis_boolean(38534)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(38553)[5]
          ts: ((<dotprod_1038@50:3> < <dotprod_1038@50:0>) && (0 > <dotprod_1038@50:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(38553)[5] (0.000000 sec.)
        lb':((<dotprod_1038@50:4> = 0) && (<dotprod_1038@50:3> = 0))
        nub':(((-1 + (-1 * <dotprod_1038@50:3>)) >= 0) &&
              (((-1 + (-1 * <dotprod_1038@50:3>)) + <dotprod_1038@50:0>) >= 0))
        begin InterpProver.interpolate(38559)[5]
          begin InterpProver.interpolate_fresh(38560)[6]
            begin InterpProver.interpolate_log(38561)[7]
              input1: ((<dotprod_1038@50:4> = 0) && (<dotprod_1038@50:3> = 0))
              input2: (((-1 + (-1 * <dotprod_1038@50:3>)) >= 0) &&
                       (((-1 + (-1 * <dotprod_1038@50:3>)) + <dotprod_1038@50:0>) >= 0))
              begin InterpProver.interpolate_check(38562)[8]
                begin InterpProver.interpolate_simplify(38563)[9]
                  begin InterpProver.interpolate_quick(38627)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(38636)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(38637)[12]
                        begin CsisatInterface.interpolate_csisat_log(38638)[13]
                          input1: 0 = v_sep_dotprod_1038_sep_50_sep_3
                          input2: ((1 + v_sep_dotprod_1038_sep_50_sep_3) <= 0 & (1 + v_sep_dotprod_1038_sep_50_sep_3) <= v_sep_dotprod_1038_sep_50_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(38639)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(38639)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1038_sep_50_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(38638)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1038_sep_50_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1038_sep_50_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(38637)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(38636)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(38627)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(38563)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(38562)[8] (0.001000 sec.)
              output: (0 <= <dotprod_1038@50:3>)
            end InterpProver.interpolate_log(38561)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(38560)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(38559)[5] (0.001000 sec.)
        output:
          P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,<dotprod_1038@50:4>:int) =
          (0 <= <dotprod_1038@50:3>)
      end ApronInterface.convex_hull_interpolate(38526)[4] (0.001000 sec.)
      begin HcSolver.check_validity(38784)[4]
        input:
          P[<fail_1481@83:0>](<fail_1481@83:0>:bool)|- bot
          
          P[<<dotprod_1038@50:2>@75:0>](<k_make_array_u_1200@80:1>:int,<k_make_array_u_1200@80:0>:int),
          ((0 > <k_make_array_u_1200@80:0>) && <fail_1481@83:0>) |- P[<fail_1481@83:0>](
          <fail_1481@83:0>:bool)
          
          P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
          P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,var175:int),
          (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>)
          |- P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int)
          
          P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int),
          ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
           ((0 <= <<dotprod_1038@50:1>@53:0>) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
          |- P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,
                                                  <<dotprod_1038@50:1>@53:0>:int,
                                                  <<<dotprod_1038@50:1>@53:1>@69:0>:int)
          
          P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
          (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
          |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
          
           ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
          |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                    <dotprod_1038@50:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(38784)[4] (0.001999 sec.)
      solution:
        P[<fail_1481@83:0>](<fail_1481@83:0>:bool) = false
        P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int) =
        (0 <= <<dotprod_1038@50:2>@75:0>)
        P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<<<dotprod_1038@50:1>@53:1>@69:0>:int) =
        true
        P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int) = true
        P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,<dotprod_1038@50:4>:int) =
        (0 <= <dotprod_1038@50:3>)
    end GenHcSolver.solve(30105)[3] (0.055991 sec.)
    begin YhornInterface.solve(39284)[3]
      begin HcSolver.solve_ub(39285)[4]
        encoded:
          P[<fail_1481@83:0>](<fail_1481@83:0>:int)|- bot
          
          P[<<dotprod_1038@50:2>@75:0>](<k_make_array_u_1200@80:1>:int,<k_make_array_u_1200@80:0>:int),
          ((0 > <k_make_array_u_1200@80:0>) && (<fail_1481@83:0> = 1)) |- P[<fail_1481@83:0>](
          <fail_1481@83:0>:int)
          
          P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
          P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,var175:int),
          (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>)
          |- P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int)
          
          P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int),
          ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
           ((0 <= <<dotprod_1038@50:1>@53:0>) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
          |- P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,
                                                  <<dotprod_1038@50:1>@53:0>:int,
                                                  <<<dotprod_1038@50:1>@53:1>@69:0>:int)
          
          P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
          (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
          |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
          
           ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
          |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                    <dotprod_1038@50:4>:int)
        input to Yhorn:
          P[<fail_1481@83:0>](<fail_1481@83:0>:int)|- bot
          
          P[<<dotprod_1038@50:2>@75:0>](<k_make_array_u_1200@80:1>:int,<k_make_array_u_1200@80:0>:int),
          ((0 > <k_make_array_u_1200@80:0>) && (<fail_1481@83:0> = 1)) |- P[<fail_1481@83:0>](
          <fail_1481@83:0>:int)
          
          P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
          P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,var175:int),
          (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>)
          |- P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int)
          
          P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int),
          ((<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>) &&
           ((0 <= <<dotprod_1038@50:1>@53:0>) && (<<<dotprod_1038@50:1>@53:1>@69:0> = 0)))
          |- P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,
                                                  <<dotprod_1038@50:1>@53:0>:int,
                                                  <<<dotprod_1038@50:1>@53:1>@69:0>:int)
          
          P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
          (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
          |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
          
           ((<dotprod_1038@50:4> = 0) && (<dotprod_1038@50:3> = 0))
          |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                    <dotprod_1038@50:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1481_sep_83_sep_0($142)) -> 1=0.
(($142-1=0) & (-$143>0)) & (v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0($144,$143)) -> v_sep_fail_1481_sep_83_sep_0($142).
($145-$146<0) & (v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_1_sep_69_sep_0($146,$145,$147)) & (v_sep_dotprod_1038_sep_50_sep_4($146,$145,$148)) -> v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0($146,$145).
(($149=0) & (-$150<=0) & (-$146+$150<0)) & (v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_0($146,$150)) -> v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_1_sep_69_sep_0($146,$150,$149).
(-$146+$150<0) & (v_sep_dotprod_1038_sep_50_sep_4($146,$150,$151)) -> v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_0($146,$150).
($152=0) & ($151=0) -> v_sep_dotprod_1038_sep_50_sep_4($146,$152,$151).


v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_0: X
v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_1_sep_69_sep_0: X
v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0: X
v_sep_dotprod_1038_sep_50_sep_4: X
v_sep_fail_1481_sep_83_sep_0: X
.......
v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_0: X
v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_1_sep_69_sep_0: X
v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0: X
v_sep_dotprod_1038_sep_50_sep_4: X
v_sep_fail_1481_sep_83_sep_0: X
...
v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_0: X
v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_1_sep_69_sep_0: X
v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0: X
v_sep_dotprod_1038_sep_50_sep_4: X
v_sep_fail_1481_sep_83_sep_0: X
.....
v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_0: X
v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_1_sep_69_sep_0: X
v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0: X
v_sep_dotprod_1038_sep_50_sep_4: X
v_sep_fail_1481_sep_83_sep_0: X
......
v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_0: X
v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_1_sep_69_sep_0: X
v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0: X
v_sep_dotprod_1038_sep_50_sep_4: X
v_sep_fail_1481_sep_83_sep_0: X
.......(0=0) & (v_sep_fail_1481_sep_83_sep_0($142)) -> 1=0.
(($142-1=0) & (-$143>0)) & (v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0($144,$143)) -> v_sep_fail_1481_sep_83_sep_0($142).
($145-$146<0) & (v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_1_sep_69_sep_0($146,$145,$147)) & (v_sep_dotprod_1038_sep_50_sep_4($146,$145,$148)) -> v_sep_dotprod_1038_sep_50_sep_2_sep_75_sep_0($146,$145).
(($149=0) & (-$150<=0) & (-$146+$150<0)) & (v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_0($146,$150)) -> v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_1_sep_69_sep_0($146,$150,$149).
(-$146+$150<0) & (v_sep_dotprod_1038_sep_50_sep_4($146,$150,$151)) -> v_sep_dotprod_1038_sep_50_sep_1_sep_53_sep_0($146,$150).
($152=0) & ($151=0) -> v_sep_dotprod_1038_sep_50_sep_4($146,$152,$151).

        solution:
          P[<<dotprod_1038@50:1>@53:0>]($175:int,$177:int) = true
          P[<<<dotprod_1038@50:1>@53:1>@69:0>]($161:int,$163:int,$165:int) = (0 <= $163)
          P[<<dotprod_1038@50:2>@75:0>]($156:int,$158:int) = (0 <= $158)
          P[<dotprod_1038@50:4>]($168:int,$170:int,$172:int) = true
          P[<fail_1481@83:0>]($153:bool) = false
        
      end HcSolver.solve_ub(39285)[4] (0.013998 sec.)
      begin HcSolver.check_validity(39483)[4]
        input:
          P[<fail_1481@83:0>](<fail_1481@83:0>:bool)|- bot
          
          P[<<dotprod_1038@50:2>@75:0>](<k_make_array_u_1200@80:1>:int,<k_make_array_u_1200@80:0>:int),
          ((0 > <k_make_array_u_1200@80:0>) && <fail_1481@83:0>) |- P[<fail_1481@83:0>](
          <fail_1481@83:0>:bool)
          
          P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,<f_dotprod_1476@71:2>:int),
          P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int,var175:int),
          (<<dotprod_1038@50:2>@75:0> < <dotprod_1038@50:0>)
          |- P[<<dotprod_1038@50:2>@75:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:2>@75:0>:int)
          
          P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int),
          ((<<<dotprod_1038@50:1>@53:1>@69:0> = 0) &&
           ((0 <= <<dotprod_1038@50:1>@53:0>) && (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)))
          |- P[<<<dotprod_1038@50:1>@53:1>@69:0>](<dotprod_1038@50:0>:int,
                                                  <<dotprod_1038@50:1>@53:0>:int,
                                                  <<<dotprod_1038@50:1>@53:1>@69:0>:int)
          
          P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int,<dotprod_1038@50:4>:int),
          (<<dotprod_1038@50:1>@53:0> < <dotprod_1038@50:0>)
          |- P[<<dotprod_1038@50:1>@53:0>](<dotprod_1038@50:0>:int,<<dotprod_1038@50:1>@53:0>:int)
          
           ((<dotprod_1038@50:3> = 0) && (<dotprod_1038@50:4> = 0))
          |- P[<dotprod_1038@50:4>](<dotprod_1038@50:0>:int,<dotprod_1038@50:3>:int,
                                    <dotprod_1038@50:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(39483)[4] (0.009999 sec.)
      solution:
        P[<<dotprod_1038@50:1>@53:0>]($175:int,$177:int) = true
        P[<<<dotprod_1038@50:1>@53:1>@69:0>]($161:int,$163:int,$165:int) = (0 <= $163)
        P[<<dotprod_1038@50:2>@75:0>]($156:int,$158:int) = (0 <= $158)
        P[<dotprod_1038@50:4>]($168:int,$170:int,$172:int) = true
        P[<fail_1481@83:0>]($153:bool) = false
    end YhornInterface.solve(39284)[3] (0.023997 sec.)
    
  end RefTypeInfer.infer_etrs(18316)[2] (0.241963 sec.)
  refinement types:
    main_1475: X
    f_1479: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    dotprod_1038: v1:int ->
                  (v2:int -> (v3:int -> X) -> X) ->
                  (v6:{v6:int | (0 <= v6)} -> (v7:int -> X) -> X) ->
                  v10:int -> v11:{v11:int | (0 <= v10)} -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1200: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1211: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1476: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1200: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1481: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1480: var222:int -> var221:unit -> X
    f_dotprod_1477: var238:int ->
                    var237:int ->
                    var236:int ->
                    var235:int ->
                    (var234:int -> X) ->
                    (var232:int -> (var231:int -> X) -> X) -> (var228:int -> (var227:int -> X) -> X) -> var224:int -> X
    f_main_1478: var243:int -> (var242:unit -> X) -> var240:int -> X
    update_1033: (var253:unit -> (var252:unit -> X) -> X) ->
                 var249:unit -> var248:unit -> var247:unit -> (var246:unit -> X) -> X
  abstraction types:
    main_1475: X
    f_1479: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    dotprod_1038: v1:int ->
                  (v2:int -> (v3:int -> X) -> X) ->
                  (v6:int[v6 -> (0 <= v6)] -> (v7:int -> X) -> X) ->
                  v10:int -> v11:int[v11 -> (0 <= v10)] -> (v12:int -> X) -> X
    make_array_1030: var254:int -> var255:int -> (var256:int -> X) -> X
    k_make_array_u_1200: var259:int -> var260:int -> (var261:int -> X) -> var263:bool -> X
    k_make_array_u_1211: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1476: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    fail_1481: v1:bool -> (v2:unit -> X) -> X
    f_1480: var222:int -> var221:unit -> X
    f_dotprod_1477: var238:int ->
                    var237:int ->
                    var236:int ->
                    var235:int ->
                    (var234:int -> X) ->
                    (var232:int -> (var231:int -> X) -> X) -> (var228:int -> (var227:int -> X) -> X) -> var224:int -> X
    f_main_1478: var243:int -> (var242:unit -> X) -> var240:int -> X
    update_1033: (var253:unit -> (var252:unit -> X) -> X) ->
                 var249:unit -> var248:unit -> var247:unit -> (var246:unit -> X) -> X
  
end AbsTypeInfer.refine(18315)[1] (0.246962 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1475
  main_1475 -> (rand_int f_1479)
  dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 when (
      i_1042 >= n_1039) -> (k_dotprod_1311 sum_1043)
  dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 when (
      not (i_1042 >= n_1039)) ->
      (v1_1040 i_1042 (f_dotprod_1476 i_1042 n_1039 sum_1043 k_dotprod_1311 v1_1040 v2_1041))
  f_1479 x_1450 -> (main_1044 x_1450 (f_1480 x_1450))
  f_1480 x_1450 x_1447 -> end
  f_dotprod_1476 i_1042 n_1039 sum_1043 k_dotprod_1311 v1_1040 v2_1041 x_1337 ->
      (v2_1041 i_1042 (f_dotprod_1477 i_1042 n_1039 sum_1043 x_1337 k_dotprod_1311 v1_1040 v2_1041))
  f_dotprod_1477 i_1042 n_1039 sum_1043 x_1337 k_dotprod_1311 v1_1040 v2_1041 x_1338 ->
      (dotprod_1038 n_1039 v1_1040 v2_1041 (i_1042 + 1) (sum_1043 + (x_1337 * x_1338)) k_dotprod_1311)
  f_main_1478 n_1045 k_main_1383 x_1418 -> (k_main_1383 ())
  fail_1481 b k -> {fail} => (k ())
  k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 when b_1212 ->
      (k_make_array_u_1211 i_1032 n_1031 k_make_array_1194 ())
  k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 when (not b_1212) ->
      (fail_1481 true (k_make_array_u_1211 i_1032 n_1031 k_make_array_1194))
  k_make_array_u_1211 i_1032 n_1031 k_make_array_1194 x_1197 -> (k_make_array_1194 0)
  main_1044 n_1045 k_main_1383 ->
      (dotprod_1038 n_1045 (make_array_1030 n_1045) (make_array_1030 n_1045) 0 0 (f_main_1478 n_1045 k_main_1383))
  make_array_1030 n_1031 i_1032 k_make_array_1194 when (0 <= i_1032) ->
      (k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1194 when (not (0 <= i_1032)) ->
      (k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 false)
  update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 when (= i_1035 j_1037) -> (k_update_1247 x_1036)
  update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 when (not (= i_1035 j_1037)) ->
      (des_1034 i_1035 k_update_1247)
Types:
  main_1475 : X
  dotprod_1038 : (x_1:int ->
                  (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                  (x_9:int[x_9 >= 0] -> (int -> X) -> X) -> x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1481 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1475 ... --> 
  f_1479 ... --> 
  main_1044 ... --> 
  dotprod_1038 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1200 [1/2] ... --> 
  k_make_array_u_1211 ... --> 
  f_dotprod_1476 ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1200 [2/2] ... --> 
  fail_1481 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(40693)[1]
  program:
    main_1475  | true = ((Random.int 0) f_1479)
    dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 | (
    i_1042 >= n_1039) = (k_dotprod_1311 sum_1043)
    dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 | (
    not (i_1042 >= n_1039)) = (v1_1040 i_1042
                                       (f_dotprod_1476 i_1042
                                                       n_1039
                                                       sum_1043
                                                       k_dotprod_1311
                                                       v1_1040
                                                       v2_1041))
    f_1479 x_1450 | true = (main_1044 x_1450
                                      (f_1480 x_1450))
    f_1480 x_1450 x_1447 | true = end
    f_dotprod_1476 i_1042 n_1039 sum_1043 k_dotprod_1311 v1_1040 v2_1041 x_1337 | true = (
    v2_1041 i_1042
            (f_dotprod_1477 i_1042
                            n_1039
                            sum_1043
                            x_1337
                            k_dotprod_1311
                            v1_1040
                            v2_1041))
    f_dotprod_1477 i_1042 n_1039 sum_1043 x_1337 k_dotprod_1311 v1_1040 v2_1041 x_1338 | true = (
    dotprod_1038 n_1039
                 v1_1040
                 v2_1041
                 (i_1042 + 1)
                 (sum_1043 + (x_1337 * x_1338))
                 k_dotprod_1311)
    f_main_1478 n_1045 k_main_1383 x_1418 | true = (k_main_1383 ())
    fail_1481 b k | true = (fail ())
    k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 | b_1212 = (
    k_make_array_u_1211 i_1032
                        n_1031
                        k_make_array_1194
                        ())
    k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 | (not b_1212) = (
    fail_1481 true
              (k_make_array_u_1211 i_1032
                                   n_1031
                                   k_make_array_1194))
    k_make_array_u_1211 i_1032 n_1031 k_make_array_1194 x_1197 | true = (
    k_make_array_1194 0)
    main_1044 n_1045 k_main_1383 | true = (dotprod_1038
                                             n_1045
                                             (make_array_1030 n_1045)
                                             (make_array_1030 n_1045)
                                             0
                                             0
                                             (f_main_1478 n_1045
                                                          k_main_1383))
    make_array_1030 n_1031 i_1032 k_make_array_1194 | (0 <= i_1032) = (
    k_make_array_u_1200 i_1032
                        n_1031
                        k_make_array_1194
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1194 | (not (0 <= i_1032)) = (
    k_make_array_u_1200 i_1032
                        n_1031
                        k_make_array_1194
                        false)
    update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 | (i_1035 = j_1037) = (
    k_update_1247 x_1036)
    update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 | (not (i_1035 = j_1037)) = (
    des_1034 i_1035
             k_update_1247)
    main_1475:X
    dotprod_1038:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1479:int -> X
    f_1480:int -> unit -> X
    f_dotprod_1476:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1477:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1478:int -> (unit -> X) -> int -> X
    fail_1481:bool -> (unit -> X) -> X
    k_make_array_u_1200:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1211:int -> int -> (int -> X) -> unit -> X
    main_1044:int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1033:(unit -> (unit -> X) -> X) -> unit -> unit -> unit -> (unit -> X) -> X
  inlined functions: f_1479,f_1480,f_dotprod_1476,f_dotprod_1477,f_main_1478,k_make_array_u_1200,k_make_array_u_1211,main_1044,make_array_1030,update_1033
  counterexample: 0:0:0:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1479@89:0> = var265)
     [true.(<main_1044@91:0> = <f_1479@89:0>)
      [true.((<dotprod_1038@93:0> = <main_1044@91:0>) && ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0)))
       [(not (<dotprod_1038@93:3> >= <dotprod_1038@93:0>)).(<<dotprod_1038@93:1>@96:0> = <dotprod_1038@93:3>)
        [true.((<make_array_1030@98:0> = <main_1044@91:0>) && (<make_array_1030@98:1> = <<dotprod_1038@93:1>@96:0>))
         [(0 <= <make_array_1030@98:1>).
          ((<k_make_array_u_1200@101:0> = <make_array_1030@98:1>) &&
           ((<k_make_array_u_1200@101:1> = <make_array_1030@98:0>) &&
            (<k_make_array_u_1200@101:3> = (<make_array_1030@98:1> < <make_array_1030@98:0>))))
          [<k_make_array_u_1200@101:3>.
           ((<k_make_array_u_1211@104:0> = <k_make_array_u_1200@101:0>) &&
            ((<k_make_array_u_1211@104:1> = <k_make_array_u_1200@101:1>) && (<k_make_array_u_1211@104:3> = ())))
           [true.(<<k_make_array_u_1211@104:2>@106:0> = 0)
            [true.(<<k_make_array_u_1200@101:2>@108:0> = <<k_make_array_u_1211@104:2>@106:0>)
             [true.(<<make_array_1030@98:2>@110:0> = <<k_make_array_u_1200@101:2>@108:0>)
              [true.(<<<dotprod_1038@93:1>@96:1>@112:0> = <<make_array_1030@98:2>@110:0>)
               [true.
                ((<f_dotprod_1476@114:0> = <dotprod_1038@93:3>) &&
                 ((<f_dotprod_1476@114:1> = <dotprod_1038@93:0>) &&
                  ((<f_dotprod_1476@114:2> = <dotprod_1038@93:4>) &&
                   (<f_dotprod_1476@114:6> = <<<dotprod_1038@93:1>@96:1>@112:0>))))
                [true.(<<f_dotprod_1476@114:5>@116:0> = <f_dotprod_1476@114:0>)
                 [true.(<<dotprod_1038@93:2>@118:0> = <<f_dotprod_1476@114:5>@116:0>)
                  [true.
                   ((<make_array_1030@120:0> = <main_1044@91:0>) &&
                    (<make_array_1030@120:1> = <<dotprod_1038@93:2>@118:0>))
                   [(0 <= <make_array_1030@120:1>).
                    ((<k_make_array_u_1200@123:0> = <make_array_1030@120:1>) &&
                     ((<k_make_array_u_1200@123:1> = <make_array_1030@120:0>) &&
                      (<k_make_array_u_1200@123:3> = (<make_array_1030@120:1> < <make_array_1030@120:0>))))
                    [(not <k_make_array_u_1200@123:3>).(<fail_1481@126:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(40694)[2]
    horn clauses:
      P[<fail_1481@126:0>](<fail_1481@126:0>:bool)|- bot
      
      P[<k_make_array_u_1200@123:3>](<k_make_array_u_1200@123:0>:int,<k_make_array_u_1200@123:1>:int,false:bool),
      <fail_1481@126:0> |- P[<fail_1481@126:0>](<fail_1481@126:0>:bool)
      
      P[<make_array_1030@120:1>](<k_make_array_u_1200@123:1>:int,<k_make_array_u_1200@123:0>:int),
      ((0 <= <k_make_array_u_1200@123:0>) &&
       (<k_make_array_u_1200@123:3> = (<k_make_array_u_1200@123:0> < <k_make_array_u_1200@123:1>)))
      |- P[<k_make_array_u_1200@123:3>](<k_make_array_u_1200@123:0>:int,
                                        <k_make_array_u_1200@123:1>:int,
                                        <k_make_array_u_1200@123:3>:bool)
      
      P[<main_1044@91:0>](<make_array_1030@120:0>:int),
      P[<<dotprod_1038@93:2>@118:0>](<make_array_1030@120:0>:int,<make_array_1030@120:1>:int)|- P[<make_array_1030@120:1>](
      <make_array_1030@120:0>:int,<make_array_1030@120:1>:int)
      
      P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<f_dotprod_1476@114:2>:int),
      P[<<f_dotprod_1476@114:5>@116:0>](<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:0>:int,<f_dotprod_1476@114:2>:int,<<dotprod_1038@93:2>@118:0>:int),
      (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
      |- P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int)
      
      P[<f_dotprod_1476@114:6>](<f_dotprod_1476@114:0>:int,<f_dotprod_1476@114:1>:int,<f_dotprod_1476@114:2>:int,<f_dotprod_1476@114:6>:int),
      (<<f_dotprod_1476@114:5>@116:0> = <f_dotprod_1476@114:0>)
      |- P[<<f_dotprod_1476@114:5>@116:0>](<f_dotprod_1476@114:0>:int,
                                           <f_dotprod_1476@114:1>:int,
                                           <f_dotprod_1476@114:2>:int,
                                           <<f_dotprod_1476@114:5>@116:0>:int)
      
      P[<dotprod_1038@93:4>](<f_dotprod_1476@114:1>:int,<f_dotprod_1476@114:0>:int,<f_dotprod_1476@114:2>:int),
      P[<<<dotprod_1038@93:1>@96:1>@112:0>](<f_dotprod_1476@114:1>:int,<f_dotprod_1476@114:0>:int,<f_dotprod_1476@114:6>:int),
      (<f_dotprod_1476@114:0> < <f_dotprod_1476@114:1>)
      |- P[<f_dotprod_1476@114:6>](<f_dotprod_1476@114:0>:int,<f_dotprod_1476@114:1>:int,
                                   <f_dotprod_1476@114:2>:int,<f_dotprod_1476@114:6>:int)
      
      P[<main_1044@91:0>](<dotprod_1038@93:0>:int),
      P[<<make_array_1030@98:2>@110:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<<<dotprod_1038@93:1>@96:1>@112:0>:int)|- P[<<<dotprod_1038@93:1>@96:1>@112:0>](
      <dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<<<dotprod_1038@93:1>@96:1>@112:0>:int)
      
      P[<make_array_1030@98:1>](<make_array_1030@98:0>:int,<make_array_1030@98:1>:int),
      P[<<k_make_array_u_1200@101:2>@108:0>](<make_array_1030@98:1>:int,<make_array_1030@98:0>:int,<<make_array_1030@98:2>@110:0>:int),
      (0 <= <make_array_1030@98:1>)
      |- P[<<make_array_1030@98:2>@110:0>](<make_array_1030@98:0>:int,
                                           <make_array_1030@98:1>:int,
                                           <<make_array_1030@98:2>@110:0>:int)
      
      P[<k_make_array_u_1200@101:3>](<k_make_array_u_1200@101:0>:int,<k_make_array_u_1200@101:1>:int,true:bool),
      P[<<k_make_array_u_1211@104:2>@106:0>](<k_make_array_u_1200@101:0>:int,<k_make_array_u_1200@101:1>:int,<<k_make_array_u_1200@101:2>@108:0>:int)|- P[<<k_make_array_u_1200@101:2>@108:0>](
      <k_make_array_u_1200@101:0>:int,<k_make_array_u_1200@101:1>:int,
      <<k_make_array_u_1200@101:2>@108:0>:int)
      
      P[<k_make_array_u_1211@104:3>](<k_make_array_u_1211@104:0>:int,<k_make_array_u_1211@104:1>:int,<k_make_array_u_1211@104:3>:unit),
      (<<k_make_array_u_1211@104:2>@106:0> = 0)
      |- P[<<k_make_array_u_1211@104:2>@106:0>](<k_make_array_u_1211@104:0>:int,
                                                <k_make_array_u_1211@104:1>:int,
                                                <<k_make_array_u_1211@104:2>@106:0>:int)
      
      P[<k_make_array_u_1200@101:3>](<k_make_array_u_1211@104:0>:int,<k_make_array_u_1211@104:1>:int,true:bool)|- P[<k_make_array_u_1211@104:3>](
      <k_make_array_u_1211@104:0>:int,<k_make_array_u_1211@104:1>:int,
      <k_make_array_u_1211@104:3>:unit)
      
      P[<make_array_1030@98:1>](<k_make_array_u_1200@101:1>:int,<k_make_array_u_1200@101:0>:int),
      ((0 <= <k_make_array_u_1200@101:0>) &&
       (<k_make_array_u_1200@101:3> = (<k_make_array_u_1200@101:0> < <k_make_array_u_1200@101:1>)))
      |- P[<k_make_array_u_1200@101:3>](<k_make_array_u_1200@101:0>:int,
                                        <k_make_array_u_1200@101:1>:int,
                                        <k_make_array_u_1200@101:3>:bool)
      
      P[<main_1044@91:0>](<make_array_1030@98:0>:int),
      P[<<dotprod_1038@93:1>@96:0>](<make_array_1030@98:0>:int,<make_array_1030@98:1>:int)|- P[<make_array_1030@98:1>](
      <make_array_1030@98:0>:int,<make_array_1030@98:1>:int)
      
      P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
      (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
      |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
      
      P[<main_1044@91:0>](<dotprod_1038@93:0>:int), ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
      |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                <dotprod_1038@93:4>:int)
      
      P[<f_1479@89:0>](<main_1044@91:0>:int)|- P[<main_1044@91:0>](<main_1044@91:0>:int)
      
      |- P[<f_1479@89:0>](<f_1479@89:0>:int)
    call trees:
      <main_1475@86>
        <f_1479@89>
          <main_1044@91>
            <dotprod_1038@93>
            </<dotprod_1038@93:1>@96>
            <make_array_1030@98>
              <k_make_array_u_1200@101>
                <k_make_array_u_1211@104>
                </<k_make_array_u_1211@104:2>@106>
              </<k_make_array_u_1200@101:2>@108>
            </<make_array_1030@98:2>@110>
            <<<dotprod_1038@93:1>@96:1>@112>
              <f_dotprod_1476@114>
              </<f_dotprod_1476@114:5>@116>
            </<dotprod_1038@93:2>@118>
            <make_array_1030@120>
              <k_make_array_u_1200@123>
                <fail_1481@126>
    inlined horn clauses:
      P[<fail_1481@126:0>](<fail_1481@126:0>:bool)|- bot
      
      P[<<dotprod_1038@93:2>@118:0>](<k_make_array_u_1200@123:1>:int,<k_make_array_u_1200@123:0>:int),
      ((0 <= <k_make_array_u_1200@123:0>) &&
       ((<k_make_array_u_1200@123:0> >= <k_make_array_u_1200@123:1>) && <fail_1481@126:0>))
      |- P[<fail_1481@126:0>](<fail_1481@126:0>:bool)
      
      P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,<f_dotprod_1476@114:2>:int),
      P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,var266:int),
      (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>)
      |- P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int)
      
      P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int),
      ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
       ((0 <= <<dotprod_1038@93:1>@96:0>) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
      |- P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,
                                               <<dotprod_1038@93:1>@96:0>:int,
                                               <<<dotprod_1038@93:1>@96:1>@112:0>:int)
      
      P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
      (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
      |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
      
       ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
      |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                <dotprod_1038@93:4>:int)
    begin ParamSubstInfer.infer(43400)[3]
      
    end ParamSubstInfer.infer(43400)[3] (0.114983 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(43402)[3]
      
    end RefTypeInfer.elim_coeffs(43402)[3] (0.001000 sec.)
    begin GenHcSolver.solve(43752)[3]
      Horn clauses:
        P[<fail_1481@126:0>](<fail_1481@126:0>:bool)|- bot
        
        P[<<dotprod_1038@93:2>@118:0>](<k_make_array_u_1200@123:1>:int,<k_make_array_u_1200@123:0>:int),
        ((0 <= <k_make_array_u_1200@123:0>) &&
         ((<k_make_array_u_1200@123:0> >= <k_make_array_u_1200@123:1>) && <fail_1481@126:0>))
        |- P[<fail_1481@126:0>](<fail_1481@126:0>:bool)
        
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,<f_dotprod_1476@114:2>:int),
        P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,var266:int),
        (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>)
        |- P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int)
        
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int),
        ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
         ((0 <= <<dotprod_1038@93:1>@96:0>) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
        |- P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,
                                                 <<dotprod_1038@93:1>@96:0>:int,
                                                 <<<dotprod_1038@93:1>@96:1>@112:0>:int)
        
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
        (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
        |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
        
         ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                  <dotprod_1038@93:4>:int)
      lower bounds:
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,<dotprod_1038@93:4>:int) =
        ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int) =
        ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
        P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<<<dotprod_1038@93:1>@96:1>@112:0>:int) =
        ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
         ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
        P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int) =
        ((<<dotprod_1038@93:2>@118:0> = 0) && (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>))
        P[<fail_1481@126:0>](<fail_1481@126:0>:bool) = false
      upper bounds:
        P[<fail_1481@126:0>](var268:bool) = true
      begin GenHcSolver.classify_pids(45827)[4]
        output:
          [<fail_1481@126:0>]
      end GenHcSolver.classify_pids(45827)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(45830)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(45831)[5]
          begin InterpProver.interpolate_fresh(45832)[6]
            begin InterpProver.interpolate_log(45833)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(45834)[8]
                begin InterpProver.interpolate_simplify(45835)[9]
                  begin InterpProver.interpolate_quick(45848)[10]
                    
                  end InterpProver.interpolate_quick(45848)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(45852)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(45852)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(45835)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(45834)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(45833)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(45832)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(45831)[5] (0.000000 sec.)
        output:
          P[<fail_1481@126:0>](<fail_1481@126:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(45830)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1038@93:2>@118:0>](<k_make_array_u_1200@123:1>:int,<k_make_array_u_1200@123:0>:int),
        ((<k_make_array_u_1200@123:0> >= <k_make_array_u_1200@123:1>) && (0 <= <k_make_array_u_1200@123:0>)) |- bot
        
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,<f_dotprod_1476@114:2>:int),
        P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,var266:int),
        (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>)
        |- P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int)
        
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int),
        ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
         ((0 <= <<dotprod_1038@93:1>@96:0>) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
        |- P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,
                                                 <<dotprod_1038@93:1>@96:0>:int,
                                                 <<<dotprod_1038@93:1>@96:1>@112:0>:int)
        
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
        (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
        |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
        
         ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                  <dotprod_1038@93:4>:int)
      lower bounds:
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,<dotprod_1038@93:4>:int) =
        ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int) =
        ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
        P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<<<dotprod_1038@93:1>@96:1>@112:0>:int) =
        ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
         ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
        P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int) =
        ((<<dotprod_1038@93:2>@118:0> = 0) && (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>))
      upper bounds:
        P[<<dotprod_1038@93:2>@118:0>](var269:int,var270:int) = ((var270 < var269) || (0 > var270))
      begin GenHcSolver.classify_pids(48459)[4]
        output:
          [<<dotprod_1038@93:2>@118:0>]
      end GenHcSolver.classify_pids(48459)[4] (0.000000 sec.)
      lb:((<<dotprod_1038@93:2>@118:0> = 0) && (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>))
      nub:(not ((<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>) || (0 > <<dotprod_1038@93:2>@118:0>)))
      begin ApronInterface.convex_hull_interpolate(48462)[4]
        lb:((<<dotprod_1038@93:2>@118:0> = 0) && (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>))
        nub:(not ((<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>) || (0 > <<dotprod_1038@93:2>@118:0>)))
        lb':((<<dotprod_1038@93:2>@118:0> = 0) && (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>))
        nub':(not ((<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>) || (0 > <<dotprod_1038@93:2>@118:0>)))
        begin InterpProver.interpolate(48463)[5]
          begin InterpProver.interpolate_fresh(48464)[6]
            begin InterpProver.interpolate_log(48465)[7]
              input1: ((<<dotprod_1038@93:2>@118:0> = 0) && (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>))
              input2: (not ((<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>) || (0 > <<dotprod_1038@93:2>@118:0>)))
              begin InterpProver.interpolate_check(48466)[8]
                begin InterpProver.interpolate_simplify(48467)[9]
                  begin InterpProver.interpolate_quick(48522)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(48531)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(48532)[12]
                        begin CsisatInterface.interpolate_csisat_log(48533)[13]
                          input1: (0 = v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0 & (1 + v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0) <= v_sep_dotprod_1038_sep_93_sep_0)
                          input2: (0 <= v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0 & v_sep_dotprod_1038_sep_93_sep_0 <= v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(48534)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(48534)[14] (0.000000 sec.)
                          output: (-2*v_sep_dotprod_1038_sep_93_sep_0 + 2*v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(48533)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_dotprod_1038_sep_93_sep_0 + 2*v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_dotprod_1038_sep_93_sep_0 + 2*v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(48532)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(48531)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(48522)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(48467)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(48466)[8] (0.002000 sec.)
              output: ((1 + <<dotprod_1038@93:2>@118:0>) <= <dotprod_1038@93:0>)
            end InterpProver.interpolate_log(48465)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(48464)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(48463)[5] (0.002000 sec.)
        output:
          P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int) =
          ((1 + <<dotprod_1038@93:2>@118:0>) <= <dotprod_1038@93:0>)
      end ApronInterface.convex_hull_interpolate(48462)[4] (0.002000 sec.)
      Horn clauses:
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int),
        ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
         ((0 <= <<dotprod_1038@93:1>@96:0>) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
        |- P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,
                                                 <<dotprod_1038@93:1>@96:0>:int,
                                                 <<<dotprod_1038@93:1>@96:1>@112:0>:int)
        
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
        (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
        |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
        
         ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                  <dotprod_1038@93:4>:int)
      lower bounds:
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,<dotprod_1038@93:4>:int) =
        ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int) =
        ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
        P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<<<dotprod_1038@93:1>@96:1>@112:0>:int) =
        ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
         ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
      upper bounds:
        P[<<<dotprod_1038@93:1>@96:1>@112:0>](var271:int,var272:int,var273:int) = true
      begin GenHcSolver.classify_pids(50113)[4]
        output:
          [<<<dotprod_1038@93:1>@96:1>@112:0>]
      end GenHcSolver.classify_pids(50113)[4] (0.000000 sec.)
      lb:((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
          ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(50116)[4]
        lb:((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
            ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
        nub:false
        lb':((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
             ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
        nub':false
        begin InterpProver.interpolate(50117)[5]
          begin InterpProver.interpolate_fresh(50118)[6]
            begin InterpProver.interpolate_log(50119)[7]
              input1: ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
                       ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
              input2: false
              begin InterpProver.interpolate_check(50120)[8]
                begin InterpProver.interpolate_simplify(50121)[9]
                  begin InterpProver.interpolate_quick(50176)[10]
                    
                  end InterpProver.interpolate_quick(50176)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(50121)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(50120)[8] (0.000999 sec.)
              output: true
            end InterpProver.interpolate_log(50119)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(50118)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(50117)[5] (0.000999 sec.)
        output:
          P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<<<dotprod_1038@93:1>@96:1>@112:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(50116)[4] (0.000999 sec.)
      Horn clauses:
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
        (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
        |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
        
         ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                  <dotprod_1038@93:4>:int)
      lower bounds:
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,<dotprod_1038@93:4>:int) =
        ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int) =
        ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
      upper bounds:
        P[<<dotprod_1038@93:1>@96:0>](var274:int,var275:int) = true
      begin GenHcSolver.classify_pids(51128)[4]
        output:
          [<<dotprod_1038@93:1>@96:0>]
      end GenHcSolver.classify_pids(51128)[4] (0.000000 sec.)
      lb:((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(51131)[4]
        lb:((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
        nub:false
        lb':((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
        nub':false
        begin InterpProver.interpolate(51132)[5]
          begin InterpProver.interpolate_fresh(51133)[6]
            begin InterpProver.interpolate_log(51134)[7]
              input1: ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
              input2: false
              begin InterpProver.interpolate_check(51135)[8]
                begin InterpProver.interpolate_simplify(51136)[9]
                  begin InterpProver.interpolate_quick(51175)[10]
                    
                  end InterpProver.interpolate_quick(51175)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(51136)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(51135)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(51134)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(51133)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(51132)[5] (0.001000 sec.)
        output:
          P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int) = true
      end ApronInterface.convex_hull_interpolate(51131)[4] (0.001000 sec.)
      Horn clauses:
         ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                  <dotprod_1038@93:4>:int)
      lower bounds:
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,<dotprod_1038@93:4>:int) =
        ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
      upper bounds:
        P[<dotprod_1038@93:4>](var276:int,var277:int,var278:int) = true
      begin GenHcSolver.classify_pids(51570)[4]
        output:
          [<dotprod_1038@93:4>]
      end GenHcSolver.classify_pids(51570)[4] (0.000000 sec.)
      lb:((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(51573)[4]
        lb:((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        nub:false
        lb':((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        nub':false
        begin InterpProver.interpolate(51574)[5]
          begin InterpProver.interpolate_fresh(51575)[6]
            begin InterpProver.interpolate_log(51576)[7]
              input1: ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
              input2: false
              begin InterpProver.interpolate_check(51577)[8]
                begin InterpProver.interpolate_simplify(51578)[9]
                  begin InterpProver.interpolate_quick(51605)[10]
                    
                  end InterpProver.interpolate_quick(51605)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(51578)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(51577)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(51576)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(51575)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(51574)[5] (0.001000 sec.)
        output:
          P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,<dotprod_1038@93:4>:int) = true
      end ApronInterface.convex_hull_interpolate(51573)[4] (0.001000 sec.)
      begin HcSolver.check_validity(51690)[4]
        input:
          P[<fail_1481@126:0>](<fail_1481@126:0>:bool)|- bot
          
          P[<<dotprod_1038@93:2>@118:0>](<k_make_array_u_1200@123:1>:int,<k_make_array_u_1200@123:0>:int),
          ((0 <= <k_make_array_u_1200@123:0>) &&
           ((<k_make_array_u_1200@123:0> >= <k_make_array_u_1200@123:1>) && <fail_1481@126:0>))
          |- P[<fail_1481@126:0>](<fail_1481@126:0>:bool)
          
          P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,<f_dotprod_1476@114:2>:int),
          P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,var266:int),
          (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>)
          |- P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int)
          
          P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int),
          ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
           ((0 <= <<dotprod_1038@93:1>@96:0>) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
          |- P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,
                                                   <<dotprod_1038@93:1>@96:0>:int,
                                                   <<<dotprod_1038@93:1>@96:1>@112:0>:int)
          
          P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
          (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
          |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
          
           ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
          |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                    <dotprod_1038@93:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(51690)[4] (0.002000 sec.)
      solution:
        P[<fail_1481@126:0>](<fail_1481@126:0>:bool) = false
        P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int) =
        ((1 + <<dotprod_1038@93:2>@118:0>) <= <dotprod_1038@93:0>)
        P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<<<dotprod_1038@93:1>@96:1>@112:0>:int) =
        true
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int) = true
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,<dotprod_1038@93:4>:int) = true
    end GenHcSolver.solve(43752)[3] (0.041994 sec.)
    begin GenHcSolver.solve(52111)[3]
      Horn clauses:
        P[<fail_1481@126:0>](<fail_1481@126:0>:bool)|- bot
        
        P[<<dotprod_1038@93:2>@118:0>](<k_make_array_u_1200@123:1>:int,<k_make_array_u_1200@123:0>:int),
        ((0 <= <k_make_array_u_1200@123:0>) &&
         ((<k_make_array_u_1200@123:0> >= <k_make_array_u_1200@123:1>) && <fail_1481@126:0>))
        |- P[<fail_1481@126:0>](<fail_1481@126:0>:bool)
        
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,<f_dotprod_1476@114:2>:int),
        P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,var266:int),
        (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>)
        |- P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int)
        
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int),
        ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
         ((0 <= <<dotprod_1038@93:1>@96:0>) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
        |- P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,
                                                 <<dotprod_1038@93:1>@96:0>:int,
                                                 <<<dotprod_1038@93:1>@96:1>@112:0>:int)
        
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
        (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
        |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
        
         ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                  <dotprod_1038@93:4>:int)
      lower bounds:
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,<dotprod_1038@93:4>:int) =
        ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int) =
        ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
        P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<<<dotprod_1038@93:1>@96:1>@112:0>:int) =
        ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
         ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
        P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int) =
        ((<<dotprod_1038@93:2>@118:0> = 0) && (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>))
        P[<fail_1481@126:0>](<fail_1481@126:0>:bool) = false
      upper bounds:
        P[<fail_1481@126:0>](var280:bool) = true
      begin GenHcSolver.classify_pids(54186)[4]
        output:
          [<fail_1481@126:0>]
      end GenHcSolver.classify_pids(54186)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(54189)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(54192)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(54192)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(54197)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(54197)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(54200)[5]
          begin InterpProver.interpolate_fresh(54201)[6]
            begin InterpProver.interpolate_log(54202)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(54203)[8]
                begin InterpProver.interpolate_simplify(54204)[9]
                  begin InterpProver.interpolate_quick(54219)[10]
                    
                  end InterpProver.interpolate_quick(54219)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(54223)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(54223)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(54204)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(54203)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(54202)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(54201)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(54200)[5] (0.001000 sec.)
        output:
          P[<fail_1481@126:0>](<fail_1481@126:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(54189)[4] (0.001000 sec.)
      Horn clauses:
        P[<<dotprod_1038@93:2>@118:0>](<k_make_array_u_1200@123:1>:int,<k_make_array_u_1200@123:0>:int),
        ((<k_make_array_u_1200@123:0> >= <k_make_array_u_1200@123:1>) && (0 <= <k_make_array_u_1200@123:0>)) |- bot
        
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,<f_dotprod_1476@114:2>:int),
        P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,var266:int),
        (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>)
        |- P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int)
        
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int),
        ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
         ((0 <= <<dotprod_1038@93:1>@96:0>) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
        |- P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,
                                                 <<dotprod_1038@93:1>@96:0>:int,
                                                 <<<dotprod_1038@93:1>@96:1>@112:0>:int)
        
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
        (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
        |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
        
         ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                  <dotprod_1038@93:4>:int)
      lower bounds:
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,<dotprod_1038@93:4>:int) =
        ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int) =
        ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
        P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<<<dotprod_1038@93:1>@96:1>@112:0>:int) =
        ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
         ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
        P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int) =
        ((<<dotprod_1038@93:2>@118:0> = 0) && (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>))
      upper bounds:
        P[<<dotprod_1038@93:2>@118:0>](var281:int,var282:int) = ((var282 < var281) || (0 > var282))
      begin GenHcSolver.classify_pids(56837)[4]
        output:
          [<<dotprod_1038@93:2>@118:0>]
      end GenHcSolver.classify_pids(56837)[4] (0.000000 sec.)
      lb:((<<dotprod_1038@93:2>@118:0> = 0) && (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>))
      nub:(not ((<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>) || (0 > <<dotprod_1038@93:2>@118:0>)))
      begin ApronInterface.convex_hull_interpolate(56840)[4]
        lb:((<<dotprod_1038@93:2>@118:0> = 0) && (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>))
        nub:(not ((<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>) || (0 > <<dotprod_1038@93:2>@118:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(56852)[5]
          ts: ((<<dotprod_1038@93:2>@118:0> = 0) && (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(56852)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(56872)[5]
          ts: ((<<dotprod_1038@93:2>@118:0> >= <dotprod_1038@93:0>) && (0 <= <<dotprod_1038@93:2>@118:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(56872)[5] (0.000000 sec.)
        lb':((<<dotprod_1038@93:2>@118:0> = 0) && ((-1 + <dotprod_1038@93:0>) >= 0))
        nub':(((<<dotprod_1038@93:2>@118:0> + (-1 * <dotprod_1038@93:0>)) >= 0) && (<<dotprod_1038@93:2>@118:0> >= 0))
        begin InterpProver.interpolate(56878)[5]
          begin InterpProver.interpolate_fresh(56879)[6]
            begin InterpProver.interpolate_log(56880)[7]
              input1: ((<<dotprod_1038@93:2>@118:0> = 0) && ((-1 + <dotprod_1038@93:0>) >= 0))
              input2: (((<<dotprod_1038@93:2>@118:0> + (-1 * <dotprod_1038@93:0>)) >= 0) &&
                       (<<dotprod_1038@93:2>@118:0> >= 0))
              begin InterpProver.interpolate_check(56881)[8]
                begin InterpProver.interpolate_simplify(56882)[9]
                  begin InterpProver.interpolate_quick(56939)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(56948)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(56949)[12]
                        begin CsisatInterface.interpolate_csisat_log(56950)[13]
                          input1: (0 = v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0 & 1 <= v_sep_dotprod_1038_sep_93_sep_0)
                          input2: (0 <= v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0 & v_sep_dotprod_1038_sep_93_sep_0 <= v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(56951)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(56951)[14] (0.000000 sec.)
                          output: (-2*v_sep_dotprod_1038_sep_93_sep_0 + 2*v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(56950)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_dotprod_1038_sep_93_sep_0 + 2*v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_dotprod_1038_sep_93_sep_0 + 2*v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(56949)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(56948)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(56939)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(56882)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(56881)[8] (0.002000 sec.)
              output: ((1 + <<dotprod_1038@93:2>@118:0>) <= <dotprod_1038@93:0>)
            end InterpProver.interpolate_log(56880)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(56879)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(56878)[5] (0.002000 sec.)
        output:
          P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int) =
          ((1 + <<dotprod_1038@93:2>@118:0>) <= <dotprod_1038@93:0>)
      end ApronInterface.convex_hull_interpolate(56840)[4] (0.003000 sec.)
      Horn clauses:
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int),
        ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
         ((0 <= <<dotprod_1038@93:1>@96:0>) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
        |- P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,
                                                 <<dotprod_1038@93:1>@96:0>:int,
                                                 <<<dotprod_1038@93:1>@96:1>@112:0>:int)
        
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
        (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
        |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
        
         ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                  <dotprod_1038@93:4>:int)
      lower bounds:
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,<dotprod_1038@93:4>:int) =
        ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int) =
        ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
        P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<<<dotprod_1038@93:1>@96:1>@112:0>:int) =
        ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
         ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
      upper bounds:
        P[<<<dotprod_1038@93:1>@96:1>@112:0>](var283:int,var284:int,var285:int) = true
      begin GenHcSolver.classify_pids(58530)[4]
        output:
          [<<<dotprod_1038@93:1>@96:1>@112:0>]
      end GenHcSolver.classify_pids(58530)[4] (0.000000 sec.)
      lb:((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
          ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(58533)[4]
        lb:((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
            ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(58553)[5]
          ts: ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
               ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(58553)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(58562)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(58562)[5] (0.000000 sec.)
        lb':((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
             ((<<dotprod_1038@93:1>@96:0> = 0) && ((-1 + <dotprod_1038@93:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(58565)[5]
          begin InterpProver.interpolate_fresh(58566)[6]
            begin InterpProver.interpolate_log(58567)[7]
              input1: ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
                       ((<<dotprod_1038@93:1>@96:0> = 0) && ((-1 + <dotprod_1038@93:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(58568)[8]
                begin InterpProver.interpolate_simplify(58569)[9]
                  begin InterpProver.interpolate_quick(58627)[10]
                    
                  end InterpProver.interpolate_quick(58627)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(58569)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(58568)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(58567)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(58566)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(58565)[5] (0.001000 sec.)
        output:
          P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<<<dotprod_1038@93:1>@96:1>@112:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(58533)[4] (0.001000 sec.)
      Horn clauses:
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
        (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
        |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
        
         ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                  <dotprod_1038@93:4>:int)
      lower bounds:
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,<dotprod_1038@93:4>:int) =
        ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int) =
        ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
      upper bounds:
        P[<<dotprod_1038@93:1>@96:0>](var286:int,var287:int) = true
      begin GenHcSolver.classify_pids(59581)[4]
        output:
          [<<dotprod_1038@93:1>@96:0>]
      end GenHcSolver.classify_pids(59581)[4] (0.000000 sec.)
      lb:((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(59584)[4]
        lb:((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(59596)[5]
          ts: ((<<dotprod_1038@93:1>@96:0> = 0) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(59596)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(59604)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(59604)[5] (0.000000 sec.)
        lb':((<<dotprod_1038@93:1>@96:0> = 0) && ((-1 + <dotprod_1038@93:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(59607)[5]
          begin InterpProver.interpolate_fresh(59608)[6]
            begin InterpProver.interpolate_log(59609)[7]
              input1: ((<<dotprod_1038@93:1>@96:0> = 0) && ((-1 + <dotprod_1038@93:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(59610)[8]
                begin InterpProver.interpolate_simplify(59611)[9]
                  begin InterpProver.interpolate_quick(59651)[10]
                    
                  end InterpProver.interpolate_quick(59651)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(59611)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(59610)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(59609)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(59608)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(59607)[5] (0.001000 sec.)
        output:
          P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int) = true
      end ApronInterface.convex_hull_interpolate(59584)[4] (0.002000 sec.)
      Horn clauses:
         ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                  <dotprod_1038@93:4>:int)
      lower bounds:
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,<dotprod_1038@93:4>:int) =
        ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
      upper bounds:
        P[<dotprod_1038@93:4>](var288:int,var289:int,var290:int) = true
      begin GenHcSolver.classify_pids(60048)[4]
        output:
          [<dotprod_1038@93:4>]
      end GenHcSolver.classify_pids(60048)[4] (0.000000 sec.)
      lb:((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(60051)[4]
        lb:((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(60059)[5]
          ts: ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
          
        end ExtFormula.Formula.case_analysis_boolean(60059)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(60066)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(60066)[5] (0.000000 sec.)
        lb':((<dotprod_1038@93:4> = 0) && (<dotprod_1038@93:3> = 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(60069)[5]
          begin InterpProver.interpolate_fresh(60070)[6]
            begin InterpProver.interpolate_log(60071)[7]
              input1: ((<dotprod_1038@93:4> = 0) && (<dotprod_1038@93:3> = 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(60072)[8]
                begin InterpProver.interpolate_simplify(60073)[9]
                  begin InterpProver.interpolate_quick(60101)[10]
                    
                  end InterpProver.interpolate_quick(60101)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(60073)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(60072)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(60071)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(60070)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(60069)[5] (0.000000 sec.)
        output:
          P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,<dotprod_1038@93:4>:int) = true
      end ApronInterface.convex_hull_interpolate(60051)[4] (0.000999 sec.)
      begin HcSolver.check_validity(60188)[4]
        input:
          P[<fail_1481@126:0>](<fail_1481@126:0>:bool)|- bot
          
          P[<<dotprod_1038@93:2>@118:0>](<k_make_array_u_1200@123:1>:int,<k_make_array_u_1200@123:0>:int),
          ((0 <= <k_make_array_u_1200@123:0>) &&
           ((<k_make_array_u_1200@123:0> >= <k_make_array_u_1200@123:1>) && <fail_1481@126:0>))
          |- P[<fail_1481@126:0>](<fail_1481@126:0>:bool)
          
          P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,<f_dotprod_1476@114:2>:int),
          P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,var266:int),
          (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>)
          |- P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int)
          
          P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int),
          ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
           ((0 <= <<dotprod_1038@93:1>@96:0>) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
          |- P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,
                                                   <<dotprod_1038@93:1>@96:0>:int,
                                                   <<<dotprod_1038@93:1>@96:1>@112:0>:int)
          
          P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
          (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
          |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
          
           ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
          |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                    <dotprod_1038@93:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(60188)[4] (0.002000 sec.)
      solution:
        P[<fail_1481@126:0>](<fail_1481@126:0>:bool) = false
        P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int) =
        ((1 + <<dotprod_1038@93:2>@118:0>) <= <dotprod_1038@93:0>)
        P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<<<dotprod_1038@93:1>@96:1>@112:0>:int) =
        true
        P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int) = true
        P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,<dotprod_1038@93:4>:int) = true
    end GenHcSolver.solve(52111)[3] (0.051992 sec.)
    begin YhornInterface.solve(60609)[3]
      begin HcSolver.solve_ub(60610)[4]
        encoded:
          P[<fail_1481@126:0>](<fail_1481@126:0>:int)|- bot
          
          P[<<dotprod_1038@93:2>@118:0>](<k_make_array_u_1200@123:1>:int,<k_make_array_u_1200@123:0>:int),
          ((0 <= <k_make_array_u_1200@123:0>) &&
           ((<k_make_array_u_1200@123:0> >= <k_make_array_u_1200@123:1>) && (<fail_1481@126:0> = 1)))
          |- P[<fail_1481@126:0>](<fail_1481@126:0>:int)
          
          P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,<f_dotprod_1476@114:2>:int),
          P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,var266:int),
          (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>)
          |- P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int)
          
          P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int),
          ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
           ((0 <= <<dotprod_1038@93:1>@96:0>) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
          |- P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,
                                                   <<dotprod_1038@93:1>@96:0>:int,
                                                   <<<dotprod_1038@93:1>@96:1>@112:0>:int)
          
          P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
          (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
          |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
          
           ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
          |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                    <dotprod_1038@93:4>:int)
        input to Yhorn:
          P[<fail_1481@126:0>](<fail_1481@126:0>:int)|- bot
          
          P[<<dotprod_1038@93:2>@118:0>](<k_make_array_u_1200@123:1>:int,<k_make_array_u_1200@123:0>:int),
          ((<k_make_array_u_1200@123:0> >= <k_make_array_u_1200@123:1>) &&
           ((0 <= <k_make_array_u_1200@123:0>) && (<fail_1481@126:0> = 1)))
          |- P[<fail_1481@126:0>](<fail_1481@126:0>:int)
          
          P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,<f_dotprod_1476@114:2>:int),
          P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,var266:int),
          (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>)
          |- P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int)
          
          P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int),
          ((<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>) &&
           ((0 <= <<dotprod_1038@93:1>@96:0>) && (<<<dotprod_1038@93:1>@96:1>@112:0> = 0)))
          |- P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,
                                                   <<dotprod_1038@93:1>@96:0>:int,
                                                   <<<dotprod_1038@93:1>@96:1>@112:0>:int)
          
          P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
          (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
          |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
          
           ((<dotprod_1038@93:4> = 0) && (<dotprod_1038@93:3> = 0))
          |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                    <dotprod_1038@93:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1481_sep_126_sep_0($251)) -> 1=0.
(($251-1=0) & (-$252<=0) & ($252-$253>=0)) & (v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0($253,$252)) -> v_sep_fail_1481_sep_126_sep_0($251).
($254-$255<0) & (v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_1_sep_112_sep_0($255,$254,$256)) & (v_sep_dotprod_1038_sep_93_sep_4($255,$254,$257)) -> v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0($255,$254).
(($258=0) & (-$259<=0) & (-$255+$259<0)) & (v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_0($255,$259)) -> v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_1_sep_112_sep_0($255,$259,$258).
(-$255+$259<0) & (v_sep_dotprod_1038_sep_93_sep_4($255,$259,$260)) -> v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_0($255,$259).
($261=0) & ($260=0) -> v_sep_dotprod_1038_sep_93_sep_4($255,$261,$260).


v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_0: X
v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_1_sep_112_sep_0: X
v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0: X
v_sep_dotprod_1038_sep_93_sep_4: X
v_sep_fail_1481_sep_126_sep_0: X
.......
v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_0: X
v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_1_sep_112_sep_0: X
v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0: X
v_sep_dotprod_1038_sep_93_sep_4: X
v_sep_fail_1481_sep_126_sep_0: X
...
v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_0: X
v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_1_sep_112_sep_0: X
v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0: X
v_sep_dotprod_1038_sep_93_sep_4: X
v_sep_fail_1481_sep_126_sep_0: X
.....
v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_0: X
v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_1_sep_112_sep_0: X
v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0: X
v_sep_dotprod_1038_sep_93_sep_4: X
v_sep_fail_1481_sep_126_sep_0: X
......
v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_0: X
v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_1_sep_112_sep_0: X
v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0: X
v_sep_dotprod_1038_sep_93_sep_4: X
v_sep_fail_1481_sep_126_sep_0: X
.......(0=0) & (v_sep_fail_1481_sep_126_sep_0($251)) -> 1=0.
(($251-1=0) & (-$252<=0) & ($252-$253>=0)) & (v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0($253,$252)) -> v_sep_fail_1481_sep_126_sep_0($251).
($254-$255<0) & (v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_1_sep_112_sep_0($255,$254,$256)) & (v_sep_dotprod_1038_sep_93_sep_4($255,$254,$257)) -> v_sep_dotprod_1038_sep_93_sep_2_sep_118_sep_0($255,$254).
(($258=0) & (-$259<=0) & (-$255+$259<0)) & (v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_0($255,$259)) -> v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_1_sep_112_sep_0($255,$259,$258).
(-$255+$259<0) & (v_sep_dotprod_1038_sep_93_sep_4($255,$259,$260)) -> v_sep_dotprod_1038_sep_93_sep_1_sep_96_sep_0($255,$259).
($261=0) & ($260=0) -> v_sep_dotprod_1038_sep_93_sep_4($255,$261,$260).

        solution:
          P[<<dotprod_1038@93:1>@96:0>]($284:int,$286:int) = true
          P[<<<dotprod_1038@93:1>@96:1>@112:0>]($270:int,$272:int,$274:int) = true
          P[<<dotprod_1038@93:2>@118:0>]($265:int,$267:int) = ((1 + $267) <= $265)
          P[<dotprod_1038@93:4>]($277:int,$279:int,$281:int) = true
          P[<fail_1481@126:0>]($262:bool) = false
        
      end HcSolver.solve_ub(60610)[4] (0.019997 sec.)
      begin HcSolver.check_validity(60856)[4]
        input:
          P[<fail_1481@126:0>](<fail_1481@126:0>:bool)|- bot
          
          P[<<dotprod_1038@93:2>@118:0>](<k_make_array_u_1200@123:1>:int,<k_make_array_u_1200@123:0>:int),
          ((0 <= <k_make_array_u_1200@123:0>) &&
           ((<k_make_array_u_1200@123:0> >= <k_make_array_u_1200@123:1>) && <fail_1481@126:0>))
          |- P[<fail_1481@126:0>](<fail_1481@126:0>:bool)
          
          P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,<f_dotprod_1476@114:2>:int),
          P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int,var266:int),
          (<<dotprod_1038@93:2>@118:0> < <dotprod_1038@93:0>)
          |- P[<<dotprod_1038@93:2>@118:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:2>@118:0>:int)
          
          P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int),
          ((<<<dotprod_1038@93:1>@96:1>@112:0> = 0) &&
           ((0 <= <<dotprod_1038@93:1>@96:0>) && (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)))
          |- P[<<<dotprod_1038@93:1>@96:1>@112:0>](<dotprod_1038@93:0>:int,
                                                   <<dotprod_1038@93:1>@96:0>:int,
                                                   <<<dotprod_1038@93:1>@96:1>@112:0>:int)
          
          P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int,<dotprod_1038@93:4>:int),
          (<<dotprod_1038@93:1>@96:0> < <dotprod_1038@93:0>)
          |- P[<<dotprod_1038@93:1>@96:0>](<dotprod_1038@93:0>:int,<<dotprod_1038@93:1>@96:0>:int)
          
           ((<dotprod_1038@93:3> = 0) && (<dotprod_1038@93:4> = 0))
          |- P[<dotprod_1038@93:4>](<dotprod_1038@93:0>:int,<dotprod_1038@93:3>:int,
                                    <dotprod_1038@93:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(60856)[4] (0.009998 sec.)
      solution:
        P[<<dotprod_1038@93:1>@96:0>]($284:int,$286:int) = true
        P[<<<dotprod_1038@93:1>@96:1>@112:0>]($270:int,$272:int,$274:int) = true
        P[<<dotprod_1038@93:2>@118:0>]($265:int,$267:int) = ((1 + $267) <= $265)
        P[<dotprod_1038@93:4>]($277:int,$279:int,$281:int) = true
        P[<fail_1481@126:0>]($262:bool) = false
    end YhornInterface.solve(60609)[3] (0.030995 sec.)
    
  end RefTypeInfer.infer_etrs(40694)[2] (0.256961 sec.)
  refinement types:
    main_1475: X
    f_1479: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    dotprod_1038: v1:int ->
                  (v2:int -> (v3:int -> X) -> X) ->
                  (v6:{v6:int | ((1 + v6) <= v1)} -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1200: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1211: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1476: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1200: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1481: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1480: var313:int -> var312:unit -> X
    f_dotprod_1477: var329:int ->
                    var328:int ->
                    var327:int ->
                    var326:int ->
                    (var325:int -> X) ->
                    (var323:int -> (var322:int -> X) -> X) -> (var319:int -> (var318:int -> X) -> X) -> var315:int -> X
    f_main_1478: var334:int -> (var333:unit -> X) -> var331:int -> X
    update_1033: (var344:unit -> (var343:unit -> X) -> X) ->
                 var340:unit -> var339:unit -> var338:unit -> (var337:unit -> X) -> X
  abstraction types:
    main_1475: X
    f_1479: v1:int -> X
    main_1044: v1:int -> (v2:unit -> X) -> X
    dotprod_1038: v1:int ->
                  (v2:int -> (v3:int -> X) -> X) ->
                  (v6:int[v6 -> ((1 + v6) <= v1)] -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: var345:int -> var346:int -> (var347:int -> X) -> X
    k_make_array_u_1200: var350:int -> var351:int -> (var352:int -> X) -> var354:bool -> X
    k_make_array_u_1211: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1476: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    fail_1481: v1:bool -> (v2:unit -> X) -> X
    f_1480: var313:int -> var312:unit -> X
    f_dotprod_1477: var329:int ->
                    var328:int ->
                    var327:int ->
                    var326:int ->
                    (var325:int -> X) ->
                    (var323:int -> (var322:int -> X) -> X) -> (var319:int -> (var318:int -> X) -> X) -> var315:int -> X
    f_main_1478: var334:int -> (var333:unit -> X) -> var331:int -> X
    update_1033: (var344:unit -> (var343:unit -> X) -> X) ->
                 var340:unit -> var339:unit -> var338:unit -> (var337:unit -> X) -> X
  
end AbsTypeInfer.refine(40693)[1] (0.261961 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1475
  main_1475 -> (rand_int f_1479)
  dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 when (
      i_1042 >= n_1039) -> (k_dotprod_1311 sum_1043)
  dotprod_1038 n_1039 v1_1040 v2_1041 i_1042 sum_1043 k_dotprod_1311 when (
      not (i_1042 >= n_1039)) ->
      (v1_1040 i_1042 (f_dotprod_1476 i_1042 n_1039 sum_1043 k_dotprod_1311 v1_1040 v2_1041))
  f_1479 x_1450 -> (main_1044 x_1450 (f_1480 x_1450))
  f_1480 x_1450 x_1447 -> end
  f_dotprod_1476 i_1042 n_1039 sum_1043 k_dotprod_1311 v1_1040 v2_1041 x_1337 ->
      (v2_1041 i_1042 (f_dotprod_1477 i_1042 n_1039 sum_1043 x_1337 k_dotprod_1311 v1_1040 v2_1041))
  f_dotprod_1477 i_1042 n_1039 sum_1043 x_1337 k_dotprod_1311 v1_1040 v2_1041 x_1338 ->
      (dotprod_1038 n_1039 v1_1040 v2_1041 (i_1042 + 1) (sum_1043 + (x_1337 * x_1338)) k_dotprod_1311)
  f_main_1478 n_1045 k_main_1383 x_1418 -> (k_main_1383 ())
  fail_1481 b k -> {fail} => (k ())
  k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 when b_1212 ->
      (k_make_array_u_1211 i_1032 n_1031 k_make_array_1194 ())
  k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 b_1212 when (not b_1212) ->
      (fail_1481 true (k_make_array_u_1211 i_1032 n_1031 k_make_array_1194))
  k_make_array_u_1211 i_1032 n_1031 k_make_array_1194 x_1197 -> (k_make_array_1194 0)
  main_1044 n_1045 k_main_1383 ->
      (dotprod_1038 n_1045 (make_array_1030 n_1045) (make_array_1030 n_1045) 0 0 (f_main_1478 n_1045 k_main_1383))
  make_array_1030 n_1031 i_1032 k_make_array_1194 when (0 <= i_1032) ->
      (k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1194 when (not (0 <= i_1032)) ->
      (k_make_array_u_1200 i_1032 n_1031 k_make_array_1194 false)
  update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 when (= i_1035 j_1037) -> (k_update_1247 x_1036)
  update_1033 des_1034 i_1035 x_1036 j_1037 k_update_1247 when (not (= i_1035 j_1037)) ->
      (des_1034 i_1035 k_update_1247)
Types:
  main_1475 : X
  dotprod_1038 : (x_1:int ->
                  (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                  (x_9:int[x_1 >= x_9 + 1; x_9 >= 0] -> (int -> X) -> X) ->
                  x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1481 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  dotprod: (x_1:int ->
                (({x_9:int | x_9 >= 0 && x_1 >= x_9 + 1} -> int) ->
                     (({x_7:int | x_7 >= 0 && x_1 >= x_7 + 1} -> int) -> (x_4:int -> ({x_5:int | x_4 >= 0} -> int)))))

cycles: 4
total: 1.236 sec
  abst: 0.036 sec
  mc: 0.051 sec
  refine: 0.815 sec
    exparam: 0.288 sec
