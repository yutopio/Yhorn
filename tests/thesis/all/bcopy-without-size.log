MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi bcopy-without-size.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 des_1034 i_1035 x_1036 = (match des_1034 i_1035 with
                                             | _ -> ()
                                             | _ -> let u_1065 = {fail} 
                                                    in
                                                      _|_) 
 in
 let rec bcopy_aux_1037 m_1038 src_1039 des_1040 i_1041 =
   if i_1041 >= m_1038 then
     ()
   else
     let u_1120 = update_1033 des_1040 i_1041 (src_1039 i_1041) 
     in
       bcopy_aux_1037 m_1038 src_1039 des_1040 (i_1041 + 1) 
 in
 let main_1042 n_1043 m_1044 =
   let array1_1045 = make_array_1030 n_1043 
   in
   let array2_1046 = make_array_1030 m_1044 
   in
     if n_1043 <= m_1044 then
       bcopy_aux_1037 n_1043 array1_1045 array2_1046 0
     else
       () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 des_1034 i_1035 x_1036 = (match des_1034 i_1035 with
                                             | _ -> ()
                                             | _ -> let u_1065 = {fail} 
                                                    in
                                                      _|_) 
 in
 let rec bcopy_aux_1037 m_1038 src_1039 des_1040 i_1041 =
   if i_1041 >= m_1038 then
     ()
   else
     let u_1120 = update_1033 des_1040 i_1041 (src_1039 i_1041) 
     in
       bcopy_aux_1037 m_1038 src_1039 des_1040 (i_1041 + 1) 
 in
 let main_1042 n_1043 m_1044 =
   let array1_1045 = make_array_1030 n_1043 
   in
   let array2_1046 = make_array_1030 m_1044 
   in
     if n_1043 <= m_1044 then
       bcopy_aux_1037 n_1043 array1_1045 array2_1046 0
     else
       () 
 in
 let main_1151 = let arg1_1149 = rand_int () 
                 in
                 let arg2_1150 = rand_int () 
                 in
                   main_1042 arg1_1149 arg2_1150 
 in
   ()

copy_poly::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let update_1153 (des_1034:(int -> int)) (i_1035:int) (x_1036:int) =
   (match des_1034 i_1035 with
      | _ -> ()
      | _ -> let u_1065 = {fail} 
             in
               _|_) 
 in
 let rec bcopy_aux_1152 (m_1038:int) (src_1039:(int -> int)) (des_1040:(
   int -> int)) (i_1041:int) =
   if i_1041 >= m_1038 then
     ()
   else
     let u_1120 = update_1153 des_1040 i_1041 (src_1039 i_1041) 
     in
       bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) 
 in
 let main_1042 (n_1043:int) (m_1044:int) =
   let array1_1045 = make_array_1030 n_1043 
   in
   let array2_1046 = make_array_1030 m_1044 
   in
     if n_1043 <= m_1044 then
       bcopy_aux_1152 n_1043 array1_1045 array2_1046 0
     else
       () 
 in
 let main_1151 = let arg1_1149 = rand_int () 
                 in
                 let arg2_1150 = rand_int () 
                 in
                   main_1042 arg1_1149 arg2_1150 
 in
   ()

abst_recdata::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1153 des_1034 i_1035 x_1036 = let u_1154 = des_1034 i_1035 
                                          in
                                            () 
 in
 let rec bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 =
   if i_1041 >= m_1038 then
     ()
   else
     let u_1120 = update_1153 des_1040 i_1041 (src_1039 i_1041) 
     in
       bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) 
 in
 let main_1042 n_1043 m_1044 =
   let array1_1045 = make_array_1030 n_1043 
   in
   let array2_1046 = make_array_1030 m_1044 
   in
     if n_1043 <= m_1044 then
       bcopy_aux_1152 n_1043 array1_1045 array2_1046 0
     else
       () 
 in
 let main_1151 = let arg1_1149 = rand_int () 
                 in
                 let arg2_1150 = rand_int () 
                 in
                   main_1042 arg1_1149 arg2_1150 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1182:(int -> X)) =
   let k_make_array_u_1199 (x_1185:unit) = k_make_array_1182 0 
   in
   let k_make_array_u_1188 (b_1200:bool) =
     if b_1200 then
       k_make_array_u_1199 ()
     else
       {|fail|} () k_make_array_u_1199 
   in
     if 0 <= i_1032 then
       k_make_array_u_1188 (i_1032 < n_1031)
     else
       k_make_array_u_1188 false 
 in
 let update_1153 (des_1034:(int -> ((int -> X) -> X))) (i_1035:int) (x_1036:int) (k_update_1232:(
   unit -> X)) = des_1034 i_1035 (fun x_1235 -> k_update_1232 ()) 
 in
 let rec bcopy_aux_1152
   (m_1038:int) (src_1039:(int -> ((int -> X) -> X))) (des_1040:(int -> ((int -> X) -> X))) (i_1041:int) (k_bcopy_aux_1292:(
   unit -> X)) =
   if i_1041 >= m_1038 then
     k_bcopy_aux_1292 ()
   else
     src_1039 i_1041
       (fun x_1323 ->
          update_1153 des_1040 i_1041 x_1323
            (fun x_1295 -> bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) k_bcopy_aux_1292)) 
 in
 let main_1042 (n_1043:int) (m_1044:int) (k_main_1369:(unit -> X)) =
   if n_1043 <= m_1044 then
     bcopy_aux_1152 n_1043 (make_array_1030 n_1043) (make_array_1030 m_1044) 0 k_main_1369
   else
     k_main_1369 () 
 in
   rand_int_cps () (fun x_1436 -> rand_int_cps () (fun x_1449 -> main_1042 x_1436 x_1449 (fun x_1433 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1478
  main_1478 -> (rand_int f_1482)
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (i_1041 >= m_1038) -> (k_bcopy_aux_1292 ())
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (
      not (i_1041 >= m_1038)) -> (src_1039 i_1041 (f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039))
  f_1482 x_1436 -> (rand_int (f_1483 x_1436))
  f_1483 x_1436 x_1449 -> (main_1042 x_1436 x_1449 (f_1484 x_1436 x_1449))
  f_1484 x_1436 x_1449 x_1433 -> end
  f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 ->
      (update_1153 des_1040 i_1041 x_1323 (f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039))
  f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 ->
      (bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) k_bcopy_aux_1292)
  f_update_1479 i_1035 x_1036 k_update_1232 x_1235 -> (k_update_1232 ())
  fail_1485 b k -> {fail} => (k ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when b_1200 ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when (not b_1200) ->
      (fail_1485 true (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182))
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 -> (k_make_array_1182 0)
  main_1042 n_1043 m_1044 k_main_1369 when (n_1043 <= m_1044) ->
      (bcopy_aux_1152 n_1043 (make_array_1030 n_1043) (make_array_1030 m_1044) 0 k_main_1369)
  main_1042 n_1043 m_1044 k_main_1369 when (not (n_1043 <= m_1044)) -> (k_main_1369 ())
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (0 <= i_1032) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (not (0 <= i_1032)) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 false)
  update_1153 des_1034 i_1035 x_1036 k_update_1232 -> (des_1034 i_1035 (f_update_1479 i_1035 x_1036 k_update_1232))
Types:
  main_1478 : X
  bcopy_aux_1152 : (int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  fail_1485 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1478 ... --> 
  f_1482 ... --> 
  f_1483 ... --> 
  main_1042 [1/2] ... --> 
  bcopy_aux_1152 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1188 [2/2] ... --> 
  fail_1485 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(186)[1]
  program:
    main_1478  | true = ((Random.int 0) f_1482)
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    i_1041 >= m_1038) = (k_bcopy_aux_1292 ())
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    not (i_1041 >= m_1038)) = (src_1039 i_1041
                                        (f_bcopy_aux_1480 i_1041
                                                          m_1038
                                                          des_1040
                                                          k_bcopy_aux_1292
                                                          src_1039))
    f_1482 x_1436 | true = ((Random.int 0) (f_1483 x_1436))
    f_1483 x_1436 x_1449 | true = (main_1042 x_1436
                                             x_1449
                                             (f_1484 x_1436
                                                     x_1449))
    f_1484 x_1436 x_1449 x_1433 | true = end
    f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 | true = (
    update_1153 des_1040
                i_1041
                x_1323
                (f_bcopy_aux_1481 i_1041
                                  m_1038
                                  x_1323
                                  des_1040
                                  k_bcopy_aux_1292
                                  src_1039))
    f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 | true = (
    bcopy_aux_1152 m_1038
                   src_1039
                   des_1040
                   (i_1041 + 1)
                   k_bcopy_aux_1292)
    f_update_1479 i_1035 x_1036 k_update_1232 x_1235 | true = (k_update_1232 ())
    fail_1485 b k | true = (fail ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | b_1200 = (
    k_make_array_u_1199 i_1032
                        n_1031
                        k_make_array_1182
                        ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | (not b_1200) = (
    fail_1485 true
              (k_make_array_u_1199 i_1032
                                   n_1031
                                   k_make_array_1182))
    k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 | true = (
    k_make_array_1182 0)
    main_1042 n_1043 m_1044 k_main_1369 | (n_1043 <= m_1044) = (bcopy_aux_1152
                                                                  n_1043
                                                                  (make_array_1030 n_1043)
                                                                  (make_array_1030 m_1044)
                                                                  0
                                                                  k_main_1369)
    main_1042 n_1043 m_1044 k_main_1369 | (not (n_1043 <= m_1044)) = (
    k_main_1369 ())
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (0 <= i_1032) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (not (0 <= i_1032)) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        false)
    update_1153 des_1034 i_1035 x_1036 k_update_1232 | true = (des_1034
                                                                 i_1035
                                                                 (f_update_1479 i_1035
                                                                    x_1036
                                                                    k_update_1232))
    main_1478:X
    bcopy_aux_1152:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1482:int -> X
    f_1483:int -> int -> X
    f_1484:int -> int -> unit -> X
    f_bcopy_aux_1480:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1481:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1479:int -> int -> (unit -> X) -> int -> X
    fail_1485:bool -> (unit -> X) -> X
    k_make_array_u_1188:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1199:int -> int -> (int -> X) -> unit -> X
    main_1042:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1153:(int -> (int -> X) -> X) -> int -> int -> (unit -> X) -> X
  inlined functions: f_1482,f_1483,f_1484,f_bcopy_aux_1480,f_bcopy_aux_1481,f_update_1479,k_make_array_u_1188,k_make_array_u_1199,main_1042,make_array_1030,update_1153
  counterexample: 0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1482@4:0> = var2)
     [true.nop((<f_1483@7:0> = <f_1482@4:0>) && (<f_1483@7:1> = var3))
      [true.((<main_1042@9:0> = <f_1483@7:0>) && (<main_1042@9:1> = <f_1483@7:1>))
       [(<main_1042@9:0> <= <main_1042@9:1>).((<bcopy_aux_1152@12:0> = <main_1042@9:0>) && (<bcopy_aux_1152@12:3> = 0))
        [(not (<bcopy_aux_1152@12:3> >= <bcopy_aux_1152@12:0>)).(<<bcopy_aux_1152@12:1>@15:0> = <bcopy_aux_1152@12:3>)
         [true.((<make_array_1030@17:0> = <main_1042@9:0>) && (<make_array_1030@17:1> = <<bcopy_aux_1152@12:1>@15:0>))
          [(not (0 <= <make_array_1030@17:1>)).
           ((<k_make_array_u_1188@20:0> = <make_array_1030@17:1>) &&
            ((<k_make_array_u_1188@20:1> = <make_array_1030@17:0>) && (<k_make_array_u_1188@20:3> = false)))
           [(not <k_make_array_u_1188@20:3>).(<fail_1485@23:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(187)[2]
    horn clauses:
      P[<fail_1485@23:0>](<fail_1485@23:0>:bool)|- bot
      
      P[<k_make_array_u_1188@20:3>](<k_make_array_u_1188@20:0>:int,<k_make_array_u_1188@20:1>:int,false:bool),
      <fail_1485@23:0> |- P[<fail_1485@23:0>](<fail_1485@23:0>:bool)
      
      P[<make_array_1030@17:1>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
      ((0 > <k_make_array_u_1188@20:0>) && (not <k_make_array_u_1188@20:3>))
      |- P[<k_make_array_u_1188@20:3>](<k_make_array_u_1188@20:0>:int,
                                       <k_make_array_u_1188@20:1>:int,
                                       <k_make_array_u_1188@20:3>:bool)
      
      P[<main_1042@9:1>](<make_array_1030@17:0>:int,<main_1042@9:1>:int),
      P[<<bcopy_aux_1152@12:1>@15:0>](<make_array_1030@17:0>:int,<make_array_1030@17:1>:int),
      (<make_array_1030@17:0> <= <main_1042@9:1>)
      |- P[<make_array_1030@17:1>](<make_array_1030@17:0>:int,<make_array_1030@17:1>:int)
      
      P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
      (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
      |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int)
      
      P[<main_1042@9:1>](<bcopy_aux_1152@12:0>:int,<main_1042@9:1>:int),
      ((<bcopy_aux_1152@12:3> = 0) && (<bcopy_aux_1152@12:0> <= <main_1042@9:1>))
      |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<bcopy_aux_1152@12:3>:int)
      
      P[<f_1483@7:1>](<main_1042@9:0>:int,<main_1042@9:1>:int)|- P[<main_1042@9:1>](
      <main_1042@9:0>:int,<main_1042@9:1>:int)
      
      P[<f_1482@4:0>](<f_1483@7:0>:int)|- P[<f_1483@7:1>](<f_1483@7:0>:int,
                                                          <f_1483@7:1>:int)
      
      |- P[<f_1482@4:0>](<f_1482@4:0>:int)
    call trees:
      <main_1478@1>
        <f_1482@4>
          <f_1483@7>
            <main_1042@9>
              <bcopy_aux_1152@12>
              </<bcopy_aux_1152@12:1>@15>
              <make_array_1030@17>
                <k_make_array_u_1188@20>
                  <fail_1485@23>
    inlined horn clauses:
      P[<fail_1485@23:0>](<fail_1485@23:0>:bool)|- bot
      
      P[<<bcopy_aux_1152@12:1>@15:0>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
      ((0 > <k_make_array_u_1188@20:0>) && <fail_1485@23:0>) |- P[<fail_1485@23:0>](
      <fail_1485@23:0>:bool)
      
      P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
      (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
      |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int)
      
       (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                               <bcopy_aux_1152@12:3>:int)
    begin ParamSubstInfer.infer(1207)[3]
      
    end ParamSubstInfer.infer(1207)[3] (0.027996 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1209)[3]
      
    end RefTypeInfer.elim_coeffs(1209)[3] (0.000000 sec.)
    begin GenHcSolver.solve(1334)[3]
      Horn clauses:
        P[<fail_1485@23:0>](<fail_1485@23:0>:bool)|- bot
        
        P[<<bcopy_aux_1152@12:1>@15:0>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
        ((0 > <k_make_array_u_1188@20:0>) && <fail_1485@23:0>) |- P[<fail_1485@23:0>](
        <fail_1485@23:0>:bool)
        
        P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
        (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
        |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,
                                           <<bcopy_aux_1152@12:1>@15:0>:int)
        
         (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                                 <bcopy_aux_1152@12:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<bcopy_aux_1152@12:3>:int) = (<bcopy_aux_1152@12:3> = 0)
        P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int) =
        ((<<bcopy_aux_1152@12:1>@15:0> = 0) && (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>))
        P[<fail_1485@23:0>](<fail_1485@23:0>:bool) = false
      upper bounds:
        P[<fail_1485@23:0>](var5:bool) = true
      begin GenHcSolver.classify_pids(2092)[4]
        output:
          [<fail_1485@23:0>]
      end GenHcSolver.classify_pids(2092)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2095)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2096)[5]
          begin InterpProver.interpolate_fresh(2097)[6]
            begin InterpProver.interpolate_log(2098)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2099)[8]
                begin InterpProver.interpolate_simplify(2100)[9]
                  begin InterpProver.interpolate_quick(2113)[10]
                    
                  end InterpProver.interpolate_quick(2113)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2117)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2117)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2100)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2099)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2098)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2097)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2096)[5] (0.000000 sec.)
        output:
          P[<fail_1485@23:0>](<fail_1485@23:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2095)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1152@12:1>@15:0>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
        (0 > <k_make_array_u_1188@20:0>) |- bot
        
        P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
        (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
        |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,
                                           <<bcopy_aux_1152@12:1>@15:0>:int)
        
         (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                                 <bcopy_aux_1152@12:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<bcopy_aux_1152@12:3>:int) = (<bcopy_aux_1152@12:3> = 0)
        P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int) =
        ((<<bcopy_aux_1152@12:1>@15:0> = 0) && (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>))
      upper bounds:
        P[<<bcopy_aux_1152@12:1>@15:0>](var6:int,var7:int) = (0 <= var7)
      begin GenHcSolver.classify_pids(2973)[4]
        output:
          [<<bcopy_aux_1152@12:1>@15:0>]
      end GenHcSolver.classify_pids(2973)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1152@12:1>@15:0> = 0) && (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>))
      nub:(not (0 <= <<bcopy_aux_1152@12:1>@15:0>))
      begin ApronInterface.convex_hull_interpolate(2976)[4]
        lb:((<<bcopy_aux_1152@12:1>@15:0> = 0) && (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>))
        nub:(not (0 <= <<bcopy_aux_1152@12:1>@15:0>))
        lb':((<<bcopy_aux_1152@12:1>@15:0> = 0) && (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>))
        nub':(not (0 <= <<bcopy_aux_1152@12:1>@15:0>))
        begin InterpProver.interpolate(2977)[5]
          begin InterpProver.interpolate_fresh(2978)[6]
            begin InterpProver.interpolate_log(2979)[7]
              input1: ((<<bcopy_aux_1152@12:1>@15:0> = 0) && (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>))
              input2: (not (0 <= <<bcopy_aux_1152@12:1>@15:0>))
              begin InterpProver.interpolate_check(2980)[8]
                begin InterpProver.interpolate_simplify(2981)[9]
                  begin InterpProver.interpolate_quick(3014)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(3023)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(3024)[12]
                        begin CsisatInterface.interpolate_csisat_log(3025)[13]
                          input1: (0 = v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0 & (1 + v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0) <= v_sep_bcopy_aux_1152_sep_12_sep_0)
                          input2: (1 + v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(3026)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(3026)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(3025)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(3024)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(3023)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(3014)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2981)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2980)[8] (0.000000 sec.)
              output: (0 <= <<bcopy_aux_1152@12:1>@15:0>)
            end InterpProver.interpolate_log(2979)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2978)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2977)[5] (0.000000 sec.)
        output:
          P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int) =
          (0 <= <<bcopy_aux_1152@12:1>@15:0>)
      end ApronInterface.convex_hull_interpolate(2976)[4] (0.000000 sec.)
      Horn clauses:
        P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
        ((<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>) && (0 > <<bcopy_aux_1152@12:1>@15:0>)) |- bot
        
         (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                                 <bcopy_aux_1152@12:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<bcopy_aux_1152@12:3>:int) = (<bcopy_aux_1152@12:3> = 0)
      upper bounds:
        P[<bcopy_aux_1152@12:3>](var8:int,var9:int) = ((var9 >= var8) || (0 <= var9))
      begin GenHcSolver.classify_pids(3740)[4]
        output:
          [<bcopy_aux_1152@12:3>]
      end GenHcSolver.classify_pids(3740)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1152@12:3> = 0)
      nub:(not ((<bcopy_aux_1152@12:3> >= <bcopy_aux_1152@12:0>) || (0 <= <bcopy_aux_1152@12:3>)))
      begin ApronInterface.convex_hull_interpolate(3743)[4]
        lb:(<bcopy_aux_1152@12:3> = 0)
        nub:(not ((<bcopy_aux_1152@12:3> >= <bcopy_aux_1152@12:0>) || (0 <= <bcopy_aux_1152@12:3>)))
        lb':(<bcopy_aux_1152@12:3> = 0)
        nub':(not ((<bcopy_aux_1152@12:3> >= <bcopy_aux_1152@12:0>) || (0 <= <bcopy_aux_1152@12:3>)))
        begin InterpProver.interpolate(3744)[5]
          begin InterpProver.interpolate_fresh(3745)[6]
            begin InterpProver.interpolate_log(3746)[7]
              input1: (<bcopy_aux_1152@12:3> = 0)
              input2: (not ((<bcopy_aux_1152@12:3> >= <bcopy_aux_1152@12:0>) || (0 <= <bcopy_aux_1152@12:3>)))
              begin InterpProver.interpolate_check(3747)[8]
                begin InterpProver.interpolate_simplify(3748)[9]
                  begin InterpProver.interpolate_quick(3787)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(3796)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(3797)[12]
                        begin CsisatInterface.interpolate_csisat_log(3798)[13]
                          input1: 0 = v_sep_bcopy_aux_1152_sep_12_sep_3
                          input2: ((1 + v_sep_bcopy_aux_1152_sep_12_sep_3) <= 0 & (1 + v_sep_bcopy_aux_1152_sep_12_sep_3) <= v_sep_bcopy_aux_1152_sep_12_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(3799)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(3799)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1152_sep_12_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(3798)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1152_sep_12_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1152_sep_12_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(3797)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(3796)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(3787)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3748)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3747)[8] (0.000999 sec.)
              output: (0 <= <bcopy_aux_1152@12:3>)
            end InterpProver.interpolate_log(3746)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(3745)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(3744)[5] (0.000999 sec.)
        output:
          P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<bcopy_aux_1152@12:3>:int) = (0 <= <bcopy_aux_1152@12:3>)
      end ApronInterface.convex_hull_interpolate(3743)[4] (0.000999 sec.)
      begin HcSolver.check_validity(3915)[4]
        input:
          P[<fail_1485@23:0>](<fail_1485@23:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@12:1>@15:0>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
          ((0 > <k_make_array_u_1188@20:0>) && <fail_1485@23:0>) |- P[<fail_1485@23:0>](
          <fail_1485@23:0>:bool)
          
          P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
          (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
          |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,
                                             <<bcopy_aux_1152@12:1>@15:0>:int)
          
           (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                                   <bcopy_aux_1152@12:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3915)[4] (0.002000 sec.)
      solution:
        P[<fail_1485@23:0>](<fail_1485@23:0>:bool) = false
        P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int) =
        (0 <= <<bcopy_aux_1152@12:1>@15:0>)
        P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<bcopy_aux_1152@12:3>:int) = (0 <= <bcopy_aux_1152@12:3>)
    end GenHcSolver.solve(1334)[3] (0.012998 sec.)
    begin GenHcSolver.solve(4146)[3]
      Horn clauses:
        P[<fail_1485@23:0>](<fail_1485@23:0>:bool)|- bot
        
        P[<<bcopy_aux_1152@12:1>@15:0>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
        ((0 > <k_make_array_u_1188@20:0>) && <fail_1485@23:0>) |- P[<fail_1485@23:0>](
        <fail_1485@23:0>:bool)
        
        P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
        (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
        |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,
                                           <<bcopy_aux_1152@12:1>@15:0>:int)
        
         (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                                 <bcopy_aux_1152@12:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<bcopy_aux_1152@12:3>:int) = (<bcopy_aux_1152@12:3> = 0)
        P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int) =
        ((<<bcopy_aux_1152@12:1>@15:0> = 0) && (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>))
        P[<fail_1485@23:0>](<fail_1485@23:0>:bool) = false
      upper bounds:
        P[<fail_1485@23:0>](var11:bool) = true
      begin GenHcSolver.classify_pids(4904)[4]
        output:
          [<fail_1485@23:0>]
      end GenHcSolver.classify_pids(4904)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(4907)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(4910)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4910)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(4915)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4915)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(4918)[5]
          begin InterpProver.interpolate_fresh(4919)[6]
            begin InterpProver.interpolate_log(4920)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(4921)[8]
                begin InterpProver.interpolate_simplify(4922)[9]
                  begin InterpProver.interpolate_quick(4937)[10]
                    
                  end InterpProver.interpolate_quick(4937)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(4941)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(4941)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4922)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(4921)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(4920)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(4919)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(4918)[5] (0.001000 sec.)
        output:
          P[<fail_1485@23:0>](<fail_1485@23:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(4907)[4] (0.001000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1152@12:1>@15:0>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
        (0 > <k_make_array_u_1188@20:0>) |- bot
        
        P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
        (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
        |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,
                                           <<bcopy_aux_1152@12:1>@15:0>:int)
        
         (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                                 <bcopy_aux_1152@12:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<bcopy_aux_1152@12:3>:int) = (<bcopy_aux_1152@12:3> = 0)
        P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int) =
        ((<<bcopy_aux_1152@12:1>@15:0> = 0) && (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>))
      upper bounds:
        P[<<bcopy_aux_1152@12:1>@15:0>](var12:int,var13:int) = (0 <= var13)
      begin GenHcSolver.classify_pids(5804)[4]
        output:
          [<<bcopy_aux_1152@12:1>@15:0>]
      end GenHcSolver.classify_pids(5804)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1152@12:1>@15:0> = 0) && (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>))
      nub:(not (0 <= <<bcopy_aux_1152@12:1>@15:0>))
      begin ApronInterface.convex_hull_interpolate(5807)[4]
        lb:((<<bcopy_aux_1152@12:1>@15:0> = 0) && (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>))
        nub:(not (0 <= <<bcopy_aux_1152@12:1>@15:0>))
        begin ExtFormula.Formula.case_analysis_boolean(5819)[5]
          ts: ((<<bcopy_aux_1152@12:1>@15:0> = 0) && (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(5819)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5828)[5]
          ts: (0 > <<bcopy_aux_1152@12:1>@15:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(5828)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1152@12:1>@15:0> = 0) && ((-1 + <bcopy_aux_1152@12:0>) >= 0))
        nub':((-1 + (-1 * <<bcopy_aux_1152@12:1>@15:0>)) >= 0)
        begin InterpProver.interpolate(5832)[5]
          begin InterpProver.interpolate_fresh(5833)[6]
            begin InterpProver.interpolate_log(5834)[7]
              input1: ((<<bcopy_aux_1152@12:1>@15:0> = 0) && ((-1 + <bcopy_aux_1152@12:0>) >= 0))
              input2: ((-1 + (-1 * <<bcopy_aux_1152@12:1>@15:0>)) >= 0)
              begin InterpProver.interpolate_check(5835)[8]
                begin InterpProver.interpolate_simplify(5836)[9]
                  begin InterpProver.interpolate_quick(5873)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(5882)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(5883)[12]
                        begin CsisatInterface.interpolate_csisat_log(5884)[13]
                          input1: (0 = v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0 & 1 <= v_sep_bcopy_aux_1152_sep_12_sep_0)
                          input2: (1 + v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(5885)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(5885)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(5884)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(5883)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(5882)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(5873)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(5836)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(5835)[8] (0.001999 sec.)
              output: (0 <= <<bcopy_aux_1152@12:1>@15:0>)
            end InterpProver.interpolate_log(5834)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(5833)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(5832)[5] (0.001999 sec.)
        output:
          P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int) =
          (0 <= <<bcopy_aux_1152@12:1>@15:0>)
      end ApronInterface.convex_hull_interpolate(5807)[4] (0.001999 sec.)
      Horn clauses:
        P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
        ((<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>) && (0 > <<bcopy_aux_1152@12:1>@15:0>)) |- bot
        
         (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                                 <bcopy_aux_1152@12:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<bcopy_aux_1152@12:3>:int) = (<bcopy_aux_1152@12:3> = 0)
      upper bounds:
        P[<bcopy_aux_1152@12:3>](var14:int,var15:int) = ((var15 >= var14) || (0 <= var15))
      begin GenHcSolver.classify_pids(6606)[4]
        output:
          [<bcopy_aux_1152@12:3>]
      end GenHcSolver.classify_pids(6606)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1152@12:3> = 0)
      nub:(not ((<bcopy_aux_1152@12:3> >= <bcopy_aux_1152@12:0>) || (0 <= <bcopy_aux_1152@12:3>)))
      begin ApronInterface.convex_hull_interpolate(6609)[4]
        lb:(<bcopy_aux_1152@12:3> = 0)
        nub:(not ((<bcopy_aux_1152@12:3> >= <bcopy_aux_1152@12:0>) || (0 <= <bcopy_aux_1152@12:3>)))
        begin ExtFormula.Formula.case_analysis_boolean(6613)[5]
          ts: (<bcopy_aux_1152@12:3> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(6613)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(6631)[5]
          ts: ((<bcopy_aux_1152@12:3> < <bcopy_aux_1152@12:0>) && (0 > <bcopy_aux_1152@12:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(6631)[5] (0.000000 sec.)
        lb':(<bcopy_aux_1152@12:3> = 0)
        nub':(((-1 + (-1 * <bcopy_aux_1152@12:3>)) >= 0) &&
              (((-1 + (-1 * <bcopy_aux_1152@12:3>)) + <bcopy_aux_1152@12:0>) >= 0))
        begin InterpProver.interpolate(6637)[5]
          begin InterpProver.interpolate_fresh(6638)[6]
            begin InterpProver.interpolate_log(6639)[7]
              input1: (<bcopy_aux_1152@12:3> = 0)
              input2: (((-1 + (-1 * <bcopy_aux_1152@12:3>)) >= 0) &&
                       (((-1 + (-1 * <bcopy_aux_1152@12:3>)) + <bcopy_aux_1152@12:0>) >= 0))
              begin InterpProver.interpolate_check(6640)[8]
                begin InterpProver.interpolate_simplify(6641)[9]
                  begin InterpProver.interpolate_quick(6692)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(6701)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(6702)[12]
                        begin CsisatInterface.interpolate_csisat_log(6703)[13]
                          input1: 0 = v_sep_bcopy_aux_1152_sep_12_sep_3
                          input2: ((1 + v_sep_bcopy_aux_1152_sep_12_sep_3) <= 0 & (1 + v_sep_bcopy_aux_1152_sep_12_sep_3) <= v_sep_bcopy_aux_1152_sep_12_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(6704)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(6704)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1152_sep_12_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(6703)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1152_sep_12_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1152_sep_12_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(6702)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(6701)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(6692)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(6641)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(6640)[8] (0.001999 sec.)
              output: (0 <= <bcopy_aux_1152@12:3>)
            end InterpProver.interpolate_log(6639)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(6638)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(6637)[5] (0.001999 sec.)
        output:
          P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<bcopy_aux_1152@12:3>:int) = (0 <= <bcopy_aux_1152@12:3>)
      end ApronInterface.convex_hull_interpolate(6609)[4] (0.001999 sec.)
      begin HcSolver.check_validity(6824)[4]
        input:
          P[<fail_1485@23:0>](<fail_1485@23:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@12:1>@15:0>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
          ((0 > <k_make_array_u_1188@20:0>) && <fail_1485@23:0>) |- P[<fail_1485@23:0>](
          <fail_1485@23:0>:bool)
          
          P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
          (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
          |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,
                                             <<bcopy_aux_1152@12:1>@15:0>:int)
          
           (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                                   <bcopy_aux_1152@12:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(6824)[4] (0.002000 sec.)
      solution:
        P[<fail_1485@23:0>](<fail_1485@23:0>:bool) = false
        P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int) =
        (0 <= <<bcopy_aux_1152@12:1>@15:0>)
        P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<bcopy_aux_1152@12:3>:int) = (0 <= <bcopy_aux_1152@12:3>)
    end GenHcSolver.solve(4146)[3] (0.020997 sec.)
    begin YhornInterface.solve(7055)[3]
      begin HcSolver.solve_ub(7056)[4]
        encoded:
          P[<fail_1485@23:0>](<fail_1485@23:0>:int)|- bot
          
          P[<<bcopy_aux_1152@12:1>@15:0>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
          ((0 > <k_make_array_u_1188@20:0>) && (<fail_1485@23:0> = 1)) |- P[<fail_1485@23:0>](
          <fail_1485@23:0>:int)
          
          P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
          (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
          |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,
                                             <<bcopy_aux_1152@12:1>@15:0>:int)
          
           (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                                   <bcopy_aux_1152@12:3>:int)
        input to Yhorn:
          P[<fail_1485@23:0>](<fail_1485@23:0>:int)|- bot
          
          P[<<bcopy_aux_1152@12:1>@15:0>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
          ((0 > <k_make_array_u_1188@20:0>) && (<fail_1485@23:0> = 1)) |- P[<fail_1485@23:0>](
          <fail_1485@23:0>:int)
          
          P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
          (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
          |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,
                                             <<bcopy_aux_1152@12:1>@15:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1485_sep_23_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0)) & (v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0($9,$8)) -> v_sep_fail_1485_sep_23_sep_0($7).
($10-$11<0) & (v_sep_bcopy_aux_1152_sep_12_sep_3($11,$10)) -> v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0($11,$10).
$12=0 -> v_sep_bcopy_aux_1152_sep_12_sep_3($11,$12).


v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0: X
v_sep_bcopy_aux_1152_sep_12_sep_3: X
v_sep_fail_1485_sep_23_sep_0: X
....
v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0: X
v_sep_bcopy_aux_1152_sep_12_sep_3: X
v_sep_fail_1485_sep_23_sep_0: X
...
v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0: X
v_sep_bcopy_aux_1152_sep_12_sep_3: X
v_sep_fail_1485_sep_23_sep_0: X
....
v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0: X
v_sep_bcopy_aux_1152_sep_12_sep_3: X
v_sep_fail_1485_sep_23_sep_0: X
....(0=0) & (v_sep_fail_1485_sep_23_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0)) & (v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0($9,$8)) -> v_sep_fail_1485_sep_23_sep_0($7).
($10-$11<0) & (v_sep_bcopy_aux_1152_sep_12_sep_3($11,$10)) -> v_sep_bcopy_aux_1152_sep_12_sep_1_sep_15_sep_0($11,$10).
$12=0 -> v_sep_bcopy_aux_1152_sep_12_sep_3($11,$12).

           (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                                   <bcopy_aux_1152@12:3>:int)
        solution:
          P[<<bcopy_aux_1152@12:1>@15:0>]($16:int,$18:int) = (0 <= $18)
          P[<bcopy_aux_1152@12:3>]($21:int,$23:int) = (0 <= $23)
          P[<fail_1485@23:0>]($13:bool) = false
        
      end HcSolver.solve_ub(7056)[4] (0.009998 sec.)
      begin HcSolver.check_validity(7140)[4]
        input:
          P[<fail_1485@23:0>](<fail_1485@23:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@12:1>@15:0>](<k_make_array_u_1188@20:1>:int,<k_make_array_u_1188@20:0>:int),
          ((0 > <k_make_array_u_1188@20:0>) && <fail_1485@23:0>) |- P[<fail_1485@23:0>](
          <fail_1485@23:0>:bool)
          
          P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,<<bcopy_aux_1152@12:1>@15:0>:int),
          (<<bcopy_aux_1152@12:1>@15:0> < <bcopy_aux_1152@12:0>)
          |- P[<<bcopy_aux_1152@12:1>@15:0>](<bcopy_aux_1152@12:0>:int,
                                             <<bcopy_aux_1152@12:1>@15:0>:int)
          
           (<bcopy_aux_1152@12:3> = 0) |- P[<bcopy_aux_1152@12:3>](<bcopy_aux_1152@12:0>:int,
                                                                   <bcopy_aux_1152@12:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(7140)[4] (0.002000 sec.)
      solution:
        P[<<bcopy_aux_1152@12:1>@15:0>]($16:int,$18:int) = (0 <= $18)
        P[<bcopy_aux_1152@12:3>]($21:int,$23:int) = (0 <= $23)
        P[<fail_1485@23:0>]($13:bool) = false
    end YhornInterface.solve(7055)[3] (0.011998 sec.)
    
  end RefTypeInfer.infer_etrs(187)[2] (0.080988 sec.)
  refinement types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:{v10:int | (0 <= v10)} -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1485: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1484: var35:int -> var34:int -> var33:unit -> X
    f_bcopy_aux_1480: var49:int ->
                      var48:int ->
                      (var47:int -> (var46:int -> X) -> X) ->
                      (var43:unit -> X) -> (var41:int -> (var40:int -> X) -> X) -> var37:int -> X
    f_bcopy_aux_1481: var64:int ->
                      var63:int ->
                      var62:int ->
                      (var61:int -> (var60:int -> X) -> X) ->
                      (var57:unit -> X) -> (var55:int -> (var54:int -> X) -> X) -> var51:unit -> X
    f_update_1479: var70:int -> var69:int -> (var68:unit -> X) -> var66:int -> X
    k_make_array_u_1199: var76:int -> var75:int -> (var74:int -> X) -> var72:unit -> X
    update_1153: (var85:int -> (var84:int -> X) -> X) -> var81:int -> var80:int -> (var79:unit -> X) -> X
  abstraction types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int[v10 -> (
                                                              0 <= v10)] -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1485: v1:bool -> (v2:unit -> X) -> X
    f_1484: var35:int -> var34:int -> var33:unit -> X
    f_bcopy_aux_1480: var49:int ->
                      var48:int ->
                      (var47:int -> (var46:int -> X) -> X) ->
                      (var43:unit -> X) -> (var41:int -> (var40:int -> X) -> X) -> var37:int -> X
    f_bcopy_aux_1481: var64:int ->
                      var63:int ->
                      var62:int ->
                      (var61:int -> (var60:int -> X) -> X) ->
                      (var57:unit -> X) -> (var55:int -> (var54:int -> X) -> X) -> var51:unit -> X
    f_update_1479: var70:int -> var69:int -> (var68:unit -> X) -> var66:int -> X
    k_make_array_u_1199: var76:int -> var75:int -> (var74:int -> X) -> var72:unit -> X
    update_1153: (var85:int -> (var84:int -> X) -> X) -> var81:int -> var80:int -> (var79:unit -> X) -> X
  
end AbsTypeInfer.refine(186)[1] (0.084987 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1478
  main_1478 -> (rand_int f_1482)
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (i_1041 >= m_1038) -> (k_bcopy_aux_1292 ())
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (
      not (i_1041 >= m_1038)) -> (src_1039 i_1041 (f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039))
  f_1482 x_1436 -> (rand_int (f_1483 x_1436))
  f_1483 x_1436 x_1449 -> (main_1042 x_1436 x_1449 (f_1484 x_1436 x_1449))
  f_1484 x_1436 x_1449 x_1433 -> end
  f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 ->
      (update_1153 des_1040 i_1041 x_1323 (f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039))
  f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 ->
      (bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) k_bcopy_aux_1292)
  f_update_1479 i_1035 x_1036 k_update_1232 x_1235 -> (k_update_1232 ())
  fail_1485 b k -> {fail} => (k ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when b_1200 ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when (not b_1200) ->
      (fail_1485 true (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182))
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 -> (k_make_array_1182 0)
  main_1042 n_1043 m_1044 k_main_1369 when (n_1043 <= m_1044) ->
      (bcopy_aux_1152 n_1043 (make_array_1030 n_1043) (make_array_1030 m_1044) 0 k_main_1369)
  main_1042 n_1043 m_1044 k_main_1369 when (not (n_1043 <= m_1044)) -> (k_main_1369 ())
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (0 <= i_1032) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (not (0 <= i_1032)) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 false)
  update_1153 des_1034 i_1035 x_1036 k_update_1232 -> (des_1034 i_1035 (f_update_1479 i_1035 x_1036 k_update_1232))
Types:
  main_1478 : X
  bcopy_aux_1152 : (int ->
                    (x_3:int[x_3 >= 0] -> (int -> X) -> X) ->
                    (int -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1485 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1478 ... --> 
  f_1482 ... --> 
  f_1483 ... --> 
  main_1042 [1/2] ... --> 
  bcopy_aux_1152 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1188 [2/2] ... --> 
  fail_1485 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(7765)[1]
  program:
    main_1478  | true = ((Random.int 0) f_1482)
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    i_1041 >= m_1038) = (k_bcopy_aux_1292 ())
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    not (i_1041 >= m_1038)) = (src_1039 i_1041
                                        (f_bcopy_aux_1480 i_1041
                                                          m_1038
                                                          des_1040
                                                          k_bcopy_aux_1292
                                                          src_1039))
    f_1482 x_1436 | true = ((Random.int 0) (f_1483 x_1436))
    f_1483 x_1436 x_1449 | true = (main_1042 x_1436
                                             x_1449
                                             (f_1484 x_1436
                                                     x_1449))
    f_1484 x_1436 x_1449 x_1433 | true = end
    f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 | true = (
    update_1153 des_1040
                i_1041
                x_1323
                (f_bcopy_aux_1481 i_1041
                                  m_1038
                                  x_1323
                                  des_1040
                                  k_bcopy_aux_1292
                                  src_1039))
    f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 | true = (
    bcopy_aux_1152 m_1038
                   src_1039
                   des_1040
                   (i_1041 + 1)
                   k_bcopy_aux_1292)
    f_update_1479 i_1035 x_1036 k_update_1232 x_1235 | true = (k_update_1232 ())
    fail_1485 b k | true = (fail ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | b_1200 = (
    k_make_array_u_1199 i_1032
                        n_1031
                        k_make_array_1182
                        ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | (not b_1200) = (
    fail_1485 true
              (k_make_array_u_1199 i_1032
                                   n_1031
                                   k_make_array_1182))
    k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 | true = (
    k_make_array_1182 0)
    main_1042 n_1043 m_1044 k_main_1369 | (n_1043 <= m_1044) = (bcopy_aux_1152
                                                                  n_1043
                                                                  (make_array_1030 n_1043)
                                                                  (make_array_1030 m_1044)
                                                                  0
                                                                  k_main_1369)
    main_1042 n_1043 m_1044 k_main_1369 | (not (n_1043 <= m_1044)) = (
    k_main_1369 ())
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (0 <= i_1032) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (not (0 <= i_1032)) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        false)
    update_1153 des_1034 i_1035 x_1036 k_update_1232 | true = (des_1034
                                                                 i_1035
                                                                 (f_update_1479 i_1035
                                                                    x_1036
                                                                    k_update_1232))
    main_1478:X
    bcopy_aux_1152:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1482:int -> X
    f_1483:int -> int -> X
    f_1484:int -> int -> unit -> X
    f_bcopy_aux_1480:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1481:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1479:int -> int -> (unit -> X) -> int -> X
    fail_1485:bool -> (unit -> X) -> X
    k_make_array_u_1188:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1199:int -> int -> (int -> X) -> unit -> X
    main_1042:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1153:(int -> (int -> X) -> X) -> int -> int -> (unit -> X) -> X
  inlined functions: f_1482,f_1483,f_1484,f_bcopy_aux_1480,f_bcopy_aux_1481,f_update_1479,k_make_array_u_1188,k_make_array_u_1199,main_1042,make_array_1030,update_1153
  counterexample: 0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1482@29:0> = var86)
     [true.nop((<f_1483@32:0> = <f_1482@29:0>) && (<f_1483@32:1> = var87))
      [true.((<main_1042@34:0> = <f_1483@32:0>) && (<main_1042@34:1> = <f_1483@32:1>))
       [(<main_1042@34:0> <= <main_1042@34:1>).
        ((<bcopy_aux_1152@37:0> = <main_1042@34:0>) && (<bcopy_aux_1152@37:3> = 0))
        [(not (<bcopy_aux_1152@37:3> >= <bcopy_aux_1152@37:0>)).(<<bcopy_aux_1152@37:1>@40:0> = <bcopy_aux_1152@37:3>)
         [true.((<make_array_1030@42:0> = <main_1042@34:0>) && (<make_array_1030@42:1> = <<bcopy_aux_1152@37:1>@40:0>))
          [(0 <= <make_array_1030@42:1>).
           ((<k_make_array_u_1188@45:0> = <make_array_1030@42:1>) &&
            ((<k_make_array_u_1188@45:1> = <make_array_1030@42:0>) &&
             (<k_make_array_u_1188@45:3> = (<make_array_1030@42:1> < <make_array_1030@42:0>))))
           [(not <k_make_array_u_1188@45:3>).(<fail_1485@48:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(7766)[2]
    horn clauses:
      P[<fail_1485@48:0>](<fail_1485@48:0>:bool)|- bot
      
      P[<k_make_array_u_1188@45:3>](<k_make_array_u_1188@45:0>:int,<k_make_array_u_1188@45:1>:int,false:bool),
      <fail_1485@48:0> |- P[<fail_1485@48:0>](<fail_1485@48:0>:bool)
      
      P[<make_array_1030@42:1>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
      ((0 <= <k_make_array_u_1188@45:0>) &&
       (<k_make_array_u_1188@45:3> = (<k_make_array_u_1188@45:0> < <k_make_array_u_1188@45:1>)))
      |- P[<k_make_array_u_1188@45:3>](<k_make_array_u_1188@45:0>:int,
                                       <k_make_array_u_1188@45:1>:int,
                                       <k_make_array_u_1188@45:3>:bool)
      
      P[<main_1042@34:1>](<make_array_1030@42:0>:int,<main_1042@34:1>:int),
      P[<<bcopy_aux_1152@37:1>@40:0>](<make_array_1030@42:0>:int,<make_array_1030@42:1>:int),
      (<make_array_1030@42:0> <= <main_1042@34:1>)
      |- P[<make_array_1030@42:1>](<make_array_1030@42:0>:int,<make_array_1030@42:1>:int)
      
      P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
      (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
      |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int)
      
      P[<main_1042@34:1>](<bcopy_aux_1152@37:0>:int,<main_1042@34:1>:int),
      ((<bcopy_aux_1152@37:3> = 0) && (<bcopy_aux_1152@37:0> <= <main_1042@34:1>))
      |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<bcopy_aux_1152@37:3>:int)
      
      P[<f_1483@32:1>](<main_1042@34:0>:int,<main_1042@34:1>:int)|- P[<main_1042@34:1>](
      <main_1042@34:0>:int,<main_1042@34:1>:int)
      
      P[<f_1482@29:0>](<f_1483@32:0>:int)|- P[<f_1483@32:1>](<f_1483@32:0>:int,
                                                             <f_1483@32:1>:int)
      
      |- P[<f_1482@29:0>](<f_1482@29:0>:int)
    call trees:
      <main_1478@26>
        <f_1482@29>
          <f_1483@32>
            <main_1042@34>
              <bcopy_aux_1152@37>
              </<bcopy_aux_1152@37:1>@40>
              <make_array_1030@42>
                <k_make_array_u_1188@45>
                  <fail_1485@48>
    inlined horn clauses:
      P[<fail_1485@48:0>](<fail_1485@48:0>:bool)|- bot
      
      P[<<bcopy_aux_1152@37:1>@40:0>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
      ((0 <= <k_make_array_u_1188@45:0>) &&
       ((<k_make_array_u_1188@45:0> >= <k_make_array_u_1188@45:1>) && <fail_1485@48:0>))
      |- P[<fail_1485@48:0>](<fail_1485@48:0>:bool)
      
      P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
      (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
      |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int)
      
       (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                               <bcopy_aux_1152@37:3>:int)
    begin ParamSubstInfer.infer(9004)[3]
      
    end ParamSubstInfer.infer(9004)[3] (0.064990 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(9006)[3]
      
    end RefTypeInfer.elim_coeffs(9006)[3] (0.000999 sec.)
    begin GenHcSolver.solve(9198)[3]
      Horn clauses:
        P[<fail_1485@48:0>](<fail_1485@48:0>:bool)|- bot
        
        P[<<bcopy_aux_1152@37:1>@40:0>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
        ((0 <= <k_make_array_u_1188@45:0>) &&
         ((<k_make_array_u_1188@45:0> >= <k_make_array_u_1188@45:1>) && <fail_1485@48:0>))
        |- P[<fail_1485@48:0>](<fail_1485@48:0>:bool)
        
        P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
        (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
        |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,
                                           <<bcopy_aux_1152@37:1>@40:0>:int)
        
         (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                                 <bcopy_aux_1152@37:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<bcopy_aux_1152@37:3>:int) = (<bcopy_aux_1152@37:3> = 0)
        P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int) =
        ((<<bcopy_aux_1152@37:1>@40:0> = 0) && (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>))
        P[<fail_1485@48:0>](<fail_1485@48:0>:bool) = false
      upper bounds:
        P[<fail_1485@48:0>](var89:bool) = true
      begin GenHcSolver.classify_pids(10031)[4]
        output:
          [<fail_1485@48:0>]
      end GenHcSolver.classify_pids(10031)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(10034)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(10035)[5]
          begin InterpProver.interpolate_fresh(10036)[6]
            begin InterpProver.interpolate_log(10037)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(10038)[8]
                begin InterpProver.interpolate_simplify(10039)[9]
                  begin InterpProver.interpolate_quick(10052)[10]
                    
                  end InterpProver.interpolate_quick(10052)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(10056)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(10056)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(10039)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(10038)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(10037)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(10036)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(10035)[5] (0.000000 sec.)
        output:
          P[<fail_1485@48:0>](<fail_1485@48:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(10034)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1152@37:1>@40:0>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
        ((<k_make_array_u_1188@45:0> >= <k_make_array_u_1188@45:1>) && (0 <= <k_make_array_u_1188@45:0>)) |- bot
        
        P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
        (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
        |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,
                                           <<bcopy_aux_1152@37:1>@40:0>:int)
        
         (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                                 <bcopy_aux_1152@37:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<bcopy_aux_1152@37:3>:int) = (<bcopy_aux_1152@37:3> = 0)
        P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int) =
        ((<<bcopy_aux_1152@37:1>@40:0> = 0) && (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>))
      upper bounds:
        P[<<bcopy_aux_1152@37:1>@40:0>](var90:int,var91:int) = ((var91 < var90) || (0 > var91))
      begin GenHcSolver.classify_pids(11256)[4]
        output:
          [<<bcopy_aux_1152@37:1>@40:0>]
      end GenHcSolver.classify_pids(11256)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1152@37:1>@40:0> = 0) && (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>))
      nub:(not ((<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>) || (0 > <<bcopy_aux_1152@37:1>@40:0>)))
      begin ApronInterface.convex_hull_interpolate(11259)[4]
        lb:((<<bcopy_aux_1152@37:1>@40:0> = 0) && (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>))
        nub:(not ((<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>) || (0 > <<bcopy_aux_1152@37:1>@40:0>)))
        lb':((<<bcopy_aux_1152@37:1>@40:0> = 0) && (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>))
        nub':(not ((<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>) || (0 > <<bcopy_aux_1152@37:1>@40:0>)))
        begin InterpProver.interpolate(11260)[5]
          begin InterpProver.interpolate_fresh(11261)[6]
            begin InterpProver.interpolate_log(11262)[7]
              input1: ((<<bcopy_aux_1152@37:1>@40:0> = 0) && (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>))
              input2: (not
                         ((<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>) || (0 > <<bcopy_aux_1152@37:1>@40:0>)))
              begin InterpProver.interpolate_check(11263)[8]
                begin InterpProver.interpolate_simplify(11264)[9]
                  begin InterpProver.interpolate_quick(11319)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(11328)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(11329)[12]
                        begin CsisatInterface.interpolate_csisat_log(11330)[13]
                          input1: (0 = v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0 & (1 + v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0) <= v_sep_bcopy_aux_1152_sep_37_sep_0)
                          input2: (0 <= v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0 & v_sep_bcopy_aux_1152_sep_37_sep_0 <= v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(11331)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(11331)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1152_sep_37_sep_0 + 2*v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(11330)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1152_sep_37_sep_0 + 2*v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1152_sep_37_sep_0 + 2*v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(11329)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(11328)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(11319)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(11264)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(11263)[8] (0.001000 sec.)
              output: ((1 + <<bcopy_aux_1152@37:1>@40:0>) <= <bcopy_aux_1152@37:0>)
            end InterpProver.interpolate_log(11262)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(11261)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(11260)[5] (0.002000 sec.)
        output:
          P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int) =
          ((1 + <<bcopy_aux_1152@37:1>@40:0>) <= <bcopy_aux_1152@37:0>)
      end ApronInterface.convex_hull_interpolate(11259)[4] (0.002000 sec.)
      Horn clauses:
         (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                                 <bcopy_aux_1152@37:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<bcopy_aux_1152@37:3>:int) = (<bcopy_aux_1152@37:3> = 0)
      upper bounds:
        P[<bcopy_aux_1152@37:3>](var92:int,var93:int) = true
      begin GenHcSolver.classify_pids(11677)[4]
        output:
          [<bcopy_aux_1152@37:3>]
      end GenHcSolver.classify_pids(11677)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1152@37:3> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(11680)[4]
        lb:(<bcopy_aux_1152@37:3> = 0)
        nub:false
        lb':(<bcopy_aux_1152@37:3> = 0)
        nub':false
        begin InterpProver.interpolate(11681)[5]
          begin InterpProver.interpolate_fresh(11682)[6]
            begin InterpProver.interpolate_log(11683)[7]
              input1: (<bcopy_aux_1152@37:3> = 0)
              input2: false
              begin InterpProver.interpolate_check(11684)[8]
                begin InterpProver.interpolate_simplify(11685)[9]
                  begin InterpProver.interpolate_quick(11704)[10]
                    
                  end InterpProver.interpolate_quick(11704)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(11685)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(11684)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(11683)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(11682)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(11681)[5] (0.000000 sec.)
        output:
          P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<bcopy_aux_1152@37:3>:int) = true
      end ApronInterface.convex_hull_interpolate(11680)[4] (0.000000 sec.)
      begin HcSolver.check_validity(11768)[4]
        input:
          P[<fail_1485@48:0>](<fail_1485@48:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@37:1>@40:0>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
          ((0 <= <k_make_array_u_1188@45:0>) &&
           ((<k_make_array_u_1188@45:0> >= <k_make_array_u_1188@45:1>) && <fail_1485@48:0>))
          |- P[<fail_1485@48:0>](<fail_1485@48:0>:bool)
          
          P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
          (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
          |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,
                                             <<bcopy_aux_1152@37:1>@40:0>:int)
          
           (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                                   <bcopy_aux_1152@37:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(11768)[4] (0.000999 sec.)
      solution:
        P[<fail_1485@48:0>](<fail_1485@48:0>:bool) = false
        P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int) =
        ((1 + <<bcopy_aux_1152@37:1>@40:0>) <= <bcopy_aux_1152@37:0>)
        P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<bcopy_aux_1152@37:3>:int) = true
    end GenHcSolver.solve(9198)[3] (0.012998 sec.)
    begin GenHcSolver.solve(11969)[3]
      Horn clauses:
        P[<fail_1485@48:0>](<fail_1485@48:0>:bool)|- bot
        
        P[<<bcopy_aux_1152@37:1>@40:0>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
        ((0 <= <k_make_array_u_1188@45:0>) &&
         ((<k_make_array_u_1188@45:0> >= <k_make_array_u_1188@45:1>) && <fail_1485@48:0>))
        |- P[<fail_1485@48:0>](<fail_1485@48:0>:bool)
        
        P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
        (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
        |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,
                                           <<bcopy_aux_1152@37:1>@40:0>:int)
        
         (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                                 <bcopy_aux_1152@37:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<bcopy_aux_1152@37:3>:int) = (<bcopy_aux_1152@37:3> = 0)
        P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int) =
        ((<<bcopy_aux_1152@37:1>@40:0> = 0) && (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>))
        P[<fail_1485@48:0>](<fail_1485@48:0>:bool) = false
      upper bounds:
        P[<fail_1485@48:0>](var95:bool) = true
      begin GenHcSolver.classify_pids(12802)[4]
        output:
          [<fail_1485@48:0>]
      end GenHcSolver.classify_pids(12802)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(12805)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(12808)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(12808)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(12813)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(12813)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(12816)[5]
          begin InterpProver.interpolate_fresh(12817)[6]
            begin InterpProver.interpolate_log(12818)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(12819)[8]
                begin InterpProver.interpolate_simplify(12820)[9]
                  begin InterpProver.interpolate_quick(12835)[10]
                    
                  end InterpProver.interpolate_quick(12835)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(12839)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(12839)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(12820)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(12819)[8] (0.002000 sec.)
              output: false
            end InterpProver.interpolate_log(12818)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(12817)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(12816)[5] (0.002000 sec.)
        output:
          P[<fail_1485@48:0>](<fail_1485@48:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(12805)[4] (0.002000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1152@37:1>@40:0>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
        ((<k_make_array_u_1188@45:0> >= <k_make_array_u_1188@45:1>) && (0 <= <k_make_array_u_1188@45:0>)) |- bot
        
        P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
        (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
        |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,
                                           <<bcopy_aux_1152@37:1>@40:0>:int)
        
         (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                                 <bcopy_aux_1152@37:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<bcopy_aux_1152@37:3>:int) = (<bcopy_aux_1152@37:3> = 0)
        P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int) =
        ((<<bcopy_aux_1152@37:1>@40:0> = 0) && (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>))
      upper bounds:
        P[<<bcopy_aux_1152@37:1>@40:0>](var96:int,var97:int) = ((var97 < var96) || (0 > var97))
      begin GenHcSolver.classify_pids(14046)[4]
        output:
          [<<bcopy_aux_1152@37:1>@40:0>]
      end GenHcSolver.classify_pids(14046)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1152@37:1>@40:0> = 0) && (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>))
      nub:(not ((<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>) || (0 > <<bcopy_aux_1152@37:1>@40:0>)))
      begin ApronInterface.convex_hull_interpolate(14049)[4]
        lb:((<<bcopy_aux_1152@37:1>@40:0> = 0) && (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>))
        nub:(not ((<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>) || (0 > <<bcopy_aux_1152@37:1>@40:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(14061)[5]
          ts: ((<<bcopy_aux_1152@37:1>@40:0> = 0) && (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(14061)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(14081)[5]
          ts: ((<<bcopy_aux_1152@37:1>@40:0> >= <bcopy_aux_1152@37:0>) && (0 <= <<bcopy_aux_1152@37:1>@40:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(14081)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1152@37:1>@40:0> = 0) && ((-1 + <bcopy_aux_1152@37:0>) >= 0))
        nub':(((<<bcopy_aux_1152@37:1>@40:0> + (-1 * <bcopy_aux_1152@37:0>)) >= 0) &&
              (<<bcopy_aux_1152@37:1>@40:0> >= 0))
        begin InterpProver.interpolate(14087)[5]
          begin InterpProver.interpolate_fresh(14088)[6]
            begin InterpProver.interpolate_log(14089)[7]
              input1: ((<<bcopy_aux_1152@37:1>@40:0> = 0) && ((-1 + <bcopy_aux_1152@37:0>) >= 0))
              input2: (((<<bcopy_aux_1152@37:1>@40:0> + (-1 * <bcopy_aux_1152@37:0>)) >= 0) &&
                       (<<bcopy_aux_1152@37:1>@40:0> >= 0))
              begin InterpProver.interpolate_check(14090)[8]
                begin InterpProver.interpolate_simplify(14091)[9]
                  begin InterpProver.interpolate_quick(14148)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(14157)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(14158)[12]
                        begin CsisatInterface.interpolate_csisat_log(14159)[13]
                          input1: (0 = v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0 & 1 <= v_sep_bcopy_aux_1152_sep_37_sep_0)
                          input2: (0 <= v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0 & v_sep_bcopy_aux_1152_sep_37_sep_0 <= v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(14160)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(14160)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1152_sep_37_sep_0 + 2*v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(14159)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1152_sep_37_sep_0 + 2*v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1152_sep_37_sep_0 + 2*v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(14158)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(14157)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(14148)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(14091)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(14090)[8] (0.001000 sec.)
              output: ((1 + <<bcopy_aux_1152@37:1>@40:0>) <= <bcopy_aux_1152@37:0>)
            end InterpProver.interpolate_log(14089)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(14088)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(14087)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int) =
          ((1 + <<bcopy_aux_1152@37:1>@40:0>) <= <bcopy_aux_1152@37:0>)
      end ApronInterface.convex_hull_interpolate(14049)[4] (0.002000 sec.)
      Horn clauses:
         (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                                 <bcopy_aux_1152@37:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<bcopy_aux_1152@37:3>:int) = (<bcopy_aux_1152@37:3> = 0)
      upper bounds:
        P[<bcopy_aux_1152@37:3>](var98:int,var99:int) = true
      begin GenHcSolver.classify_pids(14506)[4]
        output:
          [<bcopy_aux_1152@37:3>]
      end GenHcSolver.classify_pids(14506)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1152@37:3> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(14509)[4]
        lb:(<bcopy_aux_1152@37:3> = 0)
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(14513)[5]
          ts: (<bcopy_aux_1152@37:3> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(14513)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(14519)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(14519)[5] (0.000000 sec.)
        lb':(<bcopy_aux_1152@37:3> = 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(14522)[5]
          begin InterpProver.interpolate_fresh(14523)[6]
            begin InterpProver.interpolate_log(14524)[7]
              input1: (<bcopy_aux_1152@37:3> = 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(14525)[8]
                begin InterpProver.interpolate_simplify(14526)[9]
                  begin InterpProver.interpolate_quick(14546)[10]
                    
                  end InterpProver.interpolate_quick(14546)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(14526)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(14525)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(14524)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(14523)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(14522)[5] (0.001000 sec.)
        output:
          P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<bcopy_aux_1152@37:3>:int) = true
      end ApronInterface.convex_hull_interpolate(14509)[4] (0.001000 sec.)
      begin HcSolver.check_validity(14612)[4]
        input:
          P[<fail_1485@48:0>](<fail_1485@48:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@37:1>@40:0>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
          ((0 <= <k_make_array_u_1188@45:0>) &&
           ((<k_make_array_u_1188@45:0> >= <k_make_array_u_1188@45:1>) && <fail_1485@48:0>))
          |- P[<fail_1485@48:0>](<fail_1485@48:0>:bool)
          
          P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
          (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
          |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,
                                             <<bcopy_aux_1152@37:1>@40:0>:int)
          
           (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                                   <bcopy_aux_1152@37:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(14612)[4] (0.000999 sec.)
      solution:
        P[<fail_1485@48:0>](<fail_1485@48:0>:bool) = false
        P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int) =
        ((1 + <<bcopy_aux_1152@37:1>@40:0>) <= <bcopy_aux_1152@37:0>)
        P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<bcopy_aux_1152@37:3>:int) = true
    end GenHcSolver.solve(11969)[3] (0.019997 sec.)
    begin YhornInterface.solve(14813)[3]
      begin HcSolver.solve_ub(14814)[4]
        encoded:
          P[<fail_1485@48:0>](<fail_1485@48:0>:int)|- bot
          
          P[<<bcopy_aux_1152@37:1>@40:0>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
          ((0 <= <k_make_array_u_1188@45:0>) &&
           ((<k_make_array_u_1188@45:0> >= <k_make_array_u_1188@45:1>) && (<fail_1485@48:0> = 1)))
          |- P[<fail_1485@48:0>](<fail_1485@48:0>:int)
          
          P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
          (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
          |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,
                                             <<bcopy_aux_1152@37:1>@40:0>:int)
          
           (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                                   <bcopy_aux_1152@37:3>:int)
        input to Yhorn:
          P[<fail_1485@48:0>](<fail_1485@48:0>:int)|- bot
          
          P[<<bcopy_aux_1152@37:1>@40:0>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
          ((<k_make_array_u_1188@45:0> >= <k_make_array_u_1188@45:1>) &&
           ((0 <= <k_make_array_u_1188@45:0>) && (<fail_1485@48:0> = 1))) |- P[<fail_1485@48:0>](
          <fail_1485@48:0>:int)
          
          P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
          (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
          |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,
                                             <<bcopy_aux_1152@37:1>@40:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1485_sep_48_sep_0($61)) -> 1=0.
(($61-1=0) & (-$62<=0) & ($62-$63>=0)) & (v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0($63,$62)) -> v_sep_fail_1485_sep_48_sep_0($61).
($64-$65<0) & (v_sep_bcopy_aux_1152_sep_37_sep_3($65,$64)) -> v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0($65,$64).
$66=0 -> v_sep_bcopy_aux_1152_sep_37_sep_3($65,$66).


v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0: X
v_sep_bcopy_aux_1152_sep_37_sep_3: X
v_sep_fail_1485_sep_48_sep_0: X
....
v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0: X
v_sep_bcopy_aux_1152_sep_37_sep_3: X
v_sep_fail_1485_sep_48_sep_0: X
...
v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0: X
v_sep_bcopy_aux_1152_sep_37_sep_3: X
v_sep_fail_1485_sep_48_sep_0: X
....
v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0: X
v_sep_bcopy_aux_1152_sep_37_sep_3: X
v_sep_fail_1485_sep_48_sep_0: X
....(0=0) & (v_sep_fail_1485_sep_48_sep_0($61)) -> 1=0.
(($61-1=0) & (-$62<=0) & ($62-$63>=0)) & (v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0($63,$62)) -> v_sep_fail_1485_sep_48_sep_0($61).
($64-$65<0) & (v_sep_bcopy_aux_1152_sep_37_sep_3($65,$64)) -> v_sep_bcopy_aux_1152_sep_37_sep_1_sep_40_sep_0($65,$64).
$66=0 -> v_sep_bcopy_aux_1152_sep_37_sep_3($65,$66).

           (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                                   <bcopy_aux_1152@37:3>:int)
        solution:
          P[<<bcopy_aux_1152@37:1>@40:0>]($70:int,$72:int) = ((1 + $72) <= $70)
          P[<bcopy_aux_1152@37:3>]($75:int,$77:int) = true
          P[<fail_1485@48:0>]($67:bool) = false
        
      end HcSolver.solve_ub(14814)[4] (0.010999 sec.)
      begin HcSolver.check_validity(14946)[4]
        input:
          P[<fail_1485@48:0>](<fail_1485@48:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@37:1>@40:0>](<k_make_array_u_1188@45:1>:int,<k_make_array_u_1188@45:0>:int),
          ((0 <= <k_make_array_u_1188@45:0>) &&
           ((<k_make_array_u_1188@45:0> >= <k_make_array_u_1188@45:1>) && <fail_1485@48:0>))
          |- P[<fail_1485@48:0>](<fail_1485@48:0>:bool)
          
          P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,<<bcopy_aux_1152@37:1>@40:0>:int),
          (<<bcopy_aux_1152@37:1>@40:0> < <bcopy_aux_1152@37:0>)
          |- P[<<bcopy_aux_1152@37:1>@40:0>](<bcopy_aux_1152@37:0>:int,
                                             <<bcopy_aux_1152@37:1>@40:0>:int)
          
           (<bcopy_aux_1152@37:3> = 0) |- P[<bcopy_aux_1152@37:3>](<bcopy_aux_1152@37:0>:int,
                                                                   <bcopy_aux_1152@37:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(14946)[4] (0.000000 sec.)
      solution:
        P[<<bcopy_aux_1152@37:1>@40:0>]($70:int,$72:int) = ((1 + $72) <= $70)
        P[<bcopy_aux_1152@37:3>]($75:int,$77:int) = true
        P[<fail_1485@48:0>]($67:bool) = false
    end YhornInterface.solve(14813)[3] (0.010999 sec.)
    
  end RefTypeInfer.infer_etrs(7766)[2] (0.116982 sec.)
  refinement types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1485: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1484: var119:int -> var118:int -> var117:unit -> X
    f_bcopy_aux_1480: var133:int ->
                      var132:int ->
                      (var131:int -> (var130:int -> X) -> X) ->
                      (var127:unit -> X) -> (var125:int -> (var124:int -> X) -> X) -> var121:int -> X
    f_bcopy_aux_1481: var148:int ->
                      var147:int ->
                      var146:int ->
                      (var145:int -> (var144:int -> X) -> X) ->
                      (var141:unit -> X) -> (var139:int -> (var138:int -> X) -> X) -> var135:unit -> X
    f_update_1479: var154:int -> var153:int -> (var152:unit -> X) -> var150:int -> X
    k_make_array_u_1199: var160:int -> var159:int -> (var158:int -> X) -> var156:unit -> X
    update_1153: (var169:int -> (var168:int -> X) -> X) -> var165:int -> var164:int -> (var163:unit -> X) -> X
  abstraction types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1485: v1:bool -> (v2:unit -> X) -> X
    f_1484: var119:int -> var118:int -> var117:unit -> X
    f_bcopy_aux_1480: var133:int ->
                      var132:int ->
                      (var131:int -> (var130:int -> X) -> X) ->
                      (var127:unit -> X) -> (var125:int -> (var124:int -> X) -> X) -> var121:int -> X
    f_bcopy_aux_1481: var148:int ->
                      var147:int ->
                      var146:int ->
                      (var145:int -> (var144:int -> X) -> X) ->
                      (var141:unit -> X) -> (var139:int -> (var138:int -> X) -> X) -> var135:unit -> X
    f_update_1479: var154:int -> var153:int -> (var152:unit -> X) -> var150:int -> X
    k_make_array_u_1199: var160:int -> var159:int -> (var158:int -> X) -> var156:unit -> X
    update_1153: (var169:int -> (var168:int -> X) -> X) -> var165:int -> var164:int -> (var163:unit -> X) -> X
  
end AbsTypeInfer.refine(7765)[1] (0.127980 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1478
  main_1478 -> (rand_int f_1482)
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (i_1041 >= m_1038) -> (k_bcopy_aux_1292 ())
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (
      not (i_1041 >= m_1038)) -> (src_1039 i_1041 (f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039))
  f_1482 x_1436 -> (rand_int (f_1483 x_1436))
  f_1483 x_1436 x_1449 -> (main_1042 x_1436 x_1449 (f_1484 x_1436 x_1449))
  f_1484 x_1436 x_1449 x_1433 -> end
  f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 ->
      (update_1153 des_1040 i_1041 x_1323 (f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039))
  f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 ->
      (bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) k_bcopy_aux_1292)
  f_update_1479 i_1035 x_1036 k_update_1232 x_1235 -> (k_update_1232 ())
  fail_1485 b k -> {fail} => (k ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when b_1200 ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when (not b_1200) ->
      (fail_1485 true (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182))
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 -> (k_make_array_1182 0)
  main_1042 n_1043 m_1044 k_main_1369 when (n_1043 <= m_1044) ->
      (bcopy_aux_1152 n_1043 (make_array_1030 n_1043) (make_array_1030 m_1044) 0 k_main_1369)
  main_1042 n_1043 m_1044 k_main_1369 when (not (n_1043 <= m_1044)) -> (k_main_1369 ())
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (0 <= i_1032) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (not (0 <= i_1032)) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 false)
  update_1153 des_1034 i_1035 x_1036 k_update_1232 -> (des_1034 i_1035 (f_update_1479 i_1035 x_1036 k_update_1232))
Types:
  main_1478 : X
  bcopy_aux_1152 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                    (int -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1485 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1478 ... --> 
  f_1482 ... --> 
  f_1483 ... --> 
  main_1042 [1/2] ... --> 
  bcopy_aux_1152 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1188 [1/2] ... --> 
  k_make_array_u_1199 ... --> 
  f_bcopy_aux_1480 ... --> 
  update_1153 ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1188 [2/2] ... --> 
  fail_1485 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(15801)[1]
  program:
    main_1478  | true = ((Random.int 0) f_1482)
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    i_1041 >= m_1038) = (k_bcopy_aux_1292 ())
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    not (i_1041 >= m_1038)) = (src_1039 i_1041
                                        (f_bcopy_aux_1480 i_1041
                                                          m_1038
                                                          des_1040
                                                          k_bcopy_aux_1292
                                                          src_1039))
    f_1482 x_1436 | true = ((Random.int 0) (f_1483 x_1436))
    f_1483 x_1436 x_1449 | true = (main_1042 x_1436
                                             x_1449
                                             (f_1484 x_1436
                                                     x_1449))
    f_1484 x_1436 x_1449 x_1433 | true = end
    f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 | true = (
    update_1153 des_1040
                i_1041
                x_1323
                (f_bcopy_aux_1481 i_1041
                                  m_1038
                                  x_1323
                                  des_1040
                                  k_bcopy_aux_1292
                                  src_1039))
    f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 | true = (
    bcopy_aux_1152 m_1038
                   src_1039
                   des_1040
                   (i_1041 + 1)
                   k_bcopy_aux_1292)
    f_update_1479 i_1035 x_1036 k_update_1232 x_1235 | true = (k_update_1232 ())
    fail_1485 b k | true = (fail ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | b_1200 = (
    k_make_array_u_1199 i_1032
                        n_1031
                        k_make_array_1182
                        ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | (not b_1200) = (
    fail_1485 true
              (k_make_array_u_1199 i_1032
                                   n_1031
                                   k_make_array_1182))
    k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 | true = (
    k_make_array_1182 0)
    main_1042 n_1043 m_1044 k_main_1369 | (n_1043 <= m_1044) = (bcopy_aux_1152
                                                                  n_1043
                                                                  (make_array_1030 n_1043)
                                                                  (make_array_1030 m_1044)
                                                                  0
                                                                  k_main_1369)
    main_1042 n_1043 m_1044 k_main_1369 | (not (n_1043 <= m_1044)) = (
    k_main_1369 ())
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (0 <= i_1032) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (not (0 <= i_1032)) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        false)
    update_1153 des_1034 i_1035 x_1036 k_update_1232 | true = (des_1034
                                                                 i_1035
                                                                 (f_update_1479 i_1035
                                                                    x_1036
                                                                    k_update_1232))
    main_1478:X
    bcopy_aux_1152:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1482:int -> X
    f_1483:int -> int -> X
    f_1484:int -> int -> unit -> X
    f_bcopy_aux_1480:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1481:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1479:int -> int -> (unit -> X) -> int -> X
    fail_1485:bool -> (unit -> X) -> X
    k_make_array_u_1188:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1199:int -> int -> (int -> X) -> unit -> X
    main_1042:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1153:(int -> (int -> X) -> X) -> int -> int -> (unit -> X) -> X
  inlined functions: f_1482,f_1483,f_1484,f_bcopy_aux_1480,f_bcopy_aux_1481,f_update_1479,k_make_array_u_1188,k_make_array_u_1199,main_1042,make_array_1030,update_1153
  counterexample: 0:0:0:0:1:0:0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1482@54:0> = var170)
     [true.nop((<f_1483@57:0> = <f_1482@54:0>) && (<f_1483@57:1> = var171))
      [true.((<main_1042@59:0> = <f_1483@57:0>) && (<main_1042@59:1> = <f_1483@57:1>))
       [(<main_1042@59:0> <= <main_1042@59:1>).
        ((<bcopy_aux_1152@62:0> = <main_1042@59:0>) && (<bcopy_aux_1152@62:3> = 0))
        [(not (<bcopy_aux_1152@62:3> >= <bcopy_aux_1152@62:0>)).(<<bcopy_aux_1152@62:1>@65:0> = <bcopy_aux_1152@62:3>)
         [true.((<make_array_1030@67:0> = <main_1042@59:0>) && (<make_array_1030@67:1> = <<bcopy_aux_1152@62:1>@65:0>))
          [(0 <= <make_array_1030@67:1>).
           ((<k_make_array_u_1188@70:0> = <make_array_1030@67:1>) &&
            ((<k_make_array_u_1188@70:1> = <make_array_1030@67:0>) &&
             (<k_make_array_u_1188@70:3> = (<make_array_1030@67:1> < <make_array_1030@67:0>))))
           [<k_make_array_u_1188@70:3>.
            ((<k_make_array_u_1199@73:0> = <k_make_array_u_1188@70:0>) &&
             ((<k_make_array_u_1199@73:1> = <k_make_array_u_1188@70:1>) && (<k_make_array_u_1199@73:3> = ())))
            [true.(<<k_make_array_u_1199@73:2>@75:0> = 0)
             [true.(<<k_make_array_u_1188@70:2>@77:0> = <<k_make_array_u_1199@73:2>@75:0>)
              [true.(<<make_array_1030@67:2>@79:0> = <<k_make_array_u_1188@70:2>@77:0>)
               [true.(<<<bcopy_aux_1152@62:1>@65:1>@81:0> = <<make_array_1030@67:2>@79:0>)
                [true.
                 ((<f_bcopy_aux_1480@83:0> = <bcopy_aux_1152@62:3>) &&
                  ((<f_bcopy_aux_1480@83:1> = <bcopy_aux_1152@62:0>) &&
                   (<f_bcopy_aux_1480@83:5> = <<<bcopy_aux_1152@62:1>@65:1>@81:0>)))
                 [true.
                  ((<update_1153@85:1> = <f_bcopy_aux_1480@83:0>) && (<update_1153@85:2> = <f_bcopy_aux_1480@83:5>))
                  [true.(<<update_1153@85:0>@87:0> = <update_1153@85:1>)
                   [true.(<<f_bcopy_aux_1480@83:2>@89:0> = <<update_1153@85:0>@87:0>)
                    [true.(<<bcopy_aux_1152@62:2>@91:0> = <<f_bcopy_aux_1480@83:2>@89:0>)
                     [true.
                      ((<make_array_1030@93:0> = <main_1042@59:1>) &&
                       (<make_array_1030@93:1> = <<bcopy_aux_1152@62:2>@91:0>))
                      [(not (0 <= <make_array_1030@93:1>)).
                       ((<k_make_array_u_1188@96:0> = <make_array_1030@93:1>) &&
                        ((<k_make_array_u_1188@96:1> = <make_array_1030@93:0>) && (<k_make_array_u_1188@96:3> = false)))
                       [(not <k_make_array_u_1188@96:3>).(<fail_1485@99:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(15802)[2]
    horn clauses:
      P[<fail_1485@99:0>](<fail_1485@99:0>:bool)|- bot
      
      P[<k_make_array_u_1188@96:3>](<k_make_array_u_1188@96:0>:int,<k_make_array_u_1188@96:1>:int,false:bool),
      <fail_1485@99:0> |- P[<fail_1485@99:0>](<fail_1485@99:0>:bool)
      
      P[<make_array_1030@93:1>](<k_make_array_u_1188@96:1>:int,<k_make_array_u_1188@96:0>:int),
      ((0 > <k_make_array_u_1188@96:0>) && (not <k_make_array_u_1188@96:3>))
      |- P[<k_make_array_u_1188@96:3>](<k_make_array_u_1188@96:0>:int,
                                       <k_make_array_u_1188@96:1>:int,
                                       <k_make_array_u_1188@96:3>:bool)
      
      P[<main_1042@59:1>](<bcopy_aux_1152@62:0>:int,<make_array_1030@93:0>:int),
      P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,<make_array_1030@93:1>:int),
      (<bcopy_aux_1152@62:0> <= <make_array_1030@93:0>)
      |- P[<make_array_1030@93:1>](<make_array_1030@93:0>:int,<make_array_1030@93:1>:int)
      
      P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
      P[<<f_bcopy_aux_1480@83:2>@89:0>](<<bcopy_aux_1152@62:1>@65:0>:int,<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:2>@91:0>:int),
      (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
      |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:2>@91:0>:int)
      
      P[<f_bcopy_aux_1480@83:5>](<f_bcopy_aux_1480@83:0>:int,<f_bcopy_aux_1480@83:1>:int,<update_1153@85:2>:int),
      P[<<update_1153@85:0>@87:0>](<<f_bcopy_aux_1480@83:2>@89:0>:int)|- P[<<f_bcopy_aux_1480@83:2>@89:0>](
      <f_bcopy_aux_1480@83:0>:int,<f_bcopy_aux_1480@83:1>:int,<<f_bcopy_aux_1480@83:2>@89:0>:int)
      
      P[<update_1153@85:2>](<<update_1153@85:0>@87:0>:int,<update_1153@85:2>:int)|- P[<<update_1153@85:0>@87:0>](
      <<update_1153@85:0>@87:0>:int)
      
      P[<f_bcopy_aux_1480@83:5>](<update_1153@85:1>:int,<f_bcopy_aux_1480@83:1>:int,<update_1153@85:2>:int)|- P[<update_1153@85:2>](
      <update_1153@85:1>:int,<update_1153@85:2>:int)
      
      P[<bcopy_aux_1152@62:3>](<f_bcopy_aux_1480@83:1>:int,<f_bcopy_aux_1480@83:0>:int),
      P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<f_bcopy_aux_1480@83:1>:int,<f_bcopy_aux_1480@83:0>:int,<f_bcopy_aux_1480@83:5>:int),
      (<f_bcopy_aux_1480@83:0> < <f_bcopy_aux_1480@83:1>)
      |- P[<f_bcopy_aux_1480@83:5>](<f_bcopy_aux_1480@83:0>:int,<f_bcopy_aux_1480@83:1>:int,
                                    <f_bcopy_aux_1480@83:5>:int)
      
      P[<main_1042@59:1>](<bcopy_aux_1152@62:0>:int,<main_1042@59:1>:int),
      P[<<make_array_1030@67:2>@79:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,<<<bcopy_aux_1152@62:1>@65:1>@81:0>:int),
      (<bcopy_aux_1152@62:0> <= <main_1042@59:1>)
      |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                <<bcopy_aux_1152@62:1>@65:0>:int,
                                                <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
      
      P[<make_array_1030@67:1>](<make_array_1030@67:0>:int,<make_array_1030@67:1>:int),
      P[<<k_make_array_u_1188@70:2>@77:0>](<make_array_1030@67:1>:int,<make_array_1030@67:0>:int,<<make_array_1030@67:2>@79:0>:int),
      (0 <= <make_array_1030@67:1>)
      |- P[<<make_array_1030@67:2>@79:0>](<make_array_1030@67:0>:int,
                                          <make_array_1030@67:1>:int,
                                          <<make_array_1030@67:2>@79:0>:int)
      
      P[<k_make_array_u_1188@70:3>](<k_make_array_u_1188@70:0>:int,<k_make_array_u_1188@70:1>:int,true:bool),
      P[<<k_make_array_u_1199@73:2>@75:0>](<k_make_array_u_1188@70:0>:int,<k_make_array_u_1188@70:1>:int,<<k_make_array_u_1188@70:2>@77:0>:int)|- P[<<k_make_array_u_1188@70:2>@77:0>](
      <k_make_array_u_1188@70:0>:int,<k_make_array_u_1188@70:1>:int,<<k_make_array_u_1188@70:2>@77:0>:int)
      
      P[<k_make_array_u_1199@73:3>](<k_make_array_u_1199@73:0>:int,<k_make_array_u_1199@73:1>:int,<k_make_array_u_1199@73:3>:unit),
      (<<k_make_array_u_1199@73:2>@75:0> = 0)
      |- P[<<k_make_array_u_1199@73:2>@75:0>](<k_make_array_u_1199@73:0>:int,
                                              <k_make_array_u_1199@73:1>:int,
                                              <<k_make_array_u_1199@73:2>@75:0>:int)
      
      P[<k_make_array_u_1188@70:3>](<k_make_array_u_1199@73:0>:int,<k_make_array_u_1199@73:1>:int,true:bool)|- P[<k_make_array_u_1199@73:3>](
      <k_make_array_u_1199@73:0>:int,<k_make_array_u_1199@73:1>:int,<k_make_array_u_1199@73:3>:unit)
      
      P[<make_array_1030@67:1>](<k_make_array_u_1188@70:1>:int,<k_make_array_u_1188@70:0>:int),
      ((0 <= <k_make_array_u_1188@70:0>) &&
       (<k_make_array_u_1188@70:3> = (<k_make_array_u_1188@70:0> < <k_make_array_u_1188@70:1>)))
      |- P[<k_make_array_u_1188@70:3>](<k_make_array_u_1188@70:0>:int,
                                       <k_make_array_u_1188@70:1>:int,
                                       <k_make_array_u_1188@70:3>:bool)
      
      P[<main_1042@59:1>](<make_array_1030@67:0>:int,<main_1042@59:1>:int),
      P[<<bcopy_aux_1152@62:1>@65:0>](<make_array_1030@67:0>:int,<make_array_1030@67:1>:int),
      (<make_array_1030@67:0> <= <main_1042@59:1>)
      |- P[<make_array_1030@67:1>](<make_array_1030@67:0>:int,<make_array_1030@67:1>:int)
      
      P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
      (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
      |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int)
      
      P[<main_1042@59:1>](<bcopy_aux_1152@62:0>:int,<main_1042@59:1>:int),
      ((<bcopy_aux_1152@62:3> = 0) && (<bcopy_aux_1152@62:0> <= <main_1042@59:1>))
      |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int)
      
      P[<f_1483@57:1>](<main_1042@59:0>:int,<main_1042@59:1>:int)|- P[<main_1042@59:1>](
      <main_1042@59:0>:int,<main_1042@59:1>:int)
      
      P[<f_1482@54:0>](<f_1483@57:0>:int)|- P[<f_1483@57:1>](<f_1483@57:0>:int,
                                                             <f_1483@57:1>:int)
      
      |- P[<f_1482@54:0>](<f_1482@54:0>:int)
    call trees:
      <main_1478@51>
        <f_1482@54>
          <f_1483@57>
            <main_1042@59>
              <bcopy_aux_1152@62>
              </<bcopy_aux_1152@62:1>@65>
              <make_array_1030@67>
                <k_make_array_u_1188@70>
                  <k_make_array_u_1199@73>
                  </<k_make_array_u_1199@73:2>@75>
                </<k_make_array_u_1188@70:2>@77>
              </<make_array_1030@67:2>@79>
              <<<bcopy_aux_1152@62:1>@65:1>@81>
                <f_bcopy_aux_1480@83>
                  <update_1153@85>
                  </<update_1153@85:0>@87>
                </<f_bcopy_aux_1480@83:2>@89>
              </<bcopy_aux_1152@62:2>@91>
              <make_array_1030@93>
                <k_make_array_u_1188@96>
                  <fail_1485@99>
    inlined horn clauses:
      P[<fail_1485@99:0>](<fail_1485@99:0>:bool)|- bot
      
      P[<<bcopy_aux_1152@62:2>@91:0>](var176:int,<k_make_array_u_1188@96:0>:int),
      ((0 > <k_make_array_u_1188@96:0>) && <fail_1485@99:0>) |- P[<fail_1485@99:0>](
      <fail_1485@99:0>:bool)
      
      P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,var177:int),
      P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
      P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
      P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int,var178:int),
      ((<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>) && (<<bcopy_aux_1152@62:2>@91:0> < var179))
      |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:2>@91:0>:int)
      
      P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
      ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
       ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
      |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                <<bcopy_aux_1152@62:1>@65:0>:int,
                                                <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
      
      P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
      (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
      |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int)
      
       (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                               <bcopy_aux_1152@62:3>:int)
    begin ParamSubstInfer.infer(19069)[3]
      
    end ParamSubstInfer.infer(19069)[3] (0.126980 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(19071)[3]
      
    end RefTypeInfer.elim_coeffs(19071)[3] (0.001000 sec.)
    begin GenHcSolver.solve(19453)[3]
      Horn clauses:
        P[<fail_1485@99:0>](<fail_1485@99:0>:bool)|- bot
        
        P[<<bcopy_aux_1152@62:2>@91:0>](var176:int,<k_make_array_u_1188@96:0>:int),
        ((0 > <k_make_array_u_1188@96:0>) && <fail_1485@99:0>) |- P[<fail_1485@99:0>](
        <fail_1485@99:0>:bool)
        
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,var177:int),
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int,var178:int),
        ((<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>) && (<<bcopy_aux_1152@62:2>@91:0> < var179))
        |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,
                                           <<bcopy_aux_1152@62:2>@91:0>:int)
        
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
        |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                  <<bcopy_aux_1152@62:1>@65:0>:int,
                                                  <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
        
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
        |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                           <<bcopy_aux_1152@62:1>@65:0>:int)
        
         (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                 <bcopy_aux_1152@62:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int) = (<bcopy_aux_1152@62:3> = 0)
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int) =
        ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,<<<bcopy_aux_1152@62:1>@65:1>@81:0>:int) =
        ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
         ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
        P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:2>@91:0>:int) =
        ((<<bcopy_aux_1152@62:2>@91:0> = 0) && (0 < <bcopy_aux_1152@62:0>))
        P[<fail_1485@99:0>](<fail_1485@99:0>:bool) = false
      upper bounds:
        P[<fail_1485@99:0>](var181:bool) = true
      begin GenHcSolver.classify_pids(21712)[4]
        output:
          [<fail_1485@99:0>]
      end GenHcSolver.classify_pids(21712)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(21715)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(21716)[5]
          begin InterpProver.interpolate_fresh(21717)[6]
            begin InterpProver.interpolate_log(21718)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(21719)[8]
                begin InterpProver.interpolate_simplify(21720)[9]
                  begin InterpProver.interpolate_quick(21733)[10]
                    
                  end InterpProver.interpolate_quick(21733)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(21737)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(21737)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(21720)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(21719)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(21718)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(21717)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(21716)[5] (0.000000 sec.)
        output:
          P[<fail_1485@99:0>](<fail_1485@99:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(21715)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1152@62:2>@91:0>](var176:int,<k_make_array_u_1188@96:0>:int), (
        0 > <k_make_array_u_1188@96:0>) |- bot
        
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,var177:int),
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int,var178:int),
        ((<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>) && (<<bcopy_aux_1152@62:2>@91:0> < var179))
        |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,
                                           <<bcopy_aux_1152@62:2>@91:0>:int)
        
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
        |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                  <<bcopy_aux_1152@62:1>@65:0>:int,
                                                  <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
        
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
        |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                           <<bcopy_aux_1152@62:1>@65:0>:int)
        
         (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                 <bcopy_aux_1152@62:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int) = (<bcopy_aux_1152@62:3> = 0)
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int) =
        ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,<<<bcopy_aux_1152@62:1>@65:1>@81:0>:int) =
        ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
         ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
        P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:2>@91:0>:int) =
        ((<<bcopy_aux_1152@62:2>@91:0> = 0) && (0 < <bcopy_aux_1152@62:0>))
      upper bounds:
        P[<<bcopy_aux_1152@62:2>@91:0>](var182:int,var183:int) = (0 <= var183)
      begin GenHcSolver.classify_pids(24364)[4]
        output:
          [<<bcopy_aux_1152@62:2>@91:0>]
      end GenHcSolver.classify_pids(24364)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1152@62:2>@91:0> = 0) && (0 < <bcopy_aux_1152@62:0>))
      nub:(not (0 <= <<bcopy_aux_1152@62:2>@91:0>))
      begin ApronInterface.convex_hull_interpolate(24367)[4]
        lb:((<<bcopy_aux_1152@62:2>@91:0> = 0) && (0 < <bcopy_aux_1152@62:0>))
        nub:(not (0 <= <<bcopy_aux_1152@62:2>@91:0>))
        lb':((<<bcopy_aux_1152@62:2>@91:0> = 0) && (0 < <bcopy_aux_1152@62:0>))
        nub':(not (0 <= <<bcopy_aux_1152@62:2>@91:0>))
        begin InterpProver.interpolate(24368)[5]
          begin InterpProver.interpolate_fresh(24369)[6]
            begin InterpProver.interpolate_log(24370)[7]
              input1: ((<<bcopy_aux_1152@62:2>@91:0> = 0) && (0 < <bcopy_aux_1152@62:0>))
              input2: (not (0 <= <<bcopy_aux_1152@62:2>@91:0>))
              begin InterpProver.interpolate_check(24371)[8]
                begin InterpProver.interpolate_simplify(24372)[9]
                  begin InterpProver.interpolate_quick(24401)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(24410)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(24411)[12]
                        begin CsisatInterface.interpolate_csisat_log(24412)[13]
                          input1: (0 = v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0 & 1 <= v_sep_bcopy_aux_1152_sep_62_sep_0)
                          input2: (1 + v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(24413)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(24413)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(24412)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(24411)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(24410)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(24401)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(24372)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(24371)[8] (0.002000 sec.)
              output: (0 <= <<bcopy_aux_1152@62:2>@91:0>)
            end InterpProver.interpolate_log(24370)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(24369)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(24368)[5] (0.002000 sec.)
        output:
          P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:2>@91:0>:int) =
          (0 <= <<bcopy_aux_1152@62:2>@91:0>)
      end ApronInterface.convex_hull_interpolate(24367)[4] (0.002000 sec.)
      Horn clauses:
        P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int,var178:int),
        ((<<bcopy_aux_1152@62:2>@91:0> < var179) && (0 > <<bcopy_aux_1152@62:2>@91:0>)) |- bot
        
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
        |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                  <<bcopy_aux_1152@62:1>@65:0>:int,
                                                  <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
        
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
        |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                           <<bcopy_aux_1152@62:1>@65:0>:int)
        
         (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                 <bcopy_aux_1152@62:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int) = (<bcopy_aux_1152@62:3> = 0)
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int) =
        ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,<<<bcopy_aux_1152@62:1>@65:1>@81:0>:int) =
        ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
         ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
      upper bounds:
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var184:int,var185:int,var186:int) = true
      begin GenHcSolver.classify_pids(26159)[4]
        output:
          [<<<bcopy_aux_1152@62:1>@65:1>@81:0>]
      end GenHcSolver.classify_pids(26159)[4] (0.000000 sec.)
      lb:((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
          ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(26162)[4]
        lb:((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
            ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
        nub:false
        lb':((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
             ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
        nub':false
        begin InterpProver.interpolate(26163)[5]
          begin InterpProver.interpolate_fresh(26164)[6]
            begin InterpProver.interpolate_log(26165)[7]
              input1: ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
                       ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
              input2: false
              begin InterpProver.interpolate_check(26166)[8]
                begin InterpProver.interpolate_simplify(26167)[9]
                  begin InterpProver.interpolate_quick(26222)[10]
                    
                  end InterpProver.interpolate_quick(26222)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(26167)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(26166)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(26165)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(26164)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(26163)[5] (0.001000 sec.)
        output:
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,<<<bcopy_aux_1152@62:1>@65:1>@81:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(26162)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
        ((<<bcopy_aux_1152@62:2>@91:0> < var179) && (0 > <<bcopy_aux_1152@62:2>@91:0>)) |- bot
        
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
        |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                           <<bcopy_aux_1152@62:1>@65:0>:int)
        
         (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                 <bcopy_aux_1152@62:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int) = (<bcopy_aux_1152@62:3> = 0)
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int) =
        ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
      upper bounds:
        P[<<bcopy_aux_1152@62:1>@65:0>](var187:int,var188:int) = true
      begin GenHcSolver.classify_pids(27149)[4]
        output:
          [<<bcopy_aux_1152@62:1>@65:0>]
      end GenHcSolver.classify_pids(27149)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(27152)[4]
        lb:((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
        nub:false
        lb':((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
        nub':false
        begin InterpProver.interpolate(27153)[5]
          begin InterpProver.interpolate_fresh(27154)[6]
            begin InterpProver.interpolate_log(27155)[7]
              input1: ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
              input2: false
              begin InterpProver.interpolate_check(27156)[8]
                begin InterpProver.interpolate_simplify(27157)[9]
                  begin InterpProver.interpolate_quick(27196)[10]
                    
                  end InterpProver.interpolate_quick(27196)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(27157)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(27156)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(27155)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(27154)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(27153)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int) = true
      end ApronInterface.convex_hull_interpolate(27152)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
        ((<<bcopy_aux_1152@62:2>@91:0> < var179) && (0 > <<bcopy_aux_1152@62:2>@91:0>)) |- bot
        
         (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                 <bcopy_aux_1152@62:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int) = (<bcopy_aux_1152@62:3> = 0)
      upper bounds:
        P[<bcopy_aux_1152@62:3>](var189:int,var190:int) = ((var190 >= var189) || (0 <= var190))
      begin GenHcSolver.classify_pids(27905)[4]
        output:
          [<bcopy_aux_1152@62:3>]
      end GenHcSolver.classify_pids(27905)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1152@62:3> = 0)
      nub:(not ((<bcopy_aux_1152@62:3> >= <bcopy_aux_1152@62:0>) || (0 <= <bcopy_aux_1152@62:3>)))
      begin ApronInterface.convex_hull_interpolate(27908)[4]
        lb:(<bcopy_aux_1152@62:3> = 0)
        nub:(not ((<bcopy_aux_1152@62:3> >= <bcopy_aux_1152@62:0>) || (0 <= <bcopy_aux_1152@62:3>)))
        lb':(<bcopy_aux_1152@62:3> = 0)
        nub':(not ((<bcopy_aux_1152@62:3> >= <bcopy_aux_1152@62:0>) || (0 <= <bcopy_aux_1152@62:3>)))
        begin InterpProver.interpolate(27909)[5]
          begin InterpProver.interpolate_fresh(27910)[6]
            begin InterpProver.interpolate_log(27911)[7]
              input1: (<bcopy_aux_1152@62:3> = 0)
              input2: (not ((<bcopy_aux_1152@62:3> >= <bcopy_aux_1152@62:0>) || (0 <= <bcopy_aux_1152@62:3>)))
              begin InterpProver.interpolate_check(27912)[8]
                begin InterpProver.interpolate_simplify(27913)[9]
                  begin InterpProver.interpolate_quick(27952)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(27961)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(27962)[12]
                        begin CsisatInterface.interpolate_csisat_log(27963)[13]
                          input1: 0 = v_sep_bcopy_aux_1152_sep_62_sep_3
                          input2: ((1 + v_sep_bcopy_aux_1152_sep_62_sep_3) <= 0 & (1 + v_sep_bcopy_aux_1152_sep_62_sep_3) <= v_sep_bcopy_aux_1152_sep_62_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(27964)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(27964)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1152_sep_62_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(27963)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1152_sep_62_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1152_sep_62_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(27962)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(27961)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(27952)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(27913)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(27912)[8] (0.001000 sec.)
              output: (0 <= <bcopy_aux_1152@62:3>)
            end InterpProver.interpolate_log(27911)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(27910)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(27909)[5] (0.001000 sec.)
        output:
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int) = (0 <= <bcopy_aux_1152@62:3>)
      end ApronInterface.convex_hull_interpolate(27908)[4] (0.001000 sec.)
      begin HcSolver.check_validity(28080)[4]
        input:
          P[<fail_1485@99:0>](<fail_1485@99:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@62:2>@91:0>](var176:int,<k_make_array_u_1188@96:0>:int),
          ((0 > <k_make_array_u_1188@96:0>) && <fail_1485@99:0>) |- P[<fail_1485@99:0>](
          <fail_1485@99:0>:bool)
          
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,var177:int),
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int,var178:int),
          ((<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>) && (<<bcopy_aux_1152@62:2>@91:0> < var179))
          |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:2>@91:0>:int)
          
          P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
          |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                    <<bcopy_aux_1152@62:1>@65:0>:int,
                                                    <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
          
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
          |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:1>@65:0>:int)
          
           (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                   <bcopy_aux_1152@62:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(28080)[4] (0.001999 sec.)
      solution:
        P[<fail_1485@99:0>](<fail_1485@99:0>:bool) = false
        P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:2>@91:0>:int) =
        (0 <= <<bcopy_aux_1152@62:2>@91:0>)
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,<<<bcopy_aux_1152@62:1>@65:1>@81:0>:int) =
        true
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int) = true
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int) = (0 <= <bcopy_aux_1152@62:3>)
    end GenHcSolver.solve(19453)[3] (0.045993 sec.)
    begin GenHcSolver.solve(28635)[3]
      Horn clauses:
        P[<fail_1485@99:0>](<fail_1485@99:0>:bool)|- bot
        
        P[<<bcopy_aux_1152@62:2>@91:0>](var176:int,<k_make_array_u_1188@96:0>:int),
        ((0 > <k_make_array_u_1188@96:0>) && <fail_1485@99:0>) |- P[<fail_1485@99:0>](
        <fail_1485@99:0>:bool)
        
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,var177:int),
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int,var178:int),
        ((<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>) && (<<bcopy_aux_1152@62:2>@91:0> < var179))
        |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,
                                           <<bcopy_aux_1152@62:2>@91:0>:int)
        
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
        |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                  <<bcopy_aux_1152@62:1>@65:0>:int,
                                                  <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
        
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
        |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                           <<bcopy_aux_1152@62:1>@65:0>:int)
        
         (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                 <bcopy_aux_1152@62:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int) = (<bcopy_aux_1152@62:3> = 0)
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int) =
        ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,<<<bcopy_aux_1152@62:1>@65:1>@81:0>:int) =
        ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
         ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
        P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:2>@91:0>:int) =
        ((<<bcopy_aux_1152@62:2>@91:0> = 0) && (0 < <bcopy_aux_1152@62:0>))
        P[<fail_1485@99:0>](<fail_1485@99:0>:bool) = false
      upper bounds:
        P[<fail_1485@99:0>](var192:bool) = true
      begin GenHcSolver.classify_pids(30894)[4]
        output:
          [<fail_1485@99:0>]
      end GenHcSolver.classify_pids(30894)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(30897)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(30900)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(30900)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(30905)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(30905)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(30908)[5]
          begin InterpProver.interpolate_fresh(30909)[6]
            begin InterpProver.interpolate_log(30910)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(30911)[8]
                begin InterpProver.interpolate_simplify(30912)[9]
                  begin InterpProver.interpolate_quick(30927)[10]
                    
                  end InterpProver.interpolate_quick(30927)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(30931)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(30931)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(30912)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(30911)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(30910)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(30909)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(30908)[5] (0.001000 sec.)
        output:
          P[<fail_1485@99:0>](<fail_1485@99:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(30897)[4] (0.001000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1152@62:2>@91:0>](var176:int,<k_make_array_u_1188@96:0>:int), (
        0 > <k_make_array_u_1188@96:0>) |- bot
        
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,var177:int),
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int,var178:int),
        ((<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>) && (<<bcopy_aux_1152@62:2>@91:0> < var179))
        |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,
                                           <<bcopy_aux_1152@62:2>@91:0>:int)
        
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
        |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                  <<bcopy_aux_1152@62:1>@65:0>:int,
                                                  <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
        
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
        |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                           <<bcopy_aux_1152@62:1>@65:0>:int)
        
         (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                 <bcopy_aux_1152@62:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int) = (<bcopy_aux_1152@62:3> = 0)
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int) =
        ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,<<<bcopy_aux_1152@62:1>@65:1>@81:0>:int) =
        ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
         ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
        P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:2>@91:0>:int) =
        ((<<bcopy_aux_1152@62:2>@91:0> = 0) && (0 < <bcopy_aux_1152@62:0>))
      upper bounds:
        P[<<bcopy_aux_1152@62:2>@91:0>](var193:int,var194:int) = (0 <= var194)
      begin GenHcSolver.classify_pids(33565)[4]
        output:
          [<<bcopy_aux_1152@62:2>@91:0>]
      end GenHcSolver.classify_pids(33565)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1152@62:2>@91:0> = 0) && (0 < <bcopy_aux_1152@62:0>))
      nub:(not (0 <= <<bcopy_aux_1152@62:2>@91:0>))
      begin ApronInterface.convex_hull_interpolate(33568)[4]
        lb:((<<bcopy_aux_1152@62:2>@91:0> = 0) && (0 < <bcopy_aux_1152@62:0>))
        nub:(not (0 <= <<bcopy_aux_1152@62:2>@91:0>))
        begin ExtFormula.Formula.case_analysis_boolean(33578)[5]
          ts: ((<<bcopy_aux_1152@62:2>@91:0> = 0) && (0 < <bcopy_aux_1152@62:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(33578)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(33586)[5]
          ts: (0 > <<bcopy_aux_1152@62:2>@91:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(33586)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1152@62:2>@91:0> = 0) && ((-1 + <bcopy_aux_1152@62:0>) >= 0))
        nub':((-1 + (-1 * <<bcopy_aux_1152@62:2>@91:0>)) >= 0)
        begin InterpProver.interpolate(33590)[5]
          begin InterpProver.interpolate_fresh(33591)[6]
            begin InterpProver.interpolate_log(33592)[7]
              input1: ((<<bcopy_aux_1152@62:2>@91:0> = 0) && ((-1 + <bcopy_aux_1152@62:0>) >= 0))
              input2: ((-1 + (-1 * <<bcopy_aux_1152@62:2>@91:0>)) >= 0)
              begin InterpProver.interpolate_check(33593)[8]
                begin InterpProver.interpolate_simplify(33594)[9]
                  begin InterpProver.interpolate_quick(33631)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(33640)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(33641)[12]
                        begin CsisatInterface.interpolate_csisat_log(33642)[13]
                          input1: (0 = v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0 & 1 <= v_sep_bcopy_aux_1152_sep_62_sep_0)
                          input2: (1 + v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(33643)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(33643)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(33642)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(33641)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(33640)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(33631)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(33594)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(33593)[8] (0.001000 sec.)
              output: (0 <= <<bcopy_aux_1152@62:2>@91:0>)
            end InterpProver.interpolate_log(33592)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(33591)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(33590)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:2>@91:0>:int) =
          (0 <= <<bcopy_aux_1152@62:2>@91:0>)
      end ApronInterface.convex_hull_interpolate(33568)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int,var178:int),
        ((<<bcopy_aux_1152@62:2>@91:0> < var179) && (0 > <<bcopy_aux_1152@62:2>@91:0>)) |- bot
        
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
        |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                  <<bcopy_aux_1152@62:1>@65:0>:int,
                                                  <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
        
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
        |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                           <<bcopy_aux_1152@62:1>@65:0>:int)
        
         (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                 <bcopy_aux_1152@62:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int) = (<bcopy_aux_1152@62:3> = 0)
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int) =
        ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,<<<bcopy_aux_1152@62:1>@65:1>@81:0>:int) =
        ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
         ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
      upper bounds:
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var195:int,var196:int,var197:int) = true
      begin GenHcSolver.classify_pids(35396)[4]
        output:
          [<<<bcopy_aux_1152@62:1>@65:1>@81:0>]
      end GenHcSolver.classify_pids(35396)[4] (0.000000 sec.)
      lb:((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
          ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(35399)[4]
        lb:((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
            ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(35419)[5]
          ts: ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
               ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(35419)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(35428)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(35428)[5] (0.000000 sec.)
        lb':((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
             ((<<bcopy_aux_1152@62:1>@65:0> = 0) && ((-1 + <bcopy_aux_1152@62:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(35431)[5]
          begin InterpProver.interpolate_fresh(35432)[6]
            begin InterpProver.interpolate_log(35433)[7]
              input1: ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
                       ((<<bcopy_aux_1152@62:1>@65:0> = 0) && ((-1 + <bcopy_aux_1152@62:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(35434)[8]
                begin InterpProver.interpolate_simplify(35435)[9]
                  begin InterpProver.interpolate_quick(35493)[10]
                    
                  end InterpProver.interpolate_quick(35493)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(35435)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(35434)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(35433)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(35432)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(35431)[5] (0.000000 sec.)
        output:
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,<<<bcopy_aux_1152@62:1>@65:1>@81:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(35399)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
        ((<<bcopy_aux_1152@62:2>@91:0> < var179) && (0 > <<bcopy_aux_1152@62:2>@91:0>)) |- bot
        
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
        (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
        |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                           <<bcopy_aux_1152@62:1>@65:0>:int)
        
         (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                 <bcopy_aux_1152@62:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int) = (<bcopy_aux_1152@62:3> = 0)
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int) =
        ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
      upper bounds:
        P[<<bcopy_aux_1152@62:1>@65:0>](var198:int,var199:int) = true
      begin GenHcSolver.classify_pids(36422)[4]
        output:
          [<<bcopy_aux_1152@62:1>@65:0>]
      end GenHcSolver.classify_pids(36422)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(36425)[4]
        lb:((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(36437)[5]
          ts: ((<<bcopy_aux_1152@62:1>@65:0> = 0) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(36437)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(36445)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(36445)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1152@62:1>@65:0> = 0) && ((-1 + <bcopy_aux_1152@62:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(36448)[5]
          begin InterpProver.interpolate_fresh(36449)[6]
            begin InterpProver.interpolate_log(36450)[7]
              input1: ((<<bcopy_aux_1152@62:1>@65:0> = 0) && ((-1 + <bcopy_aux_1152@62:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(36451)[8]
                begin InterpProver.interpolate_simplify(36452)[9]
                  begin InterpProver.interpolate_quick(36492)[10]
                    
                  end InterpProver.interpolate_quick(36492)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(36452)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(36451)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(36450)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(36449)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(36448)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int) = true
      end ApronInterface.convex_hull_interpolate(36425)[4] (0.002000 sec.)
      Horn clauses:
        P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
        ((<<bcopy_aux_1152@62:2>@91:0> < var179) && (0 > <<bcopy_aux_1152@62:2>@91:0>)) |- bot
        
         (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                 <bcopy_aux_1152@62:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int) = (<bcopy_aux_1152@62:3> = 0)
      upper bounds:
        P[<bcopy_aux_1152@62:3>](var200:int,var201:int) = ((var201 >= var200) || (0 <= var201))
      begin GenHcSolver.classify_pids(37203)[4]
        output:
          [<bcopy_aux_1152@62:3>]
      end GenHcSolver.classify_pids(37203)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1152@62:3> = 0)
      nub:(not ((<bcopy_aux_1152@62:3> >= <bcopy_aux_1152@62:0>) || (0 <= <bcopy_aux_1152@62:3>)))
      begin ApronInterface.convex_hull_interpolate(37206)[4]
        lb:(<bcopy_aux_1152@62:3> = 0)
        nub:(not ((<bcopy_aux_1152@62:3> >= <bcopy_aux_1152@62:0>) || (0 <= <bcopy_aux_1152@62:3>)))
        begin ExtFormula.Formula.case_analysis_boolean(37210)[5]
          ts: (<bcopy_aux_1152@62:3> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(37210)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(37228)[5]
          ts: ((<bcopy_aux_1152@62:3> < <bcopy_aux_1152@62:0>) && (0 > <bcopy_aux_1152@62:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(37228)[5] (0.000000 sec.)
        lb':(<bcopy_aux_1152@62:3> = 0)
        nub':(((-1 + (-1 * <bcopy_aux_1152@62:3>)) >= 0) &&
              (((-1 + (-1 * <bcopy_aux_1152@62:3>)) + <bcopy_aux_1152@62:0>) >= 0))
        begin InterpProver.interpolate(37234)[5]
          begin InterpProver.interpolate_fresh(37235)[6]
            begin InterpProver.interpolate_log(37236)[7]
              input1: (<bcopy_aux_1152@62:3> = 0)
              input2: (((-1 + (-1 * <bcopy_aux_1152@62:3>)) >= 0) &&
                       (((-1 + (-1 * <bcopy_aux_1152@62:3>)) + <bcopy_aux_1152@62:0>) >= 0))
              begin InterpProver.interpolate_check(37237)[8]
                begin InterpProver.interpolate_simplify(37238)[9]
                  begin InterpProver.interpolate_quick(37289)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(37298)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(37299)[12]
                        begin CsisatInterface.interpolate_csisat_log(37300)[13]
                          input1: 0 = v_sep_bcopy_aux_1152_sep_62_sep_3
                          input2: ((1 + v_sep_bcopy_aux_1152_sep_62_sep_3) <= 0 & (1 + v_sep_bcopy_aux_1152_sep_62_sep_3) <= v_sep_bcopy_aux_1152_sep_62_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(37301)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(37301)[14] (0.001000 sec.)
                          output: -2*v_sep_bcopy_aux_1152_sep_62_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(37300)[13] (0.001000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1152_sep_62_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1152_sep_62_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(37299)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(37298)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(37289)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(37238)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(37237)[8] (0.001000 sec.)
              output: (0 <= <bcopy_aux_1152@62:3>)
            end InterpProver.interpolate_log(37236)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(37235)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(37234)[5] (0.002000 sec.)
        output:
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int) = (0 <= <bcopy_aux_1152@62:3>)
      end ApronInterface.convex_hull_interpolate(37206)[4] (0.002000 sec.)
      begin HcSolver.check_validity(37421)[4]
        input:
          P[<fail_1485@99:0>](<fail_1485@99:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@62:2>@91:0>](var176:int,<k_make_array_u_1188@96:0>:int),
          ((0 > <k_make_array_u_1188@96:0>) && <fail_1485@99:0>) |- P[<fail_1485@99:0>](
          <fail_1485@99:0>:bool)
          
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,var177:int),
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int,var178:int),
          ((<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>) && (<<bcopy_aux_1152@62:2>@91:0> < var179))
          |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:2>@91:0>:int)
          
          P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
          |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                    <<bcopy_aux_1152@62:1>@65:0>:int,
                                                    <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
          
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
          |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:1>@65:0>:int)
          
           (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                   <bcopy_aux_1152@62:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(37421)[4] (0.002999 sec.)
      solution:
        P[<fail_1485@99:0>](<fail_1485@99:0>:bool) = false
        P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:2>@91:0>:int) =
        (0 <= <<bcopy_aux_1152@62:2>@91:0>)
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,<<<bcopy_aux_1152@62:1>@65:1>@81:0>:int) =
        true
        P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int) = true
        P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<bcopy_aux_1152@62:3>:int) = (0 <= <bcopy_aux_1152@62:3>)
    end GenHcSolver.solve(28635)[3] (0.058991 sec.)
    begin YhornInterface.solve(37976)[3]
      begin HcSolver.solve_ub(37977)[4]
        encoded:
          P[<fail_1485@99:0>](<fail_1485@99:0>:int)|- bot
          
          P[<<bcopy_aux_1152@62:2>@91:0>](var176:int,<k_make_array_u_1188@96:0>:int),
          ((0 > <k_make_array_u_1188@96:0>) && (<fail_1485@99:0> = 1)) |- P[<fail_1485@99:0>](
          <fail_1485@99:0>:int)
          
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,var177:int),
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int,var178:int),
          ((<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>) && (<<bcopy_aux_1152@62:2>@91:0> < var179))
          |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:2>@91:0>:int)
          
          P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
          |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                    <<bcopy_aux_1152@62:1>@65:0>:int,
                                                    <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
          
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
          |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:1>@65:0>:int)
          
           (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                   <bcopy_aux_1152@62:3>:int)
        input to Yhorn:
          P[<fail_1485@99:0>](<fail_1485@99:0>:int)|- bot
          
          P[<<bcopy_aux_1152@62:2>@91:0>](var176:int,<k_make_array_u_1188@96:0>:int),
          ((0 > <k_make_array_u_1188@96:0>) && (<fail_1485@99:0> = 1)) |- P[<fail_1485@99:0>](
          <fail_1485@99:0>:int)
          
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,var177:int),
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int,var178:int),
          ((<<bcopy_aux_1152@62:2>@91:0> < var179) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>))
          |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:2>@91:0>:int)
          
          P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          ((<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>) &&
           ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0)))
          |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                    <<bcopy_aux_1152@62:1>@65:0>:int,
                                                    <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
          
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
          |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:1>@65:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1485_sep_99_sep_0($124)) -> 1=0.
(($124-1=0) & (-$125>0)) & (v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0($126,$125)) -> v_sep_fail_1485_sep_99_sep_0($124).
(($127-$128<0) & ($129-$130<0)) & (v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($130,$129,$131)) & (v_sep_bcopy_aux_1152_sep_62_sep_3($130,$129)) & (v_sep_bcopy_aux_1152_sep_62_sep_3($128,$127)) & (v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($128,$127,$132)) -> v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0($128,$129).
(($133=0) & (-$127<=0) & ($127-$128<0)) & (v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0($128,$127)) -> v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($128,$127,$133).
($127-$128<0) & (v_sep_bcopy_aux_1152_sep_62_sep_3($128,$127)) -> v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0($128,$127).
$134=0 -> v_sep_bcopy_aux_1152_sep_62_sep_3($128,$134).


v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
.........Extend [18]0.561913
Reconstrcut: 4

v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
...Extend [18]0.563913
Reconstrcut: 7

v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
.......Split conj [18] 0.566913
(Reconstrcut: 7 **)
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
.........
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
...
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
.......
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
.........
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0: X
v_sep_bcopy_aux_1152_sep_62_sep_3: X
v_sep_fail_1485_sep_99_sep_0: X
..........(0=0) & (v_sep_fail_1485_sep_99_sep_0($124)) -> 1=0.
(($124-1=0) & (-$125>0)) & (v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0($126,$125)) -> v_sep_fail_1485_sep_99_sep_0($124).
(($127-$128<0) & ($129-$130<0)) & (v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($130,$129,$131)) & (v_sep_bcopy_aux_1152_sep_62_sep_3($130,$129)) & (v_sep_bcopy_aux_1152_sep_62_sep_3($128,$127)) & (v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($128,$127,$132)) -> v_sep_bcopy_aux_1152_sep_62_sep_2_sep_91_sep_0($128,$129).
(($133=0) & (-$127<=0) & ($127-$128<0)) & (v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0($128,$127)) -> v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($128,$127,$133).
($127-$128<0) & (v_sep_bcopy_aux_1152_sep_62_sep_3($128,$127)) -> v_sep_bcopy_aux_1152_sep_62_sep_1_sep_65_sep_0($128,$127).
$134=0 -> v_sep_bcopy_aux_1152_sep_62_sep_3($128,$134).

           (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                   <bcopy_aux_1152@62:3>:int)
        solution:
          P[<<bcopy_aux_1152@62:1>@65:0>]($155:int,$157:int) = true
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>]($143:int,$145:int,$147:int) = (0 <= $145)
          P[<<bcopy_aux_1152@62:2>@91:0>]($138:int,$140:int) = (0 <= $140)
          P[<bcopy_aux_1152@62:3>]($150:int,$152:int) = true
          P[<fail_1485@99:0>]($135:bool) = false
        
      end HcSolver.solve_ub(37977)[4] (0.037995 sec.)
      begin HcSolver.check_validity(38207)[4]
        input:
          P[<fail_1485@99:0>](<fail_1485@99:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@62:2>@91:0>](var176:int,<k_make_array_u_1188@96:0>:int),
          ((0 > <k_make_array_u_1188@96:0>) && <fail_1485@99:0>) |- P[<fail_1485@99:0>](
          <fail_1485@99:0>:bool)
          
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int,var177:int),
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          P[<bcopy_aux_1152@62:3>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int),
          P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](var179:int,<<bcopy_aux_1152@62:2>@91:0>:int,var178:int),
          ((<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>) && (<<bcopy_aux_1152@62:2>@91:0> < var179))
          |- P[<<bcopy_aux_1152@62:2>@91:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:2>@91:0>:int)
          
          P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          ((<<<bcopy_aux_1152@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<bcopy_aux_1152@62:1>@65:0>) && (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)))
          |- P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>](<bcopy_aux_1152@62:0>:int,
                                                    <<bcopy_aux_1152@62:1>@65:0>:int,
                                                    <<<bcopy_aux_1152@62:1>@65:1>@81:0>:int)
          
          P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,<<bcopy_aux_1152@62:1>@65:0>:int),
          (<<bcopy_aux_1152@62:1>@65:0> < <bcopy_aux_1152@62:0>)
          |- P[<<bcopy_aux_1152@62:1>@65:0>](<bcopy_aux_1152@62:0>:int,
                                             <<bcopy_aux_1152@62:1>@65:0>:int)
          
           (<bcopy_aux_1152@62:3> = 0) |- P[<bcopy_aux_1152@62:3>](<bcopy_aux_1152@62:0>:int,
                                                                   <bcopy_aux_1152@62:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(38207)[4] (0.003999 sec.)
      solution:
        P[<<bcopy_aux_1152@62:1>@65:0>]($155:int,$157:int) = true
        P[<<<bcopy_aux_1152@62:1>@65:1>@81:0>]($143:int,$145:int,$147:int) = (0 <= $145)
        P[<<bcopy_aux_1152@62:2>@91:0>]($138:int,$140:int) = (0 <= $140)
        P[<bcopy_aux_1152@62:3>]($150:int,$152:int) = true
        P[<fail_1485@99:0>]($135:bool) = false
    end YhornInterface.solve(37976)[3] (0.042994 sec.)
    
  end RefTypeInfer.infer_etrs(15802)[2] (0.295955 sec.)
  refinement types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:int -> (v3:int -> X) -> X) ->
                    (v6:{v6:int | (0 <= v6)} -> (v7:int -> X) -> X) ->
                    v10:{v10:int | (0 <= v10)} -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1199: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1480: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1153: (v1:int -> (v2:int -> X) -> X) -> v5:int -> v6:int -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1485: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1484: var229:int -> var228:int -> var227:unit -> X
    f_bcopy_aux_1481: var244:int ->
                      var243:int ->
                      var242:int ->
                      (var241:int -> (var240:int -> X) -> X) ->
                      (var237:unit -> X) -> (var235:int -> (var234:int -> X) -> X) -> var231:unit -> X
    f_update_1479: var250:int -> var249:int -> (var248:unit -> X) -> var246:int -> X
  abstraction types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:int -> (v3:int -> X) -> X) ->
                    (v6:int[v6 -> (0 <= v6)] -> (v7:int -> X) -> X) ->
                    v10:int[v10 -> (0 <= v10)] -> (v11:unit -> X) -> X
    make_array_1030: var251:int -> var252:int -> (var253:int -> X) -> X
    k_make_array_u_1188: var256:int -> var257:int -> (var258:int -> X) -> var260:bool -> X
    k_make_array_u_1199: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1480: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1153: (v1:int -> (v2:int -> X) -> X) -> v5:int -> v6:int -> (v7:unit -> X) -> X
    fail_1485: v1:bool -> (v2:unit -> X) -> X
    f_1484: var229:int -> var228:int -> var227:unit -> X
    f_bcopy_aux_1481: var244:int ->
                      var243:int ->
                      var242:int ->
                      (var241:int -> (var240:int -> X) -> X) ->
                      (var237:unit -> X) -> (var235:int -> (var234:int -> X) -> X) -> var231:unit -> X
    f_update_1479: var250:int -> var249:int -> (var248:unit -> X) -> var246:int -> X
  
end AbsTypeInfer.refine(15801)[1] (0.301954 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1478
  main_1478 -> (rand_int f_1482)
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (i_1041 >= m_1038) -> (k_bcopy_aux_1292 ())
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (
      not (i_1041 >= m_1038)) -> (src_1039 i_1041 (f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039))
  f_1482 x_1436 -> (rand_int (f_1483 x_1436))
  f_1483 x_1436 x_1449 -> (main_1042 x_1436 x_1449 (f_1484 x_1436 x_1449))
  f_1484 x_1436 x_1449 x_1433 -> end
  f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 ->
      (update_1153 des_1040 i_1041 x_1323 (f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039))
  f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 ->
      (bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) k_bcopy_aux_1292)
  f_update_1479 i_1035 x_1036 k_update_1232 x_1235 -> (k_update_1232 ())
  fail_1485 b k -> {fail} => (k ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when b_1200 ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when (not b_1200) ->
      (fail_1485 true (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182))
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 -> (k_make_array_1182 0)
  main_1042 n_1043 m_1044 k_main_1369 when (n_1043 <= m_1044) ->
      (bcopy_aux_1152 n_1043 (make_array_1030 n_1043) (make_array_1030 m_1044) 0 k_main_1369)
  main_1042 n_1043 m_1044 k_main_1369 when (not (n_1043 <= m_1044)) -> (k_main_1369 ())
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (0 <= i_1032) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (not (0 <= i_1032)) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 false)
  update_1153 des_1034 i_1035 x_1036 k_update_1232 -> (des_1034 i_1035 (f_update_1479 i_1035 x_1036 k_update_1232))
Types:
  main_1478 : X
  bcopy_aux_1152 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                    (x_9:int[x_9 >= 0] -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1485 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1478 ... --> 
  f_1482 ... --> 
  f_1483 ... --> 
  main_1042 [1/2] ... --> 
  bcopy_aux_1152 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1188 [1/2] ... --> 
  k_make_array_u_1199 ... --> 
  f_bcopy_aux_1480 ... --> 
  update_1153 ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1188 [2/2] ... --> 
  fail_1485 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(39512)[1]
  program:
    main_1478  | true = ((Random.int 0) f_1482)
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    i_1041 >= m_1038) = (k_bcopy_aux_1292 ())
    bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 | (
    not (i_1041 >= m_1038)) = (src_1039 i_1041
                                        (f_bcopy_aux_1480 i_1041
                                                          m_1038
                                                          des_1040
                                                          k_bcopy_aux_1292
                                                          src_1039))
    f_1482 x_1436 | true = ((Random.int 0) (f_1483 x_1436))
    f_1483 x_1436 x_1449 | true = (main_1042 x_1436
                                             x_1449
                                             (f_1484 x_1436
                                                     x_1449))
    f_1484 x_1436 x_1449 x_1433 | true = end
    f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 | true = (
    update_1153 des_1040
                i_1041
                x_1323
                (f_bcopy_aux_1481 i_1041
                                  m_1038
                                  x_1323
                                  des_1040
                                  k_bcopy_aux_1292
                                  src_1039))
    f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 | true = (
    bcopy_aux_1152 m_1038
                   src_1039
                   des_1040
                   (i_1041 + 1)
                   k_bcopy_aux_1292)
    f_update_1479 i_1035 x_1036 k_update_1232 x_1235 | true = (k_update_1232 ())
    fail_1485 b k | true = (fail ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | b_1200 = (
    k_make_array_u_1199 i_1032
                        n_1031
                        k_make_array_1182
                        ())
    k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 | (not b_1200) = (
    fail_1485 true
              (k_make_array_u_1199 i_1032
                                   n_1031
                                   k_make_array_1182))
    k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 | true = (
    k_make_array_1182 0)
    main_1042 n_1043 m_1044 k_main_1369 | (n_1043 <= m_1044) = (bcopy_aux_1152
                                                                  n_1043
                                                                  (make_array_1030 n_1043)
                                                                  (make_array_1030 m_1044)
                                                                  0
                                                                  k_main_1369)
    main_1042 n_1043 m_1044 k_main_1369 | (not (n_1043 <= m_1044)) = (
    k_main_1369 ())
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (0 <= i_1032) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1182 | (not (0 <= i_1032)) = (
    k_make_array_u_1188 i_1032
                        n_1031
                        k_make_array_1182
                        false)
    update_1153 des_1034 i_1035 x_1036 k_update_1232 | true = (des_1034
                                                                 i_1035
                                                                 (f_update_1479 i_1035
                                                                    x_1036
                                                                    k_update_1232))
    main_1478:X
    bcopy_aux_1152:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1482:int -> X
    f_1483:int -> int -> X
    f_1484:int -> int -> unit -> X
    f_bcopy_aux_1480:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1481:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1479:int -> int -> (unit -> X) -> int -> X
    fail_1485:bool -> (unit -> X) -> X
    k_make_array_u_1188:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1199:int -> int -> (int -> X) -> unit -> X
    main_1042:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1153:(int -> (int -> X) -> X) -> int -> int -> (unit -> X) -> X
  inlined functions: f_1482,f_1483,f_1484,f_bcopy_aux_1480,f_bcopy_aux_1481,f_update_1479,k_make_array_u_1188,k_make_array_u_1199,main_1042,make_array_1030,update_1153
  counterexample: 0:0:0:0:1:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1482@105:0> = var262)
     [true.nop((<f_1483@108:0> = <f_1482@105:0>) && (<f_1483@108:1> = var263))
      [true.((<main_1042@110:0> = <f_1483@108:0>) && (<main_1042@110:1> = <f_1483@108:1>))
       [(<main_1042@110:0> <= <main_1042@110:1>).
        ((<bcopy_aux_1152@113:0> = <main_1042@110:0>) && (<bcopy_aux_1152@113:3> = 0))
        [(not (<bcopy_aux_1152@113:3> >= <bcopy_aux_1152@113:0>)).
         (<<bcopy_aux_1152@113:1>@116:0> = <bcopy_aux_1152@113:3>)
         [true.
          ((<make_array_1030@118:0> = <main_1042@110:0>) && (<make_array_1030@118:1> = <<bcopy_aux_1152@113:1>@116:0>))
          [(0 <= <make_array_1030@118:1>).
           ((<k_make_array_u_1188@121:0> = <make_array_1030@118:1>) &&
            ((<k_make_array_u_1188@121:1> = <make_array_1030@118:0>) &&
             (<k_make_array_u_1188@121:3> = (<make_array_1030@118:1> < <make_array_1030@118:0>))))
           [<k_make_array_u_1188@121:3>.
            ((<k_make_array_u_1199@124:0> = <k_make_array_u_1188@121:0>) &&
             ((<k_make_array_u_1199@124:1> = <k_make_array_u_1188@121:1>) && (<k_make_array_u_1199@124:3> = ())))
            [true.(<<k_make_array_u_1199@124:2>@126:0> = 0)
             [true.(<<k_make_array_u_1188@121:2>@128:0> = <<k_make_array_u_1199@124:2>@126:0>)
              [true.(<<make_array_1030@118:2>@130:0> = <<k_make_array_u_1188@121:2>@128:0>)
               [true.(<<<bcopy_aux_1152@113:1>@116:1>@132:0> = <<make_array_1030@118:2>@130:0>)
                [true.
                 ((<f_bcopy_aux_1480@134:0> = <bcopy_aux_1152@113:3>) &&
                  ((<f_bcopy_aux_1480@134:1> = <bcopy_aux_1152@113:0>) &&
                   (<f_bcopy_aux_1480@134:5> = <<<bcopy_aux_1152@113:1>@116:1>@132:0>)))
                 [true.
                  ((<update_1153@136:1> = <f_bcopy_aux_1480@134:0>) && (<update_1153@136:2> = <f_bcopy_aux_1480@134:5>))
                  [true.(<<update_1153@136:0>@138:0> = <update_1153@136:1>)
                   [true.(<<f_bcopy_aux_1480@134:2>@140:0> = <<update_1153@136:0>@138:0>)
                    [true.(<<bcopy_aux_1152@113:2>@142:0> = <<f_bcopy_aux_1480@134:2>@140:0>)
                     [true.
                      ((<make_array_1030@144:0> = <main_1042@110:1>) &&
                       (<make_array_1030@144:1> = <<bcopy_aux_1152@113:2>@142:0>))
                      [(0 <= <make_array_1030@144:1>).
                       ((<k_make_array_u_1188@147:0> = <make_array_1030@144:1>) &&
                        ((<k_make_array_u_1188@147:1> = <make_array_1030@144:0>) &&
                         (<k_make_array_u_1188@147:3> = (<make_array_1030@144:1> < <make_array_1030@144:0>))))
                       [(not <k_make_array_u_1188@147:3>).(<fail_1485@150:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(39513)[2]
    horn clauses:
      P[<fail_1485@150:0>](<fail_1485@150:0>:bool)|- bot
      
      P[<k_make_array_u_1188@147:3>](<k_make_array_u_1188@147:0>:int,<k_make_array_u_1188@147:1>:int,false:bool),
      <fail_1485@150:0> |- P[<fail_1485@150:0>](<fail_1485@150:0>:bool)
      
      P[<make_array_1030@144:1>](<k_make_array_u_1188@147:1>:int,<k_make_array_u_1188@147:0>:int),
      ((0 <= <k_make_array_u_1188@147:0>) &&
       (<k_make_array_u_1188@147:3> = (<k_make_array_u_1188@147:0> < <k_make_array_u_1188@147:1>)))
      |- P[<k_make_array_u_1188@147:3>](<k_make_array_u_1188@147:0>:int,
                                        <k_make_array_u_1188@147:1>:int,
                                        <k_make_array_u_1188@147:3>:bool)
      
      P[<main_1042@110:1>](<bcopy_aux_1152@113:0>:int,<make_array_1030@144:0>:int),
      P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,<make_array_1030@144:1>:int),
      (<bcopy_aux_1152@113:0> <= <make_array_1030@144:0>)
      |- P[<make_array_1030@144:1>](<make_array_1030@144:0>:int,<make_array_1030@144:1>:int)
      
      P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
      P[<<f_bcopy_aux_1480@134:2>@140:0>](<<bcopy_aux_1152@113:1>@116:0>:int,<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:2>@142:0>:int),
      (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
      |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                           <<bcopy_aux_1152@113:2>@142:0>:int)
      
      P[<f_bcopy_aux_1480@134:5>](<f_bcopy_aux_1480@134:0>:int,<f_bcopy_aux_1480@134:1>:int,<update_1153@136:2>:int),
      P[<<update_1153@136:0>@138:0>](<<f_bcopy_aux_1480@134:2>@140:0>:int)|- P[<<f_bcopy_aux_1480@134:2>@140:0>](
      <f_bcopy_aux_1480@134:0>:int,<f_bcopy_aux_1480@134:1>:int,<<f_bcopy_aux_1480@134:2>@140:0>:int)
      
      P[<update_1153@136:2>](<<update_1153@136:0>@138:0>:int,<update_1153@136:2>:int)|- P[<<update_1153@136:0>@138:0>](
      <<update_1153@136:0>@138:0>:int)
      
      P[<f_bcopy_aux_1480@134:5>](<update_1153@136:1>:int,<f_bcopy_aux_1480@134:1>:int,<update_1153@136:2>:int)|- P[<update_1153@136:2>](
      <update_1153@136:1>:int,<update_1153@136:2>:int)
      
      P[<bcopy_aux_1152@113:3>](<f_bcopy_aux_1480@134:1>:int,<f_bcopy_aux_1480@134:0>:int),
      P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<f_bcopy_aux_1480@134:1>:int,<f_bcopy_aux_1480@134:0>:int,<f_bcopy_aux_1480@134:5>:int),
      (<f_bcopy_aux_1480@134:0> < <f_bcopy_aux_1480@134:1>)
      |- P[<f_bcopy_aux_1480@134:5>](<f_bcopy_aux_1480@134:0>:int,<f_bcopy_aux_1480@134:1>:int,
                                     <f_bcopy_aux_1480@134:5>:int)
      
      P[<main_1042@110:1>](<bcopy_aux_1152@113:0>:int,<main_1042@110:1>:int),
      P[<<make_array_1030@118:2>@130:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,<<<bcopy_aux_1152@113:1>@116:1>@132:0>:int),
      (<bcopy_aux_1152@113:0> <= <main_1042@110:1>)
      |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                   <<bcopy_aux_1152@113:1>@116:0>:int,
                                                   <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
      
      P[<make_array_1030@118:1>](<make_array_1030@118:0>:int,<make_array_1030@118:1>:int),
      P[<<k_make_array_u_1188@121:2>@128:0>](<make_array_1030@118:1>:int,<make_array_1030@118:0>:int,<<make_array_1030@118:2>@130:0>:int),
      (0 <= <make_array_1030@118:1>)
      |- P[<<make_array_1030@118:2>@130:0>](<make_array_1030@118:0>:int,
                                            <make_array_1030@118:1>:int,
                                            <<make_array_1030@118:2>@130:0>:int)
      
      P[<k_make_array_u_1188@121:3>](<k_make_array_u_1188@121:0>:int,<k_make_array_u_1188@121:1>:int,true:bool),
      P[<<k_make_array_u_1199@124:2>@126:0>](<k_make_array_u_1188@121:0>:int,<k_make_array_u_1188@121:1>:int,<<k_make_array_u_1188@121:2>@128:0>:int)|- P[<<k_make_array_u_1188@121:2>@128:0>](
      <k_make_array_u_1188@121:0>:int,<k_make_array_u_1188@121:1>:int,
      <<k_make_array_u_1188@121:2>@128:0>:int)
      
      P[<k_make_array_u_1199@124:3>](<k_make_array_u_1199@124:0>:int,<k_make_array_u_1199@124:1>:int,<k_make_array_u_1199@124:3>:unit),
      (<<k_make_array_u_1199@124:2>@126:0> = 0)
      |- P[<<k_make_array_u_1199@124:2>@126:0>](<k_make_array_u_1199@124:0>:int,
                                                <k_make_array_u_1199@124:1>:int,
                                                <<k_make_array_u_1199@124:2>@126:0>:int)
      
      P[<k_make_array_u_1188@121:3>](<k_make_array_u_1199@124:0>:int,<k_make_array_u_1199@124:1>:int,true:bool)|- P[<k_make_array_u_1199@124:3>](
      <k_make_array_u_1199@124:0>:int,<k_make_array_u_1199@124:1>:int,
      <k_make_array_u_1199@124:3>:unit)
      
      P[<make_array_1030@118:1>](<k_make_array_u_1188@121:1>:int,<k_make_array_u_1188@121:0>:int),
      ((0 <= <k_make_array_u_1188@121:0>) &&
       (<k_make_array_u_1188@121:3> = (<k_make_array_u_1188@121:0> < <k_make_array_u_1188@121:1>)))
      |- P[<k_make_array_u_1188@121:3>](<k_make_array_u_1188@121:0>:int,
                                        <k_make_array_u_1188@121:1>:int,
                                        <k_make_array_u_1188@121:3>:bool)
      
      P[<main_1042@110:1>](<make_array_1030@118:0>:int,<main_1042@110:1>:int),
      P[<<bcopy_aux_1152@113:1>@116:0>](<make_array_1030@118:0>:int,<make_array_1030@118:1>:int),
      (<make_array_1030@118:0> <= <main_1042@110:1>)
      |- P[<make_array_1030@118:1>](<make_array_1030@118:0>:int,<make_array_1030@118:1>:int)
      
      P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
      (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
      |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                           <<bcopy_aux_1152@113:1>@116:0>:int)
      
      P[<main_1042@110:1>](<bcopy_aux_1152@113:0>:int,<main_1042@110:1>:int),
      ((<bcopy_aux_1152@113:3> = 0) && (<bcopy_aux_1152@113:0> <= <main_1042@110:1>))
      |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
      
      P[<f_1483@108:1>](<main_1042@110:0>:int,<main_1042@110:1>:int)|- P[<main_1042@110:1>](
      <main_1042@110:0>:int,<main_1042@110:1>:int)
      
      P[<f_1482@105:0>](<f_1483@108:0>:int)|- P[<f_1483@108:1>](<f_1483@108:0>:int,
                                                                <f_1483@108:1>:int)
      
      |- P[<f_1482@105:0>](<f_1482@105:0>:int)
    call trees:
      <main_1478@102>
        <f_1482@105>
          <f_1483@108>
            <main_1042@110>
              <bcopy_aux_1152@113>
              </<bcopy_aux_1152@113:1>@116>
              <make_array_1030@118>
                <k_make_array_u_1188@121>
                  <k_make_array_u_1199@124>
                  </<k_make_array_u_1199@124:2>@126>
                </<k_make_array_u_1188@121:2>@128>
              </<make_array_1030@118:2>@130>
              <<<bcopy_aux_1152@113:1>@116:1>@132>
                <f_bcopy_aux_1480@134>
                  <update_1153@136>
                  </<update_1153@136:0>@138>
                </<f_bcopy_aux_1480@134:2>@140>
              </<bcopy_aux_1152@113:2>@142>
              <make_array_1030@144>
                <k_make_array_u_1188@147>
                  <fail_1485@150>
    inlined horn clauses:
      P[<fail_1485@150:0>](<fail_1485@150:0>:bool)|- bot
      
      P[<<bcopy_aux_1152@113:2>@142:0>](var268:int,<k_make_array_u_1188@147:0>:int),
      ((0 <= <k_make_array_u_1188@147:0>) && ((var268 < (1 + <k_make_array_u_1188@147:0>)) && <fail_1485@150:0>))
      |- P[<fail_1485@150:0>](<fail_1485@150:0>:bool)
      
      P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var269:int),
      P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
      P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
      P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int,var270:int),
      ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271))
      |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                           <<bcopy_aux_1152@113:2>@142:0>:int)
      
      P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
      ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
       ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
      |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                   <<bcopy_aux_1152@113:1>@116:0>:int,
                                                   <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
      
      P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
      (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
      |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                           <<bcopy_aux_1152@113:1>@116:0>:int)
      
       (<bcopy_aux_1152@113:3> = 0) |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,
                                                                 <bcopy_aux_1152@113:3>:int)
    begin ParamSubstInfer.infer(43051)[3]
      
    end ParamSubstInfer.infer(43051)[3] (0.153976 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(43053)[3]
      
    end RefTypeInfer.elim_coeffs(43053)[3] (0.001000 sec.)
    begin GenHcSolver.solve(43524)[3]
      Horn clauses:
        P[<fail_1485@150:0>](<fail_1485@150:0>:bool)|- bot
        
        P[<<bcopy_aux_1152@113:2>@142:0>](var268:int,<k_make_array_u_1188@147:0>:int),
        ((0 <= <k_make_array_u_1188@147:0>) && ((var268 < (1 + <k_make_array_u_1188@147:0>)) && <fail_1485@150:0>))
        |- P[<fail_1485@150:0>](<fail_1485@150:0>:bool)
        
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var269:int),
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int,var270:int),
        ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271))
        |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                             <<bcopy_aux_1152@113:2>@142:0>:int)
        
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
         ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
        |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                     <<bcopy_aux_1152@113:1>@116:0>:int,
                                                     <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
        
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
        |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                             <<bcopy_aux_1152@113:1>@116:0>:int)
        
         (<bcopy_aux_1152@113:3> = 0)
        |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int) = (<bcopy_aux_1152@113:3> = 0)
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int) =
        ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,<<<bcopy_aux_1152@113:1>@116:1>@132:0>:int) =
        ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
         ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
        P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:2>@142:0>:int) =
        ((<<bcopy_aux_1152@113:2>@142:0> = 0) && (0 < <bcopy_aux_1152@113:0>))
        P[<fail_1485@150:0>](<fail_1485@150:0>:bool) = false
      upper bounds:
        P[<fail_1485@150:0>](var273:bool) = true
      begin GenHcSolver.classify_pids(46152)[4]
        output:
          [<fail_1485@150:0>]
      end GenHcSolver.classify_pids(46152)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(46155)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(46156)[5]
          begin InterpProver.interpolate_fresh(46157)[6]
            begin InterpProver.interpolate_log(46158)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(46159)[8]
                begin InterpProver.interpolate_simplify(46160)[9]
                  begin InterpProver.interpolate_quick(46173)[10]
                    
                  end InterpProver.interpolate_quick(46173)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(46177)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(46177)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(46160)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(46159)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(46158)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(46157)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(46156)[5] (0.000000 sec.)
        output:
          P[<fail_1485@150:0>](<fail_1485@150:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(46155)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1152@113:2>@142:0>](var268:int,<k_make_array_u_1188@147:0>:int),
        ((var268 < (1 + <k_make_array_u_1188@147:0>)) && (0 <= <k_make_array_u_1188@147:0>)) |- bot
        
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var269:int),
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int,var270:int),
        ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271))
        |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                             <<bcopy_aux_1152@113:2>@142:0>:int)
        
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
         ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
        |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                     <<bcopy_aux_1152@113:1>@116:0>:int,
                                                     <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
        
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
        |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                             <<bcopy_aux_1152@113:1>@116:0>:int)
        
         (<bcopy_aux_1152@113:3> = 0)
        |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int) = (<bcopy_aux_1152@113:3> = 0)
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int) =
        ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,<<<bcopy_aux_1152@113:1>@116:1>@132:0>:int) =
        ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
         ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
        P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:2>@142:0>:int) =
        ((<<bcopy_aux_1152@113:2>@142:0> = 0) && (0 < <bcopy_aux_1152@113:0>))
      upper bounds:
        P[<<bcopy_aux_1152@113:2>@142:0>](var274:int,var275:int) = ((var274 >= (1 + var275)) || (0 > var275))
      begin GenHcSolver.classify_pids(49337)[4]
        output:
          [<<bcopy_aux_1152@113:2>@142:0>]
      end GenHcSolver.classify_pids(49337)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1152@113:2>@142:0> = 0) && (0 < <bcopy_aux_1152@113:0>))
      nub:(not
             ((<bcopy_aux_1152@113:0> >= (1 + <<bcopy_aux_1152@113:2>@142:0>)) || (0 > <<bcopy_aux_1152@113:2>@142:0>)))
      begin ApronInterface.convex_hull_interpolate(49340)[4]
        lb:((<<bcopy_aux_1152@113:2>@142:0> = 0) && (0 < <bcopy_aux_1152@113:0>))
        nub:(not
               ((<bcopy_aux_1152@113:0> >= (1 + <<bcopy_aux_1152@113:2>@142:0>)) ||
                (0 > <<bcopy_aux_1152@113:2>@142:0>)))
        lb':((<<bcopy_aux_1152@113:2>@142:0> = 0) && (0 < <bcopy_aux_1152@113:0>))
        nub':(not
                ((<bcopy_aux_1152@113:0> >= (1 + <<bcopy_aux_1152@113:2>@142:0>)) ||
                 (0 > <<bcopy_aux_1152@113:2>@142:0>)))
        begin InterpProver.interpolate(49341)[5]
          begin InterpProver.interpolate_fresh(49342)[6]
            begin InterpProver.interpolate_log(49343)[7]
              input1: ((<<bcopy_aux_1152@113:2>@142:0> = 0) && (0 < <bcopy_aux_1152@113:0>))
              input2: (not
                         ((<bcopy_aux_1152@113:0> >= (1 + <<bcopy_aux_1152@113:2>@142:0>)) ||
                          (0 > <<bcopy_aux_1152@113:2>@142:0>)))
              begin InterpProver.interpolate_check(49344)[8]
                begin InterpProver.interpolate_simplify(49345)[9]
                  begin InterpProver.interpolate_quick(49402)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(49411)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(49412)[12]
                        begin CsisatInterface.interpolate_csisat_log(49413)[13]
                          input1: (0 = v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0 & 1 <= v_sep_bcopy_aux_1152_sep_113_sep_0)
                          input2: (0 <= v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0 & (1 + v_sep_bcopy_aux_1152_sep_113_sep_0) <= (1 + v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0))
                          begin CsisatInterface.interpolate_csisat_raw(49414)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(49414)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1152_sep_113_sep_0 + 2*v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(49413)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1152_sep_113_sep_0 + 2*v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1152_sep_113_sep_0 + 2*v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(49412)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(49411)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(49402)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(49345)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(49344)[8] (0.002000 sec.)
              output: ((1 + <<bcopy_aux_1152@113:2>@142:0>) <= <bcopy_aux_1152@113:0>)
            end InterpProver.interpolate_log(49343)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(49342)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(49341)[5] (0.002000 sec.)
        output:
          P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:2>@142:0>:int) =
          ((1 + <<bcopy_aux_1152@113:2>@142:0>) <= <bcopy_aux_1152@113:0>)
      end ApronInterface.convex_hull_interpolate(49340)[4] (0.002000 sec.)
      Horn clauses:
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var269:int),
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int,var270:int),
        ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) &&
         (((1 + <<bcopy_aux_1152@113:2>@142:0>) > <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271)))
        |- bot
        
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
         ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
        |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                     <<bcopy_aux_1152@113:1>@116:0>:int,
                                                     <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
        
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
        |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                             <<bcopy_aux_1152@113:1>@116:0>:int)
        
         (<bcopy_aux_1152@113:3> = 0)
        |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int) = (<bcopy_aux_1152@113:3> = 0)
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int) =
        ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,<<<bcopy_aux_1152@113:1>@116:1>@132:0>:int) =
        ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
         ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
      upper bounds:
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var276:int,var277:int,var278:int) = true
      begin GenHcSolver.classify_pids(51884)[4]
        output:
          [<<<bcopy_aux_1152@113:1>@116:1>@132:0>]
      end GenHcSolver.classify_pids(51884)[4] (0.000000 sec.)
      lb:((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
          ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(51887)[4]
        lb:((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
            ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
        nub:false
        lb':((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
             ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
        nub':false
        begin InterpProver.interpolate(51888)[5]
          begin InterpProver.interpolate_fresh(51889)[6]
            begin InterpProver.interpolate_log(51890)[7]
              input1: ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
                       ((<<bcopy_aux_1152@113:1>@116:0> = 0) &&
                        (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
              input2: false
              begin InterpProver.interpolate_check(51891)[8]
                begin InterpProver.interpolate_simplify(51892)[9]
                  begin InterpProver.interpolate_quick(51947)[10]
                    
                  end InterpProver.interpolate_quick(51947)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(51892)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(51891)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(51890)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(51889)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(51888)[5] (0.000000 sec.)
        output:
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,<<<bcopy_aux_1152@113:1>@116:1>@132:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(51887)[4] (0.000999 sec.)
      Horn clauses:
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
        ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) &&
         (((1 + <<bcopy_aux_1152@113:2>@142:0>) > <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271)))
        |- bot
        
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
        |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                             <<bcopy_aux_1152@113:1>@116:0>:int)
        
         (<bcopy_aux_1152@113:3> = 0)
        |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int) = (<bcopy_aux_1152@113:3> = 0)
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int) =
        ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
      upper bounds:
        P[<<bcopy_aux_1152@113:1>@116:0>](var279:int,var280:int) = true
      begin GenHcSolver.classify_pids(53485)[4]
        output:
          [<<bcopy_aux_1152@113:1>@116:0>]
      end GenHcSolver.classify_pids(53485)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(53488)[4]
        lb:((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
        nub:false
        lb':((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
        nub':false
        begin InterpProver.interpolate(53489)[5]
          begin InterpProver.interpolate_fresh(53490)[6]
            begin InterpProver.interpolate_log(53491)[7]
              input1: ((<<bcopy_aux_1152@113:1>@116:0> = 0) &&
                       (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
              input2: false
              begin InterpProver.interpolate_check(53492)[8]
                begin InterpProver.interpolate_simplify(53493)[9]
                  begin InterpProver.interpolate_quick(53532)[10]
                    
                  end InterpProver.interpolate_quick(53532)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(53493)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(53492)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(53491)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(53490)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(53489)[5] (0.000000 sec.)
        output:
          P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int) = true
      end ApronInterface.convex_hull_interpolate(53488)[4] (0.000000 sec.)
      Horn clauses:
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
        ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) &&
         (((1 + <<bcopy_aux_1152@113:2>@142:0>) > <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271)))
        |- bot
        
         (<bcopy_aux_1152@113:3> = 0)
        |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int) = (<bcopy_aux_1152@113:3> = 0)
      begin BwHcSolver.solve(54842)[4]
        lower bounds:
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int) =
          (<bcopy_aux_1152@113:3> = 0)
        begin BwHcSolver.solve_preds(54896)[5]
          input:
            P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int) =
            (<bcopy_aux_1152@113:3> = 0)
            P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
            P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
            ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) &&
             (((1 + <<bcopy_aux_1152@113:2>@142:0>) > <bcopy_aux_1152@113:0>) &&
              (<<bcopy_aux_1152@113:2>@142:0> < var271))) |- bot
          finding a solution to P[<bcopy_aux_1152@113:3>](var281:int,var282:int)
          begin InterpProver.interpolate(55027)[6]
            begin InterpProver.interpolate_fresh(55028)[7]
              begin InterpProver.interpolate_log(55029)[8]
                input1: (var282 = 0)
                input2: ((0 < var283) && (((1 + var282) > var283) && (var282 < var281)))
                begin InterpProver.interpolate_check(55030)[9]
                  begin InterpProver.interpolate_simplify(55031)[10]
                    begin InterpProver.interpolate_quick(55116)[11]
                      begin CsisatInterface.interpolate_csisat_wrap(55125)[12]
                        begin CsisatInterface.interpolate_csisat_post_process(55126)[13]
                          begin CsisatInterface.interpolate_csisat_log(55127)[14]
                            input1: 0 = v_sep_var282
                            input2: (1 <= v_sep_var283 & (1 + v_sep_var282) <= v_sep_var281 & (1 + v_sep_var283) <= (1 + v_sep_var282))
                            begin CsisatInterface.interpolate_csisat_raw(55128)[15]
                              
                            end CsisatInterface.interpolate_csisat_raw(55128)[15] (0.000000 sec.)
                            output: 2*v_sep_var282 <= 0
                            
                          end CsisatInterface.interpolate_csisat_log(55127)[14] (0.000000 sec.)
                          after simplification: 2*v_sep_var282 <= 0
                          after dnf conversion: ((2*v_sep_var282 <= 0))
                          
                        end CsisatInterface.interpolate_csisat_post_process(55126)[13] (0.001000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_wrap(55125)[12] (0.001000 sec.)
                      
                    end InterpProver.interpolate_quick(55116)[11] (0.002000 sec.)
                    
                  end InterpProver.interpolate_simplify(55031)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_check(55030)[9] (0.002000 sec.)
                output: (var282 <= 0)
              end InterpProver.interpolate_log(55029)[8] (0.002000 sec.)
              
            end InterpProver.interpolate_fresh(55028)[7] (0.002000 sec.)
            
          end InterpProver.interpolate(55027)[6] (0.002000 sec.)
          solution:
            P[<bcopy_aux_1152@113:3>](var281:int,var282:int) = (var282 <= 0)
          finding a solution to P[<bcopy_aux_1152@113:3>](var284:int,var285:int)
          begin InterpProver.interpolate(55231)[6]
            begin InterpProver.interpolate_fresh(55232)[7]
              begin InterpProver.interpolate_log(55233)[8]
                input1: (var285 = 0)
                input2: ((var287 <= 0) && ((var287 < var286) && (((1 + var287) > var284) && (var285 < var284))))
                begin InterpProver.interpolate_check(55234)[9]
                  begin InterpProver.interpolate_simplify(55235)[10]
                    begin InterpProver.interpolate_quick(55370)[11]
                      begin CsisatInterface.interpolate_csisat_wrap(55379)[12]
                        begin CsisatInterface.interpolate_csisat_post_process(55380)[13]
                          begin CsisatInterface.interpolate_csisat_log(55381)[14]
                            input1: 0 = v_sep_var285
                            input2: (v_sep_var287 <= 0 & (1 + v_sep_var284) <= (1 + v_sep_var287) & (1 + v_sep_var285) <= v_sep_var284 & (1 + v_sep_var287) <= v_sep_var286)
                            begin CsisatInterface.interpolate_csisat_raw(55382)[15]
                              
                            end CsisatInterface.interpolate_csisat_raw(55382)[15] (0.000000 sec.)
                            output: -2*v_sep_var285 <= 0
                            
                          end CsisatInterface.interpolate_csisat_log(55381)[14] (0.000000 sec.)
                          after simplification: -2*v_sep_var285 <= 0
                          after dnf conversion: ((-2*v_sep_var285 <= 0))
                          
                        end CsisatInterface.interpolate_csisat_post_process(55380)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_wrap(55379)[12] (0.000000 sec.)
                      
                    end InterpProver.interpolate_quick(55370)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_simplify(55235)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_check(55234)[9] (0.002999 sec.)
                output: (0 <= var285)
              end InterpProver.interpolate_log(55233)[8] (0.002999 sec.)
              
            end InterpProver.interpolate_fresh(55232)[7] (0.002999 sec.)
            
          end InterpProver.interpolate(55231)[6] (0.002999 sec.)
          solution:
            P[<bcopy_aux_1152@113:3>](var284:int,var285:int) = (0 <= var285)
          
        end BwHcSolver.solve_preds(54896)[5] (0.005999 sec.)
        begin HcSolver.check_validity(55455)[5]
          input:
            P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
            P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
            ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) &&
             (((1 + <<bcopy_aux_1152@113:2>@142:0>) > <bcopy_aux_1152@113:0>) &&
              (<<bcopy_aux_1152@113:2>@142:0> < var271))) |- bot
            
             (<bcopy_aux_1152@113:3> = 0)
            |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
          checking substituted Horn clause:
             false |- bot
          checking substituted Horn clause:
             false |- bot
          
        end HcSolver.check_validity(55455)[5] (0.001000 sec.)
        solution:
          P[<bcopy_aux_1152@113:3>](var281:int,var282:int) = (var282 = 0)
      end BwHcSolver.solve(54842)[4] (0.007999 sec.)
      begin HcSolver.check_validity(55677)[4]
        input:
          P[<fail_1485@150:0>](<fail_1485@150:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@113:2>@142:0>](var268:int,<k_make_array_u_1188@147:0>:int),
          ((0 <= <k_make_array_u_1188@147:0>) && ((var268 < (1 + <k_make_array_u_1188@147:0>)) && <fail_1485@150:0>))
          |- P[<fail_1485@150:0>](<fail_1485@150:0>:bool)
          
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var269:int),
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int,var270:int),
          ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271))
          |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:2>@142:0>:int)
          
          P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
           ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
          |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                       <<bcopy_aux_1152@113:1>@116:0>:int,
                                                       <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
          
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
          |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:1>@116:0>:int)
          
           (<bcopy_aux_1152@113:3> = 0)
          |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(55677)[4] (0.003000 sec.)
      solution:
        P[<fail_1485@150:0>](<fail_1485@150:0>:bool) = false
        P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:2>@142:0>:int) =
        ((1 + <<bcopy_aux_1152@113:2>@142:0>) <= <bcopy_aux_1152@113:0>)
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,<<<bcopy_aux_1152@113:1>@116:1>@132:0>:int) =
        true
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int) = true
        P[<bcopy_aux_1152@113:3>](var281:int,var282:int) = (var282 = 0)
    end GenHcSolver.solve(43524)[3] (0.074989 sec.)
    begin GenHcSolver.solve(56305)[3]
      Horn clauses:
        P[<fail_1485@150:0>](<fail_1485@150:0>:bool)|- bot
        
        P[<<bcopy_aux_1152@113:2>@142:0>](var268:int,<k_make_array_u_1188@147:0>:int),
        ((0 <= <k_make_array_u_1188@147:0>) && ((var268 < (1 + <k_make_array_u_1188@147:0>)) && <fail_1485@150:0>))
        |- P[<fail_1485@150:0>](<fail_1485@150:0>:bool)
        
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var269:int),
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int,var270:int),
        ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271))
        |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                             <<bcopy_aux_1152@113:2>@142:0>:int)
        
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
         ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
        |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                     <<bcopy_aux_1152@113:1>@116:0>:int,
                                                     <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
        
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
        |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                             <<bcopy_aux_1152@113:1>@116:0>:int)
        
         (<bcopy_aux_1152@113:3> = 0)
        |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int) = (<bcopy_aux_1152@113:3> = 0)
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int) =
        ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,<<<bcopy_aux_1152@113:1>@116:1>@132:0>:int) =
        ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
         ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
        P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:2>@142:0>:int) =
        ((<<bcopy_aux_1152@113:2>@142:0> = 0) && (0 < <bcopy_aux_1152@113:0>))
        P[<fail_1485@150:0>](<fail_1485@150:0>:bool) = false
      upper bounds:
        P[<fail_1485@150:0>](var289:bool) = true
      begin GenHcSolver.classify_pids(58933)[4]
        output:
          [<fail_1485@150:0>]
      end GenHcSolver.classify_pids(58933)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(58936)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(58939)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(58939)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(58944)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(58944)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(58947)[5]
          begin InterpProver.interpolate_fresh(58948)[6]
            begin InterpProver.interpolate_log(58949)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(58950)[8]
                begin InterpProver.interpolate_simplify(58951)[9]
                  begin InterpProver.interpolate_quick(58966)[10]
                    
                  end InterpProver.interpolate_quick(58966)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(58970)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(58970)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(58951)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(58950)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(58949)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(58948)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(58947)[5] (0.001000 sec.)
        output:
          P[<fail_1485@150:0>](<fail_1485@150:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(58936)[4] (0.001000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1152@113:2>@142:0>](var268:int,<k_make_array_u_1188@147:0>:int),
        ((var268 < (1 + <k_make_array_u_1188@147:0>)) && (0 <= <k_make_array_u_1188@147:0>)) |- bot
        
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var269:int),
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int,var270:int),
        ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271))
        |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                             <<bcopy_aux_1152@113:2>@142:0>:int)
        
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
         ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
        |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                     <<bcopy_aux_1152@113:1>@116:0>:int,
                                                     <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
        
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
        |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                             <<bcopy_aux_1152@113:1>@116:0>:int)
        
         (<bcopy_aux_1152@113:3> = 0)
        |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int) = (<bcopy_aux_1152@113:3> = 0)
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int) =
        ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,<<<bcopy_aux_1152@113:1>@116:1>@132:0>:int) =
        ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
         ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
        P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:2>@142:0>:int) =
        ((<<bcopy_aux_1152@113:2>@142:0> = 0) && (0 < <bcopy_aux_1152@113:0>))
      upper bounds:
        P[<<bcopy_aux_1152@113:2>@142:0>](var290:int,var291:int) = ((var290 >= (1 + var291)) || (0 > var291))
      begin GenHcSolver.classify_pids(62137)[4]
        output:
          [<<bcopy_aux_1152@113:2>@142:0>]
      end GenHcSolver.classify_pids(62137)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1152@113:2>@142:0> = 0) && (0 < <bcopy_aux_1152@113:0>))
      nub:(not
             ((<bcopy_aux_1152@113:0> >= (1 + <<bcopy_aux_1152@113:2>@142:0>)) || (0 > <<bcopy_aux_1152@113:2>@142:0>)))
      begin ApronInterface.convex_hull_interpolate(62140)[4]
        lb:((<<bcopy_aux_1152@113:2>@142:0> = 0) && (0 < <bcopy_aux_1152@113:0>))
        nub:(not
               ((<bcopy_aux_1152@113:0> >= (1 + <<bcopy_aux_1152@113:2>@142:0>)) ||
                (0 > <<bcopy_aux_1152@113:2>@142:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(62150)[5]
          ts: ((<<bcopy_aux_1152@113:2>@142:0> = 0) && (0 < <bcopy_aux_1152@113:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(62150)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(62172)[5]
          ts: ((<bcopy_aux_1152@113:0> < (1 + <<bcopy_aux_1152@113:2>@142:0>)) && (0 <= <<bcopy_aux_1152@113:2>@142:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(62172)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1152@113:2>@142:0> = 0) && ((-1 + <bcopy_aux_1152@113:0>) >= 0))
        nub':(((<<bcopy_aux_1152@113:2>@142:0> + (-1 * <bcopy_aux_1152@113:0>)) >= 0) &&
              (<<bcopy_aux_1152@113:2>@142:0> >= 0))
        begin InterpProver.interpolate(62179)[5]
          begin InterpProver.interpolate_fresh(62180)[6]
            begin InterpProver.interpolate_log(62181)[7]
              input1: ((<<bcopy_aux_1152@113:2>@142:0> = 0) && ((-1 + <bcopy_aux_1152@113:0>) >= 0))
              input2: (((<<bcopy_aux_1152@113:2>@142:0> + (-1 * <bcopy_aux_1152@113:0>)) >= 0) &&
                       (<<bcopy_aux_1152@113:2>@142:0> >= 0))
              begin InterpProver.interpolate_check(62182)[8]
                begin InterpProver.interpolate_simplify(62183)[9]
                  begin InterpProver.interpolate_quick(62240)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(62249)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(62250)[12]
                        begin CsisatInterface.interpolate_csisat_log(62251)[13]
                          input1: (0 = v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0 & 1 <= v_sep_bcopy_aux_1152_sep_113_sep_0)
                          input2: (0 <= v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0 & v_sep_bcopy_aux_1152_sep_113_sep_0 <= v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(62252)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(62252)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1152_sep_113_sep_0 + 2*v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(62251)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1152_sep_113_sep_0 + 2*v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1152_sep_113_sep_0 + 2*v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(62250)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(62249)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(62240)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(62183)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(62182)[8] (0.002000 sec.)
              output: ((1 + <<bcopy_aux_1152@113:2>@142:0>) <= <bcopy_aux_1152@113:0>)
            end InterpProver.interpolate_log(62181)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(62180)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(62179)[5] (0.002000 sec.)
        output:
          P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:2>@142:0>:int) =
          ((1 + <<bcopy_aux_1152@113:2>@142:0>) <= <bcopy_aux_1152@113:0>)
      end ApronInterface.convex_hull_interpolate(62140)[4] (0.002000 sec.)
      Horn clauses:
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var269:int),
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int,var270:int),
        ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) &&
         (((1 + <<bcopy_aux_1152@113:2>@142:0>) > <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271)))
        |- bot
        
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
         ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
        |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                     <<bcopy_aux_1152@113:1>@116:0>:int,
                                                     <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
        
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
        |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                             <<bcopy_aux_1152@113:1>@116:0>:int)
        
         (<bcopy_aux_1152@113:3> = 0)
        |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int) = (<bcopy_aux_1152@113:3> = 0)
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int) =
        ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,<<<bcopy_aux_1152@113:1>@116:1>@132:0>:int) =
        ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
         ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
      upper bounds:
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var292:int,var293:int,var294:int) = true
      begin GenHcSolver.classify_pids(64720)[4]
        output:
          [<<<bcopy_aux_1152@113:1>@116:1>@132:0>]
      end GenHcSolver.classify_pids(64720)[4] (0.000000 sec.)
      lb:((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
          ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(64723)[4]
        lb:((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
            ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(64743)[5]
          ts: ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
               ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(64743)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(64752)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(64752)[5] (0.000000 sec.)
        lb':((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
             ((<<bcopy_aux_1152@113:1>@116:0> = 0) && ((-1 + <bcopy_aux_1152@113:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(64755)[5]
          begin InterpProver.interpolate_fresh(64756)[6]
            begin InterpProver.interpolate_log(64757)[7]
              input1: ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
                       ((<<bcopy_aux_1152@113:1>@116:0> = 0) && ((-1 + <bcopy_aux_1152@113:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(64758)[8]
                begin InterpProver.interpolate_simplify(64759)[9]
                  begin InterpProver.interpolate_quick(64817)[10]
                    
                  end InterpProver.interpolate_quick(64817)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(64759)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(64758)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(64757)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(64756)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(64755)[5] (0.001000 sec.)
        output:
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,<<<bcopy_aux_1152@113:1>@116:1>@132:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(64723)[4] (0.002000 sec.)
      Horn clauses:
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
        ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) &&
         (((1 + <<bcopy_aux_1152@113:2>@142:0>) > <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271)))
        |- bot
        
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
        |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                             <<bcopy_aux_1152@113:1>@116:0>:int)
        
         (<bcopy_aux_1152@113:3> = 0)
        |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int) = (<bcopy_aux_1152@113:3> = 0)
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int) =
        ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
      upper bounds:
        P[<<bcopy_aux_1152@113:1>@116:0>](var295:int,var296:int) = true
      begin GenHcSolver.classify_pids(66357)[4]
        output:
          [<<bcopy_aux_1152@113:1>@116:0>]
      end GenHcSolver.classify_pids(66357)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(66360)[4]
        lb:((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(66372)[5]
          ts: ((<<bcopy_aux_1152@113:1>@116:0> = 0) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(66372)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(66380)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(66380)[5] (0.000999 sec.)
        lb':((<<bcopy_aux_1152@113:1>@116:0> = 0) && ((-1 + <bcopy_aux_1152@113:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(66383)[5]
          begin InterpProver.interpolate_fresh(66384)[6]
            begin InterpProver.interpolate_log(66385)[7]
              input1: ((<<bcopy_aux_1152@113:1>@116:0> = 0) && ((-1 + <bcopy_aux_1152@113:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(66386)[8]
                begin InterpProver.interpolate_simplify(66387)[9]
                  begin InterpProver.interpolate_quick(66427)[10]
                    
                  end InterpProver.interpolate_quick(66427)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(66387)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(66386)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(66385)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(66384)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(66383)[5] (0.000000 sec.)
        output:
          P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int) = true
      end ApronInterface.convex_hull_interpolate(66360)[4] (0.000999 sec.)
      Horn clauses:
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
        P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
        ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) &&
         (((1 + <<bcopy_aux_1152@113:2>@142:0>) > <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271)))
        |- bot
        
         (<bcopy_aux_1152@113:3> = 0)
        |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
      lower bounds:
        P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int) = (<bcopy_aux_1152@113:3> = 0)
      begin BwHcSolver.solve(67739)[4]
        lower bounds:
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int) =
          (<bcopy_aux_1152@113:3> = 0)
        begin BwHcSolver.solve_preds(67793)[5]
          input:
            P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int) =
            (<bcopy_aux_1152@113:3> = 0)
            P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
            P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
            ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) &&
             (((1 + <<bcopy_aux_1152@113:2>@142:0>) > <bcopy_aux_1152@113:0>) &&
              (<<bcopy_aux_1152@113:2>@142:0> < var271))) |- bot
          finding a solution to P[<bcopy_aux_1152@113:3>](var297:int,var298:int)
          begin InterpProver.interpolate(67924)[6]
            begin InterpProver.interpolate_fresh(67925)[7]
              begin InterpProver.interpolate_log(67926)[8]
                input1: (var298 = 0)
                input2: ((0 < var299) && (((1 + var298) > var299) && (var298 < var297)))
                begin InterpProver.interpolate_check(67927)[9]
                  begin InterpProver.interpolate_simplify(67928)[10]
                    begin InterpProver.interpolate_quick(68013)[11]
                      begin CsisatInterface.interpolate_csisat_wrap(68022)[12]
                        begin CsisatInterface.interpolate_csisat_post_process(68023)[13]
                          begin CsisatInterface.interpolate_csisat_log(68024)[14]
                            input1: 0 = v_sep_var298
                            input2: (1 <= v_sep_var299 & (1 + v_sep_var298) <= v_sep_var297 & (1 + v_sep_var299) <= (1 + v_sep_var298))
                            begin CsisatInterface.interpolate_csisat_raw(68025)[15]
                              
                            end CsisatInterface.interpolate_csisat_raw(68025)[15] (0.000000 sec.)
                            output: 2*v_sep_var298 <= 0
                            
                          end CsisatInterface.interpolate_csisat_log(68024)[14] (0.000000 sec.)
                          after simplification: 2*v_sep_var298 <= 0
                          after dnf conversion: ((2*v_sep_var298 <= 0))
                          
                        end CsisatInterface.interpolate_csisat_post_process(68023)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_wrap(68022)[12] (0.000000 sec.)
                      
                    end InterpProver.interpolate_quick(68013)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_simplify(67928)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_check(67927)[9] (0.001000 sec.)
                output: (var298 <= 0)
              end InterpProver.interpolate_log(67926)[8] (0.001000 sec.)
              
            end InterpProver.interpolate_fresh(67925)[7] (0.001000 sec.)
            
          end InterpProver.interpolate(67924)[6] (0.001000 sec.)
          solution:
            P[<bcopy_aux_1152@113:3>](var297:int,var298:int) = (var298 <= 0)
          finding a solution to P[<bcopy_aux_1152@113:3>](var300:int,var301:int)
          begin InterpProver.interpolate(68128)[6]
            begin InterpProver.interpolate_fresh(68129)[7]
              begin InterpProver.interpolate_log(68130)[8]
                input1: (var301 = 0)
                input2: ((var303 <= 0) && ((var303 < var302) && (((1 + var303) > var300) && (var301 < var300))))
                begin InterpProver.interpolate_check(68131)[9]
                  begin InterpProver.interpolate_simplify(68132)[10]
                    begin InterpProver.interpolate_quick(68267)[11]
                      begin CsisatInterface.interpolate_csisat_wrap(68276)[12]
                        begin CsisatInterface.interpolate_csisat_post_process(68277)[13]
                          begin CsisatInterface.interpolate_csisat_log(68278)[14]
                            input1: 0 = v_sep_var301
                            input2: (v_sep_var303 <= 0 & (1 + v_sep_var300) <= (1 + v_sep_var303) & (1 + v_sep_var301) <= v_sep_var300 & (1 + v_sep_var303) <= v_sep_var302)
                            begin CsisatInterface.interpolate_csisat_raw(68279)[15]
                              
                            end CsisatInterface.interpolate_csisat_raw(68279)[15] (0.000000 sec.)
                            output: -2*v_sep_var301 <= 0
                            
                          end CsisatInterface.interpolate_csisat_log(68278)[14] (0.000000 sec.)
                          after simplification: -2*v_sep_var301 <= 0
                          after dnf conversion: ((-2*v_sep_var301 <= 0))
                          
                        end CsisatInterface.interpolate_csisat_post_process(68277)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_wrap(68276)[12] (0.000000 sec.)
                      
                    end InterpProver.interpolate_quick(68267)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_simplify(68132)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_check(68131)[9] (0.001000 sec.)
                output: (0 <= var301)
              end InterpProver.interpolate_log(68130)[8] (0.001000 sec.)
              
            end InterpProver.interpolate_fresh(68129)[7] (0.001000 sec.)
            
          end InterpProver.interpolate(68128)[6] (0.001000 sec.)
          solution:
            P[<bcopy_aux_1152@113:3>](var300:int,var301:int) = (0 <= var301)
          
        end BwHcSolver.solve_preds(67793)[5] (0.003000 sec.)
        begin HcSolver.check_validity(68352)[5]
          input:
            P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
            P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
            ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) &&
             (((1 + <<bcopy_aux_1152@113:2>@142:0>) > <bcopy_aux_1152@113:0>) &&
              (<<bcopy_aux_1152@113:2>@142:0> < var271))) |- bot
            
             (<bcopy_aux_1152@113:3> = 0)
            |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
          checking substituted Horn clause:
             false |- bot
          checking substituted Horn clause:
             false |- bot
          
        end HcSolver.check_validity(68352)[5] (0.000000 sec.)
        solution:
          P[<bcopy_aux_1152@113:3>](var297:int,var298:int) = (var298 = 0)
      end BwHcSolver.solve(67739)[4] (0.004000 sec.)
      begin HcSolver.check_validity(68574)[4]
        input:
          P[<fail_1485@150:0>](<fail_1485@150:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@113:2>@142:0>](var268:int,<k_make_array_u_1188@147:0>:int),
          ((0 <= <k_make_array_u_1188@147:0>) && ((var268 < (1 + <k_make_array_u_1188@147:0>)) && <fail_1485@150:0>))
          |- P[<fail_1485@150:0>](<fail_1485@150:0>:bool)
          
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var269:int),
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int,var270:int),
          ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271))
          |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:2>@142:0>:int)
          
          P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
           ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
          |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                       <<bcopy_aux_1152@113:1>@116:0>:int,
                                                       <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
          
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
          |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:1>@116:0>:int)
          
           (<bcopy_aux_1152@113:3> = 0)
          |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(68574)[4] (0.003999 sec.)
      solution:
        P[<fail_1485@150:0>](<fail_1485@150:0>:bool) = false
        P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:2>@142:0>:int) =
        ((1 + <<bcopy_aux_1152@113:2>@142:0>) <= <bcopy_aux_1152@113:0>)
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,<<<bcopy_aux_1152@113:1>@116:1>@132:0>:int) =
        true
        P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int) = true
        P[<bcopy_aux_1152@113:3>](var297:int,var298:int) = (var298 = 0)
    end GenHcSolver.solve(56305)[3] (0.075988 sec.)
    begin YhornInterface.solve(69202)[3]
      begin HcSolver.solve_ub(69203)[4]
        encoded:
          P[<fail_1485@150:0>](<fail_1485@150:0>:int)|- bot
          
          P[<<bcopy_aux_1152@113:2>@142:0>](var268:int,<k_make_array_u_1188@147:0>:int),
          ((0 <= <k_make_array_u_1188@147:0>) &&
           ((var268 < (1 + <k_make_array_u_1188@147:0>)) && (<fail_1485@150:0> = 1)))
          |- P[<fail_1485@150:0>](<fail_1485@150:0>:int)
          
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var269:int),
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int,var270:int),
          ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271))
          |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:2>@142:0>:int)
          
          P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
           ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
          |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                       <<bcopy_aux_1152@113:1>@116:0>:int,
                                                       <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
          
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
          |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:1>@116:0>:int)
          
           (<bcopy_aux_1152@113:3> = 0)
          |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
        input to Yhorn:
          P[<fail_1485@150:0>](<fail_1485@150:0>:int)|- bot
          
          P[<<bcopy_aux_1152@113:2>@142:0>](var268:int,<k_make_array_u_1188@147:0>:int),
          ((var268 < (1 + <k_make_array_u_1188@147:0>)) &&
           ((0 <= <k_make_array_u_1188@147:0>) && (<fail_1485@150:0> = 1)))
          |- P[<fail_1485@150:0>](<fail_1485@150:0>:int)
          
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var269:int),
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int,var270:int),
          ((<<bcopy_aux_1152@113:2>@142:0> < var271) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>))
          |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:2>@142:0>:int)
          
          P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) &&
           ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0)))
          |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                       <<bcopy_aux_1152@113:1>@116:0>:int,
                                                       <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
          
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
          |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:1>@116:0>:int)
          
           (<bcopy_aux_1152@113:3> = 0)
          |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1485_sep_150_sep_0($269)) -> 1=0.
(($269-1=0) & (-$270<=0) & (-$270+$271-1<0)) & (v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0($271,$270)) -> v_sep_fail_1485_sep_150_sep_0($269).
(($272-$273<0) & ($274-$275<0)) & (v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0($275,$274,$276)) & (v_sep_bcopy_aux_1152_sep_113_sep_3($275,$274)) & (v_sep_bcopy_aux_1152_sep_113_sep_3($273,$272)) & (v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0($273,$272,$277)) -> v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0($273,$274).
(($278=0) & (-$272<=0) & ($272-$273<0)) & (v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0($273,$272)) -> v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0($273,$272,$278).
($272-$273<0) & (v_sep_bcopy_aux_1152_sep_113_sep_3($273,$272)) -> v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0($273,$272).
$279=0 -> v_sep_bcopy_aux_1152_sep_113_sep_3($273,$279).


v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
.........Extend [18]0.85187
Reconstrcut: 4

v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
...Extend [18]0.85387
Reconstrcut: 7

v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
.......Split conj [18] 0.856869
(Reconstrcut: 7 **)
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
.........
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
...
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
.......
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
.........
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0: (X) & (X)
v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0: X
v_sep_bcopy_aux_1152_sep_113_sep_3: X
v_sep_fail_1485_sep_150_sep_0: X
..........(0=0) & (v_sep_fail_1485_sep_150_sep_0($269)) -> 1=0.
(($269-1=0) & (-$270<=0) & (-$270+$271-1<0)) & (v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0($271,$270)) -> v_sep_fail_1485_sep_150_sep_0($269).
(($272-$273<0) & ($274-$275<0)) & (v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0($275,$274,$276)) & (v_sep_bcopy_aux_1152_sep_113_sep_3($275,$274)) & (v_sep_bcopy_aux_1152_sep_113_sep_3($273,$272)) & (v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0($273,$272,$277)) -> v_sep_bcopy_aux_1152_sep_113_sep_2_sep_142_sep_0($273,$274).
(($278=0) & (-$272<=0) & ($272-$273<0)) & (v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0($273,$272)) -> v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_1_sep_132_sep_0($273,$272,$278).
($272-$273<0) & (v_sep_bcopy_aux_1152_sep_113_sep_3($273,$272)) -> v_sep_bcopy_aux_1152_sep_113_sep_1_sep_116_sep_0($273,$272).
$279=0 -> v_sep_bcopy_aux_1152_sep_113_sep_3($273,$279).

        solution:
          P[<<bcopy_aux_1152@113:1>@116:0>]($300:int,$302:int) = ($302 <= 0)
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>]($288:int,$290:int,$292:int) =
          ((2 <= ($290 + (2 * $288))) && ($290 <= 0))
          P[<<bcopy_aux_1152@113:2>@142:0>]($283:int,$285:int) = ((1 + $285) <= $283)
          P[<bcopy_aux_1152@113:3>]($295:int,$297:int) = ($297 <= 0)
          P[<fail_1485@150:0>]($280:bool) = false
        
      end HcSolver.solve_ub(69203)[4] (0.030995 sec.)
      begin HcSolver.check_validity(69510)[4]
        input:
          P[<fail_1485@150:0>](<fail_1485@150:0>:bool)|- bot
          
          P[<<bcopy_aux_1152@113:2>@142:0>](var268:int,<k_make_array_u_1188@147:0>:int),
          ((0 <= <k_make_array_u_1188@147:0>) && ((var268 < (1 + <k_make_array_u_1188@147:0>)) && <fail_1485@150:0>))
          |- P[<fail_1485@150:0>](<fail_1485@150:0>:bool)
          
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int,var269:int),
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          P[<bcopy_aux_1152@113:3>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int),
          P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](var271:int,<<bcopy_aux_1152@113:2>@142:0>:int,var270:int),
          ((<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>) && (<<bcopy_aux_1152@113:2>@142:0> < var271))
          |- P[<<bcopy_aux_1152@113:2>@142:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:2>@142:0>:int)
          
          P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          ((<<<bcopy_aux_1152@113:1>@116:1>@132:0> = 0) &&
           ((0 <= <<bcopy_aux_1152@113:1>@116:0>) && (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)))
          |- P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>](<bcopy_aux_1152@113:0>:int,
                                                       <<bcopy_aux_1152@113:1>@116:0>:int,
                                                       <<<bcopy_aux_1152@113:1>@116:1>@132:0>:int)
          
          P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<<bcopy_aux_1152@113:1>@116:0>:int),
          (<<bcopy_aux_1152@113:1>@116:0> < <bcopy_aux_1152@113:0>)
          |- P[<<bcopy_aux_1152@113:1>@116:0>](<bcopy_aux_1152@113:0>:int,
                                               <<bcopy_aux_1152@113:1>@116:0>:int)
          
           (<bcopy_aux_1152@113:3> = 0)
          |- P[<bcopy_aux_1152@113:3>](<bcopy_aux_1152@113:0>:int,<bcopy_aux_1152@113:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(69510)[4] (0.015998 sec.)
      solution:
        P[<<bcopy_aux_1152@113:1>@116:0>]($300:int,$302:int) = ($302 <= 0)
        P[<<<bcopy_aux_1152@113:1>@116:1>@132:0>]($288:int,$290:int,$292:int) =
        ((2 <= ($290 + (2 * $288))) && ($290 <= 0))
        P[<<bcopy_aux_1152@113:2>@142:0>]($283:int,$285:int) = ((1 + $285) <= $283)
        P[<bcopy_aux_1152@113:3>]($295:int,$297:int) = ($297 <= 0)
        P[<fail_1485@150:0>]($280:bool) = false
    end YhornInterface.solve(69202)[3] (0.047993 sec.)
    
  end RefTypeInfer.infer_etrs(39513)[2] (0.374943 sec.)
  refinement types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:int -> (v3:int -> X) -> X) ->
                    (v6:{v6:int | ((1 + v6) <= v1)} -> (v7:int -> X) -> X) ->
                    v10:{v10:int | (v10 = 0)} -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1199: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1480: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1153: (v1:int -> (v2:int -> X) -> X) -> v5:int -> v6:int -> (v7:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1188: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1485: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1484: var331:int -> var330:int -> var329:unit -> X
    f_bcopy_aux_1481: var346:int ->
                      var345:int ->
                      var344:int ->
                      (var343:int -> (var342:int -> X) -> X) ->
                      (var339:unit -> X) -> (var337:int -> (var336:int -> X) -> X) -> var333:unit -> X
    f_update_1479: var352:int -> var351:int -> (var350:unit -> X) -> var348:int -> X
  abstraction types:
    main_1478: X
    f_1482: v1:int -> X
    f_1483: v1:int -> v2:int -> X
    main_1042: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1152: v1:int ->
                    (v2:int -> (v3:int -> X) -> X) ->
                    (v6:int[v6 -> ((1 + v6) <= v1)] -> (v7:int -> X) -> X) ->
                    v10:int[v10 -> (v10 = 0)] -> (v11:unit -> X) -> X
    make_array_1030: var353:int -> var354:int -> (var355:int -> X) -> X
    k_make_array_u_1188: var358:int -> var359:int -> (var360:int -> X) -> var362:bool -> X
    k_make_array_u_1199: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1480: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1153: (v1:int -> (v2:int -> X) -> X) -> v5:int -> v6:int -> (v7:unit -> X) -> X
    fail_1485: v1:bool -> (v2:unit -> X) -> X
    f_1484: var331:int -> var330:int -> var329:unit -> X
    f_bcopy_aux_1481: var346:int ->
                      var345:int ->
                      var344:int ->
                      (var343:int -> (var342:int -> X) -> X) ->
                      (var339:unit -> X) -> (var337:int -> (var336:int -> X) -> X) -> var333:unit -> X
    f_update_1479: var352:int -> var351:int -> (var350:unit -> X) -> var348:int -> X
  
end AbsTypeInfer.refine(39512)[1] (0.381941 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1478
  main_1478 -> (rand_int f_1482)
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (i_1041 >= m_1038) -> (k_bcopy_aux_1292 ())
  bcopy_aux_1152 m_1038 src_1039 des_1040 i_1041 k_bcopy_aux_1292 when (
      not (i_1041 >= m_1038)) -> (src_1039 i_1041 (f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039))
  f_1482 x_1436 -> (rand_int (f_1483 x_1436))
  f_1483 x_1436 x_1449 -> (main_1042 x_1436 x_1449 (f_1484 x_1436 x_1449))
  f_1484 x_1436 x_1449 x_1433 -> end
  f_bcopy_aux_1480 i_1041 m_1038 des_1040 k_bcopy_aux_1292 src_1039 x_1323 ->
      (update_1153 des_1040 i_1041 x_1323 (f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039))
  f_bcopy_aux_1481 i_1041 m_1038 x_1323 des_1040 k_bcopy_aux_1292 src_1039 x_1295 ->
      (bcopy_aux_1152 m_1038 src_1039 des_1040 (i_1041 + 1) k_bcopy_aux_1292)
  f_update_1479 i_1035 x_1036 k_update_1232 x_1235 -> (k_update_1232 ())
  fail_1485 b k -> {fail} => (k ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when b_1200 ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 ())
  k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 b_1200 when (not b_1200) ->
      (fail_1485 true (k_make_array_u_1199 i_1032 n_1031 k_make_array_1182))
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1182 x_1185 -> (k_make_array_1182 0)
  main_1042 n_1043 m_1044 k_main_1369 when (n_1043 <= m_1044) ->
      (bcopy_aux_1152 n_1043 (make_array_1030 n_1043) (make_array_1030 m_1044) 0 k_main_1369)
  main_1042 n_1043 m_1044 k_main_1369 when (not (n_1043 <= m_1044)) -> (k_main_1369 ())
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (0 <= i_1032) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1182 when (not (0 <= i_1032)) ->
      (k_make_array_u_1188 i_1032 n_1031 k_make_array_1182 false)
  update_1153 des_1034 i_1035 x_1036 k_update_1232 -> (des_1034 i_1035 (f_update_1479 i_1035 x_1036 k_update_1232))
Types:
  main_1478 : X
  bcopy_aux_1152 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                    (x_9:int[x_1 >= x_9 + 1; x_9 >= 0] -> (int -> X) -> X) ->
                    x_14:int[x_14 = 0; x_14 >= 0] -> (unit -> X) -> X)
  fail_1485 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  bcopy_aux: (x_1:int ->
                  (({x_8:int | x_8 >= 0 && x_1 >= x_8 + 1} -> int) ->
                       (({x_6:int | x_6 >= 0 && x_1 >= x_6 + 1} -> int) -> ({x_4:int | x_4 >= 0} -> unit))))

cycles: 4
total: 1.598 sec
  abst: 0.046 sec
  mc: 0.051 sec
  refine: 1.045 sec
    exparam: 0.374 sec
