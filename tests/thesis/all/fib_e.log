MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi fib_e.ml

parsed::
 let rec fib_1030 n_1031 =
   if n_1031 >= 0 && n_1031 <= 0 then
     1
   else
     if n_1031 >= 1 && n_1031 <= 1 then
       1
     else
       fib_1030 (n_1031 - 1) + fib_1030 (n_1031 - 2) 
 in
 let main_1032 = if fib_1030 3 >= 4 then
                   ()
                 else
                   {fail} () 
 in
   ()

set_target::
 let rec fib_1030 n_1031 =
   if n_1031 >= 0 && n_1031 <= 0 then
     1
   else
     if n_1031 >= 1 && n_1031 <= 1 then
       1
     else
       fib_1030 (n_1031 - 1) + fib_1030 (n_1031 - 2) 
 in
 let main_1032 = if fib_1030 3 >= 4 then
                   ()
                 else
                   {fail} () 
 in
   main_1032

CPS::
 let rec fib_1030 (n_1031:int) (k_fib_1081:(int -> X)) =
   let k_fib_1084 (b_1121:bool) =
     if b_1121 then
       k_fib_1081 1
     else
       let k_fib_1088 (b_1117:bool) =
         if b_1117 then
           k_fib_1081 1
         else
           fib_1030 (n_1031 - 1) (fun x_1092 -> fib_1030 (n_1031 - 2) (fun x_1093 -> k_fib_1081 (x_1092 + x_1093))) 
       in
         if n_1031 >= 1 then
           k_fib_1088 (n_1031 <= 1)
         else
           k_fib_1088 false 
   in
     if n_1031 >= 0 then
       k_fib_1084 (n_1031 <= 0)
     else
       k_fib_1084 false 
 in
 let k_main_1148 (x_1124:unit) = end 
 in
   fib_1030 3 (fun x_1127 -> (if x_1127 >= 4 then
                                k_main_1148 ()
                              else
                                {|fail|} () k_main_1148))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1151
  main_1151 -> (fib_1030 3 f_1154)
  br_k_fib_1155 b_1156 n_1031 k_fib_1081 b_1121 when b_1156 -> (k_fib_1088 b_1121 n_1031 k_fib_1081 (n_1031 <= 1))
  br_k_fib_1155 b_1156 n_1031 k_fib_1081 b_1121 when (not b_1156) -> (k_fib_1088 b_1121 n_1031 k_fib_1081 false)
  f_1154 x_1127 when (x_1127 >= 4) -> (k_main_1148 ())
  f_1154 x_1127 when (not (x_1127 >= 4)) -> (fail_1157 true k_main_1148)
  f_k_fib_1152 b_1117 b_1121 n_1031 k_fib_1081 x_1092 ->
      (fib_1030 (n_1031 - 2) (f_k_fib_1153 b_1117 b_1121 n_1031 x_1092 k_fib_1081))
  f_k_fib_1153 b_1117 b_1121 n_1031 x_1092 k_fib_1081 x_1093 -> (k_fib_1081 (x_1092 + x_1093))
  fail_1157 b k -> {fail} => (k ())
  fib_1030 n_1031 k_fib_1081 when (n_1031 >= 0) -> (k_fib_1084 n_1031 k_fib_1081 (n_1031 <= 0))
  fib_1030 n_1031 k_fib_1081 when (not (n_1031 >= 0)) -> (k_fib_1084 n_1031 k_fib_1081 false)
  k_fib_1084 n_1031 k_fib_1081 b_1121 when b_1121 -> (k_fib_1081 1)
  k_fib_1084 n_1031 k_fib_1081 b_1121 when (not b_1121) -> (br_k_fib_1155 (n_1031 >= 1) n_1031 k_fib_1081 b_1121)
  k_fib_1088 b_1121 n_1031 k_fib_1081 b_1117 when b_1117 -> (k_fib_1081 1)
  k_fib_1088 b_1121 n_1031 k_fib_1081 b_1117 when (not b_1117) ->
      (fib_1030 (n_1031 - 1) (f_k_fib_1152 b_1117 b_1121 n_1031 k_fib_1081))
  k_main_1148 x_1124 -> end
Types:
  main_1151 : X
  fail_1157 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fib_1030 : (int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1151 ... --> 
  fib_1030 [1/2] ... --> 
  k_fib_1084 [1/2] ... --> 
  f_1154 [2/2] ... --> 
  fail_1157 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(156)[1]
  program:
    main_1151  | true = (fib_1030 3
                                  f_1154)
    br_k_fib_1155 b_1156 n_1031 k_fib_1081 b_1121 | b_1156 = (k_fib_1088 b_1121
                                                                    n_1031
                                                                    k_fib_1081
                                                                    (n_1031 <= 1))
    br_k_fib_1155 b_1156 n_1031 k_fib_1081 b_1121 | (not b_1156) = (k_fib_1088 b_1121
                                                                    n_1031
                                                                    k_fib_1081
                                                                    false)
    f_1154 x_1127 | (x_1127 >= 4) = (k_main_1148 ())
    f_1154 x_1127 | (not (x_1127 >= 4)) = (fail_1157 true
                                                     k_main_1148)
    f_k_fib_1152 b_1117 b_1121 n_1031 k_fib_1081 x_1092 | true = (fib_1030
                                                                    (
                                                                    n_1031 - 2)
                                                                    (
                                                                    f_k_fib_1153 
                                                                    b_1117
                                                                    b_1121
                                                                    n_1031
                                                                    x_1092
                                                                    k_fib_1081))
    f_k_fib_1153 b_1117 b_1121 n_1031 x_1092 k_fib_1081 x_1093 | true = (
    k_fib_1081 (x_1092 + x_1093))
    fail_1157 b k | true = (fail ())
    fib_1030 n_1031 k_fib_1081 | (n_1031 >= 0) = (k_fib_1084 n_1031
                                                             k_fib_1081
                                                             (n_1031 <= 0))
    fib_1030 n_1031 k_fib_1081 | (not (n_1031 >= 0)) = (k_fib_1084 n_1031
                                                                   k_fib_1081
                                                                   false)
    k_fib_1084 n_1031 k_fib_1081 b_1121 | b_1121 = (k_fib_1081 1)
    k_fib_1084 n_1031 k_fib_1081 b_1121 | (not b_1121) = (br_k_fib_1155 (
                                                                    n_1031 >= 1)
                                                                    n_1031
                                                                    k_fib_1081
                                                                    b_1121)
    k_fib_1088 b_1121 n_1031 k_fib_1081 b_1117 | b_1117 = (k_fib_1081 1)
    k_fib_1088 b_1121 n_1031 k_fib_1081 b_1117 | (not b_1117) = (fib_1030
                                                                   (n_1031 - 1)
                                                                   (f_k_fib_1152 b_1117
                                                                    b_1121
                                                                    n_1031
                                                                    k_fib_1081))
    k_main_1148 x_1124 | true = end
    main_1151:X
    br_k_fib_1155:bool -> int -> (int -> X) -> bool -> X
    f_1154:int -> X
    f_k_fib_1152:bool -> bool -> int -> (int -> X) -> int -> X
    f_k_fib_1153:bool -> bool -> int -> int -> (int -> X) -> int -> X
    fail_1157:bool -> (unit -> X) -> X
    fib_1030:int -> (int -> X) -> X
    k_fib_1084:int -> (int -> X) -> bool -> X
    k_fib_1088:bool -> int -> (int -> X) -> bool -> X
    k_main_1148:unit -> X
  inlined functions: br_k_fib_1155,f_1154,f_k_fib_1152,f_k_fib_1153,k_fib_1084,k_fib_1088,k_main_1148
  counterexample: 0:0:0:1:0
  error traces:
    [true.(<fib_1030@3:0> = 3)
     [(<fib_1030@3:0> >= 0).((<k_fib_1084@6:0> = <fib_1030@3:0>) && (<k_fib_1084@6:2> = (<fib_1030@3:0> <= 0)))
      [<k_fib_1084@6:2>.(<<k_fib_1084@6:1>@9:0> = 1)
       [true.(<<fib_1030@3:1>@11:0> = <<k_fib_1084@6:1>@9:0>)
        [true.(<f_1154@13:0> = <<fib_1030@3:1>@11:0>)[(not (<f_1154@13:0> >= 4)).(<fail_1157@16:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(157)[2]
    horn clauses:
      P[<fail_1157@16:0>](<fail_1157@16:0>:bool)|- bot
      
      P[<f_1154@13:0>](<f_1154@13:0>:int), ((<f_1154@13:0> < 4) && <fail_1157@16:0>)
      |- P[<fail_1157@16:0>](<fail_1157@16:0>:bool)
      
      P[<<fib_1030@3:1>@11:0>](3:int,<f_1154@13:0>:int)|- P[<f_1154@13:0>](<f_1154@13:0>:int)
      
      P[<fib_1030@3:0>](<fib_1030@3:0>:int),
      P[<<k_fib_1084@6:1>@9:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int), (
      <fib_1030@3:0> >= 0) |- P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,
                                                       <<fib_1030@3:1>@11:0>:int)
      
      P[<k_fib_1084@6:2>](<k_fib_1084@6:0>:int,true:bool), (<<k_fib_1084@6:1>@9:0> = 1)
      |- P[<<k_fib_1084@6:1>@9:0>](<k_fib_1084@6:0>:int,<<k_fib_1084@6:1>@9:0>:int)
      
      P[<fib_1030@3:0>](<k_fib_1084@6:0>:int),
      ((<k_fib_1084@6:0> >= 0) && (<k_fib_1084@6:2> = (<k_fib_1084@6:0> <= 0)))
      |- P[<k_fib_1084@6:2>](<k_fib_1084@6:0>:int,<k_fib_1084@6:2>:bool)
      
       (<fib_1030@3:0> = 3) |- P[<fib_1030@3:0>](<fib_1030@3:0>:int)
    call trees:
      <main_1151@1>
        <fib_1030@3>
          <k_fib_1084@6>
          </<k_fib_1084@6:1>@9>
        </<fib_1030@3:1>@11>
        <f_1154@13>
          <fail_1157@16>
    inlined horn clauses:
      P[<fail_1157@16:0>](<fail_1157@16:0>:bool)|- bot
      
      P[<<fib_1030@3:1>@11:0>](3:int,<f_1154@13:0>:int), ((<f_1154@13:0> < 4) && <fail_1157@16:0>)
      |- P[<fail_1157@16:0>](<fail_1157@16:0>:bool)
      
      P[<fib_1030@3:0>](<fib_1030@3:0>:int), ((<fib_1030@3:0> = 0) && (<<fib_1030@3:1>@11:0> = 1))
      |- P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int)
      
       (<fib_1030@3:0> = 3) |- P[<fib_1030@3:0>](<fib_1030@3:0>:int)
    begin ParamSubstInfer.infer(1243)[3]
      
    end ParamSubstInfer.infer(1243)[3] (0.018997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1245)[3]
      
    end RefTypeInfer.elim_coeffs(1245)[3] (0.001000 sec.)
    begin GenHcSolver.solve(1410)[3]
      Horn clauses:
        P[<fail_1157@16:0>](<fail_1157@16:0>:bool)|- bot
        
        P[<<fib_1030@3:1>@11:0>](3:int,<f_1154@13:0>:int), ((<f_1154@13:0> < 4) && <fail_1157@16:0>)
        |- P[<fail_1157@16:0>](<fail_1157@16:0>:bool)
        
        P[<fib_1030@3:0>](<fib_1030@3:0>:int), ((<fib_1030@3:0> = 0) && (<<fib_1030@3:1>@11:0> = 1))
        |- P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int)
        
         (<fib_1030@3:0> = 3) |- P[<fib_1030@3:0>](<fib_1030@3:0>:int)
      lower bounds:
        P[<fib_1030@3:0>](<fib_1030@3:0>:int) = (<fib_1030@3:0> = 3)
        P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int) = false
        P[<fail_1157@16:0>](<fail_1157@16:0>:bool) = false
      upper bounds:
        P[<fail_1157@16:0>](var3:bool) = true
      begin GenHcSolver.classify_pids(2048)[4]
        output:
          [<fail_1157@16:0>]
      end GenHcSolver.classify_pids(2048)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2051)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2052)[5]
          begin InterpProver.interpolate_fresh(2053)[6]
            begin InterpProver.interpolate_log(2054)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2055)[8]
                begin InterpProver.interpolate_simplify(2056)[9]
                  begin InterpProver.interpolate_quick(2069)[10]
                    
                  end InterpProver.interpolate_quick(2069)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2073)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2073)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2056)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2055)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2054)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2053)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2052)[5] (0.000000 sec.)
        output:
          P[<fail_1157@16:0>](<fail_1157@16:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2051)[4] (0.000000 sec.)
      Horn clauses:
        P[<<fib_1030@3:1>@11:0>](3:int,<f_1154@13:0>:int), (<f_1154@13:0> < 4) |- bot
        
        P[<fib_1030@3:0>](<fib_1030@3:0>:int), ((<fib_1030@3:0> = 0) && (<<fib_1030@3:1>@11:0> = 1))
        |- P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int)
        
         (<fib_1030@3:0> = 3) |- P[<fib_1030@3:0>](<fib_1030@3:0>:int)
      lower bounds:
        P[<fib_1030@3:0>](<fib_1030@3:0>:int) = (<fib_1030@3:0> = 3)
        P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int) = false
      upper bounds:
        P[<<fib_1030@3:1>@11:0>](var6:int,var7:int) = true
      begin GenHcSolver.classify_pids(2812)[4]
        output:
          [<<fib_1030@3:1>@11:0>]
      end GenHcSolver.classify_pids(2812)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2815)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2816)[5]
          begin InterpProver.interpolate_fresh(2817)[6]
            begin InterpProver.interpolate_log(2818)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2819)[8]
                begin InterpProver.interpolate_simplify(2820)[9]
                  begin InterpProver.interpolate_quick(2833)[10]
                    
                  end InterpProver.interpolate_quick(2833)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2837)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2837)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2820)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2819)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2818)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2817)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2816)[5] (0.000000 sec.)
        output:
          P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int) = false
      end ApronInterface.convex_hull_interpolate(2815)[4] (0.000000 sec.)
      Horn clauses:
        P[<fib_1030@3:0>](0:int)|- bot
        
         (<fib_1030@3:0> = 3) |- P[<fib_1030@3:0>](<fib_1030@3:0>:int)
      lower bounds:
        P[<fib_1030@3:0>](<fib_1030@3:0>:int) = (<fib_1030@3:0> = 3)
      upper bounds:
        P[<fib_1030@3:0>](var8:int) = (var8 <> 0)
      begin GenHcSolver.classify_pids(3333)[4]
        output:
          [<fib_1030@3:0>]
      end GenHcSolver.classify_pids(3333)[4] (0.000000 sec.)
      lb:(<fib_1030@3:0> = 3)
      nub:(not (<fib_1030@3:0> <> 0))
      begin ApronInterface.convex_hull_interpolate(3336)[4]
        lb:(<fib_1030@3:0> = 3)
        nub:(not (<fib_1030@3:0> <> 0))
        lb':(<fib_1030@3:0> = 3)
        nub':(not (<fib_1030@3:0> <> 0))
        begin InterpProver.interpolate(3337)[5]
          begin InterpProver.interpolate_fresh(3338)[6]
            begin InterpProver.interpolate_log(3339)[7]
              input1: (<fib_1030@3:0> = 3)
              input2: (not (<fib_1030@3:0> <> 0))
              begin InterpProver.interpolate_check(3340)[8]
                begin InterpProver.interpolate_simplify(3341)[9]
                  begin InterpProver.interpolate_quick(3360)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(3369)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(3370)[12]
                        begin CsisatInterface.interpolate_csisat_log(3371)[13]
                          input1: 3 = v_sep_fib_1030_sep_3_sep_0
                          input2: 0 = v_sep_fib_1030_sep_3_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(3372)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(3372)[14] (0.000000 sec.)
                          output: -0.666666666667*v_sep_fib_1030_sep_3_sep_0 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(3371)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_fib_1030_sep_3_sep_0 <= -6
                        after dnf conversion: ((-2*v_sep_fib_1030_sep_3_sep_0 <= -6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(3370)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(3369)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(3360)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(3341)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(3340)[8] (0.002000 sec.)
              output: (3 <= <fib_1030@3:0>)
            end InterpProver.interpolate_log(3339)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(3338)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(3337)[5] (0.002000 sec.)
        output:
          P[<fib_1030@3:0>](<fib_1030@3:0>:int) = (3 <= <fib_1030@3:0>)
      end ApronInterface.convex_hull_interpolate(3336)[4] (0.002000 sec.)
      begin HcSolver.check_validity(3485)[4]
        input:
          P[<fail_1157@16:0>](<fail_1157@16:0>:bool)|- bot
          
          P[<<fib_1030@3:1>@11:0>](3:int,<f_1154@13:0>:int), ((<f_1154@13:0> < 4) && <fail_1157@16:0>)
          |- P[<fail_1157@16:0>](<fail_1157@16:0>:bool)
          
          P[<fib_1030@3:0>](<fib_1030@3:0>:int), ((<fib_1030@3:0> = 0) && (<<fib_1030@3:1>@11:0> = 1))
          |- P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int)
          
           (<fib_1030@3:0> = 3) |- P[<fib_1030@3:0>](<fib_1030@3:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3485)[4] (0.001000 sec.)
      solution:
        P[<fail_1157@16:0>](<fail_1157@16:0>:bool) = false
        P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int) = false
        P[<fib_1030@3:0>](<fib_1030@3:0>:int) = (3 <= <fib_1030@3:0>)
    end GenHcSolver.solve(1410)[3] (0.011998 sec.)
    begin GenHcSolver.solve(3676)[3]
      Horn clauses:
        P[<fail_1157@16:0>](<fail_1157@16:0>:bool)|- bot
        
        P[<<fib_1030@3:1>@11:0>](3:int,<f_1154@13:0>:int), ((<f_1154@13:0> < 4) && <fail_1157@16:0>)
        |- P[<fail_1157@16:0>](<fail_1157@16:0>:bool)
        
        P[<fib_1030@3:0>](<fib_1030@3:0>:int), ((<fib_1030@3:0> = 0) && (<<fib_1030@3:1>@11:0> = 1))
        |- P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int)
        
         (<fib_1030@3:0> = 3) |- P[<fib_1030@3:0>](<fib_1030@3:0>:int)
      lower bounds:
        P[<fib_1030@3:0>](<fib_1030@3:0>:int) = (<fib_1030@3:0> = 3)
        P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int) = false
        P[<fail_1157@16:0>](<fail_1157@16:0>:bool) = false
      upper bounds:
        P[<fail_1157@16:0>](var10:bool) = true
      begin GenHcSolver.classify_pids(4314)[4]
        output:
          [<fail_1157@16:0>]
      end GenHcSolver.classify_pids(4314)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(4317)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(4320)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4320)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(4325)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4325)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(4328)[5]
          begin InterpProver.interpolate_fresh(4329)[6]
            begin InterpProver.interpolate_log(4330)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(4331)[8]
                begin InterpProver.interpolate_simplify(4332)[9]
                  begin InterpProver.interpolate_quick(4347)[10]
                    
                  end InterpProver.interpolate_quick(4347)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(4351)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(4351)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4332)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(4331)[8] (0.000999 sec.)
              output: false
            end InterpProver.interpolate_log(4330)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(4329)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(4328)[5] (0.000999 sec.)
        output:
          P[<fail_1157@16:0>](<fail_1157@16:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(4317)[4] (0.001999 sec.)
      Horn clauses:
        P[<<fib_1030@3:1>@11:0>](3:int,<f_1154@13:0>:int), (<f_1154@13:0> < 4) |- bot
        
        P[<fib_1030@3:0>](<fib_1030@3:0>:int), ((<fib_1030@3:0> = 0) && (<<fib_1030@3:1>@11:0> = 1))
        |- P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int)
        
         (<fib_1030@3:0> = 3) |- P[<fib_1030@3:0>](<fib_1030@3:0>:int)
      lower bounds:
        P[<fib_1030@3:0>](<fib_1030@3:0>:int) = (<fib_1030@3:0> = 3)
        P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int) = false
      upper bounds:
        P[<<fib_1030@3:1>@11:0>](var13:int,var14:int) = true
      begin GenHcSolver.classify_pids(5097)[4]
        output:
          [<<fib_1030@3:1>@11:0>]
      end GenHcSolver.classify_pids(5097)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(5100)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(5103)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5103)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5108)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5108)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(5111)[5]
          begin InterpProver.interpolate_fresh(5112)[6]
            begin InterpProver.interpolate_log(5113)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(5114)[8]
                begin InterpProver.interpolate_simplify(5115)[9]
                  begin InterpProver.interpolate_quick(5130)[10]
                    
                  end InterpProver.interpolate_quick(5130)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(5134)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(5134)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5115)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5114)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(5113)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(5112)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(5111)[5] (0.000000 sec.)
        output:
          P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int) = false
      end ApronInterface.convex_hull_interpolate(5100)[4] (0.001000 sec.)
      Horn clauses:
        P[<fib_1030@3:0>](0:int)|- bot
        
         (<fib_1030@3:0> = 3) |- P[<fib_1030@3:0>](<fib_1030@3:0>:int)
      lower bounds:
        P[<fib_1030@3:0>](<fib_1030@3:0>:int) = (<fib_1030@3:0> = 3)
      upper bounds:
        P[<fib_1030@3:0>](var15:int) = (var15 <> 0)
      begin GenHcSolver.classify_pids(5637)[4]
        output:
          [<fib_1030@3:0>]
      end GenHcSolver.classify_pids(5637)[4] (0.000000 sec.)
      lb:(<fib_1030@3:0> = 3)
      nub:(not (<fib_1030@3:0> <> 0))
      begin ApronInterface.convex_hull_interpolate(5640)[4]
        lb:(<fib_1030@3:0> = 3)
        nub:(not (<fib_1030@3:0> <> 0))
        begin ExtFormula.Formula.case_analysis_boolean(5645)[5]
          ts: (<fib_1030@3:0> = 3)
          
        end ExtFormula.Formula.case_analysis_boolean(5645)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5653)[5]
          ts: (<fib_1030@3:0> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(5653)[5] (0.000000 sec.)
        lb':((-3 + <fib_1030@3:0>) = 0)
        nub':(<fib_1030@3:0> = 0)
        begin InterpProver.interpolate(5657)[5]
          begin InterpProver.interpolate_fresh(5658)[6]
            begin InterpProver.interpolate_log(5659)[7]
              input1: ((-3 + <fib_1030@3:0>) = 0)
              input2: (<fib_1030@3:0> = 0)
              begin InterpProver.interpolate_check(5660)[8]
                begin InterpProver.interpolate_simplify(5661)[9]
                  begin InterpProver.interpolate_quick(5680)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(5689)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(5690)[12]
                        begin CsisatInterface.interpolate_csisat_log(5691)[13]
                          input1: 3 = v_sep_fib_1030_sep_3_sep_0
                          input2: 0 = v_sep_fib_1030_sep_3_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(5692)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(5692)[14] (0.000000 sec.)
                          output: -0.666666666667*v_sep_fib_1030_sep_3_sep_0 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(5691)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_fib_1030_sep_3_sep_0 <= -6
                        after dnf conversion: ((-2*v_sep_fib_1030_sep_3_sep_0 <= -6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(5690)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(5689)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(5680)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5661)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5660)[8] (0.001000 sec.)
              output: (3 <= <fib_1030@3:0>)
            end InterpProver.interpolate_log(5659)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(5658)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(5657)[5] (0.001000 sec.)
        output:
          P[<fib_1030@3:0>](<fib_1030@3:0>:int) = (3 <= <fib_1030@3:0>)
      end ApronInterface.convex_hull_interpolate(5640)[4] (0.001000 sec.)
      begin HcSolver.check_validity(5804)[4]
        input:
          P[<fail_1157@16:0>](<fail_1157@16:0>:bool)|- bot
          
          P[<<fib_1030@3:1>@11:0>](3:int,<f_1154@13:0>:int), ((<f_1154@13:0> < 4) && <fail_1157@16:0>)
          |- P[<fail_1157@16:0>](<fail_1157@16:0>:bool)
          
          P[<fib_1030@3:0>](<fib_1030@3:0>:int), ((<fib_1030@3:0> = 0) && (<<fib_1030@3:1>@11:0> = 1))
          |- P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int)
          
           (<fib_1030@3:0> = 3) |- P[<fib_1030@3:0>](<fib_1030@3:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(5804)[4] (0.000000 sec.)
      solution:
        P[<fail_1157@16:0>](<fail_1157@16:0>:bool) = false
        P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int) = false
        P[<fib_1030@3:0>](<fib_1030@3:0>:int) = (3 <= <fib_1030@3:0>)
    end GenHcSolver.solve(3676)[3] (0.010998 sec.)
    begin YhornInterface.solve(5995)[3]
      begin HcSolver.solve_ub(5996)[4]
        encoded:
          P[<fail_1157@16:0>](<fail_1157@16:0>:int)|- bot
          
          P[<<fib_1030@3:1>@11:0>](3:int,<f_1154@13:0>:int), ((<f_1154@13:0> < 4) && (<fail_1157@16:0> = 1))
          |- P[<fail_1157@16:0>](<fail_1157@16:0>:int)
          
          P[<fib_1030@3:0>](<fib_1030@3:0>:int), ((<fib_1030@3:0> = 0) && (<<fib_1030@3:1>@11:0> = 1))
          |- P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int)
          
           (<fib_1030@3:0> = 3) |- P[<fib_1030@3:0>](<fib_1030@3:0>:int)
        input to Yhorn:
          P[<fail_1157@16:0>](<fail_1157@16:0>:int)|- bot
          
          P[<<fib_1030@3:1>@11:0>](var16:int,<f_1154@13:0>:int),
          ((<f_1154@13:0> < 4) && ((var16 = 3) && (<fail_1157@16:0> = 1))) |- P[<fail_1157@16:0>](
          <fail_1157@16:0>:int)
          
          P[<fib_1030@3:0>](<fib_1030@3:0>:int), ((<<fib_1030@3:1>@11:0> = 1) && (<fib_1030@3:0> = 0))
          |- P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1157_sep_16_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-3=0) & ($8-4<0)) & (v_sep_fib_1030_sep_3_sep_1_sep_11_sep_0($7,$8)) -> v_sep_fail_1157_sep_16_sep_0($6).
(($9=0) & ($10-1=0)) & (v_sep_fib_1030_sep_3_sep_0($9)) -> v_sep_fib_1030_sep_3_sep_1_sep_11_sep_0($9,$10).
$9-3=0 -> v_sep_fib_1030_sep_3_sep_0($9).


v_sep_fail_1157_sep_16_sep_0: X
v_sep_fib_1030_sep_3_sep_0: X
v_sep_fib_1030_sep_3_sep_1_sep_11_sep_0: X
....
v_sep_fail_1157_sep_16_sep_0: X
v_sep_fib_1030_sep_3_sep_0: X
v_sep_fib_1030_sep_3_sep_1_sep_11_sep_0: X
...
v_sep_fail_1157_sep_16_sep_0: X
v_sep_fib_1030_sep_3_sep_0: X
v_sep_fib_1030_sep_3_sep_1_sep_11_sep_0: X
....
v_sep_fail_1157_sep_16_sep_0: X
v_sep_fib_1030_sep_3_sep_0: X
v_sep_fib_1030_sep_3_sep_1_sep_11_sep_0: X
....(0=0) & (v_sep_fail_1157_sep_16_sep_0($6)) -> 1=0.
(($6-1=0) & ($7-3=0) & ($8-4<0)) & (v_sep_fib_1030_sep_3_sep_1_sep_11_sep_0($7,$8)) -> v_sep_fail_1157_sep_16_sep_0($6).
(($9=0) & ($10-1=0)) & (v_sep_fib_1030_sep_3_sep_0($9)) -> v_sep_fib_1030_sep_3_sep_1_sep_11_sep_0($9,$10).
$9-3=0 -> v_sep_fib_1030_sep_3_sep_0($9).

           (<fib_1030@3:0> = 3) |- P[<fib_1030@3:0>](<fib_1030@3:0>:int)
        solution:
          P[<fail_1157@16:0>]($11:bool) = false
          P[<fib_1030@3:0>]($19:int) = (3 <= $19)
          P[<<fib_1030@3:1>@11:0>]($14:int,$16:int) = false
        
      end HcSolver.solve_ub(5996)[4] (0.012998 sec.)
      begin HcSolver.check_validity(6136)[4]
        input:
          P[<fail_1157@16:0>](<fail_1157@16:0>:bool)|- bot
          
          P[<<fib_1030@3:1>@11:0>](3:int,<f_1154@13:0>:int), ((<f_1154@13:0> < 4) && <fail_1157@16:0>)
          |- P[<fail_1157@16:0>](<fail_1157@16:0>:bool)
          
          P[<fib_1030@3:0>](<fib_1030@3:0>:int), ((<fib_1030@3:0> = 0) && (<<fib_1030@3:1>@11:0> = 1))
          |- P[<<fib_1030@3:1>@11:0>](<fib_1030@3:0>:int,<<fib_1030@3:1>@11:0>:int)
          
           (<fib_1030@3:0> = 3) |- P[<fib_1030@3:0>](<fib_1030@3:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(6136)[4] (0.001000 sec.)
      solution:
        P[<fail_1157@16:0>]($11:bool) = false
        P[<fib_1030@3:0>]($19:int) = (3 <= $19)
        P[<<fib_1030@3:1>@11:0>]($14:int,$16:int) = false
    end YhornInterface.solve(5995)[3] (0.014998 sec.)
    
  end RefTypeInfer.infer_etrs(157)[2] (0.063990 sec.)
  refinement types:
    main_1151: X
    fib_1030: v1:{v1:int | (3 <= v1)} -> (v2:{v2:int | false} -> X) -> X
    k_fib_1084: v1:int -> (v2:int -> X) -> v4:bool -> X
    f_1154: v1:int -> X
    fail_1157: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_k_fib_1155: var24:bool -> var23:int -> (var22:int -> X) -> var20:bool -> X
    f_k_fib_1152: var31:bool -> var30:bool -> var29:int -> (var28:int -> X) -> var26:int -> X
    f_k_fib_1153: var39:bool -> var38:bool -> var37:int -> var36:int -> (var35:int -> X) -> var33:int -> X
    k_fib_1088: var45:bool -> var44:int -> (var43:int -> X) -> var41:bool -> X
    k_main_1148: var47:unit -> X
  abstraction types:
    main_1151: X
    fib_1030: v1:int[v1 -> (3 <= v1)] -> (v2:int -> X) -> X
    k_fib_1084: v1:int -> (v2:int -> X) -> v4:bool -> X
    f_1154: v1:int -> X
    fail_1157: v1:bool -> (v2:unit -> X) -> X
    br_k_fib_1155: var24:bool -> var23:int -> (var22:int -> X) -> var20:bool -> X
    f_k_fib_1152: var31:bool -> var30:bool -> var29:int -> (var28:int -> X) -> var26:int -> X
    f_k_fib_1153: var39:bool -> var38:bool -> var37:int -> var36:int -> (var35:int -> X) -> var33:int -> X
    k_fib_1088: var45:bool -> var44:int -> (var43:int -> X) -> var41:bool -> X
    k_main_1148: var47:unit -> X
  
end AbsTypeInfer.refine(156)[1] (0.070989 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1151
  main_1151 -> (fib_1030 3 f_1154)
  br_k_fib_1155 b_1156 n_1031 k_fib_1081 b_1121 when b_1156 -> (k_fib_1088 b_1121 n_1031 k_fib_1081 (n_1031 <= 1))
  br_k_fib_1155 b_1156 n_1031 k_fib_1081 b_1121 when (not b_1156) -> (k_fib_1088 b_1121 n_1031 k_fib_1081 false)
  f_1154 x_1127 when (x_1127 >= 4) -> (k_main_1148 ())
  f_1154 x_1127 when (not (x_1127 >= 4)) -> (fail_1157 true k_main_1148)
  f_k_fib_1152 b_1117 b_1121 n_1031 k_fib_1081 x_1092 ->
      (fib_1030 (n_1031 - 2) (f_k_fib_1153 b_1117 b_1121 n_1031 x_1092 k_fib_1081))
  f_k_fib_1153 b_1117 b_1121 n_1031 x_1092 k_fib_1081 x_1093 -> (k_fib_1081 (x_1092 + x_1093))
  fail_1157 b k -> {fail} => (k ())
  fib_1030 n_1031 k_fib_1081 when (n_1031 >= 0) -> (k_fib_1084 n_1031 k_fib_1081 (n_1031 <= 0))
  fib_1030 n_1031 k_fib_1081 when (not (n_1031 >= 0)) -> (k_fib_1084 n_1031 k_fib_1081 false)
  k_fib_1084 n_1031 k_fib_1081 b_1121 when b_1121 -> (k_fib_1081 1)
  k_fib_1084 n_1031 k_fib_1081 b_1121 when (not b_1121) -> (br_k_fib_1155 (n_1031 >= 1) n_1031 k_fib_1081 b_1121)
  k_fib_1088 b_1121 n_1031 k_fib_1081 b_1117 when b_1117 -> (k_fib_1081 1)
  k_fib_1088 b_1121 n_1031 k_fib_1081 b_1117 when (not b_1117) ->
      (fib_1030 (n_1031 - 1) (f_k_fib_1152 b_1117 b_1121 n_1031 k_fib_1081))
  k_main_1148 x_1124 -> end
Types:
  main_1151 : X
  fail_1157 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fib_1030 : (x_1:int[x_1 >= 3] -> (int -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1151 ... --> 
  fib_1030 [1/2] ... --> 
  k_fib_1084 [2/2] ... --> 
  br_k_fib_1155 [1/2] ... --> 
  k_fib_1088 [2/2] ... --> 
  fib_1030 [1/2] ... --> 
  k_fib_1084 [1/2] ... --> 
  f_k_fib_1152 ... --> 
  fib_1030 [1/2] ... --> 
  k_fib_1084 [1/2] ... --> 
  f_k_fib_1153 ... --> 
  f_1154 [2/2] ... --> 
  fail_1157 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 1; 0; 1; 0; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(6780)[1]
  program:
    main_1151  | true = (fib_1030 3
                                  f_1154)
    br_k_fib_1155 b_1156 n_1031 k_fib_1081 b_1121 | b_1156 = (k_fib_1088 b_1121
                                                                    n_1031
                                                                    k_fib_1081
                                                                    (n_1031 <= 1))
    br_k_fib_1155 b_1156 n_1031 k_fib_1081 b_1121 | (not b_1156) = (k_fib_1088 b_1121
                                                                    n_1031
                                                                    k_fib_1081
                                                                    false)
    f_1154 x_1127 | (x_1127 >= 4) = (k_main_1148 ())
    f_1154 x_1127 | (not (x_1127 >= 4)) = (fail_1157 true
                                                     k_main_1148)
    f_k_fib_1152 b_1117 b_1121 n_1031 k_fib_1081 x_1092 | true = (fib_1030
                                                                    (
                                                                    n_1031 - 2)
                                                                    (
                                                                    f_k_fib_1153 
                                                                    b_1117
                                                                    b_1121
                                                                    n_1031
                                                                    x_1092
                                                                    k_fib_1081))
    f_k_fib_1153 b_1117 b_1121 n_1031 x_1092 k_fib_1081 x_1093 | true = (
    k_fib_1081 (x_1092 + x_1093))
    fail_1157 b k | true = (fail ())
    fib_1030 n_1031 k_fib_1081 | (n_1031 >= 0) = (k_fib_1084 n_1031
                                                             k_fib_1081
                                                             (n_1031 <= 0))
    fib_1030 n_1031 k_fib_1081 | (not (n_1031 >= 0)) = (k_fib_1084 n_1031
                                                                   k_fib_1081
                                                                   false)
    k_fib_1084 n_1031 k_fib_1081 b_1121 | b_1121 = (k_fib_1081 1)
    k_fib_1084 n_1031 k_fib_1081 b_1121 | (not b_1121) = (br_k_fib_1155 (
                                                                    n_1031 >= 1)
                                                                    n_1031
                                                                    k_fib_1081
                                                                    b_1121)
    k_fib_1088 b_1121 n_1031 k_fib_1081 b_1117 | b_1117 = (k_fib_1081 1)
    k_fib_1088 b_1121 n_1031 k_fib_1081 b_1117 | (not b_1117) = (fib_1030
                                                                   (n_1031 - 1)
                                                                   (f_k_fib_1152 b_1117
                                                                    b_1121
                                                                    n_1031
                                                                    k_fib_1081))
    k_main_1148 x_1124 | true = end
    main_1151:X
    br_k_fib_1155:bool -> int -> (int -> X) -> bool -> X
    f_1154:int -> X
    f_k_fib_1152:bool -> bool -> int -> (int -> X) -> int -> X
    f_k_fib_1153:bool -> bool -> int -> int -> (int -> X) -> int -> X
    fail_1157:bool -> (unit -> X) -> X
    fib_1030:int -> (int -> X) -> X
    k_fib_1084:int -> (int -> X) -> bool -> X
    k_fib_1088:bool -> int -> (int -> X) -> bool -> X
    k_main_1148:unit -> X
  inlined functions: br_k_fib_1155,f_1154,f_k_fib_1152,f_k_fib_1153,k_fib_1084,k_fib_1088,k_main_1148
  counterexample: 0:0:1:0:1:0:0:0:0:0:0:1:0
  error traces:
    [true.(<fib_1030@21:0> = 3)
     [(<fib_1030@21:0> >= 0).((<k_fib_1084@24:0> = <fib_1030@21:0>) && (<k_fib_1084@24:2> = (<fib_1030@21:0> <= 0)))
      [(not <k_fib_1084@24:2>).
       ((<br_k_fib_1155@27:0> = (<k_fib_1084@24:0> >= 1)) &&
        ((<br_k_fib_1155@27:1> = <k_fib_1084@24:0>) && (<br_k_fib_1155@27:3> = <k_fib_1084@24:2>)))
       [<br_k_fib_1155@27:0>.
        ((<k_fib_1088@30:0> = <br_k_fib_1155@27:3>) &&
         ((<k_fib_1088@30:1> = <br_k_fib_1155@27:1>) && (<k_fib_1088@30:3> = (<br_k_fib_1155@27:1> <= 1))))
        [(not <k_fib_1088@30:3>).(<fib_1030@33:0> = (<k_fib_1088@30:1> - 1))
         [(<fib_1030@33:0> >= 0).
          ((<k_fib_1084@36:0> = <fib_1030@33:0>) && (<k_fib_1084@36:2> = (<fib_1030@33:0> <= 0)))
          [<k_fib_1084@36:2>.(<<k_fib_1084@36:1>@39:0> = 1)
           [true.(<<fib_1030@33:1>@41:0> = <<k_fib_1084@36:1>@39:0>)
            [true.
             ((<f_k_fib_1152@43:0> = <k_fib_1088@30:3>) &&
              ((<f_k_fib_1152@43:1> = <k_fib_1088@30:0>) &&
               ((<f_k_fib_1152@43:2> = <k_fib_1088@30:1>) && (<f_k_fib_1152@43:4> = <<fib_1030@33:1>@41:0>))))
             [true.(<fib_1030@45:0> = (<f_k_fib_1152@43:2> - 2))
              [(<fib_1030@45:0> >= 0).
               ((<k_fib_1084@48:0> = <fib_1030@45:0>) && (<k_fib_1084@48:2> = (<fib_1030@45:0> <= 0)))
               [<k_fib_1084@48:2>.(<<k_fib_1084@48:1>@51:0> = 1)
                [true.(<<fib_1030@45:1>@53:0> = <<k_fib_1084@48:1>@51:0>)
                 [true.
                  ((<f_k_fib_1153@55:0> = <f_k_fib_1152@43:0>) &&
                   ((<f_k_fib_1153@55:1> = <f_k_fib_1152@43:1>) &&
                    ((<f_k_fib_1153@55:2> = <f_k_fib_1152@43:2>) &&
                     ((<f_k_fib_1153@55:3> = <f_k_fib_1152@43:4>) && (<f_k_fib_1153@55:5> = <<fib_1030@45:1>@53:0>)))))
                  [true.(<<f_k_fib_1153@55:4>@57:0> = (<f_k_fib_1153@55:3> + <f_k_fib_1153@55:5>))
                   [true.(<<f_k_fib_1152@43:3>@59:0> = <<f_k_fib_1153@55:4>@57:0>)
                    [true.(<<k_fib_1088@30:2>@61:0> = <<f_k_fib_1152@43:3>@59:0>)
                     [true.(<<br_k_fib_1155@27:2>@63:0> = <<k_fib_1088@30:2>@61:0>)
                      [true.(<<k_fib_1084@24:1>@65:0> = <<br_k_fib_1155@27:2>@63:0>)
                       [true.(<<fib_1030@21:1>@67:0> = <<k_fib_1084@24:1>@65:0>)
                        [true.(<f_1154@69:0> = <<fib_1030@21:1>@67:0>)
                         [(not (<f_1154@69:0> >= 4)).(<fail_1157@72:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(6781)[2]
    horn clauses:
      P[<fail_1157@72:0>](<fail_1157@72:0>:bool)|- bot
      
      P[<f_1154@69:0>](<f_1154@69:0>:int), ((<f_1154@69:0> < 4) && <fail_1157@72:0>)
      |- P[<fail_1157@72:0>](<fail_1157@72:0>:bool)
      
      P[<<fib_1030@21:1>@67:0>](3:int,<f_1154@69:0>:int)|- P[<f_1154@69:0>](<f_1154@69:0>:int)
      
      P[<fib_1030@21:0>](<fib_1030@21:0>:int),
      P[<<k_fib_1084@24:1>@65:0>](<fib_1030@21:0>:int,<<fib_1030@21:1>@67:0>:int), (
      <fib_1030@21:0> >= 0) |- P[<<fib_1030@21:1>@67:0>](<fib_1030@21:0>:int,
                                                         <<fib_1030@21:1>@67:0>:int)
      
      P[<k_fib_1084@24:2>](<k_fib_1084@24:0>:int,false:bool),
      P[<<br_k_fib_1155@27:2>@63:0>]((<k_fib_1084@24:0> >= 1):bool,<k_fib_1084@24:0>:int,<<k_fib_1084@24:1>@65:0>:int)|- P[<<k_fib_1084@24:1>@65:0>](
      <k_fib_1084@24:0>:int,<<k_fib_1084@24:1>@65:0>:int)
      
      P[<br_k_fib_1155@27:3>](<br_k_fib_1155@27:0>:bool,<br_k_fib_1155@27:1>:int,<k_fib_1088@30:0>:bool),
      P[<<k_fib_1088@30:2>@61:0>](<k_fib_1088@30:0>:bool,<br_k_fib_1155@27:1>:int,<<br_k_fib_1155@27:2>@63:0>:int),
      <br_k_fib_1155@27:0>
      |- P[<<br_k_fib_1155@27:2>@63:0>](<br_k_fib_1155@27:0>:bool,<br_k_fib_1155@27:1>:int,
                                        <<br_k_fib_1155@27:2>@63:0>:int)
      
      P[<k_fib_1088@30:3>](<k_fib_1088@30:0>:bool,<k_fib_1088@30:1>:int,false:bool),
      P[<<f_k_fib_1152@43:3>@59:0>](false:bool,<k_fib_1088@30:0>:bool,<k_fib_1088@30:1>:int,<<k_fib_1088@30:2>@61:0>:int)|- P[<<k_fib_1088@30:2>@61:0>](
      <k_fib_1088@30:0>:bool,<k_fib_1088@30:1>:int,<<k_fib_1088@30:2>@61:0>:int)
      
      P[<f_k_fib_1152@43:4>](<f_k_fib_1152@43:0>:bool,<f_k_fib_1152@43:1>:bool,<f_k_fib_1152@43:2>:int,<f_k_fib_1153@55:3>:int),
      P[<<f_k_fib_1153@55:4>@57:0>](<f_k_fib_1152@43:0>:bool,<f_k_fib_1152@43:1>:bool,<f_k_fib_1152@43:2>:int,<f_k_fib_1153@55:3>:int,<<f_k_fib_1152@43:3>@59:0>:int)|- P[<<f_k_fib_1152@43:3>@59:0>](
      <f_k_fib_1152@43:0>:bool,<f_k_fib_1152@43:1>:bool,<f_k_fib_1152@43:2>:int,
      <<f_k_fib_1152@43:3>@59:0>:int)
      
      P[<f_k_fib_1153@55:5>](<f_k_fib_1153@55:0>:bool,<f_k_fib_1153@55:1>:bool,<f_k_fib_1153@55:2>:int,<f_k_fib_1153@55:3>:int,(
                             <<f_k_fib_1153@55:4>@57:0> + (-1 * <f_k_fib_1153@55:3>)):int)|- P[<<f_k_fib_1153@55:4>@57:0>](
      <f_k_fib_1153@55:0>:bool,<f_k_fib_1153@55:1>:bool,<f_k_fib_1153@55:2>:int,
      <f_k_fib_1153@55:3>:int,<<f_k_fib_1153@55:4>@57:0>:int)
      
      P[<f_k_fib_1152@43:4>](<f_k_fib_1153@55:0>:bool,<f_k_fib_1153@55:1>:bool,<f_k_fib_1153@55:2>:int,<f_k_fib_1153@55:3>:int),
      P[<<fib_1030@45:1>@53:0>]((-2 + <f_k_fib_1153@55:2>):int,<f_k_fib_1153@55:5>:int)|- P[<f_k_fib_1153@55:5>](
      <f_k_fib_1153@55:0>:bool,<f_k_fib_1153@55:1>:bool,<f_k_fib_1153@55:2>:int,
      <f_k_fib_1153@55:3>:int,<f_k_fib_1153@55:5>:int)
      
      P[<fib_1030@45:0>](<fib_1030@45:0>:int),
      P[<<k_fib_1084@48:1>@51:0>](<fib_1030@45:0>:int,<<fib_1030@45:1>@53:0>:int), (
      <fib_1030@45:0> >= 0) |- P[<<fib_1030@45:1>@53:0>](<fib_1030@45:0>:int,
                                                         <<fib_1030@45:1>@53:0>:int)
      
      P[<k_fib_1084@48:2>](<k_fib_1084@48:0>:int,true:bool), (<<k_fib_1084@48:1>@51:0> = 1)
      |- P[<<k_fib_1084@48:1>@51:0>](<k_fib_1084@48:0>:int,<<k_fib_1084@48:1>@51:0>:int)
      
      P[<fib_1030@45:0>](<k_fib_1084@48:0>:int),
      ((<k_fib_1084@48:0> >= 0) && (<k_fib_1084@48:2> = (<k_fib_1084@48:0> <= 0)))
      |- P[<k_fib_1084@48:2>](<k_fib_1084@48:0>:int,<k_fib_1084@48:2>:bool)
      
      P[<f_k_fib_1152@43:4>](<f_k_fib_1152@43:0>:bool,<f_k_fib_1152@43:1>:bool,(
                             2 + <fib_1030@45:0>):int,<f_k_fib_1152@43:4>:int)|- P[<fib_1030@45:0>](
      <fib_1030@45:0>:int)
      
      P[<k_fib_1088@30:3>](<f_k_fib_1152@43:1>:bool,<f_k_fib_1152@43:2>:int,<f_k_fib_1152@43:0>:bool),
      P[<<fib_1030@33:1>@41:0>]((-1 + <f_k_fib_1152@43:2>):int,<f_k_fib_1152@43:4>:int), (
      not <f_k_fib_1152@43:0>)
      |- P[<f_k_fib_1152@43:4>](<f_k_fib_1152@43:0>:bool,<f_k_fib_1152@43:1>:bool,
                                <f_k_fib_1152@43:2>:int,<f_k_fib_1152@43:4>:int)
      
      P[<fib_1030@33:0>](<fib_1030@33:0>:int),
      P[<<k_fib_1084@36:1>@39:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int), (
      <fib_1030@33:0> >= 0) |- P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,
                                                         <<fib_1030@33:1>@41:0>:int)
      
      P[<k_fib_1084@36:2>](<k_fib_1084@36:0>:int,true:bool), (<<k_fib_1084@36:1>@39:0> = 1)
      |- P[<<k_fib_1084@36:1>@39:0>](<k_fib_1084@36:0>:int,<<k_fib_1084@36:1>@39:0>:int)
      
      P[<fib_1030@33:0>](<k_fib_1084@36:0>:int),
      ((<k_fib_1084@36:0> >= 0) && (<k_fib_1084@36:2> = (<k_fib_1084@36:0> <= 0)))
      |- P[<k_fib_1084@36:2>](<k_fib_1084@36:0>:int,<k_fib_1084@36:2>:bool)
      
      P[<k_fib_1088@30:3>](<k_fib_1088@30:0>:bool,(1 + <fib_1030@33:0>):int,false:bool)|- P[<fib_1030@33:0>](
      <fib_1030@33:0>:int)
      
      P[<br_k_fib_1155@27:3>](true:bool,<k_fib_1088@30:1>:int,<k_fib_1088@30:0>:bool),
      (<k_fib_1088@30:3> = (<k_fib_1088@30:1> <= 1))
      |- P[<k_fib_1088@30:3>](<k_fib_1088@30:0>:bool,<k_fib_1088@30:1>:int,
                              <k_fib_1088@30:3>:bool)
      
      P[<k_fib_1084@24:2>](<br_k_fib_1155@27:1>:int,<br_k_fib_1155@27:3>:bool),
      ((not <br_k_fib_1155@27:3>) && (<br_k_fib_1155@27:0> = (<br_k_fib_1155@27:1> >= 1)))
      |- P[<br_k_fib_1155@27:3>](<br_k_fib_1155@27:0>:bool,<br_k_fib_1155@27:1>:int,
                                 <br_k_fib_1155@27:3>:bool)
      
      P[<fib_1030@21:0>](<k_fib_1084@24:0>:int),
      ((<k_fib_1084@24:0> >= 0) && (<k_fib_1084@24:2> = (<k_fib_1084@24:0> <= 0)))
      |- P[<k_fib_1084@24:2>](<k_fib_1084@24:0>:int,<k_fib_1084@24:2>:bool)
      
       (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
    call trees:
      <main_1151@19>
        <fib_1030@21>
          <k_fib_1084@24>
            <br_k_fib_1155@27>
              <k_fib_1088@30>
                <fib_1030@33>
                  <k_fib_1084@36>
                  </<k_fib_1084@36:1>@39>
                </<fib_1030@33:1>@41>
                <f_k_fib_1152@43>
                  <fib_1030@45>
                    <k_fib_1084@48>
                    </<k_fib_1084@48:1>@51>
                  </<fib_1030@45:1>@53>
                  <f_k_fib_1153@55>
                  </<f_k_fib_1153@55:4>@57>
                </<f_k_fib_1152@43:3>@59>
              </<k_fib_1088@30:2>@61>
            </<br_k_fib_1155@27:2>@63>
          </<k_fib_1084@24:1>@65>
        </<fib_1030@21:1>@67>
        <f_1154@69>
          <fail_1157@72>
    inlined horn clauses:
      P[<fail_1157@72:0>](<fail_1157@72:0>:bool)|- bot
      
      P[<<fib_1030@21:1>@67:0>](3:int,<f_1154@69:0>:int), ((<f_1154@69:0> < 4) && <fail_1157@72:0>)
      |- P[<fail_1157@72:0>](<fail_1157@72:0>:bool)
      
      P[<fib_1030@21:0>](<fib_1030@21:0>:int),
      P[<<fib_1030@33:1>@41:0>]((-1 + <fib_1030@21:0>):int,var51:int),
      P[<<fib_1030@45:1>@53:0>]((-2 + <fib_1030@21:0>):int,(<<fib_1030@21:1>@67:0> + (-1 * var51)):int),
      (<fib_1030@21:0> > 1) |- P[<<fib_1030@21:1>@67:0>](<fib_1030@21:0>:int,
                                                         <<fib_1030@21:1>@67:0>:int)
      
      P[<fib_1030@45:0>](<fib_1030@45:0>:int), ((<fib_1030@45:0> = 0) && (<<fib_1030@45:1>@53:0> = 1))
      |- P[<<fib_1030@45:1>@53:0>](<fib_1030@45:0>:int,<<fib_1030@45:1>@53:0>:int)
      
      P[<fib_1030@21:0>]((2 + <fib_1030@45:0>):int),
      P[<<fib_1030@33:1>@41:0>]((1 + <fib_1030@45:0>):int,<f_k_fib_1152@43:4>:int), (
      (1 + <fib_1030@45:0>) > 0) |- P[<fib_1030@45:0>](<fib_1030@45:0>:int)
      
      P[<fib_1030@33:0>](<fib_1030@33:0>:int), ((<fib_1030@33:0> = 0) && (<<fib_1030@33:1>@41:0> = 1))
      |- P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int)
      
      P[<fib_1030@21:0>]((1 + <fib_1030@33:0>):int), (<fib_1030@33:0> > 0) |- P[<fib_1030@33:0>](<fib_1030@33:0>:int)
      
       (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
    begin ParamSubstInfer.infer(11009)[3]
      
    end ParamSubstInfer.infer(11009)[3] (0.056991 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(11011)[3]
      
    end RefTypeInfer.elim_coeffs(11011)[3] (0.002000 sec.)
    begin GenHcSolver.solve(11310)[3]
      Horn clauses:
        P[<fail_1157@72:0>](<fail_1157@72:0>:bool)|- bot
        
        P[<<fib_1030@21:1>@67:0>](3:int,<f_1154@69:0>:int), ((<f_1154@69:0> < 4) && <fail_1157@72:0>)
        |- P[<fail_1157@72:0>](<fail_1157@72:0>:bool)
        
        P[<fib_1030@21:0>](<fib_1030@21:0>:int),
        P[<<fib_1030@33:1>@41:0>]((-1 + <fib_1030@21:0>):int,var51:int),
        P[<<fib_1030@45:1>@53:0>]((-2 + <fib_1030@21:0>):int,(<<fib_1030@21:1>@67:0> + (-1 * var51)):int),
        (<fib_1030@21:0> > 1) |- P[<<fib_1030@21:1>@67:0>](<fib_1030@21:0>:int,
                                                           <<fib_1030@21:1>@67:0>:int)
        
        P[<fib_1030@45:0>](<fib_1030@45:0>:int), ((<fib_1030@45:0> = 0) && (<<fib_1030@45:1>@53:0> = 1))
        |- P[<<fib_1030@45:1>@53:0>](<fib_1030@45:0>:int,<<fib_1030@45:1>@53:0>:int)
        
        P[<fib_1030@21:0>]((2 + <fib_1030@45:0>):int),
        P[<<fib_1030@33:1>@41:0>]((1 + <fib_1030@45:0>):int,<f_k_fib_1152@43:4>:int), (
        (1 + <fib_1030@45:0>) > 0) |- P[<fib_1030@45:0>](<fib_1030@45:0>:int)
        
        P[<fib_1030@33:0>](<fib_1030@33:0>:int), ((<fib_1030@33:0> = 0) && (<<fib_1030@33:1>@41:0> = 1))
        |- P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int)
        
        P[<fib_1030@21:0>]((1 + <fib_1030@33:0>):int), (<fib_1030@33:0> > 0) |- P[<fib_1030@33:0>](<fib_1030@33:0>:int)
        
         (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
      lower bounds:
        P[<fib_1030@21:0>](<fib_1030@21:0>:int) = (<fib_1030@21:0> = 3)
        P[<fib_1030@33:0>](<fib_1030@33:0>:int) = (<fib_1030@33:0> = 2)
        P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int) = false
        P[<fib_1030@45:0>](<fib_1030@45:0>:int) = false
        P[<<fib_1030@45:1>@53:0>](<fib_1030@45:0>:int,<<fib_1030@45:1>@53:0>:int) = false
        P[<<fib_1030@21:1>@67:0>](<fib_1030@21:0>:int,<<fib_1030@21:1>@67:0>:int) = false
        P[<fail_1157@72:0>](<fail_1157@72:0>:bool) = false
      upper bounds:
        P[<<fib_1030@21:1>@67:0>](var66:int,var67:int) = true
        P[<<fib_1030@45:1>@53:0>](var61:int,var62:int) = true
        P[<<fib_1030@33:1>@41:0>](var56:int,var57:int) = true
      begin GenHcSolver.classify_pids(14232)[4]
        output:
          [<<fib_1030@33:1>@41:0>;<<fib_1030@45:1>@53:0>;<<fib_1030@21:1>@67:0>]
      end GenHcSolver.classify_pids(14232)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(14253)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(14254)[5]
          begin InterpProver.interpolate_fresh(14255)[6]
            begin InterpProver.interpolate_log(14256)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(14257)[8]
                begin InterpProver.interpolate_simplify(14258)[9]
                  begin InterpProver.interpolate_quick(14271)[10]
                    
                  end InterpProver.interpolate_quick(14271)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(14275)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(14275)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(14258)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(14257)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(14256)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(14255)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(14254)[5] (0.000000 sec.)
        output:
          P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int) = false
          P[<<fib_1030@45:1>@53:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int) = false
          P[<<fib_1030@21:1>@67:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int) = false
      end ApronInterface.convex_hull_interpolate(14253)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1157@72:0>](<fail_1157@72:0>:bool)|- bot
        
        P[<fib_1030@45:0>](0:int)|- bot
        
        P[<fib_1030@33:0>](0:int)|- bot
        
        P[<fib_1030@21:0>]((1 + <fib_1030@33:0>):int), (<fib_1030@33:0> > 0) |- P[<fib_1030@33:0>](<fib_1030@33:0>:int)
        
         (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
      lower bounds:
        P[<fib_1030@21:0>](<fib_1030@21:0>:int) = (<fib_1030@21:0> = 3)
        P[<fail_1157@72:0>](var74:bool) = false
        P[<fib_1030@45:0>](var75:int) = false
        P[<fib_1030@33:0>](<fib_1030@33:0>:int) = (<fib_1030@33:0> = 2)
      upper bounds:
        P[<fib_1030@45:0>](var90:int) = true
        P[<fib_1030@33:0>](var85:int) = (var85 <> 0)
        P[<fib_1030@21:0>](var80:int) = true
      begin GenHcSolver.classify_pids(17218)[4]
        output:
          [<fib_1030@21:0>;<fib_1030@33:0>;<fib_1030@45:0>]
      end GenHcSolver.classify_pids(17218)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(17253)[4]
        lb:((<fib_1030@21:0> = 3) || (<fib_1030@21:0> = 2))
        nub:(not (<fib_1030@21:0> <> 0))
        lb':((<fib_1030@21:0> = 3) || (<fib_1030@21:0> = 2))
        nub':(not (<fib_1030@21:0> <> 0))
        begin InterpProver.interpolate(17254)[5]
          begin InterpProver.interpolate_fresh(17255)[6]
            begin InterpProver.interpolate_log(17256)[7]
              input1: ((<fib_1030@21:0> = 3) || (<fib_1030@21:0> = 2))
              input2: (not (<fib_1030@21:0> <> 0))
              begin InterpProver.interpolate_check(17257)[8]
                begin InterpProver.interpolate_simplify(17258)[9]
                  begin InterpProver.interpolate_quick(17291)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(17300)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(17301)[12]
                        begin CsisatInterface.interpolate_csisat_log(17302)[13]
                          input1: (2 = v_sep_fib_1030_sep_21_sep_0 | 3 = v_sep_fib_1030_sep_21_sep_0)
                          input2: 0 = v_sep_fib_1030_sep_21_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(17303)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(17303)[14] (0.000000 sec.)
                          output: (-1*v_sep_fib_1030_sep_21_sep_0 <= -2 | -0.666666666667*v_sep_fib_1030_sep_21_sep_0 <= -2)
                          
                        end CsisatInterface.interpolate_csisat_log(17302)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_fib_1030_sep_21_sep_0 <= -6 | -1*v_sep_fib_1030_sep_21_sep_0 <= -2)
                        after dnf conversion: ((-2*v_sep_fib_1030_sep_21_sep_0 <= -6) | (-1*v_sep_fib_1030_sep_21_sep_0 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(17301)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(17300)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(17291)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(17258)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(17257)[8] (0.003000 sec.)
              output: (2 <= <fib_1030@21:0>)
            end InterpProver.interpolate_log(17256)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(17255)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(17254)[5] (0.003000 sec.)
        output:
          P[<fib_1030@21:0>](<fib_1030@21:0>:int) = (2 <= <fib_1030@21:0>)
          P[<fib_1030@33:0>](<fib_1030@21:0>:int) = (2 <= <fib_1030@21:0>)
          P[<fib_1030@45:0>](<fib_1030@21:0>:int) = (2 <= <fib_1030@21:0>)
      end ApronInterface.convex_hull_interpolate(17253)[4] (0.003000 sec.)
      Horn clauses:
        P[<fail_1157@72:0>](<fail_1157@72:0>:bool)|- bot
        
        P[<fib_1030@21:0>](2:int)|- bot
        
         (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
      lower bounds:
        P[<fib_1030@21:0>](<fib_1030@21:0>:int) = (<fib_1030@21:0> = 3)
        P[<fail_1157@72:0>](var95:bool) = false
      upper bounds:
        P[<fail_1157@72:0>](var98:bool) = true
      begin GenHcSolver.classify_pids(18357)[4]
        output:
          [<fail_1157@72:0>]
      end GenHcSolver.classify_pids(18357)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(18360)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(18361)[5]
          begin InterpProver.interpolate_fresh(18362)[6]
            begin InterpProver.interpolate_log(18363)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(18364)[8]
                begin InterpProver.interpolate_simplify(18365)[9]
                  begin InterpProver.interpolate_quick(18378)[10]
                    
                  end InterpProver.interpolate_quick(18378)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(18382)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(18382)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(18365)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(18364)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(18363)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(18362)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(18361)[5] (0.001000 sec.)
        output:
          P[<fail_1157@72:0>](var95:bool) = false
      end ApronInterface.convex_hull_interpolate(18360)[4] (0.001000 sec.)
      Horn clauses:
        P[<fib_1030@21:0>](2:int)|- bot
        
         (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
      lower bounds:
        P[<fib_1030@21:0>](<fib_1030@21:0>:int) = (<fib_1030@21:0> = 3)
      upper bounds:
        P[<fib_1030@21:0>](var99:int) = (var99 <> 2)
      begin GenHcSolver.classify_pids(18803)[4]
        output:
          [<fib_1030@21:0>]
      end GenHcSolver.classify_pids(18803)[4] (0.000000 sec.)
      lb:(<fib_1030@21:0> = 3)
      nub:(not (<fib_1030@21:0> <> 2))
      begin ApronInterface.convex_hull_interpolate(18806)[4]
        lb:(<fib_1030@21:0> = 3)
        nub:(not (<fib_1030@21:0> <> 2))
        lb':(<fib_1030@21:0> = 3)
        nub':(not (<fib_1030@21:0> <> 2))
        begin InterpProver.interpolate(18807)[5]
          begin InterpProver.interpolate_fresh(18808)[6]
            begin InterpProver.interpolate_log(18809)[7]
              input1: (<fib_1030@21:0> = 3)
              input2: (not (<fib_1030@21:0> <> 2))
              begin InterpProver.interpolate_check(18810)[8]
                begin InterpProver.interpolate_simplify(18811)[9]
                  begin InterpProver.interpolate_quick(18832)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(18841)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(18842)[12]
                        begin CsisatInterface.interpolate_csisat_log(18843)[13]
                          input1: 3 = v_sep_fib_1030_sep_21_sep_0
                          input2: 2 = v_sep_fib_1030_sep_21_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(18844)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(18844)[14] (0.000000 sec.)
                          output: -2*v_sep_fib_1030_sep_21_sep_0 <= -6
                          
                        end CsisatInterface.interpolate_csisat_log(18843)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_fib_1030_sep_21_sep_0 <= -6
                        after dnf conversion: ((-2*v_sep_fib_1030_sep_21_sep_0 <= -6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(18842)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(18841)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(18832)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(18811)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(18810)[8] (0.001000 sec.)
              output: (3 <= <fib_1030@21:0>)
            end InterpProver.interpolate_log(18809)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(18808)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(18807)[5] (0.001000 sec.)
        output:
          P[<fib_1030@21:0>](<fib_1030@21:0>:int) = (3 <= <fib_1030@21:0>)
      end ApronInterface.convex_hull_interpolate(18806)[4] (0.001000 sec.)
      begin HcSolver.check_validity(18959)[4]
        input:
          P[<fail_1157@72:0>](<fail_1157@72:0>:bool)|- bot
          
          P[<<fib_1030@21:1>@67:0>](3:int,<f_1154@69:0>:int), ((<f_1154@69:0> < 4) && <fail_1157@72:0>)
          |- P[<fail_1157@72:0>](<fail_1157@72:0>:bool)
          
          P[<fib_1030@21:0>](<fib_1030@21:0>:int),
          P[<<fib_1030@33:1>@41:0>]((-1 + <fib_1030@21:0>):int,var51:int),
          P[<<fib_1030@45:1>@53:0>]((-2 + <fib_1030@21:0>):int,(<<fib_1030@21:1>@67:0> + (-1 * var51)):int),
          (<fib_1030@21:0> > 1) |- P[<<fib_1030@21:1>@67:0>](<fib_1030@21:0>:int,
                                                             <<fib_1030@21:1>@67:0>:int)
          
          P[<fib_1030@45:0>](<fib_1030@45:0>:int), ((<fib_1030@45:0> = 0) && (<<fib_1030@45:1>@53:0> = 1))
          |- P[<<fib_1030@45:1>@53:0>](<fib_1030@45:0>:int,<<fib_1030@45:1>@53:0>:int)
          
          P[<fib_1030@21:0>]((2 + <fib_1030@45:0>):int),
          P[<<fib_1030@33:1>@41:0>]((1 + <fib_1030@45:0>):int,<f_k_fib_1152@43:4>:int), (
          (1 + <fib_1030@45:0>) > 0) |- P[<fib_1030@45:0>](<fib_1030@45:0>:int)
          
          P[<fib_1030@33:0>](<fib_1030@33:0>:int), ((<fib_1030@33:0> = 0) && (<<fib_1030@33:1>@41:0> = 1))
          |- P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int)
          
          P[<fib_1030@21:0>]((1 + <fib_1030@33:0>):int), (<fib_1030@33:0> > 0)
          |- P[<fib_1030@33:0>](<fib_1030@33:0>:int)
          
           (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(18959)[4] (0.001000 sec.)
      solution:
        P[<fail_1157@72:0>](var95:bool) = false
        P[<<fib_1030@21:1>@67:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int) = false
        P[<<fib_1030@45:1>@53:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int) = false
        P[<fib_1030@45:0>](<fib_1030@21:0>:int) = (2 <= <fib_1030@21:0>)
        P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int) = false
        P[<fib_1030@33:0>](<fib_1030@21:0>:int) = (2 <= <fib_1030@21:0>)
        P[<fib_1030@21:0>](<fib_1030@21:0>:int) = (3 <= <fib_1030@21:0>)
    end GenHcSolver.solve(11310)[3] (0.028996 sec.)
    begin GenHcSolver.solve(19381)[3]
      Horn clauses:
        P[<fail_1157@72:0>](<fail_1157@72:0>:bool)|- bot
        
        P[<<fib_1030@21:1>@67:0>](3:int,<f_1154@69:0>:int), ((<f_1154@69:0> < 4) && <fail_1157@72:0>)
        |- P[<fail_1157@72:0>](<fail_1157@72:0>:bool)
        
        P[<fib_1030@21:0>](<fib_1030@21:0>:int),
        P[<<fib_1030@33:1>@41:0>]((-1 + <fib_1030@21:0>):int,var51:int),
        P[<<fib_1030@45:1>@53:0>]((-2 + <fib_1030@21:0>):int,(<<fib_1030@21:1>@67:0> + (-1 * var51)):int),
        (<fib_1030@21:0> > 1) |- P[<<fib_1030@21:1>@67:0>](<fib_1030@21:0>:int,
                                                           <<fib_1030@21:1>@67:0>:int)
        
        P[<fib_1030@45:0>](<fib_1030@45:0>:int), ((<fib_1030@45:0> = 0) && (<<fib_1030@45:1>@53:0> = 1))
        |- P[<<fib_1030@45:1>@53:0>](<fib_1030@45:0>:int,<<fib_1030@45:1>@53:0>:int)
        
        P[<fib_1030@21:0>]((2 + <fib_1030@45:0>):int),
        P[<<fib_1030@33:1>@41:0>]((1 + <fib_1030@45:0>):int,<f_k_fib_1152@43:4>:int), (
        (1 + <fib_1030@45:0>) > 0) |- P[<fib_1030@45:0>](<fib_1030@45:0>:int)
        
        P[<fib_1030@33:0>](<fib_1030@33:0>:int), ((<fib_1030@33:0> = 0) && (<<fib_1030@33:1>@41:0> = 1))
        |- P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int)
        
        P[<fib_1030@21:0>]((1 + <fib_1030@33:0>):int), (<fib_1030@33:0> > 0) |- P[<fib_1030@33:0>](<fib_1030@33:0>:int)
        
         (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
      lower bounds:
        P[<fib_1030@21:0>](<fib_1030@21:0>:int) = (<fib_1030@21:0> = 3)
        P[<fib_1030@33:0>](<fib_1030@33:0>:int) = (<fib_1030@33:0> = 2)
        P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int) = false
        P[<fib_1030@45:0>](<fib_1030@45:0>:int) = false
        P[<<fib_1030@45:1>@53:0>](<fib_1030@45:0>:int,<<fib_1030@45:1>@53:0>:int) = false
        P[<<fib_1030@21:1>@67:0>](<fib_1030@21:0>:int,<<fib_1030@21:1>@67:0>:int) = false
        P[<fail_1157@72:0>](<fail_1157@72:0>:bool) = false
      upper bounds:
        P[<<fib_1030@21:1>@67:0>](var114:int,var115:int) = true
        P[<<fib_1030@45:1>@53:0>](var109:int,var110:int) = true
        P[<<fib_1030@33:1>@41:0>](var104:int,var105:int) = true
      begin GenHcSolver.classify_pids(22303)[4]
        output:
          [<<fib_1030@33:1>@41:0>;<<fib_1030@45:1>@53:0>;<<fib_1030@21:1>@67:0>]
      end GenHcSolver.classify_pids(22303)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(22324)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(22327)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(22327)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(22332)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(22332)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(22335)[5]
          begin InterpProver.interpolate_fresh(22336)[6]
            begin InterpProver.interpolate_log(22337)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(22338)[8]
                begin InterpProver.interpolate_simplify(22339)[9]
                  begin InterpProver.interpolate_quick(22354)[10]
                    
                  end InterpProver.interpolate_quick(22354)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(22358)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(22358)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(22339)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(22338)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(22337)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(22336)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(22335)[5] (0.000000 sec.)
        output:
          P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int) = false
          P[<<fib_1030@45:1>@53:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int) = false
          P[<<fib_1030@21:1>@67:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int) = false
      end ApronInterface.convex_hull_interpolate(22324)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1157@72:0>](<fail_1157@72:0>:bool)|- bot
        
        P[<fib_1030@45:0>](0:int)|- bot
        
        P[<fib_1030@33:0>](0:int)|- bot
        
        P[<fib_1030@21:0>]((1 + <fib_1030@33:0>):int), (<fib_1030@33:0> > 0) |- P[<fib_1030@33:0>](<fib_1030@33:0>:int)
        
         (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
      lower bounds:
        P[<fib_1030@21:0>](<fib_1030@21:0>:int) = (<fib_1030@21:0> = 3)
        P[<fail_1157@72:0>](var122:bool) = false
        P[<fib_1030@45:0>](var123:int) = false
        P[<fib_1030@33:0>](<fib_1030@33:0>:int) = (<fib_1030@33:0> = 2)
      upper bounds:
        P[<fib_1030@45:0>](var138:int) = true
        P[<fib_1030@33:0>](var133:int) = (var133 <> 0)
        P[<fib_1030@21:0>](var128:int) = true
      begin GenHcSolver.classify_pids(25308)[4]
        output:
          [<fib_1030@21:0>;<fib_1030@33:0>;<fib_1030@45:0>]
      end GenHcSolver.classify_pids(25308)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(25343)[4]
        lb:((<fib_1030@21:0> = 3) || (<fib_1030@21:0> = 2))
        nub:(not (<fib_1030@21:0> <> 0))
        begin ExtFormula.Formula.case_analysis_boolean(25355)[5]
          ts: ((<fib_1030@21:0> = 2) || (<fib_1030@21:0> = 3))
          
        end ExtFormula.Formula.case_analysis_boolean(25355)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(25365)[5]
          ts: (<fib_1030@21:0> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(25365)[5] (0.000000 sec.)
        lb':(((3 + (-1 * <fib_1030@21:0>)) >= 0) && ((-2 + <fib_1030@21:0>) >= 0))
        nub':(<fib_1030@21:0> = 0)
        begin InterpProver.interpolate(25369)[5]
          begin InterpProver.interpolate_fresh(25370)[6]
            begin InterpProver.interpolate_log(25371)[7]
              input1: (((3 + (-1 * <fib_1030@21:0>)) >= 0) && ((-2 + <fib_1030@21:0>) >= 0))
              input2: (<fib_1030@21:0> = 0)
              begin InterpProver.interpolate_check(25372)[8]
                begin InterpProver.interpolate_simplify(25373)[9]
                  begin InterpProver.interpolate_quick(25418)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(25427)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(25428)[12]
                        begin CsisatInterface.interpolate_csisat_log(25429)[13]
                          input1: (2 <= v_sep_fib_1030_sep_21_sep_0 & v_sep_fib_1030_sep_21_sep_0 <= 3)
                          input2: 0 = v_sep_fib_1030_sep_21_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(25430)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(25430)[14] (0.000000 sec.)
                          output: -1*v_sep_fib_1030_sep_21_sep_0 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(25429)[13] (0.000000 sec.)
                        after simplification: -1*v_sep_fib_1030_sep_21_sep_0 <= -2
                        after dnf conversion: ((-1*v_sep_fib_1030_sep_21_sep_0 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(25428)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(25427)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(25418)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(25373)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(25372)[8] (0.001000 sec.)
              output: (2 <= <fib_1030@21:0>)
            end InterpProver.interpolate_log(25371)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(25370)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(25369)[5] (0.001000 sec.)
        output:
          P[<fib_1030@21:0>](<fib_1030@21:0>:int) = (2 <= <fib_1030@21:0>)
          P[<fib_1030@33:0>](<fib_1030@21:0>:int) = (2 <= <fib_1030@21:0>)
          P[<fib_1030@45:0>](<fib_1030@21:0>:int) = (2 <= <fib_1030@21:0>)
      end ApronInterface.convex_hull_interpolate(25343)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1157@72:0>](<fail_1157@72:0>:bool)|- bot
        
        P[<fib_1030@21:0>](2:int)|- bot
        
         (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
      lower bounds:
        P[<fib_1030@21:0>](<fib_1030@21:0>:int) = (<fib_1030@21:0> = 3)
        P[<fail_1157@72:0>](var143:bool) = false
      upper bounds:
        P[<fail_1157@72:0>](var146:bool) = true
      begin GenHcSolver.classify_pids(26476)[4]
        output:
          [<fail_1157@72:0>]
      end GenHcSolver.classify_pids(26476)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(26479)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(26482)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(26482)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(26487)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(26487)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(26490)[5]
          begin InterpProver.interpolate_fresh(26491)[6]
            begin InterpProver.interpolate_log(26492)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(26493)[8]
                begin InterpProver.interpolate_simplify(26494)[9]
                  begin InterpProver.interpolate_quick(26509)[10]
                    
                  end InterpProver.interpolate_quick(26509)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(26513)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(26513)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(26494)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(26493)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(26492)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(26491)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(26490)[5] (0.001000 sec.)
        output:
          P[<fail_1157@72:0>](var143:bool) = false
      end ApronInterface.convex_hull_interpolate(26479)[4] (0.001000 sec.)
      Horn clauses:
        P[<fib_1030@21:0>](2:int)|- bot
        
         (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
      lower bounds:
        P[<fib_1030@21:0>](<fib_1030@21:0>:int) = (<fib_1030@21:0> = 3)
      upper bounds:
        P[<fib_1030@21:0>](var147:int) = (var147 <> 2)
      begin GenHcSolver.classify_pids(26941)[4]
        output:
          [<fib_1030@21:0>]
      end GenHcSolver.classify_pids(26941)[4] (0.000000 sec.)
      lb:(<fib_1030@21:0> = 3)
      nub:(not (<fib_1030@21:0> <> 2))
      begin ApronInterface.convex_hull_interpolate(26944)[4]
        lb:(<fib_1030@21:0> = 3)
        nub:(not (<fib_1030@21:0> <> 2))
        begin ExtFormula.Formula.case_analysis_boolean(26949)[5]
          ts: (<fib_1030@21:0> = 3)
          
        end ExtFormula.Formula.case_analysis_boolean(26949)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(26958)[5]
          ts: (<fib_1030@21:0> = 2)
          
        end ExtFormula.Formula.case_analysis_boolean(26958)[5] (0.000000 sec.)
        lb':((-3 + <fib_1030@21:0>) = 0)
        nub':((-2 + <fib_1030@21:0>) = 0)
        begin InterpProver.interpolate(26963)[5]
          begin InterpProver.interpolate_fresh(26964)[6]
            begin InterpProver.interpolate_log(26965)[7]
              input1: ((-3 + <fib_1030@21:0>) = 0)
              input2: ((-2 + <fib_1030@21:0>) = 0)
              begin InterpProver.interpolate_check(26966)[8]
                begin InterpProver.interpolate_simplify(26967)[9]
                  begin InterpProver.interpolate_quick(26988)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(26997)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(26998)[12]
                        begin CsisatInterface.interpolate_csisat_log(26999)[13]
                          input1: 3 = v_sep_fib_1030_sep_21_sep_0
                          input2: 2 = v_sep_fib_1030_sep_21_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(27000)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(27000)[14] (0.000000 sec.)
                          output: -2*v_sep_fib_1030_sep_21_sep_0 <= -6
                          
                        end CsisatInterface.interpolate_csisat_log(26999)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_fib_1030_sep_21_sep_0 <= -6
                        after dnf conversion: ((-2*v_sep_fib_1030_sep_21_sep_0 <= -6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(26998)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(26997)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(26988)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(26967)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(26966)[8] (0.001000 sec.)
              output: (3 <= <fib_1030@21:0>)
            end InterpProver.interpolate_log(26965)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(26964)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(26963)[5] (0.002000 sec.)
        output:
          P[<fib_1030@21:0>](<fib_1030@21:0>:int) = (3 <= <fib_1030@21:0>)
      end ApronInterface.convex_hull_interpolate(26944)[4] (0.002000 sec.)
      begin HcSolver.check_validity(27113)[4]
        input:
          P[<fail_1157@72:0>](<fail_1157@72:0>:bool)|- bot
          
          P[<<fib_1030@21:1>@67:0>](3:int,<f_1154@69:0>:int), ((<f_1154@69:0> < 4) && <fail_1157@72:0>)
          |- P[<fail_1157@72:0>](<fail_1157@72:0>:bool)
          
          P[<fib_1030@21:0>](<fib_1030@21:0>:int),
          P[<<fib_1030@33:1>@41:0>]((-1 + <fib_1030@21:0>):int,var51:int),
          P[<<fib_1030@45:1>@53:0>]((-2 + <fib_1030@21:0>):int,(<<fib_1030@21:1>@67:0> + (-1 * var51)):int),
          (<fib_1030@21:0> > 1) |- P[<<fib_1030@21:1>@67:0>](<fib_1030@21:0>:int,
                                                             <<fib_1030@21:1>@67:0>:int)
          
          P[<fib_1030@45:0>](<fib_1030@45:0>:int), ((<fib_1030@45:0> = 0) && (<<fib_1030@45:1>@53:0> = 1))
          |- P[<<fib_1030@45:1>@53:0>](<fib_1030@45:0>:int,<<fib_1030@45:1>@53:0>:int)
          
          P[<fib_1030@21:0>]((2 + <fib_1030@45:0>):int),
          P[<<fib_1030@33:1>@41:0>]((1 + <fib_1030@45:0>):int,<f_k_fib_1152@43:4>:int), (
          (1 + <fib_1030@45:0>) > 0) |- P[<fib_1030@45:0>](<fib_1030@45:0>:int)
          
          P[<fib_1030@33:0>](<fib_1030@33:0>:int), ((<fib_1030@33:0> = 0) && (<<fib_1030@33:1>@41:0> = 1))
          |- P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int)
          
          P[<fib_1030@21:0>]((1 + <fib_1030@33:0>):int), (<fib_1030@33:0> > 0)
          |- P[<fib_1030@33:0>](<fib_1030@33:0>:int)
          
           (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(27113)[4] (0.002000 sec.)
      solution:
        P[<fail_1157@72:0>](var143:bool) = false
        P[<<fib_1030@21:1>@67:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int) = false
        P[<<fib_1030@45:1>@53:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int) = false
        P[<fib_1030@45:0>](<fib_1030@21:0>:int) = (2 <= <fib_1030@21:0>)
        P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int) = false
        P[<fib_1030@33:0>](<fib_1030@21:0>:int) = (2 <= <fib_1030@21:0>)
        P[<fib_1030@21:0>](<fib_1030@21:0>:int) = (3 <= <fib_1030@21:0>)
    end GenHcSolver.solve(19381)[3] (0.025996 sec.)
    begin YhornInterface.solve(27535)[3]
      begin HcSolver.solve_ub(27536)[4]
        encoded:
          P[<fail_1157@72:0>](<fail_1157@72:0>:int)|- bot
          
          P[<<fib_1030@21:1>@67:0>](3:int,<f_1154@69:0>:int), ((<f_1154@69:0> < 4) && (<fail_1157@72:0> = 1))
          |- P[<fail_1157@72:0>](<fail_1157@72:0>:int)
          
          P[<fib_1030@21:0>](<fib_1030@21:0>:int),
          P[<<fib_1030@33:1>@41:0>]((-1 + <fib_1030@21:0>):int,var51:int),
          P[<<fib_1030@45:1>@53:0>]((-2 + <fib_1030@21:0>):int,(<<fib_1030@21:1>@67:0> + (-1 * var51)):int),
          (<fib_1030@21:0> > 1) |- P[<<fib_1030@21:1>@67:0>](<fib_1030@21:0>:int,
                                                             <<fib_1030@21:1>@67:0>:int)
          
          P[<fib_1030@45:0>](<fib_1030@45:0>:int), ((<fib_1030@45:0> = 0) && (<<fib_1030@45:1>@53:0> = 1))
          |- P[<<fib_1030@45:1>@53:0>](<fib_1030@45:0>:int,<<fib_1030@45:1>@53:0>:int)
          
          P[<fib_1030@21:0>]((2 + <fib_1030@45:0>):int),
          P[<<fib_1030@33:1>@41:0>]((1 + <fib_1030@45:0>):int,<f_k_fib_1152@43:4>:int), (
          (1 + <fib_1030@45:0>) > 0) |- P[<fib_1030@45:0>](<fib_1030@45:0>:int)
          
          P[<fib_1030@33:0>](<fib_1030@33:0>:int), ((<fib_1030@33:0> = 0) && (<<fib_1030@33:1>@41:0> = 1))
          |- P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int)
          
          P[<fib_1030@21:0>]((1 + <fib_1030@33:0>):int), (<fib_1030@33:0> > 0)
          |- P[<fib_1030@33:0>](<fib_1030@33:0>:int)
          
           (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
        input to Yhorn:
          P[<fail_1157@72:0>](<fail_1157@72:0>:int)|- bot
          
          P[<<fib_1030@21:1>@67:0>](var148:int,<f_1154@69:0>:int),
          ((<f_1154@69:0> < 4) && ((var148 = 3) && (<fail_1157@72:0> = 1)))
          |- P[<fail_1157@72:0>](<fail_1157@72:0>:int)
          
          P[<fib_1030@21:0>](<fib_1030@21:0>:int),
          P[<<fib_1030@33:1>@41:0>](var149:int,var51:int),
          P[<<fib_1030@45:1>@53:0>](var150:int,var151:int),
          (((var151 + var51) = <<fib_1030@21:1>@67:0>) &&
           (((2 + var150) = <fib_1030@21:0>) && (((1 + var149) = <fib_1030@21:0>) && (<fib_1030@21:0> > 1))))
          |- P[<<fib_1030@21:1>@67:0>](<fib_1030@21:0>:int,<<fib_1030@21:1>@67:0>:int)
          
          P[<fib_1030@45:0>](<fib_1030@45:0>:int), ((<<fib_1030@45:1>@53:0> = 1) && (<fib_1030@45:0> = 0))
          |- P[<<fib_1030@45:1>@53:0>](<fib_1030@45:0>:int,<<fib_1030@45:1>@53:0>:int)
          
          P[<fib_1030@21:0>](var152:int),
          P[<<fib_1030@33:1>@41:0>](var153:int,<f_k_fib_1152@43:4>:int),
          ((var153 = (1 + <fib_1030@45:0>)) && ((var152 = (2 + <fib_1030@45:0>)) && ((1 + <fib_1030@45:0>) > 0)))
          |- P[<fib_1030@45:0>](<fib_1030@45:0>:int)
          
          P[<fib_1030@33:0>](<fib_1030@33:0>:int), ((<<fib_1030@33:1>@41:0> = 1) && (<fib_1030@33:0> = 0))
          |- P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int)
          
          P[<fib_1030@21:0>](var154:int), ((var154 = (1 + <fib_1030@33:0>)) && (<fib_1030@33:0> > 0))
          |- P[<fib_1030@33:0>](<fib_1030@33:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1157_sep_72_sep_0($85)) -> 1=0.
(($85-1=0) & ($86-3=0) & ($87-4<0)) & (v_sep_fib_1030_sep_21_sep_1_sep_67_sep_0($86,$87)) -> v_sep_fail_1157_sep_72_sep_0($85).
(($88-1>0) & (-$88+$89+1=0) & (-$88+$90+2=0) & ($91+$92-$93=0)) & (v_sep_fib_1030_sep_45_sep_1_sep_53_sep_0($90,$91)) & (v_sep_fib_1030_sep_33_sep_1_sep_41_sep_0($89,$92)) & (v_sep_fib_1030_sep_21_sep_0($88)) -> v_sep_fib_1030_sep_21_sep_1_sep_67_sep_0($88,$93).
(($94=0) & ($95-1=0)) & (v_sep_fib_1030_sep_45_sep_0($94)) -> v_sep_fib_1030_sep_45_sep_1_sep_53_sep_0($94,$95).
(($94+1>0) & (-$94+$96-2=0) & (-$94+$97-1=0)) & (v_sep_fib_1030_sep_33_sep_1_sep_41_sep_0($97,$98)) & (v_sep_fib_1030_sep_21_sep_0($96)) -> v_sep_fib_1030_sep_45_sep_0($94).
(($99=0) & ($100-1=0)) & (v_sep_fib_1030_sep_33_sep_0($99)) -> v_sep_fib_1030_sep_33_sep_1_sep_41_sep_0($99,$100).
(($99>0) & (-$99+$101-1=0)) & (v_sep_fib_1030_sep_21_sep_0($101)) -> v_sep_fib_1030_sep_33_sep_0($99).
$88-3=0 -> v_sep_fib_1030_sep_21_sep_0($88).


v_sep_fail_1157_sep_72_sep_0: X
v_sep_fib_1030_sep_21_sep_0: X
v_sep_fib_1030_sep_21_sep_1_sep_67_sep_0: X
v_sep_fib_1030_sep_33_sep_0: X
v_sep_fib_1030_sep_33_sep_1_sep_41_sep_0: X
v_sep_fib_1030_sep_45_sep_0: X
v_sep_fib_1030_sep_45_sep_1_sep_53_sep_0: X
...........
v_sep_fail_1157_sep_72_sep_0: X
v_sep_fib_1030_sep_21_sep_0: X
v_sep_fib_1030_sep_21_sep_1_sep_67_sep_0: X
v_sep_fib_1030_sep_33_sep_0: X
v_sep_fib_1030_sep_33_sep_1_sep_41_sep_0: X
v_sep_fib_1030_sep_45_sep_0: X
v_sep_fib_1030_sep_45_sep_1_sep_53_sep_0: X
...
v_sep_fail_1157_sep_72_sep_0: X
v_sep_fib_1030_sep_21_sep_0: X
v_sep_fib_1030_sep_21_sep_1_sep_67_sep_0: X
v_sep_fib_1030_sep_33_sep_0: X
v_sep_fib_1030_sep_33_sep_1_sep_41_sep_0: X
v_sep_fib_1030_sep_45_sep_0: X
v_sep_fib_1030_sep_45_sep_1_sep_53_sep_0: X
......
v_sep_fail_1157_sep_72_sep_0: X
v_sep_fib_1030_sep_21_sep_0: X
v_sep_fib_1030_sep_21_sep_1_sep_67_sep_0: X
v_sep_fib_1030_sep_33_sep_0: X
v_sep_fib_1030_sep_33_sep_1_sep_41_sep_0: X
v_sep_fib_1030_sep_45_sep_0: X
v_sep_fib_1030_sep_45_sep_1_sep_53_sep_0: X
........
v_sep_fail_1157_sep_72_sep_0: X
v_sep_fib_1030_sep_21_sep_0: X
v_sep_fib_1030_sep_21_sep_1_sep_67_sep_0: X
v_sep_fib_1030_sep_33_sep_0: X
v_sep_fib_1030_sep_33_sep_1_sep_41_sep_0: X
v_sep_fib_1030_sep_45_sep_0: X
v_sep_fib_1030_sep_45_sep_1_sep_53_sep_0: X
...........(0=0) & (v_sep_fail_1157_sep_72_sep_0($85)) -> 1=0.
(($85-1=0) & ($86-3=0) & ($87-4<0)) & (v_sep_fib_1030_sep_21_sep_1_sep_67_sep_0($86,$87)) -> v_sep_fail_1157_sep_72_sep_0($85).
(($88-1>0) & (-$88+$89+1=0) & (-$88+$90+2=0) & ($91+$92-$93=0)) & (v_sep_fib_1030_sep_45_sep_1_sep_53_sep_0($90,$91)) & (v_sep_fib_1030_sep_33_sep_1_sep_41_sep_0($89,$92)) & (v_sep_fib_1030_sep_21_sep_0($88)) -> v_sep_fib_1030_sep_21_sep_1_sep_67_sep_0($88,$93).
(($94=0) & ($95-1=0)) & (v_sep_fib_1030_sep_45_sep_0($94)) -> v_sep_fib_1030_sep_45_sep_1_sep_53_sep_0($94,$95).
(($94+1>0) & (-$94+$96-2=0) & (-$94+$97-1=0)) & (v_sep_fib_1030_sep_33_sep_1_sep_41_sep_0($97,$98)) & (v_sep_fib_1030_sep_21_sep_0($96)) -> v_sep_fib_1030_sep_45_sep_0($94).
(($99=0) & ($100-1=0)) & (v_sep_fib_1030_sep_33_sep_0($99)) -> v_sep_fib_1030_sep_33_sep_1_sep_41_sep_0($99,$100).
(($99>0) & (-$99+$101-1=0)) & (v_sep_fib_1030_sep_21_sep_0($101)) -> v_sep_fib_1030_sep_33_sep_0($99).
$88-3=0 -> v_sep_fib_1030_sep_21_sep_0($88).

           (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
        solution:
          P[<fail_1157@72:0>]($102:bool) = false
          P[<fib_1030@21:0>]($120:int) = true
          P[<<fib_1030@21:1>@67:0>]($105:int,$107:int) = false
          P[<fib_1030@33:0>]($126:int) = (1 <= $126)
          P[<<fib_1030@33:1>@41:0>]($115:int,$117:int) = false
          P[<fib_1030@45:0>]($123:int) = false
          P[<<fib_1030@45:1>@53:0>]($110:int,$112:int) = false
        
      end HcSolver.solve_ub(27536)[4] (0.022996 sec.)
      begin HcSolver.check_validity(28034)[4]
        input:
          P[<fail_1157@72:0>](<fail_1157@72:0>:bool)|- bot
          
          P[<<fib_1030@21:1>@67:0>](3:int,<f_1154@69:0>:int), ((<f_1154@69:0> < 4) && <fail_1157@72:0>)
          |- P[<fail_1157@72:0>](<fail_1157@72:0>:bool)
          
          P[<fib_1030@21:0>](<fib_1030@21:0>:int),
          P[<<fib_1030@33:1>@41:0>]((-1 + <fib_1030@21:0>):int,var51:int),
          P[<<fib_1030@45:1>@53:0>]((-2 + <fib_1030@21:0>):int,(<<fib_1030@21:1>@67:0> + (-1 * var51)):int),
          (<fib_1030@21:0> > 1) |- P[<<fib_1030@21:1>@67:0>](<fib_1030@21:0>:int,
                                                             <<fib_1030@21:1>@67:0>:int)
          
          P[<fib_1030@45:0>](<fib_1030@45:0>:int), ((<fib_1030@45:0> = 0) && (<<fib_1030@45:1>@53:0> = 1))
          |- P[<<fib_1030@45:1>@53:0>](<fib_1030@45:0>:int,<<fib_1030@45:1>@53:0>:int)
          
          P[<fib_1030@21:0>]((2 + <fib_1030@45:0>):int),
          P[<<fib_1030@33:1>@41:0>]((1 + <fib_1030@45:0>):int,<f_k_fib_1152@43:4>:int), (
          (1 + <fib_1030@45:0>) > 0) |- P[<fib_1030@45:0>](<fib_1030@45:0>:int)
          
          P[<fib_1030@33:0>](<fib_1030@33:0>:int), ((<fib_1030@33:0> = 0) && (<<fib_1030@33:1>@41:0> = 1))
          |- P[<<fib_1030@33:1>@41:0>](<fib_1030@33:0>:int,<<fib_1030@33:1>@41:0>:int)
          
          P[<fib_1030@21:0>]((1 + <fib_1030@33:0>):int), (<fib_1030@33:0> > 0)
          |- P[<fib_1030@33:0>](<fib_1030@33:0>:int)
          
           (<fib_1030@21:0> = 3) |- P[<fib_1030@21:0>](<fib_1030@21:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(28034)[4] (0.003000 sec.)
      solution:
        P[<fail_1157@72:0>]($102:bool) = false
        P[<fib_1030@21:0>]($120:int) = true
        P[<<fib_1030@21:1>@67:0>]($105:int,$107:int) = false
        P[<fib_1030@33:0>]($126:int) = (1 <= $126)
        P[<<fib_1030@33:1>@41:0>]($115:int,$117:int) = false
        P[<fib_1030@45:0>]($123:int) = false
        P[<<fib_1030@45:1>@53:0>]($110:int,$112:int) = false
    end YhornInterface.solve(27535)[3] (0.025996 sec.)
    
  end RefTypeInfer.infer_etrs(6781)[2] (0.151977 sec.)
  refinement types:
    main_1151: X
    fib_1030: v1:{v1:int | (3 <= v1)} -> (v2:{v2:int | false} -> X) -> X
    k_fib_1084: v1:int -> (v2:int -> X) -> v4:bool -> X
    br_k_fib_1155: v1:bool -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_fib_1088: v1:bool -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fib_1030: v1:{v1:int | (2 <= v1)} -> (v2:{v2:int | false} -> X) -> X
    k_fib_1084: v1:int -> (v2:int -> X) -> v4:bool -> X
    f_k_fib_1152: v1:bool -> v2:bool -> v3:int -> (v4:int -> X) -> v6:int -> X
    fib_1030: v1:{v1:int | (2 <= v1)} -> (v2:{v2:int | false} -> X) -> X
    k_fib_1084: v1:int -> (v2:int -> X) -> v4:bool -> X
    f_k_fib_1153: v1:bool -> v2:bool -> v3:int -> v4:int -> (v5:int -> X) -> v7:int -> X
    f_1154: v1:int -> X
    fail_1157: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    k_main_1148: var158:unit -> X
  abstraction types:
    main_1151: X
    fib_1030: var163:int[var163 -> (3 <= var163),
                         var163 -> (2 <= var163)] -> (var164:int -> X) -> X
    k_fib_1084: var172:int -> (var173:int -> X) -> var175:bool -> X
    br_k_fib_1155: v1:bool -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_fib_1088: v1:bool -> v2:int -> (v3:int -> X) -> v5:bool -> X
    f_k_fib_1152: v1:bool -> v2:bool -> v3:int -> (v4:int -> X) -> v6:int -> X
    f_k_fib_1153: v1:bool -> v2:bool -> v3:int -> v4:int -> (v5:int -> X) -> v7:int -> X
    f_1154: v1:int -> X
    fail_1157: v1:bool -> (v2:unit -> X) -> X
    k_main_1148: var158:unit -> X
  
end AbsTypeInfer.refine(6780)[1] (0.156976 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 1; 0; 1; 0; 0

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1151
  main_1151 -> (fib_1030 3 f_1154)
  br_k_fib_1155 b_1156 n_1031 k_fib_1081 b_1121 when b_1156 -> (k_fib_1088 b_1121 n_1031 k_fib_1081 (n_1031 <= 1))
  br_k_fib_1155 b_1156 n_1031 k_fib_1081 b_1121 when (not b_1156) -> (k_fib_1088 b_1121 n_1031 k_fib_1081 false)
  f_1154 x_1127 when (x_1127 >= 4) -> (k_main_1148 ())
  f_1154 x_1127 when (not (x_1127 >= 4)) -> (fail_1157 true k_main_1148)
  f_k_fib_1152 b_1117 b_1121 n_1031 k_fib_1081 x_1092 ->
      (fib_1030 (n_1031 - 2) (f_k_fib_1153 b_1117 b_1121 n_1031 x_1092 k_fib_1081))
  f_k_fib_1153 b_1117 b_1121 n_1031 x_1092 k_fib_1081 x_1093 -> (k_fib_1081 (x_1092 + x_1093))
  fail_1157 b k -> {fail} => (k ())
  fib_1030 n_1031 k_fib_1081 when (n_1031 >= 0) -> (k_fib_1084 n_1031 k_fib_1081 (n_1031 <= 0))
  fib_1030 n_1031 k_fib_1081 when (not (n_1031 >= 0)) -> (k_fib_1084 n_1031 k_fib_1081 false)
  k_fib_1084 n_1031 k_fib_1081 b_1121 when b_1121 -> (k_fib_1081 1)
  k_fib_1084 n_1031 k_fib_1081 b_1121 when (not b_1121) -> (br_k_fib_1155 (n_1031 >= 1) n_1031 k_fib_1081 b_1121)
  k_fib_1088 b_1121 n_1031 k_fib_1081 b_1117 when b_1117 -> (k_fib_1081 1)
  k_fib_1088 b_1121 n_1031 k_fib_1081 b_1117 when (not b_1117) ->
      (fib_1030 (n_1031 - 1) (f_k_fib_1152 b_1117 b_1121 n_1031 k_fib_1081))
  k_main_1148 x_1124 -> end
Types:
  main_1151 : X
  fail_1157 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fib_1030 : (x_1:int[x_1 >= 2; x_1 >= 3] -> (int -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1151 ... --> 
  fib_1030 [1/2] ... --> 
  k_fib_1084 [2/2] ... --> 
  br_k_fib_1155 [1/2] ... --> 
  k_fib_1088 [2/2] ... --> 
  fib_1030 [1/2] ... --> 
  k_fib_1084 [2/2] ... --> 
  br_k_fib_1155 [1/2] ... --> 
  k_fib_1088 [2/2] ... --> 
  fib_1030 [1/2] ... --> 
  k_fib_1084 [1/2] ... --> 
  f_k_fib_1152 ... --> 
  fib_1030 [1/2] ... --> 
  k_fib_1084 [1/2] ... --> 
  f_k_fib_1153 ... --> 
  f_k_fib_1152 ... --> 
  fib_1030 [1/2] ... --> 
  k_fib_1084 [1/2] ... --> 
  f_k_fib_1153 ... --> 
  f_1154 [2/2] ... --> 
  fail_1157 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 1; 0; 1; 0; 1; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(29346)[1]
  program:
    main_1151  | true = (fib_1030 3
                                  f_1154)
    br_k_fib_1155 b_1156 n_1031 k_fib_1081 b_1121 | b_1156 = (k_fib_1088 b_1121
                                                                    n_1031
                                                                    k_fib_1081
                                                                    (n_1031 <= 1))
    br_k_fib_1155 b_1156 n_1031 k_fib_1081 b_1121 | (not b_1156) = (k_fib_1088 b_1121
                                                                    n_1031
                                                                    k_fib_1081
                                                                    false)
    f_1154 x_1127 | (x_1127 >= 4) = (k_main_1148 ())
    f_1154 x_1127 | (not (x_1127 >= 4)) = (fail_1157 true
                                                     k_main_1148)
    f_k_fib_1152 b_1117 b_1121 n_1031 k_fib_1081 x_1092 | true = (fib_1030
                                                                    (
                                                                    n_1031 - 2)
                                                                    (
                                                                    f_k_fib_1153 
                                                                    b_1117
                                                                    b_1121
                                                                    n_1031
                                                                    x_1092
                                                                    k_fib_1081))
    f_k_fib_1153 b_1117 b_1121 n_1031 x_1092 k_fib_1081 x_1093 | true = (
    k_fib_1081 (x_1092 + x_1093))
    fail_1157 b k | true = (fail ())
    fib_1030 n_1031 k_fib_1081 | (n_1031 >= 0) = (k_fib_1084 n_1031
                                                             k_fib_1081
                                                             (n_1031 <= 0))
    fib_1030 n_1031 k_fib_1081 | (not (n_1031 >= 0)) = (k_fib_1084 n_1031
                                                                   k_fib_1081
                                                                   false)
    k_fib_1084 n_1031 k_fib_1081 b_1121 | b_1121 = (k_fib_1081 1)
    k_fib_1084 n_1031 k_fib_1081 b_1121 | (not b_1121) = (br_k_fib_1155 (
                                                                    n_1031 >= 1)
                                                                    n_1031
                                                                    k_fib_1081
                                                                    b_1121)
    k_fib_1088 b_1121 n_1031 k_fib_1081 b_1117 | b_1117 = (k_fib_1081 1)
    k_fib_1088 b_1121 n_1031 k_fib_1081 b_1117 | (not b_1117) = (fib_1030
                                                                   (n_1031 - 1)
                                                                   (f_k_fib_1152 b_1117
                                                                    b_1121
                                                                    n_1031
                                                                    k_fib_1081))
    k_main_1148 x_1124 | true = end
    main_1151:X
    br_k_fib_1155:bool -> int -> (int -> X) -> bool -> X
    f_1154:int -> X
    f_k_fib_1152:bool -> bool -> int -> (int -> X) -> int -> X
    f_k_fib_1153:bool -> bool -> int -> int -> (int -> X) -> int -> X
    fail_1157:bool -> (unit -> X) -> X
    fib_1030:int -> (int -> X) -> X
    k_fib_1084:int -> (int -> X) -> bool -> X
    k_fib_1088:bool -> int -> (int -> X) -> bool -> X
    k_main_1148:unit -> X
  inlined functions: br_k_fib_1155,f_1154,f_k_fib_1152,f_k_fib_1153,k_fib_1084,k_fib_1088,k_main_1148
  counterexample: 0:0:1:0:1:0:1:0:1:0:0:0:0:0:0:0:0:0:0:1:0
  error traces:
    [true.(<fib_1030@77:0> = 3)
     [(<fib_1030@77:0> >= 0).((<k_fib_1084@80:0> = <fib_1030@77:0>) && (<k_fib_1084@80:2> = (<fib_1030@77:0> <= 0)))
      [(not <k_fib_1084@80:2>).
       ((<br_k_fib_1155@83:0> = (<k_fib_1084@80:0> >= 1)) &&
        ((<br_k_fib_1155@83:1> = <k_fib_1084@80:0>) && (<br_k_fib_1155@83:3> = <k_fib_1084@80:2>)))
       [<br_k_fib_1155@83:0>.
        ((<k_fib_1088@86:0> = <br_k_fib_1155@83:3>) &&
         ((<k_fib_1088@86:1> = <br_k_fib_1155@83:1>) && (<k_fib_1088@86:3> = (<br_k_fib_1155@83:1> <= 1))))
        [(not <k_fib_1088@86:3>).(<fib_1030@89:0> = (<k_fib_1088@86:1> - 1))
         [(<fib_1030@89:0> >= 0).
          ((<k_fib_1084@92:0> = <fib_1030@89:0>) && (<k_fib_1084@92:2> = (<fib_1030@89:0> <= 0)))
          [(not <k_fib_1084@92:2>).
           ((<br_k_fib_1155@95:0> = (<k_fib_1084@92:0> >= 1)) &&
            ((<br_k_fib_1155@95:1> = <k_fib_1084@92:0>) && (<br_k_fib_1155@95:3> = <k_fib_1084@92:2>)))
           [<br_k_fib_1155@95:0>.
            ((<k_fib_1088@98:0> = <br_k_fib_1155@95:3>) &&
             ((<k_fib_1088@98:1> = <br_k_fib_1155@95:1>) && (<k_fib_1088@98:3> = (<br_k_fib_1155@95:1> <= 1))))
            [(not <k_fib_1088@98:3>).(<fib_1030@101:0> = (<k_fib_1088@98:1> - 1))
             [(<fib_1030@101:0> >= 0).
              ((<k_fib_1084@104:0> = <fib_1030@101:0>) && (<k_fib_1084@104:2> = (<fib_1030@101:0> <= 0)))
              [<k_fib_1084@104:2>.(<<k_fib_1084@104:1>@107:0> = 1)
               [true.(<<fib_1030@101:1>@109:0> = <<k_fib_1084@104:1>@107:0>)
                [true.
                 ((<f_k_fib_1152@111:0> = <k_fib_1088@98:3>) &&
                  ((<f_k_fib_1152@111:1> = <k_fib_1088@98:0>) &&
                   ((<f_k_fib_1152@111:2> = <k_fib_1088@98:1>) && (<f_k_fib_1152@111:4> = <<fib_1030@101:1>@109:0>))))
                 [true.(<fib_1030@113:0> = (<f_k_fib_1152@111:2> - 2))
                  [(<fib_1030@113:0> >= 0).
                   ((<k_fib_1084@116:0> = <fib_1030@113:0>) && (<k_fib_1084@116:2> = (<fib_1030@113:0> <= 0)))
                   [<k_fib_1084@116:2>.(<<k_fib_1084@116:1>@119:0> = 1)
                    [true.(<<fib_1030@113:1>@121:0> = <<k_fib_1084@116:1>@119:0>)
                     [true.
                      ((<f_k_fib_1153@123:0> = <f_k_fib_1152@111:0>) &&
                       ((<f_k_fib_1153@123:1> = <f_k_fib_1152@111:1>) &&
                        ((<f_k_fib_1153@123:2> = <f_k_fib_1152@111:2>) &&
                         ((<f_k_fib_1153@123:3> = <f_k_fib_1152@111:4>) &&
                          (<f_k_fib_1153@123:5> = <<fib_1030@113:1>@121:0>)))))
                      [true.(<<f_k_fib_1153@123:4>@125:0> = (<f_k_fib_1153@123:3> + <f_k_fib_1153@123:5>))
                       [true.(<<f_k_fib_1152@111:3>@127:0> = <<f_k_fib_1153@123:4>@125:0>)
                        [true.(<<k_fib_1088@98:2>@129:0> = <<f_k_fib_1152@111:3>@127:0>)
                         [true.(<<br_k_fib_1155@95:2>@131:0> = <<k_fib_1088@98:2>@129:0>)
                          [true.(<<k_fib_1084@92:1>@133:0> = <<br_k_fib_1155@95:2>@131:0>)
                           [true.(<<fib_1030@89:1>@135:0> = <<k_fib_1084@92:1>@133:0>)
                            [true.
                             ((<f_k_fib_1152@137:0> = <k_fib_1088@86:3>) &&
                              ((<f_k_fib_1152@137:1> = <k_fib_1088@86:0>) &&
                               ((<f_k_fib_1152@137:2> = <k_fib_1088@86:1>) &&
                                (<f_k_fib_1152@137:4> = <<fib_1030@89:1>@135:0>))))
                             [true.(<fib_1030@139:0> = (<f_k_fib_1152@137:2> - 2))
                              [(<fib_1030@139:0> >= 0).
                               ((<k_fib_1084@142:0> = <fib_1030@139:0>) &&
                                (<k_fib_1084@142:2> = (<fib_1030@139:0> <= 0)))
                               [<k_fib_1084@142:2>.(<<k_fib_1084@142:1>@145:0> = 1)
                                [true.(<<fib_1030@139:1>@147:0> = <<k_fib_1084@142:1>@145:0>)
                                 [true.
                                  ((<f_k_fib_1153@149:0> = <f_k_fib_1152@137:0>) &&
                                   ((<f_k_fib_1153@149:1> = <f_k_fib_1152@137:1>) &&
                                    ((<f_k_fib_1153@149:2> = <f_k_fib_1152@137:2>) &&
                                     ((<f_k_fib_1153@149:3> = <f_k_fib_1152@137:4>) &&
                                      (<f_k_fib_1153@149:5> = <<fib_1030@139:1>@147:0>)))))
                                  [true.(<<f_k_fib_1153@149:4>@151:0> = (<f_k_fib_1153@149:3> + <f_k_fib_1153@149:5>))
                                   [true.(<<f_k_fib_1152@137:3>@153:0> = <<f_k_fib_1153@149:4>@151:0>)
                                    [true.(<<k_fib_1088@86:2>@155:0> = <<f_k_fib_1152@137:3>@153:0>)
                                     [true.(<<br_k_fib_1155@83:2>@157:0> = <<k_fib_1088@86:2>@155:0>)
                                      [true.(<<k_fib_1084@80:1>@159:0> = <<br_k_fib_1155@83:2>@157:0>)
                                       [true.(<<fib_1030@77:1>@161:0> = <<k_fib_1084@80:1>@159:0>)
                                        [true.(<f_1154@163:0> = <<fib_1030@77:1>@161:0>)
                                         [(not (<f_1154@163:0> >= 4)).(<fail_1157@166:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(29347)[2]
    horn clauses:
      P[<fail_1157@166:0>](<fail_1157@166:0>:bool)|- bot
      
      P[<f_1154@163:0>](<f_1154@163:0>:int), ((<f_1154@163:0> < 4) && <fail_1157@166:0>)
      |- P[<fail_1157@166:0>](<fail_1157@166:0>:bool)
      
      P[<<fib_1030@77:1>@161:0>](3:int,<f_1154@163:0>:int)|- P[<f_1154@163:0>](<f_1154@163:0>:int)
      
      P[<fib_1030@77:0>](<fib_1030@77:0>:int),
      P[<<k_fib_1084@80:1>@159:0>](<fib_1030@77:0>:int,<<fib_1030@77:1>@161:0>:int), (
      <fib_1030@77:0> >= 0) |- P[<<fib_1030@77:1>@161:0>](<fib_1030@77:0>:int,
                                                          <<fib_1030@77:1>@161:0>:int)
      
      P[<k_fib_1084@80:2>](<k_fib_1084@80:0>:int,false:bool),
      P[<<br_k_fib_1155@83:2>@157:0>]((<k_fib_1084@80:0> >= 1):bool,<k_fib_1084@80:0>:int,<<k_fib_1084@80:1>@159:0>:int)|- P[<<k_fib_1084@80:1>@159:0>](
      <k_fib_1084@80:0>:int,<<k_fib_1084@80:1>@159:0>:int)
      
      P[<br_k_fib_1155@83:3>](<br_k_fib_1155@83:0>:bool,<br_k_fib_1155@83:1>:int,<k_fib_1088@86:0>:bool),
      P[<<k_fib_1088@86:2>@155:0>](<k_fib_1088@86:0>:bool,<br_k_fib_1155@83:1>:int,<<br_k_fib_1155@83:2>@157:0>:int),
      <br_k_fib_1155@83:0>
      |- P[<<br_k_fib_1155@83:2>@157:0>](<br_k_fib_1155@83:0>:bool,<br_k_fib_1155@83:1>:int,
                                         <<br_k_fib_1155@83:2>@157:0>:int)
      
      P[<k_fib_1088@86:3>](<k_fib_1088@86:0>:bool,<k_fib_1088@86:1>:int,false:bool),
      P[<<f_k_fib_1152@137:3>@153:0>](false:bool,<k_fib_1088@86:0>:bool,<k_fib_1088@86:1>:int,<<k_fib_1088@86:2>@155:0>:int)|- P[<<k_fib_1088@86:2>@155:0>](
      <k_fib_1088@86:0>:bool,<k_fib_1088@86:1>:int,<<k_fib_1088@86:2>@155:0>:int)
      
      P[<f_k_fib_1152@137:4>](<f_k_fib_1152@137:0>:bool,<f_k_fib_1152@137:1>:bool,<f_k_fib_1152@137:2>:int,<f_k_fib_1153@149:3>:int),
      P[<<f_k_fib_1153@149:4>@151:0>](<f_k_fib_1152@137:0>:bool,<f_k_fib_1152@137:1>:bool,<f_k_fib_1152@137:2>:int,<f_k_fib_1153@149:3>:int,<<f_k_fib_1152@137:3>@153:0>:int)|- P[<<f_k_fib_1152@137:3>@153:0>](
      <f_k_fib_1152@137:0>:bool,<f_k_fib_1152@137:1>:bool,<f_k_fib_1152@137:2>:int,
      <<f_k_fib_1152@137:3>@153:0>:int)
      
      P[<f_k_fib_1153@149:5>](<f_k_fib_1153@149:0>:bool,<f_k_fib_1153@149:1>:bool,<f_k_fib_1153@149:2>:int,<f_k_fib_1153@149:3>:int,(
                              <<f_k_fib_1153@149:4>@151:0> + (-1 * <f_k_fib_1153@149:3>)):int)|- P[<<f_k_fib_1153@149:4>@151:0>](
      <f_k_fib_1153@149:0>:bool,<f_k_fib_1153@149:1>:bool,<f_k_fib_1153@149:2>:int,
      <f_k_fib_1153@149:3>:int,<<f_k_fib_1153@149:4>@151:0>:int)
      
      P[<f_k_fib_1152@137:4>](<f_k_fib_1153@149:0>:bool,<f_k_fib_1153@149:1>:bool,<f_k_fib_1153@149:2>:int,<f_k_fib_1153@149:3>:int),
      P[<<fib_1030@139:1>@147:0>]((-2 + <f_k_fib_1153@149:2>):int,<f_k_fib_1153@149:5>:int)|- P[<f_k_fib_1153@149:5>](
      <f_k_fib_1153@149:0>:bool,<f_k_fib_1153@149:1>:bool,<f_k_fib_1153@149:2>:int,
      <f_k_fib_1153@149:3>:int,<f_k_fib_1153@149:5>:int)
      
      P[<fib_1030@139:0>](<fib_1030@139:0>:int),
      P[<<k_fib_1084@142:1>@145:0>](<fib_1030@139:0>:int,<<fib_1030@139:1>@147:0>:int), (
      <fib_1030@139:0> >= 0) |- P[<<fib_1030@139:1>@147:0>](<fib_1030@139:0>:int,
                                                            <<fib_1030@139:1>@147:0>:int)
      
      P[<k_fib_1084@142:2>](<k_fib_1084@142:0>:int,true:bool), (<<k_fib_1084@142:1>@145:0> = 1)
      |- P[<<k_fib_1084@142:1>@145:0>](<k_fib_1084@142:0>:int,<<k_fib_1084@142:1>@145:0>:int)
      
      P[<fib_1030@139:0>](<k_fib_1084@142:0>:int),
      ((<k_fib_1084@142:0> >= 0) && (<k_fib_1084@142:2> = (<k_fib_1084@142:0> <= 0)))
      |- P[<k_fib_1084@142:2>](<k_fib_1084@142:0>:int,<k_fib_1084@142:2>:bool)
      
      P[<f_k_fib_1152@137:4>](<f_k_fib_1152@137:0>:bool,<f_k_fib_1152@137:1>:bool,(
                              2 + <fib_1030@139:0>):int,<f_k_fib_1152@137:4>:int)|- P[<fib_1030@139:0>](
      <fib_1030@139:0>:int)
      
      P[<k_fib_1088@86:3>](<f_k_fib_1152@137:1>:bool,<f_k_fib_1152@137:2>:int,<f_k_fib_1152@137:0>:bool),
      P[<<fib_1030@89:1>@135:0>]((-1 + <f_k_fib_1152@137:2>):int,<f_k_fib_1152@137:4>:int), (
      not <f_k_fib_1152@137:0>)
      |- P[<f_k_fib_1152@137:4>](<f_k_fib_1152@137:0>:bool,<f_k_fib_1152@137:1>:bool,
                                 <f_k_fib_1152@137:2>:int,<f_k_fib_1152@137:4>:int)
      
      P[<fib_1030@89:0>](<fib_1030@89:0>:int),
      P[<<k_fib_1084@92:1>@133:0>](<fib_1030@89:0>:int,<<fib_1030@89:1>@135:0>:int), (
      <fib_1030@89:0> >= 0) |- P[<<fib_1030@89:1>@135:0>](<fib_1030@89:0>:int,
                                                          <<fib_1030@89:1>@135:0>:int)
      
      P[<k_fib_1084@92:2>](<k_fib_1084@92:0>:int,false:bool),
      P[<<br_k_fib_1155@95:2>@131:0>]((<k_fib_1084@92:0> >= 1):bool,<k_fib_1084@92:0>:int,<<k_fib_1084@92:1>@133:0>:int)|- P[<<k_fib_1084@92:1>@133:0>](
      <k_fib_1084@92:0>:int,<<k_fib_1084@92:1>@133:0>:int)
      
      P[<br_k_fib_1155@95:3>](<br_k_fib_1155@95:0>:bool,<br_k_fib_1155@95:1>:int,<k_fib_1088@98:0>:bool),
      P[<<k_fib_1088@98:2>@129:0>](<k_fib_1088@98:0>:bool,<br_k_fib_1155@95:1>:int,<<br_k_fib_1155@95:2>@131:0>:int),
      <br_k_fib_1155@95:0>
      |- P[<<br_k_fib_1155@95:2>@131:0>](<br_k_fib_1155@95:0>:bool,<br_k_fib_1155@95:1>:int,
                                         <<br_k_fib_1155@95:2>@131:0>:int)
      
      P[<k_fib_1088@98:3>](<k_fib_1088@98:0>:bool,<k_fib_1088@98:1>:int,false:bool),
      P[<<f_k_fib_1152@111:3>@127:0>](false:bool,<k_fib_1088@98:0>:bool,<k_fib_1088@98:1>:int,<<k_fib_1088@98:2>@129:0>:int)|- P[<<k_fib_1088@98:2>@129:0>](
      <k_fib_1088@98:0>:bool,<k_fib_1088@98:1>:int,<<k_fib_1088@98:2>@129:0>:int)
      
      P[<f_k_fib_1152@111:4>](<f_k_fib_1152@111:0>:bool,<f_k_fib_1152@111:1>:bool,<f_k_fib_1152@111:2>:int,<f_k_fib_1153@123:3>:int),
      P[<<f_k_fib_1153@123:4>@125:0>](<f_k_fib_1152@111:0>:bool,<f_k_fib_1152@111:1>:bool,<f_k_fib_1152@111:2>:int,<f_k_fib_1153@123:3>:int,<<f_k_fib_1152@111:3>@127:0>:int)|- P[<<f_k_fib_1152@111:3>@127:0>](
      <f_k_fib_1152@111:0>:bool,<f_k_fib_1152@111:1>:bool,<f_k_fib_1152@111:2>:int,
      <<f_k_fib_1152@111:3>@127:0>:int)
      
      P[<f_k_fib_1153@123:5>](<f_k_fib_1153@123:0>:bool,<f_k_fib_1153@123:1>:bool,<f_k_fib_1153@123:2>:int,<f_k_fib_1153@123:3>:int,(
                              <<f_k_fib_1153@123:4>@125:0> + (-1 * <f_k_fib_1153@123:3>)):int)|- P[<<f_k_fib_1153@123:4>@125:0>](
      <f_k_fib_1153@123:0>:bool,<f_k_fib_1153@123:1>:bool,<f_k_fib_1153@123:2>:int,
      <f_k_fib_1153@123:3>:int,<<f_k_fib_1153@123:4>@125:0>:int)
      
      P[<f_k_fib_1152@111:4>](<f_k_fib_1153@123:0>:bool,<f_k_fib_1153@123:1>:bool,<f_k_fib_1153@123:2>:int,<f_k_fib_1153@123:3>:int),
      P[<<fib_1030@113:1>@121:0>]((-2 + <f_k_fib_1153@123:2>):int,<f_k_fib_1153@123:5>:int)|- P[<f_k_fib_1153@123:5>](
      <f_k_fib_1153@123:0>:bool,<f_k_fib_1153@123:1>:bool,<f_k_fib_1153@123:2>:int,
      <f_k_fib_1153@123:3>:int,<f_k_fib_1153@123:5>:int)
      
      P[<fib_1030@113:0>](<fib_1030@113:0>:int),
      P[<<k_fib_1084@116:1>@119:0>](<fib_1030@113:0>:int,<<fib_1030@113:1>@121:0>:int), (
      <fib_1030@113:0> >= 0) |- P[<<fib_1030@113:1>@121:0>](<fib_1030@113:0>:int,
                                                            <<fib_1030@113:1>@121:0>:int)
      
      P[<k_fib_1084@116:2>](<k_fib_1084@116:0>:int,true:bool), (<<k_fib_1084@116:1>@119:0> = 1)
      |- P[<<k_fib_1084@116:1>@119:0>](<k_fib_1084@116:0>:int,<<k_fib_1084@116:1>@119:0>:int)
      
      P[<fib_1030@113:0>](<k_fib_1084@116:0>:int),
      ((<k_fib_1084@116:0> >= 0) && (<k_fib_1084@116:2> = (<k_fib_1084@116:0> <= 0)))
      |- P[<k_fib_1084@116:2>](<k_fib_1084@116:0>:int,<k_fib_1084@116:2>:bool)
      
      P[<f_k_fib_1152@111:4>](<f_k_fib_1152@111:0>:bool,<f_k_fib_1152@111:1>:bool,(
                              2 + <fib_1030@113:0>):int,<f_k_fib_1152@111:4>:int)|- P[<fib_1030@113:0>](
      <fib_1030@113:0>:int)
      
      P[<k_fib_1088@98:3>](<f_k_fib_1152@111:1>:bool,<f_k_fib_1152@111:2>:int,<f_k_fib_1152@111:0>:bool),
      P[<<fib_1030@101:1>@109:0>]((-1 + <f_k_fib_1152@111:2>):int,<f_k_fib_1152@111:4>:int), (
      not <f_k_fib_1152@111:0>)
      |- P[<f_k_fib_1152@111:4>](<f_k_fib_1152@111:0>:bool,<f_k_fib_1152@111:1>:bool,
                                 <f_k_fib_1152@111:2>:int,<f_k_fib_1152@111:4>:int)
      
      P[<fib_1030@101:0>](<fib_1030@101:0>:int),
      P[<<k_fib_1084@104:1>@107:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int), (
      <fib_1030@101:0> >= 0) |- P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,
                                                            <<fib_1030@101:1>@109:0>:int)
      
      P[<k_fib_1084@104:2>](<k_fib_1084@104:0>:int,true:bool), (<<k_fib_1084@104:1>@107:0> = 1)
      |- P[<<k_fib_1084@104:1>@107:0>](<k_fib_1084@104:0>:int,<<k_fib_1084@104:1>@107:0>:int)
      
      P[<fib_1030@101:0>](<k_fib_1084@104:0>:int),
      ((<k_fib_1084@104:0> >= 0) && (<k_fib_1084@104:2> = (<k_fib_1084@104:0> <= 0)))
      |- P[<k_fib_1084@104:2>](<k_fib_1084@104:0>:int,<k_fib_1084@104:2>:bool)
      
      P[<k_fib_1088@98:3>](<k_fib_1088@98:0>:bool,(1 + <fib_1030@101:0>):int,false:bool)|- P[<fib_1030@101:0>](
      <fib_1030@101:0>:int)
      
      P[<br_k_fib_1155@95:3>](true:bool,<k_fib_1088@98:1>:int,<k_fib_1088@98:0>:bool),
      (<k_fib_1088@98:3> = (<k_fib_1088@98:1> <= 1))
      |- P[<k_fib_1088@98:3>](<k_fib_1088@98:0>:bool,<k_fib_1088@98:1>:int,
                              <k_fib_1088@98:3>:bool)
      
      P[<k_fib_1084@92:2>](<br_k_fib_1155@95:1>:int,<br_k_fib_1155@95:3>:bool),
      ((not <br_k_fib_1155@95:3>) && (<br_k_fib_1155@95:0> = (<br_k_fib_1155@95:1> >= 1)))
      |- P[<br_k_fib_1155@95:3>](<br_k_fib_1155@95:0>:bool,<br_k_fib_1155@95:1>:int,
                                 <br_k_fib_1155@95:3>:bool)
      
      P[<fib_1030@89:0>](<k_fib_1084@92:0>:int),
      ((<k_fib_1084@92:0> >= 0) && (<k_fib_1084@92:2> = (<k_fib_1084@92:0> <= 0)))
      |- P[<k_fib_1084@92:2>](<k_fib_1084@92:0>:int,<k_fib_1084@92:2>:bool)
      
      P[<k_fib_1088@86:3>](<k_fib_1088@86:0>:bool,(1 + <fib_1030@89:0>):int,false:bool)|- P[<fib_1030@89:0>](
      <fib_1030@89:0>:int)
      
      P[<br_k_fib_1155@83:3>](true:bool,<k_fib_1088@86:1>:int,<k_fib_1088@86:0>:bool),
      (<k_fib_1088@86:3> = (<k_fib_1088@86:1> <= 1))
      |- P[<k_fib_1088@86:3>](<k_fib_1088@86:0>:bool,<k_fib_1088@86:1>:int,
                              <k_fib_1088@86:3>:bool)
      
      P[<k_fib_1084@80:2>](<br_k_fib_1155@83:1>:int,<br_k_fib_1155@83:3>:bool),
      ((not <br_k_fib_1155@83:3>) && (<br_k_fib_1155@83:0> = (<br_k_fib_1155@83:1> >= 1)))
      |- P[<br_k_fib_1155@83:3>](<br_k_fib_1155@83:0>:bool,<br_k_fib_1155@83:1>:int,
                                 <br_k_fib_1155@83:3>:bool)
      
      P[<fib_1030@77:0>](<k_fib_1084@80:0>:int),
      ((<k_fib_1084@80:0> >= 0) && (<k_fib_1084@80:2> = (<k_fib_1084@80:0> <= 0)))
      |- P[<k_fib_1084@80:2>](<k_fib_1084@80:0>:int,<k_fib_1084@80:2>:bool)
      
       (<fib_1030@77:0> = 3) |- P[<fib_1030@77:0>](<fib_1030@77:0>:int)
    call trees:
      <main_1151@75>
        <fib_1030@77>
          <k_fib_1084@80>
            <br_k_fib_1155@83>
              <k_fib_1088@86>
                <fib_1030@89>
                  <k_fib_1084@92>
                    <br_k_fib_1155@95>
                      <k_fib_1088@98>
                        <fib_1030@101>
                          <k_fib_1084@104>
                          </<k_fib_1084@104:1>@107>
                        </<fib_1030@101:1>@109>
                        <f_k_fib_1152@111>
                          <fib_1030@113>
                            <k_fib_1084@116>
                            </<k_fib_1084@116:1>@119>
                          </<fib_1030@113:1>@121>
                          <f_k_fib_1153@123>
                          </<f_k_fib_1153@123:4>@125>
                        </<f_k_fib_1152@111:3>@127>
                      </<k_fib_1088@98:2>@129>
                    </<br_k_fib_1155@95:2>@131>
                  </<k_fib_1084@92:1>@133>
                </<fib_1030@89:1>@135>
                <f_k_fib_1152@137>
                  <fib_1030@139>
                    <k_fib_1084@142>
                    </<k_fib_1084@142:1>@145>
                  </<fib_1030@139:1>@147>
                  <f_k_fib_1153@149>
                  </<f_k_fib_1153@149:4>@151>
                </<f_k_fib_1152@137:3>@153>
              </<k_fib_1088@86:2>@155>
            </<br_k_fib_1155@83:2>@157>
          </<k_fib_1084@80:1>@159>
        </<fib_1030@77:1>@161>
        <f_1154@163>
          <fail_1157@166>
    inlined horn clauses:
      P[<fail_1157@166:0>](<fail_1157@166:0>:bool)|- bot
      
      P[<<fib_1030@77:1>@161:0>](3:int,<f_1154@163:0>:int), ((<f_1154@163:0> < 4) && <fail_1157@166:0>)
      |- P[<fail_1157@166:0>](<fail_1157@166:0>:bool)
      
      P[<fib_1030@77:0>](<fib_1030@77:0>:int),
      P[<<fib_1030@89:1>@135:0>]((-1 + <fib_1030@77:0>):int,var183:int),
      P[<<fib_1030@139:1>@147:0>]((-2 + <fib_1030@77:0>):int,(<<fib_1030@77:1>@161:0> + (-1 * var183)):int),
      (<fib_1030@77:0> > 1) |- P[<<fib_1030@77:1>@161:0>](<fib_1030@77:0>:int,
                                                          <<fib_1030@77:1>@161:0>:int)
      
      P[<fib_1030@139:0>](<fib_1030@139:0>:int), ((<fib_1030@139:0> = 0) && (<<fib_1030@139:1>@147:0> = 1))
      |- P[<<fib_1030@139:1>@147:0>](<fib_1030@139:0>:int,<<fib_1030@139:1>@147:0>:int)
      
      P[<fib_1030@77:0>]((2 + <fib_1030@139:0>):int),
      P[<<fib_1030@89:1>@135:0>]((1 + <fib_1030@139:0>):int,<f_k_fib_1152@137:4>:int), (
      (1 + <fib_1030@139:0>) > 0) |- P[<fib_1030@139:0>](<fib_1030@139:0>:int)
      
      P[<fib_1030@89:0>](<fib_1030@89:0>:int),
      P[<<fib_1030@101:1>@109:0>]((-1 + <fib_1030@89:0>):int,var184:int),
      P[<<fib_1030@113:1>@121:0>]((-2 + <fib_1030@89:0>):int,(<<fib_1030@89:1>@135:0> + (-1 * var184)):int),
      (<fib_1030@89:0> > 1) |- P[<<fib_1030@89:1>@135:0>](<fib_1030@89:0>:int,
                                                          <<fib_1030@89:1>@135:0>:int)
      
      P[<fib_1030@113:0>](<fib_1030@113:0>:int), ((<fib_1030@113:0> = 0) && (<<fib_1030@113:1>@121:0> = 1))
      |- P[<<fib_1030@113:1>@121:0>](<fib_1030@113:0>:int,<<fib_1030@113:1>@121:0>:int)
      
      P[<fib_1030@89:0>]((2 + <fib_1030@113:0>):int),
      P[<<fib_1030@101:1>@109:0>]((1 + <fib_1030@113:0>):int,<f_k_fib_1152@111:4>:int), (
      (1 + <fib_1030@113:0>) > 0) |- P[<fib_1030@113:0>](<fib_1030@113:0>:int)
      
      P[<fib_1030@101:0>](<fib_1030@101:0>:int), ((<fib_1030@101:0> = 0) && (<<fib_1030@101:1>@109:0> = 1))
      |- P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int)
      
      P[<fib_1030@89:0>]((1 + <fib_1030@101:0>):int), (<fib_1030@101:0> > 0)
      |- P[<fib_1030@101:0>](<fib_1030@101:0>:int)
      
      P[<fib_1030@77:0>]((1 + <fib_1030@89:0>):int), (<fib_1030@89:0> > 0) |- P[<fib_1030@89:0>](<fib_1030@89:0>:int)
      
       (<fib_1030@77:0> = 3) |- P[<fib_1030@77:0>](<fib_1030@77:0>:int)
    begin ParamSubstInfer.infer(36717)[3]
      
    end ParamSubstInfer.infer(36717)[3] (0.162975 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(36719)[3]
      
    end RefTypeInfer.elim_coeffs(36719)[3] (0.000000 sec.)
    begin GenHcSolver.solve(37152)[3]
      Horn clauses:
        P[<fail_1157@166:0>](<fail_1157@166:0>:bool)|- bot
        
        P[<<fib_1030@77:1>@161:0>](3:int,<f_1154@163:0>:int), ((<f_1154@163:0> < 4) && <fail_1157@166:0>)
        |- P[<fail_1157@166:0>](<fail_1157@166:0>:bool)
        
        P[<fib_1030@77:0>](<fib_1030@77:0>:int),
        P[<<fib_1030@89:1>@135:0>]((-1 + <fib_1030@77:0>):int,var183:int),
        P[<<fib_1030@139:1>@147:0>]((-2 + <fib_1030@77:0>):int,(<<fib_1030@77:1>@161:0> + (-1 * var183)):int),
        (<fib_1030@77:0> > 1) |- P[<<fib_1030@77:1>@161:0>](<fib_1030@77:0>:int,
                                                            <<fib_1030@77:1>@161:0>:int)
        
        P[<fib_1030@139:0>](<fib_1030@139:0>:int), ((<fib_1030@139:0> = 0) && (<<fib_1030@139:1>@147:0> = 1))
        |- P[<<fib_1030@139:1>@147:0>](<fib_1030@139:0>:int,<<fib_1030@139:1>@147:0>:int)
        
        P[<fib_1030@77:0>]((2 + <fib_1030@139:0>):int),
        P[<<fib_1030@89:1>@135:0>]((1 + <fib_1030@139:0>):int,<f_k_fib_1152@137:4>:int), (
        (1 + <fib_1030@139:0>) > 0) |- P[<fib_1030@139:0>](<fib_1030@139:0>:int)
        
        P[<fib_1030@89:0>](<fib_1030@89:0>:int),
        P[<<fib_1030@101:1>@109:0>]((-1 + <fib_1030@89:0>):int,var184:int),
        P[<<fib_1030@113:1>@121:0>]((-2 + <fib_1030@89:0>):int,(<<fib_1030@89:1>@135:0> + (-1 * var184)):int),
        (<fib_1030@89:0> > 1) |- P[<<fib_1030@89:1>@135:0>](<fib_1030@89:0>:int,
                                                            <<fib_1030@89:1>@135:0>:int)
        
        P[<fib_1030@113:0>](<fib_1030@113:0>:int), ((<fib_1030@113:0> = 0) && (<<fib_1030@113:1>@121:0> = 1))
        |- P[<<fib_1030@113:1>@121:0>](<fib_1030@113:0>:int,<<fib_1030@113:1>@121:0>:int)
        
        P[<fib_1030@89:0>]((2 + <fib_1030@113:0>):int),
        P[<<fib_1030@101:1>@109:0>]((1 + <fib_1030@113:0>):int,<f_k_fib_1152@111:4>:int), (
        (1 + <fib_1030@113:0>) > 0) |- P[<fib_1030@113:0>](<fib_1030@113:0>:int)
        
        P[<fib_1030@101:0>](<fib_1030@101:0>:int), ((<fib_1030@101:0> = 0) && (<<fib_1030@101:1>@109:0> = 1))
        |- P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int)
        
        P[<fib_1030@89:0>]((1 + <fib_1030@101:0>):int), (<fib_1030@101:0> > 0)
        |- P[<fib_1030@101:0>](<fib_1030@101:0>:int)
        
        P[<fib_1030@77:0>]((1 + <fib_1030@89:0>):int), (<fib_1030@89:0> > 0) |- P[<fib_1030@89:0>](<fib_1030@89:0>:int)
        
         (<fib_1030@77:0> = 3) |- P[<fib_1030@77:0>](<fib_1030@77:0>:int)
      lower bounds:
        P[<fib_1030@77:0>](<fib_1030@77:0>:int) = (<fib_1030@77:0> = 3)
        P[<fib_1030@89:0>](<fib_1030@89:0>:int) = (<fib_1030@89:0> = 2)
        P[<fib_1030@101:0>](<fib_1030@101:0>:int) = (<fib_1030@101:0> = 1)
        P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
        P[<fib_1030@113:0>](<fib_1030@113:0>:int) = false
        P[<<fib_1030@113:1>@121:0>](<fib_1030@113:0>:int,<<fib_1030@113:1>@121:0>:int) = false
        P[<<fib_1030@89:1>@135:0>](<fib_1030@89:0>:int,<<fib_1030@89:1>@135:0>:int) = false
        P[<fib_1030@139:0>](<fib_1030@139:0>:int) = false
        P[<<fib_1030@139:1>@147:0>](<fib_1030@139:0>:int,<<fib_1030@139:1>@147:0>:int) = false
        P[<<fib_1030@77:1>@161:0>](<fib_1030@77:0>:int,<<fib_1030@77:1>@161:0>:int) = false
        P[<fail_1157@166:0>](<fail_1157@166:0>:bool) = false
      upper bounds:
        P[<<fib_1030@77:1>@161:0>](var219:int,var220:int) = true
        P[<<fib_1030@139:1>@147:0>](var214:int,var215:int) = true
        P[<<fib_1030@89:1>@135:0>](var209:int,var210:int) = true
        P[<<fib_1030@113:1>@121:0>](var203:int,var204:int) = true
        P[<<fib_1030@101:1>@109:0>](var191:int,var192:int) = true
      begin GenHcSolver.classify_pids(43920)[4]
        output:
          [<<fib_1030@101:1>@109:0>;<<fib_1030@113:1>@121:0>;<<fib_1030@89:1>@135:0>;<<fib_1030@139:1>@147:0>;<<fib_1030@77:1>@161:0>]
      end GenHcSolver.classify_pids(43920)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(43967)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(43968)[5]
          begin InterpProver.interpolate_fresh(43969)[6]
            begin InterpProver.interpolate_log(43970)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(43971)[8]
                begin InterpProver.interpolate_simplify(43972)[9]
                  begin InterpProver.interpolate_quick(43985)[10]
                    
                  end InterpProver.interpolate_quick(43985)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(43989)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(43989)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(43972)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(43971)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(43970)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(43969)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(43968)[5] (0.000000 sec.)
        output:
          P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
          P[<<fib_1030@113:1>@121:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
          P[<<fib_1030@89:1>@135:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
          P[<<fib_1030@139:1>@147:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
          P[<<fib_1030@77:1>@161:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
      end ApronInterface.convex_hull_interpolate(43967)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1157@166:0>](<fail_1157@166:0>:bool)|- bot
        
        P[<fib_1030@139:0>](0:int)|- bot
        
        P[<fib_1030@113:0>](0:int)|- bot
        
        P[<fib_1030@101:0>](0:int)|- bot
        
        P[<fib_1030@89:0>]((1 + <fib_1030@101:0>):int), (<fib_1030@101:0> > 0)
        |- P[<fib_1030@101:0>](<fib_1030@101:0>:int)
        
        P[<fib_1030@77:0>]((1 + <fib_1030@89:0>):int), (<fib_1030@89:0> > 0) |- P[<fib_1030@89:0>](<fib_1030@89:0>:int)
        
         (<fib_1030@77:0> = 3) |- P[<fib_1030@77:0>](<fib_1030@77:0>:int)
      lower bounds:
        P[<fib_1030@77:0>](<fib_1030@77:0>:int) = (<fib_1030@77:0> = 3)
        P[<fail_1157@166:0>](var233:bool) = false
        P[<fib_1030@139:0>](var234:int) = false
        P[<fib_1030@113:0>](var235:int) = false
        P[<fib_1030@89:0>](<fib_1030@89:0>:int) = (<fib_1030@89:0> = 2)
        P[<fib_1030@101:0>](<fib_1030@101:0>:int) = (<fib_1030@101:0> = 1)
      upper bounds:
        P[<fib_1030@139:0>](var270:int) = true
        P[<fib_1030@113:0>](var263:int) = true
        P[<fib_1030@101:0>](var256:int) = (var256 <> 0)
        P[<fib_1030@89:0>](var249:int) = true
        P[<fib_1030@77:0>](var242:int) = true
      begin GenHcSolver.classify_pids(50540)[4]
        output:
          [<fib_1030@77:0>;<fib_1030@89:0>;<fib_1030@101:0>;<fib_1030@113:0>;<fib_1030@139:0>]
      end GenHcSolver.classify_pids(50540)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(50608)[4]
        lb:((<fib_1030@77:0> = 3) || ((<fib_1030@77:0> = 2) || (<fib_1030@77:0> = 1)))
        nub:(not (<fib_1030@77:0> <> 0))
        lb':((<fib_1030@77:0> = 3) || ((<fib_1030@77:0> = 2) || (<fib_1030@77:0> = 1)))
        nub':(not (<fib_1030@77:0> <> 0))
        begin InterpProver.interpolate(50609)[5]
          begin InterpProver.interpolate_fresh(50610)[6]
            begin InterpProver.interpolate_log(50611)[7]
              input1: ((<fib_1030@77:0> = 3) || ((<fib_1030@77:0> = 2) || (<fib_1030@77:0> = 1)))
              input2: (not (<fib_1030@77:0> <> 0))
              begin InterpProver.interpolate_check(50612)[8]
                begin InterpProver.interpolate_simplify(50613)[9]
                  begin InterpProver.interpolate_quick(50664)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(50673)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(50674)[12]
                        begin CsisatInterface.interpolate_csisat_log(50675)[13]
                          input1: (1 = v_sep_fib_1030_sep_77_sep_0 | 2 = v_sep_fib_1030_sep_77_sep_0 | 3 = v_sep_fib_1030_sep_77_sep_0)
                          input2: 0 = v_sep_fib_1030_sep_77_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(50676)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(50676)[14] (0.001000 sec.)
                          output: (-2*v_sep_fib_1030_sep_77_sep_0 <= -2 | -1*v_sep_fib_1030_sep_77_sep_0 <= -2 | -0.666666666667*v_sep_fib_1030_sep_77_sep_0 <= -2)
                          
                        end CsisatInterface.interpolate_csisat_log(50675)[13] (0.001000 sec.)
                        after simplification: (-2*v_sep_fib_1030_sep_77_sep_0 <= -6 | -2*v_sep_fib_1030_sep_77_sep_0 <= -2 | -1*v_sep_fib_1030_sep_77_sep_0 <= -2)
                        after dnf conversion: ((-2*v_sep_fib_1030_sep_77_sep_0 <= -6) | (-2*v_sep_fib_1030_sep_77_sep_0 <= -2) | (-1*v_sep_fib_1030_sep_77_sep_0 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(50674)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(50673)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(50664)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(50613)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(50612)[8] (0.002000 sec.)
              output: (1 <= <fib_1030@77:0>)
            end InterpProver.interpolate_log(50611)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(50610)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(50609)[5] (0.002000 sec.)
        output:
          P[<fib_1030@77:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
          P[<fib_1030@89:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
          P[<fib_1030@101:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
          P[<fib_1030@113:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
          P[<fib_1030@139:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
      end ApronInterface.convex_hull_interpolate(50608)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1157@166:0>](<fail_1157@166:0>:bool)|- bot
      lower bounds:
        P[<fail_1157@166:0>](var278:bool) = false
      upper bounds:
        P[<fail_1157@166:0>](var281:bool) = true
      begin GenHcSolver.classify_pids(52120)[4]
        output:
          [<fail_1157@166:0>]
      end GenHcSolver.classify_pids(52120)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(52123)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(52124)[5]
          begin InterpProver.interpolate_fresh(52125)[6]
            begin InterpProver.interpolate_log(52126)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(52127)[8]
                begin InterpProver.interpolate_simplify(52128)[9]
                  begin InterpProver.interpolate_quick(52141)[10]
                    
                  end InterpProver.interpolate_quick(52141)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(52145)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(52145)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(52128)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(52127)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(52126)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(52125)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(52124)[5] (0.000000 sec.)
        output:
          P[<fail_1157@166:0>](var278:bool) = false
      end ApronInterface.convex_hull_interpolate(52123)[4] (0.000000 sec.)
      begin HcSolver.check_validity(52178)[4]
        input:
          P[<fail_1157@166:0>](<fail_1157@166:0>:bool)|- bot
          
          P[<<fib_1030@77:1>@161:0>](3:int,<f_1154@163:0>:int), ((<f_1154@163:0> < 4) && <fail_1157@166:0>)
          |- P[<fail_1157@166:0>](<fail_1157@166:0>:bool)
          
          P[<fib_1030@77:0>](<fib_1030@77:0>:int),
          P[<<fib_1030@89:1>@135:0>]((-1 + <fib_1030@77:0>):int,var183:int),
          P[<<fib_1030@139:1>@147:0>]((-2 + <fib_1030@77:0>):int,(<<fib_1030@77:1>@161:0> + (-1 * var183)):int),
          (<fib_1030@77:0> > 1) |- P[<<fib_1030@77:1>@161:0>](<fib_1030@77:0>:int,
                                                              <<fib_1030@77:1>@161:0>:int)
          
          P[<fib_1030@139:0>](<fib_1030@139:0>:int), ((<fib_1030@139:0> = 0) && (<<fib_1030@139:1>@147:0> = 1))
          |- P[<<fib_1030@139:1>@147:0>](<fib_1030@139:0>:int,<<fib_1030@139:1>@147:0>:int)
          
          P[<fib_1030@77:0>]((2 + <fib_1030@139:0>):int),
          P[<<fib_1030@89:1>@135:0>]((1 + <fib_1030@139:0>):int,<f_k_fib_1152@137:4>:int), (
          (1 + <fib_1030@139:0>) > 0) |- P[<fib_1030@139:0>](<fib_1030@139:0>:int)
          
          P[<fib_1030@89:0>](<fib_1030@89:0>:int),
          P[<<fib_1030@101:1>@109:0>]((-1 + <fib_1030@89:0>):int,var184:int),
          P[<<fib_1030@113:1>@121:0>]((-2 + <fib_1030@89:0>):int,(<<fib_1030@89:1>@135:0> + (-1 * var184)):int),
          (<fib_1030@89:0> > 1) |- P[<<fib_1030@89:1>@135:0>](<fib_1030@89:0>:int,
                                                              <<fib_1030@89:1>@135:0>:int)
          
          P[<fib_1030@113:0>](<fib_1030@113:0>:int), ((<fib_1030@113:0> = 0) && (<<fib_1030@113:1>@121:0> = 1))
          |- P[<<fib_1030@113:1>@121:0>](<fib_1030@113:0>:int,<<fib_1030@113:1>@121:0>:int)
          
          P[<fib_1030@89:0>]((2 + <fib_1030@113:0>):int),
          P[<<fib_1030@101:1>@109:0>]((1 + <fib_1030@113:0>):int,<f_k_fib_1152@111:4>:int),
          ((1 + <fib_1030@113:0>) > 0) |- P[<fib_1030@113:0>](<fib_1030@113:0>:int)
          
          P[<fib_1030@101:0>](<fib_1030@101:0>:int), ((<fib_1030@101:0> = 0) && (<<fib_1030@101:1>@109:0> = 1))
          |- P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int)
          
          P[<fib_1030@89:0>]((1 + <fib_1030@101:0>):int), (<fib_1030@101:0> > 0)
          |- P[<fib_1030@101:0>](<fib_1030@101:0>:int)
          
          P[<fib_1030@77:0>]((1 + <fib_1030@89:0>):int), (<fib_1030@89:0> > 0)
          |- P[<fib_1030@89:0>](<fib_1030@89:0>:int)
          
           (<fib_1030@77:0> = 3) |- P[<fib_1030@77:0>](<fib_1030@77:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(52178)[4] (0.003000 sec.)
      solution:
        P[<fail_1157@166:0>](var278:bool) = false
        P[<<fib_1030@77:1>@161:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
        P[<<fib_1030@139:1>@147:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
        P[<fib_1030@139:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
        P[<<fib_1030@89:1>@135:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
        P[<<fib_1030@113:1>@121:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
        P[<fib_1030@113:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
        P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
        P[<fib_1030@101:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
        P[<fib_1030@89:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
        P[<fib_1030@77:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
    end GenHcSolver.solve(37152)[3] (0.049993 sec.)
    begin GenHcSolver.solve(52815)[3]
      Horn clauses:
        P[<fail_1157@166:0>](<fail_1157@166:0>:bool)|- bot
        
        P[<<fib_1030@77:1>@161:0>](3:int,<f_1154@163:0>:int), ((<f_1154@163:0> < 4) && <fail_1157@166:0>)
        |- P[<fail_1157@166:0>](<fail_1157@166:0>:bool)
        
        P[<fib_1030@77:0>](<fib_1030@77:0>:int),
        P[<<fib_1030@89:1>@135:0>]((-1 + <fib_1030@77:0>):int,var183:int),
        P[<<fib_1030@139:1>@147:0>]((-2 + <fib_1030@77:0>):int,(<<fib_1030@77:1>@161:0> + (-1 * var183)):int),
        (<fib_1030@77:0> > 1) |- P[<<fib_1030@77:1>@161:0>](<fib_1030@77:0>:int,
                                                            <<fib_1030@77:1>@161:0>:int)
        
        P[<fib_1030@139:0>](<fib_1030@139:0>:int), ((<fib_1030@139:0> = 0) && (<<fib_1030@139:1>@147:0> = 1))
        |- P[<<fib_1030@139:1>@147:0>](<fib_1030@139:0>:int,<<fib_1030@139:1>@147:0>:int)
        
        P[<fib_1030@77:0>]((2 + <fib_1030@139:0>):int),
        P[<<fib_1030@89:1>@135:0>]((1 + <fib_1030@139:0>):int,<f_k_fib_1152@137:4>:int), (
        (1 + <fib_1030@139:0>) > 0) |- P[<fib_1030@139:0>](<fib_1030@139:0>:int)
        
        P[<fib_1030@89:0>](<fib_1030@89:0>:int),
        P[<<fib_1030@101:1>@109:0>]((-1 + <fib_1030@89:0>):int,var184:int),
        P[<<fib_1030@113:1>@121:0>]((-2 + <fib_1030@89:0>):int,(<<fib_1030@89:1>@135:0> + (-1 * var184)):int),
        (<fib_1030@89:0> > 1) |- P[<<fib_1030@89:1>@135:0>](<fib_1030@89:0>:int,
                                                            <<fib_1030@89:1>@135:0>:int)
        
        P[<fib_1030@113:0>](<fib_1030@113:0>:int), ((<fib_1030@113:0> = 0) && (<<fib_1030@113:1>@121:0> = 1))
        |- P[<<fib_1030@113:1>@121:0>](<fib_1030@113:0>:int,<<fib_1030@113:1>@121:0>:int)
        
        P[<fib_1030@89:0>]((2 + <fib_1030@113:0>):int),
        P[<<fib_1030@101:1>@109:0>]((1 + <fib_1030@113:0>):int,<f_k_fib_1152@111:4>:int), (
        (1 + <fib_1030@113:0>) > 0) |- P[<fib_1030@113:0>](<fib_1030@113:0>:int)
        
        P[<fib_1030@101:0>](<fib_1030@101:0>:int), ((<fib_1030@101:0> = 0) && (<<fib_1030@101:1>@109:0> = 1))
        |- P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int)
        
        P[<fib_1030@89:0>]((1 + <fib_1030@101:0>):int), (<fib_1030@101:0> > 0)
        |- P[<fib_1030@101:0>](<fib_1030@101:0>:int)
        
        P[<fib_1030@77:0>]((1 + <fib_1030@89:0>):int), (<fib_1030@89:0> > 0) |- P[<fib_1030@89:0>](<fib_1030@89:0>:int)
        
         (<fib_1030@77:0> = 3) |- P[<fib_1030@77:0>](<fib_1030@77:0>:int)
      lower bounds:
        P[<fib_1030@77:0>](<fib_1030@77:0>:int) = (<fib_1030@77:0> = 3)
        P[<fib_1030@89:0>](<fib_1030@89:0>:int) = (<fib_1030@89:0> = 2)
        P[<fib_1030@101:0>](<fib_1030@101:0>:int) = (<fib_1030@101:0> = 1)
        P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
        P[<fib_1030@113:0>](<fib_1030@113:0>:int) = false
        P[<<fib_1030@113:1>@121:0>](<fib_1030@113:0>:int,<<fib_1030@113:1>@121:0>:int) = false
        P[<<fib_1030@89:1>@135:0>](<fib_1030@89:0>:int,<<fib_1030@89:1>@135:0>:int) = false
        P[<fib_1030@139:0>](<fib_1030@139:0>:int) = false
        P[<<fib_1030@139:1>@147:0>](<fib_1030@139:0>:int,<<fib_1030@139:1>@147:0>:int) = false
        P[<<fib_1030@77:1>@161:0>](<fib_1030@77:0>:int,<<fib_1030@77:1>@161:0>:int) = false
        P[<fail_1157@166:0>](<fail_1157@166:0>:bool) = false
      upper bounds:
        P[<<fib_1030@77:1>@161:0>](var316:int,var317:int) = true
        P[<<fib_1030@139:1>@147:0>](var311:int,var312:int) = true
        P[<<fib_1030@89:1>@135:0>](var306:int,var307:int) = true
        P[<<fib_1030@113:1>@121:0>](var300:int,var301:int) = true
        P[<<fib_1030@101:1>@109:0>](var288:int,var289:int) = true
      begin GenHcSolver.classify_pids(59583)[4]
        output:
          [<<fib_1030@101:1>@109:0>;<<fib_1030@113:1>@121:0>;<<fib_1030@89:1>@135:0>;<<fib_1030@139:1>@147:0>;<<fib_1030@77:1>@161:0>]
      end GenHcSolver.classify_pids(59583)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(59630)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(59633)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(59633)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(59638)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(59638)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(59641)[5]
          begin InterpProver.interpolate_fresh(59642)[6]
            begin InterpProver.interpolate_log(59643)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(59644)[8]
                begin InterpProver.interpolate_simplify(59645)[9]
                  begin InterpProver.interpolate_quick(59660)[10]
                    
                  end InterpProver.interpolate_quick(59660)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(59664)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(59664)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(59645)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(59644)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(59643)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(59642)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(59641)[5] (0.001000 sec.)
        output:
          P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
          P[<<fib_1030@113:1>@121:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
          P[<<fib_1030@89:1>@135:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
          P[<<fib_1030@139:1>@147:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
          P[<<fib_1030@77:1>@161:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
      end ApronInterface.convex_hull_interpolate(59630)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1157@166:0>](<fail_1157@166:0>:bool)|- bot
        
        P[<fib_1030@139:0>](0:int)|- bot
        
        P[<fib_1030@113:0>](0:int)|- bot
        
        P[<fib_1030@101:0>](0:int)|- bot
        
        P[<fib_1030@89:0>]((1 + <fib_1030@101:0>):int), (<fib_1030@101:0> > 0)
        |- P[<fib_1030@101:0>](<fib_1030@101:0>:int)
        
        P[<fib_1030@77:0>]((1 + <fib_1030@89:0>):int), (<fib_1030@89:0> > 0) |- P[<fib_1030@89:0>](<fib_1030@89:0>:int)
        
         (<fib_1030@77:0> = 3) |- P[<fib_1030@77:0>](<fib_1030@77:0>:int)
      lower bounds:
        P[<fib_1030@77:0>](<fib_1030@77:0>:int) = (<fib_1030@77:0> = 3)
        P[<fail_1157@166:0>](var330:bool) = false
        P[<fib_1030@139:0>](var331:int) = false
        P[<fib_1030@113:0>](var332:int) = false
        P[<fib_1030@89:0>](<fib_1030@89:0>:int) = (<fib_1030@89:0> = 2)
        P[<fib_1030@101:0>](<fib_1030@101:0>:int) = (<fib_1030@101:0> = 1)
      upper bounds:
        P[<fib_1030@139:0>](var367:int) = true
        P[<fib_1030@113:0>](var360:int) = true
        P[<fib_1030@101:0>](var353:int) = (var353 <> 0)
        P[<fib_1030@89:0>](var346:int) = true
        P[<fib_1030@77:0>](var339:int) = true
      begin GenHcSolver.classify_pids(66222)[4]
        output:
          [<fib_1030@77:0>;<fib_1030@89:0>;<fib_1030@101:0>;<fib_1030@113:0>;<fib_1030@139:0>]
      end GenHcSolver.classify_pids(66222)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(66290)[4]
        lb:((<fib_1030@77:0> = 3) || ((<fib_1030@77:0> = 2) || (<fib_1030@77:0> = 1)))
        nub:(not (<fib_1030@77:0> <> 0))
        begin ExtFormula.Formula.case_analysis_boolean(66311)[5]
          ts: ((<fib_1030@77:0> = 2) || ((<fib_1030@77:0> = 1) || (<fib_1030@77:0> = 3)))
          
        end ExtFormula.Formula.case_analysis_boolean(66311)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(66323)[5]
          ts: (<fib_1030@77:0> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(66323)[5] (0.000000 sec.)
        lb':(((3 + (-1 * <fib_1030@77:0>)) >= 0) && ((-1 + <fib_1030@77:0>) >= 0))
        nub':(<fib_1030@77:0> = 0)
        begin InterpProver.interpolate(66327)[5]
          begin InterpProver.interpolate_fresh(66328)[6]
            begin InterpProver.interpolate_log(66329)[7]
              input1: (((3 + (-1 * <fib_1030@77:0>)) >= 0) && ((-1 + <fib_1030@77:0>) >= 0))
              input2: (<fib_1030@77:0> = 0)
              begin InterpProver.interpolate_check(66330)[8]
                begin InterpProver.interpolate_simplify(66331)[9]
                  begin InterpProver.interpolate_quick(66376)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(66385)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(66386)[12]
                        begin CsisatInterface.interpolate_csisat_log(66387)[13]
                          input1: (1 <= v_sep_fib_1030_sep_77_sep_0 & v_sep_fib_1030_sep_77_sep_0 <= 3)
                          input2: 0 = v_sep_fib_1030_sep_77_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(66388)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(66388)[14] (0.000000 sec.)
                          output: -2*v_sep_fib_1030_sep_77_sep_0 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(66387)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_fib_1030_sep_77_sep_0 <= -2
                        after dnf conversion: ((-2*v_sep_fib_1030_sep_77_sep_0 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(66386)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(66385)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(66376)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(66331)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(66330)[8] (0.001000 sec.)
              output: (1 <= <fib_1030@77:0>)
            end InterpProver.interpolate_log(66329)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(66328)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(66327)[5] (0.002000 sec.)
        output:
          P[<fib_1030@77:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
          P[<fib_1030@89:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
          P[<fib_1030@101:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
          P[<fib_1030@113:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
          P[<fib_1030@139:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
      end ApronInterface.convex_hull_interpolate(66290)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1157@166:0>](<fail_1157@166:0>:bool)|- bot
      lower bounds:
        P[<fail_1157@166:0>](var375:bool) = false
      upper bounds:
        P[<fail_1157@166:0>](var378:bool) = true
      begin GenHcSolver.classify_pids(67817)[4]
        output:
          [<fail_1157@166:0>]
      end GenHcSolver.classify_pids(67817)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(67820)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(67823)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(67823)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(67828)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(67828)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(67831)[5]
          begin InterpProver.interpolate_fresh(67832)[6]
            begin InterpProver.interpolate_log(67833)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(67834)[8]
                begin InterpProver.interpolate_simplify(67835)[9]
                  begin InterpProver.interpolate_quick(67850)[10]
                    
                  end InterpProver.interpolate_quick(67850)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(67854)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(67854)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(67835)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(67834)[8] (0.002000 sec.)
              output: false
            end InterpProver.interpolate_log(67833)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(67832)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(67831)[5] (0.002000 sec.)
        output:
          P[<fail_1157@166:0>](var375:bool) = false
      end ApronInterface.convex_hull_interpolate(67820)[4] (0.002000 sec.)
      begin HcSolver.check_validity(67894)[4]
        input:
          P[<fail_1157@166:0>](<fail_1157@166:0>:bool)|- bot
          
          P[<<fib_1030@77:1>@161:0>](3:int,<f_1154@163:0>:int), ((<f_1154@163:0> < 4) && <fail_1157@166:0>)
          |- P[<fail_1157@166:0>](<fail_1157@166:0>:bool)
          
          P[<fib_1030@77:0>](<fib_1030@77:0>:int),
          P[<<fib_1030@89:1>@135:0>]((-1 + <fib_1030@77:0>):int,var183:int),
          P[<<fib_1030@139:1>@147:0>]((-2 + <fib_1030@77:0>):int,(<<fib_1030@77:1>@161:0> + (-1 * var183)):int),
          (<fib_1030@77:0> > 1) |- P[<<fib_1030@77:1>@161:0>](<fib_1030@77:0>:int,
                                                              <<fib_1030@77:1>@161:0>:int)
          
          P[<fib_1030@139:0>](<fib_1030@139:0>:int), ((<fib_1030@139:0> = 0) && (<<fib_1030@139:1>@147:0> = 1))
          |- P[<<fib_1030@139:1>@147:0>](<fib_1030@139:0>:int,<<fib_1030@139:1>@147:0>:int)
          
          P[<fib_1030@77:0>]((2 + <fib_1030@139:0>):int),
          P[<<fib_1030@89:1>@135:0>]((1 + <fib_1030@139:0>):int,<f_k_fib_1152@137:4>:int), (
          (1 + <fib_1030@139:0>) > 0) |- P[<fib_1030@139:0>](<fib_1030@139:0>:int)
          
          P[<fib_1030@89:0>](<fib_1030@89:0>:int),
          P[<<fib_1030@101:1>@109:0>]((-1 + <fib_1030@89:0>):int,var184:int),
          P[<<fib_1030@113:1>@121:0>]((-2 + <fib_1030@89:0>):int,(<<fib_1030@89:1>@135:0> + (-1 * var184)):int),
          (<fib_1030@89:0> > 1) |- P[<<fib_1030@89:1>@135:0>](<fib_1030@89:0>:int,
                                                              <<fib_1030@89:1>@135:0>:int)
          
          P[<fib_1030@113:0>](<fib_1030@113:0>:int), ((<fib_1030@113:0> = 0) && (<<fib_1030@113:1>@121:0> = 1))
          |- P[<<fib_1030@113:1>@121:0>](<fib_1030@113:0>:int,<<fib_1030@113:1>@121:0>:int)
          
          P[<fib_1030@89:0>]((2 + <fib_1030@113:0>):int),
          P[<<fib_1030@101:1>@109:0>]((1 + <fib_1030@113:0>):int,<f_k_fib_1152@111:4>:int),
          ((1 + <fib_1030@113:0>) > 0) |- P[<fib_1030@113:0>](<fib_1030@113:0>:int)
          
          P[<fib_1030@101:0>](<fib_1030@101:0>:int), ((<fib_1030@101:0> = 0) && (<<fib_1030@101:1>@109:0> = 1))
          |- P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int)
          
          P[<fib_1030@89:0>]((1 + <fib_1030@101:0>):int), (<fib_1030@101:0> > 0)
          |- P[<fib_1030@101:0>](<fib_1030@101:0>:int)
          
          P[<fib_1030@77:0>]((1 + <fib_1030@89:0>):int), (<fib_1030@89:0> > 0)
          |- P[<fib_1030@89:0>](<fib_1030@89:0>:int)
          
           (<fib_1030@77:0> = 3) |- P[<fib_1030@77:0>](<fib_1030@77:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(67894)[4] (0.001000 sec.)
      solution:
        P[<fail_1157@166:0>](var375:bool) = false
        P[<<fib_1030@77:1>@161:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
        P[<<fib_1030@139:1>@147:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
        P[<fib_1030@139:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
        P[<<fib_1030@89:1>@135:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
        P[<<fib_1030@113:1>@121:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
        P[<fib_1030@113:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
        P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int) = false
        P[<fib_1030@101:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
        P[<fib_1030@89:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
        P[<fib_1030@77:0>](<fib_1030@77:0>:int) = (1 <= <fib_1030@77:0>)
    end GenHcSolver.solve(52815)[3] (0.053992 sec.)
    begin YhornInterface.solve(68531)[3]
      begin HcSolver.solve_ub(68532)[4]
        encoded:
          P[<fail_1157@166:0>](<fail_1157@166:0>:int)|- bot
          
          P[<<fib_1030@77:1>@161:0>](3:int,<f_1154@163:0>:int), ((<f_1154@163:0> < 4) && (<fail_1157@166:0> = 1))
          |- P[<fail_1157@166:0>](<fail_1157@166:0>:int)
          
          P[<fib_1030@77:0>](<fib_1030@77:0>:int),
          P[<<fib_1030@89:1>@135:0>]((-1 + <fib_1030@77:0>):int,var183:int),
          P[<<fib_1030@139:1>@147:0>]((-2 + <fib_1030@77:0>):int,(<<fib_1030@77:1>@161:0> + (-1 * var183)):int),
          (<fib_1030@77:0> > 1) |- P[<<fib_1030@77:1>@161:0>](<fib_1030@77:0>:int,
                                                              <<fib_1030@77:1>@161:0>:int)
          
          P[<fib_1030@139:0>](<fib_1030@139:0>:int), ((<fib_1030@139:0> = 0) && (<<fib_1030@139:1>@147:0> = 1))
          |- P[<<fib_1030@139:1>@147:0>](<fib_1030@139:0>:int,<<fib_1030@139:1>@147:0>:int)
          
          P[<fib_1030@77:0>]((2 + <fib_1030@139:0>):int),
          P[<<fib_1030@89:1>@135:0>]((1 + <fib_1030@139:0>):int,<f_k_fib_1152@137:4>:int), (
          (1 + <fib_1030@139:0>) > 0) |- P[<fib_1030@139:0>](<fib_1030@139:0>:int)
          
          P[<fib_1030@89:0>](<fib_1030@89:0>:int),
          P[<<fib_1030@101:1>@109:0>]((-1 + <fib_1030@89:0>):int,var184:int),
          P[<<fib_1030@113:1>@121:0>]((-2 + <fib_1030@89:0>):int,(<<fib_1030@89:1>@135:0> + (-1 * var184)):int),
          (<fib_1030@89:0> > 1) |- P[<<fib_1030@89:1>@135:0>](<fib_1030@89:0>:int,
                                                              <<fib_1030@89:1>@135:0>:int)
          
          P[<fib_1030@113:0>](<fib_1030@113:0>:int), ((<fib_1030@113:0> = 0) && (<<fib_1030@113:1>@121:0> = 1))
          |- P[<<fib_1030@113:1>@121:0>](<fib_1030@113:0>:int,<<fib_1030@113:1>@121:0>:int)
          
          P[<fib_1030@89:0>]((2 + <fib_1030@113:0>):int),
          P[<<fib_1030@101:1>@109:0>]((1 + <fib_1030@113:0>):int,<f_k_fib_1152@111:4>:int),
          ((1 + <fib_1030@113:0>) > 0) |- P[<fib_1030@113:0>](<fib_1030@113:0>:int)
          
          P[<fib_1030@101:0>](<fib_1030@101:0>:int), ((<fib_1030@101:0> = 0) && (<<fib_1030@101:1>@109:0> = 1))
          |- P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int)
          
          P[<fib_1030@89:0>]((1 + <fib_1030@101:0>):int), (<fib_1030@101:0> > 0)
          |- P[<fib_1030@101:0>](<fib_1030@101:0>:int)
          
          P[<fib_1030@77:0>]((1 + <fib_1030@89:0>):int), (<fib_1030@89:0> > 0)
          |- P[<fib_1030@89:0>](<fib_1030@89:0>:int)
          
           (<fib_1030@77:0> = 3) |- P[<fib_1030@77:0>](<fib_1030@77:0>:int)
        input to Yhorn:
          P[<fail_1157@166:0>](<fail_1157@166:0>:int)|- bot
          
          P[<<fib_1030@77:1>@161:0>](var379:int,<f_1154@163:0>:int),
          ((<f_1154@163:0> < 4) && ((var379 = 3) && (<fail_1157@166:0> = 1)))
          |- P[<fail_1157@166:0>](<fail_1157@166:0>:int)
          
          P[<fib_1030@77:0>](<fib_1030@77:0>:int),
          P[<<fib_1030@89:1>@135:0>](var380:int,var183:int),
          P[<<fib_1030@139:1>@147:0>](var381:int,var382:int),
          (((var382 + var183) = <<fib_1030@77:1>@161:0>) &&
           (((2 + var381) = <fib_1030@77:0>) && (((1 + var380) = <fib_1030@77:0>) && (<fib_1030@77:0> > 1))))
          |- P[<<fib_1030@77:1>@161:0>](<fib_1030@77:0>:int,<<fib_1030@77:1>@161:0>:int)
          
          P[<fib_1030@139:0>](<fib_1030@139:0>:int), ((<<fib_1030@139:1>@147:0> = 1) && (<fib_1030@139:0> = 0))
          |- P[<<fib_1030@139:1>@147:0>](<fib_1030@139:0>:int,<<fib_1030@139:1>@147:0>:int)
          
          P[<fib_1030@77:0>](var383:int),
          P[<<fib_1030@89:1>@135:0>](var384:int,<f_k_fib_1152@137:4>:int),
          ((var384 = (1 + <fib_1030@139:0>)) && ((var383 = (2 + <fib_1030@139:0>)) && ((1 + <fib_1030@139:0>) > 0)))
          |- P[<fib_1030@139:0>](<fib_1030@139:0>:int)
          
          P[<fib_1030@89:0>](<fib_1030@89:0>:int),
          P[<<fib_1030@101:1>@109:0>](var385:int,var184:int),
          P[<<fib_1030@113:1>@121:0>](var386:int,var387:int),
          (((var387 + var184) = <<fib_1030@89:1>@135:0>) &&
           (((2 + var386) = <fib_1030@89:0>) && (((1 + var385) = <fib_1030@89:0>) && (<fib_1030@89:0> > 1))))
          |- P[<<fib_1030@89:1>@135:0>](<fib_1030@89:0>:int,<<fib_1030@89:1>@135:0>:int)
          
          P[<fib_1030@113:0>](<fib_1030@113:0>:int), ((<<fib_1030@113:1>@121:0> = 1) && (<fib_1030@113:0> = 0))
          |- P[<<fib_1030@113:1>@121:0>](<fib_1030@113:0>:int,<<fib_1030@113:1>@121:0>:int)
          
          P[<fib_1030@89:0>](var388:int),
          P[<<fib_1030@101:1>@109:0>](var389:int,<f_k_fib_1152@111:4>:int),
          ((var389 = (1 + <fib_1030@113:0>)) && ((var388 = (2 + <fib_1030@113:0>)) && ((1 + <fib_1030@113:0>) > 0)))
          |- P[<fib_1030@113:0>](<fib_1030@113:0>:int)
          
          P[<fib_1030@101:0>](<fib_1030@101:0>:int), ((<<fib_1030@101:1>@109:0> = 1) && (<fib_1030@101:0> = 0))
          |- P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int)
          
          P[<fib_1030@89:0>](var390:int), ((var390 = (1 + <fib_1030@101:0>)) && (<fib_1030@101:0> > 0))
          |- P[<fib_1030@101:0>](<fib_1030@101:0>:int)
          
          P[<fib_1030@77:0>](var391:int), ((var391 = (1 + <fib_1030@89:0>)) && (<fib_1030@89:0> > 0))
          |- P[<fib_1030@89:0>](<fib_1030@89:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1157_sep_166_sep_0($277)) -> 1=0.
(($277-1=0) & ($278-3=0) & ($279-4<0)) & (v_sep_fib_1030_sep_77_sep_1_sep_161_sep_0($278,$279)) -> v_sep_fail_1157_sep_166_sep_0($277).
(($280-1>0) & (-$280+$281+1=0) & (-$280+$282+2=0) & ($283+$284-$285=0)) & (v_sep_fib_1030_sep_139_sep_1_sep_147_sep_0($282,$283)) & (v_sep_fib_1030_sep_89_sep_1_sep_135_sep_0($281,$284)) & (v_sep_fib_1030_sep_77_sep_0($280)) -> v_sep_fib_1030_sep_77_sep_1_sep_161_sep_0($280,$285).
(($286=0) & ($287-1=0)) & (v_sep_fib_1030_sep_139_sep_0($286)) -> v_sep_fib_1030_sep_139_sep_1_sep_147_sep_0($286,$287).
(($286+1>0) & (-$286+$288-2=0) & (-$286+$289-1=0)) & (v_sep_fib_1030_sep_89_sep_1_sep_135_sep_0($289,$290)) & (v_sep_fib_1030_sep_77_sep_0($288)) -> v_sep_fib_1030_sep_139_sep_0($286).
(($291-1>0) & (-$291+$292+1=0) & (-$291+$293+2=0) & ($294+$295-$296=0)) & (v_sep_fib_1030_sep_113_sep_1_sep_121_sep_0($293,$294)) & (v_sep_fib_1030_sep_101_sep_1_sep_109_sep_0($292,$295)) & (v_sep_fib_1030_sep_89_sep_0($291)) -> v_sep_fib_1030_sep_89_sep_1_sep_135_sep_0($291,$296).
(($297=0) & ($298-1=0)) & (v_sep_fib_1030_sep_113_sep_0($297)) -> v_sep_fib_1030_sep_113_sep_1_sep_121_sep_0($297,$298).
(($297+1>0) & (-$297+$299-2=0) & (-$297+$300-1=0)) & (v_sep_fib_1030_sep_101_sep_1_sep_109_sep_0($300,$301)) & (v_sep_fib_1030_sep_89_sep_0($299)) -> v_sep_fib_1030_sep_113_sep_0($297).
(($302=0) & ($303-1=0)) & (v_sep_fib_1030_sep_101_sep_0($302)) -> v_sep_fib_1030_sep_101_sep_1_sep_109_sep_0($302,$303).
(($302>0) & (-$302+$304-1=0)) & (v_sep_fib_1030_sep_89_sep_0($304)) -> v_sep_fib_1030_sep_101_sep_0($302).
(($291>0) & (-$291+$305-1=0)) & (v_sep_fib_1030_sep_77_sep_0($305)) -> v_sep_fib_1030_sep_89_sep_0($291).
$280-3=0 -> v_sep_fib_1030_sep_77_sep_0($280).


v_sep_fail_1157_sep_166_sep_0: X
v_sep_fib_1030_sep_101_sep_0: X
v_sep_fib_1030_sep_101_sep_1_sep_109_sep_0: X
v_sep_fib_1030_sep_113_sep_0: X
v_sep_fib_1030_sep_113_sep_1_sep_121_sep_0: X
v_sep_fib_1030_sep_139_sep_0: X
v_sep_fib_1030_sep_139_sep_1_sep_147_sep_0: X
v_sep_fib_1030_sep_77_sep_0: X
v_sep_fib_1030_sep_77_sep_1_sep_161_sep_0: X
v_sep_fib_1030_sep_89_sep_0: X
v_sep_fib_1030_sep_89_sep_1_sep_135_sep_0: X
..................
v_sep_fail_1157_sep_166_sep_0: X
v_sep_fib_1030_sep_101_sep_0: X
v_sep_fib_1030_sep_101_sep_1_sep_109_sep_0: X
v_sep_fib_1030_sep_113_sep_0: X
v_sep_fib_1030_sep_113_sep_1_sep_121_sep_0: X
v_sep_fib_1030_sep_139_sep_0: X
v_sep_fib_1030_sep_139_sep_1_sep_147_sep_0: X
v_sep_fib_1030_sep_77_sep_0: X
v_sep_fib_1030_sep_77_sep_1_sep_161_sep_0: X
v_sep_fib_1030_sep_89_sep_0: X
v_sep_fib_1030_sep_89_sep_1_sep_135_sep_0: X
...
v_sep_fail_1157_sep_166_sep_0: X
v_sep_fib_1030_sep_101_sep_0: X
v_sep_fib_1030_sep_101_sep_1_sep_109_sep_0: X
v_sep_fib_1030_sep_113_sep_0: X
v_sep_fib_1030_sep_113_sep_1_sep_121_sep_0: X
v_sep_fib_1030_sep_139_sep_0: X
v_sep_fib_1030_sep_139_sep_1_sep_147_sep_0: X
v_sep_fib_1030_sep_77_sep_0: X
v_sep_fib_1030_sep_77_sep_1_sep_161_sep_0: X
v_sep_fib_1030_sep_89_sep_0: X
v_sep_fib_1030_sep_89_sep_1_sep_135_sep_0: X
......
v_sep_fail_1157_sep_166_sep_0: X
v_sep_fib_1030_sep_101_sep_0: X
v_sep_fib_1030_sep_101_sep_1_sep_109_sep_0: X
v_sep_fib_1030_sep_113_sep_0: X
v_sep_fib_1030_sep_113_sep_1_sep_121_sep_0: X
v_sep_fib_1030_sep_139_sep_0: X
v_sep_fib_1030_sep_139_sep_1_sep_147_sep_0: X
v_sep_fib_1030_sep_77_sep_0: X
v_sep_fib_1030_sep_77_sep_1_sep_161_sep_0: X
v_sep_fib_1030_sep_89_sep_0: X
v_sep_fib_1030_sep_89_sep_1_sep_135_sep_0: X
..........
v_sep_fail_1157_sep_166_sep_0: X
v_sep_fib_1030_sep_101_sep_0: X
v_sep_fib_1030_sep_101_sep_1_sep_109_sep_0: X
v_sep_fib_1030_sep_113_sep_0: X
v_sep_fib_1030_sep_113_sep_1_sep_121_sep_0: X
v_sep_fib_1030_sep_139_sep_0: X
v_sep_fib_1030_sep_139_sep_1_sep_147_sep_0: X
v_sep_fib_1030_sep_77_sep_0: X
v_sep_fib_1030_sep_77_sep_1_sep_161_sep_0: X
v_sep_fib_1030_sep_89_sep_0: X
v_sep_fib_1030_sep_89_sep_1_sep_135_sep_0: X
...............
v_sep_fail_1157_sep_166_sep_0: X
v_sep_fib_1030_sep_101_sep_0: X
v_sep_fib_1030_sep_101_sep_1_sep_109_sep_0: X
v_sep_fib_1030_sep_113_sep_0: X
v_sep_fib_1030_sep_113_sep_1_sep_121_sep_0: X
v_sep_fib_1030_sep_139_sep_0: X
v_sep_fib_1030_sep_139_sep_1_sep_147_sep_0: X
v_sep_fib_1030_sep_77_sep_0: X
v_sep_fib_1030_sep_77_sep_1_sep_161_sep_0: X
v_sep_fib_1030_sep_89_sep_0: X
v_sep_fib_1030_sep_89_sep_1_sep_135_sep_0: X
..................(0=0) & (v_sep_fail_1157_sep_166_sep_0($277)) -> 1=0.
(($277-1=0) & ($278-3=0) & ($279-4<0)) & (v_sep_fib_1030_sep_77_sep_1_sep_161_sep_0($278,$279)) -> v_sep_fail_1157_sep_166_sep_0($277).
(($280-1>0) & (-$280+$281+1=0) & (-$280+$282+2=0) & ($283+$284-$285=0)) & (v_sep_fib_1030_sep_139_sep_1_sep_147_sep_0($282,$283)) & (v_sep_fib_1030_sep_89_sep_1_sep_135_sep_0($281,$284)) & (v_sep_fib_1030_sep_77_sep_0($280)) -> v_sep_fib_1030_sep_77_sep_1_sep_161_sep_0($280,$285).
(($286=0) & ($287-1=0)) & (v_sep_fib_1030_sep_139_sep_0($286)) -> v_sep_fib_1030_sep_139_sep_1_sep_147_sep_0($286,$287).
(($286+1>0) & (-$286+$288-2=0) & (-$286+$289-1=0)) & (v_sep_fib_1030_sep_89_sep_1_sep_135_sep_0($289,$290)) & (v_sep_fib_1030_sep_77_sep_0($288)) -> v_sep_fib_1030_sep_139_sep_0($286).
(($291-1>0) & (-$291+$292+1=0) & (-$291+$293+2=0) & ($294+$295-$296=0)) & (v_sep_fib_1030_sep_113_sep_1_sep_121_sep_0($293,$294)) & (v_sep_fib_1030_sep_101_sep_1_sep_109_sep_0($292,$295)) & (v_sep_fib_1030_sep_89_sep_0($291)) -> v_sep_fib_1030_sep_89_sep_1_sep_135_sep_0($291,$296).
(($297=0) & ($298-1=0)) & (v_sep_fib_1030_sep_113_sep_0($297)) -> v_sep_fib_1030_sep_113_sep_1_sep_121_sep_0($297,$298).
(($297+1>0) & (-$297+$299-2=0) & (-$297+$300-1=0)) & (v_sep_fib_1030_sep_101_sep_1_sep_109_sep_0($300,$301)) & (v_sep_fib_1030_sep_89_sep_0($299)) -> v_sep_fib_1030_sep_113_sep_0($297).
(($302=0) & ($303-1=0)) & (v_sep_fib_1030_sep_101_sep_0($302)) -> v_sep_fib_1030_sep_101_sep_1_sep_109_sep_0($302,$303).
(($302>0) & (-$302+$304-1=0)) & (v_sep_fib_1030_sep_89_sep_0($304)) -> v_sep_fib_1030_sep_101_sep_0($302).
(($291>0) & (-$291+$305-1=0)) & (v_sep_fib_1030_sep_77_sep_0($305)) -> v_sep_fib_1030_sep_89_sep_0($291).
$280-3=0 -> v_sep_fib_1030_sep_77_sep_0($280).

           (<fib_1030@77:0> = 3) |- P[<fib_1030@77:0>](<fib_1030@77:0>:int)
        solution:
          P[<fail_1157@166:0>]($306:bool) = false
          P[<fib_1030@101:0>]($346:int) = (1 <= $346)
          P[<<fib_1030@101:1>@109:0>]($335:int,$337:int) = false
          P[<fib_1030@113:0>]($343:int) = false
          P[<<fib_1030@113:1>@121:0>]($330:int,$332:int) = false
          P[<fib_1030@139:0>]($327:int) = false
          P[<<fib_1030@139:1>@147:0>]($314:int,$316:int) = false
          P[<fib_1030@77:0>]($324:int) = true
          P[<<fib_1030@77:1>@161:0>]($309:int,$311:int) = false
          P[<fib_1030@89:0>]($340:int) = true
          P[<<fib_1030@89:1>@135:0>]($319:int,$321:int) = false
        
      end HcSolver.solve_ub(68532)[4] (0.055991 sec.)
      begin HcSolver.check_validity(69388)[4]
        input:
          P[<fail_1157@166:0>](<fail_1157@166:0>:bool)|- bot
          
          P[<<fib_1030@77:1>@161:0>](3:int,<f_1154@163:0>:int), ((<f_1154@163:0> < 4) && <fail_1157@166:0>)
          |- P[<fail_1157@166:0>](<fail_1157@166:0>:bool)
          
          P[<fib_1030@77:0>](<fib_1030@77:0>:int),
          P[<<fib_1030@89:1>@135:0>]((-1 + <fib_1030@77:0>):int,var183:int),
          P[<<fib_1030@139:1>@147:0>]((-2 + <fib_1030@77:0>):int,(<<fib_1030@77:1>@161:0> + (-1 * var183)):int),
          (<fib_1030@77:0> > 1) |- P[<<fib_1030@77:1>@161:0>](<fib_1030@77:0>:int,
                                                              <<fib_1030@77:1>@161:0>:int)
          
          P[<fib_1030@139:0>](<fib_1030@139:0>:int), ((<fib_1030@139:0> = 0) && (<<fib_1030@139:1>@147:0> = 1))
          |- P[<<fib_1030@139:1>@147:0>](<fib_1030@139:0>:int,<<fib_1030@139:1>@147:0>:int)
          
          P[<fib_1030@77:0>]((2 + <fib_1030@139:0>):int),
          P[<<fib_1030@89:1>@135:0>]((1 + <fib_1030@139:0>):int,<f_k_fib_1152@137:4>:int), (
          (1 + <fib_1030@139:0>) > 0) |- P[<fib_1030@139:0>](<fib_1030@139:0>:int)
          
          P[<fib_1030@89:0>](<fib_1030@89:0>:int),
          P[<<fib_1030@101:1>@109:0>]((-1 + <fib_1030@89:0>):int,var184:int),
          P[<<fib_1030@113:1>@121:0>]((-2 + <fib_1030@89:0>):int,(<<fib_1030@89:1>@135:0> + (-1 * var184)):int),
          (<fib_1030@89:0> > 1) |- P[<<fib_1030@89:1>@135:0>](<fib_1030@89:0>:int,
                                                              <<fib_1030@89:1>@135:0>:int)
          
          P[<fib_1030@113:0>](<fib_1030@113:0>:int), ((<fib_1030@113:0> = 0) && (<<fib_1030@113:1>@121:0> = 1))
          |- P[<<fib_1030@113:1>@121:0>](<fib_1030@113:0>:int,<<fib_1030@113:1>@121:0>:int)
          
          P[<fib_1030@89:0>]((2 + <fib_1030@113:0>):int),
          P[<<fib_1030@101:1>@109:0>]((1 + <fib_1030@113:0>):int,<f_k_fib_1152@111:4>:int),
          ((1 + <fib_1030@113:0>) > 0) |- P[<fib_1030@113:0>](<fib_1030@113:0>:int)
          
          P[<fib_1030@101:0>](<fib_1030@101:0>:int), ((<fib_1030@101:0> = 0) && (<<fib_1030@101:1>@109:0> = 1))
          |- P[<<fib_1030@101:1>@109:0>](<fib_1030@101:0>:int,<<fib_1030@101:1>@109:0>:int)
          
          P[<fib_1030@89:0>]((1 + <fib_1030@101:0>):int), (<fib_1030@101:0> > 0)
          |- P[<fib_1030@101:0>](<fib_1030@101:0>:int)
          
          P[<fib_1030@77:0>]((1 + <fib_1030@89:0>):int), (<fib_1030@89:0> > 0)
          |- P[<fib_1030@89:0>](<fib_1030@89:0>:int)
          
           (<fib_1030@77:0> = 3) |- P[<fib_1030@77:0>](<fib_1030@77:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(69388)[4] (0.006999 sec.)
      solution:
        P[<fail_1157@166:0>]($306:bool) = false
        P[<fib_1030@101:0>]($346:int) = (1 <= $346)
        P[<<fib_1030@101:1>@109:0>]($335:int,$337:int) = false
        P[<fib_1030@113:0>]($343:int) = false
        P[<<fib_1030@113:1>@121:0>]($330:int,$332:int) = false
        P[<fib_1030@139:0>]($327:int) = false
        P[<<fib_1030@139:1>@147:0>]($314:int,$316:int) = false
        P[<fib_1030@77:0>]($324:int) = true
        P[<<fib_1030@77:1>@161:0>]($309:int,$311:int) = false
        P[<fib_1030@89:0>]($340:int) = true
        P[<<fib_1030@89:1>@135:0>]($319:int,$321:int) = false
    end YhornInterface.solve(68531)[3] (0.062990 sec.)
    
  end RefTypeInfer.infer_etrs(29347)[2] (0.367944 sec.)
  refinement types:
    main_1151: X
    fib_1030: v1:{v1:int | (1 <= v1)} -> (v2:{v2:int | false} -> X) -> X
    k_fib_1084: v1:int -> (v2:int -> X) -> v4:bool -> X
    br_k_fib_1155: v1:bool -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_fib_1088: v1:bool -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fib_1030: v1:{v1:int | (1 <= v1)} -> (v2:{v2:int | false} -> X) -> X
    k_fib_1084: v1:int -> (v2:int -> X) -> v4:bool -> X
    br_k_fib_1155: v1:bool -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_fib_1088: v1:bool -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fib_1030: v1:{v1:int | (1 <= v1)} -> (v2:{v2:int | false} -> X) -> X
    k_fib_1084: v1:int -> (v2:int -> X) -> v4:bool -> X
    f_k_fib_1152: v1:bool -> v2:bool -> v3:int -> (v4:int -> X) -> v6:int -> X
    fib_1030: v1:{v1:int | (1 <= v1)} -> (v2:{v2:int | false} -> X) -> X
    k_fib_1084: v1:int -> (v2:int -> X) -> v4:bool -> X
    f_k_fib_1153: v1:bool -> v2:bool -> v3:int -> v4:int -> (v5:int -> X) -> v7:int -> X
    f_k_fib_1152: v1:bool -> v2:bool -> v3:int -> (v4:int -> X) -> v6:int -> X
    fib_1030: v1:{v1:int | (1 <= v1)} -> (v2:{v2:int | false} -> X) -> X
    k_fib_1084: v1:int -> (v2:int -> X) -> v4:bool -> X
    f_k_fib_1153: v1:bool -> v2:bool -> v3:int -> v4:int -> (v5:int -> X) -> v7:int -> X
    f_1154: v1:int -> X
    fail_1157: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    k_main_1148: var395:unit -> X
  abstraction types:
    main_1151: X
    fib_1030: var408:int[var408 -> (1 <= var408)] -> (var409:int -> X) -> X
    k_fib_1084: var427:int -> (var428:int -> X) -> var430:bool -> X
    br_k_fib_1155: var432:bool -> var433:int -> (var434:int -> X) -> var436:bool -> X
    k_fib_1088: var438:bool -> var439:int -> (var440:int -> X) -> var442:bool -> X
    f_k_fib_1152: var444:bool -> var445:bool -> var446:int -> (var447:int -> X) -> var449:int -> X
    f_k_fib_1153: var451:bool -> var452:bool -> var453:int -> var454:int -> (var455:int -> X) -> var457:int -> X
    f_1154: v1:int -> X
    fail_1157: v1:bool -> (v2:unit -> X) -> X
    k_main_1148: var395:unit -> X
  
end AbsTypeInfer.refine(29346)[1] (0.373943 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 1; 0; 1; 0; 1; 0; 1; 0; 0

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1151
  main_1151 -> (fib_1030 3 f_1154)
  br_k_fib_1155 b_1156 n_1031 k_fib_1081 b_1121 when b_1156 -> (k_fib_1088 b_1121 n_1031 k_fib_1081 (n_1031 <= 1))
  br_k_fib_1155 b_1156 n_1031 k_fib_1081 b_1121 when (not b_1156) -> (k_fib_1088 b_1121 n_1031 k_fib_1081 false)
  f_1154 x_1127 when (x_1127 >= 4) -> (k_main_1148 ())
  f_1154 x_1127 when (not (x_1127 >= 4)) -> (fail_1157 true k_main_1148)
  f_k_fib_1152 b_1117 b_1121 n_1031 k_fib_1081 x_1092 ->
      (fib_1030 (n_1031 - 2) (f_k_fib_1153 b_1117 b_1121 n_1031 x_1092 k_fib_1081))
  f_k_fib_1153 b_1117 b_1121 n_1031 x_1092 k_fib_1081 x_1093 -> (k_fib_1081 (x_1092 + x_1093))
  fail_1157 b k -> {fail} => (k ())
  fib_1030 n_1031 k_fib_1081 when (n_1031 >= 0) -> (k_fib_1084 n_1031 k_fib_1081 (n_1031 <= 0))
  fib_1030 n_1031 k_fib_1081 when (not (n_1031 >= 0)) -> (k_fib_1084 n_1031 k_fib_1081 false)
  k_fib_1084 n_1031 k_fib_1081 b_1121 when b_1121 -> (k_fib_1081 1)
  k_fib_1084 n_1031 k_fib_1081 b_1121 when (not b_1121) -> (br_k_fib_1155 (n_1031 >= 1) n_1031 k_fib_1081 b_1121)
  k_fib_1088 b_1121 n_1031 k_fib_1081 b_1117 when b_1117 -> (k_fib_1081 1)
  k_fib_1088 b_1121 n_1031 k_fib_1081 b_1117 when (not b_1117) ->
      (fib_1030 (n_1031 - 1) (f_k_fib_1152 b_1117 b_1121 n_1031 k_fib_1081))
  k_main_1148 x_1124 -> end
Types:
  main_1151 : X
  fail_1157 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fib_1030 : (x_1:int[x_1 >= 1; x_1 >= 2; x_1 >= 3] -> (int -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1151 ... --> 
  fib_1030 [1/2] ... --> 
  k_fib_1084 [2/2] ... --> 
  br_k_fib_1155 [1/2] ... --> 
  k_fib_1088 [2/2] ... --> 
  fib_1030 [1/2] ... --> 
  k_fib_1084 [2/2] ... --> 
  br_k_fib_1155 [1/2] ... --> 
  k_fib_1088 [2/2] ... --> 
  fib_1030 [1/2] ... --> 
  k_fib_1084 [2/2] ... --> 
  br_k_fib_1155 [1/2] ... --> 
  k_fib_1088 [1/2] ... --> 
  f_k_fib_1152 ... --> 
  fib_1030 [1/2] ... --> 
  k_fib_1084 [1/2] ... --> 
  f_k_fib_1153 ... --> 
  f_k_fib_1152 ... --> 
  fib_1030 [1/2] ... --> 
  k_fib_1084 [2/2] ... --> 
  br_k_fib_1155 [1/2] ... --> 
  k_fib_1088 [1/2] ... --> 
  f_k_fib_1153 ... --> 
  f_1154 [2/2] ... --> 
  fail_1157 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 1; 0; 1; 0; 1; 0; 1; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... begin Cvc3Interface.solve(71569)[1]
  CVC3 input: PUSH;;CHECKSAT (TRUE AND ((NOT (((1 + 1) + 1) >= 4)) AND (TRUE AND (((3 - 2) <= 1) AND (((3 - 2) >= 1) AND ((NOT ((3 - 2) <= 0)) AND (((3 - 2) >= 0) AND (TRUE AND (TRUE AND ((((3 - 1) - 2) <= 0) AND ((((3 - 1) - 2) >= 0) AND (TRUE AND ((((3 - 1) - 1) <= 1) AND ((((3 - 1) - 1) >= 1) AND ((NOT (((3 - 1) - 1) <= 0)) AND ((((3 - 1) - 1) >= 0) AND ((NOT ((3 - 1) <= 1)) AND (((3 - 1) >= 1) AND ((NOT ((3 - 1) <= 0)) AND (((3 - 1) >= 0) AND ((NOT (3 <= 1)) AND ((3 >= 1) AND ((NOT (3 <= 0)) AND ((3 >= 0) AND TRUE))))))))))))))))))))))));COUNTERMODEL;POP;
  CVC3 output: CVC> Satisfiable.
  CVC3 output: Current scope level is 9.
  CVC3 output:  Did not find concrete model for any vars
  CVC3 output: CVC> 
  end Cvc3Interface.solve(71569)[1] (0.005000 sec.)
DONE!

Unsafe!

Error trace:
  fib 3 ->
    if false then ... ->
    if false then ... ->
    fib 1 ->
      if false then ... ->
      if true then ... ->
    fib 2 ->
      if false then ... ->
      if false then ... ->
      fib 0 ->
        if true then ... ->
      fib 1 ->
        if false then ... ->
        if true then ... ->
  if false then ... ->
  FAIL!

cycles: 3
total: 1.286 sec
  abst: 0.035 sec
  mc: 0.100 sec
  refine: 0.667 sec
    exparam: 0.239 sec
