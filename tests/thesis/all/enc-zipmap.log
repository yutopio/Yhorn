MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi enc-zipmap.ml

parsed::
 let rec zip_1030 x_1031 y_1032 =
   if x_1031 = 0 then
     if y_1032 = 0 then
       x_1031
     else
       let u_1043 = {fail} () 
       in
         _|_
   else
     if y_1032 = 0 then
       let u_1046 = {fail} () 
       in
         _|_
     else
       1 + zip_1030 (x_1031 - 1) (y_1032 - 1) 
 in
 let rec map_1033 x_1034 = if x_1034 = 0 then
                             x_1034
                           else
                             1 + map_1033 (x_1034 - 1) 
 in
 let main_1035 n_1036 = if map_1033 (zip_1030 n_1036 n_1036) = n_1036 then
                          ()
                        else
                          {fail} () 
 in
   ()

set_target::
 let rec zip_1030 x_1031 y_1032 =
   if x_1031 = 0 then
     if y_1032 = 0 then
       x_1031
     else
       let u_1043 = {fail} () 
       in
         _|_
   else
     if y_1032 = 0 then
       let u_1046 = {fail} () 
       in
         _|_
     else
       1 + zip_1030 (x_1031 - 1) (y_1032 - 1) 
 in
 let rec map_1033 x_1034 = if x_1034 = 0 then
                             x_1034
                           else
                             1 + map_1033 (x_1034 - 1) 
 in
 let main_1035 n_1036 = if map_1033 (zip_1030 n_1036 n_1036) = n_1036 then
                          ()
                        else
                          {fail} () 
 in
 let main_1074 = let arg1_1073 = rand_int () 
                 in
                   main_1035 arg1_1073 
 in
   ()

CPS::
 let rec zip_1030 (x_1031:int) (y_1032:int) (k_zip_1102:(int -> X)) =
   if x_1031 = 0 then
     if y_1032 = 0 then
       k_zip_1102 x_1031
     else
       {|fail|} () (fun x_1105 -> _|_)
   else
     if y_1032 = 0 then
       {|fail|} () (fun x_1121 -> _|_)
     else
       zip_1030 (x_1031 - 1) (y_1032 - 1) (fun x_1134 -> k_zip_1102 (1 + x_1134)) 
 in
 let rec map_1033 (x_1034:int) (k_map_1167:(int -> X)) =
   if x_1034 = 0 then
     k_map_1167 x_1034
   else
     map_1033 (x_1034 - 1) (fun x_1171 -> k_map_1167 (1 + x_1171)) 
 in
 let main_1035 (n_1036:int) (k_main_1199:(unit -> X)) =
   zip_1030 n_1036 n_1036
     (fun x_1224 ->
        map_1033 x_1224 (fun x_1202 -> (if x_1202 = n_1036 then
                                          k_main_1199 ()
                                        else
                                          {|fail|} () k_main_1199))) 
 in
   rand_int_cps () (fun x_1241 -> main_1035 x_1241 (fun x_1238 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1266
  main_1266 -> (rand_int f_1273)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when b_1276 -> (k_zip_1102 x_1031)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when (not b_1276) -> (fail_1279 true (f_zip_1267 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when b_1278 -> (fail_1280 true (f_zip_1268 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when (not b_1278) ->
      (zip_1030 (x_1031 - 1) (y_1032 - 1) (f_zip_1269 x_1031 y_1032 k_zip_1102))
  f_1273 x_1241 -> (main_1035 x_1241 (f_1274 x_1241))
  f_1274 x_1241 x_1238 -> end
  f_main_1271 n_1036 k_main_1199 x_1224 -> (map_1033 x_1224 (f_main_1272 n_1036 x_1224 k_main_1199))
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (x_1202 = n_1036) -> (k_main_1199 ())
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (not (x_1202 = n_1036)) -> (fail_1281 true k_main_1199)
  f_map_1270 x_1034 k_map_1167 x_1171 -> (k_map_1167 (1 + x_1171))
  f_zip_1267 x_1031 y_1032 x_1105 -> _|_
  f_zip_1268 x_1031 y_1032 x_1121 -> _|_
  f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 -> (k_zip_1102 (1 + x_1134))
  fail_1279 b k -> {fail} => (k ())
  fail_1280 b k -> {fail} => (k ())
  fail_1281 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1199 -> (zip_1030 n_1036 n_1036 (f_main_1271 n_1036 k_main_1199))
  map_1033 x_1034 k_map_1167 when (x_1034 = 0) -> (k_map_1167 x_1034)
  map_1033 x_1034 k_map_1167 when (not (x_1034 = 0)) -> (map_1033 (x_1034 - 1) (f_map_1270 x_1034 k_map_1167))
  zip_1030 x_1031 y_1032 k_zip_1102 when (x_1031 = 0) -> (br_zip_1275 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
  zip_1030 x_1031 y_1032 k_zip_1102 when (not (x_1031 = 0)) -> (br_zip_1277 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
Types:
  main_1266 : X
  fail_1279 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1280 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1281 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1033 : (int -> (int -> X) -> X)
  zip_1030 : (int -> int -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1266 ... --> 
  f_1273 ... --> 
  main_1035 ... --> 
  zip_1030 [2/2] ... --> 
  br_zip_1277 [1/2] ... --> 
  fail_1280 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(156)[1]
  program:
    main_1266  | true = ((Random.int 0) f_1273)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | b_1276 = (k_zip_1102 x_1031)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | (not b_1276) = (fail_1279 true
                                                                    (f_zip_1267 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | b_1278 = (fail_1280 true
                                                                    (f_zip_1268 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | (not b_1278) = (zip_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    (
                                                                    y_1032 - 1)
                                                                    (
                                                                    f_zip_1269 x_1031
                                                                    y_1032
                                                                    k_zip_1102))
    f_1273 x_1241 | true = (main_1035 x_1241
                                      (f_1274 x_1241))
    f_1274 x_1241 x_1238 | true = end
    f_main_1271 n_1036 k_main_1199 x_1224 | true = (map_1033 x_1224
                                                             (f_main_1272 n_1036
                                                                    x_1224
                                                                    k_main_1199))
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (x_1202 = n_1036) = (
    k_main_1199 ())
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (not (x_1202 = n_1036)) = (
    fail_1281 true
              k_main_1199)
    f_map_1270 x_1034 k_map_1167 x_1171 | true = (k_map_1167 (1 + x_1171))
    f_zip_1267 x_1031 y_1032 x_1105 | true = bot
    f_zip_1268 x_1031 y_1032 x_1121 | true = bot
    f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 | true = (k_zip_1102 (
                                                                    1 + x_1134))
    fail_1279 b k | true = (fail ())
    fail_1280 b k | true = (fail ())
    fail_1281 b k | true = (fail ())
    main_1035 n_1036 k_main_1199 | true = (zip_1030 n_1036
                                                    n_1036
                                                    (f_main_1271 n_1036
                                                                 k_main_1199))
    map_1033 x_1034 k_map_1167 | (x_1034 = 0) = (k_map_1167 x_1034)
    map_1033 x_1034 k_map_1167 | (not (x_1034 = 0)) = (map_1033 (x_1034 - 1)
                                                                (f_map_1270 x_1034
                                                                    k_map_1167))
    zip_1030 x_1031 y_1032 k_zip_1102 | (x_1031 = 0) = (br_zip_1275 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    zip_1030 x_1031 y_1032 k_zip_1102 | (not (x_1031 = 0)) = (br_zip_1277 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    main_1266:X
    br_zip_1275:bool -> int -> int -> (int -> X) -> X
    br_zip_1277:bool -> int -> int -> (int -> X) -> X
    f_1273:int -> X
    f_1274:int -> unit -> X
    f_main_1271:int -> (unit -> X) -> int -> X
    f_main_1272:int -> int -> (unit -> X) -> int -> X
    f_map_1270:int -> (int -> X) -> int -> X
    f_zip_1267:int -> int -> unit -> X
    f_zip_1268:int -> int -> unit -> X
    f_zip_1269:int -> int -> (int -> X) -> int -> X
    fail_1279:bool -> (unit -> X) -> X
    fail_1280:bool -> (unit -> X) -> X
    fail_1281:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    map_1033:int -> (int -> X) -> X
    zip_1030:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1275,br_zip_1277,f_1273,f_1274,f_main_1271,f_main_1272,f_map_1270,f_zip_1267,f_zip_1268,f_zip_1269,main_1035
  counterexample: 0:0:0:1:0:0
  error traces:
    [true.nop(<f_1273@4:0> = var2)
     [true.(<main_1035@6:0> = <f_1273@4:0>)
      [true.((<zip_1030@8:0> = <main_1035@6:0>) && (<zip_1030@8:1> = <main_1035@6:0>))
       [(not (<zip_1030@8:0> = 0)).
        ((<br_zip_1277@11:0> = (<zip_1030@8:1> = 0)) &&
         ((<br_zip_1277@11:1> = <zip_1030@8:0>) && (<br_zip_1277@11:2> = <zip_1030@8:1>)))
        [<br_zip_1277@11:0>.(<fail_1280@14:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(157)[2]
    horn clauses:
      P[<fail_1280@14:0>](<fail_1280@14:0>:bool)|- bot
      
      P[<br_zip_1277@11:2>](true:bool,<br_zip_1277@11:1>:int,<br_zip_1277@11:2>:int), <fail_1280@14:0>
      |- P[<fail_1280@14:0>](<fail_1280@14:0>:bool)
      
      P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,<br_zip_1277@11:2>:int),
      ((<br_zip_1277@11:1> <> 0) && (<br_zip_1277@11:0> = (<br_zip_1277@11:2> = 0)))
      |- P[<br_zip_1277@11:2>](<br_zip_1277@11:0>:bool,<br_zip_1277@11:1>:int,
                               <br_zip_1277@11:2>:int)
      
      P[<main_1035@6:0>](<zip_1030@8:1>:int), (<zip_1030@8:1> = <zip_1030@8:0>)
      |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,<zip_1030@8:1>:int)
      
      P[<f_1273@4:0>](<main_1035@6:0>:int)|- P[<main_1035@6:0>](<main_1035@6:0>:int)
      
      |- P[<f_1273@4:0>](<f_1273@4:0>:int)
    call trees:
      <main_1266@1>
        <f_1273@4>
          <main_1035@6>
            <zip_1030@8>
              <br_zip_1277@11>
                <fail_1280@14>
    inlined horn clauses:
      P[<fail_1280@14:0>](<fail_1280@14:0>:bool)|- bot
      
      P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,0:int), ((<br_zip_1277@11:1> <> 0) && <fail_1280@14:0>)
      |- P[<fail_1280@14:0>](<fail_1280@14:0>:bool)
      
       (<zip_1030@8:1> = <zip_1030@8:0>) |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,
                                                              <zip_1030@8:1>:int)
    begin ParamSubstInfer.infer(896)[3]
      
    end ParamSubstInfer.infer(896)[3] (0.009998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(898)[3]
      
    end RefTypeInfer.elim_coeffs(898)[3] (0.000000 sec.)
    begin GenHcSolver.solve(998)[3]
      Horn clauses:
        P[<fail_1280@14:0>](<fail_1280@14:0>:bool)|- bot
        
        P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,0:int), ((<br_zip_1277@11:1> <> 0) && <fail_1280@14:0>)
        |- P[<fail_1280@14:0>](<fail_1280@14:0>:bool)
        
         (<zip_1030@8:1> = <zip_1030@8:0>) |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,
                                                                <zip_1030@8:1>:int)
      lower bounds:
        P[<zip_1030@8:1>](<zip_1030@8:0>:int,<zip_1030@8:1>:int) = (<zip_1030@8:1> = <zip_1030@8:0>)
        P[<fail_1280@14:0>](<fail_1280@14:0>:bool) = false
      upper bounds:
        P[<fail_1280@14:0>](var4:bool) = true
      begin GenHcSolver.classify_pids(1439)[4]
        output:
          [<fail_1280@14:0>]
      end GenHcSolver.classify_pids(1439)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(1442)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(1443)[5]
          begin InterpProver.interpolate_fresh(1444)[6]
            begin InterpProver.interpolate_log(1445)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(1446)[8]
                begin InterpProver.interpolate_simplify(1447)[9]
                  begin InterpProver.interpolate_quick(1460)[10]
                    
                  end InterpProver.interpolate_quick(1460)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(1464)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(1464)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(1447)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(1446)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(1445)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(1444)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(1443)[5] (0.001000 sec.)
        output:
          P[<fail_1280@14:0>](<fail_1280@14:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(1442)[4] (0.001000 sec.)
      Horn clauses:
        P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,0:int), (<br_zip_1277@11:1> <> 0) |- bot
        
         (<zip_1030@8:1> = <zip_1030@8:0>) |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,
                                                                <zip_1030@8:1>:int)
      lower bounds:
        P[<zip_1030@8:1>](<zip_1030@8:0>:int,<zip_1030@8:1>:int) = (<zip_1030@8:1> = <zip_1030@8:0>)
      upper bounds:
        P[<zip_1030@8:1>](var5:int,var6:int) = ((var6 <> 0) || (var5 = 0))
      begin GenHcSolver.classify_pids(2020)[4]
        output:
          [<zip_1030@8:1>]
      end GenHcSolver.classify_pids(2020)[4] (0.000000 sec.)
      lb:(<zip_1030@8:1> = <zip_1030@8:0>)
      nub:(not ((<zip_1030@8:1> <> 0) || (<zip_1030@8:0> = 0)))
      begin ApronInterface.convex_hull_interpolate(2023)[4]
        lb:(<zip_1030@8:1> = <zip_1030@8:0>)
        nub:(not ((<zip_1030@8:1> <> 0) || (<zip_1030@8:0> = 0)))
        lb':(<zip_1030@8:1> = <zip_1030@8:0>)
        nub':(not ((<zip_1030@8:1> <> 0) || (<zip_1030@8:0> = 0)))
        begin InterpProver.interpolate(2024)[5]
          begin InterpProver.interpolate_fresh(2025)[6]
            begin InterpProver.interpolate_log(2026)[7]
              input1: (<zip_1030@8:1> = <zip_1030@8:0>)
              input2: (not ((<zip_1030@8:1> <> 0) || (<zip_1030@8:0> = 0)))
              begin InterpProver.interpolate_check(2027)[8]
                begin InterpProver.interpolate_simplify(2028)[9]
                  begin InterpProver.interpolate_quick(2059)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(2068)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(2069)[12]
                        begin CsisatInterface.interpolate_csisat_log(2070)[13]
                          input1: v_sep_zip_1030_sep_8_sep_0 = v_sep_zip_1030_sep_8_sep_1
                          input2: (not 0 = v_sep_zip_1030_sep_8_sep_0 & 0 = v_sep_zip_1030_sep_8_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(2071)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(2071)[14] (0.000000 sec.)
                          output: v_sep_zip_1030_sep_8_sep_0 = v_sep_zip_1030_sep_8_sep_1
                          
                        end CsisatInterface.interpolate_csisat_log(2070)[13] (0.000000 sec.)
                        after simplification: v_sep_zip_1030_sep_8_sep_0 = v_sep_zip_1030_sep_8_sep_1
                        after dnf conversion: ((v_sep_zip_1030_sep_8_sep_0 = v_sep_zip_1030_sep_8_sep_1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(2069)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(2068)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(2059)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(2028)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(2027)[8] (0.002000 sec.)
              output: (<zip_1030@8:0> = <zip_1030@8:1>)
            end InterpProver.interpolate_log(2026)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(2025)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(2024)[5] (0.002000 sec.)
        output:
          P[<zip_1030@8:1>](<zip_1030@8:0>:int,<zip_1030@8:1>:int) = (<zip_1030@8:0> = <zip_1030@8:1>)
      end ApronInterface.convex_hull_interpolate(2023)[4] (0.002000 sec.)
      begin HcSolver.check_validity(2185)[4]
        input:
          P[<fail_1280@14:0>](<fail_1280@14:0>:bool)|- bot
          
          P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,0:int), ((<br_zip_1277@11:1> <> 0) && <fail_1280@14:0>)
          |- P[<fail_1280@14:0>](<fail_1280@14:0>:bool)
          
           (<zip_1030@8:1> = <zip_1030@8:0>) |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,
                                                                  <zip_1030@8:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(2185)[4] (0.000000 sec.)
      solution:
        P[<fail_1280@14:0>](<fail_1280@14:0>:bool) = false
        P[<zip_1030@8:1>](<zip_1030@8:0>:int,<zip_1030@8:1>:int) = (<zip_1030@8:0> = <zip_1030@8:1>)
    end GenHcSolver.solve(998)[3] (0.006999 sec.)
    begin GenHcSolver.solve(2312)[3]
      Horn clauses:
        P[<fail_1280@14:0>](<fail_1280@14:0>:bool)|- bot
        
        P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,0:int), ((<br_zip_1277@11:1> <> 0) && <fail_1280@14:0>)
        |- P[<fail_1280@14:0>](<fail_1280@14:0>:bool)
        
         (<zip_1030@8:1> = <zip_1030@8:0>) |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,
                                                                <zip_1030@8:1>:int)
      lower bounds:
        P[<zip_1030@8:1>](<zip_1030@8:0>:int,<zip_1030@8:1>:int) = (<zip_1030@8:1> = <zip_1030@8:0>)
        P[<fail_1280@14:0>](<fail_1280@14:0>:bool) = false
      upper bounds:
        P[<fail_1280@14:0>](var8:bool) = true
      begin GenHcSolver.classify_pids(2753)[4]
        output:
          [<fail_1280@14:0>]
      end GenHcSolver.classify_pids(2753)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2756)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(2759)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(2759)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(2764)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(2764)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(2767)[5]
          begin InterpProver.interpolate_fresh(2768)[6]
            begin InterpProver.interpolate_log(2769)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(2770)[8]
                begin InterpProver.interpolate_simplify(2771)[9]
                  begin InterpProver.interpolate_quick(2786)[10]
                    
                  end InterpProver.interpolate_quick(2786)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2790)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2790)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(2771)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(2770)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(2769)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(2768)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(2767)[5] (0.001000 sec.)
        output:
          P[<fail_1280@14:0>](<fail_1280@14:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2756)[4] (0.001000 sec.)
      Horn clauses:
        P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,0:int), (<br_zip_1277@11:1> <> 0) |- bot
        
         (<zip_1030@8:1> = <zip_1030@8:0>) |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,
                                                                <zip_1030@8:1>:int)
      lower bounds:
        P[<zip_1030@8:1>](<zip_1030@8:0>:int,<zip_1030@8:1>:int) = (<zip_1030@8:1> = <zip_1030@8:0>)
      upper bounds:
        P[<zip_1030@8:1>](var9:int,var10:int) = ((var10 <> 0) || (var9 = 0))
      begin GenHcSolver.classify_pids(3353)[4]
        output:
          [<zip_1030@8:1>]
      end GenHcSolver.classify_pids(3353)[4] (0.000000 sec.)
      lb:(<zip_1030@8:1> = <zip_1030@8:0>)
      nub:(not ((<zip_1030@8:1> <> 0) || (<zip_1030@8:0> = 0)))
      begin ApronInterface.convex_hull_interpolate(3356)[4]
        lb:(<zip_1030@8:1> = <zip_1030@8:0>)
        nub:(not ((<zip_1030@8:1> <> 0) || (<zip_1030@8:0> = 0)))
        begin ExtFormula.Formula.case_analysis_boolean(3361)[5]
          ts: (<zip_1030@8:1> = <zip_1030@8:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(3361)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(3375)[5]
          ts: ((<zip_1030@8:1> = 0) && (<zip_1030@8:0> <> 0))
          
        end ExtFormula.Formula.case_analysis_boolean(3375)[5] (0.000000 sec.)
        lb':((<zip_1030@8:1> + (-1 * <zip_1030@8:0>)) = 0)
        nub':(<zip_1030@8:1> = 0)
        begin InterpProver.interpolate(3380)[5]
          begin InterpProver.interpolate_fresh(3381)[6]
            begin InterpProver.interpolate_log(3382)[7]
              input1: ((<zip_1030@8:1> + (-1 * <zip_1030@8:0>)) = 0)
              input2: (<zip_1030@8:1> = 0)
              begin InterpProver.interpolate_check(3383)[8]
                begin InterpProver.interpolate_simplify(3384)[9]
                  begin InterpProver.interpolate_quick(3401)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(3407)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(3408)[12]
                        begin CsisatInterface.interpolate_csisat_log(3409)[13]
                          input1: true
                          input2: 0 = v_sep_zip_1030_sep_8_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(3410)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(3410)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(3409)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(3408)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(3407)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(3401)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3384)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(3383)[8] (0.002000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(3382)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(3381)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(3380)[5] (0.002000 sec.)
        begin InterpProver.interpolate(3419)[5]
          begin InterpProver.interpolate_fresh(3420)[6]
            begin InterpProver.interpolate_log(3421)[7]
              input1: ((<zip_1030@8:1> + (-1 * <zip_1030@8:0>)) = 0)
              input2: (not ((<zip_1030@8:1> <> 0) || (<zip_1030@8:0> = 0)))
              begin InterpProver.interpolate_check(3422)[8]
                begin InterpProver.interpolate_simplify(3423)[9]
                  begin InterpProver.interpolate_quick(3454)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(3463)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(3464)[12]
                        begin CsisatInterface.interpolate_csisat_log(3465)[13]
                          input1: v_sep_zip_1030_sep_8_sep_0 = v_sep_zip_1030_sep_8_sep_1
                          input2: (not 0 = v_sep_zip_1030_sep_8_sep_0 & 0 = v_sep_zip_1030_sep_8_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(3466)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(3466)[14] (0.000000 sec.)
                          output: v_sep_zip_1030_sep_8_sep_0 = v_sep_zip_1030_sep_8_sep_1
                          
                        end CsisatInterface.interpolate_csisat_log(3465)[13] (0.000000 sec.)
                        after simplification: v_sep_zip_1030_sep_8_sep_0 = v_sep_zip_1030_sep_8_sep_1
                        after dnf conversion: ((v_sep_zip_1030_sep_8_sep_0 = v_sep_zip_1030_sep_8_sep_1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(3464)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(3463)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(3454)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3423)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3422)[8] (0.001000 sec.)
              output: (<zip_1030@8:0> = <zip_1030@8:1>)
            end InterpProver.interpolate_log(3421)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(3420)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(3419)[5] (0.001000 sec.)
        output:
          P[<zip_1030@8:1>](<zip_1030@8:0>:int,<zip_1030@8:1>:int) = (<zip_1030@8:0> = <zip_1030@8:1>)
      end ApronInterface.convex_hull_interpolate(3356)[4] (0.003000 sec.)
      begin HcSolver.check_validity(3580)[4]
        input:
          P[<fail_1280@14:0>](<fail_1280@14:0>:bool)|- bot
          
          P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,0:int), ((<br_zip_1277@11:1> <> 0) && <fail_1280@14:0>)
          |- P[<fail_1280@14:0>](<fail_1280@14:0>:bool)
          
           (<zip_1030@8:1> = <zip_1030@8:0>) |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,
                                                                  <zip_1030@8:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3580)[4] (0.001000 sec.)
      solution:
        P[<fail_1280@14:0>](<fail_1280@14:0>:bool) = false
        P[<zip_1030@8:1>](<zip_1030@8:0>:int,<zip_1030@8:1>:int) = (<zip_1030@8:0> = <zip_1030@8:1>)
    end GenHcSolver.solve(2312)[3] (0.008999 sec.)
    begin YhornInterface.solve(3707)[3]
      begin HcSolver.solve_ub(3708)[4]
        encoded:
          P[<fail_1280@14:0>](<fail_1280@14:0>:int)|- bot
          
          P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,0:int), ((<br_zip_1277@11:1> <> 0) && (<fail_1280@14:0> = 1))
          |- P[<fail_1280@14:0>](<fail_1280@14:0>:int)
          
           (<zip_1030@8:1> = <zip_1030@8:0>) |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,
                                                                  <zip_1030@8:1>:int)
        input to Yhorn:
          P[<fail_1280@14:0>](<fail_1280@14:0>:int)|- bot
          
          P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,var11:int),
          ((<br_zip_1277@11:1> <> 0) && ((var11 = 0) && (<fail_1280@14:0> = 1)))
          |- P[<fail_1280@14:0>](<fail_1280@14:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1280_sep_14_sep_0($6)) -> 1=0.
(($6-1=0) & ($7=0) & ($8<>0)) & (v_sep_zip_1030_sep_8_sep_1($8,$7)) -> v_sep_fail_1280_sep_14_sep_0($6).
$9-$10=0 -> v_sep_zip_1030_sep_8_sep_1($10,$9).


v_sep_fail_1280_sep_14_sep_0: X
v_sep_zip_1030_sep_8_sep_1: X
....Split disj [11] 0.215966
Reconstrcut: 3 **)

v_sep_fail_1280_sep_14_sep_0: (X) | (X)
v_sep_zip_1030_sep_8_sep_1: X
.....
v_sep_fail_1280_sep_14_sep_0: (X) | (X)
v_sep_zip_1030_sep_8_sep_1: X
.....Split conj [13] 0.220965
(Reconstrcut: 8 **)
v_sep_fail_1280_sep_14_sep_0: (X) | (X)
v_sep_zip_1030_sep_8_sep_1: (X) & (X)
.....
v_sep_fail_1280_sep_14_sep_0: (X) | (X)
v_sep_zip_1030_sep_8_sep_1: (X) & (X)
.....
v_sep_fail_1280_sep_14_sep_0: (X) | (X)
v_sep_zip_1030_sep_8_sep_1: (X) & (X)
.....(0=0) & (v_sep_fail_1280_sep_14_sep_0($6)) -> 1=0.
(($6-1=0) & ($7=0) & ($8<>0)) & (v_sep_zip_1030_sep_8_sep_1($8,$7)) -> v_sep_fail_1280_sep_14_sep_0($6).
$9-$10=0 -> v_sep_zip_1030_sep_8_sep_1($10,$9).

           (<zip_1030@8:1> = <zip_1030@8:0>) |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,
                                                                  <zip_1030@8:1>:int)
        solution:
          P[<fail_1280@14:0>]($11:bool) = false
          P[<zip_1030@8:1>]($14:int,$16:int) = ($16 = $14)
        
      end HcSolver.solve_ub(3708)[4] (0.017997 sec.)
      begin HcSolver.check_validity(3805)[4]
        input:
          P[<fail_1280@14:0>](<fail_1280@14:0>:bool)|- bot
          
          P[<zip_1030@8:1>](<br_zip_1277@11:1>:int,0:int), ((<br_zip_1277@11:1> <> 0) && <fail_1280@14:0>)
          |- P[<fail_1280@14:0>](<fail_1280@14:0>:bool)
          
           (<zip_1030@8:1> = <zip_1030@8:0>) |- P[<zip_1030@8:1>](<zip_1030@8:0>:int,
                                                                  <zip_1030@8:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3805)[4] (0.001000 sec.)
      solution:
        P[<fail_1280@14:0>]($11:bool) = false
        P[<zip_1030@8:1>]($14:int,$16:int) = ($16 = $14)
    end YhornInterface.solve(3707)[3] (0.018997 sec.)
    
  end RefTypeInfer.infer_etrs(157)[2] (0.048992 sec.)
  refinement types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:{v2:int | (v1 = v2)} -> (v3:int -> X) -> X
    br_zip_1277: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    fail_1280: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_zip_1275: var25:bool -> var24:int -> var23:int -> (var22:int -> X) -> X
    f_1274: var28:int -> var27:unit -> X
    f_main_1271: var33:int -> (var32:unit -> X) -> var30:int -> X
    f_main_1272: var39:int -> var38:int -> (var37:unit -> X) -> var35:int -> X
    f_map_1270: var44:int -> (var43:int -> X) -> var41:int -> X
    f_zip_1267: var48:int -> var47:int -> var46:unit -> X
    f_zip_1268: var52:int -> var51:int -> var50:unit -> X
    f_zip_1269: var58:int -> var57:int -> (var56:int -> X) -> var54:int -> X
    fail_1279: var62:bool -> (var61:unit -> X) -> X
    fail_1281: var66:bool -> (var65:unit -> X) -> X
    map_1033: var70:int -> (var69:int -> X) -> X
  abstraction types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int[v2 -> (v1 = v2)] -> (v3:int -> X) -> X
    br_zip_1277: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    fail_1280: v1:bool -> (v2:unit -> X) -> X
    br_zip_1275: var25:bool -> var24:int -> var23:int -> (var22:int -> X) -> X
    f_1274: var28:int -> var27:unit -> X
    f_main_1271: var33:int -> (var32:unit -> X) -> var30:int -> X
    f_main_1272: var39:int -> var38:int -> (var37:unit -> X) -> var35:int -> X
    f_map_1270: var44:int -> (var43:int -> X) -> var41:int -> X
    f_zip_1267: var48:int -> var47:int -> var46:unit -> X
    f_zip_1268: var52:int -> var51:int -> var50:unit -> X
    f_zip_1269: var58:int -> var57:int -> (var56:int -> X) -> var54:int -> X
    fail_1279: var62:bool -> (var61:unit -> X) -> X
    fail_1281: var66:bool -> (var65:unit -> X) -> X
    map_1033: var70:int -> (var69:int -> X) -> X
  
end AbsTypeInfer.refine(156)[1] (0.051992 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1266
  main_1266 -> (rand_int f_1273)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when b_1276 -> (k_zip_1102 x_1031)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when (not b_1276) -> (fail_1279 true (f_zip_1267 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when b_1278 -> (fail_1280 true (f_zip_1268 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when (not b_1278) ->
      (zip_1030 (x_1031 - 1) (y_1032 - 1) (f_zip_1269 x_1031 y_1032 k_zip_1102))
  f_1273 x_1241 -> (main_1035 x_1241 (f_1274 x_1241))
  f_1274 x_1241 x_1238 -> end
  f_main_1271 n_1036 k_main_1199 x_1224 -> (map_1033 x_1224 (f_main_1272 n_1036 x_1224 k_main_1199))
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (x_1202 = n_1036) -> (k_main_1199 ())
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (not (x_1202 = n_1036)) -> (fail_1281 true k_main_1199)
  f_map_1270 x_1034 k_map_1167 x_1171 -> (k_map_1167 (1 + x_1171))
  f_zip_1267 x_1031 y_1032 x_1105 -> _|_
  f_zip_1268 x_1031 y_1032 x_1121 -> _|_
  f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 -> (k_zip_1102 (1 + x_1134))
  fail_1279 b k -> {fail} => (k ())
  fail_1280 b k -> {fail} => (k ())
  fail_1281 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1199 -> (zip_1030 n_1036 n_1036 (f_main_1271 n_1036 k_main_1199))
  map_1033 x_1034 k_map_1167 when (x_1034 = 0) -> (k_map_1167 x_1034)
  map_1033 x_1034 k_map_1167 when (not (x_1034 = 0)) -> (map_1033 (x_1034 - 1) (f_map_1270 x_1034 k_map_1167))
  zip_1030 x_1031 y_1032 k_zip_1102 when (x_1031 = 0) -> (br_zip_1275 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
  zip_1030 x_1031 y_1032 k_zip_1102 when (not (x_1031 = 0)) -> (br_zip_1277 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
Types:
  main_1266 : X
  fail_1279 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1280 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1281 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1033 : (int -> (int -> X) -> X)
  zip_1030 : (x_1:int -> x_2:int[x_1 = x_2] -> (int -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1266 ... --> 
  f_1273 ... --> 
  main_1035 ... --> 
  zip_1030 [1/2] ... --> 
  br_zip_1275 [1/2] ... --> 
  f_main_1271 ... --> 
  map_1033 [1/2] ... --> 
  f_main_1272 [2/2] ... --> 
  fail_1281 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(4237)[1]
  program:
    main_1266  | true = ((Random.int 0) f_1273)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | b_1276 = (k_zip_1102 x_1031)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | (not b_1276) = (fail_1279 true
                                                                    (f_zip_1267 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | b_1278 = (fail_1280 true
                                                                    (f_zip_1268 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | (not b_1278) = (zip_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    (
                                                                    y_1032 - 1)
                                                                    (
                                                                    f_zip_1269 x_1031
                                                                    y_1032
                                                                    k_zip_1102))
    f_1273 x_1241 | true = (main_1035 x_1241
                                      (f_1274 x_1241))
    f_1274 x_1241 x_1238 | true = end
    f_main_1271 n_1036 k_main_1199 x_1224 | true = (map_1033 x_1224
                                                             (f_main_1272 n_1036
                                                                    x_1224
                                                                    k_main_1199))
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (x_1202 = n_1036) = (
    k_main_1199 ())
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (not (x_1202 = n_1036)) = (
    fail_1281 true
              k_main_1199)
    f_map_1270 x_1034 k_map_1167 x_1171 | true = (k_map_1167 (1 + x_1171))
    f_zip_1267 x_1031 y_1032 x_1105 | true = bot
    f_zip_1268 x_1031 y_1032 x_1121 | true = bot
    f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 | true = (k_zip_1102 (
                                                                    1 + x_1134))
    fail_1279 b k | true = (fail ())
    fail_1280 b k | true = (fail ())
    fail_1281 b k | true = (fail ())
    main_1035 n_1036 k_main_1199 | true = (zip_1030 n_1036
                                                    n_1036
                                                    (f_main_1271 n_1036
                                                                 k_main_1199))
    map_1033 x_1034 k_map_1167 | (x_1034 = 0) = (k_map_1167 x_1034)
    map_1033 x_1034 k_map_1167 | (not (x_1034 = 0)) = (map_1033 (x_1034 - 1)
                                                                (f_map_1270 x_1034
                                                                    k_map_1167))
    zip_1030 x_1031 y_1032 k_zip_1102 | (x_1031 = 0) = (br_zip_1275 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    zip_1030 x_1031 y_1032 k_zip_1102 | (not (x_1031 = 0)) = (br_zip_1277 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    main_1266:X
    br_zip_1275:bool -> int -> int -> (int -> X) -> X
    br_zip_1277:bool -> int -> int -> (int -> X) -> X
    f_1273:int -> X
    f_1274:int -> unit -> X
    f_main_1271:int -> (unit -> X) -> int -> X
    f_main_1272:int -> int -> (unit -> X) -> int -> X
    f_map_1270:int -> (int -> X) -> int -> X
    f_zip_1267:int -> int -> unit -> X
    f_zip_1268:int -> int -> unit -> X
    f_zip_1269:int -> int -> (int -> X) -> int -> X
    fail_1279:bool -> (unit -> X) -> X
    fail_1280:bool -> (unit -> X) -> X
    fail_1281:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    map_1033:int -> (int -> X) -> X
    zip_1030:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1275,br_zip_1277,f_1273,f_1274,f_main_1271,f_main_1272,f_map_1270,f_zip_1267,f_zip_1268,f_zip_1269,main_1035
  counterexample: 0:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1273@20:0> = var71)
     [true.(<main_1035@22:0> = <f_1273@20:0>)
      [true.((<zip_1030@24:0> = <main_1035@22:0>) && (<zip_1030@24:1> = <main_1035@22:0>))
       [(<zip_1030@24:0> = 0).
        ((<br_zip_1275@27:0> = (<zip_1030@24:1> = 0)) &&
         ((<br_zip_1275@27:1> = <zip_1030@24:0>) && (<br_zip_1275@27:2> = <zip_1030@24:1>)))
        [<br_zip_1275@27:0>.(<<br_zip_1275@27:3>@30:0> = <br_zip_1275@27:1>)
         [true.(<<zip_1030@24:2>@32:0> = <<br_zip_1275@27:3>@30:0>)
          [true.((<f_main_1271@34:0> = <main_1035@22:0>) && (<f_main_1271@34:2> = <<zip_1030@24:2>@32:0>))
           [true.(<map_1033@36:0> = <f_main_1271@34:2>)
            [(<map_1033@36:0> = 0).(<<map_1033@36:1>@39:0> = <map_1033@36:0>)
             [true.
              ((<f_main_1272@41:0> = <f_main_1271@34:0>) &&
               ((<f_main_1272@41:1> = <f_main_1271@34:2>) && (<f_main_1272@41:3> = <<map_1033@36:1>@39:0>)))
              [(not (<f_main_1272@41:3> = <f_main_1272@41:0>)).(<fail_1281@44:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(4238)[2]
    horn clauses:
      P[<fail_1281@44:0>](<fail_1281@44:0>:bool)|- bot
      
      P[<f_main_1272@41:3>](<f_main_1272@41:0>:int,<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
      ((<f_main_1272@41:3> <> <f_main_1272@41:0>) && <fail_1281@44:0>) |- P[<fail_1281@44:0>](
      <fail_1281@44:0>:bool)
      
      P[<f_main_1271@34:2>](<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
      P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int)|- P[<f_main_1272@41:3>](
      <f_main_1272@41:0>:int,<f_main_1272@41:1>:int,<f_main_1272@41:3>:int)
      
      P[<map_1033@36:0>](<map_1033@36:0>:int), ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
      |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
      
      P[<f_main_1271@34:2>](<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](<map_1033@36:0>:int)
      
      P[<main_1035@22:0>](<f_main_1271@34:0>:int),
      P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<f_main_1271@34:2>:int)|- P[<f_main_1271@34:2>](
      <f_main_1271@34:0>:int,<f_main_1271@34:2>:int)
      
      P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
      P[<<br_zip_1275@27:3>@30:0>]((<zip_1030@24:1> = 0):bool,<zip_1030@24:0>:int,<zip_1030@24:1>:int,<<zip_1030@24:2>@32:0>:int),
      (<zip_1030@24:0> = 0)
      |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                   <<zip_1030@24:2>@32:0>:int)
      
      P[<br_zip_1275@27:2>](<br_zip_1275@27:0>:bool,<br_zip_1275@27:1>:int,<br_zip_1275@27:2>:int),
      ((<<br_zip_1275@27:3>@30:0> = <br_zip_1275@27:1>) && <br_zip_1275@27:0>)
      |- P[<<br_zip_1275@27:3>@30:0>](<br_zip_1275@27:0>:bool,<br_zip_1275@27:1>:int,
                                      <br_zip_1275@27:2>:int,<<br_zip_1275@27:3>@30:0>:int)
      
      P[<zip_1030@24:1>](<br_zip_1275@27:1>:int,<br_zip_1275@27:2>:int),
      ((<br_zip_1275@27:1> = 0) && (<br_zip_1275@27:0> = (<br_zip_1275@27:2> = 0)))
      |- P[<br_zip_1275@27:2>](<br_zip_1275@27:0>:bool,<br_zip_1275@27:1>:int,
                               <br_zip_1275@27:2>:int)
      
      P[<main_1035@22:0>](<zip_1030@24:1>:int), (<zip_1030@24:1> = <zip_1030@24:0>)
      |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int)
      
      P[<f_1273@20:0>](<main_1035@22:0>:int)|- P[<main_1035@22:0>](<main_1035@22:0>:int)
      
      |- P[<f_1273@20:0>](<f_1273@20:0>:int)
    call trees:
      <main_1266@17>
        <f_1273@20>
          <main_1035@22>
            <zip_1030@24>
              <br_zip_1275@27>
              </<br_zip_1275@27:3>@30>
            </<zip_1030@24:2>@32>
            <f_main_1271@34>
              <map_1033@36>
              </<map_1033@36:1>@39>
              <f_main_1272@41>
                <fail_1281@44>
    inlined horn clauses:
      P[<fail_1281@44:0>](<fail_1281@44:0>:bool)|- bot
      
      P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
      P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
      ((<f_main_1272@41:3> <> <f_main_1272@41:0>) && <fail_1281@44:0>) |- P[<fail_1281@44:0>](
      <fail_1281@44:0>:bool)
      
      P[<map_1033@36:0>](<map_1033@36:0>:int), ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
      |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
      
      P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
      <map_1033@36:0>:int)
      
      P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
      ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
      |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                   <<zip_1030@24:2>@32:0>:int)
      
       (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                 <zip_1030@24:1>:int)
    begin ParamSubstInfer.infer(5991)[3]
      
    end ParamSubstInfer.infer(5991)[3] (0.018997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(5993)[3]
      
    end RefTypeInfer.elim_coeffs(5993)[3] (0.002000 sec.)
    begin GenHcSolver.solve(6274)[3]
      Horn clauses:
        P[<fail_1281@44:0>](<fail_1281@44:0>:bool)|- bot
        
        P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
        P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
        ((<f_main_1272@41:3> <> <f_main_1272@41:0>) && <fail_1281@44:0>) |- P[<fail_1281@44:0>](
        <fail_1281@44:0>:bool)
        
        P[<map_1033@36:0>](<map_1033@36:0>:int), ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
        |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
        
        P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
        <map_1033@36:0>:int)
        
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
        |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                     <<zip_1030@24:2>@32:0>:int)
        
         (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                   <zip_1030@24:1>:int)
      lower bounds:
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int) = (<zip_1030@24:1> = <zip_1030@24:0>)
        P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,<<zip_1030@24:2>@32:0>:int) =
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
        P[<map_1033@36:0>](<map_1033@36:0>:int) = (<map_1033@36:0> = 0)
        P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int) =
        ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
        P[<fail_1281@44:0>](<fail_1281@44:0>:bool) = false
      upper bounds:
        P[<fail_1281@44:0>](var73:bool) = true
      begin GenHcSolver.classify_pids(7828)[4]
        output:
          [<fail_1281@44:0>]
      end GenHcSolver.classify_pids(7828)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(7831)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(7832)[5]
          begin InterpProver.interpolate_fresh(7833)[6]
            begin InterpProver.interpolate_log(7834)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(7835)[8]
                begin InterpProver.interpolate_simplify(7836)[9]
                  begin InterpProver.interpolate_quick(7849)[10]
                    
                  end InterpProver.interpolate_quick(7849)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(7853)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(7853)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(7836)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(7835)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(7834)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(7833)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(7832)[5] (0.000000 sec.)
        output:
          P[<fail_1281@44:0>](<fail_1281@44:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(7831)[4] (0.001000 sec.)
      Horn clauses:
        P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
        P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
        (<f_main_1272@41:3> <> <f_main_1272@41:0>) |- bot
        
        P[<map_1033@36:0>](<map_1033@36:0>:int), ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
        |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
        
        P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
        <map_1033@36:0>:int)
        
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
        |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                     <<zip_1030@24:2>@32:0>:int)
        
         (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                   <zip_1030@24:1>:int)
      lower bounds:
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int) = (<zip_1030@24:1> = <zip_1030@24:0>)
        P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,<<zip_1030@24:2>@32:0>:int) =
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
        P[<map_1033@36:0>](<map_1033@36:0>:int) = (<map_1033@36:0> = 0)
        P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int) =
        ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
      upper bounds:
        P[<<map_1033@36:1>@39:0>](var74:int,var75:int) = ((var74 <> 0) || (var75 = 0))
      begin GenHcSolver.classify_pids(9746)[4]
        output:
          [<<map_1033@36:1>@39:0>]
      end GenHcSolver.classify_pids(9746)[4] (0.000000 sec.)
      lb:((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
      nub:(not ((<map_1033@36:0> <> 0) || (<<map_1033@36:1>@39:0> = 0)))
      begin ApronInterface.convex_hull_interpolate(9749)[4]
        lb:((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
        nub:(not ((<map_1033@36:0> <> 0) || (<<map_1033@36:1>@39:0> = 0)))
        lb':((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
        nub':(not ((<map_1033@36:0> <> 0) || (<<map_1033@36:1>@39:0> = 0)))
        begin InterpProver.interpolate(9750)[5]
          begin InterpProver.interpolate_fresh(9751)[6]
            begin InterpProver.interpolate_log(9752)[7]
              input1: ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
              input2: (not ((<map_1033@36:0> <> 0) || (<<map_1033@36:1>@39:0> = 0)))
              begin InterpProver.interpolate_check(9753)[8]
                begin InterpProver.interpolate_simplify(9754)[9]
                  begin InterpProver.interpolate_quick(9799)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(9808)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(9809)[12]
                        begin CsisatInterface.interpolate_csisat_log(9810)[13]
                          input1: (0 = v_sep_map_1033_sep_36_sep_0 & v_sep_map_1033_sep_36_sep_0 = v_sep_map_1033_sep_36_sep_1_sep_39_sep_0)
                          input2: (not 0 = v_sep_map_1033_sep_36_sep_1_sep_39_sep_0 & 0 = v_sep_map_1033_sep_36_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(9811)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(9811)[14] (0.000000 sec.)
                          output: 0 = v_sep_map_1033_sep_36_sep_1_sep_39_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(9810)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_map_1033_sep_36_sep_1_sep_39_sep_0
                        after dnf conversion: ((0 = v_sep_map_1033_sep_36_sep_1_sep_39_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(9809)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(9808)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(9799)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(9754)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(9753)[8] (0.001000 sec.)
              output: (0 = <<map_1033@36:1>@39:0>)
            end InterpProver.interpolate_log(9752)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(9751)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(9750)[5] (0.001000 sec.)
        output:
          P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int) = (0 = <<map_1033@36:1>@39:0>)
      end ApronInterface.convex_hull_interpolate(9749)[4] (0.001000 sec.)
      Horn clauses:
        P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
        (0 <> <f_main_1272@41:0>) |- bot
        
        P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
        <map_1033@36:0>:int)
        
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
        |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                     <<zip_1030@24:2>@32:0>:int)
        
         (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                   <zip_1030@24:1>:int)
      lower bounds:
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int) = (<zip_1030@24:1> = <zip_1030@24:0>)
        P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,<<zip_1030@24:2>@32:0>:int) =
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
        P[<map_1033@36:0>](<map_1033@36:0>:int) = (<map_1033@36:0> = 0)
      upper bounds:
        P[<map_1033@36:0>](var76:int) = true
      begin GenHcSolver.classify_pids(11159)[4]
        output:
          [<map_1033@36:0>]
      end GenHcSolver.classify_pids(11159)[4] (0.000000 sec.)
      lb:(<map_1033@36:0> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(11162)[4]
        lb:(<map_1033@36:0> = 0)
        nub:false
        lb':(<map_1033@36:0> = 0)
        nub':false
        begin InterpProver.interpolate(11163)[5]
          begin InterpProver.interpolate_fresh(11164)[6]
            begin InterpProver.interpolate_log(11165)[7]
              input1: (<map_1033@36:0> = 0)
              input2: false
              begin InterpProver.interpolate_check(11166)[8]
                begin InterpProver.interpolate_simplify(11167)[9]
                  begin InterpProver.interpolate_quick(11186)[10]
                    
                  end InterpProver.interpolate_quick(11186)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(11167)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(11166)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(11165)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(11164)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(11163)[5] (0.000000 sec.)
        output:
          P[<map_1033@36:0>](<map_1033@36:0>:int) = true
      end ApronInterface.convex_hull_interpolate(11162)[4] (0.000000 sec.)
      Horn clauses:
        P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
        (0 <> <f_main_1272@41:0>) |- bot
        
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
        |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                     <<zip_1030@24:2>@32:0>:int)
        
         (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                   <zip_1030@24:1>:int)
      lower bounds:
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int) = (<zip_1030@24:1> = <zip_1030@24:0>)
        P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,<<zip_1030@24:2>@32:0>:int) =
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
      upper bounds:
        P[<<zip_1030@24:2>@32:0>](var77:int,var78:int,var79:int) = ((0 = var77) || (var77 <> var78))
      begin GenHcSolver.classify_pids(12477)[4]
        output:
          [<<zip_1030@24:2>@32:0>]
      end GenHcSolver.classify_pids(12477)[4] (0.000000 sec.)
      lb:((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
      nub:(not ((0 = <zip_1030@24:0>) || (<zip_1030@24:0> <> <zip_1030@24:1>)))
      begin ApronInterface.convex_hull_interpolate(12480)[4]
        lb:((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
        nub:(not ((0 = <zip_1030@24:0>) || (<zip_1030@24:0> <> <zip_1030@24:1>)))
        lb':((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
        nub':(not ((0 = <zip_1030@24:0>) || (<zip_1030@24:0> <> <zip_1030@24:1>)))
        begin InterpProver.interpolate(12481)[5]
          begin InterpProver.interpolate_fresh(12482)[6]
            begin InterpProver.interpolate_log(12483)[7]
              input1: ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
              input2: (not ((0 = <zip_1030@24:0>) || (<zip_1030@24:0> <> <zip_1030@24:1>)))
              begin InterpProver.interpolate_check(12484)[8]
                begin InterpProver.interpolate_simplify(12485)[9]
                  begin InterpProver.interpolate_quick(12544)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(12553)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(12554)[12]
                        begin CsisatInterface.interpolate_csisat_log(12555)[13]
                          input1: (0 = v_sep_zip_1030_sep_24_sep_0 & 0 = v_sep_zip_1030_sep_24_sep_1)
                          input2: (not 0 = v_sep_zip_1030_sep_24_sep_0 & v_sep_zip_1030_sep_24_sep_0 = v_sep_zip_1030_sep_24_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(12556)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(12556)[14] (0.000000 sec.)
                          output: 0 = v_sep_zip_1030_sep_24_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(12555)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_zip_1030_sep_24_sep_0
                        after dnf conversion: ((0 = v_sep_zip_1030_sep_24_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(12554)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(12553)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(12544)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(12485)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(12484)[8] (0.000000 sec.)
              output: (0 = <zip_1030@24:0>)
            end InterpProver.interpolate_log(12483)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(12482)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(12481)[5] (0.000000 sec.)
        output:
          P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,<<zip_1030@24:2>@32:0>:int) =
          (0 = <zip_1030@24:0>)
      end ApronInterface.convex_hull_interpolate(12480)[4] (0.000000 sec.)
      Horn clauses:
         (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                   <zip_1030@24:1>:int)
      lower bounds:
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int) = (<zip_1030@24:1> = <zip_1030@24:0>)
      upper bounds:
        P[<zip_1030@24:1>](var80:int,var81:int) = true
      begin GenHcSolver.classify_pids(12962)[4]
        output:
          [<zip_1030@24:1>]
      end GenHcSolver.classify_pids(12962)[4] (0.000000 sec.)
      lb:(<zip_1030@24:1> = <zip_1030@24:0>)
      nub:false
      begin ApronInterface.convex_hull_interpolate(12965)[4]
        lb:(<zip_1030@24:1> = <zip_1030@24:0>)
        nub:false
        lb':(<zip_1030@24:1> = <zip_1030@24:0>)
        nub':false
        begin InterpProver.interpolate(12966)[5]
          begin InterpProver.interpolate_fresh(12967)[6]
            begin InterpProver.interpolate_log(12968)[7]
              input1: (<zip_1030@24:1> = <zip_1030@24:0>)
              input2: false
              begin InterpProver.interpolate_check(12969)[8]
                begin InterpProver.interpolate_simplify(12970)[9]
                  begin InterpProver.interpolate_quick(12985)[10]
                    
                  end InterpProver.interpolate_quick(12985)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(12970)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(12969)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(12968)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(12967)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(12966)[5] (0.000000 sec.)
        output:
          P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int) = true
      end ApronInterface.convex_hull_interpolate(12965)[4] (0.000000 sec.)
      begin HcSolver.check_validity(13050)[4]
        input:
          P[<fail_1281@44:0>](<fail_1281@44:0>:bool)|- bot
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
          P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
          ((<f_main_1272@41:3> <> <f_main_1272@41:0>) && <fail_1281@44:0>)
          |- P[<fail_1281@44:0>](<fail_1281@44:0>:bool)
          
          P[<map_1033@36:0>](<map_1033@36:0>:int),
          ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
          |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
          <map_1033@36:0>:int)
          
          P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
          ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
          |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                       <<zip_1030@24:2>@32:0>:int)
          
           (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                    <zip_1030@24:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(13050)[4] (0.002000 sec.)
      solution:
        P[<fail_1281@44:0>](<fail_1281@44:0>:bool) = false
        P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int) = (0 = <<map_1033@36:1>@39:0>)
        P[<map_1033@36:0>](<map_1033@36:0>:int) = true
        P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,<<zip_1030@24:2>@32:0>:int) =
        (0 = <zip_1030@24:0>)
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int) = true
    end GenHcSolver.solve(6274)[3] (0.045993 sec.)
    begin GenHcSolver.solve(13449)[3]
      Horn clauses:
        P[<fail_1281@44:0>](<fail_1281@44:0>:bool)|- bot
        
        P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
        P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
        ((<f_main_1272@41:3> <> <f_main_1272@41:0>) && <fail_1281@44:0>) |- P[<fail_1281@44:0>](
        <fail_1281@44:0>:bool)
        
        P[<map_1033@36:0>](<map_1033@36:0>:int), ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
        |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
        
        P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
        <map_1033@36:0>:int)
        
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
        |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                     <<zip_1030@24:2>@32:0>:int)
        
         (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                   <zip_1030@24:1>:int)
      lower bounds:
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int) = (<zip_1030@24:1> = <zip_1030@24:0>)
        P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,<<zip_1030@24:2>@32:0>:int) =
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
        P[<map_1033@36:0>](<map_1033@36:0>:int) = (<map_1033@36:0> = 0)
        P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int) =
        ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
        P[<fail_1281@44:0>](<fail_1281@44:0>:bool) = false
      upper bounds:
        P[<fail_1281@44:0>](var83:bool) = true
      begin GenHcSolver.classify_pids(15003)[4]
        output:
          [<fail_1281@44:0>]
      end GenHcSolver.classify_pids(15003)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(15006)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(15009)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(15009)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(15014)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(15014)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(15017)[5]
          begin InterpProver.interpolate_fresh(15018)[6]
            begin InterpProver.interpolate_log(15019)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(15020)[8]
                begin InterpProver.interpolate_simplify(15021)[9]
                  begin InterpProver.interpolate_quick(15036)[10]
                    
                  end InterpProver.interpolate_quick(15036)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(15040)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(15040)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(15021)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(15020)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(15019)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(15018)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(15017)[5] (0.000000 sec.)
        output:
          P[<fail_1281@44:0>](<fail_1281@44:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(15006)[4] (0.001000 sec.)
      Horn clauses:
        P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
        P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
        (<f_main_1272@41:3> <> <f_main_1272@41:0>) |- bot
        
        P[<map_1033@36:0>](<map_1033@36:0>:int), ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
        |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
        
        P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
        <map_1033@36:0>:int)
        
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
        |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                     <<zip_1030@24:2>@32:0>:int)
        
         (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                   <zip_1030@24:1>:int)
      lower bounds:
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int) = (<zip_1030@24:1> = <zip_1030@24:0>)
        P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,<<zip_1030@24:2>@32:0>:int) =
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
        P[<map_1033@36:0>](<map_1033@36:0>:int) = (<map_1033@36:0> = 0)
        P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int) =
        ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
      upper bounds:
        P[<<map_1033@36:1>@39:0>](var84:int,var85:int) = ((var84 <> 0) || (var85 = 0))
      begin GenHcSolver.classify_pids(16940)[4]
        output:
          [<<map_1033@36:1>@39:0>]
      end GenHcSolver.classify_pids(16940)[4] (0.000000 sec.)
      lb:((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
      nub:(not ((<map_1033@36:0> <> 0) || (<<map_1033@36:1>@39:0> = 0)))
      begin ApronInterface.convex_hull_interpolate(16943)[4]
        lb:((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
        nub:(not ((<map_1033@36:0> <> 0) || (<<map_1033@36:1>@39:0> = 0)))
        begin ExtFormula.Formula.case_analysis_boolean(16955)[5]
          ts: ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(16955)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(16970)[5]
          ts: ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> <> 0))
          
        end ExtFormula.Formula.case_analysis_boolean(16970)[5] (0.000000 sec.)
        lb':((<<map_1033@36:1>@39:0> = 0) && (<map_1033@36:0> = 0))
        nub':(<map_1033@36:0> = 0)
        begin InterpProver.interpolate(16975)[5]
          begin InterpProver.interpolate_fresh(16976)[6]
            begin InterpProver.interpolate_log(16977)[7]
              input1: ((<<map_1033@36:1>@39:0> = 0) && (<map_1033@36:0> = 0))
              input2: (<map_1033@36:0> = 0)
              begin InterpProver.interpolate_check(16978)[8]
                begin InterpProver.interpolate_simplify(16979)[9]
                  begin InterpProver.interpolate_quick(17009)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(17018)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(17019)[12]
                        begin CsisatInterface.interpolate_csisat_log(17020)[13]
                          input1: 0 = v_sep_map_1033_sep_36_sep_0
                          input2: 0 = v_sep_map_1033_sep_36_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(17021)[14]
                            csisat error: NelsonOppen: not a conjunction
                            
                          end CsisatInterface.interpolate_csisat_raw(17021)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(17020)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(17019)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(17018)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(17009)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(16979)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(16978)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(16977)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(16976)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(16975)[5] (0.001000 sec.)
        begin InterpProver.interpolate(17030)[5]
          begin InterpProver.interpolate_fresh(17031)[6]
            begin InterpProver.interpolate_log(17032)[7]
              input1: ((<<map_1033@36:1>@39:0> = 0) && (<map_1033@36:0> = 0))
              input2: (not ((<map_1033@36:0> <> 0) || (<<map_1033@36:1>@39:0> = 0)))
              begin InterpProver.interpolate_check(17033)[8]
                begin InterpProver.interpolate_simplify(17034)[9]
                  begin InterpProver.interpolate_quick(17071)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(17080)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(17081)[12]
                        begin CsisatInterface.interpolate_csisat_log(17082)[13]
                          input1: (0 = v_sep_map_1033_sep_36_sep_0 & 0 = v_sep_map_1033_sep_36_sep_1_sep_39_sep_0)
                          input2: (not 0 = v_sep_map_1033_sep_36_sep_1_sep_39_sep_0 & 0 = v_sep_map_1033_sep_36_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(17083)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(17083)[14] (0.000000 sec.)
                          output: 0 = v_sep_map_1033_sep_36_sep_1_sep_39_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(17082)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_map_1033_sep_36_sep_1_sep_39_sep_0
                        after dnf conversion: ((0 = v_sep_map_1033_sep_36_sep_1_sep_39_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(17081)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(17080)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(17071)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(17034)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(17033)[8] (0.000000 sec.)
              output: (0 = <<map_1033@36:1>@39:0>)
            end InterpProver.interpolate_log(17032)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(17031)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(17030)[5] (0.000000 sec.)
        output:
          P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int) = (0 = <<map_1033@36:1>@39:0>)
      end ApronInterface.convex_hull_interpolate(16943)[4] (0.002000 sec.)
      Horn clauses:
        P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
        (0 <> <f_main_1272@41:0>) |- bot
        
        P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
        <map_1033@36:0>:int)
        
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
        |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                     <<zip_1030@24:2>@32:0>:int)
        
         (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                   <zip_1030@24:1>:int)
      lower bounds:
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int) = (<zip_1030@24:1> = <zip_1030@24:0>)
        P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,<<zip_1030@24:2>@32:0>:int) =
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
        P[<map_1033@36:0>](<map_1033@36:0>:int) = (<map_1033@36:0> = 0)
      upper bounds:
        P[<map_1033@36:0>](var86:int) = true
      begin GenHcSolver.classify_pids(18431)[4]
        output:
          [<map_1033@36:0>]
      end GenHcSolver.classify_pids(18431)[4] (0.000000 sec.)
      lb:(<map_1033@36:0> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(18434)[4]
        lb:(<map_1033@36:0> = 0)
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(18438)[5]
          ts: (<map_1033@36:0> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(18438)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(18444)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(18444)[5] (0.000999 sec.)
        lb':(<map_1033@36:0> = 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(18447)[5]
          begin InterpProver.interpolate_fresh(18448)[6]
            begin InterpProver.interpolate_log(18449)[7]
              input1: (<map_1033@36:0> = 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(18450)[8]
                begin InterpProver.interpolate_simplify(18451)[9]
                  begin InterpProver.interpolate_quick(18471)[10]
                    
                  end InterpProver.interpolate_quick(18471)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(18451)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(18450)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(18449)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(18448)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(18447)[5] (0.000000 sec.)
        output:
          P[<map_1033@36:0>](<map_1033@36:0>:int) = true
      end ApronInterface.convex_hull_interpolate(18434)[4] (0.000999 sec.)
      Horn clauses:
        P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
        (0 <> <f_main_1272@41:0>) |- bot
        
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
        |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                     <<zip_1030@24:2>@32:0>:int)
        
         (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                   <zip_1030@24:1>:int)
      lower bounds:
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int) = (<zip_1030@24:1> = <zip_1030@24:0>)
        P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,<<zip_1030@24:2>@32:0>:int) =
        ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
      upper bounds:
        P[<<zip_1030@24:2>@32:0>](var87:int,var88:int,var89:int) = ((0 = var87) || (var87 <> var88))
      begin GenHcSolver.classify_pids(19764)[4]
        output:
          [<<zip_1030@24:2>@32:0>]
      end GenHcSolver.classify_pids(19764)[4] (0.000000 sec.)
      lb:((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
      nub:(not ((0 = <zip_1030@24:0>) || (<zip_1030@24:0> <> <zip_1030@24:1>)))
      begin ApronInterface.convex_hull_interpolate(19767)[4]
        lb:((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
        nub:(not ((0 = <zip_1030@24:0>) || (<zip_1030@24:0> <> <zip_1030@24:1>)))
        begin ExtFormula.Formula.case_analysis_boolean(19787)[5]
          ts: ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:1> = <<zip_1030@24:2>@32:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(19787)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(19808)[5]
          ts: ((0 <> <zip_1030@24:0>) && (<zip_1030@24:0> = <zip_1030@24:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(19808)[5] (0.000000 sec.)
        lb':((<<zip_1030@24:2>@32:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:0> = 0)))
        nub':((<zip_1030@24:1> + (-1 * <zip_1030@24:0>)) = 0)
        begin InterpProver.interpolate(19814)[5]
          begin InterpProver.interpolate_fresh(19815)[6]
            begin InterpProver.interpolate_log(19816)[7]
              input1: ((<<zip_1030@24:2>@32:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:0> = 0)))
              input2: ((<zip_1030@24:1> + (-1 * <zip_1030@24:0>)) = 0)
              begin InterpProver.interpolate_check(19817)[8]
                begin InterpProver.interpolate_simplify(19818)[9]
                  begin InterpProver.interpolate_quick(19864)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(19873)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(19874)[12]
                        begin CsisatInterface.interpolate_csisat_log(19875)[13]
                          input1: (0 = v_sep_zip_1030_sep_24_sep_0 & 0 = v_sep_zip_1030_sep_24_sep_1)
                          input2: v_sep_zip_1030_sep_24_sep_0 = v_sep_zip_1030_sep_24_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(19876)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(19876)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(19875)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(19874)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(19873)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(19864)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(19818)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(19817)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(19816)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(19815)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(19814)[5] (0.001000 sec.)
        begin InterpProver.interpolate(19886)[5]
          begin InterpProver.interpolate_fresh(19887)[6]
            begin InterpProver.interpolate_log(19888)[7]
              input1: ((<<zip_1030@24:2>@32:0> = 0) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:0> = 0)))
              input2: (not ((0 = <zip_1030@24:0>) || (<zip_1030@24:0> <> <zip_1030@24:1>)))
              begin InterpProver.interpolate_check(19889)[8]
                begin InterpProver.interpolate_simplify(19890)[9]
                  begin InterpProver.interpolate_quick(19956)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(19965)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(19966)[12]
                        begin CsisatInterface.interpolate_csisat_log(19967)[13]
                          input1: (0 = v_sep_zip_1030_sep_24_sep_0 & 0 = v_sep_zip_1030_sep_24_sep_1)
                          input2: (not 0 = v_sep_zip_1030_sep_24_sep_0 & v_sep_zip_1030_sep_24_sep_0 = v_sep_zip_1030_sep_24_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(19968)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(19968)[14] (0.000000 sec.)
                          output: 0 = v_sep_zip_1030_sep_24_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(19967)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_zip_1030_sep_24_sep_0
                        after dnf conversion: ((0 = v_sep_zip_1030_sep_24_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(19966)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(19965)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(19956)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(19890)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(19889)[8] (0.002000 sec.)
              output: (0 = <zip_1030@24:0>)
            end InterpProver.interpolate_log(19888)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(19887)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(19886)[5] (0.002000 sec.)
        output:
          P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,<<zip_1030@24:2>@32:0>:int) =
          (0 = <zip_1030@24:0>)
      end ApronInterface.convex_hull_interpolate(19767)[4] (0.003000 sec.)
      Horn clauses:
         (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                   <zip_1030@24:1>:int)
      lower bounds:
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int) = (<zip_1030@24:1> = <zip_1030@24:0>)
      upper bounds:
        P[<zip_1030@24:1>](var90:int,var91:int) = true
      begin GenHcSolver.classify_pids(20374)[4]
        output:
          [<zip_1030@24:1>]
      end GenHcSolver.classify_pids(20374)[4] (0.000000 sec.)
      lb:(<zip_1030@24:1> = <zip_1030@24:0>)
      nub:false
      begin ApronInterface.convex_hull_interpolate(20377)[4]
        lb:(<zip_1030@24:1> = <zip_1030@24:0>)
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(20382)[5]
          ts: (<zip_1030@24:1> = <zip_1030@24:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(20382)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(20389)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(20389)[5] (0.000000 sec.)
        lb':((<zip_1030@24:1> + (-1 * <zip_1030@24:0>)) = 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(20392)[5]
          begin InterpProver.interpolate_fresh(20393)[6]
            begin InterpProver.interpolate_log(20394)[7]
              input1: ((<zip_1030@24:1> + (-1 * <zip_1030@24:0>)) = 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(20395)[8]
                begin InterpProver.interpolate_simplify(20396)[9]
                  begin InterpProver.interpolate_quick(20412)[10]
                    
                  end InterpProver.interpolate_quick(20412)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(20396)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(20395)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(20394)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(20393)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(20392)[5] (0.000000 sec.)
        output:
          P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int) = true
      end ApronInterface.convex_hull_interpolate(20377)[4] (0.000000 sec.)
      begin HcSolver.check_validity(20479)[4]
        input:
          P[<fail_1281@44:0>](<fail_1281@44:0>:bool)|- bot
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
          P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
          ((<f_main_1272@41:3> <> <f_main_1272@41:0>) && <fail_1281@44:0>)
          |- P[<fail_1281@44:0>](<fail_1281@44:0>:bool)
          
          P[<map_1033@36:0>](<map_1033@36:0>:int),
          ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
          |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
          <map_1033@36:0>:int)
          
          P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
          ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
          |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                       <<zip_1030@24:2>@32:0>:int)
          
           (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                    <zip_1030@24:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(20479)[4] (0.002000 sec.)
      solution:
        P[<fail_1281@44:0>](<fail_1281@44:0>:bool) = false
        P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int) = (0 = <<map_1033@36:1>@39:0>)
        P[<map_1033@36:0>](<map_1033@36:0>:int) = true
        P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,<<zip_1030@24:2>@32:0>:int) =
        (0 = <zip_1030@24:0>)
        P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int) = true
    end GenHcSolver.solve(13449)[3] (0.051992 sec.)
    begin YhornInterface.solve(20878)[3]
      begin HcSolver.solve_ub(20879)[4]
        encoded:
          P[<fail_1281@44:0>](<fail_1281@44:0>:int)|- bot
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
          P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
          ((<f_main_1272@41:3> <> <f_main_1272@41:0>) && (<fail_1281@44:0> = 1))
          |- P[<fail_1281@44:0>](<fail_1281@44:0>:int)
          
          P[<map_1033@36:0>](<map_1033@36:0>:int),
          ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
          |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
          <map_1033@36:0>:int)
          
          P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
          ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
          |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                       <<zip_1030@24:2>@32:0>:int)
          
           (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                    <zip_1030@24:1>:int)
        input to Yhorn:
          P[<fail_1281@44:0>](<fail_1281@44:0>:int)|- bot
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
          P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
          ((<f_main_1272@41:3> <> <f_main_1272@41:0>) && (<fail_1281@44:0> = 1))
          |- P[<fail_1281@44:0>](<fail_1281@44:0>:int)
          
          P[<map_1033@36:0>](<map_1033@36:0>:int),
          ((<<map_1033@36:1>@39:0> = <map_1033@36:0>) && (<map_1033@36:0> = 0))
          |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
          <map_1033@36:0>:int)
          
          P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
          ((<<zip_1030@24:2>@32:0> = <zip_1030@24:0>) && ((<zip_1030@24:1> = 0) && (<zip_1030@24:0> = 0)))
          |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                       <<zip_1030@24:2>@32:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1281_sep_44_sep_0($130)) -> 1=0.
(($130-1=0) & ($131-$132<>0)) & (v_sep_map_1033_sep_36_sep_1_sep_39_sep_0($133,$131)) & (v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0($132,$132,$133)) -> v_sep_fail_1281_sep_44_sep_0($130).
(($134=0) & (-$134+$135=0)) & (v_sep_map_1033_sep_36_sep_0($134)) -> v_sep_map_1033_sep_36_sep_1_sep_39_sep_0($134,$135).
(0=0) & (v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0($136,$136,$134)) -> v_sep_map_1033_sep_36_sep_0($134).
(($137=0) & ($138=0) & (-$137+$139=0)) & (v_sep_zip_1030_sep_24_sep_1($137,$138)) -> v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0($137,$138,$139).
-$137+$138=0 -> v_sep_zip_1030_sep_24_sep_1($137,$138).


v_sep_fail_1281_sep_44_sep_0: X
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: X
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: X
.........Split disj [20] 0.383941
Reconstrcut: 3 **)

v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: X
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: X
.......
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: X
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: X
.......Split conj [22] 0.38794
(Reconstrcut: 8 **)
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: X
.........
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: X
.......Split conj [24] 0.39294
(Reconstrcut: 14 ***)
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
.............
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
.......
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
...........
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
............
v_sep_fail_1281_sep_44_sep_0: (X) | (X)
v_sep_map_1033_sep_36_sep_0: X
v_sep_map_1033_sep_36_sep_1_sep_39_sep_0: (X) & (X)
v_sep_zip_1030_sep_24_sep_1: X
v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0: (X) & (X) & (X)
.............(0=0) & (v_sep_fail_1281_sep_44_sep_0($130)) -> 1=0.
(($130-1=0) & ($131-$132<>0)) & (v_sep_map_1033_sep_36_sep_1_sep_39_sep_0($133,$131)) & (v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0($132,$132,$133)) -> v_sep_fail_1281_sep_44_sep_0($130).
(($134=0) & (-$134+$135=0)) & (v_sep_map_1033_sep_36_sep_0($134)) -> v_sep_map_1033_sep_36_sep_1_sep_39_sep_0($134,$135).
(0=0) & (v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0($136,$136,$134)) -> v_sep_map_1033_sep_36_sep_0($134).
(($137=0) & ($138=0) & (-$137+$139=0)) & (v_sep_zip_1030_sep_24_sep_1($137,$138)) -> v_sep_zip_1030_sep_24_sep_2_sep_32_sep_0($137,$138,$139).
-$137+$138=0 -> v_sep_zip_1030_sep_24_sep_1($137,$138).

           (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                    <zip_1030@24:1>:int)
        solution:
          P[<fail_1281@44:0>]($140:bool) = false
          P[<map_1033@36:0>]($155:int) = true
          P[<<map_1033@36:1>@39:0>]($143:int,$145:int) = ($145 = 0)
          P[<zip_1030@24:1>]($158:int,$160:int) = true
          P[<<zip_1030@24:2>@32:0>]($148:int,$150:int,$152:int) = ((0 <= $150) && ($148 <= 0))
        
      end HcSolver.solve_ub(20879)[4] (0.045993 sec.)
      begin HcSolver.check_validity(21098)[4]
        input:
          P[<fail_1281@44:0>](<fail_1281@44:0>:bool)|- bot
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1272@41:0>:int,<f_main_1272@41:0>:int,<f_main_1272@41:1>:int),
          P[<<map_1033@36:1>@39:0>](<f_main_1272@41:1>:int,<f_main_1272@41:3>:int),
          ((<f_main_1272@41:3> <> <f_main_1272@41:0>) && <fail_1281@44:0>)
          |- P[<fail_1281@44:0>](<fail_1281@44:0>:bool)
          
          P[<map_1033@36:0>](<map_1033@36:0>:int),
          ((<map_1033@36:0> = 0) && (<<map_1033@36:1>@39:0> = <map_1033@36:0>))
          |- P[<<map_1033@36:1>@39:0>](<map_1033@36:0>:int,<<map_1033@36:1>@39:0>:int)
          
          P[<<zip_1030@24:2>@32:0>](<f_main_1271@34:0>:int,<f_main_1271@34:0>:int,<map_1033@36:0>:int)|- P[<map_1033@36:0>](
          <map_1033@36:0>:int)
          
          P[<zip_1030@24:1>](<zip_1030@24:0>:int,<zip_1030@24:1>:int),
          ((<zip_1030@24:0> = 0) && ((<zip_1030@24:1> = 0) && (<<zip_1030@24:2>@32:0> = <zip_1030@24:0>)))
          |- P[<<zip_1030@24:2>@32:0>](<zip_1030@24:0>:int,<zip_1030@24:1>:int,
                                       <<zip_1030@24:2>@32:0>:int)
          
           (<zip_1030@24:1> = <zip_1030@24:0>) |- P[<zip_1030@24:1>](<zip_1030@24:0>:int,
                                                                    <zip_1030@24:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(21098)[4] (0.003999 sec.)
      solution:
        P[<fail_1281@44:0>]($140:bool) = false
        P[<map_1033@36:0>]($155:int) = true
        P[<<map_1033@36:1>@39:0>]($143:int,$145:int) = ($145 = 0)
        P[<zip_1030@24:1>]($158:int,$160:int) = true
        P[<<zip_1030@24:2>@32:0>]($148:int,$150:int,$152:int) = ((0 <= $150) && ($148 <= 0))
    end YhornInterface.solve(20878)[3] (0.049992 sec.)
    
  end RefTypeInfer.infer_etrs(4238)[2] (0.180972 sec.)
  refinement types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | (0 = v1)} -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: v1:int -> (v2:{v2:int | (0 = v2)} -> X) -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_zip_1277: var105:bool -> var104:int -> var103:int -> (var102:int -> X) -> X
    f_1274: var108:int -> var107:unit -> X
    f_map_1270: var113:int -> (var112:int -> X) -> var110:int -> X
    f_zip_1267: var117:int -> var116:int -> var115:unit -> X
    f_zip_1268: var121:int -> var120:int -> var119:unit -> X
    f_zip_1269: var127:int -> var126:int -> (var125:int -> X) -> var123:int -> X
    fail_1279: var131:bool -> (var130:unit -> X) -> X
    fail_1280: var135:bool -> (var134:unit -> X) -> X
  abstraction types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:int[v3 -> (0 = v1)] -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: v1:int -> (v2:int[v2 -> (0 = v2)] -> X) -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:bool -> (v2:unit -> X) -> X
    br_zip_1277: var105:bool -> var104:int -> var103:int -> (var102:int -> X) -> X
    f_1274: var108:int -> var107:unit -> X
    f_map_1270: var113:int -> (var112:int -> X) -> var110:int -> X
    f_zip_1267: var117:int -> var116:int -> var115:unit -> X
    f_zip_1268: var121:int -> var120:int -> var119:unit -> X
    f_zip_1269: var127:int -> var126:int -> (var125:int -> X) -> var123:int -> X
    fail_1279: var131:bool -> (var130:unit -> X) -> X
    fail_1280: var135:bool -> (var134:unit -> X) -> X
  
end AbsTypeInfer.refine(4237)[1] (0.184972 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1266
  main_1266 -> (rand_int f_1273)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when b_1276 -> (k_zip_1102 x_1031)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when (not b_1276) -> (fail_1279 true (f_zip_1267 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when b_1278 -> (fail_1280 true (f_zip_1268 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when (not b_1278) ->
      (zip_1030 (x_1031 - 1) (y_1032 - 1) (f_zip_1269 x_1031 y_1032 k_zip_1102))
  f_1273 x_1241 -> (main_1035 x_1241 (f_1274 x_1241))
  f_1274 x_1241 x_1238 -> end
  f_main_1271 n_1036 k_main_1199 x_1224 -> (map_1033 x_1224 (f_main_1272 n_1036 x_1224 k_main_1199))
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (x_1202 = n_1036) -> (k_main_1199 ())
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (not (x_1202 = n_1036)) -> (fail_1281 true k_main_1199)
  f_map_1270 x_1034 k_map_1167 x_1171 -> (k_map_1167 (1 + x_1171))
  f_zip_1267 x_1031 y_1032 x_1105 -> _|_
  f_zip_1268 x_1031 y_1032 x_1121 -> _|_
  f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 -> (k_zip_1102 (1 + x_1134))
  fail_1279 b k -> {fail} => (k ())
  fail_1280 b k -> {fail} => (k ())
  fail_1281 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1199 -> (zip_1030 n_1036 n_1036 (f_main_1271 n_1036 k_main_1199))
  map_1033 x_1034 k_map_1167 when (x_1034 = 0) -> (k_map_1167 x_1034)
  map_1033 x_1034 k_map_1167 when (not (x_1034 = 0)) -> (map_1033 (x_1034 - 1) (f_map_1270 x_1034 k_map_1167))
  zip_1030 x_1031 y_1032 k_zip_1102 when (x_1031 = 0) -> (br_zip_1275 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
  zip_1030 x_1031 y_1032 k_zip_1102 when (not (x_1031 = 0)) -> (br_zip_1277 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
Types:
  main_1266 : X
  fail_1279 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1280 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1281 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1033 : (int -> (x_3:int[x_3 = 0] -> X) -> X)
  zip_1030 : (x_1:int -> x_2:int[x_1 = x_2] -> (int[x_1 = 0] -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1266 ... --> 
  f_1273 ... --> 
  main_1035 ... --> 
  zip_1030 [1/2] ... --> 
  br_zip_1275 [1/2] ... --> 
  f_main_1271 ... --> 
  map_1033 [2/2] ... --> 
  map_1033 [1/2] ... --> 
  f_map_1270 ... --> 
  f_main_1272 [2/2] ... --> 
  fail_1281 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 1; 0; 0; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(21934)[1]
  program:
    main_1266  | true = ((Random.int 0) f_1273)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | b_1276 = (k_zip_1102 x_1031)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | (not b_1276) = (fail_1279 true
                                                                    (f_zip_1267 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | b_1278 = (fail_1280 true
                                                                    (f_zip_1268 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | (not b_1278) = (zip_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    (
                                                                    y_1032 - 1)
                                                                    (
                                                                    f_zip_1269 x_1031
                                                                    y_1032
                                                                    k_zip_1102))
    f_1273 x_1241 | true = (main_1035 x_1241
                                      (f_1274 x_1241))
    f_1274 x_1241 x_1238 | true = end
    f_main_1271 n_1036 k_main_1199 x_1224 | true = (map_1033 x_1224
                                                             (f_main_1272 n_1036
                                                                    x_1224
                                                                    k_main_1199))
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (x_1202 = n_1036) = (
    k_main_1199 ())
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (not (x_1202 = n_1036)) = (
    fail_1281 true
              k_main_1199)
    f_map_1270 x_1034 k_map_1167 x_1171 | true = (k_map_1167 (1 + x_1171))
    f_zip_1267 x_1031 y_1032 x_1105 | true = bot
    f_zip_1268 x_1031 y_1032 x_1121 | true = bot
    f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 | true = (k_zip_1102 (
                                                                    1 + x_1134))
    fail_1279 b k | true = (fail ())
    fail_1280 b k | true = (fail ())
    fail_1281 b k | true = (fail ())
    main_1035 n_1036 k_main_1199 | true = (zip_1030 n_1036
                                                    n_1036
                                                    (f_main_1271 n_1036
                                                                 k_main_1199))
    map_1033 x_1034 k_map_1167 | (x_1034 = 0) = (k_map_1167 x_1034)
    map_1033 x_1034 k_map_1167 | (not (x_1034 = 0)) = (map_1033 (x_1034 - 1)
                                                                (f_map_1270 x_1034
                                                                    k_map_1167))
    zip_1030 x_1031 y_1032 k_zip_1102 | (x_1031 = 0) = (br_zip_1275 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    zip_1030 x_1031 y_1032 k_zip_1102 | (not (x_1031 = 0)) = (br_zip_1277 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    main_1266:X
    br_zip_1275:bool -> int -> int -> (int -> X) -> X
    br_zip_1277:bool -> int -> int -> (int -> X) -> X
    f_1273:int -> X
    f_1274:int -> unit -> X
    f_main_1271:int -> (unit -> X) -> int -> X
    f_main_1272:int -> int -> (unit -> X) -> int -> X
    f_map_1270:int -> (int -> X) -> int -> X
    f_zip_1267:int -> int -> unit -> X
    f_zip_1268:int -> int -> unit -> X
    f_zip_1269:int -> int -> (int -> X) -> int -> X
    fail_1279:bool -> (unit -> X) -> X
    fail_1280:bool -> (unit -> X) -> X
    fail_1281:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    map_1033:int -> (int -> X) -> X
    zip_1030:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1275,br_zip_1277,f_1273,f_1274,f_main_1271,f_main_1272,f_map_1270,f_zip_1267,f_zip_1268,f_zip_1269,main_1035
  counterexample: 0:0:0:0:0:0:1:0:0:1:0
  error traces:
    [true.nop(<f_1273@50:0> = var136)
     [true.(<main_1035@52:0> = <f_1273@50:0>)
      [true.((<zip_1030@54:0> = <main_1035@52:0>) && (<zip_1030@54:1> = <main_1035@52:0>))
       [(<zip_1030@54:0> = 0).
        ((<br_zip_1275@57:0> = (<zip_1030@54:1> = 0)) &&
         ((<br_zip_1275@57:1> = <zip_1030@54:0>) && (<br_zip_1275@57:2> = <zip_1030@54:1>)))
        [<br_zip_1275@57:0>.(<<br_zip_1275@57:3>@60:0> = <br_zip_1275@57:1>)
         [true.(<<zip_1030@54:2>@62:0> = <<br_zip_1275@57:3>@60:0>)
          [true.((<f_main_1271@64:0> = <main_1035@52:0>) && (<f_main_1271@64:2> = <<zip_1030@54:2>@62:0>))
           [true.(<map_1033@66:0> = <f_main_1271@64:2>)
            [(not (<map_1033@66:0> = 0)).(<map_1033@69:0> = (<map_1033@66:0> - 1))
             [(<map_1033@69:0> = 0).(<<map_1033@69:1>@72:0> = <map_1033@69:0>)
              [true.((<f_map_1270@74:0> = <map_1033@66:0>) && (<f_map_1270@74:2> = <<map_1033@69:1>@72:0>))
               [true.(<<f_map_1270@74:1>@76:0> = (1 + <f_map_1270@74:2>))
                [true.(<<map_1033@66:1>@78:0> = <<f_map_1270@74:1>@76:0>)
                 [true.
                  ((<f_main_1272@80:0> = <f_main_1271@64:0>) &&
                   ((<f_main_1272@80:1> = <f_main_1271@64:2>) && (<f_main_1272@80:3> = <<map_1033@66:1>@78:0>)))
                  [(not (<f_main_1272@80:3> = <f_main_1272@80:0>)).(<fail_1281@83:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(21935)[2]
    horn clauses:
      P[<fail_1281@83:0>](<fail_1281@83:0>:bool)|- bot
      
      P[<f_main_1272@80:3>](<f_main_1272@80:0>:int,<f_main_1272@80:1>:int,<f_main_1272@80:3>:int),
      ((<f_main_1272@80:3> <> <f_main_1272@80:0>) && <fail_1281@83:0>) |- P[<fail_1281@83:0>](
      <fail_1281@83:0>:bool)
      
      P[<f_main_1271@64:2>](<f_main_1272@80:0>:int,<f_main_1272@80:1>:int),
      P[<<map_1033@66:1>@78:0>](<f_main_1272@80:1>:int,<f_main_1272@80:3>:int)|- P[<f_main_1272@80:3>](
      <f_main_1272@80:0>:int,<f_main_1272@80:1>:int,<f_main_1272@80:3>:int)
      
      P[<map_1033@66:0>](<map_1033@66:0>:int),
      P[<<f_map_1270@74:1>@76:0>](<map_1033@66:0>:int,<<map_1033@66:1>@78:0>:int), (
      <map_1033@66:0> <> 0) |- P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,
                                                         <<map_1033@66:1>@78:0>:int)
      
      P[<f_map_1270@74:2>](<f_map_1270@74:0>:int,(-1 + <<f_map_1270@74:1>@76:0>):int)|- P[<<f_map_1270@74:1>@76:0>](
      <f_map_1270@74:0>:int,<<f_map_1270@74:1>@76:0>:int)
      
      P[<map_1033@66:0>](<f_map_1270@74:0>:int),
      P[<<map_1033@69:1>@72:0>]((-1 + <f_map_1270@74:0>):int,<f_map_1270@74:2>:int), (
      <f_map_1270@74:0> <> 0) |- P[<f_map_1270@74:2>](<f_map_1270@74:0>:int,
                                                      <f_map_1270@74:2>:int)
      
      P[<map_1033@69:0>](<map_1033@69:0>:int), ((<map_1033@69:0> = 0) && (<<map_1033@69:1>@72:0> = <map_1033@69:0>))
      |- P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int)
      
      P[<map_1033@66:0>]((1 + <map_1033@69:0>):int), ((1 + <map_1033@69:0>) <> 0)
      |- P[<map_1033@69:0>](<map_1033@69:0>:int)
      
      P[<f_main_1271@64:2>](<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](<map_1033@66:0>:int)
      
      P[<main_1035@52:0>](<f_main_1271@64:0>:int),
      P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<f_main_1271@64:2>:int)|- P[<f_main_1271@64:2>](
      <f_main_1271@64:0>:int,<f_main_1271@64:2>:int)
      
      P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
      P[<<br_zip_1275@57:3>@60:0>]((<zip_1030@54:1> = 0):bool,<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int),
      (<zip_1030@54:0> = 0)
      |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                   <<zip_1030@54:2>@62:0>:int)
      
      P[<br_zip_1275@57:2>](<br_zip_1275@57:0>:bool,<br_zip_1275@57:1>:int,<br_zip_1275@57:2>:int),
      ((<<br_zip_1275@57:3>@60:0> = <br_zip_1275@57:1>) && <br_zip_1275@57:0>)
      |- P[<<br_zip_1275@57:3>@60:0>](<br_zip_1275@57:0>:bool,<br_zip_1275@57:1>:int,
                                      <br_zip_1275@57:2>:int,<<br_zip_1275@57:3>@60:0>:int)
      
      P[<zip_1030@54:1>](<br_zip_1275@57:1>:int,<br_zip_1275@57:2>:int),
      ((<br_zip_1275@57:1> = 0) && (<br_zip_1275@57:0> = (<br_zip_1275@57:2> = 0)))
      |- P[<br_zip_1275@57:2>](<br_zip_1275@57:0>:bool,<br_zip_1275@57:1>:int,
                               <br_zip_1275@57:2>:int)
      
      P[<main_1035@52:0>](<zip_1030@54:1>:int), (<zip_1030@54:1> = <zip_1030@54:0>)
      |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int)
      
      P[<f_1273@50:0>](<main_1035@52:0>:int)|- P[<main_1035@52:0>](<main_1035@52:0>:int)
      
      |- P[<f_1273@50:0>](<f_1273@50:0>:int)
    call trees:
      <main_1266@47>
        <f_1273@50>
          <main_1035@52>
            <zip_1030@54>
              <br_zip_1275@57>
              </<br_zip_1275@57:3>@60>
            </<zip_1030@54:2>@62>
            <f_main_1271@64>
              <map_1033@66>
                <map_1033@69>
                </<map_1033@69:1>@72>
                <f_map_1270@74>
                </<f_map_1270@74:1>@76>
              </<map_1033@66:1>@78>
              <f_main_1272@80>
                <fail_1281@83>
    inlined horn clauses:
      P[<fail_1281@83:0>](<fail_1281@83:0>:bool)|- bot
      
      P[<<zip_1030@54:2>@62:0>](<f_main_1272@80:0>:int,<f_main_1272@80:0>:int,<f_main_1272@80:1>:int),
      P[<<map_1033@66:1>@78:0>](<f_main_1272@80:1>:int,<f_main_1272@80:3>:int),
      ((<f_main_1272@80:3> <> <f_main_1272@80:0>) && <fail_1281@83:0>) |- P[<fail_1281@83:0>](
      <fail_1281@83:0>:bool)
      
      P[<map_1033@66:0>](<map_1033@66:0>:int),
      P[<<map_1033@69:1>@72:0>]((-1 + <map_1033@66:0>):int,(-1 + <<map_1033@66:1>@78:0>):int), (
      <map_1033@66:0> <> 0) |- P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,
                                                         <<map_1033@66:1>@78:0>:int)
      
      P[<map_1033@69:0>](<map_1033@69:0>:int), ((<map_1033@69:0> = 0) && (<<map_1033@69:1>@72:0> = <map_1033@69:0>))
      |- P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int)
      
      P[<map_1033@66:0>]((1 + <map_1033@69:0>):int), ((1 + <map_1033@69:0>) <> 0)
      |- P[<map_1033@69:0>](<map_1033@69:0>:int)
      
      P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](
      <map_1033@66:0>:int)
      
      P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
      ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
      |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                   <<zip_1030@54:2>@62:0>:int)
      
       (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                 <zip_1030@54:1>:int)
    begin ParamSubstInfer.infer(24201)[3]
      
    end ParamSubstInfer.infer(24201)[3] (0.022996 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(24203)[3]
      
    end RefTypeInfer.elim_coeffs(24203)[3] (0.001000 sec.)
    begin GenHcSolver.solve(24538)[3]
      Horn clauses:
        P[<fail_1281@83:0>](<fail_1281@83:0>:bool)|- bot
        
        P[<<zip_1030@54:2>@62:0>](<f_main_1272@80:0>:int,<f_main_1272@80:0>:int,<f_main_1272@80:1>:int),
        P[<<map_1033@66:1>@78:0>](<f_main_1272@80:1>:int,<f_main_1272@80:3>:int),
        ((<f_main_1272@80:3> <> <f_main_1272@80:0>) && <fail_1281@83:0>) |- P[<fail_1281@83:0>](
        <fail_1281@83:0>:bool)
        
        P[<map_1033@66:0>](<map_1033@66:0>:int),
        P[<<map_1033@69:1>@72:0>]((-1 + <map_1033@66:0>):int,(-1 + <<map_1033@66:1>@78:0>):int), (
        <map_1033@66:0> <> 0) |- P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,
                                                           <<map_1033@66:1>@78:0>:int)
        
        P[<map_1033@69:0>](<map_1033@69:0>:int), ((<map_1033@69:0> = 0) && (<<map_1033@69:1>@72:0> = <map_1033@69:0>))
        |- P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int)
        
        P[<map_1033@66:0>]((1 + <map_1033@69:0>):int), ((1 + <map_1033@69:0>) <> 0)
        |- P[<map_1033@69:0>](<map_1033@69:0>:int)
        
        P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](
        <map_1033@66:0>:int)
        
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
        |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                     <<zip_1030@54:2>@62:0>:int)
        
         (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                   <zip_1030@54:1>:int)
      lower bounds:
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = (<zip_1030@54:1> = <zip_1030@54:0>)
        P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int) =
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
        P[<map_1033@66:0>](<map_1033@66:0>:int) = (<map_1033@66:0> = 0)
        P[<map_1033@69:0>](<map_1033@69:0>:int) = false
        P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int) = false
        P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,<<map_1033@66:1>@78:0>:int) = false
        P[<fail_1281@83:0>](<fail_1281@83:0>:bool) = false
      upper bounds:
        P[<<map_1033@66:1>@78:0>](var144:int,var145:int) = true
        P[<<map_1033@69:1>@72:0>](var139:int,var140:int) = true
      begin GenHcSolver.classify_pids(27235)[4]
        output:
          [<<map_1033@69:1>@72:0>;<<map_1033@66:1>@78:0>]
      end GenHcSolver.classify_pids(27235)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(27246)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(27247)[5]
          begin InterpProver.interpolate_fresh(27248)[6]
            begin InterpProver.interpolate_log(27249)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(27250)[8]
                begin InterpProver.interpolate_simplify(27251)[9]
                  begin InterpProver.interpolate_quick(27264)[10]
                    
                  end InterpProver.interpolate_quick(27264)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(27268)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(27268)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(27251)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(27250)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(27249)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(27248)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(27247)[5] (0.000000 sec.)
        output:
          P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int) = false
          P[<<map_1033@66:1>@78:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int) = false
      end ApronInterface.convex_hull_interpolate(27246)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1281@83:0>](<fail_1281@83:0>:bool)|- bot
        
        P[<map_1033@69:0>](0:int)|- bot
        
        P[<map_1033@66:0>]((1 + <map_1033@69:0>):int), ((1 + <map_1033@69:0>) <> 0)
        |- P[<map_1033@69:0>](<map_1033@69:0>:int)
        
        P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](
        <map_1033@66:0>:int)
        
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
        |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                     <<zip_1030@54:2>@62:0>:int)
        
         (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                   <zip_1030@54:1>:int)
      lower bounds:
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = (<zip_1030@54:1> = <zip_1030@54:0>)
        P[<fail_1281@83:0>](var149:bool) = false
        P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int) =
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
        P[<map_1033@66:0>](<map_1033@66:0>:int) = (<map_1033@66:0> = 0)
        P[<map_1033@69:0>](<map_1033@69:0>:int) = false
      upper bounds:
        P[<map_1033@69:0>](var156:int) = true
        P[<map_1033@66:0>](var152:int) = (var152 <> 1)
      begin GenHcSolver.classify_pids(30610)[4]
        output:
          [<map_1033@66:0>;<map_1033@69:0>]
      end GenHcSolver.classify_pids(30610)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(30630)[4]
        lb:(<map_1033@66:0> = 0)
        nub:(not (<map_1033@66:0> <> 1))
        lb':(<map_1033@66:0> = 0)
        nub':(not (<map_1033@66:0> <> 1))
        begin InterpProver.interpolate(30631)[5]
          begin InterpProver.interpolate_fresh(30632)[6]
            begin InterpProver.interpolate_log(30633)[7]
              input1: (<map_1033@66:0> = 0)
              input2: (not (<map_1033@66:0> <> 1))
              begin InterpProver.interpolate_check(30634)[8]
                begin InterpProver.interpolate_simplify(30635)[9]
                  begin InterpProver.interpolate_quick(30654)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(30663)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(30664)[12]
                        begin CsisatInterface.interpolate_csisat_log(30665)[13]
                          input1: 0 = v_sep_map_1033_sep_66_sep_0
                          input2: 1 = v_sep_map_1033_sep_66_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(30666)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(30666)[14] (0.001000 sec.)
                          output: 2*v_sep_map_1033_sep_66_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(30665)[13] (0.001000 sec.)
                        after simplification: 2*v_sep_map_1033_sep_66_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_map_1033_sep_66_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(30664)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(30663)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(30654)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(30635)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(30634)[8] (0.001000 sec.)
              output: (<map_1033@66:0> <= 0)
            end InterpProver.interpolate_log(30633)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(30632)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(30631)[5] (0.001000 sec.)
        output:
          P[<map_1033@66:0>](<map_1033@66:0>:int) = (<map_1033@66:0> <= 0)
          P[<map_1033@69:0>](<map_1033@66:0>:int) = (<map_1033@66:0> <= 0)
      end ApronInterface.convex_hull_interpolate(30630)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1281@83:0>](<fail_1281@83:0>:bool)|- bot
        
        P[<map_1033@69:0>](0:int)|- bot
        
         ((1 + <map_1033@69:0>) < 0) |- P[<map_1033@69:0>](<map_1033@69:0>:int)
        
        P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int),
        (<map_1033@66:0> > 0) |- bot
        
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
        |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                     <<zip_1030@54:2>@62:0>:int)
        
         (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                   <zip_1030@54:1>:int)
      lower bounds:
        P[<map_1033@69:0>](<map_1033@69:0>:int) = ((1 + <map_1033@69:0>) < 0)
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = (<zip_1030@54:1> = <zip_1030@54:0>)
        P[<fail_1281@83:0>](var160:bool) = false
        P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int) =
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
      upper bounds:
        P[<fail_1281@83:0>](var163:bool) = true
      begin GenHcSolver.classify_pids(33013)[4]
        output:
          [<fail_1281@83:0>]
      end GenHcSolver.classify_pids(33013)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(33016)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(33017)[5]
          begin InterpProver.interpolate_fresh(33018)[6]
            begin InterpProver.interpolate_log(33019)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(33020)[8]
                begin InterpProver.interpolate_simplify(33021)[9]
                  begin InterpProver.interpolate_quick(33034)[10]
                    
                  end InterpProver.interpolate_quick(33034)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(33038)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(33038)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(33021)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(33020)[8] (0.000999 sec.)
              output: false
            end InterpProver.interpolate_log(33019)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(33018)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(33017)[5] (0.000999 sec.)
        output:
          P[<fail_1281@83:0>](var160:bool) = false
      end ApronInterface.convex_hull_interpolate(33016)[4] (0.000999 sec.)
      Horn clauses:
        P[<map_1033@69:0>](0:int)|- bot
        
         ((1 + <map_1033@69:0>) < 0) |- P[<map_1033@69:0>](<map_1033@69:0>:int)
        
        P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int),
        (<map_1033@66:0> > 0) |- bot
        
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
        |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                     <<zip_1030@54:2>@62:0>:int)
        
         (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                   <zip_1030@54:1>:int)
      lower bounds:
        P[<map_1033@69:0>](<map_1033@69:0>:int) = ((1 + <map_1033@69:0>) < 0)
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = (<zip_1030@54:1> = <zip_1030@54:0>)
        P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int) =
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
      upper bounds:
        P[<map_1033@69:0>](var164:int) = (var164 <> 0)
      begin GenHcSolver.classify_pids(34484)[4]
        output:
          [<map_1033@69:0>]
      end GenHcSolver.classify_pids(34484)[4] (0.000000 sec.)
      lb:((1 + <map_1033@69:0>) < 0)
      nub:(not (<map_1033@69:0> <> 0))
      begin ApronInterface.convex_hull_interpolate(34487)[4]
        lb:((1 + <map_1033@69:0>) < 0)
        nub:(not (<map_1033@69:0> <> 0))
        lb':((1 + <map_1033@69:0>) < 0)
        nub':(not (<map_1033@69:0> <> 0))
        begin InterpProver.interpolate(34488)[5]
          begin InterpProver.interpolate_fresh(34489)[6]
            begin InterpProver.interpolate_log(34490)[7]
              input1: ((1 + <map_1033@69:0>) < 0)
              input2: (not (<map_1033@69:0> <> 0))
              begin InterpProver.interpolate_check(34491)[8]
                begin InterpProver.interpolate_simplify(34492)[9]
                  begin InterpProver.interpolate_quick(34511)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(34520)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(34521)[12]
                        begin CsisatInterface.interpolate_csisat_log(34522)[13]
                          input1: (2 + v_sep_map_1033_sep_69_sep_0) <= 0
                          input2: 0 = v_sep_map_1033_sep_69_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(34523)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(34523)[14] (0.000000 sec.)
                          output: v_sep_map_1033_sep_69_sep_0 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(34522)[13] (0.000000 sec.)
                        after simplification: v_sep_map_1033_sep_69_sep_0 <= -2
                        after dnf conversion: ((v_sep_map_1033_sep_69_sep_0 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(34521)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(34520)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(34511)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(34492)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(34491)[8] (0.001000 sec.)
              output: ((2 + <map_1033@69:0>) <= 0)
            end InterpProver.interpolate_log(34490)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(34489)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(34488)[5] (0.001000 sec.)
        output:
          P[<map_1033@69:0>](<map_1033@69:0>:int) = ((2 + <map_1033@69:0>) <= 0)
      end ApronInterface.convex_hull_interpolate(34487)[4] (0.001000 sec.)
      Horn clauses:
        P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int),
        (<map_1033@66:0> > 0) |- bot
        
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
        |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                     <<zip_1030@54:2>@62:0>:int)
        
         (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                   <zip_1030@54:1>:int)
      lower bounds:
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = (<zip_1030@54:1> = <zip_1030@54:0>)
        P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int) =
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
      upper bounds:
        P[<<zip_1030@54:2>@62:0>](var165:int,var166:int,var167:int) = ((var167 <= 0) || (var165 <> var166))
      begin GenHcSolver.classify_pids(35885)[4]
        output:
          [<<zip_1030@54:2>@62:0>]
      end GenHcSolver.classify_pids(35885)[4] (0.000000 sec.)
      lb:((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
      nub:(not ((<<zip_1030@54:2>@62:0> <= 0) || (<zip_1030@54:0> <> <zip_1030@54:1>)))
      begin ApronInterface.convex_hull_interpolate(35888)[4]
        lb:((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
        nub:(not ((<<zip_1030@54:2>@62:0> <= 0) || (<zip_1030@54:0> <> <zip_1030@54:1>)))
        lb':((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
        nub':(not ((<<zip_1030@54:2>@62:0> <= 0) || (<zip_1030@54:0> <> <zip_1030@54:1>)))
        begin InterpProver.interpolate(35889)[5]
          begin InterpProver.interpolate_fresh(35890)[6]
            begin InterpProver.interpolate_log(35891)[7]
              input1: ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
              input2: (not ((<<zip_1030@54:2>@62:0> <= 0) || (<zip_1030@54:0> <> <zip_1030@54:1>)))
              begin InterpProver.interpolate_check(35892)[8]
                begin InterpProver.interpolate_simplify(35893)[9]
                  begin InterpProver.interpolate_quick(35964)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(35973)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(35974)[12]
                        begin CsisatInterface.interpolate_csisat_log(35975)[13]
                          input1: (0 = v_sep_zip_1030_sep_54_sep_0 & 0 = v_sep_zip_1030_sep_54_sep_1 & v_sep_zip_1030_sep_54_sep_1 = v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0)
                          input2: (v_sep_zip_1030_sep_54_sep_0 = v_sep_zip_1030_sep_54_sep_1 & 1 <= v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(35976)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(35976)[14] (0.000000 sec.)
                          output: 2*v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(35975)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(35974)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(35973)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(35964)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(35893)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(35892)[8] (0.002000 sec.)
              output: (<<zip_1030@54:2>@62:0> <= 0)
            end InterpProver.interpolate_log(35891)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(35890)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(35889)[5] (0.002000 sec.)
        output:
          P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int) =
          (<<zip_1030@54:2>@62:0> <= 0)
      end ApronInterface.convex_hull_interpolate(35888)[4] (0.002000 sec.)
      Horn clauses:
         (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                   <zip_1030@54:1>:int)
      lower bounds:
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = (<zip_1030@54:1> = <zip_1030@54:0>)
      upper bounds:
        P[<zip_1030@54:1>](var168:int,var169:int) = true
      begin GenHcSolver.classify_pids(36398)[4]
        output:
          [<zip_1030@54:1>]
      end GenHcSolver.classify_pids(36398)[4] (0.000000 sec.)
      lb:(<zip_1030@54:1> = <zip_1030@54:0>)
      nub:false
      begin ApronInterface.convex_hull_interpolate(36401)[4]
        lb:(<zip_1030@54:1> = <zip_1030@54:0>)
        nub:false
        lb':(<zip_1030@54:1> = <zip_1030@54:0>)
        nub':false
        begin InterpProver.interpolate(36402)[5]
          begin InterpProver.interpolate_fresh(36403)[6]
            begin InterpProver.interpolate_log(36404)[7]
              input1: (<zip_1030@54:1> = <zip_1030@54:0>)
              input2: false
              begin InterpProver.interpolate_check(36405)[8]
                begin InterpProver.interpolate_simplify(36406)[9]
                  begin InterpProver.interpolate_quick(36421)[10]
                    
                  end InterpProver.interpolate_quick(36421)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(36406)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(36405)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(36404)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(36403)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(36402)[5] (0.000000 sec.)
        output:
          P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = true
      end ApronInterface.convex_hull_interpolate(36401)[4] (0.000000 sec.)
      begin HcSolver.check_validity(36486)[4]
        input:
          P[<fail_1281@83:0>](<fail_1281@83:0>:bool)|- bot
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1272@80:0>:int,<f_main_1272@80:0>:int,<f_main_1272@80:1>:int),
          P[<<map_1033@66:1>@78:0>](<f_main_1272@80:1>:int,<f_main_1272@80:3>:int),
          ((<f_main_1272@80:3> <> <f_main_1272@80:0>) && <fail_1281@83:0>)
          |- P[<fail_1281@83:0>](<fail_1281@83:0>:bool)
          
          P[<map_1033@66:0>](<map_1033@66:0>:int),
          P[<<map_1033@69:1>@72:0>]((-1 + <map_1033@66:0>):int,(-1 + <<map_1033@66:1>@78:0>):int),
          (<map_1033@66:0> <> 0) |- P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,
                                                              <<map_1033@66:1>@78:0>:int)
          
          P[<map_1033@69:0>](<map_1033@69:0>:int),
          ((<map_1033@69:0> = 0) && (<<map_1033@69:1>@72:0> = <map_1033@69:0>))
          |- P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int)
          
          P[<map_1033@66:0>]((1 + <map_1033@69:0>):int), ((1 + <map_1033@69:0>) <> 0)
          |- P[<map_1033@69:0>](<map_1033@69:0>:int)
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](
          <map_1033@66:0>:int)
          
          P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
          ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
          |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                       <<zip_1030@54:2>@62:0>:int)
          
           (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                    <zip_1030@54:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(36486)[4] (0.002999 sec.)
      solution:
        P[<fail_1281@83:0>](var160:bool) = false
        P[<<map_1033@66:1>@78:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int) = false
        P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int) = false
        P[<map_1033@69:0>](<map_1033@69:0>:int) = ((2 + <map_1033@69:0>) <= 0)
        P[<map_1033@66:0>](<map_1033@66:0>:int) = (<map_1033@66:0> <= 0)
        P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int) =
        (<<zip_1030@54:2>@62:0> <= 0)
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = true
    end GenHcSolver.solve(24538)[3] (0.071989 sec.)
    begin GenHcSolver.solve(36987)[3]
      Horn clauses:
        P[<fail_1281@83:0>](<fail_1281@83:0>:bool)|- bot
        
        P[<<zip_1030@54:2>@62:0>](<f_main_1272@80:0>:int,<f_main_1272@80:0>:int,<f_main_1272@80:1>:int),
        P[<<map_1033@66:1>@78:0>](<f_main_1272@80:1>:int,<f_main_1272@80:3>:int),
        ((<f_main_1272@80:3> <> <f_main_1272@80:0>) && <fail_1281@83:0>) |- P[<fail_1281@83:0>](
        <fail_1281@83:0>:bool)
        
        P[<map_1033@66:0>](<map_1033@66:0>:int),
        P[<<map_1033@69:1>@72:0>]((-1 + <map_1033@66:0>):int,(-1 + <<map_1033@66:1>@78:0>):int), (
        <map_1033@66:0> <> 0) |- P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,
                                                           <<map_1033@66:1>@78:0>:int)
        
        P[<map_1033@69:0>](<map_1033@69:0>:int), ((<map_1033@69:0> = 0) && (<<map_1033@69:1>@72:0> = <map_1033@69:0>))
        |- P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int)
        
        P[<map_1033@66:0>]((1 + <map_1033@69:0>):int), ((1 + <map_1033@69:0>) <> 0)
        |- P[<map_1033@69:0>](<map_1033@69:0>:int)
        
        P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](
        <map_1033@66:0>:int)
        
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
        |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                     <<zip_1030@54:2>@62:0>:int)
        
         (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                   <zip_1030@54:1>:int)
      lower bounds:
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = (<zip_1030@54:1> = <zip_1030@54:0>)
        P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int) =
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
        P[<map_1033@66:0>](<map_1033@66:0>:int) = (<map_1033@66:0> = 0)
        P[<map_1033@69:0>](<map_1033@69:0>:int) = false
        P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int) = false
        P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,<<map_1033@66:1>@78:0>:int) = false
        P[<fail_1281@83:0>](<fail_1281@83:0>:bool) = false
      upper bounds:
        P[<<map_1033@66:1>@78:0>](var177:int,var178:int) = true
        P[<<map_1033@69:1>@72:0>](var172:int,var173:int) = true
      begin GenHcSolver.classify_pids(39684)[4]
        output:
          [<<map_1033@69:1>@72:0>;<<map_1033@66:1>@78:0>]
      end GenHcSolver.classify_pids(39684)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(39695)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(39698)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(39698)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(39703)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(39703)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(39706)[5]
          begin InterpProver.interpolate_fresh(39707)[6]
            begin InterpProver.interpolate_log(39708)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(39709)[8]
                begin InterpProver.interpolate_simplify(39710)[9]
                  begin InterpProver.interpolate_quick(39725)[10]
                    
                  end InterpProver.interpolate_quick(39725)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(39729)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(39729)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(39710)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(39709)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(39708)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(39707)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(39706)[5] (0.001000 sec.)
        output:
          P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int) = false
          P[<<map_1033@66:1>@78:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int) = false
      end ApronInterface.convex_hull_interpolate(39695)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1281@83:0>](<fail_1281@83:0>:bool)|- bot
        
        P[<map_1033@69:0>](0:int)|- bot
        
        P[<map_1033@66:0>]((1 + <map_1033@69:0>):int), ((1 + <map_1033@69:0>) <> 0)
        |- P[<map_1033@69:0>](<map_1033@69:0>:int)
        
        P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](
        <map_1033@66:0>:int)
        
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
        |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                     <<zip_1030@54:2>@62:0>:int)
        
         (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                   <zip_1030@54:1>:int)
      lower bounds:
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = (<zip_1030@54:1> = <zip_1030@54:0>)
        P[<fail_1281@83:0>](var182:bool) = false
        P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int) =
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
        P[<map_1033@66:0>](<map_1033@66:0>:int) = (<map_1033@66:0> = 0)
        P[<map_1033@69:0>](<map_1033@69:0>:int) = false
      upper bounds:
        P[<map_1033@69:0>](var189:int) = true
        P[<map_1033@66:0>](var185:int) = (var185 <> 1)
      begin GenHcSolver.classify_pids(43078)[4]
        output:
          [<map_1033@66:0>;<map_1033@69:0>]
      end GenHcSolver.classify_pids(43078)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(43098)[4]
        lb:(<map_1033@66:0> = 0)
        nub:(not (<map_1033@66:0> <> 1))
        begin ExtFormula.Formula.case_analysis_boolean(43102)[5]
          ts: (<map_1033@66:0> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(43102)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(43110)[5]
          ts: (<map_1033@66:0> = 1)
          
        end ExtFormula.Formula.case_analysis_boolean(43110)[5] (0.000000 sec.)
        lb':(<map_1033@66:0> = 0)
        nub':((-1 + <map_1033@66:0>) = 0)
        begin InterpProver.interpolate(43115)[5]
          begin InterpProver.interpolate_fresh(43116)[6]
            begin InterpProver.interpolate_log(43117)[7]
              input1: (<map_1033@66:0> = 0)
              input2: ((-1 + <map_1033@66:0>) = 0)
              begin InterpProver.interpolate_check(43118)[8]
                begin InterpProver.interpolate_simplify(43119)[9]
                  begin InterpProver.interpolate_quick(43138)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(43147)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(43148)[12]
                        begin CsisatInterface.interpolate_csisat_log(43149)[13]
                          input1: 0 = v_sep_map_1033_sep_66_sep_0
                          input2: 1 = v_sep_map_1033_sep_66_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(43150)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(43150)[14] (0.000000 sec.)
                          output: 2*v_sep_map_1033_sep_66_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(43149)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_map_1033_sep_66_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_map_1033_sep_66_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(43148)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(43147)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(43138)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(43119)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(43118)[8] (0.001000 sec.)
              output: (<map_1033@66:0> <= 0)
            end InterpProver.interpolate_log(43117)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(43116)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(43115)[5] (0.002000 sec.)
        output:
          P[<map_1033@66:0>](<map_1033@66:0>:int) = (<map_1033@66:0> <= 0)
          P[<map_1033@69:0>](<map_1033@66:0>:int) = (<map_1033@66:0> <= 0)
      end ApronInterface.convex_hull_interpolate(43098)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1281@83:0>](<fail_1281@83:0>:bool)|- bot
        
        P[<map_1033@69:0>](0:int)|- bot
        
         ((1 + <map_1033@69:0>) < 0) |- P[<map_1033@69:0>](<map_1033@69:0>:int)
        
        P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int),
        (<map_1033@66:0> > 0) |- bot
        
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
        |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                     <<zip_1030@54:2>@62:0>:int)
        
         (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                   <zip_1030@54:1>:int)
      lower bounds:
        P[<map_1033@69:0>](<map_1033@69:0>:int) = ((1 + <map_1033@69:0>) < 0)
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = (<zip_1030@54:1> = <zip_1030@54:0>)
        P[<fail_1281@83:0>](var193:bool) = false
        P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int) =
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
      upper bounds:
        P[<fail_1281@83:0>](var196:bool) = true
      begin GenHcSolver.classify_pids(45495)[4]
        output:
          [<fail_1281@83:0>]
      end GenHcSolver.classify_pids(45495)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(45498)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(45501)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(45501)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(45506)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(45506)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(45509)[5]
          begin InterpProver.interpolate_fresh(45510)[6]
            begin InterpProver.interpolate_log(45511)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(45512)[8]
                begin InterpProver.interpolate_simplify(45513)[9]
                  begin InterpProver.interpolate_quick(45528)[10]
                    
                  end InterpProver.interpolate_quick(45528)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(45532)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(45532)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(45513)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(45512)[8] (0.001999 sec.)
              output: false
            end InterpProver.interpolate_log(45511)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(45510)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(45509)[5] (0.001999 sec.)
        output:
          P[<fail_1281@83:0>](var193:bool) = false
      end ApronInterface.convex_hull_interpolate(45498)[4] (0.001999 sec.)
      Horn clauses:
        P[<map_1033@69:0>](0:int)|- bot
        
         ((1 + <map_1033@69:0>) < 0) |- P[<map_1033@69:0>](<map_1033@69:0>:int)
        
        P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int),
        (<map_1033@66:0> > 0) |- bot
        
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
        |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                     <<zip_1030@54:2>@62:0>:int)
        
         (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                   <zip_1030@54:1>:int)
      lower bounds:
        P[<map_1033@69:0>](<map_1033@69:0>:int) = ((1 + <map_1033@69:0>) < 0)
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = (<zip_1030@54:1> = <zip_1030@54:0>)
        P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int) =
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
      upper bounds:
        P[<map_1033@69:0>](var197:int) = (var197 <> 0)
      begin GenHcSolver.classify_pids(46985)[4]
        output:
          [<map_1033@69:0>]
      end GenHcSolver.classify_pids(46985)[4] (0.000000 sec.)
      lb:((1 + <map_1033@69:0>) < 0)
      nub:(not (<map_1033@69:0> <> 0))
      begin ApronInterface.convex_hull_interpolate(46988)[4]
        lb:((1 + <map_1033@69:0>) < 0)
        nub:(not (<map_1033@69:0> <> 0))
        begin ExtFormula.Formula.case_analysis_boolean(46993)[5]
          ts: ((1 + <map_1033@69:0>) < 0)
          
        end ExtFormula.Formula.case_analysis_boolean(46993)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(47001)[5]
          ts: (<map_1033@69:0> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(47001)[5] (0.000000 sec.)
        lb':((-2 + (-1 * <map_1033@69:0>)) >= 0)
        nub':(<map_1033@69:0> = 0)
        begin InterpProver.interpolate(47005)[5]
          begin InterpProver.interpolate_fresh(47006)[6]
            begin InterpProver.interpolate_log(47007)[7]
              input1: ((-2 + (-1 * <map_1033@69:0>)) >= 0)
              input2: (<map_1033@69:0> = 0)
              begin InterpProver.interpolate_check(47008)[8]
                begin InterpProver.interpolate_simplify(47009)[9]
                  begin InterpProver.interpolate_quick(47028)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(47037)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(47038)[12]
                        begin CsisatInterface.interpolate_csisat_log(47039)[13]
                          input1: (2 + v_sep_map_1033_sep_69_sep_0) <= 0
                          input2: 0 = v_sep_map_1033_sep_69_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(47040)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(47040)[14] (0.000000 sec.)
                          output: v_sep_map_1033_sep_69_sep_0 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(47039)[13] (0.000000 sec.)
                        after simplification: v_sep_map_1033_sep_69_sep_0 <= -2
                        after dnf conversion: ((v_sep_map_1033_sep_69_sep_0 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(47038)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(47037)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(47028)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(47009)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(47008)[8] (0.001000 sec.)
              output: ((2 + <map_1033@69:0>) <= 0)
            end InterpProver.interpolate_log(47007)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(47006)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(47005)[5] (0.001000 sec.)
        output:
          P[<map_1033@69:0>](<map_1033@69:0>:int) = ((2 + <map_1033@69:0>) <= 0)
      end ApronInterface.convex_hull_interpolate(46988)[4] (0.001000 sec.)
      Horn clauses:
        P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int),
        (<map_1033@66:0> > 0) |- bot
        
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
        |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                     <<zip_1030@54:2>@62:0>:int)
        
         (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                   <zip_1030@54:1>:int)
      lower bounds:
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = (<zip_1030@54:1> = <zip_1030@54:0>)
        P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int) =
        ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
      upper bounds:
        P[<<zip_1030@54:2>@62:0>](var198:int,var199:int,var200:int) = ((var200 <= 0) || (var198 <> var199))
      begin GenHcSolver.classify_pids(48401)[4]
        output:
          [<<zip_1030@54:2>@62:0>]
      end GenHcSolver.classify_pids(48401)[4] (0.000000 sec.)
      lb:((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
      nub:(not ((<<zip_1030@54:2>@62:0> <= 0) || (<zip_1030@54:0> <> <zip_1030@54:1>)))
      begin ApronInterface.convex_hull_interpolate(48404)[4]
        lb:((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
        nub:(not ((<<zip_1030@54:2>@62:0> <= 0) || (<zip_1030@54:0> <> <zip_1030@54:1>)))
        begin ExtFormula.Formula.case_analysis_boolean(48424)[5]
          ts: ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:1> = <<zip_1030@54:2>@62:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(48424)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(48445)[5]
          ts: ((<<zip_1030@54:2>@62:0> > 0) && (<zip_1030@54:0> = <zip_1030@54:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(48445)[5] (0.001000 sec.)
        lb':((<<zip_1030@54:2>@62:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:0> = 0)))
        nub':(((<zip_1030@54:1> + (-1 * <zip_1030@54:0>)) = 0) && ((-1 + <<zip_1030@54:2>@62:0>) >= 0))
        begin InterpProver.interpolate(48451)[5]
          begin InterpProver.interpolate_fresh(48452)[6]
            begin InterpProver.interpolate_log(48453)[7]
              input1: ((<<zip_1030@54:2>@62:0> = 0) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:0> = 0)))
              input2: (((<zip_1030@54:1> + (-1 * <zip_1030@54:0>)) = 0) && ((-1 + <<zip_1030@54:2>@62:0>) >= 0))
              begin InterpProver.interpolate_check(48454)[8]
                begin InterpProver.interpolate_simplify(48455)[9]
                  begin InterpProver.interpolate_quick(48518)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(48527)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(48528)[12]
                        begin CsisatInterface.interpolate_csisat_log(48529)[13]
                          input1: (0 = v_sep_zip_1030_sep_54_sep_0 & 0 = v_sep_zip_1030_sep_54_sep_1 & 0 = v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0)
                          input2: (v_sep_zip_1030_sep_54_sep_0 = v_sep_zip_1030_sep_54_sep_1 & 1 <= v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(48530)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(48530)[14] (0.000000 sec.)
                          output: 2*v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(48529)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(48528)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(48527)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(48518)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(48455)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(48454)[8] (0.001999 sec.)
              output: (<<zip_1030@54:2>@62:0> <= 0)
            end InterpProver.interpolate_log(48453)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(48452)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(48451)[5] (0.001999 sec.)
        output:
          P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int) =
          (<<zip_1030@54:2>@62:0> <= 0)
      end ApronInterface.convex_hull_interpolate(48404)[4] (0.002999 sec.)
      Horn clauses:
         (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                   <zip_1030@54:1>:int)
      lower bounds:
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = (<zip_1030@54:1> = <zip_1030@54:0>)
      upper bounds:
        P[<zip_1030@54:1>](var201:int,var202:int) = true
      begin GenHcSolver.classify_pids(48954)[4]
        output:
          [<zip_1030@54:1>]
      end GenHcSolver.classify_pids(48954)[4] (0.000000 sec.)
      lb:(<zip_1030@54:1> = <zip_1030@54:0>)
      nub:false
      begin ApronInterface.convex_hull_interpolate(48957)[4]
        lb:(<zip_1030@54:1> = <zip_1030@54:0>)
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(48962)[5]
          ts: (<zip_1030@54:1> = <zip_1030@54:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(48962)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(48969)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(48969)[5] (0.000000 sec.)
        lb':((<zip_1030@54:1> + (-1 * <zip_1030@54:0>)) = 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(48972)[5]
          begin InterpProver.interpolate_fresh(48973)[6]
            begin InterpProver.interpolate_log(48974)[7]
              input1: ((<zip_1030@54:1> + (-1 * <zip_1030@54:0>)) = 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(48975)[8]
                begin InterpProver.interpolate_simplify(48976)[9]
                  begin InterpProver.interpolate_quick(48992)[10]
                    
                  end InterpProver.interpolate_quick(48992)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(48976)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(48975)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(48974)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(48973)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(48972)[5] (0.000000 sec.)
        output:
          P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = true
      end ApronInterface.convex_hull_interpolate(48957)[4] (0.000000 sec.)
      begin HcSolver.check_validity(49059)[4]
        input:
          P[<fail_1281@83:0>](<fail_1281@83:0>:bool)|- bot
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1272@80:0>:int,<f_main_1272@80:0>:int,<f_main_1272@80:1>:int),
          P[<<map_1033@66:1>@78:0>](<f_main_1272@80:1>:int,<f_main_1272@80:3>:int),
          ((<f_main_1272@80:3> <> <f_main_1272@80:0>) && <fail_1281@83:0>)
          |- P[<fail_1281@83:0>](<fail_1281@83:0>:bool)
          
          P[<map_1033@66:0>](<map_1033@66:0>:int),
          P[<<map_1033@69:1>@72:0>]((-1 + <map_1033@66:0>):int,(-1 + <<map_1033@66:1>@78:0>):int),
          (<map_1033@66:0> <> 0) |- P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,
                                                              <<map_1033@66:1>@78:0>:int)
          
          P[<map_1033@69:0>](<map_1033@69:0>:int),
          ((<map_1033@69:0> = 0) && (<<map_1033@69:1>@72:0> = <map_1033@69:0>))
          |- P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int)
          
          P[<map_1033@66:0>]((1 + <map_1033@69:0>):int), ((1 + <map_1033@69:0>) <> 0)
          |- P[<map_1033@69:0>](<map_1033@69:0>:int)
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](
          <map_1033@66:0>:int)
          
          P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
          ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
          |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                       <<zip_1030@54:2>@62:0>:int)
          
           (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                    <zip_1030@54:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(49059)[4] (0.003000 sec.)
      solution:
        P[<fail_1281@83:0>](var193:bool) = false
        P[<<map_1033@66:1>@78:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int) = false
        P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int) = false
        P[<map_1033@69:0>](<map_1033@69:0>:int) = ((2 + <map_1033@69:0>) <= 0)
        P[<map_1033@66:0>](<map_1033@66:0>:int) = (<map_1033@66:0> <= 0)
        P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,<<zip_1030@54:2>@62:0>:int) =
        (<<zip_1030@54:2>@62:0> <= 0)
        P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int) = true
    end GenHcSolver.solve(36987)[3] (0.064990 sec.)
    begin YhornInterface.solve(49560)[3]
      begin HcSolver.solve_ub(49561)[4]
        encoded:
          P[<fail_1281@83:0>](<fail_1281@83:0>:int)|- bot
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1272@80:0>:int,<f_main_1272@80:0>:int,<f_main_1272@80:1>:int),
          P[<<map_1033@66:1>@78:0>](<f_main_1272@80:1>:int,<f_main_1272@80:3>:int),
          ((<f_main_1272@80:3> <> <f_main_1272@80:0>) && (<fail_1281@83:0> = 1))
          |- P[<fail_1281@83:0>](<fail_1281@83:0>:int)
          
          P[<map_1033@66:0>](<map_1033@66:0>:int),
          P[<<map_1033@69:1>@72:0>]((-1 + <map_1033@66:0>):int,(-1 + <<map_1033@66:1>@78:0>):int),
          (<map_1033@66:0> <> 0) |- P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,
                                                              <<map_1033@66:1>@78:0>:int)
          
          P[<map_1033@69:0>](<map_1033@69:0>:int),
          ((<map_1033@69:0> = 0) && (<<map_1033@69:1>@72:0> = <map_1033@69:0>))
          |- P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int)
          
          P[<map_1033@66:0>]((1 + <map_1033@69:0>):int), ((1 + <map_1033@69:0>) <> 0)
          |- P[<map_1033@69:0>](<map_1033@69:0>:int)
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](
          <map_1033@66:0>:int)
          
          P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
          ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
          |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                       <<zip_1030@54:2>@62:0>:int)
          
           (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                    <zip_1030@54:1>:int)
        input to Yhorn:
          P[<fail_1281@83:0>](<fail_1281@83:0>:int)|- bot
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1272@80:0>:int,<f_main_1272@80:0>:int,<f_main_1272@80:1>:int),
          P[<<map_1033@66:1>@78:0>](<f_main_1272@80:1>:int,<f_main_1272@80:3>:int),
          ((<f_main_1272@80:3> <> <f_main_1272@80:0>) && (<fail_1281@83:0> = 1))
          |- P[<fail_1281@83:0>](<fail_1281@83:0>:int)
          
          P[<map_1033@66:0>](<map_1033@66:0>:int),
          P[<<map_1033@69:1>@72:0>](var203:int,var204:int),
          (((1 + var204) = <<map_1033@66:1>@78:0>) && (((1 + var203) = <map_1033@66:0>) && (<map_1033@66:0> <> 0)))
          |- P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,<<map_1033@66:1>@78:0>:int)
          
          P[<map_1033@69:0>](<map_1033@69:0>:int),
          ((<<map_1033@69:1>@72:0> = <map_1033@69:0>) && (<map_1033@69:0> = 0))
          |- P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int)
          
          P[<map_1033@66:0>](var205:int), ((var205 = (1 + <map_1033@69:0>)) && ((1 + <map_1033@69:0>) <> 0))
          |- P[<map_1033@69:0>](<map_1033@69:0>:int)
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](
          <map_1033@66:0>:int)
          
          P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
          ((<<zip_1030@54:2>@62:0> = <zip_1030@54:0>) && ((<zip_1030@54:1> = 0) && (<zip_1030@54:0> = 0)))
          |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                       <<zip_1030@54:2>@62:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1281_sep_83_sep_0($420)) -> 1=0.
(($420-1=0) & ($421-$422<>0)) & (v_sep_map_1033_sep_66_sep_1_sep_78_sep_0($423,$421)) & (v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0($422,$422,$423)) -> v_sep_fail_1281_sep_83_sep_0($420).
(($424<>0) & (-$424+$425+1=0) & ($426-$427+1=0)) & (v_sep_map_1033_sep_69_sep_1_sep_72_sep_0($425,$426)) & (v_sep_map_1033_sep_66_sep_0($424)) -> v_sep_map_1033_sep_66_sep_1_sep_78_sep_0($424,$427).
(($428=0) & (-$428+$429=0)) & (v_sep_map_1033_sep_69_sep_0($428)) -> v_sep_map_1033_sep_69_sep_1_sep_72_sep_0($428,$429).
(($428+1<>0) & (-$428+$430-1=0)) & (v_sep_map_1033_sep_66_sep_0($430)) -> v_sep_map_1033_sep_69_sep_0($428).
(0=0) & (v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0($431,$431,$424)) -> v_sep_map_1033_sep_66_sep_0($424).
(($432=0) & ($433=0) & (-$432+$434=0)) & (v_sep_zip_1030_sep_54_sep_1($432,$433)) -> v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0($432,$433,$434).
-$432+$433=0 -> v_sep_zip_1030_sep_54_sep_1($432,$433).


v_sep_fail_1281_sep_83_sep_0: X
v_sep_map_1033_sep_66_sep_0: X
v_sep_map_1033_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1033_sep_69_sep_0: X
v_sep_map_1033_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1030_sep_54_sep_1: X
v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0: X
...............
v_sep_fail_1281_sep_83_sep_0: X
v_sep_map_1033_sep_66_sep_0: X
v_sep_map_1033_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1033_sep_69_sep_0: X
v_sep_map_1033_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1030_sep_54_sep_1: X
v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0: X
......
v_sep_fail_1281_sep_83_sep_0: X
v_sep_map_1033_sep_66_sep_0: X
v_sep_map_1033_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1033_sep_69_sep_0: X
v_sep_map_1033_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1030_sep_54_sep_1: X
v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0: X
...........
v_sep_fail_1281_sep_83_sep_0: X
v_sep_map_1033_sep_66_sep_0: X
v_sep_map_1033_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1033_sep_69_sep_0: X
v_sep_map_1033_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1030_sep_54_sep_1: X
v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0: X
.............
v_sep_fail_1281_sep_83_sep_0: X
v_sep_map_1033_sep_66_sep_0: X
v_sep_map_1033_sep_66_sep_1_sep_78_sep_0: X
v_sep_map_1033_sep_69_sep_0: X
v_sep_map_1033_sep_69_sep_1_sep_72_sep_0: X
v_sep_zip_1030_sep_54_sep_1: X
v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0: X
...............(0=0) & (v_sep_fail_1281_sep_83_sep_0($420)) -> 1=0.
(($420-1=0) & ($421-$422<>0)) & (v_sep_map_1033_sep_66_sep_1_sep_78_sep_0($423,$421)) & (v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0($422,$422,$423)) -> v_sep_fail_1281_sep_83_sep_0($420).
(($424<>0) & (-$424+$425+1=0) & ($426-$427+1=0)) & (v_sep_map_1033_sep_69_sep_1_sep_72_sep_0($425,$426)) & (v_sep_map_1033_sep_66_sep_0($424)) -> v_sep_map_1033_sep_66_sep_1_sep_78_sep_0($424,$427).
(($428=0) & (-$428+$429=0)) & (v_sep_map_1033_sep_69_sep_0($428)) -> v_sep_map_1033_sep_69_sep_1_sep_72_sep_0($428,$429).
(($428+1<>0) & (-$428+$430-1=0)) & (v_sep_map_1033_sep_66_sep_0($430)) -> v_sep_map_1033_sep_69_sep_0($428).
(0=0) & (v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0($431,$431,$424)) -> v_sep_map_1033_sep_66_sep_0($424).
(($432=0) & ($433=0) & (-$432+$434=0)) & (v_sep_zip_1030_sep_54_sep_1($432,$433)) -> v_sep_zip_1030_sep_54_sep_2_sep_62_sep_0($432,$433,$434).
-$432+$433=0 -> v_sep_zip_1030_sep_54_sep_1($432,$433).

           (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                    <zip_1030@54:1>:int)
        solution:
          P[<fail_1281@83:0>]($435:bool) = false
          P[<map_1033@66:0>]($455:int) = ($455 <= 0)
          P[<<map_1033@66:1>@78:0>]($438:int,$440:int) = (3 <= $438)
          P[<map_1033@69:0>]($458:int) = ((1 + $458) <= 0)
          P[<<map_1033@69:1>@72:0>]($450:int,$452:int) = (1 <= (2 * $450))
          P[<zip_1030@54:1>]($461:int,$463:int) = true
          P[<<zip_1030@54:2>@62:0>]($443:int,$445:int,$447:int) = ($447 <= 0)
        
      end HcSolver.solve_ub(49561)[4] (0.040994 sec.)
      begin HcSolver.check_validity(49917)[4]
        input:
          P[<fail_1281@83:0>](<fail_1281@83:0>:bool)|- bot
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1272@80:0>:int,<f_main_1272@80:0>:int,<f_main_1272@80:1>:int),
          P[<<map_1033@66:1>@78:0>](<f_main_1272@80:1>:int,<f_main_1272@80:3>:int),
          ((<f_main_1272@80:3> <> <f_main_1272@80:0>) && <fail_1281@83:0>)
          |- P[<fail_1281@83:0>](<fail_1281@83:0>:bool)
          
          P[<map_1033@66:0>](<map_1033@66:0>:int),
          P[<<map_1033@69:1>@72:0>]((-1 + <map_1033@66:0>):int,(-1 + <<map_1033@66:1>@78:0>):int),
          (<map_1033@66:0> <> 0) |- P[<<map_1033@66:1>@78:0>](<map_1033@66:0>:int,
                                                              <<map_1033@66:1>@78:0>:int)
          
          P[<map_1033@69:0>](<map_1033@69:0>:int),
          ((<map_1033@69:0> = 0) && (<<map_1033@69:1>@72:0> = <map_1033@69:0>))
          |- P[<<map_1033@69:1>@72:0>](<map_1033@69:0>:int,<<map_1033@69:1>@72:0>:int)
          
          P[<map_1033@66:0>]((1 + <map_1033@69:0>):int), ((1 + <map_1033@69:0>) <> 0)
          |- P[<map_1033@69:0>](<map_1033@69:0>:int)
          
          P[<<zip_1030@54:2>@62:0>](<f_main_1271@64:0>:int,<f_main_1271@64:0>:int,<map_1033@66:0>:int)|- P[<map_1033@66:0>](
          <map_1033@66:0>:int)
          
          P[<zip_1030@54:1>](<zip_1030@54:0>:int,<zip_1030@54:1>:int),
          ((<zip_1030@54:0> = 0) && ((<zip_1030@54:1> = 0) && (<<zip_1030@54:2>@62:0> = <zip_1030@54:0>)))
          |- P[<<zip_1030@54:2>@62:0>](<zip_1030@54:0>:int,<zip_1030@54:1>:int,
                                       <<zip_1030@54:2>@62:0>:int)
          
           (<zip_1030@54:1> = <zip_1030@54:0>) |- P[<zip_1030@54:1>](<zip_1030@54:0>:int,
                                                                    <zip_1030@54:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(49917)[4] (0.004999 sec.)
      solution:
        P[<fail_1281@83:0>]($435:bool) = false
        P[<map_1033@66:0>]($455:int) = ($455 <= 0)
        P[<<map_1033@66:1>@78:0>]($438:int,$440:int) = (3 <= $438)
        P[<map_1033@69:0>]($458:int) = ((1 + $458) <= 0)
        P[<<map_1033@69:1>@72:0>]($450:int,$452:int) = (1 <= (2 * $450))
        P[<zip_1030@54:1>]($461:int,$463:int) = true
        P[<<zip_1030@54:2>@62:0>]($443:int,$445:int,$447:int) = ($447 <= 0)
    end YhornInterface.solve(49560)[3] (0.045993 sec.)
    
  end RefTypeInfer.infer_etrs(21935)[2] (0.227965 sec.)
  refinement types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | (v3 <= 0)} -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: v1:{v1:int | (v1 <= 0)} -> (v2:{v2:int | false} -> X) -> X
    map_1033: v1:{v1:int | ((2 + v1) <= 0)} -> (v2:{v2:int | false} -> X) -> X
    f_map_1270: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_zip_1277: var219:bool -> var218:int -> var217:int -> (var216:int -> X) -> X
    f_1274: var222:int -> var221:unit -> X
    f_zip_1267: var226:int -> var225:int -> var224:unit -> X
    f_zip_1268: var230:int -> var229:int -> var228:unit -> X
    f_zip_1269: var236:int -> var235:int -> (var234:int -> X) -> var232:int -> X
    fail_1279: var240:bool -> (var239:unit -> X) -> X
    fail_1280: var244:bool -> (var243:unit -> X) -> X
  abstraction types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:int[v3 -> (v3 <= 0)] -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: var245:int[var245 -> (var245 <= 0),
                         var245 -> ((2 + var245) <= 0)] -> (var246:int -> X) -> X
    f_map_1270: v1:int -> (v2:int -> X) -> v4:int -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:bool -> (v2:unit -> X) -> X
    br_zip_1277: var219:bool -> var218:int -> var217:int -> (var216:int -> X) -> X
    f_1274: var222:int -> var221:unit -> X
    f_zip_1267: var226:int -> var225:int -> var224:unit -> X
    f_zip_1268: var230:int -> var229:int -> var228:unit -> X
    f_zip_1269: var236:int -> var235:int -> (var234:int -> X) -> var232:int -> X
    fail_1279: var240:bool -> (var239:unit -> X) -> X
    fail_1280: var244:bool -> (var243:unit -> X) -> X
  
end AbsTypeInfer.refine(21934)[1] (0.230965 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1266
  main_1266 -> (rand_int f_1273)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when b_1276 -> (k_zip_1102 x_1031)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when (not b_1276) -> (fail_1279 true (f_zip_1267 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when b_1278 -> (fail_1280 true (f_zip_1268 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when (not b_1278) ->
      (zip_1030 (x_1031 - 1) (y_1032 - 1) (f_zip_1269 x_1031 y_1032 k_zip_1102))
  f_1273 x_1241 -> (main_1035 x_1241 (f_1274 x_1241))
  f_1274 x_1241 x_1238 -> end
  f_main_1271 n_1036 k_main_1199 x_1224 -> (map_1033 x_1224 (f_main_1272 n_1036 x_1224 k_main_1199))
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (x_1202 = n_1036) -> (k_main_1199 ())
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (not (x_1202 = n_1036)) -> (fail_1281 true k_main_1199)
  f_map_1270 x_1034 k_map_1167 x_1171 -> (k_map_1167 (1 + x_1171))
  f_zip_1267 x_1031 y_1032 x_1105 -> _|_
  f_zip_1268 x_1031 y_1032 x_1121 -> _|_
  f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 -> (k_zip_1102 (1 + x_1134))
  fail_1279 b k -> {fail} => (k ())
  fail_1280 b k -> {fail} => (k ())
  fail_1281 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1199 -> (zip_1030 n_1036 n_1036 (f_main_1271 n_1036 k_main_1199))
  map_1033 x_1034 k_map_1167 when (x_1034 = 0) -> (k_map_1167 x_1034)
  map_1033 x_1034 k_map_1167 when (not (x_1034 = 0)) -> (map_1033 (x_1034 - 1) (f_map_1270 x_1034 k_map_1167))
  zip_1030 x_1031 y_1032 k_zip_1102 when (x_1031 = 0) -> (br_zip_1275 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
  zip_1030 x_1031 y_1032 k_zip_1102 when (not (x_1031 = 0)) -> (br_zip_1277 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
Types:
  main_1266 : X
  fail_1279 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1280 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1281 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1033 : (x_1:int[x_1 <= -2; x_1 <= 0] -> (x_3:int[x_3 = 0] -> X) -> X)
  zip_1030 : (x_1:int -> x_2:int[x_1 = x_2] -> (x_4:int[x_4 <= 0; x_1 = 0] -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1266 ... --> 
  f_1273 ... --> 
  main_1035 ... --> 
  zip_1030 [2/2] ... --> 
  br_zip_1277 [2/2] ... --> 
  zip_1030 [1/2] ... --> 
  br_zip_1275 [1/2] ... --> 
  f_zip_1269 ... --> 
  f_main_1271 ... --> 
  map_1033 [1/2] ... --> 
  f_main_1272 [2/2] ... --> 
  fail_1281 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(51338)[1]
  program:
    main_1266  | true = ((Random.int 0) f_1273)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | b_1276 = (k_zip_1102 x_1031)
    br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 | (not b_1276) = (fail_1279 true
                                                                    (f_zip_1267 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | b_1278 = (fail_1280 true
                                                                    (f_zip_1268 x_1031
                                                                    y_1032))
    br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 | (not b_1278) = (zip_1030
                                                                    (
                                                                    x_1031 - 1)
                                                                    (
                                                                    y_1032 - 1)
                                                                    (
                                                                    f_zip_1269 x_1031
                                                                    y_1032
                                                                    k_zip_1102))
    f_1273 x_1241 | true = (main_1035 x_1241
                                      (f_1274 x_1241))
    f_1274 x_1241 x_1238 | true = end
    f_main_1271 n_1036 k_main_1199 x_1224 | true = (map_1033 x_1224
                                                             (f_main_1272 n_1036
                                                                    x_1224
                                                                    k_main_1199))
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (x_1202 = n_1036) = (
    k_main_1199 ())
    f_main_1272 n_1036 x_1224 k_main_1199 x_1202 | (not (x_1202 = n_1036)) = (
    fail_1281 true
              k_main_1199)
    f_map_1270 x_1034 k_map_1167 x_1171 | true = (k_map_1167 (1 + x_1171))
    f_zip_1267 x_1031 y_1032 x_1105 | true = bot
    f_zip_1268 x_1031 y_1032 x_1121 | true = bot
    f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 | true = (k_zip_1102 (
                                                                    1 + x_1134))
    fail_1279 b k | true = (fail ())
    fail_1280 b k | true = (fail ())
    fail_1281 b k | true = (fail ())
    main_1035 n_1036 k_main_1199 | true = (zip_1030 n_1036
                                                    n_1036
                                                    (f_main_1271 n_1036
                                                                 k_main_1199))
    map_1033 x_1034 k_map_1167 | (x_1034 = 0) = (k_map_1167 x_1034)
    map_1033 x_1034 k_map_1167 | (not (x_1034 = 0)) = (map_1033 (x_1034 - 1)
                                                                (f_map_1270 x_1034
                                                                    k_map_1167))
    zip_1030 x_1031 y_1032 k_zip_1102 | (x_1031 = 0) = (br_zip_1275 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    zip_1030 x_1031 y_1032 k_zip_1102 | (not (x_1031 = 0)) = (br_zip_1277 (
                                                                    y_1032 = 0)
                                                                    x_1031
                                                                    y_1032
                                                                    k_zip_1102)
    main_1266:X
    br_zip_1275:bool -> int -> int -> (int -> X) -> X
    br_zip_1277:bool -> int -> int -> (int -> X) -> X
    f_1273:int -> X
    f_1274:int -> unit -> X
    f_main_1271:int -> (unit -> X) -> int -> X
    f_main_1272:int -> int -> (unit -> X) -> int -> X
    f_map_1270:int -> (int -> X) -> int -> X
    f_zip_1267:int -> int -> unit -> X
    f_zip_1268:int -> int -> unit -> X
    f_zip_1269:int -> int -> (int -> X) -> int -> X
    fail_1279:bool -> (unit -> X) -> X
    fail_1280:bool -> (unit -> X) -> X
    fail_1281:bool -> (unit -> X) -> X
    main_1035:int -> (unit -> X) -> X
    map_1033:int -> (int -> X) -> X
    zip_1030:int -> int -> (int -> X) -> X
  inlined functions: br_zip_1275,br_zip_1277,f_1273,f_1274,f_main_1271,f_main_1272,f_map_1270,f_zip_1267,f_zip_1268,f_zip_1269,main_1035
  counterexample: 0:0:0:1:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1273@89:0> = var249)
     [true.(<main_1035@91:0> = <f_1273@89:0>)
      [true.((<zip_1030@93:0> = <main_1035@91:0>) && (<zip_1030@93:1> = <main_1035@91:0>))
       [(not (<zip_1030@93:0> = 0)).
        ((<br_zip_1277@96:0> = (<zip_1030@93:1> = 0)) &&
         ((<br_zip_1277@96:1> = <zip_1030@93:0>) && (<br_zip_1277@96:2> = <zip_1030@93:1>)))
        [(not <br_zip_1277@96:0>).
         ((<zip_1030@99:0> = (<br_zip_1277@96:1> - 1)) && (<zip_1030@99:1> = (<br_zip_1277@96:2> - 1)))
         [(<zip_1030@99:0> = 0).
          ((<br_zip_1275@102:0> = (<zip_1030@99:1> = 0)) &&
           ((<br_zip_1275@102:1> = <zip_1030@99:0>) && (<br_zip_1275@102:2> = <zip_1030@99:1>)))
          [<br_zip_1275@102:0>.(<<br_zip_1275@102:3>@105:0> = <br_zip_1275@102:1>)
           [true.(<<zip_1030@99:2>@107:0> = <<br_zip_1275@102:3>@105:0>)
            [true.
             ((<f_zip_1269@109:0> = <br_zip_1277@96:1>) &&
              ((<f_zip_1269@109:1> = <br_zip_1277@96:2>) && (<f_zip_1269@109:3> = <<zip_1030@99:2>@107:0>)))
             [true.(<<f_zip_1269@109:2>@111:0> = (1 + <f_zip_1269@109:3>))
              [true.(<<br_zip_1277@96:3>@113:0> = <<f_zip_1269@109:2>@111:0>)
               [true.(<<zip_1030@93:2>@115:0> = <<br_zip_1277@96:3>@113:0>)
                [true.((<f_main_1271@117:0> = <main_1035@91:0>) && (<f_main_1271@117:2> = <<zip_1030@93:2>@115:0>))
                 [true.(<map_1033@119:0> = <f_main_1271@117:2>)
                  [(<map_1033@119:0> = 0).(<<map_1033@119:1>@122:0> = <map_1033@119:0>)
                   [true.
                    ((<f_main_1272@124:0> = <f_main_1271@117:0>) &&
                     ((<f_main_1272@124:1> = <f_main_1271@117:2>) && (<f_main_1272@124:3> = <<map_1033@119:1>@122:0>)))
                    [(not (<f_main_1272@124:3> = <f_main_1272@124:0>)).(<fail_1281@127:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(51339)[2]
    horn clauses:
      P[<fail_1281@127:0>](<fail_1281@127:0>:bool)|- bot
      
      P[<f_main_1272@124:3>](<f_main_1272@124:0>:int,<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
      ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && <fail_1281@127:0>)
      |- P[<fail_1281@127:0>](<fail_1281@127:0>:bool)
      
      P[<f_main_1271@117:2>](<f_main_1272@124:0>:int,<f_main_1272@124:1>:int),
      P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int)|- P[<f_main_1272@124:3>](
      <f_main_1272@124:0>:int,<f_main_1272@124:1>:int,<f_main_1272@124:3>:int)
      
      P[<map_1033@119:0>](<map_1033@119:0>:int),
      ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
      |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
      
      P[<f_main_1271@117:2>](<f_main_1271@117:0>:int,<map_1033@119:0>:int)|- P[<map_1033@119:0>](<map_1033@119:0>:int)
      
      P[<main_1035@91:0>](<f_main_1271@117:0>:int),
      P[<<zip_1030@93:2>@115:0>](<f_main_1271@117:0>:int,<f_main_1271@117:0>:int,<f_main_1271@117:2>:int)|- P[<f_main_1271@117:2>](
      <f_main_1271@117:0>:int,<f_main_1271@117:2>:int)
      
      P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
      P[<<br_zip_1277@96:3>@113:0>]((<zip_1030@93:1> = 0):bool,<zip_1030@93:0>:int,<zip_1030@93:1>:int,<<zip_1030@93:2>@115:0>:int),
      (<zip_1030@93:0> <> 0)
      |- P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,
                                    <<zip_1030@93:2>@115:0>:int)
      
      P[<br_zip_1277@96:2>](<br_zip_1277@96:0>:bool,<br_zip_1277@96:1>:int,<br_zip_1277@96:2>:int),
      P[<<f_zip_1269@109:2>@111:0>](<br_zip_1277@96:1>:int,<br_zip_1277@96:2>:int,<<br_zip_1277@96:3>@113:0>:int),
      (not <br_zip_1277@96:0>)
      |- P[<<br_zip_1277@96:3>@113:0>](<br_zip_1277@96:0>:bool,<br_zip_1277@96:1>:int,
                                       <br_zip_1277@96:2>:int,<<br_zip_1277@96:3>@113:0>:int)
      
      P[<f_zip_1269@109:3>](<f_zip_1269@109:0>:int,<f_zip_1269@109:1>:int,(
                            -1 + <<f_zip_1269@109:2>@111:0>):int)|- P[<<f_zip_1269@109:2>@111:0>](
      <f_zip_1269@109:0>:int,<f_zip_1269@109:1>:int,<<f_zip_1269@109:2>@111:0>:int)
      
      P[<br_zip_1277@96:2>](false:bool,<f_zip_1269@109:0>:int,<f_zip_1269@109:1>:int),
      P[<<zip_1030@99:2>@107:0>]((-1 + <f_zip_1269@109:0>):int,(-1 + <f_zip_1269@109:1>):int,<f_zip_1269@109:3>:int)|- P[<f_zip_1269@109:3>](
      <f_zip_1269@109:0>:int,<f_zip_1269@109:1>:int,<f_zip_1269@109:3>:int)
      
      P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
      P[<<br_zip_1275@102:3>@105:0>]((<zip_1030@99:1> = 0):bool,<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int),
      (<zip_1030@99:0> = 0)
      |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                    <<zip_1030@99:2>@107:0>:int)
      
      P[<br_zip_1275@102:2>](<br_zip_1275@102:0>:bool,<br_zip_1275@102:1>:int,<br_zip_1275@102:2>:int),
      ((<<br_zip_1275@102:3>@105:0> = <br_zip_1275@102:1>) && <br_zip_1275@102:0>)
      |- P[<<br_zip_1275@102:3>@105:0>](<br_zip_1275@102:0>:bool,<br_zip_1275@102:1>:int,
                                        <br_zip_1275@102:2>:int,<<br_zip_1275@102:3>@105:0>:int)
      
      P[<zip_1030@99:1>](<br_zip_1275@102:1>:int,<br_zip_1275@102:2>:int),
      ((<br_zip_1275@102:1> = 0) && (<br_zip_1275@102:0> = (<br_zip_1275@102:2> = 0)))
      |- P[<br_zip_1275@102:2>](<br_zip_1275@102:0>:bool,<br_zip_1275@102:1>:int,
                                <br_zip_1275@102:2>:int)
      
      P[<br_zip_1277@96:2>](false:bool,(1 + <zip_1030@99:0>):int,(1 + <zip_1030@99:1>):int)|- P[<zip_1030@99:1>](
      <zip_1030@99:0>:int,<zip_1030@99:1>:int)
      
      P[<zip_1030@93:1>](<br_zip_1277@96:1>:int,<br_zip_1277@96:2>:int),
      ((<br_zip_1277@96:1> <> 0) && (<br_zip_1277@96:0> = (<br_zip_1277@96:2> = 0)))
      |- P[<br_zip_1277@96:2>](<br_zip_1277@96:0>:bool,<br_zip_1277@96:1>:int,
                               <br_zip_1277@96:2>:int)
      
      P[<main_1035@91:0>](<zip_1030@93:1>:int), (<zip_1030@93:1> = <zip_1030@93:0>)
      |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int)
      
      P[<f_1273@89:0>](<main_1035@91:0>:int)|- P[<main_1035@91:0>](<main_1035@91:0>:int)
      
      |- P[<f_1273@89:0>](<f_1273@89:0>:int)
    call trees:
      <main_1266@86>
        <f_1273@89>
          <main_1035@91>
            <zip_1030@93>
              <br_zip_1277@96>
                <zip_1030@99>
                  <br_zip_1275@102>
                  </<br_zip_1275@102:3>@105>
                </<zip_1030@99:2>@107>
                <f_zip_1269@109>
                </<f_zip_1269@109:2>@111>
              </<br_zip_1277@96:3>@113>
            </<zip_1030@93:2>@115>
            <f_main_1271@117>
              <map_1033@119>
              </<map_1033@119:1>@122>
              <f_main_1272@124>
                <fail_1281@127>
    inlined horn clauses:
      P[<fail_1281@127:0>](<fail_1281@127:0>:bool)|- bot
      
      P[<<zip_1030@93:2>@115:0>](<f_main_1272@124:0>:int,<f_main_1272@124:0>:int,<f_main_1272@124:1>:int),
      P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
      ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && <fail_1281@127:0>)
      |- P[<fail_1281@127:0>](<fail_1281@127:0>:bool)
      
      P[<map_1033@119:0>](<map_1033@119:0>:int),
      ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
      |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
      
      P[<<zip_1030@93:2>@115:0>](<f_main_1271@117:0>:int,<f_main_1271@117:0>:int,<map_1033@119:0>:int)|- P[<map_1033@119:0>](
      <map_1033@119:0>:int)
      
      P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
      P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                 -1 + <<zip_1030@93:2>@115:0>):int), (
      (<zip_1030@93:0> <> 0) && (<zip_1030@93:1> <> 0))
      |- P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,
                                    <<zip_1030@93:2>@115:0>:int)
      
      P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
      ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
      |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                    <<zip_1030@99:2>@107:0>:int)
      
      P[<zip_1030@93:1>]((1 + <zip_1030@99:0>):int,(1 + <zip_1030@99:1>):int),
      (((1 + <zip_1030@99:0>) <> 0) && ((1 + <zip_1030@99:1>) <> 0))
      |- P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int)
      
       (<zip_1030@93:1> = <zip_1030@93:0>) |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,
                                                                 <zip_1030@93:1>:int)
    begin ParamSubstInfer.infer(54459)[3]
      
    end ParamSubstInfer.infer(54459)[3] (0.061991 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(54461)[3]
      
    end RefTypeInfer.elim_coeffs(54461)[3] (0.002000 sec.)
    begin GenHcSolver.solve(54884)[3]
      Horn clauses:
        P[<fail_1281@127:0>](<fail_1281@127:0>:bool)|- bot
        
        P[<<zip_1030@93:2>@115:0>](<f_main_1272@124:0>:int,<f_main_1272@124:0>:int,<f_main_1272@124:1>:int),
        P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
        ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && <fail_1281@127:0>)
        |- P[<fail_1281@127:0>](<fail_1281@127:0>:bool)
        
        P[<map_1033@119:0>](<map_1033@119:0>:int),
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
        
        P[<<zip_1030@93:2>@115:0>](<f_main_1271@117:0>:int,<f_main_1271@117:0>:int,<map_1033@119:0>:int)|- P[<map_1033@119:0>](
        <map_1033@119:0>:int)
        
        P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
        P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                   -1 + <<zip_1030@93:2>@115:0>):int),
        ((<zip_1030@93:0> <> 0) && (<zip_1030@93:1> <> 0))
        |- P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,
                                      <<zip_1030@93:2>@115:0>:int)
        
        P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
        ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
        |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                      <<zip_1030@99:2>@107:0>:int)
        
        P[<zip_1030@93:1>]((1 + <zip_1030@99:0>):int,(1 + <zip_1030@99:1>):int),
        (((1 + <zip_1030@99:0>) <> 0) && ((1 + <zip_1030@99:1>) <> 0))
        |- P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int)
        
         (<zip_1030@93:1> = <zip_1030@93:0>) |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,
                                                                   <zip_1030@93:1>:int)
      lower bounds:
        P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int) = (<zip_1030@93:1> = <zip_1030@93:0>)
        P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int) =
        (((1 + <zip_1030@99:0>) <> 0) && (((1 + <zip_1030@99:1>) <> 0) && (<zip_1030@99:1> = <zip_1030@99:0>)))
        P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
        ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<zip_1030@99:1> = <<zip_1030@99:2>@107:0>)))
        P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,<<zip_1030@93:2>@115:0>:int) =
        ((<zip_1030@93:0> = 1) && ((<zip_1030@93:1> = 1) && (<zip_1030@93:1> = <<zip_1030@93:2>@115:0>)))
        P[<map_1033@119:0>](<map_1033@119:0>:int) = (<map_1033@119:0> = 1)
        P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int) = false
        P[<fail_1281@127:0>](<fail_1281@127:0>:bool) = false
      upper bounds:
        P[<<zip_1030@93:2>@115:0>](var259:int,var260:int,var261:int) =
        ((var261 <> 0) || ((0 = var259) || (var259 <> var260)))
        P[<<zip_1030@99:2>@107:0>](var253:int,var254:int,var255:int) =
        (((1 + var255) <> 0) || ((0 = (1 + var254)) || (var254 <> var253)))
      begin GenHcSolver.classify_pids(60790)[4]
        output:
          [<<zip_1030@99:2>@107:0>;<<zip_1030@93:2>@115:0>]
      end GenHcSolver.classify_pids(60790)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(60871)[4]
        lb:(((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<zip_1030@99:1> = <<zip_1030@99:2>@107:0>))) ||
            ((<zip_1030@99:0> = 1) && ((<zip_1030@99:1> = 1) && (<zip_1030@99:1> = <<zip_1030@99:2>@107:0>))))
        nub:((not
                (((1 + <<zip_1030@99:2>@107:0>) <> 0) ||
                 ((0 = (1 + <zip_1030@99:1>)) || (<zip_1030@99:1> <> <zip_1030@99:0>)))) ||
             (not ((<<zip_1030@99:2>@107:0> <> 0) || ((0 = <zip_1030@99:0>) || (<zip_1030@99:0> <> <zip_1030@99:1>)))))
        lb':(((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<zip_1030@99:1> = <<zip_1030@99:2>@107:0>))) ||
             ((<zip_1030@99:0> = 1) && ((<zip_1030@99:1> = 1) && (<zip_1030@99:1> = <<zip_1030@99:2>@107:0>))))
        nub':((not
                 (((1 + <<zip_1030@99:2>@107:0>) <> 0) ||
                  ((0 = (1 + <zip_1030@99:1>)) || (<zip_1030@99:1> <> <zip_1030@99:0>)))) ||
              (not ((<<zip_1030@99:2>@107:0> <> 0) || ((0 = <zip_1030@99:0>) || (<zip_1030@99:0> <> <zip_1030@99:1>)))))
        begin InterpProver.interpolate(60872)[5]
          begin InterpProver.interpolate_fresh(60873)[6]
            begin InterpProver.interpolate_log(60874)[7]
              input1: (((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<zip_1030@99:1> = <<zip_1030@99:2>@107:0>))) ||
                       ((<zip_1030@99:0> = 1) && ((<zip_1030@99:1> = 1) && (<zip_1030@99:1> = <<zip_1030@99:2>@107:0>))))
              input2: ((not
                          (((1 + <<zip_1030@99:2>@107:0>) <> 0) ||
                           ((0 = (1 + <zip_1030@99:1>)) || (<zip_1030@99:1> <> <zip_1030@99:0>)))) ||
                       (not
                          ((<<zip_1030@99:2>@107:0> <> 0) ||
                           ((0 = <zip_1030@99:0>) || (<zip_1030@99:0> <> <zip_1030@99:1>)))))
              begin InterpProver.interpolate_check(60875)[8]
                begin InterpProver.interpolate_simplify(60876)[9]
                  begin InterpProver.interpolate_quick(61098)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(61107)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(61108)[12]
                        begin CsisatInterface.interpolate_csisat_log(61109)[13]
                          input1: (((0 = v_sep_zip_1030_sep_99_sep_0 & 0 = v_sep_zip_1030_sep_99_sep_1) | (1 = v_sep_zip_1030_sep_99_sep_0 & 1 = v_sep_zip_1030_sep_99_sep_1)) & v_sep_zip_1030_sep_99_sep_1 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0)
                          input2: ((not 0 = v_sep_zip_1030_sep_99_sep_0 & 0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 & v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_1) | (not 0 = (1 + v_sep_zip_1030_sep_99_sep_1) & -1 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 & v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_1))
                          begin CsisatInterface.interpolate_csisat_raw(61110)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(61110)[14] (0.002000 sec.)
                          output: (((not 0 = v_sep_zip_1030_sep_99_sep_0 & v_sep_zip_1030_sep_99_sep_1 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0) | 0 = v_sep_zip_1030_sep_99_sep_0) & (0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 | -1*v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 <= -1))
                          
                        end CsisatInterface.interpolate_csisat_log(61109)[13] (0.002000 sec.)
                        after simplification: (((not 0 = v_sep_zip_1030_sep_99_sep_0 & v_sep_zip_1030_sep_99_sep_1 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0) | 0 = v_sep_zip_1030_sep_99_sep_0) & (0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 | -1*v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 <= -1))
                        after dnf conversion: ((not 0 = v_sep_zip_1030_sep_99_sep_0 & v_sep_zip_1030_sep_99_sep_1 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 & 0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0) | (not 0 = v_sep_zip_1030_sep_99_sep_0 & v_sep_zip_1030_sep_99_sep_1 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 & -1*v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 <= -1) | (0 = v_sep_zip_1030_sep_99_sep_0 & 0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0) | (0 = v_sep_zip_1030_sep_99_sep_0 & -1*v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 <= -1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(61108)[12] (0.002000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(61107)[11] (0.002000 sec.)
                    
                  end InterpProver.interpolate_quick(61098)[10] (0.002000 sec.)
                  begin minimizing # of disjunctions(61191)[10]
                    input: (((<<zip_1030@99:2>@107:0> = 0) &&
                             ((0 <> <zip_1030@99:0>) && (<zip_1030@99:1> = <<zip_1030@99:2>@107:0>))) ||
                            (((0 <> <zip_1030@99:0>) &&
                              ((<zip_1030@99:1> = <<zip_1030@99:2>@107:0>) && (1 <= <<zip_1030@99:2>@107:0>))) ||
                             (((<zip_1030@99:0> = 0) && (<<zip_1030@99:2>@107:0> = 0)) ||
                              ((<zip_1030@99:0> = 0) && (<<zip_1030@99:2>@107:0> >= 1)))))
                    output: (((<zip_1030@99:0> = 0) && (<<zip_1030@99:2>@107:0> = 0)) ||
                             ((0 <> <zip_1030@99:0>) &&
                              ((<zip_1030@99:1> = <<zip_1030@99:2>@107:0>) && (1 <= <<zip_1030@99:2>@107:0>))))
                  end minimizing # of disjunctions(61191)[10] (0.001000 sec.)
                  begin minimizing # of conjunctions(61382)[10]
                    input: ((<zip_1030@99:0> = 0) && (<<zip_1030@99:2>@107:0> = 0))
                    output: ((<<zip_1030@99:2>@107:0> = 0) && (<zip_1030@99:0> = 0))
                  end minimizing # of conjunctions(61382)[10] (0.000000 sec.)
                  begin minimizing # of conjunctions(61527)[10]
                    input: ((0 <> <zip_1030@99:0>) &&
                            ((<zip_1030@99:1> = <<zip_1030@99:2>@107:0>) && (1 <= <<zip_1030@99:2>@107:0>)))
                    output: (1 <= <<zip_1030@99:2>@107:0>)
                  end minimizing # of conjunctions(61527)[10] (0.001999 sec.)
                  
                end InterpProver.interpolate_simplify(60876)[9] (0.007998 sec.)
                
              end InterpProver.interpolate_check(60875)[8] (0.007998 sec.)
              output: (((<<zip_1030@99:2>@107:0> = 0) && (<zip_1030@99:0> = 0)) || (1 <= <<zip_1030@99:2>@107:0>))
            end InterpProver.interpolate_log(60874)[7] (0.007998 sec.)
            
          end InterpProver.interpolate_fresh(60873)[6] (0.007998 sec.)
          
        end InterpProver.interpolate(60872)[5] (0.007998 sec.)
        output:
          P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
          (((<<zip_1030@99:2>@107:0> = 0) && (<zip_1030@99:0> = 0)) || (1 <= <<zip_1030@99:2>@107:0>))
          P[<<zip_1030@93:2>@115:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
          (((<<zip_1030@99:2>@107:0> = 0) && (<zip_1030@99:0> = 0)) || (1 <= <<zip_1030@99:2>@107:0>))
      end ApronInterface.convex_hull_interpolate(60871)[4] (0.007998 sec.)
      Horn clauses:
        P[<fail_1281@127:0>](<fail_1281@127:0>:bool)|- bot
        
        P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
        ((<f_main_1272@124:3> <> <f_main_1272@124:0>) &&
         (<fail_1281@127:0> && ((1 <= <f_main_1272@124:1>) || ((<f_main_1272@124:1> = 0) && (<f_main_1272@124:0> = 0)))))
        |- P[<fail_1281@127:0>](<fail_1281@127:0>:bool)
        
        P[<map_1033@119:0>](<map_1033@119:0>:int),
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
        
         (0 <= <map_1033@119:0>) |- P[<map_1033@119:0>](<map_1033@119:0>:int)
        
        P[<zip_1030@93:1>]((1 + <zip_1030@99:0>):int,(1 + <zip_1030@99:1>):int),
        (((1 + <zip_1030@99:0>) <> 0) && ((1 + <zip_1030@99:1>) <> 0))
        |- P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int)
        
         (<zip_1030@93:1> = <zip_1030@93:0>) |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,
                                                                   <zip_1030@93:1>:int)
      lower bounds:
        P[<map_1033@119:0>](<map_1033@119:0>:int) = (0 <= <map_1033@119:0>)
        P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int) = (<zip_1030@93:1> = <zip_1030@93:0>)
        P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int) =
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int) =
        (((1 + <zip_1030@99:0>) <> 0) && (((1 + <zip_1030@99:1>) <> 0) && (<zip_1030@99:1> = <zip_1030@99:0>)))
        P[<fail_1281@127:0>](<fail_1281@127:0>:bool) = false
      upper bounds:
        P[<zip_1030@99:1>](var264:int,var265:int) = true
        P[<zip_1030@93:1>](var262:int,var263:int) = true
      begin GenHcSolver.classify_pids(68751)[4]
        output:
          [<zip_1030@93:1>;<zip_1030@99:1>]
      end GenHcSolver.classify_pids(68751)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(68762)[4]
        lb:((<zip_1030@93:1> = <zip_1030@93:0>) ||
            (((1 + <zip_1030@93:0>) <> 0) && (((1 + <zip_1030@93:1>) <> 0) && (<zip_1030@93:1> = <zip_1030@93:0>))))
        nub:false
        lb':((<zip_1030@93:1> = <zip_1030@93:0>) ||
             (((1 + <zip_1030@93:0>) <> 0) && (((1 + <zip_1030@93:1>) <> 0) && (<zip_1030@93:1> = <zip_1030@93:0>))))
        nub':false
        begin InterpProver.interpolate(68763)[5]
          begin InterpProver.interpolate_fresh(68764)[6]
            begin InterpProver.interpolate_log(68765)[7]
              input1: ((<zip_1030@93:1> = <zip_1030@93:0>) ||
                       (((1 + <zip_1030@93:0>) <> 0) &&
                        (((1 + <zip_1030@93:1>) <> 0) && (<zip_1030@93:1> = <zip_1030@93:0>))))
              input2: false
              begin InterpProver.interpolate_check(68766)[8]
                begin InterpProver.interpolate_simplify(68767)[9]
                  begin InterpProver.interpolate_quick(68839)[10]
                    
                  end InterpProver.interpolate_quick(68839)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(68767)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(68766)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(68765)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(68764)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(68763)[5] (0.000000 sec.)
        output:
          P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int) = true
          P[<zip_1030@99:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int) = true
      end ApronInterface.convex_hull_interpolate(68762)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1281@127:0>](<fail_1281@127:0>:bool)|- bot
        
        P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
        ((<f_main_1272@124:3> <> <f_main_1272@124:0>) &&
         (<fail_1281@127:0> && ((1 <= <f_main_1272@124:1>) || ((<f_main_1272@124:1> = 0) && (<f_main_1272@124:0> = 0)))))
        |- P[<fail_1281@127:0>](<fail_1281@127:0>:bool)
        
        P[<map_1033@119:0>](<map_1033@119:0>:int),
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
        
         (0 <= <map_1033@119:0>) |- P[<map_1033@119:0>](<map_1033@119:0>:int)
      lower bounds:
        P[<map_1033@119:0>](<map_1033@119:0>:int) = (0 <= <map_1033@119:0>)
        P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int) =
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        P[<fail_1281@127:0>](<fail_1281@127:0>:bool) = false
      upper bounds:
        P[<fail_1281@127:0>](var267:bool) = true
      begin GenHcSolver.classify_pids(71800)[4]
        output:
          [<fail_1281@127:0>]
      end GenHcSolver.classify_pids(71800)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(71803)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(71804)[5]
          begin InterpProver.interpolate_fresh(71805)[6]
            begin InterpProver.interpolate_log(71806)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(71807)[8]
                begin InterpProver.interpolate_simplify(71808)[9]
                  begin InterpProver.interpolate_quick(71821)[10]
                    
                  end InterpProver.interpolate_quick(71821)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(71825)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(71825)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(71808)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(71807)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(71806)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(71805)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(71804)[5] (0.000000 sec.)
        output:
          P[<fail_1281@127:0>](<fail_1281@127:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(71803)[4] (0.000000 sec.)
      Horn clauses:
        P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
        ((<f_main_1272@124:3> <> <f_main_1272@124:0>) &&
         ((1 <= <f_main_1272@124:1>) || ((<f_main_1272@124:1> = 0) && (<f_main_1272@124:0> = 0)))) |- bot
        
        P[<map_1033@119:0>](<map_1033@119:0>:int),
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
        
         (0 <= <map_1033@119:0>) |- P[<map_1033@119:0>](<map_1033@119:0>:int)
      lower bounds:
        P[<map_1033@119:0>](<map_1033@119:0>:int) = (0 <= <map_1033@119:0>)
        P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int) =
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
      upper bounds:
        P[<<map_1033@119:1>@122:0>](var268:int,var269:int) =
        ((var269 = <f_main_1272@124:0>) || ((1 > var268) && ((var268 <> 0) || (<f_main_1272@124:0> <> 0))))
      begin GenHcSolver.classify_pids(74041)[4]
        output:
          [<<map_1033@119:1>@122:0>]
      end GenHcSolver.classify_pids(74041)[4] (0.000000 sec.)
      lb:((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
      nub:(not
             ((<<map_1033@119:1>@122:0> = var271) ||
              ((1 > <map_1033@119:0>) && ((<map_1033@119:0> <> 0) || (var271 <> 0)))))
      begin ApronInterface.convex_hull_interpolate(74044)[4]
        lb:((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        nub:(not
               ((<<map_1033@119:1>@122:0> = var271) ||
                ((1 > <map_1033@119:0>) && ((<map_1033@119:0> <> 0) || (var271 <> 0)))))
        lb':((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        nub':(not
                ((<<map_1033@119:1>@122:0> = var271) ||
                 ((1 > <map_1033@119:0>) && ((<map_1033@119:0> <> 0) || (var271 <> 0)))))
        begin InterpProver.interpolate(74045)[5]
          begin InterpProver.interpolate_fresh(74046)[6]
            begin InterpProver.interpolate_log(74047)[7]
              input1: ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
              input2: (not
                         ((<<map_1033@119:1>@122:0> = var272) ||
                          ((1 > <map_1033@119:0>) && ((<map_1033@119:0> <> 0) || (var272 <> 0)))))
              begin InterpProver.interpolate_check(74048)[8]
                begin InterpProver.interpolate_simplify(74049)[9]
                  begin InterpProver.interpolate_quick(74138)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(74147)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(74148)[12]
                        begin CsisatInterface.interpolate_csisat_log(74149)[13]
                          input1: (0 = v_sep_map_1033_sep_119_sep_0 & v_sep_map_1033_sep_119_sep_0 = v_sep_map_1033_sep_119_sep_1_sep_122_sep_0)
                          input2: (((0 = v_sep_map_1033_sep_119_sep_0 & 0 = v_sep_var272) | 1 <= v_sep_map_1033_sep_119_sep_0) & not v_sep_map_1033_sep_119_sep_1_sep_122_sep_0 = v_sep_var272)
                          begin CsisatInterface.interpolate_csisat_raw(74150)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(74150)[14] (0.001000 sec.)
                          output: (((0 = v_sep_map_1033_sep_119_sep_1_sep_122_sep_0 & 2*v_sep_map_1033_sep_119_sep_0 <= 0) | not 0 = v_sep_map_1033_sep_119_sep_0) & 0 = v_sep_map_1033_sep_119_sep_0)
                          
                        end CsisatInterface.interpolate_csisat_log(74149)[13] (0.002000 sec.)
                        after simplification: (((0 = v_sep_map_1033_sep_119_sep_1_sep_122_sep_0 & 2*v_sep_map_1033_sep_119_sep_0 <= 0) | not 0 = v_sep_map_1033_sep_119_sep_0) & 0 = v_sep_map_1033_sep_119_sep_0)
                        after dnf conversion: ((0 = v_sep_map_1033_sep_119_sep_1_sep_122_sep_0 & 2*v_sep_map_1033_sep_119_sep_0 <= 0 & 0 = v_sep_map_1033_sep_119_sep_0) | (not 0 = v_sep_map_1033_sep_119_sep_0 & 0 = v_sep_map_1033_sep_119_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(74148)[12] (0.002000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(74147)[11] (0.002000 sec.)
                    
                  end InterpProver.interpolate_quick(74138)[10] (0.002000 sec.)
                  begin minimizing # of conjunctions(74169)[10]
                    input: ((<<map_1033@119:1>@122:0> = 0) && (<map_1033@119:0> = 0))
                    output: ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = 0))
                  end minimizing # of conjunctions(74169)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(74049)[9] (0.004000 sec.)
                
              end InterpProver.interpolate_check(74048)[8] (0.004000 sec.)
              output: ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = 0))
            end InterpProver.interpolate_log(74047)[7] (0.004000 sec.)
            
          end InterpProver.interpolate_fresh(74046)[6] (0.004000 sec.)
          
        end InterpProver.interpolate(74045)[5] (0.004000 sec.)
        output:
          P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int) =
          ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = 0))
      end ApronInterface.convex_hull_interpolate(74044)[4] (0.004000 sec.)
      Horn clauses:
         (0 <= <map_1033@119:0>) |- P[<map_1033@119:0>](<map_1033@119:0>:int)
      lower bounds:
        P[<map_1033@119:0>](<map_1033@119:0>:int) = (0 <= <map_1033@119:0>)
      upper bounds:
        P[<map_1033@119:0>](var273:int) = true
      begin GenHcSolver.classify_pids(74725)[4]
        output:
          [<map_1033@119:0>]
      end GenHcSolver.classify_pids(74725)[4] (0.000000 sec.)
      lb:(0 <= <map_1033@119:0>)
      nub:false
      begin ApronInterface.convex_hull_interpolate(74728)[4]
        lb:(0 <= <map_1033@119:0>)
        nub:false
        lb':(0 <= <map_1033@119:0>)
        nub':false
        begin InterpProver.interpolate(74729)[5]
          begin InterpProver.interpolate_fresh(74730)[6]
            begin InterpProver.interpolate_log(74731)[7]
              input1: (0 <= <map_1033@119:0>)
              input2: false
              begin InterpProver.interpolate_check(74732)[8]
                begin InterpProver.interpolate_simplify(74733)[9]
                  begin InterpProver.interpolate_quick(74748)[10]
                    
                  end InterpProver.interpolate_quick(74748)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(74733)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(74732)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(74731)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(74730)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(74729)[5] (0.000000 sec.)
        output:
          P[<map_1033@119:0>](<map_1033@119:0>:int) = true
      end ApronInterface.convex_hull_interpolate(74728)[4] (0.000000 sec.)
      begin HcSolver.check_validity(74815)[4]
        input:
          P[<fail_1281@127:0>](<fail_1281@127:0>:bool)|- bot
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1272@124:0>:int,<f_main_1272@124:0>:int,<f_main_1272@124:1>:int),
          P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
          ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && <fail_1281@127:0>)
          |- P[<fail_1281@127:0>](<fail_1281@127:0>:bool)
          
          P[<map_1033@119:0>](<map_1033@119:0>:int),
          ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
          |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1271@117:0>:int,<f_main_1271@117:0>:int,<map_1033@119:0>:int)|- P[<map_1033@119:0>](
          <map_1033@119:0>:int)
          
          P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
          P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                     -1 + <<zip_1030@93:2>@115:0>):int),
          ((<zip_1030@93:0> <> 0) && (<zip_1030@93:1> <> 0))
          |- P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,
                                        <<zip_1030@93:2>@115:0>:int)
          
          P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
          ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
          |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                        <<zip_1030@99:2>@107:0>:int)
          
          P[<zip_1030@93:1>]((1 + <zip_1030@99:0>):int,(1 + <zip_1030@99:1>):int),
          (((1 + <zip_1030@99:0>) <> 0) && ((1 + <zip_1030@99:1>) <> 0))
          |- P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int)
          
           (<zip_1030@93:1> = <zip_1030@93:0>) |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,
                                                                    <zip_1030@93:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(74815)[4] (0.007999 sec.)
      solution:
        P[<fail_1281@127:0>](<fail_1281@127:0>:bool) = false
        P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int) =
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = 0))
        P[<map_1033@119:0>](<map_1033@119:0>:int) = true
        P[<<zip_1030@93:2>@115:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
        (((<<zip_1030@99:2>@107:0> = 0) && (<zip_1030@99:0> = 0)) || (1 <= <<zip_1030@99:2>@107:0>))
        P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
        (((<<zip_1030@99:2>@107:0> = 0) && (<zip_1030@99:0> = 0)) || (1 <= <<zip_1030@99:2>@107:0>))
        P[<zip_1030@99:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int) = true
        P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int) = true
    end GenHcSolver.solve(54884)[3] (0.112983 sec.)
    begin GenHcSolver.solve(76088)[3]
      Horn clauses:
        P[<fail_1281@127:0>](<fail_1281@127:0>:bool)|- bot
        
        P[<<zip_1030@93:2>@115:0>](<f_main_1272@124:0>:int,<f_main_1272@124:0>:int,<f_main_1272@124:1>:int),
        P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
        ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && <fail_1281@127:0>)
        |- P[<fail_1281@127:0>](<fail_1281@127:0>:bool)
        
        P[<map_1033@119:0>](<map_1033@119:0>:int),
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
        
        P[<<zip_1030@93:2>@115:0>](<f_main_1271@117:0>:int,<f_main_1271@117:0>:int,<map_1033@119:0>:int)|- P[<map_1033@119:0>](
        <map_1033@119:0>:int)
        
        P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
        P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                   -1 + <<zip_1030@93:2>@115:0>):int),
        ((<zip_1030@93:0> <> 0) && (<zip_1030@93:1> <> 0))
        |- P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,
                                      <<zip_1030@93:2>@115:0>:int)
        
        P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
        ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
        |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                      <<zip_1030@99:2>@107:0>:int)
        
        P[<zip_1030@93:1>]((1 + <zip_1030@99:0>):int,(1 + <zip_1030@99:1>):int),
        (((1 + <zip_1030@99:0>) <> 0) && ((1 + <zip_1030@99:1>) <> 0))
        |- P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int)
        
         (<zip_1030@93:1> = <zip_1030@93:0>) |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,
                                                                   <zip_1030@93:1>:int)
      lower bounds:
        P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int) = (<zip_1030@93:1> = <zip_1030@93:0>)
        P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int) =
        (((1 + <zip_1030@99:0>) <> 0) && (((1 + <zip_1030@99:1>) <> 0) && (<zip_1030@99:1> = <zip_1030@99:0>)))
        P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
        ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<zip_1030@99:1> = <<zip_1030@99:2>@107:0>)))
        P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,<<zip_1030@93:2>@115:0>:int) =
        ((<zip_1030@93:0> = 1) && ((<zip_1030@93:1> = 1) && (<zip_1030@93:1> = <<zip_1030@93:2>@115:0>)))
        P[<map_1033@119:0>](<map_1033@119:0>:int) = (<map_1033@119:0> = 1)
        P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int) = false
        P[<fail_1281@127:0>](<fail_1281@127:0>:bool) = false
      upper bounds:
        P[<<zip_1030@93:2>@115:0>](var283:int,var284:int,var285:int) =
        ((var285 <> 0) || ((0 = var283) || (var283 <> var284)))
        P[<<zip_1030@99:2>@107:0>](var277:int,var278:int,var279:int) =
        (((1 + var279) <> 0) || ((0 = (1 + var278)) || (var278 <> var277)))
      begin GenHcSolver.classify_pids(81994)[4]
        output:
          [<<zip_1030@99:2>@107:0>;<<zip_1030@93:2>@115:0>]
      end GenHcSolver.classify_pids(81994)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(82075)[4]
        lb:(((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<zip_1030@99:1> = <<zip_1030@99:2>@107:0>))) ||
            ((<zip_1030@99:0> = 1) && ((<zip_1030@99:1> = 1) && (<zip_1030@99:1> = <<zip_1030@99:2>@107:0>))))
        nub:((not
                (((1 + <<zip_1030@99:2>@107:0>) <> 0) ||
                 ((0 = (1 + <zip_1030@99:1>)) || (<zip_1030@99:1> <> <zip_1030@99:0>)))) ||
             (not ((<<zip_1030@99:2>@107:0> <> 0) || ((0 = <zip_1030@99:0>) || (<zip_1030@99:0> <> <zip_1030@99:1>)))))
        begin ExtFormula.Formula.case_analysis_boolean(82140)[5]
          ts: ((<zip_1030@99:1> = <<zip_1030@99:2>@107:0>) &&
               (((<zip_1030@99:0> = 0) && (<zip_1030@99:1> = 0)) || ((<zip_1030@99:0> = 1) && (<zip_1030@99:1> = 1))))
          
        end ExtFormula.Formula.case_analysis_boolean(82140)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(82209)[5]
          ts: (((<<zip_1030@99:2>@107:0> = -1) && ((0 <> (1 + <zip_1030@99:1>)) && (<zip_1030@99:1> = <zip_1030@99:0>))) ||
               ((<<zip_1030@99:2>@107:0> = 0) && ((0 <> <zip_1030@99:0>) && (<zip_1030@99:0> = <zip_1030@99:1>))))
          
        end ExtFormula.Formula.case_analysis_boolean(82209)[5] (0.000000 sec.)
        lb':(((<<zip_1030@99:2>@107:0> + (-1 * <zip_1030@99:0>)) = 0) &&
             (((<zip_1030@99:1> + (-1 * <zip_1030@99:0>)) = 0) &&
              (((1 + (-1 * <zip_1030@99:0>)) >= 0) && (<zip_1030@99:0> >= 0))))
        nub':(((<zip_1030@99:1> + (-1 * <zip_1030@99:0>)) = 0) &&
              (((-1 * <<zip_1030@99:2>@107:0>) >= 0) && ((1 + <<zip_1030@99:2>@107:0>) >= 0)))
        begin InterpProver.interpolate(82222)[5]
          begin InterpProver.interpolate_fresh(82223)[6]
            begin InterpProver.interpolate_log(82224)[7]
              input1: (((<<zip_1030@99:2>@107:0> + (-1 * <zip_1030@99:0>)) = 0) &&
                       (((<zip_1030@99:1> + (-1 * <zip_1030@99:0>)) = 0) &&
                        (((1 + (-1 * <zip_1030@99:0>)) >= 0) && (<zip_1030@99:0> >= 0))))
              input2: (((<zip_1030@99:1> + (-1 * <zip_1030@99:0>)) = 0) &&
                       (((-1 * <<zip_1030@99:2>@107:0>) >= 0) && ((1 + <<zip_1030@99:2>@107:0>) >= 0)))
              begin InterpProver.interpolate_check(82225)[8]
                begin InterpProver.interpolate_simplify(82226)[9]
                  begin InterpProver.interpolate_quick(82397)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(82406)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(82407)[12]
                        begin CsisatInterface.interpolate_csisat_log(82408)[13]
                          input1: (v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 & v_sep_zip_1030_sep_99_sep_1 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 & 0 <= v_sep_zip_1030_sep_99_sep_0 & v_sep_zip_1030_sep_99_sep_0 <= 1)
                          input2: (v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_1 & 0 <= (1 + v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0) & v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(82409)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(82409)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(82408)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(82407)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(82406)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(82397)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(82226)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(82225)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(82224)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(82223)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(82222)[5] (0.001999 sec.)
        begin InterpProver.interpolate(82432)[5]
          begin InterpProver.interpolate_fresh(82433)[6]
            begin InterpProver.interpolate_log(82434)[7]
              input1: (((<<zip_1030@99:2>@107:0> + (-1 * <zip_1030@99:0>)) = 0) &&
                       (((<zip_1030@99:1> + (-1 * <zip_1030@99:0>)) = 0) &&
                        (((1 + (-1 * <zip_1030@99:0>)) >= 0) && (<zip_1030@99:0> >= 0))))
              input2: (not
                         ((<<zip_1030@99:2>@107:0> <> 0) ||
                          ((0 = <zip_1030@99:0>) || (<zip_1030@99:0> <> <zip_1030@99:1>))))
              begin InterpProver.interpolate_check(82435)[8]
                begin InterpProver.interpolate_simplify(82436)[9]
                  begin InterpProver.interpolate_quick(82597)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(82606)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(82607)[12]
                        begin CsisatInterface.interpolate_csisat_log(82608)[13]
                          input1: (v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 & v_sep_zip_1030_sep_99_sep_1 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 & 0 <= v_sep_zip_1030_sep_99_sep_0 & v_sep_zip_1030_sep_99_sep_0 <= 1)
                          input2: (not 0 = v_sep_zip_1030_sep_99_sep_0 & 0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 & v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(82609)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(82609)[14] (0.000000 sec.)
                          output: v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(82608)[13] (0.000000 sec.)
                        after simplification: v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0
                        after dnf conversion: ((v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(82607)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(82606)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(82597)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(82436)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(82435)[8] (0.001000 sec.)
              output: (<zip_1030@99:0> = <<zip_1030@99:2>@107:0>)
            end InterpProver.interpolate_log(82434)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(82433)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(82432)[5] (0.001000 sec.)
        begin InterpProver.interpolate(82645)[5]
          begin InterpProver.interpolate_fresh(82646)[6]
            begin InterpProver.interpolate_log(82647)[7]
              input1: (((<<zip_1030@99:2>@107:0> + (-1 * <zip_1030@99:0>)) = 0) &&
                       (((<zip_1030@99:1> + (-1 * <zip_1030@99:0>)) = 0) &&
                        (((1 + (-1 * <zip_1030@99:0>)) >= 0) && (<zip_1030@99:0> >= 0))))
              input2: (not
                         (((1 + <<zip_1030@99:2>@107:0>) <> 0) ||
                          ((0 = (1 + <zip_1030@99:1>)) || (<zip_1030@99:1> <> <zip_1030@99:0>))))
              begin InterpProver.interpolate_check(82648)[8]
                begin InterpProver.interpolate_simplify(82649)[9]
                  begin InterpProver.interpolate_quick(82824)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(82833)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(82834)[12]
                        begin CsisatInterface.interpolate_csisat_log(82835)[13]
                          input1: (v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 & v_sep_zip_1030_sep_99_sep_1 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 & 0 <= v_sep_zip_1030_sep_99_sep_0 & v_sep_zip_1030_sep_99_sep_0 <= 1)
                          input2: (not 0 = (1 + v_sep_zip_1030_sep_99_sep_1) & -1 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 & v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(82836)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(82836)[14] (0.000000 sec.)
                          output: -2*v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(82835)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(82834)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(82833)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(82824)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(82649)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(82648)[8] (0.002000 sec.)
              output: (0 <= <<zip_1030@99:2>@107:0>)
            end InterpProver.interpolate_log(82647)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(82646)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(82645)[5] (0.003000 sec.)
        output:
          P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
          (0 <= <<zip_1030@99:2>@107:0>)
          P[<<zip_1030@93:2>@115:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
          (<zip_1030@99:0> = <<zip_1030@99:2>@107:0>)
      end ApronInterface.convex_hull_interpolate(82075)[4] (0.006999 sec.)
      Horn clauses:
        P[<fail_1281@127:0>](<fail_1281@127:0>:bool)|- bot
        
        P[<<map_1033@119:1>@122:0>](<f_main_1272@124:0>:int,<f_main_1272@124:3>:int),
        ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && <fail_1281@127:0>)
        |- P[<fail_1281@127:0>](<fail_1281@127:0>:bool)
        
        P[<map_1033@119:0>](<map_1033@119:0>:int),
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
        
        |- P[<map_1033@119:0>](<map_1033@119:0>:int)
        
        P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
        P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                   -1 + <<zip_1030@93:2>@115:0>):int),
        ((<zip_1030@93:0> <> 0) && ((<zip_1030@93:1> <> 0) && (<zip_1030@93:0> <> <<zip_1030@93:2>@115:0>))) |- bot
        
        P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
        ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
        |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                      <<zip_1030@99:2>@107:0>:int)
        
        P[<zip_1030@93:1>]((1 + <zip_1030@99:0>):int,(1 + <zip_1030@99:1>):int),
        (((1 + <zip_1030@99:0>) <> 0) && ((1 + <zip_1030@99:1>) <> 0))
        |- P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int)
        
         (<zip_1030@93:1> = <zip_1030@93:0>) |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,
                                                                   <zip_1030@93:1>:int)
      lower bounds:
        P[<map_1033@119:0>](<map_1033@119:0>:int) = true
        P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int) = (<zip_1030@93:1> = <zip_1030@93:0>)
        P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int) =
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int) =
        (((1 + <zip_1030@99:0>) <> 0) && (((1 + <zip_1030@99:1>) <> 0) && (<zip_1030@99:1> = <zip_1030@99:0>)))
        P[<fail_1281@127:0>](<fail_1281@127:0>:bool) = false
        P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
        ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<zip_1030@99:1> = <<zip_1030@99:2>@107:0>)))
      upper bounds:
        P[<zip_1030@99:1>](var288:int,var289:int) = true
        P[<zip_1030@93:1>](var286:int,var287:int) = true
      begin GenHcSolver.classify_pids(89494)[4]
        output:
          [<zip_1030@93:1>;<zip_1030@99:1>]
      end GenHcSolver.classify_pids(89494)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(89505)[4]
        lb:((<zip_1030@93:1> = <zip_1030@93:0>) ||
            (((1 + <zip_1030@93:0>) <> 0) && (((1 + <zip_1030@93:1>) <> 0) && (<zip_1030@93:1> = <zip_1030@93:0>))))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(89567)[5]
          ts: (<zip_1030@93:1> = <zip_1030@93:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(89567)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(89574)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(89574)[5] (0.000000 sec.)
        lb':((<zip_1030@93:1> + (-1 * <zip_1030@93:0>)) = 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(89577)[5]
          begin InterpProver.interpolate_fresh(89578)[6]
            begin InterpProver.interpolate_log(89579)[7]
              input1: ((<zip_1030@93:1> + (-1 * <zip_1030@93:0>)) = 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(89580)[8]
                begin InterpProver.interpolate_simplify(89581)[9]
                  begin InterpProver.interpolate_quick(89597)[10]
                    
                  end InterpProver.interpolate_quick(89597)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(89581)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(89580)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(89579)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(89578)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(89577)[5] (0.000000 sec.)
        output:
          P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int) = true
          P[<zip_1030@99:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int) = true
      end ApronInterface.convex_hull_interpolate(89505)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1281@127:0>](<fail_1281@127:0>:bool)|- bot
        
        P[<<map_1033@119:1>@122:0>](<f_main_1272@124:0>:int,<f_main_1272@124:3>:int),
        ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && <fail_1281@127:0>)
        |- P[<fail_1281@127:0>](<fail_1281@127:0>:bool)
        
        P[<map_1033@119:0>](<map_1033@119:0>:int),
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
        
        |- P[<map_1033@119:0>](<map_1033@119:0>:int)
        
        P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                   -1 + <<zip_1030@93:2>@115:0>):int),
        ((<zip_1030@93:0> <> 0) && ((<zip_1030@93:1> <> 0) && (<zip_1030@93:0> <> <<zip_1030@93:2>@115:0>))) |- bot
        
         ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
        |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                      <<zip_1030@99:2>@107:0>:int)
      lower bounds:
        P[<map_1033@119:0>](<map_1033@119:0>:int) = true
        P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
        ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
        P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int) =
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        P[<fail_1281@127:0>](<fail_1281@127:0>:bool) = false
      upper bounds:
        P[<fail_1281@127:0>](var291:bool) = true
      begin GenHcSolver.classify_pids(92693)[4]
        output:
          [<fail_1281@127:0>]
      end GenHcSolver.classify_pids(92693)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(92696)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(92699)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(92699)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(92704)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(92704)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(92707)[5]
          begin InterpProver.interpolate_fresh(92708)[6]
            begin InterpProver.interpolate_log(92709)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(92710)[8]
                begin InterpProver.interpolate_simplify(92711)[9]
                  begin InterpProver.interpolate_quick(92726)[10]
                    
                  end InterpProver.interpolate_quick(92726)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(92730)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(92730)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(92711)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(92710)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(92709)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(92708)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(92707)[5] (0.000000 sec.)
        output:
          P[<fail_1281@127:0>](<fail_1281@127:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(92696)[4] (0.000000 sec.)
      Horn clauses:
        P[<<map_1033@119:1>@122:0>](<f_main_1272@124:0>:int,<f_main_1272@124:3>:int),
        (<f_main_1272@124:3> <> <f_main_1272@124:0>) |- bot
        
        P[<map_1033@119:0>](<map_1033@119:0>:int),
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
        
        |- P[<map_1033@119:0>](<map_1033@119:0>:int)
        
        P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                   -1 + <<zip_1030@93:2>@115:0>):int),
        ((<zip_1030@93:0> <> 0) && ((<zip_1030@93:1> <> 0) && (<zip_1030@93:0> <> <<zip_1030@93:2>@115:0>))) |- bot
        
         ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
        |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                      <<zip_1030@99:2>@107:0>:int)
      lower bounds:
        P[<map_1033@119:0>](<map_1033@119:0>:int) = true
        P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
        ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
        P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int) =
        ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
      upper bounds:
        P[<<map_1033@119:1>@122:0>](var292:int,var293:int) = (var293 = var292)
      begin GenHcSolver.classify_pids(94619)[4]
        output:
          [<<map_1033@119:1>@122:0>]
      end GenHcSolver.classify_pids(94619)[4] (0.000000 sec.)
      lb:((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
      nub:(not (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
      begin ApronInterface.convex_hull_interpolate(94622)[4]
        lb:((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        nub:(not (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
        begin ExtFormula.Formula.case_analysis_boolean(94634)[5]
          ts: ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(94634)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(94644)[5]
          ts: (<<map_1033@119:1>@122:0> <> <map_1033@119:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(94644)[5] (0.000000 sec.)
        lb':((<<map_1033@119:1>@122:0> = 0) && (<map_1033@119:0> = 0))
        nub':true
        begin InterpProver.interpolate(94649)[5]
          begin InterpProver.interpolate_fresh(94650)[6]
            begin InterpProver.interpolate_log(94651)[7]
              input1: ((<<map_1033@119:1>@122:0> = 0) && (<map_1033@119:0> = 0))
              input2: true
              begin InterpProver.interpolate_check(94652)[8]
                begin InterpProver.interpolate_simplify(94653)[9]
                  begin InterpProver.interpolate_quick(94680)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(94683)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(94684)[12]
                        begin CsisatInterface.interpolate_csisat_log(94685)[13]
                          input1: true
                          input2: true
                          begin CsisatInterface.interpolate_csisat_raw(94686)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(94686)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(94685)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(94684)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(94683)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(94680)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(94653)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(94652)[8] (0.000000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(94651)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(94650)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(94649)[5] (0.000000 sec.)
        begin InterpProver.interpolate(94694)[5]
          begin InterpProver.interpolate_fresh(94695)[6]
            begin InterpProver.interpolate_log(94696)[7]
              input1: ((<<map_1033@119:1>@122:0> = 0) && (<map_1033@119:0> = 0))
              input2: (not (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
              begin InterpProver.interpolate_check(94697)[8]
                begin InterpProver.interpolate_simplify(94698)[9]
                  begin InterpProver.interpolate_quick(94725)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(94734)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(94735)[12]
                        begin CsisatInterface.interpolate_csisat_log(94736)[13]
                          input1: (0 = v_sep_map_1033_sep_119_sep_0 & 0 = v_sep_map_1033_sep_119_sep_1_sep_122_sep_0)
                          input2: not v_sep_map_1033_sep_119_sep_0 = v_sep_map_1033_sep_119_sep_1_sep_122_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(94737)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(94737)[14] (0.000000 sec.)
                          output: v_sep_map_1033_sep_119_sep_0 = v_sep_map_1033_sep_119_sep_1_sep_122_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(94736)[13] (0.000000 sec.)
                        after simplification: v_sep_map_1033_sep_119_sep_0 = v_sep_map_1033_sep_119_sep_1_sep_122_sep_0
                        after dnf conversion: ((v_sep_map_1033_sep_119_sep_0 = v_sep_map_1033_sep_119_sep_1_sep_122_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(94735)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(94734)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(94725)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(94698)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(94697)[8] (0.001000 sec.)
              output: (<map_1033@119:0> = <<map_1033@119:1>@122:0>)
            end InterpProver.interpolate_log(94696)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(94695)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(94694)[5] (0.001000 sec.)
        output:
          P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int) =
          (<map_1033@119:0> = <<map_1033@119:1>@122:0>)
      end ApronInterface.convex_hull_interpolate(94622)[4] (0.001000 sec.)
      Horn clauses:
        |- P[<map_1033@119:0>](<map_1033@119:0>:int)
        
        P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                   -1 + <<zip_1030@93:2>@115:0>):int),
        ((<zip_1030@93:0> <> 0) && ((<zip_1030@93:1> <> 0) && (<zip_1030@93:0> <> <<zip_1030@93:2>@115:0>))) |- bot
        
         ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
        |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                      <<zip_1030@99:2>@107:0>:int)
      lower bounds:
        P[<map_1033@119:0>](<map_1033@119:0>:int) = true
        P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
        ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
      upper bounds:
        P[<map_1033@119:0>](var294:int) = true
      begin GenHcSolver.classify_pids(96012)[4]
        output:
          [<map_1033@119:0>]
      end GenHcSolver.classify_pids(96012)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(96015)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(96018)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(96018)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(96023)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(96023)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(96026)[5]
          begin InterpProver.interpolate_fresh(96027)[6]
            begin InterpProver.interpolate_log(96028)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(96029)[8]
                begin InterpProver.interpolate_simplify(96030)[9]
                  begin InterpProver.interpolate_quick(96044)[10]
                    
                  end InterpProver.interpolate_quick(96044)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(96030)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(96029)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(96028)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(96027)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(96026)[5] (0.000000 sec.)
        output:
          P[<map_1033@119:0>](<map_1033@119:0>:int) = true
      end ApronInterface.convex_hull_interpolate(96015)[4] (0.000000 sec.)
      Horn clauses:
        P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                   -1 + <<zip_1030@93:2>@115:0>):int),
        ((<zip_1030@93:0> <> 0) && ((<zip_1030@93:1> <> 0) && (<zip_1030@93:0> <> <<zip_1030@93:2>@115:0>))) |- bot
        
         ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
        |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                      <<zip_1030@99:2>@107:0>:int)
      lower bounds:
        P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
        ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
      upper bounds:
        P[<<zip_1030@99:2>@107:0>](var295:int,var296:int,var297:int) =
        ((var295 = var297) || (((1 + var296) = 0) || ((1 + var295) = 0)))
      begin GenHcSolver.classify_pids(97851)[4]
        output:
          [<<zip_1030@99:2>@107:0>]
      end GenHcSolver.classify_pids(97851)[4] (0.000000 sec.)
      lb:((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
      nub:(not
             ((<zip_1030@99:0> = <<zip_1030@99:2>@107:0>) ||
              (((1 + <zip_1030@99:1>) = 0) || ((1 + <zip_1030@99:0>) = 0))))
      begin ApronInterface.convex_hull_interpolate(97854)[4]
        lb:((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
        nub:(not
               ((<zip_1030@99:0> = <<zip_1030@99:2>@107:0>) ||
                (((1 + <zip_1030@99:1>) = 0) || ((1 + <zip_1030@99:0>) = 0))))
        begin ExtFormula.Formula.case_analysis_boolean(97875)[5]
          ts: ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(97875)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(97917)[5]
          ts: ((<zip_1030@99:0> <> <<zip_1030@99:2>@107:0>) &&
               (((1 + <zip_1030@99:1>) <> 0) && ((1 + <zip_1030@99:0>) <> 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(97917)[5] (0.001000 sec.)
        lb':((<<zip_1030@99:2>@107:0> = 0) && ((<zip_1030@99:1> = 0) && (<zip_1030@99:0> = 0)))
        nub':true
        begin InterpProver.interpolate(97926)[5]
          begin InterpProver.interpolate_fresh(97927)[6]
            begin InterpProver.interpolate_log(97928)[7]
              input1: ((<<zip_1030@99:2>@107:0> = 0) && ((<zip_1030@99:1> = 0) && (<zip_1030@99:0> = 0)))
              input2: true
              begin InterpProver.interpolate_check(97929)[8]
                begin InterpProver.interpolate_simplify(97930)[9]
                  begin InterpProver.interpolate_quick(97967)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(97970)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(97971)[12]
                        begin CsisatInterface.interpolate_csisat_log(97972)[13]
                          input1: true
                          input2: true
                          begin CsisatInterface.interpolate_csisat_raw(97973)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(97973)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(97972)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(97971)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(97970)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(97967)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(97930)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(97929)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(97928)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(97927)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(97926)[5] (0.001000 sec.)
        begin InterpProver.interpolate(97981)[5]
          begin InterpProver.interpolate_fresh(97982)[6]
            begin InterpProver.interpolate_log(97983)[7]
              input1: ((<<zip_1030@99:2>@107:0> = 0) && ((<zip_1030@99:1> = 0) && (<zip_1030@99:0> = 0)))
              input2: (not
                         ((<zip_1030@99:0> = <<zip_1030@99:2>@107:0>) ||
                          (((1 + <zip_1030@99:1>) = 0) || ((1 + <zip_1030@99:0>) = 0))))
              begin InterpProver.interpolate_check(97984)[8]
                begin InterpProver.interpolate_simplify(97985)[9]
                  begin InterpProver.interpolate_quick(98084)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(98093)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(98094)[12]
                        begin CsisatInterface.interpolate_csisat_log(98095)[13]
                          input1: (0 = v_sep_zip_1030_sep_99_sep_0 & 0 = v_sep_zip_1030_sep_99_sep_1 & 0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0)
                          input2: (not 0 = (1 + v_sep_zip_1030_sep_99_sep_0) & not 0 = (1 + v_sep_zip_1030_sep_99_sep_1) & not v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(98096)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(98096)[14] (0.000000 sec.)
                          output: v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(98095)[13] (0.000000 sec.)
                        after simplification: v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0
                        after dnf conversion: ((v_sep_zip_1030_sep_99_sep_0 = v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(98094)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(98093)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(98084)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(97985)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(97984)[8] (0.001000 sec.)
              output: (<zip_1030@99:0> = <<zip_1030@99:2>@107:0>)
            end InterpProver.interpolate_log(97983)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(97982)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(97981)[5] (0.001000 sec.)
        output:
          P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
          (<zip_1030@99:0> = <<zip_1030@99:2>@107:0>)
      end ApronInterface.convex_hull_interpolate(97854)[4] (0.003000 sec.)
      begin HcSolver.check_validity(98315)[4]
        input:
          P[<fail_1281@127:0>](<fail_1281@127:0>:bool)|- bot
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1272@124:0>:int,<f_main_1272@124:0>:int,<f_main_1272@124:1>:int),
          P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
          ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && <fail_1281@127:0>)
          |- P[<fail_1281@127:0>](<fail_1281@127:0>:bool)
          
          P[<map_1033@119:0>](<map_1033@119:0>:int),
          ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
          |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1271@117:0>:int,<f_main_1271@117:0>:int,<map_1033@119:0>:int)|- P[<map_1033@119:0>](
          <map_1033@119:0>:int)
          
          P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
          P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                     -1 + <<zip_1030@93:2>@115:0>):int),
          ((<zip_1030@93:0> <> 0) && (<zip_1030@93:1> <> 0))
          |- P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,
                                        <<zip_1030@93:2>@115:0>:int)
          
          P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
          ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
          |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                        <<zip_1030@99:2>@107:0>:int)
          
          P[<zip_1030@93:1>]((1 + <zip_1030@99:0>):int,(1 + <zip_1030@99:1>):int),
          (((1 + <zip_1030@99:0>) <> 0) && ((1 + <zip_1030@99:1>) <> 0))
          |- P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int)
          
           (<zip_1030@93:1> = <zip_1030@93:0>) |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,
                                                                    <zip_1030@93:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(98315)[4] (0.002999 sec.)
      solution:
        P[<fail_1281@127:0>](<fail_1281@127:0>:bool) = false
        P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int) =
        (<map_1033@119:0> = <<map_1033@119:1>@122:0>)
        P[<map_1033@119:0>](<map_1033@119:0>:int) = true
        P[<<zip_1030@93:2>@115:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
        (<zip_1030@99:0> = <<zip_1030@99:2>@107:0>)
        P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,<<zip_1030@99:2>@107:0>:int) =
        (<zip_1030@99:0> = <<zip_1030@99:2>@107:0>)
        P[<zip_1030@99:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int) = true
        P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int) = true
    end GenHcSolver.solve(76088)[3] (0.116982 sec.)
    begin YhornInterface.solve(99004)[3]
      begin HcSolver.solve_ub(99005)[4]
        encoded:
          P[<fail_1281@127:0>](<fail_1281@127:0>:int)|- bot
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1272@124:0>:int,<f_main_1272@124:0>:int,<f_main_1272@124:1>:int),
          P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
          ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && (<fail_1281@127:0> = 1))
          |- P[<fail_1281@127:0>](<fail_1281@127:0>:int)
          
          P[<map_1033@119:0>](<map_1033@119:0>:int),
          ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
          |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1271@117:0>:int,<f_main_1271@117:0>:int,<map_1033@119:0>:int)|- P[<map_1033@119:0>](
          <map_1033@119:0>:int)
          
          P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
          P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                     -1 + <<zip_1030@93:2>@115:0>):int),
          ((<zip_1030@93:0> <> 0) && (<zip_1030@93:1> <> 0))
          |- P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,
                                        <<zip_1030@93:2>@115:0>:int)
          
          P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
          ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
          |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                        <<zip_1030@99:2>@107:0>:int)
          
          P[<zip_1030@93:1>]((1 + <zip_1030@99:0>):int,(1 + <zip_1030@99:1>):int),
          (((1 + <zip_1030@99:0>) <> 0) && ((1 + <zip_1030@99:1>) <> 0))
          |- P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int)
          
           (<zip_1030@93:1> = <zip_1030@93:0>) |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,
                                                                    <zip_1030@93:1>:int)
        input to Yhorn:
          P[<fail_1281@127:0>](<fail_1281@127:0>:int)|- bot
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1272@124:0>:int,<f_main_1272@124:0>:int,<f_main_1272@124:1>:int),
          P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
          ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && (<fail_1281@127:0> = 1))
          |- P[<fail_1281@127:0>](<fail_1281@127:0>:int)
          
          P[<map_1033@119:0>](<map_1033@119:0>:int),
          ((<<map_1033@119:1>@122:0> = <map_1033@119:0>) && (<map_1033@119:0> = 0))
          |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1271@117:0>:int,<f_main_1271@117:0>:int,<map_1033@119:0>:int)|- P[<map_1033@119:0>](
          <map_1033@119:0>:int)
          
          P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
          P[<<zip_1030@99:2>@107:0>](var298:int,var299:int,var300:int),
          (((1 + var300) = <<zip_1030@93:2>@115:0>) &&
           (((1 + var299) = <zip_1030@93:1>) &&
            (((1 + var298) = <zip_1030@93:0>) && ((<zip_1030@93:1> <> 0) && (<zip_1030@93:0> <> 0)))))
          |- P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,
                                        <<zip_1030@93:2>@115:0>:int)
          
          P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
          ((<<zip_1030@99:2>@107:0> = <zip_1030@99:0>) && ((<zip_1030@99:1> = 0) && (<zip_1030@99:0> = 0)))
          |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                        <<zip_1030@99:2>@107:0>:int)
          
          P[<zip_1030@93:1>](var301:int,var302:int),
          ((var302 = (1 + <zip_1030@99:1>)) &&
           ((var301 = (1 + <zip_1030@99:0>)) && (((1 + <zip_1030@99:1>) <> 0) && ((1 + <zip_1030@99:0>) <> 0))))
          |- P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1281_sep_127_sep_0($637)) -> 1=0.
(($637-1=0) & ($638-$639<>0)) & (v_sep_map_1033_sep_119_sep_1_sep_122_sep_0($640,$638)) & (v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0($639,$639,$640)) -> v_sep_fail_1281_sep_127_sep_0($637).
(($641=0) & (-$641+$642=0)) & (v_sep_map_1033_sep_119_sep_0($641)) -> v_sep_map_1033_sep_119_sep_1_sep_122_sep_0($641,$642).
(0=0) & (v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0($643,$643,$641)) -> v_sep_map_1033_sep_119_sep_0($641).
(($644<>0) & ($645<>0) & (-$644+$646+1=0) & (-$645+$647+1=0) & ($648-$649+1=0)) & (v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0($646,$647,$648)) & (v_sep_zip_1030_sep_93_sep_1($644,$645)) -> v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0($644,$645,$649).
(($650=0) & ($651=0) & (-$650+$652=0)) & (v_sep_zip_1030_sep_99_sep_1($650,$651)) -> v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0($650,$651,$652).
(($650+1<>0) & ($651+1<>0) & (-$650+$653-1=0) & (-$651+$654-1=0)) & (v_sep_zip_1030_sep_93_sep_1($653,$654)) -> v_sep_zip_1030_sep_99_sep_1($650,$651).
-$644+$645=0 -> v_sep_zip_1030_sep_93_sep_1($644,$645).


v_sep_fail_1281_sep_127_sep_0: X
v_sep_map_1033_sep_119_sep_0: X
v_sep_map_1033_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1030_sep_93_sep_1: X
v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1030_sep_99_sep_1: X
v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0: X
.....................
v_sep_fail_1281_sep_127_sep_0: X
v_sep_map_1033_sep_119_sep_0: X
v_sep_map_1033_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1030_sep_93_sep_1: X
v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1030_sep_99_sep_1: X
v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0: X
......
v_sep_fail_1281_sep_127_sep_0: X
v_sep_map_1033_sep_119_sep_0: X
v_sep_map_1033_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1030_sep_93_sep_1: X
v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1030_sep_99_sep_1: X
v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0: X
...............
v_sep_fail_1281_sep_127_sep_0: X
v_sep_map_1033_sep_119_sep_0: X
v_sep_map_1033_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1030_sep_93_sep_1: X
v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1030_sep_99_sep_1: X
v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0: X
.................
v_sep_fail_1281_sep_127_sep_0: X
v_sep_map_1033_sep_119_sep_0: X
v_sep_map_1033_sep_119_sep_1_sep_122_sep_0: X
v_sep_zip_1030_sep_93_sep_1: X
v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0: X
v_sep_zip_1030_sep_99_sep_1: X
v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0: X
.....................(0=0) & (v_sep_fail_1281_sep_127_sep_0($637)) -> 1=0.
(($637-1=0) & ($638-$639<>0)) & (v_sep_map_1033_sep_119_sep_1_sep_122_sep_0($640,$638)) & (v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0($639,$639,$640)) -> v_sep_fail_1281_sep_127_sep_0($637).
(($641=0) & (-$641+$642=0)) & (v_sep_map_1033_sep_119_sep_0($641)) -> v_sep_map_1033_sep_119_sep_1_sep_122_sep_0($641,$642).
(0=0) & (v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0($643,$643,$641)) -> v_sep_map_1033_sep_119_sep_0($641).
(($644<>0) & ($645<>0) & (-$644+$646+1=0) & (-$645+$647+1=0) & ($648-$649+1=0)) & (v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0($646,$647,$648)) & (v_sep_zip_1030_sep_93_sep_1($644,$645)) -> v_sep_zip_1030_sep_93_sep_2_sep_115_sep_0($644,$645,$649).
(($650=0) & ($651=0) & (-$650+$652=0)) & (v_sep_zip_1030_sep_99_sep_1($650,$651)) -> v_sep_zip_1030_sep_99_sep_2_sep_107_sep_0($650,$651,$652).
(($650+1<>0) & ($651+1<>0) & (-$650+$653-1=0) & (-$651+$654-1=0)) & (v_sep_zip_1030_sep_93_sep_1($653,$654)) -> v_sep_zip_1030_sep_99_sep_1($650,$651).
-$644+$645=0 -> v_sep_zip_1030_sep_93_sep_1($644,$645).

           (<zip_1030@93:1> = <zip_1030@93:0>) |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,
                                                                    <zip_1030@93:1>:int)
        solution:
          P[<fail_1281@127:0>]($655:bool) = false
          P[<map_1033@119:0>]($670:int) = (1 <= $670)
          P[<<map_1033@119:1>@122:0>]($658:int,$660:int) = ((1 + $658) <= 0)
          P[<zip_1030@93:1>]($680:int,$682:int) = true
          P[<<zip_1030@93:2>@115:0>]($663:int,$665:int,$667:int) = (1 <= $667)
          P[<zip_1030@99:1>]($685:int,$687:int) = true
          P[<<zip_1030@99:2>@107:0>]($673:int,$675:int,$677:int) = (0 <= $677)
        
      end HcSolver.solve_ub(99005)[4] (0.104984 sec.)
      begin HcSolver.check_validity(99589)[4]
        input:
          P[<fail_1281@127:0>](<fail_1281@127:0>:bool)|- bot
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1272@124:0>:int,<f_main_1272@124:0>:int,<f_main_1272@124:1>:int),
          P[<<map_1033@119:1>@122:0>](<f_main_1272@124:1>:int,<f_main_1272@124:3>:int),
          ((<f_main_1272@124:3> <> <f_main_1272@124:0>) && <fail_1281@127:0>)
          |- P[<fail_1281@127:0>](<fail_1281@127:0>:bool)
          
          P[<map_1033@119:0>](<map_1033@119:0>:int),
          ((<map_1033@119:0> = 0) && (<<map_1033@119:1>@122:0> = <map_1033@119:0>))
          |- P[<<map_1033@119:1>@122:0>](<map_1033@119:0>:int,<<map_1033@119:1>@122:0>:int)
          
          P[<<zip_1030@93:2>@115:0>](<f_main_1271@117:0>:int,<f_main_1271@117:0>:int,<map_1033@119:0>:int)|- P[<map_1033@119:0>](
          <map_1033@119:0>:int)
          
          P[<zip_1030@93:1>](<zip_1030@93:0>:int,<zip_1030@93:1>:int),
          P[<<zip_1030@99:2>@107:0>]((-1 + <zip_1030@93:0>):int,(-1 + <zip_1030@93:1>):int,(
                                     -1 + <<zip_1030@93:2>@115:0>):int),
          ((<zip_1030@93:0> <> 0) && (<zip_1030@93:1> <> 0))
          |- P[<<zip_1030@93:2>@115:0>](<zip_1030@93:0>:int,<zip_1030@93:1>:int,
                                        <<zip_1030@93:2>@115:0>:int)
          
          P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int),
          ((<zip_1030@99:0> = 0) && ((<zip_1030@99:1> = 0) && (<<zip_1030@99:2>@107:0> = <zip_1030@99:0>)))
          |- P[<<zip_1030@99:2>@107:0>](<zip_1030@99:0>:int,<zip_1030@99:1>:int,
                                        <<zip_1030@99:2>@107:0>:int)
          
          P[<zip_1030@93:1>]((1 + <zip_1030@99:0>):int,(1 + <zip_1030@99:1>):int),
          (((1 + <zip_1030@99:0>) <> 0) && ((1 + <zip_1030@99:1>) <> 0))
          |- P[<zip_1030@99:1>](<zip_1030@99:0>:int,<zip_1030@99:1>:int)
          
           (<zip_1030@93:1> = <zip_1030@93:0>) |- P[<zip_1030@93:1>](<zip_1030@93:0>:int,
                                                                    <zip_1030@93:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(99589)[4] (0.007999 sec.)
      solution:
        P[<fail_1281@127:0>]($655:bool) = false
        P[<map_1033@119:0>]($670:int) = (1 <= $670)
        P[<<map_1033@119:1>@122:0>]($658:int,$660:int) = ((1 + $658) <= 0)
        P[<zip_1030@93:1>]($680:int,$682:int) = true
        P[<<zip_1030@93:2>@115:0>]($663:int,$665:int,$667:int) = (1 <= $667)
        P[<zip_1030@99:1>]($685:int,$687:int) = true
        P[<<zip_1030@99:2>@107:0>]($673:int,$675:int,$677:int) = (0 <= $677)
    end YhornInterface.solve(99004)[3] (0.113983 sec.)
    
  end RefTypeInfer.infer_etrs(51339)[2] (0.434935 sec.)
  refinement types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | (v1 = v3)} -> X) -> X
    br_zip_1277: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    zip_1030: v1:int -> v2:int -> (v3:{v3:int | (v1 = v3)} -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1269: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: v1:int -> (v2:{v2:int | (v1 = v2)} -> X) -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1274: var313:int -> var312:unit -> X
    f_map_1270: var318:int -> (var317:int -> X) -> var315:int -> X
    f_zip_1267: var322:int -> var321:int -> var320:unit -> X
    f_zip_1268: var326:int -> var325:int -> var324:unit -> X
    fail_1279: var330:bool -> (var329:unit -> X) -> X
    fail_1280: var334:bool -> (var333:unit -> X) -> X
  abstraction types:
    main_1266: X
    f_1273: v1:int -> X
    main_1035: v1:int -> (v2:unit -> X) -> X
    zip_1030: var335:int -> var336:int -> (var337:int[var337 -> (var335 = var337)] -> X) -> X
    br_zip_1277: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    br_zip_1275: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_zip_1269: v1:int -> v2:int -> (v3:int -> X) -> v5:int -> X
    f_main_1271: v1:int -> (v2:unit -> X) -> v4:int -> X
    map_1033: v1:int -> (v2:int[v2 -> (v1 = v2)] -> X) -> X
    f_main_1272: v1:int -> v2:int -> (v3:unit -> X) -> v5:int -> X
    fail_1281: v1:bool -> (v2:unit -> X) -> X
    f_1274: var313:int -> var312:unit -> X
    f_map_1270: var318:int -> (var317:int -> X) -> var315:int -> X
    f_zip_1267: var322:int -> var321:int -> var320:unit -> X
    f_zip_1268: var326:int -> var325:int -> var324:unit -> X
    fail_1279: var330:bool -> (var329:unit -> X) -> X
    fail_1280: var334:bool -> (var333:unit -> X) -> X
  
end AbsTypeInfer.refine(51338)[1] (0.438933 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1266
  main_1266 -> (rand_int f_1273)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when b_1276 -> (k_zip_1102 x_1031)
  br_zip_1275 b_1276 x_1031 y_1032 k_zip_1102 when (not b_1276) -> (fail_1279 true (f_zip_1267 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when b_1278 -> (fail_1280 true (f_zip_1268 x_1031 y_1032))
  br_zip_1277 b_1278 x_1031 y_1032 k_zip_1102 when (not b_1278) ->
      (zip_1030 (x_1031 - 1) (y_1032 - 1) (f_zip_1269 x_1031 y_1032 k_zip_1102))
  f_1273 x_1241 -> (main_1035 x_1241 (f_1274 x_1241))
  f_1274 x_1241 x_1238 -> end
  f_main_1271 n_1036 k_main_1199 x_1224 -> (map_1033 x_1224 (f_main_1272 n_1036 x_1224 k_main_1199))
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (x_1202 = n_1036) -> (k_main_1199 ())
  f_main_1272 n_1036 x_1224 k_main_1199 x_1202 when (not (x_1202 = n_1036)) -> (fail_1281 true k_main_1199)
  f_map_1270 x_1034 k_map_1167 x_1171 -> (k_map_1167 (1 + x_1171))
  f_zip_1267 x_1031 y_1032 x_1105 -> _|_
  f_zip_1268 x_1031 y_1032 x_1121 -> _|_
  f_zip_1269 x_1031 y_1032 k_zip_1102 x_1134 -> (k_zip_1102 (1 + x_1134))
  fail_1279 b k -> {fail} => (k ())
  fail_1280 b k -> {fail} => (k ())
  fail_1281 b k -> {fail} => (k ())
  main_1035 n_1036 k_main_1199 -> (zip_1030 n_1036 n_1036 (f_main_1271 n_1036 k_main_1199))
  map_1033 x_1034 k_map_1167 when (x_1034 = 0) -> (k_map_1167 x_1034)
  map_1033 x_1034 k_map_1167 when (not (x_1034 = 0)) -> (map_1033 (x_1034 - 1) (f_map_1270 x_1034 k_map_1167))
  zip_1030 x_1031 y_1032 k_zip_1102 when (x_1031 = 0) -> (br_zip_1275 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
  zip_1030 x_1031 y_1032 k_zip_1102 when (not (x_1031 = 0)) -> (br_zip_1277 (y_1032 = 0) x_1031 y_1032 k_zip_1102)
Types:
  main_1266 : X
  fail_1279 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1280 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1281 : (x_1:bool[x_1] -> (unit -> X) -> X)
  map_1033 : (x_1:int[x_1 <= -2; x_1 <= 0] -> (x_3:int[x_1 = x_3; x_3 = 0] -> X) -> X)
  zip_1030 : (x_1:int -> x_2:int[x_1 = x_2] -> (x_4:int[x_1 = x_4; x_4 <= 0; x_1 = 0] -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  map: (({x_1:int | x_1 <= 0 && x_1 <= -2} -> Bottom) /\ ({x_2:int | x_2 > 0 && x_2 <= -2} -> Bottom) /\ 
        (x_3:{x_3:int | x_3 <= 0 && x_3 > -2} -> {x_4:int | x_3 = x_4}) /\ 
        (x_5:{x_5:int | x_5 > 0 && x_5 > -2} -> {x_6:int | x_5 = x_6}))
  zip: ((x_1:int -> ({x_2:int | x_1 = x_2} -> ({x_3:int | x_1 = 0 && x_1 = x_3} \/ {x_4:int | x_1 <> 0 && x_1 = x_4}))) /\
        (x_5:int ->
             ({x_6:int | x_5 = x_6} ->
                  ({x_7:int | (x_7 <= 0 && x_5 = 0) && x_5 = x_7} \/ {x_8:int | 
                   (x_8 <= 0 && x_5 <> 0) && x_5 = x_8} \/ {x_9:int | 
                   (x_9 > 0 && x_5 <> 0) && x_5 = x_9}))))

cycles: 4
total: 1.497 sec
  abst: 0.042 sec
  mc: 0.058 sec
  refine: 1.038 sec
    exparam: 0.114 sec
