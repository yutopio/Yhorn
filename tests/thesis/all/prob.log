MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi prob.ml

parsed::
 let rec f_1030 x_1031 y_1032 =
   if x_1031 < 100 then
     if x_1031 < 50 then
       f_1030 (x_1031 + 1) y_1032
     else
       f_1030 (x_1031 + 1) (y_1032 + 1)
   else
     y_1032 
 in
 let main_1033 = if f_1030 0 50 <> 100 then
                   ()
                 else
                   {fail} () 
 in
   ()

set_target::
 let rec f_1030 x_1031 y_1032 =
   if x_1031 < 100 then
     if x_1031 < 50 then
       f_1030 (x_1031 + 1) y_1032
     else
       f_1030 (x_1031 + 1) (y_1032 + 1)
   else
     y_1032 
 in
 let main_1033 = if f_1030 0 50 <> 100 then
                   ()
                 else
                   {fail} () 
 in
   main_1033

CPS::
 let rec f_1030 (x_1031:int) (y_1032:int) (k_f_1085:(int -> X)) =
   if x_1031 < 100 then
     if x_1031 < 50 then
       f_1030 (x_1031 + 1) y_1032 k_f_1085
     else
       f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085
   else
     k_f_1085 y_1032 
 in
 let k_main_1146 (x_1118:unit) = end 
 in
   f_1030 0 50 (fun x_1124 -> (if x_1124 <> 100 then
                                 k_main_1146 ()
                               else
                                 {|fail|} () k_main_1146))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (int -> int -> (int -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1149 ... --> 
  f_1030 [2/2] ... --> 
  f_1150 [2/2] ... --> 
  fail_1153 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(92)[1]
  program:
    main_1149  | true = (f_1030 0
                                50
                                f_1150)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | b_1152 = (f_1030 (x_1031 + 1)
                                                               y_1032
                                                               k_f_1085)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | (not b_1152) = (f_1030 (
                                                                    x_1031 + 1)
                                                                    (y_1032 + 1)
                                                                    k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (x_1031 < 100) = (br_f_1151 (x_1031 < 50)
                                                                x_1031
                                                                y_1032
                                                                k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (not (x_1031 < 100)) = (k_f_1085 y_1032)
    f_1150 x_1124 | (not (x_1124 = 100)) = (k_main_1146 ())
    f_1150 x_1124 | (not (not (x_1124 = 100))) = (fail_1153 true
                                                            k_main_1146)
    fail_1153 b k | true = (fail ())
    k_main_1146 x_1118 | true = end
    main_1149:X
    br_f_1151:bool -> int -> int -> (int -> X) -> X
    f_1030:int -> int -> (int -> X) -> X
    f_1150:int -> X
    fail_1153:bool -> (unit -> X) -> X
    k_main_1146:unit -> X
  inlined functions: br_f_1151,f_1150,k_main_1146
  counterexample: 0:1:1:0
  error traces:
    [true.((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
     [(not (<f_1030@3:0> < 100)).(<<f_1030@3:2>@6:0> = <f_1030@3:1>)
      [true.(<f_1150@8:0> = <<f_1030@3:2>@6:0>)[(not (not (<f_1150@8:0> = 100))).(<fail_1153@11:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(93)[2]
    horn clauses:
      P[<fail_1153@11:0>](<fail_1153@11:0>:bool)|- bot
      
      P[<f_1150@8:0>](100:int), <fail_1153@11:0> |- P[<fail_1153@11:0>](<fail_1153@11:0>:bool)
      
      P[<<f_1030@3:2>@6:0>](0:int,50:int,<f_1150@8:0>:int)|- P[<f_1150@8:0>](<f_1150@8:0>:int)
      
      P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
      ((<f_1030@3:0> >= 100) && (<<f_1030@3:2>@6:0> = <f_1030@3:1>))
      |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int)
      
       ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
    call trees:
      <main_1149@1>
        <f_1030@3>
        </<f_1030@3:2>@6>
        <f_1150@8>
          <fail_1153@11>
    inlined horn clauses:
      P[<fail_1153@11:0>](<fail_1153@11:0>:bool)|- bot
      
      P[<<f_1030@3:2>@6:0>](0:int,50:int,100:int), <fail_1153@11:0> |- P[<fail_1153@11:0>](<fail_1153@11:0>:bool)
      
      P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
      ((<f_1030@3:0> >= 100) && (<<f_1030@3:2>@6:0> = <f_1030@3:1>))
      |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int)
      
       ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
    begin ParamSubstInfer.infer(917)[3]
      
    end ParamSubstInfer.infer(917)[3] (0.012998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(919)[3]
      
    end RefTypeInfer.elim_coeffs(919)[3] (0.001000 sec.)
    begin GenHcSolver.solve(1094)[3]
      Horn clauses:
        P[<fail_1153@11:0>](<fail_1153@11:0>:bool)|- bot
        
        P[<<f_1030@3:2>@6:0>](0:int,50:int,100:int), <fail_1153@11:0> |- P[<fail_1153@11:0>](<fail_1153@11:0>:bool)
        
        P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
        ((<f_1030@3:0> >= 100) && (<<f_1030@3:2>@6:0> = <f_1030@3:1>))
        |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int)
        
         ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
      lower bounds:
        P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int) = ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
        P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int) = false
        P[<fail_1153@11:0>](<fail_1153@11:0>:bool) = false
      upper bounds:
        P[<fail_1153@11:0>](var3:bool) = true
      begin GenHcSolver.classify_pids(1890)[4]
        output:
          [<fail_1153@11:0>]
      end GenHcSolver.classify_pids(1890)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(1893)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(1894)[5]
          begin InterpProver.interpolate_fresh(1895)[6]
            begin InterpProver.interpolate_log(1896)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(1897)[8]
                begin InterpProver.interpolate_simplify(1898)[9]
                  begin InterpProver.interpolate_quick(1911)[10]
                    
                  end InterpProver.interpolate_quick(1911)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(1915)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(1915)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(1898)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(1897)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(1896)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(1895)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(1894)[5] (0.000000 sec.)
        output:
          P[<fail_1153@11:0>](<fail_1153@11:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(1893)[4] (0.000000 sec.)
      Horn clauses:
        P[<<f_1030@3:2>@6:0>](0:int,50:int,100:int)|- bot
        
        P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
        ((<f_1030@3:0> >= 100) && (<<f_1030@3:2>@6:0> = <f_1030@3:1>))
        |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int)
        
         ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
      lower bounds:
        P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int) = ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
        P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int) = false
      upper bounds:
        P[<<f_1030@3:2>@6:0>](var7:int,var8:int,var9:int) = true
      begin GenHcSolver.classify_pids(2812)[4]
        output:
          [<<f_1030@3:2>@6:0>]
      end GenHcSolver.classify_pids(2812)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2815)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2816)[5]
          begin InterpProver.interpolate_fresh(2817)[6]
            begin InterpProver.interpolate_log(2818)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2819)[8]
                begin InterpProver.interpolate_simplify(2820)[9]
                  begin InterpProver.interpolate_quick(2833)[10]
                    
                  end InterpProver.interpolate_quick(2833)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2837)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2837)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2820)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2819)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2818)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2817)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2816)[5] (0.000000 sec.)
        output:
          P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int) = false
      end ApronInterface.convex_hull_interpolate(2815)[4] (0.000000 sec.)
      Horn clauses:
        P[<f_1030@3:1>](<f_1030@3:0>:int,<<f_1030@3:2>@6:0>:int), (<f_1030@3:0> >= 100) |- bot
        
         ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
      lower bounds:
        P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int) = ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
      upper bounds:
        P[<f_1030@3:1>](var10:int,var11:int) = (var10 < 100)
      begin GenHcSolver.classify_pids(3565)[4]
        output:
          [<f_1030@3:1>]
      end GenHcSolver.classify_pids(3565)[4] (0.000000 sec.)
      lb:((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
      nub:(not (<f_1030@3:0> < 100))
      begin ApronInterface.convex_hull_interpolate(3568)[4]
        lb:((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
        nub:(not (<f_1030@3:0> < 100))
        lb':((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
        nub':(not (<f_1030@3:0> < 100))
        begin InterpProver.interpolate(3569)[5]
          begin InterpProver.interpolate_fresh(3570)[6]
            begin InterpProver.interpolate_log(3571)[7]
              input1: ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
              input2: (not (<f_1030@3:0> < 100))
              begin InterpProver.interpolate_check(3572)[8]
                begin InterpProver.interpolate_simplify(3573)[9]
                  begin InterpProver.interpolate_quick(3609)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(3618)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(3619)[12]
                        begin CsisatInterface.interpolate_csisat_log(3620)[13]
                          input1: 0 = v_sep_f_1030_sep_3_sep_0
                          input2: 100 <= v_sep_f_1030_sep_3_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(3621)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(3621)[14] (0.000000 sec.)
                          output: 0.02*v_sep_f_1030_sep_3_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(3620)[13] (0.000000 sec.)
                        after simplification: v_sep_f_1030_sep_3_sep_0 <= 0
                        after dnf conversion: ((v_sep_f_1030_sep_3_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(3619)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(3618)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(3609)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3573)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3572)[8] (0.001000 sec.)
              output: (<f_1030@3:0> <= 0)
            end InterpProver.interpolate_log(3571)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(3570)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(3569)[5] (0.001000 sec.)
        output:
          P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int) = (<f_1030@3:0> <= 0)
      end ApronInterface.convex_hull_interpolate(3568)[4] (0.001000 sec.)
      begin HcSolver.check_validity(3768)[4]
        input:
          P[<fail_1153@11:0>](<fail_1153@11:0>:bool)|- bot
          
          P[<<f_1030@3:2>@6:0>](0:int,50:int,100:int), <fail_1153@11:0> |- P[<fail_1153@11:0>](<fail_1153@11:0>:bool)
          
          P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
          ((<f_1030@3:0> >= 100) && (<<f_1030@3:2>@6:0> = <f_1030@3:1>))
          |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,
                                   <<f_1030@3:2>@6:0>:int)
          
           ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3768)[4] (0.001000 sec.)
      solution:
        P[<fail_1153@11:0>](<fail_1153@11:0>:bool) = false
        P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int) = false
        P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int) = (<f_1030@3:0> <= 0)
    end GenHcSolver.solve(1094)[3] (0.014997 sec.)
    begin GenHcSolver.solve(3987)[3]
      Horn clauses:
        P[<fail_1153@11:0>](<fail_1153@11:0>:bool)|- bot
        
        P[<<f_1030@3:2>@6:0>](0:int,50:int,100:int), <fail_1153@11:0> |- P[<fail_1153@11:0>](<fail_1153@11:0>:bool)
        
        P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
        ((<f_1030@3:0> >= 100) && (<<f_1030@3:2>@6:0> = <f_1030@3:1>))
        |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int)
        
         ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
      lower bounds:
        P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int) = ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
        P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int) = false
        P[<fail_1153@11:0>](<fail_1153@11:0>:bool) = false
      upper bounds:
        P[<fail_1153@11:0>](var13:bool) = true
      begin GenHcSolver.classify_pids(4783)[4]
        output:
          [<fail_1153@11:0>]
      end GenHcSolver.classify_pids(4783)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(4786)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(4789)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4789)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(4794)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4794)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(4797)[5]
          begin InterpProver.interpolate_fresh(4798)[6]
            begin InterpProver.interpolate_log(4799)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(4800)[8]
                begin InterpProver.interpolate_simplify(4801)[9]
                  begin InterpProver.interpolate_quick(4816)[10]
                    
                  end InterpProver.interpolate_quick(4816)[10] (0.001000 sec.)
                  begin minimizing # of disjunctions(4820)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(4820)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4801)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(4800)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(4799)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(4798)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(4797)[5] (0.001000 sec.)
        output:
          P[<fail_1153@11:0>](<fail_1153@11:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(4786)[4] (0.001000 sec.)
      Horn clauses:
        P[<<f_1030@3:2>@6:0>](0:int,50:int,100:int)|- bot
        
        P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
        ((<f_1030@3:0> >= 100) && (<<f_1030@3:2>@6:0> = <f_1030@3:1>))
        |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int)
        
         ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
      lower bounds:
        P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int) = ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
        P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int) = false
      upper bounds:
        P[<<f_1030@3:2>@6:0>](var17:int,var18:int,var19:int) = true
      begin GenHcSolver.classify_pids(5724)[4]
        output:
          [<<f_1030@3:2>@6:0>]
      end GenHcSolver.classify_pids(5724)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(5727)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(5730)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5730)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5735)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5735)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(5738)[5]
          begin InterpProver.interpolate_fresh(5739)[6]
            begin InterpProver.interpolate_log(5740)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(5741)[8]
                begin InterpProver.interpolate_simplify(5742)[9]
                  begin InterpProver.interpolate_quick(5757)[10]
                    
                  end InterpProver.interpolate_quick(5757)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(5761)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(5761)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5742)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5741)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(5740)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(5739)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(5738)[5] (0.001000 sec.)
        output:
          P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int) = false
      end ApronInterface.convex_hull_interpolate(5727)[4] (0.001000 sec.)
      Horn clauses:
        P[<f_1030@3:1>](<f_1030@3:0>:int,<<f_1030@3:2>@6:0>:int), (<f_1030@3:0> >= 100) |- bot
        
         ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
      lower bounds:
        P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int) = ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
      upper bounds:
        P[<f_1030@3:1>](var20:int,var21:int) = (var20 < 100)
      begin GenHcSolver.classify_pids(6496)[4]
        output:
          [<f_1030@3:1>]
      end GenHcSolver.classify_pids(6496)[4] (0.000000 sec.)
      lb:((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
      nub:(not (<f_1030@3:0> < 100))
      begin ApronInterface.convex_hull_interpolate(6499)[4]
        lb:((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
        nub:(not (<f_1030@3:0> < 100))
        begin ExtFormula.Formula.case_analysis_boolean(6509)[5]
          ts: ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(6509)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(6519)[5]
          ts: (<f_1030@3:0> >= 100)
          
        end ExtFormula.Formula.case_analysis_boolean(6519)[5] (0.001000 sec.)
        lb':(((-50 + <f_1030@3:1>) = 0) && (<f_1030@3:0> = 0))
        nub':((-100 + <f_1030@3:0>) >= 0)
        begin InterpProver.interpolate(6524)[5]
          begin InterpProver.interpolate_fresh(6525)[6]
            begin InterpProver.interpolate_log(6526)[7]
              input1: (((-50 + <f_1030@3:1>) = 0) && (<f_1030@3:0> = 0))
              input2: ((-100 + <f_1030@3:0>) >= 0)
              begin InterpProver.interpolate_check(6527)[8]
                begin InterpProver.interpolate_simplify(6528)[9]
                  begin InterpProver.interpolate_quick(6564)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(6573)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(6574)[12]
                        begin CsisatInterface.interpolate_csisat_log(6575)[13]
                          input1: 0 = v_sep_f_1030_sep_3_sep_0
                          input2: 100 <= v_sep_f_1030_sep_3_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(6576)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(6576)[14] (0.000000 sec.)
                          output: 0.02*v_sep_f_1030_sep_3_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(6575)[13] (0.000000 sec.)
                        after simplification: v_sep_f_1030_sep_3_sep_0 <= 0
                        after dnf conversion: ((v_sep_f_1030_sep_3_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(6574)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(6573)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(6564)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(6528)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(6527)[8] (0.000000 sec.)
              output: (<f_1030@3:0> <= 0)
            end InterpProver.interpolate_log(6526)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(6525)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(6524)[5] (0.000000 sec.)
        output:
          P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int) = (<f_1030@3:0> <= 0)
      end ApronInterface.convex_hull_interpolate(6499)[4] (0.001000 sec.)
      begin HcSolver.check_validity(6721)[4]
        input:
          P[<fail_1153@11:0>](<fail_1153@11:0>:bool)|- bot
          
          P[<<f_1030@3:2>@6:0>](0:int,50:int,100:int), <fail_1153@11:0> |- P[<fail_1153@11:0>](<fail_1153@11:0>:bool)
          
          P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
          ((<f_1030@3:0> >= 100) && (<<f_1030@3:2>@6:0> = <f_1030@3:1>))
          |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,
                                   <<f_1030@3:2>@6:0>:int)
          
           ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(6721)[4] (0.002000 sec.)
      solution:
        P[<fail_1153@11:0>](<fail_1153@11:0>:bool) = false
        P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,<<f_1030@3:2>@6:0>:int) = false
        P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int) = (<f_1030@3:0> <= 0)
    end GenHcSolver.solve(3987)[3] (0.013998 sec.)
    begin YhornInterface.solve(6940)[3]
      begin HcSolver.solve_ub(6941)[4]
        encoded:
          P[<fail_1153@11:0>](<fail_1153@11:0>:int)|- bot
          
          P[<<f_1030@3:2>@6:0>](0:int,50:int,100:int), (<fail_1153@11:0> = 1)
          |- P[<fail_1153@11:0>](<fail_1153@11:0>:int)
          
          P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
          ((<f_1030@3:0> >= 100) && (<<f_1030@3:2>@6:0> = <f_1030@3:1>))
          |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,
                                   <<f_1030@3:2>@6:0>:int)
          
           ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
        input to Yhorn:
          P[<fail_1153@11:0>](<fail_1153@11:0>:int)|- bot
          
          P[<<f_1030@3:2>@6:0>](var22:int,var23:int,var24:int),
          ((var24 = 100) && ((var23 = 50) && ((var22 = 0) && (<fail_1153@11:0> = 1))))
          |- P[<fail_1153@11:0>](<fail_1153@11:0>:int)
          
          P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
          ((<<f_1030@3:2>@6:0> = <f_1030@3:1>) && (<f_1030@3:0> >= 100))
          |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,
                                   <<f_1030@3:2>@6:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1153_sep_11_sep_0($8)) -> 1=0.
(($8-1=0) & ($9=0) & ($10-50=0) & ($11-100=0)) & (v_sep_f_1030_sep_3_sep_2_sep_6_sep_0($9,$10,$11)) -> v_sep_fail_1153_sep_11_sep_0($8).
(($12-100>=0) & ($13-$14=0)) & (v_sep_f_1030_sep_3_sep_1($12,$14)) -> v_sep_f_1030_sep_3_sep_2_sep_6_sep_0($12,$14,$13).
($12=0) & ($14-50=0) -> v_sep_f_1030_sep_3_sep_1($12,$14).


v_sep_f_1030_sep_3_sep_1: X
v_sep_f_1030_sep_3_sep_2_sep_6_sep_0: X
v_sep_fail_1153_sep_11_sep_0: X
....
v_sep_f_1030_sep_3_sep_1: X
v_sep_f_1030_sep_3_sep_2_sep_6_sep_0: X
v_sep_fail_1153_sep_11_sep_0: X
...
v_sep_f_1030_sep_3_sep_1: X
v_sep_f_1030_sep_3_sep_2_sep_6_sep_0: X
v_sep_fail_1153_sep_11_sep_0: X
....
v_sep_f_1030_sep_3_sep_1: X
v_sep_f_1030_sep_3_sep_2_sep_6_sep_0: X
v_sep_fail_1153_sep_11_sep_0: X
....(0=0) & (v_sep_fail_1153_sep_11_sep_0($8)) -> 1=0.
(($8-1=0) & ($9=0) & ($10-50=0) & ($11-100=0)) & (v_sep_f_1030_sep_3_sep_2_sep_6_sep_0($9,$10,$11)) -> v_sep_fail_1153_sep_11_sep_0($8).
(($12-100>=0) & ($13-$14=0)) & (v_sep_f_1030_sep_3_sep_1($12,$14)) -> v_sep_f_1030_sep_3_sep_2_sep_6_sep_0($12,$14,$13).
($12=0) & ($14-50=0) -> v_sep_f_1030_sep_3_sep_1($12,$14).

           ((<f_1030@3:1> = 50) && (<f_1030@3:0> = 0)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
        solution:
          P[<f_1030@3:1>]($25:int,$27:int) = ($27 <= 50)
          P[<<f_1030@3:2>@6:0>]($18:int,$20:int,$22:int) = ($22 <= 50)
          P[<fail_1153@11:0>]($15:bool) = false
        
      end HcSolver.solve_ub(6941)[4] (0.012998 sec.)
      begin HcSolver.check_validity(7120)[4]
        input:
          P[<fail_1153@11:0>](<fail_1153@11:0>:bool)|- bot
          
          P[<<f_1030@3:2>@6:0>](0:int,50:int,100:int), <fail_1153@11:0> |- P[<fail_1153@11:0>](<fail_1153@11:0>:bool)
          
          P[<f_1030@3:1>](<f_1030@3:0>:int,<f_1030@3:1>:int),
          ((<f_1030@3:0> >= 100) && (<<f_1030@3:2>@6:0> = <f_1030@3:1>))
          |- P[<<f_1030@3:2>@6:0>](<f_1030@3:0>:int,<f_1030@3:1>:int,
                                   <<f_1030@3:2>@6:0>:int)
          
           ((<f_1030@3:0> = 0) && (<f_1030@3:1> = 50)) |- P[<f_1030@3:1>](<f_1030@3:0>:int,
                                                                    <f_1030@3:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(7120)[4] (0.007999 sec.)
      solution:
        P[<f_1030@3:1>]($25:int,$27:int) = ($27 <= 50)
        P[<<f_1030@3:2>@6:0>]($18:int,$20:int,$22:int) = ($22 <= 50)
        P[<fail_1153@11:0>]($15:bool) = false
    end YhornInterface.solve(6940)[3] (0.020997 sec.)
    
  end RefTypeInfer.infer_etrs(93)[2] (0.068990 sec.)
  refinement types:
    main_1149: X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 0)} -> (v3:{v3:int | false} -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_f_1151: var32:bool -> var31:int -> var30:int -> (var29:int -> X) -> X
    k_main_1146: var34:unit -> X
  abstraction types:
    main_1149: X
    f_1030: v1:int -> v2:int[v2 -> (v1 <= 0)] -> (v3:int -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:bool -> (v2:unit -> X) -> X
    br_f_1151: var32:bool -> var31:int -> var30:int -> (var29:int -> X) -> X
    k_main_1146: var34:unit -> X
  
end AbsTypeInfer.refine(92)[1] (0.069989 sec.)
DONE!

Prefix of spurious counter-example::
0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int -> int[x_1 <= 0] -> (int -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1149 ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [2/2] ... --> 
  f_1150 [2/2] ... --> 
  fail_1153 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(7748)[1]
  program:
    main_1149  | true = (f_1030 0
                                50
                                f_1150)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | b_1152 = (f_1030 (x_1031 + 1)
                                                               y_1032
                                                               k_f_1085)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | (not b_1152) = (f_1030 (
                                                                    x_1031 + 1)
                                                                    (y_1032 + 1)
                                                                    k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (x_1031 < 100) = (br_f_1151 (x_1031 < 50)
                                                                x_1031
                                                                y_1032
                                                                k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (not (x_1031 < 100)) = (k_f_1085 y_1032)
    f_1150 x_1124 | (not (x_1124 = 100)) = (k_main_1146 ())
    f_1150 x_1124 | (not (not (x_1124 = 100))) = (fail_1153 true
                                                            k_main_1146)
    fail_1153 b k | true = (fail ())
    k_main_1146 x_1118 | true = end
    main_1149:X
    br_f_1151:bool -> int -> int -> (int -> X) -> X
    f_1030:int -> int -> (int -> X) -> X
    f_1150:int -> X
    fail_1153:bool -> (unit -> X) -> X
    k_main_1146:unit -> X
  inlined functions: br_f_1151,f_1150,k_main_1146
  counterexample: 0:0:0:1:1:0
  error traces:
    [true.((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
     [(<f_1030@16:0> < 100).
      ((<br_f_1151@19:0> = (<f_1030@16:0> < 50)) &&
       ((<br_f_1151@19:1> = <f_1030@16:0>) && (<br_f_1151@19:2> = <f_1030@16:1>)))
      [<br_f_1151@19:0>.((<f_1030@22:0> = (<br_f_1151@19:1> + 1)) && (<f_1030@22:1> = <br_f_1151@19:2>))
       [(not (<f_1030@22:0> < 100)).(<<f_1030@22:2>@25:0> = <f_1030@22:1>)
        [true.(<<br_f_1151@19:3>@27:0> = <<f_1030@22:2>@25:0>)
         [true.(<<f_1030@16:2>@29:0> = <<br_f_1151@19:3>@27:0>)
          [true.(<f_1150@31:0> = <<f_1030@16:2>@29:0>)
           [(not (not (<f_1150@31:0> = 100))).(<fail_1153@34:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(7749)[2]
    horn clauses:
      P[<fail_1153@34:0>](<fail_1153@34:0>:bool)|- bot
      
      P[<f_1150@31:0>](100:int), <fail_1153@34:0> |- P[<fail_1153@34:0>](<fail_1153@34:0>:bool)
      
      P[<<f_1030@16:2>@29:0>](0:int,50:int,<f_1150@31:0>:int)|- P[<f_1150@31:0>](<f_1150@31:0>:int)
      
      P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int),
      P[<<br_f_1151@19:3>@27:0>]((<f_1030@16:0> < 50):bool,<f_1030@16:0>:int,<f_1030@16:1>:int,<<f_1030@16:2>@29:0>:int),
      (<f_1030@16:0> < 100) |- P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,
                                                       <f_1030@16:1>:int,
                                                       <<f_1030@16:2>@29:0>:int)
      
      P[<br_f_1151@19:2>](<br_f_1151@19:0>:bool,<br_f_1151@19:1>:int,<br_f_1151@19:2>:int),
      P[<<f_1030@22:2>@25:0>]((1 + <br_f_1151@19:1>):int,<br_f_1151@19:2>:int,<<br_f_1151@19:3>@27:0>:int),
      <br_f_1151@19:0>
      |- P[<<br_f_1151@19:3>@27:0>](<br_f_1151@19:0>:bool,<br_f_1151@19:1>:int,
                                    <br_f_1151@19:2>:int,<<br_f_1151@19:3>@27:0>:int)
      
      P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int),
      ((<f_1030@22:0> >= 100) && (<<f_1030@22:2>@25:0> = <f_1030@22:1>))
      |- P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,
                                 <<f_1030@22:2>@25:0>:int)
      
      P[<br_f_1151@19:2>](true:bool,(-1 + <f_1030@22:0>):int,<f_1030@22:1>:int)|- P[<f_1030@22:1>](
      <f_1030@22:0>:int,<f_1030@22:1>:int)
      
      P[<f_1030@16:1>](<br_f_1151@19:1>:int,<br_f_1151@19:2>:int),
      ((<br_f_1151@19:1> < 100) && (<br_f_1151@19:0> = (<br_f_1151@19:1> < 50)))
      |- P[<br_f_1151@19:2>](<br_f_1151@19:0>:bool,<br_f_1151@19:1>:int,
                             <br_f_1151@19:2>:int)
      
       ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
    call trees:
      <main_1149@14>
        <f_1030@16>
          <br_f_1151@19>
            <f_1030@22>
            </<f_1030@22:2>@25>
          </<br_f_1151@19:3>@27>
        </<f_1030@16:2>@29>
        <f_1150@31>
          <fail_1153@34>
    inlined horn clauses:
      P[<fail_1153@34:0>](<fail_1153@34:0>:bool)|- bot
      
      P[<<f_1030@16:2>@29:0>](0:int,50:int,100:int), <fail_1153@34:0> |- P[<fail_1153@34:0>](<fail_1153@34:0>:bool)
      
      P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int),
      P[<<f_1030@22:2>@25:0>]((1 + <f_1030@16:0>):int,<f_1030@16:1>:int,<<f_1030@16:2>@29:0>:int), (
      <f_1030@16:0> < 50) |- P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,
                                                     <f_1030@16:1>:int,
                                                     <<f_1030@16:2>@29:0>:int)
      
      P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int),
      ((<f_1030@22:0> >= 100) && (<<f_1030@22:2>@25:0> = <f_1030@22:1>))
      |- P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,
                                 <<f_1030@22:2>@25:0>:int)
      
      P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,<f_1030@22:1>:int), (
      <f_1030@22:0> < 51) |- P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int)
      
       ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
    begin ParamSubstInfer.infer(9404)[3]
      
    end ParamSubstInfer.infer(9404)[3] (0.029996 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(9406)[3]
      
    end RefTypeInfer.elim_coeffs(9406)[3] (0.000000 sec.)
    begin GenHcSolver.solve(9639)[3]
      Horn clauses:
        P[<fail_1153@34:0>](<fail_1153@34:0>:bool)|- bot
        
        P[<<f_1030@16:2>@29:0>](0:int,50:int,100:int), <fail_1153@34:0> |- P[<fail_1153@34:0>](<fail_1153@34:0>:bool)
        
        P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int),
        P[<<f_1030@22:2>@25:0>]((1 + <f_1030@16:0>):int,<f_1030@16:1>:int,<<f_1030@16:2>@29:0>:int),
        (<f_1030@16:0> < 50) |- P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,
                                                        <f_1030@16:1>:int,
                                                        <<f_1030@16:2>@29:0>:int)
        
        P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int),
        ((<f_1030@22:0> >= 100) && (<<f_1030@22:2>@25:0> = <f_1030@22:1>))
        |- P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,
                                   <<f_1030@22:2>@25:0>:int)
        
        P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,<f_1030@22:1>:int), (
        <f_1030@22:0> < 51) |- P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int)
        
         ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
      lower bounds:
        P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
        P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int) = ((<f_1030@22:0> = 1) && (<f_1030@22:1> = 50))
        P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,<<f_1030@22:2>@25:0>:int) = false
        P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,<f_1030@16:1>:int,<<f_1030@16:2>@29:0>:int) = false
        P[<fail_1153@34:0>](<fail_1153@34:0>:bool) = false
      upper bounds:
        P[<<f_1030@16:2>@29:0>](var44:int,var45:int,var46:int) = true
        P[<<f_1030@22:2>@25:0>](var38:int,var39:int,var40:int) = true
      begin GenHcSolver.classify_pids(11724)[4]
        output:
          [<<f_1030@22:2>@25:0>;<<f_1030@16:2>@29:0>]
      end GenHcSolver.classify_pids(11724)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(11735)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(11736)[5]
          begin InterpProver.interpolate_fresh(11737)[6]
            begin InterpProver.interpolate_log(11738)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(11739)[8]
                begin InterpProver.interpolate_simplify(11740)[9]
                  begin InterpProver.interpolate_quick(11753)[10]
                    
                  end InterpProver.interpolate_quick(11753)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(11757)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(11757)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(11740)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(11739)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(11738)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(11737)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(11736)[5] (0.000000 sec.)
        output:
          P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,<<f_1030@22:2>@25:0>:int) = false
          P[<<f_1030@16:2>@29:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,<<f_1030@22:2>@25:0>:int) = false
      end ApronInterface.convex_hull_interpolate(11735)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1153@34:0>](<fail_1153@34:0>:bool)|- bot
        
        P[<f_1030@22:1>](<f_1030@22:0>:int,<<f_1030@22:2>@25:0>:int), (<f_1030@22:0> >= 100) |- bot
        
        P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,<f_1030@22:1>:int), (
        <f_1030@22:0> < 51) |- P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int)
        
         ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
      lower bounds:
        P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
        P[<fail_1153@34:0>](var50:bool) = false
        P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int) = ((<f_1030@22:0> = 1) && (<f_1030@22:1> = 50))
      upper bounds:
        P[<f_1030@22:1>](var57:int,var58:int) = (var57 < 100)
        P[<f_1030@16:1>](var53:int,var54:int) = true
      begin GenHcSolver.classify_pids(14222)[4]
        output:
          [<f_1030@16:1>;<f_1030@22:1>]
      end GenHcSolver.classify_pids(14222)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(14242)[4]
        lb:(((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) || ((<f_1030@16:0> = 1) && (<f_1030@16:1> = 50)))
        nub:(not (<f_1030@16:0> < 100))
        lb':(((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) || ((<f_1030@16:0> = 1) && (<f_1030@16:1> = 50)))
        nub':(not (<f_1030@16:0> < 100))
        begin InterpProver.interpolate(14243)[5]
          begin InterpProver.interpolate_fresh(14244)[6]
            begin InterpProver.interpolate_log(14245)[7]
              input1: (((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) || ((<f_1030@16:0> = 1) && (<f_1030@16:1> = 50)))
              input2: (not (<f_1030@16:0> < 100))
              begin InterpProver.interpolate_check(14246)[8]
                begin InterpProver.interpolate_simplify(14247)[9]
                  begin InterpProver.interpolate_quick(14324)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(14333)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(14334)[12]
                        begin CsisatInterface.interpolate_csisat_log(14335)[13]
                          input1: (0 = v_sep_f_1030_sep_16_sep_0 | 1 = v_sep_f_1030_sep_16_sep_0)
                          input2: 100 <= v_sep_f_1030_sep_16_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(14336)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(14336)[14] (0.001000 sec.)
                          output: (0.02*v_sep_f_1030_sep_16_sep_0 <= 0 | 0.020202020202*v_sep_f_1030_sep_16_sep_0 <= 0.020202020202)
                          
                        end CsisatInterface.interpolate_csisat_log(14335)[13] (0.001000 sec.)
                        after simplification: (v_sep_f_1030_sep_16_sep_0 <= 0 | 2*v_sep_f_1030_sep_16_sep_0 <= 2)
                        after dnf conversion: ((v_sep_f_1030_sep_16_sep_0 <= 0) | (2*v_sep_f_1030_sep_16_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(14334)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(14333)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(14324)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(14247)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(14246)[8] (0.003000 sec.)
              output: (<f_1030@16:0> <= 1)
            end InterpProver.interpolate_log(14245)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(14244)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(14243)[5] (0.003000 sec.)
        output:
          P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = (<f_1030@16:0> <= 1)
          P[<f_1030@22:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = (<f_1030@16:0> <= 1)
      end ApronInterface.convex_hull_interpolate(14242)[4] (0.003000 sec.)
      Horn clauses:
        P[<fail_1153@34:0>](<fail_1153@34:0>:bool)|- bot
        
        P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,<f_1030@22:1>:int), (
        (<f_1030@22:0> < 51) && (<f_1030@22:0> > 1)) |- bot
        
         ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
      lower bounds:
        P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
        P[<fail_1153@34:0>](var62:bool) = false
      upper bounds:
        P[<fail_1153@34:0>](var65:bool) = true
      begin GenHcSolver.classify_pids(15555)[4]
        output:
          [<fail_1153@34:0>]
      end GenHcSolver.classify_pids(15555)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(15558)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(15559)[5]
          begin InterpProver.interpolate_fresh(15560)[6]
            begin InterpProver.interpolate_log(15561)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(15562)[8]
                begin InterpProver.interpolate_simplify(15563)[9]
                  begin InterpProver.interpolate_quick(15576)[10]
                    
                  end InterpProver.interpolate_quick(15576)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(15580)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(15580)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(15563)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(15562)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(15561)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(15560)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(15559)[5] (0.000000 sec.)
        output:
          P[<fail_1153@34:0>](var62:bool) = false
      end ApronInterface.convex_hull_interpolate(15558)[4] (0.000000 sec.)
      Horn clauses:
        P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,<f_1030@22:1>:int), (
        (<f_1030@22:0> < 51) && (<f_1030@22:0> > 1)) |- bot
        
         ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
      lower bounds:
        P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
      upper bounds:
        P[<f_1030@16:1>](var66:int,var67:int) = ((var66 <= 0) || (var66 >= 50))
      begin GenHcSolver.classify_pids(16587)[4]
        output:
          [<f_1030@16:1>]
      end GenHcSolver.classify_pids(16587)[4] (0.000000 sec.)
      lb:((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
      nub:(not ((<f_1030@16:0> <= 0) || (<f_1030@16:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(16590)[4]
        lb:((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
        nub:(not ((<f_1030@16:0> <= 0) || (<f_1030@16:0> >= 50)))
        lb':((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
        nub':(not ((<f_1030@16:0> <= 0) || (<f_1030@16:0> >= 50)))
        begin InterpProver.interpolate(16591)[5]
          begin InterpProver.interpolate_fresh(16592)[6]
            begin InterpProver.interpolate_log(16593)[7]
              input1: ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
              input2: (not ((<f_1030@16:0> <= 0) || (<f_1030@16:0> >= 50)))
              begin InterpProver.interpolate_check(16594)[8]
                begin InterpProver.interpolate_simplify(16595)[9]
                  begin InterpProver.interpolate_quick(16651)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(16660)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(16661)[12]
                        begin CsisatInterface.interpolate_csisat_log(16662)[13]
                          input1: 0 = v_sep_f_1030_sep_16_sep_0
                          input2: (1 <= v_sep_f_1030_sep_16_sep_0 & (1 + v_sep_f_1030_sep_16_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(16663)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(16663)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_16_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(16662)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_16_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_f_1030_sep_16_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(16661)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(16660)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(16651)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(16595)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(16594)[8] (0.001999 sec.)
              output: (<f_1030@16:0> <= 0)
            end InterpProver.interpolate_log(16593)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(16592)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(16591)[5] (0.001999 sec.)
        output:
          P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = (<f_1030@16:0> <= 0)
      end ApronInterface.convex_hull_interpolate(16590)[4] (0.001999 sec.)
      begin HcSolver.check_validity(16819)[4]
        input:
          P[<fail_1153@34:0>](<fail_1153@34:0>:bool)|- bot
          
          P[<<f_1030@16:2>@29:0>](0:int,50:int,100:int), <fail_1153@34:0> |- P[<fail_1153@34:0>](<fail_1153@34:0>:bool)
          
          P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int),
          P[<<f_1030@22:2>@25:0>]((1 + <f_1030@16:0>):int,<f_1030@16:1>:int,<<f_1030@16:2>@29:0>:int),
          (<f_1030@16:0> < 50) |- P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,
                                                          <f_1030@16:1>:int,
                                                          <<f_1030@16:2>@29:0>:int)
          
          P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int),
          ((<f_1030@22:0> >= 100) && (<<f_1030@22:2>@25:0> = <f_1030@22:1>))
          |- P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,
                                     <<f_1030@22:2>@25:0>:int)
          
          P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,<f_1030@22:1>:int), (
          <f_1030@22:0> < 51) |- P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int)
          
           ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(16819)[4] (0.001000 sec.)
      solution:
        P[<fail_1153@34:0>](var62:bool) = false
        P[<<f_1030@16:2>@29:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,<<f_1030@22:2>@25:0>:int) = false
        P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,<<f_1030@22:2>@25:0>:int) = false
        P[<f_1030@22:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = (<f_1030@16:0> <= 1)
        P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = (<f_1030@16:0> <= 0)
    end GenHcSolver.solve(9639)[3] (0.037994 sec.)
    begin GenHcSolver.solve(17162)[3]
      Horn clauses:
        P[<fail_1153@34:0>](<fail_1153@34:0>:bool)|- bot
        
        P[<<f_1030@16:2>@29:0>](0:int,50:int,100:int), <fail_1153@34:0> |- P[<fail_1153@34:0>](<fail_1153@34:0>:bool)
        
        P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int),
        P[<<f_1030@22:2>@25:0>]((1 + <f_1030@16:0>):int,<f_1030@16:1>:int,<<f_1030@16:2>@29:0>:int),
        (<f_1030@16:0> < 50) |- P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,
                                                        <f_1030@16:1>:int,
                                                        <<f_1030@16:2>@29:0>:int)
        
        P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int),
        ((<f_1030@22:0> >= 100) && (<<f_1030@22:2>@25:0> = <f_1030@22:1>))
        |- P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,
                                   <<f_1030@22:2>@25:0>:int)
        
        P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,<f_1030@22:1>:int), (
        <f_1030@22:0> < 51) |- P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int)
        
         ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
      lower bounds:
        P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
        P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int) = ((<f_1030@22:0> = 1) && (<f_1030@22:1> = 50))
        P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,<<f_1030@22:2>@25:0>:int) = false
        P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,<f_1030@16:1>:int,<<f_1030@16:2>@29:0>:int) = false
        P[<fail_1153@34:0>](<fail_1153@34:0>:bool) = false
      upper bounds:
        P[<<f_1030@16:2>@29:0>](var77:int,var78:int,var79:int) = true
        P[<<f_1030@22:2>@25:0>](var71:int,var72:int,var73:int) = true
      begin GenHcSolver.classify_pids(19247)[4]
        output:
          [<<f_1030@22:2>@25:0>;<<f_1030@16:2>@29:0>]
      end GenHcSolver.classify_pids(19247)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(19258)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(19261)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(19261)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(19266)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(19266)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(19269)[5]
          begin InterpProver.interpolate_fresh(19270)[6]
            begin InterpProver.interpolate_log(19271)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(19272)[8]
                begin InterpProver.interpolate_simplify(19273)[9]
                  begin InterpProver.interpolate_quick(19288)[10]
                    
                  end InterpProver.interpolate_quick(19288)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(19292)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(19292)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(19273)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(19272)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(19271)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(19270)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(19269)[5] (0.000000 sec.)
        output:
          P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,<<f_1030@22:2>@25:0>:int) = false
          P[<<f_1030@16:2>@29:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,<<f_1030@22:2>@25:0>:int) = false
      end ApronInterface.convex_hull_interpolate(19258)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1153@34:0>](<fail_1153@34:0>:bool)|- bot
        
        P[<f_1030@22:1>](<f_1030@22:0>:int,<<f_1030@22:2>@25:0>:int), (<f_1030@22:0> >= 100) |- bot
        
        P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,<f_1030@22:1>:int), (
        <f_1030@22:0> < 51) |- P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int)
        
         ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
      lower bounds:
        P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
        P[<fail_1153@34:0>](var83:bool) = false
        P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int) = ((<f_1030@22:0> = 1) && (<f_1030@22:1> = 50))
      upper bounds:
        P[<f_1030@22:1>](var90:int,var91:int) = (var90 < 100)
        P[<f_1030@16:1>](var86:int,var87:int) = true
      begin GenHcSolver.classify_pids(21764)[4]
        output:
          [<f_1030@16:1>;<f_1030@22:1>]
      end GenHcSolver.classify_pids(21764)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(21784)[4]
        lb:(((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) || ((<f_1030@16:0> = 1) && (<f_1030@16:1> = 50)))
        nub:(not (<f_1030@16:0> < 100))
        begin ExtFormula.Formula.case_analysis_boolean(21816)[5]
          ts: ((<f_1030@16:1> = 50) && ((<f_1030@16:0> = 0) || (<f_1030@16:0> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(21816)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(21830)[5]
          ts: (<f_1030@16:0> >= 100)
          
        end ExtFormula.Formula.case_analysis_boolean(21830)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@16:1>) = 0) && (((1 + (-1 * <f_1030@16:0>)) >= 0) && (<f_1030@16:0> >= 0)))
        nub':((-100 + <f_1030@16:0>) >= 0)
        begin InterpProver.interpolate(21835)[5]
          begin InterpProver.interpolate_fresh(21836)[6]
            begin InterpProver.interpolate_log(21837)[7]
              input1: (((-50 + <f_1030@16:1>) = 0) && (((1 + (-1 * <f_1030@16:0>)) >= 0) && (<f_1030@16:0> >= 0)))
              input2: ((-100 + <f_1030@16:0>) >= 0)
              begin InterpProver.interpolate_check(21838)[8]
                begin InterpProver.interpolate_simplify(21839)[9]
                  begin InterpProver.interpolate_quick(21936)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(21945)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(21946)[12]
                        begin CsisatInterface.interpolate_csisat_log(21947)[13]
                          input1: (0 <= v_sep_f_1030_sep_16_sep_0 & v_sep_f_1030_sep_16_sep_0 <= 1)
                          input2: 100 <= v_sep_f_1030_sep_16_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(21948)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(21948)[14] (0.001000 sec.)
                          output: 0.020202020202*v_sep_f_1030_sep_16_sep_0 <= 0.020202020202
                          
                        end CsisatInterface.interpolate_csisat_log(21947)[13] (0.001000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_16_sep_0 <= 2
                        after dnf conversion: ((2*v_sep_f_1030_sep_16_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(21946)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(21945)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(21936)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(21839)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(21838)[8] (0.002000 sec.)
              output: (<f_1030@16:0> <= 1)
            end InterpProver.interpolate_log(21837)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(21836)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(21835)[5] (0.002000 sec.)
        output:
          P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = (<f_1030@16:0> <= 1)
          P[<f_1030@22:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = (<f_1030@16:0> <= 1)
      end ApronInterface.convex_hull_interpolate(21784)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1153@34:0>](<fail_1153@34:0>:bool)|- bot
        
        P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,<f_1030@22:1>:int), (
        (<f_1030@22:0> < 51) && (<f_1030@22:0> > 1)) |- bot
        
         ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
      lower bounds:
        P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
        P[<fail_1153@34:0>](var95:bool) = false
      upper bounds:
        P[<fail_1153@34:0>](var98:bool) = true
      begin GenHcSolver.classify_pids(23160)[4]
        output:
          [<fail_1153@34:0>]
      end GenHcSolver.classify_pids(23160)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(23163)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(23166)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(23166)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(23171)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(23171)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(23174)[5]
          begin InterpProver.interpolate_fresh(23175)[6]
            begin InterpProver.interpolate_log(23176)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(23177)[8]
                begin InterpProver.interpolate_simplify(23178)[9]
                  begin InterpProver.interpolate_quick(23193)[10]
                    
                  end InterpProver.interpolate_quick(23193)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(23197)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(23197)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(23178)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(23177)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(23176)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(23175)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(23174)[5] (0.001000 sec.)
        output:
          P[<fail_1153@34:0>](var95:bool) = false
      end ApronInterface.convex_hull_interpolate(23163)[4] (0.001000 sec.)
      Horn clauses:
        P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,<f_1030@22:1>:int), (
        (<f_1030@22:0> < 51) && (<f_1030@22:0> > 1)) |- bot
        
         ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
      lower bounds:
        P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
      upper bounds:
        P[<f_1030@16:1>](var99:int,var100:int) = ((var99 <= 0) || (var99 >= 50))
      begin GenHcSolver.classify_pids(24211)[4]
        output:
          [<f_1030@16:1>]
      end GenHcSolver.classify_pids(24211)[4] (0.000000 sec.)
      lb:((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
      nub:(not ((<f_1030@16:0> <= 0) || (<f_1030@16:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(24214)[4]
        lb:((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
        nub:(not ((<f_1030@16:0> <= 0) || (<f_1030@16:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(24224)[5]
          ts: ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(24224)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(24244)[5]
          ts: ((<f_1030@16:0> < 50) && (<f_1030@16:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(24244)[5] (0.001000 sec.)
        lb':(((-50 + <f_1030@16:1>) = 0) && (<f_1030@16:0> = 0))
        nub':(((49 + (-1 * <f_1030@16:0>)) >= 0) && ((-1 + <f_1030@16:0>) >= 0))
        begin InterpProver.interpolate(24250)[5]
          begin InterpProver.interpolate_fresh(24251)[6]
            begin InterpProver.interpolate_log(24252)[7]
              input1: (((-50 + <f_1030@16:1>) = 0) && (<f_1030@16:0> = 0))
              input2: (((49 + (-1 * <f_1030@16:0>)) >= 0) && ((-1 + <f_1030@16:0>) >= 0))
              begin InterpProver.interpolate_check(24253)[8]
                begin InterpProver.interpolate_simplify(24254)[9]
                  begin InterpProver.interpolate_quick(24316)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(24325)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(24326)[12]
                        begin CsisatInterface.interpolate_csisat_log(24327)[13]
                          input1: 0 = v_sep_f_1030_sep_16_sep_0
                          input2: (1 <= v_sep_f_1030_sep_16_sep_0 & v_sep_f_1030_sep_16_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(24328)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(24328)[14] (0.001000 sec.)
                          output: 2*v_sep_f_1030_sep_16_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(24327)[13] (0.001000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_16_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_f_1030_sep_16_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(24326)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(24325)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(24316)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(24254)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(24253)[8] (0.001000 sec.)
              output: (<f_1030@16:0> <= 0)
            end InterpProver.interpolate_log(24252)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(24251)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(24250)[5] (0.001000 sec.)
        output:
          P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = (<f_1030@16:0> <= 0)
      end ApronInterface.convex_hull_interpolate(24214)[4] (0.002000 sec.)
      begin HcSolver.check_validity(24486)[4]
        input:
          P[<fail_1153@34:0>](<fail_1153@34:0>:bool)|- bot
          
          P[<<f_1030@16:2>@29:0>](0:int,50:int,100:int), <fail_1153@34:0> |- P[<fail_1153@34:0>](<fail_1153@34:0>:bool)
          
          P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int),
          P[<<f_1030@22:2>@25:0>]((1 + <f_1030@16:0>):int,<f_1030@16:1>:int,<<f_1030@16:2>@29:0>:int),
          (<f_1030@16:0> < 50) |- P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,
                                                          <f_1030@16:1>:int,
                                                          <<f_1030@16:2>@29:0>:int)
          
          P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int),
          ((<f_1030@22:0> >= 100) && (<<f_1030@22:2>@25:0> = <f_1030@22:1>))
          |- P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,
                                     <<f_1030@22:2>@25:0>:int)
          
          P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,<f_1030@22:1>:int), (
          <f_1030@22:0> < 51) |- P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int)
          
           ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(24486)[4] (0.002000 sec.)
      solution:
        P[<fail_1153@34:0>](var95:bool) = false
        P[<<f_1030@16:2>@29:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,<<f_1030@22:2>@25:0>:int) = false
        P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,<<f_1030@22:2>@25:0>:int) = false
        P[<f_1030@22:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = (<f_1030@16:0> <= 1)
        P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int) = (<f_1030@16:0> <= 0)
    end GenHcSolver.solve(17162)[3] (0.036995 sec.)
    begin YhornInterface.solve(24829)[3]
      begin HcSolver.solve_ub(24830)[4]
        encoded:
          P[<fail_1153@34:0>](<fail_1153@34:0>:int)|- bot
          
          P[<<f_1030@16:2>@29:0>](0:int,50:int,100:int), (<fail_1153@34:0> = 1)
          |- P[<fail_1153@34:0>](<fail_1153@34:0>:int)
          
          P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int),
          P[<<f_1030@22:2>@25:0>]((1 + <f_1030@16:0>):int,<f_1030@16:1>:int,<<f_1030@16:2>@29:0>:int),
          (<f_1030@16:0> < 50) |- P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,
                                                          <f_1030@16:1>:int,
                                                          <<f_1030@16:2>@29:0>:int)
          
          P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int),
          ((<f_1030@22:0> >= 100) && (<<f_1030@22:2>@25:0> = <f_1030@22:1>))
          |- P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,
                                     <<f_1030@22:2>@25:0>:int)
          
          P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,<f_1030@22:1>:int), (
          <f_1030@22:0> < 51) |- P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int)
          
           ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
        input to Yhorn:
          P[<fail_1153@34:0>](<fail_1153@34:0>:int)|- bot
          
          P[<<f_1030@16:2>@29:0>](var101:int,var102:int,var103:int),
          ((var103 = 100) && ((var102 = 50) && ((var101 = 0) && (<fail_1153@34:0> = 1))))
          |- P[<fail_1153@34:0>](<fail_1153@34:0>:int)
          
          P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int),
          P[<<f_1030@22:2>@25:0>](var104:int,<f_1030@16:1>:int,<<f_1030@16:2>@29:0>:int),
          ((var104 = (1 + <f_1030@16:0>)) && (<f_1030@16:0> < 50))
          |- P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,<f_1030@16:1>:int,
                                     <<f_1030@16:2>@29:0>:int)
          
          P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int),
          ((<<f_1030@22:2>@25:0> = <f_1030@22:1>) && (<f_1030@22:0> >= 100))
          |- P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,
                                     <<f_1030@22:2>@25:0>:int)
          
          P[<f_1030@16:1>](var105:int,<f_1030@22:1>:int), (((1 + var105) = <f_1030@22:0>) && (<f_1030@22:0> < 51))
          |- P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1153_sep_34_sep_0($102)) -> 1=0.
(($102-1=0) & ($103=0) & ($104-50=0) & ($105-100=0)) & (v_sep_f_1030_sep_16_sep_2_sep_29_sep_0($103,$104,$105)) -> v_sep_fail_1153_sep_34_sep_0($102).
(($106-50<0) & (-$106+$107-1=0)) & (v_sep_f_1030_sep_22_sep_2_sep_25_sep_0($107,$108,$109)) & (v_sep_f_1030_sep_16_sep_1($106,$108)) -> v_sep_f_1030_sep_16_sep_2_sep_29_sep_0($106,$108,$109).
(($110-100>=0) & ($111-$112=0)) & (v_sep_f_1030_sep_22_sep_1($110,$112)) -> v_sep_f_1030_sep_22_sep_2_sep_25_sep_0($110,$112,$111).
(($110-51<0) & (-$110+$113+1=0)) & (v_sep_f_1030_sep_16_sep_1($113,$112)) -> v_sep_f_1030_sep_22_sep_1($110,$112).
($106=0) & ($108-50=0) -> v_sep_f_1030_sep_16_sep_1($106,$108).


v_sep_f_1030_sep_16_sep_1: X
v_sep_f_1030_sep_16_sep_2_sep_29_sep_0: X
v_sep_f_1030_sep_22_sep_1: X
v_sep_f_1030_sep_22_sep_2_sep_25_sep_0: X
v_sep_fail_1153_sep_34_sep_0: X
.......
v_sep_f_1030_sep_16_sep_1: X
v_sep_f_1030_sep_16_sep_2_sep_29_sep_0: X
v_sep_f_1030_sep_22_sep_1: X
v_sep_f_1030_sep_22_sep_2_sep_25_sep_0: X
v_sep_fail_1153_sep_34_sep_0: X
...
v_sep_f_1030_sep_16_sep_1: X
v_sep_f_1030_sep_16_sep_2_sep_29_sep_0: X
v_sep_f_1030_sep_22_sep_1: X
v_sep_f_1030_sep_22_sep_2_sep_25_sep_0: X
v_sep_fail_1153_sep_34_sep_0: X
.....
v_sep_f_1030_sep_16_sep_1: X
v_sep_f_1030_sep_16_sep_2_sep_29_sep_0: X
v_sep_f_1030_sep_22_sep_1: X
v_sep_f_1030_sep_22_sep_2_sep_25_sep_0: X
v_sep_fail_1153_sep_34_sep_0: X
......
v_sep_f_1030_sep_16_sep_1: X
v_sep_f_1030_sep_16_sep_2_sep_29_sep_0: X
v_sep_f_1030_sep_22_sep_1: X
v_sep_f_1030_sep_22_sep_2_sep_25_sep_0: X
v_sep_fail_1153_sep_34_sep_0: X
.......(0=0) & (v_sep_fail_1153_sep_34_sep_0($102)) -> 1=0.
(($102-1=0) & ($103=0) & ($104-50=0) & ($105-100=0)) & (v_sep_f_1030_sep_16_sep_2_sep_29_sep_0($103,$104,$105)) -> v_sep_fail_1153_sep_34_sep_0($102).
(($106-50<0) & (-$106+$107-1=0)) & (v_sep_f_1030_sep_22_sep_2_sep_25_sep_0($107,$108,$109)) & (v_sep_f_1030_sep_16_sep_1($106,$108)) -> v_sep_f_1030_sep_16_sep_2_sep_29_sep_0($106,$108,$109).
(($110-100>=0) & ($111-$112=0)) & (v_sep_f_1030_sep_22_sep_1($110,$112)) -> v_sep_f_1030_sep_22_sep_2_sep_25_sep_0($110,$112,$111).
(($110-51<0) & (-$110+$113+1=0)) & (v_sep_f_1030_sep_16_sep_1($113,$112)) -> v_sep_f_1030_sep_22_sep_1($110,$112).
($106=0) & ($108-50=0) -> v_sep_f_1030_sep_16_sep_1($106,$108).

           ((<f_1030@16:1> = 50) && (<f_1030@16:0> = 0)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
        solution:
          P[<f_1030@16:1>]($131:int,$133:int) = ($133 <= 50)
          P[<<f_1030@16:2>@29:0>]($117:int,$119:int,$121:int) = ($121 <= 50)
          P[<f_1030@22:1>]($136:int,$138:int) = ($138 <= 50)
          P[<<f_1030@22:2>@25:0>]($124:int,$126:int,$128:int) = ((2 * $128) <= (50 + $126))
          P[<fail_1153@34:0>]($114:bool) = false
        
      end HcSolver.solve_ub(24830)[4] (0.021996 sec.)
      begin HcSolver.check_validity(25120)[4]
        input:
          P[<fail_1153@34:0>](<fail_1153@34:0>:bool)|- bot
          
          P[<<f_1030@16:2>@29:0>](0:int,50:int,100:int), <fail_1153@34:0> |- P[<fail_1153@34:0>](<fail_1153@34:0>:bool)
          
          P[<f_1030@16:1>](<f_1030@16:0>:int,<f_1030@16:1>:int),
          P[<<f_1030@22:2>@25:0>]((1 + <f_1030@16:0>):int,<f_1030@16:1>:int,<<f_1030@16:2>@29:0>:int),
          (<f_1030@16:0> < 50) |- P[<<f_1030@16:2>@29:0>](<f_1030@16:0>:int,
                                                          <f_1030@16:1>:int,
                                                          <<f_1030@16:2>@29:0>:int)
          
          P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int),
          ((<f_1030@22:0> >= 100) && (<<f_1030@22:2>@25:0> = <f_1030@22:1>))
          |- P[<<f_1030@22:2>@25:0>](<f_1030@22:0>:int,<f_1030@22:1>:int,
                                     <<f_1030@22:2>@25:0>:int)
          
          P[<f_1030@16:1>]((-1 + <f_1030@22:0>):int,<f_1030@22:1>:int), (
          <f_1030@22:0> < 51) |- P[<f_1030@22:1>](<f_1030@22:0>:int,<f_1030@22:1>:int)
          
           ((<f_1030@16:0> = 0) && (<f_1030@16:1> = 50)) |- P[<f_1030@16:1>](<f_1030@16:0>:int,
                                                                    <f_1030@16:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(25120)[4] (0.008999 sec.)
      solution:
        P[<f_1030@16:1>]($131:int,$133:int) = ($133 <= 50)
        P[<<f_1030@16:2>@29:0>]($117:int,$119:int,$121:int) = ($121 <= 50)
        P[<f_1030@22:1>]($136:int,$138:int) = ($138 <= 50)
        P[<<f_1030@22:2>@25:0>]($124:int,$126:int,$128:int) = ((2 * $128) <= (50 + $126))
        P[<fail_1153@34:0>]($114:bool) = false
    end YhornInterface.solve(24829)[3] (0.030995 sec.)
    
  end RefTypeInfer.infer_etrs(7749)[2] (0.140979 sec.)
  refinement types:
    main_1149: X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 0)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 1)} -> (v3:{v3:int | false} -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    k_main_1146: var109:unit -> X
  abstraction types:
    main_1149: X
    f_1030: var110:int -> var111:int[var111 -> (var110 <= 0),
                                     var111 -> (var110 <= 1)] -> (var112:int -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:bool -> (v2:unit -> X) -> X
    k_main_1146: var109:unit -> X
  
end AbsTypeInfer.refine(7748)[1] (0.141979 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int -> int[x_1 <= 1; x_1 <= 0] -> (int -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1149 ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [2/2] ... --> 
  f_1150 [2/2] ... --> 
  fail_1153 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(26426)[1]
  program:
    main_1149  | true = (f_1030 0
                                50
                                f_1150)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | b_1152 = (f_1030 (x_1031 + 1)
                                                               y_1032
                                                               k_f_1085)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | (not b_1152) = (f_1030 (
                                                                    x_1031 + 1)
                                                                    (y_1032 + 1)
                                                                    k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (x_1031 < 100) = (br_f_1151 (x_1031 < 50)
                                                                x_1031
                                                                y_1032
                                                                k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (not (x_1031 < 100)) = (k_f_1085 y_1032)
    f_1150 x_1124 | (not (x_1124 = 100)) = (k_main_1146 ())
    f_1150 x_1124 | (not (not (x_1124 = 100))) = (fail_1153 true
                                                            k_main_1146)
    fail_1153 b k | true = (fail ())
    k_main_1146 x_1118 | true = end
    main_1149:X
    br_f_1151:bool -> int -> int -> (int -> X) -> X
    f_1030:int -> int -> (int -> X) -> X
    f_1150:int -> X
    fail_1153:bool -> (unit -> X) -> X
    k_main_1146:unit -> X
  inlined functions: br_f_1151,f_1150,k_main_1146
  counterexample: 0:0:0:0:0:1:1:0
  error traces:
    [true.((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
     [(<f_1030@39:0> < 100).
      ((<br_f_1151@42:0> = (<f_1030@39:0> < 50)) &&
       ((<br_f_1151@42:1> = <f_1030@39:0>) && (<br_f_1151@42:2> = <f_1030@39:1>)))
      [<br_f_1151@42:0>.((<f_1030@45:0> = (<br_f_1151@42:1> + 1)) && (<f_1030@45:1> = <br_f_1151@42:2>))
       [(<f_1030@45:0> < 100).
        ((<br_f_1151@48:0> = (<f_1030@45:0> < 50)) &&
         ((<br_f_1151@48:1> = <f_1030@45:0>) && (<br_f_1151@48:2> = <f_1030@45:1>)))
        [<br_f_1151@48:0>.((<f_1030@51:0> = (<br_f_1151@48:1> + 1)) && (<f_1030@51:1> = <br_f_1151@48:2>))
         [(not (<f_1030@51:0> < 100)).(<<f_1030@51:2>@54:0> = <f_1030@51:1>)
          [true.(<<br_f_1151@48:3>@56:0> = <<f_1030@51:2>@54:0>)
           [true.(<<f_1030@45:2>@58:0> = <<br_f_1151@48:3>@56:0>)
            [true.(<<br_f_1151@42:3>@60:0> = <<f_1030@45:2>@58:0>)
             [true.(<<f_1030@39:2>@62:0> = <<br_f_1151@42:3>@60:0>)
              [true.(<f_1150@64:0> = <<f_1030@39:2>@62:0>)
               [(not (not (<f_1150@64:0> = 100))).(<fail_1153@67:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(26427)[2]
    horn clauses:
      P[<fail_1153@67:0>](<fail_1153@67:0>:bool)|- bot
      
      P[<f_1150@64:0>](100:int), <fail_1153@67:0> |- P[<fail_1153@67:0>](<fail_1153@67:0>:bool)
      
      P[<<f_1030@39:2>@62:0>](0:int,50:int,<f_1150@64:0>:int)|- P[<f_1150@64:0>](<f_1150@64:0>:int)
      
      P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int),
      P[<<br_f_1151@42:3>@60:0>]((<f_1030@39:0> < 50):bool,<f_1030@39:0>:int,<f_1030@39:1>:int,<<f_1030@39:2>@62:0>:int),
      (<f_1030@39:0> < 100) |- P[<<f_1030@39:2>@62:0>](<f_1030@39:0>:int,
                                                       <f_1030@39:1>:int,
                                                       <<f_1030@39:2>@62:0>:int)
      
      P[<br_f_1151@42:2>](<br_f_1151@42:0>:bool,<br_f_1151@42:1>:int,<br_f_1151@42:2>:int),
      P[<<f_1030@45:2>@58:0>]((1 + <br_f_1151@42:1>):int,<br_f_1151@42:2>:int,<<br_f_1151@42:3>@60:0>:int),
      <br_f_1151@42:0>
      |- P[<<br_f_1151@42:3>@60:0>](<br_f_1151@42:0>:bool,<br_f_1151@42:1>:int,
                                    <br_f_1151@42:2>:int,<<br_f_1151@42:3>@60:0>:int)
      
      P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int),
      P[<<br_f_1151@48:3>@56:0>]((<f_1030@45:0> < 50):bool,<f_1030@45:0>:int,<f_1030@45:1>:int,<<f_1030@45:2>@58:0>:int),
      (<f_1030@45:0> < 100) |- P[<<f_1030@45:2>@58:0>](<f_1030@45:0>:int,
                                                       <f_1030@45:1>:int,
                                                       <<f_1030@45:2>@58:0>:int)
      
      P[<br_f_1151@48:2>](<br_f_1151@48:0>:bool,<br_f_1151@48:1>:int,<br_f_1151@48:2>:int),
      P[<<f_1030@51:2>@54:0>]((1 + <br_f_1151@48:1>):int,<br_f_1151@48:2>:int,<<br_f_1151@48:3>@56:0>:int),
      <br_f_1151@48:0>
      |- P[<<br_f_1151@48:3>@56:0>](<br_f_1151@48:0>:bool,<br_f_1151@48:1>:int,
                                    <br_f_1151@48:2>:int,<<br_f_1151@48:3>@56:0>:int)
      
      P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int),
      ((<f_1030@51:0> >= 100) && (<<f_1030@51:2>@54:0> = <f_1030@51:1>))
      |- P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,
                                 <<f_1030@51:2>@54:0>:int)
      
      P[<br_f_1151@48:2>](true:bool,(-1 + <f_1030@51:0>):int,<f_1030@51:1>:int)|- P[<f_1030@51:1>](
      <f_1030@51:0>:int,<f_1030@51:1>:int)
      
      P[<f_1030@45:1>](<br_f_1151@48:1>:int,<br_f_1151@48:2>:int),
      ((<br_f_1151@48:1> < 100) && (<br_f_1151@48:0> = (<br_f_1151@48:1> < 50)))
      |- P[<br_f_1151@48:2>](<br_f_1151@48:0>:bool,<br_f_1151@48:1>:int,
                             <br_f_1151@48:2>:int)
      
      P[<br_f_1151@42:2>](true:bool,(-1 + <f_1030@45:0>):int,<f_1030@45:1>:int)|- P[<f_1030@45:1>](
      <f_1030@45:0>:int,<f_1030@45:1>:int)
      
      P[<f_1030@39:1>](<br_f_1151@42:1>:int,<br_f_1151@42:2>:int),
      ((<br_f_1151@42:1> < 100) && (<br_f_1151@42:0> = (<br_f_1151@42:1> < 50)))
      |- P[<br_f_1151@42:2>](<br_f_1151@42:0>:bool,<br_f_1151@42:1>:int,
                             <br_f_1151@42:2>:int)
      
       ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
    call trees:
      <main_1149@37>
        <f_1030@39>
          <br_f_1151@42>
            <f_1030@45>
              <br_f_1151@48>
                <f_1030@51>
                </<f_1030@51:2>@54>
              </<br_f_1151@48:3>@56>
            </<f_1030@45:2>@58>
          </<br_f_1151@42:3>@60>
        </<f_1030@39:2>@62>
        <f_1150@64>
          <fail_1153@67>
    inlined horn clauses:
      P[<fail_1153@67:0>](<fail_1153@67:0>:bool)|- bot
      
      P[<<f_1030@39:2>@62:0>](0:int,50:int,100:int), <fail_1153@67:0> |- P[<fail_1153@67:0>](<fail_1153@67:0>:bool)
      
      P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int),
      P[<<f_1030@45:2>@58:0>]((1 + <f_1030@39:0>):int,<f_1030@39:1>:int,<<f_1030@39:2>@62:0>:int), (
      <f_1030@39:0> < 50) |- P[<<f_1030@39:2>@62:0>](<f_1030@39:0>:int,
                                                     <f_1030@39:1>:int,
                                                     <<f_1030@39:2>@62:0>:int)
      
      P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int),
      P[<<f_1030@51:2>@54:0>]((1 + <f_1030@45:0>):int,<f_1030@45:1>:int,<<f_1030@45:2>@58:0>:int), (
      <f_1030@45:0> < 50) |- P[<<f_1030@45:2>@58:0>](<f_1030@45:0>:int,
                                                     <f_1030@45:1>:int,
                                                     <<f_1030@45:2>@58:0>:int)
      
      P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int),
      ((<f_1030@51:0> >= 100) && (<<f_1030@51:2>@54:0> = <f_1030@51:1>))
      |- P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,
                                 <<f_1030@51:2>@54:0>:int)
      
      P[<f_1030@45:1>]((-1 + <f_1030@51:0>):int,<f_1030@51:1>:int), (
      <f_1030@51:0> < 51) |- P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int)
      
      P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
      <f_1030@45:0> < 51) |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
      
       ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
    begin ParamSubstInfer.infer(28913)[3]
      
    end ParamSubstInfer.infer(28913)[3] (0.061991 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(28915)[3]
      
    end RefTypeInfer.elim_coeffs(28915)[3] (0.000000 sec.)
    begin GenHcSolver.solve(29206)[3]
      Horn clauses:
        P[<fail_1153@67:0>](<fail_1153@67:0>:bool)|- bot
        
        P[<<f_1030@39:2>@62:0>](0:int,50:int,100:int), <fail_1153@67:0> |- P[<fail_1153@67:0>](<fail_1153@67:0>:bool)
        
        P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int),
        P[<<f_1030@45:2>@58:0>]((1 + <f_1030@39:0>):int,<f_1030@39:1>:int,<<f_1030@39:2>@62:0>:int),
        (<f_1030@39:0> < 50) |- P[<<f_1030@39:2>@62:0>](<f_1030@39:0>:int,
                                                        <f_1030@39:1>:int,
                                                        <<f_1030@39:2>@62:0>:int)
        
        P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int),
        P[<<f_1030@51:2>@54:0>]((1 + <f_1030@45:0>):int,<f_1030@45:1>:int,<<f_1030@45:2>@58:0>:int),
        (<f_1030@45:0> < 50) |- P[<<f_1030@45:2>@58:0>](<f_1030@45:0>:int,
                                                        <f_1030@45:1>:int,
                                                        <<f_1030@45:2>@58:0>:int)
        
        P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int),
        ((<f_1030@51:0> >= 100) && (<<f_1030@51:2>@54:0> = <f_1030@51:1>))
        |- P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,
                                   <<f_1030@51:2>@54:0>:int)
        
        P[<f_1030@45:1>]((-1 + <f_1030@51:0>):int,<f_1030@51:1>:int), (
        <f_1030@51:0> < 51) |- P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int)
        
        P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
        <f_1030@45:0> < 51) |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
        
         ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
      lower bounds:
        P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
        P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int) = ((<f_1030@45:0> = 1) && (<f_1030@45:1> = 50))
        P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int) = ((<f_1030@51:0> = 2) && (<f_1030@51:1> = 50))
        P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@54:0>:int) = false
        P[<<f_1030@45:2>@58:0>](<f_1030@45:0>:int,<f_1030@45:1>:int,<<f_1030@45:2>@58:0>:int) = false
        P[<<f_1030@39:2>@62:0>](<f_1030@39:0>:int,<f_1030@39:1>:int,<<f_1030@39:2>@62:0>:int) = false
        P[<fail_1153@67:0>](<fail_1153@67:0>:bool) = false
      upper bounds:
        P[<<f_1030@39:2>@62:0>](var130:int,var131:int,var132:int) = true
        P[<<f_1030@45:2>@58:0>](var124:int,var125:int,var126:int) = true
        P[<<f_1030@51:2>@54:0>](var118:int,var119:int,var120:int) = true
      begin GenHcSolver.classify_pids(33135)[4]
        output:
          [<<f_1030@51:2>@54:0>;<<f_1030@45:2>@58:0>;<<f_1030@39:2>@62:0>]
      end GenHcSolver.classify_pids(33135)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(33156)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(33157)[5]
          begin InterpProver.interpolate_fresh(33158)[6]
            begin InterpProver.interpolate_log(33159)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(33160)[8]
                begin InterpProver.interpolate_simplify(33161)[9]
                  begin InterpProver.interpolate_quick(33174)[10]
                    
                  end InterpProver.interpolate_quick(33174)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(33178)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(33178)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(33161)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(33160)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(33159)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(33158)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(33157)[5] (0.000000 sec.)
        output:
          P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@54:0>:int) = false
          P[<<f_1030@45:2>@58:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@54:0>:int) = false
          P[<<f_1030@39:2>@62:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@54:0>:int) = false
      end ApronInterface.convex_hull_interpolate(33156)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1153@67:0>](<fail_1153@67:0>:bool)|- bot
        
        P[<f_1030@51:1>](<f_1030@51:0>:int,<<f_1030@51:2>@54:0>:int), (<f_1030@51:0> >= 100) |- bot
        
        P[<f_1030@45:1>]((-1 + <f_1030@51:0>):int,<f_1030@51:1>:int), (
        <f_1030@51:0> < 51) |- P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int)
        
        P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
        <f_1030@45:0> < 51) |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
        
         ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
      lower bounds:
        P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
        P[<fail_1153@67:0>](var137:bool) = false
        P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int) = ((<f_1030@45:0> = 1) && (<f_1030@45:1> = 50))
        P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int) = ((<f_1030@51:0> = 2) && (<f_1030@51:1> = 50))
      upper bounds:
        P[<f_1030@51:1>](var148:int,var149:int) = (var148 < 100)
        P[<f_1030@45:1>](var144:int,var145:int) = true
        P[<f_1030@39:1>](var140:int,var141:int) = true
      begin GenHcSolver.classify_pids(37672)[4]
        output:
          [<f_1030@39:1>;<f_1030@45:1>;<f_1030@51:1>]
      end GenHcSolver.classify_pids(37672)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(37711)[4]
        lb:(((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) ||
            (((<f_1030@39:0> = 1) && (<f_1030@39:1> = 50)) || ((<f_1030@39:0> = 2) && (<f_1030@39:1> = 50))))
        nub:(not (<f_1030@39:0> < 100))
        lb':(((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) ||
             (((<f_1030@39:0> = 1) && (<f_1030@39:1> = 50)) || ((<f_1030@39:0> = 2) && (<f_1030@39:1> = 50))))
        nub':(not (<f_1030@39:0> < 100))
        begin InterpProver.interpolate(37712)[5]
          begin InterpProver.interpolate_fresh(37713)[6]
            begin InterpProver.interpolate_log(37714)[7]
              input1: (((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) ||
                       (((<f_1030@39:0> = 1) && (<f_1030@39:1> = 50)) || ((<f_1030@39:0> = 2) && (<f_1030@39:1> = 50))))
              input2: (not (<f_1030@39:0> < 100))
              begin InterpProver.interpolate_check(37715)[8]
                begin InterpProver.interpolate_simplify(37716)[9]
                  begin InterpProver.interpolate_quick(37847)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(37856)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(37857)[12]
                        begin CsisatInterface.interpolate_csisat_log(37858)[13]
                          input1: (0 = v_sep_f_1030_sep_39_sep_0 | 1 = v_sep_f_1030_sep_39_sep_0 | 2 = v_sep_f_1030_sep_39_sep_0)
                          input2: 100 <= v_sep_f_1030_sep_39_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(37859)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(37859)[14] (0.001000 sec.)
                          output: (0.02*v_sep_f_1030_sep_39_sep_0 <= 0 | 0.020202020202*v_sep_f_1030_sep_39_sep_0 <= 0.020202020202 | 0.0204081632653*v_sep_f_1030_sep_39_sep_0 <= 0.0408163265306)
                          
                        end CsisatInterface.interpolate_csisat_log(37858)[13] (0.001000 sec.)
                        after simplification: (v_sep_f_1030_sep_39_sep_0 <= 0 | v_sep_f_1030_sep_39_sep_0 <= 2 | 2*v_sep_f_1030_sep_39_sep_0 <= 2)
                        after dnf conversion: ((v_sep_f_1030_sep_39_sep_0 <= 0) | (v_sep_f_1030_sep_39_sep_0 <= 2) | (2*v_sep_f_1030_sep_39_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(37857)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(37856)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(37847)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(37716)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(37715)[8] (0.002999 sec.)
              output: (<f_1030@39:0> <= 2)
            end InterpProver.interpolate_log(37714)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(37713)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(37712)[5] (0.002999 sec.)
        output:
          P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = (<f_1030@39:0> <= 2)
          P[<f_1030@45:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = (<f_1030@39:0> <= 2)
          P[<f_1030@51:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = (<f_1030@39:0> <= 2)
      end ApronInterface.convex_hull_interpolate(37711)[4] (0.002999 sec.)
      Horn clauses:
        P[<fail_1153@67:0>](<fail_1153@67:0>:bool)|- bot
        
        P[<f_1030@45:1>]((-1 + <f_1030@51:0>):int,<f_1030@51:1>:int), (
        (<f_1030@51:0> < 51) && (<f_1030@51:0> > 2)) |- bot
        
        P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
        <f_1030@45:0> < 51) |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
        
         ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
      lower bounds:
        P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
        P[<fail_1153@67:0>](var154:bool) = false
        P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int) = ((<f_1030@45:0> = 1) && (<f_1030@45:1> = 50))
      upper bounds:
        P[<f_1030@45:1>](var161:int,var162:int) = ((var161 <= 1) || (var161 >= 50))
        P[<f_1030@39:1>](var157:int,var158:int) = ((var157 <= 0) || (var157 >= 49))
      begin GenHcSolver.classify_pids(41328)[4]
        output:
          [<f_1030@45:1>],[<f_1030@39:1>]
      end GenHcSolver.classify_pids(41328)[4] (0.000000 sec.)
      lb:((<f_1030@45:0> = 1) && (<f_1030@45:1> = 50))
      nub:(not ((<f_1030@45:0> <= 1) || (<f_1030@45:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(41377)[4]
        lb:((<f_1030@45:0> = 1) && (<f_1030@45:1> = 50))
        nub:(not ((<f_1030@45:0> <= 1) || (<f_1030@45:0> >= 50)))
        lb':((<f_1030@45:0> = 1) && (<f_1030@45:1> = 50))
        nub':(not ((<f_1030@45:0> <= 1) || (<f_1030@45:0> >= 50)))
        begin InterpProver.interpolate(41378)[5]
          begin InterpProver.interpolate_fresh(41379)[6]
            begin InterpProver.interpolate_log(41380)[7]
              input1: ((<f_1030@45:0> = 1) && (<f_1030@45:1> = 50))
              input2: (not ((<f_1030@45:0> <= 1) || (<f_1030@45:0> >= 50)))
              begin InterpProver.interpolate_check(41381)[8]
                begin InterpProver.interpolate_simplify(41382)[9]
                  begin InterpProver.interpolate_quick(41449)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(41458)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(41459)[12]
                        begin CsisatInterface.interpolate_csisat_log(41460)[13]
                          input1: 1 = v_sep_f_1030_sep_45_sep_0
                          input2: (2 <= v_sep_f_1030_sep_45_sep_0 & (1 + v_sep_f_1030_sep_45_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(41461)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(41461)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_45_sep_0 <= 2
                          
                        end CsisatInterface.interpolate_csisat_log(41460)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_45_sep_0 <= 2
                        after dnf conversion: ((2*v_sep_f_1030_sep_45_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(41459)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(41458)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(41449)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(41382)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(41381)[8] (0.002000 sec.)
              output: (<f_1030@45:0> <= 1)
            end InterpProver.interpolate_log(41380)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(41379)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(41378)[5] (0.002000 sec.)
        output:
          P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int) = (<f_1030@45:0> <= 1)
      end ApronInterface.convex_hull_interpolate(41377)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1153@67:0>](<fail_1153@67:0>:bool)|- bot
        
        P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
        (<f_1030@45:0> < 51) && (<f_1030@45:0> > 1)) |- bot
        
         ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
      lower bounds:
        P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
        P[<fail_1153@67:0>](var164:bool) = false
      upper bounds:
        P[<fail_1153@67:0>](var167:bool) = true
      begin GenHcSolver.classify_pids(42326)[4]
        output:
          [<fail_1153@67:0>]
      end GenHcSolver.classify_pids(42326)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(42329)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(42330)[5]
          begin InterpProver.interpolate_fresh(42331)[6]
            begin InterpProver.interpolate_log(42332)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(42333)[8]
                begin InterpProver.interpolate_simplify(42334)[9]
                  begin InterpProver.interpolate_quick(42347)[10]
                    
                  end InterpProver.interpolate_quick(42347)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(42351)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(42351)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(42334)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(42333)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(42332)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(42331)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(42330)[5] (0.000000 sec.)
        output:
          P[<fail_1153@67:0>](var164:bool) = false
      end ApronInterface.convex_hull_interpolate(42329)[4] (0.000000 sec.)
      Horn clauses:
        P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
        (<f_1030@45:0> < 51) && (<f_1030@45:0> > 1)) |- bot
        
         ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
      lower bounds:
        P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
      upper bounds:
        P[<f_1030@39:1>](var168:int,var169:int) = ((var168 <= 0) || (var168 >= 50))
      begin GenHcSolver.classify_pids(43358)[4]
        output:
          [<f_1030@39:1>]
      end GenHcSolver.classify_pids(43358)[4] (0.000000 sec.)
      lb:((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
      nub:(not ((<f_1030@39:0> <= 0) || (<f_1030@39:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(43361)[4]
        lb:((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
        nub:(not ((<f_1030@39:0> <= 0) || (<f_1030@39:0> >= 50)))
        lb':((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
        nub':(not ((<f_1030@39:0> <= 0) || (<f_1030@39:0> >= 50)))
        begin InterpProver.interpolate(43362)[5]
          begin InterpProver.interpolate_fresh(43363)[6]
            begin InterpProver.interpolate_log(43364)[7]
              input1: ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
              input2: (not ((<f_1030@39:0> <= 0) || (<f_1030@39:0> >= 50)))
              begin InterpProver.interpolate_check(43365)[8]
                begin InterpProver.interpolate_simplify(43366)[9]
                  begin InterpProver.interpolate_quick(43422)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(43431)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(43432)[12]
                        begin CsisatInterface.interpolate_csisat_log(43433)[13]
                          input1: 0 = v_sep_f_1030_sep_39_sep_0
                          input2: (1 <= v_sep_f_1030_sep_39_sep_0 & (1 + v_sep_f_1030_sep_39_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(43434)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(43434)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_39_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(43433)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_39_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_f_1030_sep_39_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(43432)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(43431)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(43422)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(43366)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(43365)[8] (0.002000 sec.)
              output: (<f_1030@39:0> <= 0)
            end InterpProver.interpolate_log(43364)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(43363)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(43362)[5] (0.002000 sec.)
        output:
          P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = (<f_1030@39:0> <= 0)
      end ApronInterface.convex_hull_interpolate(43361)[4] (0.002000 sec.)
      begin HcSolver.check_validity(43590)[4]
        input:
          P[<fail_1153@67:0>](<fail_1153@67:0>:bool)|- bot
          
          P[<<f_1030@39:2>@62:0>](0:int,50:int,100:int), <fail_1153@67:0> |- P[<fail_1153@67:0>](<fail_1153@67:0>:bool)
          
          P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int),
          P[<<f_1030@45:2>@58:0>]((1 + <f_1030@39:0>):int,<f_1030@39:1>:int,<<f_1030@39:2>@62:0>:int),
          (<f_1030@39:0> < 50) |- P[<<f_1030@39:2>@62:0>](<f_1030@39:0>:int,
                                                          <f_1030@39:1>:int,
                                                          <<f_1030@39:2>@62:0>:int)
          
          P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int),
          P[<<f_1030@51:2>@54:0>]((1 + <f_1030@45:0>):int,<f_1030@45:1>:int,<<f_1030@45:2>@58:0>:int),
          (<f_1030@45:0> < 50) |- P[<<f_1030@45:2>@58:0>](<f_1030@45:0>:int,
                                                          <f_1030@45:1>:int,
                                                          <<f_1030@45:2>@58:0>:int)
          
          P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int),
          ((<f_1030@51:0> >= 100) && (<<f_1030@51:2>@54:0> = <f_1030@51:1>))
          |- P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,
                                     <<f_1030@51:2>@54:0>:int)
          
          P[<f_1030@45:1>]((-1 + <f_1030@51:0>):int,<f_1030@51:1>:int), (
          <f_1030@51:0> < 51) |- P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int)
          
          P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
          <f_1030@45:0> < 51) |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
          
           ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(43590)[4] (0.002999 sec.)
      solution:
        P[<fail_1153@67:0>](var164:bool) = false
        P[<<f_1030@39:2>@62:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@54:0>:int) = false
        P[<<f_1030@45:2>@58:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@54:0>:int) = false
        P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@54:0>:int) = false
        P[<f_1030@51:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = (<f_1030@39:0> <= 2)
        P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int) = (<f_1030@45:0> <= 1)
        P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = (<f_1030@39:0> <= 0)
    end GenHcSolver.solve(29206)[3] (0.070989 sec.)
    begin GenHcSolver.solve(44054)[3]
      Horn clauses:
        P[<fail_1153@67:0>](<fail_1153@67:0>:bool)|- bot
        
        P[<<f_1030@39:2>@62:0>](0:int,50:int,100:int), <fail_1153@67:0> |- P[<fail_1153@67:0>](<fail_1153@67:0>:bool)
        
        P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int),
        P[<<f_1030@45:2>@58:0>]((1 + <f_1030@39:0>):int,<f_1030@39:1>:int,<<f_1030@39:2>@62:0>:int),
        (<f_1030@39:0> < 50) |- P[<<f_1030@39:2>@62:0>](<f_1030@39:0>:int,
                                                        <f_1030@39:1>:int,
                                                        <<f_1030@39:2>@62:0>:int)
        
        P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int),
        P[<<f_1030@51:2>@54:0>]((1 + <f_1030@45:0>):int,<f_1030@45:1>:int,<<f_1030@45:2>@58:0>:int),
        (<f_1030@45:0> < 50) |- P[<<f_1030@45:2>@58:0>](<f_1030@45:0>:int,
                                                        <f_1030@45:1>:int,
                                                        <<f_1030@45:2>@58:0>:int)
        
        P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int),
        ((<f_1030@51:0> >= 100) && (<<f_1030@51:2>@54:0> = <f_1030@51:1>))
        |- P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,
                                   <<f_1030@51:2>@54:0>:int)
        
        P[<f_1030@45:1>]((-1 + <f_1030@51:0>):int,<f_1030@51:1>:int), (
        <f_1030@51:0> < 51) |- P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int)
        
        P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
        <f_1030@45:0> < 51) |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
        
         ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
      lower bounds:
        P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
        P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int) = ((<f_1030@45:0> = 1) && (<f_1030@45:1> = 50))
        P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int) = ((<f_1030@51:0> = 2) && (<f_1030@51:1> = 50))
        P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@54:0>:int) = false
        P[<<f_1030@45:2>@58:0>](<f_1030@45:0>:int,<f_1030@45:1>:int,<<f_1030@45:2>@58:0>:int) = false
        P[<<f_1030@39:2>@62:0>](<f_1030@39:0>:int,<f_1030@39:1>:int,<<f_1030@39:2>@62:0>:int) = false
        P[<fail_1153@67:0>](<fail_1153@67:0>:bool) = false
      upper bounds:
        P[<<f_1030@39:2>@62:0>](var185:int,var186:int,var187:int) = true
        P[<<f_1030@45:2>@58:0>](var179:int,var180:int,var181:int) = true
        P[<<f_1030@51:2>@54:0>](var173:int,var174:int,var175:int) = true
      begin GenHcSolver.classify_pids(47983)[4]
        output:
          [<<f_1030@51:2>@54:0>;<<f_1030@45:2>@58:0>;<<f_1030@39:2>@62:0>]
      end GenHcSolver.classify_pids(47983)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(48004)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(48007)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(48007)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(48012)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(48012)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(48015)[5]
          begin InterpProver.interpolate_fresh(48016)[6]
            begin InterpProver.interpolate_log(48017)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(48018)[8]
                begin InterpProver.interpolate_simplify(48019)[9]
                  begin InterpProver.interpolate_quick(48034)[10]
                    
                  end InterpProver.interpolate_quick(48034)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(48038)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(48038)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(48019)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(48018)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(48017)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(48016)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(48015)[5] (0.001000 sec.)
        output:
          P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@54:0>:int) = false
          P[<<f_1030@45:2>@58:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@54:0>:int) = false
          P[<<f_1030@39:2>@62:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@54:0>:int) = false
      end ApronInterface.convex_hull_interpolate(48004)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1153@67:0>](<fail_1153@67:0>:bool)|- bot
        
        P[<f_1030@51:1>](<f_1030@51:0>:int,<<f_1030@51:2>@54:0>:int), (<f_1030@51:0> >= 100) |- bot
        
        P[<f_1030@45:1>]((-1 + <f_1030@51:0>):int,<f_1030@51:1>:int), (
        <f_1030@51:0> < 51) |- P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int)
        
        P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
        <f_1030@45:0> < 51) |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
        
         ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
      lower bounds:
        P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
        P[<fail_1153@67:0>](var192:bool) = false
        P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int) = ((<f_1030@45:0> = 1) && (<f_1030@45:1> = 50))
        P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int) = ((<f_1030@51:0> = 2) && (<f_1030@51:1> = 50))
      upper bounds:
        P[<f_1030@51:1>](var203:int,var204:int) = (var203 < 100)
        P[<f_1030@45:1>](var199:int,var200:int) = true
        P[<f_1030@39:1>](var195:int,var196:int) = true
      begin GenHcSolver.classify_pids(52539)[4]
        output:
          [<f_1030@39:1>;<f_1030@45:1>;<f_1030@51:1>]
      end GenHcSolver.classify_pids(52539)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(52578)[4]
        lb:(((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) ||
            (((<f_1030@39:0> = 1) && (<f_1030@39:1> = 50)) || ((<f_1030@39:0> = 2) && (<f_1030@39:1> = 50))))
        nub:(not (<f_1030@39:0> < 100))
        begin ExtFormula.Formula.case_analysis_boolean(52639)[5]
          ts: ((<f_1030@39:1> = 50) && ((<f_1030@39:0> = 0) || ((<f_1030@39:0> = 1) || (<f_1030@39:0> = 2))))
          
        end ExtFormula.Formula.case_analysis_boolean(52639)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(52657)[5]
          ts: (<f_1030@39:0> >= 100)
          
        end ExtFormula.Formula.case_analysis_boolean(52657)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@39:1>) = 0) && (((2 + (-1 * <f_1030@39:0>)) >= 0) && (<f_1030@39:0> >= 0)))
        nub':((-100 + <f_1030@39:0>) >= 0)
        begin InterpProver.interpolate(52662)[5]
          begin InterpProver.interpolate_fresh(52663)[6]
            begin InterpProver.interpolate_log(52664)[7]
              input1: (((-50 + <f_1030@39:1>) = 0) && (((2 + (-1 * <f_1030@39:0>)) >= 0) && (<f_1030@39:0> >= 0)))
              input2: ((-100 + <f_1030@39:0>) >= 0)
              begin InterpProver.interpolate_check(52665)[8]
                begin InterpProver.interpolate_simplify(52666)[9]
                  begin InterpProver.interpolate_quick(52763)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(52772)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(52773)[12]
                        begin CsisatInterface.interpolate_csisat_log(52774)[13]
                          input1: (0 <= v_sep_f_1030_sep_39_sep_0 & v_sep_f_1030_sep_39_sep_0 <= 2)
                          input2: 100 <= v_sep_f_1030_sep_39_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(52775)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(52775)[14] (0.000000 sec.)
                          output: 0.0204081632653*v_sep_f_1030_sep_39_sep_0 <= 0.0408163265306
                          
                        end CsisatInterface.interpolate_csisat_log(52774)[13] (0.000000 sec.)
                        after simplification: v_sep_f_1030_sep_39_sep_0 <= 2
                        after dnf conversion: ((v_sep_f_1030_sep_39_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(52773)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(52772)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(52763)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(52666)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(52665)[8] (0.001999 sec.)
              output: (<f_1030@39:0> <= 2)
            end InterpProver.interpolate_log(52664)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(52663)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(52662)[5] (0.001999 sec.)
        output:
          P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = (<f_1030@39:0> <= 2)
          P[<f_1030@45:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = (<f_1030@39:0> <= 2)
          P[<f_1030@51:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = (<f_1030@39:0> <= 2)
      end ApronInterface.convex_hull_interpolate(52578)[4] (0.001999 sec.)
      Horn clauses:
        P[<fail_1153@67:0>](<fail_1153@67:0>:bool)|- bot
        
        P[<f_1030@45:1>]((-1 + <f_1030@51:0>):int,<f_1030@51:1>:int), (
        (<f_1030@51:0> < 51) && (<f_1030@51:0> > 2)) |- bot
        
        P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
        <f_1030@45:0> < 51) |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
        
         ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
      lower bounds:
        P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
        P[<fail_1153@67:0>](var209:bool) = false
        P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int) = ((<f_1030@45:0> = 1) && (<f_1030@45:1> = 50))
      upper bounds:
        P[<f_1030@45:1>](var216:int,var217:int) = ((var216 <= 1) || (var216 >= 50))
        P[<f_1030@39:1>](var212:int,var213:int) = ((var212 <= 0) || (var212 >= 49))
      begin GenHcSolver.classify_pids(56230)[4]
        output:
          [<f_1030@45:1>],[<f_1030@39:1>]
      end GenHcSolver.classify_pids(56230)[4] (0.000000 sec.)
      lb:((<f_1030@45:0> = 1) && (<f_1030@45:1> = 50))
      nub:(not ((<f_1030@45:0> <= 1) || (<f_1030@45:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(56279)[4]
        lb:((<f_1030@45:0> = 1) && (<f_1030@45:1> = 50))
        nub:(not ((<f_1030@45:0> <= 1) || (<f_1030@45:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(56291)[5]
          ts: ((<f_1030@45:0> = 1) && (<f_1030@45:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(56291)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(56315)[5]
          ts: ((<f_1030@45:0> < 50) && (<f_1030@45:0> > 1))
          
        end ExtFormula.Formula.case_analysis_boolean(56315)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@45:1>) = 0) && ((-1 + <f_1030@45:0>) = 0))
        nub':(((49 + (-1 * <f_1030@45:0>)) >= 0) && ((-2 + <f_1030@45:0>) >= 0))
        begin InterpProver.interpolate(56322)[5]
          begin InterpProver.interpolate_fresh(56323)[6]
            begin InterpProver.interpolate_log(56324)[7]
              input1: (((-50 + <f_1030@45:1>) = 0) && ((-1 + <f_1030@45:0>) = 0))
              input2: (((49 + (-1 * <f_1030@45:0>)) >= 0) && ((-2 + <f_1030@45:0>) >= 0))
              begin InterpProver.interpolate_check(56325)[8]
                begin InterpProver.interpolate_simplify(56326)[9]
                  begin InterpProver.interpolate_quick(56393)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(56402)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(56403)[12]
                        begin CsisatInterface.interpolate_csisat_log(56404)[13]
                          input1: 1 = v_sep_f_1030_sep_45_sep_0
                          input2: (2 <= v_sep_f_1030_sep_45_sep_0 & v_sep_f_1030_sep_45_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(56405)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(56405)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_45_sep_0 <= 2
                          
                        end CsisatInterface.interpolate_csisat_log(56404)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_45_sep_0 <= 2
                        after dnf conversion: ((2*v_sep_f_1030_sep_45_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(56403)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(56402)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(56393)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(56326)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(56325)[8] (0.001999 sec.)
              output: (<f_1030@45:0> <= 1)
            end InterpProver.interpolate_log(56324)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(56323)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(56322)[5] (0.001999 sec.)
        output:
          P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int) = (<f_1030@45:0> <= 1)
      end ApronInterface.convex_hull_interpolate(56279)[4] (0.002999 sec.)
      Horn clauses:
        P[<fail_1153@67:0>](<fail_1153@67:0>:bool)|- bot
        
        P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
        (<f_1030@45:0> < 51) && (<f_1030@45:0> > 1)) |- bot
        
         ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
      lower bounds:
        P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
        P[<fail_1153@67:0>](var219:bool) = false
      upper bounds:
        P[<fail_1153@67:0>](var222:bool) = true
      begin GenHcSolver.classify_pids(57270)[4]
        output:
          [<fail_1153@67:0>]
      end GenHcSolver.classify_pids(57270)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(57273)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(57276)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(57276)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(57281)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(57281)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(57284)[5]
          begin InterpProver.interpolate_fresh(57285)[6]
            begin InterpProver.interpolate_log(57286)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(57287)[8]
                begin InterpProver.interpolate_simplify(57288)[9]
                  begin InterpProver.interpolate_quick(57303)[10]
                    
                  end InterpProver.interpolate_quick(57303)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(57307)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(57307)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(57288)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(57287)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(57286)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(57285)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(57284)[5] (0.001000 sec.)
        output:
          P[<fail_1153@67:0>](var219:bool) = false
      end ApronInterface.convex_hull_interpolate(57273)[4] (0.001000 sec.)
      Horn clauses:
        P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
        (<f_1030@45:0> < 51) && (<f_1030@45:0> > 1)) |- bot
        
         ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
      lower bounds:
        P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
      upper bounds:
        P[<f_1030@39:1>](var223:int,var224:int) = ((var223 <= 0) || (var223 >= 50))
      begin GenHcSolver.classify_pids(58321)[4]
        output:
          [<f_1030@39:1>]
      end GenHcSolver.classify_pids(58321)[4] (0.000000 sec.)
      lb:((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
      nub:(not ((<f_1030@39:0> <= 0) || (<f_1030@39:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(58324)[4]
        lb:((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
        nub:(not ((<f_1030@39:0> <= 0) || (<f_1030@39:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(58334)[5]
          ts: ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(58334)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(58354)[5]
          ts: ((<f_1030@39:0> < 50) && (<f_1030@39:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(58354)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@39:1>) = 0) && (<f_1030@39:0> = 0))
        nub':(((49 + (-1 * <f_1030@39:0>)) >= 0) && ((-1 + <f_1030@39:0>) >= 0))
        begin InterpProver.interpolate(58360)[5]
          begin InterpProver.interpolate_fresh(58361)[6]
            begin InterpProver.interpolate_log(58362)[7]
              input1: (((-50 + <f_1030@39:1>) = 0) && (<f_1030@39:0> = 0))
              input2: (((49 + (-1 * <f_1030@39:0>)) >= 0) && ((-1 + <f_1030@39:0>) >= 0))
              begin InterpProver.interpolate_check(58363)[8]
                begin InterpProver.interpolate_simplify(58364)[9]
                  begin InterpProver.interpolate_quick(58426)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(58435)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(58436)[12]
                        begin CsisatInterface.interpolate_csisat_log(58437)[13]
                          input1: 0 = v_sep_f_1030_sep_39_sep_0
                          input2: (1 <= v_sep_f_1030_sep_39_sep_0 & v_sep_f_1030_sep_39_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(58438)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(58438)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_39_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(58437)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_39_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_f_1030_sep_39_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(58436)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(58435)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(58426)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(58364)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(58363)[8] (0.002000 sec.)
              output: (<f_1030@39:0> <= 0)
            end InterpProver.interpolate_log(58362)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(58361)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(58360)[5] (0.002000 sec.)
        output:
          P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = (<f_1030@39:0> <= 0)
      end ApronInterface.convex_hull_interpolate(58324)[4] (0.003000 sec.)
      begin HcSolver.check_validity(58596)[4]
        input:
          P[<fail_1153@67:0>](<fail_1153@67:0>:bool)|- bot
          
          P[<<f_1030@39:2>@62:0>](0:int,50:int,100:int), <fail_1153@67:0> |- P[<fail_1153@67:0>](<fail_1153@67:0>:bool)
          
          P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int),
          P[<<f_1030@45:2>@58:0>]((1 + <f_1030@39:0>):int,<f_1030@39:1>:int,<<f_1030@39:2>@62:0>:int),
          (<f_1030@39:0> < 50) |- P[<<f_1030@39:2>@62:0>](<f_1030@39:0>:int,
                                                          <f_1030@39:1>:int,
                                                          <<f_1030@39:2>@62:0>:int)
          
          P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int),
          P[<<f_1030@51:2>@54:0>]((1 + <f_1030@45:0>):int,<f_1030@45:1>:int,<<f_1030@45:2>@58:0>:int),
          (<f_1030@45:0> < 50) |- P[<<f_1030@45:2>@58:0>](<f_1030@45:0>:int,
                                                          <f_1030@45:1>:int,
                                                          <<f_1030@45:2>@58:0>:int)
          
          P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int),
          ((<f_1030@51:0> >= 100) && (<<f_1030@51:2>@54:0> = <f_1030@51:1>))
          |- P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,
                                     <<f_1030@51:2>@54:0>:int)
          
          P[<f_1030@45:1>]((-1 + <f_1030@51:0>):int,<f_1030@51:1>:int), (
          <f_1030@51:0> < 51) |- P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int)
          
          P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
          <f_1030@45:0> < 51) |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
          
           ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(58596)[4] (0.002999 sec.)
      solution:
        P[<fail_1153@67:0>](var219:bool) = false
        P[<<f_1030@39:2>@62:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@54:0>:int) = false
        P[<<f_1030@45:2>@58:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@54:0>:int) = false
        P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,<<f_1030@51:2>@54:0>:int) = false
        P[<f_1030@51:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = (<f_1030@39:0> <= 2)
        P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int) = (<f_1030@45:0> <= 1)
        P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int) = (<f_1030@39:0> <= 0)
    end GenHcSolver.solve(44054)[3] (0.066990 sec.)
    begin YhornInterface.solve(59060)[3]
      begin HcSolver.solve_ub(59061)[4]
        encoded:
          P[<fail_1153@67:0>](<fail_1153@67:0>:int)|- bot
          
          P[<<f_1030@39:2>@62:0>](0:int,50:int,100:int), (<fail_1153@67:0> = 1)
          |- P[<fail_1153@67:0>](<fail_1153@67:0>:int)
          
          P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int),
          P[<<f_1030@45:2>@58:0>]((1 + <f_1030@39:0>):int,<f_1030@39:1>:int,<<f_1030@39:2>@62:0>:int),
          (<f_1030@39:0> < 50) |- P[<<f_1030@39:2>@62:0>](<f_1030@39:0>:int,
                                                          <f_1030@39:1>:int,
                                                          <<f_1030@39:2>@62:0>:int)
          
          P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int),
          P[<<f_1030@51:2>@54:0>]((1 + <f_1030@45:0>):int,<f_1030@45:1>:int,<<f_1030@45:2>@58:0>:int),
          (<f_1030@45:0> < 50) |- P[<<f_1030@45:2>@58:0>](<f_1030@45:0>:int,
                                                          <f_1030@45:1>:int,
                                                          <<f_1030@45:2>@58:0>:int)
          
          P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int),
          ((<f_1030@51:0> >= 100) && (<<f_1030@51:2>@54:0> = <f_1030@51:1>))
          |- P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,
                                     <<f_1030@51:2>@54:0>:int)
          
          P[<f_1030@45:1>]((-1 + <f_1030@51:0>):int,<f_1030@51:1>:int), (
          <f_1030@51:0> < 51) |- P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int)
          
          P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
          <f_1030@45:0> < 51) |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
          
           ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
        input to Yhorn:
          P[<fail_1153@67:0>](<fail_1153@67:0>:int)|- bot
          
          P[<<f_1030@39:2>@62:0>](var225:int,var226:int,var227:int),
          ((var227 = 100) && ((var226 = 50) && ((var225 = 0) && (<fail_1153@67:0> = 1))))
          |- P[<fail_1153@67:0>](<fail_1153@67:0>:int)
          
          P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int),
          P[<<f_1030@45:2>@58:0>](var228:int,<f_1030@39:1>:int,<<f_1030@39:2>@62:0>:int),
          ((var228 = (1 + <f_1030@39:0>)) && (<f_1030@39:0> < 50))
          |- P[<<f_1030@39:2>@62:0>](<f_1030@39:0>:int,<f_1030@39:1>:int,
                                     <<f_1030@39:2>@62:0>:int)
          
          P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int),
          P[<<f_1030@51:2>@54:0>](var229:int,<f_1030@45:1>:int,<<f_1030@45:2>@58:0>:int),
          ((var229 = (1 + <f_1030@45:0>)) && (<f_1030@45:0> < 50))
          |- P[<<f_1030@45:2>@58:0>](<f_1030@45:0>:int,<f_1030@45:1>:int,
                                     <<f_1030@45:2>@58:0>:int)
          
          P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int),
          ((<<f_1030@51:2>@54:0> = <f_1030@51:1>) && (<f_1030@51:0> >= 100))
          |- P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,
                                     <<f_1030@51:2>@54:0>:int)
          
          P[<f_1030@45:1>](var230:int,<f_1030@51:1>:int), (((1 + var230) = <f_1030@51:0>) && (<f_1030@51:0> < 51))
          |- P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int)
          
          P[<f_1030@39:1>](var231:int,<f_1030@45:1>:int), (((1 + var231) = <f_1030@45:0>) && (<f_1030@45:0> < 51))
          |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1153_sep_67_sep_0($252)) -> 1=0.
(($252-1=0) & ($253=0) & ($254-50=0) & ($255-100=0)) & (v_sep_f_1030_sep_39_sep_2_sep_62_sep_0($253,$254,$255)) -> v_sep_fail_1153_sep_67_sep_0($252).
(($256-50<0) & (-$256+$257-1=0)) & (v_sep_f_1030_sep_45_sep_2_sep_58_sep_0($257,$258,$259)) & (v_sep_f_1030_sep_39_sep_1($256,$258)) -> v_sep_f_1030_sep_39_sep_2_sep_62_sep_0($256,$258,$259).
(($260-50<0) & (-$260+$261-1=0)) & (v_sep_f_1030_sep_51_sep_2_sep_54_sep_0($261,$262,$263)) & (v_sep_f_1030_sep_45_sep_1($260,$262)) -> v_sep_f_1030_sep_45_sep_2_sep_58_sep_0($260,$262,$263).
(($264-100>=0) & ($265-$266=0)) & (v_sep_f_1030_sep_51_sep_1($264,$266)) -> v_sep_f_1030_sep_51_sep_2_sep_54_sep_0($264,$266,$265).
(($264-51<0) & (-$264+$267+1=0)) & (v_sep_f_1030_sep_45_sep_1($267,$266)) -> v_sep_f_1030_sep_51_sep_1($264,$266).
(($260-51<0) & (-$260+$268+1=0)) & (v_sep_f_1030_sep_39_sep_1($268,$262)) -> v_sep_f_1030_sep_45_sep_1($260,$262).
($256=0) & ($258-50=0) -> v_sep_f_1030_sep_39_sep_1($256,$258).


v_sep_f_1030_sep_39_sep_1: X
v_sep_f_1030_sep_39_sep_2_sep_62_sep_0: X
v_sep_f_1030_sep_45_sep_1: X
v_sep_f_1030_sep_45_sep_2_sep_58_sep_0: X
v_sep_f_1030_sep_51_sep_1: X
v_sep_f_1030_sep_51_sep_2_sep_54_sep_0: X
v_sep_fail_1153_sep_67_sep_0: X
..........
v_sep_f_1030_sep_39_sep_1: X
v_sep_f_1030_sep_39_sep_2_sep_62_sep_0: X
v_sep_f_1030_sep_45_sep_1: X
v_sep_f_1030_sep_45_sep_2_sep_58_sep_0: X
v_sep_f_1030_sep_51_sep_1: X
v_sep_f_1030_sep_51_sep_2_sep_54_sep_0: X
v_sep_fail_1153_sep_67_sep_0: X
...
v_sep_f_1030_sep_39_sep_1: X
v_sep_f_1030_sep_39_sep_2_sep_62_sep_0: X
v_sep_f_1030_sep_45_sep_1: X
v_sep_f_1030_sep_45_sep_2_sep_58_sep_0: X
v_sep_f_1030_sep_51_sep_1: X
v_sep_f_1030_sep_51_sep_2_sep_54_sep_0: X
v_sep_fail_1153_sep_67_sep_0: X
.....
v_sep_f_1030_sep_39_sep_1: X
v_sep_f_1030_sep_39_sep_2_sep_62_sep_0: X
v_sep_f_1030_sep_45_sep_1: X
v_sep_f_1030_sep_45_sep_2_sep_58_sep_0: X
v_sep_f_1030_sep_51_sep_1: X
v_sep_f_1030_sep_51_sep_2_sep_54_sep_0: X
v_sep_fail_1153_sep_67_sep_0: X
.......
v_sep_f_1030_sep_39_sep_1: X
v_sep_f_1030_sep_39_sep_2_sep_62_sep_0: X
v_sep_f_1030_sep_45_sep_1: X
v_sep_f_1030_sep_45_sep_2_sep_58_sep_0: X
v_sep_f_1030_sep_51_sep_1: X
v_sep_f_1030_sep_51_sep_2_sep_54_sep_0: X
v_sep_fail_1153_sep_67_sep_0: X
.........
v_sep_f_1030_sep_39_sep_1: X
v_sep_f_1030_sep_39_sep_2_sep_62_sep_0: X
v_sep_f_1030_sep_45_sep_1: X
v_sep_f_1030_sep_45_sep_2_sep_58_sep_0: X
v_sep_f_1030_sep_51_sep_1: X
v_sep_f_1030_sep_51_sep_2_sep_54_sep_0: X
v_sep_fail_1153_sep_67_sep_0: X
..........(0=0) & (v_sep_fail_1153_sep_67_sep_0($252)) -> 1=0.
(($252-1=0) & ($253=0) & ($254-50=0) & ($255-100=0)) & (v_sep_f_1030_sep_39_sep_2_sep_62_sep_0($253,$254,$255)) -> v_sep_fail_1153_sep_67_sep_0($252).
(($256-50<0) & (-$256+$257-1=0)) & (v_sep_f_1030_sep_45_sep_2_sep_58_sep_0($257,$258,$259)) & (v_sep_f_1030_sep_39_sep_1($256,$258)) -> v_sep_f_1030_sep_39_sep_2_sep_62_sep_0($256,$258,$259).
(($260-50<0) & (-$260+$261-1=0)) & (v_sep_f_1030_sep_51_sep_2_sep_54_sep_0($261,$262,$263)) & (v_sep_f_1030_sep_45_sep_1($260,$262)) -> v_sep_f_1030_sep_45_sep_2_sep_58_sep_0($260,$262,$263).
(($264-100>=0) & ($265-$266=0)) & (v_sep_f_1030_sep_51_sep_1($264,$266)) -> v_sep_f_1030_sep_51_sep_2_sep_54_sep_0($264,$266,$265).
(($264-51<0) & (-$264+$267+1=0)) & (v_sep_f_1030_sep_45_sep_1($267,$266)) -> v_sep_f_1030_sep_51_sep_1($264,$266).
(($260-51<0) & (-$260+$268+1=0)) & (v_sep_f_1030_sep_39_sep_1($268,$262)) -> v_sep_f_1030_sep_45_sep_1($260,$262).
($256=0) & ($258-50=0) -> v_sep_f_1030_sep_39_sep_1($256,$258).

           ((<f_1030@39:1> = 50) && (<f_1030@39:0> = 0)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
        solution:
          P[<f_1030@39:1>]($286:int,$288:int) = ($288 <= 50)
          P[<<f_1030@39:2>@62:0>]($272:int,$274:int,$276:int) = ($276 <= 50)
          P[<f_1030@45:1>]($298:int,$300:int) = ($300 <= 50)
          P[<<f_1030@45:2>@58:0>]($279:int,$281:int,$283:int) = ((3 * $283) <= (100 + $281))
          P[<f_1030@51:1>]($303:int,$305:int) = ($305 <= 50)
          P[<<f_1030@51:2>@54:0>]($291:int,$293:int,$295:int) = ((3 * $295) <= (50 + (2 * $293)))
          P[<fail_1153@67:0>]($269:bool) = false
        
      end HcSolver.solve_ub(59061)[4] (0.031995 sec.)
      begin HcSolver.check_validity(59462)[4]
        input:
          P[<fail_1153@67:0>](<fail_1153@67:0>:bool)|- bot
          
          P[<<f_1030@39:2>@62:0>](0:int,50:int,100:int), <fail_1153@67:0> |- P[<fail_1153@67:0>](<fail_1153@67:0>:bool)
          
          P[<f_1030@39:1>](<f_1030@39:0>:int,<f_1030@39:1>:int),
          P[<<f_1030@45:2>@58:0>]((1 + <f_1030@39:0>):int,<f_1030@39:1>:int,<<f_1030@39:2>@62:0>:int),
          (<f_1030@39:0> < 50) |- P[<<f_1030@39:2>@62:0>](<f_1030@39:0>:int,
                                                          <f_1030@39:1>:int,
                                                          <<f_1030@39:2>@62:0>:int)
          
          P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int),
          P[<<f_1030@51:2>@54:0>]((1 + <f_1030@45:0>):int,<f_1030@45:1>:int,<<f_1030@45:2>@58:0>:int),
          (<f_1030@45:0> < 50) |- P[<<f_1030@45:2>@58:0>](<f_1030@45:0>:int,
                                                          <f_1030@45:1>:int,
                                                          <<f_1030@45:2>@58:0>:int)
          
          P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int),
          ((<f_1030@51:0> >= 100) && (<<f_1030@51:2>@54:0> = <f_1030@51:1>))
          |- P[<<f_1030@51:2>@54:0>](<f_1030@51:0>:int,<f_1030@51:1>:int,
                                     <<f_1030@51:2>@54:0>:int)
          
          P[<f_1030@45:1>]((-1 + <f_1030@51:0>):int,<f_1030@51:1>:int), (
          <f_1030@51:0> < 51) |- P[<f_1030@51:1>](<f_1030@51:0>:int,<f_1030@51:1>:int)
          
          P[<f_1030@39:1>]((-1 + <f_1030@45:0>):int,<f_1030@45:1>:int), (
          <f_1030@45:0> < 51) |- P[<f_1030@45:1>](<f_1030@45:0>:int,<f_1030@45:1>:int)
          
           ((<f_1030@39:0> = 0) && (<f_1030@39:1> = 50)) |- P[<f_1030@39:1>](<f_1030@39:0>:int,
                                                                    <f_1030@39:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(59462)[4] (0.016998 sec.)
      solution:
        P[<f_1030@39:1>]($286:int,$288:int) = ($288 <= 50)
        P[<<f_1030@39:2>@62:0>]($272:int,$274:int,$276:int) = ($276 <= 50)
        P[<f_1030@45:1>]($298:int,$300:int) = ($300 <= 50)
        P[<<f_1030@45:2>@58:0>]($279:int,$281:int,$283:int) = ((3 * $283) <= (100 + $281))
        P[<f_1030@51:1>]($303:int,$305:int) = ($305 <= 50)
        P[<<f_1030@51:2>@54:0>]($291:int,$293:int,$295:int) = ((3 * $295) <= (50 + (2 * $293)))
        P[<fail_1153@67:0>]($269:bool) = false
    end YhornInterface.solve(59060)[3] (0.048993 sec.)
    
  end RefTypeInfer.infer_etrs(26427)[2] (0.260961 sec.)
  refinement types:
    main_1149: X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 0)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 1)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 2)} -> (v3:{v3:int | false} -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    k_main_1146: var235:unit -> X
  abstraction types:
    main_1149: X
    f_1030: var241:int ->
            var242:int[var242 -> (var241 <= 0),
                       var242 -> (var241 <= 1),
                       var242 -> (var241 <= 2)] -> (var243:int -> X) -> X
    br_f_1151: var246:bool -> var247:int -> var248:int -> (var249:int -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:bool -> (v2:unit -> X) -> X
    k_main_1146: var235:unit -> X
  
end AbsTypeInfer.refine(26426)[1] (0.262960 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int -> int[x_1 <= 2; x_1 <= 1; x_1 <= 0] -> (int -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1149 ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [2/2] ... --> 
  f_1150 [2/2] ... --> 
  fail_1153 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 1; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(61590)[1]
  program:
    main_1149  | true = (f_1030 0
                                50
                                f_1150)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | b_1152 = (f_1030 (x_1031 + 1)
                                                               y_1032
                                                               k_f_1085)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | (not b_1152) = (f_1030 (
                                                                    x_1031 + 1)
                                                                    (y_1032 + 1)
                                                                    k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (x_1031 < 100) = (br_f_1151 (x_1031 < 50)
                                                                x_1031
                                                                y_1032
                                                                k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (not (x_1031 < 100)) = (k_f_1085 y_1032)
    f_1150 x_1124 | (not (x_1124 = 100)) = (k_main_1146 ())
    f_1150 x_1124 | (not (not (x_1124 = 100))) = (fail_1153 true
                                                            k_main_1146)
    fail_1153 b k | true = (fail ())
    k_main_1146 x_1118 | true = end
    main_1149:X
    br_f_1151:bool -> int -> int -> (int -> X) -> X
    f_1030:int -> int -> (int -> X) -> X
    f_1150:int -> X
    fail_1153:bool -> (unit -> X) -> X
    k_main_1146:unit -> X
  inlined functions: br_f_1151,f_1150,k_main_1146
  counterexample: 0:0:0:0:0:0:0:1:1:0
  error traces:
    [true.((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
     [(<f_1030@72:0> < 100).
      ((<br_f_1151@75:0> = (<f_1030@72:0> < 50)) &&
       ((<br_f_1151@75:1> = <f_1030@72:0>) && (<br_f_1151@75:2> = <f_1030@72:1>)))
      [<br_f_1151@75:0>.((<f_1030@78:0> = (<br_f_1151@75:1> + 1)) && (<f_1030@78:1> = <br_f_1151@75:2>))
       [(<f_1030@78:0> < 100).
        ((<br_f_1151@81:0> = (<f_1030@78:0> < 50)) &&
         ((<br_f_1151@81:1> = <f_1030@78:0>) && (<br_f_1151@81:2> = <f_1030@78:1>)))
        [<br_f_1151@81:0>.((<f_1030@84:0> = (<br_f_1151@81:1> + 1)) && (<f_1030@84:1> = <br_f_1151@81:2>))
         [(<f_1030@84:0> < 100).
          ((<br_f_1151@87:0> = (<f_1030@84:0> < 50)) &&
           ((<br_f_1151@87:1> = <f_1030@84:0>) && (<br_f_1151@87:2> = <f_1030@84:1>)))
          [<br_f_1151@87:0>.((<f_1030@90:0> = (<br_f_1151@87:1> + 1)) && (<f_1030@90:1> = <br_f_1151@87:2>))
           [(not (<f_1030@90:0> < 100)).(<<f_1030@90:2>@93:0> = <f_1030@90:1>)
            [true.(<<br_f_1151@87:3>@95:0> = <<f_1030@90:2>@93:0>)
             [true.(<<f_1030@84:2>@97:0> = <<br_f_1151@87:3>@95:0>)
              [true.(<<br_f_1151@81:3>@99:0> = <<f_1030@84:2>@97:0>)
               [true.(<<f_1030@78:2>@101:0> = <<br_f_1151@81:3>@99:0>)
                [true.(<<br_f_1151@75:3>@103:0> = <<f_1030@78:2>@101:0>)
                 [true.(<<f_1030@72:2>@105:0> = <<br_f_1151@75:3>@103:0>)
                  [true.(<f_1150@107:0> = <<f_1030@72:2>@105:0>)
                   [(not (not (<f_1150@107:0> = 100))).(<fail_1153@110:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(61591)[2]
    horn clauses:
      P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
      
      P[<f_1150@107:0>](100:int), <fail_1153@110:0> |- P[<fail_1153@110:0>](<fail_1153@110:0>:bool)
      
      P[<<f_1030@72:2>@105:0>](0:int,50:int,<f_1150@107:0>:int)|- P[<f_1150@107:0>](<f_1150@107:0>:int)
      
      P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int),
      P[<<br_f_1151@75:3>@103:0>]((<f_1030@72:0> < 50):bool,<f_1030@72:0>:int,<f_1030@72:1>:int,<<f_1030@72:2>@105:0>:int),
      (<f_1030@72:0> < 100) |- P[<<f_1030@72:2>@105:0>](<f_1030@72:0>:int,
                                                        <f_1030@72:1>:int,
                                                        <<f_1030@72:2>@105:0>:int)
      
      P[<br_f_1151@75:2>](<br_f_1151@75:0>:bool,<br_f_1151@75:1>:int,<br_f_1151@75:2>:int),
      P[<<f_1030@78:2>@101:0>]((1 + <br_f_1151@75:1>):int,<br_f_1151@75:2>:int,<<br_f_1151@75:3>@103:0>:int),
      <br_f_1151@75:0>
      |- P[<<br_f_1151@75:3>@103:0>](<br_f_1151@75:0>:bool,<br_f_1151@75:1>:int,
                                     <br_f_1151@75:2>:int,<<br_f_1151@75:3>@103:0>:int)
      
      P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int),
      P[<<br_f_1151@81:3>@99:0>]((<f_1030@78:0> < 50):bool,<f_1030@78:0>:int,<f_1030@78:1>:int,<<f_1030@78:2>@101:0>:int),
      (<f_1030@78:0> < 100) |- P[<<f_1030@78:2>@101:0>](<f_1030@78:0>:int,
                                                        <f_1030@78:1>:int,
                                                        <<f_1030@78:2>@101:0>:int)
      
      P[<br_f_1151@81:2>](<br_f_1151@81:0>:bool,<br_f_1151@81:1>:int,<br_f_1151@81:2>:int),
      P[<<f_1030@84:2>@97:0>]((1 + <br_f_1151@81:1>):int,<br_f_1151@81:2>:int,<<br_f_1151@81:3>@99:0>:int),
      <br_f_1151@81:0>
      |- P[<<br_f_1151@81:3>@99:0>](<br_f_1151@81:0>:bool,<br_f_1151@81:1>:int,
                                    <br_f_1151@81:2>:int,<<br_f_1151@81:3>@99:0>:int)
      
      P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int),
      P[<<br_f_1151@87:3>@95:0>]((<f_1030@84:0> < 50):bool,<f_1030@84:0>:int,<f_1030@84:1>:int,<<f_1030@84:2>@97:0>:int),
      (<f_1030@84:0> < 100) |- P[<<f_1030@84:2>@97:0>](<f_1030@84:0>:int,
                                                       <f_1030@84:1>:int,
                                                       <<f_1030@84:2>@97:0>:int)
      
      P[<br_f_1151@87:2>](<br_f_1151@87:0>:bool,<br_f_1151@87:1>:int,<br_f_1151@87:2>:int),
      P[<<f_1030@90:2>@93:0>]((1 + <br_f_1151@87:1>):int,<br_f_1151@87:2>:int,<<br_f_1151@87:3>@95:0>:int),
      <br_f_1151@87:0>
      |- P[<<br_f_1151@87:3>@95:0>](<br_f_1151@87:0>:bool,<br_f_1151@87:1>:int,
                                    <br_f_1151@87:2>:int,<<br_f_1151@87:3>@95:0>:int)
      
      P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int),
      ((<f_1030@90:0> >= 100) && (<<f_1030@90:2>@93:0> = <f_1030@90:1>))
      |- P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,
                                 <<f_1030@90:2>@93:0>:int)
      
      P[<br_f_1151@87:2>](true:bool,(-1 + <f_1030@90:0>):int,<f_1030@90:1>:int)|- P[<f_1030@90:1>](
      <f_1030@90:0>:int,<f_1030@90:1>:int)
      
      P[<f_1030@84:1>](<br_f_1151@87:1>:int,<br_f_1151@87:2>:int),
      ((<br_f_1151@87:1> < 100) && (<br_f_1151@87:0> = (<br_f_1151@87:1> < 50)))
      |- P[<br_f_1151@87:2>](<br_f_1151@87:0>:bool,<br_f_1151@87:1>:int,
                             <br_f_1151@87:2>:int)
      
      P[<br_f_1151@81:2>](true:bool,(-1 + <f_1030@84:0>):int,<f_1030@84:1>:int)|- P[<f_1030@84:1>](
      <f_1030@84:0>:int,<f_1030@84:1>:int)
      
      P[<f_1030@78:1>](<br_f_1151@81:1>:int,<br_f_1151@81:2>:int),
      ((<br_f_1151@81:1> < 100) && (<br_f_1151@81:0> = (<br_f_1151@81:1> < 50)))
      |- P[<br_f_1151@81:2>](<br_f_1151@81:0>:bool,<br_f_1151@81:1>:int,
                             <br_f_1151@81:2>:int)
      
      P[<br_f_1151@75:2>](true:bool,(-1 + <f_1030@78:0>):int,<f_1030@78:1>:int)|- P[<f_1030@78:1>](
      <f_1030@78:0>:int,<f_1030@78:1>:int)
      
      P[<f_1030@72:1>](<br_f_1151@75:1>:int,<br_f_1151@75:2>:int),
      ((<br_f_1151@75:1> < 100) && (<br_f_1151@75:0> = (<br_f_1151@75:1> < 50)))
      |- P[<br_f_1151@75:2>](<br_f_1151@75:0>:bool,<br_f_1151@75:1>:int,
                             <br_f_1151@75:2>:int)
      
       ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
    call trees:
      <main_1149@70>
        <f_1030@72>
          <br_f_1151@75>
            <f_1030@78>
              <br_f_1151@81>
                <f_1030@84>
                  <br_f_1151@87>
                    <f_1030@90>
                    </<f_1030@90:2>@93>
                  </<br_f_1151@87:3>@95>
                </<f_1030@84:2>@97>
              </<br_f_1151@81:3>@99>
            </<f_1030@78:2>@101>
          </<br_f_1151@75:3>@103>
        </<f_1030@72:2>@105>
        <f_1150@107>
          <fail_1153@110>
    inlined horn clauses:
      P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
      
      P[<<f_1030@72:2>@105:0>](0:int,50:int,100:int), <fail_1153@110:0> |- P[<fail_1153@110:0>](<fail_1153@110:0>:bool)
      
      P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int),
      P[<<f_1030@78:2>@101:0>]((1 + <f_1030@72:0>):int,<f_1030@72:1>:int,<<f_1030@72:2>@105:0>:int),
      (<f_1030@72:0> < 50) |- P[<<f_1030@72:2>@105:0>](<f_1030@72:0>:int,
                                                       <f_1030@72:1>:int,
                                                       <<f_1030@72:2>@105:0>:int)
      
      P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int),
      P[<<f_1030@84:2>@97:0>]((1 + <f_1030@78:0>):int,<f_1030@78:1>:int,<<f_1030@78:2>@101:0>:int),
      (<f_1030@78:0> < 50) |- P[<<f_1030@78:2>@101:0>](<f_1030@78:0>:int,
                                                       <f_1030@78:1>:int,
                                                       <<f_1030@78:2>@101:0>:int)
      
      P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int),
      P[<<f_1030@90:2>@93:0>]((1 + <f_1030@84:0>):int,<f_1030@84:1>:int,<<f_1030@84:2>@97:0>:int), (
      <f_1030@84:0> < 50) |- P[<<f_1030@84:2>@97:0>](<f_1030@84:0>:int,
                                                     <f_1030@84:1>:int,
                                                     <<f_1030@84:2>@97:0>:int)
      
      P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int),
      ((<f_1030@90:0> >= 100) && (<<f_1030@90:2>@93:0> = <f_1030@90:1>))
      |- P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,
                                 <<f_1030@90:2>@93:0>:int)
      
      P[<f_1030@84:1>]((-1 + <f_1030@90:0>):int,<f_1030@90:1>:int), (
      <f_1030@90:0> < 51) |- P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int)
      
      P[<f_1030@78:1>]((-1 + <f_1030@84:0>):int,<f_1030@84:1>:int), (
      <f_1030@84:0> < 51) |- P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int)
      
      P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
      <f_1030@78:0> < 51) |- P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int)
      
       ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
    begin ParamSubstInfer.infer(64908)[3]
      
    end ParamSubstInfer.infer(64908)[3] (0.110983 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(64910)[3]
      
    end RefTypeInfer.elim_coeffs(64910)[3] (0.001000 sec.)
    begin GenHcSolver.solve(65259)[3]
      Horn clauses:
        P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
        
        P[<<f_1030@72:2>@105:0>](0:int,50:int,100:int), <fail_1153@110:0>
        |- P[<fail_1153@110:0>](<fail_1153@110:0>:bool)
        
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int),
        P[<<f_1030@78:2>@101:0>]((1 + <f_1030@72:0>):int,<f_1030@72:1>:int,<<f_1030@72:2>@105:0>:int),
        (<f_1030@72:0> < 50) |- P[<<f_1030@72:2>@105:0>](<f_1030@72:0>:int,
                                                         <f_1030@72:1>:int,
                                                         <<f_1030@72:2>@105:0>:int)
        
        P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int),
        P[<<f_1030@84:2>@97:0>]((1 + <f_1030@78:0>):int,<f_1030@78:1>:int,<<f_1030@78:2>@101:0>:int),
        (<f_1030@78:0> < 50) |- P[<<f_1030@78:2>@101:0>](<f_1030@78:0>:int,
                                                         <f_1030@78:1>:int,
                                                         <<f_1030@78:2>@101:0>:int)
        
        P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int),
        P[<<f_1030@90:2>@93:0>]((1 + <f_1030@84:0>):int,<f_1030@84:1>:int,<<f_1030@84:2>@97:0>:int),
        (<f_1030@84:0> < 50) |- P[<<f_1030@84:2>@97:0>](<f_1030@84:0>:int,
                                                        <f_1030@84:1>:int,
                                                        <<f_1030@84:2>@97:0>:int)
        
        P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int),
        ((<f_1030@90:0> >= 100) && (<<f_1030@90:2>@93:0> = <f_1030@90:1>))
        |- P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,
                                   <<f_1030@90:2>@93:0>:int)
        
        P[<f_1030@84:1>]((-1 + <f_1030@90:0>):int,<f_1030@90:1>:int), (
        <f_1030@90:0> < 51) |- P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int)
        
        P[<f_1030@78:1>]((-1 + <f_1030@84:0>):int,<f_1030@84:1>:int), (
        <f_1030@84:0> < 51) |- P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int)
        
        P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
        <f_1030@78:0> < 51) |- P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int)
        
         ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
      lower bounds:
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
        P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int) = ((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
        P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int) = ((<f_1030@84:0> = 2) && (<f_1030@84:1> = 50))
        P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int) = ((<f_1030@90:0> = 3) && (<f_1030@90:1> = 50))
        P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
        P[<<f_1030@84:2>@97:0>](<f_1030@84:0>:int,<f_1030@84:1>:int,<<f_1030@84:2>@97:0>:int) = false
        P[<<f_1030@78:2>@101:0>](<f_1030@78:0>:int,<f_1030@78:1>:int,<<f_1030@78:2>@101:0>:int) = false
        P[<<f_1030@72:2>@105:0>](<f_1030@72:0>:int,<f_1030@72:1>:int,<<f_1030@72:2>@105:0>:int) = false
        P[<fail_1153@110:0>](<fail_1153@110:0>:bool) = false
      upper bounds:
        P[<<f_1030@72:2>@105:0>](var273:int,var274:int,var275:int) = true
        P[<<f_1030@78:2>@101:0>](var267:int,var268:int,var269:int) = true
        P[<<f_1030@84:2>@97:0>](var261:int,var262:int,var263:int) = true
        P[<<f_1030@90:2>@93:0>](var255:int,var256:int,var257:int) = true
      begin GenHcSolver.classify_pids(71600)[4]
        output:
          [<<f_1030@90:2>@93:0>;<<f_1030@84:2>@97:0>;<<f_1030@78:2>@101:0>;<<f_1030@72:2>@105:0>]
      end GenHcSolver.classify_pids(71600)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(71633)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(71634)[5]
          begin InterpProver.interpolate_fresh(71635)[6]
            begin InterpProver.interpolate_log(71636)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(71637)[8]
                begin InterpProver.interpolate_simplify(71638)[9]
                  begin InterpProver.interpolate_quick(71651)[10]
                    
                  end InterpProver.interpolate_quick(71651)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(71655)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(71655)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(71638)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(71637)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(71636)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(71635)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(71634)[5] (0.000000 sec.)
        output:
          P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
          P[<<f_1030@84:2>@97:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
          P[<<f_1030@78:2>@101:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
          P[<<f_1030@72:2>@105:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
      end ApronInterface.convex_hull_interpolate(71633)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
        
        P[<f_1030@90:1>](<f_1030@90:0>:int,<<f_1030@90:2>@93:0>:int), (<f_1030@90:0> >= 100) |- bot
        
        P[<f_1030@84:1>]((-1 + <f_1030@90:0>):int,<f_1030@90:1>:int), (
        <f_1030@90:0> < 51) |- P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int)
        
        P[<f_1030@78:1>]((-1 + <f_1030@84:0>):int,<f_1030@84:1>:int), (
        <f_1030@84:0> < 51) |- P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int)
        
        P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
        <f_1030@78:0> < 51) |- P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int)
        
         ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
      lower bounds:
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
        P[<fail_1153@110:0>](var281:bool) = false
        P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int) = ((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
        P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int) = ((<f_1030@84:0> = 2) && (<f_1030@84:1> = 50))
        P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int) = ((<f_1030@90:0> = 3) && (<f_1030@90:1> = 50))
      upper bounds:
        P[<f_1030@90:1>](var296:int,var297:int) = (var296 < 100)
        P[<f_1030@84:1>](var292:int,var293:int) = true
        P[<f_1030@78:1>](var288:int,var289:int) = true
        P[<f_1030@72:1>](var284:int,var285:int) = true
      begin GenHcSolver.classify_pids(78751)[4]
        output:
          [<f_1030@72:1>;<f_1030@78:1>;<f_1030@84:1>;<f_1030@90:1>]
      end GenHcSolver.classify_pids(78751)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(78811)[4]
        lb:(((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) ||
            (((<f_1030@72:0> = 1) && (<f_1030@72:1> = 50)) ||
             (((<f_1030@72:0> = 2) && (<f_1030@72:1> = 50)) || ((<f_1030@72:0> = 3) && (<f_1030@72:1> = 50)))))
        nub:(not (<f_1030@72:0> < 100))
        lb':(((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) ||
             (((<f_1030@72:0> = 1) && (<f_1030@72:1> = 50)) ||
              (((<f_1030@72:0> = 2) && (<f_1030@72:1> = 50)) || ((<f_1030@72:0> = 3) && (<f_1030@72:1> = 50)))))
        nub':(not (<f_1030@72:0> < 100))
        begin InterpProver.interpolate(78812)[5]
          begin InterpProver.interpolate_fresh(78813)[6]
            begin InterpProver.interpolate_log(78814)[7]
              input1: (((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) ||
                       (((<f_1030@72:0> = 1) && (<f_1030@72:1> = 50)) ||
                        (((<f_1030@72:0> = 2) && (<f_1030@72:1> = 50)) || ((<f_1030@72:0> = 3) && (<f_1030@72:1> = 50)))))
              input2: (not (<f_1030@72:0> < 100))
              begin InterpProver.interpolate_check(78815)[8]
                begin InterpProver.interpolate_simplify(78816)[9]
                  begin InterpProver.interpolate_quick(79016)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(79025)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(79026)[12]
                        begin CsisatInterface.interpolate_csisat_log(79027)[13]
                          input1: (0 = v_sep_f_1030_sep_72_sep_0 | 1 = v_sep_f_1030_sep_72_sep_0 | 2 = v_sep_f_1030_sep_72_sep_0 | 3 = v_sep_f_1030_sep_72_sep_0)
                          input2: 100 <= v_sep_f_1030_sep_72_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(79028)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(79028)[14] (0.000999 sec.)
                          output: (0.02*v_sep_f_1030_sep_72_sep_0 <= 0 | 0.020202020202*v_sep_f_1030_sep_72_sep_0 <= 0.020202020202 | 0.0204081632653*v_sep_f_1030_sep_72_sep_0 <= 0.0408163265306 | 0.020618556701*v_sep_f_1030_sep_72_sep_0 <= 0.0618556701031)
                          
                        end CsisatInterface.interpolate_csisat_log(79027)[13] (0.000999 sec.)
                        after simplification: (v_sep_f_1030_sep_72_sep_0 <= 0 | v_sep_f_1030_sep_72_sep_0 <= 2 | 2*v_sep_f_1030_sep_72_sep_0 <= 2 | 2*v_sep_f_1030_sep_72_sep_0 <= 6)
                        after dnf conversion: ((v_sep_f_1030_sep_72_sep_0 <= 0) | (v_sep_f_1030_sep_72_sep_0 <= 2) | (2*v_sep_f_1030_sep_72_sep_0 <= 2) | (2*v_sep_f_1030_sep_72_sep_0 <= 6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(79026)[12] (0.000999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(79025)[11] (0.000999 sec.)
                    
                  end InterpProver.interpolate_quick(79016)[10] (0.001999 sec.)
                  
                end InterpProver.interpolate_simplify(78816)[9] (0.002999 sec.)
                
              end InterpProver.interpolate_check(78815)[8] (0.003999 sec.)
              output: (<f_1030@72:0> <= 3)
            end InterpProver.interpolate_log(78814)[7] (0.004999 sec.)
            
          end InterpProver.interpolate_fresh(78813)[6] (0.004999 sec.)
          
        end InterpProver.interpolate(78812)[5] (0.004999 sec.)
        output:
          P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = (<f_1030@72:0> <= 3)
          P[<f_1030@78:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = (<f_1030@72:0> <= 3)
          P[<f_1030@84:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = (<f_1030@72:0> <= 3)
          P[<f_1030@90:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = (<f_1030@72:0> <= 3)
      end ApronInterface.convex_hull_interpolate(78811)[4] (0.004999 sec.)
      Horn clauses:
        P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
        
        P[<f_1030@84:1>]((-1 + <f_1030@90:0>):int,<f_1030@90:1>:int), (
        (<f_1030@90:0> < 51) && (<f_1030@90:0> > 3)) |- bot
        
        P[<f_1030@78:1>]((-1 + <f_1030@84:0>):int,<f_1030@84:1>:int), (
        <f_1030@84:0> < 51) |- P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int)
        
        P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
        <f_1030@78:0> < 51) |- P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int)
        
         ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
      lower bounds:
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
        P[<fail_1153@110:0>](var303:bool) = false
        P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int) = ((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
        P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int) = ((<f_1030@84:0> = 2) && (<f_1030@84:1> = 50))
      upper bounds:
        P[<f_1030@84:1>](var314:int,var315:int) = ((var314 <= 2) || (var314 >= 50))
        P[<f_1030@78:1>](var310:int,var311:int) = ((var310 <= 1) || (var310 >= 49))
        P[<f_1030@72:1>](var306:int,var307:int) = ((var306 <= 0) || (var306 >= 48))
      begin GenHcSolver.classify_pids(84875)[4]
        output:
          [<f_1030@84:1>],[<f_1030@78:1>],[<f_1030@72:1>]
      end GenHcSolver.classify_pids(84875)[4] (0.001000 sec.)
      lb:((<f_1030@84:0> = 2) && (<f_1030@84:1> = 50))
      nub:(not ((<f_1030@84:0> <= 2) || (<f_1030@84:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(85020)[4]
        lb:((<f_1030@84:0> = 2) && (<f_1030@84:1> = 50))
        nub:(not ((<f_1030@84:0> <= 2) || (<f_1030@84:0> >= 50)))
        lb':((<f_1030@84:0> = 2) && (<f_1030@84:1> = 50))
        nub':(not ((<f_1030@84:0> <= 2) || (<f_1030@84:0> >= 50)))
        begin InterpProver.interpolate(85021)[5]
          begin InterpProver.interpolate_fresh(85022)[6]
            begin InterpProver.interpolate_log(85023)[7]
              input1: ((<f_1030@84:0> = 2) && (<f_1030@84:1> = 50))
              input2: (not ((<f_1030@84:0> <= 2) || (<f_1030@84:0> >= 50)))
              begin InterpProver.interpolate_check(85024)[8]
                begin InterpProver.interpolate_simplify(85025)[9]
                  begin InterpProver.interpolate_quick(85092)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(85101)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(85102)[12]
                        begin CsisatInterface.interpolate_csisat_log(85103)[13]
                          input1: 2 = v_sep_f_1030_sep_84_sep_0
                          input2: (3 <= v_sep_f_1030_sep_84_sep_0 & (1 + v_sep_f_1030_sep_84_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(85104)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(85104)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_84_sep_0 <= 4
                          
                        end CsisatInterface.interpolate_csisat_log(85103)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_84_sep_0 <= 4
                        after dnf conversion: ((2*v_sep_f_1030_sep_84_sep_0 <= 4))
                        
                      end CsisatInterface.interpolate_csisat_post_process(85102)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(85101)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(85092)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(85025)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(85024)[8] (0.002000 sec.)
              output: (<f_1030@84:0> <= 2)
            end InterpProver.interpolate_log(85023)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(85022)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(85021)[5] (0.002000 sec.)
        output:
          P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int) = (<f_1030@84:0> <= 2)
      end ApronInterface.convex_hull_interpolate(85020)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
        
        P[<f_1030@78:1>]((-1 + <f_1030@84:0>):int,<f_1030@84:1>:int), (
        (<f_1030@84:0> < 51) && (<f_1030@84:0> > 2)) |- bot
        
        P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
        <f_1030@78:0> < 51) |- P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int)
        
         ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
      lower bounds:
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
        P[<fail_1153@110:0>](var317:bool) = false
        P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int) = ((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
      upper bounds:
        P[<f_1030@78:1>](var324:int,var325:int) = ((var324 <= 1) || (var324 >= 50))
        P[<f_1030@72:1>](var320:int,var321:int) = ((var320 <= 0) || (var320 >= 49))
      begin GenHcSolver.classify_pids(87571)[4]
        output:
          [<f_1030@78:1>],[<f_1030@72:1>]
      end GenHcSolver.classify_pids(87571)[4] (0.000000 sec.)
      lb:((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
      nub:(not ((<f_1030@78:0> <= 1) || (<f_1030@78:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(87620)[4]
        lb:((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
        nub:(not ((<f_1030@78:0> <= 1) || (<f_1030@78:0> >= 50)))
        lb':((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
        nub':(not ((<f_1030@78:0> <= 1) || (<f_1030@78:0> >= 50)))
        begin InterpProver.interpolate(87621)[5]
          begin InterpProver.interpolate_fresh(87622)[6]
            begin InterpProver.interpolate_log(87623)[7]
              input1: ((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
              input2: (not ((<f_1030@78:0> <= 1) || (<f_1030@78:0> >= 50)))
              begin InterpProver.interpolate_check(87624)[8]
                begin InterpProver.interpolate_simplify(87625)[9]
                  begin InterpProver.interpolate_quick(87692)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(87701)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(87702)[12]
                        begin CsisatInterface.interpolate_csisat_log(87703)[13]
                          input1: 1 = v_sep_f_1030_sep_78_sep_0
                          input2: (2 <= v_sep_f_1030_sep_78_sep_0 & (1 + v_sep_f_1030_sep_78_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(87704)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(87704)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_78_sep_0 <= 2
                          
                        end CsisatInterface.interpolate_csisat_log(87703)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_78_sep_0 <= 2
                        after dnf conversion: ((2*v_sep_f_1030_sep_78_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(87702)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(87701)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(87692)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(87625)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(87624)[8] (0.001999 sec.)
              output: (<f_1030@78:0> <= 1)
            end InterpProver.interpolate_log(87623)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(87622)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(87621)[5] (0.001999 sec.)
        output:
          P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int) = (<f_1030@78:0> <= 1)
      end ApronInterface.convex_hull_interpolate(87620)[4] (0.001999 sec.)
      Horn clauses:
        P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
        
        P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
        (<f_1030@78:0> < 51) && (<f_1030@78:0> > 1)) |- bot
        
         ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
      lower bounds:
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
        P[<fail_1153@110:0>](var327:bool) = false
      upper bounds:
        P[<fail_1153@110:0>](var330:bool) = true
      begin GenHcSolver.classify_pids(88569)[4]
        output:
          [<fail_1153@110:0>]
      end GenHcSolver.classify_pids(88569)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(88572)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(88573)[5]
          begin InterpProver.interpolate_fresh(88574)[6]
            begin InterpProver.interpolate_log(88575)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(88576)[8]
                begin InterpProver.interpolate_simplify(88577)[9]
                  begin InterpProver.interpolate_quick(88590)[10]
                    
                  end InterpProver.interpolate_quick(88590)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(88594)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(88594)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(88577)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(88576)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(88575)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(88574)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(88573)[5] (0.000000 sec.)
        output:
          P[<fail_1153@110:0>](var327:bool) = false
      end ApronInterface.convex_hull_interpolate(88572)[4] (0.000000 sec.)
      Horn clauses:
        P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
        (<f_1030@78:0> < 51) && (<f_1030@78:0> > 1)) |- bot
        
         ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
      lower bounds:
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
      upper bounds:
        P[<f_1030@72:1>](var331:int,var332:int) = ((var331 <= 0) || (var331 >= 50))
      begin GenHcSolver.classify_pids(89601)[4]
        output:
          [<f_1030@72:1>]
      end GenHcSolver.classify_pids(89601)[4] (0.000000 sec.)
      lb:((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
      nub:(not ((<f_1030@72:0> <= 0) || (<f_1030@72:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(89604)[4]
        lb:((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
        nub:(not ((<f_1030@72:0> <= 0) || (<f_1030@72:0> >= 50)))
        lb':((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
        nub':(not ((<f_1030@72:0> <= 0) || (<f_1030@72:0> >= 50)))
        begin InterpProver.interpolate(89605)[5]
          begin InterpProver.interpolate_fresh(89606)[6]
            begin InterpProver.interpolate_log(89607)[7]
              input1: ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
              input2: (not ((<f_1030@72:0> <= 0) || (<f_1030@72:0> >= 50)))
              begin InterpProver.interpolate_check(89608)[8]
                begin InterpProver.interpolate_simplify(89609)[9]
                  begin InterpProver.interpolate_quick(89665)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(89674)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(89675)[12]
                        begin CsisatInterface.interpolate_csisat_log(89676)[13]
                          input1: 0 = v_sep_f_1030_sep_72_sep_0
                          input2: (1 <= v_sep_f_1030_sep_72_sep_0 & (1 + v_sep_f_1030_sep_72_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(89677)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(89677)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_72_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(89676)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_72_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_f_1030_sep_72_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(89675)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(89674)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(89665)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(89609)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(89608)[8] (0.002000 sec.)
              output: (<f_1030@72:0> <= 0)
            end InterpProver.interpolate_log(89607)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(89606)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(89605)[5] (0.002000 sec.)
        output:
          P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = (<f_1030@72:0> <= 0)
      end ApronInterface.convex_hull_interpolate(89604)[4] (0.002000 sec.)
      begin HcSolver.check_validity(89833)[4]
        input:
          P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
          
          P[<<f_1030@72:2>@105:0>](0:int,50:int,100:int), <fail_1153@110:0>
          |- P[<fail_1153@110:0>](<fail_1153@110:0>:bool)
          
          P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int),
          P[<<f_1030@78:2>@101:0>]((1 + <f_1030@72:0>):int,<f_1030@72:1>:int,<<f_1030@72:2>@105:0>:int),
          (<f_1030@72:0> < 50)
          |- P[<<f_1030@72:2>@105:0>](<f_1030@72:0>:int,<f_1030@72:1>:int,
                                      <<f_1030@72:2>@105:0>:int)
          
          P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int),
          P[<<f_1030@84:2>@97:0>]((1 + <f_1030@78:0>):int,<f_1030@78:1>:int,<<f_1030@78:2>@101:0>:int),
          (<f_1030@78:0> < 50)
          |- P[<<f_1030@78:2>@101:0>](<f_1030@78:0>:int,<f_1030@78:1>:int,
                                      <<f_1030@78:2>@101:0>:int)
          
          P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int),
          P[<<f_1030@90:2>@93:0>]((1 + <f_1030@84:0>):int,<f_1030@84:1>:int,<<f_1030@84:2>@97:0>:int),
          (<f_1030@84:0> < 50) |- P[<<f_1030@84:2>@97:0>](<f_1030@84:0>:int,
                                                          <f_1030@84:1>:int,
                                                          <<f_1030@84:2>@97:0>:int)
          
          P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int),
          ((<f_1030@90:0> >= 100) && (<<f_1030@90:2>@93:0> = <f_1030@90:1>))
          |- P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,
                                     <<f_1030@90:2>@93:0>:int)
          
          P[<f_1030@84:1>]((-1 + <f_1030@90:0>):int,<f_1030@90:1>:int), (
          <f_1030@90:0> < 51) |- P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int)
          
          P[<f_1030@78:1>]((-1 + <f_1030@84:0>):int,<f_1030@84:1>:int), (
          <f_1030@84:0> < 51) |- P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int)
          
          P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
          <f_1030@78:0> < 51) |- P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int)
          
           ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(89833)[4] (0.002999 sec.)
      solution:
        P[<fail_1153@110:0>](var327:bool) = false
        P[<<f_1030@72:2>@105:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
        P[<<f_1030@78:2>@101:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
        P[<<f_1030@84:2>@97:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
        P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
        P[<f_1030@90:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = (<f_1030@72:0> <= 3)
        P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int) = (<f_1030@84:0> <= 2)
        P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int) = (<f_1030@78:0> <= 1)
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = (<f_1030@72:0> <= 0)
    end GenHcSolver.solve(65259)[3] (0.105984 sec.)
    begin GenHcSolver.solve(90418)[3]
      Horn clauses:
        P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
        
        P[<<f_1030@72:2>@105:0>](0:int,50:int,100:int), <fail_1153@110:0>
        |- P[<fail_1153@110:0>](<fail_1153@110:0>:bool)
        
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int),
        P[<<f_1030@78:2>@101:0>]((1 + <f_1030@72:0>):int,<f_1030@72:1>:int,<<f_1030@72:2>@105:0>:int),
        (<f_1030@72:0> < 50) |- P[<<f_1030@72:2>@105:0>](<f_1030@72:0>:int,
                                                         <f_1030@72:1>:int,
                                                         <<f_1030@72:2>@105:0>:int)
        
        P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int),
        P[<<f_1030@84:2>@97:0>]((1 + <f_1030@78:0>):int,<f_1030@78:1>:int,<<f_1030@78:2>@101:0>:int),
        (<f_1030@78:0> < 50) |- P[<<f_1030@78:2>@101:0>](<f_1030@78:0>:int,
                                                         <f_1030@78:1>:int,
                                                         <<f_1030@78:2>@101:0>:int)
        
        P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int),
        P[<<f_1030@90:2>@93:0>]((1 + <f_1030@84:0>):int,<f_1030@84:1>:int,<<f_1030@84:2>@97:0>:int),
        (<f_1030@84:0> < 50) |- P[<<f_1030@84:2>@97:0>](<f_1030@84:0>:int,
                                                        <f_1030@84:1>:int,
                                                        <<f_1030@84:2>@97:0>:int)
        
        P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int),
        ((<f_1030@90:0> >= 100) && (<<f_1030@90:2>@93:0> = <f_1030@90:1>))
        |- P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,
                                   <<f_1030@90:2>@93:0>:int)
        
        P[<f_1030@84:1>]((-1 + <f_1030@90:0>):int,<f_1030@90:1>:int), (
        <f_1030@90:0> < 51) |- P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int)
        
        P[<f_1030@78:1>]((-1 + <f_1030@84:0>):int,<f_1030@84:1>:int), (
        <f_1030@84:0> < 51) |- P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int)
        
        P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
        <f_1030@78:0> < 51) |- P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int)
        
         ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
      lower bounds:
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
        P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int) = ((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
        P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int) = ((<f_1030@84:0> = 2) && (<f_1030@84:1> = 50))
        P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int) = ((<f_1030@90:0> = 3) && (<f_1030@90:1> = 50))
        P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
        P[<<f_1030@84:2>@97:0>](<f_1030@84:0>:int,<f_1030@84:1>:int,<<f_1030@84:2>@97:0>:int) = false
        P[<<f_1030@78:2>@101:0>](<f_1030@78:0>:int,<f_1030@78:1>:int,<<f_1030@78:2>@101:0>:int) = false
        P[<<f_1030@72:2>@105:0>](<f_1030@72:0>:int,<f_1030@72:1>:int,<<f_1030@72:2>@105:0>:int) = false
        P[<fail_1153@110:0>](<fail_1153@110:0>:bool) = false
      upper bounds:
        P[<<f_1030@72:2>@105:0>](var354:int,var355:int,var356:int) = true
        P[<<f_1030@78:2>@101:0>](var348:int,var349:int,var350:int) = true
        P[<<f_1030@84:2>@97:0>](var342:int,var343:int,var344:int) = true
        P[<<f_1030@90:2>@93:0>](var336:int,var337:int,var338:int) = true
      begin GenHcSolver.classify_pids(96759)[4]
        output:
          [<<f_1030@90:2>@93:0>;<<f_1030@84:2>@97:0>;<<f_1030@78:2>@101:0>;<<f_1030@72:2>@105:0>]
      end GenHcSolver.classify_pids(96759)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(96792)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(96795)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(96795)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(96800)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(96800)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(96803)[5]
          begin InterpProver.interpolate_fresh(96804)[6]
            begin InterpProver.interpolate_log(96805)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(96806)[8]
                begin InterpProver.interpolate_simplify(96807)[9]
                  begin InterpProver.interpolate_quick(96822)[10]
                    
                  end InterpProver.interpolate_quick(96822)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(96826)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(96826)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(96807)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(96806)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(96805)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(96804)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(96803)[5] (0.000000 sec.)
        output:
          P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
          P[<<f_1030@84:2>@97:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
          P[<<f_1030@78:2>@101:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
          P[<<f_1030@72:2>@105:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
      end ApronInterface.convex_hull_interpolate(96792)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
        
        P[<f_1030@90:1>](<f_1030@90:0>:int,<<f_1030@90:2>@93:0>:int), (<f_1030@90:0> >= 100) |- bot
        
        P[<f_1030@84:1>]((-1 + <f_1030@90:0>):int,<f_1030@90:1>:int), (
        <f_1030@90:0> < 51) |- P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int)
        
        P[<f_1030@78:1>]((-1 + <f_1030@84:0>):int,<f_1030@84:1>:int), (
        <f_1030@84:0> < 51) |- P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int)
        
        P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
        <f_1030@78:0> < 51) |- P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int)
        
         ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
      lower bounds:
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
        P[<fail_1153@110:0>](var362:bool) = false
        P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int) = ((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
        P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int) = ((<f_1030@84:0> = 2) && (<f_1030@84:1> = 50))
        P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int) = ((<f_1030@90:0> = 3) && (<f_1030@90:1> = 50))
      upper bounds:
        P[<f_1030@90:1>](var377:int,var378:int) = (var377 < 100)
        P[<f_1030@84:1>](var373:int,var374:int) = true
        P[<f_1030@78:1>](var369:int,var370:int) = true
        P[<f_1030@72:1>](var365:int,var366:int) = true
      begin GenHcSolver.classify_pids(103929)[4]
        output:
          [<f_1030@72:1>;<f_1030@78:1>;<f_1030@84:1>;<f_1030@90:1>]
      end GenHcSolver.classify_pids(103929)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(103989)[4]
        lb:(((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) ||
            (((<f_1030@72:0> = 1) && (<f_1030@72:1> = 50)) ||
             (((<f_1030@72:0> = 2) && (<f_1030@72:1> = 50)) || ((<f_1030@72:0> = 3) && (<f_1030@72:1> = 50)))))
        nub:(not (<f_1030@72:0> < 100))
        begin ExtFormula.Formula.case_analysis_boolean(104088)[5]
          ts: ((<f_1030@72:1> = 50) &&
               ((<f_1030@72:0> = 0) || ((<f_1030@72:0> = 2) || ((<f_1030@72:0> = 1) || (<f_1030@72:0> = 3)))))
          
        end ExtFormula.Formula.case_analysis_boolean(104088)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(104110)[5]
          ts: (<f_1030@72:0> >= 100)
          
        end ExtFormula.Formula.case_analysis_boolean(104110)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@72:1>) = 0) && (((3 + (-1 * <f_1030@72:0>)) >= 0) && (<f_1030@72:0> >= 0)))
        nub':((-100 + <f_1030@72:0>) >= 0)
        begin InterpProver.interpolate(104115)[5]
          begin InterpProver.interpolate_fresh(104116)[6]
            begin InterpProver.interpolate_log(104117)[7]
              input1: (((-50 + <f_1030@72:1>) = 0) && (((3 + (-1 * <f_1030@72:0>)) >= 0) && (<f_1030@72:0> >= 0)))
              input2: ((-100 + <f_1030@72:0>) >= 0)
              begin InterpProver.interpolate_check(104118)[8]
                begin InterpProver.interpolate_simplify(104119)[9]
                  begin InterpProver.interpolate_quick(104216)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(104225)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(104226)[12]
                        begin CsisatInterface.interpolate_csisat_log(104227)[13]
                          input1: (0 <= v_sep_f_1030_sep_72_sep_0 & v_sep_f_1030_sep_72_sep_0 <= 3)
                          input2: 100 <= v_sep_f_1030_sep_72_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(104228)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(104228)[14] (0.000000 sec.)
                          output: 0.020618556701*v_sep_f_1030_sep_72_sep_0 <= 0.0618556701031
                          
                        end CsisatInterface.interpolate_csisat_log(104227)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_72_sep_0 <= 6
                        after dnf conversion: ((2*v_sep_f_1030_sep_72_sep_0 <= 6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(104226)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(104225)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(104216)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(104119)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(104118)[8] (0.002000 sec.)
              output: (<f_1030@72:0> <= 3)
            end InterpProver.interpolate_log(104117)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(104116)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(104115)[5] (0.002000 sec.)
        output:
          P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = (<f_1030@72:0> <= 3)
          P[<f_1030@78:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = (<f_1030@72:0> <= 3)
          P[<f_1030@84:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = (<f_1030@72:0> <= 3)
          P[<f_1030@90:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = (<f_1030@72:0> <= 3)
      end ApronInterface.convex_hull_interpolate(103989)[4] (0.003000 sec.)
      Horn clauses:
        P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
        
        P[<f_1030@84:1>]((-1 + <f_1030@90:0>):int,<f_1030@90:1>:int), (
        (<f_1030@90:0> < 51) && (<f_1030@90:0> > 3)) |- bot
        
        P[<f_1030@78:1>]((-1 + <f_1030@84:0>):int,<f_1030@84:1>:int), (
        <f_1030@84:0> < 51) |- P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int)
        
        P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
        <f_1030@78:0> < 51) |- P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int)
        
         ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
      lower bounds:
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
        P[<fail_1153@110:0>](var384:bool) = false
        P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int) = ((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
        P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int) = ((<f_1030@84:0> = 2) && (<f_1030@84:1> = 50))
      upper bounds:
        P[<f_1030@84:1>](var395:int,var396:int) = ((var395 <= 2) || (var395 >= 50))
        P[<f_1030@78:1>](var391:int,var392:int) = ((var391 <= 1) || (var391 >= 49))
        P[<f_1030@72:1>](var387:int,var388:int) = ((var387 <= 0) || (var387 >= 48))
      begin GenHcSolver.classify_pids(110054)[4]
        output:
          [<f_1030@84:1>],[<f_1030@78:1>],[<f_1030@72:1>]
      end GenHcSolver.classify_pids(110054)[4] (0.000000 sec.)
      lb:((<f_1030@84:0> = 2) && (<f_1030@84:1> = 50))
      nub:(not ((<f_1030@84:0> <= 2) || (<f_1030@84:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(110199)[4]
        lb:((<f_1030@84:0> = 2) && (<f_1030@84:1> = 50))
        nub:(not ((<f_1030@84:0> <= 2) || (<f_1030@84:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(110211)[5]
          ts: ((<f_1030@84:0> = 2) && (<f_1030@84:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(110211)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(110235)[5]
          ts: ((<f_1030@84:0> < 50) && (<f_1030@84:0> > 2))
          
        end ExtFormula.Formula.case_analysis_boolean(110235)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@84:1>) = 0) && ((-2 + <f_1030@84:0>) = 0))
        nub':(((49 + (-1 * <f_1030@84:0>)) >= 0) && ((-3 + <f_1030@84:0>) >= 0))
        begin InterpProver.interpolate(110242)[5]
          begin InterpProver.interpolate_fresh(110243)[6]
            begin InterpProver.interpolate_log(110244)[7]
              input1: (((-50 + <f_1030@84:1>) = 0) && ((-2 + <f_1030@84:0>) = 0))
              input2: (((49 + (-1 * <f_1030@84:0>)) >= 0) && ((-3 + <f_1030@84:0>) >= 0))
              begin InterpProver.interpolate_check(110245)[8]
                begin InterpProver.interpolate_simplify(110246)[9]
                  begin InterpProver.interpolate_quick(110313)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(110322)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(110323)[12]
                        begin CsisatInterface.interpolate_csisat_log(110324)[13]
                          input1: 2 = v_sep_f_1030_sep_84_sep_0
                          input2: (3 <= v_sep_f_1030_sep_84_sep_0 & v_sep_f_1030_sep_84_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(110325)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(110325)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_84_sep_0 <= 4
                          
                        end CsisatInterface.interpolate_csisat_log(110324)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_84_sep_0 <= 4
                        after dnf conversion: ((2*v_sep_f_1030_sep_84_sep_0 <= 4))
                        
                      end CsisatInterface.interpolate_csisat_post_process(110323)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(110322)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(110313)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(110246)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(110245)[8] (0.002000 sec.)
              output: (<f_1030@84:0> <= 2)
            end InterpProver.interpolate_log(110244)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(110243)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(110242)[5] (0.002000 sec.)
        output:
          P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int) = (<f_1030@84:0> <= 2)
      end ApronInterface.convex_hull_interpolate(110199)[4] (0.003000 sec.)
      Horn clauses:
        P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
        
        P[<f_1030@78:1>]((-1 + <f_1030@84:0>):int,<f_1030@84:1>:int), (
        (<f_1030@84:0> < 51) && (<f_1030@84:0> > 2)) |- bot
        
        P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
        <f_1030@78:0> < 51) |- P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int)
        
         ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
      lower bounds:
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
        P[<fail_1153@110:0>](var398:bool) = false
        P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int) = ((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
      upper bounds:
        P[<f_1030@78:1>](var405:int,var406:int) = ((var405 <= 1) || (var405 >= 50))
        P[<f_1030@72:1>](var401:int,var402:int) = ((var401 <= 0) || (var401 >= 49))
      begin GenHcSolver.classify_pids(112792)[4]
        output:
          [<f_1030@78:1>],[<f_1030@72:1>]
      end GenHcSolver.classify_pids(112792)[4] (0.000000 sec.)
      lb:((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
      nub:(not ((<f_1030@78:0> <= 1) || (<f_1030@78:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(112841)[4]
        lb:((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
        nub:(not ((<f_1030@78:0> <= 1) || (<f_1030@78:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(112853)[5]
          ts: ((<f_1030@78:0> = 1) && (<f_1030@78:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(112853)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(112877)[5]
          ts: ((<f_1030@78:0> < 50) && (<f_1030@78:0> > 1))
          
        end ExtFormula.Formula.case_analysis_boolean(112877)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@78:1>) = 0) && ((-1 + <f_1030@78:0>) = 0))
        nub':(((49 + (-1 * <f_1030@78:0>)) >= 0) && ((-2 + <f_1030@78:0>) >= 0))
        begin InterpProver.interpolate(112884)[5]
          begin InterpProver.interpolate_fresh(112885)[6]
            begin InterpProver.interpolate_log(112886)[7]
              input1: (((-50 + <f_1030@78:1>) = 0) && ((-1 + <f_1030@78:0>) = 0))
              input2: (((49 + (-1 * <f_1030@78:0>)) >= 0) && ((-2 + <f_1030@78:0>) >= 0))
              begin InterpProver.interpolate_check(112887)[8]
                begin InterpProver.interpolate_simplify(112888)[9]
                  begin InterpProver.interpolate_quick(112955)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(112964)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(112965)[12]
                        begin CsisatInterface.interpolate_csisat_log(112966)[13]
                          input1: 1 = v_sep_f_1030_sep_78_sep_0
                          input2: (2 <= v_sep_f_1030_sep_78_sep_0 & v_sep_f_1030_sep_78_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(112967)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(112967)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_78_sep_0 <= 2
                          
                        end CsisatInterface.interpolate_csisat_log(112966)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_78_sep_0 <= 2
                        after dnf conversion: ((2*v_sep_f_1030_sep_78_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(112965)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(112964)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(112955)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(112888)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(112887)[8] (0.001000 sec.)
              output: (<f_1030@78:0> <= 1)
            end InterpProver.interpolate_log(112886)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(112885)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(112884)[5] (0.001000 sec.)
        output:
          P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int) = (<f_1030@78:0> <= 1)
      end ApronInterface.convex_hull_interpolate(112841)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
        
        P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
        (<f_1030@78:0> < 51) && (<f_1030@78:0> > 1)) |- bot
        
         ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
      lower bounds:
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
        P[<fail_1153@110:0>](var408:bool) = false
      upper bounds:
        P[<fail_1153@110:0>](var411:bool) = true
      begin GenHcSolver.classify_pids(113832)[4]
        output:
          [<fail_1153@110:0>]
      end GenHcSolver.classify_pids(113832)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(113835)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(113838)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(113838)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(113843)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(113843)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(113846)[5]
          begin InterpProver.interpolate_fresh(113847)[6]
            begin InterpProver.interpolate_log(113848)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(113849)[8]
                begin InterpProver.interpolate_simplify(113850)[9]
                  begin InterpProver.interpolate_quick(113865)[10]
                    
                  end InterpProver.interpolate_quick(113865)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(113869)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(113869)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(113850)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(113849)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(113848)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(113847)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(113846)[5] (0.001000 sec.)
        output:
          P[<fail_1153@110:0>](var408:bool) = false
      end ApronInterface.convex_hull_interpolate(113835)[4] (0.001000 sec.)
      Horn clauses:
        P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
        (<f_1030@78:0> < 51) && (<f_1030@78:0> > 1)) |- bot
        
         ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
      lower bounds:
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
      upper bounds:
        P[<f_1030@72:1>](var412:int,var413:int) = ((var412 <= 0) || (var412 >= 50))
      begin GenHcSolver.classify_pids(114883)[4]
        output:
          [<f_1030@72:1>]
      end GenHcSolver.classify_pids(114883)[4] (0.000000 sec.)
      lb:((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
      nub:(not ((<f_1030@72:0> <= 0) || (<f_1030@72:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(114886)[4]
        lb:((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
        nub:(not ((<f_1030@72:0> <= 0) || (<f_1030@72:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(114896)[5]
          ts: ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(114896)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(114916)[5]
          ts: ((<f_1030@72:0> < 50) && (<f_1030@72:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(114916)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@72:1>) = 0) && (<f_1030@72:0> = 0))
        nub':(((49 + (-1 * <f_1030@72:0>)) >= 0) && ((-1 + <f_1030@72:0>) >= 0))
        begin InterpProver.interpolate(114922)[5]
          begin InterpProver.interpolate_fresh(114923)[6]
            begin InterpProver.interpolate_log(114924)[7]
              input1: (((-50 + <f_1030@72:1>) = 0) && (<f_1030@72:0> = 0))
              input2: (((49 + (-1 * <f_1030@72:0>)) >= 0) && ((-1 + <f_1030@72:0>) >= 0))
              begin InterpProver.interpolate_check(114925)[8]
                begin InterpProver.interpolate_simplify(114926)[9]
                  begin InterpProver.interpolate_quick(114988)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(114997)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(114998)[12]
                        begin CsisatInterface.interpolate_csisat_log(114999)[13]
                          input1: 0 = v_sep_f_1030_sep_72_sep_0
                          input2: (1 <= v_sep_f_1030_sep_72_sep_0 & v_sep_f_1030_sep_72_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(115000)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(115000)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_72_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(114999)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_72_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_f_1030_sep_72_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(114998)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(114997)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(114988)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(114926)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(114925)[8] (0.001000 sec.)
              output: (<f_1030@72:0> <= 0)
            end InterpProver.interpolate_log(114924)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(114923)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(114922)[5] (0.001000 sec.)
        output:
          P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = (<f_1030@72:0> <= 0)
      end ApronInterface.convex_hull_interpolate(114886)[4] (0.002000 sec.)
      begin HcSolver.check_validity(115158)[4]
        input:
          P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
          
          P[<<f_1030@72:2>@105:0>](0:int,50:int,100:int), <fail_1153@110:0>
          |- P[<fail_1153@110:0>](<fail_1153@110:0>:bool)
          
          P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int),
          P[<<f_1030@78:2>@101:0>]((1 + <f_1030@72:0>):int,<f_1030@72:1>:int,<<f_1030@72:2>@105:0>:int),
          (<f_1030@72:0> < 50)
          |- P[<<f_1030@72:2>@105:0>](<f_1030@72:0>:int,<f_1030@72:1>:int,
                                      <<f_1030@72:2>@105:0>:int)
          
          P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int),
          P[<<f_1030@84:2>@97:0>]((1 + <f_1030@78:0>):int,<f_1030@78:1>:int,<<f_1030@78:2>@101:0>:int),
          (<f_1030@78:0> < 50)
          |- P[<<f_1030@78:2>@101:0>](<f_1030@78:0>:int,<f_1030@78:1>:int,
                                      <<f_1030@78:2>@101:0>:int)
          
          P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int),
          P[<<f_1030@90:2>@93:0>]((1 + <f_1030@84:0>):int,<f_1030@84:1>:int,<<f_1030@84:2>@97:0>:int),
          (<f_1030@84:0> < 50) |- P[<<f_1030@84:2>@97:0>](<f_1030@84:0>:int,
                                                          <f_1030@84:1>:int,
                                                          <<f_1030@84:2>@97:0>:int)
          
          P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int),
          ((<f_1030@90:0> >= 100) && (<<f_1030@90:2>@93:0> = <f_1030@90:1>))
          |- P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,
                                     <<f_1030@90:2>@93:0>:int)
          
          P[<f_1030@84:1>]((-1 + <f_1030@90:0>):int,<f_1030@90:1>:int), (
          <f_1030@90:0> < 51) |- P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int)
          
          P[<f_1030@78:1>]((-1 + <f_1030@84:0>):int,<f_1030@84:1>:int), (
          <f_1030@84:0> < 51) |- P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int)
          
          P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
          <f_1030@78:0> < 51) |- P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int)
          
           ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(115158)[4] (0.003999 sec.)
      solution:
        P[<fail_1153@110:0>](var408:bool) = false
        P[<<f_1030@72:2>@105:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
        P[<<f_1030@78:2>@101:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
        P[<<f_1030@84:2>@97:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
        P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,<<f_1030@90:2>@93:0>:int) = false
        P[<f_1030@90:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = (<f_1030@72:0> <= 3)
        P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int) = (<f_1030@84:0> <= 2)
        P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int) = (<f_1030@78:0> <= 1)
        P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int) = (<f_1030@72:0> <= 0)
    end GenHcSolver.solve(90418)[3] (0.117982 sec.)
    begin YhornInterface.solve(115743)[3]
      begin HcSolver.solve_ub(115744)[4]
        encoded:
          P[<fail_1153@110:0>](<fail_1153@110:0>:int)|- bot
          
          P[<<f_1030@72:2>@105:0>](0:int,50:int,100:int), (<fail_1153@110:0> = 1)
          |- P[<fail_1153@110:0>](<fail_1153@110:0>:int)
          
          P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int),
          P[<<f_1030@78:2>@101:0>]((1 + <f_1030@72:0>):int,<f_1030@72:1>:int,<<f_1030@72:2>@105:0>:int),
          (<f_1030@72:0> < 50)
          |- P[<<f_1030@72:2>@105:0>](<f_1030@72:0>:int,<f_1030@72:1>:int,
                                      <<f_1030@72:2>@105:0>:int)
          
          P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int),
          P[<<f_1030@84:2>@97:0>]((1 + <f_1030@78:0>):int,<f_1030@78:1>:int,<<f_1030@78:2>@101:0>:int),
          (<f_1030@78:0> < 50)
          |- P[<<f_1030@78:2>@101:0>](<f_1030@78:0>:int,<f_1030@78:1>:int,
                                      <<f_1030@78:2>@101:0>:int)
          
          P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int),
          P[<<f_1030@90:2>@93:0>]((1 + <f_1030@84:0>):int,<f_1030@84:1>:int,<<f_1030@84:2>@97:0>:int),
          (<f_1030@84:0> < 50) |- P[<<f_1030@84:2>@97:0>](<f_1030@84:0>:int,
                                                          <f_1030@84:1>:int,
                                                          <<f_1030@84:2>@97:0>:int)
          
          P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int),
          ((<f_1030@90:0> >= 100) && (<<f_1030@90:2>@93:0> = <f_1030@90:1>))
          |- P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,
                                     <<f_1030@90:2>@93:0>:int)
          
          P[<f_1030@84:1>]((-1 + <f_1030@90:0>):int,<f_1030@90:1>:int), (
          <f_1030@90:0> < 51) |- P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int)
          
          P[<f_1030@78:1>]((-1 + <f_1030@84:0>):int,<f_1030@84:1>:int), (
          <f_1030@84:0> < 51) |- P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int)
          
          P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
          <f_1030@78:0> < 51) |- P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int)
          
           ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
        input to Yhorn:
          P[<fail_1153@110:0>](<fail_1153@110:0>:int)|- bot
          
          P[<<f_1030@72:2>@105:0>](var414:int,var415:int,var416:int),
          ((var416 = 100) && ((var415 = 50) && ((var414 = 0) && (<fail_1153@110:0> = 1))))
          |- P[<fail_1153@110:0>](<fail_1153@110:0>:int)
          
          P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int),
          P[<<f_1030@78:2>@101:0>](var417:int,<f_1030@72:1>:int,<<f_1030@72:2>@105:0>:int),
          ((var417 = (1 + <f_1030@72:0>)) && (<f_1030@72:0> < 50))
          |- P[<<f_1030@72:2>@105:0>](<f_1030@72:0>:int,<f_1030@72:1>:int,
                                      <<f_1030@72:2>@105:0>:int)
          
          P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int),
          P[<<f_1030@84:2>@97:0>](var418:int,<f_1030@78:1>:int,<<f_1030@78:2>@101:0>:int),
          ((var418 = (1 + <f_1030@78:0>)) && (<f_1030@78:0> < 50))
          |- P[<<f_1030@78:2>@101:0>](<f_1030@78:0>:int,<f_1030@78:1>:int,
                                      <<f_1030@78:2>@101:0>:int)
          
          P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int),
          P[<<f_1030@90:2>@93:0>](var419:int,<f_1030@84:1>:int,<<f_1030@84:2>@97:0>:int),
          ((var419 = (1 + <f_1030@84:0>)) && (<f_1030@84:0> < 50))
          |- P[<<f_1030@84:2>@97:0>](<f_1030@84:0>:int,<f_1030@84:1>:int,
                                     <<f_1030@84:2>@97:0>:int)
          
          P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int),
          ((<<f_1030@90:2>@93:0> = <f_1030@90:1>) && (<f_1030@90:0> >= 100))
          |- P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,
                                     <<f_1030@90:2>@93:0>:int)
          
          P[<f_1030@84:1>](var420:int,<f_1030@90:1>:int), (((1 + var420) = <f_1030@90:0>) && (<f_1030@90:0> < 51))
          |- P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int)
          
          P[<f_1030@78:1>](var421:int,<f_1030@84:1>:int), (((1 + var421) = <f_1030@84:0>) && (<f_1030@84:0> < 51))
          |- P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int)
          
          P[<f_1030@72:1>](var422:int,<f_1030@78:1>:int), (((1 + var422) = <f_1030@78:0>) && (<f_1030@78:0> < 51))
          |- P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1153_sep_110_sep_0($464)) -> 1=0.
(($464-1=0) & ($465=0) & ($466-50=0) & ($467-100=0)) & (v_sep_f_1030_sep_72_sep_2_sep_105_sep_0($465,$466,$467)) -> v_sep_fail_1153_sep_110_sep_0($464).
(($468-50<0) & (-$468+$469-1=0)) & (v_sep_f_1030_sep_78_sep_2_sep_101_sep_0($469,$470,$471)) & (v_sep_f_1030_sep_72_sep_1($468,$470)) -> v_sep_f_1030_sep_72_sep_2_sep_105_sep_0($468,$470,$471).
(($472-50<0) & (-$472+$473-1=0)) & (v_sep_f_1030_sep_84_sep_2_sep_97_sep_0($473,$474,$475)) & (v_sep_f_1030_sep_78_sep_1($472,$474)) -> v_sep_f_1030_sep_78_sep_2_sep_101_sep_0($472,$474,$475).
(($476-50<0) & (-$476+$477-1=0)) & (v_sep_f_1030_sep_90_sep_2_sep_93_sep_0($477,$478,$479)) & (v_sep_f_1030_sep_84_sep_1($476,$478)) -> v_sep_f_1030_sep_84_sep_2_sep_97_sep_0($476,$478,$479).
(($480-100>=0) & ($481-$482=0)) & (v_sep_f_1030_sep_90_sep_1($480,$482)) -> v_sep_f_1030_sep_90_sep_2_sep_93_sep_0($480,$482,$481).
(($480-51<0) & (-$480+$483+1=0)) & (v_sep_f_1030_sep_84_sep_1($483,$482)) -> v_sep_f_1030_sep_90_sep_1($480,$482).
(($476-51<0) & (-$476+$484+1=0)) & (v_sep_f_1030_sep_78_sep_1($484,$478)) -> v_sep_f_1030_sep_84_sep_1($476,$478).
(($472-51<0) & (-$472+$485+1=0)) & (v_sep_f_1030_sep_72_sep_1($485,$474)) -> v_sep_f_1030_sep_78_sep_1($472,$474).
($468=0) & ($470-50=0) -> v_sep_f_1030_sep_72_sep_1($468,$470).


v_sep_f_1030_sep_72_sep_1: X
v_sep_f_1030_sep_72_sep_2_sep_105_sep_0: X
v_sep_f_1030_sep_78_sep_1: X
v_sep_f_1030_sep_78_sep_2_sep_101_sep_0: X
v_sep_f_1030_sep_84_sep_1: X
v_sep_f_1030_sep_84_sep_2_sep_97_sep_0: X
v_sep_f_1030_sep_90_sep_1: X
v_sep_f_1030_sep_90_sep_2_sep_93_sep_0: X
v_sep_fail_1153_sep_110_sep_0: X
.............
v_sep_f_1030_sep_72_sep_1: X
v_sep_f_1030_sep_72_sep_2_sep_105_sep_0: X
v_sep_f_1030_sep_78_sep_1: X
v_sep_f_1030_sep_78_sep_2_sep_101_sep_0: X
v_sep_f_1030_sep_84_sep_1: X
v_sep_f_1030_sep_84_sep_2_sep_97_sep_0: X
v_sep_f_1030_sep_90_sep_1: X
v_sep_f_1030_sep_90_sep_2_sep_93_sep_0: X
v_sep_fail_1153_sep_110_sep_0: X
...
v_sep_f_1030_sep_72_sep_1: X
v_sep_f_1030_sep_72_sep_2_sep_105_sep_0: X
v_sep_f_1030_sep_78_sep_1: X
v_sep_f_1030_sep_78_sep_2_sep_101_sep_0: X
v_sep_f_1030_sep_84_sep_1: X
v_sep_f_1030_sep_84_sep_2_sep_97_sep_0: X
v_sep_f_1030_sep_90_sep_1: X
v_sep_f_1030_sep_90_sep_2_sep_93_sep_0: X
v_sep_fail_1153_sep_110_sep_0: X
.....
v_sep_f_1030_sep_72_sep_1: X
v_sep_f_1030_sep_72_sep_2_sep_105_sep_0: X
v_sep_f_1030_sep_78_sep_1: X
v_sep_f_1030_sep_78_sep_2_sep_101_sep_0: X
v_sep_f_1030_sep_84_sep_1: X
v_sep_f_1030_sep_84_sep_2_sep_97_sep_0: X
v_sep_f_1030_sep_90_sep_1: X
v_sep_f_1030_sep_90_sep_2_sep_93_sep_0: X
v_sep_fail_1153_sep_110_sep_0: X
.......
v_sep_f_1030_sep_72_sep_1: X
v_sep_f_1030_sep_72_sep_2_sep_105_sep_0: X
v_sep_f_1030_sep_78_sep_1: X
v_sep_f_1030_sep_78_sep_2_sep_101_sep_0: X
v_sep_f_1030_sep_84_sep_1: X
v_sep_f_1030_sep_84_sep_2_sep_97_sep_0: X
v_sep_f_1030_sep_90_sep_1: X
v_sep_f_1030_sep_90_sep_2_sep_93_sep_0: X
v_sep_fail_1153_sep_110_sep_0: X
..........
v_sep_f_1030_sep_72_sep_1: X
v_sep_f_1030_sep_72_sep_2_sep_105_sep_0: X
v_sep_f_1030_sep_78_sep_1: X
v_sep_f_1030_sep_78_sep_2_sep_101_sep_0: X
v_sep_f_1030_sep_84_sep_1: X
v_sep_f_1030_sep_84_sep_2_sep_97_sep_0: X
v_sep_f_1030_sep_90_sep_1: X
v_sep_f_1030_sep_90_sep_2_sep_93_sep_0: X
v_sep_fail_1153_sep_110_sep_0: X
............
v_sep_f_1030_sep_72_sep_1: X
v_sep_f_1030_sep_72_sep_2_sep_105_sep_0: X
v_sep_f_1030_sep_78_sep_1: X
v_sep_f_1030_sep_78_sep_2_sep_101_sep_0: X
v_sep_f_1030_sep_84_sep_1: X
v_sep_f_1030_sep_84_sep_2_sep_97_sep_0: X
v_sep_f_1030_sep_90_sep_1: X
v_sep_f_1030_sep_90_sep_2_sep_93_sep_0: X
v_sep_fail_1153_sep_110_sep_0: X
.............(0=0) & (v_sep_fail_1153_sep_110_sep_0($464)) -> 1=0.
(($464-1=0) & ($465=0) & ($466-50=0) & ($467-100=0)) & (v_sep_f_1030_sep_72_sep_2_sep_105_sep_0($465,$466,$467)) -> v_sep_fail_1153_sep_110_sep_0($464).
(($468-50<0) & (-$468+$469-1=0)) & (v_sep_f_1030_sep_78_sep_2_sep_101_sep_0($469,$470,$471)) & (v_sep_f_1030_sep_72_sep_1($468,$470)) -> v_sep_f_1030_sep_72_sep_2_sep_105_sep_0($468,$470,$471).
(($472-50<0) & (-$472+$473-1=0)) & (v_sep_f_1030_sep_84_sep_2_sep_97_sep_0($473,$474,$475)) & (v_sep_f_1030_sep_78_sep_1($472,$474)) -> v_sep_f_1030_sep_78_sep_2_sep_101_sep_0($472,$474,$475).
(($476-50<0) & (-$476+$477-1=0)) & (v_sep_f_1030_sep_90_sep_2_sep_93_sep_0($477,$478,$479)) & (v_sep_f_1030_sep_84_sep_1($476,$478)) -> v_sep_f_1030_sep_84_sep_2_sep_97_sep_0($476,$478,$479).
(($480-100>=0) & ($481-$482=0)) & (v_sep_f_1030_sep_90_sep_1($480,$482)) -> v_sep_f_1030_sep_90_sep_2_sep_93_sep_0($480,$482,$481).
(($480-51<0) & (-$480+$483+1=0)) & (v_sep_f_1030_sep_84_sep_1($483,$482)) -> v_sep_f_1030_sep_90_sep_1($480,$482).
(($476-51<0) & (-$476+$484+1=0)) & (v_sep_f_1030_sep_78_sep_1($484,$478)) -> v_sep_f_1030_sep_84_sep_1($476,$478).
(($472-51<0) & (-$472+$485+1=0)) & (v_sep_f_1030_sep_72_sep_1($485,$474)) -> v_sep_f_1030_sep_78_sep_1($472,$474).
($468=0) & ($470-50=0) -> v_sep_f_1030_sep_72_sep_1($468,$470).

           ((<f_1030@72:1> = 50) && (<f_1030@72:0> = 0)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
        solution:
          P[<f_1030@72:1>]($503:int,$505:int) = ($505 <= 50)
          P[<<f_1030@72:2>@105:0>]($489:int,$491:int,$493:int) = ($493 <= 50)
          P[<f_1030@78:1>]($515:int,$517:int) = ($517 <= 50)
          P[<<f_1030@78:2>@101:0>]($496:int,$498:int,$500:int) = ((4 * $500) <= (150 + $498))
          P[<f_1030@84:1>]($527:int,$529:int) = ($529 <= 50)
          P[<<f_1030@84:2>@97:0>]($508:int,$510:int,$512:int) = ((2 * $512) <= (50 + $510))
          P[<f_1030@90:1>]($532:int,$534:int) = ($534 <= 50)
          P[<<f_1030@90:2>@93:0>]($520:int,$522:int,$524:int) = ((4 * $524) <= (50 + (3 * $522)))
          P[<fail_1153@110:0>]($486:bool) = false
        
      end HcSolver.solve_ub(115744)[4] (0.053992 sec.)
      begin HcSolver.check_validity(116256)[4]
        input:
          P[<fail_1153@110:0>](<fail_1153@110:0>:bool)|- bot
          
          P[<<f_1030@72:2>@105:0>](0:int,50:int,100:int), <fail_1153@110:0>
          |- P[<fail_1153@110:0>](<fail_1153@110:0>:bool)
          
          P[<f_1030@72:1>](<f_1030@72:0>:int,<f_1030@72:1>:int),
          P[<<f_1030@78:2>@101:0>]((1 + <f_1030@72:0>):int,<f_1030@72:1>:int,<<f_1030@72:2>@105:0>:int),
          (<f_1030@72:0> < 50)
          |- P[<<f_1030@72:2>@105:0>](<f_1030@72:0>:int,<f_1030@72:1>:int,
                                      <<f_1030@72:2>@105:0>:int)
          
          P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int),
          P[<<f_1030@84:2>@97:0>]((1 + <f_1030@78:0>):int,<f_1030@78:1>:int,<<f_1030@78:2>@101:0>:int),
          (<f_1030@78:0> < 50)
          |- P[<<f_1030@78:2>@101:0>](<f_1030@78:0>:int,<f_1030@78:1>:int,
                                      <<f_1030@78:2>@101:0>:int)
          
          P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int),
          P[<<f_1030@90:2>@93:0>]((1 + <f_1030@84:0>):int,<f_1030@84:1>:int,<<f_1030@84:2>@97:0>:int),
          (<f_1030@84:0> < 50) |- P[<<f_1030@84:2>@97:0>](<f_1030@84:0>:int,
                                                          <f_1030@84:1>:int,
                                                          <<f_1030@84:2>@97:0>:int)
          
          P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int),
          ((<f_1030@90:0> >= 100) && (<<f_1030@90:2>@93:0> = <f_1030@90:1>))
          |- P[<<f_1030@90:2>@93:0>](<f_1030@90:0>:int,<f_1030@90:1>:int,
                                     <<f_1030@90:2>@93:0>:int)
          
          P[<f_1030@84:1>]((-1 + <f_1030@90:0>):int,<f_1030@90:1>:int), (
          <f_1030@90:0> < 51) |- P[<f_1030@90:1>](<f_1030@90:0>:int,<f_1030@90:1>:int)
          
          P[<f_1030@78:1>]((-1 + <f_1030@84:0>):int,<f_1030@84:1>:int), (
          <f_1030@84:0> < 51) |- P[<f_1030@84:1>](<f_1030@84:0>:int,<f_1030@84:1>:int)
          
          P[<f_1030@72:1>]((-1 + <f_1030@78:0>):int,<f_1030@78:1>:int), (
          <f_1030@78:0> < 51) |- P[<f_1030@78:1>](<f_1030@78:0>:int,<f_1030@78:1>:int)
          
           ((<f_1030@72:0> = 0) && (<f_1030@72:1> = 50)) |- P[<f_1030@72:1>](<f_1030@72:0>:int,
                                                                    <f_1030@72:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(116256)[4] (0.009999 sec.)
      solution:
        P[<f_1030@72:1>]($503:int,$505:int) = ($505 <= 50)
        P[<<f_1030@72:2>@105:0>]($489:int,$491:int,$493:int) = ($493 <= 50)
        P[<f_1030@78:1>]($515:int,$517:int) = ($517 <= 50)
        P[<<f_1030@78:2>@101:0>]($496:int,$498:int,$500:int) = ((4 * $500) <= (150 + $498))
        P[<f_1030@84:1>]($527:int,$529:int) = ($529 <= 50)
        P[<<f_1030@84:2>@97:0>]($508:int,$510:int,$512:int) = ((2 * $512) <= (50 + $510))
        P[<f_1030@90:1>]($532:int,$534:int) = ($534 <= 50)
        P[<<f_1030@90:2>@93:0>]($520:int,$522:int,$524:int) = ((4 * $524) <= (50 + (3 * $522)))
        P[<fail_1153@110:0>]($486:bool) = false
    end YhornInterface.solve(115743)[3] (0.063991 sec.)
    
  end RefTypeInfer.infer_etrs(61591)[2] (0.414937 sec.)
  refinement types:
    main_1149: X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 0)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 1)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 2)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 3)} -> (v3:{v3:int | false} -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    k_main_1146: var426:unit -> X
  abstraction types:
    main_1149: X
    f_1030: var437:int ->
            var438:int[var438 -> (var437 <= 0),
                       var438 -> (var437 <= 1),
                       var438 -> (var437 <= 2),
                       var438 -> (var437 <= 3)] -> (var439:int -> X) -> X
    br_f_1151: var448:bool -> var449:int -> var450:int -> (var451:int -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:bool -> (v2:unit -> X) -> X
    k_main_1146: var426:unit -> X
  
end AbsTypeInfer.refine(61590)[1] (0.416936 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int -> int[x_1 <= 3; x_1 <= 2; x_1 <= 1; x_1 <= 0] -> (int -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Error trace::
  main_1149 ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [2/2] ... --> 
  f_1150 [2/2] ... --> 
  fail_1153 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 0

(4-3) Checking counter-example ... DONE!

(4-4) Discovering predicates ... 
begin AbsTypeInfer.refine(119389)[1]
  program:
    main_1149  | true = (f_1030 0
                                50
                                f_1150)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | b_1152 = (f_1030 (x_1031 + 1)
                                                               y_1032
                                                               k_f_1085)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | (not b_1152) = (f_1030 (
                                                                    x_1031 + 1)
                                                                    (y_1032 + 1)
                                                                    k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (x_1031 < 100) = (br_f_1151 (x_1031 < 50)
                                                                x_1031
                                                                y_1032
                                                                k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (not (x_1031 < 100)) = (k_f_1085 y_1032)
    f_1150 x_1124 | (not (x_1124 = 100)) = (k_main_1146 ())
    f_1150 x_1124 | (not (not (x_1124 = 100))) = (fail_1153 true
                                                            k_main_1146)
    fail_1153 b k | true = (fail ())
    k_main_1146 x_1118 | true = end
    main_1149:X
    br_f_1151:bool -> int -> int -> (int -> X) -> X
    f_1030:int -> int -> (int -> X) -> X
    f_1150:int -> X
    fail_1153:bool -> (unit -> X) -> X
    k_main_1146:unit -> X
  inlined functions: br_f_1151,f_1150,k_main_1146
  counterexample: 0:0:0:0:0:0:0:0:0:1:1:0
  error traces:
    [true.((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
     [(<f_1030@115:0> < 100).
      ((<br_f_1151@118:0> = (<f_1030@115:0> < 50)) &&
       ((<br_f_1151@118:1> = <f_1030@115:0>) && (<br_f_1151@118:2> = <f_1030@115:1>)))
      [<br_f_1151@118:0>.((<f_1030@121:0> = (<br_f_1151@118:1> + 1)) && (<f_1030@121:1> = <br_f_1151@118:2>))
       [(<f_1030@121:0> < 100).
        ((<br_f_1151@124:0> = (<f_1030@121:0> < 50)) &&
         ((<br_f_1151@124:1> = <f_1030@121:0>) && (<br_f_1151@124:2> = <f_1030@121:1>)))
        [<br_f_1151@124:0>.((<f_1030@127:0> = (<br_f_1151@124:1> + 1)) && (<f_1030@127:1> = <br_f_1151@124:2>))
         [(<f_1030@127:0> < 100).
          ((<br_f_1151@130:0> = (<f_1030@127:0> < 50)) &&
           ((<br_f_1151@130:1> = <f_1030@127:0>) && (<br_f_1151@130:2> = <f_1030@127:1>)))
          [<br_f_1151@130:0>.((<f_1030@133:0> = (<br_f_1151@130:1> + 1)) && (<f_1030@133:1> = <br_f_1151@130:2>))
           [(<f_1030@133:0> < 100).
            ((<br_f_1151@136:0> = (<f_1030@133:0> < 50)) &&
             ((<br_f_1151@136:1> = <f_1030@133:0>) && (<br_f_1151@136:2> = <f_1030@133:1>)))
            [<br_f_1151@136:0>.((<f_1030@139:0> = (<br_f_1151@136:1> + 1)) && (<f_1030@139:1> = <br_f_1151@136:2>))
             [(not (<f_1030@139:0> < 100)).(<<f_1030@139:2>@142:0> = <f_1030@139:1>)
              [true.(<<br_f_1151@136:3>@144:0> = <<f_1030@139:2>@142:0>)
               [true.(<<f_1030@133:2>@146:0> = <<br_f_1151@136:3>@144:0>)
                [true.(<<br_f_1151@130:3>@148:0> = <<f_1030@133:2>@146:0>)
                 [true.(<<f_1030@127:2>@150:0> = <<br_f_1151@130:3>@148:0>)
                  [true.(<<br_f_1151@124:3>@152:0> = <<f_1030@127:2>@150:0>)
                   [true.(<<f_1030@121:2>@154:0> = <<br_f_1151@124:3>@152:0>)
                    [true.(<<br_f_1151@118:3>@156:0> = <<f_1030@121:2>@154:0>)
                     [true.(<<f_1030@115:2>@158:0> = <<br_f_1151@118:3>@156:0>)
                      [true.(<f_1150@160:0> = <<f_1030@115:2>@158:0>)
                       [(not (not (<f_1150@160:0> = 100))).(<fail_1153@163:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(119390)[2]
    horn clauses:
      P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
      
      P[<f_1150@160:0>](100:int), <fail_1153@163:0> |- P[<fail_1153@163:0>](<fail_1153@163:0>:bool)
      
      P[<<f_1030@115:2>@158:0>](0:int,50:int,<f_1150@160:0>:int)|- P[<f_1150@160:0>](<f_1150@160:0>:int)
      
      P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int),
      P[<<br_f_1151@118:3>@156:0>]((<f_1030@115:0> < 50):bool,<f_1030@115:0>:int,<f_1030@115:1>:int,<<f_1030@115:2>@158:0>:int),
      (<f_1030@115:0> < 100)
      |- P[<<f_1030@115:2>@158:0>](<f_1030@115:0>:int,<f_1030@115:1>:int,
                                   <<f_1030@115:2>@158:0>:int)
      
      P[<br_f_1151@118:2>](<br_f_1151@118:0>:bool,<br_f_1151@118:1>:int,<br_f_1151@118:2>:int),
      P[<<f_1030@121:2>@154:0>]((1 + <br_f_1151@118:1>):int,<br_f_1151@118:2>:int,<<br_f_1151@118:3>@156:0>:int),
      <br_f_1151@118:0>
      |- P[<<br_f_1151@118:3>@156:0>](<br_f_1151@118:0>:bool,<br_f_1151@118:1>:int,
                                      <br_f_1151@118:2>:int,<<br_f_1151@118:3>@156:0>:int)
      
      P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int),
      P[<<br_f_1151@124:3>@152:0>]((<f_1030@121:0> < 50):bool,<f_1030@121:0>:int,<f_1030@121:1>:int,<<f_1030@121:2>@154:0>:int),
      (<f_1030@121:0> < 100)
      |- P[<<f_1030@121:2>@154:0>](<f_1030@121:0>:int,<f_1030@121:1>:int,
                                   <<f_1030@121:2>@154:0>:int)
      
      P[<br_f_1151@124:2>](<br_f_1151@124:0>:bool,<br_f_1151@124:1>:int,<br_f_1151@124:2>:int),
      P[<<f_1030@127:2>@150:0>]((1 + <br_f_1151@124:1>):int,<br_f_1151@124:2>:int,<<br_f_1151@124:3>@152:0>:int),
      <br_f_1151@124:0>
      |- P[<<br_f_1151@124:3>@152:0>](<br_f_1151@124:0>:bool,<br_f_1151@124:1>:int,
                                      <br_f_1151@124:2>:int,<<br_f_1151@124:3>@152:0>:int)
      
      P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int),
      P[<<br_f_1151@130:3>@148:0>]((<f_1030@127:0> < 50):bool,<f_1030@127:0>:int,<f_1030@127:1>:int,<<f_1030@127:2>@150:0>:int),
      (<f_1030@127:0> < 100)
      |- P[<<f_1030@127:2>@150:0>](<f_1030@127:0>:int,<f_1030@127:1>:int,
                                   <<f_1030@127:2>@150:0>:int)
      
      P[<br_f_1151@130:2>](<br_f_1151@130:0>:bool,<br_f_1151@130:1>:int,<br_f_1151@130:2>:int),
      P[<<f_1030@133:2>@146:0>]((1 + <br_f_1151@130:1>):int,<br_f_1151@130:2>:int,<<br_f_1151@130:3>@148:0>:int),
      <br_f_1151@130:0>
      |- P[<<br_f_1151@130:3>@148:0>](<br_f_1151@130:0>:bool,<br_f_1151@130:1>:int,
                                      <br_f_1151@130:2>:int,<<br_f_1151@130:3>@148:0>:int)
      
      P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int),
      P[<<br_f_1151@136:3>@144:0>]((<f_1030@133:0> < 50):bool,<f_1030@133:0>:int,<f_1030@133:1>:int,<<f_1030@133:2>@146:0>:int),
      (<f_1030@133:0> < 100)
      |- P[<<f_1030@133:2>@146:0>](<f_1030@133:0>:int,<f_1030@133:1>:int,
                                   <<f_1030@133:2>@146:0>:int)
      
      P[<br_f_1151@136:2>](<br_f_1151@136:0>:bool,<br_f_1151@136:1>:int,<br_f_1151@136:2>:int),
      P[<<f_1030@139:2>@142:0>]((1 + <br_f_1151@136:1>):int,<br_f_1151@136:2>:int,<<br_f_1151@136:3>@144:0>:int),
      <br_f_1151@136:0>
      |- P[<<br_f_1151@136:3>@144:0>](<br_f_1151@136:0>:bool,<br_f_1151@136:1>:int,
                                      <br_f_1151@136:2>:int,<<br_f_1151@136:3>@144:0>:int)
      
      P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int),
      ((<f_1030@139:0> >= 100) && (<<f_1030@139:2>@142:0> = <f_1030@139:1>))
      |- P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,
                                   <<f_1030@139:2>@142:0>:int)
      
      P[<br_f_1151@136:2>](true:bool,(-1 + <f_1030@139:0>):int,<f_1030@139:1>:int)|- P[<f_1030@139:1>](
      <f_1030@139:0>:int,<f_1030@139:1>:int)
      
      P[<f_1030@133:1>](<br_f_1151@136:1>:int,<br_f_1151@136:2>:int),
      ((<br_f_1151@136:1> < 100) && (<br_f_1151@136:0> = (<br_f_1151@136:1> < 50)))
      |- P[<br_f_1151@136:2>](<br_f_1151@136:0>:bool,<br_f_1151@136:1>:int,
                              <br_f_1151@136:2>:int)
      
      P[<br_f_1151@130:2>](true:bool,(-1 + <f_1030@133:0>):int,<f_1030@133:1>:int)|- P[<f_1030@133:1>](
      <f_1030@133:0>:int,<f_1030@133:1>:int)
      
      P[<f_1030@127:1>](<br_f_1151@130:1>:int,<br_f_1151@130:2>:int),
      ((<br_f_1151@130:1> < 100) && (<br_f_1151@130:0> = (<br_f_1151@130:1> < 50)))
      |- P[<br_f_1151@130:2>](<br_f_1151@130:0>:bool,<br_f_1151@130:1>:int,
                              <br_f_1151@130:2>:int)
      
      P[<br_f_1151@124:2>](true:bool,(-1 + <f_1030@127:0>):int,<f_1030@127:1>:int)|- P[<f_1030@127:1>](
      <f_1030@127:0>:int,<f_1030@127:1>:int)
      
      P[<f_1030@121:1>](<br_f_1151@124:1>:int,<br_f_1151@124:2>:int),
      ((<br_f_1151@124:1> < 100) && (<br_f_1151@124:0> = (<br_f_1151@124:1> < 50)))
      |- P[<br_f_1151@124:2>](<br_f_1151@124:0>:bool,<br_f_1151@124:1>:int,
                              <br_f_1151@124:2>:int)
      
      P[<br_f_1151@118:2>](true:bool,(-1 + <f_1030@121:0>):int,<f_1030@121:1>:int)|- P[<f_1030@121:1>](
      <f_1030@121:0>:int,<f_1030@121:1>:int)
      
      P[<f_1030@115:1>](<br_f_1151@118:1>:int,<br_f_1151@118:2>:int),
      ((<br_f_1151@118:1> < 100) && (<br_f_1151@118:0> = (<br_f_1151@118:1> < 50)))
      |- P[<br_f_1151@118:2>](<br_f_1151@118:0>:bool,<br_f_1151@118:1>:int,
                              <br_f_1151@118:2>:int)
      
       ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
    call trees:
      <main_1149@113>
        <f_1030@115>
          <br_f_1151@118>
            <f_1030@121>
              <br_f_1151@124>
                <f_1030@127>
                  <br_f_1151@130>
                    <f_1030@133>
                      <br_f_1151@136>
                        <f_1030@139>
                        </<f_1030@139:2>@142>
                      </<br_f_1151@136:3>@144>
                    </<f_1030@133:2>@146>
                  </<br_f_1151@130:3>@148>
                </<f_1030@127:2>@150>
              </<br_f_1151@124:3>@152>
            </<f_1030@121:2>@154>
          </<br_f_1151@118:3>@156>
        </<f_1030@115:2>@158>
        <f_1150@160>
          <fail_1153@163>
    inlined horn clauses:
      P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
      
      P[<<f_1030@115:2>@158:0>](0:int,50:int,100:int), <fail_1153@163:0>
      |- P[<fail_1153@163:0>](<fail_1153@163:0>:bool)
      
      P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int),
      P[<<f_1030@121:2>@154:0>]((1 + <f_1030@115:0>):int,<f_1030@115:1>:int,<<f_1030@115:2>@158:0>:int),
      (<f_1030@115:0> < 50)
      |- P[<<f_1030@115:2>@158:0>](<f_1030@115:0>:int,<f_1030@115:1>:int,
                                   <<f_1030@115:2>@158:0>:int)
      
      P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int),
      P[<<f_1030@127:2>@150:0>]((1 + <f_1030@121:0>):int,<f_1030@121:1>:int,<<f_1030@121:2>@154:0>:int),
      (<f_1030@121:0> < 50)
      |- P[<<f_1030@121:2>@154:0>](<f_1030@121:0>:int,<f_1030@121:1>:int,
                                   <<f_1030@121:2>@154:0>:int)
      
      P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int),
      P[<<f_1030@133:2>@146:0>]((1 + <f_1030@127:0>):int,<f_1030@127:1>:int,<<f_1030@127:2>@150:0>:int),
      (<f_1030@127:0> < 50)
      |- P[<<f_1030@127:2>@150:0>](<f_1030@127:0>:int,<f_1030@127:1>:int,
                                   <<f_1030@127:2>@150:0>:int)
      
      P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int),
      P[<<f_1030@139:2>@142:0>]((1 + <f_1030@133:0>):int,<f_1030@133:1>:int,<<f_1030@133:2>@146:0>:int),
      (<f_1030@133:0> < 50)
      |- P[<<f_1030@133:2>@146:0>](<f_1030@133:0>:int,<f_1030@133:1>:int,
                                   <<f_1030@133:2>@146:0>:int)
      
      P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int),
      ((<f_1030@139:0> >= 100) && (<<f_1030@139:2>@142:0> = <f_1030@139:1>))
      |- P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,
                                   <<f_1030@139:2>@142:0>:int)
      
      P[<f_1030@133:1>]((-1 + <f_1030@139:0>):int,<f_1030@139:1>:int), (
      <f_1030@139:0> < 51) |- P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int)
      
      P[<f_1030@127:1>]((-1 + <f_1030@133:0>):int,<f_1030@133:1>:int), (
      <f_1030@133:0> < 51) |- P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int)
      
      P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int), (
      <f_1030@127:0> < 51) |- P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int)
      
      P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
      <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int)
      
       ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
    begin ParamSubstInfer.infer(123538)[3]
      
    end ParamSubstInfer.infer(123538)[3] (0.216967 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(123540)[3]
      
    end RefTypeInfer.elim_coeffs(123540)[3] (0.002000 sec.)
    begin GenHcSolver.solve(123947)[3]
      Horn clauses:
        P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
        
        P[<<f_1030@115:2>@158:0>](0:int,50:int,100:int), <fail_1153@163:0>
        |- P[<fail_1153@163:0>](<fail_1153@163:0>:bool)
        
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int),
        P[<<f_1030@121:2>@154:0>]((1 + <f_1030@115:0>):int,<f_1030@115:1>:int,<<f_1030@115:2>@158:0>:int),
        (<f_1030@115:0> < 50)
        |- P[<<f_1030@115:2>@158:0>](<f_1030@115:0>:int,<f_1030@115:1>:int,
                                     <<f_1030@115:2>@158:0>:int)
        
        P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int),
        P[<<f_1030@127:2>@150:0>]((1 + <f_1030@121:0>):int,<f_1030@121:1>:int,<<f_1030@121:2>@154:0>:int),
        (<f_1030@121:0> < 50)
        |- P[<<f_1030@121:2>@154:0>](<f_1030@121:0>:int,<f_1030@121:1>:int,
                                     <<f_1030@121:2>@154:0>:int)
        
        P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int),
        P[<<f_1030@133:2>@146:0>]((1 + <f_1030@127:0>):int,<f_1030@127:1>:int,<<f_1030@127:2>@150:0>:int),
        (<f_1030@127:0> < 50)
        |- P[<<f_1030@127:2>@150:0>](<f_1030@127:0>:int,<f_1030@127:1>:int,
                                     <<f_1030@127:2>@150:0>:int)
        
        P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int),
        P[<<f_1030@139:2>@142:0>]((1 + <f_1030@133:0>):int,<f_1030@133:1>:int,<<f_1030@133:2>@146:0>:int),
        (<f_1030@133:0> < 50)
        |- P[<<f_1030@133:2>@146:0>](<f_1030@133:0>:int,<f_1030@133:1>:int,
                                     <<f_1030@133:2>@146:0>:int)
        
        P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int),
        ((<f_1030@139:0> >= 100) && (<<f_1030@139:2>@142:0> = <f_1030@139:1>))
        |- P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,
                                     <<f_1030@139:2>@142:0>:int)
        
        P[<f_1030@133:1>]((-1 + <f_1030@139:0>):int,<f_1030@139:1>:int), (
        <f_1030@139:0> < 51) |- P[<f_1030@139:1>](<f_1030@139:0>:int,
                                                  <f_1030@139:1>:int)
        
        P[<f_1030@127:1>]((-1 + <f_1030@133:0>):int,<f_1030@133:1>:int), (
        <f_1030@133:0> < 51) |- P[<f_1030@133:1>](<f_1030@133:0>:int,
                                                  <f_1030@133:1>:int)
        
        P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int), (
        <f_1030@127:0> < 51) |- P[<f_1030@127:1>](<f_1030@127:0>:int,
                                                  <f_1030@127:1>:int)
        
        P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
        <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,
                                                  <f_1030@121:1>:int)
        
         ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
      lower bounds:
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int) = ((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
        P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int) = ((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
        P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int) = ((<f_1030@133:0> = 3) && (<f_1030@133:1> = 50))
        P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int) = ((<f_1030@139:0> = 4) && (<f_1030@139:1> = 50))
        P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
        P[<<f_1030@133:2>@146:0>](<f_1030@133:0>:int,<f_1030@133:1>:int,<<f_1030@133:2>@146:0>:int) = false
        P[<<f_1030@127:2>@150:0>](<f_1030@127:0>:int,<f_1030@127:1>:int,<<f_1030@127:2>@150:0>:int) = false
        P[<<f_1030@121:2>@154:0>](<f_1030@121:0>:int,<f_1030@121:1>:int,<<f_1030@121:2>@154:0>:int) = false
        P[<<f_1030@115:2>@158:0>](<f_1030@115:0>:int,<f_1030@115:1>:int,<<f_1030@115:2>@158:0>:int) = false
        P[<fail_1153@163:0>](<fail_1153@163:0>:bool) = false
      upper bounds:
        P[<<f_1030@115:2>@158:0>](var481:int,var482:int,var483:int) = true
        P[<<f_1030@121:2>@154:0>](var475:int,var476:int,var477:int) = true
        P[<<f_1030@127:2>@150:0>](var469:int,var470:int,var471:int) = true
        P[<<f_1030@133:2>@146:0>](var463:int,var464:int,var465:int) = true
        P[<<f_1030@139:2>@142:0>](var457:int,var458:int,var459:int) = true
      begin GenHcSolver.classify_pids(133268)[4]
        output:
          [<<f_1030@139:2>@142:0>;<<f_1030@133:2>@146:0>;<<f_1030@127:2>@150:0>;<<f_1030@121:2>@154:0>;<<f_1030@115:2>@158:0>]
      end GenHcSolver.classify_pids(133268)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(133315)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(133316)[5]
          begin InterpProver.interpolate_fresh(133317)[6]
            begin InterpProver.interpolate_log(133318)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(133319)[8]
                begin InterpProver.interpolate_simplify(133320)[9]
                  begin InterpProver.interpolate_quick(133333)[10]
                    
                  end InterpProver.interpolate_quick(133333)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(133337)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(133337)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(133320)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(133319)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(133318)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(133317)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(133316)[5] (0.001000 sec.)
        output:
          P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
          P[<<f_1030@133:2>@146:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
          P[<<f_1030@127:2>@150:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
          P[<<f_1030@121:2>@154:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
          P[<<f_1030@115:2>@158:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
      end ApronInterface.convex_hull_interpolate(133315)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
        
        P[<f_1030@139:1>](<f_1030@139:0>:int,<<f_1030@139:2>@142:0>:int), (<f_1030@139:0> >= 100) |- bot
        
        P[<f_1030@133:1>]((-1 + <f_1030@139:0>):int,<f_1030@139:1>:int), (
        <f_1030@139:0> < 51) |- P[<f_1030@139:1>](<f_1030@139:0>:int,
                                                  <f_1030@139:1>:int)
        
        P[<f_1030@127:1>]((-1 + <f_1030@133:0>):int,<f_1030@133:1>:int), (
        <f_1030@133:0> < 51) |- P[<f_1030@133:1>](<f_1030@133:0>:int,
                                                  <f_1030@133:1>:int)
        
        P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int), (
        <f_1030@127:0> < 51) |- P[<f_1030@127:1>](<f_1030@127:0>:int,
                                                  <f_1030@127:1>:int)
        
        P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
        <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,
                                                  <f_1030@121:1>:int)
        
         ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
      lower bounds:
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        P[<fail_1153@163:0>](var490:bool) = false
        P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int) = ((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
        P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int) = ((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
        P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int) = ((<f_1030@133:0> = 3) && (<f_1030@133:1> = 50))
        P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int) = ((<f_1030@139:0> = 4) && (<f_1030@139:1> = 50))
      upper bounds:
        P[<f_1030@139:1>](var509:int,var510:int) = (var509 < 100)
        P[<f_1030@133:1>](var505:int,var506:int) = true
        P[<f_1030@127:1>](var501:int,var502:int) = true
        P[<f_1030@121:1>](var497:int,var498:int) = true
        P[<f_1030@115:1>](var493:int,var494:int) = true
      begin GenHcSolver.classify_pids(143608)[4]
        output:
          [<f_1030@115:1>;<f_1030@121:1>;<f_1030@127:1>;<f_1030@133:1>;<f_1030@139:1>]
      end GenHcSolver.classify_pids(143608)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(143691)[4]
        lb:(((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) ||
            (((<f_1030@115:0> = 1) && (<f_1030@115:1> = 50)) ||
             (((<f_1030@115:0> = 2) && (<f_1030@115:1> = 50)) ||
              (((<f_1030@115:0> = 3) && (<f_1030@115:1> = 50)) || ((<f_1030@115:0> = 4) && (<f_1030@115:1> = 50))))))
        nub:(not (<f_1030@115:0> < 100))
        lb':(((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) ||
             (((<f_1030@115:0> = 1) && (<f_1030@115:1> = 50)) ||
              (((<f_1030@115:0> = 2) && (<f_1030@115:1> = 50)) ||
               (((<f_1030@115:0> = 3) && (<f_1030@115:1> = 50)) || ((<f_1030@115:0> = 4) && (<f_1030@115:1> = 50))))))
        nub':(not (<f_1030@115:0> < 100))
        begin InterpProver.interpolate(143692)[5]
          begin InterpProver.interpolate_fresh(143693)[6]
            begin InterpProver.interpolate_log(143694)[7]
              input1: (((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) ||
                       (((<f_1030@115:0> = 1) && (<f_1030@115:1> = 50)) ||
                        (((<f_1030@115:0> = 2) && (<f_1030@115:1> = 50)) ||
                         (((<f_1030@115:0> = 3) && (<f_1030@115:1> = 50)) ||
                          ((<f_1030@115:0> = 4) && (<f_1030@115:1> = 50))))))
              input2: (not (<f_1030@115:0> < 100))
              begin InterpProver.interpolate_check(143695)[8]
                begin InterpProver.interpolate_simplify(143696)[9]
                  begin InterpProver.interpolate_quick(143982)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(143991)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(143992)[12]
                        begin CsisatInterface.interpolate_csisat_log(143993)[13]
                          input1: (0 = v_sep_f_1030_sep_115_sep_0 | 1 = v_sep_f_1030_sep_115_sep_0 | 2 = v_sep_f_1030_sep_115_sep_0 | 3 = v_sep_f_1030_sep_115_sep_0 | 4 = v_sep_f_1030_sep_115_sep_0)
                          input2: 100 <= v_sep_f_1030_sep_115_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(143994)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(143994)[14] (0.001999 sec.)
                          output: (0.02*v_sep_f_1030_sep_115_sep_0 <= 0 | 0.020202020202*v_sep_f_1030_sep_115_sep_0 <= 0.020202020202 | 0.0204081632653*v_sep_f_1030_sep_115_sep_0 <= 0.0408163265306 | 0.020618556701*v_sep_f_1030_sep_115_sep_0 <= 0.0618556701031 | 0.0208333333333*v_sep_f_1030_sep_115_sep_0 <= 0.0833333333333)
                          
                        end CsisatInterface.interpolate_csisat_log(143993)[13] (0.001999 sec.)
                        after simplification: (v_sep_f_1030_sep_115_sep_0 <= 0 | v_sep_f_1030_sep_115_sep_0 <= 2 | v_sep_f_1030_sep_115_sep_0 <= 4 | 2*v_sep_f_1030_sep_115_sep_0 <= 2 | 2*v_sep_f_1030_sep_115_sep_0 <= 6)
                        after dnf conversion: ((v_sep_f_1030_sep_115_sep_0 <= 0) | (v_sep_f_1030_sep_115_sep_0 <= 2) | (v_sep_f_1030_sep_115_sep_0 <= 4) | (2*v_sep_f_1030_sep_115_sep_0 <= 2) | (2*v_sep_f_1030_sep_115_sep_0 <= 6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(143992)[12] (0.001999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(143991)[11] (0.001999 sec.)
                    
                  end InterpProver.interpolate_quick(143982)[10] (0.002999 sec.)
                  
                end InterpProver.interpolate_simplify(143696)[9] (0.003999 sec.)
                
              end InterpProver.interpolate_check(143695)[8] (0.003999 sec.)
              output: (<f_1030@115:0> <= 4)
            end InterpProver.interpolate_log(143694)[7] (0.003999 sec.)
            
          end InterpProver.interpolate_fresh(143693)[6] (0.003999 sec.)
          
        end InterpProver.interpolate(143692)[5] (0.003999 sec.)
        output:
          P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 4)
          P[<f_1030@121:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 4)
          P[<f_1030@127:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 4)
          P[<f_1030@133:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 4)
          P[<f_1030@139:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 4)
      end ApronInterface.convex_hull_interpolate(143691)[4] (0.003999 sec.)
      Horn clauses:
        P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
        
        P[<f_1030@133:1>]((-1 + <f_1030@139:0>):int,<f_1030@139:1>:int),
        ((<f_1030@139:0> < 51) && (<f_1030@139:0> > 4)) |- bot
        
        P[<f_1030@127:1>]((-1 + <f_1030@133:0>):int,<f_1030@133:1>:int), (
        <f_1030@133:0> < 51) |- P[<f_1030@133:1>](<f_1030@133:0>:int,
                                                  <f_1030@133:1>:int)
        
        P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int), (
        <f_1030@127:0> < 51) |- P[<f_1030@127:1>](<f_1030@127:0>:int,
                                                  <f_1030@127:1>:int)
        
        P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
        <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,
                                                  <f_1030@121:1>:int)
        
         ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
      lower bounds:
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        P[<fail_1153@163:0>](var517:bool) = false
        P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int) = ((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
        P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int) = ((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
        P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int) = ((<f_1030@133:0> = 3) && (<f_1030@133:1> = 50))
      upper bounds:
        P[<f_1030@133:1>](var532:int,var533:int) = ((var532 <= 3) || (var532 >= 50))
        P[<f_1030@127:1>](var528:int,var529:int) = ((var528 <= 2) || (var528 >= 49))
        P[<f_1030@121:1>](var524:int,var525:int) = ((var524 <= 1) || (var524 >= 48))
        P[<f_1030@115:1>](var520:int,var521:int) = ((var520 <= 0) || (var520 >= 47))
      begin GenHcSolver.classify_pids(152697)[4]
        output:
          [<f_1030@133:1>],[<f_1030@127:1>],[<f_1030@121:1>],[<f_1030@115:1>]
      end GenHcSolver.classify_pids(152697)[4] (0.002000 sec.)
      lb:((<f_1030@133:0> = 3) && (<f_1030@133:1> = 50))
      nub:(not ((<f_1030@133:0> <= 3) || (<f_1030@133:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(152988)[4]
        lb:((<f_1030@133:0> = 3) && (<f_1030@133:1> = 50))
        nub:(not ((<f_1030@133:0> <= 3) || (<f_1030@133:0> >= 50)))
        lb':((<f_1030@133:0> = 3) && (<f_1030@133:1> = 50))
        nub':(not ((<f_1030@133:0> <= 3) || (<f_1030@133:0> >= 50)))
        begin InterpProver.interpolate(152989)[5]
          begin InterpProver.interpolate_fresh(152990)[6]
            begin InterpProver.interpolate_log(152991)[7]
              input1: ((<f_1030@133:0> = 3) && (<f_1030@133:1> = 50))
              input2: (not ((<f_1030@133:0> <= 3) || (<f_1030@133:0> >= 50)))
              begin InterpProver.interpolate_check(152992)[8]
                begin InterpProver.interpolate_simplify(152993)[9]
                  begin InterpProver.interpolate_quick(153060)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(153069)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(153070)[12]
                        begin CsisatInterface.interpolate_csisat_log(153071)[13]
                          input1: 3 = v_sep_f_1030_sep_133_sep_0
                          input2: (4 <= v_sep_f_1030_sep_133_sep_0 & (1 + v_sep_f_1030_sep_133_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(153072)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(153072)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_133_sep_0 <= 6
                          
                        end CsisatInterface.interpolate_csisat_log(153071)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_133_sep_0 <= 6
                        after dnf conversion: ((2*v_sep_f_1030_sep_133_sep_0 <= 6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(153070)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(153069)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(153060)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(152993)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(152992)[8] (0.002000 sec.)
              output: (<f_1030@133:0> <= 3)
            end InterpProver.interpolate_log(152991)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(152990)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(152989)[5] (0.002000 sec.)
        output:
          P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int) = (<f_1030@133:0> <= 3)
      end ApronInterface.convex_hull_interpolate(152988)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
        
        P[<f_1030@127:1>]((-1 + <f_1030@133:0>):int,<f_1030@133:1>:int),
        ((<f_1030@133:0> < 51) && (<f_1030@133:0> > 3)) |- bot
        
        P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int), (
        <f_1030@127:0> < 51) |- P[<f_1030@127:1>](<f_1030@127:0>:int,
                                                  <f_1030@127:1>:int)
        
        P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
        <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,
                                                  <f_1030@121:1>:int)
        
         ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
      lower bounds:
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        P[<fail_1153@163:0>](var535:bool) = false
        P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int) = ((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
        P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int) = ((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
      upper bounds:
        P[<f_1030@127:1>](var546:int,var547:int) = ((var546 <= 2) || (var546 >= 50))
        P[<f_1030@121:1>](var542:int,var543:int) = ((var542 <= 1) || (var542 >= 49))
        P[<f_1030@115:1>](var538:int,var539:int) = ((var538 <= 0) || (var538 >= 48))
      begin GenHcSolver.classify_pids(157096)[4]
        output:
          [<f_1030@127:1>],[<f_1030@121:1>],[<f_1030@115:1>]
      end GenHcSolver.classify_pids(157096)[4] (0.001000 sec.)
      lb:((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
      nub:(not ((<f_1030@127:0> <= 2) || (<f_1030@127:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(157241)[4]
        lb:((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
        nub:(not ((<f_1030@127:0> <= 2) || (<f_1030@127:0> >= 50)))
        lb':((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
        nub':(not ((<f_1030@127:0> <= 2) || (<f_1030@127:0> >= 50)))
        begin InterpProver.interpolate(157242)[5]
          begin InterpProver.interpolate_fresh(157243)[6]
            begin InterpProver.interpolate_log(157244)[7]
              input1: ((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
              input2: (not ((<f_1030@127:0> <= 2) || (<f_1030@127:0> >= 50)))
              begin InterpProver.interpolate_check(157245)[8]
                begin InterpProver.interpolate_simplify(157246)[9]
                  begin InterpProver.interpolate_quick(157313)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(157322)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(157323)[12]
                        begin CsisatInterface.interpolate_csisat_log(157324)[13]
                          input1: 2 = v_sep_f_1030_sep_127_sep_0
                          input2: (3 <= v_sep_f_1030_sep_127_sep_0 & (1 + v_sep_f_1030_sep_127_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(157325)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(157325)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_127_sep_0 <= 4
                          
                        end CsisatInterface.interpolate_csisat_log(157324)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_127_sep_0 <= 4
                        after dnf conversion: ((2*v_sep_f_1030_sep_127_sep_0 <= 4))
                        
                      end CsisatInterface.interpolate_csisat_post_process(157323)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(157322)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(157313)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(157246)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(157245)[8] (0.001000 sec.)
              output: (<f_1030@127:0> <= 2)
            end InterpProver.interpolate_log(157244)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(157243)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(157242)[5] (0.001000 sec.)
        output:
          P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int) = (<f_1030@127:0> <= 2)
      end ApronInterface.convex_hull_interpolate(157241)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
        
        P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int),
        ((<f_1030@127:0> < 51) && (<f_1030@127:0> > 2)) |- bot
        
        P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
        <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,
                                                  <f_1030@121:1>:int)
        
         ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
      lower bounds:
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        P[<fail_1153@163:0>](var549:bool) = false
        P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int) = ((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
      upper bounds:
        P[<f_1030@121:1>](var556:int,var557:int) = ((var556 <= 1) || (var556 >= 50))
        P[<f_1030@115:1>](var552:int,var553:int) = ((var552 <= 0) || (var552 >= 49))
      begin GenHcSolver.classify_pids(159792)[4]
        output:
          [<f_1030@121:1>],[<f_1030@115:1>]
      end GenHcSolver.classify_pids(159792)[4] (0.000000 sec.)
      lb:((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
      nub:(not ((<f_1030@121:0> <= 1) || (<f_1030@121:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(159841)[4]
        lb:((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
        nub:(not ((<f_1030@121:0> <= 1) || (<f_1030@121:0> >= 50)))
        lb':((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
        nub':(not ((<f_1030@121:0> <= 1) || (<f_1030@121:0> >= 50)))
        begin InterpProver.interpolate(159842)[5]
          begin InterpProver.interpolate_fresh(159843)[6]
            begin InterpProver.interpolate_log(159844)[7]
              input1: ((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
              input2: (not ((<f_1030@121:0> <= 1) || (<f_1030@121:0> >= 50)))
              begin InterpProver.interpolate_check(159845)[8]
                begin InterpProver.interpolate_simplify(159846)[9]
                  begin InterpProver.interpolate_quick(159913)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(159922)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(159923)[12]
                        begin CsisatInterface.interpolate_csisat_log(159924)[13]
                          input1: 1 = v_sep_f_1030_sep_121_sep_0
                          input2: (2 <= v_sep_f_1030_sep_121_sep_0 & (1 + v_sep_f_1030_sep_121_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(159925)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(159925)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_121_sep_0 <= 2
                          
                        end CsisatInterface.interpolate_csisat_log(159924)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_121_sep_0 <= 2
                        after dnf conversion: ((2*v_sep_f_1030_sep_121_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(159923)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(159922)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(159913)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(159846)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(159845)[8] (0.002000 sec.)
              output: (<f_1030@121:0> <= 1)
            end InterpProver.interpolate_log(159844)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(159843)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(159842)[5] (0.002000 sec.)
        output:
          P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int) = (<f_1030@121:0> <= 1)
      end ApronInterface.convex_hull_interpolate(159841)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
        
        P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int),
        ((<f_1030@121:0> < 51) && (<f_1030@121:0> > 1)) |- bot
        
         ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
      lower bounds:
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        P[<fail_1153@163:0>](var559:bool) = false
      upper bounds:
        P[<fail_1153@163:0>](var562:bool) = true
      begin GenHcSolver.classify_pids(160790)[4]
        output:
          [<fail_1153@163:0>]
      end GenHcSolver.classify_pids(160790)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(160793)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(160794)[5]
          begin InterpProver.interpolate_fresh(160795)[6]
            begin InterpProver.interpolate_log(160796)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(160797)[8]
                begin InterpProver.interpolate_simplify(160798)[9]
                  begin InterpProver.interpolate_quick(160811)[10]
                    
                  end InterpProver.interpolate_quick(160811)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(160815)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(160815)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(160798)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(160797)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(160796)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(160795)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(160794)[5] (0.000000 sec.)
        output:
          P[<fail_1153@163:0>](var559:bool) = false
      end ApronInterface.convex_hull_interpolate(160793)[4] (0.001000 sec.)
      Horn clauses:
        P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int),
        ((<f_1030@121:0> < 51) && (<f_1030@121:0> > 1)) |- bot
        
         ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
      lower bounds:
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
      upper bounds:
        P[<f_1030@115:1>](var563:int,var564:int) = ((var563 <= 0) || (var563 >= 50))
      begin GenHcSolver.classify_pids(161822)[4]
        output:
          [<f_1030@115:1>]
      end GenHcSolver.classify_pids(161822)[4] (0.000000 sec.)
      lb:((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
      nub:(not ((<f_1030@115:0> <= 0) || (<f_1030@115:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(161825)[4]
        lb:((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        nub:(not ((<f_1030@115:0> <= 0) || (<f_1030@115:0> >= 50)))
        lb':((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        nub':(not ((<f_1030@115:0> <= 0) || (<f_1030@115:0> >= 50)))
        begin InterpProver.interpolate(161826)[5]
          begin InterpProver.interpolate_fresh(161827)[6]
            begin InterpProver.interpolate_log(161828)[7]
              input1: ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
              input2: (not ((<f_1030@115:0> <= 0) || (<f_1030@115:0> >= 50)))
              begin InterpProver.interpolate_check(161829)[8]
                begin InterpProver.interpolate_simplify(161830)[9]
                  begin InterpProver.interpolate_quick(161886)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(161895)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(161896)[12]
                        begin CsisatInterface.interpolate_csisat_log(161897)[13]
                          input1: 0 = v_sep_f_1030_sep_115_sep_0
                          input2: (1 <= v_sep_f_1030_sep_115_sep_0 & (1 + v_sep_f_1030_sep_115_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(161898)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(161898)[14] (0.001000 sec.)
                          output: 2*v_sep_f_1030_sep_115_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(161897)[13] (0.001000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_115_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_f_1030_sep_115_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(161896)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(161895)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(161886)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(161830)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(161829)[8] (0.001000 sec.)
              output: (<f_1030@115:0> <= 0)
            end InterpProver.interpolate_log(161828)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(161827)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(161826)[5] (0.001000 sec.)
        output:
          P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 0)
      end ApronInterface.convex_hull_interpolate(161825)[4] (0.001000 sec.)
      begin HcSolver.check_validity(162054)[4]
        input:
          P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
          
          P[<<f_1030@115:2>@158:0>](0:int,50:int,100:int), <fail_1153@163:0>
          |- P[<fail_1153@163:0>](<fail_1153@163:0>:bool)
          
          P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int),
          P[<<f_1030@121:2>@154:0>]((1 + <f_1030@115:0>):int,<f_1030@115:1>:int,<<f_1030@115:2>@158:0>:int),
          (<f_1030@115:0> < 50)
          |- P[<<f_1030@115:2>@158:0>](<f_1030@115:0>:int,<f_1030@115:1>:int,
                                       <<f_1030@115:2>@158:0>:int)
          
          P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int),
          P[<<f_1030@127:2>@150:0>]((1 + <f_1030@121:0>):int,<f_1030@121:1>:int,<<f_1030@121:2>@154:0>:int),
          (<f_1030@121:0> < 50)
          |- P[<<f_1030@121:2>@154:0>](<f_1030@121:0>:int,<f_1030@121:1>:int,
                                       <<f_1030@121:2>@154:0>:int)
          
          P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int),
          P[<<f_1030@133:2>@146:0>]((1 + <f_1030@127:0>):int,<f_1030@127:1>:int,<<f_1030@127:2>@150:0>:int),
          (<f_1030@127:0> < 50)
          |- P[<<f_1030@127:2>@150:0>](<f_1030@127:0>:int,<f_1030@127:1>:int,
                                       <<f_1030@127:2>@150:0>:int)
          
          P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int),
          P[<<f_1030@139:2>@142:0>]((1 + <f_1030@133:0>):int,<f_1030@133:1>:int,<<f_1030@133:2>@146:0>:int),
          (<f_1030@133:0> < 50)
          |- P[<<f_1030@133:2>@146:0>](<f_1030@133:0>:int,<f_1030@133:1>:int,
                                       <<f_1030@133:2>@146:0>:int)
          
          P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int),
          ((<f_1030@139:0> >= 100) && (<<f_1030@139:2>@142:0> = <f_1030@139:1>))
          |- P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,
                                       <<f_1030@139:2>@142:0>:int)
          
          P[<f_1030@133:1>]((-1 + <f_1030@139:0>):int,<f_1030@139:1>:int), (
          <f_1030@139:0> < 51) |- P[<f_1030@139:1>](<f_1030@139:0>:int,
                                                    <f_1030@139:1>:int)
          
          P[<f_1030@127:1>]((-1 + <f_1030@133:0>):int,<f_1030@133:1>:int), (
          <f_1030@133:0> < 51) |- P[<f_1030@133:1>](<f_1030@133:0>:int,
                                                    <f_1030@133:1>:int)
          
          P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int), (
          <f_1030@127:0> < 51) |- P[<f_1030@127:1>](<f_1030@127:0>:int,
                                                    <f_1030@127:1>:int)
          
          P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
          <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,
                                                    <f_1030@121:1>:int)
          
           ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(162054)[4] (0.002000 sec.)
      solution:
        P[<fail_1153@163:0>](var559:bool) = false
        P[<<f_1030@115:2>@158:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
        P[<<f_1030@121:2>@154:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
        P[<<f_1030@127:2>@150:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
        P[<<f_1030@133:2>@146:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
        P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
        P[<f_1030@139:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 4)
        P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int) = (<f_1030@133:0> <= 3)
        P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int) = (<f_1030@127:0> <= 2)
        P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int) = (<f_1030@121:0> <= 1)
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 0)
    end GenHcSolver.solve(123947)[3] (0.150977 sec.)
    begin GenHcSolver.solve(162760)[3]
      Horn clauses:
        P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
        
        P[<<f_1030@115:2>@158:0>](0:int,50:int,100:int), <fail_1153@163:0>
        |- P[<fail_1153@163:0>](<fail_1153@163:0>:bool)
        
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int),
        P[<<f_1030@121:2>@154:0>]((1 + <f_1030@115:0>):int,<f_1030@115:1>:int,<<f_1030@115:2>@158:0>:int),
        (<f_1030@115:0> < 50)
        |- P[<<f_1030@115:2>@158:0>](<f_1030@115:0>:int,<f_1030@115:1>:int,
                                     <<f_1030@115:2>@158:0>:int)
        
        P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int),
        P[<<f_1030@127:2>@150:0>]((1 + <f_1030@121:0>):int,<f_1030@121:1>:int,<<f_1030@121:2>@154:0>:int),
        (<f_1030@121:0> < 50)
        |- P[<<f_1030@121:2>@154:0>](<f_1030@121:0>:int,<f_1030@121:1>:int,
                                     <<f_1030@121:2>@154:0>:int)
        
        P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int),
        P[<<f_1030@133:2>@146:0>]((1 + <f_1030@127:0>):int,<f_1030@127:1>:int,<<f_1030@127:2>@150:0>:int),
        (<f_1030@127:0> < 50)
        |- P[<<f_1030@127:2>@150:0>](<f_1030@127:0>:int,<f_1030@127:1>:int,
                                     <<f_1030@127:2>@150:0>:int)
        
        P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int),
        P[<<f_1030@139:2>@142:0>]((1 + <f_1030@133:0>):int,<f_1030@133:1>:int,<<f_1030@133:2>@146:0>:int),
        (<f_1030@133:0> < 50)
        |- P[<<f_1030@133:2>@146:0>](<f_1030@133:0>:int,<f_1030@133:1>:int,
                                     <<f_1030@133:2>@146:0>:int)
        
        P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int),
        ((<f_1030@139:0> >= 100) && (<<f_1030@139:2>@142:0> = <f_1030@139:1>))
        |- P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,
                                     <<f_1030@139:2>@142:0>:int)
        
        P[<f_1030@133:1>]((-1 + <f_1030@139:0>):int,<f_1030@139:1>:int), (
        <f_1030@139:0> < 51) |- P[<f_1030@139:1>](<f_1030@139:0>:int,
                                                  <f_1030@139:1>:int)
        
        P[<f_1030@127:1>]((-1 + <f_1030@133:0>):int,<f_1030@133:1>:int), (
        <f_1030@133:0> < 51) |- P[<f_1030@133:1>](<f_1030@133:0>:int,
                                                  <f_1030@133:1>:int)
        
        P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int), (
        <f_1030@127:0> < 51) |- P[<f_1030@127:1>](<f_1030@127:0>:int,
                                                  <f_1030@127:1>:int)
        
        P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
        <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,
                                                  <f_1030@121:1>:int)
        
         ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
      lower bounds:
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int) = ((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
        P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int) = ((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
        P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int) = ((<f_1030@133:0> = 3) && (<f_1030@133:1> = 50))
        P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int) = ((<f_1030@139:0> = 4) && (<f_1030@139:1> = 50))
        P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
        P[<<f_1030@133:2>@146:0>](<f_1030@133:0>:int,<f_1030@133:1>:int,<<f_1030@133:2>@146:0>:int) = false
        P[<<f_1030@127:2>@150:0>](<f_1030@127:0>:int,<f_1030@127:1>:int,<<f_1030@127:2>@150:0>:int) = false
        P[<<f_1030@121:2>@154:0>](<f_1030@121:0>:int,<f_1030@121:1>:int,<<f_1030@121:2>@154:0>:int) = false
        P[<<f_1030@115:2>@158:0>](<f_1030@115:0>:int,<f_1030@115:1>:int,<<f_1030@115:2>@158:0>:int) = false
        P[<fail_1153@163:0>](<fail_1153@163:0>:bool) = false
      upper bounds:
        P[<<f_1030@115:2>@158:0>](var592:int,var593:int,var594:int) = true
        P[<<f_1030@121:2>@154:0>](var586:int,var587:int,var588:int) = true
        P[<<f_1030@127:2>@150:0>](var580:int,var581:int,var582:int) = true
        P[<<f_1030@133:2>@146:0>](var574:int,var575:int,var576:int) = true
        P[<<f_1030@139:2>@142:0>](var568:int,var569:int,var570:int) = true
      begin GenHcSolver.classify_pids(172081)[4]
        output:
          [<<f_1030@139:2>@142:0>;<<f_1030@133:2>@146:0>;<<f_1030@127:2>@150:0>;<<f_1030@121:2>@154:0>;<<f_1030@115:2>@158:0>]
      end GenHcSolver.classify_pids(172081)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(172128)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(172131)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(172131)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(172136)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(172136)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(172139)[5]
          begin InterpProver.interpolate_fresh(172140)[6]
            begin InterpProver.interpolate_log(172141)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(172142)[8]
                begin InterpProver.interpolate_simplify(172143)[9]
                  begin InterpProver.interpolate_quick(172158)[10]
                    
                  end InterpProver.interpolate_quick(172158)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(172162)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(172162)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(172143)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(172142)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(172141)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(172140)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(172139)[5] (0.000000 sec.)
        output:
          P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
          P[<<f_1030@133:2>@146:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
          P[<<f_1030@127:2>@150:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
          P[<<f_1030@121:2>@154:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
          P[<<f_1030@115:2>@158:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
      end ApronInterface.convex_hull_interpolate(172128)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
        
        P[<f_1030@139:1>](<f_1030@139:0>:int,<<f_1030@139:2>@142:0>:int), (<f_1030@139:0> >= 100) |- bot
        
        P[<f_1030@133:1>]((-1 + <f_1030@139:0>):int,<f_1030@139:1>:int), (
        <f_1030@139:0> < 51) |- P[<f_1030@139:1>](<f_1030@139:0>:int,
                                                  <f_1030@139:1>:int)
        
        P[<f_1030@127:1>]((-1 + <f_1030@133:0>):int,<f_1030@133:1>:int), (
        <f_1030@133:0> < 51) |- P[<f_1030@133:1>](<f_1030@133:0>:int,
                                                  <f_1030@133:1>:int)
        
        P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int), (
        <f_1030@127:0> < 51) |- P[<f_1030@127:1>](<f_1030@127:0>:int,
                                                  <f_1030@127:1>:int)
        
        P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
        <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,
                                                  <f_1030@121:1>:int)
        
         ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
      lower bounds:
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        P[<fail_1153@163:0>](var601:bool) = false
        P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int) = ((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
        P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int) = ((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
        P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int) = ((<f_1030@133:0> = 3) && (<f_1030@133:1> = 50))
        P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int) = ((<f_1030@139:0> = 4) && (<f_1030@139:1> = 50))
      upper bounds:
        P[<f_1030@139:1>](var620:int,var621:int) = (var620 < 100)
        P[<f_1030@133:1>](var616:int,var617:int) = true
        P[<f_1030@127:1>](var612:int,var613:int) = true
        P[<f_1030@121:1>](var608:int,var609:int) = true
        P[<f_1030@115:1>](var604:int,var605:int) = true
      begin GenHcSolver.classify_pids(182440)[4]
        output:
          [<f_1030@115:1>;<f_1030@121:1>;<f_1030@127:1>;<f_1030@133:1>;<f_1030@139:1>]
      end GenHcSolver.classify_pids(182440)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(182523)[4]
        lb:(((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) ||
            (((<f_1030@115:0> = 1) && (<f_1030@115:1> = 50)) ||
             (((<f_1030@115:0> = 2) && (<f_1030@115:1> = 50)) ||
              (((<f_1030@115:0> = 3) && (<f_1030@115:1> = 50)) || ((<f_1030@115:0> = 4) && (<f_1030@115:1> = 50))))))
        nub:(not (<f_1030@115:0> < 100))
        begin ExtFormula.Formula.case_analysis_boolean(182671)[5]
          ts: ((<f_1030@115:1> = 50) &&
               ((<f_1030@115:0> = 0) ||
                ((<f_1030@115:0> = 3) || ((<f_1030@115:0> = 2) || ((<f_1030@115:0> = 1) || (<f_1030@115:0> = 4))))))
          
        end ExtFormula.Formula.case_analysis_boolean(182671)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(182697)[5]
          ts: (<f_1030@115:0> >= 100)
          
        end ExtFormula.Formula.case_analysis_boolean(182697)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@115:1>) = 0) && (((4 + (-1 * <f_1030@115:0>)) >= 0) && (<f_1030@115:0> >= 0)))
        nub':((-100 + <f_1030@115:0>) >= 0)
        begin InterpProver.interpolate(182702)[5]
          begin InterpProver.interpolate_fresh(182703)[6]
            begin InterpProver.interpolate_log(182704)[7]
              input1: (((-50 + <f_1030@115:1>) = 0) && (((4 + (-1 * <f_1030@115:0>)) >= 0) && (<f_1030@115:0> >= 0)))
              input2: ((-100 + <f_1030@115:0>) >= 0)
              begin InterpProver.interpolate_check(182705)[8]
                begin InterpProver.interpolate_simplify(182706)[9]
                  begin InterpProver.interpolate_quick(182803)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(182812)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(182813)[12]
                        begin CsisatInterface.interpolate_csisat_log(182814)[13]
                          input1: (0 <= v_sep_f_1030_sep_115_sep_0 & v_sep_f_1030_sep_115_sep_0 <= 4)
                          input2: 100 <= v_sep_f_1030_sep_115_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(182815)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(182815)[14] (0.000000 sec.)
                          output: 0.0208333333333*v_sep_f_1030_sep_115_sep_0 <= 0.0833333333333
                          
                        end CsisatInterface.interpolate_csisat_log(182814)[13] (0.000000 sec.)
                        after simplification: v_sep_f_1030_sep_115_sep_0 <= 4
                        after dnf conversion: ((v_sep_f_1030_sep_115_sep_0 <= 4))
                        
                      end CsisatInterface.interpolate_csisat_post_process(182813)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(182812)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(182803)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(182706)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(182705)[8] (0.002000 sec.)
              output: (<f_1030@115:0> <= 4)
            end InterpProver.interpolate_log(182704)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(182703)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(182702)[5] (0.002000 sec.)
        output:
          P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 4)
          P[<f_1030@121:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 4)
          P[<f_1030@127:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 4)
          P[<f_1030@133:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 4)
          P[<f_1030@139:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 4)
      end ApronInterface.convex_hull_interpolate(182523)[4] (0.004000 sec.)
      Horn clauses:
        P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
        
        P[<f_1030@133:1>]((-1 + <f_1030@139:0>):int,<f_1030@139:1>:int),
        ((<f_1030@139:0> < 51) && (<f_1030@139:0> > 4)) |- bot
        
        P[<f_1030@127:1>]((-1 + <f_1030@133:0>):int,<f_1030@133:1>:int), (
        <f_1030@133:0> < 51) |- P[<f_1030@133:1>](<f_1030@133:0>:int,
                                                  <f_1030@133:1>:int)
        
        P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int), (
        <f_1030@127:0> < 51) |- P[<f_1030@127:1>](<f_1030@127:0>:int,
                                                  <f_1030@127:1>:int)
        
        P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
        <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,
                                                  <f_1030@121:1>:int)
        
         ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
      lower bounds:
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        P[<fail_1153@163:0>](var628:bool) = false
        P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int) = ((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
        P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int) = ((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
        P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int) = ((<f_1030@133:0> = 3) && (<f_1030@133:1> = 50))
      upper bounds:
        P[<f_1030@133:1>](var643:int,var644:int) = ((var643 <= 3) || (var643 >= 50))
        P[<f_1030@127:1>](var639:int,var640:int) = ((var639 <= 2) || (var639 >= 49))
        P[<f_1030@121:1>](var635:int,var636:int) = ((var635 <= 1) || (var635 >= 48))
        P[<f_1030@115:1>](var631:int,var632:int) = ((var631 <= 0) || (var631 >= 47))
      begin GenHcSolver.classify_pids(191490)[4]
        output:
          [<f_1030@133:1>],[<f_1030@127:1>],[<f_1030@121:1>],[<f_1030@115:1>]
      end GenHcSolver.classify_pids(191490)[4] (0.002000 sec.)
      lb:((<f_1030@133:0> = 3) && (<f_1030@133:1> = 50))
      nub:(not ((<f_1030@133:0> <= 3) || (<f_1030@133:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(191781)[4]
        lb:((<f_1030@133:0> = 3) && (<f_1030@133:1> = 50))
        nub:(not ((<f_1030@133:0> <= 3) || (<f_1030@133:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(191793)[5]
          ts: ((<f_1030@133:0> = 3) && (<f_1030@133:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(191793)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(191817)[5]
          ts: ((<f_1030@133:0> < 50) && (<f_1030@133:0> > 3))
          
        end ExtFormula.Formula.case_analysis_boolean(191817)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@133:1>) = 0) && ((-3 + <f_1030@133:0>) = 0))
        nub':(((49 + (-1 * <f_1030@133:0>)) >= 0) && ((-4 + <f_1030@133:0>) >= 0))
        begin InterpProver.interpolate(191824)[5]
          begin InterpProver.interpolate_fresh(191825)[6]
            begin InterpProver.interpolate_log(191826)[7]
              input1: (((-50 + <f_1030@133:1>) = 0) && ((-3 + <f_1030@133:0>) = 0))
              input2: (((49 + (-1 * <f_1030@133:0>)) >= 0) && ((-4 + <f_1030@133:0>) >= 0))
              begin InterpProver.interpolate_check(191827)[8]
                begin InterpProver.interpolate_simplify(191828)[9]
                  begin InterpProver.interpolate_quick(191895)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(191904)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(191905)[12]
                        begin CsisatInterface.interpolate_csisat_log(191906)[13]
                          input1: 3 = v_sep_f_1030_sep_133_sep_0
                          input2: (4 <= v_sep_f_1030_sep_133_sep_0 & v_sep_f_1030_sep_133_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(191907)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(191907)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_133_sep_0 <= 6
                          
                        end CsisatInterface.interpolate_csisat_log(191906)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_133_sep_0 <= 6
                        after dnf conversion: ((2*v_sep_f_1030_sep_133_sep_0 <= 6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(191905)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(191904)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(191895)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(191828)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(191827)[8] (0.002999 sec.)
              output: (<f_1030@133:0> <= 3)
            end InterpProver.interpolate_log(191826)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(191825)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(191824)[5] (0.002999 sec.)
        output:
          P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int) = (<f_1030@133:0> <= 3)
      end ApronInterface.convex_hull_interpolate(191781)[4] (0.002999 sec.)
      Horn clauses:
        P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
        
        P[<f_1030@127:1>]((-1 + <f_1030@133:0>):int,<f_1030@133:1>:int),
        ((<f_1030@133:0> < 51) && (<f_1030@133:0> > 3)) |- bot
        
        P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int), (
        <f_1030@127:0> < 51) |- P[<f_1030@127:1>](<f_1030@127:0>:int,
                                                  <f_1030@127:1>:int)
        
        P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
        <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,
                                                  <f_1030@121:1>:int)
        
         ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
      lower bounds:
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        P[<fail_1153@163:0>](var646:bool) = false
        P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int) = ((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
        P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int) = ((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
      upper bounds:
        P[<f_1030@127:1>](var657:int,var658:int) = ((var657 <= 2) || (var657 >= 50))
        P[<f_1030@121:1>](var653:int,var654:int) = ((var653 <= 1) || (var653 >= 49))
        P[<f_1030@115:1>](var649:int,var650:int) = ((var649 <= 0) || (var649 >= 48))
      begin GenHcSolver.classify_pids(195931)[4]
        output:
          [<f_1030@127:1>],[<f_1030@121:1>],[<f_1030@115:1>]
      end GenHcSolver.classify_pids(195931)[4] (0.001000 sec.)
      lb:((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
      nub:(not ((<f_1030@127:0> <= 2) || (<f_1030@127:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(196076)[4]
        lb:((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
        nub:(not ((<f_1030@127:0> <= 2) || (<f_1030@127:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(196088)[5]
          ts: ((<f_1030@127:0> = 2) && (<f_1030@127:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(196088)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(196112)[5]
          ts: ((<f_1030@127:0> < 50) && (<f_1030@127:0> > 2))
          
        end ExtFormula.Formula.case_analysis_boolean(196112)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@127:1>) = 0) && ((-2 + <f_1030@127:0>) = 0))
        nub':(((49 + (-1 * <f_1030@127:0>)) >= 0) && ((-3 + <f_1030@127:0>) >= 0))
        begin InterpProver.interpolate(196119)[5]
          begin InterpProver.interpolate_fresh(196120)[6]
            begin InterpProver.interpolate_log(196121)[7]
              input1: (((-50 + <f_1030@127:1>) = 0) && ((-2 + <f_1030@127:0>) = 0))
              input2: (((49 + (-1 * <f_1030@127:0>)) >= 0) && ((-3 + <f_1030@127:0>) >= 0))
              begin InterpProver.interpolate_check(196122)[8]
                begin InterpProver.interpolate_simplify(196123)[9]
                  begin InterpProver.interpolate_quick(196190)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(196199)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(196200)[12]
                        begin CsisatInterface.interpolate_csisat_log(196201)[13]
                          input1: 2 = v_sep_f_1030_sep_127_sep_0
                          input2: (3 <= v_sep_f_1030_sep_127_sep_0 & v_sep_f_1030_sep_127_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(196202)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(196202)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_127_sep_0 <= 4
                          
                        end CsisatInterface.interpolate_csisat_log(196201)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_127_sep_0 <= 4
                        after dnf conversion: ((2*v_sep_f_1030_sep_127_sep_0 <= 4))
                        
                      end CsisatInterface.interpolate_csisat_post_process(196200)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(196199)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(196190)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(196123)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(196122)[8] (0.001000 sec.)
              output: (<f_1030@127:0> <= 2)
            end InterpProver.interpolate_log(196121)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(196120)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(196119)[5] (0.001000 sec.)
        output:
          P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int) = (<f_1030@127:0> <= 2)
      end ApronInterface.convex_hull_interpolate(196076)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
        
        P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int),
        ((<f_1030@127:0> < 51) && (<f_1030@127:0> > 2)) |- bot
        
        P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
        <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,
                                                  <f_1030@121:1>:int)
        
         ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
      lower bounds:
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        P[<fail_1153@163:0>](var660:bool) = false
        P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int) = ((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
      upper bounds:
        P[<f_1030@121:1>](var667:int,var668:int) = ((var667 <= 1) || (var667 >= 50))
        P[<f_1030@115:1>](var663:int,var664:int) = ((var663 <= 0) || (var663 >= 49))
      begin GenHcSolver.classify_pids(198669)[4]
        output:
          [<f_1030@121:1>],[<f_1030@115:1>]
      end GenHcSolver.classify_pids(198669)[4] (0.001000 sec.)
      lb:((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
      nub:(not ((<f_1030@121:0> <= 1) || (<f_1030@121:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(198718)[4]
        lb:((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
        nub:(not ((<f_1030@121:0> <= 1) || (<f_1030@121:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(198730)[5]
          ts: ((<f_1030@121:0> = 1) && (<f_1030@121:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(198730)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(198754)[5]
          ts: ((<f_1030@121:0> < 50) && (<f_1030@121:0> > 1))
          
        end ExtFormula.Formula.case_analysis_boolean(198754)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@121:1>) = 0) && ((-1 + <f_1030@121:0>) = 0))
        nub':(((49 + (-1 * <f_1030@121:0>)) >= 0) && ((-2 + <f_1030@121:0>) >= 0))
        begin InterpProver.interpolate(198761)[5]
          begin InterpProver.interpolate_fresh(198762)[6]
            begin InterpProver.interpolate_log(198763)[7]
              input1: (((-50 + <f_1030@121:1>) = 0) && ((-1 + <f_1030@121:0>) = 0))
              input2: (((49 + (-1 * <f_1030@121:0>)) >= 0) && ((-2 + <f_1030@121:0>) >= 0))
              begin InterpProver.interpolate_check(198764)[8]
                begin InterpProver.interpolate_simplify(198765)[9]
                  begin InterpProver.interpolate_quick(198832)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(198841)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(198842)[12]
                        begin CsisatInterface.interpolate_csisat_log(198843)[13]
                          input1: 1 = v_sep_f_1030_sep_121_sep_0
                          input2: (2 <= v_sep_f_1030_sep_121_sep_0 & v_sep_f_1030_sep_121_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(198844)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(198844)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_121_sep_0 <= 2
                          
                        end CsisatInterface.interpolate_csisat_log(198843)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_121_sep_0 <= 2
                        after dnf conversion: ((2*v_sep_f_1030_sep_121_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(198842)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(198841)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(198832)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(198765)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(198764)[8] (0.001999 sec.)
              output: (<f_1030@121:0> <= 1)
            end InterpProver.interpolate_log(198763)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(198762)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(198761)[5] (0.001999 sec.)
        output:
          P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int) = (<f_1030@121:0> <= 1)
      end ApronInterface.convex_hull_interpolate(198718)[4] (0.001999 sec.)
      Horn clauses:
        P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
        
        P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int),
        ((<f_1030@121:0> < 51) && (<f_1030@121:0> > 1)) |- bot
        
         ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
      lower bounds:
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        P[<fail_1153@163:0>](var670:bool) = false
      upper bounds:
        P[<fail_1153@163:0>](var673:bool) = true
      begin GenHcSolver.classify_pids(199709)[4]
        output:
          [<fail_1153@163:0>]
      end GenHcSolver.classify_pids(199709)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(199712)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(199715)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(199715)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(199720)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(199720)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(199723)[5]
          begin InterpProver.interpolate_fresh(199724)[6]
            begin InterpProver.interpolate_log(199725)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(199726)[8]
                begin InterpProver.interpolate_simplify(199727)[9]
                  begin InterpProver.interpolate_quick(199742)[10]
                    
                  end InterpProver.interpolate_quick(199742)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(199746)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(199746)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(199727)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(199726)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(199725)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(199724)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(199723)[5] (0.001000 sec.)
        output:
          P[<fail_1153@163:0>](var670:bool) = false
      end ApronInterface.convex_hull_interpolate(199712)[4] (0.001000 sec.)
      Horn clauses:
        P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int),
        ((<f_1030@121:0> < 51) && (<f_1030@121:0> > 1)) |- bot
        
         ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
      lower bounds:
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
      upper bounds:
        P[<f_1030@115:1>](var674:int,var675:int) = ((var674 <= 0) || (var674 >= 50))
      begin GenHcSolver.classify_pids(200760)[4]
        output:
          [<f_1030@115:1>]
      end GenHcSolver.classify_pids(200760)[4] (0.000000 sec.)
      lb:((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
      nub:(not ((<f_1030@115:0> <= 0) || (<f_1030@115:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(200763)[4]
        lb:((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
        nub:(not ((<f_1030@115:0> <= 0) || (<f_1030@115:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(200773)[5]
          ts: ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(200773)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(200793)[5]
          ts: ((<f_1030@115:0> < 50) && (<f_1030@115:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(200793)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@115:1>) = 0) && (<f_1030@115:0> = 0))
        nub':(((49 + (-1 * <f_1030@115:0>)) >= 0) && ((-1 + <f_1030@115:0>) >= 0))
        begin InterpProver.interpolate(200799)[5]
          begin InterpProver.interpolate_fresh(200800)[6]
            begin InterpProver.interpolate_log(200801)[7]
              input1: (((-50 + <f_1030@115:1>) = 0) && (<f_1030@115:0> = 0))
              input2: (((49 + (-1 * <f_1030@115:0>)) >= 0) && ((-1 + <f_1030@115:0>) >= 0))
              begin InterpProver.interpolate_check(200802)[8]
                begin InterpProver.interpolate_simplify(200803)[9]
                  begin InterpProver.interpolate_quick(200865)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(200874)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(200875)[12]
                        begin CsisatInterface.interpolate_csisat_log(200876)[13]
                          input1: 0 = v_sep_f_1030_sep_115_sep_0
                          input2: (1 <= v_sep_f_1030_sep_115_sep_0 & v_sep_f_1030_sep_115_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(200877)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(200877)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_115_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(200876)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_115_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_f_1030_sep_115_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(200875)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(200874)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(200865)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(200803)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(200802)[8] (0.002000 sec.)
              output: (<f_1030@115:0> <= 0)
            end InterpProver.interpolate_log(200801)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(200800)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(200799)[5] (0.002000 sec.)
        output:
          P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 0)
      end ApronInterface.convex_hull_interpolate(200763)[4] (0.002000 sec.)
      begin HcSolver.check_validity(201035)[4]
        input:
          P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
          
          P[<<f_1030@115:2>@158:0>](0:int,50:int,100:int), <fail_1153@163:0>
          |- P[<fail_1153@163:0>](<fail_1153@163:0>:bool)
          
          P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int),
          P[<<f_1030@121:2>@154:0>]((1 + <f_1030@115:0>):int,<f_1030@115:1>:int,<<f_1030@115:2>@158:0>:int),
          (<f_1030@115:0> < 50)
          |- P[<<f_1030@115:2>@158:0>](<f_1030@115:0>:int,<f_1030@115:1>:int,
                                       <<f_1030@115:2>@158:0>:int)
          
          P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int),
          P[<<f_1030@127:2>@150:0>]((1 + <f_1030@121:0>):int,<f_1030@121:1>:int,<<f_1030@121:2>@154:0>:int),
          (<f_1030@121:0> < 50)
          |- P[<<f_1030@121:2>@154:0>](<f_1030@121:0>:int,<f_1030@121:1>:int,
                                       <<f_1030@121:2>@154:0>:int)
          
          P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int),
          P[<<f_1030@133:2>@146:0>]((1 + <f_1030@127:0>):int,<f_1030@127:1>:int,<<f_1030@127:2>@150:0>:int),
          (<f_1030@127:0> < 50)
          |- P[<<f_1030@127:2>@150:0>](<f_1030@127:0>:int,<f_1030@127:1>:int,
                                       <<f_1030@127:2>@150:0>:int)
          
          P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int),
          P[<<f_1030@139:2>@142:0>]((1 + <f_1030@133:0>):int,<f_1030@133:1>:int,<<f_1030@133:2>@146:0>:int),
          (<f_1030@133:0> < 50)
          |- P[<<f_1030@133:2>@146:0>](<f_1030@133:0>:int,<f_1030@133:1>:int,
                                       <<f_1030@133:2>@146:0>:int)
          
          P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int),
          ((<f_1030@139:0> >= 100) && (<<f_1030@139:2>@142:0> = <f_1030@139:1>))
          |- P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,
                                       <<f_1030@139:2>@142:0>:int)
          
          P[<f_1030@133:1>]((-1 + <f_1030@139:0>):int,<f_1030@139:1>:int), (
          <f_1030@139:0> < 51) |- P[<f_1030@139:1>](<f_1030@139:0>:int,
                                                    <f_1030@139:1>:int)
          
          P[<f_1030@127:1>]((-1 + <f_1030@133:0>):int,<f_1030@133:1>:int), (
          <f_1030@133:0> < 51) |- P[<f_1030@133:1>](<f_1030@133:0>:int,
                                                    <f_1030@133:1>:int)
          
          P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int), (
          <f_1030@127:0> < 51) |- P[<f_1030@127:1>](<f_1030@127:0>:int,
                                                    <f_1030@127:1>:int)
          
          P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
          <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,
                                                    <f_1030@121:1>:int)
          
           ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(201035)[4] (0.003000 sec.)
      solution:
        P[<fail_1153@163:0>](var670:bool) = false
        P[<<f_1030@115:2>@158:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
        P[<<f_1030@121:2>@154:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
        P[<<f_1030@127:2>@150:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
        P[<<f_1030@133:2>@146:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
        P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,<<f_1030@139:2>@142:0>:int) = false
        P[<f_1030@139:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 4)
        P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int) = (<f_1030@133:0> <= 3)
        P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int) = (<f_1030@127:0> <= 2)
        P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int) = (<f_1030@121:0> <= 1)
        P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int) = (<f_1030@115:0> <= 0)
    end GenHcSolver.solve(162760)[3] (0.172974 sec.)
    begin YhornInterface.solve(201741)[3]
      begin HcSolver.solve_ub(201742)[4]
        encoded:
          P[<fail_1153@163:0>](<fail_1153@163:0>:int)|- bot
          
          P[<<f_1030@115:2>@158:0>](0:int,50:int,100:int), (<fail_1153@163:0> = 1)
          |- P[<fail_1153@163:0>](<fail_1153@163:0>:int)
          
          P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int),
          P[<<f_1030@121:2>@154:0>]((1 + <f_1030@115:0>):int,<f_1030@115:1>:int,<<f_1030@115:2>@158:0>:int),
          (<f_1030@115:0> < 50)
          |- P[<<f_1030@115:2>@158:0>](<f_1030@115:0>:int,<f_1030@115:1>:int,
                                       <<f_1030@115:2>@158:0>:int)
          
          P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int),
          P[<<f_1030@127:2>@150:0>]((1 + <f_1030@121:0>):int,<f_1030@121:1>:int,<<f_1030@121:2>@154:0>:int),
          (<f_1030@121:0> < 50)
          |- P[<<f_1030@121:2>@154:0>](<f_1030@121:0>:int,<f_1030@121:1>:int,
                                       <<f_1030@121:2>@154:0>:int)
          
          P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int),
          P[<<f_1030@133:2>@146:0>]((1 + <f_1030@127:0>):int,<f_1030@127:1>:int,<<f_1030@127:2>@150:0>:int),
          (<f_1030@127:0> < 50)
          |- P[<<f_1030@127:2>@150:0>](<f_1030@127:0>:int,<f_1030@127:1>:int,
                                       <<f_1030@127:2>@150:0>:int)
          
          P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int),
          P[<<f_1030@139:2>@142:0>]((1 + <f_1030@133:0>):int,<f_1030@133:1>:int,<<f_1030@133:2>@146:0>:int),
          (<f_1030@133:0> < 50)
          |- P[<<f_1030@133:2>@146:0>](<f_1030@133:0>:int,<f_1030@133:1>:int,
                                       <<f_1030@133:2>@146:0>:int)
          
          P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int),
          ((<f_1030@139:0> >= 100) && (<<f_1030@139:2>@142:0> = <f_1030@139:1>))
          |- P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,
                                       <<f_1030@139:2>@142:0>:int)
          
          P[<f_1030@133:1>]((-1 + <f_1030@139:0>):int,<f_1030@139:1>:int), (
          <f_1030@139:0> < 51) |- P[<f_1030@139:1>](<f_1030@139:0>:int,
                                                    <f_1030@139:1>:int)
          
          P[<f_1030@127:1>]((-1 + <f_1030@133:0>):int,<f_1030@133:1>:int), (
          <f_1030@133:0> < 51) |- P[<f_1030@133:1>](<f_1030@133:0>:int,
                                                    <f_1030@133:1>:int)
          
          P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int), (
          <f_1030@127:0> < 51) |- P[<f_1030@127:1>](<f_1030@127:0>:int,
                                                    <f_1030@127:1>:int)
          
          P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
          <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,
                                                    <f_1030@121:1>:int)
          
           ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
        input to Yhorn:
          P[<fail_1153@163:0>](<fail_1153@163:0>:int)|- bot
          
          P[<<f_1030@115:2>@158:0>](var676:int,var677:int,var678:int),
          ((var678 = 100) && ((var677 = 50) && ((var676 = 0) && (<fail_1153@163:0> = 1))))
          |- P[<fail_1153@163:0>](<fail_1153@163:0>:int)
          
          P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int),
          P[<<f_1030@121:2>@154:0>](var679:int,<f_1030@115:1>:int,<<f_1030@115:2>@158:0>:int),
          ((var679 = (1 + <f_1030@115:0>)) && (<f_1030@115:0> < 50))
          |- P[<<f_1030@115:2>@158:0>](<f_1030@115:0>:int,<f_1030@115:1>:int,
                                       <<f_1030@115:2>@158:0>:int)
          
          P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int),
          P[<<f_1030@127:2>@150:0>](var680:int,<f_1030@121:1>:int,<<f_1030@121:2>@154:0>:int),
          ((var680 = (1 + <f_1030@121:0>)) && (<f_1030@121:0> < 50))
          |- P[<<f_1030@121:2>@154:0>](<f_1030@121:0>:int,<f_1030@121:1>:int,
                                       <<f_1030@121:2>@154:0>:int)
          
          P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int),
          P[<<f_1030@133:2>@146:0>](var681:int,<f_1030@127:1>:int,<<f_1030@127:2>@150:0>:int),
          ((var681 = (1 + <f_1030@127:0>)) && (<f_1030@127:0> < 50))
          |- P[<<f_1030@127:2>@150:0>](<f_1030@127:0>:int,<f_1030@127:1>:int,
                                       <<f_1030@127:2>@150:0>:int)
          
          P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int),
          P[<<f_1030@139:2>@142:0>](var682:int,<f_1030@133:1>:int,<<f_1030@133:2>@146:0>:int),
          ((var682 = (1 + <f_1030@133:0>)) && (<f_1030@133:0> < 50))
          |- P[<<f_1030@133:2>@146:0>](<f_1030@133:0>:int,<f_1030@133:1>:int,
                                       <<f_1030@133:2>@146:0>:int)
          
          P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int),
          ((<<f_1030@139:2>@142:0> = <f_1030@139:1>) && (<f_1030@139:0> >= 100))
          |- P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,
                                       <<f_1030@139:2>@142:0>:int)
          
          P[<f_1030@133:1>](var683:int,<f_1030@139:1>:int), (((1 + var683) = <f_1030@139:0>) && (<f_1030@139:0> < 51))
          |- P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int)
          
          P[<f_1030@127:1>](var684:int,<f_1030@133:1>:int), (((1 + var684) = <f_1030@133:0>) && (<f_1030@133:0> < 51))
          |- P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int)
          
          P[<f_1030@121:1>](var685:int,<f_1030@127:1>:int), (((1 + var685) = <f_1030@127:0>) && (<f_1030@127:0> < 51))
          |- P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int)
          
          P[<f_1030@115:1>](var686:int,<f_1030@121:1>:int), (((1 + var686) = <f_1030@121:0>) && (<f_1030@121:0> < 51))
          |- P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1153_sep_163_sep_0($744)) -> 1=0.
(($744-1=0) & ($745=0) & ($746-50=0) & ($747-100=0)) & (v_sep_f_1030_sep_115_sep_2_sep_158_sep_0($745,$746,$747)) -> v_sep_fail_1153_sep_163_sep_0($744).
(($748-50<0) & (-$748+$749-1=0)) & (v_sep_f_1030_sep_121_sep_2_sep_154_sep_0($749,$750,$751)) & (v_sep_f_1030_sep_115_sep_1($748,$750)) -> v_sep_f_1030_sep_115_sep_2_sep_158_sep_0($748,$750,$751).
(($752-50<0) & (-$752+$753-1=0)) & (v_sep_f_1030_sep_127_sep_2_sep_150_sep_0($753,$754,$755)) & (v_sep_f_1030_sep_121_sep_1($752,$754)) -> v_sep_f_1030_sep_121_sep_2_sep_154_sep_0($752,$754,$755).
(($756-50<0) & (-$756+$757-1=0)) & (v_sep_f_1030_sep_133_sep_2_sep_146_sep_0($757,$758,$759)) & (v_sep_f_1030_sep_127_sep_1($756,$758)) -> v_sep_f_1030_sep_127_sep_2_sep_150_sep_0($756,$758,$759).
(($760-50<0) & (-$760+$761-1=0)) & (v_sep_f_1030_sep_139_sep_2_sep_142_sep_0($761,$762,$763)) & (v_sep_f_1030_sep_133_sep_1($760,$762)) -> v_sep_f_1030_sep_133_sep_2_sep_146_sep_0($760,$762,$763).
(($764-100>=0) & ($765-$766=0)) & (v_sep_f_1030_sep_139_sep_1($764,$766)) -> v_sep_f_1030_sep_139_sep_2_sep_142_sep_0($764,$766,$765).
(($764-51<0) & (-$764+$767+1=0)) & (v_sep_f_1030_sep_133_sep_1($767,$766)) -> v_sep_f_1030_sep_139_sep_1($764,$766).
(($760-51<0) & (-$760+$768+1=0)) & (v_sep_f_1030_sep_127_sep_1($768,$762)) -> v_sep_f_1030_sep_133_sep_1($760,$762).
(($756-51<0) & (-$756+$769+1=0)) & (v_sep_f_1030_sep_121_sep_1($769,$758)) -> v_sep_f_1030_sep_127_sep_1($756,$758).
(($752-51<0) & (-$752+$770+1=0)) & (v_sep_f_1030_sep_115_sep_1($770,$754)) -> v_sep_f_1030_sep_121_sep_1($752,$754).
($748=0) & ($750-50=0) -> v_sep_f_1030_sep_115_sep_1($748,$750).


v_sep_f_1030_sep_115_sep_1: X
v_sep_f_1030_sep_115_sep_2_sep_158_sep_0: X
v_sep_f_1030_sep_121_sep_1: X
v_sep_f_1030_sep_121_sep_2_sep_154_sep_0: X
v_sep_f_1030_sep_127_sep_1: X
v_sep_f_1030_sep_127_sep_2_sep_150_sep_0: X
v_sep_f_1030_sep_133_sep_1: X
v_sep_f_1030_sep_133_sep_2_sep_146_sep_0: X
v_sep_f_1030_sep_139_sep_1: X
v_sep_f_1030_sep_139_sep_2_sep_142_sep_0: X
v_sep_fail_1153_sep_163_sep_0: X
................
v_sep_f_1030_sep_115_sep_1: X
v_sep_f_1030_sep_115_sep_2_sep_158_sep_0: X
v_sep_f_1030_sep_121_sep_1: X
v_sep_f_1030_sep_121_sep_2_sep_154_sep_0: X
v_sep_f_1030_sep_127_sep_1: X
v_sep_f_1030_sep_127_sep_2_sep_150_sep_0: X
v_sep_f_1030_sep_133_sep_1: X
v_sep_f_1030_sep_133_sep_2_sep_146_sep_0: X
v_sep_f_1030_sep_139_sep_1: X
v_sep_f_1030_sep_139_sep_2_sep_142_sep_0: X
v_sep_fail_1153_sep_163_sep_0: X
...
v_sep_f_1030_sep_115_sep_1: X
v_sep_f_1030_sep_115_sep_2_sep_158_sep_0: X
v_sep_f_1030_sep_121_sep_1: X
v_sep_f_1030_sep_121_sep_2_sep_154_sep_0: X
v_sep_f_1030_sep_127_sep_1: X
v_sep_f_1030_sep_127_sep_2_sep_150_sep_0: X
v_sep_f_1030_sep_133_sep_1: X
v_sep_f_1030_sep_133_sep_2_sep_146_sep_0: X
v_sep_f_1030_sep_139_sep_1: X
v_sep_f_1030_sep_139_sep_2_sep_142_sep_0: X
v_sep_fail_1153_sep_163_sep_0: X
.....
v_sep_f_1030_sep_115_sep_1: X
v_sep_f_1030_sep_115_sep_2_sep_158_sep_0: X
v_sep_f_1030_sep_121_sep_1: X
v_sep_f_1030_sep_121_sep_2_sep_154_sep_0: X
v_sep_f_1030_sep_127_sep_1: X
v_sep_f_1030_sep_127_sep_2_sep_150_sep_0: X
v_sep_f_1030_sep_133_sep_1: X
v_sep_f_1030_sep_133_sep_2_sep_146_sep_0: X
v_sep_f_1030_sep_139_sep_1: X
v_sep_f_1030_sep_139_sep_2_sep_142_sep_0: X
v_sep_fail_1153_sep_163_sep_0: X
.......
v_sep_f_1030_sep_115_sep_1: X
v_sep_f_1030_sep_115_sep_2_sep_158_sep_0: X
v_sep_f_1030_sep_121_sep_1: X
v_sep_f_1030_sep_121_sep_2_sep_154_sep_0: X
v_sep_f_1030_sep_127_sep_1: X
v_sep_f_1030_sep_127_sep_2_sep_150_sep_0: X
v_sep_f_1030_sep_133_sep_1: X
v_sep_f_1030_sep_133_sep_2_sep_146_sep_0: X
v_sep_f_1030_sep_139_sep_1: X
v_sep_f_1030_sep_139_sep_2_sep_142_sep_0: X
v_sep_fail_1153_sep_163_sep_0: X
..........
v_sep_f_1030_sep_115_sep_1: X
v_sep_f_1030_sep_115_sep_2_sep_158_sep_0: X
v_sep_f_1030_sep_121_sep_1: X
v_sep_f_1030_sep_121_sep_2_sep_154_sep_0: X
v_sep_f_1030_sep_127_sep_1: X
v_sep_f_1030_sep_127_sep_2_sep_150_sep_0: X
v_sep_f_1030_sep_133_sep_1: X
v_sep_f_1030_sep_133_sep_2_sep_146_sep_0: X
v_sep_f_1030_sep_139_sep_1: X
v_sep_f_1030_sep_139_sep_2_sep_142_sep_0: X
v_sep_fail_1153_sep_163_sep_0: X
.............
v_sep_f_1030_sep_115_sep_1: X
v_sep_f_1030_sep_115_sep_2_sep_158_sep_0: X
v_sep_f_1030_sep_121_sep_1: X
v_sep_f_1030_sep_121_sep_2_sep_154_sep_0: X
v_sep_f_1030_sep_127_sep_1: X
v_sep_f_1030_sep_127_sep_2_sep_150_sep_0: X
v_sep_f_1030_sep_133_sep_1: X
v_sep_f_1030_sep_133_sep_2_sep_146_sep_0: X
v_sep_f_1030_sep_139_sep_1: X
v_sep_f_1030_sep_139_sep_2_sep_142_sep_0: X
v_sep_fail_1153_sep_163_sep_0: X
...............
v_sep_f_1030_sep_115_sep_1: X
v_sep_f_1030_sep_115_sep_2_sep_158_sep_0: X
v_sep_f_1030_sep_121_sep_1: X
v_sep_f_1030_sep_121_sep_2_sep_154_sep_0: X
v_sep_f_1030_sep_127_sep_1: X
v_sep_f_1030_sep_127_sep_2_sep_150_sep_0: X
v_sep_f_1030_sep_133_sep_1: X
v_sep_f_1030_sep_133_sep_2_sep_146_sep_0: X
v_sep_f_1030_sep_139_sep_1: X
v_sep_f_1030_sep_139_sep_2_sep_142_sep_0: X
v_sep_fail_1153_sep_163_sep_0: X
................(0=0) & (v_sep_fail_1153_sep_163_sep_0($744)) -> 1=0.
(($744-1=0) & ($745=0) & ($746-50=0) & ($747-100=0)) & (v_sep_f_1030_sep_115_sep_2_sep_158_sep_0($745,$746,$747)) -> v_sep_fail_1153_sep_163_sep_0($744).
(($748-50<0) & (-$748+$749-1=0)) & (v_sep_f_1030_sep_121_sep_2_sep_154_sep_0($749,$750,$751)) & (v_sep_f_1030_sep_115_sep_1($748,$750)) -> v_sep_f_1030_sep_115_sep_2_sep_158_sep_0($748,$750,$751).
(($752-50<0) & (-$752+$753-1=0)) & (v_sep_f_1030_sep_127_sep_2_sep_150_sep_0($753,$754,$755)) & (v_sep_f_1030_sep_121_sep_1($752,$754)) -> v_sep_f_1030_sep_121_sep_2_sep_154_sep_0($752,$754,$755).
(($756-50<0) & (-$756+$757-1=0)) & (v_sep_f_1030_sep_133_sep_2_sep_146_sep_0($757,$758,$759)) & (v_sep_f_1030_sep_127_sep_1($756,$758)) -> v_sep_f_1030_sep_127_sep_2_sep_150_sep_0($756,$758,$759).
(($760-50<0) & (-$760+$761-1=0)) & (v_sep_f_1030_sep_139_sep_2_sep_142_sep_0($761,$762,$763)) & (v_sep_f_1030_sep_133_sep_1($760,$762)) -> v_sep_f_1030_sep_133_sep_2_sep_146_sep_0($760,$762,$763).
(($764-100>=0) & ($765-$766=0)) & (v_sep_f_1030_sep_139_sep_1($764,$766)) -> v_sep_f_1030_sep_139_sep_2_sep_142_sep_0($764,$766,$765).
(($764-51<0) & (-$764+$767+1=0)) & (v_sep_f_1030_sep_133_sep_1($767,$766)) -> v_sep_f_1030_sep_139_sep_1($764,$766).
(($760-51<0) & (-$760+$768+1=0)) & (v_sep_f_1030_sep_127_sep_1($768,$762)) -> v_sep_f_1030_sep_133_sep_1($760,$762).
(($756-51<0) & (-$756+$769+1=0)) & (v_sep_f_1030_sep_121_sep_1($769,$758)) -> v_sep_f_1030_sep_127_sep_1($756,$758).
(($752-51<0) & (-$752+$770+1=0)) & (v_sep_f_1030_sep_115_sep_1($770,$754)) -> v_sep_f_1030_sep_121_sep_1($752,$754).
($748=0) & ($750-50=0) -> v_sep_f_1030_sep_115_sep_1($748,$750).

           ((<f_1030@115:1> = 50) && (<f_1030@115:0> = 0)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
        solution:
          P[<f_1030@115:1>]($788:int,$790:int) = ($790 <= 50)
          P[<<f_1030@115:2>@158:0>]($774:int,$776:int,$778:int) = ($778 <= 50)
          P[<f_1030@121:1>]($800:int,$802:int) = ($802 <= 50)
          P[<<f_1030@121:2>@154:0>]($781:int,$783:int,$785:int) = ((5 * $785) <= (200 + $783))
          P[<f_1030@127:1>]($812:int,$814:int) = ($814 <= 50)
          P[<<f_1030@127:2>@150:0>]($793:int,$795:int,$797:int) = ((5 * $797) <= (150 + (2 * $795)))
          P[<f_1030@133:1>]($824:int,$826:int) = ($826 <= 50)
          P[<<f_1030@133:2>@146:0>]($805:int,$807:int,$809:int) = ((5 * $809) <= (100 + (3 * $807)))
          P[<f_1030@139:1>]($829:int,$831:int) = ($831 <= 50)
          P[<<f_1030@139:2>@142:0>]($817:int,$819:int,$821:int) = ((5 * $821) <= (50 + (4 * $819)))
          P[<fail_1153@163:0>]($771:bool) = false
        
      end HcSolver.solve_ub(201742)[4] (0.061990 sec.)
      begin HcSolver.check_validity(202365)[4]
        input:
          P[<fail_1153@163:0>](<fail_1153@163:0>:bool)|- bot
          
          P[<<f_1030@115:2>@158:0>](0:int,50:int,100:int), <fail_1153@163:0>
          |- P[<fail_1153@163:0>](<fail_1153@163:0>:bool)
          
          P[<f_1030@115:1>](<f_1030@115:0>:int,<f_1030@115:1>:int),
          P[<<f_1030@121:2>@154:0>]((1 + <f_1030@115:0>):int,<f_1030@115:1>:int,<<f_1030@115:2>@158:0>:int),
          (<f_1030@115:0> < 50)
          |- P[<<f_1030@115:2>@158:0>](<f_1030@115:0>:int,<f_1030@115:1>:int,
                                       <<f_1030@115:2>@158:0>:int)
          
          P[<f_1030@121:1>](<f_1030@121:0>:int,<f_1030@121:1>:int),
          P[<<f_1030@127:2>@150:0>]((1 + <f_1030@121:0>):int,<f_1030@121:1>:int,<<f_1030@121:2>@154:0>:int),
          (<f_1030@121:0> < 50)
          |- P[<<f_1030@121:2>@154:0>](<f_1030@121:0>:int,<f_1030@121:1>:int,
                                       <<f_1030@121:2>@154:0>:int)
          
          P[<f_1030@127:1>](<f_1030@127:0>:int,<f_1030@127:1>:int),
          P[<<f_1030@133:2>@146:0>]((1 + <f_1030@127:0>):int,<f_1030@127:1>:int,<<f_1030@127:2>@150:0>:int),
          (<f_1030@127:0> < 50)
          |- P[<<f_1030@127:2>@150:0>](<f_1030@127:0>:int,<f_1030@127:1>:int,
                                       <<f_1030@127:2>@150:0>:int)
          
          P[<f_1030@133:1>](<f_1030@133:0>:int,<f_1030@133:1>:int),
          P[<<f_1030@139:2>@142:0>]((1 + <f_1030@133:0>):int,<f_1030@133:1>:int,<<f_1030@133:2>@146:0>:int),
          (<f_1030@133:0> < 50)
          |- P[<<f_1030@133:2>@146:0>](<f_1030@133:0>:int,<f_1030@133:1>:int,
                                       <<f_1030@133:2>@146:0>:int)
          
          P[<f_1030@139:1>](<f_1030@139:0>:int,<f_1030@139:1>:int),
          ((<f_1030@139:0> >= 100) && (<<f_1030@139:2>@142:0> = <f_1030@139:1>))
          |- P[<<f_1030@139:2>@142:0>](<f_1030@139:0>:int,<f_1030@139:1>:int,
                                       <<f_1030@139:2>@142:0>:int)
          
          P[<f_1030@133:1>]((-1 + <f_1030@139:0>):int,<f_1030@139:1>:int), (
          <f_1030@139:0> < 51) |- P[<f_1030@139:1>](<f_1030@139:0>:int,
                                                    <f_1030@139:1>:int)
          
          P[<f_1030@127:1>]((-1 + <f_1030@133:0>):int,<f_1030@133:1>:int), (
          <f_1030@133:0> < 51) |- P[<f_1030@133:1>](<f_1030@133:0>:int,
                                                    <f_1030@133:1>:int)
          
          P[<f_1030@121:1>]((-1 + <f_1030@127:0>):int,<f_1030@127:1>:int), (
          <f_1030@127:0> < 51) |- P[<f_1030@127:1>](<f_1030@127:0>:int,
                                                    <f_1030@127:1>:int)
          
          P[<f_1030@115:1>]((-1 + <f_1030@121:0>):int,<f_1030@121:1>:int), (
          <f_1030@121:0> < 51) |- P[<f_1030@121:1>](<f_1030@121:0>:int,
                                                    <f_1030@121:1>:int)
          
           ((<f_1030@115:0> = 0) && (<f_1030@115:1> = 50)) |- P[<f_1030@115:1>](<f_1030@115:0>:int,
                                                                    <f_1030@115:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(202365)[4] (0.010999 sec.)
      solution:
        P[<f_1030@115:1>]($788:int,$790:int) = ($790 <= 50)
        P[<<f_1030@115:2>@158:0>]($774:int,$776:int,$778:int) = ($778 <= 50)
        P[<f_1030@121:1>]($800:int,$802:int) = ($802 <= 50)
        P[<<f_1030@121:2>@154:0>]($781:int,$783:int,$785:int) = ((5 * $785) <= (200 + $783))
        P[<f_1030@127:1>]($812:int,$814:int) = ($814 <= 50)
        P[<<f_1030@127:2>@150:0>]($793:int,$795:int,$797:int) = ((5 * $797) <= (150 + (2 * $795)))
        P[<f_1030@133:1>]($824:int,$826:int) = ($826 <= 50)
        P[<<f_1030@133:2>@146:0>]($805:int,$807:int,$809:int) = ((5 * $809) <= (100 + (3 * $807)))
        P[<f_1030@139:1>]($829:int,$831:int) = ($831 <= 50)
        P[<<f_1030@139:2>@142:0>]($817:int,$819:int,$821:int) = ((5 * $821) <= (50 + (4 * $819)))
        P[<fail_1153@163:0>]($771:bool) = false
    end YhornInterface.solve(201741)[3] (0.072989 sec.)
    
  end RefTypeInfer.infer_etrs(119390)[2] (0.634904 sec.)
  refinement types:
    main_1149: X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 0)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 1)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 2)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 3)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 4)} -> (v3:{v3:int | false} -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    k_main_1146: var690:unit -> X
  abstraction types:
    main_1149: X
    f_1030: var706:int ->
            var707:int[var707 -> (var706 <= 0),
                       var707 -> (var706 <= 1),
                       var707 -> (var706 <= 2),
                       var707 -> (var706 <= 3),
                       var707 -> (var706 <= 4)] -> (var708:int -> X) -> X
    br_f_1151: var723:bool -> var724:int -> var725:int -> (var726:int -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:bool -> (v2:unit -> X) -> X
    k_main_1146: var690:unit -> X
  
end AbsTypeInfer.refine(119389)[1] (0.638902 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 5)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int -> int[x_1 <= 4; x_1 <= 3; x_1 <= 2; x_1 <= 1; x_1 <= 0] -> (int -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(5-1) Abstracting ... DONE!

(5-2) Checking HORS ... DONE!

Error trace::
  main_1149 ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [2/2] ... --> 
  f_1150 [2/2] ... --> 
  fail_1153 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 0

(5-3) Checking counter-example ... DONE!

(5-4) Discovering predicates ... 
begin AbsTypeInfer.refine(206763)[1]
  program:
    main_1149  | true = (f_1030 0
                                50
                                f_1150)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | b_1152 = (f_1030 (x_1031 + 1)
                                                               y_1032
                                                               k_f_1085)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | (not b_1152) = (f_1030 (
                                                                    x_1031 + 1)
                                                                    (y_1032 + 1)
                                                                    k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (x_1031 < 100) = (br_f_1151 (x_1031 < 50)
                                                                x_1031
                                                                y_1032
                                                                k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (not (x_1031 < 100)) = (k_f_1085 y_1032)
    f_1150 x_1124 | (not (x_1124 = 100)) = (k_main_1146 ())
    f_1150 x_1124 | (not (not (x_1124 = 100))) = (fail_1153 true
                                                            k_main_1146)
    fail_1153 b k | true = (fail ())
    k_main_1146 x_1118 | true = end
    main_1149:X
    br_f_1151:bool -> int -> int -> (int -> X) -> X
    f_1030:int -> int -> (int -> X) -> X
    f_1150:int -> X
    fail_1153:bool -> (unit -> X) -> X
    k_main_1146:unit -> X
  inlined functions: br_f_1151,f_1150,k_main_1146
  counterexample: 0:0:0:0:0:0:0:0:0:0:0:1:1:0
  error traces:
    [true.((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
     [(<f_1030@168:0> < 100).
      ((<br_f_1151@171:0> = (<f_1030@168:0> < 50)) &&
       ((<br_f_1151@171:1> = <f_1030@168:0>) && (<br_f_1151@171:2> = <f_1030@168:1>)))
      [<br_f_1151@171:0>.((<f_1030@174:0> = (<br_f_1151@171:1> + 1)) && (<f_1030@174:1> = <br_f_1151@171:2>))
       [(<f_1030@174:0> < 100).
        ((<br_f_1151@177:0> = (<f_1030@174:0> < 50)) &&
         ((<br_f_1151@177:1> = <f_1030@174:0>) && (<br_f_1151@177:2> = <f_1030@174:1>)))
        [<br_f_1151@177:0>.((<f_1030@180:0> = (<br_f_1151@177:1> + 1)) && (<f_1030@180:1> = <br_f_1151@177:2>))
         [(<f_1030@180:0> < 100).
          ((<br_f_1151@183:0> = (<f_1030@180:0> < 50)) &&
           ((<br_f_1151@183:1> = <f_1030@180:0>) && (<br_f_1151@183:2> = <f_1030@180:1>)))
          [<br_f_1151@183:0>.((<f_1030@186:0> = (<br_f_1151@183:1> + 1)) && (<f_1030@186:1> = <br_f_1151@183:2>))
           [(<f_1030@186:0> < 100).
            ((<br_f_1151@189:0> = (<f_1030@186:0> < 50)) &&
             ((<br_f_1151@189:1> = <f_1030@186:0>) && (<br_f_1151@189:2> = <f_1030@186:1>)))
            [<br_f_1151@189:0>.((<f_1030@192:0> = (<br_f_1151@189:1> + 1)) && (<f_1030@192:1> = <br_f_1151@189:2>))
             [(<f_1030@192:0> < 100).
              ((<br_f_1151@195:0> = (<f_1030@192:0> < 50)) &&
               ((<br_f_1151@195:1> = <f_1030@192:0>) && (<br_f_1151@195:2> = <f_1030@192:1>)))
              [<br_f_1151@195:0>.((<f_1030@198:0> = (<br_f_1151@195:1> + 1)) && (<f_1030@198:1> = <br_f_1151@195:2>))
               [(not (<f_1030@198:0> < 100)).(<<f_1030@198:2>@201:0> = <f_1030@198:1>)
                [true.(<<br_f_1151@195:3>@203:0> = <<f_1030@198:2>@201:0>)
                 [true.(<<f_1030@192:2>@205:0> = <<br_f_1151@195:3>@203:0>)
                  [true.(<<br_f_1151@189:3>@207:0> = <<f_1030@192:2>@205:0>)
                   [true.(<<f_1030@186:2>@209:0> = <<br_f_1151@189:3>@207:0>)
                    [true.(<<br_f_1151@183:3>@211:0> = <<f_1030@186:2>@209:0>)
                     [true.(<<f_1030@180:2>@213:0> = <<br_f_1151@183:3>@211:0>)
                      [true.(<<br_f_1151@177:3>@215:0> = <<f_1030@180:2>@213:0>)
                       [true.(<<f_1030@174:2>@217:0> = <<br_f_1151@177:3>@215:0>)
                        [true.(<<br_f_1151@171:3>@219:0> = <<f_1030@174:2>@217:0>)
                         [true.(<<f_1030@168:2>@221:0> = <<br_f_1151@171:3>@219:0>)
                          [true.(<f_1150@223:0> = <<f_1030@168:2>@221:0>)
                           [(not (not (<f_1150@223:0> = 100))).(<fail_1153@226:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(206764)[2]
    horn clauses:
      P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
      
      P[<f_1150@223:0>](100:int), <fail_1153@226:0> |- P[<fail_1153@226:0>](<fail_1153@226:0>:bool)
      
      P[<<f_1030@168:2>@221:0>](0:int,50:int,<f_1150@223:0>:int)|- P[<f_1150@223:0>](<f_1150@223:0>:int)
      
      P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int),
      P[<<br_f_1151@171:3>@219:0>]((<f_1030@168:0> < 50):bool,<f_1030@168:0>:int,<f_1030@168:1>:int,<<f_1030@168:2>@221:0>:int),
      (<f_1030@168:0> < 100)
      |- P[<<f_1030@168:2>@221:0>](<f_1030@168:0>:int,<f_1030@168:1>:int,
                                   <<f_1030@168:2>@221:0>:int)
      
      P[<br_f_1151@171:2>](<br_f_1151@171:0>:bool,<br_f_1151@171:1>:int,<br_f_1151@171:2>:int),
      P[<<f_1030@174:2>@217:0>]((1 + <br_f_1151@171:1>):int,<br_f_1151@171:2>:int,<<br_f_1151@171:3>@219:0>:int),
      <br_f_1151@171:0>
      |- P[<<br_f_1151@171:3>@219:0>](<br_f_1151@171:0>:bool,<br_f_1151@171:1>:int,
                                      <br_f_1151@171:2>:int,<<br_f_1151@171:3>@219:0>:int)
      
      P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int),
      P[<<br_f_1151@177:3>@215:0>]((<f_1030@174:0> < 50):bool,<f_1030@174:0>:int,<f_1030@174:1>:int,<<f_1030@174:2>@217:0>:int),
      (<f_1030@174:0> < 100)
      |- P[<<f_1030@174:2>@217:0>](<f_1030@174:0>:int,<f_1030@174:1>:int,
                                   <<f_1030@174:2>@217:0>:int)
      
      P[<br_f_1151@177:2>](<br_f_1151@177:0>:bool,<br_f_1151@177:1>:int,<br_f_1151@177:2>:int),
      P[<<f_1030@180:2>@213:0>]((1 + <br_f_1151@177:1>):int,<br_f_1151@177:2>:int,<<br_f_1151@177:3>@215:0>:int),
      <br_f_1151@177:0>
      |- P[<<br_f_1151@177:3>@215:0>](<br_f_1151@177:0>:bool,<br_f_1151@177:1>:int,
                                      <br_f_1151@177:2>:int,<<br_f_1151@177:3>@215:0>:int)
      
      P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int),
      P[<<br_f_1151@183:3>@211:0>]((<f_1030@180:0> < 50):bool,<f_1030@180:0>:int,<f_1030@180:1>:int,<<f_1030@180:2>@213:0>:int),
      (<f_1030@180:0> < 100)
      |- P[<<f_1030@180:2>@213:0>](<f_1030@180:0>:int,<f_1030@180:1>:int,
                                   <<f_1030@180:2>@213:0>:int)
      
      P[<br_f_1151@183:2>](<br_f_1151@183:0>:bool,<br_f_1151@183:1>:int,<br_f_1151@183:2>:int),
      P[<<f_1030@186:2>@209:0>]((1 + <br_f_1151@183:1>):int,<br_f_1151@183:2>:int,<<br_f_1151@183:3>@211:0>:int),
      <br_f_1151@183:0>
      |- P[<<br_f_1151@183:3>@211:0>](<br_f_1151@183:0>:bool,<br_f_1151@183:1>:int,
                                      <br_f_1151@183:2>:int,<<br_f_1151@183:3>@211:0>:int)
      
      P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int),
      P[<<br_f_1151@189:3>@207:0>]((<f_1030@186:0> < 50):bool,<f_1030@186:0>:int,<f_1030@186:1>:int,<<f_1030@186:2>@209:0>:int),
      (<f_1030@186:0> < 100)
      |- P[<<f_1030@186:2>@209:0>](<f_1030@186:0>:int,<f_1030@186:1>:int,
                                   <<f_1030@186:2>@209:0>:int)
      
      P[<br_f_1151@189:2>](<br_f_1151@189:0>:bool,<br_f_1151@189:1>:int,<br_f_1151@189:2>:int),
      P[<<f_1030@192:2>@205:0>]((1 + <br_f_1151@189:1>):int,<br_f_1151@189:2>:int,<<br_f_1151@189:3>@207:0>:int),
      <br_f_1151@189:0>
      |- P[<<br_f_1151@189:3>@207:0>](<br_f_1151@189:0>:bool,<br_f_1151@189:1>:int,
                                      <br_f_1151@189:2>:int,<<br_f_1151@189:3>@207:0>:int)
      
      P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int),
      P[<<br_f_1151@195:3>@203:0>]((<f_1030@192:0> < 50):bool,<f_1030@192:0>:int,<f_1030@192:1>:int,<<f_1030@192:2>@205:0>:int),
      (<f_1030@192:0> < 100)
      |- P[<<f_1030@192:2>@205:0>](<f_1030@192:0>:int,<f_1030@192:1>:int,
                                   <<f_1030@192:2>@205:0>:int)
      
      P[<br_f_1151@195:2>](<br_f_1151@195:0>:bool,<br_f_1151@195:1>:int,<br_f_1151@195:2>:int),
      P[<<f_1030@198:2>@201:0>]((1 + <br_f_1151@195:1>):int,<br_f_1151@195:2>:int,<<br_f_1151@195:3>@203:0>:int),
      <br_f_1151@195:0>
      |- P[<<br_f_1151@195:3>@203:0>](<br_f_1151@195:0>:bool,<br_f_1151@195:1>:int,
                                      <br_f_1151@195:2>:int,<<br_f_1151@195:3>@203:0>:int)
      
      P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int),
      ((<f_1030@198:0> >= 100) && (<<f_1030@198:2>@201:0> = <f_1030@198:1>))
      |- P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,
                                   <<f_1030@198:2>@201:0>:int)
      
      P[<br_f_1151@195:2>](true:bool,(-1 + <f_1030@198:0>):int,<f_1030@198:1>:int)|- P[<f_1030@198:1>](
      <f_1030@198:0>:int,<f_1030@198:1>:int)
      
      P[<f_1030@192:1>](<br_f_1151@195:1>:int,<br_f_1151@195:2>:int),
      ((<br_f_1151@195:1> < 100) && (<br_f_1151@195:0> = (<br_f_1151@195:1> < 50)))
      |- P[<br_f_1151@195:2>](<br_f_1151@195:0>:bool,<br_f_1151@195:1>:int,
                              <br_f_1151@195:2>:int)
      
      P[<br_f_1151@189:2>](true:bool,(-1 + <f_1030@192:0>):int,<f_1030@192:1>:int)|- P[<f_1030@192:1>](
      <f_1030@192:0>:int,<f_1030@192:1>:int)
      
      P[<f_1030@186:1>](<br_f_1151@189:1>:int,<br_f_1151@189:2>:int),
      ((<br_f_1151@189:1> < 100) && (<br_f_1151@189:0> = (<br_f_1151@189:1> < 50)))
      |- P[<br_f_1151@189:2>](<br_f_1151@189:0>:bool,<br_f_1151@189:1>:int,
                              <br_f_1151@189:2>:int)
      
      P[<br_f_1151@183:2>](true:bool,(-1 + <f_1030@186:0>):int,<f_1030@186:1>:int)|- P[<f_1030@186:1>](
      <f_1030@186:0>:int,<f_1030@186:1>:int)
      
      P[<f_1030@180:1>](<br_f_1151@183:1>:int,<br_f_1151@183:2>:int),
      ((<br_f_1151@183:1> < 100) && (<br_f_1151@183:0> = (<br_f_1151@183:1> < 50)))
      |- P[<br_f_1151@183:2>](<br_f_1151@183:0>:bool,<br_f_1151@183:1>:int,
                              <br_f_1151@183:2>:int)
      
      P[<br_f_1151@177:2>](true:bool,(-1 + <f_1030@180:0>):int,<f_1030@180:1>:int)|- P[<f_1030@180:1>](
      <f_1030@180:0>:int,<f_1030@180:1>:int)
      
      P[<f_1030@174:1>](<br_f_1151@177:1>:int,<br_f_1151@177:2>:int),
      ((<br_f_1151@177:1> < 100) && (<br_f_1151@177:0> = (<br_f_1151@177:1> < 50)))
      |- P[<br_f_1151@177:2>](<br_f_1151@177:0>:bool,<br_f_1151@177:1>:int,
                              <br_f_1151@177:2>:int)
      
      P[<br_f_1151@171:2>](true:bool,(-1 + <f_1030@174:0>):int,<f_1030@174:1>:int)|- P[<f_1030@174:1>](
      <f_1030@174:0>:int,<f_1030@174:1>:int)
      
      P[<f_1030@168:1>](<br_f_1151@171:1>:int,<br_f_1151@171:2>:int),
      ((<br_f_1151@171:1> < 100) && (<br_f_1151@171:0> = (<br_f_1151@171:1> < 50)))
      |- P[<br_f_1151@171:2>](<br_f_1151@171:0>:bool,<br_f_1151@171:1>:int,
                              <br_f_1151@171:2>:int)
      
       ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
    call trees:
      <main_1149@166>
        <f_1030@168>
          <br_f_1151@171>
            <f_1030@174>
              <br_f_1151@177>
                <f_1030@180>
                  <br_f_1151@183>
                    <f_1030@186>
                      <br_f_1151@189>
                        <f_1030@192>
                          <br_f_1151@195>
                            <f_1030@198>
                            </<f_1030@198:2>@201>
                          </<br_f_1151@195:3>@203>
                        </<f_1030@192:2>@205>
                      </<br_f_1151@189:3>@207>
                    </<f_1030@186:2>@209>
                  </<br_f_1151@183:3>@211>
                </<f_1030@180:2>@213>
              </<br_f_1151@177:3>@215>
            </<f_1030@174:2>@217>
          </<br_f_1151@171:3>@219>
        </<f_1030@168:2>@221>
        <f_1150@223>
          <fail_1153@226>
    inlined horn clauses:
      P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
      
      P[<<f_1030@168:2>@221:0>](0:int,50:int,100:int), <fail_1153@226:0>
      |- P[<fail_1153@226:0>](<fail_1153@226:0>:bool)
      
      P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int),
      P[<<f_1030@174:2>@217:0>]((1 + <f_1030@168:0>):int,<f_1030@168:1>:int,<<f_1030@168:2>@221:0>:int),
      (<f_1030@168:0> < 50)
      |- P[<<f_1030@168:2>@221:0>](<f_1030@168:0>:int,<f_1030@168:1>:int,
                                   <<f_1030@168:2>@221:0>:int)
      
      P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int),
      P[<<f_1030@180:2>@213:0>]((1 + <f_1030@174:0>):int,<f_1030@174:1>:int,<<f_1030@174:2>@217:0>:int),
      (<f_1030@174:0> < 50)
      |- P[<<f_1030@174:2>@217:0>](<f_1030@174:0>:int,<f_1030@174:1>:int,
                                   <<f_1030@174:2>@217:0>:int)
      
      P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int),
      P[<<f_1030@186:2>@209:0>]((1 + <f_1030@180:0>):int,<f_1030@180:1>:int,<<f_1030@180:2>@213:0>:int),
      (<f_1030@180:0> < 50)
      |- P[<<f_1030@180:2>@213:0>](<f_1030@180:0>:int,<f_1030@180:1>:int,
                                   <<f_1030@180:2>@213:0>:int)
      
      P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int),
      P[<<f_1030@192:2>@205:0>]((1 + <f_1030@186:0>):int,<f_1030@186:1>:int,<<f_1030@186:2>@209:0>:int),
      (<f_1030@186:0> < 50)
      |- P[<<f_1030@186:2>@209:0>](<f_1030@186:0>:int,<f_1030@186:1>:int,
                                   <<f_1030@186:2>@209:0>:int)
      
      P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int),
      P[<<f_1030@198:2>@201:0>]((1 + <f_1030@192:0>):int,<f_1030@192:1>:int,<<f_1030@192:2>@205:0>:int),
      (<f_1030@192:0> < 50)
      |- P[<<f_1030@192:2>@205:0>](<f_1030@192:0>:int,<f_1030@192:1>:int,
                                   <<f_1030@192:2>@205:0>:int)
      
      P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int),
      ((<f_1030@198:0> >= 100) && (<<f_1030@198:2>@201:0> = <f_1030@198:1>))
      |- P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,
                                   <<f_1030@198:2>@201:0>:int)
      
      P[<f_1030@192:1>]((-1 + <f_1030@198:0>):int,<f_1030@198:1>:int), (
      <f_1030@198:0> < 51) |- P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int)
      
      P[<f_1030@186:1>]((-1 + <f_1030@192:0>):int,<f_1030@192:1>:int), (
      <f_1030@192:0> < 51) |- P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int)
      
      P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int), (
      <f_1030@186:0> < 51) |- P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int)
      
      P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
      <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int)
      
      P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
      <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int)
      
       ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
    begin ParamSubstInfer.infer(211743)[3]
      
    end ParamSubstInfer.infer(211743)[3] (0.355945 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(211745)[3]
      
    end RefTypeInfer.elim_coeffs(211745)[3] (0.000000 sec.)
    begin GenHcSolver.solve(212210)[3]
      Horn clauses:
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
        
        P[<<f_1030@168:2>@221:0>](0:int,50:int,100:int), <fail_1153@226:0>
        |- P[<fail_1153@226:0>](<fail_1153@226:0>:bool)
        
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int),
        P[<<f_1030@174:2>@217:0>]((1 + <f_1030@168:0>):int,<f_1030@168:1>:int,<<f_1030@168:2>@221:0>:int),
        (<f_1030@168:0> < 50)
        |- P[<<f_1030@168:2>@221:0>](<f_1030@168:0>:int,<f_1030@168:1>:int,
                                     <<f_1030@168:2>@221:0>:int)
        
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int),
        P[<<f_1030@180:2>@213:0>]((1 + <f_1030@174:0>):int,<f_1030@174:1>:int,<<f_1030@174:2>@217:0>:int),
        (<f_1030@174:0> < 50)
        |- P[<<f_1030@174:2>@217:0>](<f_1030@174:0>:int,<f_1030@174:1>:int,
                                     <<f_1030@174:2>@217:0>:int)
        
        P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int),
        P[<<f_1030@186:2>@209:0>]((1 + <f_1030@180:0>):int,<f_1030@180:1>:int,<<f_1030@180:2>@213:0>:int),
        (<f_1030@180:0> < 50)
        |- P[<<f_1030@180:2>@213:0>](<f_1030@180:0>:int,<f_1030@180:1>:int,
                                     <<f_1030@180:2>@213:0>:int)
        
        P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int),
        P[<<f_1030@192:2>@205:0>]((1 + <f_1030@186:0>):int,<f_1030@186:1>:int,<<f_1030@186:2>@209:0>:int),
        (<f_1030@186:0> < 50)
        |- P[<<f_1030@186:2>@209:0>](<f_1030@186:0>:int,<f_1030@186:1>:int,
                                     <<f_1030@186:2>@209:0>:int)
        
        P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int),
        P[<<f_1030@198:2>@201:0>]((1 + <f_1030@192:0>):int,<f_1030@192:1>:int,<<f_1030@192:2>@205:0>:int),
        (<f_1030@192:0> < 50)
        |- P[<<f_1030@192:2>@205:0>](<f_1030@192:0>:int,<f_1030@192:1>:int,
                                     <<f_1030@192:2>@205:0>:int)
        
        P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int),
        ((<f_1030@198:0> >= 100) && (<<f_1030@198:2>@201:0> = <f_1030@198:1>))
        |- P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,
                                     <<f_1030@198:2>@201:0>:int)
        
        P[<f_1030@192:1>]((-1 + <f_1030@198:0>):int,<f_1030@198:1>:int), (
        <f_1030@198:0> < 51) |- P[<f_1030@198:1>](<f_1030@198:0>:int,
                                                  <f_1030@198:1>:int)
        
        P[<f_1030@186:1>]((-1 + <f_1030@192:0>):int,<f_1030@192:1>:int), (
        <f_1030@192:0> < 51) |- P[<f_1030@192:1>](<f_1030@192:0>:int,
                                                  <f_1030@192:1>:int)
        
        P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int), (
        <f_1030@186:0> < 51) |- P[<f_1030@186:1>](<f_1030@186:0>:int,
                                                  <f_1030@186:1>:int)
        
        P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
        <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,
                                                  <f_1030@180:1>:int)
        
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
        <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                  <f_1030@174:1>:int)
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = ((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
        P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int) = ((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
        P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int) = ((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
        P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int) = ((<f_1030@192:0> = 4) && (<f_1030@192:1> = 50))
        P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int) = ((<f_1030@198:0> = 5) && (<f_1030@198:1> = 50))
        P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
        P[<<f_1030@192:2>@205:0>](<f_1030@192:0>:int,<f_1030@192:1>:int,<<f_1030@192:2>@205:0>:int) = false
        P[<<f_1030@186:2>@209:0>](<f_1030@186:0>:int,<f_1030@186:1>:int,<<f_1030@186:2>@209:0>:int) = false
        P[<<f_1030@180:2>@213:0>](<f_1030@180:0>:int,<f_1030@180:1>:int,<<f_1030@180:2>@213:0>:int) = false
        P[<<f_1030@174:2>@217:0>](<f_1030@174:0>:int,<f_1030@174:1>:int,<<f_1030@174:2>@217:0>:int) = false
        P[<<f_1030@168:2>@221:0>](<f_1030@168:0>:int,<f_1030@168:1>:int,<<f_1030@168:2>@221:0>:int) = false
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool) = false
      upper bounds:
        P[<<f_1030@168:2>@221:0>](var762:int,var763:int,var764:int) = true
        P[<<f_1030@174:2>@217:0>](var756:int,var757:int,var758:int) = true
        P[<<f_1030@180:2>@213:0>](var750:int,var751:int,var752:int) = true
        P[<<f_1030@186:2>@209:0>](var744:int,var745:int,var746:int) = true
        P[<<f_1030@192:2>@205:0>](var738:int,var739:int,var740:int) = true
        P[<<f_1030@198:2>@201:0>](var732:int,var733:int,var734:int) = true
      begin GenHcSolver.classify_pids(225079)[4]
        output:
          [<<f_1030@198:2>@201:0>;<<f_1030@192:2>@205:0>;<<f_1030@186:2>@209:0>;<<f_1030@180:2>@213:0>;<<f_1030@174:2>@217:0>;<<f_1030@168:2>@221:0>]
      end GenHcSolver.classify_pids(225079)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(225142)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(225143)[5]
          begin InterpProver.interpolate_fresh(225144)[6]
            begin InterpProver.interpolate_log(225145)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(225146)[8]
                begin InterpProver.interpolate_simplify(225147)[9]
                  begin InterpProver.interpolate_quick(225160)[10]
                    
                  end InterpProver.interpolate_quick(225160)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(225164)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(225164)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(225147)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(225146)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(225145)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(225144)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(225143)[5] (0.000000 sec.)
        output:
          P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
          P[<<f_1030@192:2>@205:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
          P[<<f_1030@186:2>@209:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
          P[<<f_1030@180:2>@213:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
          P[<<f_1030@174:2>@217:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
          P[<<f_1030@168:2>@221:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
      end ApronInterface.convex_hull_interpolate(225142)[4] (0.000999 sec.)
      Horn clauses:
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
        
        P[<f_1030@198:1>](<f_1030@198:0>:int,<<f_1030@198:2>@201:0>:int), (<f_1030@198:0> >= 100) |- bot
        
        P[<f_1030@192:1>]((-1 + <f_1030@198:0>):int,<f_1030@198:1>:int), (
        <f_1030@198:0> < 51) |- P[<f_1030@198:1>](<f_1030@198:0>:int,
                                                  <f_1030@198:1>:int)
        
        P[<f_1030@186:1>]((-1 + <f_1030@192:0>):int,<f_1030@192:1>:int), (
        <f_1030@192:0> < 51) |- P[<f_1030@192:1>](<f_1030@192:0>:int,
                                                  <f_1030@192:1>:int)
        
        P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int), (
        <f_1030@186:0> < 51) |- P[<f_1030@186:1>](<f_1030@186:0>:int,
                                                  <f_1030@186:1>:int)
        
        P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
        <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,
                                                  <f_1030@180:1>:int)
        
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
        <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                  <f_1030@174:1>:int)
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        P[<fail_1153@226:0>](var772:bool) = false
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = ((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
        P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int) = ((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
        P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int) = ((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
        P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int) = ((<f_1030@192:0> = 4) && (<f_1030@192:1> = 50))
        P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int) = ((<f_1030@198:0> = 5) && (<f_1030@198:1> = 50))
      upper bounds:
        P[<f_1030@198:1>](var795:int,var796:int) = (var795 < 100)
        P[<f_1030@192:1>](var791:int,var792:int) = true
        P[<f_1030@186:1>](var787:int,var788:int) = true
        P[<f_1030@180:1>](var783:int,var784:int) = true
        P[<f_1030@174:1>](var779:int,var780:int) = true
        P[<f_1030@168:1>](var775:int,var776:int) = true
      begin GenHcSolver.classify_pids(239183)[4]
        output:
          [<f_1030@168:1>;<f_1030@174:1>;<f_1030@180:1>;<f_1030@186:1>;<f_1030@192:1>;<f_1030@198:1>]
      end GenHcSolver.classify_pids(239183)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(239291)[4]
        lb:(((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) ||
            (((<f_1030@168:0> = 1) && (<f_1030@168:1> = 50)) ||
             (((<f_1030@168:0> = 2) && (<f_1030@168:1> = 50)) ||
              (((<f_1030@168:0> = 3) && (<f_1030@168:1> = 50)) ||
               (((<f_1030@168:0> = 4) && (<f_1030@168:1> = 50)) || ((<f_1030@168:0> = 5) && (<f_1030@168:1> = 50)))))))
        nub:(not (<f_1030@168:0> < 100))
        lb':(((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) ||
             (((<f_1030@168:0> = 1) && (<f_1030@168:1> = 50)) ||
              (((<f_1030@168:0> = 2) && (<f_1030@168:1> = 50)) ||
               (((<f_1030@168:0> = 3) && (<f_1030@168:1> = 50)) ||
                (((<f_1030@168:0> = 4) && (<f_1030@168:1> = 50)) || ((<f_1030@168:0> = 5) && (<f_1030@168:1> = 50)))))))
        nub':(not (<f_1030@168:0> < 100))
        begin InterpProver.interpolate(239292)[5]
          begin InterpProver.interpolate_fresh(239293)[6]
            begin InterpProver.interpolate_log(239294)[7]
              input1: (((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) ||
                       (((<f_1030@168:0> = 1) && (<f_1030@168:1> = 50)) ||
                        (((<f_1030@168:0> = 2) && (<f_1030@168:1> = 50)) ||
                         (((<f_1030@168:0> = 3) && (<f_1030@168:1> = 50)) ||
                          (((<f_1030@168:0> = 4) && (<f_1030@168:1> = 50)) ||
                           ((<f_1030@168:0> = 5) && (<f_1030@168:1> = 50)))))))
              input2: (not (<f_1030@168:0> < 100))
              begin InterpProver.interpolate_check(239295)[8]
                begin InterpProver.interpolate_simplify(239296)[9]
                  begin InterpProver.interpolate_quick(239687)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(239696)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(239697)[12]
                        begin CsisatInterface.interpolate_csisat_log(239698)[13]
                          input1: (0 = v_sep_f_1030_sep_168_sep_0 | 1 = v_sep_f_1030_sep_168_sep_0 | 2 = v_sep_f_1030_sep_168_sep_0 | 3 = v_sep_f_1030_sep_168_sep_0 | 4 = v_sep_f_1030_sep_168_sep_0 | 5 = v_sep_f_1030_sep_168_sep_0)
                          input2: 100 <= v_sep_f_1030_sep_168_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(239699)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(239699)[14] (0.001999 sec.)
                          output: (0.02*v_sep_f_1030_sep_168_sep_0 <= 0 | 0.020202020202*v_sep_f_1030_sep_168_sep_0 <= 0.020202020202 | 0.0204081632653*v_sep_f_1030_sep_168_sep_0 <= 0.0408163265306 | 0.020618556701*v_sep_f_1030_sep_168_sep_0 <= 0.0618556701031 | 0.0208333333333*v_sep_f_1030_sep_168_sep_0 <= 0.0833333333333 | 0.0210526315789*v_sep_f_1030_sep_168_sep_0 <= 0.105263157895)
                          
                        end CsisatInterface.interpolate_csisat_log(239698)[13] (0.001999 sec.)
                        after simplification: (v_sep_f_1030_sep_168_sep_0 <= 0 | v_sep_f_1030_sep_168_sep_0 <= 2 | v_sep_f_1030_sep_168_sep_0 <= 4 | 2*v_sep_f_1030_sep_168_sep_0 <= 2 | 2*v_sep_f_1030_sep_168_sep_0 <= 6 | 2*v_sep_f_1030_sep_168_sep_0 <= 10)
                        after dnf conversion: ((v_sep_f_1030_sep_168_sep_0 <= 0) | (v_sep_f_1030_sep_168_sep_0 <= 2) | (v_sep_f_1030_sep_168_sep_0 <= 4) | (2*v_sep_f_1030_sep_168_sep_0 <= 2) | (2*v_sep_f_1030_sep_168_sep_0 <= 6) | (2*v_sep_f_1030_sep_168_sep_0 <= 10))
                        
                      end CsisatInterface.interpolate_csisat_post_process(239697)[12] (0.002999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(239696)[11] (0.003999 sec.)
                    
                  end InterpProver.interpolate_quick(239687)[10] (0.004999 sec.)
                  
                end InterpProver.interpolate_simplify(239296)[9] (0.006999 sec.)
                
              end InterpProver.interpolate_check(239295)[8] (0.006999 sec.)
              output: (<f_1030@168:0> <= 5)
            end InterpProver.interpolate_log(239294)[7] (0.007999 sec.)
            
          end InterpProver.interpolate_fresh(239293)[6] (0.007999 sec.)
          
        end InterpProver.interpolate(239292)[5] (0.007999 sec.)
        output:
          P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 5)
          P[<f_1030@174:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 5)
          P[<f_1030@180:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 5)
          P[<f_1030@186:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 5)
          P[<f_1030@192:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 5)
          P[<f_1030@198:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 5)
      end ApronInterface.convex_hull_interpolate(239291)[4] (0.007999 sec.)
      Horn clauses:
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
        
        P[<f_1030@192:1>]((-1 + <f_1030@198:0>):int,<f_1030@198:1>:int),
        ((<f_1030@198:0> < 51) && (<f_1030@198:0> > 5)) |- bot
        
        P[<f_1030@186:1>]((-1 + <f_1030@192:0>):int,<f_1030@192:1>:int), (
        <f_1030@192:0> < 51) |- P[<f_1030@192:1>](<f_1030@192:0>:int,
                                                  <f_1030@192:1>:int)
        
        P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int), (
        <f_1030@186:0> < 51) |- P[<f_1030@186:1>](<f_1030@186:0>:int,
                                                  <f_1030@186:1>:int)
        
        P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
        <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,
                                                  <f_1030@180:1>:int)
        
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
        <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                  <f_1030@174:1>:int)
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        P[<fail_1153@226:0>](var804:bool) = false
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = ((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
        P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int) = ((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
        P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int) = ((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
        P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int) = ((<f_1030@192:0> = 4) && (<f_1030@192:1> = 50))
      upper bounds:
        P[<f_1030@192:1>](var823:int,var824:int) = ((var823 <= 4) || (var823 >= 50))
        P[<f_1030@186:1>](var819:int,var820:int) = ((var819 <= 3) || (var819 >= 49))
        P[<f_1030@180:1>](var815:int,var816:int) = ((var815 <= 2) || (var815 >= 48))
        P[<f_1030@174:1>](var811:int,var812:int) = ((var811 <= 1) || (var811 >= 47))
        P[<f_1030@168:1>](var807:int,var808:int) = ((var807 <= 0) || (var807 >= 46))
      begin GenHcSolver.classify_pids(251736)[4]
        output:
          [<f_1030@192:1>],[<f_1030@186:1>],[<f_1030@180:1>],[<f_1030@174:1>],[
          <f_1030@168:1>]
      end GenHcSolver.classify_pids(251736)[4] (0.003999 sec.)
      lb:((<f_1030@192:0> = 4) && (<f_1030@192:1> = 50))
      nub:(not ((<f_1030@192:0> <= 4) || (<f_1030@192:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(252223)[4]
        lb:((<f_1030@192:0> = 4) && (<f_1030@192:1> = 50))
        nub:(not ((<f_1030@192:0> <= 4) || (<f_1030@192:0> >= 50)))
        lb':((<f_1030@192:0> = 4) && (<f_1030@192:1> = 50))
        nub':(not ((<f_1030@192:0> <= 4) || (<f_1030@192:0> >= 50)))
        begin InterpProver.interpolate(252224)[5]
          begin InterpProver.interpolate_fresh(252225)[6]
            begin InterpProver.interpolate_log(252226)[7]
              input1: ((<f_1030@192:0> = 4) && (<f_1030@192:1> = 50))
              input2: (not ((<f_1030@192:0> <= 4) || (<f_1030@192:0> >= 50)))
              begin InterpProver.interpolate_check(252227)[8]
                begin InterpProver.interpolate_simplify(252228)[9]
                  begin InterpProver.interpolate_quick(252295)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(252304)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(252305)[12]
                        begin CsisatInterface.interpolate_csisat_log(252306)[13]
                          input1: 4 = v_sep_f_1030_sep_192_sep_0
                          input2: (5 <= v_sep_f_1030_sep_192_sep_0 & (1 + v_sep_f_1030_sep_192_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(252307)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(252307)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_192_sep_0 <= 8
                          
                        end CsisatInterface.interpolate_csisat_log(252306)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_192_sep_0 <= 8
                        after dnf conversion: ((2*v_sep_f_1030_sep_192_sep_0 <= 8))
                        
                      end CsisatInterface.interpolate_csisat_post_process(252305)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(252304)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(252295)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(252228)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(252227)[8] (0.001000 sec.)
              output: (<f_1030@192:0> <= 4)
            end InterpProver.interpolate_log(252226)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(252225)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(252224)[5] (0.001000 sec.)
        output:
          P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int) = (<f_1030@192:0> <= 4)
      end ApronInterface.convex_hull_interpolate(252223)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
        
        P[<f_1030@186:1>]((-1 + <f_1030@192:0>):int,<f_1030@192:1>:int),
        ((<f_1030@192:0> < 51) && (<f_1030@192:0> > 4)) |- bot
        
        P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int), (
        <f_1030@186:0> < 51) |- P[<f_1030@186:1>](<f_1030@186:0>:int,
                                                  <f_1030@186:1>:int)
        
        P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
        <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,
                                                  <f_1030@180:1>:int)
        
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
        <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                  <f_1030@174:1>:int)
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        P[<fail_1153@226:0>](var826:bool) = false
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = ((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
        P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int) = ((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
        P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int) = ((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
      upper bounds:
        P[<f_1030@186:1>](var841:int,var842:int) = ((var841 <= 3) || (var841 >= 50))
        P[<f_1030@180:1>](var837:int,var838:int) = ((var837 <= 2) || (var837 >= 49))
        P[<f_1030@174:1>](var833:int,var834:int) = ((var833 <= 1) || (var833 >= 48))
        P[<f_1030@168:1>](var829:int,var830:int) = ((var829 <= 0) || (var829 >= 47))
      begin GenHcSolver.classify_pids(258193)[4]
        output:
          [<f_1030@186:1>],[<f_1030@180:1>],[<f_1030@174:1>],[<f_1030@168:1>]
      end GenHcSolver.classify_pids(258193)[4] (0.002000 sec.)
      lb:((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
      nub:(not ((<f_1030@186:0> <= 3) || (<f_1030@186:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(258484)[4]
        lb:((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
        nub:(not ((<f_1030@186:0> <= 3) || (<f_1030@186:0> >= 50)))
        lb':((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
        nub':(not ((<f_1030@186:0> <= 3) || (<f_1030@186:0> >= 50)))
        begin InterpProver.interpolate(258485)[5]
          begin InterpProver.interpolate_fresh(258486)[6]
            begin InterpProver.interpolate_log(258487)[7]
              input1: ((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
              input2: (not ((<f_1030@186:0> <= 3) || (<f_1030@186:0> >= 50)))
              begin InterpProver.interpolate_check(258488)[8]
                begin InterpProver.interpolate_simplify(258489)[9]
                  begin InterpProver.interpolate_quick(258556)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(258565)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(258566)[12]
                        begin CsisatInterface.interpolate_csisat_log(258567)[13]
                          input1: 3 = v_sep_f_1030_sep_186_sep_0
                          input2: (4 <= v_sep_f_1030_sep_186_sep_0 & (1 + v_sep_f_1030_sep_186_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(258568)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(258568)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_186_sep_0 <= 6
                          
                        end CsisatInterface.interpolate_csisat_log(258567)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_186_sep_0 <= 6
                        after dnf conversion: ((2*v_sep_f_1030_sep_186_sep_0 <= 6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(258566)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(258565)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(258556)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(258489)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(258488)[8] (0.001999 sec.)
              output: (<f_1030@186:0> <= 3)
            end InterpProver.interpolate_log(258487)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(258486)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(258485)[5] (0.001999 sec.)
        output:
          P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int) = (<f_1030@186:0> <= 3)
      end ApronInterface.convex_hull_interpolate(258484)[4] (0.001999 sec.)
      Horn clauses:
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
        
        P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int),
        ((<f_1030@186:0> < 51) && (<f_1030@186:0> > 3)) |- bot
        
        P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
        <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,
                                                  <f_1030@180:1>:int)
        
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
        <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                  <f_1030@174:1>:int)
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        P[<fail_1153@226:0>](var844:bool) = false
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = ((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
        P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int) = ((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
      upper bounds:
        P[<f_1030@180:1>](var855:int,var856:int) = ((var855 <= 2) || (var855 >= 50))
        P[<f_1030@174:1>](var851:int,var852:int) = ((var851 <= 1) || (var851 >= 49))
        P[<f_1030@168:1>](var847:int,var848:int) = ((var847 <= 0) || (var847 >= 48))
      begin GenHcSolver.classify_pids(262592)[4]
        output:
          [<f_1030@180:1>],[<f_1030@174:1>],[<f_1030@168:1>]
      end GenHcSolver.classify_pids(262592)[4] (0.000000 sec.)
      lb:((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
      nub:(not ((<f_1030@180:0> <= 2) || (<f_1030@180:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(262737)[4]
        lb:((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
        nub:(not ((<f_1030@180:0> <= 2) || (<f_1030@180:0> >= 50)))
        lb':((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
        nub':(not ((<f_1030@180:0> <= 2) || (<f_1030@180:0> >= 50)))
        begin InterpProver.interpolate(262738)[5]
          begin InterpProver.interpolate_fresh(262739)[6]
            begin InterpProver.interpolate_log(262740)[7]
              input1: ((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
              input2: (not ((<f_1030@180:0> <= 2) || (<f_1030@180:0> >= 50)))
              begin InterpProver.interpolate_check(262741)[8]
                begin InterpProver.interpolate_simplify(262742)[9]
                  begin InterpProver.interpolate_quick(262809)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(262818)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(262819)[12]
                        begin CsisatInterface.interpolate_csisat_log(262820)[13]
                          input1: 2 = v_sep_f_1030_sep_180_sep_0
                          input2: (3 <= v_sep_f_1030_sep_180_sep_0 & (1 + v_sep_f_1030_sep_180_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(262821)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(262821)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_180_sep_0 <= 4
                          
                        end CsisatInterface.interpolate_csisat_log(262820)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_180_sep_0 <= 4
                        after dnf conversion: ((2*v_sep_f_1030_sep_180_sep_0 <= 4))
                        
                      end CsisatInterface.interpolate_csisat_post_process(262819)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(262818)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(262809)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(262742)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(262741)[8] (0.000999 sec.)
              output: (<f_1030@180:0> <= 2)
            end InterpProver.interpolate_log(262740)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(262739)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(262738)[5] (0.000999 sec.)
        output:
          P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int) = (<f_1030@180:0> <= 2)
      end ApronInterface.convex_hull_interpolate(262737)[4] (0.000999 sec.)
      Horn clauses:
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
        
        P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int),
        ((<f_1030@180:0> < 51) && (<f_1030@180:0> > 2)) |- bot
        
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
        <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                  <f_1030@174:1>:int)
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        P[<fail_1153@226:0>](var858:bool) = false
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = ((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
      upper bounds:
        P[<f_1030@174:1>](var865:int,var866:int) = ((var865 <= 1) || (var865 >= 50))
        P[<f_1030@168:1>](var861:int,var862:int) = ((var861 <= 0) || (var861 >= 49))
      begin GenHcSolver.classify_pids(265288)[4]
        output:
          [<f_1030@174:1>],[<f_1030@168:1>]
      end GenHcSolver.classify_pids(265288)[4] (0.000000 sec.)
      lb:((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
      nub:(not ((<f_1030@174:0> <= 1) || (<f_1030@174:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(265337)[4]
        lb:((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
        nub:(not ((<f_1030@174:0> <= 1) || (<f_1030@174:0> >= 50)))
        lb':((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
        nub':(not ((<f_1030@174:0> <= 1) || (<f_1030@174:0> >= 50)))
        begin InterpProver.interpolate(265338)[5]
          begin InterpProver.interpolate_fresh(265339)[6]
            begin InterpProver.interpolate_log(265340)[7]
              input1: ((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
              input2: (not ((<f_1030@174:0> <= 1) || (<f_1030@174:0> >= 50)))
              begin InterpProver.interpolate_check(265341)[8]
                begin InterpProver.interpolate_simplify(265342)[9]
                  begin InterpProver.interpolate_quick(265409)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(265418)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(265419)[12]
                        begin CsisatInterface.interpolate_csisat_log(265420)[13]
                          input1: 1 = v_sep_f_1030_sep_174_sep_0
                          input2: (2 <= v_sep_f_1030_sep_174_sep_0 & (1 + v_sep_f_1030_sep_174_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(265421)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(265421)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_174_sep_0 <= 2
                          
                        end CsisatInterface.interpolate_csisat_log(265420)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_174_sep_0 <= 2
                        after dnf conversion: ((2*v_sep_f_1030_sep_174_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(265419)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(265418)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(265409)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(265342)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(265341)[8] (0.002000 sec.)
              output: (<f_1030@174:0> <= 1)
            end InterpProver.interpolate_log(265340)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(265339)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(265338)[5] (0.002000 sec.)
        output:
          P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = (<f_1030@174:0> <= 1)
      end ApronInterface.convex_hull_interpolate(265337)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
        
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int),
        ((<f_1030@174:0> < 51) && (<f_1030@174:0> > 1)) |- bot
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        P[<fail_1153@226:0>](var868:bool) = false
      upper bounds:
        P[<fail_1153@226:0>](var871:bool) = true
      begin GenHcSolver.classify_pids(266286)[4]
        output:
          [<fail_1153@226:0>]
      end GenHcSolver.classify_pids(266286)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(266289)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(266290)[5]
          begin InterpProver.interpolate_fresh(266291)[6]
            begin InterpProver.interpolate_log(266292)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(266293)[8]
                begin InterpProver.interpolate_simplify(266294)[9]
                  begin InterpProver.interpolate_quick(266307)[10]
                    
                  end InterpProver.interpolate_quick(266307)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(266311)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(266311)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(266294)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(266293)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(266292)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(266291)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(266290)[5] (0.000000 sec.)
        output:
          P[<fail_1153@226:0>](var868:bool) = false
      end ApronInterface.convex_hull_interpolate(266289)[4] (0.000000 sec.)
      Horn clauses:
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int),
        ((<f_1030@174:0> < 51) && (<f_1030@174:0> > 1)) |- bot
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
      upper bounds:
        P[<f_1030@168:1>](var872:int,var873:int) = ((var872 <= 0) || (var872 >= 50))
      begin GenHcSolver.classify_pids(267318)[4]
        output:
          [<f_1030@168:1>]
      end GenHcSolver.classify_pids(267318)[4] (0.000000 sec.)
      lb:((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
      nub:(not ((<f_1030@168:0> <= 0) || (<f_1030@168:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(267321)[4]
        lb:((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        nub:(not ((<f_1030@168:0> <= 0) || (<f_1030@168:0> >= 50)))
        lb':((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        nub':(not ((<f_1030@168:0> <= 0) || (<f_1030@168:0> >= 50)))
        begin InterpProver.interpolate(267322)[5]
          begin InterpProver.interpolate_fresh(267323)[6]
            begin InterpProver.interpolate_log(267324)[7]
              input1: ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
              input2: (not ((<f_1030@168:0> <= 0) || (<f_1030@168:0> >= 50)))
              begin InterpProver.interpolate_check(267325)[8]
                begin InterpProver.interpolate_simplify(267326)[9]
                  begin InterpProver.interpolate_quick(267382)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(267391)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(267392)[12]
                        begin CsisatInterface.interpolate_csisat_log(267393)[13]
                          input1: 0 = v_sep_f_1030_sep_168_sep_0
                          input2: (1 <= v_sep_f_1030_sep_168_sep_0 & (1 + v_sep_f_1030_sep_168_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(267394)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(267394)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_168_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(267393)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_168_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_f_1030_sep_168_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(267392)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(267391)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(267382)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(267326)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(267325)[8] (0.002000 sec.)
              output: (<f_1030@168:0> <= 0)
            end InterpProver.interpolate_log(267324)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(267323)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(267322)[5] (0.002000 sec.)
        output:
          P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 0)
      end ApronInterface.convex_hull_interpolate(267321)[4] (0.002000 sec.)
      begin HcSolver.check_validity(267550)[4]
        input:
          P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
          
          P[<<f_1030@168:2>@221:0>](0:int,50:int,100:int), <fail_1153@226:0>
          |- P[<fail_1153@226:0>](<fail_1153@226:0>:bool)
          
          P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int),
          P[<<f_1030@174:2>@217:0>]((1 + <f_1030@168:0>):int,<f_1030@168:1>:int,<<f_1030@168:2>@221:0>:int),
          (<f_1030@168:0> < 50)
          |- P[<<f_1030@168:2>@221:0>](<f_1030@168:0>:int,<f_1030@168:1>:int,
                                       <<f_1030@168:2>@221:0>:int)
          
          P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int),
          P[<<f_1030@180:2>@213:0>]((1 + <f_1030@174:0>):int,<f_1030@174:1>:int,<<f_1030@174:2>@217:0>:int),
          (<f_1030@174:0> < 50)
          |- P[<<f_1030@174:2>@217:0>](<f_1030@174:0>:int,<f_1030@174:1>:int,
                                       <<f_1030@174:2>@217:0>:int)
          
          P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int),
          P[<<f_1030@186:2>@209:0>]((1 + <f_1030@180:0>):int,<f_1030@180:1>:int,<<f_1030@180:2>@213:0>:int),
          (<f_1030@180:0> < 50)
          |- P[<<f_1030@180:2>@213:0>](<f_1030@180:0>:int,<f_1030@180:1>:int,
                                       <<f_1030@180:2>@213:0>:int)
          
          P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int),
          P[<<f_1030@192:2>@205:0>]((1 + <f_1030@186:0>):int,<f_1030@186:1>:int,<<f_1030@186:2>@209:0>:int),
          (<f_1030@186:0> < 50)
          |- P[<<f_1030@186:2>@209:0>](<f_1030@186:0>:int,<f_1030@186:1>:int,
                                       <<f_1030@186:2>@209:0>:int)
          
          P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int),
          P[<<f_1030@198:2>@201:0>]((1 + <f_1030@192:0>):int,<f_1030@192:1>:int,<<f_1030@192:2>@205:0>:int),
          (<f_1030@192:0> < 50)
          |- P[<<f_1030@192:2>@205:0>](<f_1030@192:0>:int,<f_1030@192:1>:int,
                                       <<f_1030@192:2>@205:0>:int)
          
          P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int),
          ((<f_1030@198:0> >= 100) && (<<f_1030@198:2>@201:0> = <f_1030@198:1>))
          |- P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,
                                       <<f_1030@198:2>@201:0>:int)
          
          P[<f_1030@192:1>]((-1 + <f_1030@198:0>):int,<f_1030@198:1>:int), (
          <f_1030@198:0> < 51) |- P[<f_1030@198:1>](<f_1030@198:0>:int,
                                                    <f_1030@198:1>:int)
          
          P[<f_1030@186:1>]((-1 + <f_1030@192:0>):int,<f_1030@192:1>:int), (
          <f_1030@192:0> < 51) |- P[<f_1030@192:1>](<f_1030@192:0>:int,
                                                    <f_1030@192:1>:int)
          
          P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int), (
          <f_1030@186:0> < 51) |- P[<f_1030@186:1>](<f_1030@186:0>:int,
                                                    <f_1030@186:1>:int)
          
          P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
          <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,
                                                    <f_1030@180:1>:int)
          
          P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
          <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                    <f_1030@174:1>:int)
          
           ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(267550)[4] (0.004999 sec.)
      solution:
        P[<fail_1153@226:0>](var868:bool) = false
        P[<<f_1030@168:2>@221:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
        P[<<f_1030@174:2>@217:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
        P[<<f_1030@180:2>@213:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
        P[<<f_1030@186:2>@209:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
        P[<<f_1030@192:2>@205:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
        P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
        P[<f_1030@198:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 5)
        P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int) = (<f_1030@192:0> <= 4)
        P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int) = (<f_1030@186:0> <= 3)
        P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int) = (<f_1030@180:0> <= 2)
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = (<f_1030@174:0> <= 1)
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 0)
    end GenHcSolver.solve(212210)[3] (0.246963 sec.)
    begin GenHcSolver.solve(268377)[3]
      Horn clauses:
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
        
        P[<<f_1030@168:2>@221:0>](0:int,50:int,100:int), <fail_1153@226:0>
        |- P[<fail_1153@226:0>](<fail_1153@226:0>:bool)
        
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int),
        P[<<f_1030@174:2>@217:0>]((1 + <f_1030@168:0>):int,<f_1030@168:1>:int,<<f_1030@168:2>@221:0>:int),
        (<f_1030@168:0> < 50)
        |- P[<<f_1030@168:2>@221:0>](<f_1030@168:0>:int,<f_1030@168:1>:int,
                                     <<f_1030@168:2>@221:0>:int)
        
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int),
        P[<<f_1030@180:2>@213:0>]((1 + <f_1030@174:0>):int,<f_1030@174:1>:int,<<f_1030@174:2>@217:0>:int),
        (<f_1030@174:0> < 50)
        |- P[<<f_1030@174:2>@217:0>](<f_1030@174:0>:int,<f_1030@174:1>:int,
                                     <<f_1030@174:2>@217:0>:int)
        
        P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int),
        P[<<f_1030@186:2>@209:0>]((1 + <f_1030@180:0>):int,<f_1030@180:1>:int,<<f_1030@180:2>@213:0>:int),
        (<f_1030@180:0> < 50)
        |- P[<<f_1030@180:2>@213:0>](<f_1030@180:0>:int,<f_1030@180:1>:int,
                                     <<f_1030@180:2>@213:0>:int)
        
        P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int),
        P[<<f_1030@192:2>@205:0>]((1 + <f_1030@186:0>):int,<f_1030@186:1>:int,<<f_1030@186:2>@209:0>:int),
        (<f_1030@186:0> < 50)
        |- P[<<f_1030@186:2>@209:0>](<f_1030@186:0>:int,<f_1030@186:1>:int,
                                     <<f_1030@186:2>@209:0>:int)
        
        P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int),
        P[<<f_1030@198:2>@201:0>]((1 + <f_1030@192:0>):int,<f_1030@192:1>:int,<<f_1030@192:2>@205:0>:int),
        (<f_1030@192:0> < 50)
        |- P[<<f_1030@192:2>@205:0>](<f_1030@192:0>:int,<f_1030@192:1>:int,
                                     <<f_1030@192:2>@205:0>:int)
        
        P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int),
        ((<f_1030@198:0> >= 100) && (<<f_1030@198:2>@201:0> = <f_1030@198:1>))
        |- P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,
                                     <<f_1030@198:2>@201:0>:int)
        
        P[<f_1030@192:1>]((-1 + <f_1030@198:0>):int,<f_1030@198:1>:int), (
        <f_1030@198:0> < 51) |- P[<f_1030@198:1>](<f_1030@198:0>:int,
                                                  <f_1030@198:1>:int)
        
        P[<f_1030@186:1>]((-1 + <f_1030@192:0>):int,<f_1030@192:1>:int), (
        <f_1030@192:0> < 51) |- P[<f_1030@192:1>](<f_1030@192:0>:int,
                                                  <f_1030@192:1>:int)
        
        P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int), (
        <f_1030@186:0> < 51) |- P[<f_1030@186:1>](<f_1030@186:0>:int,
                                                  <f_1030@186:1>:int)
        
        P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
        <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,
                                                  <f_1030@180:1>:int)
        
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
        <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                  <f_1030@174:1>:int)
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = ((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
        P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int) = ((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
        P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int) = ((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
        P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int) = ((<f_1030@192:0> = 4) && (<f_1030@192:1> = 50))
        P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int) = ((<f_1030@198:0> = 5) && (<f_1030@198:1> = 50))
        P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
        P[<<f_1030@192:2>@205:0>](<f_1030@192:0>:int,<f_1030@192:1>:int,<<f_1030@192:2>@205:0>:int) = false
        P[<<f_1030@186:2>@209:0>](<f_1030@186:0>:int,<f_1030@186:1>:int,<<f_1030@186:2>@209:0>:int) = false
        P[<<f_1030@180:2>@213:0>](<f_1030@180:0>:int,<f_1030@180:1>:int,<<f_1030@180:2>@213:0>:int) = false
        P[<<f_1030@174:2>@217:0>](<f_1030@174:0>:int,<f_1030@174:1>:int,<<f_1030@174:2>@217:0>:int) = false
        P[<<f_1030@168:2>@221:0>](<f_1030@168:0>:int,<f_1030@168:1>:int,<<f_1030@168:2>@221:0>:int) = false
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool) = false
      upper bounds:
        P[<<f_1030@168:2>@221:0>](var907:int,var908:int,var909:int) = true
        P[<<f_1030@174:2>@217:0>](var901:int,var902:int,var903:int) = true
        P[<<f_1030@180:2>@213:0>](var895:int,var896:int,var897:int) = true
        P[<<f_1030@186:2>@209:0>](var889:int,var890:int,var891:int) = true
        P[<<f_1030@192:2>@205:0>](var883:int,var884:int,var885:int) = true
        P[<<f_1030@198:2>@201:0>](var877:int,var878:int,var879:int) = true
      begin GenHcSolver.classify_pids(281246)[4]
        output:
          [<<f_1030@198:2>@201:0>;<<f_1030@192:2>@205:0>;<<f_1030@186:2>@209:0>;<<f_1030@180:2>@213:0>;<<f_1030@174:2>@217:0>;<<f_1030@168:2>@221:0>]
      end GenHcSolver.classify_pids(281246)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(281309)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(281312)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(281312)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(281317)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(281317)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(281320)[5]
          begin InterpProver.interpolate_fresh(281321)[6]
            begin InterpProver.interpolate_log(281322)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(281323)[8]
                begin InterpProver.interpolate_simplify(281324)[9]
                  begin InterpProver.interpolate_quick(281339)[10]
                    
                  end InterpProver.interpolate_quick(281339)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(281343)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(281343)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(281324)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(281323)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(281322)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(281321)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(281320)[5] (0.001000 sec.)
        output:
          P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
          P[<<f_1030@192:2>@205:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
          P[<<f_1030@186:2>@209:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
          P[<<f_1030@180:2>@213:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
          P[<<f_1030@174:2>@217:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
          P[<<f_1030@168:2>@221:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
      end ApronInterface.convex_hull_interpolate(281309)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
        
        P[<f_1030@198:1>](<f_1030@198:0>:int,<<f_1030@198:2>@201:0>:int), (<f_1030@198:0> >= 100) |- bot
        
        P[<f_1030@192:1>]((-1 + <f_1030@198:0>):int,<f_1030@198:1>:int), (
        <f_1030@198:0> < 51) |- P[<f_1030@198:1>](<f_1030@198:0>:int,
                                                  <f_1030@198:1>:int)
        
        P[<f_1030@186:1>]((-1 + <f_1030@192:0>):int,<f_1030@192:1>:int), (
        <f_1030@192:0> < 51) |- P[<f_1030@192:1>](<f_1030@192:0>:int,
                                                  <f_1030@192:1>:int)
        
        P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int), (
        <f_1030@186:0> < 51) |- P[<f_1030@186:1>](<f_1030@186:0>:int,
                                                  <f_1030@186:1>:int)
        
        P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
        <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,
                                                  <f_1030@180:1>:int)
        
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
        <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                  <f_1030@174:1>:int)
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        P[<fail_1153@226:0>](var917:bool) = false
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = ((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
        P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int) = ((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
        P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int) = ((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
        P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int) = ((<f_1030@192:0> = 4) && (<f_1030@192:1> = 50))
        P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int) = ((<f_1030@198:0> = 5) && (<f_1030@198:1> = 50))
      upper bounds:
        P[<f_1030@198:1>](var940:int,var941:int) = (var940 < 100)
        P[<f_1030@192:1>](var936:int,var937:int) = true
        P[<f_1030@186:1>](var932:int,var933:int) = true
        P[<f_1030@180:1>](var928:int,var929:int) = true
        P[<f_1030@174:1>](var924:int,var925:int) = true
        P[<f_1030@168:1>](var920:int,var921:int) = true
      begin GenHcSolver.classify_pids(295369)[4]
        output:
          [<f_1030@168:1>;<f_1030@174:1>;<f_1030@180:1>;<f_1030@186:1>;<f_1030@192:1>;<f_1030@198:1>]
      end GenHcSolver.classify_pids(295369)[4] (0.002000 sec.)
      begin ApronInterface.convex_hull_interpolate(295477)[4]
        lb:(((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) ||
            (((<f_1030@168:0> = 1) && (<f_1030@168:1> = 50)) ||
             (((<f_1030@168:0> = 2) && (<f_1030@168:1> = 50)) ||
              (((<f_1030@168:0> = 3) && (<f_1030@168:1> = 50)) ||
               (((<f_1030@168:0> = 4) && (<f_1030@168:1> = 50)) || ((<f_1030@168:0> = 5) && (<f_1030@168:1> = 50)))))))
        nub:(not (<f_1030@168:0> < 100))
        begin ExtFormula.Formula.case_analysis_boolean(295687)[5]
          ts: ((<f_1030@168:1> = 50) &&
               ((<f_1030@168:0> = 0) ||
                ((<f_1030@168:0> = 4) ||
                 ((<f_1030@168:0> = 3) || ((<f_1030@168:0> = 2) || ((<f_1030@168:0> = 1) || (<f_1030@168:0> = 5)))))))
          
        end ExtFormula.Formula.case_analysis_boolean(295687)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(295717)[5]
          ts: (<f_1030@168:0> >= 100)
          
        end ExtFormula.Formula.case_analysis_boolean(295717)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@168:1>) = 0) && (((5 + (-1 * <f_1030@168:0>)) >= 0) && (<f_1030@168:0> >= 0)))
        nub':((-100 + <f_1030@168:0>) >= 0)
        begin InterpProver.interpolate(295722)[5]
          begin InterpProver.interpolate_fresh(295723)[6]
            begin InterpProver.interpolate_log(295724)[7]
              input1: (((-50 + <f_1030@168:1>) = 0) && (((5 + (-1 * <f_1030@168:0>)) >= 0) && (<f_1030@168:0> >= 0)))
              input2: ((-100 + <f_1030@168:0>) >= 0)
              begin InterpProver.interpolate_check(295725)[8]
                begin InterpProver.interpolate_simplify(295726)[9]
                  begin InterpProver.interpolate_quick(295823)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(295832)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(295833)[12]
                        begin CsisatInterface.interpolate_csisat_log(295834)[13]
                          input1: (0 <= v_sep_f_1030_sep_168_sep_0 & v_sep_f_1030_sep_168_sep_0 <= 5)
                          input2: 100 <= v_sep_f_1030_sep_168_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(295835)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(295835)[14] (0.000000 sec.)
                          output: 0.0210526315789*v_sep_f_1030_sep_168_sep_0 <= 0.105263157895
                          
                        end CsisatInterface.interpolate_csisat_log(295834)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_168_sep_0 <= 10
                        after dnf conversion: ((2*v_sep_f_1030_sep_168_sep_0 <= 10))
                        
                      end CsisatInterface.interpolate_csisat_post_process(295833)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(295832)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(295823)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(295726)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(295725)[8] (0.001000 sec.)
              output: (<f_1030@168:0> <= 5)
            end InterpProver.interpolate_log(295724)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(295723)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(295722)[5] (0.001000 sec.)
        output:
          P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 5)
          P[<f_1030@174:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 5)
          P[<f_1030@180:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 5)
          P[<f_1030@186:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 5)
          P[<f_1030@192:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 5)
          P[<f_1030@198:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 5)
      end ApronInterface.convex_hull_interpolate(295477)[4] (0.002999 sec.)
      Horn clauses:
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
        
        P[<f_1030@192:1>]((-1 + <f_1030@198:0>):int,<f_1030@198:1>:int),
        ((<f_1030@198:0> < 51) && (<f_1030@198:0> > 5)) |- bot
        
        P[<f_1030@186:1>]((-1 + <f_1030@192:0>):int,<f_1030@192:1>:int), (
        <f_1030@192:0> < 51) |- P[<f_1030@192:1>](<f_1030@192:0>:int,
                                                  <f_1030@192:1>:int)
        
        P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int), (
        <f_1030@186:0> < 51) |- P[<f_1030@186:1>](<f_1030@186:0>:int,
                                                  <f_1030@186:1>:int)
        
        P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
        <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,
                                                  <f_1030@180:1>:int)
        
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
        <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                  <f_1030@174:1>:int)
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        P[<fail_1153@226:0>](var949:bool) = false
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = ((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
        P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int) = ((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
        P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int) = ((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
        P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int) = ((<f_1030@192:0> = 4) && (<f_1030@192:1> = 50))
      upper bounds:
        P[<f_1030@192:1>](var968:int,var969:int) = ((var968 <= 4) || (var968 >= 50))
        P[<f_1030@186:1>](var964:int,var965:int) = ((var964 <= 3) || (var964 >= 49))
        P[<f_1030@180:1>](var960:int,var961:int) = ((var960 <= 2) || (var960 >= 48))
        P[<f_1030@174:1>](var956:int,var957:int) = ((var956 <= 1) || (var956 >= 47))
        P[<f_1030@168:1>](var952:int,var953:int) = ((var952 <= 0) || (var952 >= 46))
      begin GenHcSolver.classify_pids(307837)[4]
        output:
          [<f_1030@192:1>],[<f_1030@186:1>],[<f_1030@180:1>],[<f_1030@174:1>],[
          <f_1030@168:1>]
      end GenHcSolver.classify_pids(307837)[4] (0.003000 sec.)
      lb:((<f_1030@192:0> = 4) && (<f_1030@192:1> = 50))
      nub:(not ((<f_1030@192:0> <= 4) || (<f_1030@192:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(308324)[4]
        lb:((<f_1030@192:0> = 4) && (<f_1030@192:1> = 50))
        nub:(not ((<f_1030@192:0> <= 4) || (<f_1030@192:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(308336)[5]
          ts: ((<f_1030@192:0> = 4) && (<f_1030@192:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(308336)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(308360)[5]
          ts: ((<f_1030@192:0> < 50) && (<f_1030@192:0> > 4))
          
        end ExtFormula.Formula.case_analysis_boolean(308360)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@192:1>) = 0) && ((-4 + <f_1030@192:0>) = 0))
        nub':(((49 + (-1 * <f_1030@192:0>)) >= 0) && ((-5 + <f_1030@192:0>) >= 0))
        begin InterpProver.interpolate(308367)[5]
          begin InterpProver.interpolate_fresh(308368)[6]
            begin InterpProver.interpolate_log(308369)[7]
              input1: (((-50 + <f_1030@192:1>) = 0) && ((-4 + <f_1030@192:0>) = 0))
              input2: (((49 + (-1 * <f_1030@192:0>)) >= 0) && ((-5 + <f_1030@192:0>) >= 0))
              begin InterpProver.interpolate_check(308370)[8]
                begin InterpProver.interpolate_simplify(308371)[9]
                  begin InterpProver.interpolate_quick(308438)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(308447)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(308448)[12]
                        begin CsisatInterface.interpolate_csisat_log(308449)[13]
                          input1: 4 = v_sep_f_1030_sep_192_sep_0
                          input2: (5 <= v_sep_f_1030_sep_192_sep_0 & v_sep_f_1030_sep_192_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(308450)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(308450)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_192_sep_0 <= 8
                          
                        end CsisatInterface.interpolate_csisat_log(308449)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_192_sep_0 <= 8
                        after dnf conversion: ((2*v_sep_f_1030_sep_192_sep_0 <= 8))
                        
                      end CsisatInterface.interpolate_csisat_post_process(308448)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(308447)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(308438)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(308371)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(308370)[8] (0.001999 sec.)
              output: (<f_1030@192:0> <= 4)
            end InterpProver.interpolate_log(308369)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(308368)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(308367)[5] (0.001999 sec.)
        output:
          P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int) = (<f_1030@192:0> <= 4)
      end ApronInterface.convex_hull_interpolate(308324)[4] (0.001999 sec.)
      Horn clauses:
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
        
        P[<f_1030@186:1>]((-1 + <f_1030@192:0>):int,<f_1030@192:1>:int),
        ((<f_1030@192:0> < 51) && (<f_1030@192:0> > 4)) |- bot
        
        P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int), (
        <f_1030@186:0> < 51) |- P[<f_1030@186:1>](<f_1030@186:0>:int,
                                                  <f_1030@186:1>:int)
        
        P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
        <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,
                                                  <f_1030@180:1>:int)
        
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
        <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                  <f_1030@174:1>:int)
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        P[<fail_1153@226:0>](var971:bool) = false
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = ((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
        P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int) = ((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
        P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int) = ((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
      upper bounds:
        P[<f_1030@186:1>](var986:int,var987:int) = ((var986 <= 3) || (var986 >= 50))
        P[<f_1030@180:1>](var982:int,var983:int) = ((var982 <= 2) || (var982 >= 49))
        P[<f_1030@174:1>](var978:int,var979:int) = ((var978 <= 1) || (var978 >= 48))
        P[<f_1030@168:1>](var974:int,var975:int) = ((var974 <= 0) || (var974 >= 47))
      begin GenHcSolver.classify_pids(314336)[4]
        output:
          [<f_1030@186:1>],[<f_1030@180:1>],[<f_1030@174:1>],[<f_1030@168:1>]
      end GenHcSolver.classify_pids(314336)[4] (0.002000 sec.)
      lb:((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
      nub:(not ((<f_1030@186:0> <= 3) || (<f_1030@186:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(314627)[4]
        lb:((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
        nub:(not ((<f_1030@186:0> <= 3) || (<f_1030@186:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(314639)[5]
          ts: ((<f_1030@186:0> = 3) && (<f_1030@186:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(314639)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(314663)[5]
          ts: ((<f_1030@186:0> < 50) && (<f_1030@186:0> > 3))
          
        end ExtFormula.Formula.case_analysis_boolean(314663)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@186:1>) = 0) && ((-3 + <f_1030@186:0>) = 0))
        nub':(((49 + (-1 * <f_1030@186:0>)) >= 0) && ((-4 + <f_1030@186:0>) >= 0))
        begin InterpProver.interpolate(314670)[5]
          begin InterpProver.interpolate_fresh(314671)[6]
            begin InterpProver.interpolate_log(314672)[7]
              input1: (((-50 + <f_1030@186:1>) = 0) && ((-3 + <f_1030@186:0>) = 0))
              input2: (((49 + (-1 * <f_1030@186:0>)) >= 0) && ((-4 + <f_1030@186:0>) >= 0))
              begin InterpProver.interpolate_check(314673)[8]
                begin InterpProver.interpolate_simplify(314674)[9]
                  begin InterpProver.interpolate_quick(314741)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(314750)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(314751)[12]
                        begin CsisatInterface.interpolate_csisat_log(314752)[13]
                          input1: 3 = v_sep_f_1030_sep_186_sep_0
                          input2: (4 <= v_sep_f_1030_sep_186_sep_0 & v_sep_f_1030_sep_186_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(314753)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(314753)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_186_sep_0 <= 6
                          
                        end CsisatInterface.interpolate_csisat_log(314752)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_186_sep_0 <= 6
                        after dnf conversion: ((2*v_sep_f_1030_sep_186_sep_0 <= 6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(314751)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(314750)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(314741)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(314674)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(314673)[8] (0.001000 sec.)
              output: (<f_1030@186:0> <= 3)
            end InterpProver.interpolate_log(314672)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(314671)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(314670)[5] (0.002000 sec.)
        output:
          P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int) = (<f_1030@186:0> <= 3)
      end ApronInterface.convex_hull_interpolate(314627)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
        
        P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int),
        ((<f_1030@186:0> < 51) && (<f_1030@186:0> > 3)) |- bot
        
        P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
        <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,
                                                  <f_1030@180:1>:int)
        
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
        <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                  <f_1030@174:1>:int)
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        P[<fail_1153@226:0>](var989:bool) = false
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = ((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
        P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int) = ((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
      upper bounds:
        P[<f_1030@180:1>](var1000:int,var1001:int) = ((var1000 <= 2) || (var1000 >= 50))
        P[<f_1030@174:1>](var996:int,var997:int) = ((var996 <= 1) || (var996 >= 49))
        P[<f_1030@168:1>](var992:int,var993:int) = ((var992 <= 0) || (var992 >= 48))
      begin GenHcSolver.classify_pids(318777)[4]
        output:
          [<f_1030@180:1>],[<f_1030@174:1>],[<f_1030@168:1>]
      end GenHcSolver.classify_pids(318777)[4] (0.001000 sec.)
      lb:((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
      nub:(not ((<f_1030@180:0> <= 2) || (<f_1030@180:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(318922)[4]
        lb:((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
        nub:(not ((<f_1030@180:0> <= 2) || (<f_1030@180:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(318934)[5]
          ts: ((<f_1030@180:0> = 2) && (<f_1030@180:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(318934)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(318958)[5]
          ts: ((<f_1030@180:0> < 50) && (<f_1030@180:0> > 2))
          
        end ExtFormula.Formula.case_analysis_boolean(318958)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@180:1>) = 0) && ((-2 + <f_1030@180:0>) = 0))
        nub':(((49 + (-1 * <f_1030@180:0>)) >= 0) && ((-3 + <f_1030@180:0>) >= 0))
        begin InterpProver.interpolate(318965)[5]
          begin InterpProver.interpolate_fresh(318966)[6]
            begin InterpProver.interpolate_log(318967)[7]
              input1: (((-50 + <f_1030@180:1>) = 0) && ((-2 + <f_1030@180:0>) = 0))
              input2: (((49 + (-1 * <f_1030@180:0>)) >= 0) && ((-3 + <f_1030@180:0>) >= 0))
              begin InterpProver.interpolate_check(318968)[8]
                begin InterpProver.interpolate_simplify(318969)[9]
                  begin InterpProver.interpolate_quick(319036)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(319045)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(319046)[12]
                        begin CsisatInterface.interpolate_csisat_log(319047)[13]
                          input1: 2 = v_sep_f_1030_sep_180_sep_0
                          input2: (3 <= v_sep_f_1030_sep_180_sep_0 & v_sep_f_1030_sep_180_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(319048)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(319048)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_180_sep_0 <= 4
                          
                        end CsisatInterface.interpolate_csisat_log(319047)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_180_sep_0 <= 4
                        after dnf conversion: ((2*v_sep_f_1030_sep_180_sep_0 <= 4))
                        
                      end CsisatInterface.interpolate_csisat_post_process(319046)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(319045)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(319036)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(318969)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(318968)[8] (0.002000 sec.)
              output: (<f_1030@180:0> <= 2)
            end InterpProver.interpolate_log(318967)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(318966)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(318965)[5] (0.002000 sec.)
        output:
          P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int) = (<f_1030@180:0> <= 2)
      end ApronInterface.convex_hull_interpolate(318922)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
        
        P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int),
        ((<f_1030@180:0> < 51) && (<f_1030@180:0> > 2)) |- bot
        
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
        <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                  <f_1030@174:1>:int)
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        P[<fail_1153@226:0>](var1003:bool) = false
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = ((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
      upper bounds:
        P[<f_1030@174:1>](var1010:int,var1011:int) = ((var1010 <= 1) || (var1010 >= 50))
        P[<f_1030@168:1>](var1006:int,var1007:int) = ((var1006 <= 0) || (var1006 >= 49))
      begin GenHcSolver.classify_pids(321515)[4]
        output:
          [<f_1030@174:1>],[<f_1030@168:1>]
      end GenHcSolver.classify_pids(321515)[4] (0.001000 sec.)
      lb:((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
      nub:(not ((<f_1030@174:0> <= 1) || (<f_1030@174:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(321564)[4]
        lb:((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
        nub:(not ((<f_1030@174:0> <= 1) || (<f_1030@174:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(321576)[5]
          ts: ((<f_1030@174:0> = 1) && (<f_1030@174:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(321576)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(321600)[5]
          ts: ((<f_1030@174:0> < 50) && (<f_1030@174:0> > 1))
          
        end ExtFormula.Formula.case_analysis_boolean(321600)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@174:1>) = 0) && ((-1 + <f_1030@174:0>) = 0))
        nub':(((49 + (-1 * <f_1030@174:0>)) >= 0) && ((-2 + <f_1030@174:0>) >= 0))
        begin InterpProver.interpolate(321607)[5]
          begin InterpProver.interpolate_fresh(321608)[6]
            begin InterpProver.interpolate_log(321609)[7]
              input1: (((-50 + <f_1030@174:1>) = 0) && ((-1 + <f_1030@174:0>) = 0))
              input2: (((49 + (-1 * <f_1030@174:0>)) >= 0) && ((-2 + <f_1030@174:0>) >= 0))
              begin InterpProver.interpolate_check(321610)[8]
                begin InterpProver.interpolate_simplify(321611)[9]
                  begin InterpProver.interpolate_quick(321678)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(321687)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(321688)[12]
                        begin CsisatInterface.interpolate_csisat_log(321689)[13]
                          input1: 1 = v_sep_f_1030_sep_174_sep_0
                          input2: (2 <= v_sep_f_1030_sep_174_sep_0 & v_sep_f_1030_sep_174_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(321690)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(321690)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_174_sep_0 <= 2
                          
                        end CsisatInterface.interpolate_csisat_log(321689)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_174_sep_0 <= 2
                        after dnf conversion: ((2*v_sep_f_1030_sep_174_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(321688)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(321687)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(321678)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(321611)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(321610)[8] (0.001000 sec.)
              output: (<f_1030@174:0> <= 1)
            end InterpProver.interpolate_log(321609)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(321608)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(321607)[5] (0.001000 sec.)
        output:
          P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = (<f_1030@174:0> <= 1)
      end ApronInterface.convex_hull_interpolate(321564)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
        
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int),
        ((<f_1030@174:0> < 51) && (<f_1030@174:0> > 1)) |- bot
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        P[<fail_1153@226:0>](var1013:bool) = false
      upper bounds:
        P[<fail_1153@226:0>](var1016:bool) = true
      begin GenHcSolver.classify_pids(322555)[4]
        output:
          [<fail_1153@226:0>]
      end GenHcSolver.classify_pids(322555)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(322558)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(322561)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(322561)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(322566)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(322566)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(322569)[5]
          begin InterpProver.interpolate_fresh(322570)[6]
            begin InterpProver.interpolate_log(322571)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(322572)[8]
                begin InterpProver.interpolate_simplify(322573)[9]
                  begin InterpProver.interpolate_quick(322588)[10]
                    
                  end InterpProver.interpolate_quick(322588)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(322592)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(322592)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(322573)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(322572)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(322571)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(322570)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(322569)[5] (0.000000 sec.)
        output:
          P[<fail_1153@226:0>](var1013:bool) = false
      end ApronInterface.convex_hull_interpolate(322558)[4] (0.000000 sec.)
      Horn clauses:
        P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int),
        ((<f_1030@174:0> < 51) && (<f_1030@174:0> > 1)) |- bot
        
         ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
      lower bounds:
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
      upper bounds:
        P[<f_1030@168:1>](var1017:int,var1018:int) = ((var1017 <= 0) || (var1017 >= 50))
      begin GenHcSolver.classify_pids(323606)[4]
        output:
          [<f_1030@168:1>]
      end GenHcSolver.classify_pids(323606)[4] (0.000000 sec.)
      lb:((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
      nub:(not ((<f_1030@168:0> <= 0) || (<f_1030@168:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(323609)[4]
        lb:((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
        nub:(not ((<f_1030@168:0> <= 0) || (<f_1030@168:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(323619)[5]
          ts: ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(323619)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(323639)[5]
          ts: ((<f_1030@168:0> < 50) && (<f_1030@168:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(323639)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@168:1>) = 0) && (<f_1030@168:0> = 0))
        nub':(((49 + (-1 * <f_1030@168:0>)) >= 0) && ((-1 + <f_1030@168:0>) >= 0))
        begin InterpProver.interpolate(323645)[5]
          begin InterpProver.interpolate_fresh(323646)[6]
            begin InterpProver.interpolate_log(323647)[7]
              input1: (((-50 + <f_1030@168:1>) = 0) && (<f_1030@168:0> = 0))
              input2: (((49 + (-1 * <f_1030@168:0>)) >= 0) && ((-1 + <f_1030@168:0>) >= 0))
              begin InterpProver.interpolate_check(323648)[8]
                begin InterpProver.interpolate_simplify(323649)[9]
                  begin InterpProver.interpolate_quick(323711)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(323720)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(323721)[12]
                        begin CsisatInterface.interpolate_csisat_log(323722)[13]
                          input1: 0 = v_sep_f_1030_sep_168_sep_0
                          input2: (1 <= v_sep_f_1030_sep_168_sep_0 & v_sep_f_1030_sep_168_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(323723)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(323723)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_168_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(323722)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_168_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_f_1030_sep_168_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(323721)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(323720)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(323711)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(323649)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(323648)[8] (0.002000 sec.)
              output: (<f_1030@168:0> <= 0)
            end InterpProver.interpolate_log(323647)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(323646)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(323645)[5] (0.002000 sec.)
        output:
          P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 0)
      end ApronInterface.convex_hull_interpolate(323609)[4] (0.002000 sec.)
      begin HcSolver.check_validity(323881)[4]
        input:
          P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
          
          P[<<f_1030@168:2>@221:0>](0:int,50:int,100:int), <fail_1153@226:0>
          |- P[<fail_1153@226:0>](<fail_1153@226:0>:bool)
          
          P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int),
          P[<<f_1030@174:2>@217:0>]((1 + <f_1030@168:0>):int,<f_1030@168:1>:int,<<f_1030@168:2>@221:0>:int),
          (<f_1030@168:0> < 50)
          |- P[<<f_1030@168:2>@221:0>](<f_1030@168:0>:int,<f_1030@168:1>:int,
                                       <<f_1030@168:2>@221:0>:int)
          
          P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int),
          P[<<f_1030@180:2>@213:0>]((1 + <f_1030@174:0>):int,<f_1030@174:1>:int,<<f_1030@174:2>@217:0>:int),
          (<f_1030@174:0> < 50)
          |- P[<<f_1030@174:2>@217:0>](<f_1030@174:0>:int,<f_1030@174:1>:int,
                                       <<f_1030@174:2>@217:0>:int)
          
          P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int),
          P[<<f_1030@186:2>@209:0>]((1 + <f_1030@180:0>):int,<f_1030@180:1>:int,<<f_1030@180:2>@213:0>:int),
          (<f_1030@180:0> < 50)
          |- P[<<f_1030@180:2>@213:0>](<f_1030@180:0>:int,<f_1030@180:1>:int,
                                       <<f_1030@180:2>@213:0>:int)
          
          P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int),
          P[<<f_1030@192:2>@205:0>]((1 + <f_1030@186:0>):int,<f_1030@186:1>:int,<<f_1030@186:2>@209:0>:int),
          (<f_1030@186:0> < 50)
          |- P[<<f_1030@186:2>@209:0>](<f_1030@186:0>:int,<f_1030@186:1>:int,
                                       <<f_1030@186:2>@209:0>:int)
          
          P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int),
          P[<<f_1030@198:2>@201:0>]((1 + <f_1030@192:0>):int,<f_1030@192:1>:int,<<f_1030@192:2>@205:0>:int),
          (<f_1030@192:0> < 50)
          |- P[<<f_1030@192:2>@205:0>](<f_1030@192:0>:int,<f_1030@192:1>:int,
                                       <<f_1030@192:2>@205:0>:int)
          
          P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int),
          ((<f_1030@198:0> >= 100) && (<<f_1030@198:2>@201:0> = <f_1030@198:1>))
          |- P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,
                                       <<f_1030@198:2>@201:0>:int)
          
          P[<f_1030@192:1>]((-1 + <f_1030@198:0>):int,<f_1030@198:1>:int), (
          <f_1030@198:0> < 51) |- P[<f_1030@198:1>](<f_1030@198:0>:int,
                                                    <f_1030@198:1>:int)
          
          P[<f_1030@186:1>]((-1 + <f_1030@192:0>):int,<f_1030@192:1>:int), (
          <f_1030@192:0> < 51) |- P[<f_1030@192:1>](<f_1030@192:0>:int,
                                                    <f_1030@192:1>:int)
          
          P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int), (
          <f_1030@186:0> < 51) |- P[<f_1030@186:1>](<f_1030@186:0>:int,
                                                    <f_1030@186:1>:int)
          
          P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
          <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,
                                                    <f_1030@180:1>:int)
          
          P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
          <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                    <f_1030@174:1>:int)
          
           ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(323881)[4] (0.003999 sec.)
      solution:
        P[<fail_1153@226:0>](var1013:bool) = false
        P[<<f_1030@168:2>@221:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
        P[<<f_1030@174:2>@217:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
        P[<<f_1030@180:2>@213:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
        P[<<f_1030@186:2>@209:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
        P[<<f_1030@192:2>@205:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
        P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,<<f_1030@198:2>@201:0>:int) = false
        P[<f_1030@198:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 5)
        P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int) = (<f_1030@192:0> <= 4)
        P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int) = (<f_1030@186:0> <= 3)
        P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int) = (<f_1030@180:0> <= 2)
        P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int) = (<f_1030@174:0> <= 1)
        P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int) = (<f_1030@168:0> <= 0)
    end GenHcSolver.solve(268377)[3] (0.225965 sec.)
    begin YhornInterface.solve(324708)[3]
      begin HcSolver.solve_ub(324709)[4]
        encoded:
          P[<fail_1153@226:0>](<fail_1153@226:0>:int)|- bot
          
          P[<<f_1030@168:2>@221:0>](0:int,50:int,100:int), (<fail_1153@226:0> = 1)
          |- P[<fail_1153@226:0>](<fail_1153@226:0>:int)
          
          P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int),
          P[<<f_1030@174:2>@217:0>]((1 + <f_1030@168:0>):int,<f_1030@168:1>:int,<<f_1030@168:2>@221:0>:int),
          (<f_1030@168:0> < 50)
          |- P[<<f_1030@168:2>@221:0>](<f_1030@168:0>:int,<f_1030@168:1>:int,
                                       <<f_1030@168:2>@221:0>:int)
          
          P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int),
          P[<<f_1030@180:2>@213:0>]((1 + <f_1030@174:0>):int,<f_1030@174:1>:int,<<f_1030@174:2>@217:0>:int),
          (<f_1030@174:0> < 50)
          |- P[<<f_1030@174:2>@217:0>](<f_1030@174:0>:int,<f_1030@174:1>:int,
                                       <<f_1030@174:2>@217:0>:int)
          
          P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int),
          P[<<f_1030@186:2>@209:0>]((1 + <f_1030@180:0>):int,<f_1030@180:1>:int,<<f_1030@180:2>@213:0>:int),
          (<f_1030@180:0> < 50)
          |- P[<<f_1030@180:2>@213:0>](<f_1030@180:0>:int,<f_1030@180:1>:int,
                                       <<f_1030@180:2>@213:0>:int)
          
          P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int),
          P[<<f_1030@192:2>@205:0>]((1 + <f_1030@186:0>):int,<f_1030@186:1>:int,<<f_1030@186:2>@209:0>:int),
          (<f_1030@186:0> < 50)
          |- P[<<f_1030@186:2>@209:0>](<f_1030@186:0>:int,<f_1030@186:1>:int,
                                       <<f_1030@186:2>@209:0>:int)
          
          P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int),
          P[<<f_1030@198:2>@201:0>]((1 + <f_1030@192:0>):int,<f_1030@192:1>:int,<<f_1030@192:2>@205:0>:int),
          (<f_1030@192:0> < 50)
          |- P[<<f_1030@192:2>@205:0>](<f_1030@192:0>:int,<f_1030@192:1>:int,
                                       <<f_1030@192:2>@205:0>:int)
          
          P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int),
          ((<f_1030@198:0> >= 100) && (<<f_1030@198:2>@201:0> = <f_1030@198:1>))
          |- P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,
                                       <<f_1030@198:2>@201:0>:int)
          
          P[<f_1030@192:1>]((-1 + <f_1030@198:0>):int,<f_1030@198:1>:int), (
          <f_1030@198:0> < 51) |- P[<f_1030@198:1>](<f_1030@198:0>:int,
                                                    <f_1030@198:1>:int)
          
          P[<f_1030@186:1>]((-1 + <f_1030@192:0>):int,<f_1030@192:1>:int), (
          <f_1030@192:0> < 51) |- P[<f_1030@192:1>](<f_1030@192:0>:int,
                                                    <f_1030@192:1>:int)
          
          P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int), (
          <f_1030@186:0> < 51) |- P[<f_1030@186:1>](<f_1030@186:0>:int,
                                                    <f_1030@186:1>:int)
          
          P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
          <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,
                                                    <f_1030@180:1>:int)
          
          P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
          <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                    <f_1030@174:1>:int)
          
           ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
        input to Yhorn:
          P[<fail_1153@226:0>](<fail_1153@226:0>:int)|- bot
          
          P[<<f_1030@168:2>@221:0>](var1019:int,var1020:int,var1021:int),
          ((var1021 = 100) && ((var1020 = 50) && ((var1019 = 0) && (<fail_1153@226:0> = 1))))
          |- P[<fail_1153@226:0>](<fail_1153@226:0>:int)
          
          P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int),
          P[<<f_1030@174:2>@217:0>](var1022:int,<f_1030@168:1>:int,<<f_1030@168:2>@221:0>:int),
          ((var1022 = (1 + <f_1030@168:0>)) && (<f_1030@168:0> < 50))
          |- P[<<f_1030@168:2>@221:0>](<f_1030@168:0>:int,<f_1030@168:1>:int,
                                       <<f_1030@168:2>@221:0>:int)
          
          P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int),
          P[<<f_1030@180:2>@213:0>](var1023:int,<f_1030@174:1>:int,<<f_1030@174:2>@217:0>:int),
          ((var1023 = (1 + <f_1030@174:0>)) && (<f_1030@174:0> < 50))
          |- P[<<f_1030@174:2>@217:0>](<f_1030@174:0>:int,<f_1030@174:1>:int,
                                       <<f_1030@174:2>@217:0>:int)
          
          P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int),
          P[<<f_1030@186:2>@209:0>](var1024:int,<f_1030@180:1>:int,<<f_1030@180:2>@213:0>:int),
          ((var1024 = (1 + <f_1030@180:0>)) && (<f_1030@180:0> < 50))
          |- P[<<f_1030@180:2>@213:0>](<f_1030@180:0>:int,<f_1030@180:1>:int,
                                       <<f_1030@180:2>@213:0>:int)
          
          P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int),
          P[<<f_1030@192:2>@205:0>](var1025:int,<f_1030@186:1>:int,<<f_1030@186:2>@209:0>:int),
          ((var1025 = (1 + <f_1030@186:0>)) && (<f_1030@186:0> < 50))
          |- P[<<f_1030@186:2>@209:0>](<f_1030@186:0>:int,<f_1030@186:1>:int,
                                       <<f_1030@186:2>@209:0>:int)
          
          P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int),
          P[<<f_1030@198:2>@201:0>](var1026:int,<f_1030@192:1>:int,<<f_1030@192:2>@205:0>:int),
          ((var1026 = (1 + <f_1030@192:0>)) && (<f_1030@192:0> < 50))
          |- P[<<f_1030@192:2>@205:0>](<f_1030@192:0>:int,<f_1030@192:1>:int,
                                       <<f_1030@192:2>@205:0>:int)
          
          P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int),
          ((<<f_1030@198:2>@201:0> = <f_1030@198:1>) && (<f_1030@198:0> >= 100))
          |- P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,
                                       <<f_1030@198:2>@201:0>:int)
          
          P[<f_1030@192:1>](var1027:int,<f_1030@198:1>:int),
          (((1 + var1027) = <f_1030@198:0>) && (<f_1030@198:0> < 51))
          |- P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int)
          
          P[<f_1030@186:1>](var1028:int,<f_1030@192:1>:int),
          (((1 + var1028) = <f_1030@192:0>) && (<f_1030@192:0> < 51))
          |- P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int)
          
          P[<f_1030@180:1>](var1029:int,<f_1030@186:1>:int),
          (((1 + var1029) = <f_1030@186:0>) && (<f_1030@186:0> < 51))
          |- P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int)
          
          P[<f_1030@174:1>](var1030:int,<f_1030@180:1>:int),
          (((1 + var1030) = <f_1030@180:0>) && (<f_1030@180:0> < 51))
          |- P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int)
          
          P[<f_1030@168:1>](var1031:int,<f_1030@174:1>:int),
          (((1 + var1031) = <f_1030@174:0>) && (<f_1030@174:0> < 51))
          |- P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1153_sep_226_sep_0($1098)) -> 1=0.
(($1098-1=0) & ($1099=0) & ($1100-50=0) & ($1101-100=0)) & (v_sep_f_1030_sep_168_sep_2_sep_221_sep_0($1099,$1100,$1101)) -> v_sep_fail_1153_sep_226_sep_0($1098).
(($1102-50<0) & (-$1102+$1103-1=0)) & (v_sep_f_1030_sep_174_sep_2_sep_217_sep_0($1103,$1104,$1105)) & (v_sep_f_1030_sep_168_sep_1($1102,$1104)) -> v_sep_f_1030_sep_168_sep_2_sep_221_sep_0($1102,$1104,$1105).
(($1106-50<0) & (-$1106+$1107-1=0)) & (v_sep_f_1030_sep_180_sep_2_sep_213_sep_0($1107,$1108,$1109)) & (v_sep_f_1030_sep_174_sep_1($1106,$1108)) -> v_sep_f_1030_sep_174_sep_2_sep_217_sep_0($1106,$1108,$1109).
(($1110-50<0) & (-$1110+$1111-1=0)) & (v_sep_f_1030_sep_186_sep_2_sep_209_sep_0($1111,$1112,$1113)) & (v_sep_f_1030_sep_180_sep_1($1110,$1112)) -> v_sep_f_1030_sep_180_sep_2_sep_213_sep_0($1110,$1112,$1113).
(($1114-50<0) & (-$1114+$1115-1=0)) & (v_sep_f_1030_sep_192_sep_2_sep_205_sep_0($1115,$1116,$1117)) & (v_sep_f_1030_sep_186_sep_1($1114,$1116)) -> v_sep_f_1030_sep_186_sep_2_sep_209_sep_0($1114,$1116,$1117).
(($1118-50<0) & (-$1118+$1119-1=0)) & (v_sep_f_1030_sep_198_sep_2_sep_201_sep_0($1119,$1120,$1121)) & (v_sep_f_1030_sep_192_sep_1($1118,$1120)) -> v_sep_f_1030_sep_192_sep_2_sep_205_sep_0($1118,$1120,$1121).
(($1122-100>=0) & ($1123-$1124=0)) & (v_sep_f_1030_sep_198_sep_1($1122,$1124)) -> v_sep_f_1030_sep_198_sep_2_sep_201_sep_0($1122,$1124,$1123).
(($1122-51<0) & (-$1122+$1125+1=0)) & (v_sep_f_1030_sep_192_sep_1($1125,$1124)) -> v_sep_f_1030_sep_198_sep_1($1122,$1124).
(($1118-51<0) & (-$1118+$1126+1=0)) & (v_sep_f_1030_sep_186_sep_1($1126,$1120)) -> v_sep_f_1030_sep_192_sep_1($1118,$1120).
(($1114-51<0) & (-$1114+$1127+1=0)) & (v_sep_f_1030_sep_180_sep_1($1127,$1116)) -> v_sep_f_1030_sep_186_sep_1($1114,$1116).
(($1110-51<0) & (-$1110+$1128+1=0)) & (v_sep_f_1030_sep_174_sep_1($1128,$1112)) -> v_sep_f_1030_sep_180_sep_1($1110,$1112).
(($1106-51<0) & (-$1106+$1129+1=0)) & (v_sep_f_1030_sep_168_sep_1($1129,$1108)) -> v_sep_f_1030_sep_174_sep_1($1106,$1108).
($1102=0) & ($1104-50=0) -> v_sep_f_1030_sep_168_sep_1($1102,$1104).


v_sep_f_1030_sep_168_sep_1: X
v_sep_f_1030_sep_168_sep_2_sep_221_sep_0: X
v_sep_f_1030_sep_174_sep_1: X
v_sep_f_1030_sep_174_sep_2_sep_217_sep_0: X
v_sep_f_1030_sep_180_sep_1: X
v_sep_f_1030_sep_180_sep_2_sep_213_sep_0: X
v_sep_f_1030_sep_186_sep_1: X
v_sep_f_1030_sep_186_sep_2_sep_209_sep_0: X
v_sep_f_1030_sep_192_sep_1: X
v_sep_f_1030_sep_192_sep_2_sep_205_sep_0: X
v_sep_f_1030_sep_198_sep_1: X
v_sep_f_1030_sep_198_sep_2_sep_201_sep_0: X
v_sep_fail_1153_sep_226_sep_0: X
...................
v_sep_f_1030_sep_168_sep_1: X
v_sep_f_1030_sep_168_sep_2_sep_221_sep_0: X
v_sep_f_1030_sep_174_sep_1: X
v_sep_f_1030_sep_174_sep_2_sep_217_sep_0: X
v_sep_f_1030_sep_180_sep_1: X
v_sep_f_1030_sep_180_sep_2_sep_213_sep_0: X
v_sep_f_1030_sep_186_sep_1: X
v_sep_f_1030_sep_186_sep_2_sep_209_sep_0: X
v_sep_f_1030_sep_192_sep_1: X
v_sep_f_1030_sep_192_sep_2_sep_205_sep_0: X
v_sep_f_1030_sep_198_sep_1: X
v_sep_f_1030_sep_198_sep_2_sep_201_sep_0: X
v_sep_fail_1153_sep_226_sep_0: X
...
v_sep_f_1030_sep_168_sep_1: X
v_sep_f_1030_sep_168_sep_2_sep_221_sep_0: X
v_sep_f_1030_sep_174_sep_1: X
v_sep_f_1030_sep_174_sep_2_sep_217_sep_0: X
v_sep_f_1030_sep_180_sep_1: X
v_sep_f_1030_sep_180_sep_2_sep_213_sep_0: X
v_sep_f_1030_sep_186_sep_1: X
v_sep_f_1030_sep_186_sep_2_sep_209_sep_0: X
v_sep_f_1030_sep_192_sep_1: X
v_sep_f_1030_sep_192_sep_2_sep_205_sep_0: X
v_sep_f_1030_sep_198_sep_1: X
v_sep_f_1030_sep_198_sep_2_sep_201_sep_0: X
v_sep_fail_1153_sep_226_sep_0: X
.....
v_sep_f_1030_sep_168_sep_1: X
v_sep_f_1030_sep_168_sep_2_sep_221_sep_0: X
v_sep_f_1030_sep_174_sep_1: X
v_sep_f_1030_sep_174_sep_2_sep_217_sep_0: X
v_sep_f_1030_sep_180_sep_1: X
v_sep_f_1030_sep_180_sep_2_sep_213_sep_0: X
v_sep_f_1030_sep_186_sep_1: X
v_sep_f_1030_sep_186_sep_2_sep_209_sep_0: X
v_sep_f_1030_sep_192_sep_1: X
v_sep_f_1030_sep_192_sep_2_sep_205_sep_0: X
v_sep_f_1030_sep_198_sep_1: X
v_sep_f_1030_sep_198_sep_2_sep_201_sep_0: X
v_sep_fail_1153_sep_226_sep_0: X
.......
v_sep_f_1030_sep_168_sep_1: X
v_sep_f_1030_sep_168_sep_2_sep_221_sep_0: X
v_sep_f_1030_sep_174_sep_1: X
v_sep_f_1030_sep_174_sep_2_sep_217_sep_0: X
v_sep_f_1030_sep_180_sep_1: X
v_sep_f_1030_sep_180_sep_2_sep_213_sep_0: X
v_sep_f_1030_sep_186_sep_1: X
v_sep_f_1030_sep_186_sep_2_sep_209_sep_0: X
v_sep_f_1030_sep_192_sep_1: X
v_sep_f_1030_sep_192_sep_2_sep_205_sep_0: X
v_sep_f_1030_sep_198_sep_1: X
v_sep_f_1030_sep_198_sep_2_sep_201_sep_0: X
v_sep_fail_1153_sep_226_sep_0: X
..........
v_sep_f_1030_sep_168_sep_1: X
v_sep_f_1030_sep_168_sep_2_sep_221_sep_0: X
v_sep_f_1030_sep_174_sep_1: X
v_sep_f_1030_sep_174_sep_2_sep_217_sep_0: X
v_sep_f_1030_sep_180_sep_1: X
v_sep_f_1030_sep_180_sep_2_sep_213_sep_0: X
v_sep_f_1030_sep_186_sep_1: X
v_sep_f_1030_sep_186_sep_2_sep_209_sep_0: X
v_sep_f_1030_sep_192_sep_1: X
v_sep_f_1030_sep_192_sep_2_sep_205_sep_0: X
v_sep_f_1030_sep_198_sep_1: X
v_sep_f_1030_sep_198_sep_2_sep_201_sep_0: X
v_sep_fail_1153_sep_226_sep_0: X
.............
v_sep_f_1030_sep_168_sep_1: X
v_sep_f_1030_sep_168_sep_2_sep_221_sep_0: X
v_sep_f_1030_sep_174_sep_1: X
v_sep_f_1030_sep_174_sep_2_sep_217_sep_0: X
v_sep_f_1030_sep_180_sep_1: X
v_sep_f_1030_sep_180_sep_2_sep_213_sep_0: X
v_sep_f_1030_sep_186_sep_1: X
v_sep_f_1030_sep_186_sep_2_sep_209_sep_0: X
v_sep_f_1030_sep_192_sep_1: X
v_sep_f_1030_sep_192_sep_2_sep_205_sep_0: X
v_sep_f_1030_sep_198_sep_1: X
v_sep_f_1030_sep_198_sep_2_sep_201_sep_0: X
v_sep_fail_1153_sep_226_sep_0: X
................
v_sep_f_1030_sep_168_sep_1: X
v_sep_f_1030_sep_168_sep_2_sep_221_sep_0: X
v_sep_f_1030_sep_174_sep_1: X
v_sep_f_1030_sep_174_sep_2_sep_217_sep_0: X
v_sep_f_1030_sep_180_sep_1: X
v_sep_f_1030_sep_180_sep_2_sep_213_sep_0: X
v_sep_f_1030_sep_186_sep_1: X
v_sep_f_1030_sep_186_sep_2_sep_209_sep_0: X
v_sep_f_1030_sep_192_sep_1: X
v_sep_f_1030_sep_192_sep_2_sep_205_sep_0: X
v_sep_f_1030_sep_198_sep_1: X
v_sep_f_1030_sep_198_sep_2_sep_201_sep_0: X
v_sep_fail_1153_sep_226_sep_0: X
..................
v_sep_f_1030_sep_168_sep_1: X
v_sep_f_1030_sep_168_sep_2_sep_221_sep_0: X
v_sep_f_1030_sep_174_sep_1: X
v_sep_f_1030_sep_174_sep_2_sep_217_sep_0: X
v_sep_f_1030_sep_180_sep_1: X
v_sep_f_1030_sep_180_sep_2_sep_213_sep_0: X
v_sep_f_1030_sep_186_sep_1: X
v_sep_f_1030_sep_186_sep_2_sep_209_sep_0: X
v_sep_f_1030_sep_192_sep_1: X
v_sep_f_1030_sep_192_sep_2_sep_205_sep_0: X
v_sep_f_1030_sep_198_sep_1: X
v_sep_f_1030_sep_198_sep_2_sep_201_sep_0: X
v_sep_fail_1153_sep_226_sep_0: X
...................(0=0) & (v_sep_fail_1153_sep_226_sep_0($1098)) -> 1=0.
(($1098-1=0) & ($1099=0) & ($1100-50=0) & ($1101-100=0)) & (v_sep_f_1030_sep_168_sep_2_sep_221_sep_0($1099,$1100,$1101)) -> v_sep_fail_1153_sep_226_sep_0($1098).
(($1102-50<0) & (-$1102+$1103-1=0)) & (v_sep_f_1030_sep_174_sep_2_sep_217_sep_0($1103,$1104,$1105)) & (v_sep_f_1030_sep_168_sep_1($1102,$1104)) -> v_sep_f_1030_sep_168_sep_2_sep_221_sep_0($1102,$1104,$1105).
(($1106-50<0) & (-$1106+$1107-1=0)) & (v_sep_f_1030_sep_180_sep_2_sep_213_sep_0($1107,$1108,$1109)) & (v_sep_f_1030_sep_174_sep_1($1106,$1108)) -> v_sep_f_1030_sep_174_sep_2_sep_217_sep_0($1106,$1108,$1109).
(($1110-50<0) & (-$1110+$1111-1=0)) & (v_sep_f_1030_sep_186_sep_2_sep_209_sep_0($1111,$1112,$1113)) & (v_sep_f_1030_sep_180_sep_1($1110,$1112)) -> v_sep_f_1030_sep_180_sep_2_sep_213_sep_0($1110,$1112,$1113).
(($1114-50<0) & (-$1114+$1115-1=0)) & (v_sep_f_1030_sep_192_sep_2_sep_205_sep_0($1115,$1116,$1117)) & (v_sep_f_1030_sep_186_sep_1($1114,$1116)) -> v_sep_f_1030_sep_186_sep_2_sep_209_sep_0($1114,$1116,$1117).
(($1118-50<0) & (-$1118+$1119-1=0)) & (v_sep_f_1030_sep_198_sep_2_sep_201_sep_0($1119,$1120,$1121)) & (v_sep_f_1030_sep_192_sep_1($1118,$1120)) -> v_sep_f_1030_sep_192_sep_2_sep_205_sep_0($1118,$1120,$1121).
(($1122-100>=0) & ($1123-$1124=0)) & (v_sep_f_1030_sep_198_sep_1($1122,$1124)) -> v_sep_f_1030_sep_198_sep_2_sep_201_sep_0($1122,$1124,$1123).
(($1122-51<0) & (-$1122+$1125+1=0)) & (v_sep_f_1030_sep_192_sep_1($1125,$1124)) -> v_sep_f_1030_sep_198_sep_1($1122,$1124).
(($1118-51<0) & (-$1118+$1126+1=0)) & (v_sep_f_1030_sep_186_sep_1($1126,$1120)) -> v_sep_f_1030_sep_192_sep_1($1118,$1120).
(($1114-51<0) & (-$1114+$1127+1=0)) & (v_sep_f_1030_sep_180_sep_1($1127,$1116)) -> v_sep_f_1030_sep_186_sep_1($1114,$1116).
(($1110-51<0) & (-$1110+$1128+1=0)) & (v_sep_f_1030_sep_174_sep_1($1128,$1112)) -> v_sep_f_1030_sep_180_sep_1($1110,$1112).
(($1106-51<0) & (-$1106+$1129+1=0)) & (v_sep_f_1030_sep_168_sep_1($1129,$1108)) -> v_sep_f_1030_sep_174_sep_1($1106,$1108).
($1102=0) & ($1104-50=0) -> v_sep_f_1030_sep_168_sep_1($1102,$1104).

           ((<f_1030@168:1> = 50) && (<f_1030@168:0> = 0)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
        solution:
          P[<f_1030@168:1>]($1147:int,$1149:int) = ($1149 <= 50)
          P[<<f_1030@168:2>@221:0>]($1133:int,$1135:int,$1137:int) = ($1137 <= 50)
          P[<f_1030@174:1>]($1159:int,$1161:int) = ($1161 <= 50)
          P[<<f_1030@174:2>@217:0>]($1140:int,$1142:int,$1144:int) = ((6 * $1144) <= (250 + $1142))
          P[<f_1030@180:1>]($1171:int,$1173:int) = ($1173 <= 50)
          P[<<f_1030@180:2>@213:0>]($1152:int,$1154:int,$1156:int) = ((3 * $1156) <= (100 + $1154))
          P[<f_1030@186:1>]($1183:int,$1185:int) = ($1185 <= 50)
          P[<<f_1030@186:2>@209:0>]($1164:int,$1166:int,$1168:int) = ((2 * $1168) <= (50 + $1166))
          P[<f_1030@192:1>]($1195:int,$1197:int) = ($1197 <= 50)
          P[<<f_1030@192:2>@205:0>]($1176:int,$1178:int,$1180:int) = ((3 * $1180) <= (50 + (2 * $1178)))
          P[<f_1030@198:1>]($1200:int,$1202:int) = ($1202 <= 50)
          P[<<f_1030@198:2>@201:0>]($1188:int,$1190:int,$1192:int) = ((6 * $1192) <= (50 + (5 * $1190)))
          P[<fail_1153@226:0>]($1130:bool) = false
        
      end HcSolver.solve_ub(324709)[4] (0.089987 sec.)
      begin HcSolver.check_validity(325443)[4]
        input:
          P[<fail_1153@226:0>](<fail_1153@226:0>:bool)|- bot
          
          P[<<f_1030@168:2>@221:0>](0:int,50:int,100:int), <fail_1153@226:0>
          |- P[<fail_1153@226:0>](<fail_1153@226:0>:bool)
          
          P[<f_1030@168:1>](<f_1030@168:0>:int,<f_1030@168:1>:int),
          P[<<f_1030@174:2>@217:0>]((1 + <f_1030@168:0>):int,<f_1030@168:1>:int,<<f_1030@168:2>@221:0>:int),
          (<f_1030@168:0> < 50)
          |- P[<<f_1030@168:2>@221:0>](<f_1030@168:0>:int,<f_1030@168:1>:int,
                                       <<f_1030@168:2>@221:0>:int)
          
          P[<f_1030@174:1>](<f_1030@174:0>:int,<f_1030@174:1>:int),
          P[<<f_1030@180:2>@213:0>]((1 + <f_1030@174:0>):int,<f_1030@174:1>:int,<<f_1030@174:2>@217:0>:int),
          (<f_1030@174:0> < 50)
          |- P[<<f_1030@174:2>@217:0>](<f_1030@174:0>:int,<f_1030@174:1>:int,
                                       <<f_1030@174:2>@217:0>:int)
          
          P[<f_1030@180:1>](<f_1030@180:0>:int,<f_1030@180:1>:int),
          P[<<f_1030@186:2>@209:0>]((1 + <f_1030@180:0>):int,<f_1030@180:1>:int,<<f_1030@180:2>@213:0>:int),
          (<f_1030@180:0> < 50)
          |- P[<<f_1030@180:2>@213:0>](<f_1030@180:0>:int,<f_1030@180:1>:int,
                                       <<f_1030@180:2>@213:0>:int)
          
          P[<f_1030@186:1>](<f_1030@186:0>:int,<f_1030@186:1>:int),
          P[<<f_1030@192:2>@205:0>]((1 + <f_1030@186:0>):int,<f_1030@186:1>:int,<<f_1030@186:2>@209:0>:int),
          (<f_1030@186:0> < 50)
          |- P[<<f_1030@186:2>@209:0>](<f_1030@186:0>:int,<f_1030@186:1>:int,
                                       <<f_1030@186:2>@209:0>:int)
          
          P[<f_1030@192:1>](<f_1030@192:0>:int,<f_1030@192:1>:int),
          P[<<f_1030@198:2>@201:0>]((1 + <f_1030@192:0>):int,<f_1030@192:1>:int,<<f_1030@192:2>@205:0>:int),
          (<f_1030@192:0> < 50)
          |- P[<<f_1030@192:2>@205:0>](<f_1030@192:0>:int,<f_1030@192:1>:int,
                                       <<f_1030@192:2>@205:0>:int)
          
          P[<f_1030@198:1>](<f_1030@198:0>:int,<f_1030@198:1>:int),
          ((<f_1030@198:0> >= 100) && (<<f_1030@198:2>@201:0> = <f_1030@198:1>))
          |- P[<<f_1030@198:2>@201:0>](<f_1030@198:0>:int,<f_1030@198:1>:int,
                                       <<f_1030@198:2>@201:0>:int)
          
          P[<f_1030@192:1>]((-1 + <f_1030@198:0>):int,<f_1030@198:1>:int), (
          <f_1030@198:0> < 51) |- P[<f_1030@198:1>](<f_1030@198:0>:int,
                                                    <f_1030@198:1>:int)
          
          P[<f_1030@186:1>]((-1 + <f_1030@192:0>):int,<f_1030@192:1>:int), (
          <f_1030@192:0> < 51) |- P[<f_1030@192:1>](<f_1030@192:0>:int,
                                                    <f_1030@192:1>:int)
          
          P[<f_1030@180:1>]((-1 + <f_1030@186:0>):int,<f_1030@186:1>:int), (
          <f_1030@186:0> < 51) |- P[<f_1030@186:1>](<f_1030@186:0>:int,
                                                    <f_1030@186:1>:int)
          
          P[<f_1030@174:1>]((-1 + <f_1030@180:0>):int,<f_1030@180:1>:int), (
          <f_1030@180:0> < 51) |- P[<f_1030@180:1>](<f_1030@180:0>:int,
                                                    <f_1030@180:1>:int)
          
          P[<f_1030@168:1>]((-1 + <f_1030@174:0>):int,<f_1030@174:1>:int), (
          <f_1030@174:0> < 51) |- P[<f_1030@174:1>](<f_1030@174:0>:int,
                                                    <f_1030@174:1>:int)
          
           ((<f_1030@168:0> = 0) && (<f_1030@168:1> = 50)) |- P[<f_1030@168:1>](<f_1030@168:0>:int,
                                                                    <f_1030@168:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(325443)[4] (0.013997 sec.)
      solution:
        P[<f_1030@168:1>]($1147:int,$1149:int) = ($1149 <= 50)
        P[<<f_1030@168:2>@221:0>]($1133:int,$1135:int,$1137:int) = ($1137 <= 50)
        P[<f_1030@174:1>]($1159:int,$1161:int) = ($1161 <= 50)
        P[<<f_1030@174:2>@217:0>]($1140:int,$1142:int,$1144:int) = ((6 * $1144) <= (250 + $1142))
        P[<f_1030@180:1>]($1171:int,$1173:int) = ($1173 <= 50)
        P[<<f_1030@180:2>@213:0>]($1152:int,$1154:int,$1156:int) = ((3 * $1156) <= (100 + $1154))
        P[<f_1030@186:1>]($1183:int,$1185:int) = ($1185 <= 50)
        P[<<f_1030@186:2>@209:0>]($1164:int,$1166:int,$1168:int) = ((2 * $1168) <= (50 + $1166))
        P[<f_1030@192:1>]($1195:int,$1197:int) = ($1197 <= 50)
        P[<<f_1030@192:2>@205:0>]($1176:int,$1178:int,$1180:int) = ((3 * $1180) <= (50 + (2 * $1178)))
        P[<f_1030@198:1>]($1200:int,$1202:int) = ($1202 <= 50)
        P[<<f_1030@198:2>@201:0>]($1188:int,$1190:int,$1192:int) = ((6 * $1192) <= (50 + (5 * $1190)))
        P[<fail_1153@226:0>]($1130:bool) = false
    end YhornInterface.solve(324708)[3] (0.103984 sec.)
    
  end RefTypeInfer.infer_etrs(206764)[2] (0.955854 sec.)
  refinement types:
    main_1149: X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 0)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 1)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 2)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 3)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 4)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 5)} -> (v3:{v3:int | false} -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    k_main_1146: var1035:unit -> X
  abstraction types:
    main_1149: X
    f_1030: var1056:int ->
            var1057:int[var1057 -> (var1056 <= 0),
                        var1057 -> (var1056 <= 1),
                        var1057 -> (var1056 <= 2),
                        var1057 -> (var1056 <= 3),
                        var1057 -> (var1056 <= 4),
                        var1057 -> (var1056 <= 5)] -> (var1058:int -> X) -> X
    br_f_1151: var1079:bool -> var1080:int -> var1081:int -> (var1082:int -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:bool -> (v2:unit -> X) -> X
    k_main_1146: var1035:unit -> X
  
end AbsTypeInfer.refine(206763)[1] (0.958854 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 6)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int -> int[x_1 <= 5; x_1 <= 4; x_1 <= 3; x_1 <= 2; x_1 <= 1; x_1 <= 0] -> (int -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(6-1) Abstracting ... DONE!

(6-2) Checking HORS ... DONE!

Error trace::
  main_1149 ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [1/2] ... --> 
  br_f_1151 [1/2] ... --> 
  f_1030 [2/2] ... --> 
  f_1150 [2/2] ... --> 
  fail_1153 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 0

(6-3) Checking counter-example ... DONE!

(6-4) Discovering predicates ... 
begin AbsTypeInfer.refine(331463)[1]
  program:
    main_1149  | true = (f_1030 0
                                50
                                f_1150)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | b_1152 = (f_1030 (x_1031 + 1)
                                                               y_1032
                                                               k_f_1085)
    br_f_1151 b_1152 x_1031 y_1032 k_f_1085 | (not b_1152) = (f_1030 (
                                                                    x_1031 + 1)
                                                                    (y_1032 + 1)
                                                                    k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (x_1031 < 100) = (br_f_1151 (x_1031 < 50)
                                                                x_1031
                                                                y_1032
                                                                k_f_1085)
    f_1030 x_1031 y_1032 k_f_1085 | (not (x_1031 < 100)) = (k_f_1085 y_1032)
    f_1150 x_1124 | (not (x_1124 = 100)) = (k_main_1146 ())
    f_1150 x_1124 | (not (not (x_1124 = 100))) = (fail_1153 true
                                                            k_main_1146)
    fail_1153 b k | true = (fail ())
    k_main_1146 x_1118 | true = end
    main_1149:X
    br_f_1151:bool -> int -> int -> (int -> X) -> X
    f_1030:int -> int -> (int -> X) -> X
    f_1150:int -> X
    fail_1153:bool -> (unit -> X) -> X
    k_main_1146:unit -> X
  inlined functions: br_f_1151,f_1150,k_main_1146
  counterexample: 0:0:0:0:0:0:0:0:0:0:0:0:0:1:1:0
  error traces:
    [true.((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
     [(<f_1030@231:0> < 100).
      ((<br_f_1151@234:0> = (<f_1030@231:0> < 50)) &&
       ((<br_f_1151@234:1> = <f_1030@231:0>) && (<br_f_1151@234:2> = <f_1030@231:1>)))
      [<br_f_1151@234:0>.((<f_1030@237:0> = (<br_f_1151@234:1> + 1)) && (<f_1030@237:1> = <br_f_1151@234:2>))
       [(<f_1030@237:0> < 100).
        ((<br_f_1151@240:0> = (<f_1030@237:0> < 50)) &&
         ((<br_f_1151@240:1> = <f_1030@237:0>) && (<br_f_1151@240:2> = <f_1030@237:1>)))
        [<br_f_1151@240:0>.((<f_1030@243:0> = (<br_f_1151@240:1> + 1)) && (<f_1030@243:1> = <br_f_1151@240:2>))
         [(<f_1030@243:0> < 100).
          ((<br_f_1151@246:0> = (<f_1030@243:0> < 50)) &&
           ((<br_f_1151@246:1> = <f_1030@243:0>) && (<br_f_1151@246:2> = <f_1030@243:1>)))
          [<br_f_1151@246:0>.((<f_1030@249:0> = (<br_f_1151@246:1> + 1)) && (<f_1030@249:1> = <br_f_1151@246:2>))
           [(<f_1030@249:0> < 100).
            ((<br_f_1151@252:0> = (<f_1030@249:0> < 50)) &&
             ((<br_f_1151@252:1> = <f_1030@249:0>) && (<br_f_1151@252:2> = <f_1030@249:1>)))
            [<br_f_1151@252:0>.((<f_1030@255:0> = (<br_f_1151@252:1> + 1)) && (<f_1030@255:1> = <br_f_1151@252:2>))
             [(<f_1030@255:0> < 100).
              ((<br_f_1151@258:0> = (<f_1030@255:0> < 50)) &&
               ((<br_f_1151@258:1> = <f_1030@255:0>) && (<br_f_1151@258:2> = <f_1030@255:1>)))
              [<br_f_1151@258:0>.((<f_1030@261:0> = (<br_f_1151@258:1> + 1)) && (<f_1030@261:1> = <br_f_1151@258:2>))
               [(<f_1030@261:0> < 100).
                ((<br_f_1151@264:0> = (<f_1030@261:0> < 50)) &&
                 ((<br_f_1151@264:1> = <f_1030@261:0>) && (<br_f_1151@264:2> = <f_1030@261:1>)))
                [<br_f_1151@264:0>.((<f_1030@267:0> = (<br_f_1151@264:1> + 1)) && (<f_1030@267:1> = <br_f_1151@264:2>))
                 [(not (<f_1030@267:0> < 100)).(<<f_1030@267:2>@270:0> = <f_1030@267:1>)
                  [true.(<<br_f_1151@264:3>@272:0> = <<f_1030@267:2>@270:0>)
                   [true.(<<f_1030@261:2>@274:0> = <<br_f_1151@264:3>@272:0>)
                    [true.(<<br_f_1151@258:3>@276:0> = <<f_1030@261:2>@274:0>)
                     [true.(<<f_1030@255:2>@278:0> = <<br_f_1151@258:3>@276:0>)
                      [true.(<<br_f_1151@252:3>@280:0> = <<f_1030@255:2>@278:0>)
                       [true.(<<f_1030@249:2>@282:0> = <<br_f_1151@252:3>@280:0>)
                        [true.(<<br_f_1151@246:3>@284:0> = <<f_1030@249:2>@282:0>)
                         [true.(<<f_1030@243:2>@286:0> = <<br_f_1151@246:3>@284:0>)
                          [true.(<<br_f_1151@240:3>@288:0> = <<f_1030@243:2>@286:0>)
                           [true.(<<f_1030@237:2>@290:0> = <<br_f_1151@240:3>@288:0>)
                            [true.(<<br_f_1151@234:3>@292:0> = <<f_1030@237:2>@290:0>)
                             [true.(<<f_1030@231:2>@294:0> = <<br_f_1151@234:3>@292:0>)
                              [true.(<f_1150@296:0> = <<f_1030@231:2>@294:0>)
                               [(not (not (<f_1150@296:0> = 100))).(<fail_1153@299:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(331464)[2]
    horn clauses:
      P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
      
      P[<f_1150@296:0>](100:int), <fail_1153@299:0> |- P[<fail_1153@299:0>](<fail_1153@299:0>:bool)
      
      P[<<f_1030@231:2>@294:0>](0:int,50:int,<f_1150@296:0>:int)|- P[<f_1150@296:0>](<f_1150@296:0>:int)
      
      P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int),
      P[<<br_f_1151@234:3>@292:0>]((<f_1030@231:0> < 50):bool,<f_1030@231:0>:int,<f_1030@231:1>:int,<<f_1030@231:2>@294:0>:int),
      (<f_1030@231:0> < 100)
      |- P[<<f_1030@231:2>@294:0>](<f_1030@231:0>:int,<f_1030@231:1>:int,
                                   <<f_1030@231:2>@294:0>:int)
      
      P[<br_f_1151@234:2>](<br_f_1151@234:0>:bool,<br_f_1151@234:1>:int,<br_f_1151@234:2>:int),
      P[<<f_1030@237:2>@290:0>]((1 + <br_f_1151@234:1>):int,<br_f_1151@234:2>:int,<<br_f_1151@234:3>@292:0>:int),
      <br_f_1151@234:0>
      |- P[<<br_f_1151@234:3>@292:0>](<br_f_1151@234:0>:bool,<br_f_1151@234:1>:int,
                                      <br_f_1151@234:2>:int,<<br_f_1151@234:3>@292:0>:int)
      
      P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int),
      P[<<br_f_1151@240:3>@288:0>]((<f_1030@237:0> < 50):bool,<f_1030@237:0>:int,<f_1030@237:1>:int,<<f_1030@237:2>@290:0>:int),
      (<f_1030@237:0> < 100)
      |- P[<<f_1030@237:2>@290:0>](<f_1030@237:0>:int,<f_1030@237:1>:int,
                                   <<f_1030@237:2>@290:0>:int)
      
      P[<br_f_1151@240:2>](<br_f_1151@240:0>:bool,<br_f_1151@240:1>:int,<br_f_1151@240:2>:int),
      P[<<f_1030@243:2>@286:0>]((1 + <br_f_1151@240:1>):int,<br_f_1151@240:2>:int,<<br_f_1151@240:3>@288:0>:int),
      <br_f_1151@240:0>
      |- P[<<br_f_1151@240:3>@288:0>](<br_f_1151@240:0>:bool,<br_f_1151@240:1>:int,
                                      <br_f_1151@240:2>:int,<<br_f_1151@240:3>@288:0>:int)
      
      P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int),
      P[<<br_f_1151@246:3>@284:0>]((<f_1030@243:0> < 50):bool,<f_1030@243:0>:int,<f_1030@243:1>:int,<<f_1030@243:2>@286:0>:int),
      (<f_1030@243:0> < 100)
      |- P[<<f_1030@243:2>@286:0>](<f_1030@243:0>:int,<f_1030@243:1>:int,
                                   <<f_1030@243:2>@286:0>:int)
      
      P[<br_f_1151@246:2>](<br_f_1151@246:0>:bool,<br_f_1151@246:1>:int,<br_f_1151@246:2>:int),
      P[<<f_1030@249:2>@282:0>]((1 + <br_f_1151@246:1>):int,<br_f_1151@246:2>:int,<<br_f_1151@246:3>@284:0>:int),
      <br_f_1151@246:0>
      |- P[<<br_f_1151@246:3>@284:0>](<br_f_1151@246:0>:bool,<br_f_1151@246:1>:int,
                                      <br_f_1151@246:2>:int,<<br_f_1151@246:3>@284:0>:int)
      
      P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int),
      P[<<br_f_1151@252:3>@280:0>]((<f_1030@249:0> < 50):bool,<f_1030@249:0>:int,<f_1030@249:1>:int,<<f_1030@249:2>@282:0>:int),
      (<f_1030@249:0> < 100)
      |- P[<<f_1030@249:2>@282:0>](<f_1030@249:0>:int,<f_1030@249:1>:int,
                                   <<f_1030@249:2>@282:0>:int)
      
      P[<br_f_1151@252:2>](<br_f_1151@252:0>:bool,<br_f_1151@252:1>:int,<br_f_1151@252:2>:int),
      P[<<f_1030@255:2>@278:0>]((1 + <br_f_1151@252:1>):int,<br_f_1151@252:2>:int,<<br_f_1151@252:3>@280:0>:int),
      <br_f_1151@252:0>
      |- P[<<br_f_1151@252:3>@280:0>](<br_f_1151@252:0>:bool,<br_f_1151@252:1>:int,
                                      <br_f_1151@252:2>:int,<<br_f_1151@252:3>@280:0>:int)
      
      P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int),
      P[<<br_f_1151@258:3>@276:0>]((<f_1030@255:0> < 50):bool,<f_1030@255:0>:int,<f_1030@255:1>:int,<<f_1030@255:2>@278:0>:int),
      (<f_1030@255:0> < 100)
      |- P[<<f_1030@255:2>@278:0>](<f_1030@255:0>:int,<f_1030@255:1>:int,
                                   <<f_1030@255:2>@278:0>:int)
      
      P[<br_f_1151@258:2>](<br_f_1151@258:0>:bool,<br_f_1151@258:1>:int,<br_f_1151@258:2>:int),
      P[<<f_1030@261:2>@274:0>]((1 + <br_f_1151@258:1>):int,<br_f_1151@258:2>:int,<<br_f_1151@258:3>@276:0>:int),
      <br_f_1151@258:0>
      |- P[<<br_f_1151@258:3>@276:0>](<br_f_1151@258:0>:bool,<br_f_1151@258:1>:int,
                                      <br_f_1151@258:2>:int,<<br_f_1151@258:3>@276:0>:int)
      
      P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int),
      P[<<br_f_1151@264:3>@272:0>]((<f_1030@261:0> < 50):bool,<f_1030@261:0>:int,<f_1030@261:1>:int,<<f_1030@261:2>@274:0>:int),
      (<f_1030@261:0> < 100)
      |- P[<<f_1030@261:2>@274:0>](<f_1030@261:0>:int,<f_1030@261:1>:int,
                                   <<f_1030@261:2>@274:0>:int)
      
      P[<br_f_1151@264:2>](<br_f_1151@264:0>:bool,<br_f_1151@264:1>:int,<br_f_1151@264:2>:int),
      P[<<f_1030@267:2>@270:0>]((1 + <br_f_1151@264:1>):int,<br_f_1151@264:2>:int,<<br_f_1151@264:3>@272:0>:int),
      <br_f_1151@264:0>
      |- P[<<br_f_1151@264:3>@272:0>](<br_f_1151@264:0>:bool,<br_f_1151@264:1>:int,
                                      <br_f_1151@264:2>:int,<<br_f_1151@264:3>@272:0>:int)
      
      P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int),
      ((<f_1030@267:0> >= 100) && (<<f_1030@267:2>@270:0> = <f_1030@267:1>))
      |- P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,
                                   <<f_1030@267:2>@270:0>:int)
      
      P[<br_f_1151@264:2>](true:bool,(-1 + <f_1030@267:0>):int,<f_1030@267:1>:int)|- P[<f_1030@267:1>](
      <f_1030@267:0>:int,<f_1030@267:1>:int)
      
      P[<f_1030@261:1>](<br_f_1151@264:1>:int,<br_f_1151@264:2>:int),
      ((<br_f_1151@264:1> < 100) && (<br_f_1151@264:0> = (<br_f_1151@264:1> < 50)))
      |- P[<br_f_1151@264:2>](<br_f_1151@264:0>:bool,<br_f_1151@264:1>:int,
                              <br_f_1151@264:2>:int)
      
      P[<br_f_1151@258:2>](true:bool,(-1 + <f_1030@261:0>):int,<f_1030@261:1>:int)|- P[<f_1030@261:1>](
      <f_1030@261:0>:int,<f_1030@261:1>:int)
      
      P[<f_1030@255:1>](<br_f_1151@258:1>:int,<br_f_1151@258:2>:int),
      ((<br_f_1151@258:1> < 100) && (<br_f_1151@258:0> = (<br_f_1151@258:1> < 50)))
      |- P[<br_f_1151@258:2>](<br_f_1151@258:0>:bool,<br_f_1151@258:1>:int,
                              <br_f_1151@258:2>:int)
      
      P[<br_f_1151@252:2>](true:bool,(-1 + <f_1030@255:0>):int,<f_1030@255:1>:int)|- P[<f_1030@255:1>](
      <f_1030@255:0>:int,<f_1030@255:1>:int)
      
      P[<f_1030@249:1>](<br_f_1151@252:1>:int,<br_f_1151@252:2>:int),
      ((<br_f_1151@252:1> < 100) && (<br_f_1151@252:0> = (<br_f_1151@252:1> < 50)))
      |- P[<br_f_1151@252:2>](<br_f_1151@252:0>:bool,<br_f_1151@252:1>:int,
                              <br_f_1151@252:2>:int)
      
      P[<br_f_1151@246:2>](true:bool,(-1 + <f_1030@249:0>):int,<f_1030@249:1>:int)|- P[<f_1030@249:1>](
      <f_1030@249:0>:int,<f_1030@249:1>:int)
      
      P[<f_1030@243:1>](<br_f_1151@246:1>:int,<br_f_1151@246:2>:int),
      ((<br_f_1151@246:1> < 100) && (<br_f_1151@246:0> = (<br_f_1151@246:1> < 50)))
      |- P[<br_f_1151@246:2>](<br_f_1151@246:0>:bool,<br_f_1151@246:1>:int,
                              <br_f_1151@246:2>:int)
      
      P[<br_f_1151@240:2>](true:bool,(-1 + <f_1030@243:0>):int,<f_1030@243:1>:int)|- P[<f_1030@243:1>](
      <f_1030@243:0>:int,<f_1030@243:1>:int)
      
      P[<f_1030@237:1>](<br_f_1151@240:1>:int,<br_f_1151@240:2>:int),
      ((<br_f_1151@240:1> < 100) && (<br_f_1151@240:0> = (<br_f_1151@240:1> < 50)))
      |- P[<br_f_1151@240:2>](<br_f_1151@240:0>:bool,<br_f_1151@240:1>:int,
                              <br_f_1151@240:2>:int)
      
      P[<br_f_1151@234:2>](true:bool,(-1 + <f_1030@237:0>):int,<f_1030@237:1>:int)|- P[<f_1030@237:1>](
      <f_1030@237:0>:int,<f_1030@237:1>:int)
      
      P[<f_1030@231:1>](<br_f_1151@234:1>:int,<br_f_1151@234:2>:int),
      ((<br_f_1151@234:1> < 100) && (<br_f_1151@234:0> = (<br_f_1151@234:1> < 50)))
      |- P[<br_f_1151@234:2>](<br_f_1151@234:0>:bool,<br_f_1151@234:1>:int,
                              <br_f_1151@234:2>:int)
      
       ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
    call trees:
      <main_1149@229>
        <f_1030@231>
          <br_f_1151@234>
            <f_1030@237>
              <br_f_1151@240>
                <f_1030@243>
                  <br_f_1151@246>
                    <f_1030@249>
                      <br_f_1151@252>
                        <f_1030@255>
                          <br_f_1151@258>
                            <f_1030@261>
                              <br_f_1151@264>
                                <f_1030@267>
                                </<f_1030@267:2>@270>
                              </<br_f_1151@264:3>@272>
                            </<f_1030@261:2>@274>
                          </<br_f_1151@258:3>@276>
                        </<f_1030@255:2>@278>
                      </<br_f_1151@252:3>@280>
                    </<f_1030@249:2>@282>
                  </<br_f_1151@246:3>@284>
                </<f_1030@243:2>@286>
              </<br_f_1151@240:3>@288>
            </<f_1030@237:2>@290>
          </<br_f_1151@234:3>@292>
        </<f_1030@231:2>@294>
        <f_1150@296>
          <fail_1153@299>
    inlined horn clauses:
      P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
      
      P[<<f_1030@231:2>@294:0>](0:int,50:int,100:int), <fail_1153@299:0>
      |- P[<fail_1153@299:0>](<fail_1153@299:0>:bool)
      
      P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int),
      P[<<f_1030@237:2>@290:0>]((1 + <f_1030@231:0>):int,<f_1030@231:1>:int,<<f_1030@231:2>@294:0>:int),
      (<f_1030@231:0> < 50)
      |- P[<<f_1030@231:2>@294:0>](<f_1030@231:0>:int,<f_1030@231:1>:int,
                                   <<f_1030@231:2>@294:0>:int)
      
      P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int),
      P[<<f_1030@243:2>@286:0>]((1 + <f_1030@237:0>):int,<f_1030@237:1>:int,<<f_1030@237:2>@290:0>:int),
      (<f_1030@237:0> < 50)
      |- P[<<f_1030@237:2>@290:0>](<f_1030@237:0>:int,<f_1030@237:1>:int,
                                   <<f_1030@237:2>@290:0>:int)
      
      P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int),
      P[<<f_1030@249:2>@282:0>]((1 + <f_1030@243:0>):int,<f_1030@243:1>:int,<<f_1030@243:2>@286:0>:int),
      (<f_1030@243:0> < 50)
      |- P[<<f_1030@243:2>@286:0>](<f_1030@243:0>:int,<f_1030@243:1>:int,
                                   <<f_1030@243:2>@286:0>:int)
      
      P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int),
      P[<<f_1030@255:2>@278:0>]((1 + <f_1030@249:0>):int,<f_1030@249:1>:int,<<f_1030@249:2>@282:0>:int),
      (<f_1030@249:0> < 50)
      |- P[<<f_1030@249:2>@282:0>](<f_1030@249:0>:int,<f_1030@249:1>:int,
                                   <<f_1030@249:2>@282:0>:int)
      
      P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int),
      P[<<f_1030@261:2>@274:0>]((1 + <f_1030@255:0>):int,<f_1030@255:1>:int,<<f_1030@255:2>@278:0>:int),
      (<f_1030@255:0> < 50)
      |- P[<<f_1030@255:2>@278:0>](<f_1030@255:0>:int,<f_1030@255:1>:int,
                                   <<f_1030@255:2>@278:0>:int)
      
      P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int),
      P[<<f_1030@267:2>@270:0>]((1 + <f_1030@261:0>):int,<f_1030@261:1>:int,<<f_1030@261:2>@274:0>:int),
      (<f_1030@261:0> < 50)
      |- P[<<f_1030@261:2>@274:0>](<f_1030@261:0>:int,<f_1030@261:1>:int,
                                   <<f_1030@261:2>@274:0>:int)
      
      P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int),
      ((<f_1030@267:0> >= 100) && (<<f_1030@267:2>@270:0> = <f_1030@267:1>))
      |- P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,
                                   <<f_1030@267:2>@270:0>:int)
      
      P[<f_1030@261:1>]((-1 + <f_1030@267:0>):int,<f_1030@267:1>:int), (
      <f_1030@267:0> < 51) |- P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int)
      
      P[<f_1030@255:1>]((-1 + <f_1030@261:0>):int,<f_1030@261:1>:int), (
      <f_1030@261:0> < 51) |- P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int)
      
      P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int), (
      <f_1030@255:0> < 51) |- P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int)
      
      P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
      <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int)
      
      P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
      <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int)
      
      P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
      <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int)
      
       ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
    begin ParamSubstInfer.infer(337274)[3]
      
    end ParamSubstInfer.infer(337274)[3] (0.573912 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(337276)[3]
      
    end RefTypeInfer.elim_coeffs(337276)[3] (0.000000 sec.)
    begin GenHcSolver.solve(337799)[3]
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<<f_1030@231:2>@294:0>](0:int,50:int,100:int), <fail_1153@299:0>
        |- P[<fail_1153@299:0>](<fail_1153@299:0>:bool)
        
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int),
        P[<<f_1030@237:2>@290:0>]((1 + <f_1030@231:0>):int,<f_1030@231:1>:int,<<f_1030@231:2>@294:0>:int),
        (<f_1030@231:0> < 50)
        |- P[<<f_1030@231:2>@294:0>](<f_1030@231:0>:int,<f_1030@231:1>:int,
                                     <<f_1030@231:2>@294:0>:int)
        
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int),
        P[<<f_1030@243:2>@286:0>]((1 + <f_1030@237:0>):int,<f_1030@237:1>:int,<<f_1030@237:2>@290:0>:int),
        (<f_1030@237:0> < 50)
        |- P[<<f_1030@237:2>@290:0>](<f_1030@237:0>:int,<f_1030@237:1>:int,
                                     <<f_1030@237:2>@290:0>:int)
        
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int),
        P[<<f_1030@249:2>@282:0>]((1 + <f_1030@243:0>):int,<f_1030@243:1>:int,<<f_1030@243:2>@286:0>:int),
        (<f_1030@243:0> < 50)
        |- P[<<f_1030@243:2>@286:0>](<f_1030@243:0>:int,<f_1030@243:1>:int,
                                     <<f_1030@243:2>@286:0>:int)
        
        P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int),
        P[<<f_1030@255:2>@278:0>]((1 + <f_1030@249:0>):int,<f_1030@249:1>:int,<<f_1030@249:2>@282:0>:int),
        (<f_1030@249:0> < 50)
        |- P[<<f_1030@249:2>@282:0>](<f_1030@249:0>:int,<f_1030@249:1>:int,
                                     <<f_1030@249:2>@282:0>:int)
        
        P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int),
        P[<<f_1030@261:2>@274:0>]((1 + <f_1030@255:0>):int,<f_1030@255:1>:int,<<f_1030@255:2>@278:0>:int),
        (<f_1030@255:0> < 50)
        |- P[<<f_1030@255:2>@278:0>](<f_1030@255:0>:int,<f_1030@255:1>:int,
                                     <<f_1030@255:2>@278:0>:int)
        
        P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int),
        P[<<f_1030@267:2>@270:0>]((1 + <f_1030@261:0>):int,<f_1030@261:1>:int,<<f_1030@261:2>@274:0>:int),
        (<f_1030@261:0> < 50)
        |- P[<<f_1030@261:2>@274:0>](<f_1030@261:0>:int,<f_1030@261:1>:int,
                                     <<f_1030@261:2>@274:0>:int)
        
        P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int),
        ((<f_1030@267:0> >= 100) && (<<f_1030@267:2>@270:0> = <f_1030@267:1>))
        |- P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,
                                     <<f_1030@267:2>@270:0>:int)
        
        P[<f_1030@261:1>]((-1 + <f_1030@267:0>):int,<f_1030@267:1>:int), (
        <f_1030@267:0> < 51) |- P[<f_1030@267:1>](<f_1030@267:0>:int,
                                                  <f_1030@267:1>:int)
        
        P[<f_1030@255:1>]((-1 + <f_1030@261:0>):int,<f_1030@261:1>:int), (
        <f_1030@261:0> < 51) |- P[<f_1030@261:1>](<f_1030@261:0>:int,
                                                  <f_1030@261:1>:int)
        
        P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int), (
        <f_1030@255:0> < 51) |- P[<f_1030@255:1>](<f_1030@255:0>:int,
                                                  <f_1030@255:1>:int)
        
        P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
        <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,
                                                  <f_1030@249:1>:int)
        
        P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
        <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                  <f_1030@243:1>:int)
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
        <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                  <f_1030@237:1>:int)
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = ((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
        P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int) = ((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
        P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int) = ((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
        P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int) = ((<f_1030@261:0> = 5) && (<f_1030@261:1> = 50))
        P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int) = ((<f_1030@267:0> = 6) && (<f_1030@267:1> = 50))
        P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<<f_1030@261:2>@274:0>](<f_1030@261:0>:int,<f_1030@261:1>:int,<<f_1030@261:2>@274:0>:int) = false
        P[<<f_1030@255:2>@278:0>](<f_1030@255:0>:int,<f_1030@255:1>:int,<<f_1030@255:2>@278:0>:int) = false
        P[<<f_1030@249:2>@282:0>](<f_1030@249:0>:int,<f_1030@249:1>:int,<<f_1030@249:2>@282:0>:int) = false
        P[<<f_1030@243:2>@286:0>](<f_1030@243:0>:int,<f_1030@243:1>:int,<<f_1030@243:2>@286:0>:int) = false
        P[<<f_1030@237:2>@290:0>](<f_1030@237:0>:int,<f_1030@237:1>:int,<<f_1030@237:2>@290:0>:int) = false
        P[<<f_1030@231:2>@294:0>](<f_1030@231:0>:int,<f_1030@231:1>:int,<<f_1030@231:2>@294:0>:int) = false
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool) = false
      upper bounds:
        P[<<f_1030@231:2>@294:0>](var1124:int,var1125:int,var1126:int) = true
        P[<<f_1030@237:2>@290:0>](var1118:int,var1119:int,var1120:int) = true
        P[<<f_1030@243:2>@286:0>](var1112:int,var1113:int,var1114:int) = true
        P[<<f_1030@249:2>@282:0>](var1106:int,var1107:int,var1108:int) = true
        P[<<f_1030@255:2>@278:0>](var1100:int,var1101:int,var1102:int) = true
        P[<<f_1030@261:2>@274:0>](var1094:int,var1095:int,var1096:int) = true
        P[<<f_1030@267:2>@270:0>](var1088:int,var1089:int,var1090:int) = true
      begin GenHcSolver.classify_pids(354784)[4]
        output:
          [<<f_1030@267:2>@270:0>;<<f_1030@261:2>@274:0>;<<f_1030@255:2>@278:0>;<<f_1030@249:2>@282:0>;<<f_1030@243:2>@286:0>;<<f_1030@237:2>@290:0>;<<f_1030@231:2>@294:0>]
      end GenHcSolver.classify_pids(354784)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(354865)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(354866)[5]
          begin InterpProver.interpolate_fresh(354867)[6]
            begin InterpProver.interpolate_log(354868)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(354869)[8]
                begin InterpProver.interpolate_simplify(354870)[9]
                  begin InterpProver.interpolate_quick(354883)[10]
                    
                  end InterpProver.interpolate_quick(354883)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(354887)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(354887)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(354870)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(354869)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(354868)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(354867)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(354866)[5] (0.001000 sec.)
        output:
          P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
          P[<<f_1030@261:2>@274:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
          P[<<f_1030@255:2>@278:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
          P[<<f_1030@249:2>@282:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
          P[<<f_1030@243:2>@286:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
          P[<<f_1030@237:2>@290:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
          P[<<f_1030@231:2>@294:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
      end ApronInterface.convex_hull_interpolate(354865)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<f_1030@267:1>](<f_1030@267:0>:int,<<f_1030@267:2>@270:0>:int), (<f_1030@267:0> >= 100) |- bot
        
        P[<f_1030@261:1>]((-1 + <f_1030@267:0>):int,<f_1030@267:1>:int), (
        <f_1030@267:0> < 51) |- P[<f_1030@267:1>](<f_1030@267:0>:int,
                                                  <f_1030@267:1>:int)
        
        P[<f_1030@255:1>]((-1 + <f_1030@261:0>):int,<f_1030@261:1>:int), (
        <f_1030@261:0> < 51) |- P[<f_1030@261:1>](<f_1030@261:0>:int,
                                                  <f_1030@261:1>:int)
        
        P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int), (
        <f_1030@255:0> < 51) |- P[<f_1030@255:1>](<f_1030@255:0>:int,
                                                  <f_1030@255:1>:int)
        
        P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
        <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,
                                                  <f_1030@249:1>:int)
        
        P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
        <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                  <f_1030@243:1>:int)
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
        <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                  <f_1030@237:1>:int)
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<fail_1153@299:0>](var1135:bool) = false
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = ((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
        P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int) = ((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
        P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int) = ((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
        P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int) = ((<f_1030@261:0> = 5) && (<f_1030@261:1> = 50))
        P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int) = ((<f_1030@267:0> = 6) && (<f_1030@267:1> = 50))
      upper bounds:
        P[<f_1030@267:1>](var1162:int,var1163:int) = (var1162 < 100)
        P[<f_1030@261:1>](var1158:int,var1159:int) = true
        P[<f_1030@255:1>](var1154:int,var1155:int) = true
        P[<f_1030@249:1>](var1150:int,var1151:int) = true
        P[<f_1030@243:1>](var1146:int,var1147:int) = true
        P[<f_1030@237:1>](var1142:int,var1143:int) = true
        P[<f_1030@231:1>](var1138:int,var1139:int) = true
      begin GenHcSolver.classify_pids(373227)[4]
        output:
          [<f_1030@231:1>;<f_1030@237:1>;<f_1030@243:1>;<f_1030@249:1>;<f_1030@255:1>;<f_1030@261:1>;<f_1030@267:1>]
      end GenHcSolver.classify_pids(373227)[4] (0.001999 sec.)
      begin ApronInterface.convex_hull_interpolate(373362)[4]
        lb:(((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) ||
            (((<f_1030@231:0> = 1) && (<f_1030@231:1> = 50)) ||
             (((<f_1030@231:0> = 2) && (<f_1030@231:1> = 50)) ||
              (((<f_1030@231:0> = 3) && (<f_1030@231:1> = 50)) ||
               (((<f_1030@231:0> = 4) && (<f_1030@231:1> = 50)) ||
                (((<f_1030@231:0> = 5) && (<f_1030@231:1> = 50)) || ((<f_1030@231:0> = 6) && (<f_1030@231:1> = 50))))))))
        nub:(not (<f_1030@231:0> < 100))
        lb':(((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) ||
             (((<f_1030@231:0> = 1) && (<f_1030@231:1> = 50)) ||
              (((<f_1030@231:0> = 2) && (<f_1030@231:1> = 50)) ||
               (((<f_1030@231:0> = 3) && (<f_1030@231:1> = 50)) ||
                (((<f_1030@231:0> = 4) && (<f_1030@231:1> = 50)) ||
                 (((<f_1030@231:0> = 5) && (<f_1030@231:1> = 50)) || ((<f_1030@231:0> = 6) && (<f_1030@231:1> = 50))))))))
        nub':(not (<f_1030@231:0> < 100))
        begin InterpProver.interpolate(373363)[5]
          begin InterpProver.interpolate_fresh(373364)[6]
            begin InterpProver.interpolate_log(373365)[7]
              input1: (((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) ||
                       (((<f_1030@231:0> = 1) && (<f_1030@231:1> = 50)) ||
                        (((<f_1030@231:0> = 2) && (<f_1030@231:1> = 50)) ||
                         (((<f_1030@231:0> = 3) && (<f_1030@231:1> = 50)) ||
                          (((<f_1030@231:0> = 4) && (<f_1030@231:1> = 50)) ||
                           (((<f_1030@231:0> = 5) && (<f_1030@231:1> = 50)) ||
                            ((<f_1030@231:0> = 6) && (<f_1030@231:1> = 50))))))))
              input2: (not (<f_1030@231:0> < 100))
              begin InterpProver.interpolate_check(373366)[8]
                begin InterpProver.interpolate_simplify(373367)[9]
                  begin InterpProver.interpolate_quick(373884)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(373893)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(373894)[12]
                        begin CsisatInterface.interpolate_csisat_log(373895)[13]
                          input1: (0 = v_sep_f_1030_sep_231_sep_0 | 1 = v_sep_f_1030_sep_231_sep_0 | 2 = v_sep_f_1030_sep_231_sep_0 | 3 = v_sep_f_1030_sep_231_sep_0 | 4 = v_sep_f_1030_sep_231_sep_0 | 5 = v_sep_f_1030_sep_231_sep_0 | 6 = v_sep_f_1030_sep_231_sep_0)
                          input2: 100 <= v_sep_f_1030_sep_231_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(373896)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(373896)[14] (0.003999 sec.)
                          output: (0.02*v_sep_f_1030_sep_231_sep_0 <= 0 | 0.020202020202*v_sep_f_1030_sep_231_sep_0 <= 0.020202020202 | 0.0204081632653*v_sep_f_1030_sep_231_sep_0 <= 0.0408163265306 | 0.020618556701*v_sep_f_1030_sep_231_sep_0 <= 0.0618556701031 | 0.0208333333333*v_sep_f_1030_sep_231_sep_0 <= 0.0833333333333 | 0.0210526315789*v_sep_f_1030_sep_231_sep_0 <= 0.105263157895 | 0.0212765957447*v_sep_f_1030_sep_231_sep_0 <= 0.127659574468)
                          
                        end CsisatInterface.interpolate_csisat_log(373895)[13] (0.003999 sec.)
                        after simplification: (v_sep_f_1030_sep_231_sep_0 <= 0 | v_sep_f_1030_sep_231_sep_0 <= 2 | v_sep_f_1030_sep_231_sep_0 <= 4 | v_sep_f_1030_sep_231_sep_0 <= 6 | 2*v_sep_f_1030_sep_231_sep_0 <= 2 | 2*v_sep_f_1030_sep_231_sep_0 <= 6 | 2*v_sep_f_1030_sep_231_sep_0 <= 10)
                        after dnf conversion: ((v_sep_f_1030_sep_231_sep_0 <= 0) | (v_sep_f_1030_sep_231_sep_0 <= 2) | (v_sep_f_1030_sep_231_sep_0 <= 4) | (v_sep_f_1030_sep_231_sep_0 <= 6) | (2*v_sep_f_1030_sep_231_sep_0 <= 2) | (2*v_sep_f_1030_sep_231_sep_0 <= 6) | (2*v_sep_f_1030_sep_231_sep_0 <= 10))
                        
                      end CsisatInterface.interpolate_csisat_post_process(373894)[12] (0.003999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(373893)[11] (0.003999 sec.)
                    
                  end InterpProver.interpolate_quick(373884)[10] (0.003999 sec.)
                  
                end InterpProver.interpolate_simplify(373367)[9] (0.006999 sec.)
                
              end InterpProver.interpolate_check(373366)[8] (0.007999 sec.)
              output: (<f_1030@231:0> <= 6)
            end InterpProver.interpolate_log(373365)[7] (0.007999 sec.)
            
          end InterpProver.interpolate_fresh(373364)[6] (0.007999 sec.)
          
        end InterpProver.interpolate(373363)[5] (0.007999 sec.)
        output:
          P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
          P[<f_1030@237:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
          P[<f_1030@243:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
          P[<f_1030@249:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
          P[<f_1030@255:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
          P[<f_1030@261:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
          P[<f_1030@267:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
      end ApronInterface.convex_hull_interpolate(373362)[4] (0.007999 sec.)
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<f_1030@261:1>]((-1 + <f_1030@267:0>):int,<f_1030@267:1>:int),
        ((<f_1030@267:0> < 51) && (<f_1030@267:0> > 6)) |- bot
        
        P[<f_1030@255:1>]((-1 + <f_1030@261:0>):int,<f_1030@261:1>:int), (
        <f_1030@261:0> < 51) |- P[<f_1030@261:1>](<f_1030@261:0>:int,
                                                  <f_1030@261:1>:int)
        
        P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int), (
        <f_1030@255:0> < 51) |- P[<f_1030@255:1>](<f_1030@255:0>:int,
                                                  <f_1030@255:1>:int)
        
        P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
        <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,
                                                  <f_1030@249:1>:int)
        
        P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
        <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                  <f_1030@243:1>:int)
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
        <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                  <f_1030@237:1>:int)
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<fail_1153@299:0>](var1172:bool) = false
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = ((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
        P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int) = ((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
        P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int) = ((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
        P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int) = ((<f_1030@261:0> = 5) && (<f_1030@261:1> = 50))
      upper bounds:
        P[<f_1030@261:1>](var1195:int,var1196:int) = ((var1195 <= 5) || (var1195 >= 50))
        P[<f_1030@255:1>](var1191:int,var1192:int) = ((var1191 <= 4) || (var1191 >= 49))
        P[<f_1030@249:1>](var1187:int,var1188:int) = ((var1187 <= 3) || (var1187 >= 48))
        P[<f_1030@243:1>](var1183:int,var1184:int) = ((var1183 <= 2) || (var1183 >= 47))
        P[<f_1030@237:1>](var1179:int,var1180:int) = ((var1179 <= 1) || (var1179 >= 46))
        P[<f_1030@231:1>](var1175:int,var1176:int) = ((var1175 <= 0) || (var1175 >= 45))
      begin GenHcSolver.classify_pids(389745)[4]
        output:
          [<f_1030@261:1>],[<f_1030@255:1>],[<f_1030@249:1>],[<f_1030@243:1>],[
          <f_1030@237:1>],[<f_1030@231:1>]
      end GenHcSolver.classify_pids(389745)[4] (0.004999 sec.)
      lb:((<f_1030@261:0> = 5) && (<f_1030@261:1> = 50))
      nub:(not ((<f_1030@261:0> <= 5) || (<f_1030@261:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(390478)[4]
        lb:((<f_1030@261:0> = 5) && (<f_1030@261:1> = 50))
        nub:(not ((<f_1030@261:0> <= 5) || (<f_1030@261:0> >= 50)))
        lb':((<f_1030@261:0> = 5) && (<f_1030@261:1> = 50))
        nub':(not ((<f_1030@261:0> <= 5) || (<f_1030@261:0> >= 50)))
        begin InterpProver.interpolate(390479)[5]
          begin InterpProver.interpolate_fresh(390480)[6]
            begin InterpProver.interpolate_log(390481)[7]
              input1: ((<f_1030@261:0> = 5) && (<f_1030@261:1> = 50))
              input2: (not ((<f_1030@261:0> <= 5) || (<f_1030@261:0> >= 50)))
              begin InterpProver.interpolate_check(390482)[8]
                begin InterpProver.interpolate_simplify(390483)[9]
                  begin InterpProver.interpolate_quick(390550)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(390559)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(390560)[12]
                        begin CsisatInterface.interpolate_csisat_log(390561)[13]
                          input1: 5 = v_sep_f_1030_sep_261_sep_0
                          input2: (6 <= v_sep_f_1030_sep_261_sep_0 & (1 + v_sep_f_1030_sep_261_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(390562)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(390562)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_261_sep_0 <= 10
                          
                        end CsisatInterface.interpolate_csisat_log(390561)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_261_sep_0 <= 10
                        after dnf conversion: ((2*v_sep_f_1030_sep_261_sep_0 <= 10))
                        
                      end CsisatInterface.interpolate_csisat_post_process(390560)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(390559)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(390550)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(390483)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(390482)[8] (0.001000 sec.)
              output: (<f_1030@261:0> <= 5)
            end InterpProver.interpolate_log(390481)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(390480)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(390479)[5] (0.001000 sec.)
        output:
          P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int) = (<f_1030@261:0> <= 5)
      end ApronInterface.convex_hull_interpolate(390478)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<f_1030@255:1>]((-1 + <f_1030@261:0>):int,<f_1030@261:1>:int),
        ((<f_1030@261:0> < 51) && (<f_1030@261:0> > 5)) |- bot
        
        P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int), (
        <f_1030@255:0> < 51) |- P[<f_1030@255:1>](<f_1030@255:0>:int,
                                                  <f_1030@255:1>:int)
        
        P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
        <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,
                                                  <f_1030@249:1>:int)
        
        P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
        <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                  <f_1030@243:1>:int)
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
        <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                  <f_1030@237:1>:int)
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<fail_1153@299:0>](var1198:bool) = false
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = ((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
        P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int) = ((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
        P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int) = ((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
      upper bounds:
        P[<f_1030@255:1>](var1217:int,var1218:int) = ((var1217 <= 4) || (var1217 >= 50))
        P[<f_1030@249:1>](var1213:int,var1214:int) = ((var1213 <= 3) || (var1213 >= 49))
        P[<f_1030@243:1>](var1209:int,var1210:int) = ((var1209 <= 2) || (var1209 >= 48))
        P[<f_1030@237:1>](var1205:int,var1206:int) = ((var1205 <= 1) || (var1205 >= 47))
        P[<f_1030@231:1>](var1201:int,var1202:int) = ((var1201 <= 0) || (var1201 >= 46))
      begin GenHcSolver.classify_pids(398615)[4]
        output:
          [<f_1030@255:1>],[<f_1030@249:1>],[<f_1030@243:1>],[<f_1030@237:1>],[
          <f_1030@231:1>]
      end GenHcSolver.classify_pids(398615)[4] (0.002999 sec.)
      lb:((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
      nub:(not ((<f_1030@255:0> <= 4) || (<f_1030@255:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(399102)[4]
        lb:((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
        nub:(not ((<f_1030@255:0> <= 4) || (<f_1030@255:0> >= 50)))
        lb':((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
        nub':(not ((<f_1030@255:0> <= 4) || (<f_1030@255:0> >= 50)))
        begin InterpProver.interpolate(399103)[5]
          begin InterpProver.interpolate_fresh(399104)[6]
            begin InterpProver.interpolate_log(399105)[7]
              input1: ((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
              input2: (not ((<f_1030@255:0> <= 4) || (<f_1030@255:0> >= 50)))
              begin InterpProver.interpolate_check(399106)[8]
                begin InterpProver.interpolate_simplify(399107)[9]
                  begin InterpProver.interpolate_quick(399174)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(399183)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(399184)[12]
                        begin CsisatInterface.interpolate_csisat_log(399185)[13]
                          input1: 4 = v_sep_f_1030_sep_255_sep_0
                          input2: (5 <= v_sep_f_1030_sep_255_sep_0 & (1 + v_sep_f_1030_sep_255_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(399186)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(399186)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_255_sep_0 <= 8
                          
                        end CsisatInterface.interpolate_csisat_log(399185)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_255_sep_0 <= 8
                        after dnf conversion: ((2*v_sep_f_1030_sep_255_sep_0 <= 8))
                        
                      end CsisatInterface.interpolate_csisat_post_process(399184)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(399183)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(399174)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(399107)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(399106)[8] (0.002000 sec.)
              output: (<f_1030@255:0> <= 4)
            end InterpProver.interpolate_log(399105)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(399104)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(399103)[5] (0.002000 sec.)
        output:
          P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int) = (<f_1030@255:0> <= 4)
      end ApronInterface.convex_hull_interpolate(399102)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int),
        ((<f_1030@255:0> < 51) && (<f_1030@255:0> > 4)) |- bot
        
        P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
        <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,
                                                  <f_1030@249:1>:int)
        
        P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
        <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                  <f_1030@243:1>:int)
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
        <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                  <f_1030@237:1>:int)
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<fail_1153@299:0>](var1220:bool) = false
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = ((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
        P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int) = ((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
      upper bounds:
        P[<f_1030@249:1>](var1235:int,var1236:int) = ((var1235 <= 3) || (var1235 >= 50))
        P[<f_1030@243:1>](var1231:int,var1232:int) = ((var1231 <= 2) || (var1231 >= 49))
        P[<f_1030@237:1>](var1227:int,var1228:int) = ((var1227 <= 1) || (var1227 >= 48))
        P[<f_1030@231:1>](var1223:int,var1224:int) = ((var1223 <= 0) || (var1223 >= 47))
      begin GenHcSolver.classify_pids(405072)[4]
        output:
          [<f_1030@249:1>],[<f_1030@243:1>],[<f_1030@237:1>],[<f_1030@231:1>]
      end GenHcSolver.classify_pids(405072)[4] (0.001999 sec.)
      lb:((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
      nub:(not ((<f_1030@249:0> <= 3) || (<f_1030@249:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(405363)[4]
        lb:((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
        nub:(not ((<f_1030@249:0> <= 3) || (<f_1030@249:0> >= 50)))
        lb':((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
        nub':(not ((<f_1030@249:0> <= 3) || (<f_1030@249:0> >= 50)))
        begin InterpProver.interpolate(405364)[5]
          begin InterpProver.interpolate_fresh(405365)[6]
            begin InterpProver.interpolate_log(405366)[7]
              input1: ((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
              input2: (not ((<f_1030@249:0> <= 3) || (<f_1030@249:0> >= 50)))
              begin InterpProver.interpolate_check(405367)[8]
                begin InterpProver.interpolate_simplify(405368)[9]
                  begin InterpProver.interpolate_quick(405435)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(405444)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(405445)[12]
                        begin CsisatInterface.interpolate_csisat_log(405446)[13]
                          input1: 3 = v_sep_f_1030_sep_249_sep_0
                          input2: (4 <= v_sep_f_1030_sep_249_sep_0 & (1 + v_sep_f_1030_sep_249_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(405447)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(405447)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_249_sep_0 <= 6
                          
                        end CsisatInterface.interpolate_csisat_log(405446)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_249_sep_0 <= 6
                        after dnf conversion: ((2*v_sep_f_1030_sep_249_sep_0 <= 6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(405445)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(405444)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(405435)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(405368)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(405367)[8] (0.000000 sec.)
              output: (<f_1030@249:0> <= 3)
            end InterpProver.interpolate_log(405366)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(405365)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(405364)[5] (0.000000 sec.)
        output:
          P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int) = (<f_1030@249:0> <= 3)
      end ApronInterface.convex_hull_interpolate(405363)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int),
        ((<f_1030@249:0> < 51) && (<f_1030@249:0> > 3)) |- bot
        
        P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
        <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                  <f_1030@243:1>:int)
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
        <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                  <f_1030@237:1>:int)
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<fail_1153@299:0>](var1238:bool) = false
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = ((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
      upper bounds:
        P[<f_1030@243:1>](var1249:int,var1250:int) = ((var1249 <= 2) || (var1249 >= 50))
        P[<f_1030@237:1>](var1245:int,var1246:int) = ((var1245 <= 1) || (var1245 >= 49))
        P[<f_1030@231:1>](var1241:int,var1242:int) = ((var1241 <= 0) || (var1241 >= 48))
      begin GenHcSolver.classify_pids(409471)[4]
        output:
          [<f_1030@243:1>],[<f_1030@237:1>],[<f_1030@231:1>]
      end GenHcSolver.classify_pids(409471)[4] (0.001000 sec.)
      lb:((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
      nub:(not ((<f_1030@243:0> <= 2) || (<f_1030@243:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(409616)[4]
        lb:((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
        nub:(not ((<f_1030@243:0> <= 2) || (<f_1030@243:0> >= 50)))
        lb':((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
        nub':(not ((<f_1030@243:0> <= 2) || (<f_1030@243:0> >= 50)))
        begin InterpProver.interpolate(409617)[5]
          begin InterpProver.interpolate_fresh(409618)[6]
            begin InterpProver.interpolate_log(409619)[7]
              input1: ((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
              input2: (not ((<f_1030@243:0> <= 2) || (<f_1030@243:0> >= 50)))
              begin InterpProver.interpolate_check(409620)[8]
                begin InterpProver.interpolate_simplify(409621)[9]
                  begin InterpProver.interpolate_quick(409688)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(409697)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(409698)[12]
                        begin CsisatInterface.interpolate_csisat_log(409699)[13]
                          input1: 2 = v_sep_f_1030_sep_243_sep_0
                          input2: (3 <= v_sep_f_1030_sep_243_sep_0 & (1 + v_sep_f_1030_sep_243_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(409700)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(409700)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_243_sep_0 <= 4
                          
                        end CsisatInterface.interpolate_csisat_log(409699)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_243_sep_0 <= 4
                        after dnf conversion: ((2*v_sep_f_1030_sep_243_sep_0 <= 4))
                        
                      end CsisatInterface.interpolate_csisat_post_process(409698)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(409697)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(409688)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(409621)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(409620)[8] (0.001000 sec.)
              output: (<f_1030@243:0> <= 2)
            end InterpProver.interpolate_log(409619)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(409618)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(409617)[5] (0.001000 sec.)
        output:
          P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = (<f_1030@243:0> <= 2)
      end ApronInterface.convex_hull_interpolate(409616)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int),
        ((<f_1030@243:0> < 51) && (<f_1030@243:0> > 2)) |- bot
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
        <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                  <f_1030@237:1>:int)
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<fail_1153@299:0>](var1252:bool) = false
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
      upper bounds:
        P[<f_1030@237:1>](var1259:int,var1260:int) = ((var1259 <= 1) || (var1259 >= 50))
        P[<f_1030@231:1>](var1255:int,var1256:int) = ((var1255 <= 0) || (var1255 >= 49))
      begin GenHcSolver.classify_pids(412167)[4]
        output:
          [<f_1030@237:1>],[<f_1030@231:1>]
      end GenHcSolver.classify_pids(412167)[4] (0.000000 sec.)
      lb:((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
      nub:(not ((<f_1030@237:0> <= 1) || (<f_1030@237:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(412216)[4]
        lb:((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        nub:(not ((<f_1030@237:0> <= 1) || (<f_1030@237:0> >= 50)))
        lb':((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        nub':(not ((<f_1030@237:0> <= 1) || (<f_1030@237:0> >= 50)))
        begin InterpProver.interpolate(412217)[5]
          begin InterpProver.interpolate_fresh(412218)[6]
            begin InterpProver.interpolate_log(412219)[7]
              input1: ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
              input2: (not ((<f_1030@237:0> <= 1) || (<f_1030@237:0> >= 50)))
              begin InterpProver.interpolate_check(412220)[8]
                begin InterpProver.interpolate_simplify(412221)[9]
                  begin InterpProver.interpolate_quick(412288)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(412297)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(412298)[12]
                        begin CsisatInterface.interpolate_csisat_log(412299)[13]
                          input1: 1 = v_sep_f_1030_sep_237_sep_0
                          input2: (2 <= v_sep_f_1030_sep_237_sep_0 & (1 + v_sep_f_1030_sep_237_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(412300)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(412300)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_237_sep_0 <= 2
                          
                        end CsisatInterface.interpolate_csisat_log(412299)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_237_sep_0 <= 2
                        after dnf conversion: ((2*v_sep_f_1030_sep_237_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(412298)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(412297)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(412288)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(412221)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(412220)[8] (0.002000 sec.)
              output: (<f_1030@237:0> <= 1)
            end InterpProver.interpolate_log(412219)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(412218)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(412217)[5] (0.002000 sec.)
        output:
          P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = (<f_1030@237:0> <= 1)
      end ApronInterface.convex_hull_interpolate(412216)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int),
        ((<f_1030@237:0> < 51) && (<f_1030@237:0> > 1)) |- bot
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<fail_1153@299:0>](var1262:bool) = false
      upper bounds:
        P[<fail_1153@299:0>](var1265:bool) = true
      begin GenHcSolver.classify_pids(413165)[4]
        output:
          [<fail_1153@299:0>]
      end GenHcSolver.classify_pids(413165)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(413168)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(413169)[5]
          begin InterpProver.interpolate_fresh(413170)[6]
            begin InterpProver.interpolate_log(413171)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(413172)[8]
                begin InterpProver.interpolate_simplify(413173)[9]
                  begin InterpProver.interpolate_quick(413186)[10]
                    
                  end InterpProver.interpolate_quick(413186)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(413190)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(413190)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(413173)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(413172)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(413171)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(413170)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(413169)[5] (0.001000 sec.)
        output:
          P[<fail_1153@299:0>](var1262:bool) = false
      end ApronInterface.convex_hull_interpolate(413168)[4] (0.001000 sec.)
      Horn clauses:
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int),
        ((<f_1030@237:0> < 51) && (<f_1030@237:0> > 1)) |- bot
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
      upper bounds:
        P[<f_1030@231:1>](var1266:int,var1267:int) = ((var1266 <= 0) || (var1266 >= 50))
      begin GenHcSolver.classify_pids(414197)[4]
        output:
          [<f_1030@231:1>]
      end GenHcSolver.classify_pids(414197)[4] (0.000000 sec.)
      lb:((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
      nub:(not ((<f_1030@231:0> <= 0) || (<f_1030@231:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(414200)[4]
        lb:((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        nub:(not ((<f_1030@231:0> <= 0) || (<f_1030@231:0> >= 50)))
        lb':((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        nub':(not ((<f_1030@231:0> <= 0) || (<f_1030@231:0> >= 50)))
        begin InterpProver.interpolate(414201)[5]
          begin InterpProver.interpolate_fresh(414202)[6]
            begin InterpProver.interpolate_log(414203)[7]
              input1: ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
              input2: (not ((<f_1030@231:0> <= 0) || (<f_1030@231:0> >= 50)))
              begin InterpProver.interpolate_check(414204)[8]
                begin InterpProver.interpolate_simplify(414205)[9]
                  begin InterpProver.interpolate_quick(414261)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(414270)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(414271)[12]
                        begin CsisatInterface.interpolate_csisat_log(414272)[13]
                          input1: 0 = v_sep_f_1030_sep_231_sep_0
                          input2: (1 <= v_sep_f_1030_sep_231_sep_0 & (1 + v_sep_f_1030_sep_231_sep_0) <= 50)
                          begin CsisatInterface.interpolate_csisat_raw(414273)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(414273)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_231_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(414272)[13] (0.001000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_231_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_f_1030_sep_231_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(414271)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(414270)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(414261)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(414205)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(414204)[8] (0.001000 sec.)
              output: (<f_1030@231:0> <= 0)
            end InterpProver.interpolate_log(414203)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(414202)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(414201)[5] (0.001000 sec.)
        output:
          P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 0)
      end ApronInterface.convex_hull_interpolate(414200)[4] (0.001000 sec.)
      begin HcSolver.check_validity(414429)[4]
        input:
          P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
          
          P[<<f_1030@231:2>@294:0>](0:int,50:int,100:int), <fail_1153@299:0>
          |- P[<fail_1153@299:0>](<fail_1153@299:0>:bool)
          
          P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int),
          P[<<f_1030@237:2>@290:0>]((1 + <f_1030@231:0>):int,<f_1030@231:1>:int,<<f_1030@231:2>@294:0>:int),
          (<f_1030@231:0> < 50)
          |- P[<<f_1030@231:2>@294:0>](<f_1030@231:0>:int,<f_1030@231:1>:int,
                                       <<f_1030@231:2>@294:0>:int)
          
          P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int),
          P[<<f_1030@243:2>@286:0>]((1 + <f_1030@237:0>):int,<f_1030@237:1>:int,<<f_1030@237:2>@290:0>:int),
          (<f_1030@237:0> < 50)
          |- P[<<f_1030@237:2>@290:0>](<f_1030@237:0>:int,<f_1030@237:1>:int,
                                       <<f_1030@237:2>@290:0>:int)
          
          P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int),
          P[<<f_1030@249:2>@282:0>]((1 + <f_1030@243:0>):int,<f_1030@243:1>:int,<<f_1030@243:2>@286:0>:int),
          (<f_1030@243:0> < 50)
          |- P[<<f_1030@243:2>@286:0>](<f_1030@243:0>:int,<f_1030@243:1>:int,
                                       <<f_1030@243:2>@286:0>:int)
          
          P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int),
          P[<<f_1030@255:2>@278:0>]((1 + <f_1030@249:0>):int,<f_1030@249:1>:int,<<f_1030@249:2>@282:0>:int),
          (<f_1030@249:0> < 50)
          |- P[<<f_1030@249:2>@282:0>](<f_1030@249:0>:int,<f_1030@249:1>:int,
                                       <<f_1030@249:2>@282:0>:int)
          
          P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int),
          P[<<f_1030@261:2>@274:0>]((1 + <f_1030@255:0>):int,<f_1030@255:1>:int,<<f_1030@255:2>@278:0>:int),
          (<f_1030@255:0> < 50)
          |- P[<<f_1030@255:2>@278:0>](<f_1030@255:0>:int,<f_1030@255:1>:int,
                                       <<f_1030@255:2>@278:0>:int)
          
          P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int),
          P[<<f_1030@267:2>@270:0>]((1 + <f_1030@261:0>):int,<f_1030@261:1>:int,<<f_1030@261:2>@274:0>:int),
          (<f_1030@261:0> < 50)
          |- P[<<f_1030@261:2>@274:0>](<f_1030@261:0>:int,<f_1030@261:1>:int,
                                       <<f_1030@261:2>@274:0>:int)
          
          P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int),
          ((<f_1030@267:0> >= 100) && (<<f_1030@267:2>@270:0> = <f_1030@267:1>))
          |- P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,
                                       <<f_1030@267:2>@270:0>:int)
          
          P[<f_1030@261:1>]((-1 + <f_1030@267:0>):int,<f_1030@267:1>:int), (
          <f_1030@267:0> < 51) |- P[<f_1030@267:1>](<f_1030@267:0>:int,
                                                    <f_1030@267:1>:int)
          
          P[<f_1030@255:1>]((-1 + <f_1030@261:0>):int,<f_1030@261:1>:int), (
          <f_1030@261:0> < 51) |- P[<f_1030@261:1>](<f_1030@261:0>:int,
                                                    <f_1030@261:1>:int)
          
          P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int), (
          <f_1030@255:0> < 51) |- P[<f_1030@255:1>](<f_1030@255:0>:int,
                                                    <f_1030@255:1>:int)
          
          P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
          <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,
                                                    <f_1030@249:1>:int)
          
          P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
          <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                    <f_1030@243:1>:int)
          
          P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
          <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                    <f_1030@237:1>:int)
          
           ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(414429)[4] (0.003999 sec.)
      solution:
        P[<fail_1153@299:0>](var1262:bool) = false
        P[<<f_1030@231:2>@294:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<<f_1030@237:2>@290:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<<f_1030@243:2>@286:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<<f_1030@249:2>@282:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<<f_1030@255:2>@278:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<<f_1030@261:2>@274:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<f_1030@267:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
        P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int) = (<f_1030@261:0> <= 5)
        P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int) = (<f_1030@255:0> <= 4)
        P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int) = (<f_1030@249:0> <= 3)
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = (<f_1030@243:0> <= 2)
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = (<f_1030@237:0> <= 1)
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 0)
    end GenHcSolver.solve(337799)[3] (0.311952 sec.)
    begin GenHcSolver.solve(415377)[3]
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<<f_1030@231:2>@294:0>](0:int,50:int,100:int), <fail_1153@299:0>
        |- P[<fail_1153@299:0>](<fail_1153@299:0>:bool)
        
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int),
        P[<<f_1030@237:2>@290:0>]((1 + <f_1030@231:0>):int,<f_1030@231:1>:int,<<f_1030@231:2>@294:0>:int),
        (<f_1030@231:0> < 50)
        |- P[<<f_1030@231:2>@294:0>](<f_1030@231:0>:int,<f_1030@231:1>:int,
                                     <<f_1030@231:2>@294:0>:int)
        
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int),
        P[<<f_1030@243:2>@286:0>]((1 + <f_1030@237:0>):int,<f_1030@237:1>:int,<<f_1030@237:2>@290:0>:int),
        (<f_1030@237:0> < 50)
        |- P[<<f_1030@237:2>@290:0>](<f_1030@237:0>:int,<f_1030@237:1>:int,
                                     <<f_1030@237:2>@290:0>:int)
        
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int),
        P[<<f_1030@249:2>@282:0>]((1 + <f_1030@243:0>):int,<f_1030@243:1>:int,<<f_1030@243:2>@286:0>:int),
        (<f_1030@243:0> < 50)
        |- P[<<f_1030@243:2>@286:0>](<f_1030@243:0>:int,<f_1030@243:1>:int,
                                     <<f_1030@243:2>@286:0>:int)
        
        P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int),
        P[<<f_1030@255:2>@278:0>]((1 + <f_1030@249:0>):int,<f_1030@249:1>:int,<<f_1030@249:2>@282:0>:int),
        (<f_1030@249:0> < 50)
        |- P[<<f_1030@249:2>@282:0>](<f_1030@249:0>:int,<f_1030@249:1>:int,
                                     <<f_1030@249:2>@282:0>:int)
        
        P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int),
        P[<<f_1030@261:2>@274:0>]((1 + <f_1030@255:0>):int,<f_1030@255:1>:int,<<f_1030@255:2>@278:0>:int),
        (<f_1030@255:0> < 50)
        |- P[<<f_1030@255:2>@278:0>](<f_1030@255:0>:int,<f_1030@255:1>:int,
                                     <<f_1030@255:2>@278:0>:int)
        
        P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int),
        P[<<f_1030@267:2>@270:0>]((1 + <f_1030@261:0>):int,<f_1030@261:1>:int,<<f_1030@261:2>@274:0>:int),
        (<f_1030@261:0> < 50)
        |- P[<<f_1030@261:2>@274:0>](<f_1030@261:0>:int,<f_1030@261:1>:int,
                                     <<f_1030@261:2>@274:0>:int)
        
        P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int),
        ((<f_1030@267:0> >= 100) && (<<f_1030@267:2>@270:0> = <f_1030@267:1>))
        |- P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,
                                     <<f_1030@267:2>@270:0>:int)
        
        P[<f_1030@261:1>]((-1 + <f_1030@267:0>):int,<f_1030@267:1>:int), (
        <f_1030@267:0> < 51) |- P[<f_1030@267:1>](<f_1030@267:0>:int,
                                                  <f_1030@267:1>:int)
        
        P[<f_1030@255:1>]((-1 + <f_1030@261:0>):int,<f_1030@261:1>:int), (
        <f_1030@261:0> < 51) |- P[<f_1030@261:1>](<f_1030@261:0>:int,
                                                  <f_1030@261:1>:int)
        
        P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int), (
        <f_1030@255:0> < 51) |- P[<f_1030@255:1>](<f_1030@255:0>:int,
                                                  <f_1030@255:1>:int)
        
        P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
        <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,
                                                  <f_1030@249:1>:int)
        
        P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
        <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                  <f_1030@243:1>:int)
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
        <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                  <f_1030@237:1>:int)
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = ((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
        P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int) = ((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
        P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int) = ((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
        P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int) = ((<f_1030@261:0> = 5) && (<f_1030@261:1> = 50))
        P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int) = ((<f_1030@267:0> = 6) && (<f_1030@267:1> = 50))
        P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<<f_1030@261:2>@274:0>](<f_1030@261:0>:int,<f_1030@261:1>:int,<<f_1030@261:2>@274:0>:int) = false
        P[<<f_1030@255:2>@278:0>](<f_1030@255:0>:int,<f_1030@255:1>:int,<<f_1030@255:2>@278:0>:int) = false
        P[<<f_1030@249:2>@282:0>](<f_1030@249:0>:int,<f_1030@249:1>:int,<<f_1030@249:2>@282:0>:int) = false
        P[<<f_1030@243:2>@286:0>](<f_1030@243:0>:int,<f_1030@243:1>:int,<<f_1030@243:2>@286:0>:int) = false
        P[<<f_1030@237:2>@290:0>](<f_1030@237:0>:int,<f_1030@237:1>:int,<<f_1030@237:2>@290:0>:int) = false
        P[<<f_1030@231:2>@294:0>](<f_1030@231:0>:int,<f_1030@231:1>:int,<<f_1030@231:2>@294:0>:int) = false
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool) = false
      upper bounds:
        P[<<f_1030@231:2>@294:0>](var1307:int,var1308:int,var1309:int) = true
        P[<<f_1030@237:2>@290:0>](var1301:int,var1302:int,var1303:int) = true
        P[<<f_1030@243:2>@286:0>](var1295:int,var1296:int,var1297:int) = true
        P[<<f_1030@249:2>@282:0>](var1289:int,var1290:int,var1291:int) = true
        P[<<f_1030@255:2>@278:0>](var1283:int,var1284:int,var1285:int) = true
        P[<<f_1030@261:2>@274:0>](var1277:int,var1278:int,var1279:int) = true
        P[<<f_1030@267:2>@270:0>](var1271:int,var1272:int,var1273:int) = true
      begin GenHcSolver.classify_pids(432362)[4]
        output:
          [<<f_1030@267:2>@270:0>;<<f_1030@261:2>@274:0>;<<f_1030@255:2>@278:0>;<<f_1030@249:2>@282:0>;<<f_1030@243:2>@286:0>;<<f_1030@237:2>@290:0>;<<f_1030@231:2>@294:0>]
      end GenHcSolver.classify_pids(432362)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(432443)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(432446)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(432446)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(432451)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(432451)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(432454)[5]
          begin InterpProver.interpolate_fresh(432455)[6]
            begin InterpProver.interpolate_log(432456)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(432457)[8]
                begin InterpProver.interpolate_simplify(432458)[9]
                  begin InterpProver.interpolate_quick(432473)[10]
                    
                  end InterpProver.interpolate_quick(432473)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(432477)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(432477)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(432458)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(432457)[8] (0.000999 sec.)
              output: false
            end InterpProver.interpolate_log(432456)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(432455)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(432454)[5] (0.000999 sec.)
        output:
          P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
          P[<<f_1030@261:2>@274:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
          P[<<f_1030@255:2>@278:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
          P[<<f_1030@249:2>@282:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
          P[<<f_1030@243:2>@286:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
          P[<<f_1030@237:2>@290:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
          P[<<f_1030@231:2>@294:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
      end ApronInterface.convex_hull_interpolate(432443)[4] (0.001999 sec.)
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<f_1030@267:1>](<f_1030@267:0>:int,<<f_1030@267:2>@270:0>:int), (<f_1030@267:0> >= 100) |- bot
        
        P[<f_1030@261:1>]((-1 + <f_1030@267:0>):int,<f_1030@267:1>:int), (
        <f_1030@267:0> < 51) |- P[<f_1030@267:1>](<f_1030@267:0>:int,
                                                  <f_1030@267:1>:int)
        
        P[<f_1030@255:1>]((-1 + <f_1030@261:0>):int,<f_1030@261:1>:int), (
        <f_1030@261:0> < 51) |- P[<f_1030@261:1>](<f_1030@261:0>:int,
                                                  <f_1030@261:1>:int)
        
        P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int), (
        <f_1030@255:0> < 51) |- P[<f_1030@255:1>](<f_1030@255:0>:int,
                                                  <f_1030@255:1>:int)
        
        P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
        <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,
                                                  <f_1030@249:1>:int)
        
        P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
        <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                  <f_1030@243:1>:int)
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
        <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                  <f_1030@237:1>:int)
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<fail_1153@299:0>](var1318:bool) = false
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = ((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
        P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int) = ((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
        P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int) = ((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
        P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int) = ((<f_1030@261:0> = 5) && (<f_1030@261:1> = 50))
        P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int) = ((<f_1030@267:0> = 6) && (<f_1030@267:1> = 50))
      upper bounds:
        P[<f_1030@267:1>](var1345:int,var1346:int) = (var1345 < 100)
        P[<f_1030@261:1>](var1341:int,var1342:int) = true
        P[<f_1030@255:1>](var1337:int,var1338:int) = true
        P[<f_1030@249:1>](var1333:int,var1334:int) = true
        P[<f_1030@243:1>](var1329:int,var1330:int) = true
        P[<f_1030@237:1>](var1325:int,var1326:int) = true
        P[<f_1030@231:1>](var1321:int,var1322:int) = true
      begin GenHcSolver.classify_pids(450824)[4]
        output:
          [<f_1030@231:1>;<f_1030@237:1>;<f_1030@243:1>;<f_1030@249:1>;<f_1030@255:1>;<f_1030@261:1>;<f_1030@267:1>]
      end GenHcSolver.classify_pids(450824)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(450959)[4]
        lb:(((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) ||
            (((<f_1030@231:0> = 1) && (<f_1030@231:1> = 50)) ||
             (((<f_1030@231:0> = 2) && (<f_1030@231:1> = 50)) ||
              (((<f_1030@231:0> = 3) && (<f_1030@231:1> = 50)) ||
               (((<f_1030@231:0> = 4) && (<f_1030@231:1> = 50)) ||
                (((<f_1030@231:0> = 5) && (<f_1030@231:1> = 50)) || ((<f_1030@231:0> = 6) && (<f_1030@231:1> = 50))))))))
        nub:(not (<f_1030@231:0> < 100))
        begin ExtFormula.Formula.case_analysis_boolean(451246)[5]
          ts: ((<f_1030@231:1> = 50) &&
               ((<f_1030@231:0> = 0) ||
                ((<f_1030@231:0> = 5) ||
                 ((<f_1030@231:0> = 4) ||
                  ((<f_1030@231:0> = 3) || ((<f_1030@231:0> = 2) || ((<f_1030@231:0> = 1) || (<f_1030@231:0> = 6))))))))
          
        end ExtFormula.Formula.case_analysis_boolean(451246)[5] (0.000999 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(451280)[5]
          ts: (<f_1030@231:0> >= 100)
          
        end ExtFormula.Formula.case_analysis_boolean(451280)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@231:1>) = 0) && (((6 + (-1 * <f_1030@231:0>)) >= 0) && (<f_1030@231:0> >= 0)))
        nub':((-100 + <f_1030@231:0>) >= 0)
        begin InterpProver.interpolate(451285)[5]
          begin InterpProver.interpolate_fresh(451286)[6]
            begin InterpProver.interpolate_log(451287)[7]
              input1: (((-50 + <f_1030@231:1>) = 0) && (((6 + (-1 * <f_1030@231:0>)) >= 0) && (<f_1030@231:0> >= 0)))
              input2: ((-100 + <f_1030@231:0>) >= 0)
              begin InterpProver.interpolate_check(451288)[8]
                begin InterpProver.interpolate_simplify(451289)[9]
                  begin InterpProver.interpolate_quick(451386)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(451395)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(451396)[12]
                        begin CsisatInterface.interpolate_csisat_log(451397)[13]
                          input1: (0 <= v_sep_f_1030_sep_231_sep_0 & v_sep_f_1030_sep_231_sep_0 <= 6)
                          input2: 100 <= v_sep_f_1030_sep_231_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(451398)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(451398)[14] (0.000000 sec.)
                          output: 0.0212765957447*v_sep_f_1030_sep_231_sep_0 <= 0.127659574468
                          
                        end CsisatInterface.interpolate_csisat_log(451397)[13] (0.000000 sec.)
                        after simplification: v_sep_f_1030_sep_231_sep_0 <= 6
                        after dnf conversion: ((v_sep_f_1030_sep_231_sep_0 <= 6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(451396)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(451395)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(451386)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(451289)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(451288)[8] (0.002000 sec.)
              output: (<f_1030@231:0> <= 6)
            end InterpProver.interpolate_log(451287)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(451286)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(451285)[5] (0.003000 sec.)
        output:
          P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
          P[<f_1030@237:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
          P[<f_1030@243:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
          P[<f_1030@249:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
          P[<f_1030@255:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
          P[<f_1030@261:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
          P[<f_1030@267:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
      end ApronInterface.convex_hull_interpolate(450959)[4] (0.005999 sec.)
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<f_1030@261:1>]((-1 + <f_1030@267:0>):int,<f_1030@267:1>:int),
        ((<f_1030@267:0> < 51) && (<f_1030@267:0> > 6)) |- bot
        
        P[<f_1030@255:1>]((-1 + <f_1030@261:0>):int,<f_1030@261:1>:int), (
        <f_1030@261:0> < 51) |- P[<f_1030@261:1>](<f_1030@261:0>:int,
                                                  <f_1030@261:1>:int)
        
        P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int), (
        <f_1030@255:0> < 51) |- P[<f_1030@255:1>](<f_1030@255:0>:int,
                                                  <f_1030@255:1>:int)
        
        P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
        <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,
                                                  <f_1030@249:1>:int)
        
        P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
        <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                  <f_1030@243:1>:int)
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
        <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                  <f_1030@237:1>:int)
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<fail_1153@299:0>](var1355:bool) = false
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = ((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
        P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int) = ((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
        P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int) = ((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
        P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int) = ((<f_1030@261:0> = 5) && (<f_1030@261:1> = 50))
      upper bounds:
        P[<f_1030@261:1>](var1378:int,var1379:int) = ((var1378 <= 5) || (var1378 >= 50))
        P[<f_1030@255:1>](var1374:int,var1375:int) = ((var1374 <= 4) || (var1374 >= 49))
        P[<f_1030@249:1>](var1370:int,var1371:int) = ((var1370 <= 3) || (var1370 >= 48))
        P[<f_1030@243:1>](var1366:int,var1367:int) = ((var1366 <= 2) || (var1366 >= 47))
        P[<f_1030@237:1>](var1362:int,var1363:int) = ((var1362 <= 1) || (var1362 >= 46))
        P[<f_1030@231:1>](var1358:int,var1359:int) = ((var1358 <= 0) || (var1358 >= 45))
      begin GenHcSolver.classify_pids(467205)[4]
        output:
          [<f_1030@261:1>],[<f_1030@255:1>],[<f_1030@249:1>],[<f_1030@243:1>],[
          <f_1030@237:1>],[<f_1030@231:1>]
      end GenHcSolver.classify_pids(467205)[4] (0.002000 sec.)
      lb:((<f_1030@261:0> = 5) && (<f_1030@261:1> = 50))
      nub:(not ((<f_1030@261:0> <= 5) || (<f_1030@261:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(467938)[4]
        lb:((<f_1030@261:0> = 5) && (<f_1030@261:1> = 50))
        nub:(not ((<f_1030@261:0> <= 5) || (<f_1030@261:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(467950)[5]
          ts: ((<f_1030@261:0> = 5) && (<f_1030@261:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(467950)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(467974)[5]
          ts: ((<f_1030@261:0> < 50) && (<f_1030@261:0> > 5))
          
        end ExtFormula.Formula.case_analysis_boolean(467974)[5] (0.001000 sec.)
        lb':(((-50 + <f_1030@261:1>) = 0) && ((-5 + <f_1030@261:0>) = 0))
        nub':(((49 + (-1 * <f_1030@261:0>)) >= 0) && ((-6 + <f_1030@261:0>) >= 0))
        begin InterpProver.interpolate(467981)[5]
          begin InterpProver.interpolate_fresh(467982)[6]
            begin InterpProver.interpolate_log(467983)[7]
              input1: (((-50 + <f_1030@261:1>) = 0) && ((-5 + <f_1030@261:0>) = 0))
              input2: (((49 + (-1 * <f_1030@261:0>)) >= 0) && ((-6 + <f_1030@261:0>) >= 0))
              begin InterpProver.interpolate_check(467984)[8]
                begin InterpProver.interpolate_simplify(467985)[9]
                  begin InterpProver.interpolate_quick(468052)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(468061)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(468062)[12]
                        begin CsisatInterface.interpolate_csisat_log(468063)[13]
                          input1: 5 = v_sep_f_1030_sep_261_sep_0
                          input2: (6 <= v_sep_f_1030_sep_261_sep_0 & v_sep_f_1030_sep_261_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(468064)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(468064)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_261_sep_0 <= 10
                          
                        end CsisatInterface.interpolate_csisat_log(468063)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_261_sep_0 <= 10
                        after dnf conversion: ((2*v_sep_f_1030_sep_261_sep_0 <= 10))
                        
                      end CsisatInterface.interpolate_csisat_post_process(468062)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(468061)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(468052)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(467985)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(467984)[8] (0.001999 sec.)
              output: (<f_1030@261:0> <= 5)
            end InterpProver.interpolate_log(467983)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(467982)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(467981)[5] (0.001999 sec.)
        output:
          P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int) = (<f_1030@261:0> <= 5)
      end ApronInterface.convex_hull_interpolate(467938)[4] (0.002999 sec.)
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<f_1030@255:1>]((-1 + <f_1030@261:0>):int,<f_1030@261:1>:int),
        ((<f_1030@261:0> < 51) && (<f_1030@261:0> > 5)) |- bot
        
        P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int), (
        <f_1030@255:0> < 51) |- P[<f_1030@255:1>](<f_1030@255:0>:int,
                                                  <f_1030@255:1>:int)
        
        P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
        <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,
                                                  <f_1030@249:1>:int)
        
        P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
        <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                  <f_1030@243:1>:int)
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
        <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                  <f_1030@237:1>:int)
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<fail_1153@299:0>](var1381:bool) = false
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = ((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
        P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int) = ((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
        P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int) = ((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
      upper bounds:
        P[<f_1030@255:1>](var1400:int,var1401:int) = ((var1400 <= 4) || (var1400 >= 50))
        P[<f_1030@249:1>](var1396:int,var1397:int) = ((var1396 <= 3) || (var1396 >= 49))
        P[<f_1030@243:1>](var1392:int,var1393:int) = ((var1392 <= 2) || (var1392 >= 48))
        P[<f_1030@237:1>](var1388:int,var1389:int) = ((var1388 <= 1) || (var1388 >= 47))
        P[<f_1030@231:1>](var1384:int,var1385:int) = ((var1384 <= 0) || (var1384 >= 46))
      begin GenHcSolver.classify_pids(476117)[4]
        output:
          [<f_1030@255:1>],[<f_1030@249:1>],[<f_1030@243:1>],[<f_1030@237:1>],[
          <f_1030@231:1>]
      end GenHcSolver.classify_pids(476117)[4] (0.003999 sec.)
      lb:((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
      nub:(not ((<f_1030@255:0> <= 4) || (<f_1030@255:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(476604)[4]
        lb:((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
        nub:(not ((<f_1030@255:0> <= 4) || (<f_1030@255:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(476616)[5]
          ts: ((<f_1030@255:0> = 4) && (<f_1030@255:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(476616)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(476640)[5]
          ts: ((<f_1030@255:0> < 50) && (<f_1030@255:0> > 4))
          
        end ExtFormula.Formula.case_analysis_boolean(476640)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@255:1>) = 0) && ((-4 + <f_1030@255:0>) = 0))
        nub':(((49 + (-1 * <f_1030@255:0>)) >= 0) && ((-5 + <f_1030@255:0>) >= 0))
        begin InterpProver.interpolate(476647)[5]
          begin InterpProver.interpolate_fresh(476648)[6]
            begin InterpProver.interpolate_log(476649)[7]
              input1: (((-50 + <f_1030@255:1>) = 0) && ((-4 + <f_1030@255:0>) = 0))
              input2: (((49 + (-1 * <f_1030@255:0>)) >= 0) && ((-5 + <f_1030@255:0>) >= 0))
              begin InterpProver.interpolate_check(476650)[8]
                begin InterpProver.interpolate_simplify(476651)[9]
                  begin InterpProver.interpolate_quick(476718)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(476727)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(476728)[12]
                        begin CsisatInterface.interpolate_csisat_log(476729)[13]
                          input1: 4 = v_sep_f_1030_sep_255_sep_0
                          input2: (5 <= v_sep_f_1030_sep_255_sep_0 & v_sep_f_1030_sep_255_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(476730)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(476730)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_255_sep_0 <= 8
                          
                        end CsisatInterface.interpolate_csisat_log(476729)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_255_sep_0 <= 8
                        after dnf conversion: ((2*v_sep_f_1030_sep_255_sep_0 <= 8))
                        
                      end CsisatInterface.interpolate_csisat_post_process(476728)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(476727)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(476718)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(476651)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(476650)[8] (0.002000 sec.)
              output: (<f_1030@255:0> <= 4)
            end InterpProver.interpolate_log(476649)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(476648)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(476647)[5] (0.002000 sec.)
        output:
          P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int) = (<f_1030@255:0> <= 4)
      end ApronInterface.convex_hull_interpolate(476604)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int),
        ((<f_1030@255:0> < 51) && (<f_1030@255:0> > 4)) |- bot
        
        P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
        <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,
                                                  <f_1030@249:1>:int)
        
        P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
        <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                  <f_1030@243:1>:int)
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
        <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                  <f_1030@237:1>:int)
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<fail_1153@299:0>](var1403:bool) = false
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = ((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
        P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int) = ((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
      upper bounds:
        P[<f_1030@249:1>](var1418:int,var1419:int) = ((var1418 <= 3) || (var1418 >= 50))
        P[<f_1030@243:1>](var1414:int,var1415:int) = ((var1414 <= 2) || (var1414 >= 49))
        P[<f_1030@237:1>](var1410:int,var1411:int) = ((var1410 <= 1) || (var1410 >= 48))
        P[<f_1030@231:1>](var1406:int,var1407:int) = ((var1406 <= 0) || (var1406 >= 47))
      begin GenHcSolver.classify_pids(482616)[4]
        output:
          [<f_1030@249:1>],[<f_1030@243:1>],[<f_1030@237:1>],[<f_1030@231:1>]
      end GenHcSolver.classify_pids(482616)[4] (0.002999 sec.)
      lb:((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
      nub:(not ((<f_1030@249:0> <= 3) || (<f_1030@249:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(482907)[4]
        lb:((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
        nub:(not ((<f_1030@249:0> <= 3) || (<f_1030@249:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(482919)[5]
          ts: ((<f_1030@249:0> = 3) && (<f_1030@249:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(482919)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(482943)[5]
          ts: ((<f_1030@249:0> < 50) && (<f_1030@249:0> > 3))
          
        end ExtFormula.Formula.case_analysis_boolean(482943)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@249:1>) = 0) && ((-3 + <f_1030@249:0>) = 0))
        nub':(((49 + (-1 * <f_1030@249:0>)) >= 0) && ((-4 + <f_1030@249:0>) >= 0))
        begin InterpProver.interpolate(482950)[5]
          begin InterpProver.interpolate_fresh(482951)[6]
            begin InterpProver.interpolate_log(482952)[7]
              input1: (((-50 + <f_1030@249:1>) = 0) && ((-3 + <f_1030@249:0>) = 0))
              input2: (((49 + (-1 * <f_1030@249:0>)) >= 0) && ((-4 + <f_1030@249:0>) >= 0))
              begin InterpProver.interpolate_check(482953)[8]
                begin InterpProver.interpolate_simplify(482954)[9]
                  begin InterpProver.interpolate_quick(483021)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(483030)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(483031)[12]
                        begin CsisatInterface.interpolate_csisat_log(483032)[13]
                          input1: 3 = v_sep_f_1030_sep_249_sep_0
                          input2: (4 <= v_sep_f_1030_sep_249_sep_0 & v_sep_f_1030_sep_249_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(483033)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(483033)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_249_sep_0 <= 6
                          
                        end CsisatInterface.interpolate_csisat_log(483032)[13] (0.001000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_249_sep_0 <= 6
                        after dnf conversion: ((2*v_sep_f_1030_sep_249_sep_0 <= 6))
                        
                      end CsisatInterface.interpolate_csisat_post_process(483031)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(483030)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(483021)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(482954)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(482953)[8] (0.001000 sec.)
              output: (<f_1030@249:0> <= 3)
            end InterpProver.interpolate_log(482952)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(482951)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(482950)[5] (0.001000 sec.)
        output:
          P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int) = (<f_1030@249:0> <= 3)
      end ApronInterface.convex_hull_interpolate(482907)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int),
        ((<f_1030@249:0> < 51) && (<f_1030@249:0> > 3)) |- bot
        
        P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
        <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                  <f_1030@243:1>:int)
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
        <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                  <f_1030@237:1>:int)
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<fail_1153@299:0>](var1421:bool) = false
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = ((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
      upper bounds:
        P[<f_1030@243:1>](var1432:int,var1433:int) = ((var1432 <= 2) || (var1432 >= 50))
        P[<f_1030@237:1>](var1428:int,var1429:int) = ((var1428 <= 1) || (var1428 >= 49))
        P[<f_1030@231:1>](var1424:int,var1425:int) = ((var1424 <= 0) || (var1424 >= 48))
      begin GenHcSolver.classify_pids(487057)[4]
        output:
          [<f_1030@243:1>],[<f_1030@237:1>],[<f_1030@231:1>]
      end GenHcSolver.classify_pids(487057)[4] (0.002000 sec.)
      lb:((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
      nub:(not ((<f_1030@243:0> <= 2) || (<f_1030@243:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(487202)[4]
        lb:((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
        nub:(not ((<f_1030@243:0> <= 2) || (<f_1030@243:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(487214)[5]
          ts: ((<f_1030@243:0> = 2) && (<f_1030@243:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(487214)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(487238)[5]
          ts: ((<f_1030@243:0> < 50) && (<f_1030@243:0> > 2))
          
        end ExtFormula.Formula.case_analysis_boolean(487238)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@243:1>) = 0) && ((-2 + <f_1030@243:0>) = 0))
        nub':(((49 + (-1 * <f_1030@243:0>)) >= 0) && ((-3 + <f_1030@243:0>) >= 0))
        begin InterpProver.interpolate(487245)[5]
          begin InterpProver.interpolate_fresh(487246)[6]
            begin InterpProver.interpolate_log(487247)[7]
              input1: (((-50 + <f_1030@243:1>) = 0) && ((-2 + <f_1030@243:0>) = 0))
              input2: (((49 + (-1 * <f_1030@243:0>)) >= 0) && ((-3 + <f_1030@243:0>) >= 0))
              begin InterpProver.interpolate_check(487248)[8]
                begin InterpProver.interpolate_simplify(487249)[9]
                  begin InterpProver.interpolate_quick(487316)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(487325)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(487326)[12]
                        begin CsisatInterface.interpolate_csisat_log(487327)[13]
                          input1: 2 = v_sep_f_1030_sep_243_sep_0
                          input2: (3 <= v_sep_f_1030_sep_243_sep_0 & v_sep_f_1030_sep_243_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(487328)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(487328)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_243_sep_0 <= 4
                          
                        end CsisatInterface.interpolate_csisat_log(487327)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_243_sep_0 <= 4
                        after dnf conversion: ((2*v_sep_f_1030_sep_243_sep_0 <= 4))
                        
                      end CsisatInterface.interpolate_csisat_post_process(487326)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(487325)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(487316)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(487249)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(487248)[8] (0.000000 sec.)
              output: (<f_1030@243:0> <= 2)
            end InterpProver.interpolate_log(487247)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(487246)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(487245)[5] (0.000000 sec.)
        output:
          P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = (<f_1030@243:0> <= 2)
      end ApronInterface.convex_hull_interpolate(487202)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int),
        ((<f_1030@243:0> < 51) && (<f_1030@243:0> > 2)) |- bot
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
        <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                  <f_1030@237:1>:int)
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<fail_1153@299:0>](var1435:bool) = false
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
      upper bounds:
        P[<f_1030@237:1>](var1442:int,var1443:int) = ((var1442 <= 1) || (var1442 >= 50))
        P[<f_1030@231:1>](var1438:int,var1439:int) = ((var1438 <= 0) || (var1438 >= 49))
      begin GenHcSolver.classify_pids(489795)[4]
        output:
          [<f_1030@237:1>],[<f_1030@231:1>]
      end GenHcSolver.classify_pids(489795)[4] (0.000000 sec.)
      lb:((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
      nub:(not ((<f_1030@237:0> <= 1) || (<f_1030@237:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(489844)[4]
        lb:((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
        nub:(not ((<f_1030@237:0> <= 1) || (<f_1030@237:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(489856)[5]
          ts: ((<f_1030@237:0> = 1) && (<f_1030@237:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(489856)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(489880)[5]
          ts: ((<f_1030@237:0> < 50) && (<f_1030@237:0> > 1))
          
        end ExtFormula.Formula.case_analysis_boolean(489880)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@237:1>) = 0) && ((-1 + <f_1030@237:0>) = 0))
        nub':(((49 + (-1 * <f_1030@237:0>)) >= 0) && ((-2 + <f_1030@237:0>) >= 0))
        begin InterpProver.interpolate(489887)[5]
          begin InterpProver.interpolate_fresh(489888)[6]
            begin InterpProver.interpolate_log(489889)[7]
              input1: (((-50 + <f_1030@237:1>) = 0) && ((-1 + <f_1030@237:0>) = 0))
              input2: (((49 + (-1 * <f_1030@237:0>)) >= 0) && ((-2 + <f_1030@237:0>) >= 0))
              begin InterpProver.interpolate_check(489890)[8]
                begin InterpProver.interpolate_simplify(489891)[9]
                  begin InterpProver.interpolate_quick(489958)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(489967)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(489968)[12]
                        begin CsisatInterface.interpolate_csisat_log(489969)[13]
                          input1: 1 = v_sep_f_1030_sep_237_sep_0
                          input2: (2 <= v_sep_f_1030_sep_237_sep_0 & v_sep_f_1030_sep_237_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(489970)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(489970)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_237_sep_0 <= 2
                          
                        end CsisatInterface.interpolate_csisat_log(489969)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_237_sep_0 <= 2
                        after dnf conversion: ((2*v_sep_f_1030_sep_237_sep_0 <= 2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(489968)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(489967)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(489958)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(489891)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(489890)[8] (0.002000 sec.)
              output: (<f_1030@237:0> <= 1)
            end InterpProver.interpolate_log(489889)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(489888)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(489887)[5] (0.002000 sec.)
        output:
          P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = (<f_1030@237:0> <= 1)
      end ApronInterface.convex_hull_interpolate(489844)[4] (0.002999 sec.)
      Horn clauses:
        P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
        
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int),
        ((<f_1030@237:0> < 51) && (<f_1030@237:0> > 1)) |- bot
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        P[<fail_1153@299:0>](var1445:bool) = false
      upper bounds:
        P[<fail_1153@299:0>](var1448:bool) = true
      begin GenHcSolver.classify_pids(490835)[4]
        output:
          [<fail_1153@299:0>]
      end GenHcSolver.classify_pids(490835)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(490838)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(490841)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(490841)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(490846)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(490846)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(490849)[5]
          begin InterpProver.interpolate_fresh(490850)[6]
            begin InterpProver.interpolate_log(490851)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(490852)[8]
                begin InterpProver.interpolate_simplify(490853)[9]
                  begin InterpProver.interpolate_quick(490868)[10]
                    
                  end InterpProver.interpolate_quick(490868)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(490872)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(490872)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(490853)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(490852)[8] (0.000999 sec.)
              output: false
            end InterpProver.interpolate_log(490851)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(490850)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(490849)[5] (0.000999 sec.)
        output:
          P[<fail_1153@299:0>](var1445:bool) = false
      end ApronInterface.convex_hull_interpolate(490838)[4] (0.000999 sec.)
      Horn clauses:
        P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int),
        ((<f_1030@237:0> < 51) && (<f_1030@237:0> > 1)) |- bot
        
         ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
      lower bounds:
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
      upper bounds:
        P[<f_1030@231:1>](var1449:int,var1450:int) = ((var1449 <= 0) || (var1449 >= 50))
      begin GenHcSolver.classify_pids(491886)[4]
        output:
          [<f_1030@231:1>]
      end GenHcSolver.classify_pids(491886)[4] (0.000000 sec.)
      lb:((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
      nub:(not ((<f_1030@231:0> <= 0) || (<f_1030@231:0> >= 50)))
      begin ApronInterface.convex_hull_interpolate(491889)[4]
        lb:((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
        nub:(not ((<f_1030@231:0> <= 0) || (<f_1030@231:0> >= 50)))
        begin ExtFormula.Formula.case_analysis_boolean(491899)[5]
          ts: ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50))
          
        end ExtFormula.Formula.case_analysis_boolean(491899)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(491919)[5]
          ts: ((<f_1030@231:0> < 50) && (<f_1030@231:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(491919)[5] (0.000000 sec.)
        lb':(((-50 + <f_1030@231:1>) = 0) && (<f_1030@231:0> = 0))
        nub':(((49 + (-1 * <f_1030@231:0>)) >= 0) && ((-1 + <f_1030@231:0>) >= 0))
        begin InterpProver.interpolate(491925)[5]
          begin InterpProver.interpolate_fresh(491926)[6]
            begin InterpProver.interpolate_log(491927)[7]
              input1: (((-50 + <f_1030@231:1>) = 0) && (<f_1030@231:0> = 0))
              input2: (((49 + (-1 * <f_1030@231:0>)) >= 0) && ((-1 + <f_1030@231:0>) >= 0))
              begin InterpProver.interpolate_check(491928)[8]
                begin InterpProver.interpolate_simplify(491929)[9]
                  begin InterpProver.interpolate_quick(491991)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(492000)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(492001)[12]
                        begin CsisatInterface.interpolate_csisat_log(492002)[13]
                          input1: 0 = v_sep_f_1030_sep_231_sep_0
                          input2: (1 <= v_sep_f_1030_sep_231_sep_0 & v_sep_f_1030_sep_231_sep_0 <= 49)
                          begin CsisatInterface.interpolate_csisat_raw(492003)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(492003)[14] (0.000000 sec.)
                          output: 2*v_sep_f_1030_sep_231_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(492002)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_f_1030_sep_231_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_f_1030_sep_231_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(492001)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(492000)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(491991)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(491929)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(491928)[8] (0.001999 sec.)
              output: (<f_1030@231:0> <= 0)
            end InterpProver.interpolate_log(491927)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(491926)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(491925)[5] (0.001999 sec.)
        output:
          P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 0)
      end ApronInterface.convex_hull_interpolate(491889)[4] (0.002999 sec.)
      begin HcSolver.check_validity(492161)[4]
        input:
          P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
          
          P[<<f_1030@231:2>@294:0>](0:int,50:int,100:int), <fail_1153@299:0>
          |- P[<fail_1153@299:0>](<fail_1153@299:0>:bool)
          
          P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int),
          P[<<f_1030@237:2>@290:0>]((1 + <f_1030@231:0>):int,<f_1030@231:1>:int,<<f_1030@231:2>@294:0>:int),
          (<f_1030@231:0> < 50)
          |- P[<<f_1030@231:2>@294:0>](<f_1030@231:0>:int,<f_1030@231:1>:int,
                                       <<f_1030@231:2>@294:0>:int)
          
          P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int),
          P[<<f_1030@243:2>@286:0>]((1 + <f_1030@237:0>):int,<f_1030@237:1>:int,<<f_1030@237:2>@290:0>:int),
          (<f_1030@237:0> < 50)
          |- P[<<f_1030@237:2>@290:0>](<f_1030@237:0>:int,<f_1030@237:1>:int,
                                       <<f_1030@237:2>@290:0>:int)
          
          P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int),
          P[<<f_1030@249:2>@282:0>]((1 + <f_1030@243:0>):int,<f_1030@243:1>:int,<<f_1030@243:2>@286:0>:int),
          (<f_1030@243:0> < 50)
          |- P[<<f_1030@243:2>@286:0>](<f_1030@243:0>:int,<f_1030@243:1>:int,
                                       <<f_1030@243:2>@286:0>:int)
          
          P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int),
          P[<<f_1030@255:2>@278:0>]((1 + <f_1030@249:0>):int,<f_1030@249:1>:int,<<f_1030@249:2>@282:0>:int),
          (<f_1030@249:0> < 50)
          |- P[<<f_1030@249:2>@282:0>](<f_1030@249:0>:int,<f_1030@249:1>:int,
                                       <<f_1030@249:2>@282:0>:int)
          
          P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int),
          P[<<f_1030@261:2>@274:0>]((1 + <f_1030@255:0>):int,<f_1030@255:1>:int,<<f_1030@255:2>@278:0>:int),
          (<f_1030@255:0> < 50)
          |- P[<<f_1030@255:2>@278:0>](<f_1030@255:0>:int,<f_1030@255:1>:int,
                                       <<f_1030@255:2>@278:0>:int)
          
          P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int),
          P[<<f_1030@267:2>@270:0>]((1 + <f_1030@261:0>):int,<f_1030@261:1>:int,<<f_1030@261:2>@274:0>:int),
          (<f_1030@261:0> < 50)
          |- P[<<f_1030@261:2>@274:0>](<f_1030@261:0>:int,<f_1030@261:1>:int,
                                       <<f_1030@261:2>@274:0>:int)
          
          P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int),
          ((<f_1030@267:0> >= 100) && (<<f_1030@267:2>@270:0> = <f_1030@267:1>))
          |- P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,
                                       <<f_1030@267:2>@270:0>:int)
          
          P[<f_1030@261:1>]((-1 + <f_1030@267:0>):int,<f_1030@267:1>:int), (
          <f_1030@267:0> < 51) |- P[<f_1030@267:1>](<f_1030@267:0>:int,
                                                    <f_1030@267:1>:int)
          
          P[<f_1030@255:1>]((-1 + <f_1030@261:0>):int,<f_1030@261:1>:int), (
          <f_1030@261:0> < 51) |- P[<f_1030@261:1>](<f_1030@261:0>:int,
                                                    <f_1030@261:1>:int)
          
          P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int), (
          <f_1030@255:0> < 51) |- P[<f_1030@255:1>](<f_1030@255:0>:int,
                                                    <f_1030@255:1>:int)
          
          P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
          <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,
                                                    <f_1030@249:1>:int)
          
          P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
          <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                    <f_1030@243:1>:int)
          
          P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
          <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                    <f_1030@237:1>:int)
          
           ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(492161)[4] (0.006000 sec.)
      solution:
        P[<fail_1153@299:0>](var1445:bool) = false
        P[<<f_1030@231:2>@294:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<<f_1030@237:2>@290:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<<f_1030@243:2>@286:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<<f_1030@249:2>@282:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<<f_1030@255:2>@278:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<<f_1030@261:2>@274:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,<<f_1030@267:2>@270:0>:int) = false
        P[<f_1030@267:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 6)
        P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int) = (<f_1030@261:0> <= 5)
        P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int) = (<f_1030@255:0> <= 4)
        P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int) = (<f_1030@249:0> <= 3)
        P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int) = (<f_1030@243:0> <= 2)
        P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int) = (<f_1030@237:0> <= 1)
        P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int) = (<f_1030@231:0> <= 0)
    end GenHcSolver.solve(415377)[3] (0.312953 sec.)
    begin YhornInterface.solve(493109)[3]
      begin HcSolver.solve_ub(493110)[4]
        encoded:
          P[<fail_1153@299:0>](<fail_1153@299:0>:int)|- bot
          
          P[<<f_1030@231:2>@294:0>](0:int,50:int,100:int), (<fail_1153@299:0> = 1)
          |- P[<fail_1153@299:0>](<fail_1153@299:0>:int)
          
          P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int),
          P[<<f_1030@237:2>@290:0>]((1 + <f_1030@231:0>):int,<f_1030@231:1>:int,<<f_1030@231:2>@294:0>:int),
          (<f_1030@231:0> < 50)
          |- P[<<f_1030@231:2>@294:0>](<f_1030@231:0>:int,<f_1030@231:1>:int,
                                       <<f_1030@231:2>@294:0>:int)
          
          P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int),
          P[<<f_1030@243:2>@286:0>]((1 + <f_1030@237:0>):int,<f_1030@237:1>:int,<<f_1030@237:2>@290:0>:int),
          (<f_1030@237:0> < 50)
          |- P[<<f_1030@237:2>@290:0>](<f_1030@237:0>:int,<f_1030@237:1>:int,
                                       <<f_1030@237:2>@290:0>:int)
          
          P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int),
          P[<<f_1030@249:2>@282:0>]((1 + <f_1030@243:0>):int,<f_1030@243:1>:int,<<f_1030@243:2>@286:0>:int),
          (<f_1030@243:0> < 50)
          |- P[<<f_1030@243:2>@286:0>](<f_1030@243:0>:int,<f_1030@243:1>:int,
                                       <<f_1030@243:2>@286:0>:int)
          
          P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int),
          P[<<f_1030@255:2>@278:0>]((1 + <f_1030@249:0>):int,<f_1030@249:1>:int,<<f_1030@249:2>@282:0>:int),
          (<f_1030@249:0> < 50)
          |- P[<<f_1030@249:2>@282:0>](<f_1030@249:0>:int,<f_1030@249:1>:int,
                                       <<f_1030@249:2>@282:0>:int)
          
          P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int),
          P[<<f_1030@261:2>@274:0>]((1 + <f_1030@255:0>):int,<f_1030@255:1>:int,<<f_1030@255:2>@278:0>:int),
          (<f_1030@255:0> < 50)
          |- P[<<f_1030@255:2>@278:0>](<f_1030@255:0>:int,<f_1030@255:1>:int,
                                       <<f_1030@255:2>@278:0>:int)
          
          P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int),
          P[<<f_1030@267:2>@270:0>]((1 + <f_1030@261:0>):int,<f_1030@261:1>:int,<<f_1030@261:2>@274:0>:int),
          (<f_1030@261:0> < 50)
          |- P[<<f_1030@261:2>@274:0>](<f_1030@261:0>:int,<f_1030@261:1>:int,
                                       <<f_1030@261:2>@274:0>:int)
          
          P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int),
          ((<f_1030@267:0> >= 100) && (<<f_1030@267:2>@270:0> = <f_1030@267:1>))
          |- P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,
                                       <<f_1030@267:2>@270:0>:int)
          
          P[<f_1030@261:1>]((-1 + <f_1030@267:0>):int,<f_1030@267:1>:int), (
          <f_1030@267:0> < 51) |- P[<f_1030@267:1>](<f_1030@267:0>:int,
                                                    <f_1030@267:1>:int)
          
          P[<f_1030@255:1>]((-1 + <f_1030@261:0>):int,<f_1030@261:1>:int), (
          <f_1030@261:0> < 51) |- P[<f_1030@261:1>](<f_1030@261:0>:int,
                                                    <f_1030@261:1>:int)
          
          P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int), (
          <f_1030@255:0> < 51) |- P[<f_1030@255:1>](<f_1030@255:0>:int,
                                                    <f_1030@255:1>:int)
          
          P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
          <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,
                                                    <f_1030@249:1>:int)
          
          P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
          <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                    <f_1030@243:1>:int)
          
          P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
          <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                    <f_1030@237:1>:int)
          
           ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
        input to Yhorn:
          P[<fail_1153@299:0>](<fail_1153@299:0>:int)|- bot
          
          P[<<f_1030@231:2>@294:0>](var1451:int,var1452:int,var1453:int),
          ((var1453 = 100) && ((var1452 = 50) && ((var1451 = 0) && (<fail_1153@299:0> = 1))))
          |- P[<fail_1153@299:0>](<fail_1153@299:0>:int)
          
          P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int),
          P[<<f_1030@237:2>@290:0>](var1454:int,<f_1030@231:1>:int,<<f_1030@231:2>@294:0>:int),
          ((var1454 = (1 + <f_1030@231:0>)) && (<f_1030@231:0> < 50))
          |- P[<<f_1030@231:2>@294:0>](<f_1030@231:0>:int,<f_1030@231:1>:int,
                                       <<f_1030@231:2>@294:0>:int)
          
          P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int),
          P[<<f_1030@243:2>@286:0>](var1455:int,<f_1030@237:1>:int,<<f_1030@237:2>@290:0>:int),
          ((var1455 = (1 + <f_1030@237:0>)) && (<f_1030@237:0> < 50))
          |- P[<<f_1030@237:2>@290:0>](<f_1030@237:0>:int,<f_1030@237:1>:int,
                                       <<f_1030@237:2>@290:0>:int)
          
          P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int),
          P[<<f_1030@249:2>@282:0>](var1456:int,<f_1030@243:1>:int,<<f_1030@243:2>@286:0>:int),
          ((var1456 = (1 + <f_1030@243:0>)) && (<f_1030@243:0> < 50))
          |- P[<<f_1030@243:2>@286:0>](<f_1030@243:0>:int,<f_1030@243:1>:int,
                                       <<f_1030@243:2>@286:0>:int)
          
          P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int),
          P[<<f_1030@255:2>@278:0>](var1457:int,<f_1030@249:1>:int,<<f_1030@249:2>@282:0>:int),
          ((var1457 = (1 + <f_1030@249:0>)) && (<f_1030@249:0> < 50))
          |- P[<<f_1030@249:2>@282:0>](<f_1030@249:0>:int,<f_1030@249:1>:int,
                                       <<f_1030@249:2>@282:0>:int)
          
          P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int),
          P[<<f_1030@261:2>@274:0>](var1458:int,<f_1030@255:1>:int,<<f_1030@255:2>@278:0>:int),
          ((var1458 = (1 + <f_1030@255:0>)) && (<f_1030@255:0> < 50))
          |- P[<<f_1030@255:2>@278:0>](<f_1030@255:0>:int,<f_1030@255:1>:int,
                                       <<f_1030@255:2>@278:0>:int)
          
          P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int),
          P[<<f_1030@267:2>@270:0>](var1459:int,<f_1030@261:1>:int,<<f_1030@261:2>@274:0>:int),
          ((var1459 = (1 + <f_1030@261:0>)) && (<f_1030@261:0> < 50))
          |- P[<<f_1030@261:2>@274:0>](<f_1030@261:0>:int,<f_1030@261:1>:int,
                                       <<f_1030@261:2>@274:0>:int)
          
          P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int),
          ((<<f_1030@267:2>@270:0> = <f_1030@267:1>) && (<f_1030@267:0> >= 100))
          |- P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,
                                       <<f_1030@267:2>@270:0>:int)
          
          P[<f_1030@261:1>](var1460:int,<f_1030@267:1>:int),
          (((1 + var1460) = <f_1030@267:0>) && (<f_1030@267:0> < 51))
          |- P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int)
          
          P[<f_1030@255:1>](var1461:int,<f_1030@261:1>:int),
          (((1 + var1461) = <f_1030@261:0>) && (<f_1030@261:0> < 51))
          |- P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int)
          
          P[<f_1030@249:1>](var1462:int,<f_1030@255:1>:int),
          (((1 + var1462) = <f_1030@255:0>) && (<f_1030@255:0> < 51))
          |- P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int)
          
          P[<f_1030@243:1>](var1463:int,<f_1030@249:1>:int),
          (((1 + var1463) = <f_1030@249:0>) && (<f_1030@249:0> < 51))
          |- P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int)
          
          P[<f_1030@237:1>](var1464:int,<f_1030@243:1>:int),
          (((1 + var1464) = <f_1030@243:0>) && (<f_1030@243:0> < 51))
          |- P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int)
          
          P[<f_1030@231:1>](var1465:int,<f_1030@237:1>:int),
          (((1 + var1465) = <f_1030@237:0>) && (<f_1030@237:0> < 51))
          |- P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1153_sep_299_sep_0($1532)) -> 1=0.
(($1532-1=0) & ($1533=0) & ($1534-50=0) & ($1535-100=0)) & (v_sep_f_1030_sep_231_sep_2_sep_294_sep_0($1533,$1534,$1535)) -> v_sep_fail_1153_sep_299_sep_0($1532).
(($1536-50<0) & (-$1536+$1537-1=0)) & (v_sep_f_1030_sep_237_sep_2_sep_290_sep_0($1537,$1538,$1539)) & (v_sep_f_1030_sep_231_sep_1($1536,$1538)) -> v_sep_f_1030_sep_231_sep_2_sep_294_sep_0($1536,$1538,$1539).
(($1540-50<0) & (-$1540+$1541-1=0)) & (v_sep_f_1030_sep_243_sep_2_sep_286_sep_0($1541,$1542,$1543)) & (v_sep_f_1030_sep_237_sep_1($1540,$1542)) -> v_sep_f_1030_sep_237_sep_2_sep_290_sep_0($1540,$1542,$1543).
(($1544-50<0) & (-$1544+$1545-1=0)) & (v_sep_f_1030_sep_249_sep_2_sep_282_sep_0($1545,$1546,$1547)) & (v_sep_f_1030_sep_243_sep_1($1544,$1546)) -> v_sep_f_1030_sep_243_sep_2_sep_286_sep_0($1544,$1546,$1547).
(($1548-50<0) & (-$1548+$1549-1=0)) & (v_sep_f_1030_sep_255_sep_2_sep_278_sep_0($1549,$1550,$1551)) & (v_sep_f_1030_sep_249_sep_1($1548,$1550)) -> v_sep_f_1030_sep_249_sep_2_sep_282_sep_0($1548,$1550,$1551).
(($1552-50<0) & (-$1552+$1553-1=0)) & (v_sep_f_1030_sep_261_sep_2_sep_274_sep_0($1553,$1554,$1555)) & (v_sep_f_1030_sep_255_sep_1($1552,$1554)) -> v_sep_f_1030_sep_255_sep_2_sep_278_sep_0($1552,$1554,$1555).
(($1556-50<0) & (-$1556+$1557-1=0)) & (v_sep_f_1030_sep_267_sep_2_sep_270_sep_0($1557,$1558,$1559)) & (v_sep_f_1030_sep_261_sep_1($1556,$1558)) -> v_sep_f_1030_sep_261_sep_2_sep_274_sep_0($1556,$1558,$1559).
(($1560-100>=0) & ($1561-$1562=0)) & (v_sep_f_1030_sep_267_sep_1($1560,$1562)) -> v_sep_f_1030_sep_267_sep_2_sep_270_sep_0($1560,$1562,$1561).
(($1560-51<0) & (-$1560+$1563+1=0)) & (v_sep_f_1030_sep_261_sep_1($1563,$1562)) -> v_sep_f_1030_sep_267_sep_1($1560,$1562).
(($1556-51<0) & (-$1556+$1564+1=0)) & (v_sep_f_1030_sep_255_sep_1($1564,$1558)) -> v_sep_f_1030_sep_261_sep_1($1556,$1558).
(($1552-51<0) & (-$1552+$1565+1=0)) & (v_sep_f_1030_sep_249_sep_1($1565,$1554)) -> v_sep_f_1030_sep_255_sep_1($1552,$1554).
(($1548-51<0) & (-$1548+$1566+1=0)) & (v_sep_f_1030_sep_243_sep_1($1566,$1550)) -> v_sep_f_1030_sep_249_sep_1($1548,$1550).
(($1544-51<0) & (-$1544+$1567+1=0)) & (v_sep_f_1030_sep_237_sep_1($1567,$1546)) -> v_sep_f_1030_sep_243_sep_1($1544,$1546).
(($1540-51<0) & (-$1540+$1568+1=0)) & (v_sep_f_1030_sep_231_sep_1($1568,$1542)) -> v_sep_f_1030_sep_237_sep_1($1540,$1542).
($1536=0) & ($1538-50=0) -> v_sep_f_1030_sep_231_sep_1($1536,$1538).


v_sep_f_1030_sep_231_sep_1: X
v_sep_f_1030_sep_231_sep_2_sep_294_sep_0: X
v_sep_f_1030_sep_237_sep_1: X
v_sep_f_1030_sep_237_sep_2_sep_290_sep_0: X
v_sep_f_1030_sep_243_sep_1: X
v_sep_f_1030_sep_243_sep_2_sep_286_sep_0: X
v_sep_f_1030_sep_249_sep_1: X
v_sep_f_1030_sep_249_sep_2_sep_282_sep_0: X
v_sep_f_1030_sep_255_sep_1: X
v_sep_f_1030_sep_255_sep_2_sep_278_sep_0: X
v_sep_f_1030_sep_261_sep_1: X
v_sep_f_1030_sep_261_sep_2_sep_274_sep_0: X
v_sep_f_1030_sep_267_sep_1: X
v_sep_f_1030_sep_267_sep_2_sep_270_sep_0: X
v_sep_fail_1153_sep_299_sep_0: X
......................
v_sep_f_1030_sep_231_sep_1: X
v_sep_f_1030_sep_231_sep_2_sep_294_sep_0: X
v_sep_f_1030_sep_237_sep_1: X
v_sep_f_1030_sep_237_sep_2_sep_290_sep_0: X
v_sep_f_1030_sep_243_sep_1: X
v_sep_f_1030_sep_243_sep_2_sep_286_sep_0: X
v_sep_f_1030_sep_249_sep_1: X
v_sep_f_1030_sep_249_sep_2_sep_282_sep_0: X
v_sep_f_1030_sep_255_sep_1: X
v_sep_f_1030_sep_255_sep_2_sep_278_sep_0: X
v_sep_f_1030_sep_261_sep_1: X
v_sep_f_1030_sep_261_sep_2_sep_274_sep_0: X
v_sep_f_1030_sep_267_sep_1: X
v_sep_f_1030_sep_267_sep_2_sep_270_sep_0: X
v_sep_fail_1153_sep_299_sep_0: X
...
v_sep_f_1030_sep_231_sep_1: X
v_sep_f_1030_sep_231_sep_2_sep_294_sep_0: X
v_sep_f_1030_sep_237_sep_1: X
v_sep_f_1030_sep_237_sep_2_sep_290_sep_0: X
v_sep_f_1030_sep_243_sep_1: X
v_sep_f_1030_sep_243_sep_2_sep_286_sep_0: X
v_sep_f_1030_sep_249_sep_1: X
v_sep_f_1030_sep_249_sep_2_sep_282_sep_0: X
v_sep_f_1030_sep_255_sep_1: X
v_sep_f_1030_sep_255_sep_2_sep_278_sep_0: X
v_sep_f_1030_sep_261_sep_1: X
v_sep_f_1030_sep_261_sep_2_sep_274_sep_0: X
v_sep_f_1030_sep_267_sep_1: X
v_sep_f_1030_sep_267_sep_2_sep_270_sep_0: X
v_sep_fail_1153_sep_299_sep_0: X
.....
v_sep_f_1030_sep_231_sep_1: X
v_sep_f_1030_sep_231_sep_2_sep_294_sep_0: X
v_sep_f_1030_sep_237_sep_1: X
v_sep_f_1030_sep_237_sep_2_sep_290_sep_0: X
v_sep_f_1030_sep_243_sep_1: X
v_sep_f_1030_sep_243_sep_2_sep_286_sep_0: X
v_sep_f_1030_sep_249_sep_1: X
v_sep_f_1030_sep_249_sep_2_sep_282_sep_0: X
v_sep_f_1030_sep_255_sep_1: X
v_sep_f_1030_sep_255_sep_2_sep_278_sep_0: X
v_sep_f_1030_sep_261_sep_1: X
v_sep_f_1030_sep_261_sep_2_sep_274_sep_0: X
v_sep_f_1030_sep_267_sep_1: X
v_sep_f_1030_sep_267_sep_2_sep_270_sep_0: X
v_sep_fail_1153_sep_299_sep_0: X
.......
v_sep_f_1030_sep_231_sep_1: X
v_sep_f_1030_sep_231_sep_2_sep_294_sep_0: X
v_sep_f_1030_sep_237_sep_1: X
v_sep_f_1030_sep_237_sep_2_sep_290_sep_0: X
v_sep_f_1030_sep_243_sep_1: X
v_sep_f_1030_sep_243_sep_2_sep_286_sep_0: X
v_sep_f_1030_sep_249_sep_1: X
v_sep_f_1030_sep_249_sep_2_sep_282_sep_0: X
v_sep_f_1030_sep_255_sep_1: X
v_sep_f_1030_sep_255_sep_2_sep_278_sep_0: X
v_sep_f_1030_sep_261_sep_1: X
v_sep_f_1030_sep_261_sep_2_sep_274_sep_0: X
v_sep_f_1030_sep_267_sep_1: X
v_sep_f_1030_sep_267_sep_2_sep_270_sep_0: X
v_sep_fail_1153_sep_299_sep_0: X
..........
v_sep_f_1030_sep_231_sep_1: X
v_sep_f_1030_sep_231_sep_2_sep_294_sep_0: X
v_sep_f_1030_sep_237_sep_1: X
v_sep_f_1030_sep_237_sep_2_sep_290_sep_0: X
v_sep_f_1030_sep_243_sep_1: X
v_sep_f_1030_sep_243_sep_2_sep_286_sep_0: X
v_sep_f_1030_sep_249_sep_1: X
v_sep_f_1030_sep_249_sep_2_sep_282_sep_0: X
v_sep_f_1030_sep_255_sep_1: X
v_sep_f_1030_sep_255_sep_2_sep_278_sep_0: X
v_sep_f_1030_sep_261_sep_1: X
v_sep_f_1030_sep_261_sep_2_sep_274_sep_0: X
v_sep_f_1030_sep_267_sep_1: X
v_sep_f_1030_sep_267_sep_2_sep_270_sep_0: X
v_sep_fail_1153_sep_299_sep_0: X
.............
v_sep_f_1030_sep_231_sep_1: X
v_sep_f_1030_sep_231_sep_2_sep_294_sep_0: X
v_sep_f_1030_sep_237_sep_1: X
v_sep_f_1030_sep_237_sep_2_sep_290_sep_0: X
v_sep_f_1030_sep_243_sep_1: X
v_sep_f_1030_sep_243_sep_2_sep_286_sep_0: X
v_sep_f_1030_sep_249_sep_1: X
v_sep_f_1030_sep_249_sep_2_sep_282_sep_0: X
v_sep_f_1030_sep_255_sep_1: X
v_sep_f_1030_sep_255_sep_2_sep_278_sep_0: X
v_sep_f_1030_sep_261_sep_1: X
v_sep_f_1030_sep_261_sep_2_sep_274_sep_0: X
v_sep_f_1030_sep_267_sep_1: X
v_sep_f_1030_sep_267_sep_2_sep_270_sep_0: X
v_sep_fail_1153_sep_299_sep_0: X
................
v_sep_f_1030_sep_231_sep_1: X
v_sep_f_1030_sep_231_sep_2_sep_294_sep_0: X
v_sep_f_1030_sep_237_sep_1: X
v_sep_f_1030_sep_237_sep_2_sep_290_sep_0: X
v_sep_f_1030_sep_243_sep_1: X
v_sep_f_1030_sep_243_sep_2_sep_286_sep_0: X
v_sep_f_1030_sep_249_sep_1: X
v_sep_f_1030_sep_249_sep_2_sep_282_sep_0: X
v_sep_f_1030_sep_255_sep_1: X
v_sep_f_1030_sep_255_sep_2_sep_278_sep_0: X
v_sep_f_1030_sep_261_sep_1: X
v_sep_f_1030_sep_261_sep_2_sep_274_sep_0: X
v_sep_f_1030_sep_267_sep_1: X
v_sep_f_1030_sep_267_sep_2_sep_270_sep_0: X
v_sep_fail_1153_sep_299_sep_0: X
...................
v_sep_f_1030_sep_231_sep_1: X
v_sep_f_1030_sep_231_sep_2_sep_294_sep_0: X
v_sep_f_1030_sep_237_sep_1: X
v_sep_f_1030_sep_237_sep_2_sep_290_sep_0: X
v_sep_f_1030_sep_243_sep_1: X
v_sep_f_1030_sep_243_sep_2_sep_286_sep_0: X
v_sep_f_1030_sep_249_sep_1: X
v_sep_f_1030_sep_249_sep_2_sep_282_sep_0: X
v_sep_f_1030_sep_255_sep_1: X
v_sep_f_1030_sep_255_sep_2_sep_278_sep_0: X
v_sep_f_1030_sep_261_sep_1: X
v_sep_f_1030_sep_261_sep_2_sep_274_sep_0: X
v_sep_f_1030_sep_267_sep_1: X
v_sep_f_1030_sep_267_sep_2_sep_270_sep_0: X
v_sep_fail_1153_sep_299_sep_0: X
.....................
v_sep_f_1030_sep_231_sep_1: X
v_sep_f_1030_sep_231_sep_2_sep_294_sep_0: X
v_sep_f_1030_sep_237_sep_1: X
v_sep_f_1030_sep_237_sep_2_sep_290_sep_0: X
v_sep_f_1030_sep_243_sep_1: X
v_sep_f_1030_sep_243_sep_2_sep_286_sep_0: X
v_sep_f_1030_sep_249_sep_1: X
v_sep_f_1030_sep_249_sep_2_sep_282_sep_0: X
v_sep_f_1030_sep_255_sep_1: X
v_sep_f_1030_sep_255_sep_2_sep_278_sep_0: X
v_sep_f_1030_sep_261_sep_1: X
v_sep_f_1030_sep_261_sep_2_sep_274_sep_0: X
v_sep_f_1030_sep_267_sep_1: X
v_sep_f_1030_sep_267_sep_2_sep_270_sep_0: X
v_sep_fail_1153_sep_299_sep_0: X
......................(0=0) & (v_sep_fail_1153_sep_299_sep_0($1532)) -> 1=0.
(($1532-1=0) & ($1533=0) & ($1534-50=0) & ($1535-100=0)) & (v_sep_f_1030_sep_231_sep_2_sep_294_sep_0($1533,$1534,$1535)) -> v_sep_fail_1153_sep_299_sep_0($1532).
(($1536-50<0) & (-$1536+$1537-1=0)) & (v_sep_f_1030_sep_237_sep_2_sep_290_sep_0($1537,$1538,$1539)) & (v_sep_f_1030_sep_231_sep_1($1536,$1538)) -> v_sep_f_1030_sep_231_sep_2_sep_294_sep_0($1536,$1538,$1539).
(($1540-50<0) & (-$1540+$1541-1=0)) & (v_sep_f_1030_sep_243_sep_2_sep_286_sep_0($1541,$1542,$1543)) & (v_sep_f_1030_sep_237_sep_1($1540,$1542)) -> v_sep_f_1030_sep_237_sep_2_sep_290_sep_0($1540,$1542,$1543).
(($1544-50<0) & (-$1544+$1545-1=0)) & (v_sep_f_1030_sep_249_sep_2_sep_282_sep_0($1545,$1546,$1547)) & (v_sep_f_1030_sep_243_sep_1($1544,$1546)) -> v_sep_f_1030_sep_243_sep_2_sep_286_sep_0($1544,$1546,$1547).
(($1548-50<0) & (-$1548+$1549-1=0)) & (v_sep_f_1030_sep_255_sep_2_sep_278_sep_0($1549,$1550,$1551)) & (v_sep_f_1030_sep_249_sep_1($1548,$1550)) -> v_sep_f_1030_sep_249_sep_2_sep_282_sep_0($1548,$1550,$1551).
(($1552-50<0) & (-$1552+$1553-1=0)) & (v_sep_f_1030_sep_261_sep_2_sep_274_sep_0($1553,$1554,$1555)) & (v_sep_f_1030_sep_255_sep_1($1552,$1554)) -> v_sep_f_1030_sep_255_sep_2_sep_278_sep_0($1552,$1554,$1555).
(($1556-50<0) & (-$1556+$1557-1=0)) & (v_sep_f_1030_sep_267_sep_2_sep_270_sep_0($1557,$1558,$1559)) & (v_sep_f_1030_sep_261_sep_1($1556,$1558)) -> v_sep_f_1030_sep_261_sep_2_sep_274_sep_0($1556,$1558,$1559).
(($1560-100>=0) & ($1561-$1562=0)) & (v_sep_f_1030_sep_267_sep_1($1560,$1562)) -> v_sep_f_1030_sep_267_sep_2_sep_270_sep_0($1560,$1562,$1561).
(($1560-51<0) & (-$1560+$1563+1=0)) & (v_sep_f_1030_sep_261_sep_1($1563,$1562)) -> v_sep_f_1030_sep_267_sep_1($1560,$1562).
(($1556-51<0) & (-$1556+$1564+1=0)) & (v_sep_f_1030_sep_255_sep_1($1564,$1558)) -> v_sep_f_1030_sep_261_sep_1($1556,$1558).
(($1552-51<0) & (-$1552+$1565+1=0)) & (v_sep_f_1030_sep_249_sep_1($1565,$1554)) -> v_sep_f_1030_sep_255_sep_1($1552,$1554).
(($1548-51<0) & (-$1548+$1566+1=0)) & (v_sep_f_1030_sep_243_sep_1($1566,$1550)) -> v_sep_f_1030_sep_249_sep_1($1548,$1550).
(($1544-51<0) & (-$1544+$1567+1=0)) & (v_sep_f_1030_sep_237_sep_1($1567,$1546)) -> v_sep_f_1030_sep_243_sep_1($1544,$1546).
(($1540-51<0) & (-$1540+$1568+1=0)) & (v_sep_f_1030_sep_231_sep_1($1568,$1542)) -> v_sep_f_1030_sep_237_sep_1($1540,$1542).
($1536=0) & ($1538-50=0) -> v_sep_f_1030_sep_231_sep_1($1536,$1538).

           ((<f_1030@231:1> = 50) && (<f_1030@231:0> = 0)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
        solution:
          P[<f_1030@231:1>]($1586:int,$1588:int) = ($1588 <= 50)
          P[<<f_1030@231:2>@294:0>]($1572:int,$1574:int,$1576:int) = ($1576 <= 50)
          P[<f_1030@237:1>]($1598:int,$1600:int) = ($1600 <= 50)
          P[<<f_1030@237:2>@290:0>]($1579:int,$1581:int,$1583:int) = ((7 * $1583) <= (300 + $1581))
          P[<f_1030@243:1>]($1610:int,$1612:int) = ($1612 <= 50)
          P[<<f_1030@243:2>@286:0>]($1591:int,$1593:int,$1595:int) = ((7 * $1595) <= (250 + (2 * $1593)))
          P[<f_1030@249:1>]($1622:int,$1624:int) = ($1624 <= 50)
          P[<<f_1030@249:2>@282:0>]($1603:int,$1605:int,$1607:int) = ((7 * $1607) <= (200 + (3 * $1605)))
          P[<f_1030@255:1>]($1634:int,$1636:int) = ($1636 <= 50)
          P[<<f_1030@255:2>@278:0>]($1615:int,$1617:int,$1619:int) = ((7 * $1619) <= (150 + (4 * $1617)))
          P[<f_1030@261:1>]($1646:int,$1648:int) = ($1648 <= 50)
          P[<<f_1030@261:2>@274:0>]($1627:int,$1629:int,$1631:int) = ((7 * $1631) <= (100 + (5 * $1629)))
          P[<f_1030@267:1>]($1651:int,$1653:int) = ($1653 <= 50)
          P[<<f_1030@267:2>@270:0>]($1639:int,$1641:int,$1643:int) = ((7 * $1643) <= (50 + (6 * $1641)))
          P[<fail_1153@299:0>]($1569:bool) = false
        
      end HcSolver.solve_ub(493110)[4] (0.114982 sec.)
      begin HcSolver.check_validity(493955)[4]
        input:
          P[<fail_1153@299:0>](<fail_1153@299:0>:bool)|- bot
          
          P[<<f_1030@231:2>@294:0>](0:int,50:int,100:int), <fail_1153@299:0>
          |- P[<fail_1153@299:0>](<fail_1153@299:0>:bool)
          
          P[<f_1030@231:1>](<f_1030@231:0>:int,<f_1030@231:1>:int),
          P[<<f_1030@237:2>@290:0>]((1 + <f_1030@231:0>):int,<f_1030@231:1>:int,<<f_1030@231:2>@294:0>:int),
          (<f_1030@231:0> < 50)
          |- P[<<f_1030@231:2>@294:0>](<f_1030@231:0>:int,<f_1030@231:1>:int,
                                       <<f_1030@231:2>@294:0>:int)
          
          P[<f_1030@237:1>](<f_1030@237:0>:int,<f_1030@237:1>:int),
          P[<<f_1030@243:2>@286:0>]((1 + <f_1030@237:0>):int,<f_1030@237:1>:int,<<f_1030@237:2>@290:0>:int),
          (<f_1030@237:0> < 50)
          |- P[<<f_1030@237:2>@290:0>](<f_1030@237:0>:int,<f_1030@237:1>:int,
                                       <<f_1030@237:2>@290:0>:int)
          
          P[<f_1030@243:1>](<f_1030@243:0>:int,<f_1030@243:1>:int),
          P[<<f_1030@249:2>@282:0>]((1 + <f_1030@243:0>):int,<f_1030@243:1>:int,<<f_1030@243:2>@286:0>:int),
          (<f_1030@243:0> < 50)
          |- P[<<f_1030@243:2>@286:0>](<f_1030@243:0>:int,<f_1030@243:1>:int,
                                       <<f_1030@243:2>@286:0>:int)
          
          P[<f_1030@249:1>](<f_1030@249:0>:int,<f_1030@249:1>:int),
          P[<<f_1030@255:2>@278:0>]((1 + <f_1030@249:0>):int,<f_1030@249:1>:int,<<f_1030@249:2>@282:0>:int),
          (<f_1030@249:0> < 50)
          |- P[<<f_1030@249:2>@282:0>](<f_1030@249:0>:int,<f_1030@249:1>:int,
                                       <<f_1030@249:2>@282:0>:int)
          
          P[<f_1030@255:1>](<f_1030@255:0>:int,<f_1030@255:1>:int),
          P[<<f_1030@261:2>@274:0>]((1 + <f_1030@255:0>):int,<f_1030@255:1>:int,<<f_1030@255:2>@278:0>:int),
          (<f_1030@255:0> < 50)
          |- P[<<f_1030@255:2>@278:0>](<f_1030@255:0>:int,<f_1030@255:1>:int,
                                       <<f_1030@255:2>@278:0>:int)
          
          P[<f_1030@261:1>](<f_1030@261:0>:int,<f_1030@261:1>:int),
          P[<<f_1030@267:2>@270:0>]((1 + <f_1030@261:0>):int,<f_1030@261:1>:int,<<f_1030@261:2>@274:0>:int),
          (<f_1030@261:0> < 50)
          |- P[<<f_1030@261:2>@274:0>](<f_1030@261:0>:int,<f_1030@261:1>:int,
                                       <<f_1030@261:2>@274:0>:int)
          
          P[<f_1030@267:1>](<f_1030@267:0>:int,<f_1030@267:1>:int),
          ((<f_1030@267:0> >= 100) && (<<f_1030@267:2>@270:0> = <f_1030@267:1>))
          |- P[<<f_1030@267:2>@270:0>](<f_1030@267:0>:int,<f_1030@267:1>:int,
                                       <<f_1030@267:2>@270:0>:int)
          
          P[<f_1030@261:1>]((-1 + <f_1030@267:0>):int,<f_1030@267:1>:int), (
          <f_1030@267:0> < 51) |- P[<f_1030@267:1>](<f_1030@267:0>:int,
                                                    <f_1030@267:1>:int)
          
          P[<f_1030@255:1>]((-1 + <f_1030@261:0>):int,<f_1030@261:1>:int), (
          <f_1030@261:0> < 51) |- P[<f_1030@261:1>](<f_1030@261:0>:int,
                                                    <f_1030@261:1>:int)
          
          P[<f_1030@249:1>]((-1 + <f_1030@255:0>):int,<f_1030@255:1>:int), (
          <f_1030@255:0> < 51) |- P[<f_1030@255:1>](<f_1030@255:0>:int,
                                                    <f_1030@255:1>:int)
          
          P[<f_1030@243:1>]((-1 + <f_1030@249:0>):int,<f_1030@249:1>:int), (
          <f_1030@249:0> < 51) |- P[<f_1030@249:1>](<f_1030@249:0>:int,
                                                    <f_1030@249:1>:int)
          
          P[<f_1030@237:1>]((-1 + <f_1030@243:0>):int,<f_1030@243:1>:int), (
          <f_1030@243:0> < 51) |- P[<f_1030@243:1>](<f_1030@243:0>:int,
                                                    <f_1030@243:1>:int)
          
          P[<f_1030@231:1>]((-1 + <f_1030@237:0>):int,<f_1030@237:1>:int), (
          <f_1030@237:0> < 51) |- P[<f_1030@237:1>](<f_1030@237:0>:int,
                                                    <f_1030@237:1>:int)
          
           ((<f_1030@231:0> = 0) && (<f_1030@231:1> = 50)) |- P[<f_1030@231:1>](<f_1030@231:0>:int,
                                                                    <f_1030@231:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(493955)[4] (0.014998 sec.)
      solution:
        P[<f_1030@231:1>]($1586:int,$1588:int) = ($1588 <= 50)
        P[<<f_1030@231:2>@294:0>]($1572:int,$1574:int,$1576:int) = ($1576 <= 50)
        P[<f_1030@237:1>]($1598:int,$1600:int) = ($1600 <= 50)
        P[<<f_1030@237:2>@290:0>]($1579:int,$1581:int,$1583:int) = ((7 * $1583) <= (300 + $1581))
        P[<f_1030@243:1>]($1610:int,$1612:int) = ($1612 <= 50)
        P[<<f_1030@243:2>@286:0>]($1591:int,$1593:int,$1595:int) = ((7 * $1595) <= (250 + (2 * $1593)))
        P[<f_1030@249:1>]($1622:int,$1624:int) = ($1624 <= 50)
        P[<<f_1030@249:2>@282:0>]($1603:int,$1605:int,$1607:int) = ((7 * $1607) <= (200 + (3 * $1605)))
        P[<f_1030@255:1>]($1634:int,$1636:int) = ($1636 <= 50)
        P[<<f_1030@255:2>@278:0>]($1615:int,$1617:int,$1619:int) = ((7 * $1619) <= (150 + (4 * $1617)))
        P[<f_1030@261:1>]($1646:int,$1648:int) = ($1648 <= 50)
        P[<<f_1030@261:2>@274:0>]($1627:int,$1629:int,$1631:int) = ((7 * $1631) <= (100 + (5 * $1629)))
        P[<f_1030@267:1>]($1651:int,$1653:int) = ($1653 <= 50)
        P[<<f_1030@267:2>@270:0>]($1639:int,$1641:int,$1643:int) = ((7 * $1643) <= (50 + (6 * $1641)))
        P[<fail_1153@299:0>]($1569:bool) = false
    end YhornInterface.solve(493109)[3] (0.130980 sec.)
    
  end RefTypeInfer.infer_etrs(331464)[2] (1.361792 sec.)
  refinement types:
    main_1149: X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 0)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 1)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 2)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 3)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 4)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 5)} -> (v3:{v3:int | false} -> X) -> X
    br_f_1151: v1:bool -> v2:int -> v3:int -> (v4:int -> X) -> X
    f_1030: v1:int -> v2:{v2:int | (v1 <= 6)} -> (v3:{v3:int | false} -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    k_main_1146: var1469:unit -> X
  abstraction types:
    main_1149: X
    f_1030: var1495:int ->
            var1496:int[var1496 -> (var1495 <= 0),
                        var1496 -> (var1495 <= 1),
                        var1496 -> (var1495 <= 2),
                        var1496 -> (var1495 <= 3),
                        var1496 -> (var1495 <= 4),
                        var1496 -> (var1495 <= 5),
                        var1496 -> (var1495 <= 6)] -> (var1497:int -> X) -> X
    br_f_1151: var1524:bool -> var1525:int -> var1526:int -> (var1527:int -> X) -> X
    f_1150: v1:int -> X
    fail_1153: v1:bool -> (v2:unit -> X) -> X
    k_main_1146: var1469:unit -> X
  
end AbsTypeInfer.refine(331463)[1] (1.365791 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 7)::
Main: main_1149
  main_1149 -> (f_1030 0 50 f_1150)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when b_1152 -> (f_1030 (x_1031 + 1) y_1032 k_f_1085)
  br_f_1151 b_1152 x_1031 y_1032 k_f_1085 when (not b_1152) -> (f_1030 (x_1031 + 1) (y_1032 + 1) k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (x_1031 < 100) -> (br_f_1151 (x_1031 < 50) x_1031 y_1032 k_f_1085)
  f_1030 x_1031 y_1032 k_f_1085 when (not (x_1031 < 100)) -> (k_f_1085 y_1032)
  f_1150 x_1124 when (not (x_1124 = 100)) -> (k_main_1146 ())
  f_1150 x_1124 when (not (not (x_1124 = 100))) -> (fail_1153 true k_main_1146)
  fail_1153 b k -> {fail} => (k ())
  k_main_1146 x_1118 -> end
Types:
  main_1149 : X
  f_1030 : (x_1:int -> int[x_1 <= 6; x_1 <= 5; x_1 <= 4; x_1 <= 3; x_1 <= 2; x_1 <= 1; x_1 <= 0] -> (int -> X) -> X)
  fail_1153 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(7-1) Abstracting ... DONE!

(7-2) Checking HORS ... Restart TRecS (param: 1000 -> 2000)
