MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi dotprod_.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let rec dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 =
   if i_1037 >= n_1034 then
     sum_1038
   else
     let u_1129 = dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + v1_1035 i_1037) + v2_1036 i_1037) 
     in
       dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + v1_1035 i_1037) + v2_1036 i_1037) 
 in
 let main_1039 n_1040 m_1041 z_1042 =
   let v1_1043 = make_array_1030 n_1040 
   in
   let v2_1044 = make_array_1030 n_1040 
   in
     if z_1042 = 0 then
       let u_1166 = dotprod_1033 n_1040 v1_1043 v2_1044 z_1042 z_1042 
       in
         ()
     else
       () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let rec dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 =
   if i_1037 >= n_1034 then
     sum_1038
   else
     let u_1129 = dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + v1_1035 i_1037) + v2_1036 i_1037) 
     in
       dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + v1_1035 i_1037) + v2_1036 i_1037) 
 in
 let main_1039 n_1040 m_1041 z_1042 =
   let v1_1043 = make_array_1030 n_1040 
   in
   let v2_1044 = make_array_1030 n_1040 
   in
     if z_1042 = 0 then
       let u_1166 = dotprod_1033 n_1040 v1_1043 v2_1044 z_1042 z_1042 
       in
         ()
     else
       () 
 in
 let main_1170 =
   let arg1_1167 = rand_int () 
   in
   let arg2_1168 = () 
   in
   let arg3_1169 = rand_int () 
   in
     main_1039 arg1_1167 arg2_1168 arg3_1169 
 in
   ()

copy_poly::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let rec dotprod_1033 (n_1034:int) (v1_1035:(int -> int)) (v2_1036:(int -> int)) (i_1037:int) (sum_1038:int) =
   if i_1037 >= n_1034 then
     sum_1038
   else
     let u_1129 = dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + v1_1035 i_1037) + v2_1036 i_1037) 
     in
       dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + v1_1035 i_1037) + v2_1036 i_1037) 
 in
 let main_1039 (n_1040:int) (m_1041:unit) (z_1042:int) =
   let v1_1043 = make_array_1030 n_1040 
   in
   let v2_1044 = make_array_1030 n_1040 
   in
     if z_1042 = 0 then
       let u_1166 = dotprod_1033 n_1040 v1_1043 v2_1044 z_1042 z_1042 
       in
         ()
     else
       () 
 in
 let main_1170 =
   let arg1_1167 = rand_int () 
   in
   let arg2_1168 = () 
   in
   let arg3_1169 = rand_int () 
   in
     main_1039 arg1_1167 arg2_1168 arg3_1169 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1198:(int -> X)) =
   let k_make_array_u_1215 (x_1201:unit) = k_make_array_1198 0 
   in
   let k_make_array_u_1204 (b_1216:bool) =
     if b_1216 then
       k_make_array_u_1215 ()
     else
       {|fail|} () k_make_array_u_1215 
   in
     if 0 <= i_1032 then
       k_make_array_u_1204 (i_1032 < n_1031)
     else
       k_make_array_u_1204 false 
 in
 let rec dotprod_1033
   (n_1034:int) (v1_1035:(int -> ((int -> X) -> X))) (v2_1036:(int -> ((int -> X) -> X))) (i_1037:int) (sum_1038:int) (k_dotprod_1266:(
   int -> X)) =
   if i_1037 >= n_1034 then
     k_dotprod_1266 sum_1038
   else
     v1_1035 i_1037
       (fun x_1296 ->
          v2_1036 i_1037
            (fun x_1292 ->
               dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1296) + x_1292)
                 (fun x_1269 ->
                    v1_1035 i_1037
                      (fun x_1350 ->
                         v2_1036 i_1037
                           (fun x_1346 ->
                              dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) (
                                (sum_1038 + x_1350) + x_1346) k_dotprod_1266))))) 
 in
 let main_1039 (n_1040:int) (m_1041:unit) (z_1042:int) (k_main_1401:(
   unit -> X)) =
   if z_1042 = 0 then
     dotprod_1033 n_1040 (make_array_1030 n_1040) (make_array_1030 n_1040) z_1042 z_1042 (fun x_1436 -> k_main_1401 ())
   else
     k_main_1401 () 
 in
   rand_int_cps () (fun x_1472 -> rand_int_cps () (fun x_1488 -> main_1039 x_1472 () x_1488 (fun x_1469 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1518
  main_1518 -> (rand_int f_1525)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      i_1037 >= n_1034) -> (k_dotprod_1266 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036))
  f_1525 x_1472 -> (rand_int (f_1526 x_1472))
  f_1526 x_1472 x_1488 -> (main_1039 x_1472 () x_1488 (f_1527 x_1472 x_1488))
  f_1527 x_1472 x_1488 x_1469 -> end
  f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 ->
      (v2_1036 i_1037 (f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1296) + x_1292)
        (f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 ->
      (v1_1035 i_1037 (f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 ->
      (v2_1036 i_1037
        (f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1350) + x_1346) k_dotprod_1266)
  f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 -> (k_main_1401 ())
  fail_1528 b k -> {fail} => (k ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when b_1216 ->
      (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when (not b_1216) ->
      (fail_1528 true (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198))
  k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 -> (k_make_array_1198 0)
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (z_1042 = 0) ->
      (dotprod_1033 n_1040 (make_array_1030 n_1040) (make_array_1030 n_1040) z_1042 z_1042
        (f_main_1524 m_1041 n_1040 z_1042 k_main_1401))
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (not (z_1042 = 0)) -> (k_main_1401 ())
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (0 <= i_1032) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (not (0 <= i_1032)) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 false)
Types:
  main_1518 : X
  dotprod_1033 : (int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X)
  fail_1528 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1518 ... --> 
  f_1525 ... --> 
  f_1526 ... --> 
  main_1039 [1/2] ... --> 
  dotprod_1033 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1204 [2/2] ... --> 
  fail_1528 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(181)[1]
  program:
    main_1518  | true = ((Random.int 0) f_1525)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    i_1037 >= n_1034) = (k_dotprod_1266 sum_1038)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    not (i_1037 >= n_1034)) = (v1_1035 i_1037
                                       (f_dotprod_1519 i_1037
                                                       n_1034
                                                       sum_1038
                                                       k_dotprod_1266
                                                       v1_1035
                                                       v2_1036))
    f_1525 x_1472 | true = ((Random.int 0) (f_1526 x_1472))
    f_1526 x_1472 x_1488 | true = (main_1039 x_1472
                                             ()
                                             x_1488
                                             (f_1527 x_1472
                                                     x_1488))
    f_1527 x_1472 x_1488 x_1469 | true = end
    f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 | true = (
    v2_1036 i_1037
            (f_dotprod_1520 i_1037
                            n_1034
                            sum_1038
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 | true = (
    dotprod_1033
      n_1034
      v1_1035
      v2_1036
      (i_1037 + 1)
      ((sum_1038 + x_1296) + x_1292)
      (f_dotprod_1521 i_1037
                      n_1034
                      sum_1038
                      x_1292
                      x_1296
                      k_dotprod_1266
                      v1_1035
                      v2_1036))
    f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 | true = (
    v1_1035 i_1037
            (f_dotprod_1522 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 | true = (
    v2_1036 i_1037
            (f_dotprod_1523 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            x_1350
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 | true = (
    dotprod_1033 n_1034
                 v1_1035
                 v2_1036
                 (i_1037 + 1)
                 ((sum_1038 + x_1350) + x_1346)
                 k_dotprod_1266)
    f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 | true = (k_main_1401 ())
    fail_1528 b k | true = (fail ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | b_1216 = (
    k_make_array_u_1215 i_1032
                        n_1031
                        k_make_array_1198
                        ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | (not b_1216) = (
    fail_1528 true
              (k_make_array_u_1215 i_1032
                                   n_1031
                                   k_make_array_1198))
    k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 | true = (
    k_make_array_1198 0)
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (z_1042 = 0) = (dotprod_1033
                                                                   n_1040
                                                                   (make_array_1030 n_1040)
                                                                   (make_array_1030 n_1040)
                                                                   z_1042
                                                                   z_1042
                                                                   (f_main_1524 m_1041
                                                                    n_1040
                                                                    z_1042
                                                                    k_main_1401))
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (not (z_1042 = 0)) = (
    k_main_1401 ())
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (0 <= i_1032) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (not (0 <= i_1032)) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        false)
    main_1518:X
    dotprod_1033:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1525:int -> X
    f_1526:int -> int -> X
    f_1527:int -> int -> unit -> X
    f_dotprod_1519:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1520:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1521:int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1522:int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1523:int ->
                   int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1524:unit -> int -> int -> (unit -> X) -> int -> X
    fail_1528:bool -> (unit -> X) -> X
    k_make_array_u_1204:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1215:int -> int -> (int -> X) -> unit -> X
    main_1039:int -> unit -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1525,f_1526,f_1527,f_dotprod_1519,f_dotprod_1520,f_dotprod_1521,f_dotprod_1522,f_dotprod_1523,f_main_1524,k_make_array_u_1204,k_make_array_u_1215,main_1039,make_array_1030
  counterexample: 0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1525@4:0> = var2)
     [true.nop((<f_1526@7:0> = <f_1525@4:0>) && (<f_1526@7:1> = var3))
      [true.((<main_1039@9:0> = <f_1526@7:0>) && ((<main_1039@9:1> = ()) && (<main_1039@9:2> = <f_1526@7:1>)))
       [(<main_1039@9:2> = 0).
        ((<dotprod_1033@12:0> = <main_1039@9:0>) &&
         ((<dotprod_1033@12:3> = <main_1039@9:2>) && (<dotprod_1033@12:4> = <main_1039@9:2>)))
        [(not (<dotprod_1033@12:3> >= <dotprod_1033@12:0>)).(<<dotprod_1033@12:1>@15:0> = <dotprod_1033@12:3>)
         [true.((<make_array_1030@17:0> = <main_1039@9:0>) && (<make_array_1030@17:1> = <<dotprod_1033@12:1>@15:0>))
          [(not (0 <= <make_array_1030@17:1>)).
           ((<k_make_array_u_1204@20:0> = <make_array_1030@17:1>) &&
            ((<k_make_array_u_1204@20:1> = <make_array_1030@17:0>) && (<k_make_array_u_1204@20:3> = false)))
           [(not <k_make_array_u_1204@20:3>).(<fail_1528@23:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(182)[2]
    horn clauses:
      P[<fail_1528@23:0>](<fail_1528@23:0>:bool)|- bot
      
      P[<k_make_array_u_1204@20:3>](<k_make_array_u_1204@20:0>:int,<k_make_array_u_1204@20:1>:int,false:bool),
      <fail_1528@23:0> |- P[<fail_1528@23:0>](<fail_1528@23:0>:bool)
      
      P[<make_array_1030@17:1>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
      ((0 > <k_make_array_u_1204@20:0>) && (not <k_make_array_u_1204@20:3>))
      |- P[<k_make_array_u_1204@20:3>](<k_make_array_u_1204@20:0>:int,
                                       <k_make_array_u_1204@20:1>:int,
                                       <k_make_array_u_1204@20:3>:bool)
      
      P[<main_1039@9:2>](<make_array_1030@17:0>:int,<main_1039@9:1>:unit,0:int),
      P[<<dotprod_1033@12:1>@15:0>](<make_array_1030@17:0>:int,<make_array_1030@17:1>:int)|- P[<make_array_1030@17:1>](
      <make_array_1030@17:0>:int,<make_array_1030@17:1>:int)
      
      P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
      (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
      |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
      
      P[<main_1039@9:2>](<dotprod_1033@12:0>:int,<main_1039@9:1>:unit,<dotprod_1033@12:4>:int),
      ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
      |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                <dotprod_1033@12:4>:int)
      
      P[<f_1526@7:1>](<main_1039@9:0>:int,<main_1039@9:2>:int)|- P[<main_1039@9:2>](
      <main_1039@9:0>:int,<main_1039@9:1>:unit,<main_1039@9:2>:int)
      
      P[<f_1525@4:0>](<f_1526@7:0>:int)|- P[<f_1526@7:1>](<f_1526@7:0>:int,
                                                          <f_1526@7:1>:int)
      
      |- P[<f_1525@4:0>](<f_1525@4:0>:int)
    call trees:
      <main_1518@1>
        <f_1525@4>
          <f_1526@7>
            <main_1039@9>
              <dotprod_1033@12>
              </<dotprod_1033@12:1>@15>
              <make_array_1030@17>
                <k_make_array_u_1204@20>
                  <fail_1528@23>
    inlined horn clauses:
      P[<fail_1528@23:0>](<fail_1528@23:0>:bool)|- bot
      
      P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
      ((0 > <k_make_array_u_1204@20:0>) && <fail_1528@23:0>) |- P[<fail_1528@23:0>](
      <fail_1528@23:0>:bool)
      
      P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
      (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
      |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
      
       ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
      |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                <dotprod_1033@12:4>:int)
    begin ParamSubstInfer.infer(1189)[3]
      
    end ParamSubstInfer.infer(1189)[3] (0.024996 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1191)[3]
      
    end RefTypeInfer.elim_coeffs(1191)[3] (0.000000 sec.)
    begin GenHcSolver.solve(1350)[3]
      Horn clauses:
        P[<fail_1528@23:0>](<fail_1528@23:0>:bool)|- bot
        
        P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
        ((0 > <k_make_array_u_1204@20:0>) && <fail_1528@23:0>) |- P[<fail_1528@23:0>](
        <fail_1528@23:0>:bool)
        
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
        (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
        |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
        
         ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                  <dotprod_1033@12:4>:int)
      lower bounds:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
        ((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
        P[<fail_1528@23:0>](<fail_1528@23:0>:bool) = false
      upper bounds:
        P[<fail_1528@23:0>](var5:bool) = true
      begin GenHcSolver.classify_pids(2282)[4]
        output:
          [<fail_1528@23:0>]
      end GenHcSolver.classify_pids(2282)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2285)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2286)[5]
          begin InterpProver.interpolate_fresh(2287)[6]
            begin InterpProver.interpolate_log(2288)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2289)[8]
                begin InterpProver.interpolate_simplify(2290)[9]
                  begin InterpProver.interpolate_quick(2303)[10]
                    
                  end InterpProver.interpolate_quick(2303)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2307)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2307)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2290)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2289)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2288)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2287)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2286)[5] (0.000000 sec.)
        output:
          P[<fail_1528@23:0>](<fail_1528@23:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2285)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
        (0 > <k_make_array_u_1204@20:0>) |- bot
        
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
        (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
        |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
        
         ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                  <dotprod_1033@12:4>:int)
      lower bounds:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
        ((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
      upper bounds:
        P[<<dotprod_1033@12:1>@15:0>](var6:int,var7:int) = (0 <= var7)
      begin GenHcSolver.classify_pids(3371)[4]
        output:
          [<<dotprod_1033@12:1>@15:0>]
      end GenHcSolver.classify_pids(3371)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
      nub:(not (0 <= <<dotprod_1033@12:1>@15:0>))
      begin ApronInterface.convex_hull_interpolate(3374)[4]
        lb:((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
        nub:(not (0 <= <<dotprod_1033@12:1>@15:0>))
        lb':((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
        nub':(not (0 <= <<dotprod_1033@12:1>@15:0>))
        begin InterpProver.interpolate(3375)[5]
          begin InterpProver.interpolate_fresh(3376)[6]
            begin InterpProver.interpolate_log(3377)[7]
              input1: ((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
              input2: (not (0 <= <<dotprod_1033@12:1>@15:0>))
              begin InterpProver.interpolate_check(3378)[8]
                begin InterpProver.interpolate_simplify(3379)[9]
                  begin InterpProver.interpolate_quick(3412)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(3421)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(3422)[12]
                        begin CsisatInterface.interpolate_csisat_log(3423)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 & (1 + v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0) <= v_sep_dotprod_1033_sep_12_sep_0)
                          input2: (1 + v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(3424)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(3424)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(3423)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(3422)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(3421)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(3412)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(3379)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(3378)[8] (0.000999 sec.)
              output: (0 <= <<dotprod_1033@12:1>@15:0>)
            end InterpProver.interpolate_log(3377)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(3376)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(3375)[5] (0.000999 sec.)
        output:
          P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
          (0 <= <<dotprod_1033@12:1>@15:0>)
      end ApronInterface.convex_hull_interpolate(3374)[4] (0.000999 sec.)
      Horn clauses:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
        ((<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>) && (0 > <<dotprod_1033@12:1>@15:0>)) |- bot
        
         ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                  <dotprod_1033@12:4>:int)
      lower bounds:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
      upper bounds:
        P[<dotprod_1033@12:4>](var8:int,var9:int,var10:int) = ((var9 >= var8) || (0 <= var9))
      begin GenHcSolver.classify_pids(4438)[4]
        output:
          [<dotprod_1033@12:4>]
      end GenHcSolver.classify_pids(4438)[4] (0.000000 sec.)
      lb:((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
      nub:(not ((<dotprod_1033@12:3> >= <dotprod_1033@12:0>) || (0 <= <dotprod_1033@12:3>)))
      begin ApronInterface.convex_hull_interpolate(4441)[4]
        lb:((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        nub:(not ((<dotprod_1033@12:3> >= <dotprod_1033@12:0>) || (0 <= <dotprod_1033@12:3>)))
        lb':((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        nub':(not ((<dotprod_1033@12:3> >= <dotprod_1033@12:0>) || (0 <= <dotprod_1033@12:3>)))
        begin InterpProver.interpolate(4442)[5]
          begin InterpProver.interpolate_fresh(4443)[6]
            begin InterpProver.interpolate_log(4444)[7]
              input1: ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
              input2: (not ((<dotprod_1033@12:3> >= <dotprod_1033@12:0>) || (0 <= <dotprod_1033@12:3>)))
              begin InterpProver.interpolate_check(4445)[8]
                begin InterpProver.interpolate_simplify(4446)[9]
                  begin InterpProver.interpolate_quick(4493)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(4502)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(4503)[12]
                        begin CsisatInterface.interpolate_csisat_log(4504)[13]
                          input1: 0 = v_sep_dotprod_1033_sep_12_sep_3
                          input2: ((1 + v_sep_dotprod_1033_sep_12_sep_3) <= 0 & (1 + v_sep_dotprod_1033_sep_12_sep_3) <= v_sep_dotprod_1033_sep_12_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(4505)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(4505)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_12_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(4504)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_12_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_12_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(4503)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(4502)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(4493)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(4446)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(4445)[8] (0.001999 sec.)
              output: (0 <= <dotprod_1033@12:3>)
            end InterpProver.interpolate_log(4444)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(4443)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(4442)[5] (0.001999 sec.)
        output:
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
          (0 <= <dotprod_1033@12:3>)
      end ApronInterface.convex_hull_interpolate(4441)[4] (0.001999 sec.)
      begin HcSolver.check_validity(4662)[4]
        input:
          P[<fail_1528@23:0>](<fail_1528@23:0>:bool)|- bot
          
          P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
          ((0 > <k_make_array_u_1204@20:0>) && <fail_1528@23:0>) |- P[<fail_1528@23:0>](
          <fail_1528@23:0>:bool)
          
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
          (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
          |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
          
           ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
          |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                    <dotprod_1033@12:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(4662)[4] (0.000000 sec.)
      solution:
        P[<fail_1528@23:0>](<fail_1528@23:0>:bool) = false
        P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
        (0 <= <<dotprod_1033@12:1>@15:0>)
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        (0 <= <dotprod_1033@12:3>)
    end GenHcSolver.solve(1350)[3] (0.022996 sec.)
    begin GenHcSolver.solve(4934)[3]
      Horn clauses:
        P[<fail_1528@23:0>](<fail_1528@23:0>:bool)|- bot
        
        P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
        ((0 > <k_make_array_u_1204@20:0>) && <fail_1528@23:0>) |- P[<fail_1528@23:0>](
        <fail_1528@23:0>:bool)
        
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
        (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
        |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
        
         ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                  <dotprod_1033@12:4>:int)
      lower bounds:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
        ((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
        P[<fail_1528@23:0>](<fail_1528@23:0>:bool) = false
      upper bounds:
        P[<fail_1528@23:0>](var12:bool) = true
      begin GenHcSolver.classify_pids(5866)[4]
        output:
          [<fail_1528@23:0>]
      end GenHcSolver.classify_pids(5866)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(5869)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(5872)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5872)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5877)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5877)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(5880)[5]
          begin InterpProver.interpolate_fresh(5881)[6]
            begin InterpProver.interpolate_log(5882)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(5883)[8]
                begin InterpProver.interpolate_simplify(5884)[9]
                  begin InterpProver.interpolate_quick(5899)[10]
                    
                  end InterpProver.interpolate_quick(5899)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(5903)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(5903)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5884)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5883)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(5882)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(5881)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(5880)[5] (0.001000 sec.)
        output:
          P[<fail_1528@23:0>](<fail_1528@23:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(5869)[4] (0.002000 sec.)
      Horn clauses:
        P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
        (0 > <k_make_array_u_1204@20:0>) |- bot
        
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
        (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
        |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
        
         ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                  <dotprod_1033@12:4>:int)
      lower bounds:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
        ((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
      upper bounds:
        P[<<dotprod_1033@12:1>@15:0>](var13:int,var14:int) = (0 <= var14)
      begin GenHcSolver.classify_pids(6974)[4]
        output:
          [<<dotprod_1033@12:1>@15:0>]
      end GenHcSolver.classify_pids(6974)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
      nub:(not (0 <= <<dotprod_1033@12:1>@15:0>))
      begin ApronInterface.convex_hull_interpolate(6977)[4]
        lb:((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
        nub:(not (0 <= <<dotprod_1033@12:1>@15:0>))
        begin ExtFormula.Formula.case_analysis_boolean(6989)[5]
          ts: ((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(6989)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(6998)[5]
          ts: (0 > <<dotprod_1033@12:1>@15:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(6998)[5] (0.000000 sec.)
        lb':((<<dotprod_1033@12:1>@15:0> = 0) && ((-1 + <dotprod_1033@12:0>) >= 0))
        nub':((-1 + (-1 * <<dotprod_1033@12:1>@15:0>)) >= 0)
        begin InterpProver.interpolate(7002)[5]
          begin InterpProver.interpolate_fresh(7003)[6]
            begin InterpProver.interpolate_log(7004)[7]
              input1: ((<<dotprod_1033@12:1>@15:0> = 0) && ((-1 + <dotprod_1033@12:0>) >= 0))
              input2: ((-1 + (-1 * <<dotprod_1033@12:1>@15:0>)) >= 0)
              begin InterpProver.interpolate_check(7005)[8]
                begin InterpProver.interpolate_simplify(7006)[9]
                  begin InterpProver.interpolate_quick(7043)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(7052)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(7053)[12]
                        begin CsisatInterface.interpolate_csisat_log(7054)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 & 1 <= v_sep_dotprod_1033_sep_12_sep_0)
                          input2: (1 + v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(7055)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(7055)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(7054)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(7053)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(7052)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(7043)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(7006)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(7005)[8] (0.000000 sec.)
              output: (0 <= <<dotprod_1033@12:1>@15:0>)
            end InterpProver.interpolate_log(7004)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(7003)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(7002)[5] (0.000000 sec.)
        output:
          P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
          (0 <= <<dotprod_1033@12:1>@15:0>)
      end ApronInterface.convex_hull_interpolate(6977)[4] (0.001000 sec.)
      Horn clauses:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
        ((<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>) && (0 > <<dotprod_1033@12:1>@15:0>)) |- bot
        
         ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                  <dotprod_1033@12:4>:int)
      lower bounds:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
      upper bounds:
        P[<dotprod_1033@12:4>](var15:int,var16:int,var17:int) = ((var16 >= var15) || (0 <= var16))
      begin GenHcSolver.classify_pids(8076)[4]
        output:
          [<dotprod_1033@12:4>]
      end GenHcSolver.classify_pids(8076)[4] (0.000000 sec.)
      lb:((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
      nub:(not ((<dotprod_1033@12:3> >= <dotprod_1033@12:0>) || (0 <= <dotprod_1033@12:3>)))
      begin ApronInterface.convex_hull_interpolate(8079)[4]
        lb:((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        nub:(not ((<dotprod_1033@12:3> >= <dotprod_1033@12:0>) || (0 <= <dotprod_1033@12:3>)))
        begin ExtFormula.Formula.case_analysis_boolean(8091)[5]
          ts: ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(8091)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(8111)[5]
          ts: ((<dotprod_1033@12:3> < <dotprod_1033@12:0>) && (0 > <dotprod_1033@12:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(8111)[5] (0.000000 sec.)
        lb':((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:3> = 0))
        nub':(((-1 + (-1 * <dotprod_1033@12:3>)) >= 0) &&
              (((-1 + (-1 * <dotprod_1033@12:3>)) + <dotprod_1033@12:0>) >= 0))
        begin InterpProver.interpolate(8117)[5]
          begin InterpProver.interpolate_fresh(8118)[6]
            begin InterpProver.interpolate_log(8119)[7]
              input1: ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:3> = 0))
              input2: (((-1 + (-1 * <dotprod_1033@12:3>)) >= 0) &&
                       (((-1 + (-1 * <dotprod_1033@12:3>)) + <dotprod_1033@12:0>) >= 0))
              begin InterpProver.interpolate_check(8120)[8]
                begin InterpProver.interpolate_simplify(8121)[9]
                  begin InterpProver.interpolate_quick(8185)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(8194)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(8195)[12]
                        begin CsisatInterface.interpolate_csisat_log(8196)[13]
                          input1: 0 = v_sep_dotprod_1033_sep_12_sep_3
                          input2: ((1 + v_sep_dotprod_1033_sep_12_sep_3) <= 0 & (1 + v_sep_dotprod_1033_sep_12_sep_3) <= v_sep_dotprod_1033_sep_12_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(8197)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(8197)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_12_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(8196)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_12_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_12_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(8195)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(8194)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(8185)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(8121)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(8120)[8] (0.001000 sec.)
              output: (0 <= <dotprod_1033@12:3>)
            end InterpProver.interpolate_log(8119)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(8118)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(8117)[5] (0.001000 sec.)
        output:
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
          (0 <= <dotprod_1033@12:3>)
      end ApronInterface.convex_hull_interpolate(8079)[4] (0.001000 sec.)
      begin HcSolver.check_validity(8358)[4]
        input:
          P[<fail_1528@23:0>](<fail_1528@23:0>:bool)|- bot
          
          P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
          ((0 > <k_make_array_u_1204@20:0>) && <fail_1528@23:0>) |- P[<fail_1528@23:0>](
          <fail_1528@23:0>:bool)
          
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
          (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
          |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
          
           ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
          |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                    <dotprod_1033@12:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(8358)[4] (0.001000 sec.)
      solution:
        P[<fail_1528@23:0>](<fail_1528@23:0>:bool) = false
        P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
        (0 <= <<dotprod_1033@12:1>@15:0>)
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        (0 <= <dotprod_1033@12:3>)
    end GenHcSolver.solve(4934)[3] (0.020997 sec.)
    begin YhornInterface.solve(8630)[3]
      begin HcSolver.solve_ub(8631)[4]
        encoded:
          P[<fail_1528@23:0>](<fail_1528@23:0>:int)|- bot
          
          P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
          ((0 > <k_make_array_u_1204@20:0>) && (<fail_1528@23:0> = 1)) |- P[<fail_1528@23:0>](
          <fail_1528@23:0>:int)
          
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
          (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
          |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
          
           ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
          |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                    <dotprod_1033@12:4>:int)
        input to Yhorn:
          P[<fail_1528@23:0>](<fail_1528@23:0>:int)|- bot
          
          P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
          ((0 > <k_make_array_u_1204@20:0>) && (<fail_1528@23:0> = 1)) |- P[<fail_1528@23:0>](
          <fail_1528@23:0>:int)
          
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
          (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
          |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
          
           ((<dotprod_1033@12:4> = <dotprod_1033@12:3>) && (<dotprod_1033@12:4> = 0))
          |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                    <dotprod_1033@12:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1528_sep_23_sep_0($8)) -> 1=0.
(($8-1=0) & (-$9>0)) & (v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0($10,$9)) -> v_sep_fail_1528_sep_23_sep_0($8).
($11-$12<0) & (v_sep_dotprod_1033_sep_12_sep_4($12,$11,$13)) -> v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0($12,$11).
($13=0) & ($13-$14=0) -> v_sep_dotprod_1033_sep_12_sep_4($12,$14,$13).


v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_dotprod_1033_sep_12_sep_4: X
v_sep_fail_1528_sep_23_sep_0: X
....
v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_dotprod_1033_sep_12_sep_4: X
v_sep_fail_1528_sep_23_sep_0: X
...
v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_dotprod_1033_sep_12_sep_4: X
v_sep_fail_1528_sep_23_sep_0: X
....
v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_dotprod_1033_sep_12_sep_4: X
v_sep_fail_1528_sep_23_sep_0: X
....(0=0) & (v_sep_fail_1528_sep_23_sep_0($8)) -> 1=0.
(($8-1=0) & (-$9>0)) & (v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0($10,$9)) -> v_sep_fail_1528_sep_23_sep_0($8).
($11-$12<0) & (v_sep_dotprod_1033_sep_12_sep_4($12,$11,$13)) -> v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0($12,$11).
($13=0) & ($13-$14=0) -> v_sep_dotprod_1033_sep_12_sep_4($12,$14,$13).

        solution:
          P[<<dotprod_1033@12:1>@15:0>]($18:int,$20:int) = (0 <= $20)
          P[<dotprod_1033@12:4>]($23:int,$25:int,$27:int) = (0 <= $25)
          P[<fail_1528@23:0>]($15:bool) = false
        
      end HcSolver.solve_ub(8631)[4] (0.016998 sec.)
      begin HcSolver.check_validity(8741)[4]
        input:
          P[<fail_1528@23:0>](<fail_1528@23:0>:bool)|- bot
          
          P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1204@20:1>:int,<k_make_array_u_1204@20:0>:int),
          ((0 > <k_make_array_u_1204@20:0>) && <fail_1528@23:0>) |- P[<fail_1528@23:0>](
          <fail_1528@23:0>:bool)
          
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
          (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
          |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
          
           ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
          |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                    <dotprod_1033@12:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(8741)[4] (0.001999 sec.)
      solution:
        P[<<dotprod_1033@12:1>@15:0>]($18:int,$20:int) = (0 <= $20)
        P[<dotprod_1033@12:4>]($23:int,$25:int,$27:int) = (0 <= $25)
        P[<fail_1528@23:0>]($15:bool) = false
    end YhornInterface.solve(8630)[3] (0.018997 sec.)
    
  end RefTypeInfer.infer_etrs(182)[2] (0.094985 sec.)
  refinement types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:{v11:int | (0 <= v10)} -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1528: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1527: var37:int -> var36:int -> var35:unit -> X
    f_dotprod_1519: var52:int ->
                    var51:int ->
                    var50:int ->
                    (var49:int -> X) ->
                    (var47:int -> (var46:int -> X) -> X) -> (var43:int -> (var42:int -> X) -> X) -> var39:int -> X
    f_dotprod_1520: var68:int ->
                    var67:int ->
                    var66:int ->
                    var65:int ->
                    (var64:int -> X) ->
                    (var62:int -> (var61:int -> X) -> X) -> (var58:int -> (var57:int -> X) -> X) -> var54:int -> X
    f_dotprod_1521: var85:int ->
                    var84:int ->
                    var83:int ->
                    var82:int ->
                    var81:int ->
                    (var80:int -> X) ->
                    (var78:int -> (var77:int -> X) -> X) -> (var74:int -> (var73:int -> X) -> X) -> var70:int -> X
    f_dotprod_1522: var103:int ->
                    var102:int ->
                    var101:int ->
                    var100:int ->
                    var99:int ->
                    var98:int ->
                    (var97:int -> X) ->
                    (var95:int -> (var94:int -> X) -> X) -> (var91:int -> (var90:int -> X) -> X) -> var87:int -> X
    f_dotprod_1523: var122:int ->
                    var121:int ->
                    var120:int ->
                    var119:int ->
                    var118:int ->
                    var117:int ->
                    var116:int ->
                    (var115:int -> X) ->
                    (var113:int -> (var112:int -> X) -> X) -> (var109:int -> (var108:int -> X) -> X) -> var105:int -> X
    f_main_1524: var129:unit -> var128:int -> var127:int -> (var126:unit -> X) -> var124:int -> X
    k_make_array_u_1215: var135:int -> var134:int -> (var133:int -> X) -> var131:unit -> X
  abstraction types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:int[v11 -> (
                                                                    0 <= v10)] -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1528: v1:bool -> (v2:unit -> X) -> X
    f_1527: var37:int -> var36:int -> var35:unit -> X
    f_dotprod_1519: var52:int ->
                    var51:int ->
                    var50:int ->
                    (var49:int -> X) ->
                    (var47:int -> (var46:int -> X) -> X) -> (var43:int -> (var42:int -> X) -> X) -> var39:int -> X
    f_dotprod_1520: var68:int ->
                    var67:int ->
                    var66:int ->
                    var65:int ->
                    (var64:int -> X) ->
                    (var62:int -> (var61:int -> X) -> X) -> (var58:int -> (var57:int -> X) -> X) -> var54:int -> X
    f_dotprod_1521: var85:int ->
                    var84:int ->
                    var83:int ->
                    var82:int ->
                    var81:int ->
                    (var80:int -> X) ->
                    (var78:int -> (var77:int -> X) -> X) -> (var74:int -> (var73:int -> X) -> X) -> var70:int -> X
    f_dotprod_1522: var103:int ->
                    var102:int ->
                    var101:int ->
                    var100:int ->
                    var99:int ->
                    var98:int ->
                    (var97:int -> X) ->
                    (var95:int -> (var94:int -> X) -> X) -> (var91:int -> (var90:int -> X) -> X) -> var87:int -> X
    f_dotprod_1523: var122:int ->
                    var121:int ->
                    var120:int ->
                    var119:int ->
                    var118:int ->
                    var117:int ->
                    var116:int ->
                    (var115:int -> X) ->
                    (var113:int -> (var112:int -> X) -> X) -> (var109:int -> (var108:int -> X) -> X) -> var105:int -> X
    f_main_1524: var129:unit -> var128:int -> var127:int -> (var126:unit -> X) -> var124:int -> X
    k_make_array_u_1215: var135:int -> var134:int -> (var133:int -> X) -> var131:unit -> X
  
end AbsTypeInfer.refine(181)[1] (0.099985 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1518
  main_1518 -> (rand_int f_1525)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      i_1037 >= n_1034) -> (k_dotprod_1266 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036))
  f_1525 x_1472 -> (rand_int (f_1526 x_1472))
  f_1526 x_1472 x_1488 -> (main_1039 x_1472 () x_1488 (f_1527 x_1472 x_1488))
  f_1527 x_1472 x_1488 x_1469 -> end
  f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 ->
      (v2_1036 i_1037 (f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1296) + x_1292)
        (f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 ->
      (v1_1035 i_1037 (f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 ->
      (v2_1036 i_1037
        (f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1350) + x_1346) k_dotprod_1266)
  f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 -> (k_main_1401 ())
  fail_1528 b k -> {fail} => (k ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when b_1216 ->
      (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when (not b_1216) ->
      (fail_1528 true (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198))
  k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 -> (k_make_array_1198 0)
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (z_1042 = 0) ->
      (dotprod_1033 n_1040 (make_array_1030 n_1040) (make_array_1030 n_1040) z_1042 z_1042
        (f_main_1524 m_1041 n_1040 z_1042 k_main_1401))
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (not (z_1042 = 0)) -> (k_main_1401 ())
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (0 <= i_1032) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (not (0 <= i_1032)) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 false)
Types:
  main_1518 : X
  dotprod_1033 : (int ->
                  (x_3:int[x_3 >= 0] -> (int -> X) -> X) ->
                  (int -> (int -> X) -> X) -> x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1528 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1518 ... --> 
  f_1525 ... --> 
  f_1526 ... --> 
  main_1039 [1/2] ... --> 
  dotprod_1033 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1204 [2/2] ... --> 
  fail_1528 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(9522)[1]
  program:
    main_1518  | true = ((Random.int 0) f_1525)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    i_1037 >= n_1034) = (k_dotprod_1266 sum_1038)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    not (i_1037 >= n_1034)) = (v1_1035 i_1037
                                       (f_dotprod_1519 i_1037
                                                       n_1034
                                                       sum_1038
                                                       k_dotprod_1266
                                                       v1_1035
                                                       v2_1036))
    f_1525 x_1472 | true = ((Random.int 0) (f_1526 x_1472))
    f_1526 x_1472 x_1488 | true = (main_1039 x_1472
                                             ()
                                             x_1488
                                             (f_1527 x_1472
                                                     x_1488))
    f_1527 x_1472 x_1488 x_1469 | true = end
    f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 | true = (
    v2_1036 i_1037
            (f_dotprod_1520 i_1037
                            n_1034
                            sum_1038
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 | true = (
    dotprod_1033
      n_1034
      v1_1035
      v2_1036
      (i_1037 + 1)
      ((sum_1038 + x_1296) + x_1292)
      (f_dotprod_1521 i_1037
                      n_1034
                      sum_1038
                      x_1292
                      x_1296
                      k_dotprod_1266
                      v1_1035
                      v2_1036))
    f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 | true = (
    v1_1035 i_1037
            (f_dotprod_1522 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 | true = (
    v2_1036 i_1037
            (f_dotprod_1523 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            x_1350
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 | true = (
    dotprod_1033 n_1034
                 v1_1035
                 v2_1036
                 (i_1037 + 1)
                 ((sum_1038 + x_1350) + x_1346)
                 k_dotprod_1266)
    f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 | true = (k_main_1401 ())
    fail_1528 b k | true = (fail ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | b_1216 = (
    k_make_array_u_1215 i_1032
                        n_1031
                        k_make_array_1198
                        ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | (not b_1216) = (
    fail_1528 true
              (k_make_array_u_1215 i_1032
                                   n_1031
                                   k_make_array_1198))
    k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 | true = (
    k_make_array_1198 0)
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (z_1042 = 0) = (dotprod_1033
                                                                   n_1040
                                                                   (make_array_1030 n_1040)
                                                                   (make_array_1030 n_1040)
                                                                   z_1042
                                                                   z_1042
                                                                   (f_main_1524 m_1041
                                                                    n_1040
                                                                    z_1042
                                                                    k_main_1401))
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (not (z_1042 = 0)) = (
    k_main_1401 ())
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (0 <= i_1032) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (not (0 <= i_1032)) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        false)
    main_1518:X
    dotprod_1033:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1525:int -> X
    f_1526:int -> int -> X
    f_1527:int -> int -> unit -> X
    f_dotprod_1519:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1520:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1521:int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1522:int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1523:int ->
                   int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1524:unit -> int -> int -> (unit -> X) -> int -> X
    fail_1528:bool -> (unit -> X) -> X
    k_make_array_u_1204:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1215:int -> int -> (int -> X) -> unit -> X
    main_1039:int -> unit -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1525,f_1526,f_1527,f_dotprod_1519,f_dotprod_1520,f_dotprod_1521,f_dotprod_1522,f_dotprod_1523,f_main_1524,k_make_array_u_1204,k_make_array_u_1215,main_1039,make_array_1030
  counterexample: 0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1525@29:0> = var136)
     [true.nop((<f_1526@32:0> = <f_1525@29:0>) && (<f_1526@32:1> = var137))
      [true.((<main_1039@34:0> = <f_1526@32:0>) && ((<main_1039@34:1> = ()) && (<main_1039@34:2> = <f_1526@32:1>)))
       [(<main_1039@34:2> = 0).
        ((<dotprod_1033@37:0> = <main_1039@34:0>) &&
         ((<dotprod_1033@37:3> = <main_1039@34:2>) && (<dotprod_1033@37:4> = <main_1039@34:2>)))
        [(not (<dotprod_1033@37:3> >= <dotprod_1033@37:0>)).(<<dotprod_1033@37:1>@40:0> = <dotprod_1033@37:3>)
         [true.((<make_array_1030@42:0> = <main_1039@34:0>) && (<make_array_1030@42:1> = <<dotprod_1033@37:1>@40:0>))
          [(0 <= <make_array_1030@42:1>).
           ((<k_make_array_u_1204@45:0> = <make_array_1030@42:1>) &&
            ((<k_make_array_u_1204@45:1> = <make_array_1030@42:0>) &&
             (<k_make_array_u_1204@45:3> = (<make_array_1030@42:1> < <make_array_1030@42:0>))))
           [(not <k_make_array_u_1204@45:3>).(<fail_1528@48:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(9523)[2]
    horn clauses:
      P[<fail_1528@48:0>](<fail_1528@48:0>:bool)|- bot
      
      P[<k_make_array_u_1204@45:3>](<k_make_array_u_1204@45:0>:int,<k_make_array_u_1204@45:1>:int,false:bool),
      <fail_1528@48:0> |- P[<fail_1528@48:0>](<fail_1528@48:0>:bool)
      
      P[<make_array_1030@42:1>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
      ((0 <= <k_make_array_u_1204@45:0>) &&
       (<k_make_array_u_1204@45:3> = (<k_make_array_u_1204@45:0> < <k_make_array_u_1204@45:1>)))
      |- P[<k_make_array_u_1204@45:3>](<k_make_array_u_1204@45:0>:int,
                                       <k_make_array_u_1204@45:1>:int,
                                       <k_make_array_u_1204@45:3>:bool)
      
      P[<main_1039@34:2>](<make_array_1030@42:0>:int,<main_1039@34:1>:unit,0:int),
      P[<<dotprod_1033@37:1>@40:0>](<make_array_1030@42:0>:int,<make_array_1030@42:1>:int)|- P[<make_array_1030@42:1>](
      <make_array_1030@42:0>:int,<make_array_1030@42:1>:int)
      
      P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
      (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
      |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
      
      P[<main_1039@34:2>](<dotprod_1033@37:0>:int,<main_1039@34:1>:unit,<dotprod_1033@37:4>:int),
      ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
      |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                <dotprod_1033@37:4>:int)
      
      P[<f_1526@32:1>](<main_1039@34:0>:int,<main_1039@34:2>:int)|- P[<main_1039@34:2>](
      <main_1039@34:0>:int,<main_1039@34:1>:unit,<main_1039@34:2>:int)
      
      P[<f_1525@29:0>](<f_1526@32:0>:int)|- P[<f_1526@32:1>](<f_1526@32:0>:int,
                                                             <f_1526@32:1>:int)
      
      |- P[<f_1525@29:0>](<f_1525@29:0>:int)
    call trees:
      <main_1518@26>
        <f_1525@29>
          <f_1526@32>
            <main_1039@34>
              <dotprod_1033@37>
              </<dotprod_1033@37:1>@40>
              <make_array_1030@42>
                <k_make_array_u_1204@45>
                  <fail_1528@48>
    inlined horn clauses:
      P[<fail_1528@48:0>](<fail_1528@48:0>:bool)|- bot
      
      P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
      ((0 <= <k_make_array_u_1204@45:0>) &&
       ((<k_make_array_u_1204@45:0> >= <k_make_array_u_1204@45:1>) && <fail_1528@48:0>))
      |- P[<fail_1528@48:0>](<fail_1528@48:0>:bool)
      
      P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
      (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
      |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
      
       ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
      |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                <dotprod_1033@37:4>:int)
    begin ParamSubstInfer.infer(10748)[3]
      
    end ParamSubstInfer.infer(10748)[3] (0.079988 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(10750)[3]
      
    end RefTypeInfer.elim_coeffs(10750)[3] (0.000000 sec.)
    begin GenHcSolver.solve(10976)[3]
      Horn clauses:
        P[<fail_1528@48:0>](<fail_1528@48:0>:bool)|- bot
        
        P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
        ((0 <= <k_make_array_u_1204@45:0>) &&
         ((<k_make_array_u_1204@45:0> >= <k_make_array_u_1204@45:1>) && <fail_1528@48:0>))
        |- P[<fail_1528@48:0>](<fail_1528@48:0>:bool)
        
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
        (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
        |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
        
         ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                  <dotprod_1033@37:4>:int)
      lower bounds:
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) =
        ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
        ((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
        P[<fail_1528@48:0>](<fail_1528@48:0>:bool) = false
      upper bounds:
        P[<fail_1528@48:0>](var139:bool) = true
      begin GenHcSolver.classify_pids(11983)[4]
        output:
          [<fail_1528@48:0>]
      end GenHcSolver.classify_pids(11983)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(11986)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(11987)[5]
          begin InterpProver.interpolate_fresh(11988)[6]
            begin InterpProver.interpolate_log(11989)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(11990)[8]
                begin InterpProver.interpolate_simplify(11991)[9]
                  begin InterpProver.interpolate_quick(12004)[10]
                    
                  end InterpProver.interpolate_quick(12004)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(12008)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(12008)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(11991)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(11990)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(11989)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(11988)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(11987)[5] (0.000000 sec.)
        output:
          P[<fail_1528@48:0>](<fail_1528@48:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(11986)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
        ((<k_make_array_u_1204@45:0> >= <k_make_array_u_1204@45:1>) && (0 <= <k_make_array_u_1204@45:0>)) |- bot
        
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
        (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
        |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
        
         ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                  <dotprod_1033@37:4>:int)
      lower bounds:
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) =
        ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
        ((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
      upper bounds:
        P[<<dotprod_1033@37:1>@40:0>](var140:int,var141:int) = ((var141 < var140) || (0 > var141))
      begin GenHcSolver.classify_pids(13416)[4]
        output:
          [<<dotprod_1033@37:1>@40:0>]
      end GenHcSolver.classify_pids(13416)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
      nub:(not ((<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>) || (0 > <<dotprod_1033@37:1>@40:0>)))
      begin ApronInterface.convex_hull_interpolate(13419)[4]
        lb:((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
        nub:(not ((<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>) || (0 > <<dotprod_1033@37:1>@40:0>)))
        lb':((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
        nub':(not ((<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>) || (0 > <<dotprod_1033@37:1>@40:0>)))
        begin InterpProver.interpolate(13420)[5]
          begin InterpProver.interpolate_fresh(13421)[6]
            begin InterpProver.interpolate_log(13422)[7]
              input1: ((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
              input2: (not ((<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>) || (0 > <<dotprod_1033@37:1>@40:0>)))
              begin InterpProver.interpolate_check(13423)[8]
                begin InterpProver.interpolate_simplify(13424)[9]
                  begin InterpProver.interpolate_quick(13479)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(13488)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(13489)[12]
                        begin CsisatInterface.interpolate_csisat_log(13490)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0 & (1 + v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0) <= v_sep_dotprod_1033_sep_37_sep_0)
                          input2: (0 <= v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0 & v_sep_dotprod_1033_sep_37_sep_0 <= v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(13491)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(13491)[14] (0.000000 sec.)
                          output: (-2*v_sep_dotprod_1033_sep_37_sep_0 + 2*v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(13490)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_dotprod_1033_sep_37_sep_0 + 2*v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_dotprod_1033_sep_37_sep_0 + 2*v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(13489)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(13488)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(13479)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(13424)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(13423)[8] (0.001000 sec.)
              output: ((1 + <<dotprod_1033@37:1>@40:0>) <= <dotprod_1033@37:0>)
            end InterpProver.interpolate_log(13422)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(13421)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(13420)[5] (0.002000 sec.)
        output:
          P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
          ((1 + <<dotprod_1033@37:1>@40:0>) <= <dotprod_1033@37:0>)
      end ApronInterface.convex_hull_interpolate(13419)[4] (0.002000 sec.)
      Horn clauses:
         ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                  <dotprod_1033@37:4>:int)
      lower bounds:
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) =
        ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
      upper bounds:
        P[<dotprod_1033@37:4>](var142:int,var143:int,var144:int) = true
      begin GenHcSolver.classify_pids(14075)[4]
        output:
          [<dotprod_1033@37:4>]
      end GenHcSolver.classify_pids(14075)[4] (0.000000 sec.)
      lb:((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(14078)[4]
        lb:((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        nub:false
        lb':((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        nub':false
        begin InterpProver.interpolate(14079)[5]
          begin InterpProver.interpolate_fresh(14080)[6]
            begin InterpProver.interpolate_log(14081)[7]
              input1: ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
              input2: false
              begin InterpProver.interpolate_check(14082)[8]
                begin InterpProver.interpolate_simplify(14083)[9]
                  begin InterpProver.interpolate_quick(14110)[10]
                    
                  end InterpProver.interpolate_quick(14110)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(14083)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(14082)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(14081)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(14080)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(14079)[5] (0.000000 sec.)
        output:
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) = true
      end ApronInterface.convex_hull_interpolate(14078)[4] (0.000000 sec.)
      begin HcSolver.check_validity(14208)[4]
        input:
          P[<fail_1528@48:0>](<fail_1528@48:0>:bool)|- bot
          
          P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
          ((0 <= <k_make_array_u_1204@45:0>) &&
           ((<k_make_array_u_1204@45:0> >= <k_make_array_u_1204@45:1>) && <fail_1528@48:0>))
          |- P[<fail_1528@48:0>](<fail_1528@48:0>:bool)
          
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
          (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
          |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
          
           ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
          |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                    <dotprod_1033@37:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(14208)[4] (0.002000 sec.)
      solution:
        P[<fail_1528@48:0>](<fail_1528@48:0>:bool) = false
        P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
        ((1 + <<dotprod_1033@37:1>@40:0>) <= <dotprod_1033@37:0>)
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) = true
    end GenHcSolver.solve(10976)[3] (0.016998 sec.)
    begin GenHcSolver.solve(14443)[3]
      Horn clauses:
        P[<fail_1528@48:0>](<fail_1528@48:0>:bool)|- bot
        
        P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
        ((0 <= <k_make_array_u_1204@45:0>) &&
         ((<k_make_array_u_1204@45:0> >= <k_make_array_u_1204@45:1>) && <fail_1528@48:0>))
        |- P[<fail_1528@48:0>](<fail_1528@48:0>:bool)
        
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
        (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
        |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
        
         ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                  <dotprod_1033@37:4>:int)
      lower bounds:
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) =
        ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
        ((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
        P[<fail_1528@48:0>](<fail_1528@48:0>:bool) = false
      upper bounds:
        P[<fail_1528@48:0>](var146:bool) = true
      begin GenHcSolver.classify_pids(15450)[4]
        output:
          [<fail_1528@48:0>]
      end GenHcSolver.classify_pids(15450)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(15453)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(15456)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(15456)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(15461)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(15461)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(15464)[5]
          begin InterpProver.interpolate_fresh(15465)[6]
            begin InterpProver.interpolate_log(15466)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(15467)[8]
                begin InterpProver.interpolate_simplify(15468)[9]
                  begin InterpProver.interpolate_quick(15483)[10]
                    
                  end InterpProver.interpolate_quick(15483)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(15487)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(15487)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(15468)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(15467)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(15466)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(15465)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(15464)[5] (0.001000 sec.)
        output:
          P[<fail_1528@48:0>](<fail_1528@48:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(15453)[4] (0.002000 sec.)
      Horn clauses:
        P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
        ((<k_make_array_u_1204@45:0> >= <k_make_array_u_1204@45:1>) && (0 <= <k_make_array_u_1204@45:0>)) |- bot
        
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
        (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
        |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
        
         ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                  <dotprod_1033@37:4>:int)
      lower bounds:
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) =
        ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
        ((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
      upper bounds:
        P[<<dotprod_1033@37:1>@40:0>](var147:int,var148:int) = ((var148 < var147) || (0 > var148))
      begin GenHcSolver.classify_pids(16902)[4]
        output:
          [<<dotprod_1033@37:1>@40:0>]
      end GenHcSolver.classify_pids(16902)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
      nub:(not ((<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>) || (0 > <<dotprod_1033@37:1>@40:0>)))
      begin ApronInterface.convex_hull_interpolate(16905)[4]
        lb:((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
        nub:(not ((<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>) || (0 > <<dotprod_1033@37:1>@40:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(16917)[5]
          ts: ((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(16917)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(16937)[5]
          ts: ((<<dotprod_1033@37:1>@40:0> >= <dotprod_1033@37:0>) && (0 <= <<dotprod_1033@37:1>@40:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(16937)[5] (0.001000 sec.)
        lb':((<<dotprod_1033@37:1>@40:0> = 0) && ((-1 + <dotprod_1033@37:0>) >= 0))
        nub':(((<<dotprod_1033@37:1>@40:0> + (-1 * <dotprod_1033@37:0>)) >= 0) && (<<dotprod_1033@37:1>@40:0> >= 0))
        begin InterpProver.interpolate(16943)[5]
          begin InterpProver.interpolate_fresh(16944)[6]
            begin InterpProver.interpolate_log(16945)[7]
              input1: ((<<dotprod_1033@37:1>@40:0> = 0) && ((-1 + <dotprod_1033@37:0>) >= 0))
              input2: (((<<dotprod_1033@37:1>@40:0> + (-1 * <dotprod_1033@37:0>)) >= 0) &&
                       (<<dotprod_1033@37:1>@40:0> >= 0))
              begin InterpProver.interpolate_check(16946)[8]
                begin InterpProver.interpolate_simplify(16947)[9]
                  begin InterpProver.interpolate_quick(17004)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(17013)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(17014)[12]
                        begin CsisatInterface.interpolate_csisat_log(17015)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0 & 1 <= v_sep_dotprod_1033_sep_37_sep_0)
                          input2: (0 <= v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0 & v_sep_dotprod_1033_sep_37_sep_0 <= v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(17016)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(17016)[14] (0.000000 sec.)
                          output: (-2*v_sep_dotprod_1033_sep_37_sep_0 + 2*v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(17015)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_dotprod_1033_sep_37_sep_0 + 2*v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_dotprod_1033_sep_37_sep_0 + 2*v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(17014)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(17013)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(17004)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(16947)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(16946)[8] (0.001000 sec.)
              output: ((1 + <<dotprod_1033@37:1>@40:0>) <= <dotprod_1033@37:0>)
            end InterpProver.interpolate_log(16945)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(16944)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(16943)[5] (0.001000 sec.)
        output:
          P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
          ((1 + <<dotprod_1033@37:1>@40:0>) <= <dotprod_1033@37:0>)
      end ApronInterface.convex_hull_interpolate(16905)[4] (0.002000 sec.)
      Horn clauses:
         ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                  <dotprod_1033@37:4>:int)
      lower bounds:
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) =
        ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
      upper bounds:
        P[<dotprod_1033@37:4>](var149:int,var150:int,var151:int) = true
      begin GenHcSolver.classify_pids(17600)[4]
        output:
          [<dotprod_1033@37:4>]
      end GenHcSolver.classify_pids(17600)[4] (0.000000 sec.)
      lb:((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(17603)[4]
        lb:((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(17615)[5]
          ts: ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(17615)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(17623)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(17623)[5] (0.000000 sec.)
        lb':((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:3> = 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(17626)[5]
          begin InterpProver.interpolate_fresh(17627)[6]
            begin InterpProver.interpolate_log(17628)[7]
              input1: ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:3> = 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(17629)[8]
                begin InterpProver.interpolate_simplify(17630)[9]
                  begin InterpProver.interpolate_quick(17658)[10]
                    
                  end InterpProver.interpolate_quick(17658)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(17630)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(17629)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(17628)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(17627)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(17626)[5] (0.001000 sec.)
        output:
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) = true
      end ApronInterface.convex_hull_interpolate(17603)[4] (0.001000 sec.)
      begin HcSolver.check_validity(17758)[4]
        input:
          P[<fail_1528@48:0>](<fail_1528@48:0>:bool)|- bot
          
          P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
          ((0 <= <k_make_array_u_1204@45:0>) &&
           ((<k_make_array_u_1204@45:0> >= <k_make_array_u_1204@45:1>) && <fail_1528@48:0>))
          |- P[<fail_1528@48:0>](<fail_1528@48:0>:bool)
          
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
          (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
          |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
          
           ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
          |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                    <dotprod_1033@37:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(17758)[4] (0.001999 sec.)
      solution:
        P[<fail_1528@48:0>](<fail_1528@48:0>:bool) = false
        P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
        ((1 + <<dotprod_1033@37:1>@40:0>) <= <dotprod_1033@37:0>)
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) = true
    end GenHcSolver.solve(14443)[3] (0.021996 sec.)
    begin YhornInterface.solve(17993)[3]
      begin HcSolver.solve_ub(17994)[4]
        encoded:
          P[<fail_1528@48:0>](<fail_1528@48:0>:int)|- bot
          
          P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
          ((0 <= <k_make_array_u_1204@45:0>) &&
           ((<k_make_array_u_1204@45:0> >= <k_make_array_u_1204@45:1>) && (<fail_1528@48:0> = 1)))
          |- P[<fail_1528@48:0>](<fail_1528@48:0>:int)
          
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
          (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
          |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
          
           ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
          |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                    <dotprod_1033@37:4>:int)
        input to Yhorn:
          P[<fail_1528@48:0>](<fail_1528@48:0>:int)|- bot
          
          P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
          ((<k_make_array_u_1204@45:0> >= <k_make_array_u_1204@45:1>) &&
           ((0 <= <k_make_array_u_1204@45:0>) && (<fail_1528@48:0> = 1))) |- P[<fail_1528@48:0>](
          <fail_1528@48:0>:int)
          
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
          (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
          |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
          
           ((<dotprod_1033@37:4> = <dotprod_1033@37:3>) && (<dotprod_1033@37:4> = 0))
          |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                    <dotprod_1033@37:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1528_sep_48_sep_0($71)) -> 1=0.
(($71-1=0) & (-$72<=0) & ($72-$73>=0)) & (v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0($73,$72)) -> v_sep_fail_1528_sep_48_sep_0($71).
($74-$75<0) & (v_sep_dotprod_1033_sep_37_sep_4($75,$74,$76)) -> v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0($75,$74).
($76=0) & ($76-$77=0) -> v_sep_dotprod_1033_sep_37_sep_4($75,$77,$76).


v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0: X
v_sep_dotprod_1033_sep_37_sep_4: X
v_sep_fail_1528_sep_48_sep_0: X
....
v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0: X
v_sep_dotprod_1033_sep_37_sep_4: X
v_sep_fail_1528_sep_48_sep_0: X
...
v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0: X
v_sep_dotprod_1033_sep_37_sep_4: X
v_sep_fail_1528_sep_48_sep_0: X
....
v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0: X
v_sep_dotprod_1033_sep_37_sep_4: X
v_sep_fail_1528_sep_48_sep_0: X
....(0=0) & (v_sep_fail_1528_sep_48_sep_0($71)) -> 1=0.
(($71-1=0) & (-$72<=0) & ($72-$73>=0)) & (v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0($73,$72)) -> v_sep_fail_1528_sep_48_sep_0($71).
($74-$75<0) & (v_sep_dotprod_1033_sep_37_sep_4($75,$74,$76)) -> v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0($75,$74).
($76=0) & ($76-$77=0) -> v_sep_dotprod_1033_sep_37_sep_4($75,$77,$76).

        solution:
          P[<<dotprod_1033@37:1>@40:0>]($81:int,$83:int) = ((1 + $83) <= $81)
          P[<dotprod_1033@37:4>]($86:int,$88:int,$90:int) = true
          P[<fail_1528@48:0>]($78:bool) = false
        
      end HcSolver.solve_ub(17994)[4] (0.010999 sec.)
      begin HcSolver.check_validity(18152)[4]
        input:
          P[<fail_1528@48:0>](<fail_1528@48:0>:bool)|- bot
          
          P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1204@45:1>:int,<k_make_array_u_1204@45:0>:int),
          ((0 <= <k_make_array_u_1204@45:0>) &&
           ((<k_make_array_u_1204@45:0> >= <k_make_array_u_1204@45:1>) && <fail_1528@48:0>))
          |- P[<fail_1528@48:0>](<fail_1528@48:0>:bool)
          
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
          (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
          |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
          
           ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
          |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                    <dotprod_1033@37:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(18152)[4] (0.008998 sec.)
      solution:
        P[<<dotprod_1033@37:1>@40:0>]($81:int,$83:int) = ((1 + $83) <= $81)
        P[<dotprod_1033@37:4>]($86:int,$88:int,$90:int) = true
        P[<fail_1528@48:0>]($78:bool) = false
    end YhornInterface.solve(17993)[3] (0.019997 sec.)
    
  end RefTypeInfer.infer_etrs(9523)[2] (0.142978 sec.)
  refinement types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1528: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1527: var171:int -> var170:int -> var169:unit -> X
    f_dotprod_1519: var186:int ->
                    var185:int ->
                    var184:int ->
                    (var183:int -> X) ->
                    (var181:int -> (var180:int -> X) -> X) -> (var177:int -> (var176:int -> X) -> X) -> var173:int -> X
    f_dotprod_1520: var202:int ->
                    var201:int ->
                    var200:int ->
                    var199:int ->
                    (var198:int -> X) ->
                    (var196:int -> (var195:int -> X) -> X) -> (var192:int -> (var191:int -> X) -> X) -> var188:int -> X
    f_dotprod_1521: var219:int ->
                    var218:int ->
                    var217:int ->
                    var216:int ->
                    var215:int ->
                    (var214:int -> X) ->
                    (var212:int -> (var211:int -> X) -> X) -> (var208:int -> (var207:int -> X) -> X) -> var204:int -> X
    f_dotprod_1522: var237:int ->
                    var236:int ->
                    var235:int ->
                    var234:int ->
                    var233:int ->
                    var232:int ->
                    (var231:int -> X) ->
                    (var229:int -> (var228:int -> X) -> X) -> (var225:int -> (var224:int -> X) -> X) -> var221:int -> X
    f_dotprod_1523: var256:int ->
                    var255:int ->
                    var254:int ->
                    var253:int ->
                    var252:int ->
                    var251:int ->
                    var250:int ->
                    (var249:int -> X) ->
                    (var247:int -> (var246:int -> X) -> X) -> (var243:int -> (var242:int -> X) -> X) -> var239:int -> X
    f_main_1524: var263:unit -> var262:int -> var261:int -> (var260:unit -> X) -> var258:int -> X
    k_make_array_u_1215: var269:int -> var268:int -> (var267:int -> X) -> var265:unit -> X
  abstraction types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1528: v1:bool -> (v2:unit -> X) -> X
    f_1527: var171:int -> var170:int -> var169:unit -> X
    f_dotprod_1519: var186:int ->
                    var185:int ->
                    var184:int ->
                    (var183:int -> X) ->
                    (var181:int -> (var180:int -> X) -> X) -> (var177:int -> (var176:int -> X) -> X) -> var173:int -> X
    f_dotprod_1520: var202:int ->
                    var201:int ->
                    var200:int ->
                    var199:int ->
                    (var198:int -> X) ->
                    (var196:int -> (var195:int -> X) -> X) -> (var192:int -> (var191:int -> X) -> X) -> var188:int -> X
    f_dotprod_1521: var219:int ->
                    var218:int ->
                    var217:int ->
                    var216:int ->
                    var215:int ->
                    (var214:int -> X) ->
                    (var212:int -> (var211:int -> X) -> X) -> (var208:int -> (var207:int -> X) -> X) -> var204:int -> X
    f_dotprod_1522: var237:int ->
                    var236:int ->
                    var235:int ->
                    var234:int ->
                    var233:int ->
                    var232:int ->
                    (var231:int -> X) ->
                    (var229:int -> (var228:int -> X) -> X) -> (var225:int -> (var224:int -> X) -> X) -> var221:int -> X
    f_dotprod_1523: var256:int ->
                    var255:int ->
                    var254:int ->
                    var253:int ->
                    var252:int ->
                    var251:int ->
                    var250:int ->
                    (var249:int -> X) ->
                    (var247:int -> (var246:int -> X) -> X) -> (var243:int -> (var242:int -> X) -> X) -> var239:int -> X
    f_main_1524: var263:unit -> var262:int -> var261:int -> (var260:unit -> X) -> var258:int -> X
    k_make_array_u_1215: var269:int -> var268:int -> (var267:int -> X) -> var265:unit -> X
  
end AbsTypeInfer.refine(9522)[1] (0.148978 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1518
  main_1518 -> (rand_int f_1525)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      i_1037 >= n_1034) -> (k_dotprod_1266 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036))
  f_1525 x_1472 -> (rand_int (f_1526 x_1472))
  f_1526 x_1472 x_1488 -> (main_1039 x_1472 () x_1488 (f_1527 x_1472 x_1488))
  f_1527 x_1472 x_1488 x_1469 -> end
  f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 ->
      (v2_1036 i_1037 (f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1296) + x_1292)
        (f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 ->
      (v1_1035 i_1037 (f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 ->
      (v2_1036 i_1037
        (f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1350) + x_1346) k_dotprod_1266)
  f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 -> (k_main_1401 ())
  fail_1528 b k -> {fail} => (k ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when b_1216 ->
      (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when (not b_1216) ->
      (fail_1528 true (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198))
  k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 -> (k_make_array_1198 0)
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (z_1042 = 0) ->
      (dotprod_1033 n_1040 (make_array_1030 n_1040) (make_array_1030 n_1040) z_1042 z_1042
        (f_main_1524 m_1041 n_1040 z_1042 k_main_1401))
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (not (z_1042 = 0)) -> (k_main_1401 ())
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (0 <= i_1032) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (not (0 <= i_1032)) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 false)
Types:
  main_1518 : X
  dotprod_1033 : (x_1:int ->
                  (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                  (int -> (int -> X) -> X) -> x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1528 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1518 ... --> 
  f_1525 ... --> 
  f_1526 ... --> 
  main_1039 [1/2] ... --> 
  dotprod_1033 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1204 [1/2] ... --> 
  k_make_array_u_1215 ... --> 
  f_dotprod_1519 ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1204 [2/2] ... --> 
  fail_1528 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(19323)[1]
  program:
    main_1518  | true = ((Random.int 0) f_1525)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    i_1037 >= n_1034) = (k_dotprod_1266 sum_1038)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    not (i_1037 >= n_1034)) = (v1_1035 i_1037
                                       (f_dotprod_1519 i_1037
                                                       n_1034
                                                       sum_1038
                                                       k_dotprod_1266
                                                       v1_1035
                                                       v2_1036))
    f_1525 x_1472 | true = ((Random.int 0) (f_1526 x_1472))
    f_1526 x_1472 x_1488 | true = (main_1039 x_1472
                                             ()
                                             x_1488
                                             (f_1527 x_1472
                                                     x_1488))
    f_1527 x_1472 x_1488 x_1469 | true = end
    f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 | true = (
    v2_1036 i_1037
            (f_dotprod_1520 i_1037
                            n_1034
                            sum_1038
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 | true = (
    dotprod_1033
      n_1034
      v1_1035
      v2_1036
      (i_1037 + 1)
      ((sum_1038 + x_1296) + x_1292)
      (f_dotprod_1521 i_1037
                      n_1034
                      sum_1038
                      x_1292
                      x_1296
                      k_dotprod_1266
                      v1_1035
                      v2_1036))
    f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 | true = (
    v1_1035 i_1037
            (f_dotprod_1522 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 | true = (
    v2_1036 i_1037
            (f_dotprod_1523 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            x_1350
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 | true = (
    dotprod_1033 n_1034
                 v1_1035
                 v2_1036
                 (i_1037 + 1)
                 ((sum_1038 + x_1350) + x_1346)
                 k_dotprod_1266)
    f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 | true = (k_main_1401 ())
    fail_1528 b k | true = (fail ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | b_1216 = (
    k_make_array_u_1215 i_1032
                        n_1031
                        k_make_array_1198
                        ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | (not b_1216) = (
    fail_1528 true
              (k_make_array_u_1215 i_1032
                                   n_1031
                                   k_make_array_1198))
    k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 | true = (
    k_make_array_1198 0)
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (z_1042 = 0) = (dotprod_1033
                                                                   n_1040
                                                                   (make_array_1030 n_1040)
                                                                   (make_array_1030 n_1040)
                                                                   z_1042
                                                                   z_1042
                                                                   (f_main_1524 m_1041
                                                                    n_1040
                                                                    z_1042
                                                                    k_main_1401))
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (not (z_1042 = 0)) = (
    k_main_1401 ())
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (0 <= i_1032) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (not (0 <= i_1032)) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        false)
    main_1518:X
    dotprod_1033:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1525:int -> X
    f_1526:int -> int -> X
    f_1527:int -> int -> unit -> X
    f_dotprod_1519:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1520:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1521:int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1522:int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1523:int ->
                   int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1524:unit -> int -> int -> (unit -> X) -> int -> X
    fail_1528:bool -> (unit -> X) -> X
    k_make_array_u_1204:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1215:int -> int -> (int -> X) -> unit -> X
    main_1039:int -> unit -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1525,f_1526,f_1527,f_dotprod_1519,f_dotprod_1520,f_dotprod_1521,f_dotprod_1522,f_dotprod_1523,f_main_1524,k_make_array_u_1204,k_make_array_u_1215,main_1039,make_array_1030
  counterexample: 0:0:0:0:1:0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1525@54:0> = var270)
     [true.nop((<f_1526@57:0> = <f_1525@54:0>) && (<f_1526@57:1> = var271))
      [true.((<main_1039@59:0> = <f_1526@57:0>) && ((<main_1039@59:1> = ()) && (<main_1039@59:2> = <f_1526@57:1>)))
       [(<main_1039@59:2> = 0).
        ((<dotprod_1033@62:0> = <main_1039@59:0>) &&
         ((<dotprod_1033@62:3> = <main_1039@59:2>) && (<dotprod_1033@62:4> = <main_1039@59:2>)))
        [(not (<dotprod_1033@62:3> >= <dotprod_1033@62:0>)).(<<dotprod_1033@62:1>@65:0> = <dotprod_1033@62:3>)
         [true.((<make_array_1030@67:0> = <main_1039@59:0>) && (<make_array_1030@67:1> = <<dotprod_1033@62:1>@65:0>))
          [(0 <= <make_array_1030@67:1>).
           ((<k_make_array_u_1204@70:0> = <make_array_1030@67:1>) &&
            ((<k_make_array_u_1204@70:1> = <make_array_1030@67:0>) &&
             (<k_make_array_u_1204@70:3> = (<make_array_1030@67:1> < <make_array_1030@67:0>))))
           [<k_make_array_u_1204@70:3>.
            ((<k_make_array_u_1215@73:0> = <k_make_array_u_1204@70:0>) &&
             ((<k_make_array_u_1215@73:1> = <k_make_array_u_1204@70:1>) && (<k_make_array_u_1215@73:3> = ())))
            [true.(<<k_make_array_u_1215@73:2>@75:0> = 0)
             [true.(<<k_make_array_u_1204@70:2>@77:0> = <<k_make_array_u_1215@73:2>@75:0>)
              [true.(<<make_array_1030@67:2>@79:0> = <<k_make_array_u_1204@70:2>@77:0>)
               [true.(<<<dotprod_1033@62:1>@65:1>@81:0> = <<make_array_1030@67:2>@79:0>)
                [true.
                 ((<f_dotprod_1519@83:0> = <dotprod_1033@62:3>) &&
                  ((<f_dotprod_1519@83:1> = <dotprod_1033@62:0>) &&
                   ((<f_dotprod_1519@83:2> = <dotprod_1033@62:4>) &&
                    (<f_dotprod_1519@83:6> = <<<dotprod_1033@62:1>@65:1>@81:0>))))
                 [true.(<<f_dotprod_1519@83:5>@85:0> = <f_dotprod_1519@83:0>)
                  [true.(<<dotprod_1033@62:2>@87:0> = <<f_dotprod_1519@83:5>@85:0>)
                   [true.
                    ((<make_array_1030@89:0> = <main_1039@59:0>) &&
                     (<make_array_1030@89:1> = <<dotprod_1033@62:2>@87:0>))
                    [(not (0 <= <make_array_1030@89:1>)).
                     ((<k_make_array_u_1204@92:0> = <make_array_1030@89:1>) &&
                      ((<k_make_array_u_1204@92:1> = <make_array_1030@89:0>) && (<k_make_array_u_1204@92:3> = false)))
                     [(not <k_make_array_u_1204@92:3>).(<fail_1528@95:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(19324)[2]
    horn clauses:
      P[<fail_1528@95:0>](<fail_1528@95:0>:bool)|- bot
      
      P[<k_make_array_u_1204@92:3>](<k_make_array_u_1204@92:0>:int,<k_make_array_u_1204@92:1>:int,false:bool),
      <fail_1528@95:0> |- P[<fail_1528@95:0>](<fail_1528@95:0>:bool)
      
      P[<make_array_1030@89:1>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
      ((0 > <k_make_array_u_1204@92:0>) && (not <k_make_array_u_1204@92:3>))
      |- P[<k_make_array_u_1204@92:3>](<k_make_array_u_1204@92:0>:int,
                                       <k_make_array_u_1204@92:1>:int,
                                       <k_make_array_u_1204@92:3>:bool)
      
      P[<main_1039@59:2>](<make_array_1030@89:0>:int,<main_1039@59:1>:unit,0:int),
      P[<<dotprod_1033@62:2>@87:0>](<make_array_1030@89:0>:int,<make_array_1030@89:1>:int)|- P[<make_array_1030@89:1>](
      <make_array_1030@89:0>:int,<make_array_1030@89:1>:int)
      
      P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<f_dotprod_1519@83:2>:int),
      P[<<f_dotprod_1519@83:5>@85:0>](<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:0>:int,<f_dotprod_1519@83:2>:int,<<dotprod_1033@62:2>@87:0>:int),
      (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
      |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
      
      P[<f_dotprod_1519@83:6>](<f_dotprod_1519@83:0>:int,<f_dotprod_1519@83:1>:int,<f_dotprod_1519@83:2>:int,<f_dotprod_1519@83:6>:int),
      (<<f_dotprod_1519@83:5>@85:0> = <f_dotprod_1519@83:0>)
      |- P[<<f_dotprod_1519@83:5>@85:0>](<f_dotprod_1519@83:0>:int,<f_dotprod_1519@83:1>:int,
                                         <f_dotprod_1519@83:2>:int,<<f_dotprod_1519@83:5>@85:0>:int)
      
      P[<dotprod_1033@62:4>](<f_dotprod_1519@83:1>:int,<f_dotprod_1519@83:0>:int,<f_dotprod_1519@83:2>:int),
      P[<<<dotprod_1033@62:1>@65:1>@81:0>](<f_dotprod_1519@83:1>:int,<f_dotprod_1519@83:0>:int,<f_dotprod_1519@83:6>:int),
      (<f_dotprod_1519@83:0> < <f_dotprod_1519@83:1>)
      |- P[<f_dotprod_1519@83:6>](<f_dotprod_1519@83:0>:int,<f_dotprod_1519@83:1>:int,
                                  <f_dotprod_1519@83:2>:int,<f_dotprod_1519@83:6>:int)
      
      P[<main_1039@59:2>](<dotprod_1033@62:0>:int,<main_1039@59:1>:unit,0:int),
      P[<<make_array_1030@67:2>@79:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int)|- P[<<<dotprod_1033@62:1>@65:1>@81:0>](
      <dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int)
      
      P[<make_array_1030@67:1>](<make_array_1030@67:0>:int,<make_array_1030@67:1>:int),
      P[<<k_make_array_u_1204@70:2>@77:0>](<make_array_1030@67:1>:int,<make_array_1030@67:0>:int,<<make_array_1030@67:2>@79:0>:int),
      (0 <= <make_array_1030@67:1>)
      |- P[<<make_array_1030@67:2>@79:0>](<make_array_1030@67:0>:int,
                                          <make_array_1030@67:1>:int,
                                          <<make_array_1030@67:2>@79:0>:int)
      
      P[<k_make_array_u_1204@70:3>](<k_make_array_u_1204@70:0>:int,<k_make_array_u_1204@70:1>:int,true:bool),
      P[<<k_make_array_u_1215@73:2>@75:0>](<k_make_array_u_1204@70:0>:int,<k_make_array_u_1204@70:1>:int,<<k_make_array_u_1204@70:2>@77:0>:int)|- P[<<k_make_array_u_1204@70:2>@77:0>](
      <k_make_array_u_1204@70:0>:int,<k_make_array_u_1204@70:1>:int,<<k_make_array_u_1204@70:2>@77:0>:int)
      
      P[<k_make_array_u_1215@73:3>](<k_make_array_u_1215@73:0>:int,<k_make_array_u_1215@73:1>:int,<k_make_array_u_1215@73:3>:unit),
      (<<k_make_array_u_1215@73:2>@75:0> = 0)
      |- P[<<k_make_array_u_1215@73:2>@75:0>](<k_make_array_u_1215@73:0>:int,
                                              <k_make_array_u_1215@73:1>:int,
                                              <<k_make_array_u_1215@73:2>@75:0>:int)
      
      P[<k_make_array_u_1204@70:3>](<k_make_array_u_1215@73:0>:int,<k_make_array_u_1215@73:1>:int,true:bool)|- P[<k_make_array_u_1215@73:3>](
      <k_make_array_u_1215@73:0>:int,<k_make_array_u_1215@73:1>:int,<k_make_array_u_1215@73:3>:unit)
      
      P[<make_array_1030@67:1>](<k_make_array_u_1204@70:1>:int,<k_make_array_u_1204@70:0>:int),
      ((0 <= <k_make_array_u_1204@70:0>) &&
       (<k_make_array_u_1204@70:3> = (<k_make_array_u_1204@70:0> < <k_make_array_u_1204@70:1>)))
      |- P[<k_make_array_u_1204@70:3>](<k_make_array_u_1204@70:0>:int,
                                       <k_make_array_u_1204@70:1>:int,
                                       <k_make_array_u_1204@70:3>:bool)
      
      P[<main_1039@59:2>](<make_array_1030@67:0>:int,<main_1039@59:1>:unit,0:int),
      P[<<dotprod_1033@62:1>@65:0>](<make_array_1030@67:0>:int,<make_array_1030@67:1>:int)|- P[<make_array_1030@67:1>](
      <make_array_1030@67:0>:int,<make_array_1030@67:1>:int)
      
      P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
      (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
      |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
      
      P[<main_1039@59:2>](<dotprod_1033@62:0>:int,<main_1039@59:1>:unit,<dotprod_1033@62:4>:int),
      ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
      |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                <dotprod_1033@62:4>:int)
      
      P[<f_1526@57:1>](<main_1039@59:0>:int,<main_1039@59:2>:int)|- P[<main_1039@59:2>](
      <main_1039@59:0>:int,<main_1039@59:1>:unit,<main_1039@59:2>:int)
      
      P[<f_1525@54:0>](<f_1526@57:0>:int)|- P[<f_1526@57:1>](<f_1526@57:0>:int,
                                                             <f_1526@57:1>:int)
      
      |- P[<f_1525@54:0>](<f_1525@54:0>:int)
    call trees:
      <main_1518@51>
        <f_1525@54>
          <f_1526@57>
            <main_1039@59>
              <dotprod_1033@62>
              </<dotprod_1033@62:1>@65>
              <make_array_1030@67>
                <k_make_array_u_1204@70>
                  <k_make_array_u_1215@73>
                  </<k_make_array_u_1215@73:2>@75>
                </<k_make_array_u_1204@70:2>@77>
              </<make_array_1030@67:2>@79>
              <<<dotprod_1033@62:1>@65:1>@81>
                <f_dotprod_1519@83>
                </<f_dotprod_1519@83:5>@85>
              </<dotprod_1033@62:2>@87>
              <make_array_1030@89>
                <k_make_array_u_1204@92>
                  <fail_1528@95>
    inlined horn clauses:
      P[<fail_1528@95:0>](<fail_1528@95:0>:bool)|- bot
      
      P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
      ((0 > <k_make_array_u_1204@92:0>) && <fail_1528@95:0>) |- P[<fail_1528@95:0>](
      <fail_1528@95:0>:bool)
      
      P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
      P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var272:int),
      (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
      |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
      
      P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
      ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
       ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
      |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                              <<dotprod_1033@62:1>@65:0>:int,
                                              <<<dotprod_1033@62:1>@65:1>@81:0>:int)
      
      P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
      (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
      |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
      
       ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
      |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                <dotprod_1033@62:4>:int)
    begin ParamSubstInfer.infer(21935)[3]
      
    end ParamSubstInfer.infer(21935)[3] (0.163975 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(21937)[3]
      
    end RefTypeInfer.elim_coeffs(21937)[3] (0.001000 sec.)
    begin GenHcSolver.solve(22236)[3]
      Horn clauses:
        P[<fail_1528@95:0>](<fail_1528@95:0>:bool)|- bot
        
        P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
        ((0 > <k_make_array_u_1204@92:0>) && <fail_1528@95:0>) |- P[<fail_1528@95:0>](
        <fail_1528@95:0>:bool)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var272:int),
        (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
        
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                <<dotprod_1033@62:1>@65:0>:int,
                                                <<<dotprod_1033@62:1>@65:1>@81:0>:int)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
        ((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
        P[<fail_1528@95:0>](<fail_1528@95:0>:bool) = false
      upper bounds:
        P[<fail_1528@95:0>](var274:bool) = true
      begin GenHcSolver.classify_pids(24132)[4]
        output:
          [<fail_1528@95:0>]
      end GenHcSolver.classify_pids(24132)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(24135)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(24136)[5]
          begin InterpProver.interpolate_fresh(24137)[6]
            begin InterpProver.interpolate_log(24138)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(24139)[8]
                begin InterpProver.interpolate_simplify(24140)[9]
                  begin InterpProver.interpolate_quick(24153)[10]
                    
                  end InterpProver.interpolate_quick(24153)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(24157)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(24157)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(24140)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(24139)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(24138)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(24137)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(24136)[5] (0.000000 sec.)
        output:
          P[<fail_1528@95:0>](<fail_1528@95:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(24135)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
        (0 > <k_make_array_u_1204@92:0>) |- bot
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var272:int),
        (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
        
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                <<dotprod_1033@62:1>@65:0>:int,
                                                <<<dotprod_1033@62:1>@65:1>@81:0>:int)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
        ((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
      upper bounds:
        P[<<dotprod_1033@62:2>@87:0>](var275:int,var276:int) = (0 <= var276)
      begin GenHcSolver.classify_pids(26332)[4]
        output:
          [<<dotprod_1033@62:2>@87:0>]
      end GenHcSolver.classify_pids(26332)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
      nub:(not (0 <= <<dotprod_1033@62:2>@87:0>))
      begin ApronInterface.convex_hull_interpolate(26335)[4]
        lb:((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
        nub:(not (0 <= <<dotprod_1033@62:2>@87:0>))
        lb':((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
        nub':(not (0 <= <<dotprod_1033@62:2>@87:0>))
        begin InterpProver.interpolate(26336)[5]
          begin InterpProver.interpolate_fresh(26337)[6]
            begin InterpProver.interpolate_log(26338)[7]
              input1: ((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
              input2: (not (0 <= <<dotprod_1033@62:2>@87:0>))
              begin InterpProver.interpolate_check(26339)[8]
                begin InterpProver.interpolate_simplify(26340)[9]
                  begin InterpProver.interpolate_quick(26373)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(26382)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(26383)[12]
                        begin CsisatInterface.interpolate_csisat_log(26384)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 & (1 + v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0) <= v_sep_dotprod_1033_sep_62_sep_0)
                          input2: (1 + v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(26385)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(26385)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(26384)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(26383)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(26382)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(26373)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(26340)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(26339)[8] (0.002000 sec.)
              output: (0 <= <<dotprod_1033@62:2>@87:0>)
            end InterpProver.interpolate_log(26338)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(26337)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(26336)[5] (0.002000 sec.)
        output:
          P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
          (0 <= <<dotprod_1033@62:2>@87:0>)
      end ApronInterface.convex_hull_interpolate(26335)[4] (0.002000 sec.)
      Horn clauses:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var272:int),
        ((<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>) && (0 > <<dotprod_1033@62:2>@87:0>)) |- bot
        
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                <<dotprod_1033@62:1>@65:0>:int,
                                                <<<dotprod_1033@62:1>@65:1>@81:0>:int)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
      upper bounds:
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](var277:int,var278:int,var279:int) = true
      begin GenHcSolver.classify_pids(28164)[4]
        output:
          [<<<dotprod_1033@62:1>@65:1>@81:0>]
      end GenHcSolver.classify_pids(28164)[4] (0.000000 sec.)
      lb:((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
          ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(28167)[4]
        lb:((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
            ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        nub:false
        lb':((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
             ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        nub':false
        begin InterpProver.interpolate(28168)[5]
          begin InterpProver.interpolate_fresh(28169)[6]
            begin InterpProver.interpolate_log(28170)[7]
              input1: ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
                       ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
              input2: false
              begin InterpProver.interpolate_check(28171)[8]
                begin InterpProver.interpolate_simplify(28172)[9]
                  begin InterpProver.interpolate_quick(28227)[10]
                    
                  end InterpProver.interpolate_quick(28227)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(28172)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(28171)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(28170)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(28169)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(28168)[5] (0.001000 sec.)
        output:
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(28167)[4] (0.001000 sec.)
      Horn clauses:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
        ((<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>) && (0 > <<dotprod_1033@62:2>@87:0>)) |- bot
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
      upper bounds:
        P[<<dotprod_1033@62:1>@65:0>](var280:int,var281:int) = true
      begin GenHcSolver.classify_pids(29455)[4]
        output:
          [<<dotprod_1033@62:1>@65:0>]
      end GenHcSolver.classify_pids(29455)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(29458)[4]
        lb:((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        nub:false
        lb':((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        nub':false
        begin InterpProver.interpolate(29459)[5]
          begin InterpProver.interpolate_fresh(29460)[6]
            begin InterpProver.interpolate_log(29461)[7]
              input1: ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
              input2: false
              begin InterpProver.interpolate_check(29462)[8]
                begin InterpProver.interpolate_simplify(29463)[9]
                  begin InterpProver.interpolate_quick(29502)[10]
                    
                  end InterpProver.interpolate_quick(29502)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(29463)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(29462)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(29461)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(29460)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(29459)[5] (0.001000 sec.)
        output:
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) = true
      end ApronInterface.convex_hull_interpolate(29458)[4] (0.001000 sec.)
      Horn clauses:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
        ((<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>) && (0 > <<dotprod_1033@62:2>@87:0>)) |- bot
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
      upper bounds:
        P[<dotprod_1033@62:4>](var282:int,var283:int,var284:int) = ((var283 >= var282) || (0 <= var283))
      begin GenHcSolver.classify_pids(30511)[4]
        output:
          [<dotprod_1033@62:4>]
      end GenHcSolver.classify_pids(30511)[4] (0.000000 sec.)
      lb:((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
      nub:(not ((<dotprod_1033@62:3> >= <dotprod_1033@62:0>) || (0 <= <dotprod_1033@62:3>)))
      begin ApronInterface.convex_hull_interpolate(30514)[4]
        lb:((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        nub:(not ((<dotprod_1033@62:3> >= <dotprod_1033@62:0>) || (0 <= <dotprod_1033@62:3>)))
        lb':((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        nub':(not ((<dotprod_1033@62:3> >= <dotprod_1033@62:0>) || (0 <= <dotprod_1033@62:3>)))
        begin InterpProver.interpolate(30515)[5]
          begin InterpProver.interpolate_fresh(30516)[6]
            begin InterpProver.interpolate_log(30517)[7]
              input1: ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
              input2: (not ((<dotprod_1033@62:3> >= <dotprod_1033@62:0>) || (0 <= <dotprod_1033@62:3>)))
              begin InterpProver.interpolate_check(30518)[8]
                begin InterpProver.interpolate_simplify(30519)[9]
                  begin InterpProver.interpolate_quick(30566)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(30575)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(30576)[12]
                        begin CsisatInterface.interpolate_csisat_log(30577)[13]
                          input1: 0 = v_sep_dotprod_1033_sep_62_sep_3
                          input2: ((1 + v_sep_dotprod_1033_sep_62_sep_3) <= 0 & (1 + v_sep_dotprod_1033_sep_62_sep_3) <= v_sep_dotprod_1033_sep_62_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(30578)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(30578)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_62_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(30577)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_62_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_62_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(30576)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(30575)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(30566)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(30519)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(30518)[8] (0.001000 sec.)
              output: (0 <= <dotprod_1033@62:3>)
            end InterpProver.interpolate_log(30517)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(30516)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(30515)[5] (0.001000 sec.)
        output:
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
          (0 <= <dotprod_1033@62:3>)
      end ApronInterface.convex_hull_interpolate(30514)[4] (0.001000 sec.)
      begin HcSolver.check_validity(30735)[4]
        input:
          P[<fail_1528@95:0>](<fail_1528@95:0>:bool)|- bot
          
          P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
          ((0 > <k_make_array_u_1204@92:0>) && <fail_1528@95:0>) |- P[<fail_1528@95:0>](
          <fail_1528@95:0>:bool)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var272:int),
          (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
          
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
          ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
          |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                  <<dotprod_1033@62:1>@65:0>:int,
                                                  <<<dotprod_1033@62:1>@65:1>@81:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
          (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
          
           ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
          |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                    <dotprod_1033@62:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(30735)[4] (0.003000 sec.)
      solution:
        P[<fail_1528@95:0>](<fail_1528@95:0>:bool) = false
        P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
        (0 <= <<dotprod_1033@62:2>@87:0>)
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        true
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) = true
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        (0 <= <dotprod_1033@62:3>)
    end GenHcSolver.solve(22236)[3] (0.048993 sec.)
    begin GenHcSolver.solve(31251)[3]
      Horn clauses:
        P[<fail_1528@95:0>](<fail_1528@95:0>:bool)|- bot
        
        P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
        ((0 > <k_make_array_u_1204@92:0>) && <fail_1528@95:0>) |- P[<fail_1528@95:0>](
        <fail_1528@95:0>:bool)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var272:int),
        (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
        
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                <<dotprod_1033@62:1>@65:0>:int,
                                                <<<dotprod_1033@62:1>@65:1>@81:0>:int)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
        ((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
        P[<fail_1528@95:0>](<fail_1528@95:0>:bool) = false
      upper bounds:
        P[<fail_1528@95:0>](var286:bool) = true
      begin GenHcSolver.classify_pids(33147)[4]
        output:
          [<fail_1528@95:0>]
      end GenHcSolver.classify_pids(33147)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(33150)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(33153)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(33153)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(33158)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(33158)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(33161)[5]
          begin InterpProver.interpolate_fresh(33162)[6]
            begin InterpProver.interpolate_log(33163)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(33164)[8]
                begin InterpProver.interpolate_simplify(33165)[9]
                  begin InterpProver.interpolate_quick(33180)[10]
                    
                  end InterpProver.interpolate_quick(33180)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(33184)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(33184)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(33165)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(33164)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(33163)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(33162)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(33161)[5] (0.000000 sec.)
        output:
          P[<fail_1528@95:0>](<fail_1528@95:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(33150)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
        (0 > <k_make_array_u_1204@92:0>) |- bot
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var272:int),
        (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
        
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                <<dotprod_1033@62:1>@65:0>:int,
                                                <<<dotprod_1033@62:1>@65:1>@81:0>:int)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
        ((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
      upper bounds:
        P[<<dotprod_1033@62:2>@87:0>](var287:int,var288:int) = (0 <= var288)
      begin GenHcSolver.classify_pids(35366)[4]
        output:
          [<<dotprod_1033@62:2>@87:0>]
      end GenHcSolver.classify_pids(35366)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
      nub:(not (0 <= <<dotprod_1033@62:2>@87:0>))
      begin ApronInterface.convex_hull_interpolate(35369)[4]
        lb:((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
        nub:(not (0 <= <<dotprod_1033@62:2>@87:0>))
        begin ExtFormula.Formula.case_analysis_boolean(35381)[5]
          ts: ((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(35381)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(35390)[5]
          ts: (0 > <<dotprod_1033@62:2>@87:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(35390)[5] (0.000000 sec.)
        lb':((<<dotprod_1033@62:2>@87:0> = 0) && ((-1 + <dotprod_1033@62:0>) >= 0))
        nub':((-1 + (-1 * <<dotprod_1033@62:2>@87:0>)) >= 0)
        begin InterpProver.interpolate(35394)[5]
          begin InterpProver.interpolate_fresh(35395)[6]
            begin InterpProver.interpolate_log(35396)[7]
              input1: ((<<dotprod_1033@62:2>@87:0> = 0) && ((-1 + <dotprod_1033@62:0>) >= 0))
              input2: ((-1 + (-1 * <<dotprod_1033@62:2>@87:0>)) >= 0)
              begin InterpProver.interpolate_check(35397)[8]
                begin InterpProver.interpolate_simplify(35398)[9]
                  begin InterpProver.interpolate_quick(35435)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(35444)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(35445)[12]
                        begin CsisatInterface.interpolate_csisat_log(35446)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 & 1 <= v_sep_dotprod_1033_sep_62_sep_0)
                          input2: (1 + v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(35447)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(35447)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(35446)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(35445)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(35444)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(35435)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(35398)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(35397)[8] (0.001000 sec.)
              output: (0 <= <<dotprod_1033@62:2>@87:0>)
            end InterpProver.interpolate_log(35396)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(35395)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(35394)[5] (0.001000 sec.)
        output:
          P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
          (0 <= <<dotprod_1033@62:2>@87:0>)
      end ApronInterface.convex_hull_interpolate(35369)[4] (0.002000 sec.)
      Horn clauses:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var272:int),
        ((<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>) && (0 > <<dotprod_1033@62:2>@87:0>)) |- bot
        
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                <<dotprod_1033@62:1>@65:0>:int,
                                                <<<dotprod_1033@62:1>@65:1>@81:0>:int)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
      upper bounds:
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](var289:int,var290:int,var291:int) = true
      begin GenHcSolver.classify_pids(37233)[4]
        output:
          [<<<dotprod_1033@62:1>@65:1>@81:0>]
      end GenHcSolver.classify_pids(37233)[4] (0.000000 sec.)
      lb:((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
          ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(37236)[4]
        lb:((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
            ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(37256)[5]
          ts: ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
               ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(37256)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(37265)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(37265)[5] (0.000000 sec.)
        lb':((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
             ((<<dotprod_1033@62:1>@65:0> = 0) && ((-1 + <dotprod_1033@62:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(37268)[5]
          begin InterpProver.interpolate_fresh(37269)[6]
            begin InterpProver.interpolate_log(37270)[7]
              input1: ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
                       ((<<dotprod_1033@62:1>@65:0> = 0) && ((-1 + <dotprod_1033@62:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(37271)[8]
                begin InterpProver.interpolate_simplify(37272)[9]
                  begin InterpProver.interpolate_quick(37330)[10]
                    
                  end InterpProver.interpolate_quick(37330)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(37272)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(37271)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(37270)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(37269)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(37268)[5] (0.001000 sec.)
        output:
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(37236)[4] (0.002000 sec.)
      Horn clauses:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
        ((<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>) && (0 > <<dotprod_1033@62:2>@87:0>)) |- bot
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
      upper bounds:
        P[<<dotprod_1033@62:1>@65:0>](var292:int,var293:int) = true
      begin GenHcSolver.classify_pids(38560)[4]
        output:
          [<<dotprod_1033@62:1>@65:0>]
      end GenHcSolver.classify_pids(38560)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(38563)[4]
        lb:((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(38575)[5]
          ts: ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(38575)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(38583)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(38583)[5] (0.000000 sec.)
        lb':((<<dotprod_1033@62:1>@65:0> = 0) && ((-1 + <dotprod_1033@62:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(38586)[5]
          begin InterpProver.interpolate_fresh(38587)[6]
            begin InterpProver.interpolate_log(38588)[7]
              input1: ((<<dotprod_1033@62:1>@65:0> = 0) && ((-1 + <dotprod_1033@62:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(38589)[8]
                begin InterpProver.interpolate_simplify(38590)[9]
                  begin InterpProver.interpolate_quick(38630)[10]
                    
                  end InterpProver.interpolate_quick(38630)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(38590)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(38589)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(38588)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(38587)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(38586)[5] (0.000000 sec.)
        output:
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) = true
      end ApronInterface.convex_hull_interpolate(38563)[4] (0.001000 sec.)
      Horn clauses:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
        ((<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>) && (0 > <<dotprod_1033@62:2>@87:0>)) |- bot
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
      upper bounds:
        P[<dotprod_1033@62:4>](var294:int,var295:int,var296:int) = ((var295 >= var294) || (0 <= var295))
      begin GenHcSolver.classify_pids(39641)[4]
        output:
          [<dotprod_1033@62:4>]
      end GenHcSolver.classify_pids(39641)[4] (0.000000 sec.)
      lb:((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
      nub:(not ((<dotprod_1033@62:3> >= <dotprod_1033@62:0>) || (0 <= <dotprod_1033@62:3>)))
      begin ApronInterface.convex_hull_interpolate(39644)[4]
        lb:((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        nub:(not ((<dotprod_1033@62:3> >= <dotprod_1033@62:0>) || (0 <= <dotprod_1033@62:3>)))
        begin ExtFormula.Formula.case_analysis_boolean(39656)[5]
          ts: ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(39656)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(39676)[5]
          ts: ((<dotprod_1033@62:3> < <dotprod_1033@62:0>) && (0 > <dotprod_1033@62:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(39676)[5] (0.000000 sec.)
        lb':((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:3> = 0))
        nub':(((-1 + (-1 * <dotprod_1033@62:3>)) >= 0) &&
              (((-1 + (-1 * <dotprod_1033@62:3>)) + <dotprod_1033@62:0>) >= 0))
        begin InterpProver.interpolate(39682)[5]
          begin InterpProver.interpolate_fresh(39683)[6]
            begin InterpProver.interpolate_log(39684)[7]
              input1: ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:3> = 0))
              input2: (((-1 + (-1 * <dotprod_1033@62:3>)) >= 0) &&
                       (((-1 + (-1 * <dotprod_1033@62:3>)) + <dotprod_1033@62:0>) >= 0))
              begin InterpProver.interpolate_check(39685)[8]
                begin InterpProver.interpolate_simplify(39686)[9]
                  begin InterpProver.interpolate_quick(39750)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(39759)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(39760)[12]
                        begin CsisatInterface.interpolate_csisat_log(39761)[13]
                          input1: 0 = v_sep_dotprod_1033_sep_62_sep_3
                          input2: ((1 + v_sep_dotprod_1033_sep_62_sep_3) <= 0 & (1 + v_sep_dotprod_1033_sep_62_sep_3) <= v_sep_dotprod_1033_sep_62_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(39762)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(39762)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_62_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(39761)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_62_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_62_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(39760)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(39759)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(39750)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(39686)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(39685)[8] (0.002000 sec.)
              output: (0 <= <dotprod_1033@62:3>)
            end InterpProver.interpolate_log(39684)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(39683)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(39682)[5] (0.002000 sec.)
        output:
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
          (0 <= <dotprod_1033@62:3>)
      end ApronInterface.convex_hull_interpolate(39644)[4] (0.002000 sec.)
      begin HcSolver.check_validity(39923)[4]
        input:
          P[<fail_1528@95:0>](<fail_1528@95:0>:bool)|- bot
          
          P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
          ((0 > <k_make_array_u_1204@92:0>) && <fail_1528@95:0>) |- P[<fail_1528@95:0>](
          <fail_1528@95:0>:bool)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var272:int),
          (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
          
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
          ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
          |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                  <<dotprod_1033@62:1>@65:0>:int,
                                                  <<<dotprod_1033@62:1>@65:1>@81:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
          (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
          
           ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
          |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                    <dotprod_1033@62:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(39923)[4] (0.003999 sec.)
      solution:
        P[<fail_1528@95:0>](<fail_1528@95:0>:bool) = false
        P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
        (0 <= <<dotprod_1033@62:2>@87:0>)
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        true
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) = true
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        (0 <= <dotprod_1033@62:3>)
    end GenHcSolver.solve(31251)[3] (0.050992 sec.)
    begin YhornInterface.solve(40439)[3]
      begin HcSolver.solve_ub(40440)[4]
        encoded:
          P[<fail_1528@95:0>](<fail_1528@95:0>:int)|- bot
          
          P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
          ((0 > <k_make_array_u_1204@92:0>) && (<fail_1528@95:0> = 1)) |- P[<fail_1528@95:0>](
          <fail_1528@95:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var272:int),
          (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
          
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
          ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
          |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                  <<dotprod_1033@62:1>@65:0>:int,
                                                  <<<dotprod_1033@62:1>@65:1>@81:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
          (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
          
           ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
          |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                    <dotprod_1033@62:4>:int)
        input to Yhorn:
          P[<fail_1528@95:0>](<fail_1528@95:0>:int)|- bot
          
          P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
          ((0 > <k_make_array_u_1204@92:0>) && (<fail_1528@95:0> = 1)) |- P[<fail_1528@95:0>](
          <fail_1528@95:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var272:int),
          (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
          
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
          ((<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>) &&
           ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<<dotprod_1033@62:1>@65:1>@81:0> = 0)))
          |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                  <<dotprod_1033@62:1>@65:0>:int,
                                                  <<<dotprod_1033@62:1>@65:1>@81:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
          (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
          
           ((<dotprod_1033@62:4> = <dotprod_1033@62:3>) && (<dotprod_1033@62:4> = 0))
          |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                    <dotprod_1033@62:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1528_sep_95_sep_0($142)) -> 1=0.
(($142-1=0) & (-$143>0)) & (v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0($144,$143)) -> v_sep_fail_1528_sep_95_sep_0($142).
($145-$146<0) & (v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($146,$145,$147)) & (v_sep_dotprod_1033_sep_62_sep_4($146,$145,$148)) -> v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0($146,$145).
(($149=0) & (-$150<=0) & (-$146+$150<0)) & (v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0($146,$150)) -> v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($146,$150,$149).
(-$146+$150<0) & (v_sep_dotprod_1033_sep_62_sep_4($146,$150,$151)) -> v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0($146,$150).
($151=0) & ($151-$152=0) -> v_sep_dotprod_1033_sep_62_sep_4($146,$152,$151).


v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1528_sep_95_sep_0: X
.......
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1528_sep_95_sep_0: X
...
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1528_sep_95_sep_0: X
.....
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1528_sep_95_sep_0: X
......
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1528_sep_95_sep_0: X
.......(0=0) & (v_sep_fail_1528_sep_95_sep_0($142)) -> 1=0.
(($142-1=0) & (-$143>0)) & (v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0($144,$143)) -> v_sep_fail_1528_sep_95_sep_0($142).
($145-$146<0) & (v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($146,$145,$147)) & (v_sep_dotprod_1033_sep_62_sep_4($146,$145,$148)) -> v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0($146,$145).
(($149=0) & (-$150<=0) & (-$146+$150<0)) & (v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0($146,$150)) -> v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($146,$150,$149).
(-$146+$150<0) & (v_sep_dotprod_1033_sep_62_sep_4($146,$150,$151)) -> v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0($146,$150).
($151=0) & ($151-$152=0) -> v_sep_dotprod_1033_sep_62_sep_4($146,$152,$151).

        solution:
          P[<<dotprod_1033@62:1>@65:0>]($175:int,$177:int) = true
          P[<<<dotprod_1033@62:1>@65:1>@81:0>]($161:int,$163:int,$165:int) = (0 <= $163)
          P[<<dotprod_1033@62:2>@87:0>]($156:int,$158:int) = (0 <= $158)
          P[<dotprod_1033@62:4>]($168:int,$170:int,$172:int) = true
          P[<fail_1528@95:0>]($153:bool) = false
        
      end HcSolver.solve_ub(40440)[4] (0.026996 sec.)
      begin HcSolver.check_validity(40651)[4]
        input:
          P[<fail_1528@95:0>](<fail_1528@95:0>:bool)|- bot
          
          P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1204@92:1>:int,<k_make_array_u_1204@92:0>:int),
          ((0 > <k_make_array_u_1204@92:0>) && <fail_1528@95:0>) |- P[<fail_1528@95:0>](
          <fail_1528@95:0>:bool)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1519@83:2>:int),
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var272:int),
          (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
          
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
          ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
          |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                  <<dotprod_1033@62:1>@65:0>:int,
                                                  <<<dotprod_1033@62:1>@65:1>@81:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
          (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
          
           ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
          |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                    <dotprod_1033@62:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(40651)[4] (0.002999 sec.)
      solution:
        P[<<dotprod_1033@62:1>@65:0>]($175:int,$177:int) = true
        P[<<<dotprod_1033@62:1>@65:1>@81:0>]($161:int,$163:int,$165:int) = (0 <= $163)
        P[<<dotprod_1033@62:2>@87:0>]($156:int,$158:int) = (0 <= $158)
        P[<dotprod_1033@62:4>]($168:int,$170:int,$172:int) = true
        P[<fail_1528@95:0>]($153:bool) = false
    end YhornInterface.solve(40439)[3] (0.030995 sec.)
    
  end RefTypeInfer.infer_etrs(19324)[2] (0.311952 sec.)
  refinement types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int -> (v3:int -> X) -> X) ->
                  (v6:{v6:int | (0 <= v6)} -> (v7:int -> X) -> X) ->
                  v10:int -> v11:{v11:int | (0 <= v10)} -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1215: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1519: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1528: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1527: var320:int -> var319:int -> var318:unit -> X
    f_dotprod_1520: var336:int ->
                    var335:int ->
                    var334:int ->
                    var333:int ->
                    (var332:int -> X) ->
                    (var330:int -> (var329:int -> X) -> X) -> (var326:int -> (var325:int -> X) -> X) -> var322:int -> X
    f_dotprod_1521: var353:int ->
                    var352:int ->
                    var351:int ->
                    var350:int ->
                    var349:int ->
                    (var348:int -> X) ->
                    (var346:int -> (var345:int -> X) -> X) -> (var342:int -> (var341:int -> X) -> X) -> var338:int -> X
    f_dotprod_1522: var371:int ->
                    var370:int ->
                    var369:int ->
                    var368:int ->
                    var367:int ->
                    var366:int ->
                    (var365:int -> X) ->
                    (var363:int -> (var362:int -> X) -> X) -> (var359:int -> (var358:int -> X) -> X) -> var355:int -> X
    f_dotprod_1523: var390:int ->
                    var389:int ->
                    var388:int ->
                    var387:int ->
                    var386:int ->
                    var385:int ->
                    var384:int ->
                    (var383:int -> X) ->
                    (var381:int -> (var380:int -> X) -> X) -> (var377:int -> (var376:int -> X) -> X) -> var373:int -> X
    f_main_1524: var397:unit -> var396:int -> var395:int -> (var394:unit -> X) -> var392:int -> X
  abstraction types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int -> (v3:int -> X) -> X) ->
                  (v6:int[v6 -> (0 <= v6)] -> (v7:int -> X) -> X) ->
                  v10:int -> v11:int[v11 -> (0 <= v10)] -> (v12:int -> X) -> X
    make_array_1030: var398:int -> var399:int -> (var400:int -> X) -> X
    k_make_array_u_1204: var403:int -> var404:int -> (var405:int -> X) -> var407:bool -> X
    k_make_array_u_1215: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1519: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    fail_1528: v1:bool -> (v2:unit -> X) -> X
    f_1527: var320:int -> var319:int -> var318:unit -> X
    f_dotprod_1520: var336:int ->
                    var335:int ->
                    var334:int ->
                    var333:int ->
                    (var332:int -> X) ->
                    (var330:int -> (var329:int -> X) -> X) -> (var326:int -> (var325:int -> X) -> X) -> var322:int -> X
    f_dotprod_1521: var353:int ->
                    var352:int ->
                    var351:int ->
                    var350:int ->
                    var349:int ->
                    (var348:int -> X) ->
                    (var346:int -> (var345:int -> X) -> X) -> (var342:int -> (var341:int -> X) -> X) -> var338:int -> X
    f_dotprod_1522: var371:int ->
                    var370:int ->
                    var369:int ->
                    var368:int ->
                    var367:int ->
                    var366:int ->
                    (var365:int -> X) ->
                    (var363:int -> (var362:int -> X) -> X) -> (var359:int -> (var358:int -> X) -> X) -> var355:int -> X
    f_dotprod_1523: var390:int ->
                    var389:int ->
                    var388:int ->
                    var387:int ->
                    var386:int ->
                    var385:int ->
                    var384:int ->
                    (var383:int -> X) ->
                    (var381:int -> (var380:int -> X) -> X) -> (var377:int -> (var376:int -> X) -> X) -> var373:int -> X
    f_main_1524: var397:unit -> var396:int -> var395:int -> (var394:unit -> X) -> var392:int -> X
  
end AbsTypeInfer.refine(19323)[1] (0.318952 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1518
  main_1518 -> (rand_int f_1525)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      i_1037 >= n_1034) -> (k_dotprod_1266 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036))
  f_1525 x_1472 -> (rand_int (f_1526 x_1472))
  f_1526 x_1472 x_1488 -> (main_1039 x_1472 () x_1488 (f_1527 x_1472 x_1488))
  f_1527 x_1472 x_1488 x_1469 -> end
  f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 ->
      (v2_1036 i_1037 (f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1296) + x_1292)
        (f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 ->
      (v1_1035 i_1037 (f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 ->
      (v2_1036 i_1037
        (f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1350) + x_1346) k_dotprod_1266)
  f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 -> (k_main_1401 ())
  fail_1528 b k -> {fail} => (k ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when b_1216 ->
      (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when (not b_1216) ->
      (fail_1528 true (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198))
  k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 -> (k_make_array_1198 0)
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (z_1042 = 0) ->
      (dotprod_1033 n_1040 (make_array_1030 n_1040) (make_array_1030 n_1040) z_1042 z_1042
        (f_main_1524 m_1041 n_1040 z_1042 k_main_1401))
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (not (z_1042 = 0)) -> (k_main_1401 ())
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (0 <= i_1032) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (not (0 <= i_1032)) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 false)
Types:
  main_1518 : X
  dotprod_1033 : (x_1:int ->
                  (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                  (x_9:int[x_9 >= 0] -> (int -> X) -> X) -> x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1528 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1518 ... --> 
  f_1525 ... --> 
  f_1526 ... --> 
  main_1039 [1/2] ... --> 
  dotprod_1033 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1204 [1/2] ... --> 
  k_make_array_u_1215 ... --> 
  f_dotprod_1519 ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1204 [2/2] ... --> 
  fail_1528 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(42260)[1]
  program:
    main_1518  | true = ((Random.int 0) f_1525)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    i_1037 >= n_1034) = (k_dotprod_1266 sum_1038)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 | (
    not (i_1037 >= n_1034)) = (v1_1035 i_1037
                                       (f_dotprod_1519 i_1037
                                                       n_1034
                                                       sum_1038
                                                       k_dotprod_1266
                                                       v1_1035
                                                       v2_1036))
    f_1525 x_1472 | true = ((Random.int 0) (f_1526 x_1472))
    f_1526 x_1472 x_1488 | true = (main_1039 x_1472
                                             ()
                                             x_1488
                                             (f_1527 x_1472
                                                     x_1488))
    f_1527 x_1472 x_1488 x_1469 | true = end
    f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 | true = (
    v2_1036 i_1037
            (f_dotprod_1520 i_1037
                            n_1034
                            sum_1038
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 | true = (
    dotprod_1033
      n_1034
      v1_1035
      v2_1036
      (i_1037 + 1)
      ((sum_1038 + x_1296) + x_1292)
      (f_dotprod_1521 i_1037
                      n_1034
                      sum_1038
                      x_1292
                      x_1296
                      k_dotprod_1266
                      v1_1035
                      v2_1036))
    f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 | true = (
    v1_1035 i_1037
            (f_dotprod_1522 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 | true = (
    v2_1036 i_1037
            (f_dotprod_1523 i_1037
                            n_1034
                            sum_1038
                            x_1269
                            x_1292
                            x_1296
                            x_1350
                            k_dotprod_1266
                            v1_1035
                            v2_1036))
    f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 | true = (
    dotprod_1033 n_1034
                 v1_1035
                 v2_1036
                 (i_1037 + 1)
                 ((sum_1038 + x_1350) + x_1346)
                 k_dotprod_1266)
    f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 | true = (k_main_1401 ())
    fail_1528 b k | true = (fail ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | b_1216 = (
    k_make_array_u_1215 i_1032
                        n_1031
                        k_make_array_1198
                        ())
    k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 | (not b_1216) = (
    fail_1528 true
              (k_make_array_u_1215 i_1032
                                   n_1031
                                   k_make_array_1198))
    k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 | true = (
    k_make_array_1198 0)
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (z_1042 = 0) = (dotprod_1033
                                                                   n_1040
                                                                   (make_array_1030 n_1040)
                                                                   (make_array_1030 n_1040)
                                                                   z_1042
                                                                   z_1042
                                                                   (f_main_1524 m_1041
                                                                    n_1040
                                                                    z_1042
                                                                    k_main_1401))
    main_1039 n_1040 m_1041 z_1042 k_main_1401 | (not (z_1042 = 0)) = (
    k_main_1401 ())
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (0 <= i_1032) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1198 | (not (0 <= i_1032)) = (
    k_make_array_u_1204 i_1032
                        n_1031
                        k_make_array_1198
                        false)
    main_1518:X
    dotprod_1033:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1525:int -> X
    f_1526:int -> int -> X
    f_1527:int -> int -> unit -> X
    f_dotprod_1519:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1520:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1521:int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1522:int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1523:int ->
                   int ->
                   int ->
                   int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1524:unit -> int -> int -> (unit -> X) -> int -> X
    fail_1528:bool -> (unit -> X) -> X
    k_make_array_u_1204:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1215:int -> int -> (int -> X) -> unit -> X
    main_1039:int -> unit -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1525,f_1526,f_1527,f_dotprod_1519,f_dotprod_1520,f_dotprod_1521,f_dotprod_1522,f_dotprod_1523,f_main_1524,k_make_array_u_1204,k_make_array_u_1215,main_1039,make_array_1030
  counterexample: 0:0:0:0:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1525@101:0> = var409)
     [true.nop((<f_1526@104:0> = <f_1525@101:0>) && (<f_1526@104:1> = var410))
      [true.
       ((<main_1039@106:0> = <f_1526@104:0>) && ((<main_1039@106:1> = ()) && (<main_1039@106:2> = <f_1526@104:1>)))
       [(<main_1039@106:2> = 0).
        ((<dotprod_1033@109:0> = <main_1039@106:0>) &&
         ((<dotprod_1033@109:3> = <main_1039@106:2>) && (<dotprod_1033@109:4> = <main_1039@106:2>)))
        [(not (<dotprod_1033@109:3> >= <dotprod_1033@109:0>)).(<<dotprod_1033@109:1>@112:0> = <dotprod_1033@109:3>)
         [true.
          ((<make_array_1030@114:0> = <main_1039@106:0>) && (<make_array_1030@114:1> = <<dotprod_1033@109:1>@112:0>))
          [(0 <= <make_array_1030@114:1>).
           ((<k_make_array_u_1204@117:0> = <make_array_1030@114:1>) &&
            ((<k_make_array_u_1204@117:1> = <make_array_1030@114:0>) &&
             (<k_make_array_u_1204@117:3> = (<make_array_1030@114:1> < <make_array_1030@114:0>))))
           [<k_make_array_u_1204@117:3>.
            ((<k_make_array_u_1215@120:0> = <k_make_array_u_1204@117:0>) &&
             ((<k_make_array_u_1215@120:1> = <k_make_array_u_1204@117:1>) && (<k_make_array_u_1215@120:3> = ())))
            [true.(<<k_make_array_u_1215@120:2>@122:0> = 0)
             [true.(<<k_make_array_u_1204@117:2>@124:0> = <<k_make_array_u_1215@120:2>@122:0>)
              [true.(<<make_array_1030@114:2>@126:0> = <<k_make_array_u_1204@117:2>@124:0>)
               [true.(<<<dotprod_1033@109:1>@112:1>@128:0> = <<make_array_1030@114:2>@126:0>)
                [true.
                 ((<f_dotprod_1519@130:0> = <dotprod_1033@109:3>) &&
                  ((<f_dotprod_1519@130:1> = <dotprod_1033@109:0>) &&
                   ((<f_dotprod_1519@130:2> = <dotprod_1033@109:4>) &&
                    (<f_dotprod_1519@130:6> = <<<dotprod_1033@109:1>@112:1>@128:0>))))
                 [true.(<<f_dotprod_1519@130:5>@132:0> = <f_dotprod_1519@130:0>)
                  [true.(<<dotprod_1033@109:2>@134:0> = <<f_dotprod_1519@130:5>@132:0>)
                   [true.
                    ((<make_array_1030@136:0> = <main_1039@106:0>) &&
                     (<make_array_1030@136:1> = <<dotprod_1033@109:2>@134:0>))
                    [(0 <= <make_array_1030@136:1>).
                     ((<k_make_array_u_1204@139:0> = <make_array_1030@136:1>) &&
                      ((<k_make_array_u_1204@139:1> = <make_array_1030@136:0>) &&
                       (<k_make_array_u_1204@139:3> = (<make_array_1030@136:1> < <make_array_1030@136:0>))))
                     [(not <k_make_array_u_1204@139:3>).(<fail_1528@142:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(42261)[2]
    horn clauses:
      P[<fail_1528@142:0>](<fail_1528@142:0>:bool)|- bot
      
      P[<k_make_array_u_1204@139:3>](<k_make_array_u_1204@139:0>:int,<k_make_array_u_1204@139:1>:int,false:bool),
      <fail_1528@142:0> |- P[<fail_1528@142:0>](<fail_1528@142:0>:bool)
      
      P[<make_array_1030@136:1>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
      ((0 <= <k_make_array_u_1204@139:0>) &&
       (<k_make_array_u_1204@139:3> = (<k_make_array_u_1204@139:0> < <k_make_array_u_1204@139:1>)))
      |- P[<k_make_array_u_1204@139:3>](<k_make_array_u_1204@139:0>:int,
                                        <k_make_array_u_1204@139:1>:int,
                                        <k_make_array_u_1204@139:3>:bool)
      
      P[<main_1039@106:2>](<make_array_1030@136:0>:int,<main_1039@106:1>:unit,0:int),
      P[<<dotprod_1033@109:2>@134:0>](<make_array_1030@136:0>:int,<make_array_1030@136:1>:int)|- P[<make_array_1030@136:1>](
      <make_array_1030@136:0>:int,<make_array_1030@136:1>:int)
      
      P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<f_dotprod_1519@130:2>:int),
      P[<<f_dotprod_1519@130:5>@132:0>](<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:0>:int,<f_dotprod_1519@130:2>:int,<<dotprod_1033@109:2>@134:0>:int),
      (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
      |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int)
      
      P[<f_dotprod_1519@130:6>](<f_dotprod_1519@130:0>:int,<f_dotprod_1519@130:1>:int,<f_dotprod_1519@130:2>:int,<f_dotprod_1519@130:6>:int),
      (<<f_dotprod_1519@130:5>@132:0> = <f_dotprod_1519@130:0>)
      |- P[<<f_dotprod_1519@130:5>@132:0>](<f_dotprod_1519@130:0>:int,
                                           <f_dotprod_1519@130:1>:int,
                                           <f_dotprod_1519@130:2>:int,
                                           <<f_dotprod_1519@130:5>@132:0>:int)
      
      P[<dotprod_1033@109:4>](<f_dotprod_1519@130:1>:int,<f_dotprod_1519@130:0>:int,<f_dotprod_1519@130:2>:int),
      P[<<<dotprod_1033@109:1>@112:1>@128:0>](<f_dotprod_1519@130:1>:int,<f_dotprod_1519@130:0>:int,<f_dotprod_1519@130:6>:int),
      (<f_dotprod_1519@130:0> < <f_dotprod_1519@130:1>)
      |- P[<f_dotprod_1519@130:6>](<f_dotprod_1519@130:0>:int,<f_dotprod_1519@130:1>:int,
                                   <f_dotprod_1519@130:2>:int,<f_dotprod_1519@130:6>:int)
      
      P[<main_1039@106:2>](<dotprod_1033@109:0>:int,<main_1039@106:1>:unit,0:int),
      P[<<make_array_1030@114:2>@126:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int)|- P[<<<dotprod_1033@109:1>@112:1>@128:0>](
      <dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int)
      
      P[<make_array_1030@114:1>](<make_array_1030@114:0>:int,<make_array_1030@114:1>:int),
      P[<<k_make_array_u_1204@117:2>@124:0>](<make_array_1030@114:1>:int,<make_array_1030@114:0>:int,<<make_array_1030@114:2>@126:0>:int),
      (0 <= <make_array_1030@114:1>)
      |- P[<<make_array_1030@114:2>@126:0>](<make_array_1030@114:0>:int,
                                            <make_array_1030@114:1>:int,
                                            <<make_array_1030@114:2>@126:0>:int)
      
      P[<k_make_array_u_1204@117:3>](<k_make_array_u_1204@117:0>:int,<k_make_array_u_1204@117:1>:int,true:bool),
      P[<<k_make_array_u_1215@120:2>@122:0>](<k_make_array_u_1204@117:0>:int,<k_make_array_u_1204@117:1>:int,<<k_make_array_u_1204@117:2>@124:0>:int)|- P[<<k_make_array_u_1204@117:2>@124:0>](
      <k_make_array_u_1204@117:0>:int,<k_make_array_u_1204@117:1>:int,
      <<k_make_array_u_1204@117:2>@124:0>:int)
      
      P[<k_make_array_u_1215@120:3>](<k_make_array_u_1215@120:0>:int,<k_make_array_u_1215@120:1>:int,<k_make_array_u_1215@120:3>:unit),
      (<<k_make_array_u_1215@120:2>@122:0> = 0)
      |- P[<<k_make_array_u_1215@120:2>@122:0>](<k_make_array_u_1215@120:0>:int,
                                                <k_make_array_u_1215@120:1>:int,
                                                <<k_make_array_u_1215@120:2>@122:0>:int)
      
      P[<k_make_array_u_1204@117:3>](<k_make_array_u_1215@120:0>:int,<k_make_array_u_1215@120:1>:int,true:bool)|- P[<k_make_array_u_1215@120:3>](
      <k_make_array_u_1215@120:0>:int,<k_make_array_u_1215@120:1>:int,
      <k_make_array_u_1215@120:3>:unit)
      
      P[<make_array_1030@114:1>](<k_make_array_u_1204@117:1>:int,<k_make_array_u_1204@117:0>:int),
      ((0 <= <k_make_array_u_1204@117:0>) &&
       (<k_make_array_u_1204@117:3> = (<k_make_array_u_1204@117:0> < <k_make_array_u_1204@117:1>)))
      |- P[<k_make_array_u_1204@117:3>](<k_make_array_u_1204@117:0>:int,
                                        <k_make_array_u_1204@117:1>:int,
                                        <k_make_array_u_1204@117:3>:bool)
      
      P[<main_1039@106:2>](<make_array_1030@114:0>:int,<main_1039@106:1>:unit,0:int),
      P[<<dotprod_1033@109:1>@112:0>](<make_array_1030@114:0>:int,<make_array_1030@114:1>:int)|- P[<make_array_1030@114:1>](
      <make_array_1030@114:0>:int,<make_array_1030@114:1>:int)
      
      P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
      (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
      |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
      
      P[<main_1039@106:2>](<dotprod_1033@109:0>:int,<main_1039@106:1>:unit,<dotprod_1033@109:4>:int),
      ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
      |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                 <dotprod_1033@109:4>:int)
      
      P[<f_1526@104:1>](<main_1039@106:0>:int,<main_1039@106:2>:int)|- P[<main_1039@106:2>](
      <main_1039@106:0>:int,<main_1039@106:1>:unit,<main_1039@106:2>:int)
      
      P[<f_1525@101:0>](<f_1526@104:0>:int)|- P[<f_1526@104:1>](<f_1526@104:0>:int,
                                                                <f_1526@104:1>:int)
      
      |- P[<f_1525@101:0>](<f_1525@101:0>:int)
    call trees:
      <main_1518@98>
        <f_1525@101>
          <f_1526@104>
            <main_1039@106>
              <dotprod_1033@109>
              </<dotprod_1033@109:1>@112>
              <make_array_1030@114>
                <k_make_array_u_1204@117>
                  <k_make_array_u_1215@120>
                  </<k_make_array_u_1215@120:2>@122>
                </<k_make_array_u_1204@117:2>@124>
              </<make_array_1030@114:2>@126>
              <<<dotprod_1033@109:1>@112:1>@128>
                <f_dotprod_1519@130>
                </<f_dotprod_1519@130:5>@132>
              </<dotprod_1033@109:2>@134>
              <make_array_1030@136>
                <k_make_array_u_1204@139>
                  <fail_1528@142>
    inlined horn clauses:
      P[<fail_1528@142:0>](<fail_1528@142:0>:bool)|- bot
      
      P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
      ((0 <= <k_make_array_u_1204@139:0>) &&
       ((<k_make_array_u_1204@139:0> >= <k_make_array_u_1204@139:1>) && <fail_1528@142:0>))
      |- P[<fail_1528@142:0>](<fail_1528@142:0>:bool)
      
      P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1519@130:2>:int),
      P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var411:int),
      (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
      |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int)
      
      P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
      ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
       ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
      |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                 <<dotprod_1033@109:1>@112:0>:int,
                                                 <<<dotprod_1033@109:1>@112:1>@128:0>:int)
      
      P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
      (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
      |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
      
       ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
      |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                 <dotprod_1033@109:4>:int)
    begin ParamSubstInfer.infer(45090)[3]
      
    end ParamSubstInfer.infer(45090)[3] (0.166974 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(45092)[3]
      
    end RefTypeInfer.elim_coeffs(45092)[3] (0.000000 sec.)
    begin GenHcSolver.solve(45458)[3]
      Horn clauses:
        P[<fail_1528@142:0>](<fail_1528@142:0>:bool)|- bot
        
        P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
        ((0 <= <k_make_array_u_1204@139:0>) &&
         ((<k_make_array_u_1204@139:0> >= <k_make_array_u_1204@139:1>) && <fail_1528@142:0>))
        |- P[<fail_1528@142:0>](<fail_1528@142:0>:bool)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1519@130:2>:int),
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var411:int),
        (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int)
        
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                   <<dotprod_1033@109:1>@112:0>:int,
                                                   <<<dotprod_1033@109:1>@112:1>@128:0>:int)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
        ((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
        P[<fail_1528@142:0>](<fail_1528@142:0>:bool) = false
      upper bounds:
        P[<fail_1528@142:0>](var413:bool) = true
      begin GenHcSolver.classify_pids(47429)[4]
        output:
          [<fail_1528@142:0>]
      end GenHcSolver.classify_pids(47429)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(47432)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(47433)[5]
          begin InterpProver.interpolate_fresh(47434)[6]
            begin InterpProver.interpolate_log(47435)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(47436)[8]
                begin InterpProver.interpolate_simplify(47437)[9]
                  begin InterpProver.interpolate_quick(47450)[10]
                    
                  end InterpProver.interpolate_quick(47450)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(47454)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(47454)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(47437)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(47436)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(47435)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(47434)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(47433)[5] (0.000000 sec.)
        output:
          P[<fail_1528@142:0>](<fail_1528@142:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(47432)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
        ((<k_make_array_u_1204@139:0> >= <k_make_array_u_1204@139:1>) && (0 <= <k_make_array_u_1204@139:0>)) |- bot
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1519@130:2>:int),
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var411:int),
        (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int)
        
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                   <<dotprod_1033@109:1>@112:0>:int,
                                                   <<<dotprod_1033@109:1>@112:1>@128:0>:int)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
        ((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
      upper bounds:
        P[<<dotprod_1033@109:2>@134:0>](var414:int,var415:int) = ((var415 < var414) || (0 > var415))
      begin GenHcSolver.classify_pids(49973)[4]
        output:
          [<<dotprod_1033@109:2>@134:0>]
      end GenHcSolver.classify_pids(49973)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
      nub:(not ((<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>) || (0 > <<dotprod_1033@109:2>@134:0>)))
      begin ApronInterface.convex_hull_interpolate(49976)[4]
        lb:((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
        nub:(not ((<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>) || (0 > <<dotprod_1033@109:2>@134:0>)))
        lb':((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
        nub':(not ((<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>) || (0 > <<dotprod_1033@109:2>@134:0>)))
        begin InterpProver.interpolate(49977)[5]
          begin InterpProver.interpolate_fresh(49978)[6]
            begin InterpProver.interpolate_log(49979)[7]
              input1: ((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
              input2: (not
                         ((<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>) || (0 > <<dotprod_1033@109:2>@134:0>)))
              begin InterpProver.interpolate_check(49980)[8]
                begin InterpProver.interpolate_simplify(49981)[9]
                  begin InterpProver.interpolate_quick(50036)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(50045)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(50046)[12]
                        begin CsisatInterface.interpolate_csisat_log(50047)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0 & (1 + v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0) <= v_sep_dotprod_1033_sep_109_sep_0)
                          input2: (0 <= v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0 & v_sep_dotprod_1033_sep_109_sep_0 <= v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(50048)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(50048)[14] (0.000000 sec.)
                          output: (-2*v_sep_dotprod_1033_sep_109_sep_0 + 2*v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(50047)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_dotprod_1033_sep_109_sep_0 + 2*v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_dotprod_1033_sep_109_sep_0 + 2*v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(50046)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(50045)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(50036)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(49981)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(49980)[8] (0.002000 sec.)
              output: ((1 + <<dotprod_1033@109:2>@134:0>) <= <dotprod_1033@109:0>)
            end InterpProver.interpolate_log(49979)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(49978)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(49977)[5] (0.002000 sec.)
        output:
          P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
          ((1 + <<dotprod_1033@109:2>@134:0>) <= <dotprod_1033@109:0>)
      end ApronInterface.convex_hull_interpolate(49976)[4] (0.002000 sec.)
      Horn clauses:
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                   <<dotprod_1033@109:1>@112:0>:int,
                                                   <<<dotprod_1033@109:1>@112:1>@128:0>:int)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
      upper bounds:
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](var416:int,var417:int,var418:int) = true
      begin GenHcSolver.classify_pids(51575)[4]
        output:
          [<<<dotprod_1033@109:1>@112:1>@128:0>]
      end GenHcSolver.classify_pids(51575)[4] (0.000000 sec.)
      lb:((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
          ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(51578)[4]
        lb:((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
            ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        nub:false
        lb':((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
             ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        nub':false
        begin InterpProver.interpolate(51579)[5]
          begin InterpProver.interpolate_fresh(51580)[6]
            begin InterpProver.interpolate_log(51581)[7]
              input1: ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
                       ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
              input2: false
              begin InterpProver.interpolate_check(51582)[8]
                begin InterpProver.interpolate_simplify(51583)[9]
                  begin InterpProver.interpolate_quick(51638)[10]
                    
                  end InterpProver.interpolate_quick(51638)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(51583)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(51582)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(51581)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(51580)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(51579)[5] (0.000000 sec.)
        output:
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(51578)[4] (0.000000 sec.)
      Horn clauses:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
      upper bounds:
        P[<<dotprod_1033@109:1>@112:0>](var419:int,var420:int) = true
      begin GenHcSolver.classify_pids(52538)[4]
        output:
          [<<dotprod_1033@109:1>@112:0>]
      end GenHcSolver.classify_pids(52538)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(52541)[4]
        lb:((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        nub:false
        lb':((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        nub':false
        begin InterpProver.interpolate(52542)[5]
          begin InterpProver.interpolate_fresh(52543)[6]
            begin InterpProver.interpolate_log(52544)[7]
              input1: ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
              input2: false
              begin InterpProver.interpolate_check(52545)[8]
                begin InterpProver.interpolate_simplify(52546)[9]
                  begin InterpProver.interpolate_quick(52585)[10]
                    
                  end InterpProver.interpolate_quick(52585)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(52546)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(52545)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(52544)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(52543)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(52542)[5] (0.001000 sec.)
        output:
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) = true
      end ApronInterface.convex_hull_interpolate(52541)[4] (0.001000 sec.)
      Horn clauses:
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
      upper bounds:
        P[<dotprod_1033@109:4>](var421:int,var422:int,var423:int) = true
      begin GenHcSolver.classify_pids(53092)[4]
        output:
          [<dotprod_1033@109:4>]
      end GenHcSolver.classify_pids(53092)[4] (0.000000 sec.)
      lb:((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(53095)[4]
        lb:((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        nub:false
        lb':((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        nub':false
        begin InterpProver.interpolate(53096)[5]
          begin InterpProver.interpolate_fresh(53097)[6]
            begin InterpProver.interpolate_log(53098)[7]
              input1: ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
              input2: false
              begin InterpProver.interpolate_check(53099)[8]
                begin InterpProver.interpolate_simplify(53100)[9]
                  begin InterpProver.interpolate_quick(53127)[10]
                    
                  end InterpProver.interpolate_quick(53127)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(53100)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(53099)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(53098)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(53097)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(53096)[5] (0.001000 sec.)
        output:
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) = true
      end ApronInterface.convex_hull_interpolate(53095)[4] (0.001000 sec.)
      begin HcSolver.check_validity(53225)[4]
        input:
          P[<fail_1528@142:0>](<fail_1528@142:0>:bool)|- bot
          
          P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
          ((0 <= <k_make_array_u_1204@139:0>) &&
           ((<k_make_array_u_1204@139:0> >= <k_make_array_u_1204@139:1>) && <fail_1528@142:0>))
          |- P[<fail_1528@142:0>](<fail_1528@142:0>:bool)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1519@130:2>:int),
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var411:int),
          (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:2>@134:0>:int)
          
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
          ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
           ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
          |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                     <<dotprod_1033@109:1>@112:0>:int,
                                                     <<<dotprod_1033@109:1>@112:1>@128:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
          (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:1>@112:0>:int)
          
           ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
          |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                     <dotprod_1033@109:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(53225)[4] (0.002999 sec.)
      solution:
        P[<fail_1528@142:0>](<fail_1528@142:0>:bool) = false
        P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
        ((1 + <<dotprod_1033@109:2>@134:0>) <= <dotprod_1033@109:0>)
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        true
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) = true
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) = true
    end GenHcSolver.solve(45458)[3] (0.052992 sec.)
    begin GenHcSolver.solve(53659)[3]
      Horn clauses:
        P[<fail_1528@142:0>](<fail_1528@142:0>:bool)|- bot
        
        P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
        ((0 <= <k_make_array_u_1204@139:0>) &&
         ((<k_make_array_u_1204@139:0> >= <k_make_array_u_1204@139:1>) && <fail_1528@142:0>))
        |- P[<fail_1528@142:0>](<fail_1528@142:0>:bool)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1519@130:2>:int),
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var411:int),
        (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int)
        
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                   <<dotprod_1033@109:1>@112:0>:int,
                                                   <<<dotprod_1033@109:1>@112:1>@128:0>:int)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
        ((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
        P[<fail_1528@142:0>](<fail_1528@142:0>:bool) = false
      upper bounds:
        P[<fail_1528@142:0>](var425:bool) = true
      begin GenHcSolver.classify_pids(55630)[4]
        output:
          [<fail_1528@142:0>]
      end GenHcSolver.classify_pids(55630)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(55633)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(55636)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(55636)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(55641)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(55641)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(55644)[5]
          begin InterpProver.interpolate_fresh(55645)[6]
            begin InterpProver.interpolate_log(55646)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(55647)[8]
                begin InterpProver.interpolate_simplify(55648)[9]
                  begin InterpProver.interpolate_quick(55663)[10]
                    
                  end InterpProver.interpolate_quick(55663)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(55667)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(55667)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(55648)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(55647)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(55646)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(55645)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(55644)[5] (0.001000 sec.)
        output:
          P[<fail_1528@142:0>](<fail_1528@142:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(55633)[4] (0.002000 sec.)
      Horn clauses:
        P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
        ((<k_make_array_u_1204@139:0> >= <k_make_array_u_1204@139:1>) && (0 <= <k_make_array_u_1204@139:0>)) |- bot
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1519@130:2>:int),
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var411:int),
        (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int)
        
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                   <<dotprod_1033@109:1>@112:0>:int,
                                                   <<<dotprod_1033@109:1>@112:1>@128:0>:int)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
        ((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
      upper bounds:
        P[<<dotprod_1033@109:2>@134:0>](var426:int,var427:int) = ((var427 < var426) || (0 > var427))
      begin GenHcSolver.classify_pids(58193)[4]
        output:
          [<<dotprod_1033@109:2>@134:0>]
      end GenHcSolver.classify_pids(58193)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
      nub:(not ((<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>) || (0 > <<dotprod_1033@109:2>@134:0>)))
      begin ApronInterface.convex_hull_interpolate(58196)[4]
        lb:((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
        nub:(not ((<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>) || (0 > <<dotprod_1033@109:2>@134:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(58208)[5]
          ts: ((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(58208)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(58228)[5]
          ts: ((<<dotprod_1033@109:2>@134:0> >= <dotprod_1033@109:0>) && (0 <= <<dotprod_1033@109:2>@134:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(58228)[5] (0.000000 sec.)
        lb':((<<dotprod_1033@109:2>@134:0> = 0) && ((-1 + <dotprod_1033@109:0>) >= 0))
        nub':(((<<dotprod_1033@109:2>@134:0> + (-1 * <dotprod_1033@109:0>)) >= 0) &&
              (<<dotprod_1033@109:2>@134:0> >= 0))
        begin InterpProver.interpolate(58234)[5]
          begin InterpProver.interpolate_fresh(58235)[6]
            begin InterpProver.interpolate_log(58236)[7]
              input1: ((<<dotprod_1033@109:2>@134:0> = 0) && ((-1 + <dotprod_1033@109:0>) >= 0))
              input2: (((<<dotprod_1033@109:2>@134:0> + (-1 * <dotprod_1033@109:0>)) >= 0) &&
                       (<<dotprod_1033@109:2>@134:0> >= 0))
              begin InterpProver.interpolate_check(58237)[8]
                begin InterpProver.interpolate_simplify(58238)[9]
                  begin InterpProver.interpolate_quick(58295)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(58304)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(58305)[12]
                        begin CsisatInterface.interpolate_csisat_log(58306)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0 & 1 <= v_sep_dotprod_1033_sep_109_sep_0)
                          input2: (0 <= v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0 & v_sep_dotprod_1033_sep_109_sep_0 <= v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(58307)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(58307)[14] (0.000000 sec.)
                          output: (-2*v_sep_dotprod_1033_sep_109_sep_0 + 2*v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(58306)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_dotprod_1033_sep_109_sep_0 + 2*v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_dotprod_1033_sep_109_sep_0 + 2*v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(58305)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(58304)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(58295)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(58238)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(58237)[8] (0.002000 sec.)
              output: ((1 + <<dotprod_1033@109:2>@134:0>) <= <dotprod_1033@109:0>)
            end InterpProver.interpolate_log(58236)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(58235)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(58234)[5] (0.002000 sec.)
        output:
          P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
          ((1 + <<dotprod_1033@109:2>@134:0>) <= <dotprod_1033@109:0>)
      end ApronInterface.convex_hull_interpolate(58196)[4] (0.002000 sec.)
      Horn clauses:
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                   <<dotprod_1033@109:1>@112:0>:int,
                                                   <<<dotprod_1033@109:1>@112:1>@128:0>:int)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
      upper bounds:
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](var428:int,var429:int,var430:int) = true
      begin GenHcSolver.classify_pids(59834)[4]
        output:
          [<<<dotprod_1033@109:1>@112:1>@128:0>]
      end GenHcSolver.classify_pids(59834)[4] (0.000000 sec.)
      lb:((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
          ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(59837)[4]
        lb:((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
            ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(59857)[5]
          ts: ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
               ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(59857)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(59866)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(59866)[5] (0.001000 sec.)
        lb':((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
             ((<<dotprod_1033@109:1>@112:0> = 0) && ((-1 + <dotprod_1033@109:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(59869)[5]
          begin InterpProver.interpolate_fresh(59870)[6]
            begin InterpProver.interpolate_log(59871)[7]
              input1: ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
                       ((<<dotprod_1033@109:1>@112:0> = 0) && ((-1 + <dotprod_1033@109:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(59872)[8]
                begin InterpProver.interpolate_simplify(59873)[9]
                  begin InterpProver.interpolate_quick(59931)[10]
                    
                  end InterpProver.interpolate_quick(59931)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(59873)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(59872)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(59871)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(59870)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(59869)[5] (0.000000 sec.)
        output:
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(59837)[4] (0.001000 sec.)
      Horn clauses:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
      upper bounds:
        P[<<dotprod_1033@109:1>@112:0>](var431:int,var432:int) = true
      begin GenHcSolver.classify_pids(60833)[4]
        output:
          [<<dotprod_1033@109:1>@112:0>]
      end GenHcSolver.classify_pids(60833)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(60836)[4]
        lb:((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(60848)[5]
          ts: ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(60848)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(60856)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(60856)[5] (0.000000 sec.)
        lb':((<<dotprod_1033@109:1>@112:0> = 0) && ((-1 + <dotprod_1033@109:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(60859)[5]
          begin InterpProver.interpolate_fresh(60860)[6]
            begin InterpProver.interpolate_log(60861)[7]
              input1: ((<<dotprod_1033@109:1>@112:0> = 0) && ((-1 + <dotprod_1033@109:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(60862)[8]
                begin InterpProver.interpolate_simplify(60863)[9]
                  begin InterpProver.interpolate_quick(60903)[10]
                    
                  end InterpProver.interpolate_quick(60903)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(60863)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(60862)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(60861)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(60860)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(60859)[5] (0.000000 sec.)
        output:
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) = true
      end ApronInterface.convex_hull_interpolate(60836)[4] (0.001000 sec.)
      Horn clauses:
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
      upper bounds:
        P[<dotprod_1033@109:4>](var433:int,var434:int,var435:int) = true
      begin GenHcSolver.classify_pids(61412)[4]
        output:
          [<dotprod_1033@109:4>]
      end GenHcSolver.classify_pids(61412)[4] (0.000000 sec.)
      lb:((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(61415)[4]
        lb:((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(61427)[5]
          ts: ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(61427)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(61435)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(61435)[5] (0.000000 sec.)
        lb':((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:3> = 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(61438)[5]
          begin InterpProver.interpolate_fresh(61439)[6]
            begin InterpProver.interpolate_log(61440)[7]
              input1: ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:3> = 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(61441)[8]
                begin InterpProver.interpolate_simplify(61442)[9]
                  begin InterpProver.interpolate_quick(61470)[10]
                    
                  end InterpProver.interpolate_quick(61470)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(61442)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(61441)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(61440)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(61439)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(61438)[5] (0.001000 sec.)
        output:
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) = true
      end ApronInterface.convex_hull_interpolate(61415)[4] (0.001000 sec.)
      begin HcSolver.check_validity(61570)[4]
        input:
          P[<fail_1528@142:0>](<fail_1528@142:0>:bool)|- bot
          
          P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
          ((0 <= <k_make_array_u_1204@139:0>) &&
           ((<k_make_array_u_1204@139:0> >= <k_make_array_u_1204@139:1>) && <fail_1528@142:0>))
          |- P[<fail_1528@142:0>](<fail_1528@142:0>:bool)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1519@130:2>:int),
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var411:int),
          (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:2>@134:0>:int)
          
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
          ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
           ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
          |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                     <<dotprod_1033@109:1>@112:0>:int,
                                                     <<<dotprod_1033@109:1>@112:1>@128:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
          (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:1>@112:0>:int)
          
           ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
          |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                     <dotprod_1033@109:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(61570)[4] (0.002999 sec.)
      solution:
        P[<fail_1528@142:0>](<fail_1528@142:0>:bool) = false
        P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
        ((1 + <<dotprod_1033@109:2>@134:0>) <= <dotprod_1033@109:0>)
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        true
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) = true
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) = true
    end GenHcSolver.solve(53659)[3] (0.051992 sec.)
    begin YhornInterface.solve(62004)[3]
      begin HcSolver.solve_ub(62005)[4]
        encoded:
          P[<fail_1528@142:0>](<fail_1528@142:0>:int)|- bot
          
          P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
          ((0 <= <k_make_array_u_1204@139:0>) &&
           ((<k_make_array_u_1204@139:0> >= <k_make_array_u_1204@139:1>) && (<fail_1528@142:0> = 1)))
          |- P[<fail_1528@142:0>](<fail_1528@142:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1519@130:2>:int),
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var411:int),
          (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:2>@134:0>:int)
          
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
          ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
           ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
          |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                     <<dotprod_1033@109:1>@112:0>:int,
                                                     <<<dotprod_1033@109:1>@112:1>@128:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
          (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:1>@112:0>:int)
          
           ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
          |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                     <dotprod_1033@109:4>:int)
        input to Yhorn:
          P[<fail_1528@142:0>](<fail_1528@142:0>:int)|- bot
          
          P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
          ((<k_make_array_u_1204@139:0> >= <k_make_array_u_1204@139:1>) &&
           ((0 <= <k_make_array_u_1204@139:0>) && (<fail_1528@142:0> = 1)))
          |- P[<fail_1528@142:0>](<fail_1528@142:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1519@130:2>:int),
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var411:int),
          (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:2>@134:0>:int)
          
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
          ((<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>) &&
           ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<<dotprod_1033@109:1>@112:1>@128:0> = 0)))
          |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                     <<dotprod_1033@109:1>@112:0>:int,
                                                     <<<dotprod_1033@109:1>@112:1>@128:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
          (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:1>@112:0>:int)
          
           ((<dotprod_1033@109:4> = <dotprod_1033@109:3>) && (<dotprod_1033@109:4> = 0))
          |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                     <dotprod_1033@109:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1528_sep_142_sep_0($251)) -> 1=0.
(($251-1=0) & (-$252<=0) & ($252-$253>=0)) & (v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0($253,$252)) -> v_sep_fail_1528_sep_142_sep_0($251).
($254-$255<0) & (v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0($255,$254,$256)) & (v_sep_dotprod_1033_sep_109_sep_4($255,$254,$257)) -> v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0($255,$254).
(($258=0) & (-$259<=0) & (-$255+$259<0)) & (v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0($255,$259)) -> v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0($255,$259,$258).
(-$255+$259<0) & (v_sep_dotprod_1033_sep_109_sep_4($255,$259,$260)) -> v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0($255,$259).
($260=0) & ($260-$261=0) -> v_sep_dotprod_1033_sep_109_sep_4($255,$261,$260).


v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1528_sep_142_sep_0: X
.......
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1528_sep_142_sep_0: X
...
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1528_sep_142_sep_0: X
.....
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1528_sep_142_sep_0: X
......
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1528_sep_142_sep_0: X
.......(0=0) & (v_sep_fail_1528_sep_142_sep_0($251)) -> 1=0.
(($251-1=0) & (-$252<=0) & ($252-$253>=0)) & (v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0($253,$252)) -> v_sep_fail_1528_sep_142_sep_0($251).
($254-$255<0) & (v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0($255,$254,$256)) & (v_sep_dotprod_1033_sep_109_sep_4($255,$254,$257)) -> v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0($255,$254).
(($258=0) & (-$259<=0) & (-$255+$259<0)) & (v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0($255,$259)) -> v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0($255,$259,$258).
(-$255+$259<0) & (v_sep_dotprod_1033_sep_109_sep_4($255,$259,$260)) -> v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0($255,$259).
($260=0) & ($260-$261=0) -> v_sep_dotprod_1033_sep_109_sep_4($255,$261,$260).

        solution:
          P[<<dotprod_1033@109:1>@112:0>]($284:int,$286:int) = true
          P[<<<dotprod_1033@109:1>@112:1>@128:0>]($270:int,$272:int,$274:int) = true
          P[<<dotprod_1033@109:2>@134:0>]($265:int,$267:int) = ((1 + $267) <= $265)
          P[<dotprod_1033@109:4>]($277:int,$279:int,$281:int) = true
          P[<fail_1528@142:0>]($262:bool) = false
        
      end HcSolver.solve_ub(62005)[4] (0.025996 sec.)
      begin HcSolver.check_validity(62264)[4]
        input:
          P[<fail_1528@142:0>](<fail_1528@142:0>:bool)|- bot
          
          P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1204@139:1>:int,<k_make_array_u_1204@139:0>:int),
          ((0 <= <k_make_array_u_1204@139:0>) &&
           ((<k_make_array_u_1204@139:0> >= <k_make_array_u_1204@139:1>) && <fail_1528@142:0>))
          |- P[<fail_1528@142:0>](<fail_1528@142:0>:bool)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1519@130:2>:int),
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var411:int),
          (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:2>@134:0>:int)
          
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
          ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
           ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
          |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                     <<dotprod_1033@109:1>@112:0>:int,
                                                     <<<dotprod_1033@109:1>@112:1>@128:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
          (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:1>@112:0>:int)
          
           ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
          |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                     <dotprod_1033@109:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(62264)[4] (0.002000 sec.)
      solution:
        P[<<dotprod_1033@109:1>@112:0>]($284:int,$286:int) = true
        P[<<<dotprod_1033@109:1>@112:1>@128:0>]($270:int,$272:int,$274:int) = true
        P[<<dotprod_1033@109:2>@134:0>]($265:int,$267:int) = ((1 + $267) <= $265)
        P[<dotprod_1033@109:4>]($277:int,$279:int,$281:int) = true
        P[<fail_1528@142:0>]($262:bool) = false
    end YhornInterface.solve(62004)[3] (0.027996 sec.)
    
  end RefTypeInfer.infer_etrs(42261)[2] (0.315951 sec.)
  refinement types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int -> (v3:int -> X) -> X) ->
                  (v6:{v6:int | ((1 + v6) <= v1)} -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1215: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1519: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1204: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1528: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1527: var459:int -> var458:int -> var457:unit -> X
    f_dotprod_1520: var475:int ->
                    var474:int ->
                    var473:int ->
                    var472:int ->
                    (var471:int -> X) ->
                    (var469:int -> (var468:int -> X) -> X) -> (var465:int -> (var464:int -> X) -> X) -> var461:int -> X
    f_dotprod_1521: var492:int ->
                    var491:int ->
                    var490:int ->
                    var489:int ->
                    var488:int ->
                    (var487:int -> X) ->
                    (var485:int -> (var484:int -> X) -> X) -> (var481:int -> (var480:int -> X) -> X) -> var477:int -> X
    f_dotprod_1522: var510:int ->
                    var509:int ->
                    var508:int ->
                    var507:int ->
                    var506:int ->
                    var505:int ->
                    (var504:int -> X) ->
                    (var502:int -> (var501:int -> X) -> X) -> (var498:int -> (var497:int -> X) -> X) -> var494:int -> X
    f_dotprod_1523: var529:int ->
                    var528:int ->
                    var527:int ->
                    var526:int ->
                    var525:int ->
                    var524:int ->
                    var523:int ->
                    (var522:int -> X) ->
                    (var520:int -> (var519:int -> X) -> X) -> (var516:int -> (var515:int -> X) -> X) -> var512:int -> X
    f_main_1524: var536:unit -> var535:int -> var534:int -> (var533:unit -> X) -> var531:int -> X
  abstraction types:
    main_1518: X
    f_1525: v1:int -> X
    f_1526: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:unit -> v3:int -> (v4:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int -> (v3:int -> X) -> X) ->
                  (v6:int[v6 -> ((1 + v6) <= v1)] -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: var537:int -> var538:int -> (var539:int -> X) -> X
    k_make_array_u_1204: var542:int -> var543:int -> (var544:int -> X) -> var546:bool -> X
    k_make_array_u_1215: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1519: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    fail_1528: v1:bool -> (v2:unit -> X) -> X
    f_1527: var459:int -> var458:int -> var457:unit -> X
    f_dotprod_1520: var475:int ->
                    var474:int ->
                    var473:int ->
                    var472:int ->
                    (var471:int -> X) ->
                    (var469:int -> (var468:int -> X) -> X) -> (var465:int -> (var464:int -> X) -> X) -> var461:int -> X
    f_dotprod_1521: var492:int ->
                    var491:int ->
                    var490:int ->
                    var489:int ->
                    var488:int ->
                    (var487:int -> X) ->
                    (var485:int -> (var484:int -> X) -> X) -> (var481:int -> (var480:int -> X) -> X) -> var477:int -> X
    f_dotprod_1522: var510:int ->
                    var509:int ->
                    var508:int ->
                    var507:int ->
                    var506:int ->
                    var505:int ->
                    (var504:int -> X) ->
                    (var502:int -> (var501:int -> X) -> X) -> (var498:int -> (var497:int -> X) -> X) -> var494:int -> X
    f_dotprod_1523: var529:int ->
                    var528:int ->
                    var527:int ->
                    var526:int ->
                    var525:int ->
                    var524:int ->
                    var523:int ->
                    (var522:int -> X) ->
                    (var520:int -> (var519:int -> X) -> X) -> (var516:int -> (var515:int -> X) -> X) -> var512:int -> X
    f_main_1524: var536:unit -> var535:int -> var534:int -> (var533:unit -> X) -> var531:int -> X
  
end AbsTypeInfer.refine(42260)[1] (0.322950 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1518
  main_1518 -> (rand_int f_1525)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      i_1037 >= n_1034) -> (k_dotprod_1266 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1266 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036))
  f_1525 x_1472 -> (rand_int (f_1526 x_1472))
  f_1526 x_1472 x_1488 -> (main_1039 x_1472 () x_1488 (f_1527 x_1472 x_1488))
  f_1527 x_1472 x_1488 x_1469 -> end
  f_dotprod_1519 i_1037 n_1034 sum_1038 k_dotprod_1266 v1_1035 v2_1036 x_1296 ->
      (v2_1036 i_1037 (f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1520 i_1037 n_1034 sum_1038 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1292 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1296) + x_1292)
        (f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1521 i_1037 n_1034 sum_1038 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1269 ->
      (v1_1035 i_1037 (f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1522 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 k_dotprod_1266 v1_1035 v2_1036 x_1350 ->
      (v2_1036 i_1037
        (f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036))
  f_dotprod_1523 i_1037 n_1034 sum_1038 x_1269 x_1292 x_1296 x_1350 k_dotprod_1266 v1_1035 v2_1036 x_1346 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) ((sum_1038 + x_1350) + x_1346) k_dotprod_1266)
  f_main_1524 m_1041 n_1040 z_1042 k_main_1401 x_1436 -> (k_main_1401 ())
  fail_1528 b k -> {fail} => (k ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when b_1216 ->
      (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 ())
  k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 b_1216 when (not b_1216) ->
      (fail_1528 true (k_make_array_u_1215 i_1032 n_1031 k_make_array_1198))
  k_make_array_u_1215 i_1032 n_1031 k_make_array_1198 x_1201 -> (k_make_array_1198 0)
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (z_1042 = 0) ->
      (dotprod_1033 n_1040 (make_array_1030 n_1040) (make_array_1030 n_1040) z_1042 z_1042
        (f_main_1524 m_1041 n_1040 z_1042 k_main_1401))
  main_1039 n_1040 m_1041 z_1042 k_main_1401 when (not (z_1042 = 0)) -> (k_main_1401 ())
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (0 <= i_1032) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1198 when (not (0 <= i_1032)) ->
      (k_make_array_u_1204 i_1032 n_1031 k_make_array_1198 false)
Types:
  main_1518 : X
  dotprod_1033 : (x_1:int ->
                  (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                  (x_9:int[x_1 >= x_9 + 1; x_9 >= 0] -> (int -> X) -> X) ->
                  x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1528 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  dotprod: (x_1:int ->
                (({x_9:int | x_9 >= 0 && x_1 >= x_9 + 1} -> int) ->
                     (({x_7:int | x_7 >= 0 && x_1 >= x_7 + 1} -> int) -> (x_4:int -> ({x_5:int | x_4 >= 0} -> int)))))

cycles: 4
total: 1.532 sec
  abst: 0.053 sec
  mc: 0.064 sec
  refine: 0.990 sec
    exparam: 0.436 sec
