MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi nth.ml

parsed::
 let rec nth_1030 n_1031 xs_1032 =
   (match xs_1032 with
      | [] -> let u_1039 = {fail} () 
              in
                _|_
      | x_1033::xs'_1034 -> if n_1031 = 0 then
                              x_1033
                            else
                              nth_1030 (n_1031 - 1) xs'_1034) 
 in
 let rec make_list_1035 n_1036 = if n_1036 < 0 then
                                   []
                                 else
                                   n_1036::make_list_1035 (n_1036 - 1) 
 in
 let main_1037 n_1038 = if n_1038 > 0 then
                          nth_1030 (n_1038 - 1) (make_list_1035 n_1038)
                        else
                          0 
 in
   ()

set_target::
 let rec nth_1030 n_1031 xs_1032 =
   (match xs_1032 with
      | [] -> let u_1039 = {fail} () 
              in
                _|_
      | x_1033::xs'_1034 -> if n_1031 = 0 then
                              x_1033
                            else
                              nth_1030 (n_1031 - 1) xs'_1034) 
 in
 let rec make_list_1035 n_1036 = if n_1036 < 0 then
                                   []
                                 else
                                   n_1036::make_list_1035 (n_1036 - 1) 
 in
 let main_1037 n_1038 = if n_1038 > 0 then
                          nth_1030 (n_1038 - 1) (make_list_1035 n_1038)
                        else
                          0 
 in
 let main_1065 = let arg1_1064 = rand_int () 
                 in
                   main_1037 arg1_1064 
 in
   ()

abst_list::
 let rec nth_1030 (n_1031:int) (xs_1032:(int * (int -> int))) =
   if fst xs_1032 = 0 then
     let u_1039 = {fail} () 
     in
       _|_
   else
     if 1 <= fst xs_1032 then
       let xs'_1034 = (fst xs_1032 - 1, fun x_1070 -> (snd xs_1032) (x_1070 + 1)) 
       in
       let x_1033 = (snd xs_1032) 0 
       in
         if n_1031 = 0 then
           x_1033
         else
           nth_1030 (n_1031 - 1) xs'_1034
     else
       _|_ 
 in
 let rec make_list_1035 (n_1036:int) =
   if n_1036 < 0 then
     (0, fun x_1103 -> _|_)
   else
     let cons_make_list_1099 (x_1097:int) (xs_1098:(int * (int -> int))) =
       (fst xs_1098 + 1, fun i_1096 -> (if i_1096 = 0 then
                                          x_1097
                                        else
                                          (snd xs_1098) (i_1096 - 1))) 
     in
       cons_make_list_1099 n_1036 (make_list_1035 (n_1036 - 1)) 
 in
 let main_1037 (n_1038:int) = if n_1038 > 0 then
                                nth_1030 (n_1038 - 1) (make_list_1035 n_1038)
                              else
                                0 
 in
 let main_1065 = let arg1_1064 = rand_int () 
                 in
                   main_1037 arg1_1064 
 in
   ()

CPS::
 let rec nth_1030 (n_1031:int) (xs_1032:(int * (int -> ((int -> X) -> X)))) (k_nth_1156:(
   int -> X)) =
   if fst xs_1032 = 0 then
     {|fail|} () (fun x_1162 -> _|_)
   else
     if 1 <= fst xs_1032 then
       (snd xs_1032) 0
         (fun x_1215 ->
            (if n_1031 = 0 then
               k_nth_1156 x_1215
             else
               nth_1030 (n_1031 - 1)
                 (fst xs_1032 - 1, fun x_1070 -> fun k_nth_xs'_1201 -> (snd xs_1032) (x_1070 + 1) k_nth_xs'_1201)
                 k_nth_1156))
     else
       _|_ 
 in
 let rec make_list_1035 (n_1036:int) (k_make_list_1288:((int * (int -> ((int -> X) -> X))) -> X)) =
   if n_1036 < 0 then
     k_make_list_1288 (0, fun x_1103 -> fun k_make_list_1300 -> _|_)
   else
     let cons_make_list_1099
       (x_1097:int) (xs_1098:(int * (int -> ((int -> X) -> X)))) (k_make_list_cons_make_list_1347:(
       (int * (int -> ((int -> X) -> X))) -> X)) =
       k_make_list_cons_make_list_1347
         (fst xs_1098 + 1,
         fun i_1096 ->
           fun k_make_list_cons_make_list_1362 ->
             (if i_1096 = 0 then
                k_make_list_cons_make_list_1362 x_1097
              else
                (snd xs_1098) (i_1096 - 1) k_make_list_cons_make_list_1362)) 
     in
       make_list_1035 (n_1036 - 1) (fun x_1425 -> cons_make_list_1099 n_1036 x_1425 k_make_list_1288) 
 in
 let main_1037 (n_1038:int) (k_main_1446:(int -> X)) =
   if n_1038 > 0 then
     make_list_1035 n_1038 (fun x_1485 -> nth_1030 (n_1038 - 1) x_1485 k_main_1446)
   else
     k_main_1446 0 
 in
   rand_int_cps () (fun x_1495 -> main_1037 x_1495 (fun x_1492 -> end))

remove_pair::
 let rec nth_1030 (n_1031:int) (xs1_1032:int) (xs2_1032:(int -> ((int -> X) -> X))) (k_nth_1156:(
   int -> X)) =
   if xs1_1032 = 0 then
     {|fail|} () (fun x_1162 -> _|_)
   else
     if 1 <= xs1_1032 then
       xs2_1032 0
         (fun x_1215 ->
            (if n_1031 = 0 then
               k_nth_1156 x_1215
             else
               nth_1030 (n_1031 - 1) (xs1_1032 - 1)
                 (fun x_1070 -> fun k_nth_xs'_1201 -> xs2_1032 (x_1070 + 1) k_nth_xs'_1201) k_nth_1156))
     else
       _|_ 
 in
 let rec make_list_1035 (n_1036:int) (k_make_list_1288:(int -> ((int -> ((int -> X) -> X)) -> X))) =
   if n_1036 < 0 then
     k_make_list_1288 0 (fun x_1103 -> fun k_make_list_1300 -> _|_)
   else
     let cons_make_list_1099
       (x_1097:int) (xs1_1098:int) (xs2_1098:(int -> ((int -> X) -> X))) (k_make_list_cons_make_list_1347:(
       int -> ((int -> ((int -> X) -> X)) -> X))) =
       k_make_list_cons_make_list_1347 (xs1_1098 + 1)
         (fun i_1096 ->
            fun k_make_list_cons_make_list_1362 ->
              (if i_1096 = 0 then
                 k_make_list_cons_make_list_1362 x_1097
               else
                 xs2_1098 (i_1096 - 1) k_make_list_cons_make_list_1362)) 
     in
       make_list_1035 (n_1036 - 1)
         (fun x1_1425 -> fun x2_1425 -> cons_make_list_1099 n_1036 x1_1425 x2_1425 k_make_list_1288) 
 in
 let main_1037 (n_1038:int) (k_main_1446:(int -> X)) =
   if n_1038 > 0 then
     make_list_1035 n_1038 (fun x1_1485 -> fun x2_1485 -> nth_1030 (n_1038 - 1) x1_1485 x2_1485 k_main_1446)
   else
     k_main_1446 0 
 in
   rand_int_cps () (fun x_1495 -> main_1037 x_1495 (fun x_1492 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1553
  main_1553 -> (rand_int f_1561)
  br_nth_1563 b_1564 n_1031 xs1_1032 xs2_1032 k_nth_1156 when b_1564 ->
      (xs2_1032 0 (f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032))
  br_nth_1563 b_1564 n_1031 xs1_1032 xs2_1032 k_nth_1156 when (not b_1564) -> _|_
  cons_make_list_1099 n_1036 x_1097 xs1_1098 xs2_1098 k_make_list_cons_make_list_1347 ->
      (k_make_list_cons_make_list_1347 (xs1_1098 + 1) (f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098))
  f_1561 x_1495 -> (main_1037 x_1495 (f_1562 x_1495))
  f_1562 x_1495 x_1492 -> end
  f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098 i_1096 k_make_list_cons_make_list_1362 when (
      i_1096 = 0) -> (k_make_list_cons_make_list_1362 x_1097)
  f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098 i_1096 k_make_list_cons_make_list_1362 when (
      not (i_1096 = 0)) -> (xs2_1098 (i_1096 - 1) k_make_list_cons_make_list_1362)
  f_main_1560 n_1038 k_main_1446 x1_1485 x2_1485 -> (nth_1030 (n_1038 - 1) x1_1485 x2_1485 k_main_1446)
  f_make_list_1557 n_1036 x_1103 k_make_list_1300 -> _|_
  f_make_list_1559 n_1036 k_make_list_1288 x1_1425 x2_1425 ->
      (cons_make_list_1099 n_1036 n_1036 x1_1425 x2_1425 k_make_list_1288)
  f_nth_1554 n_1031 xs1_1032 x_1162 -> _|_
  f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032 x_1215 when (n_1031 = 0) -> (k_nth_1156 x_1215)
  f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032 x_1215 when (not (n_1031 = 0)) ->
      (nth_1030 (n_1031 - 1) (xs1_1032 - 1) (f_nth_1556 n_1031 x_1215 xs1_1032 xs2_1032) k_nth_1156)
  f_nth_1556 n_1031 x_1215 xs1_1032 xs2_1032 x_1070 k_nth_xs'_1201 -> (xs2_1032 (x_1070 + 1) k_nth_xs'_1201)
  fail_1565 b k -> {fail} => (k ())
  main_1037 n_1038 k_main_1446 when (n_1038 > 0) -> (make_list_1035 n_1038 (f_main_1560 n_1038 k_main_1446))
  main_1037 n_1038 k_main_1446 when (not (n_1038 > 0)) -> (k_main_1446 0)
  make_list_1035 n_1036 k_make_list_1288 when (n_1036 < 0) -> (k_make_list_1288 0 (f_make_list_1557 n_1036))
  make_list_1035 n_1036 k_make_list_1288 when (not (n_1036 < 0)) ->
      (make_list_1035 (n_1036 - 1) (f_make_list_1559 n_1036 k_make_list_1288))
  nth_1030 n_1031 xs1_1032 xs2_1032 k_nth_1156 when (xs1_1032 = 0) -> (fail_1565 true (f_nth_1554 n_1031 xs1_1032))
  nth_1030 n_1031 xs1_1032 xs2_1032 k_nth_1156 when (not (xs1_1032 = 0)) ->
      (br_nth_1563 (1 <= xs1_1032) n_1031 xs1_1032 xs2_1032 k_nth_1156)
Types:
  main_1553 : X
  fail_1565 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1035 : (int -> (int -> (int -> (int -> X) -> X) -> X) -> X)
  nth_1030 : (int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1553 ... --> 
  f_1561 ... --> 
  main_1037 [1/2] ... --> 
  make_list_1035 [1/2] ... --> 
  f_main_1560 ... --> 
  nth_1030 [1/2] ... --> 
  fail_1565 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(163)[1]
  program:
    main_1553  | true = ((Random.int 0) f_1561)
    br_nth_1563 b_1564 n_1031 xs1_1032 xs2_1032 k_nth_1156 | b_1564 = (
    xs2_1032 0
             (f_nth_1555 n_1031
                         xs1_1032
                         k_nth_1156
                         xs2_1032))
    br_nth_1563 b_1564 n_1031 xs1_1032 xs2_1032 k_nth_1156 | (not b_1564) = bot
    cons_make_list_1099 n_1036 x_1097 xs1_1098 xs2_1098 k_make_list_cons_make_list_1347 | true = (
    k_make_list_cons_make_list_1347 (xs1_1098 + 1)
                                    (f_cons_make_list_1558 n_1036
                                                           x_1097
                                                           xs1_1098
                                                           xs2_1098))
    f_1561 x_1495 | true = (main_1037 x_1495
                                      (f_1562 x_1495))
    f_1562 x_1495 x_1492 | true = end
    f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098 i_1096 k_make_list_cons_make_list_1362 | (
    i_1096 = 0) = (k_make_list_cons_make_list_1362 x_1097)
    f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098 i_1096 k_make_list_cons_make_list_1362 | (
    not (i_1096 = 0)) = (xs2_1098 (i_1096 - 1)
                                  k_make_list_cons_make_list_1362)
    f_main_1560 n_1038 k_main_1446 x1_1485 x2_1485 | true = (nth_1030 (
                                                                    n_1038 - 1)
                                                                    x1_1485
                                                                    x2_1485
                                                                    k_main_1446)
    f_make_list_1557 n_1036 x_1103 k_make_list_1300 | true = bot
    f_make_list_1559 n_1036 k_make_list_1288 x1_1425 x2_1425 | true = (
    cons_make_list_1099 n_1036
                        n_1036
                        x1_1425
                        x2_1425
                        k_make_list_1288)
    f_nth_1554 n_1031 xs1_1032 x_1162 | true = bot
    f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032 x_1215 | (n_1031 = 0) = (
    k_nth_1156 x_1215)
    f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032 x_1215 | (not (n_1031 = 0)) = (
    nth_1030 (n_1031 - 1)
             (xs1_1032 - 1)
             (f_nth_1556 n_1031
                         x_1215
                         xs1_1032
                         xs2_1032)
             k_nth_1156)
    f_nth_1556 n_1031 x_1215 xs1_1032 xs2_1032 x_1070 k_nth_xs'_1201 | true = (
    xs2_1032 (x_1070 + 1)
             k_nth_xs'_1201)
    fail_1565 b k | true = (fail ())
    main_1037 n_1038 k_main_1446 | (n_1038 > 0) = (make_list_1035 n_1038
                                                                  (f_main_1560 n_1038
                                                                    k_main_1446))
    main_1037 n_1038 k_main_1446 | (not (n_1038 > 0)) = (k_main_1446 0)
    make_list_1035 n_1036 k_make_list_1288 | (n_1036 < 0) = (k_make_list_1288 0
                                                                    (f_make_list_1557 n_1036))
    make_list_1035 n_1036 k_make_list_1288 | (not (n_1036 < 0)) = (make_list_1035
                                                                    (
                                                                    n_1036 - 1)
                                                                    (
                                                                    f_make_list_1559 n_1036
                                                                    k_make_list_1288))
    nth_1030 n_1031 xs1_1032 xs2_1032 k_nth_1156 | (xs1_1032 = 0) = (
    fail_1565 true
              (f_nth_1554 n_1031
                          xs1_1032))
    nth_1030 n_1031 xs1_1032 xs2_1032 k_nth_1156 | (not (xs1_1032 = 0)) = (
    br_nth_1563 (1 <= xs1_1032)
                n_1031
                xs1_1032
                xs2_1032
                k_nth_1156)
    main_1553:X
    br_nth_1563:bool -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    cons_make_list_1099:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1561:int -> X
    f_1562:int -> int -> X
    f_cons_make_list_1558:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_main_1560:int -> (int -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_make_list_1557:int -> int -> (int -> X) -> X
    f_make_list_1559:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_nth_1554:int -> int -> unit -> X
    f_nth_1555:int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_nth_1556:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    fail_1565:bool -> (unit -> X) -> X
    main_1037:int -> (int -> X) -> X
    make_list_1035:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
    nth_1030:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
  inlined functions: br_nth_1563,cons_make_list_1099,f_1561,f_1562,f_cons_make_list_1558,f_main_1560,f_make_list_1557,f_make_list_1559,f_nth_1554,f_nth_1555,f_nth_1556,main_1037
  counterexample: 0:0:0:0:0:0:0
  error traces:
    [true.nop(<f_1561@4:0> = var2)
     [true.(<main_1037@6:0> = <f_1561@4:0>)
      [(<main_1037@6:0> > 0).(<make_list_1035@9:0> = <main_1037@6:0>)
       [(<make_list_1035@9:0> < 0).(<<make_list_1035@9:1>@12:0> = 0)
        [true.((<f_main_1560@14:0> = <main_1037@6:0>) && (<f_main_1560@14:2> = <<make_list_1035@9:1>@12:0>))
         [true.((<nth_1030@16:0> = (<f_main_1560@14:0> - 1)) && (<nth_1030@16:1> = <f_main_1560@14:2>))
          [(<nth_1030@16:1> = 0).(<fail_1565@19:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(164)[2]
    horn clauses:
      P[<fail_1565@19:0>](<fail_1565@19:0>:bool)|- bot
      
      P[<nth_1030@16:1>](<nth_1030@16:0>:int,0:int), <fail_1565@19:0> |- P[<fail_1565@19:0>](<fail_1565@19:0>:bool)
      
      P[<f_main_1560@14:2>]((1 + <nth_1030@16:0>):int,<nth_1030@16:1>:int)|- P[<nth_1030@16:1>](
      <nth_1030@16:0>:int,<nth_1030@16:1>:int)
      
      P[<main_1037@6:0>](<f_main_1560@14:0>:int),
      P[<<make_list_1035@9:1>@12:0>](<f_main_1560@14:0>:int,<f_main_1560@14:2>:int), (
      <f_main_1560@14:0> > 0) |- P[<f_main_1560@14:2>](<f_main_1560@14:0>:int,
                                                       <f_main_1560@14:2>:int)
      
      P[<make_list_1035@9:0>](<make_list_1035@9:0>:int),
      ((<<make_list_1035@9:1>@12:0> = 0) && (<make_list_1035@9:0> < 0))
      |- P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int)
      
      P[<main_1037@6:0>](<make_list_1035@9:0>:int), (<make_list_1035@9:0> > 0)
      |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
      
      P[<f_1561@4:0>](<main_1037@6:0>:int)|- P[<main_1037@6:0>](<main_1037@6:0>:int)
      
      |- P[<f_1561@4:0>](<f_1561@4:0>:int)
    call trees:
      <main_1553@1>
        <f_1561@4>
          <main_1037@6>
            <make_list_1035@9>
            </<make_list_1035@9:1>@12>
            <f_main_1560@14>
              <nth_1030@16>
                <fail_1565@19>
    inlined horn clauses:
      P[<fail_1565@19:0>](<fail_1565@19:0>:bool)|- bot
      
      P[<nth_1030@16:1>](<nth_1030@16:0>:int,0:int), <fail_1565@19:0> |- P[<fail_1565@19:0>](<fail_1565@19:0>:bool)
      
      P[<<make_list_1035@9:1>@12:0>]((1 + <nth_1030@16:0>):int,<nth_1030@16:1>:int), (
      (1 + <nth_1030@16:0>) > 0) |- P[<nth_1030@16:1>](<nth_1030@16:0>:int,
                                                       <nth_1030@16:1>:int)
      
      P[<make_list_1035@9:0>](<make_list_1035@9:0>:int),
      ((<<make_list_1035@9:1>@12:0> = 0) && (<make_list_1035@9:0> < 0))
      |- P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int)
      
       (<make_list_1035@9:0> > 0) |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
    begin ParamSubstInfer.infer(965)[3]
      
    end ParamSubstInfer.infer(965)[3] (0.017997 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(967)[3]
      
    end RefTypeInfer.elim_coeffs(967)[3] (0.001000 sec.)
    begin GenHcSolver.solve(1113)[3]
      Horn clauses:
        P[<fail_1565@19:0>](<fail_1565@19:0>:bool)|- bot
        
        P[<nth_1030@16:1>](<nth_1030@16:0>:int,0:int), <fail_1565@19:0> |- P[<fail_1565@19:0>](<fail_1565@19:0>:bool)
        
        P[<<make_list_1035@9:1>@12:0>]((1 + <nth_1030@16:0>):int,<nth_1030@16:1>:int), (
        (1 + <nth_1030@16:0>) > 0) |- P[<nth_1030@16:1>](<nth_1030@16:0>:int,
                                                         <nth_1030@16:1>:int)
        
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int),
        ((<<make_list_1035@9:1>@12:0> = 0) && (<make_list_1035@9:0> < 0))
        |- P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int)
        
         (<make_list_1035@9:0> > 0) |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
      lower bounds:
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int) = (<make_list_1035@9:0> > 0)
        P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int) = false
        P[<nth_1030@16:1>](<nth_1030@16:0>:int,<nth_1030@16:1>:int) = false
        P[<fail_1565@19:0>](<fail_1565@19:0>:bool) = false
      upper bounds:
        P[<fail_1565@19:0>](var4:bool) = true
      begin GenHcSolver.classify_pids(1764)[4]
        output:
          [<fail_1565@19:0>]
      end GenHcSolver.classify_pids(1764)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(1767)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(1768)[5]
          begin InterpProver.interpolate_fresh(1769)[6]
            begin InterpProver.interpolate_log(1770)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(1771)[8]
                begin InterpProver.interpolate_simplify(1772)[9]
                  begin InterpProver.interpolate_quick(1785)[10]
                    
                  end InterpProver.interpolate_quick(1785)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(1789)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(1789)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(1772)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(1771)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(1770)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(1769)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(1768)[5] (0.000000 sec.)
        output:
          P[<fail_1565@19:0>](<fail_1565@19:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(1767)[4] (0.000000 sec.)
      Horn clauses:
        P[<nth_1030@16:1>](<nth_1030@16:0>:int,0:int)|- bot
        
        P[<<make_list_1035@9:1>@12:0>]((1 + <nth_1030@16:0>):int,<nth_1030@16:1>:int), (
        (1 + <nth_1030@16:0>) > 0) |- P[<nth_1030@16:1>](<nth_1030@16:0>:int,
                                                         <nth_1030@16:1>:int)
        
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int),
        ((<<make_list_1035@9:1>@12:0> = 0) && (<make_list_1035@9:0> < 0))
        |- P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int)
        
         (<make_list_1035@9:0> > 0) |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
      lower bounds:
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int) = (<make_list_1035@9:0> > 0)
        P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int) = false
        P[<nth_1030@16:1>](<nth_1030@16:0>:int,<nth_1030@16:1>:int) = false
      upper bounds:
        P[<nth_1030@16:1>](var7:int,var8:int) = true
      begin GenHcSolver.classify_pids(2515)[4]
        output:
          [<nth_1030@16:1>]
      end GenHcSolver.classify_pids(2515)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2518)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2519)[5]
          begin InterpProver.interpolate_fresh(2520)[6]
            begin InterpProver.interpolate_log(2521)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2522)[8]
                begin InterpProver.interpolate_simplify(2523)[9]
                  begin InterpProver.interpolate_quick(2536)[10]
                    
                  end InterpProver.interpolate_quick(2536)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2540)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2540)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2523)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2522)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2521)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2520)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2519)[5] (0.000000 sec.)
        output:
          P[<nth_1030@16:1>](<nth_1030@16:0>:int,<nth_1030@16:1>:int) = false
      end ApronInterface.convex_hull_interpolate(2518)[4] (0.000000 sec.)
      Horn clauses:
        P[<<make_list_1035@9:1>@12:0>]((1 + <nth_1030@16:0>):int,<nth_1030@16:1>:int), (
        (1 + <nth_1030@16:0>) > 0) |- bot
        
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int),
        ((<<make_list_1035@9:1>@12:0> = 0) && (<make_list_1035@9:0> < 0))
        |- P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int)
        
         (<make_list_1035@9:0> > 0) |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
      lower bounds:
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int) = (<make_list_1035@9:0> > 0)
        P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int) = false
      upper bounds:
        P[<<make_list_1035@9:1>@12:0>](var11:int,var12:int) = true
      begin GenHcSolver.classify_pids(3156)[4]
        output:
          [<<make_list_1035@9:1>@12:0>]
      end GenHcSolver.classify_pids(3156)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(3159)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(3160)[5]
          begin InterpProver.interpolate_fresh(3161)[6]
            begin InterpProver.interpolate_log(3162)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(3163)[8]
                begin InterpProver.interpolate_simplify(3164)[9]
                  begin InterpProver.interpolate_quick(3177)[10]
                    
                  end InterpProver.interpolate_quick(3177)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(3181)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(3181)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3164)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3163)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(3162)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(3161)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(3160)[5] (0.000000 sec.)
        output:
          P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int) = false
      end ApronInterface.convex_hull_interpolate(3159)[4] (0.000000 sec.)
      Horn clauses:
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int), (<make_list_1035@9:0> < 0) |- bot
        
         (<make_list_1035@9:0> > 0) |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
      lower bounds:
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int) = (<make_list_1035@9:0> > 0)
      upper bounds:
        P[<make_list_1035@9:0>](var13:int) = (var13 >= 0)
      begin GenHcSolver.classify_pids(3673)[4]
        output:
          [<make_list_1035@9:0>]
      end GenHcSolver.classify_pids(3673)[4] (0.000000 sec.)
      lb:(<make_list_1035@9:0> > 0)
      nub:(not (<make_list_1035@9:0> >= 0))
      begin ApronInterface.convex_hull_interpolate(3676)[4]
        lb:(<make_list_1035@9:0> > 0)
        nub:(not (<make_list_1035@9:0> >= 0))
        lb':(<make_list_1035@9:0> > 0)
        nub':(not (<make_list_1035@9:0> >= 0))
        begin InterpProver.interpolate(3677)[5]
          begin InterpProver.interpolate_fresh(3678)[6]
            begin InterpProver.interpolate_log(3679)[7]
              input1: (<make_list_1035@9:0> > 0)
              input2: (not (<make_list_1035@9:0> >= 0))
              begin InterpProver.interpolate_check(3680)[8]
                begin InterpProver.interpolate_simplify(3681)[9]
                  begin InterpProver.interpolate_quick(3698)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(3707)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(3708)[12]
                        begin CsisatInterface.interpolate_csisat_log(3709)[13]
                          input1: 1 <= v_sep_make_list_1035_sep_9_sep_0
                          input2: (1 + v_sep_make_list_1035_sep_9_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(3710)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(3710)[14] (0.000000 sec.)
                          output: -1*v_sep_make_list_1035_sep_9_sep_0 <= -1
                          
                        end CsisatInterface.interpolate_csisat_log(3709)[13] (0.000000 sec.)
                        after simplification: -1*v_sep_make_list_1035_sep_9_sep_0 <= -1
                        after dnf conversion: ((-1*v_sep_make_list_1035_sep_9_sep_0 <= -1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(3708)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(3707)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(3698)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3681)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3680)[8] (0.000000 sec.)
              output: (1 <= <make_list_1035@9:0>)
            end InterpProver.interpolate_log(3679)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(3678)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(3677)[5] (0.000000 sec.)
        output:
          P[<make_list_1035@9:0>](<make_list_1035@9:0>:int) = (1 <= <make_list_1035@9:0>)
      end ApronInterface.convex_hull_interpolate(3676)[4] (0.000000 sec.)
      begin HcSolver.check_validity(3824)[4]
        input:
          P[<fail_1565@19:0>](<fail_1565@19:0>:bool)|- bot
          
          P[<nth_1030@16:1>](<nth_1030@16:0>:int,0:int), <fail_1565@19:0> |- P[<fail_1565@19:0>](<fail_1565@19:0>:bool)
          
          P[<<make_list_1035@9:1>@12:0>]((1 + <nth_1030@16:0>):int,<nth_1030@16:1>:int), (
          (1 + <nth_1030@16:0>) > 0) |- P[<nth_1030@16:1>](<nth_1030@16:0>:int,
                                                           <nth_1030@16:1>:int)
          
          P[<make_list_1035@9:0>](<make_list_1035@9:0>:int),
          ((<<make_list_1035@9:1>@12:0> = 0) && (<make_list_1035@9:0> < 0))
          |- P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,
                                            <<make_list_1035@9:1>@12:0>:int)
          
           (<make_list_1035@9:0> > 0) |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3824)[4] (0.000000 sec.)
      solution:
        P[<fail_1565@19:0>](<fail_1565@19:0>:bool) = false
        P[<nth_1030@16:1>](<nth_1030@16:0>:int,<nth_1030@16:1>:int) = false
        P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int) = false
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int) = (1 <= <make_list_1035@9:0>)
    end GenHcSolver.solve(1113)[3] (0.010998 sec.)
    begin GenHcSolver.solve(4041)[3]
      Horn clauses:
        P[<fail_1565@19:0>](<fail_1565@19:0>:bool)|- bot
        
        P[<nth_1030@16:1>](<nth_1030@16:0>:int,0:int), <fail_1565@19:0> |- P[<fail_1565@19:0>](<fail_1565@19:0>:bool)
        
        P[<<make_list_1035@9:1>@12:0>]((1 + <nth_1030@16:0>):int,<nth_1030@16:1>:int), (
        (1 + <nth_1030@16:0>) > 0) |- P[<nth_1030@16:1>](<nth_1030@16:0>:int,
                                                         <nth_1030@16:1>:int)
        
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int),
        ((<<make_list_1035@9:1>@12:0> = 0) && (<make_list_1035@9:0> < 0))
        |- P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int)
        
         (<make_list_1035@9:0> > 0) |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
      lower bounds:
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int) = (<make_list_1035@9:0> > 0)
        P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int) = false
        P[<nth_1030@16:1>](<nth_1030@16:0>:int,<nth_1030@16:1>:int) = false
        P[<fail_1565@19:0>](<fail_1565@19:0>:bool) = false
      upper bounds:
        P[<fail_1565@19:0>](var15:bool) = true
      begin GenHcSolver.classify_pids(4692)[4]
        output:
          [<fail_1565@19:0>]
      end GenHcSolver.classify_pids(4692)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(4695)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(4698)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4698)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(4703)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4703)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(4706)[5]
          begin InterpProver.interpolate_fresh(4707)[6]
            begin InterpProver.interpolate_log(4708)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(4709)[8]
                begin InterpProver.interpolate_simplify(4710)[9]
                  begin InterpProver.interpolate_quick(4725)[10]
                    
                  end InterpProver.interpolate_quick(4725)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(4729)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(4729)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4710)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(4709)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(4708)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(4707)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(4706)[5] (0.001000 sec.)
        output:
          P[<fail_1565@19:0>](<fail_1565@19:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(4695)[4] (0.001000 sec.)
      Horn clauses:
        P[<nth_1030@16:1>](<nth_1030@16:0>:int,0:int)|- bot
        
        P[<<make_list_1035@9:1>@12:0>]((1 + <nth_1030@16:0>):int,<nth_1030@16:1>:int), (
        (1 + <nth_1030@16:0>) > 0) |- P[<nth_1030@16:1>](<nth_1030@16:0>:int,
                                                         <nth_1030@16:1>:int)
        
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int),
        ((<<make_list_1035@9:1>@12:0> = 0) && (<make_list_1035@9:0> < 0))
        |- P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int)
        
         (<make_list_1035@9:0> > 0) |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
      lower bounds:
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int) = (<make_list_1035@9:0> > 0)
        P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int) = false
        P[<nth_1030@16:1>](<nth_1030@16:0>:int,<nth_1030@16:1>:int) = false
      upper bounds:
        P[<nth_1030@16:1>](var18:int,var19:int) = true
      begin GenHcSolver.classify_pids(5462)[4]
        output:
          [<nth_1030@16:1>]
      end GenHcSolver.classify_pids(5462)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(5465)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(5468)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5468)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5473)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5473)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(5476)[5]
          begin InterpProver.interpolate_fresh(5477)[6]
            begin InterpProver.interpolate_log(5478)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(5479)[8]
                begin InterpProver.interpolate_simplify(5480)[9]
                  begin InterpProver.interpolate_quick(5495)[10]
                    
                  end InterpProver.interpolate_quick(5495)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(5499)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(5499)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5480)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5479)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(5478)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(5477)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(5476)[5] (0.001000 sec.)
        output:
          P[<nth_1030@16:1>](<nth_1030@16:0>:int,<nth_1030@16:1>:int) = false
      end ApronInterface.convex_hull_interpolate(5465)[4] (0.001000 sec.)
      Horn clauses:
        P[<<make_list_1035@9:1>@12:0>]((1 + <nth_1030@16:0>):int,<nth_1030@16:1>:int), (
        (1 + <nth_1030@16:0>) > 0) |- bot
        
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int),
        ((<<make_list_1035@9:1>@12:0> = 0) && (<make_list_1035@9:0> < 0))
        |- P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int)
        
         (<make_list_1035@9:0> > 0) |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
      lower bounds:
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int) = (<make_list_1035@9:0> > 0)
        P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int) = false
      upper bounds:
        P[<<make_list_1035@9:1>@12:0>](var22:int,var23:int) = true
      begin GenHcSolver.classify_pids(6122)[4]
        output:
          [<<make_list_1035@9:1>@12:0>]
      end GenHcSolver.classify_pids(6122)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(6125)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(6128)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(6128)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(6133)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(6133)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(6136)[5]
          begin InterpProver.interpolate_fresh(6137)[6]
            begin InterpProver.interpolate_log(6138)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(6139)[8]
                begin InterpProver.interpolate_simplify(6140)[9]
                  begin InterpProver.interpolate_quick(6155)[10]
                    
                  end InterpProver.interpolate_quick(6155)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(6159)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(6159)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(6140)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(6139)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(6138)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(6137)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(6136)[5] (0.000000 sec.)
        output:
          P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int) = false
      end ApronInterface.convex_hull_interpolate(6125)[4] (0.001000 sec.)
      Horn clauses:
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int), (<make_list_1035@9:0> < 0) |- bot
        
         (<make_list_1035@9:0> > 0) |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
      lower bounds:
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int) = (<make_list_1035@9:0> > 0)
      upper bounds:
        P[<make_list_1035@9:0>](var24:int) = (var24 >= 0)
      begin GenHcSolver.classify_pids(6658)[4]
        output:
          [<make_list_1035@9:0>]
      end GenHcSolver.classify_pids(6658)[4] (0.000000 sec.)
      lb:(<make_list_1035@9:0> > 0)
      nub:(not (<make_list_1035@9:0> >= 0))
      begin ApronInterface.convex_hull_interpolate(6661)[4]
        lb:(<make_list_1035@9:0> > 0)
        nub:(not (<make_list_1035@9:0> >= 0))
        begin ExtFormula.Formula.case_analysis_boolean(6665)[5]
          ts: (<make_list_1035@9:0> > 0)
          
        end ExtFormula.Formula.case_analysis_boolean(6665)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(6672)[5]
          ts: (<make_list_1035@9:0> < 0)
          
        end ExtFormula.Formula.case_analysis_boolean(6672)[5] (0.000000 sec.)
        lb':((-1 + <make_list_1035@9:0>) >= 0)
        nub':((-1 + (-1 * <make_list_1035@9:0>)) >= 0)
        begin InterpProver.interpolate(6676)[5]
          begin InterpProver.interpolate_fresh(6677)[6]
            begin InterpProver.interpolate_log(6678)[7]
              input1: ((-1 + <make_list_1035@9:0>) >= 0)
              input2: ((-1 + (-1 * <make_list_1035@9:0>)) >= 0)
              begin InterpProver.interpolate_check(6679)[8]
                begin InterpProver.interpolate_simplify(6680)[9]
                  begin InterpProver.interpolate_quick(6701)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(6710)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(6711)[12]
                        begin CsisatInterface.interpolate_csisat_log(6712)[13]
                          input1: 1 <= v_sep_make_list_1035_sep_9_sep_0
                          input2: (1 + v_sep_make_list_1035_sep_9_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(6713)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(6713)[14] (0.000000 sec.)
                          output: -1*v_sep_make_list_1035_sep_9_sep_0 <= -1
                          
                        end CsisatInterface.interpolate_csisat_log(6712)[13] (0.000000 sec.)
                        after simplification: -1*v_sep_make_list_1035_sep_9_sep_0 <= -1
                        after dnf conversion: ((-1*v_sep_make_list_1035_sep_9_sep_0 <= -1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(6711)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(6710)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(6701)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(6680)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(6679)[8] (0.001000 sec.)
              output: (1 <= <make_list_1035@9:0>)
            end InterpProver.interpolate_log(6678)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(6677)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(6676)[5] (0.001000 sec.)
        output:
          P[<make_list_1035@9:0>](<make_list_1035@9:0>:int) = (1 <= <make_list_1035@9:0>)
      end ApronInterface.convex_hull_interpolate(6661)[4] (0.001000 sec.)
      begin HcSolver.check_validity(6827)[4]
        input:
          P[<fail_1565@19:0>](<fail_1565@19:0>:bool)|- bot
          
          P[<nth_1030@16:1>](<nth_1030@16:0>:int,0:int), <fail_1565@19:0> |- P[<fail_1565@19:0>](<fail_1565@19:0>:bool)
          
          P[<<make_list_1035@9:1>@12:0>]((1 + <nth_1030@16:0>):int,<nth_1030@16:1>:int), (
          (1 + <nth_1030@16:0>) > 0) |- P[<nth_1030@16:1>](<nth_1030@16:0>:int,
                                                           <nth_1030@16:1>:int)
          
          P[<make_list_1035@9:0>](<make_list_1035@9:0>:int),
          ((<<make_list_1035@9:1>@12:0> = 0) && (<make_list_1035@9:0> < 0))
          |- P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,
                                            <<make_list_1035@9:1>@12:0>:int)
          
           (<make_list_1035@9:0> > 0) |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(6827)[4] (0.000000 sec.)
      solution:
        P[<fail_1565@19:0>](<fail_1565@19:0>:bool) = false
        P[<nth_1030@16:1>](<nth_1030@16:0>:int,<nth_1030@16:1>:int) = false
        P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,<<make_list_1035@9:1>@12:0>:int) = false
        P[<make_list_1035@9:0>](<make_list_1035@9:0>:int) = (1 <= <make_list_1035@9:0>)
    end GenHcSolver.solve(4041)[3] (0.012998 sec.)
    begin YhornInterface.solve(7044)[3]
      begin HcSolver.solve_ub(7045)[4]
        encoded:
          P[<fail_1565@19:0>](<fail_1565@19:0>:int)|- bot
          
          P[<nth_1030@16:1>](<nth_1030@16:0>:int,0:int), (<fail_1565@19:0> = 1)
          |- P[<fail_1565@19:0>](<fail_1565@19:0>:int)
          
          P[<<make_list_1035@9:1>@12:0>]((1 + <nth_1030@16:0>):int,<nth_1030@16:1>:int), (
          (1 + <nth_1030@16:0>) > 0) |- P[<nth_1030@16:1>](<nth_1030@16:0>:int,
                                                           <nth_1030@16:1>:int)
          
          P[<make_list_1035@9:0>](<make_list_1035@9:0>:int),
          ((<<make_list_1035@9:1>@12:0> = 0) && (<make_list_1035@9:0> < 0))
          |- P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,
                                            <<make_list_1035@9:1>@12:0>:int)
          
           (<make_list_1035@9:0> > 0) |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
        input to Yhorn:
          P[<fail_1565@19:0>](<fail_1565@19:0>:int)|- bot
          
          P[<nth_1030@16:1>](<nth_1030@16:0>:int,var25:int), ((var25 = 0) && (<fail_1565@19:0> = 1))
          |- P[<fail_1565@19:0>](<fail_1565@19:0>:int)
          
          P[<<make_list_1035@9:1>@12:0>](var26:int,<nth_1030@16:1>:int),
          ((var26 = (1 + <nth_1030@16:0>)) && ((1 + <nth_1030@16:0>) > 0))
          |- P[<nth_1030@16:1>](<nth_1030@16:0>:int,<nth_1030@16:1>:int)
          
          P[<make_list_1035@9:0>](<make_list_1035@9:0>:int),
          ((<make_list_1035@9:0> < 0) && (<<make_list_1035@9:1>@12:0> = 0))
          |- P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,
                                            <<make_list_1035@9:1>@12:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1565_sep_19_sep_0($8)) -> 1=0.
(($8-1=0) & ($9=0)) & (v_sep_nth_1030_sep_16_sep_1($10,$9)) -> v_sep_fail_1565_sep_19_sep_0($8).
(($10+1>0) & (-$10+$11-1=0)) & (v_sep_make_list_1035_sep_9_sep_1_sep_12_sep_0($11,$12)) -> v_sep_nth_1030_sep_16_sep_1($10,$12).
(($13=0) & ($14<0)) & (v_sep_make_list_1035_sep_9_sep_0($14)) -> v_sep_make_list_1035_sep_9_sep_1_sep_12_sep_0($14,$13).
$14>0 -> v_sep_make_list_1035_sep_9_sep_0($14).


v_sep_fail_1565_sep_19_sep_0: X
v_sep_make_list_1035_sep_9_sep_0: X
v_sep_make_list_1035_sep_9_sep_1_sep_12_sep_0: X
v_sep_nth_1030_sep_16_sep_1: X
.....
v_sep_fail_1565_sep_19_sep_0: X
v_sep_make_list_1035_sep_9_sep_0: X
v_sep_make_list_1035_sep_9_sep_1_sep_12_sep_0: X
v_sep_nth_1030_sep_16_sep_1: X
...
v_sep_fail_1565_sep_19_sep_0: X
v_sep_make_list_1035_sep_9_sep_0: X
v_sep_make_list_1035_sep_9_sep_1_sep_12_sep_0: X
v_sep_nth_1030_sep_16_sep_1: X
....
v_sep_fail_1565_sep_19_sep_0: X
v_sep_make_list_1035_sep_9_sep_0: X
v_sep_make_list_1035_sep_9_sep_1_sep_12_sep_0: X
v_sep_nth_1030_sep_16_sep_1: X
.....
v_sep_fail_1565_sep_19_sep_0: X
v_sep_make_list_1035_sep_9_sep_0: X
v_sep_make_list_1035_sep_9_sep_1_sep_12_sep_0: X
v_sep_nth_1030_sep_16_sep_1: X
.....(0=0) & (v_sep_fail_1565_sep_19_sep_0($8)) -> 1=0.
(($8-1=0) & ($9=0)) & (v_sep_nth_1030_sep_16_sep_1($10,$9)) -> v_sep_fail_1565_sep_19_sep_0($8).
(($10+1>0) & (-$10+$11-1=0)) & (v_sep_make_list_1035_sep_9_sep_1_sep_12_sep_0($11,$12)) -> v_sep_nth_1030_sep_16_sep_1($10,$12).
(($13=0) & ($14<0)) & (v_sep_make_list_1035_sep_9_sep_0($14)) -> v_sep_make_list_1035_sep_9_sep_1_sep_12_sep_0($14,$13).
$14>0 -> v_sep_make_list_1035_sep_9_sep_0($14).

           (<make_list_1035@9:0> > 0) |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
        solution:
          P[<fail_1565@19:0>]($15:bool) = false
          P[<make_list_1035@9:0>]($28:int) = (1 <= $28)
          P[<<make_list_1035@9:1>@12:0>]($23:int,$25:int) = false
          P[<nth_1030@16:1>]($18:int,$20:int) = false
        
      end HcSolver.solve_ub(7045)[4] (0.011999 sec.)
      begin HcSolver.check_validity(7187)[4]
        input:
          P[<fail_1565@19:0>](<fail_1565@19:0>:bool)|- bot
          
          P[<nth_1030@16:1>](<nth_1030@16:0>:int,0:int), <fail_1565@19:0> |- P[<fail_1565@19:0>](<fail_1565@19:0>:bool)
          
          P[<<make_list_1035@9:1>@12:0>]((1 + <nth_1030@16:0>):int,<nth_1030@16:1>:int), (
          (1 + <nth_1030@16:0>) > 0) |- P[<nth_1030@16:1>](<nth_1030@16:0>:int,
                                                           <nth_1030@16:1>:int)
          
          P[<make_list_1035@9:0>](<make_list_1035@9:0>:int),
          ((<<make_list_1035@9:1>@12:0> = 0) && (<make_list_1035@9:0> < 0))
          |- P[<<make_list_1035@9:1>@12:0>](<make_list_1035@9:0>:int,
                                            <<make_list_1035@9:1>@12:0>:int)
          
           (<make_list_1035@9:0> > 0) |- P[<make_list_1035@9:0>](<make_list_1035@9:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(7187)[4] (0.000999 sec.)
      solution:
        P[<fail_1565@19:0>]($15:bool) = false
        P[<make_list_1035@9:0>]($28:int) = (1 <= $28)
        P[<<make_list_1035@9:1>@12:0>]($23:int,$25:int) = false
        P[<nth_1030@16:1>]($18:int,$20:int) = false
    end YhornInterface.solve(7044)[3] (0.013998 sec.)
    
  end RefTypeInfer.infer_etrs(164)[2] (0.062990 sec.)
  refinement types:
    main_1553: X
    f_1561: v1:int -> X
    main_1037: v1:int -> (v2:int -> X) -> X
    make_list_1035: v1:{v1:int | (1 <= v1)} -> (v2:{v2:int | false} -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_main_1560: v1:int -> (v2:int -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    nth_1030: v1:int -> v2:{v2:int | false} -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    fail_1565: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_nth_1563: var56:bool -> var55:int -> var54:int -> (var53:int -> (var52:int -> X) -> X) -> (var49:int -> X) -> X
    cons_make_list_1099: var70:int ->
                         var69:int ->
                         var68:int ->
                         (var67:int -> (var66:int -> X) -> X) ->
                         (var63:int -> (var62:int -> (var61:int -> X) -> X) -> X) -> X
    f_1562: var73:int -> var72:int -> X
    f_cons_make_list_1558: var84:int ->
                           var83:int ->
                           var82:int -> (var81:int -> (var80:int -> X) -> X) -> var77:int -> (var76:int -> X) -> X
    f_make_list_1557: var89:int -> var88:int -> (var87:int -> X) -> X
    f_make_list_1559: var102:int ->
                      (var101:int -> (var100:int -> (var99:int -> X) -> X) -> X) ->
                      var95:int -> (var94:int -> (var93:int -> X) -> X) -> X
    f_nth_1554: var106:int -> var105:int -> var104:unit -> X
    f_nth_1555: var116:int ->
                var115:int -> (var114:int -> X) -> (var112:int -> (var111:int -> X) -> X) -> var108:int -> X
    f_nth_1556: var127:int ->
                var126:int ->
                var125:int -> (var124:int -> (var123:int -> X) -> X) -> var120:int -> (var119:int -> X) -> X
  abstraction types:
    main_1553: X
    f_1561: v1:int -> X
    main_1037: v1:int -> (v2:int -> X) -> X
    make_list_1035: v1:int[v1 -> (1 <= v1)] -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_main_1560: v1:int -> (v2:int -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    nth_1030: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    fail_1565: v1:bool -> (v2:unit -> X) -> X
    br_nth_1563: var56:bool -> var55:int -> var54:int -> (var53:int -> (var52:int -> X) -> X) -> (var49:int -> X) -> X
    cons_make_list_1099: var70:int ->
                         var69:int ->
                         var68:int ->
                         (var67:int -> (var66:int -> X) -> X) ->
                         (var63:int -> (var62:int -> (var61:int -> X) -> X) -> X) -> X
    f_1562: var73:int -> var72:int -> X
    f_cons_make_list_1558: var84:int ->
                           var83:int ->
                           var82:int -> (var81:int -> (var80:int -> X) -> X) -> var77:int -> (var76:int -> X) -> X
    f_make_list_1557: var89:int -> var88:int -> (var87:int -> X) -> X
    f_make_list_1559: var102:int ->
                      (var101:int -> (var100:int -> (var99:int -> X) -> X) -> X) ->
                      var95:int -> (var94:int -> (var93:int -> X) -> X) -> X
    f_nth_1554: var106:int -> var105:int -> var104:unit -> X
    f_nth_1555: var116:int ->
                var115:int -> (var114:int -> X) -> (var112:int -> (var111:int -> X) -> X) -> var108:int -> X
    f_nth_1556: var127:int ->
                var126:int ->
                var125:int -> (var124:int -> (var123:int -> X) -> X) -> var120:int -> (var119:int -> X) -> X
  
end AbsTypeInfer.refine(163)[1] (0.072989 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1553
  main_1553 -> (rand_int f_1561)
  br_nth_1563 b_1564 n_1031 xs1_1032 xs2_1032 k_nth_1156 when b_1564 ->
      (xs2_1032 0 (f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032))
  br_nth_1563 b_1564 n_1031 xs1_1032 xs2_1032 k_nth_1156 when (not b_1564) -> _|_
  cons_make_list_1099 n_1036 x_1097 xs1_1098 xs2_1098 k_make_list_cons_make_list_1347 ->
      (k_make_list_cons_make_list_1347 (xs1_1098 + 1) (f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098))
  f_1561 x_1495 -> (main_1037 x_1495 (f_1562 x_1495))
  f_1562 x_1495 x_1492 -> end
  f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098 i_1096 k_make_list_cons_make_list_1362 when (
      i_1096 = 0) -> (k_make_list_cons_make_list_1362 x_1097)
  f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098 i_1096 k_make_list_cons_make_list_1362 when (
      not (i_1096 = 0)) -> (xs2_1098 (i_1096 - 1) k_make_list_cons_make_list_1362)
  f_main_1560 n_1038 k_main_1446 x1_1485 x2_1485 -> (nth_1030 (n_1038 - 1) x1_1485 x2_1485 k_main_1446)
  f_make_list_1557 n_1036 x_1103 k_make_list_1300 -> _|_
  f_make_list_1559 n_1036 k_make_list_1288 x1_1425 x2_1425 ->
      (cons_make_list_1099 n_1036 n_1036 x1_1425 x2_1425 k_make_list_1288)
  f_nth_1554 n_1031 xs1_1032 x_1162 -> _|_
  f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032 x_1215 when (n_1031 = 0) -> (k_nth_1156 x_1215)
  f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032 x_1215 when (not (n_1031 = 0)) ->
      (nth_1030 (n_1031 - 1) (xs1_1032 - 1) (f_nth_1556 n_1031 x_1215 xs1_1032 xs2_1032) k_nth_1156)
  f_nth_1556 n_1031 x_1215 xs1_1032 xs2_1032 x_1070 k_nth_xs'_1201 -> (xs2_1032 (x_1070 + 1) k_nth_xs'_1201)
  fail_1565 b k -> {fail} => (k ())
  main_1037 n_1038 k_main_1446 when (n_1038 > 0) -> (make_list_1035 n_1038 (f_main_1560 n_1038 k_main_1446))
  main_1037 n_1038 k_main_1446 when (not (n_1038 > 0)) -> (k_main_1446 0)
  make_list_1035 n_1036 k_make_list_1288 when (n_1036 < 0) -> (k_make_list_1288 0 (f_make_list_1557 n_1036))
  make_list_1035 n_1036 k_make_list_1288 when (not (n_1036 < 0)) ->
      (make_list_1035 (n_1036 - 1) (f_make_list_1559 n_1036 k_make_list_1288))
  nth_1030 n_1031 xs1_1032 xs2_1032 k_nth_1156 when (xs1_1032 = 0) -> (fail_1565 true (f_nth_1554 n_1031 xs1_1032))
  nth_1030 n_1031 xs1_1032 xs2_1032 k_nth_1156 when (not (xs1_1032 = 0)) ->
      (br_nth_1563 (1 <= xs1_1032) n_1031 xs1_1032 xs2_1032 k_nth_1156)
Types:
  main_1553 : X
  fail_1565 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1035 : (x_1:int[x_1 >= 1] -> (int -> (int -> (int -> X) -> X) -> X) -> X)
  nth_1030 : (int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1553 ... --> 
  f_1561 ... --> 
  main_1037 [1/2] ... --> 
  make_list_1035 [2/2] ... --> 
  make_list_1035 [2/2] ... --> 
  make_list_1035 [1/2] ... --> 
  f_make_list_1559 ... --> 
  cons_make_list_1099 ... --> 
  f_make_list_1559 ... --> 
  cons_make_list_1099 ... --> 
  f_main_1560 ... --> 
  nth_1030 [1/2] ... --> 
  fail_1565 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(7728)[1]
  program:
    main_1553  | true = ((Random.int 0) f_1561)
    br_nth_1563 b_1564 n_1031 xs1_1032 xs2_1032 k_nth_1156 | b_1564 = (
    xs2_1032 0
             (f_nth_1555 n_1031
                         xs1_1032
                         k_nth_1156
                         xs2_1032))
    br_nth_1563 b_1564 n_1031 xs1_1032 xs2_1032 k_nth_1156 | (not b_1564) = bot
    cons_make_list_1099 n_1036 x_1097 xs1_1098 xs2_1098 k_make_list_cons_make_list_1347 | true = (
    k_make_list_cons_make_list_1347 (xs1_1098 + 1)
                                    (f_cons_make_list_1558 n_1036
                                                           x_1097
                                                           xs1_1098
                                                           xs2_1098))
    f_1561 x_1495 | true = (main_1037 x_1495
                                      (f_1562 x_1495))
    f_1562 x_1495 x_1492 | true = end
    f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098 i_1096 k_make_list_cons_make_list_1362 | (
    i_1096 = 0) = (k_make_list_cons_make_list_1362 x_1097)
    f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098 i_1096 k_make_list_cons_make_list_1362 | (
    not (i_1096 = 0)) = (xs2_1098 (i_1096 - 1)
                                  k_make_list_cons_make_list_1362)
    f_main_1560 n_1038 k_main_1446 x1_1485 x2_1485 | true = (nth_1030 (
                                                                    n_1038 - 1)
                                                                    x1_1485
                                                                    x2_1485
                                                                    k_main_1446)
    f_make_list_1557 n_1036 x_1103 k_make_list_1300 | true = bot
    f_make_list_1559 n_1036 k_make_list_1288 x1_1425 x2_1425 | true = (
    cons_make_list_1099 n_1036
                        n_1036
                        x1_1425
                        x2_1425
                        k_make_list_1288)
    f_nth_1554 n_1031 xs1_1032 x_1162 | true = bot
    f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032 x_1215 | (n_1031 = 0) = (
    k_nth_1156 x_1215)
    f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032 x_1215 | (not (n_1031 = 0)) = (
    nth_1030 (n_1031 - 1)
             (xs1_1032 - 1)
             (f_nth_1556 n_1031
                         x_1215
                         xs1_1032
                         xs2_1032)
             k_nth_1156)
    f_nth_1556 n_1031 x_1215 xs1_1032 xs2_1032 x_1070 k_nth_xs'_1201 | true = (
    xs2_1032 (x_1070 + 1)
             k_nth_xs'_1201)
    fail_1565 b k | true = (fail ())
    main_1037 n_1038 k_main_1446 | (n_1038 > 0) = (make_list_1035 n_1038
                                                                  (f_main_1560 n_1038
                                                                    k_main_1446))
    main_1037 n_1038 k_main_1446 | (not (n_1038 > 0)) = (k_main_1446 0)
    make_list_1035 n_1036 k_make_list_1288 | (n_1036 < 0) = (k_make_list_1288 0
                                                                    (f_make_list_1557 n_1036))
    make_list_1035 n_1036 k_make_list_1288 | (not (n_1036 < 0)) = (make_list_1035
                                                                    (
                                                                    n_1036 - 1)
                                                                    (
                                                                    f_make_list_1559 n_1036
                                                                    k_make_list_1288))
    nth_1030 n_1031 xs1_1032 xs2_1032 k_nth_1156 | (xs1_1032 = 0) = (
    fail_1565 true
              (f_nth_1554 n_1031
                          xs1_1032))
    nth_1030 n_1031 xs1_1032 xs2_1032 k_nth_1156 | (not (xs1_1032 = 0)) = (
    br_nth_1563 (1 <= xs1_1032)
                n_1031
                xs1_1032
                xs2_1032
                k_nth_1156)
    main_1553:X
    br_nth_1563:bool -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    cons_make_list_1099:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1561:int -> X
    f_1562:int -> int -> X
    f_cons_make_list_1558:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_main_1560:int -> (int -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_make_list_1557:int -> int -> (int -> X) -> X
    f_make_list_1559:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_nth_1554:int -> int -> unit -> X
    f_nth_1555:int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_nth_1556:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    fail_1565:bool -> (unit -> X) -> X
    main_1037:int -> (int -> X) -> X
    make_list_1035:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
    nth_1030:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
  inlined functions: br_nth_1563,cons_make_list_1099,f_1561,f_1562,f_cons_make_list_1558,f_main_1560,f_make_list_1557,f_make_list_1559,f_nth_1554,f_nth_1555,f_nth_1556,main_1037
  counterexample: 0:0:0:1:1:0:0:0:0:0:0:0:0
  error traces:
    [true.nop(<f_1561@25:0> = var128)
     [true.(<main_1037@27:0> = <f_1561@25:0>)
      [(<main_1037@27:0> > 0).(<make_list_1035@30:0> = <main_1037@27:0>)
       [(not (<make_list_1035@30:0> < 0)).(<make_list_1035@33:0> = (<make_list_1035@30:0> - 1))
        [(not (<make_list_1035@33:0> < 0)).(<make_list_1035@36:0> = (<make_list_1035@33:0> - 1))
         [(<make_list_1035@36:0> < 0).(<<make_list_1035@36:1>@39:0> = 0)
          [true.
           ((<f_make_list_1559@41:0> = <make_list_1035@33:0>) &&
            (<f_make_list_1559@41:2> = <<make_list_1035@36:1>@39:0>))
           [true.
            ((<cons_make_list_1099@43:0> = <f_make_list_1559@41:0>) &&
             ((<cons_make_list_1099@43:1> = <f_make_list_1559@41:0>) &&
              (<cons_make_list_1099@43:2> = <f_make_list_1559@41:2>)))
            [true.(<<cons_make_list_1099@43:4>@45:0> = (<cons_make_list_1099@43:2> + 1))
             [true.(<<f_make_list_1559@41:1>@47:0> = <<cons_make_list_1099@43:4>@45:0>)
              [true.(<<make_list_1035@33:1>@49:0> = <<f_make_list_1559@41:1>@47:0>)
               [true.
                ((<f_make_list_1559@51:0> = <make_list_1035@30:0>) &&
                 (<f_make_list_1559@51:2> = <<make_list_1035@33:1>@49:0>))
                [true.
                 ((<cons_make_list_1099@53:0> = <f_make_list_1559@51:0>) &&
                  ((<cons_make_list_1099@53:1> = <f_make_list_1559@51:0>) &&
                   (<cons_make_list_1099@53:2> = <f_make_list_1559@51:2>)))
                 [true.(<<cons_make_list_1099@53:4>@55:0> = (<cons_make_list_1099@53:2> + 1))
                  [true.(<<f_make_list_1559@51:1>@57:0> = <<cons_make_list_1099@53:4>@55:0>)
                   [true.(<<make_list_1035@30:1>@59:0> = <<f_make_list_1559@51:1>@57:0>)
                    [true.
                     ((<f_main_1560@61:0> = <main_1037@27:0>) && (<f_main_1560@61:2> = <<make_list_1035@30:1>@59:0>))
                     [true.((<nth_1030@63:0> = (<f_main_1560@61:0> - 1)) && (<nth_1030@63:1> = <f_main_1560@61:2>))
                      [(<nth_1030@63:1> = 0).(<fail_1565@66:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(7729)[2]
    horn clauses:
      P[<fail_1565@66:0>](<fail_1565@66:0>:bool)|- bot
      
      P[<nth_1030@63:1>](<nth_1030@63:0>:int,0:int), <fail_1565@66:0> |- P[<fail_1565@66:0>](<fail_1565@66:0>:bool)
      
      P[<f_main_1560@61:2>]((1 + <nth_1030@63:0>):int,<nth_1030@63:1>:int)|- P[<nth_1030@63:1>](
      <nth_1030@63:0>:int,<nth_1030@63:1>:int)
      
      P[<main_1037@27:0>](<f_main_1560@61:0>:int),
      P[<<make_list_1035@30:1>@59:0>](<f_main_1560@61:0>:int,<f_main_1560@61:2>:int), (
      <f_main_1560@61:0> > 0) |- P[<f_main_1560@61:2>](<f_main_1560@61:0>:int,
                                                       <f_main_1560@61:2>:int)
      
      P[<make_list_1035@30:0>](<make_list_1035@30:0>:int),
      P[<<f_make_list_1559@51:1>@57:0>](<make_list_1035@30:0>:int,<<make_list_1035@30:1>@59:0>:int),
      (<make_list_1035@30:0> >= 0)
      |- P[<<make_list_1035@30:1>@59:0>](<make_list_1035@30:0>:int,<<make_list_1035@30:1>@59:0>:int)
      
      P[<f_make_list_1559@51:2>](<f_make_list_1559@51:0>:int,<cons_make_list_1099@53:2>:int),
      P[<<cons_make_list_1099@53:4>@55:0>](<f_make_list_1559@51:0>:int,<f_make_list_1559@51:0>:int,<cons_make_list_1099@53:2>:int,<<f_make_list_1559@51:1>@57:0>:int)|- P[<<f_make_list_1559@51:1>@57:0>](
      <f_make_list_1559@51:0>:int,<<f_make_list_1559@51:1>@57:0>:int)
      
      P[<cons_make_list_1099@53:2>](<cons_make_list_1099@53:0>:int,<cons_make_list_1099@53:1>:int,<cons_make_list_1099@53:2>:int),
      (<<cons_make_list_1099@53:4>@55:0> = (1 + <cons_make_list_1099@53:2>))
      |- P[<<cons_make_list_1099@53:4>@55:0>](<cons_make_list_1099@53:0>:int,
                                              <cons_make_list_1099@53:1>:int,
                                              <cons_make_list_1099@53:2>:int,
                                              <<cons_make_list_1099@53:4>@55:0>:int)
      
      P[<f_make_list_1559@51:2>](<cons_make_list_1099@53:0>:int,<cons_make_list_1099@53:2>:int),
      (<cons_make_list_1099@53:0> = <cons_make_list_1099@53:1>)
      |- P[<cons_make_list_1099@53:2>](<cons_make_list_1099@53:0>:int,
                                       <cons_make_list_1099@53:1>:int,
                                       <cons_make_list_1099@53:2>:int)
      
      P[<make_list_1035@30:0>](<f_make_list_1559@51:0>:int),
      P[<<make_list_1035@33:1>@49:0>]((-1 + <f_make_list_1559@51:0>):int,<f_make_list_1559@51:2>:int),
      (<f_make_list_1559@51:0> >= 0)
      |- P[<f_make_list_1559@51:2>](<f_make_list_1559@51:0>:int,<f_make_list_1559@51:2>:int)
      
      P[<make_list_1035@33:0>](<make_list_1035@33:0>:int),
      P[<<f_make_list_1559@41:1>@47:0>](<make_list_1035@33:0>:int,<<make_list_1035@33:1>@49:0>:int),
      (<make_list_1035@33:0> >= 0)
      |- P[<<make_list_1035@33:1>@49:0>](<make_list_1035@33:0>:int,<<make_list_1035@33:1>@49:0>:int)
      
      P[<f_make_list_1559@41:2>](<f_make_list_1559@41:0>:int,<cons_make_list_1099@43:2>:int),
      P[<<cons_make_list_1099@43:4>@45:0>](<f_make_list_1559@41:0>:int,<f_make_list_1559@41:0>:int,<cons_make_list_1099@43:2>:int,<<f_make_list_1559@41:1>@47:0>:int)|- P[<<f_make_list_1559@41:1>@47:0>](
      <f_make_list_1559@41:0>:int,<<f_make_list_1559@41:1>@47:0>:int)
      
      P[<cons_make_list_1099@43:2>](<cons_make_list_1099@43:0>:int,<cons_make_list_1099@43:1>:int,<cons_make_list_1099@43:2>:int),
      (<<cons_make_list_1099@43:4>@45:0> = (1 + <cons_make_list_1099@43:2>))
      |- P[<<cons_make_list_1099@43:4>@45:0>](<cons_make_list_1099@43:0>:int,
                                              <cons_make_list_1099@43:1>:int,
                                              <cons_make_list_1099@43:2>:int,
                                              <<cons_make_list_1099@43:4>@45:0>:int)
      
      P[<f_make_list_1559@41:2>](<cons_make_list_1099@43:0>:int,<cons_make_list_1099@43:2>:int),
      (<cons_make_list_1099@43:0> = <cons_make_list_1099@43:1>)
      |- P[<cons_make_list_1099@43:2>](<cons_make_list_1099@43:0>:int,
                                       <cons_make_list_1099@43:1>:int,
                                       <cons_make_list_1099@43:2>:int)
      
      P[<make_list_1035@33:0>](<f_make_list_1559@41:0>:int),
      P[<<make_list_1035@36:1>@39:0>]((-1 + <f_make_list_1559@41:0>):int,<f_make_list_1559@41:2>:int),
      (<f_make_list_1559@41:0> >= 0)
      |- P[<f_make_list_1559@41:2>](<f_make_list_1559@41:0>:int,<f_make_list_1559@41:2>:int)
      
      P[<make_list_1035@36:0>](<make_list_1035@36:0>:int),
      ((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> < 0))
      |- P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int)
      
      P[<make_list_1035@33:0>]((1 + <make_list_1035@36:0>):int), ((1 + <make_list_1035@36:0>) >= 0)
      |- P[<make_list_1035@36:0>](<make_list_1035@36:0>:int)
      
      P[<make_list_1035@30:0>]((1 + <make_list_1035@33:0>):int), ((1 + <make_list_1035@33:0>) >= 0)
      |- P[<make_list_1035@33:0>](<make_list_1035@33:0>:int)
      
      P[<main_1037@27:0>](<make_list_1035@30:0>:int), (<make_list_1035@30:0> > 0)
      |- P[<make_list_1035@30:0>](<make_list_1035@30:0>:int)
      
      P[<f_1561@25:0>](<main_1037@27:0>:int)|- P[<main_1037@27:0>](<main_1037@27:0>:int)
      
      |- P[<f_1561@25:0>](<f_1561@25:0>:int)
    call trees:
      <main_1553@22>
        <f_1561@25>
          <main_1037@27>
            <make_list_1035@30>
              <make_list_1035@33>
                <make_list_1035@36>
                </<make_list_1035@36:1>@39>
                <f_make_list_1559@41>
                  <cons_make_list_1099@43>
                  </<cons_make_list_1099@43:4>@45>
                </<f_make_list_1559@41:1>@47>
              </<make_list_1035@33:1>@49>
              <f_make_list_1559@51>
                <cons_make_list_1099@53>
                </<cons_make_list_1099@53:4>@55>
              </<f_make_list_1559@51:1>@57>
            </<make_list_1035@30:1>@59>
            <f_main_1560@61>
              <nth_1030@63>
                <fail_1565@66>
    inlined horn clauses:
      P[<fail_1565@66:0>](<fail_1565@66:0>:bool)|- bot
      
      P[<nth_1030@63:1>](<nth_1030@63:0>:int,0:int), <fail_1565@66:0> |- P[<fail_1565@66:0>](<fail_1565@66:0>:bool)
      
      P[<<make_list_1035@30:1>@59:0>]((1 + <nth_1030@63:0>):int,<nth_1030@63:1>:int), (
      (1 + <nth_1030@63:0>) > 0) |- P[<nth_1030@63:1>](<nth_1030@63:0>:int,
                                                       <nth_1030@63:1>:int)
      
      P[<make_list_1035@30:0>](<make_list_1035@30:0>:int),
      P[<<make_list_1035@33:1>@49:0>]((-1 + <make_list_1035@30:0>):int,(
                                      -1 + <<make_list_1035@30:1>@59:0>):int), (
      <make_list_1035@30:0> >= 0)
      |- P[<<make_list_1035@30:1>@59:0>](<make_list_1035@30:0>:int,<<make_list_1035@30:1>@59:0>:int)
      
      P[<make_list_1035@33:0>](<make_list_1035@33:0>:int),
      P[<<make_list_1035@36:1>@39:0>]((-1 + <make_list_1035@33:0>):int,(
                                      -1 + <<make_list_1035@33:1>@49:0>):int), (
      <make_list_1035@33:0> >= 0)
      |- P[<<make_list_1035@33:1>@49:0>](<make_list_1035@33:0>:int,<<make_list_1035@33:1>@49:0>:int)
      
      P[<make_list_1035@36:0>](<make_list_1035@36:0>:int),
      ((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> < 0))
      |- P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int)
      
      P[<make_list_1035@33:0>]((1 + <make_list_1035@36:0>):int), ((1 + <make_list_1035@36:0>) >= 0)
      |- P[<make_list_1035@36:0>](<make_list_1035@36:0>:int)
      
      P[<make_list_1035@30:0>]((1 + <make_list_1035@33:0>):int), ((1 + <make_list_1035@33:0>) >= 0)
      |- P[<make_list_1035@33:0>](<make_list_1035@33:0>:int)
      
       (<make_list_1035@30:0> > 0) |- P[<make_list_1035@30:0>](<make_list_1035@30:0>:int)
    begin ParamSubstInfer.infer(10336)[3]
      
    end ParamSubstInfer.infer(10336)[3] (0.057992 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(10338)[3]
      
    end RefTypeInfer.elim_coeffs(10338)[3] (0.001000 sec.)
    begin GenHcSolver.solve(10592)[3]
      Horn clauses:
        P[<fail_1565@66:0>](<fail_1565@66:0>:bool)|- bot
        
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,0:int), <fail_1565@66:0> |- P[<fail_1565@66:0>](<fail_1565@66:0>:bool)
        
        P[<<make_list_1035@30:1>@59:0>]((1 + <nth_1030@63:0>):int,<nth_1030@63:1>:int), (
        (1 + <nth_1030@63:0>) > 0) |- P[<nth_1030@63:1>](<nth_1030@63:0>:int,
                                                         <nth_1030@63:1>:int)
        
        P[<make_list_1035@30:0>](<make_list_1035@30:0>:int),
        P[<<make_list_1035@33:1>@49:0>]((-1 + <make_list_1035@30:0>):int,(
                                        -1 + <<make_list_1035@30:1>@59:0>):int), (
        <make_list_1035@30:0> >= 0)
        |- P[<<make_list_1035@30:1>@59:0>](<make_list_1035@30:0>:int,
                                           <<make_list_1035@30:1>@59:0>:int)
        
        P[<make_list_1035@33:0>](<make_list_1035@33:0>:int),
        P[<<make_list_1035@36:1>@39:0>]((-1 + <make_list_1035@33:0>):int,(
                                        -1 + <<make_list_1035@33:1>@49:0>):int), (
        <make_list_1035@33:0> >= 0)
        |- P[<<make_list_1035@33:1>@49:0>](<make_list_1035@33:0>:int,
                                           <<make_list_1035@33:1>@49:0>:int)
        
        P[<make_list_1035@36:0>](<make_list_1035@36:0>:int),
        ((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> < 0))
        |- P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,
                                           <<make_list_1035@36:1>@39:0>:int)
        
        P[<make_list_1035@33:0>]((1 + <make_list_1035@36:0>):int), ((1 + <make_list_1035@36:0>) >= 0)
        |- P[<make_list_1035@36:0>](<make_list_1035@36:0>:int)
        
        P[<make_list_1035@30:0>]((1 + <make_list_1035@33:0>):int), ((1 + <make_list_1035@33:0>) >= 0)
        |- P[<make_list_1035@33:0>](<make_list_1035@33:0>:int)
        
         (<make_list_1035@30:0> > 0) |- P[<make_list_1035@30:0>](<make_list_1035@30:0>:int)
      lower bounds:
        P[<make_list_1035@30:0>](<make_list_1035@30:0>:int) = (<make_list_1035@30:0> > 0)
        P[<make_list_1035@33:0>](<make_list_1035@33:0>:int) = ((1 + <make_list_1035@33:0>) > 0)
        P[<make_list_1035@36:0>](<make_list_1035@36:0>:int) = ((1 + <make_list_1035@36:0>) >= 0)
        P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int) =
        ((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> = -1))
        P[<<make_list_1035@33:1>@49:0>](<make_list_1035@33:0>:int,<<make_list_1035@33:1>@49:0>:int) =
        ((<make_list_1035@33:0> = 0) && (<<make_list_1035@33:1>@49:0> = 1))
        P[<<make_list_1035@30:1>@59:0>](<make_list_1035@30:0>:int,<<make_list_1035@30:1>@59:0>:int) =
        ((<make_list_1035@30:0> = 1) && (<<make_list_1035@30:1>@59:0> = 2))
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int) = ((<nth_1030@63:0> = 0) && (<nth_1030@63:1> = 2))
        P[<fail_1565@66:0>](<fail_1565@66:0>:bool) = false
      upper bounds:
        P[<<make_list_1035@30:1>@59:0>](var136:int,var137:int) = ((var137 <> 0) || (var136 <= 0))
        P[<<make_list_1035@33:1>@49:0>](var133:int,var134:int) = (((1 + var134) <> 0) || ((1 + var133) <= 0))
        P[<<make_list_1035@36:1>@39:0>](var130:int,var131:int) = (((2 + var131) <> 0) || ((1 + var130) < 0))
      begin GenHcSolver.classify_pids(15341)[4]
        output:
          [<<make_list_1035@36:1>@39:0>;<<make_list_1035@33:1>@49:0>;<<make_list_1035@30:1>@59:0>]
      end GenHcSolver.classify_pids(15341)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(15470)[4]
        lb:(((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> = -1)) ||
            (((<make_list_1035@36:0> = 0) && (<<make_list_1035@36:1>@39:0> = 1)) ||
             ((<make_list_1035@36:0> = 1) && (<<make_list_1035@36:1>@39:0> = 2))))
        nub:((not (((2 + <<make_list_1035@36:1>@39:0>) <> 0) || ((1 + <make_list_1035@36:0>) < 0))) ||
             ((not (((1 + <<make_list_1035@36:1>@39:0>) <> 0) || ((1 + <make_list_1035@36:0>) <= 0))) ||
              (not ((<<make_list_1035@36:1>@39:0> <> 0) || (<make_list_1035@36:0> <= 0)))))
        lb':(((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> = -1)) ||
             (((<make_list_1035@36:0> = 0) && (<<make_list_1035@36:1>@39:0> = 1)) ||
              ((<make_list_1035@36:0> = 1) && (<<make_list_1035@36:1>@39:0> = 2))))
        nub':((not (((2 + <<make_list_1035@36:1>@39:0>) <> 0) || ((1 + <make_list_1035@36:0>) < 0))) ||
              ((not (((1 + <<make_list_1035@36:1>@39:0>) <> 0) || ((1 + <make_list_1035@36:0>) <= 0))) ||
               (not ((<<make_list_1035@36:1>@39:0> <> 0) || (<make_list_1035@36:0> <= 0)))))
        begin InterpProver.interpolate(15471)[5]
          begin InterpProver.interpolate_fresh(15472)[6]
            begin InterpProver.interpolate_log(15473)[7]
              input1: (((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> = -1)) ||
                       (((<make_list_1035@36:0> = 0) && (<<make_list_1035@36:1>@39:0> = 1)) ||
                        ((<make_list_1035@36:0> = 1) && (<<make_list_1035@36:1>@39:0> = 2))))
              input2: ((not (((2 + <<make_list_1035@36:1>@39:0>) <> 0) || ((1 + <make_list_1035@36:0>) < 0))) ||
                       ((not (((1 + <<make_list_1035@36:1>@39:0>) <> 0) || ((1 + <make_list_1035@36:0>) <= 0))) ||
                        (not ((<<make_list_1035@36:1>@39:0> <> 0) || (<make_list_1035@36:0> <= 0)))))
              begin InterpProver.interpolate_check(15474)[8]
                begin InterpProver.interpolate_simplify(15475)[9]
                  begin InterpProver.interpolate_quick(15604)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(15613)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(15614)[12]
                        begin CsisatInterface.interpolate_csisat_log(15615)[13]
                          input1: ((-1 = v_sep_make_list_1035_sep_36_sep_0 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (0 = v_sep_make_list_1035_sep_36_sep_0 & 1 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (1 = v_sep_make_list_1035_sep_36_sep_0 & 2 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0))
                          input2: ((-2 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 & 0 <= (1 + v_sep_make_list_1035_sep_36_sep_0)) | (-1 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 & 1 <= (1 + v_sep_make_list_1035_sep_36_sep_0)) | (0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 & 1 <= v_sep_make_list_1035_sep_36_sep_0))
                          begin CsisatInterface.interpolate_csisat_raw(15616)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(15616)[14] (0.007999 sec.)
                          output: (((((v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0) | -0.666666666667*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -0.666666666667 | -0.5*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1) & (v_sep_make_list_1035_sep_36_sep_0 <= -1 | 2*v_sep_make_list_1035_sep_36_sep_0 <= 0) & (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 | -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 | -0.666666666667*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1.33333333333)) | not 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) & (((-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 | -0.666666666667*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1.33333333333) & (-0.666666666667*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -0.666666666667 | -0.5*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1)) | 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0))
                          
                        end CsisatInterface.interpolate_csisat_log(15615)[13] (0.007999 sec.)
                        after simplification: (((((v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0) | -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 | -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) & (v_sep_make_list_1035_sep_36_sep_0 <= -1 | 2*v_sep_make_list_1035_sep_36_sep_0 <= 0) & (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 | -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 | -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1)) | not 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) & (((-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 | -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1) & (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 | -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2)) | 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0))
                        after dnf conversion: ((-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (-2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 2*v_sep_make_list_1035_sep_36_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (v_sep_make_list_1035_sep_36_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & v_sep_make_list_1035_sep_36_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) | (not 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (not 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (not 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (not 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= -2) | (not 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 & 0 = v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(15614)[12] (0.008998 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(15613)[11] (0.012998 sec.)
                    
                  end InterpProver.interpolate_quick(15604)[10] (0.013998 sec.)
                  begin minimizing # of disjunctions(19138)[10]
                    input: ((1 <= <<make_list_1035@36:1>@39:0>) ||
                            (((<make_list_1035@36:0> <= 0) && (1 <= <<make_list_1035@36:1>@39:0>)) ||
                             (((2 <= <<make_list_1035@36:1>@39:0>) && (<make_list_1035@36:0> <= 0)) ||
                              (((<make_list_1035@36:0> <= 0) && (2 <= <<make_list_1035@36:1>@39:0>)) ||
                               ((((1 + <make_list_1035@36:0>) <= 0) && (1 <= <<make_list_1035@36:1>@39:0>)) ||
                                ((((1 + <make_list_1035@36:0>) <= 0) && (2 <= <<make_list_1035@36:1>@39:0>)) ||
                                 (((1 <= <<make_list_1035@36:1>@39:0>) && ((1 + <make_list_1035@36:0>) <= 0)) ||
                                  (((<<make_list_1035@36:1>@39:0> = 0) && ((1 + <make_list_1035@36:0>) <= 0)) ||
                                   ((2 <= <<make_list_1035@36:1>@39:0>) && ((1 + <make_list_1035@36:0>) <= 0))))))))))
                    output: (((<<make_list_1035@36:1>@39:0> = 0) && ((1 + <make_list_1035@36:0>) <= 0)) ||
                             (1 <= <<make_list_1035@36:1>@39:0>))
                  end minimizing # of disjunctions(19138)[10] (0.007998 sec.)
                  begin minimizing # of conjunctions(19888)[10]
                    input: ((<<make_list_1035@36:1>@39:0> = 0) && ((1 + <make_list_1035@36:0>) <= 0))
                    output: (((1 + <make_list_1035@36:0>) <= 0) && (<<make_list_1035@36:1>@39:0> = 0))
                  end minimizing # of conjunctions(19888)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(15475)[9] (0.044993 sec.)
                
              end InterpProver.interpolate_check(15474)[8] (0.045993 sec.)
              output: ((((1 + <make_list_1035@36:0>) <= 0) && (<<make_list_1035@36:1>@39:0> = 0)) ||
                       (1 <= <<make_list_1035@36:1>@39:0>))
            end InterpProver.interpolate_log(15473)[7] (0.045993 sec.)
            
          end InterpProver.interpolate_fresh(15472)[6] (0.045993 sec.)
          
        end InterpProver.interpolate(15471)[5] (0.045993 sec.)
        output:
          P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int) =
          ((((1 + <make_list_1035@36:0>) <= 0) && (<<make_list_1035@36:1>@39:0> = 0)) ||
           (1 <= <<make_list_1035@36:1>@39:0>))
          P[<<make_list_1035@33:1>@49:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int) =
          ((((1 + <make_list_1035@36:0>) <= 0) && (<<make_list_1035@36:1>@39:0> = 0)) ||
           (1 <= <<make_list_1035@36:1>@39:0>))
          P[<<make_list_1035@30:1>@59:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int) =
          ((((1 + <make_list_1035@36:0>) <= 0) && (<<make_list_1035@36:1>@39:0> = 0)) ||
           (1 <= <<make_list_1035@36:1>@39:0>))
      end ApronInterface.convex_hull_interpolate(15470)[4] (0.045993 sec.)
      Horn clauses:
        P[<fail_1565@66:0>](<fail_1565@66:0>:bool)|- bot
        
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,0:int), <fail_1565@66:0> |- P[<fail_1565@66:0>](<fail_1565@66:0>:bool)
        
        
        (((1 + <nth_1030@63:0>) > 0) &&
         ((1 <= <nth_1030@63:1>) || ((<nth_1030@63:1> = 0) && ((2 + <nth_1030@63:0>) <= 0))))
        |- P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int)
        
        P[<make_list_1035@33:0>]((1 + <make_list_1035@36:0>):int), ((1 + <make_list_1035@36:0>) >= 0)
        |- P[<make_list_1035@36:0>](<make_list_1035@36:0>:int)
        
        P[<make_list_1035@30:0>]((1 + <make_list_1035@33:0>):int), ((1 + <make_list_1035@33:0>) >= 0)
        |- P[<make_list_1035@33:0>](<make_list_1035@33:0>:int)
        
         (<make_list_1035@30:0> > 0) |- P[<make_list_1035@30:0>](<make_list_1035@30:0>:int)
      lower bounds:
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int) =
        (((1 + <nth_1030@63:0>) > 0) &&
         ((1 <= <nth_1030@63:1>) || ((<nth_1030@63:1> = 0) && ((2 + <nth_1030@63:0>) <= 0))))
        P[<make_list_1035@30:0>](<make_list_1035@30:0>:int) = (<make_list_1035@30:0> > 0)
        P[<fail_1565@66:0>](<fail_1565@66:0>:bool) = false
        P[<make_list_1035@33:0>](<make_list_1035@33:0>:int) = ((1 + <make_list_1035@33:0>) > 0)
        P[<make_list_1035@36:0>](<make_list_1035@36:0>:int) = ((1 + <make_list_1035@36:0>) >= 0)
      upper bounds:
        P[<make_list_1035@36:0>](var140:int) = true
        P[<make_list_1035@33:0>](var139:int) = true
        P[<make_list_1035@30:0>](var138:int) = true
      begin GenHcSolver.classify_pids(27493)[4]
        output:
          [<make_list_1035@30:0>;<make_list_1035@33:0>;<make_list_1035@36:0>]
      end GenHcSolver.classify_pids(27493)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(27514)[4]
        lb:((<make_list_1035@30:0> > 0) || (((1 + <make_list_1035@30:0>) > 0) || ((1 + <make_list_1035@30:0>) >= 0)))
        nub:false
        lb':((<make_list_1035@30:0> > 0) || (((1 + <make_list_1035@30:0>) > 0) || ((1 + <make_list_1035@30:0>) >= 0)))
        nub':false
        begin InterpProver.interpolate(27515)[5]
          begin InterpProver.interpolate_fresh(27516)[6]
            begin InterpProver.interpolate_log(27517)[7]
              input1: ((<make_list_1035@30:0> > 0) ||
                       (((1 + <make_list_1035@30:0>) > 0) || ((1 + <make_list_1035@30:0>) >= 0)))
              input2: false
              begin InterpProver.interpolate_check(27518)[8]
                begin InterpProver.interpolate_simplify(27519)[9]
                  begin InterpProver.interpolate_quick(27548)[10]
                    
                  end InterpProver.interpolate_quick(27548)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(27519)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(27518)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(27517)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(27516)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(27515)[5] (0.001000 sec.)
        output:
          P[<make_list_1035@30:0>](<make_list_1035@30:0>:int) = true
          P[<make_list_1035@33:0>](<make_list_1035@30:0>:int) = true
          P[<make_list_1035@36:0>](<make_list_1035@30:0>:int) = true
      end ApronInterface.convex_hull_interpolate(27514)[4] (0.002000 sec.)
      Horn clauses:
        P[<fail_1565@66:0>](<fail_1565@66:0>:bool)|- bot
        
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,0:int), <fail_1565@66:0> |- P[<fail_1565@66:0>](<fail_1565@66:0>:bool)
        
        
        (((1 + <nth_1030@63:0>) > 0) &&
         ((1 <= <nth_1030@63:1>) || ((<nth_1030@63:1> = 0) && ((2 + <nth_1030@63:0>) <= 0))))
        |- P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int)
      lower bounds:
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int) =
        (((1 + <nth_1030@63:0>) > 0) &&
         ((1 <= <nth_1030@63:1>) || ((<nth_1030@63:1> = 0) && ((2 + <nth_1030@63:0>) <= 0))))
        P[<fail_1565@66:0>](<fail_1565@66:0>:bool) = false
      upper bounds:
        P[<fail_1565@66:0>](var142:bool) = true
      begin GenHcSolver.classify_pids(30527)[4]
        output:
          [<fail_1565@66:0>]
      end GenHcSolver.classify_pids(30527)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(30530)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(30531)[5]
          begin InterpProver.interpolate_fresh(30532)[6]
            begin InterpProver.interpolate_log(30533)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(30534)[8]
                begin InterpProver.interpolate_simplify(30535)[9]
                  begin InterpProver.interpolate_quick(30548)[10]
                    
                  end InterpProver.interpolate_quick(30548)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(30552)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(30552)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(30535)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(30534)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(30533)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(30532)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(30531)[5] (0.000000 sec.)
        output:
          P[<fail_1565@66:0>](<fail_1565@66:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(30530)[4] (0.000000 sec.)
      Horn clauses:
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,0:int)|- bot
        
        
        (((1 + <nth_1030@63:0>) > 0) &&
         ((1 <= <nth_1030@63:1>) || ((<nth_1030@63:1> = 0) && ((2 + <nth_1030@63:0>) <= 0))))
        |- P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int)
      lower bounds:
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int) =
        (((1 + <nth_1030@63:0>) > 0) &&
         ((1 <= <nth_1030@63:1>) || ((<nth_1030@63:1> = 0) && ((2 + <nth_1030@63:0>) <= 0))))
      upper bounds:
        P[<nth_1030@63:1>](var143:int,var144:int) = (var144 <> 0)
      begin GenHcSolver.classify_pids(32080)[4]
        output:
          [<nth_1030@63:1>]
      end GenHcSolver.classify_pids(32080)[4] (0.000000 sec.)
      lb:(((1 + <nth_1030@63:0>) > 0) &&
          ((1 <= <nth_1030@63:1>) || ((<nth_1030@63:1> = 0) && ((2 + <nth_1030@63:0>) <= 0))))
      nub:(not (<nth_1030@63:1> <> 0))
      begin ApronInterface.convex_hull_interpolate(32083)[4]
        lb:(((1 + <nth_1030@63:0>) > 0) &&
            ((1 <= <nth_1030@63:1>) || ((<nth_1030@63:1> = 0) && ((2 + <nth_1030@63:0>) <= 0))))
        nub:(not (<nth_1030@63:1> <> 0))
        lb':(((1 + <nth_1030@63:0>) > 0) &&
             ((1 <= <nth_1030@63:1>) || ((<nth_1030@63:1> = 0) && ((2 + <nth_1030@63:0>) <= 0))))
        nub':(not (<nth_1030@63:1> <> 0))
        begin InterpProver.interpolate(32084)[5]
          begin InterpProver.interpolate_fresh(32085)[6]
            begin InterpProver.interpolate_log(32086)[7]
              input1: (((1 + <nth_1030@63:0>) > 0) &&
                       ((1 <= <nth_1030@63:1>) || ((<nth_1030@63:1> = 0) && ((2 + <nth_1030@63:0>) <= 0))))
              input2: (not (<nth_1030@63:1> <> 0))
              begin InterpProver.interpolate_check(32087)[8]
                begin InterpProver.interpolate_simplify(32088)[9]
                  begin InterpProver.interpolate_quick(32181)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(32190)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(32191)[12]
                        begin CsisatInterface.interpolate_csisat_log(32192)[13]
                          input1: (((0 = v_sep_nth_1030_sep_63_sep_1 & (2 + v_sep_nth_1030_sep_63_sep_0) <= 0) | 1 <= v_sep_nth_1030_sep_63_sep_1) & 1 <= (1 + v_sep_nth_1030_sep_63_sep_0))
                          input2: 0 = v_sep_nth_1030_sep_63_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(32193)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(32193)[14] (0.001000 sec.)
                          output: not 0 = v_sep_nth_1030_sep_63_sep_1
                          
                        end CsisatInterface.interpolate_csisat_log(32192)[13] (0.001000 sec.)
                        after simplification: not 0 = v_sep_nth_1030_sep_63_sep_1
                        after dnf conversion: ((not 0 = v_sep_nth_1030_sep_63_sep_1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(32191)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(32190)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(32181)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(32088)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(32087)[8] (0.002999 sec.)
              output: (0 <> <nth_1030@63:1>)
            end InterpProver.interpolate_log(32086)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(32085)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(32084)[5] (0.002999 sec.)
        output:
          P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int) = (0 <> <nth_1030@63:1>)
      end ApronInterface.convex_hull_interpolate(32083)[4] (0.002999 sec.)
      begin HcSolver.check_validity(32586)[4]
        input:
          P[<fail_1565@66:0>](<fail_1565@66:0>:bool)|- bot
          
          P[<nth_1030@63:1>](<nth_1030@63:0>:int,0:int), <fail_1565@66:0> |- P[<fail_1565@66:0>](<fail_1565@66:0>:bool)
          
          P[<<make_list_1035@30:1>@59:0>]((1 + <nth_1030@63:0>):int,<nth_1030@63:1>:int), (
          (1 + <nth_1030@63:0>) > 0) |- P[<nth_1030@63:1>](<nth_1030@63:0>:int,
                                                           <nth_1030@63:1>:int)
          
          P[<make_list_1035@30:0>](<make_list_1035@30:0>:int),
          P[<<make_list_1035@33:1>@49:0>]((-1 + <make_list_1035@30:0>):int,(
                                          -1 + <<make_list_1035@30:1>@59:0>):int), (
          <make_list_1035@30:0> >= 0)
          |- P[<<make_list_1035@30:1>@59:0>](<make_list_1035@30:0>:int,
                                             <<make_list_1035@30:1>@59:0>:int)
          
          P[<make_list_1035@33:0>](<make_list_1035@33:0>:int),
          P[<<make_list_1035@36:1>@39:0>]((-1 + <make_list_1035@33:0>):int,(
                                          -1 + <<make_list_1035@33:1>@49:0>):int), (
          <make_list_1035@33:0> >= 0)
          |- P[<<make_list_1035@33:1>@49:0>](<make_list_1035@33:0>:int,
                                             <<make_list_1035@33:1>@49:0>:int)
          
          P[<make_list_1035@36:0>](<make_list_1035@36:0>:int),
          ((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> < 0))
          |- P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,
                                             <<make_list_1035@36:1>@39:0>:int)
          
          P[<make_list_1035@33:0>]((1 + <make_list_1035@36:0>):int), (
          (1 + <make_list_1035@36:0>) >= 0) |- P[<make_list_1035@36:0>](
          <make_list_1035@36:0>:int)
          
          P[<make_list_1035@30:0>]((1 + <make_list_1035@33:0>):int), (
          (1 + <make_list_1035@33:0>) >= 0) |- P[<make_list_1035@33:0>](
          <make_list_1035@33:0>:int)
          
           (<make_list_1035@30:0> > 0) |- P[<make_list_1035@30:0>](<make_list_1035@30:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(32586)[4] (0.008999 sec.)
      solution:
        P[<fail_1565@66:0>](<fail_1565@66:0>:bool) = false
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int) = (0 <> <nth_1030@63:1>)
        P[<<make_list_1035@30:1>@59:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int) =
        ((((1 + <make_list_1035@36:0>) <= 0) && (<<make_list_1035@36:1>@39:0> = 0)) ||
         (1 <= <<make_list_1035@36:1>@39:0>))
        P[<<make_list_1035@33:1>@49:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int) =
        ((((1 + <make_list_1035@36:0>) <= 0) && (<<make_list_1035@36:1>@39:0> = 0)) ||
         (1 <= <<make_list_1035@36:1>@39:0>))
        P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int) =
        ((((1 + <make_list_1035@36:0>) <= 0) && (<<make_list_1035@36:1>@39:0> = 0)) ||
         (1 <= <<make_list_1035@36:1>@39:0>))
        P[<make_list_1035@36:0>](<make_list_1035@30:0>:int) = true
        P[<make_list_1035@33:0>](<make_list_1035@30:0>:int) = true
        P[<make_list_1035@30:0>](<make_list_1035@30:0>:int) = true
    end GenHcSolver.solve(10592)[3] (0.134979 sec.)
    begin GenHcSolver.solve(34122)[3]
      Horn clauses:
        P[<fail_1565@66:0>](<fail_1565@66:0>:bool)|- bot
        
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,0:int), <fail_1565@66:0> |- P[<fail_1565@66:0>](<fail_1565@66:0>:bool)
        
        P[<<make_list_1035@30:1>@59:0>]((1 + <nth_1030@63:0>):int,<nth_1030@63:1>:int), (
        (1 + <nth_1030@63:0>) > 0) |- P[<nth_1030@63:1>](<nth_1030@63:0>:int,
                                                         <nth_1030@63:1>:int)
        
        P[<make_list_1035@30:0>](<make_list_1035@30:0>:int),
        P[<<make_list_1035@33:1>@49:0>]((-1 + <make_list_1035@30:0>):int,(
                                        -1 + <<make_list_1035@30:1>@59:0>):int), (
        <make_list_1035@30:0> >= 0)
        |- P[<<make_list_1035@30:1>@59:0>](<make_list_1035@30:0>:int,
                                           <<make_list_1035@30:1>@59:0>:int)
        
        P[<make_list_1035@33:0>](<make_list_1035@33:0>:int),
        P[<<make_list_1035@36:1>@39:0>]((-1 + <make_list_1035@33:0>):int,(
                                        -1 + <<make_list_1035@33:1>@49:0>):int), (
        <make_list_1035@33:0> >= 0)
        |- P[<<make_list_1035@33:1>@49:0>](<make_list_1035@33:0>:int,
                                           <<make_list_1035@33:1>@49:0>:int)
        
        P[<make_list_1035@36:0>](<make_list_1035@36:0>:int),
        ((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> < 0))
        |- P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,
                                           <<make_list_1035@36:1>@39:0>:int)
        
        P[<make_list_1035@33:0>]((1 + <make_list_1035@36:0>):int), ((1 + <make_list_1035@36:0>) >= 0)
        |- P[<make_list_1035@36:0>](<make_list_1035@36:0>:int)
        
        P[<make_list_1035@30:0>]((1 + <make_list_1035@33:0>):int), ((1 + <make_list_1035@33:0>) >= 0)
        |- P[<make_list_1035@33:0>](<make_list_1035@33:0>:int)
        
         (<make_list_1035@30:0> > 0) |- P[<make_list_1035@30:0>](<make_list_1035@30:0>:int)
      lower bounds:
        P[<make_list_1035@30:0>](<make_list_1035@30:0>:int) = (<make_list_1035@30:0> > 0)
        P[<make_list_1035@33:0>](<make_list_1035@33:0>:int) = ((1 + <make_list_1035@33:0>) > 0)
        P[<make_list_1035@36:0>](<make_list_1035@36:0>:int) = ((1 + <make_list_1035@36:0>) >= 0)
        P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int) =
        ((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> = -1))
        P[<<make_list_1035@33:1>@49:0>](<make_list_1035@33:0>:int,<<make_list_1035@33:1>@49:0>:int) =
        ((<make_list_1035@33:0> = 0) && (<<make_list_1035@33:1>@49:0> = 1))
        P[<<make_list_1035@30:1>@59:0>](<make_list_1035@30:0>:int,<<make_list_1035@30:1>@59:0>:int) =
        ((<make_list_1035@30:0> = 1) && (<<make_list_1035@30:1>@59:0> = 2))
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int) = ((<nth_1030@63:0> = 0) && (<nth_1030@63:1> = 2))
        P[<fail_1565@66:0>](<fail_1565@66:0>:bool) = false
      upper bounds:
        P[<<make_list_1035@30:1>@59:0>](var152:int,var153:int) = ((var153 <> 0) || (var152 <= 0))
        P[<<make_list_1035@33:1>@49:0>](var149:int,var150:int) = (((1 + var150) <> 0) || ((1 + var149) <= 0))
        P[<<make_list_1035@36:1>@39:0>](var146:int,var147:int) = (((2 + var147) <> 0) || ((1 + var146) < 0))
      begin GenHcSolver.classify_pids(38871)[4]
        output:
          [<<make_list_1035@36:1>@39:0>;<<make_list_1035@33:1>@49:0>;<<make_list_1035@30:1>@59:0>]
      end GenHcSolver.classify_pids(38871)[4] (0.002000 sec.)
      begin ApronInterface.convex_hull_interpolate(39000)[4]
        lb:(((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> = -1)) ||
            (((<make_list_1035@36:0> = 0) && (<<make_list_1035@36:1>@39:0> = 1)) ||
             ((<make_list_1035@36:0> = 1) && (<<make_list_1035@36:1>@39:0> = 2))))
        nub:((not (((2 + <<make_list_1035@36:1>@39:0>) <> 0) || ((1 + <make_list_1035@36:0>) < 0))) ||
             ((not (((1 + <<make_list_1035@36:1>@39:0>) <> 0) || ((1 + <make_list_1035@36:0>) <= 0))) ||
              (not ((<<make_list_1035@36:1>@39:0> <> 0) || (<make_list_1035@36:0> <= 0)))))
        begin ExtFormula.Formula.case_analysis_boolean(39028)[5]
          ts: (((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> = -1)) ||
               (((<make_list_1035@36:0> = 0) && (<<make_list_1035@36:1>@39:0> = 1)) ||
                ((<make_list_1035@36:0> = 1) && (<<make_list_1035@36:1>@39:0> = 2))))
          
        end ExtFormula.Formula.case_analysis_boolean(39028)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(39076)[5]
          ts: (((<<make_list_1035@36:1>@39:0> = -2) && ((1 + <make_list_1035@36:0>) >= 0)) ||
               (((<<make_list_1035@36:1>@39:0> = -1) && ((1 + <make_list_1035@36:0>) > 0)) ||
                ((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> > 0))))
          
        end ExtFormula.Formula.case_analysis_boolean(39076)[5] (0.001000 sec.)
        lb':((((-1 + <<make_list_1035@36:1>@39:0>) + (-1 * <make_list_1035@36:0>)) = 0) &&
             (((1 + (-1 * <make_list_1035@36:0>)) >= 0) && ((1 + <make_list_1035@36:0>) >= 0)))
        nub':(((-1 * <<make_list_1035@36:1>@39:0>) >= 0) &&
              (((2 + <<make_list_1035@36:1>@39:0>) >= 0) &&
               (((-1 + (-1 * <<make_list_1035@36:1>@39:0>)) + <make_list_1035@36:0>) >= 0)))
        begin InterpProver.interpolate(39089)[5]
          begin InterpProver.interpolate_fresh(39090)[6]
            begin InterpProver.interpolate_log(39091)[7]
              input1: ((((-1 + <<make_list_1035@36:1>@39:0>) + (-1 * <make_list_1035@36:0>)) = 0) &&
                       (((1 + (-1 * <make_list_1035@36:0>)) >= 0) && ((1 + <make_list_1035@36:0>) >= 0)))
              input2: (((-1 * <<make_list_1035@36:1>@39:0>) >= 0) &&
                       (((2 + <<make_list_1035@36:1>@39:0>) >= 0) &&
                        (((-1 + (-1 * <<make_list_1035@36:1>@39:0>)) + <make_list_1035@36:0>) >= 0)))
              begin InterpProver.interpolate_check(39092)[8]
                begin InterpProver.interpolate_simplify(39093)[9]
                  begin InterpProver.interpolate_quick(39246)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(39255)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(39256)[12]
                        begin CsisatInterface.interpolate_csisat_log(39257)[13]
                          input1: (v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 = (1 + v_sep_make_list_1035_sep_36_sep_0) & 0 <= (1 + v_sep_make_list_1035_sep_36_sep_0) & v_sep_make_list_1035_sep_36_sep_0 <= 1)
                          input2: (0 <= (2 + v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) & v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0 <= 0 & (1 + v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) <= v_sep_make_list_1035_sep_36_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(39258)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(39258)[14] (0.001000 sec.)
                          output: (v_sep_make_list_1035_sep_36_sep_0 + -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) <= -1
                          
                        end CsisatInterface.interpolate_csisat_log(39257)[13] (0.001000 sec.)
                        after simplification: (v_sep_make_list_1035_sep_36_sep_0 + -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) <= -1
                        after dnf conversion: (((v_sep_make_list_1035_sep_36_sep_0 + -1*v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0) <= -1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(39256)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(39255)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(39246)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(39093)[9] (0.003000 sec.)
                
              end InterpProver.interpolate_check(39092)[8] (0.003999 sec.)
              output: ((1 + <make_list_1035@36:0>) <= <<make_list_1035@36:1>@39:0>)
            end InterpProver.interpolate_log(39091)[7] (0.003999 sec.)
            
          end InterpProver.interpolate_fresh(39090)[6] (0.003999 sec.)
          
        end InterpProver.interpolate(39089)[5] (0.003999 sec.)
        output:
          P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int) =
          ((1 + <make_list_1035@36:0>) <= <<make_list_1035@36:1>@39:0>)
          P[<<make_list_1035@33:1>@49:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int) =
          ((1 + <make_list_1035@36:0>) <= <<make_list_1035@36:1>@39:0>)
          P[<<make_list_1035@30:1>@59:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int) =
          ((1 + <make_list_1035@36:0>) <= <<make_list_1035@36:1>@39:0>)
      end ApronInterface.convex_hull_interpolate(39000)[4] (0.004999 sec.)
      Horn clauses:
        P[<fail_1565@66:0>](<fail_1565@66:0>:bool)|- bot
        
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,0:int), <fail_1565@66:0> |- P[<fail_1565@66:0>](<fail_1565@66:0>:bool)
        
         (((1 + <nth_1030@63:0>) > 0) && ((2 + <nth_1030@63:0>) <= <nth_1030@63:1>))
        |- P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int)
        
        P[<make_list_1035@33:0>]((1 + <make_list_1035@36:0>):int), ((1 + <make_list_1035@36:0>) >= 0)
        |- P[<make_list_1035@36:0>](<make_list_1035@36:0>:int)
        
        P[<make_list_1035@30:0>]((1 + <make_list_1035@33:0>):int), ((1 + <make_list_1035@33:0>) >= 0)
        |- P[<make_list_1035@33:0>](<make_list_1035@33:0>:int)
        
         (<make_list_1035@30:0> > 0) |- P[<make_list_1035@30:0>](<make_list_1035@30:0>:int)
      lower bounds:
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int) =
        (((1 + <nth_1030@63:0>) > 0) && ((2 + <nth_1030@63:0>) <= <nth_1030@63:1>))
        P[<make_list_1035@30:0>](<make_list_1035@30:0>:int) = (<make_list_1035@30:0> > 0)
        P[<fail_1565@66:0>](<fail_1565@66:0>:bool) = false
        P[<make_list_1035@33:0>](<make_list_1035@33:0>:int) = ((1 + <make_list_1035@33:0>) > 0)
        P[<make_list_1035@36:0>](<make_list_1035@36:0>:int) = ((1 + <make_list_1035@36:0>) >= 0)
      upper bounds:
        P[<make_list_1035@36:0>](var156:int) = true
        P[<make_list_1035@33:0>](var155:int) = true
        P[<make_list_1035@30:0>](var154:int) = true
      begin GenHcSolver.classify_pids(44412)[4]
        output:
          [<make_list_1035@30:0>;<make_list_1035@33:0>;<make_list_1035@36:0>]
      end GenHcSolver.classify_pids(44412)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(44433)[4]
        lb:((<make_list_1035@30:0> > 0) || (((1 + <make_list_1035@30:0>) > 0) || ((1 + <make_list_1035@30:0>) >= 0)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(44450)[5]
          ts: ((1 + <make_list_1035@30:0>) >= 0)
          
        end ExtFormula.Formula.case_analysis_boolean(44450)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(44457)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(44457)[5] (0.000000 sec.)
        lb':((1 + <make_list_1035@30:0>) >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(44460)[5]
          begin InterpProver.interpolate_fresh(44461)[6]
            begin InterpProver.interpolate_log(44462)[7]
              input1: ((1 + <make_list_1035@30:0>) >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(44463)[8]
                begin InterpProver.interpolate_simplify(44464)[9]
                  begin InterpProver.interpolate_quick(44482)[10]
                    
                  end InterpProver.interpolate_quick(44482)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(44464)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(44463)[8] (0.000999 sec.)
              output: true
            end InterpProver.interpolate_log(44462)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(44461)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(44460)[5] (0.000999 sec.)
        output:
          P[<make_list_1035@30:0>](<make_list_1035@30:0>:int) = true
          P[<make_list_1035@33:0>](<make_list_1035@30:0>:int) = true
          P[<make_list_1035@36:0>](<make_list_1035@30:0>:int) = true
      end ApronInterface.convex_hull_interpolate(44433)[4] (0.001999 sec.)
      Horn clauses:
        P[<fail_1565@66:0>](<fail_1565@66:0>:bool)|- bot
        
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,0:int), <fail_1565@66:0> |- P[<fail_1565@66:0>](<fail_1565@66:0>:bool)
        
         (((1 + <nth_1030@63:0>) > 0) && ((2 + <nth_1030@63:0>) <= <nth_1030@63:1>))
        |- P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int)
      lower bounds:
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int) =
        (((1 + <nth_1030@63:0>) > 0) && ((2 + <nth_1030@63:0>) <= <nth_1030@63:1>))
        P[<fail_1565@66:0>](<fail_1565@66:0>:bool) = false
      upper bounds:
        P[<fail_1565@66:0>](var158:bool) = true
      begin GenHcSolver.classify_pids(46462)[4]
        output:
          [<fail_1565@66:0>]
      end GenHcSolver.classify_pids(46462)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(46465)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(46468)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(46468)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(46473)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(46473)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(46476)[5]
          begin InterpProver.interpolate_fresh(46477)[6]
            begin InterpProver.interpolate_log(46478)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(46479)[8]
                begin InterpProver.interpolate_simplify(46480)[9]
                  begin InterpProver.interpolate_quick(46495)[10]
                    
                  end InterpProver.interpolate_quick(46495)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(46499)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(46499)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(46480)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(46479)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(46478)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(46477)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(46476)[5] (0.001000 sec.)
        output:
          P[<fail_1565@66:0>](<fail_1565@66:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(46465)[4] (0.001000 sec.)
      Horn clauses:
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,0:int)|- bot
        
         (((1 + <nth_1030@63:0>) > 0) && ((2 + <nth_1030@63:0>) <= <nth_1030@63:1>))
        |- P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int)
      lower bounds:
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int) =
        (((1 + <nth_1030@63:0>) > 0) && ((2 + <nth_1030@63:0>) <= <nth_1030@63:1>))
      upper bounds:
        P[<nth_1030@63:1>](var159:int,var160:int) = (var160 <> 0)
      begin GenHcSolver.classify_pids(47424)[4]
        output:
          [<nth_1030@63:1>]
      end GenHcSolver.classify_pids(47424)[4] (0.000000 sec.)
      lb:(((1 + <nth_1030@63:0>) > 0) && ((2 + <nth_1030@63:0>) <= <nth_1030@63:1>))
      nub:(not (<nth_1030@63:1> <> 0))
      begin ApronInterface.convex_hull_interpolate(47427)[4]
        lb:(((1 + <nth_1030@63:0>) > 0) && ((2 + <nth_1030@63:0>) <= <nth_1030@63:1>))
        nub:(not (<nth_1030@63:1> <> 0))
        begin ExtFormula.Formula.case_analysis_boolean(47448)[5]
          ts: (((1 + <nth_1030@63:0>) > 0) && ((2 + <nth_1030@63:0>) <= <nth_1030@63:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(47448)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(47459)[5]
          ts: (<nth_1030@63:1> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(47459)[5] (0.000000 sec.)
        lb':((((-2 + <nth_1030@63:1>) + (-1 * <nth_1030@63:0>)) >= 0) && (<nth_1030@63:0> >= 0))
        nub':(<nth_1030@63:1> = 0)
        begin InterpProver.interpolate(47463)[5]
          begin InterpProver.interpolate_fresh(47464)[6]
            begin InterpProver.interpolate_log(47465)[7]
              input1: ((((-2 + <nth_1030@63:1>) + (-1 * <nth_1030@63:0>)) >= 0) && (<nth_1030@63:0> >= 0))
              input2: (<nth_1030@63:1> = 0)
              begin InterpProver.interpolate_check(47466)[8]
                begin InterpProver.interpolate_simplify(47467)[9]
                  begin InterpProver.interpolate_quick(47512)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(47521)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(47522)[12]
                        begin CsisatInterface.interpolate_csisat_log(47523)[13]
                          input1: (0 <= v_sep_nth_1030_sep_63_sep_0 & (2 + v_sep_nth_1030_sep_63_sep_0) <= v_sep_nth_1030_sep_63_sep_1)
                          input2: 0 = v_sep_nth_1030_sep_63_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(47524)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(47524)[14] (0.000000 sec.)
                          output: -1*v_sep_nth_1030_sep_63_sep_1 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(47523)[13] (0.000000 sec.)
                        after simplification: -1*v_sep_nth_1030_sep_63_sep_1 <= -2
                        after dnf conversion: ((-1*v_sep_nth_1030_sep_63_sep_1 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(47522)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(47521)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(47512)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(47467)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(47466)[8] (0.000000 sec.)
              output: (2 <= <nth_1030@63:1>)
            end InterpProver.interpolate_log(47465)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(47464)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(47463)[5] (0.000000 sec.)
        output:
          P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int) = (2 <= <nth_1030@63:1>)
      end ApronInterface.convex_hull_interpolate(47427)[4] (0.000000 sec.)
      begin HcSolver.check_validity(47771)[4]
        input:
          P[<fail_1565@66:0>](<fail_1565@66:0>:bool)|- bot
          
          P[<nth_1030@63:1>](<nth_1030@63:0>:int,0:int), <fail_1565@66:0> |- P[<fail_1565@66:0>](<fail_1565@66:0>:bool)
          
          P[<<make_list_1035@30:1>@59:0>]((1 + <nth_1030@63:0>):int,<nth_1030@63:1>:int), (
          (1 + <nth_1030@63:0>) > 0) |- P[<nth_1030@63:1>](<nth_1030@63:0>:int,
                                                           <nth_1030@63:1>:int)
          
          P[<make_list_1035@30:0>](<make_list_1035@30:0>:int),
          P[<<make_list_1035@33:1>@49:0>]((-1 + <make_list_1035@30:0>):int,(
                                          -1 + <<make_list_1035@30:1>@59:0>):int), (
          <make_list_1035@30:0> >= 0)
          |- P[<<make_list_1035@30:1>@59:0>](<make_list_1035@30:0>:int,
                                             <<make_list_1035@30:1>@59:0>:int)
          
          P[<make_list_1035@33:0>](<make_list_1035@33:0>:int),
          P[<<make_list_1035@36:1>@39:0>]((-1 + <make_list_1035@33:0>):int,(
                                          -1 + <<make_list_1035@33:1>@49:0>):int), (
          <make_list_1035@33:0> >= 0)
          |- P[<<make_list_1035@33:1>@49:0>](<make_list_1035@33:0>:int,
                                             <<make_list_1035@33:1>@49:0>:int)
          
          P[<make_list_1035@36:0>](<make_list_1035@36:0>:int),
          ((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> < 0))
          |- P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,
                                             <<make_list_1035@36:1>@39:0>:int)
          
          P[<make_list_1035@33:0>]((1 + <make_list_1035@36:0>):int), (
          (1 + <make_list_1035@36:0>) >= 0) |- P[<make_list_1035@36:0>](
          <make_list_1035@36:0>:int)
          
          P[<make_list_1035@30:0>]((1 + <make_list_1035@33:0>):int), (
          (1 + <make_list_1035@33:0>) >= 0) |- P[<make_list_1035@33:0>](
          <make_list_1035@33:0>:int)
          
           (<make_list_1035@30:0> > 0) |- P[<make_list_1035@30:0>](<make_list_1035@30:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(47771)[4] (0.004999 sec.)
      solution:
        P[<fail_1565@66:0>](<fail_1565@66:0>:bool) = false
        P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int) = (2 <= <nth_1030@63:1>)
        P[<<make_list_1035@30:1>@59:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int) =
        ((1 + <make_list_1035@36:0>) <= <<make_list_1035@36:1>@39:0>)
        P[<<make_list_1035@33:1>@49:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int) =
        ((1 + <make_list_1035@36:0>) <= <<make_list_1035@36:1>@39:0>)
        P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,<<make_list_1035@36:1>@39:0>:int) =
        ((1 + <make_list_1035@36:0>) <= <<make_list_1035@36:1>@39:0>)
        P[<make_list_1035@36:0>](<make_list_1035@30:0>:int) = true
        P[<make_list_1035@33:0>](<make_list_1035@30:0>:int) = true
        P[<make_list_1035@30:0>](<make_list_1035@30:0>:int) = true
    end GenHcSolver.solve(34122)[3] (0.058991 sec.)
    begin YhornInterface.solve(48580)[3]
      begin HcSolver.solve_ub(48581)[4]
        encoded:
          P[<fail_1565@66:0>](<fail_1565@66:0>:int)|- bot
          
          P[<nth_1030@63:1>](<nth_1030@63:0>:int,0:int), (<fail_1565@66:0> = 1)
          |- P[<fail_1565@66:0>](<fail_1565@66:0>:int)
          
          P[<<make_list_1035@30:1>@59:0>]((1 + <nth_1030@63:0>):int,<nth_1030@63:1>:int), (
          (1 + <nth_1030@63:0>) > 0) |- P[<nth_1030@63:1>](<nth_1030@63:0>:int,
                                                           <nth_1030@63:1>:int)
          
          P[<make_list_1035@30:0>](<make_list_1035@30:0>:int),
          P[<<make_list_1035@33:1>@49:0>]((-1 + <make_list_1035@30:0>):int,(
                                          -1 + <<make_list_1035@30:1>@59:0>):int), (
          <make_list_1035@30:0> >= 0)
          |- P[<<make_list_1035@30:1>@59:0>](<make_list_1035@30:0>:int,
                                             <<make_list_1035@30:1>@59:0>:int)
          
          P[<make_list_1035@33:0>](<make_list_1035@33:0>:int),
          P[<<make_list_1035@36:1>@39:0>]((-1 + <make_list_1035@33:0>):int,(
                                          -1 + <<make_list_1035@33:1>@49:0>):int), (
          <make_list_1035@33:0> >= 0)
          |- P[<<make_list_1035@33:1>@49:0>](<make_list_1035@33:0>:int,
                                             <<make_list_1035@33:1>@49:0>:int)
          
          P[<make_list_1035@36:0>](<make_list_1035@36:0>:int),
          ((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> < 0))
          |- P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,
                                             <<make_list_1035@36:1>@39:0>:int)
          
          P[<make_list_1035@33:0>]((1 + <make_list_1035@36:0>):int), (
          (1 + <make_list_1035@36:0>) >= 0) |- P[<make_list_1035@36:0>](
          <make_list_1035@36:0>:int)
          
          P[<make_list_1035@30:0>]((1 + <make_list_1035@33:0>):int), (
          (1 + <make_list_1035@33:0>) >= 0) |- P[<make_list_1035@33:0>](
          <make_list_1035@33:0>:int)
          
           (<make_list_1035@30:0> > 0) |- P[<make_list_1035@30:0>](<make_list_1035@30:0>:int)
        input to Yhorn:
          P[<fail_1565@66:0>](<fail_1565@66:0>:int)|- bot
          
          P[<nth_1030@63:1>](<nth_1030@63:0>:int,var161:int), ((var161 = 0) && (<fail_1565@66:0> = 1))
          |- P[<fail_1565@66:0>](<fail_1565@66:0>:int)
          
          P[<<make_list_1035@30:1>@59:0>](var162:int,<nth_1030@63:1>:int),
          ((var162 = (1 + <nth_1030@63:0>)) && ((1 + <nth_1030@63:0>) > 0))
          |- P[<nth_1030@63:1>](<nth_1030@63:0>:int,<nth_1030@63:1>:int)
          
          P[<make_list_1035@30:0>](<make_list_1035@30:0>:int),
          P[<<make_list_1035@33:1>@49:0>](var163:int,var164:int),
          (((1 + var164) = <<make_list_1035@30:1>@59:0>) &&
           (((1 + var163) = <make_list_1035@30:0>) && (<make_list_1035@30:0> >= 0)))
          |- P[<<make_list_1035@30:1>@59:0>](<make_list_1035@30:0>:int,
                                             <<make_list_1035@30:1>@59:0>:int)
          
          P[<make_list_1035@33:0>](<make_list_1035@33:0>:int),
          P[<<make_list_1035@36:1>@39:0>](var165:int,var166:int),
          (((1 + var166) = <<make_list_1035@33:1>@49:0>) &&
           (((1 + var165) = <make_list_1035@33:0>) && (<make_list_1035@33:0> >= 0)))
          |- P[<<make_list_1035@33:1>@49:0>](<make_list_1035@33:0>:int,
                                             <<make_list_1035@33:1>@49:0>:int)
          
          P[<make_list_1035@36:0>](<make_list_1035@36:0>:int),
          ((<make_list_1035@36:0> < 0) && (<<make_list_1035@36:1>@39:0> = 0))
          |- P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,
                                             <<make_list_1035@36:1>@39:0>:int)
          
          P[<make_list_1035@33:0>](var167:int),
          ((var167 = (1 + <make_list_1035@36:0>)) && ((1 + <make_list_1035@36:0>) >= 0))
          |- P[<make_list_1035@36:0>](<make_list_1035@36:0>:int)
          
          P[<make_list_1035@30:0>](var168:int),
          ((var168 = (1 + <make_list_1035@33:0>)) && ((1 + <make_list_1035@33:0>) >= 0))
          |- P[<make_list_1035@33:0>](<make_list_1035@33:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1565_sep_66_sep_0($104)) -> 1=0.
(($104-1=0) & ($105=0)) & (v_sep_nth_1030_sep_63_sep_1($106,$105)) -> v_sep_fail_1565_sep_66_sep_0($104).
(($106+1>0) & (-$106+$107-1=0)) & (v_sep_make_list_1035_sep_30_sep_1_sep_59_sep_0($107,$108)) -> v_sep_nth_1030_sep_63_sep_1($106,$108).
(($109>=0) & (-$109+$110+1=0) & ($111-$112+1=0)) & (v_sep_make_list_1035_sep_33_sep_1_sep_49_sep_0($110,$111)) & (v_sep_make_list_1035_sep_30_sep_0($109)) -> v_sep_make_list_1035_sep_30_sep_1_sep_59_sep_0($109,$112).
(($113>=0) & (-$113+$114+1=0) & ($115-$116+1=0)) & (v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0($114,$115)) & (v_sep_make_list_1035_sep_33_sep_0($113)) -> v_sep_make_list_1035_sep_33_sep_1_sep_49_sep_0($113,$116).
(($117=0) & ($118<0)) & (v_sep_make_list_1035_sep_36_sep_0($118)) -> v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0($118,$117).
(($118+1>=0) & (-$118+$119-1=0)) & (v_sep_make_list_1035_sep_33_sep_0($119)) -> v_sep_make_list_1035_sep_36_sep_0($118).
(($113+1>=0) & (-$113+$120-1=0)) & (v_sep_make_list_1035_sep_30_sep_0($120)) -> v_sep_make_list_1035_sep_33_sep_0($113).
$109>0 -> v_sep_make_list_1035_sep_30_sep_0($109).


v_sep_fail_1565_sep_66_sep_0: X
v_sep_make_list_1035_sep_30_sep_0: X
v_sep_make_list_1035_sep_30_sep_1_sep_59_sep_0: X
v_sep_make_list_1035_sep_33_sep_0: X
v_sep_make_list_1035_sep_33_sep_1_sep_49_sep_0: X
v_sep_make_list_1035_sep_36_sep_0: X
v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0: X
v_sep_nth_1030_sep_63_sep_1: X
...........
v_sep_fail_1565_sep_66_sep_0: X
v_sep_make_list_1035_sep_30_sep_0: X
v_sep_make_list_1035_sep_30_sep_1_sep_59_sep_0: X
v_sep_make_list_1035_sep_33_sep_0: X
v_sep_make_list_1035_sep_33_sep_1_sep_49_sep_0: X
v_sep_make_list_1035_sep_36_sep_0: X
v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0: X
v_sep_nth_1030_sep_63_sep_1: X
...
v_sep_fail_1565_sep_66_sep_0: X
v_sep_make_list_1035_sep_30_sep_0: X
v_sep_make_list_1035_sep_30_sep_1_sep_59_sep_0: X
v_sep_make_list_1035_sep_33_sep_0: X
v_sep_make_list_1035_sep_33_sep_1_sep_49_sep_0: X
v_sep_make_list_1035_sep_36_sep_0: X
v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0: X
v_sep_nth_1030_sep_63_sep_1: X
....
v_sep_fail_1565_sep_66_sep_0: X
v_sep_make_list_1035_sep_30_sep_0: X
v_sep_make_list_1035_sep_30_sep_1_sep_59_sep_0: X
v_sep_make_list_1035_sep_33_sep_0: X
v_sep_make_list_1035_sep_33_sep_1_sep_49_sep_0: X
v_sep_make_list_1035_sep_36_sep_0: X
v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0: X
v_sep_nth_1030_sep_63_sep_1: X
......
v_sep_fail_1565_sep_66_sep_0: X
v_sep_make_list_1035_sep_30_sep_0: X
v_sep_make_list_1035_sep_30_sep_1_sep_59_sep_0: X
v_sep_make_list_1035_sep_33_sep_0: X
v_sep_make_list_1035_sep_33_sep_1_sep_49_sep_0: X
v_sep_make_list_1035_sep_36_sep_0: X
v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0: X
v_sep_nth_1030_sep_63_sep_1: X
........
v_sep_fail_1565_sep_66_sep_0: X
v_sep_make_list_1035_sep_30_sep_0: X
v_sep_make_list_1035_sep_30_sep_1_sep_59_sep_0: X
v_sep_make_list_1035_sep_33_sep_0: X
v_sep_make_list_1035_sep_33_sep_1_sep_49_sep_0: X
v_sep_make_list_1035_sep_36_sep_0: X
v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0: X
v_sep_nth_1030_sep_63_sep_1: X
..........
v_sep_fail_1565_sep_66_sep_0: X
v_sep_make_list_1035_sep_30_sep_0: X
v_sep_make_list_1035_sep_30_sep_1_sep_59_sep_0: X
v_sep_make_list_1035_sep_33_sep_0: X
v_sep_make_list_1035_sep_33_sep_1_sep_49_sep_0: X
v_sep_make_list_1035_sep_36_sep_0: X
v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0: X
v_sep_nth_1030_sep_63_sep_1: X
...........(0=0) & (v_sep_fail_1565_sep_66_sep_0($104)) -> 1=0.
(($104-1=0) & ($105=0)) & (v_sep_nth_1030_sep_63_sep_1($106,$105)) -> v_sep_fail_1565_sep_66_sep_0($104).
(($106+1>0) & (-$106+$107-1=0)) & (v_sep_make_list_1035_sep_30_sep_1_sep_59_sep_0($107,$108)) -> v_sep_nth_1030_sep_63_sep_1($106,$108).
(($109>=0) & (-$109+$110+1=0) & ($111-$112+1=0)) & (v_sep_make_list_1035_sep_33_sep_1_sep_49_sep_0($110,$111)) & (v_sep_make_list_1035_sep_30_sep_0($109)) -> v_sep_make_list_1035_sep_30_sep_1_sep_59_sep_0($109,$112).
(($113>=0) & (-$113+$114+1=0) & ($115-$116+1=0)) & (v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0($114,$115)) & (v_sep_make_list_1035_sep_33_sep_0($113)) -> v_sep_make_list_1035_sep_33_sep_1_sep_49_sep_0($113,$116).
(($117=0) & ($118<0)) & (v_sep_make_list_1035_sep_36_sep_0($118)) -> v_sep_make_list_1035_sep_36_sep_1_sep_39_sep_0($118,$117).
(($118+1>=0) & (-$118+$119-1=0)) & (v_sep_make_list_1035_sep_33_sep_0($119)) -> v_sep_make_list_1035_sep_36_sep_0($118).
(($113+1>=0) & (-$113+$120-1=0)) & (v_sep_make_list_1035_sep_30_sep_0($120)) -> v_sep_make_list_1035_sep_33_sep_0($113).
$109>0 -> v_sep_make_list_1035_sep_30_sep_0($109).

           (<make_list_1035@30:0> > 0) |- P[<make_list_1035@30:0>](<make_list_1035@30:0>:int)
        solution:
          P[<fail_1565@66:0>]($121:bool) = false
          P[<make_list_1035@30:0>]($139:int) = true
          P[<<make_list_1035@30:1>@59:0>]($129:int,$131:int) = (2 <= $131)
          P[<make_list_1035@33:0>]($147:int) = true
          P[<<make_list_1035@33:1>@49:0>]($134:int,$136:int) = (1 <= $136)
          P[<make_list_1035@36:0>]($150:int) = true
          P[<<make_list_1035@36:1>@39:0>]($142:int,$144:int) = (0 <= $144)
          P[<nth_1030@63:1>]($124:int,$126:int) = (2 <= $126)
        
      end HcSolver.solve_ub(48581)[4] (0.036994 sec.)
      begin HcSolver.check_validity(49030)[4]
        input:
          P[<fail_1565@66:0>](<fail_1565@66:0>:bool)|- bot
          
          P[<nth_1030@63:1>](<nth_1030@63:0>:int,0:int), <fail_1565@66:0> |- P[<fail_1565@66:0>](<fail_1565@66:0>:bool)
          
          P[<<make_list_1035@30:1>@59:0>]((1 + <nth_1030@63:0>):int,<nth_1030@63:1>:int), (
          (1 + <nth_1030@63:0>) > 0) |- P[<nth_1030@63:1>](<nth_1030@63:0>:int,
                                                           <nth_1030@63:1>:int)
          
          P[<make_list_1035@30:0>](<make_list_1035@30:0>:int),
          P[<<make_list_1035@33:1>@49:0>]((-1 + <make_list_1035@30:0>):int,(
                                          -1 + <<make_list_1035@30:1>@59:0>):int), (
          <make_list_1035@30:0> >= 0)
          |- P[<<make_list_1035@30:1>@59:0>](<make_list_1035@30:0>:int,
                                             <<make_list_1035@30:1>@59:0>:int)
          
          P[<make_list_1035@33:0>](<make_list_1035@33:0>:int),
          P[<<make_list_1035@36:1>@39:0>]((-1 + <make_list_1035@33:0>):int,(
                                          -1 + <<make_list_1035@33:1>@49:0>):int), (
          <make_list_1035@33:0> >= 0)
          |- P[<<make_list_1035@33:1>@49:0>](<make_list_1035@33:0>:int,
                                             <<make_list_1035@33:1>@49:0>:int)
          
          P[<make_list_1035@36:0>](<make_list_1035@36:0>:int),
          ((<<make_list_1035@36:1>@39:0> = 0) && (<make_list_1035@36:0> < 0))
          |- P[<<make_list_1035@36:1>@39:0>](<make_list_1035@36:0>:int,
                                             <<make_list_1035@36:1>@39:0>:int)
          
          P[<make_list_1035@33:0>]((1 + <make_list_1035@36:0>):int), (
          (1 + <make_list_1035@36:0>) >= 0) |- P[<make_list_1035@36:0>](
          <make_list_1035@36:0>:int)
          
          P[<make_list_1035@30:0>]((1 + <make_list_1035@33:0>):int), (
          (1 + <make_list_1035@33:0>) >= 0) |- P[<make_list_1035@33:0>](
          <make_list_1035@33:0>:int)
          
           (<make_list_1035@30:0> > 0) |- P[<make_list_1035@30:0>](<make_list_1035@30:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(49030)[4] (0.009999 sec.)
      solution:
        P[<fail_1565@66:0>]($121:bool) = false
        P[<make_list_1035@30:0>]($139:int) = true
        P[<<make_list_1035@30:1>@59:0>]($129:int,$131:int) = (2 <= $131)
        P[<make_list_1035@33:0>]($147:int) = true
        P[<<make_list_1035@33:1>@49:0>]($134:int,$136:int) = (1 <= $136)
        P[<make_list_1035@36:0>]($150:int) = true
        P[<<make_list_1035@36:1>@39:0>]($142:int,$144:int) = (0 <= $144)
        P[<nth_1030@63:1>]($124:int,$126:int) = (2 <= $126)
    end YhornInterface.solve(48580)[3] (0.047993 sec.)
    
  end RefTypeInfer.infer_etrs(7729)[2] (0.317953 sec.)
  refinement types:
    main_1553: X
    f_1561: v1:int -> X
    main_1037: v1:int -> (v2:int -> X) -> X
    make_list_1035: v1:int -> (v2:{v2:int | ((1 + v1) <= v2)} -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    make_list_1035: v1:int -> (v2:{v2:int | ((1 + v1) <= v2)} -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    make_list_1035: v1:int -> (v2:{v2:int | ((1 + v1) <= v2)} -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_make_list_1559: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1099: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_make_list_1559: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1099: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_1560: v1:int -> (v2:int -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    nth_1030: v1:int -> v2:{v2:int | (2 <= v2)} -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    fail_1565: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_nth_1563: var238:bool ->
                 var237:int -> var236:int -> (var235:int -> (var234:int -> X) -> X) -> (var231:int -> X) -> X
    f_1562: var241:int -> var240:int -> X
    f_cons_make_list_1558: var252:int ->
                           var251:int ->
                           var250:int -> (var249:int -> (var248:int -> X) -> X) -> var245:int -> (var244:int -> X) -> X
    f_make_list_1557: var257:int -> var256:int -> (var255:int -> X) -> X
    f_nth_1554: var261:int -> var260:int -> var259:unit -> X
    f_nth_1555: var271:int ->
                var270:int -> (var269:int -> X) -> (var267:int -> (var266:int -> X) -> X) -> var263:int -> X
    f_nth_1556: var282:int ->
                var281:int ->
                var280:int -> (var279:int -> (var278:int -> X) -> X) -> var275:int -> (var274:int -> X) -> X
  abstraction types:
    main_1553: X
    f_1561: v1:int -> X
    main_1037: v1:int -> (v2:int -> X) -> X
    make_list_1035: var291:int ->
                    (var292:int[var292 -> ((1 + var291) <= var292)] -> (var293:int -> (var294:int -> X) -> X) -> X) ->
                    X
    f_make_list_1559: var299:int ->
                      (var300:int -> (var301:int -> (var302:int -> X) -> X) -> X) ->
                      var306:int -> (var307:int -> (var308:int -> X) -> X) -> X
    cons_make_list_1099: var312:int ->
                         var313:int ->
                         var314:int ->
                         (var315:int -> (var316:int -> X) -> X) ->
                         (var319:int -> (var320:int -> (var321:int -> X) -> X) -> X) -> X
    f_main_1560: v1:int -> (v2:int -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    nth_1030: v1:int -> v2:int[v2 -> (2 <= v2)] -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    fail_1565: v1:bool -> (v2:unit -> X) -> X
    br_nth_1563: var238:bool ->
                 var237:int -> var236:int -> (var235:int -> (var234:int -> X) -> X) -> (var231:int -> X) -> X
    f_1562: var241:int -> var240:int -> X
    f_cons_make_list_1558: var252:int ->
                           var251:int ->
                           var250:int -> (var249:int -> (var248:int -> X) -> X) -> var245:int -> (var244:int -> X) -> X
    f_make_list_1557: var257:int -> var256:int -> (var255:int -> X) -> X
    f_nth_1554: var261:int -> var260:int -> var259:unit -> X
    f_nth_1555: var271:int ->
                var270:int -> (var269:int -> X) -> (var267:int -> (var266:int -> X) -> X) -> var263:int -> X
    f_nth_1556: var282:int ->
                var281:int ->
                var280:int -> (var279:int -> (var278:int -> X) -> X) -> var275:int -> (var274:int -> X) -> X
  
end AbsTypeInfer.refine(7728)[1] (0.324951 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 0; 0; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1553
  main_1553 -> (rand_int f_1561)
  br_nth_1563 b_1564 n_1031 xs1_1032 xs2_1032 k_nth_1156 when b_1564 ->
      (xs2_1032 0 (f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032))
  br_nth_1563 b_1564 n_1031 xs1_1032 xs2_1032 k_nth_1156 when (not b_1564) -> _|_
  cons_make_list_1099 n_1036 x_1097 xs1_1098 xs2_1098 k_make_list_cons_make_list_1347 ->
      (k_make_list_cons_make_list_1347 (xs1_1098 + 1) (f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098))
  f_1561 x_1495 -> (main_1037 x_1495 (f_1562 x_1495))
  f_1562 x_1495 x_1492 -> end
  f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098 i_1096 k_make_list_cons_make_list_1362 when (
      i_1096 = 0) -> (k_make_list_cons_make_list_1362 x_1097)
  f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098 i_1096 k_make_list_cons_make_list_1362 when (
      not (i_1096 = 0)) -> (xs2_1098 (i_1096 - 1) k_make_list_cons_make_list_1362)
  f_main_1560 n_1038 k_main_1446 x1_1485 x2_1485 -> (nth_1030 (n_1038 - 1) x1_1485 x2_1485 k_main_1446)
  f_make_list_1557 n_1036 x_1103 k_make_list_1300 -> _|_
  f_make_list_1559 n_1036 k_make_list_1288 x1_1425 x2_1425 ->
      (cons_make_list_1099 n_1036 n_1036 x1_1425 x2_1425 k_make_list_1288)
  f_nth_1554 n_1031 xs1_1032 x_1162 -> _|_
  f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032 x_1215 when (n_1031 = 0) -> (k_nth_1156 x_1215)
  f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032 x_1215 when (not (n_1031 = 0)) ->
      (nth_1030 (n_1031 - 1) (xs1_1032 - 1) (f_nth_1556 n_1031 x_1215 xs1_1032 xs2_1032) k_nth_1156)
  f_nth_1556 n_1031 x_1215 xs1_1032 xs2_1032 x_1070 k_nth_xs'_1201 -> (xs2_1032 (x_1070 + 1) k_nth_xs'_1201)
  fail_1565 b k -> {fail} => (k ())
  main_1037 n_1038 k_main_1446 when (n_1038 > 0) -> (make_list_1035 n_1038 (f_main_1560 n_1038 k_main_1446))
  main_1037 n_1038 k_main_1446 when (not (n_1038 > 0)) -> (k_main_1446 0)
  make_list_1035 n_1036 k_make_list_1288 when (n_1036 < 0) -> (k_make_list_1288 0 (f_make_list_1557 n_1036))
  make_list_1035 n_1036 k_make_list_1288 when (not (n_1036 < 0)) ->
      (make_list_1035 (n_1036 - 1) (f_make_list_1559 n_1036 k_make_list_1288))
  nth_1030 n_1031 xs1_1032 xs2_1032 k_nth_1156 when (xs1_1032 = 0) -> (fail_1565 true (f_nth_1554 n_1031 xs1_1032))
  nth_1030 n_1031 xs1_1032 xs2_1032 k_nth_1156 when (not (xs1_1032 = 0)) ->
      (br_nth_1563 (1 <= xs1_1032) n_1031 xs1_1032 xs2_1032 k_nth_1156)
Types:
  main_1553 : X
  fail_1565 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1035 : (x_1:int[x_1 >= 1] -> (x_3:int[x_1 <= x_3 - 1] -> (int -> (int -> X) -> X) -> X) -> X)
  nth_1030 : (int -> x_2:int[x_2 >= 2] -> (int -> (int -> X) -> X) -> (int -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1553 ... --> 
  f_1561 ... --> 
  main_1037 [1/2] ... --> 
  make_list_1035 [2/2] ... --> 
  make_list_1035 [2/2] ... --> 
  make_list_1035 [1/2] ... --> 
  f_make_list_1559 ... --> 
  cons_make_list_1099 ... --> 
  f_make_list_1559 ... --> 
  cons_make_list_1099 ... --> 
  f_main_1560 ... --> 
  nth_1030 [2/2] ... --> 
  br_nth_1563 [1/2] ... --> 
  f_cons_make_list_1558 [1/2] ... --> 
  f_nth_1555 [2/2] ... --> 
  nth_1030 [1/2] ... --> 
  fail_1565 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 1; 0; 0; 0; 0; 0; 0; 1; 0; 0; 1; 0; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(50264)[1]
  program:
    main_1553  | true = ((Random.int 0) f_1561)
    br_nth_1563 b_1564 n_1031 xs1_1032 xs2_1032 k_nth_1156 | b_1564 = (
    xs2_1032 0
             (f_nth_1555 n_1031
                         xs1_1032
                         k_nth_1156
                         xs2_1032))
    br_nth_1563 b_1564 n_1031 xs1_1032 xs2_1032 k_nth_1156 | (not b_1564) = bot
    cons_make_list_1099 n_1036 x_1097 xs1_1098 xs2_1098 k_make_list_cons_make_list_1347 | true = (
    k_make_list_cons_make_list_1347 (xs1_1098 + 1)
                                    (f_cons_make_list_1558 n_1036
                                                           x_1097
                                                           xs1_1098
                                                           xs2_1098))
    f_1561 x_1495 | true = (main_1037 x_1495
                                      (f_1562 x_1495))
    f_1562 x_1495 x_1492 | true = end
    f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098 i_1096 k_make_list_cons_make_list_1362 | (
    i_1096 = 0) = (k_make_list_cons_make_list_1362 x_1097)
    f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098 i_1096 k_make_list_cons_make_list_1362 | (
    not (i_1096 = 0)) = (xs2_1098 (i_1096 - 1)
                                  k_make_list_cons_make_list_1362)
    f_main_1560 n_1038 k_main_1446 x1_1485 x2_1485 | true = (nth_1030 (
                                                                    n_1038 - 1)
                                                                    x1_1485
                                                                    x2_1485
                                                                    k_main_1446)
    f_make_list_1557 n_1036 x_1103 k_make_list_1300 | true = bot
    f_make_list_1559 n_1036 k_make_list_1288 x1_1425 x2_1425 | true = (
    cons_make_list_1099 n_1036
                        n_1036
                        x1_1425
                        x2_1425
                        k_make_list_1288)
    f_nth_1554 n_1031 xs1_1032 x_1162 | true = bot
    f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032 x_1215 | (n_1031 = 0) = (
    k_nth_1156 x_1215)
    f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032 x_1215 | (not (n_1031 = 0)) = (
    nth_1030 (n_1031 - 1)
             (xs1_1032 - 1)
             (f_nth_1556 n_1031
                         x_1215
                         xs1_1032
                         xs2_1032)
             k_nth_1156)
    f_nth_1556 n_1031 x_1215 xs1_1032 xs2_1032 x_1070 k_nth_xs'_1201 | true = (
    xs2_1032 (x_1070 + 1)
             k_nth_xs'_1201)
    fail_1565 b k | true = (fail ())
    main_1037 n_1038 k_main_1446 | (n_1038 > 0) = (make_list_1035 n_1038
                                                                  (f_main_1560 n_1038
                                                                    k_main_1446))
    main_1037 n_1038 k_main_1446 | (not (n_1038 > 0)) = (k_main_1446 0)
    make_list_1035 n_1036 k_make_list_1288 | (n_1036 < 0) = (k_make_list_1288 0
                                                                    (f_make_list_1557 n_1036))
    make_list_1035 n_1036 k_make_list_1288 | (not (n_1036 < 0)) = (make_list_1035
                                                                    (
                                                                    n_1036 - 1)
                                                                    (
                                                                    f_make_list_1559 n_1036
                                                                    k_make_list_1288))
    nth_1030 n_1031 xs1_1032 xs2_1032 k_nth_1156 | (xs1_1032 = 0) = (
    fail_1565 true
              (f_nth_1554 n_1031
                          xs1_1032))
    nth_1030 n_1031 xs1_1032 xs2_1032 k_nth_1156 | (not (xs1_1032 = 0)) = (
    br_nth_1563 (1 <= xs1_1032)
                n_1031
                xs1_1032
                xs2_1032
                k_nth_1156)
    main_1553:X
    br_nth_1563:bool -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    cons_make_list_1099:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1561:int -> X
    f_1562:int -> int -> X
    f_cons_make_list_1558:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_main_1560:int -> (int -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_make_list_1557:int -> int -> (int -> X) -> X
    f_make_list_1559:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_nth_1554:int -> int -> unit -> X
    f_nth_1555:int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_nth_1556:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    fail_1565:bool -> (unit -> X) -> X
    main_1037:int -> (int -> X) -> X
    make_list_1035:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
    nth_1030:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
  inlined functions: br_nth_1563,cons_make_list_1099,f_1561,f_1562,f_cons_make_list_1558,f_main_1560,f_make_list_1557,f_make_list_1559,f_nth_1554,f_nth_1555,f_nth_1556,main_1037
  counterexample: 0:0:0:1:1:0:0:0:0:0:0:1:0:0:1:0:0
  error traces:
    [true.nop(<f_1561@72:0> = var326)
     [true.(<main_1037@74:0> = <f_1561@72:0>)
      [(<main_1037@74:0> > 0).(<make_list_1035@77:0> = <main_1037@74:0>)
       [(not (<make_list_1035@77:0> < 0)).(<make_list_1035@80:0> = (<make_list_1035@77:0> - 1))
        [(not (<make_list_1035@80:0> < 0)).(<make_list_1035@83:0> = (<make_list_1035@80:0> - 1))
         [(<make_list_1035@83:0> < 0).(<<make_list_1035@83:1>@86:0> = 0)
          [true.
           ((<f_make_list_1559@88:0> = <make_list_1035@80:0>) &&
            (<f_make_list_1559@88:2> = <<make_list_1035@83:1>@86:0>))
           [true.
            ((<cons_make_list_1099@90:0> = <f_make_list_1559@88:0>) &&
             ((<cons_make_list_1099@90:1> = <f_make_list_1559@88:0>) &&
              (<cons_make_list_1099@90:2> = <f_make_list_1559@88:2>)))
            [true.(<<cons_make_list_1099@90:4>@92:0> = (<cons_make_list_1099@90:2> + 1))
             [true.(<<f_make_list_1559@88:1>@94:0> = <<cons_make_list_1099@90:4>@92:0>)
              [true.(<<make_list_1035@80:1>@96:0> = <<f_make_list_1559@88:1>@94:0>)
               [true.
                ((<f_make_list_1559@98:0> = <make_list_1035@77:0>) &&
                 (<f_make_list_1559@98:2> = <<make_list_1035@80:1>@96:0>))
                [true.
                 ((<cons_make_list_1099@100:0> = <f_make_list_1559@98:0>) &&
                  ((<cons_make_list_1099@100:1> = <f_make_list_1559@98:0>) &&
                   (<cons_make_list_1099@100:2> = <f_make_list_1559@98:2>)))
                 [true.(<<cons_make_list_1099@100:4>@102:0> = (<cons_make_list_1099@100:2> + 1))
                  [true.(<<f_make_list_1559@98:1>@104:0> = <<cons_make_list_1099@100:4>@102:0>)
                   [true.(<<make_list_1035@77:1>@106:0> = <<f_make_list_1559@98:1>@104:0>)
                    [true.
                     ((<f_main_1560@108:0> = <main_1037@74:0>) && (<f_main_1560@108:2> = <<make_list_1035@77:1>@106:0>))
                     [true.((<nth_1030@110:0> = (<f_main_1560@108:0> - 1)) && (<nth_1030@110:1> = <f_main_1560@108:2>))
                      [(not (<nth_1030@110:1> = 0)).
                       ((<br_nth_1563@113:0> = (1 <= <nth_1030@110:1>)) &&
                        ((<br_nth_1563@113:1> = <nth_1030@110:0>) && (<br_nth_1563@113:2> = <nth_1030@110:1>)))
                       [<br_nth_1563@113:0>.(<<br_nth_1563@113:3>@116:0> = 0)
                        [true.(<<nth_1030@110:2>@118:0> = <<br_nth_1563@113:3>@116:0>)
                         [true.(<<f_main_1560@108:3>@120:0> = <<nth_1030@110:2>@118:0>)
                          [true.(<<<make_list_1035@77:1>@106:1>@122:0> = <<f_main_1560@108:3>@120:0>)
                           [true.(<<<f_make_list_1559@98:1>@104:1>@124:0> = <<<make_list_1035@77:1>@106:1>@122:0>)
                            [true.
                             (<<<cons_make_list_1099@100:4>@102:1>@126:0> = <<<f_make_list_1559@98:1>@104:1>@124:0>)
                             [true.
                              ((<f_cons_make_list_1558@128:0> = <cons_make_list_1099@100:0>) &&
                               ((<f_cons_make_list_1558@128:1> = <cons_make_list_1099@100:1>) &&
                                ((<f_cons_make_list_1558@128:2> = <cons_make_list_1099@100:2>) &&
                                 (<f_cons_make_list_1558@128:4> = <<<cons_make_list_1099@100:4>@102:1>@126:0>))))
                              [(<f_cons_make_list_1558@128:4> = 0).
                               (<<f_cons_make_list_1558@128:5>@131:0> = <f_cons_make_list_1558@128:1>)
                               [true.
                                (<<<<cons_make_list_1099@100:4>@102:1>@126:1>@133:0> =
                                 <<f_cons_make_list_1558@128:5>@131:0>)
                                [true.
                                 (<<<<f_make_list_1559@98:1>@104:1>@124:1>@135:0> =
                                  <<<<cons_make_list_1099@100:4>@102:1>@126:1>@133:0>)
                                 [true.
                                  (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> =
                                   <<<<f_make_list_1559@98:1>@104:1>@124:1>@135:0>)
                                  [true.
                                   (<<<f_main_1560@108:3>@120:1>@139:0> = <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>)
                                   [true.(<<<nth_1030@110:2>@118:1>@141:0> = <<<f_main_1560@108:3>@120:1>@139:0>)
                                    [true.(<<<br_nth_1563@113:3>@116:1>@143:0> = <<<nth_1030@110:2>@118:1>@141:0>)
                                     [true.
                                      ((<f_nth_1555@145:0> = <br_nth_1563@113:1>) &&
                                       ((<f_nth_1555@145:1> = <br_nth_1563@113:2>) &&
                                        (<f_nth_1555@145:4> = <<<br_nth_1563@113:3>@116:1>@143:0>)))
                                      [(not (<f_nth_1555@145:0> = 0)).
                                       ((<nth_1030@148:0> = (<f_nth_1555@145:0> - 1)) &&
                                        (<nth_1030@148:1> = (<f_nth_1555@145:1> - 1)))
                                       [(<nth_1030@148:1> = 0).(<fail_1565@151:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(50265)[2]
    horn clauses:
      P[<fail_1565@151:0>](<fail_1565@151:0>:bool)|- bot
      
      P[<nth_1030@148:1>](<nth_1030@148:0>:int,0:int), <fail_1565@151:0>
      |- P[<fail_1565@151:0>](<fail_1565@151:0>:bool)
      
      P[<f_nth_1555@145:4>]((1 + <nth_1030@148:0>):int,(1 + <nth_1030@148:1>):int,<f_nth_1555@145:4>:int),
      ((1 + <nth_1030@148:0>) <> 0) |- P[<nth_1030@148:1>](<nth_1030@148:0>:int,
                                                           <nth_1030@148:1>:int)
      
      P[<br_nth_1563@113:2>](true:bool,<f_nth_1555@145:0>:int,<f_nth_1555@145:1>:int),
      P[<<<br_nth_1563@113:3>@116:1>@143:0>](true:bool,<f_nth_1555@145:0>:int,<f_nth_1555@145:1>:int,0:int,<f_nth_1555@145:4>:int)|- P[<f_nth_1555@145:4>](
      <f_nth_1555@145:0>:int,<f_nth_1555@145:1>:int,<f_nth_1555@145:4>:int)
      
      P[<nth_1030@110:1>](<br_nth_1563@113:1>:int,<br_nth_1563@113:2>:int),
      P[<<<nth_1030@110:2>@118:1>@141:0>](<br_nth_1563@113:1>:int,<br_nth_1563@113:2>:int,<<br_nth_1563@113:3>@116:0>:int,<<<br_nth_1563@113:3>@116:1>@143:0>:int),
      P[<br_nth_1563@113:2>](<br_nth_1563@113:0>:bool,<br_nth_1563@113:1>:int,<br_nth_1563@113:2>:int),
      ((<br_nth_1563@113:2> <> 0) && (<br_nth_1563@113:0> = (1 <= <br_nth_1563@113:2>)))
      |- P[<<<br_nth_1563@113:3>@116:1>@143:0>](<br_nth_1563@113:0>:bool,
                                                <br_nth_1563@113:1>:int,
                                                <br_nth_1563@113:2>:int,
                                                <<br_nth_1563@113:3>@116:0>:int,
                                                <<<br_nth_1563@113:3>@116:1>@143:0>:int)
      
      P[<f_main_1560@108:2>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int),
      P[<<<f_main_1560@108:3>@120:1>@139:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
      P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int)|- P[<<<nth_1030@110:2>@118:1>@141:0>](
      <nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,
      <<<nth_1030@110:2>@118:1>@141:0>:int)
      
      P[<main_1037@74:0>](<f_main_1560@108:0>:int),
      P[<<make_list_1035@77:1>@106:0>](<f_main_1560@108:0>:int,<f_main_1560@108:2>:int),
      P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<f_main_1560@108:0>:int,<f_main_1560@108:2>:int,<<f_main_1560@108:3>@120:0>:int,<<<f_main_1560@108:3>@120:1>@139:0>:int),
      P[<f_main_1560@108:2>](<f_main_1560@108:0>:int,<f_main_1560@108:2>:int), (
      <f_main_1560@108:0> > 0)
      |- P[<<<f_main_1560@108:3>@120:1>@139:0>](<f_main_1560@108:0>:int,
                                                <f_main_1560@108:2>:int,
                                                <<f_main_1560@108:3>@120:0>:int,
                                                <<<f_main_1560@108:3>@120:1>@139:0>:int)
      
      P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
      P[<<f_make_list_1559@98:1>@104:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
      P[<<<<f_make_list_1559@98:1>@104:1>@124:1>@135:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int),
      P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
      (<make_list_1035@77:0> >= 0)
      |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                          <<make_list_1035@77:1>@106:0>:int,
                                                          <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                          <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
      
      P[<f_make_list_1559@98:2>](<f_make_list_1559@98:0>:int,<cons_make_list_1099@100:2>:int),
      P[<<cons_make_list_1099@100:4>@102:0>](<f_make_list_1559@98:0>:int,<f_make_list_1559@98:0>:int,<cons_make_list_1099@100:2>:int,<<f_make_list_1559@98:1>@104:0>:int),
      P[<<<<cons_make_list_1099@100:4>@102:1>@126:1>@133:0>](<f_make_list_1559@98:0>:int,<f_make_list_1559@98:0>:int,<cons_make_list_1099@100:2>:int,<<f_make_list_1559@98:1>@104:0>:int,<<<f_make_list_1559@98:1>@104:1>@124:0>:int,<<<<f_make_list_1559@98:1>@104:1>@124:1>@135:0>:int),
      P[<<f_make_list_1559@98:1>@104:0>](<f_make_list_1559@98:0>:int,<<f_make_list_1559@98:1>@104:0>:int)|- P[<<<<f_make_list_1559@98:1>@104:1>@124:1>@135:0>](
      <f_make_list_1559@98:0>:int,<<f_make_list_1559@98:1>@104:0>:int,
      <<<f_make_list_1559@98:1>@104:1>@124:0>:int,<<<<f_make_list_1559@98:1>@104:1>@124:1>@135:0>:int)
      
      P[<cons_make_list_1099@100:2>](<cons_make_list_1099@100:0>:int,<cons_make_list_1099@100:1>:int,<cons_make_list_1099@100:2>:int),
      P[<<f_cons_make_list_1558@128:5>@131:0>](<cons_make_list_1099@100:0>:int,<cons_make_list_1099@100:1>:int,<cons_make_list_1099@100:2>:int,<<<cons_make_list_1099@100:4>@102:1>@126:0>:int,<<<<cons_make_list_1099@100:4>@102:1>@126:1>@133:0>:int),
      P[<<cons_make_list_1099@100:4>@102:0>](<cons_make_list_1099@100:0>:int,<cons_make_list_1099@100:1>:int,<cons_make_list_1099@100:2>:int,<<cons_make_list_1099@100:4>@102:0>:int),
      (<<cons_make_list_1099@100:4>@102:0> = (1 + <cons_make_list_1099@100:2>))
      |- P[<<<<cons_make_list_1099@100:4>@102:1>@126:1>@133:0>](<cons_make_list_1099@100:0>:int,
                                                                <cons_make_list_1099@100:1>:int,
                                                                <cons_make_list_1099@100:2>:int,
                                                                <<cons_make_list_1099@100:4>@102:0>:int,
                                                                <<<cons_make_list_1099@100:4>@102:1>@126:0>:int,
                                                                <<<<cons_make_list_1099@100:4>@102:1>@126:1>@133:0>:int)
      
      P[<f_cons_make_list_1558@128:4>](<f_cons_make_list_1558@128:0>:int,<f_cons_make_list_1558@128:1>:int,<f_cons_make_list_1558@128:2>:int,<f_cons_make_list_1558@128:4>:int),
      ((<f_cons_make_list_1558@128:4> = 0) && (<<f_cons_make_list_1558@128:5>@131:0> = <f_cons_make_list_1558@128:1>))
      |- P[<<f_cons_make_list_1558@128:5>@131:0>](<f_cons_make_list_1558@128:0>:int,
                                                  <f_cons_make_list_1558@128:1>:int,
                                                  <f_cons_make_list_1558@128:2>:int,
                                                  <f_cons_make_list_1558@128:4>:int,
                                                  <<f_cons_make_list_1558@128:5>@131:0>:int)
      
      P[<cons_make_list_1099@100:2>](<f_cons_make_list_1558@128:0>:int,<f_cons_make_list_1558@128:1>:int,<f_cons_make_list_1558@128:2>:int),
      P[<<<cons_make_list_1099@100:4>@102:1>@126:0>](<f_cons_make_list_1558@128:0>:int,<f_cons_make_list_1558@128:1>:int,<f_cons_make_list_1558@128:2>:int,(
                                                     1 + <f_cons_make_list_1558@128:2>):int,<f_cons_make_list_1558@128:4>:int)|- P[<f_cons_make_list_1558@128:4>](
      <f_cons_make_list_1558@128:0>:int,<f_cons_make_list_1558@128:1>:int,
      <f_cons_make_list_1558@128:2>:int,<f_cons_make_list_1558@128:4>:int)
      
      P[<f_make_list_1559@98:2>](<cons_make_list_1099@100:0>:int,<cons_make_list_1099@100:2>:int),
      P[<<<f_make_list_1559@98:1>@104:1>@124:0>](<cons_make_list_1099@100:0>:int,<<cons_make_list_1099@100:4>@102:0>:int,<<<cons_make_list_1099@100:4>@102:1>@126:0>:int),
      P[<cons_make_list_1099@100:2>](<cons_make_list_1099@100:0>:int,<cons_make_list_1099@100:1>:int,<cons_make_list_1099@100:2>:int),
      (<cons_make_list_1099@100:0> = <cons_make_list_1099@100:1>)
      |- P[<<<cons_make_list_1099@100:4>@102:1>@126:0>](<cons_make_list_1099@100:0>:int,
                                                        <cons_make_list_1099@100:1>:int,
                                                        <cons_make_list_1099@100:2>:int,
                                                        <<cons_make_list_1099@100:4>@102:0>:int,
                                                        <<<cons_make_list_1099@100:4>@102:1>@126:0>:int)
      
      P[<make_list_1035@77:0>](<f_make_list_1559@98:0>:int),
      P[<<<make_list_1035@77:1>@106:1>@122:0>](<f_make_list_1559@98:0>:int,<<f_make_list_1559@98:1>@104:0>:int,<<<f_make_list_1559@98:1>@104:1>@124:0>:int),
      (<f_make_list_1559@98:0> >= 0)
      |- P[<<<f_make_list_1559@98:1>@104:1>@124:0>](<f_make_list_1559@98:0>:int,
                                                    <<f_make_list_1559@98:1>@104:0>:int,
                                                    <<<f_make_list_1559@98:1>@104:1>@124:0>:int)
      
      P[<main_1037@74:0>](<make_list_1035@77:0>:int),
      P[<<f_main_1560@108:3>@120:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
      P[<make_list_1035@77:0>](<make_list_1035@77:0>:int), (<make_list_1035@77:0> > 0)
      |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                  <<make_list_1035@77:1>@106:0>:int,
                                                  <<<make_list_1035@77:1>@106:1>@122:0>:int)
      
      P[<f_main_1560@108:2>](<f_main_1560@108:0>:int,<f_main_1560@108:2>:int),
      P[<<nth_1030@110:2>@118:0>]((-1 + <f_main_1560@108:0>):int,<f_main_1560@108:2>:int,<<f_main_1560@108:3>@120:0>:int)|- P[<<f_main_1560@108:3>@120:0>](
      <f_main_1560@108:0>:int,<f_main_1560@108:2>:int,<<f_main_1560@108:3>@120:0>:int)
      
      P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
      P[<<br_nth_1563@113:3>@116:0>]((1 <= <nth_1030@110:1>):bool,<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int),
      (<nth_1030@110:1> <> 0)
      |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                     <<nth_1030@110:2>@118:0>:int)
      
      P[<br_nth_1563@113:2>](<br_nth_1563@113:0>:bool,<br_nth_1563@113:1>:int,<br_nth_1563@113:2>:int),
      ((<<br_nth_1563@113:3>@116:0> = 0) && <br_nth_1563@113:0>)
      |- P[<<br_nth_1563@113:3>@116:0>](<br_nth_1563@113:0>:bool,<br_nth_1563@113:1>:int,
                                        <br_nth_1563@113:2>:int,<<br_nth_1563@113:3>@116:0>:int)
      
      P[<nth_1030@110:1>](<br_nth_1563@113:1>:int,<br_nth_1563@113:2>:int),
      ((<br_nth_1563@113:2> <> 0) && (<br_nth_1563@113:0> = (1 <= <br_nth_1563@113:2>)))
      |- P[<br_nth_1563@113:2>](<br_nth_1563@113:0>:bool,<br_nth_1563@113:1>:int,
                                <br_nth_1563@113:2>:int)
      
      P[<f_main_1560@108:2>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int)|- P[<nth_1030@110:1>](
      <nth_1030@110:0>:int,<nth_1030@110:1>:int)
      
      P[<main_1037@74:0>](<f_main_1560@108:0>:int),
      P[<<make_list_1035@77:1>@106:0>](<f_main_1560@108:0>:int,<f_main_1560@108:2>:int), (
      <f_main_1560@108:0> > 0) |- P[<f_main_1560@108:2>](<f_main_1560@108:0>:int,
                                                         <f_main_1560@108:2>:int)
      
      P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
      P[<<f_make_list_1559@98:1>@104:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
      (<make_list_1035@77:0> >= 0)
      |- P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int)
      
      P[<f_make_list_1559@98:2>](<f_make_list_1559@98:0>:int,<cons_make_list_1099@100:2>:int),
      P[<<cons_make_list_1099@100:4>@102:0>](<f_make_list_1559@98:0>:int,<f_make_list_1559@98:0>:int,<cons_make_list_1099@100:2>:int,<<f_make_list_1559@98:1>@104:0>:int)|- P[<<f_make_list_1559@98:1>@104:0>](
      <f_make_list_1559@98:0>:int,<<f_make_list_1559@98:1>@104:0>:int)
      
      P[<cons_make_list_1099@100:2>](<cons_make_list_1099@100:0>:int,<cons_make_list_1099@100:1>:int,<cons_make_list_1099@100:2>:int),
      (<<cons_make_list_1099@100:4>@102:0> = (1 + <cons_make_list_1099@100:2>))
      |- P[<<cons_make_list_1099@100:4>@102:0>](<cons_make_list_1099@100:0>:int,
                                                <cons_make_list_1099@100:1>:int,
                                                <cons_make_list_1099@100:2>:int,
                                                <<cons_make_list_1099@100:4>@102:0>:int)
      
      P[<f_make_list_1559@98:2>](<cons_make_list_1099@100:0>:int,<cons_make_list_1099@100:2>:int),
      (<cons_make_list_1099@100:0> = <cons_make_list_1099@100:1>)
      |- P[<cons_make_list_1099@100:2>](<cons_make_list_1099@100:0>:int,
                                        <cons_make_list_1099@100:1>:int,
                                        <cons_make_list_1099@100:2>:int)
      
      P[<make_list_1035@77:0>](<f_make_list_1559@98:0>:int),
      P[<<make_list_1035@80:1>@96:0>]((-1 + <f_make_list_1559@98:0>):int,<f_make_list_1559@98:2>:int),
      (<f_make_list_1559@98:0> >= 0)
      |- P[<f_make_list_1559@98:2>](<f_make_list_1559@98:0>:int,<f_make_list_1559@98:2>:int)
      
      P[<make_list_1035@80:0>](<make_list_1035@80:0>:int),
      P[<<f_make_list_1559@88:1>@94:0>](<make_list_1035@80:0>:int,<<make_list_1035@80:1>@96:0>:int),
      (<make_list_1035@80:0> >= 0)
      |- P[<<make_list_1035@80:1>@96:0>](<make_list_1035@80:0>:int,<<make_list_1035@80:1>@96:0>:int)
      
      P[<f_make_list_1559@88:2>](<f_make_list_1559@88:0>:int,<cons_make_list_1099@90:2>:int),
      P[<<cons_make_list_1099@90:4>@92:0>](<f_make_list_1559@88:0>:int,<f_make_list_1559@88:0>:int,<cons_make_list_1099@90:2>:int,<<f_make_list_1559@88:1>@94:0>:int)|- P[<<f_make_list_1559@88:1>@94:0>](
      <f_make_list_1559@88:0>:int,<<f_make_list_1559@88:1>@94:0>:int)
      
      P[<cons_make_list_1099@90:2>](<cons_make_list_1099@90:0>:int,<cons_make_list_1099@90:1>:int,<cons_make_list_1099@90:2>:int),
      (<<cons_make_list_1099@90:4>@92:0> = (1 + <cons_make_list_1099@90:2>))
      |- P[<<cons_make_list_1099@90:4>@92:0>](<cons_make_list_1099@90:0>:int,
                                              <cons_make_list_1099@90:1>:int,
                                              <cons_make_list_1099@90:2>:int,
                                              <<cons_make_list_1099@90:4>@92:0>:int)
      
      P[<f_make_list_1559@88:2>](<cons_make_list_1099@90:0>:int,<cons_make_list_1099@90:2>:int),
      (<cons_make_list_1099@90:0> = <cons_make_list_1099@90:1>)
      |- P[<cons_make_list_1099@90:2>](<cons_make_list_1099@90:0>:int,
                                       <cons_make_list_1099@90:1>:int,
                                       <cons_make_list_1099@90:2>:int)
      
      P[<make_list_1035@80:0>](<f_make_list_1559@88:0>:int),
      P[<<make_list_1035@83:1>@86:0>]((-1 + <f_make_list_1559@88:0>):int,<f_make_list_1559@88:2>:int),
      (<f_make_list_1559@88:0> >= 0)
      |- P[<f_make_list_1559@88:2>](<f_make_list_1559@88:0>:int,<f_make_list_1559@88:2>:int)
      
      P[<make_list_1035@83:0>](<make_list_1035@83:0>:int),
      ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
      |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int)
      
      P[<make_list_1035@80:0>]((1 + <make_list_1035@83:0>):int), ((1 + <make_list_1035@83:0>) >= 0)
      |- P[<make_list_1035@83:0>](<make_list_1035@83:0>:int)
      
      P[<make_list_1035@77:0>]((1 + <make_list_1035@80:0>):int), ((1 + <make_list_1035@80:0>) >= 0)
      |- P[<make_list_1035@80:0>](<make_list_1035@80:0>:int)
      
      P[<main_1037@74:0>](<make_list_1035@77:0>:int), (<make_list_1035@77:0> > 0)
      |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
      
      P[<f_1561@72:0>](<main_1037@74:0>:int)|- P[<main_1037@74:0>](<main_1037@74:0>:int)
      
      |- P[<f_1561@72:0>](<f_1561@72:0>:int)
    call trees:
      <main_1553@69>
        <f_1561@72>
          <main_1037@74>
            <make_list_1035@77>
              <make_list_1035@80>
                <make_list_1035@83>
                </<make_list_1035@83:1>@86>
                <f_make_list_1559@88>
                  <cons_make_list_1099@90>
                  </<cons_make_list_1099@90:4>@92>
                </<f_make_list_1559@88:1>@94>
              </<make_list_1035@80:1>@96>
              <f_make_list_1559@98>
                <cons_make_list_1099@100>
                </<cons_make_list_1099@100:4>@102>
              </<f_make_list_1559@98:1>@104>
            </<make_list_1035@77:1>@106>
            <f_main_1560@108>
              <nth_1030@110>
                <br_nth_1563@113>
                </<br_nth_1563@113:3>@116>
              </<nth_1030@110:2>@118>
            </<f_main_1560@108:3>@120>
            <<<make_list_1035@77:1>@106:1>@122>
              <<<f_make_list_1559@98:1>@104:1>@124>
                <<<cons_make_list_1099@100:4>@102:1>@126>
                  <f_cons_make_list_1558@128>
                  </<f_cons_make_list_1558@128:5>@131>
                </<<<cons_make_list_1099@100:4>@102:1>@126:1>@133>
              </<<<f_make_list_1559@98:1>@104:1>@124:1>@135>
            </<<<make_list_1035@77:1>@106:1>@122:1>@137>
            <<<f_main_1560@108:3>@120:1>@139>
              <<<nth_1030@110:2>@118:1>@141>
                <<<br_nth_1563@113:3>@116:1>@143>
                  <f_nth_1555@145>
                    <nth_1030@148>
                      <fail_1565@151>
    inlined horn clauses:
      P[<fail_1565@151:0>](<fail_1565@151:0>:bool)|- bot
      
      P[<nth_1030@148:1>](<nth_1030@148:0>:int,0:int), <fail_1565@151:0>
      |- P[<fail_1565@151:0>](<fail_1565@151:0>:bool)
      
      P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,(
                                          1 + <nth_1030@148:1>):int,0:int,<f_nth_1555@145:4>:int),
      P[<nth_1030@110:1>]((1 + <nth_1030@148:0>):int,(1 + <nth_1030@148:1>):int),
      (((1 + <nth_1030@148:0>) <> 0) && (<nth_1030@148:1> >= 0))
      |- P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int)
      
      P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
      P[<<make_list_1035@77:1>@106:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int),
      P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int), (
      (1 + <nth_1030@110:0>) > 0)
      |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                             <<nth_1030@110:2>@118:0>:int,
                                             <<<nth_1030@110:2>@118:1>@141:0>:int)
      
      P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
      P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
      P[<<make_list_1035@80:1>@96:0>]((-1 + <make_list_1035@77:0>):int,(
                                      -1 + <<make_list_1035@77:1>@106:0>):int),
      P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
      ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
       ((<make_list_1035@77:0> >= 0) && (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))
      |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                          <<make_list_1035@77:1>@106:0>:int,
                                                          <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                          <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
      
      P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
      P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
      P[<make_list_1035@77:0>](<make_list_1035@77:0>:int), (<make_list_1035@77:0> > 0)
      |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                  <<make_list_1035@77:1>@106:0>:int,
                                                  <<<make_list_1035@77:1>@106:1>@122:0>:int)
      
      P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
      ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
      |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                     <<nth_1030@110:2>@118:0>:int)
      
      P[<<make_list_1035@77:1>@106:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int), (
      (1 + <nth_1030@110:0>) > 0) |- P[<nth_1030@110:1>](<nth_1030@110:0>:int,
                                                         <nth_1030@110:1>:int)
      
      P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
      P[<<make_list_1035@80:1>@96:0>]((-1 + <make_list_1035@77:0>):int,(
                                      -1 + <<make_list_1035@77:1>@106:0>):int), (
      <make_list_1035@77:0> >= 0)
      |- P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int)
      
      P[<make_list_1035@80:0>](<make_list_1035@80:0>:int),
      P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                      -1 + <<make_list_1035@80:1>@96:0>):int), (
      <make_list_1035@80:0> >= 0)
      |- P[<<make_list_1035@80:1>@96:0>](<make_list_1035@80:0>:int,<<make_list_1035@80:1>@96:0>:int)
      
      P[<make_list_1035@83:0>](<make_list_1035@83:0>:int),
      ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
      |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int)
      
      P[<make_list_1035@80:0>]((1 + <make_list_1035@83:0>):int), ((1 + <make_list_1035@83:0>) >= 0)
      |- P[<make_list_1035@83:0>](<make_list_1035@83:0>:int)
      
      P[<make_list_1035@77:0>]((1 + <make_list_1035@80:0>):int), ((1 + <make_list_1035@80:0>) >= 0)
      |- P[<make_list_1035@80:0>](<make_list_1035@80:0>:int)
      
       (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
    begin ParamSubstInfer.infer(56328)[3]
      
    end ParamSubstInfer.infer(56328)[3] (0.110983 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(56330)[3]
      
    end RefTypeInfer.elim_coeffs(56330)[3] (0.001000 sec.)
    begin GenHcSolver.solve(56883)[3]
      Horn clauses:
        P[<fail_1565@151:0>](<fail_1565@151:0>:bool)|- bot
        
        P[<nth_1030@148:1>](<nth_1030@148:0>:int,0:int), <fail_1565@151:0>
        |- P[<fail_1565@151:0>](<fail_1565@151:0>:bool)
        
        P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,(
                                            1 + <nth_1030@148:1>):int,0:int,<f_nth_1555@145:4>:int),
        P[<nth_1030@110:1>]((1 + <nth_1030@148:0>):int,(1 + <nth_1030@148:1>):int),
        (((1 + <nth_1030@148:0>) <> 0) && (<nth_1030@148:1> >= 0))
        |- P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int)
        
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
        P[<<make_list_1035@77:1>@106:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int),
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int), (
        (1 + <nth_1030@110:0>) > 0)
        |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                               <<nth_1030@110:2>@118:0>:int,
                                               <<<nth_1030@110:2>@118:1>@141:0>:int)
        
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        P[<<make_list_1035@80:1>@96:0>]((-1 + <make_list_1035@77:0>):int,(
                                        -1 + <<make_list_1035@77:1>@106:0>):int),
        P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> >= 0) && (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))
        |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                            <<make_list_1035@77:1>@106:0>:int,
                                                            <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                            <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
        
        P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
        P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int), (<make_list_1035@77:0> > 0)
        |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                    <<make_list_1035@77:1>@106:0>:int,
                                                    <<<make_list_1035@77:1>@106:1>@122:0>:int)
        
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
        
        P[<<make_list_1035@77:1>@106:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int), (
        (1 + <nth_1030@110:0>) > 0) |- P[<nth_1030@110:1>](<nth_1030@110:0>:int,
                                                           <nth_1030@110:1>:int)
        
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        P[<<make_list_1035@80:1>@96:0>]((-1 + <make_list_1035@77:0>):int,(
                                        -1 + <<make_list_1035@77:1>@106:0>):int), (
        <make_list_1035@77:0> >= 0)
        |- P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,
                                            <<make_list_1035@77:1>@106:0>:int)
        
        P[<make_list_1035@80:0>](<make_list_1035@80:0>:int),
        P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                        -1 + <<make_list_1035@80:1>@96:0>):int), (
        <make_list_1035@80:0> >= 0)
        |- P[<<make_list_1035@80:1>@96:0>](<make_list_1035@80:0>:int,
                                           <<make_list_1035@80:1>@96:0>:int)
        
        P[<make_list_1035@83:0>](<make_list_1035@83:0>:int),
        ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                           <<make_list_1035@83:1>@86:0>:int)
        
        P[<make_list_1035@80:0>]((1 + <make_list_1035@83:0>):int), ((1 + <make_list_1035@83:0>) >= 0)
        |- P[<make_list_1035@83:0>](<make_list_1035@83:0>:int)
        
        P[<make_list_1035@77:0>]((1 + <make_list_1035@80:0>):int), ((1 + <make_list_1035@80:0>) >= 0)
        |- P[<make_list_1035@80:0>](<make_list_1035@80:0>:int)
        
         (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
      lower bounds:
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = (<make_list_1035@77:0> > 0)
        P[<make_list_1035@80:0>](<make_list_1035@80:0>:int) = ((1 + <make_list_1035@80:0>) > 0)
        P[<make_list_1035@83:0>](<make_list_1035@83:0>:int) = ((1 + <make_list_1035@83:0>) >= 0)
        P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> = -1))
        P[<<make_list_1035@80:1>@96:0>](<make_list_1035@80:0>:int,<<make_list_1035@80:1>@96:0>:int) =
        ((<make_list_1035@80:0> = 0) && (<<make_list_1035@80:1>@96:0> = 1))
        P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int) =
        ((<make_list_1035@77:0> = 1) && (<<make_list_1035@77:1>@106:0> = 2))
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int) =
        ((<nth_1030@110:0> = 0) && (<nth_1030@110:1> = 2))
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) && ((<nth_1030@110:1> = 2) && (<nth_1030@110:0> = 0)))
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<<make_list_1035@77:1>@106:0> = 2) && (<make_list_1035@77:0> = 1)))
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
        ((<make_list_1035@77:0> = 1) &&
         ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
          ((<<make_list_1035@77:1>@106:0> = 2) &&
           (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>))))
        P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int) =
        ((<nth_1030@110:0> = 0) &&
         ((<<nth_1030@110:2>@118:0> = 0) &&
          ((<nth_1030@110:1> = 2) && (<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>)))))
        P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int) = false
        P[<fail_1565@151:0>](<fail_1565@151:0>:bool) = false
      upper bounds:
        P[<<make_list_1035@77:1>@106:0>](var334:int,var335:int) = true
        P[<<make_list_1035@80:1>@96:0>](var331:int,var332:int) = ((var332 <> 0) || (var331 <= 0))
        P[<<make_list_1035@83:1>@86:0>](var328:int,var329:int) = (((1 + var329) <> 0) || ((1 + var328) <= 0))
      begin GenHcSolver.classify_pids(68167)[4]
        output:
          [<<make_list_1035@83:1>@86:0>;<<make_list_1035@80:1>@96:0>;<<make_list_1035@77:1>@106:0>]
      end GenHcSolver.classify_pids(68167)[4] (0.001000 sec.)
      begin ApronInterface.convex_hull_interpolate(68234)[4]
        lb:(((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> = -1)) ||
            (((<make_list_1035@83:0> = 0) && (<<make_list_1035@83:1>@86:0> = 1)) ||
             ((<make_list_1035@83:0> = 1) && (<<make_list_1035@83:1>@86:0> = 2))))
        nub:((not (((1 + <<make_list_1035@83:1>@86:0>) <> 0) || ((1 + <make_list_1035@83:0>) <= 0))) ||
             (not ((<<make_list_1035@83:1>@86:0> <> 0) || (<make_list_1035@83:0> <= 0))))
        lb':(((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> = -1)) ||
             (((<make_list_1035@83:0> = 0) && (<<make_list_1035@83:1>@86:0> = 1)) ||
              ((<make_list_1035@83:0> = 1) && (<<make_list_1035@83:1>@86:0> = 2))))
        nub':((not (((1 + <<make_list_1035@83:1>@86:0>) <> 0) || ((1 + <make_list_1035@83:0>) <= 0))) ||
              (not ((<<make_list_1035@83:1>@86:0> <> 0) || (<make_list_1035@83:0> <= 0))))
        begin InterpProver.interpolate(68235)[5]
          begin InterpProver.interpolate_fresh(68236)[6]
            begin InterpProver.interpolate_log(68237)[7]
              input1: (((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> = -1)) ||
                       (((<make_list_1035@83:0> = 0) && (<<make_list_1035@83:1>@86:0> = 1)) ||
                        ((<make_list_1035@83:0> = 1) && (<<make_list_1035@83:1>@86:0> = 2))))
              input2: ((not (((1 + <<make_list_1035@83:1>@86:0>) <> 0) || ((1 + <make_list_1035@83:0>) <= 0))) ||
                       (not ((<<make_list_1035@83:1>@86:0> <> 0) || (<make_list_1035@83:0> <= 0))))
              begin InterpProver.interpolate_check(68238)[8]
                begin InterpProver.interpolate_simplify(68239)[9]
                  begin InterpProver.interpolate_quick(68342)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(68351)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(68352)[12]
                        begin CsisatInterface.interpolate_csisat_log(68353)[13]
                          input1: ((-1 = v_sep_make_list_1035_sep_83_sep_0 & 0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0) | (0 = v_sep_make_list_1035_sep_83_sep_0 & 1 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0) | (1 = v_sep_make_list_1035_sep_83_sep_0 & 2 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0))
                          input2: ((-1 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 & 1 <= (1 + v_sep_make_list_1035_sep_83_sep_0)) | (0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 & 1 <= v_sep_make_list_1035_sep_83_sep_0))
                          begin CsisatInterface.interpolate_csisat_raw(68354)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(68354)[14] (0.004999 sec.)
                          output: ((((v_sep_make_list_1035_sep_83_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= 0) | not 0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0) & 0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0) | ((not 0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 | 2*v_sep_make_list_1035_sep_83_sep_0 <= 0) & (-1*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -1 | -0.666666666667*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -1.33333333333) & (-0.666666666667*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -1.33333333333 | 2*v_sep_make_list_1035_sep_83_sep_0 <= 0)))
                          
                        end CsisatInterface.interpolate_csisat_log(68353)[13] (0.004999 sec.)
                        after simplification: ((((v_sep_make_list_1035_sep_83_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= 0) | not 0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0) & 0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0) | ((not 0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 | 2*v_sep_make_list_1035_sep_83_sep_0 <= 0) & (-2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -4 | -1*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -1) & (-2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -4 | 2*v_sep_make_list_1035_sep_83_sep_0 <= 0)))
                        after dnf conversion: ((not 0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 & 0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0) | (v_sep_make_list_1035_sep_83_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= 0 & 0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0) | (2*v_sep_make_list_1035_sep_83_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -1 & 2*v_sep_make_list_1035_sep_83_sep_0 <= 0) | (2*v_sep_make_list_1035_sep_83_sep_0 <= 0 & -1*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -4) | (2*v_sep_make_list_1035_sep_83_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -4 & 2*v_sep_make_list_1035_sep_83_sep_0 <= 0) | (2*v_sep_make_list_1035_sep_83_sep_0 <= 0 & -2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -4) | (not 0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 & -1*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -1 & 2*v_sep_make_list_1035_sep_83_sep_0 <= 0) | (not 0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 & -1*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -1 & -2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -4) | (not 0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 & -2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -4 & 2*v_sep_make_list_1035_sep_83_sep_0 <= 0) | (not 0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 & -2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -4 & -2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= -4))
                        
                      end CsisatInterface.interpolate_csisat_post_process(68352)[12] (0.005999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(68351)[11] (0.005999 sec.)
                    
                  end InterpProver.interpolate_quick(68342)[10] (0.005999 sec.)
                  begin minimizing # of disjunctions(68545)[10]
                    input: ((2 <= <<make_list_1035@83:1>@86:0>) ||
                            (((<<make_list_1035@83:1>@86:0> = 0) && ((1 + <make_list_1035@83:0>) <= 0)) ||
                             (((2 <= <<make_list_1035@83:1>@86:0>) && (<make_list_1035@83:0> <= 0)) ||
                              (((<make_list_1035@83:0> <= 0) && (2 <= <<make_list_1035@83:1>@86:0>)) ||
                               ((1 <= <<make_list_1035@83:1>@86:0>) && (<make_list_1035@83:0> <= 0))))))
                    output: (((1 <= <<make_list_1035@83:1>@86:0>) && (<make_list_1035@83:0> <= 0)) ||
                             (((<<make_list_1035@83:1>@86:0> = 0) && ((1 + <make_list_1035@83:0>) <= 0)) ||
                              (2 <= <<make_list_1035@83:1>@86:0>)))
                  end minimizing # of disjunctions(68545)[10] (0.001999 sec.)
                  begin minimizing # of conjunctions(68793)[10]
                    input: ((1 <= <<make_list_1035@83:1>@86:0>) && (<make_list_1035@83:0> <= 0))
                    output: (1 <= <<make_list_1035@83:1>@86:0>)
                  end minimizing # of conjunctions(68793)[10] (0.001000 sec.)
                  begin minimizing # of conjunctions(68870)[10]
                    input: ((<<make_list_1035@83:1>@86:0> = 0) && ((1 + <make_list_1035@83:0>) <= 0))
                    output: ((1 + <make_list_1035@83:0>) <= 0)
                  end minimizing # of conjunctions(68870)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(68239)[9] (0.011998 sec.)
                
              end InterpProver.interpolate_check(68238)[8] (0.012998 sec.)
              output: ((1 <= <<make_list_1035@83:1>@86:0>) ||
                       (((1 + <make_list_1035@83:0>) <= 0) || (2 <= <<make_list_1035@83:1>@86:0>)))
            end InterpProver.interpolate_log(68237)[7] (0.012998 sec.)
            
          end InterpProver.interpolate_fresh(68236)[6] (0.012998 sec.)
          
        end InterpProver.interpolate(68235)[5] (0.012998 sec.)
        output:
          P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
          ((1 <= <<make_list_1035@83:1>@86:0>) ||
           (((1 + <make_list_1035@83:0>) <= 0) || (2 <= <<make_list_1035@83:1>@86:0>)))
          P[<<make_list_1035@80:1>@96:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
          ((1 <= <<make_list_1035@83:1>@86:0>) ||
           (((1 + <make_list_1035@83:0>) <= 0) || (2 <= <<make_list_1035@83:1>@86:0>)))
          P[<<make_list_1035@77:1>@106:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
          ((1 <= <<make_list_1035@83:1>@86:0>) ||
           (((1 + <make_list_1035@83:0>) <= 0) || (2 <= <<make_list_1035@83:1>@86:0>)))
      end ApronInterface.convex_hull_interpolate(68234)[4] (0.013998 sec.)
      Horn clauses:
        P[<fail_1565@151:0>](<fail_1565@151:0>:bool)|- bot
        
        P[<nth_1030@148:1>](<nth_1030@148:0>:int,0:int), <fail_1565@151:0>
        |- P[<fail_1565@151:0>](<fail_1565@151:0>:bool)
        
        P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,(
                                            1 + <nth_1030@148:1>):int,0:int,<f_nth_1555@145:4>:int),
        P[<nth_1030@110:1>]((1 + <nth_1030@148:0>):int,(1 + <nth_1030@148:1>):int),
        (((1 + <nth_1030@148:0>) <> 0) && (<nth_1030@148:1> >= 0))
        |- P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int)
        
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
        (((1 + <nth_1030@110:0>) > 0) && ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))
        |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                               <<nth_1030@110:2>@118:0>:int,
                                               <<<nth_1030@110:2>@118:1>@141:0>:int)
        
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> >= 0) &&
          ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
           (((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)) &&
            ((2 <= <<make_list_1035@77:1>@106:0>) || (<make_list_1035@77:0> <= 0))))))
        |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                            <<make_list_1035@77:1>@106:0>:int,
                                                            <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                            <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
        
        P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        ((<make_list_1035@77:0> > 0) && ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))
        |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                    <<make_list_1035@77:1>@106:0>:int,
                                                    <<<make_list_1035@77:1>@106:1>@122:0>:int)
        
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
        
         (((1 + <nth_1030@110:0>) > 0) && ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))
        |- P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int)
        
        P[<make_list_1035@77:0>](0:int)|- bot
        
        P[<make_list_1035@80:0>](<make_list_1035@80:0>:int),
        P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                        -1 + <<make_list_1035@80:1>@96:0>):int),
        ((<make_list_1035@80:0> >= 0) && (1 > <<make_list_1035@80:1>@96:0>)) |- bot
        
        P[<make_list_1035@83:0>](<make_list_1035@83:0>:int),
        ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                           <<make_list_1035@83:1>@86:0>:int)
        
        P[<make_list_1035@80:0>]((1 + <make_list_1035@83:0>):int), ((1 + <make_list_1035@83:0>) >= 0)
        |- P[<make_list_1035@83:0>](<make_list_1035@83:0>:int)
        
        P[<make_list_1035@77:0>]((1 + <make_list_1035@80:0>):int), ((1 + <make_list_1035@80:0>) >= 0)
        |- P[<make_list_1035@80:0>](<make_list_1035@80:0>:int)
        
         (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
      lower bounds:
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int) =
        (((1 + <nth_1030@110:0>) > 0) && ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = (<make_list_1035@77:0> > 0)
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) &&
         ((<nth_1030@110:1> >= 1) &&
          (((1 + <nth_1030@110:0>) > 0) && ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))))
        P[<make_list_1035@80:0>](<make_list_1035@80:0>:int) = ((1 + <make_list_1035@80:0>) > 0)
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<<make_list_1035@77:1>@106:0> >= 1) &&
          ((<make_list_1035@77:0> > 0) && ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))
        P[<make_list_1035@83:0>](<make_list_1035@83:0>:int) = ((1 + <make_list_1035@83:0>) >= 0)
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> > 0) &&
          ((<<make_list_1035@77:1>@106:0> >= 1) &&
           ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
            (((2 <= <<make_list_1035@77:1>@106:0>) || (<make_list_1035@77:0> <= 0)) &&
             ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))))
        P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> = -1))
        P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) &&
         ((<nth_1030@110:1> >= 1) &&
          ((<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>)) &&
           (((1 + <nth_1030@110:0>) > 0) &&
            (((2 <= <nth_1030@110:1>) || ((1 + <nth_1030@110:0>) <= 0)) &&
             ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))))))
        P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int) =
        ((<nth_1030@148:1> >= 0) &&
         (((1 + <nth_1030@148:0>) > 0) &&
          (((0 <= <nth_1030@148:1>) || ((3 + <nth_1030@148:0>) <= 0)) &&
           ((1 <= <nth_1030@148:1>) || ((2 + <nth_1030@148:0>) <= 0)))))
        P[<fail_1565@151:0>](<fail_1565@151:0>:bool) = false
      upper bounds:
        P[<make_list_1035@83:0>](var339:int) = true
        P[<make_list_1035@80:0>](var338:int) = true
        P[<make_list_1035@77:0>](var337:int) = (var337 <> 0)
      begin GenHcSolver.classify_pids(108165)[4]
        output:
          [<make_list_1035@80:0>;<make_list_1035@83:0>],[<make_list_1035@77:0>]
      end GenHcSolver.classify_pids(108165)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(108191)[4]
        lb:(((1 + <make_list_1035@80:0>) > 0) || ((1 + <make_list_1035@80:0>) >= 0))
        nub:false
        lb':(((1 + <make_list_1035@80:0>) > 0) || ((1 + <make_list_1035@80:0>) >= 0))
        nub':false
        begin InterpProver.interpolate(108192)[5]
          begin InterpProver.interpolate_fresh(108193)[6]
            begin InterpProver.interpolate_log(108194)[7]
              input1: (((1 + <make_list_1035@80:0>) > 0) || ((1 + <make_list_1035@80:0>) >= 0))
              input2: false
              begin InterpProver.interpolate_check(108195)[8]
                begin InterpProver.interpolate_simplify(108196)[9]
                  begin InterpProver.interpolate_quick(108220)[10]
                    
                  end InterpProver.interpolate_quick(108220)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(108196)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(108195)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(108194)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(108193)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(108192)[5] (0.000000 sec.)
        output:
          P[<make_list_1035@80:0>](<make_list_1035@80:0>:int) = true
          P[<make_list_1035@83:0>](<make_list_1035@80:0>:int) = true
      end ApronInterface.convex_hull_interpolate(108191)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1565@151:0>](<fail_1565@151:0>:bool)|- bot
        
        P[<nth_1030@148:1>](<nth_1030@148:0>:int,0:int), <fail_1565@151:0>
        |- P[<fail_1565@151:0>](<fail_1565@151:0>:bool)
        
        P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,(
                                            1 + <nth_1030@148:1>):int,0:int,<f_nth_1555@145:4>:int),
        P[<nth_1030@110:1>]((1 + <nth_1030@148:0>):int,(1 + <nth_1030@148:1>):int),
        (((1 + <nth_1030@148:0>) <> 0) && (<nth_1030@148:1> >= 0))
        |- P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int)
        
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
        (((1 + <nth_1030@110:0>) > 0) && ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))
        |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                               <<nth_1030@110:2>@118:0>:int,
                                               <<<nth_1030@110:2>@118:1>@141:0>:int)
        
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> >= 0) &&
          ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
           (((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)) &&
            ((2 <= <<make_list_1035@77:1>@106:0>) || (<make_list_1035@77:0> <= 0))))))
        |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                            <<make_list_1035@77:1>@106:0>:int,
                                                            <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                            <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
        
        P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        ((<make_list_1035@77:0> > 0) && ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))
        |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                    <<make_list_1035@77:1>@106:0>:int,
                                                    <<<make_list_1035@77:1>@106:1>@122:0>:int)
        
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
        
         (((1 + <nth_1030@110:0>) > 0) && ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))
        |- P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int)
        
        P[<make_list_1035@77:0>](0:int)|- bot
        
        P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                        -1 + <<make_list_1035@80:1>@96:0>):int),
        ((<make_list_1035@80:0> >= 0) && (1 > <<make_list_1035@80:1>@96:0>)) |- bot
        
         ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                           <<make_list_1035@83:1>@86:0>:int)
        
         (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
      lower bounds:
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int) =
        (((1 + <nth_1030@110:0>) > 0) && ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))
        P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = (<make_list_1035@77:0> > 0)
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) &&
         ((<nth_1030@110:1> >= 1) &&
          (((1 + <nth_1030@110:0>) > 0) && ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))))
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<<make_list_1035@77:1>@106:0> >= 1) &&
          ((<make_list_1035@77:0> > 0) && ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> > 0) &&
          ((<<make_list_1035@77:1>@106:0> >= 1) &&
           ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
            (((2 <= <<make_list_1035@77:1>@106:0>) || (<make_list_1035@77:0> <= 0)) &&
             ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))))
        P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) &&
         ((<nth_1030@110:1> >= 1) &&
          ((<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>)) &&
           (((1 + <nth_1030@110:0>) > 0) &&
            (((2 <= <nth_1030@110:1>) || ((1 + <nth_1030@110:0>) <= 0)) &&
             ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))))))
        P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int) =
        ((<nth_1030@148:1> >= 0) &&
         (((1 + <nth_1030@148:0>) > 0) &&
          (((0 <= <nth_1030@148:1>) || ((3 + <nth_1030@148:0>) <= 0)) &&
           ((1 <= <nth_1030@148:1>) || ((2 + <nth_1030@148:0>) <= 0)))))
        P[<fail_1565@151:0>](<fail_1565@151:0>:bool) = false
      upper bounds:
        P[<nth_1030@148:1>](var344:int,var345:int) = (var345 <> 0)
        P[<nth_1030@110:1>](var341:int,var342:int) = true
      begin GenHcSolver.classify_pids(136527)[4]
        output:
          [<nth_1030@110:1>;<nth_1030@148:1>]
      end GenHcSolver.classify_pids(136527)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(136545)[4]
        lb:((((1 + <nth_1030@110:0>) > 0) && ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0))) ||
            ((<nth_1030@110:1> >= 0) &&
             (((1 + <nth_1030@110:0>) > 0) &&
              (((0 <= <nth_1030@110:1>) || ((3 + <nth_1030@110:0>) <= 0)) &&
               ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0))))))
        nub:(not (<nth_1030@110:1> <> 0))
        lb':((((1 + <nth_1030@110:0>) > 0) && ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0))) ||
             ((<nth_1030@110:1> >= 0) &&
              (((1 + <nth_1030@110:0>) > 0) &&
               (((0 <= <nth_1030@110:1>) || ((3 + <nth_1030@110:0>) <= 0)) &&
                ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0))))))
        nub':(not (<nth_1030@110:1> <> 0))
        begin InterpProver.interpolate(136546)[5]
          begin InterpProver.interpolate_fresh(136547)[6]
            begin InterpProver.interpolate_log(136548)[7]
              input1: ((((1 + <nth_1030@110:0>) > 0) && ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0))) ||
                       ((<nth_1030@110:1> >= 0) &&
                        (((1 + <nth_1030@110:0>) > 0) &&
                         (((0 <= <nth_1030@110:1>) || ((3 + <nth_1030@110:0>) <= 0)) &&
                          ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0))))))
              input2: (not (<nth_1030@110:1> <> 0))
              begin InterpProver.interpolate_check(136549)[8]
                begin InterpProver.interpolate_simplify(136550)[9]
                  begin InterpProver.interpolate_quick(136760)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(136769)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(136770)[12]
                        begin CsisatInterface.interpolate_csisat_log(136771)[13]
                          input1: ((1 <= v_sep_nth_1030_sep_110_sep_1 | (2 + v_sep_nth_1030_sep_110_sep_0) <= 0) & 1 <= (1 + v_sep_nth_1030_sep_110_sep_0))
                          input2: 0 = v_sep_nth_1030_sep_110_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(136772)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(136772)[14] (0.000000 sec.)
                          output: -2*v_sep_nth_1030_sep_110_sep_1 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(136771)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_nth_1030_sep_110_sep_1 <= -2
                        after dnf conversion: ((-2*v_sep_nth_1030_sep_110_sep_1 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(136770)[12] (0.000999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(136769)[11] (0.000999 sec.)
                    
                  end InterpProver.interpolate_quick(136760)[10] (0.001999 sec.)
                  
                end InterpProver.interpolate_simplify(136550)[9] (0.002999 sec.)
                
              end InterpProver.interpolate_check(136549)[8] (0.002999 sec.)
              output: (1 <= <nth_1030@110:1>)
            end InterpProver.interpolate_log(136548)[7] (0.003999 sec.)
            
          end InterpProver.interpolate_fresh(136547)[6] (0.003999 sec.)
          
        end InterpProver.interpolate(136546)[5] (0.003999 sec.)
        output:
          P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int) = (1 <= <nth_1030@110:1>)
          P[<nth_1030@148:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int) = (1 <= <nth_1030@110:1>)
      end ApronInterface.convex_hull_interpolate(136545)[4] (0.003999 sec.)
      Horn clauses:
        P[<fail_1565@151:0>](<fail_1565@151:0>:bool)|- bot
        
        P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,1:int,0:int,<f_nth_1555@145:4>:int),
        ((1 + <nth_1030@148:0>) <> 0) |- bot
        
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
        (((1 + <nth_1030@110:0>) > 0) && (1 <= <nth_1030@110:1>))
        |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                               <<nth_1030@110:2>@118:0>:int,
                                               <<<nth_1030@110:2>@118:1>@141:0>:int)
        
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> >= 0) &&
          ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
           (((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)) &&
            ((2 <= <<make_list_1035@77:1>@106:0>) || (<make_list_1035@77:0> <= 0))))))
        |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                            <<make_list_1035@77:1>@106:0>:int,
                                                            <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                            <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
        
        P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        ((<make_list_1035@77:0> > 0) && ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))
        |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                    <<make_list_1035@77:1>@106:0>:int,
                                                    <<<make_list_1035@77:1>@106:1>@122:0>:int)
        
         ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
        
        P[<make_list_1035@77:0>](0:int)|- bot
        
        P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                        -1 + <<make_list_1035@80:1>@96:0>):int),
        ((<make_list_1035@80:0> >= 0) && (1 > <<make_list_1035@80:1>@96:0>)) |- bot
        
         ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                           <<make_list_1035@83:1>@86:0>:int)
        
         (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
      lower bounds:
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = (<make_list_1035@77:0> > 0)
        P[<fail_1565@151:0>](var349:bool) = false
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<<make_list_1035@77:1>@106:0> >= 1) &&
          ((<make_list_1035@77:0> > 0) && ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> > 0) &&
          ((<<make_list_1035@77:1>@106:0> >= 1) &&
           ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
            (((2 <= <<make_list_1035@77:1>@106:0>) || (<make_list_1035@77:0> <= 0)) &&
             ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))))
        P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) &&
         ((1 <= <nth_1030@110:1>) &&
          (((1 + <nth_1030@110:0>) > 0) &&
           ((<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>)) &&
            (((2 <= <nth_1030@110:1>) || ((1 + <nth_1030@110:0>) <= 0)) &&
             ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))))))
      upper bounds:
        P[<fail_1565@151:0>](var352:bool) = true
      begin GenHcSolver.classify_pids(151540)[4]
        output:
          [<fail_1565@151:0>]
      end GenHcSolver.classify_pids(151540)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(151543)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(151544)[5]
          begin InterpProver.interpolate_fresh(151545)[6]
            begin InterpProver.interpolate_log(151546)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(151547)[8]
                begin InterpProver.interpolate_simplify(151548)[9]
                  begin InterpProver.interpolate_quick(151561)[10]
                    
                  end InterpProver.interpolate_quick(151561)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(151565)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(151565)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(151548)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(151547)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(151546)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(151545)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(151544)[5] (0.000000 sec.)
        output:
          P[<fail_1565@151:0>](var349:bool) = false
      end ApronInterface.convex_hull_interpolate(151543)[4] (0.000000 sec.)
      Horn clauses:
        P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,1:int,0:int,<f_nth_1555@145:4>:int),
        ((1 + <nth_1030@148:0>) <> 0) |- bot
        
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
        (((1 + <nth_1030@110:0>) > 0) && (1 <= <nth_1030@110:1>))
        |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                               <<nth_1030@110:2>@118:0>:int,
                                               <<<nth_1030@110:2>@118:1>@141:0>:int)
        
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> >= 0) &&
          ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
           (((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)) &&
            ((2 <= <<make_list_1035@77:1>@106:0>) || (<make_list_1035@77:0> <= 0))))))
        |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                            <<make_list_1035@77:1>@106:0>:int,
                                                            <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                            <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
        
        P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        ((<make_list_1035@77:0> > 0) && ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))
        |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                    <<make_list_1035@77:1>@106:0>:int,
                                                    <<<make_list_1035@77:1>@106:1>@122:0>:int)
        
         ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
        
        P[<make_list_1035@77:0>](0:int)|- bot
        
        P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                        -1 + <<make_list_1035@80:1>@96:0>):int),
        ((<make_list_1035@80:0> >= 0) && (1 > <<make_list_1035@80:1>@96:0>)) |- bot
        
         ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                           <<make_list_1035@83:1>@86:0>:int)
        
         (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
      lower bounds:
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = (<make_list_1035@77:0> > 0)
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<<make_list_1035@77:1>@106:0> >= 1) &&
          ((<make_list_1035@77:0> > 0) && ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> > 0) &&
          ((<<make_list_1035@77:1>@106:0> >= 1) &&
           ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
            (((2 <= <<make_list_1035@77:1>@106:0>) || (<make_list_1035@77:0> <= 0)) &&
             ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))))
        P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) &&
         ((1 <= <nth_1030@110:1>) &&
          (((1 + <nth_1030@110:0>) > 0) &&
           ((<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>)) &&
            (((2 <= <nth_1030@110:1>) || ((1 + <nth_1030@110:0>) <= 0)) &&
             ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))))))
      upper bounds:
        P[<<<nth_1030@110:2>@118:1>@141:0>](var353:int,var354:int,var355:int,var356:int) =
        ((var355 <> 0) || ((var354 <> 1) || (var353 = 0)))
      begin GenHcSolver.classify_pids(161408)[4]
        output:
          [<<<nth_1030@110:2>@118:1>@141:0>]
      end GenHcSolver.classify_pids(161408)[4] (0.000000 sec.)
      lb:((<<nth_1030@110:2>@118:0> = 0) &&
          ((1 <= <nth_1030@110:1>) &&
           (((1 + <nth_1030@110:0>) > 0) &&
            ((<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>)) &&
             (((2 <= <nth_1030@110:1>) || ((1 + <nth_1030@110:0>) <= 0)) &&
              ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))))))
      nub:(not ((<<nth_1030@110:2>@118:0> <> 0) || ((<nth_1030@110:1> <> 1) || (<nth_1030@110:0> = 0))))
      begin ApronInterface.convex_hull_interpolate(161411)[4]
        lb:((<<nth_1030@110:2>@118:0> = 0) &&
            ((1 <= <nth_1030@110:1>) &&
             (((1 + <nth_1030@110:0>) > 0) &&
              ((<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>)) &&
               (((2 <= <nth_1030@110:1>) || ((1 + <nth_1030@110:0>) <= 0)) &&
                ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))))))
        nub:(not ((<<nth_1030@110:2>@118:0> <> 0) || ((<nth_1030@110:1> <> 1) || (<nth_1030@110:0> = 0))))
        lb':((<<nth_1030@110:2>@118:0> = 0) &&
             ((1 <= <nth_1030@110:1>) &&
              (((1 + <nth_1030@110:0>) > 0) &&
               ((<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>)) &&
                (((2 <= <nth_1030@110:1>) || ((1 + <nth_1030@110:0>) <= 0)) &&
                 ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))))))
        nub':(not ((<<nth_1030@110:2>@118:0> <> 0) || ((<nth_1030@110:1> <> 1) || (<nth_1030@110:0> = 0))))
        begin InterpProver.interpolate(161412)[5]
          begin InterpProver.interpolate_fresh(161413)[6]
            begin InterpProver.interpolate_log(161414)[7]
              input1: ((<<nth_1030@110:2>@118:0> = 0) &&
                       ((1 <= <nth_1030@110:1>) &&
                        (((1 + <nth_1030@110:0>) > 0) &&
                         ((<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>)) &&
                          (((2 <= <nth_1030@110:1>) || ((1 + <nth_1030@110:0>) <= 0)) &&
                           ((1 <= <nth_1030@110:1>) || ((2 + <nth_1030@110:0>) <= 0)))))))
              input2: (not ((<<nth_1030@110:2>@118:0> <> 0) || ((<nth_1030@110:1> <> 1) || (<nth_1030@110:0> = 0))))
              begin InterpProver.interpolate_check(161415)[8]
                begin InterpProver.interpolate_simplify(161416)[9]
                  begin InterpProver.interpolate_quick(162068)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(162077)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(162078)[12]
                        begin CsisatInterface.interpolate_csisat_log(162079)[13]
                          input1: ((1 <= v_sep_nth_1030_sep_110_sep_1 | (2 + v_sep_nth_1030_sep_110_sep_0) <= 0) & (2 <= v_sep_nth_1030_sep_110_sep_1 | (1 + v_sep_nth_1030_sep_110_sep_0) <= 0) & 0 = v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0 & 1 <= v_sep_nth_1030_sep_110_sep_1 & 1 <= (1 + v_sep_nth_1030_sep_110_sep_0))
                          input2: (not 0 = v_sep_nth_1030_sep_110_sep_0 & 0 = v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0 & 1 = v_sep_nth_1030_sep_110_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(162080)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(162080)[14] (0.000999 sec.)
                          output: -2*v_sep_nth_1030_sep_110_sep_1 <= -4
                          
                        end CsisatInterface.interpolate_csisat_log(162079)[13] (0.000999 sec.)
                        after simplification: -2*v_sep_nth_1030_sep_110_sep_1 <= -4
                        after dnf conversion: ((-2*v_sep_nth_1030_sep_110_sep_1 <= -4))
                        
                      end CsisatInterface.interpolate_csisat_post_process(162078)[12] (0.000999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(162077)[11] (0.000999 sec.)
                    
                  end InterpProver.interpolate_quick(162068)[10] (0.001999 sec.)
                  
                end InterpProver.interpolate_simplify(161416)[9] (0.003999 sec.)
                
              end InterpProver.interpolate_check(161415)[8] (0.003999 sec.)
              output: (2 <= <nth_1030@110:1>)
            end InterpProver.interpolate_log(161414)[7] (0.004999 sec.)
            
          end InterpProver.interpolate_fresh(161413)[6] (0.004999 sec.)
          
        end InterpProver.interpolate(161412)[5] (0.004999 sec.)
        output:
          P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int) =
          (2 <= <nth_1030@110:1>)
      end ApronInterface.convex_hull_interpolate(161411)[4] (0.004999 sec.)
      Horn clauses:
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,1:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
        ((1 + <nth_1030@110:0>) > 0) |- bot
        
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> >= 0) &&
          ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
           (((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)) &&
            ((2 <= <<make_list_1035@77:1>@106:0>) || (<make_list_1035@77:0> <= 0))))))
        |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                            <<make_list_1035@77:1>@106:0>:int,
                                                            <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                            <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
        
        P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        ((<make_list_1035@77:0> > 0) && ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))
        |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                    <<make_list_1035@77:1>@106:0>:int,
                                                    <<<make_list_1035@77:1>@106:1>@122:0>:int)
        
         ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
        
        P[<make_list_1035@77:0>](0:int)|- bot
        
        P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                        -1 + <<make_list_1035@80:1>@96:0>):int),
        ((<make_list_1035@80:0> >= 0) && (1 > <<make_list_1035@80:1>@96:0>)) |- bot
        
         ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                           <<make_list_1035@83:1>@86:0>:int)
        
         (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
      lower bounds:
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = (<make_list_1035@77:0> > 0)
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<<make_list_1035@77:1>@106:0> >= 1) &&
          ((<make_list_1035@77:0> > 0) && ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> > 0) &&
          ((<<make_list_1035@77:1>@106:0> >= 1) &&
           ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
            (((2 <= <<make_list_1035@77:1>@106:0>) || (<make_list_1035@77:0> <= 0)) &&
             ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))))
      upper bounds:
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](var357:int,var358:int,var359:int,var360:int) =
        ((var358 <> 1) || (var357 <= 0))
      begin GenHcSolver.classify_pids(168917)[4]
        output:
          [<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]
      end GenHcSolver.classify_pids(168917)[4] (0.000000 sec.)
      lb:((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
          ((<make_list_1035@77:0> > 0) &&
           ((<<make_list_1035@77:1>@106:0> >= 1) &&
            ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
             (((2 <= <<make_list_1035@77:1>@106:0>) || (<make_list_1035@77:0> <= 0)) &&
              ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))))
      nub:(not ((<<make_list_1035@77:1>@106:0> <> 1) || (<make_list_1035@77:0> <= 0)))
      begin ApronInterface.convex_hull_interpolate(168920)[4]
        lb:((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
            ((<make_list_1035@77:0> > 0) &&
             ((<<make_list_1035@77:1>@106:0> >= 1) &&
              ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
               (((2 <= <<make_list_1035@77:1>@106:0>) || (<make_list_1035@77:0> <= 0)) &&
                ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))))
        nub:(not ((<<make_list_1035@77:1>@106:0> <> 1) || (<make_list_1035@77:0> <= 0)))
        lb':((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
             ((<make_list_1035@77:0> > 0) &&
              ((<<make_list_1035@77:1>@106:0> >= 1) &&
               ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
                (((2 <= <<make_list_1035@77:1>@106:0>) || (<make_list_1035@77:0> <= 0)) &&
                 ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))))
        nub':(not ((<<make_list_1035@77:1>@106:0> <> 1) || (<make_list_1035@77:0> <= 0)))
        begin InterpProver.interpolate(168921)[5]
          begin InterpProver.interpolate_fresh(168922)[6]
            begin InterpProver.interpolate_log(168923)[7]
              input1: ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
                       ((<make_list_1035@77:0> > 0) &&
                        ((<<make_list_1035@77:1>@106:0> >= 1) &&
                         ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
                          (((2 <= <<make_list_1035@77:1>@106:0>) || (<make_list_1035@77:0> <= 0)) &&
                           ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))))
              input2: (not ((<<make_list_1035@77:1>@106:0> <> 1) || (<make_list_1035@77:0> <= 0)))
              begin InterpProver.interpolate_check(168924)[8]
                begin InterpProver.interpolate_simplify(168925)[9]
                  begin InterpProver.interpolate_quick(169398)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(169407)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(169408)[12]
                        begin CsisatInterface.interpolate_csisat_log(169409)[13]
                          input1: ((1 <= v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0 | (1 + v_sep_make_list_1035_sep_77_sep_0) <= 0) & (2 <= v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0 | v_sep_make_list_1035_sep_77_sep_0 <= 0) & 1 <= v_sep_make_list_1035_sep_77_sep_0 & 1 <= v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0)
                          input2: (1 = v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0 & 1 <= v_sep_make_list_1035_sep_77_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(169410)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(169410)[14] (0.000000 sec.)
                          output: (v_sep_make_list_1035_sep_77_sep_0 < 1 | -2*v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0 <= -4)
                          
                        end CsisatInterface.interpolate_csisat_log(169409)[13] (0.000000 sec.)
                        after simplification: (v_sep_make_list_1035_sep_77_sep_0 < 1 | -2*v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0 <= -4)
                        after dnf conversion: ((v_sep_make_list_1035_sep_77_sep_0 < 1) | (-2*v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0 <= -4))
                        
                      end CsisatInterface.interpolate_csisat_post_process(169408)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(169407)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(169398)[10] (0.001000 sec.)
                  begin minimizing # of disjunctions(169422)[10]
                    input: ((<make_list_1035@77:0> < 1) || (2 <= <<make_list_1035@77:1>@106:0>))
                    output: (2 <= <<make_list_1035@77:1>@106:0>)
                  end minimizing # of disjunctions(169422)[10] (0.001999 sec.)
                  
                end InterpProver.interpolate_simplify(168925)[9] (0.003999 sec.)
                
              end InterpProver.interpolate_check(168924)[8] (0.004999 sec.)
              output: (2 <= <<make_list_1035@77:1>@106:0>)
            end InterpProver.interpolate_log(168923)[7] (0.004999 sec.)
            
          end InterpProver.interpolate_fresh(168922)[6] (0.004999 sec.)
          
        end InterpProver.interpolate(168921)[5] (0.004999 sec.)
        output:
          P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
          (2 <= <<make_list_1035@77:1>@106:0>)
      end ApronInterface.convex_hull_interpolate(168920)[4] (0.004999 sec.)
      Horn clauses:
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int,<<make_list_1035@77:1>@106:0>:int,0:int),
        P[<make_list_1035@77:0>](<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int),
        ((2 > <<make_list_1035@77:1>@106:0>) &&
         ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> >= 0) &&
          (((2 <= <<make_list_1035@77:1>@106:0>) || (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> <= 0)) &&
           ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>) <= 0)))))
        |- bot
        
        P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        ((<make_list_1035@77:0> > 0) && ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))
        |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                    <<make_list_1035@77:1>@106:0>:int,
                                                    <<<make_list_1035@77:1>@106:1>@122:0>:int)
        
         ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
        
        P[<make_list_1035@77:0>](0:int)|- bot
        
        P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                        -1 + <<make_list_1035@80:1>@96:0>):int),
        ((<make_list_1035@80:0> >= 0) && (1 > <<make_list_1035@80:1>@96:0>)) |- bot
        
         ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                           <<make_list_1035@83:1>@86:0>:int)
        
         (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
      lower bounds:
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = (<make_list_1035@77:0> > 0)
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<<make_list_1035@77:1>@106:0> >= 1) &&
          ((<make_list_1035@77:0> > 0) && ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))
      upper bounds:
        P[<<<make_list_1035@77:1>@106:1>@122:0>](var361:int,var362:int,var363:int) =
        ((var363 <> 0) ||
         ((2 <= var362) || ((var361 <= 0) || (((2 > var362) && (var361 > 0)) || ((1 > var362) && ((1 + var361) > 0))))))
      begin GenHcSolver.classify_pids(175244)[4]
        output:
          [<<<make_list_1035@77:1>@106:1>@122:0>]
      end GenHcSolver.classify_pids(175244)[4] (0.000000 sec.)
      lb:((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
          ((<<make_list_1035@77:1>@106:0> >= 1) &&
           ((<make_list_1035@77:0> > 0) && ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))
      nub:(not
             ((<<<make_list_1035@77:1>@106:1>@122:0> <> 0) ||
              ((2 <= <<make_list_1035@77:1>@106:0>) ||
               ((<make_list_1035@77:0> <= 0) ||
                (((2 > <<make_list_1035@77:1>@106:0>) && (<make_list_1035@77:0> > 0)) ||
                 ((1 > <<make_list_1035@77:1>@106:0>) && ((1 + <make_list_1035@77:0>) > 0)))))))
      begin ApronInterface.convex_hull_interpolate(175247)[4]
        lb:((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
            ((<<make_list_1035@77:1>@106:0> >= 1) &&
             ((<make_list_1035@77:0> > 0) &&
              ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))
        nub:(not
               ((<<<make_list_1035@77:1>@106:1>@122:0> <> 0) ||
                ((2 <= <<make_list_1035@77:1>@106:0>) ||
                 ((<make_list_1035@77:0> <= 0) ||
                  (((2 > <<make_list_1035@77:1>@106:0>) && (<make_list_1035@77:0> > 0)) ||
                   ((1 > <<make_list_1035@77:1>@106:0>) && ((1 + <make_list_1035@77:0>) > 0)))))))
        lb':((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
             ((<<make_list_1035@77:1>@106:0> >= 1) &&
              ((<make_list_1035@77:0> > 0) &&
               ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))
        nub':(not
                ((<<<make_list_1035@77:1>@106:1>@122:0> <> 0) ||
                 ((2 <= <<make_list_1035@77:1>@106:0>) ||
                  ((<make_list_1035@77:0> <= 0) ||
                   (((2 > <<make_list_1035@77:1>@106:0>) && (<make_list_1035@77:0> > 0)) ||
                    ((1 > <<make_list_1035@77:1>@106:0>) && ((1 + <make_list_1035@77:0>) > 0)))))))
        begin InterpProver.interpolate(175248)[5]
          begin InterpProver.interpolate_fresh(175249)[6]
            begin InterpProver.interpolate_log(175250)[7]
              input1: ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
                       ((<<make_list_1035@77:1>@106:0> >= 1) &&
                        ((<make_list_1035@77:0> > 0) &&
                         ((1 <= <<make_list_1035@77:1>@106:0>) || ((1 + <make_list_1035@77:0>) <= 0)))))
              input2: (not
                         ((<<<make_list_1035@77:1>@106:1>@122:0> <> 0) ||
                          ((2 <= <<make_list_1035@77:1>@106:0>) ||
                           ((<make_list_1035@77:0> <= 0) ||
                            (((2 > <<make_list_1035@77:1>@106:0>) && (<make_list_1035@77:0> > 0)) ||
                             ((1 > <<make_list_1035@77:1>@106:0>) && ((1 + <make_list_1035@77:0>) > 0)))))))
              begin InterpProver.interpolate_check(175251)[8]
                begin InterpProver.interpolate_simplify(175252)[9]
                  begin InterpProver.interpolate_quick(175629)[10]
                    
                  end InterpProver.interpolate_quick(175629)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(175252)[9] (0.003000 sec.)
                
              end InterpProver.interpolate_check(175251)[8] (0.004000 sec.)
              output: true
            end InterpProver.interpolate_log(175250)[7] (0.005000 sec.)
            
          end InterpProver.interpolate_fresh(175249)[6] (0.005000 sec.)
          
        end InterpProver.interpolate(175248)[5] (0.005000 sec.)
        output:
          P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(175247)[4] (0.005000 sec.)
      Horn clauses:
        P[<make_list_1035@77:0>](0:int)|- bot
        
         ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
        
        P[<make_list_1035@77:0>](0:int)|- bot
        
        P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                        -1 + <<make_list_1035@80:1>@96:0>):int),
        ((<make_list_1035@80:0> >= 0) && (1 > <<make_list_1035@80:1>@96:0>)) |- bot
        
         ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                           <<make_list_1035@83:1>@86:0>:int)
        
         (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
      lower bounds:
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = (<make_list_1035@77:0> > 0)
      upper bounds:
        P[<<nth_1030@110:2>@118:0>](var364:int,var365:int,var366:int) = true
      begin GenHcSolver.classify_pids(177495)[4]
        output:
          [<<nth_1030@110:2>@118:0>]
      end GenHcSolver.classify_pids(177495)[4] (0.000000 sec.)
      lb:((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(177498)[4]
        lb:((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        nub:false
        lb':((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        nub':false
        begin InterpProver.interpolate(177499)[5]
          begin InterpProver.interpolate_fresh(177500)[6]
            begin InterpProver.interpolate_log(177501)[7]
              input1: ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
              input2: false
              begin InterpProver.interpolate_check(177502)[8]
                begin InterpProver.interpolate_simplify(177503)[9]
                  begin InterpProver.interpolate_quick(177542)[10]
                    
                  end InterpProver.interpolate_quick(177542)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(177503)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(177502)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(177501)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(177500)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(177499)[5] (0.000000 sec.)
        output:
          P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) = true
      end ApronInterface.convex_hull_interpolate(177498)[4] (0.000999 sec.)
      Horn clauses:
        P[<make_list_1035@77:0>](0:int)|- bot
        
        P[<make_list_1035@77:0>](0:int)|- bot
        
        P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                        -1 + <<make_list_1035@80:1>@96:0>):int),
        ((<make_list_1035@80:0> >= 0) && (1 > <<make_list_1035@80:1>@96:0>)) |- bot
        
         ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                           <<make_list_1035@83:1>@86:0>:int)
        
         (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
      lower bounds:
        P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = (<make_list_1035@77:0> > 0)
      upper bounds:
        P[<make_list_1035@77:0>](var367:int) = (var367 <> 0)
      begin GenHcSolver.classify_pids(178747)[4]
        output:
          [<make_list_1035@77:0>]
      end GenHcSolver.classify_pids(178747)[4] (0.000000 sec.)
      lb:(<make_list_1035@77:0> > 0)
      nub:(not (<make_list_1035@77:0> <> 0))
      begin ApronInterface.convex_hull_interpolate(178750)[4]
        lb:(<make_list_1035@77:0> > 0)
        nub:(not (<make_list_1035@77:0> <> 0))
        lb':(<make_list_1035@77:0> > 0)
        nub':(not (<make_list_1035@77:0> <> 0))
        begin InterpProver.interpolate(178751)[5]
          begin InterpProver.interpolate_fresh(178752)[6]
            begin InterpProver.interpolate_log(178753)[7]
              input1: (<make_list_1035@77:0> > 0)
              input2: (not (<make_list_1035@77:0> <> 0))
              begin InterpProver.interpolate_check(178754)[8]
                begin InterpProver.interpolate_simplify(178755)[9]
                  begin InterpProver.interpolate_quick(178772)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(178781)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(178782)[12]
                        begin CsisatInterface.interpolate_csisat_log(178783)[13]
                          input1: 1 <= v_sep_make_list_1035_sep_77_sep_0
                          input2: 0 = v_sep_make_list_1035_sep_77_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(178784)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(178784)[14] (0.000000 sec.)
                          output: -2*v_sep_make_list_1035_sep_77_sep_0 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(178783)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_make_list_1035_sep_77_sep_0 <= -2
                        after dnf conversion: ((-2*v_sep_make_list_1035_sep_77_sep_0 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(178782)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(178781)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(178772)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(178755)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(178754)[8] (0.000999 sec.)
              output: (1 <= <make_list_1035@77:0>)
            end InterpProver.interpolate_log(178753)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(178752)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(178751)[5] (0.000999 sec.)
        output:
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = (1 <= <make_list_1035@77:0>)
      end ApronInterface.convex_hull_interpolate(178750)[4] (0.000999 sec.)
      Horn clauses:
        P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                        -1 + <<make_list_1035@80:1>@96:0>):int),
        ((<make_list_1035@80:0> >= 0) && (1 > <<make_list_1035@80:1>@96:0>)) |- bot
        
         ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                           <<make_list_1035@83:1>@86:0>:int)
      lower bounds:
        P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
      upper bounds:
        P[<<make_list_1035@83:1>@86:0>](var369:int,var370:int) = ((0 <= var370) || ((1 + var369) < 0))
      begin GenHcSolver.classify_pids(179907)[4]
        output:
          [<<make_list_1035@83:1>@86:0>]
      end GenHcSolver.classify_pids(179907)[4] (0.000000 sec.)
      lb:((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
      nub:(not ((0 <= <<make_list_1035@83:1>@86:0>) || ((1 + <make_list_1035@83:0>) < 0)))
      begin ApronInterface.convex_hull_interpolate(179910)[4]
        lb:((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        nub:(not ((0 <= <<make_list_1035@83:1>@86:0>) || ((1 + <make_list_1035@83:0>) < 0)))
        lb':((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        nub':(not ((0 <= <<make_list_1035@83:1>@86:0>) || ((1 + <make_list_1035@83:0>) < 0)))
        begin InterpProver.interpolate(179911)[5]
          begin InterpProver.interpolate_fresh(179912)[6]
            begin InterpProver.interpolate_log(179913)[7]
              input1: ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
              input2: (not ((0 <= <<make_list_1035@83:1>@86:0>) || ((1 + <make_list_1035@83:0>) < 0)))
              begin InterpProver.interpolate_check(179914)[8]
                begin InterpProver.interpolate_simplify(179915)[9]
                  begin InterpProver.interpolate_quick(179966)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(179975)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(179976)[12]
                        begin CsisatInterface.interpolate_csisat_log(179977)[13]
                          input1: (0 = v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 & (1 + v_sep_make_list_1035_sep_83_sep_0) <= 0)
                          input2: (0 <= (1 + v_sep_make_list_1035_sep_83_sep_0) & (1 + v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(179978)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(179978)[14] (0.000000 sec.)
                          output: -2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(179977)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(179976)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(179975)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(179966)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(179915)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(179914)[8] (0.002000 sec.)
              output: (0 <= <<make_list_1035@83:1>@86:0>)
            end InterpProver.interpolate_log(179913)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(179912)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(179911)[5] (0.002000 sec.)
        output:
          P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
          (0 <= <<make_list_1035@83:1>@86:0>)
      end ApronInterface.convex_hull_interpolate(179910)[4] (0.002000 sec.)
      begin HcSolver.check_validity(180134)[4]
        input:
          P[<fail_1565@151:0>](<fail_1565@151:0>:bool)|- bot
          
          P[<nth_1030@148:1>](<nth_1030@148:0>:int,0:int), <fail_1565@151:0>
          |- P[<fail_1565@151:0>](<fail_1565@151:0>:bool)
          
          P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,(
                                              1 + <nth_1030@148:1>):int,0:int,<f_nth_1555@145:4>:int),
          P[<nth_1030@110:1>]((1 + <nth_1030@148:0>):int,(1 + <nth_1030@148:1>):int),
          (((1 + <nth_1030@148:0>) <> 0) && (<nth_1030@148:1> >= 0))
          |- P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int)
          
          P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
          P[<<make_list_1035@77:1>@106:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int),
          P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int), (
          (1 + <nth_1030@110:0>) > 0)
          |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,
                                                 <nth_1030@110:1>:int,
                                                 <<nth_1030@110:2>@118:0>:int,
                                                 <<<nth_1030@110:2>@118:1>@141:0>:int)
          
          P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
          P[<<make_list_1035@80:1>@96:0>]((-1 + <make_list_1035@77:0>):int,(
                                          -1 + <<make_list_1035@77:1>@106:0>):int),
          P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
          ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
           ((<make_list_1035@77:0> >= 0) && (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))
          |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                              <<make_list_1035@77:1>@106:0>:int,
                                                              <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                              <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
          
          P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
          P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int), (<make_list_1035@77:0> > 0)
          |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                      <<make_list_1035@77:1>@106:0>:int,
                                                      <<<make_list_1035@77:1>@106:1>@122:0>:int)
          
          P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
          ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
          |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                         <<nth_1030@110:2>@118:0>:int)
          
          P[<<make_list_1035@77:1>@106:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int),
          ((1 + <nth_1030@110:0>) > 0) |- P[<nth_1030@110:1>](<nth_1030@110:0>:int,
                                                              <nth_1030@110:1>:int)
          
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
          P[<<make_list_1035@80:1>@96:0>]((-1 + <make_list_1035@77:0>):int,(
                                          -1 + <<make_list_1035@77:1>@106:0>):int), (
          <make_list_1035@77:0> >= 0)
          |- P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,
                                              <<make_list_1035@77:1>@106:0>:int)
          
          P[<make_list_1035@80:0>](<make_list_1035@80:0>:int),
          P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                          -1 + <<make_list_1035@80:1>@96:0>):int), (
          <make_list_1035@80:0> >= 0)
          |- P[<<make_list_1035@80:1>@96:0>](<make_list_1035@80:0>:int,
                                             <<make_list_1035@80:1>@96:0>:int)
          
          P[<make_list_1035@83:0>](<make_list_1035@83:0>:int),
          ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
          |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                             <<make_list_1035@83:1>@86:0>:int)
          
          P[<make_list_1035@80:0>]((1 + <make_list_1035@83:0>):int), (
          (1 + <make_list_1035@83:0>) >= 0) |- P[<make_list_1035@83:0>](
          <make_list_1035@83:0>:int)
          
          P[<make_list_1035@77:0>]((1 + <make_list_1035@80:0>):int), (
          (1 + <make_list_1035@80:0>) >= 0) |- P[<make_list_1035@80:0>](
          <make_list_1035@80:0>:int)
          
           (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(180134)[4] (0.016997 sec.)
      solution:
        P[<fail_1565@151:0>](var349:bool) = false
        P[<nth_1030@148:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int) = (1 <= <nth_1030@110:1>)
        P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int) =
        (2 <= <nth_1030@110:1>)
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
        (2 <= <<make_list_1035@77:1>@106:0>)
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        true
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) = true
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int) = (1 <= <nth_1030@110:1>)
        P[<<make_list_1035@77:1>@106:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((1 <= <<make_list_1035@83:1>@86:0>) ||
         (((1 + <make_list_1035@83:0>) <= 0) || (2 <= <<make_list_1035@83:1>@86:0>)))
        P[<<make_list_1035@80:1>@96:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((1 <= <<make_list_1035@83:1>@86:0>) ||
         (((1 + <make_list_1035@83:0>) <= 0) || (2 <= <<make_list_1035@83:1>@86:0>)))
        P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        (0 <= <<make_list_1035@83:1>@86:0>)
        P[<make_list_1035@83:0>](<make_list_1035@80:0>:int) = true
        P[<make_list_1035@80:0>](<make_list_1035@80:0>:int) = true
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = (1 <= <make_list_1035@77:0>)
    end GenHcSolver.solve(56883)[3] (0.604908 sec.)
    begin GenHcSolver.solve(182707)[3]
      Horn clauses:
        P[<fail_1565@151:0>](<fail_1565@151:0>:bool)|- bot
        
        P[<nth_1030@148:1>](<nth_1030@148:0>:int,0:int), <fail_1565@151:0>
        |- P[<fail_1565@151:0>](<fail_1565@151:0>:bool)
        
        P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,(
                                            1 + <nth_1030@148:1>):int,0:int,<f_nth_1555@145:4>:int),
        P[<nth_1030@110:1>]((1 + <nth_1030@148:0>):int,(1 + <nth_1030@148:1>):int),
        (((1 + <nth_1030@148:0>) <> 0) && (<nth_1030@148:1> >= 0))
        |- P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int)
        
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
        P[<<make_list_1035@77:1>@106:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int),
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int), (
        (1 + <nth_1030@110:0>) > 0)
        |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                               <<nth_1030@110:2>@118:0>:int,
                                               <<<nth_1030@110:2>@118:1>@141:0>:int)
        
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        P[<<make_list_1035@80:1>@96:0>]((-1 + <make_list_1035@77:0>):int,(
                                        -1 + <<make_list_1035@77:1>@106:0>):int),
        P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> >= 0) && (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))
        |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                            <<make_list_1035@77:1>@106:0>:int,
                                                            <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                            <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
        
        P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
        P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int), (<make_list_1035@77:0> > 0)
        |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                    <<make_list_1035@77:1>@106:0>:int,
                                                    <<<make_list_1035@77:1>@106:1>@122:0>:int)
        
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
        
        P[<<make_list_1035@77:1>@106:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int), (
        (1 + <nth_1030@110:0>) > 0) |- P[<nth_1030@110:1>](<nth_1030@110:0>:int,
                                                           <nth_1030@110:1>:int)
        
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        P[<<make_list_1035@80:1>@96:0>]((-1 + <make_list_1035@77:0>):int,(
                                        -1 + <<make_list_1035@77:1>@106:0>):int), (
        <make_list_1035@77:0> >= 0)
        |- P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,
                                            <<make_list_1035@77:1>@106:0>:int)
        
        P[<make_list_1035@80:0>](<make_list_1035@80:0>:int),
        P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                        -1 + <<make_list_1035@80:1>@96:0>):int), (
        <make_list_1035@80:0> >= 0)
        |- P[<<make_list_1035@80:1>@96:0>](<make_list_1035@80:0>:int,
                                           <<make_list_1035@80:1>@96:0>:int)
        
        P[<make_list_1035@83:0>](<make_list_1035@83:0>:int),
        ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
        |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                           <<make_list_1035@83:1>@86:0>:int)
        
        P[<make_list_1035@80:0>]((1 + <make_list_1035@83:0>):int), ((1 + <make_list_1035@83:0>) >= 0)
        |- P[<make_list_1035@83:0>](<make_list_1035@83:0>:int)
        
        P[<make_list_1035@77:0>]((1 + <make_list_1035@80:0>):int), ((1 + <make_list_1035@80:0>) >= 0)
        |- P[<make_list_1035@80:0>](<make_list_1035@80:0>:int)
        
         (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
      lower bounds:
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = (<make_list_1035@77:0> > 0)
        P[<make_list_1035@80:0>](<make_list_1035@80:0>:int) = ((1 + <make_list_1035@80:0>) > 0)
        P[<make_list_1035@83:0>](<make_list_1035@83:0>:int) = ((1 + <make_list_1035@83:0>) >= 0)
        P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> = -1))
        P[<<make_list_1035@80:1>@96:0>](<make_list_1035@80:0>:int,<<make_list_1035@80:1>@96:0>:int) =
        ((<make_list_1035@80:0> = 0) && (<<make_list_1035@80:1>@96:0> = 1))
        P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int) =
        ((<make_list_1035@77:0> = 1) && (<<make_list_1035@77:1>@106:0> = 2))
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int) =
        ((<nth_1030@110:0> = 0) && (<nth_1030@110:1> = 2))
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) && ((<nth_1030@110:1> = 2) && (<nth_1030@110:0> = 0)))
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<<make_list_1035@77:1>@106:0> = 2) && (<make_list_1035@77:0> = 1)))
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
        ((<make_list_1035@77:0> = 1) &&
         ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
          ((<<make_list_1035@77:1>@106:0> = 2) &&
           (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>))))
        P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int) =
        ((<nth_1030@110:0> = 0) &&
         ((<<nth_1030@110:2>@118:0> = 0) &&
          ((<nth_1030@110:1> = 2) && (<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>)))))
        P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int) = false
        P[<fail_1565@151:0>](<fail_1565@151:0>:bool) = false
      upper bounds:
        P[<<make_list_1035@77:1>@106:0>](var378:int,var379:int) = true
        P[<<make_list_1035@80:1>@96:0>](var375:int,var376:int) = ((var376 <> 0) || (var375 <= 0))
        P[<<make_list_1035@83:1>@86:0>](var372:int,var373:int) = (((1 + var373) <> 0) || ((1 + var372) <= 0))
      begin GenHcSolver.classify_pids(193991)[4]
        output:
          [<<make_list_1035@83:1>@86:0>;<<make_list_1035@80:1>@96:0>;<<make_list_1035@77:1>@106:0>]
      end GenHcSolver.classify_pids(193991)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(194058)[4]
        lb:(((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> = -1)) ||
            (((<make_list_1035@83:0> = 0) && (<<make_list_1035@83:1>@86:0> = 1)) ||
             ((<make_list_1035@83:0> = 1) && (<<make_list_1035@83:1>@86:0> = 2))))
        nub:((not (((1 + <<make_list_1035@83:1>@86:0>) <> 0) || ((1 + <make_list_1035@83:0>) <= 0))) ||
             (not ((<<make_list_1035@83:1>@86:0> <> 0) || (<make_list_1035@83:0> <= 0))))
        begin ExtFormula.Formula.case_analysis_boolean(194086)[5]
          ts: (((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> = -1)) ||
               (((<make_list_1035@83:0> = 0) && (<<make_list_1035@83:1>@86:0> = 1)) ||
                ((<make_list_1035@83:0> = 1) && (<<make_list_1035@83:1>@86:0> = 2))))
          
        end ExtFormula.Formula.case_analysis_boolean(194086)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(194121)[5]
          ts: (((<<make_list_1035@83:1>@86:0> = -1) && ((1 + <make_list_1035@83:0>) > 0)) ||
               ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> > 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(194121)[5] (0.001000 sec.)
        lb':((((-1 + <<make_list_1035@83:1>@86:0>) + (-1 * <make_list_1035@83:0>)) = 0) &&
             (((1 + (-1 * <make_list_1035@83:0>)) >= 0) && ((1 + <make_list_1035@83:0>) >= 0)))
        nub':(((-1 * <<make_list_1035@83:1>@86:0>) >= 0) &&
              (((1 + <<make_list_1035@83:1>@86:0>) >= 0) &&
               (((-1 + (-1 * <<make_list_1035@83:1>@86:0>)) + <make_list_1035@83:0>) >= 0)))
        begin InterpProver.interpolate(194130)[5]
          begin InterpProver.interpolate_fresh(194131)[6]
            begin InterpProver.interpolate_log(194132)[7]
              input1: ((((-1 + <<make_list_1035@83:1>@86:0>) + (-1 * <make_list_1035@83:0>)) = 0) &&
                       (((1 + (-1 * <make_list_1035@83:0>)) >= 0) && ((1 + <make_list_1035@83:0>) >= 0)))
              input2: (((-1 * <<make_list_1035@83:1>@86:0>) >= 0) &&
                       (((1 + <<make_list_1035@83:1>@86:0>) >= 0) &&
                        (((-1 + (-1 * <<make_list_1035@83:1>@86:0>)) + <make_list_1035@83:0>) >= 0)))
              begin InterpProver.interpolate_check(194133)[8]
                begin InterpProver.interpolate_simplify(194134)[9]
                  begin InterpProver.interpolate_quick(194287)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(194296)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(194297)[12]
                        begin CsisatInterface.interpolate_csisat_log(194298)[13]
                          input1: (v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 = (1 + v_sep_make_list_1035_sep_83_sep_0) & 0 <= (1 + v_sep_make_list_1035_sep_83_sep_0) & v_sep_make_list_1035_sep_83_sep_0 <= 1)
                          input2: (0 <= (1 + v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0) & v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0 <= 0 & (1 + v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0) <= v_sep_make_list_1035_sep_83_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(194299)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(194299)[14] (0.000000 sec.)
                          output: (v_sep_make_list_1035_sep_83_sep_0 + -1*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0) <= -1
                          
                        end CsisatInterface.interpolate_csisat_log(194298)[13] (0.000000 sec.)
                        after simplification: (v_sep_make_list_1035_sep_83_sep_0 + -1*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0) <= -1
                        after dnf conversion: (((v_sep_make_list_1035_sep_83_sep_0 + -1*v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0) <= -1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(194297)[12] (0.000999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(194296)[11] (0.000999 sec.)
                    
                  end InterpProver.interpolate_quick(194287)[10] (0.001999 sec.)
                  
                end InterpProver.interpolate_simplify(194134)[9] (0.002999 sec.)
                
              end InterpProver.interpolate_check(194133)[8] (0.002999 sec.)
              output: ((1 + <make_list_1035@83:0>) <= <<make_list_1035@83:1>@86:0>)
            end InterpProver.interpolate_log(194132)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(194131)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(194130)[5] (0.002999 sec.)
        output:
          P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
          ((1 + <make_list_1035@83:0>) <= <<make_list_1035@83:1>@86:0>)
          P[<<make_list_1035@80:1>@96:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
          ((1 + <make_list_1035@83:0>) <= <<make_list_1035@83:1>@86:0>)
          P[<<make_list_1035@77:1>@106:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
          ((1 + <make_list_1035@83:0>) <= <<make_list_1035@83:1>@86:0>)
      end ApronInterface.convex_hull_interpolate(194058)[4] (0.003999 sec.)
      Horn clauses:
        P[<fail_1565@151:0>](<fail_1565@151:0>:bool)|- bot
        
        P[<nth_1030@148:1>](<nth_1030@148:0>:int,0:int), <fail_1565@151:0>
        |- P[<fail_1565@151:0>](<fail_1565@151:0>:bool)
        
        P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,(
                                            1 + <nth_1030@148:1>):int,0:int,<f_nth_1555@145:4>:int),
        P[<nth_1030@110:1>]((1 + <nth_1030@148:0>):int,(1 + <nth_1030@148:1>):int),
        (((1 + <nth_1030@148:0>) <> 0) && (<nth_1030@148:1> >= 0))
        |- P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int)
        
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
        (((1 + <nth_1030@110:0>) > 0) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>))
        |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                               <<nth_1030@110:2>@118:0>:int,
                                               <<<nth_1030@110:2>@118:1>@141:0>:int)
        
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> >= 0) &&
          (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) &&
           (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>))))
        |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                            <<make_list_1035@77:1>@106:0>:int,
                                                            <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                            <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
        
        P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
        ((<make_list_1035@77:0> > 0) && ((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>))
        |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                    <<make_list_1035@77:1>@106:0>:int,
                                                    <<<make_list_1035@77:1>@106:1>@122:0>:int)
        
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
        
         (((1 + <nth_1030@110:0>) > 0) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>))
        |- P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int)
        
        P[<make_list_1035@80:0>]((1 + <make_list_1035@83:0>):int), ((1 + <make_list_1035@83:0>) >= 0)
        |- P[<make_list_1035@83:0>](<make_list_1035@83:0>:int)
        
        P[<make_list_1035@77:0>]((1 + <make_list_1035@80:0>):int), ((1 + <make_list_1035@80:0>) >= 0)
        |- P[<make_list_1035@80:0>](<make_list_1035@80:0>:int)
        
         (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
      lower bounds:
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int) =
        (((1 + <nth_1030@110:0>) > 0) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>))
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = (<make_list_1035@77:0> > 0)
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) &&
         ((<nth_1030@110:1> >= 1) && (((1 + <nth_1030@110:0>) > 0) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>))))
        P[<make_list_1035@80:0>](<make_list_1035@80:0>:int) = ((1 + <make_list_1035@80:0>) > 0)
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<<make_list_1035@77:1>@106:0> >= 1) &&
          (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) && (<make_list_1035@77:0> > 0))))
        P[<make_list_1035@83:0>](<make_list_1035@83:0>:int) = ((1 + <make_list_1035@83:0>) >= 0)
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> > 0) &&
          ((<<make_list_1035@77:1>@106:0> >= 1) &&
           (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) &&
            (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))))
        P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) &&
         ((<nth_1030@110:1> >= 1) &&
          ((<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>)) &&
           (((1 + <nth_1030@110:0>) > 0) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>)))))
        P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int) =
        (((2 + <nth_1030@148:0>) <= <nth_1030@148:1>) && ((<nth_1030@148:1> >= 0) && ((1 + <nth_1030@148:0>) > 0)))
        P[<fail_1565@151:0>](<fail_1565@151:0>:bool) = false
      upper bounds:
        P[<make_list_1035@83:0>](var383:int) = true
        P[<make_list_1035@80:0>](var382:int) = true
        P[<make_list_1035@77:0>](var381:int) = true
      begin GenHcSolver.classify_pids(219582)[4]
        output:
          [<make_list_1035@77:0>;<make_list_1035@80:0>;<make_list_1035@83:0>]
      end GenHcSolver.classify_pids(219582)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(219603)[4]
        lb:((<make_list_1035@77:0> > 0) || (((1 + <make_list_1035@77:0>) > 0) || ((1 + <make_list_1035@77:0>) >= 0)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(219620)[5]
          ts: ((1 + <make_list_1035@77:0>) >= 0)
          
        end ExtFormula.Formula.case_analysis_boolean(219620)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(219627)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(219627)[5] (0.000000 sec.)
        lb':((1 + <make_list_1035@77:0>) >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(219630)[5]
          begin InterpProver.interpolate_fresh(219631)[6]
            begin InterpProver.interpolate_log(219632)[7]
              input1: ((1 + <make_list_1035@77:0>) >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(219633)[8]
                begin InterpProver.interpolate_simplify(219634)[9]
                  begin InterpProver.interpolate_quick(219652)[10]
                    
                  end InterpProver.interpolate_quick(219652)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(219634)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(219633)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(219632)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(219631)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(219630)[5] (0.000000 sec.)
        output:
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = true
          P[<make_list_1035@80:0>](<make_list_1035@77:0>:int) = true
          P[<make_list_1035@83:0>](<make_list_1035@77:0>:int) = true
      end ApronInterface.convex_hull_interpolate(219603)[4] (0.000999 sec.)
      Horn clauses:
        P[<fail_1565@151:0>](<fail_1565@151:0>:bool)|- bot
        
        P[<nth_1030@148:1>](<nth_1030@148:0>:int,0:int), <fail_1565@151:0>
        |- P[<fail_1565@151:0>](<fail_1565@151:0>:bool)
        
        P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,(
                                            1 + <nth_1030@148:1>):int,0:int,<f_nth_1555@145:4>:int),
        P[<nth_1030@110:1>]((1 + <nth_1030@148:0>):int,(1 + <nth_1030@148:1>):int),
        (((1 + <nth_1030@148:0>) <> 0) && (<nth_1030@148:1> >= 0))
        |- P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int)
        
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
        (((1 + <nth_1030@110:0>) > 0) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>))
        |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                               <<nth_1030@110:2>@118:0>:int,
                                               <<<nth_1030@110:2>@118:1>@141:0>:int)
        
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> >= 0) &&
          (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) &&
           (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>))))
        |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                            <<make_list_1035@77:1>@106:0>:int,
                                                            <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                            <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
        
        P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        ((<make_list_1035@77:0> > 0) && ((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>))
        |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                    <<make_list_1035@77:1>@106:0>:int,
                                                    <<<make_list_1035@77:1>@106:1>@122:0>:int)
        
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
        
         (((1 + <nth_1030@110:0>) > 0) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>))
        |- P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int)
      lower bounds:
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int) =
        (((1 + <nth_1030@110:0>) > 0) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>))
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) &&
         ((<nth_1030@110:1> >= 1) && (((1 + <nth_1030@110:0>) > 0) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>))))
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<<make_list_1035@77:1>@106:0> >= 1) &&
          ((<make_list_1035@77:0> > 0) && ((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>))))
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> > 0) &&
          ((<<make_list_1035@77:1>@106:0> >= 1) &&
           (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) &&
            (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))))
        P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) &&
         ((<nth_1030@110:1> >= 1) &&
          ((<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>)) &&
           (((1 + <nth_1030@110:0>) > 0) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>)))))
        P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int) =
        (((2 + <nth_1030@148:0>) <= <nth_1030@148:1>) && ((<nth_1030@148:1> >= 0) && ((1 + <nth_1030@148:0>) > 0)))
        P[<fail_1565@151:0>](<fail_1565@151:0>:bool) = false
      upper bounds:
        P[<nth_1030@148:1>](var388:int,var389:int) = (var389 <> 0)
        P[<nth_1030@110:1>](var385:int,var386:int) = true
      begin GenHcSolver.classify_pids(239097)[4]
        output:
          [<nth_1030@110:1>;<nth_1030@148:1>]
      end GenHcSolver.classify_pids(239097)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(239115)[4]
        lb:((((1 + <nth_1030@110:0>) > 0) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>)) ||
            (((2 + <nth_1030@110:0>) <= <nth_1030@110:1>) && ((<nth_1030@110:1> >= 0) && ((1 + <nth_1030@110:0>) > 0))))
        nub:(not (<nth_1030@110:1> <> 0))
        begin ExtFormula.Formula.case_analysis_boolean(239191)[5]
          ts: (((1 + <nth_1030@110:0>) > 0) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(239191)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(239202)[5]
          ts: (<nth_1030@110:1> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(239202)[5] (0.000000 sec.)
        lb':((((-2 + <nth_1030@110:1>) + (-1 * <nth_1030@110:0>)) >= 0) && (<nth_1030@110:0> >= 0))
        nub':(<nth_1030@110:1> = 0)
        begin InterpProver.interpolate(239206)[5]
          begin InterpProver.interpolate_fresh(239207)[6]
            begin InterpProver.interpolate_log(239208)[7]
              input1: ((((-2 + <nth_1030@110:1>) + (-1 * <nth_1030@110:0>)) >= 0) && (<nth_1030@110:0> >= 0))
              input2: (<nth_1030@110:1> = 0)
              begin InterpProver.interpolate_check(239209)[8]
                begin InterpProver.interpolate_simplify(239210)[9]
                  begin InterpProver.interpolate_quick(239255)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(239264)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(239265)[12]
                        begin CsisatInterface.interpolate_csisat_log(239266)[13]
                          input1: (0 <= v_sep_nth_1030_sep_110_sep_0 & (2 + v_sep_nth_1030_sep_110_sep_0) <= v_sep_nth_1030_sep_110_sep_1)
                          input2: 0 = v_sep_nth_1030_sep_110_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(239267)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(239267)[14] (0.000000 sec.)
                          output: -1*v_sep_nth_1030_sep_110_sep_1 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(239266)[13] (0.000000 sec.)
                        after simplification: -1*v_sep_nth_1030_sep_110_sep_1 <= -2
                        after dnf conversion: ((-1*v_sep_nth_1030_sep_110_sep_1 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(239265)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(239264)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(239255)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(239210)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(239209)[8] (0.002000 sec.)
              output: (2 <= <nth_1030@110:1>)
            end InterpProver.interpolate_log(239208)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(239207)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(239206)[5] (0.002000 sec.)
        output:
          P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int) = (2 <= <nth_1030@110:1>)
          P[<nth_1030@148:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int) = (2 <= <nth_1030@110:1>)
      end ApronInterface.convex_hull_interpolate(239115)[4] (0.003000 sec.)
      Horn clauses:
        P[<fail_1565@151:0>](<fail_1565@151:0>:bool)|- bot
        
        P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,2:int,0:int,<f_nth_1555@145:4>:int),
        ((1 + <nth_1030@148:0>) <> 0) |- bot
        
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
        (((1 + <nth_1030@110:0>) > 0) && (((2 + <nth_1030@110:0>) <= <nth_1030@110:1>) && (2 <= <nth_1030@110:1>)))
        |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                               <<nth_1030@110:2>@118:0>:int,
                                               <<<nth_1030@110:2>@118:1>@141:0>:int)
        
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> >= 0) &&
          (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) &&
           (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>))))
        |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                            <<make_list_1035@77:1>@106:0>:int,
                                                            <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                            <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
        
        P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        ((<make_list_1035@77:0> > 0) && ((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>))
        |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                    <<make_list_1035@77:1>@106:0>:int,
                                                    <<<make_list_1035@77:1>@106:1>@122:0>:int)
        
         ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 2))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
      lower bounds:
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 2))
        P[<fail_1565@151:0>](var393:bool) = false
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> > 0) &&
          (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) && (<<make_list_1035@77:1>@106:0> >= 2))))
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> > 0) &&
          (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) &&
           ((<<make_list_1035@77:1>@106:0> >= 2) &&
            (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))))
        P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) &&
         ((2 <= <nth_1030@110:1>) &&
          (((1 + <nth_1030@110:0>) > 0) &&
           (((2 + <nth_1030@110:0>) <= <nth_1030@110:1>) && (<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>))))))
      upper bounds:
        P[<fail_1565@151:0>](var396:bool) = true
      begin GenHcSolver.classify_pids(249206)[4]
        output:
          [<fail_1565@151:0>]
      end GenHcSolver.classify_pids(249206)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(249209)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(249212)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(249212)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(249217)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(249217)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(249220)[5]
          begin InterpProver.interpolate_fresh(249221)[6]
            begin InterpProver.interpolate_log(249222)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(249223)[8]
                begin InterpProver.interpolate_simplify(249224)[9]
                  begin InterpProver.interpolate_quick(249239)[10]
                    
                  end InterpProver.interpolate_quick(249239)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(249243)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(249243)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(249224)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(249223)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(249222)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(249221)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(249220)[5] (0.000000 sec.)
        output:
          P[<fail_1565@151:0>](var393:bool) = false
      end ApronInterface.convex_hull_interpolate(249209)[4] (0.000000 sec.)
      Horn clauses:
        P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,2:int,0:int,<f_nth_1555@145:4>:int),
        ((1 + <nth_1030@148:0>) <> 0) |- bot
        
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
        (((1 + <nth_1030@110:0>) > 0) && (((2 + <nth_1030@110:0>) <= <nth_1030@110:1>) && (2 <= <nth_1030@110:1>)))
        |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                               <<nth_1030@110:2>@118:0>:int,
                                               <<<nth_1030@110:2>@118:1>@141:0>:int)
        
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> >= 0) &&
          (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) &&
           (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>))))
        |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                            <<make_list_1035@77:1>@106:0>:int,
                                                            <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                            <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
        
        P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        ((<make_list_1035@77:0> > 0) && ((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>))
        |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                    <<make_list_1035@77:1>@106:0>:int,
                                                    <<<make_list_1035@77:1>@106:1>@122:0>:int)
        
         ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 2))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
      lower bounds:
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 2))
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> > 0) &&
          (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) && (<<make_list_1035@77:1>@106:0> >= 2))))
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> > 0) &&
          (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) &&
           ((<<make_list_1035@77:1>@106:0> >= 2) &&
            (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))))
        P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) &&
         ((2 <= <nth_1030@110:1>) &&
          (((1 + <nth_1030@110:0>) > 0) &&
           (((2 + <nth_1030@110:0>) <= <nth_1030@110:1>) && (<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>))))))
      upper bounds:
        P[<<<nth_1030@110:2>@118:1>@141:0>](var397:int,var398:int,var399:int,var400:int) =
        ((var399 <> 0) || ((var398 <> 2) || (var397 = 0)))
      begin GenHcSolver.classify_pids(255542)[4]
        output:
          [<<<nth_1030@110:2>@118:1>@141:0>]
      end GenHcSolver.classify_pids(255542)[4] (0.000000 sec.)
      lb:((<<nth_1030@110:2>@118:0> = 0) &&
          ((2 <= <nth_1030@110:1>) &&
           (((1 + <nth_1030@110:0>) > 0) &&
            (((2 + <nth_1030@110:0>) <= <nth_1030@110:1>) &&
             (<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>))))))
      nub:(not ((<<nth_1030@110:2>@118:0> <> 0) || ((<nth_1030@110:1> <> 2) || (<nth_1030@110:0> = 0))))
      begin ApronInterface.convex_hull_interpolate(255545)[4]
        lb:((<<nth_1030@110:2>@118:0> = 0) &&
            ((2 <= <nth_1030@110:1>) &&
             (((1 + <nth_1030@110:0>) > 0) &&
              (((2 + <nth_1030@110:0>) <= <nth_1030@110:1>) &&
               (<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>))))))
        nub:(not ((<<nth_1030@110:2>@118:0> <> 0) || ((<nth_1030@110:1> <> 2) || (<nth_1030@110:0> = 0))))
        begin ExtFormula.Formula.case_analysis_boolean(255645)[5]
          ts: ((<<nth_1030@110:2>@118:0> = 0) &&
               ((2 <= <nth_1030@110:1>) &&
                (((1 + <nth_1030@110:0>) > 0) &&
                 (((2 + <nth_1030@110:0>) <= <nth_1030@110:1>) &&
                  (<<<nth_1030@110:2>@118:1>@141:0> = (1 + <nth_1030@110:0>))))))
          
        end ExtFormula.Formula.case_analysis_boolean(255645)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(255678)[5]
          ts: ((<<nth_1030@110:2>@118:0> = 0) && ((<nth_1030@110:1> = 2) && (<nth_1030@110:0> <> 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(255678)[5] (0.000000 sec.)
        lb':((((-1 + <<<nth_1030@110:2>@118:1>@141:0>) + (-1 * <nth_1030@110:0>)) = 0) &&
             ((<<nth_1030@110:2>@118:0> = 0) &&
              ((((-2 + <nth_1030@110:1>) + (-1 * <nth_1030@110:0>)) >= 0) && (<nth_1030@110:0> >= 0))))
        nub':((<<nth_1030@110:2>@118:0> = 0) && ((-2 + <nth_1030@110:1>) = 0))
        begin InterpProver.interpolate(255685)[5]
          begin InterpProver.interpolate_fresh(255686)[6]
            begin InterpProver.interpolate_log(255687)[7]
              input1: ((((-1 + <<<nth_1030@110:2>@118:1>@141:0>) + (-1 * <nth_1030@110:0>)) = 0) &&
                       ((<<nth_1030@110:2>@118:0> = 0) &&
                        ((((-2 + <nth_1030@110:1>) + (-1 * <nth_1030@110:0>)) >= 0) && (<nth_1030@110:0> >= 0))))
              input2: ((<<nth_1030@110:2>@118:0> = 0) && ((-2 + <nth_1030@110:1>) = 0))
              begin InterpProver.interpolate_check(255688)[8]
                begin InterpProver.interpolate_simplify(255689)[9]
                  begin InterpProver.interpolate_quick(255882)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(255891)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(255892)[12]
                        begin CsisatInterface.interpolate_csisat_log(255893)[13]
                          input1: (0 = v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0 & 0 <= v_sep_nth_1030_sep_110_sep_0 & (2 + v_sep_nth_1030_sep_110_sep_0) <= v_sep_nth_1030_sep_110_sep_1)
                          input2: (0 = v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0 & 2 = v_sep_nth_1030_sep_110_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(255894)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(255894)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(255893)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(255892)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(255891)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(255882)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(255689)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(255688)[8] (0.002000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(255687)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(255686)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(255685)[5] (0.002000 sec.)
        begin InterpProver.interpolate(255909)[5]
          begin InterpProver.interpolate_fresh(255910)[6]
            begin InterpProver.interpolate_log(255911)[7]
              input1: ((((-1 + <<<nth_1030@110:2>@118:1>@141:0>) + (-1 * <nth_1030@110:0>)) = 0) &&
                       ((<<nth_1030@110:2>@118:0> = 0) &&
                        ((((-2 + <nth_1030@110:1>) + (-1 * <nth_1030@110:0>)) >= 0) && (<nth_1030@110:0> >= 0))))
              input2: (not ((<<nth_1030@110:2>@118:0> <> 0) || ((<nth_1030@110:1> <> 2) || (<nth_1030@110:0> = 0))))
              begin InterpProver.interpolate_check(255912)[8]
                begin InterpProver.interpolate_simplify(255913)[9]
                  begin InterpProver.interpolate_quick(256126)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(256135)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(256136)[12]
                        begin CsisatInterface.interpolate_csisat_log(256137)[13]
                          input1: (0 = v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0 & 0 <= v_sep_nth_1030_sep_110_sep_0 & (2 + v_sep_nth_1030_sep_110_sep_0) <= v_sep_nth_1030_sep_110_sep_1)
                          input2: (not 0 = v_sep_nth_1030_sep_110_sep_0 & 0 = v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0 & 2 = v_sep_nth_1030_sep_110_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(256138)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(256138)[14] (0.001000 sec.)
                          output: ((v_sep_nth_1030_sep_110_sep_0 + -1*v_sep_nth_1030_sep_110_sep_1) <= -2 & -1*v_sep_nth_1030_sep_110_sep_0 <= 0)
                          
                        end CsisatInterface.interpolate_csisat_log(256137)[13] (0.001000 sec.)
                        after simplification: ((v_sep_nth_1030_sep_110_sep_0 + -1*v_sep_nth_1030_sep_110_sep_1) <= -2 & -1*v_sep_nth_1030_sep_110_sep_0 <= 0)
                        after dnf conversion: (((v_sep_nth_1030_sep_110_sep_0 + -1*v_sep_nth_1030_sep_110_sep_1) <= -2 & -1*v_sep_nth_1030_sep_110_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(256136)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(256135)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(256126)[10] (0.001999 sec.)
                  begin minimizing # of conjunctions(256156)[10]
                    input: (((2 + <nth_1030@110:0>) <= <nth_1030@110:1>) && (0 <= <nth_1030@110:0>))
                    output: ((0 <= <nth_1030@110:0>) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>))
                  end minimizing # of conjunctions(256156)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(255913)[9] (0.003999 sec.)
                
              end InterpProver.interpolate_check(255912)[8] (0.003999 sec.)
              output: ((0 <= <nth_1030@110:0>) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>))
            end InterpProver.interpolate_log(255911)[7] (0.003999 sec.)
            
          end InterpProver.interpolate_fresh(255910)[6] (0.003999 sec.)
          
        end InterpProver.interpolate(255909)[5] (0.003999 sec.)
        output:
          P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int) =
          ((0 <= <nth_1030@110:0>) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>))
      end ApronInterface.convex_hull_interpolate(255545)[4] (0.007999 sec.)
      Horn clauses:
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
        (((1 + <nth_1030@110:0>) > 0) &&
         (((2 + <nth_1030@110:0>) <= <nth_1030@110:1>) &&
          ((2 <= <nth_1030@110:1>) && ((0 > <nth_1030@110:0>) || ((2 + <nth_1030@110:0>) > <nth_1030@110:1>))))) |- bot
        
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> >= 0) &&
          (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) &&
           (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>))))
        |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                            <<make_list_1035@77:1>@106:0>:int,
                                                            <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                            <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
        
        P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        ((<make_list_1035@77:0> > 0) && ((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>))
        |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                    <<make_list_1035@77:1>@106:0>:int,
                                                    <<<make_list_1035@77:1>@106:1>@122:0>:int)
        
         ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 2))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
      lower bounds:
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 2))
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> > 0) &&
          (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) && (<<make_list_1035@77:1>@106:0> >= 2))))
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> > 0) &&
          (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) &&
           ((<<make_list_1035@77:1>@106:0> >= 2) &&
            (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))))
      upper bounds:
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](var401:int,var402:int,var403:int,var404:int) =
        ((2 > var402) || (((1 + var401) > var402) || ((var401 <= 0) || ((1 <= var401) && ((1 + var401) <= var402)))))
      begin GenHcSolver.classify_pids(263219)[4]
        output:
          [<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]
      end GenHcSolver.classify_pids(263219)[4] (0.000000 sec.)
      lb:((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
          ((<make_list_1035@77:0> > 0) &&
           (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) &&
            ((<<make_list_1035@77:1>@106:0> >= 2) &&
             (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))))
      nub:(not
             ((2 > <<make_list_1035@77:1>@106:0>) ||
              (((1 + <make_list_1035@77:0>) > <<make_list_1035@77:1>@106:0>) ||
               ((<make_list_1035@77:0> <= 0) ||
                ((1 <= <make_list_1035@77:0>) && ((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>))))))
      begin ApronInterface.convex_hull_interpolate(263222)[4]
        lb:((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
            ((<make_list_1035@77:0> > 0) &&
             (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) &&
              ((<<make_list_1035@77:1>@106:0> >= 2) &&
               (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))))
        nub:(not
               ((2 > <<make_list_1035@77:1>@106:0>) ||
                (((1 + <make_list_1035@77:0>) > <<make_list_1035@77:1>@106:0>) ||
                 ((<make_list_1035@77:0> <= 0) ||
                  ((1 <= <make_list_1035@77:0>) && ((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>))))))
        begin ExtFormula.Formula.case_analysis_boolean(263306)[5]
          ts: ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
               ((<make_list_1035@77:0> > 0) &&
                (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) &&
                 ((<<make_list_1035@77:1>@106:0> >= 2) &&
                  (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))))
          
        end ExtFormula.Formula.case_analysis_boolean(263306)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(263404)[5]
          ts: ((2 <= <<make_list_1035@77:1>@106:0>) &&
               (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) &&
                ((<make_list_1035@77:0> > 0) &&
                 ((1 > <make_list_1035@77:0>) || ((1 + <make_list_1035@77:0>) > <<make_list_1035@77:1>@106:0>)))))
          
        end ExtFormula.Formula.case_analysis_boolean(263404)[5] (0.000000 sec.)
        lb':(((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> + (-1 * <make_list_1035@77:0>)) = 0) &&
             ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
              ((((-1 + <<make_list_1035@77:1>@106:0>) + (-1 * <make_list_1035@77:0>)) >= 0) &&
               ((-1 + <make_list_1035@77:0>) >= 0))))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(263424)[5]
          begin InterpProver.interpolate_fresh(263425)[6]
            begin InterpProver.interpolate_log(263426)[7]
              input1: (((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> + (-1 * <make_list_1035@77:0>)) = 0) &&
                       ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
                        ((((-1 + <<make_list_1035@77:1>@106:0>) + (-1 * <make_list_1035@77:0>)) >= 0) &&
                         ((-1 + <make_list_1035@77:0>) >= 0))))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(263427)[8]
                begin InterpProver.interpolate_simplify(263428)[9]
                  begin InterpProver.interpolate_quick(263551)[10]
                    
                  end InterpProver.interpolate_quick(263551)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(263428)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(263427)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(263426)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(263425)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(263424)[5] (0.001000 sec.)
        output:
          P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(263222)[4] (0.003000 sec.)
      Horn clauses:
        P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
        ((<make_list_1035@77:0> > 0) && ((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>))
        |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                    <<make_list_1035@77:1>@106:0>:int,
                                                    <<<make_list_1035@77:1>@106:1>@122:0>:int)
        
         ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 2))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
      lower bounds:
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 2))
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
         ((<make_list_1035@77:0> > 0) &&
          (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) && (<<make_list_1035@77:1>@106:0> >= 2))))
      upper bounds:
        P[<<<make_list_1035@77:1>@106:1>@122:0>](var405:int,var406:int,var407:int) = true
      begin GenHcSolver.classify_pids(265648)[4]
        output:
          [<<<make_list_1035@77:1>@106:1>@122:0>]
      end GenHcSolver.classify_pids(265648)[4] (0.000000 sec.)
      lb:((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
          ((<make_list_1035@77:0> > 0) &&
           (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) && (<<make_list_1035@77:1>@106:0> >= 2))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(265651)[4]
        lb:((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
            ((<make_list_1035@77:0> > 0) &&
             (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) && (<<make_list_1035@77:1>@106:0> >= 2))))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(265707)[5]
          ts: ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
               ((<make_list_1035@77:0> > 0) &&
                (((1 + <make_list_1035@77:0>) <= <<make_list_1035@77:1>@106:0>) && (<<make_list_1035@77:1>@106:0> >= 2))))
          
        end ExtFormula.Formula.case_analysis_boolean(265707)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(265719)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(265719)[5] (0.000000 sec.)
        lb':((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
             ((((-1 + <<make_list_1035@77:1>@106:0>) + (-1 * <make_list_1035@77:0>)) >= 0) &&
              ((-1 + <make_list_1035@77:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(265722)[5]
          begin InterpProver.interpolate_fresh(265723)[6]
            begin InterpProver.interpolate_log(265724)[7]
              input1: ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
                       ((((-1 + <<make_list_1035@77:1>@106:0>) + (-1 * <make_list_1035@77:0>)) >= 0) &&
                        ((-1 + <make_list_1035@77:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(265725)[8]
                begin InterpProver.interpolate_simplify(265726)[9]
                  begin InterpProver.interpolate_quick(265828)[10]
                    
                  end InterpProver.interpolate_quick(265828)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(265726)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(265725)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(265724)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(265723)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(265722)[5] (0.001000 sec.)
        output:
          P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(265651)[4] (0.001000 sec.)
      Horn clauses:
         ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 2))
        |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                       <<nth_1030@110:2>@118:0>:int)
      lower bounds:
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) =
        ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 2))
      upper bounds:
        P[<<nth_1030@110:2>@118:0>](var408:int,var409:int,var410:int) = true
      begin GenHcSolver.classify_pids(266423)[4]
        output:
          [<<nth_1030@110:2>@118:0>]
      end GenHcSolver.classify_pids(266423)[4] (0.000000 sec.)
      lb:((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 2))
      nub:false
      begin ApronInterface.convex_hull_interpolate(266426)[4]
        lb:((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 2))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(266439)[5]
          ts: ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 2))
          
        end ExtFormula.Formula.case_analysis_boolean(266439)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(266447)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(266447)[5] (0.000000 sec.)
        lb':((<<nth_1030@110:2>@118:0> = 0) && ((-2 + <nth_1030@110:1>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(266450)[5]
          begin InterpProver.interpolate_fresh(266451)[6]
            begin InterpProver.interpolate_log(266452)[7]
              input1: ((<<nth_1030@110:2>@118:0> = 0) && ((-2 + <nth_1030@110:1>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(266453)[8]
                begin InterpProver.interpolate_simplify(266454)[9]
                  begin InterpProver.interpolate_quick(266494)[10]
                    
                  end InterpProver.interpolate_quick(266494)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(266454)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(266453)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(266452)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(266451)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(266450)[5] (0.001000 sec.)
        output:
          P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) = true
      end ApronInterface.convex_hull_interpolate(266426)[4] (0.002000 sec.)
      begin HcSolver.check_validity(266605)[4]
        input:
          P[<fail_1565@151:0>](<fail_1565@151:0>:bool)|- bot
          
          P[<nth_1030@148:1>](<nth_1030@148:0>:int,0:int), <fail_1565@151:0>
          |- P[<fail_1565@151:0>](<fail_1565@151:0>:bool)
          
          P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,(
                                              1 + <nth_1030@148:1>):int,0:int,<f_nth_1555@145:4>:int),
          P[<nth_1030@110:1>]((1 + <nth_1030@148:0>):int,(1 + <nth_1030@148:1>):int),
          (((1 + <nth_1030@148:0>) <> 0) && (<nth_1030@148:1> >= 0))
          |- P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int)
          
          P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
          P[<<make_list_1035@77:1>@106:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int),
          P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int), (
          (1 + <nth_1030@110:0>) > 0)
          |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,
                                                 <nth_1030@110:1>:int,
                                                 <<nth_1030@110:2>@118:0>:int,
                                                 <<<nth_1030@110:2>@118:1>@141:0>:int)
          
          P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
          P[<<make_list_1035@80:1>@96:0>]((-1 + <make_list_1035@77:0>):int,(
                                          -1 + <<make_list_1035@77:1>@106:0>):int),
          P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
          ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
           ((<make_list_1035@77:0> >= 0) && (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))
          |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                              <<make_list_1035@77:1>@106:0>:int,
                                                              <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                              <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
          
          P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
          P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int), (<make_list_1035@77:0> > 0)
          |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                      <<make_list_1035@77:1>@106:0>:int,
                                                      <<<make_list_1035@77:1>@106:1>@122:0>:int)
          
          P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
          ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
          |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                         <<nth_1030@110:2>@118:0>:int)
          
          P[<<make_list_1035@77:1>@106:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int),
          ((1 + <nth_1030@110:0>) > 0) |- P[<nth_1030@110:1>](<nth_1030@110:0>:int,
                                                              <nth_1030@110:1>:int)
          
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
          P[<<make_list_1035@80:1>@96:0>]((-1 + <make_list_1035@77:0>):int,(
                                          -1 + <<make_list_1035@77:1>@106:0>):int), (
          <make_list_1035@77:0> >= 0)
          |- P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,
                                              <<make_list_1035@77:1>@106:0>:int)
          
          P[<make_list_1035@80:0>](<make_list_1035@80:0>:int),
          P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                          -1 + <<make_list_1035@80:1>@96:0>):int), (
          <make_list_1035@80:0> >= 0)
          |- P[<<make_list_1035@80:1>@96:0>](<make_list_1035@80:0>:int,
                                             <<make_list_1035@80:1>@96:0>:int)
          
          P[<make_list_1035@83:0>](<make_list_1035@83:0>:int),
          ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
          |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                             <<make_list_1035@83:1>@86:0>:int)
          
          P[<make_list_1035@80:0>]((1 + <make_list_1035@83:0>):int), (
          (1 + <make_list_1035@83:0>) >= 0) |- P[<make_list_1035@83:0>](
          <make_list_1035@83:0>:int)
          
          P[<make_list_1035@77:0>]((1 + <make_list_1035@80:0>):int), (
          (1 + <make_list_1035@80:0>) >= 0) |- P[<make_list_1035@80:0>](
          <make_list_1035@80:0>:int)
          
           (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(266605)[4] (0.011998 sec.)
      solution:
        P[<fail_1565@151:0>](var393:bool) = false
        P[<nth_1030@148:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int) = (2 <= <nth_1030@110:1>)
        P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int) =
        ((0 <= <nth_1030@110:0>) && ((2 + <nth_1030@110:0>) <= <nth_1030@110:1>))
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int,<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int) =
        true
        P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int) =
        true
        P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int) = true
        P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int) = (2 <= <nth_1030@110:1>)
        P[<<make_list_1035@77:1>@106:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((1 + <make_list_1035@83:0>) <= <<make_list_1035@83:1>@86:0>)
        P[<<make_list_1035@80:1>@96:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((1 + <make_list_1035@83:0>) <= <<make_list_1035@83:1>@86:0>)
        P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,<<make_list_1035@83:1>@86:0>:int) =
        ((1 + <make_list_1035@83:0>) <= <<make_list_1035@83:1>@86:0>)
        P[<make_list_1035@83:0>](<make_list_1035@77:0>:int) = true
        P[<make_list_1035@80:0>](<make_list_1035@77:0>:int) = true
        P[<make_list_1035@77:0>](<make_list_1035@77:0>:int) = true
    end GenHcSolver.solve(182707)[3] (0.419936 sec.)
    begin YhornInterface.solve(268609)[3]
      begin HcSolver.solve_ub(268610)[4]
        encoded:
          P[<fail_1565@151:0>](<fail_1565@151:0>:int)|- bot
          
          P[<nth_1030@148:1>](<nth_1030@148:0>:int,0:int), (<fail_1565@151:0> = 1)
          |- P[<fail_1565@151:0>](<fail_1565@151:0>:int)
          
          P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,(
                                              1 + <nth_1030@148:1>):int,0:int,<f_nth_1555@145:4>:int),
          P[<nth_1030@110:1>]((1 + <nth_1030@148:0>):int,(1 + <nth_1030@148:1>):int),
          (((1 + <nth_1030@148:0>) <> 0) && (<nth_1030@148:1> >= 0))
          |- P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int)
          
          P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
          P[<<make_list_1035@77:1>@106:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int),
          P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int), (
          (1 + <nth_1030@110:0>) > 0)
          |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,
                                                 <nth_1030@110:1>:int,
                                                 <<nth_1030@110:2>@118:0>:int,
                                                 <<<nth_1030@110:2>@118:1>@141:0>:int)
          
          P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
          P[<<make_list_1035@80:1>@96:0>]((-1 + <make_list_1035@77:0>):int,(
                                          -1 + <<make_list_1035@77:1>@106:0>):int),
          P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
          ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
           ((<make_list_1035@77:0> >= 0) && (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))
          |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                              <<make_list_1035@77:1>@106:0>:int,
                                                              <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                              <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
          
          P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
          P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int), (<make_list_1035@77:0> > 0)
          |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                      <<make_list_1035@77:1>@106:0>:int,
                                                      <<<make_list_1035@77:1>@106:1>@122:0>:int)
          
          P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
          ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
          |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                         <<nth_1030@110:2>@118:0>:int)
          
          P[<<make_list_1035@77:1>@106:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int),
          ((1 + <nth_1030@110:0>) > 0) |- P[<nth_1030@110:1>](<nth_1030@110:0>:int,
                                                              <nth_1030@110:1>:int)
          
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
          P[<<make_list_1035@80:1>@96:0>]((-1 + <make_list_1035@77:0>):int,(
                                          -1 + <<make_list_1035@77:1>@106:0>):int), (
          <make_list_1035@77:0> >= 0)
          |- P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,
                                              <<make_list_1035@77:1>@106:0>:int)
          
          P[<make_list_1035@80:0>](<make_list_1035@80:0>:int),
          P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                          -1 + <<make_list_1035@80:1>@96:0>):int), (
          <make_list_1035@80:0> >= 0)
          |- P[<<make_list_1035@80:1>@96:0>](<make_list_1035@80:0>:int,
                                             <<make_list_1035@80:1>@96:0>:int)
          
          P[<make_list_1035@83:0>](<make_list_1035@83:0>:int),
          ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
          |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                             <<make_list_1035@83:1>@86:0>:int)
          
          P[<make_list_1035@80:0>]((1 + <make_list_1035@83:0>):int), (
          (1 + <make_list_1035@83:0>) >= 0) |- P[<make_list_1035@83:0>](
          <make_list_1035@83:0>:int)
          
          P[<make_list_1035@77:0>]((1 + <make_list_1035@80:0>):int), (
          (1 + <make_list_1035@80:0>) >= 0) |- P[<make_list_1035@80:0>](
          <make_list_1035@80:0>:int)
          
           (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
        input to Yhorn:
          P[<fail_1565@151:0>](<fail_1565@151:0>:int)|- bot
          
          P[<nth_1030@148:1>](<nth_1030@148:0>:int,var411:int), ((var411 = 0) && (<fail_1565@151:0> = 1))
          |- P[<fail_1565@151:0>](<fail_1565@151:0>:int)
          
          P[<<<nth_1030@110:2>@118:1>@141:0>](var412:int,var413:int,var414:int,<f_nth_1555@145:4>:int),
          P[<nth_1030@110:1>](var415:int,var416:int),
          ((var416 = (1 + <nth_1030@148:1>)) &&
           ((var415 = (1 + <nth_1030@148:0>)) &&
            ((var413 = (1 + <nth_1030@148:1>)) &&
             ((var412 = (1 + <nth_1030@148:0>)) &&
              ((<nth_1030@148:1> >= 0) && (((1 + <nth_1030@148:0>) <> 0) && (var414 = 0)))))))
          |- P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int)
          
          P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](var417:int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
          P[<<make_list_1035@77:1>@106:0>](var418:int,<nth_1030@110:1>:int),
          P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
          ((var418 = (1 + <nth_1030@110:0>)) && ((var417 = (1 + <nth_1030@110:0>)) && ((1 + <nth_1030@110:0>) > 0)))
          |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,
                                                 <nth_1030@110:1>:int,
                                                 <<nth_1030@110:2>@118:0>:int,
                                                 <<<nth_1030@110:2>@118:1>@141:0>:int)
          
          P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
          P[<<make_list_1035@80:1>@96:0>](var419:int,var420:int),
          P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
          ((<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>) &&
           (((1 + var420) = <<make_list_1035@77:1>@106:0>) &&
            (((1 + var419) = <make_list_1035@77:0>) &&
             ((<make_list_1035@77:0> >= 0) && (<<<make_list_1035@77:1>@106:1>@122:0> = 0)))))
          |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                              <<make_list_1035@77:1>@106:0>:int,
                                                              <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                              <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
          
          P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
          P[<<nth_1030@110:2>@118:0>](var421:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
          (((1 + var421) = <make_list_1035@77:0>) && (<make_list_1035@77:0> > 0))
          |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                      <<make_list_1035@77:1>@106:0>:int,
                                                      <<<make_list_1035@77:1>@106:1>@122:0>:int)
          
          P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
          ((<nth_1030@110:1> >= 1) && (<<nth_1030@110:2>@118:0> = 0))
          |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                         <<nth_1030@110:2>@118:0>:int)
          
          P[<<make_list_1035@77:1>@106:0>](var422:int,<nth_1030@110:1>:int),
          ((var422 = (1 + <nth_1030@110:0>)) && ((1 + <nth_1030@110:0>) > 0))
          |- P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int)
          
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
          P[<<make_list_1035@80:1>@96:0>](var423:int,var424:int),
          (((1 + var424) = <<make_list_1035@77:1>@106:0>) &&
           (((1 + var423) = <make_list_1035@77:0>) && (<make_list_1035@77:0> >= 0)))
          |- P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,
                                              <<make_list_1035@77:1>@106:0>:int)
          
          P[<make_list_1035@80:0>](<make_list_1035@80:0>:int),
          P[<<make_list_1035@83:1>@86:0>](var425:int,var426:int),
          (((1 + var426) = <<make_list_1035@80:1>@96:0>) &&
           (((1 + var425) = <make_list_1035@80:0>) && (<make_list_1035@80:0> >= 0)))
          |- P[<<make_list_1035@80:1>@96:0>](<make_list_1035@80:0>:int,
                                             <<make_list_1035@80:1>@96:0>:int)
          
          P[<make_list_1035@83:0>](<make_list_1035@83:0>:int),
          ((<make_list_1035@83:0> < 0) && (<<make_list_1035@83:1>@86:0> = 0))
          |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                             <<make_list_1035@83:1>@86:0>:int)
          
          P[<make_list_1035@80:0>](var427:int),
          ((var427 = (1 + <make_list_1035@83:0>)) && ((1 + <make_list_1035@83:0>) >= 0))
          |- P[<make_list_1035@83:0>](<make_list_1035@83:0>:int)
          
          P[<make_list_1035@77:0>](var428:int),
          ((var428 = (1 + <make_list_1035@80:0>)) && ((1 + <make_list_1035@80:0>) >= 0))
          |- P[<make_list_1035@80:0>](<make_list_1035@80:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1565_sep_151_sep_0($329)) -> 1=0.
(($329-1=0) & ($330=0)) & (v_sep_nth_1030_sep_148_sep_1($331,$330)) -> v_sep_fail_1565_sep_151_sep_0($329).
(($332=0) & ($331+1<>0) & ($333>=0) & (-$331+$334-1=0) & (-$333+$335-1=0) & (-$331+$336-1=0) & (-$333+$337-1=0)) & (v_sep_nth_1030_sep_110_sep_1($336,$337)) & (v_sep_nth_1030_sep_110_sep_2_sep_118_sep_1_sep_141_sep_0($334,$335,$332,$338)) -> v_sep_nth_1030_sep_148_sep_1($331,$333).
(($339+1>0) & (-$339+$340-1=0) & (-$339+$341-1=0)) & (v_sep_nth_1030_sep_110_sep_1($339,$342)) & (v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0($341,$342)) & (v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_1_sep_137_sep_0($340,$342,$343,$344)) -> v_sep_nth_1030_sep_110_sep_2_sep_118_sep_1_sep_141_sep_0($339,$342,$343,$344).
(($345=0) & ($346>=0) & (-$346+$347+1=0) & ($348-$349+1=0) & (-$346+$350=0)) & (v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0($346,$349)) & (v_sep_make_list_1035_sep_80_sep_1_sep_96_sep_0($347,$348)) & (v_sep_make_list_1035_sep_77_sep_0($346)) & (v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_0($346,$349,$345)) -> v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_1_sep_137_sep_0($346,$349,$345,$350).
(($346>0) & (-$346+$351+1=0)) & (v_sep_make_list_1035_sep_77_sep_0($346)) & (v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0($351,$349,$345)) & (v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0($346,$349)) -> v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_0($346,$349,$345).
(($343=0) & ($342-1>=0)) & (v_sep_nth_1030_sep_110_sep_1($339,$342)) -> v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0($339,$342,$343).
(($339+1>0) & (-$339+$352-1=0)) & (v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0($352,$342)) -> v_sep_nth_1030_sep_110_sep_1($339,$342).
(($346>=0) & (-$346+$353+1=0) & (-$349+$354+1=0)) & (v_sep_make_list_1035_sep_80_sep_1_sep_96_sep_0($353,$354)) & (v_sep_make_list_1035_sep_77_sep_0($346)) -> v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0($346,$349).
(($355>=0) & (-$355+$356+1=0) & ($357-$358+1=0)) & (v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0($356,$357)) & (v_sep_make_list_1035_sep_80_sep_0($355)) -> v_sep_make_list_1035_sep_80_sep_1_sep_96_sep_0($355,$358).
(($359=0) & ($360<0)) & (v_sep_make_list_1035_sep_83_sep_0($360)) -> v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0($360,$359).
(($360+1>=0) & (-$360+$361-1=0)) & (v_sep_make_list_1035_sep_80_sep_0($361)) -> v_sep_make_list_1035_sep_83_sep_0($360).
(($355+1>=0) & (-$355+$362-1=0)) & (v_sep_make_list_1035_sep_77_sep_0($362)) -> v_sep_make_list_1035_sep_80_sep_0($355).
$346>0 -> v_sep_make_list_1035_sep_77_sep_0($346).


v_sep_fail_1565_sep_151_sep_0: X
v_sep_make_list_1035_sep_77_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_1_sep_137_sep_0: X
v_sep_make_list_1035_sep_80_sep_0: X
v_sep_make_list_1035_sep_80_sep_1_sep_96_sep_0: X
v_sep_make_list_1035_sep_83_sep_0: X
v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0: X
v_sep_nth_1030_sep_110_sep_1: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_1_sep_141_sep_0: X
v_sep_nth_1030_sep_148_sep_1: X
..........................
v_sep_fail_1565_sep_151_sep_0: X
v_sep_make_list_1035_sep_77_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_1_sep_137_sep_0: X
v_sep_make_list_1035_sep_80_sep_0: X
v_sep_make_list_1035_sep_80_sep_1_sep_96_sep_0: X
v_sep_make_list_1035_sep_83_sep_0: X
v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0: X
v_sep_nth_1030_sep_110_sep_1: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_1_sep_141_sep_0: X
v_sep_nth_1030_sep_148_sep_1: X
...
v_sep_fail_1565_sep_151_sep_0: X
v_sep_make_list_1035_sep_77_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_1_sep_137_sep_0: X
v_sep_make_list_1035_sep_80_sep_0: X
v_sep_make_list_1035_sep_80_sep_1_sep_96_sep_0: X
v_sep_make_list_1035_sep_83_sep_0: X
v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0: X
v_sep_nth_1030_sep_110_sep_1: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_1_sep_141_sep_0: X
v_sep_nth_1030_sep_148_sep_1: X
.......
v_sep_fail_1565_sep_151_sep_0: X
v_sep_make_list_1035_sep_77_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_1_sep_137_sep_0: X
v_sep_make_list_1035_sep_80_sep_0: X
v_sep_make_list_1035_sep_80_sep_1_sep_96_sep_0: X
v_sep_make_list_1035_sep_83_sep_0: X
v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0: X
v_sep_nth_1030_sep_110_sep_1: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_1_sep_141_sep_0: X
v_sep_nth_1030_sep_148_sep_1: X
...........
v_sep_fail_1565_sep_151_sep_0: X
v_sep_make_list_1035_sep_77_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_1_sep_137_sep_0: X
v_sep_make_list_1035_sep_80_sep_0: X
v_sep_make_list_1035_sep_80_sep_1_sep_96_sep_0: X
v_sep_make_list_1035_sep_83_sep_0: X
v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0: X
v_sep_nth_1030_sep_110_sep_1: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_1_sep_141_sep_0: X
v_sep_nth_1030_sep_148_sep_1: X
.................
v_sep_fail_1565_sep_151_sep_0: X
v_sep_make_list_1035_sep_77_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_1_sep_137_sep_0: X
v_sep_make_list_1035_sep_80_sep_0: X
v_sep_make_list_1035_sep_80_sep_1_sep_96_sep_0: X
v_sep_make_list_1035_sep_83_sep_0: X
v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0: X
v_sep_nth_1030_sep_110_sep_1: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_1_sep_141_sep_0: X
v_sep_nth_1030_sep_148_sep_1: X
......................
v_sep_fail_1565_sep_151_sep_0: X
v_sep_make_list_1035_sep_77_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_1_sep_137_sep_0: X
v_sep_make_list_1035_sep_80_sep_0: X
v_sep_make_list_1035_sep_80_sep_1_sep_96_sep_0: X
v_sep_make_list_1035_sep_83_sep_0: X
v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0: X
v_sep_nth_1030_sep_110_sep_1: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_1_sep_141_sep_0: X
v_sep_nth_1030_sep_148_sep_1: X
.........................
v_sep_fail_1565_sep_151_sep_0: X
v_sep_make_list_1035_sep_77_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_0: X
v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_1_sep_137_sep_0: X
v_sep_make_list_1035_sep_80_sep_0: X
v_sep_make_list_1035_sep_80_sep_1_sep_96_sep_0: X
v_sep_make_list_1035_sep_83_sep_0: X
v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0: X
v_sep_nth_1030_sep_110_sep_1: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0: X
v_sep_nth_1030_sep_110_sep_2_sep_118_sep_1_sep_141_sep_0: X
v_sep_nth_1030_sep_148_sep_1: X
..........................(0=0) & (v_sep_fail_1565_sep_151_sep_0($329)) -> 1=0.
(($329-1=0) & ($330=0)) & (v_sep_nth_1030_sep_148_sep_1($331,$330)) -> v_sep_fail_1565_sep_151_sep_0($329).
(($332=0) & ($331+1<>0) & ($333>=0) & (-$331+$334-1=0) & (-$333+$335-1=0) & (-$331+$336-1=0) & (-$333+$337-1=0)) & (v_sep_nth_1030_sep_110_sep_1($336,$337)) & (v_sep_nth_1030_sep_110_sep_2_sep_118_sep_1_sep_141_sep_0($334,$335,$332,$338)) -> v_sep_nth_1030_sep_148_sep_1($331,$333).
(($339+1>0) & (-$339+$340-1=0) & (-$339+$341-1=0)) & (v_sep_nth_1030_sep_110_sep_1($339,$342)) & (v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0($341,$342)) & (v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_1_sep_137_sep_0($340,$342,$343,$344)) -> v_sep_nth_1030_sep_110_sep_2_sep_118_sep_1_sep_141_sep_0($339,$342,$343,$344).
(($345=0) & ($346>=0) & (-$346+$347+1=0) & ($348-$349+1=0) & (-$346+$350=0)) & (v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0($346,$349)) & (v_sep_make_list_1035_sep_80_sep_1_sep_96_sep_0($347,$348)) & (v_sep_make_list_1035_sep_77_sep_0($346)) & (v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_0($346,$349,$345)) -> v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_1_sep_137_sep_0($346,$349,$345,$350).
(($346>0) & (-$346+$351+1=0)) & (v_sep_make_list_1035_sep_77_sep_0($346)) & (v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0($351,$349,$345)) & (v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0($346,$349)) -> v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_1_sep_122_sep_0($346,$349,$345).
(($343=0) & ($342-1>=0)) & (v_sep_nth_1030_sep_110_sep_1($339,$342)) -> v_sep_nth_1030_sep_110_sep_2_sep_118_sep_0($339,$342,$343).
(($339+1>0) & (-$339+$352-1=0)) & (v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0($352,$342)) -> v_sep_nth_1030_sep_110_sep_1($339,$342).
(($346>=0) & (-$346+$353+1=0) & (-$349+$354+1=0)) & (v_sep_make_list_1035_sep_80_sep_1_sep_96_sep_0($353,$354)) & (v_sep_make_list_1035_sep_77_sep_0($346)) -> v_sep_make_list_1035_sep_77_sep_1_sep_106_sep_0($346,$349).
(($355>=0) & (-$355+$356+1=0) & ($357-$358+1=0)) & (v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0($356,$357)) & (v_sep_make_list_1035_sep_80_sep_0($355)) -> v_sep_make_list_1035_sep_80_sep_1_sep_96_sep_0($355,$358).
(($359=0) & ($360<0)) & (v_sep_make_list_1035_sep_83_sep_0($360)) -> v_sep_make_list_1035_sep_83_sep_1_sep_86_sep_0($360,$359).
(($360+1>=0) & (-$360+$361-1=0)) & (v_sep_make_list_1035_sep_80_sep_0($361)) -> v_sep_make_list_1035_sep_83_sep_0($360).
(($355+1>=0) & (-$355+$362-1=0)) & (v_sep_make_list_1035_sep_77_sep_0($362)) -> v_sep_make_list_1035_sep_80_sep_0($355).
$346>0 -> v_sep_make_list_1035_sep_77_sep_0($346).

           (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
        solution:
          P[<fail_1565@151:0>]($363:bool) = false
          P[<make_list_1035@77:0>]($404:int) = true
          P[<<make_list_1035@77:1>@106:0>]($385:int,$387:int) = (2 <= $387)
          P[<<<make_list_1035@77:1>@106:1>@122:0>]($407:int,$409:int,$411:int) = (2 <= $409)
          P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]($390:int,$392:int,$394:int,$396:int) = (2 <= $392)
          P[<make_list_1035@80:0>]($426:int) = true
          P[<<make_list_1035@80:1>@96:0>]($399:int,$401:int) = (1 <= $401)
          P[<make_list_1035@83:0>]($429:int) = true
          P[<<make_list_1035@83:1>@86:0>]($421:int,$423:int) = (0 <= $423)
          P[<nth_1030@110:1>]($371:int,$373:int) = (2 <= $373)
          P[<<nth_1030@110:2>@118:0>]($414:int,$416:int,$418:int) = (2 <= $416)
          P[<<<nth_1030@110:2>@118:1>@141:0>]($376:int,$378:int,$380:int,$382:int) = (2 <= $378)
          P[<nth_1030@148:1>]($366:int,$368:int) = (1 <= $368)
        
      end HcSolver.solve_ub(268610)[4] (0.141978 sec.)
      begin HcSolver.check_validity(269838)[4]
        input:
          P[<fail_1565@151:0>](<fail_1565@151:0>:bool)|- bot
          
          P[<nth_1030@148:1>](<nth_1030@148:0>:int,0:int), <fail_1565@151:0>
          |- P[<fail_1565@151:0>](<fail_1565@151:0>:bool)
          
          P[<<<nth_1030@110:2>@118:1>@141:0>]((1 + <nth_1030@148:0>):int,(
                                              1 + <nth_1030@148:1>):int,0:int,<f_nth_1555@145:4>:int),
          P[<nth_1030@110:1>]((1 + <nth_1030@148:0>):int,(1 + <nth_1030@148:1>):int),
          (((1 + <nth_1030@148:0>) <> 0) && (<nth_1030@148:1> >= 0))
          |- P[<nth_1030@148:1>](<nth_1030@148:0>:int,<nth_1030@148:1>:int)
          
          P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int,<<nth_1030@110:2>@118:0>:int,<<<nth_1030@110:2>@118:1>@141:0>:int),
          P[<<make_list_1035@77:1>@106:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int),
          P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int), (
          (1 + <nth_1030@110:0>) > 0)
          |- P[<<<nth_1030@110:2>@118:1>@141:0>](<nth_1030@110:0>:int,
                                                 <nth_1030@110:1>:int,
                                                 <<nth_1030@110:2>@118:0>:int,
                                                 <<<nth_1030@110:2>@118:1>@141:0>:int)
          
          P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
          P[<<make_list_1035@80:1>@96:0>]((-1 + <make_list_1035@77:0>):int,(
                                          -1 + <<make_list_1035@77:1>@106:0>):int),
          P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
          ((<<<make_list_1035@77:1>@106:1>@122:0> = 0) &&
           ((<make_list_1035@77:0> >= 0) && (<<<<make_list_1035@77:1>@106:1>@122:1>@137:0> = <make_list_1035@77:0>)))
          |- P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>](<make_list_1035@77:0>:int,
                                                              <<make_list_1035@77:1>@106:0>:int,
                                                              <<<make_list_1035@77:1>@106:1>@122:0>:int,
                                                              <<<<make_list_1035@77:1>@106:1>@122:1>@137:0>:int)
          
          P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,<<make_list_1035@77:1>@106:0>:int),
          P[<<nth_1030@110:2>@118:0>]((-1 + <make_list_1035@77:0>):int,<<make_list_1035@77:1>@106:0>:int,<<<make_list_1035@77:1>@106:1>@122:0>:int),
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int), (<make_list_1035@77:0> > 0)
          |- P[<<<make_list_1035@77:1>@106:1>@122:0>](<make_list_1035@77:0>:int,
                                                      <<make_list_1035@77:1>@106:0>:int,
                                                      <<<make_list_1035@77:1>@106:1>@122:0>:int)
          
          P[<nth_1030@110:1>](<nth_1030@110:0>:int,<nth_1030@110:1>:int),
          ((<<nth_1030@110:2>@118:0> = 0) && (<nth_1030@110:1> >= 1))
          |- P[<<nth_1030@110:2>@118:0>](<nth_1030@110:0>:int,<nth_1030@110:1>:int,
                                         <<nth_1030@110:2>@118:0>:int)
          
          P[<<make_list_1035@77:1>@106:0>]((1 + <nth_1030@110:0>):int,<nth_1030@110:1>:int),
          ((1 + <nth_1030@110:0>) > 0) |- P[<nth_1030@110:1>](<nth_1030@110:0>:int,
                                                              <nth_1030@110:1>:int)
          
          P[<make_list_1035@77:0>](<make_list_1035@77:0>:int),
          P[<<make_list_1035@80:1>@96:0>]((-1 + <make_list_1035@77:0>):int,(
                                          -1 + <<make_list_1035@77:1>@106:0>):int), (
          <make_list_1035@77:0> >= 0)
          |- P[<<make_list_1035@77:1>@106:0>](<make_list_1035@77:0>:int,
                                              <<make_list_1035@77:1>@106:0>:int)
          
          P[<make_list_1035@80:0>](<make_list_1035@80:0>:int),
          P[<<make_list_1035@83:1>@86:0>]((-1 + <make_list_1035@80:0>):int,(
                                          -1 + <<make_list_1035@80:1>@96:0>):int), (
          <make_list_1035@80:0> >= 0)
          |- P[<<make_list_1035@80:1>@96:0>](<make_list_1035@80:0>:int,
                                             <<make_list_1035@80:1>@96:0>:int)
          
          P[<make_list_1035@83:0>](<make_list_1035@83:0>:int),
          ((<<make_list_1035@83:1>@86:0> = 0) && (<make_list_1035@83:0> < 0))
          |- P[<<make_list_1035@83:1>@86:0>](<make_list_1035@83:0>:int,
                                             <<make_list_1035@83:1>@86:0>:int)
          
          P[<make_list_1035@80:0>]((1 + <make_list_1035@83:0>):int), (
          (1 + <make_list_1035@83:0>) >= 0) |- P[<make_list_1035@83:0>](
          <make_list_1035@83:0>:int)
          
          P[<make_list_1035@77:0>]((1 + <make_list_1035@80:0>):int), (
          (1 + <make_list_1035@80:0>) >= 0) |- P[<make_list_1035@80:0>](
          <make_list_1035@80:0>:int)
          
           (<make_list_1035@77:0> > 0) |- P[<make_list_1035@77:0>](<make_list_1035@77:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(269838)[4] (0.017998 sec.)
      solution:
        P[<fail_1565@151:0>]($363:bool) = false
        P[<make_list_1035@77:0>]($404:int) = true
        P[<<make_list_1035@77:1>@106:0>]($385:int,$387:int) = (2 <= $387)
        P[<<<make_list_1035@77:1>@106:1>@122:0>]($407:int,$409:int,$411:int) = (2 <= $409)
        P[<<<<make_list_1035@77:1>@106:1>@122:1>@137:0>]($390:int,$392:int,$394:int,$396:int) = (2 <= $392)
        P[<make_list_1035@80:0>]($426:int) = true
        P[<<make_list_1035@80:1>@96:0>]($399:int,$401:int) = (1 <= $401)
        P[<make_list_1035@83:0>]($429:int) = true
        P[<<make_list_1035@83:1>@86:0>]($421:int,$423:int) = (0 <= $423)
        P[<nth_1030@110:1>]($371:int,$373:int) = (2 <= $373)
        P[<<nth_1030@110:2>@118:0>]($414:int,$416:int,$418:int) = (2 <= $416)
        P[<<<nth_1030@110:2>@118:1>@141:0>]($376:int,$378:int,$380:int,$382:int) = (2 <= $378)
        P[<nth_1030@148:1>]($366:int,$368:int) = (1 <= $368)
    end YhornInterface.solve(268609)[3] (0.159976 sec.)
    
  end RefTypeInfer.infer_etrs(50265)[2] (1.336797 sec.)
  refinement types:
    main_1553: X
    f_1561: v1:int -> X
    main_1037: v1:int -> (v2:int -> X) -> X
    make_list_1035: v1:int -> (v2:{v2:int | ((1 + v1) <= v2)} -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    make_list_1035: v1:int -> (v2:{v2:int | ((1 + v1) <= v2)} -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    make_list_1035: v1:int -> (v2:{v2:int | ((1 + v1) <= v2)} -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_make_list_1559: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1099: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_make_list_1559: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1099: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_1560: v1:int -> (v2:int -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    nth_1030: v1:int ->
              v2:{v2:int | (2 <= v2)} ->
              (v3:int -> (v4:{v4:int | ((0 <= v1) && ((2 + v1) <= v2))} -> X) -> X) -> (v7:int -> X) -> X
    br_nth_1563: v1:bool -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> (v8:int -> X) -> X
    f_cons_make_list_1558: v1:int -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> v8:int -> (v9:int -> X) -> X
    f_nth_1555: v1:int -> v2:int -> (v3:int -> X) -> (v5:int -> (v6:int -> X) -> X) -> v9:int -> X
    nth_1030: v1:int -> v2:{v2:int | (2 <= v2)} -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    fail_1565: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1562: var489:int -> var488:int -> X
    f_make_list_1557: var494:int -> var493:int -> (var492:int -> X) -> X
    f_nth_1554: var498:int -> var497:int -> var496:unit -> X
    f_nth_1556: var509:int ->
                var508:int ->
                var507:int -> (var506:int -> (var505:int -> X) -> X) -> var502:int -> (var501:int -> X) -> X
  abstraction types:
    main_1553: X
    f_1561: v1:int -> X
    main_1037: v1:int -> (v2:int -> X) -> X
    make_list_1035: var518:int ->
                    (var519:int[var519 -> ((1 + var518) <= var519)] -> (var520:int -> (var521:int -> X) -> X) -> X) ->
                    X
    f_make_list_1559: var526:int ->
                      (var527:int -> (var528:int -> (var529:int -> X) -> X) -> X) ->
                      var533:int -> (var534:int -> (var535:int -> X) -> X) -> X
    cons_make_list_1099: var539:int ->
                         var540:int ->
                         var541:int ->
                         (var542:int -> (var543:int -> X) -> X) ->
                         (var546:int -> (var547:int -> (var548:int -> X) -> X) -> X) -> X
    f_main_1560: v1:int -> (v2:int -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    nth_1030: var553:int ->
              var554:int[var554 -> (2 <= var554)] ->
              (var555:int -> (var556:int[var556 -> ((0 <= var553) && ((2 + var553) <= var554))] -> X) -> X) ->
              (var559:int -> X) -> X
    br_nth_1563: v1:bool -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> (v8:int -> X) -> X
    f_cons_make_list_1558: v1:int -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> v8:int -> (v9:int -> X) -> X
    f_nth_1555: v1:int -> v2:int -> (v3:int -> X) -> (v5:int -> (v6:int -> X) -> X) -> v9:int -> X
    fail_1565: v1:bool -> (v2:unit -> X) -> X
    f_1562: var489:int -> var488:int -> X
    f_make_list_1557: var494:int -> var493:int -> (var492:int -> X) -> X
    f_nth_1554: var498:int -> var497:int -> var496:unit -> X
    f_nth_1556: var509:int ->
                var508:int ->
                var507:int -> (var506:int -> (var505:int -> X) -> X) -> var502:int -> (var501:int -> X) -> X
  
end AbsTypeInfer.refine(50264)[1] (1.346795 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 1; 0; 0; 0; 0; 0; 0; 1; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1553
  main_1553 -> (rand_int f_1561)
  br_nth_1563 b_1564 n_1031 xs1_1032 xs2_1032 k_nth_1156 when b_1564 ->
      (xs2_1032 0 (f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032))
  br_nth_1563 b_1564 n_1031 xs1_1032 xs2_1032 k_nth_1156 when (not b_1564) -> _|_
  cons_make_list_1099 n_1036 x_1097 xs1_1098 xs2_1098 k_make_list_cons_make_list_1347 ->
      (k_make_list_cons_make_list_1347 (xs1_1098 + 1) (f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098))
  f_1561 x_1495 -> (main_1037 x_1495 (f_1562 x_1495))
  f_1562 x_1495 x_1492 -> end
  f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098 i_1096 k_make_list_cons_make_list_1362 when (
      i_1096 = 0) -> (k_make_list_cons_make_list_1362 x_1097)
  f_cons_make_list_1558 n_1036 x_1097 xs1_1098 xs2_1098 i_1096 k_make_list_cons_make_list_1362 when (
      not (i_1096 = 0)) -> (xs2_1098 (i_1096 - 1) k_make_list_cons_make_list_1362)
  f_main_1560 n_1038 k_main_1446 x1_1485 x2_1485 -> (nth_1030 (n_1038 - 1) x1_1485 x2_1485 k_main_1446)
  f_make_list_1557 n_1036 x_1103 k_make_list_1300 -> _|_
  f_make_list_1559 n_1036 k_make_list_1288 x1_1425 x2_1425 ->
      (cons_make_list_1099 n_1036 n_1036 x1_1425 x2_1425 k_make_list_1288)
  f_nth_1554 n_1031 xs1_1032 x_1162 -> _|_
  f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032 x_1215 when (n_1031 = 0) -> (k_nth_1156 x_1215)
  f_nth_1555 n_1031 xs1_1032 k_nth_1156 xs2_1032 x_1215 when (not (n_1031 = 0)) ->
      (nth_1030 (n_1031 - 1) (xs1_1032 - 1) (f_nth_1556 n_1031 x_1215 xs1_1032 xs2_1032) k_nth_1156)
  f_nth_1556 n_1031 x_1215 xs1_1032 xs2_1032 x_1070 k_nth_xs'_1201 -> (xs2_1032 (x_1070 + 1) k_nth_xs'_1201)
  fail_1565 b k -> {fail} => (k ())
  main_1037 n_1038 k_main_1446 when (n_1038 > 0) -> (make_list_1035 n_1038 (f_main_1560 n_1038 k_main_1446))
  main_1037 n_1038 k_main_1446 when (not (n_1038 > 0)) -> (k_main_1446 0)
  make_list_1035 n_1036 k_make_list_1288 when (n_1036 < 0) -> (k_make_list_1288 0 (f_make_list_1557 n_1036))
  make_list_1035 n_1036 k_make_list_1288 when (not (n_1036 < 0)) ->
      (make_list_1035 (n_1036 - 1) (f_make_list_1559 n_1036 k_make_list_1288))
  nth_1030 n_1031 xs1_1032 xs2_1032 k_nth_1156 when (xs1_1032 = 0) -> (fail_1565 true (f_nth_1554 n_1031 xs1_1032))
  nth_1030 n_1031 xs1_1032 xs2_1032 k_nth_1156 when (not (xs1_1032 = 0)) ->
      (br_nth_1563 (1 <= xs1_1032) n_1031 xs1_1032 xs2_1032 k_nth_1156)
Types:
  main_1553 : X
  fail_1565 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1035 : (x_1:int[x_1 >= 1] -> (x_3:int[x_1 <= x_3 - 1] -> (int -> (int -> X) -> X) -> X) -> X)
  nth_1030 : (x_1:int -> x_2:int[x_2 >= 2] -> (int -> (int[x_1 >= 0 && x_1 <= x_2 - 2] -> X) -> X) -> (int -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  make_list: ((x_1:{x_1:int | x_1 >= 1} -> (int list|x_2:x_1 <= x_2 - 1|)) /\ 
              (x_5:{x_5:int | x_5 < 1} -> (int list|x_6:x_5 <= x_6 - 1|)))
  nth: (x_1:int -> (({x_6:int | x_1 >= 0 && x_1 <= x_4 - 2} list|x_4:x_4 >= 2|) -> int))

cycles: 3
total: 2.426 sec
  abst: 0.024 sec
  mc: 0.036 sec
  refine: 2.076 sec
    exparam: 0.187 sec
