MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi nth0.ml

parsed::
 let is_nil_1030 xs_1031 = (match xs_1031 with
                              | [] -> true
                              | _ -> false) 
 in
 let rec nth_1032 n_1033 xs_1034 =
   (match xs_1034 with
      | [] -> let u_1042 = {fail} () 
              in
                _|_
      | x_1035::xs'_1036 -> if n_1033 = 0 then
                              x_1035
                            else
                              nth_1032 (n_1033 - 1) xs'_1036) 
 in
 let rec make_list_1037 n_1038 = if n_1038 < 0 then
                                   []
                                 else
                                   n_1038::make_list_1037 (n_1038 - 1) 
 in
 let main_1039 n_1040 =
   let xs_1041 = make_list_1037 n_1040 
   in
     if is_nil_1030 xs_1041 then
       0
     else
       nth_1032 0 xs_1041 
 in
   ()

set_target::
 let is_nil_1030 xs_1031 = (match xs_1031 with
                              | [] -> true
                              | _ -> false) 
 in
 let rec nth_1032 n_1033 xs_1034 =
   (match xs_1034 with
      | [] -> let u_1042 = {fail} () 
              in
                _|_
      | x_1035::xs'_1036 -> if n_1033 = 0 then
                              x_1035
                            else
                              nth_1032 (n_1033 - 1) xs'_1036) 
 in
 let rec make_list_1037 n_1038 = if n_1038 < 0 then
                                   []
                                 else
                                   n_1038::make_list_1037 (n_1038 - 1) 
 in
 let main_1039 n_1040 =
   let xs_1041 = make_list_1037 n_1040 
   in
     if is_nil_1030 xs_1041 then
       0
     else
       nth_1032 0 xs_1041 
 in
 let main_1065 = let arg1_1064 = rand_int () 
                 in
                   main_1039 arg1_1064 
 in
   ()

abst_list::
 let is_nil_1030 (xs_1031:(int * (int -> int))) = if fst xs_1031 = 0 then
                                                    true
                                                  else
                                                    false 
 in
 let rec nth_1032 (n_1033:int) (xs_1034:(int * (int -> int))) =
   if fst xs_1034 = 0 then
     let u_1042 = {fail} () 
     in
       _|_
   else
     if 1 <= fst xs_1034 then
       let xs'_1036 = (fst xs_1034 - 1, fun x_1076 -> (snd xs_1034) (x_1076 + 1)) 
       in
       let x_1035 = (snd xs_1034) 0 
       in
         if n_1033 = 0 then
           x_1035
         else
           nth_1032 (n_1033 - 1) xs'_1036
     else
       _|_ 
 in
 let rec make_list_1037 (n_1038:int) =
   if n_1038 < 0 then
     (0, fun x_1109 -> _|_)
   else
     let cons_make_list_1105 (x_1103:int) (xs_1104:(int * (int -> int))) =
       (fst xs_1104 + 1, fun i_1102 -> (if i_1102 = 0 then
                                          x_1103
                                        else
                                          (snd xs_1104) (i_1102 - 1))) 
     in
       cons_make_list_1105 n_1038 (make_list_1037 (n_1038 - 1)) 
 in
 let main_1039 (n_1040:int) =
   let xs_1041 = make_list_1037 n_1040 
   in
     if is_nil_1030 xs_1041 then
       0
     else
       nth_1032 0 xs_1041 
 in
 let main_1065 = let arg1_1064 = rand_int () 
                 in
                   main_1039 arg1_1064 
 in
   ()

CPS::
 let is_nil_1030 (xs_1031:(int * (int -> ((int -> X) -> X)))) (k_is_nil_1173:(
   bool -> X)) = if fst xs_1031 = 0 then
                   k_is_nil_1173 true
                 else
                   k_is_nil_1173 false 
 in
 let rec nth_1032 (n_1033:int) (xs_1034:(int * (int -> ((int -> X) -> X)))) (k_nth_1209:(
   int -> X)) =
   if fst xs_1034 = 0 then
     {|fail|} () (fun x_1215 -> _|_)
   else
     if 1 <= fst xs_1034 then
       (snd xs_1034) 0
         (fun x_1268 ->
            (if n_1033 = 0 then
               k_nth_1209 x_1268
             else
               nth_1032 (n_1033 - 1)
                 (fst xs_1034 - 1, fun x_1076 -> fun k_nth_xs'_1254 -> (snd xs_1034) (x_1076 + 1) k_nth_xs'_1254)
                 k_nth_1209))
     else
       _|_ 
 in
 let rec make_list_1037 (n_1038:int) (k_make_list_1341:((int * (int -> ((int -> X) -> X))) -> X)) =
   if n_1038 < 0 then
     k_make_list_1341 (0, fun x_1109 -> fun k_make_list_1353 -> _|_)
   else
     let cons_make_list_1105
       (x_1103:int) (xs_1104:(int * (int -> ((int -> X) -> X)))) (k_make_list_cons_make_list_1400:(
       (int * (int -> ((int -> X) -> X))) -> X)) =
       k_make_list_cons_make_list_1400
         (fst xs_1104 + 1,
         fun i_1102 ->
           fun k_make_list_cons_make_list_1415 ->
             (if i_1102 = 0 then
                k_make_list_cons_make_list_1415 x_1103
              else
                (snd xs_1104) (i_1102 - 1) k_make_list_cons_make_list_1415)) 
     in
       make_list_1037 (n_1038 - 1) (fun x_1478 -> cons_make_list_1105 n_1038 x_1478 k_make_list_1341) 
 in
 let main_1039 (n_1040:int) (k_main_1499:(int -> X)) =
   make_list_1037 n_1040
     (fun x_1505 ->
        is_nil_1030 x_1505 (fun b_1579 -> (if b_1579 then
                                             k_main_1499 0
                                           else
                                             nth_1032 0 x_1505 k_main_1499))) 
 in
   rand_int_cps () (fun x_1585 -> main_1039 x_1585 (fun x_1582 -> end))

remove_pair::
 let is_nil_1030 (xs1_1031:int) (xs2_1031:(int -> ((int -> X) -> X))) (k_is_nil_1173:(
   bool -> X)) = if xs1_1031 = 0 then
                   k_is_nil_1173 true
                 else
                   k_is_nil_1173 false 
 in
 let rec nth_1032 (n_1033:int) (xs1_1034:int) (xs2_1034:(int -> ((int -> X) -> X))) (k_nth_1209:(
   int -> X)) =
   if xs1_1034 = 0 then
     {|fail|} () (fun x_1215 -> _|_)
   else
     if 1 <= xs1_1034 then
       xs2_1034 0
         (fun x_1268 ->
            (if n_1033 = 0 then
               k_nth_1209 x_1268
             else
               nth_1032 (n_1033 - 1) (xs1_1034 - 1)
                 (fun x_1076 -> fun k_nth_xs'_1254 -> xs2_1034 (x_1076 + 1) k_nth_xs'_1254) k_nth_1209))
     else
       _|_ 
 in
 let rec make_list_1037 (n_1038:int) (k_make_list_1341:(int -> ((int -> ((int -> X) -> X)) -> X))) =
   if n_1038 < 0 then
     k_make_list_1341 0 (fun x_1109 -> fun k_make_list_1353 -> _|_)
   else
     let cons_make_list_1105
       (x_1103:int) (xs1_1104:int) (xs2_1104:(int -> ((int -> X) -> X))) (k_make_list_cons_make_list_1400:(
       int -> ((int -> ((int -> X) -> X)) -> X))) =
       k_make_list_cons_make_list_1400 (xs1_1104 + 1)
         (fun i_1102 ->
            fun k_make_list_cons_make_list_1415 ->
              (if i_1102 = 0 then
                 k_make_list_cons_make_list_1415 x_1103
               else
                 xs2_1104 (i_1102 - 1) k_make_list_cons_make_list_1415)) 
     in
       make_list_1037 (n_1038 - 1)
         (fun x1_1478 -> fun x2_1478 -> cons_make_list_1105 n_1038 x1_1478 x2_1478 k_make_list_1341) 
 in
 let main_1039 (n_1040:int) (k_main_1499:(int -> X)) =
   make_list_1037 n_1040
     (fun x1_1505 ->
        fun x2_1505 ->
          is_nil_1030 x1_1505 x2_1505
            (fun b_1579 -> (if b_1579 then
                              k_main_1499 0
                            else
                              nth_1032 0 x1_1505 x2_1505 k_main_1499))) 
 in
   rand_int_cps () (fun x_1585 -> main_1039 x_1585 (fun x_1582 -> end))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1649
  main_1649 -> (rand_int f_1658)
  br_nth_1660 b_1661 n_1033 xs1_1034 xs2_1034 k_nth_1209 when b_1661 ->
      (xs2_1034 0 (f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034))
  br_nth_1660 b_1661 n_1033 xs1_1034 xs2_1034 k_nth_1209 when (not b_1661) -> _|_
  cons_make_list_1105 n_1038 x_1103 xs1_1104 xs2_1104 k_make_list_cons_make_list_1400 ->
      (k_make_list_cons_make_list_1400 (xs1_1104 + 1) (f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104))
  f_1658 x_1585 -> (main_1039 x_1585 (f_1659 x_1585))
  f_1659 x_1585 x_1582 -> end
  f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104 i_1102 k_make_list_cons_make_list_1415 when (
      i_1102 = 0) -> (k_make_list_cons_make_list_1415 x_1103)
  f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104 i_1102 k_make_list_cons_make_list_1415 when (
      not (i_1102 = 0)) -> (xs2_1104 (i_1102 - 1) k_make_list_cons_make_list_1415)
  f_main_1656 n_1040 k_main_1499 x1_1505 x2_1505 ->
      (is_nil_1030 x1_1505 x2_1505 (f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505))
  f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505 b_1579 when b_1579 -> (k_main_1499 0)
  f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505 b_1579 when (not b_1579) -> (nth_1032 0 x1_1505 x2_1505 k_main_1499)
  f_make_list_1653 n_1038 x_1109 k_make_list_1353 -> _|_
  f_make_list_1655 n_1038 k_make_list_1341 x1_1478 x2_1478 ->
      (cons_make_list_1105 n_1038 n_1038 x1_1478 x2_1478 k_make_list_1341)
  f_nth_1650 n_1033 xs1_1034 x_1215 -> _|_
  f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034 x_1268 when (n_1033 = 0) -> (k_nth_1209 x_1268)
  f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034 x_1268 when (not (n_1033 = 0)) ->
      (nth_1032 (n_1033 - 1) (xs1_1034 - 1) (f_nth_1652 n_1033 x_1268 xs1_1034 xs2_1034) k_nth_1209)
  f_nth_1652 n_1033 x_1268 xs1_1034 xs2_1034 x_1076 k_nth_xs'_1254 -> (xs2_1034 (x_1076 + 1) k_nth_xs'_1254)
  fail_1662 b k -> {fail} => (k ())
  is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1173 when (xs1_1031 = 0) -> (k_is_nil_1173 true)
  is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1173 when (not (xs1_1031 = 0)) -> (k_is_nil_1173 false)
  main_1039 n_1040 k_main_1499 -> (make_list_1037 n_1040 (f_main_1656 n_1040 k_main_1499))
  make_list_1037 n_1038 k_make_list_1341 when (n_1038 < 0) -> (k_make_list_1341 0 (f_make_list_1653 n_1038))
  make_list_1037 n_1038 k_make_list_1341 when (not (n_1038 < 0)) ->
      (make_list_1037 (n_1038 - 1) (f_make_list_1655 n_1038 k_make_list_1341))
  nth_1032 n_1033 xs1_1034 xs2_1034 k_nth_1209 when (xs1_1034 = 0) -> (fail_1662 true (f_nth_1650 n_1033 xs1_1034))
  nth_1032 n_1033 xs1_1034 xs2_1034 k_nth_1209 when (not (xs1_1034 = 0)) ->
      (br_nth_1660 (1 <= xs1_1034) n_1033 xs1_1034 xs2_1034 k_nth_1209)
Types:
  main_1649 : X
  fail_1662 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1037 : (int -> (int -> (int -> (int -> X) -> X) -> X) -> X)
  nth_1032 : (int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1649 ... --> 
  f_1658 ... --> 
  main_1039 ... --> 
  make_list_1037 [1/2] ... --> 
  f_main_1656 ... --> 
  is_nil_1030 [2/2] ... --> 
  f_main_1657 [2/2] ... --> 
  nth_1032 [1/2] ... --> 
  fail_1662 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 1; 0; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(177)[1]
  program:
    main_1649  | true = ((Random.int 0) f_1658)
    br_nth_1660 b_1661 n_1033 xs1_1034 xs2_1034 k_nth_1209 | b_1661 = (
    xs2_1034 0
             (f_nth_1651 n_1033
                         xs1_1034
                         k_nth_1209
                         xs2_1034))
    br_nth_1660 b_1661 n_1033 xs1_1034 xs2_1034 k_nth_1209 | (not b_1661) = bot
    cons_make_list_1105 n_1038 x_1103 xs1_1104 xs2_1104 k_make_list_cons_make_list_1400 | true = (
    k_make_list_cons_make_list_1400 (xs1_1104 + 1)
                                    (f_cons_make_list_1654 n_1038
                                                           x_1103
                                                           xs1_1104
                                                           xs2_1104))
    f_1658 x_1585 | true = (main_1039 x_1585
                                      (f_1659 x_1585))
    f_1659 x_1585 x_1582 | true = end
    f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104 i_1102 k_make_list_cons_make_list_1415 | (
    i_1102 = 0) = (k_make_list_cons_make_list_1415 x_1103)
    f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104 i_1102 k_make_list_cons_make_list_1415 | (
    not (i_1102 = 0)) = (xs2_1104 (i_1102 - 1)
                                  k_make_list_cons_make_list_1415)
    f_main_1656 n_1040 k_main_1499 x1_1505 x2_1505 | true = (is_nil_1030
                                                               x1_1505
                                                               x2_1505
                                                               (f_main_1657 n_1040
                                                                    x1_1505
                                                                    k_main_1499
                                                                    x2_1505))
    f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505 b_1579 | b_1579 = (
    k_main_1499 0)
    f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505 b_1579 | (not b_1579) = (
    nth_1032 0
             x1_1505
             x2_1505
             k_main_1499)
    f_make_list_1653 n_1038 x_1109 k_make_list_1353 | true = bot
    f_make_list_1655 n_1038 k_make_list_1341 x1_1478 x2_1478 | true = (
    cons_make_list_1105 n_1038
                        n_1038
                        x1_1478
                        x2_1478
                        k_make_list_1341)
    f_nth_1650 n_1033 xs1_1034 x_1215 | true = bot
    f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034 x_1268 | (n_1033 = 0) = (
    k_nth_1209 x_1268)
    f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034 x_1268 | (not (n_1033 = 0)) = (
    nth_1032 (n_1033 - 1)
             (xs1_1034 - 1)
             (f_nth_1652 n_1033
                         x_1268
                         xs1_1034
                         xs2_1034)
             k_nth_1209)
    f_nth_1652 n_1033 x_1268 xs1_1034 xs2_1034 x_1076 k_nth_xs'_1254 | true = (
    xs2_1034 (x_1076 + 1)
             k_nth_xs'_1254)
    fail_1662 b k | true = (fail ())
    is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1173 | (xs1_1031 = 0) = (k_is_nil_1173 true)
    is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1173 | (not (xs1_1031 = 0)) = (
    k_is_nil_1173 false)
    main_1039 n_1040 k_main_1499 | true = (make_list_1037 n_1040
                                                          (f_main_1656 n_1040
                                                                    k_main_1499))
    make_list_1037 n_1038 k_make_list_1341 | (n_1038 < 0) = (k_make_list_1341 0
                                                                    (f_make_list_1653 n_1038))
    make_list_1037 n_1038 k_make_list_1341 | (not (n_1038 < 0)) = (make_list_1037
                                                                    (
                                                                    n_1038 - 1)
                                                                    (
                                                                    f_make_list_1655 n_1038
                                                                    k_make_list_1341))
    nth_1032 n_1033 xs1_1034 xs2_1034 k_nth_1209 | (xs1_1034 = 0) = (
    fail_1662 true
              (f_nth_1650 n_1033
                          xs1_1034))
    nth_1032 n_1033 xs1_1034 xs2_1034 k_nth_1209 | (not (xs1_1034 = 0)) = (
    br_nth_1660 (1 <= xs1_1034)
                n_1033
                xs1_1034
                xs2_1034
                k_nth_1209)
    main_1649:X
    br_nth_1660:bool -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    cons_make_list_1105:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1658:int -> X
    f_1659:int -> int -> X
    f_cons_make_list_1654:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_main_1656:int -> (int -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_main_1657:int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> bool -> X
    f_make_list_1653:int -> int -> (int -> X) -> X
    f_make_list_1655:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_nth_1650:int -> int -> unit -> X
    f_nth_1651:int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_nth_1652:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    fail_1662:bool -> (unit -> X) -> X
    is_nil_1030:int -> (int -> (int -> X) -> X) -> (bool -> X) -> X
    main_1039:int -> (int -> X) -> X
    make_list_1037:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
    nth_1032:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
  inlined functions: br_nth_1660,cons_make_list_1105,f_1658,f_1659,f_cons_make_list_1654,f_main_1656,f_main_1657,f_make_list_1653,f_make_list_1655,f_nth_1650,f_nth_1651,f_nth_1652,is_nil_1030,main_1039
  counterexample: 0:0:0:0:0:1:1:0:0
  error traces:
    [true.nop(<f_1658@4:0> = var2)
     [true.(<main_1039@6:0> = <f_1658@4:0>)
      [true.(<make_list_1037@8:0> = <main_1039@6:0>)
       [(<make_list_1037@8:0> < 0).(<<make_list_1037@8:1>@11:0> = 0)
        [true.((<f_main_1656@13:0> = <main_1039@6:0>) && (<f_main_1656@13:2> = <<make_list_1037@8:1>@11:0>))
         [true.(<is_nil_1030@15:0> = <f_main_1656@13:2>)
          [(not (<is_nil_1030@15:0> = 0)).(<<is_nil_1030@15:2>@18:0> = false)
           [true.
            ((<f_main_1657@20:0> = <f_main_1656@13:0>) &&
             ((<f_main_1657@20:1> = <f_main_1656@13:2>) && (<f_main_1657@20:4> = <<is_nil_1030@15:2>@18:0>)))
            [(not <f_main_1657@20:4>).((<nth_1032@23:0> = 0) && (<nth_1032@23:1> = <f_main_1657@20:1>))
             [(<nth_1032@23:1> = 0).(<fail_1662@26:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(178)[2]
    horn clauses:
      P[<fail_1662@26:0>](<fail_1662@26:0>:bool)|- bot
      
      P[<nth_1032@23:1>](<nth_1032@23:0>:int,0:int), <fail_1662@26:0> |- P[<fail_1662@26:0>](<fail_1662@26:0>:bool)
      
      P[<f_main_1657@20:4>](<f_main_1657@20:0>:int,<nth_1032@23:1>:int,false:bool), (
      <nth_1032@23:0> = 0) |- P[<nth_1032@23:1>](<nth_1032@23:0>:int,
                                                 <nth_1032@23:1>:int)
      
      P[<f_main_1656@13:2>](<f_main_1657@20:0>:int,<f_main_1657@20:1>:int),
      P[<<is_nil_1030@15:2>@18:0>](<f_main_1657@20:1>:int,<f_main_1657@20:4>:bool)|- P[<f_main_1657@20:4>](
      <f_main_1657@20:0>:int,<f_main_1657@20:1>:int,<f_main_1657@20:4>:bool)
      
      P[<is_nil_1030@15:0>](<is_nil_1030@15:0>:int), ((<is_nil_1030@15:0> <> 0) && (not <<is_nil_1030@15:2>@18:0>))
      |- P[<<is_nil_1030@15:2>@18:0>](<is_nil_1030@15:0>:int,<<is_nil_1030@15:2>@18:0>:bool)
      
      P[<f_main_1656@13:2>](<f_main_1656@13:0>:int,<is_nil_1030@15:0>:int)|- P[<is_nil_1030@15:0>](
      <is_nil_1030@15:0>:int)
      
      P[<main_1039@6:0>](<f_main_1656@13:0>:int),
      P[<<make_list_1037@8:1>@11:0>](<f_main_1656@13:0>:int,<f_main_1656@13:2>:int)|- P[<f_main_1656@13:2>](
      <f_main_1656@13:0>:int,<f_main_1656@13:2>:int)
      
      P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
      ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
      |- P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int)
      
      P[<main_1039@6:0>](<make_list_1037@8:0>:int)|- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
      
      P[<f_1658@4:0>](<main_1039@6:0>:int)|- P[<main_1039@6:0>](<main_1039@6:0>:int)
      
      |- P[<f_1658@4:0>](<f_1658@4:0>:int)
    call trees:
      <main_1649@1>
        <f_1658@4>
          <main_1039@6>
            <make_list_1037@8>
            </<make_list_1037@8:1>@11>
            <f_main_1656@13>
              <is_nil_1030@15>
              </<is_nil_1030@15:2>@18>
              <f_main_1657@20>
                <nth_1032@23>
                  <fail_1662@26>
    inlined horn clauses:
      P[<fail_1662@26:0>](<fail_1662@26:0>:bool)|- bot
      
      P[<nth_1032@23:1>](<nth_1032@23:0>:int,0:int), <fail_1662@26:0> |- P[<fail_1662@26:0>](<fail_1662@26:0>:bool)
      
      P[<<make_list_1037@8:1>@11:0>](<f_main_1657@20:0>:int,<nth_1032@23:1>:int),
      ((<nth_1032@23:0> = 0) && (<nth_1032@23:1> <> 0)) |- P[<nth_1032@23:1>](
      <nth_1032@23:0>:int,<nth_1032@23:1>:int)
      
      P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
      ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
      |- P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int)
      
      |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
    begin ParamSubstInfer.infer(1312)[3]
      
    end ParamSubstInfer.infer(1312)[3] (0.014998 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1314)[3]
      
    end RefTypeInfer.elim_coeffs(1314)[3] (0.001000 sec.)
    begin GenHcSolver.solve(1476)[3]
      Horn clauses:
        P[<fail_1662@26:0>](<fail_1662@26:0>:bool)|- bot
        
        P[<nth_1032@23:1>](<nth_1032@23:0>:int,0:int), <fail_1662@26:0> |- P[<fail_1662@26:0>](<fail_1662@26:0>:bool)
        
        P[<<make_list_1037@8:1>@11:0>](<f_main_1657@20:0>:int,<nth_1032@23:1>:int),
        ((<nth_1032@23:0> = 0) && (<nth_1032@23:1> <> 0))
        |- P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int)
        
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
        ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
        |- P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int)
        
        |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
      lower bounds:
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
        P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int) =
        ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
        P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int) = false
        P[<fail_1662@26:0>](<fail_1662@26:0>:bool) = false
      upper bounds:
        P[<fail_1662@26:0>](var6:bool) = true
      begin GenHcSolver.classify_pids(2267)[4]
        output:
          [<fail_1662@26:0>]
      end GenHcSolver.classify_pids(2267)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2270)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2271)[5]
          begin InterpProver.interpolate_fresh(2272)[6]
            begin InterpProver.interpolate_log(2273)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2274)[8]
                begin InterpProver.interpolate_simplify(2275)[9]
                  begin InterpProver.interpolate_quick(2288)[10]
                    
                  end InterpProver.interpolate_quick(2288)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2292)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2292)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2275)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2274)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2273)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2272)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2271)[5] (0.000000 sec.)
        output:
          P[<fail_1662@26:0>](<fail_1662@26:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2270)[4] (0.000000 sec.)
      Horn clauses:
        P[<nth_1032@23:1>](<nth_1032@23:0>:int,0:int)|- bot
        
        P[<<make_list_1037@8:1>@11:0>](<f_main_1657@20:0>:int,<nth_1032@23:1>:int),
        ((<nth_1032@23:0> = 0) && (<nth_1032@23:1> <> 0))
        |- P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int)
        
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
        ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
        |- P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int)
        
        |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
      lower bounds:
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
        P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int) =
        ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
        P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int) = false
      upper bounds:
        P[<nth_1032@23:1>](var9:int,var10:int) = true
      begin GenHcSolver.classify_pids(3174)[4]
        output:
          [<nth_1032@23:1>]
      end GenHcSolver.classify_pids(3174)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(3177)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(3178)[5]
          begin InterpProver.interpolate_fresh(3179)[6]
            begin InterpProver.interpolate_log(3180)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(3181)[8]
                begin InterpProver.interpolate_simplify(3182)[9]
                  begin InterpProver.interpolate_quick(3195)[10]
                    
                  end InterpProver.interpolate_quick(3195)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(3199)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(3199)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3182)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3181)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(3180)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(3179)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(3178)[5] (0.000000 sec.)
        output:
          P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int) = false
      end ApronInterface.convex_hull_interpolate(3177)[4] (0.000000 sec.)
      Horn clauses:
        P[<<make_list_1037@8:1>@11:0>](<f_main_1657@20:0>:int,<nth_1032@23:1>:int), (<nth_1032@23:1> <> 0) |- bot
        
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
        ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
        |- P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int)
        
        |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
      lower bounds:
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
        P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int) =
        ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
      upper bounds:
        P[<<make_list_1037@8:1>@11:0>](var11:int,var12:int) = (var12 = 0)
      begin GenHcSolver.classify_pids(4006)[4]
        output:
          [<<make_list_1037@8:1>@11:0>]
      end GenHcSolver.classify_pids(4006)[4] (0.000000 sec.)
      lb:((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
      nub:(not (<<make_list_1037@8:1>@11:0> = 0))
      begin ApronInterface.convex_hull_interpolate(4009)[4]
        lb:((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
        nub:(not (<<make_list_1037@8:1>@11:0> = 0))
        lb':((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
        nub':(not (<<make_list_1037@8:1>@11:0> = 0))
        begin InterpProver.interpolate(4010)[5]
          begin InterpProver.interpolate_fresh(4011)[6]
            begin InterpProver.interpolate_log(4012)[7]
              input1: ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
              input2: (not (<<make_list_1037@8:1>@11:0> = 0))
              begin InterpProver.interpolate_check(4013)[8]
                begin InterpProver.interpolate_simplify(4014)[9]
                  begin InterpProver.interpolate_quick(4043)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(4052)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(4053)[12]
                        begin CsisatInterface.interpolate_csisat_log(4054)[13]
                          input1: (0 = v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0 & (1 + v_sep_make_list_1037_sep_8_sep_0) <= 0)
                          input2: not 0 = v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(4055)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(4055)[14] (0.000000 sec.)
                          output: 0 = v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(4054)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0
                        after dnf conversion: ((0 = v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(4053)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(4052)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(4043)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4014)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(4013)[8] (0.001000 sec.)
              output: (0 = <<make_list_1037@8:1>@11:0>)
            end InterpProver.interpolate_log(4012)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(4011)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(4010)[5] (0.001000 sec.)
        output:
          P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int) =
          (0 = <<make_list_1037@8:1>@11:0>)
      end ApronInterface.convex_hull_interpolate(4009)[4] (0.001000 sec.)
      Horn clauses:
        |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
      lower bounds:
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
      upper bounds:
        P[<make_list_1037@8:0>](var13:int) = true
      begin GenHcSolver.classify_pids(4350)[4]
        output:
          [<make_list_1037@8:0>]
      end GenHcSolver.classify_pids(4350)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(4353)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(4354)[5]
          begin InterpProver.interpolate_fresh(4355)[6]
            begin InterpProver.interpolate_log(4356)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(4357)[8]
                begin InterpProver.interpolate_simplify(4358)[9]
                  begin InterpProver.interpolate_quick(4371)[10]
                    
                  end InterpProver.interpolate_quick(4371)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4358)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(4357)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(4356)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(4355)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(4354)[5] (0.000000 sec.)
        output:
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
      end ApronInterface.convex_hull_interpolate(4353)[4] (0.000000 sec.)
      begin HcSolver.check_validity(4426)[4]
        input:
          P[<fail_1662@26:0>](<fail_1662@26:0>:bool)|- bot
          
          P[<nth_1032@23:1>](<nth_1032@23:0>:int,0:int), <fail_1662@26:0> |- P[<fail_1662@26:0>](<fail_1662@26:0>:bool)
          
          P[<<make_list_1037@8:1>@11:0>](<f_main_1657@20:0>:int,<nth_1032@23:1>:int),
          ((<nth_1032@23:0> = 0) && (<nth_1032@23:1> <> 0))
          |- P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int)
          
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
          |- P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,
                                            <<make_list_1037@8:1>@11:0>:int)
          
          |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(4426)[4] (0.001000 sec.)
      solution:
        P[<fail_1662@26:0>](<fail_1662@26:0>:bool) = false
        P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int) = false
        P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int) =
        (0 = <<make_list_1037@8:1>@11:0>)
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
    end GenHcSolver.solve(1476)[3] (0.010998 sec.)
    begin GenHcSolver.solve(4672)[3]
      Horn clauses:
        P[<fail_1662@26:0>](<fail_1662@26:0>:bool)|- bot
        
        P[<nth_1032@23:1>](<nth_1032@23:0>:int,0:int), <fail_1662@26:0> |- P[<fail_1662@26:0>](<fail_1662@26:0>:bool)
        
        P[<<make_list_1037@8:1>@11:0>](<f_main_1657@20:0>:int,<nth_1032@23:1>:int),
        ((<nth_1032@23:0> = 0) && (<nth_1032@23:1> <> 0))
        |- P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int)
        
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
        ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
        |- P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int)
        
        |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
      lower bounds:
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
        P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int) =
        ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
        P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int) = false
        P[<fail_1662@26:0>](<fail_1662@26:0>:bool) = false
      upper bounds:
        P[<fail_1662@26:0>](var15:bool) = true
      begin GenHcSolver.classify_pids(5463)[4]
        output:
          [<fail_1662@26:0>]
      end GenHcSolver.classify_pids(5463)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(5466)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(5469)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5469)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5474)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5474)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(5477)[5]
          begin InterpProver.interpolate_fresh(5478)[6]
            begin InterpProver.interpolate_log(5479)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(5480)[8]
                begin InterpProver.interpolate_simplify(5481)[9]
                  begin InterpProver.interpolate_quick(5496)[10]
                    
                  end InterpProver.interpolate_quick(5496)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(5500)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(5500)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5481)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5480)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(5479)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(5478)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(5477)[5] (0.001000 sec.)
        output:
          P[<fail_1662@26:0>](<fail_1662@26:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(5466)[4] (0.001000 sec.)
      Horn clauses:
        P[<nth_1032@23:1>](<nth_1032@23:0>:int,0:int)|- bot
        
        P[<<make_list_1037@8:1>@11:0>](<f_main_1657@20:0>:int,<nth_1032@23:1>:int),
        ((<nth_1032@23:0> = 0) && (<nth_1032@23:1> <> 0))
        |- P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int)
        
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
        ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
        |- P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int)
        
        |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
      lower bounds:
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
        P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int) =
        ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
        P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int) = false
      upper bounds:
        P[<nth_1032@23:1>](var18:int,var19:int) = true
      begin GenHcSolver.classify_pids(6389)[4]
        output:
          [<nth_1032@23:1>]
      end GenHcSolver.classify_pids(6389)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(6392)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(6395)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(6395)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(6400)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(6400)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(6403)[5]
          begin InterpProver.interpolate_fresh(6404)[6]
            begin InterpProver.interpolate_log(6405)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(6406)[8]
                begin InterpProver.interpolate_simplify(6407)[9]
                  begin InterpProver.interpolate_quick(6422)[10]
                    
                  end InterpProver.interpolate_quick(6422)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(6426)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(6426)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(6407)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(6406)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(6405)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(6404)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(6403)[5] (0.001000 sec.)
        output:
          P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int) = false
      end ApronInterface.convex_hull_interpolate(6392)[4] (0.001000 sec.)
      Horn clauses:
        P[<<make_list_1037@8:1>@11:0>](<f_main_1657@20:0>:int,<nth_1032@23:1>:int), (<nth_1032@23:1> <> 0) |- bot
        
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
        ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
        |- P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int)
        
        |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
      lower bounds:
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
        P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int) =
        ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
      upper bounds:
        P[<<make_list_1037@8:1>@11:0>](var20:int,var21:int) = (var21 = 0)
      begin GenHcSolver.classify_pids(7240)[4]
        output:
          [<<make_list_1037@8:1>@11:0>]
      end GenHcSolver.classify_pids(7240)[4] (0.000000 sec.)
      lb:((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
      nub:(not (<<make_list_1037@8:1>@11:0> = 0))
      begin ApronInterface.convex_hull_interpolate(7243)[4]
        lb:((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
        nub:(not (<<make_list_1037@8:1>@11:0> = 0))
        begin ExtFormula.Formula.case_analysis_boolean(7253)[5]
          ts: ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
          
        end ExtFormula.Formula.case_analysis_boolean(7253)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(7261)[5]
          ts: (<<make_list_1037@8:1>@11:0> <> 0)
          
        end ExtFormula.Formula.case_analysis_boolean(7261)[5] (0.000000 sec.)
        lb':((<<make_list_1037@8:1>@11:0> = 0) && ((-1 + (-1 * <make_list_1037@8:0>)) >= 0))
        nub':true
        begin InterpProver.interpolate(7265)[5]
          begin InterpProver.interpolate_fresh(7266)[6]
            begin InterpProver.interpolate_log(7267)[7]
              input1: ((<<make_list_1037@8:1>@11:0> = 0) && ((-1 + (-1 * <make_list_1037@8:0>)) >= 0))
              input2: true
              begin InterpProver.interpolate_check(7268)[8]
                begin InterpProver.interpolate_simplify(7269)[9]
                  begin InterpProver.interpolate_quick(7308)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(7314)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(7315)[12]
                        begin CsisatInterface.interpolate_csisat_log(7316)[13]
                          input1: (1 + v_sep_make_list_1037_sep_8_sep_0) <= 0
                          input2: true
                          begin CsisatInterface.interpolate_csisat_raw(7317)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(7317)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(7316)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(7315)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(7314)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(7308)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(7269)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(7268)[8] (0.000000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(7267)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(7266)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(7265)[5] (0.000000 sec.)
        begin InterpProver.interpolate(7325)[5]
          begin InterpProver.interpolate_fresh(7326)[6]
            begin InterpProver.interpolate_log(7327)[7]
              input1: ((<<make_list_1037@8:1>@11:0> = 0) && ((-1 + (-1 * <make_list_1037@8:0>)) >= 0))
              input2: (not (<<make_list_1037@8:1>@11:0> = 0))
              begin InterpProver.interpolate_check(7328)[8]
                begin InterpProver.interpolate_simplify(7329)[9]
                  begin InterpProver.interpolate_quick(7364)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(7373)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(7374)[12]
                        begin CsisatInterface.interpolate_csisat_log(7375)[13]
                          input1: (0 = v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0 & (1 + v_sep_make_list_1037_sep_8_sep_0) <= 0)
                          input2: not 0 = v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0
                          begin CsisatInterface.interpolate_csisat_raw(7376)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(7376)[14] (0.000000 sec.)
                          output: 0 = v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(7375)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0
                        after dnf conversion: ((0 = v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(7374)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(7373)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(7364)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(7329)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(7328)[8] (0.001000 sec.)
              output: (0 = <<make_list_1037@8:1>@11:0>)
            end InterpProver.interpolate_log(7327)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(7326)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(7325)[5] (0.001000 sec.)
        output:
          P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int) =
          (0 = <<make_list_1037@8:1>@11:0>)
      end ApronInterface.convex_hull_interpolate(7243)[4] (0.002000 sec.)
      Horn clauses:
        |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
      lower bounds:
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
      upper bounds:
        P[<make_list_1037@8:0>](var22:int) = true
      begin GenHcSolver.classify_pids(7671)[4]
        output:
          [<make_list_1037@8:0>]
      end GenHcSolver.classify_pids(7671)[4] (0.000000 sec.)
      lb:true
      nub:false
      begin ApronInterface.convex_hull_interpolate(7674)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(7677)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(7677)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(7682)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(7682)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(7685)[5]
          begin InterpProver.interpolate_fresh(7686)[6]
            begin InterpProver.interpolate_log(7687)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(7688)[8]
                begin InterpProver.interpolate_simplify(7689)[9]
                  begin InterpProver.interpolate_quick(7703)[10]
                    
                  end InterpProver.interpolate_quick(7703)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(7689)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(7688)[8] (0.000999 sec.)
              output: true
            end InterpProver.interpolate_log(7687)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(7686)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(7685)[5] (0.000999 sec.)
        output:
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
      end ApronInterface.convex_hull_interpolate(7674)[4] (0.000999 sec.)
      begin HcSolver.check_validity(7760)[4]
        input:
          P[<fail_1662@26:0>](<fail_1662@26:0>:bool)|- bot
          
          P[<nth_1032@23:1>](<nth_1032@23:0>:int,0:int), <fail_1662@26:0> |- P[<fail_1662@26:0>](<fail_1662@26:0>:bool)
          
          P[<<make_list_1037@8:1>@11:0>](<f_main_1657@20:0>:int,<nth_1032@23:1>:int),
          ((<nth_1032@23:0> = 0) && (<nth_1032@23:1> <> 0))
          |- P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int)
          
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
          |- P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,
                                            <<make_list_1037@8:1>@11:0>:int)
          
          |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(7760)[4] (0.001000 sec.)
      solution:
        P[<fail_1662@26:0>](<fail_1662@26:0>:bool) = false
        P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int) = false
        P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,<<make_list_1037@8:1>@11:0>:int) =
        (0 = <<make_list_1037@8:1>@11:0>)
        P[<make_list_1037@8:0>](<make_list_1037@8:0>:int) = true
    end GenHcSolver.solve(4672)[3] (0.016997 sec.)
    begin YhornInterface.solve(8006)[3]
      begin HcSolver.solve_ub(8007)[4]
        encoded:
          P[<fail_1662@26:0>](<fail_1662@26:0>:int)|- bot
          
          P[<nth_1032@23:1>](<nth_1032@23:0>:int,0:int), (<fail_1662@26:0> = 1)
          |- P[<fail_1662@26:0>](<fail_1662@26:0>:int)
          
          P[<<make_list_1037@8:1>@11:0>](<f_main_1657@20:0>:int,<nth_1032@23:1>:int),
          ((<nth_1032@23:0> = 0) && (<nth_1032@23:1> <> 0))
          |- P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int)
          
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
          |- P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,
                                            <<make_list_1037@8:1>@11:0>:int)
          
          |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
        input to Yhorn:
          P[<fail_1662@26:0>](<fail_1662@26:0>:int)|- bot
          
          P[<nth_1032@23:1>](<nth_1032@23:0>:int,var23:int), ((var23 = 0) && (<fail_1662@26:0> = 1))
          |- P[<fail_1662@26:0>](<fail_1662@26:0>:int)
          
          P[<<make_list_1037@8:1>@11:0>](<f_main_1657@20:0>:int,<nth_1032@23:1>:int),
          ((<nth_1032@23:1> <> 0) && (<nth_1032@23:0> = 0))
          |- P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int)
          
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          ((<make_list_1037@8:0> < 0) && (<<make_list_1037@8:1>@11:0> = 0))
          |- P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,
                                            <<make_list_1037@8:1>@11:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1662_sep_26_sep_0($8)) -> 1=0.
(($8-1=0) & ($9=0)) & (v_sep_nth_1032_sep_23_sep_1($10,$9)) -> v_sep_fail_1662_sep_26_sep_0($8).
(($10=0) & ($11<>0)) & (v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0($12,$11)) -> v_sep_nth_1032_sep_23_sep_1($10,$11).
(($13=0) & ($14<0)) & (v_sep_make_list_1037_sep_8_sep_0($14)) -> v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0($14,$13).
0=0 -> v_sep_make_list_1037_sep_8_sep_0($14).


v_sep_fail_1662_sep_26_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0: X
v_sep_nth_1032_sep_23_sep_1: X
......Extend [17]0.248961
Reconstrcut: 4

v_sep_fail_1662_sep_26_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0: X
v_sep_nth_1032_sep_23_sep_1: X
...Split disj [17] 0.25096
Reconstrcut: 5 **)

v_sep_fail_1662_sep_26_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0: X
v_sep_nth_1032_sep_23_sep_1: (X) | (X)
......
v_sep_fail_1662_sep_26_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0: X
v_sep_nth_1032_sep_23_sep_1: (X) | (X)
....
v_sep_fail_1662_sep_26_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0: X
v_sep_nth_1032_sep_23_sep_1: (X) | (X)
......
v_sep_fail_1662_sep_26_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0: X
v_sep_nth_1032_sep_23_sep_1: (X) | (X)
.......
v_sep_fail_1662_sep_26_sep_0: X
v_sep_make_list_1037_sep_8_sep_0: X
v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0: X
v_sep_nth_1032_sep_23_sep_1: (X) | (X)
.......(0=0) & (v_sep_fail_1662_sep_26_sep_0($8)) -> 1=0.
(($8-1=0) & ($9=0)) & (v_sep_nth_1032_sep_23_sep_1($10,$9)) -> v_sep_fail_1662_sep_26_sep_0($8).
(($10=0) & ($11<>0)) & (v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0($12,$11)) -> v_sep_nth_1032_sep_23_sep_1($10,$11).
(($13=0) & ($14<0)) & (v_sep_make_list_1037_sep_8_sep_0($14)) -> v_sep_make_list_1037_sep_8_sep_1_sep_11_sep_0($14,$13).
0=0 -> v_sep_make_list_1037_sep_8_sep_0($14).

          |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
        solution:
          P[<fail_1662@26:0>]($15:bool) = false
          P[<make_list_1037@8:0>]($28:int) = true
          P[<<make_list_1037@8:1>@11:0>]($23:int,$25:int) = true
          P[<nth_1032@23:1>]($18:int,$20:int) = ((1 <= $20) || (0 >= (1 + $20)))
        
      end HcSolver.solve_ub(8007)[4] (0.026996 sec.)
      begin HcSolver.check_validity(8133)[4]
        input:
          P[<fail_1662@26:0>](<fail_1662@26:0>:bool)|- bot
          
          P[<nth_1032@23:1>](<nth_1032@23:0>:int,0:int), <fail_1662@26:0> |- P[<fail_1662@26:0>](<fail_1662@26:0>:bool)
          
          P[<<make_list_1037@8:1>@11:0>](<f_main_1657@20:0>:int,<nth_1032@23:1>:int),
          ((<nth_1032@23:0> = 0) && (<nth_1032@23:1> <> 0))
          |- P[<nth_1032@23:1>](<nth_1032@23:0>:int,<nth_1032@23:1>:int)
          
          P[<make_list_1037@8:0>](<make_list_1037@8:0>:int),
          ((<<make_list_1037@8:1>@11:0> = 0) && (<make_list_1037@8:0> < 0))
          |- P[<<make_list_1037@8:1>@11:0>](<make_list_1037@8:0>:int,
                                            <<make_list_1037@8:1>@11:0>:int)
          
          |- P[<make_list_1037@8:0>](<make_list_1037@8:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(8133)[4] (0.002000 sec.)
      solution:
        P[<fail_1662@26:0>]($15:bool) = false
        P[<make_list_1037@8:0>]($28:int) = true
        P[<<make_list_1037@8:1>@11:0>]($23:int,$25:int) = true
        P[<nth_1032@23:1>]($18:int,$20:int) = ((1 <= $20) || (0 >= (1 + $20)))
    end YhornInterface.solve(8006)[3] (0.028996 sec.)
    
  end RefTypeInfer.infer_etrs(178)[2] (0.079988 sec.)
  refinement types:
    main_1649: X
    f_1658: v1:int -> X
    main_1039: v1:int -> (v2:int -> X) -> X
    make_list_1037: v1:int -> (v2:{v2:int | (0 = v2)} -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_main_1656: v1:int -> (v2:int -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    is_nil_1030: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1657: v1:int -> v2:int -> (v3:int -> X) -> (v5:int -> (v6:int -> X) -> X) -> v9:bool -> X
    nth_1032: v1:int -> v2:{v2:int | false} -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    fail_1662: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_nth_1660: var63:bool -> var62:int -> var61:int -> (var60:int -> (var59:int -> X) -> X) -> (var56:int -> X) -> X
    cons_make_list_1105: var77:int ->
                         var76:int ->
                         var75:int ->
                         (var74:int -> (var73:int -> X) -> X) ->
                         (var70:int -> (var69:int -> (var68:int -> X) -> X) -> X) -> X
    f_1659: var80:int -> var79:int -> X
    f_cons_make_list_1654: var91:int ->
                           var90:int ->
                           var89:int -> (var88:int -> (var87:int -> X) -> X) -> var84:int -> (var83:int -> X) -> X
    f_make_list_1653: var96:int -> var95:int -> (var94:int -> X) -> X
    f_make_list_1655: var109:int ->
                      (var108:int -> (var107:int -> (var106:int -> X) -> X) -> X) ->
                      var102:int -> (var101:int -> (var100:int -> X) -> X) -> X
    f_nth_1650: var113:int -> var112:int -> var111:unit -> X
    f_nth_1651: var123:int ->
                var122:int -> (var121:int -> X) -> (var119:int -> (var118:int -> X) -> X) -> var115:int -> X
    f_nth_1652: var134:int ->
                var133:int ->
                var132:int -> (var131:int -> (var130:int -> X) -> X) -> var127:int -> (var126:int -> X) -> X
  abstraction types:
    main_1649: X
    f_1658: v1:int -> X
    main_1039: v1:int -> (v2:int -> X) -> X
    make_list_1037: v1:int -> (v2:int[v2 -> (0 = v2)] -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_main_1656: v1:int -> (v2:int -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    is_nil_1030: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1657: v1:int -> v2:int -> (v3:int -> X) -> (v5:int -> (v6:int -> X) -> X) -> v9:bool -> X
    nth_1032: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    fail_1662: v1:bool -> (v2:unit -> X) -> X
    br_nth_1660: var63:bool -> var62:int -> var61:int -> (var60:int -> (var59:int -> X) -> X) -> (var56:int -> X) -> X
    cons_make_list_1105: var77:int ->
                         var76:int ->
                         var75:int ->
                         (var74:int -> (var73:int -> X) -> X) ->
                         (var70:int -> (var69:int -> (var68:int -> X) -> X) -> X) -> X
    f_1659: var80:int -> var79:int -> X
    f_cons_make_list_1654: var91:int ->
                           var90:int ->
                           var89:int -> (var88:int -> (var87:int -> X) -> X) -> var84:int -> (var83:int -> X) -> X
    f_make_list_1653: var96:int -> var95:int -> (var94:int -> X) -> X
    f_make_list_1655: var109:int ->
                      (var108:int -> (var107:int -> (var106:int -> X) -> X) -> X) ->
                      var102:int -> (var101:int -> (var100:int -> X) -> X) -> X
    f_nth_1650: var113:int -> var112:int -> var111:unit -> X
    f_nth_1651: var123:int ->
                var122:int -> (var121:int -> X) -> (var119:int -> (var118:int -> X) -> X) -> var115:int -> X
    f_nth_1652: var134:int ->
                var133:int ->
                var132:int -> (var131:int -> (var130:int -> X) -> X) -> var127:int -> (var126:int -> X) -> X
  
end AbsTypeInfer.refine(177)[1] (0.086987 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1649
  main_1649 -> (rand_int f_1658)
  br_nth_1660 b_1661 n_1033 xs1_1034 xs2_1034 k_nth_1209 when b_1661 ->
      (xs2_1034 0 (f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034))
  br_nth_1660 b_1661 n_1033 xs1_1034 xs2_1034 k_nth_1209 when (not b_1661) -> _|_
  cons_make_list_1105 n_1038 x_1103 xs1_1104 xs2_1104 k_make_list_cons_make_list_1400 ->
      (k_make_list_cons_make_list_1400 (xs1_1104 + 1) (f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104))
  f_1658 x_1585 -> (main_1039 x_1585 (f_1659 x_1585))
  f_1659 x_1585 x_1582 -> end
  f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104 i_1102 k_make_list_cons_make_list_1415 when (
      i_1102 = 0) -> (k_make_list_cons_make_list_1415 x_1103)
  f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104 i_1102 k_make_list_cons_make_list_1415 when (
      not (i_1102 = 0)) -> (xs2_1104 (i_1102 - 1) k_make_list_cons_make_list_1415)
  f_main_1656 n_1040 k_main_1499 x1_1505 x2_1505 ->
      (is_nil_1030 x1_1505 x2_1505 (f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505))
  f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505 b_1579 when b_1579 -> (k_main_1499 0)
  f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505 b_1579 when (not b_1579) -> (nth_1032 0 x1_1505 x2_1505 k_main_1499)
  f_make_list_1653 n_1038 x_1109 k_make_list_1353 -> _|_
  f_make_list_1655 n_1038 k_make_list_1341 x1_1478 x2_1478 ->
      (cons_make_list_1105 n_1038 n_1038 x1_1478 x2_1478 k_make_list_1341)
  f_nth_1650 n_1033 xs1_1034 x_1215 -> _|_
  f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034 x_1268 when (n_1033 = 0) -> (k_nth_1209 x_1268)
  f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034 x_1268 when (not (n_1033 = 0)) ->
      (nth_1032 (n_1033 - 1) (xs1_1034 - 1) (f_nth_1652 n_1033 x_1268 xs1_1034 xs2_1034) k_nth_1209)
  f_nth_1652 n_1033 x_1268 xs1_1034 xs2_1034 x_1076 k_nth_xs'_1254 -> (xs2_1034 (x_1076 + 1) k_nth_xs'_1254)
  fail_1662 b k -> {fail} => (k ())
  is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1173 when (xs1_1031 = 0) -> (k_is_nil_1173 true)
  is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1173 when (not (xs1_1031 = 0)) -> (k_is_nil_1173 false)
  main_1039 n_1040 k_main_1499 -> (make_list_1037 n_1040 (f_main_1656 n_1040 k_main_1499))
  make_list_1037 n_1038 k_make_list_1341 when (n_1038 < 0) -> (k_make_list_1341 0 (f_make_list_1653 n_1038))
  make_list_1037 n_1038 k_make_list_1341 when (not (n_1038 < 0)) ->
      (make_list_1037 (n_1038 - 1) (f_make_list_1655 n_1038 k_make_list_1341))
  nth_1032 n_1033 xs1_1034 xs2_1034 k_nth_1209 when (xs1_1034 = 0) -> (fail_1662 true (f_nth_1650 n_1033 xs1_1034))
  nth_1032 n_1033 xs1_1034 xs2_1034 k_nth_1209 when (not (xs1_1034 = 0)) ->
      (br_nth_1660 (1 <= xs1_1034) n_1033 xs1_1034 xs2_1034 k_nth_1209)
Types:
  main_1649 : X
  fail_1662 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1037 : (int -> (x_3:int[x_3 = 0] -> (int -> (int -> X) -> X) -> X) -> X)
  nth_1032 : (int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1649 ... --> 
  f_1658 ... --> 
  main_1039 ... --> 
  make_list_1037 [2/2] ... --> 
  make_list_1037 [1/2] ... --> 
  f_make_list_1655 ... --> 
  cons_make_list_1105 ... --> 
  f_main_1656 ... --> 
  is_nil_1030 [2/2] ... --> 
  f_main_1657 [2/2] ... --> 
  nth_1032 [1/2] ... --> 
  fail_1662 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 0; 1; 1; 0; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(8689)[1]
  program:
    main_1649  | true = ((Random.int 0) f_1658)
    br_nth_1660 b_1661 n_1033 xs1_1034 xs2_1034 k_nth_1209 | b_1661 = (
    xs2_1034 0
             (f_nth_1651 n_1033
                         xs1_1034
                         k_nth_1209
                         xs2_1034))
    br_nth_1660 b_1661 n_1033 xs1_1034 xs2_1034 k_nth_1209 | (not b_1661) = bot
    cons_make_list_1105 n_1038 x_1103 xs1_1104 xs2_1104 k_make_list_cons_make_list_1400 | true = (
    k_make_list_cons_make_list_1400 (xs1_1104 + 1)
                                    (f_cons_make_list_1654 n_1038
                                                           x_1103
                                                           xs1_1104
                                                           xs2_1104))
    f_1658 x_1585 | true = (main_1039 x_1585
                                      (f_1659 x_1585))
    f_1659 x_1585 x_1582 | true = end
    f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104 i_1102 k_make_list_cons_make_list_1415 | (
    i_1102 = 0) = (k_make_list_cons_make_list_1415 x_1103)
    f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104 i_1102 k_make_list_cons_make_list_1415 | (
    not (i_1102 = 0)) = (xs2_1104 (i_1102 - 1)
                                  k_make_list_cons_make_list_1415)
    f_main_1656 n_1040 k_main_1499 x1_1505 x2_1505 | true = (is_nil_1030
                                                               x1_1505
                                                               x2_1505
                                                               (f_main_1657 n_1040
                                                                    x1_1505
                                                                    k_main_1499
                                                                    x2_1505))
    f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505 b_1579 | b_1579 = (
    k_main_1499 0)
    f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505 b_1579 | (not b_1579) = (
    nth_1032 0
             x1_1505
             x2_1505
             k_main_1499)
    f_make_list_1653 n_1038 x_1109 k_make_list_1353 | true = bot
    f_make_list_1655 n_1038 k_make_list_1341 x1_1478 x2_1478 | true = (
    cons_make_list_1105 n_1038
                        n_1038
                        x1_1478
                        x2_1478
                        k_make_list_1341)
    f_nth_1650 n_1033 xs1_1034 x_1215 | true = bot
    f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034 x_1268 | (n_1033 = 0) = (
    k_nth_1209 x_1268)
    f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034 x_1268 | (not (n_1033 = 0)) = (
    nth_1032 (n_1033 - 1)
             (xs1_1034 - 1)
             (f_nth_1652 n_1033
                         x_1268
                         xs1_1034
                         xs2_1034)
             k_nth_1209)
    f_nth_1652 n_1033 x_1268 xs1_1034 xs2_1034 x_1076 k_nth_xs'_1254 | true = (
    xs2_1034 (x_1076 + 1)
             k_nth_xs'_1254)
    fail_1662 b k | true = (fail ())
    is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1173 | (xs1_1031 = 0) = (k_is_nil_1173 true)
    is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1173 | (not (xs1_1031 = 0)) = (
    k_is_nil_1173 false)
    main_1039 n_1040 k_main_1499 | true = (make_list_1037 n_1040
                                                          (f_main_1656 n_1040
                                                                    k_main_1499))
    make_list_1037 n_1038 k_make_list_1341 | (n_1038 < 0) = (k_make_list_1341 0
                                                                    (f_make_list_1653 n_1038))
    make_list_1037 n_1038 k_make_list_1341 | (not (n_1038 < 0)) = (make_list_1037
                                                                    (
                                                                    n_1038 - 1)
                                                                    (
                                                                    f_make_list_1655 n_1038
                                                                    k_make_list_1341))
    nth_1032 n_1033 xs1_1034 xs2_1034 k_nth_1209 | (xs1_1034 = 0) = (
    fail_1662 true
              (f_nth_1650 n_1033
                          xs1_1034))
    nth_1032 n_1033 xs1_1034 xs2_1034 k_nth_1209 | (not (xs1_1034 = 0)) = (
    br_nth_1660 (1 <= xs1_1034)
                n_1033
                xs1_1034
                xs2_1034
                k_nth_1209)
    main_1649:X
    br_nth_1660:bool -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    cons_make_list_1105:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1658:int -> X
    f_1659:int -> int -> X
    f_cons_make_list_1654:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_main_1656:int -> (int -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_main_1657:int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> bool -> X
    f_make_list_1653:int -> int -> (int -> X) -> X
    f_make_list_1655:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_nth_1650:int -> int -> unit -> X
    f_nth_1651:int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_nth_1652:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    fail_1662:bool -> (unit -> X) -> X
    is_nil_1030:int -> (int -> (int -> X) -> X) -> (bool -> X) -> X
    main_1039:int -> (int -> X) -> X
    make_list_1037:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
    nth_1032:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
  inlined functions: br_nth_1660,cons_make_list_1105,f_1658,f_1659,f_cons_make_list_1654,f_main_1656,f_main_1657,f_make_list_1653,f_make_list_1655,f_nth_1650,f_nth_1651,f_nth_1652,is_nil_1030,main_1039
  counterexample: 0:0:0:1:0:0:0:0:1:1:0:0
  error traces:
    [true.nop(<f_1658@32:0> = var135)
     [true.(<main_1039@34:0> = <f_1658@32:0>)
      [true.(<make_list_1037@36:0> = <main_1039@34:0>)
       [(not (<make_list_1037@36:0> < 0)).(<make_list_1037@39:0> = (<make_list_1037@36:0> - 1))
        [(<make_list_1037@39:0> < 0).(<<make_list_1037@39:1>@42:0> = 0)
         [true.
          ((<f_make_list_1655@44:0> = <make_list_1037@36:0>) &&
           (<f_make_list_1655@44:2> = <<make_list_1037@39:1>@42:0>))
          [true.
           ((<cons_make_list_1105@46:0> = <f_make_list_1655@44:0>) &&
            ((<cons_make_list_1105@46:1> = <f_make_list_1655@44:0>) &&
             (<cons_make_list_1105@46:2> = <f_make_list_1655@44:2>)))
           [true.(<<cons_make_list_1105@46:4>@48:0> = (<cons_make_list_1105@46:2> + 1))
            [true.(<<f_make_list_1655@44:1>@50:0> = <<cons_make_list_1105@46:4>@48:0>)
             [true.(<<make_list_1037@36:1>@52:0> = <<f_make_list_1655@44:1>@50:0>)
              [true.((<f_main_1656@54:0> = <main_1039@34:0>) && (<f_main_1656@54:2> = <<make_list_1037@36:1>@52:0>))
               [true.(<is_nil_1030@56:0> = <f_main_1656@54:2>)
                [(not (<is_nil_1030@56:0> = 0)).(<<is_nil_1030@56:2>@59:0> = false)
                 [true.
                  ((<f_main_1657@61:0> = <f_main_1656@54:0>) &&
                   ((<f_main_1657@61:1> = <f_main_1656@54:2>) && (<f_main_1657@61:4> = <<is_nil_1030@56:2>@59:0>)))
                  [(not <f_main_1657@61:4>).((<nth_1032@64:0> = 0) && (<nth_1032@64:1> = <f_main_1657@61:1>))
                   [(<nth_1032@64:1> = 0).(<fail_1662@67:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(8690)[2]
    horn clauses:
      P[<fail_1662@67:0>](<fail_1662@67:0>:bool)|- bot
      
      P[<nth_1032@64:1>](<nth_1032@64:0>:int,0:int), <fail_1662@67:0> |- P[<fail_1662@67:0>](<fail_1662@67:0>:bool)
      
      P[<f_main_1657@61:4>](<f_main_1657@61:0>:int,<nth_1032@64:1>:int,false:bool), (
      <nth_1032@64:0> = 0) |- P[<nth_1032@64:1>](<nth_1032@64:0>:int,
                                                 <nth_1032@64:1>:int)
      
      P[<f_main_1656@54:2>](<f_main_1657@61:0>:int,<f_main_1657@61:1>:int),
      P[<<is_nil_1030@56:2>@59:0>](<f_main_1657@61:1>:int,<f_main_1657@61:4>:bool)|- P[<f_main_1657@61:4>](
      <f_main_1657@61:0>:int,<f_main_1657@61:1>:int,<f_main_1657@61:4>:bool)
      
      P[<is_nil_1030@56:0>](<is_nil_1030@56:0>:int), ((<is_nil_1030@56:0> <> 0) && (not <<is_nil_1030@56:2>@59:0>))
      |- P[<<is_nil_1030@56:2>@59:0>](<is_nil_1030@56:0>:int,<<is_nil_1030@56:2>@59:0>:bool)
      
      P[<f_main_1656@54:2>](<f_main_1656@54:0>:int,<is_nil_1030@56:0>:int)|- P[<is_nil_1030@56:0>](
      <is_nil_1030@56:0>:int)
      
      P[<main_1039@34:0>](<f_main_1656@54:0>:int),
      P[<<make_list_1037@36:1>@52:0>](<f_main_1656@54:0>:int,<f_main_1656@54:2>:int)|- P[<f_main_1656@54:2>](
      <f_main_1656@54:0>:int,<f_main_1656@54:2>:int)
      
      P[<make_list_1037@36:0>](<make_list_1037@36:0>:int),
      P[<<f_make_list_1655@44:1>@50:0>](<make_list_1037@36:0>:int,<<make_list_1037@36:1>@52:0>:int),
      (<make_list_1037@36:0> >= 0)
      |- P[<<make_list_1037@36:1>@52:0>](<make_list_1037@36:0>:int,<<make_list_1037@36:1>@52:0>:int)
      
      P[<f_make_list_1655@44:2>](<f_make_list_1655@44:0>:int,<cons_make_list_1105@46:2>:int),
      P[<<cons_make_list_1105@46:4>@48:0>](<f_make_list_1655@44:0>:int,<f_make_list_1655@44:0>:int,<cons_make_list_1105@46:2>:int,<<f_make_list_1655@44:1>@50:0>:int)|- P[<<f_make_list_1655@44:1>@50:0>](
      <f_make_list_1655@44:0>:int,<<f_make_list_1655@44:1>@50:0>:int)
      
      P[<cons_make_list_1105@46:2>](<cons_make_list_1105@46:0>:int,<cons_make_list_1105@46:1>:int,<cons_make_list_1105@46:2>:int),
      (<<cons_make_list_1105@46:4>@48:0> = (1 + <cons_make_list_1105@46:2>))
      |- P[<<cons_make_list_1105@46:4>@48:0>](<cons_make_list_1105@46:0>:int,
                                              <cons_make_list_1105@46:1>:int,
                                              <cons_make_list_1105@46:2>:int,
                                              <<cons_make_list_1105@46:4>@48:0>:int)
      
      P[<f_make_list_1655@44:2>](<cons_make_list_1105@46:0>:int,<cons_make_list_1105@46:2>:int),
      (<cons_make_list_1105@46:0> = <cons_make_list_1105@46:1>)
      |- P[<cons_make_list_1105@46:2>](<cons_make_list_1105@46:0>:int,
                                       <cons_make_list_1105@46:1>:int,
                                       <cons_make_list_1105@46:2>:int)
      
      P[<make_list_1037@36:0>](<f_make_list_1655@44:0>:int),
      P[<<make_list_1037@39:1>@42:0>]((-1 + <f_make_list_1655@44:0>):int,<f_make_list_1655@44:2>:int),
      (<f_make_list_1655@44:0> >= 0)
      |- P[<f_make_list_1655@44:2>](<f_make_list_1655@44:0>:int,<f_make_list_1655@44:2>:int)
      
      P[<make_list_1037@39:0>](<make_list_1037@39:0>:int),
      ((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> < 0))
      |- P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,<<make_list_1037@39:1>@42:0>:int)
      
      P[<make_list_1037@36:0>]((1 + <make_list_1037@39:0>):int), ((1 + <make_list_1037@39:0>) >= 0)
      |- P[<make_list_1037@39:0>](<make_list_1037@39:0>:int)
      
      P[<main_1039@34:0>](<make_list_1037@36:0>:int)|- P[<make_list_1037@36:0>](<make_list_1037@36:0>:int)
      
      P[<f_1658@32:0>](<main_1039@34:0>:int)|- P[<main_1039@34:0>](<main_1039@34:0>:int)
      
      |- P[<f_1658@32:0>](<f_1658@32:0>:int)
    call trees:
      <main_1649@29>
        <f_1658@32>
          <main_1039@34>
            <make_list_1037@36>
              <make_list_1037@39>
              </<make_list_1037@39:1>@42>
              <f_make_list_1655@44>
                <cons_make_list_1105@46>
                </<cons_make_list_1105@46:4>@48>
              </<f_make_list_1655@44:1>@50>
            </<make_list_1037@36:1>@52>
            <f_main_1656@54>
              <is_nil_1030@56>
              </<is_nil_1030@56:2>@59>
              <f_main_1657@61>
                <nth_1032@64>
                  <fail_1662@67>
    inlined horn clauses:
      P[<fail_1662@67:0>](<fail_1662@67:0>:bool)|- bot
      
      P[<nth_1032@64:1>](<nth_1032@64:0>:int,0:int), <fail_1662@67:0> |- P[<fail_1662@67:0>](<fail_1662@67:0>:bool)
      
      P[<<make_list_1037@36:1>@52:0>](<f_main_1657@61:0>:int,<nth_1032@64:1>:int),
      ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0)) |- P[<nth_1032@64:1>](
      <nth_1032@64:0>:int,<nth_1032@64:1>:int)
      
      P[<make_list_1037@36:0>](<make_list_1037@36:0>:int),
      P[<<make_list_1037@39:1>@42:0>]((-1 + <make_list_1037@36:0>):int,(
                                      -1 + <<make_list_1037@36:1>@52:0>):int), (
      <make_list_1037@36:0> >= 0)
      |- P[<<make_list_1037@36:1>@52:0>](<make_list_1037@36:0>:int,<<make_list_1037@36:1>@52:0>:int)
      
      P[<make_list_1037@39:0>](<make_list_1037@39:0>:int),
      ((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> < 0))
      |- P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,<<make_list_1037@39:1>@42:0>:int)
      
      P[<make_list_1037@36:0>]((1 + <make_list_1037@39:0>):int), ((1 + <make_list_1037@39:0>) >= 0)
      |- P[<make_list_1037@39:0>](<make_list_1037@39:0>:int)
      
      |- P[<make_list_1037@36:0>](<make_list_1037@36:0>:int)
    begin ParamSubstInfer.infer(10727)[3]
      
    end ParamSubstInfer.infer(10727)[3] (0.034995 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(10729)[3]
      
    end RefTypeInfer.elim_coeffs(10729)[3] (0.000000 sec.)
    begin GenHcSolver.solve(10945)[3]
      Horn clauses:
        P[<fail_1662@67:0>](<fail_1662@67:0>:bool)|- bot
        
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,0:int), <fail_1662@67:0> |- P[<fail_1662@67:0>](<fail_1662@67:0>:bool)
        
        P[<<make_list_1037@36:1>@52:0>](<f_main_1657@61:0>:int,<nth_1032@64:1>:int),
        ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        |- P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int)
        
        P[<make_list_1037@36:0>](<make_list_1037@36:0>:int),
        P[<<make_list_1037@39:1>@42:0>]((-1 + <make_list_1037@36:0>):int,(
                                        -1 + <<make_list_1037@36:1>@52:0>):int), (
        <make_list_1037@36:0> >= 0)
        |- P[<<make_list_1037@36:1>@52:0>](<make_list_1037@36:0>:int,
                                           <<make_list_1037@36:1>@52:0>:int)
        
        P[<make_list_1037@39:0>](<make_list_1037@39:0>:int),
        ((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> < 0))
        |- P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,
                                           <<make_list_1037@39:1>@42:0>:int)
        
        P[<make_list_1037@36:0>]((1 + <make_list_1037@39:0>):int), ((1 + <make_list_1037@39:0>) >= 0)
        |- P[<make_list_1037@39:0>](<make_list_1037@39:0>:int)
        
        |- P[<make_list_1037@36:0>](<make_list_1037@36:0>:int)
      lower bounds:
        P[<make_list_1037@36:0>](<make_list_1037@36:0>:int) = true
        P[<make_list_1037@39:0>](<make_list_1037@39:0>:int) = ((1 + <make_list_1037@39:0>) >= 0)
        P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,<<make_list_1037@39:1>@42:0>:int) =
        ((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> = -1))
        P[<<make_list_1037@36:1>@52:0>](<make_list_1037@36:0>:int,<<make_list_1037@36:1>@52:0>:int) =
        ((<make_list_1037@36:0> = 0) && (<<make_list_1037@36:1>@52:0> = 1))
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int) = ((<nth_1032@64:1> = 1) && (<nth_1032@64:0> = 0))
        P[<fail_1662@67:0>](<fail_1662@67:0>:bool) = false
      upper bounds:
        P[<<make_list_1037@36:1>@52:0>](var144:int,var145:int) = true
        P[<<make_list_1037@39:1>@42:0>](var140:int,var141:int) = true
      begin GenHcSolver.classify_pids(13207)[4]
        output:
          [<<make_list_1037@39:1>@42:0>;<<make_list_1037@36:1>@52:0>]
      end GenHcSolver.classify_pids(13207)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(13218)[4]
        lb:(((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> = -1)) ||
            ((<make_list_1037@39:0> = 0) && (<<make_list_1037@39:1>@42:0> = 1)))
        nub:false
        lb':(((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> = -1)) ||
             ((<make_list_1037@39:0> = 0) && (<<make_list_1037@39:1>@42:0> = 1)))
        nub':false
        begin InterpProver.interpolate(13219)[5]
          begin InterpProver.interpolate_fresh(13220)[6]
            begin InterpProver.interpolate_log(13221)[7]
              input1: (((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> = -1)) ||
                       ((<make_list_1037@39:0> = 0) && (<<make_list_1037@39:1>@42:0> = 1)))
              input2: false
              begin InterpProver.interpolate_check(13222)[8]
                begin InterpProver.interpolate_simplify(13223)[9]
                  begin InterpProver.interpolate_quick(13266)[10]
                    
                  end InterpProver.interpolate_quick(13266)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(13223)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(13222)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(13221)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(13220)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(13219)[5] (0.001000 sec.)
        output:
          P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,<<make_list_1037@39:1>@42:0>:int) = true
          P[<<make_list_1037@36:1>@52:0>](<make_list_1037@39:0>:int,<<make_list_1037@39:1>@42:0>:int) = true
      end ApronInterface.convex_hull_interpolate(13218)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1662@67:0>](<fail_1662@67:0>:bool)|- bot
        
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,0:int), <fail_1662@67:0> |- P[<fail_1662@67:0>](<fail_1662@67:0>:bool)
        
         ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        |- P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int)
        
        P[<make_list_1037@36:0>]((1 + <make_list_1037@39:0>):int), ((1 + <make_list_1037@39:0>) >= 0)
        |- P[<make_list_1037@39:0>](<make_list_1037@39:0>:int)
        
        |- P[<make_list_1037@36:0>](<make_list_1037@36:0>:int)
      lower bounds:
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int) = ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        P[<make_list_1037@36:0>](<make_list_1037@36:0>:int) = true
        P[<fail_1662@67:0>](<fail_1662@67:0>:bool) = false
        P[<make_list_1037@39:0>](<make_list_1037@39:0>:int) = ((1 + <make_list_1037@39:0>) >= 0)
      upper bounds:
        P[<make_list_1037@39:0>](var147:int) = true
        P[<make_list_1037@36:0>](var146:int) = true
      begin GenHcSolver.classify_pids(15349)[4]
        output:
          [<make_list_1037@36:0>;<make_list_1037@39:0>]
      end GenHcSolver.classify_pids(15349)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(15360)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(15361)[5]
          begin InterpProver.interpolate_fresh(15362)[6]
            begin InterpProver.interpolate_log(15363)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(15364)[8]
                begin InterpProver.interpolate_simplify(15365)[9]
                  begin InterpProver.interpolate_quick(15378)[10]
                    
                  end InterpProver.interpolate_quick(15378)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(15365)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(15364)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(15363)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(15362)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(15361)[5] (0.000000 sec.)
        output:
          P[<make_list_1037@36:0>](<make_list_1037@36:0>:int) = true
          P[<make_list_1037@39:0>](<make_list_1037@36:0>:int) = true
      end ApronInterface.convex_hull_interpolate(15360)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1662@67:0>](<fail_1662@67:0>:bool)|- bot
        
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,0:int), <fail_1662@67:0> |- P[<fail_1662@67:0>](<fail_1662@67:0>:bool)
        
         ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        |- P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int)
      lower bounds:
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int) = ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        P[<fail_1662@67:0>](<fail_1662@67:0>:bool) = false
      upper bounds:
        P[<fail_1662@67:0>](var149:bool) = true
      begin GenHcSolver.classify_pids(16427)[4]
        output:
          [<fail_1662@67:0>]
      end GenHcSolver.classify_pids(16427)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(16430)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(16431)[5]
          begin InterpProver.interpolate_fresh(16432)[6]
            begin InterpProver.interpolate_log(16433)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(16434)[8]
                begin InterpProver.interpolate_simplify(16435)[9]
                  begin InterpProver.interpolate_quick(16448)[10]
                    
                  end InterpProver.interpolate_quick(16448)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(16452)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(16452)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(16435)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(16434)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(16433)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(16432)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(16431)[5] (0.000000 sec.)
        output:
          P[<fail_1662@67:0>](<fail_1662@67:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(16430)[4] (0.000000 sec.)
      Horn clauses:
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,0:int)|- bot
        
         ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        |- P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int)
      lower bounds:
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int) = ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
      upper bounds:
        P[<nth_1032@64:1>](var150:int,var151:int) = (var151 <> 0)
      begin GenHcSolver.classify_pids(17050)[4]
        output:
          [<nth_1032@64:1>]
      end GenHcSolver.classify_pids(17050)[4] (0.000000 sec.)
      lb:((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
      nub:(not (<nth_1032@64:1> <> 0))
      begin ApronInterface.convex_hull_interpolate(17053)[4]
        lb:((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        nub:(not (<nth_1032@64:1> <> 0))
        lb':((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        nub':(not (<nth_1032@64:1> <> 0))
        begin InterpProver.interpolate(17054)[5]
          begin InterpProver.interpolate_fresh(17055)[6]
            begin InterpProver.interpolate_log(17056)[7]
              input1: ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
              input2: (not (<nth_1032@64:1> <> 0))
              begin InterpProver.interpolate_check(17057)[8]
                begin InterpProver.interpolate_simplify(17058)[9]
                  begin InterpProver.interpolate_quick(17092)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(17101)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(17102)[12]
                        begin CsisatInterface.interpolate_csisat_log(17103)[13]
                          input1: not 0 = v_sep_nth_1032_sep_64_sep_1
                          input2: 0 = v_sep_nth_1032_sep_64_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(17104)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(17104)[14] (0.000000 sec.)
                          output: not 0 = v_sep_nth_1032_sep_64_sep_1
                          
                        end CsisatInterface.interpolate_csisat_log(17103)[13] (0.000000 sec.)
                        after simplification: not 0 = v_sep_nth_1032_sep_64_sep_1
                        after dnf conversion: ((not 0 = v_sep_nth_1032_sep_64_sep_1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(17102)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(17101)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(17092)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(17058)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(17057)[8] (0.001000 sec.)
              output: (0 <> <nth_1032@64:1>)
            end InterpProver.interpolate_log(17056)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(17055)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(17054)[5] (0.001000 sec.)
        output:
          P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int) = (0 <> <nth_1032@64:1>)
      end ApronInterface.convex_hull_interpolate(17053)[4] (0.001000 sec.)
      begin HcSolver.check_validity(17235)[4]
        input:
          P[<fail_1662@67:0>](<fail_1662@67:0>:bool)|- bot
          
          P[<nth_1032@64:1>](<nth_1032@64:0>:int,0:int), <fail_1662@67:0> |- P[<fail_1662@67:0>](<fail_1662@67:0>:bool)
          
          P[<<make_list_1037@36:1>@52:0>](<f_main_1657@61:0>:int,<nth_1032@64:1>:int),
          ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
          |- P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int)
          
          P[<make_list_1037@36:0>](<make_list_1037@36:0>:int),
          P[<<make_list_1037@39:1>@42:0>]((-1 + <make_list_1037@36:0>):int,(
                                          -1 + <<make_list_1037@36:1>@52:0>):int), (
          <make_list_1037@36:0> >= 0)
          |- P[<<make_list_1037@36:1>@52:0>](<make_list_1037@36:0>:int,
                                             <<make_list_1037@36:1>@52:0>:int)
          
          P[<make_list_1037@39:0>](<make_list_1037@39:0>:int),
          ((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> < 0))
          |- P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,
                                             <<make_list_1037@39:1>@42:0>:int)
          
          P[<make_list_1037@36:0>]((1 + <make_list_1037@39:0>):int), (
          (1 + <make_list_1037@39:0>) >= 0) |- P[<make_list_1037@39:0>](
          <make_list_1037@39:0>:int)
          
          |- P[<make_list_1037@36:0>](<make_list_1037@36:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(17235)[4] (0.002000 sec.)
      solution:
        P[<fail_1662@67:0>](<fail_1662@67:0>:bool) = false
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int) = (0 <> <nth_1032@64:1>)
        P[<<make_list_1037@36:1>@52:0>](<make_list_1037@39:0>:int,<<make_list_1037@39:1>@42:0>:int) = true
        P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,<<make_list_1037@39:1>@42:0>:int) = true
        P[<make_list_1037@39:0>](<make_list_1037@36:0>:int) = true
        P[<make_list_1037@36:0>](<make_list_1037@36:0>:int) = true
    end GenHcSolver.solve(10945)[3] (0.028996 sec.)
    begin GenHcSolver.solve(17609)[3]
      Horn clauses:
        P[<fail_1662@67:0>](<fail_1662@67:0>:bool)|- bot
        
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,0:int), <fail_1662@67:0> |- P[<fail_1662@67:0>](<fail_1662@67:0>:bool)
        
        P[<<make_list_1037@36:1>@52:0>](<f_main_1657@61:0>:int,<nth_1032@64:1>:int),
        ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        |- P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int)
        
        P[<make_list_1037@36:0>](<make_list_1037@36:0>:int),
        P[<<make_list_1037@39:1>@42:0>]((-1 + <make_list_1037@36:0>):int,(
                                        -1 + <<make_list_1037@36:1>@52:0>):int), (
        <make_list_1037@36:0> >= 0)
        |- P[<<make_list_1037@36:1>@52:0>](<make_list_1037@36:0>:int,
                                           <<make_list_1037@36:1>@52:0>:int)
        
        P[<make_list_1037@39:0>](<make_list_1037@39:0>:int),
        ((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> < 0))
        |- P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,
                                           <<make_list_1037@39:1>@42:0>:int)
        
        P[<make_list_1037@36:0>]((1 + <make_list_1037@39:0>):int), ((1 + <make_list_1037@39:0>) >= 0)
        |- P[<make_list_1037@39:0>](<make_list_1037@39:0>:int)
        
        |- P[<make_list_1037@36:0>](<make_list_1037@36:0>:int)
      lower bounds:
        P[<make_list_1037@36:0>](<make_list_1037@36:0>:int) = true
        P[<make_list_1037@39:0>](<make_list_1037@39:0>:int) = ((1 + <make_list_1037@39:0>) >= 0)
        P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,<<make_list_1037@39:1>@42:0>:int) =
        ((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> = -1))
        P[<<make_list_1037@36:1>@52:0>](<make_list_1037@36:0>:int,<<make_list_1037@36:1>@52:0>:int) =
        ((<make_list_1037@36:0> = 0) && (<<make_list_1037@36:1>@52:0> = 1))
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int) = ((<nth_1032@64:1> = 1) && (<nth_1032@64:0> = 0))
        P[<fail_1662@67:0>](<fail_1662@67:0>:bool) = false
      upper bounds:
        P[<<make_list_1037@36:1>@52:0>](var158:int,var159:int) = true
        P[<<make_list_1037@39:1>@42:0>](var154:int,var155:int) = true
      begin GenHcSolver.classify_pids(19871)[4]
        output:
          [<<make_list_1037@39:1>@42:0>;<<make_list_1037@36:1>@52:0>]
      end GenHcSolver.classify_pids(19871)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(19882)[4]
        lb:(((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> = -1)) ||
            ((<make_list_1037@39:0> = 0) && (<<make_list_1037@39:1>@42:0> = 1)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(19900)[5]
          ts: (((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> = -1)) ||
               ((<make_list_1037@39:0> = 0) && (<<make_list_1037@39:1>@42:0> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(19900)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(19911)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(19911)[5] (0.000000 sec.)
        lb':((((-1 + <<make_list_1037@39:1>@42:0>) + (-1 * <make_list_1037@39:0>)) = 0) &&
             (((-1 * <make_list_1037@39:0>) >= 0) && ((1 + <make_list_1037@39:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(19914)[5]
          begin InterpProver.interpolate_fresh(19915)[6]
            begin InterpProver.interpolate_log(19916)[7]
              input1: ((((-1 + <<make_list_1037@39:1>@42:0>) + (-1 * <make_list_1037@39:0>)) = 0) &&
                       (((-1 * <make_list_1037@39:0>) >= 0) && ((1 + <make_list_1037@39:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(19917)[8]
                begin InterpProver.interpolate_simplify(19918)[9]
                  begin InterpProver.interpolate_quick(20024)[10]
                    
                  end InterpProver.interpolate_quick(20024)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(19918)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(19917)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(19916)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(19915)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(19914)[5] (0.001000 sec.)
        output:
          P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,<<make_list_1037@39:1>@42:0>:int) = true
          P[<<make_list_1037@36:1>@52:0>](<make_list_1037@39:0>:int,<<make_list_1037@39:1>@42:0>:int) = true
      end ApronInterface.convex_hull_interpolate(19882)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1662@67:0>](<fail_1662@67:0>:bool)|- bot
        
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,0:int), <fail_1662@67:0> |- P[<fail_1662@67:0>](<fail_1662@67:0>:bool)
        
         ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        |- P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int)
        
        P[<make_list_1037@36:0>]((1 + <make_list_1037@39:0>):int), ((1 + <make_list_1037@39:0>) >= 0)
        |- P[<make_list_1037@39:0>](<make_list_1037@39:0>:int)
        
        |- P[<make_list_1037@36:0>](<make_list_1037@36:0>:int)
      lower bounds:
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int) = ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        P[<make_list_1037@36:0>](<make_list_1037@36:0>:int) = true
        P[<fail_1662@67:0>](<fail_1662@67:0>:bool) = false
        P[<make_list_1037@39:0>](<make_list_1037@39:0>:int) = ((1 + <make_list_1037@39:0>) >= 0)
      upper bounds:
        P[<make_list_1037@39:0>](var161:int) = true
        P[<make_list_1037@36:0>](var160:int) = true
      begin GenHcSolver.classify_pids(22109)[4]
        output:
          [<make_list_1037@36:0>;<make_list_1037@39:0>]
      end GenHcSolver.classify_pids(22109)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(22120)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(22123)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(22123)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(22128)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(22128)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(22131)[5]
          begin InterpProver.interpolate_fresh(22132)[6]
            begin InterpProver.interpolate_log(22133)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(22134)[8]
                begin InterpProver.interpolate_simplify(22135)[9]
                  begin InterpProver.interpolate_quick(22149)[10]
                    
                  end InterpProver.interpolate_quick(22149)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(22135)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(22134)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(22133)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(22132)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(22131)[5] (0.000000 sec.)
        output:
          P[<make_list_1037@36:0>](<make_list_1037@36:0>:int) = true
          P[<make_list_1037@39:0>](<make_list_1037@36:0>:int) = true
      end ApronInterface.convex_hull_interpolate(22120)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1662@67:0>](<fail_1662@67:0>:bool)|- bot
        
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,0:int), <fail_1662@67:0> |- P[<fail_1662@67:0>](<fail_1662@67:0>:bool)
        
         ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        |- P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int)
      lower bounds:
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int) = ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        P[<fail_1662@67:0>](<fail_1662@67:0>:bool) = false
      upper bounds:
        P[<fail_1662@67:0>](var163:bool) = true
      begin GenHcSolver.classify_pids(23200)[4]
        output:
          [<fail_1662@67:0>]
      end GenHcSolver.classify_pids(23200)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(23203)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(23206)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(23206)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(23211)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(23211)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(23214)[5]
          begin InterpProver.interpolate_fresh(23215)[6]
            begin InterpProver.interpolate_log(23216)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(23217)[8]
                begin InterpProver.interpolate_simplify(23218)[9]
                  begin InterpProver.interpolate_quick(23233)[10]
                    
                  end InterpProver.interpolate_quick(23233)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(23237)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(23237)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(23218)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(23217)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(23216)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(23215)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(23214)[5] (0.001000 sec.)
        output:
          P[<fail_1662@67:0>](<fail_1662@67:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(23203)[4] (0.001000 sec.)
      Horn clauses:
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,0:int)|- bot
        
         ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        |- P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int)
      lower bounds:
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int) = ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
      upper bounds:
        P[<nth_1032@64:1>](var164:int,var165:int) = (var165 <> 0)
      begin GenHcSolver.classify_pids(23842)[4]
        output:
          [<nth_1032@64:1>]
      end GenHcSolver.classify_pids(23842)[4] (0.000000 sec.)
      lb:((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
      nub:(not (<nth_1032@64:1> <> 0))
      begin ApronInterface.convex_hull_interpolate(23845)[4]
        lb:((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
        nub:(not (<nth_1032@64:1> <> 0))
        begin ExtFormula.Formula.case_analysis_boolean(23855)[5]
          ts: ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
          
        end ExtFormula.Formula.case_analysis_boolean(23855)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(23863)[5]
          ts: (<nth_1032@64:1> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(23863)[5] (0.000000 sec.)
        lb':(<nth_1032@64:0> = 0)
        nub':(<nth_1032@64:1> = 0)
        begin InterpProver.interpolate(23867)[5]
          begin InterpProver.interpolate_fresh(23868)[6]
            begin InterpProver.interpolate_log(23869)[7]
              input1: (<nth_1032@64:0> = 0)
              input2: (<nth_1032@64:1> = 0)
              begin InterpProver.interpolate_check(23870)[8]
                begin InterpProver.interpolate_simplify(23871)[9]
                  begin InterpProver.interpolate_quick(23896)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(23899)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(23900)[12]
                        begin CsisatInterface.interpolate_csisat_log(23901)[13]
                          input1: true
                          input2: true
                          begin CsisatInterface.interpolate_csisat_raw(23902)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(23902)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(23901)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(23900)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(23899)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(23896)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(23871)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(23870)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(23869)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(23868)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(23867)[5] (0.001000 sec.)
        begin InterpProver.interpolate(23911)[5]
          begin InterpProver.interpolate_fresh(23912)[6]
            begin InterpProver.interpolate_log(23913)[7]
              input1: (<nth_1032@64:0> = 0)
              input2: (not (<nth_1032@64:1> <> 0))
              begin InterpProver.interpolate_check(23914)[8]
                begin InterpProver.interpolate_simplify(23915)[9]
                  begin InterpProver.interpolate_quick(23940)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(23943)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(23944)[12]
                        begin CsisatInterface.interpolate_csisat_log(23945)[13]
                          input1: true
                          input2: true
                          begin CsisatInterface.interpolate_csisat_raw(23946)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(23946)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(23945)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(23944)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(23943)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(23940)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(23915)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(23914)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(23913)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(23912)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(23911)[5] (0.001000 sec.)
        begin InterpProver.interpolate(23956)[5]
          begin InterpProver.interpolate_fresh(23957)[6]
            begin InterpProver.interpolate_log(23958)[7]
              input1: ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
              input2: (not (<nth_1032@64:1> <> 0))
              begin InterpProver.interpolate_check(23959)[8]
                begin InterpProver.interpolate_simplify(23960)[9]
                  begin InterpProver.interpolate_quick(23994)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(24003)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(24004)[12]
                        begin CsisatInterface.interpolate_csisat_log(24005)[13]
                          input1: not 0 = v_sep_nth_1032_sep_64_sep_1
                          input2: 0 = v_sep_nth_1032_sep_64_sep_1
                          begin CsisatInterface.interpolate_csisat_raw(24006)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(24006)[14] (0.000000 sec.)
                          output: not 0 = v_sep_nth_1032_sep_64_sep_1
                          
                        end CsisatInterface.interpolate_csisat_log(24005)[13] (0.000000 sec.)
                        after simplification: not 0 = v_sep_nth_1032_sep_64_sep_1
                        after dnf conversion: ((not 0 = v_sep_nth_1032_sep_64_sep_1))
                        
                      end CsisatInterface.interpolate_csisat_post_process(24004)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(24003)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(23994)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(23960)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(23959)[8] (0.001000 sec.)
              output: (0 <> <nth_1032@64:1>)
            end InterpProver.interpolate_log(23958)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(23957)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(23956)[5] (0.001000 sec.)
        output:
          P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int) = (0 <> <nth_1032@64:1>)
      end ApronInterface.convex_hull_interpolate(23845)[4] (0.003000 sec.)
      begin HcSolver.check_validity(24137)[4]
        input:
          P[<fail_1662@67:0>](<fail_1662@67:0>:bool)|- bot
          
          P[<nth_1032@64:1>](<nth_1032@64:0>:int,0:int), <fail_1662@67:0> |- P[<fail_1662@67:0>](<fail_1662@67:0>:bool)
          
          P[<<make_list_1037@36:1>@52:0>](<f_main_1657@61:0>:int,<nth_1032@64:1>:int),
          ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
          |- P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int)
          
          P[<make_list_1037@36:0>](<make_list_1037@36:0>:int),
          P[<<make_list_1037@39:1>@42:0>]((-1 + <make_list_1037@36:0>):int,(
                                          -1 + <<make_list_1037@36:1>@52:0>):int), (
          <make_list_1037@36:0> >= 0)
          |- P[<<make_list_1037@36:1>@52:0>](<make_list_1037@36:0>:int,
                                             <<make_list_1037@36:1>@52:0>:int)
          
          P[<make_list_1037@39:0>](<make_list_1037@39:0>:int),
          ((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> < 0))
          |- P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,
                                             <<make_list_1037@39:1>@42:0>:int)
          
          P[<make_list_1037@36:0>]((1 + <make_list_1037@39:0>):int), (
          (1 + <make_list_1037@39:0>) >= 0) |- P[<make_list_1037@39:0>](
          <make_list_1037@39:0>:int)
          
          |- P[<make_list_1037@36:0>](<make_list_1037@36:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(24137)[4] (0.001000 sec.)
      solution:
        P[<fail_1662@67:0>](<fail_1662@67:0>:bool) = false
        P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int) = (0 <> <nth_1032@64:1>)
        P[<<make_list_1037@36:1>@52:0>](<make_list_1037@39:0>:int,<<make_list_1037@39:1>@42:0>:int) = true
        P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,<<make_list_1037@39:1>@42:0>:int) = true
        P[<make_list_1037@39:0>](<make_list_1037@36:0>:int) = true
        P[<make_list_1037@36:0>](<make_list_1037@36:0>:int) = true
    end GenHcSolver.solve(17609)[3] (0.024996 sec.)
    begin YhornInterface.solve(24511)[3]
      begin HcSolver.solve_ub(24512)[4]
        encoded:
          P[<fail_1662@67:0>](<fail_1662@67:0>:int)|- bot
          
          P[<nth_1032@64:1>](<nth_1032@64:0>:int,0:int), (<fail_1662@67:0> = 1)
          |- P[<fail_1662@67:0>](<fail_1662@67:0>:int)
          
          P[<<make_list_1037@36:1>@52:0>](<f_main_1657@61:0>:int,<nth_1032@64:1>:int),
          ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
          |- P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int)
          
          P[<make_list_1037@36:0>](<make_list_1037@36:0>:int),
          P[<<make_list_1037@39:1>@42:0>]((-1 + <make_list_1037@36:0>):int,(
                                          -1 + <<make_list_1037@36:1>@52:0>):int), (
          <make_list_1037@36:0> >= 0)
          |- P[<<make_list_1037@36:1>@52:0>](<make_list_1037@36:0>:int,
                                             <<make_list_1037@36:1>@52:0>:int)
          
          P[<make_list_1037@39:0>](<make_list_1037@39:0>:int),
          ((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> < 0))
          |- P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,
                                             <<make_list_1037@39:1>@42:0>:int)
          
          P[<make_list_1037@36:0>]((1 + <make_list_1037@39:0>):int), (
          (1 + <make_list_1037@39:0>) >= 0) |- P[<make_list_1037@39:0>](
          <make_list_1037@39:0>:int)
          
          |- P[<make_list_1037@36:0>](<make_list_1037@36:0>:int)
        input to Yhorn:
          P[<fail_1662@67:0>](<fail_1662@67:0>:int)|- bot
          
          P[<nth_1032@64:1>](<nth_1032@64:0>:int,var166:int), ((var166 = 0) && (<fail_1662@67:0> = 1))
          |- P[<fail_1662@67:0>](<fail_1662@67:0>:int)
          
          P[<<make_list_1037@36:1>@52:0>](<f_main_1657@61:0>:int,<nth_1032@64:1>:int),
          ((<nth_1032@64:1> <> 0) && (<nth_1032@64:0> = 0))
          |- P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int)
          
          P[<make_list_1037@36:0>](<make_list_1037@36:0>:int),
          P[<<make_list_1037@39:1>@42:0>](var167:int,var168:int),
          (((1 + var168) = <<make_list_1037@36:1>@52:0>) &&
           (((1 + var167) = <make_list_1037@36:0>) && (<make_list_1037@36:0> >= 0)))
          |- P[<<make_list_1037@36:1>@52:0>](<make_list_1037@36:0>:int,
                                             <<make_list_1037@36:1>@52:0>:int)
          
          P[<make_list_1037@39:0>](<make_list_1037@39:0>:int),
          ((<make_list_1037@39:0> < 0) && (<<make_list_1037@39:1>@42:0> = 0))
          |- P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,
                                             <<make_list_1037@39:1>@42:0>:int)
          
          P[<make_list_1037@36:0>](var169:int),
          ((var169 = (1 + <make_list_1037@39:0>)) && ((1 + <make_list_1037@39:0>) >= 0))
          |- P[<make_list_1037@39:0>](<make_list_1037@39:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1662_sep_67_sep_0($155)) -> 1=0.
(($155-1=0) & ($156=0)) & (v_sep_nth_1032_sep_64_sep_1($157,$156)) -> v_sep_fail_1662_sep_67_sep_0($155).
(($157=0) & ($158<>0)) & (v_sep_make_list_1037_sep_36_sep_1_sep_52_sep_0($159,$158)) -> v_sep_nth_1032_sep_64_sep_1($157,$158).
(($160>=0) & (-$160+$161+1=0) & ($162-$163+1=0)) & (v_sep_make_list_1037_sep_39_sep_1_sep_42_sep_0($161,$162)) & (v_sep_make_list_1037_sep_36_sep_0($160)) -> v_sep_make_list_1037_sep_36_sep_1_sep_52_sep_0($160,$163).
(($164=0) & ($165<0)) & (v_sep_make_list_1037_sep_39_sep_0($165)) -> v_sep_make_list_1037_sep_39_sep_1_sep_42_sep_0($165,$164).
(($165+1>=0) & (-$165+$166-1=0)) & (v_sep_make_list_1037_sep_36_sep_0($166)) -> v_sep_make_list_1037_sep_39_sep_0($165).
0=0 -> v_sep_make_list_1037_sep_36_sep_0($160).


v_sep_fail_1662_sep_67_sep_0: X
v_sep_make_list_1037_sep_36_sep_0: X
v_sep_make_list_1037_sep_36_sep_1_sep_52_sep_0: X
v_sep_make_list_1037_sep_39_sep_0: X
v_sep_make_list_1037_sep_39_sep_1_sep_42_sep_0: X
v_sep_nth_1032_sep_64_sep_1: X
.........
v_sep_fail_1662_sep_67_sep_0: X
v_sep_make_list_1037_sep_36_sep_0: X
v_sep_make_list_1037_sep_36_sep_1_sep_52_sep_0: X
v_sep_make_list_1037_sep_39_sep_0: X
v_sep_make_list_1037_sep_39_sep_1_sep_42_sep_0: X
v_sep_nth_1032_sep_64_sep_1: X
...
v_sep_fail_1662_sep_67_sep_0: X
v_sep_make_list_1037_sep_36_sep_0: X
v_sep_make_list_1037_sep_36_sep_1_sep_52_sep_0: X
v_sep_make_list_1037_sep_39_sep_0: X
v_sep_make_list_1037_sep_39_sep_1_sep_42_sep_0: X
v_sep_nth_1032_sep_64_sep_1: X
.....
v_sep_fail_1662_sep_67_sep_0: X
v_sep_make_list_1037_sep_36_sep_0: X
v_sep_make_list_1037_sep_36_sep_1_sep_52_sep_0: X
v_sep_make_list_1037_sep_39_sep_0: X
v_sep_make_list_1037_sep_39_sep_1_sep_42_sep_0: X
v_sep_nth_1032_sep_64_sep_1: X
.......
v_sep_fail_1662_sep_67_sep_0: X
v_sep_make_list_1037_sep_36_sep_0: X
v_sep_make_list_1037_sep_36_sep_1_sep_52_sep_0: X
v_sep_make_list_1037_sep_39_sep_0: X
v_sep_make_list_1037_sep_39_sep_1_sep_42_sep_0: X
v_sep_nth_1032_sep_64_sep_1: X
........
v_sep_fail_1662_sep_67_sep_0: X
v_sep_make_list_1037_sep_36_sep_0: X
v_sep_make_list_1037_sep_36_sep_1_sep_52_sep_0: X
v_sep_make_list_1037_sep_39_sep_0: X
v_sep_make_list_1037_sep_39_sep_1_sep_42_sep_0: X
v_sep_nth_1032_sep_64_sep_1: X
.........(0=0) & (v_sep_fail_1662_sep_67_sep_0($155)) -> 1=0.
(($155-1=0) & ($156=0)) & (v_sep_nth_1032_sep_64_sep_1($157,$156)) -> v_sep_fail_1662_sep_67_sep_0($155).
(($157=0) & ($158<>0)) & (v_sep_make_list_1037_sep_36_sep_1_sep_52_sep_0($159,$158)) -> v_sep_nth_1032_sep_64_sep_1($157,$158).
(($160>=0) & (-$160+$161+1=0) & ($162-$163+1=0)) & (v_sep_make_list_1037_sep_39_sep_1_sep_42_sep_0($161,$162)) & (v_sep_make_list_1037_sep_36_sep_0($160)) -> v_sep_make_list_1037_sep_36_sep_1_sep_52_sep_0($160,$163).
(($164=0) & ($165<0)) & (v_sep_make_list_1037_sep_39_sep_0($165)) -> v_sep_make_list_1037_sep_39_sep_1_sep_42_sep_0($165,$164).
(($165+1>=0) & (-$165+$166-1=0)) & (v_sep_make_list_1037_sep_36_sep_0($166)) -> v_sep_make_list_1037_sep_39_sep_0($165).
0=0 -> v_sep_make_list_1037_sep_36_sep_0($160).

          |- P[<make_list_1037@36:0>](<make_list_1037@36:0>:int)
        solution:
          P[<fail_1662@67:0>]($167:bool) = false
          P[<make_list_1037@36:0>]($185:int) = true
          P[<<make_list_1037@36:1>@52:0>]($175:int,$177:int) = (1 <= $177)
          P[<make_list_1037@39:0>]($188:int) = true
          P[<<make_list_1037@39:1>@42:0>]($180:int,$182:int) = (0 <= $182)
          P[<nth_1032@64:1>]($170:int,$172:int) = (1 <= $172)
        
      end HcSolver.solve_ub(24512)[4] (0.026996 sec.)
      begin HcSolver.check_validity(24785)[4]
        input:
          P[<fail_1662@67:0>](<fail_1662@67:0>:bool)|- bot
          
          P[<nth_1032@64:1>](<nth_1032@64:0>:int,0:int), <fail_1662@67:0> |- P[<fail_1662@67:0>](<fail_1662@67:0>:bool)
          
          P[<<make_list_1037@36:1>@52:0>](<f_main_1657@61:0>:int,<nth_1032@64:1>:int),
          ((<nth_1032@64:0> = 0) && (<nth_1032@64:1> <> 0))
          |- P[<nth_1032@64:1>](<nth_1032@64:0>:int,<nth_1032@64:1>:int)
          
          P[<make_list_1037@36:0>](<make_list_1037@36:0>:int),
          P[<<make_list_1037@39:1>@42:0>]((-1 + <make_list_1037@36:0>):int,(
                                          -1 + <<make_list_1037@36:1>@52:0>):int), (
          <make_list_1037@36:0> >= 0)
          |- P[<<make_list_1037@36:1>@52:0>](<make_list_1037@36:0>:int,
                                             <<make_list_1037@36:1>@52:0>:int)
          
          P[<make_list_1037@39:0>](<make_list_1037@39:0>:int),
          ((<<make_list_1037@39:1>@42:0> = 0) && (<make_list_1037@39:0> < 0))
          |- P[<<make_list_1037@39:1>@42:0>](<make_list_1037@39:0>:int,
                                             <<make_list_1037@39:1>@42:0>:int)
          
          P[<make_list_1037@36:0>]((1 + <make_list_1037@39:0>):int), (
          (1 + <make_list_1037@39:0>) >= 0) |- P[<make_list_1037@39:0>](
          <make_list_1037@39:0>:int)
          
          |- P[<make_list_1037@36:0>](<make_list_1037@36:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(24785)[4] (0.001999 sec.)
      solution:
        P[<fail_1662@67:0>]($167:bool) = false
        P[<make_list_1037@36:0>]($185:int) = true
        P[<<make_list_1037@36:1>@52:0>]($175:int,$177:int) = (1 <= $177)
        P[<make_list_1037@39:0>]($188:int) = true
        P[<<make_list_1037@39:1>@42:0>]($180:int,$182:int) = (0 <= $182)
        P[<nth_1032@64:1>]($170:int,$172:int) = (1 <= $172)
    end YhornInterface.solve(24511)[3] (0.028995 sec.)
    
  end RefTypeInfer.infer_etrs(8690)[2] (0.132980 sec.)
  refinement types:
    main_1649: X
    f_1658: v1:int -> X
    main_1039: v1:int -> (v2:int -> X) -> X
    make_list_1037: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    make_list_1037: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_make_list_1655: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1105: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_1656: v1:int -> (v2:int -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    is_nil_1030: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1657: v1:int -> v2:int -> (v3:int -> X) -> (v5:int -> (v6:int -> X) -> X) -> v9:bool -> X
    nth_1032: v1:int -> v2:{v2:int | (0 <> v2)} -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    fail_1662: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    br_nth_1660: var229:bool ->
                 var228:int -> var227:int -> (var226:int -> (var225:int -> X) -> X) -> (var222:int -> X) -> X
    f_1659: var232:int -> var231:int -> X
    f_cons_make_list_1654: var243:int ->
                           var242:int ->
                           var241:int -> (var240:int -> (var239:int -> X) -> X) -> var236:int -> (var235:int -> X) -> X
    f_make_list_1653: var248:int -> var247:int -> (var246:int -> X) -> X
    f_nth_1650: var252:int -> var251:int -> var250:unit -> X
    f_nth_1651: var262:int ->
                var261:int -> (var260:int -> X) -> (var258:int -> (var257:int -> X) -> X) -> var254:int -> X
    f_nth_1652: var273:int ->
                var272:int ->
                var271:int -> (var270:int -> (var269:int -> X) -> X) -> var266:int -> (var265:int -> X) -> X
  abstraction types:
    main_1649: X
    f_1658: v1:int -> X
    main_1039: v1:int -> (v2:int -> X) -> X
    make_list_1037: var274:int -> (var275:int -> (var276:int -> (var277:int -> X) -> X) -> X) -> X
    f_make_list_1655: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1105: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_1656: v1:int -> (v2:int -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    is_nil_1030: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1657: v1:int -> v2:int -> (v3:int -> X) -> (v5:int -> (v6:int -> X) -> X) -> v9:bool -> X
    nth_1032: v1:int -> v2:int[v2 -> (0 <> v2)] -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    fail_1662: v1:bool -> (v2:unit -> X) -> X
    br_nth_1660: var229:bool ->
                 var228:int -> var227:int -> (var226:int -> (var225:int -> X) -> X) -> (var222:int -> X) -> X
    f_1659: var232:int -> var231:int -> X
    f_cons_make_list_1654: var243:int ->
                           var242:int ->
                           var241:int -> (var240:int -> (var239:int -> X) -> X) -> var236:int -> (var235:int -> X) -> X
    f_make_list_1653: var248:int -> var247:int -> (var246:int -> X) -> X
    f_nth_1650: var252:int -> var251:int -> var250:unit -> X
    f_nth_1651: var262:int ->
                var261:int -> (var260:int -> X) -> (var258:int -> (var257:int -> X) -> X) -> var254:int -> X
    f_nth_1652: var273:int ->
                var272:int ->
                var271:int -> (var270:int -> (var269:int -> X) -> X) -> var266:int -> (var265:int -> X) -> X
  
end AbsTypeInfer.refine(8689)[1] (0.137979 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 0; 0; 1; 1; 0

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1649
  main_1649 -> (rand_int f_1658)
  br_nth_1660 b_1661 n_1033 xs1_1034 xs2_1034 k_nth_1209 when b_1661 ->
      (xs2_1034 0 (f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034))
  br_nth_1660 b_1661 n_1033 xs1_1034 xs2_1034 k_nth_1209 when (not b_1661) -> _|_
  cons_make_list_1105 n_1038 x_1103 xs1_1104 xs2_1104 k_make_list_cons_make_list_1400 ->
      (k_make_list_cons_make_list_1400 (xs1_1104 + 1) (f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104))
  f_1658 x_1585 -> (main_1039 x_1585 (f_1659 x_1585))
  f_1659 x_1585 x_1582 -> end
  f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104 i_1102 k_make_list_cons_make_list_1415 when (
      i_1102 = 0) -> (k_make_list_cons_make_list_1415 x_1103)
  f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104 i_1102 k_make_list_cons_make_list_1415 when (
      not (i_1102 = 0)) -> (xs2_1104 (i_1102 - 1) k_make_list_cons_make_list_1415)
  f_main_1656 n_1040 k_main_1499 x1_1505 x2_1505 ->
      (is_nil_1030 x1_1505 x2_1505 (f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505))
  f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505 b_1579 when b_1579 -> (k_main_1499 0)
  f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505 b_1579 when (not b_1579) -> (nth_1032 0 x1_1505 x2_1505 k_main_1499)
  f_make_list_1653 n_1038 x_1109 k_make_list_1353 -> _|_
  f_make_list_1655 n_1038 k_make_list_1341 x1_1478 x2_1478 ->
      (cons_make_list_1105 n_1038 n_1038 x1_1478 x2_1478 k_make_list_1341)
  f_nth_1650 n_1033 xs1_1034 x_1215 -> _|_
  f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034 x_1268 when (n_1033 = 0) -> (k_nth_1209 x_1268)
  f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034 x_1268 when (not (n_1033 = 0)) ->
      (nth_1032 (n_1033 - 1) (xs1_1034 - 1) (f_nth_1652 n_1033 x_1268 xs1_1034 xs2_1034) k_nth_1209)
  f_nth_1652 n_1033 x_1268 xs1_1034 xs2_1034 x_1076 k_nth_xs'_1254 -> (xs2_1034 (x_1076 + 1) k_nth_xs'_1254)
  fail_1662 b k -> {fail} => (k ())
  is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1173 when (xs1_1031 = 0) -> (k_is_nil_1173 true)
  is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1173 when (not (xs1_1031 = 0)) -> (k_is_nil_1173 false)
  main_1039 n_1040 k_main_1499 -> (make_list_1037 n_1040 (f_main_1656 n_1040 k_main_1499))
  make_list_1037 n_1038 k_make_list_1341 when (n_1038 < 0) -> (k_make_list_1341 0 (f_make_list_1653 n_1038))
  make_list_1037 n_1038 k_make_list_1341 when (not (n_1038 < 0)) ->
      (make_list_1037 (n_1038 - 1) (f_make_list_1655 n_1038 k_make_list_1341))
  nth_1032 n_1033 xs1_1034 xs2_1034 k_nth_1209 when (xs1_1034 = 0) -> (fail_1662 true (f_nth_1650 n_1033 xs1_1034))
  nth_1032 n_1033 xs1_1034 xs2_1034 k_nth_1209 when (not (xs1_1034 = 0)) ->
      (br_nth_1660 (1 <= xs1_1034) n_1033 xs1_1034 xs2_1034 k_nth_1209)
Types:
  main_1649 : X
  fail_1662 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1037 : (int -> (x_3:int[x_3 = 0] -> (int -> (int -> X) -> X) -> X) -> X)
  nth_1032 : (int -> x_2:int[(not (x_2 = 0))] -> (int -> (int -> X) -> X) -> (int -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1649 ... --> 
  f_1658 ... --> 
  main_1039 ... --> 
  make_list_1037 [2/2] ... --> 
  make_list_1037 [1/2] ... --> 
  f_make_list_1655 ... --> 
  cons_make_list_1105 ... --> 
  f_main_1656 ... --> 
  is_nil_1030 [2/2] ... --> 
  f_main_1657 [2/2] ... --> 
  nth_1032 [2/2] ... --> 
  br_nth_1660 [1/2] ... --> 
  f_cons_make_list_1654 [1/2] ... --> 
  f_nth_1651 [2/2] ... --> 
  nth_1032 [1/2] ... --> 
  fail_1662 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 1; 0; 0; 0; 0; 1; 1; 1; 0; 0; 1; 0; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(25643)[1]
  program:
    main_1649  | true = ((Random.int 0) f_1658)
    br_nth_1660 b_1661 n_1033 xs1_1034 xs2_1034 k_nth_1209 | b_1661 = (
    xs2_1034 0
             (f_nth_1651 n_1033
                         xs1_1034
                         k_nth_1209
                         xs2_1034))
    br_nth_1660 b_1661 n_1033 xs1_1034 xs2_1034 k_nth_1209 | (not b_1661) = bot
    cons_make_list_1105 n_1038 x_1103 xs1_1104 xs2_1104 k_make_list_cons_make_list_1400 | true = (
    k_make_list_cons_make_list_1400 (xs1_1104 + 1)
                                    (f_cons_make_list_1654 n_1038
                                                           x_1103
                                                           xs1_1104
                                                           xs2_1104))
    f_1658 x_1585 | true = (main_1039 x_1585
                                      (f_1659 x_1585))
    f_1659 x_1585 x_1582 | true = end
    f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104 i_1102 k_make_list_cons_make_list_1415 | (
    i_1102 = 0) = (k_make_list_cons_make_list_1415 x_1103)
    f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104 i_1102 k_make_list_cons_make_list_1415 | (
    not (i_1102 = 0)) = (xs2_1104 (i_1102 - 1)
                                  k_make_list_cons_make_list_1415)
    f_main_1656 n_1040 k_main_1499 x1_1505 x2_1505 | true = (is_nil_1030
                                                               x1_1505
                                                               x2_1505
                                                               (f_main_1657 n_1040
                                                                    x1_1505
                                                                    k_main_1499
                                                                    x2_1505))
    f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505 b_1579 | b_1579 = (
    k_main_1499 0)
    f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505 b_1579 | (not b_1579) = (
    nth_1032 0
             x1_1505
             x2_1505
             k_main_1499)
    f_make_list_1653 n_1038 x_1109 k_make_list_1353 | true = bot
    f_make_list_1655 n_1038 k_make_list_1341 x1_1478 x2_1478 | true = (
    cons_make_list_1105 n_1038
                        n_1038
                        x1_1478
                        x2_1478
                        k_make_list_1341)
    f_nth_1650 n_1033 xs1_1034 x_1215 | true = bot
    f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034 x_1268 | (n_1033 = 0) = (
    k_nth_1209 x_1268)
    f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034 x_1268 | (not (n_1033 = 0)) = (
    nth_1032 (n_1033 - 1)
             (xs1_1034 - 1)
             (f_nth_1652 n_1033
                         x_1268
                         xs1_1034
                         xs2_1034)
             k_nth_1209)
    f_nth_1652 n_1033 x_1268 xs1_1034 xs2_1034 x_1076 k_nth_xs'_1254 | true = (
    xs2_1034 (x_1076 + 1)
             k_nth_xs'_1254)
    fail_1662 b k | true = (fail ())
    is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1173 | (xs1_1031 = 0) = (k_is_nil_1173 true)
    is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1173 | (not (xs1_1031 = 0)) = (
    k_is_nil_1173 false)
    main_1039 n_1040 k_main_1499 | true = (make_list_1037 n_1040
                                                          (f_main_1656 n_1040
                                                                    k_main_1499))
    make_list_1037 n_1038 k_make_list_1341 | (n_1038 < 0) = (k_make_list_1341 0
                                                                    (f_make_list_1653 n_1038))
    make_list_1037 n_1038 k_make_list_1341 | (not (n_1038 < 0)) = (make_list_1037
                                                                    (
                                                                    n_1038 - 1)
                                                                    (
                                                                    f_make_list_1655 n_1038
                                                                    k_make_list_1341))
    nth_1032 n_1033 xs1_1034 xs2_1034 k_nth_1209 | (xs1_1034 = 0) = (
    fail_1662 true
              (f_nth_1650 n_1033
                          xs1_1034))
    nth_1032 n_1033 xs1_1034 xs2_1034 k_nth_1209 | (not (xs1_1034 = 0)) = (
    br_nth_1660 (1 <= xs1_1034)
                n_1033
                xs1_1034
                xs2_1034
                k_nth_1209)
    main_1649:X
    br_nth_1660:bool -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
    cons_make_list_1105:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> (int -> (int -> X) -> X) -> X) -> X
    f_1658:int -> X
    f_1659:int -> int -> X
    f_cons_make_list_1654:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    f_main_1656:int -> (int -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_main_1657:int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> bool -> X
    f_make_list_1653:int -> int -> (int -> X) -> X
    f_make_list_1655:int -> (int -> (int -> (int -> X) -> X) -> X) -> int -> (int -> (int -> X) -> X) -> X
    f_nth_1650:int -> int -> unit -> X
    f_nth_1651:int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_nth_1652:int -> int -> int -> (int -> (int -> X) -> X) -> int -> (int -> X) -> X
    fail_1662:bool -> (unit -> X) -> X
    is_nil_1030:int -> (int -> (int -> X) -> X) -> (bool -> X) -> X
    main_1039:int -> (int -> X) -> X
    make_list_1037:int -> (int -> (int -> (int -> X) -> X) -> X) -> X
    nth_1032:int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> X
  inlined functions: br_nth_1660,cons_make_list_1105,f_1658,f_1659,f_cons_make_list_1654,f_main_1656,f_main_1657,f_make_list_1653,f_make_list_1655,f_nth_1650,f_nth_1651,f_nth_1652,is_nil_1030,main_1039
  counterexample: 0:0:0:1:0:0:0:0:1:1:1:0:0:1:0:0
  error traces:
    [true.nop(<f_1658@73:0> = var282)
     [true.(<main_1039@75:0> = <f_1658@73:0>)
      [true.(<make_list_1037@77:0> = <main_1039@75:0>)
       [(not (<make_list_1037@77:0> < 0)).(<make_list_1037@80:0> = (<make_list_1037@77:0> - 1))
        [(<make_list_1037@80:0> < 0).(<<make_list_1037@80:1>@83:0> = 0)
         [true.
          ((<f_make_list_1655@85:0> = <make_list_1037@77:0>) &&
           (<f_make_list_1655@85:2> = <<make_list_1037@80:1>@83:0>))
          [true.
           ((<cons_make_list_1105@87:0> = <f_make_list_1655@85:0>) &&
            ((<cons_make_list_1105@87:1> = <f_make_list_1655@85:0>) &&
             (<cons_make_list_1105@87:2> = <f_make_list_1655@85:2>)))
           [true.(<<cons_make_list_1105@87:4>@89:0> = (<cons_make_list_1105@87:2> + 1))
            [true.(<<f_make_list_1655@85:1>@91:0> = <<cons_make_list_1105@87:4>@89:0>)
             [true.(<<make_list_1037@77:1>@93:0> = <<f_make_list_1655@85:1>@91:0>)
              [true.((<f_main_1656@95:0> = <main_1039@75:0>) && (<f_main_1656@95:2> = <<make_list_1037@77:1>@93:0>))
               [true.(<is_nil_1030@97:0> = <f_main_1656@95:2>)
                [(not (<is_nil_1030@97:0> = 0)).(<<is_nil_1030@97:2>@100:0> = false)
                 [true.
                  ((<f_main_1657@102:0> = <f_main_1656@95:0>) &&
                   ((<f_main_1657@102:1> = <f_main_1656@95:2>) && (<f_main_1657@102:4> = <<is_nil_1030@97:2>@100:0>)))
                  [(not <f_main_1657@102:4>).((<nth_1032@105:0> = 0) && (<nth_1032@105:1> = <f_main_1657@102:1>))
                   [(not (<nth_1032@105:1> = 0)).
                    ((<br_nth_1660@108:0> = (1 <= <nth_1032@105:1>)) &&
                     ((<br_nth_1660@108:1> = <nth_1032@105:0>) && (<br_nth_1660@108:2> = <nth_1032@105:1>)))
                    [<br_nth_1660@108:0>.(<<br_nth_1660@108:3>@111:0> = 0)
                     [true.(<<nth_1032@105:2>@113:0> = <<br_nth_1660@108:3>@111:0>)
                      [true.(<<f_main_1657@102:3>@115:0> = <<nth_1032@105:2>@113:0>)
                       [true.(<<f_main_1656@95:3>@117:0> = <<f_main_1657@102:3>@115:0>)
                        [true.(<<<make_list_1037@77:1>@93:1>@119:0> = <<f_main_1656@95:3>@117:0>)
                         [true.(<<<f_make_list_1655@85:1>@91:1>@121:0> = <<<make_list_1037@77:1>@93:1>@119:0>)
                          [true.(<<<cons_make_list_1105@87:4>@89:1>@123:0> = <<<f_make_list_1655@85:1>@91:1>@121:0>)
                           [true.
                            ((<f_cons_make_list_1654@125:0> = <cons_make_list_1105@87:0>) &&
                             ((<f_cons_make_list_1654@125:1> = <cons_make_list_1105@87:1>) &&
                              ((<f_cons_make_list_1654@125:2> = <cons_make_list_1105@87:2>) &&
                               (<f_cons_make_list_1654@125:4> = <<<cons_make_list_1105@87:4>@89:1>@123:0>))))
                            [(<f_cons_make_list_1654@125:4> = 0).
                             (<<f_cons_make_list_1654@125:5>@128:0> = <f_cons_make_list_1654@125:1>)
                             [true.
                              (<<<<cons_make_list_1105@87:4>@89:1>@123:1>@130:0> =
                               <<f_cons_make_list_1654@125:5>@128:0>)
                              [true.
                               (<<<<f_make_list_1655@85:1>@91:1>@121:1>@132:0> =
                                <<<<cons_make_list_1105@87:4>@89:1>@123:1>@130:0>)
                               [true.
                                (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> =
                                 <<<<f_make_list_1655@85:1>@91:1>@121:1>@132:0>)
                                [true.
                                 (<<<f_main_1656@95:3>@117:1>@136:0> = <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>)
                                 [true.(<<<f_main_1657@102:3>@115:1>@138:0> = <<<f_main_1656@95:3>@117:1>@136:0>)
                                  [true.(<<<nth_1032@105:2>@113:1>@140:0> = <<<f_main_1657@102:3>@115:1>@138:0>)
                                   [true.(<<<br_nth_1660@108:3>@111:1>@142:0> = <<<nth_1032@105:2>@113:1>@140:0>)
                                    [true.
                                     ((<f_nth_1651@144:0> = <br_nth_1660@108:1>) &&
                                      ((<f_nth_1651@144:1> = <br_nth_1660@108:2>) &&
                                       (<f_nth_1651@144:4> = <<<br_nth_1660@108:3>@111:1>@142:0>)))
                                     [(not (<f_nth_1651@144:0> = 0)).
                                      ((<nth_1032@147:0> = (<f_nth_1651@144:0> - 1)) &&
                                       (<nth_1032@147:1> = (<f_nth_1651@144:1> - 1)))
                                      [(<nth_1032@147:1> = 0).(<fail_1662@150:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(25644)[2]
    horn clauses:
      P[<fail_1662@150:0>](<fail_1662@150:0>:bool)|- bot
      
      P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int), <fail_1662@150:0>
      |- P[<fail_1662@150:0>](<fail_1662@150:0>:bool)
      
      P[<f_nth_1651@144:4>]((1 + <nth_1032@147:0>):int,(1 + <nth_1032@147:1>):int,<f_nth_1651@144:4>:int),
      ((1 + <nth_1032@147:0>) <> 0) |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,
                                                           <nth_1032@147:1>:int)
      
      P[<br_nth_1660@108:2>](true:bool,<f_nth_1651@144:0>:int,<f_nth_1651@144:1>:int),
      P[<<<br_nth_1660@108:3>@111:1>@142:0>](true:bool,<f_nth_1651@144:0>:int,<f_nth_1651@144:1>:int,0:int,<f_nth_1651@144:4>:int)|- P[<f_nth_1651@144:4>](
      <f_nth_1651@144:0>:int,<f_nth_1651@144:1>:int,<f_nth_1651@144:4>:int)
      
      P[<nth_1032@105:1>](<br_nth_1660@108:1>:int,<br_nth_1660@108:2>:int),
      P[<<<nth_1032@105:2>@113:1>@140:0>](<br_nth_1660@108:1>:int,<br_nth_1660@108:2>:int,<<br_nth_1660@108:3>@111:0>:int,<<<br_nth_1660@108:3>@111:1>@142:0>:int),
      P[<br_nth_1660@108:2>](<br_nth_1660@108:0>:bool,<br_nth_1660@108:1>:int,<br_nth_1660@108:2>:int),
      ((<br_nth_1660@108:2> <> 0) && (<br_nth_1660@108:0> = (1 <= <br_nth_1660@108:2>)))
      |- P[<<<br_nth_1660@108:3>@111:1>@142:0>](<br_nth_1660@108:0>:bool,
                                                <br_nth_1660@108:1>:int,
                                                <br_nth_1660@108:2>:int,
                                                <<br_nth_1660@108:3>@111:0>:int,
                                                <<<br_nth_1660@108:3>@111:1>@142:0>:int)
      
      P[<f_main_1657@102:4>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,false:bool),
      P[<<<f_main_1657@102:3>@115:1>@138:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
      P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int), (
      <nth_1032@105:0> = 0)
      |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                             <<nth_1032@105:2>@113:0>:int,
                                             <<<nth_1032@105:2>@113:1>@140:0>:int)
      
      P[<f_main_1656@95:2>](<f_main_1657@102:0>:int,<f_main_1657@102:1>:int),
      P[<<<f_main_1656@95:3>@117:1>@136:0>](<f_main_1657@102:0>:int,<f_main_1657@102:1>:int,<<f_main_1657@102:3>@115:0>:int,<<<f_main_1657@102:3>@115:1>@138:0>:int)|- P[<<<f_main_1657@102:3>@115:1>@138:0>](
      <f_main_1657@102:0>:int,<f_main_1657@102:1>:int,<<f_main_1657@102:3>@115:0>:int,
      <<<f_main_1657@102:3>@115:1>@138:0>:int)
      
      P[<main_1039@75:0>](<f_main_1656@95:0>:int),
      P[<<make_list_1037@77:1>@93:0>](<f_main_1656@95:0>:int,<f_main_1656@95:2>:int),
      P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1656@95:0>:int,<f_main_1656@95:2>:int,<<f_main_1656@95:3>@117:0>:int,<<<f_main_1656@95:3>@117:1>@136:0>:int),
      P[<f_main_1656@95:2>](<f_main_1656@95:0>:int,<f_main_1656@95:2>:int)|- P[<<<f_main_1656@95:3>@117:1>@136:0>](
      <f_main_1656@95:0>:int,<f_main_1656@95:2>:int,<<f_main_1656@95:3>@117:0>:int,
      <<<f_main_1656@95:3>@117:1>@136:0>:int)
      
      P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
      P[<<f_make_list_1655@85:1>@91:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
      P[<<<<f_make_list_1655@85:1>@91:1>@121:1>@132:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int),
      P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
      (<make_list_1037@77:0> >= 0)
      |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                         <<make_list_1037@77:1>@93:0>:int,
                                                         <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                         <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
      
      P[<f_make_list_1655@85:2>](<f_make_list_1655@85:0>:int,<cons_make_list_1105@87:2>:int),
      P[<<cons_make_list_1105@87:4>@89:0>](<f_make_list_1655@85:0>:int,<f_make_list_1655@85:0>:int,<cons_make_list_1105@87:2>:int,<<f_make_list_1655@85:1>@91:0>:int),
      P[<<<<cons_make_list_1105@87:4>@89:1>@123:1>@130:0>](<f_make_list_1655@85:0>:int,<f_make_list_1655@85:0>:int,<cons_make_list_1105@87:2>:int,<<f_make_list_1655@85:1>@91:0>:int,<<<f_make_list_1655@85:1>@91:1>@121:0>:int,<<<<f_make_list_1655@85:1>@91:1>@121:1>@132:0>:int),
      P[<<f_make_list_1655@85:1>@91:0>](<f_make_list_1655@85:0>:int,<<f_make_list_1655@85:1>@91:0>:int)|- P[<<<<f_make_list_1655@85:1>@91:1>@121:1>@132:0>](
      <f_make_list_1655@85:0>:int,<<f_make_list_1655@85:1>@91:0>:int,
      <<<f_make_list_1655@85:1>@91:1>@121:0>:int,<<<<f_make_list_1655@85:1>@91:1>@121:1>@132:0>:int)
      
      P[<cons_make_list_1105@87:2>](<cons_make_list_1105@87:0>:int,<cons_make_list_1105@87:1>:int,<cons_make_list_1105@87:2>:int),
      P[<<f_cons_make_list_1654@125:5>@128:0>](<cons_make_list_1105@87:0>:int,<cons_make_list_1105@87:1>:int,<cons_make_list_1105@87:2>:int,<<<cons_make_list_1105@87:4>@89:1>@123:0>:int,<<<<cons_make_list_1105@87:4>@89:1>@123:1>@130:0>:int),
      P[<<cons_make_list_1105@87:4>@89:0>](<cons_make_list_1105@87:0>:int,<cons_make_list_1105@87:1>:int,<cons_make_list_1105@87:2>:int,<<cons_make_list_1105@87:4>@89:0>:int),
      (<<cons_make_list_1105@87:4>@89:0> = (1 + <cons_make_list_1105@87:2>))
      |- P[<<<<cons_make_list_1105@87:4>@89:1>@123:1>@130:0>](<cons_make_list_1105@87:0>:int,
                                                              <cons_make_list_1105@87:1>:int,
                                                              <cons_make_list_1105@87:2>:int,
                                                              <<cons_make_list_1105@87:4>@89:0>:int,
                                                              <<<cons_make_list_1105@87:4>@89:1>@123:0>:int,
                                                              <<<<cons_make_list_1105@87:4>@89:1>@123:1>@130:0>:int)
      
      P[<f_cons_make_list_1654@125:4>](<f_cons_make_list_1654@125:0>:int,<f_cons_make_list_1654@125:1>:int,<f_cons_make_list_1654@125:2>:int,<f_cons_make_list_1654@125:4>:int),
      ((<f_cons_make_list_1654@125:4> = 0) && (<<f_cons_make_list_1654@125:5>@128:0> = <f_cons_make_list_1654@125:1>))
      |- P[<<f_cons_make_list_1654@125:5>@128:0>](<f_cons_make_list_1654@125:0>:int,
                                                  <f_cons_make_list_1654@125:1>:int,
                                                  <f_cons_make_list_1654@125:2>:int,
                                                  <f_cons_make_list_1654@125:4>:int,
                                                  <<f_cons_make_list_1654@125:5>@128:0>:int)
      
      P[<cons_make_list_1105@87:2>](<f_cons_make_list_1654@125:0>:int,<f_cons_make_list_1654@125:1>:int,<f_cons_make_list_1654@125:2>:int),
      P[<<<cons_make_list_1105@87:4>@89:1>@123:0>](<f_cons_make_list_1654@125:0>:int,<f_cons_make_list_1654@125:1>:int,<f_cons_make_list_1654@125:2>:int,(
                                                   1 + <f_cons_make_list_1654@125:2>):int,<f_cons_make_list_1654@125:4>:int)|- P[<f_cons_make_list_1654@125:4>](
      <f_cons_make_list_1654@125:0>:int,<f_cons_make_list_1654@125:1>:int,
      <f_cons_make_list_1654@125:2>:int,<f_cons_make_list_1654@125:4>:int)
      
      P[<f_make_list_1655@85:2>](<cons_make_list_1105@87:0>:int,<cons_make_list_1105@87:2>:int),
      P[<<<f_make_list_1655@85:1>@91:1>@121:0>](<cons_make_list_1105@87:0>:int,<<cons_make_list_1105@87:4>@89:0>:int,<<<cons_make_list_1105@87:4>@89:1>@123:0>:int),
      P[<cons_make_list_1105@87:2>](<cons_make_list_1105@87:0>:int,<cons_make_list_1105@87:1>:int,<cons_make_list_1105@87:2>:int),
      (<cons_make_list_1105@87:0> = <cons_make_list_1105@87:1>)
      |- P[<<<cons_make_list_1105@87:4>@89:1>@123:0>](<cons_make_list_1105@87:0>:int,
                                                      <cons_make_list_1105@87:1>:int,
                                                      <cons_make_list_1105@87:2>:int,
                                                      <<cons_make_list_1105@87:4>@89:0>:int,
                                                      <<<cons_make_list_1105@87:4>@89:1>@123:0>:int)
      
      P[<make_list_1037@77:0>](<f_make_list_1655@85:0>:int),
      P[<<<make_list_1037@77:1>@93:1>@119:0>](<f_make_list_1655@85:0>:int,<<f_make_list_1655@85:1>@91:0>:int,<<<f_make_list_1655@85:1>@91:1>@121:0>:int),
      (<f_make_list_1655@85:0> >= 0)
      |- P[<<<f_make_list_1655@85:1>@91:1>@121:0>](<f_make_list_1655@85:0>:int,
                                                   <<f_make_list_1655@85:1>@91:0>:int,
                                                   <<<f_make_list_1655@85:1>@91:1>@121:0>:int)
      
      P[<main_1039@75:0>](<make_list_1037@77:0>:int),
      P[<<f_main_1656@95:3>@117:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
      P[<make_list_1037@77:0>](<make_list_1037@77:0>:int)|- P[<<<make_list_1037@77:1>@93:1>@119:0>](
      <make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int)
      
      P[<f_main_1656@95:2>](<f_main_1656@95:0>:int,<f_main_1656@95:2>:int),
      P[<<f_main_1657@102:3>@115:0>](<f_main_1656@95:0>:int,<f_main_1656@95:2>:int,<<f_main_1656@95:3>@117:0>:int)|- P[<<f_main_1656@95:3>@117:0>](
      <f_main_1656@95:0>:int,<f_main_1656@95:2>:int,<<f_main_1656@95:3>@117:0>:int)
      
      P[<f_main_1657@102:4>](<f_main_1657@102:0>:int,<f_main_1657@102:1>:int,false:bool),
      P[<<nth_1032@105:2>@113:0>](0:int,<f_main_1657@102:1>:int,<<f_main_1657@102:3>@115:0>:int)|- P[<<f_main_1657@102:3>@115:0>](
      <f_main_1657@102:0>:int,<f_main_1657@102:1>:int,<<f_main_1657@102:3>@115:0>:int)
      
      P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
      P[<<br_nth_1660@108:3>@111:0>]((1 <= <nth_1032@105:1>):bool,<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int),
      (<nth_1032@105:1> <> 0)
      |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                     <<nth_1032@105:2>@113:0>:int)
      
      P[<br_nth_1660@108:2>](<br_nth_1660@108:0>:bool,<br_nth_1660@108:1>:int,<br_nth_1660@108:2>:int),
      ((<<br_nth_1660@108:3>@111:0> = 0) && <br_nth_1660@108:0>)
      |- P[<<br_nth_1660@108:3>@111:0>](<br_nth_1660@108:0>:bool,<br_nth_1660@108:1>:int,
                                        <br_nth_1660@108:2>:int,<<br_nth_1660@108:3>@111:0>:int)
      
      P[<nth_1032@105:1>](<br_nth_1660@108:1>:int,<br_nth_1660@108:2>:int),
      ((<br_nth_1660@108:2> <> 0) && (<br_nth_1660@108:0> = (1 <= <br_nth_1660@108:2>)))
      |- P[<br_nth_1660@108:2>](<br_nth_1660@108:0>:bool,<br_nth_1660@108:1>:int,
                                <br_nth_1660@108:2>:int)
      
      P[<f_main_1657@102:4>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,false:bool), (
      <nth_1032@105:0> = 0) |- P[<nth_1032@105:1>](<nth_1032@105:0>:int,
                                                   <nth_1032@105:1>:int)
      
      P[<f_main_1656@95:2>](<f_main_1657@102:0>:int,<f_main_1657@102:1>:int),
      P[<<is_nil_1030@97:2>@100:0>](<f_main_1657@102:1>:int,<f_main_1657@102:4>:bool)|- P[<f_main_1657@102:4>](
      <f_main_1657@102:0>:int,<f_main_1657@102:1>:int,<f_main_1657@102:4>:bool)
      
      P[<is_nil_1030@97:0>](<is_nil_1030@97:0>:int), ((<is_nil_1030@97:0> <> 0) && (not <<is_nil_1030@97:2>@100:0>))
      |- P[<<is_nil_1030@97:2>@100:0>](<is_nil_1030@97:0>:int,<<is_nil_1030@97:2>@100:0>:bool)
      
      P[<f_main_1656@95:2>](<f_main_1656@95:0>:int,<is_nil_1030@97:0>:int)|- P[<is_nil_1030@97:0>](
      <is_nil_1030@97:0>:int)
      
      P[<main_1039@75:0>](<f_main_1656@95:0>:int),
      P[<<make_list_1037@77:1>@93:0>](<f_main_1656@95:0>:int,<f_main_1656@95:2>:int)|- P[<f_main_1656@95:2>](
      <f_main_1656@95:0>:int,<f_main_1656@95:2>:int)
      
      P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
      P[<<f_make_list_1655@85:1>@91:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
      (<make_list_1037@77:0> >= 0)
      |- P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int)
      
      P[<f_make_list_1655@85:2>](<f_make_list_1655@85:0>:int,<cons_make_list_1105@87:2>:int),
      P[<<cons_make_list_1105@87:4>@89:0>](<f_make_list_1655@85:0>:int,<f_make_list_1655@85:0>:int,<cons_make_list_1105@87:2>:int,<<f_make_list_1655@85:1>@91:0>:int)|- P[<<f_make_list_1655@85:1>@91:0>](
      <f_make_list_1655@85:0>:int,<<f_make_list_1655@85:1>@91:0>:int)
      
      P[<cons_make_list_1105@87:2>](<cons_make_list_1105@87:0>:int,<cons_make_list_1105@87:1>:int,<cons_make_list_1105@87:2>:int),
      (<<cons_make_list_1105@87:4>@89:0> = (1 + <cons_make_list_1105@87:2>))
      |- P[<<cons_make_list_1105@87:4>@89:0>](<cons_make_list_1105@87:0>:int,
                                              <cons_make_list_1105@87:1>:int,
                                              <cons_make_list_1105@87:2>:int,
                                              <<cons_make_list_1105@87:4>@89:0>:int)
      
      P[<f_make_list_1655@85:2>](<cons_make_list_1105@87:0>:int,<cons_make_list_1105@87:2>:int),
      (<cons_make_list_1105@87:0> = <cons_make_list_1105@87:1>)
      |- P[<cons_make_list_1105@87:2>](<cons_make_list_1105@87:0>:int,
                                       <cons_make_list_1105@87:1>:int,
                                       <cons_make_list_1105@87:2>:int)
      
      P[<make_list_1037@77:0>](<f_make_list_1655@85:0>:int),
      P[<<make_list_1037@80:1>@83:0>]((-1 + <f_make_list_1655@85:0>):int,<f_make_list_1655@85:2>:int),
      (<f_make_list_1655@85:0> >= 0)
      |- P[<f_make_list_1655@85:2>](<f_make_list_1655@85:0>:int,<f_make_list_1655@85:2>:int)
      
      P[<make_list_1037@80:0>](<make_list_1037@80:0>:int),
      ((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> < 0))
      |- P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,<<make_list_1037@80:1>@83:0>:int)
      
      P[<make_list_1037@77:0>]((1 + <make_list_1037@80:0>):int), ((1 + <make_list_1037@80:0>) >= 0)
      |- P[<make_list_1037@80:0>](<make_list_1037@80:0>:int)
      
      P[<main_1039@75:0>](<make_list_1037@77:0>:int)|- P[<make_list_1037@77:0>](<make_list_1037@77:0>:int)
      
      P[<f_1658@73:0>](<main_1039@75:0>:int)|- P[<main_1039@75:0>](<main_1039@75:0>:int)
      
      |- P[<f_1658@73:0>](<f_1658@73:0>:int)
    call trees:
      <main_1649@70>
        <f_1658@73>
          <main_1039@75>
            <make_list_1037@77>
              <make_list_1037@80>
              </<make_list_1037@80:1>@83>
              <f_make_list_1655@85>
                <cons_make_list_1105@87>
                </<cons_make_list_1105@87:4>@89>
              </<f_make_list_1655@85:1>@91>
            </<make_list_1037@77:1>@93>
            <f_main_1656@95>
              <is_nil_1030@97>
              </<is_nil_1030@97:2>@100>
              <f_main_1657@102>
                <nth_1032@105>
                  <br_nth_1660@108>
                  </<br_nth_1660@108:3>@111>
                </<nth_1032@105:2>@113>
              </<f_main_1657@102:3>@115>
            </<f_main_1656@95:3>@117>
            <<<make_list_1037@77:1>@93:1>@119>
              <<<f_make_list_1655@85:1>@91:1>@121>
                <<<cons_make_list_1105@87:4>@89:1>@123>
                  <f_cons_make_list_1654@125>
                  </<f_cons_make_list_1654@125:5>@128>
                </<<<cons_make_list_1105@87:4>@89:1>@123:1>@130>
              </<<<f_make_list_1655@85:1>@91:1>@121:1>@132>
            </<<<make_list_1037@77:1>@93:1>@119:1>@134>
            <<<f_main_1656@95:3>@117:1>@136>
              <<<f_main_1657@102:3>@115:1>@138>
                <<<nth_1032@105:2>@113:1>@140>
                  <<<br_nth_1660@108:3>@111:1>@142>
                    <f_nth_1651@144>
                      <nth_1032@147>
                        <fail_1662@150>
    inlined horn clauses:
      P[<fail_1662@150:0>](<fail_1662@150:0>:bool)|- bot
      
      P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int), <fail_1662@150:0>
      |- P[<fail_1662@150:0>](<fail_1662@150:0>:bool)
      
      P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                          1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
      P[<nth_1032@105:1>]((1 + <nth_1032@147:0>):int,(1 + <nth_1032@147:1>):int),
      (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
      |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
      
      P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
      P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
      P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
      ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
      |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                             <<nth_1032@105:2>@113:0>:int,
                                             <<<nth_1032@105:2>@113:1>@140:0>:int)
      
      P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
      P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
      P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                      -1 + <<make_list_1037@77:1>@93:0>):int),
      P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
      ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
       ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
      |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                         <<make_list_1037@77:1>@93:0>:int,
                                                         <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                         <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
      
      P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
      P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
      P[<make_list_1037@77:0>](<make_list_1037@77:0>:int), (<<make_list_1037@77:1>@93:0> <> 0)
      |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                 <<make_list_1037@77:1>@93:0>:int,
                                                 <<<make_list_1037@77:1>@93:1>@119:0>:int)
      
      P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
      ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
      |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                     <<nth_1032@105:2>@113:0>:int)
      
      P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
      ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
      |- P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int)
      
      P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
      P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                      -1 + <<make_list_1037@77:1>@93:0>):int), (
      <make_list_1037@77:0> >= 0)
      |- P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int)
      
      P[<make_list_1037@80:0>](<make_list_1037@80:0>:int),
      ((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> < 0))
      |- P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,<<make_list_1037@80:1>@83:0>:int)
      
      P[<make_list_1037@77:0>]((1 + <make_list_1037@80:0>):int), ((1 + <make_list_1037@80:0>) >= 0)
      |- P[<make_list_1037@80:0>](<make_list_1037@80:0>:int)
      
      |- P[<make_list_1037@77:0>](<make_list_1037@77:0>:int)
    begin ParamSubstInfer.infer(31301)[3]
      
    end ParamSubstInfer.infer(31301)[3] (0.050992 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(31303)[3]
      
    end RefTypeInfer.elim_coeffs(31303)[3] (0.002000 sec.)
    begin GenHcSolver.solve(31840)[3]
      Horn clauses:
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool)|- bot
        
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int), <fail_1662@150:0>
        |- P[<fail_1662@150:0>](<fail_1662@150:0>:bool)
        
        P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                            1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
        P[<nth_1032@105:1>]((1 + <nth_1032@147:0>):int,(1 + <nth_1032@147:1>):int),
        (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
        |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
        
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
        P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
        P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
        ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
        |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                               <<nth_1032@105:2>@113:0>:int,
                                               <<<nth_1032@105:2>@113:1>@140:0>:int)
        
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
        P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                        -1 + <<make_list_1037@77:1>@93:0>):int),
        P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
        |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                           <<make_list_1037@77:1>@93:0>:int,
                                                           <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                           <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
        
        P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int), (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
        P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
        
        P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
        ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
        |- P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int)
        
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
        P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                        -1 + <<make_list_1037@77:1>@93:0>):int), (
        <make_list_1037@77:0> >= 0)
        |- P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,
                                           <<make_list_1037@77:1>@93:0>:int)
        
        P[<make_list_1037@80:0>](<make_list_1037@80:0>:int),
        ((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> < 0))
        |- P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,
                                           <<make_list_1037@80:1>@83:0>:int)
        
        P[<make_list_1037@77:0>]((1 + <make_list_1037@80:0>):int), ((1 + <make_list_1037@80:0>) >= 0)
        |- P[<make_list_1037@80:0>](<make_list_1037@80:0>:int)
        
        |- P[<make_list_1037@77:0>](<make_list_1037@77:0>:int)
      lower bounds:
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int) = true
        P[<make_list_1037@80:0>](<make_list_1037@80:0>:int) = ((1 + <make_list_1037@80:0>) >= 0)
        P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,<<make_list_1037@80:1>@83:0>:int) =
        ((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> = -1))
        P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int) =
        ((<make_list_1037@77:0> = 0) && (<<make_list_1037@77:1>@93:0> = 1))
        P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int) =
        ((<nth_1032@105:1> = 1) && (<nth_1032@105:0> = 0))
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> = 1) && (<nth_1032@105:0> = 0)))
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<make_list_1037@77:1>@93:0> = 1) &&
         ((<make_list_1037@77:0> = 0) && (<<<make_list_1037@77:1>@93:1>@119:0> = 0)))
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        ((<make_list_1037@77:0> = 0) &&
         ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
          ((<<make_list_1037@77:1>@93:0> = 1) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
        ((<nth_1032@105:1> = 1) &&
         ((<<nth_1032@105:2>@113:0> = 0) && ((<<<nth_1032@105:2>@113:1>@140:0> = 0) && (<nth_1032@105:0> = 0))))
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int) = false
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool) = false
      upper bounds:
        P[<nth_1032@147:1>](var290:int,var291:int) = true
        P[<nth_1032@105:1>](var285:int,var286:int) = true
      begin GenHcSolver.classify_pids(37854)[4]
        output:
          [<nth_1032@105:1>;<nth_1032@147:1>]
      end GenHcSolver.classify_pids(37854)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(37865)[4]
        lb:((<nth_1032@105:1> = 1) && (<nth_1032@105:0> = 0))
        nub:false
        lb':((<nth_1032@105:1> = 1) && (<nth_1032@105:0> = 0))
        nub':false
        begin InterpProver.interpolate(37866)[5]
          begin InterpProver.interpolate_fresh(37867)[6]
            begin InterpProver.interpolate_log(37868)[7]
              input1: ((<nth_1032@105:1> = 1) && (<nth_1032@105:0> = 0))
              input2: false
              begin InterpProver.interpolate_check(37869)[8]
                begin InterpProver.interpolate_simplify(37870)[9]
                  begin InterpProver.interpolate_quick(37901)[10]
                    
                  end InterpProver.interpolate_quick(37901)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(37870)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(37869)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(37868)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(37867)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(37866)[5] (0.000000 sec.)
        output:
          P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int) = true
          P[<nth_1032@147:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int) = true
      end ApronInterface.convex_hull_interpolate(37865)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool)|- bot
        
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int), <fail_1662@150:0>
        |- P[<fail_1662@150:0>](<fail_1662@150:0>:bool)
        
        P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                            1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
        (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
        |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
        
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
        P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
        ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
        |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                               <<nth_1032@105:2>@113:0>:int,
                                               <<<nth_1032@105:2>@113:1>@140:0>:int)
        
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
        P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                        -1 + <<make_list_1037@77:1>@93:0>):int),
        P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
        |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                           <<make_list_1037@77:1>@93:0>:int,
                                                           <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                           <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
        
        P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int), (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
        
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
        P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                        -1 + <<make_list_1037@77:1>@93:0>):int), (
        <make_list_1037@77:0> >= 0)
        |- P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,
                                           <<make_list_1037@77:1>@93:0>:int)
        
        P[<make_list_1037@80:0>](<make_list_1037@80:0>:int),
        ((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> < 0))
        |- P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,
                                           <<make_list_1037@80:1>@83:0>:int)
        
        P[<make_list_1037@77:0>]((1 + <make_list_1037@80:0>):int), ((1 + <make_list_1037@80:0>) >= 0)
        |- P[<make_list_1037@80:0>](<make_list_1037@80:0>:int)
        
        |- P[<make_list_1037@77:0>](<make_list_1037@77:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int) = true
        P[<make_list_1037@80:0>](<make_list_1037@80:0>:int) = ((1 + <make_list_1037@80:0>) >= 0)
        P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,<<make_list_1037@80:1>@83:0>:int) =
        ((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> = -1))
        P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int) =
        ((<make_list_1037@77:0> = 0) && (<<make_list_1037@77:1>@93:0> = 1))
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<make_list_1037@77:1>@93:0> = 1) &&
         ((<make_list_1037@77:0> = 0) && (<<<make_list_1037@77:1>@93:1>@119:0> = 0)))
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        ((<make_list_1037@77:0> = 0) &&
         ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
          ((<<make_list_1037@77:1>@93:0> = 1) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
        ((<nth_1032@105:0> = 0) &&
         ((<nth_1032@105:1> = 1) && ((<<nth_1032@105:2>@113:0> = 0) && (<<<nth_1032@105:2>@113:1>@140:0> = 0))))
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int) = false
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool) = false
      upper bounds:
        P[<<make_list_1037@77:1>@93:0>](var298:int,var299:int) = true
        P[<<make_list_1037@80:1>@83:0>](var294:int,var295:int) = true
      begin GenHcSolver.classify_pids(45954)[4]
        output:
          [<<make_list_1037@80:1>@83:0>;<<make_list_1037@77:1>@93:0>]
      end GenHcSolver.classify_pids(45954)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(45965)[4]
        lb:(((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> = -1)) ||
            ((<make_list_1037@80:0> = 0) && (<<make_list_1037@80:1>@83:0> = 1)))
        nub:false
        lb':(((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> = -1)) ||
             ((<make_list_1037@80:0> = 0) && (<<make_list_1037@80:1>@83:0> = 1)))
        nub':false
        begin InterpProver.interpolate(45966)[5]
          begin InterpProver.interpolate_fresh(45967)[6]
            begin InterpProver.interpolate_log(45968)[7]
              input1: (((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> = -1)) ||
                       ((<make_list_1037@80:0> = 0) && (<<make_list_1037@80:1>@83:0> = 1)))
              input2: false
              begin InterpProver.interpolate_check(45969)[8]
                begin InterpProver.interpolate_simplify(45970)[9]
                  begin InterpProver.interpolate_quick(46013)[10]
                    
                  end InterpProver.interpolate_quick(46013)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(45970)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(45969)[8] (0.001999 sec.)
              output: true
            end InterpProver.interpolate_log(45968)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(45967)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(45966)[5] (0.001999 sec.)
        output:
          P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,<<make_list_1037@80:1>@83:0>:int) = true
          P[<<make_list_1037@77:1>@93:0>](<make_list_1037@80:0>:int,<<make_list_1037@80:1>@83:0>:int) = true
      end ApronInterface.convex_hull_interpolate(45965)[4] (0.001999 sec.)
      Horn clauses:
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool)|- bot
        
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int), <fail_1662@150:0>
        |- P[<fail_1662@150:0>](<fail_1662@150:0>:bool)
        
        P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                            1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
        (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
        |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
        
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
        ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
        |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                               <<nth_1032@105:2>@113:0>:int,
                                               <<<nth_1032@105:2>@113:1>@140:0>:int)
        
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
        |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                           <<make_list_1037@77:1>@93:0>:int,
                                                           <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                           <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
        
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int), (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
        
        P[<make_list_1037@77:0>]((1 + <make_list_1037@80:0>):int), ((1 + <make_list_1037@80:0>) >= 0)
        |- P[<make_list_1037@80:0>](<make_list_1037@80:0>:int)
        
        |- P[<make_list_1037@77:0>](<make_list_1037@77:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int) = true
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
        P[<make_list_1037@80:0>](<make_list_1037@80:0>:int) = ((1 + <make_list_1037@80:0>) >= 0)
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) &&
          ((<<make_list_1037@77:1>@93:0> >= 1) &&
           (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
        ((<nth_1032@105:0> = 0) &&
         ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int) = false
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool) = false
      upper bounds:
        P[<make_list_1037@80:0>](var303:int) = true
        P[<make_list_1037@77:0>](var302:int) = true
      begin GenHcSolver.classify_pids(53193)[4]
        output:
          [<make_list_1037@77:0>;<make_list_1037@80:0>]
      end GenHcSolver.classify_pids(53193)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(53204)[4]
        lb:true
        nub:false
        lb':true
        nub':false
        begin InterpProver.interpolate(53205)[5]
          begin InterpProver.interpolate_fresh(53206)[6]
            begin InterpProver.interpolate_log(53207)[7]
              input1: true
              input2: false
              begin InterpProver.interpolate_check(53208)[8]
                begin InterpProver.interpolate_simplify(53209)[9]
                  begin InterpProver.interpolate_quick(53222)[10]
                    
                  end InterpProver.interpolate_quick(53222)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(53209)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(53208)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(53207)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(53206)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(53205)[5] (0.000000 sec.)
        output:
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int) = true
          P[<make_list_1037@80:0>](<make_list_1037@77:0>:int) = true
      end ApronInterface.convex_hull_interpolate(53204)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool)|- bot
        
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int), <fail_1662@150:0>
        |- P[<fail_1662@150:0>](<fail_1662@150:0>:bool)
        
        P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                            1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
        (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
        |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
        
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
        ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
        |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                               <<nth_1032@105:2>@113:0>:int,
                                               <<<nth_1032@105:2>@113:1>@140:0>:int)
        
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
        |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                           <<make_list_1037@77:1>@93:0>:int,
                                                           <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                           <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
        
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) &&
          ((<<make_list_1037@77:1>@93:0> >= 1) &&
           (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
        ((<nth_1032@105:0> = 0) &&
         ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int) = false
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool) = false
      upper bounds:
        P[<fail_1662@150:0>](var305:bool) = true
      begin GenHcSolver.classify_pids(58165)[4]
        output:
          [<fail_1662@150:0>]
      end GenHcSolver.classify_pids(58165)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(58168)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(58169)[5]
          begin InterpProver.interpolate_fresh(58170)[6]
            begin InterpProver.interpolate_log(58171)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(58172)[8]
                begin InterpProver.interpolate_simplify(58173)[9]
                  begin InterpProver.interpolate_quick(58186)[10]
                    
                  end InterpProver.interpolate_quick(58186)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(58190)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(58190)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(58173)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(58172)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(58171)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(58170)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(58169)[5] (0.000000 sec.)
        output:
          P[<fail_1662@150:0>](<fail_1662@150:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(58168)[4] (0.000000 sec.)
      Horn clauses:
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int)|- bot
        
        P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                            1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
        (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
        |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
        
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
        ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
        |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                               <<nth_1032@105:2>@113:0>:int,
                                               <<<nth_1032@105:2>@113:1>@140:0>:int)
        
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
        |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                           <<make_list_1037@77:1>@93:0>:int,
                                                           <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                           <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
        
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) &&
          ((<<make_list_1037@77:1>@93:0> >= 1) &&
           (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
        ((<nth_1032@105:0> = 0) &&
         ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int) = false
      upper bounds:
        P[<nth_1032@147:1>](var308:int,var309:int) = true
      begin GenHcSolver.classify_pids(61298)[4]
        output:
          [<nth_1032@147:1>]
      end GenHcSolver.classify_pids(61298)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(61301)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(61302)[5]
          begin InterpProver.interpolate_fresh(61303)[6]
            begin InterpProver.interpolate_log(61304)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(61305)[8]
                begin InterpProver.interpolate_simplify(61306)[9]
                  begin InterpProver.interpolate_quick(61319)[10]
                    
                  end InterpProver.interpolate_quick(61319)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(61323)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(61323)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(61306)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(61305)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(61304)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(61303)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(61302)[5] (0.000000 sec.)
        output:
          P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int) = false
      end ApronInterface.convex_hull_interpolate(61301)[4] (0.000000 sec.)
      Horn clauses:
        P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                            1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
        (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0)) |- bot
        
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
        ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
        |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                               <<nth_1032@105:2>@113:0>:int,
                                               <<<nth_1032@105:2>@113:1>@140:0>:int)
        
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
        |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                           <<make_list_1037@77:1>@93:0>:int,
                                                           <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                           <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
        
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) &&
          ((<<make_list_1037@77:1>@93:0> >= 1) &&
           (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
        ((<nth_1032@105:0> = 0) &&
         ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
      upper bounds:
        P[<<<nth_1032@105:2>@113:1>@140:0>](var310:int,var311:int,var312:int,var313:int) =
        ((var312 <> 0) || ((var311 < 1) || (var310 = 0)))
      begin GenHcSolver.classify_pids(64820)[4]
        output:
          [<<<nth_1032@105:2>@113:1>@140:0>]
      end GenHcSolver.classify_pids(64820)[4] (0.000000 sec.)
      lb:((<nth_1032@105:0> = 0) &&
          ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
      nub:(not ((<<nth_1032@105:2>@113:0> <> 0) || ((<nth_1032@105:1> < 1) || (<nth_1032@105:0> = 0))))
      begin ApronInterface.convex_hull_interpolate(64823)[4]
        lb:((<nth_1032@105:0> = 0) &&
            ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
        nub:(not ((<<nth_1032@105:2>@113:0> <> 0) || ((<nth_1032@105:1> < 1) || (<nth_1032@105:0> = 0))))
        lb':((<nth_1032@105:0> = 0) &&
             ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
        nub':(not ((<<nth_1032@105:2>@113:0> <> 0) || ((<nth_1032@105:1> < 1) || (<nth_1032@105:0> = 0))))
        begin InterpProver.interpolate(64824)[5]
          begin InterpProver.interpolate_fresh(64825)[6]
            begin InterpProver.interpolate_log(64826)[7]
              input1: ((<nth_1032@105:0> = 0) &&
                       ((<<nth_1032@105:2>@113:0> = 0) &&
                        ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
              input2: (not ((<<nth_1032@105:2>@113:0> <> 0) || ((<nth_1032@105:1> < 1) || (<nth_1032@105:0> = 0))))
              begin InterpProver.interpolate_check(64827)[8]
                begin InterpProver.interpolate_simplify(64828)[9]
                  begin InterpProver.interpolate_quick(64957)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(64966)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(64967)[12]
                        begin CsisatInterface.interpolate_csisat_log(64968)[13]
                          input1: (0 = v_sep_nth_1032_sep_105_sep_0 & 0 = v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0 & 0 <= v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0 & 1 <= v_sep_nth_1032_sep_105_sep_1)
                          input2: (not 0 = v_sep_nth_1032_sep_105_sep_0 & 0 = v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0 & 1 <= v_sep_nth_1032_sep_105_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(64969)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(64969)[14] (0.000000 sec.)
                          output: 0 = v_sep_nth_1032_sep_105_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(64968)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_nth_1032_sep_105_sep_0
                        after dnf conversion: ((0 = v_sep_nth_1032_sep_105_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(64967)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(64966)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(64957)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(64828)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(64827)[8] (0.000000 sec.)
              output: (0 = <nth_1032@105:0>)
            end InterpProver.interpolate_log(64826)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(64825)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(64824)[5] (0.000000 sec.)
        output:
          P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
          (0 = <nth_1032@105:0>)
      end ApronInterface.convex_hull_interpolate(64823)[4] (0.000999 sec.)
      Horn clauses:
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
        |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                           <<make_list_1037@77:1>@93:0>:int,
                                                           <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                           <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
        
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) &&
          ((<<make_list_1037@77:1>@93:0> >= 1) &&
           (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
      upper bounds:
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](var314:int,var315:int,var316:int,var317:int) = true
      begin GenHcSolver.classify_pids(67077)[4]
        output:
          [<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>]
      end GenHcSolver.classify_pids(67077)[4] (0.000000 sec.)
      lb:((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
          ((<make_list_1037@77:0> >= 0) &&
           ((<<make_list_1037@77:1>@93:0> >= 1) &&
            (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(67080)[4]
        lb:((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
            ((<make_list_1037@77:0> >= 0) &&
             ((<<make_list_1037@77:1>@93:0> >= 1) &&
              (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        nub:false
        lb':((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
             ((<make_list_1037@77:0> >= 0) &&
              ((<<make_list_1037@77:1>@93:0> >= 1) &&
               (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        nub':false
        begin InterpProver.interpolate(67081)[5]
          begin InterpProver.interpolate_fresh(67082)[6]
            begin InterpProver.interpolate_log(67083)[7]
              input1: ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
                       ((<make_list_1037@77:0> >= 0) &&
                        ((<<make_list_1037@77:1>@93:0> >= 1) &&
                         (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
              input2: false
              begin InterpProver.interpolate_check(67084)[8]
                begin InterpProver.interpolate_simplify(67085)[9]
                  begin InterpProver.interpolate_quick(67183)[10]
                    
                  end InterpProver.interpolate_quick(67183)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(67085)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(67084)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(67083)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(67082)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(67081)[5] (0.000000 sec.)
        output:
          P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(67080)[4] (0.000000 sec.)
      Horn clauses:
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
      upper bounds:
        P[<<<make_list_1037@77:1>@93:1>@119:0>](var318:int,var319:int,var320:int) = true
      begin GenHcSolver.classify_pids(68147)[4]
        output:
          [<<<make_list_1037@77:1>@93:1>@119:0>]
      end GenHcSolver.classify_pids(68147)[4] (0.000000 sec.)
      lb:((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(68150)[4]
        lb:((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
        nub:false
        lb':((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
        nub':false
        begin InterpProver.interpolate(68151)[5]
          begin InterpProver.interpolate_fresh(68152)[6]
            begin InterpProver.interpolate_log(68153)[7]
              input1: ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
              input2: false
              begin InterpProver.interpolate_check(68154)[8]
                begin InterpProver.interpolate_simplify(68155)[9]
                  begin InterpProver.interpolate_quick(68194)[10]
                    
                  end InterpProver.interpolate_quick(68194)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(68155)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(68154)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(68153)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(68152)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(68151)[5] (0.001000 sec.)
        output:
          P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(68150)[4] (0.001000 sec.)
      Horn clauses:
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
      upper bounds:
        P[<<nth_1032@105:2>@113:0>](var321:int,var322:int,var323:int) = true
      begin GenHcSolver.classify_pids(68724)[4]
        output:
          [<<nth_1032@105:2>@113:0>]
      end GenHcSolver.classify_pids(68724)[4] (0.000000 sec.)
      lb:((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(68727)[4]
        lb:((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        nub:false
        lb':((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        nub':false
        begin InterpProver.interpolate(68728)[5]
          begin InterpProver.interpolate_fresh(68729)[6]
            begin InterpProver.interpolate_log(68730)[7]
              input1: ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
              input2: false
              begin InterpProver.interpolate_check(68731)[8]
                begin InterpProver.interpolate_simplify(68732)[9]
                  begin InterpProver.interpolate_quick(68771)[10]
                    
                  end InterpProver.interpolate_quick(68771)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(68732)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(68731)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(68730)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(68729)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(68728)[5] (0.001000 sec.)
        output:
          P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) = true
      end ApronInterface.convex_hull_interpolate(68727)[4] (0.001000 sec.)
      begin HcSolver.check_validity(68880)[4]
        input:
          P[<fail_1662@150:0>](<fail_1662@150:0>:bool)|- bot
          
          P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int), <fail_1662@150:0>
          |- P[<fail_1662@150:0>](<fail_1662@150:0>:bool)
          
          P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                              1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
          P[<nth_1032@105:1>]((1 + <nth_1032@147:0>):int,(1 + <nth_1032@147:1>):int),
          (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
          |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
          
          P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
          P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
          P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
          ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
          |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,
                                                 <nth_1032@105:1>:int,
                                                 <<nth_1032@105:2>@113:0>:int,
                                                 <<<nth_1032@105:2>@113:1>@140:0>:int)
          
          P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
          P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                          -1 + <<make_list_1037@77:1>@93:0>):int),
          P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
          ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
           ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
          |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                             <<make_list_1037@77:1>@93:0>:int,
                                                             <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                             <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
          
          P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
          P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int), (<<make_list_1037@77:1>@93:0> <> 0)
          |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                     <<make_list_1037@77:1>@93:0>:int,
                                                     <<<make_list_1037@77:1>@93:1>@119:0>:int)
          
          P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
          ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
          |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                         <<nth_1032@105:2>@113:0>:int)
          
          P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
          ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
          |- P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int)
          
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
          P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                          -1 + <<make_list_1037@77:1>@93:0>):int), (
          <make_list_1037@77:0> >= 0)
          |- P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,
                                             <<make_list_1037@77:1>@93:0>:int)
          
          P[<make_list_1037@80:0>](<make_list_1037@80:0>:int),
          ((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> < 0))
          |- P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,
                                             <<make_list_1037@80:1>@83:0>:int)
          
          P[<make_list_1037@77:0>]((1 + <make_list_1037@80:0>):int), (
          (1 + <make_list_1037@80:0>) >= 0) |- P[<make_list_1037@80:0>](
          <make_list_1037@80:0>:int)
          
          |- P[<make_list_1037@77:0>](<make_list_1037@77:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(68880)[4] (0.004999 sec.)
      solution:
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool) = false
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int) = false
        P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
        (0 = <nth_1032@105:0>)
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        true
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        true
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) = true
        P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int) = true
        P[<<make_list_1037@77:1>@93:0>](<make_list_1037@80:0>:int,<<make_list_1037@80:1>@83:0>:int) = true
        P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,<<make_list_1037@80:1>@83:0>:int) = true
        P[<make_list_1037@80:0>](<make_list_1037@77:0>:int) = true
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int) = true
    end GenHcSolver.solve(31840)[3] (0.189971 sec.)
    begin GenHcSolver.solve(69690)[3]
      Horn clauses:
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool)|- bot
        
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int), <fail_1662@150:0>
        |- P[<fail_1662@150:0>](<fail_1662@150:0>:bool)
        
        P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                            1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
        P[<nth_1032@105:1>]((1 + <nth_1032@147:0>):int,(1 + <nth_1032@147:1>):int),
        (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
        |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
        
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
        P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
        P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
        ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
        |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                               <<nth_1032@105:2>@113:0>:int,
                                               <<<nth_1032@105:2>@113:1>@140:0>:int)
        
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
        P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                        -1 + <<make_list_1037@77:1>@93:0>):int),
        P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
        |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                           <<make_list_1037@77:1>@93:0>:int,
                                                           <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                           <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
        
        P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int), (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
        P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
        
        P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
        ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
        |- P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int)
        
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
        P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                        -1 + <<make_list_1037@77:1>@93:0>):int), (
        <make_list_1037@77:0> >= 0)
        |- P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,
                                           <<make_list_1037@77:1>@93:0>:int)
        
        P[<make_list_1037@80:0>](<make_list_1037@80:0>:int),
        ((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> < 0))
        |- P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,
                                           <<make_list_1037@80:1>@83:0>:int)
        
        P[<make_list_1037@77:0>]((1 + <make_list_1037@80:0>):int), ((1 + <make_list_1037@80:0>) >= 0)
        |- P[<make_list_1037@80:0>](<make_list_1037@80:0>:int)
        
        |- P[<make_list_1037@77:0>](<make_list_1037@77:0>:int)
      lower bounds:
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int) = true
        P[<make_list_1037@80:0>](<make_list_1037@80:0>:int) = ((1 + <make_list_1037@80:0>) >= 0)
        P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,<<make_list_1037@80:1>@83:0>:int) =
        ((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> = -1))
        P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int) =
        ((<make_list_1037@77:0> = 0) && (<<make_list_1037@77:1>@93:0> = 1))
        P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int) =
        ((<nth_1032@105:1> = 1) && (<nth_1032@105:0> = 0))
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> = 1) && (<nth_1032@105:0> = 0)))
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<make_list_1037@77:1>@93:0> = 1) &&
         ((<make_list_1037@77:0> = 0) && (<<<make_list_1037@77:1>@93:1>@119:0> = 0)))
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        ((<make_list_1037@77:0> = 0) &&
         ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
          ((<<make_list_1037@77:1>@93:0> = 1) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
        ((<nth_1032@105:1> = 1) &&
         ((<<nth_1032@105:2>@113:0> = 0) && ((<<<nth_1032@105:2>@113:1>@140:0> = 0) && (<nth_1032@105:0> = 0))))
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int) = false
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool) = false
      upper bounds:
        P[<nth_1032@147:1>](var329:int,var330:int) = true
        P[<nth_1032@105:1>](var324:int,var325:int) = true
      begin GenHcSolver.classify_pids(75704)[4]
        output:
          [<nth_1032@105:1>;<nth_1032@147:1>]
      end GenHcSolver.classify_pids(75704)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(75715)[4]
        lb:((<nth_1032@105:1> = 1) && (<nth_1032@105:0> = 0))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(75725)[5]
          ts: ((<nth_1032@105:1> = 1) && (<nth_1032@105:0> = 0))
          
        end ExtFormula.Formula.case_analysis_boolean(75725)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(75733)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(75733)[5] (0.000000 sec.)
        lb':(((-1 + <nth_1032@105:1>) = 0) && (<nth_1032@105:0> = 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(75736)[5]
          begin InterpProver.interpolate_fresh(75737)[6]
            begin InterpProver.interpolate_log(75738)[7]
              input1: (((-1 + <nth_1032@105:1>) = 0) && (<nth_1032@105:0> = 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(75739)[8]
                begin InterpProver.interpolate_simplify(75740)[9]
                  begin InterpProver.interpolate_quick(75772)[10]
                    
                  end InterpProver.interpolate_quick(75772)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(75740)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(75739)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(75738)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(75737)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(75736)[5] (0.001000 sec.)
        output:
          P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int) = true
          P[<nth_1032@147:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int) = true
      end ApronInterface.convex_hull_interpolate(75715)[4] (0.001000 sec.)
      Horn clauses:
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool)|- bot
        
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int), <fail_1662@150:0>
        |- P[<fail_1662@150:0>](<fail_1662@150:0>:bool)
        
        P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                            1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
        (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
        |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
        
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
        P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
        ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
        |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                               <<nth_1032@105:2>@113:0>:int,
                                               <<<nth_1032@105:2>@113:1>@140:0>:int)
        
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
        P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                        -1 + <<make_list_1037@77:1>@93:0>):int),
        P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
        |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                           <<make_list_1037@77:1>@93:0>:int,
                                                           <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                           <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
        
        P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int), (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
        
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
        P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                        -1 + <<make_list_1037@77:1>@93:0>):int), (
        <make_list_1037@77:0> >= 0)
        |- P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,
                                           <<make_list_1037@77:1>@93:0>:int)
        
        P[<make_list_1037@80:0>](<make_list_1037@80:0>:int),
        ((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> < 0))
        |- P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,
                                           <<make_list_1037@80:1>@83:0>:int)
        
        P[<make_list_1037@77:0>]((1 + <make_list_1037@80:0>):int), ((1 + <make_list_1037@80:0>) >= 0)
        |- P[<make_list_1037@80:0>](<make_list_1037@80:0>:int)
        
        |- P[<make_list_1037@77:0>](<make_list_1037@77:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int) = true
        P[<make_list_1037@80:0>](<make_list_1037@80:0>:int) = ((1 + <make_list_1037@80:0>) >= 0)
        P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,<<make_list_1037@80:1>@83:0>:int) =
        ((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> = -1))
        P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int) =
        ((<make_list_1037@77:0> = 0) && (<<make_list_1037@77:1>@93:0> = 1))
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<make_list_1037@77:1>@93:0> = 1) &&
         ((<make_list_1037@77:0> = 0) && (<<<make_list_1037@77:1>@93:1>@119:0> = 0)))
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        ((<make_list_1037@77:0> = 0) &&
         ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
          ((<<make_list_1037@77:1>@93:0> = 1) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
        ((<nth_1032@105:0> = 0) &&
         ((<nth_1032@105:1> = 1) && ((<<nth_1032@105:2>@113:0> = 0) && (<<<nth_1032@105:2>@113:1>@140:0> = 0))))
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int) = false
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool) = false
      upper bounds:
        P[<<make_list_1037@77:1>@93:0>](var337:int,var338:int) = true
        P[<<make_list_1037@80:1>@83:0>](var333:int,var334:int) = true
      begin GenHcSolver.classify_pids(83827)[4]
        output:
          [<<make_list_1037@80:1>@83:0>;<<make_list_1037@77:1>@93:0>]
      end GenHcSolver.classify_pids(83827)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(83838)[4]
        lb:(((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> = -1)) ||
            ((<make_list_1037@80:0> = 0) && (<<make_list_1037@80:1>@83:0> = 1)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(83856)[5]
          ts: (((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> = -1)) ||
               ((<make_list_1037@80:0> = 0) && (<<make_list_1037@80:1>@83:0> = 1)))
          
        end ExtFormula.Formula.case_analysis_boolean(83856)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(83867)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(83867)[5] (0.000000 sec.)
        lb':((((-1 + <<make_list_1037@80:1>@83:0>) + (-1 * <make_list_1037@80:0>)) = 0) &&
             (((-1 * <make_list_1037@80:0>) >= 0) && ((1 + <make_list_1037@80:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(83870)[5]
          begin InterpProver.interpolate_fresh(83871)[6]
            begin InterpProver.interpolate_log(83872)[7]
              input1: ((((-1 + <<make_list_1037@80:1>@83:0>) + (-1 * <make_list_1037@80:0>)) = 0) &&
                       (((-1 * <make_list_1037@80:0>) >= 0) && ((1 + <make_list_1037@80:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(83873)[8]
                begin InterpProver.interpolate_simplify(83874)[9]
                  begin InterpProver.interpolate_quick(83980)[10]
                    
                  end InterpProver.interpolate_quick(83980)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(83874)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(83873)[8] (0.002000 sec.)
              output: true
            end InterpProver.interpolate_log(83872)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(83871)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(83870)[5] (0.002000 sec.)
        output:
          P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,<<make_list_1037@80:1>@83:0>:int) = true
          P[<<make_list_1037@77:1>@93:0>](<make_list_1037@80:0>:int,<<make_list_1037@80:1>@83:0>:int) = true
      end ApronInterface.convex_hull_interpolate(83838)[4] (0.002999 sec.)
      Horn clauses:
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool)|- bot
        
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int), <fail_1662@150:0>
        |- P[<fail_1662@150:0>](<fail_1662@150:0>:bool)
        
        P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                            1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
        (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
        |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
        
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
        ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
        |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                               <<nth_1032@105:2>@113:0>:int,
                                               <<<nth_1032@105:2>@113:1>@140:0>:int)
        
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
        |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                           <<make_list_1037@77:1>@93:0>:int,
                                                           <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                           <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
        
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int), (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
        
        P[<make_list_1037@77:0>]((1 + <make_list_1037@80:0>):int), ((1 + <make_list_1037@80:0>) >= 0)
        |- P[<make_list_1037@80:0>](<make_list_1037@80:0>:int)
        
        |- P[<make_list_1037@77:0>](<make_list_1037@77:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int) = true
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
        P[<make_list_1037@80:0>](<make_list_1037@80:0>:int) = ((1 + <make_list_1037@80:0>) >= 0)
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) &&
          ((<<make_list_1037@77:1>@93:0> >= 1) &&
           (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
        ((<nth_1032@105:0> = 0) &&
         ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int) = false
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool) = false
      upper bounds:
        P[<make_list_1037@80:0>](var342:int) = true
        P[<make_list_1037@77:0>](var341:int) = true
      begin GenHcSolver.classify_pids(91162)[4]
        output:
          [<make_list_1037@77:0>;<make_list_1037@80:0>]
      end GenHcSolver.classify_pids(91162)[4] (0.000000 sec.)
      begin ApronInterface.convex_hull_interpolate(91173)[4]
        lb:true
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(91176)[5]
          ts: true
          
        end ExtFormula.Formula.case_analysis_boolean(91176)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(91181)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(91181)[5] (0.000000 sec.)
        lb':true
        nub':(-1 >= 0)
        begin InterpProver.interpolate(91184)[5]
          begin InterpProver.interpolate_fresh(91185)[6]
            begin InterpProver.interpolate_log(91186)[7]
              input1: true
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(91187)[8]
                begin InterpProver.interpolate_simplify(91188)[9]
                  begin InterpProver.interpolate_quick(91202)[10]
                    
                  end InterpProver.interpolate_quick(91202)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(91188)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(91187)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(91186)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(91185)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(91184)[5] (0.000000 sec.)
        output:
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int) = true
          P[<make_list_1037@80:0>](<make_list_1037@77:0>:int) = true
      end ApronInterface.convex_hull_interpolate(91173)[4] (0.000000 sec.)
      Horn clauses:
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool)|- bot
        
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int), <fail_1662@150:0>
        |- P[<fail_1662@150:0>](<fail_1662@150:0>:bool)
        
        P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                            1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
        (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
        |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
        
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
        ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
        |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                               <<nth_1032@105:2>@113:0>:int,
                                               <<<nth_1032@105:2>@113:1>@140:0>:int)
        
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
        |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                           <<make_list_1037@77:1>@93:0>:int,
                                                           <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                           <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
        
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) &&
          ((<<make_list_1037@77:1>@93:0> >= 1) &&
           (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
        ((<nth_1032@105:0> = 0) &&
         ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int) = false
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool) = false
      upper bounds:
        P[<fail_1662@150:0>](var344:bool) = true
      begin GenHcSolver.classify_pids(96147)[4]
        output:
          [<fail_1662@150:0>]
      end GenHcSolver.classify_pids(96147)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(96150)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(96153)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(96153)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(96158)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(96158)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(96161)[5]
          begin InterpProver.interpolate_fresh(96162)[6]
            begin InterpProver.interpolate_log(96163)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(96164)[8]
                begin InterpProver.interpolate_simplify(96165)[9]
                  begin InterpProver.interpolate_quick(96180)[10]
                    
                  end InterpProver.interpolate_quick(96180)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(96184)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(96184)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(96165)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(96164)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(96163)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(96162)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(96161)[5] (0.000000 sec.)
        output:
          P[<fail_1662@150:0>](<fail_1662@150:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(96150)[4] (0.001000 sec.)
      Horn clauses:
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int)|- bot
        
        P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                            1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
        (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
        |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
        
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
        ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
        |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                               <<nth_1032@105:2>@113:0>:int,
                                               <<<nth_1032@105:2>@113:1>@140:0>:int)
        
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
        |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                           <<make_list_1037@77:1>@93:0>:int,
                                                           <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                           <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
        
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) &&
          ((<<make_list_1037@77:1>@93:0> >= 1) &&
           (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
        ((<nth_1032@105:0> = 0) &&
         ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int) = false
      upper bounds:
        P[<nth_1032@147:1>](var347:int,var348:int) = true
      begin GenHcSolver.classify_pids(99299)[4]
        output:
          [<nth_1032@147:1>]
      end GenHcSolver.classify_pids(99299)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(99302)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(99305)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(99305)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(99310)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(99310)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(99313)[5]
          begin InterpProver.interpolate_fresh(99314)[6]
            begin InterpProver.interpolate_log(99315)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(99316)[8]
                begin InterpProver.interpolate_simplify(99317)[9]
                  begin InterpProver.interpolate_quick(99332)[10]
                    
                  end InterpProver.interpolate_quick(99332)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(99336)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(99336)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(99317)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(99316)[8] (0.000999 sec.)
              output: false
            end InterpProver.interpolate_log(99315)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(99314)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(99313)[5] (0.000999 sec.)
        output:
          P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int) = false
      end ApronInterface.convex_hull_interpolate(99302)[4] (0.000999 sec.)
      Horn clauses:
        P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                            1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
        (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0)) |- bot
        
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
        ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
        |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                               <<nth_1032@105:2>@113:0>:int,
                                               <<<nth_1032@105:2>@113:1>@140:0>:int)
        
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
        |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                           <<make_list_1037@77:1>@93:0>:int,
                                                           <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                           <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
        
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) &&
          ((<<make_list_1037@77:1>@93:0> >= 1) &&
           (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
        ((<nth_1032@105:0> = 0) &&
         ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
      upper bounds:
        P[<<<nth_1032@105:2>@113:1>@140:0>](var349:int,var350:int,var351:int,var352:int) =
        ((var351 <> 0) || ((var350 < 1) || (var349 = 0)))
      begin GenHcSolver.classify_pids(102840)[4]
        output:
          [<<<nth_1032@105:2>@113:1>@140:0>]
      end GenHcSolver.classify_pids(102840)[4] (0.000000 sec.)
      lb:((<nth_1032@105:0> = 0) &&
          ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
      nub:(not ((<<nth_1032@105:2>@113:0> <> 0) || ((<nth_1032@105:1> < 1) || (<nth_1032@105:0> = 0))))
      begin ApronInterface.convex_hull_interpolate(102843)[4]
        lb:((<nth_1032@105:0> = 0) &&
            ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
        nub:(not ((<<nth_1032@105:2>@113:0> <> 0) || ((<nth_1032@105:1> < 1) || (<nth_1032@105:0> = 0))))
        begin ExtFormula.Formula.case_analysis_boolean(102881)[5]
          ts: ((<nth_1032@105:0> = 0) &&
               ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<<<nth_1032@105:2>@113:1>@140:0> >= 0))))
          
        end ExtFormula.Formula.case_analysis_boolean(102881)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(102914)[5]
          ts: ((<<nth_1032@105:2>@113:0> = 0) && ((<nth_1032@105:1> >= 1) && (<nth_1032@105:0> <> 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(102914)[5] (0.000000 sec.)
        lb':((<<nth_1032@105:2>@113:0> = 0) &&
             ((<nth_1032@105:0> = 0) && ((<<<nth_1032@105:2>@113:1>@140:0> >= 0) && ((-1 + <nth_1032@105:1>) >= 0))))
        nub':((<<nth_1032@105:2>@113:0> = 0) && ((-1 + <nth_1032@105:1>) >= 0))
        begin InterpProver.interpolate(102921)[5]
          begin InterpProver.interpolate_fresh(102922)[6]
            begin InterpProver.interpolate_log(102923)[7]
              input1: ((<<nth_1032@105:2>@113:0> = 0) &&
                       ((<nth_1032@105:0> = 0) &&
                        ((<<<nth_1032@105:2>@113:1>@140:0> >= 0) && ((-1 + <nth_1032@105:1>) >= 0))))
              input2: ((<<nth_1032@105:2>@113:0> = 0) && ((-1 + <nth_1032@105:1>) >= 0))
              begin InterpProver.interpolate_check(102924)[8]
                begin InterpProver.interpolate_simplify(102925)[9]
                  begin InterpProver.interpolate_quick(103076)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(103085)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(103086)[12]
                        begin CsisatInterface.interpolate_csisat_log(103087)[13]
                          input1: (0 = v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0 & 0 <= v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0 & 1 <= v_sep_nth_1032_sep_105_sep_1)
                          input2: (0 = v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0 & 1 <= v_sep_nth_1032_sep_105_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(103088)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(103088)[14] (0.000000 sec.)
                          
                        end CsisatInterface.interpolate_csisat_log(103087)[13] (0.000000 sec.)
                        
                      end CsisatInterface.interpolate_csisat_post_process(103086)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(103085)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(103076)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(102925)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(102924)[8] (0.001000 sec.)
              there is no interpolant
            end InterpProver.interpolate_log(102923)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(102922)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(102921)[5] (0.002000 sec.)
        begin InterpProver.interpolate(103103)[5]
          begin InterpProver.interpolate_fresh(103104)[6]
            begin InterpProver.interpolate_log(103105)[7]
              input1: ((<<nth_1032@105:2>@113:0> = 0) &&
                       ((<nth_1032@105:0> = 0) &&
                        ((<<<nth_1032@105:2>@113:1>@140:0> >= 0) && ((-1 + <nth_1032@105:1>) >= 0))))
              input2: (not ((<<nth_1032@105:2>@113:0> <> 0) || ((<nth_1032@105:1> < 1) || (<nth_1032@105:0> = 0))))
              begin InterpProver.interpolate_check(103106)[8]
                begin InterpProver.interpolate_simplify(103107)[9]
                  begin InterpProver.interpolate_quick(103236)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(103245)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(103246)[12]
                        begin CsisatInterface.interpolate_csisat_log(103247)[13]
                          input1: (0 = v_sep_nth_1032_sep_105_sep_0 & 0 = v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0 & 0 <= v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0 & 1 <= v_sep_nth_1032_sep_105_sep_1)
                          input2: (not 0 = v_sep_nth_1032_sep_105_sep_0 & 0 = v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0 & 1 <= v_sep_nth_1032_sep_105_sep_1)
                          begin CsisatInterface.interpolate_csisat_raw(103248)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(103248)[14] (0.000000 sec.)
                          output: 0 = v_sep_nth_1032_sep_105_sep_0
                          
                        end CsisatInterface.interpolate_csisat_log(103247)[13] (0.000000 sec.)
                        after simplification: 0 = v_sep_nth_1032_sep_105_sep_0
                        after dnf conversion: ((0 = v_sep_nth_1032_sep_105_sep_0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(103246)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(103245)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(103236)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(103107)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(103106)[8] (0.002000 sec.)
              output: (0 = <nth_1032@105:0>)
            end InterpProver.interpolate_log(103105)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(103104)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(103103)[5] (0.002000 sec.)
        output:
          P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
          (0 = <nth_1032@105:0>)
      end ApronInterface.convex_hull_interpolate(102843)[4] (0.004000 sec.)
      Horn clauses:
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
        |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                           <<make_list_1037@77:1>@93:0>:int,
                                                           <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                           <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
        
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
         ((<make_list_1037@77:0> >= 0) &&
          ((<<make_list_1037@77:1>@93:0> >= 1) &&
           (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
      upper bounds:
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](var353:int,var354:int,var355:int,var356:int) = true
      begin GenHcSolver.classify_pids(105356)[4]
        output:
          [<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>]
      end GenHcSolver.classify_pids(105356)[4] (0.000000 sec.)
      lb:((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
          ((<make_list_1037@77:0> >= 0) &&
           ((<<make_list_1037@77:1>@93:0> >= 1) &&
            (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(105359)[4]
        lb:((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
            ((<make_list_1037@77:0> >= 0) &&
             ((<<make_list_1037@77:1>@93:0> >= 1) &&
              (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(105408)[5]
          ts: ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
               ((<make_list_1037@77:0> >= 0) &&
                ((<<make_list_1037@77:1>@93:0> >= 1) &&
                 (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>))))
          
        end ExtFormula.Formula.case_analysis_boolean(105408)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(105419)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(105419)[5] (0.000000 sec.)
        lb':(((<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> + (-1 * <make_list_1037@77:0>)) = 0) &&
             ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
              (((-1 + <<make_list_1037@77:1>@93:0>) >= 0) && (<make_list_1037@77:0> >= 0))))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(105422)[5]
          begin InterpProver.interpolate_fresh(105423)[6]
            begin InterpProver.interpolate_log(105424)[7]
              input1: (((<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> + (-1 * <make_list_1037@77:0>)) = 0) &&
                       ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
                        (((-1 + <<make_list_1037@77:1>@93:0>) >= 0) && (<make_list_1037@77:0> >= 0))))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(105425)[8]
                begin InterpProver.interpolate_simplify(105426)[9]
                  begin InterpProver.interpolate_quick(105519)[10]
                    
                  end InterpProver.interpolate_quick(105519)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(105426)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(105425)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(105424)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(105423)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(105422)[5] (0.001000 sec.)
        output:
          P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(105359)[4] (0.001999 sec.)
      Horn clauses:
        P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
        (<<make_list_1037@77:1>@93:0> <> 0)
        |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                   <<make_list_1037@77:1>@93:0>:int,
                                                   <<<make_list_1037@77:1>@93:1>@119:0>:int)
        
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
      upper bounds:
        P[<<<make_list_1037@77:1>@93:1>@119:0>](var357:int,var358:int,var359:int) = true
      begin GenHcSolver.classify_pids(106485)[4]
        output:
          [<<<make_list_1037@77:1>@93:1>@119:0>]
      end GenHcSolver.classify_pids(106485)[4] (0.000000 sec.)
      lb:((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(106488)[4]
        lb:((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(106501)[5]
          ts: ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && (<<make_list_1037@77:1>@93:0> >= 1))
          
        end ExtFormula.Formula.case_analysis_boolean(106501)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(106509)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(106509)[5] (0.000000 sec.)
        lb':((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && ((-1 + <<make_list_1037@77:1>@93:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(106512)[5]
          begin InterpProver.interpolate_fresh(106513)[6]
            begin InterpProver.interpolate_log(106514)[7]
              input1: ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) && ((-1 + <<make_list_1037@77:1>@93:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(106515)[8]
                begin InterpProver.interpolate_simplify(106516)[9]
                  begin InterpProver.interpolate_quick(106556)[10]
                    
                  end InterpProver.interpolate_quick(106556)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(106516)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(106515)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(106514)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(106513)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(106512)[5] (0.001000 sec.)
        output:
          P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(106488)[4] (0.001000 sec.)
      Horn clauses:
         ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                       <<nth_1032@105:2>@113:0>:int)
      lower bounds:
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) =
        ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
      upper bounds:
        P[<<nth_1032@105:2>@113:0>](var360:int,var361:int,var362:int) = true
      begin GenHcSolver.classify_pids(107088)[4]
        output:
          [<<nth_1032@105:2>@113:0>]
      end GenHcSolver.classify_pids(107088)[4] (0.000000 sec.)
      lb:((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
      nub:false
      begin ApronInterface.convex_hull_interpolate(107091)[4]
        lb:((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(107104)[5]
          ts: ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
          
        end ExtFormula.Formula.case_analysis_boolean(107104)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(107112)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(107112)[5] (0.000000 sec.)
        lb':((<<nth_1032@105:2>@113:0> = 0) && ((-1 + <nth_1032@105:1>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(107115)[5]
          begin InterpProver.interpolate_fresh(107116)[6]
            begin InterpProver.interpolate_log(107117)[7]
              input1: ((<<nth_1032@105:2>@113:0> = 0) && ((-1 + <nth_1032@105:1>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(107118)[8]
                begin InterpProver.interpolate_simplify(107119)[9]
                  begin InterpProver.interpolate_quick(107159)[10]
                    
                  end InterpProver.interpolate_quick(107159)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(107119)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(107118)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(107117)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(107116)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(107115)[5] (0.000000 sec.)
        output:
          P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) = true
      end ApronInterface.convex_hull_interpolate(107091)[4] (0.001000 sec.)
      begin HcSolver.check_validity(107270)[4]
        input:
          P[<fail_1662@150:0>](<fail_1662@150:0>:bool)|- bot
          
          P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int), <fail_1662@150:0>
          |- P[<fail_1662@150:0>](<fail_1662@150:0>:bool)
          
          P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                              1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
          P[<nth_1032@105:1>]((1 + <nth_1032@147:0>):int,(1 + <nth_1032@147:1>):int),
          (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
          |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
          
          P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
          P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
          P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
          ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
          |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,
                                                 <nth_1032@105:1>:int,
                                                 <<nth_1032@105:2>@113:0>:int,
                                                 <<<nth_1032@105:2>@113:1>@140:0>:int)
          
          P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
          P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                          -1 + <<make_list_1037@77:1>@93:0>):int),
          P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
          ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
           ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
          |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                             <<make_list_1037@77:1>@93:0>:int,
                                                             <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                             <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
          
          P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
          P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int), (<<make_list_1037@77:1>@93:0> <> 0)
          |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                     <<make_list_1037@77:1>@93:0>:int,
                                                     <<<make_list_1037@77:1>@93:1>@119:0>:int)
          
          P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
          ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
          |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                         <<nth_1032@105:2>@113:0>:int)
          
          P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
          ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
          |- P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int)
          
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
          P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                          -1 + <<make_list_1037@77:1>@93:0>):int), (
          <make_list_1037@77:0> >= 0)
          |- P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,
                                             <<make_list_1037@77:1>@93:0>:int)
          
          P[<make_list_1037@80:0>](<make_list_1037@80:0>:int),
          ((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> < 0))
          |- P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,
                                             <<make_list_1037@80:1>@83:0>:int)
          
          P[<make_list_1037@77:0>]((1 + <make_list_1037@80:0>):int), (
          (1 + <make_list_1037@80:0>) >= 0) |- P[<make_list_1037@80:0>](
          <make_list_1037@80:0>:int)
          
          |- P[<make_list_1037@77:0>](<make_list_1037@77:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(107270)[4] (0.002000 sec.)
      solution:
        P[<fail_1662@150:0>](<fail_1662@150:0>:bool) = false
        P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int) = false
        P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int) =
        (0 = <nth_1032@105:0>)
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int,<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int) =
        true
        P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int) =
        true
        P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int) = true
        P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int) = true
        P[<<make_list_1037@77:1>@93:0>](<make_list_1037@80:0>:int,<<make_list_1037@80:1>@83:0>:int) = true
        P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,<<make_list_1037@80:1>@83:0>:int) = true
        P[<make_list_1037@80:0>](<make_list_1037@77:0>:int) = true
        P[<make_list_1037@77:0>](<make_list_1037@77:0>:int) = true
    end GenHcSolver.solve(69690)[3] (0.191971 sec.)
    begin YhornInterface.solve(108080)[3]
      begin HcSolver.solve_ub(108081)[4]
        encoded:
          P[<fail_1662@150:0>](<fail_1662@150:0>:int)|- bot
          
          P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int), (<fail_1662@150:0> = 1)
          |- P[<fail_1662@150:0>](<fail_1662@150:0>:int)
          
          P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                              1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
          P[<nth_1032@105:1>]((1 + <nth_1032@147:0>):int,(1 + <nth_1032@147:1>):int),
          (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
          |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
          
          P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
          P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
          P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
          ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
          |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,
                                                 <nth_1032@105:1>:int,
                                                 <<nth_1032@105:2>@113:0>:int,
                                                 <<<nth_1032@105:2>@113:1>@140:0>:int)
          
          P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
          P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                          -1 + <<make_list_1037@77:1>@93:0>):int),
          P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
          ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
           ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
          |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                             <<make_list_1037@77:1>@93:0>:int,
                                                             <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                             <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
          
          P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
          P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int), (<<make_list_1037@77:1>@93:0> <> 0)
          |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                     <<make_list_1037@77:1>@93:0>:int,
                                                     <<<make_list_1037@77:1>@93:1>@119:0>:int)
          
          P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
          ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
          |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                         <<nth_1032@105:2>@113:0>:int)
          
          P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
          ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
          |- P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int)
          
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
          P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                          -1 + <<make_list_1037@77:1>@93:0>):int), (
          <make_list_1037@77:0> >= 0)
          |- P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,
                                             <<make_list_1037@77:1>@93:0>:int)
          
          P[<make_list_1037@80:0>](<make_list_1037@80:0>:int),
          ((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> < 0))
          |- P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,
                                             <<make_list_1037@80:1>@83:0>:int)
          
          P[<make_list_1037@77:0>]((1 + <make_list_1037@80:0>):int), (
          (1 + <make_list_1037@80:0>) >= 0) |- P[<make_list_1037@80:0>](
          <make_list_1037@80:0>:int)
          
          |- P[<make_list_1037@77:0>](<make_list_1037@77:0>:int)
        input to Yhorn:
          P[<fail_1662@150:0>](<fail_1662@150:0>:int)|- bot
          
          P[<nth_1032@147:1>](<nth_1032@147:0>:int,var363:int), ((var363 = 0) && (<fail_1662@150:0> = 1))
          |- P[<fail_1662@150:0>](<fail_1662@150:0>:int)
          
          P[<<<nth_1032@105:2>@113:1>@140:0>](var364:int,var365:int,var366:int,<f_nth_1651@144:4>:int),
          P[<nth_1032@105:1>](var367:int,var368:int),
          ((var368 = (1 + <nth_1032@147:1>)) &&
           ((var367 = (1 + <nth_1032@147:0>)) &&
            ((var365 = (1 + <nth_1032@147:1>)) &&
             ((var364 = (1 + <nth_1032@147:0>)) &&
              ((<nth_1032@147:1> >= 0) && (((1 + <nth_1032@147:0>) <> 0) && (var366 = 0)))))))
          |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
          
          P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
          P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
          P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
          ((<nth_1032@105:1> <> 0) && (<nth_1032@105:0> = 0))
          |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,
                                                 <nth_1032@105:1>:int,
                                                 <<nth_1032@105:2>@113:0>:int,
                                                 <<<nth_1032@105:2>@113:1>@140:0>:int)
          
          P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
          P[<<make_list_1037@80:1>@83:0>](var369:int,var370:int),
          P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
          ((<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>) &&
           (((1 + var370) = <<make_list_1037@77:1>@93:0>) &&
            (((1 + var369) = <make_list_1037@77:0>) &&
             ((<make_list_1037@77:0> >= 0) && (<<<make_list_1037@77:1>@93:1>@119:0> = 0)))))
          |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                             <<make_list_1037@77:1>@93:0>:int,
                                                             <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                             <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
          
          P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
          P[<<nth_1032@105:2>@113:0>](var371:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int), ((<<make_list_1037@77:1>@93:0> <> 0) && (var371 = 0))
          |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                     <<make_list_1037@77:1>@93:0>:int,
                                                     <<<make_list_1037@77:1>@93:1>@119:0>:int)
          
          P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
          ((<nth_1032@105:1> >= 1) && (<<nth_1032@105:2>@113:0> = 0))
          |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                         <<nth_1032@105:2>@113:0>:int)
          
          P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
          ((<nth_1032@105:1> <> 0) && (<nth_1032@105:0> = 0))
          |- P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int)
          
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
          P[<<make_list_1037@80:1>@83:0>](var372:int,var373:int),
          (((1 + var373) = <<make_list_1037@77:1>@93:0>) &&
           (((1 + var372) = <make_list_1037@77:0>) && (<make_list_1037@77:0> >= 0)))
          |- P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,
                                             <<make_list_1037@77:1>@93:0>:int)
          
          P[<make_list_1037@80:0>](<make_list_1037@80:0>:int),
          ((<make_list_1037@80:0> < 0) && (<<make_list_1037@80:1>@83:0> = 0))
          |- P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,
                                             <<make_list_1037@80:1>@83:0>:int)
          
          P[<make_list_1037@77:0>](var374:int),
          ((var374 = (1 + <make_list_1037@80:0>)) && ((1 + <make_list_1037@80:0>) >= 0))
          |- P[<make_list_1037@80:0>](<make_list_1037@80:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1662_sep_150_sep_0($332)) -> 1=0.
(($332-1=0) & ($333=0)) & (v_sep_nth_1032_sep_147_sep_1($334,$333)) -> v_sep_fail_1662_sep_150_sep_0($332).
(($335=0) & ($334+1<>0) & ($336>=0) & (-$334+$337-1=0) & (-$336+$338-1=0) & (-$334+$339-1=0) & (-$336+$340-1=0)) & (v_sep_nth_1032_sep_105_sep_1($339,$340)) & (v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0($337,$338,$335,$341)) -> v_sep_nth_1032_sep_147_sep_1($334,$336).
(($342=0) & ($343<>0)) & (v_sep_nth_1032_sep_105_sep_1($342,$343)) & (v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0($344,$343)) & (v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0($344,$343,$345,$346)) -> v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0($342,$343,$345,$346).
(($347=0) & ($348>=0) & (-$348+$349+1=0) & ($350-$351+1=0) & (-$348+$352=0)) & (v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0($348,$351)) & (v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0($349,$350)) & (v_sep_make_list_1037_sep_77_sep_0($348)) & (v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0($348,$351,$347)) -> v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0($348,$351,$347,$352).
(($353=0) & ($351<>0)) & (v_sep_make_list_1037_sep_77_sep_0($348)) & (v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0($353,$351,$347)) & (v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0($348,$351)) -> v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0($348,$351,$347).
(($345=0) & ($343-1>=0)) & (v_sep_nth_1032_sep_105_sep_1($342,$343)) -> v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0($342,$343,$345).
(($342=0) & ($343<>0)) & (v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0($344,$343)) -> v_sep_nth_1032_sep_105_sep_1($342,$343).
(($348>=0) & (-$348+$354+1=0) & (-$351+$355+1=0)) & (v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0($354,$355)) & (v_sep_make_list_1037_sep_77_sep_0($348)) -> v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0($348,$351).
(($356=0) & ($357<0)) & (v_sep_make_list_1037_sep_80_sep_0($357)) -> v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0($357,$356).
(($357+1>=0) & (-$357+$358-1=0)) & (v_sep_make_list_1037_sep_77_sep_0($358)) -> v_sep_make_list_1037_sep_80_sep_0($357).
0=0 -> v_sep_make_list_1037_sep_77_sep_0($348).


v_sep_fail_1662_sep_150_sep_0: X
v_sep_make_list_1037_sep_77_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0: X
v_sep_make_list_1037_sep_80_sep_0: X
v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0: X
v_sep_nth_1032_sep_105_sep_1: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0: X
v_sep_nth_1032_sep_147_sep_1: X
..............................Extend [44]1.010846
Reconstrcut: 4

v_sep_fail_1662_sep_150_sep_0: X
v_sep_make_list_1037_sep_77_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0: X
v_sep_make_list_1037_sep_80_sep_0: X
v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0: X
v_sep_nth_1032_sep_105_sep_1: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0: X
v_sep_nth_1032_sep_147_sep_1: X
...Split disj [44] 1.012845
Reconstrcut: 5 **)

v_sep_fail_1662_sep_150_sep_0: X
v_sep_make_list_1037_sep_77_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0: X
v_sep_make_list_1037_sep_80_sep_0: X
v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0: X
v_sep_nth_1032_sep_105_sep_1: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0: X
v_sep_nth_1032_sep_147_sep_1: (X) | (X)
........
v_sep_fail_1662_sep_150_sep_0: X
v_sep_make_list_1037_sep_77_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0: X
v_sep_make_list_1037_sep_80_sep_0: X
v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0: X
v_sep_nth_1032_sep_105_sep_1: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0: X
v_sep_nth_1032_sep_147_sep_1: (X) | (X)
....
v_sep_fail_1662_sep_150_sep_0: X
v_sep_make_list_1037_sep_77_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0: X
v_sep_make_list_1037_sep_80_sep_0: X
v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0: X
v_sep_nth_1032_sep_105_sep_1: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0: X
v_sep_nth_1032_sep_147_sep_1: (X) | (X)
........Split conj [46] 1.022844
(Reconstrcut: 20 *****)
v_sep_fail_1662_sep_150_sep_0: X
v_sep_make_list_1037_sep_77_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0: X
v_sep_make_list_1037_sep_80_sep_0: X
v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0: X
v_sep_nth_1032_sep_105_sep_1: (X) & (X) & (X) & (X) & (X)
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0: X
v_sep_nth_1032_sep_147_sep_1: (X) | (X)
...................................
v_sep_fail_1662_sep_150_sep_0: X
v_sep_make_list_1037_sep_77_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0: X
v_sep_make_list_1037_sep_80_sep_0: X
v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0: X
v_sep_nth_1032_sep_105_sep_1: (X) & (X) & (X) & (X) & (X)
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0: X
v_sep_nth_1032_sep_147_sep_1: (X) | (X)
....
v_sep_fail_1662_sep_150_sep_0: X
v_sep_make_list_1037_sep_77_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0: X
v_sep_make_list_1037_sep_80_sep_0: X
v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0: X
v_sep_nth_1032_sep_105_sep_1: (X) & (X) & (X) & (X) & (X)
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0: X
v_sep_nth_1032_sep_147_sep_1: (X) | (X)
........
v_sep_fail_1662_sep_150_sep_0: X
v_sep_make_list_1037_sep_77_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0: X
v_sep_make_list_1037_sep_80_sep_0: X
v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0: X
v_sep_nth_1032_sep_105_sep_1: (X) & (X) & (X) & (X) & (X)
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0: X
v_sep_nth_1032_sep_147_sep_1: (X) | (X)
..................
v_sep_fail_1662_sep_150_sep_0: X
v_sep_make_list_1037_sep_77_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0: X
v_sep_make_list_1037_sep_80_sep_0: X
v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0: X
v_sep_nth_1032_sep_105_sep_1: (X) & (X) & (X) & (X) & (X)
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0: X
v_sep_nth_1032_sep_147_sep_1: (X) | (X)
............................
v_sep_fail_1662_sep_150_sep_0: X
v_sep_make_list_1037_sep_77_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0: X
v_sep_make_list_1037_sep_80_sep_0: X
v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0: X
v_sep_nth_1032_sep_105_sep_1: (X) & (X) & (X) & (X) & (X)
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0: X
v_sep_nth_1032_sep_147_sep_1: (X) | (X)
...................................
v_sep_fail_1662_sep_150_sep_0: X
v_sep_make_list_1037_sep_77_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0: X
v_sep_make_list_1037_sep_80_sep_0: X
v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0: X
v_sep_nth_1032_sep_105_sep_1: (X) & (X) & (X) & (X) & (X)
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0: X
v_sep_nth_1032_sep_147_sep_1: (X) | (X)
.....................................
v_sep_fail_1662_sep_150_sep_0: X
v_sep_make_list_1037_sep_77_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0: X
v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0: X
v_sep_make_list_1037_sep_80_sep_0: X
v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0: X
v_sep_nth_1032_sep_105_sep_1: (X) & (X) & (X) & (X) & (X)
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0: X
v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0: X
v_sep_nth_1032_sep_147_sep_1: (X) | (X)
.......................................(0=0) & (v_sep_fail_1662_sep_150_sep_0($332)) -> 1=0.
(($332-1=0) & ($333=0)) & (v_sep_nth_1032_sep_147_sep_1($334,$333)) -> v_sep_fail_1662_sep_150_sep_0($332).
(($335=0) & ($334+1<>0) & ($336>=0) & (-$334+$337-1=0) & (-$336+$338-1=0) & (-$334+$339-1=0) & (-$336+$340-1=0)) & (v_sep_nth_1032_sep_105_sep_1($339,$340)) & (v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0($337,$338,$335,$341)) -> v_sep_nth_1032_sep_147_sep_1($334,$336).
(($342=0) & ($343<>0)) & (v_sep_nth_1032_sep_105_sep_1($342,$343)) & (v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0($344,$343)) & (v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0($344,$343,$345,$346)) -> v_sep_nth_1032_sep_105_sep_2_sep_113_sep_1_sep_140_sep_0($342,$343,$345,$346).
(($347=0) & ($348>=0) & (-$348+$349+1=0) & ($350-$351+1=0) & (-$348+$352=0)) & (v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0($348,$351)) & (v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0($349,$350)) & (v_sep_make_list_1037_sep_77_sep_0($348)) & (v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0($348,$351,$347)) -> v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_1_sep_134_sep_0($348,$351,$347,$352).
(($353=0) & ($351<>0)) & (v_sep_make_list_1037_sep_77_sep_0($348)) & (v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0($353,$351,$347)) & (v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0($348,$351)) -> v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_1_sep_119_sep_0($348,$351,$347).
(($345=0) & ($343-1>=0)) & (v_sep_nth_1032_sep_105_sep_1($342,$343)) -> v_sep_nth_1032_sep_105_sep_2_sep_113_sep_0($342,$343,$345).
(($342=0) & ($343<>0)) & (v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0($344,$343)) -> v_sep_nth_1032_sep_105_sep_1($342,$343).
(($348>=0) & (-$348+$354+1=0) & (-$351+$355+1=0)) & (v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0($354,$355)) & (v_sep_make_list_1037_sep_77_sep_0($348)) -> v_sep_make_list_1037_sep_77_sep_1_sep_93_sep_0($348,$351).
(($356=0) & ($357<0)) & (v_sep_make_list_1037_sep_80_sep_0($357)) -> v_sep_make_list_1037_sep_80_sep_1_sep_83_sep_0($357,$356).
(($357+1>=0) & (-$357+$358-1=0)) & (v_sep_make_list_1037_sep_77_sep_0($358)) -> v_sep_make_list_1037_sep_80_sep_0($357).
0=0 -> v_sep_make_list_1037_sep_77_sep_0($348).

          |- P[<make_list_1037@77:0>](<make_list_1037@77:0>:int)
        solution:
          P[<fail_1662@150:0>]($359:bool) = false
          P[<make_list_1037@77:0>]($400:int) = true
          P[<<make_list_1037@77:1>@93:0>]($381:int,$383:int) = true
          P[<<<make_list_1037@77:1>@93:1>@119:0>]($403:int,$405:int,$407:int) = true
          P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>]($386:int,$388:int,$390:int,$392:int) = true
          P[<make_list_1037@80:0>]($417:int) = true
          P[<<make_list_1037@80:1>@83:0>]($395:int,$397:int) = true
          P[<nth_1032@105:1>]($367:int,$369:int) = ($367 = 0)
          P[<<nth_1032@105:2>@113:0>]($410:int,$412:int,$414:int) = true
          P[<<<nth_1032@105:2>@113:1>@140:0>]($372:int,$374:int,$376:int,$378:int) = true
          P[<nth_1032@147:1>]($362:int,$364:int) = false
        
      end HcSolver.solve_ub(108081)[4] (0.246962 sec.)
      begin HcSolver.check_validity(109040)[4]
        input:
          P[<fail_1662@150:0>](<fail_1662@150:0>:bool)|- bot
          
          P[<nth_1032@147:1>](<nth_1032@147:0>:int,0:int), <fail_1662@150:0>
          |- P[<fail_1662@150:0>](<fail_1662@150:0>:bool)
          
          P[<<<nth_1032@105:2>@113:1>@140:0>]((1 + <nth_1032@147:0>):int,(
                                              1 + <nth_1032@147:1>):int,0:int,<f_nth_1651@144:4>:int),
          P[<nth_1032@105:1>]((1 + <nth_1032@147:0>):int,(1 + <nth_1032@147:1>):int),
          (((1 + <nth_1032@147:0>) <> 0) && (<nth_1032@147:1> >= 0))
          |- P[<nth_1032@147:1>](<nth_1032@147:0>:int,<nth_1032@147:1>:int)
          
          P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int,<<nth_1032@105:2>@113:0>:int,<<<nth_1032@105:2>@113:1>@140:0>:int),
          P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
          P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
          ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
          |- P[<<<nth_1032@105:2>@113:1>@140:0>](<nth_1032@105:0>:int,
                                                 <nth_1032@105:1>:int,
                                                 <<nth_1032@105:2>@113:0>:int,
                                                 <<<nth_1032@105:2>@113:1>@140:0>:int)
          
          P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
          P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                          -1 + <<make_list_1037@77:1>@93:0>):int),
          P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
          ((<<<make_list_1037@77:1>@93:1>@119:0> = 0) &&
           ((<make_list_1037@77:0> >= 0) && (<<<<make_list_1037@77:1>@93:1>@119:1>@134:0> = <make_list_1037@77:0>)))
          |- P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>](<make_list_1037@77:0>:int,
                                                             <<make_list_1037@77:1>@93:0>:int,
                                                             <<<make_list_1037@77:1>@93:1>@119:0>:int,
                                                             <<<<make_list_1037@77:1>@93:1>@119:1>@134:0>:int)
          
          P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,<<make_list_1037@77:1>@93:0>:int),
          P[<<nth_1032@105:2>@113:0>](0:int,<<make_list_1037@77:1>@93:0>:int,<<<make_list_1037@77:1>@93:1>@119:0>:int),
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int), (<<make_list_1037@77:1>@93:0> <> 0)
          |- P[<<<make_list_1037@77:1>@93:1>@119:0>](<make_list_1037@77:0>:int,
                                                     <<make_list_1037@77:1>@93:0>:int,
                                                     <<<make_list_1037@77:1>@93:1>@119:0>:int)
          
          P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int),
          ((<<nth_1032@105:2>@113:0> = 0) && (<nth_1032@105:1> >= 1))
          |- P[<<nth_1032@105:2>@113:0>](<nth_1032@105:0>:int,<nth_1032@105:1>:int,
                                         <<nth_1032@105:2>@113:0>:int)
          
          P[<<make_list_1037@77:1>@93:0>](<f_main_1657@102:0>:int,<nth_1032@105:1>:int),
          ((<nth_1032@105:0> = 0) && (<nth_1032@105:1> <> 0))
          |- P[<nth_1032@105:1>](<nth_1032@105:0>:int,<nth_1032@105:1>:int)
          
          P[<make_list_1037@77:0>](<make_list_1037@77:0>:int),
          P[<<make_list_1037@80:1>@83:0>]((-1 + <make_list_1037@77:0>):int,(
                                          -1 + <<make_list_1037@77:1>@93:0>):int), (
          <make_list_1037@77:0> >= 0)
          |- P[<<make_list_1037@77:1>@93:0>](<make_list_1037@77:0>:int,
                                             <<make_list_1037@77:1>@93:0>:int)
          
          P[<make_list_1037@80:0>](<make_list_1037@80:0>:int),
          ((<<make_list_1037@80:1>@83:0> = 0) && (<make_list_1037@80:0> < 0))
          |- P[<<make_list_1037@80:1>@83:0>](<make_list_1037@80:0>:int,
                                             <<make_list_1037@80:1>@83:0>:int)
          
          P[<make_list_1037@77:0>]((1 + <make_list_1037@80:0>):int), (
          (1 + <make_list_1037@80:0>) >= 0) |- P[<make_list_1037@80:0>](
          <make_list_1037@80:0>:int)
          
          |- P[<make_list_1037@77:0>](<make_list_1037@77:0>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(109040)[4] (0.006999 sec.)
      solution:
        P[<fail_1662@150:0>]($359:bool) = false
        P[<make_list_1037@77:0>]($400:int) = true
        P[<<make_list_1037@77:1>@93:0>]($381:int,$383:int) = true
        P[<<<make_list_1037@77:1>@93:1>@119:0>]($403:int,$405:int,$407:int) = true
        P[<<<<make_list_1037@77:1>@93:1>@119:1>@134:0>]($386:int,$388:int,$390:int,$392:int) = true
        P[<make_list_1037@80:0>]($417:int) = true
        P[<<make_list_1037@80:1>@83:0>]($395:int,$397:int) = true
        P[<nth_1032@105:1>]($367:int,$369:int) = ($367 = 0)
        P[<<nth_1032@105:2>@113:0>]($410:int,$412:int,$414:int) = true
        P[<<<nth_1032@105:2>@113:1>@140:0>]($372:int,$374:int,$376:int,$378:int) = true
        P[<nth_1032@147:1>]($362:int,$364:int) = false
    end YhornInterface.solve(108080)[3] (0.253961 sec.)
    
  end RefTypeInfer.infer_etrs(25644)[2] (0.725889 sec.)
  refinement types:
    main_1649: X
    f_1658: v1:int -> X
    main_1039: v1:int -> (v2:int -> X) -> X
    make_list_1037: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    make_list_1037: v1:int -> (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> X
    f_make_list_1655: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1105: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_1656: v1:int -> (v2:int -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    is_nil_1030: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1657: v1:int -> v2:int -> (v3:int -> X) -> (v5:int -> (v6:int -> X) -> X) -> v9:bool -> X
    nth_1032: v1:int -> v2:int -> (v3:int -> (v4:{v4:int | (0 = v1)} -> X) -> X) -> (v7:int -> X) -> X
    br_nth_1660: v1:bool -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> (v8:int -> X) -> X
    f_cons_make_list_1654: v1:int -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> v8:int -> (v9:int -> X) -> X
    f_nth_1651: v1:int -> v2:int -> (v3:int -> X) -> (v5:int -> (v6:int -> X) -> X) -> v9:int -> X
    nth_1032: v1:int -> v2:{v2:int | false} -> (v3:int -> (v4:int -> X) -> X) -> (v7:int -> X) -> X
    fail_1662: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1659: var421:int -> var420:int -> X
    f_make_list_1653: var426:int -> var425:int -> (var424:int -> X) -> X
    f_nth_1650: var430:int -> var429:int -> var428:unit -> X
    f_nth_1652: var441:int ->
                var440:int ->
                var439:int -> (var438:int -> (var437:int -> X) -> X) -> var434:int -> (var433:int -> X) -> X
  abstraction types:
    main_1649: X
    f_1658: v1:int -> X
    main_1039: v1:int -> (v2:int -> X) -> X
    make_list_1037: var442:int -> (var443:int -> (var444:int -> (var445:int -> X) -> X) -> X) -> X
    f_make_list_1655: v1:int ->
                      (v2:int -> (v3:int -> (v4:int -> X) -> X) -> X) -> v8:int -> (v9:int -> (v10:int -> X) -> X) -> X
    cons_make_list_1105: v1:int ->
                         v2:int ->
                         v3:int ->
                         (v4:int -> (v5:int -> X) -> X) -> (v8:int -> (v9:int -> (v10:int -> X) -> X) -> X) -> X
    f_main_1656: v1:int -> (v2:int -> X) -> v4:int -> (v5:int -> (v6:int -> X) -> X) -> X
    is_nil_1030: v1:int -> (v2:int -> (v3:int -> X) -> X) -> (v6:bool -> X) -> X
    f_main_1657: v1:int -> v2:int -> (v3:int -> X) -> (v5:int -> (v6:int -> X) -> X) -> v9:bool -> X
    nth_1032: var450:int ->
              var451:int -> (var452:int -> (var453:int[var453 -> (0 = var450)] -> X) -> X) -> (var456:int -> X) -> X
    br_nth_1660: v1:bool -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> (v8:int -> X) -> X
    f_cons_make_list_1654: v1:int -> v2:int -> v3:int -> (v4:int -> (v5:int -> X) -> X) -> v8:int -> (v9:int -> X) -> X
    f_nth_1651: v1:int -> v2:int -> (v3:int -> X) -> (v5:int -> (v6:int -> X) -> X) -> v9:int -> X
    fail_1662: v1:bool -> (v2:unit -> X) -> X
    f_1659: var421:int -> var420:int -> X
    f_make_list_1653: var426:int -> var425:int -> (var424:int -> X) -> X
    f_nth_1650: var430:int -> var429:int -> var428:unit -> X
    f_nth_1652: var441:int ->
                var440:int ->
                var439:int -> (var438:int -> (var437:int -> X) -> X) -> var434:int -> (var433:int -> X) -> X
  
end AbsTypeInfer.refine(25643)[1] (0.732889 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 1; 0; 0; 0; 0; 1; 1; 1; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1649
  main_1649 -> (rand_int f_1658)
  br_nth_1660 b_1661 n_1033 xs1_1034 xs2_1034 k_nth_1209 when b_1661 ->
      (xs2_1034 0 (f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034))
  br_nth_1660 b_1661 n_1033 xs1_1034 xs2_1034 k_nth_1209 when (not b_1661) -> _|_
  cons_make_list_1105 n_1038 x_1103 xs1_1104 xs2_1104 k_make_list_cons_make_list_1400 ->
      (k_make_list_cons_make_list_1400 (xs1_1104 + 1) (f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104))
  f_1658 x_1585 -> (main_1039 x_1585 (f_1659 x_1585))
  f_1659 x_1585 x_1582 -> end
  f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104 i_1102 k_make_list_cons_make_list_1415 when (
      i_1102 = 0) -> (k_make_list_cons_make_list_1415 x_1103)
  f_cons_make_list_1654 n_1038 x_1103 xs1_1104 xs2_1104 i_1102 k_make_list_cons_make_list_1415 when (
      not (i_1102 = 0)) -> (xs2_1104 (i_1102 - 1) k_make_list_cons_make_list_1415)
  f_main_1656 n_1040 k_main_1499 x1_1505 x2_1505 ->
      (is_nil_1030 x1_1505 x2_1505 (f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505))
  f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505 b_1579 when b_1579 -> (k_main_1499 0)
  f_main_1657 n_1040 x1_1505 k_main_1499 x2_1505 b_1579 when (not b_1579) -> (nth_1032 0 x1_1505 x2_1505 k_main_1499)
  f_make_list_1653 n_1038 x_1109 k_make_list_1353 -> _|_
  f_make_list_1655 n_1038 k_make_list_1341 x1_1478 x2_1478 ->
      (cons_make_list_1105 n_1038 n_1038 x1_1478 x2_1478 k_make_list_1341)
  f_nth_1650 n_1033 xs1_1034 x_1215 -> _|_
  f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034 x_1268 when (n_1033 = 0) -> (k_nth_1209 x_1268)
  f_nth_1651 n_1033 xs1_1034 k_nth_1209 xs2_1034 x_1268 when (not (n_1033 = 0)) ->
      (nth_1032 (n_1033 - 1) (xs1_1034 - 1) (f_nth_1652 n_1033 x_1268 xs1_1034 xs2_1034) k_nth_1209)
  f_nth_1652 n_1033 x_1268 xs1_1034 xs2_1034 x_1076 k_nth_xs'_1254 -> (xs2_1034 (x_1076 + 1) k_nth_xs'_1254)
  fail_1662 b k -> {fail} => (k ())
  is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1173 when (xs1_1031 = 0) -> (k_is_nil_1173 true)
  is_nil_1030 xs1_1031 xs2_1031 k_is_nil_1173 when (not (xs1_1031 = 0)) -> (k_is_nil_1173 false)
  main_1039 n_1040 k_main_1499 -> (make_list_1037 n_1040 (f_main_1656 n_1040 k_main_1499))
  make_list_1037 n_1038 k_make_list_1341 when (n_1038 < 0) -> (k_make_list_1341 0 (f_make_list_1653 n_1038))
  make_list_1037 n_1038 k_make_list_1341 when (not (n_1038 < 0)) ->
      (make_list_1037 (n_1038 - 1) (f_make_list_1655 n_1038 k_make_list_1341))
  nth_1032 n_1033 xs1_1034 xs2_1034 k_nth_1209 when (xs1_1034 = 0) -> (fail_1662 true (f_nth_1650 n_1033 xs1_1034))
  nth_1032 n_1033 xs1_1034 xs2_1034 k_nth_1209 when (not (xs1_1034 = 0)) ->
      (br_nth_1660 (1 <= xs1_1034) n_1033 xs1_1034 xs2_1034 k_nth_1209)
Types:
  main_1649 : X
  fail_1662 : (x_1:bool[x_1] -> (unit -> X) -> X)
  make_list_1037 : (int -> (x_3:int[x_3 = 0] -> (int -> (int -> X) -> X) -> X) -> X)
  nth_1032 : (x_1:int -> x_2:int[(not (x_2 = 0))] -> (int -> (int[x_1 = 0] -> X) -> X) -> (int -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  make_list: ((int -> ((Top list|x_2:x_2 = 0|) \/ (int list|x_4:x_4 <> 0|))) /\ 
              (int -> ((int list|x_8:x_8 = 0|) \/ (int list|x_11:x_11 <> 0|))))
  nth: (x_1:int -> (({x_6:int | x_1 = 0} list|x_4:x_4 <> 0|) -> int))

cycles: 3
total: 1.277 sec
  abst: 0.017 sec
  mc: 0.034 sec
  refine: 1.007 sec
    exparam: 0.101 sec
