MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi a-init.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 a_1035 x_1036 j_1037 =
   if j_1037 > i_1034 - 1 && j_1037 <= i_1034 then
     x_1036
   else
     a_1035 j_1037 
 in
 let rec init_1038 i_1039 n_1040 a_1041 =
   if i_1039 >= n_1040 then
     a_1041
   else
     init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) 
 in
 let main_1042 k_1043 n_1044 i_1045 =
   if k_1043 >= 0 && k_1043 <= 0 then
     let x_1046 = init_1038 k_1043 n_1044 (make_array_1030 n_1044) 
     in
       if 0 <= i_1045 && i_1045 < n_1044 then
         if x_1046 i_1045 >= 1 then
           ()
         else
           {fail} ()
       else
         ()
   else
     () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 a_1035 x_1036 j_1037 =
   if j_1037 > i_1034 - 1 && j_1037 <= i_1034 then
     x_1036
   else
     a_1035 j_1037 
 in
 let rec init_1038 i_1039 n_1040 a_1041 =
   if i_1039 >= n_1040 then
     a_1041
   else
     init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) 
 in
 let main_1042 k_1043 n_1044 i_1045 =
   if k_1043 >= 0 && k_1043 <= 0 then
     let x_1046 = init_1038 k_1043 n_1044 (make_array_1030 n_1044) 
     in
       if 0 <= i_1045 && i_1045 < n_1044 then
         if x_1046 i_1045 >= 1 then
           ()
         else
           {fail} ()
       else
         ()
   else
     () 
 in
 let main_1177 =
   let arg1_1174 = rand_int () 
   in
   let arg2_1175 = rand_int () 
   in
   let arg3_1176 = rand_int () 
   in
     main_1042 arg1_1174 arg2_1175 arg3_1176 
 in
   ()

abst_list::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let update_1033 (i_1034:int) (a_1035:(int -> int)) (x_1036:int) (j_1037:int) =
   if j_1037 > i_1034 - 1 && j_1037 <= i_1034 then
     x_1036
   else
     a_1035 j_1037 
 in
 let rec init_1038 (i_1039:int) (n_1040:int) (a_1041:(int -> int)) =
   if i_1039 >= n_1040 then
     a_1041
   else
     init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) 
 in
 let main_1042 (k_1043:int) (n_1044:int) (i_1045:int) =
   if k_1043 >= 0 && k_1043 <= 0 then
     let x_1046 = init_1038 k_1043 n_1044 (make_array_1030 n_1044) 
     in
       if 0 <= i_1045 && i_1045 < n_1044 then
         if x_1046 i_1045 >= 1 then
           ()
         else
           {fail} ()
       else
         ()
   else
     () 
 in
 let main_1177 =
   let arg1_1174 = rand_int () 
   in
   let arg2_1175 = rand_int () 
   in
   let arg3_1176 = rand_int () 
   in
     main_1042 arg1_1174 arg2_1175 arg3_1176 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1207:(int -> X)) =
   let k_make_array_u_1224 (x_1210:unit) = k_make_array_1207 0 
   in
   let k_make_array_u_1213 (b_1225:bool) =
     if b_1225 then
       k_make_array_u_1224 ()
     else
       {|fail|} () k_make_array_u_1224 
   in
     if 0 <= i_1032 then
       k_make_array_u_1213 (i_1032 < n_1031)
     else
       k_make_array_u_1213 false 
 in
 let update_1033
   (i_1034:int) (a_1035:(int -> ((int -> X) -> X))) (x_1036:int) (j_1037:int) (k_update_1260:(
   int -> X)) =
   let k_update_1263 (b_1278:bool) = if b_1278 then
                                       k_update_1260 x_1036
                                     else
                                       a_1035 j_1037 k_update_1260 
   in
     if j_1037 > i_1034 - 1 then
       k_update_1263 (j_1037 <= i_1034)
     else
       k_update_1263 false 
 in
 let rec init_1038
   (i_1039:int) (n_1040:int) (a_1041:(int -> ((int -> X) -> X))) (k_init_1322:(
   (int -> ((int -> X) -> X)) -> X)) =
   if i_1039 >= n_1040 then
     k_init_1322 a_1041
   else
     init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) k_init_1322 
 in
 let main_1042 (k_1043:int) (n_1044:int) (i_1045:int) (k_main_1394:(unit -> X)) =
   let k_main_1397 (b_1481:bool) =
     if b_1481 then
       init_1038 k_1043 n_1044 (make_array_1030 n_1044)
         (fun x_1404 ->
            (let k_main_1447 (b_1477:bool) =
               if b_1477 then
                 x_1404 i_1045 (fun x_1451 -> (if x_1451 >= 1 then
                                                 k_main_1394 ()
                                               else
                                                 {|fail|} () k_main_1394))
               else
                 k_main_1394 () 
             in
               if 0 <= i_1045 then
                 k_main_1447 (i_1045 < n_1044)
               else
                 k_main_1447 false))
     else
       k_main_1394 () 
   in
     if k_1043 >= 0 then
       k_main_1397 (k_1043 <= 0)
     else
       k_main_1397 false 
 in
   rand_int_cps ()
     (fun x_1487 ->
        rand_int_cps ()
          (fun x_1500 -> rand_int_cps () (fun x_1513 -> main_1042 x_1487 x_1500 x_1513 (fun x_1484 -> end))))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1546
  main_1546 -> (rand_int f_1549)
  f_1549 x_1487 -> (rand_int (f_1550 x_1487))
  f_1550 x_1487 x_1500 -> (rand_int (f_1551 x_1487 x_1500))
  f_1551 x_1487 x_1500 x_1513 -> (main_1042 x_1487 x_1500 x_1513 (f_1552 x_1487 x_1500 x_1513))
  f_1552 x_1487 x_1500 x_1513 x_1484 -> end
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      0 <= i_1045) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 (i_1045 < n_1044))
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      not (0 <= i_1045)) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 false)
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (x_1451 >= 1) -> (k_main_1394 ())
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (
      not (x_1451 >= 1)) -> (fail_1554 true k_main_1394)
  fail_1553 b k -> {fail} => (k ())
  fail_1554 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (i_1039 >= n_1040) -> (k_init_1322 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) k_init_1322)
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when b_1481 ->
      (init_1038 k_1043 n_1044 (make_array_1030 n_1044) (f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when (not b_1481) -> (k_main_1394 ())
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when b_1477 ->
      (x_1404 i_1045 (f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when (not b_1477) -> (k_main_1394 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when b_1225 ->
      (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when (not b_1225) ->
      (fail_1553 true (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207))
  k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 x_1210 -> (k_make_array_1207 0)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when b_1278 -> (k_update_1260 x_1036)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when (not b_1278) -> (a_1035 j_1037 k_update_1260)
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (k_1043 >= 0) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 (k_1043 <= 0))
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (not (k_1043 >= 0)) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 false)
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (0 <= i_1032) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (not (0 <= i_1032)) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 false)
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (j_1037 > (i_1034 - 1)) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 (j_1037 <= i_1034))
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (not (j_1037 > (i_1034 - 1))) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 false)
Types:
  main_1546 : X
  fail_1553 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1554 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1546 ... --> 
  f_1549 ... --> 
  f_1550 ... --> 
  f_1551 ... --> 
  main_1042 [1/2] ... --> 
  k_main_1397 [1/2] ... --> 
  init_1038 [1/2] ... --> 
  f_k_main_1547 [1/2] ... --> 
  k_main_1447 [1/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1213 [2/2] ... --> 
  fail_1553 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(285)[1]
  program:
    main_1546  | true = ((Random.int 0) f_1549)
    f_1549 x_1487 | true = ((Random.int 0) (f_1550 x_1487))
    f_1550 x_1487 x_1500 | true = ((Random.int 0) (f_1551 x_1487
                                                          x_1500))
    f_1551 x_1487 x_1500 x_1513 | true = (main_1042 x_1487
                                                    x_1500
                                                    x_1513
                                                    (f_1552 x_1487
                                                            x_1500
                                                            x_1513))
    f_1552 x_1487 x_1500 x_1513 x_1484 | true = end
    f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 | (0 <= i_1045) = (
    k_main_1447 b_1481
                i_1045
                k_1043
                n_1044
                k_main_1394
                x_1404
                (i_1045 < n_1044))
    f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 | (not (
                                                                    0 <= i_1045)) = (
    k_main_1447 b_1481
                i_1045
                k_1043
                n_1044
                k_main_1394
                x_1404
                false)
    f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 | (
    x_1451 >= 1) = (k_main_1394 ())
    f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 | (
    not (x_1451 >= 1)) = (fail_1554 true
                                    k_main_1394)
    fail_1553 b k | true = (fail ())
    fail_1554 b k | true = (fail ())
    init_1038 i_1039 n_1040 a_1041 k_init_1322 | (i_1039 >= n_1040) = (
    k_init_1322 a_1041)
    init_1038 i_1039 n_1040 a_1041 k_init_1322 | (not (i_1039 >= n_1040)) = (
    init_1038 (i_1039 + 1)
              n_1040
              (update_1033 i_1039
                           a_1041
                           1)
              k_init_1322)
    k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 | b_1481 = (init_1038
                                                                    k_1043
                                                                    n_1044
                                                                    (
                                                                    make_array_1030 n_1044)
                                                                    (
                                                                    f_k_main_1547
                                                                    b_1481
                                                                    i_1045
                                                                    k_1043
                                                                    n_1044
                                                                    k_main_1394))
    k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 | (not b_1481) = (
    k_main_1394 ())
    k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 | b_1477 = (
    x_1404 i_1045
           (f_k_main_1548 b_1477
                          b_1481
                          i_1045
                          k_1043
                          n_1044
                          k_main_1394))
    k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 | (
    not b_1477) = (k_main_1394 ())
    k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 | b_1225 = (
    k_make_array_u_1224 i_1032
                        n_1031
                        k_make_array_1207
                        ())
    k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 | (not b_1225) = (
    fail_1553 true
              (k_make_array_u_1224 i_1032
                                   n_1031
                                   k_make_array_1207))
    k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 x_1210 | true = (
    k_make_array_1207 0)
    k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 | b_1278 = (
    k_update_1260 x_1036)
    k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 | (
    not b_1278) = (a_1035 j_1037
                          k_update_1260)
    main_1042 k_1043 n_1044 i_1045 k_main_1394 | (k_1043 >= 0) = (k_main_1397
                                                                    i_1045
                                                                    k_1043
                                                                    n_1044
                                                                    k_main_1394
                                                                    (
                                                                    k_1043 <= 0))
    main_1042 k_1043 n_1044 i_1045 k_main_1394 | (not (k_1043 >= 0)) = (
    k_main_1397 i_1045
                k_1043
                n_1044
                k_main_1394
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1207 | (0 <= i_1032) = (
    k_make_array_u_1213 i_1032
                        n_1031
                        k_make_array_1207
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1207 | (not (0 <= i_1032)) = (
    k_make_array_u_1213 i_1032
                        n_1031
                        k_make_array_1207
                        false)
    update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 | (j_1037 > (i_1034 - 1)) = (
    k_update_1263 i_1034
                  j_1037
                  x_1036
                  a_1035
                  k_update_1260
                  (j_1037 <= i_1034))
    update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 | (not (j_1037 > (i_1034 - 1))) = (
    k_update_1263 i_1034
                  j_1037
                  x_1036
                  a_1035
                  k_update_1260
                  false)
    main_1546:X
    f_1549:int -> X
    f_1550:int -> int -> X
    f_1551:int -> int -> int -> X
    f_1552:int -> int -> int -> unit -> X
    f_k_main_1547:bool -> int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> X
    f_k_main_1548:bool -> bool -> int -> int -> int -> (unit -> X) -> int -> X
    fail_1553:bool -> (unit -> X) -> X
    fail_1554:bool -> (unit -> X) -> X
    init_1038:int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> X
    k_main_1397:int -> int -> int -> (unit -> X) -> bool -> X
    k_main_1447:bool -> int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> bool -> X
    k_make_array_u_1213:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1224:int -> int -> (int -> X) -> unit -> X
    k_update_1263:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> bool -> X
    main_1042:int -> int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1033:int -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
  inlined functions: f_1549,f_1550,f_1551,f_1552,f_k_main_1547,f_k_main_1548,k_main_1397,k_main_1447,k_make_array_u_1213,k_make_array_u_1224,k_update_1263,main_1042,make_array_1030,update_1033
  counterexample: 0:0:0:0:0:0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1549@4:0> = var2)
     [true.nop((<f_1550@7:0> = <f_1549@4:0>) && (<f_1550@7:1> = var3))
      [true.nop((<f_1551@10:0> = <f_1550@7:0>) && ((<f_1551@10:1> = <f_1550@7:1>) && (<f_1551@10:2> = var4)))
       [true.
        ((<main_1042@12:0> = <f_1551@10:0>) &&
         ((<main_1042@12:1> = <f_1551@10:1>) && (<main_1042@12:2> = <f_1551@10:2>)))
        [(<main_1042@12:0> >= 0).
         ((<k_main_1397@15:0> = <main_1042@12:2>) &&
          ((<k_main_1397@15:1> = <main_1042@12:0>) &&
           ((<k_main_1397@15:2> = <main_1042@12:1>) && (<k_main_1397@15:4> = (<main_1042@12:0> <= 0)))))
         [<k_main_1397@15:4>.((<init_1038@18:0> = <k_main_1397@15:1>) && (<init_1038@18:1> = <k_main_1397@15:2>))
          [(<init_1038@18:0> >= <init_1038@18:1>).true
           [true.
            ((<f_k_main_1547@23:0> = <k_main_1397@15:4>) &&
             ((<f_k_main_1547@23:1> = <k_main_1397@15:0>) &&
              ((<f_k_main_1547@23:2> = <k_main_1397@15:1>) && (<f_k_main_1547@23:3> = <k_main_1397@15:2>))))
            [(0 <= <f_k_main_1547@23:1>).
             ((<k_main_1447@26:0> = <f_k_main_1547@23:0>) &&
              ((<k_main_1447@26:1> = <f_k_main_1547@23:1>) &&
               ((<k_main_1447@26:2> = <f_k_main_1547@23:2>) &&
                ((<k_main_1447@26:3> = <f_k_main_1547@23:3>) &&
                 (<k_main_1447@26:6> = (<f_k_main_1547@23:1> < <f_k_main_1547@23:3>))))))
             [<k_main_1447@26:6>.(<<k_main_1447@26:5>@29:0> = <k_main_1447@26:1>)
              [true.(<<f_k_main_1547@23:5>@31:0> = <<k_main_1447@26:5>@29:0>)
               [true.(<<<init_1038@18:3>@21:0>@33:0> = <<f_k_main_1547@23:5>@31:0>)
                [true.(<<init_1038@18:2>@35:0> = <<<init_1038@18:3>@21:0>@33:0>)
                 [true.
                  ((<make_array_1030@37:0> = <k_main_1397@15:2>) && (<make_array_1030@37:1> = <<init_1038@18:2>@35:0>))
                  [(not (0 <= <make_array_1030@37:1>)).
                   ((<k_make_array_u_1213@40:0> = <make_array_1030@37:1>) &&
                    ((<k_make_array_u_1213@40:1> = <make_array_1030@37:0>) && (<k_make_array_u_1213@40:3> = false)))
                   [(not <k_make_array_u_1213@40:3>).(<fail_1553@43:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(286)[2]
    horn clauses:
      P[<fail_1553@43:0>](<fail_1553@43:0>:bool)|- bot
      
      P[<k_make_array_u_1213@40:3>](<k_make_array_u_1213@40:0>:int,<k_make_array_u_1213@40:1>:int,false:bool),
      <fail_1553@43:0> |- P[<fail_1553@43:0>](<fail_1553@43:0>:bool)
      
      P[<make_array_1030@37:1>](<k_make_array_u_1213@40:1>:int,<k_make_array_u_1213@40:0>:int),
      ((0 > <k_make_array_u_1213@40:0>) && (not <k_make_array_u_1213@40:3>))
      |- P[<k_make_array_u_1213@40:3>](<k_make_array_u_1213@40:0>:int,
                                       <k_make_array_u_1213@40:1>:int,
                                       <k_make_array_u_1213@40:3>:bool)
      
      P[<k_main_1397@15:4>](<f_k_main_1547@23:1>:int,<init_1038@18:0>:int,<make_array_1030@37:0>:int,true:bool),
      P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<make_array_1030@37:0>:int,<make_array_1030@37:1>:int)|- P[<make_array_1030@37:1>](
      <make_array_1030@37:0>:int,<make_array_1030@37:1>:int)
      
      P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
      P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int),
      (<init_1038@18:0> >= <init_1038@18:1>)
      |- P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                    <<init_1038@18:2>@35:0>:int)
      
      P[<k_main_1397@15:4>](<f_k_main_1547@23:1>:int,<init_1038@18:0>:int,<init_1038@18:1>:int,true:bool),
      P[<<f_k_main_1547@23:5>@31:0>](true:bool,<f_k_main_1547@23:1>:int,<init_1038@18:0>:int,<init_1038@18:1>:int,<<<init_1038@18:3>@21:0>@33:0>:int),
      P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int)|- P[<<<init_1038@18:3>@21:0>@33:0>](
      <init_1038@18:0>:int,<init_1038@18:1>:int,<<<init_1038@18:3>@21:0>@33:0>:int)
      
      P[<f_k_main_1547@23:3>](<f_k_main_1547@23:0>:bool,<f_k_main_1547@23:1>:int,<f_k_main_1547@23:2>:int,<f_k_main_1547@23:3>:int),
      P[<<k_main_1447@26:5>@29:0>](<f_k_main_1547@23:0>:bool,<f_k_main_1547@23:1>:int,<f_k_main_1547@23:2>:int,<f_k_main_1547@23:3>:int,<<f_k_main_1547@23:5>@31:0>:int),
      (0 <= <f_k_main_1547@23:1>)
      |- P[<<f_k_main_1547@23:5>@31:0>](<f_k_main_1547@23:0>:bool,<f_k_main_1547@23:1>:int,
                                        <f_k_main_1547@23:2>:int,<f_k_main_1547@23:3>:int,
                                        <<f_k_main_1547@23:5>@31:0>:int)
      
      P[<k_main_1447@26:6>](<k_main_1447@26:0>:bool,<k_main_1447@26:1>:int,<k_main_1447@26:2>:int,<k_main_1447@26:3>:int,true:bool),
      (<<k_main_1447@26:5>@29:0> = <k_main_1447@26:1>)
      |- P[<<k_main_1447@26:5>@29:0>](<k_main_1447@26:0>:bool,<k_main_1447@26:1>:int,
                                      <k_main_1447@26:2>:int,<k_main_1447@26:3>:int,
                                      <<k_main_1447@26:5>@29:0>:int)
      
      P[<f_k_main_1547@23:3>](<k_main_1447@26:0>:bool,<k_main_1447@26:1>:int,<k_main_1447@26:2>:int,<k_main_1447@26:3>:int),
      ((0 <= <k_main_1447@26:1>) && (<k_main_1447@26:6> = (<k_main_1447@26:1> < <k_main_1447@26:3>)))
      |- P[<k_main_1447@26:6>](<k_main_1447@26:0>:bool,<k_main_1447@26:1>:int,
                               <k_main_1447@26:2>:int,<k_main_1447@26:3>:int,
                               <k_main_1447@26:6>:bool)
      
      P[<k_main_1397@15:4>](<f_k_main_1547@23:1>:int,<f_k_main_1547@23:2>:int,<f_k_main_1547@23:3>:int,<f_k_main_1547@23:0>:bool),
      <f_k_main_1547@23:0>
      |- P[<f_k_main_1547@23:3>](<f_k_main_1547@23:0>:bool,<f_k_main_1547@23:1>:int,
                                 <f_k_main_1547@23:2>:int,<f_k_main_1547@23:3>:int)
      
      P[<k_main_1397@15:4>](<k_main_1397@15:0>:int,<init_1038@18:0>:int,<init_1038@18:1>:int,true:bool)|- P[<init_1038@18:1>](
      <init_1038@18:0>:int,<init_1038@18:1>:int)
      
      P[<main_1042@12:2>](<k_main_1397@15:1>:int,<k_main_1397@15:2>:int,<k_main_1397@15:0>:int),
      ((<k_main_1397@15:1> >= 0) && (<k_main_1397@15:4> = (<k_main_1397@15:1> <= 0)))
      |- P[<k_main_1397@15:4>](<k_main_1397@15:0>:int,<k_main_1397@15:1>:int,
                               <k_main_1397@15:2>:int,<k_main_1397@15:4>:bool)
      
      P[<f_1551@10:2>](<main_1042@12:0>:int,<main_1042@12:1>:int,<main_1042@12:2>:int)|- P[<main_1042@12:2>](
      <main_1042@12:0>:int,<main_1042@12:1>:int,<main_1042@12:2>:int)
      
      P[<f_1550@7:1>](<f_1551@10:0>:int,<f_1551@10:1>:int)|- P[<f_1551@10:2>](
      <f_1551@10:0>:int,<f_1551@10:1>:int,<f_1551@10:2>:int)
      
      P[<f_1549@4:0>](<f_1550@7:0>:int)|- P[<f_1550@7:1>](<f_1550@7:0>:int,
                                                          <f_1550@7:1>:int)
      
      |- P[<f_1549@4:0>](<f_1549@4:0>:int)
    call trees:
      <main_1546@1>
        <f_1549@4>
          <f_1550@7>
            <f_1551@10>
              <main_1042@12>
                <k_main_1397@15>
                  <init_1038@18>
                  </<init_1038@18:3>@21>
                  <f_k_main_1547@23>
                    <k_main_1447@26>
                    </<k_main_1447@26:5>@29>
                  </<f_k_main_1547@23:5>@31>
                  <<<init_1038@18:3>@21:0>@33>
                  </<init_1038@18:2>@35>
                  <make_array_1030@37>
                    <k_make_array_u_1213@40>
                      <fail_1553@43>
    inlined horn clauses:
      P[<fail_1553@43:0>](<fail_1553@43:0>:bool)|- bot
      
      P[<<init_1038@18:2>@35:0>](0:int,<k_make_array_u_1213@40:1>:int,<k_make_array_u_1213@40:0>:int),
      ((0 > <k_make_array_u_1213@40:0>) && <fail_1553@43:0>) |- P[<fail_1553@43:0>](
      <fail_1553@43:0>:bool)
      
      P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
      P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int),
      (<init_1038@18:0> >= <init_1038@18:1>)
      |- P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                    <<init_1038@18:2>@35:0>:int)
      
      P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
      ((<init_1038@18:0> = 0) &&
       ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
      |- P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                           <<<init_1038@18:3>@21:0>@33:0>:int)
      
       (<init_1038@18:0> = 0) |- P[<init_1038@18:1>](<init_1038@18:0>:int,
                                                     <init_1038@18:1>:int)
    begin ParamSubstInfer.infer(2924)[3]
      
    end ParamSubstInfer.infer(2924)[3] (0.060990 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(2926)[3]
      
    end RefTypeInfer.elim_coeffs(2926)[3] (0.000999 sec.)
    begin GenHcSolver.solve(3162)[3]
      Horn clauses:
        P[<fail_1553@43:0>](<fail_1553@43:0>:bool)|- bot
        
        P[<<init_1038@18:2>@35:0>](0:int,<k_make_array_u_1213@40:1>:int,<k_make_array_u_1213@40:0>:int),
        ((0 > <k_make_array_u_1213@40:0>) && <fail_1553@43:0>) |- P[<fail_1553@43:0>](
        <fail_1553@43:0>:bool)
        
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
        P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int),
        (<init_1038@18:0> >= <init_1038@18:1>)
        |- P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                      <<init_1038@18:2>@35:0>:int)
        
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
        ((<init_1038@18:0> = 0) &&
         ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
        |- P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                             <<<init_1038@18:3>@21:0>@33:0>:int)
        
         (<init_1038@18:0> = 0) |- P[<init_1038@18:1>](<init_1038@18:0>:int,
                                                       <init_1038@18:1>:int)
      lower bounds:
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int) = (<init_1038@18:0> = 0)
        P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<<init_1038@18:3>@21:0>@33:0>:int) =
        ((<init_1038@18:0> = 0) &&
         ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
        P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int) =
        ((<init_1038@18:0> = 0) &&
         ((<init_1038@18:0> >= <init_1038@18:1>) &&
          ((0 <= <<init_1038@18:2>@35:0>) && (<<init_1038@18:2>@35:0> < <init_1038@18:1>))))
        P[<fail_1553@43:0>](<fail_1553@43:0>:bool) = false
      upper bounds:
        P[<fail_1553@43:0>](var6:bool) = true
      begin GenHcSolver.classify_pids(5115)[4]
        output:
          [<fail_1553@43:0>]
      end GenHcSolver.classify_pids(5115)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(5118)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(5119)[5]
          begin InterpProver.interpolate_fresh(5120)[6]
            begin InterpProver.interpolate_log(5121)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(5122)[8]
                begin InterpProver.interpolate_simplify(5123)[9]
                  begin InterpProver.interpolate_quick(5136)[10]
                    
                  end InterpProver.interpolate_quick(5136)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(5140)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(5140)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5123)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5122)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(5121)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(5120)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(5119)[5] (0.000000 sec.)
        output:
          P[<fail_1553@43:0>](<fail_1553@43:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(5118)[4] (0.001000 sec.)
      Horn clauses:
        P[<<init_1038@18:2>@35:0>](0:int,<k_make_array_u_1213@40:1>:int,<k_make_array_u_1213@40:0>:int),
        (0 > <k_make_array_u_1213@40:0>) |- bot
        
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
        P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int),
        (<init_1038@18:0> >= <init_1038@18:1>)
        |- P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                      <<init_1038@18:2>@35:0>:int)
        
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
        ((<init_1038@18:0> = 0) &&
         ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
        |- P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                             <<<init_1038@18:3>@21:0>@33:0>:int)
        
         (<init_1038@18:0> = 0) |- P[<init_1038@18:1>](<init_1038@18:0>:int,
                                                       <init_1038@18:1>:int)
      lower bounds:
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int) = (<init_1038@18:0> = 0)
        P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<<init_1038@18:3>@21:0>@33:0>:int) =
        ((<init_1038@18:0> = 0) &&
         ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
        P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int) =
        ((<init_1038@18:0> = 0) &&
         ((<init_1038@18:0> >= <init_1038@18:1>) &&
          ((0 <= <<init_1038@18:2>@35:0>) && (<<init_1038@18:2>@35:0> < <init_1038@18:1>))))
      upper bounds:
        P[<<init_1038@18:2>@35:0>](var7:int,var8:int,var9:int) = ((var7 <> 0) || (0 <= var9))
      begin GenHcSolver.classify_pids(7378)[4]
        output:
          [<<init_1038@18:2>@35:0>]
      end GenHcSolver.classify_pids(7378)[4] (0.000000 sec.)
      lb:((<init_1038@18:0> = 0) &&
          ((<init_1038@18:0> >= <init_1038@18:1>) &&
           ((0 <= <<init_1038@18:2>@35:0>) && (<<init_1038@18:2>@35:0> < <init_1038@18:1>))))
      nub:(not ((<init_1038@18:0> <> 0) || (0 <= <<init_1038@18:2>@35:0>)))
      begin ApronInterface.convex_hull_interpolate(7381)[4]
        lb:((<init_1038@18:0> = 0) &&
            ((<init_1038@18:0> >= <init_1038@18:1>) &&
             ((0 <= <<init_1038@18:2>@35:0>) && (<<init_1038@18:2>@35:0> < <init_1038@18:1>))))
        nub:(not ((<init_1038@18:0> <> 0) || (0 <= <<init_1038@18:2>@35:0>)))
        lb':((<init_1038@18:0> = 0) &&
             ((<init_1038@18:0> >= <init_1038@18:1>) &&
              ((0 <= <<init_1038@18:2>@35:0>) && (<<init_1038@18:2>@35:0> < <init_1038@18:1>))))
        nub':(not ((<init_1038@18:0> <> 0) || (0 <= <<init_1038@18:2>@35:0>)))
        begin InterpProver.interpolate(7382)[5]
          begin InterpProver.interpolate_fresh(7383)[6]
            begin InterpProver.interpolate_log(7384)[7]
              input1: ((<init_1038@18:0> = 0) &&
                       ((<init_1038@18:0> >= <init_1038@18:1>) &&
                        ((0 <= <<init_1038@18:2>@35:0>) && (<<init_1038@18:2>@35:0> < <init_1038@18:1>))))
              input2: (not ((<init_1038@18:0> <> 0) || (0 <= <<init_1038@18:2>@35:0>)))
              begin InterpProver.interpolate_check(7385)[8]
                begin InterpProver.interpolate_simplify(7386)[9]
                  begin InterpProver.interpolate_quick(7499)[10]
                    
                  end InterpProver.interpolate_quick(7499)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(7506)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(7506)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(7386)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(7385)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(7384)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(7383)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(7382)[5] (0.001000 sec.)
        output:
          P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int) = false
      end ApronInterface.convex_hull_interpolate(7381)[4] (0.001000 sec.)
      Horn clauses:
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
        P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int),
        (<init_1038@18:0> >= <init_1038@18:1>) |- bot
        
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
        ((<init_1038@18:0> = 0) &&
         ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
        |- P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                             <<<init_1038@18:3>@21:0>@33:0>:int)
        
         (<init_1038@18:0> = 0) |- P[<init_1038@18:1>](<init_1038@18:0>:int,
                                                       <init_1038@18:1>:int)
      lower bounds:
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int) = (<init_1038@18:0> = 0)
        P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<<init_1038@18:3>@21:0>@33:0>:int) =
        ((<init_1038@18:0> = 0) &&
         ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
      upper bounds:
        P[<<<init_1038@18:3>@21:0>@33:0>](var10:int,var11:int,var12:int) = ((var10 <> 0) || (0 < var11))
      begin GenHcSolver.classify_pids(9065)[4]
        output:
          [<<<init_1038@18:3>@21:0>@33:0>]
      end GenHcSolver.classify_pids(9065)[4] (0.000000 sec.)
      lb:((<init_1038@18:0> = 0) &&
          ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
      nub:(not ((<init_1038@18:0> <> 0) || (0 < <init_1038@18:1>)))
      begin ApronInterface.convex_hull_interpolate(9068)[4]
        lb:((<init_1038@18:0> = 0) &&
            ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
        nub:(not ((<init_1038@18:0> <> 0) || (0 < <init_1038@18:1>)))
        lb':((<init_1038@18:0> = 0) &&
             ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
        nub':(not ((<init_1038@18:0> <> 0) || (0 < <init_1038@18:1>)))
        begin InterpProver.interpolate(9069)[5]
          begin InterpProver.interpolate_fresh(9070)[6]
            begin InterpProver.interpolate_log(9071)[7]
              input1: ((<init_1038@18:0> = 0) &&
                       ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
              input2: (not ((<init_1038@18:0> <> 0) || (0 < <init_1038@18:1>)))
              begin InterpProver.interpolate_check(9072)[8]
                begin InterpProver.interpolate_simplify(9073)[9]
                  begin InterpProver.interpolate_quick(9146)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(9155)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(9156)[12]
                        begin CsisatInterface.interpolate_csisat_log(9157)[13]
                          input1: (0 = v_sep_init_1038_sep_18_sep_0 & 0 <= v_sep_init_1038_sep_18_sep_3_sep_21_sep_0_sep_33_sep_0 & (1 + v_sep_init_1038_sep_18_sep_3_sep_21_sep_0_sep_33_sep_0) <= v_sep_init_1038_sep_18_sep_1)
                          input2: (0 = v_sep_init_1038_sep_18_sep_0 & v_sep_init_1038_sep_18_sep_1 <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(9158)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(9158)[14] (0.000000 sec.)
                          output: -2*v_sep_init_1038_sep_18_sep_1 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(9157)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_init_1038_sep_18_sep_1 <= -2
                        after dnf conversion: ((-2*v_sep_init_1038_sep_18_sep_1 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(9156)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(9155)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(9146)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(9073)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(9072)[8] (0.002000 sec.)
              output: (1 <= <init_1038@18:1>)
            end InterpProver.interpolate_log(9071)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(9070)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(9069)[5] (0.002000 sec.)
        output:
          P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<<init_1038@18:3>@21:0>@33:0>:int) =
          (1 <= <init_1038@18:1>)
      end ApronInterface.convex_hull_interpolate(9068)[4] (0.002000 sec.)
      Horn clauses:
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
        ((<init_1038@18:0> >= <init_1038@18:1>) && (1 <= <init_1038@18:1>)) |- bot
        
         (<init_1038@18:0> = 0) |- P[<init_1038@18:1>](<init_1038@18:0>:int,
                                                       <init_1038@18:1>:int)
      lower bounds:
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int) = (<init_1038@18:0> = 0)
      upper bounds:
        P[<init_1038@18:1>](var13:int,var14:int) = ((var13 < var14) || (1 > var14))
      begin GenHcSolver.classify_pids(10260)[4]
        output:
          [<init_1038@18:1>]
      end GenHcSolver.classify_pids(10260)[4] (0.000000 sec.)
      lb:(<init_1038@18:0> = 0)
      nub:(not ((<init_1038@18:0> < <init_1038@18:1>) || (1 > <init_1038@18:1>)))
      begin ApronInterface.convex_hull_interpolate(10263)[4]
        lb:(<init_1038@18:0> = 0)
        nub:(not ((<init_1038@18:0> < <init_1038@18:1>) || (1 > <init_1038@18:1>)))
        lb':(<init_1038@18:0> = 0)
        nub':(not ((<init_1038@18:0> < <init_1038@18:1>) || (1 > <init_1038@18:1>)))
        begin InterpProver.interpolate(10264)[5]
          begin InterpProver.interpolate_fresh(10265)[6]
            begin InterpProver.interpolate_log(10266)[7]
              input1: (<init_1038@18:0> = 0)
              input2: (not ((<init_1038@18:0> < <init_1038@18:1>) || (1 > <init_1038@18:1>)))
              begin InterpProver.interpolate_check(10267)[8]
                begin InterpProver.interpolate_simplify(10268)[9]
                  begin InterpProver.interpolate_quick(10313)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(10322)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(10323)[12]
                        begin CsisatInterface.interpolate_csisat_log(10324)[13]
                          input1: 0 = v_sep_init_1038_sep_18_sep_0
                          input2: (1 <= v_sep_init_1038_sep_18_sep_1 & v_sep_init_1038_sep_18_sep_1 <= v_sep_init_1038_sep_18_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(10325)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(10325)[14] (0.000000 sec.)
                          output: 2*v_sep_init_1038_sep_18_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(10324)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_init_1038_sep_18_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_init_1038_sep_18_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(10323)[12] (0.000999 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(10322)[11] (0.000999 sec.)
                    
                  end InterpProver.interpolate_quick(10313)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(10268)[9] (0.001999 sec.)
                
              end InterpProver.interpolate_check(10267)[8] (0.001999 sec.)
              output: (<init_1038@18:0> <= 0)
            end InterpProver.interpolate_log(10266)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(10265)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(10264)[5] (0.001999 sec.)
        output:
          P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int) = (<init_1038@18:0> <= 0)
      end ApronInterface.convex_hull_interpolate(10263)[4] (0.001999 sec.)
      begin HcSolver.check_validity(10492)[4]
        input:
          P[<fail_1553@43:0>](<fail_1553@43:0>:bool)|- bot
          
          P[<<init_1038@18:2>@35:0>](0:int,<k_make_array_u_1213@40:1>:int,<k_make_array_u_1213@40:0>:int),
          ((0 > <k_make_array_u_1213@40:0>) && <fail_1553@43:0>) |- P[<fail_1553@43:0>](
          <fail_1553@43:0>:bool)
          
          P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
          P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int),
          (<init_1038@18:0> >= <init_1038@18:1>)
          |- P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                        <<init_1038@18:2>@35:0>:int)
          
          P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
          ((<init_1038@18:0> = 0) &&
           ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
          |- P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                               <<<init_1038@18:3>@21:0>@33:0>:int)
          
           (<init_1038@18:0> = 0) |- P[<init_1038@18:1>](<init_1038@18:0>:int,
                                                         <init_1038@18:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(10492)[4] (0.004000 sec.)
      solution:
        P[<fail_1553@43:0>](<fail_1553@43:0>:bool) = false
        P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int) = false
        P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<<init_1038@18:3>@21:0>@33:0>:int) =
        (1 <= <init_1038@18:1>)
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int) = (<init_1038@18:0> <= 0)
    end GenHcSolver.solve(3162)[3] (0.050993 sec.)
    begin GenHcSolver.solve(11106)[3]
      Horn clauses:
        P[<fail_1553@43:0>](<fail_1553@43:0>:bool)|- bot
        
        P[<<init_1038@18:2>@35:0>](0:int,<k_make_array_u_1213@40:1>:int,<k_make_array_u_1213@40:0>:int),
        ((0 > <k_make_array_u_1213@40:0>) && <fail_1553@43:0>) |- P[<fail_1553@43:0>](
        <fail_1553@43:0>:bool)
        
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
        P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int),
        (<init_1038@18:0> >= <init_1038@18:1>)
        |- P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                      <<init_1038@18:2>@35:0>:int)
        
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
        ((<init_1038@18:0> = 0) &&
         ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
        |- P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                             <<<init_1038@18:3>@21:0>@33:0>:int)
        
         (<init_1038@18:0> = 0) |- P[<init_1038@18:1>](<init_1038@18:0>:int,
                                                       <init_1038@18:1>:int)
      lower bounds:
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int) = (<init_1038@18:0> = 0)
        P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<<init_1038@18:3>@21:0>@33:0>:int) =
        ((<init_1038@18:0> = 0) &&
         ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
        P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int) =
        ((<init_1038@18:0> = 0) &&
         ((<init_1038@18:0> >= <init_1038@18:1>) &&
          ((0 <= <<init_1038@18:2>@35:0>) && (<<init_1038@18:2>@35:0> < <init_1038@18:1>))))
        P[<fail_1553@43:0>](<fail_1553@43:0>:bool) = false
      upper bounds:
        P[<fail_1553@43:0>](var16:bool) = true
      begin GenHcSolver.classify_pids(13059)[4]
        output:
          [<fail_1553@43:0>]
      end GenHcSolver.classify_pids(13059)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(13062)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(13065)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(13065)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(13070)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(13070)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(13073)[5]
          begin InterpProver.interpolate_fresh(13074)[6]
            begin InterpProver.interpolate_log(13075)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(13076)[8]
                begin InterpProver.interpolate_simplify(13077)[9]
                  begin InterpProver.interpolate_quick(13092)[10]
                    
                  end InterpProver.interpolate_quick(13092)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(13096)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(13096)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(13077)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(13076)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(13075)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(13074)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(13073)[5] (0.001000 sec.)
        output:
          P[<fail_1553@43:0>](<fail_1553@43:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(13062)[4] (0.001000 sec.)
      Horn clauses:
        P[<<init_1038@18:2>@35:0>](0:int,<k_make_array_u_1213@40:1>:int,<k_make_array_u_1213@40:0>:int),
        (0 > <k_make_array_u_1213@40:0>) |- bot
        
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
        P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int),
        (<init_1038@18:0> >= <init_1038@18:1>)
        |- P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                      <<init_1038@18:2>@35:0>:int)
        
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
        ((<init_1038@18:0> = 0) &&
         ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
        |- P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                             <<<init_1038@18:3>@21:0>@33:0>:int)
        
         (<init_1038@18:0> = 0) |- P[<init_1038@18:1>](<init_1038@18:0>:int,
                                                       <init_1038@18:1>:int)
      lower bounds:
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int) = (<init_1038@18:0> = 0)
        P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<<init_1038@18:3>@21:0>@33:0>:int) =
        ((<init_1038@18:0> = 0) &&
         ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
        P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int) =
        ((<init_1038@18:0> = 0) &&
         ((<init_1038@18:0> >= <init_1038@18:1>) &&
          ((0 <= <<init_1038@18:2>@35:0>) && (<<init_1038@18:2>@35:0> < <init_1038@18:1>))))
      upper bounds:
        P[<<init_1038@18:2>@35:0>](var17:int,var18:int,var19:int) = ((var17 <> 0) || (0 <= var19))
      begin GenHcSolver.classify_pids(15341)[4]
        output:
          [<<init_1038@18:2>@35:0>]
      end GenHcSolver.classify_pids(15341)[4] (0.000000 sec.)
      lb:((<init_1038@18:0> = 0) &&
          ((<init_1038@18:0> >= <init_1038@18:1>) &&
           ((0 <= <<init_1038@18:2>@35:0>) && (<<init_1038@18:2>@35:0> < <init_1038@18:1>))))
      nub:(not ((<init_1038@18:0> <> 0) || (0 <= <<init_1038@18:2>@35:0>)))
      begin ApronInterface.convex_hull_interpolate(15344)[4]
        lb:((<init_1038@18:0> = 0) &&
            ((<init_1038@18:0> >= <init_1038@18:1>) &&
             ((0 <= <<init_1038@18:2>@35:0>) && (<<init_1038@18:2>@35:0> < <init_1038@18:1>))))
        nub:(not ((<init_1038@18:0> <> 0) || (0 <= <<init_1038@18:2>@35:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(15390)[5]
          ts: ((<init_1038@18:0> = 0) &&
               ((<init_1038@18:0> >= <init_1038@18:1>) &&
                ((0 <= <<init_1038@18:2>@35:0>) && (<<init_1038@18:2>@35:0> < <init_1038@18:1>))))
          
        end ExtFormula.Formula.case_analysis_boolean(15390)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(15408)[5]
          ts: ((<init_1038@18:0> = 0) && (0 > <<init_1038@18:2>@35:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(15408)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':((<init_1038@18:0> = 0) && ((-1 + (-1 * <<init_1038@18:2>@35:0>)) >= 0))
        begin InterpProver.interpolate(15413)[5]
          begin InterpProver.interpolate_fresh(15414)[6]
            begin InterpProver.interpolate_log(15415)[7]
              input1: (-1 >= 0)
              input2: ((<init_1038@18:0> = 0) && ((-1 + (-1 * <<init_1038@18:2>@35:0>)) >= 0))
              begin InterpProver.interpolate_check(15416)[8]
                begin InterpProver.interpolate_simplify(15417)[9]
                  begin InterpProver.interpolate_quick(15457)[10]
                    
                  end InterpProver.interpolate_quick(15457)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(15461)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(15461)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(15417)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(15416)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(15415)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(15414)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(15413)[5] (0.001000 sec.)
        output:
          P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int) = false
      end ApronInterface.convex_hull_interpolate(15344)[4] (0.001000 sec.)
      Horn clauses:
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
        P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int),
        (<init_1038@18:0> >= <init_1038@18:1>) |- bot
        
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
        ((<init_1038@18:0> = 0) &&
         ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
        |- P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                             <<<init_1038@18:3>@21:0>@33:0>:int)
        
         (<init_1038@18:0> = 0) |- P[<init_1038@18:1>](<init_1038@18:0>:int,
                                                       <init_1038@18:1>:int)
      lower bounds:
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int) = (<init_1038@18:0> = 0)
        P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<<init_1038@18:3>@21:0>@33:0>:int) =
        ((<init_1038@18:0> = 0) &&
         ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
      upper bounds:
        P[<<<init_1038@18:3>@21:0>@33:0>](var20:int,var21:int,var22:int) = ((var20 <> 0) || (0 < var21))
      begin GenHcSolver.classify_pids(17022)[4]
        output:
          [<<<init_1038@18:3>@21:0>@33:0>]
      end GenHcSolver.classify_pids(17022)[4] (0.000000 sec.)
      lb:((<init_1038@18:0> = 0) &&
          ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
      nub:(not ((<init_1038@18:0> <> 0) || (0 < <init_1038@18:1>)))
      begin ApronInterface.convex_hull_interpolate(17025)[4]
        lb:((<init_1038@18:0> = 0) &&
            ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
        nub:(not ((<init_1038@18:0> <> 0) || (0 < <init_1038@18:1>)))
        begin ExtFormula.Formula.case_analysis_boolean(17051)[5]
          ts: ((<init_1038@18:0> = 0) &&
               ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
          
        end ExtFormula.Formula.case_analysis_boolean(17051)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(17067)[5]
          ts: ((<init_1038@18:0> = 0) && (0 >= <init_1038@18:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(17067)[5] (0.000000 sec.)
        lb':((<init_1038@18:0> = 0) &&
             ((<<<init_1038@18:3>@21:0>@33:0> >= 0) &&
              (((-1 + (-1 * <<<init_1038@18:3>@21:0>@33:0>)) + <init_1038@18:1>) >= 0)))
        nub':((<init_1038@18:0> = 0) && ((-1 * <init_1038@18:1>) >= 0))
        begin InterpProver.interpolate(17072)[5]
          begin InterpProver.interpolate_fresh(17073)[6]
            begin InterpProver.interpolate_log(17074)[7]
              input1: ((<init_1038@18:0> = 0) &&
                       ((<<<init_1038@18:3>@21:0>@33:0> >= 0) &&
                        (((-1 + (-1 * <<<init_1038@18:3>@21:0>@33:0>)) + <init_1038@18:1>) >= 0)))
              input2: ((<init_1038@18:0> = 0) && ((-1 * <init_1038@18:1>) >= 0))
              begin InterpProver.interpolate_check(17075)[8]
                begin InterpProver.interpolate_simplify(17076)[9]
                  begin InterpProver.interpolate_quick(17159)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(17168)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(17169)[12]
                        begin CsisatInterface.interpolate_csisat_log(17170)[13]
                          input1: (0 = v_sep_init_1038_sep_18_sep_0 & 0 <= v_sep_init_1038_sep_18_sep_3_sep_21_sep_0_sep_33_sep_0 & (1 + v_sep_init_1038_sep_18_sep_3_sep_21_sep_0_sep_33_sep_0) <= v_sep_init_1038_sep_18_sep_1)
                          input2: (0 = v_sep_init_1038_sep_18_sep_0 & v_sep_init_1038_sep_18_sep_1 <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(17171)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(17171)[14] (0.000000 sec.)
                          output: -2*v_sep_init_1038_sep_18_sep_1 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(17170)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_init_1038_sep_18_sep_1 <= -2
                        after dnf conversion: ((-2*v_sep_init_1038_sep_18_sep_1 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(17169)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(17168)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(17159)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(17076)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(17075)[8] (0.001000 sec.)
              output: (1 <= <init_1038@18:1>)
            end InterpProver.interpolate_log(17074)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(17073)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(17072)[5] (0.001000 sec.)
        output:
          P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<<init_1038@18:3>@21:0>@33:0>:int) =
          (1 <= <init_1038@18:1>)
      end ApronInterface.convex_hull_interpolate(17025)[4] (0.001999 sec.)
      Horn clauses:
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
        ((<init_1038@18:0> >= <init_1038@18:1>) && (1 <= <init_1038@18:1>)) |- bot
        
         (<init_1038@18:0> = 0) |- P[<init_1038@18:1>](<init_1038@18:0>:int,
                                                       <init_1038@18:1>:int)
      lower bounds:
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int) = (<init_1038@18:0> = 0)
      upper bounds:
        P[<init_1038@18:1>](var23:int,var24:int) = ((var23 < var24) || (1 > var24))
      begin GenHcSolver.classify_pids(18273)[4]
        output:
          [<init_1038@18:1>]
      end GenHcSolver.classify_pids(18273)[4] (0.000000 sec.)
      lb:(<init_1038@18:0> = 0)
      nub:(not ((<init_1038@18:0> < <init_1038@18:1>) || (1 > <init_1038@18:1>)))
      begin ApronInterface.convex_hull_interpolate(18276)[4]
        lb:(<init_1038@18:0> = 0)
        nub:(not ((<init_1038@18:0> < <init_1038@18:1>) || (1 > <init_1038@18:1>)))
        begin ExtFormula.Formula.case_analysis_boolean(18280)[5]
          ts: (<init_1038@18:0> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(18280)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(18301)[5]
          ts: ((<init_1038@18:0> >= <init_1038@18:1>) && (1 <= <init_1038@18:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(18301)[5] (0.000000 sec.)
        lb':(<init_1038@18:0> = 0)
        nub':(((-1 + <init_1038@18:1>) >= 0) && (((-1 * <init_1038@18:1>) + <init_1038@18:0>) >= 0))
        begin InterpProver.interpolate(18308)[5]
          begin InterpProver.interpolate_fresh(18309)[6]
            begin InterpProver.interpolate_log(18310)[7]
              input1: (<init_1038@18:0> = 0)
              input2: (((-1 + <init_1038@18:1>) >= 0) && (((-1 * <init_1038@18:1>) + <init_1038@18:0>) >= 0))
              begin InterpProver.interpolate_check(18311)[8]
                begin InterpProver.interpolate_simplify(18312)[9]
                  begin InterpProver.interpolate_quick(18357)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(18366)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(18367)[12]
                        begin CsisatInterface.interpolate_csisat_log(18368)[13]
                          input1: 0 = v_sep_init_1038_sep_18_sep_0
                          input2: (1 <= v_sep_init_1038_sep_18_sep_1 & v_sep_init_1038_sep_18_sep_1 <= v_sep_init_1038_sep_18_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(18369)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(18369)[14] (0.000000 sec.)
                          output: 2*v_sep_init_1038_sep_18_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(18368)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_init_1038_sep_18_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_init_1038_sep_18_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(18367)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(18366)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(18357)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(18312)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(18311)[8] (0.002000 sec.)
              output: (<init_1038@18:0> <= 0)
            end InterpProver.interpolate_log(18310)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(18309)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(18308)[5] (0.002000 sec.)
        output:
          P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int) = (<init_1038@18:0> <= 0)
      end ApronInterface.convex_hull_interpolate(18276)[4] (0.002000 sec.)
      begin HcSolver.check_validity(18536)[4]
        input:
          P[<fail_1553@43:0>](<fail_1553@43:0>:bool)|- bot
          
          P[<<init_1038@18:2>@35:0>](0:int,<k_make_array_u_1213@40:1>:int,<k_make_array_u_1213@40:0>:int),
          ((0 > <k_make_array_u_1213@40:0>) && <fail_1553@43:0>) |- P[<fail_1553@43:0>](
          <fail_1553@43:0>:bool)
          
          P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
          P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int),
          (<init_1038@18:0> >= <init_1038@18:1>)
          |- P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                        <<init_1038@18:2>@35:0>:int)
          
          P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
          ((<init_1038@18:0> = 0) &&
           ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
          |- P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                               <<<init_1038@18:3>@21:0>@33:0>:int)
          
           (<init_1038@18:0> = 0) |- P[<init_1038@18:1>](<init_1038@18:0>:int,
                                                         <init_1038@18:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(18536)[4] (0.003999 sec.)
      solution:
        P[<fail_1553@43:0>](<fail_1553@43:0>:bool) = false
        P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int) = false
        P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<<init_1038@18:3>@21:0>@33:0>:int) =
        (1 <= <init_1038@18:1>)
        P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int) = (<init_1038@18:0> <= 0)
    end GenHcSolver.solve(11106)[3] (0.041993 sec.)
    begin YhornInterface.solve(19150)[3]
      begin HcSolver.solve_ub(19151)[4]
        encoded:
          P[<fail_1553@43:0>](<fail_1553@43:0>:int)|- bot
          
          P[<<init_1038@18:2>@35:0>](0:int,<k_make_array_u_1213@40:1>:int,<k_make_array_u_1213@40:0>:int),
          ((0 > <k_make_array_u_1213@40:0>) && (<fail_1553@43:0> = 1)) |- P[<fail_1553@43:0>](
          <fail_1553@43:0>:int)
          
          P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
          P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int),
          (<init_1038@18:0> >= <init_1038@18:1>)
          |- P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                        <<init_1038@18:2>@35:0>:int)
          
          P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
          ((<init_1038@18:0> = 0) &&
           ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
          |- P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                               <<<init_1038@18:3>@21:0>@33:0>:int)
          
           (<init_1038@18:0> = 0) |- P[<init_1038@18:1>](<init_1038@18:0>:int,
                                                         <init_1038@18:1>:int)
        input to Yhorn:
          P[<fail_1553@43:0>](<fail_1553@43:0>:int)|- bot
          
          P[<<init_1038@18:2>@35:0>](var25:int,<k_make_array_u_1213@40:1>:int,<k_make_array_u_1213@40:0>:int),
          ((0 > <k_make_array_u_1213@40:0>) && ((var25 = 0) && (<fail_1553@43:0> = 1)))
          |- P[<fail_1553@43:0>](<fail_1553@43:0>:int)
          
          P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
          P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int),
          (<init_1038@18:0> >= <init_1038@18:1>)
          |- P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                        <<init_1038@18:2>@35:0>:int)
          
          P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
          ((<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>) &&
           ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<init_1038@18:0> = 0)))
          |- P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                               <<<init_1038@18:3>@21:0>@33:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1553_sep_43_sep_0($9)) -> 1=0.
(($9-1=0) & ($10=0) & (-$11>0)) & (v_sep_init_1038_sep_18_sep_2_sep_35_sep_0($10,$12,$11)) -> v_sep_fail_1553_sep_43_sep_0($9).
($13-$14>=0) & (v_sep_init_1038_sep_18_sep_3_sep_21_sep_0_sep_33_sep_0($13,$14,$15)) & (v_sep_init_1038_sep_18_sep_1($13,$14)) -> v_sep_init_1038_sep_18_sep_2_sep_35_sep_0($13,$14,$15).
(($13=0) & (-$16<=0) & (-$14+$16<0)) & (v_sep_init_1038_sep_18_sep_1($13,$14)) -> v_sep_init_1038_sep_18_sep_3_sep_21_sep_0_sep_33_sep_0($13,$14,$16).
$13=0 -> v_sep_init_1038_sep_18_sep_1($13,$14).


v_sep_fail_1553_sep_43_sep_0: X
v_sep_init_1038_sep_18_sep_1: X
v_sep_init_1038_sep_18_sep_2_sep_35_sep_0: X
v_sep_init_1038_sep_18_sep_3_sep_21_sep_0_sep_33_sep_0: X
......
v_sep_fail_1553_sep_43_sep_0: X
v_sep_init_1038_sep_18_sep_1: X
v_sep_init_1038_sep_18_sep_2_sep_35_sep_0: X
v_sep_init_1038_sep_18_sep_3_sep_21_sep_0_sep_33_sep_0: X
...
v_sep_fail_1553_sep_43_sep_0: X
v_sep_init_1038_sep_18_sep_1: X
v_sep_init_1038_sep_18_sep_2_sep_35_sep_0: X
v_sep_init_1038_sep_18_sep_3_sep_21_sep_0_sep_33_sep_0: X
.....
v_sep_fail_1553_sep_43_sep_0: X
v_sep_init_1038_sep_18_sep_1: X
v_sep_init_1038_sep_18_sep_2_sep_35_sep_0: X
v_sep_init_1038_sep_18_sep_3_sep_21_sep_0_sep_33_sep_0: X
......(0=0) & (v_sep_fail_1553_sep_43_sep_0($9)) -> 1=0.
(($9-1=0) & ($10=0) & (-$11>0)) & (v_sep_init_1038_sep_18_sep_2_sep_35_sep_0($10,$12,$11)) -> v_sep_fail_1553_sep_43_sep_0($9).
($13-$14>=0) & (v_sep_init_1038_sep_18_sep_3_sep_21_sep_0_sep_33_sep_0($13,$14,$15)) & (v_sep_init_1038_sep_18_sep_1($13,$14)) -> v_sep_init_1038_sep_18_sep_2_sep_35_sep_0($13,$14,$15).
(($13=0) & (-$16<=0) & (-$14+$16<0)) & (v_sep_init_1038_sep_18_sep_1($13,$14)) -> v_sep_init_1038_sep_18_sep_3_sep_21_sep_0_sep_33_sep_0($13,$14,$16).
$13=0 -> v_sep_init_1038_sep_18_sep_1($13,$14).

           (<init_1038@18:0> = 0) |- P[<init_1038@18:1>](<init_1038@18:0>:int,
                                                         <init_1038@18:1>:int)
        solution:
          P[<fail_1553@43:0>]($17:bool) = false
          P[<init_1038@18:1>]($34:int,$36:int) = true
          P[<<init_1038@18:2>@35:0>]($20:int,$22:int,$24:int) = (0 <= $24)
          P[<<<init_1038@18:3>@21:0>@33:0>]($27:int,$29:int,$31:int) = (0 <= $31)
        
      end HcSolver.solve_ub(19151)[4] (0.016998 sec.)
      begin HcSolver.check_validity(19334)[4]
        input:
          P[<fail_1553@43:0>](<fail_1553@43:0>:bool)|- bot
          
          P[<<init_1038@18:2>@35:0>](0:int,<k_make_array_u_1213@40:1>:int,<k_make_array_u_1213@40:0>:int),
          ((0 > <k_make_array_u_1213@40:0>) && <fail_1553@43:0>) |- P[<fail_1553@43:0>](
          <fail_1553@43:0>:bool)
          
          P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
          P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,<<init_1038@18:2>@35:0>:int),
          (<init_1038@18:0> >= <init_1038@18:1>)
          |- P[<<init_1038@18:2>@35:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                        <<init_1038@18:2>@35:0>:int)
          
          P[<init_1038@18:1>](<init_1038@18:0>:int,<init_1038@18:1>:int),
          ((<init_1038@18:0> = 0) &&
           ((0 <= <<<init_1038@18:3>@21:0>@33:0>) && (<<<init_1038@18:3>@21:0>@33:0> < <init_1038@18:1>)))
          |- P[<<<init_1038@18:3>@21:0>@33:0>](<init_1038@18:0>:int,<init_1038@18:1>:int,
                                               <<<init_1038@18:3>@21:0>@33:0>:int)
          
           (<init_1038@18:0> = 0) |- P[<init_1038@18:1>](<init_1038@18:0>:int,
                                                         <init_1038@18:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(19334)[4] (0.009998 sec.)
      solution:
        P[<fail_1553@43:0>]($17:bool) = false
        P[<init_1038@18:1>]($34:int,$36:int) = true
        P[<<init_1038@18:2>@35:0>]($20:int,$22:int,$24:int) = (0 <= $24)
        P[<<<init_1038@18:3>@21:0>@33:0>]($27:int,$29:int,$31:int) = (0 <= $31)
    end YhornInterface.solve(19150)[3] (0.026996 sec.)
    
  end RefTypeInfer.infer_etrs(286)[2] (0.197969 sec.)
  refinement types:
    main_1546: X
    f_1549: v1:int -> X
    f_1550: v1:int -> v2:int -> X
    f_1551: v1:int -> v2:int -> v3:int -> X
    main_1042: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1397: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    init_1038: v1:int ->
               v2:{v2:int | (v1 <= 0)} ->
               (v3:{v3:int | false} -> (v4:int -> X) -> X) ->
               ((v7:{v7:int | (1 <= v2)} -> (v8:int -> X) -> X) -> X) -> X
    f_k_main_1547: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:unit -> X) -> (v7:int -> (v8:int -> X) -> X) -> X
    k_main_1447: v1:bool ->
                 v2:int -> v3:int -> v4:int -> (v5:unit -> X) -> (v7:int -> (v8:int -> X) -> X) -> v11:bool -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1213: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1553: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1552: var52:int -> var51:int -> var50:int -> var49:unit -> X
    f_k_main_1548: var61:bool ->
                   var60:bool -> var59:int -> var58:int -> var57:int -> (var56:unit -> X) -> var54:int -> X
    fail_1554: var65:bool -> (var64:unit -> X) -> X
    k_make_array_u_1224: var71:int -> var70:int -> (var69:int -> X) -> var67:unit -> X
    k_update_1263: var82:int ->
                   var81:int ->
                   var80:int -> (var79:int -> (var78:int -> X) -> X) -> (var75:int -> X) -> var73:bool -> X
    update_1033: var92:int -> (var91:int -> (var90:int -> X) -> X) -> var87:int -> var86:int -> (var85:int -> X) -> X
  abstraction types:
    main_1546: X
    f_1549: v1:int -> X
    f_1550: v1:int -> v2:int -> X
    f_1551: v1:int -> v2:int -> v3:int -> X
    main_1042: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1397: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    init_1038: v1:int ->
               v2:int[v2 -> (v1 <= 0)] ->
               (v3:int -> (v4:int -> X) -> X) -> ((v7:int[v7 -> (1 <= v2)] -> (v8:int -> X) -> X) -> X) -> X
    f_k_main_1547: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:unit -> X) -> (v7:int -> (v8:int -> X) -> X) -> X
    k_main_1447: v1:bool ->
                 v2:int -> v3:int -> v4:int -> (v5:unit -> X) -> (v7:int -> (v8:int -> X) -> X) -> v11:bool -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1213: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1553: v1:bool -> (v2:unit -> X) -> X
    f_1552: var52:int -> var51:int -> var50:int -> var49:unit -> X
    f_k_main_1548: var61:bool ->
                   var60:bool -> var59:int -> var58:int -> var57:int -> (var56:unit -> X) -> var54:int -> X
    fail_1554: var65:bool -> (var64:unit -> X) -> X
    k_make_array_u_1224: var71:int -> var70:int -> (var69:int -> X) -> var67:unit -> X
    k_update_1263: var82:int ->
                   var81:int ->
                   var80:int -> (var79:int -> (var78:int -> X) -> X) -> (var75:int -> X) -> var73:bool -> X
    update_1033: var92:int -> (var91:int -> (var90:int -> X) -> X) -> var87:int -> var86:int -> (var85:int -> X) -> X
  
end AbsTypeInfer.refine(285)[1] (0.203969 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1546
  main_1546 -> (rand_int f_1549)
  f_1549 x_1487 -> (rand_int (f_1550 x_1487))
  f_1550 x_1487 x_1500 -> (rand_int (f_1551 x_1487 x_1500))
  f_1551 x_1487 x_1500 x_1513 -> (main_1042 x_1487 x_1500 x_1513 (f_1552 x_1487 x_1500 x_1513))
  f_1552 x_1487 x_1500 x_1513 x_1484 -> end
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      0 <= i_1045) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 (i_1045 < n_1044))
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      not (0 <= i_1045)) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 false)
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (x_1451 >= 1) -> (k_main_1394 ())
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (
      not (x_1451 >= 1)) -> (fail_1554 true k_main_1394)
  fail_1553 b k -> {fail} => (k ())
  fail_1554 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (i_1039 >= n_1040) -> (k_init_1322 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) k_init_1322)
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when b_1481 ->
      (init_1038 k_1043 n_1044 (make_array_1030 n_1044) (f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when (not b_1481) -> (k_main_1394 ())
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when b_1477 ->
      (x_1404 i_1045 (f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when (not b_1477) -> (k_main_1394 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when b_1225 ->
      (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when (not b_1225) ->
      (fail_1553 true (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207))
  k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 x_1210 -> (k_make_array_1207 0)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when b_1278 -> (k_update_1260 x_1036)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when (not b_1278) -> (a_1035 j_1037 k_update_1260)
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (k_1043 >= 0) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 (k_1043 <= 0))
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (not (k_1043 >= 0)) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 false)
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (0 <= i_1032) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (not (0 <= i_1032)) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 false)
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (j_1037 > (i_1034 - 1)) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 (j_1037 <= i_1034))
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (not (j_1037 > (i_1034 - 1))) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 false)
Types:
  main_1546 : X
  fail_1553 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1554 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1546 ... --> 
  f_1549 ... --> 
  f_1550 ... --> 
  f_1551 ... --> 
  main_1042 [1/2] ... --> 
  k_main_1397 [1/2] ... --> 
  init_1038 [1/2] ... --> 
  f_k_main_1547 [1/2] ... --> 
  k_main_1447 [1/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1213 [2/2] ... --> 
  fail_1553 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(20197)[1]
  program:
    main_1546  | true = ((Random.int 0) f_1549)
    f_1549 x_1487 | true = ((Random.int 0) (f_1550 x_1487))
    f_1550 x_1487 x_1500 | true = ((Random.int 0) (f_1551 x_1487
                                                          x_1500))
    f_1551 x_1487 x_1500 x_1513 | true = (main_1042 x_1487
                                                    x_1500
                                                    x_1513
                                                    (f_1552 x_1487
                                                            x_1500
                                                            x_1513))
    f_1552 x_1487 x_1500 x_1513 x_1484 | true = end
    f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 | (0 <= i_1045) = (
    k_main_1447 b_1481
                i_1045
                k_1043
                n_1044
                k_main_1394
                x_1404
                (i_1045 < n_1044))
    f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 | (not (
                                                                    0 <= i_1045)) = (
    k_main_1447 b_1481
                i_1045
                k_1043
                n_1044
                k_main_1394
                x_1404
                false)
    f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 | (
    x_1451 >= 1) = (k_main_1394 ())
    f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 | (
    not (x_1451 >= 1)) = (fail_1554 true
                                    k_main_1394)
    fail_1553 b k | true = (fail ())
    fail_1554 b k | true = (fail ())
    init_1038 i_1039 n_1040 a_1041 k_init_1322 | (i_1039 >= n_1040) = (
    k_init_1322 a_1041)
    init_1038 i_1039 n_1040 a_1041 k_init_1322 | (not (i_1039 >= n_1040)) = (
    init_1038 (i_1039 + 1)
              n_1040
              (update_1033 i_1039
                           a_1041
                           1)
              k_init_1322)
    k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 | b_1481 = (init_1038
                                                                    k_1043
                                                                    n_1044
                                                                    (
                                                                    make_array_1030 n_1044)
                                                                    (
                                                                    f_k_main_1547
                                                                    b_1481
                                                                    i_1045
                                                                    k_1043
                                                                    n_1044
                                                                    k_main_1394))
    k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 | (not b_1481) = (
    k_main_1394 ())
    k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 | b_1477 = (
    x_1404 i_1045
           (f_k_main_1548 b_1477
                          b_1481
                          i_1045
                          k_1043
                          n_1044
                          k_main_1394))
    k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 | (
    not b_1477) = (k_main_1394 ())
    k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 | b_1225 = (
    k_make_array_u_1224 i_1032
                        n_1031
                        k_make_array_1207
                        ())
    k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 | (not b_1225) = (
    fail_1553 true
              (k_make_array_u_1224 i_1032
                                   n_1031
                                   k_make_array_1207))
    k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 x_1210 | true = (
    k_make_array_1207 0)
    k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 | b_1278 = (
    k_update_1260 x_1036)
    k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 | (
    not b_1278) = (a_1035 j_1037
                          k_update_1260)
    main_1042 k_1043 n_1044 i_1045 k_main_1394 | (k_1043 >= 0) = (k_main_1397
                                                                    i_1045
                                                                    k_1043
                                                                    n_1044
                                                                    k_main_1394
                                                                    (
                                                                    k_1043 <= 0))
    main_1042 k_1043 n_1044 i_1045 k_main_1394 | (not (k_1043 >= 0)) = (
    k_main_1397 i_1045
                k_1043
                n_1044
                k_main_1394
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1207 | (0 <= i_1032) = (
    k_make_array_u_1213 i_1032
                        n_1031
                        k_make_array_1207
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1207 | (not (0 <= i_1032)) = (
    k_make_array_u_1213 i_1032
                        n_1031
                        k_make_array_1207
                        false)
    update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 | (j_1037 > (i_1034 - 1)) = (
    k_update_1263 i_1034
                  j_1037
                  x_1036
                  a_1035
                  k_update_1260
                  (j_1037 <= i_1034))
    update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 | (not (j_1037 > (i_1034 - 1))) = (
    k_update_1263 i_1034
                  j_1037
                  x_1036
                  a_1035
                  k_update_1260
                  false)
    main_1546:X
    f_1549:int -> X
    f_1550:int -> int -> X
    f_1551:int -> int -> int -> X
    f_1552:int -> int -> int -> unit -> X
    f_k_main_1547:bool -> int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> X
    f_k_main_1548:bool -> bool -> int -> int -> int -> (unit -> X) -> int -> X
    fail_1553:bool -> (unit -> X) -> X
    fail_1554:bool -> (unit -> X) -> X
    init_1038:int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> X
    k_main_1397:int -> int -> int -> (unit -> X) -> bool -> X
    k_main_1447:bool -> int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> bool -> X
    k_make_array_u_1213:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1224:int -> int -> (int -> X) -> unit -> X
    k_update_1263:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> bool -> X
    main_1042:int -> int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1033:int -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
  inlined functions: f_1549,f_1550,f_1551,f_1552,f_k_main_1547,f_k_main_1548,k_main_1397,k_main_1447,k_make_array_u_1213,k_make_array_u_1224,k_update_1263,main_1042,make_array_1030,update_1033
  counterexample: 0:0:0:0:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1549@49:0> = var93)
     [true.nop((<f_1550@52:0> = <f_1549@49:0>) && (<f_1550@52:1> = var94))
      [true.nop((<f_1551@55:0> = <f_1550@52:0>) && ((<f_1551@55:1> = <f_1550@52:1>) && (<f_1551@55:2> = var95)))
       [true.
        ((<main_1042@57:0> = <f_1551@55:0>) &&
         ((<main_1042@57:1> = <f_1551@55:1>) && (<main_1042@57:2> = <f_1551@55:2>)))
        [(<main_1042@57:0> >= 0).
         ((<k_main_1397@60:0> = <main_1042@57:2>) &&
          ((<k_main_1397@60:1> = <main_1042@57:0>) &&
           ((<k_main_1397@60:2> = <main_1042@57:1>) && (<k_main_1397@60:4> = (<main_1042@57:0> <= 0)))))
         [<k_main_1397@60:4>.((<init_1038@63:0> = <k_main_1397@60:1>) && (<init_1038@63:1> = <k_main_1397@60:2>))
          [(<init_1038@63:0> >= <init_1038@63:1>).true
           [true.
            ((<f_k_main_1547@68:0> = <k_main_1397@60:4>) &&
             ((<f_k_main_1547@68:1> = <k_main_1397@60:0>) &&
              ((<f_k_main_1547@68:2> = <k_main_1397@60:1>) && (<f_k_main_1547@68:3> = <k_main_1397@60:2>))))
            [(0 <= <f_k_main_1547@68:1>).
             ((<k_main_1447@71:0> = <f_k_main_1547@68:0>) &&
              ((<k_main_1447@71:1> = <f_k_main_1547@68:1>) &&
               ((<k_main_1447@71:2> = <f_k_main_1547@68:2>) &&
                ((<k_main_1447@71:3> = <f_k_main_1547@68:3>) &&
                 (<k_main_1447@71:6> = (<f_k_main_1547@68:1> < <f_k_main_1547@68:3>))))))
             [<k_main_1447@71:6>.(<<k_main_1447@71:5>@74:0> = <k_main_1447@71:1>)
              [true.(<<f_k_main_1547@68:5>@76:0> = <<k_main_1447@71:5>@74:0>)
               [true.(<<<init_1038@63:3>@66:0>@78:0> = <<f_k_main_1547@68:5>@76:0>)
                [true.(<<init_1038@63:2>@80:0> = <<<init_1038@63:3>@66:0>@78:0>)
                 [true.
                  ((<make_array_1030@82:0> = <k_main_1397@60:2>) && (<make_array_1030@82:1> = <<init_1038@63:2>@80:0>))
                  [(0 <= <make_array_1030@82:1>).
                   ((<k_make_array_u_1213@85:0> = <make_array_1030@82:1>) &&
                    ((<k_make_array_u_1213@85:1> = <make_array_1030@82:0>) &&
                     (<k_make_array_u_1213@85:3> = (<make_array_1030@82:1> < <make_array_1030@82:0>))))
                   [(not <k_make_array_u_1213@85:3>).(<fail_1553@88:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(20198)[2]
    horn clauses:
      P[<fail_1553@88:0>](<fail_1553@88:0>:bool)|- bot
      
      P[<k_make_array_u_1213@85:3>](<k_make_array_u_1213@85:0>:int,<k_make_array_u_1213@85:1>:int,false:bool),
      <fail_1553@88:0> |- P[<fail_1553@88:0>](<fail_1553@88:0>:bool)
      
      P[<make_array_1030@82:1>](<k_make_array_u_1213@85:1>:int,<k_make_array_u_1213@85:0>:int),
      ((0 <= <k_make_array_u_1213@85:0>) &&
       (<k_make_array_u_1213@85:3> = (<k_make_array_u_1213@85:0> < <k_make_array_u_1213@85:1>)))
      |- P[<k_make_array_u_1213@85:3>](<k_make_array_u_1213@85:0>:int,
                                       <k_make_array_u_1213@85:1>:int,
                                       <k_make_array_u_1213@85:3>:bool)
      
      P[<k_main_1397@60:4>](<f_k_main_1547@68:1>:int,<init_1038@63:0>:int,<make_array_1030@82:0>:int,true:bool),
      P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<make_array_1030@82:0>:int,<make_array_1030@82:1>:int)|- P[<make_array_1030@82:1>](
      <make_array_1030@82:0>:int,<make_array_1030@82:1>:int)
      
      P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
      P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int),
      (<init_1038@63:0> >= <init_1038@63:1>)
      |- P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                    <<init_1038@63:2>@80:0>:int)
      
      P[<k_main_1397@60:4>](<f_k_main_1547@68:1>:int,<init_1038@63:0>:int,<init_1038@63:1>:int,true:bool),
      P[<<f_k_main_1547@68:5>@76:0>](true:bool,<f_k_main_1547@68:1>:int,<init_1038@63:0>:int,<init_1038@63:1>:int,<<<init_1038@63:3>@66:0>@78:0>:int),
      P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int)|- P[<<<init_1038@63:3>@66:0>@78:0>](
      <init_1038@63:0>:int,<init_1038@63:1>:int,<<<init_1038@63:3>@66:0>@78:0>:int)
      
      P[<f_k_main_1547@68:3>](<f_k_main_1547@68:0>:bool,<f_k_main_1547@68:1>:int,<f_k_main_1547@68:2>:int,<f_k_main_1547@68:3>:int),
      P[<<k_main_1447@71:5>@74:0>](<f_k_main_1547@68:0>:bool,<f_k_main_1547@68:1>:int,<f_k_main_1547@68:2>:int,<f_k_main_1547@68:3>:int,<<f_k_main_1547@68:5>@76:0>:int),
      (0 <= <f_k_main_1547@68:1>)
      |- P[<<f_k_main_1547@68:5>@76:0>](<f_k_main_1547@68:0>:bool,<f_k_main_1547@68:1>:int,
                                        <f_k_main_1547@68:2>:int,<f_k_main_1547@68:3>:int,
                                        <<f_k_main_1547@68:5>@76:0>:int)
      
      P[<k_main_1447@71:6>](<k_main_1447@71:0>:bool,<k_main_1447@71:1>:int,<k_main_1447@71:2>:int,<k_main_1447@71:3>:int,true:bool),
      (<<k_main_1447@71:5>@74:0> = <k_main_1447@71:1>)
      |- P[<<k_main_1447@71:5>@74:0>](<k_main_1447@71:0>:bool,<k_main_1447@71:1>:int,
                                      <k_main_1447@71:2>:int,<k_main_1447@71:3>:int,
                                      <<k_main_1447@71:5>@74:0>:int)
      
      P[<f_k_main_1547@68:3>](<k_main_1447@71:0>:bool,<k_main_1447@71:1>:int,<k_main_1447@71:2>:int,<k_main_1447@71:3>:int),
      ((0 <= <k_main_1447@71:1>) && (<k_main_1447@71:6> = (<k_main_1447@71:1> < <k_main_1447@71:3>)))
      |- P[<k_main_1447@71:6>](<k_main_1447@71:0>:bool,<k_main_1447@71:1>:int,
                               <k_main_1447@71:2>:int,<k_main_1447@71:3>:int,
                               <k_main_1447@71:6>:bool)
      
      P[<k_main_1397@60:4>](<f_k_main_1547@68:1>:int,<f_k_main_1547@68:2>:int,<f_k_main_1547@68:3>:int,<f_k_main_1547@68:0>:bool),
      <f_k_main_1547@68:0>
      |- P[<f_k_main_1547@68:3>](<f_k_main_1547@68:0>:bool,<f_k_main_1547@68:1>:int,
                                 <f_k_main_1547@68:2>:int,<f_k_main_1547@68:3>:int)
      
      P[<k_main_1397@60:4>](<k_main_1397@60:0>:int,<init_1038@63:0>:int,<init_1038@63:1>:int,true:bool)|- P[<init_1038@63:1>](
      <init_1038@63:0>:int,<init_1038@63:1>:int)
      
      P[<main_1042@57:2>](<k_main_1397@60:1>:int,<k_main_1397@60:2>:int,<k_main_1397@60:0>:int),
      ((<k_main_1397@60:1> >= 0) && (<k_main_1397@60:4> = (<k_main_1397@60:1> <= 0)))
      |- P[<k_main_1397@60:4>](<k_main_1397@60:0>:int,<k_main_1397@60:1>:int,
                               <k_main_1397@60:2>:int,<k_main_1397@60:4>:bool)
      
      P[<f_1551@55:2>](<main_1042@57:0>:int,<main_1042@57:1>:int,<main_1042@57:2>:int)|- P[<main_1042@57:2>](
      <main_1042@57:0>:int,<main_1042@57:1>:int,<main_1042@57:2>:int)
      
      P[<f_1550@52:1>](<f_1551@55:0>:int,<f_1551@55:1>:int)|- P[<f_1551@55:2>](
      <f_1551@55:0>:int,<f_1551@55:1>:int,<f_1551@55:2>:int)
      
      P[<f_1549@49:0>](<f_1550@52:0>:int)|- P[<f_1550@52:1>](<f_1550@52:0>:int,
                                                             <f_1550@52:1>:int)
      
      |- P[<f_1549@49:0>](<f_1549@49:0>:int)
    call trees:
      <main_1546@46>
        <f_1549@49>
          <f_1550@52>
            <f_1551@55>
              <main_1042@57>
                <k_main_1397@60>
                  <init_1038@63>
                  </<init_1038@63:3>@66>
                  <f_k_main_1547@68>
                    <k_main_1447@71>
                    </<k_main_1447@71:5>@74>
                  </<f_k_main_1547@68:5>@76>
                  <<<init_1038@63:3>@66:0>@78>
                  </<init_1038@63:2>@80>
                  <make_array_1030@82>
                    <k_make_array_u_1213@85>
                      <fail_1553@88>
    inlined horn clauses:
      P[<fail_1553@88:0>](<fail_1553@88:0>:bool)|- bot
      
      P[<<init_1038@63:2>@80:0>](0:int,<k_make_array_u_1213@85:1>:int,<k_make_array_u_1213@85:0>:int),
      ((0 <= <k_make_array_u_1213@85:0>) &&
       ((<k_make_array_u_1213@85:0> >= <k_make_array_u_1213@85:1>) && <fail_1553@88:0>))
      |- P[<fail_1553@88:0>](<fail_1553@88:0>:bool)
      
      P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
      P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int),
      (<init_1038@63:0> >= <init_1038@63:1>)
      |- P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                    <<init_1038@63:2>@80:0>:int)
      
      P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
      ((<init_1038@63:0> = 0) &&
       ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
      |- P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                           <<<init_1038@63:3>@66:0>@78:0>:int)
      
       (<init_1038@63:0> = 0) |- P[<init_1038@63:1>](<init_1038@63:0>:int,
                                                     <init_1038@63:1>:int)
    begin ParamSubstInfer.infer(23054)[3]
      
    end ParamSubstInfer.infer(23054)[3] (0.101984 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(23056)[3]
      
    end RefTypeInfer.elim_coeffs(23056)[3] (0.002000 sec.)
    begin GenHcSolver.solve(23359)[3]
      Horn clauses:
        P[<fail_1553@88:0>](<fail_1553@88:0>:bool)|- bot
        
        P[<<init_1038@63:2>@80:0>](0:int,<k_make_array_u_1213@85:1>:int,<k_make_array_u_1213@85:0>:int),
        ((0 <= <k_make_array_u_1213@85:0>) &&
         ((<k_make_array_u_1213@85:0> >= <k_make_array_u_1213@85:1>) && <fail_1553@88:0>))
        |- P[<fail_1553@88:0>](<fail_1553@88:0>:bool)
        
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
        P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int),
        (<init_1038@63:0> >= <init_1038@63:1>)
        |- P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                      <<init_1038@63:2>@80:0>:int)
        
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
        ((<init_1038@63:0> = 0) &&
         ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
        |- P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                             <<<init_1038@63:3>@66:0>@78:0>:int)
        
         (<init_1038@63:0> = 0) |- P[<init_1038@63:1>](<init_1038@63:0>:int,
                                                       <init_1038@63:1>:int)
      lower bounds:
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int) = (<init_1038@63:0> = 0)
        P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<<init_1038@63:3>@66:0>@78:0>:int) =
        ((<init_1038@63:0> = 0) &&
         ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
        P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int) =
        ((<init_1038@63:0> = 0) &&
         ((<init_1038@63:0> >= <init_1038@63:1>) &&
          ((0 <= <<init_1038@63:2>@80:0>) && (<<init_1038@63:2>@80:0> < <init_1038@63:1>))))
        P[<fail_1553@88:0>](<fail_1553@88:0>:bool) = false
      upper bounds:
        P[<fail_1553@88:0>](var97:bool) = true
      begin GenHcSolver.classify_pids(25383)[4]
        output:
          [<fail_1553@88:0>]
      end GenHcSolver.classify_pids(25383)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(25386)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(25387)[5]
          begin InterpProver.interpolate_fresh(25388)[6]
            begin InterpProver.interpolate_log(25389)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(25390)[8]
                begin InterpProver.interpolate_simplify(25391)[9]
                  begin InterpProver.interpolate_quick(25404)[10]
                    
                  end InterpProver.interpolate_quick(25404)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(25408)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(25408)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(25391)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(25390)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(25389)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(25388)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(25387)[5] (0.000000 sec.)
        output:
          P[<fail_1553@88:0>](<fail_1553@88:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(25386)[4] (0.000000 sec.)
      Horn clauses:
        P[<<init_1038@63:2>@80:0>](0:int,<k_make_array_u_1213@85:1>:int,<k_make_array_u_1213@85:0>:int),
        ((<k_make_array_u_1213@85:0> >= <k_make_array_u_1213@85:1>) && (0 <= <k_make_array_u_1213@85:0>)) |- bot
        
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
        P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int),
        (<init_1038@63:0> >= <init_1038@63:1>)
        |- P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                      <<init_1038@63:2>@80:0>:int)
        
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
        ((<init_1038@63:0> = 0) &&
         ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
        |- P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                             <<<init_1038@63:3>@66:0>@78:0>:int)
        
         (<init_1038@63:0> = 0) |- P[<init_1038@63:1>](<init_1038@63:0>:int,
                                                       <init_1038@63:1>:int)
      lower bounds:
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int) = (<init_1038@63:0> = 0)
        P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<<init_1038@63:3>@66:0>@78:0>:int) =
        ((<init_1038@63:0> = 0) &&
         ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
        P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int) =
        ((<init_1038@63:0> = 0) &&
         ((<init_1038@63:0> >= <init_1038@63:1>) &&
          ((0 <= <<init_1038@63:2>@80:0>) && (<<init_1038@63:2>@80:0> < <init_1038@63:1>))))
      upper bounds:
        P[<<init_1038@63:2>@80:0>](var98:int,var99:int,var100:int) =
        ((var98 <> 0) || ((var100 < var99) || (0 > var100)))
      begin GenHcSolver.classify_pids(27993)[4]
        output:
          [<<init_1038@63:2>@80:0>]
      end GenHcSolver.classify_pids(27993)[4] (0.000000 sec.)
      lb:((<init_1038@63:0> = 0) &&
          ((<init_1038@63:0> >= <init_1038@63:1>) &&
           ((0 <= <<init_1038@63:2>@80:0>) && (<<init_1038@63:2>@80:0> < <init_1038@63:1>))))
      nub:(not
             ((<init_1038@63:0> <> 0) ||
              ((<<init_1038@63:2>@80:0> < <init_1038@63:1>) || (0 > <<init_1038@63:2>@80:0>))))
      begin ApronInterface.convex_hull_interpolate(27996)[4]
        lb:((<init_1038@63:0> = 0) &&
            ((<init_1038@63:0> >= <init_1038@63:1>) &&
             ((0 <= <<init_1038@63:2>@80:0>) && (<<init_1038@63:2>@80:0> < <init_1038@63:1>))))
        nub:(not
               ((<init_1038@63:0> <> 0) ||
                ((<<init_1038@63:2>@80:0> < <init_1038@63:1>) || (0 > <<init_1038@63:2>@80:0>))))
        lb':((<init_1038@63:0> = 0) &&
             ((<init_1038@63:0> >= <init_1038@63:1>) &&
              ((0 <= <<init_1038@63:2>@80:0>) && (<<init_1038@63:2>@80:0> < <init_1038@63:1>))))
        nub':(not
                ((<init_1038@63:0> <> 0) ||
                 ((<<init_1038@63:2>@80:0> < <init_1038@63:1>) || (0 > <<init_1038@63:2>@80:0>))))
        begin InterpProver.interpolate(27997)[5]
          begin InterpProver.interpolate_fresh(27998)[6]
            begin InterpProver.interpolate_log(27999)[7]
              input1: ((<init_1038@63:0> = 0) &&
                       ((<init_1038@63:0> >= <init_1038@63:1>) &&
                        ((0 <= <<init_1038@63:2>@80:0>) && (<<init_1038@63:2>@80:0> < <init_1038@63:1>))))
              input2: (not
                         ((<init_1038@63:0> <> 0) ||
                          ((<<init_1038@63:2>@80:0> < <init_1038@63:1>) || (0 > <<init_1038@63:2>@80:0>))))
              begin InterpProver.interpolate_check(28000)[8]
                begin InterpProver.interpolate_simplify(28001)[9]
                  begin InterpProver.interpolate_quick(28146)[10]
                    
                  end InterpProver.interpolate_quick(28146)[10] (0.000999 sec.)
                  begin minimizing # of disjunctions(28153)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(28153)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(28001)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(28000)[8] (0.000999 sec.)
              output: false
            end InterpProver.interpolate_log(27999)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(27998)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(27997)[5] (0.000999 sec.)
        output:
          P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int) = false
      end ApronInterface.convex_hull_interpolate(27996)[4] (0.000999 sec.)
      Horn clauses:
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
        P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int),
        (<init_1038@63:0> >= <init_1038@63:1>) |- bot
        
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
        ((<init_1038@63:0> = 0) &&
         ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
        |- P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                             <<<init_1038@63:3>@66:0>@78:0>:int)
        
         (<init_1038@63:0> = 0) |- P[<init_1038@63:1>](<init_1038@63:0>:int,
                                                       <init_1038@63:1>:int)
      lower bounds:
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int) = (<init_1038@63:0> = 0)
        P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<<init_1038@63:3>@66:0>@78:0>:int) =
        ((<init_1038@63:0> = 0) &&
         ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
      upper bounds:
        P[<<<init_1038@63:3>@66:0>@78:0>](var101:int,var102:int,var103:int) = ((var101 <> 0) || (0 < var102))
      begin GenHcSolver.classify_pids(29724)[4]
        output:
          [<<<init_1038@63:3>@66:0>@78:0>]
      end GenHcSolver.classify_pids(29724)[4] (0.000000 sec.)
      lb:((<init_1038@63:0> = 0) &&
          ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
      nub:(not ((<init_1038@63:0> <> 0) || (0 < <init_1038@63:1>)))
      begin ApronInterface.convex_hull_interpolate(29727)[4]
        lb:((<init_1038@63:0> = 0) &&
            ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
        nub:(not ((<init_1038@63:0> <> 0) || (0 < <init_1038@63:1>)))
        lb':((<init_1038@63:0> = 0) &&
             ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
        nub':(not ((<init_1038@63:0> <> 0) || (0 < <init_1038@63:1>)))
        begin InterpProver.interpolate(29728)[5]
          begin InterpProver.interpolate_fresh(29729)[6]
            begin InterpProver.interpolate_log(29730)[7]
              input1: ((<init_1038@63:0> = 0) &&
                       ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
              input2: (not ((<init_1038@63:0> <> 0) || (0 < <init_1038@63:1>)))
              begin InterpProver.interpolate_check(29731)[8]
                begin InterpProver.interpolate_simplify(29732)[9]
                  begin InterpProver.interpolate_quick(29805)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(29814)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(29815)[12]
                        begin CsisatInterface.interpolate_csisat_log(29816)[13]
                          input1: (0 = v_sep_init_1038_sep_63_sep_0 & 0 <= v_sep_init_1038_sep_63_sep_3_sep_66_sep_0_sep_78_sep_0 & (1 + v_sep_init_1038_sep_63_sep_3_sep_66_sep_0_sep_78_sep_0) <= v_sep_init_1038_sep_63_sep_1)
                          input2: (0 = v_sep_init_1038_sep_63_sep_0 & v_sep_init_1038_sep_63_sep_1 <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(29817)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(29817)[14] (0.000000 sec.)
                          output: -2*v_sep_init_1038_sep_63_sep_1 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(29816)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_init_1038_sep_63_sep_1 <= -2
                        after dnf conversion: ((-2*v_sep_init_1038_sep_63_sep_1 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(29815)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(29814)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(29805)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(29732)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(29731)[8] (0.000000 sec.)
              output: (1 <= <init_1038@63:1>)
            end InterpProver.interpolate_log(29730)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(29729)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(29728)[5] (0.001000 sec.)
        output:
          P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<<init_1038@63:3>@66:0>@78:0>:int) =
          (1 <= <init_1038@63:1>)
      end ApronInterface.convex_hull_interpolate(29727)[4] (0.001000 sec.)
      Horn clauses:
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
        ((<init_1038@63:0> >= <init_1038@63:1>) && (1 <= <init_1038@63:1>)) |- bot
        
         (<init_1038@63:0> = 0) |- P[<init_1038@63:1>](<init_1038@63:0>:int,
                                                       <init_1038@63:1>:int)
      lower bounds:
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int) = (<init_1038@63:0> = 0)
      upper bounds:
        P[<init_1038@63:1>](var104:int,var105:int) = ((var104 < var105) || (1 > var105))
      begin GenHcSolver.classify_pids(30919)[4]
        output:
          [<init_1038@63:1>]
      end GenHcSolver.classify_pids(30919)[4] (0.000000 sec.)
      lb:(<init_1038@63:0> = 0)
      nub:(not ((<init_1038@63:0> < <init_1038@63:1>) || (1 > <init_1038@63:1>)))
      begin ApronInterface.convex_hull_interpolate(30922)[4]
        lb:(<init_1038@63:0> = 0)
        nub:(not ((<init_1038@63:0> < <init_1038@63:1>) || (1 > <init_1038@63:1>)))
        lb':(<init_1038@63:0> = 0)
        nub':(not ((<init_1038@63:0> < <init_1038@63:1>) || (1 > <init_1038@63:1>)))
        begin InterpProver.interpolate(30923)[5]
          begin InterpProver.interpolate_fresh(30924)[6]
            begin InterpProver.interpolate_log(30925)[7]
              input1: (<init_1038@63:0> = 0)
              input2: (not ((<init_1038@63:0> < <init_1038@63:1>) || (1 > <init_1038@63:1>)))
              begin InterpProver.interpolate_check(30926)[8]
                begin InterpProver.interpolate_simplify(30927)[9]
                  begin InterpProver.interpolate_quick(30972)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(30981)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(30982)[12]
                        begin CsisatInterface.interpolate_csisat_log(30983)[13]
                          input1: 0 = v_sep_init_1038_sep_63_sep_0
                          input2: (1 <= v_sep_init_1038_sep_63_sep_1 & v_sep_init_1038_sep_63_sep_1 <= v_sep_init_1038_sep_63_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(30984)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(30984)[14] (0.000000 sec.)
                          output: 2*v_sep_init_1038_sep_63_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(30983)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_init_1038_sep_63_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_init_1038_sep_63_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(30982)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(30981)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(30972)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(30927)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(30926)[8] (0.002000 sec.)
              output: (<init_1038@63:0> <= 0)
            end InterpProver.interpolate_log(30925)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(30924)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(30923)[5] (0.002000 sec.)
        output:
          P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int) = (<init_1038@63:0> <= 0)
      end ApronInterface.convex_hull_interpolate(30922)[4] (0.002000 sec.)
      begin HcSolver.check_validity(31151)[4]
        input:
          P[<fail_1553@88:0>](<fail_1553@88:0>:bool)|- bot
          
          P[<<init_1038@63:2>@80:0>](0:int,<k_make_array_u_1213@85:1>:int,<k_make_array_u_1213@85:0>:int),
          ((0 <= <k_make_array_u_1213@85:0>) &&
           ((<k_make_array_u_1213@85:0> >= <k_make_array_u_1213@85:1>) && <fail_1553@88:0>))
          |- P[<fail_1553@88:0>](<fail_1553@88:0>:bool)
          
          P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
          P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int),
          (<init_1038@63:0> >= <init_1038@63:1>)
          |- P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                        <<init_1038@63:2>@80:0>:int)
          
          P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
          ((<init_1038@63:0> = 0) &&
           ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
          |- P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                               <<<init_1038@63:3>@66:0>@78:0>:int)
          
           (<init_1038@63:0> = 0) |- P[<init_1038@63:1>](<init_1038@63:0>:int,
                                                         <init_1038@63:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(31151)[4] (0.003999 sec.)
      solution:
        P[<fail_1553@88:0>](<fail_1553@88:0>:bool) = false
        P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int) = false
        P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<<init_1038@63:3>@66:0>@78:0>:int) =
        (1 <= <init_1038@63:1>)
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int) = (<init_1038@63:0> <= 0)
    end GenHcSolver.solve(23359)[3] (0.050992 sec.)
    begin GenHcSolver.solve(31769)[3]
      Horn clauses:
        P[<fail_1553@88:0>](<fail_1553@88:0>:bool)|- bot
        
        P[<<init_1038@63:2>@80:0>](0:int,<k_make_array_u_1213@85:1>:int,<k_make_array_u_1213@85:0>:int),
        ((0 <= <k_make_array_u_1213@85:0>) &&
         ((<k_make_array_u_1213@85:0> >= <k_make_array_u_1213@85:1>) && <fail_1553@88:0>))
        |- P[<fail_1553@88:0>](<fail_1553@88:0>:bool)
        
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
        P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int),
        (<init_1038@63:0> >= <init_1038@63:1>)
        |- P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                      <<init_1038@63:2>@80:0>:int)
        
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
        ((<init_1038@63:0> = 0) &&
         ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
        |- P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                             <<<init_1038@63:3>@66:0>@78:0>:int)
        
         (<init_1038@63:0> = 0) |- P[<init_1038@63:1>](<init_1038@63:0>:int,
                                                       <init_1038@63:1>:int)
      lower bounds:
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int) = (<init_1038@63:0> = 0)
        P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<<init_1038@63:3>@66:0>@78:0>:int) =
        ((<init_1038@63:0> = 0) &&
         ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
        P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int) =
        ((<init_1038@63:0> = 0) &&
         ((<init_1038@63:0> >= <init_1038@63:1>) &&
          ((0 <= <<init_1038@63:2>@80:0>) && (<<init_1038@63:2>@80:0> < <init_1038@63:1>))))
        P[<fail_1553@88:0>](<fail_1553@88:0>:bool) = false
      upper bounds:
        P[<fail_1553@88:0>](var107:bool) = true
      begin GenHcSolver.classify_pids(33793)[4]
        output:
          [<fail_1553@88:0>]
      end GenHcSolver.classify_pids(33793)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(33796)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(33799)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(33799)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(33804)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(33804)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(33807)[5]
          begin InterpProver.interpolate_fresh(33808)[6]
            begin InterpProver.interpolate_log(33809)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(33810)[8]
                begin InterpProver.interpolate_simplify(33811)[9]
                  begin InterpProver.interpolate_quick(33826)[10]
                    
                  end InterpProver.interpolate_quick(33826)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(33830)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(33830)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(33811)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(33810)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(33809)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(33808)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(33807)[5] (0.001000 sec.)
        output:
          P[<fail_1553@88:0>](<fail_1553@88:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(33796)[4] (0.001000 sec.)
      Horn clauses:
        P[<<init_1038@63:2>@80:0>](0:int,<k_make_array_u_1213@85:1>:int,<k_make_array_u_1213@85:0>:int),
        ((<k_make_array_u_1213@85:0> >= <k_make_array_u_1213@85:1>) && (0 <= <k_make_array_u_1213@85:0>)) |- bot
        
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
        P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int),
        (<init_1038@63:0> >= <init_1038@63:1>)
        |- P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                      <<init_1038@63:2>@80:0>:int)
        
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
        ((<init_1038@63:0> = 0) &&
         ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
        |- P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                             <<<init_1038@63:3>@66:0>@78:0>:int)
        
         (<init_1038@63:0> = 0) |- P[<init_1038@63:1>](<init_1038@63:0>:int,
                                                       <init_1038@63:1>:int)
      lower bounds:
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int) = (<init_1038@63:0> = 0)
        P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<<init_1038@63:3>@66:0>@78:0>:int) =
        ((<init_1038@63:0> = 0) &&
         ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
        P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int) =
        ((<init_1038@63:0> = 0) &&
         ((<init_1038@63:0> >= <init_1038@63:1>) &&
          ((0 <= <<init_1038@63:2>@80:0>) && (<<init_1038@63:2>@80:0> < <init_1038@63:1>))))
      upper bounds:
        P[<<init_1038@63:2>@80:0>](var108:int,var109:int,var110:int) =
        ((var108 <> 0) || ((var110 < var109) || (0 > var110)))
      begin GenHcSolver.classify_pids(36422)[4]
        output:
          [<<init_1038@63:2>@80:0>]
      end GenHcSolver.classify_pids(36422)[4] (0.000000 sec.)
      lb:((<init_1038@63:0> = 0) &&
          ((<init_1038@63:0> >= <init_1038@63:1>) &&
           ((0 <= <<init_1038@63:2>@80:0>) && (<<init_1038@63:2>@80:0> < <init_1038@63:1>))))
      nub:(not
             ((<init_1038@63:0> <> 0) ||
              ((<<init_1038@63:2>@80:0> < <init_1038@63:1>) || (0 > <<init_1038@63:2>@80:0>))))
      begin ApronInterface.convex_hull_interpolate(36425)[4]
        lb:((<init_1038@63:0> = 0) &&
            ((<init_1038@63:0> >= <init_1038@63:1>) &&
             ((0 <= <<init_1038@63:2>@80:0>) && (<<init_1038@63:2>@80:0> < <init_1038@63:1>))))
        nub:(not
               ((<init_1038@63:0> <> 0) ||
                ((<<init_1038@63:2>@80:0> < <init_1038@63:1>) || (0 > <<init_1038@63:2>@80:0>))))
        begin ExtFormula.Formula.case_analysis_boolean(36471)[5]
          ts: ((<init_1038@63:0> = 0) &&
               ((<init_1038@63:0> >= <init_1038@63:1>) &&
                ((0 <= <<init_1038@63:2>@80:0>) && (<<init_1038@63:2>@80:0> < <init_1038@63:1>))))
          
        end ExtFormula.Formula.case_analysis_boolean(36471)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(36505)[5]
          ts: ((<init_1038@63:0> = 0) &&
               ((<<init_1038@63:2>@80:0> >= <init_1038@63:1>) && (0 <= <<init_1038@63:2>@80:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(36505)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':((<init_1038@63:0> = 0) &&
              (((<<init_1038@63:2>@80:0> + (-1 * <init_1038@63:1>)) >= 0) && (<<init_1038@63:2>@80:0> >= 0)))
        begin InterpProver.interpolate(36512)[5]
          begin InterpProver.interpolate_fresh(36513)[6]
            begin InterpProver.interpolate_log(36514)[7]
              input1: (-1 >= 0)
              input2: ((<init_1038@63:0> = 0) &&
                       (((<<init_1038@63:2>@80:0> + (-1 * <init_1038@63:1>)) >= 0) && (<<init_1038@63:2>@80:0> >= 0)))
              begin InterpProver.interpolate_check(36515)[8]
                begin InterpProver.interpolate_simplify(36516)[9]
                  begin InterpProver.interpolate_quick(36592)[10]
                    
                  end InterpProver.interpolate_quick(36592)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(36596)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(36596)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(36516)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(36515)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(36514)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(36513)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(36512)[5] (0.001999 sec.)
        output:
          P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int) = false
      end ApronInterface.convex_hull_interpolate(36425)[4] (0.001999 sec.)
      Horn clauses:
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
        P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int),
        (<init_1038@63:0> >= <init_1038@63:1>) |- bot
        
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
        ((<init_1038@63:0> = 0) &&
         ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
        |- P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                             <<<init_1038@63:3>@66:0>@78:0>:int)
        
         (<init_1038@63:0> = 0) |- P[<init_1038@63:1>](<init_1038@63:0>:int,
                                                       <init_1038@63:1>:int)
      lower bounds:
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int) = (<init_1038@63:0> = 0)
        P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<<init_1038@63:3>@66:0>@78:0>:int) =
        ((<init_1038@63:0> = 0) &&
         ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
      upper bounds:
        P[<<<init_1038@63:3>@66:0>@78:0>](var111:int,var112:int,var113:int) = ((var111 <> 0) || (0 < var112))
      begin GenHcSolver.classify_pids(38167)[4]
        output:
          [<<<init_1038@63:3>@66:0>@78:0>]
      end GenHcSolver.classify_pids(38167)[4] (0.000000 sec.)
      lb:((<init_1038@63:0> = 0) &&
          ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
      nub:(not ((<init_1038@63:0> <> 0) || (0 < <init_1038@63:1>)))
      begin ApronInterface.convex_hull_interpolate(38170)[4]
        lb:((<init_1038@63:0> = 0) &&
            ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
        nub:(not ((<init_1038@63:0> <> 0) || (0 < <init_1038@63:1>)))
        begin ExtFormula.Formula.case_analysis_boolean(38196)[5]
          ts: ((<init_1038@63:0> = 0) &&
               ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
          
        end ExtFormula.Formula.case_analysis_boolean(38196)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(38212)[5]
          ts: ((<init_1038@63:0> = 0) && (0 >= <init_1038@63:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(38212)[5] (0.000000 sec.)
        lb':((<init_1038@63:0> = 0) &&
             ((<<<init_1038@63:3>@66:0>@78:0> >= 0) &&
              (((-1 + (-1 * <<<init_1038@63:3>@66:0>@78:0>)) + <init_1038@63:1>) >= 0)))
        nub':((<init_1038@63:0> = 0) && ((-1 * <init_1038@63:1>) >= 0))
        begin InterpProver.interpolate(38217)[5]
          begin InterpProver.interpolate_fresh(38218)[6]
            begin InterpProver.interpolate_log(38219)[7]
              input1: ((<init_1038@63:0> = 0) &&
                       ((<<<init_1038@63:3>@66:0>@78:0> >= 0) &&
                        (((-1 + (-1 * <<<init_1038@63:3>@66:0>@78:0>)) + <init_1038@63:1>) >= 0)))
              input2: ((<init_1038@63:0> = 0) && ((-1 * <init_1038@63:1>) >= 0))
              begin InterpProver.interpolate_check(38220)[8]
                begin InterpProver.interpolate_simplify(38221)[9]
                  begin InterpProver.interpolate_quick(38304)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(38313)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(38314)[12]
                        begin CsisatInterface.interpolate_csisat_log(38315)[13]
                          input1: (0 = v_sep_init_1038_sep_63_sep_0 & 0 <= v_sep_init_1038_sep_63_sep_3_sep_66_sep_0_sep_78_sep_0 & (1 + v_sep_init_1038_sep_63_sep_3_sep_66_sep_0_sep_78_sep_0) <= v_sep_init_1038_sep_63_sep_1)
                          input2: (0 = v_sep_init_1038_sep_63_sep_0 & v_sep_init_1038_sep_63_sep_1 <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(38316)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(38316)[14] (0.001000 sec.)
                          output: -2*v_sep_init_1038_sep_63_sep_1 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(38315)[13] (0.001000 sec.)
                        after simplification: -2*v_sep_init_1038_sep_63_sep_1 <= -2
                        after dnf conversion: ((-2*v_sep_init_1038_sep_63_sep_1 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(38314)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(38313)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(38304)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(38221)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(38220)[8] (0.001000 sec.)
              output: (1 <= <init_1038@63:1>)
            end InterpProver.interpolate_log(38219)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(38218)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(38217)[5] (0.001000 sec.)
        output:
          P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<<init_1038@63:3>@66:0>@78:0>:int) =
          (1 <= <init_1038@63:1>)
      end ApronInterface.convex_hull_interpolate(38170)[4] (0.003000 sec.)
      Horn clauses:
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
        ((<init_1038@63:0> >= <init_1038@63:1>) && (1 <= <init_1038@63:1>)) |- bot
        
         (<init_1038@63:0> = 0) |- P[<init_1038@63:1>](<init_1038@63:0>:int,
                                                       <init_1038@63:1>:int)
      lower bounds:
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int) = (<init_1038@63:0> = 0)
      upper bounds:
        P[<init_1038@63:1>](var114:int,var115:int) = ((var114 < var115) || (1 > var115))
      begin GenHcSolver.classify_pids(39418)[4]
        output:
          [<init_1038@63:1>]
      end GenHcSolver.classify_pids(39418)[4] (0.000000 sec.)
      lb:(<init_1038@63:0> = 0)
      nub:(not ((<init_1038@63:0> < <init_1038@63:1>) || (1 > <init_1038@63:1>)))
      begin ApronInterface.convex_hull_interpolate(39421)[4]
        lb:(<init_1038@63:0> = 0)
        nub:(not ((<init_1038@63:0> < <init_1038@63:1>) || (1 > <init_1038@63:1>)))
        begin ExtFormula.Formula.case_analysis_boolean(39425)[5]
          ts: (<init_1038@63:0> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(39425)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(39446)[5]
          ts: ((<init_1038@63:0> >= <init_1038@63:1>) && (1 <= <init_1038@63:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(39446)[5] (0.000000 sec.)
        lb':(<init_1038@63:0> = 0)
        nub':(((-1 + <init_1038@63:1>) >= 0) && (((-1 * <init_1038@63:1>) + <init_1038@63:0>) >= 0))
        begin InterpProver.interpolate(39453)[5]
          begin InterpProver.interpolate_fresh(39454)[6]
            begin InterpProver.interpolate_log(39455)[7]
              input1: (<init_1038@63:0> = 0)
              input2: (((-1 + <init_1038@63:1>) >= 0) && (((-1 * <init_1038@63:1>) + <init_1038@63:0>) >= 0))
              begin InterpProver.interpolate_check(39456)[8]
                begin InterpProver.interpolate_simplify(39457)[9]
                  begin InterpProver.interpolate_quick(39502)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(39511)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(39512)[12]
                        begin CsisatInterface.interpolate_csisat_log(39513)[13]
                          input1: 0 = v_sep_init_1038_sep_63_sep_0
                          input2: (1 <= v_sep_init_1038_sep_63_sep_1 & v_sep_init_1038_sep_63_sep_1 <= v_sep_init_1038_sep_63_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(39514)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(39514)[14] (0.000000 sec.)
                          output: 2*v_sep_init_1038_sep_63_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(39513)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_init_1038_sep_63_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_init_1038_sep_63_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(39512)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(39511)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(39502)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(39457)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(39456)[8] (0.000999 sec.)
              output: (<init_1038@63:0> <= 0)
            end InterpProver.interpolate_log(39455)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(39454)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(39453)[5] (0.001999 sec.)
        output:
          P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int) = (<init_1038@63:0> <= 0)
      end ApronInterface.convex_hull_interpolate(39421)[4] (0.001999 sec.)
      begin HcSolver.check_validity(39681)[4]
        input:
          P[<fail_1553@88:0>](<fail_1553@88:0>:bool)|- bot
          
          P[<<init_1038@63:2>@80:0>](0:int,<k_make_array_u_1213@85:1>:int,<k_make_array_u_1213@85:0>:int),
          ((0 <= <k_make_array_u_1213@85:0>) &&
           ((<k_make_array_u_1213@85:0> >= <k_make_array_u_1213@85:1>) && <fail_1553@88:0>))
          |- P[<fail_1553@88:0>](<fail_1553@88:0>:bool)
          
          P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
          P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int),
          (<init_1038@63:0> >= <init_1038@63:1>)
          |- P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                        <<init_1038@63:2>@80:0>:int)
          
          P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
          ((<init_1038@63:0> = 0) &&
           ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
          |- P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                               <<<init_1038@63:3>@66:0>@78:0>:int)
          
           (<init_1038@63:0> = 0) |- P[<init_1038@63:1>](<init_1038@63:0>:int,
                                                         <init_1038@63:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(39681)[4] (0.003000 sec.)
      solution:
        P[<fail_1553@88:0>](<fail_1553@88:0>:bool) = false
        P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int) = false
        P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<<init_1038@63:3>@66:0>@78:0>:int) =
        (1 <= <init_1038@63:1>)
        P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int) = (<init_1038@63:0> <= 0)
    end GenHcSolver.solve(31769)[3] (0.053992 sec.)
    begin YhornInterface.solve(40299)[3]
      begin HcSolver.solve_ub(40300)[4]
        encoded:
          P[<fail_1553@88:0>](<fail_1553@88:0>:int)|- bot
          
          P[<<init_1038@63:2>@80:0>](0:int,<k_make_array_u_1213@85:1>:int,<k_make_array_u_1213@85:0>:int),
          ((0 <= <k_make_array_u_1213@85:0>) &&
           ((<k_make_array_u_1213@85:0> >= <k_make_array_u_1213@85:1>) && (<fail_1553@88:0> = 1)))
          |- P[<fail_1553@88:0>](<fail_1553@88:0>:int)
          
          P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
          P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int),
          (<init_1038@63:0> >= <init_1038@63:1>)
          |- P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                        <<init_1038@63:2>@80:0>:int)
          
          P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
          ((<init_1038@63:0> = 0) &&
           ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
          |- P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                               <<<init_1038@63:3>@66:0>@78:0>:int)
          
           (<init_1038@63:0> = 0) |- P[<init_1038@63:1>](<init_1038@63:0>:int,
                                                         <init_1038@63:1>:int)
        input to Yhorn:
          P[<fail_1553@88:0>](<fail_1553@88:0>:int)|- bot
          
          P[<<init_1038@63:2>@80:0>](var116:int,<k_make_array_u_1213@85:1>:int,<k_make_array_u_1213@85:0>:int),
          ((<k_make_array_u_1213@85:0> >= <k_make_array_u_1213@85:1>) &&
           ((0 <= <k_make_array_u_1213@85:0>) && ((var116 = 0) && (<fail_1553@88:0> = 1))))
          |- P[<fail_1553@88:0>](<fail_1553@88:0>:int)
          
          P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
          P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int),
          (<init_1038@63:0> >= <init_1038@63:1>)
          |- P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                        <<init_1038@63:2>@80:0>:int)
          
          P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
          ((<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>) &&
           ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<init_1038@63:0> = 0)))
          |- P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                               <<<init_1038@63:3>@66:0>@78:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1553_sep_88_sep_0($93)) -> 1=0.
(($93-1=0) & ($94=0) & (-$95<=0) & ($95-$96>=0)) & (v_sep_init_1038_sep_63_sep_2_sep_80_sep_0($94,$96,$95)) -> v_sep_fail_1553_sep_88_sep_0($93).
($97-$98>=0) & (v_sep_init_1038_sep_63_sep_3_sep_66_sep_0_sep_78_sep_0($97,$98,$99)) & (v_sep_init_1038_sep_63_sep_1($97,$98)) -> v_sep_init_1038_sep_63_sep_2_sep_80_sep_0($97,$98,$99).
(($97=0) & (-$100<=0) & (-$98+$100<0)) & (v_sep_init_1038_sep_63_sep_1($97,$98)) -> v_sep_init_1038_sep_63_sep_3_sep_66_sep_0_sep_78_sep_0($97,$98,$100).
$97=0 -> v_sep_init_1038_sep_63_sep_1($97,$98).


v_sep_fail_1553_sep_88_sep_0: X
v_sep_init_1038_sep_63_sep_1: X
v_sep_init_1038_sep_63_sep_2_sep_80_sep_0: X
v_sep_init_1038_sep_63_sep_3_sep_66_sep_0_sep_78_sep_0: X
......
v_sep_fail_1553_sep_88_sep_0: X
v_sep_init_1038_sep_63_sep_1: X
v_sep_init_1038_sep_63_sep_2_sep_80_sep_0: X
v_sep_init_1038_sep_63_sep_3_sep_66_sep_0_sep_78_sep_0: X
...
v_sep_fail_1553_sep_88_sep_0: X
v_sep_init_1038_sep_63_sep_1: X
v_sep_init_1038_sep_63_sep_2_sep_80_sep_0: X
v_sep_init_1038_sep_63_sep_3_sep_66_sep_0_sep_78_sep_0: X
.....
v_sep_fail_1553_sep_88_sep_0: X
v_sep_init_1038_sep_63_sep_1: X
v_sep_init_1038_sep_63_sep_2_sep_80_sep_0: X
v_sep_init_1038_sep_63_sep_3_sep_66_sep_0_sep_78_sep_0: X
......(0=0) & (v_sep_fail_1553_sep_88_sep_0($93)) -> 1=0.
(($93-1=0) & ($94=0) & (-$95<=0) & ($95-$96>=0)) & (v_sep_init_1038_sep_63_sep_2_sep_80_sep_0($94,$96,$95)) -> v_sep_fail_1553_sep_88_sep_0($93).
($97-$98>=0) & (v_sep_init_1038_sep_63_sep_3_sep_66_sep_0_sep_78_sep_0($97,$98,$99)) & (v_sep_init_1038_sep_63_sep_1($97,$98)) -> v_sep_init_1038_sep_63_sep_2_sep_80_sep_0($97,$98,$99).
(($97=0) & (-$100<=0) & (-$98+$100<0)) & (v_sep_init_1038_sep_63_sep_1($97,$98)) -> v_sep_init_1038_sep_63_sep_3_sep_66_sep_0_sep_78_sep_0($97,$98,$100).
$97=0 -> v_sep_init_1038_sep_63_sep_1($97,$98).

           (<init_1038@63:0> = 0) |- P[<init_1038@63:1>](<init_1038@63:0>:int,
                                                         <init_1038@63:1>:int)
        solution:
          P[<fail_1553@88:0>]($101:bool) = false
          P[<init_1038@63:1>]($118:int,$120:int) = true
          P[<<init_1038@63:2>@80:0>]($104:int,$106:int,$108:int) = ((1 + $108) <= $106)
          P[<<<init_1038@63:3>@66:0>@78:0>]($111:int,$113:int,$115:int) = ((1 + $115) <= $113)
        
      end HcSolver.solve_ub(40300)[4] (0.014998 sec.)
      begin HcSolver.check_validity(40544)[4]
        input:
          P[<fail_1553@88:0>](<fail_1553@88:0>:bool)|- bot
          
          P[<<init_1038@63:2>@80:0>](0:int,<k_make_array_u_1213@85:1>:int,<k_make_array_u_1213@85:0>:int),
          ((0 <= <k_make_array_u_1213@85:0>) &&
           ((<k_make_array_u_1213@85:0> >= <k_make_array_u_1213@85:1>) && <fail_1553@88:0>))
          |- P[<fail_1553@88:0>](<fail_1553@88:0>:bool)
          
          P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
          P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,<<init_1038@63:2>@80:0>:int),
          (<init_1038@63:0> >= <init_1038@63:1>)
          |- P[<<init_1038@63:2>@80:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                        <<init_1038@63:2>@80:0>:int)
          
          P[<init_1038@63:1>](<init_1038@63:0>:int,<init_1038@63:1>:int),
          ((<init_1038@63:0> = 0) &&
           ((0 <= <<<init_1038@63:3>@66:0>@78:0>) && (<<<init_1038@63:3>@66:0>@78:0> < <init_1038@63:1>)))
          |- P[<<<init_1038@63:3>@66:0>@78:0>](<init_1038@63:0>:int,<init_1038@63:1>:int,
                                               <<<init_1038@63:3>@66:0>@78:0>:int)
          
           (<init_1038@63:0> = 0) |- P[<init_1038@63:1>](<init_1038@63:0>:int,
                                                         <init_1038@63:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(40544)[4] (0.010998 sec.)
      solution:
        P[<fail_1553@88:0>]($101:bool) = false
        P[<init_1038@63:1>]($118:int,$120:int) = true
        P[<<init_1038@63:2>@80:0>]($104:int,$106:int,$108:int) = ((1 + $108) <= $106)
        P[<<<init_1038@63:3>@66:0>@78:0>]($111:int,$113:int,$115:int) = ((1 + $115) <= $113)
    end YhornInterface.solve(40299)[3] (0.025996 sec.)
    
  end RefTypeInfer.infer_etrs(20198)[2] (0.254961 sec.)
  refinement types:
    main_1546: X
    f_1549: v1:int -> X
    f_1550: v1:int -> v2:int -> X
    f_1551: v1:int -> v2:int -> v3:int -> X
    main_1042: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1397: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    init_1038: v1:int ->
               v2:{v2:int | (v1 <= 0)} ->
               (v3:{v3:int | false} -> (v4:int -> X) -> X) ->
               ((v7:{v7:int | (1 <= v2)} -> (v8:int -> X) -> X) -> X) -> X
    f_k_main_1547: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:unit -> X) -> (v7:int -> (v8:int -> X) -> X) -> X
    k_main_1447: v1:bool ->
                 v2:int -> v3:int -> v4:int -> (v5:unit -> X) -> (v7:int -> (v8:int -> X) -> X) -> v11:bool -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1213: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1553: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1552: var143:int -> var142:int -> var141:int -> var140:unit -> X
    f_k_main_1548: var152:bool ->
                   var151:bool -> var150:int -> var149:int -> var148:int -> (var147:unit -> X) -> var145:int -> X
    fail_1554: var156:bool -> (var155:unit -> X) -> X
    k_make_array_u_1224: var162:int -> var161:int -> (var160:int -> X) -> var158:unit -> X
    k_update_1263: var173:int ->
                   var172:int ->
                   var171:int -> (var170:int -> (var169:int -> X) -> X) -> (var166:int -> X) -> var164:bool -> X
    update_1033: var183:int ->
                 (var182:int -> (var181:int -> X) -> X) -> var178:int -> var177:int -> (var176:int -> X) -> X
  abstraction types:
    main_1546: X
    f_1549: v1:int -> X
    f_1550: v1:int -> v2:int -> X
    f_1551: v1:int -> v2:int -> v3:int -> X
    main_1042: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1397: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    init_1038: v1:int ->
               v2:int[v2 -> (v1 <= 0)] ->
               (v3:int -> (v4:int -> X) -> X) -> ((v7:int[v7 -> (1 <= v2)] -> (v8:int -> X) -> X) -> X) -> X
    f_k_main_1547: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:unit -> X) -> (v7:int -> (v8:int -> X) -> X) -> X
    k_main_1447: v1:bool ->
                 v2:int -> v3:int -> v4:int -> (v5:unit -> X) -> (v7:int -> (v8:int -> X) -> X) -> v11:bool -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1213: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1553: v1:bool -> (v2:unit -> X) -> X
    f_1552: var143:int -> var142:int -> var141:int -> var140:unit -> X
    f_k_main_1548: var152:bool ->
                   var151:bool -> var150:int -> var149:int -> var148:int -> (var147:unit -> X) -> var145:int -> X
    fail_1554: var156:bool -> (var155:unit -> X) -> X
    k_make_array_u_1224: var162:int -> var161:int -> (var160:int -> X) -> var158:unit -> X
    k_update_1263: var173:int ->
                   var172:int ->
                   var171:int -> (var170:int -> (var169:int -> X) -> X) -> (var166:int -> X) -> var164:bool -> X
    update_1033: var183:int ->
                 (var182:int -> (var181:int -> X) -> X) -> var178:int -> var177:int -> (var176:int -> X) -> X
  
end AbsTypeInfer.refine(20197)[1] (0.261959 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1546
  main_1546 -> (rand_int f_1549)
  f_1549 x_1487 -> (rand_int (f_1550 x_1487))
  f_1550 x_1487 x_1500 -> (rand_int (f_1551 x_1487 x_1500))
  f_1551 x_1487 x_1500 x_1513 -> (main_1042 x_1487 x_1500 x_1513 (f_1552 x_1487 x_1500 x_1513))
  f_1552 x_1487 x_1500 x_1513 x_1484 -> end
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      0 <= i_1045) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 (i_1045 < n_1044))
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      not (0 <= i_1045)) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 false)
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (x_1451 >= 1) -> (k_main_1394 ())
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (
      not (x_1451 >= 1)) -> (fail_1554 true k_main_1394)
  fail_1553 b k -> {fail} => (k ())
  fail_1554 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (i_1039 >= n_1040) -> (k_init_1322 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) k_init_1322)
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when b_1481 ->
      (init_1038 k_1043 n_1044 (make_array_1030 n_1044) (f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when (not b_1481) -> (k_main_1394 ())
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when b_1477 ->
      (x_1404 i_1045 (f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when (not b_1477) -> (k_main_1394 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when b_1225 ->
      (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when (not b_1225) ->
      (fail_1553 true (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207))
  k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 x_1210 -> (k_make_array_1207 0)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when b_1278 -> (k_update_1260 x_1036)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when (not b_1278) -> (a_1035 j_1037 k_update_1260)
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (k_1043 >= 0) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 (k_1043 <= 0))
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (not (k_1043 >= 0)) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 false)
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (0 <= i_1032) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (not (0 <= i_1032)) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 false)
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (j_1037 > (i_1034 - 1)) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 (j_1037 <= i_1034))
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (not (j_1037 > (i_1034 - 1))) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 false)
Types:
  main_1546 : X
  fail_1553 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1554 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Filter option enabled.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 3)::
Main: main_1546
  main_1546 -> (rand_int f_1549)
  f_1549 x_1487 -> (rand_int (f_1550 x_1487))
  f_1550 x_1487 x_1500 -> (rand_int (f_1551 x_1487 x_1500))
  f_1551 x_1487 x_1500 x_1513 -> (main_1042 x_1487 x_1500 x_1513 (f_1552 x_1487 x_1500 x_1513))
  f_1552 x_1487 x_1500 x_1513 x_1484 -> end
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      0 <= i_1045) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 (i_1045 < n_1044))
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      not (0 <= i_1045)) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 false)
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (x_1451 >= 1) -> (k_main_1394 ())
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (
      not (x_1451 >= 1)) -> (fail_1554 true k_main_1394)
  fail_1553 b k -> {fail} => (k ())
  fail_1554 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (i_1039 >= n_1040) -> (k_init_1322 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) k_init_1322)
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when b_1481 ->
      (init_1038 k_1043 n_1044 (make_array_1030 n_1044) (f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when (not b_1481) -> (k_main_1394 ())
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when b_1477 ->
      (x_1404 i_1045 (f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when (not b_1477) -> (k_main_1394 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when b_1225 ->
      (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when (not b_1225) ->
      (fail_1553 true (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207))
  k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 x_1210 -> (k_make_array_1207 0)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when b_1278 -> (k_update_1260 x_1036)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when (not b_1278) -> (a_1035 j_1037 k_update_1260)
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (k_1043 >= 0) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 (k_1043 <= 0))
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (not (k_1043 >= 0)) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 false)
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (0 <= i_1032) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (not (0 <= i_1032)) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 false)
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (j_1037 > (i_1034 - 1)) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 (j_1037 <= i_1034))
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (not (j_1037 > (i_1034 - 1))) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 false)
Types:
  main_1546 : X
  fail_1553 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1554 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Negative-predicate option enabled.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 4)::
Main: main_1546
  main_1546 -> (rand_int f_1549)
  f_1549 x_1487 -> (rand_int (f_1550 x_1487))
  f_1550 x_1487 x_1500 -> (rand_int (f_1551 x_1487 x_1500))
  f_1551 x_1487 x_1500 x_1513 -> (main_1042 x_1487 x_1500 x_1513 (f_1552 x_1487 x_1500 x_1513))
  f_1552 x_1487 x_1500 x_1513 x_1484 -> end
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      0 <= i_1045) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 (i_1045 < n_1044))
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      not (0 <= i_1045)) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 false)
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (x_1451 >= 1) -> (k_main_1394 ())
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (
      not (x_1451 >= 1)) -> (fail_1554 true k_main_1394)
  fail_1553 b k -> {fail} => (k ())
  fail_1554 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (i_1039 >= n_1040) -> (k_init_1322 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) k_init_1322)
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when b_1481 ->
      (init_1038 k_1043 n_1044 (make_array_1030 n_1044) (f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when (not b_1481) -> (k_main_1394 ())
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when b_1477 ->
      (x_1404 i_1045 (f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when (not b_1477) -> (k_main_1394 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when b_1225 ->
      (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when (not b_1225) ->
      (fail_1553 true (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207))
  k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 x_1210 -> (k_make_array_1207 0)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when b_1278 -> (k_update_1260 x_1036)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when (not b_1278) -> (a_1035 j_1037 k_update_1260)
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (k_1043 >= 0) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 (k_1043 <= 0))
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (not (k_1043 >= 0)) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 false)
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (0 <= i_1032) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (not (0 <= i_1032)) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 false)
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (j_1037 > (i_1034 - 1)) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 (j_1037 <= i_1034))
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (not (j_1037 > (i_1034 - 1))) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 false)
Types:
  main_1546 : X
  fail_1553 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1554 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Error trace::
  main_1546 ... --> 
  f_1549 ... --> 
  f_1550 ... --> 
  f_1551 ... --> 
  main_1042 [1/2] ... --> 
  k_main_1397 [1/2] ... --> 
  init_1038 [1/2] ... --> 
  f_k_main_1547 [1/2] ... --> 
  k_main_1447 [1/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1213 [2/2] ... --> 
  fail_1553 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 0

(4-3) Checking counter-example ... DONE!

(4-4) Discovering predicates ... 
begin AbsTypeInfer.refine(42920)[1]
  program:
    main_1546  | true = ((Random.int 0) f_1549)
    f_1549 x_1487 | true = ((Random.int 0) (f_1550 x_1487))
    f_1550 x_1487 x_1500 | true = ((Random.int 0) (f_1551 x_1487
                                                          x_1500))
    f_1551 x_1487 x_1500 x_1513 | true = (main_1042 x_1487
                                                    x_1500
                                                    x_1513
                                                    (f_1552 x_1487
                                                            x_1500
                                                            x_1513))
    f_1552 x_1487 x_1500 x_1513 x_1484 | true = end
    f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 | (0 <= i_1045) = (
    k_main_1447 b_1481
                i_1045
                k_1043
                n_1044
                k_main_1394
                x_1404
                (i_1045 < n_1044))
    f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 | (not (
                                                                    0 <= i_1045)) = (
    k_main_1447 b_1481
                i_1045
                k_1043
                n_1044
                k_main_1394
                x_1404
                false)
    f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 | (
    x_1451 >= 1) = (k_main_1394 ())
    f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 | (
    not (x_1451 >= 1)) = (fail_1554 true
                                    k_main_1394)
    fail_1553 b k | true = (fail ())
    fail_1554 b k | true = (fail ())
    init_1038 i_1039 n_1040 a_1041 k_init_1322 | (i_1039 >= n_1040) = (
    k_init_1322 a_1041)
    init_1038 i_1039 n_1040 a_1041 k_init_1322 | (not (i_1039 >= n_1040)) = (
    init_1038 (i_1039 + 1)
              n_1040
              (update_1033 i_1039
                           a_1041
                           1)
              k_init_1322)
    k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 | b_1481 = (init_1038
                                                                    k_1043
                                                                    n_1044
                                                                    (
                                                                    make_array_1030 n_1044)
                                                                    (
                                                                    f_k_main_1547
                                                                    b_1481
                                                                    i_1045
                                                                    k_1043
                                                                    n_1044
                                                                    k_main_1394))
    k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 | (not b_1481) = (
    k_main_1394 ())
    k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 | b_1477 = (
    x_1404 i_1045
           (f_k_main_1548 b_1477
                          b_1481
                          i_1045
                          k_1043
                          n_1044
                          k_main_1394))
    k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 | (
    not b_1477) = (k_main_1394 ())
    k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 | b_1225 = (
    k_make_array_u_1224 i_1032
                        n_1031
                        k_make_array_1207
                        ())
    k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 | (not b_1225) = (
    fail_1553 true
              (k_make_array_u_1224 i_1032
                                   n_1031
                                   k_make_array_1207))
    k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 x_1210 | true = (
    k_make_array_1207 0)
    k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 | b_1278 = (
    k_update_1260 x_1036)
    k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 | (
    not b_1278) = (a_1035 j_1037
                          k_update_1260)
    main_1042 k_1043 n_1044 i_1045 k_main_1394 | (k_1043 >= 0) = (k_main_1397
                                                                    i_1045
                                                                    k_1043
                                                                    n_1044
                                                                    k_main_1394
                                                                    (
                                                                    k_1043 <= 0))
    main_1042 k_1043 n_1044 i_1045 k_main_1394 | (not (k_1043 >= 0)) = (
    k_main_1397 i_1045
                k_1043
                n_1044
                k_main_1394
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1207 | (0 <= i_1032) = (
    k_make_array_u_1213 i_1032
                        n_1031
                        k_make_array_1207
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1207 | (not (0 <= i_1032)) = (
    k_make_array_u_1213 i_1032
                        n_1031
                        k_make_array_1207
                        false)
    update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 | (j_1037 > (i_1034 - 1)) = (
    k_update_1263 i_1034
                  j_1037
                  x_1036
                  a_1035
                  k_update_1260
                  (j_1037 <= i_1034))
    update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 | (not (j_1037 > (i_1034 - 1))) = (
    k_update_1263 i_1034
                  j_1037
                  x_1036
                  a_1035
                  k_update_1260
                  false)
    main_1546:X
    f_1549:int -> X
    f_1550:int -> int -> X
    f_1551:int -> int -> int -> X
    f_1552:int -> int -> int -> unit -> X
    f_k_main_1547:bool -> int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> X
    f_k_main_1548:bool -> bool -> int -> int -> int -> (unit -> X) -> int -> X
    fail_1553:bool -> (unit -> X) -> X
    fail_1554:bool -> (unit -> X) -> X
    init_1038:int -> int -> (int -> (int -> X) -> X) -> ((int -> (int -> X) -> X) -> X) -> X
    k_main_1397:int -> int -> int -> (unit -> X) -> bool -> X
    k_main_1447:bool -> int -> int -> int -> (unit -> X) -> (int -> (int -> X) -> X) -> bool -> X
    k_make_array_u_1213:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1224:int -> int -> (int -> X) -> unit -> X
    k_update_1263:int -> int -> int -> (int -> (int -> X) -> X) -> (int -> X) -> bool -> X
    main_1042:int -> int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1033:int -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
  inlined functions: f_1549,f_1550,f_1551,f_1552,f_k_main_1547,f_k_main_1548,k_main_1397,k_main_1447,k_make_array_u_1213,k_make_array_u_1224,k_update_1263,main_1042,make_array_1030,update_1033
  counterexample: 0:0:0:0:0:0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1549@94:0> = var184)
     [true.nop((<f_1550@97:0> = <f_1549@94:0>) && (<f_1550@97:1> = var185))
      [true.nop((<f_1551@100:0> = <f_1550@97:0>) && ((<f_1551@100:1> = <f_1550@97:1>) && (<f_1551@100:2> = var186)))
       [true.
        ((<main_1042@102:0> = <f_1551@100:0>) &&
         ((<main_1042@102:1> = <f_1551@100:1>) && (<main_1042@102:2> = <f_1551@100:2>)))
        [(<main_1042@102:0> >= 0).
         ((<k_main_1397@105:0> = <main_1042@102:2>) &&
          ((<k_main_1397@105:1> = <main_1042@102:0>) &&
           ((<k_main_1397@105:2> = <main_1042@102:1>) && (<k_main_1397@105:4> = (<main_1042@102:0> <= 0)))))
         [<k_main_1397@105:4>.((<init_1038@108:0> = <k_main_1397@105:1>) && (<init_1038@108:1> = <k_main_1397@105:2>))
          [(<init_1038@108:0> >= <init_1038@108:1>).true
           [true.
            ((<f_k_main_1547@113:0> = <k_main_1397@105:4>) &&
             ((<f_k_main_1547@113:1> = <k_main_1397@105:0>) &&
              ((<f_k_main_1547@113:2> = <k_main_1397@105:1>) && (<f_k_main_1547@113:3> = <k_main_1397@105:2>))))
            [(0 <= <f_k_main_1547@113:1>).
             ((<k_main_1447@116:0> = <f_k_main_1547@113:0>) &&
              ((<k_main_1447@116:1> = <f_k_main_1547@113:1>) &&
               ((<k_main_1447@116:2> = <f_k_main_1547@113:2>) &&
                ((<k_main_1447@116:3> = <f_k_main_1547@113:3>) &&
                 (<k_main_1447@116:6> = (<f_k_main_1547@113:1> < <f_k_main_1547@113:3>))))))
             [<k_main_1447@116:6>.(<<k_main_1447@116:5>@119:0> = <k_main_1447@116:1>)
              [true.(<<f_k_main_1547@113:5>@121:0> = <<k_main_1447@116:5>@119:0>)
               [true.(<<<init_1038@108:3>@111:0>@123:0> = <<f_k_main_1547@113:5>@121:0>)
                [true.(<<init_1038@108:2>@125:0> = <<<init_1038@108:3>@111:0>@123:0>)
                 [true.
                  ((<make_array_1030@127:0> = <k_main_1397@105:2>) &&
                   (<make_array_1030@127:1> = <<init_1038@108:2>@125:0>))
                  [(not (0 <= <make_array_1030@127:1>)).
                   ((<k_make_array_u_1213@130:0> = <make_array_1030@127:1>) &&
                    ((<k_make_array_u_1213@130:1> = <make_array_1030@127:0>) && (<k_make_array_u_1213@130:3> = false)))
                   [(not <k_make_array_u_1213@130:3>).(<fail_1553@133:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(42921)[2]
    horn clauses:
      P[<fail_1553@133:0>](<fail_1553@133:0>:bool)|- bot
      
      P[<k_make_array_u_1213@130:3>](<k_make_array_u_1213@130:0>:int,<k_make_array_u_1213@130:1>:int,false:bool),
      <fail_1553@133:0> |- P[<fail_1553@133:0>](<fail_1553@133:0>:bool)
      
      P[<make_array_1030@127:1>](<k_make_array_u_1213@130:1>:int,<k_make_array_u_1213@130:0>:int),
      ((0 > <k_make_array_u_1213@130:0>) && (not <k_make_array_u_1213@130:3>))
      |- P[<k_make_array_u_1213@130:3>](<k_make_array_u_1213@130:0>:int,
                                        <k_make_array_u_1213@130:1>:int,
                                        <k_make_array_u_1213@130:3>:bool)
      
      P[<k_main_1397@105:4>](<f_k_main_1547@113:1>:int,<init_1038@108:0>:int,<make_array_1030@127:0>:int,true:bool),
      P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<make_array_1030@127:0>:int,<make_array_1030@127:1>:int)|- P[<make_array_1030@127:1>](
      <make_array_1030@127:0>:int,<make_array_1030@127:1>:int)
      
      P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
      P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int),
      (<init_1038@108:0> >= <init_1038@108:1>)
      |- P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,
                                      <<init_1038@108:2>@125:0>:int)
      
      P[<k_main_1397@105:4>](<f_k_main_1547@113:1>:int,<init_1038@108:0>:int,<init_1038@108:1>:int,true:bool),
      P[<<f_k_main_1547@113:5>@121:0>](true:bool,<f_k_main_1547@113:1>:int,<init_1038@108:0>:int,<init_1038@108:1>:int,<<<init_1038@108:3>@111:0>@123:0>:int),
      P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int)|- P[<<<init_1038@108:3>@111:0>@123:0>](
      <init_1038@108:0>:int,<init_1038@108:1>:int,<<<init_1038@108:3>@111:0>@123:0>:int)
      
      P[<f_k_main_1547@113:3>](<f_k_main_1547@113:0>:bool,<f_k_main_1547@113:1>:int,<f_k_main_1547@113:2>:int,<f_k_main_1547@113:3>:int),
      P[<<k_main_1447@116:5>@119:0>](<f_k_main_1547@113:0>:bool,<f_k_main_1547@113:1>:int,<f_k_main_1547@113:2>:int,<f_k_main_1547@113:3>:int,<<f_k_main_1547@113:5>@121:0>:int),
      (0 <= <f_k_main_1547@113:1>)
      |- P[<<f_k_main_1547@113:5>@121:0>](<f_k_main_1547@113:0>:bool,
                                          <f_k_main_1547@113:1>:int,<f_k_main_1547@113:2>:int,
                                          <f_k_main_1547@113:3>:int,<<f_k_main_1547@113:5>@121:0>:int)
      
      P[<k_main_1447@116:6>](<k_main_1447@116:0>:bool,<k_main_1447@116:1>:int,<k_main_1447@116:2>:int,<k_main_1447@116:3>:int,true:bool),
      (<<k_main_1447@116:5>@119:0> = <k_main_1447@116:1>)
      |- P[<<k_main_1447@116:5>@119:0>](<k_main_1447@116:0>:bool,<k_main_1447@116:1>:int,
                                        <k_main_1447@116:2>:int,<k_main_1447@116:3>:int,
                                        <<k_main_1447@116:5>@119:0>:int)
      
      P[<f_k_main_1547@113:3>](<k_main_1447@116:0>:bool,<k_main_1447@116:1>:int,<k_main_1447@116:2>:int,<k_main_1447@116:3>:int),
      ((0 <= <k_main_1447@116:1>) && (<k_main_1447@116:6> = (<k_main_1447@116:1> < <k_main_1447@116:3>)))
      |- P[<k_main_1447@116:6>](<k_main_1447@116:0>:bool,<k_main_1447@116:1>:int,
                                <k_main_1447@116:2>:int,<k_main_1447@116:3>:int,
                                <k_main_1447@116:6>:bool)
      
      P[<k_main_1397@105:4>](<f_k_main_1547@113:1>:int,<f_k_main_1547@113:2>:int,<f_k_main_1547@113:3>:int,<f_k_main_1547@113:0>:bool),
      <f_k_main_1547@113:0>
      |- P[<f_k_main_1547@113:3>](<f_k_main_1547@113:0>:bool,<f_k_main_1547@113:1>:int,
                                  <f_k_main_1547@113:2>:int,<f_k_main_1547@113:3>:int)
      
      P[<k_main_1397@105:4>](<k_main_1397@105:0>:int,<init_1038@108:0>:int,<init_1038@108:1>:int,true:bool)|- P[<init_1038@108:1>](
      <init_1038@108:0>:int,<init_1038@108:1>:int)
      
      P[<main_1042@102:2>](<k_main_1397@105:1>:int,<k_main_1397@105:2>:int,<k_main_1397@105:0>:int),
      ((<k_main_1397@105:1> >= 0) && (<k_main_1397@105:4> = (<k_main_1397@105:1> <= 0)))
      |- P[<k_main_1397@105:4>](<k_main_1397@105:0>:int,<k_main_1397@105:1>:int,
                                <k_main_1397@105:2>:int,<k_main_1397@105:4>:bool)
      
      P[<f_1551@100:2>](<main_1042@102:0>:int,<main_1042@102:1>:int,<main_1042@102:2>:int)|- P[<main_1042@102:2>](
      <main_1042@102:0>:int,<main_1042@102:1>:int,<main_1042@102:2>:int)
      
      P[<f_1550@97:1>](<f_1551@100:0>:int,<f_1551@100:1>:int)|- P[<f_1551@100:2>](
      <f_1551@100:0>:int,<f_1551@100:1>:int,<f_1551@100:2>:int)
      
      P[<f_1549@94:0>](<f_1550@97:0>:int)|- P[<f_1550@97:1>](<f_1550@97:0>:int,
                                                             <f_1550@97:1>:int)
      
      |- P[<f_1549@94:0>](<f_1549@94:0>:int)
    call trees:
      <main_1546@91>
        <f_1549@94>
          <f_1550@97>
            <f_1551@100>
              <main_1042@102>
                <k_main_1397@105>
                  <init_1038@108>
                  </<init_1038@108:3>@111>
                  <f_k_main_1547@113>
                    <k_main_1447@116>
                    </<k_main_1447@116:5>@119>
                  </<f_k_main_1547@113:5>@121>
                  <<<init_1038@108:3>@111:0>@123>
                  </<init_1038@108:2>@125>
                  <make_array_1030@127>
                    <k_make_array_u_1213@130>
                      <fail_1553@133>
    inlined horn clauses:
      P[<fail_1553@133:0>](<fail_1553@133:0>:bool)|- bot
      
      P[<<init_1038@108:2>@125:0>](0:int,<k_make_array_u_1213@130:1>:int,<k_make_array_u_1213@130:0>:int),
      ((0 > <k_make_array_u_1213@130:0>) && <fail_1553@133:0>) |- P[<fail_1553@133:0>](
      <fail_1553@133:0>:bool)
      
      P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
      P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int),
      (<init_1038@108:0> >= <init_1038@108:1>)
      |- P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,
                                      <<init_1038@108:2>@125:0>:int)
      
      P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
      ((<init_1038@108:0> = 0) &&
       ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
      |- P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,
                                              <<<init_1038@108:3>@111:0>@123:0>:int)
      
       (<init_1038@108:0> = 0) |- P[<init_1038@108:1>](<init_1038@108:0>:int,
                                                       <init_1038@108:1>:int)
    begin ParamSubstInfer.infer(45559)[3]
      
    end ParamSubstInfer.infer(45559)[3] (0.361945 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(45561)[3]
      
    end RefTypeInfer.elim_coeffs(45561)[3] (0.001000 sec.)
    begin GenHcSolver.solve(45797)[3]
      Horn clauses:
        P[<fail_1553@133:0>](<fail_1553@133:0>:bool)|- bot
        
        P[<<init_1038@108:2>@125:0>](0:int,<k_make_array_u_1213@130:1>:int,<k_make_array_u_1213@130:0>:int),
        ((0 > <k_make_array_u_1213@130:0>) && <fail_1553@133:0>) |- P[<fail_1553@133:0>](
        <fail_1553@133:0>:bool)
        
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
        P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int),
        (<init_1038@108:0> >= <init_1038@108:1>)
        |- P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,
                                        <<init_1038@108:2>@125:0>:int)
        
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
        ((<init_1038@108:0> = 0) &&
         ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
        |- P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,
                                                <init_1038@108:1>:int,
                                                <<<init_1038@108:3>@111:0>@123:0>:int)
        
         (<init_1038@108:0> = 0) |- P[<init_1038@108:1>](<init_1038@108:0>:int,
                                                         <init_1038@108:1>:int)
      lower bounds:
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int) = (<init_1038@108:0> = 0)
        P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<<init_1038@108:3>@111:0>@123:0>:int) =
        ((<init_1038@108:0> = 0) &&
         ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
        P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int) =
        ((<init_1038@108:0> = 0) &&
         ((<init_1038@108:0> >= <init_1038@108:1>) &&
          ((0 <= <<init_1038@108:2>@125:0>) && (<<init_1038@108:2>@125:0> < <init_1038@108:1>))))
        P[<fail_1553@133:0>](<fail_1553@133:0>:bool) = false
      upper bounds:
        P[<fail_1553@133:0>](var188:bool) = true
      begin GenHcSolver.classify_pids(47750)[4]
        output:
          [<fail_1553@133:0>]
      end GenHcSolver.classify_pids(47750)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(47753)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(47754)[5]
          begin InterpProver.interpolate_fresh(47755)[6]
            begin InterpProver.interpolate_log(47756)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(47757)[8]
                begin InterpProver.interpolate_simplify(47758)[9]
                  begin InterpProver.interpolate_quick(47771)[10]
                    
                  end InterpProver.interpolate_quick(47771)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(47775)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(47775)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(47758)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(47757)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(47756)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(47755)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(47754)[5] (0.000000 sec.)
        output:
          P[<fail_1553@133:0>](<fail_1553@133:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(47753)[4] (0.000000 sec.)
      Horn clauses:
        P[<<init_1038@108:2>@125:0>](0:int,<k_make_array_u_1213@130:1>:int,<k_make_array_u_1213@130:0>:int),
        (0 > <k_make_array_u_1213@130:0>) |- bot
        
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
        P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int),
        (<init_1038@108:0> >= <init_1038@108:1>)
        |- P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,
                                        <<init_1038@108:2>@125:0>:int)
        
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
        ((<init_1038@108:0> = 0) &&
         ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
        |- P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,
                                                <init_1038@108:1>:int,
                                                <<<init_1038@108:3>@111:0>@123:0>:int)
        
         (<init_1038@108:0> = 0) |- P[<init_1038@108:1>](<init_1038@108:0>:int,
                                                         <init_1038@108:1>:int)
      lower bounds:
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int) = (<init_1038@108:0> = 0)
        P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<<init_1038@108:3>@111:0>@123:0>:int) =
        ((<init_1038@108:0> = 0) &&
         ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
        P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int) =
        ((<init_1038@108:0> = 0) &&
         ((<init_1038@108:0> >= <init_1038@108:1>) &&
          ((0 <= <<init_1038@108:2>@125:0>) && (<<init_1038@108:2>@125:0> < <init_1038@108:1>))))
      upper bounds:
        P[<<init_1038@108:2>@125:0>](var189:int,var190:int,var191:int) = ((var189 <> 0) || (0 <= var191))
      begin GenHcSolver.classify_pids(50013)[4]
        output:
          [<<init_1038@108:2>@125:0>]
      end GenHcSolver.classify_pids(50013)[4] (0.000000 sec.)
      lb:((<init_1038@108:0> = 0) &&
          ((<init_1038@108:0> >= <init_1038@108:1>) &&
           ((0 <= <<init_1038@108:2>@125:0>) && (<<init_1038@108:2>@125:0> < <init_1038@108:1>))))
      nub:(not ((<init_1038@108:0> <> 0) || (0 <= <<init_1038@108:2>@125:0>)))
      begin ApronInterface.convex_hull_interpolate(50016)[4]
        lb:((<init_1038@108:0> = 0) &&
            ((<init_1038@108:0> >= <init_1038@108:1>) &&
             ((0 <= <<init_1038@108:2>@125:0>) && (<<init_1038@108:2>@125:0> < <init_1038@108:1>))))
        nub:(not ((<init_1038@108:0> <> 0) || (0 <= <<init_1038@108:2>@125:0>)))
        lb':((<init_1038@108:0> = 0) &&
             ((<init_1038@108:0> >= <init_1038@108:1>) &&
              ((0 <= <<init_1038@108:2>@125:0>) && (<<init_1038@108:2>@125:0> < <init_1038@108:1>))))
        nub':(not ((<init_1038@108:0> <> 0) || (0 <= <<init_1038@108:2>@125:0>)))
        begin InterpProver.interpolate(50017)[5]
          begin InterpProver.interpolate_fresh(50018)[6]
            begin InterpProver.interpolate_log(50019)[7]
              input1: ((<init_1038@108:0> = 0) &&
                       ((<init_1038@108:0> >= <init_1038@108:1>) &&
                        ((0 <= <<init_1038@108:2>@125:0>) && (<<init_1038@108:2>@125:0> < <init_1038@108:1>))))
              input2: (not ((<init_1038@108:0> <> 0) || (0 <= <<init_1038@108:2>@125:0>)))
              begin InterpProver.interpolate_check(50020)[8]
                begin InterpProver.interpolate_simplify(50021)[9]
                  begin InterpProver.interpolate_quick(50134)[10]
                    
                  end InterpProver.interpolate_quick(50134)[10] (0.001000 sec.)
                  begin minimizing # of disjunctions(50141)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(50141)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(50021)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(50020)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(50019)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(50018)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(50017)[5] (0.001000 sec.)
        output:
          P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int) =
          false
      end ApronInterface.convex_hull_interpolate(50016)[4] (0.001000 sec.)
      Horn clauses:
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
        P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int),
        (<init_1038@108:0> >= <init_1038@108:1>) |- bot
        
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
        ((<init_1038@108:0> = 0) &&
         ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
        |- P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,
                                                <init_1038@108:1>:int,
                                                <<<init_1038@108:3>@111:0>@123:0>:int)
        
         (<init_1038@108:0> = 0) |- P[<init_1038@108:1>](<init_1038@108:0>:int,
                                                         <init_1038@108:1>:int)
      lower bounds:
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int) = (<init_1038@108:0> = 0)
        P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<<init_1038@108:3>@111:0>@123:0>:int) =
        ((<init_1038@108:0> = 0) &&
         ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
      upper bounds:
        P[<<<init_1038@108:3>@111:0>@123:0>](var192:int,var193:int,var194:int) = ((var192 <> 0) || (0 < var193))
      begin GenHcSolver.classify_pids(51700)[4]
        output:
          [<<<init_1038@108:3>@111:0>@123:0>]
      end GenHcSolver.classify_pids(51700)[4] (0.000000 sec.)
      lb:((<init_1038@108:0> = 0) &&
          ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
      nub:(not ((<init_1038@108:0> <> 0) || (0 < <init_1038@108:1>)))
      begin ApronInterface.convex_hull_interpolate(51703)[4]
        lb:((<init_1038@108:0> = 0) &&
            ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
        nub:(not ((<init_1038@108:0> <> 0) || (0 < <init_1038@108:1>)))
        lb':((<init_1038@108:0> = 0) &&
             ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
        nub':(not ((<init_1038@108:0> <> 0) || (0 < <init_1038@108:1>)))
        begin InterpProver.interpolate(51704)[5]
          begin InterpProver.interpolate_fresh(51705)[6]
            begin InterpProver.interpolate_log(51706)[7]
              input1: ((<init_1038@108:0> = 0) &&
                       ((0 <= <<<init_1038@108:3>@111:0>@123:0>) &&
                        (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
              input2: (not ((<init_1038@108:0> <> 0) || (0 < <init_1038@108:1>)))
              begin InterpProver.interpolate_check(51707)[8]
                begin InterpProver.interpolate_simplify(51708)[9]
                  begin InterpProver.interpolate_quick(51781)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(51790)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(51791)[12]
                        begin CsisatInterface.interpolate_csisat_log(51792)[13]
                          input1: (0 = v_sep_init_1038_sep_108_sep_0 & 0 <= v_sep_init_1038_sep_108_sep_3_sep_111_sep_0_sep_123_sep_0 & (1 + v_sep_init_1038_sep_108_sep_3_sep_111_sep_0_sep_123_sep_0) <= v_sep_init_1038_sep_108_sep_1)
                          input2: (0 = v_sep_init_1038_sep_108_sep_0 & v_sep_init_1038_sep_108_sep_1 <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(51793)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(51793)[14] (0.001000 sec.)
                          output: -2*v_sep_init_1038_sep_108_sep_1 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(51792)[13] (0.001000 sec.)
                        after simplification: -2*v_sep_init_1038_sep_108_sep_1 <= -2
                        after dnf conversion: ((-2*v_sep_init_1038_sep_108_sep_1 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(51791)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(51790)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(51781)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(51708)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(51707)[8] (0.002000 sec.)
              output: (1 <= <init_1038@108:1>)
            end InterpProver.interpolate_log(51706)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(51705)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(51704)[5] (0.002000 sec.)
        output:
          P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<<init_1038@108:3>@111:0>@123:0>:int) =
          (1 <= <init_1038@108:1>)
      end ApronInterface.convex_hull_interpolate(51703)[4] (0.002000 sec.)
      Horn clauses:
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
        ((<init_1038@108:0> >= <init_1038@108:1>) && (1 <= <init_1038@108:1>)) |- bot
        
         (<init_1038@108:0> = 0) |- P[<init_1038@108:1>](<init_1038@108:0>:int,
                                                         <init_1038@108:1>:int)
      lower bounds:
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int) = (<init_1038@108:0> = 0)
      upper bounds:
        P[<init_1038@108:1>](var195:int,var196:int) = ((var195 < var196) || (1 > var196))
      begin GenHcSolver.classify_pids(52895)[4]
        output:
          [<init_1038@108:1>]
      end GenHcSolver.classify_pids(52895)[4] (0.000000 sec.)
      lb:(<init_1038@108:0> = 0)
      nub:(not ((<init_1038@108:0> < <init_1038@108:1>) || (1 > <init_1038@108:1>)))
      begin ApronInterface.convex_hull_interpolate(52898)[4]
        lb:(<init_1038@108:0> = 0)
        nub:(not ((<init_1038@108:0> < <init_1038@108:1>) || (1 > <init_1038@108:1>)))
        lb':(<init_1038@108:0> = 0)
        nub':(not ((<init_1038@108:0> < <init_1038@108:1>) || (1 > <init_1038@108:1>)))
        begin InterpProver.interpolate(52899)[5]
          begin InterpProver.interpolate_fresh(52900)[6]
            begin InterpProver.interpolate_log(52901)[7]
              input1: (<init_1038@108:0> = 0)
              input2: (not ((<init_1038@108:0> < <init_1038@108:1>) || (1 > <init_1038@108:1>)))
              begin InterpProver.interpolate_check(52902)[8]
                begin InterpProver.interpolate_simplify(52903)[9]
                  begin InterpProver.interpolate_quick(52948)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(52957)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(52958)[12]
                        begin CsisatInterface.interpolate_csisat_log(52959)[13]
                          input1: 0 = v_sep_init_1038_sep_108_sep_0
                          input2: (1 <= v_sep_init_1038_sep_108_sep_1 & v_sep_init_1038_sep_108_sep_1 <= v_sep_init_1038_sep_108_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(52960)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(52960)[14] (0.000000 sec.)
                          output: 2*v_sep_init_1038_sep_108_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(52959)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_init_1038_sep_108_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_init_1038_sep_108_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(52958)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(52957)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(52948)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(52903)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(52902)[8] (0.002000 sec.)
              output: (<init_1038@108:0> <= 0)
            end InterpProver.interpolate_log(52901)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(52900)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(52899)[5] (0.002000 sec.)
        output:
          P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int) = (<init_1038@108:0> <= 0)
      end ApronInterface.convex_hull_interpolate(52898)[4] (0.002000 sec.)
      begin HcSolver.check_validity(53127)[4]
        input:
          P[<fail_1553@133:0>](<fail_1553@133:0>:bool)|- bot
          
          P[<<init_1038@108:2>@125:0>](0:int,<k_make_array_u_1213@130:1>:int,<k_make_array_u_1213@130:0>:int),
          ((0 > <k_make_array_u_1213@130:0>) && <fail_1553@133:0>) |- P[<fail_1553@133:0>](
          <fail_1553@133:0>:bool)
          
          P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
          P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int),
          (<init_1038@108:0> >= <init_1038@108:1>)
          |- P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,
                                          <<init_1038@108:2>@125:0>:int)
          
          P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
          ((<init_1038@108:0> = 0) &&
           ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
          |- P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,
                                                  <init_1038@108:1>:int,
                                                  <<<init_1038@108:3>@111:0>@123:0>:int)
          
           (<init_1038@108:0> = 0) |- P[<init_1038@108:1>](<init_1038@108:0>:int,
                                                           <init_1038@108:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(53127)[4] (0.003000 sec.)
      solution:
        P[<fail_1553@133:0>](<fail_1553@133:0>:bool) = false
        P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int) = false
        P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<<init_1038@108:3>@111:0>@123:0>:int) =
        (1 <= <init_1038@108:1>)
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int) = (<init_1038@108:0> <= 0)
    end GenHcSolver.solve(45797)[3] (0.040994 sec.)
    begin GenHcSolver.solve(53741)[3]
      Horn clauses:
        P[<fail_1553@133:0>](<fail_1553@133:0>:bool)|- bot
        
        P[<<init_1038@108:2>@125:0>](0:int,<k_make_array_u_1213@130:1>:int,<k_make_array_u_1213@130:0>:int),
        ((0 > <k_make_array_u_1213@130:0>) && <fail_1553@133:0>) |- P[<fail_1553@133:0>](
        <fail_1553@133:0>:bool)
        
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
        P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int),
        (<init_1038@108:0> >= <init_1038@108:1>)
        |- P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,
                                        <<init_1038@108:2>@125:0>:int)
        
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
        ((<init_1038@108:0> = 0) &&
         ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
        |- P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,
                                                <init_1038@108:1>:int,
                                                <<<init_1038@108:3>@111:0>@123:0>:int)
        
         (<init_1038@108:0> = 0) |- P[<init_1038@108:1>](<init_1038@108:0>:int,
                                                         <init_1038@108:1>:int)
      lower bounds:
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int) = (<init_1038@108:0> = 0)
        P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<<init_1038@108:3>@111:0>@123:0>:int) =
        ((<init_1038@108:0> = 0) &&
         ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
        P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int) =
        ((<init_1038@108:0> = 0) &&
         ((<init_1038@108:0> >= <init_1038@108:1>) &&
          ((0 <= <<init_1038@108:2>@125:0>) && (<<init_1038@108:2>@125:0> < <init_1038@108:1>))))
        P[<fail_1553@133:0>](<fail_1553@133:0>:bool) = false
      upper bounds:
        P[<fail_1553@133:0>](var198:bool) = true
      begin GenHcSolver.classify_pids(55694)[4]
        output:
          [<fail_1553@133:0>]
      end GenHcSolver.classify_pids(55694)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(55697)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(55700)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(55700)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(55705)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(55705)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(55708)[5]
          begin InterpProver.interpolate_fresh(55709)[6]
            begin InterpProver.interpolate_log(55710)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(55711)[8]
                begin InterpProver.interpolate_simplify(55712)[9]
                  begin InterpProver.interpolate_quick(55727)[10]
                    
                  end InterpProver.interpolate_quick(55727)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(55731)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(55731)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(55712)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(55711)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(55710)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(55709)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(55708)[5] (0.001000 sec.)
        output:
          P[<fail_1553@133:0>](<fail_1553@133:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(55697)[4] (0.002000 sec.)
      Horn clauses:
        P[<<init_1038@108:2>@125:0>](0:int,<k_make_array_u_1213@130:1>:int,<k_make_array_u_1213@130:0>:int),
        (0 > <k_make_array_u_1213@130:0>) |- bot
        
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
        P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int),
        (<init_1038@108:0> >= <init_1038@108:1>)
        |- P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,
                                        <<init_1038@108:2>@125:0>:int)
        
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
        ((<init_1038@108:0> = 0) &&
         ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
        |- P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,
                                                <init_1038@108:1>:int,
                                                <<<init_1038@108:3>@111:0>@123:0>:int)
        
         (<init_1038@108:0> = 0) |- P[<init_1038@108:1>](<init_1038@108:0>:int,
                                                         <init_1038@108:1>:int)
      lower bounds:
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int) = (<init_1038@108:0> = 0)
        P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<<init_1038@108:3>@111:0>@123:0>:int) =
        ((<init_1038@108:0> = 0) &&
         ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
        P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int) =
        ((<init_1038@108:0> = 0) &&
         ((<init_1038@108:0> >= <init_1038@108:1>) &&
          ((0 <= <<init_1038@108:2>@125:0>) && (<<init_1038@108:2>@125:0> < <init_1038@108:1>))))
      upper bounds:
        P[<<init_1038@108:2>@125:0>](var199:int,var200:int,var201:int) = ((var199 <> 0) || (0 <= var201))
      begin GenHcSolver.classify_pids(57976)[4]
        output:
          [<<init_1038@108:2>@125:0>]
      end GenHcSolver.classify_pids(57976)[4] (0.000000 sec.)
      lb:((<init_1038@108:0> = 0) &&
          ((<init_1038@108:0> >= <init_1038@108:1>) &&
           ((0 <= <<init_1038@108:2>@125:0>) && (<<init_1038@108:2>@125:0> < <init_1038@108:1>))))
      nub:(not ((<init_1038@108:0> <> 0) || (0 <= <<init_1038@108:2>@125:0>)))
      begin ApronInterface.convex_hull_interpolate(57979)[4]
        lb:((<init_1038@108:0> = 0) &&
            ((<init_1038@108:0> >= <init_1038@108:1>) &&
             ((0 <= <<init_1038@108:2>@125:0>) && (<<init_1038@108:2>@125:0> < <init_1038@108:1>))))
        nub:(not ((<init_1038@108:0> <> 0) || (0 <= <<init_1038@108:2>@125:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(58025)[5]
          ts: ((<init_1038@108:0> = 0) &&
               ((<init_1038@108:0> >= <init_1038@108:1>) &&
                ((0 <= <<init_1038@108:2>@125:0>) && (<<init_1038@108:2>@125:0> < <init_1038@108:1>))))
          
        end ExtFormula.Formula.case_analysis_boolean(58025)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(58043)[5]
          ts: ((<init_1038@108:0> = 0) && (0 > <<init_1038@108:2>@125:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(58043)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':((<init_1038@108:0> = 0) && ((-1 + (-1 * <<init_1038@108:2>@125:0>)) >= 0))
        begin InterpProver.interpolate(58048)[5]
          begin InterpProver.interpolate_fresh(58049)[6]
            begin InterpProver.interpolate_log(58050)[7]
              input1: (-1 >= 0)
              input2: ((<init_1038@108:0> = 0) && ((-1 + (-1 * <<init_1038@108:2>@125:0>)) >= 0))
              begin InterpProver.interpolate_check(58051)[8]
                begin InterpProver.interpolate_simplify(58052)[9]
                  begin InterpProver.interpolate_quick(58092)[10]
                    
                  end InterpProver.interpolate_quick(58092)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(58096)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(58096)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(58052)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(58051)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(58050)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(58049)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(58048)[5] (0.001000 sec.)
        output:
          P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int) =
          false
      end ApronInterface.convex_hull_interpolate(57979)[4] (0.002000 sec.)
      Horn clauses:
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
        P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int),
        (<init_1038@108:0> >= <init_1038@108:1>) |- bot
        
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
        ((<init_1038@108:0> = 0) &&
         ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
        |- P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,
                                                <init_1038@108:1>:int,
                                                <<<init_1038@108:3>@111:0>@123:0>:int)
        
         (<init_1038@108:0> = 0) |- P[<init_1038@108:1>](<init_1038@108:0>:int,
                                                         <init_1038@108:1>:int)
      lower bounds:
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int) = (<init_1038@108:0> = 0)
        P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<<init_1038@108:3>@111:0>@123:0>:int) =
        ((<init_1038@108:0> = 0) &&
         ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
      upper bounds:
        P[<<<init_1038@108:3>@111:0>@123:0>](var202:int,var203:int,var204:int) = ((var202 <> 0) || (0 < var203))
      begin GenHcSolver.classify_pids(59657)[4]
        output:
          [<<<init_1038@108:3>@111:0>@123:0>]
      end GenHcSolver.classify_pids(59657)[4] (0.000000 sec.)
      lb:((<init_1038@108:0> = 0) &&
          ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
      nub:(not ((<init_1038@108:0> <> 0) || (0 < <init_1038@108:1>)))
      begin ApronInterface.convex_hull_interpolate(59660)[4]
        lb:((<init_1038@108:0> = 0) &&
            ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
        nub:(not ((<init_1038@108:0> <> 0) || (0 < <init_1038@108:1>)))
        begin ExtFormula.Formula.case_analysis_boolean(59686)[5]
          ts: ((<init_1038@108:0> = 0) &&
               ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
          
        end ExtFormula.Formula.case_analysis_boolean(59686)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(59702)[5]
          ts: ((<init_1038@108:0> = 0) && (0 >= <init_1038@108:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(59702)[5] (0.001000 sec.)
        lb':((<init_1038@108:0> = 0) &&
             ((<<<init_1038@108:3>@111:0>@123:0> >= 0) &&
              (((-1 + (-1 * <<<init_1038@108:3>@111:0>@123:0>)) + <init_1038@108:1>) >= 0)))
        nub':((<init_1038@108:0> = 0) && ((-1 * <init_1038@108:1>) >= 0))
        begin InterpProver.interpolate(59707)[5]
          begin InterpProver.interpolate_fresh(59708)[6]
            begin InterpProver.interpolate_log(59709)[7]
              input1: ((<init_1038@108:0> = 0) &&
                       ((<<<init_1038@108:3>@111:0>@123:0> >= 0) &&
                        (((-1 + (-1 * <<<init_1038@108:3>@111:0>@123:0>)) + <init_1038@108:1>) >= 0)))
              input2: ((<init_1038@108:0> = 0) && ((-1 * <init_1038@108:1>) >= 0))
              begin InterpProver.interpolate_check(59710)[8]
                begin InterpProver.interpolate_simplify(59711)[9]
                  begin InterpProver.interpolate_quick(59794)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(59803)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(59804)[12]
                        begin CsisatInterface.interpolate_csisat_log(59805)[13]
                          input1: (0 = v_sep_init_1038_sep_108_sep_0 & 0 <= v_sep_init_1038_sep_108_sep_3_sep_111_sep_0_sep_123_sep_0 & (1 + v_sep_init_1038_sep_108_sep_3_sep_111_sep_0_sep_123_sep_0) <= v_sep_init_1038_sep_108_sep_1)
                          input2: (0 = v_sep_init_1038_sep_108_sep_0 & v_sep_init_1038_sep_108_sep_1 <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(59806)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(59806)[14] (0.000000 sec.)
                          output: -2*v_sep_init_1038_sep_108_sep_1 <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(59805)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_init_1038_sep_108_sep_1 <= -2
                        after dnf conversion: ((-2*v_sep_init_1038_sep_108_sep_1 <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(59804)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(59803)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(59794)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(59711)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(59710)[8] (0.002000 sec.)
              output: (1 <= <init_1038@108:1>)
            end InterpProver.interpolate_log(59709)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(59708)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(59707)[5] (0.002000 sec.)
        output:
          P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<<init_1038@108:3>@111:0>@123:0>:int) =
          (1 <= <init_1038@108:1>)
      end ApronInterface.convex_hull_interpolate(59660)[4] (0.003000 sec.)
      Horn clauses:
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
        ((<init_1038@108:0> >= <init_1038@108:1>) && (1 <= <init_1038@108:1>)) |- bot
        
         (<init_1038@108:0> = 0) |- P[<init_1038@108:1>](<init_1038@108:0>:int,
                                                         <init_1038@108:1>:int)
      lower bounds:
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int) = (<init_1038@108:0> = 0)
      upper bounds:
        P[<init_1038@108:1>](var205:int,var206:int) = ((var205 < var206) || (1 > var206))
      begin GenHcSolver.classify_pids(60908)[4]
        output:
          [<init_1038@108:1>]
      end GenHcSolver.classify_pids(60908)[4] (0.000000 sec.)
      lb:(<init_1038@108:0> = 0)
      nub:(not ((<init_1038@108:0> < <init_1038@108:1>) || (1 > <init_1038@108:1>)))
      begin ApronInterface.convex_hull_interpolate(60911)[4]
        lb:(<init_1038@108:0> = 0)
        nub:(not ((<init_1038@108:0> < <init_1038@108:1>) || (1 > <init_1038@108:1>)))
        begin ExtFormula.Formula.case_analysis_boolean(60915)[5]
          ts: (<init_1038@108:0> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(60915)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(60936)[5]
          ts: ((<init_1038@108:0> >= <init_1038@108:1>) && (1 <= <init_1038@108:1>))
          
        end ExtFormula.Formula.case_analysis_boolean(60936)[5] (0.000000 sec.)
        lb':(<init_1038@108:0> = 0)
        nub':(((-1 + <init_1038@108:1>) >= 0) && (((-1 * <init_1038@108:1>) + <init_1038@108:0>) >= 0))
        begin InterpProver.interpolate(60943)[5]
          begin InterpProver.interpolate_fresh(60944)[6]
            begin InterpProver.interpolate_log(60945)[7]
              input1: (<init_1038@108:0> = 0)
              input2: (((-1 + <init_1038@108:1>) >= 0) && (((-1 * <init_1038@108:1>) + <init_1038@108:0>) >= 0))
              begin InterpProver.interpolate_check(60946)[8]
                begin InterpProver.interpolate_simplify(60947)[9]
                  begin InterpProver.interpolate_quick(60992)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(61001)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(61002)[12]
                        begin CsisatInterface.interpolate_csisat_log(61003)[13]
                          input1: 0 = v_sep_init_1038_sep_108_sep_0
                          input2: (1 <= v_sep_init_1038_sep_108_sep_1 & v_sep_init_1038_sep_108_sep_1 <= v_sep_init_1038_sep_108_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(61004)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(61004)[14] (0.000000 sec.)
                          output: 2*v_sep_init_1038_sep_108_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(61003)[13] (0.000000 sec.)
                        after simplification: 2*v_sep_init_1038_sep_108_sep_0 <= 0
                        after dnf conversion: ((2*v_sep_init_1038_sep_108_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(61002)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(61001)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(60992)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(60947)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(60946)[8] (0.000000 sec.)
              output: (<init_1038@108:0> <= 0)
            end InterpProver.interpolate_log(60945)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(60944)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(60943)[5] (0.001000 sec.)
        output:
          P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int) = (<init_1038@108:0> <= 0)
      end ApronInterface.convex_hull_interpolate(60911)[4] (0.001000 sec.)
      begin HcSolver.check_validity(61171)[4]
        input:
          P[<fail_1553@133:0>](<fail_1553@133:0>:bool)|- bot
          
          P[<<init_1038@108:2>@125:0>](0:int,<k_make_array_u_1213@130:1>:int,<k_make_array_u_1213@130:0>:int),
          ((0 > <k_make_array_u_1213@130:0>) && <fail_1553@133:0>) |- P[<fail_1553@133:0>](
          <fail_1553@133:0>:bool)
          
          P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
          P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int),
          (<init_1038@108:0> >= <init_1038@108:1>)
          |- P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,
                                          <<init_1038@108:2>@125:0>:int)
          
          P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
          ((<init_1038@108:0> = 0) &&
           ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
          |- P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,
                                                  <init_1038@108:1>:int,
                                                  <<<init_1038@108:3>@111:0>@123:0>:int)
          
           (<init_1038@108:0> = 0) |- P[<init_1038@108:1>](<init_1038@108:0>:int,
                                                           <init_1038@108:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(61171)[4] (0.002999 sec.)
      solution:
        P[<fail_1553@133:0>](<fail_1553@133:0>:bool) = false
        P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int) = false
        P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<<init_1038@108:3>@111:0>@123:0>:int) =
        (1 <= <init_1038@108:1>)
        P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int) = (<init_1038@108:0> <= 0)
    end GenHcSolver.solve(53741)[3] (0.048992 sec.)
    begin YhornInterface.solve(61785)[3]
      begin HcSolver.solve_ub(61786)[4]
        encoded:
          P[<fail_1553@133:0>](<fail_1553@133:0>:int)|- bot
          
          P[<<init_1038@108:2>@125:0>](0:int,<k_make_array_u_1213@130:1>:int,<k_make_array_u_1213@130:0>:int),
          ((0 > <k_make_array_u_1213@130:0>) && (<fail_1553@133:0> = 1)) |- P[<fail_1553@133:0>](
          <fail_1553@133:0>:int)
          
          P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
          P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int),
          (<init_1038@108:0> >= <init_1038@108:1>)
          |- P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,
                                          <<init_1038@108:2>@125:0>:int)
          
          P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
          ((<init_1038@108:0> = 0) &&
           ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
          |- P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,
                                                  <init_1038@108:1>:int,
                                                  <<<init_1038@108:3>@111:0>@123:0>:int)
          
           (<init_1038@108:0> = 0) |- P[<init_1038@108:1>](<init_1038@108:0>:int,
                                                           <init_1038@108:1>:int)
        input to Yhorn:
          P[<fail_1553@133:0>](<fail_1553@133:0>:int)|- bot
          
          P[<<init_1038@108:2>@125:0>](var207:int,<k_make_array_u_1213@130:1>:int,<k_make_array_u_1213@130:0>:int),
          ((0 > <k_make_array_u_1213@130:0>) && ((var207 = 0) && (<fail_1553@133:0> = 1)))
          |- P[<fail_1553@133:0>](<fail_1553@133:0>:int)
          
          P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
          P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int),
          (<init_1038@108:0> >= <init_1038@108:1>)
          |- P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,
                                          <<init_1038@108:2>@125:0>:int)
          
          P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
          ((<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>) &&
           ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<init_1038@108:0> = 0)))
          |- P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,
                                                  <init_1038@108:1>:int,
                                                  <<<init_1038@108:3>@111:0>@123:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1553_sep_133_sep_0($181)) -> 1=0.
(($181-1=0) & ($182=0) & (-$183>0)) & (v_sep_init_1038_sep_108_sep_2_sep_125_sep_0($182,$184,$183)) -> v_sep_fail_1553_sep_133_sep_0($181).
($185-$186>=0) & (v_sep_init_1038_sep_108_sep_3_sep_111_sep_0_sep_123_sep_0($185,$186,$187)) & (v_sep_init_1038_sep_108_sep_1($185,$186)) -> v_sep_init_1038_sep_108_sep_2_sep_125_sep_0($185,$186,$187).
(($185=0) & (-$188<=0) & (-$186+$188<0)) & (v_sep_init_1038_sep_108_sep_1($185,$186)) -> v_sep_init_1038_sep_108_sep_3_sep_111_sep_0_sep_123_sep_0($185,$186,$188).
$185=0 -> v_sep_init_1038_sep_108_sep_1($185,$186).


v_sep_fail_1553_sep_133_sep_0: X
v_sep_init_1038_sep_108_sep_1: X
v_sep_init_1038_sep_108_sep_2_sep_125_sep_0: X
v_sep_init_1038_sep_108_sep_3_sep_111_sep_0_sep_123_sep_0: X
......
v_sep_fail_1553_sep_133_sep_0: X
v_sep_init_1038_sep_108_sep_1: X
v_sep_init_1038_sep_108_sep_2_sep_125_sep_0: X
v_sep_init_1038_sep_108_sep_3_sep_111_sep_0_sep_123_sep_0: X
...
v_sep_fail_1553_sep_133_sep_0: X
v_sep_init_1038_sep_108_sep_1: X
v_sep_init_1038_sep_108_sep_2_sep_125_sep_0: X
v_sep_init_1038_sep_108_sep_3_sep_111_sep_0_sep_123_sep_0: X
.....
v_sep_fail_1553_sep_133_sep_0: X
v_sep_init_1038_sep_108_sep_1: X
v_sep_init_1038_sep_108_sep_2_sep_125_sep_0: X
v_sep_init_1038_sep_108_sep_3_sep_111_sep_0_sep_123_sep_0: X
......(0=0) & (v_sep_fail_1553_sep_133_sep_0($181)) -> 1=0.
(($181-1=0) & ($182=0) & (-$183>0)) & (v_sep_init_1038_sep_108_sep_2_sep_125_sep_0($182,$184,$183)) -> v_sep_fail_1553_sep_133_sep_0($181).
($185-$186>=0) & (v_sep_init_1038_sep_108_sep_3_sep_111_sep_0_sep_123_sep_0($185,$186,$187)) & (v_sep_init_1038_sep_108_sep_1($185,$186)) -> v_sep_init_1038_sep_108_sep_2_sep_125_sep_0($185,$186,$187).
(($185=0) & (-$188<=0) & (-$186+$188<0)) & (v_sep_init_1038_sep_108_sep_1($185,$186)) -> v_sep_init_1038_sep_108_sep_3_sep_111_sep_0_sep_123_sep_0($185,$186,$188).
$185=0 -> v_sep_init_1038_sep_108_sep_1($185,$186).

           (<init_1038@108:0> = 0) |- P[<init_1038@108:1>](<init_1038@108:0>:int,
                                                           <init_1038@108:1>:int)
        solution:
          P[<fail_1553@133:0>]($189:bool) = false
          P[<init_1038@108:1>]($206:int,$208:int) = true
          P[<<init_1038@108:2>@125:0>]($192:int,$194:int,$196:int) = (0 <= $196)
          P[<<<init_1038@108:3>@111:0>@123:0>]($199:int,$201:int,$203:int) = (0 <= $203)
        
      end HcSolver.solve_ub(61786)[4] (0.018997 sec.)
      begin HcSolver.check_validity(61969)[4]
        input:
          P[<fail_1553@133:0>](<fail_1553@133:0>:bool)|- bot
          
          P[<<init_1038@108:2>@125:0>](0:int,<k_make_array_u_1213@130:1>:int,<k_make_array_u_1213@130:0>:int),
          ((0 > <k_make_array_u_1213@130:0>) && <fail_1553@133:0>) |- P[<fail_1553@133:0>](
          <fail_1553@133:0>:bool)
          
          P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
          P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,<<init_1038@108:2>@125:0>:int),
          (<init_1038@108:0> >= <init_1038@108:1>)
          |- P[<<init_1038@108:2>@125:0>](<init_1038@108:0>:int,<init_1038@108:1>:int,
                                          <<init_1038@108:2>@125:0>:int)
          
          P[<init_1038@108:1>](<init_1038@108:0>:int,<init_1038@108:1>:int),
          ((<init_1038@108:0> = 0) &&
           ((0 <= <<<init_1038@108:3>@111:0>@123:0>) && (<<<init_1038@108:3>@111:0>@123:0> < <init_1038@108:1>)))
          |- P[<<<init_1038@108:3>@111:0>@123:0>](<init_1038@108:0>:int,
                                                  <init_1038@108:1>:int,
                                                  <<<init_1038@108:3>@111:0>@123:0>:int)
          
           (<init_1038@108:0> = 0) |- P[<init_1038@108:1>](<init_1038@108:0>:int,
                                                           <init_1038@108:1>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(61969)[4] (0.001000 sec.)
      solution:
        P[<fail_1553@133:0>]($189:bool) = false
        P[<init_1038@108:1>]($206:int,$208:int) = true
        P[<<init_1038@108:2>@125:0>]($192:int,$194:int,$196:int) = (0 <= $196)
        P[<<<init_1038@108:3>@111:0>@123:0>]($199:int,$201:int,$203:int) = (0 <= $203)
    end YhornInterface.solve(61785)[3] (0.020997 sec.)
    
  end RefTypeInfer.infer_etrs(42921)[2] (0.489926 sec.)
  refinement types:
    main_1546: X
    f_1549: v1:int -> X
    f_1550: v1:int -> v2:int -> X
    f_1551: v1:int -> v2:int -> v3:int -> X
    main_1042: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1397: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    init_1038: v1:int ->
               v2:{v2:int | (v1 <= 0)} ->
               (v3:{v3:int | false} -> (v4:int -> X) -> X) ->
               ((v7:{v7:int | (1 <= v2)} -> (v8:int -> X) -> X) -> X) -> X
    f_k_main_1547: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:unit -> X) -> (v7:int -> (v8:int -> X) -> X) -> X
    k_main_1447: v1:bool ->
                 v2:int -> v3:int -> v4:int -> (v5:unit -> X) -> (v7:int -> (v8:int -> X) -> X) -> v11:bool -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1213: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1553: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1552: var234:int -> var233:int -> var232:int -> var231:unit -> X
    f_k_main_1548: var243:bool ->
                   var242:bool -> var241:int -> var240:int -> var239:int -> (var238:unit -> X) -> var236:int -> X
    fail_1554: var247:bool -> (var246:unit -> X) -> X
    k_make_array_u_1224: var253:int -> var252:int -> (var251:int -> X) -> var249:unit -> X
    k_update_1263: var264:int ->
                   var263:int ->
                   var262:int -> (var261:int -> (var260:int -> X) -> X) -> (var257:int -> X) -> var255:bool -> X
    update_1033: var274:int ->
                 (var273:int -> (var272:int -> X) -> X) -> var269:int -> var268:int -> (var267:int -> X) -> X
  abstraction types:
    main_1546: X
    f_1549: v1:int -> X
    f_1550: v1:int -> v2:int -> X
    f_1551: v1:int -> v2:int -> v3:int -> X
    main_1042: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> X
    k_main_1397: v1:int -> v2:int -> v3:int -> (v4:unit -> X) -> v6:bool -> X
    init_1038: v1:int ->
               v2:int[v2 -> (v1 <= 0)] ->
               (v3:int -> (v4:int -> X) -> X) -> ((v7:int[v7 -> (1 <= v2)] -> (v8:int -> X) -> X) -> X) -> X
    f_k_main_1547: v1:bool -> v2:int -> v3:int -> v4:int -> (v5:unit -> X) -> (v7:int -> (v8:int -> X) -> X) -> X
    k_main_1447: v1:bool ->
                 v2:int -> v3:int -> v4:int -> (v5:unit -> X) -> (v7:int -> (v8:int -> X) -> X) -> v11:bool -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1213: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1553: v1:bool -> (v2:unit -> X) -> X
    f_1552: var234:int -> var233:int -> var232:int -> var231:unit -> X
    f_k_main_1548: var243:bool ->
                   var242:bool -> var241:int -> var240:int -> var239:int -> (var238:unit -> X) -> var236:int -> X
    fail_1554: var247:bool -> (var246:unit -> X) -> X
    k_make_array_u_1224: var253:int -> var252:int -> (var251:int -> X) -> var249:unit -> X
    k_update_1263: var264:int ->
                   var263:int ->
                   var262:int -> (var261:int -> (var260:int -> X) -> X) -> (var257:int -> X) -> var255:bool -> X
    update_1033: var274:int ->
                 (var273:int -> (var272:int -> X) -> X) -> var269:int -> var268:int -> (var267:int -> X) -> X
  
end AbsTypeInfer.refine(42920)[1] (0.494925 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 5)::
Main: main_1546
  main_1546 -> (rand_int f_1549)
  f_1549 x_1487 -> (rand_int (f_1550 x_1487))
  f_1550 x_1487 x_1500 -> (rand_int (f_1551 x_1487 x_1500))
  f_1551 x_1487 x_1500 x_1513 -> (main_1042 x_1487 x_1500 x_1513 (f_1552 x_1487 x_1500 x_1513))
  f_1552 x_1487 x_1500 x_1513 x_1484 -> end
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      0 <= i_1045) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 (i_1045 < n_1044))
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      not (0 <= i_1045)) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 false)
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (x_1451 >= 1) -> (k_main_1394 ())
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (
      not (x_1451 >= 1)) -> (fail_1554 true k_main_1394)
  fail_1553 b k -> {fail} => (k ())
  fail_1554 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (i_1039 >= n_1040) -> (k_init_1322 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) k_init_1322)
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when b_1481 ->
      (init_1038 k_1043 n_1044 (make_array_1030 n_1044) (f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when (not b_1481) -> (k_main_1394 ())
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when b_1477 ->
      (x_1404 i_1045 (f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when (not b_1477) -> (k_main_1394 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when b_1225 ->
      (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when (not b_1225) ->
      (fail_1553 true (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207))
  k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 x_1210 -> (k_make_array_1207 0)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when b_1278 -> (k_update_1260 x_1036)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when (not b_1278) -> (a_1035 j_1037 k_update_1260)
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (k_1043 >= 0) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 (k_1043 <= 0))
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (not (k_1043 >= 0)) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 false)
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (0 <= i_1032) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (not (0 <= i_1032)) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 false)
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (j_1037 > (i_1034 - 1)) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 (j_1037 <= i_1034))
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (not (j_1037 > (i_1034 - 1))) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 false)
Types:
  main_1546 : X
  fail_1553 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1554 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(5-1) Abstracting ... DONE!

(5-2) Checking HORS ... DONE!

Set wp_max_num to 4.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 6)::
Main: main_1546
  main_1546 -> (rand_int f_1549)
  f_1549 x_1487 -> (rand_int (f_1550 x_1487))
  f_1550 x_1487 x_1500 -> (rand_int (f_1551 x_1487 x_1500))
  f_1551 x_1487 x_1500 x_1513 -> (main_1042 x_1487 x_1500 x_1513 (f_1552 x_1487 x_1500 x_1513))
  f_1552 x_1487 x_1500 x_1513 x_1484 -> end
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      0 <= i_1045) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 (i_1045 < n_1044))
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      not (0 <= i_1045)) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 false)
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (x_1451 >= 1) -> (k_main_1394 ())
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (
      not (x_1451 >= 1)) -> (fail_1554 true k_main_1394)
  fail_1553 b k -> {fail} => (k ())
  fail_1554 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (i_1039 >= n_1040) -> (k_init_1322 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) k_init_1322)
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when b_1481 ->
      (init_1038 k_1043 n_1044 (make_array_1030 n_1044) (f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when (not b_1481) -> (k_main_1394 ())
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when b_1477 ->
      (x_1404 i_1045 (f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when (not b_1477) -> (k_main_1394 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when b_1225 ->
      (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when (not b_1225) ->
      (fail_1553 true (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207))
  k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 x_1210 -> (k_make_array_1207 0)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when b_1278 -> (k_update_1260 x_1036)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when (not b_1278) -> (a_1035 j_1037 k_update_1260)
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (k_1043 >= 0) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 (k_1043 <= 0))
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (not (k_1043 >= 0)) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 false)
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (0 <= i_1032) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (not (0 <= i_1032)) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 false)
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (j_1037 > (i_1034 - 1)) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 (j_1037 <= i_1034))
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (not (j_1037 > (i_1034 - 1))) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 false)
Types:
  main_1546 : X
  fail_1553 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1554 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(6-1) Abstracting ... DONE!

(6-2) Checking HORS ... DONE!

Set wp_max_num to 5.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 7)::
Main: main_1546
  main_1546 -> (rand_int f_1549)
  f_1549 x_1487 -> (rand_int (f_1550 x_1487))
  f_1550 x_1487 x_1500 -> (rand_int (f_1551 x_1487 x_1500))
  f_1551 x_1487 x_1500 x_1513 -> (main_1042 x_1487 x_1500 x_1513 (f_1552 x_1487 x_1500 x_1513))
  f_1552 x_1487 x_1500 x_1513 x_1484 -> end
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      0 <= i_1045) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 (i_1045 < n_1044))
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      not (0 <= i_1045)) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 false)
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (x_1451 >= 1) -> (k_main_1394 ())
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (
      not (x_1451 >= 1)) -> (fail_1554 true k_main_1394)
  fail_1553 b k -> {fail} => (k ())
  fail_1554 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (i_1039 >= n_1040) -> (k_init_1322 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) k_init_1322)
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when b_1481 ->
      (init_1038 k_1043 n_1044 (make_array_1030 n_1044) (f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when (not b_1481) -> (k_main_1394 ())
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when b_1477 ->
      (x_1404 i_1045 (f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when (not b_1477) -> (k_main_1394 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when b_1225 ->
      (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when (not b_1225) ->
      (fail_1553 true (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207))
  k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 x_1210 -> (k_make_array_1207 0)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when b_1278 -> (k_update_1260 x_1036)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when (not b_1278) -> (a_1035 j_1037 k_update_1260)
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (k_1043 >= 0) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 (k_1043 <= 0))
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (not (k_1043 >= 0)) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 false)
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (0 <= i_1032) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (not (0 <= i_1032)) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 false)
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (j_1037 > (i_1034 - 1)) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 (j_1037 <= i_1034))
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (not (j_1037 > (i_1034 - 1))) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 false)
Types:
  main_1546 : X
  fail_1553 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1554 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(7-1) Abstracting ... DONE!

(7-2) Checking HORS ... DONE!

Set wp_max_num to 6.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 8)::
Main: main_1546
  main_1546 -> (rand_int f_1549)
  f_1549 x_1487 -> (rand_int (f_1550 x_1487))
  f_1550 x_1487 x_1500 -> (rand_int (f_1551 x_1487 x_1500))
  f_1551 x_1487 x_1500 x_1513 -> (main_1042 x_1487 x_1500 x_1513 (f_1552 x_1487 x_1500 x_1513))
  f_1552 x_1487 x_1500 x_1513 x_1484 -> end
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      0 <= i_1045) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 (i_1045 < n_1044))
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      not (0 <= i_1045)) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 false)
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (x_1451 >= 1) -> (k_main_1394 ())
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (
      not (x_1451 >= 1)) -> (fail_1554 true k_main_1394)
  fail_1553 b k -> {fail} => (k ())
  fail_1554 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (i_1039 >= n_1040) -> (k_init_1322 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) k_init_1322)
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when b_1481 ->
      (init_1038 k_1043 n_1044 (make_array_1030 n_1044) (f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when (not b_1481) -> (k_main_1394 ())
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when b_1477 ->
      (x_1404 i_1045 (f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when (not b_1477) -> (k_main_1394 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when b_1225 ->
      (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when (not b_1225) ->
      (fail_1553 true (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207))
  k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 x_1210 -> (k_make_array_1207 0)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when b_1278 -> (k_update_1260 x_1036)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when (not b_1278) -> (a_1035 j_1037 k_update_1260)
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (k_1043 >= 0) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 (k_1043 <= 0))
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (not (k_1043 >= 0)) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 false)
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (0 <= i_1032) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (not (0 <= i_1032)) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 false)
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (j_1037 > (i_1034 - 1)) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 (j_1037 <= i_1034))
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (not (j_1037 > (i_1034 - 1))) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 false)
Types:
  main_1546 : X
  fail_1553 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1554 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(8-1) Abstracting ... DONE!

(8-2) Checking HORS ... DONE!

Set wp_max_num to 7.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 9)::
Main: main_1546
  main_1546 -> (rand_int f_1549)
  f_1549 x_1487 -> (rand_int (f_1550 x_1487))
  f_1550 x_1487 x_1500 -> (rand_int (f_1551 x_1487 x_1500))
  f_1551 x_1487 x_1500 x_1513 -> (main_1042 x_1487 x_1500 x_1513 (f_1552 x_1487 x_1500 x_1513))
  f_1552 x_1487 x_1500 x_1513 x_1484 -> end
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      0 <= i_1045) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 (i_1045 < n_1044))
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      not (0 <= i_1045)) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 false)
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (x_1451 >= 1) -> (k_main_1394 ())
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (
      not (x_1451 >= 1)) -> (fail_1554 true k_main_1394)
  fail_1553 b k -> {fail} => (k ())
  fail_1554 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (i_1039 >= n_1040) -> (k_init_1322 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) k_init_1322)
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when b_1481 ->
      (init_1038 k_1043 n_1044 (make_array_1030 n_1044) (f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when (not b_1481) -> (k_main_1394 ())
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when b_1477 ->
      (x_1404 i_1045 (f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when (not b_1477) -> (k_main_1394 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when b_1225 ->
      (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when (not b_1225) ->
      (fail_1553 true (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207))
  k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 x_1210 -> (k_make_array_1207 0)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when b_1278 -> (k_update_1260 x_1036)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when (not b_1278) -> (a_1035 j_1037 k_update_1260)
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (k_1043 >= 0) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 (k_1043 <= 0))
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (not (k_1043 >= 0)) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 false)
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (0 <= i_1032) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (not (0 <= i_1032)) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 false)
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (j_1037 > (i_1034 - 1)) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 (j_1037 <= i_1034))
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (not (j_1037 > (i_1034 - 1))) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 false)
Types:
  main_1546 : X
  fail_1553 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1554 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(9-1) Abstracting ... DONE!

(9-2) Checking HORS ... DONE!

Set wp_max_num to 8.
Restart CEGAR-loop.
Program with abstraction types (CEGAR-cycle 10)::
Main: main_1546
  main_1546 -> (rand_int f_1549)
  f_1549 x_1487 -> (rand_int (f_1550 x_1487))
  f_1550 x_1487 x_1500 -> (rand_int (f_1551 x_1487 x_1500))
  f_1551 x_1487 x_1500 x_1513 -> (main_1042 x_1487 x_1500 x_1513 (f_1552 x_1487 x_1500 x_1513))
  f_1552 x_1487 x_1500 x_1513 x_1484 -> end
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      0 <= i_1045) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 (i_1045 < n_1044))
  f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 when (
      not (0 <= i_1045)) -> (k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 false)
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (x_1451 >= 1) -> (k_main_1394 ())
  f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1451 when (
      not (x_1451 >= 1)) -> (fail_1554 true k_main_1394)
  fail_1553 b k -> {fail} => (k ())
  fail_1554 b k -> {fail} => (k ())
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (i_1039 >= n_1040) -> (k_init_1322 a_1041)
  init_1038 i_1039 n_1040 a_1041 k_init_1322 when (not (i_1039 >= n_1040)) ->
      (init_1038 (i_1039 + 1) n_1040 (update_1033 i_1039 a_1041 1) k_init_1322)
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when b_1481 ->
      (init_1038 k_1043 n_1044 (make_array_1030 n_1044) (f_k_main_1547 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1397 i_1045 k_1043 n_1044 k_main_1394 b_1481 when (not b_1481) -> (k_main_1394 ())
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when b_1477 ->
      (x_1404 i_1045 (f_k_main_1548 b_1477 b_1481 i_1045 k_1043 n_1044 k_main_1394))
  k_main_1447 b_1481 i_1045 k_1043 n_1044 k_main_1394 x_1404 b_1477 when (not b_1477) -> (k_main_1394 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when b_1225 ->
      (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 ())
  k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 b_1225 when (not b_1225) ->
      (fail_1553 true (k_make_array_u_1224 i_1032 n_1031 k_make_array_1207))
  k_make_array_u_1224 i_1032 n_1031 k_make_array_1207 x_1210 -> (k_make_array_1207 0)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when b_1278 -> (k_update_1260 x_1036)
  k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 b_1278 when (not b_1278) -> (a_1035 j_1037 k_update_1260)
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (k_1043 >= 0) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 (k_1043 <= 0))
  main_1042 k_1043 n_1044 i_1045 k_main_1394 when (not (k_1043 >= 0)) ->
      (k_main_1397 i_1045 k_1043 n_1044 k_main_1394 false)
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (0 <= i_1032) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1207 when (not (0 <= i_1032)) ->
      (k_make_array_u_1213 i_1032 n_1031 k_make_array_1207 false)
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (j_1037 > (i_1034 - 1)) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 (j_1037 <= i_1034))
  update_1033 i_1034 a_1035 x_1036 j_1037 k_update_1260 when (not (j_1037 > (i_1034 - 1))) ->
      (k_update_1263 i_1034 j_1037 x_1036 a_1035 k_update_1260 false)
Types:
  main_1546 : X
  fail_1553 : (x_1:bool[x_1] -> (unit -> X) -> X)
  fail_1554 : (x_1:bool[x_1] -> (unit -> X) -> X)
  init_1038 : (x_1:int ->
               x_2:int[x_1 <= 0] -> (int -> (int -> X) -> X) -> ((int[x_2 >= 1] -> (int -> X) -> X) -> X) -> X)
  
(10-1) Abstracting ... DONE!

(10-2) Checking HORS ... DONE!

Error trace::
  main_1546 ... --> 
  f_1549 ... --> 
  f_1550 ... --> 
  f_1551 ... --> 
  main_1042 [1/2] ... --> 
  k_main_1397 [1/2] ... --> 
  init_1038 [1/2] ... --> 
  f_k_main_1547 [1/2] ... --> 
  k_main_1447 [1/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1213 [2/2] ... --> 
  fail_1553 ... --> fail -->
  ERROR!

Verification failed (new error path not found)
